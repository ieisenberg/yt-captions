[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "9320"
  },
  {
    "text": "hey everybody uh thanks for coming my name is uh Steve Hoffman and joining me is Rick fast uh we worked on a uh",
    "start": "9320",
    "end": "17279"
  },
  {
    "text": "microservices project at uh orbits together it's what we're going to talk about today uh I'm currently with uh raise.com and Rick is now with Expedia",
    "start": "17279",
    "end": "25560"
  },
  {
    "text": "uh both great Chicago companies both hiring uh check it out if you're in the market",
    "start": "25560",
    "end": "31119"
  },
  {
    "text": "uh so orbits the travel website um uh started back in uh 2000 by the",
    "start": "31119",
    "end": "38480"
  },
  {
    "text": "five major carriers as a uh One-Stop shop for uh booking travel online um",
    "start": "38480",
    "end": "45800"
  },
  {
    "text": "we're going to do a a a quick architecture uh overview history to kind of explain how we went from sort of",
    "start": "45800",
    "end": "52000"
  },
  {
    "text": "Monolithic architecture to services and then finally to um microservices knocker",
    "start": "52000",
    "end": "59280"
  },
  {
    "text": "uh a a microservice talk isn't complete unless you talk about automated pipelines otherwise you're going to be",
    "start": "59280",
    "end": "65560"
  },
  {
    "text": "in a world of pain and hopefully we'll have some time at the end for questions all right so like I said orbits started",
    "start": "65560",
    "end": "71920"
  },
  {
    "text": "back in 2000 uh by the major carriers the architecture was pretty standard of the day you had your web layer that",
    "start": "71920",
    "end": "78880"
  },
  {
    "text": "served up your web you know HTTP content talked to a business layer which communicated with the",
    "start": "78880",
    "end": "84479"
  },
  {
    "text": "carriers the website launched it was basically a single application we did on demand release by hand um and we were",
    "start": "84479",
    "end": "93200"
  },
  {
    "text": "off and running uh and basically what had happened was uh we had slapped a web",
    "start": "93200",
    "end": "99200"
  },
  {
    "text": "facade on top of uh the system you see in this picture uh there's actually a",
    "start": "99200",
    "end": "104240"
  },
  {
    "text": "bunch of these they're called gdss or Global Distribution Systems these are those terminals you see the uh the tellers typing in at the at the airport",
    "start": "104240",
    "end": "111439"
  },
  {
    "text": "that you don't know what they're doing um a lot of cryptic commands all those paper tickets they've been replaced",
    "start": "111439",
    "end": "117159"
  },
  {
    "text": "those boxes of paper tickets they've been replaced by electronic tickets but effectively the systems are still the",
    "start": "117159",
    "end": "122719"
  },
  {
    "text": "same and so when we're talking about talking to the airlines through the business layer we're really talking about communicating to um a GDs the",
    "start": "122719",
    "end": "130879"
  },
  {
    "text": "first one that orbit hooked up to in 2000 was uh called World span still around today and in the um 2003 time",
    "start": "130879",
    "end": "138720"
  },
  {
    "text": "frame uh we hooked up to our second GDs which was saber Now American Airlines",
    "start": "138720",
    "end": "143959"
  },
  {
    "text": "actually uses saber so if you booked an American airline ticket uh and we booked",
    "start": "143959",
    "end": "149080"
  },
  {
    "text": "it in saber it actually saved the airline money and so that was the economics of it uh American Airline",
    "start": "149080",
    "end": "155400"
  },
  {
    "text": "around the same time decided they wanted a consumer website so we were happy to provide the connectivity uh Northwest",
    "start": "155400",
    "end": "161040"
  },
  {
    "text": "also got into the game and we provided connectivity for them as well and pretty soon we saw this architecture wasn't",
    "start": "161040",
    "end": "167400"
  },
  {
    "text": "going to scale right so in the 2004 time frame we switched to a Services model",
    "start": "167400",
    "end": "173560"
  },
  {
    "text": "around a uh now defunct uh Java technology called Genie um and the idea",
    "start": "173560",
    "end": "179720"
  },
  {
    "text": "was was that each of these Services would evolve independently we'd have different release cycles and everything",
    "start": "179720",
    "end": "184840"
  },
  {
    "text": "would be great and we kind of went along this line for a while we hooked up more backends like Amadeus uh Northwest",
    "start": "184840",
    "end": "190319"
  },
  {
    "text": "merged with another carrier American hooked up to saber directly uh so they went away orbits bought more Brands like",
    "start": "190319",
    "end": "196720"
  },
  {
    "text": "ebookers and Cheap Tickets American Express needed connectivity um not going to show you everything a lot happened",
    "start": "196720",
    "end": "203040"
  },
  {
    "text": "over the 15 16 years of orbits history uh but generally the idea is that your your system's always evolving and so you",
    "start": "203040",
    "end": "210239"
  },
  {
    "text": "need to evolve with it um so fast forward to 2015 when we",
    "start": "210239",
    "end": "215400"
  },
  {
    "text": "started the microservices experiment uh orbits had multiple Brands both websites and web services so for instance if",
    "start": "215400",
    "end": "221200"
  },
  {
    "text": "you're familiar with like kayak they used a XML web service that we provided to them we connected to multiple",
    "start": "221200",
    "end": "227319"
  },
  {
    "text": "backends uh the entire system was comprised of over 500 separate applications running across thousands of",
    "start": "227319",
    "end": "233799"
  },
  {
    "text": "instances uh in uh multiple data centers and uh deployments were more less daily",
    "start": "233799",
    "end": "241640"
  },
  {
    "text": "and then of course at the end of last year xedia came in and bought the lot so as you can imagine uh",
    "start": "241640",
    "end": "250159"
  },
  {
    "text": "applications that uh evolve organically over a decade tend to occur a little bit of process uh in",
    "start": "250159",
    "end": "256959"
  },
  {
    "text": "2010 uh Orbitz was doing uh two releases a year uh you can imagine how well those",
    "start": "256959",
    "end": "262560"
  },
  {
    "text": "releases went I'll give you a hint it was bad uh by 2012 which is when this",
    "start": "262560",
    "end": "267639"
  },
  {
    "text": "picture was taken um it was about 18 days from code to production and what",
    "start": "267639",
    "end": "274039"
  },
  {
    "text": "this picture was was trying to um what they were trying to map out was all the steps necessary to get from code to",
    "start": "274039",
    "end": "280800"
  },
  {
    "text": "production and a lot of these were very very manual steps uh and so a lot of time was spent trying to eliminate as",
    "start": "280800",
    "end": "287199"
  },
  {
    "text": "many manual steps as possible uh they got it down to about 1 to four days um",
    "start": "287199",
    "end": "292240"
  },
  {
    "text": "you also saw Conway's law play this is where uh development had their tool which was a tool called glue for",
    "start": "292240",
    "end": "297800"
  },
  {
    "text": "deploying Java applications operations used uh CF engine and then later Chef um",
    "start": "297800",
    "end": "303720"
  },
  {
    "text": "and this kind of mismatch between the toolage uh sort of caused people to not",
    "start": "303720",
    "end": "309520"
  },
  {
    "text": "create more services so even though we had a service oriented architecture uh the pain involved was just I guess more",
    "start": "309520",
    "end": "316240"
  },
  {
    "text": "than they could bear and they just lump more and more code in and so 15 years later we'd come full circle instead of",
    "start": "316240",
    "end": "322720"
  },
  {
    "text": "having one monolithic application we now had lots and lots of Monolithic services so one of these services",
    "start": "322720",
    "end": "330240"
  },
  {
    "text": "uh Rick was working on uh he came over to my desk and he said hey I've got this big application I want to break up and I",
    "start": "330240",
    "end": "336160"
  },
  {
    "text": "want to do a sort of 12 Factor microservice architecture and I want to use Docker can we run Docker I said I",
    "start": "336160",
    "end": "343080"
  },
  {
    "text": "don't know let's see if we can figure it out um and so when we when we took this out",
    "start": "343080",
    "end": "350240"
  },
  {
    "text": "we decided Well let's let's see if we can shave off all that human process",
    "start": "350240",
    "end": "355840"
  },
  {
    "text": "right let's find a way so that at some point human involvement stops and then it's just robotss",
    "start": "355840",
    "end": "362080"
  },
  {
    "text": "after so we started with uh this box that we called the rickbot right we",
    "start": "362080",
    "end": "367240"
  },
  {
    "text": "already had Chef in place and the the the theory was that we would uh use Chef to deploy Docker and then we'd launch",
    "start": "367240",
    "end": "373479"
  },
  {
    "text": "our applications on top of this but if you've ever used Docker hopefully you",
    "start": "373479",
    "end": "378960"
  },
  {
    "text": "have um it comes with certain challenges for instance if all three of these were uh the same service and they all listen",
    "start": "378960",
    "end": "384680"
  },
  {
    "text": "on a particular Port they're going to they're going to clash right and so Docker has this uh Network ad uh Network",
    "start": "384680",
    "end": "391400"
  },
  {
    "text": "translation layer so that everybody gets a random port and so each of these Services finding each other becomes a",
    "start": "391400",
    "end": "397319"
  },
  {
    "text": "problem uh you also have the problem of like logs right if your application is like logging the disc dis it's actually",
    "start": "397319",
    "end": "403000"
  },
  {
    "text": "logging inside the docker container where nobody can get at it uh so we needed to solve some of these",
    "start": "403000",
    "end": "409520"
  },
  {
    "text": "problems so the first thing we added to this picture was uh uh this box here if",
    "start": "409520",
    "end": "415039"
  },
  {
    "text": "you're not familiar with this is console it's a eventually consistent service registry from hashicorp um we run this",
    "start": "415039",
    "end": "421400"
  },
  {
    "text": "locally on every server that we run Docker images on um and the applications",
    "start": "421400",
    "end": "428319"
  },
  {
    "text": "basically register and find other services via console and when we launch the applications we tell each",
    "start": "428319",
    "end": "436000"
  },
  {
    "text": "application what it's IP of the server it's on as well as its external port in this case it's 310002 so that when it",
    "start": "436000",
    "end": "443599"
  },
  {
    "text": "registers with console sorry so when it registers with console um",
    "start": "443599",
    "end": "450039"
  },
  {
    "text": "um everything can be found right uh to deal with the logging problem we uh had",
    "start": "450039",
    "end": "457800"
  },
  {
    "text": "just converted over to using um an elk stack elastic search with cabana and so what we did was we dropped a log stash",
    "start": "457800",
    "end": "463800"
  },
  {
    "text": "agent on every box so that we basically bypassed the default logging and we used",
    "start": "463800",
    "end": "469039"
  },
  {
    "text": "a network logger again because we knew the IP of the uh machine we were on we",
    "start": "469039",
    "end": "474319"
  },
  {
    "text": "would just use a well-known Port that we ran the log Station Agent on and the chef configured log stash uh would",
    "start": "474319",
    "end": "480879"
  },
  {
    "text": "forward it to the appropriate um out cluster um and then of course uh you got",
    "start": "480879",
    "end": "487319"
  },
  {
    "text": "to have metrics uh orbits uh you may or may not know but orbits uh open sourced",
    "start": "487319",
    "end": "494039"
  },
  {
    "text": "graphite back in 2008 uh we have a lot of graphs uh and so we followed the same",
    "start": "494039",
    "end": "500680"
  },
  {
    "text": "pattern what we did was we dropped a uh local agent on the box uh there wasn't a",
    "start": "500680",
    "end": "505840"
  },
  {
    "text": "relay for this uh Rick wrote it it's basically a little go relay called Mr Pickles that is configured by shaft to",
    "start": "505840",
    "end": "512479"
  },
  {
    "text": "point to the appropriate graphite cluster and again because we knew every Docker container knew its IP it would",
    "start": "512479",
    "end": "518800"
  },
  {
    "text": "basically connect to a well-known port and then Chef would configure Mr Pickles to forward it to the appropriate uh",
    "start": "518800",
    "end": "526320"
  },
  {
    "text": "destination okay so this works great but you know if if you were at Sam's talk or anything before you know that you know",
    "start": "526320",
    "end": "532800"
  },
  {
    "text": "you're going to have lots and lots of these boxes you're not going to like SSH all over the place and type docka run this docka run that what you really want",
    "start": "532800",
    "end": "539200"
  },
  {
    "text": "is you want something to manage your Docker containers across lots of machines luckily around the same time",
    "start": "539200",
    "end": "544640"
  },
  {
    "text": "that we came to this conclusion um mesos uh had just announced support first",
    "start": "544640",
    "end": "550959"
  },
  {
    "text": "class support for Docker and so this is uh this is a picture from um the uh the",
    "start": "550959",
    "end": "557600"
  },
  {
    "text": "mesus website uh of their architecture you basically run um uh you basically have a master or",
    "start": "557600",
    "end": "565120"
  },
  {
    "text": "hopefully multiple Masters that go through a zookeeper election uh and then there's a bunch of slave notes that call",
    "start": "565120",
    "end": "570320"
  },
  {
    "text": "them agents now and on top of that you run auler which then launches applications",
    "start": "570320",
    "end": "577720"
  },
  {
    "text": "on the particular uh mesos agents um in this case we're really talking about",
    "start": "577720",
    "end": "583120"
  },
  {
    "text": "using the marathon scheduler uh so our picture looks something like this we run the marathon schedule there provides a",
    "start": "583120",
    "end": "588680"
  },
  {
    "text": "UI and an API for us to communicate with we find the master the elected Master",
    "start": "588680",
    "end": "593920"
  },
  {
    "text": "through zuker and it manages the slaves and this is where we'll launch Docker so our picture now looks something more",
    "start": "593920",
    "end": "600320"
  },
  {
    "text": "like this every one of these rickbot boxes becomes a mesos agent and we use",
    "start": "600320",
    "end": "605959"
  },
  {
    "text": "Marathon as the mechanism by which we communicate through to then launch the",
    "start": "605959",
    "end": "611240"
  },
  {
    "text": "docker containers on our behalf um now there are some",
    "start": "611240",
    "end": "616760"
  },
  {
    "text": "applications where they're not console aware and so they have to be",
    "start": "616760",
    "end": "622160"
  },
  {
    "text": "discoverable via a name and a port and for that we used um an open source project called bamboo which communicates",
    "start": "622160",
    "end": "629120"
  },
  {
    "text": "with Marathon uh to basically rewrite its uh routing rules so we have a static Farm",
    "start": "629120",
    "end": "635079"
  },
  {
    "text": "of H proxy boxes behind a load Bouncer and that's how the routing to the services happens at the",
    "start": "635079",
    "end": "642560"
  },
  {
    "text": "edges um and so that's basically the setup right but the the real magic",
    "start": "642720",
    "end": "650079"
  },
  {
    "text": "really happens once you start stitching this environment along with other environments together in an automated",
    "start": "650079",
    "end": "655279"
  },
  {
    "text": "pipeline for that we tried to use Jenkins and hopefully with his little human involvement as possible we're just",
    "start": "655279",
    "end": "661160"
  },
  {
    "text": "going to walk us through some of that",
    "start": "661160",
    "end": "666360"
  },
  {
    "text": "hello so we had a pretty good use case for microservices uh and that was in our SEO landing pages on orbits um they used",
    "start": "666480",
    "end": "675720"
  },
  {
    "text": "to look like this they actually don't look like this anymore they're now powered by Expedia but um for the case",
    "start": "675720",
    "end": "682360"
  },
  {
    "text": "or for this use case or this case study we're going to talk about it from orbits about a year ago um and this is an",
    "start": "682360",
    "end": "688360"
  },
  {
    "text": "orbits landing page uh ideally if you Google Chicago hotels this is close to the top we strive to",
    "start": "688360",
    "end": "694440"
  },
  {
    "text": "get it as close to the top as we can uh if you Google orbit Chicago hotels it will be at the top um and these pages",
    "start": "694440",
    "end": "701560"
  },
  {
    "text": "are comprised of what we call modules and these modules on the front end are",
    "start": "701560",
    "end": "707120"
  },
  {
    "text": "just these little squares of content uh and they come from different sources on the back end and the application that",
    "start": "707120",
    "end": "713079"
  },
  {
    "text": "they come from on the back end is this large monolithic service that I'm going to talk about um and I'll talk about a",
    "start": "713079",
    "end": "720160"
  },
  {
    "text": "specific module in this talk which is the editorial module um and the editorial module represents business",
    "start": "720160",
    "end": "726320"
  },
  {
    "text": "user contributed content copy and images um and it's it's retrieved from our CMS",
    "start": "726320",
    "end": "733040"
  },
  {
    "text": "system on the back end which was uh powered by solar so our architecture looked kind of",
    "start": "733040",
    "end": "739639"
  },
  {
    "text": "like this uh the actual orbits website on the front and then our content orchestration service on the back end um",
    "start": "739639",
    "end": "746720"
  },
  {
    "text": "we call it Flex uh but for the for this talk we'll just call it the content orchestration service um and so it's",
    "start": "746720",
    "end": "753880"
  },
  {
    "text": "comprised of all these modules and all these modules are are basically implementations of a Java interface that",
    "start": "753880",
    "end": "760800"
  },
  {
    "text": "will retrieve the data that's merged with the templates on the front end and so they're all kind of generic this is a",
    "start": "760800",
    "end": "767600"
  },
  {
    "text": "like a dynamic page building system basically and unfortunately though it crosses lots of the lines of business",
    "start": "767600",
    "end": "774560"
  },
  {
    "text": "that we support at orbits so hotels search uh content uh air all that stuff",
    "start": "774560",
    "end": "781639"
  },
  {
    "text": "cars um and so you've got a lot of teams because we're we're kind of organized based on mostly verticals um",
    "start": "781639",
    "end": "790240"
  },
  {
    "text": "and so there's many data sources there's many teams contributing and this diagram only shows three but there's actually more like 40 modules and probably like",
    "start": "790240",
    "end": "796560"
  },
  {
    "text": "10 teams contributing and so you can imagine the types of problems we have um",
    "start": "796560",
    "end": "801800"
  },
  {
    "text": "multiple teams stepping on each other's toes dependency hell uh there's a major lack of resiliency with everybody living",
    "start": "801800",
    "end": "808160"
  },
  {
    "text": "in the same JV M uh it's like you know somebody can overuse threadpool like you",
    "start": "808160",
    "end": "814880"
  },
  {
    "text": "know use a bunch of resources and basically ruin it for everybody uh and so when you have all these teams",
    "start": "814880",
    "end": "820800"
  },
  {
    "text": "contributing it's easy for somebody to take down the whole stack uh we looked into things like osgi and modularization",
    "start": "820800",
    "end": "827560"
  },
  {
    "text": "inside the jvm but none of them really seem to scale well and especially weren't Dev friendly um and also the",
    "start": "827560",
    "end": "834360"
  },
  {
    "text": "worst part was One release Cadence so uh the the typical larger service at orbits",
    "start": "834360",
    "end": "840160"
  },
  {
    "text": "uh you know the deployment had to be scheduled and typically it was you know weekly uh some applications were you",
    "start": "840160",
    "end": "845680"
  },
  {
    "text": "know on the order of days um but each release typically contained a lot of commits from a lot of",
    "start": "845680",
    "end": "852360"
  },
  {
    "text": "teams and so what we decided to do as you can imagine is uh we split the modules out into separately Deployable",
    "start": "852360",
    "end": "859199"
  },
  {
    "text": "microservices um and the applications we decided up front that we're going to uh you know rewrite our platform so that",
    "start": "859199",
    "end": "866079"
  },
  {
    "text": "everything out of the box can kind of support uh the 12 Factor PR principles which we could probably do a whole other",
    "start": "866079",
    "end": "871199"
  },
  {
    "text": "talk on but uh really what this means is simple configuration stateless uh delivering your schema as code with your",
    "start": "871199",
    "end": "877920"
  },
  {
    "text": "applications uh quick startup graceful shutdown uh things like that um and all",
    "start": "877920",
    "end": "883240"
  },
  {
    "text": "these services are just using uh HTTP with Json or protocol buffers um but",
    "start": "883240",
    "end": "888959"
  },
  {
    "text": "there's separate builds there's separate code repositories and even separate Technologies if they needed to be and so",
    "start": "888959",
    "end": "896000"
  },
  {
    "text": "the teams end up looking more like this so the hotel team has their module the search team has their module Etc um and",
    "start": "896000",
    "end": "902160"
  },
  {
    "text": "this allows the teams to manage their own deployments and releases and really",
    "start": "902160",
    "end": "907600"
  },
  {
    "text": "it gives them everybody kind of resiliency like the whole system can't come down from one of these guys because",
    "start": "907600",
    "end": "913440"
  },
  {
    "text": "the content orchestration Services now just making API calls at these things and we're using circuit breakers and timeouts to ensure that one module can't",
    "start": "913440",
    "end": "921160"
  },
  {
    "text": "affect the page so you know when a module goes down you might be on a landing page and you might miss some",
    "start": "921160",
    "end": "927480"
  },
  {
    "text": "copy or like an image or something like that but overall the page survived um",
    "start": "927480",
    "end": "933519"
  },
  {
    "text": "and so the other nice thing about this architecture was we decided to peel off the back of this large service and so",
    "start": "933519",
    "end": "939680"
  },
  {
    "text": "the rest of the company doesn't know about this you know we didn't and we didn't have to boil the ocean to like uh rebuild this we can kind of just peel",
    "start": "939680",
    "end": "945759"
  },
  {
    "text": "one module off at a time and so it was completely transparent to everyone else anyway um before we decided to go",
    "start": "945759",
    "end": "954079"
  },
  {
    "text": "continuous delivery we had a process that looked kind of like this um and so",
    "start": "954079",
    "end": "959399"
  },
  {
    "text": "our builds were mostly triggered by check-in but some were on Demand only uh",
    "start": "959399",
    "end": "965079"
  },
  {
    "text": "but we the the worst part was really that we built the same code numerous times and so we call them betas you",
    "start": "965079",
    "end": "970880"
  },
  {
    "text": "might call them snapshots and this makes sense for like libraries and stuff but when you're talking about your services",
    "start": "970880",
    "end": "976600"
  },
  {
    "text": "you know we really want every every build to be it doesn't necessarily have to go to production but we want it to be",
    "start": "976600",
    "end": "982360"
  },
  {
    "text": "able to if it wanted to or if we wanted it to um and so the way we were doing it was we were building testing discarding",
    "start": "982360",
    "end": "989000"
  },
  {
    "text": "in building testing discarded and then it's Tuesday and we want to release so we call it 1.2 and then we build it and",
    "start": "989000",
    "end": "995800"
  },
  {
    "text": "we test it and we deploy it and at this point it's got 20 commits in it and if something is broken it's a little harder",
    "start": "995800",
    "end": "1002440"
  },
  {
    "text": "to know what changed um and so in the new world we want every Bild to be a",
    "start": "1002440",
    "end": "1007839"
  },
  {
    "text": "release candidate which is why we implemented continuous delivery with Jenkins Docker",
    "start": "1007839",
    "end": "1013519"
  },
  {
    "text": "anible and Marathon but first we want people to create new apps",
    "start": "1013519",
    "end": "1021199"
  },
  {
    "text": "when appropriate uh we don't want people to keep tagging on things that don't fit on existing Services which is a problem",
    "start": "1021199",
    "end": "1027360"
  },
  {
    "text": "that we had so we wanted to cheapen the or make it cheaper to create new Services um and so this is the second",
    "start": "1027360",
    "end": "1034079"
  },
  {
    "text": "time we've seen this picture today actually uh we used Yen uh it's a it's a JavaScript library for uh scaffolding",
    "start": "1034079",
    "end": "1041480"
  },
  {
    "text": "projects uh basically you just create a bunch of templates uh it's usually used for you know things more in the front",
    "start": "1041480",
    "end": "1048280"
  },
  {
    "text": "end uh ecosystem but it works fine for us uh we were building Java Gradle",
    "start": "1048280",
    "end": "1053559"
  },
  {
    "text": "projects um and so it basically would give us a a skeleton project with all of",
    "start": "1053559",
    "end": "1059480"
  },
  {
    "text": "our kind of chassis libraries baked in as dependencies so uh it also would do",
    "start": "1059480",
    "end": "1065640"
  },
  {
    "text": "things like prompt you like did you want to connect to solar did you want to connect to a certain database uh and you could basically pre-configure some of",
    "start": "1065640",
    "end": "1073080"
  },
  {
    "text": "your wirings in um and then the code base is obviously generated and then we push it to a git repo and at orbits we",
    "start": "1073080",
    "end": "1079440"
  },
  {
    "text": "use stash for that and one of the nice things about stash was that we could build in kind of a gate at the beginning",
    "start": "1079440",
    "end": "1086520"
  },
  {
    "text": "and we didn't want Gates but we needed something to you know so we weren't just winging stuff into production",
    "start": "1086520",
    "end": "1091880"
  },
  {
    "text": "willy-nilly um and so we do that through the pole request and we use a plugin called the",
    "start": "1091880",
    "end": "1098000"
  },
  {
    "text": "work Zone plugin for stash uh which basically protects master and it uh",
    "start": "1098000",
    "end": "1104159"
  },
  {
    "text": "makes it so we can't just merge our code uh means we have to make a poll request with a minimum number reviewers so the",
    "start": "1104159",
    "end": "1110240"
  },
  {
    "text": "committer here he's made the poll request and you can see he can't merge and the reviewer can't merge either but",
    "start": "1110240",
    "end": "1117120"
  },
  {
    "text": "he can review the code and approve it and then once he does that we have a bot",
    "start": "1117120",
    "end": "1122640"
  },
  {
    "text": "that can actually merge and so he's the only guy that can get our stuff to master and then once that happens the",
    "start": "1122640",
    "end": "1127679"
  },
  {
    "text": "Jenkin stat commit Hook is triggered and then that's the last thing that humans do in our pipeline unless we explicitly",
    "start": "1127679",
    "end": "1135400"
  },
  {
    "text": "configure a button later on but I'll talk about that in a little bit",
    "start": "1135400",
    "end": "1140720"
  },
  {
    "text": "so the stash commit hook triggers the Jenkins Pipeline and our first cut at the pipeline uh had four step types uh",
    "start": "1141440",
    "end": "1149120"
  },
  {
    "text": "and they were just Jenkins jobs uh built using the job DSL plugin which kind of is a way to template out uh Jenkins job",
    "start": "1149120",
    "end": "1156559"
  },
  {
    "text": "so that you're not like creating them through a UI which obviously wasn't going to scale for the number of services we were building um and we had",
    "start": "1156559",
    "end": "1163559"
  },
  {
    "text": "four step types there was the build and push which would actually compile and build your artifact and push it to to",
    "start": "1163559",
    "end": "1168840"
  },
  {
    "text": "some artifact repo um we have the deployment step uh acceptance tests and",
    "start": "1168840",
    "end": "1173880"
  },
  {
    "text": "then our paper trail which is change ticket creation and updates and I'll talk about all these in just a second uh",
    "start": "1173880",
    "end": "1180520"
  },
  {
    "text": "and this is a simplified view of what our pipelines would look like we had over like 20 environments uh we did a",
    "start": "1180520",
    "end": "1186280"
  },
  {
    "text": "lot of stuff in parallel we had lots of partners that required us to be in uh separate environments uh for example",
    "start": "1186280",
    "end": "1192000"
  },
  {
    "text": "like American Express stuff like that they needed their own stack um so we ended up with a lot of environments and so we wanted our pipeline to be able to",
    "start": "1192000",
    "end": "1198720"
  },
  {
    "text": "do that fast and also parallel um and so ultimately we build",
    "start": "1198720",
    "end": "1203760"
  },
  {
    "text": "the application the application name and the version are really the only two pieces of information the rest of the",
    "start": "1203760",
    "end": "1209520"
  },
  {
    "text": "pipeline needs so we'll talk about the steps now the uh Jenkins pipeline build job",
    "start": "1209520",
    "end": "1216440"
  },
  {
    "text": "pulls the latest for master uh builds and runs our unit test in our case most of these Services were uh spring boot",
    "start": "1216440",
    "end": "1222360"
  },
  {
    "text": "applications built with Gradle um and so our first use case was let's just support gradal and so uh we do the",
    "start": "1222360",
    "end": "1229320"
  },
  {
    "text": "Gradle build our Gradle configuration file says hey this is version 1.2 now we say it's 1.2 but that's not",
    "start": "1229320",
    "end": "1237120"
  },
  {
    "text": "what we're actually going to publish um we use the Jenkins build number to cre excuse me to create a a unique release",
    "start": "1237120",
    "end": "1244280"
  },
  {
    "text": "candidate version right so we built the jar and then we interpolate that value which is say this is the 17th build so",
    "start": "1244280",
    "end": "1250880"
  },
  {
    "text": "now we have this unique version number um and it's a nice looking version number that so we we know what order it",
    "start": "1250880",
    "end": "1257360"
  },
  {
    "text": "was deployed in so we know that 12.18 is a newer version um you'll see a lot of people using things like get commit",
    "start": "1257360",
    "end": "1264320"
  },
  {
    "text": "hashes which simplifies this process but it also makes it so you're like you don't know if it's a newer version or an",
    "start": "1264320",
    "end": "1270039"
  },
  {
    "text": "older version um anyway so normally we would take our war",
    "start": "1270039",
    "end": "1276799"
  },
  {
    "text": "file or jar file and push it to Nexus or artifactory or one of those types of artifact repos um but we do what we do",
    "start": "1276799",
    "end": "1282960"
  },
  {
    "text": "next actually is we build a Docker image um and so we use the Gradle integration with Docker to do that uh in retrospect",
    "start": "1282960",
    "end": "1290320"
  },
  {
    "text": "after we started having different types of builds I wish we hadn't but we did um but essentially we had a very simple",
    "start": "1290320",
    "end": "1296840"
  },
  {
    "text": "Docker file which used our base orbits uh Java 8 image uh then we' Bas we'd",
    "start": "1296840",
    "end": "1301919"
  },
  {
    "text": "copy this newly built artifact into the image set the working directory and then set a simple entry point um and so now",
    "start": "1301919",
    "end": "1309440"
  },
  {
    "text": "we have a Docker image and we tag it with our unique release version so 1.2.7 that's our",
    "start": "1309440",
    "end": "1316360"
  },
  {
    "text": "Docker image tag and it's ready to get pushed uh we used to push them to Docker Hub uh but we actually owned artifactory",
    "start": "1316360",
    "end": "1322960"
  },
  {
    "text": "and it has actually very nice uh Docker registry and so we push our version artifact here and so the rest of the",
    "start": "1322960",
    "end": "1329440"
  },
  {
    "text": "pipeline is going to pull this image by this tag from artifactory and so the",
    "start": "1329440",
    "end": "1334840"
  },
  {
    "text": "rest of the pipeline can access it deploy step this changed significantly as we",
    "start": "1334840",
    "end": "1342279"
  },
  {
    "text": "worked on it and our first shot was really let's just use Docker that's what we just wanted to deploy with docker ER",
    "start": "1342279",
    "end": "1349279"
  },
  {
    "text": "and Java de yeah Java deployments have been kind of pain in my ass for my",
    "start": "1349279",
    "end": "1355919"
  },
  {
    "text": "career and so this was nice it was nice that I could just push them out there and it was pretty reliable and a very",
    "start": "1355919",
    "end": "1361080"
  },
  {
    "text": "simple deployment uh we used a tool called anible uh which is a configuration management tool that's",
    "start": "1361080",
    "end": "1366760"
  },
  {
    "text": "good for Rolling across toasts and executing remote commands it has a nice Docker uh module and so we used that",
    "start": "1366760",
    "end": "1373880"
  },
  {
    "text": "first and what this did you can see here in this picture is uh relying on like a",
    "start": "1373880",
    "end": "1379720"
  },
  {
    "text": "fixed uh inventory of hosts um it rolls through shuts down the old version",
    "start": "1379720",
    "end": "1387240"
  },
  {
    "text": "launches our new version in this case 1.2.7 uh waits for the healthin point to",
    "start": "1387240",
    "end": "1392520"
  },
  {
    "text": "come online we'll talk about that in a minute and then once everything's good we shut down the old one we move to the",
    "start": "1392520",
    "end": "1397880"
  },
  {
    "text": "next host we're doing this in serial kind of took a while um but I was happy",
    "start": "1397880",
    "end": "1403679"
  },
  {
    "text": "we we we did a Docker deployment but there was a ton of problems and we we we knew there were going to be problems and",
    "start": "1403679",
    "end": "1410039"
  },
  {
    "text": "we you know we felt them soon uh failures are kind of weird uh you know",
    "start": "1410039",
    "end": "1415880"
  },
  {
    "text": "part of the part of a single environment could fail um the whole environment could fail do you roll back just that",
    "start": "1415880",
    "end": "1421760"
  },
  {
    "text": "host do you roll back the whole environment do you try do you try to rryy uh we're doing this yaml files just",
    "start": "1421760",
    "end": "1428039"
  },
  {
    "text": "recently I think they added kind of TR catch semantics in anible but ultimately it was a bunch of logic that we didn't",
    "start": "1428039",
    "end": "1433520"
  },
  {
    "text": "really want to own um and also we're just running Docker um Sam mentioned",
    "start": "1433520",
    "end": "1438760"
  },
  {
    "text": "this earlier with things like Docker swarm it's not fully supervising your",
    "start": "1438760",
    "end": "1444360"
  },
  {
    "text": "containers after they run so we're deploying these things in a cloud environment where guys will shut down VMS because they have to move them to",
    "start": "1444360",
    "end": "1450640"
  },
  {
    "text": "another physical host when Docker comes back up it doesn't know what it was running because it's a new Docker and so",
    "start": "1450640",
    "end": "1457279"
  },
  {
    "text": "we noticed like microservice instances just disappearing here and there um also",
    "start": "1457279",
    "end": "1462720"
  },
  {
    "text": "we're deploying to a fixed number of hosts and so once we fill those hosts up then we have to create another Pool and",
    "start": "1462720",
    "end": "1468399"
  },
  {
    "text": "that would make things a lot more complicated and so you know the clear answer here is we need to use",
    "start": "1468399",
    "end": "1474039"
  },
  {
    "text": "auler and so we decided to try something new uh we stuck with anible because I",
    "start": "1474039",
    "end": "1479159"
  },
  {
    "text": "think it's a nice tool for uh doing deployments um we built our own anible",
    "start": "1479159",
    "end": "1484240"
  },
  {
    "text": "module that uh would do a marathon deploy uh and I think and this was this was a couple years ago I think nowadays",
    "start": "1484240",
    "end": "1490559"
  },
  {
    "text": "uh there's probably a uh one open source one available for anible I know there's one for terraform um but essentially can",
    "start": "1490559",
    "end": "1498559"
  },
  {
    "text": "just give it the image name with our releasee version number of instances and you know some conf configuration and",
    "start": "1498559",
    "end": "1504600"
  },
  {
    "text": "then Marathon can handle all the complexity for us um and so this is my",
    "start": "1504600",
    "end": "1510480"
  },
  {
    "text": "picture of the rickbot uh server image that Steve showed earlier um and we just added one new kind of local helper",
    "start": "1510480",
    "end": "1516480"
  },
  {
    "text": "service which is the mesos agent and so this allows us to participate in the mesos cluster and allows us to use",
    "start": "1516480",
    "end": "1522200"
  },
  {
    "text": "Marathon to do deployments so same deal our Jenkins uh",
    "start": "1522200",
    "end": "1528000"
  },
  {
    "text": "Deo employ job pulls the anible Playbook but this time the Playbook doesn't care about a rolling set of ho",
    "start": "1528000",
    "end": "1534679"
  },
  {
    "text": "or set of hosts it just cares about where marathon is and so marathon is just an HTP API that we can interact",
    "start": "1534679",
    "end": "1541520"
  },
  {
    "text": "with and if you think about it is if our whole cluster of mesos uh agents as a",
    "start": "1541520",
    "end": "1547840"
  },
  {
    "text": "single computer uh you can think of marathon as a nit D um and it's just a",
    "start": "1547840",
    "end": "1553080"
  },
  {
    "text": "simple HTTP API and so our Playbook really just calls that with a configuration",
    "start": "1553080",
    "end": "1559120"
  },
  {
    "text": "um one thing to note though is that marathon is a synchronous so when you when you send it Json it says okay I got",
    "start": "1559120",
    "end": "1564640"
  },
  {
    "text": "it thanks and it returns and so we have to manage that ourself otherwise our pipeline's going to end before the first",
    "start": "1564640",
    "end": "1570919"
  },
  {
    "text": "environment even finished deploying or failing so we end up with something like this",
    "start": "1570919",
    "end": "1577880"
  },
  {
    "text": "this is weird HTTP pseudo code but essentially we our Playbook checks to",
    "start": "1577880",
    "end": "1583559"
  },
  {
    "text": "see if it exists the application itself if it doesn't then we do a post with a Json document specifying the image uh",
    "start": "1583559",
    "end": "1591559"
  },
  {
    "text": "configuration things like that um mostly Docker related uh if it does exist then",
    "start": "1591559",
    "end": "1597360"
  },
  {
    "text": "we do a put uh pretty much with the same configuration and then we get a deployment ID back and then we have to",
    "start": "1597360",
    "end": "1603159"
  },
  {
    "text": "pull this deployment endpoint until that disappears and that's how we know that it was successful I wish there was a better way um but at least then there",
    "start": "1603159",
    "end": "1611080"
  },
  {
    "text": "wasn't uh and then we basically set a timeout so if it takes longer than 2 minutes then it probably failed and so",
    "start": "1611080",
    "end": "1617279"
  },
  {
    "text": "the an module itself will then return but basically we use the anible module to make it seem blocking to the rest of",
    "start": "1617279",
    "end": "1624000"
  },
  {
    "text": "the pipeline so that the pipeline doesn't keep going uh one other piece of our marathon configuration that I think",
    "start": "1624000",
    "end": "1629799"
  },
  {
    "text": "is important is we have different types of configuration that we deal with at work um a lot of the configuration that",
    "start": "1629799",
    "end": "1635799"
  },
  {
    "text": "we used to deal with at orbits like our metrics our logging service Discovery stuff like that was stuff we had to tell",
    "start": "1635799",
    "end": "1641039"
  },
  {
    "text": "each application through configuration files that's baked into the infrastructure now and so Chef manages",
    "start": "1641039",
    "end": "1646679"
  },
  {
    "text": "that for us when it stands up our rickbot agents right um but there are",
    "start": "1646679",
    "end": "1651720"
  },
  {
    "text": "things that individual applications care about like their databases or you know uh some other value right um things that",
    "start": "1651720",
    "end": "1658279"
  },
  {
    "text": "are environment specific and application specific we allow developers to specify in a file in their Source repo with the",
    "start": "1658279",
    "end": "1665279"
  },
  {
    "text": "application and those are injected when we do the deployment as environment variables um and we have a different way",
    "start": "1665279",
    "end": "1671640"
  },
  {
    "text": "of managing Secrets which I'm not going to get to today unfortunately so after we make the calls",
    "start": "1671640",
    "end": "1678640"
  },
  {
    "text": "to Marathon it interacts with mzos getting resource offers to find out where to place our stuff um I only had",
    "start": "1678640",
    "end": "1685360"
  },
  {
    "text": "room for three servers here so it's pretty obvious where they're going to get placed but Marathon starts up the",
    "start": "1685360",
    "end": "1691760"
  },
  {
    "text": "new version right so we've got the docker image at 1.2.6 running in blue",
    "start": "1691760",
    "end": "1697039"
  },
  {
    "text": "1217 running in green it does it in parallel this time",
    "start": "1697039",
    "end": "1702720"
  },
  {
    "text": "which makes our deployments a lot faster which is nice um it does require you to have extra capacity to support having",
    "start": "1702720",
    "end": "1709480"
  },
  {
    "text": "two of everything for a short period during the deployment um all of our applications have healthin points",
    "start": "1709480",
    "end": "1716080"
  },
  {
    "text": "probably if you're using spring boot or drop Wizard or something at this point you probably do too um that's a first",
    "start": "1716080",
    "end": "1721559"
  },
  {
    "text": "class thing in Marathon and so when we post our Json or put our Json to Marathon we tell it about our uh Health",
    "start": "1721559",
    "end": "1728399"
  },
  {
    "text": "checkin points and it continues watching those during the deployment and even afterwards and so all of our guys are",
    "start": "1728399",
    "end": "1735080"
  },
  {
    "text": "okay we're at 200 and so then we gracefully shut down and destroy our old version and the graceful",
    "start": "1735080",
    "end": "1741480"
  },
  {
    "text": "part is the important part here um the first time we started playing with this we were just killing stuff and you know",
    "start": "1741480",
    "end": "1747080"
  },
  {
    "text": "we were getting failures because connections couldn't drain and more importantly using uh service Discovery like console we're registering and D",
    "start": "1747080",
    "end": "1754000"
  },
  {
    "text": "registering application instances and when we kill them they don't get a chance to do that um and so that was a",
    "start": "1754000",
    "end": "1760360"
  },
  {
    "text": "mess but once we once we got a grip on our signals worked pretty well and so",
    "start": "1760360",
    "end": "1765760"
  },
  {
    "text": "that was one environment and now we're next off to the next environment so one 217s deployed here and we'll just keep",
    "start": "1765760",
    "end": "1771720"
  },
  {
    "text": "going through our Pipeline and doing the same thing um but the nice thing about marathon and this is really the key for",
    "start": "1771720",
    "end": "1777720"
  },
  {
    "text": "any scheduler uh kubernetes will do this for you I guess newer versions of doer swarm will do this for you uh ECS and",
    "start": "1777720",
    "end": "1784679"
  },
  {
    "text": "Marathon they're continually pulling your configuration so they know how many instances of everything you need they",
    "start": "1784679",
    "end": "1791360"
  },
  {
    "text": "know the health check in points and so they'll keep track of things single instance goes bad disappears or if the",
    "start": "1791360",
    "end": "1797480"
  },
  {
    "text": "health checks returning like a 503 or something it knows that it needs to start up a new one and it'll do that for",
    "start": "1797480",
    "end": "1803360"
  },
  {
    "text": "you also in this case if the whole node goes down then marathon's still watching",
    "start": "1803360",
    "end": "1809880"
  },
  {
    "text": "and this is kind of a a dumb case because it's going to have to collocate them because I've only got two squares left but it's going to go out talk to",
    "start": "1809880",
    "end": "1817240"
  },
  {
    "text": "mesos again and find a new place to put the resource and it found a place we",
    "start": "1817240",
    "end": "1822679"
  },
  {
    "text": "check the health in Che yeah excuse me Health end point again we're at 200 and",
    "start": "1822679",
    "end": "1827720"
  },
  {
    "text": "we're back at capacity um and that's huge I mean that's that's the re that's the reason to use aular I think I mean",
    "start": "1827720",
    "end": "1834440"
  },
  {
    "text": "the API is nice uh it it makes it easy to to write resilience",
    "start": "1834440",
    "end": "1840960"
  },
  {
    "text": "systems The Next Step type is kind of a more loose uh step type is uh our smoke",
    "start": "1840960",
    "end": "1846080"
  },
  {
    "text": "and acceptance testing uh step teams did this differently depending on the type of application it was um we always",
    "start": "1846080",
    "end": "1852960"
  },
  {
    "text": "encourage people to do unit testing kind of embedded at the build time as much as you could to get the coverage there um",
    "start": "1852960",
    "end": "1859760"
  },
  {
    "text": "but as you go through the pipeline you might do different types of functional testing or blackbox testing uh a lot of",
    "start": "1859760",
    "end": "1864799"
  },
  {
    "text": "teams would actually use our service Discovery mechanism console to just do like basic tests across a whole cluster",
    "start": "1864799",
    "end": "1870840"
  },
  {
    "text": "um but not testing like really deep functionality but just you know is this thing working um and a lot of teams now",
    "start": "1870840",
    "end": "1878679"
  },
  {
    "text": "will even do a canary deploy to production run tests against that and then once that's good then they'll",
    "start": "1878679",
    "end": "1884320"
  },
  {
    "text": "deploy the actual application that's taking real traffic afterwards um but we",
    "start": "1884320",
    "end": "1889480"
  },
  {
    "text": "made that configurable uh and then finally is the paper trail um all of our deployments",
    "start": "1889480",
    "end": "1895360"
  },
  {
    "text": "the scheduled ones uh Legacy deployments and these deployments require change tickets in a product called service now",
    "start": "1895360",
    "end": "1901159"
  },
  {
    "text": "I'm sure some of you have used it um it's a ticketing system uh it's very configurable uh we configured it heavily",
    "start": "1901159",
    "end": "1908000"
  },
  {
    "text": "um but essentially these these steps we bookend our production deployments with",
    "start": "1908000",
    "end": "1913760"
  },
  {
    "text": "and what they do is they pull information from jira and stash to create the information about this ticket",
    "start": "1913760",
    "end": "1919960"
  },
  {
    "text": "um and they create a ticket in service now if the marathon deployment fails then we close it and Market has failed",
    "start": "1919960",
    "end": "1926399"
  },
  {
    "text": "um and if it's successful we close it successfully and the nice thing here is that it's completely transparent to our",
    "start": "1926399",
    "end": "1931960"
  },
  {
    "text": "release managers and to operations um and so when you put it all together you",
    "start": "1931960",
    "end": "1937000"
  },
  {
    "text": "get something like this and you know after this pipeline's run our new version of the editorial",
    "start": "1937000",
    "end": "1943000"
  },
  {
    "text": "modules and production all of our paperworks commit are complete and we're ready for the next commit",
    "start": "1943000",
    "end": "1948440"
  },
  {
    "text": "um and so if you build it they will come we built this for a small part of the",
    "start": "1948440",
    "end": "1953639"
  },
  {
    "text": "Orbit's website uh but once we started delivering things to production in 10 minutes uh other people wanted to start",
    "start": "1953639",
    "end": "1960559"
  },
  {
    "text": "doing this and so we had to scale it out to uh other people uh not just for other",
    "start": "1960559",
    "end": "1966240"
  },
  {
    "text": "applications but um we quickly found that managing Jenkins jobs is unwieldy",
    "start": "1966240",
    "end": "1972880"
  },
  {
    "text": "um even if we're using the jobs DSL stuff uh we're changing pipelines a lot teams want to reconfig configure their",
    "start": "1972880",
    "end": "1978440"
  },
  {
    "text": "pipelines uh and we found that you know managing them as Jobs was hard and we couldn't represent that as code until we",
    "start": "1978440",
    "end": "1984480"
  },
  {
    "text": "started using a plugin called the workflow plugin which I believe is now called the pipeline plugin with Jenkins",
    "start": "1984480",
    "end": "1989639"
  },
  {
    "text": "2 and what that allowed us to do was configure Jenkins jobs using a groovy DSL and you can see an example here is",
    "start": "1989639",
    "end": "1998080"
  },
  {
    "text": "specifying a Jenkins job that pulls the editorial module runs the gradal build and then it has the support for Docker",
    "start": "1998080",
    "end": "2003960"
  },
  {
    "text": "which is building our dynamically versioned Docker image and then you can see here that we're",
    "start": "2003960",
    "end": "2009679"
  },
  {
    "text": "pulling our Playbook and running our anible Playbook to do the deploy uh this is still a static Pipeline and we didn't",
    "start": "2009679",
    "end": "2016559"
  },
  {
    "text": "want everybody to have to specify this either because we don't want you know 50 to 100 teams with microservices having",
    "start": "2016559",
    "end": "2023880"
  },
  {
    "text": "to like write groovy code to manage their pipelines and so we took it a step further and we said we want something",
    "start": "2023880",
    "end": "2030880"
  },
  {
    "text": "like this so think about like a Travis build or something like that having a nice little document that specifies your",
    "start": "2030880",
    "end": "2036600"
  },
  {
    "text": "build um and Even in our case specifies our build and deployment and other types of steps to run in serial and in",
    "start": "2036600",
    "end": "2044159"
  },
  {
    "text": "parallel at certain points um and so we have this pipeline. Json file that teams automatically have at the root of their",
    "start": "2044159",
    "end": "2051358"
  },
  {
    "text": "generated microservice code uh and it it specifies things at a higher level so here we're saying gradal build which is",
    "start": "2051359",
    "end": "2057560"
  },
  {
    "text": "the build step I talked about and then you can see below Marathon deploy in into the test environment uh we also",
    "start": "2057560",
    "end": "2063720"
  },
  {
    "text": "allowed them to specify things like environment variables in this file so they could kind of configure everything about their application deployment and",
    "start": "2063720",
    "end": "2069480"
  },
  {
    "text": "configuration all in one place and so then our workflow became a lot more",
    "start": "2069480",
    "end": "2074599"
  },
  {
    "text": "complicated but there was only one of them and it was kind of managed centrally so that we could kind of standardize on the way the different",
    "start": "2074599",
    "end": "2081158"
  },
  {
    "text": "type of steps worked um and so this was nice it just became a little grosser looking in the fact that we had to parse",
    "start": "2081159",
    "end": "2087720"
  },
  {
    "text": "in the Json and then iterate through the steps and then dynamically call these",
    "start": "2087720",
    "end": "2093200"
  },
  {
    "text": "jenin jobs but ultimately allowed the teams to deploy whatever environments they wanted and if they wanted to create",
    "start": "2093200",
    "end": "2099119"
  },
  {
    "text": "a new Step type we would just have to add a little snippet to the central Pipeline and so lots of teams started",
    "start": "2099119",
    "end": "2106880"
  },
  {
    "text": "getting on board and we started going a little more polyglot than we had expected and so people wanted to start building python apps and you know go",
    "start": "2106880",
    "end": "2114160"
  },
  {
    "text": "apps and stuff like that and so we decided we needed to even take our Jenkins setup a little further which",
    "start": "2114160",
    "end": "2119359"
  },
  {
    "text": "Steve's going to talk about right now so a as you can imagine just like",
    "start": "2119359",
    "end": "2125440"
  },
  {
    "text": "our code our our Jenkins environment also sort of evolved or devolved over",
    "start": "2125440",
    "end": "2130480"
  },
  {
    "text": "time uh we had sort of a you know standard setup where you set up Jenkins you set up a bunch of slaves and then",
    "start": "2130480",
    "end": "2136760"
  },
  {
    "text": "over time you start adding version after version of all the various tools so you'll have you know six versions of",
    "start": "2136760",
    "end": "2143240"
  },
  {
    "text": "this and 10 versions of that and then you have compatibility issues and it it gets pretty messy pretty fast um not to",
    "start": "2143240",
    "end": "2149760"
  },
  {
    "text": "mention the building of our our monolithic application was was so destructive to the slave that they had",
    "start": "2149760",
    "end": "2155680"
  },
  {
    "text": "uh built some custom uh like take a snapshot of the Jenkins slave run the",
    "start": "2155680",
    "end": "2161520"
  },
  {
    "text": "build and then run this script uh to take it back to its previous state uh it",
    "start": "2161520",
    "end": "2167440"
  },
  {
    "text": "was horrible and so it looks something like this you check out the you know you check your code in it build to a slave",
    "start": "2167440",
    "end": "2174119"
  },
  {
    "text": "and then you run your little time machine script this was terrible um because it meant that every slave could",
    "start": "2174119",
    "end": "2180119"
  },
  {
    "text": "only be used for one thing right so it didn't matter how big or small your build was you got the same thing and so",
    "start": "2180119",
    "end": "2186920"
  },
  {
    "text": "we wanted more flexibility uh luckily someone had done some nice Jenkins mesos",
    "start": "2186920",
    "end": "2192000"
  },
  {
    "text": "integration via this plugin and so the setup became something more along the lines of this where when you did your",
    "start": "2192000",
    "end": "2198920"
  },
  {
    "text": "commit it would uh instead of just scheduling it straight to a slave it",
    "start": "2198920",
    "end": "2204040"
  },
  {
    "text": "would communicate with mesos to spin up a dynamic slave which was actually a Docker image in a lot of ways a kind of",
    "start": "2204040",
    "end": "2210800"
  },
  {
    "text": "Jenkins microservice and so we had a specific en um uh constraint set up for",
    "start": "2210800",
    "end": "2217079"
  },
  {
    "text": "um uh slaves that were um for doing Jenkins builds like you see here this EnV and",
    "start": "2217079",
    "end": "2224400"
  },
  {
    "text": "the build just proceeded as normal and then when we were done basically we could just nuke the slave and we still",
    "start": "2224400",
    "end": "2231040"
  },
  {
    "text": "we got the same thing with sort of single use slaves um and so we were able",
    "start": "2231040",
    "end": "2236079"
  },
  {
    "text": "to kind of build upon this so when it came to doing a deployment we created another kind of slave which would check",
    "start": "2236079",
    "end": "2243480"
  },
  {
    "text": "out a Playbook and run it against a particular Jenkins slave that had anible",
    "start": "2243480",
    "end": "2249000"
  },
  {
    "text": "and the marathon libraries and everything installed it would communicate with Marathon it would then deploy to a separate mesos slave in this",
    "start": "2249000",
    "end": "2255800"
  },
  {
    "text": "case the CI environment and this was all done via mesos constraints um and parameters of marathon and again when it",
    "start": "2255800",
    "end": "2262160"
  },
  {
    "text": "was done we would just nuke that slave and the capacity is ready for the next thing um once you do that you start",
    "start": "2262160",
    "end": "2268640"
  },
  {
    "text": "basically scaling out your mesos infrastructure across Network segmentation lines or Access Control uh",
    "start": "2268640",
    "end": "2275119"
  },
  {
    "text": "in this case we got three pre-production environments we got a little Jenkins environment off on the side and that kept our builds from you know trashing",
    "start": "2275119",
    "end": "2282480"
  },
  {
    "text": "other environments um we could also have different access controls for production and things like that uh and then you",
    "start": "2282480",
    "end": "2288079"
  },
  {
    "text": "keep scaling it out even further across multiple multiple data centers or availability zones and Jenkins then",
    "start": "2288079",
    "end": "2294079"
  },
  {
    "text": "becomes this orchestrator across all these different lines um and so hopefully uh to wrap up",
    "start": "2294079",
    "end": "2302040"
  },
  {
    "text": "hopefully you see that we we haven't really talked a lot about like the micros service aspect of it but really",
    "start": "2302040",
    "end": "2308880"
  },
  {
    "text": "more around the toolage that's really around it right we learned uh over a",
    "start": "2308880",
    "end": "2314280"
  },
  {
    "text": "very long period of time that most of the time you spend in dealing with lots of applications across lots of machines",
    "start": "2314280",
    "end": "2320920"
  },
  {
    "text": "is the process and anything that you can do upfront to streamline it you know figure out what process you want and",
    "start": "2320920",
    "end": "2326880"
  },
  {
    "text": "work backwards from that and investing that time early on will will pay for itself believe me um you want to have uh",
    "start": "2326880",
    "end": "2335720"
  },
  {
    "text": "you know repeatable builds repeat aable deployments you don't want to be part of it trust",
    "start": "2335720",
    "end": "2341040"
  },
  {
    "text": "me um and uh you know if you're success successful with your one app it's going",
    "start": "2341040",
    "end": "2346240"
  },
  {
    "text": "to take a while to get the first app going but if you're successful you have lots of apps and then you know it won't",
    "start": "2346240",
    "end": "2351359"
  },
  {
    "text": "be any that much more work for you [Applause]",
    "start": "2351359",
    "end": "2361369"
  }
]