[
  {
    "start": "0",
    "end": "151000"
  },
  {
    "text": "Hi, I'm Spring Developer Advocate Josh Long,\nand I'm joined here for the \"GOTO Book Club\"",
    "start": "2129",
    "end": "10460"
  },
  {
    "text": "with the illustrious, the amazing, the inimitable,\nthe really, really great, Thomas Vitale.",
    "start": "10460",
    "end": "15800"
  },
  {
    "text": "How are you, my friend? Hey, Josh. I'm doing great. Thank you.",
    "start": "15800",
    "end": "21449"
  },
  {
    "text": "It's great to be here with you. My pleasure, honestly. I wish that we could actually be in the same\nplace having this conversation, because then",
    "start": "21449",
    "end": "29650"
  },
  {
    "text": "I'm sure it would be we could have a longer\none. But it is good to talk to you, and about a\nvery interesting thing no less, a topic that",
    "start": "29650",
    "end": "38850"
  },
  {
    "text": "I think we both appreciate. Something on which both of us have written,\nyou far more recently than I, on cloud-native",
    "start": "38850",
    "end": "48109"
  },
  {
    "text": "Java with Spring, right? I love your book.",
    "start": "48110",
    "end": "54030"
  },
  {
    "text": "I just love it. I'm a huge fan. I read it and I've recommended it to people,\nand I'm just glad we could have this conversation.",
    "start": "54030",
    "end": "63690"
  },
  {
    "text": "I think it'll be good. So, thank you for that. It means a lot that you like the book and\nyou wrote the foreword.",
    "start": "63690",
    "end": "77310"
  },
  {
    "text": "There's a lot of topics, though, that ",
    "start": "77310",
    "end": "104938"
  },
  {
    "text": "I kinda wanted to talk about because I just\nthink, I mean, I'd just like to ",
    "start": "104939",
    "end": "120789"
  },
  {
    "text": "get you on the record here and just to have\nthis conversation. So, I was wondering if we could talk about\nsome of the things that are in the book just",
    "start": "120789",
    "end": "127780"
  },
  {
    "text": "superficially. And bear in mind, this book is now already,\nwhat, six months old? You know, like, I don't know, when did it\ncome out?",
    "start": "127780",
    "end": "136440"
  },
  {
    "text": "Feels like... One year now, actually. It was November of 2022, it was officially\nreleased.Â ",
    "start": "136440",
    "end": "142000"
  },
  {
    "text": "Wow. Congrats. Okay. So, one year, here we are.",
    "start": "142000",
    "end": "148550"
  },
  {
    "text": "And there's just a lot of stuff. What I'm trying to say is in this ecosystem\none year is a long time, right?",
    "start": "148550",
    "end": "158250"
  },
  {
    "start": "151000",
    "end": "508000"
  },
  {
    "text": "A lot of things are already changing. And so, I just wanna have a conversation. Maybe we can see if things have changed in\nyour perspective, or, you know, I don't know.",
    "start": "158250",
    "end": "169010"
  },
  {
    "text": "Just let's have a conversation. So, first things first we talk about cloud\nnative.",
    "start": "169010",
    "end": "175000"
  },
  {
    "text": "What is cloud native? Like, when you say the cloud-native software,\nwhat does that mean to you?",
    "start": "175000",
    "end": "182970"
  },
  {
    "text": "That is a very interesting question. Actually, I spent a whole chapter on that\nbecause I really felt like defining the term",
    "start": "182970",
    "end": "190560"
  },
  {
    "text": "was important because probably means different\nthings to different people.",
    "start": "190560",
    "end": "195660"
  },
  {
    "text": "Like, is it containers, is it Kubernetes? And the bottom line is cloud-native development\nis about architecture.",
    "start": "195660",
    "end": "202690"
  },
  {
    "text": "So, how we build applications so that they\nrun better in the cloud.",
    "start": "202690",
    "end": "210890"
  },
  {
    "text": "So, from that perspective. But it doesn't have to be containers, in my\nopinion.",
    "start": "210890",
    "end": "216090"
  },
  {
    "text": "I like what Cornelia Davis wrote in her book\nabout cloud native patterns that cloud is",
    "start": "216090",
    "end": "225280"
  },
  {
    "text": "where the computation happens, and cloud native\nis the how, how we build applications to run",
    "start": "225280",
    "end": "230620"
  },
  {
    "text": "smoothly in the cloud. So, that's one of my favorite definitions\nfor cloud native.",
    "start": "230620",
    "end": "237840"
  },
  {
    "text": "She's a genius. I don't know if you know this, but she used\nto work at Pivotal.",
    "start": "237840",
    "end": "244709"
  },
  {
    "text": "I used to work with her in the same company. And when I launched my podcast, she was the\nfirst guest.",
    "start": "244709",
    "end": "255340"
  },
  {
    "text": "Of all the people I could have asked to be\nmy first guest, I was like, \"I wanna aim as high as I can.\" And so, she was my first guest.",
    "start": "255340",
    "end": "262710"
  },
  {
    "text": "Wow. She's a legend. I love that answer. You're right.",
    "start": "262710",
    "end": "267759"
  },
  {
    "text": "We cannot improve upon that answer, so let's\nnot even try. So, it is the how you build software, right?",
    "start": "267759",
    "end": "277240"
  },
  {
    "text": "It's the how. And I like that you went out of your way to\ndisconnect it from the idea of containers.",
    "start": "277240",
    "end": "284370"
  },
  {
    "text": "I think that whole thing is very confusing\nto a lot of people, and I tend to think that,",
    "start": "284370",
    "end": "290850"
  },
  {
    "text": "you know, you don't need containers. You need automation more than you need containers.",
    "start": "290850",
    "end": "297210"
  },
  {
    "text": "A lot of times autom ation today is containers,\nbut it doesn't have to be. If you have an API-driven infrastructure layer,\nyou can get that result.",
    "start": "297210",
    "end": "305819"
  },
  {
    "text": "It may not be as efficient, but you can get\nthe same result, you know?",
    "start": "305820",
    "end": "310949"
  },
  {
    "text": "And also, you know, containers are kind of\nthe middle ground today, aren't they?",
    "start": "310949",
    "end": "317300"
  },
  {
    "text": "You've got VMs below that in terms of like\nbigger, bulkier deployment units, but above",
    "start": "317300",
    "end": "322860"
  },
  {
    "text": "that you've got serverless. So, like, even in that, even if you're looking\nat the new stuff, like, tying it to the containers",
    "start": "322860",
    "end": "330050"
  },
  {
    "text": "just makes no sense, you know? Exactly. It might be just an implementation detail,\nperhaps.",
    "start": "330050",
    "end": "335720"
  },
  {
    "text": "With serverless platform, we just push our\ncode, and then if behind the scenes it's wrapped",
    "start": "335720",
    "end": "341220"
  },
  {
    "text": "in a container, we don't even know or care\nfor that matter as developers.",
    "start": "341220",
    "end": "346250"
  },
  {
    "text": "Yeah. Exactly. Love that. What makes people build cloud-native software?",
    "start": "346250",
    "end": "353690"
  },
  {
    "text": "Why would I do that instead of staying home\nand having an apple?",
    "start": "353690",
    "end": "359530"
  },
  {
    "text": "You have a choice between I'm gonna build\nsome cloud-native software versus, I don't",
    "start": "359530",
    "end": "365919"
  },
  {
    "text": "know, whatever else you might do instead. You know, like, why do people do that? There are some goals that we have when building\ncloud-native applications, or at least wishes,",
    "start": "365919",
    "end": "377289"
  },
  {
    "text": "so that is the reason why we start adopting\ncloud-native techniques. For example, we want to build software faster.",
    "start": "377289",
    "end": "385110"
  },
  {
    "text": "So, like, the speed of development, time to\nmarket sometimes is critical.",
    "start": "385110",
    "end": "390258"
  },
  {
    "text": "It provides a competitive advantage or we\nwant to scale our software across different",
    "start": "390259",
    "end": "395800"
  },
  {
    "text": "devices around the world, so cloud-native\ntechnologies can help with that, the scalability",
    "start": "395800",
    "end": "401860"
  },
  {
    "text": "part with resilience. In general, it could be also for cost optimization.",
    "start": "401860",
    "end": "408440"
  },
  {
    "text": "Of course, the last one depends on the use\ncase.",
    "start": "408440",
    "end": "416819"
  },
  {
    "text": "It's not always true, I would say. Like, for example, in an organization working\non more legacy technologies, if you start",
    "start": "416819",
    "end": "423979"
  },
  {
    "text": "onboarding cloud-native techniques, perhaps\nyou don't get right away cost optimization because you need time to train the staff,\nyou need time to learn about new technologies.",
    "start": "423979",
    "end": "434229"
  },
  {
    "text": "So, that last one depends, but in general,\nI think those are the main reasons why people",
    "start": "434229",
    "end": "440940"
  },
  {
    "text": "look into cloud-native technologies. Absolutely. And I love that you talked about the organization\nthere, right?",
    "start": "440940",
    "end": "448280"
  },
  {
    "text": "Like, it's not just the software programmers,\nit's not just the programmers, it's everybody. If they're not all playing in this sort of\ncontinuous improvement mindset, then it's",
    "start": "448280",
    "end": "458530"
  },
  {
    "text": "not gonna work, you know? So, we talk about the cloud-native, and we\ntalk about...Does cloud-native, when we talk",
    "start": "458530",
    "end": "468080"
  },
  {
    "text": "about building cloud-native systems, does\nthat imply microservices or can you build a majestic monolith?",
    "start": "468080",
    "end": "476909"
  },
  {
    "text": "Just like with containers, I think microservices\nare quite popular for cloud-native applications,",
    "start": "476909",
    "end": "482430"
  },
  {
    "text": "but it's not a requirement. I would say it's not part of the definition. Like, when tracing back to the term cloud\nnative, I was researching for the book, and",
    "start": "482430",
    "end": "490710"
  },
  {
    "text": "then I found a definition from 2010 by Paul\nFremantle.",
    "start": "490710",
    "end": "496400"
  },
  {
    "text": "And at that time Docker didn't exist. We were not talking about microservices yet,\nwe were talking about cloud-native applications.",
    "start": "496400",
    "end": "503039"
  },
  {
    "text": "So, usually, that's my proof that it's not\na requirement. I think that the discussion around microservices\nand monoliths depends.",
    "start": "503039",
    "end": "512099"
  },
  {
    "start": "508000",
    "end": "806000"
  },
  {
    "text": "So, you can have cloud-native applications\nin both cases. Probably, I think the best or the better point\nof view in that regard is probably looking",
    "start": "512099",
    "end": "524640"
  },
  {
    "text": "at the domain or domains within your software\nand how you design them using domain-driven",
    "start": "524640",
    "end": "531680"
  },
  {
    "text": "design techniques, and looking at the bounded\ncontext to have more modularized and self-contained",
    "start": "531680",
    "end": "538640"
  },
  {
    "text": "modules. Now, if those modules are then deployed independently\nas microservices or are part of a monolith,",
    "start": "538640",
    "end": "545980"
  },
  {
    "text": "I think that shouldn't matter that much.",
    "start": "545980",
    "end": "551130"
  },
  {
    "text": "It's important to look at the organizational\nneeds and requirements, I think, and the deployment needs, because sometimes organizations adopt\nmicroservices, but the organization is not",
    "start": "551130",
    "end": "560079"
  },
  {
    "text": "ready to work with microservices, and then\nyou don't get the benefits that a microservices architecture can provide.",
    "start": "560080",
    "end": "566399"
  },
  {
    "text": "So, it's a mix of technologies, organizational\nstructure and culture, and overall requirements",
    "start": "566399",
    "end": "576260"
  },
  {
    "text": "for the final system. I think you mentioned the bounded context,\nright?",
    "start": "576260",
    "end": "585399"
  },
  {
    "text": "The domain of the application, you know, the\ntypes, the data, the records, the things we're",
    "start": "585399",
    "end": "594470"
  },
  {
    "text": "moving around the system, you know, that has\nto dictate what we build. And if you build it correctly, it doesn't\nmatter if it's a microservice or a monolith,",
    "start": "594470",
    "end": "606300"
  },
  {
    "text": "right, you can keep it clean in both cases. One thing that's kind of interesting to me\nis that, like, I don't know, do you have a",
    "start": "606300",
    "end": "617550"
  },
  {
    "text": "specific section on remote procedure call\nor SOAP or REST or...versus messaging or anything?",
    "start": "617550",
    "end": "624740"
  },
  {
    "text": "Is there a discussion in there that I've forgotten\nabout in the book? Something about is there...?",
    "start": "624740",
    "end": "630310"
  },
  {
    "text": "So, I cover both, like, REST interactions,\nmore traditional ones, but also messaging.",
    "start": "630310",
    "end": "639230"
  },
  {
    "text": "And in that sense, when working with distributed\nsystems, like usually cloud-native applications are, then the challenge is like, how do we\ndesign a transaction?",
    "start": "639230",
    "end": "649570"
  },
  {
    "text": "So, we don't want to have distributed transactions,\nso then we go into more, like, event-driven",
    "start": "649570",
    "end": "655070"
  },
  {
    "text": "strategies patterns like SAGA, so that we\ncan build an event-based system and ensure",
    "start": "655070",
    "end": "662480"
  },
  {
    "text": "eventual consistency across different services\nin a distributed system. I like, for example, the, well, very new project\nin the Spring portfolio, Spring Modulith where",
    "start": "662480",
    "end": "676270"
  },
  {
    "text": "you can build a modular monolith. So, it's based on these domain-driven design\nprinciples.",
    "start": "676270",
    "end": "682380"
  },
  {
    "text": "So, you get all these very nicely self-contained\nmodules, and at any point in time you can",
    "start": "682380",
    "end": "690709"
  },
  {
    "text": "just extract the module and make it an independent\napplication without any effort because it's already designed to be self-contained, to\nbe...Yeah, it's built around this concept",
    "start": "690709",
    "end": "701230"
  },
  {
    "text": "of bounded context and the principles of domain-driven\ndesign. So, I think it's a really powerful concept\nthat one. I like that project.",
    "start": "701230",
    "end": "706900"
  },
  {
    "text": "It's great to have the new addition in the\nSpring portfolio. I couldn't agree more. One of the nice things I love about it is\nit lets you think in terms of events, right,",
    "start": "706900",
    "end": "717630"
  },
  {
    "text": "application context events. But now with the new 1.1, you can just take\nan event and have it automatically distributed",
    "start": "717630",
    "end": "726269"
  },
  {
    "text": "over a messaging technology like RabbitMQ\nor Kafka. So, you can have the event within the same\nmonolith, and then for the interested services",
    "start": "726269",
    "end": "738410"
  },
  {
    "text": "that exist outside that monolith, you know,\nmaybe you still have some that can get messages",
    "start": "738410",
    "end": "743560"
  },
  {
    "text": "via RabbitMQ or Kafka, or whatever. And so, you can have this event-centric approach\nand it distributes it or it stays local kind",
    "start": "743560",
    "end": "752490"
  },
  {
    "text": "of like Erlang/OTP, you know? Okay. That's really powerful.",
    "start": "752490",
    "end": "757519"
  },
  {
    "text": "It's good stuff. It just goes to show, like what you were saying\nearlier, it just goes to show you, you can build clean code.",
    "start": "757519",
    "end": "763949"
  },
  {
    "text": "Whether it's a microservice or a monolith,\nyou can get good results.",
    "start": "763949",
    "end": "770449"
  },
  {
    "text": "Okay. So, this sort of, if you do build microservices,\nand if you do build, you know, smaller self-contained",
    "start": "770450",
    "end": "781610"
  },
  {
    "text": "services, then probably you've got a lot of\nthem, right? Or you've got more than one.",
    "start": "781610",
    "end": "788350"
  },
  {
    "text": "And any engineer that sees more than one of\nsomething is gonna wanna turn it into a for loop instead of dealing with each one uniquely,\nright?",
    "start": "788350",
    "end": "797410"
  },
  {
    "text": "You don't wanna have special case handling\nfor each thing in the system.",
    "start": "797410",
    "end": "802600"
  },
  {
    "text": "You wanna automate, right? We get into things like how to deal with resilience\ninfrastructure and development.",
    "start": "802600",
    "end": "810430"
  },
  {
    "start": "806000",
    "end": "1044000"
  },
  {
    "text": "And so, I guess, the first question then is,\nlike, if I'm dealing with lots of moving parts,",
    "start": "810430",
    "end": "816570"
  },
  {
    "text": "for example, databases, message queues, and\nother services, no less, I think today during",
    "start": "816570",
    "end": "823290"
  },
  {
    "text": "development, developers have a couple of really\ngood choices. One is test containers and the other is Docker\nCompose.",
    "start": "823290",
    "end": "833990"
  },
  {
    "text": "How's a developer supposed to pick and choose? What's your insight on that? That's a really good point about the consequences\nof going distributed or going cloud-native.",
    "start": "833990",
    "end": "847589"
  },
  {
    "text": "You might end up having all these services,\nand it's important to take care of the developer experience.",
    "start": "847589",
    "end": "853449"
  },
  {
    "text": "So, of course, we don't want to make things\nmore difficult for developers and have them",
    "start": "853449",
    "end": "858480"
  },
  {
    "text": "spend too much time on infrastructure concerns. Because especially when using Spring Boot,\nthe focus is like you don't need to write",
    "start": "858480",
    "end": "865589"
  },
  {
    "text": "all the boilerplate code. You get all the infrastructure concerns taken\ncare of by the framework.",
    "start": "865589",
    "end": "871890"
  },
  {
    "text": "You can focus on the business logic. But now we risk adding more complexity outside\nthe application like we need to spin up all",
    "start": "871890",
    "end": "878010"
  },
  {
    "text": "these other dependencies. So, having something like Docker Compose and\ntest containers helps.",
    "start": "878010",
    "end": "883670"
  },
  {
    "text": "And since Spring Boot 3.1, both of them are\nsupported by Spring.",
    "start": "883670",
    "end": "889079"
  },
  {
    "text": "So, if you go to start the spring.io and you\ngenerate a new project and you're using Postgres",
    "start": "889079",
    "end": "895570"
  },
  {
    "text": "with Spring data, then you get automatically\neither a Docker Compose file with PostgreSQL",
    "start": "895570",
    "end": "901630"
  },
  {
    "text": "information to spin up a container, and that\nhappens automatically when you run your app or test containers.",
    "start": "901630",
    "end": "907910"
  },
  {
    "text": "I love test containers specifically because\nI mean, it's so great and you can use it both",
    "start": "907910",
    "end": "914959"
  },
  {
    "text": "for automated testing. So, when you run your test, you can have testing\nagainst the real dependency.",
    "start": "914959",
    "end": "921360"
  },
  {
    "text": "I don't want to use mocks. If I am using Postgres in production, I want\nto use Postgres also during testing so I can",
    "start": "921360",
    "end": "927949"
  },
  {
    "text": "really trust my test because I have environment\nparity. And then I can use the same configuration\nto have Postgres also spin up automatically",
    "start": "927949",
    "end": "937060"
  },
  {
    "text": "when I'm developing. I mean, that's amazing. So, I do Spring Boot run, and then I get both\nthe application and all the external dependencies",
    "start": "937060",
    "end": "946519"
  },
  {
    "text": "with the lifecycle managed by Spring Boot\nitself. I love that. Absolutely.",
    "start": "946519",
    "end": "952279"
  },
  {
    "text": "So, you use test containers first then? Is that the idea? I think it depends on the use cases here and\nperhaps a bit of personal preferences.",
    "start": "952279",
    "end": "963339"
  },
  {
    "text": "What I like about test containers is that\nI have them both for my auto-test and development.",
    "start": "963339",
    "end": "969180"
  },
  {
    "text": "So, if I have to specify a dependency on Postgres\nversion 15, I only have to write that once.",
    "start": "969180",
    "end": "975610"
  },
  {
    "text": "So, if I use, for example, test containers\nfor testing and Docker Compose for development, then I have that container defined in two\nplaces.",
    "start": "975610",
    "end": "982389"
  },
  {
    "text": "So, if I want to update the Postgres dependency,\nthen I have to do it twice. So, I tend to prefer test containers because\nit cover my full development workflow.",
    "start": "982389",
    "end": "993899"
  },
  {
    "text": "I agree. I quite like it. We've got this ability.",
    "start": "993899",
    "end": "1000399"
  },
  {
    "text": "And by the way, Docker, that's another thing\nis I think Docker's become...as a company,",
    "start": "1000399",
    "end": "1007769"
  },
  {
    "text": "they've sort of reoriented themselves to focus\non the developer. They are not the cloud runtime company as\nmuch as they are it seems a developer, sort",
    "start": "1007769",
    "end": "1020850"
  },
  {
    "text": "of, the path to production-focused company,\nright? So, they have tools to audit your code, and\nyou have Docker Compose, and all these kinds",
    "start": "1020850",
    "end": "1029589"
  },
  {
    "text": "of things. So, I think that kinda stuff is cool as well,\nbut yeah, I do quite love the, you know, granular",
    "start": "1029589",
    "end": "1035569"
  },
  {
    "text": "nature of test containers. It lets me compose very nicely, very discreet\nlittle things, you know?",
    "start": "1035569",
    "end": "1043540"
  },
  {
    "text": "We talked about automation and I think consistency\nis a huge part of that.",
    "start": "1043540",
    "end": "1051140"
  },
  {
    "start": "1044000",
    "end": "1597000"
  },
  {
    "text": "And so, you know, for 15 years, something\nlike that, Heroku has had the 12-factor manifesto,",
    "start": "1051140",
    "end": "1061850"
  },
  {
    "text": "right? This is the set of principles that they think\nthey suggest will make it easier to build",
    "start": "1061850",
    "end": "1074450"
  },
  {
    "text": "software that is compatible with a dynamic\nchanging tumultuous cloud environment.",
    "start": "1074450",
    "end": "1081700"
  },
  {
    "text": "And so, it's principles for architecture and\napplication design that make your code, make your project more compatible with the cloud.",
    "start": "1081700",
    "end": "1089549"
  },
  {
    "text": "When we say cloud, you have to remember they're\ntalking about a Heroku, a platform as a service.",
    "start": "1089549",
    "end": "1095200"
  },
  {
    "text": "But I think generally, the rules are pretty\nmuch...you know.",
    "start": "1095200",
    "end": "1100470"
  },
  {
    "text": "Whether you're running on a platform as a\nservice, or whether you build all that stuff yourself, you're eventually gonna run on a\nplatform as a service, right?",
    "start": "1100470",
    "end": "1105820"
  },
  {
    "text": "So, they talk about the 12-factor manifesto,\nbut you, in your book, you'll also talk about",
    "start": "1105820",
    "end": "1111179"
  },
  {
    "text": "the 15-factor one. So, first of all, what is the 12-factor manifesto,\nand then what is this 15-factor manifesto?",
    "start": "1111180",
    "end": "1117240"
  },
  {
    "text": "What's the delta, you know? As you said, the 12-factor manifesto came\nfrom Heroku to help customers build applications",
    "start": "1117240",
    "end": "1126020"
  },
  {
    "text": "that were more seamlessly deployable on their\ncloud platform, but in general they became",
    "start": "1126020",
    "end": "1133200"
  },
  {
    "text": "very good principles to build cloud-native\napplications. Things like we want to externalize configuration\nso that if we have separate configurations",
    "start": "1133200",
    "end": "1142289"
  },
  {
    "text": "for testing and production, we don't bake\nthat into the application artifact. We want to keep it outside.",
    "start": "1142289",
    "end": "1148320"
  },
  {
    "text": "Over the years, I would say they are still\nrelevant, but then I think back in 2016, Kevin",
    "start": "1148320",
    "end": "1155610"
  },
  {
    "text": "Hoffman wrote a book called \"Beyond the Twelve-Factor\nApp\", and introduced 3 new factors and review",
    "start": "1155610",
    "end": "1163350"
  },
  {
    "text": "a bit some of the existing ones. So, for example, the configuration factor,\nhe extended it so that it would distinguish",
    "start": "1163350",
    "end": "1171890"
  },
  {
    "text": "between credentials and non-sensitive configuration\ncode.",
    "start": "1171890",
    "end": "1178520"
  },
  {
    "text": "We have three different parallel lines: the\ncode, the credentials, and the configuration",
    "start": "1178520",
    "end": "1185840"
  },
  {
    "text": "that you never cross, never meet. So, I think that it is very important to pay\nmore attention to credentials.",
    "start": "1185840",
    "end": "1194950"
  },
  {
    "text": "Like, we don't want to handle them just like\nwe handle any other kind of configuration.",
    "start": "1194950",
    "end": "1200370"
  },
  {
    "text": "And introduced also new factors. My favorite one of the new additions is the\none about telemetry because he wrote, like,",
    "start": "1200370",
    "end": "1208510"
  },
  {
    "text": "\"Treat your applications like space probes.\" And I think that's a very powerful image to\nhave around observability and the fact that",
    "start": "1208510",
    "end": "1218100"
  },
  {
    "text": "we want observability and not just monitoring. With observability, we want to be able to\nask any kind of question without having to",
    "start": "1218100",
    "end": "1226679"
  },
  {
    "text": "re-instrument the application as we do for\nmonitoring. Because for monitoring, we look for known\nstates.",
    "start": "1226679",
    "end": "1231900"
  },
  {
    "text": "For observability, we don't. And if we consider the space probes, it's\nnot like we can continuously add new sensors",
    "start": "1231900",
    "end": "1239779"
  },
  {
    "text": "once the probe is out of the planet's orbit. So, I liked how, like, yeah, how he framed\nthis new factor.",
    "start": "1239780",
    "end": "1250510"
  },
  {
    "text": "I quite like that as well. Can we talk briefly about some of the 12 factors?Â ",
    "start": "1250510",
    "end": "1260260"
  },
  {
    "text": "I think they're so old I kinda wonder if people\nknow them.",
    "start": "1260260",
    "end": "1266789"
  },
  {
    "text": "But I mean, it's easy. It's 12factor.net, I think, right? That's the website.",
    "start": "1266789",
    "end": "1271900"
  },
  {
    "text": "And so, they've got these pretty solid basic\nideas, right? One codebase tracked in revision control,\nmany deploys.",
    "start": "1271900",
    "end": "1279429"
  },
  {
    "text": "So, whether you're going to development prod\nand Q&A, and all that, it's the same code",
    "start": "1279430",
    "end": "1285470"
  },
  {
    "text": "base, not different builds for different environments,\nright? Then dependencies, explicitly declare and\nisolate dependencies.",
    "start": "1285470",
    "end": "1295190"
  },
  {
    "text": "Configuration, we just talked about that. You keep configuration in the environment. And you just made a great point.",
    "start": "1295190",
    "end": "1301190"
  },
  {
    "text": "There's a distinction between credentials\nand non-sensitive values. Build, release, run.",
    "start": "1301190",
    "end": "1308950"
  },
  {
    "text": "Strictly separate build and run stages. What is that? That's just basically building the jar here\nand then run it over there, right?",
    "start": "1308950",
    "end": "1318080"
  },
  {
    "text": "As opposed to, you know, you put a thing together\nthat's the packaged thing and then you deploy",
    "start": "1318080",
    "end": "1324059"
  },
  {
    "text": "it somewhere else. Is that the idea? You build your application once as part of\nyour pipeline, and then it's the same artifact",
    "start": "1324060",
    "end": "1330559"
  },
  {
    "text": "that goes through all these stages. We don't want to build an artifact specifically\nfor testing, and then we build another one",
    "start": "1330559",
    "end": "1338440"
  },
  {
    "text": "for production, but it's the same one that\nneeds to go through all these stages, otherwise, we cannot really qualify it and ensure that\nit's the...yeah, that it's behaving correctly.",
    "start": "1338440",
    "end": "1349679"
  },
  {
    "text": "So, we want to build it once and then it must\nbe immutable. So, if something changes, we have to go back\nto the build phase, build a new one, and then",
    "start": "1349679",
    "end": "1356270"
  },
  {
    "text": "go through all the steps again with the same\nimmutable activity.",
    "start": "1356270",
    "end": "1361880"
  },
  {
    "text": "Absolutely. One of the other ones that I loved is the\nidea of backing services.",
    "start": "1361880",
    "end": "1367559"
  },
  {
    "text": "Practically speaking, all things will be a\nnetwork hop away, right, from your service.",
    "start": "1367559",
    "end": "1372908"
  },
  {
    "text": "And, you know, you'll treat them as things\nthat can come and go and that your application",
    "start": "1372909",
    "end": "1378380"
  },
  {
    "text": "should be aware of. They're attached resources, right? They could be unattached.",
    "start": "1378380",
    "end": "1383950"
  },
  {
    "text": "That's kind of interesting, though. When they talk about that in Heroku and in\nCloud Foundry, they're just talking about",
    "start": "1383950",
    "end": "1392240"
  },
  {
    "text": "environment variables that have credentials\nthat you can use to then connect to your data source or whatever.",
    "start": "1392240",
    "end": "1397980"
  },
  {
    "text": "But, you know, in the Cloud Native Computing\nFoundation space they've got a...you know,",
    "start": "1397980",
    "end": "1403500"
  },
  {
    "text": "there's service bindings, right, that came\nout of the work there, but that's available.",
    "start": "1403500",
    "end": "1409309"
  },
  {
    "text": "Kubernetes.Â  Kubernetes now as well. It's kind of interesting how that has evolved,\nright? I think people are codifying some of these\ngood practices.",
    "start": "1409309",
    "end": "1418530"
  },
  {
    "text": "Processes. Execute the app as one or more stateless processes. Yeah. When they say stateless, what are they talking\nabout there?",
    "start": "1418530",
    "end": "1426610"
  },
  {
    "text": "They're not talking about session state. Well, they maybe are talking about session\nstate.",
    "start": "1426610",
    "end": "1433820"
  },
  {
    "text": "They're saying if the app got killed, then\nnothing would be lost, right? I could restart the instance and then all\nthe state that I had before would be somewhere",
    "start": "1433820",
    "end": "1441960"
  },
  {
    "text": "else inâ¦ Exactly. ...Redis or your SQL database or whatever. That's the ultimate test.",
    "start": "1441960",
    "end": "1447990"
  },
  {
    "text": "So, to ensure that you don't have any state\nin your app. You have multiple instances, you shut down\none, if you lost data, then it's not stateless.",
    "start": "1447990",
    "end": "1456590"
  },
  {
    "text": "So, there's something to fix. Yeah. Right. Quickly.",
    "start": "1456590",
    "end": "1461909"
  },
  {
    "text": "Okay. Port binding. Export services via port binding. So, this is the idea that the platform gives\nyou the port, right?",
    "start": "1461909",
    "end": "1470080"
  },
  {
    "text": "Like a port variable. I feel like Spring Boot is kind of out of\nthe box. Many of these factors you get out of the box\nwith the Spring Boot experience, because there",
    "start": "1470080",
    "end": "1479510"
  },
  {
    "text": "were, I think back then we had these big application\nservers deploying multiple application packages,",
    "start": "1479510",
    "end": "1486580"
  },
  {
    "text": "with files on it exposed through different\nendpoints. But now we just, like, with Spring Boot, we\nhave separate applications, each application",
    "start": "1486580",
    "end": "1496490"
  },
  {
    "text": "exposed through a different port. So, I think it's great that some of these\nbecame so, I don't know, part of the everyday",
    "start": "1496490",
    "end": "1504840"
  },
  {
    "text": "life for a developer, because like Spring\nBoot already from version one, actually codified",
    "start": "1504840",
    "end": "1510900"
  },
  {
    "text": "this, ensuring a nice cloud-native experience\nfor developers.",
    "start": "1510900",
    "end": "1517049"
  },
  {
    "text": "I'm a big Spring Boot fan, but I'll also say\nDropwizard did a lot of that stuff before",
    "start": "1517049",
    "end": "1523809"
  },
  {
    "text": "Spring Boot and, you know, we owe a debt to\nthem for what was done there.",
    "start": "1523809",
    "end": "1530840"
  },
  {
    "text": "A lot of the innovation that we see now in\nthe ecosystem started with Dropwizard.",
    "start": "1530840",
    "end": "1536898"
  },
  {
    "text": "I think Spring Boot, obviously...you know,\nI'm a Spring developer advocate, you don't have to ask me, I think it did a great job.",
    "start": "1536899",
    "end": "1543830"
  },
  {
    "text": "But there's some cool stuff. A lot of that initial wisdom, you know?",
    "start": "1543830",
    "end": "1550500"
  },
  {
    "text": "Okay. Let's see. Anyway, there's just a good...Logs. Oh, treat logs as event streams.",
    "start": "1550500",
    "end": "1556470"
  },
  {
    "text": "This goes back to your observability point,\nright? Like, this is another kind of observability,\nisn't it?",
    "start": "1556470",
    "end": "1564549"
  },
  {
    "text": "The factor is about having logs just as a\nstream of events. So, just output them through the standard\noutput and not deal with log files and rotation",
    "start": "1564549",
    "end": "1575940"
  },
  {
    "text": "of log files, and having to scrape those log\nfiles so that, from a developer perspective,",
    "start": "1575940",
    "end": "1581129"
  },
  {
    "text": "we just output the stream of events, and then\nwe rely on the platform to scrape them, to",
    "start": "1581130",
    "end": "1586260"
  },
  {
    "text": "collect them, and then make them available\nin some, yeah, GUI where we can query them.",
    "start": "1586260",
    "end": "1591630"
  },
  {
    "text": "So, that moves some responsibility from applications\nto the underlying platform.",
    "start": "1591630",
    "end": "1597260"
  },
  {
    "start": "1597000",
    "end": "1870000"
  },
  {
    "text": "Now this gets to another question. I hear this all the time. People ask me all the time, \"Why do I need\nSpring Cloud if I have Istio, right?\"",
    "start": "1597260",
    "end": "1607190"
  },
  {
    "text": "This tells me that people don't understand\neither one of them, because, like, I feel",
    "start": "1607190",
    "end": "1613009"
  },
  {
    "text": "like, you know, I can do 99% of what Istio\ndoes without Istio, but I can't do most of",
    "start": "1613010",
    "end": "1621049"
  },
  {
    "text": "what Spring Cloud does without Spring Cloud. That is to say, you need the integration in\nthe app to get that behavior even if you're",
    "start": "1621049",
    "end": "1630880"
  },
  {
    "text": "using Istio, right? So, I don't know.",
    "start": "1630880",
    "end": "1636559"
  },
  {
    "text": "Like logs, you mentioned logs. The reason I'm talking about this is because\nthat's a platform responsibility, right? And the platform is responsible for it runs\nyour process and it then takes the logs and",
    "start": "1636559",
    "end": "1648770"
  },
  {
    "text": "sends them off to, you know, a SIS log or\nsomething, right, or Splunk, or Elastic or",
    "start": "1648770",
    "end": "1654200"
  },
  {
    "text": "whatever, right? It could be anything. But that's the contract, you don't care about\nthat. All you know is you write the standard out,\nand then the platform takes care of taking",
    "start": "1654200",
    "end": "1663419"
  },
  {
    "text": "those logs and then making them available\nsomewhere for you later, right?",
    "start": "1663419",
    "end": "1669419"
  },
  {
    "text": "Yes. What other contracts does a platform in your,\nsort of, opinion kinda have?",
    "start": "1669420",
    "end": "1676059"
  },
  {
    "text": "I'm thinking about things like service discovery,\nright? And configuration. What kind of things?",
    "start": "1676059",
    "end": "1682470"
  },
  {
    "text": "Service discovery and load balancing, I guess.,\nI also get those types of questions a lot,",
    "start": "1682470",
    "end": "1688360"
  },
  {
    "text": "like around Spring Cloud and Kubernetes Istio. And I think it depends.",
    "start": "1688360",
    "end": "1693429"
  },
  {
    "text": "So, for example, service discovery is something\nwe get out of the box from Kubernetes, so we can just, like, if we want to call another\nservice, we do it by name directly.",
    "start": "1693429",
    "end": "1703419"
  },
  {
    "text": "We don't need any additional dependency on\nthe application. So, for that specific use case, we don't need\nsomething like Spring Cloud Eureka, for example.",
    "start": "1703419",
    "end": "1713490"
  },
  {
    "text": "But other things like, yeah, a question I\nget a lot is Spring Cloud Gateway and Istio",
    "start": "1713490",
    "end": "1720740"
  },
  {
    "text": "or...Right? And I think the key part there is who is responsible\nfor what?",
    "start": "1720740",
    "end": "1727148"
  },
  {
    "text": "Because a developer probably shouldn't know\nor be responsible for working with Istio.",
    "start": "1727149",
    "end": "1733350"
  },
  {
    "text": "That's the platform's responsibility. I feel like at the platform level, the platform\nengineers use Istio to do things like, I don't",
    "start": "1733350",
    "end": "1741299"
  },
  {
    "text": "know, service-to-service encrypted communication\nwith MTLS, right?",
    "start": "1741299",
    "end": "1746460"
  },
  {
    "text": "That's fine. That's the platform's responsibility. But then as a developer working with something\nlike Spring Cloud Gateway, I can manage the",
    "start": "1746460",
    "end": "1756049"
  },
  {
    "text": "routing and security that I as a developer\nknow about the applications. So, it would be maybe not a good idea to push\nthat down to the platform team as a responsibility.",
    "start": "1756049",
    "end": "1769730"
  },
  {
    "text": "And so, I think that it's not an or/or. I think it's more of a coexistence.",
    "start": "1769730",
    "end": "1776250"
  },
  {
    "text": "So, we have something like Spring Cloud Gateway\nthat is very developer-focused, so it's application",
    "start": "1776250",
    "end": "1781659"
  },
  {
    "text": "developers are working with it. And then other concerns come from the platform\nusing either Kubernetes native functionality",
    "start": "1781659",
    "end": "1788419"
  },
  {
    "text": "or using something like Istio. Great answer. I think it works well when you consider that\nthey both have to be there, you know, like",
    "start": "1788419",
    "end": "1800309"
  },
  {
    "text": "we mentioned imagine you're doing fallbacks,\nyou know, circuit breakers, right?",
    "start": "1800309",
    "end": "1808230"
  },
  {
    "text": "Well, what happens when there's a failure\nwith Istio? All you can get is a status code or something\nlike that, right?",
    "start": "1808230",
    "end": "1815340"
  },
  {
    "text": "But I wanna have a default fallback behavior.",
    "start": "1815340",
    "end": "1821929"
  },
  {
    "text": "That's up to my code to do something interesting\nthere. Okay. What about distributed tracing, right?",
    "start": "1821930",
    "end": "1827080"
  },
  {
    "text": "If the platform supports propagating those\ntrace headers, who cares? If your program doesn't know how to handle\nit, if there's nothing in your code to know",
    "start": "1827080",
    "end": "1835720"
  },
  {
    "text": "what to do with those headers, to propagate\nthem and to send them onward, then it's not gonna work, right? You need to have both sides there.",
    "start": "1835720",
    "end": "1842269"
  },
  {
    "text": "OAuth: Federated authentication, right? Single sign-on, somebody's gotta provide the\nIDP, but again, that identity, that concept",
    "start": "1842269",
    "end": "1852200"
  },
  {
    "text": "of identity doesn't mean anything unless my\ncode knows to look for it, you know? So, it's sort of these two sides.",
    "start": "1852200",
    "end": "1859640"
  },
  {
    "text": "And this is why I always get very confused\nwhen people say these things like, \"I don't need Spring Cloud.\" \"Oh?",
    "start": "1859640",
    "end": "1865570"
  },
  {
    "text": "Okay. I think you're confused.\"Â  You mentioned the gateway.",
    "start": "1865570",
    "end": "1870860"
  },
  {
    "start": "1870000",
    "end": "2238000"
  },
  {
    "text": "So, I like API gateways in general and I love\nSpring Cloud Gateway, in particular.",
    "start": "1870860",
    "end": "1877700"
  },
  {
    "text": "What are some of the use cases? What are some of the cool use cases you've\nseen for gateways?",
    "start": "1877700",
    "end": "1886010"
  },
  {
    "text": "I just wonder. The first use case, which is I think one of\nthe main reasons why we use this, we adopt",
    "start": "1886010",
    "end": "1893710"
  },
  {
    "text": "the API gateway pattern, is if we have multiple\nservices as part of our system, we don't want",
    "start": "1893710",
    "end": "1899169"
  },
  {
    "text": "our clients to keep having to keep track of\nall those endpoints. So, we want one central entry point, ingress\npoint to our system.",
    "start": "1899170",
    "end": "1908740"
  },
  {
    "text": "So, that's the basic use case. So, all the requests goes to Spring Cloud\nGateway, and then they are routed across different",
    "start": "1908740",
    "end": "1916940"
  },
  {
    "text": "services based on some criteria. And that's the basic. But then on top of that, there's so many powerful\nfeatures that we can do on top of that.",
    "start": "1916940",
    "end": "1925010"
  },
  {
    "text": "We can adopt different resilience patterns. For example, you mentioned the failover, so\nwe can have circuit breakers in the gateway.",
    "start": "1925010",
    "end": "1932148"
  },
  {
    "text": "So, if I call in a service to retrieve, I\ndon't know, a list of books available in a",
    "start": "1932149",
    "end": "1937590"
  },
  {
    "text": "catalog then and we go back to the application\ndeveloper responsibility, I can define directly",
    "start": "1937590",
    "end": "1944100"
  },
  {
    "text": "in the gateway that if the service is not\navailable, maybe I cached the previous response",
    "start": "1944100",
    "end": "1949590"
  },
  {
    "text": "in Redis and then I can return that. I can define some timeouts, retries, and then\ncan do a lot of security stuff as well.",
    "start": "1949590",
    "end": "1959309"
  },
  {
    "text": "I can have that single entry point to the\nsystem for doing authentication, delegating to OAuth and OpenID Connect.",
    "start": "1959310",
    "end": "1966630"
  },
  {
    "text": "And on top of that, I can perhaps customize\nthe way I want my tokens to be shaped, because",
    "start": "1966630",
    "end": "1974679"
  },
  {
    "text": "I guess we have a very standard authentication\nmechanism, but then when it comes to authorization",
    "start": "1974679",
    "end": "1979980"
  },
  {
    "text": "each application is different. So, we need that power of customization also\nin an easy way, and Spring Cloud Gateway provides",
    "start": "1979980",
    "end": "1987279"
  },
  {
    "text": "that. I love Spring Cloud Gateway. So, I think all these crosscutting concerns,\nsecurity, resilience, and observability because",
    "start": "1987280",
    "end": "1993440"
  },
  {
    "text": "then, at that point, we can keep track of\nall the traffic that enters the system from the gateway.",
    "start": "1993440",
    "end": "1998570"
  },
  {
    "text": "So, we can start tracing from the gateway\nand have full visibility into everything that is going on.",
    "start": "1998570",
    "end": "2004131"
  },
  {
    "text": "We can have rate limiting, another thing I\nreally like. So, if we provide an API as a service with\ndifferent tiers, then may be the free tier",
    "start": "2004131",
    "end": "2013169"
  },
  {
    "text": "has a low rate limit, and if you buy a subscription,\nthen it's a different rate limiting policy.",
    "start": "2013169",
    "end": "2021980"
  },
  {
    "text": "You've just mentioned resilience, and I think\nthat kinda leads me into my next question.",
    "start": "2021980",
    "end": "2031510"
  },
  {
    "text": "Well, not resilience. I'm thinking of, like, scalability here, you\nknow? You've got the gateway, the gateway is sending\ntraffic down to your backend services.",
    "start": "2031510",
    "end": "2041050"
  },
  {
    "text": "How do I make sure that my service is gonna\nbe able to meet that demand? Like, what are your thoughts on reactive programming\nversus Loom, versus, you know, just horizontal",
    "start": "2041050",
    "end": "2052820"
  },
  {
    "text": "scaling? I mean, what is your average developer gonna\ndo these days?",
    "start": "2052820",
    "end": "2059290"
  },
  {
    "text": "Spring Cloud Gateway originally was built\nwith, like, on top of the reactive stack provided by Spring and Reactor.",
    "start": "2059290",
    "end": "2067710"
  },
  {
    "text": "The reason was exactly about scalability because\nwith a more traditional model, based on one",
    "start": "2067710",
    "end": "2074050"
  },
  {
    "text": "thread, and one request, it would become a\nhuge bottleneck having a gateway built with",
    "start": "2074050",
    "end": "2080870"
  },
  {
    "text": "that pattern or architecture. With reactive programming, we get more scalability,\nand more resilience, because we can use just",
    "start": "2080870",
    "end": "2088540"
  },
  {
    "text": "a few threads and then handle request, well,\nin a very asynchronous way.",
    "start": "2088540",
    "end": "2096669"
  },
  {
    "text": "So, we don't have to assign a thread to a\nrequest, but if there's nothing to do, maybe we are waiting for another service or a database\nto reply, we can use that computational power",
    "start": "2096669",
    "end": "2106390"
  },
  {
    "text": "to do something else. No need to wait around and waste resources. And that's one of the power of reactive programming\nabout building more scalable and resilient",
    "start": "2106390",
    "end": "2117359"
  },
  {
    "text": "applications. The other side, I think, is the programming\nmodel. I really like the programming model where\neverything is a stream of data.",
    "start": "2117359",
    "end": "2125109"
  },
  {
    "text": "We have this reactive stream, and you can\ncombine different data sources together, but using the same APIs.",
    "start": "2125109",
    "end": "2130960"
  },
  {
    "text": "So, I can have a flow of data with data coming\nfrom a database, from a message queue, from",
    "start": "2130960",
    "end": "2136609"
  },
  {
    "text": "an HTTP API, and they all look the same in\nthis reactive stream.",
    "start": "2136610",
    "end": "2142050"
  },
  {
    "text": "I can apply resilience patterns to all of\nthem. And I think it's a really powerful way of\nprogramming.",
    "start": "2142050",
    "end": "2148869"
  },
  {
    "text": "Of course, it's very different from the more\ntraditional imperative programming we are used to.",
    "start": "2148869",
    "end": "2156200"
  },
  {
    "text": "We have Loom, of course. One of the...probably the main thing in Java\n21 now is that we get these mutual threads",
    "start": "2156200",
    "end": "2165630"
  },
  {
    "text": "previously called Project Loom, where now\nwe can have virtual threads exactly doing",
    "start": "2165630",
    "end": "2172700"
  },
  {
    "text": "all the computation so we don't use, like,\nmachine threads to wait and hang around if",
    "start": "2172700",
    "end": "2182440"
  },
  {
    "text": "they're waiting for a request. But we're gonna spin up tons of different\nvirtual threads that can take care of that.",
    "start": "2182440",
    "end": "2191000"
  },
  {
    "text": "So, in a way, we also enter more into a synchronous\nfashion where we have these threads that are",
    "start": "2191000",
    "end": "2198590"
  },
  {
    "text": "mounted and unmounted dynamically without\nhaving to block resources while they're waiting",
    "start": "2198590",
    "end": "2206110"
  },
  {
    "text": "for something to do. Yeah, it's the best of both worlds. That brings a lot of capabilities for also\nbuilding scalable applications, also using",
    "start": "2206110",
    "end": "2217089"
  },
  {
    "text": "a more traditional imperative way. For example, Spring Cloud Gateway now there's\na new version of it that is based on virtual",
    "start": "2217090",
    "end": "2225550"
  },
  {
    "text": "threads. So, instead of being based on the reactive\nstack, you can use virtual threats to reach",
    "start": "2225550",
    "end": "2232700"
  },
  {
    "text": "that scalability demand that a gateway needs. Right. It's so good.",
    "start": "2232700",
    "end": "2238069"
  },
  {
    "start": "2238000",
    "end": "2624000"
  },
  {
    "text": "Yes. We've talked about several things, several\npractices that we can use to build robust",
    "start": "2238070",
    "end": "2245030"
  },
  {
    "text": "services, right, in Spring. You know that M.C. Escher...you know M.C. Escher, the artist?",
    "start": "2245030",
    "end": "2250900"
  },
  {
    "text": "He's got a picture of a hand drawing itself,\nright?",
    "start": "2250900",
    "end": "2257250"
  },
  {
    "text": "He drew a picture of a hand drawing a picture\nof the hand, drawing the picture of itself.",
    "start": "2257250",
    "end": "2262390"
  },
  {
    "text": "And I think about that picture a lot because\nthat, to me, describes the cloud as useful as it is to build robust, scalable services,\nwithout the infrastructure and the pipeline",
    "start": "2262390",
    "end": "2274589"
  },
  {
    "text": "it's sort of, it just doesn't matter, does\nit? So, this brings us to continuous delivery\nand GitOps, and how would you distinguish",
    "start": "2274589",
    "end": "2287069"
  },
  {
    "text": "one from the other? What is GitOps compared to continuous delivery\nin the modern world, you know, in the modern",
    "start": "2287069",
    "end": "2293010"
  },
  {
    "text": "thinking of it? Continuous delivery, I see it as that way,\nthat mindset, yeah, that process that we use",
    "start": "2293010",
    "end": "2305050"
  },
  {
    "text": "to build software so that it's always in a\nreleasable state. And this is the main definition also from\nthe awesome continuous delivery book.",
    "start": "2305050",
    "end": "2314040"
  },
  {
    "text": "Now, I know that the term is used to mean\ndifferent things.",
    "start": "2314040",
    "end": "2319339"
  },
  {
    "text": "We always have this problem, I feel, in our\nindustry with terminology, but I feel like continuous delivery encompasses the whole\nprocess and mindset.",
    "start": "2319339",
    "end": "2328250"
  },
  {
    "text": "And then, as part of continuous delivery,\nwe can have different approaches and techniques.",
    "start": "2328250",
    "end": "2333690"
  },
  {
    "text": "For example, continuous integration so that\nwe continuously push our changes to the Git",
    "start": "2333690",
    "end": "2340380"
  },
  {
    "text": "repo. We are not waiting around on a separate branch\nbecause otherwise, then merging all together",
    "start": "2340380",
    "end": "2345480"
  },
  {
    "text": "will be more difficult, we're gonna get conflicts. And continuous delivery actually gives control\nof when we release software to the business",
    "start": "2345480",
    "end": "2356440"
  },
  {
    "text": "rather than to be bound by a technical concern.",
    "start": "2356440",
    "end": "2361890"
  },
  {
    "text": "We don't necessarily deploy, but we always\nhave a release candidate, that is approved,",
    "start": "2361890",
    "end": "2368568"
  },
  {
    "text": "which is qualified, went through the pipeline. And then, if we also want to every time we\nbuild a new release, we want to deploy, then",
    "start": "2368569",
    "end": "2376500"
  },
  {
    "text": "we reach the continuous deployment. So, kind of an extension to our pipeline.",
    "start": "2376500",
    "end": "2382019"
  },
  {
    "text": "And GitOps is actually a way to implement\ncontinuous deployment, because before GitOps what we would do is as final step in our pipeline,\nthen we would authenticate, I don't know,",
    "start": "2382020",
    "end": "2393400"
  },
  {
    "text": "with the production environment, and then\nthe pipeline would deploy the application directly in production.",
    "start": "2393400",
    "end": "2399780"
  },
  {
    "text": "With GitOps we're kind of reversing control. It's the production environment that pulls\nchanges.",
    "start": "2399780",
    "end": "2405650"
  },
  {
    "text": "So, whenever there's a new release, then it\npulls down the new release and updates the",
    "start": "2405650",
    "end": "2410980"
  },
  {
    "text": "deployment relying on the continuous reconciliation\ncapabilities within Kubernetes.",
    "start": "2410980",
    "end": "2418190"
  },
  {
    "text": "So, the pipeline is not responsible anymore\nfor the deployment. That gives several advantages, one of them\nbeing that the pipeline doesn't need access",
    "start": "2418190",
    "end": "2426520"
  },
  {
    "text": "to all these environments, but we can have\na more decoupled system.",
    "start": "2426520",
    "end": "2432390"
  },
  {
    "text": "I see it as an event-driven system because\nwe don't have...Like, it's the GitOps agent",
    "start": "2432390",
    "end": "2440799"
  },
  {
    "text": "that listens to events, but when there's a\nnew version of the application, then it acts",
    "start": "2440800",
    "end": "2446250"
  },
  {
    "text": "upon it. It doesn't need to know how that new jar file\nor container image has been built.",
    "start": "2446250",
    "end": "2452450"
  },
  {
    "text": "So, kind of separation of concerns there. I quite like that. That's a good point.",
    "start": "2452450",
    "end": "2458880"
  },
  {
    "text": "Everything before the platform has to be built\ninto the pipeline otherwise. Whereas if you just use GitOps, you're just\nthinking about the thing that the platform",
    "start": "2458880",
    "end": "2466700"
  },
  {
    "text": "takes in. You don't care about everything before that,\nyou know? Okay.",
    "start": "2466700",
    "end": "2472000"
  },
  {
    "text": "So, that's fantastic.Â  So, these are different ways to get to production. They're all based on the idea that you're\nconstantly shipping, right?",
    "start": "2472000",
    "end": "2483050"
  },
  {
    "text": "The goal is to be able to get to production\nconsistently and easily, and without intervention",
    "start": "2483050",
    "end": "2488609"
  },
  {
    "text": "from a human being as much as possible. But that does bring the question of, okay,\nsuppose I'm a developer and I'm making changes",
    "start": "2488609",
    "end": "2497819"
  },
  {
    "text": "to my code, and suddenly we have to go to\nproduction. Should I use a branch?",
    "start": "2497819",
    "end": "2503480"
  },
  {
    "text": "What's your opinion on this stuff? Like, or should I do a feature flag? Or, you know, where do you stand on this discussion?",
    "start": "2503480",
    "end": "2513950"
  },
  {
    "text": "If possible, my preference would be towards\ntrunk-based development where we have only",
    "start": "2513950",
    "end": "2519270"
  },
  {
    "text": "one main branch, and using continuous integration\nwe continuously push changes to that branch.",
    "start": "2519270",
    "end": "2526410"
  },
  {
    "text": "Of course, doing continuous integration means\nthat we won't get, like if it's a big feature",
    "start": "2526410",
    "end": "2532510"
  },
  {
    "text": "we're implementing, maybe we don't want to\nenable part of the code until it's fully complete.",
    "start": "2532510",
    "end": "2537930"
  },
  {
    "text": "So, feature flags are a great way of dealing\nwith this, like reconciling continuous integration",
    "start": "2537930",
    "end": "2544510"
  },
  {
    "text": "with the feature that is not ready to be out\nthere. So, we put a feature flag. Once all the code is implemented for that\nfeature, then we can perhaps enable that feature",
    "start": "2544510",
    "end": "2556070"
  },
  {
    "text": "flag on only certain environments or doing\nsome A/B testing, enable it just for some",
    "start": "2556070",
    "end": "2561990"
  },
  {
    "text": "users to try it out. And so, we can adopt different advanced deployment\npatterns there.",
    "start": "2561990",
    "end": "2569240"
  },
  {
    "text": "But I think the key part for me is not keeping\nlong-lived branches. I mean, it's fine to create a branch but if\nit's short-lived, otherwise, I feel like it",
    "start": "2569240",
    "end": "2581140"
  },
  {
    "text": "creates too many problems. One I mentioned earlier with conflicts and\nnot having the right state in the main branch,",
    "start": "2581140",
    "end": "2587510"
  },
  {
    "text": "if we're testing that. So, we find problems later. That's never good. And then the other one is more about, yeah,\nthis divergence, Like, we have code that lives",
    "start": "2587510",
    "end": "2600010"
  },
  {
    "text": "in a separate branch for months, and if that\ncode is not in the main branch and it's not",
    "start": "2600010",
    "end": "2606130"
  },
  {
    "text": "in production, it's basically useless, doesn't\nprovide any value. So, I'm always pushing fast and actuate that\nvalue, because that's why we write code.",
    "start": "2606130",
    "end": "2619010"
  },
  {
    "text": "Yeah. Absolutely. It's not real until it's in production. Yes. I think we did it.",
    "start": "2619010",
    "end": "2624880"
  },
  {
    "start": "2624000",
    "end": "2749000"
  },
  {
    "text": "I think we covered...I think if I acted on\nall the things that we talked about today,",
    "start": "2624880",
    "end": "2631700"
  },
  {
    "text": "I think I would have most, probably not all,\nbut most of what I would need to get to production.",
    "start": "2631700",
    "end": "2639078"
  },
  {
    "text": "And, you know, obviously, there's a lot of\ndetails that we've left out.",
    "start": "2639079",
    "end": "2645690"
  },
  {
    "text": "We don't have 20 hours to have this conversation,\nor 30, or 40, or 100.",
    "start": "2645690",
    "end": "2651380"
  },
  {
    "text": "But I think if people really wanna spend a\nfew more hours and really learn a lot more, I think that book of yours is a fantastic,\nfantastic way to do it and to help them get",
    "start": "2651380",
    "end": "2661510"
  },
  {
    "text": "to production. So, I guess, I kinda wanna close down and,\nyou know, just thank you for the really cool",
    "start": "2661510",
    "end": "2669338"
  },
  {
    "text": "discussion. Is there anything you wanna leave people with\nthat hasn't been said?",
    "start": "2669339",
    "end": "2674940"
  },
  {
    "text": "Yeah, just invite people to read the book\nif you're interested. I am always open to receiving some feedback,\nso please reach out on Twitter or LinkedIn.",
    "start": "2674940",
    "end": "2684359"
  },
  {
    "text": "The book is called \"Cloud Native Spring in\nAction: With Spring Boot and Kubernetes.\" So, if you read it, let me know.",
    "start": "2684359",
    "end": "2690470"
  },
  {
    "text": "I love getting some feedback, also suggestions\nfor improvements. You know, maybe second edition will arrive\nat some point.",
    "start": "2690470",
    "end": "2698558"
  },
  {
    "text": "So, let me know what you think about the book. And I want to thank you, Josh Long, very much\nfor this conversation.",
    "start": "2698559",
    "end": "2704599"
  },
  {
    "text": "It's always very interesting talking with\nyou. Oh, my pleasure, my friend.",
    "start": "2704599",
    "end": "2714250"
  },
  {
    "text": "Like I said, we'll continue at some point\nsoon, I hope.",
    "start": "2714250",
    "end": "2730720"
  },
  {
    "text": "All right. Good stuff.",
    "start": "2730720",
    "end": "2736770"
  },
  {
    "text": "Thank you, my friend.",
    "start": "2736770",
    "end": "2742819"
  },
  {
    "text": "Thank you. Bye.",
    "start": "2742819",
    "end": "2747359"
  }
]