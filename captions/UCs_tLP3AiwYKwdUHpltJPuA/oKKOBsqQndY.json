[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "[Music]",
    "start": "3550",
    "end": "7840"
  },
  {
    "text": "so is on his way he'll be here before the containers section which would",
    "start": "11920",
    "end": "17630"
  },
  {
    "text": "otherwise have been very shallow so uh good morning my name is rod vise I'm a",
    "start": "17630",
    "end": "23419"
  },
  {
    "text": "software development manager with AWS and I'm part of the team that owns firecracker which enables secure and",
    "start": "23419",
    "end": "30770"
  },
  {
    "text": "fast micro VMs for service computing now secure and fast are not words that you",
    "start": "30770",
    "end": "36290"
  },
  {
    "text": "usually hear together when you talk about virtual machines but that's exactly what you need to build runtimes",
    "start": "36290",
    "end": "42980"
  },
  {
    "text": "that are hardened enough for a multi-tenant environment like the cloud where basically every sandbox can",
    "start": "42980",
    "end": "49969"
  },
  {
    "text": "potentially run malicious code and yet nimble enough to function efficiently as",
    "start": "49969",
    "end": "56109"
  },
  {
    "text": "container or you know serverless function platforms right and in this",
    "start": "56109",
    "end": "62390"
  },
  {
    "text": "talk I'm basically gonna gonna talk about what firecracker is a little bit",
    "start": "62390",
    "end": "68570"
  },
  {
    "text": "about the the architecture and you know what problem we're solving and then",
    "start": "68570",
    "end": "73700"
  },
  {
    "text": "we'll talk a bit about how we're using it at AWS to create efficient platforms",
    "start": "73700",
    "end": "80270"
  },
  {
    "text": "for lambda and Fargate and also a little bit about firecracker as an open source",
    "start": "80270",
    "end": "85850"
  },
  {
    "text": "project and and basically what we're doing in that space right so firecracker",
    "start": "85850",
    "end": "94700"
  },
  {
    "start": "92000",
    "end": "92000"
  },
  {
    "text": "is an open source virtualization technology specifically it's a virtual machine monitor that uses the Linux KVM",
    "start": "94700",
    "end": "101930"
  },
  {
    "text": "kernel virtual machine as the underlying go Toleration primitive and then creates a user space virtual machine",
    "start": "101930",
    "end": "111190"
  },
  {
    "text": "we call these lightweight virtual machines Micro VMs because we have taken",
    "start": "111190",
    "end": "117020"
  },
  {
    "text": "a very minimalistic approach to actually mere goals around supporting serverless",
    "start": "117020",
    "end": "122890"
  },
  {
    "text": "sandboxes what we wanted to do is create a system that allows us to combine the",
    "start": "122890",
    "end": "130610"
  },
  {
    "text": "very you know DD hardening and work or isolation that's afforded by virtual",
    "start": "130610",
    "end": "135890"
  },
  {
    "text": "machines with the speed and density that you can get with containers I've",
    "start": "135890",
    "end": "141770"
  },
  {
    "text": "done get the question you know if if container security you know is not enough but I don't see it as a trade-off",
    "start": "141770",
    "end": "149510"
  },
  {
    "text": "at all because you can actually layer these two things in a defense-in-depth fashion so for example you can to a",
    "start": "149510",
    "end": "156440"
  },
  {
    "text": "virtual machine process you can apply all of the same namespace C group set",
    "start": "156440",
    "end": "162020"
  },
  {
    "text": "complex cetera isolation that you would also apply to a container and so you",
    "start": "162020",
    "end": "167090"
  },
  {
    "text": "actually create an additional layer of Defense by leveraging what is often",
    "start": "167090",
    "end": "173300"
  },
  {
    "text": "Hardware enforced with virtualization boundary now the what we want to do is",
    "start": "173300",
    "end": "180500"
  },
  {
    "text": "get all of that while while having container like operational properties",
    "start": "180500",
    "end": "187310"
  },
  {
    "text": "when it comes to resource overhead oversubscription and and basically just",
    "start": "187310",
    "end": "193430"
  },
  {
    "text": "the speed at which you can create and destroy sound boxes a lot of that is",
    "start": "193430",
    "end": "200450"
  },
  {
    "text": "possible by by building a virtual machine monitor with an extremely low resource overhead so basically",
    "start": "200450",
    "end": "207549"
  },
  {
    "text": "everything that that means the amount of memory overhead per micro VM the amount",
    "start": "207549",
    "end": "213860"
  },
  {
    "text": "of let's say resources that are dedicated to running the operating system and not the actual application",
    "start": "213860",
    "end": "220540"
  },
  {
    "text": "should be minimized and this is one of our guiding principles as we build and",
    "start": "220540",
    "end": "226580"
  },
  {
    "text": "develop firecracker so where where did firecracker come from basically it it",
    "start": "226580",
    "end": "235430"
  },
  {
    "text": "came as a part of it started as a part of lambdas infrastructure just a bit of",
    "start": "235430",
    "end": "242720"
  },
  {
    "text": "history lambda was launched in November 2014 you know and we're focused on",
    "start": "242720",
    "end": "247940"
  },
  {
    "text": "providing a service experience and making it of course as secure as possible to ensure this this isolation",
    "start": "247940",
    "end": "255320"
  },
  {
    "text": "Brown D and at the time we used a per customer ec2 instance for running",
    "start": "255320",
    "end": "261799"
  },
  {
    "text": "function so basically if you start one function in lambda at the time you would",
    "start": "261799",
    "end": "267740"
  },
  {
    "text": "have gotten your own ec2 instance to run the function and if you start 10 functions you run all ten of them probably in the",
    "start": "267740",
    "end": "274280"
  },
  {
    "text": "same instance and then at some point you get a new instance started but there's only ever one customer inside of one ec2",
    "start": "274280",
    "end": "281300"
  },
  {
    "text": "instance now as as your service scales and as you get a bunch of customers and a bunch of functions it's all kinds of",
    "start": "281300",
    "end": "287660"
  },
  {
    "text": "let's say runtime models and peaks and valleys of utilization it turned out",
    "start": "287660",
    "end": "295520"
  },
  {
    "text": "that it was rather inefficient to allocate resources like that because ec2",
    "start": "295520",
    "end": "301130"
  },
  {
    "text": "instances have with some exceptions fixed slices of resources of CPU and of",
    "start": "301130",
    "end": "308450"
  },
  {
    "text": "memory and so we weren't using the the underlying hardware as efficiently as we",
    "start": "308450",
    "end": "315560"
  },
  {
    "text": "as we thought we could I know and so we set about to build a what is in effect",
    "start": "315560",
    "end": "320690"
  },
  {
    "text": "an isolation system that allows us to use the the hardware much more",
    "start": "320690",
    "end": "326480"
  },
  {
    "text": "efficiently right and now I'm gonna I'm",
    "start": "326480",
    "end": "331580"
  },
  {
    "start": "330000",
    "end": "330000"
  },
  {
    "text": "gonna use an example to basically show you what kind of properties such a",
    "start": "331580",
    "end": "337010"
  },
  {
    "text": "runtime would need in order to make the resource usage efficient so let's take",
    "start": "337010",
    "end": "342490"
  },
  {
    "text": "what is a we call it a lambda worker it's basically you can imagine it as a as a machine which has a fixed amount of",
    "start": "342490",
    "end": "350410"
  },
  {
    "text": "CPU and a fixed amount of memory it's probably a physical machine and so it's",
    "start": "350410",
    "end": "356630"
  },
  {
    "text": "resources available are constant over time and we run some customers function",
    "start": "356630",
    "end": "362480"
  },
  {
    "text": "in it the function you know when you create a lambda function you have a a",
    "start": "362480",
    "end": "368860"
  },
  {
    "text": "maximum amount of memory that you can use and one or two CPU cores currently but you won't use all of them all the",
    "start": "368860",
    "end": "375530"
  },
  {
    "text": "time depending on what you're doing you when you invoke a function you know you might use more or less you might invoke",
    "start": "375530",
    "end": "382010"
  },
  {
    "text": "your functions might get invoked more or less in a given period of time so if you",
    "start": "382010",
    "end": "387500"
  },
  {
    "text": "were to chart kind of the compute resource usage over time you get something like this craft it had some",
    "start": "387500",
    "end": "393050"
  },
  {
    "text": "peaks it has some valleys and if I were to add more of more invokes of the same function on the same server eventually",
    "start": "393050",
    "end": "400070"
  },
  {
    "text": "we're going to get to a point where the Peaks basically exhaust the server's resources but overall we're not",
    "start": "400070",
    "end": "406320"
  },
  {
    "text": "using the server efficiently because during the valleys nothing's happening and so one thing that you can do is add",
    "start": "406320",
    "end": "412020"
  },
  {
    "text": "a different function to the server which belongs to a different customer and has probably completely different runtime",
    "start": "412020",
    "end": "418680"
  },
  {
    "text": "parameters so that might look like this you still got the same problem but it's",
    "start": "418680",
    "end": "424560"
  },
  {
    "text": "somewhat attenuated and then you can keep doing that and when you get to a",
    "start": "424560",
    "end": "429720"
  },
  {
    "text": "very large number of functions much more than four you get to a point where",
    "start": "429720",
    "end": "436220"
  },
  {
    "text": "basically you can use statistics or other sorts of let's say big number",
    "start": "436220",
    "end": "441870"
  },
  {
    "text": "methods to even out the load on the server to the point where it's efficiently used so you know ideally you",
    "start": "441870",
    "end": "448140"
  },
  {
    "text": "would want to run with something like almost constant 90 plus percent CPU and",
    "start": "448140",
    "end": "455880"
  },
  {
    "text": "that's you know that that's a it's a hard but tractable packin problem however now you need a runtime which can",
    "start": "455880",
    "end": "464070"
  },
  {
    "text": "actually support this kind of model so in the runtime that is able to scale up and down really fast for anyone that use",
    "start": "464070",
    "end": "470970"
  },
  {
    "text": "lambda you know you can use it to respond to all kinds of events these",
    "start": "470970",
    "end": "476520"
  },
  {
    "text": "events often come in bursts so you get some function which has been running zero invokes and then all of a sudden in",
    "start": "476520",
    "end": "483060"
  },
  {
    "text": "a minute you get a thousand or ten thousand or a million and so you need to react really super fast to and create",
    "start": "483060",
    "end": "489750"
  },
  {
    "text": "sound boxes and destroy sound boxes as needed while maintaining all the isolation properties because any one of",
    "start": "489750",
    "end": "497220"
  },
  {
    "text": "these functions can have malicious code running in it this can be binary code lambda supports",
    "start": "497220",
    "end": "504740"
  },
  {
    "text": "binary execution through various methods so from an attacker point of view you",
    "start": "504740",
    "end": "511410"
  },
  {
    "text": "need to make sure that these sandboxes are really really secure and that's basically this was our problems taken",
    "start": "511410",
    "end": "516900"
  },
  {
    "text": "with fire cracker so we needed a system that allows us to isolate functions",
    "start": "516900",
    "end": "522750"
  },
  {
    "text": "between each other on a physical host and really scale up and down very very",
    "start": "522750",
    "end": "529260"
  },
  {
    "text": "fast just as as the customer demand requires it okay so",
    "start": "529260",
    "end": "538240"
  },
  {
    "text": "if you're building a computer form what does firecracker do for you so first of",
    "start": "538240",
    "end": "543519"
  },
  {
    "text": "all they'll give you secure hardware virtualization based I work out the isolation",
    "start": "543519",
    "end": "549639"
  },
  {
    "text": "you also get older although as I mentioned before the all of the container layers or namespaces cgroups",
    "start": "549639",
    "end": "556869"
  },
  {
    "text": "seccomp etc this is all done by default there's some you know common-sense whole",
    "start": "556869",
    "end": "564129"
  },
  {
    "text": "site configuration but mostly we try to have very secure defaults and make it",
    "start": "564129",
    "end": "569860"
  },
  {
    "text": "almost impossible to use firecracker and you know in a way in which the worklight",
    "start": "569860",
    "end": "574929"
  },
  {
    "text": "workload station is compromised the next thing that we do is allow you to have a",
    "start": "574929",
    "end": "580269"
  },
  {
    "text": "very quick startup time for your sound boxes so you can react to customer load",
    "start": "580269",
    "end": "585309"
  },
  {
    "text": "and finally we give you the tools to to achieve good utilization on your",
    "start": "585309",
    "end": "591279"
  },
  {
    "text": "underlying hardware how is this achieved so as I mentioned we're using KVM based",
    "start": "591279",
    "end": "599999"
  },
  {
    "text": "virtualization for just as a quick primer ok VM the kernel virtual machine",
    "start": "599999",
    "end": "605799"
  },
  {
    "text": "is as let's say one of the two very popular systems for virtualizing things",
    "start": "605799",
    "end": "613470"
  },
  {
    "text": "in clouds today it's a very battle-hardened system if you follow",
    "start": "613470",
    "end": "619929"
  },
  {
    "text": "these kind of things almost every vulnerability that that is discovered is very quickly fixed in a VM",
    "start": "619929",
    "end": "627990"
  },
  {
    "text": "there's established patterns of how to use it safely which we try which we which we follow and overall it's just is",
    "start": "627990",
    "end": "635529"
  },
  {
    "text": "just a robust system that also has just the latest and greatest in virtualization technology readily",
    "start": "635529",
    "end": "642129"
  },
  {
    "text": "available and then on top of that we build what is in effect a user space process very constrained user space",
    "start": "642129",
    "end": "650170"
  },
  {
    "text": "process which sits it's in its own network namespace in its own mount point",
    "start": "650170",
    "end": "657389"
  },
  {
    "text": "its own user name space process namespace has its separate C group has a",
    "start": "657389",
    "end": "663339"
  },
  {
    "text": "very strict second filter and within that process the threads some threads of",
    "start": "663339",
    "end": "671559"
  },
  {
    "text": "that process are the virtual CPUs of the virtual machine so basically security is there",
    "start": "671559",
    "end": "677709"
  },
  {
    "text": "from the ground up and and by default next we try to build a very very minimal",
    "start": "677709",
    "end": "687160"
  },
  {
    "text": "machine model machine model is basically what the guest operating system sees when it looks around at its world if",
    "start": "687160",
    "end": "694689"
  },
  {
    "text": "you're a fire cracker guest operating system all you see is basically a network devices and storage devices and",
    "start": "694689",
    "end": "700569"
  },
  {
    "text": "nothing more there's no things that you might find in other virtual machines like floppy disks graphics devices",
    "start": "700569",
    "end": "708509"
  },
  {
    "text": "keyboards things like that they don't exist this helps it having a very small",
    "start": "708509",
    "end": "713529"
  },
  {
    "text": "attack surface surface for an attacker to basically probe and it also allows",
    "start": "713529",
    "end": "718540"
  },
  {
    "text": "the guest operating system to boot very fast so with a properly configured Linux",
    "start": "718540",
    "end": "724959"
  },
  {
    "text": "you can get under 125 milliseconds from the start when you turn on the microvia",
    "start": "724959",
    "end": "731290"
  },
  {
    "text": "to the point where you reach user space in it from that point on we consider it to be the application owner's",
    "start": "731290",
    "end": "737230"
  },
  {
    "text": "responsibility you know you can do lots of stuff where you can do or I can just run your application directly because",
    "start": "737230",
    "end": "744550"
  },
  {
    "text": "this happen the startup happens very fast and because the device model is very lightweight and you know just",
    "start": "744550",
    "end": "751060"
  },
  {
    "text": "really not a lot of work that's done during the initialization we can reach",
    "start": "751060",
    "end": "756420"
  },
  {
    "text": "basically very high bursts of VM creation rates so I think our peak the",
    "start": "756420",
    "end": "763689"
  },
  {
    "text": "peak that we got in our testing was 150 micro VMS per second per host so that",
    "start": "763689",
    "end": "769360"
  },
  {
    "text": "means that if you want to spin up a thousand sandboxes for some burst of customer demand if you had 10 hosts you",
    "start": "769360",
    "end": "777759"
  },
  {
    "text": "could do it in under a second and finally we try to optimize for the",
    "start": "777759",
    "end": "785559"
  },
  {
    "text": "things that allow you to have great scale within one single host so the",
    "start": "785559",
    "end": "793839"
  },
  {
    "text": "overhead of each of firecracker virtual machine monitor is under five megabytes of memory so if you have you know a",
    "start": "793839",
    "end": "800410"
  },
  {
    "text": "thousand of them you will just take up five gigabytes of your of your service memory",
    "start": "800410",
    "end": "806310"
  },
  {
    "text": "we do a number of other things such as rate limiting of network and drive",
    "start": "806310",
    "end": "812830"
  },
  {
    "text": "access so that all of these many VMs can be good neighbors and not influence each",
    "start": "812830",
    "end": "818770"
  },
  {
    "text": "other's use of the underlying hardware resources we have default over a subscription of both CPU and to some",
    "start": "818770",
    "end": "826000"
  },
  {
    "text": "degree of the physical memory this is something that the let's say the the",
    "start": "826000",
    "end": "832180"
  },
  {
    "text": "system the systems that implement that the leverage firecracker can control so we provide a C group and an API to",
    "start": "832180",
    "end": "838810"
  },
  {
    "text": "control the rate limiters you can configure it to match your use case so",
    "start": "838810",
    "end": "845530"
  },
  {
    "start": "845000",
    "end": "845000"
  },
  {
    "text": "yeah I'll go a little bit deeper into the design principles and then we'll look at the at firecrackers architecture",
    "start": "845530",
    "end": "853980"
  },
  {
    "text": "the first the first one of this is multi-tenancy so everything we did we did with a philosophy that we're not",
    "start": "853980",
    "end": "861400"
  },
  {
    "text": "gonna look at anything that's inside of the of the micro VM so we don't even log anything that goes on in there but at",
    "start": "861400",
    "end": "869440"
  },
  {
    "text": "the same time we're gonna assume that every single one of these micro vm's is hostile and our threat model includes",
    "start": "869440",
    "end": "876160"
  },
  {
    "text": "scenarios where you know one micro VM is trying to attack the others but also scenarios were a majority of micro VMS",
    "start": "876160",
    "end": "883780"
  },
  {
    "text": "on a host happened to be malicious and we tried to build the 2d to build the",
    "start": "883780",
    "end": "889420"
  },
  {
    "text": "device model the rate limiters and all of that in a way that mitigates this",
    "start": "889420",
    "end": "895150"
  },
  {
    "text": "this threat another thing we do is that",
    "start": "895150",
    "end": "900300"
  },
  {
    "text": "we allow any V CPU and memory combination so you can have any shape of",
    "start": "900300",
    "end": "905710"
  },
  {
    "text": "sandbox you have like you know for lambda the defaults I believe one or two CPUs and memory ranging from 128 to 3",
    "start": "905710",
    "end": "912700"
  },
  {
    "text": "gigabytes but there's no reason why you couldn't have a VM with 16 cores and one gigabyte of memory or one gigabyte of",
    "start": "912700",
    "end": "920410"
  },
  {
    "text": "memory so or one core and you know 32 gigabytes of memory so this is again",
    "start": "920410",
    "end": "926770"
  },
  {
    "text": "something that's up to the to the service owner to customize oversubscription is a on by default you",
    "start": "926770",
    "end": "934180"
  },
  {
    "text": "can not use it by basically pinning the cgroups to specific course and and allocating a fixed amount of a",
    "start": "934180",
    "end": "941940"
  },
  {
    "text": "fixed slice of memory to a micro VM this basically means you're kind of slicing",
    "start": "941940",
    "end": "948040"
  },
  {
    "text": "the server which is generally not how we envision firecracker to be used but it",
    "start": "948040",
    "end": "953440"
  },
  {
    "text": "is possible for for specific use cases we can peak at about 150 of VMs per",
    "start": "953440",
    "end": "960460"
  },
  {
    "text": "second but for a steady-state a hundred is what we've seen gives you",
    "start": "960460",
    "end": "966820"
  },
  {
    "text": "good your resource utilization on your on your host so if you keep creating and destroying VMs at this rate you probably",
    "start": "966820",
    "end": "973000"
  },
  {
    "text": "won't get any any kind of lots the observable impact for your running workloads another thing that was",
    "start": "973000",
    "end": "980530"
  },
  {
    "text": "important for us was to not scale in any way with the software side of things so",
    "start": "980530",
    "end": "986320"
  },
  {
    "text": "you want to make sure that the only thing that limits how much stuff you can cram on a server is just your physical",
    "start": "986320",
    "end": "992530"
  },
  {
    "text": "resources so we've built fire cracker in such a way that there is no resource contention at the software level",
    "start": "992530",
    "end": "998500"
  },
  {
    "text": "there aren't any software resources that or software limits that you're gonna hit just Hardware limits when obviously at",
    "start": "998500",
    "end": "1004560"
  },
  {
    "text": "some point for example if you if you get your estimates wrong and all of your VMs",
    "start": "1004560",
    "end": "1010230"
  },
  {
    "text": "will start using all of the CPU that's been allocated to them and you don't have a thousand CPUs in there",
    "start": "1010230",
    "end": "1015360"
  },
  {
    "text": "obviously the things are going to slow down and finally we decided to do a a",
    "start": "1015360",
    "end": "1020840"
  },
  {
    "text": "host facing REST API this for for for people that have investigated is not the",
    "start": "1020840",
    "end": "1027300"
  },
  {
    "text": "most super efficient way to communicate on the same host between two agents but it is something that's easily achievable",
    "start": "1027300",
    "end": "1035370"
  },
  {
    "text": "by any any kind of client we have a you know we have a swagger spec you can generate clients it's very easy to",
    "start": "1035370",
    "end": "1041069"
  },
  {
    "text": "understand they're easy to interrogate and join is something that a lot of developers are familiar with and even",
    "start": "1041070",
    "end": "1048240"
  },
  {
    "text": "though we started from lambdas use case you know we've built fire cracker as a pretty much agnostic piece of technology",
    "start": "1048240",
    "end": "1054090"
  },
  {
    "text": "that can be deployed into into any kind of computers and so it went with a let's",
    "start": "1054090",
    "end": "1059580"
  },
  {
    "text": "see a common denominator API and finally",
    "start": "1059580",
    "end": "1065520"
  },
  {
    "text": "we we really want to stick to our minimalist approach to the machine and",
    "start": "1065520",
    "end": "1070560"
  },
  {
    "text": "device model / I think I will simply become an open-source project we probably accepted",
    "start": "1070560",
    "end": "1078150"
  },
  {
    "text": "as many feature requests as we've denied if something is is sort of useful we",
    "start": "1078150",
    "end": "1083640"
  },
  {
    "text": "require us to make things a lot more complicated we chose not to do it so for example we don't Demmel a tape our",
    "start": "1083640",
    "end": "1090600"
  },
  {
    "text": "management device at all and so for a long time our recommended way of",
    "start": "1090600",
    "end": "1095850"
  },
  {
    "text": "shutting down a micro VM was just to p kill the process now we have a slightly",
    "start": "1095850",
    "end": "1101760"
  },
  {
    "text": "more elegant method but this is an example of trade-offs that we've chosen not to make and frankly a lot of the",
    "start": "1101760",
    "end": "1108990"
  },
  {
    "text": "performance that you get with firecracker isn't really due to some you know breakthrough innovation but rather",
    "start": "1108990",
    "end": "1115409"
  },
  {
    "text": "to a very very focused set of choices that we've made over time to achieve this and keep this disadvantages this is",
    "start": "1115409",
    "end": "1123570"
  },
  {
    "text": "the API only we really go into details it's what you expect from a virtual machine started stop it ad network",
    "start": "1123570",
    "end": "1129210"
  },
  {
    "text": "devices and so on and the architecture",
    "start": "1129210",
    "end": "1134850"
  },
  {
    "start": "1132000",
    "end": "1132000"
  },
  {
    "text": "might be a bit more interesting so you can you can see there basically there's the physical machine you can also run it",
    "start": "1134850",
    "end": "1142289"
  },
  {
    "text": "in a in a virtual machine that allows for Nesta virtualization but for performance reasons we expect most",
    "start": "1142289",
    "end": "1148710"
  },
  {
    "text": "customers to use it on a on a physical machine we use kata as we mentioned we",
    "start": "1148710",
    "end": "1154770"
  },
  {
    "text": "use the k vm and the network subsystems from linux and then the rest of it is in",
    "start": "1154770",
    "end": "1160530"
  },
  {
    "text": "is in user space you can have lots of VMs each of with its own CPU and memory",
    "start": "1160530",
    "end": "1165809"
  },
  {
    "text": "allocation let's zoom in a bit on the firecracker bit so this is like a",
    "start": "1165809",
    "end": "1172320"
  },
  {
    "text": "blow-up of the of the orange thing at the bottom they're the main components",
    "start": "1172320",
    "end": "1178650"
  },
  {
    "text": "of firecracker at this time are the API part which is a control plan for everything else Network and storage",
    "start": "1178650",
    "end": "1184169"
  },
  {
    "text": "subsystems which are based on Verdejo this means that the Linux guests will have default drivers of paravirtualized",
    "start": "1184169",
    "end": "1190919"
  },
  {
    "text": "drivers for them rate limiting which helps keep that good neighbor property",
    "start": "1190919",
    "end": "1197039"
  },
  {
    "text": "and the metadata surface which is basically a something that's popular with in clouds it's a way to tell your",
    "start": "1197039",
    "end": "1204649"
  },
  {
    "text": "machine things of it's environment you basically put some key value pairs in there with the API",
    "start": "1204649",
    "end": "1210030"
  },
  {
    "text": "and the the guests can read them from hard-coded IP address yeah and the other",
    "start": "1210030",
    "end": "1217800"
  },
  {
    "text": "thing that that's visible on this on this chart is D is our isolation model",
    "start": "1217800",
    "end": "1223080"
  },
  {
    "text": "so the guest itself is isolated via all the let's say virtual machine boundaries",
    "start": "1223080",
    "end": "1229730"
  },
  {
    "text": "that are common in KVM so it'll have a vcp with a separate memory space which",
    "start": "1229730",
    "end": "1235920"
  },
  {
    "text": "is is let's say Hardware enforced to a great degree and then on top of that the",
    "start": "1235920",
    "end": "1241440"
  },
  {
    "text": "the white barrier at the edge is is what we call our jailer it's basically just a",
    "start": "1241440",
    "end": "1246450"
  },
  {
    "text": "super simple version of run C conceptually speaking so it just uses",
    "start": "1246450",
    "end": "1252090"
  },
  {
    "text": "all the Linux primitives namespaces C groups etc to confine that process one",
    "start": "1252090",
    "end": "1259380"
  },
  {
    "text": "firecracker a micro VM is exactly one process in your system if you want to spawn a hundred micro games you will",
    "start": "1259380",
    "end": "1266010"
  },
  {
    "text": "have a hundred of these processes each of them will have those API is each of them will be completely independent you",
    "start": "1266010",
    "end": "1271380"
  },
  {
    "text": "can rate a limit them you know let's set C groups and kill them etc without affecting any of the others ok so so",
    "start": "1271380",
    "end": "1282180"
  },
  {
    "text": "much about firecracker itself I'm going to talk a bit about about lambda now so who here has knows about AWS lambda okay",
    "start": "1282180",
    "end": "1291900"
  },
  {
    "text": "that's good who's tried it out okay who's using it in production okay so",
    "start": "1291900",
    "end": "1298200"
  },
  {
    "text": "there's a good chance that that the people using in a production are now running on on firecracker this should be",
    "start": "1298200",
    "end": "1306300"
  },
  {
    "text": "mostly transparent to you but yeah now basically lambda ever since Fargo was",
    "start": "1306300",
    "end": "1313200"
  },
  {
    "text": "announced last year at reinvent has been starting sandbox is in production on",
    "start": "1313200",
    "end": "1320040"
  },
  {
    "text": "firecracker and I'm gonna here I'm going",
    "start": "1320040",
    "end": "1325800"
  },
  {
    "text": "to talk a bit about both the pre firecracker setup and the current firecrackers based setup so just a recap",
    "start": "1325800",
    "end": "1333840"
  },
  {
    "text": "for who's not familiar with this lambda is an event-driven serverless code execution so you basically create a code package you",
    "start": "1333840",
    "end": "1339840"
  },
  {
    "text": "send it over to 2 lambda and we'll execute as a response to some event which can be an API call you know object",
    "start": "1339840",
    "end": "1345779"
  },
  {
    "text": "uploading is 3 etc lambdas available in all the regions by the way it's a",
    "start": "1345779",
    "end": "1351840"
  },
  {
    "text": "foundational service meaning that of any new regional launch is the guarantee to have to have lambda right this is the",
    "start": "1351840",
    "end": "1362640"
  },
  {
    "text": "lambda worker I it was also in the example before but basically this is the",
    "start": "1362640",
    "end": "1368120"
  },
  {
    "text": "unit of customer code execution on a worker we provision sand boxes one",
    "start": "1368120",
    "end": "1375270"
  },
  {
    "text": "sandbox is one sandbox will run one function everything that that you when",
    "start": "1375270",
    "end": "1382919"
  },
  {
    "text": "you create your your lambda function D you know the runtime the memory the CPU",
    "start": "1382919",
    "end": "1388740"
  },
  {
    "text": "the other features that you select are basically all enacted by these sand",
    "start": "1388740",
    "end": "1394919"
  },
  {
    "text": "boxes and this is what the sandbox stack looks like for both the let's say the",
    "start": "1394919",
    "end": "1401309"
  },
  {
    "start": "1396000",
    "end": "1396000"
  },
  {
    "text": "ec2 instance fleet version end and the firecracker version so your code is way at the top running either as an",
    "start": "1401309",
    "end": "1408600"
  },
  {
    "text": "interpreter at runtime or a problem or a binary blob or something like that or in a JVM",
    "start": "1408600",
    "end": "1414260"
  },
  {
    "text": "then there's the sandbox itself then there's the guest OS and there's between those there are maybe some agents like",
    "start": "1414260",
    "end": "1421350"
  },
  {
    "text": "the cloud watch agent which is collecting your logs and sending them to the cloud web service",
    "start": "1421350",
    "end": "1426480"
  },
  {
    "text": "then there's the hypervisor then obviously the host OS and the hardware now in from a let's say ownership and",
    "start": "1426480",
    "end": "1435870"
  },
  {
    "text": "and security model if we use ec2 as isolation then we have these big",
    "start": "1435870",
    "end": "1441630"
  },
  {
    "text": "instance and so so basically we will have more sand boxes in the same guest",
    "start": "1441630",
    "end": "1448230"
  },
  {
    "text": "OS this is fine because we use the same customer account so we will not share",
    "start": "1448230",
    "end": "1455070"
  },
  {
    "text": "the the ec2 instance between more than one account but it does mean that of all the functions will share the the same",
    "start": "1455070",
    "end": "1461250"
  },
  {
    "text": "underlying guest OS and this is what happens basically when you draw the line",
    "start": "1461250",
    "end": "1467610"
  },
  {
    "text": "at the one we used ec2 instances but firecracker what happens is that we take these really big",
    "start": "1467610",
    "end": "1474270"
  },
  {
    "start": "1470000",
    "end": "1470000"
  },
  {
    "text": "dot mailboxes this is a like a recent instance type where you can get the",
    "start": "1474270",
    "end": "1480480"
  },
  {
    "text": "actual hardware machine as an ec2 instance and what lambda does is they",
    "start": "1480480",
    "end": "1486210"
  },
  {
    "text": "get these instances and they basically create lots and lots and lots and lots",
    "start": "1486210",
    "end": "1491550"
  },
  {
    "text": "of firecracker micro VM zaandam which is a very nice property namely that now we",
    "start": "1491550",
    "end": "1497280"
  },
  {
    "text": "can have one function in one hypervisor",
    "start": "1497280",
    "end": "1502800"
  },
  {
    "text": "this is useful for customers that in a sense used their functions to run other",
    "start": "1502800",
    "end": "1508920"
  },
  {
    "text": "other people's code because now they don't need to create a lots of account partitions to do that",
    "start": "1508920",
    "end": "1515460"
  },
  {
    "text": "they can trust that every single function gets its own hardened virtualization boundary so zooming out a",
    "start": "1515460",
    "end": "1522660"
  },
  {
    "start": "1521000",
    "end": "1521000"
  },
  {
    "text": "bit from the from the first example this is what it looks like if you were to pack one workload type like for example",
    "start": "1522660",
    "end": "1530550"
  },
  {
    "text": "one function per server and this is what you need to do if you don't have a",
    "start": "1530550",
    "end": "1536570"
  },
  {
    "text": "strong reservation boundary between your workloads this gets inefficient as I mentioned before so what we what we're",
    "start": "1536570",
    "end": "1543360"
  },
  {
    "start": "1543000",
    "end": "1543000"
  },
  {
    "text": "doing now is with firecracker we can mix this work clothes around there's there's",
    "start": "1543360",
    "end": "1550830"
  },
  {
    "text": "one way you can basically just do statistical multiplexing namely if the numbers get big enough the peaks and",
    "start": "1550830",
    "end": "1556650"
  },
  {
    "text": "valleys you leave an out and you'll get better utilization but there's an even better way to do it namely you can",
    "start": "1556650",
    "end": "1563310"
  },
  {
    "start": "1562000",
    "end": "1562000"
  },
  {
    "text": "actually pick workloads that pack well together so you can actually try to see if two world goes Rd correlated or even",
    "start": "1563310",
    "end": "1570240"
  },
  {
    "text": "better if they're inversely correlated so that when one has a peak tier one has a valley and pack those together or you",
    "start": "1570240",
    "end": "1577110"
  },
  {
    "text": "can try to you know use various methods at the placement layer which decides where the workloads go to actually",
    "start": "1577110",
    "end": "1583830"
  },
  {
    "text": "minimize the chances of contention and what we're doing in the background is",
    "start": "1583830",
    "end": "1590160"
  },
  {
    "text": "that we were iterating over and over on this system both at the at the sandbox",
    "start": "1590160",
    "end": "1595170"
  },
  {
    "text": "level and at the placement level in order to eventually get the optimum Hardware utilization right and I think",
    "start": "1595170",
    "end": "1604500"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "Arun is here now just in time to talk about containers",
    "start": "1604500",
    "end": "1610570"
  },
  {
    "text": "all right thank you I think I'm miked up here oh okay all right thank you so much",
    "start": "1613000",
    "end": "1619240"
  },
  {
    "text": "I'm excited you know almost the United flight got delayed by three hours in the",
    "start": "1619720",
    "end": "1625580"
  },
  {
    "text": "ship whole train there's no gate I almost missed my talk you know the first talk already got moved to the afternoon",
    "start": "1625580",
    "end": "1631220"
  },
  {
    "text": "so I'm glad I'm here so what is the context of this the context here is you",
    "start": "1631220",
    "end": "1637190"
  },
  {
    "text": "know we talked we learn about firecracker how we're using it in AWS lambda let's take a look at it how we're",
    "start": "1637190",
    "end": "1642680"
  },
  {
    "text": "looking at it from the container services landscape perspective now this is sort of how we look at it at Amazon",
    "start": "1642680",
    "end": "1648260"
  },
  {
    "text": "what the container services look like so the very top of course there's a management layer so you can use Amazon",
    "start": "1648260",
    "end": "1654380"
  },
  {
    "text": "ECS which is what we launched about four years ago or Amazon eks which is ever managed kubernetes service which is what",
    "start": "1654380",
    "end": "1661370"
  },
  {
    "text": "we launched last year so a little over a year ago it's been a ga now now the way",
    "start": "1661370",
    "end": "1666380"
  },
  {
    "text": "you look at those services there there is where do you host the data plane because those services really offer the",
    "start": "1666380",
    "end": "1672980"
  },
  {
    "text": "control plane so in terms of the data plane you're looking at it so it could be on ec2 where you can bring your data",
    "start": "1672980",
    "end": "1679640"
  },
  {
    "text": "plane and you can attach it over there which works both for ECS any KS or you can say I don't care about the data",
    "start": "1679640",
    "end": "1687590"
  },
  {
    "text": "plane use AWS Fargate mode in which case all you say is here's a container go run",
    "start": "1687590",
    "end": "1693920"
  },
  {
    "text": "it and scale it and manage it and whatever needs to be done take care of it for me now today forget is available",
    "start": "1693920",
    "end": "1700040"
  },
  {
    "text": "only for ECS now forget fundamentally takes away the architecture of having a",
    "start": "1700040",
    "end": "1706010"
  },
  {
    "text": "node and kubernetes is a node centric architecture so those discussions are",
    "start": "1706010",
    "end": "1711350"
  },
  {
    "text": "really happening in the community on how we will really make the far gate and kubernetes integration essentially and",
    "start": "1711350",
    "end": "1716840"
  },
  {
    "text": "then of course registry is an important part of your entire container architecture so ECS works on both ec2",
    "start": "1716840",
    "end": "1724790"
  },
  {
    "text": "and far gate eks works today only with ec2 with forget coming up so how many of",
    "start": "1724790",
    "end": "1731390"
  },
  {
    "text": "you are you have learned about how many of you know forget what is forget anybody using in production few hands",
    "start": "1731390",
    "end": "1738170"
  },
  {
    "text": "all right very cool so what is forget well forget is a compute engine for EC yesterday and for eks",
    "start": "1738170",
    "end": "1745440"
  },
  {
    "text": "coming up the whole idea is you bring a container you give us a container and you say go run the container and it",
    "start": "1745440",
    "end": "1751590"
  },
  {
    "text": "scales automatically there is no data plane that is the fundamental way you should look at containers as opposed to",
    "start": "1751590",
    "end": "1757470"
  },
  {
    "text": "oh I need to scale my cluster first and then my container second there should be no scaling cluster or no",
    "start": "1757470",
    "end": "1764669"
  },
  {
    "text": "you should just scale the application and the container should scale automatically depending upon you know your thresholds that are defined by it",
    "start": "1764669",
    "end": "1770850"
  },
  {
    "text": "now very much like lambda I know the wave forget operates is there about 40",
    "start": "1770850",
    "end": "1777030"
  },
  {
    "text": "different combinations so you can say here is amount of CPU or that I want is amount of memory that I want and those",
    "start": "1777030",
    "end": "1783360"
  },
  {
    "text": "different combinations is what you can specify and then behind the scenes what we do is we provision the right easy to",
    "start": "1783360",
    "end": "1789900"
  },
  {
    "text": "instance type for you and we have sort of a warm pool of ec2 instances being",
    "start": "1789900",
    "end": "1795419"
  },
  {
    "text": "maintained for you we bring the ec2 instance we provision you were for gate tasks in there and we run it over there",
    "start": "1795419",
    "end": "1803040"
  },
  {
    "text": "now if you take a look at the combinations here the lowest V CPU is",
    "start": "1803040",
    "end": "1809150"
  },
  {
    "text": "quarter or 0.25 and the lowest memory is 0.5 keep a note of that because that is",
    "start": "1809150",
    "end": "1815970"
  },
  {
    "text": "relevant on why firecracker makes a difference here so if you take a look at",
    "start": "1815970",
    "end": "1822480"
  },
  {
    "start": "1820000",
    "end": "1820000"
  },
  {
    "text": "this this is sort of how far gate is laid out today and this is with the ec2 resource usage so what we have is on the",
    "start": "1822480",
    "end": "1830190"
  },
  {
    "text": "right we have a service account which is basically managed by AWS where we have a bunch of ec2 warm pool instances sitting",
    "start": "1830190",
    "end": "1837210"
  },
  {
    "text": "for you now different accounts and in order to maintain the multi-tenancy",
    "start": "1837210",
    "end": "1842940"
  },
  {
    "text": "nature of Fargate what we do is we provision we use basically the ec2 instance as the security boundary so",
    "start": "1842940",
    "end": "1849870"
  },
  {
    "text": "that is a virtualization boundary and the security boundary so you say provision a task we take a look at your",
    "start": "1849870",
    "end": "1856770"
  },
  {
    "text": "V CPU and memory requirements bring the closest to ec2 instance that is to it and provision your forget task to it and",
    "start": "1856770",
    "end": "1863880"
  },
  {
    "text": "as I said for security reasons we run one task on one ec2 instance now go back",
    "start": "1863880",
    "end": "1870720"
  },
  {
    "text": "to where we were looking at the far gate task definitions 0.25 and 0.5",
    "start": "1870720",
    "end": "1876660"
  },
  {
    "text": "there is no easy to instance that gives you that kind of memory so from our perspective this is not an efficient",
    "start": "1876660",
    "end": "1883650"
  },
  {
    "text": "utilization of resources so essentially you know there is a lot of wastage that is happening behind the scene but",
    "start": "1883650",
    "end": "1889080"
  },
  {
    "text": "security is job zero for us so that cannot make sense for us to begin with but within a ws we are constantly",
    "start": "1889080",
    "end": "1895170"
  },
  {
    "text": "looking for ways on how we can improve the utilization of our own resources and particularly at Amazon scale it makes a",
    "start": "1895170",
    "end": "1903030"
  },
  {
    "text": "big difference even a tiny bit of improvement that we can make we make a significant investment on investment on",
    "start": "1903030",
    "end": "1908700"
  },
  {
    "text": "our side and the way we have operated is any time we make a saving on our side we",
    "start": "1908700",
    "end": "1914640"
  },
  {
    "text": "always pass it back to the customer none of our customers have complained that why did you cut down the prices for the",
    "start": "1914640",
    "end": "1920100"
  },
  {
    "text": "services so in this case for example you could see you know from the security perspective you know blue green and",
    "start": "1920100",
    "end": "1926910"
  },
  {
    "text": "orange three different customers they're all running in their own set of ec2 instances and kind of gives us that",
    "start": "1926910",
    "end": "1933240"
  },
  {
    "text": "multi-tenancy nature of it so now let's see how does this game changes with",
    "start": "1933240",
    "end": "1940200"
  },
  {
    "start": "1935000",
    "end": "1935000"
  },
  {
    "text": "Firecracker what changes are done essentially over here so first of all",
    "start": "1940200",
    "end": "1947030"
  },
  {
    "text": "one task but ec2 instance model goes away you know you don't need that anymore that you don't need ec2 instance",
    "start": "1947030",
    "end": "1955350"
  },
  {
    "text": "as the hardware boundary or the security boundary okay now each forget task is",
    "start": "1955350",
    "end": "1962370"
  },
  {
    "text": "now run in a micro VM so essentially what we do is behind the scene we can now spin up a firecracker micro VM for",
    "start": "1962370",
    "end": "1968880"
  },
  {
    "text": "you and because firecracker micro VM has ready to explain it has ability to specify the amount of fee CPU and the",
    "start": "1968880",
    "end": "1976050"
  },
  {
    "text": "memory that you require so we can very closely very closely match because there's a very minimal overhead",
    "start": "1976050",
    "end": "1981090"
  },
  {
    "text": "essentially a five megabyte overhead that we talked about so we can very closely match that over there well what",
    "start": "1981090",
    "end": "1987810"
  },
  {
    "text": "that also means is we don't need a warm pool we don't need to maintain a warm pool okay so that thing goes away as",
    "start": "1987810",
    "end": "1993570"
  },
  {
    "text": "well so that's sort of how our architecture is looking like now what happens next is we're very much like",
    "start": "1993570",
    "end": "2000920"
  },
  {
    "text": "lambda now we can create those big use those bare metal instances I three metal",
    "start": "2000920",
    "end": "2007040"
  },
  {
    "text": "and be metal whatever works for you and about behind-the-scene this is done for you automatically you don't need to know",
    "start": "2007040",
    "end": "2012679"
  },
  {
    "text": "how to know this because this is automatically happening for you but that's what we do behind the scene so in",
    "start": "2012679",
    "end": "2018020"
  },
  {
    "text": "terms of we have big bare metal instances but now what we can do is we",
    "start": "2018020",
    "end": "2023240"
  },
  {
    "text": "can move those instances around very much like lambda we can look at what",
    "start": "2023240",
    "end": "2029090"
  },
  {
    "text": "workloads are directly correlated inversely correlated how we can get the efficient utilization",
    "start": "2029090",
    "end": "2035000"
  },
  {
    "text": "I wanna get a CPU intensive and a network intensive workload together in the same machine so that there is no",
    "start": "2035000",
    "end": "2040640"
  },
  {
    "text": "resource contention essentially and as you learn from Radu here he talked about it from 5-lakh perspective there are no",
    "start": "2040640",
    "end": "2047710"
  },
  {
    "text": "software contention so it's only the software part is what what we need to manage from the application perspective",
    "start": "2047710",
    "end": "2053000"
  },
  {
    "text": "and that's what we can manage over here is essentially so as I talked about you",
    "start": "2053000",
    "end": "2061339"
  },
  {
    "text": "know this is and if you are running far gate you know we have started migrating the workloads of AWS far gate towards",
    "start": "2061339",
    "end": "2068720"
  },
  {
    "text": "using firecracker based micro VMs and because of that we have realized efficiency in our overall utilization of",
    "start": "2068720",
    "end": "2076490"
  },
  {
    "text": "the infrastructure behind the scene as well so earlier this year you can take a look at it we have reduced prices over",
    "start": "2076490",
    "end": "2082849"
  },
  {
    "text": "seventy times in the history of AWS so earlier this year we cut down prices for",
    "start": "2082849",
    "end": "2088368"
  },
  {
    "text": "V CPU and memory depending upon what combination you are using so cumulative",
    "start": "2088369",
    "end": "2093470"
  },
  {
    "text": "if you look at it we have given you a price cut for about 35 to 50 percent on AWS for gate and that's primarily driven",
    "start": "2093470",
    "end": "2100970"
  },
  {
    "text": "by because what firecracker enabled for forget now one of the key things that we",
    "start": "2100970",
    "end": "2109849"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "want to talk also about is firecracker and continuity integration so what is really container D essentially so if you",
    "start": "2109849",
    "end": "2115880"
  },
  {
    "text": "think about firecracker container D project enables container D to manage",
    "start": "2115880",
    "end": "2122119"
  },
  {
    "text": "firecracker micro VMs essentially okay now continuity is a layer that allows you to run containers in a very",
    "start": "2122119",
    "end": "2128660"
  },
  {
    "text": "container organized in a very container centric way so what you do is you have a container D layer which then talks to",
    "start": "2128660",
    "end": "2135380"
  },
  {
    "text": "the run see behind the scene which is what is basically running your containers you know in a very Stan",
    "start": "2135380",
    "end": "2141090"
  },
  {
    "text": "away so with firecracker container D project what we're doing is we're building that integration we're",
    "start": "2141090",
    "end": "2146820"
  },
  {
    "text": "firecracker and continuity can talk to each other and we are also looking at it",
    "start": "2146820",
    "end": "2151950"
  },
  {
    "text": "how container D could be the way by which we can start using that for ECS or eks",
    "start": "2151950",
    "end": "2157710"
  },
  {
    "text": "and so that that entire integration becomes very simplified for us now",
    "start": "2157710",
    "end": "2164250"
  },
  {
    "text": "because of the overhead of firecracker is low we can also that also enables out",
    "start": "2164250",
    "end": "2169620"
  },
  {
    "text": "of the container density per host is much higher so that also gives us the",
    "start": "2169620",
    "end": "2175170"
  },
  {
    "text": "ability to not do multi-tenancy essentially because if you think about ECS control plane is multi-tenant today",
    "start": "2175170",
    "end": "2182520"
  },
  {
    "text": "because I mean when you create a ECS cluster you know you you go her to create an easy as kloster and then you",
    "start": "2182520",
    "end": "2190020"
  },
  {
    "text": "go ahead and create another Keyshia's cluster they are all sitting on the same control plane with eks that is not the case with eks essentially you create a",
    "start": "2190020",
    "end": "2197130"
  },
  {
    "text": "control plane and you create another control plane and they don't talk to each other unless you make them explicitly talk to each other so we are",
    "start": "2197130",
    "end": "2204630"
  },
  {
    "text": "also using the OCI image format to make sure that we stay compatible with the standard container ecosystem and that's",
    "start": "2204630",
    "end": "2210420"
  },
  {
    "text": "the part that I was talking about now the key part that I want to highlight here is today this firecracker container",
    "start": "2210420",
    "end": "2216690"
  },
  {
    "text": "the integration the way we are looking at it would work with kubernetes and amazon ECS but by no means it would be",
    "start": "2216690",
    "end": "2222750"
  },
  {
    "text": "restricted essentially to you know these only because it's using the OCI compatible image format so really what",
    "start": "2222750",
    "end": "2231090"
  },
  {
    "text": "we are looking at from this project is the fire cracker and this is done in an open source so you can look at the github repo for this under the",
    "start": "2231090",
    "end": "2237060"
  },
  {
    "text": "firecracker org but essentially what we are trying to do is define a standard by",
    "start": "2237060",
    "end": "2242130"
  },
  {
    "text": "which you could have a light as a container secure as a VM so you can have both of those artifacts put together",
    "start": "2242130",
    "end": "2248460"
  },
  {
    "text": "both of those quality of attributes really put together really quickly",
    "start": "2248460",
    "end": "2253530"
  },
  {
    "start": "2251000",
    "end": "2251000"
  },
  {
    "text": "running through the architecture over here so what you have here is continuity",
    "start": "2253530",
    "end": "2258600"
  },
  {
    "text": "and on the top left here which is basically what is getting the image from the content store on the top which then",
    "start": "2258600",
    "end": "2265650"
  },
  {
    "text": "talks with the fire cracker runtime which then provisions of fire cracker micro vm for you when as you look at the",
    "start": "2265650",
    "end": "2270720"
  },
  {
    "text": "fire cracker vmm or the virtual machine manager that has a disk and a kernel image now it uses those two",
    "start": "2270720",
    "end": "2277470"
  },
  {
    "text": "together now you can customize those images together and if you look at the we open source file cuddle utility which",
    "start": "2277470",
    "end": "2285900"
  },
  {
    "text": "allows you to provision or firecracker my chromium very easily along with that we give you some a whole bunch of sample",
    "start": "2285900",
    "end": "2292980"
  },
  {
    "text": "VM disk images and kernel images so you can use them together to create your own firecracker micro VM but the whole point",
    "start": "2292980",
    "end": "2300390"
  },
  {
    "text": "here is how will you customize those images but essentially if you look at it at the bottom the firecracker micro VM",
    "start": "2300390",
    "end": "2305760"
  },
  {
    "text": "really takes those kernel in the disk image creates the micro VM within which there is an internal fire cracker agent",
    "start": "2305760",
    "end": "2312870"
  },
  {
    "text": "so the fire cracker runtime is really talking to the fire cracker agent to use invoke currency and then run the",
    "start": "2312870",
    "end": "2319140"
  },
  {
    "text": "container that's sort of what the integration is looking like and the direction that we are heading towards would allow us to leverage that same",
    "start": "2319140",
    "end": "2325170"
  },
  {
    "text": "integration whether it is ECS or eks now",
    "start": "2325170",
    "end": "2330510"
  },
  {
    "text": "fire cracker is an open source project and that's what I was going to talk about right so basically we reinvent",
    "start": "2330510",
    "end": "2340770"
  },
  {
    "text": "last year in December or late November we launched fire cracker as an open",
    "start": "2340770",
    "end": "2346050"
  },
  {
    "text": "source project we we've been working on it throughout last year but we've",
    "start": "2346050",
    "end": "2352380"
  },
  {
    "text": "actually started to develop and get directly on github so you can you can see our entire projects history there we",
    "start": "2352380",
    "end": "2359790"
  },
  {
    "text": "were we thought that this is a good project open source because I'd say",
    "start": "2359790",
    "end": "2367140"
  },
  {
    "text": "let's say it's a decoupled piece of technology it works very well for lots of use cases like our one just explained",
    "start": "2367140",
    "end": "2372600"
  },
  {
    "text": "and and it's also something that that we saw as an opportunity to give the",
    "start": "2372600",
    "end": "2379860"
  },
  {
    "text": "community the tools to improve basically work or localized isolation anywhere in",
    "start": "2379860",
    "end": "2386130"
  },
  {
    "text": "the in the container ecosystem since you open sourced we've had 88 contributions",
    "start": "2386130",
    "end": "2392130"
  },
  {
    "text": "from 32 contributors that's about 22% of the of the pull requests that have been",
    "start": "2392130",
    "end": "2398570"
  },
  {
    "text": "created since the open source we've had dozens of bug reports 19 feature",
    "start": "2398570",
    "end": "2403800"
  },
  {
    "text": "requests and feedback for our own RFC's and we were",
    "start": "2403800",
    "end": "2409210"
  },
  {
    "text": "sharing our story at several conferences across the year the other interesting thing that's",
    "start": "2409210",
    "end": "2414400"
  },
  {
    "text": "happened is that as you came out with with firecracker we also published our Charter and said hey this is this is",
    "start": "2414400",
    "end": "2421390"
  },
  {
    "text": "basically a very specialized tool we want to just solve this one use case of serverless compute you know containers",
    "start": "2421390",
    "end": "2429160"
  },
  {
    "text": "functions but this is it this is all we do you know like I mentioned before we we wouldn't add a power manager to the",
    "start": "2429160",
    "end": "2435010"
  },
  {
    "text": "virtual machine model and so with a bunch of other engineers from other",
    "start": "2435010",
    "end": "2441690"
  },
  {
    "text": "organizations we started this more much more modular and agnostic project called",
    "start": "2441690",
    "end": "2448120"
  },
  {
    "text": "Rossi enem which allows you to build your own custom virtual machine monitor",
    "start": "2448120",
    "end": "2453670"
  },
  {
    "text": "tailored to your use case by by taking these virtualization components some of",
    "start": "2453670",
    "end": "2459340"
  },
  {
    "text": "them come from cross V M which is the a Google project very let's say initially",
    "start": "2459340",
    "end": "2466240"
  },
  {
    "text": "similar to what you were doing or from firecracker or newly developed things",
    "start": "2466240",
    "end": "2473320"
  },
  {
    "text": "that were that were created in the mean time and then you can take all these modules and eventually build a virtual",
    "start": "2473320",
    "end": "2481150"
  },
  {
    "text": "machine that's tailored to your use case so and we were happy to contribute to that we're continuing to be a",
    "start": "2481150",
    "end": "2486640"
  },
  {
    "text": "contributors to Russ vmm a few people have also integrated a firecracker so",
    "start": "2486640",
    "end": "2494200"
  },
  {
    "start": "2489000",
    "end": "2489000"
  },
  {
    "text": "far from the open source community so Kara containers is actually a system that again integrated kubernetes and",
    "start": "2494200",
    "end": "2500800"
  },
  {
    "text": "allows you to run your containers either via run C or currently via chemo or",
    "start": "2500800",
    "end": "2508150"
  },
  {
    "text": "there's let's say a beta support for firecracker the other two unique noise",
    "start": "2508150",
    "end": "2514270"
  },
  {
    "text": "via are are different than what we've talked about so far there are unique kernels so Oliver Oliver we talked so",
    "start": "2514270",
    "end": "2521740"
  },
  {
    "text": "far basically has you running a guest operating system like Linux inside of the guest and that's when you look at",
    "start": "2521740",
    "end": "2528310"
  },
  {
    "text": "the boot and that's what it most of the time is taken by it's the guest operating system booting the OS v guys",
    "start": "2528310",
    "end": "2536110"
  },
  {
    "text": "have a demo where they start an application in five milliseconds with firecrackers",
    "start": "2536110",
    "end": "2542660"
  },
  {
    "text": "so they go from nothing to an code running customer code well you know user code running inside of inside of OS v",
    "start": "2542660",
    "end": "2550090"
  },
  {
    "text": "inside of firecracker in five milliseconds and like the end-to-end lifetime of one of these if you use it",
    "start": "2550090",
    "end": "2557060"
  },
  {
    "text": "with OS v of a VM is somewhere around 40 milliseconds right now with lots of room to improve yeah um I think we should",
    "start": "2557060",
    "end": "2566750"
  },
  {
    "text": "probably stop here we're out of out of time so I'll skip the details on the",
    "start": "2566750",
    "end": "2572300"
  },
  {
    "text": "caller integration and go straight to this part maybe quickly before I finish",
    "start": "2572300",
    "end": "2579460"
  },
  {
    "text": "as I've mentioned several times over the talk firecracker is a building block tailored for for compute platforms so we",
    "start": "2579460",
    "end": "2588740"
  },
  {
    "text": "actually think that most people using Fraga directly will either be teams building compute services teams",
    "start": "2588740",
    "end": "2594050"
  },
  {
    "text": "integrating Firecracker with the container stacks like like I would mentioned or developers that want to contribute or security engineers I want",
    "start": "2594050",
    "end": "2600740"
  },
  {
    "text": "to audit our code it's not while you can play with it on your own machine for",
    "start": "2600740",
    "end": "2606200"
  },
  {
    "text": "sure it's not it's not meant as a general-purpose virtual machine yep and",
    "start": "2606200",
    "end": "2613090"
  },
  {
    "text": "with that I think I will jump all the way to the end",
    "start": "2613090",
    "end": "2619270"
  },
  {
    "text": "you",
    "start": "2622880",
    "end": "2624940"
  }
]