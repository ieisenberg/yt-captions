[
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "that's me everyone and welcome to this talk keeping it with Java I'm Sala Mac and before we get started I",
    "start": "11650",
    "end": "19009"
  },
  {
    "text": "would like to tell you that if you have any questions please use the app so York here can curate them towards the end of",
    "start": "19009",
    "end": "25579"
  },
  {
    "text": "the presentation and so that we can have a sort of streamlined Q&A afterwards for",
    "start": "25579",
    "end": "32090"
  },
  {
    "text": "now we're going to talk about how to keep with Java and if you think about it it's quite a weird title right because",
    "start": "32090",
    "end": "37850"
  },
  {
    "text": "it used to be the other way around where Java I have to keep up with us because we were only getting a major",
    "start": "37850",
    "end": "43760"
  },
  {
    "text": "Java release like every three or four years and it seemed like Java was sort of stagnating as a big enterprising",
    "start": "43760",
    "end": "51260"
  },
  {
    "text": "language slow moving etc but all that has changed and the question is what does that mean for us so but we're",
    "start": "51260",
    "end": "57260"
  },
  {
    "text": "talking about that today now I want to do that by looking at all the new features that have been introduced since Java 8 because who here",
    "start": "57260",
    "end": "64640"
  },
  {
    "text": "is developing on Java 8 right almost the whole room who here is developing on",
    "start": "64640",
    "end": "70220"
  },
  {
    "text": "Java 9 or later couple of hands so that's exactly what I want to talk about",
    "start": "70220",
    "end": "75620"
  },
  {
    "text": "because we need to talk about adoption as well so first we'll look at features and then we'll discuss about adoption",
    "start": "75620",
    "end": "81050"
  },
  {
    "text": "how can you get from Java 8 to later versions obviously we can't cover",
    "start": "81050",
    "end": "86120"
  },
  {
    "text": "everything but we'll see the highlights of the features so a little bit about me as I said my name is Salma Marc I work",
    "start": "86120",
    "end": "92330"
  },
  {
    "text": "with luminous which is a software technology company in the Netherlands we do both product developments and Kosova",
    "start": "92330",
    "end": "97970"
  },
  {
    "text": "see I'm mostly involved with the latter and in our products we were also very",
    "start": "97970",
    "end": "103760"
  },
  {
    "text": "very heavily invested in modular architectures and we used to do that a lot with OSGi you may have heard of it",
    "start": "103760",
    "end": "109340"
  },
  {
    "text": "but when Jeff and I came along with a module system which is sort of the biggest feature that happened to Java",
    "start": "109340",
    "end": "114980"
  },
  {
    "text": "since a long time than me together with a co-worker drove quite deeply into this which also led to this book Javan our",
    "start": "114980",
    "end": "121340"
  },
  {
    "text": "modularity and this will also be a big topic when you move from Java 8 to a",
    "start": "121340",
    "end": "126440"
  },
  {
    "text": "later version of Java because you will encounter some way or the other the module system but we'll talk about that",
    "start": "126440",
    "end": "132200"
  },
  {
    "text": "so obviously I speak at conferences I also do some plurals artwork so if you have a subscription there how they",
    "start": "132200",
    "end": "138350"
  },
  {
    "text": "recommend checking out some of the courses I did on Java 9 10 and 11 there and without that's out of the way let's",
    "start": "138350",
    "end": "146150"
  },
  {
    "text": "just move on to whatever happens and we'll do this in a chronological chronological order so we'll start with",
    "start": "146150",
    "end": "152090"
  },
  {
    "text": "Java nine and as I said the biggest feature in Java 9 which was by the way",
    "start": "152090",
    "end": "157880"
  },
  {
    "text": "released more than a year ago now so in September 2017 the biggest feature there was the",
    "start": "157880",
    "end": "164090"
  },
  {
    "text": "introduction of a module system so what I want to do now is give a quick overview of the features of the module",
    "start": "164090",
    "end": "170450"
  },
  {
    "text": "system and also show you a demo of what it can do and then we'll talk a little bit about the impact on existing code",
    "start": "170450",
    "end": "175910"
  },
  {
    "text": "bases because well you can develop applications from scratch using modules but there's also some considerations if",
    "start": "175910",
    "end": "183590"
  },
  {
    "text": "you bring old code to new versions of Java so we'll look at that as well so in essence a module groups packages",
    "start": "183590",
    "end": "191270"
  },
  {
    "text": "and what you can do is you can create a so-called modulus critter in a file",
    "start": "191270",
    "end": "196730"
  },
  {
    "text": "called module in photo Java and in this module descriptor you can be as simple",
    "start": "196730",
    "end": "202040"
  },
  {
    "text": "as this only use the module keywords give a name identity to the module and and that's it then every package that's",
    "start": "202040",
    "end": "210050"
  },
  {
    "text": "part of this source tree part of its module and we'll look at how that looks in in code later every one of these will",
    "start": "210050",
    "end": "218480"
  },
  {
    "text": "be inside of this module main that we have here so obviously and this",
    "start": "218480",
    "end": "224660"
  },
  {
    "text": "translates into something at runtime as well because modules don't only live in source code but they are also",
    "start": "224660",
    "end": "230000"
  },
  {
    "text": "represented at runtime and then we see that we might have a module every time called main because well that's the name",
    "start": "230000",
    "end": "236000"
  },
  {
    "text": "that we gave to the module and it contains the packages main web main resistance and main integration so far",
    "start": "236000",
    "end": "243710"
  },
  {
    "text": "so good but if you're thinking about modular developments you don't think about single individual modules systems",
    "start": "243710",
    "end": "250610"
  },
  {
    "text": "arise where modules work together so what you can do with modules is you can",
    "start": "250610",
    "end": "255740"
  },
  {
    "text": "also explicitly declare relations between modules in a java module system so let's say our module main requires",
    "start": "255740",
    "end": "261920"
  },
  {
    "text": "some code that's in a module called helper so what we can do is we can say",
    "start": "261920",
    "end": "267110"
  },
  {
    "text": "okay this module main requires which will help and what you'll help of course also has a modulus critter with the name",
    "start": "267110",
    "end": "274410"
  },
  {
    "text": "and through this explicit dependency both the compiler and the Java Runtime now know that there's a relation between",
    "start": "274410",
    "end": "280680"
  },
  {
    "text": "these modules and this used to be the case between jar files as well but you",
    "start": "280680",
    "end": "286380"
  },
  {
    "text": "couldn't be explicit about relations between jar files we needed all kinds of tools around in the ecosystem like maven",
    "start": "286380",
    "end": "292590"
  },
  {
    "text": "and Gradle to handle this for us because well the JVM and the compiler really don't know anything about relations",
    "start": "292590",
    "end": "298170"
  },
  {
    "text": "between jar files so with this these relations are now explicit and they can also be exploited for example if you",
    "start": "298170",
    "end": "305130"
  },
  {
    "text": "would start this application with these two modules and the helper module would not be there then the JVM will tell you",
    "start": "305130",
    "end": "312150"
  },
  {
    "text": "okay please go fix this before I even run a single line of code which is quite different from the classpath situation",
    "start": "312150",
    "end": "318060"
  },
  {
    "text": "where if you have a jar file that needed another jar file on the classpath and there was only one jar file there then",
    "start": "318060",
    "end": "324960"
  },
  {
    "text": "it will happily start your application until us needs a class from the different jar file and then it blows up",
    "start": "324960",
    "end": "330030"
  },
  {
    "text": "at runtime with a cost of an exception for example and similar stuff happens",
    "start": "330030",
    "end": "335820"
  },
  {
    "text": "when you have for example duplicate entries of jar files on the glass path in short the class pass really had many",
    "start": "335820",
    "end": "341820"
  },
  {
    "text": "issues and modules solve a great deal of these issues so we can have modules they",
    "start": "341820",
    "end": "348930"
  },
  {
    "text": "can have dependencies what else well it turns out that if you want to create a",
    "start": "348930",
    "end": "354780"
  },
  {
    "text": "module and that exposes code to other modules you need to be very precise about what is exposed to the outside",
    "start": "354780",
    "end": "360960"
  },
  {
    "text": "world as I said a module is a combination of packages but if you have",
    "start": "360960",
    "end": "366750"
  },
  {
    "text": "a dependency on a module then you cannot just use any code in any package that's inside of this module you as a module",
    "start": "366750",
    "end": "373950"
  },
  {
    "text": "developer have to be very explicit about what is the API of your module so what is public and what is not public in this",
    "start": "373950",
    "end": "379500"
  },
  {
    "text": "case in our help of module if we want to expose code to the outside world we do this using the exports keywords so here",
    "start": "379500",
    "end": "385590"
  },
  {
    "text": "we tell okay anyone who uses the export uses the helper module can only use",
    "start": "385590",
    "end": "392880"
  },
  {
    "text": "types from the helper those API package if there are any module order packages in this module and then they won't be",
    "start": "392880",
    "end": "398940"
  },
  {
    "text": "visible which is the first construct that the module system introduces which",
    "start": "398940",
    "end": "404010"
  },
  {
    "text": "is strong encapsulation now what happens if you have an additional package in the module helper",
    "start": "404010",
    "end": "410939"
  },
  {
    "text": "well by default all packages are strongly in capsulated so you can hide your implementation details and only",
    "start": "410939",
    "end": "416699"
  },
  {
    "text": "expose the API is that you want to expose which is of course very helpful when you want to design systems that",
    "start": "416699",
    "end": "422819"
  },
  {
    "text": "last for a long time that you can evolve over a long time where you can evolve the implementation details without any",
    "start": "422819",
    "end": "429509"
  },
  {
    "text": "of the consumers having dependencies on these implementation details I guess we all know this from theory and from from",
    "start": "429509",
    "end": "435300"
  },
  {
    "text": "practice probably as well but now in the module system we have a very clear-cut way to do this and if you think about is",
    "start": "435300",
    "end": "441300"
  },
  {
    "text": "this is really similar to what you can already do at the class and the object level where you have private for Texas",
    "start": "441300",
    "end": "447389"
  },
  {
    "text": "and all these access modifiers you can think of modules as doing something similar only at a much larger level of",
    "start": "447389",
    "end": "454289"
  },
  {
    "text": "abstraction so these are just mechanics",
    "start": "454289",
    "end": "459449"
  },
  {
    "text": "and the theory so what I wanted to do is show a quick demo of what this looks",
    "start": "459449",
    "end": "464490"
  },
  {
    "text": "like in practice using Java 9 or later because even though the module system is",
    "start": "464490",
    "end": "470219"
  },
  {
    "text": "delivered in Java 9 it's still the same it's still there in Java 10 and 11 and all the future versions that will be",
    "start": "470219",
    "end": "475409"
  },
  {
    "text": "coming so this demo consists of two modules and the first module is a",
    "start": "475409",
    "end": "481229"
  },
  {
    "text": "command line interface module which just interacts with us from the command line and the goal of this application is to",
    "start": "481229",
    "end": "487250"
  },
  {
    "text": "read a new piece of text and to analyze the text with a given analysis algorithm",
    "start": "487250",
    "end": "492899"
  },
  {
    "text": "and then subsequently we want to present this result to the user again on the",
    "start": "492899",
    "end": "498089"
  },
  {
    "text": "command line and we want to separate the analysis from the command line module so",
    "start": "498089",
    "end": "503279"
  },
  {
    "text": "how we're going to do that well I'm going to create two modules of course and as you can see I now have a source",
    "start": "503279",
    "end": "510449"
  },
  {
    "text": "directory and inside my source directory I don't directly have my package structure no I have two module",
    "start": "510449",
    "end": "515518"
  },
  {
    "text": "directories which correspond to the modules that you saw on the slide so inside of a module directory we find our",
    "start": "515519",
    "end": "521490"
  },
  {
    "text": "typical package higher hierarchy so here's a single package containing a single class and fresh Kincaid's is a",
    "start": "521490",
    "end": "527490"
  },
  {
    "text": "particular text analysis algorithm but there's also a module descriptor in this case is still fairly empty right we only",
    "start": "527490",
    "end": "534420"
  },
  {
    "text": "say module easy text analysis and the similar thing happens for our CLI module",
    "start": "534420",
    "end": "540390"
  },
  {
    "text": "where we say okay eastex Eli it has a main class and it has a name as he",
    "start": "540390",
    "end": "546960"
  },
  {
    "text": "stacks Eli in the module descriptor now just to show the code there's nothing special here just plain Java code the",
    "start": "546960",
    "end": "552660"
  },
  {
    "text": "main class that prints some help text if we use it wrong gets path we're reading",
    "start": "552660",
    "end": "558120"
  },
  {
    "text": "the file from a path then we chop the strings into synthesis and we pass this",
    "start": "558120",
    "end": "563460"
  },
  {
    "text": "to our flesh Kincaid analysis class which comes from a different module that's something to keep in mind so how",
    "start": "563460",
    "end": "570390"
  },
  {
    "text": "would we go about compiling this well there's a new flag in the Java compiler as of Java 9 and later the module source",
    "start": "570390",
    "end": "577320"
  },
  {
    "text": "path which understands this layout having multiple modules in a single source phone we also pass in the out",
    "start": "577320",
    "end": "583170"
  },
  {
    "text": "flag M people often forget this because we use build tools like maven in Gradle",
    "start": "583170",
    "end": "588180"
  },
  {
    "text": "who hide this for us but you must pass all source files that you want to compile to a Java compiler",
    "start": "588180",
    "end": "593850"
  },
  {
    "text": "so we do this using our little UNIX trick here with fine which passes all",
    "start": "593850",
    "end": "598950"
  },
  {
    "text": "these for Java files to the compiler so what happens now is we have a main class which is public which uses the flash",
    "start": "598950",
    "end": "606300"
  },
  {
    "text": "Kincaid class which is also public so it might seem that if we compile this",
    "start": "606300",
    "end": "612090"
  },
  {
    "text": "everything is fine but because we use modules we have more guardrails in place",
    "start": "612090",
    "end": "618210"
  },
  {
    "text": "now and that means that this module does not express a dependency yet on the",
    "start": "618210",
    "end": "624030"
  },
  {
    "text": "analysis module if we want a use code from there it needs to be a deliberate decision and we need to record this",
    "start": "624030",
    "end": "629060"
  },
  {
    "text": "dependency information in the modular scripture so we can say requires easy text there we go",
    "start": "629060",
    "end": "637070"
  },
  {
    "text": "analysis and if we do this the error now",
    "start": "637070",
    "end": "642930"
  },
  {
    "text": "reads ok respects each text analysis declares in a module easy text analysis with module easy text to see that it",
    "start": "642930",
    "end": "648900"
  },
  {
    "text": "does not read it which translates into there's not depend on it so we fix that",
    "start": "648900",
    "end": "653940"
  },
  {
    "text": "and if we save the file and now recompile",
    "start": "653940",
    "end": "659360"
  },
  {
    "text": "you might think ok it should work now because we have a dependency but then we",
    "start": "659360",
    "end": "666090"
  },
  {
    "text": "haven't taken into account the strong encapsulation yet because by default like I said if you don't mention",
    "start": "666090",
    "end": "672480"
  },
  {
    "text": "anything in your much greater then it will be strongly encapsulated and in this case we want to",
    "start": "672480",
    "end": "677560"
  },
  {
    "text": "export this package and here we use a package name because exports are at the",
    "start": "677560",
    "end": "683050"
  },
  {
    "text": "package level excuse me and I also need to ensure include molarity easy text",
    "start": "683050",
    "end": "689970"
  },
  {
    "text": "dots analysis so what I'm saying here is I want to expose all code that's in this",
    "start": "689970",
    "end": "695920"
  },
  {
    "text": "package from this module to any other modules that might have a dependency on each text analysis and once we do that",
    "start": "695920",
    "end": "702720"
  },
  {
    "text": "we have all the information in place to have to successfully compiled modules which we can see here in the output",
    "start": "702720",
    "end": "709000"
  },
  {
    "text": "directory and as you can see the module info class is also preserved for use at at run time so what we can do now is we",
    "start": "709000",
    "end": "717340"
  },
  {
    "text": "can run this application and instead of using the class path we're using the module path and we point it to our out",
    "start": "717340",
    "end": "723040"
  },
  {
    "text": "directory which contains these compiled modules and we're going to start a module and in this case we're going to",
    "start": "723040",
    "end": "728890"
  },
  {
    "text": "start the easy text CLI module and because I haven't packages the earth and yet into a jar file with an entry point",
    "start": "728890",
    "end": "735160"
  },
  {
    "text": "I need to also explicitly define the main class that I want to run and if I",
    "start": "735160",
    "end": "742540"
  },
  {
    "text": "do so I get my welcome text and I can provide a test input there we go and we",
    "start": "742540",
    "end": "747940"
  },
  {
    "text": "get a flat Kincaid score of 83 so this works so when you have two modules that",
    "start": "747940",
    "end": "755560"
  },
  {
    "text": "we compile with explicit dependencies a strong capsulation but here you think",
    "start": "755560",
    "end": "760810"
  },
  {
    "text": "okay plus path module paths what's in a name well there is definitely a functional difference",
    "start": "760810",
    "end": "766330"
  },
  {
    "text": "between the two because if I now remove for example this easy text analysis module so the compiled module and I'm",
    "start": "766330",
    "end": "774160"
  },
  {
    "text": "not going to recompile again I'm just going to issue the run command again of my application then what happens is that",
    "start": "774160",
    "end": "780280"
  },
  {
    "text": "Java won't start my application instead it sees the module descriptor of the CLI",
    "start": "780280",
    "end": "786750"
  },
  {
    "text": "module it says okay I need this easy text analysis module so please first fix",
    "start": "786750",
    "end": "791890"
  },
  {
    "text": "your module path before starting this application which is a big improvement of the class path which would just start",
    "start": "791890",
    "end": "797140"
  },
  {
    "text": "our application and then just blow up at some points where it needs another class which would be fairly quickly in this",
    "start": "797140",
    "end": "802450"
  },
  {
    "text": "simple example but if you have a large and elaborate application that might blow up at point in time which is bad of course so",
    "start": "802450",
    "end": "810360"
  },
  {
    "text": "that's about modules and using them in this way now lots of more can be said about the",
    "start": "810360",
    "end": "818279"
  },
  {
    "text": "module system we won't have time to go into that in this talk I do have several talks online as well at YouTube that go",
    "start": "818279",
    "end": "824970"
  },
  {
    "text": "into depth about using for example services to decouple modules even more so highly recommended if you're",
    "start": "824970",
    "end": "831420"
  },
  {
    "text": "interested in this but I do hope this shows that we now get a module system in Java that's native to the platform that",
    "start": "831420",
    "end": "837689"
  },
  {
    "text": "allows us to express dependencies between parts of our applications and also to be very smart about what is",
    "start": "837689",
    "end": "843569"
  },
  {
    "text": "public and what's encapsulated as the module level so you might wonder okay",
    "start": "843569",
    "end": "850319"
  },
  {
    "text": "sounds very cool but why would you want to do this and actually if you look at the history of the module system in Java",
    "start": "850319",
    "end": "856949"
  },
  {
    "text": "then the reason why I started developing this is actually quite selfish from the",
    "start": "856949",
    "end": "862769"
  },
  {
    "text": "JDK and the Java team side of things because what happened is that the JDK itself is more than 20 years old now and",
    "start": "862769",
    "end": "869550"
  },
  {
    "text": "it actually was a big monolith a big ball of math you could say there was this RTR found the runtime Java coding",
    "start": "869550",
    "end": "876420"
  },
  {
    "text": "tens of thousands of classes and they all had sort of dependencies that weren't very visible and that also",
    "start": "876420",
    "end": "884370"
  },
  {
    "text": "weren't very good in all cases and the JDK also had the problem that there were",
    "start": "884370",
    "end": "889829"
  },
  {
    "text": "lots of internal implementation classes people often hear about the Sun misc and safe class to mention one but there were",
    "start": "889829",
    "end": "896459"
  },
  {
    "text": "many others as well and people started using these in the world and we all know that Java is very big on backwards",
    "start": "896459",
    "end": "903059"
  },
  {
    "text": "compatibility so what happened there is that they effectively couldn't change these classes because so many people",
    "start": "903059",
    "end": "909569"
  },
  {
    "text": "were using them sort of stalling the evolution of the whole platform so to",
    "start": "909569",
    "end": "915480"
  },
  {
    "text": "address these issues they started with model rising the JDK and what you see here is the end result",
    "start": "915480",
    "end": "920819"
  },
  {
    "text": "of the Malheur ization of the JDK again lots to tell about this but not for this",
    "start": "920819",
    "end": "925949"
  },
  {
    "text": "talk but in the end what motorisation gained them as a big Java code base is",
    "start": "925949",
    "end": "931559"
  },
  {
    "text": "more maintainability and flexibility and also a reliable composition between different parts of your platform because",
    "start": "931559",
    "end": "937319"
  },
  {
    "text": "of these explicit dependencies much more reliable than the + path as we",
    "start": "937319",
    "end": "942329"
  },
  {
    "text": "saw so these were main drivers for the JDK itself and of course this applies to",
    "start": "942329",
    "end": "947490"
  },
  {
    "text": "any large code base right if you have a code base that you maintain for four years maybe even decades then it really",
    "start": "947490",
    "end": "954720"
  },
  {
    "text": "pays off to have a clear structure both in your code and not just in your head or in your documentation but also in",
    "start": "954720",
    "end": "960209"
  },
  {
    "text": "your code with a module system that helps you enforce this so what what is",
    "start": "960209",
    "end": "965370"
  },
  {
    "text": "effectively means is that you want to decrease the model code gap right because we can all draw this very nice",
    "start": "965370",
    "end": "971879"
  },
  {
    "text": "architecture diagrams on whiteboards I hope they're a bit nicer than this single point of failure design but",
    "start": "971879",
    "end": "977910"
  },
  {
    "text": "anyway and you have a whiteboard design and you can take this and actually translate this into modules that have",
    "start": "977910",
    "end": "984120"
  },
  {
    "text": "same names in your application that have these explicit dependencies that are the same as the arrows that you draw on the",
    "start": "984120",
    "end": "990060"
  },
  {
    "text": "whiteboard and that can also warn you if you violate these dependencies and start",
    "start": "990060",
    "end": "995850"
  },
  {
    "text": "using code from modules that you shouldn't use or start using and capsule code that you shouldn't use because you",
    "start": "995850",
    "end": "1001610"
  },
  {
    "text": "can't do that in the module system unless you explicitly tell the module system that that is ok so this is really",
    "start": "1001610",
    "end": "1009019"
  },
  {
    "text": "one of the goals and just to illustrate this a little more I also want to show you a modular application in intelligent",
    "start": "1009019",
    "end": "1017240"
  },
  {
    "text": "so this is the same easy text application only expanded much further into more modules more functionality",
    "start": "1017240",
    "end": "1024409"
  },
  {
    "text": "different analysis etc we're not going to look at the whole example I just wanted to show you that the tooling is",
    "start": "1024409",
    "end": "1030829"
  },
  {
    "text": "already there as you can see IntelliJ but also Eclipse they support module descriptors they know about the module",
    "start": "1030829",
    "end": "1037069"
  },
  {
    "text": "system they know about these explicit dependencies between different modules and what's actually really cool and at",
    "start": "1037069",
    "end": "1043938"
  },
  {
    "text": "least I think it's a really cool feature of IntelliJ is that you can also look at a diagram in this case you get the",
    "start": "1043939",
    "end": "1052130"
  },
  {
    "text": "option to look at the Java module diagram which visualizes all the information in the module descriptors",
    "start": "1052130",
    "end": "1057650"
  },
  {
    "text": "so what we have here is a very nice way of seeing our code as relates where we",
    "start": "1057650",
    "end": "1064429"
  },
  {
    "text": "have dependencies between modules and the blue one is an external library by the way the yellow ones are all",
    "start": "1064429",
    "end": "1070520"
  },
  {
    "text": "application modules and the light yellow ones are modules that live inside of the JDK so",
    "start": "1070520",
    "end": "1076370"
  },
  {
    "text": "you can very well see that our easy tech CLI module doesn't have that many much dependencies but our GUI module which is",
    "start": "1076370",
    "end": "1084230"
  },
  {
    "text": "written in Java effects as dependencies on all these JDK modules that you can now neatly see in this module graph so I",
    "start": "1084230",
    "end": "1091250"
  },
  {
    "text": "think this really illustrates the point of it's not only good to have this information on a whiteboard or in",
    "start": "1091250",
    "end": "1097340"
  },
  {
    "text": "documentation but also to encode this in module descriptors and half the module system work for you another great tool",
    "start": "1097340",
    "end": "1108500"
  },
  {
    "text": "that was enabled by module descriptors and the module system is J link and what",
    "start": "1108500",
    "end": "1114559"
  },
  {
    "text": "that solves is the issue that we all probably know that if you want to distribute a java application or run a",
    "start": "1114559",
    "end": "1121100"
  },
  {
    "text": "java application you also need a jdk and the point here is that this jdk is very",
    "start": "1121100",
    "end": "1127160"
  },
  {
    "text": "big right and it contains all kinds of technologies that your application may or may not need for example if you have",
    "start": "1127160",
    "end": "1133610"
  },
  {
    "text": "a web application well you probably don't need all the desktop swing and JavaFX api etc but they're still all",
    "start": "1133610",
    "end": "1140750"
  },
  {
    "text": "there and they're pretty big so jdk is typically around three or four hundred three megabytes and your",
    "start": "1140750",
    "end": "1146960"
  },
  {
    "text": "application itself is much much smaller so what you can do with J link is if you",
    "start": "1146960",
    "end": "1153230"
  },
  {
    "text": "have a application that is modular then it expresses all the dependencies explicitly not just on your own",
    "start": "1153230",
    "end": "1159260"
  },
  {
    "text": "libraries and application modules but also on the modules that he used from the JDK so what Jaylin can do is uses these",
    "start": "1159260",
    "end": "1165410"
  },
  {
    "text": "explicit relations to calculate a small subset of the dedicate a minimal subset of jdk that is necessary to run your",
    "start": "1165410",
    "end": "1172400"
  },
  {
    "text": "application and then it actually outputs this into a so called runtime image containing the JVM and only the modules",
    "start": "1172400",
    "end": "1179179"
  },
  {
    "text": "of the JDK that your application needs and all it also bundles your application modules and everything that's necessary",
    "start": "1179179",
    "end": "1184820"
  },
  {
    "text": "to run your application so that you get a very very self-contained and small runtime image that you can use and you",
    "start": "1184820",
    "end": "1191660"
  },
  {
    "text": "can use this for example as basis for your dog or image rather than shipping around larger images containing full",
    "start": "1191660",
    "end": "1197720"
  },
  {
    "text": "jetty case or if you're in the IOT space it also helps if you have smaller deployments and smaller things to share",
    "start": "1197720",
    "end": "1203270"
  },
  {
    "text": "all around so this is really something that's enabled by the module system",
    "start": "1203270",
    "end": "1208659"
  },
  {
    "text": "so what about impacts on Java 8 curved edges if you move to Java 9 because we",
    "start": "1208780",
    "end": "1215179"
  },
  {
    "text": "saw a lot about the module system but it's also good to know that using modules and module descriptors is",
    "start": "1215179",
    "end": "1220340"
  },
  {
    "text": "optional it's fully optional so you can still also use the class path if you're moving beyond Java 8 of course you won't",
    "start": "1220340",
    "end": "1227210"
  },
  {
    "text": "get the benefits that talks about but but it's just a choice that you have to make and a lot of a lot of times it",
    "start": "1227210",
    "end": "1233480"
  },
  {
    "text": "makes sense for existing code bases to stay on the class path not all code",
    "start": "1233480",
    "end": "1239059"
  },
  {
    "text": "bases are really model arised already and then it will be very hard to entangle them if you want to directly",
    "start": "1239059",
    "end": "1245390"
  },
  {
    "text": "move to a newer version of Java and also move the modules so let's assume that you have a class path based application",
    "start": "1245390",
    "end": "1250850"
  },
  {
    "text": "and you want to take it beyond Java 8 to Java 11 let's say which is the current version so what still is the case is",
    "start": "1250850",
    "end": "1258020"
  },
  {
    "text": "that underneath they are Java 11 even though your application is using class path the jdk itself is still modernized",
    "start": "1258020",
    "end": "1264950"
  },
  {
    "text": "and this is something that you will encounter because the jdk has actually",
    "start": "1264950",
    "end": "1271160"
  },
  {
    "text": "encapsulated a lot of types that were previously sort of publicly visible and",
    "start": "1271160",
    "end": "1276470"
  },
  {
    "text": "used maybe not by your application code but most likely by some of the libraries",
    "start": "1276470",
    "end": "1281510"
  },
  {
    "text": "that you are using so what happens if you run this code that was compiled on Java 8 on Java 11 for example well",
    "start": "1281510",
    "end": "1288620"
  },
  {
    "text": "fortunately it still runs because like we said Java is very big on backward compatibility but it might generate",
    "start": "1288620",
    "end": "1294440"
  },
  {
    "text": "warnings when running on Java 11 telling you okay so this code is actually using",
    "start": "1294440",
    "end": "1299800"
  },
  {
    "text": "an API that has been encapsulated in this version and at a later point in time we may also disable this for the",
    "start": "1299800",
    "end": "1306530"
  },
  {
    "text": "class path and not just for other modules for muddler applications so these are runtime windings that you can",
    "start": "1306530",
    "end": "1311870"
  },
  {
    "text": "run into also if you try to compile any new code that still uses these encapsulated api's in new versions of",
    "start": "1311870",
    "end": "1320150"
  },
  {
    "text": "Java then it won't compile it won't allow you to introduce new legacy code",
    "start": "1320150",
    "end": "1325490"
  },
  {
    "text": "that uses these encapsulated api's so there's a big difference between running",
    "start": "1325490",
    "end": "1331130"
  },
  {
    "text": "on Java 11 and actually compiling and building on Java 11 at least if you're",
    "start": "1331130",
    "end": "1336650"
  },
  {
    "text": "using these encapsulated API is another big thing that happens but",
    "start": "1336650",
    "end": "1341809"
  },
  {
    "text": "Java AIDS and now Java eleven is that some of the enterprise IP is that typically were in the JDK are now",
    "start": "1341809",
    "end": "1348980"
  },
  {
    "text": "removed and they're listed here it's corba well I don't think anybody misses death but also Jack B for example",
    "start": "1348980",
    "end": "1355899"
  },
  {
    "text": "and the XML Web Services stack these have all been removed in a sense death",
    "start": "1355899",
    "end": "1362299"
  },
  {
    "text": "they're really ie technologies so they belong to Java EE which is now Jakarta",
    "start": "1362299",
    "end": "1367429"
  },
  {
    "text": "EE and and this move means that if you have applications that's use these libraries and that",
    "start": "1367429",
    "end": "1374330"
  },
  {
    "text": "depend on them being there in the JDK you will now have to bundle your own dependency that implements these api's",
    "start": "1374330",
    "end": "1380559"
  },
  {
    "text": "so they they they were gone on Java 11 and you will need to take care of that of course if you're using an application",
    "start": "1380559",
    "end": "1387139"
  },
  {
    "text": "server then the application server will provide these implementations so it's not a big deal but for example if you",
    "start": "1387139",
    "end": "1393049"
  },
  {
    "text": "have a standalone spring application using spring 3 or spring for it heavily",
    "start": "1393049",
    "end": "1398840"
  },
  {
    "text": "depends on Jack B and it's just not there in Java 11 anymore so you would",
    "start": "1398840",
    "end": "1404059"
  },
  {
    "text": "have to add this to your class path yourself fortunately they fixed this in spring 5 so if you're using spring 5 here you're",
    "start": "1404059",
    "end": "1411019"
  },
  {
    "text": "good you're good to go and this applies to most libraries by the way if you're moving to Java 11 it really based to",
    "start": "1411019",
    "end": "1417830"
  },
  {
    "text": "upgrade to the latest versions of all the popular libraries because they are pretty much ready for Java 11 by now so",
    "start": "1417830",
    "end": "1426710"
  },
  {
    "text": "that was the module system but there was more in Java and it was actually a pretty big release for example there was",
    "start": "1426710",
    "end": "1433429"
  },
  {
    "text": "a ripple who-knows-what repple stands for yeah",
    "start": "1433429",
    "end": "1440259"
  },
  {
    "text": "exactly RIA valent loop but I can imagine if you don't know this acronym",
    "start": "1440710",
    "end": "1445790"
  },
  {
    "text": "it still doesn't mean that much to you so jco is actually a tool that allows you to enter code in a sort of a shell",
    "start": "1445790",
    "end": "1452270"
  },
  {
    "text": "environment so the real part is inputting codes and you press enter and it immediately runs the code it also",
    "start": "1452270",
    "end": "1459080"
  },
  {
    "text": "gives you back to results and you can do this again and again to refine your code so it's really a nice iterative tool to",
    "start": "1459080",
    "end": "1465920"
  },
  {
    "text": "work with with Java cos I want to give a quick demo of that as well so here we",
    "start": "1465920",
    "end": "1471680"
  },
  {
    "text": "have a shell and I'm going to start J shell and of course we all had the",
    "start": "1471680",
    "end": "1477590"
  },
  {
    "text": "experience of starting vim and not know how to get out so I'm going to tell you first how to get out of this there's a",
    "start": "1477590",
    "end": "1484010"
  },
  {
    "text": "slash exit command or you can alternatively also use control V control she won't work so you can do that to get",
    "start": "1484010",
    "end": "1491870"
  },
  {
    "text": "out of jail she'll but J shell is a place where you can execute Java expressions and you have statements so",
    "start": "1491870",
    "end": "1498050"
  },
  {
    "text": "what's the simple expression well this is the simplest one of course that I can think of and we get back our results",
    "start": "1498050",
    "end": "1503330"
  },
  {
    "text": "now obviously you won't fire up J shell to do calculator stuff but once in a",
    "start": "1503330",
    "end": "1509150"
  },
  {
    "text": "while you're maybe bit shifting and you're thinking to yourself man what was it again so somebody wants to take a",
    "start": "1509150",
    "end": "1515750"
  },
  {
    "text": "guess what's for left shift 8 is no 3 2",
    "start": "1515750",
    "end": "1521660"
  },
  {
    "text": "1 ah it's thousand 24 so you can also",
    "start": "1521660",
    "end": "1526760"
  },
  {
    "text": "see that we get a sort of generated variable name you and we can use that in",
    "start": "1526760",
    "end": "1531950"
  },
  {
    "text": "later expressions so if we shift it back again there we go then we're back at 4",
    "start": "1531950",
    "end": "1537380"
  },
  {
    "text": "which is nice of course you can use control L by the way to clear the screen",
    "start": "1537380",
    "end": "1542620"
  },
  {
    "text": "but you can't just use expressions you can also use statements and call methods",
    "start": "1542620",
    "end": "1547700"
  },
  {
    "text": "for example system.out.print line like this hi Berlin there we go and it works a",
    "start": "1547700",
    "end": "1557540"
  },
  {
    "text": "suspect as expected we have history so we can go back and the interesting thing",
    "start": "1557540",
    "end": "1563240"
  },
  {
    "text": "also is that jailing avenge a shell also supports tab condition so if I do this",
    "start": "1563240",
    "end": "1569180"
  },
  {
    "text": "print and then to tap I get all of the completions that are available and if I do print Lin and",
    "start": "1569180",
    "end": "1576020"
  },
  {
    "text": "do an opening brace and do tap again and actually shows all over loads that are",
    "start": "1576020",
    "end": "1581190"
  },
  {
    "text": "in the API and it says if you press tab again after this then you get to see the",
    "start": "1581190",
    "end": "1586289"
  },
  {
    "text": "documentation so it's also a very very nice tool to interactively explore ap",
    "start": "1586289",
    "end": "1591390"
  },
  {
    "text": "ice which you probably often do a lot at least I do it a lot so we have here an",
    "start": "1591390",
    "end": "1598440"
  },
  {
    "text": "interactive coding environments with code completion but also documentation",
    "start": "1598440",
    "end": "1604159"
  },
  {
    "text": "so who noticed something when I wrote this what's different than normal Java",
    "start": "1604159",
    "end": "1610940"
  },
  {
    "text": "there's no semicolon exactly so you can do this but you don't have to do this which is which is nice and just a little",
    "start": "1610940",
    "end": "1618450"
  },
  {
    "text": "a little time saver the other thing that that's different maybe a parent if you",
    "start": "1618450",
    "end": "1625620"
  },
  {
    "text": "see this code so what's the difference than a normal Java here exception",
    "start": "1625620",
    "end": "1631440"
  },
  {
    "text": "exactly so you don't have to worry about exceptions it will be handled for you by Jay Chou so again these are just small",
    "start": "1631440",
    "end": "1638400"
  },
  {
    "text": "things by the way if you're doing this as you can see this retro sleep happens",
    "start": "1638400",
    "end": "1644549"
  },
  {
    "text": "in the foreground thread so if you want to break out of this you can do so using control-c so that's good to know as well",
    "start": "1644549",
    "end": "1651330"
  },
  {
    "text": "if you have a long-running computation there now one last thing I want to show",
    "start": "1651330",
    "end": "1657179"
  },
  {
    "text": "you can do lots of stuff but you can also for example declare a method in",
    "start": "1657179",
    "end": "1662270"
  },
  {
    "text": "injection so what I'm going to do is I'm going to create a method that for a",
    "start": "1662270",
    "end": "1670440"
  },
  {
    "text": "given class there we go",
    "start": "1670440",
    "end": "1676789"
  },
  {
    "text": "gives back the module that the class lives in and as you can see you got a second line because I have an opening",
    "start": "1676789",
    "end": "1683010"
  },
  {
    "text": "brace and now closing brace yes I'm going to say return class does get",
    "start": "1683010",
    "end": "1689220"
  },
  {
    "text": "module that's new methods that's introduced to check where a class lives",
    "start": "1689220",
    "end": "1694830"
  },
  {
    "text": "in which module and if I close it it created the method for me and I can even",
    "start": "1694830",
    "end": "1699990"
  },
  {
    "text": "use step completion again to use it so if I ask okay where this string class well there's a module",
    "start": "1699990",
    "end": "1706590"
  },
  {
    "text": "database which is sort of the module that contains all the foundational types",
    "start": "1706590",
    "end": "1711720"
  },
  {
    "text": "of Jennifer like string object collections etc of course I want to",
    "start": "1711720",
    "end": "1716759"
  },
  {
    "text": "check what it really works and see if we have the Jennifer util",
    "start": "1716759",
    "end": "1722179"
  },
  {
    "text": "logging look manage your class for example and indeed it gives us back that",
    "start": "1722179",
    "end": "1728610"
  },
  {
    "text": "this lives in the Java the login module so this seems to Brooke which is very nice and if I want to be at an overview of",
    "start": "1728610",
    "end": "1735090"
  },
  {
    "text": "the methods that I have defined so far or the variables that have defined so far I can do so and I can refer back to",
    "start": "1735090",
    "end": "1741269"
  },
  {
    "text": "the variables like I said you can even create your own names variables like this and then it will be usable just by",
    "start": "1741269",
    "end": "1749159"
  },
  {
    "text": "the other identifiers so there's really a versatile tool I don't use it every day but I fired up about once a week",
    "start": "1749159",
    "end": "1755970"
  },
  {
    "text": "just to try something else to try a new API or to just fine-tune a piece of code maybe a java regular expression which",
    "start": "1755970",
    "end": "1762299"
  },
  {
    "text": "are notoriously hard to get right the first time so things like that are very",
    "start": "1762299",
    "end": "1767309"
  },
  {
    "text": "useful to do in JCL all right let's move on because there was more in Java 9 for",
    "start": "1767309",
    "end": "1774149"
  },
  {
    "text": "example collection factoring methods we probably all know this kind of code if",
    "start": "1774149",
    "end": "1779370"
  },
  {
    "text": "you have a small collection with predefined elements that you want to define you usually do something like this and while this works it's not very",
    "start": "1779370",
    "end": "1786720"
  },
  {
    "text": "pretty right because we need to think about an actual implementation type that we're going to use for the list we need",
    "start": "1786720",
    "end": "1792120"
  },
  {
    "text": "three statements to add and one statement to create the type so this is very hard to do as a fuels initializer",
    "start": "1792120",
    "end": "1798059"
  },
  {
    "text": "in a class all in all could be better so as of Java 9 and later it is better",
    "start": "1798059",
    "end": "1804750"
  },
  {
    "text": "because we're getting these collection factory methods so what we can do now is we can say ok list off and then just",
    "start": "1804750",
    "end": "1810570"
  },
  {
    "text": "provide elements that we want in the list and the same can be used for sets and for maps so we want to do a quick",
    "start": "1810570",
    "end": "1817470"
  },
  {
    "text": "demo of that as well of course using JCL what else and just to drive the point",
    "start": "1817470",
    "end": "1823740"
  },
  {
    "text": "home this is how you create a list now we get the elements back if you put in a",
    "start": "1823740",
    "end": "1828929"
  },
  {
    "text": "no value which is a bad idea in a collection and in this case you will actually get an exception when creating",
    "start": "1828929",
    "end": "1834360"
  },
  {
    "text": "the list instead of being bewildered by the behavior when using the list the same actually applies",
    "start": "1834360",
    "end": "1841470"
  },
  {
    "text": "to set and the addition that Seth has is that it's been ordered of course so you",
    "start": "1841470",
    "end": "1847830"
  },
  {
    "text": "can see that here we get back to 1/3 and also if we have duplicate elements it's",
    "start": "1847830",
    "end": "1853619"
  },
  {
    "text": "not allowed in the set so you get an accession for that as well so map dot",
    "start": "1853619",
    "end": "1859350"
  },
  {
    "text": "off works similarly but in this case it has a key and a value parameter and then",
    "start": "1859350",
    "end": "1866429"
  },
  {
    "text": "again a key and a value parameter in this way you can construct a small map",
    "start": "1866429",
    "end": "1872099"
  },
  {
    "text": "using these collection fracturing methods the interesting thing here is that of course you don't have to think",
    "start": "1872099",
    "end": "1878279"
  },
  {
    "text": "about any implementation types you just get back whatever the factory method of factoring methods thinks is best for you",
    "start": "1878279",
    "end": "1885299"
  },
  {
    "text": "so if we do this for example for the anti list and then we asked for the",
    "start": "1885299",
    "end": "1892169"
  },
  {
    "text": "implementation class that's underneath you can see that there's a list and implementation in immutable collections",
    "start": "1892169",
    "end": "1898590"
  },
  {
    "text": "which wasn't there in Java 8 and earlier so this is a very specialized implementation there's also a list one",
    "start": "1898590",
    "end": "1906929"
  },
  {
    "text": "two implementation for a single or double element lists which is highly optimized just containing fuels rather",
    "start": "1906929",
    "end": "1913169"
  },
  {
    "text": "than array internally but you don't have to think about this you just call the factory methods and you get back the",
    "start": "1913169",
    "end": "1918330"
  },
  {
    "text": "best one that fits your use case which is really nice of course and if you want something else you're still free to use",
    "start": "1918330",
    "end": "1924479"
  },
  {
    "text": "a linked list or ArrayList or whatever you can construct yourself these are",
    "start": "1924479",
    "end": "1929879"
  },
  {
    "text": "just really convenient helpers for small predefined collections in your code alright so that what you have a nine",
    "start": "1929879",
    "end": "1937320"
  },
  {
    "text": "let's move on to John with dem which came six months sanjaya and you have none we'll talk",
    "start": "1937320",
    "end": "1944190"
  },
  {
    "text": "about it later as well this would be scheduled but in Java nine we actually got a new language feature sorry Java 10",
    "start": "1944190",
    "end": "1951539"
  },
  {
    "text": "we got a new language feature called far so what does for I do it's about local variable type inference so we're talking",
    "start": "1951539",
    "end": "1958649"
  },
  {
    "text": "about variables like this one but not just any variable it must be a variable inside a method",
    "start": "1958649",
    "end": "1964139"
  },
  {
    "text": "so hence local variables and what we can do as of Java 10 is replace",
    "start": "1964139",
    "end": "1969960"
  },
  {
    "text": "the type of the variable with far and no this does not mean that Jonathan becomes",
    "start": "1969960",
    "end": "1975480"
  },
  {
    "text": "a dynamic language because the type will still be in first by the compiler so it will still be a name variable with type",
    "start": "1975480",
    "end": "1982500"
  },
  {
    "text": "string only we don't have to type it out all ourselves so it's not a big feature",
    "start": "1982500",
    "end": "1988350"
  },
  {
    "text": "if you're doing Java scripts you may already be used to this or even c-sharp which has this feature as well but now",
    "start": "1988350",
    "end": "1995730"
  },
  {
    "text": "we have it in Java you'd use it everywhere I don't think so there there are good users and their bad",
    "start": "1995730",
    "end": "2001850"
  },
  {
    "text": "user so far we won't go too deeply into it now but if you have pieces of code like this where you have URL URL is new",
    "start": "2001850",
    "end": "2008899"
  },
  {
    "text": "URL well that doesn't make that much sense right there's lots of repetition there then the same for your connection",
    "start": "2008899",
    "end": "2015200"
  },
  {
    "text": "connection URL does open connection it's all kind of messy and obvious so you could change this to this piece of code",
    "start": "2015200",
    "end": "2021950"
  },
  {
    "text": "and look what happens you put the focus not on the types but on the variable",
    "start": "2021950",
    "end": "2027140"
  },
  {
    "text": "names and if you choose this variable variable names wisely then I at least my",
    "start": "2027140",
    "end": "2032690"
  },
  {
    "text": "personal belief is that code can be much much more readable that doesn't mean that you should go out and replace every",
    "start": "2032690",
    "end": "2038210"
  },
  {
    "text": "type in your local variables with far no but just be aware that if you're using",
    "start": "2038210",
    "end": "2043880"
  },
  {
    "text": "Java 10 or later then you have this new tool at your disposal and just to do a",
    "start": "2043880",
    "end": "2049580"
  },
  {
    "text": "quick pop quiz and to show also that far",
    "start": "2049580",
    "end": "2054589"
  },
  {
    "text": "is not without dangers let's do this okay what would be the type of this I'm going to like you guys",
    "start": "2054589",
    "end": "2060830"
  },
  {
    "text": "play a compiler for a little bit int and",
    "start": "2060830",
    "end": "2066138"
  },
  {
    "text": "let's set feedback for Bo's so we",
    "start": "2066139",
    "end": "2071300"
  },
  {
    "text": "actually see the type yeah so we got a variable of type it's now what would be",
    "start": "2071300",
    "end": "2077898"
  },
  {
    "text": "the type if we were going to do this double well we have some people who are",
    "start": "2077899",
    "end": "2083750"
  },
  {
    "text": "actually knowledgeable here very good but not everyone knows that this literal translates into double so you need to be",
    "start": "2083750",
    "end": "2090108"
  },
  {
    "text": "take care of this if you're doing this with drinks it's obvious that it will be spring but do all people know what the",
    "start": "2090109",
    "end": "2096440"
  },
  {
    "text": "other end is rules do in your code good question to ask so let's do",
    "start": "2096440",
    "end": "2102400"
  },
  {
    "text": "this one what do you think the type will be exactly exactly it will be a it will",
    "start": "2102400",
    "end": "2111369"
  },
  {
    "text": "be possible to give this a type but it would not be a useful type so actually this is not allowed but you have eternal",
    "start": "2111369",
    "end": "2117220"
  },
  {
    "text": "later which is good but let's do something slightly more complicated so let's say a list of where we put in int",
    "start": "2117220",
    "end": "2126670"
  },
  {
    "text": "and we put in this double and we put in a string so what will be the type of",
    "start": "2126670",
    "end": "2131680"
  },
  {
    "text": "this the list of objects anyone else something else this looks very",
    "start": "2131680",
    "end": "2139809"
  },
  {
    "text": "impressive right so it's a list of something that's both serializable and comparable which again extends your",
    "start": "2139809",
    "end": "2147250"
  },
  {
    "text": "large going comparable this is a type that you cannot express yourself in",
    "start": "2147250",
    "end": "2152289"
  },
  {
    "text": "source code but the compiler is smart enough to deduce this type so this is",
    "start": "2152289",
    "end": "2158079"
  },
  {
    "text": "sort of unexpected right and it also goes to show that's yes it's a simple feature but it can lead to some",
    "start": "2158079",
    "end": "2163869"
  },
  {
    "text": "counterintuitive results so a last one let's say we want an ArrayList and we",
    "start": "2163869",
    "end": "2171789"
  },
  {
    "text": "say ok new ArrayList but we're going to use the Diamonds feature that we got in",
    "start": "2171789",
    "end": "2176890"
  },
  {
    "text": "Java 7 so what would be the type of this",
    "start": "2176890",
    "end": "2181230"
  },
  {
    "text": "no.13 exception no actually this will be an",
    "start": "2182130",
    "end": "2188289"
  },
  {
    "text": "ArrayList of objects which is probably fair enough but also probably not what",
    "start": "2188289",
    "end": "2193750"
  },
  {
    "text": "you would want so in this case always make sure that you provide a generic parameter here as well or just use the",
    "start": "2193750",
    "end": "2199359"
  },
  {
    "text": "explicit ID and keep using the Diamonds on the right hand side so again even",
    "start": "2199359",
    "end": "2204460"
  },
  {
    "text": "though it's a simple feature please think it through before using it and there's a very very good guideline also",
    "start": "2204460",
    "end": "2210670"
  },
  {
    "text": "by Oracle itself that's been put out by Stewart Marx so also read that if you start using this feature okay",
    "start": "2210670",
    "end": "2221109"
  },
  {
    "text": "that brings us to Java 11 which was Reese quite recently September of this year and actually what we see there is",
    "start": "2221109",
    "end": "2229089"
  },
  {
    "text": "that there's one big new API that was introduced and this was even already introduced in Java 9 but it was only an",
    "start": "2229089",
    "end": "2235480"
  },
  {
    "text": "extra mental feature in Java 9 and 10 it has become official API in Java 11 and it's",
    "start": "2235480",
    "end": "2241660"
  },
  {
    "text": "a new HTTP client in the standard library it replaces HTTP euro connection which is good because it was a really",
    "start": "2241660",
    "end": "2248110"
  },
  {
    "text": "really horrible if you had to work with that's why we've got the Apache clients and all the other libraries that we're",
    "start": "2248110",
    "end": "2253360"
  },
  {
    "text": "currently probably using in our code bases and this one is actually fairly nice to work with and also require",
    "start": "2253360",
    "end": "2258370"
  },
  {
    "text": "modern it supports HTTP 2 it supports both WebSocket communication it has a reactive stream building supports and",
    "start": "2258370",
    "end": "2265930"
  },
  {
    "text": "that all just in the JDK which is pretty great so what does it can look like there's an HTTP client which has the two",
    "start": "2265930",
    "end": "2274000"
  },
  {
    "text": "most important methods are sent and SNA sync you can either get a default client",
    "start": "2274000",
    "end": "2279850"
  },
  {
    "text": "or use a builder API to build a client with all the settings that you want and in this send and send async methods the",
    "start": "2279850",
    "end": "2287020"
  },
  {
    "text": "most important parameter is an HTTP request and again this has everything that you would expect requesters and",
    "start": "2287020",
    "end": "2293320"
  },
  {
    "text": "uriah headers and methods so get put post etc and also this one can be",
    "start": "2293320",
    "end": "2299200"
  },
  {
    "text": "created using a builder API and then of course if we have a request we also need",
    "start": "2299200",
    "end": "2304420"
  },
  {
    "text": "a response and there we we see all the things that you would expect as well and this leads to an API where you can",
    "start": "2304420",
    "end": "2311620"
  },
  {
    "text": "pretty easily create a nice TP client using just plain Java so we got a speak",
    "start": "2311620",
    "end": "2317020"
  },
  {
    "text": "lines of newest speak lines for all for default clients then we build a requests using the Builder passing in a URI",
    "start": "2317020",
    "end": "2323740"
  },
  {
    "text": "saying that it should be a get request then building the request and then we can just call STP client or sense",
    "start": "2323740",
    "end": "2330130"
  },
  {
    "text": "passing the request and the only thing that's new here is the body handler which tells the HTTP clients how to turn",
    "start": "2330130",
    "end": "2336400"
  },
  {
    "text": "the response into something that we can use in our code this is a simple handler",
    "start": "2336400",
    "end": "2341560"
  },
  {
    "text": "that translates into the string but there are others as well so this is a",
    "start": "2341560",
    "end": "2346750"
  },
  {
    "text": "really useful addition at least in my opinion to to Java because Java itself",
    "start": "2346750",
    "end": "2355140"
  },
  {
    "text": "is adopting a rapidly schedule you see that the amount of new features in this release is decreasing as well which is",
    "start": "2355140",
    "end": "2361930"
  },
  {
    "text": "good because it helps us adopt but what about the adoption of Java because what",
    "start": "2361930",
    "end": "2367720"
  },
  {
    "text": "we saw most of the room here is using Java 8 and you know what you're not alone because these polls as of 2018",
    "start": "2367720",
    "end": "2374230"
  },
  {
    "text": "indicate that 8 out of 10 developers are still using Java 8 and the others are",
    "start": "2374230",
    "end": "2379990"
  },
  {
    "text": "either using an earlier version or a newer version sort of 50/50 for the",
    "start": "2379990",
    "end": "2385660"
  },
  {
    "text": "remaining people and this is visible across the board this is JetBrains research there's a Java magazine poll",
    "start": "2385660",
    "end": "2393970"
  },
  {
    "text": "also 8 in 10 developers are using Java as a yes so there's actually really an issue even RedHat who maintains an open",
    "start": "2393970",
    "end": "2401200"
  },
  {
    "text": "JDK port has said that they will skip Java 9 and Java 10 and will jump right to distributing Java 11 so why is that",
    "start": "2401200",
    "end": "2409960"
  },
  {
    "text": "the Java 11 release schedule fits in",
    "start": "2409960",
    "end": "2415060"
  },
  {
    "text": "this picture so we get a new release of Java every six months so we got Java nine we got Java 10 and we saw that the",
    "start": "2415060",
    "end": "2421870"
  },
  {
    "text": "adoption was quite low so why would Java 11 be different well of course it goes",
    "start": "2421870",
    "end": "2427960"
  },
  {
    "text": "to 11 and we're all Rockstar programmers so we can appreciate that but that's not very actual reason the reason is",
    "start": "2427960",
    "end": "2433810"
  },
  {
    "text": "long-term support and what happened is that Oracle announced that every three",
    "start": "2433810",
    "end": "2439480"
  },
  {
    "text": "years they will designate one Java version as long-term supporters which",
    "start": "2439480",
    "end": "2445330"
  },
  {
    "text": "means that Oracle at least has committed to supporting this version for at least three years and Java 11 is such a",
    "start": "2445330",
    "end": "2452560"
  },
  {
    "text": "long-term support version Java 17 will be the next one in three years from now",
    "start": "2452560",
    "end": "2458110"
  },
  {
    "text": "and in between we will get Java 12 13 14 etcetera etc and each of these releases",
    "start": "2458110",
    "end": "2464770"
  },
  {
    "text": "is a major release in the sense that it can contain new features it can deprecated features you can remove api's",
    "start": "2464770",
    "end": "2470890"
  },
  {
    "text": "after they have been deprecated so this is really the moment to start thinking about a strategy to handle this as a",
    "start": "2470890",
    "end": "2477400"
  },
  {
    "text": "company as a development team because on the one hand it's it might sound safe to stay on the LTS version and just wait",
    "start": "2477400",
    "end": "2483760"
  },
  {
    "text": "and thrill Java 17 is there and then make a move but the world is moving so quickly and there's lots and lots of",
    "start": "2483760",
    "end": "2489550"
  },
  {
    "text": "features coming up in the pipeline from the common versions of Java so it also seems a bit dumb to adopted strategy so",
    "start": "2489550",
    "end": "2497590"
  },
  {
    "text": "what are you going to do that's really not something that I can answer for you the only thing that I can",
    "start": "2497590",
    "end": "2503140"
  },
  {
    "text": "say that there will be a release every six months it will not be as big as Java 7 Java 8 and Java 9 because it's just",
    "start": "2503140",
    "end": "2510160"
  },
  {
    "text": "there's less time to create new features but there will be a release train that you need to keep keep track of either by",
    "start": "2510160",
    "end": "2517420"
  },
  {
    "text": "using it or at least by getting knowledge about what's in there so you're prepared if you move from LTS to",
    "start": "2517420",
    "end": "2523930"
  },
  {
    "text": "LTS also one misconception about long-term support is about whether this",
    "start": "2523930",
    "end": "2530020"
  },
  {
    "text": "is long-term support in open JDK or in the Oracle JDK because these are two",
    "start": "2530020",
    "end": "2535270"
  },
  {
    "text": "different things and actually what's currently happening in Java 8 is that",
    "start": "2535270",
    "end": "2541210"
  },
  {
    "text": "most people are using the Oracle JDK and not that many people are using the open",
    "start": "2541210",
    "end": "2546280"
  },
  {
    "text": "JDK distribution which is fine for Java 8 but as of Java 11 the licensing terms",
    "start": "2546280",
    "end": "2552580"
  },
  {
    "text": "for Oracle JDK have changed into a commercial one so if you're using Oracle",
    "start": "2552580",
    "end": "2558040"
  },
  {
    "text": "JDK and you're jumping to Java 11 you cannot use Oracle JDK in production without having a subscription with",
    "start": "2558040",
    "end": "2564670"
  },
  {
    "text": "Oracle and that might sound really horrible but it's really not because what Oracle did is they made sure that",
    "start": "2564670",
    "end": "2572440"
  },
  {
    "text": "open JDK in Oracle JDK are as of Java 11 identical in this in the sense that",
    "start": "2572440",
    "end": "2578230"
  },
  {
    "text": "their feature for feature the same that means that a lot of stuff that was proprietary in the Oracle bills that",
    "start": "2578230",
    "end": "2584350"
  },
  {
    "text": "gave the Oracle bills some edge in terms of performance etc has all been open sourced or cut out of the JDK things",
    "start": "2584350",
    "end": "2591700"
  },
  {
    "text": "like Web Start are gone for example and and so this way they reached feature",
    "start": "2591700",
    "end": "2598240"
  },
  {
    "text": "parity between open JDK and the Oracle JDK but it does mean that if you're moving from Java 8 to javi 11 you should",
    "start": "2598240",
    "end": "2605800"
  },
  {
    "text": "seriously look at open JDK again there are plain open JDK bills from the open",
    "start": "2605800",
    "end": "2612400"
  },
  {
    "text": "JDK website there are also other parties offering open JDK bills for example Azul",
    "start": "2612400",
    "end": "2617560"
  },
  {
    "text": "and IBM are doing so and there's even a",
    "start": "2617560",
    "end": "2622930"
  },
  {
    "text": "community effort called adopt open JDK which offers a jetty cables but the",
    "start": "2622930",
    "end": "2629290"
  },
  {
    "text": "interesting thing is that the the guarantee about long term supports only hosts for Oracle JDK 11",
    "start": "2629290",
    "end": "2635920"
  },
  {
    "text": "therefore only is available if you're going to pay or go a subscription fee and what happens with open JDK 11 isn't",
    "start": "2635920",
    "end": "2644470"
  },
  {
    "text": "quite clear yet there are some parties that have stepped up and said okay we're",
    "start": "2644470",
    "end": "2649569"
  },
  {
    "text": "going to also do long-term support for open JDK 11 and Red Hat is one of these",
    "start": "2649569",
    "end": "2655000"
  },
  {
    "text": "parties but well we all know that red has got bought by IBM last week so who knows what happens there this is",
    "start": "2655000",
    "end": "2661660"
  },
  {
    "text": "definitely something to keep your eye on and to start watching and again if you're just following the release train",
    "start": "2661660",
    "end": "2668140"
  },
  {
    "text": "if you're going from Java 11 to 12 to 13 etc then this whole description doesn't",
    "start": "2668140",
    "end": "2673450"
  },
  {
    "text": "really matter then you can just keep using the plain open JDK bills and be sure that you have a stable secure and",
    "start": "2673450",
    "end": "2681220"
  },
  {
    "text": "patched build it's only if you want to jump from LCS to LCS that you need to",
    "start": "2681220",
    "end": "2686319"
  },
  {
    "text": "start thinking about a strategy of adopting a certain vendors jdk maybe it's oracle maybe it's a zoo maybe",
    "start": "2686319",
    "end": "2693579"
  },
  {
    "text": "adopt open JDK maybe it's Red Hat's but this is really something that's changing and out of Java 11 so that's all I",
    "start": "2693579",
    "end": "2702460"
  },
  {
    "text": "wanted to share with you guys about what's up in Java and I hope this was useful useful to you",
    "start": "2702460",
    "end": "2708040"
  },
  {
    "text": "maybe we'll also have some questions York I don't know but now would be a good time to see",
    "start": "2708040",
    "end": "2715500"
  },
  {
    "text": "you",
    "start": "2719930",
    "end": "2721990"
  }
]