[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "Hello and welcome to \"GOTO Unscripted.\" I'm Duncan \nMcGregor. I'm a professional software developer  ",
    "start": "14160",
    "end": "19360"
  },
  {
    "text": "based close enough to London to make a living. \nI started programming computers on a ZX81 when I  ",
    "start": "19360",
    "end": "24520"
  },
  {
    "text": "was 13. I've been lucky enough to ride a wave of \ndemand for developers that started in the 1980s  ",
    "start": "24520",
    "end": "29960"
  },
  {
    "text": "and has continued throughout my career.\nI first met Nat Pryce in the early 2000s   when we were both members of the Extreme Tuesday \nClub, a meet-up for developers practicing extreme  ",
    "start": "30800",
    "end": "40239"
  },
  {
    "text": "programming, one of the precursors to agile \ndevelopment. Nat Pryce and I recently wrote   a Kotlin book together, but up until that \ncareer highlight, he was best known for the  ",
    "start": "40240",
    "end": "49280"
  },
  {
    "text": "book he wrote with Steve Freeman titled \"Growing \nObject-Oriented Software, Guided by Tests,\" but  ",
    "start": "49280",
    "end": "55079"
  },
  {
    "text": "colloquially known as GOOS. The book was published \nin 2009 in the Kent Beck Signature Series and was  ",
    "start": "55080",
    "end": "61560"
  },
  {
    "text": "highly influential in the then relatively-infant \nagile movement. It is still at number 402,655 in  ",
    "start": "61560",
    "end": "68480"
  },
  {
    "text": "Amazon rankings.\nIt's that good?  I don't know.\nIt's a number.  It's a number. Nat, for those in our \naudience who were still at school when  ",
    "start": "68480",
    "end": "76680"
  },
  {
    "start": "74000",
    "end": "265000"
  },
  {
    "text": "GOOS was published, what's it about?\nThat makes me feel old. It's a book   about test-driven development and was \nwritten to encapsulate everything that  ",
    "start": "76680",
    "end": "92040"
  },
  {
    "text": "we had in the Extreme Tuesday Club...so it \nwasn't just me and Steve inventing it. We  ",
    "start": "92040",
    "end": "99400"
  },
  {
    "text": "were the six...let's talk about the Extreme \nTuesday Club and then I can talk about GOOS.  The Extreme Tuesday Club was an informal \nmeetup. It's still going to this day,  ",
    "start": "100320",
    "end": "108759"
  },
  {
    "text": "but it started in the early 2000s, people \nin London who were interested in extreme  ",
    "start": "108760",
    "end": "115080"
  },
  {
    "text": "programming as it was very new when the sort of \nmeetup started. And it was being publicized on the  ",
    "start": "115080",
    "end": "127600"
  },
  {
    "text": "C2 Wiki and people were really quite inspired \nby this new way of development that was being  ",
    "start": "127600",
    "end": "136880"
  },
  {
    "text": "publicized by Kent Beck, Ward Cunningham, and \npeople like that, Ron Jeffries, and stuff.  So a bunch of interested people just arranged \na meetup in a pub in London. It went from pub  ",
    "start": "136880",
    "end": "147680"
  },
  {
    "text": "to pub. It grew over time. It spawned a bunch \nof conferences that then ended up spreading  ",
    "start": "147680",
    "end": "156799"
  },
  {
    "text": "around the world. And it also spawned a lot \nof different technical techniques that people  ",
    "start": "156800",
    "end": "164440"
  },
  {
    "text": "learned and shared and sort of developed in their \nwork and then shared in that sort of meetup. ",
    "start": "164440",
    "end": "172000"
  },
  {
    "text": "So GOOS was us writing about test-driven \ndevelopment and the techniques that had been  ",
    "start": "172000",
    "end": "178640"
  },
  {
    "text": "shared and invented within the Extreme Tuesday \nClub along with...sort of portrayed as by a  ",
    "start": "178640",
    "end": "188120"
  },
  {
    "text": "long-worked example that was an auction-sniping \nsort of application that would try and buy things  ",
    "start": "188120",
    "end": "196720"
  },
  {
    "text": "on, I think eBay was quite new at the time, \nso on something like eBay, and how do you  ",
    "start": "196720",
    "end": "203440"
  },
  {
    "text": "write that in a test-driven development way.\nA bit different from probably applications  ",
    "start": "203440",
    "end": "209000"
  },
  {
    "text": "now in that it was a desktop application and \nit communicated with a protocol that doesn't  ",
    "start": "209000",
    "end": "215840"
  },
  {
    "text": "exist anymore or no one really uses. But a lot of \nthe principles still apply and we showed how you  ",
    "start": "215840",
    "end": "221680"
  },
  {
    "text": "would start from writing a test, writing a test of \nwhat the system should do. The system would start  ",
    "start": "221680",
    "end": "229760"
  },
  {
    "text": "off very unstructured because it was very small \nand didn't need any structure, and then you'd add  ",
    "start": "229760",
    "end": "235439"
  },
  {
    "text": "more and more tests. And as the system grew and \nyou wanted to test various bits more thoroughly,  ",
    "start": "235440",
    "end": "240800"
  },
  {
    "text": "you would have to work out how to carve out \nthose parts and mock bits of them while you  ",
    "start": "240800",
    "end": "246080"
  },
  {
    "text": "sort of thoroughly test other parts. And over the \nnarrative arc of the example at the end of it,  ",
    "start": "246080",
    "end": "255240"
  },
  {
    "text": "you see how the final result is that the \nhexagon architecture sort of emerges from  ",
    "start": "255240",
    "end": "260359"
  },
  {
    "text": "the continual refactoring and the pressure \nof the need for testing the application.",
    "start": "260360",
    "end": "266560"
  },
  {
    "start": "265000",
    "end": "452000"
  },
  {
    "text": "I only relatively infrequently came to XTC. But \nI do remember the first time I ever did come,  ",
    "start": "266560",
    "end": "275040"
  },
  {
    "text": "Kent Beck turned up, and I just expected \nthat was normal for London. After that,  ",
    "start": "275040",
    "end": "281520"
  },
  {
    "text": "everything went downhill a bit.\nThanks.  I do remember that we...extreme programming, \nwhich people may or may not know, right? These  ",
    "start": "281520",
    "end": "296000"
  },
  {
    "text": "days I don't think it's fashionable. Extreme \nprogramming was one of a few precursors,  ",
    "start": "296000",
    "end": "302560"
  },
  {
    "text": "one of a few ways of writing software that ended \nup under the umbrella of agile. I think XP in  ",
    "start": "302560",
    "end": "312400"
  },
  {
    "text": "particular was developer-focused, wasn't it? I \nmean, we'd have Scrum, which really didn't talk   about what developers should be doing most of the \ntime, whereas XP was a thing that told developers  ",
    "start": "312400",
    "end": "322920"
  },
  {
    "text": "how they should be working. It told us that we \nshould be doing pair programming. It told us that   we should be writing tests first. It had a bunch \nof principles and a bunch of practices. But the  ",
    "start": "322920",
    "end": "334160"
  },
  {
    "text": "whole TDD thing I think was the big difference \nbetween XP and just other methodologies. ",
    "start": "334160",
    "end": "346120"
  },
  {
    "text": "There was a whole bunch of agile methods \nvery early on. So you're saying like about   luminaries turning up at XTC. So Alistair Cockburn \nturned up a few times and he was a methodologist  ",
    "start": "346120",
    "end": "360039"
  },
  {
    "text": "at IBM who studied how people wrote software \nand then captured that in a bunch of methods  ",
    "start": "360040",
    "end": "366520"
  },
  {
    "text": "that he called Crystal. Crystal Clear is a \nvery lightweight method, very similar to XP,  ",
    "start": "366520",
    "end": "373080"
  },
  {
    "text": "but less prescriptive. And then he had a bunch \nof other methods in the Crystal family for,  ",
    "start": "373080",
    "end": "378439"
  },
  {
    "text": "like, larger and more critical projects.\nI think all the early agile processes  ",
    "start": "378440",
    "end": "386360"
  },
  {
    "text": "definitely said something, apart from Scrum. They \ndefinitely said something about how people should  ",
    "start": "386360",
    "end": "392360"
  },
  {
    "text": "write software. XP was more extreme than others. \nIt definitely had, like, you follow these rules,  ",
    "start": "392360",
    "end": "399840"
  },
  {
    "text": "these practices, and they mesh together to allow \nyou to evolve and rapidly change your software,  ",
    "start": "399840",
    "end": "406400"
  },
  {
    "text": "and that's certainly my experience.\nBut early on in the days of agile,   I don't think it was a developer-focused process \nbut more that agile was seen as a holistic  ",
    "start": "406400",
    "end": "416720"
  },
  {
    "text": "thing. The way you should develop software has to \ninvolve the developers and the people who want the  ",
    "start": "416720",
    "end": "423920"
  },
  {
    "text": "software working together with their expertise and \nguidance coming from different parties involved in  ",
    "start": "423920",
    "end": "432200"
  },
  {
    "text": "a common enterprise. And it's only later that we \nend up with what we see described as agile today,  ",
    "start": "432200",
    "end": "440600"
  },
  {
    "text": "where it's mostly a management process and it says \nvery little about how you should write software.  ",
    "start": "440600",
    "end": "446920"
  },
  {
    "text": "And if software development gets done at all, \nit's sort of not really talked about very much.",
    "start": "446920",
    "end": "452520"
  },
  {
    "start": "452000",
    "end": "822000"
  },
  {
    "text": "My recollection of those days is that XP, in \nparticular, was a thing that developers wanted  ",
    "start": "452520",
    "end": "459919"
  },
  {
    "text": "to be doing. Like, we would go to the management \nand say, \"Hey, look, we've been trying this   stuff and it works. Can we run projects this \nway rather than a thing where we are brought  ",
    "start": "459920",
    "end": "471759"
  },
  {
    "text": "into a project that is run by a Scrum Master?\"\nYes. And I think especially in London where a lot  ",
    "start": "471760",
    "end": "479640"
  },
  {
    "text": "of that was happening inside banks and other \ncompanies, it was internal product development  ",
    "start": "479640",
    "end": "485200"
  },
  {
    "text": "teams or internal project teams just adopting it \nbecause it works. And there wasn't quite a strict  ",
    "start": "485200",
    "end": "492280"
  },
  {
    "text": "hierarchy in those teams of product owners then \nScrum Master and that, right? And those teams were  ",
    "start": "492280",
    "end": "500560"
  },
  {
    "text": "arguing with their project management and maybe IT \nmanagement in order to change their process, but   also they could have quite a lot of leeway in the \nway they did things so they didn't have to say,  ",
    "start": "500560",
    "end": "509720"
  },
  {
    "text": "\"We're going to write tests first. Can we do \nthat?\" They just wrote tests first. Or, \"Can we do  ",
    "start": "509720",
    "end": "515479"
  },
  {
    "text": "pairing?\" They might just sit there next to each \nother and do some pairing. So again, it depends   on company by company. They're all different.\nXP had the role of a coach and had the role  ",
    "start": "515480",
    "end": "524600"
  },
  {
    "text": "of a customer and then the role of developers. \nAnd that felt very different, to me at least,  ",
    "start": "524600",
    "end": "529800"
  },
  {
    "text": "from this role of a Scrum Master who is, you know, \nmasterful, telling us what we should be doing and  ",
    "start": "529800",
    "end": "535360"
  },
  {
    "text": "a product owner who's owning this stuff that \nwe're not owning because we're only developers.  Yes. Certainly the most sort of happy XP projects \nthat I was on in those days, the developers often  ",
    "start": "535360",
    "end": "551000"
  },
  {
    "text": "had very deep business knowledge, right? You know, \nfinancial knowledge, so you didn't have to keep  ",
    "start": "551000",
    "end": "559600"
  },
  {
    "text": "going to a product owner and saying, like, \"What \nshould this do? What should that do?\" You know,   these people knew what particular, I don't \nknow, derivatives or fixed income instruments  ",
    "start": "559600",
    "end": "569880"
  },
  {
    "text": "or whatever did and how to process them. And that \nwas because everybody in the organization knew  ",
    "start": "569880",
    "end": "577160"
  },
  {
    "text": "that stuff, right? There wasn't such a distinct \ndivision of responsibilities. And also in other  ",
    "start": "577160",
    "end": "583600"
  },
  {
    "text": "places that we've worked where people, you know, \nthere were people who were guiding the product,  ",
    "start": "583600",
    "end": "589920"
  },
  {
    "text": "product directors, but developers are allowed to \nsay, \"Hey, wouldn't it be great if the product   did this?\" And it was much more flexible in \nthis sort of division of responsibilities.  ",
    "start": "589920",
    "end": "600519"
  },
  {
    "text": "And I think Agile and XP works very well \nthere because you are all working together  ",
    "start": "600520",
    "end": "606080"
  },
  {
    "text": "as one team without those strict roles.\nThe best project, in my experience, we  ",
    "start": "606080",
    "end": "614480"
  },
  {
    "text": "have somebody that wants the software that knows \nwhat they want and knows that domain of things,  ",
    "start": "614480",
    "end": "620959"
  },
  {
    "text": "and in the best teams, they see it as their job to \nteach the software development team that stuff and  ",
    "start": "622440",
    "end": "628920"
  },
  {
    "text": "the software development team see it as their \njob to teach the people who want the software  ",
    "start": "628920",
    "end": "634320"
  },
  {
    "text": "how to manage a software development team.\nYes. I think what struck people about XP when  ",
    "start": "634320",
    "end": "648400"
  },
  {
    "text": "they first read about it was that it's, this is a \nway of working in teams that matches the way that  ",
    "start": "648400",
    "end": "655000"
  },
  {
    "text": "I work when I'm writing software by myself, \nmaybe with some more strict discipline around  ",
    "start": "655000",
    "end": "660960"
  },
  {
    "text": "testing and test driven and refactoring. But \nif somebody is in charge of their own software,  ",
    "start": "660960",
    "end": "667480"
  },
  {
    "text": "then they're staying on top of it. We used \nto call it tidying or something. But they're  ",
    "start": "667480",
    "end": "672560"
  },
  {
    "text": "constantly refactoring it because they need to \nstay on top of the complexity because it's their   own project and they've only got one brain. \nAnd within teams, this XP process took the  ",
    "start": "672560",
    "end": "682120"
  },
  {
    "text": "same approach. You have to stay on top of the \ncomplexity, it's the only way to stay flexible. ",
    "start": "682120",
    "end": "687040"
  },
  {
    "text": "The other things that were very innovative about \nit, at the time, was...I think at the time, so  ",
    "start": "687640",
    "end": "693840"
  },
  {
    "text": "this is like, well, late '90s, early 2000s, we'd \ngone through a period of where teams got stuck  ",
    "start": "693840",
    "end": "700800"
  },
  {
    "text": "in analysis paralysis. No one talks about that \nanymore, right? With the web and things like that,  ",
    "start": "700800",
    "end": "706040"
  },
  {
    "text": "people can roll stuff out all the time. But \nback in the day, people would spend months,   years doing analysis. I remember joining one \narea of a company where there'd been this huge  ",
    "start": "706040",
    "end": "717399"
  },
  {
    "text": "effort to sort of come up with some design. \nThis program had been running for ages. It  ",
    "start": "717400",
    "end": "722520"
  },
  {
    "text": "created huge schemas that were so big that they \nhad to buy a special, massive plotter to be able  ",
    "start": "722520",
    "end": "728280"
  },
  {
    "text": "to plot them out and then stick them up on the \nwalls. But at no point had they ever written any  ",
    "start": "728280",
    "end": "733760"
  },
  {
    "text": "software at all. It was just a database schema. \nThey hadn't even tried to make it in DDL and then  ",
    "start": "733760",
    "end": "739960"
  },
  {
    "text": "put it into a database. Then after 18 months or 2 \nyears or something, eventually management pulled  ",
    "start": "739960",
    "end": "745000"
  },
  {
    "text": "the plug and no software had even been written.\nSo that's a kind of project approach that XP was  ",
    "start": "745000",
    "end": "751880"
  },
  {
    "text": "in total diametric opposite of and that we took \nin the GOOS book as well. Start with a walking  ",
    "start": "751880",
    "end": "759200"
  },
  {
    "text": "skeleton, make it do as little as you possibly \ncan get away with, get it into production,  ",
    "start": "759200",
    "end": "765600"
  },
  {
    "text": "get that past to production, automated, tested, \nyou know, and then you know you can write the next  ",
    "start": "765600",
    "end": "773560"
  },
  {
    "text": "bit and the next bit of functionality knowing that \nit's covered and tested and going into production,   integrating with whatever environment it has to \nintegrate with. And you're making these tiny,  ",
    "start": "773560",
    "end": "782839"
  },
  {
    "text": "tiny steps of constant incremental and iterative \nimprovement to the system, deported by tests. And  ",
    "start": "782840",
    "end": "789760"
  },
  {
    "text": "you're using the tests for feedback about whether \ndesign needs to change and adapt and evolve. ",
    "start": "789760",
    "end": "795160"
  },
  {
    "text": "That was very controversial at the time. \nAnd I don't think really people probably  ",
    "start": "795160",
    "end": "800879"
  },
  {
    "text": "now realize quite how controversial it \nwas. People say, \"This is nothing but   hacking. It's cowboy coding. This is dreadful. \nI wouldn't. You know, so unprofessional.\" Well,  ",
    "start": "800880",
    "end": "811079"
  },
  {
    "text": "now a lot of those techniques are so embedded \nin the way a lot of people expect to work,  ",
    "start": "811080",
    "end": "817080"
  },
  {
    "text": "we forget that someone had to actually sort \nof come up with them and publicize them.",
    "start": "817080",
    "end": "822440"
  },
  {
    "start": "822000",
    "end": "1052000"
  },
  {
    "text": "My recollection of the time was that \nthe thing that GOOS introduced us to,  ",
    "start": "823160",
    "end": "831600"
  },
  {
    "text": "wrote about what maybe we'd been doing in \nLondon as part of the way we worked was a sort  ",
    "start": "832480",
    "end": "839800"
  },
  {
    "text": "of outside-in acceptance test-driven approach. \nWould you say that was the major innovation? ",
    "start": "839800",
    "end": "847320"
  },
  {
    "text": "I don't know if it was an innovation. It was \ncertainly what we wrote about and it wasn't  ",
    "start": "847320",
    "end": "854440"
  },
  {
    "text": "what Ken Beck really wrote about as much in \nhis book. There was a lot more bottom-up sort  ",
    "start": "854440",
    "end": "861960"
  },
  {
    "text": "of approach in TDD in the first wave, let's say. \nI don't like the sort of Detroit versus London  ",
    "start": "861960",
    "end": "869520"
  },
  {
    "text": "school or whatever I think. But there's definitely \npeople who start in the small and sort of grow it  ",
    "start": "869520",
    "end": "875840"
  },
  {
    "text": "out. And we took a sort of \"Let's try and capture \neverything and work from outside in.\" So I don't  ",
    "start": "875840",
    "end": "883400"
  },
  {
    "text": "know whether that just was a result of the systems \nwe were building that had to integrate with large  ",
    "start": "883400",
    "end": "890840"
  },
  {
    "text": "sorts of IT estates and big organizations.\nSo maybe you should explain. Detroit was  ",
    "start": "890840",
    "end": "899080"
  },
  {
    "text": "based around the original XP system, wasn't it? \nWhich was a payroll system for Chrysler, I think. ",
    "start": "899080",
    "end": "908160"
  },
  {
    "text": "Chrysler, I think.\nAnd their TDD was a process where you sort of had  ",
    "start": "908160",
    "end": "915879"
  },
  {
    "text": "this idea for what the low-level building blocks \nof your software would be and you'd write those   and you'd write the test for them. And then you'd \nsay, \"Okay, well, now we've got this, we can build  ",
    "start": "915880",
    "end": "923080"
  },
  {
    "text": "bigger abstractions based on those and then write \ntests and then write those.\" And then we build  ",
    "start": "923080",
    "end": "930400"
  },
  {
    "text": "software from things that we thought, when we \nfinally plug them together, we'll make our working  ",
    "start": "930400",
    "end": "936160"
  },
  {
    "text": "software. Whereas GOOS said, \"Well, there's a \ndanger that we're going to write software that  ",
    "start": "936160",
    "end": "942120"
  },
  {
    "text": "we don't need or we'll overwrite it and so on. \nWhat happens if we wrote from the outside in and  ",
    "start": "942120",
    "end": "947960"
  },
  {
    "text": "wrote the very minimum set of things that we would \nhave to write to support a particular use case,  ",
    "start": "947960",
    "end": "953320"
  },
  {
    "text": "to support the next feature we're trying to do?\"\nI don't know whether that description of Detroit   is accurate or not. I can't imagine it is. \nI can't imagine that they sat down and went,  ",
    "start": "953320",
    "end": "963040"
  },
  {
    "text": "\"Well, we obviously need, I don't know, \na money-type. So we'll write money. Okay,   now we obviously need a currency-type. And \neventually, we'll get to a payroll.\" They  ",
    "start": "963040",
    "end": "971240"
  },
  {
    "text": "must have started at a higher level than that.\nBut certainly in the case of we were working in  ",
    "start": "971240",
    "end": "976839"
  },
  {
    "text": "organizations, particularly some of it came \nout of banks, some of it came out of telcos,  ",
    "start": "976840",
    "end": "982320"
  },
  {
    "text": "where we were integrating with messaging \nsystems that allowed us to interact with other  ",
    "start": "983160",
    "end": "989040"
  },
  {
    "text": "parts of the organization. And we were \nintegrating with, say, reference data   services. So there was a definite, like, there's \ncertain ways you have to integrate. Otherwise,  ",
    "start": "989040",
    "end": "999200"
  },
  {
    "text": "you cannot make your application work. So there's \nclear boundaries. You're writing a system with  ",
    "start": "999200",
    "end": "1004400"
  },
  {
    "text": "clear inputs and outputs that you're going \nto plug into. Like, even with the front ends,  ",
    "start": "1004400",
    "end": "1011160"
  },
  {
    "text": "we would treat that as sort of an input-output.\nFrom that, you can say, well, if we want to,  ",
    "start": "1012360",
    "end": "1020360"
  },
  {
    "text": "I don't know, order a broadband line or \nsomething. \"Well, you're going to get a   message from the telco that looks like this. \nAnd you're going to have to basically ask for  ",
    "start": "1020360",
    "end": "1027919"
  },
  {
    "text": "payment from that system over there. That's going \nto look like that.\" So from there, you can easily   say from the very outside, \"Here's what we'd \nexpect to see.\" And then start thinking about,  ",
    "start": "1027920",
    "end": "1036319"
  },
  {
    "text": "okay...and then the admin user would see this \ncoming up in a report. Like, you know, a person   would see this coming and then start, like, \ncoming up with a structure for those edges.  ",
    "start": "1036320",
    "end": "1043919"
  },
  {
    "text": "And then you could build up the middle. As long \nas you've got the edge defined, you can refactor  ",
    "start": "1043920",
    "end": "1048960"
  },
  {
    "text": "as much as you like in the middle, confident \nthat you're not going to break the system. So you've managed to not talk about one \nof the innovations of GOOS and sort of  ",
    "start": "1048960",
    "end": "1059560"
  },
  {
    "start": "1052000",
    "end": "1418000"
  },
  {
    "text": "skirt around the edges of it. So if we're \ngoing to build a system from the outside,  ",
    "start": "1059560",
    "end": "1067040"
  },
  {
    "text": "there's going to be this point where, for \nexample, we have a bit of the system that  ",
    "start": "1067040",
    "end": "1072880"
  },
  {
    "text": "we haven't written yet, but we still want to \nsee whether our whole system works. So that  ",
    "start": "1072880",
    "end": "1078960"
  },
  {
    "text": "system might be how we save things to disk or \nhow we talk to this system over here or that   sort of thing. GOOS publicized, popularized a \ntechnology, should we call it, of mock objects. ",
    "start": "1078960",
    "end": "1093519"
  },
  {
    "text": "Practice. Technique. Yes.\nTechnique.  I think it's more of a technique than a \ntechnology, I think. Because you don't need to use  ",
    "start": "1093520",
    "end": "1102520"
  },
  {
    "text": "a particular library or something. It's really, \nyeah, it was used in a number of ways. So again,  ",
    "start": "1102520",
    "end": "1108240"
  },
  {
    "text": "a lot of what we were building was event-driven \nor message-driven. And so it was a very natural  ",
    "start": "1109080",
    "end": "1117039"
  },
  {
    "text": "fit for object-oriented systems built \nout of...composed out of state machines.  ",
    "start": "1117040",
    "end": "1122600"
  },
  {
    "text": "So those state machines fix through \nstates receiving and sending messages,  ",
    "start": "1122600",
    "end": "1128520"
  },
  {
    "text": "either driven by messages coming in from a \nmessage bus or from other object message calls. ",
    "start": "1128520",
    "end": "1134040"
  },
  {
    "text": "Those protocols, by which they talk, are really \nthe design of the system. You've got a bunch of  ",
    "start": "1137880",
    "end": "1145360"
  },
  {
    "text": "different protocols between your objects. You \ncan then write an object in your class that  ",
    "start": "1145360",
    "end": "1151679"
  },
  {
    "text": "implements some roles in these protocols, and \nthen it will plug in into the right place. You   can then... As soon as you've got enough of \nthat, you're now writing code by reorganizing  ",
    "start": "1151680",
    "end": "1162520"
  },
  {
    "text": "graphs of objects rather than writing \nprocedural code in Java or whatever it is. ",
    "start": "1162520",
    "end": "1168320"
  },
  {
    "text": "So how do you represent those protocols and \nhow do you represent them in tests? That was  ",
    "start": "1169520",
    "end": "1174760"
  },
  {
    "text": "one of the sort of drivers of mock objects. And \nhow do you know if these things are clicking  ",
    "start": "1174760",
    "end": "1179960"
  },
  {
    "text": "through states? But the way that they expose \ntheir behavior to the rest of the system is  ",
    "start": "1179960",
    "end": "1186520"
  },
  {
    "text": "by sending out messages to other objects, not \nby exposing data that is queried. How do you  ",
    "start": "1186520",
    "end": "1192040"
  },
  {
    "text": "know whether they have performed the behavior \nthat they should perform when you plug them  ",
    "start": "1192040",
    "end": "1198000"
  },
  {
    "text": "into that graph of objects? So again, that's \nwhere mock objects came from. How can you test  ",
    "start": "1198000",
    "end": "1204560"
  },
  {
    "text": "drive some software without just looking at its \ninternal state, which is an implementation detail  ",
    "start": "1204560",
    "end": "1211320"
  },
  {
    "text": "in a system that is based around state machines \ncomposed together through messaging protocols? ",
    "start": "1211320",
    "end": "1219840"
  },
  {
    "text": "So it's odd that, in those days, we had beautiful \nOO design for things. And in those days we had  ",
    "start": "1219840",
    "end": "1228679"
  },
  {
    "text": "objects whose job was to encapsulate state. \nThat we weren't supposed to ask about the state,  ",
    "start": "1228680",
    "end": "1233920"
  },
  {
    "text": "we were supposed to derive interactions. An object \nwould hold onto its state and...encapsulation  ",
    "start": "1233920",
    "end": "1241880"
  },
  {
    "text": "was the phrase, wasn't it? Like, we don't care \nwhat state it's storing, how it's storing it,   providing it can do its job. Provided we can \nsend a message to it to tell it do the next  ",
    "start": "1241880",
    "end": "1249200"
  },
  {
    "text": "thing in the state or whatever. We don't work \nlike that anymore. Do we not work like that  ",
    "start": "1249200",
    "end": "1255279"
  },
  {
    "text": "anymore because we're not writing desktop \napplications in Smalltalk or Java Swing? ",
    "start": "1255280",
    "end": "1265160"
  },
  {
    "text": "I think we work like that, but just in different \nplaces. And we sometimes don't admit to ourselves   that we're working like that. So we work like \nthat when we're composing microservices. So  ",
    "start": "1266040",
    "end": "1276320"
  },
  {
    "text": "we're working like that at a larger scale. And \nmaybe the idea...who was it, Alan Kay's idea that  ",
    "start": "1276320",
    "end": "1283120"
  },
  {
    "text": "everything's an object and objects are smaller. \nYou can take your computer and you divide it into   smaller computers and smaller computers. One of \neach of these things is an object. At some point,  ",
    "start": "1283120",
    "end": "1292039"
  },
  {
    "text": "maybe object orientation is not paying off \nwith a fine grain. But at a microservice level,  ",
    "start": "1292040",
    "end": "1297800"
  },
  {
    "text": "having a clear protocol that things communicate \nwith and clear encapsulation boundaries and not  ",
    "start": "1297800",
    "end": "1305040"
  },
  {
    "text": "letting other services reach into the database of \na different service and just rummage about in it,  ",
    "start": "1305040",
    "end": "1310920"
  },
  {
    "text": "couple yourselves to it, is a principle that \npeople still apply. They might not use the same   terminology, but they still apply it.\nNow we call that a bounded context.  ",
    "start": "1310920",
    "end": "1319440"
  },
  {
    "text": "So what you're saying is that we used to have \nobjects that sat in memory that didn't admit,  ",
    "start": "1319440",
    "end": "1325080"
  },
  {
    "text": "didn't expose their representation. Now \nwe have a bounded context that the whole   machine or a whole set of microservices that are \ntalking to a database that they don't expose. ",
    "start": "1325080",
    "end": "1332360"
  },
  {
    "text": "Yes. It's similar design principles, right, but \njust at a larger scale. Where else? Oh, and if  ",
    "start": "1332360",
    "end": "1340880"
  },
  {
    "text": "you look at, say, RX or Reactive Streams, that's a \nfantastic example of a really well-designed object  ",
    "start": "1340880",
    "end": "1349240"
  },
  {
    "text": "oriented library or framework. I don't know what \nyou'd call it. Library. And has a design pretty  ",
    "start": "1349240",
    "end": "1359400"
  },
  {
    "text": "much the same as what we were trying to describe \nin GOOS, which is you've got state machines. You   don't know what's in them. They talk through very \nclear, well-defined protocols. Those protocols let  ",
    "start": "1359400",
    "end": "1368880"
  },
  {
    "text": "you create graphs in different structures \nthat do different things. On top of that,  ",
    "start": "1368880",
    "end": "1374000"
  },
  {
    "text": "you write some convenience code that then appears \nto be...that composes these objects and then acts  ",
    "start": "1374000",
    "end": "1381120"
  },
  {
    "text": "as a very high-level declarative domain-specific \nlanguage embedded in your 3GL. That's exactly how  ",
    "start": "1381120",
    "end": "1388360"
  },
  {
    "text": "we write Reactive Streams code. We write what \nlooks like pure functional code. Underneath it,  ",
    "start": "1388360",
    "end": "1394679"
  },
  {
    "text": "there's lots of state machines ticking through \nand all of that stuff is going on. They all plug  ",
    "start": "1394680",
    "end": "1400600"
  },
  {
    "text": "together through very clear interfaces that let \nyou put them together into different structures   to get different effects. So I think we still \ndo it, right? But we like to describe it in  ",
    "start": "1400600",
    "end": "1410760"
  },
  {
    "text": "terms of functional programming terms because \nit makes us sound that we understand maths.",
    "start": "1410760",
    "end": "1417040"
  },
  {
    "text": "I mean, I do feel that, to me, I still think of \nmyself as an object-oriented programmer, but the   thing that's changed is I don't think of sending \nmessages to objects to change their state anymore.  ",
    "start": "1417040",
    "end": "1426280"
  },
  {
    "start": "1418000",
    "end": "2491000"
  },
  {
    "text": "I send messages to objects to ask them about \nthings and then I mutate them into other objects. ",
    "start": "1426280",
    "end": "1433280"
  },
  {
    "text": "Transform them.\nTransform, yes. So this idea   of objects encapsulating state is still there, \nbut encapsulating state change, I don't think is. ",
    "start": "1433280",
    "end": "1443880"
  },
  {
    "text": "Yes, apart from some areas of the \nsystem, right? I think that's where the  ",
    "start": "1443880",
    "end": "1450560"
  },
  {
    "text": "object-orientation-everywhere idea, like, sort \nof didn't really work because there's parts of  ",
    "start": "1450560",
    "end": "1457920"
  },
  {
    "text": "the system which calculate a result and there's \nparts of the system that coordinate activity or,  ",
    "start": "1457920",
    "end": "1462960"
  },
  {
    "text": "you know... I read a blog post by someone who I \ncan't remember at all who sort of described as  ",
    "start": "1462960",
    "end": "1468480"
  },
  {
    "text": "there's parts of the system that are \ninformatics and there's parts of the   system that are cybernetic, right? The cybernetic \nsystems, their job is to maintain homeostasis.  ",
    "start": "1468480",
    "end": "1480000"
  },
  {
    "text": "It's like your server receives an event, right? It \nprocesses that result. Processing the result will  ",
    "start": "1480000",
    "end": "1486360"
  },
  {
    "text": "calculate something that has to be sent back. \nThere's your informatics bit, right? But then   the server goes back to, like, hopefully, being \nable to receive the next request without having  ",
    "start": "1486360",
    "end": "1495920"
  },
  {
    "text": "leaked any memory. So that's your homeostasis \nbit, right? And OO comes from a cybernetic sort  ",
    "start": "1495920",
    "end": "1502400"
  },
  {
    "text": "of tradition and functional programming comes \nfrom a calculating results sort of informatics   tradition. And our systems need both, right? And \nthey need both sort of in different places of the  ",
    "start": "1502400",
    "end": "1513200"
  },
  {
    "text": "system or in layers. And having just one way of \ndoing things doesn't actually make building a  ",
    "start": "1513200",
    "end": "1520320"
  },
  {
    "text": "real system easy. It can make it harder, right?\nThinking back to the days of GOOS, 15 years now,  ",
    "start": "1520320",
    "end": "1528320"
  },
  {
    "text": "what other changes do you see in \nthe software development landscape?  Well, machines are a lot faster, right? And \nthat changes how much you can test in one go,  ",
    "start": "1531120",
    "end": "1543520"
  },
  {
    "text": "right? So there was like a very strict distinction \nthat people were drawing between unit tests and,  ",
    "start": "1543520",
    "end": "1556320"
  },
  {
    "text": "I don't know, people didn't have a good word for \nit, integration tests, not unit tests, right?   Things that do IO, things that touch hardware, \nright? If you can run everything in memory,  ",
    "start": "1556320",
    "end": "1565200"
  },
  {
    "text": "it goes fast. Debug is reliable. But mainly people \nare concerned about fast, right, fast feedback.  ",
    "start": "1565200",
    "end": "1572840"
  },
  {
    "text": "And then as soon as you touch IO, it goes slowly. \nWell, that, you know, technology has changed. You  ",
    "start": "1572840",
    "end": "1578559"
  },
  {
    "text": "can run a lot more, much faster now. We don't have \nspinning disks. We have, like, SSDs, you know,  ",
    "start": "1578560",
    "end": "1588360"
  },
  {
    "text": "fantastic machines, I don't know, orders of \nmagnitude faster, many orders of magnitude faster.  ",
    "start": "1588360",
    "end": "1594400"
  },
  {
    "text": "So now we can run more in our tests at one go. \nAnd so there's less need to have lots of little  ",
    "start": "1594400",
    "end": "1601560"
  },
  {
    "text": "unit tests to try and get that fast feedback.\nBut you know, if you use something like test  ",
    "start": "1601560",
    "end": "1608920"
  },
  {
    "text": "containers to spin up a database, you're still \ngoing to have difficulty doing fault injection   to sort of exercise your error-handling \npaths, for example. So there's still a  ",
    "start": "1608920",
    "end": "1616720"
  },
  {
    "text": "need for that sort of abstraction level and \nthe seams that let you instantiate and then  ",
    "start": "1616720",
    "end": "1623520"
  },
  {
    "text": "test the pieces of functionality. But we \ncan also do much more thorough testing of  ",
    "start": "1623520",
    "end": "1629200"
  },
  {
    "text": "larger scales. That's one thing I've noticed.\nI mean, functional programming, right? That's  ",
    "start": "1629200",
    "end": "1638760"
  },
  {
    "text": "the other thing is like, you know, that...when \nwe wrote GOOS, what? It was written in Java 6,  ",
    "start": "1638760",
    "end": "1644240"
  },
  {
    "text": "I think, and didn't really have much support \nfor functional programming in Java. But now   since then, there is some support for functional \nprogramming in Java, but also modern languages,  ",
    "start": "1644240",
    "end": "1653560"
  },
  {
    "text": "all modern languages now have much \nbetter support for that, like you say,   transforming data rather than mutating data.\nYes, I think it's the thing that we always  ",
    "start": "1653560",
    "end": "1663720"
  },
  {
    "text": "could do. And I think the Java developers \nin our audience, should we still have one,  ",
    "start": "1663720",
    "end": "1671039"
  },
  {
    "text": "will probably remember Guava maybe as the point \nwhere functional programming became convenient  ",
    "start": "1672420",
    "end": "1678240"
  },
  {
    "text": "enough in Java that you could represent things as \nchains of calculations, composable chains, rather  ",
    "start": "1678240",
    "end": "1689240"
  },
  {
    "text": "than it was just easier to mutate a list, you \nknow, sort in place and so on, that sort of thing. ",
    "start": "1689240",
    "end": "1695720"
  },
  {
    "text": "I like the idea that things are quicker. I'm not \nlike...well, the machines are quicker. I do wonder   whether we're squandering that a bit.\nThat's the software development  ",
    "start": "1698480",
    "end": "1707559"
  },
  {
    "text": "tradition though, isn't it?\nPersonally, I've sort of spent the   last few weeks looking at how fast tests are to \nrun in IntelliJ, and the answer is simply not at  ",
    "start": "1707560",
    "end": "1717200"
  },
  {
    "text": "all. Like I would have...it takes 3 seconds to get \nfeedback on practically anything these days. And  ",
    "start": "1717200",
    "end": "1723840"
  },
  {
    "text": "as far as I can remember, it took 3 seconds to get \nfeedback on the same amount of code 15 years ago. ",
    "start": "1723840",
    "end": "1731760"
  },
  {
    "text": "One thing that's changed though, is, I've gone \nfrom Java to Kotlin as my main preferred language,  ",
    "start": "1731760",
    "end": "1740040"
  },
  {
    "text": "the sort of enterprise delivery, whatever, we have \na working type system, right? But that type system  ",
    "start": "1740040",
    "end": "1746840"
  },
  {
    "text": "takes longer to do its type checking, but you \ncan rely on it a lot more than you could in Java,  ",
    "start": "1746840",
    "end": "1754440"
  },
  {
    "text": "which has complexities in its type system that \nmake it rather inconvenient. And so people rely  ",
    "start": "1754440",
    "end": "1762159"
  },
  {
    "text": "on Reflection and things like that in Java a \nlot more than they would need to in Kotlin. ",
    "start": "1762160",
    "end": "1766760"
  },
  {
    "text": "You've got this trade-off with, like you say, \nwith 3 seconds to get a result, but a lot of   that might be type checking, and then we could \nmove a lot of our checking into the type system,  ",
    "start": "1768720",
    "end": "1778440"
  },
  {
    "text": "into a type-level modeling that we would otherwise \nhave had to write unit tests for. So it's sort  ",
    "start": "1778440",
    "end": "1784000"
  },
  {
    "text": "of paying off. And then you might not even \nnotice the fact that I'm writing something,  ",
    "start": "1784000",
    "end": "1789360"
  },
  {
    "text": "and now my ID is underlining stuff in red, and \nI'm just going to fix it. I've not even had to   run a test. But in the past, I'd have had to \nrun a test to find out that I've just made  ",
    "start": "1789360",
    "end": "1797400"
  },
  {
    "text": "that mistake. So there's feedback that's \nfaster in different ways, and definitely,   that's changed how I think about designing \nthings in a way that is, you know, different. ",
    "start": "1797400",
    "end": "1808080"
  },
  {
    "text": "Yes, I think we have learned to use the type \nsystems we have and more sophisticated type  ",
    "start": "1808080",
    "end": "1814559"
  },
  {
    "text": "systems to represent things about our \nsoftware, haven't we? The whole making   illegal states unrepresentable, I think, has \nchanged the way we write software in the past  ",
    "start": "1814560",
    "end": "1822480"
  },
  {
    "text": "15 years. We could always have done it, but we \ndidn't know that we could, and so we didn't. ",
    "start": "1822480",
    "end": "1833440"
  },
  {
    "text": "Yes. Well, it's just too inconvenient. I mean, in \nJava with, like, use-site variance and things like  ",
    "start": "1833440",
    "end": "1841120"
  },
  {
    "text": "that is just...sometimes it's just so painful to \nuse and primitive versus reference types. Having  ",
    "start": "1841120",
    "end": "1846760"
  },
  {
    "text": "to worry about that stuff, you just can't easily \nrepresent certain things. Too awkward. It'll get  ",
    "start": "1846760",
    "end": "1853960"
  },
  {
    "text": "better, but Java is a slow-moving beast.\nDo you feel that we're writing  ",
    "start": "1853960",
    "end": "1859880"
  },
  {
    "text": "software quicker than 15 years ago?\nNot really, but we're also doing bigger things,  ",
    "start": "1859880",
    "end": "1868480"
  },
  {
    "text": "I think. Maybe not justifiably, you know, we \nwrite where we would have written a server... ",
    "start": "1868480",
    "end": "1876881"
  },
  {
    "text": "When you say bigger, do you mean...\n... we now write 20 microservices,   and now we have to worry about integrating \nan APM solution and instrumenting all of our  ",
    "start": "1876881",
    "end": "1885559"
  },
  {
    "text": "HTTP calls so we know what's going on in \nour system, etc. You can say it's crazy,  ",
    "start": "1885560",
    "end": "1893440"
  },
  {
    "text": "but at the same time, you think...at some point \nyou've got to think, developers prefer to run a  ",
    "start": "1893440",
    "end": "1900840"
  },
  {
    "text": "distributed system than use the modularization \nmechanisms in their existing languages, which  ",
    "start": "1900840",
    "end": "1907360"
  },
  {
    "text": "means that those existing languages must be doing \nsomething wrong in the way that they do modules. ",
    "start": "1907360",
    "end": "1911920"
  },
  {
    "text": "Yes. I think the boundaries are always hard, and \nthen we're in Conway's law, and the hard boundary  ",
    "start": "1914320",
    "end": "1927320"
  },
  {
    "text": "supplied by microservice saves us having to go to \nsomebody's desk and talk to them, maybe. I feel we  ",
    "start": "1927320",
    "end": "1941279"
  },
  {
    "text": "have squandered a lot of the advantages that we've \nhad over the past 15 years. Software is big in  ",
    "start": "1941280",
    "end": "1953720"
  },
  {
    "text": "two dimensions, really, isn't it? It's big in its \nability to scale out, how many requests per second  ",
    "start": "1953720",
    "end": "1959200"
  },
  {
    "text": "we can handle, or how much data we can store, and \nthen there's how many features we have, like what  ",
    "start": "1959200",
    "end": "1966120"
  },
  {
    "text": "it actually does. I feel that we are able to \nstore and access more data, and we're able to  ",
    "start": "1966120",
    "end": "1975240"
  },
  {
    "text": "be more scalable, but I don't actually feel that \nwe are delivering features any quicker these days. ",
    "start": "1975240",
    "end": "1982720"
  },
  {
    "text": "We expect more from our features, right? \nThat's the other thing. Back in the day,  ",
    "start": "1982720",
    "end": "1988600"
  },
  {
    "text": "people would be quite, well, I wouldn't say happy, \nbut they were put up with a desktop user interface  ",
    "start": "1988600",
    "end": "1995760"
  },
  {
    "text": "created by a programmer in Swing or in .NET. \nNowadays, they have people who can actually design  ",
    "start": "1995760",
    "end": "2006120"
  },
  {
    "text": "user interfaces, explaining to the developers \nwhat a good-looking user interface and what a  ",
    "start": "2006120",
    "end": "2012960"
  },
  {
    "text": "well-working user interface, let's say, actually \nshould be like. I think we are expected to do  ",
    "start": "2012960",
    "end": "2021120"
  },
  {
    "text": "more. We're expected to create websites that work \non a wider variety of devices. It's not just a VGA  ",
    "start": "2021120",
    "end": "2027680"
  },
  {
    "text": "screen. It has to work on mobile. It has to work \non big desktops, iPads, a variety of operating  ",
    "start": "2027680",
    "end": "2037040"
  },
  {
    "text": "systems, multiple different browsers, each with \ntheir own release cadences. That brings a lot of  ",
    "start": "2037040",
    "end": "2042640"
  },
  {
    "text": "complexity that people just have to deal with. I \nwas rightly joking about the microservices being  ",
    "start": "2042640",
    "end": "2053919"
  },
  {
    "text": "sort of a crutch because language modularization \nsystems aren't very good, but at the same time,  ",
    "start": "2055440",
    "end": "2062839"
  },
  {
    "text": "we have to break our systems up because different \nparts of our systems have different scalability   and failover needs. At that point, we were \nalready running a distributed system, so we  ",
    "start": "2062840",
    "end": "2073960"
  },
  {
    "text": "then repurpose it for modularization as well.\nI don't believe that, to be honest with you.  ",
    "start": "2073960",
    "end": "2083119"
  },
  {
    "text": "I mean, pushing back, I think we tell ourselves \nthat, but we can scale monoliths. We've had the  ",
    "start": "2083120",
    "end": "2093639"
  },
  {
    "text": "same code base and different bits of it can \nscale in different directions. If Facebook can  ",
    "start": "2093640",
    "end": "2102240"
  },
  {
    "text": "run a monolith, I'm sure that we can solve \nour problems with monoliths. The extent to  ",
    "start": "2102240",
    "end": "2108160"
  },
  {
    "text": "which we break things up, I think it largely is \nfashion. And probably there are places where we  ",
    "start": "2108160",
    "end": "2117599"
  },
  {
    "text": "should have queues and queue consumers, and \nmaybe they should be different processes. But   I think most of what we write should probably be \nsitting in one process that is then duplicated  ",
    "start": "2117600",
    "end": "2131840"
  },
  {
    "text": "and load-balanced effectively. But moving things \nbetween having different microservices in order  ",
    "start": "2131840",
    "end": "2139240"
  },
  {
    "text": "to have bounded context boundaries, yes, I don't \nbelieve in personally. Bring back the monolith. ",
    "start": "2139240",
    "end": "2151320"
  },
  {
    "text": "All right. We've sort of gone \noff on a bit of a tangent there.  One of the things I remember about those GOOS \ndays, as you say, is that we were, in fact,  ",
    "start": "2151320",
    "end": "2159640"
  },
  {
    "text": "developing interfaces for internal teams, largely, \nor simply for the desktop. And one of the places I  ",
    "start": "2159640",
    "end": "2171960"
  },
  {
    "text": "feel that we really haven't managed to make agile \nwork is with interaction designers. I feel that,  ",
    "start": "2171960",
    "end": "2181119"
  },
  {
    "text": "in those days, we were able to be agile because \nwe could sit with a customer, work out what they  ",
    "start": "2181880",
    "end": "2187039"
  },
  {
    "text": "wanted the thing to look like as part of, \n\"Are we going to do that this iteration?\"  ",
    "start": "2187040",
    "end": "2194160"
  },
  {
    "text": "Whereas interaction designers like things to be \ndesigned upfront. And that design upfront actually  ",
    "start": "2194160",
    "end": "2202599"
  },
  {
    "text": "is the tail that wags the agile dog these days.\nYes. I can understand there's a lot of research  ",
    "start": "2202600",
    "end": "2209720"
  },
  {
    "text": "that goes into it, especially if you've \ngot a site that has to meet the needs of  ",
    "start": "2209720",
    "end": "2215400"
  },
  {
    "text": "customers around the world. When you're just \nworking for, I don't know, like a trading desk  ",
    "start": "2215400",
    "end": "2221279"
  },
  {
    "text": "and you've got like four people that you're \nwriting software for, what they want goes,  ",
    "start": "2221280",
    "end": "2228520"
  },
  {
    "text": "right? But when you've got to be able to make your \nsoftware usable by people who you never even meet,  ",
    "start": "2228520",
    "end": "2236680"
  },
  {
    "text": "you rely very much on the research. But you're \nright. I mean, I've always struggled with being  ",
    "start": "2237600",
    "end": "2243600"
  },
  {
    "text": "able to work incrementally and iteratively \nwith designers, being able to say, \"Okay,  ",
    "start": "2243600",
    "end": "2250320"
  },
  {
    "text": "you know, I understand what the final design \nshould be like, but we're coming in like this.   So what's our first delivery and how can we get \nvalue, and then the next one, and the next one,  ",
    "start": "2250320",
    "end": "2257000"
  },
  {
    "text": "and the next one? And how does the design evolve \nso that it remains usable as it's going through  ",
    "start": "2257000",
    "end": "2262480"
  },
  {
    "text": "these intermediate states?\" That's difficult.\nOne of my biggest innovations recently has been  ",
    "start": "2262480",
    "end": "2267680"
  },
  {
    "text": "to take the interaction designers final \nmock-ups of the thing and say, \"Okay,  ",
    "start": "2267680",
    "end": "2273680"
  },
  {
    "text": "this iteration, we are going to produce this \nwith this scribbled out, this scribbled out,   and this scribbled out. And then the next one, \nwe'll undo some of the scribbling.\" Because  ",
    "start": "2274240",
    "end": "2283440"
  },
  {
    "text": "finding a way to deliver value in the next week \nis, I guess, really back to what GOOS was about.  ",
    "start": "2284160",
    "end": "2294839"
  },
  {
    "text": "The very first thing you should be doing is \nworking out how to deliver the system. And then   once you deliver the system, what is the smallest \nincrement of value we can give our customers? ",
    "start": "2297840",
    "end": "2306240"
  },
  {
    "text": "As you said about XP, it was how do we develop \nsoftware that we need ourselves? If I'm writing  ",
    "start": "2307120",
    "end": "2315280"
  },
  {
    "text": "software to format something for a book or total \nmy bank account or whatever it is, the thing that  ",
    "start": "2315280",
    "end": "2321520"
  },
  {
    "text": "I do is the smallest thing that will give me \nvalue. And if I need to write tests to think   that I will be able to maintain that, I'll do \nthat. If I don't need to write tests, you know,  ",
    "start": "2321520",
    "end": "2332000"
  },
  {
    "text": "tests have to be an economic argument. They have \nto support this thing going on. Often I'll write  ",
    "start": "2332720",
    "end": "2338359"
  },
  {
    "text": "them because otherwise if I come back to this \nlater, I won't be able to do it. But that constant  ",
    "start": "2338360",
    "end": "2345840"
  },
  {
    "text": "focus on, how can I give you value quicker whilst \nat the same time knowing that I'm going to be able  ",
    "start": "2345840",
    "end": "2351480"
  },
  {
    "text": "to continue to give you value quickly for the \nnext week and the next month and so on, that's  ",
    "start": "2351480",
    "end": "2358119"
  },
  {
    "text": "the essence of XP, it's the essence of Agile, \nand I think the essence of what GOOS gave us,  ",
    "start": "2358120",
    "end": "2363320"
  },
  {
    "text": "which was this guided by the tests. It was this \noutside-in thing, real focus on delivering to  ",
    "start": "2363320",
    "end": "2370120"
  },
  {
    "text": "the customer, not doing anything that wasn't \nfocused on delivering value to the customer. ",
    "start": "2370120",
    "end": "2377600"
  },
  {
    "text": "Yes. I think you're saying, are we doing it as \nfast as we used to? Has it got faster? I don't  ",
    "start": "2377600",
    "end": "2386200"
  },
  {
    "text": "think it has. But at the same time, I think part \nof it is, at the same time as Agile was happening,  ",
    "start": "2386200",
    "end": "2391880"
  },
  {
    "text": "open source was happening. Agile and XP focused \non continuous integration and then continuous  ",
    "start": "2391880",
    "end": "2398839"
  },
  {
    "text": "delivery, then continuous deployment. And open \nsource focused on sort of unsolicited changes,  ",
    "start": "2398840",
    "end": "2408920"
  },
  {
    "text": "review, and that ended up with sort of the pull \nrequest. And those two things are coming from  ",
    "start": "2408920",
    "end": "2419040"
  },
  {
    "text": "different cultures, different...I don't know \nif culture is the right word, but definitely  ",
    "start": "2419040",
    "end": "2424800"
  },
  {
    "text": "different traditions with different constraints \nand different needs. But we have somehow sort of   smashed them together where people in enterprise \norganizations are using pull requests in order to  ",
    "start": "2424800",
    "end": "2437920"
  },
  {
    "text": "sort of elaborate in a way that's less effective \nthan continuous integration was. And that's  ",
    "start": "2440280",
    "end": "2448280"
  },
  {
    "text": "the sort of constant argument I see going on.\nIt is amazing to me that trunk-based development  ",
    "start": "2448280",
    "end": "2455080"
  },
  {
    "text": "didn't have to be a phrase 15 years ago.\nYes.  Because what else was there?\nIt was just the way you did it.  ",
    "start": "2455080",
    "end": "2462000"
  },
  {
    "text": "You had ClearCase, right, which had branching \nall over the place and merge requests. And then  ",
    "start": "2464080",
    "end": "2471160"
  },
  {
    "text": "you had everyone else who didn't want to use \nClearCase because it was so difficult and just  ",
    "start": "2471160",
    "end": "2477880"
  },
  {
    "text": "did trunk-based development in Perforce and then \nSubversion and then whatever. And then now we're  ",
    "start": "2477880",
    "end": "2485359"
  },
  {
    "text": "all reinventing ClearCase on top of something \nthat doesn't need to be that complicated. ",
    "start": "2485360",
    "end": "2492080"
  },
  {
    "start": "2491000",
    "end": "2605000"
  },
  {
    "text": "Well, this has been two grumpy old men. I think \nmaybe we should... This would be a good place  ",
    "start": "2492080",
    "end": "2498680"
  },
  {
    "text": "to wrap it up before we get into a religious \nwar. Thank you so much for your time today,   Nat. If people want to find out more \nabout you, where should they look? ",
    "start": "2498680",
    "end": "2506960"
  },
  {
    "text": "I'm going to be at KotlinConf in May and Craft \nin May, end of May, June. So I'll be speaking  ",
    "start": "2509480",
    "end": "2520920"
  },
  {
    "text": "there and running a workshop on the topic \nof...well, with you, we will be running a  ",
    "start": "2520920",
    "end": "2528440"
  },
  {
    "text": "workshop on the topic of refactoring from OO to \nfunctional and looking at sort of how we do that  ",
    "start": "2528440",
    "end": "2538119"
  },
  {
    "text": "in very, you know, how people build software in \npractice, as well as your sort of GOOS-style OO. ",
    "start": "2538120",
    "end": "2547120"
  },
  {
    "text": "In the context of this, probably \ncharacterize that as teaching us   how to refactor from the OO style \nthat GOOS championed to, I suppose,  ",
    "start": "2549560",
    "end": "2557760"
  },
  {
    "text": "functional core imperative shell.\nWe'll be looking at like, you know,  ",
    "start": "2557760",
    "end": "2563360"
  },
  {
    "text": "popular frameworks and sort of the way that \nthey make heavy use of reflection and how we can  ",
    "start": "2563360",
    "end": "2569640"
  },
  {
    "text": "introduce better typing and things like that.\nWe'll arrange for details of that workshop,  ",
    "start": "2569640",
    "end": "2577119"
  },
  {
    "text": "how to buy GOOS, and the book that we wrote \ntogether, \"Java to Kotlin: A Refactoring   Guidebook,\" to be in the show notes, along with \na link to my YouTube channel, Pairing with Duncan  ",
    "start": "2577800",
    "end": "2586960"
  },
  {
    "text": "McGregor. Thank you for watching.\nThank you.",
    "start": "2586960",
    "end": "2604040"
  }
]