[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "[Music]",
    "start": "5870",
    "end": "10049"
  },
  {
    "text": "I don't usually introduce myself or my work very much before going straight into my presentations in this case I",
    "start": "11280",
    "end": "18000"
  },
  {
    "text": "feel that I I probably should slightly um I I I need to give you a little bit of background of where some of this",
    "start": "18000",
    "end": "23640"
  },
  {
    "text": "stuff comes from so um first of all I have a confession to make I'm not a functional programmer I'm a I'm a",
    "start": "23640",
    "end": "32879"
  },
  {
    "text": "I'm I'm I'm an old school programmer I I I I do object orientation and and I I",
    "start": "32879",
    "end": "38000"
  },
  {
    "text": "like lambdas and I do some of those sorts of things but I'm not a functional programmer so I'm not going to talk about algebra I'm not going to talk",
    "start": "38000",
    "end": "43920"
  },
  {
    "text": "about monads I'm not going to be talking about those sorts of things I I think there's separate concerns when we're",
    "start": "43920",
    "end": "49199"
  },
  {
    "text": "talking about this stuff and I I think often when we talk about reactive programming concerns get conflated the",
    "start": "49199",
    "end": "54480"
  },
  {
    "text": "reason that I think that I've got something to say on this topic as well as helping to edit the um reactive",
    "start": "54480",
    "end": "60519"
  },
  {
    "text": "Manifesto and making some contributions is uh is I worked on a on on one of those projects that kind of comes along",
    "start": "60519",
    "end": "67080"
  },
  {
    "text": "sort of once in your career um and this project was to build a low latency high",
    "start": "67080",
    "end": "72479"
  },
  {
    "text": "frequency trading exchange from blank sheet of paper at the time when we started writing this we didn't know how",
    "start": "72479",
    "end": "79840"
  },
  {
    "text": "to do it we hadn't got a clue and so we did lots of things in order to try and",
    "start": "79840",
    "end": "84880"
  },
  {
    "text": "learn what it was that we needed to do and part of what we evolved through our",
    "start": "84880",
    "end": "90560"
  },
  {
    "text": "uh experimental approach was uh I think what you describe as a microservice",
    "start": "90560",
    "end": "95960"
  },
  {
    "text": "reactive architecture but blisteringly high performance and I want to describe some of the reasons why that is and some",
    "start": "95960",
    "end": "103000"
  },
  {
    "text": "of the reasons how it works and I'm going to sort of talk at a reasonably high level um about some of this stuff so",
    "start": "103000",
    "end": "111280"
  },
  {
    "start": "108000",
    "end": "237000"
  },
  {
    "text": "there's not a lot there is no code in this presentation uh it's not detailed Tech it's kind of",
    "start": "111280",
    "end": "117119"
  },
  {
    "text": "detailed kind of at the computer sciency level Maybe but but there's not there's no maths either that I can think of so",
    "start": "117119",
    "end": "124600"
  },
  {
    "text": "so part of the reason why this stuff matters is because our world is changing and people keep saying this to you at",
    "start": "124600",
    "end": "131239"
  },
  {
    "text": "this conference I think but it's but it's true if you look at you know where we were just 10 years ago a typical",
    "start": "131239",
    "end": "138160"
  },
  {
    "text": "system was tens of servers maybe it had seconds of response time and hours for offline maintenance and probably dealt",
    "start": "138160",
    "end": "144920"
  },
  {
    "text": "in gigabytes of data that was a kind of normal sort of reasonably large Enterprise scale system in those days I",
    "start": "144920",
    "end": "152720"
  },
  {
    "text": "think now large applications now have",
    "start": "152720",
    "end": "157920"
  },
  {
    "text": "thousands of multicore processors uh milliseconds of response time or faster",
    "start": "157920",
    "end": "164840"
  },
  {
    "text": "100% up time and petabytes of data that's that's not unusual these",
    "start": "164840",
    "end": "171360"
  },
  {
    "text": "days if you just look at if you just look at memory um I'm not quite old",
    "start": "171360",
    "end": "176959"
  },
  {
    "text": "enough to have programmed ferite core memory but if but but um but I I I used",
    "start": "176959",
    "end": "183200"
  },
  {
    "text": "to have one of these and my wife threw it away I was I was really disappointed when she did but but this this is a fite",
    "start": "183200",
    "end": "188760"
  },
  {
    "text": "core memory unit each of these each of these little magnetic Rings is about 3 millimeters in diameter and each of",
    "start": "188760",
    "end": "195319"
  },
  {
    "text": "those represents a bit so so that block of things there is",
    "start": "195319",
    "end": "200959"
  },
  {
    "text": "eight bytes okay this is a an SD card micro SD",
    "start": "200959",
    "end": "207799"
  },
  {
    "text": "card that's 8 gigabytes so so that's kind of where we've come so so you know this is a bit longer than 10",
    "start": "207799",
    "end": "213959"
  },
  {
    "text": "years ago this is kind of 1970s technology these sorts of things were in use in use around around those sorts of",
    "start": "213959",
    "end": "219959"
  },
  {
    "text": "time um but we've come a very long way um this is this is another one this is just 10 years so this one is 128",
    "start": "219959",
    "end": "227959"
  },
  {
    "text": "megabytes this one is 128 gigabytes the game is",
    "start": "227959",
    "end": "236239"
  },
  {
    "text": "changing And the tagline for the reactive Manifesto is 21st century",
    "start": "236280",
    "end": "242120"
  },
  {
    "start": "237000",
    "end": "310000"
  },
  {
    "text": "problems and not best solved with 21st 20th century architectures if we're building ntier architectures backed by a",
    "start": "242120",
    "end": "248280"
  },
  {
    "text": "relational database that's not a really scalable option it's not as as yonas was saying",
    "start": "248280",
    "end": "253760"
  },
  {
    "text": "in his in his presentation that kicked off this track that's not how you build resilient systems it's not how you build",
    "start": "253760",
    "end": "259040"
  },
  {
    "text": "scalable systems it's not how you build systems that you can deploy to all of the time it's not how you build systems",
    "start": "259040",
    "end": "264479"
  },
  {
    "text": "that can be elastic and that can grow and can shrink so we came up we we we we",
    "start": "264479",
    "end": "270639"
  },
  {
    "text": "I was involved in the rewrite of the agile Manifesto many of the ideas were in place before then but but we came up with a way of talking about it and this",
    "start": "270639",
    "end": "276840"
  },
  {
    "text": "is part of what we were talking about so if we we want our systems to be responsive we want them to be able to",
    "start": "276840",
    "end": "282320"
  },
  {
    "text": "react to our to our users efficiently and quickly and in order to do that they need to be resilient they need to be",
    "start": "282320",
    "end": "288039"
  },
  {
    "text": "robust in the face of failure and continue delivering Services if we want them to be resilient we also need them",
    "start": "288039",
    "end": "293160"
  },
  {
    "text": "to be elastic to be able to stretch and move and and grow and Shrink to meet demand and we need me them to be",
    "start": "293160",
    "end": "299199"
  },
  {
    "text": "messaged driven to support all of those things that's the underlying substrate that allows us to do these other things",
    "start": "299199",
    "end": "305240"
  },
  {
    "text": "and I want to describe a little bit about why I think that's the case so first reactive systems so respon",
    "start": "305240",
    "end": "314720"
  },
  {
    "start": "310000",
    "end": "451000"
  },
  {
    "text": "a reactive system is responsive that means it responds in a to timely manner this is the Cornerstone of",
    "start": "314720",
    "end": "320199"
  },
  {
    "text": "reusability this is this is really what people mean when they say often when they say it's unusable you can have a",
    "start": "320199",
    "end": "325840"
  },
  {
    "text": "you can have poor usability in terms of a mental model of the the system underneath but if it reacts well it will",
    "start": "325840",
    "end": "331960"
  },
  {
    "text": "get a better response than something that's got good usability and reacts badly it's also quick to detect problems",
    "start": "331960",
    "end": "338520"
  },
  {
    "text": "we want to be able to understand when something's going wrong and and be in a position to do something about",
    "start": "338520",
    "end": "345160"
  },
  {
    "text": "that we need them to be resilient we want them to be responsive in the face of failure uh we've got the obligatory",
    "start": "345160",
    "end": "352080"
  },
  {
    "text": "micros uh Monti python uh illusion here um we want them to be responsive in the",
    "start": "352080",
    "end": "358800"
  },
  {
    "text": "in the face of failure resilience depends on on replication containment and isolation and delegation in order to",
    "start": "358800",
    "end": "365440"
  },
  {
    "text": "make sure that we're we're able to contain failures and you know de gracefully degr degrade the behavior of",
    "start": "365440",
    "end": "372880"
  },
  {
    "text": "our system in order to meet demand and to be responsive elasticity is important and",
    "start": "372880",
    "end": "379720"
  },
  {
    "text": "it's it's kind of growing growingly important in in the the world of the cloud where you know if you're using",
    "start": "379720",
    "end": "385639"
  },
  {
    "text": "Amazon ec2 and you just kind of provision all your service and you just leave them all running you're going to get a very big Bill at the end of the",
    "start": "385639",
    "end": "391880"
  },
  {
    "text": "month you want them to scale down as well as up you want you want to have the right number of the right amount of",
    "start": "391880",
    "end": "397560"
  },
  {
    "text": "compute to service the needs of your system and to do that we need to have a",
    "start": "397560",
    "end": "403039"
  },
  {
    "text": "decentralized architecture with no contention points we need to be able to P push Behavior out and Shard it in",
    "start": "403039",
    "end": "409479"
  },
  {
    "text": "different ways and asynchronous message passing is",
    "start": "409479",
    "end": "415960"
  },
  {
    "text": "is the foundation of this approach of all of these properties and that's what gives us the loose coupling the",
    "start": "415960",
    "end": "422199"
  },
  {
    "text": "isolation and location transparency that allows us to do these other things if you go away from this presentation with",
    "start": "422199",
    "end": "429800"
  },
  {
    "text": "one idea in your head I want you to go away with the idea I want you to go away",
    "start": "429800",
    "end": "434919"
  },
  {
    "text": "with two ideas in your head not one the first one is that asynchronous messaging",
    "start": "434919",
    "end": "442160"
  },
  {
    "text": "is the answer to many of our problems in Computing and the second one is it's not as scary as it sounds",
    "start": "442160",
    "end": "449560"
  },
  {
    "text": "so so what are the properties of a reactive system so they're flexible we can compose them in different ways",
    "start": "450360",
    "end": "456919"
  },
  {
    "start": "451000",
    "end": "506000"
  },
  {
    "text": "they're Loosely coupled they they're not tightly bound to one another so parts of the system can evolve at different rates",
    "start": "456919",
    "end": "462240"
  },
  {
    "text": "to other parts of the system they're scalable we can increase uh provision of service by",
    "start": "462240",
    "end": "469759"
  },
  {
    "text": "adding new uh comp compute nodes new Ser new new versions of the service they're",
    "start": "469759",
    "end": "475800"
  },
  {
    "text": "easier to develop and I think that you might doubt me on that one but I'm hoping that by",
    "start": "475800",
    "end": "481720"
  },
  {
    "text": "the end of the presentation you won't I I'm hoping I'm going to demonstrate some of the reasons why I believe that to be the truth the truth they're more",
    "start": "481720",
    "end": "488159"
  },
  {
    "text": "tolerant of failure because we can they're asynchronous and so we're not coupled in time so something can go down and we can respond to it later when it",
    "start": "488159",
    "end": "494639"
  },
  {
    "text": "comes back up as long as we get the messages and all that kind of stuff they respond to failure gracefully",
    "start": "494639",
    "end": "500639"
  },
  {
    "text": "and they're responsive to users they that's that's one of those four principles that we're aiming",
    "start": "500639",
    "end": "506639"
  },
  {
    "start": "506000",
    "end": "676000"
  },
  {
    "text": "for the weird thing about this is is is is is it's kind of fractal in in in in",
    "start": "506639",
    "end": "511680"
  },
  {
    "text": "architecture this these ideas operate at all",
    "start": "511680",
    "end": "517000"
  },
  {
    "text": "scales I I was recently attending um a course on um lock free",
    "start": "517000",
    "end": "524839"
  },
  {
    "text": "low latency programming run by Martin Thompson my friend that we were talking about earlier and um one of the things",
    "start": "524839",
    "end": "532200"
  },
  {
    "text": "that he that he was describing was the way in which modern processes inside them are message driven",
    "start": "532200",
    "end": "540440"
  },
  {
    "text": "um asynchronous Computing units each of the cores are connected by a bus and they pass messages between between one",
    "start": "540440",
    "end": "546279"
  },
  {
    "text": "another to get the memory into cache so at the level of the Silicon on which our code operates the way in which the code",
    "start": "546279",
    "end": "553360"
  },
  {
    "text": "our code is decomposed into parallel execution paths by the by the",
    "start": "553360",
    "end": "559839"
  },
  {
    "text": "processor that's a reactive system it's a it's a message driven asynchronous",
    "start": "559839",
    "end": "565720"
  },
  {
    "text": "system but it also scales to the largest this is the way that Netflix works and Facebook scales and",
    "start": "565720",
    "end": "573040"
  },
  {
    "text": "those sorts of things are built this way because this is what you need to do when you've got the sorts of levels of demand that we''re been talking about the the",
    "start": "573040",
    "end": "579920"
  },
  {
    "text": "the levels of data processing and CPU",
    "start": "579920",
    "end": "584360"
  },
  {
    "text": "account the large systems are composed of these smaller reactive components what that doesn't mean that we've got to",
    "start": "585440",
    "end": "591600"
  },
  {
    "text": "be doing very weird programming Styles at every level of granularity and I'll talk more about that",
    "start": "591600",
    "end": "598120"
  },
  {
    "text": "later um it's one of the things where I think I think the conversation gets confused",
    "start": "598120",
    "end": "604640"
  },
  {
    "text": "when we confuse the the conversation about reactive systems and functional programming there is some crossover",
    "start": "604640",
    "end": "610279"
  },
  {
    "text": "because we're both talking about the use of often talking about um the use of",
    "start": "610279",
    "end": "615839"
  },
  {
    "text": "asynchrony when you're talking about um reactive uh functional architectures and",
    "start": "615839",
    "end": "622320"
  },
  {
    "text": "reactive systems but they're not necessarily the same thing you can do one you can do one without the other",
    "start": "622320",
    "end": "630199"
  },
  {
    "text": "so I'm going to go through various pictures like this and just try and decompose this a bit so first I want to",
    "start": "632440",
    "end": "639000"
  },
  {
    "text": "talk about synchronous messaging now if you look at the world I think it's pretty much hard to",
    "start": "639000",
    "end": "646399"
  },
  {
    "text": "refute that the world's pretty much asynchronous and we programmers have kind of layered um synchronous thinking",
    "start": "646399",
    "end": "653680"
  },
  {
    "text": "on top of the world uh because it's easier for us to reason about it's it's easy it's much easier for us to think",
    "start": "653680",
    "end": "659320"
  },
  {
    "text": "think about um I want I want to I want to add add to my account balance so I'm",
    "start": "659320",
    "end": "664360"
  },
  {
    "text": "going to tell it what how much I want to add and then it's going to tell me that it's added it that's that's easy to",
    "start": "664360",
    "end": "671040"
  },
  {
    "text": "understand it's simple and my program stops and waits for that response to come back but there are problems with that model so let's imagine we've got",
    "start": "671040",
    "end": "678399"
  },
  {
    "start": "676000",
    "end": "810000"
  },
  {
    "text": "these two components and component a is invoked with some behavior and it it delegates part of that behavior to",
    "start": "678399",
    "end": "684800"
  },
  {
    "text": "component B so if we're talking a synchronous model now then there are a number of places where this conversation",
    "start": "684800",
    "end": "691440"
  },
  {
    "text": "can go wrong so there might be a bug in component a there might be a problem establishing",
    "start": "691440",
    "end": "697839"
  },
  {
    "text": "the connection to the communication channel to commun to component B we might get a loss in transmission as the",
    "start": "697839",
    "end": "705399"
  },
  {
    "text": "message goes between components a and component B there might have been a problem with component B connecting to",
    "start": "705399",
    "end": "711639"
  },
  {
    "text": "the communication Channel at its end there might be a bugging component B and we've got the same set of problems on",
    "start": "711639",
    "end": "719399"
  },
  {
    "text": "the way back too now in any distributed system we have all of these problems so if we're making a synchronous call we",
    "start": "719399",
    "end": "725560"
  },
  {
    "text": "have all of these problems now there's there's a difficulty with this with with with synchronicity because from the perspective of component",
    "start": "725560",
    "end": "732320"
  },
  {
    "text": "a it can only know whe it can only know if there's a failure of its own or if it can't establish a connection everything",
    "start": "732320",
    "end": "738480"
  },
  {
    "text": "else it can't tell the difference every if it doesn't get a response it doesn't know whether component B was broken",
    "start": "738480",
    "end": "744560"
  },
  {
    "text": "whether the the message was lost and so it's got all of these error cases to cope with",
    "start": "744560",
    "end": "751160"
  },
  {
    "text": "worse than that we're in the same situation and",
    "start": "751440",
    "end": "758560"
  },
  {
    "text": "component a is doing some processing it delegates the component B it's now got to wait for component B to finish before",
    "start": "758560",
    "end": "763959"
  },
  {
    "text": "it can do any more processing only after component B is done can components a continue",
    "start": "763959",
    "end": "770560"
  },
  {
    "text": "processing that's kind of the definition of a synchronous core right the way that we get so when we're",
    "start": "770560",
    "end": "777199"
  },
  {
    "text": "Building multi-user Systems what we the way that we get around that is that we start to think oh well we can't have it",
    "start": "777199",
    "end": "782920"
  },
  {
    "text": "block on just one thread so we'll have to go multi-threaded right so now we've got lots of problems so now we've added",
    "start": "782920",
    "end": "788399"
  },
  {
    "text": "complexity to our implementation of component a we've got we've got to worry about all the problems of multi-threading contention avoiding",
    "start": "788399",
    "end": "795720"
  },
  {
    "text": "shared State uh concurrent programming it's one of the diff most difficult things that we do in our in our industry",
    "start": "795720",
    "end": "802720"
  },
  {
    "text": "and we have to do all of that just to get around the problem of because one of these threads is waiting for an answer",
    "start": "802720",
    "end": "808560"
  },
  {
    "text": "back from comp component B synchronous communication increases",
    "start": "808560",
    "end": "814320"
  },
  {
    "start": "810000",
    "end": "951000"
  },
  {
    "text": "the coupling in both location and time between the components it makes it more difficult for us to scale and it makes",
    "start": "814320",
    "end": "820880"
  },
  {
    "text": "us more exposed to more failure",
    "start": "820880",
    "end": "826000"
  },
  {
    "text": "cases let's do the same experiment and think about what it looks like with the same me um thought experiment and think",
    "start": "826000",
    "end": "832839"
  },
  {
    "text": "about what it looks like with asynchronous messaging so now we got the same situation there's some Behavior that's been asynchronously invoked on",
    "start": "832839",
    "end": "839320"
  },
  {
    "text": "component a and a is going to oh I'm sorry I'm getting ahead of myself this is still a synchronous case",
    "start": "839320",
    "end": "846079"
  },
  {
    "text": "so this is a synchronous case where component B is now delegating to something else in this case it's talking to a database and we've got additional",
    "start": "846079",
    "end": "852800"
  },
  {
    "text": "failure modes which are also hidden from component a and we've just compounded the problem in terms of the failures",
    "start": "852800",
    "end": "858320"
  },
  {
    "text": "that we got to express back and get back to component a so component a is even more at risk Now worse than that if",
    "start": "858320",
    "end": "866399"
  },
  {
    "text": "there was a failure in the channel on the way back what states the data in we don't know it's indeterminate and so we",
    "start": "866399",
    "end": "873120"
  },
  {
    "text": "got a code for all of those error cases if that's if that's if that's our world so let's talk about asynchronous now",
    "start": "873120",
    "end": "879320"
  },
  {
    "text": "asynchronous case now so component a um is invoked it delegates a an",
    "start": "879320",
    "end": "886480"
  },
  {
    "text": "asynchronous core to component B it's done it can carry on processing messages it can process a new incoming core or it",
    "start": "886480",
    "end": "893279"
  },
  {
    "text": "can wait for a response it's not got anything it's not got anything else so where can this component be be sometimes",
    "start": "893279",
    "end": "899519"
  },
  {
    "text": "later sends a message back to component a so where can this break it can break in all of the same",
    "start": "899519",
    "end": "906120"
  },
  {
    "text": "places except the only two that matter are those two and those are the two that",
    "start": "906120",
    "end": "911800"
  },
  {
    "text": "component a can know about it can know whether it's got a connection to the to the communications Channel it can know whether it's got a bug itself the rest",
    "start": "911800",
    "end": "918880"
  },
  {
    "text": "as long as as long as the messaging service whatever the communication protocol whatever you're using will",
    "start": "918880",
    "end": "925040"
  },
  {
    "text": "deliver the message eventually it doesn't care because it sent the message it's going to get there eventually it doesn't matter when because it's",
    "start": "925040",
    "end": "930959"
  },
  {
    "text": "asynchronous it's not blocked it's not waiting for anything else so all of those other failure",
    "start": "930959",
    "end": "936399"
  },
  {
    "text": "conditions component a doesn't have to worry about we don't have to code for those error cases we don't have to worry about whether the database is in a in an",
    "start": "936399",
    "end": "942759"
  },
  {
    "text": "invalid state or not our code gets",
    "start": "942759",
    "end": "947240"
  },
  {
    "text": "simpler it also means it can be single threaded so it gets even simpler we can write these things efficiently that just",
    "start": "949000",
    "end": "955120"
  },
  {
    "start": "951000",
    "end": "1172000"
  },
  {
    "text": "process messages they just flow through the messages flow through our system we take an input we process it we generate",
    "start": "955120",
    "end": "960920"
  },
  {
    "text": "an output and we move on to the next thing whether that's a new input or a response from a from from an output",
    "start": "960920",
    "end": "967079"
  },
  {
    "text": "they're all just messages coming in and we all just process those messages on a single thread this goes blisteringly",
    "start": "967079",
    "end": "972800"
  },
  {
    "text": "fast this is aligned with the way in which processes are architected these days this this means that your caches",
    "start": "972800",
    "end": "979240"
  },
  {
    "text": "are likely to be more coherent it means that um it means that you're not going to get contention you're not you're",
    "start": "979240",
    "end": "985480"
  },
  {
    "text": "never going to get shared State all of these things if you do this efficient",
    "start": "985480",
    "end": "990920"
  },
  {
    "text": "ly so let's talk a slightly more concrete example because I know these abstract things can be hard to work out",
    "start": "991600",
    "end": "998759"
  },
  {
    "text": "and forgive me for being a bit cheesy but I'm going to buy a copy of my book so let's imagine that we've got a",
    "start": "998759",
    "end": "1005639"
  },
  {
    "text": "bookstore and somebody places an order for the book continuous delivery okay in the synchronous case",
    "start": "1005639",
    "end": "1013360"
  },
  {
    "text": "and we we're going to need to go to the inventory to to to reserve that copy of",
    "start": "1013360",
    "end": "1018399"
  },
  {
    "text": "continuous deliveries this sort of stock control kind of idea so in this case in a synchronous case at the point at which",
    "start": "1018399",
    "end": "1025319"
  },
  {
    "text": "the order is placed we've got to stop that thread and we've just got to wait until the book's reserved what if it's",
    "start": "1025319",
    "end": "1031000"
  },
  {
    "text": "out of stock what if it's what if the systems down what if it's never heard of",
    "start": "1031000",
    "end": "1036438"
  },
  {
    "text": "that book all of those cases you've got to cope with if in the synchronous case",
    "start": "1036439",
    "end": "1042959"
  },
  {
    "text": "somehow now let's imagine the asynchronous version of that same conversation so we're going to order",
    "start": "1042959",
    "end": "1048880"
  },
  {
    "text": "continuous delivery and we're going to ask for the inventory to reserve us a copy sometime later we'll get a message",
    "start": "1048880",
    "end": "1056600"
  },
  {
    "text": "back saying that the copy's been ordered and we can pass that message back up the chain with to the user ultimately to say",
    "start": "1056600",
    "end": "1063240"
  },
  {
    "text": "that the book's been ordered this kind of turns into if you imagine the code in these in these",
    "start": "1063240",
    "end": "1069280"
  },
  {
    "text": "things what you end up with is kind of some some relatively straightforward State machines that just manage the",
    "start": "1069280",
    "end": "1076120"
  },
  {
    "text": "state through the flow of messages as as the conversation goes on what I like",
    "start": "1076120",
    "end": "1082000"
  },
  {
    "text": "about this too is that the implementation of these things tend to start to look like that ideal kind of",
    "start": "1082000",
    "end": "1089120"
  },
  {
    "text": "pure domain model I'm a big fan of domain driven design and this is the closest that I've ever got to really",
    "start": "1089120",
    "end": "1095760"
  },
  {
    "text": "implementing that software simulation of your problem domain inside each of these Services which is very nice to reason",
    "start": "1095760",
    "end": "1102000"
  },
  {
    "text": "about easy to test all of those good properties so let's imagine let's just walk through this case once more so now",
    "start": "1102000",
    "end": "1108320"
  },
  {
    "text": "we're placing an order and we got we've got a model of our book in our domain model and it's in the state of reserving",
    "start": "1108320",
    "end": "1115039"
  },
  {
    "text": "because we've sent the reserve message maybe that's down maybe it's broken maybe it's out of stock we don't",
    "start": "1115039",
    "end": "1120919"
  },
  {
    "text": "care we're in a we're in a valid State and we don't there's nothing more to do right now maybe there's a maybe there's",
    "start": "1120919",
    "end": "1127960"
  },
  {
    "text": "an order for another book in this case I'm ordering better aerobatics which I was expecting you to",
    "start": "1127960",
    "end": "1134120"
  },
  {
    "text": "be a bit more cryptic given Jonas's introduction so that's also in the deserving State inventory doesn't even",
    "start": "1134120",
    "end": "1141480"
  },
  {
    "text": "have to be working it can be broken or it could be just just slow we don't care",
    "start": "1141480",
    "end": "1147280"
  },
  {
    "text": "sometime later it could be Nan seconds or it could be days we're going to get a",
    "start": "1147280",
    "end": "1152919"
  },
  {
    "text": "message back from the inventory and we've changed the state of our book saying that the book's now being ordered this is in a consist this is in a",
    "start": "1152919",
    "end": "1159280"
  },
  {
    "text": "consistent P this has a consistent view of the world it's in a known good State it's simple code simple message",
    "start": "1159280",
    "end": "1165480"
  },
  {
    "text": "exchanges are allowing us to do this",
    "start": "1165480",
    "end": "1170400"
  },
  {
    "text": "of course the trick as people that talk about these sorts of architectures will always say is getting the protocols",
    "start": "1170640",
    "end": "1177000"
  },
  {
    "start": "1172000",
    "end": "1368000"
  },
  {
    "text": "right and getting the level of abstractions right I want to dive just a little bit",
    "start": "1177000",
    "end": "1183240"
  },
  {
    "text": "under the covers to just kind of reassure you so so this all sounds nice and easy you've got these things in",
    "start": "1183240",
    "end": "1189720"
  },
  {
    "text": "memory just processing these messages and passing on but what about when you turn the power off what about if",
    "start": "1189720",
    "end": "1195000"
  },
  {
    "text": "something does fail how do you give give the reliability now the system that I worked on because of the very low",
    "start": "1195000",
    "end": "1201039"
  },
  {
    "text": "latency and high performance demands we built our own message reliable messaging system and I'm just going to describe a",
    "start": "1201039",
    "end": "1206440"
  },
  {
    "text": "little bit about it because I think it's useful to understand the properties behind the sort of architectures that I'm",
    "start": "1206440",
    "end": "1212159"
  },
  {
    "text": "describing I hope that you wouldn't have to implement this sort of stuff yourself in order to make this work because you",
    "start": "1212159",
    "end": "1217440"
  },
  {
    "text": "ought to be able to get this out of a box but um but for now I just want to describe what's going on so here's our",
    "start": "1217440",
    "end": "1223200"
  },
  {
    "text": "component again and our component is fronted by a ring buffer and it's got a ring buffer on the",
    "start": "1223200",
    "end": "1229480"
  },
  {
    "text": "outside on the outbound Channel too the ring buffer has a cursor and and a",
    "start": "1229480",
    "end": "1234840"
  },
  {
    "text": "series of slots so when component a sends a message it's going to populate",
    "start": "1234840",
    "end": "1240320"
  },
  {
    "text": "one of the slots and it's going to move the cursor on to the next",
    "start": "1240320",
    "end": "1245679"
  },
  {
    "text": "slot as so at some point when the thread becomes free or whatever the separate thread",
    "start": "1246000",
    "end": "1252679"
  },
  {
    "text": "that's SE independent from from here so this is I said we avoided concurrent",
    "start": "1252679",
    "end": "1258120"
  },
  {
    "text": "programming we avoid it by P pushing some of those concerns down into the infrastructure a little",
    "start": "1258120",
    "end": "1263960"
  },
  {
    "text": "bit at some point we decide to forward that message on to component B that's",
    "start": "1263960",
    "end": "1270320"
  },
  {
    "text": "going to be placed into the input slot for component B now when we designed this system one",
    "start": "1270320",
    "end": "1278039"
  },
  {
    "text": "of the reasons that we did it was because we wanted to be able to journal these things and cluster them so we could we could as part of the mechanism",
    "start": "1278039",
    "end": "1285159"
  },
  {
    "text": "behind this we would write write these messages to and we would write them to a cluster pair before they were forwarded",
    "start": "1285159",
    "end": "1291720"
  },
  {
    "text": "to component B so this this meant that we had a durable system we had a system that was",
    "start": "1291720",
    "end": "1297960"
  },
  {
    "text": "capable of fault tolerance let's put some more messages",
    "start": "1297960",
    "end": "1303080"
  },
  {
    "text": "into the queue now we've got a case where we've",
    "start": "1303080",
    "end": "1309360"
  },
  {
    "text": "lost a message in transmission we've sent message for this wasn't expecting message for it was expecting message",
    "start": "1309360",
    "end": "1315320"
  },
  {
    "text": "three so it says no that's the wrong message so I'm going to send back a knack saying I expected message three",
    "start": "1315320",
    "end": "1321720"
  },
  {
    "text": "so this one resets its cursor and then resent it can be populating more",
    "start": "1321720",
    "end": "1327320"
  },
  {
    "text": "messages into the buffer but next time it sends it's going to resend three four and five this way we get ID and potent",
    "start": "1327320",
    "end": "1333520"
  },
  {
    "text": "messaging we get reliable messaging we get the ability to Cluster and stuff as an infrastructural concern it's outside",
    "start": "1333520",
    "end": "1339200"
  },
  {
    "text": "of the the business logic of our component that's not a concern that we have to worry about so we all of these",
    "start": "1339200",
    "end": "1344400"
  },
  {
    "text": "nice properties we the system that we built was essentially uh um essentially",
    "start": "1344400",
    "end": "1350000"
  },
  {
    "text": "a kind of application server we could write a plain old Java object we could write um inprocess tests against it and",
    "start": "1350000",
    "end": "1356919"
  },
  {
    "text": "we could expose it as a service using the this these mechanisms to allow us to communicate between the services and",
    "start": "1356919",
    "end": "1363080"
  },
  {
    "text": "give us these properties that allowed us to build this these asynchronous reactive",
    "start": "1363080",
    "end": "1368679"
  },
  {
    "start": "1368000",
    "end": "1475000"
  },
  {
    "text": "systems this sort of this sort of ability kind of allows us to decouple",
    "start": "1369799",
    "end": "1375039"
  },
  {
    "text": "the our components both in time and space we don't care where they are we can be broadcasting messages uh the",
    "start": "1375039",
    "end": "1381760"
  },
  {
    "text": "location doesn't really matter and we don't care when they respond because we're asynchronous they will respond at",
    "start": "1381760",
    "end": "1388640"
  },
  {
    "text": "a time that's convenient maybe they're down at the point at which we send the message doesn't matter maybe they're there and they respond in micros seconds",
    "start": "1388640",
    "end": "1395679"
  },
  {
    "text": "doesn't matter we'll just respond we'll just have a message like any other message come in when uh in",
    "start": "1395679",
    "end": "1403159"
  },
  {
    "text": "response this is one of the Key properties that gives us the ability to to make elastic systems to be able to",
    "start": "1403159",
    "end": "1409400"
  },
  {
    "text": "scale them up and scale them down we can have observers of our system looking at what's going on and decide this this",
    "start": "1409400",
    "end": "1417559"
  },
  {
    "text": "one's doing quite a lot of work we need more versions of that in order to to share out the work",
    "start": "1417559",
    "end": "1423919"
  },
  {
    "text": "differently part of part of this isolation it's important to be able to for these components to share nothing",
    "start": "1423919",
    "end": "1430520"
  },
  {
    "text": "the only mechan means of exchange of information between them is via the messaging channels that's again what",
    "start": "1430520",
    "end": "1436480"
  },
  {
    "text": "gives us this resilience and elastic",
    "start": "1436480",
    "end": "1440440"
  },
  {
    "text": "icity so let's talk a little bit about isolation so this is kind of a classic",
    "start": "1442240",
    "end": "1449200"
  },
  {
    "text": "pattern you have two components and you share a database and now now we don't",
    "start": "1449200",
    "end": "1454480"
  },
  {
    "text": "have that isolation now we've got a point of fail contention potentially point of failure we've got to code",
    "start": "1454480",
    "end": "1460039"
  },
  {
    "text": "things in a way to make sure that this is efficient we can't upgrade these things independently and so this isn't a",
    "start": "1460039",
    "end": "1465880"
  },
  {
    "text": "good pattern this isn't a good way of building distri Ed systems that have the properties that we're looking for what",
    "start": "1465880",
    "end": "1471919"
  },
  {
    "text": "we really want is that we want to separate these concerns we want to be able to if this thing needs a database",
    "start": "1471919",
    "end": "1477320"
  },
  {
    "start": "1475000",
    "end": "1568000"
  },
  {
    "text": "and that thing needs a database give them a database but they're their own databases they can be within the bands",
    "start": "1477320",
    "end": "1483760"
  },
  {
    "text": "of the component the service that's its business for how that works if one of",
    "start": "1483760",
    "end": "1489399"
  },
  {
    "text": "them needs an object database and the other one's a a relational database that's fine that's not a",
    "start": "1489399",
    "end": "1495919"
  },
  {
    "text": "problem so we need to we need to firm these boundaries and make sure that the only means of exchange of information is",
    "start": "1495919",
    "end": "1501720"
  },
  {
    "text": "via the messaging system if if this if we're if we're going to retain the properties of location and temporal",
    "start": "1501720",
    "end": "1507880"
  },
  {
    "text": "transparency that we're talking",
    "start": "1507880",
    "end": "1511440"
  },
  {
    "text": "about you can't isolate stress ultimately if A System's under stress",
    "start": "1513200",
    "end": "1518919"
  },
  {
    "text": "it's going to show somewhere it's going you know as things go wrong it's going to it's it's going to come out somewhere",
    "start": "1518919",
    "end": "1525279"
  },
  {
    "text": "along the line so the system as a whole pole needs to respond when it's under under stress it's unacceptable for a",
    "start": "1525279",
    "end": "1532679"
  },
  {
    "text": "stress stress component to fail catastrophically and lose lose information that's important to the rest",
    "start": "1532679",
    "end": "1539200"
  },
  {
    "text": "of the system so we need that th those sorts of failures to be isolated the example that I gave of the reliable",
    "start": "1539200",
    "end": "1544799"
  },
  {
    "text": "messaging system is one means to provide some level of that of isolation so that you can kind of Replay messages that",
    "start": "1544799",
    "end": "1551320"
  },
  {
    "text": "happened earlier the other point that's kind",
    "start": "1551320",
    "end": "1556360"
  },
  {
    "text": "of it it surprising me the first time I learned this but Q's represent an unstable unstable",
    "start": "1556360",
    "end": "1562679"
  },
  {
    "text": "State and I'm going to show that in a moment so we need to we need we need the",
    "start": "1562679",
    "end": "1569120"
  },
  {
    "start": "1568000",
    "end": "1667000"
  },
  {
    "text": "idea of back pressure really to to resolve this so let's first look at the",
    "start": "1569120",
    "end": "1574360"
  },
  {
    "text": "cues so let's imagine we've got components a and component B again and let's imagine that component a is",
    "start": "1574360",
    "end": "1580840"
  },
  {
    "text": "slightly slower and component B is slightly faster in this situation",
    "start": "1580840",
    "end": "1588559"
  },
  {
    "text": "The Q's always empty now let's imagine the reverse of",
    "start": "1588559",
    "end": "1595120"
  },
  {
    "text": "that so let's imagine that component a is slightly faster and component B is slightly slower so apart from the start",
    "start": "1595120",
    "end": "1602799"
  },
  {
    "text": "the initialization of the thing then the Q is always going to be",
    "start": "1602799",
    "end": "1608640"
  },
  {
    "text": "full the if so a balanced load in the que is an unstable State it's kind of on",
    "start": "1608640",
    "end": "1614960"
  },
  {
    "text": "a KN knife edge that can only occur when both of these are are perfectly in step",
    "start": "1614960",
    "end": "1620279"
  },
  {
    "text": "in terms of the rate at which they're processing things and that's just not that's just not a stable condition that's not a normal condition this is",
    "start": "1620279",
    "end": "1626880"
  },
  {
    "text": "this is a a problem what happens to component a now well for most of us what happens uh",
    "start": "1626880",
    "end": "1634760"
  },
  {
    "text": "at this point is not good what usually happens is that",
    "start": "1634760",
    "end": "1641559"
  },
  {
    "text": "components a Falls over maybe if we're doing well we we our logging system lets",
    "start": "1641559",
    "end": "1647720"
  },
  {
    "text": "our oper ation team know and they all kind of set off alarm bells and start running around trying to figure out what",
    "start": "1647720",
    "end": "1653520"
  },
  {
    "text": "to do next that's not that's not a resilient",
    "start": "1653520",
    "end": "1658559"
  },
  {
    "text": "system that we need to react differently what we need to do is that we've got to pass the problem back up",
    "start": "1658559",
    "end": "1665320"
  },
  {
    "text": "the line there's nothing else we can do we can either fall over or we can say we",
    "start": "1665320",
    "end": "1670760"
  },
  {
    "start": "1667000",
    "end": "1717000"
  },
  {
    "text": "can't do any more work at the moment so we need to apply back pressure and that back pressure needs to go all",
    "start": "1670760",
    "end": "1676640"
  },
  {
    "text": "the way back up the line Al Ely that probably means to the user you've got to find a way of slowing down the user",
    "start": "1676640",
    "end": "1681760"
  },
  {
    "text": "there are all sorts of different ways of applying back pressure I came across a lovely one recently which is start doing",
    "start": "1681760",
    "end": "1688360"
  },
  {
    "text": "work on the thread that that's coming in with the messages and then you're consuming the resource of the thing that",
    "start": "1688360",
    "end": "1694440"
  },
  {
    "text": "can can send you messages to do to do the work and other you're starving out the the supplier but you can build in",
    "start": "1694440",
    "end": "1701320"
  },
  {
    "text": "protocols that pass the back pressure up and start you know giving an exception if or you know",
    "start": "1701320",
    "end": "1708799"
  },
  {
    "text": "shouting a problem in some manner at the point at which you're trying to send Communications because the because the",
    "start": "1708799",
    "end": "1714240"
  },
  {
    "text": "the system's under stress one of the ideas that's often",
    "start": "1714240",
    "end": "1719840"
  },
  {
    "start": "1717000",
    "end": "1847000"
  },
  {
    "text": "talked about in these sorts of distributed systems is the idea of eventual consistency and it makes people",
    "start": "1719840",
    "end": "1728320"
  },
  {
    "text": "nervous and it's kind of understandable and I think I think there's a key idea",
    "start": "1728320",
    "end": "1733399"
  },
  {
    "text": "that's often missed when we talk about it so let's let's let's imagine we have",
    "start": "1733399",
    "end": "1739760"
  },
  {
    "text": "a user and they've got they've got a view of the system and they've got a view of components a and component B usually",
    "start": "1739760",
    "end": "1748240"
  },
  {
    "text": "component B is going to producing a slightly different reflection of the world and that's going to be reflected somewhere in the user interface these",
    "start": "1748240",
    "end": "1754320"
  },
  {
    "text": "could be on the same same user interface they're just kind of different aspects of the system okay and the user makes a",
    "start": "1754320",
    "end": "1761200"
  },
  {
    "text": "change in one place and that's communicated component B now at this point",
    "start": "1761200",
    "end": "1768679"
  },
  {
    "text": "there's a there's a there's a a difference in the in the in the",
    "start": "1768679",
    "end": "1774679"
  },
  {
    "text": "perception of the state that different parts of the system in now that makes a problem only if",
    "start": "1774679",
    "end": "1782760"
  },
  {
    "text": "um your separation of concerns allows it to make a problem so let's imagine now",
    "start": "1782760",
    "end": "1788120"
  },
  {
    "text": "that what we're talking about is uh let's say it's the Amazon bookstore okay",
    "start": "1788120",
    "end": "1793440"
  },
  {
    "text": "so this is your this is your basket your your shopping basket it and this is your",
    "start": "1793440",
    "end": "1799799"
  },
  {
    "text": "order history does it matter that they're slightly out of date in that context I think it doesn't it doesn't",
    "start": "1799799",
    "end": "1806640"
  },
  {
    "text": "matter if we have to wait till sometime later for that change to get picked up and reflected in another part of the",
    "start": "1806640",
    "end": "1813600"
  },
  {
    "text": "system as long as the boundaries of your your design are are are kind of within",
    "start": "1813600",
    "end": "1820120"
  },
  {
    "text": "appropriate bounded context that separate their concerns appropriately then eventual consistency doesn't matter",
    "start": "1820120",
    "end": "1827440"
  },
  {
    "text": "it's it's a rare occasion when it does and I think that's an important part of the design of software systems is to",
    "start": "1827440",
    "end": "1833919"
  },
  {
    "text": "identify the bounded context and make sure that the state stable within the banded context and that that banded",
    "start": "1833919",
    "end": "1839679"
  },
  {
    "text": "context makes sense in a business context it's an important part of the design of these sorts of",
    "start": "1839679",
    "end": "1845679"
  },
  {
    "start": "1847000",
    "end": "1978000"
  },
  {
    "text": "systems we talked a we've talked a little bit about it uh location transparency but elastic systems need to",
    "start": "1848600",
    "end": "1854279"
  },
  {
    "text": "be able to react to changes in demand as we've described and if we want to that location transparency is a really",
    "start": "1854279",
    "end": "1860200"
  },
  {
    "text": "important idea because that's the ability to be able to figure out that we haven't got enough computer horsepower",
    "start": "1860200",
    "end": "1867240"
  },
  {
    "text": "launch something else that's going to be able to deliver that compute horsepower and start forwarding traffic for that",
    "start": "1867240",
    "end": "1872840"
  },
  {
    "text": "that new thing to service if you if everything if every component know knows",
    "start": "1872840",
    "end": "1878360"
  },
  {
    "text": "where every other component is by you know um location specific addresses you don't",
    "start": "1878360",
    "end": "1884480"
  },
  {
    "text": "have that ability to scale up because then you've got to distribute address an address map all around everywhere so you need these things to be able to send",
    "start": "1884480",
    "end": "1890399"
  },
  {
    "text": "messages and not care where the receiver is I think that the thinking uh is going",
    "start": "1890399",
    "end": "1896559"
  },
  {
    "text": "further than that we're getting to the stage where the infrastructure that people are talking about and is in some",
    "start": "1896559",
    "end": "1903600"
  },
  {
    "text": "cases is there it doesn't matter whether whether one service is on the same box as another or on a different continent",
    "start": "1903600",
    "end": "1909399"
  },
  {
    "text": "they can communicate with one another effectively",
    "start": "1909399",
    "end": "1914559"
  },
  {
    "text": "I mentioned already that you know distributed computing is becoming comp pervasive and to be honest as human",
    "start": "1917960",
    "end": "1924480"
  },
  {
    "text": "beings we're not very good at it we're not very good at thinking about it that way so we've got to find models that allow us to work in this way without",
    "start": "1924480",
    "end": "1931240"
  },
  {
    "text": "having to worry about the very difficult concerns of uh concurrent Computing and",
    "start": "1931240",
    "end": "1936720"
  },
  {
    "text": "and that kind of thing I think I think if you're unless you're a specialist if you're if you're working at that kind of",
    "start": "1936720",
    "end": "1943960"
  },
  {
    "text": "level it's going to be very very difficult and even Specialists wouldn't be inflating the concerns of working",
    "start": "1943960",
    "end": "1949880"
  },
  {
    "text": "worrying about multi-threaded Computing and concurrency alongside working worrying about the the domain problem",
    "start": "1949880",
    "end": "1956639"
  },
  {
    "text": "that they're trying to solve those are concerns that that that that need to be separate even by the best programmers if",
    "start": "1956639",
    "end": "1962639"
  },
  {
    "text": "we're going to build efficient systems and again this is one of the reasons why ideas like asynchrony message passing",
    "start": "1962639",
    "end": "1969600"
  },
  {
    "text": "and and location transparency are important",
    "start": "1969600",
    "end": "1974480"
  },
  {
    "start": "1978000",
    "end": "2043000"
  },
  {
    "text": "so let's talk a little bit about that that idea of uh of scalability so we",
    "start": "1979799",
    "end": "1985960"
  },
  {
    "text": "again got components a sending messages to component",
    "start": "1985960",
    "end": "1990518"
  },
  {
    "text": "B okay so that's one model we've got a version of component B that can processes all the messages and that's",
    "start": "1999320",
    "end": "2007320"
  },
  {
    "text": "fine what happens when component B can't keep with keep up with the demand well",
    "start": "2007320",
    "end": "2012880"
  },
  {
    "text": "we can build in the ability to figure out based the content of the messages where to send them and have two versions",
    "start": "2012880",
    "end": "2018880"
  },
  {
    "text": "of component B that Services different parts of the messaging maybe that's on certain ranges of accounts maybe it's on",
    "start": "2018880",
    "end": "2026200"
  },
  {
    "text": "different types of messages don't know but but being able to being able to break that apart is is",
    "start": "2026200",
    "end": "2033000"
  },
  {
    "text": "an option that's available to you when you've got this separation between the messaging of the messaging of the system",
    "start": "2033000",
    "end": "2038760"
  },
  {
    "text": "and location transparency",
    "start": "2038760",
    "end": "2044480"
  },
  {
    "start": "2043000",
    "end": "2183000"
  },
  {
    "text": "so I think that Modern Hardware should change our assumptions of of the way in",
    "start": "2044480",
    "end": "2049720"
  },
  {
    "text": "which we design and develop software one of the biggest problems",
    "start": "2049720",
    "end": "2056320"
  },
  {
    "text": "that we face is the cost of moving data remot Ram's not random access dis is not",
    "start": "2056320",
    "end": "2063480"
  },
  {
    "text": "random access ssds aren't Random Access each of these things in terms of",
    "start": "2063480",
    "end": "2068839"
  },
  {
    "text": "performance has a variable profile uh discs the easiest to understand you",
    "start": "2068839",
    "end": "2076000"
  },
  {
    "text": "know any any time when you touch a try and get a bite from a disc you've got to wait for the disc to spin around to get",
    "start": "2076000",
    "end": "2082760"
  },
  {
    "text": "the right sector you may have to move the heads to a certain location to pick up the right track um and so on RAM",
    "start": "2082760",
    "end": "2089638"
  },
  {
    "text": "because of all the caching depending on whether you get a cash hit or a cash Miss Miss there's a dramatic difference",
    "start": "2089639",
    "end": "2095440"
  },
  {
    "text": "in the performance of that thousands of times s different um ssds are block",
    "start": "2095440",
    "end": "2100640"
  },
  {
    "text": "devices they they they if you're writing data that is a dramatically different",
    "start": "2100640",
    "end": "2106320"
  },
  {
    "text": "time penalty to reading data and all of these things it's not",
    "start": "2106320",
    "end": "2111359"
  },
  {
    "text": "straightforward it's this stuff is more complicated than it than it seems the other big change that",
    "start": "2111359",
    "end": "2117880"
  },
  {
    "text": "certainly if you're as old as me there kind of the inbutt assumption that that I grew up within my programming career",
    "start": "2117880",
    "end": "2124160"
  },
  {
    "text": "was that was that Ram was fast um work was slow and disc was somewhere in the",
    "start": "2124160",
    "end": "2130599"
  },
  {
    "text": "middle and that's just wrong Ram's slow Network slow dis is",
    "start": "2130599",
    "end": "2138200"
  },
  {
    "text": "slower there are some networks that can be faster in some circumstances we're getting to the point where there are",
    "start": "2138200",
    "end": "2143920"
  },
  {
    "text": "certain Network topologies that can be faster than a ram access there are",
    "start": "2143920",
    "end": "2149000"
  },
  {
    "text": "certainly dis is dramatically slower than networking Ram's changing Ram Ram's",
    "start": "2149000",
    "end": "2154280"
  },
  {
    "text": "Chang I think we've got massive non-volatile Ram is is is is knocking on the door it may",
    "start": "2154280",
    "end": "2160319"
  },
  {
    "text": "be a few years down the track but it's not very many years down the track and that changes the game too so we need to be thinking about new ways of",
    "start": "2160319",
    "end": "2166359"
  },
  {
    "text": "architecting our systems the old ways are built on the compromises that were",
    "start": "2166359",
    "end": "2171520"
  },
  {
    "text": "imposed on us by certain performance profiles in the hardware that we were all used to and those compromis those",
    "start": "2171520",
    "end": "2178359"
  },
  {
    "text": "assumptions no longer",
    "start": "2178359",
    "end": "2181559"
  },
  {
    "start": "2183000",
    "end": "2245000"
  },
  {
    "text": "hold this is the obligatory conways law slide if you haven't heard about ways law the idea is is is that the the",
    "start": "2183440",
    "end": "2190640"
  },
  {
    "text": "architecture of your system will be mirrored will mirror the organizational",
    "start": "2190640",
    "end": "2196599"
  },
  {
    "text": "structure of your of the organization that created it so if you have a hierarchical organization with siloed",
    "start": "2196599",
    "end": "2203400"
  },
  {
    "text": "teams you'll probably build a multi-tier architecture like like that if you have",
    "start": "2203400",
    "end": "2209440"
  },
  {
    "text": "a distributed t a group of small distributed cross functional teams",
    "start": "2209440",
    "end": "2214720"
  },
  {
    "text": "you'll probably build something that looks more like that this is kind of microservice territory this is kind of",
    "start": "2214720",
    "end": "2221480"
  },
  {
    "text": "these are the sorts of systems that we're talking about we're talking about these these discret units of processing",
    "start": "2221480",
    "end": "2226680"
  },
  {
    "text": "Loosely coupled from one another using asynchronous messaging which is microservices",
    "start": "2226680",
    "end": "2232480"
  },
  {
    "text": "Plus+ um to give us the elasticity resilience um and scalability that we",
    "start": "2232480",
    "end": "2239119"
  },
  {
    "text": "and um uh responsiveness that we demand I've mentioned this idea a couple",
    "start": "2239119",
    "end": "2245640"
  },
  {
    "start": "2245000",
    "end": "2431000"
  },
  {
    "text": "of times already and and it was mentioned in the by the previous speaker as well bounded contexts are kind of key",
    "start": "2245640",
    "end": "2251720"
  },
  {
    "text": "to this in terms of being able to draw the lines around the components that we build appropriately I was chatting with",
    "start": "2251720",
    "end": "2258599"
  },
  {
    "text": "yonas at lunchtime and he was saying that it's often difficult to kind of",
    "start": "2258599",
    "end": "2263720"
  },
  {
    "text": "figure out what the best programming model is to present for some of these things because people take too",
    "start": "2263720",
    "end": "2269240"
  },
  {
    "text": "simplistic a view sometimes and are are sorry I'm putting words in his mouth that he didn't speak but um but they but",
    "start": "2269240",
    "end": "2276800"
  },
  {
    "text": "they will they were make everything a remote communication core you've got to think carefully about what the boundaries of a service are what what",
    "start": "2276800",
    "end": "2283079"
  },
  {
    "text": "what encapsulate these things and those should be aligned with business context you need to think about carefully about the the boundaries of the teams and what",
    "start": "2283079",
    "end": "2290359"
  },
  {
    "text": "their responsibili are and they should too should be aligned aligned with bounded context those might might be",
    "start": "2290359",
    "end": "2296560"
  },
  {
    "text": "several components within that bounded context to make it sensible distribution of work but it's important to get these",
    "start": "2296560",
    "end": "2302240"
  },
  {
    "text": "things right what we're looking for all the way down the line is to minimize C",
    "start": "2302240",
    "end": "2307760"
  },
  {
    "text": "we're trying to minimize the coupling between teams and we're trying to minimize the coupling between services so that when we get to the point at",
    "start": "2307760",
    "end": "2314280"
  },
  {
    "text": "which we have these asynchronous conversations they make sense they're s they're simple and straightforward",
    "start": "2314280",
    "end": "2320040"
  },
  {
    "text": "they're not chatty they're not give me this bit or give me this bite or you know give me that number and that number",
    "start": "2320040",
    "end": "2326520"
  },
  {
    "text": "and I'm going to add them together we need to design the protocols to make sure that they're they're sensible and",
    "start": "2326520",
    "end": "2332560"
  },
  {
    "text": "Loosely coupled the kind of mental image that I have of this is if you imagine an organizer ation without any computers",
    "start": "2332560",
    "end": "2339760"
  },
  {
    "text": "and a series of offices doing different parts of the job of that organization within those offices it's",
    "start": "2339760",
    "end": "2347160"
  },
  {
    "text": "it's down to the people to organize themselves however they like and the offices communicate with one another by",
    "start": "2347160",
    "end": "2354440"
  },
  {
    "text": "messages now imagine what the you know how you would design a system like that to work that's kind of how we want to",
    "start": "2354440",
    "end": "2360359"
  },
  {
    "text": "design our services we want these simple exchanges of information ideally if we",
    "start": "2360359",
    "end": "2366119"
  },
  {
    "text": "were able to visualize the messages that flow between these components it probably makes sense if they're kind of",
    "start": "2366119",
    "end": "2372640"
  },
  {
    "text": "the sorts of things that a somebody understands the problem domain a business user would understand as part",
    "start": "2372640",
    "end": "2378400"
  },
  {
    "text": "of the conversation we want you know place this order this thing's being ordered um Reserve this this item those",
    "start": "2378400",
    "end": "2387200"
  },
  {
    "text": "sorts of ideas these sort of relatively high level exchanges of information between between the",
    "start": "2387200",
    "end": "2393680"
  },
  {
    "text": "systems and we should we should be looking to one of the key ideas of band bounded context that's really important",
    "start": "2395520",
    "end": "2402040"
  },
  {
    "text": "is that at the points at which we exchange information between bounded contexts that's a point of",
    "start": "2402040",
    "end": "2409079"
  },
  {
    "text": "translation so even if both B in two bounded context we have the concept of",
    "start": "2409079",
    "end": "2414560"
  },
  {
    "text": "account they're different they're they're different versions of account they might share a common key they might",
    "start": "2414560",
    "end": "2422480"
  },
  {
    "text": "be referring to the same count but one domain's vers view of an account is",
    "start": "2422480",
    "end": "2428319"
  },
  {
    "text": "going to be separate from the others so here's here's a a high",
    "start": "2428319",
    "end": "2434119"
  },
  {
    "start": "2431000",
    "end": "2711000"
  },
  {
    "text": "level typical kind of architectural diagram of the system that we build this",
    "start": "2434119",
    "end": "2439480"
  },
  {
    "text": "is quite it's getting quite old this system now it's still one of the higher performing exchanges in the world so we",
    "start": "2439480",
    "end": "2447760"
  },
  {
    "text": "we had our services and our services were kind of reasonably large on the microservice scale for some of those",
    "start": "2447760",
    "end": "2453720"
  },
  {
    "text": "things but they were sensible bounded contexts we had matching engines for for",
    "start": "2453720",
    "end": "2460079"
  },
  {
    "text": "where we would do deals where we would do trades we had account services account management Services where we",
    "start": "2460079",
    "end": "2466359"
  },
  {
    "text": "would manage the live position of people that were trading we had account history service where we would record um what",
    "start": "2466359",
    "end": "2473000"
  },
  {
    "text": "was going on um further uh historically what what trades people had made and so",
    "start": "2473000",
    "end": "2479839"
  },
  {
    "text": "on we kind of divided these up into three groups so there's the idea of core",
    "start": "2479839",
    "end": "2485480"
  },
  {
    "text": "Services those were the services that were the these were the seriously high performance things these were the things",
    "start": "2485480",
    "end": "2490520"
  },
  {
    "text": "that were doing doing our business logic these things were these were kind of the systems of",
    "start": "2490520",
    "end": "2496720"
  },
  {
    "text": "record the the system of record was the inmemory state of these things and these things could fly they were",
    "start": "2496720",
    "end": "2502040"
  },
  {
    "text": "servicing hundreds of thousands of messages per second very easily um in in",
    "start": "2502040",
    "end": "2508839"
  },
  {
    "text": "microc seconds um we had General Services these were",
    "start": "2508839",
    "end": "2515520"
  },
  {
    "text": "kind of the slower more traditional kind of services now most organizations I",
    "start": "2515520",
    "end": "2520599"
  },
  {
    "text": "think these are the sorts of services that they would build in this kind of model these things are were were often",
    "start": "2520599",
    "end": "2526560"
  },
  {
    "text": "backed by a database but as I said before the the separation of concerns",
    "start": "2526560",
    "end": "2532200"
  },
  {
    "text": "that we had as a result of the way in which we'd organize that banded context the live data for trading was only",
    "start": "2532200",
    "end": "2537880"
  },
  {
    "text": "existed in here in order to trade you didn't have to you you kind of went through the layers to get to here but",
    "start": "2537880",
    "end": "2544160"
  },
  {
    "text": "this is where trades happened and you didn't have to go anywhere else in the process of performing a trade you didn't have to ask anything else to do that if",
    "start": "2544160",
    "end": "2551760"
  },
  {
    "text": "you wanted to look up your account history on the other hand which was kind of what trades you did before that's",
    "start": "2551760",
    "end": "2557880"
  },
  {
    "text": "here now eventual consistency means you know that would that would eventually be correct but it would at the point at the",
    "start": "2557880",
    "end": "2564240"
  },
  {
    "text": "Live point of trading this wasn't precisely up to date with what was going on here but it didn't matter because nobody cared if their account history",
    "start": "2564240",
    "end": "2571480"
  },
  {
    "text": "wasn't microsc in line with their tra their live trading at present their",
    "start": "2571480",
    "end": "2577720"
  },
  {
    "text": "separate concerns we also had a bunch of what we call Gateway Services these were",
    "start": "2577720",
    "end": "2583280"
  },
  {
    "text": "translation services so so we were interacting with different protocols",
    "start": "2583280",
    "end": "2588880"
  },
  {
    "text": "different systems different end points we were providing uh public um web",
    "start": "2588880",
    "end": "2595599"
  },
  {
    "text": "access uh public apis you could write your own Bots get to trade against this system we were providing institutional",
    "start": "2595599",
    "end": "2601240"
  },
  {
    "text": "HPI so you would use the FI fix protocol which is a um financial information",
    "start": "2601240",
    "end": "2606680"
  },
  {
    "text": "Exchange protocol that's common in the industry and lots of other places and sort of all external um trans uh",
    "start": "2606680",
    "end": "2614280"
  },
  {
    "text": "Communications came in through one of these Gateway Services these things were kind of border patrol so they would translate messages into a form that the",
    "start": "2614280",
    "end": "2621640"
  },
  {
    "text": "rest of the system would understand the rest of the system would kind of talk using broadcast asynchronous messaging",
    "start": "2621640",
    "end": "2627359"
  },
  {
    "text": "between all of the services and then they would translate messages out to whatever protocol was relevant uh in",
    "start": "2627359",
    "end": "2633520"
  },
  {
    "text": "order to make this work this was not only um a very high",
    "start": "2633520",
    "end": "2640520"
  },
  {
    "text": "performance system it was also the most efficient system that I've ever worked on in in in in terms of being able to do",
    "start": "2640520",
    "end": "2646960"
  },
  {
    "text": "new work because each each of these Services was single threaded even the seriously high performance high tech",
    "start": "2646960",
    "end": "2654000"
  },
  {
    "text": "things um because all of it was single threaded it was it was straightforward",
    "start": "2654000",
    "end": "2659040"
  },
  {
    "text": "to reason about because it was a rich domain model a simulation of our problem",
    "start": "2659040",
    "end": "2665040"
  },
  {
    "text": "domain in memory it was simp to reason about and it was simple to test we also",
    "start": "2665040",
    "end": "2671119"
  },
  {
    "text": "had the really lovely property that if we saw a bug in production we could take the the messages that were uh from",
    "start": "2671119",
    "end": "2678079"
  },
  {
    "text": "production replay them through the system in a test environment and get it back into precisely the same state and",
    "start": "2678079",
    "end": "2684000"
  },
  {
    "text": "then debug it in a test environment there were not many systems that I worked on where you could do that to the",
    "start": "2684000",
    "end": "2689040"
  },
  {
    "text": "same degree this is a completely deterministic system in that t that case it was also exceedingly scalable because",
    "start": "2689040",
    "end": "2696680"
  },
  {
    "text": "we could just Shred the messaging the messaging messages at whatever level if we needed more matching engines we could",
    "start": "2696680",
    "end": "2702760"
  },
  {
    "text": "add more matching engines if we wanted more account services we could do that all of those things wherever the the",
    "start": "2702760",
    "end": "2707880"
  },
  {
    "text": "contention point",
    "start": "2707880",
    "end": "2710680"
  },
  {
    "start": "2711000",
    "end": "3295000"
  },
  {
    "text": "was so where to start sadly I don't think that there's",
    "start": "2713240",
    "end": "2718680"
  },
  {
    "text": "infrastructure that precisely does what I've just described I think that there's",
    "start": "2718680",
    "end": "2723839"
  },
  {
    "text": "I know of two or three people that are working on stuff like like that AKA is",
    "start": "2723839",
    "end": "2729000"
  },
  {
    "text": "is is one one version of doing things it does more than I've described and in some ways less um there's a new thing",
    "start": "2729000",
    "end": "2737119"
  },
  {
    "text": "from coucho called bartine which was influenced by the elmax architecture that I've been describing to you and",
    "start": "2737119",
    "end": "2742760"
  },
  {
    "text": "they they've taken some of the ideas that too does some things that I think are wrong including supporting",
    "start": "2742760",
    "end": "2748119"
  },
  {
    "text": "synchronous messaging which I think is a mistake I don't think we should be supporting synchronous messaging in these sorts of systems so if you try try",
    "start": "2748119",
    "end": "2754480"
  },
  {
    "text": "these things I I think acur is by far the most mature and robust um uh but",
    "start": "2754480",
    "end": "2762119"
  },
  {
    "text": "take a look at these things if these ideas appeal to you and explore but remember to remember that the key",
    "start": "2762119",
    "end": "2768720"
  },
  {
    "text": "constraints are around designing your services within those bounded context and making sure that your that the me",
    "start": "2768720",
    "end": "2775839"
  },
  {
    "text": "the the points of exchange are loose coupled at the protocol level not just at the technical",
    "start": "2775839",
    "end": "2782680"
  },
  {
    "text": "level that's me for that's that's the end of my talk so I think I do have a few minutes for",
    "start": "2782680",
    "end": "2789720"
  },
  {
    "text": "questions thank you any",
    "start": "2797400",
    "end": "2801920"
  },
  {
    "text": "questions how how can you make the the user interface asynchronous is that a question good so so it's it it seem it",
    "start": "2806359",
    "end": "2815480"
  },
  {
    "text": "seems natural to be synchronous but um you've just asked me a",
    "start": "2815480",
    "end": "2821240"
  },
  {
    "text": "question you're still you're still thinking you're still doing other things and now I'm coming back to you with an",
    "start": "2821280",
    "end": "2827000"
  },
  {
    "text": "answer sometime later so we can push 3 asynchrony out we can we can we can design our interaction",
    "start": "2827000",
    "end": "2834359"
  },
  {
    "text": "to do that now the protocols on which you know commonly we work aren't necessarily built with those assumptions",
    "start": "2834359",
    "end": "2840040"
  },
  {
    "text": "in I think that's something that ought to change I'm writing some software right now which which is kind of got a",
    "start": "2840040",
    "end": "2845359"
  },
  {
    "text": "web interface and I've got pushed both ways so I've got I plug in um something",
    "start": "2845359",
    "end": "2850599"
  },
  {
    "text": "to uh to my message Channel and when a service wants to notify the user of",
    "start": "2850599",
    "end": "2856240"
  },
  {
    "text": "something it can send a message and that will asynchronous be be delivered to the web page that too is the way that the",
    "start": "2856240",
    "end": "2862200"
  },
  {
    "text": "elmax model worked so then you can write a model in your in your web page in",
    "start": "2862200",
    "end": "2868960"
  },
  {
    "text": "whatever your favorite um web development languages or or your user interface whatever nature of the user",
    "start": "2868960",
    "end": "2874920"
  },
  {
    "text": "interface is and respond to those events now 99.99999% of the time this will be as",
    "start": "2874920",
    "end": "2882200"
  },
  {
    "text": "fast or faster than a synchronous call but those few percent of the times when",
    "start": "2882200",
    "end": "2887800"
  },
  {
    "text": "something's broken it doesn't really matter it's still going to be okay it will catch up",
    "start": "2887800",
    "end": "2893000"
  },
  {
    "text": "sometime later you're going to avoid coding for awkward error conditions it takes a mental switch it takes a",
    "start": "2893000",
    "end": "2899880"
  },
  {
    "text": "changeing approach I think a little but I do think it leads to simpler code but",
    "start": "2899880",
    "end": "2905040"
  },
  {
    "text": "it just take a just a slightly different way of thinking about it more",
    "start": "2905040",
    "end": "2913280"
  },
  {
    "text": "questions us system local envir that's never",
    "start": "2913640",
    "end": "2921200"
  },
  {
    "text": "acem uh I I'll repeat the question are there any are there any benefits in using this",
    "start": "2921200",
    "end": "2927160"
  },
  {
    "text": "kind of approach in a local system where where you're not distribute not aiming to distribute it I think I think that",
    "start": "2927160",
    "end": "2932960"
  },
  {
    "text": "there are so I think that you gain the benefits of um simpler coding practices",
    "start": "2932960",
    "end": "2939440"
  },
  {
    "text": "because you avoid these error conditions and you also get performance this is a higher this is a higher performance",
    "start": "2939440",
    "end": "2947599"
  },
  {
    "text": "architecture um by measurement I mean you know we we measured we measured the",
    "start": "2947599",
    "end": "2953079"
  },
  {
    "text": "hell out of this stuff to get to get the levels of performance that we're talking about for the exchange and we tried all sorts of different things before we got",
    "start": "2953079",
    "end": "2958960"
  },
  {
    "text": "to this and we tried we tried Tri all sorts of classic architectures we tried",
    "start": "2958960",
    "end": "2964920"
  },
  {
    "text": "um doing clever things like allocating work to threads and we spent more time allocating work to threads than we did",
    "start": "2964920",
    "end": "2970480"
  },
  {
    "text": "actually running work on threads which is why we ended up with the single threaded thing this is this is a very efficient way of um uh",
    "start": "2970480",
    "end": "2978960"
  },
  {
    "text": "Computing it's also the way that our processes work it also aligns really nicely with the way that Hardware is",
    "start": "2978960",
    "end": "2985000"
  },
  {
    "text": "going so I think it I think it's an efficient use of Hardware so I I think that there are many I believe that there are benefits if I'm honest I don't I",
    "start": "2985000",
    "end": "2991720"
  },
  {
    "text": "don't want to write code any other way than this because this gives me the freedom to write the rich domain model",
    "start": "2991720",
    "end": "2996880"
  },
  {
    "text": "that I like to write as part of my my development and the freedom to be able to scale that if I want to and",
    "start": "2996880",
    "end": "3003160"
  },
  {
    "text": "distribute it if I want to so so I think that there are benefits to this kind of architecture even for single even if",
    "start": "3003160",
    "end": "3009760"
  },
  {
    "text": "you're rocking mobile phone apps i' i' tend to start thinking about writing them this way we've got to get to the",
    "start": "3009760",
    "end": "3014920"
  },
  {
    "text": "level where there's better support from the tools and infrastructure around this and as I said I know a couple of projects that are working on building",
    "start": "3014920",
    "end": "3020960"
  },
  {
    "text": "that support uh in various areas and I hope it's coming soon because I think this is I think it's an interesting",
    "start": "3020960",
    "end": "3027839"
  },
  {
    "text": "uh step in in in programming",
    "start": "3027839",
    "end": "3032799"
  },
  {
    "text": "approach that's a great question I I'll just repeat the question uh if if we've got two teams looking at different",
    "start": "3047960",
    "end": "3054400"
  },
  {
    "text": "bounded contexts and they're coupled in that they're exchanging information by messaging who's responsible for the",
    "start": "3054400",
    "end": "3060799"
  },
  {
    "text": "interchange between them it's a great question and I don't think anybody's got an answer um there are um everybody's",
    "start": "3060799",
    "end": "3068400"
  },
  {
    "text": "talking about microservices at the moment the organizations that are probably most mature microservices at",
    "start": "3068400",
    "end": "3073480"
  },
  {
    "text": "the moment are starting to feel the pain and microservices give you some wonderful things they give you they give",
    "start": "3073480",
    "end": "3079480"
  },
  {
    "text": "you the ability to scale out have lots of people working on Independent things but the protocols over time get more and",
    "start": "3079480",
    "end": "3086160"
  },
  {
    "text": "more important important um and I think that Netflix uh Amazon and people like",
    "start": "3086160",
    "end": "3092200"
  },
  {
    "text": "that are starting to realize that and they're starting to worry about how they can be more rigid in the definition of",
    "start": "3092200",
    "end": "3098280"
  },
  {
    "text": "the protocols and the management of the dependencies the other way",
    "start": "3098280",
    "end": "3103359"
  },
  {
    "text": "so for the classic kind of microservice architecture many small teams you get",
    "start": "3103359",
    "end": "3109960"
  },
  {
    "text": "the great great scalability great Independence of the teams and at the cost of who's responsible for the Cross",
    "start": "3109960",
    "end": "3116160"
  },
  {
    "text": "Pro the cross team communication um the other way of doing it is to build a monolith Mill you can",
    "start": "3116160",
    "end": "3123319"
  },
  {
    "text": "still build a microservice architecture it's still be a reactive system the the the elmac system was a uh many",
    "start": "3123319",
    "end": "3131760"
  },
  {
    "text": "Individual Services but actually it was owned by the whole team and it was released together as one so we ducked",
    "start": "3131760",
    "end": "3139559"
  },
  {
    "text": "that problem by uh because the protocol was always versioned it was always at",
    "start": "3139559",
    "end": "3144640"
  },
  {
    "text": "the same level we' avoided the depend tendency problem between of multiv versions of the protocol by having it",
    "start": "3144640",
    "end": "3150520"
  },
  {
    "text": "released by one team and you can do that and that that works well too but that comes at the cost of um you go in the",
    "start": "3150520",
    "end": "3158400"
  },
  {
    "text": "direction of a single monolithic deployment a bigger test infrastructure if you're doing continuous delivery and",
    "start": "3158400",
    "end": "3163839"
  },
  {
    "text": "all of your tests you need to scale that up better you need to invest in that to to get that working and at some level",
    "start": "3163839",
    "end": "3169799"
  },
  {
    "text": "although you can still have quite a lot of autonomy in small teams there's a little bit of compromise with that too",
    "start": "3169799",
    "end": "3175640"
  },
  {
    "text": "so I don't think there's a silver bullet answer to that question I think it's a genuinely hard problem um and I don't",
    "start": "3175640",
    "end": "3182240"
  },
  {
    "text": "think anybody's got a perfect answer it's a compromise either way and you kind of takes your money places your",
    "start": "3182240",
    "end": "3187559"
  },
  {
    "text": "money and takes your",
    "start": "3187559",
    "end": "3190280"
  },
  {
    "text": "choice what to do if you have to communicate with external system that is",
    "start": "3192680",
    "end": "3198040"
  },
  {
    "text": "synchronous uh that's a good one I tend to hide it in the Gateway so try and",
    "start": "3198040",
    "end": "3203520"
  },
  {
    "text": "make the Gateway hide the s synchrony from the rest of the system and that can be",
    "start": "3203520",
    "end": "3209839"
  },
  {
    "text": "tricky but it means that the Gateway will be ugly and more complex than you want it to be but that's that's life",
    "start": "3209839",
    "end": "3218480"
  },
  {
    "text": "kind of thing that's what you'd have to cope within that circumstance but I'd want to isolate it as far as I could at",
    "start": "3218480",
    "end": "3223839"
  },
  {
    "text": "the band of the system the the kind of purest view is that you can't hide that a that that synchronous that synchr",
    "start": "3223839",
    "end": "3230760"
  },
  {
    "text": "synchronous style so you want that's why you want you know once you go down the syn the asynchronous route you it's got",
    "start": "3230760",
    "end": "3236799"
  },
  {
    "text": "to be Al asynchronous all the way but you can kind of compromise it it's kind of the same problem with a you know a",
    "start": "3236799",
    "end": "3241880"
  },
  {
    "text": "database commit that that's kind of a synchronous action and for me that's usually too slow for me to want to take",
    "start": "3241880",
    "end": "3247720"
  },
  {
    "text": "the cost but you've got to if you want to commit the data to database so there are ways of isolating it using a",
    "start": "3247720",
    "end": "3255079"
  },
  {
    "text": "a the more that I think about it a Sy is kind of the fundamental communication protocol so you can kind of build other",
    "start": "3255079",
    "end": "3260720"
  },
  {
    "text": "things on top of it um so you can kind of hide hide that synchronous Ness with",
    "start": "3260720",
    "end": "3266400"
  },
  {
    "text": "asynchrony by some clever tricks but the the gate that Gateway service will be more complex and more ugly than you want",
    "start": "3266400",
    "end": "3272040"
  },
  {
    "text": "it to be sorry repeating myself any more",
    "start": "3272040",
    "end": "3278960"
  },
  {
    "text": "questions no okay I'll be around for the rest of the conference amazing",
    "start": "3279599",
    "end": "3285920"
  }
]