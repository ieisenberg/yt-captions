[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "[Music]",
    "start": "3470",
    "end": "7799"
  },
  {
    "text": "welcome everyone to this talk on streamlining large-scale Java developments so as Adele already",
    "start": "11099",
    "end": "17100"
  },
  {
    "text": "mentioned this is actually a 15-minute talk that we're going to compress down into 40 minutes so uh wish me luck",
    "start": "17100",
    "end": "22680"
  },
  {
    "text": "um and with that being said before we get started I want to let you in on a little dirty secret of conference",
    "start": "22680",
    "end": "28859"
  },
  {
    "text": "speakers because often when people talk at conferences we would like to talk about new technologies that are exciting",
    "start": "28859",
    "end": "35940"
  },
  {
    "text": "and big right so go to kotlin choose a new language do microservices change",
    "start": "35940",
    "end": "40980"
  },
  {
    "text": "your architecture and these are all pretty interesting and good talks and I'm guilty of those as well so uh yeah",
    "start": "40980",
    "end": "46620"
  },
  {
    "text": "it got me because he is charged but what can you take away from this tomorrow to your teams right what can",
    "start": "46620",
    "end": "53820"
  },
  {
    "text": "you actually apply from what you learned and often it's not that much or maybe it's a long-term thing and that's good",
    "start": "53820",
    "end": "59520"
  },
  {
    "text": "what I want to do today is I want to talk about a tool which is much much I would say much much easier to bring to",
    "start": "59520",
    "end": "65820"
  },
  {
    "text": "your teams this is something that you can apply to any Java code base and we actually heavily use this at picnic so",
    "start": "65820",
    "end": "71700"
  },
  {
    "text": "I'm going to share what what that tool is and how it works and hopefully you can take this away so in fact I'm going",
    "start": "71700",
    "end": "76920"
  },
  {
    "text": "to teach you a superpower can Java developers have super powers well yeah you can and the superpower that I'm",
    "start": "76920",
    "end": "83939"
  },
  {
    "start": "82000",
    "end": "140000"
  },
  {
    "text": "going to talk about today is the ability to be able to refactor your Java code",
    "start": "83939",
    "end": "88979"
  },
  {
    "text": "basis at skill and to enforce uniformity and to help your development teams focus on the real issues rather than on these",
    "start": "88979",
    "end": "94860"
  },
  {
    "text": "side issues and with refactoring a skill I don't mean people frantically typing behind their Ides and knowing all the",
    "start": "94860",
    "end": "101159"
  },
  {
    "text": "shortcuts in IntelliJ that's also nice no I'm talking about something that we can automate using Code of course",
    "start": "101159",
    "end": "107159"
  },
  {
    "text": "because we're developers and we want use codes to actually make code better in this case",
    "start": "107159",
    "end": "112380"
  },
  {
    "text": "and the tool that we use at picnic for death is called errorprom which is a",
    "start": "112380",
    "end": "117420"
  },
  {
    "text": "open sourced tool by Google it has been open source a couple of years ago we use it quite heavily it is not that well",
    "start": "117420",
    "end": "123960"
  },
  {
    "text": "known yet in the Java Community which I think is a Pity also one of the reasons why I'm doing this talk and sharing this",
    "start": "123960",
    "end": "129420"
  },
  {
    "text": "with you because I think there's a lot of power in there that we have not tapped yet as a Java community",
    "start": "129420",
    "end": "134940"
  },
  {
    "text": "so yeah error prone is is definitely your gateway into this this new superpower I would say",
    "start": "134940",
    "end": "141060"
  },
  {
    "start": "140000",
    "end": "178000"
  },
  {
    "text": "so why do we do this a picnic we are tackling what we call the online groceries challenge so we want to make",
    "start": "141060",
    "end": "147300"
  },
  {
    "text": "online grocery shopping fun easy and affordable for everyone and indeed that means these acute electric vehicles",
    "start": "147300",
    "end": "153599"
  },
  {
    "text": "driving around but it also means that we need a lot of software to make this happen there's the obvious app and the back end that goes with that but there's",
    "start": "153599",
    "end": "160620"
  },
  {
    "text": "so much more happening in the background so we need to do purchase order management we do need to do warehouse management we even built a fully",
    "start": "160620",
    "end": "166860"
  },
  {
    "text": "automated warehouse and we need to control that as well and for all of these systems and for all of these",
    "start": "166860",
    "end": "172200"
  },
  {
    "text": "products that we're building we're mostly using Java at picnic so that means that by now we've actually amassed",
    "start": "172200",
    "end": "178920"
  },
  {
    "start": "178000",
    "end": "219000"
  },
  {
    "text": "quite a few lines of code I would say so we started seven years ago with a handful of Engineers currently over 200",
    "start": "178920",
    "end": "185220"
  },
  {
    "text": "people currently part of the tech team and and we've written a lot of java course as I said and that means that we",
    "start": "185220",
    "end": "190980"
  },
  {
    "text": "also have a lot of code to maintain and not just to create new services but it to also improve and to keep evolving and",
    "start": "190980",
    "end": "198540"
  },
  {
    "text": "for that to work and for that to happen we we turn to Automation and error is one of the tools in the Arsenal let's",
    "start": "198540",
    "end": "205019"
  },
  {
    "text": "say to make this reality to actually be able to skill our engineering efforts and to be able to have nice Java code",
    "start": "205019",
    "end": "211739"
  },
  {
    "text": "bases to work with and to have some uniformity in there so that is a bit of the background on how we ended up where we currently are",
    "start": "211739",
    "end": "219120"
  },
  {
    "start": "219000",
    "end": "267000"
  },
  {
    "text": "now you might be wondering okay I also care about my software quality and about my code base so for example I use Sona",
    "start": "219120",
    "end": "225360"
  },
  {
    "text": "Cube and that is great don't get me wrong right so sonar and all these kind of analyzes they do help you understand",
    "start": "225360",
    "end": "231420"
  },
  {
    "text": "your code base they do help you see Trends in code bases Etc but there's also a bit of the the sort of Broken",
    "start": "231420",
    "end": "237299"
  },
  {
    "text": "Window Theory going on here because how often doesn't developer open sonar is it actually embedded in your development",
    "start": "237299",
    "end": "242640"
  },
  {
    "text": "cycle isn't it a bit too far away and if you open your console and you see you have 80 Days of technical depth and it",
    "start": "242640",
    "end": "249480"
  },
  {
    "text": "grows to 85 I mean what does it actually mean in terms of actionable actionable things that you can do so while it's",
    "start": "249480",
    "end": "256320"
  },
  {
    "text": "good to get insights it is not always the Silver Bullets to to improve your development processes and to actually",
    "start": "256320",
    "end": "262019"
  },
  {
    "text": "get better and to actually structure and get to a uniform code base but there's more tools right so in Java worlds we",
    "start": "262019",
    "end": "269520"
  },
  {
    "start": "267000",
    "end": "328000"
  },
  {
    "text": "don't just have sonar Cube to actually understand and know our code we also have some tools that help us prevent",
    "start": "269520",
    "end": "274740"
  },
  {
    "text": "getting things from worse right like spot bugs that we can use or check Style and and these are very fine tools in",
    "start": "274740",
    "end": "281580"
  },
  {
    "text": "their own right as well um but the point is these tools they yell at you when you're doing it wrong",
    "start": "281580",
    "end": "286680"
  },
  {
    "text": "which is okay I guess but they don't really help you improve your own way of working and actually encoding your own",
    "start": "286680",
    "end": "293340"
  },
  {
    "text": "patterns and your own idioms in in these kind of uh automatic checks so yes they're helpful and and we use them for",
    "start": "293340",
    "end": "300780"
  },
  {
    "text": "what they're worth um but we want to go a step further right so we also want to be able to actually Implement our own patterns in",
    "start": "300780",
    "end": "308220"
  },
  {
    "text": "our own refactoring our own improvements in code bases and that is where error prone together with refaster another",
    "start": "308220",
    "end": "314220"
  },
  {
    "text": "Google project that's closely related comes in and these together actually help us to automate improvements and to",
    "start": "314220",
    "end": "321780"
  },
  {
    "text": "take a proactive sort of stance here rather than a reactive stance in the way we structure our code bases",
    "start": "321780",
    "end": "328680"
  },
  {
    "start": "328000",
    "end": "431000"
  },
  {
    "text": "so what is error Pro well aeroprone as I said is an open source project by Google and it's actually a Java compiler plugin",
    "start": "328680",
    "end": "336060"
  },
  {
    "text": "can the Java compiler have plugins well yes it can and also not that well known of a functionality but for these use",
    "start": "336060",
    "end": "342120"
  },
  {
    "text": "cases for a static analysis tool and also as we will see a rewrite tool a comp compiler plugin is a pretty good",
    "start": "342120",
    "end": "348960"
  },
  {
    "text": "match so error prone is a compiler plugin that you can just configure in in the compiler invocation which also means",
    "start": "348960",
    "end": "356100"
  },
  {
    "text": "that it's relatively independent of your build tool so you don't need a specific plugin in Maven or Gradle or whatever",
    "start": "356100",
    "end": "361500"
  },
  {
    "text": "you just need to configure error prone as a compiler plugin and you will be done",
    "start": "361500",
    "end": "366600"
  },
  {
    "text": "there's a host of checks that you already get out of the box when you do so so when you apply air prone and we",
    "start": "366600",
    "end": "372539"
  },
  {
    "text": "add it as a compiler plugin you will already get a lot of automated sanity checks during your Java compilation",
    "start": "372539",
    "end": "379199"
  },
  {
    "text": "the nice thing is that it supports a wide range of java versions including modern versions like Java 17 which we're",
    "start": "379199",
    "end": "385259"
  },
  {
    "text": "pretty happy about because we migrated to Java 17 roughly uh three or four months after it was released so for us",
    "start": "385259",
    "end": "390960"
  },
  {
    "text": "it is important that these tools are also available in supporting modern Java versions",
    "start": "390960",
    "end": "396660"
  },
  {
    "text": "and like I said out of the box you get a lot of book patterns and book checks that error prone already spots for you",
    "start": "396660",
    "end": "402840"
  },
  {
    "text": "and um it is actually interesting if you go to the aeroprone website you will see this",
    "start": "402840",
    "end": "409440"
  },
  {
    "text": "testimonial by Doug Lee the guy who created the Java util concurrent libraries and he says well it's",
    "start": "409440",
    "end": "415500"
  },
  {
    "text": "definitely embarrassing I guess I'm back to liking Air Pro even though it sometimes annoys me I think we can",
    "start": "415500",
    "end": "420539"
  },
  {
    "text": "recognize the sentiment right if the tool always knows better but it actually discovers a book in the concurrent",
    "start": "420539",
    "end": "425880"
  },
  {
    "text": "hashment concurrent hashmap implementation so that's that's a pretty good testimonial I would say but then again we can talk a lot about",
    "start": "425880",
    "end": "433080"
  },
  {
    "start": "431000",
    "end": "653000"
  },
  {
    "text": "the tool but let's just dive in and have a look at some code right and let's have a look at what we actually can do with",
    "start": "433080",
    "end": "439020"
  },
  {
    "text": "it so for this first demo I have a very small class here called my buggy app and",
    "start": "439020",
    "end": "445860"
  },
  {
    "text": "there's just a couple of lines of codes and then this is valid Java code right there's no red squiggly lines in the IDE and if I",
    "start": "445860",
    "end": "452580"
  },
  {
    "text": "am going to open up my console and remove and clean verify it will compile",
    "start": "452580",
    "end": "458639"
  },
  {
    "text": "fine but there's still something wrong with this code somebody spot anything that is okay well that just doesn't seem",
    "start": "458639",
    "end": "464639"
  },
  {
    "text": "right let's raise your hands shout outs yeah go ahead",
    "start": "464639",
    "end": "470220"
  },
  {
    "text": "sorry unused methods yeah that's that's one thing and not quite the one I was going for now that's for the next demo but uh",
    "start": "470220",
    "end": "476940"
  },
  {
    "text": "yeah the exception indeed so we we create an exception but it's not thrown and",
    "start": "476940",
    "end": "483660"
  },
  {
    "text": "usually that's not the way you want to handle exceptions and you want to work with exceptions right so even though this is valid Java codes it is most",
    "start": "483660",
    "end": "490380"
  },
  {
    "text": "likely not actually what we mentioned we wanted to throw the exception here now let's go to our pom.xml file and go",
    "start": "490380",
    "end": "498180"
  },
  {
    "text": "to the configuration of the maven compiler and I'm going to insert a",
    "start": "498180",
    "end": "504060"
  },
  {
    "text": "snippet here that adds error prone as a compiler plugin so for that we need to set up The annotation processor path of",
    "start": "504060",
    "end": "510720"
  },
  {
    "text": "the Java compiler that's where it looks for plugins and we use the dash X plugin",
    "start": "510720",
    "end": "516120"
  },
  {
    "text": "with the name error Pro which forces the compiler to load this plugin from The annotation processor path and by doing",
    "start": "516120",
    "end": "523320"
  },
  {
    "text": "this and also setting compile policies to simple which is for now necessary because there's a jdk issue open and",
    "start": "523320",
    "end": "530220"
  },
  {
    "text": "that would fix this issue but for now we need to configure this for errorprone to work correctly now if we run the",
    "start": "530220",
    "end": "537899"
  },
  {
    "text": "compilation again you will see that something different happens rather than having a successful build we",
    "start": "537899",
    "end": "544500"
  },
  {
    "text": "actually get a Java compiler error because again error prone is a compiler plugin so it can emits compiler errors",
    "start": "544500",
    "end": "550140"
  },
  {
    "text": "on things that things are wrong and here you see okay um there's a dead exception right so",
    "start": "550140",
    "end": "555959"
  },
  {
    "text": "it's created but not thrown and you can also go to the book pattern page if you want to get more explanation on the",
    "start": "555959",
    "end": "561839"
  },
  {
    "text": "background of the issue but the interesting thing here is that it doesn't just say okay there's something wrong",
    "start": "561839",
    "end": "567240"
  },
  {
    "text": "it also offers you a context specific suggestion right that says that you actually mean to write throw new legal",
    "start": "567240",
    "end": "573959"
  },
  {
    "text": "argument exception and we'll go back yeah well that's actually what we wanted to have here",
    "start": "573959",
    "end": "579000"
  },
  {
    "text": "and then maybe a little light bulb might go over in your head and say well if this tool actually can produce this kind",
    "start": "579000",
    "end": "584640"
  },
  {
    "text": "of suggestion could it also apply this for me and there the answer is also yes so if we",
    "start": "584640",
    "end": "591120"
  },
  {
    "text": "run error prone not in checking modes but in so-called patching modes and we",
    "start": "591120",
    "end": "596580"
  },
  {
    "text": "can do this by configuring the plugin a bit more with the EP batch checks flag",
    "start": "596580",
    "end": "602040"
  },
  {
    "text": "where we say okay we enable these checks and for now for the demo I just enable this single check",
    "start": "602040",
    "end": "608100"
  },
  {
    "text": "um for for patching then we can also configure a patch location so it can emits a patch file give him the change",
    "start": "608100",
    "end": "614940"
  },
  {
    "text": "but for now for the demo it's nicer to do it in place so we'll just update the code in place once it sees a verb check",
    "start": "614940",
    "end": "621600"
  },
  {
    "text": "that it can work that it can correct for us so if we now run the build again it is now not uh yelling at us anymore",
    "start": "621600",
    "end": "628440"
  },
  {
    "text": "but it's actually doing useful work and going back you can see there's now throw new legal arguments exception that's",
    "start": "628440",
    "end": "634260"
  },
  {
    "text": "pretty cool right if you have a compiler plugin that can do it for you and it's not just doing",
    "start": "634260",
    "end": "639540"
  },
  {
    "text": "this for the debt exception check but there's many many more checks in error prone where this applies and where this",
    "start": "639540",
    "end": "645120"
  },
  {
    "text": "can be done for you so it's a little bit like autocorrect for your code only a",
    "start": "645120",
    "end": "650220"
  },
  {
    "text": "bit more useful than on your phone I would say so like I said um error prone is not just about",
    "start": "650220",
    "end": "657019"
  },
  {
    "start": "653000",
    "end": "960000"
  },
  {
    "text": "doing checks it can also rewrite but the checks that are in there so the ones that come out of the box also aren't",
    "start": "657019",
    "end": "663959"
  },
  {
    "text": "just about core Java so the example that we just saw is really a core Java pattern right it's where we have this",
    "start": "663959",
    "end": "669540"
  },
  {
    "text": "checking for enthroned exceptions that's fine but there's also some specific ones",
    "start": "669540",
    "end": "674640"
  },
  {
    "text": "for example for Androids because well it's a Google projects so of course they want to do some specific checks for",
    "start": "674640",
    "end": "680100"
  },
  {
    "text": "Android but there's also checks in there for API uses and and then wrong usage of",
    "start": "680100",
    "end": "685620"
  },
  {
    "text": "junis there's even something in there for Joe that time which by now we hopefully don't use anymore but it goes",
    "start": "685620",
    "end": "692760"
  },
  {
    "text": "to show that there's more there than just core Java patterns in error problem a lot of these checks are on by default",
    "start": "692760",
    "end": "700820"
  },
  {
    "text": "if you are actually going forwards and start using error Pro you might be a bit",
    "start": "700820",
    "end": "706740"
  },
  {
    "text": "more deliberate about what you enable and what not right because for example we disable Android checks because we",
    "start": "706740",
    "end": "712380"
  },
  {
    "text": "don't want to waste CPU Cycles because we're checking back-end Services there's no Android code in there and you might",
    "start": "712380",
    "end": "717779"
  },
  {
    "text": "also disagree maybe with some of the assessments of these checks right so some things that airplane thinks are errors you might say okay maybe it's",
    "start": "717779",
    "end": "724140"
  },
  {
    "text": "just a warning and then you can override it using the xep flag and again and give the check name then after the column",
    "start": "724140",
    "end": "729899"
  },
  {
    "text": "also configure the severity that you want to attach to it or you can turn it off if you say off of the colon as you",
    "start": "729899",
    "end": "736620"
  },
  {
    "text": "can see with the Android injection before super flag here now if you start enabling error prone on your code base",
    "start": "736620",
    "end": "742440"
  },
  {
    "text": "you might get a lot of errors and warnings of course and you could of course rewrite them and then get them in",
    "start": "742440",
    "end": "748920"
  },
  {
    "text": "order Etc but there might also be some places in your code where you're not quite ready to do that yet or where you",
    "start": "748920",
    "end": "754500"
  },
  {
    "text": "say okay I'm actually deliberately writing this course here um so I may want to have this check for other calls",
    "start": "754500",
    "end": "759899"
  },
  {
    "text": "but here I do want to make an exception and you can make that exception using the ad suppress warnings annotation",
    "start": "759899",
    "end": "765360"
  },
  {
    "text": "which is the default annotation that we also use to suppress actual real Java compiler errors and warnings right so",
    "start": "765360",
    "end": "772320"
  },
  {
    "text": "that is a very same mechanism that is used also by error Pro as it's a compiler plugin it's so close to the",
    "start": "772320",
    "end": "778200"
  },
  {
    "text": "Java compiler infrastructure that it can just use the same approach so",
    "start": "778200",
    "end": "783360"
  },
  {
    "text": "that is something that you definitely want to tackle when you start introducing error Pro so it will take a",
    "start": "783360",
    "end": "789360"
  },
  {
    "text": "bit of tweaking and it will require you to go over your code of course and see what fits and what doesn't fit in your",
    "start": "789360",
    "end": "795120"
  },
  {
    "text": "in your team in your code base now there's one other usage of error",
    "start": "795120",
    "end": "800459"
  },
  {
    "text": "prone and error prone as a compiler plugin that's not quite about a book pattern but that's also very useful",
    "start": "800459",
    "end": "806339"
  },
  {
    "text": "nevertheless and this is also something that we use at the picnic and that's using the far check",
    "start": "806339",
    "end": "812339"
  },
  {
    "text": "so you may all have this annoying co-worker who says okay we need to go fully immutable right we need to have",
    "start": "812339",
    "end": "819420"
  },
  {
    "text": "final everywhere and that makes it easy to reason etc etc and and you know there",
    "start": "819420",
    "end": "824519"
  },
  {
    "text": "are somewhat right and there's something to that but at the same time you also maybe do not want to introduce final",
    "start": "824519",
    "end": "829920"
  },
  {
    "text": "everywhere because it's also a bit noisy in your code and then sometimes really what's the points right so with error",
    "start": "829920",
    "end": "836519"
  },
  {
    "text": "prone you can also turn this a bit around and say okay if we're enabling this using errorprom and then we assume",
    "start": "836519",
    "end": "843720"
  },
  {
    "text": "all local variables and all parameters are final so not reassignable anymore",
    "start": "843720",
    "end": "850620"
  },
  {
    "text": "and if you do want to have a variable that can be muted at this and that can be reassigned then you must use this add",
    "start": "850620",
    "end": "858420"
  },
  {
    "text": "VAR annotation and then it's okay then we can allow it so it's actually flipping the defaults and I think for us",
    "start": "858420",
    "end": "864720"
  },
  {
    "text": "this this really is really helpful and we do occasionally have a few places in our code bases where we have this advert",
    "start": "864720",
    "end": "870779"
  },
  {
    "text": "annotation but it turns it a bit around right so if you want to have this reassignable variable then you need to",
    "start": "870779",
    "end": "877320"
  },
  {
    "text": "introduce a bit of noise and make it really clear this is deliberate and if you don't well then we just assume that",
    "start": "877320",
    "end": "883079"
  },
  {
    "text": "it's final which again it's not really a check or book pattern but it's an improved way of working with some of the",
    "start": "883079",
    "end": "890160"
  },
  {
    "text": "defaults that are in Java that he can do by using error prom now you might be thinking",
    "start": "890160",
    "end": "896459"
  },
  {
    "text": "um okay and there's a bit uh core Java checks in there there's maybe some libraries in there um that are covered",
    "start": "896459",
    "end": "903660"
  },
  {
    "text": "like junits as we saw but what about my specific libraries um is there anything for that and if you're looking around in",
    "start": "903660",
    "end": "910440"
  },
  {
    "text": "the ecosystem there's actually quite a few libraries that contain error-prone",
    "start": "910440",
    "end": "915660"
  },
  {
    "text": "book checks that you can hook into your annotation processor path that will be picked up by error prone and that will",
    "start": "915660",
    "end": "921720"
  },
  {
    "text": "specifically check for bug patterns and usage of the apis for example of mojito",
    "start": "921720",
    "end": "927000"
  },
  {
    "text": "or of slf4j so there's quite a few Community contributions and this",
    "start": "927000",
    "end": "932160"
  },
  {
    "text": "ecosystem is is pretty interesting to look at um and it will hopefully fit the",
    "start": "932160",
    "end": "938519"
  },
  {
    "text": "libraries that you are using when you look around but that also might raise the question",
    "start": "938519",
    "end": "944940"
  },
  {
    "text": "of if they can publish these checks and if they can create this",
    "start": "944940",
    "end": "950339"
  },
  {
    "text": "could we also do this right could we also do this for our team for our company with our particular usage and",
    "start": "950339",
    "end": "956459"
  },
  {
    "text": "our opinions about usage of apis and the question there is yes you can also do",
    "start": "956459",
    "end": "961980"
  },
  {
    "start": "960000",
    "end": "1074000"
  },
  {
    "text": "this yourself if you want to you don't have to but you can and at picnic we do and I will show some examples of that",
    "start": "961980",
    "end": "968279"
  },
  {
    "text": "later but the idea is that if you want to extend error prone if you want to start customizing it you can create your",
    "start": "968279",
    "end": "975899"
  },
  {
    "text": "own book Checker implementations and I'm going to show another demo and in this",
    "start": "975899",
    "end": "980940"
  },
  {
    "text": "demo we will have a second Maven project so next to this buggy app that we just saw and in this second project called my",
    "start": "980940",
    "end": "987899"
  },
  {
    "text": "book Checker plugin we are going to create a empty method Checker class which extends book Checker from",
    "start": "987899",
    "end": "994260"
  },
  {
    "text": "errorprom and of course we're going to implement some logic there to find empty methods",
    "start": "994260",
    "end": "1000199"
  },
  {
    "text": "in in our in our classes in our code base which are then reported as errors",
    "start": "1000199",
    "end": "1005899"
  },
  {
    "text": "if you want or as warnings however we configure it but the goal here is that we can hook into error prone and create",
    "start": "1005899",
    "end": "1011600"
  },
  {
    "text": "our own custom logic to actually find patterns and codes and flag it and even emit suggestions for that as well so we",
    "start": "1011600",
    "end": "1018320"
  },
  {
    "text": "can use it to also automatically rewrite as we just saw now once we have this this empty method",
    "start": "1018320",
    "end": "1023600"
  },
  {
    "text": "Checker class we need to put it into a jar file we need to put that jar file on The annotation processor path of error",
    "start": "1023600",
    "end": "1029780"
  },
  {
    "text": "prone as it is applies to our other application so to debuggy app and under the hood actually uses the service",
    "start": "1029780",
    "end": "1036140"
  },
  {
    "text": "loader mechanism of java to to instantiate this this book Checker and to detect them and to find them and to",
    "start": "1036140",
    "end": "1043400"
  },
  {
    "text": "make that a bit easier I'm going to use another project from Google called auto service so that we can just put an",
    "start": "1043400",
    "end": "1048558"
  },
  {
    "text": "annotation on the class and make it server loadable rather than using the old awkward way of introducing a meta",
    "start": "1048559",
    "end": "1054200"
  },
  {
    "text": "info directory which which a particular file and some some things that we need to do there we can just use an",
    "start": "1054200",
    "end": "1060200"
  },
  {
    "text": "annotation for that from from the Google auto service projects so all in all we are going to create a new jar file that",
    "start": "1060200",
    "end": "1066440"
  },
  {
    "text": "we're going to put on The annotation processor path of our application and it contains a customberg check that we are",
    "start": "1066440",
    "end": "1072260"
  },
  {
    "text": "defining that we are creating here on the spot all right so let's go to this second",
    "start": "1072260",
    "end": "1077840"
  },
  {
    "start": "1074000",
    "end": "1364000"
  },
  {
    "text": "project um I'm first going to show the pump file here again and we're going to create",
    "start": "1077840",
    "end": "1083480"
  },
  {
    "text": "this my book Checker plugin and jar file and in the compiler plugin here we see",
    "start": "1083480",
    "end": "1089240"
  },
  {
    "text": "that we're not defining error prone as a plugin because well I don't want to go full Inception here and then check the",
    "start": "1089240",
    "end": "1094400"
  },
  {
    "text": "check but I do add Google Auto Service as a compiler plugin here to make this",
    "start": "1094400",
    "end": "1099799"
  },
  {
    "text": "service loading a bit easier and we'll see how that works in a bit",
    "start": "1099799",
    "end": "1104900"
  },
  {
    "text": "of course I also need to add some dependencies because I'm going to write against the error prone API here to",
    "start": "1104900",
    "end": "1109940"
  },
  {
    "text": "implement this book check so you will also need to add this and I need to add the auto service annotation here to be",
    "start": "1109940",
    "end": "1115460"
  },
  {
    "text": "able to use this in in the code as well all right enough about the setup let's have a look at the codes",
    "start": "1115460",
    "end": "1121340"
  },
  {
    "text": "so it's still a fairly empty class here and what I'm going to do is I'm first going to make sure that this class will",
    "start": "1121340",
    "end": "1127400"
  },
  {
    "text": "be service loadable and it will be service loadable under the book Checker class type because that's what errorprone is going to look for on The",
    "start": "1127400",
    "end": "1133580"
  },
  {
    "text": "annotation processor path and in order to actually make this into",
    "start": "1133580",
    "end": "1138620"
  },
  {
    "text": "a usable bug pattern I need to use the book pattern implementation and I can say okay the name is empty",
    "start": "1138620",
    "end": "1146660"
  },
  {
    "text": "method there we go we also need to provide a summary that is shown once the error is triggered so",
    "start": "1146660",
    "end": "1152360"
  },
  {
    "text": "we don't like do nothings there we go and we also need to attach a",
    "start": "1152360",
    "end": "1159860"
  },
  {
    "text": "severity and let's make this an error because why not so that is sort of the the metadata that",
    "start": "1159860",
    "end": "1166280"
  },
  {
    "text": "we need to provide in the setup now of course we also need some way to actually implement this pattern and what",
    "start": "1166280",
    "end": "1172580"
  },
  {
    "text": "errorpron offers here is a sort of implementation of the visitor pattern so error prone hooks into the abstract",
    "start": "1172580",
    "end": "1179480"
  },
  {
    "text": "synthetic tree of the Java compilation unit that is being compiled and through this book Checker it allows us to hook",
    "start": "1179480",
    "end": "1186260"
  },
  {
    "text": "into when it detects Fields methods and other things so for this check we're only interested in in looking at methods",
    "start": "1186260",
    "end": "1193340"
  },
  {
    "text": "so I'm going to implement the method tree measure so we only have to override the match method implementation here so",
    "start": "1193340",
    "end": "1200059"
  },
  {
    "text": "this will be called for every method that is encountered during compilation now",
    "start": "1200059",
    "end": "1205400"
  },
  {
    "text": "in here we need to write some logic right so I need to say if on this method tree that has been",
    "start": "1205400",
    "end": "1212120"
  },
  {
    "text": "provided in the body looking at the statements they're empty then we want to do something right we",
    "start": "1212120",
    "end": "1219500"
  },
  {
    "text": "want to flag this so we're going to return and I'm going to use this helper method called describe match I'm going",
    "start": "1219500",
    "end": "1225380"
  },
  {
    "text": "to say this method tree that we just matched I actually want to emit a suggested fix for this so I'm going to",
    "start": "1225380",
    "end": "1232940"
  },
  {
    "text": "say suggested fix and in this case we're not going to replace or swap or whatever I'm going to suggest to delete this nose",
    "start": "1232940",
    "end": "1239900"
  },
  {
    "text": "so I'm going to suggest to delete this method tree and that's actually basically it",
    "start": "1239900",
    "end": "1245780"
  },
  {
    "text": "and all the infrastructure around the completion compiler plugin error Pro itself will take care of actually doing",
    "start": "1245780",
    "end": "1251179"
  },
  {
    "text": "the work if we want to so notice that we're not talking about line numbers Etc here we're really talking about abstract syntax tree",
    "start": "1251179",
    "end": "1257720"
  },
  {
    "text": "Concepts that are provided to us and that we can act upon with the suggested fix",
    "start": "1257720",
    "end": "1262940"
  },
  {
    "text": "um and if if there's nothing to do then we return a no match here and it will",
    "start": "1262940",
    "end": "1267980"
  },
  {
    "text": "continue on its merry way all right so um with this in place we can in this",
    "start": "1267980",
    "end": "1275360"
  },
  {
    "text": "case mavenclean install it because we need to install this jar file into a local repository and I'm going to cop",
    "start": "1275360",
    "end": "1283400"
  },
  {
    "text": "copy the coordinates that we have here so that we can add it to our first projects right and as you can see here",
    "start": "1283400",
    "end": "1290539"
  },
  {
    "text": "just do nothing methods and that's the one that we're trying to get rid of so what I'm going to do I'm going to add",
    "start": "1290539",
    "end": "1296240"
  },
  {
    "text": "another path entry to our annotation processor path at the coordinates of the newly created",
    "start": "1296240",
    "end": "1302360"
  },
  {
    "text": "jar file here and I also need to enable this check right because remember we were in patching mode and I also need to tell it",
    "start": "1302360",
    "end": "1309080"
  },
  {
    "text": "also take this new anti-method bug check into account when patching and if everything goes according to plan",
    "start": "1309080",
    "end": "1316220"
  },
  {
    "text": "we're going to call mavenclean verify run the code and poof it's gone right so",
    "start": "1316220",
    "end": "1323179"
  },
  {
    "text": "we implemented something that we thought was a bad thing to have in our code base we provided this a book check to",
    "start": "1323179",
    "end": "1328460"
  },
  {
    "text": "errorprom it runs it actually turns the suggested fix into a rewrite on our code base it does this for us and it's it's",
    "start": "1328460",
    "end": "1335840"
  },
  {
    "text": "like magic I would say right it's actually pretty cool so um with this in place you can start",
    "start": "1335840",
    "end": "1342320"
  },
  {
    "text": "thinking about applying these book checks for things that you see happening in pull requests every time and time",
    "start": "1342320",
    "end": "1348679"
  },
  {
    "text": "again right where you have the same discussion discussion over and over um and you want to actually automate",
    "start": "1348679",
    "end": "1354020"
  },
  {
    "text": "this away and that is what what error Pro makes possible using these these book checks",
    "start": "1354020",
    "end": "1359600"
  },
  {
    "text": "now let me go back to the presentation to give you a little bit of a taste of what we use custom book checks for a",
    "start": "1359600",
    "end": "1366380"
  },
  {
    "start": "1364000",
    "end": "1558000"
  },
  {
    "text": "picnic there's actually a couple of categories here so on the one hand we have some book checks that are",
    "start": "1366380",
    "end": "1371720"
  },
  {
    "text": "addressing what we would see as correctness issues with users of apis so",
    "start": "1371720",
    "end": "1377179"
  },
  {
    "text": "again it's all perfectly valid compilable Java course but the way some of the apis are used just don't fit into",
    "start": "1377179",
    "end": "1383480"
  },
  {
    "text": "a pattern of how we think they should be used for example we don't want people to",
    "start": "1383480",
    "end": "1388580"
  },
  {
    "text": "rely on the default time zones so if there are any apis that are using date and time manipulation where you can",
    "start": "1388580",
    "end": "1395360"
  },
  {
    "text": "provide a time zone you must right so and we don't want to fall back to defaults there also we want to disallow",
    "start": "1395360",
    "end": "1401720"
  },
  {
    "text": "for example the usage of local date time now and the system current time Middle East and these kind of things in favor",
    "start": "1401720",
    "end": "1407659"
  },
  {
    "text": "of an approach where we inject a clock or as of java 17 an instant source so",
    "start": "1407659",
    "end": "1413059"
  },
  {
    "text": "that we can later actually inject a mock version of that to actually mock the time and make sure that we can write",
    "start": "1413059",
    "end": "1419539"
  },
  {
    "text": "unit tests without relying on actual wall clock time so these are all things that are sort of institutional knowledge",
    "start": "1419539",
    "end": "1426919"
  },
  {
    "text": "that you together with your team build up over time and you can try to enforce using discipline and descriptions on PRS",
    "start": "1426919",
    "end": "1433460"
  },
  {
    "text": "Etc which is all good but if you can automate it the way why not do it another category of Errors is where",
    "start": "1433460",
    "end": "1440600"
  },
  {
    "text": "people use apis that will lead to runtime maybe not errors but maybe two",
    "start": "1440600",
    "end": "1445880"
  },
  {
    "text": "issues an example is this slf4j used where people might pass in a log line",
    "start": "1445880",
    "end": "1452419"
  },
  {
    "text": "using a placeholder that's actually the Java formatting place or the person s whereas as left4j expects these squarely",
    "start": "1452419",
    "end": "1460039"
  },
  {
    "text": "braces as placeholder right this all compilencies will run it will even lock something but it will not lock the thing",
    "start": "1460039",
    "end": "1465620"
  },
  {
    "text": "that you expected to lock so we we wrote a check here that actually looks at the",
    "start": "1465620",
    "end": "1471320"
  },
  {
    "text": "string and tries to see if there are any of these foreign things in there that shouldn't be there and then give you a",
    "start": "1471320",
    "end": "1477320"
  },
  {
    "text": "warning and a suggestion of replacing that and on there on the right hand side similarly you might have multiple",
    "start": "1477320",
    "end": "1483980"
  },
  {
    "text": "placeholders and only provide one of the parameters again this will not break at compile time it will also not break at a",
    "start": "1483980",
    "end": "1490520"
  },
  {
    "text": "runtime but it will not do the thing that you expect it to do so again these these are things that will prevent these",
    "start": "1490520",
    "end": "1497240"
  },
  {
    "text": "these errors from even occurring and from even being immersed into our main line",
    "start": "1497240",
    "end": "1503659"
  },
  {
    "text": "of course there's also discussions of style right and this is also something that you can use these these burp checks",
    "start": "1503659",
    "end": "1508940"
  },
  {
    "text": "these error-prone verb checks for so here's an example um where a book check actually looks at The annotation syntax and uh tries to",
    "start": "1508940",
    "end": "1516860"
  },
  {
    "text": "sort of normalize this so if you have this single valued annotation you can say value is something but you can also",
    "start": "1516860",
    "end": "1522860"
  },
  {
    "text": "emit omit the value is which we think reads nicer and we want to enforce across a code base",
    "start": "1522860",
    "end": "1529640"
  },
  {
    "text": "similarly for the annotations where you can have multiple values and you use this array Center syntax to actually",
    "start": "1529640",
    "end": "1536360"
  },
  {
    "text": "provide only a single element we say okay we'd rather have you just provide",
    "start": "1536360",
    "end": "1541460"
  },
  {
    "text": "this my Surface of class directly without the array syntax and without the trailing comma which is by the way valid",
    "start": "1541460",
    "end": "1546559"
  },
  {
    "text": "Java syntax it's just not something that we would like to see in our code base so correctness and style",
    "start": "1546559",
    "end": "1553900"
  },
  {
    "text": "these sort of issues you can tackle using error prone and these custom bug checks or even some of the book checks",
    "start": "1553900",
    "end": "1560419"
  },
  {
    "start": "1558000",
    "end": "1609000"
  },
  {
    "text": "that are provided by the community for your libraries so what's not to like well as you may",
    "start": "1560419",
    "end": "1566000"
  },
  {
    "text": "have seen I've only shown the header of these book checks right and that looks pretty but there's also an",
    "start": "1566000",
    "end": "1571460"
  },
  {
    "text": "implementation there and we already saw that to implement the book check you need to know about a Java abstract since",
    "start": "1571460",
    "end": "1577039"
  },
  {
    "text": "the syntax tree the traversal keeps States and actually implement this check which for our trivial example wasn't too",
    "start": "1577039",
    "end": "1584059"
  },
  {
    "text": "bad but even though truth your example matches too much so we would have to refine it if we actually want to put",
    "start": "1584059",
    "end": "1589820"
  },
  {
    "text": "this input into production so working with these book checks and ASDS in traversal can be quite challenging it",
    "start": "1589820",
    "end": "1596779"
  },
  {
    "text": "may be worth it but nevertheless there's a there's a learning curve there especially if you also want to emit good",
    "start": "1596779",
    "end": "1602720"
  },
  {
    "text": "replacements right if you don't just want to flag something but also want to rewrite it into something else",
    "start": "1602720",
    "end": "1608120"
  },
  {
    "text": "so that being said you might ask yourself isn't there something that we can do",
    "start": "1608120",
    "end": "1613220"
  },
  {
    "start": "1609000",
    "end": "1649000"
  },
  {
    "text": "about about this and there's also another thing that you can do using aeroprone and that is to start using",
    "start": "1613220",
    "end": "1619940"
  },
  {
    "text": "refaster with real faster you actually get a a new option where you say okay maybe",
    "start": "1619940",
    "end": "1626380"
  },
  {
    "text": "it would be better to express this this book pattern or this old pattern of usage in concrete Java syntax and also",
    "start": "1626380",
    "end": "1633799"
  },
  {
    "text": "Express the new way of writing things in concrete Java syntax and have error prone and refast to figure out how to",
    "start": "1633799",
    "end": "1640400"
  },
  {
    "text": "mention how to rewrite so that we don't have to care about that and that's also I would say quite magical if you make",
    "start": "1640400",
    "end": "1646940"
  },
  {
    "text": "this combination so I'm going to show a third and last demo for that where we are going to",
    "start": "1646940",
    "end": "1652760"
  },
  {
    "start": "1649000",
    "end": "1730000"
  },
  {
    "text": "create such a refaster template and the setup there is that we again have a new Maven project in this case it will",
    "start": "1652760",
    "end": "1660140"
  },
  {
    "text": "contain a string is empty template class and we're going to have multiple methods on there and we annotate one or more of",
    "start": "1660140",
    "end": "1668120"
  },
  {
    "text": "these methods using the add before template annotation which says okay if you see structurally this kind of code",
    "start": "1668120",
    "end": "1674659"
  },
  {
    "text": "that's where we want to match and then in the after template annotation we can",
    "start": "1674659",
    "end": "1679760"
  },
  {
    "text": "write the code and that we want it to be transformed into so it's sort of a rewrite rule or not sort of it's",
    "start": "1679760",
    "end": "1685640"
  },
  {
    "text": "actually a rewrite rule that we're expressing using concrete Java syntax now what you then need to do",
    "start": "1685640",
    "end": "1692480"
  },
  {
    "text": "is to run the Java compiler on this class using yet another compiler plugin called the refresh the resource compiler",
    "start": "1692480",
    "end": "1698960"
  },
  {
    "text": "which turns this template into something that can be executed that can be applied by our prom and this will be put into an",
    "start": "1698960",
    "end": "1706760"
  },
  {
    "text": "empty string dot refaster file in this case and that file we're going to provide to the buggy app that we just",
    "start": "1706760",
    "end": "1712880"
  },
  {
    "text": "saw that we are going to to use to do the rewriting so the actual class file of the strings",
    "start": "1712880",
    "end": "1719539"
  },
  {
    "text": "instant template will be ignored so that's actually not something that we're going to use it is all about the side effect of creating this refaster file",
    "start": "1719539",
    "end": "1726020"
  },
  {
    "text": "that can then be used by errorprone to do the rewriting right so let's go to our third project",
    "start": "1726020",
    "end": "1734299"
  },
  {
    "start": "1730000",
    "end": "1947000"
  },
  {
    "text": "again just to give you a little taste of the the setup around it we have the bomb file and an amazing",
    "start": "1734299",
    "end": "1740480"
  },
  {
    "text": "compiler plugin we are configuring a different uh compiler plugin so the",
    "start": "1740480",
    "end": "1746480"
  },
  {
    "text": "refaster rule compiler as I said and we're going to provide a output file which is in this case the enter string",
    "start": "1746480",
    "end": "1752600"
  },
  {
    "text": "dot refresh the file and on The annotation processor path we are putting the error prone refaster artifact in",
    "start": "1752600",
    "end": "1759320"
  },
  {
    "text": "this case that contains this refaster route compiler plugin we also need to add error prone refaster",
    "start": "1759320",
    "end": "1765679"
  },
  {
    "text": "as dependency because that's where the at before templates and the after templates annotations Etc leave so we",
    "start": "1765679",
    "end": "1771080"
  },
  {
    "text": "also need that on our class path now before we dive into the real rise rule",
    "start": "1771080",
    "end": "1776419"
  },
  {
    "text": "the thing that we're targeting is this expression so we have this arcs0 dot",
    "start": "1776419",
    "end": "1781700"
  },
  {
    "text": "equals empty string and as you might know there's also a very nice dot is empty method on string right which would",
    "start": "1781700",
    "end": "1788299"
  },
  {
    "text": "be much nicer to have here rather than having dot equals empty string and a bit more intention revealing so if you want",
    "start": "1788299",
    "end": "1794360"
  },
  {
    "text": "to enforce this using a refaster rewrite rule we can do that as follows so we",
    "start": "1794360",
    "end": "1800000"
  },
  {
    "text": "have this template class with two before templates and here the method name",
    "start": "1800000",
    "end": "1806360"
  },
  {
    "text": "doesn't really matter but what we're saying is that we want to match expressions of type string it doesn't",
    "start": "1806360",
    "end": "1812659"
  },
  {
    "text": "matter what's the structure of this expression is as long as it's a string as long as it evaluates to a string we",
    "start": "1812659",
    "end": "1818779"
  },
  {
    "text": "want to match it follow-up an invocation to equals with the literal empty string so that's our",
    "start": "1818779",
    "end": "1825620"
  },
  {
    "text": "precondition that's what we want to match and then you can also see that we have a",
    "start": "1825620",
    "end": "1831679"
  },
  {
    "text": "second template here where we are again matching any string expression and we",
    "start": "1831679",
    "end": "1837559"
  },
  {
    "text": "say okay we also want to match invocations of the dot length methods where we compare it to the literal zero",
    "start": "1837559",
    "end": "1843980"
  },
  {
    "text": "so this is also something that we would like to rewrite to is empty so I'm going to add the",
    "start": "1843980",
    "end": "1852440"
  },
  {
    "text": "after templates implementation here which is pretty straightforward actually where we say okay again we take this",
    "start": "1852440",
    "end": "1858140"
  },
  {
    "text": "this arbitrary string expression which would be the same as the expression that is matched here and then we rewrite it",
    "start": "1858140",
    "end": "1864919"
  },
  {
    "text": "to this expression and then dot is empty and by the way we also want to do this for any negated Expressions right so",
    "start": "1864919",
    "end": "1870799"
  },
  {
    "text": "also if it says not then we also want to apply this the same transformation so",
    "start": "1870799",
    "end": "1876919"
  },
  {
    "text": "now what we need to do is we need to not release but",
    "start": "1876919",
    "end": "1881960"
  },
  {
    "text": "let's run amazing clean verify on this and a side of the effect of that should",
    "start": "1881960",
    "end": "1887360"
  },
  {
    "text": "be that we have in our uh One Directory up the empty string dot refresh the file",
    "start": "1887360",
    "end": "1893240"
  },
  {
    "text": "and indeed that was emitted and now we are going back to our first project right which contains the code that we",
    "start": "1893240",
    "end": "1899480"
  },
  {
    "text": "want to rewrite here we go and I'm going to go into the",
    "start": "1899480",
    "end": "1905179"
  },
  {
    "text": "pom file and rather than",
    "start": "1905179",
    "end": "1910580"
  },
  {
    "text": "doing the check with the built-in checks or the custom book check that it just defined I'm going to configure it",
    "start": "1910580",
    "end": "1916159"
  },
  {
    "text": "differently and the best checks now point to a refaster file in this case which we just",
    "start": "1916159",
    "end": "1922580"
  },
  {
    "text": "emitted and again I'm going to run mavenclean verify which means that we're going to",
    "start": "1922580",
    "end": "1928520"
  },
  {
    "text": "run error prone on the codes in patching modes with in place batching in this case and I go back",
    "start": "1928520",
    "end": "1934880"
  },
  {
    "text": "it says dot is empty and it would have worked regardless of what kind of expression we would have",
    "start": "1934880",
    "end": "1940520"
  },
  {
    "text": "had here right so again this is pretty flexible in terms of of what it matches",
    "start": "1940520",
    "end": "1947360"
  },
  {
    "start": "1947000",
    "end": "2093000"
  },
  {
    "text": "so what do we use this for a picnic well one of the applications here is when you",
    "start": "1947360",
    "end": "1954440"
  },
  {
    "text": "for example move from one version of a library to another in an extreme variation of that is moving from one version of java to another version of",
    "start": "1954440",
    "end": "1960679"
  },
  {
    "text": "java so when we migrated for example to Java 11 there's lots of new goodies in",
    "start": "1960679",
    "end": "1966500"
  },
  {
    "text": "the apis right and you could say okay well from that point on we just start using it and we sort of do the Boy Scout",
    "start": "1966500",
    "end": "1972559"
  },
  {
    "text": "rule if you see something you fix it which sort of works but not all code is",
    "start": "1972559",
    "end": "1977600"
  },
  {
    "text": "touched and then you get this sort of halfway situation where some of the old apis are there and some of the new apis",
    "start": "1977600",
    "end": "1983059"
  },
  {
    "text": "are used and people are confused what should I do so why not write some refaster rules to actually make this",
    "start": "1983059",
    "end": "1988520"
  },
  {
    "text": "migration easier and not just run on Java 11 but also make the most out of the new apis that are there and one",
    "start": "1988520",
    "end": "1993919"
  },
  {
    "text": "example is the optional API where first we only have is empty on optional and then in Java 11 we got is present so",
    "start": "1993919",
    "end": "2000640"
  },
  {
    "text": "with this simple refresher rule you can easily write all of the not optional is present notifications in your code base",
    "start": "2000640",
    "end": "2007059"
  },
  {
    "text": "to optional is empty it seems small but it's super easy to do and you can",
    "start": "2007059",
    "end": "2012640"
  },
  {
    "text": "actually run it over all your repositories and we have the Tooling in place to to actually do this and we have a platform team that that makes this",
    "start": "2012640",
    "end": "2018399"
  },
  {
    "text": "happen across picnic so in that way you can very easily migrate and have a clean slate and actually start using the apis",
    "start": "2018399",
    "end": "2025120"
  },
  {
    "text": "the way you want them to so just to give another example of such a jdk based kind of thing and here you",
    "start": "2025120",
    "end": "2032919"
  },
  {
    "text": "can see that I'm using refaster or any off to do multiple matches which is kind of similar to having multiple app before",
    "start": "2032919",
    "end": "2038740"
  },
  {
    "text": "templates but here we we are rewriting the idiom of filtering on a stream of",
    "start": "2038740",
    "end": "2043779"
  },
  {
    "text": "optionals and then checking with optional ish presence if there's something in there and the mapping optional get over it to get the actual",
    "start": "2043779",
    "end": "2050320"
  },
  {
    "text": "values of the non-empty optionals to stream the flatmap optional calling column stream which also was introduced",
    "start": "2050320",
    "end": "2056858"
  },
  {
    "text": "in Java 11. an interesting thing here is that the first the top option in the refaster any off is the jdk approach",
    "start": "2056859",
    "end": "2064000"
  },
  {
    "text": "that was that we had but we also use guava as a library and it already had some sort of similar functionality in",
    "start": "2064000",
    "end": "2070480"
  },
  {
    "text": "there with a stream.flap map and then streams colon column stream and streams comes from guava but we'd rather use",
    "start": "2070480",
    "end": "2076720"
  },
  {
    "text": "just jdk functionality in this case because it's now there so we can also rewrite that so it also shows the",
    "start": "2076720",
    "end": "2082419"
  },
  {
    "text": "refaster rules are not just about core Java libraries and rewriting there but also applied to any kind of Library",
    "start": "2082419",
    "end": "2087820"
  },
  {
    "text": "where you would want to have some patterns that you match and that you rewrite into another API usage",
    "start": "2087820",
    "end": "2093520"
  },
  {
    "start": "2093000",
    "end": "2129000"
  },
  {
    "text": "and similarly we we use this also for spotting some anti-patterns in for example the use of a project reactor we",
    "start": "2093520",
    "end": "2100420"
  },
  {
    "text": "we do have quite a few projects that also use reactive programming won't go into alter the all the details here but",
    "start": "2100420",
    "end": "2106300"
  },
  {
    "text": "what you can see is that uh it's it's pretty straightforward to match any kind of API usage and rewrite it to something",
    "start": "2106300",
    "end": "2112839"
  },
  {
    "text": "that you think is best as a team in this case the fuse import policy here is",
    "start": "2112839",
    "end": "2119140"
  },
  {
    "text": "there to also make sure that the two optional methods that is used here is actually added as a static import to the",
    "start": "2119140",
    "end": "2124599"
  },
  {
    "text": "to file so that it will keep compiling and will be valid Java code",
    "start": "2124599",
    "end": "2129700"
  },
  {
    "start": "2129000",
    "end": "2172000"
  },
  {
    "text": "so using refaster is not a complete alternative to to debug checks but in",
    "start": "2129700",
    "end": "2136660"
  },
  {
    "text": "some and in a lot of situations and ones that are shown it is an easier way to get started to migrate from one sort of",
    "start": "2136660",
    "end": "2142660"
  },
  {
    "text": "fluent API information chain to another API application chain there's also the possibility to match blocks of",
    "start": "2142660",
    "end": "2149140"
  },
  {
    "text": "statements and rewrite it to other blocks of statements um that sounds on paper pretty useful",
    "start": "2149140",
    "end": "2155140"
  },
  {
    "text": "but in practice having exact sort of statements matching in multiple statements consecutive statements",
    "start": "2155140",
    "end": "2161680"
  },
  {
    "text": "matching is a bit more rare so for us it's mostly about this expression matching and having these",
    "start": "2161680",
    "end": "2168280"
  },
  {
    "text": "fluent byte lines that you rewrite from one uses to another so comparing these a bit I would say",
    "start": "2168280",
    "end": "2174880"
  },
  {
    "start": "2172000",
    "end": "2219000"
  },
  {
    "text": "read faster it's super easy to work with because you can use concrete Java syntax but there's somewhat of a limited",
    "start": "2174880",
    "end": "2181780"
  },
  {
    "text": "expressiveness in there and then there's limits to what you can do using really faster rules whereas bug checks on the",
    "start": "2181780",
    "end": "2187660"
  },
  {
    "text": "other hand give you full access to the AST you can go nuts but it's also a bit complicated and there's a steep learning",
    "start": "2187660",
    "end": "2193839"
  },
  {
    "text": "curve there so definitely pays off to really think about which of the two you actually need for the particular",
    "start": "2193839",
    "end": "2199420"
  },
  {
    "text": "challenge that you want to tackle um so and refaster rules are also only",
    "start": "2199420",
    "end": "2204579"
  },
  {
    "text": "about rewriting right so from before to after whereas bug checks can also be about just flagging some pattern and",
    "start": "2204579",
    "end": "2211359"
  },
  {
    "text": "just detecting something and then making sure that people are aware of this and fix it themselves in some some other way",
    "start": "2211359",
    "end": "2219220"
  },
  {
    "start": "2219000",
    "end": "2366000"
  },
  {
    "text": "so you might also wonder okay that's that's very cool we saw this working locally but how do you actually apply",
    "start": "2219220",
    "end": "2224260"
  },
  {
    "text": "this in your CI in your development flow um so we encourage developers to also",
    "start": "2224260",
    "end": "2230140"
  },
  {
    "text": "run this tooling locally and to make sure that everything is is okay but on the off chance that something gets",
    "start": "2230140",
    "end": "2235839"
  },
  {
    "text": "committed and then pushed to a PR where not all the rules are obased and not all of the rewrites have been applied then",
    "start": "2235839",
    "end": "2243040"
  },
  {
    "text": "this also runs as part of our CI builds and it's actually pretty straightforward so we have this this PR and there's a",
    "start": "2243040",
    "end": "2248740"
  },
  {
    "text": "certain combat right and if we run error prone in patching Mouse on this particular commit and there's a",
    "start": "2248740",
    "end": "2255579"
  },
  {
    "text": "non-empty div after doing so that means that something has changed and that thereby not all of the rewrite rules and",
    "start": "2255579",
    "end": "2261760"
  },
  {
    "text": "not all the checks have been actually applied so danger which is another nice integration tool to work with GitHub and",
    "start": "2261760",
    "end": "2268780"
  },
  {
    "text": "some of our CI tools we'll post a message to the pr saying okay please",
    "start": "2268780",
    "end": "2273940"
  },
  {
    "text": "check and run this this patch file that you can run locally to fix this",
    "start": "2273940",
    "end": "2279339"
  },
  {
    "text": "um and that way PR cannot be merged unless all of the rewrite rules have been applied and all of the bug checks",
    "start": "2279339",
    "end": "2285220"
  },
  {
    "text": "have been set up satisfied so that's uh that's the way uh we make sure that every single line of code that is",
    "start": "2285220",
    "end": "2291700"
  },
  {
    "text": "committed to to master uh actually adheres to what we think are good rules and what are good good bug checks within",
    "start": "2291700",
    "end": "2298960"
  },
  {
    "text": "picnic so there's more to tell here but it's now time to go try out this yourself as",
    "start": "2298960",
    "end": "2306160"
  },
  {
    "text": "I said it is a pretty low barrier to entry right you would just have to configure a compiler plugin to start",
    "start": "2306160",
    "end": "2312160"
  },
  {
    "text": "using it out of the box so go to the airport site I do have to give a fair warning that within picnic we are",
    "start": "2312160",
    "end": "2318160"
  },
  {
    "text": "running a fork of air prom we have Upstream some of our changes already to",
    "start": "2318160",
    "end": "2323500"
  },
  {
    "text": "Google not all of them have been accepted yet a lot of them are around sort of the ease of use of using",
    "start": "2323500",
    "end": "2330339"
  },
  {
    "text": "multiple refaster rules and combining them Etc which apparently for Google is not a big big deal because they have",
    "start": "2330339",
    "end": "2335740"
  },
  {
    "text": "probably some other tooling internally to do this but for us it is so if you also encounter this if you also are",
    "start": "2335740",
    "end": "2342160"
  },
  {
    "text": "going to use refaster at scale I would highly recommend also checking us our fork and maybe start using that one I",
    "start": "2342160",
    "end": "2349119"
  },
  {
    "text": "also want to highlight that one of my colleagues Stefan scruffus is really the brain behind this at picnic so if you",
    "start": "2349119",
    "end": "2355960"
  },
  {
    "text": "have any in-depth questions or want to just chat about the intricate details of airprom reach out to him he'd be happy",
    "start": "2355960",
    "end": "2361720"
  },
  {
    "text": "to have that chat with you and with that we're already at 40 minutes thank you so",
    "start": "2361720",
    "end": "2367780"
  },
  {
    "start": "2366000",
    "end": "2410000"
  },
  {
    "text": "much for being here and thank you for your time um I hope you enjoyed what you saw and again if you liked it",
    "start": "2367780",
    "end": "2373420"
  },
  {
    "text": "um feel free to come up and have a chat I'd be happy to answer any questions we also have a booth here and we have some",
    "start": "2373420",
    "end": "2378880"
  },
  {
    "text": "developers walking around which you can talk to as well we'd love to chat with you we'd love to even work with you",
    "start": "2378880",
    "end": "2384099"
  },
  {
    "text": "maybe as part of our platform team improving this tooling so that being said thanks for being here I hope you",
    "start": "2384099",
    "end": "2390339"
  },
  {
    "text": "are going to try this out yourself [Applause]",
    "start": "2390339",
    "end": "2400219"
  }
]