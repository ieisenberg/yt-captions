[
  {
    "start": "0",
    "end": "310000"
  },
  {
    "text": "hi everybody uh my name is Matt uh I'm going to talk to you about microservices",
    "start": "7080",
    "end": "12559"
  },
  {
    "text": "as it seems everyone else's uh so hopefully this won't overlap too much with the other talks um and basically",
    "start": "12559",
    "end": "18680"
  },
  {
    "text": "about go and how we're doing this at Mondo um so little quick intro uh as I",
    "start": "18680",
    "end": "24199"
  },
  {
    "text": "said so my name is Matt uh you can find me here on Twitter so if any questions I'll",
    "start": "24199",
    "end": "29359"
  },
  {
    "text": "be around all day um but otherwise there you can also stalk me around the internet which will be very",
    "start": "29359",
    "end": "35239"
  },
  {
    "text": "uninteresting um and I I work mainly as a backend engineer so I kind of work on",
    "start": "35239",
    "end": "41280"
  },
  {
    "text": "uh distributed systems uh I've been doing go for about three years now um kind of almost full-time um and I used",
    "start": "41280",
    "end": "48800"
  },
  {
    "text": "to run the um platform team at Halo which was uh an onand taxi app where we",
    "start": "48800",
    "end": "54280"
  },
  {
    "text": "had like a globally distributed uh go microservice platform um however today",
    "start": "54280",
    "end": "60039"
  },
  {
    "text": "I'm talking about Mondo um so Mondo is a startup for we're based in London um and",
    "start": "60039",
    "end": "66880"
  },
  {
    "text": "of all the things we thought we' do we would like to replace Banks and banks are an interesting area",
    "start": "66880",
    "end": "74520"
  },
  {
    "text": "um they've kind of been around forever um this this is how Banks kind of appear to me I go into branches uh I have like",
    "start": "74520",
    "end": "81759"
  },
  {
    "text": "weird people staring at me and I have to like queue up counters and do things and",
    "start": "81759",
    "end": "86840"
  },
  {
    "text": "certainly in the UK banks are not very good good at kind of adapting to the modern world um the the way you access",
    "start": "86840",
    "end": "94720"
  },
  {
    "text": "these things online is terrible um and fundamentally that's because at their core they're they're buil still on",
    "start": "94720",
    "end": "100079"
  },
  {
    "text": "mainframes which run Cobalt and like if you wrote Cobalt in the 60s well if you",
    "start": "100079",
    "end": "105360"
  },
  {
    "text": "wrote code in the 60s or 70s you can still run that on like Z series mainframes um and these things are",
    "start": "105360",
    "end": "111159"
  },
  {
    "text": "critical they process like billions of dollars of payments a day uh so like getting changes into those modernizing",
    "start": "111159",
    "end": "117320"
  },
  {
    "text": "them is is crazy um and as an example uh Barley's in the UK spent £3 billion",
    "start": "117320",
    "end": "123000"
  },
  {
    "text": "pound a year on it um hands up anyone who spent £3 billion P this year on it",
    "start": "123000",
    "end": "129119"
  },
  {
    "text": "one or two okay so like if you're a startup and someone gave you3 billion pounds like imagine what you could do",
    "start": "129119",
    "end": "134720"
  },
  {
    "text": "with that um and really like this this is the modern world everyone's on their smartphones so amondo we're trying to",
    "start": "134720",
    "end": "142080"
  },
  {
    "text": "change that we um with mobile first kind of smartphone app you can do basic things like",
    "start": "142080",
    "end": "149160"
  },
  {
    "text": "actually have contain ual information rather than just a dodgy statement uh so you can work out where you've been you can search with Emojis crucially uh very",
    "start": "149160",
    "end": "156760"
  },
  {
    "text": "important functionality uh and you can do things like I don't know like if you've been out for uh something where",
    "start": "156760",
    "end": "163319"
  },
  {
    "text": "you you need to record expenses you can record receipts and you can take pictures attach them to your transactions uh I actually use it to",
    "start": "163319",
    "end": "169360"
  },
  {
    "text": "attach pictures of my brunch because I like to remember what I've eaten um and other kind of really basic things like",
    "start": "169360",
    "end": "175959"
  },
  {
    "text": "being able to turn your card on and off magic in the UK that takes seven days you get a new one sent to you through",
    "start": "175959",
    "end": "181599"
  },
  {
    "text": "the post um whereas this is a a bull flag right it's a flag in the database that says whether the card works or not",
    "start": "181599",
    "end": "188159"
  },
  {
    "text": "you check it when it goes in the machine it's really not very hard um like",
    "start": "188159",
    "end": "193360"
  },
  {
    "text": "seriously maybe it's an enum like you maybe want like temporarily blocked and permanently blocked so we now have four",
    "start": "193360",
    "end": "199760"
  },
  {
    "text": "states magic um anyway so if we're going to start from scratch and if you could",
    "start": "199760",
    "end": "205799"
  },
  {
    "text": "build uh core banking infrastructure right from the ground up where would you start um usually you'd start with kind",
    "start": "205799",
    "end": "213879"
  },
  {
    "text": "of a basic application and a database and to be fair for startups this is what what you should be doing",
    "start": "213879",
    "end": "219879"
  },
  {
    "text": "um the the main challenges that startups have are really kind of like Market fit making sure you're building the right",
    "start": "219879",
    "end": "225840"
  },
  {
    "text": "thing for customers a and being able to like iterate really really",
    "start": "225840",
    "end": "231319"
  },
  {
    "text": "rapidly but we obviously hear lots of stories about how this kind of pans out over time so your application gets",
    "start": "231680",
    "end": "238200"
  },
  {
    "text": "bigger um you had more databases potentially uh maybe some searching things caching all these extra things",
    "start": "238200",
    "end": "245120"
  },
  {
    "text": "and like millions of other things that you need to like scale up your application and fundamentally you get to",
    "start": "245120",
    "end": "250760"
  },
  {
    "text": "this point where you have one gigantic thing that everyone is working on and",
    "start": "250760",
    "end": "256239"
  },
  {
    "text": "it's usually like I've seen my experience is there's kind of two aspects this there's obviously like",
    "start": "256239",
    "end": "261280"
  },
  {
    "text": "technical scaling but there's also like scaling or tee and this is a recurring theme um with companies that migrated",
    "start": "261280",
    "end": "268080"
  },
  {
    "text": "from these monolithic appli applications to microservice platforms because this is kind of what what it is like if",
    "start": "268080",
    "end": "275160"
  },
  {
    "text": "you've worked in a company which has a massive application and everyone wants to get changes in and then you have to deploy the whole thing in one go uh this",
    "start": "275160",
    "end": "282360"
  },
  {
    "text": "is my expression when I want to make some changes and there's obviously lots of",
    "start": "282360",
    "end": "288199"
  },
  {
    "text": "better ways we could take our application we can startop breaking it apart and we end up with potentially",
    "start": "288199",
    "end": "294080"
  },
  {
    "text": "lots of small discrete Services um which communicate between themselves and those",
    "start": "294080",
    "end": "299280"
  },
  {
    "text": "might be synchronous they might be restful might use RPC between them or you might use uh like event driven",
    "start": "299280",
    "end": "305120"
  },
  {
    "text": "architectures uh in which case these things will be subscribed on some for of message bus so why did we choose to",
    "start": "305120",
    "end": "312520"
  },
  {
    "start": "310000",
    "end": "408000"
  },
  {
    "text": "start with microservices at Mondo so for us we're we're integrating",
    "start": "312520",
    "end": "318720"
  },
  {
    "text": "with the banking Network and I say on the end of that because we're integrating with a lot of a lot of",
    "start": "318720",
    "end": "324440"
  },
  {
    "text": "different uh networks all sorts of things like anti-money laundering actual bank networks for every company card",
    "start": "324440",
    "end": "331280"
  },
  {
    "text": "processors those kind of things so we had to abstract these things away um if anyone's interacted with those systems",
    "start": "331280",
    "end": "337560"
  },
  {
    "text": "like we're talking I mean soap would be great like that is the level that we're",
    "start": "337560",
    "end": "342880"
  },
  {
    "text": "we're on here and I'll be honest like the soap supporting go is not amazing at the moment it it's got a couple more",
    "start": "342880",
    "end": "348960"
  },
  {
    "text": "improvements coming along",
    "start": "348960",
    "end": "352560"
  },
  {
    "text": "oh not sure what happened there um yeah the soap support is not great but I",
    "start": "356759",
    "end": "362360"
  },
  {
    "text": "mean that's infinitely better than um like binary formats which which you have to deal with like the ATM network that's",
    "start": "362360",
    "end": "368120"
  },
  {
    "text": "all like characters smoosh together and there's like these five characters are this thing and then the next six at this",
    "start": "368120",
    "end": "373800"
  },
  {
    "text": "thing and you have to pull them all apart um so for us we needed to abstract these things away uh and that meant that",
    "start": "373800",
    "end": "379520"
  },
  {
    "text": "we actually had discrete pieces of software for these things and my experience at uh my previous uh place",
    "start": "379520",
    "end": "387039"
  },
  {
    "text": "where we we moved and migrated to a microservice platform was we wanted that speed we wanted to be able to move",
    "start": "387039",
    "end": "392680"
  },
  {
    "text": "quickly and iterate different discrete sections of application and there are a few Point like kind of things that we're",
    "start": "392680",
    "end": "399360"
  },
  {
    "text": "aiming at here so single responsibility principle every every single piece of our uh infrastructure we needed to do",
    "start": "399360",
    "end": "405880"
  },
  {
    "text": "one thing and do one thing extremely well and that meant that we could focus on how it worked internally we could",
    "start": "405880",
    "end": "411919"
  },
  {
    "start": "408000",
    "end": "495000"
  },
  {
    "text": "scale it better um teams could coordinate a lot better just on that thing made them simpler so you could",
    "start": "411919",
    "end": "418160"
  },
  {
    "text": "understand exactly what was going on and an easy way to do that is to bound the context of these things so in the",
    "start": "418160",
    "end": "424199"
  },
  {
    "text": "real world that means if you have a problem space you can subdivide it into lots of discrete sections so uh banking",
    "start": "424199",
    "end": "431280"
  },
  {
    "text": "for example you tend to have bank accounts you have cards and these are easy things that you can chop apart and",
    "start": "431280",
    "end": "437720"
  },
  {
    "text": "they do one thing and on top of that you then end up with really nice interfaces so these are",
    "start": "437720",
    "end": "445039"
  },
  {
    "text": "the interfaces not just between your like technical components but also Al between the teams who are building these",
    "start": "445039",
    "end": "451039"
  },
  {
    "text": "things um and a lot of a lot of companies have talked about this having",
    "start": "451039",
    "end": "456160"
  },
  {
    "text": "welldefined interfaces means that you have very well established patterns of communication but the nice thing on top",
    "start": "456160",
    "end": "462879"
  },
  {
    "text": "of that is once you have all these things built out you get like really awesome composability so if uh one area of your company has",
    "start": "462879",
    "end": "470919"
  },
  {
    "text": "had to build like some extremely resilient like push notification system probably not that hard to write once you",
    "start": "470919",
    "end": "478360"
  },
  {
    "text": "have that you can build a features on top of this you can you don't have to rebuild this functionality every time",
    "start": "478360",
    "end": "484720"
  },
  {
    "text": "and that means actually once you've kind of done this migration step you have lots of abstracted components that you",
    "start": "484720",
    "end": "490440"
  },
  {
    "text": "can build new products on top really really quickly so why would you migrate to a",
    "start": "490440",
    "end": "496840"
  },
  {
    "start": "495000",
    "end": "685000"
  },
  {
    "text": "microservice architecture rather than starting and the real reason for this",
    "start": "496840",
    "end": "501919"
  },
  {
    "text": "and this is something that we've come up against at Mondo is unless you really really understand your problem space you",
    "start": "501919",
    "end": "508720"
  },
  {
    "text": "can't make those decisions you don't know where the contexts begin and end you you can't divide these things up and",
    "start": "508720",
    "end": "515360"
  },
  {
    "text": "that means that your interfaces then aren't defined correctly and then you have to like iterate those and that's like really painful changing all these",
    "start": "515360",
    "end": "522560"
  },
  {
    "text": "things deploying lots of different things like different versions and having to deal with all of that just because you didn't understand exactly",
    "start": "522560",
    "end": "529160"
  },
  {
    "text": "how the abstraction worked to start with is is a bit of a problem so if we were going to start",
    "start": "529160",
    "end": "536720"
  },
  {
    "text": "we'd probably have some low balance at the top with DNS Etc um and behind that",
    "start": "536720",
    "end": "541800"
  },
  {
    "text": "we'll have like some HTTP API or or some API of some form and and in our case we",
    "start": "541800",
    "end": "547680"
  },
  {
    "text": "we have this more as a routing layer so we can take this and then we can take all of our requests do like kind of SSL",
    "start": "547680",
    "end": "555720"
  },
  {
    "text": "and TLS and everything at the top do various other uh rate limiting things and then push these into some form of",
    "start": "555720",
    "end": "561240"
  },
  {
    "text": "Transport that might be HTTP between Services um well it might be a message",
    "start": "561240",
    "end": "566279"
  },
  {
    "text": "bus something like that you might use like amqp uh and then behind our services which are doing these discrete",
    "start": "566279",
    "end": "572160"
  },
  {
    "text": "jobs they'd all have their own databases and this is a very important kind of concept that these things shouldn't be",
    "start": "572160",
    "end": "578519"
  },
  {
    "text": "like accessing databases of other services one because it's just really",
    "start": "578519",
    "end": "583800"
  },
  {
    "text": "hard to manage like if if you have your really nicely defined interface at the top and then you have like abstractions",
    "start": "583800",
    "end": "591440"
  },
  {
    "text": "that you've had to build up over time where your data models may be changed if if some other Service is like directly",
    "start": "591440",
    "end": "597279"
  },
  {
    "text": "reading the database that like so once we have this kind of thing we",
    "start": "597279",
    "end": "602680"
  },
  {
    "text": "can like parcel this up run it in multiple data centers and that's it so go hands up",
    "start": "602680",
    "end": "610040"
  },
  {
    "text": "anyone here who's used go or uses go on a day-to-day basis okay a few people cool",
    "start": "610040",
    "end": "616240"
  },
  {
    "text": "so go is um obviously fairly new language and that comes with pros and",
    "start": "616240",
    "end": "621279"
  },
  {
    "text": "cons um for me go is extremely simple the language itself is really really small so it's really easy to learn it's",
    "start": "621279",
    "end": "629360"
  },
  {
    "text": "easy to pick up um and you can be productive within like productive on like a day-to-day basis within like a",
    "start": "629360",
    "end": "635279"
  },
  {
    "text": "month or two um beyond that obviously it's statically typed so if you're writing Financial applications it's",
    "start": "635279",
    "end": "641880"
  },
  {
    "text": "quite nice for you to like not randomly flip between integers and floating Point numbers that's quite important for Bank",
    "start": "641880",
    "end": "648680"
  },
  {
    "text": "balances um and then static linking means that you can compile single single",
    "start": "648680",
    "end": "654120"
  },
  {
    "text": "binaries and you can put those anywhere so you can compile them for um literally",
    "start": "654120",
    "end": "659360"
  },
  {
    "text": "Unix architecture Linux architecture uh say amd64 and you can just pop that on any machine you don't need like a",
    "start": "659360",
    "end": "665760"
  },
  {
    "text": "runtime install you don't need any dependencies and and that's",
    "start": "665760",
    "end": "670959"
  },
  {
    "text": "awesome so any of the Ops people out there like this is really cool you can like put them in like Deb packages and",
    "start": "670959",
    "end": "677360"
  },
  {
    "text": "just install it and there's no runtime dependencies it's literally like a 10m file it's",
    "start": "677360",
    "end": "682639"
  },
  {
    "text": "amazing and then on top of that go has really cool language features so concurrency is built in from the start",
    "start": "682639",
    "end": "688320"
  },
  {
    "start": "685000",
    "end": "820000"
  },
  {
    "text": "you can literally have function call and you can put go space before it and it will run concurrently now there's a pros",
    "start": "688320",
    "end": "693920"
  },
  {
    "text": "and cons that obviously um you now have like a million things running in order",
    "start": "693920",
    "end": "699120"
  },
  {
    "text": "and you have no idea what's going on um but it means it's really easy to build Network Services and the interface",
    "start": "699120",
    "end": "706440"
  },
  {
    "text": "support means that you can actually uh you can have a transport for example",
    "start": "706440",
    "end": "711480"
  },
  {
    "text": "which we come on to later um and you can have a mock transport that has exactly the same interface and you can just swap",
    "start": "711480",
    "end": "716560"
  },
  {
    "text": "it out you can swap it out literally while you're doing doing your tests so your tests might use like an in-memory",
    "start": "716560",
    "end": "722000"
  },
  {
    "text": "mock rather than having to have like loads of infrastructure running and on top of that uh the",
    "start": "722000",
    "end": "727399"
  },
  {
    "text": "standard library in go is amazing so although the language is very small and very compact the standard library has",
    "start": "727399",
    "end": "734880"
  },
  {
    "text": "stuff for everything so um networking is a good example if you want a HTTP server that's about four lines of code if you",
    "start": "734880",
    "end": "741600"
  },
  {
    "text": "want a http2 server you take those four Lars of code you wait for go 1.6 to come",
    "start": "741600",
    "end": "746720"
  },
  {
    "text": "out early next year you recompile it with no no code changes whatsoever and you have a hp2 server is Magic and like",
    "start": "746720",
    "end": "754160"
  },
  {
    "text": "that's in the the tip version of go now uh and it will be relased early next year um but but go just has these things",
    "start": "754160",
    "end": "761279"
  },
  {
    "text": "built in but if you want to actually start with like a microservice architecture we",
    "start": "761279",
    "end": "767320"
  },
  {
    "text": "we need some components to build on um although it's really easy to build like a HTTP server like it would be nice if",
    "start": "767320",
    "end": "774079"
  },
  {
    "text": "there were like higher level constructs to build these things so we don't have to write loads and loads of boiler P um",
    "start": "774079",
    "end": "779199"
  },
  {
    "text": "so in go there's a couple uh there's one called",
    "start": "779199",
    "end": "784199"
  },
  {
    "text": "gokit um which allows you to build uh really nice services and it has client",
    "start": "784839",
    "end": "790000"
  },
  {
    "text": "uh libraries that interact with that and it allows you to build like all of these extra things that you would expect from a microservice architecture or or any",
    "start": "790000",
    "end": "797360"
  },
  {
    "text": "any service oriented architecture things like circuit breaking you can build in tracing that stuff that kind of stuff um",
    "start": "797360",
    "end": "802839"
  },
  {
    "text": "micro is also really cool and there's a couple of other grpc uh which I think's come out of Google and stripe that's",
    "start": "802839",
    "end": "808040"
  },
  {
    "text": "like a cross language kind of thing so you can compile B uh bindings foro uh and kite as well um and amondo uh these",
    "start": "808040",
    "end": "815199"
  },
  {
    "text": "things didn't really exist when we started uh writing them so uh we have our own versions so we have uh Typhon",
    "start": "815199",
    "end": "822519"
  },
  {
    "start": "820000",
    "end": "1100000"
  },
  {
    "text": "which is our transport layer uh and Mercury which Builds on top of this to provide a client and server",
    "start": "822519",
    "end": "828079"
  },
  {
    "text": "implementation um so these are MIT licens they're on GitHub at those addresses and the aim of the aim of",
    "start": "828079",
    "end": "835800"
  },
  {
    "text": "pushing all of this functionality into our libraries is to allow us to with a few lines of code spin up a server and",
    "start": "835800",
    "end": "842759"
  },
  {
    "text": "then talk to it from a client and deal with all of like timeouts and kind of",
    "start": "842759",
    "end": "849160"
  },
  {
    "text": "connecting to the right things and service Discovery and we just abstract all of that away so that I can write to",
    "start": "849160",
    "end": "854360"
  },
  {
    "text": "Services really really quickly and that's really the thing that we're aiming for we're aiming for like incredible velocity that's like the main",
    "start": "854360",
    "end": "860880"
  },
  {
    "text": "selling point of us moving to this kind of architecture so to go back to our example um we have our load balancer our",
    "start": "860880",
    "end": "868639"
  },
  {
    "text": "API and then uh underneath that we have like a tier of services so we call these like",
    "start": "868639",
    "end": "875240"
  },
  {
    "text": "API services and what these do is they provide um like marshalling so if for",
    "start": "875240",
    "end": "880399"
  },
  {
    "text": "example uh we had a web hook path on our API uh which we do um that allows you to",
    "start": "880399",
    "end": "888120"
  },
  {
    "text": "register web hooks delete web hooks those kind of things so that every time you use your card in a machine uh you",
    "start": "888120",
    "end": "893800"
  },
  {
    "text": "can have registered applications which get an immediate notification but all that means is we",
    "start": "893800",
    "end": "898880"
  },
  {
    "text": "have have our API as a rooting layer which takes anything web hooks blah and",
    "start": "898880",
    "end": "904480"
  },
  {
    "text": "passes that through into this web hook API which is a discrete",
    "start": "904480",
    "end": "910040"
  },
  {
    "text": "service and once it's in this web hook API we can do anything we want um in our case we're going to pass this on to a",
    "start": "910120",
    "end": "916040"
  },
  {
    "text": "couple of other things there's probably some other things I've admitted here so we'll do things like authorization and then actually put the webbook into the",
    "start": "916040",
    "end": "922360"
  },
  {
    "text": "database and have a service that then knows and listens for transactions happening where to send these web hooks",
    "start": "922360",
    "end": "929639"
  },
  {
    "text": "and these will have their own databases um and to be honest this applies to any",
    "start": "929639",
    "end": "935079"
  },
  {
    "text": "any API in our infrastructure so uh you might have all sorts of other things happening going off to external",
    "start": "935079",
    "end": "940440"
  },
  {
    "text": "providers uh if you're taking cards you might be tokenizing them like say be going off to some third party uh",
    "start": "940440",
    "end": "946680"
  },
  {
    "text": "processor getting a token back storing the token in your database that kind of stuff but at this point we're really all",
    "start": "946680",
    "end": "953759"
  },
  {
    "text": "talking like kind of synchronous synchronous calls so we have some call that's come in it's gone to a number of",
    "start": "953759",
    "end": "959800"
  },
  {
    "text": "services we've done some database rides gone back out and we kind of joke that most of what we do is marshalling Json",
    "start": "959800",
    "end": "965440"
  },
  {
    "text": "in and out of Cassandra so we use Cassandra for most of our databases and and that's really what we're doing like",
    "start": "965440",
    "end": "970600"
  },
  {
    "text": "we get request in put some data somewhere request out um however we want",
    "start": "970600",
    "end": "976600"
  },
  {
    "text": "our uh architecture to be as resilient as possible so actually a lot of our",
    "start": "976600",
    "end": "981800"
  },
  {
    "text": "like asynchronous stuff uh is event driven and we do the the smallest number",
    "start": "981800",
    "end": "987639"
  },
  {
    "text": "of synchronous calls possible um so in the case of a card we might check that you have enough money and",
    "start": "987639",
    "end": "992839"
  },
  {
    "text": "then like log the transaction and then return back to the card machine but then there's like a huge amount of other",
    "start": "992839",
    "end": "998440"
  },
  {
    "text": "things we want to do off the back of that so when our request comes through we can",
    "start": "998440",
    "end": "1003800"
  },
  {
    "text": "then publish these events we publish them onto like an internal fire hose uh and we use uh nsq you could use Kafka",
    "start": "1003800",
    "end": "1010600"
  },
  {
    "text": "anything like that and all this is doing is publishing like a well-known uh I",
    "start": "1010600",
    "end": "1015800"
  },
  {
    "text": "think Json description in our case but a well-known like event that describes what's happens and then any number of",
    "start": "1015800",
    "end": "1022480"
  },
  {
    "text": "things can subscribe to that so if we have a number of services these is these could subscribe and then they may off",
    "start": "1022480",
    "end": "1029600"
  },
  {
    "text": "the back of that do multiple other synchronous calls emit additional events that kind of thing so we'll end up with",
    "start": "1029600",
    "end": "1035360"
  },
  {
    "text": "some other things happening and that probably gets quite complicated and uh we have no idea what's going on",
    "start": "1035360",
    "end": "1041438"
  },
  {
    "text": "anymore so when I show a service like this what what do I really mean um and",
    "start": "1041439",
    "end": "1047760"
  },
  {
    "text": "in go as I said these are discrete binaries they're are single program single process that runs on a machine we",
    "start": "1047760",
    "end": "1053240"
  },
  {
    "text": "run lots of copies of each one um but inside these we obviously have like a",
    "start": "1053240",
    "end": "1058799"
  },
  {
    "text": "lot of things going on so in our case we break this up into",
    "start": "1058799",
    "end": "1064360"
  },
  {
    "text": "kind of three main areas um right at the top we have a number of handlers so these are the the methods the end points",
    "start": "1064360",
    "end": "1071039"
  },
  {
    "text": "that are called when we get requested uh obviously they'll have some logic associated with them um and underneath",
    "start": "1071039",
    "end": "1077480"
  },
  {
    "text": "that I've put storage here but I'm I mean like other things so like databases putting things on cues calling external",
    "start": "1077480",
    "end": "1083679"
  },
  {
    "text": "providers that kind of stuff um and in our case we're using our Mercury library",
    "start": "1083679",
    "end": "1089120"
  },
  {
    "text": "to to provide this kind of service obstruction um but all that's doing is letting you register multiple functions",
    "start": "1089120",
    "end": "1095840"
  },
  {
    "text": "uh which are called and these have um an interface like this so this is a",
    "start": "1095840",
    "end": "1102240"
  },
  {
    "start": "1100000",
    "end": "1565000"
  },
  {
    "text": "go interface uh there's a type it's called Handler and it's a function that takes a request and returns a respon",
    "start": "1102240",
    "end": "1108760"
  },
  {
    "text": "resp and an error and this is a very common patterning go um a lot of function calls will return things and",
    "start": "1108760",
    "end": "1115760"
  },
  {
    "text": "you can it's got multiple multiple return values uh and then an error as the last parameter which may be nil if",
    "start": "1115760",
    "end": "1121159"
  },
  {
    "text": "there was no error or an error that matches a particular error interface and the really cool thing about go",
    "start": "1121159",
    "end": "1128200"
  },
  {
    "text": "interfaces is that any anything that matches this that has this function",
    "start": "1128200",
    "end": "1134039"
  },
  {
    "text": "signature uh can be used as a Handler so you could have a struct that has all sorts of dat inside it all sorts of",
    "start": "1134039",
    "end": "1140320"
  },
  {
    "text": "other methods but as long as it has a a method that takes a request and returns a response and an error then you can use",
    "start": "1140320",
    "end": "1146480"
  },
  {
    "text": "that as uh as a Handler um so we register a number of these and",
    "start": "1146480",
    "end": "1154480"
  },
  {
    "text": "then uh we have a transport which uh we push things in and out of so again this",
    "start": "1154520",
    "end": "1161039"
  },
  {
    "text": "is really simple we can have any form of transport it could be HTTP it could be",
    "start": "1161039",
    "end": "1166159"
  },
  {
    "text": "amqp some kind of asynchronous message bus and it has lots of things which we don't",
    "start": "1166159",
    "end": "1171640"
  },
  {
    "text": "really care about um because the important ones are that we need to be able to listen for new things coming in",
    "start": "1171640",
    "end": "1177280"
  },
  {
    "text": "we need to stop listening if you want to shut that down and for every message we maybe want to uh we want to respond and",
    "start": "1177280",
    "end": "1184440"
  },
  {
    "text": "if we want to send new uh requests to other services so any like again in go",
    "start": "1184440",
    "end": "1191080"
  },
  {
    "text": "we can use the interfaces here to literally put anything as long as it matches this interface as a transport",
    "start": "1191080",
    "end": "1196480"
  },
  {
    "text": "that we can send messages to and from and in our case we we use amqp internally so we have a really nice",
    "start": "1196480",
    "end": "1203200"
  },
  {
    "text": "transport for that uh but when we do tests we don't want to run like rabbit mq and other things so we can uh have an",
    "start": "1203200",
    "end": "1209919"
  },
  {
    "text": "inmemory mock which satisfies this and pretends that it's moving things between services and actually all of our event",
    "start": "1209919",
    "end": "1216080"
  },
  {
    "text": "driven stuff uh goes through this as well so the only difference is that we're sending request and not not",
    "start": "1216080",
    "end": "1221960"
  },
  {
    "text": "expecting a response and the cool thing there is that if we're using the same interface we can register the same",
    "start": "1221960",
    "end": "1228120"
  },
  {
    "text": "middleware with with everything that we're doing so we can get all sorts of things for",
    "start": "1228120",
    "end": "1234039"
  },
  {
    "text": "free and then on top of this we'll have various storage things so uh we we push",
    "start": "1234039",
    "end": "1240760"
  },
  {
    "text": "as many things into libraries as we can um and these kind of give you like a lot",
    "start": "1240760",
    "end": "1246640"
  },
  {
    "text": "of a lot of stuff and the really cool thing here is like the aim of of",
    "start": "1246640",
    "end": "1252360"
  },
  {
    "text": "templating services is that we want uh me if I want to add some more",
    "start": "1252360",
    "end": "1257600"
  },
  {
    "text": "functionality I don't want to do deal with any of this stuff like I don't want to deal with monitoring that should just be magic right um I should be able to SP",
    "start": "1257600",
    "end": "1265799"
  },
  {
    "text": "fire up a new service and as long as I've like followed our path I write some functions that provide some",
    "start": "1265799",
    "end": "1271200"
  },
  {
    "text": "functionality they do anything I want I then compile it ship it it goes through our build process we deploy it and the",
    "start": "1271200",
    "end": "1278480"
  },
  {
    "text": "fact that these are like known functions means that I should get timing data off",
    "start": "1278480",
    "end": "1283840"
  },
  {
    "text": "that I should be able to record the number of errors and record the errors but I shouldn't have to deal with that if I'm just writing the logic in the",
    "start": "1283840",
    "end": "1290000"
  },
  {
    "text": "middle so being able to like push all of these things into like your templating",
    "start": "1290000",
    "end": "1296039"
  },
  {
    "text": "system is really cool because you can like knock Services out in like 20 minutes like I want a new section of IPI",
    "start": "1296039",
    "end": "1302880"
  },
  {
    "text": "all I have to do is clone a template write some code which is literally a",
    "start": "1302880",
    "end": "1308159"
  },
  {
    "text": "function and then I can ship that uh onto our infrastructure and that new",
    "start": "1308159",
    "end": "1314320"
  },
  {
    "text": "subsection of our API now doesn't 404 now now we actually have some functionality",
    "start": "1314320",
    "end": "1320240"
  },
  {
    "text": "and things like service Discovery are like quite complicated but if you can",
    "start": "1320240",
    "end": "1325440"
  },
  {
    "text": "push those things down and deal with the fact that once a binary is running it needs to be like heartbeating to other",
    "start": "1325440",
    "end": "1331360"
  },
  {
    "text": "things these things are kind of solve problems largely um service Discovery you can use things like console uh if",
    "start": "1331360",
    "end": "1337600"
  },
  {
    "text": "you build your own you can build it on top of ecd or zookeeper um configuration either You' be using uh like either",
    "start": "1337600",
    "end": "1345640"
  },
  {
    "text": "command line Flags or uh config files or in our case we we have a separate config",
    "start": "1345640",
    "end": "1351240"
  },
  {
    "text": "service which we make requests to and from and the nice thing there is that we can register callbacks so that when our",
    "start": "1351240",
    "end": "1357240"
  },
  {
    "text": "Cassandra IPS change like I don't want to know about that I've written some software that like just wants to have",
    "start": "1357240",
    "end": "1363480"
  },
  {
    "text": "some Cassandra and write data into that and read it and I'm going to assume that",
    "start": "1363480",
    "end": "1369039"
  },
  {
    "text": "the when the service uh when our Cassandra servers go up and down that our configuration service will change the IPS will change in that and then my",
    "start": "1369039",
    "end": "1375720"
  },
  {
    "text": "service will automatically update so once we have our block our discrete",
    "start": "1375720",
    "end": "1382279"
  },
  {
    "text": "binary that we can ship um obviously we need some way to deploy this um and a",
    "start": "1382279",
    "end": "1387840"
  },
  {
    "text": "nice easy way to do that is with Docker um maybe yeah",
    "start": "1387840",
    "end": "1395360"
  },
  {
    "text": "so for us um if you're writing stuff in go you actually get a lot of the advantages without containerization so",
    "start": "1395360",
    "end": "1403880"
  },
  {
    "text": "if you uh I used to work on PHP applications in which case you had like",
    "start": "1403880",
    "end": "1409240"
  },
  {
    "text": "huge number of dependencies you had to manage all of those and getting the right dependencies with like the right",
    "start": "1409240",
    "end": "1414840"
  },
  {
    "text": "PHP extensions on every machine was like an absolute nightmare so putting those in containers",
    "start": "1414840",
    "end": "1421520"
  },
  {
    "text": "is awesome because you have a discrete unit you can ship and it works in every environment but actually with go you",
    "start": "1421520",
    "end": "1427080"
  },
  {
    "text": "already have a discrete unit there's no runtime dependency so the main things you're gaining by containerization are",
    "start": "1427080",
    "end": "1432480"
  },
  {
    "text": "the tooling that you can use around Docker the whole Docker ecosystem and also like the basic things like cgroups",
    "start": "1432480",
    "end": "1438080"
  },
  {
    "text": "but you could could do that yourself um so in our case we we package these up into Docker containers um and the cool",
    "start": "1438080",
    "end": "1445279"
  },
  {
    "text": "thing is because there's no runtime dependency you can make the containers really small so you can use scratch images um Has anyone used scratch images",
    "start": "1445279",
    "end": "1453159"
  },
  {
    "text": "here like one person okay so uh if you're using like an abunto image that's",
    "start": "1453159",
    "end": "1459440"
  },
  {
    "text": "like huge so you've got what like a 500 Meg container and then you have a 10 Meg binary inside it and it has no",
    "start": "1459440",
    "end": "1464760"
  },
  {
    "text": "dependencies on any of the stuff inside this container but you just have to ship this Mass image around um whereas in go",
    "start": "1464760",
    "end": "1471279"
  },
  {
    "text": "you don't need that you can literally compile your binary you can put that inside a scratch container magic uh",
    "start": "1471279",
    "end": "1478320"
  },
  {
    "text": "however although I said go was statically linked uh that's not always",
    "start": "1478320",
    "end": "1484200"
  },
  {
    "text": "quite true um and you have to provide specific build flags to make sure it does actually link against well link",
    "start": "1484200",
    "end": "1490640"
  },
  {
    "text": "statically rather than using stuff like the the native DNS resolver um otherwise obviously you can't make request",
    "start": "1490640",
    "end": "1496080"
  },
  {
    "text": "anything um and on top of that uh a scratch container doesn't have any of",
    "start": "1496080",
    "end": "1501799"
  },
  {
    "text": "your root uh certificates so you a common problem is that you would put",
    "start": "1501799",
    "end": "1507080"
  },
  {
    "text": "your thing in a container you ship that and now you can't do TLS which is a bad thing um so you can literally copy your",
    "start": "1507080",
    "end": "1513840"
  },
  {
    "text": "certificates into your container and then you're good and the end result is you have like a 10 Meg container maybe",
    "start": "1513840",
    "end": "1519200"
  },
  {
    "text": "15 and you can push that into any number of different services so uh Google Cloud",
    "start": "1519200",
    "end": "1524880"
  },
  {
    "text": "you've got Google container engine uh ECS the container service on Amazon uh",
    "start": "1524880",
    "end": "1529960"
  },
  {
    "text": "or mesos or kubernetes uh and in our case we use mesos so we use uh Marathon scheduler and that means that we can",
    "start": "1529960",
    "end": "1537120"
  },
  {
    "text": "tell it to run n number of containers we can give it constraints like um anti-affinity so it won't run more than",
    "start": "1537120",
    "end": "1544440"
  },
  {
    "text": "one of the same containers on the same host um and other things like uh please",
    "start": "1544440",
    "end": "1551000"
  },
  {
    "text": "distribute these evenly across multiple racks multiple data centers and run like a number of them in each one of these",
    "start": "1551000",
    "end": "1557279"
  },
  {
    "text": "areas and if they restart uh if they die then restart them uh that kind of",
    "start": "1557279",
    "end": "1562360"
  },
  {
    "text": "thing so the main problem we have having done this is that we've got a huge",
    "start": "1562360",
    "end": "1569600"
  },
  {
    "start": "1565000",
    "end": "1938000"
  },
  {
    "text": "number of extremely simple components and Adan talked about uh how things are complicated and sometimes they need to",
    "start": "1569600",
    "end": "1576080"
  },
  {
    "text": "be um I'd say in in our case some of these things",
    "start": "1576080",
    "end": "1582440"
  },
  {
    "text": "are other things probably would have been easier if we just built it as one application uh but the the benit",
    "start": "1582440",
    "end": "1588279"
  },
  {
    "text": "benefits you get over time will will vastly outweigh that and the way that we can kind of deal with this mainly is by",
    "start": "1588279",
    "end": "1595360"
  },
  {
    "text": "testing so we can fire huge quantities of traffic at our microservice",
    "start": "1595360",
    "end": "1601039"
  },
  {
    "text": "architecture um but we're doing specific types of testing right um we need to do load testing obviously it'd be nice to",
    "start": "1601039",
    "end": "1607240"
  },
  {
    "text": "know at what point we'll fail over so we can do like capacity planning uh and really know how how well our individual",
    "start": "1607240",
    "end": "1613960"
  },
  {
    "text": "components perform and then we can decide which areas to optimize however specifically in our case we need",
    "start": "1613960",
    "end": "1620520"
  },
  {
    "text": "extremely high up time um everyone needs high up time right so we need to be doing failure testing and we want to be",
    "start": "1620520",
    "end": "1626799"
  },
  {
    "text": "doing this continuously so if we have our tests running we want to be terminating services nodes databases",
    "start": "1626799",
    "end": "1632679"
  },
  {
    "text": "those kinds of things and asserting that our our like system still works um and",
    "start": "1632679",
    "end": "1640480"
  },
  {
    "text": "also we're doing degradation testing now for me this is the really important one so uh I don't know if anyone's had I'm",
    "start": "1640480",
    "end": "1646640"
  },
  {
    "text": "going to pick M cashion as an examp example um something where your service is just really slow but is not dead um",
    "start": "1646640",
    "end": "1655760"
  },
  {
    "text": "in which case what tends to happen is if it's dead you go all the way through you",
    "start": "1655760",
    "end": "1661080"
  },
  {
    "text": "try and read or write to your other system it dies immediately and then you get a response and the response is an",
    "start": "1661080",
    "end": "1667440"
  },
  {
    "text": "error but that's fine um whereas if if say that takes like 200 milliseconds",
    "start": "1667440",
    "end": "1673640"
  },
  {
    "text": "longer than usual then these things kind of tend to back up and then you have potentially like retries and you get",
    "start": "1673640",
    "end": "1679720"
  },
  {
    "text": "this cascading failure all the way through your system um and this has happened to me before uh mcash took 100",
    "start": "1679720",
    "end": "1685720"
  },
  {
    "text": "milliseconds longer than we were expecting uh we didn't have a timeout um and the end result was that we took",
    "start": "1685720",
    "end": "1691519"
  },
  {
    "text": "everything down everything crashed and um as long as we're putting timeouts in there so that we we fail",
    "start": "1691519",
    "end": "1697679"
  },
  {
    "text": "fast then we can kind of get around these things but we need to be testing that that those things do actually",
    "start": "1697679",
    "end": "1702840"
  },
  {
    "text": "happen and you can um you can do this on on Linux quite easily you can use IP tables to like simulate um simulate",
    "start": "1702840",
    "end": "1709760"
  },
  {
    "text": "delay uh or a good one that we had on Amazon was where the connection was in an established state and it accepted the",
    "start": "1709760",
    "end": "1717159"
  },
  {
    "text": "packets but the packets didn't make it through the interface they just got dropped so like our timeouts were like",
    "start": "1717159",
    "end": "1723159"
  },
  {
    "text": "it's cool it's connected connected within the timeout it's all good and then nothing um which again took us down",
    "start": "1723159",
    "end": "1730279"
  },
  {
    "text": "completely so The Next Step Beyond that is then monitoring um and monitoring is",
    "start": "1730279",
    "end": "1735760"
  },
  {
    "text": "is an interesting one there's a huge range of different type of monitoring you can do um in our case we we do the",
    "start": "1735760",
    "end": "1741240"
  },
  {
    "text": "standard kind of like monitoring individual nodes but monitoring your services is where you can like do really",
    "start": "1741240",
    "end": "1747159"
  },
  {
    "text": "cool stuff so uh we provide internally a another kind of like go uh interface so",
    "start": "1747159",
    "end": "1753640"
  },
  {
    "text": "any function that returns an error and optionally a map of like additional information um and what we do is every",
    "start": "1753640",
    "end": "1761399"
  },
  {
    "text": "service can uh the interface allows you to just register multiple ones of these and then our library will take care of",
    "start": "1761399",
    "end": "1767720"
  },
  {
    "text": "like actually passing these back to the monitoring service and heartbeating so we can determine whether the machine is",
    "start": "1767720",
    "end": "1773200"
  },
  {
    "text": "still up and the service is still up but that these health checks are now failing and these could be anything these could",
    "start": "1773200",
    "end": "1778840"
  },
  {
    "text": "be connecting to your database they could be counting the number of outbound TCP connections if you're like making",
    "start": "1778840",
    "end": "1785000"
  },
  {
    "text": "lots of outbound things so you can work out if you're like slowly filling up uh",
    "start": "1785000",
    "end": "1790559"
  },
  {
    "text": "like beyond the number that you'd really want to to be running but for us crucially um the thing we want to do is",
    "start": "1790559",
    "end": "1797279"
  },
  {
    "text": "Monitor our business logic so uh who has acceptance tests please everyone put",
    "start": "1797279",
    "end": "1803559"
  },
  {
    "text": "your hands up okay there's lots good um what I found really is uh go has",
    "start": "1803559",
    "end": "1813480"
  },
  {
    "text": "really good testing infrastructure buildin so you can really really quickly write tests and run them it's super fast",
    "start": "1813480",
    "end": "1820519"
  },
  {
    "text": "and you can mock things with interfaces so it's great but if you have an extremely like simple application it's",
    "start": "1820519",
    "end": "1826919"
  },
  {
    "text": "very uh it's easy to like write lots of easy unit tests that always pass and",
    "start": "1826919",
    "end": "1832399"
  },
  {
    "text": "then it's it's you have to put a bit more effort into write ones that actually provide real value and equally",
    "start": "1832399",
    "end": "1837679"
  },
  {
    "text": "if the internals of your service are changing all the time then those unit tests are of more limited value",
    "start": "1837679",
    "end": "1843440"
  },
  {
    "text": "especially if you have a request that passes through lots of different systems it's really those kind of Integrations",
    "start": "1843440",
    "end": "1848640"
  },
  {
    "text": "the interfaces that you want to test so if you have acceptance tests that run through all of your infrastructure and",
    "start": "1848640",
    "end": "1855799"
  },
  {
    "text": "exercise all the real code paths that your customer customers use then those are a much better way of testing the",
    "start": "1855799",
    "end": "1861440"
  },
  {
    "text": "system and like for us fundamentally like customers are the only important",
    "start": "1861440",
    "end": "1866600"
  },
  {
    "text": "thing it doesn't matter if like our services are like screaming and all these things are down if you can still",
    "start": "1866600",
    "end": "1872440"
  },
  {
    "text": "get money out of a cash machine and if the app still works but it's like in a degraded State then that's a lot better",
    "start": "1872440",
    "end": "1878440"
  },
  {
    "text": "than if everything's broken so we have like uh obviously you have standard out",
    "start": "1878440",
    "end": "1883600"
  },
  {
    "text": "of band kind of things you can ping the API you can make sure that these machines having a free memory that kind",
    "start": "1883600",
    "end": "1889880"
  },
  {
    "text": "of thing but then beyond that actually having like inband stuff that's going through the same transport as your as",
    "start": "1889880",
    "end": "1897159"
  },
  {
    "text": "your customers are using and running your acceptance test in production but with like fake accounts if you can do",
    "start": "1897159",
    "end": "1903559"
  },
  {
    "text": "that um that's a much much better way of testing because you can assert that the customers are not seeing broken Behavior",
    "start": "1903559",
    "end": "1910039"
  },
  {
    "text": "or that they're seeing a specific degraded experience um and in our case we do this we we like simulate money",
    "start": "1910039",
    "end": "1916600"
  },
  {
    "text": "transfers which are real transfers they go through the same production infrastructure um And We Just Bounce",
    "start": "1916600",
    "end": "1921840"
  },
  {
    "text": "these between specific accounts and those tests are running from infrastructure that's outside of our",
    "start": "1921840",
    "end": "1927000"
  },
  {
    "text": "data center so we run it through our normal API so it's exactly the same experience and beyond that um if you",
    "start": "1927000",
    "end": "1935240"
  },
  {
    "text": "have a complicated infrastructure then tracing is probably the best way to understand how these things",
    "start": "1935240",
    "end": "1942639"
  },
  {
    "start": "1938000",
    "end": "2315000"
  },
  {
    "text": "interact so there's a lot of different approaches here um Zipkin is a a great",
    "start": "1942840",
    "end": "1947960"
  },
  {
    "text": "tool that you can use to fire off information all the way through uh your thing and what what I mean by that is if",
    "start": "1947960",
    "end": "1953600"
  },
  {
    "text": "we have three different Services we have a request response kind of thing all the way through then right at the top we can",
    "start": "1953600",
    "end": "1960200"
  },
  {
    "text": "generate some unique ID for every request something big like type four random U um and then we can pass that",
    "start": "1960200",
    "end": "1967559"
  },
  {
    "text": "through uh our request so we can pass that along um and pass that through to",
    "start": "1967559",
    "end": "1973200"
  },
  {
    "text": "the next service and then we can understand like we we can add instrumentation data with this request",
    "start": "1973200",
    "end": "1979840"
  },
  {
    "text": "ID so we can understand how that one request flowed all the way through our different components um and in go you",
    "start": "1979840",
    "end": "1986760"
  },
  {
    "text": "you want to propag propagate this context so there's a a really cool context Library um which again has a",
    "start": "1986760",
    "end": "1994799"
  },
  {
    "text": "particular interface so actually what you can do is you can build there's various things here but the one we're interested in is uh this value thing um",
    "start": "1994799",
    "end": "2002840"
  },
  {
    "text": "and that is a key value store it's immutable though so it's completely thread safe you get like a new context",
    "start": "2002840",
    "end": "2009120"
  },
  {
    "text": "each time um but the cool thing is all you have to do is satisfy this interface",
    "start": "2009120",
    "end": "2014960"
  },
  {
    "text": "so actually our request type has this method on and therefore it satisfies the",
    "start": "2014960",
    "end": "2020080"
  },
  {
    "text": "context interface and we can pass it through any tooling and there's various libraries that allow you to use this",
    "start": "2020080",
    "end": "2025519"
  },
  {
    "text": "specific interface and then you can do things like put a trace ID in right at the beginning pass it all the way down",
    "start": "2025519",
    "end": "2031080"
  },
  {
    "text": "the chain and then pull it out at the end so if we have our interface uh our",
    "start": "2031080",
    "end": "2036559"
  },
  {
    "text": "our request like this we can send specific uh sections like instrument",
    "start": "2036559",
    "end": "2041799"
  },
  {
    "text": "specific things uh like timing data uh which host every one of these Services running on and we can fire all of these",
    "start": "2041799",
    "end": "2048240"
  },
  {
    "text": "things off um either into something like Zipkin or uh Mondo we have a tool called",
    "start": "2048240",
    "end": "2053960"
  },
  {
    "text": "phosphor which is similar um and what that's doing is taking all of the various bits aggregating all of those",
    "start": "2053960",
    "end": "2061240"
  },
  {
    "text": "things together and spitting out a massive blob of text like this which is clearly very useful um but but the cool",
    "start": "2061240",
    "end": "2068240"
  },
  {
    "text": "thing is you can then actually like understand what's going on because you can generate like tracing uh tracing",
    "start": "2068240",
    "end": "2074800"
  },
  {
    "text": "things so this is actually uh a real one from our our interface um so this is I",
    "start": "2074800",
    "end": "2081000"
  },
  {
    "text": "put my card in a machine typed in my pin or use like paywave and uh we have a request into our API and that goes into",
    "start": "2081000",
    "end": "2088480"
  },
  {
    "text": "a specific card API goes into a card processing thing we then do various things like checking that you have",
    "start": "2088480",
    "end": "2094240"
  },
  {
    "text": "enough money uh that the card is actually real that's thing um and the",
    "start": "2094240",
    "end": "2099440"
  },
  {
    "text": "end result is that we do all this synchronously and then we fire an asynchronous event to say that a",
    "start": "2099440",
    "end": "2105520"
  },
  {
    "text": "transaction was created with all the various information and a lot of things can then subscribe to that and do really",
    "start": "2105520",
    "end": "2111800"
  },
  {
    "text": "cool stuff so we then uh have a thing that goes off and takes the very small",
    "start": "2111800",
    "end": "2117320"
  },
  {
    "text": "amount of data that we get and tries to use like for square uh and Google Places to like identify which actual shop this",
    "start": "2117320",
    "end": "2124280"
  },
  {
    "text": "is um which is something you don't get in a on a normal Bank State and we can do that and then once we've",
    "start": "2124280",
    "end": "2130440"
  },
  {
    "text": "done that we might publish another event to say that this has been enriched uh and then the end result of that is we",
    "start": "2130440",
    "end": "2136640"
  },
  {
    "text": "have something that actually puts it into the feed in the app and then fares",
    "start": "2136640",
    "end": "2141839"
  },
  {
    "text": "a push notification which again is asynchronous and all of these things we have like really nice break points so if",
    "start": "2141839",
    "end": "2148520"
  },
  {
    "text": "our like if something crazy is going on our whole push notification thing is down then those things will just cue and",
    "start": "2148520",
    "end": "2155359"
  },
  {
    "text": "as soon as it comes back up we'll send them all through um but those things won't affect our card processing uh and",
    "start": "2155359",
    "end": "2162599"
  },
  {
    "text": "I mean the timeout that we have here is about 100 milliseconds that's the contract we have with our our car processor so we need to do as as small a",
    "start": "2162599",
    "end": "2169280"
  },
  {
    "text": "number of things as possible within that synchronous uh time frame and then everything else later but the cool thing",
    "start": "2169280",
    "end": "2176160"
  },
  {
    "text": "is this might take ages but it doesn't I get like a push notification like this which crucially has a coffee cup because",
    "start": "2176160",
    "end": "2182079"
  },
  {
    "text": "we know it's a coffee shop and I get that before the receipt prints in the machine it's like 200 milliseconds",
    "start": "2182079",
    "end": "2188200"
  },
  {
    "text": "so like again this is not hard stuff it's like really easy technology but like is not something I can get with any",
    "start": "2188200",
    "end": "2194880"
  },
  {
    "text": "existing Bank um so these things are quite easy to build um and then uh this",
    "start": "2194880",
    "end": "2202119"
  },
  {
    "text": "is actually a gross simplification of of what we do which is more like that uh",
    "start": "2202119",
    "end": "2207880"
  },
  {
    "text": "lots of other things happen um and the cool thing is as well like we have like all the edges between the services right",
    "start": "2207880",
    "end": "2213920"
  },
  {
    "text": "so we can measure these we can measure timing data we know whether they eded or failed we know the percentage of those",
    "start": "2213920",
    "end": "2219640"
  },
  {
    "text": "that up in 95th 99th and the upper uh measurements so we can do cool things like build like visualizations that map",
    "start": "2219640",
    "end": "2225839"
  },
  {
    "text": "all of our services communicating to each other um so why um why would you",
    "start": "2225839",
    "end": "2232920"
  },
  {
    "text": "choose go if you were Building Services um so for me it's small it's like simple",
    "start": "2232920",
    "end": "2238839"
  },
  {
    "text": "and the language itself is really really easy to learn um it's got amazing concurrency so for Network Services it's",
    "start": "2238839",
    "end": "2245560"
  },
  {
    "text": "perfect you can like spin off tons and like tens or hundreds of thousands of go routines and run them concurrently and",
    "start": "2245560",
    "end": "2251160"
  },
  {
    "text": "the memory usage is quite low the garbage collector is really good um and all of that just kind of is really easy",
    "start": "2251160",
    "end": "2256640"
  },
  {
    "text": "to work with uh interface is are amazing because you can like mock stuff uh and swap out transports and makes your code",
    "start": "2256640",
    "end": "2262119"
  },
  {
    "text": "really really easy um and the networking support is really cool so downsides",
    "start": "2262119",
    "end": "2268119"
  },
  {
    "text": "um not a huge number of people in here have used go so that's one downside obviously it's a new thing to learn um",
    "start": "2268119",
    "end": "2274720"
  },
  {
    "text": "and for all its pros like the The Standard Life Li is great you always need third party libraries to do things",
    "start": "2274720",
    "end": "2281040"
  },
  {
    "text": "and being a younger language those are very in quality um there used to be",
    "start": "2281040",
    "end": "2287240"
  },
  {
    "text": "problems with dependency management uh that's kind of now solved but that involves usually copying the entire",
    "start": "2287240",
    "end": "2293640"
  },
  {
    "text": "dependency tree into your repository and locking it at that version so if you",
    "start": "2293640",
    "end": "2299119"
  },
  {
    "text": "were starting with microservices uh or migrating away from a monolithic application I'd give go a shop it's uh",
    "start": "2299119",
    "end": "2306720"
  },
  {
    "text": "really easy to use and you can plug it in just with a HTTP server and that's about it thank you very much",
    "start": "2306720",
    "end": "2314760"
  }
]