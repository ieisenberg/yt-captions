[
  {
    "text": "i'm dave thomas and it's my pleasure to",
    "start": "640",
    "end": "2320"
  },
  {
    "text": "be with",
    "start": "2320",
    "end": "3040"
  },
  {
    "text": "uh martin odersky of course the uh a",
    "start": "3040",
    "end": "6480"
  },
  {
    "text": "very famous father escala and uh",
    "start": "6480",
    "end": "9599"
  },
  {
    "text": "which is uh an impressive journey from",
    "start": "9599",
    "end": "12320"
  },
  {
    "text": "uh",
    "start": "12320",
    "end": "13440"
  },
  {
    "text": "research into a language which is",
    "start": "13440",
    "end": "16640"
  },
  {
    "text": "uh taking off and i think in your slides",
    "start": "16640",
    "end": "18880"
  },
  {
    "text": "today showed something over a hundred",
    "start": "18880",
    "end": "20320"
  },
  {
    "text": "thousand",
    "start": "20320",
    "end": "21520"
  },
  {
    "text": "uh you know projected users it's always",
    "start": "21520",
    "end": "23760"
  },
  {
    "text": "difficult to tell exactly what's",
    "start": "23760",
    "end": "24960"
  },
  {
    "text": "difficult to tell but that's right",
    "start": "24960",
    "end": "26400"
  },
  {
    "text": "certainly a lot of you know serious",
    "start": "26400",
    "end": "28160"
  },
  {
    "text": "commercial users like twitter and so on",
    "start": "28160",
    "end": "30240"
  },
  {
    "text": "well-known",
    "start": "30240",
    "end": "31599"
  },
  {
    "text": "guild group and so on so martin gave a",
    "start": "31599",
    "end": "35120"
  },
  {
    "text": "great talk on",
    "start": "35120",
    "end": "36960"
  },
  {
    "text": "the simple parts of scala and",
    "start": "36960",
    "end": "40559"
  },
  {
    "text": "i think for you know one of the",
    "start": "40559",
    "end": "42640"
  },
  {
    "text": "criticisms that people have sort of said",
    "start": "42640",
    "end": "44559"
  },
  {
    "text": "is that jay it's really",
    "start": "44559",
    "end": "45840"
  },
  {
    "text": "kind of a melting pot language in some",
    "start": "45840",
    "end": "48399"
  },
  {
    "text": "senses it's got some java",
    "start": "48399",
    "end": "50079"
  },
  {
    "text": "some haskell some you know",
    "start": "50079",
    "end": "53360"
  },
  {
    "text": "and so on and i think today you",
    "start": "53360",
    "end": "56399"
  },
  {
    "text": "you cleared that up but maybe for um you",
    "start": "56399",
    "end": "58879"
  },
  {
    "text": "know our audience",
    "start": "58879",
    "end": "60320"
  },
  {
    "text": "who have yet to see your talk but we'll",
    "start": "60320",
    "end": "62559"
  },
  {
    "text": "hopefully",
    "start": "62559",
    "end": "63440"
  },
  {
    "text": "see it live or on video you could sort",
    "start": "63440",
    "end": "65760"
  },
  {
    "text": "of maybe",
    "start": "65760",
    "end": "66799"
  },
  {
    "text": "summarize the the key features that you",
    "start": "66799",
    "end": "69680"
  },
  {
    "text": "think are important for people to learn",
    "start": "69680",
    "end": "71600"
  },
  {
    "text": "when they're really adopting scala",
    "start": "71600",
    "end": "74960"
  },
  {
    "text": "okay so scada is a language that",
    "start": "74960",
    "end": "79119"
  },
  {
    "text": "spans a wide spectrum not only because",
    "start": "79119",
    "end": "81439"
  },
  {
    "text": "it's both functional and object oriented",
    "start": "81439",
    "end": "83280"
  },
  {
    "text": "but also",
    "start": "83280",
    "end": "84240"
  },
  {
    "text": "because it can grow into new languages",
    "start": "84240",
    "end": "86880"
  },
  {
    "text": "it's a very good substrate to build new",
    "start": "86880",
    "end": "88720"
  },
  {
    "text": "domain-specific languages on",
    "start": "88720",
    "end": "90720"
  },
  {
    "text": "and that can make for a very confusing",
    "start": "90720",
    "end": "93040"
  },
  {
    "text": "tower of babel",
    "start": "93040",
    "end": "94159"
  },
  {
    "text": "that people build all sorts of languages",
    "start": "94159",
    "end": "96960"
  },
  {
    "text": "as scala libraries",
    "start": "96960",
    "end": "98240"
  },
  {
    "text": "and those are all undeniably useful in",
    "start": "98240",
    "end": "101040"
  },
  {
    "text": "the",
    "start": "101040",
    "end": "101920"
  },
  {
    "text": "specific application domain but",
    "start": "101920",
    "end": "104399"
  },
  {
    "text": "sometimes it can get very overwhelming",
    "start": "104399",
    "end": "106880"
  },
  {
    "text": "so what i try to do in the talk is",
    "start": "106880",
    "end": "109200"
  },
  {
    "text": "actually",
    "start": "109200",
    "end": "110240"
  },
  {
    "text": "take a step back and says well let's",
    "start": "110240",
    "end": "112880"
  },
  {
    "text": "let's leave all the domain specific",
    "start": "112880",
    "end": "114640"
  },
  {
    "text": "languages and advanced libraries aside",
    "start": "114640",
    "end": "116880"
  },
  {
    "text": "if it's just scada what's the core of",
    "start": "116880",
    "end": "119040"
  },
  {
    "text": "scala what are we really talking about",
    "start": "119040",
    "end": "122159"
  },
  {
    "text": "and the word i",
    "start": "122159",
    "end": "125520"
  },
  {
    "text": "came up with it's a very old",
    "start": "125520",
    "end": "127119"
  },
  {
    "text": "characterization that it's really a",
    "start": "127119",
    "end": "128640"
  },
  {
    "text": "modular language",
    "start": "128640",
    "end": "130560"
  },
  {
    "text": "modular means it's built from simple",
    "start": "130560",
    "end": "133120"
  },
  {
    "text": "parts that can be combined in",
    "start": "133120",
    "end": "134959"
  },
  {
    "text": "interesting ways and i was trying to",
    "start": "134959",
    "end": "137440"
  },
  {
    "text": "identify those simple parts",
    "start": "137440",
    "end": "139440"
  },
  {
    "text": "that help people essentially compose",
    "start": "139440",
    "end": "141840"
  },
  {
    "text": "programs",
    "start": "141840",
    "end": "143040"
  },
  {
    "text": "decompose programs and abstract over",
    "start": "143040",
    "end": "145120"
  },
  {
    "text": "programs",
    "start": "145120",
    "end": "146160"
  },
  {
    "text": "what we had there were seven features",
    "start": "146160",
    "end": "148560"
  },
  {
    "text": "one was that",
    "start": "148560",
    "end": "150640"
  },
  {
    "text": "everything is an expression everything",
    "start": "150640",
    "end": "152640"
  },
  {
    "text": "can be nested",
    "start": "152640",
    "end": "154000"
  },
  {
    "text": "data can be constructed and",
    "start": "154000",
    "end": "155680"
  },
  {
    "text": "deconstructed in dual so that's",
    "start": "155680",
    "end": "157760"
  },
  {
    "text": "case classes and pattern matching",
    "start": "157760",
    "end": "160400"
  },
  {
    "text": "functions are values",
    "start": "160400",
    "end": "162000"
  },
  {
    "text": "but you can also fall back to the state",
    "start": "162000",
    "end": "164560"
  },
  {
    "text": "machine behavior of recursion",
    "start": "164560",
    "end": "166879"
  },
  {
    "text": "immutable collections are a backbone for",
    "start": "166879",
    "end": "168959"
  },
  {
    "text": "what we do",
    "start": "168959",
    "end": "170080"
  },
  {
    "text": "and a uh the right amount and the",
    "start": "170080",
    "end": "173440"
  },
  {
    "text": "typical very modest amount of mutable",
    "start": "173440",
    "end": "175360"
  },
  {
    "text": "state that you mix in the whole thing",
    "start": "175360",
    "end": "176959"
  },
  {
    "text": "and",
    "start": "176959",
    "end": "177519"
  },
  {
    "text": "that for me is sort of the trait of",
    "start": "177519",
    "end": "179599"
  },
  {
    "text": "successful scala programming and",
    "start": "179599",
    "end": "181840"
  },
  {
    "text": "that's what i was talking about today i",
    "start": "181840",
    "end": "184000"
  },
  {
    "text": "thought it was very effectively",
    "start": "184000",
    "end": "185120"
  },
  {
    "text": "communicated",
    "start": "185120",
    "end": "186239"
  },
  {
    "text": "it's great to have you",
    "start": "186239",
    "end": "189200"
  },
  {
    "text": "now some of the big users of scallops",
    "start": "189280",
    "end": "192159"
  },
  {
    "text": "come",
    "start": "192159",
    "end": "192480"
  },
  {
    "text": "from the haskell community and there's a",
    "start": "192480",
    "end": "196840"
  },
  {
    "text": "particular uh dialect of a skeleton",
    "start": "196840",
    "end": "199680"
  },
  {
    "text": "uh you know say a dsl uh scala zed",
    "start": "199680",
    "end": "204560"
  },
  {
    "text": "which has a sort of strong opinion about",
    "start": "204560",
    "end": "206480"
  },
  {
    "text": "you know really",
    "start": "206480",
    "end": "207920"
  },
  {
    "text": "wanting the monadic approach and",
    "start": "207920",
    "end": "211519"
  },
  {
    "text": "higher order types and so on um",
    "start": "211519",
    "end": "216000"
  },
  {
    "text": "they've they've argued that you know the",
    "start": "216400",
    "end": "219200"
  },
  {
    "text": "mod ad implementation with",
    "start": "219200",
    "end": "220879"
  },
  {
    "text": "tr trampoline and so on can be quite",
    "start": "220879",
    "end": "223920"
  },
  {
    "text": "inefficient but i think what you showed",
    "start": "223920",
    "end": "226000"
  },
  {
    "text": "today is really it's a lot of cases",
    "start": "226000",
    "end": "227519"
  },
  {
    "text": "where you don't really need",
    "start": "227519",
    "end": "229280"
  },
  {
    "text": "to take the monetic approach for a lot",
    "start": "229280",
    "end": "231519"
  },
  {
    "text": "of things right",
    "start": "231519",
    "end": "232799"
  },
  {
    "text": "yeah so so monarchs are great just to",
    "start": "232799",
    "end": "235200"
  },
  {
    "text": "put put",
    "start": "235200",
    "end": "235920"
  },
  {
    "text": "put that right we use them all the time",
    "start": "235920",
    "end": "238319"
  },
  {
    "text": "because monarchs are options and lists",
    "start": "238319",
    "end": "240319"
  },
  {
    "text": "and futures and everything all these",
    "start": "240319",
    "end": "241840"
  },
  {
    "text": "things are monads",
    "start": "241840",
    "end": "243519"
  },
  {
    "text": "and they're under the surface but they",
    "start": "243519",
    "end": "246560"
  },
  {
    "text": "are they are library abstractions",
    "start": "246560",
    "end": "248400"
  },
  {
    "text": "people people use as a matter of fact",
    "start": "248400",
    "end": "250239"
  },
  {
    "text": "without even seeing them as monarchs",
    "start": "250239",
    "end": "251840"
  },
  {
    "text": "right that's just things that have this",
    "start": "251840",
    "end": "253519"
  },
  {
    "text": "phonetic nature",
    "start": "253519",
    "end": "254799"
  },
  {
    "text": "and we use essentially that all the time",
    "start": "254799",
    "end": "256639"
  },
  {
    "text": "and four expressions in",
    "start": "256639",
    "end": "258880"
  },
  {
    "text": "scala very convenient syntactic sugar",
    "start": "258880",
    "end": "261120"
  },
  {
    "text": "over",
    "start": "261120",
    "end": "261919"
  },
  {
    "text": "any computations over our joy monarch so",
    "start": "261919",
    "end": "264160"
  },
  {
    "text": "all this is great",
    "start": "264160",
    "end": "265919"
  },
  {
    "text": "but haskell is a different language from",
    "start": "265919",
    "end": "268639"
  },
  {
    "text": "scala in the sense that",
    "start": "268639",
    "end": "270479"
  },
  {
    "text": "it is a lazy functional language and it",
    "start": "270479",
    "end": "273040"
  },
  {
    "text": "is a pure functional language and those",
    "start": "273040",
    "end": "274960"
  },
  {
    "text": "two things go to",
    "start": "274960",
    "end": "276400"
  },
  {
    "text": "go together because it turns out that",
    "start": "276400",
    "end": "278240"
  },
  {
    "text": "once you're lazy you really can't be",
    "start": "278240",
    "end": "280639"
  },
  {
    "text": "cavalier about having effects anymore",
    "start": "280639",
    "end": "282639"
  },
  {
    "text": "because you don't know when they will",
    "start": "282639",
    "end": "283759"
  },
  {
    "text": "happen",
    "start": "283759",
    "end": "284240"
  },
  {
    "text": "so you need to be pure i i talk to simon",
    "start": "284240",
    "end": "287600"
  },
  {
    "text": "peyton jones a lot and one thing he said",
    "start": "287600",
    "end": "289520"
  },
  {
    "text": "is you can debate about whether laziness",
    "start": "289520",
    "end": "291520"
  },
  {
    "text": "is the right thing or not",
    "start": "291520",
    "end": "292720"
  },
  {
    "text": "in fact that's the thing that i guess uh",
    "start": "292720",
    "end": "295759"
  },
  {
    "text": "most most language communities have",
    "start": "295759",
    "end": "297520"
  },
  {
    "text": "stayed away from laziness",
    "start": "297520",
    "end": "298880"
  },
  {
    "text": "but it says laziness the big thing in",
    "start": "298880",
    "end": "300479"
  },
  {
    "text": "haskell was it kept us pure",
    "start": "300479",
    "end": "302000"
  },
  {
    "text": "so that is one very clear and rigid",
    "start": "302000",
    "end": "304960"
  },
  {
    "text": "model of function programming",
    "start": "304960",
    "end": "306400"
  },
  {
    "text": "which is not shared by scala so scala is",
    "start": "306400",
    "end": "308560"
  },
  {
    "text": "more in the ml tradition that you have a",
    "start": "308560",
    "end": "310880"
  },
  {
    "text": "strict functional language and you do",
    "start": "310880",
    "end": "312560"
  },
  {
    "text": "have side effects",
    "start": "312560",
    "end": "313840"
  },
  {
    "text": "but you can express essentially",
    "start": "313840",
    "end": "317039"
  },
  {
    "text": "a pure functional language by",
    "start": "317039",
    "end": "318479"
  },
  {
    "text": "encapsulating all effects in monarchs",
    "start": "318479",
    "end": "321199"
  },
  {
    "text": "and that's what scalar z does and i",
    "start": "321199",
    "end": "323919"
  },
  {
    "text": "think it's a possibility to do that but",
    "start": "323919",
    "end": "326000"
  },
  {
    "text": "it's not really",
    "start": "326000",
    "end": "327759"
  },
  {
    "text": "for me the natural way to go about scala",
    "start": "327759",
    "end": "329919"
  },
  {
    "text": "programming uh",
    "start": "329919",
    "end": "331280"
  },
  {
    "text": "for me the natural way to deal with",
    "start": "331280",
    "end": "333199"
  },
  {
    "text": "effects still waits to be invented i'm",
    "start": "333199",
    "end": "335600"
  },
  {
    "text": "actually quite hopeful that we will find",
    "start": "335600",
    "end": "337199"
  },
  {
    "text": "something in the next five years say",
    "start": "337199",
    "end": "339199"
  },
  {
    "text": "that will be practical",
    "start": "339199",
    "end": "341600"
  },
  {
    "text": "and for that reason i would say",
    "start": "341600",
    "end": "343919"
  },
  {
    "text": "definitely",
    "start": "343919",
    "end": "344800"
  },
  {
    "text": "function programming is about managing",
    "start": "344800",
    "end": "346800"
  },
  {
    "text": "effects about",
    "start": "346800",
    "end": "347840"
  },
  {
    "text": "minimizing effects but we do not",
    "start": "347840",
    "end": "350160"
  },
  {
    "text": "necessarily at the present point have to",
    "start": "350160",
    "end": "352560"
  },
  {
    "text": "capture that",
    "start": "352560",
    "end": "353360"
  },
  {
    "text": "laminar type system this it might be",
    "start": "353360",
    "end": "355680"
  },
  {
    "text": "implicit a pretty implicit",
    "start": "355680",
    "end": "357680"
  },
  {
    "text": "understanding that well in your program",
    "start": "357680",
    "end": "360160"
  },
  {
    "text": "you want to minimize effects that's what",
    "start": "360160",
    "end": "361759"
  },
  {
    "text": "function programming is",
    "start": "361759",
    "end": "363120"
  },
  {
    "text": "that's my current viewpoint on it and i",
    "start": "363120",
    "end": "365199"
  },
  {
    "text": "know that not everyone shares it",
    "start": "365199",
    "end": "367520"
  },
  {
    "text": "well we all have our perspective that's",
    "start": "367520",
    "end": "370400"
  },
  {
    "text": "right",
    "start": "370400",
    "end": "371120"
  },
  {
    "text": "and sure in terms of the implementation",
    "start": "371120",
    "end": "375600"
  },
  {
    "text": "you know the there's been some work at",
    "start": "375600",
    "end": "377360"
  },
  {
    "text": "the jvm level but",
    "start": "377360",
    "end": "379600"
  },
  {
    "text": "i think it's uh it's uh clearly to be",
    "start": "379600",
    "end": "381759"
  },
  {
    "text": "applauded we were talking to both the",
    "start": "381759",
    "end": "383759"
  },
  {
    "text": "john dunovich from ibm and george saab",
    "start": "383759",
    "end": "386880"
  },
  {
    "text": "from",
    "start": "386880",
    "end": "387440"
  },
  {
    "text": "oracle um however they don't they're",
    "start": "387440",
    "end": "390960"
  },
  {
    "text": "still a bit short for",
    "start": "390960",
    "end": "392400"
  },
  {
    "text": "what uh functional programming uh could",
    "start": "392400",
    "end": "395840"
  },
  {
    "text": "use",
    "start": "395840",
    "end": "396560"
  },
  {
    "text": "in terms of you know i mean you have to",
    "start": "396560",
    "end": "398960"
  },
  {
    "text": "you do a lot of work",
    "start": "398960",
    "end": "400319"
  },
  {
    "text": "to get tail recursion for example and",
    "start": "400319",
    "end": "403520"
  },
  {
    "text": "yeah yeah so uh jdk8 with the lambdas is",
    "start": "403520",
    "end": "407520"
  },
  {
    "text": "great for us because it will give us",
    "start": "407520",
    "end": "408960"
  },
  {
    "text": "more a more lightweight implementation",
    "start": "408960",
    "end": "410720"
  },
  {
    "text": "of closures",
    "start": "410720",
    "end": "411440"
  },
  {
    "text": "to all functional languages so this is a",
    "start": "411440",
    "end": "413039"
  },
  {
    "text": "big step forward i'm also very",
    "start": "413039",
    "end": "416000"
  },
  {
    "text": "glad about the default methods and",
    "start": "416000",
    "end": "417840"
  },
  {
    "text": "interfaces because these will be",
    "start": "417840",
    "end": "419680"
  },
  {
    "text": "give us a much more direct",
    "start": "419680",
    "end": "420960"
  },
  {
    "text": "implementation of a lot of the things we",
    "start": "420960",
    "end": "422880"
  },
  {
    "text": "do in trades so all these things are",
    "start": "422880",
    "end": "424400"
  },
  {
    "text": "definitely good",
    "start": "424400",
    "end": "425360"
  },
  {
    "text": "but yeah of course in a functional",
    "start": "425360",
    "end": "426800"
  },
  {
    "text": "language you would like to have",
    "start": "426800",
    "end": "428880"
  },
  {
    "text": "always more particular native tail",
    "start": "428880",
    "end": "431360"
  },
  {
    "text": "recursions would be nice",
    "start": "431360",
    "end": "433199"
  },
  {
    "text": "multiple values would be nice so that",
    "start": "433199",
    "end": "435599"
  },
  {
    "text": "you could multiple returns could be nice",
    "start": "435599",
    "end": "437919"
  },
  {
    "text": "and i actually i hear that that is",
    "start": "437919",
    "end": "439599"
  },
  {
    "text": "planned for java 10.",
    "start": "439599",
    "end": "441039"
  },
  {
    "text": "so in fact it's i would say overall it's",
    "start": "441039",
    "end": "443680"
  },
  {
    "text": "a great platform to be on because it",
    "start": "443680",
    "end": "445440"
  },
  {
    "text": "definitely moves in the right direction",
    "start": "445440",
    "end": "447039"
  },
  {
    "text": "even though sometimes",
    "start": "447039",
    "end": "448319"
  },
  {
    "text": "the movement is slower than you would",
    "start": "448319",
    "end": "449759"
  },
  {
    "text": "like it to be but that's life",
    "start": "449759",
    "end": "451759"
  },
  {
    "text": "is there any activity in scala for the",
    "start": "451759",
    "end": "454000"
  },
  {
    "text": "clr",
    "start": "454000",
    "end": "455280"
  },
  {
    "text": "uh no there was some some sort of starts",
    "start": "455280",
    "end": "458639"
  },
  {
    "text": "but",
    "start": "458639",
    "end": "459440"
  },
  {
    "text": "there was some and we have uh there's no",
    "start": "459440",
    "end": "462400"
  },
  {
    "text": "recent activity",
    "start": "462400",
    "end": "463919"
  },
  {
    "text": "on the clr part of the reason is that",
    "start": "463919",
    "end": "467599"
  },
  {
    "text": "they are very good and established",
    "start": "467599",
    "end": "469199"
  },
  {
    "text": "competitors on the clr",
    "start": "469199",
    "end": "471280"
  },
  {
    "text": "c-sharp is a more functional language",
    "start": "471280",
    "end": "472960"
  },
  {
    "text": "than java is and then there's f-sharp of",
    "start": "472960",
    "end": "475360"
  },
  {
    "text": "course which is a direct port of an",
    "start": "475360",
    "end": "477199"
  },
  {
    "text": "ml-like language so since both are",
    "start": "477199",
    "end": "480560"
  },
  {
    "text": "supported by microsoft it's sort of",
    "start": "480560",
    "end": "482879"
  },
  {
    "text": "an uphill struggle to say we want to",
    "start": "482879",
    "end": "485599"
  },
  {
    "text": "establish",
    "start": "485599",
    "end": "486240"
  },
  {
    "text": "a third language that somehow fits",
    "start": "486240",
    "end": "487919"
  },
  {
    "text": "between c-sharp and f-sharp",
    "start": "487919",
    "end": "489599"
  },
  {
    "text": "i think they're they're easier targets",
    "start": "489599",
    "end": "491919"
  },
  {
    "text": "for us and we concentrate on them",
    "start": "491919",
    "end": "494000"
  },
  {
    "text": "that's good well thank you very much",
    "start": "494000",
    "end": "496720"
  },
  {
    "text": "martin for talking to us and uh",
    "start": "496720",
    "end": "498960"
  },
  {
    "text": "uh if you don't get to hear martin live",
    "start": "498960",
    "end": "501360"
  },
  {
    "text": "uh you",
    "start": "501360",
    "end": "502080"
  },
  {
    "text": "do want to try and uh check out the",
    "start": "502080",
    "end": "504319"
  },
  {
    "text": "slides are online and",
    "start": "504319",
    "end": "506319"
  },
  {
    "text": "his video will be online in the coming",
    "start": "506319",
    "end": "509120"
  },
  {
    "text": "months so",
    "start": "509120",
    "end": "510479"
  },
  {
    "text": "you know make sure you find out about",
    "start": "510479",
    "end": "512719"
  },
  {
    "text": "scala the simple parts",
    "start": "512719",
    "end": "514320"
  },
  {
    "text": "thank you thanks great to see you",
    "start": "514320",
    "end": "519039"
  }
]