[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "Hello, and welcome to another episode of \"GOTO \nUnscripted.\" We're here in GOTO Copenhagen,  ",
    "start": "12960",
    "end": "18060"
  },
  {
    "text": "and I'm joined by the wonderful \nChristian Clausen, who's from Denmark. ",
    "start": "18060",
    "end": "21900"
  },
  {
    "text": "Thank you. Yes, my name is Christian \nClausen. I'm from Denmark. I've  ",
    "start": "23580",
    "end": "27240"
  },
  {
    "start": "27000",
    "end": "148000"
  },
  {
    "text": "written a book called \"Five Lines of Code.\"\nWell, that's what I wanted to pick up on it,  ",
    "start": "27240",
    "end": "30360"
  },
  {
    "text": "I was speaking to some people who'd come \nfrom another country. And they were from  ",
    "start": "30360",
    "end": "35220"
  },
  {
    "text": "a huge big bank and I said, \"Was GOTO Copenhagen \nuseful this morning?\" And they said, \"We'd been  ",
    "start": "35220",
    "end": "40500"
  },
  {
    "text": "to two sessions and one of them was particularly \namazing. And it was \"Five Lines of Code.\" I said,  ",
    "start": "40500",
    "end": "46320"
  },
  {
    "text": "\"I'd noticed the title, and I wanted to dive into \nwhat does \"Five Lines of Code\" means.\" So yeah,  ",
    "start": "46320",
    "end": "50820"
  },
  {
    "text": "you've written a book, \"Five Lines of Code,\" \nis that all the code we ever gonna write? ",
    "start": "50820",
    "end": "54840"
  },
  {
    "text": "It's the length of a method. Of course, it's to \nbe a little bit controversial and to be a little  ",
    "start": "54840",
    "end": "59880"
  },
  {
    "text": "bit catchy in the title.\nOf course. ",
    "start": "59880",
    "end": "60840"
  },
  {
    "text": "But it's also because I found that... For a \nlong time, I've been a very strong advocate  ",
    "start": "60840",
    "end": "66420"
  },
  {
    "text": "that we need more quality, and we need more \nrefactoring, and we need people to do it.  ",
    "start": "66420",
    "end": "69479"
  },
  {
    "text": "And I've been wondering... I find it super \namazing to have a clean codebase. And it's  ",
    "start": "69480",
    "end": "73620"
  },
  {
    "text": "super fun to work with. Why are people \nnot doing it then? Why do we have all  ",
    "start": "73620",
    "end": "78900"
  },
  {
    "text": "these legacy code bases? Why does no one fix it?\nSo, for many years, I was recommending books like  ",
    "start": "78900",
    "end": "85500"
  },
  {
    "text": "\"Clean Code\" and Martin Fowler's \"Refactoring\" \nbook and stuff. But what I found was every time  ",
    "start": "85500",
    "end": "90660"
  },
  {
    "text": "people came back and they said, \"Yes, they're, \nthey're good books,\" and I'm like, \"Okay, do  ",
    "start": "90660",
    "end": "94500"
  },
  {
    "text": "you do it then, in your work?\" And they're like, \n\"Nah, it doesn't fit or it's a bit difficult. I  ",
    "start": "94500",
    "end": "99420"
  },
  {
    "text": "can't get started with it. I don't quite have \na good handhold on the things.\" And I'm like,  ",
    "start": "99420",
    "end": "103799"
  },
  {
    "text": "\"Well, but there's a code smells, right? They \nsay exactly where you need to fix stuff.\"",
    "start": "103800",
    "end": "108180"
  },
  {
    "text": "And people were still like, \"Yeah, but it's like \nit says, 'Don't have long methods.' That's the  ",
    "start": "108180",
    "end": "113820"
  },
  {
    "text": "classical one,\" right? But if you have just two \nseniors on the team, having them agree on what is  ",
    "start": "113820",
    "end": "119460"
  },
  {
    "text": "too long is impossible already but then you have \nsometimes up to five or nine people on a team that  ",
    "start": "119460",
    "end": "125159"
  },
  {
    "text": "didn't have to agree. And so, what I figured was, \nwhat if I sit down and I digest all of the code  ",
    "start": "125160",
    "end": "130679"
  },
  {
    "text": "smells into some nice, concrete, actionable \nrules that people can then easily follow and  ",
    "start": "130680",
    "end": "136319"
  },
  {
    "text": "spot without having to think about extra stuff \nand adding extra complexity? So, the first rule  ",
    "start": "136320",
    "end": "141180"
  },
  {
    "text": "I came up with was five lines of code. As I said, \nwhen our method is too long, it's past five lines.",
    "start": "141180",
    "end": "147659"
  },
  {
    "text": "Okay. So it's not about necessarily, \nvastly reducing the amount of code  ",
    "start": "147660",
    "end": "152100"
  },
  {
    "start": "148000",
    "end": "403000"
  },
  {
    "text": "and trying to encapsulate your business \nlogic only into five lines. In a way,  ",
    "start": "152100",
    "end": "156360"
  },
  {
    "text": "it's splitting up a bigger code base using more \nmethods, using better classes, I would presume  ",
    "start": "156360",
    "end": "161100"
  },
  {
    "text": "as well. And is that for more understandable code, \nso other people can iterate on it and other people  ",
    "start": "161100",
    "end": "167940"
  },
  {
    "text": "can understand it? Or what is the sort of end \ngoal of thinking in the five lines of code? ",
    "start": "167940",
    "end": "173280"
  },
  {
    "text": "That's a very interesting point, especially \nbecause I sort of split architecture into a few  ",
    "start": "173280",
    "end": "179220"
  },
  {
    "text": "different categories. One of the degrees or one of \nthe various where I split it was to make it more  ",
    "start": "179220",
    "end": "185100"
  },
  {
    "text": "readable or to make it more maintainable. Because \nthere's a lot of confusion between these two. And  ",
    "start": "185100",
    "end": "190080"
  },
  {
    "text": "if people don't distinguish between the two, \nthey'll... They have different sorts of impact  ",
    "start": "190080",
    "end": "194820"
  },
  {
    "text": "in different scopes. So, for instance, something \nwhere you're improving the naming of variables  ",
    "start": "194820",
    "end": "200220"
  },
  {
    "text": "or method names, that makes the code more \nreadable, for sure but it has no impact on the  ",
    "start": "200220",
    "end": "205080"
  },
  {
    "text": "architecture and on the maintainability of that \ncode because it's still connected to other things. ",
    "start": "205080",
    "end": "209400"
  },
  {
    "text": "That's because the maintainability depends largely \non two things, the coupling, two other things,  ",
    "start": "209400",
    "end": "214140"
  },
  {
    "text": "and invariants in the code that you need... Both \nare things you need to keep track of while you're  ",
    "start": "214140",
    "end": "218460"
  },
  {
    "text": "working with it. And so I focus almost entirely \non the maintainability aspect and actually having  ",
    "start": "218460",
    "end": "225360"
  },
  {
    "text": "the architecture be improved. And I think I have \na small section about naming things. But I really,  ",
    "start": "225360",
    "end": "231180"
  },
  {
    "text": "really tried hard not to talk about it because \nnaming is notoriously unsolvable and it's really  ",
    "start": "231180",
    "end": "237299"
  },
  {
    "text": "difficult. And I can't do better than North \nalready has done with his paper. They call  ",
    "start": "237300",
    "end": "242760"
  },
  {
    "text": "things... I don't even remember what it's called. \nBut it's a really good article he has on it. ",
    "start": "242760",
    "end": "247680"
  },
  {
    "text": "So how would you explain to people who are \nthinking more methods, that are actually  ",
    "start": "247680",
    "end": "254099"
  },
  {
    "text": "adding more complexity to my code? You want \nless coupling, which means interdependent  ",
    "start": "254100",
    "end": "258299"
  },
  {
    "text": "systems. There's then a communication \nchannel between those separate systems,  ",
    "start": "258300",
    "end": "261959"
  },
  {
    "text": "and now then talking about microservices, I \nthink gotta handle additional complexity. So,  ",
    "start": "261960",
    "end": "266940"
  },
  {
    "text": "on one hand, you've got the simplicity of the \nunderstandable maintainability of your code  ",
    "start": "266940",
    "end": "270960"
  },
  {
    "text": "but your code is talking to other \nbits of code across something else. ",
    "start": "271920",
    "end": "275460"
  },
  {
    "text": "Yes. And I especially love a quote by John \nCarmack who said that you can trade perceived  ",
    "start": "276180",
    "end": "283800"
  },
  {
    "text": "complexity for actual complexity, right? \nAdding another layer of indirection will  ",
    "start": "283800",
    "end": "287220"
  },
  {
    "text": "make the code more difficult to understand \nbut it will make it seem simpler. And so,  ",
    "start": "287220",
    "end": "291540"
  },
  {
    "text": "I also like to talk about two different types of \nabstraction. There is a true abstraction where  ",
    "start": "291540",
    "end": "296880"
  },
  {
    "text": "I'll never need to get underneath and look \nat what's under the abstraction. This is a  ",
    "start": "296880",
    "end": "301560"
  },
  {
    "text": "true abstraction and it has truly removed some \ncomplexity that I never need to think about. ",
    "start": "301560",
    "end": "305520"
  },
  {
    "text": "And then there's a shallow abstraction where you \nneed to somehow go around it or you need to know  ",
    "start": "305520",
    "end": "310800"
  },
  {
    "text": "what's underneath to truly use it and stuff. \nThat's where all of the layered architectures  ",
    "start": "310800",
    "end": "315419"
  },
  {
    "text": "I've seen in the real world have been shallow \nabstractions. People always found a way to sort  ",
    "start": "315420",
    "end": "320040"
  },
  {
    "text": "of go underneath or they just exposed some of \nthe secret data or the platform underneath. ",
    "start": "320040",
    "end": "324420"
  },
  {
    "text": "So, it's very different whether you have these \nthings where you can actually abstract away stuff  ",
    "start": "325380",
    "end": "330240"
  },
  {
    "text": "and make it actually simpler. And the way that \nI sort of enforced that those are the types of  ",
    "start": "330240",
    "end": "336120"
  },
  {
    "text": "abstractions done through my book is by having \nthe invariants be the thing that we're abstracting  ",
    "start": "336120",
    "end": "341699"
  },
  {
    "text": "into. So all of the code will go to where the \ninvariants are, localizing them, and making  ",
    "start": "341700",
    "end": "346920"
  },
  {
    "text": "sure that you don't need to at least keep track \nof them in other classes and in other places. ",
    "start": "346920",
    "end": "350580"
  },
  {
    "text": "As you say, I split up large code bases into all \nof these hundreds of smaller methods. In fact,  ",
    "start": "351960",
    "end": "359160"
  },
  {
    "text": "it doesn't make it shorter at all. It \nmakes it a lot longer, in the beginning,  ",
    "start": "359160",
    "end": "362460"
  },
  {
    "text": "especially. But then I used all of the methods to \nguide where all the classes should go because then  ",
    "start": "362460",
    "end": "367380"
  },
  {
    "text": "if methods concern the same thing, like \nif they have a common suffix or prefix,  ",
    "start": "367380",
    "end": "371520"
  },
  {
    "text": "probably they should be in a class that has \nthat suffix or prefix, right, as its name. ",
    "start": "371520",
    "end": "375660"
  },
  {
    "text": "Then over time, you get a lot of classes also. And \nthen you look at the classes and see, well, some  ",
    "start": "376380",
    "end": "380700"
  },
  {
    "text": "of these have the same thing in the title. That's \nthe other thing. So probably there should be a  ",
    "start": "380700",
    "end": "384420"
  },
  {
    "text": "package, right? We have this amazing hierarchy \nthat we're barely using in a lot of cases where  ",
    "start": "384420",
    "end": "389520"
  },
  {
    "text": "code can just talk to all different parts of \nthe code. But if we start pushing it out and  ",
    "start": "389520",
    "end": "393300"
  },
  {
    "text": "distributing it, it looked much more like a tree \nstructure. And you only have to consider the leaf  ",
    "start": "393300",
    "end": "398940"
  },
  {
    "text": "that you're in for the code because that's where \nthe invariants are. That's where the data is.",
    "start": "398940",
    "end": "402720"
  },
  {
    "start": "403000",
    "end": "701000"
  },
  {
    "text": "Because I know a lot of people struggle \nfrom the sort of monoliths to microservice  ",
    "start": "403260",
    "end": "407160"
  },
  {
    "text": "migration. I think part of it is because \nthe monolith does get so unwieldy,  ",
    "start": "407160",
    "end": "411480"
  },
  {
    "text": "that you don't understand. So I can supersede \nthis idea of a tree structure that even if you  ",
    "start": "411480",
    "end": "416340"
  },
  {
    "text": "do have a monolith, that is much easier to \nreason about, and you can understand which  ",
    "start": "416340",
    "end": "420060"
  },
  {
    "text": "part of the tree and which part of the leaves \nyou are within a monolith. But then I suppose,  ",
    "start": "420060",
    "end": "423419"
  },
  {
    "text": "if your monolith does get too big, and you are \ncoming up against some sort of ceiling in terms  ",
    "start": "424080",
    "end": "428220"
  },
  {
    "text": "of scalability, that if everything is named \ncorrectly, not that the naming is important,  ",
    "start": "428220",
    "end": "431940"
  },
  {
    "text": "but everything is classed and methoded correctly, \nthen that does make it simpler to split out?",
    "start": "431940",
    "end": "436260"
  },
  {
    "text": "Probably it will. It will also... There is \nanother interesting factor that I find a lot  ",
    "start": "437580",
    "end": "441840"
  },
  {
    "text": "of people struggle with when they talk about this \njourney from monolith to microservices. And it's  ",
    "start": "441840",
    "end": "447480"
  },
  {
    "text": "that latency becomes a thing. And it wasn't \na thing before, right? When you're on a CPU,  ",
    "start": "447480",
    "end": "451680"
  },
  {
    "text": "you can have these manager classes, which \nis a smell in itself, where that pull all  ",
    "start": "451680",
    "end": "456300"
  },
  {
    "text": "the data to where they are, and they do all \nthe calculations, and then they deliver the  ",
    "start": "456300",
    "end": "461280"
  },
  {
    "text": "results to somewhere else. That doesn't work in \na microservice architecture, because you now are  ",
    "start": "461280",
    "end": "466139"
  },
  {
    "text": "not on the same chip anymore. And there might \nbe latency between each of these calls. And so  ",
    "start": "466140",
    "end": "471120"
  },
  {
    "text": "collecting all the data is vastly inefficient.\nIn my book, I talk about this pull-based  ",
    "start": "471120",
    "end": "476460"
  },
  {
    "text": "architecture, where you're pulling all \nthe information to one place. And instead,  ",
    "start": "476460",
    "end": "480000"
  },
  {
    "text": "I describe how you shift your code to be more \npush-based, where instead of if I know that I  ",
    "start": "480000",
    "end": "485520"
  },
  {
    "text": "need to perform my code calculation at this \npoint, I'll pack up all the information that  ",
    "start": "485520",
    "end": "489780"
  },
  {
    "text": "I have this relevant for this thing and send it \nto the next service that can then keep putting on  ",
    "start": "489780",
    "end": "494820"
  },
  {
    "text": "more...decorating more data until that final link \nin the chain will know how to actually perform the  ",
    "start": "494820",
    "end": "500760"
  },
  {
    "text": "calculation. And there'll be no need to return \nit anywhere. You just return it directly to the  ",
    "start": "500760",
    "end": "505020"
  },
  {
    "text": "next place it needs to go. So it's a much more \npush-based, much more forward-type of architecture  ",
    "start": "505020",
    "end": "510840"
  },
  {
    "text": "that then passes information along the chain.\nAnd does it tie into how we used to and still  ",
    "start": "510840",
    "end": "516419"
  },
  {
    "text": "do you think about event-driven architectures?\nYes, very much because... And I'm also a huge  ",
    "start": "516420",
    "end": "520560"
  },
  {
    "text": "advocate for doing event-driven architectures \nbecause I can't see how direct microservices can  ",
    "start": "520560",
    "end": "527580"
  },
  {
    "text": "be viable in a real setting due to exactly the \nlatency and the coupling that you have between  ",
    "start": "527580",
    "end": "532560"
  },
  {
    "text": "the components. The fact is, classes and code \nservices tend to grow over time. At some point,  ",
    "start": "532560",
    "end": "538740"
  },
  {
    "text": "we need to cut them up into two components. If \nyou have a direct microservice where the caller  ",
    "start": "538740",
    "end": "544020"
  },
  {
    "text": "knows where the callee is, then you can't split \nit up without having two teams work together,  ",
    "start": "544020",
    "end": "548880"
  },
  {
    "text": "or three, or more. And that's impossible. \nTeams... Whenever we introduce handoffs,  ",
    "start": "548880",
    "end": "553500"
  },
  {
    "text": "we know quality suffers every single time.\nSo how do you then explain these concepts  ",
    "start": "553500",
    "end": "558660"
  },
  {
    "text": "with people who get very tied up to do with the \nstate, and storing state, and managing state in  ",
    "start": "558660",
    "end": "562560"
  },
  {
    "text": "the database? And I know with events, you can \ndo events state transfer. How do people move  ",
    "start": "562560",
    "end": "568260"
  },
  {
    "text": "information through their application and \nhandle state in this disaggregated world? ",
    "start": "568260",
    "end": "572280"
  },
  {
    "text": "I won't claim that I'm an expert on how \nto handle state. I'm also, of course,  ",
    "start": "572280",
    "end": "578340"
  },
  {
    "text": "a huge fan of stateless things. And I want \nto think about my services as pure functions  ",
    "start": "578340",
    "end": "583140"
  },
  {
    "text": "in some abstract sense, so they can't contain \nin the state. But then I have these databases,  ",
    "start": "583140",
    "end": "590220"
  },
  {
    "text": "and especially since it's become very popular to \ntalk about least privilege and stuff like that,  ",
    "start": "590220",
    "end": "594660"
  },
  {
    "text": "I find that we know how to handle databases. \nAnd so far, I haven't been offended by anyone  ",
    "start": "594660",
    "end": "601680"
  },
  {
    "text": "who wants to just share the link to a database and \nthen deal with the access control there, and then  ",
    "start": "601680",
    "end": "605940"
  },
  {
    "text": "the events are more notifications that you need \nto do some work, go to the database, and see. ",
    "start": "605940",
    "end": "610080"
  },
  {
    "text": "So you still have a very nice and finely-grained \ncontrol over who has access to what,  ",
    "start": "610080",
    "end": "615480"
  },
  {
    "text": "at what point. Transferring huge amounts \nof data is really annoying if you have a  ",
    "start": "615480",
    "end": "621779"
  },
  {
    "text": "message queue because you're captive \nsomething like 10 megabytes usually,  ",
    "start": "621780",
    "end": "624960"
  },
  {
    "text": "which is understandable. But sometimes we have a \nlot more data that we want to communicate between  ",
    "start": "624960",
    "end": "629340"
  },
  {
    "text": "them. So putting it in a commonplace first, and \nthen just sending the event as notifications that  ",
    "start": "629340",
    "end": "635820"
  },
  {
    "text": "other people need to then go and fetch it, \nI find this is all right. It does introduce  ",
    "start": "635820",
    "end": "642840"
  },
  {
    "text": "coupling between the services on the data. So \nlong as we keep it simpler than it was before,  ",
    "start": "642840",
    "end": "648660"
  },
  {
    "text": "it's not like I'm sharing references to different \ndatabases from different teams. But I can share  ",
    "start": "648660",
    "end": "656579"
  },
  {
    "text": "data in that way, sort of read-only type of data.\nI suppose they are some architectures where you  ",
    "start": "656580",
    "end": "662580"
  },
  {
    "text": "can have a local cache or a local copy of the \ndata while you're doing some processing. And I  ",
    "start": "662580",
    "end": "666720"
  },
  {
    "text": "know you do have some eventual consistency \npossible issues. But these are different  ",
    "start": "666720",
    "end": "671279"
  },
  {
    "text": "ways that you can have a localized state.\nI do say that when you have shared databases  ",
    "start": "671280",
    "end": "677100"
  },
  {
    "text": "like this, you can have as many read keys as you \nwant. You can only have one write key. There is  ",
    "start": "677100",
    "end": "681360"
  },
  {
    "text": "one owner of all pieces of data in all systems. \nAnd also, there's one team owning old code. There  ",
    "start": "681360",
    "end": "687779"
  },
  {
    "text": "can't be shared code, you can't have shared data. \nThat's not a thing, because that's a coupling,  ",
    "start": "687780",
    "end": "691560"
  },
  {
    "text": "and it's going to kill your entire productivity \nand stuff. But so long as the data is read-only,  ",
    "start": "691560",
    "end": "696600"
  },
  {
    "text": "I haven't found a lot of issues with actually \ndistributing that between many teams.",
    "start": "696600",
    "end": "700500"
  },
  {
    "text": "Okay. How does sort of application integration \npatterns fit into this? Because we're talking  ",
    "start": "700500",
    "end": "705300"
  },
  {
    "start": "701000",
    "end": "898000"
  },
  {
    "text": "about abstractions, and we're talking \nabout a sort of common language that  ",
    "start": "705300",
    "end": "708000"
  },
  {
    "text": "people are going to talk about these things \ncommunicating? What are your thoughts on that? ",
    "start": "708000",
    "end": "711780"
  },
  {
    "text": "So, for me, I've thought about architecture \nfor so long in so many different contexts,  ",
    "start": "712860",
    "end": "718680"
  },
  {
    "text": "that it's all sort of become the same \nthing. It seems like when people talk  ",
    "start": "718680",
    "end": "722940"
  },
  {
    "text": "about functional programming, object-oriented \nprogramming, or the old style of refactoring,  ",
    "start": "722940",
    "end": "726420"
  },
  {
    "text": "or the new and all of these different \nthings, we're all advocating the same  ",
    "start": "726420",
    "end": "730260"
  },
  {
    "text": "thing really. When we talk about how people used \nto code and purely object-oriented languages,  ",
    "start": "730260",
    "end": "735960"
  },
  {
    "text": "like small talk and stuff, it's the same \nprinciples that I'm trying to revive now. ",
    "start": "735960",
    "end": "739980"
  },
  {
    "text": "I've been meeting some very old programmers who \nwere like, ''Well, I used to do Smalltalk and  ",
    "start": "740640",
    "end": "746400"
  },
  {
    "text": "stuff and we didn't have all these problems.'' \nI'm like, ''No, I know because that's what my  ",
    "start": "746400",
    "end": "750420"
  },
  {
    "text": "book is about the same style.''\nEverything old is new again. Yes. ",
    "start": "750420",
    "end": "751860"
  },
  {
    "text": "Yes, exactly. It's the same thing. And exactly, \nwhen I'm talking about, we need more methods,  ",
    "start": "751860",
    "end": "756899"
  },
  {
    "text": "so we can have more classes, so we can have \nmore packages, that will be a monolith kind  ",
    "start": "756900",
    "end": "760800"
  },
  {
    "text": "of way to say it, but we could say the exact \nsame thing about services, right? Because we add  ",
    "start": "760800",
    "end": "764880"
  },
  {
    "text": "more features or more hooks to the events. That \nwill be like the methods and then the classes,  ",
    "start": "764880",
    "end": "770520"
  },
  {
    "text": "the service, and then over time, you need to split \nthose up as well in exactly the same way. So,  ",
    "start": "770520",
    "end": "774660"
  },
  {
    "text": "for me, it's all sort of the same thing that \nwe're going through just in a different scope. ",
    "start": "774660",
    "end": "779160"
  },
  {
    "text": "I like the wording that you're using as well \nbecause you are talking within a sort of single  ",
    "start": "779160",
    "end": "785040"
  },
  {
    "text": "programming construct of things like events, \ncoupling, and using services. Because I work  ",
    "start": "785040",
    "end": "791699"
  },
  {
    "text": "with AWS on the serverless kind of side, that's \nour sort of whole lightbulb moment we tried to  ",
    "start": "791700",
    "end": "796440"
  },
  {
    "text": "spark in other people that you have code and \nbits of functions, and you have message buses  ",
    "start": "796440",
    "end": "801660"
  },
  {
    "text": "that you need or message buses, queues, \nevent routers, anything, to send messages  ",
    "start": "801660",
    "end": "805440"
  },
  {
    "text": "across applications. And I very much like the \nlanguage that you're using from an individual  ",
    "start": "805440",
    "end": "810660"
  },
  {
    "text": "programming language perspective because, for \nme, that's applicable in the cloud as well that  ",
    "start": "810660",
    "end": "815040"
  },
  {
    "text": "you want to reduce your code and you want it \nto scale up, scale down as much as you can,  ",
    "start": "815040",
    "end": "818639"
  },
  {
    "text": "and use managed services if you can. So you're \nnot reinventing the wheel, building additional  ",
    "start": "818640",
    "end": "822840"
  },
  {
    "text": "infrastructure, all these hooks and additional \nintegration things which you really don't need  ",
    "start": "822840",
    "end": "826560"
  },
  {
    "text": "to. And it's ultimately not important for your \nbusiness. You want to run your business code. ",
    "start": "826560",
    "end": "830340"
  },
  {
    "text": "Yes, exactly. The user needs just to have the \ncode run and everything else is a distraction,  ",
    "start": "830340",
    "end": "835620"
  },
  {
    "text": "right? Everything that doesn't add value, I also \ntry to eliminate from every process. So a typical  ",
    "start": "835620",
    "end": "841620"
  },
  {
    "text": "example that I've met in my work as a consultant \nwould be something like scrum meetings. And a  ",
    "start": "841620",
    "end": "845820"
  },
  {
    "text": "lot of people do them. And I'm like, ''Okay, are \nthey valuable? Do you learn something? Are they  ",
    "start": "845820",
    "end": "850020"
  },
  {
    "text": "useful for you?'' So many developers hate them. \nI take that as an immediate feedback that they're  ",
    "start": "850020",
    "end": "855180"
  },
  {
    "text": "probably not valuable, right? Because developers \nlike their job. They like doing the right thing. ",
    "start": "855180",
    "end": "859800"
  },
  {
    "text": "I remove that stuff, infrastructure would be \nthe same thing, right? It's like, do I need  ",
    "start": "859800",
    "end": "865080"
  },
  {
    "text": "to know how to set up a network? Do I need to \nknow how to build images in Docker to just run,  ",
    "start": "865080",
    "end": "870360"
  },
  {
    "text": "like, my Node.js application? Maybe not, right? \nMaybe I just need to push this to somewhere and  ",
    "start": "870360",
    "end": "876420"
  },
  {
    "text": "then it'll be run. I don't have to deal with \nall those details and extra cognitive load. ",
    "start": "876420",
    "end": "882120"
  },
  {
    "text": "Yeah, it's a term that we use the undifferentiated \nheavy lifting. And I was relistening to a podcast  ",
    "start": "882120",
    "end": "887279"
  },
  {
    "text": "recently, kind of thinking of something, does \nit make your beer taste better? If you're a  ",
    "start": "887280",
    "end": "891000"
  },
  {
    "text": "beer brewing company, whatever you're going to be \nbuilding in your application, does it make your  ",
    "start": "891000",
    "end": "895440"
  },
  {
    "text": "product better, or is that a distraction?\nYes.",
    "start": "895440",
    "end": "898140"
  },
  {
    "start": "898000",
    "end": "1032000"
  },
  {
    "text": "You were mentioning before we were talking about \nthe sort of language of choice that you liked,  ",
    "start": "898140",
    "end": "902880"
  },
  {
    "text": "and you were mentioning TypeScript. Talk us \nthrough why TypeScript gets your neurons firing. ",
    "start": "902880",
    "end": "908700"
  },
  {
    "text": "TypeScript had many things going for it. First \nof all, of course, I'm a type guy. I'm very big  ",
    "start": "908700",
    "end": "912360"
  },
  {
    "text": "in type language skills. And TypeScript \nhas one of the most fascinating types  ",
    "start": "912360",
    "end": "916560"
  },
  {
    "text": "of systems that humans have ever conceived, \nwhich is already amazing to me. I've worked  ",
    "start": "916560",
    "end": "921360"
  },
  {
    "text": "with the very most difficult type systems, like \nsort of dependent types. And so Microsoft has  ",
    "start": "921360",
    "end": "928320"
  },
  {
    "text": "this Lean thing they're coming up with. In \nFrance, there is the language caulk [SP] in  ",
    "start": "928320",
    "end": "933540"
  },
  {
    "text": "them. And then there's also Act \nIn [SP] and a lot of other things. ",
    "start": "933540",
    "end": "936300"
  },
  {
    "text": "I really like these languages, because I \ncan teach the type system anything. I can  ",
    "start": "936960",
    "end": "941580"
  },
  {
    "text": "have another program on top to check that my \nprogram is still valid at compile time. So I  ",
    "start": "941580",
    "end": "947400"
  },
  {
    "text": "don't need to run it. That's also a bit of \na joke from when I was doing research that  ",
    "start": "947400",
    "end": "951180"
  },
  {
    "text": "performance is when people want to run their \ncode. I just wanna type check them, everything  ",
    "start": "951960",
    "end": "955560"
  },
  {
    "text": "else doesn't matter, right, then I know they're \ncorrect. So TypeScript has an amazing type system.  ",
    "start": "955560",
    "end": "959640"
  },
  {
    "text": "It also has a very low startup time, which is \nespecially interesting, if you're moving towards a  ",
    "start": "959640",
    "end": "964500"
  },
  {
    "text": "sort of serverless world where the virtual machine \nis just up and then you don't need to wait for it.  ",
    "start": "964500",
    "end": "968880"
  },
  {
    "text": "So that's also something I find very useful.\nAnd then it's just, there are libraries for  ",
    "start": "969540",
    "end": "974220"
  },
  {
    "text": "everything. Everything is just... It's a very \nnice, easy entry point, right? Even if you're  ",
    "start": "974220",
    "end": "979379"
  },
  {
    "text": "using JavaScript, now you can just rename all the \nfiles to .ts and then add types gradually. I found  ",
    "start": "979380",
    "end": "985080"
  },
  {
    "text": "it has a lot of things that make it really \nnice to work with in a professional setting.",
    "start": "985080",
    "end": "989040"
  },
  {
    "text": "So the sort of onboarding and migration \nprocess you find is as natural from some  ",
    "start": "989040",
    "end": "994079"
  },
  {
    "text": "people who are doing JavaScript already, rename \nyour files, and then start adding the types in,  ",
    "start": "994080",
    "end": "998160"
  },
  {
    "text": "and you're already improving your application.\nYes, but also for people who are familiar with  ",
    "start": "998160",
    "end": "1003560"
  },
  {
    "text": "Java or C Sharp or other object-oriented \nlanguages, because it is very inspired by  ",
    "start": "1003560",
    "end": "1007640"
  },
  {
    "text": "them. It looks the same. The syntax is fairly \nsimilar. I haven't... So my book is written in  ",
    "start": "1007640",
    "end": "1014060"
  },
  {
    "text": "TypeScript. And I haven't presented it to a \nJava programmer who wasn't like, ''Oh, yeah,  ",
    "start": "1014060",
    "end": "1018560"
  },
  {
    "text": "this is exactly the same.'' I mean, there are some \nquirks here and there, and I explained them, but  ",
    "start": "1018560",
    "end": "1022820"
  },
  {
    "text": "in general, it's a really nice language to \nwork with, except for the runtime, of course.",
    "start": "1023600",
    "end": "1028699"
  },
  {
    "start": "1032000",
    "end": "1135000"
  },
  {
    "text": "I was going to ask the question, what would you \nadvise people to do the first thing to improve  ",
    "start": "1033200",
    "end": "1037519"
  },
  {
    "text": "their architecture? But I think the first thing \nthey should do is, first of all, buy your book,  ",
    "start": "1037520",
    "end": "1040100"
  },
  {
    "text": "because that'll be useful and give them a whole \nbunch information more than we can just cover  ",
    "start": "1040100",
    "end": "1043939"
  },
  {
    "text": "in this chat. But if some developer wakes \nup, and they've hopefully read your book,  ",
    "start": "1043940",
    "end": "1049340"
  },
  {
    "text": "what's the one thing you think they should start \nimmediately with to improve their work life,  ",
    "start": "1049340",
    "end": "1054500"
  },
  {
    "text": "their code base, and their approach to developing?\nDepending on how much time this person who comes  ",
    "start": "1054500",
    "end": "1062900"
  },
  {
    "text": "to ask me about the thing, from giving \nprofessional advice, I would usually say,  ",
    "start": "1062900",
    "end": "1067640"
  },
  {
    "text": "just start using the tools that you have, right? \nA lot of people have a lot of really cool tools,  ",
    "start": "1067640",
    "end": "1072260"
  },
  {
    "text": "like Git, that their editor, like their compiler, \nstuff like that. There are things you already have  ",
    "start": "1072260",
    "end": "1076880"
  },
  {
    "text": "at your disposal, just get to know them better. \nBecause I've seen developers who can code at 20  ",
    "start": "1076880",
    "end": "1082580"
  },
  {
    "text": "times the speed of the other developers on the \nsame team, because they know all the shortcuts,  ",
    "start": "1082580",
    "end": "1086539"
  },
  {
    "text": "they know all these tricks, and all these methods. \nBy just learning the tools that we have, we can  ",
    "start": "1086540",
    "end": "1091820"
  },
  {
    "text": "already improve a lot in our \nproductivity and in our daily work. ",
    "start": "1091820",
    "end": "1095299"
  },
  {
    "text": "The method I would recommend them for doing that \nwould be something like ensemble programming,  ",
    "start": "1096140",
    "end": "1099500"
  },
  {
    "text": "which I also recommend that any opportunity to \npeople. Work more closely together, one flow,  ",
    "start": "1099500",
    "end": "1104600"
  },
  {
    "text": "one team, that's it. And then you will start \ndistributing this knowledge and learning  ",
    "start": "1104600",
    "end": "1109640"
  },
  {
    "text": "new things. You can't move a team if you're \ncompletely focusing on delivering new features,  ",
    "start": "1109640",
    "end": "1115760"
  },
  {
    "text": "because you're filling your head with the \nfeature work, right? You can learn a new  ",
    "start": "1115760",
    "end": "1119600"
  },
  {
    "text": "habit. And if it's not a habit, you'll forget it \nwhen you're doing something that's cognitively  ",
    "start": "1119600",
    "end": "1123260"
  },
  {
    "text": "difficult. So, ensemble programming and \nthen just get really good at your tools. ",
    "start": "1123260",
    "end": "1127340"
  },
  {
    "text": "Christian, thanks so much for joining us. There's \na lot more I need to learn about this and read  ",
    "start": "1128060",
    "end": "1132680"
  },
  {
    "text": "about this, and certainly opened my eyes to a \nwhole kind of thing. Where can people find you on  ",
    "start": "1132680",
    "end": "1136220"
  },
  {
    "start": "1135000",
    "end": "1192000"
  },
  {
    "text": "the internet? Where's a good place to...a landing \npage or Twitter, or wherever you're online? ",
    "start": "1136220",
    "end": "1140960"
  },
  {
    "text": "I'm on Twitter. And I also have a blog that \nI've been very bad at posting on recently.  ",
    "start": "1140960",
    "end": "1145039"
  },
  {
    "text": "But I do have some articles there that I \nreally like. And yeah, on LinkedIn, on... ",
    "start": "1145040",
    "end": "1149690"
  },
  {
    "text": "So what's your Twitter username?\nI'm always The Dr. Lambda on every media  ",
    "start": "1149690",
    "end": "1153919"
  },
  {
    "text": "that I'm on, GitHub, YouTube, everything. That's \nalways me. So, it should be fairly easy to find.  ",
    "start": "1153920",
    "end": "1159800"
  },
  {
    "text": "You can find one of them. Thank you very much.\nWell, thanks for coming. Thanks so much for  ",
    "start": "1159800",
    "end": "1162980"
  },
  {
    "text": "joining us here again today on ''GOTO Unscripted'' \nin Copenhagen, where we're learning from some  ",
    "start": "1162980",
    "end": "1167000"
  },
  {
    "text": "of the experts on all the new ways and the old \nways being reinvented to rebuild your software  ",
    "start": "1167000",
    "end": "1173000"
  },
  {
    "text": "and ultimately do a better job and hopefully \nenjoy it a bit more. Thanks for joining us.",
    "start": "1173000",
    "end": "1176660"
  }
]