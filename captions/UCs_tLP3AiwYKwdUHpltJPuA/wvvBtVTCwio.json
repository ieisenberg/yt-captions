[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "okay so thanks for coming let's get started with the session so in this",
    "start": "12740",
    "end": "18240"
  },
  {
    "text": "store can be I'll be talking about application in integration in the cloud native and micro services landscape so",
    "start": "18240",
    "end": "24960"
  },
  {
    "text": "if you look at the title we have quite a lot of password cover disentitle but my",
    "start": "24960",
    "end": "30990"
  },
  {
    "text": "objective is to talk about one of the very important concept in building cloud",
    "start": "30990",
    "end": "36300"
  },
  {
    "text": "native applications the application integration which is not discussed that much in the enterprise right so brief",
    "start": "36300",
    "end": "46530"
  },
  {
    "text": "introduction about myself I'm working as the director of integration architect at",
    "start": "46530",
    "end": "51570"
  },
  {
    "text": "@ws o2 and also I authored a book on micro services architecture micro",
    "start": "51570",
    "end": "57270"
  },
  {
    "text": "services for enterprises and also working as the product manager of W",
    "start": "57270",
    "end": "64260"
  },
  {
    "text": "Enterprise integrator and I closely work with most of the Bay Area communities on",
    "start": "64260",
    "end": "69900"
  },
  {
    "text": "micro services api's and integration so this talk contains most of the insights on how integration is changing",
    "start": "69900",
    "end": "78630"
  },
  {
    "text": "and how micro services architecture is changing with the modern enterprise needs so the title is about building",
    "start": "78630",
    "end": "86430"
  },
  {
    "text": "cloud native applications and the role of application integration right so before moving any further let's look at",
    "start": "86430",
    "end": "92909"
  },
  {
    "text": "what is cloud native so if I ask you any questions like any question related to cloud native you would probably say",
    "start": "92909",
    "end": "100159"
  },
  {
    "text": "cloud native is building applications leveraging the cloud or deploying into",
    "start": "100159",
    "end": "105899"
  },
  {
    "text": "the cloud but at the heart of cloud native architecture there are four main principles right so a given cloud native",
    "start": "105899",
    "end": "115320"
  },
  {
    "text": "application comprises of a given set of micro services right a cloud native",
    "start": "115320",
    "end": "121590"
  },
  {
    "text": "application is a combination of set of micro services or service functions and",
    "start": "121590",
    "end": "127340"
  },
  {
    "text": "those functions so micro services are packaged into containers so that's the a",
    "start": "127340",
    "end": "132569"
  },
  {
    "text": "docker and cube these are coming into the picture so once you package them into darker and",
    "start": "132569",
    "end": "138750"
  },
  {
    "text": "kubernetes then you run those services on top of a continuous delivery model so",
    "start": "138750",
    "end": "145230"
  },
  {
    "text": "that means you develop your service you test you cry test you write whatever the",
    "start": "145230",
    "end": "150330"
  },
  {
    "text": "integration test and you create a flawless experience from there to production and fully automate that",
    "start": "150330",
    "end": "157110"
  },
  {
    "text": "process so that that's where all the gee tops and all the other related concepts",
    "start": "157110",
    "end": "162180"
  },
  {
    "text": "coming into the picture so once you have continuous delivery model then you build",
    "start": "162180",
    "end": "167480"
  },
  {
    "text": "something called adaptive governance so that means once you deploy the runtimes",
    "start": "167480",
    "end": "173220"
  },
  {
    "text": "into the cloud then you build some kind of observer ability which includes",
    "start": "173220",
    "end": "179900"
  },
  {
    "text": "matrix phrasing service visualization and also you can get the feedback from",
    "start": "179900",
    "end": "186630"
  },
  {
    "text": "the runtime and we change the runtime behavior so that is adaptive governance so for example let's say let's say you",
    "start": "186630",
    "end": "193890"
  },
  {
    "text": "have a service Microsoft is deployed into the cloud and you are getting more traffic into that particular service so",
    "start": "193890",
    "end": "199650"
  },
  {
    "text": "then you dynamically scale it scale it up or you can scale it down so that is adaptive governance so a given cloud",
    "start": "199650",
    "end": "207540"
  },
  {
    "text": "native application is actually consists of all these four different capabilities",
    "start": "207540",
    "end": "214519"
  },
  {
    "text": "now the role of integration in cloud native applications so as we discussed",
    "start": "214519",
    "end": "219630"
  },
  {
    "text": "earlier a cloud native application comprises of multiple micro services right so that means when you are",
    "start": "219630",
    "end": "227100"
  },
  {
    "text": "building a business use case all these services has to talk to each other and",
    "start": "227100",
    "end": "232410"
  },
  {
    "text": "formulate a given business scenario right so that's where our cloud native",
    "start": "232410",
    "end": "238350"
  },
  {
    "text": "applications the services the micro services of functions has to talk to",
    "start": "238350",
    "end": "244200"
  },
  {
    "text": "each other right so once you decentralize once you have a cloud native application comprises of multiple",
    "start": "244200",
    "end": "250890"
  },
  {
    "text": "micro services you will have lot of inter inter service communication which",
    "start": "250890",
    "end": "257340"
  },
  {
    "text": "happens over the network so that's where all the integration capabilities are",
    "start": "257340",
    "end": "262740"
  },
  {
    "text": "needed to build a fully fledged might cloud native kitchen now we did the same thing in the",
    "start": "262740",
    "end": "272230"
  },
  {
    "text": "service oriented architecture era right so we used to develop service-oriented",
    "start": "272230",
    "end": "277930"
  },
  {
    "text": "architecture as a set of services which are talking to each other over the",
    "start": "277930",
    "end": "283230"
  },
  {
    "text": "infrastructure called enterprise service bus right so that's where all the",
    "start": "283230",
    "end": "288370"
  },
  {
    "text": "business logic so we developed most of the so let's ik let's say you have set of application",
    "start": "288370",
    "end": "294220"
  },
  {
    "text": "services data and systems and all the integration logic is being developed as",
    "start": "294220",
    "end": "299830"
  },
  {
    "text": "part of the Enterprise Service bus right and and also later after the advent of",
    "start": "299830",
    "end": "309210"
  },
  {
    "text": "service-oriented architecture the API management came into the picture mainly",
    "start": "309210",
    "end": "314590"
  },
  {
    "text": "to improve the usability or consume ability of your business capabilities",
    "start": "314590",
    "end": "319690"
  },
  {
    "text": "because as you know service-oriented architecture is really based on the",
    "start": "319690",
    "end": "326320"
  },
  {
    "text": "standard such as web services so WSDL etc which are not really easier to to be",
    "start": "326320",
    "end": "333310"
  },
  {
    "text": "exposed as a service to your consumers therefore we usually put a facade layer",
    "start": "333310",
    "end": "339880"
  },
  {
    "text": "which is an API gateway or API management which is a simple API to you",
    "start": "339880",
    "end": "345490"
  },
  {
    "text": "are complex system so at that layer you expose your capabilities to your",
    "start": "345490",
    "end": "350560"
  },
  {
    "text": "consumers and you can do versioning throttling security observability so but",
    "start": "350560",
    "end": "357729"
  },
  {
    "text": "at the ESP layer there we implement a lot of business logic right and but with",
    "start": "357729",
    "end": "366100"
  },
  {
    "text": "the advent of microservices architecture what we are fostering is the elimination of the Enterprise Service bus now if you",
    "start": "366100",
    "end": "374530"
  },
  {
    "text": "try to eliminate Enterprise Service bus what we are actually developing is smart",
    "start": "374530",
    "end": "381789"
  },
  {
    "text": "endpoints and dumb pipes right now if we look at the previous architecture we had",
    "start": "381789",
    "end": "387190"
  },
  {
    "text": "a lot of business logic inter-service communication logic as part of the ESP",
    "start": "387190",
    "end": "392890"
  },
  {
    "text": "now we segregate that into micro services now if you look at this diagram",
    "start": "392890",
    "end": "399130"
  },
  {
    "text": "you can see there are different types of microservices you can",
    "start": "399130",
    "end": "404210"
  },
  {
    "text": "see for example microservice AE likewise there are multiple micro-services and",
    "start": "404210",
    "end": "409939"
  },
  {
    "text": "there are set of microservices which we have labeled as smart endpoints right so",
    "start": "409939",
    "end": "415639"
  },
  {
    "text": "a smart endpoint means the integration logic so this particular smart endpoint",
    "start": "415639",
    "end": "420740"
  },
  {
    "text": "contains the logic that talks to the Micra services see and micro-services D so this is request response based",
    "start": "420740",
    "end": "428499"
  },
  {
    "text": "communication a sequential calls to two different other services and with micro",
    "start": "428499",
    "end": "434599"
  },
  {
    "text": "services architecture also you can have a synchronous event-driven communication",
    "start": "434599",
    "end": "440409"
  },
  {
    "text": "which means you can use right eight patterns such as pops up now if you look",
    "start": "440409",
    "end": "445909"
  },
  {
    "text": "at these two services micro service E and D D so this is actually publishing",
    "start": "445909",
    "end": "451819"
  },
  {
    "text": "data to an event bus and there's a consumer who has subscribed to the same",
    "start": "451819",
    "end": "458270"
  },
  {
    "text": "topic now the concept of a smart endpoints and dumb pipe is very important because all the smarts so in",
    "start": "458270",
    "end": "465110"
  },
  {
    "text": "in previous architecture all the smarts live at the ESP layer now in this",
    "start": "465110",
    "end": "471319"
  },
  {
    "text": "architecture all the business logic lives at D each and every micro service",
    "start": "471319",
    "end": "477050"
  },
  {
    "text": "later and even the event bus scenario there's no any business logic being",
    "start": "477050",
    "end": "483050"
  },
  {
    "text": "developed as part of the event bus but all the logic resides at the producer and consumer now now back in early 2000",
    "start": "483050",
    "end": "496930"
  },
  {
    "text": "we we used to call this but this kind of an architecture is it's a point-to-point",
    "start": "496930",
    "end": "502939"
  },
  {
    "text": "architecture right so you have actually that this is the reason that we built ESP so we used to have these",
    "start": "502939",
    "end": "509629"
  },
  {
    "text": "point-to-point digital communication between systems and then we invented the ESB as this solution to element in",
    "start": "509629",
    "end": "516800"
  },
  {
    "text": "eliminate the point-to-point connection between the systems now are we going back to point-to-point integration so",
    "start": "516800",
    "end": "523669"
  },
  {
    "text": "that is the question right not really but we are trying to do a similar thing",
    "start": "523669",
    "end": "530089"
  },
  {
    "text": "but with micro services but we need to eliminate the all the mistakes that we did with",
    "start": "530089",
    "end": "536480"
  },
  {
    "text": "point-to-point integration now the key challenge in building microservices",
    "start": "536480",
    "end": "543170"
  },
  {
    "text": "architecture is not just building the services but building these smart endpoints that's because if you take ten",
    "start": "543170",
    "end": "549170"
  },
  {
    "text": "micro services I would say 80% of the services will talk to other systems so",
    "start": "549170",
    "end": "554960"
  },
  {
    "text": "that means you are building smart endpoints with all those 80% of those services so building smart endpoints is",
    "start": "554960",
    "end": "561680"
  },
  {
    "text": "hard right because because ESPE layers usually provides a lot of abstractions",
    "start": "561680",
    "end": "568850"
  },
  {
    "text": "to make your life easier right now with the smart endpoints with the micro",
    "start": "568850",
    "end": "574130"
  },
  {
    "text": "services architecture you need to implement all those capabilities as part of your services business logic and",
    "start": "574130",
    "end": "582279"
  },
  {
    "text": "integration complexity is not reduced right although we don't have the central",
    "start": "582400",
    "end": "588020"
  },
  {
    "text": "DSP those complexity is not reduced but rather dispersed across the network with",
    "start": "588020",
    "end": "595010"
  },
  {
    "text": "other other set of micro services and also unlike service-oriented",
    "start": "595010",
    "end": "600590"
  },
  {
    "text": "architecture we have so many services now right services are fine-grain services are distributed across the",
    "start": "600590",
    "end": "607550"
  },
  {
    "text": "network and that means you will have more links between these services because of the inter-service",
    "start": "607550",
    "end": "612980"
  },
  {
    "text": "communication so the problem is even more hard now early I think it's in",
    "start": "612980",
    "end": "621800"
  },
  {
    "text": "early 2016 the concept of service mesh has emerged so actually service mesh",
    "start": "621800",
    "end": "629210"
  },
  {
    "text": "tried to eliminate some of the complexities that we have in this kind",
    "start": "629210",
    "end": "634790"
  },
  {
    "text": "of inter service communication in micro services architecture right so very",
    "start": "634790",
    "end": "640280"
  },
  {
    "text": "early implementations of micro services architecture they haven't used the",
    "start": "640280",
    "end": "645770"
  },
  {
    "text": "service mesh concept rather they built a set of fine-grained services and they",
    "start": "645770",
    "end": "651410"
  },
  {
    "text": "built into service communication between all these services and what they have realized was there are a lot of",
    "start": "651410",
    "end": "658040"
  },
  {
    "text": "commodity features that we need to implement at each and every micro service right so that means let's take",
    "start": "658040",
    "end": "665240"
  },
  {
    "text": "and scenario you have a go based micro service and a java-based microservice and let's say",
    "start": "665240",
    "end": "670580"
  },
  {
    "text": "a node-based microservice the same capability such things such as circuit braking observability security the same",
    "start": "670580",
    "end": "677510"
  },
  {
    "text": "capability is being duplicated across these different languages so that is an",
    "start": "677510",
    "end": "682640"
  },
  {
    "text": "and and most of the developers are focusing more on building these links",
    "start": "682640",
    "end": "688400"
  },
  {
    "text": "between services rather focusing on their business logic so that's why our service mesh came into the picture in",
    "start": "688400",
    "end": "695060"
  },
  {
    "text": "early 2016 as a application network infrastructure to cater the in the",
    "start": "695060",
    "end": "702200"
  },
  {
    "text": "service communication now with this architecture in this diagram you can see two different micro services micro",
    "start": "702200",
    "end": "708830"
  },
  {
    "text": "service a and B which are talking over the network and with the service mesh",
    "start": "708830",
    "end": "714320"
  },
  {
    "text": "architecture you will have a separate sidecar component runtime co-located",
    "start": "714320",
    "end": "721280"
  },
  {
    "text": "with your my service where you can offload your inter service communication Logie right so things such as circuit",
    "start": "721280",
    "end": "729110"
  },
  {
    "text": "breaking security publishing data to external observability tools those",
    "start": "729110",
    "end": "735710"
  },
  {
    "text": "things are offloaded to the co-located sidecar and all these sidecars are",
    "start": "735710",
    "end": "740810"
  },
  {
    "text": "controlled by a central control plane and this is where you push all your",
    "start": "740810",
    "end": "747520"
  },
  {
    "text": "business non business logic related configuration to your services and as",
    "start": "747520",
    "end": "753440"
  },
  {
    "text": "part of the micro service development you are only focusing on the business",
    "start": "753440",
    "end": "758840"
  },
  {
    "text": "logic and you will have some primitive network functions because you need to call the co-located sidecar it's like a",
    "start": "758840",
    "end": "765530"
  },
  {
    "text": "localhost call to your sidecar and all the other things are supported from the",
    "start": "765530",
    "end": "773320"
  },
  {
    "text": "service mesh so this architecture is becoming really popular but again one",
    "start": "773320",
    "end": "780020"
  },
  {
    "text": "one thing we have to realize is we will only offload non business logic related",
    "start": "780020",
    "end": "786190"
  },
  {
    "text": "configurations right you are you you won't be developing any business logic related things inside the sidecar",
    "start": "786190",
    "end": "794680"
  },
  {
    "text": "so obviously service mesh is a is not a distributed ESB so many people have",
    "start": "796760",
    "end": "801829"
  },
  {
    "text": "interpreted this as a distributed ESB but it is not right now if you look at",
    "start": "801829",
    "end": "807410"
  },
  {
    "text": "this particular scenario you have micro service X calling two other services",
    "start": "807410",
    "end": "813519"
  },
  {
    "text": "over the service mesh infrastructure now you have the business logic of the",
    "start": "813519",
    "end": "820130"
  },
  {
    "text": "service which contains microscope is X calls service y&z as well as the network",
    "start": "820130",
    "end": "828079"
  },
  {
    "text": "communication logic that composition logic is again part of the business",
    "start": "828079",
    "end": "833149"
  },
  {
    "text": "logic of this service X right but all the other infrastructure related things",
    "start": "833149",
    "end": "839060"
  },
  {
    "text": "are supported from the service mesh okay",
    "start": "839060",
    "end": "846170"
  },
  {
    "text": "so now it's clearly we we need to have",
    "start": "846170",
    "end": "851600"
  },
  {
    "text": "we have quite a lot of application integration requirements in building",
    "start": "851600",
    "end": "857570"
  },
  {
    "text": "cloud native applications right so what we have marked here is the application",
    "start": "857570",
    "end": "863810"
  },
  {
    "text": "integration that you developed as part of your service so let's look at some of the key requirements that you need when",
    "start": "863810",
    "end": "872029"
  },
  {
    "text": "you are building this kind of application integrations with cloud native or micro services architecture so",
    "start": "872029",
    "end": "880639"
  },
  {
    "text": "the first thing is whatever the runtimes that we are going to use for application integration needs to be cloud native",
    "start": "880639",
    "end": "888500"
  },
  {
    "text": "which means they should be startup startup time should be low resource",
    "start": "888500",
    "end": "894589"
  },
  {
    "text": "consumption should be low and should natively integrate with docker and kubernetes and all the other kubernetes",
    "start": "894589",
    "end": "902720"
  },
  {
    "text": "or cloud native ecosystem components such as Prometheus and all the other tools and there are two types of",
    "start": "902720",
    "end": "912620"
  },
  {
    "text": "communication that you will implement as part of the application integration so first one is service orchestration the",
    "start": "912620",
    "end": "919100"
  },
  {
    "text": "synchronous request response calls between services usually we can we call",
    "start": "919100",
    "end": "924440"
  },
  {
    "text": "it the active compositions now if you look at micro service a it costs two different other services right",
    "start": "924440",
    "end": "930230"
  },
  {
    "text": "so this is one particular because certain micro services requires request response style communication whereas",
    "start": "930230",
    "end": "936410"
  },
  {
    "text": "some services requires this kind of choreographic requirements right so",
    "start": "936410",
    "end": "942230"
  },
  {
    "text": "usually in this case we have we have an",
    "start": "942230",
    "end": "947900"
  },
  {
    "text": "event bus which is used as the dump pipe to connect different micro services they",
    "start": "947900",
    "end": "954140"
  },
  {
    "text": "are basically using produce and consume mechanism to communicate with each other",
    "start": "954140",
    "end": "959510"
  },
  {
    "text": "so in this case the business logic in the previous case you have all the",
    "start": "959510",
    "end": "965270"
  },
  {
    "text": "business logic related to the composition as part of the Microsoft's a",
    "start": "965270",
    "end": "970480"
  },
  {
    "text": "but in this case there is no central place that you will build the composition logic because it is purely",
    "start": "970480",
    "end": "977060"
  },
  {
    "text": "based on pops-up oh that kind of messaging patterns so usually this is",
    "start": "977060",
    "end": "983000"
  },
  {
    "text": "implemented the protocols such as rest graph QL even G RPC is used for",
    "start": "983000",
    "end": "992660"
  },
  {
    "text": "implementing this kind of active compositions and choreography or reactive compositions are usually",
    "start": "992660",
    "end": "998720"
  },
  {
    "text": "implemented with with the messaging protocol such as an Annette's Kafka AMQP is heavily used",
    "start": "998720",
    "end": "1006790"
  },
  {
    "text": "so another variation of the reactive",
    "start": "1006790",
    "end": "1011950"
  },
  {
    "text": "composition is event sourcing probably you have heard of the concept of an event source so the key idea behind",
    "start": "1011950",
    "end": "1019750"
  },
  {
    "text": "event sources as part of the application or the micro service that you write so",
    "start": "1019750",
    "end": "1026860"
  },
  {
    "text": "all the state changing event of a given service is recorded in a distributed log",
    "start": "1026860",
    "end": "1031870"
  },
  {
    "text": "so that any other consumer of that events can recreate the state back and",
    "start": "1031870",
    "end": "1039250"
  },
  {
    "text": "they can actually make it materialize the behavior of the service that you",
    "start": "1039250",
    "end": "1045699"
  },
  {
    "text": "have that that is publishing the events for example this particular use case I have a order management service",
    "start": "1045699",
    "end": "1052540"
  },
  {
    "text": "publishing different states of the order ordered States into a central",
    "start": "1052540",
    "end": "1058350"
  },
  {
    "text": "distributed locks such as Kafka and all the other services subscribed",
    "start": "1058350",
    "end": "1064430"
  },
  {
    "text": "can actually process the look and recreate all the events at this layer so",
    "start": "1064430",
    "end": "1073310"
  },
  {
    "text": "they can interpret these events differently but everything is recorded in a distributed law a slight variation",
    "start": "1073310",
    "end": "1083000"
  },
  {
    "text": "of the same reactive composition is CQRS",
    "start": "1083000",
    "end": "1089090"
  },
  {
    "text": "command query responsibility segregation because most of the services that you",
    "start": "1089090",
    "end": "1094310"
  },
  {
    "text": "are developing are based on crud operations right so you do create read",
    "start": "1094310",
    "end": "1099380"
  },
  {
    "text": "update sand deletes but there are certain use cases that you get you need",
    "start": "1099380",
    "end": "1104480"
  },
  {
    "text": "to treat treat versus writes differently especially if your use case is right in",
    "start": "1104480",
    "end": "1114070"
  },
  {
    "text": "write intensive you need to use a different type of database for writes",
    "start": "1114070",
    "end": "1119090"
  },
  {
    "text": "and different type of database for reads right for example no sequel for writes our DBMS for reads so in this kind of",
    "start": "1119090",
    "end": "1127060"
  },
  {
    "text": "scenarios you can split the query model which is the right part and the command",
    "start": "1127060",
    "end": "1133880"
  },
  {
    "text": "model into two different services and you can back do those two services with",
    "start": "1133880",
    "end": "1140210"
  },
  {
    "text": "completely different data stores and build an eventual consistent remodel between that data stores using some kind",
    "start": "1140210",
    "end": "1147710"
  },
  {
    "text": "of eventing mechanism again CQRS is another commonly used thing for specific",
    "start": "1147710",
    "end": "1155030"
  },
  {
    "text": "use cases so cqr is not for all the micro services that you develop but if",
    "start": "1155030",
    "end": "1160310"
  },
  {
    "text": "you are use case demands you should use CQRS",
    "start": "1160310",
    "end": "1165490"
  },
  {
    "text": "so we talked a lot about different protocols right so building services",
    "start": "1166360",
    "end": "1173080"
  },
  {
    "text": "means you are consuming and producing messages over a drastically different",
    "start": "1173080",
    "end": "1180230"
  },
  {
    "text": "set of messaging protocols right now usually you develop synchronous or",
    "start": "1180230",
    "end": "1186620"
  },
  {
    "text": "request response services with protocols such as HTTP G RPC graph QL WebSockets",
    "start": "1186620",
    "end": "1192380"
  },
  {
    "text": "and web hooks whereas all the message a synchronous messaging is built using",
    "start": "1192380",
    "end": "1199280"
  },
  {
    "text": "cough cornets AMQP so likewise there are a lot of protocols which means the",
    "start": "1199280",
    "end": "1205340"
  },
  {
    "text": "services that you are developing needs to understand this protocols right which",
    "start": "1205340",
    "end": "1211550"
  },
  {
    "text": "means when you are developing the service you need to have sufficient abstractions from the underlying",
    "start": "1211550",
    "end": "1216700"
  },
  {
    "text": "whatever the framework or the language that you are using to cater all these",
    "start": "1216700",
    "end": "1222350"
  },
  {
    "text": "different protocols for example let's say you are building a micro service with C right so it won't be that easy",
    "start": "1222350",
    "end": "1229400"
  },
  {
    "text": "right but if you are building something like a let's say a go you have much more",
    "start": "1229400",
    "end": "1237080"
  },
  {
    "text": "highly high level abstractions to implement using these protocols so",
    "start": "1237080",
    "end": "1243080"
  },
  {
    "text": "likewise you should really concern about the underlying technology because you",
    "start": "1243080",
    "end": "1249440"
  },
  {
    "text": "have to cater different messaging protocols and if you are coming from an",
    "start": "1249440",
    "end": "1255440"
  },
  {
    "text": "integration background the conventional or traditional integration background you should be familiar with enterprise",
    "start": "1255440",
    "end": "1261830"
  },
  {
    "text": "integration patterns there are set of patterns defined by Gregor Hope which",
    "start": "1261830",
    "end": "1267880"
  },
  {
    "text": "mostly related to the service oriented architecture but most of them can be",
    "start": "1267880",
    "end": "1273350"
  },
  {
    "text": "directly applicable for the micro services architecture as well so things such as when you get a message you can",
    "start": "1273350",
    "end": "1279680"
  },
  {
    "text": "do forking joining splitting looping and different types of endpoints aggregation",
    "start": "1279680",
    "end": "1287030"
  },
  {
    "text": "though those things are actually need to be part of your application development",
    "start": "1287030",
    "end": "1292190"
  },
  {
    "text": "frame so when you are building smart endpoints you need to leverage these",
    "start": "1292190",
    "end": "1298460"
  },
  {
    "text": "patterns resiliency so we talked a lot",
    "start": "1298460",
    "end": "1303470"
  },
  {
    "text": "about resiliency when you are using service mesh but the reality is most of",
    "start": "1303470",
    "end": "1309830"
  },
  {
    "text": "us are not using service mesh right only very few probably some state companies use a service mesh but most of most of",
    "start": "1309830",
    "end": "1318020"
  },
  {
    "text": "the real world implementations are yet to use service mesh so that means we",
    "start": "1318020",
    "end": "1323030"
  },
  {
    "text": "need to have inter-service communication over the network which is always unreliable",
    "start": "1323030",
    "end": "1328560"
  },
  {
    "text": "you cannot cross the network and therefore you need to have different resiliency patterns such as timeout",
    "start": "1328560",
    "end": "1336960"
  },
  {
    "text": "retries fail fast bulkhead so those kind of patterns has to be implemented as",
    "start": "1336960",
    "end": "1342930"
  },
  {
    "text": "part of the service so if the underlying framework provides a easy way to build the circuit breaker without writing any",
    "start": "1342930",
    "end": "1349440"
  },
  {
    "text": "boilerplate code then that's that's really great right so you need to look at this kind of resiliency patterns when",
    "start": "1349440",
    "end": "1356100"
  },
  {
    "text": "you're selecting application integration or micro services development framework and when when we use inter-service",
    "start": "1356100",
    "end": "1365940"
  },
  {
    "text": "communication usually you have some messaging requirements such as guarantee",
    "start": "1365940",
    "end": "1372060"
  },
  {
    "text": "delivery exactly once did away at most once delivered likewise different messaging delivery semantics so so based",
    "start": "1372060",
    "end": "1382560"
  },
  {
    "text": "on the protocols that we are using for example if you are using AMQP you get",
    "start": "1382560",
    "end": "1387870"
  },
  {
    "text": "quite a few messaging semantics out of the box from the AMQP protocol itself",
    "start": "1387870",
    "end": "1393540"
  },
  {
    "text": "but if you are using something like Kafka then you have to implement the",
    "start": "1393540",
    "end": "1399690"
  },
  {
    "text": "message delivery semantics as part of the services that you are writing for example if you are using a Kafka",
    "start": "1399690",
    "end": "1406170"
  },
  {
    "text": "producer and a consumer you at the consumer side you need to keep track of",
    "start": "1406170",
    "end": "1411210"
  },
  {
    "text": "the Kafka off offset write the topic offset that you are consuming and if",
    "start": "1411210",
    "end": "1417330"
  },
  {
    "text": "that if your service goes down you need to persist the offset so that you can read read when you are up when your",
    "start": "1417330",
    "end": "1425040"
  },
  {
    "text": "service is up you can read from where you left so likewise these delivery semantics has to be implemented as part",
    "start": "1425040",
    "end": "1431910"
  },
  {
    "text": "of the service and it's really great that if the underlying protocol is the underlying framework provides these",
    "start": "1431910",
    "end": "1438420"
  },
  {
    "text": "semantics out of the box so microservices communication means a",
    "start": "1438420",
    "end": "1445020"
  },
  {
    "text": "composition means we are dealing with lot of message types right so types in",
    "start": "1445020",
    "end": "1451470"
  },
  {
    "text": "the sense you have different types representation with different business",
    "start": "1451470",
    "end": "1458310"
  },
  {
    "text": "boundaries right so you represent a type with employee then you treat that as I stood and in",
    "start": "1458310",
    "end": "1464490"
  },
  {
    "text": "some other cases so likewise there are different types and as part of the service composition you need to have",
    "start": "1464490",
    "end": "1471390"
  },
  {
    "text": "some kind of a type mapping so usually these types are directly mapped to the",
    "start": "1471390",
    "end": "1478800"
  },
  {
    "text": "wire level protocols such as JSON XML protocol buffers or Avro but when you",
    "start": "1478800",
    "end": "1485010"
  },
  {
    "text": "are using things such as protocol buffers these types are automatically coming into your service development",
    "start": "1485010",
    "end": "1492690"
  },
  {
    "text": "framework because you develop you properly develop whatever the type that you are using right so for example when",
    "start": "1492690",
    "end": "1499890"
  },
  {
    "text": "you are using JSON you may use something like this and schema to define the types",
    "start": "1499890",
    "end": "1504960"
  },
  {
    "text": "that you are using but that is not really commonly used still but when you",
    "start": "1504960",
    "end": "1510510"
  },
  {
    "text": "are building services such as protocol buffers or G RPC it is mandatory to",
    "start": "1510510",
    "end": "1515850"
  },
  {
    "text": "define the types properly right so therefore you will get you will get",
    "start": "1515850",
    "end": "1522480"
  },
  {
    "text": "well-defined types as part of the service and when it comes to complex",
    "start": "1522480",
    "end": "1528090"
  },
  {
    "text": "type mapping some organizations prefer to use this kind of a graphical tooling",
    "start": "1528090",
    "end": "1534600"
  },
  {
    "text": "as well so otherwise you have to do all these type mapping with between two different types using programmatic",
    "start": "1534600",
    "end": "1541230"
  },
  {
    "text": "approach basically you code or the type mapping logic but certain integration",
    "start": "1541230",
    "end": "1546600"
  },
  {
    "text": "solutions almost all the conventional solutions provide this as a data mapping",
    "start": "1546600",
    "end": "1551820"
  },
  {
    "text": "capability but some of the cloud native solutions to provide the type mapping",
    "start": "1551820",
    "end": "1557760"
  },
  {
    "text": "capability as well now if you look at the services that we are developing the",
    "start": "1557760",
    "end": "1564510"
  },
  {
    "text": "application that we are building we can categorize them into either of these",
    "start": "1564510",
    "end": "1570410"
  },
  {
    "text": "categories right so usually most of the services that you developed are based on",
    "start": "1570410",
    "end": "1575490"
  },
  {
    "text": "the API semantics request response some services that you developed are based on",
    "start": "1575490",
    "end": "1580980"
  },
  {
    "text": "event based consuming producing and consuming and some are stream based okay",
    "start": "1580980",
    "end": "1587340"
  },
  {
    "text": "so what I stream stream is another variant of events so stream is a set of",
    "start": "1587340",
    "end": "1592940"
  },
  {
    "text": "continuous set of events that you are processing so usually when you're",
    "start": "1592940",
    "end": "1599640"
  },
  {
    "text": "processing events you will only process one event at a time and just complete it but when you are processing a stream you",
    "start": "1599640",
    "end": "1605910"
  },
  {
    "text": "will process a sequence of events over the time so when you are building this",
    "start": "1605910",
    "end": "1614280"
  },
  {
    "text": "kind of micro services or cloud native applications you may have to use some kind of a streaming stream processing",
    "start": "1614280",
    "end": "1620760"
  },
  {
    "text": "logic as well right so that's where are things such as ke sequel there are a lot",
    "start": "1620760",
    "end": "1626460"
  },
  {
    "text": "of other stream processing frameworks available so if the use case requires",
    "start": "1626460",
    "end": "1631800"
  },
  {
    "text": "stream processing you need to select the underlying technology so that you have a stream processing built into the",
    "start": "1631800",
    "end": "1637970"
  },
  {
    "text": "underlying framework and especially if",
    "start": "1637970",
    "end": "1643530"
  },
  {
    "text": "you are coming from an enterprise background you know that you are not in a Greenfield right so you have to",
    "start": "1643530",
    "end": "1649110"
  },
  {
    "text": "integrate with a lot of existing systems and services so you need to have",
    "start": "1649110",
    "end": "1654390"
  },
  {
    "text": "adapters for most of the existing systems such as your RP systems software",
    "start": "1654390",
    "end": "1661440"
  },
  {
    "text": "as-a-service systems so it's it's important to have all the required adapters and connectors from the",
    "start": "1661440",
    "end": "1667740"
  },
  {
    "text": "underlying framework finally the the",
    "start": "1667740",
    "end": "1673070"
  },
  {
    "text": "workflows workflow requirements so we usually talk a lot about stateless use",
    "start": "1673070",
    "end": "1681360"
  },
  {
    "text": "cases right but in in certain use cases you have long-running four processors which",
    "start": "1681360",
    "end": "1686730"
  },
  {
    "text": "are stateful right so in those kind of scenarios you need to have you need to",
    "start": "1686730",
    "end": "1692460"
  },
  {
    "text": "implement business processes which are stateful long-running and and also in",
    "start": "1692460",
    "end": "1699120"
  },
  {
    "text": "certain scenarios you need compensation and distributed transaction so this is implementing distributed transactions",
    "start": "1699120",
    "end": "1705450"
  },
  {
    "text": "with my services is probably the one of the hardest things right so that's where all the things such as the saga pattern",
    "start": "1705450",
    "end": "1712530"
  },
  {
    "text": "where you implement the distributed transaction as a set of compensation",
    "start": "1712530",
    "end": "1720150"
  },
  {
    "text": "based States which are persisted into a distributed look so with saga what you",
    "start": "1720150",
    "end": "1727320"
  },
  {
    "text": "can do is you can call different micro-services and SIL you",
    "start": "1727320",
    "end": "1732539"
  },
  {
    "text": "create some kind of a distributed transaction boundary between all those services because you are actually",
    "start": "1732539",
    "end": "1738359"
  },
  {
    "text": "persisting all the service calls into a distributed log and if some if a given",
    "start": "1738359",
    "end": "1744719"
  },
  {
    "text": "service fails you can basically revert that the state using the compensation",
    "start": "1744719",
    "end": "1751409"
  },
  {
    "text": "operations ok so let's so we talked a lot about the",
    "start": "1751409",
    "end": "1760979"
  },
  {
    "text": "requirements that you have in building cloud native applications and building interconnection between those",
    "start": "1760979",
    "end": "1767039"
  },
  {
    "text": "applications so let's look at some of the cloud native frameworks that are available for doing this right so",
    "start": "1767039",
    "end": "1774989"
  },
  {
    "text": "obviously most of the conventional ESB solutions won't be a good fit for this",
    "start": "1774989",
    "end": "1781379"
  },
  {
    "text": "because simply because they are monolithic right so they are not talking friendly they are not community is",
    "start": "1781379",
    "end": "1786719"
  },
  {
    "text": "friendly but some of the integration framework vendors they have revamped",
    "start": "1786719",
    "end": "1792269"
  },
  {
    "text": "their solutions so that we can map we can directly use them in a cloud native",
    "start": "1792269",
    "end": "1798869"
  },
  {
    "text": "environment so one of the best example is apache camel kay so a partial camel",
    "start": "1798869",
    "end": "1804239"
  },
  {
    "text": "is a well-known integration framework which is designed for monolithic architecture but with camel key they",
    "start": "1804239",
    "end": "1810629"
  },
  {
    "text": "provided native integration with kubernetes so as part of the wso 2 we we",
    "start": "1810629",
    "end": "1816929"
  },
  {
    "text": "also we also used to provide the central enterprise service bus solution but we",
    "start": "1816929",
    "end": "1822989"
  },
  {
    "text": "built the the micro integrator solution which is the cloud native version and if",
    "start": "1822989",
    "end": "1828329"
  },
  {
    "text": "you are using spring boat spring integration will be a good candidate for doing this kind of application",
    "start": "1828329",
    "end": "1833700"
  },
  {
    "text": "integration because you get most of the required abstractions as part of the spring integration and also these",
    "start": "1833700",
    "end": "1842249"
  },
  {
    "text": "application integration capabilities are baked into some of the frameworks right",
    "start": "1842249",
    "end": "1847499"
  },
  {
    "text": "if you look at the spring boat you have things such as circuit breaker and you have things such as create rise all",
    "start": "1847499",
    "end": "1854609"
  },
  {
    "text": "those things are as packages in the spring mood framework itself vertex is",
    "start": "1854609",
    "end": "1861539"
  },
  {
    "text": "very similar again you have most of the abstractions built into vertex framework and there are",
    "start": "1861539",
    "end": "1868749"
  },
  {
    "text": "certain programming languages as I explained earlier go language has some of the abstraction required as part of",
    "start": "1868749",
    "end": "1876220"
  },
  {
    "text": "the language node has those capabilities and as part of WV we have been also",
    "start": "1876220",
    "end": "1882789"
  },
  {
    "text": "developing a new programming language called ballerina which is an open-source language with most of the abstractions",
    "start": "1882789",
    "end": "1889659"
  },
  {
    "text": "required to do integration so for example as part of ballerina you have a",
    "start": "1889659",
    "end": "1895769"
  },
  {
    "text": "you'll get first class constructs such as services endpoints circuit breakers",
    "start": "1895769",
    "end": "1902700"
  },
  {
    "text": "which are directly coming from the language so you can give it a try and",
    "start": "1902700",
    "end": "1908289"
  },
  {
    "text": "also other frameworks are emerging especially the micro not is growl it's a",
    "start": "1908289",
    "end": "1914049"
  },
  {
    "text": "JVM framework based on growl VM so unlike Springwood one of these Microsoft",
    "start": "1914049",
    "end": "1920379"
  },
  {
    "text": "micro node base instance will boot within few milliseconds right and I think Red Hat is working on something",
    "start": "1920379",
    "end": "1927429"
  },
  {
    "text": "called carcass which is which is a game grabby grabby and based implementation",
    "start": "1927429",
    "end": "1933610"
  },
  {
    "text": "of multiple things such as camel rustici",
    "start": "1933610",
    "end": "1939450"
  },
  {
    "text": "prometheus so it's kind of a combination of all those things running on top of",
    "start": "1939450",
    "end": "1944590"
  },
  {
    "text": "graph so as part of w0 we are also",
    "start": "1944590",
    "end": "1949749"
  },
  {
    "text": "trying to address most of the concerns that we have in this cloud native and",
    "start": "1949749",
    "end": "1955179"
  },
  {
    "text": "integration landscape so obviously the ballerina is a technology to develop the",
    "start": "1955179",
    "end": "1961269"
  },
  {
    "text": "smart endpoints so we have our conventional ESB is the the cloud native",
    "start": "1961269",
    "end": "1966429"
  },
  {
    "text": "variant of that and again API management we have a open so all these or the",
    "start": "1966429",
    "end": "1972730"
  },
  {
    "text": "double use of the products of hundred percent open source and our business model is based on commercial support so",
    "start": "1972730",
    "end": "1979210"
  },
  {
    "text": "you can try out some of these solutions to realize your business use cases okay",
    "start": "1979210",
    "end": "1986740"
  },
  {
    "text": "so in summary application integration is not going away so even if you use micro",
    "start": "1986740",
    "end": "1993159"
  },
  {
    "text": "services or cloud native are correct architecture application integration could be the most important",
    "start": "1993159",
    "end": "1998550"
  },
  {
    "text": "aspect to your architecture so service mesh is it's becoming so popular you can",
    "start": "1998550",
    "end": "2006800"
  },
  {
    "text": "offload a lot of commodity you can liberate most of the commodity",
    "start": "2006800",
    "end": "2012050"
  },
  {
    "text": "capabilities from the service mesh but it is not not for application integration and the good thing about",
    "start": "2012050",
    "end": "2019730"
  },
  {
    "text": "service mesh is we are seeing most of the cloud providers now providing service mesh as a service so for example",
    "start": "2019730",
    "end": "2027230"
  },
  {
    "text": "AWS or even GCP they provide steel on Roy as a service from the underlying",
    "start": "2027230",
    "end": "2033740"
  },
  {
    "text": "infrastructure so it is becoming part of the infrastructure which is great because we don't have to manage service",
    "start": "2033740",
    "end": "2039770"
  },
  {
    "text": "measures anymore and it's very important to select the most appropriate technology to build your use case to",
    "start": "2039770",
    "end": "2047450"
  },
  {
    "text": "build your micro services use case that heavily depends on most of the requirements that we just talked about",
    "start": "2047450",
    "end": "2053960"
  },
  {
    "text": "so based on the protocols that you are using based on the messaging patterns you are using you should select the",
    "start": "2053960",
    "end": "2061300"
  },
  {
    "text": "underlying micro services development technology ok so that's about it so",
    "start": "2061300",
    "end": "2068929"
  },
  {
    "text": "thanks for coming [Applause]",
    "start": "2068929",
    "end": "2077359"
  }
]