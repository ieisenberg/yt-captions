[
  {
    "text": "all right thanks for coming uh my name is pramod I work with artworks uh doing a lot of database related work uh not",
    "start": "5940",
    "end": "13620"
  },
  {
    "text": "necessarily like DBA type work but how do you store data what do you do with it how do you use it and for what purpose",
    "start": "13620",
    "end": "19680"
  },
  {
    "text": "and what are the most efficient ways of storing taking them out and refactoring them over a long span because",
    "start": "19680",
    "end": "26340"
  },
  {
    "text": "applications come and go so over a span of the company itself like don't think",
    "start": "26340",
    "end": "33180"
  },
  {
    "text": "application the company itself the data is valuable so the application can come",
    "start": "33180",
    "end": "38340"
  },
  {
    "text": "and go but the data has to survive so that you can use it properly for further analysis and all that kind of stuff so",
    "start": "38340",
    "end": "45000"
  },
  {
    "text": "over the period at thoughtworks I have written a couple of books one of them being refactoring databases so in a",
    "start": "45000",
    "end": "51300"
  },
  {
    "text": "mature database how do you refactor it and that kind of stuff one other being how do you do databases and continuous",
    "start": "51300",
    "end": "56879"
  },
  {
    "text": "integration my latest book along with Martin Fowler is no SQL digital because",
    "start": "56879",
    "end": "63000"
  },
  {
    "text": "we think the nosql movement is come to a stage where a lot of people are thinking",
    "start": "63000",
    "end": "68820"
  },
  {
    "text": "about it and thinking about how to use nosql so this book gives you an",
    "start": "68820",
    "end": "74700"
  },
  {
    "text": "introduction in the sense that how do you have to change your mind when you",
    "start": "74700",
    "end": "80040"
  },
  {
    "text": "think about nosql like you can't apply the same modeling things you did with",
    "start": "80040",
    "end": "85560"
  },
  {
    "text": "rdbms to a nosql technology and hope that it will perform better right just",
    "start": "85560",
    "end": "90840"
  },
  {
    "text": "because it's no SQL so the way I like to do this is if you have questions right",
    "start": "90840",
    "end": "97380"
  },
  {
    "text": "there then and ask so that we can have a conversation instead of me just dumping a bunch of content on you right so we",
    "start": "97380",
    "end": "104040"
  },
  {
    "text": "can tailor it to the way the questions are going instead of just following slides",
    "start": "104040",
    "end": "109140"
  },
  {
    "text": "so whenever you have a question just ask and if you don't understand any terms I am talking about just ask that too like",
    "start": "109140",
    "end": "115680"
  },
  {
    "text": "I don't understand what you're saying or what right okay",
    "start": "115680",
    "end": "121200"
  },
  {
    "text": "so the first question is why no SQL right so we know schema changes are hard right it's not easy especially if you",
    "start": "121200",
    "end": "128399"
  },
  {
    "text": "are in 24 7 kind of environment large data sets you want to rename a table rename a column add a column remove a",
    "start": "128399",
    "end": "134879"
  },
  {
    "text": "index it basically locks up your database and then you have to basically bring your app down or people do this",
    "start": "134879",
    "end": "141060"
  },
  {
    "text": "Master Slave kind of thing a lot of juggling around just to make that schema change stuff work right there's",
    "start": "141060",
    "end": "147000"
  },
  {
    "text": "impedance mismatch so we develop in objects but we store in relational tables that creates all kinds of",
    "start": "147000",
    "end": "153900"
  },
  {
    "text": "interesting things the I the orm layer the way you're thinking about it or searching patterns change and all that",
    "start": "153900",
    "end": "160620"
  },
  {
    "text": "kind of crazy stuff happens and because of which the code gets really complicated and changing code for",
    "start": "160620",
    "end": "166379"
  },
  {
    "text": "changing requirements then becomes hard that's where schema change affects this impedance mismatch right then the next",
    "start": "166379",
    "end": "173700"
  },
  {
    "text": "is like we are used to thinking about integration databases like there are a bunch of applications who are running on",
    "start": "173700",
    "end": "179400"
  },
  {
    "text": "top of a database and and then the database becomes your bottleneck because you if you change something for your",
    "start": "179400",
    "end": "186420"
  },
  {
    "text": "applications database it affects everybody else right so this is this is how we are stuck on this side here",
    "start": "186420",
    "end": "193260"
  },
  {
    "text": "because the integration database is where you move information around instead of going through the web service",
    "start": "193260",
    "end": "199739"
  },
  {
    "text": "layer or a restful layer or something like that and then the application can decide what to do with the database",
    "start": "199739",
    "end": "206099"
  },
  {
    "text": "right so if you are on the right side kind of a situation then your application can decide what to do with the database refactor change redesign",
    "start": "206099",
    "end": "214080"
  },
  {
    "text": "whatever it needs to do without affecting the external customers of the data itself right so in the integration",
    "start": "214080",
    "end": "221099"
  },
  {
    "text": "database model if you change something for your application most likely are going to affect others and that fear of",
    "start": "221099",
    "end": "228420"
  },
  {
    "text": "affecting others stops you from doing things to the database or doing better things to the database right",
    "start": "228420",
    "end": "235680"
  },
  {
    "text": "then there's also this running on cluster so like running any kind of rdbms on a cluster is a pain like it's",
    "start": "235680",
    "end": "242159"
  },
  {
    "text": "not that easy it's expensive like Oracle eight application cluster will cost you",
    "start": "242159",
    "end": "247379"
  },
  {
    "text": "somewhere upwards of seven figure uh speakers right so running on clusters is",
    "start": "247379",
    "end": "252780"
  },
  {
    "text": "really hard in an rbms not hard as in technically hard but financially also right and nowadays with the whole web",
    "start": "252780",
    "end": "260220"
  },
  {
    "text": "thing coming up and there's people wanting to track everything or all kinds of data there's this whole notion of",
    "start": "260220",
    "end": "265979"
  },
  {
    "text": "unstructured data and the structure of the data itself keeps changing on you so do you go and refactor this schema to",
    "start": "265979",
    "end": "272220"
  },
  {
    "text": "fit to the new structure how fast can you do that that's again in question right and also there's this rate of",
    "start": "272220",
    "end": "278580"
  },
  {
    "text": "growth like that's the rdbms capacity planning whatever DBS types people do",
    "start": "278580",
    "end": "284160"
  },
  {
    "text": "they believe in this or they plan for this linear growth like 40 percent growth every year let's plan for that",
    "start": "284160",
    "end": "290340"
  },
  {
    "text": "have a sand in place and all that kind of stuff nowadays rates of growth are totally skewed sometimes your product",
    "start": "290340",
    "end": "297060"
  },
  {
    "text": "may go hit viral and in two days you'll have like terabytes of stuff coming at you and in a month or so something new",
    "start": "297060",
    "end": "303000"
  },
  {
    "text": "comes and people don't visit your site anymore right so that happens and the rate of growth is up and down uh so you",
    "start": "303000",
    "end": "309180"
  },
  {
    "text": "need to think about technologies that can scale to that model of going up and down or going up very fast and that kind",
    "start": "309180",
    "end": "316440"
  },
  {
    "text": "of stuff right so the rate of growth is also important so having said that let's go into this",
    "start": "316440",
    "end": "323400"
  },
  {
    "text": "thinking about how do you model for the snow SQL movement so right now don't think about key values documents",
    "start": "323400",
    "end": "329759"
  },
  {
    "text": "anything like that just think about your object how you are modeling that object and how the data in that object is gonna",
    "start": "329759",
    "end": "336960"
  },
  {
    "text": "like this is generally how your object model would look like and let's take that object model and this is how your",
    "start": "336960",
    "end": "343020"
  },
  {
    "text": "data would look like in the database right so think of the first impedance mismatch",
    "start": "343020",
    "end": "349080"
  },
  {
    "text": "slide you saw and this is what is happening like the model is being reflected as rows in the database right",
    "start": "349080",
    "end": "355919"
  },
  {
    "text": "it gets complex pretty fast and has like a request talking about this like in the",
    "start": "355919",
    "end": "361139"
  },
  {
    "text": "cab we just came in he was talking about this unbounded like relations are all over the place and it doesn't get",
    "start": "361139",
    "end": "366180"
  },
  {
    "text": "bounded you can keep traversing as far as they want and it doesn't get bounded pretty properly right so that model",
    "start": "366180",
    "end": "374580"
  },
  {
    "text": "creates all kinds of core complexity as well as lots of orm",
    "start": "374580",
    "end": "379919"
  },
  {
    "text": "headache right there is actually a paper which says like orm is the Vietnam of computer science somewhere uh so maybe",
    "start": "379919",
    "end": "387539"
  },
  {
    "text": "it's that's a good read to do but that's where this whole notion of aggregate model comes in like Eric events talks",
    "start": "387539",
    "end": "394199"
  },
  {
    "text": "about domain driven design think about the domain first and then you can think about how to store that data in",
    "start": "394199",
    "end": "400500"
  },
  {
    "text": "different ways right so in this here we are saying the customer is aggregate as well as the order is an aggregate so",
    "start": "400500",
    "end": "406380"
  },
  {
    "text": "having taken that you can then come up with an Json representation of the aggregate itself right so we have",
    "start": "406380",
    "end": "413340"
  },
  {
    "text": "customers with the idea of one and the name of Martin and a billing address of something and in the orders aggregate we",
    "start": "413340",
    "end": "420479"
  },
  {
    "text": "have the order itself like all the orders the customer ever placed with all",
    "start": "420479",
    "end": "425880"
  },
  {
    "text": "the dependent things embedded inside it right so once you start thinking about in Aggregates then you can also start",
    "start": "425880",
    "end": "432840"
  },
  {
    "text": "thinking about how this Aggregates are to be related because sometimes you may",
    "start": "432840",
    "end": "438000"
  },
  {
    "text": "look at a customer and want to get all their orders or sometimes you may want to look at an order and get the",
    "start": "438000",
    "end": "443520"
  },
  {
    "text": "customers information right this is where you can also need to think about uh",
    "start": "443520",
    "end": "450240"
  },
  {
    "text": "options of how much do I get data by reference and how much do I get by",
    "start": "450240",
    "end": "455940"
  },
  {
    "text": "embedding all right so in in nosql a lot of people talk about embedding data as",
    "start": "455940",
    "end": "461099"
  },
  {
    "text": "well as a referencing data right and these references are not enforced by any",
    "start": "461099",
    "end": "466740"
  },
  {
    "text": "nosql product like if for example here I have a customer ID of one and in the customers I have ID of one if you put",
    "start": "466740",
    "end": "474419"
  },
  {
    "text": "id2 no nobody cares not like relational database where somebody like if you have",
    "start": "474419",
    "end": "479520"
  },
  {
    "text": "a foreign key hopefully defined then the database will barf at you saying foreign key doesn't meet the requirement there's",
    "start": "479520",
    "end": "486060"
  },
  {
    "text": "nothing like that I didn't know SQL so you have to think of that too like references can sometimes if your data is not set up",
    "start": "486060",
    "end": "493560"
  },
  {
    "text": "or there's a bug somewhere and you have wrong references nobody's going to come and tell you that this reference is",
    "start": "493560",
    "end": "499800"
  },
  {
    "text": "invalid right so you have to see how you can do that",
    "start": "499800",
    "end": "505259"
  },
  {
    "text": "but once you do this then life becomes a lot easier because now you are thinking",
    "start": "505259",
    "end": "510300"
  },
  {
    "text": "in Aggregates and that aggregate itself can be moved around without having to worry about where data for the",
    "start": "510300",
    "end": "517140"
  },
  {
    "text": "dependence comes from because that aggregate itself is a self-contained thing right so think of like uh having",
    "start": "517140",
    "end": "524700"
  },
  {
    "text": "to set up like test data in your database right in rdbms you would say oh I need order that means I need a one row",
    "start": "524700",
    "end": "531959"
  },
  {
    "text": "in order table four rows in order items five rows in product one row in customer",
    "start": "531959",
    "end": "537060"
  },
  {
    "text": "one row in you have to go down that chain here there's no chain there's a Json and",
    "start": "537060",
    "end": "542760"
  },
  {
    "text": "that's it right that is self content so that simplifies a lot of thinking",
    "start": "542760",
    "end": "548279"
  },
  {
    "text": "right so you can have different aggregate models too like in the previous aggregate model we had the",
    "start": "548279",
    "end": "556019"
  },
  {
    "text": "customer as well as the order right ah we can also go down one more path of",
    "start": "556019",
    "end": "562560"
  },
  {
    "text": "customer being the highest level aggregate that embeds other Aggregates inside it right",
    "start": "562560",
    "end": "568860"
  },
  {
    "text": "this is where nosql also will help you because you could do rapid prototypes of",
    "start": "568860",
    "end": "574019"
  },
  {
    "text": "this you don't have to come up with the model that matches you perfectly in the first iteration you could do multiple",
    "start": "574019",
    "end": "580260"
  },
  {
    "text": "turns on this and then as you grow you can think about like okay that aggregate model suited me better than this one or",
    "start": "580260",
    "end": "587580"
  },
  {
    "text": "maybe this is where this is lacking I can come up with a different aggregate model and things like that right",
    "start": "587580",
    "end": "593519"
  },
  {
    "text": "so you could choose that and then now the Json totally changes is once you do",
    "start": "593519",
    "end": "598620"
  },
  {
    "text": "uh Json get everything comes in it like the customer all its orders and everything is in one packet coming back",
    "start": "598620",
    "end": "605040"
  },
  {
    "text": "from the database right so you don't have to do multiple gets on the database right",
    "start": "605040",
    "end": "610560"
  },
  {
    "text": "so here's like a easier image of the same thing uh let's say for example you",
    "start": "610560",
    "end": "616680"
  },
  {
    "text": "had you had a customer as a key right and the value is an object and inside that",
    "start": "616680",
    "end": "623760"
  },
  {
    "text": "value object there are multiple objects like the customer object the billing address the orders is a collection of",
    "start": "623760",
    "end": "629839"
  },
  {
    "text": "orders and the order itself has a shipping address the order payment all of that embedded inside the key of the",
    "start": "629839",
    "end": "637440"
  },
  {
    "text": "customer ID so once you get the key and its value from the database everything",
    "start": "637440",
    "end": "642899"
  },
  {
    "text": "is inside you don't have to go back to the database again at all for anything else right",
    "start": "642899",
    "end": "649620"
  },
  {
    "text": "and the application can then break it down put it into your objects and then do whatever you need to do with it",
    "start": "649620",
    "end": "656040"
  },
  {
    "text": "you can also have references within the Aggregates so for example here we have a customer ID and",
    "start": "656040",
    "end": "664440"
  },
  {
    "text": "the value is object about the customers it has a list of references to the order IDs right and then there's also",
    "start": "664440",
    "end": "672920"
  },
  {
    "text": "object for each order within that list right so whenever I place a new order as",
    "start": "672920",
    "end": "679740"
  },
  {
    "text": "an existing customer I create a new key for that order ID and purchase the rest",
    "start": "679740",
    "end": "685500"
  },
  {
    "text": "of it at the same time add to the list of orders in the references for the",
    "start": "685500",
    "end": "691320"
  },
  {
    "text": "customers right so that's how I do a double write one to the orders and the",
    "start": "691320",
    "end": "696420"
  },
  {
    "text": "other to the customer just append the list of order IDs so obviously this has just some downsides because as you know",
    "start": "696420",
    "end": "703860"
  },
  {
    "text": "most nosql databases don't support acid transactions so your order may get written and your customer right May Fail",
    "start": "703860",
    "end": "711120"
  },
  {
    "text": "then you have reference problems or your order May Fail and your customer may get",
    "start": "711120",
    "end": "716459"
  },
  {
    "text": "return so you have to do this on the application side if like if the write fails we try or something like that or",
    "start": "716459",
    "end": "723300"
  },
  {
    "text": "make the other guy fail something like that you have to think about this at architectural level you can't just hope",
    "start": "723300",
    "end": "728820"
  },
  {
    "text": "that will work right so this is a important trade-off you are making while making the choice or splitting the",
    "start": "728820",
    "end": "735060"
  },
  {
    "text": "aggregate right so you can use the same kind of references with Json documents here's a",
    "start": "735060",
    "end": "741660"
  },
  {
    "text": "Json representation of the same thing right so what does aggregate orientation gives",
    "start": "741660",
    "end": "747480"
  },
  {
    "text": "you right one thing is the rdbms themselves are not aggregate aware like",
    "start": "747480",
    "end": "753300"
  },
  {
    "text": "they like rdbms have this concept of materialized views but materialized view",
    "start": "753300",
    "end": "758399"
  },
  {
    "text": "is still a row right you can't have a materialized view with one customer ID and three addresses",
    "start": "758399",
    "end": "764880"
  },
  {
    "text": "you will need like three sets of columns for addresses for that to show up properly you can always take XML and",
    "start": "764880",
    "end": "771360"
  },
  {
    "text": "stuff it into a column in the uh database for key and a value in the",
    "start": "771360",
    "end": "776459"
  },
  {
    "text": "rdbms but then you're making the RDMAs behave like a key value store right so",
    "start": "776459",
    "end": "782220"
  },
  {
    "text": "that's the difference between aggregate thinking and non-aggregate thinking or relational thinking right",
    "start": "782220",
    "end": "789180"
  },
  {
    "text": "once you start thinking about Aggregates the whole notion of asset compliance",
    "start": "789180",
    "end": "794399"
  },
  {
    "text": "kind of becomes a lesser priority right because now it's a single read and a",
    "start": "794399",
    "end": "799860"
  },
  {
    "text": "single right you need asset in the database like rdbms storms mostly because you're writing to four or five",
    "start": "799860",
    "end": "806459"
  },
  {
    "text": "different tables like think about persisting in order you're adding to the order table you're writing to the order",
    "start": "806459",
    "end": "811860"
  },
  {
    "text": "item table maybe you're writing to the stock inventory table because you did a subtraction so those many rights that's",
    "start": "811860",
    "end": "819480"
  },
  {
    "text": "where asset becomes very important because if any one of them fails you want to fail the rest of it right here",
    "start": "819480",
    "end": "825420"
  },
  {
    "text": "you are writing a single aggregate if the aggregate fails everything fails as it is right because it's a single",
    "start": "825420",
    "end": "830820"
  },
  {
    "text": "aggregate right so that's where like a lot of people have these questions of oh nosql",
    "start": "830820",
    "end": "836940"
  },
  {
    "text": "no asset I have questions how can I use this so switch your thinking in terms of",
    "start": "836940",
    "end": "842459"
  },
  {
    "text": "Aggregates and that will make uh thinking about you know SQL a little easier right",
    "start": "842459",
    "end": "849920"
  },
  {
    "text": "once you go to the aggregate model running on clusters becomes easier because now it's just an aggregate it's",
    "start": "849920",
    "end": "855899"
  },
  {
    "text": "a self contained unit you can store wherever you want right one server tens are or thousand servers doesn't really",
    "start": "855899",
    "end": "862079"
  },
  {
    "text": "matter because it's just one aggregate get gets stored wherever in relational",
    "start": "862079",
    "end": "867540"
  },
  {
    "text": "databases like clusters make it very hard because then you have to think about related rows where they go and",
    "start": "867540",
    "end": "873180"
  },
  {
    "text": "that kind of stuff here the aggregate itself is a single unit it can be pushed wherever you want it to be pushed right",
    "start": "873180",
    "end": "881040"
  },
  {
    "text": "so now coming to the databases like key value stores document databases and",
    "start": "881040",
    "end": "886079"
  },
  {
    "text": "column family stores are all aggregate based according to us right so a key",
    "start": "886079",
    "end": "891720"
  },
  {
    "text": "value store just as a key and a value the value is aggregate in the document databases also you have a key and a",
    "start": "891720",
    "end": "897779"
  },
  {
    "text": "value that goes with it the value is understood by the database sure you can query on parts of the value but it's",
    "start": "897779",
    "end": "904139"
  },
  {
    "text": "still a key and a value the value is visible to the database right and the column family comes in the same model of",
    "start": "904139",
    "end": "911519"
  },
  {
    "text": "there's a row and the row has columns but the row of still is an aggregate at the aggregate level right so when you",
    "start": "911519",
    "end": "918839"
  },
  {
    "text": "start thinking about nosql databases think whether you are in the aggregate camp or the non-aggregate camp",
    "start": "918839",
    "end": "924480"
  },
  {
    "text": "and then you will have to also think about like graph databases which are a totally different Beast altogether right",
    "start": "924480",
    "end": "931560"
  },
  {
    "text": "so we will talk about each three of this as well as talk about graph databases right",
    "start": "931560",
    "end": "936899"
  },
  {
    "text": "so in graph databases the modeling totally changes right each node is on",
    "start": "936899",
    "end": "942420"
  },
  {
    "text": "its own and the node has relationships with other nodes right so think of like",
    "start": "942420",
    "end": "947699"
  },
  {
    "text": "a simple e-commerce app where your customer actually purchased a product",
    "start": "947699",
    "end": "953699"
  },
  {
    "text": "right and he was built to a given address he was a part of uh",
    "start": "953699",
    "end": "961380"
  },
  {
    "text": "order and that kind of stuff and these relationships have names and those names",
    "start": "961380",
    "end": "967139"
  },
  {
    "text": "can have values too like a key value pair attached to that relationship right so you can do very rich domain modeling",
    "start": "967139",
    "end": "973860"
  },
  {
    "text": "on these nodes as well as the relationships right and that's where traversal becomes very important so if",
    "start": "973860",
    "end": "982320"
  },
  {
    "text": "you are really interested in Connected data like how the data is connected to each other and what does the",
    "start": "982320",
    "end": "989160"
  },
  {
    "text": "connectedness give me in terms of the intelligence about the data and the actions people are doing that's where",
    "start": "989160",
    "end": "995459"
  },
  {
    "text": "you start thinking about graph databases a easier example to think about this would be like let's say you wanted to",
    "start": "995459",
    "end": "1002380"
  },
  {
    "text": "look at knowledge sharing within a given organization like let's say your company",
    "start": "1002380",
    "end": "1008180"
  },
  {
    "text": "you are thinking about analyzing how people share knowledge right or how people interact with each other and that",
    "start": "1008180",
    "end": "1014300"
  },
  {
    "text": "kind of stuff you could easily go through your email archives and see who wrote To whom on what topic right and in",
    "start": "1014300",
    "end": "1022639"
  },
  {
    "text": "what locations they were do you can do all kinds of modeling and then decide like what is the most highest bandwidth",
    "start": "1022639",
    "end": "1028339"
  },
  {
    "text": "between two sets of people all right that can be done using graph databases",
    "start": "1028339",
    "end": "1033740"
  },
  {
    "text": "what that gives you is like what are the blockers what are the enablers for better communication right",
    "start": "1033740",
    "end": "1040100"
  },
  {
    "text": "so that's where you would use graph kind of modeling right so the key points is",
    "start": "1040100",
    "end": "1046400"
  },
  {
    "text": "interaggregate relations are hard to maintain that's what I was saying like if you use references and one of the",
    "start": "1046400",
    "end": "1052520"
  },
  {
    "text": "operations fails then you don't know which one succeeded which one the references may be out of sync so you will have to do that on the application",
    "start": "1052520",
    "end": "1058820"
  },
  {
    "text": "side in the sense if something fails rewrite it or fail the whole transaction or fail the whole operation on the",
    "start": "1058820",
    "end": "1065660"
  },
  {
    "text": "applications right schema less everybody likes schema Less in osql but",
    "start": "1065660",
    "end": "1072140"
  },
  {
    "text": "the schema is still implicit in your code that's the biggest trip I have seen people do is like they'll think oh",
    "start": "1072140",
    "end": "1078860"
  },
  {
    "text": "schema less I don't need to worry about schema a couple of iterations later they can't get to the data because the schema",
    "start": "1078860",
    "end": "1085280"
  },
  {
    "text": "has changed now some of the rows or some of the documents that are returned using the old schema cannot be passed anymore",
    "start": "1085280",
    "end": "1091160"
  },
  {
    "text": "and that kind of stuff so if you're thinking hey schema free I don't have to worry about it stop that thinking right",
    "start": "1091160",
    "end": "1097940"
  },
  {
    "text": "now right you have to worry about it because it is schema free only in the",
    "start": "1097940",
    "end": "1103160"
  },
  {
    "text": "database the schema is in the application side right so we'll talk about a couple of",
    "start": "1103160",
    "end": "1108679"
  },
  {
    "text": "techniques on how to do this schema migration multiple object versioning and that kind of stuff in the database right",
    "start": "1108679",
    "end": "1115700"
  },
  {
    "text": "and like I said graph databases work especially with complex connected data",
    "start": "1115700",
    "end": "1120740"
  },
  {
    "text": "that you want to uh analyze so having said that let's go into the",
    "start": "1120740",
    "end": "1127400"
  },
  {
    "text": "details of each of these types of databases right so a key Value Store",
    "start": "1127400",
    "end": "1132860"
  },
  {
    "text": "is a simple key and a value right let's make this work",
    "start": "1132860",
    "end": "1140860"
  },
  {
    "text": "is a simple key and a value the database doesn't really care what's",
    "start": "1141020",
    "end": "1146120"
  },
  {
    "text": "in the value it could be a JPEG or it could be a Json or XML it doesn't really",
    "start": "1146120",
    "end": "1151640"
  },
  {
    "text": "care it doesn't even know what's inside you put a key along with the value in the database you get a key and a value",
    "start": "1151640",
    "end": "1159020"
  },
  {
    "text": "back and you it's your responsibility to decode or decipher whatever is the",
    "start": "1159020",
    "end": "1164480"
  },
  {
    "text": "content right so if you are like a car kind of a company with or at least",
    "start": "1164480",
    "end": "1169760"
  },
  {
    "text": "thinking about doing something with cars like be a key which is a vehicle identification number is a natural key",
    "start": "1169760",
    "end": "1175700"
  },
  {
    "text": "for that value right and then inside that you could store all kinds of stuff",
    "start": "1175700",
    "end": "1181220"
  },
  {
    "text": "right it's a natural extension or key value some of these products are react",
    "start": "1181220",
    "end": "1186500"
  },
  {
    "text": "is an example radius is an example Voldemort is an example memcache A lot of people know memcache is an example of",
    "start": "1186500",
    "end": "1192860"
  },
  {
    "text": "a key value store right when doing key value stores you need to really think about key separation or like key",
    "start": "1192860",
    "end": "1199700"
  },
  {
    "text": "namespaces if you are doing like for example you want to have multiple uh",
    "start": "1199700",
    "end": "1205400"
  },
  {
    "text": "objects one for the vehicle identification number when it was bought",
    "start": "1205400",
    "end": "1211880"
  },
  {
    "text": "what was the things that were installed on the car if that's one of your key and value if the other key and value is what",
    "start": "1211880",
    "end": "1218419"
  },
  {
    "text": "are oil changes what all times I did oil change and maintenance on the car then your key can Collide so you need to",
    "start": "1218419",
    "end": "1224900"
  },
  {
    "text": "design your key properly it could be win underscore New Or Win underscore in",
    "start": "1224900",
    "end": "1230480"
  },
  {
    "text": "factory installed options and the second would be win underscore maintenance something like that you need",
    "start": "1230480",
    "end": "1236539"
  },
  {
    "text": "to think about the key or the namespace design when you're talking about doing the key some of the products like react",
    "start": "1236539",
    "end": "1243140"
  },
  {
    "text": "have this concept known as buckets so you can create separate buckets with the same key right so one bucket would be",
    "start": "1243140",
    "end": "1250160"
  },
  {
    "text": "called as factory installed options and that would have the same win in it but",
    "start": "1250160",
    "end": "1255679"
  },
  {
    "text": "the value would be the same thing right would go in a different bucket so that's a key space separation technique that",
    "start": "1255679",
    "end": "1263000"
  },
  {
    "text": "they have which is called buckets right uh but you have to think about like if",
    "start": "1263000",
    "end": "1268520"
  },
  {
    "text": "you are storing multiple objects you have to think about how you would do those key separations",
    "start": "1268520",
    "end": "1275919"
  },
  {
    "text": "so we like to compare back to our known knowledge right so like if it's react",
    "start": "1276440",
    "end": "1282799"
  },
  {
    "text": "that would be your like a bucket that's where I'm saying bucket right so that's what the terms on the react side would",
    "start": "1282799",
    "end": "1288980"
  },
  {
    "text": "be and in the Oracle side that's what the terms would be right so there is one key one value a value is opaque to the",
    "start": "1288980",
    "end": "1295760"
  },
  {
    "text": "databases right it doesn't really matter what system and it's just like hash so if you are used to using hashes in Java",
    "start": "1295760",
    "end": "1302600"
  },
  {
    "text": "it's a key and a value and whatever stuff in there doesn't really matter right and because it's aggregate based model",
    "start": "1302600",
    "end": "1310220"
  },
  {
    "text": "then you can distribution becomes easier yeah so let's move on to databases",
    "start": "1310220",
    "end": "1317240"
  },
  {
    "text": "that's what document database mostly people think about right but document databases there are many of",
    "start": "1317240",
    "end": "1323480"
  },
  {
    "text": "them again like if you think the model is the same here like I'm saying key value and document databases the only",
    "start": "1323480",
    "end": "1329539"
  },
  {
    "text": "difference or the big difference is that the value is understood by the database",
    "start": "1329539",
    "end": "1335360"
  },
  {
    "text": "right and they get to this fact by forcing the value to be either Json or",
    "start": "1335360",
    "end": "1343220"
  },
  {
    "text": "XML like marklogic is an example that has XML as the actual content right so",
    "start": "1343220",
    "end": "1349940"
  },
  {
    "text": "again going back to the same example we have our ID as a vehicle identification number and the document is basically a",
    "start": "1349940",
    "end": "1357919"
  },
  {
    "text": "bunch of car facts right like it's a Json here as bunch of things like document databases here or mongodb Raven",
    "start": "1357919",
    "end": "1365419"
  },
  {
    "text": "right and then you have couchdb terra store Orient DB right",
    "start": "1365419",
    "end": "1370640"
  },
  {
    "text": "so in like for example if you take mongodb in mongodb you can have this",
    "start": "1370640",
    "end": "1376039"
  },
  {
    "text": "underscore ID that is the actual key of the document and if you don't provide",
    "start": "1376039",
    "end": "1382039"
  },
  {
    "text": "one the database will actually create one if you provide one the database will override that value and give your own",
    "start": "1382039",
    "end": "1388159"
  },
  {
    "text": "key to the underscore IDE value right so here is an example like for example Road",
    "start": "1388159",
    "end": "1394039"
  },
  {
    "text": "in Oracle would be underscore ID but in Oracle you cannot change 0 ID in",
    "start": "1394039",
    "end": "1399380"
  },
  {
    "text": "you can change the underscore ID value by overriding it with whatever you have",
    "start": "1399380",
    "end": "1406539"
  },
  {
    "text": "times people ask why would I even override the underscore ID because the database is providing it to me sometimes",
    "start": "1406840",
    "end": "1414740"
  },
  {
    "text": "like in high performance situations the index that mongodb works off of",
    "start": "1414740",
    "end": "1420860"
  },
  {
    "text": "it's best to have the whole index in memory for it to have proper scans if your index is not all paged in memory",
    "start": "1420860",
    "end": "1427820"
  },
  {
    "text": "then mongodb sometimes performs does not perform as well as you want it",
    "start": "1427820",
    "end": "1433340"
  },
  {
    "text": "to so you can take over the underscore ID space in memory by giving it your own",
    "start": "1433340",
    "end": "1439220"
  },
  {
    "text": "key so you are saving the space in memory by using the underscore ID for",
    "start": "1439220",
    "end": "1444740"
  },
  {
    "text": "your own key right so for example the underscore ID I think is a 16 byte value",
    "start": "1444740",
    "end": "1450980"
  },
  {
    "text": "or something like that the default one provided if you had your own ID which was",
    "start": "1450980",
    "end": "1456140"
  },
  {
    "text": "the customer's ID or whatever if you replace that swap that you would basically save the index space that fits",
    "start": "1456140",
    "end": "1463700"
  },
  {
    "text": "into RAM for that underscore ID value because you would have a index on the customer ID on the document anyway to",
    "start": "1463700",
    "end": "1470600"
  },
  {
    "text": "access those right so think of that when you do index",
    "start": "1470600",
    "end": "1476179"
  },
  {
    "text": "design on mongodb right but again going back here the instance is a mongod",
    "start": "1476179",
    "end": "1481520"
  },
  {
    "text": "schema is a database table is a collection row is a document and the row ID is underscore ID right again there's",
    "start": "1481520",
    "end": "1487640"
  },
  {
    "text": "one key one value the value is visible to the database so you can do intelligent queries on in the Json",
    "start": "1487640",
    "end": "1493880"
  },
  {
    "text": "document find me all the documents where the name is like all of that can be done",
    "start": "1493880",
    "end": "1499880"
  },
  {
    "text": "right like a standard rbms query uh the value can be queried you can put",
    "start": "1499880",
    "end": "1505640"
  },
  {
    "text": "Json or XML documents in them right any questions so far",
    "start": "1505640",
    "end": "1511580"
  },
  {
    "text": "I'm doing pretty good okay so let's move on to column family stores right so column family again has ID and a column",
    "start": "1511580",
    "end": "1518419"
  },
  {
    "text": "families and these column families have like a row that has columns inside it",
    "start": "1518419",
    "end": "1524360"
  },
  {
    "text": "and each column has a key value so it's kind of a hash inside a hash kind of a model right",
    "start": "1524360",
    "end": "1530840"
  },
  {
    "text": "so usually a column family data model is very hard to grasp in the first go but",
    "start": "1530840",
    "end": "1536600"
  },
  {
    "text": "think of it a row as columns and columns have key values inside them kind of makes it a little easier to understand",
    "start": "1536600",
    "end": "1543260"
  },
  {
    "text": "right Cassandra hyper table and each base Apache H base are examples of these",
    "start": "1543260",
    "end": "1548840"
  },
  {
    "text": "products one thing to think about this is when you write to a column the column",
    "start": "1548840",
    "end": "1554539"
  },
  {
    "text": "gets versioned it doesn't get deleted right so let's say the previous value was name and the value was John and the",
    "start": "1554539",
    "end": "1561799"
  },
  {
    "text": "new one you write is the name the value is Robert the John value is still around it does not get deleted that's why like",
    "start": "1561799",
    "end": "1568220"
  },
  {
    "text": "data size grows exponentially so you have to go back and do a repair on the database like kind of like Offline that",
    "start": "1568220",
    "end": "1574880"
  },
  {
    "text": "compacts this data right so you see this same stuff happening even in couchdb",
    "start": "1574880",
    "end": "1580220"
  },
  {
    "text": "like data grows exponential because it doesn't delete anything it just keeps versions of stuff",
    "start": "1580220",
    "end": "1585380"
  },
  {
    "text": "and if you don't care about old versions you just compact or repair database and it just goes away so if you see",
    "start": "1585380",
    "end": "1591620"
  },
  {
    "text": "exponential rise in disk usage in one of these products make sure you understand",
    "start": "1591620",
    "end": "1596679"
  },
  {
    "text": "the repair or the compactation algorithms used by these things",
    "start": "1596679",
    "end": "1602600"
  },
  {
    "text": "foreign family database like comparing back to Oracle like instance would be a cluster",
    "start": "1602600",
    "end": "1607820"
  },
  {
    "text": "a database is a key space a table is a column family and a row is a row which",
    "start": "1607820",
    "end": "1612980"
  },
  {
    "text": "is kind of all confusing but that's how it is the only big difference being in a given row or in a given table all",
    "start": "1612980",
    "end": "1619760"
  },
  {
    "text": "columns in the rdbms are of the same type right so if you say int it's all",
    "start": "1619760",
    "end": "1624860"
  },
  {
    "text": "every Row in there has to be an INT but that's not true with a column family database or Cassandra at least right so",
    "start": "1624860",
    "end": "1632179"
  },
  {
    "text": "you can have the same column mean different things that's what I was saying each column has",
    "start": "1632179",
    "end": "1638960"
  },
  {
    "text": "version data and you can expire them or you can even put an expiry date on them like let's say when you write",
    "start": "1638960",
    "end": "1645260"
  },
  {
    "text": "John got changed to Robert and you can put expiry on John saying after three",
    "start": "1645260",
    "end": "1650419"
  },
  {
    "text": "days this just goes away and that's where you can show multiple versions if people wanted to like come back and then",
    "start": "1650419",
    "end": "1657620"
  },
  {
    "text": "compare data and pick which one is correct like manual intervention or things like that right so yeah what's",
    "start": "1657620",
    "end": "1665000"
  },
  {
    "text": "the real life example when you want to use store column sure column family store a real",
    "start": "1665000",
    "end": "1671840"
  },
  {
    "text": "exif example would be like you wanted to do a real-time event rights for example right so stuff is coming from the web",
    "start": "1671840",
    "end": "1678500"
  },
  {
    "text": "stuff is coming from your internal system stuff is coming from your third party vendors who are using your Widgets",
    "start": "1678500",
    "end": "1685039"
  },
  {
    "text": "or whatever all these events are coming at you at a higher rate then you want to just put like a rest service in the",
    "start": "1685039",
    "end": "1691100"
  },
  {
    "text": "front and then write it out because column family Source support higher right volumes because they don't do any",
    "start": "1691100",
    "end": "1698840"
  },
  {
    "text": "deletes they just keep writing with new versions right and then the data size goes and in the back end you can then",
    "start": "1698840",
    "end": "1704960"
  },
  {
    "text": "compact them out right and you can also write different types of",
    "start": "1704960",
    "end": "1711460"
  },
  {
    "text": "what I I like to call them as like you are aggregating data online in the sense",
    "start": "1711460",
    "end": "1716600"
  },
  {
    "text": "like an event comes in and you put the event as is but at the in the same transaction you then aggregate it saying",
    "start": "1716600",
    "end": "1723919"
  },
  {
    "text": "okay count the number of customers incremented by one count the number of products sold increment by one all that",
    "start": "1723919",
    "end": "1730340"
  },
  {
    "text": "kind of counters can be done real time in the sense the moment the event comes and then you can use that to display",
    "start": "1730340",
    "end": "1736640"
  },
  {
    "text": "somewhere saying oh in the last hour 54 customers bought this item 302 times",
    "start": "1736640",
    "end": "1742159"
  },
  {
    "text": "that kind of stuff is a very good example of using column family right",
    "start": "1742159",
    "end": "1748179"
  },
  {
    "text": "right so on to graph databases neo4j is an example uh then we have Infinity",
    "start": "1748340",
    "end": "1755360"
  },
  {
    "text": "graph Orient DB and Hyper graph DB a graph database can be used for anything actually right so it doesn't necessarily",
    "start": "1755360",
    "end": "1762140"
  },
  {
    "text": "mean it has to be a graph type of a problem because each node there can have its own key Value Store like each node",
    "start": "1762140",
    "end": "1769460"
  },
  {
    "text": "can have multiple Keys multiple values so you can stuff a bunch of data in there not just the node even the edge or",
    "start": "1769460",
    "end": "1777860"
  },
  {
    "text": "the relationship can have its own key values right so let's say for example I am related to him and I could have like",
    "start": "1777860",
    "end": "1784640"
  },
  {
    "text": "when did I know him what was the last time I'm at him what was the last time I had dinner with him all that kind",
    "start": "1784640",
    "end": "1791299"
  },
  {
    "text": "of information can actually be put on the edge not only node right because that's the property of the edge not of",
    "start": "1791299",
    "end": "1798260"
  },
  {
    "text": "the node right because my property with him can be totally different because that's the property of the relationship",
    "start": "1798260",
    "end": "1804320"
  },
  {
    "text": "right so then you could do intelligent query like give me all the people who I",
    "start": "1804320",
    "end": "1809539"
  },
  {
    "text": "had dinner with in the last year or so or in the last year that are related to",
    "start": "1809539",
    "end": "1815539"
  },
  {
    "text": "me right that's known as a graft reversal can be done here like for example you can do a query here give me",
    "start": "1815539",
    "end": "1822080"
  },
  {
    "text": "all the nodes that know Martin right and like no SQL distance something like that",
    "start": "1822080",
    "end": "1827539"
  },
  {
    "text": "right so you are not only querying the notes but as well as the relationships",
    "start": "1827539",
    "end": "1832640"
  },
  {
    "text": "does that make sense right so graft course price it's basically a multi-relational graph",
    "start": "1832640",
    "end": "1838899"
  },
  {
    "text": "relationships are first class citizens like in in rdbms we think relation it's",
    "start": "1838899",
    "end": "1844520"
  },
  {
    "text": "a relational database so it relations may be important it only enforces relationships it doesn't let you",
    "start": "1844520",
    "end": "1851000"
  },
  {
    "text": "Traverse relationships you have to write complex SQL to Traverse the relationships it doesn't let you do what",
    "start": "1851000",
    "end": "1857960"
  },
  {
    "text": "graph databases that you do because you can Traverse relationships the way they achieve this is by writing the node",
    "start": "1857960",
    "end": "1865340"
  },
  {
    "text": "properties as well as the edge properties in separate storage that's why it's more efficient for 10 nodes the",
    "start": "1865340",
    "end": "1871880"
  },
  {
    "text": "query time and for a million nodes the query time is the same in neo4j",
    "start": "1871880",
    "end": "1877340"
  },
  {
    "text": "because they write different information it's optimized on right not on read time",
    "start": "1877340",
    "end": "1882980"
  },
  {
    "text": "in rdbms you optimize the right but not optimize the read because you are",
    "start": "1882980",
    "end": "1889460"
  },
  {
    "text": "traversal if it changes you have to write music right so there are also a lot of",
    "start": "1889460",
    "end": "1895760"
  },
  {
    "text": "traversal algorithms available that you can apply to the graph itself right and",
    "start": "1895760",
    "end": "1900980"
  },
  {
    "text": "nodes and edges can have data which is basically key value players right",
    "start": "1900980",
    "end": "1906020"
  },
  {
    "text": "so let's see some good usage cases for these key value stores right so key",
    "start": "1906020",
    "end": "1911539"
  },
  {
    "text": "value stairs are good for session storage like browser session whatever you want to store across session caches",
    "start": "1911539",
    "end": "1917500"
  },
  {
    "text": "profiles like I want I have a user ID for example a blogging platform or like",
    "start": "1917500",
    "end": "1923659"
  },
  {
    "text": "a e-commerce web app or something like that I I have a user ID I want to get",
    "start": "1923659",
    "end": "1928700"
  },
  {
    "text": "his profile like name and anything else email shipping address billing address whatever is it's all can be stuffed",
    "start": "1928700",
    "end": "1935659"
  },
  {
    "text": "under the user ID as a key and everything else is a value right you get one everything comes with it similarly",
    "start": "1935659",
    "end": "1942260"
  },
  {
    "text": "it would be preferences so like screen color font size or whatever else you",
    "start": "1942260",
    "end": "1947960"
  },
  {
    "text": "want to have preferences can all go under the same or the shopping cart is a good example like a scalable shopping",
    "start": "1947960",
    "end": "1954380"
  },
  {
    "text": "cart like for example if you use react you could put the customer ID underscore",
    "start": "1954380",
    "end": "1960380"
  },
  {
    "text": "order ID as your key and the value would be whatever people are buying at that",
    "start": "1960380",
    "end": "1965600"
  },
  {
    "text": "time and have that thing saved so you can get it back when the customer comes",
    "start": "1965600",
    "end": "1970700"
  },
  {
    "text": "back because of losing session cash or something like that right in a document database you could",
    "start": "1970700",
    "end": "1977360"
  },
  {
    "text": "use it for event logging prototype development is a big uh way to like get",
    "start": "1977360",
    "end": "1982880"
  },
  {
    "text": "your iterations out without having to think about like schema or deployment complexity or all all that kind of stuff",
    "start": "1982880",
    "end": "1989299"
  },
  {
    "text": "you can have rapid prototypes out and once the Prototype is mature then you can think okay how do I do this like",
    "start": "1989299",
    "end": "1995779"
  },
  {
    "text": "what kind of different Technologies do I need for Aggregates right e-commerce web app is a good example for column family",
    "start": "1995779",
    "end": "2002980"
  },
  {
    "text": "like large write volume like I was saying you could use it for Content management you can use it for e-commerce",
    "start": "2002980",
    "end": "2008019"
  },
  {
    "text": "applications right and the graph databases can be used for connected data",
    "start": "2008019",
    "end": "2013539"
  },
  {
    "text": "routing like how do I route my delivery truck from point A to point Z with three",
    "start": "2013539",
    "end": "2019899"
  },
  {
    "text": "stops in between what's the most efficient way then you can have the stops as nodes and the distance between",
    "start": "2019899",
    "end": "2025480"
  },
  {
    "text": "them as your edges and then you get just ask the graph database to give you the",
    "start": "2025480",
    "end": "2030880"
  },
  {
    "text": "shortest route and it will give you the shorter start without having to think about it right location services you can",
    "start": "2030880",
    "end": "2037240"
  },
  {
    "text": "even run recommendation engines for example customers who buy this product usually buy this other product too it's",
    "start": "2037240",
    "end": "2044559"
  },
  {
    "text": "very easy in the graph database sense to say that right so those are some general use",
    "start": "2044559",
    "end": "2051940"
  },
  {
    "text": "cases of the four categories of databases that we are talking about right",
    "start": "2051940",
    "end": "2057580"
  },
  {
    "text": "so obviously coming back to the schema less so we did say databases are schema",
    "start": "2057580",
    "end": "2062980"
  },
  {
    "text": "less but the schema is implicit in the sense that your code is saying okay put this Json in there and when I read back",
    "start": "2062980",
    "end": "2069820"
  },
  {
    "text": "I need to be able to parse the Json make some sense out of the Json convert it to my Java objects or whatever other",
    "start": "2069820",
    "end": "2074980"
  },
  {
    "text": "objects you got and then work with it if the structure of the Json changes then",
    "start": "2074980",
    "end": "2080740"
  },
  {
    "text": "obviously it's not going to map to your object so that's where the friction is instead of in the database it's now at your",
    "start": "2080740",
    "end": "2087339"
  },
  {
    "text": "mapping layer right so obviously when you say schema free I",
    "start": "2087339",
    "end": "2092440"
  },
  {
    "text": "can change the schema whatever way it doesn't mean you don't have data migration",
    "start": "2092440",
    "end": "2097480"
  },
  {
    "text": "all right so imagine you had a customer object that had a name and address as",
    "start": "2097480",
    "end": "2104200"
  },
  {
    "text": "its two Fields now you change the name to say customer name for example so the",
    "start": "2104200",
    "end": "2109660"
  },
  {
    "text": "new ones that store store it as customer name but the old ones that are there are still there as name right so when you",
    "start": "2109660",
    "end": "2116800"
  },
  {
    "text": "try to parse it back you need to parse both of them right so if there is customer name use that if there is no",
    "start": "2116800",
    "end": "2124300"
  },
  {
    "text": "customer name use name right so you have to have this pattern in your Json parser",
    "start": "2124300",
    "end": "2130359"
  },
  {
    "text": "that says okay these two map to the same thing right so that's where data migration comes in is let's change every",
    "start": "2130359",
    "end": "2139060"
  },
  {
    "text": "document I have to be customer name instead of name right that's expensive",
    "start": "2139060",
    "end": "2144579"
  },
  {
    "text": "proposition and goes back to same relational model of like if I change a column name it affects every row",
    "start": "2144579",
    "end": "2151180"
  },
  {
    "text": "right that's where people are moving away from rdbms because they don't want to deal",
    "start": "2151180",
    "end": "2156820"
  },
  {
    "text": "with it right deal with changing the column name and affecting everything so you can do techniques like lazy",
    "start": "2156820",
    "end": "2163780"
  },
  {
    "text": "migration right so in the sense when you read you read both the columns but when you write it back you write with the new",
    "start": "2163780",
    "end": "2169720"
  },
  {
    "text": "one right so that you are basically upgrading one document at a time or one",
    "start": "2169720",
    "end": "2175780"
  },
  {
    "text": "value at a time basically when your app reads it reached both of them and does the right mapping and it writes back it",
    "start": "2175780",
    "end": "2182079"
  },
  {
    "text": "writes back the new way of doing things right that's one way of doing it the other way of doing it is writing the same logic",
    "start": "2182079",
    "end": "2189579"
  },
  {
    "text": "offline and it basically goes one document at a time and doesn't affect anything else and the new code can then",
    "start": "2189579",
    "end": "2195640"
  },
  {
    "text": "be deployed once the whole thing is done or can be deployed in parallel in whatever other ways you like it all",
    "start": "2195640",
    "end": "2202180"
  },
  {
    "text": "depends on your data size if you have like pentabytes of data then it will take a long time so you have to think",
    "start": "2202180",
    "end": "2207280"
  },
  {
    "text": "about how both can go parallel if you don't have that much data then you can maybe run it offline and then deploy the",
    "start": "2207280",
    "end": "2213220"
  },
  {
    "text": "new code right but your new code needs to understand the data structures so that they can pass them properly right",
    "start": "2213220",
    "end": "2220900"
  },
  {
    "text": "don't just go with the feeling that oh schema less I can change doesn't matter you will lose data you will lose data in",
    "start": "2220900",
    "end": "2228160"
  },
  {
    "text": "the sense you will not be able to read the data that's there because this structure has changed right because schema is implicit in code",
    "start": "2228160",
    "end": "2236320"
  },
  {
    "text": "and when you change this implicit schema in the code your data also needs to conform to the new schema right some of",
    "start": "2236320",
    "end": "2243700"
  },
  {
    "text": "the projects where I have worked on the way we have done this is written probes in the application code itself that",
    "start": "2243700",
    "end": "2250180"
  },
  {
    "text": "would just go pick random for documents and see if it conforms and if it doesn't confirm we would come come back and say",
    "start": "2250180",
    "end": "2256599"
  },
  {
    "text": "okay the database doesn't match what I'm looking for then we would go back and then write like offline one document at",
    "start": "2256599",
    "end": "2262839"
  },
  {
    "text": "a time kind of a thing and it would go back and change all of those right that's one way to just report saying",
    "start": "2262839",
    "end": "2268599"
  },
  {
    "text": "okay the application and the database doesn't kind of match all right",
    "start": "2268599",
    "end": "2273720"
  },
  {
    "text": "this is a very good thing about nosql is all data doesn't have to be migrated at the same time because different",
    "start": "2273720",
    "end": "2279460"
  },
  {
    "text": "documents can have different structure so I can do one at a time and doesn't really affect availability or any kind",
    "start": "2279460",
    "end": "2285460"
  },
  {
    "text": "of other scenarios all right",
    "start": "2285460",
    "end": "2289380"
  },
  {
    "text": "so that brings this whole notion of polyglot persistence because we think",
    "start": "2290619",
    "end": "2295780"
  },
  {
    "text": "the application needs different kind of storage the storage for order persistence is",
    "start": "2295780",
    "end": "2302200"
  },
  {
    "text": "totally different from recommendation engine storage is totally different from session storage is totally different",
    "start": "2302200",
    "end": "2307900"
  },
  {
    "text": "from any other kinds of reporting ad hoc reporting stuff you need or care about right so why do we use the same",
    "start": "2307900",
    "end": "2315700"
  },
  {
    "text": "technology same storage engine for all of these needs all right so why not use what is suited for that particular",
    "start": "2315700",
    "end": "2322839"
  },
  {
    "text": "purpose to do the task instead of just shortening everything into the same thing right it can be across the same",
    "start": "2322839",
    "end": "2330400"
  },
  {
    "text": "application or it can't be across the whole Enterprise for example I would have a recommendation engine running for",
    "start": "2330400",
    "end": "2336460"
  },
  {
    "text": "the old Enterprise in the graph database and slap it slap a service on top of it and it could be a service for the whole",
    "start": "2336460",
    "end": "2342520"
  },
  {
    "text": "Enterprise that says enter this is how you do recommendation or I could do the same thing that a session storage your",
    "start": "2342520",
    "end": "2348579"
  },
  {
    "text": "session storage service you do a get and a put on the service and we will manage",
    "start": "2348579",
    "end": "2353619"
  },
  {
    "text": "everything in the back and none of the other apps you will write in your whole Enterprise don't need to worry about",
    "start": "2353619",
    "end": "2358660"
  },
  {
    "text": "session storage anymore right you could do that kind of service too right it doesn't have to be you don't have to",
    "start": "2358660",
    "end": "2364180"
  },
  {
    "text": "think about only in the context of application you can extrapolate it up at the Enterprise level too",
    "start": "2364180",
    "end": "2370119"
  },
  {
    "text": "right so that's where the key concept of encapsulating data access through Services comes in is I just have a",
    "start": "2370119",
    "end": "2376720"
  },
  {
    "text": "service that does whatever it's supposed to do and in the beginning stages just as a proof of concept you could read one",
    "start": "2376720",
    "end": "2382900"
  },
  {
    "text": "right to a disk or something else and slowly then migrate to a better storage like using a key value or something like",
    "start": "2382900",
    "end": "2388060"
  },
  {
    "text": "that or whatever makes sense to match the needs instead of writing",
    "start": "2388060",
    "end": "2393400"
  },
  {
    "text": "all to the same database right so here's like a simple",
    "start": "2393400",
    "end": "2399339"
  },
  {
    "text": "way of showing it right those are Services sitting on top of databases right so session storage will go to key",
    "start": "2399339",
    "end": "2406180"
  },
  {
    "text": "Value Store order persistence may go to a document your reading inventory and price and all that kind of stuff from a",
    "start": "2406180",
    "end": "2413140"
  },
  {
    "text": "relational database which is Legacy that's where all your backend systems are right too and you could write the",
    "start": "2413140",
    "end": "2418540"
  },
  {
    "text": "customer recommendation stuff coming from a graph database right you could also do there are multiple models of",
    "start": "2418540",
    "end": "2424180"
  },
  {
    "text": "this this is not the same one and only model right you could also do like your shopping cart data can still go here",
    "start": "2424180",
    "end": "2429820"
  },
  {
    "text": "session data can still go here because that's what you're used to but searching is becoming a pain for me because I have",
    "start": "2429820",
    "end": "2435880"
  },
  {
    "text": "to write complex SQL to justify data I could pump the data through like a solar",
    "start": "2435880",
    "end": "2441099"
  },
  {
    "text": "and do that kind of stuff because data is going from here being fed here and I am just posting search requests on top",
    "start": "2441099",
    "end": "2447280"
  },
  {
    "text": "of right that's one more Mark so you can have all kinds of model here think of that like I can just have this and with",
    "start": "2447280",
    "end": "2454960"
  },
  {
    "text": "this also have one more for this graph stuff where data is being fed from the rdbms to a graph database and I am just",
    "start": "2454960",
    "end": "2461380"
  },
  {
    "text": "doing queries against the graph database for recommendations right that can be done you don't have to",
    "start": "2461380",
    "end": "2467320"
  },
  {
    "text": "go crazy like this in the first go you can do slower iterations on that right",
    "start": "2467320",
    "end": "2473079"
  },
  {
    "text": "so here Martin actually blogged about this polyglot process this is totally speculative I use everything under the",
    "start": "2473079",
    "end": "2479140"
  },
  {
    "text": "sun kind of model here but we are doing like user sessions in redis financial data that's already coming from backend",
    "start": "2479140",
    "end": "2486520"
  },
  {
    "text": "systems in rdbms shopping cart is going to react recommendations is going to neo4j or catalog is coming from",
    "start": "2486520",
    "end": "2494079"
  },
  {
    "text": "again ad hoc reporting is going to rdbms analytics is going through Cassandra user activity logs are going to",
    "start": "2494079",
    "end": "2500260"
  },
  {
    "text": "Concentra right so this is totally like use everything and make sure everything is persisted",
    "start": "2500260",
    "end": "2506680"
  },
  {
    "text": "using the same thing right obviously the final question you would have is how do I choose right there are",
    "start": "2506680",
    "end": "2514480"
  },
  {
    "text": "four broad categories 20 plus products what do I choose right you can choose for programmer",
    "start": "2514480",
    "end": "2520960"
  },
  {
    "text": "productivity right so what will make my friction of saving this and getting back the easiest right you can choose for",
    "start": "2520960",
    "end": "2527380"
  },
  {
    "text": "that if taking the product to Market is your single most biggest concern like",
    "start": "2527380",
    "end": "2532480"
  },
  {
    "text": "let me prove if this works then you can choose for that you can choose for data access performance right like for",
    "start": "2532480",
    "end": "2539020"
  },
  {
    "text": "example if relationships and recommendations are important then you would choose for performance right today",
    "start": "2539020",
    "end": "2544359"
  },
  {
    "text": "I have 10 customers tomorrow or a year from now I have 5 million customers with my recommendation engine scale right you",
    "start": "2544359",
    "end": "2551859"
  },
  {
    "text": "can choose with those questions in mind you can choose with hey I am working already with this like why even think",
    "start": "2551859",
    "end": "2558760"
  },
  {
    "text": "about new stuff that's the choice you can make right you can also test the",
    "start": "2558760",
    "end": "2563800"
  },
  {
    "text": "expectations right so I did this project for the Democratic National Committee",
    "start": "2563800",
    "end": "2568839"
  },
  {
    "text": "which is the Democratic party is headquarters kind of stuff in 2010 ish and we actually ran tests like all kinds",
    "start": "2568839",
    "end": "2577540"
  },
  {
    "text": "of tests because most of this is open source you don't actually pay a dime to install and run this all right so we",
    "start": "2577540",
    "end": "2583480"
  },
  {
    "text": "install this stuff data whatever we needed to do and we were supposed to provide a 1 million hits per hour",
    "start": "2583480",
    "end": "2592180"
  },
  {
    "text": "proof that it can handle that amount of volume so we actually coded ran this ran",
    "start": "2592180",
    "end": "2597400"
  },
  {
    "text": "performance test on it and then tweaked and then chose that okay this works right so you could do test your",
    "start": "2597400",
    "end": "2604180"
  },
  {
    "text": "expectations right so like we generally choose based on reading some stuff somewhere and",
    "start": "2604180",
    "end": "2611200"
  },
  {
    "text": "making sure that that matches with our contacts or our problem set and if it matches we choose sometimes it doesn't",
    "start": "2611200",
    "end": "2617920"
  },
  {
    "text": "match because somebody is talking about like a web app and you are building something else then actually code it like do a short",
    "start": "2617920",
    "end": "2625060"
  },
  {
    "text": "spike on it and performance test it and see how it works right because it doesn't cost anything to download and",
    "start": "2625060",
    "end": "2630700"
  },
  {
    "text": "install Cassandra or or neo4j or anything as for that matter right it doesn't cost you anything other than",
    "start": "2630700",
    "end": "2635980"
  },
  {
    "text": "your time which is actually very good because you are investing your time to find out if the product is good for you right",
    "start": "2635980",
    "end": "2644160"
  },
  {
    "text": "like I said they are all open source you can try all of them and see what fits where and then test your expectations",
    "start": "2644260",
    "end": "2649960"
  },
  {
    "text": "and then you can write performance tests against them like in the DNC project I mentioned actually every check-in",
    "start": "2649960",
    "end": "2655900"
  },
  {
    "text": "actually went through like check-in then we did like this code analysis then we did unit test then we did integration",
    "start": "2655900",
    "end": "2662079"
  },
  {
    "text": "test after that came the performance benchmark test which basically took the code deployed it against production test",
    "start": "2662079",
    "end": "2668440"
  },
  {
    "text": "environment and ran the whole thing for two hours and we would say okay this code passes that and then it was",
    "start": "2668440",
    "end": "2674500"
  },
  {
    "text": "deployment ready at that time so you could do that kind of scenario too right",
    "start": "2674500",
    "end": "2679720"
  },
  {
    "text": "that's all I had I know I was say it an hour but it's done in 45 minutes which is always good uh so that's the book",
    "start": "2679720",
    "end": "2686740"
  },
  {
    "text": "that's the other books I was saying I write here so if you want to go read what I write or if you want to",
    "start": "2686740",
    "end": "2692380"
  },
  {
    "text": "message me ask other questions you can go for that too so any questions same thing yeah I have a",
    "start": "2692380",
    "end": "2699520"
  },
  {
    "text": "question about this schema list you said that the schema information would be in",
    "start": "2699520",
    "end": "2706240"
  },
  {
    "text": "the application not in the database anymore but I would expect my database to let me access the data by certain",
    "start": "2706240",
    "end": "2713079"
  },
  {
    "text": "search criteria now that would contain schema information right does that mean",
    "start": "2713079",
    "end": "2719140"
  },
  {
    "text": "that maintaining search indexes in your picture would be part of the application",
    "start": "2719140",
    "end": "2725079"
  },
  {
    "text": "now in this sure so there are different things like in key value you cannot actually search",
    "start": "2725079",
    "end": "2731079"
  },
  {
    "text": "by value at all right so you your application needs to take that value put it into a different search index like",
    "start": "2731079",
    "end": "2737440"
  },
  {
    "text": "solar or indica or something like that itself right the database is not going to do that nowadays react is also",
    "start": "2737440",
    "end": "2743859"
  },
  {
    "text": "supporting uh index search kind of product that sits on top of the database that indexes for you in the document",
    "start": "2743859",
    "end": "2750040"
  },
  {
    "text": "store you can actually query the value right but let's say your query was",
    "start": "2750040",
    "end": "2755800"
  },
  {
    "text": "written for the Json document containing the customer's name to be called the",
    "start": "2755800",
    "end": "2762040"
  },
  {
    "text": "attribute to be called as name and then you change it right you change it to client for example then your query that",
    "start": "2762040",
    "end": "2769060"
  },
  {
    "text": "you had written will need to now know the new stuff right that's where the difference comes",
    "start": "2769060",
    "end": "2775660"
  },
  {
    "text": "in is the database can index the name column for you but you change the column itself to be called client now so the",
    "start": "2775660",
    "end": "2782859"
  },
  {
    "text": "index doesn't even hit the client column at all because index is hitting the name column so now you need to create one",
    "start": "2782859",
    "end": "2788440"
  },
  {
    "text": "more index for the client column or the client attribute in the Json column right and then you would say be able to",
    "start": "2788440",
    "end": "2795400"
  },
  {
    "text": "hit like you search for name as well as client and then you would find one of them but that means that the information",
    "start": "2795400",
    "end": "2801940"
  },
  {
    "text": "about the schema is not in the application alone but also in this index layer of the database yes yes",
    "start": "2801940",
    "end": "2809619"
  },
  {
    "text": "yes and that's where like Json document or self-contained schema definition documents right so every Json document",
    "start": "2809619",
    "end": "2816220"
  },
  {
    "text": "has its own schema defined because you can Traverse any Json document by using Jackson Json library",
    "start": "2816220",
    "end": "2822460"
  },
  {
    "text": "or anything like that you can do a diamond Dynamic traversal of it but if you change the document the index",
    "start": "2822460",
    "end": "2827980"
  },
  {
    "text": "definition doesn't change along with it because if those are disconnected things right",
    "start": "2827980",
    "end": "2833859"
  },
  {
    "text": "so you change the document you stored a new document the index was defined on the old document using the old name the",
    "start": "2833859",
    "end": "2840400"
  },
  {
    "text": "index doesn't care the old name is still there even if any of the document in your whole database doesn't have that column the index still doesn't care",
    "start": "2840400",
    "end": "2847060"
  },
  {
    "text": "because you defined index on the old column that's what it's doing",
    "start": "2847060",
    "end": "2852099"
  },
  {
    "text": "right so that's where the disconnect comes from thinking is schema is in the",
    "start": "2852099",
    "end": "2857440"
  },
  {
    "text": "application and it affects other things you do along the same thing of applies to relational databases too right you",
    "start": "2857440",
    "end": "2863500"
  },
  {
    "text": "change a column name you don't change it the installed proc you don't change it in the trigger stuff is going to affect you right similarly it will affect here",
    "start": "2863500",
    "end": "2871180"
  },
  {
    "text": "also that's what I'm trying to say is don't just think schema less means I don't need to worry about scheme you",
    "start": "2871180",
    "end": "2877420"
  },
  {
    "text": "have to right yeah on your last flight you mentioned the testing part I'll choose",
    "start": "2877420",
    "end": "2884680"
  },
  {
    "text": "last part yeah and um that might be a good catch if you have",
    "start": "2884680",
    "end": "2889839"
  },
  {
    "text": "actually if you have application that you want to migrate from rdbms to something else but what do you do if",
    "start": "2889839",
    "end": "2896920"
  },
  {
    "text": "you're on the Green Field approach and you don't know what the data would actually be in 12 months sure and that's",
    "start": "2896920",
    "end": "2903220"
  },
  {
    "text": "actually a very good place to start with like you are domain modeling right so when your domain model think about the",
    "start": "2903220",
    "end": "2908560"
  },
  {
    "text": "Aggregates not about the storage right and when you do that you can extrapolate saying okay given today if my product",
    "start": "2908560",
    "end": "2915700"
  },
  {
    "text": "goes viral I will get this amount of customers or whatever you can make up",
    "start": "2915700",
    "end": "2921280"
  },
  {
    "text": "the customers and extrapolate and test for it right let's say uh today I have",
    "start": "2921280",
    "end": "2926440"
  },
  {
    "text": "10 customers like first day of launch I get 10 customers and I'll extrapolate uh in a year I'm going to get 2 million",
    "start": "2926440",
    "end": "2931900"
  },
  {
    "text": "customers each one of them is going to order four products every other day right so you can put that kind of",
    "start": "2931900",
    "end": "2937599"
  },
  {
    "text": "calculations and then calculate what kind of transaction rates do I need to run right so like the Democratic party I",
    "start": "2937599",
    "end": "2944980"
  },
  {
    "text": "was saying we didn't have any real data we made up data in the sense like what are the ratios what are the rates that",
    "start": "2944980",
    "end": "2950920"
  },
  {
    "text": "are going to come what is the kind of Randomness we are looking for so all of that has to be calculated right so you",
    "start": "2950920",
    "end": "2956740"
  },
  {
    "text": "model your application platforms the main language yes and afterwards you",
    "start": "2956740",
    "end": "2962200"
  },
  {
    "text": "choose which database to use yes okay yes and you don't even upfront model to the like Nth Degree you just need okay",
    "start": "2962200",
    "end": "2968859"
  },
  {
    "text": "this is the first iteration I'm looking for model it for the first iteration and then keep iterating over it because if",
    "start": "2968859",
    "end": "2974800"
  },
  {
    "text": "first go you mean you may come up with aggregate model of like X and in third go you may come with",
    "start": "2974800",
    "end": "2981280"
  },
  {
    "text": "totally different aggregate model that's as you trade you will find different options",
    "start": "2981280",
    "end": "2986680"
  },
  {
    "text": "yeah okay we'll come to you the recycling databases Focus about",
    "start": "2986680",
    "end": "2993160"
  },
  {
    "text": "relational databases I was refactoring and no SQL databases will you write",
    "start": "2993160",
    "end": "2999339"
  },
  {
    "text": "another book I don't think we are at that stage yet",
    "start": "2999339",
    "end": "3005040"
  },
  {
    "text": "but there is certainly a lot of thinking that needs to be done about like how you change data right so a lot of times",
    "start": "3005040",
    "end": "3011640"
  },
  {
    "text": "people will just like okay let's change it in the application and then after like three or four days somebody",
    "start": "3011640",
    "end": "3017579"
  },
  {
    "text": "complains about my order doesn't show up or my this thing customer information is",
    "start": "3017579",
    "end": "3023040"
  },
  {
    "text": "wrong then they start digging back so the first part you need to think about is how do I change the structures and",
    "start": "3023040",
    "end": "3029640"
  },
  {
    "text": "make it visible across all the dependent systems so a lot of maturity needs to come there it's very innocent right now",
    "start": "3029640",
    "end": "3036420"
  },
  {
    "text": "so I don't think there are patterns emerging yet to write something about so far",
    "start": "3036420",
    "end": "3041700"
  },
  {
    "text": "yeah yeah",
    "start": "3041700",
    "end": "3044599"
  },
  {
    "text": "updates on the database going to update the data store or",
    "start": "3048440",
    "end": "3054559"
  },
  {
    "text": "like putting keeping them in production is that what you're asking yeah yeah so most of these are like not version 10.",
    "start": "3054559",
    "end": "3062220"
  },
  {
    "text": "or not version 11 Oracle kind of products right so you go with that mindset uh there are a lot of like",
    "start": "3062220",
    "end": "3068220"
  },
  {
    "text": "command line tools right uh uh because there are not much commercial vendors in the space yet there is not many UI tools",
    "start": "3068220",
    "end": "3074940"
  },
  {
    "text": "but most of them are command line tools most of them are open source so you can actually look at the code and hack it",
    "start": "3074940",
    "end": "3080880"
  },
  {
    "text": "yourself too right uh there's also a lot of uh tools available that are plugins",
    "start": "3080880",
    "end": "3087359"
  },
  {
    "text": "to this existing products like nagios as a plugin for for example right so you want nudgers alert there's a plugin",
    "start": "3087359",
    "end": "3093420"
  },
  {
    "text": "that you can plug in manga also has this MMS activity monitoring thing going on that can report on the cloud how your",
    "start": "3093420",
    "end": "3100079"
  },
  {
    "text": "database is doing for example or neo4j also has like lots of other tools in the",
    "start": "3100079",
    "end": "3105960"
  },
  {
    "text": "commercial Edition they have this High availability cluster available and that kind of stuff right different",
    "start": "3105960",
    "end": "3111140"
  },
  {
    "text": "products have different ah layers or levels of maturity and if you",
    "start": "3111140",
    "end": "3118559"
  },
  {
    "text": "go with something that has a company behind it like for example neo4j has neo4j Technologies Neo Technologies",
    "start": "3118559",
    "end": "3124140"
  },
  {
    "text": "behind it so you can buy commercial support and that kind of stuff from them if that matters to some organizations",
    "start": "3124140",
    "end": "3129839"
  },
  {
    "text": "because they want someone to call and do something with them kind of stuff so that is possible too",
    "start": "3129839",
    "end": "3137280"
  },
  {
    "text": "but in production most of the time like I have run I've run mango in production for almost three years now with one",
    "start": "3137280",
    "end": "3142680"
  },
  {
    "text": "client and and like recent climb and uh it's been like three weeks since we have",
    "start": "3142680",
    "end": "3148319"
  },
  {
    "text": "put memcast as well as uh mongodb in production",
    "start": "3148319",
    "end": "3155240"
  },
  {
    "text": "you can like mostly do all puppetization of these these are very easily scriptable that's one switch from the",
    "start": "3156420",
    "end": "3162420"
  },
  {
    "text": "relational like relational was all UI based like installing Oracle on a command line is hard like try to do",
    "start": "3162420",
    "end": "3168420"
  },
  {
    "text": "headless Oracle installation man it's hard right so you can do like you",
    "start": "3168420",
    "end": "3173940"
  },
  {
    "text": "can just download unzip and it runs right so think of that too like you can",
    "start": "3173940",
    "end": "3179160"
  },
  {
    "text": "do a lot of puppet kind of scripts on this yeah",
    "start": "3179160",
    "end": "3184440"
  },
  {
    "text": "um you just said I should first design my data um in Aggregates or whatever in my",
    "start": "3184440",
    "end": "3190500"
  },
  {
    "text": "design model and then decide which is my correct storage but isn't it also that",
    "start": "3190500",
    "end": "3196319"
  },
  {
    "text": "um if I use a graph database I need to kind of match my design so that it fits",
    "start": "3196319",
    "end": "3202559"
  },
  {
    "text": "in this key and connections um notes and connections",
    "start": "3202559",
    "end": "3209660"
  },
  {
    "text": "I kind of like I have a problem matches somewhat more graph problems so",
    "start": "3211520",
    "end": "3217859"
  },
  {
    "text": "I choose a graph database and then I put I have a model that really matches the",
    "start": "3217859",
    "end": "3223980"
  },
  {
    "text": "graphing sure and I mean there are two big categories here Aggregate and graph",
    "start": "3223980",
    "end": "3229920"
  },
  {
    "text": "right so when you're modeling you will like within the first day know if it's aggregate or graph that's kind of easy",
    "start": "3229920",
    "end": "3235920"
  },
  {
    "text": "decision I think right and then within the aggregate then you okay what do I use key value document or column family",
    "start": "3235920",
    "end": "3242940"
  },
  {
    "text": "is a more detailed discussion and uh discovery that needs to happen in the",
    "start": "3242940",
    "end": "3248640"
  },
  {
    "text": "graph when you start modeling then the graph modeling is a lot different than like relational modeling because keys on",
    "start": "3248640",
    "end": "3255900"
  },
  {
    "text": "the nodes uh keys and values on the nodes and keys and value on the edges the names of the edges are uh or like a",
    "start": "3255900",
    "end": "3263339"
  },
  {
    "text": "discussion onto themselves like how do I do like do I do all as incoming relations do I do as outgoing",
    "start": "3263339",
    "end": "3268559"
  },
  {
    "text": "relationships how do I query that makes the change like even in graph once you come up with like a first version of",
    "start": "3268559",
    "end": "3275160"
  },
  {
    "text": "your domain model and three or four versions later your domain model May totally change on what you learned about",
    "start": "3275160",
    "end": "3281220"
  },
  {
    "text": "the domain as well as what the graph databases support right because a lot of times we go with",
    "start": "3281220",
    "end": "3286980"
  },
  {
    "text": "a let's do all the leaf edges pointing to the branches and higher as you go and",
    "start": "3286980",
    "end": "3292200"
  },
  {
    "text": "after some time you may realize oh I actually want to go top down instead of bottom right so you'll have to switch every",
    "start": "3292200",
    "end": "3297960"
  },
  {
    "text": "Edge that's one interesting thing about graph databases is if you change the name of the edge in your code all the",
    "start": "3297960",
    "end": "3304800"
  },
  {
    "text": "edges will not change automatically you will have to go to Every node and create the edge again",
    "start": "3304800",
    "end": "3310020"
  },
  {
    "text": "that comes with schema migration so we have written this about in the book is like two nodes have a edge named as",
    "start": "3310020",
    "end": "3316559"
  },
  {
    "text": "father of for example and you want to change the name of the edge to like Dad",
    "start": "3316559",
    "end": "3322859"
  },
  {
    "text": "off or biological father off or something like that you change that in the code the database doesn't know about",
    "start": "3322859",
    "end": "3328440"
  },
  {
    "text": "it it doesn't really care so if you query for further off and query for biology further off you will not get the",
    "start": "3328440",
    "end": "3333960"
  },
  {
    "text": "same notes you'll have to go Traverse the database and make these same connections between those two two nodes",
    "start": "3333960",
    "end": "3341220"
  },
  {
    "text": "with the new Edge and then delete the old Edge does that make sense",
    "start": "3341220",
    "end": "3346980"
  },
  {
    "text": "Yeah so basically what you're saying is I look at my problem then I decide is it",
    "start": "3346980",
    "end": "3353220"
  },
  {
    "text": "an aggregate problem is it a graph problem or is it maybe a simple problem right and then I kind of match my modeling",
    "start": "3353220",
    "end": "3361920"
  },
  {
    "text": "according to this problem correct categories yes and then you can say okay",
    "start": "3361920",
    "end": "3367920"
  },
  {
    "text": "in the SQL space I have lots of products in the aggregate space I have different types",
    "start": "3367920",
    "end": "3373319"
  },
  {
    "text": "of products yes yes right so you have to think about what is the context what is the context you are",
    "start": "3373319",
    "end": "3380099"
  },
  {
    "text": "solving it under what is your problem right I can just sit here and say hey use key value or User it's it will be",
    "start": "3380099",
    "end": "3386460"
  },
  {
    "text": "kind of stupid right for my part yeah could you give an example for a use case",
    "start": "3386460",
    "end": "3391800"
  },
  {
    "text": "where you wouldn't uh I mean there are many use cases right so",
    "start": "3391800",
    "end": "3397260"
  },
  {
    "text": "one is like your organization's capability to use nosql itself right nosql comes with a lot of baggage on its",
    "start": "3397260",
    "end": "3402839"
  },
  {
    "text": "own like it's not like it's dependency of there are a lot of blocks around that says how we failed with nosql there are",
    "start": "3402839",
    "end": "3408900"
  },
  {
    "text": "a lot of blocks around if you go read that right that's where like thinking about your problem first right what you're trying",
    "start": "3408900",
    "end": "3415380"
  },
  {
    "text": "to solve is more important then I have a project I want to use nosql the Straight",
    "start": "3415380",
    "end": "3420900"
  },
  {
    "text": "connection is on right so you have to think about how what it fits the problem how you are going to solve it and what",
    "start": "3420900",
    "end": "3427619"
  },
  {
    "text": "are the properties of that particular product that actually entice you and what are the negative aspects that may",
    "start": "3427619",
    "end": "3433140"
  },
  {
    "text": "affect you right so you have to think of those two and then make the decision right",
    "start": "3433140",
    "end": "3439440"
  },
  {
    "text": "yeah like there's existing like for example uh you have this product running in your shop or",
    "start": "3439440",
    "end": "3445980"
  },
  {
    "text": "application running in your shop for like 20 years it's working with relation now don't go and change it to nosql",
    "start": "3445980",
    "end": "3451680"
  },
  {
    "text": "tomorrow I mean that's a straight answer right there like so try something",
    "start": "3451680",
    "end": "3456720"
  },
  {
    "text": "something new Greenfield is coming that is different in terms of the problem it's trying to solve then see if noise",
    "start": "3456720",
    "end": "3463500"
  },
  {
    "text": "scale applies there like don't just go and change the Legacy app that's already running to use noise",
    "start": "3463500",
    "end": "3471200"
  },
  {
    "text": "okay maybe Maya time-wise are we doing okay yeah one more question sure",
    "start": "3471960",
    "end": "3479838"
  },
  {
    "text": "what are Concepts to find out that I've hit every node in the military database",
    "start": "3483599",
    "end": "3490760"
  },
  {
    "text": "as I can imagine that when I when I had the Json fossil",
    "start": "3490859",
    "end": "3496319"
  },
  {
    "text": "um there's a lot of comfortability compatibility code inside it might get",
    "start": "3496319",
    "end": "3503520"
  },
  {
    "text": "more complex and hard to maintain yes it will get complex like similar to you",
    "start": "3503520",
    "end": "3509099"
  },
  {
    "text": "like in the refactoring databases book we talked about this transition phase right old to new and you have some",
    "start": "3509099",
    "end": "3515220"
  },
  {
    "text": "transition fan in the middle like I'm gonna drop this column in two months when all my code moves right so if the",
    "start": "3515220",
    "end": "3521460"
  },
  {
    "text": "two months becomes three years for you you will have a complex given same thing will happen with your non SQL store too",
    "start": "3521460",
    "end": "3527760"
  },
  {
    "text": "like if you don't clean up fast enough then you will have lots of these layers in the middle that say okay name client",
    "start": "3527760",
    "end": "3534240"
  },
  {
    "text": "party name and all are all the same then your code as the translation layer core",
    "start": "3534240",
    "end": "3539579"
  },
  {
    "text": "and the Json itself will become complex in the sense it's not clean or similar to like any code that if you don't clean",
    "start": "3539579",
    "end": "3546059"
  },
  {
    "text": "up regularly it becomes dirty same thing applies",
    "start": "3546059",
    "end": "3551119"
  },
  {
    "text": "database if everything is not breaking no you'll have to do it yourself yes yes",
    "start": "3551540",
    "end": "3558359"
  },
  {
    "text": "there's nothing like because the database doesn't really care what you saw right for it every document can be different",
    "start": "3558359",
    "end": "3564000"
  },
  {
    "text": "that's that's by Design right yes yes",
    "start": "3564000",
    "end": "3570660"
  },
  {
    "text": "there's no such concept yet yeah on the theology like in document",
    "start": "3576260",
    "end": "3582480"
  },
  {
    "text": "database that have a key name yes so you can find",
    "start": "3582480",
    "end": "3588420"
  },
  {
    "text": "all the documents that still have the old name in it and yes that we have to",
    "start": "3588420",
    "end": "3594000"
  },
  {
    "text": "do it that's what I'm saying you have to do something about it yourself the database doesn't give you any",
    "start": "3594000",
    "end": "3599160"
  },
  {
    "text": "like automated way of doing",
    "start": "3599160",
    "end": "3602660"
  },
  {
    "text": "yes so you will have to write your own query like give me all the documents that have this old name in it and then",
    "start": "3607319",
    "end": "3613500"
  },
  {
    "text": "go through it right there over them and then change them or do whatever you need to do",
    "start": "3613500",
    "end": "3619520"
  },
  {
    "text": "yeah three four different types of persistent",
    "start": "3620280",
    "end": "3627540"
  },
  {
    "text": "stores in the same enterprise system like the financial data and otherwise",
    "start": "3627540",
    "end": "3633559"
  },
  {
    "text": "Store recommendations in the same company the same enterprise",
    "start": "3633920",
    "end": "3639180"
  },
  {
    "text": "system I have seen three of them in the same enterprise system yes to does a scale yeah",
    "start": "3639180",
    "end": "3647660"
  },
  {
    "text": "complexity and operational complexity and developer complexity that you have to",
    "start": "3647660",
    "end": "3653220"
  },
  {
    "text": "grab some different concepts as a developer under operations you have to",
    "start": "3653220",
    "end": "3658920"
  },
  {
    "text": "operate the different systems you have to think about like how will you set up this in the sounds like developers need",
    "start": "3658920",
    "end": "3666540"
  },
  {
    "text": "a local version of this stuff while they're developing we do all systems using continuous integration so the CI",
    "start": "3666540",
    "end": "3673200"
  },
  {
    "text": "system needs to know about it the QA system needs to have a different instance right so the the first time we",
    "start": "3673200",
    "end": "3678599"
  },
  {
    "text": "do this we will do like a puppet version for the developer instance itself right and the second would be for the CI",
    "start": "3678599",
    "end": "3684599"
  },
  {
    "text": "instance from QA onwards it changes a little so that needs a different kind of puppet system because QA needs a cluster",
    "start": "3684599",
    "end": "3690720"
  },
  {
    "text": "because we don't want clusters introduced in production only like it needs to be introduced a little earlier",
    "start": "3690720",
    "end": "3696240"
  },
  {
    "text": "right so you need to think about how do I do this deployment that's where the whole devops comes in like put in more",
    "start": "3696240",
    "end": "3703619"
  },
  {
    "text": "puppet versions to deploy different kinds of systems and you don't want a",
    "start": "3703619",
    "end": "3709200"
  },
  {
    "text": "person manually sitting and doing this on different machines right so for example you can add nodes transparently",
    "start": "3709200",
    "end": "3715740"
  },
  {
    "text": "to these clusters like in react you can just add a node and say make it part of the cluster you don't",
    "start": "3715740",
    "end": "3721079"
  },
  {
    "text": "want a person sitting there and typing this every time you want to add a note right so that's where you need to think",
    "start": "3721079",
    "end": "3726780"
  },
  {
    "text": "about puppet or some kind of script I don't really care if it's puppet or a shell script but some kind of script",
    "start": "3726780",
    "end": "3732000"
  },
  {
    "text": "that does it for you right even on a developer machine right we had this DNC",
    "start": "3732000",
    "end": "3738000"
  },
  {
    "text": "project we had a ruby script that basically went to the internet downloaded the latest stuff unzipped them package them and say it run here's",
    "start": "3738000",
    "end": "3745079"
  },
  {
    "text": "your local developer instance ready to go all right so you could do that also you don't need to actually like rely on a",
    "start": "3745079",
    "end": "3753059"
  },
  {
    "text": "person clicking through or a person manually like a document what document that says go to this website download",
    "start": "3753059",
    "end": "3758940"
  },
  {
    "text": "this stuff you don't need",
    "start": "3758940",
    "end": "3762078"
  },
  {
    "text": "to put into here's a new database we are currently introducing mongodb",
    "start": "3769920",
    "end": "3776480"
  },
  {
    "text": "replacing simple database part of our application",
    "start": "3776480",
    "end": "3781619"
  },
  {
    "text": "to and the biggest overhead is not the developer learning mongodb and using",
    "start": "3781619",
    "end": "3788339"
  },
  {
    "text": "a different framework to persist that's usually really easy but then you have",
    "start": "3788339",
    "end": "3793500"
  },
  {
    "text": "other systems that create the data and now they can't anymore because they don't have adapters all right",
    "start": "3793500",
    "end": "3800160"
  },
  {
    "text": "or you know they need to monitor they need to install all this kind of stuff all the kind of people need to know sure",
    "start": "3800160",
    "end": "3806640"
  },
  {
    "text": "sure there's the Ops team that doesn't know about the DBS they don't know about how to take backups of this stuff right",
    "start": "3806640",
    "end": "3812579"
  },
  {
    "text": "how do I take a backup how do I restore what are the other things that go with it they don't know or they need to learn",
    "start": "3812579",
    "end": "3817920"
  },
  {
    "text": "right so that's all the other things that comes with it uh the other option that you may have is like how do I deal",
    "start": "3817920",
    "end": "3825059"
  },
  {
    "text": "with data that is needed by this external system and the external system usually is poking directly into your",
    "start": "3825059",
    "end": "3831359"
  },
  {
    "text": "database and reading off of the tables right so that's where that integration database pattern comes in so and now you",
    "start": "3831359",
    "end": "3837720"
  },
  {
    "text": "are moving more towards a service based pattern so in the meantime what we have done in this current client is the",
    "start": "3837720",
    "end": "3844260"
  },
  {
    "text": "application on the other side can just invoke a rest call and the rest call",
    "start": "3844260",
    "end": "3849540"
  },
  {
    "text": "goes back in the database dumps a CSV file out and that it can read the CSV file backup right that's the integration",
    "start": "3849540",
    "end": "3855599"
  },
  {
    "text": "pattern we used is basically like a service invokes returns or gives it a",
    "start": "3855599",
    "end": "3862079"
  },
  {
    "text": "CSV file right so you have to depend like how are the dependent",
    "start": "3862079",
    "end": "3867720"
  },
  {
    "text": "systems going to interact with this not just dependent systems it's also like your power users like they are they are",
    "start": "3867720",
    "end": "3875040"
  },
  {
    "text": "so used to like pointing their excel at this database or access at their database and trying to do all kinds of",
    "start": "3875040",
    "end": "3880559"
  },
  {
    "text": "crazy queries they can't anymore because it's and they can understand Json or something like that how do you give",
    "start": "3880559",
    "end": "3885900"
  },
  {
    "text": "them the data that they need right [Applause] looks like we are at a logical end here",
    "start": "3885900",
    "end": "3893460"
  },
  {
    "text": "okay thanks guys thanks for coming and wasting your perfectly good evening with me",
    "start": "3893460",
    "end": "3898740"
  },
  {
    "text": "all right thank you foreign",
    "start": "3898740",
    "end": "3902119"
  }
]