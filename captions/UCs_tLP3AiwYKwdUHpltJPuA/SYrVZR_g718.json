[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "okay good morning glad you're joining me this morning to",
    "start": "13070",
    "end": "20189"
  },
  {
    "text": "talk a little bit about exceptions in Python again they asked me to put this",
    "start": "20189",
    "end": "28230"
  },
  {
    "text": "light at the front and I do what I'm told so there you go rate the session so",
    "start": "28230",
    "end": "34170"
  },
  {
    "text": "to introduce myself a little bit I'm Naomi cedar I am among other things the",
    "start": "34170",
    "end": "42360"
  },
  {
    "text": "currently serving chair of the Python Software Foundation I do tell people that sounds may be a little bit more",
    "start": "42360",
    "end": "49410"
  },
  {
    "text": "glamorous than it actually is PSF manages the intellectual property of",
    "start": "49410",
    "end": "55730"
  },
  {
    "text": "pythons somebody has to hold all of it so that it can actually be insured to be",
    "start": "55730",
    "end": "60780"
  },
  {
    "text": "open and free and things like that we look after trademarks but also more",
    "start": "60780",
    "end": "66390"
  },
  {
    "text": "important than that we work on trying to grow an inclusive global community of Python developers that's what we spend a",
    "start": "66390",
    "end": "72840"
  },
  {
    "text": "lot of our time on and in fact tomorrow I go to Cleveland for PyCon which is our",
    "start": "72840",
    "end": "79470"
  },
  {
    "text": "big gathering so looking forward to that I'm also the author of the quick Python",
    "start": "79470",
    "end": "86549"
  },
  {
    "text": "book now in its third edition we have a few copies to give away and I will sign",
    "start": "86549",
    "end": "92250"
  },
  {
    "text": "I promise I will sign it with any name you want Bill Gates whatever you want just it'll",
    "start": "92250",
    "end": "99390"
  },
  {
    "text": "be straight down here across in the expo hall right beside the women in tech area",
    "start": "99390",
    "end": "104939"
  },
  {
    "text": "so right as you walk in on this side just right over to the right so we'll be doing that and if you have any questions",
    "start": "104939",
    "end": "111479"
  },
  {
    "text": "that we don't have time for here you can of course hit me up there I am also",
    "start": "111479",
    "end": "117380"
  },
  {
    "text": "in my day job I run a development team we code mostly in Python for Dick Blick",
    "start": "117380",
    "end": "124469"
  },
  {
    "text": "Art Materials yes art supplies so if you bought erasers pens paint pencils canvas",
    "start": "124469",
    "end": "130289"
  },
  {
    "text": "any of those things from us in any of our stores across the country that's that's where I work I actually",
    "start": "130289",
    "end": "136620"
  },
  {
    "text": "like working there it's a nice medium-sized business and I enjoy it a lot so that's that's that introduction",
    "start": "136620",
    "end": "145580"
  },
  {
    "text": "the other introduction has to do with I guess kind of my my thinking as I",
    "start": "145580",
    "end": "151770"
  },
  {
    "text": "approach this talk and for that I have to say that I have always been a",
    "start": "151770",
    "end": "157709"
  },
  {
    "text": "language nerd I have a PhD in Greek and",
    "start": "157709",
    "end": "163650"
  },
  {
    "text": "Latin language and literature so so I have done these things from from from a",
    "start": "163650",
    "end": "169800"
  },
  {
    "text": "very long time unlike the the speaker yesterday was talking about kind of",
    "start": "169800",
    "end": "175019"
  },
  {
    "text": "programming from a linguistic aspect I did historical linguistics as part of that so I I can talk about",
    "start": "175019",
    "end": "183200"
  },
  {
    "text": "proto-indo-european and laryngeal zand and fun stuff like that but I also am interested in modern",
    "start": "183200",
    "end": "189150"
  },
  {
    "text": "languages actually just a few months ago I gave my first talk in Spanish so I I",
    "start": "189150",
    "end": "195540"
  },
  {
    "text": "am a language nerd but not just human languages I also am kind of interested in computer languages too my main",
    "start": "195540",
    "end": "204060"
  },
  {
    "text": "language is Python I don't see myself ever abandoning it but I am curious as to how different languages work compared",
    "start": "204060",
    "end": "211079"
  },
  {
    "text": "to each other and with human languages of course every language has its own way",
    "start": "211079",
    "end": "219390"
  },
  {
    "text": "of doing things its own way of expressing things for example in say",
    "start": "219390",
    "end": "228420"
  },
  {
    "text": "Japanese a lot of things aren't gendered they don't actually gender nouns it's",
    "start": "228420",
    "end": "233970"
  },
  {
    "text": "not a big deal in in Japanese they have other ways of indicating that on the",
    "start": "233970",
    "end": "239100"
  },
  {
    "text": "other hand and say tai do you have a little particle that you you say that varies depending upon the gender of the",
    "start": "239100",
    "end": "245670"
  },
  {
    "text": "speaker not the thing being talked about but the person doing the talking and of",
    "start": "245670",
    "end": "251400"
  },
  {
    "text": "course something like Spanish has genders all over the place they're usually pretty easy to figure out",
    "start": "251400",
    "end": "256440"
  },
  {
    "text": "and then German has a neuter knife a",
    "start": "256440",
    "end": "262250"
  },
  {
    "text": "feminine fork and a masculine spoon and you just have to know that okay so",
    "start": "262250",
    "end": "267380"
  },
  {
    "text": "a lot of different ways of doing kind of the same thing and it's not just simple",
    "start": "267380",
    "end": "274520"
  },
  {
    "text": "things like vocabulary it's the way the language is put together if you want an",
    "start": "274520",
    "end": "279830"
  },
  {
    "text": "entertaining illustration of this I recommend you google Google Translate sings this is a woman who is a",
    "start": "279830",
    "end": "285950"
  },
  {
    "text": "professional singer who runs popular song lyrics through Google Translate through about half a dozen languages to",
    "start": "285950",
    "end": "292220"
  },
  {
    "text": "get back to English and then tries to sing the result to the original tune I it's ok after a couple you get the idea",
    "start": "292220",
    "end": "300170"
  },
  {
    "text": "and maybe the joy wears off but the first couple really it strikes is pretty funny so computer languages obviously",
    "start": "300170",
    "end": "309950"
  },
  {
    "text": "aren't anywhere near as complex as human languages for one thing they're",
    "start": "309950",
    "end": "315710"
  },
  {
    "text": "constrained by having to compile to a pretty much deterministic same result something that can be you know run",
    "start": "315710",
    "end": "324530"
  },
  {
    "text": "ultimately by a microprocessor that is a fairly simple minded beast but it is",
    "start": "324530",
    "end": "331220"
  },
  {
    "text": "still true that the structures of the language control how you think about and",
    "start": "331220",
    "end": "338660"
  },
  {
    "text": "how you express yourself in a programming language it controls in a way how you approach the problem and so",
    "start": "338660",
    "end": "347780"
  },
  {
    "text": "then my jumping-off point from this is the situation of when things go wrong if",
    "start": "347780",
    "end": "354200"
  },
  {
    "text": "you write code things go wrong that is inevitable ever happens to everybody there can be bad values entered by a",
    "start": "354200",
    "end": "361040"
  },
  {
    "text": "user or some other way there can be bad logic resources that you're counting on",
    "start": "361040",
    "end": "366620"
  },
  {
    "text": "having might be unavailable any number of things can go wrong and you know",
    "start": "366620",
    "end": "374960"
  },
  {
    "text": "different languages tend to think about stuff going wrong in different ways and",
    "start": "374960",
    "end": "382130"
  },
  {
    "text": "you know in some cases there's there's a they try to categorize into compile time",
    "start": "382130",
    "end": "388010"
  },
  {
    "text": "errors versus run time errors things like that or maybe there are errors that",
    "start": "388010",
    "end": "394820"
  },
  {
    "text": "are just we just have to blow up because there's no way we can go on or maybe there",
    "start": "394820",
    "end": "400289"
  },
  {
    "text": "is that no no we can recover we can save this we can do something to get to keep the program running you know there are a",
    "start": "400289",
    "end": "407099"
  },
  {
    "text": "lot of different things that you can do to think about errors handling things that are unexpected and that is in fact",
    "start": "407099",
    "end": "416669"
  },
  {
    "text": "a key part of what makes a language what it is it kind of controls how you do",
    "start": "416669",
    "end": "423300"
  },
  {
    "text": "things how you think about things in lots of subtle ways and it certainly",
    "start": "423300",
    "end": "428729"
  },
  {
    "text": "influences the the structure and the flow of the code one way or another so",
    "start": "428729",
    "end": "436279"
  },
  {
    "text": "just to look at a few of these and I've got some samples here to just kind of",
    "start": "436610",
    "end": "442709"
  },
  {
    "text": "bring these up I'm not saying that that any of these like little short snippets are an authoritative description of how",
    "start": "442709",
    "end": "449819"
  },
  {
    "text": "they handle errors in a nut in that particular language I'm just kind of throwing some things out here too to set",
    "start": "449819",
    "end": "456029"
  },
  {
    "text": "the stage so pearl I always think of as the do-or-die language because of this idiom that used to be quite popular do",
    "start": "456029",
    "end": "462479"
  },
  {
    "text": "the thing or die die if you can't do the thing and and if there are other ways",
    "start": "462479",
    "end": "469019"
  },
  {
    "text": "you can handle errors in Perl but this is quite a common one see I mean I",
    "start": "469019",
    "end": "475379"
  },
  {
    "text": "started C I was just thinking about this before the talk started I started coding and C 30 years ago which means I did it",
    "start": "475379",
    "end": "484589"
  },
  {
    "text": "when I was 2 right but I was precocious but in any case there are different",
    "start": "484589",
    "end": "490379"
  },
  {
    "text": "things you can do to try and catch error conditions in C you can check for a",
    "start": "490379",
    "end": "496229"
  },
  {
    "text": "return value if you're trying to allocate some memory it comes back null that's probably means you've got a problem you can look at an error number",
    "start": "496229",
    "end": "503819"
  },
  {
    "text": "it's a global you know a global error number to check what's going on you can",
    "start": "503819",
    "end": "510509"
  },
  {
    "text": "kind of jump off set a jumping point and jump off to some other place in the code that that sometimes done or the",
    "start": "510509",
    "end": "517500"
  },
  {
    "text": "time-honored way of handling errors in C is to get a seg fault so and and if",
    "start": "517500",
    "end": "523860"
  },
  {
    "text": "you've coded much C you you you are familiar with that C++ adds a an",
    "start": "523860",
    "end": "530250"
  },
  {
    "text": "exception handling thing but there's not I guess my sense and I haven't done",
    "start": "530250",
    "end": "535810"
  },
  {
    "text": "see and many C++ in many years but my sense is that in in c plus plus the the",
    "start": "535810",
    "end": "544390"
  },
  {
    "text": "use of exceptions it's there certainly it's used but it's not sort of woven through the language that's my opinion",
    "start": "544390",
    "end": "551980"
  },
  {
    "text": "it's there's there's a lot of other approaches to handling errors other than exceptions same thing with java java has",
    "start": "551980",
    "end": "559720"
  },
  {
    "text": "certainly a system of exceptions but there's also it seems to me a tendency",
    "start": "559720",
    "end": "566110"
  },
  {
    "text": "in java code to check first that's why i talked about l byl checking look before",
    "start": "566110",
    "end": "571360"
  },
  {
    "text": "you leap can I do the thing ok let's do the thing and Java also of course has",
    "start": "571360",
    "end": "578710"
  },
  {
    "text": "this kind of split between exceptions you have to talk about and exceptions you don't have to talk about in advance",
    "start": "578710",
    "end": "585250"
  },
  {
    "text": "so in this particular snippet here it's it's worried about an i/o exception with",
    "start": "585250",
    "end": "591730"
  },
  {
    "text": "i/o exceptions either your method has to upfront say it's going to throw an i/o",
    "start": "591730",
    "end": "597610"
  },
  {
    "text": "exception or you need to be sure that it's explicitly handled there are other types of exceptions in Java where you",
    "start": "597610",
    "end": "604210"
  },
  {
    "text": "don't have to do that JavaScript ok as a",
    "start": "604210",
    "end": "610060"
  },
  {
    "text": "Python person you're probably expecting me to crack on JavaScript I'm they're gonna I promise I won't javascript has",
    "start": "610060",
    "end": "617430"
  },
  {
    "text": "six native types of exceptions they're fine but in fact you don't need to do",
    "start": "617430",
    "end": "622960"
  },
  {
    "text": "them you can actually throw anything as an exception so in fact you can throw an error or you can throw true and",
    "start": "622960",
    "end": "630780"
  },
  {
    "text": "JavaScript is fine either way so it's got an exception system and I think that",
    "start": "630780",
    "end": "636640"
  },
  {
    "text": "it is use quite a bit but that's what it is go go actually returns two things",
    "start": "636640",
    "end": "646420"
  },
  {
    "text": "from from a method or function it returns the result and it can return an",
    "start": "646420",
    "end": "652030"
  },
  {
    "text": "error value so in go you can find error code like this where check the one thing",
    "start": "652030",
    "end": "658510"
  },
  {
    "text": "is your thing or you can check the error to see if there's an error and you get this kind of parallel thing like this I",
    "start": "658510",
    "end": "664360"
  },
  {
    "text": "I know of people that find this to be a good system because it's very explicit I also know of Python programmers moving to go",
    "start": "664360",
    "end": "671589"
  },
  {
    "text": "who find it very frustrating I am NOT a go expert so I'm I'm out of this argument but that that's what it is it's",
    "start": "671589",
    "end": "678370"
  },
  {
    "text": "it's just a different approach and as I say all of these things are based on different assumptions different beliefs",
    "start": "678370",
    "end": "684490"
  },
  {
    "text": "about how the language should behave what it should do and they shape very",
    "start": "684490",
    "end": "691269"
  },
  {
    "text": "fundamentally the kind of code that you can get back so what about Python so I",
    "start": "691269",
    "end": "700000"
  },
  {
    "text": "want to start before I get into some of the the further things about it I want",
    "start": "700000",
    "end": "706209"
  },
  {
    "text": "to walk really quickly through pythons exception system because my sense is",
    "start": "706209",
    "end": "712300"
  },
  {
    "text": "there are you know in a conference like this there are people who maybe know a little Python but don't know a whole lot",
    "start": "712300",
    "end": "718629"
  },
  {
    "text": "of Python I want us to kind of see what's really there before I go talk about the the sort of",
    "start": "718629",
    "end": "724110"
  },
  {
    "text": "interesting things more around the edges so python has an approach of handling",
    "start": "724110",
    "end": "732250"
  },
  {
    "text": "errors rather than trying to avoid errors and in pythons the Python world",
    "start": "732250",
    "end": "738639"
  },
  {
    "text": "we talk about this as easier to ask for forgiveness than permission if you want to do the thing in Python",
    "start": "738639",
    "end": "747670"
  },
  {
    "text": "typically you don't check to see if you have the right type the right situation the right whatever to do the thing in",
    "start": "747670",
    "end": "754589"
  },
  {
    "text": "Python you do the thing and then handle the exception afterwards okay that that",
    "start": "754589",
    "end": "760870"
  },
  {
    "text": "is is fundamentally the way python does it and that is in contrast with languages that are much more worried about being sure you can do the thing",
    "start": "760870",
    "end": "767410"
  },
  {
    "text": "before you do the thing in other words they tend to look before you leap all",
    "start": "767410",
    "end": "773559"
  },
  {
    "text": "right in Python this approach makes a lot of sense",
    "start": "773559",
    "end": "780129"
  },
  {
    "text": "Python emphasizes readability and not having a lot of checks for things before",
    "start": "780129",
    "end": "786639"
  },
  {
    "text": "you do things makes the code simpler and easier to read python is a fan of duck",
    "start": "786639",
    "end": "796149"
  },
  {
    "text": "typing and it binds its variable two objects late so while python is a",
    "start": "796149",
    "end": "804040"
  },
  {
    "text": "strongly typed language just by looking at a particular variable name that is",
    "start": "804040",
    "end": "809470"
  },
  {
    "text": "not itself particularly strongly typed so all of those things mean there are",
    "start": "809470",
    "end": "814750"
  },
  {
    "text": "lots of situations where particularly if you wanted to check to make sure you have a legal type before you do the",
    "start": "814750",
    "end": "819790"
  },
  {
    "text": "thing does not make nearly as much sense in Python as trying to do the thing and then seeing what we have happen after",
    "start": "819790",
    "end": "826899"
  },
  {
    "text": "that okay and pythons exception system",
    "start": "826899",
    "end": "833700"
  },
  {
    "text": "is is pretty straightforward you have a",
    "start": "833700",
    "end": "839020"
  },
  {
    "text": "try statement followed by the block of code where you might expect this",
    "start": "839020",
    "end": "844200"
  },
  {
    "text": "exception to occur you have an accept statement where you can specify what",
    "start": "844200",
    "end": "852070"
  },
  {
    "text": "particular exception you want to catch and even give it a variable name",
    "start": "852070",
    "end": "858720"
  },
  {
    "text": "typically e so that's that's catch exception as e gives us the variable e",
    "start": "858720",
    "end": "866860"
  },
  {
    "text": "as a handle to that exception object down in the except block you can have an",
    "start": "866860",
    "end": "873220"
  },
  {
    "text": "else clause for what to do if there is no exception okay you don't always need",
    "start": "873220",
    "end": "880570"
  },
  {
    "text": "to do that you could always just have it outside of the whole try except block but you can do it and there is a finally",
    "start": "880570",
    "end": "886810"
  },
  {
    "text": "Clause of code that will always be executed whether you have an exception or not okay I may be for a file",
    "start": "886810",
    "end": "895060"
  },
  {
    "text": "operation you want to make sure the file is always closed use cases like that so you have something that will happen no",
    "start": "895060",
    "end": "901029"
  },
  {
    "text": "matter what and of course like most languages that have exceptions you can",
    "start": "901029",
    "end": "906910"
  },
  {
    "text": "deliberately raise an exception and for that you use the raised keyword and you",
    "start": "906910",
    "end": "914190"
  },
  {
    "text": "must all exceptions in Python must be a subclass of Base exception didn't use to",
    "start": "914190",
    "end": "922180"
  },
  {
    "text": "be that way but it's that way now so so you cannot do other things other than raise some sort of exception class so",
    "start": "922180",
    "end": "931410"
  },
  {
    "text": "I've got perhaps it's not exciting but at least",
    "start": "931410",
    "end": "936530"
  },
  {
    "text": "this gives you the enjoyment of seeing whether or not I make typos but I want to run a little bit of code to show this",
    "start": "936530",
    "end": "941990"
  },
  {
    "text": "live and so you know a simple simple case here I've got let's go ahead and",
    "start": "941990",
    "end": "949190"
  },
  {
    "text": "run this so I've got a try block that just prints it's not likely to make an",
    "start": "949190",
    "end": "955250"
  },
  {
    "text": "exception I admit and accept block if we get an exception an else block for the",
    "start": "955250",
    "end": "960800"
  },
  {
    "text": "other case and a finally for the case that always executes and it did what it",
    "start": "960800",
    "end": "968360"
  },
  {
    "text": "was supposed to do now if I raise an exception in my try block that's going",
    "start": "968360",
    "end": "975290"
  },
  {
    "text": "to change what it does and in this particular case then it's going to say",
    "start": "975290",
    "end": "982190"
  },
  {
    "text": "oh no you ran the exception you don't run the else but you always run the finally again this is not that just kind",
    "start": "982190",
    "end": "992390"
  },
  {
    "text": "of meant to get us started and understanding the way that this system works so exceptions themselves became",
    "start": "992390",
    "end": "1001180"
  },
  {
    "text": "classes more than twenty years ago that was in Python 1.5 since Python 3 one of",
    "start": "1001180",
    "end": "1009280"
  },
  {
    "text": "the changes that they made was to make it mandatory if you were going to raise an exception that it had to be a",
    "start": "1009280",
    "end": "1015190"
  },
  {
    "text": "subclass of Base exception it had to be in that hierarchy and by and large most",
    "start": "1015190",
    "end": "1023680"
  },
  {
    "text": "exceptions are subclasses of exception so basically the hierarchy goes base",
    "start": "1023680",
    "end": "1030069"
  },
  {
    "text": "exception exception almost everything else ok the things that are not that are",
    "start": "1030070",
    "end": "1042310"
  },
  {
    "text": "not subclasses of exception are sort of separated out for a reason and that is",
    "start": "1042310",
    "end": "1047860"
  },
  {
    "text": "if you just have a bare except keyword and you don't specify what you're looking for ok for one thing I'm gonna",
    "start": "1047860",
    "end": "1055570"
  },
  {
    "text": "argue later on that's not a smart thing to do but if in fact you do it for whatever reason it will catch exception",
    "start": "1055570",
    "end": "1061690"
  },
  {
    "text": "and all of its subclasses and if there is",
    "start": "1061690",
    "end": "1067230"
  },
  {
    "text": "a lot of codes still floating around out there that does this but maybe still wants to allow people to do ctrl C to",
    "start": "1067230",
    "end": "1074970"
  },
  {
    "text": "break out of the code or something like that okay or maybe wants to exit out of",
    "start": "1074970",
    "end": "1080580"
  },
  {
    "text": "the code some other things that you'll see there are cases where you wouldn't want that kind of except catching all",
    "start": "1080580",
    "end": "1087510"
  },
  {
    "text": "exceptions to catch those things those three things system exit exit generator",
    "start": "1087510",
    "end": "1092660"
  },
  {
    "text": "and keyboard interrupt then are themselves out of the main hierarchy",
    "start": "1092660",
    "end": "1098370"
  },
  {
    "text": "they're descendants of base exception but they don't they're not part of the main hierarchy so this ability though to",
    "start": "1098370",
    "end": "1106679"
  },
  {
    "text": "to subclass exceptions means that in Python you can create and endless and",
    "start": "1106679",
    "end": "1113669"
  },
  {
    "text": "and very precise hierarchy of exceptions if you need to so I want to talk about",
    "start": "1113669",
    "end": "1120030"
  },
  {
    "text": "that just a little bit as we go ahead but first here's what happens if you try",
    "start": "1120030",
    "end": "1125460"
  },
  {
    "text": "to raise something that is an exception no surprise and here is and yes you have",
    "start": "1125460",
    "end": "1136290"
  },
  {
    "text": "to memorize this there going to be a quiz in five minutes this is the",
    "start": "1136290",
    "end": "1141559"
  },
  {
    "text": "exception hierarchy in Python this comes straight from the standard documentation so it's what I was talking about",
    "start": "1141559",
    "end": "1147809"
  },
  {
    "text": "system.exit keyboard interrupt and generator exit are on their own exception then has pretty much",
    "start": "1147809",
    "end": "1156210"
  },
  {
    "text": "everything under it and everything is a reasonably large list okay you got that",
    "start": "1156210",
    "end": "1164490"
  },
  {
    "text": "okay like I say we'll have a quiz so being able to have that kind of",
    "start": "1164490",
    "end": "1172020"
  },
  {
    "text": "hierarchy is nice being able the subclass means though that you can in fact create your own special exception",
    "start": "1172020",
    "end": "1179580"
  },
  {
    "text": "for a particular module or library that you're creating so that you can specify",
    "start": "1179580",
    "end": "1186510"
  },
  {
    "text": "this as much as you want and and in fact most most large libraries will end up",
    "start": "1186510",
    "end": "1195240"
  },
  {
    "text": "doing this they'll have their own system of exceptions and",
    "start": "1195240",
    "end": "1200849"
  },
  {
    "text": "it's really handy maybe if you've got some sort of long complicated process or whatever to be able to know based on the",
    "start": "1200849",
    "end": "1207450"
  },
  {
    "text": "exception at a glance oh well this had to be here because that's the only place that those exceptions happen something",
    "start": "1207450",
    "end": "1214109"
  },
  {
    "text": "like that so it allows you a certain degree of a precision of ability to",
    "start": "1214109",
    "end": "1221309"
  },
  {
    "text": "handle things and this this would be",
    "start": "1221309",
    "end": "1227969"
  },
  {
    "text": "kind of an example of that so let me get",
    "start": "1227969",
    "end": "1233669"
  },
  {
    "text": "this straight all right so what I've done here this is",
    "start": "1233669",
    "end": "1241139"
  },
  {
    "text": "is a you know completely silly example but I've created a couple of custom",
    "start": "1241139",
    "end": "1248039"
  },
  {
    "text": "subclassed exceptions my special exception and my even more special exception so we've got a hierarchy there",
    "start": "1248039",
    "end": "1254549"
  },
  {
    "text": "my special exception inherits from exception my even more special exception",
    "start": "1254549",
    "end": "1260279"
  },
  {
    "text": "inherits from my special exception so if",
    "start": "1260279",
    "end": "1265669"
  },
  {
    "text": "let me change this around a little bit",
    "start": "1265669",
    "end": "1270469"
  },
  {
    "text": "right now I'm trapping only the most specialized case of that and that means that if I",
    "start": "1272119",
    "end": "1284009"
  },
  {
    "text": "were to say raise just a plain old exception this particular except Clause",
    "start": "1284009",
    "end": "1294659"
  },
  {
    "text": "is not going to do anything with it it will pass right on through of course",
    "start": "1294659",
    "end": "1300119"
  },
  {
    "text": "since nothing else is handling it bubbles up and says man trace back all of that okay on the other",
    "start": "1300119",
    "end": "1307499"
  },
  {
    "text": "hand if I were to not raise that",
    "start": "1307499",
    "end": "1313109"
  },
  {
    "text": "exception but I were to raise my",
    "start": "1313109",
    "end": "1318419"
  },
  {
    "text": "specialized one then my handler catches it and just prints out what it is and",
    "start": "1318419",
    "end": "1324299"
  },
  {
    "text": "and we don't have anything else there right and of course if I were to do this",
    "start": "1324299",
    "end": "1332119"
  },
  {
    "text": "one quick check what's gonna happen",
    "start": "1332119",
    "end": "1339169"
  },
  {
    "text": "it's not going to be caught because it isn't that special exception okay if I",
    "start": "1340130",
    "end": "1346799"
  },
  {
    "text": "were trapping just my special exception down there I would catch both you and it's subclass but since I'm only looking",
    "start": "1346799",
    "end": "1352980"
  },
  {
    "text": "for the subclass that's all I get so as I say point mainly being that you have",
    "start": "1352980",
    "end": "1358110"
  },
  {
    "text": "this ability to to trap things precisely actually let me go back for a second",
    "start": "1358110",
    "end": "1364710"
  },
  {
    "text": "here and of course you can do multiple accepts in a row so that you can sort of",
    "start": "1364710",
    "end": "1373020"
  },
  {
    "text": "do this thing for that do the other thing for the other condition another thing for another condition as many of",
    "start": "1373020",
    "end": "1379230"
  },
  {
    "text": "them as you want you can trap two or three different kinds of exception in the same except Clause so I want this",
    "start": "1379230",
    "end": "1385080"
  },
  {
    "text": "comma that comma that you can do those various things so that you have control over what is done for each particular",
    "start": "1385080",
    "end": "1393059"
  },
  {
    "text": "exception so that's great and this",
    "start": "1393059",
    "end": "1401610"
  },
  {
    "text": "ability Python is really easy to extend so this means that people love to extend",
    "start": "1401610",
    "end": "1408149"
  },
  {
    "text": "it so this ability means that you can make exceptions anywhere you want because remember back there all I did",
    "start": "1408149",
    "end": "1414929"
  },
  {
    "text": "was just inherit from a you know a parent type of exception and say pass I",
    "start": "1414929",
    "end": "1420090"
  },
  {
    "text": "didn't have to define anything because all of the exception this is baked in so",
    "start": "1420090",
    "end": "1427470"
  },
  {
    "text": "it's really easy to define them so you'll find sometimes that people like",
    "start": "1427470",
    "end": "1432840"
  },
  {
    "text": "to do a lot of them in their libraries and all of that and there are kind of two schools of thought and I have to",
    "start": "1432840",
    "end": "1440309"
  },
  {
    "text": "admit I'm on the grumpy old person side and that is I say be a little bit",
    "start": "1440309",
    "end": "1446100"
  },
  {
    "text": "careful about that you really need to go for what's convenient readable what",
    "start": "1446100",
    "end": "1452880"
  },
  {
    "text": "works what functions rather than following the rule every time I make a module I must make my own custom",
    "start": "1452880",
    "end": "1459510"
  },
  {
    "text": "exceptions because I think that's what I'm supposed to do because if you are",
    "start": "1459510",
    "end": "1466320"
  },
  {
    "text": "adding all of those custom exception types that's fine but then if somebody wants to actually catch",
    "start": "1466320",
    "end": "1473430"
  },
  {
    "text": "that exception if it's actually going to be raised outside of the module or library you've created they have to know",
    "start": "1473430",
    "end": "1480270"
  },
  {
    "text": "exactly where it is in that whole module hierarchy and explicitly import it so that they can handle it okay I mean",
    "start": "1480270",
    "end": "1487590"
  },
  {
    "text": "it'll work it'll throw and give a trace back and all of that but if they want to catch it then they the client needs to",
    "start": "1487590",
    "end": "1493260"
  },
  {
    "text": "to know where it is and be sure to get it so that's kind of the trade-off between endless specified exceptions and",
    "start": "1493260",
    "end": "1500750"
  },
  {
    "text": "in general I think the other thing is that a large amount of the time one of",
    "start": "1500750",
    "end": "1508110"
  },
  {
    "text": "the existing exceptions with a customized message you can put a message or parameter in when you're raising an",
    "start": "1508110",
    "end": "1515010"
  },
  {
    "text": "exception will actually get the job done just as well I mean it may be that you",
    "start": "1515010",
    "end": "1522000"
  },
  {
    "text": "have a library that specifically needs bad URL error could be on the other hand",
    "start": "1522000",
    "end": "1528420"
  },
  {
    "text": "maybe you just need a value error with the message bad URL so again III I mean",
    "start": "1528420",
    "end": "1535890"
  },
  {
    "text": "most of these things my approach to being pythonic is to argue to feel a little bit more on the conservative side",
    "start": "1535890",
    "end": "1541070"
  },
  {
    "text": "but there are people who are are big fans of the other one so few",
    "start": "1541070",
    "end": "1551010"
  },
  {
    "text": "observations at this point Python has obviously a very rich well-developed system of exceptions I hope you believe",
    "start": "1551010",
    "end": "1557640"
  },
  {
    "text": "that now and you can do very granular specific exceptions you can have a",
    "start": "1557640",
    "end": "1564090"
  },
  {
    "text": "hierarchy of exceptions and and all of this works with Python because it's an",
    "start": "1564090",
    "end": "1569670"
  },
  {
    "text": "interpreted language and it's just the way that it works makes it suited to to",
    "start": "1569670",
    "end": "1576300"
  },
  {
    "text": "to use and to recover from exceptions a little bit more than maybe a compiled",
    "start": "1576300",
    "end": "1581550"
  },
  {
    "text": "language would I I wouldn't press that too far by the way but in general for Python let's say it it is happy with",
    "start": "1581550",
    "end": "1591090"
  },
  {
    "text": "exceptions and this comes to kind of the the main take away what actually led to",
    "start": "1591090",
    "end": "1599640"
  },
  {
    "text": "this this this idea for this talk months ago was a code review on my team where somebody was",
    "start": "1599640",
    "end": "1606419"
  },
  {
    "text": "doing a whole lot of type checking and as we were doing code review those of us were more senior said don't do that it's",
    "start": "1606419",
    "end": "1612600"
  },
  {
    "text": "not pythonic and it's like why so that that kind of led to the discussions that",
    "start": "1612600",
    "end": "1618779"
  },
  {
    "text": "were the beginning of this talk so in general handling an exception is",
    "start": "1618779",
    "end": "1624450"
  },
  {
    "text": "probably more pythonic than checking in advance not always your mileage may vary",
    "start": "1624450",
    "end": "1631039"
  },
  {
    "text": "insert all of the standard disclaimers but in general handling the exception is",
    "start": "1631039",
    "end": "1637710"
  },
  {
    "text": "the way that Python would tend to do it particularly if of course you're",
    "start": "1637710",
    "end": "1643409"
  },
  {
    "text": "expecting the occurrence of that particular exception to be well",
    "start": "1643409",
    "end": "1648830"
  },
  {
    "text": "exceptional it wouldn't be a good idea to use exceptions to handle something",
    "start": "1648830",
    "end": "1654269"
  },
  {
    "text": "that happens a lot it's it's a good idea to use exceptions particularly if you",
    "start": "1654269",
    "end": "1660929"
  },
  {
    "text": "kind of know what case it is you're looking for and are able to handle it",
    "start": "1660929",
    "end": "1666029"
  },
  {
    "text": "and finally like the ultimate thing is use the exception if it does in fact",
    "start": "1666029",
    "end": "1672659"
  },
  {
    "text": "make your code easier to read okay I would argue that in the vast vast",
    "start": "1672659",
    "end": "1677760"
  },
  {
    "text": "majority of cases it probably will make your code easier to read but Zen of",
    "start": "1677760",
    "end": "1683789"
  },
  {
    "text": "Python says practicality beats purity so if in fact there is a case where it",
    "start": "1683789",
    "end": "1688980"
  },
  {
    "text": "doesn't work then don't do it okay so as an example this is a",
    "start": "1688980",
    "end": "1699210"
  },
  {
    "text": "completely imaginary example from a completely imaginary data system that behaves the way I want it to so you",
    "start": "1699210",
    "end": "1705870"
  },
  {
    "text": "can't argue with me and let's say we're actually getting somewhere we're looking",
    "start": "1705870",
    "end": "1711870"
  },
  {
    "text": "at a bunch of things from doing a bunch of queries on a database and if if we",
    "start": "1711870",
    "end": "1718740"
  },
  {
    "text": "get back an OLE result we don't want to do anything but otherwise we wouldn't print something out or do something else",
    "start": "1718740",
    "end": "1723929"
  },
  {
    "text": "I don't have a whole lot of space but you know what I mean so we get the result if it's not none we do the thing",
    "start": "1723929",
    "end": "1731450"
  },
  {
    "text": "otherwise we continue or maybe we say if if results would be",
    "start": "1731450",
    "end": "1739830"
  },
  {
    "text": "maybe a little bit more pythonic if we knew that we could count on never getting zeros or empty objects back or",
    "start": "1739830",
    "end": "1745230"
  },
  {
    "text": "something like that there'd be different ways of doing it but basically we're checking to see what we get before we do the thing right okay and this was",
    "start": "1745230",
    "end": "1754920"
  },
  {
    "text": "actually in in the code review example although it was it was much more complicated but if you're doing this",
    "start": "1754920",
    "end": "1761730"
  },
  {
    "text": "with exceptions basically you can kind of collapse this all down into something",
    "start": "1761730",
    "end": "1767070"
  },
  {
    "text": "it's a little bit simpler and that is let's go ahead and and try to do the thing with the thing and if we're not",
    "start": "1767070",
    "end": "1773010"
  },
  {
    "text": "we'll go ahead and and just move on so by putting that all on one line I'm",
    "start": "1773010",
    "end": "1781170"
  },
  {
    "text": "assuming if I get a none back and I'm trying to print the count of my query",
    "start": "1781170",
    "end": "1788160"
  },
  {
    "text": "result and it's none it's gonna tell me attribute none object doesn't have an",
    "start": "1788160",
    "end": "1793830"
  },
  {
    "text": "attribute called count so in that particular case since I know that my",
    "start": "1793830",
    "end": "1800940"
  },
  {
    "text": "query results are gonna be pretty much something like that I can say okay I want to trap that particular error and",
    "start": "1800940",
    "end": "1806490"
  },
  {
    "text": "just ignore it and move on okay now",
    "start": "1806490",
    "end": "1811920"
  },
  {
    "text": "again if performance was a big deal for me and I expected to get Nuns back maybe",
    "start": "1811920",
    "end": "1818820"
  },
  {
    "text": "50 60 70 % of the time this might not be the way to go then again I might be",
    "start": "1818820",
    "end": "1826710"
  },
  {
    "text": "questioning my whole approach by that point okay but that's that's a case so",
    "start": "1826710",
    "end": "1834290"
  },
  {
    "text": "basically trying to avoid exceptions can can sometimes get you into it is not the",
    "start": "1834290",
    "end": "1841230"
  },
  {
    "text": "way that Python would do it let's put it that way so so far I have argued that",
    "start": "1841230",
    "end": "1848670"
  },
  {
    "text": "exceptions are wonderful and they are in fact but they can be misused in in",
    "start": "1848670",
    "end": "1856980"
  },
  {
    "text": "various various interesting ways so these are things that you probably wouldn't want to do with exceptions real",
    "start": "1856980",
    "end": "1865470"
  },
  {
    "text": "quickly you don't want to have a bear except",
    "start": "1865470",
    "end": "1871960"
  },
  {
    "text": "without specifying the type of exception because that catches everything and well",
    "start": "1871960",
    "end": "1877960"
  },
  {
    "text": "except system.exit etc those three exceptions and it strikes me as very",
    "start": "1877960",
    "end": "1885700"
  },
  {
    "text": "very very rare that you would want to handle all exceptions with exactly the",
    "start": "1885700",
    "end": "1891580"
  },
  {
    "text": "same code unless maybe you just didn't like trace backs and you wanted to have",
    "start": "1891580",
    "end": "1896770"
  },
  {
    "text": "something that printed out something more polite than a trace back but you know if there is a case to do it by all",
    "start": "1896770",
    "end": "1904270"
  },
  {
    "text": "means do it even then I would argue be explicit and say you're catching except that will will be a little bit more of a",
    "start": "1904270",
    "end": "1910360"
  },
  {
    "text": "flag for people so like I say this particular case I only have five lines",
    "start": "1910360",
    "end": "1915520"
  },
  {
    "text": "of code here there are two or three errors that can happen and just saying oh that's an error it's not going to",
    "start": "1915520",
    "end": "1921490"
  },
  {
    "text": "help anybody so that's kind of the idea",
    "start": "1921490",
    "end": "1925890"
  },
  {
    "text": "exceptions are wonderful but I am NOT arguing that you need to use more and more and more and more and more of them",
    "start": "1927330",
    "end": "1933120"
  },
  {
    "text": "obviously too many exceptions can make your code a little bit tough to read so",
    "start": "1933120",
    "end": "1938310"
  },
  {
    "text": "for example this this code has pretty much every possible thing wrapped in an",
    "start": "1938310",
    "end": "1945970"
  },
  {
    "text": "exception in a try except I should say it doesn't catch all possible exceptions I'm not saying that but every code is is",
    "start": "1945970",
    "end": "1952990"
  },
  {
    "text": "nicely insulated in a try except and when I look at it I wrote it and I have a hard time seeing what it's doing okay",
    "start": "1952990",
    "end": "1960820"
  },
  {
    "text": "so again that that's kind of against the pattern you want to target your exceptions for them to make sense",
    "start": "1960820",
    "end": "1968490"
  },
  {
    "text": "something else that that I sometimes seen is trying to wrap too big a chunk",
    "start": "1968940",
    "end": "1977470"
  },
  {
    "text": "of code in a try except basically you got this thing a bunch of things might",
    "start": "1977470",
    "end": "1984160"
  },
  {
    "text": "go on okay so you don't want to have a whole lot of try except let's do one giant try and a whole bunch except at",
    "start": "1984160",
    "end": "1989620"
  },
  {
    "text": "the bottom there are cases where maybe that's your only choice but again it",
    "start": "1989620",
    "end": "1995200"
  },
  {
    "text": "makes the code a little bit hard to read in that you have this try then you have",
    "start": "1995200",
    "end": "2000690"
  },
  {
    "text": "some accepts down here at bottom and if I get a Unicode error I need to go back up and try and see where",
    "start": "2000690",
    "end": "2006840"
  },
  {
    "text": "it is in the code I me of course the trace back might tell me but it's kind of hard to connect the two so again not",
    "start": "2006840",
    "end": "2013710"
  },
  {
    "text": "particularly a pythonic way to do exceptions this one is my favorite you",
    "start": "2013710",
    "end": "2022710"
  },
  {
    "text": "can of course do try except pass and I",
    "start": "2022710",
    "end": "2028080"
  },
  {
    "text": "love this because one of the first times I was teaching Python this is now like",
    "start": "2028080",
    "end": "2033690"
  },
  {
    "text": "eighteen years ago I was teaching to a class of high school kids and there were these two guys and they had this look",
    "start": "2033690",
    "end": "2040260"
  },
  {
    "text": "that teenage boys get when they think they're getting away with something except it's not really working and I",
    "start": "2040260",
    "end": "2047520"
  },
  {
    "text": "didn't know what it was because they kept you know any problem oh no it's run fine it's running fine it's running fine what they had done is basically wrapped",
    "start": "2047520",
    "end": "2054118"
  },
  {
    "text": "everything in try/except past try/except past try except pass because that meant they never got an error okay it also",
    "start": "2054119",
    "end": "2061770"
  },
  {
    "text": "meant their code did absolutely nothing and they had no idea of what to do so",
    "start": "2061770",
    "end": "2067080"
  },
  {
    "text": "yeah it was basically guys take all of those out and let's actually make your code work and then you can worry about",
    "start": "2067080",
    "end": "2072388"
  },
  {
    "text": "using except I know it's cool but don't do that so again it's sort of this thing is",
    "start": "2072389",
    "end": "2077730"
  },
  {
    "text": "handy maybe in debugging but this pattern and I've seen it actually in in production code occasionally don't do",
    "start": "2077730",
    "end": "2084868"
  },
  {
    "text": "that so again you're using exceptions you kind of want to keep in mind how",
    "start": "2084869",
    "end": "2093230"
  },
  {
    "text": "likely the exception is what exactly it is you're expecting to go wrong and how",
    "start": "2093230",
    "end": "2099540"
  },
  {
    "text": "you're going to handle it and then again my personal prejudice be a little bit",
    "start": "2099540",
    "end": "2105000"
  },
  {
    "text": "parsimonious be a little bit stingy about creating all sorts of exception hierarchies if you don't really need to",
    "start": "2105000",
    "end": "2112700"
  },
  {
    "text": "if you need to by all means do so all of",
    "start": "2112700",
    "end": "2119640"
  },
  {
    "text": "that is kind of a gallop through the exception system so now we're all exception experts or at least aware of",
    "start": "2119640",
    "end": "2127590"
  },
  {
    "text": "how it works but it's not really what I",
    "start": "2127590",
    "end": "2133320"
  },
  {
    "text": "thought was sort of the entertaining part of the talk so in fact exceptions",
    "start": "2133320",
    "end": "2138460"
  },
  {
    "text": "aren't just for errors and for this we",
    "start": "2138460",
    "end": "2147099"
  },
  {
    "text": "can thank the Harry Potter theory the Harry Potter theory is something that",
    "start": "2147099",
    "end": "2153039"
  },
  {
    "text": "you know van Rossum the creator of Python came up with in a blog post now 15 years ago uh and his point he was",
    "start": "2153039",
    "end": "2162279"
  },
  {
    "text": "reading the Harry Potter books at the time and he was thinking about it ASIC you know I know that when when she wrote",
    "start": "2162279",
    "end": "2169140"
  },
  {
    "text": "the first of the books seven books that she planned I know that she knew the",
    "start": "2169140",
    "end": "2175180"
  },
  {
    "text": "general outline that she was going to do but I cannot believe that she knew every",
    "start": "2175180",
    "end": "2180220"
  },
  {
    "text": "single plot turn and every single detail of how magic worked when she was writing",
    "start": "2180220",
    "end": "2185829"
  },
  {
    "text": "the first book and in fact as guiteau's theory goes on she probably went back",
    "start": "2185829",
    "end": "2194319"
  },
  {
    "text": "when she was writing the later books she probably went back and looked at some of the stuff in the early things and said",
    "start": "2194319",
    "end": "2199839"
  },
  {
    "text": "hey I can use that detail in in a way that will further my plot now even",
    "start": "2199839",
    "end": "2205599"
  },
  {
    "text": "though I didn't think of it back then and what Guiteau is seeing is that in",
    "start": "2205599",
    "end": "2212019"
  },
  {
    "text": "fact in the evolution the design of Python there are all sorts of things that we do now routinely that he or no",
    "start": "2212019",
    "end": "2218920"
  },
  {
    "text": "it anybody else never thought of that would be useful as features of the language in the way that they're",
    "start": "2218920",
    "end": "2224680"
  },
  {
    "text": "currently used so you know he says when he came up with the for loop he hadn't",
    "start": "2224680",
    "end": "2230470"
  },
  {
    "text": "thought of iterate errs or generators he and thought of using a percent for string formatting or even the fact that",
    "start": "2230470",
    "end": "2237489"
  },
  {
    "text": "in Python you used F to define both a function and a class and a method inside",
    "start": "2237489",
    "end": "2244749"
  },
  {
    "text": "a class you know all of those things are great but they were never actually part of the original plan for Python which",
    "start": "2244749",
    "end": "2251470"
  },
  {
    "text": "was you know now thirty years ago so in",
    "start": "2251470",
    "end": "2256599"
  },
  {
    "text": "fact there are some things that that use exceptions that I'm wondering if you",
    "start": "2256599",
    "end": "2265269"
  },
  {
    "text": "know about wow no I let me take that back I'm at least some of you not knowing about",
    "start": "2265269",
    "end": "2270760"
  },
  {
    "text": "it otherwise I'm going to have to kind of sneak out or whatever but so so I'm",
    "start": "2270760",
    "end": "2276040"
  },
  {
    "text": "going to show you some pieces of code they're all very simple I'll give you a",
    "start": "2276040",
    "end": "2281470"
  },
  {
    "text": "second to think about it and see if you can think of what exception is being raised these are not none of them really",
    "start": "2281470",
    "end": "2290290"
  },
  {
    "text": "is a quote error so in in none of these cases would you typically see a",
    "start": "2290290",
    "end": "2296230"
  },
  {
    "text": "traceback these are cases where there is an exception and and you may not know",
    "start": "2296230",
    "end": "2302200"
  },
  {
    "text": "that it even happens so you can think",
    "start": "2302200",
    "end": "2309369"
  },
  {
    "text": "about it you don't need to shout it out or anything there's no prizes but so in",
    "start": "2309369",
    "end": "2315070"
  },
  {
    "text": "fact this imports sis sis dot exit would",
    "start": "2315070",
    "end": "2321940"
  },
  {
    "text": "be the way you would end a program if this were a program running like in a UNIX shell it would be indicating exit",
    "start": "2321940",
    "end": "2328030"
  },
  {
    "text": "successful no no error something like that okay in fact it is pretty much identical to",
    "start": "2328030",
    "end": "2335470"
  },
  {
    "text": "raising the system exit error and in fact the interpreter does a little bit",
    "start": "2335470",
    "end": "2342460"
  },
  {
    "text": "of does catch that and do a little bit of cleanup at the end or whatever but they are pretty much the same thing and",
    "start": "2342460",
    "end": "2351010"
  },
  {
    "text": "in fact let me back up here I'm in a jupiter notebook so of course it's got",
    "start": "2351010",
    "end": "2356770"
  },
  {
    "text": "its own little rules about what you can and can't do in a Python sub process but",
    "start": "2356770",
    "end": "2362140"
  },
  {
    "text": "if I run this one it complains saying yeah there's an error but it doesn't",
    "start": "2362140",
    "end": "2367540"
  },
  {
    "text": "really exit of course that would be bad because in my jupiter notebook wouldn't be running so and when I do this I get",
    "start": "2367540",
    "end": "2375430"
  },
  {
    "text": "the same thing I mean it as far as as you can tell see it's raising that exception so that's one that that many",
    "start": "2375430",
    "end": "2383980"
  },
  {
    "text": "people are not aware of next one this is",
    "start": "2383980",
    "end": "2394119"
  },
  {
    "text": "just iterating over a listing counting before I mean I'll run it there you go",
    "start": "2394119",
    "end": "2402569"
  },
  {
    "text": "okay the exception there yeah I know I've got a book signing I told them so",
    "start": "2404849",
    "end": "2414239"
  },
  {
    "text": "exception here stop iteration the Python",
    "start": "2414239",
    "end": "2420190"
  },
  {
    "text": "iteration protocol which is another fun subject that I've got to talk about that I at least find entertaining I the",
    "start": "2420190",
    "end": "2427720"
  },
  {
    "text": "Python iteration protocol relies on the iterator raising stop iteration to tell the for loop it's done it tell them that",
    "start": "2427720",
    "end": "2436779"
  },
  {
    "text": "the iterator is exhausted now there are some iterables that actually kind of",
    "start": "2436779",
    "end": "2442630"
  },
  {
    "text": "rely on sequence semantics I'll show you this right at the end that is basically",
    "start": "2442630",
    "end": "2447759"
  },
  {
    "text": "they go 0 1 2 3 whatever that will actually also raise an index error to",
    "start": "2447759",
    "end": "2453609"
  },
  {
    "text": "tell the iterator that it's done which will then raise stop iterations so you can get 2 for 1 there but a list",
    "start": "2453609",
    "end": "2460660"
  },
  {
    "text": "iterator is is smarter than that and and doesn't actually take that step but it does raise stop iteration because that's",
    "start": "2460660",
    "end": "2466690"
  },
  {
    "text": "how for loops work in Python if you use a for loop you're using exceptions ok",
    "start": "2466690",
    "end": "2473430"
  },
  {
    "text": "this one well and again I hope I still got a text 5 Harry I do so it's got a",
    "start": "2473430",
    "end": "2482109"
  },
  {
    "text": "for loop so we know it's got stop iteration but there's another one here to again think about it a little bit",
    "start": "2482109",
    "end": "2491518"
  },
  {
    "text": "oops move on there's an end-of-file error that's raised so if you're",
    "start": "2494490",
    "end": "2500339"
  },
  {
    "text": "actually iterating reading through a file and you try to read at the end of the file the file iterator the the file",
    "start": "2500339",
    "end": "2509250"
  },
  {
    "text": "object rather will raise an EO f error if you've got a file iterator it looks",
    "start": "2509250",
    "end": "2517109"
  },
  {
    "text": "at the EO f error and says oh we're done so it raises the stop iteration to tell",
    "start": "2517109",
    "end": "2522180"
  },
  {
    "text": "the for loop it's exhausted in the loop past and okay this one is getting kind",
    "start": "2522180",
    "end": "2531030"
  },
  {
    "text": "of into the weird and bizarre until I started digging into this I wasn't aware",
    "start": "2531030",
    "end": "2536070"
  },
  {
    "text": "of this one myself so we've got a generator there right num gen is a generator function it's got a yield in",
    "start": "2536070",
    "end": "2543750"
  },
  {
    "text": "it it's going to just spit back the numbers one at a time right every time",
    "start": "2543750",
    "end": "2550440"
  },
  {
    "text": "it hits yield that's going to to kind of save the state of that object and return",
    "start": "2550440",
    "end": "2556890"
  },
  {
    "text": "it to whatever was calling that that particular function so does that and",
    "start": "2556890",
    "end": "2565140"
  },
  {
    "text": "then down below I've got a little for loop that just uses that generator object to get numbers and print them out",
    "start": "2565140",
    "end": "2571140"
  },
  {
    "text": "right and here let me do this if I do",
    "start": "2571140",
    "end": "2580470"
  },
  {
    "text": "that it works and everything you would expect to happen happens okay we go",
    "start": "2580470",
    "end": "2590430"
  },
  {
    "text": "through our yield yield yield once we're at the last one it falls out does the return ends the the iterate ends the",
    "start": "2590430",
    "end": "2597240"
  },
  {
    "text": "generator and all of that and everything works is just fine the only exception we have there is the",
    "start": "2597240",
    "end": "2605820"
  },
  {
    "text": "one that we get for stop iteration because generator objects are iterators",
    "start": "2605820",
    "end": "2611190"
  },
  {
    "text": "and they tell for loops to end exactly the same way what suppose we break out",
    "start": "2611190",
    "end": "2619230"
  },
  {
    "text": "of this loop before we're done before the generator is used up let's say get",
    "start": "2619230",
    "end": "2625650"
  },
  {
    "text": "this you'll notice that we didn't get this",
    "start": "2625650",
    "end": "2630900"
  },
  {
    "text": "the the you know the the end of that that for loop in the in the generator object because that's kind of expected",
    "start": "2630900",
    "end": "2638660"
  },
  {
    "text": "but what actually we do get here as well is a generator exit exception why well",
    "start": "2638660",
    "end": "2650160"
  },
  {
    "text": "think about a little bit if we are iterating over the generator object that's created by calling num Jen yet",
    "start": "2650160",
    "end": "2658710"
  },
  {
    "text": "saving state every time go back gift let's it yield it saves it state you go back what's it yield until",
    "start": "2658710",
    "end": "2665220"
  },
  {
    "text": "it finally returns and then once it finally returns and once that for loop",
    "start": "2665220",
    "end": "2670950"
  },
  {
    "text": "ends that generator object we created by calling num Jen in the first place is",
    "start": "2670950",
    "end": "2676800"
  },
  {
    "text": "out of scope and can be garbage collected but if we exit before we get",
    "start": "2676800",
    "end": "2684390"
  },
  {
    "text": "to the end if we don't do something about that we have an object floating",
    "start": "2684390",
    "end": "2690540"
  },
  {
    "text": "around there that is probably not eligible for garbage collection and if",
    "start": "2690540",
    "end": "2696150"
  },
  {
    "text": "we do that oh say a million times we just might develop a tiny memory leak so",
    "start": "2696150",
    "end": "2702630"
  },
  {
    "text": "in fact when you actually break out when that sort of object goes out of scope even if it's not done I it will raise a",
    "start": "2702630",
    "end": "2709710"
  },
  {
    "text": "generator exception which basically triggers the the cleanup and inside of",
    "start": "2709710",
    "end": "2714960"
  },
  {
    "text": "that generator function you can't wrap it so so that is that is also a",
    "start": "2714960",
    "end": "2721470"
  },
  {
    "text": "possibility that as something that you can trap I do have kind of a complicated version",
    "start": "2721470",
    "end": "2726870"
  },
  {
    "text": "where I have it trapped everyplace but you can experiment with it it's just an interesting odd thing if it ends",
    "start": "2726870",
    "end": "2734820"
  },
  {
    "text": "normally the stop the generator exit is also raised but it's sort of thrown away because it doesn't need to do anything",
    "start": "2734820",
    "end": "2741080"
  },
  {
    "text": "there's really no way to trap it then so yeah so that that's oops I didn't mean",
    "start": "2741080",
    "end": "2746460"
  },
  {
    "text": "to to change my code excuse me now I'm falling apart there we go",
    "start": "2746460",
    "end": "2753529"
  },
  {
    "text": "alright let's move",
    "start": "2753860",
    "end": "2757250"
  },
  {
    "text": "so so yeah that's that's the case with this one so generator clothes raises an",
    "start": "2759609",
    "end": "2764859"
  },
  {
    "text": "exception okay this one I've kind of given away a little bit if you are",
    "start": "2764859",
    "end": "2773500"
  },
  {
    "text": "looking for an attribute of an object in Python and it does not exist actually let me back up if you're looking for an",
    "start": "2773500",
    "end": "2780490"
  },
  {
    "text": "attribute of an object you do object dot foo object dot bar object dot button and",
    "start": "2780490",
    "end": "2786849"
  },
  {
    "text": "whatever what it does is it uses the dunder get attribute method to go and get that",
    "start": "2786849",
    "end": "2794320"
  },
  {
    "text": "particular attribute for you whether it's reference to a method or its reference to some data whatever it is if",
    "start": "2794320",
    "end": "2801580"
  },
  {
    "text": "in fact it cannot find it if get attribute cannot find the thing you've",
    "start": "2801580",
    "end": "2807760"
  },
  {
    "text": "asked for it will raise an attribute error okay if it raises an attribute",
    "start": "2807760",
    "end": "2815349"
  },
  {
    "text": "error the next thing that the machinery will do is check to see if you have a",
    "start": "2815349",
    "end": "2822390"
  },
  {
    "text": "dunder get adder method defined and if you do it will then use that and you",
    "start": "2822390",
    "end": "2830890"
  },
  {
    "text": "have the option of maybe maybe it's a data element that you want to calculate okay you can calculate it and return it",
    "start": "2830890",
    "end": "2837900"
  },
  {
    "text": "okay so so this is kind of a chain of things so you know whether you know it",
    "start": "2837900",
    "end": "2844030"
  },
  {
    "text": "or not either way your you tend to end up using that mechanism if you actually",
    "start": "2844030",
    "end": "2849400"
  },
  {
    "text": "are trying to define a an attribute that is only calculated and doesn't really exist so there's a little bit",
    "start": "2849400",
    "end": "2857410"
  },
  {
    "text": "complicated but basically when I run this what happens is you try to get the",
    "start": "2857410",
    "end": "2863650"
  },
  {
    "text": "attribute if it's not there in this case I go ahead and print it out just to prove that I've been there and",
    "start": "2863650",
    "end": "2871359"
  },
  {
    "text": "then raise it again so that we can end up handing off to get adder that will then you know is what happens only as a",
    "start": "2871359",
    "end": "2879099"
  },
  {
    "text": "result usually of a an attribute error being thrown",
    "start": "2879099",
    "end": "2886079"
  },
  {
    "text": "so what does this all mean it means in fact Python uses exceptions as a form of",
    "start": "2886870",
    "end": "2894910"
  },
  {
    "text": "flow control if the condition is something that is exceptional like it's",
    "start": "2894910",
    "end": "2900730"
  },
  {
    "text": "the end of a state we're signaling a transition then exceptions are a way that Python even behind the scenes can",
    "start": "2900730",
    "end": "2908110"
  },
  {
    "text": "can use this as as a means of flow control then in fact can make the code",
    "start": "2908110",
    "end": "2914830"
  },
  {
    "text": "simpler but I know a lot of people have have a problem with using a lot of",
    "start": "2914830",
    "end": "2921130"
  },
  {
    "text": "exceptions they come from languages where this was frowned upon and they feel like it must be somehow bad and I",
    "start": "2921130",
    "end": "2927010"
  },
  {
    "text": "want to reassure you that it is not particularly bad if in fact you are at",
    "start": "2927010",
    "end": "2933970"
  },
  {
    "text": "the point in Python where you were able to see these things you should be seeing them as pythonic understanding the",
    "start": "2933970",
    "end": "2940360"
  },
  {
    "text": "exception system is relatively straightforward it usually makes the rest of your code more readable so you",
    "start": "2940360",
    "end": "2946630"
  },
  {
    "text": "know I I guess I what I'm saying is I don't buy the whole oh this is somehow confusing argument once you're used to",
    "start": "2946630",
    "end": "2953560"
  },
  {
    "text": "it it's not confusing the other question is about exceptions being slow and the",
    "start": "2953560",
    "end": "2960190"
  },
  {
    "text": "thing is exceptions are so rare that they're being slow shouldn't matter but",
    "start": "2960190",
    "end": "2966370"
  },
  {
    "text": "if I'm slow it will matter so I'm gonna talk really fast cuz we're almost out of time okay I've got here a function that",
    "start": "2966370",
    "end": "2971980"
  },
  {
    "text": "basically I created my own iterator so it'll raise an index error to tell a for",
    "start": "2971980",
    "end": "2978850"
  },
  {
    "text": "loop to raise stop iteration to end so two exceptions and I've got a little thing that tests it by squaring numbers",
    "start": "2978850",
    "end": "2986170"
  },
  {
    "text": "and then I've done the same thing with a while loop where I avoid all possible",
    "start": "2986170",
    "end": "2991270"
  },
  {
    "text": "exceptions okay come on come on come on",
    "start": "2991270",
    "end": "2996310"
  },
  {
    "text": "we're running out of time oh I didn't mean to do that twice my bad okay so if",
    "start": "2996310",
    "end": "3005400"
  },
  {
    "text": "I do this same thing using this test",
    "start": "3005400",
    "end": "3013830"
  },
  {
    "text": "count function used a for loop and two exceptions the while loop",
    "start": "3013830",
    "end": "3020700"
  },
  {
    "text": "version did not use any exceptions at all but is kind of like an anti Pathan",
    "start": "3020700",
    "end": "3027359"
  },
  {
    "text": "ik pattern you'll notice that the for loop version is two orders of magnitude",
    "start": "3027359",
    "end": "3033240"
  },
  {
    "text": "faster than basically the version that works to avoid exceptions okay that's",
    "start": "3033240",
    "end": "3039750"
  },
  {
    "text": "kind of a weird example and I can explain to you down at the book signing why that happens so extremely but in",
    "start": "3039750",
    "end": "3046800"
  },
  {
    "text": "general the idea is don't work to avoid exceptions there pythonic pythonic is better thank you very much on time",
    "start": "3046800",
    "end": "3056030"
  },
  {
    "text": "[Applause]",
    "start": "3056030",
    "end": "3060089"
  }
]