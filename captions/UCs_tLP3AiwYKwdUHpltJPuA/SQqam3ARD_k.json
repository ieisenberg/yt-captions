[
  {
    "start": "0",
    "end": "84000"
  },
  {
    "text": "hello everybody my name is yv mandri it's not a problem uh how you pronounce",
    "start": "13080",
    "end": "18880"
  },
  {
    "text": "my name I got used to various ones I lived in France for 10 years I do",
    "start": "18880",
    "end": "24800"
  },
  {
    "text": "various changes to it um let's get closer to the subject uh today we going",
    "start": "24800",
    "end": "30119"
  },
  {
    "text": "talk about Java uh code coverage and their best friend bite code there will",
    "start": "30119",
    "end": "35600"
  },
  {
    "text": "be a little bit of scandals and tricks and uh we will do some investigations before we start um I should give you a",
    "start": "35600",
    "end": "43640"
  },
  {
    "text": "disclaimer I work in a wonderful company sonar Source creators of such products",
    "start": "43640",
    "end": "49120"
  },
  {
    "text": "as sonar sonar Cube sonar Cloud uh sonar lint",
    "start": "49120",
    "end": "55199"
  },
  {
    "text": "um however whatever I'm going to say today is not connected to this company",
    "start": "55199",
    "end": "60480"
  },
  {
    "text": "I'm going to tell you my opinions it's my words this company can only dream that uh they own uh my",
    "start": "60480",
    "end": "67479"
  },
  {
    "text": "thoughts um whatever I'm going to present you today is uh direct",
    "start": "67479",
    "end": "72960"
  },
  {
    "text": "consequence of my night night work on a work uh in my spare free time on the",
    "start": "72960",
    "end": "79720"
  },
  {
    "text": "open source project that you might know jao Java code coverage and we're going to talk about",
    "start": "79720",
    "end": "86320"
  },
  {
    "start": "84000",
    "end": "333000"
  },
  {
    "text": "findings uh that we discover on the course of many many years working on this",
    "start": "86320",
    "end": "92200"
  },
  {
    "text": "project nowadays we test about 17 and a half GDK versions for this project we're",
    "start": "92200",
    "end": "98920"
  },
  {
    "text": "going to see why we do such a white testing sometimes we do find bus and GDK",
    "start": "98920",
    "end": "105799"
  },
  {
    "text": "maybe you've been on the my previous session today in this room and you've seen which bus you find in GDK this talk",
    "start": "105799",
    "end": "112079"
  },
  {
    "text": "is not going to be about bus in GDK this talk is going to be about which new",
    "start": "112079",
    "end": "117520"
  },
  {
    "text": "features we Implement in jco and why so some time ago Java code coverage",
    "start": "117520",
    "end": "124280"
  },
  {
    "text": "report for some code base using ja version",
    "start": "124280",
    "end": "129840"
  },
  {
    "text": "081 was looking like this when you look at this report you might notice that uh",
    "start": "129840",
    "end": "135879"
  },
  {
    "text": "probably not everything is great with this code base and with with its code",
    "start": "135879",
    "end": "141040"
  },
  {
    "text": "coverage because it's not 100% we should for 100% but that would be a wrong",
    "start": "141040",
    "end": "147280"
  },
  {
    "text": "feeling because we implemented some new features in jco version 082 and without",
    "start": "147280",
    "end": "153920"
  },
  {
    "text": "any changes in the code base in its tests raer now looks like this 100% cut",
    "start": "153920",
    "end": "161959"
  },
  {
    "text": "coverage why this happen at what those features are uh we're going to see",
    "start": "161959",
    "end": "167599"
  },
  {
    "text": "today so it's important to understand that Jacko receives all information from",
    "start": "167599",
    "end": "174480"
  },
  {
    "text": "the class files source files almost do not play any role in this process",
    "start": "174480",
    "end": "181000"
  },
  {
    "text": "they're shown to you at the very end of this process you could see them in the reports but on earlier stages they do",
    "start": "181000",
    "end": "189879"
  },
  {
    "text": "not influence result so this is this has a great",
    "start": "189879",
    "end": "196080"
  },
  {
    "text": "properties like this allows us to easily integrate into the build process you",
    "start": "196080",
    "end": "201879"
  },
  {
    "text": "just need to attach Java agent to the gvm process it's just one additional",
    "start": "201879",
    "end": "207799"
  },
  {
    "text": "option to the gvm um absence of source files is not a problem you can measure code coverage of",
    "start": "207799",
    "end": "214319"
  },
  {
    "text": "a codebase where you don't have source files you don't need to recompile rebuild we don't affect the usual",
    "start": "214319",
    "end": "221560"
  },
  {
    "text": "pipeline you don't need to separate what uh you do for release",
    "start": "221560",
    "end": "228120"
  },
  {
    "text": "what you do for the back what you do for testing um this supposed to help us uh",
    "start": "228120",
    "end": "234040"
  },
  {
    "text": "with implementation of support for new language features new syntax sugar is",
    "start": "234040",
    "end": "241400"
  },
  {
    "text": "not a problem to us if it doesn't affect semantic in any way if it doesn't affect the bite code the class files if it's",
    "start": "241400",
    "end": "248599"
  },
  {
    "text": "just a syntax Source sugar it's not a problem for us there is examples of this",
    "start": "248599",
    "end": "254159"
  },
  {
    "text": "like text block appear and GDK 15 we have to do nothing we don't need to do any changes to support text blocks there",
    "start": "254159",
    "end": "261799"
  },
  {
    "text": "is other JBS like there is a drop of JP of concise method bodies it's just a syntax sugar it shouldn't affect us and",
    "start": "261799",
    "end": "269840"
  },
  {
    "text": "well it's supposed initially we thought that uh it would open a door to other gvm based",
    "start": "269840",
    "end": "277199"
  },
  {
    "text": "languages other than Java like cotland groovy Scala that's not quite true",
    "start": "277199",
    "end": "283240"
  },
  {
    "text": "entirely but still most of uh our implementation easily Works uh for such",
    "start": "283240",
    "end": "290479"
  },
  {
    "text": "languages and here is a real disclaimer before we really start I'm sorry there",
    "start": "290479",
    "end": "296960"
  },
  {
    "text": "will be a little bit blood out of uh your wonderful Java virtual machine",
    "start": "296960",
    "end": "302199"
  },
  {
    "text": "sorry for this we are going to see naked Java compiler no ID nothing uh just",
    "start": "302199",
    "end": "308400"
  },
  {
    "text": "command line and Java compiler sorry we're going to talk a strong language we're going to talk bite code and sorry",
    "start": "308400",
    "end": "314400"
  },
  {
    "text": "for this I'm going to try to do intense violence of your brain if you're not ready for all this no problem just stand",
    "start": "314400",
    "end": "321360"
  },
  {
    "text": "up go to the other talk if everybody leave I'm also going to go and uh listen for some other",
    "start": "321360",
    "end": "327759"
  },
  {
    "text": "talk so I ready okay relax take a cup of coffee",
    "start": "327759",
    "end": "336479"
  },
  {
    "start": "333000",
    "end": "1375000"
  },
  {
    "text": "let's talk about Java as a starter let's me try to take",
    "start": "336479",
    "end": "343120"
  },
  {
    "text": "an empty class and let's name it bless",
    "start": "343120",
    "end": "348400"
  },
  {
    "text": "who agrees that this class is empty there is nothing inside there is no Fields no methods nothing who thinks",
    "start": "348400",
    "end": "355680"
  },
  {
    "text": "that this class is empty I do think",
    "start": "355680",
    "end": "361639"
  },
  {
    "text": "let's check if it's true let's compile it this is what we're going to use today we're going to use Javas C we compile",
    "start": "361759",
    "end": "367720"
  },
  {
    "text": "this class Java C bless me and we're going to use so-called Java decompiler",
    "start": "367720",
    "end": "374120"
  },
  {
    "text": "disassembler Java p uh a very for me a very powerful very useful tool part of",
    "start": "374120",
    "end": "381240"
  },
  {
    "text": "uh GDK we're going to use it with two options minus V verbos and minus P",
    "start": "381240",
    "end": "387479"
  },
  {
    "text": "privates protected Etc together Java P minus V minus p i often call us Java P",
    "start": "387479",
    "end": "393840"
  },
  {
    "text": "show me everything basically whatever is in your class file you're going to see so Java P minus V minus P bless me and",
    "start": "393840",
    "end": "401840"
  },
  {
    "text": "we're going to see a bite Cod listing in this bite Cod listing we could see okay",
    "start": "401840",
    "end": "406919"
  },
  {
    "text": "this is class file it was modified at the time it's its check stum is like",
    "start": "406919",
    "end": "412080"
  },
  {
    "text": "this it was compiled from this source file we're going to see which version",
    "start": "412080",
    "end": "417280"
  },
  {
    "text": "which source version uh this class file belongs to in this particular case I I",
    "start": "417280",
    "end": "422919"
  },
  {
    "text": "us it Java compiler from GDK 8 so we're going to see major version 52 in class",
    "start": "422919",
    "end": "428240"
  },
  {
    "text": "file and minor version zero and we are going to see a constant pool constant pool is a list of all the constants uh",
    "start": "428240",
    "end": "436759"
  },
  {
    "text": "use it in the class file it includes class name methods names uh types uh",
    "start": "436759",
    "end": "442720"
  },
  {
    "text": "other constants Etc basically all the constants strings are going to be there all the constants end up in the constant",
    "start": "442720",
    "end": "449560"
  },
  {
    "text": "pool all the rest of the bite Cod simply references a number in a constant pool",
    "start": "449560",
    "end": "455199"
  },
  {
    "text": "where the constant should be taken this is the first time and the last time I show you a constant pool it's quite big",
    "start": "455199",
    "end": "461879"
  },
  {
    "text": "usually so I'm going to strip it out from all other listings just know that it's there so what's else in this uh",
    "start": "461879",
    "end": "469759"
  },
  {
    "text": "empty class file actually holy place is never empty an empty class is not",
    "start": "469759",
    "end": "476360"
  },
  {
    "text": "empty Java requires us to have a Constructor so if you don't write in",
    "start": "476360",
    "end": "482919"
  },
  {
    "text": "your source code a Constructor Java compiler is going to generate a Constructor for you and this Constructor",
    "start": "482919",
    "end": "489440"
  },
  {
    "text": "is also not going to be an empty one because we need to call a Constructor of",
    "start": "489440",
    "end": "495280"
  },
  {
    "text": "a super object and you know that every class in Java inherits at least from",
    "start": "495280",
    "end": "500520"
  },
  {
    "text": "java link object so here is super Constructor invocation Java link object and we",
    "start": "500520",
    "end": "507919"
  },
  {
    "text": "cannot just fall out a method in nowhere we should return from a method here is a return",
    "start": "507919",
    "end": "513479"
  },
  {
    "text": "statement and here is a little link with a source this is the only information",
    "start": "513479",
    "end": "520080"
  },
  {
    "text": "that jako relies on to link the analyzed class files with the source files to",
    "start": "520080",
    "end": "526200"
  },
  {
    "text": "show you the report what do we have here we have a source file name f. Java and",
    "start": "526200",
    "end": "531959"
  },
  {
    "text": "we have a line number table which says well this line number in the source code",
    "start": "531959",
    "end": "538360"
  },
  {
    "text": "corresponds to this by code of set instruction it starts from there and",
    "start": "538360",
    "end": "544040"
  },
  {
    "text": "continues till the next line and noce in the source file it's not even a full",
    "start": "544040",
    "end": "551240"
  },
  {
    "text": "pass to the source file it's just a source file name there is no package nothing just a source",
    "start": "551240",
    "end": "557880"
  },
  {
    "text": "Val let's take something more complex uh we have an outer class and an",
    "start": "557880",
    "end": "565680"
  },
  {
    "text": "inner class here's an inner class in the inner class we have a private",
    "start": "565680",
    "end": "571120"
  },
  {
    "text": "Constructor in the outer class we have a method that calls Constructor of an",
    "start": "571120",
    "end": "577519"
  },
  {
    "text": "inner class what is going to happen if you try to compile",
    "start": "577519",
    "end": "582760"
  },
  {
    "text": "this is it even allowed to do like this in Java to call Private",
    "start": "582760",
    "end": "588079"
  },
  {
    "text": "Constructor who thinks it is oh okay I also think it is everybody",
    "start": "588079",
    "end": "595640"
  },
  {
    "text": "else you should wake up I promise it intense violence it's not even the start",
    "start": "595640",
    "end": "600680"
  },
  {
    "text": "it's warmer but we don't need to guess we can just try if Java compiler succeeds okay",
    "start": "600680",
    "end": "607800"
  },
  {
    "text": "it's allow it if it does not then well probably it's not allow it so we compile it we decompile it and here's what we're",
    "start": "607800",
    "end": "614200"
  },
  {
    "text": "going to see inside again GDK 8 I love this version so I use it it here is a",
    "start": "614200",
    "end": "620000"
  },
  {
    "text": "Constructor invocation in the method that we've wrote and what we expect here",
    "start": "620000",
    "end": "626360"
  },
  {
    "text": "we we expect just the Constructor invocation we do not not expect any arguments to be pass it to the",
    "start": "626360",
    "end": "632480"
  },
  {
    "text": "Constructor of an inner class there was no arguments right but here in the bite code we see a",
    "start": "632480",
    "end": "639279"
  },
  {
    "text": "null argument passed to a Constructor invocation what the is going on",
    "start": "639279",
    "end": "645480"
  },
  {
    "text": "here let's look at the inner class what happened in the inner class here is our",
    "start": "645480",
    "end": "651720"
  },
  {
    "text": "private Constructor which we' wrote there is no arguments in it and",
    "start": "651720",
    "end": "657639"
  },
  {
    "text": "then we got one more construct and this time this Constructor receives the",
    "start": "657639",
    "end": "664320"
  },
  {
    "text": "parameter and it's package local and remember this word synthetic our initial",
    "start": "665680",
    "end": "671519"
  },
  {
    "text": "one was Private this one is package local that's important and it invokes it simply",
    "start": "671519",
    "end": "678320"
  },
  {
    "text": "delegates to the private Constructor it does nothing just delegates to the private",
    "start": "678320",
    "end": "684600"
  },
  {
    "text": "Constructor if we look at this strange type of argument that is passed to this",
    "start": "684600",
    "end": "690399"
  },
  {
    "text": "Constructor it's also got generated on our disk outer dollar one if you look at",
    "start": "690399",
    "end": "696120"
  },
  {
    "text": "it this time we are going to see an empty class file this class does not inherit from",
    "start": "696120",
    "end": "704200"
  },
  {
    "text": "java lank object this class has nothing inside it's impossible to create instance of this",
    "start": "704200",
    "end": "711399"
  },
  {
    "text": "class why this happens well and this class is also",
    "start": "711399",
    "end": "717079"
  },
  {
    "text": "synthetic um why this happens well while from the Java language specification",
    "start": "717079",
    "end": "722600"
  },
  {
    "text": "point of view it's perfectly valid to call a private of an inner class because",
    "start": "722600",
    "end": "728240"
  },
  {
    "text": "they recite in the same source file this is perfectly valid from the Java virtual machine standpoint of view this is not",
    "start": "728240",
    "end": "735680"
  },
  {
    "text": "allow it you cannot call privates from one class in the other class you do not have",
    "start": "735680",
    "end": "743120"
  },
  {
    "text": "access to private Fields private Constructors private methods so there is a disrupt between Java language",
    "start": "743120",
    "end": "749639"
  },
  {
    "text": "specification and Java virtual machine specification to align those two words",
    "start": "749639",
    "end": "755279"
  },
  {
    "text": "worlds there is a trick in Java compiler okay gvm doesn't allow to do this let's",
    "start": "755279",
    "end": "761000"
  },
  {
    "text": "pretend that it's allow it let's generate something in the class files so the gvm will happily accept this and",
    "start": "761000",
    "end": "768040"
  },
  {
    "text": "that's what is happening Java compiler generates additional um Constructor to",
    "start": "768040",
    "end": "775480"
  },
  {
    "text": "distinguish with the first Constructor we need some argument as they would Clash and we cannot change original",
    "start": "775480",
    "end": "781639"
  },
  {
    "text": "Constructor so that's why Java compiler or also generates a little synthetic",
    "start": "781639",
    "end": "787160"
  },
  {
    "text": "class that you cannot instan say bum all that Chang it in Java 11 you",
    "start": "787160",
    "end": "794760"
  },
  {
    "text": "might know or remember or so is in Java 11 we got Jep 181 Nest based Access",
    "start": "794760",
    "end": "800920"
  },
  {
    "text": "Control if we will take exactly the same source code and compile it with Java",
    "start": "800920",
    "end": "806360"
  },
  {
    "text": "compiler version 11 or greater we're going to going to see completely different situation first of all we are",
    "start": "806360",
    "end": "811800"
  },
  {
    "text": "going to see major version 55 which corresponds to Java 11 we're going to",
    "start": "811800",
    "end": "817600"
  },
  {
    "text": "see that there is no more generated synthetic Constructor we're going to see",
    "start": "817600",
    "end": "823720"
  },
  {
    "text": "significant loss of a size of your class files on the dis there is no need to",
    "start": "823720",
    "end": "828839"
  },
  {
    "text": "generate additional bite Cod all this is possible thanks to the new attribute Nest host Nest host simply says well I",
    "start": "828839",
    "end": "838480"
  },
  {
    "text": "am an inner of this outer class so gvm can verify access control and provide",
    "start": "838480",
    "end": "846199"
  },
  {
    "text": "the same uh allowance as allowed in the Java",
    "start": "846199",
    "end": "852240"
  },
  {
    "text": "language let's have a look on the other example uh we have an outer class we",
    "start": "852920",
    "end": "859839"
  },
  {
    "text": "have an uh private field in it we have an inner class and in the inner class we",
    "start": "859839",
    "end": "867079"
  },
  {
    "text": "have increment of the field of an outer class is it",
    "start": "867079",
    "end": "874560"
  },
  {
    "text": "allowed wake up please wake up yes it is allow it it's the same Java language",
    "start": "874800",
    "end": "880399"
  },
  {
    "text": "specification rules exactly the same ones we can access privates of outter",
    "start": "880399",
    "end": "885639"
  },
  {
    "text": "now it's in another Direction and well now it's not a Constructor it's not a method it's just a field it's all over",
    "start": "885639",
    "end": "891160"
  },
  {
    "text": "so let's see what happens again Java 8 here is an",
    "start": "891160",
    "end": "897320"
  },
  {
    "text": "inner no direct f field access we need to call some",
    "start": "897320",
    "end": "903839"
  },
  {
    "text": "method which has a strange name access dollar 00 why not seven I don't know but eight",
    "start": "903839",
    "end": "912360"
  },
  {
    "text": "and if you look at the outer it's the same story here is package local static",
    "start": "912360",
    "end": "918199"
  },
  {
    "text": "synthetic method generated in order to overcome uh access rules and this method",
    "start": "918199",
    "end": "924120"
  },
  {
    "text": "does the increment how inefficient it is just to over come this misalignment",
    "start": "924120",
    "end": "930720"
  },
  {
    "text": "again uh all this Chang it with Java 11 significant weight lost we can do access",
    "start": "930720",
    "end": "936759"
  },
  {
    "text": "directly there is another attribute Nest members which says in the opposite direction I do have these members nested",
    "start": "936759",
    "end": "945440"
  },
  {
    "text": "into me they have access to my products and hello again Nest host if",
    "start": "945440",
    "end": "951120"
  },
  {
    "text": "you look from the other direction is there some other example of",
    "start": "951120",
    "end": "956880"
  },
  {
    "text": "synthetic generated constructions you might Wonder yes there is let's take a look on the two classes A and",
    "start": "956880",
    "end": "964279"
  },
  {
    "text": "B Class B extends Class A both have method the method name is Fun the only",
    "start": "964279",
    "end": "972240"
  },
  {
    "text": "difference is the return type they do have different return types one has object another one over",
    "start": "972240",
    "end": "980440"
  },
  {
    "text": "writes the first one and has a return type string is it",
    "start": "980440",
    "end": "987279"
  },
  {
    "text": "AOW who thinks no no could you please rise hands no",
    "start": "987279",
    "end": "992800"
  },
  {
    "text": "shame okay some people who thinks it's allowed others what do you think there",
    "start": "992800",
    "end": "1000000"
  },
  {
    "text": "is just two options yes or no wake up wake up we don't need to guess whether",
    "start": "1000000",
    "end": "1005279"
  },
  {
    "text": "it is allowed or not either we read Java langage specification or we try to compile no worries we try to compile it",
    "start": "1005279",
    "end": "1011160"
  },
  {
    "text": "works so it's allowed but what is going to happen inside of the class files",
    "start": "1011160",
    "end": "1016360"
  },
  {
    "text": "let's have a look this time I don't take a risk of using very old Java versions",
    "start": "1016360",
    "end": "1021560"
  },
  {
    "text": "maybe they would have something and did some tricks inside this time is it's GDK",
    "start": "1021560",
    "end": "1026640"
  },
  {
    "text": "18 major version 62 what's in there um if you look at the",
    "start": "1026640",
    "end": "1032558"
  },
  {
    "text": "BCL class here is the method that we've run it has a return type",
    "start": "1032559",
    "end": "1037798"
  },
  {
    "text": "string and here is one more this time it has return type object",
    "start": "1037799",
    "end": "1043959"
  },
  {
    "text": "we didn't R this one and it's again call it synthetic and",
    "start": "1043959",
    "end": "1050799"
  },
  {
    "text": "it has one more tribute Bridge the only thing it does it simply",
    "start": "1050799",
    "end": "1055960"
  },
  {
    "text": "delegates to original method um sorry why this",
    "start": "1055960",
    "end": "1062559"
  },
  {
    "text": "happens why do we need this synthetic bridge this time there is no misalignment let's say between Java",
    "start": "1062559",
    "end": "1069120"
  },
  {
    "text": "language specification and Java virtual machine specification it's just by the rules of the ja Java language",
    "start": "1069120",
    "end": "1075480"
  },
  {
    "text": "specification how it should be this time the thing is everywhere",
    "start": "1075480",
    "end": "1082039"
  },
  {
    "text": "where parent class class A is expected we can supply an instance of it",
    "start": "1082039",
    "end": "1089280"
  },
  {
    "text": "child it's simple inheritance so everywhere where a original fun method",
    "start": "1089280",
    "end": "1094919"
  },
  {
    "text": "that returns object is called should be possible to call the",
    "start": "1094919",
    "end": "1101559"
  },
  {
    "text": "ver ridden one that return returns string unfortunately the rden one returns of string whereas uh place",
    "start": "1101559",
    "end": "1109320"
  },
  {
    "text": "which expect a expect object so for those places we need to provide a method",
    "start": "1109320",
    "end": "1115640"
  },
  {
    "text": "that returns object and that's exactly what Java compiler does generating a",
    "start": "1115640",
    "end": "1121120"
  },
  {
    "text": "synthetic",
    "start": "1121120",
    "end": "1124120"
  },
  {
    "text": "method let's have a look on more examples switch super simple",
    "start": "1126320",
    "end": "1133400"
  },
  {
    "text": "construction here is in it has two values false and true",
    "start": "1133400",
    "end": "1139520"
  },
  {
    "text": "here is a switch but you know three cases default one false and",
    "start": "1139520",
    "end": "1146480"
  },
  {
    "text": "true I'm not going to ask whether it is allowed or not this time let's just check let's compile it compiles we",
    "start": "1146720",
    "end": "1153760"
  },
  {
    "text": "decompile this time it's even bigger more bigger example but let's have a look so here is our method example here",
    "start": "1153760",
    "end": "1160720"
  },
  {
    "text": "is a switch no problem with it one case second case default two returns",
    "start": "1160720",
    "end": "1167360"
  },
  {
    "text": "everything is fine but but if you look closely just before switch we are going to see something strange we are going to",
    "start": "1167360",
    "end": "1174960"
  },
  {
    "text": "see that we access some field in some class that we never",
    "start": "1174960",
    "end": "1180080"
  },
  {
    "text": "brought it's again has a dollar its name e dollar one what's that if you look at",
    "start": "1180080",
    "end": "1186559"
  },
  {
    "text": "this class that got generated we're going to see again that it's",
    "start": "1186559",
    "end": "1193200"
  },
  {
    "text": "synthetic we're going to see that it contains some field and we're going to see that it has a static",
    "start": "1193200",
    "end": "1199600"
  },
  {
    "text": "initializer what's going on in this static initializer this static initializer takes a field and in the",
    "start": "1199600",
    "end": "1207400"
  },
  {
    "text": "field uh takes a switch map field it's called switch map and in this",
    "start": "1207400",
    "end": "1212640"
  },
  {
    "text": "field into the position which corresponds to the current value of yum",
    "start": "1212640",
    "end": "1218440"
  },
  {
    "text": "constant fals so its ordinal value it writes one in the",
    "start": "1218440",
    "end": "1225520"
  },
  {
    "text": "place in this massive that corresp responds to the current ordinal value of",
    "start": "1225520",
    "end": "1231080"
  },
  {
    "text": "yum constant true it writes two and well there is acception table",
    "start": "1231080",
    "end": "1237679"
  },
  {
    "text": "that DRS all these things that's not important",
    "start": "1237679",
    "end": "1243039"
  },
  {
    "text": "oops okay why this happens why do we need to have some array and why do we",
    "start": "1243039",
    "end": "1249640"
  },
  {
    "text": "have to access this array while doing a",
    "start": "1249640",
    "end": "1255000"
  },
  {
    "text": "switch any guesses okay probably the ones who knows answers",
    "start": "1255000",
    "end": "1262039"
  },
  {
    "text": "they've been on the previous talk the one who don't they haven't well it's super simple it's super easy Java allows",
    "start": "1262039",
    "end": "1268640"
  },
  {
    "text": "a split compilation you can have a switch in one source file yum in the other source file and you can recompile",
    "start": "1268640",
    "end": "1276279"
  },
  {
    "text": "them separately and if we recompile yum this should not break already compiled",
    "start": "1276279",
    "end": "1282640"
  },
  {
    "text": "switch so for example if in the Y we switch order of the fields or if we REM",
    "start": "1282640",
    "end": "1289880"
  },
  {
    "text": "of constants of we if we remove some constants this should not break switch",
    "start": "1289880",
    "end": "1295159"
  },
  {
    "text": "switch still should work and to overcome the difficulty that we can reorder or remove compiler needs to have a mapping",
    "start": "1295159",
    "end": "1304080"
  },
  {
    "text": "from the current values of yum constants to the values that been there at a",
    "start": "1304080",
    "end": "1309520"
  },
  {
    "text": "compilation time for the switch and here is this mapping we take a run time value",
    "start": "1309520",
    "end": "1314919"
  },
  {
    "text": "we map it to the switch value that's it",
    "start": "1314919",
    "end": "1320519"
  },
  {
    "text": "let me scroll so so far we've seen examples of synthetic thingss and we might wonder what this synthetic",
    "start": "1320600",
    "end": "1326880"
  },
  {
    "text": "attribute in the bite code means and there is an answer on this question if we look at the Java virtual machine",
    "start": "1326880",
    "end": "1332760"
  },
  {
    "text": "specification we could find an explanation a class member that does not appear in the source code must be marked",
    "start": "1332760",
    "end": "1339400"
  },
  {
    "text": "using a synthetic attribute the only exceptions as in every language there is exceptions to",
    "start": "1339400",
    "end": "1346880"
  },
  {
    "text": "the rules there is rules and then there is exceptions the only exceptions to this requirement are compiler generated",
    "start": "1346880",
    "end": "1353520"
  },
  {
    "text": "methods which are not considered implementation artifacts",
    "start": "1353520",
    "end": "1359159"
  },
  {
    "text": "namely instance initialization methods default Constructors that we've already",
    "start": "1359159",
    "end": "1364480"
  },
  {
    "text": "seen uh class or interface initialization methods and implicitly declared members of yum and record",
    "start": "1364480",
    "end": "1372320"
  },
  {
    "text": "classes that's it so at this moment in time you might say Well it's super",
    "start": "1372320",
    "end": "1378919"
  },
  {
    "start": "1375000",
    "end": "2745000"
  },
  {
    "text": "simple in code coverage reports what we would like to see is everything what we've wrote and nothing what was",
    "start": "1378919",
    "end": "1387000"
  },
  {
    "text": "generated so jao should ignore synthetic methods and you will be partially true",
    "start": "1387000",
    "end": "1394320"
  },
  {
    "text": "if not lambdas let's have a look at lambdas by the way when lambdas appeared",
    "start": "1394320",
    "end": "1401679"
  },
  {
    "text": "somebody remembers well in my favorite Java version in in Java 8 so we have method",
    "start": "1401679",
    "end": "1409400"
  },
  {
    "text": "exec method exac takes rable and we have method fun in method fun we call method",
    "start": "1409400",
    "end": "1415919"
  },
  {
    "text": "exec and Supply a Lambda as an argument notice that this Lambda appears on the",
    "start": "1415919",
    "end": "1421799"
  },
  {
    "text": "line number nine and it contains a string Jacker so let's compile this let's",
    "start": "1421799",
    "end": "1428679"
  },
  {
    "text": "decompile here is exec method nothing special in it it takes R enable calls and the run method here is our fun",
    "start": "1428679",
    "end": "1435240"
  },
  {
    "text": "method where is Jer where is the string",
    "start": "1435240",
    "end": "1441159"
  },
  {
    "text": "liter moreover where is line number nine they",
    "start": "1441159",
    "end": "1447440"
  },
  {
    "text": "disappeared well all of this is mechanics behind lambdas every time you",
    "start": "1447440",
    "end": "1453559"
  },
  {
    "text": "you have a Lambda in your source code it actually compiles into the separate method in the class file so",
    "start": "1453559",
    "end": "1462480"
  },
  {
    "text": "here is a synthetic generated method with a magical name Lambda dollar fun dollar Z and here is a joker in it and",
    "start": "1462480",
    "end": "1470880"
  },
  {
    "text": "here is a line number nine notice it's",
    "start": "1470880",
    "end": "1476960"
  },
  {
    "text": "synthetic so what happens we did ignore it all synthetics this was indeed the",
    "start": "1477480",
    "end": "1483240"
  },
  {
    "text": "case it was working for many years from java 5 Java 4 up to Java 8 and in Java 8",
    "start": "1483240",
    "end": "1489679"
  },
  {
    "text": "we got lambdas and uh we got a problem with our uh Cod coverage reports because",
    "start": "1489679",
    "end": "1495600"
  },
  {
    "text": "we ignore we ignore all synthetics and uh and so we ignore bodies of",
    "start": "1495600",
    "end": "1504840"
  },
  {
    "text": "lambdas we have to fix this how we can fix this well we need to ignore all",
    "start": "1504840",
    "end": "1510440"
  },
  {
    "text": "synthetics except but except what there is no way to distinguish a synthetic",
    "start": "1510440",
    "end": "1517840"
  },
  {
    "text": "which we have to ignore from from a synthetic which we should not because it's implementation details of lambdas",
    "start": "1517840",
    "end": "1524880"
  },
  {
    "text": "there is no specification that says all lambdas compile into methods names like this it's a pure implementation detail",
    "start": "1524880",
    "end": "1532159"
  },
  {
    "text": "of java compiler actually cotland does differently Scala does differently Gro with does differently so in our cut",
    "start": "1532159",
    "end": "1538960"
  },
  {
    "text": "coverage tool jao we have to adapt to all this test all this and we'll write a crazy rule like well if it starts from",
    "start": "1538960",
    "end": "1546760"
  },
  {
    "text": "Lambda dollar then it's Java and then it should not be ignored this implementation details this is not",
    "start": "1546760",
    "end": "1553720"
  },
  {
    "text": "specifi okay we fix it we get a code coverage for lambdas bodies",
    "start": "1553720",
    "end": "1559000"
  },
  {
    "text": "at this moment in time you might wonder do I have something non- synthetic well fortunately or unfortunately I don't but",
    "start": "1559000",
    "end": "1565559"
  },
  {
    "text": "inside of java compilers uh there is plenty let's have a look let's let's try",
    "start": "1565559",
    "end": "1571760"
  },
  {
    "text": "again with an empty class this time let's have yum this yum is empty there",
    "start": "1571760",
    "end": "1577520"
  },
  {
    "text": "is no constants in it right do you agree this time it should be easier after",
    "start": "1577520",
    "end": "1583200"
  },
  {
    "text": "you've seen the very first example is it empty in the bite code",
    "start": "1583200",
    "end": "1590240"
  },
  {
    "text": "who thinks that it's snow yes who thinks that it is",
    "start": "1590399",
    "end": "1599520"
  },
  {
    "text": "empty okay others I guess still sleeping wake",
    "start": "1599520",
    "end": "1604720"
  },
  {
    "text": "up we are still warming up we are just half way through all the presentation let's compile let's have a look it's big",
    "start": "1604720",
    "end": "1612640"
  },
  {
    "text": "it's not empty it's not even just a Constructor as we've seen in the very first example there is there is a fi",
    "start": "1612640",
    "end": "1618880"
  },
  {
    "text": "values in there is a method values",
    "start": "1618880",
    "end": "1623919"
  },
  {
    "text": "in there is Method value of and here is a",
    "start": "1623919",
    "end": "1630279"
  },
  {
    "text": "Constructor and even this is not the end there is a static initializer what happens in the static",
    "start": "1630279",
    "end": "1637279"
  },
  {
    "text": "initializer the field Valu is initialized and is going to be assigned",
    "start": "1637279",
    "end": "1642559"
  },
  {
    "text": "all of the constants of the ino in this case we have no constants nothing to put",
    "start": "1642559",
    "end": "1648039"
  },
  {
    "text": "in in this field but well field should be there because this field is used in",
    "start": "1648039",
    "end": "1654200"
  },
  {
    "text": "the method values this method values according to Java language specification should return all the constants and well",
    "start": "1654200",
    "end": "1661240"
  },
  {
    "text": "in this case it just returns an empty array and the method value of you know it you can ask a constant by its",
    "start": "1661240",
    "end": "1668760"
  },
  {
    "text": "strength representation they should be there so they should be generated and",
    "start": "1668760",
    "end": "1673880"
  },
  {
    "text": "this time they are not Market synthetic why they cannot be Market synthetic why",
    "start": "1673880",
    "end": "1679480"
  },
  {
    "text": "the Java virtual machine specification has this exception for such methods saying well they are generated but",
    "start": "1679480",
    "end": "1686320"
  },
  {
    "text": "should not be marketed synthetic an answer on this question is only compiler",
    "start": "1686320",
    "end": "1692320"
  },
  {
    "text": "can have access to synthetic generated things you cannot write the source code",
    "start": "1692320",
    "end": "1698120"
  },
  {
    "text": "that reference it something that was Market as synthetic but access to those fields should be allowed to the",
    "start": "1698120",
    "end": "1703880"
  },
  {
    "text": "developers you should be able to call Value off it should appear in the after completion in the ID so they cannot be",
    "start": "1703880",
    "end": "1710760"
  },
  {
    "text": "Market synthetic even though they are generated why it's a problem for C",
    "start": "1710760",
    "end": "1715960"
  },
  {
    "text": "coverage for us well yes uh people do not expect U users we uh we do not",
    "start": "1715960",
    "end": "1723279"
  },
  {
    "text": "expect those methods to appear in C coverage rapper why why should we why",
    "start": "1723279",
    "end": "1729360"
  },
  {
    "text": "should we test them they compiler generated let's trust the compiler it does a great job so again we have to",
    "start": "1729360",
    "end": "1736320"
  },
  {
    "text": "implement a filter that filter them out we need to figure out okay this is a method of yan Etc and we did implemented",
    "start": "1736320",
    "end": "1743679"
  },
  {
    "text": "the filter unfortunately we forgot a case when some people want to really use",
    "start": "1743679",
    "end": "1748919"
  },
  {
    "text": "uh an empty y I don't know why but they do want we generated uh sorry we ignore",
    "start": "1748919",
    "end": "1755000"
  },
  {
    "text": "it value of method we ignore it values method but in empty NS actually",
    "start": "1755000",
    "end": "1760200"
  },
  {
    "text": "Constructor never gets called so it's impossible to call the Constructor it's",
    "start": "1760200",
    "end": "1765360"
  },
  {
    "text": "private it's never get called people who use empty I don't know why they do so but they see this uh private Constructor",
    "start": "1765360",
    "end": "1772960"
  },
  {
    "text": "and they don't want to see it okay we implemented even this",
    "start": "1772960",
    "end": "1778080"
  },
  {
    "text": "F let's move on uh time flies we've seen another exception of uh non- synthetic",
    "start": "1778080",
    "end": "1785120"
  },
  {
    "text": "thingss and this synthetic uh rule it was records so what we can see in the",
    "start": "1785120",
    "end": "1791279"
  },
  {
    "text": "records records appeared in Java Fon let's take a look we have a record with",
    "start": "1791279",
    "end": "1797159"
  },
  {
    "text": "just one X and we compile and again there is a",
    "start": "1797159",
    "end": "1803159"
  },
  {
    "text": "lot inside what's inside here let's scroll even more there is field we",
    "start": "1803159",
    "end": "1808360"
  },
  {
    "text": "declared the field we expect it to be there here is Constructor again gets generated for us method to string gets",
    "start": "1808360",
    "end": "1816399"
  },
  {
    "text": "generated hash Cod equals g all of this is nice because that's",
    "start": "1816399",
    "end": "1825320"
  },
  {
    "text": "what for we wanted records to not write all all this boiler plate but for C",
    "start": "1825320",
    "end": "1830399"
  },
  {
    "text": "coverage tool it's a little bit of headache we need to filter this out and",
    "start": "1830399",
    "end": "1835840"
  },
  {
    "text": "why because otherwise it's Heek for you it lowers down the Cod coverage metric but let's move on this is simple",
    "start": "1835840",
    "end": "1843240"
  },
  {
    "text": "example pretty much it was simple example pretty much like yums but there is more and we don't need recent",
    "start": "1843240",
    "end": "1851120"
  },
  {
    "text": "versions of GDK or Java to see more strange cases let's take again my",
    "start": "1851120",
    "end": "1856480"
  },
  {
    "text": "favorite Java version 8 um it got a switch on strings so here is",
    "start": "1856480",
    "end": "1863919"
  },
  {
    "text": "a switch uh by string it has only three",
    "start": "1863919",
    "end": "1869399"
  },
  {
    "text": "cases right case a case b and default",
    "start": "1869399",
    "end": "1874799"
  },
  {
    "text": "there is nothing else one switch free case if we compile this if we decompile",
    "start": "1874799",
    "end": "1880840"
  },
  {
    "text": "it's quite big let me zoom in here is what we're going to see in the bite cod we're actually going to see two switches",
    "start": "1880840",
    "end": "1888399"
  },
  {
    "text": "what the  any ideas was it one should I scroll back or did I WR",
    "start": "1888399",
    "end": "1895679"
  },
  {
    "text": "two it was one turns out that it's much more",
    "start": "1895679",
    "end": "1901679"
  },
  {
    "text": "efficient to do a first a switch by hash code and that's what happens we first do",
    "start": "1901679",
    "end": "1908519"
  },
  {
    "text": "a switch by hash code hash code is cach it hash code is frequently called method G optimize it Etc it's very efficient to",
    "start": "1908519",
    "end": "1915679"
  },
  {
    "text": "First Call a hash Cod do a switch by hash code and with a high probability",
    "start": "1915679",
    "end": "1921639"
  },
  {
    "text": "we're going to already be in the case that we know which string it is it",
    "start": "1921639",
    "end": "1928960"
  },
  {
    "text": "is it is highly unlikely that multiple strings do have the same hash cut but",
    "start": "1928960",
    "end": "1935000"
  },
  {
    "text": "this can happen and this is exactly what happened in this case so we need to do",
    "start": "1935000",
    "end": "1940279"
  },
  {
    "text": "couple of uh comparisons to know which string it is",
    "start": "1940279",
    "end": "1947039"
  },
  {
    "text": "and it help that in this case of a and BBB the hash Cod is exactly the same so",
    "start": "1947039",
    "end": "1952799"
  },
  {
    "text": "we need to do a few more comparisons and we need here is a final switch we now for sure know which case it is so we can",
    "start": "1952799",
    "end": "1960039"
  },
  {
    "text": "jump to it here is case a here is B and default again we need to implement the",
    "start": "1960039",
    "end": "1966679"
  },
  {
    "text": "filter without the filter people would wonder why there is so many branches I",
    "start": "1966679",
    "end": "1972399"
  },
  {
    "text": "have just three cases but I got I don't remember how many I got nine branches",
    "start": "1972399",
    "end": "1979519"
  },
  {
    "text": "out of just three well it's compiler artifact we have to write filter filter",
    "start": "1979519",
    "end": "1985399"
  },
  {
    "text": "it out so that users do not scream they had fre cases they got free",
    "start": "1985399",
    "end": "1992279"
  },
  {
    "text": "cases there is small Java 12 brought us switch Expressions Japs Jep",
    "start": "1992279",
    "end": "2001320"
  },
  {
    "text": "325 uh we can use this version or the version where it was finally stabilized",
    "start": "2001639",
    "end": "2007799"
  },
  {
    "text": "it's no more preview I use preview version so if we compile decompile here",
    "start": "2007799",
    "end": "2014120"
  },
  {
    "text": "is what we are going to see oops let me scroll back here switch expression we",
    "start": "2014120",
    "end": "2020159"
  },
  {
    "text": "have only two cases switch expressions are great because if the switch expression is exhaustive it covers all",
    "start": "2020159",
    "end": "2029000"
  },
  {
    "text": "the cases in this case it covers all the possible values of Y we don't need to",
    "start": "2029000",
    "end": "2034720"
  },
  {
    "text": "write any more the default just two cases oops what do we see in the bite",
    "start": "2034720",
    "end": "2040159"
  },
  {
    "text": "cod in the bite Cod we still have three cases why so well because in the bite",
    "start": "2040159",
    "end": "2046720"
  },
  {
    "text": "Cod again there is split compilation maybe somebody recompiled yum uh separately from this switch so this",
    "start": "2046720",
    "end": "2054638"
  },
  {
    "text": "piece of cod will receive a third a new value of Unum that was not",
    "start": "2054639",
    "end": "2063398"
  },
  {
    "text": "there during the compilation and this code shouldn't just crash the gvm it's still still should produce some some",
    "start": "2063399",
    "end": "2070000"
  },
  {
    "text": "Behavior some sane Behavior and the San behavior in this case well throw an exception and this exception was uh",
    "start": "2070000",
    "end": "2077520"
  },
  {
    "text": "incompatible class change ER back at time when this previe feature appeared now it throws I think match",
    "start": "2077520",
    "end": "2085079"
  },
  {
    "text": "exception it was aligned with P pattern match and kind",
    "start": "2085079",
    "end": "2090520"
  },
  {
    "text": "switches so we are getting closer to pattern matching here is a pattern matching it first appears appeared as a",
    "start": "2090520",
    "end": "2097320"
  },
  {
    "text": "pattern matching for instance of now we can write things like this if something is an instance of some type then here is",
    "start": "2097320",
    "end": "2104440"
  },
  {
    "text": "a variable and later in the scope we can use this variable again if we compile",
    "start": "2104440",
    "end": "2110200"
  },
  {
    "text": "this at the time it was first introduced as a preview feature here is what we're going to see it was Java for preview",
    "start": "2110200",
    "end": "2117599"
  },
  {
    "text": "preview denotes in the bite cod as a minor version 65,000 here is our method example and in",
    "start": "2117599",
    "end": "2126200"
  },
  {
    "text": "it here is one one condition we expected to be one condition we had only one",
    "start": "2126200",
    "end": "2132000"
  },
  {
    "text": "if here is another condition we had only one if why two conditions turns out that",
    "start": "2132000",
    "end": "2139400"
  },
  {
    "text": "uh developers of java compiler decided that this feature can be implemented as a synic sugar as a pure translation of",
    "start": "2139400",
    "end": "2147839"
  },
  {
    "text": "one source code to the other source code and this is a pure equivalent of uh uh",
    "start": "2147839",
    "end": "2154000"
  },
  {
    "text": "how you can write if pattern matching if you didn't have",
    "start": "2154000",
    "end": "2159319"
  },
  {
    "text": "it you can declare the variable and you can just use such a strange fake assignment uh inside of an if and",
    "start": "2159319",
    "end": "2168119"
  },
  {
    "text": "comparison with itself which does basically nothing which is a dead code these compiles produces the same",
    "start": "2168119",
    "end": "2175319"
  },
  {
    "text": "result as we've just seen that's exactly what they did uh this is not nice uh we",
    "start": "2175319",
    "end": "2182079"
  },
  {
    "text": "saw some other bite cot analyzers tools like f bus spot bugs they also complained that there is a code so it",
    "start": "2182079",
    "end": "2188520"
  },
  {
    "text": "got reported and well it got fixed and if you take Java 16 where this feature",
    "start": "2188520",
    "end": "2194040"
  },
  {
    "text": "was finalized we compile it we see it's Java 16 same example only one",
    "start": "2194040",
    "end": "2200079"
  },
  {
    "text": "condition that's nice that's wonderful unfortunately with this we",
    "start": "2200079",
    "end": "2205160"
  },
  {
    "text": "cannot do anything we even didn't buzzer it to write a filter it's quite hard to write filter here",
    "start": "2205160",
    "end": "2211720"
  },
  {
    "text": "because well it's hard um pattern matching for switch",
    "start": "2211720",
    "end": "2219440"
  },
  {
    "text": "let's have a look at this Beast uh well there is many cases we can",
    "start": "2219440",
    "end": "2224920"
  },
  {
    "text": "match by type we can also add some conditions and so on if you look at this",
    "start": "2224920",
    "end": "2231079"
  },
  {
    "text": "it's quite big here is a switch here is a condition of the first",
    "start": "2231079",
    "end": "2238000"
  },
  {
    "text": "case Body of the case if there is no much we are just jumping to the",
    "start": "2238000",
    "end": "2244160"
  },
  {
    "text": "beginning of this switch and the way it is implemented it it is again using invoke Dynamic instruction which was",
    "start": "2244160",
    "end": "2250640"
  },
  {
    "text": "used for lambdas in order to restart the same switch but from the next condition",
    "start": "2250640",
    "end": "2257000"
  },
  {
    "text": "so that's how it can go over all the conditions here is inok dynamic",
    "start": "2257000",
    "end": "2263280"
  },
  {
    "text": "bootstrap method that that links all these together and here is the most interesting part in this story line",
    "start": "2263280",
    "end": "2269880"
  },
  {
    "text": "number table the line number table that is used by Ja code to map this bite code",
    "start": "2269880",
    "end": "2275240"
  },
  {
    "text": "back to the source code if it's St on it like this we wouldn't notice anything it",
    "start": "2275240",
    "end": "2280400"
  },
  {
    "text": "looks correct and that's probably was the case for developers of java compilers they look at it it seems",
    "start": "2280400",
    "end": "2286240"
  },
  {
    "text": "correct all fine but if we if we take a Joko or a debugger and we'll try to use",
    "start": "2286240",
    "end": "2293480"
  },
  {
    "text": "this line number table to jump line by line it will show us surprising results",
    "start": "2293480",
    "end": "2299200"
  },
  {
    "text": "we've been seeing a strange lines appearing on the screen and highlighted as the ones we do not expect to see that",
    "start": "2299200",
    "end": "2306560"
  },
  {
    "text": "was a back in the mentation we code it quite early even before the feature was",
    "start": "2306560",
    "end": "2312000"
  },
  {
    "text": "merged to the master we commented on the pool request and it got fix it line numbers are",
    "start": "2312000",
    "end": "2318319"
  },
  {
    "text": "correct and here is finally we come to finally another wonderful Construction",
    "start": "2318319",
    "end": "2324839"
  },
  {
    "text": "in Java language appeared many many many years ago I don't even remember when probably since the beginning a finally",
    "start": "2324839",
    "end": "2332480"
  },
  {
    "text": "we have a body of a try and in the finally uh we have a body of a final",
    "start": "2332480",
    "end": "2338000"
  },
  {
    "text": "pretty simple if you compile it if you de comp ah notice that here we have in",
    "start": "2338000",
    "end": "2345319"
  },
  {
    "text": "the body call of a metod knob in the body of a finally we also",
    "start": "2345319",
    "end": "2350640"
  },
  {
    "text": "have a call of a metod knob just two calls right if you compile it decompile",
    "start": "2350640",
    "end": "2356240"
  },
  {
    "text": "here is what we're going to see we see three method invocations of method knob there was only two right let let's",
    "start": "2356240",
    "end": "2363760"
  },
  {
    "text": "count again or three how many knobs do you see here I do see free so it's right we should",
    "start": "2363760",
    "end": "2371480"
  },
  {
    "text": "see free no the third one is a method declaration don't let it fool you so to",
    "start": "2371480",
    "end": "2377599"
  },
  {
    "text": "help you investigate a little bit let's let's add some marker to the method and",
    "start": "2377599",
    "end": "2382960"
  },
  {
    "text": "Let's do let's pass two different strings one in the body and in the body",
    "start": "2382960",
    "end": "2388000"
  },
  {
    "text": "of a try another in the finally try and finally let's compile this thing and",
    "start": "2388000",
    "end": "2393680"
  },
  {
    "text": "what we're going to see what's different what Chang it let me highlighted we have one try and two",
    "start": "2393680",
    "end": "2400920"
  },
  {
    "text": "finally why so well you all should know that finally",
    "start": "2400920",
    "end": "2408240"
  },
  {
    "text": "block should be executed no matter what if there was exception in the body we should execute finally if there was no",
    "start": "2408240",
    "end": "2414359"
  },
  {
    "text": "exception there should be finally again and that's how it it is",
    "start": "2414359",
    "end": "2419839"
  },
  {
    "text": "implemented uh if we look closely there is exception table and exception table",
    "start": "2419839",
    "end": "2425599"
  },
  {
    "text": "says well in case of an exception we should jump to this instruction there is no try finally in the bite code in the",
    "start": "2425599",
    "end": "2432760"
  },
  {
    "text": "bite code There Is Only Exception table which says from this instruction to this instruction if happens exception then go",
    "start": "2432760",
    "end": "2439280"
  },
  {
    "text": "to this instruction and the only way then to implement try finally is to have",
    "start": "2439280",
    "end": "2445680"
  },
  {
    "text": "exception Handler and in case of absence of exception to have exactly the same cod",
    "start": "2445680",
    "end": "2452240"
  },
  {
    "text": "as an exception Handler we need to do the duplication and",
    "start": "2452240",
    "end": "2457880"
  },
  {
    "text": "well again people surprised that when they write finally they have uh too many",
    "start": "2457880",
    "end": "2464800"
  },
  {
    "text": "codes they have to test both possibilities of exception and no exception what they wri in finally might",
    "start": "2464800",
    "end": "2470560"
  },
  {
    "text": "have some conditions this condition never uh can be triggered on one of the pth so they have a lot of branches half",
    "start": "2470560",
    "end": "2478319"
  },
  {
    "text": "of those branches cannot be covered etc etc so what do we need to do in this",
    "start": "2478319",
    "end": "2483400"
  },
  {
    "text": "case not just ignore some part of the code but actually merge all duplicates together and provide you a combined code",
    "start": "2483400",
    "end": "2491720"
  },
  {
    "text": "coverage raer that looks better and looking at this example you might uh",
    "start": "2491720",
    "end": "2496920"
  },
  {
    "text": "actually try a nice trick when you go back home how many try finally you can",
    "start": "2496920",
    "end": "2502520"
  },
  {
    "text": "Nest into each other because it's duplicates it exponentially explodes and",
    "start": "2502520",
    "end": "2509200"
  },
  {
    "text": "very quickly you should probably reach not probably you will reach the gvm",
    "start": "2509200",
    "end": "2514560"
  },
  {
    "text": "limit on a size of a method you don't need to go for far and this is probably example of why you shouldn't Nest uh Tri",
    "start": "2514560",
    "end": "2522839"
  },
  {
    "text": "finally into Tri finally there is of course other reasons if you do a little bit of",
    "start": "2522839",
    "end": "2528839"
  },
  {
    "text": "archaeology if you look at the very ancient Java version 1.4 major version",
    "start": "2528839",
    "end": "2535800"
  },
  {
    "text": "48 here is what we can see in it what's",
    "start": "2535800",
    "end": "2541000"
  },
  {
    "text": "different do you spot it there is just one finally a curently",
    "start": "2541000",
    "end": "2548240"
  },
  {
    "text": "before it was possible to implement the same thing without code duplication here",
    "start": "2548240",
    "end": "2554400"
  },
  {
    "text": "is exception hler this exception Handler uses a special uh bite code instruction",
    "start": "2554400",
    "end": "2561040"
  },
  {
    "text": "GSR soal it Java sub routine a long long time ago it was possible to have",
    "start": "2561040",
    "end": "2567599"
  },
  {
    "text": "functions inside of functions in Java code sub",
    "start": "2567599",
    "end": "2572920"
  },
  {
    "text": "rutins unfortunately yes and the pair of this inst instuction is a red",
    "start": "2572920",
    "end": "2578119"
  },
  {
    "text": "instruction which does the return from the sub routine so there was wonderful PIR gser and threat which novad days is",
    "start": "2578119",
    "end": "2585160"
  },
  {
    "text": "deprecated and not allow it in the in the modern class files why this happens",
    "start": "2585160",
    "end": "2591400"
  },
  {
    "text": "if you want to know more about this uh I advise you to look uh for some talks",
    "start": "2591400",
    "end": "2597160"
  },
  {
    "text": "about bite code verification apparently GSR and threat is hard for bite Cod verification bite code verification is",
    "start": "2597160",
    "end": "2603760"
  },
  {
    "text": "important for security so they had to get get R of this feature in favor of",
    "start": "2603760",
    "end": "2608960"
  },
  {
    "text": "security and there is a wonderful talk of my friend uh explaining",
    "start": "2608960",
    "end": "2615520"
  },
  {
    "text": "why but let's move on and I hope now you really really worm it we're really close",
    "start": "2615520",
    "end": "2622240"
  },
  {
    "text": "to the end and uh this is the most complex example I think I have for today",
    "start": "2622240",
    "end": "2628200"
  },
  {
    "text": "so let's enjoy try Vis resources when did it appear it do you",
    "start": "2628200",
    "end": "2634880"
  },
  {
    "text": "remember a long time ago right we don't even",
    "start": "2634880",
    "end": "2640960"
  },
  {
    "text": "remember when it appeared it's not even my favorite Java version it appeared a",
    "start": "2640960",
    "end": "2646240"
  },
  {
    "text": "little bit before it appeared in Java 7 this was one of the greatest feature of java 7 TR resources is great uh we can",
    "start": "2646240",
    "end": "2655160"
  },
  {
    "text": "have a resource which implements closable interface which has a method close and uh we can write a try using uh",
    "start": "2655160",
    "end": "2663119"
  },
  {
    "text": "this resource and we get a guarantee that resource is going to be Clos at one this try completes right that's the",
    "start": "2663119",
    "end": "2671480"
  },
  {
    "text": "feature if you compile this and decompile here is what we're going to see it's it's quite quite quite big if",
    "start": "2671480",
    "end": "2678359"
  },
  {
    "text": "you zoom in a little bit it's still big let me zoom in a little bit more here is",
    "start": "2678359",
    "end": "2683480"
  },
  {
    "text": "what we're going to see inside we're going to see four times method close is code why",
    "start": "2683480",
    "end": "2693040"
  },
  {
    "text": "so well super easy from Tri resources we get a guarantee is that no matter what",
    "start": "2693040",
    "end": "2698440"
  },
  {
    "text": "resource should be Clos it in order to close resource let's close it four times to be sure right that's how it usually",
    "start": "2698440",
    "end": "2704760"
  },
  {
    "text": "works no of course not well there is some null checks inside so probably some",
    "start": "2704760",
    "end": "2709880"
  },
  {
    "text": "logic happens here but I'm not going to buzer you looking on the bite code let's look at the our Bible at the Java",
    "start": "2709880",
    "end": "2718000"
  },
  {
    "text": "language specification Java language specification simply says the meaning of a basic Tri resource statement is given",
    "start": "2718000",
    "end": "2724440"
  },
  {
    "text": "by the following translation t and a tri cage final statement in other",
    "start": "2724440",
    "end": "2730359"
  },
  {
    "text": "words TR with resources is equivalent to the following Tri cage statement it's a",
    "start": "2730359",
    "end": "2736240"
  },
  {
    "text": "little bit big right let's dig in and at",
    "start": "2736240",
    "end": "2741640"
  },
  {
    "text": "this moment in time you might say well is it really equivalent can you prove it",
    "start": "2741640",
    "end": "2747640"
  },
  {
    "start": "2745000",
    "end": "2996000"
  },
  {
    "text": "um I think I can prove it let's try so what do we have here I have",
    "start": "2747640",
    "end": "2755520"
  },
  {
    "text": "example which contains TR user sources the ones that you've just seen and in another source file I have",
    "start": "2755520",
    "end": "2764760"
  },
  {
    "text": "TR cage finally exactly as you've seen on the other slide if I compile fun",
    "start": "2764760",
    "end": "2773680"
  },
  {
    "text": "one and um fun one and decompile it and safe",
    "start": "2773680",
    "end": "2779760"
  },
  {
    "text": "result of decompilation in 1 txt and if I do exactly the same with fun",
    "start": "2779760",
    "end": "2785520"
  },
  {
    "text": "to and say result of the compilation in 2 txt and if I do a diff between",
    "start": "2785520",
    "end": "2793240"
  },
  {
    "text": "two here's what I'm going to see there is of course some changes because line",
    "start": "2793240",
    "end": "2798680"
  },
  {
    "text": "numbers do not match but that's it only line numbers Chang it there is no other",
    "start": "2798680",
    "end": "2804960"
  },
  {
    "text": "changes in the bite code all the conditions are the same only line numbers are different so back to this",
    "start": "2804960",
    "end": "2812680"
  },
  {
    "text": "code compilation of this source code is a pure equivalent of comp ation of the",
    "start": "2812680",
    "end": "2817839"
  },
  {
    "text": "tri resources that's it what happens in it here is a try",
    "start": "2817839",
    "end": "2824000"
  },
  {
    "text": "catch if acception happen it we remember it here is the finally block the most complex one to implement without Tris",
    "start": "2824000",
    "end": "2831160"
  },
  {
    "text": "resources because in case of exception we have to handle the closing of the",
    "start": "2831160",
    "end": "2836680"
  },
  {
    "text": "resource uh and closing of the resource can throw exception itself so there is",
    "start": "2836680",
    "end": "2842119"
  },
  {
    "text": "an one TR cat um if there was no exception then we we need to close the",
    "start": "2842119",
    "end": "2848599"
  },
  {
    "text": "resource differently there there can be again exception but we don't need to attach it to the original so we just let",
    "start": "2848599",
    "end": "2855559"
  },
  {
    "text": "it Bubble Up and we just call a method close so already two calls of a method",
    "start": "2855559",
    "end": "2860720"
  },
  {
    "text": "close and well there is one more if generated which is null check what if",
    "start": "2860720",
    "end": "2867480"
  },
  {
    "text": "resources null but in this case it's a dead code compiler might infer it",
    "start": "2867480",
    "end": "2872520"
  },
  {
    "text": "because we use it a you uh resource cannot be null and this is also a dead code in case if",
    "start": "2872520",
    "end": "2879800"
  },
  {
    "text": "exception happened we don't need this if we know that exception happened so there is quite some addad",
    "start": "2879800",
    "end": "2887280"
  },
  {
    "text": "code we reported this back to the developers of java compiler and in in Java version eight they they improved",
    "start": "2887280",
    "end": "2894040"
  },
  {
    "text": "the situation there was four cases now there is just two cases to check and it",
    "start": "2894040",
    "end": "2900800"
  },
  {
    "text": "continued later on if you use Java compiler 11 we still can compile for compatibility with Java 8 but we are",
    "start": "2900800",
    "end": "2907040"
  },
  {
    "text": "going to get a different result instead of two ifs we have we now have zero ifs",
    "start": "2907040",
    "end": "2914119"
  },
  {
    "text": "it's possible to implement exactly the same thing without the SS if we use slightly different translation strategy",
    "start": "2914119",
    "end": "2921880"
  },
  {
    "text": "again what this means for B cot analyzis tool it means that we need to implement now not just a filter for original Tri",
    "start": "2921880",
    "end": "2928920"
  },
  {
    "text": "resources but for all of its variations for all of those improvements and that's",
    "start": "2928920",
    "end": "2933960"
  },
  {
    "text": "what we do and part looks great it doesn't show any branches Etc and at",
    "start": "2933960",
    "end": "2941040"
  },
  {
    "text": "this moment in time you might wonder how we do this because I just showed you two Source codes that compile into the same",
    "start": "2941040",
    "end": "2948200"
  },
  {
    "text": "bite Cod how do we choose which one it is when it is Trier sources generated by",
    "start": "2948200",
    "end": "2955000"
  },
  {
    "text": "the compiler or a tri viser sources written by hand using K TR",
    "start": "2955000",
    "end": "2962000"
  },
  {
    "text": "catch and the honest answer well we don't choose",
    "start": "2962000",
    "end": "2967319"
  },
  {
    "text": "if you would give to the jaoko try cage which I just showed to you jako would",
    "start": "2967319",
    "end": "2973839"
  },
  {
    "text": "believe that you wrot a Tris resources and it will filter it out so you would",
    "start": "2973839",
    "end": "2979119"
  },
  {
    "text": "see empty lines there that's kind of makes sense but it's a little bit surprising hopefully",
    "start": "2979119",
    "end": "2985760"
  },
  {
    "text": "nobody writes TR Resources by hand with try cage so nobody would ever notice",
    "start": "2985760",
    "end": "2991440"
  },
  {
    "text": "this now only you know don't share this um and here we can come to conclusion I",
    "start": "2991440",
    "end": "2997799"
  },
  {
    "start": "2996000",
    "end": "3172000"
  },
  {
    "text": "hope I didn't run out of time uh conclusion is as you've seen source code is not a",
    "start": "2997799",
    "end": "3005200"
  },
  {
    "text": "bite code be careful with this what you write in your source code is not at all",
    "start": "3005200",
    "end": "3011240"
  },
  {
    "text": "what is going to be executed there can be bugs there can be dragons in what is",
    "start": "3011240",
    "end": "3017160"
  },
  {
    "text": "going to be executed is bite code right no even this is not true you know",
    "start": "3017160",
    "end": "3024359"
  },
  {
    "text": "there is justtin time compiler Justin Time compil is going to take the bite Cod Smash It uh work on it and produce a",
    "start": "3024359",
    "end": "3031799"
  },
  {
    "text": "native code so again there can be back there can be dragons Etc be careful with it what you write in the source code is",
    "start": "3031799",
    "end": "3038839"
  },
  {
    "text": "not at all what is going to be executed bite code based tools have to",
    "start": "3038839",
    "end": "3045160"
  },
  {
    "text": "guess as you've just seen we have to do the wild guesses out of almost nowhere",
    "start": "3045160",
    "end": "3050880"
  },
  {
    "text": "what what you wrote In The Source Code so next time when you see something",
    "start": "3050880",
    "end": "3055920"
  },
  {
    "text": "strange what you you don't expect to see uh from the bite code based analyzis",
    "start": "3055920",
    "end": "3061000"
  },
  {
    "text": "tool please don't scream wow it doesn't work no maybe it works it just works on a different level on a different",
    "start": "3061000",
    "end": "3067839"
  },
  {
    "text": "representation so please bear with us developers have to put up with this we",
    "start": "3067839",
    "end": "3074680"
  },
  {
    "text": "have to live with this we developers of bite code based tools have to implement",
    "start": "3074680",
    "end": "3079839"
  },
  {
    "text": "some filters and so on and you users consumers other developers have to be",
    "start": "3079839",
    "end": "3087160"
  },
  {
    "text": "aware on what you're looking at and the next time when you find something strange in your cut coverage reports",
    "start": "3087160",
    "end": "3093760"
  },
  {
    "text": "please don't uh immediately scream wow wow there is a back maybe it's just a missed case and now you know how to",
    "start": "3093760",
    "end": "3100720"
  },
  {
    "text": "investigate it so you can look into the bite Cod and come back to us with already complet reproducer saying hey",
    "start": "3100720",
    "end": "3107480"
  },
  {
    "text": "look which wonderful thing I found in a bite cut how nice it is could you please",
    "start": "3107480",
    "end": "3112640"
  },
  {
    "text": "Implement filter for it or maybe not and the last thing which I'd like to say",
    "start": "3112640",
    "end": "3121359"
  },
  {
    "text": "to you today",
    "start": "3121359",
    "end": "3124519"
  },
  {
    "text": "um open source developers like me or many others we daily or let's say",
    "start": "3126640",
    "end": "3134319"
  },
  {
    "text": "nightly face with reports like something doesn't work and we R really here when",
    "start": "3134319",
    "end": "3142000"
  },
  {
    "text": "something is great when something works for you and when you like the to",
    "start": "3142000",
    "end": "3147280"
  },
  {
    "text": "so if you have a time in your life please go to the tools",
    "start": "3147280",
    "end": "3154319"
  },
  {
    "text": "op Source tools that you like and tell to their developers how much you like",
    "start": "3154319",
    "end": "3159680"
  },
  {
    "text": "their tool that it helps you or it works great for you or something else this is",
    "start": "3159680",
    "end": "3166400"
  },
  {
    "text": "really nice this is exactly why we work without being paid so don't forget to do",
    "start": "3166400",
    "end": "3173119"
  },
  {
    "start": "3172000",
    "end": "3192000"
  },
  {
    "text": "this and I hope you enjoyed this session [Applause]",
    "start": "3173119",
    "end": "3182669"
  }
]