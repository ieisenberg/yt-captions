[
  {
    "start": "0",
    "end": "216000"
  },
  {
    "text": "[Music]",
    "start": "940",
    "end": "7780"
  },
  {
    "text": "as far talk is typescript versus kotlin JS and we love both kotlin and",
    "start": "11400",
    "end": "16859"
  },
  {
    "text": "typescript so this is a bit like choosing which child you love the most um",
    "start": "16859",
    "end": "22619"
  },
  {
    "text": "so who am I uh my name's Evan Boyle I work for a company called gear set I'm",
    "start": "22619",
    "end": "28019"
  },
  {
    "text": "the development manager of our Belfast office and gearshad our devops solution",
    "start": "28019",
    "end": "33660"
  },
  {
    "text": "provider for Salesforce platform and this is a a role I've just moved into for a few months prior to that I worked",
    "start": "33660",
    "end": "41579"
  },
  {
    "text": "with Garth yes so my name is Garth Gilmore I work for a company called instill in Belfast",
    "start": "41579",
    "end": "47100"
  },
  {
    "text": "for Eamon used to work and is now he left us damn it it's okay it's okay it's fine",
    "start": "47100",
    "end": "52620"
  },
  {
    "text": "um so yes so uh instill our software development and uh consultancy company so uh we build systems uh we have",
    "start": "52620",
    "end": "60539"
  },
  {
    "text": "full-time developers working on projects but we also have a consultancy and training department and uh that's the",
    "start": "60539",
    "end": "67260"
  },
  {
    "text": "part that I run cool nice growth so as I said we we really love",
    "start": "67260",
    "end": "74040"
  },
  {
    "text": "typescript and typescript to me is good engineering um in our industry there's way too much",
    "start": "74040",
    "end": "80700"
  },
  {
    "text": "waste we're constantly Reinventing the wheel um not always necessarily solving a",
    "start": "80700",
    "end": "85799"
  },
  {
    "text": "problem just trying to do it a different way or going for something new and shiny or adding a very minimal amount of",
    "start": "85799",
    "end": "92180"
  },
  {
    "text": "additional functionality typescript solves the problem of lack of types in",
    "start": "92180",
    "end": "99360"
  },
  {
    "text": "JavaScript which is a real problem Dynamic language is generally have worse tooling or static analysis and for me on",
    "start": "99360",
    "end": "106740"
  },
  {
    "text": "Garth we're always going to want to use statically typed languages and typescript brings statically typed languages to the JavaScript ecosystem",
    "start": "106740",
    "end": "113880"
  },
  {
    "text": "and but it does it by adding a small amount on top of JavaScript it doesn't throw away the effort of the 13 million",
    "start": "113880",
    "end": "121079"
  },
  {
    "text": "JavaScript developers right there it doesn't throw away the effort of two million npm packages that are there they",
    "start": "121079",
    "end": "127020"
  },
  {
    "text": "say okay let's realize that this world exists and let's build on top of it so for me it's really good engineering it",
    "start": "127020",
    "end": "133020"
  },
  {
    "text": "brings me the static typing that I love and the interop solution for JavaScript is just superb",
    "start": "133020",
    "end": "139020"
  },
  {
    "text": "kotlin is very very similar so for me coming from historically C plus plus and",
    "start": "139020",
    "end": "145080"
  },
  {
    "text": "then C sharp and really really liking c sharpen.net as a as a platform as a language",
    "start": "145080",
    "end": "150660"
  },
  {
    "text": "coming to the Java virtual machine I sort of Saw Java as a bit of a problem I didn't really like the language and",
    "start": "150660",
    "end": "156900"
  },
  {
    "text": "kotlin for me solves that problem kotlin has all the features that you want in a modern language it allows you to write",
    "start": "156900",
    "end": "162180"
  },
  {
    "text": "clear CF succinct code but again it didn't say okay let's just reinvent the",
    "start": "162180",
    "end": "168120"
  },
  {
    "text": "wheel and start from scratch they you know are the interop solution with Java is really good we can leverage all the",
    "start": "168120",
    "end": "174239"
  },
  {
    "text": "Java libraries there's really good wrappers around the key things that you want so for me again kotlin is like super super good engineering so both of",
    "start": "174239",
    "end": "181920"
  },
  {
    "text": "these we really like both of these are what we choose when they sort of make sense in the context of what we're",
    "start": "181920",
    "end": "187080"
  },
  {
    "text": "building and we see them as improvements on what's there but kotlin wants to be everywhere kotlin wants to own all the",
    "start": "187080",
    "end": "194819"
  },
  {
    "text": "things so now we can take kotlin and we can Target it for Android we can Target it for the jvm which is where it started",
    "start": "194819",
    "end": "200900"
  },
  {
    "text": "and we can now do it native as a bit of a switch a swift replacement and what we're talking about here kotlin JS so",
    "start": "200900",
    "end": "208440"
  },
  {
    "text": "for me kotlin Js is interesting because the language is so nice but then I also",
    "start": "208440",
    "end": "214140"
  },
  {
    "text": "have this really good solution which is typescript so we wanted to see how these things compare and we've done this a few",
    "start": "214140",
    "end": "219599"
  },
  {
    "start": "216000",
    "end": "583000"
  },
  {
    "text": "times now we've looked at it we've done a couple of projects in this we're not in in all openness we're not using this",
    "start": "219599",
    "end": "225299"
  },
  {
    "text": "on on real projects that like earn US money uh everything's been through workshops labs and various different",
    "start": "225299",
    "end": "231720"
  },
  {
    "text": "things and towards the end you'll maybe see why that is the case well we're building projects we're using the",
    "start": "231720",
    "end": "237840"
  },
  {
    "text": "standard things that you want to do when you're working in the space we're using things like react and Redux doing rest",
    "start": "237840",
    "end": "243299"
  },
  {
    "text": "building forms all these kinds of things and then looking at what the tooling experience was like what the language is",
    "start": "243299",
    "end": "248340"
  },
  {
    "text": "is like what the interrupt is like I'm just trying to figure out okay is this worth doing so we had to start by",
    "start": "248340",
    "end": "254340"
  },
  {
    "text": "creating some kotlin.js projects Garth very good thank you so if you go into IntelliJ it will give you a really nice",
    "start": "254340",
    "end": "261780"
  },
  {
    "text": "wizard for getting started with kotlin JS which is built on top of Gradle so",
    "start": "261780",
    "end": "267180"
  },
  {
    "text": "you can stick with the the build system that you know and love if you're coming from kotlin on the jvm and yet as we'll",
    "start": "267180",
    "end": "274620"
  },
  {
    "text": "see in a second it's still very easy to integrate in uh npm packages so this is",
    "start": "274620",
    "end": "280800"
  },
  {
    "text": "the wizard that you'll be confronted with it's changed a little bit recently so this might be new to you even if",
    "start": "280800",
    "end": "286620"
  },
  {
    "text": "you've done it before on the left hand side you want to go for kotlin multi-platform and then you get various",
    "start": "286620",
    "end": "293160"
  },
  {
    "text": "choices on the right hand side so you see there underneath kotlin JS we could go for kotlin JS running in the browser",
    "start": "293160",
    "end": "300600"
  },
  {
    "text": "with no extra libraries so you would just be using the low level document object and Dom API that kind of thing or",
    "start": "300600",
    "end": "308160"
  },
  {
    "text": "we could do this on the server through node.js but for all the code that we're going to show you in this presentation",
    "start": "308160",
    "end": "314100"
  },
  {
    "text": "we went for react application so we're we're choosing to create a a react-based",
    "start": "314100",
    "end": "320580"
  },
  {
    "text": "user interface that will run with kotlin.js inside the browser and for the",
    "start": "320580",
    "end": "327120"
  },
  {
    "text": "DSL you can go for The Groovy based version of griddle or the kotlin one of",
    "start": "327120",
    "end": "332160"
  },
  {
    "text": "course we go for the uh the kotlin one and then there's this little follow-on menu here that will uh allow you to",
    "start": "332160",
    "end": "339419"
  },
  {
    "text": "specify extra bits of react or choose the more modern compiler so at the",
    "start": "339419",
    "end": "344580"
  },
  {
    "text": "moment uh all of the kotlin compilers are being harmonized together so they uh",
    "start": "344580",
    "end": "350340"
  },
  {
    "text": "they all agree in a format called IR but that's still a little bit new for us at the minute so we didn't want to build",
    "start": "350340",
    "end": "356400"
  },
  {
    "text": "the demo around that it's just a just a little bit too new so um if we were doing uh kotlin Native",
    "start": "356400",
    "end": "363600"
  },
  {
    "text": "then it would build some kind of executable if we were doing kotlin Java we'd build some kind of Jar because",
    "start": "363600",
    "end": "369419"
  },
  {
    "text": "we're doing kotlin JS it's just going to build us a big bundle of JavaScript uh through the miracle of webpack",
    "start": "369419",
    "end": "376580"
  },
  {
    "text": "and uh the good news is that they've broken up the documentation very well so",
    "start": "376580",
    "end": "382800"
  },
  {
    "text": "when it comes to the kotlin libraries certainly libraries are only available on Native certain libraries are only",
    "start": "382800",
    "end": "388560"
  },
  {
    "text": "available in Java because they're based on top of jvm libraries and so on but as",
    "start": "388560",
    "end": "393600"
  },
  {
    "text": "you can see in the documentation they give you breadcrumbs so you can immediately tell if a particular Library",
    "start": "393600",
    "end": "399300"
  },
  {
    "text": "will be available in kotlin.js so that's a that's good to see and as I say",
    "start": "399300",
    "end": "404699"
  },
  {
    "text": "everything's based through Gradle so uh it is a regular Gradle file that you get confronted with uh you still have",
    "start": "404699",
    "end": "411300"
  },
  {
    "text": "standard plugins like the plugin for serialization but this time as you can see there it's the kotlin JS compiler",
    "start": "411300",
    "end": "417900"
  },
  {
    "text": "that we're going to be using and then uh down the bottom of the file there's going to be a little bit of",
    "start": "417900",
    "end": "423539"
  },
  {
    "text": "configuration for precisely how we want to uh to use it again they've harmonized and they've come up with that a new",
    "start": "423539",
    "end": "430319"
  },
  {
    "text": "Universal backend for the compiler and so on but we're just going to stick with the Legacy compiler for now",
    "start": "430319",
    "end": "437660"
  },
  {
    "text": "and you get these targets here so if you double click for example on browser run",
    "start": "437660",
    "end": "442979"
  },
  {
    "text": "or browser development run then everything will get built uh will get deployed it will pop up a browser window",
    "start": "442979",
    "end": "449220"
  },
  {
    "text": "and you'll be able to see your web app up and running so that's uh that's all cool",
    "start": "449220",
    "end": "454919"
  },
  {
    "text": "and then looking at the dependency section inside the build file you can see the first set of dependencies there",
    "start": "454919",
    "end": "461400"
  },
  {
    "text": "these are pre-built wrappers around existing libraries so uh you get given",
    "start": "461400",
    "end": "466440"
  },
  {
    "text": "for free at kotlin.js wrappers around the uh the existing react functionality",
    "start": "466440",
    "end": "471740"
  },
  {
    "text": "for most other things though uh you'll have to bring them in uh directly so you",
    "start": "471740",
    "end": "477120"
  },
  {
    "text": "can do that using the npm function so you see here we're bringing in bootstrap so any existing JavaScript library you",
    "start": "477120",
    "end": "485099"
  },
  {
    "text": "can bring it in yourself like that but again for convenience you might want to wrap it up with some helper classes",
    "start": "485099",
    "end": "492440"
  },
  {
    "text": "and this is how everything starts yeah so good old main method uh nothing scary",
    "start": "492440",
    "end": "497759"
  },
  {
    "text": "about that you can see down the bottom we're creating an app object so uh our",
    "start": "497759",
    "end": "502919"
  },
  {
    "text": "main type in these demos is going to be called app and then we want the output of that application to render inside the",
    "start": "502919",
    "end": "509699"
  },
  {
    "text": "browser and the low level details of how we do that well as with regular",
    "start": "509699",
    "end": "514860"
  },
  {
    "text": "JavaScript we've got the document object so uh we can go ahead and we can create",
    "start": "514860",
    "end": "520080"
  },
  {
    "text": "a good old div and then we can just add that into the body so you can see it's good a standard Dom programming there so",
    "start": "520080",
    "end": "527820"
  },
  {
    "text": "uh nothing scary if you've ever done hello world and JavaScript and whenever it comes to writing react",
    "start": "527820",
    "end": "535260"
  },
  {
    "text": "components well this is what we'll be showing you in a lot more detail as we go along okay but suffice to say it is",
    "start": "535260",
    "end": "542399"
  },
  {
    "text": "very easy to create a react component in kotlin.js but we'll dig into this in a",
    "start": "542399",
    "end": "547560"
  },
  {
    "text": "lot more detail as we go yeah cheers so",
    "start": "547560",
    "end": "554160"
  },
  {
    "text": "as as I've done more and more Development I've sort of come to the realization that one of the biggest",
    "start": "554760",
    "end": "559800"
  },
  {
    "text": "factors in terms of getting success is the community that you're getting exposed to and working with so you want",
    "start": "559800",
    "end": "566160"
  },
  {
    "text": "to have really good documentation you want to have all the answers on stack Overflow you want to have all the bugs",
    "start": "566160",
    "end": "571620"
  },
  {
    "text": "ironed out by other teams and by other people so you have to reach a critical mass in terms of adoption before it's",
    "start": "571620",
    "end": "578339"
  },
  {
    "text": "going to be easy for you so you can be an early adopter but you're going to be fighting and whenever your Revenue depends on that then that can make you a",
    "start": "578339",
    "end": "585300"
  },
  {
    "start": "583000",
    "end": "683000"
  },
  {
    "text": "little bit reluctant so we're going to look at Community as round one in terms of our comparison",
    "start": "585300",
    "end": "590880"
  },
  {
    "text": "so kotlin as a language has you know uh continued to improve and go up various",
    "start": "590880",
    "end": "596760"
  },
  {
    "text": "different uh programming rankings again you've got to take these things with a pinch of salt like how do you how do you",
    "start": "596760",
    "end": "603120"
  },
  {
    "text": "sort of uh understand how popular it is is it by the number of questions and stack Overflow there's a number of",
    "start": "603120",
    "end": "609000"
  },
  {
    "text": "commits in GitHub but by most measures kotlin sort of continues to go up and up and up",
    "start": "609000",
    "end": "614459"
  },
  {
    "text": "um saying that in the JavaScript space typescript is by far and away the the",
    "start": "614459",
    "end": "622500"
  },
  {
    "text": "most popular alternative to JavaScript JavaScript by most measures is the most",
    "start": "622500",
    "end": "628019"
  },
  {
    "text": "popular programming languages and so for several years and many of the different rankings and it's number one",
    "start": "628019",
    "end": "635640"
  },
  {
    "text": "um and in that space the alternative to JavaScript typescript just dwarfs",
    "start": "635640",
    "end": "641820"
  },
  {
    "text": "everything else so typescript has got this massive Community it's already established in this space which means",
    "start": "641820",
    "end": "648240"
  },
  {
    "text": "that kotlin JS not Colin McCollum JS has this uphill bowel to overtake so in this",
    "start": "648240",
    "end": "654420"
  },
  {
    "text": "round typescript has to win it's just more popular as a language",
    "start": "654420",
    "end": "660000"
  },
  {
    "text": "it's more popular in the space and as a superset of JavaScript it means that a lot of the questions and documentation",
    "start": "660000",
    "end": "666540"
  },
  {
    "text": "issues that you you require are JavaScript documentations and JavaScript Solutions so whenever I'm programming",
    "start": "666540",
    "end": "673260"
  },
  {
    "text": "typescript a lot of times it's how do I solve this in JavaScript because that answer is immediately readily consumable",
    "start": "673260",
    "end": "679440"
  },
  {
    "text": "for me as a typescript programmer so what about interrupt with JavaScript",
    "start": "679440",
    "end": "685860"
  },
  {
    "start": "683000",
    "end": "928000"
  },
  {
    "text": "so what happens when I want to reuse the JavaScript assets that are out there as Garth said in the project file super",
    "start": "685860",
    "end": "692459"
  },
  {
    "text": "easy and you can mix and match with your normal kotlin dependencies near kotlin multi-platform uh libraries you can just",
    "start": "692459",
    "end": "699899"
  },
  {
    "text": "put in your npm dependencies so that's quite nice um there are a few wrappers",
    "start": "699899",
    "end": "705360"
  },
  {
    "text": "um these are really nice they're first class there are some libraries out there",
    "start": "705360",
    "end": "710459"
  },
  {
    "text": "as well which are are sort of written which you can immediately consume but most of the stuff right there in",
    "start": "710459",
    "end": "716940"
  },
  {
    "text": "terms of JavaScript space you're going to have to wrap up yourself so how do you do that it's actually super easy if",
    "start": "716940",
    "end": "722700"
  },
  {
    "text": "you're familiar with typescript definition files type definition files it's very similar to that you you're",
    "start": "722700",
    "end": "729360"
  },
  {
    "text": "importing the library and then you create a file like this which says okay in this Library there's these things",
    "start": "729360",
    "end": "734700"
  },
  {
    "text": "defined and this is the type definition if it was in kotlin so it's very very",
    "start": "734700",
    "end": "739740"
  },
  {
    "text": "easy to pull in any library and just stick in a wrapper but if the library is large or you're bringing in many",
    "start": "739740",
    "end": "744779"
  },
  {
    "text": "libraries then even though it's easy it's still a lot of work and if the library is changing then you're going to have to maintain that so there is still",
    "start": "744779",
    "end": "751200"
  },
  {
    "text": "some effort here but generally speaking it's it's a pretty good story um",
    "start": "751200",
    "end": "756300"
  },
  {
    "text": "you would expect there to be some sort of automatic generation for this there is to cat but it hasn't been developed",
    "start": "756300",
    "end": "762000"
  },
  {
    "text": "for a number of years um it still said to be experimental and",
    "start": "762000",
    "end": "767100"
  },
  {
    "text": "it's on hold until the things uh stabilize at the in the compiler level um and this does help somewhat you can",
    "start": "767100",
    "end": "775019"
  },
  {
    "text": "take a typescript definition file and then generate a kotlin definition file or or kotlin binding and for simple",
    "start": "775019",
    "end": "782160"
  },
  {
    "text": "cases it works really really well and the problem is whenever you start looking at more complicated flows and we",
    "start": "782160",
    "end": "789839"
  },
  {
    "text": "start seeing maybe some features of typescript that are maybe not readily supported in kotlin that the compile",
    "start": "789839",
    "end": "796320"
  },
  {
    "text": "that the tool will give up or will make a guess that's not very good so a lot of times you will have to come back in here",
    "start": "796320",
    "end": "802019"
  },
  {
    "text": "and modify these files if you went through automatic generation so you can use the cat to sort of start you off",
    "start": "802019",
    "end": "808500"
  },
  {
    "text": "here use it from the command line use it from the Gradle build instructions there's actually integration with the",
    "start": "808500",
    "end": "814920"
  },
  {
    "text": "standard build that'll always run it but you're probably going to have to go in and Patch this and and sort of edit this",
    "start": "814920",
    "end": "820019"
  },
  {
    "text": "uh manually and it's just because the languages aren't compatible but we'll",
    "start": "820019",
    "end": "825180"
  },
  {
    "text": "get into that a little bit more when we start looking at it within react other stuff around interrupt with",
    "start": "825180",
    "end": "831360"
  },
  {
    "text": "JavaScript there's some good Escape hatches like you might expect and so you can use the dynamic keyword here to or",
    "start": "831360",
    "end": "839100"
  },
  {
    "text": "the type here to allow yourself to have any kind of",
    "start": "839100",
    "end": "844500"
  },
  {
    "text": "object so this will this will allow you to um basically drop down to JavaScript and",
    "start": "844500",
    "end": "850680"
  },
  {
    "text": "have things that are untyped you can also create JavaScript objects like literals like we do in JavaScript and",
    "start": "850680",
    "end": "856320"
  },
  {
    "text": "typescript using JSO used to be JS object they're still changing things still evolving things",
    "start": "856320",
    "end": "861720"
  },
  {
    "text": "um but this allows us to to work in the same way as we would with JavaScript of just creating literals on the fly but",
    "start": "861720",
    "end": "867300"
  },
  {
    "text": "within the kotlin space it uses generics and everything's strongly statically typed so you will",
    "start": "867300",
    "end": "873660"
  },
  {
    "text": "get your autocomplete refactoring all of that good stuff that we like from statically type languages",
    "start": "873660",
    "end": "878760"
  },
  {
    "text": "uh and if you're really really stuck really really stuck and you can rate",
    "start": "878760",
    "end": "883800"
  },
  {
    "text": "JavaScript directly in there as strings but this is really a last resort yeah so that the goal is to avoid using any of",
    "start": "883800",
    "end": "890459"
  },
  {
    "text": "that yeah as much as possible uh or if you do do it put it inside a wrapper",
    "start": "890459",
    "end": "895560"
  },
  {
    "text": "inside a library so you never have to look at it again um so again in this round the interrupt",
    "start": "895560",
    "end": "902040"
  },
  {
    "text": "story again it's not really a fair contest here because typescript is a superset of JavaScript but in this Ryan",
    "start": "902040",
    "end": "908160"
  },
  {
    "text": "typescript's gonna have to win JavaScript is actually valid typescript you can take the typescript compiler",
    "start": "908160",
    "end": "913199"
  },
  {
    "text": "throw it at JavaScript and you know depending on your compiler settings it's just a really good static analysis engine and so it's not really a fair",
    "start": "913199",
    "end": "920040"
  },
  {
    "text": "contest but yeah kotlin JS the the wrapping is pretty good the project settings are pretty good but typescript",
    "start": "920040",
    "end": "926279"
  },
  {
    "text": "just Pips it at the post very good so uh turning now to have a",
    "start": "926279",
    "end": "931320"
  },
  {
    "start": "928000",
    "end": "1499000"
  },
  {
    "text": "look at the uh the generation of the HTML so obviously if you're going to be writing a UI in react uh dynamically",
    "start": "931320",
    "end": "938880"
  },
  {
    "text": "generating HTML is going to be your biggest job so the way this would be done in a traditional component would",
    "start": "938880",
    "end": "945120"
  },
  {
    "text": "just be like this so um here we're using typescript but all we have at the end of the day is a Lambda and inside that",
    "start": "945120",
    "end": "952380"
  },
  {
    "text": "Lambda we have some embedded markup so we're using a technology called jsx so for those of you who haven't done react",
    "start": "952380",
    "end": "958920"
  },
  {
    "text": "before um jsx just lets you embed markup directly inside your JavaScript code and",
    "start": "958920",
    "end": "965399"
  },
  {
    "text": "then in that markup you can embed JavaScript code using braces and in that you can embed tags and in that you can",
    "start": "965399",
    "end": "971760"
  },
  {
    "text": "embed braces you get the idea so it's very very convenient it's very very minimalist it's a really easy way to",
    "start": "971760",
    "end": "978720"
  },
  {
    "text": "dynamically generate your HTML so uh in the kotlin version uh you have",
    "start": "978720",
    "end": "984360"
  },
  {
    "text": "a DSL so there is a a domain-specific language that provides the same",
    "start": "984360",
    "end": "989399"
  },
  {
    "text": "functionality and uh you have to pause at this point and uh give some kudos to kotlin you know because uh the ability",
    "start": "989399",
    "end": "996540"
  },
  {
    "text": "to quickly create uh dsls for any purpose uh that you can imagine uh this",
    "start": "996540",
    "end": "1002000"
  },
  {
    "text": "is one of the major strengths of kotlin you know this uh this makes it a good language and this is the second DSL that",
    "start": "1002000",
    "end": "1008480"
  },
  {
    "text": "we've seen today because they also have the DSL in the build scripts for very little yeah so the even the Gradle build",
    "start": "1008480",
    "end": "1014420"
  },
  {
    "text": "script itself is a is a kotlin DSL on the other hand when whenever you compare",
    "start": "1014420",
    "end": "1019699"
  },
  {
    "text": "this to the jsx there's more going on okay the the jsx is clearly simpler and",
    "start": "1019699",
    "end": "1025459"
  },
  {
    "text": "shorter yeah so uh you see here there's a section called utters yeah so uh that's where all the the attributes that",
    "start": "1025459",
    "end": "1032839"
  },
  {
    "text": "would be in the HTML get put in there uh that's obviously a big namespace so we",
    "start": "1032839",
    "end": "1038360"
  },
  {
    "text": "say on click function just to make sure it's obvious that this is an event handler uh you have to write Builder",
    "start": "1038360",
    "end": "1044600"
  },
  {
    "text": "functions to supplement uh your components down the bottom as you can see or at least you did yeah because uh",
    "start": "1044600",
    "end": "1051679"
  },
  {
    "text": "whenever we were preparing for this talk and the workshop that we did yesterday I do what I always do which is I recreate",
    "start": "1051679",
    "end": "1058039"
  },
  {
    "text": "all the demos so I go into IntelliJ and I I run the wizard and then I write",
    "start": "1058039",
    "end": "1064039"
  },
  {
    "text": "everything again from scratch copying and pasting when I get stuck uh but you know I do try and generate everything",
    "start": "1064039",
    "end": "1070520"
  },
  {
    "text": "from scratch what's copying and pasting I don't know that came into a new idea yep",
    "start": "1070520",
    "end": "1076220"
  },
  {
    "text": "um so it turns out that they've upgrade created the DSL there is a new version of the DSL which is better but I had to",
    "start": "1076220",
    "end": "1084320"
  },
  {
    "text": "go looking in the change log to make sure of this and there's the the wonderful instruction at the bottom",
    "start": "1084320",
    "end": "1089419"
  },
  {
    "text": "saying if you're migrating to this new API all at once good luck okay so um my",
    "start": "1089419",
    "end": "1095539"
  },
  {
    "text": "response to that was the South Park response okay we're not allowed to swear in these presentations",
    "start": "1095539",
    "end": "1100760"
  },
  {
    "text": "um but uh you know that that was a little bit of a boom yeah however it turns out the DSL the new DSL is much",
    "start": "1100760",
    "end": "1108500"
  },
  {
    "text": "much nicer uh so the uh the outer section uh has been removed on click",
    "start": "1108500",
    "end": "1114679"
  },
  {
    "text": "function you can see there it's just on click again that the attributes are cleaner the Builder functions are not",
    "start": "1114679",
    "end": "1120679"
  },
  {
    "text": "required it is really really nice um they just haven't got around to documenting it yet so I raised this",
    "start": "1120679",
    "end": "1127340"
  },
  {
    "text": "issue with jetbrains and the documentation is on the way you know it just needs to uh to catch up with the",
    "start": "1127340",
    "end": "1133220"
  },
  {
    "text": "new version of the technology but when has that ever happened in our industry I mean they wished you good luck that's as",
    "start": "1133220",
    "end": "1139100"
  },
  {
    "text": "Engineers that's all we want yep you know a hearty good luck and you know pretty good looking working to two",
    "start": "1139100",
    "end": "1145039"
  },
  {
    "text": "o'clock in the morning to update stuff yeah yep so what we learned we learned the new DSL and it is much nicer than",
    "start": "1145039",
    "end": "1152419"
  },
  {
    "text": "the old one you know they they have made a ton of improvements um that being said you know the the jsx",
    "start": "1152419",
    "end": "1159320"
  },
  {
    "text": "remains nicer yeah so and again this is sort of going back to the interrupt so again I'm I'm sort of doubling down on",
    "start": "1159320",
    "end": "1165620"
  },
  {
    "text": "the interrupt thing here so again I feel a little bit bad about about this but typescript has got a really powerful",
    "start": "1165620",
    "end": "1171200"
  },
  {
    "text": "type system and part of that is the requirement because it's in a JavaScript space in JavaScript",
    "start": "1171200",
    "end": "1177860"
  },
  {
    "text": "space as we all know is mental in JavaScript you can do whatever the hell you want because it's a dynamic language",
    "start": "1177860",
    "end": "1183500"
  },
  {
    "text": "you can say hey today I'm going to use a different data type and today I'm not going to put this field in this object",
    "start": "1183500",
    "end": "1188660"
  },
  {
    "text": "and whatever you want so if typescript is going to bring static typing and enforce rules those rules have to be",
    "start": "1188660",
    "end": "1195260"
  },
  {
    "text": "pretty expressive so even in like really really simple things like say like an input that might have a Min and a Max in",
    "start": "1195260",
    "end": "1202640"
  },
  {
    "text": "the typescript definition this can be a number or string so we can pass in a number or a string the value is even",
    "start": "1202640",
    "end": "1207919"
  },
  {
    "text": "more complex it can be a number or a string or maybe an array of strings and so we have sort of these complex types",
    "start": "1207919",
    "end": "1213740"
  },
  {
    "text": "inside a typescript called type unions we also have intersections which are",
    "start": "1213740",
    "end": "1219080"
  },
  {
    "text": "saying let's take two arbitrary types and create a new type which is the combination of both and again this is",
    "start": "1219080",
    "end": "1224960"
  },
  {
    "text": "super useful in various different scenarios especially when working with generics so again in the react space here we can take in props that some",
    "start": "1224960",
    "end": "1232940"
  },
  {
    "text": "provider gives us and then we can say but the type of this variable is not that props type it's that props type and",
    "start": "1232940",
    "end": "1239539"
  },
  {
    "text": "an optional children field so we can do all this sort of type manipulation and do derived types in typescript",
    "start": "1239539",
    "end": "1248299"
  },
  {
    "text": "um and this doesn't play well with the language it doesn't have these sort of core features so if we go through the",
    "start": "1248299",
    "end": "1253940"
  },
  {
    "text": "ducat Auto generation again we get various different results when we start to use these so here we've got a",
    "start": "1253940",
    "end": "1260179"
  },
  {
    "text": "typescript definition which is a union and then we have a function which is taking that Union as an input and a",
    "start": "1260179",
    "end": "1265460"
  },
  {
    "text": "function which is taking that Union as an output for the input the story is not too bad because we can have a function",
    "start": "1265460",
    "end": "1271220"
  },
  {
    "text": "which can take either a first or a second by simply having two functions having overloads and true overloads is",
    "start": "1271220",
    "end": "1277400"
  },
  {
    "text": "something that we don't really get in typescript or JavaScript so this is actually a really nice feature for kotlin if the union is large or we have",
    "start": "1277400",
    "end": "1285020"
  },
  {
    "text": "multiple unions you can imagine the number of permutations that would have to be created there but again if it's",
    "start": "1285020",
    "end": "1290120"
  },
  {
    "text": "all been auto-generated and you just get nice autocomplete who cares really um coming out of the function though",
    "start": "1290120",
    "end": "1296600"
  },
  {
    "text": "it's just marked as Dynamic so we lose a lot of our static typing on the way out which is a is a big drop and when we get",
    "start": "1296600",
    "end": "1304220"
  },
  {
    "text": "into intersections the story is a even worse it's also bad here we have an",
    "start": "1304220",
    "end": "1309559"
  },
  {
    "text": "intersection and we have that both as an input and an output again and basically what happens is we lose the second half",
    "start": "1309559",
    "end": "1315559"
  },
  {
    "text": "of the intersection so the type coming in and out is just first instead of first and second so I'd have to do some",
    "start": "1315559",
    "end": "1322400"
  },
  {
    "text": "sort of casting and as Dynamic type stuff to get that to work so on the automatic generation you just don't have",
    "start": "1322400",
    "end": "1328820"
  },
  {
    "text": "the same language features to support it and typescript can go absolutely Bonkers we can do crazy things with map types we",
    "start": "1328820",
    "end": "1336020"
  },
  {
    "text": "can do conditional types we can do recursive types there's template",
    "start": "1336020",
    "end": "1341179"
  },
  {
    "text": "literals for building up strings that are a certain shape which is can we do some really nice things with that",
    "start": "1341179",
    "end": "1346820"
  },
  {
    "text": "um I mean would there be some kind of Workshop where people could learn about these Advanced features yeah I heard",
    "start": "1346820",
    "end": "1353659"
  },
  {
    "text": "about this typescript lab tomorrow yeah yeah to talk by two highly qualified and very friendly and professional",
    "start": "1353659",
    "end": "1359059"
  },
  {
    "text": "instructors I believe I mean that's the word one of them is anyway",
    "start": "1359059",
    "end": "1364220"
  },
  {
    "text": "um so yeah we will be talking about this stuff more at tomorrow if you want to come along to the lab",
    "start": "1364220",
    "end": "1370520"
  },
  {
    "text": "so I mean I'm I'm being a little uh hard on kotlin because this is just really an",
    "start": "1370520",
    "end": "1375620"
  },
  {
    "text": "incompatibility between these two languages you can solve the same problems you can you know do the same",
    "start": "1375620",
    "end": "1382460"
  },
  {
    "text": "kind of work um using kotlin features you just might have to if you're working in the JavaScript space you might have to",
    "start": "1382460",
    "end": "1388880"
  },
  {
    "text": "create some additional wrappers so here's as an example where use a fact and react has several different versions",
    "start": "1388880",
    "end": "1395120"
  },
  {
    "text": "you can have an optional second parameter the first problem that you pass in is a function that can have one",
    "start": "1395120",
    "end": "1401360"
  },
  {
    "text": "of two different kinds of return type and this is sort of Fairly easily described in typescript inside kotlin",
    "start": "1401360",
    "end": "1408679"
  },
  {
    "text": "though you sort of have to jump through hoops and there's been a couple of different variations in this depending on which version of the wrapper you're",
    "start": "1408679",
    "end": "1414919"
  },
  {
    "text": "going with so they had a use effect and then a use effect with cleanup totally different name in some ways it's clearer",
    "start": "1414919",
    "end": "1421640"
  },
  {
    "text": "but you have to do a little bit of extra work and use something that's that's different than the existing documentation and then in the latest",
    "start": "1421640",
    "end": "1427460"
  },
  {
    "text": "version they've got several different forms here we've got but use effect use effect once and then within the body we",
    "start": "1427460",
    "end": "1435380"
  },
  {
    "text": "have these helper methods to set up cleanup so even even within the team",
    "start": "1435380",
    "end": "1440419"
  },
  {
    "text": "they've got like two different solutions to the problem that they can't express what's been written in typescript",
    "start": "1440419",
    "end": "1446659"
  },
  {
    "text": "um so it just means that the transition is not quite as smooth um you just have to do a little bit more",
    "start": "1446659",
    "end": "1452179"
  },
  {
    "text": "work so again it's a little bit unfair but I think the typescript jsx solution is",
    "start": "1452179",
    "end": "1458179"
  },
  {
    "text": "just going to be a smoother path for you if you're Building Solutions for your company um you know the DSL is purpose built jsx",
    "start": "1458179",
    "end": "1465020"
  },
  {
    "text": "is a DSL purpose built for HTML so it just feels natural to designers it's you",
    "start": "1465020",
    "end": "1470179"
  },
  {
    "text": "can consume assets more readily um you know it's it's just purpose-built but you have to give props to kotlin for",
    "start": "1470179",
    "end": "1477799"
  },
  {
    "text": "just having the ability to construct any DSL for anything you know and again with",
    "start": "1477799",
    "end": "1483380"
  },
  {
    "text": "a colleague who wrote a good article what was his DSL on oh yes quite right was not for sandwiches or something yeah",
    "start": "1483380",
    "end": "1488659"
  },
  {
    "text": "so he wrote a DSL for constructing sandwiches so yeah it's kudos to kotlin",
    "start": "1488659",
    "end": "1494539"
  },
  {
    "text": "but again if I'm Building Solutions I'm going to want jsx typescript yep very good so moving on um as I was",
    "start": "1494539",
    "end": "1502340"
  },
  {
    "start": "1499000",
    "end": "1661000"
  },
  {
    "text": "saying previously you're going to spend an awful lot of your time dynamically generating HTML you're also going to",
    "start": "1502340",
    "end": "1508159"
  },
  {
    "text": "spend an awful lot of time making asynchronous calls to back-end services so let's have a little talk about that",
    "start": "1508159",
    "end": "1513860"
  },
  {
    "text": "and how it works so um if you're doing typescript or JavaScript you've got async await so we can declare a function",
    "start": "1513860",
    "end": "1520580"
  },
  {
    "text": "as being async because it's asynchronous and then we can await the result of an asynchronous job of work and that works",
    "start": "1520580",
    "end": "1528320"
  },
  {
    "text": "really well yeah that's good um but then in kotlin we have these things called suspending functions which",
    "start": "1528320",
    "end": "1534740"
  },
  {
    "text": "are even better so a suspending function is a function that can suspend yeah and",
    "start": "1534740",
    "end": "1540380"
  },
  {
    "text": "normally it suspends whenever another suspending function is called but in the",
    "start": "1540380",
    "end": "1545840"
  },
  {
    "text": "case of kotlin JS it also works with promises okay so it'll also work here you see whenever we've made the uh the",
    "start": "1545840",
    "end": "1552860"
  },
  {
    "text": "call to await so kotlin has uh suspending functions and suspending",
    "start": "1552860",
    "end": "1558080"
  },
  {
    "text": "functions are kind of like a higher level tool okay there are more powerful concept and for example we don't need to",
    "start": "1558080",
    "end": "1565340"
  },
  {
    "text": "call away yeah because kotlin is able to work out when one suspending function is calling another suspending function and",
    "start": "1565340",
    "end": "1572419"
  },
  {
    "text": "allowed the we icon and the gutter in the left hand side uh to let you know what's going on so uh that there's no",
    "start": "1572419",
    "end": "1578720"
  },
  {
    "text": "need to put in the calls to await there's no worries about the bugs that might occur if you leave the await out",
    "start": "1578720",
    "end": "1584059"
  },
  {
    "text": "and so on so that's uh that's a really nice feature so here it's the the K2 or",
    "start": "1584059",
    "end": "1589100"
  },
  {
    "text": "client that we're using uh ketor being jetbrains uh restful framework and that provides a client as well",
    "start": "1589100",
    "end": "1596179"
  },
  {
    "text": "and as I say um suspending functions and also cool routines these are a higher",
    "start": "1596179",
    "end": "1601520"
  },
  {
    "text": "level concept yeah so async and aware is designed entirely for the use case of",
    "start": "1601520",
    "end": "1607220"
  },
  {
    "text": "awaiting asynchronous jobs of work but suspending uh you can use suspending functions any word that you want to use",
    "start": "1607220",
    "end": "1614299"
  },
  {
    "text": "lazy evaluation so here's a simple example uh we've got this sequence generator and what it's going to do is",
    "start": "1614299",
    "end": "1621380"
  },
  {
    "text": "it's going to yield back a number and then do nothing until the calling code code needs the next number okay so uh if",
    "start": "1621380",
    "end": "1629600"
  },
  {
    "text": "you were trying to generate a list of infinite length uh well that would be done eagerly and it would never complete",
    "start": "1629600",
    "end": "1635360"
  },
  {
    "text": "on the other hand there's nothing wrong with having a sequence of infinite length because it's only whenever a new",
    "start": "1635360",
    "end": "1641000"
  },
  {
    "text": "value is required by the calling code that it actually gets yielded back okay",
    "start": "1641000",
    "end": "1646340"
  },
  {
    "text": "so suspending functions and co-routines they're a higher level concept there's",
    "start": "1646340",
    "end": "1652100"
  },
  {
    "text": "much more going on there's a huge range of use cases that they can be applied to and having walked up to that black hole",
    "start": "1652100",
    "end": "1659240"
  },
  {
    "text": "of complexity we're just going to step back from them okay but it's a it's a fascinating area",
    "start": "1659240",
    "end": "1664880"
  },
  {
    "start": "1661000",
    "end": "1893000"
  },
  {
    "text": "and then moving on to talk about the syntax I think this was me as well wasn't it yes yes sir this is me as well",
    "start": "1664880",
    "end": "1669980"
  },
  {
    "text": "very good you're very elegant you see so you get the Elegance Center oh I get the Elegance thank you yeah uh so um kotlin",
    "start": "1669980",
    "end": "1676940"
  },
  {
    "text": "if you ever want to annoy somebody on the kotlin team go up and ask them where is the ternary conditional operator okay",
    "start": "1676940",
    "end": "1683299"
  },
  {
    "text": "that they really hear people asking that uh because my recommendation as well is do that after a few glasses of wine oh",
    "start": "1683299",
    "end": "1689360"
  },
  {
    "text": "yeah yeah absolutely yeah uh because kotlin doesn't need it yeah so in kotlin",
    "start": "1689360",
    "end": "1694700"
  },
  {
    "text": "the uh the Wen which is used for pattern matching and uh the if these actually",
    "start": "1694700",
    "end": "1699919"
  },
  {
    "text": "return things back to you that they're Expressions okay so the if statement actually returns a value and that means",
    "start": "1699919",
    "end": "1706520"
  },
  {
    "text": "that you've got no need for the the ternary conditional operator uh you've also got lots of other nice little",
    "start": "1706520",
    "end": "1712460"
  },
  {
    "text": "things so instead of the Void type for which for example can't be used as a type parameter uh you've got unit",
    "start": "1712460",
    "end": "1718580"
  },
  {
    "text": "instead if your function contains a single line you can just say equals and so on so for example people here's a",
    "start": "1718580",
    "end": "1726320"
  },
  {
    "text": "little bit of typescript and we're doing our jsx obviously we've got that div tag",
    "start": "1726320",
    "end": "1731900"
  },
  {
    "text": "there but inside jsx you can't use statements okay so inside jsx you can't",
    "start": "1731900",
    "end": "1737600"
  },
  {
    "text": "put an F you can't put a switch you can't put a loop and this is a common problem for beginners because of course",
    "start": "1737600",
    "end": "1743779"
  },
  {
    "text": "they want to do that so they have to learn to use the ternary conditional operator instead of an F or a switch and",
    "start": "1743779",
    "end": "1750799"
  },
  {
    "text": "they have to learn to use the The Operators of functional programming the filter the map and so on instead of",
    "start": "1750799",
    "end": "1757460"
  },
  {
    "text": "using Loops but you get there in the end but here we've chained some ternary",
    "start": "1757460",
    "end": "1762559"
  },
  {
    "text": "operators together to get the effect that we want and the I mean this this looks pretty good actually but this is",
    "start": "1762559",
    "end": "1768620"
  },
  {
    "text": "sort of very hard work in terms of laying this out as soon as you throw the auto formatter at this it looks horrible",
    "start": "1768620",
    "end": "1774860"
  },
  {
    "text": "yes work has gone into making this look okay but again as you say any any auto",
    "start": "1774860",
    "end": "1780260"
  },
  {
    "text": "formatter will destroy your hard work so uh if you look at the kotlin equipment prevalent because in kotlin this is an",
    "start": "1780260",
    "end": "1787880"
  },
  {
    "text": "expression and not a statement so the when is actually going to return something yeah so when combined with the",
    "start": "1787880",
    "end": "1795080"
  },
  {
    "text": "DSL that actually looks nicer okay so um I do want to slag off typescript I love",
    "start": "1795080",
    "end": "1800960"
  },
  {
    "text": "typescript to death but as Eamon says they made the choice to build on top of JavaScript and that meant that any",
    "start": "1800960",
    "end": "1807860"
  },
  {
    "text": "JavaScript developer could very quickly become a typescript developer yay yeah but they also had to live with all the",
    "start": "1807860",
    "end": "1815120"
  },
  {
    "text": "uh the problems with the existing JavaScript syntax whereas in kotlin uh",
    "start": "1815120",
    "end": "1820279"
  },
  {
    "text": "they were creating a new syntax from scratch and as I say when embedded in the DSL that can become pretty nice",
    "start": "1820279",
    "end": "1828620"
  },
  {
    "text": "um to look at it the other way though uh both kotlin and typescript support destructuring a feature coming to your",
    "start": "1828620",
    "end": "1835700"
  },
  {
    "text": "language soon if it doesn't already have it and the the destructuring potential",
    "start": "1835700",
    "end": "1841100"
  },
  {
    "text": "that you get in typescript is so much more powerful okay so if there's one thing I would add to uh to kotlin it's",
    "start": "1841100",
    "end": "1848059"
  },
  {
    "text": "extra support for de-structuring so what you can do is you can just go to an object and that you can extract",
    "start": "1848059",
    "end": "1855200"
  },
  {
    "text": "arbitrary properties in the fly which is really nice and it doesn't need to be some kind of data class it doesn't have",
    "start": "1855200",
    "end": "1862100"
  },
  {
    "text": "to be a collection it doesn't have to have special methods implemented that just happens automatically you know you",
    "start": "1862100",
    "end": "1868159"
  },
  {
    "text": "can go to an object and rip out multiple things and this is really useful",
    "start": "1868159",
    "end": "1873580"
  },
  {
    "text": "whenever you're writing your components because let's say we're passing in a big bag of properties okay so into this",
    "start": "1873580",
    "end": "1880580"
  },
  {
    "text": "component called Brick we're passing a big bag of properties but all we care about is the index you know so we can",
    "start": "1880580",
    "end": "1886640"
  },
  {
    "text": "just destructure that immediately so really really nice and it works with collections",
    "start": "1886640",
    "end": "1893600"
  },
  {
    "start": "1893000",
    "end": "2082000"
  },
  {
    "text": "cool cool so what's uh what's the conclusion um they're both really good but just in",
    "start": "1893600",
    "end": "1900320"
  },
  {
    "text": "different ways we love them both um but they have their pros and cons and",
    "start": "1900320",
    "end": "1906320"
  },
  {
    "text": "you sort of heard us talking about where one was better than the other and as we sort of write them all down we are",
    "start": "1906320",
    "end": "1912200"
  },
  {
    "text": "flip-flopping and if I'm writing typescript there's some features around the standard language and not having you",
    "start": "1912200",
    "end": "1918620"
  },
  {
    "text": "know having void instead of unit and not having a good switch expression and things like there's things that I really miss from kotlin when I'm in typescript",
    "start": "1918620",
    "end": "1925220"
  },
  {
    "text": "and then when I'm in kotlin there's things that I really miss from typescript and I'm like oh give me Union types and intersections and let me do",
    "start": "1925220",
    "end": "1931460"
  },
  {
    "text": "some of that sort of stuff um so they're both really good but the the they have sort of different Pros",
    "start": "1931460",
    "end": "1938480"
  },
  {
    "text": "compared to the other um but what should you choose for your uh you know your next project with your",
    "start": "1938480",
    "end": "1944480"
  },
  {
    "text": "company the thing that's going to actually bring in Revenue the thing that you're going to have to maintain the thing that your team are going to have",
    "start": "1944480",
    "end": "1950419"
  },
  {
    "text": "to maintain and for me I'm a big fan of like stable engineering",
    "start": "1950419",
    "end": "1956120"
  },
  {
    "text": "um we googled stable engineering and this is what came up so we stuck with it I think it makes sense",
    "start": "1956120",
    "end": "1962120"
  },
  {
    "text": "um so I'm going to want something with a larger Community I'm going to want something with the bugs have been ironed",
    "start": "1962120",
    "end": "1968240"
  },
  {
    "text": "out I'm going to want something with good documentation not just a good luck in the change log",
    "start": "1968240",
    "end": "1973820"
  },
  {
    "text": "um so for me yeah the typescript is going to be where it's at if I'm doing Android or back-end jvm development",
    "start": "1973820",
    "end": "1979880"
  },
  {
    "text": "kotlin's a no-brainer but for this uh for for building and top of the",
    "start": "1979880",
    "end": "1984980"
  },
  {
    "text": "JavaScript ecosystem the column JS doesn't solve enough problems tapescript solved a problem for",
    "start": "1984980",
    "end": "1990620"
  },
  {
    "text": "me and that's why I use it I don't have that I now have a solution so I don't need to move to another",
    "start": "1990620",
    "end": "1996679"
  },
  {
    "text": "language like reason ml or column JS at the minute so that's for my brains at",
    "start": "1996679",
    "end": "2001960"
  },
  {
    "text": "Garth yeah no very much I would agree with the same thing at the end of the day you're going to learn JavaScript I",
    "start": "2001960",
    "end": "2007960"
  },
  {
    "text": "mean the the uh the argument that you'll get from an awful lot of people is what happens if you have a team of rabid",
    "start": "2007960",
    "end": "2013600"
  },
  {
    "text": "kotlin developers really enjoying kotlin on the server side no experience of JavaScript or react wouldn't it be",
    "start": "2013600",
    "end": "2019899"
  },
  {
    "text": "simpler for them to go with kotlin.js and react well whenever they Google something whenever they look it up and",
    "start": "2019899",
    "end": "2025659"
  },
  {
    "text": "stack Overflow they're going to get a JavaScript answer maybe a typescript answer if they're how you know if",
    "start": "2025659",
    "end": "2031240"
  },
  {
    "text": "they're really lucky with the the types added so they're going to end up learning the material at the level of",
    "start": "2031240",
    "end": "2037240"
  },
  {
    "text": "JavaScript and typescript anyway so why not follow the the line of least resistance for now",
    "start": "2037240",
    "end": "2043419"
  },
  {
    "text": "um might be different of course if you're not building a really big web app you know as you know there are software",
    "start": "2043419",
    "end": "2048878"
  },
  {
    "text": "development teams and all kinds of companies not everybody is a software develop developer working in a software",
    "start": "2048879",
    "end": "2054158"
  },
  {
    "text": "development company with a product that's being deployed to the world so for example you might be doing kotlin",
    "start": "2054159",
    "end": "2060040"
  },
  {
    "text": "for all kinds of crazy stuff in a manufacturing company on the factory floor or whatever you might need to",
    "start": "2060040",
    "end": "2065740"
  },
  {
    "text": "generate HTML that DSL might be incredibly useful you know so just because you don't want to grab and",
    "start": "2065740",
    "end": "2072099"
  },
  {
    "text": "consume the whole thing and write your next big web app in kotlin.js doesn't mean there aren't pieces of this you",
    "start": "2072099",
    "end": "2078520"
  },
  {
    "text": "know that you are you can't take away and use nope so thanks very much thank you",
    "start": "2078520",
    "end": "2085760"
  },
  {
    "start": "2082000",
    "end": "2106000"
  },
  {
    "text": "[Applause]",
    "start": "2085760",
    "end": "2088888"
  }
]