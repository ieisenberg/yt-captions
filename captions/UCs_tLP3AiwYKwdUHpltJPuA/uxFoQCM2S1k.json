[
  {
    "start": "0",
    "end": "188000"
  },
  {
    "text": "hi i'm anders halsberg technic whoa technical fellow at microsoft and i'm here to talk about typescript which is",
    "start": "5040",
    "end": "12799"
  },
  {
    "text": "a project that we've been working on for the last two two and a half years",
    "start": "12799",
    "end": "18960"
  },
  {
    "text": "so typescript is about solving a problem that we've",
    "start": "19279",
    "end": "24960"
  },
  {
    "text": "increasingly heard from from our our customers you know in particular over the last",
    "start": "24960",
    "end": "30480"
  },
  {
    "text": "five years customers and even internal teams keep telling us how how hard it is to",
    "start": "30480",
    "end": "36160"
  },
  {
    "text": "write large applications in in javascript um several reasons you know one being that",
    "start": "36160",
    "end": "43600"
  },
  {
    "text": "that javascript really was never designed to to write large applications it did you know it was it was sort of",
    "start": "43600",
    "end": "49440"
  },
  {
    "text": "like originally intended for these 10 line event handlers and now we're writing 10 000 or 100 000",
    "start": "49440",
    "end": "55360"
  },
  {
    "text": "line apps in it and the language doesn't really have any large scale application",
    "start": "55360",
    "end": "60399"
  },
  {
    "text": "structuring concepts like classes or modules and also it's entirely dynamically typed",
    "start": "60399",
    "end": "68640"
  },
  {
    "text": "which means there's no static type information off of which we can power intelligent tooling and if you think",
    "start": "68640",
    "end": "75520"
  },
  {
    "text": "about what it is that powers the intelligent ides that we all use today",
    "start": "75520",
    "end": "80960"
  },
  {
    "text": "it really is static type information that makes it possible to do code completion safe refactorings finding all",
    "start": "80960",
    "end": "88159"
  },
  {
    "text": "references go to definition etc etc",
    "start": "88159",
    "end": "92960"
  },
  {
    "text": "so two two and a half years ago when we were thinking about where do we go next with javascript development tools we",
    "start": "93280",
    "end": "99759"
  },
  {
    "text": "thought it'd be really neat if we could strengthen javascript with with those",
    "start": "99759",
    "end": "104880"
  },
  {
    "text": "key concepts that are missing for large-scale development like classes modules optional static typing but",
    "start": "104880",
    "end": "112960"
  },
  {
    "text": "but doings but but to do so in a way that doesn't sacrifice the inherent",
    "start": "112960",
    "end": "118159"
  },
  {
    "text": "thing that makes javascript so interesting i.e cross-platform uh open standards web",
    "start": "118159",
    "end": "124320"
  },
  {
    "text": "and and so forth and and that is what uh what typescript is it is a",
    "start": "124320",
    "end": "129759"
  },
  {
    "text": "language for application scale javascript development so it's a language for large",
    "start": "129759",
    "end": "136800"
  },
  {
    "text": "or application scale uh javascript development uh next level down or the",
    "start": "136800",
    "end": "142640"
  },
  {
    "text": "more technical description is typescript is a superset of javascript that",
    "start": "142640",
    "end": "148160"
  },
  {
    "text": "compiles two plain javascript um and it does so",
    "start": "148160",
    "end": "153519"
  },
  {
    "text": "uh the compiler itself and the code that it produces",
    "start": "153519",
    "end": "158879"
  },
  {
    "text": "runs on any uh browser any host on any operating system",
    "start": "158879",
    "end": "165360"
  },
  {
    "text": "and the compiler and the associated language services and library typings and so forth are all",
    "start": "165360",
    "end": "171599"
  },
  {
    "text": "open source we put this project out in the open about two days ago",
    "start": "171599",
    "end": "177840"
  },
  {
    "text": "and what i have here uh is is basically you know the publicly available uh in",
    "start": "177840",
    "end": "182959"
  },
  {
    "text": "installation of it that that we're gonna try and play with now",
    "start": "182959",
    "end": "189040"
  },
  {
    "start": "188000",
    "end": "1252000"
  },
  {
    "text": "so so typescript starts with javascript all javascript code is valid typescript",
    "start": "189040",
    "end": "196159"
  },
  {
    "text": "code because we are a pure superset of of javascript and that means that you can just copy and paste javascript into",
    "start": "196159",
    "end": "203440"
  },
  {
    "text": "a typescript file and then work with it there it also means that typescript works with all of the existing",
    "start": "203440",
    "end": "210480"
  },
  {
    "text": "frameworks and libraries that are available out there today like node.js or jquery backbone underscore prototype",
    "start": "210480",
    "end": "217920"
  },
  {
    "text": "etc etc there are lots of them and new ones coming practically every day",
    "start": "217920",
    "end": "223120"
  },
  {
    "text": "so the thing that we then add on top is optional static typing classes and",
    "start": "223120",
    "end": "228720"
  },
  {
    "text": "modules and those are really sort of the things that that allow us then to build great",
    "start": "228720",
    "end": "236080"
  },
  {
    "text": "tooling because they're the missing things that that power the the ides today um",
    "start": "236080",
    "end": "242159"
  },
  {
    "text": "the cool thing though is that there's zero cost all of this all typescript is purely a development time tool once you",
    "start": "242159",
    "end": "249760"
  },
  {
    "text": "compile you you're left with plain javascript and there's no runtime component that needs to be present in",
    "start": "249760",
    "end": "256079"
  },
  {
    "text": "order to to run the the generator code in fact we simply compile to idiomatic javascript the",
    "start": "256079",
    "end": "262560"
  },
  {
    "text": "javascript that you would have written if you wanted to emulate classes or or modules and the final code runs as i",
    "start": "262560",
    "end": "269520"
  },
  {
    "text": "said in any browser any host on on any os um so let's",
    "start": "269520",
    "end": "275040"
  },
  {
    "text": "let's actually try to to to do a little bit of demoing and see what this looks like in action here is the uh typescript",
    "start": "275040",
    "end": "282000"
  },
  {
    "text": "website well actually it's a local copy i have just in case we lost connectivity but but this is is what it looks like and",
    "start": "282000",
    "end": "288479"
  },
  {
    "text": "we're going to go and play with typescript in the typescript playground which is basically a web page where you",
    "start": "288479",
    "end": "295919"
  },
  {
    "text": "can where you can type in typescript and see the compiled output in uh in a",
    "start": "295919",
    "end": "301120"
  },
  {
    "text": "window on the side um i'm going to switch here and grab uh",
    "start": "301120",
    "end": "306240"
  },
  {
    "text": "my first little demo and so here you you see some",
    "start": "306240",
    "end": "312160"
  },
  {
    "text": "some javascript and here you see the compiled output which happens to be exactly the same because",
    "start": "312160",
    "end": "318560"
  },
  {
    "text": "we are just a superset of javascript now if you look at this code there's something funny about this code right i mean i'm like",
    "start": "318560",
    "end": "325039"
  },
  {
    "text": "taking a parameter x and i'm adding a property to or setting a property but i'm also plusing it together but hey",
    "start": "325039",
    "end": "331520"
  },
  {
    "text": "this is valid javascript it just so happens to not be meaningful but it's valid",
    "start": "331520",
    "end": "336960"
  },
  {
    "text": "now now it would be nice let's say for example that i knew that x was going to be a",
    "start": "336960",
    "end": "343199"
  },
  {
    "text": "string um it sure would be nice if i could somehow indicate that and you know it's not like we're inventing anything",
    "start": "343199",
    "end": "349600"
  },
  {
    "text": "new in that sense you know for example if you use a tool like google's closure where you put",
    "start": "349600",
    "end": "355759"
  },
  {
    "text": "type annotations in comments there are there are tools that can check these things for you but but having your type",
    "start": "355759",
    "end": "362560"
  },
  {
    "text": "system in comments is not particularly conducive to readability of the code nor",
    "start": "362560",
    "end": "369199"
  },
  {
    "text": "is it particularly expressive you know there are a bunch of things that you can't say in these comments and you can't put them in all the places that",
    "start": "369199",
    "end": "375520"
  },
  {
    "text": "you would like to put them so what typescript does instead is it allows you to",
    "start": "375520",
    "end": "382479"
  },
  {
    "text": "put type annotations in your code so i can say x is of type string um and when",
    "start": "382479",
    "end": "388639"
  },
  {
    "text": "i do so you see that our ide starts to light up i should mention that that what is powering",
    "start": "388639",
    "end": "395039"
  },
  {
    "text": "underneath this edit box that i'm typing in is the typescript compiler and the typescript language service",
    "start": "395039",
    "end": "400880"
  },
  {
    "text": "because typescript is written in typescript and when you compile it you get javascript and you can just use that",
    "start": "400880",
    "end": "405919"
  },
  {
    "text": "anywhere and so that's what we're what we're doing here and so the first thing you see is that we get something here",
    "start": "405919",
    "end": "411280"
  },
  {
    "text": "that says there's no name property on type string which is which is true there isn't uh",
    "start": "411280",
    "end": "416319"
  },
  {
    "text": "we also see if we hover over v that we've inferred that string plus string is a string and therefore v is a type",
    "start": "416319",
    "end": "423039"
  },
  {
    "text": "string and we see that alert is a thing that takes a string and returns void and therefore",
    "start": "423039",
    "end": "428240"
  },
  {
    "text": "it is valid to pass v to it now let me try to get rid of that",
    "start": "428240",
    "end": "434479"
  },
  {
    "text": "line and error here and let's try one of the other primitive types number for example and now",
    "start": "434479",
    "end": "440240"
  },
  {
    "text": "we see now we're inferring that number plus number is a number and now we're trying to pass a number to a method that",
    "start": "440240",
    "end": "447599"
  },
  {
    "text": "expects a string and that in turn is also an error so so here's some more you know",
    "start": "447599",
    "end": "453440"
  },
  {
    "text": "static type checking happen happening let's try to use a bool instead",
    "start": "453440",
    "end": "459440"
  },
  {
    "text": "and now we see that operator plus can't be applied to bools well",
    "start": "459440",
    "end": "465599"
  },
  {
    "text": "it actually can in javascript it just so happens that you don't get a meaningful result right and so in a sense what this",
    "start": "465599",
    "end": "472080"
  },
  {
    "text": "is about is trying to to to siphon out that meaningful subset of java the",
    "start": "472080",
    "end": "478560"
  },
  {
    "text": "semantic subset of javascript that makes sense and that's basically what what",
    "start": "478560",
    "end": "483599"
  },
  {
    "text": "what we're doing here right now we also allow",
    "start": "483599",
    "end": "489039"
  },
  {
    "text": "more complicated types like arrays for example i can say that x is a string array and now when i index into x and",
    "start": "489520",
    "end": "496560"
  },
  {
    "text": "press dot you see that we know that there are strings and therefore we can show you all the methods that are",
    "start": "496560",
    "end": "502319"
  },
  {
    "text": "available on string and not just their names but also their signatures so we can see that carecodead",
    "start": "502319",
    "end": "509680"
  },
  {
    "text": "is a thing that takes an index and which is number and returns a number and so forth",
    "start": "509680",
    "end": "515919"
  },
  {
    "text": "other typical patterns that are interesting is",
    "start": "515919",
    "end": "522399"
  },
  {
    "text": "we could say x is a function that takes no arguments and returns a string and now when we call it and say dot again",
    "start": "522399",
    "end": "528800"
  },
  {
    "text": "you see we get statement completion but of course",
    "start": "528800",
    "end": "535600"
  },
  {
    "text": "one thing that's really interesting is having the ability to describe a shape of object here for example i'm saying",
    "start": "535600",
    "end": "543040"
  },
  {
    "text": "that uh whoops that my function takes an x that",
    "start": "543040",
    "end": "549360"
  },
  {
    "text": "is a an object that has an a and a b property and now when i say x dot you see that we get statement completion",
    "start": "549360",
    "end": "555760"
  },
  {
    "text": "here x dot a x dot b and so forth now",
    "start": "555760",
    "end": "561279"
  },
  {
    "text": "i might also want to give a name to to this structural type or this anonymous type",
    "start": "561279",
    "end": "566880"
  },
  {
    "text": "so you see you can write types just in line but of course you can also name them",
    "start": "566880",
    "end": "571920"
  },
  {
    "text": "i think i have this little example here that shows you how you could write an interface thing with two properties in",
    "start": "571920",
    "end": "578480"
  },
  {
    "text": "it and that's really just interface here think of it more as i'm writing an object type whose name is thing and it",
    "start": "578480",
    "end": "584880"
  },
  {
    "text": "has two properties and let me now try for example and say bar n",
    "start": "584880",
    "end": "590959"
  },
  {
    "text": "equals process of a colon 10 comma b colon",
    "start": "590959",
    "end": "598880"
  },
  {
    "text": "hello for example um",
    "start": "600000",
    "end": "605040"
  },
  {
    "text": "now a couple of things worth noting here first of all if you've been following",
    "start": "605040",
    "end": "610079"
  },
  {
    "text": "along over in the generated javascript you see that the javascript we generate is really just",
    "start": "610079",
    "end": "616399"
  },
  {
    "text": "the javascript that you type minus the type annotations and minus the type declaration so all of that is there you",
    "start": "616399",
    "end": "622959"
  },
  {
    "text": "know for validation and and ide tooling's sake and then it just compiles",
    "start": "622959",
    "end": "628320"
  },
  {
    "text": "away um now the other thing you'll note here if we if we try to look a little bit of this program so we've defined a to be a",
    "start": "628320",
    "end": "635600"
  },
  {
    "text": "number and here we return x dot a which means we've inferred that we return a",
    "start": "635600",
    "end": "640640"
  },
  {
    "text": "number which in turn means that we can infer that process is a function that takes a thing that returns a number",
    "start": "640640",
    "end": "646959"
  },
  {
    "text": "which in turn means that when we call process we can infer that n is a number and so you see how types flow",
    "start": "646959",
    "end": "654079"
  },
  {
    "text": "through just a few annotations and then we can flow it through the code once we know what what's going on",
    "start": "654079",
    "end": "662240"
  },
  {
    "text": "let me try to sort of show here what also happens for example let's say i add an extra",
    "start": "662640",
    "end": "670079"
  },
  {
    "text": "property to my my interface type here now you'll notice that i get errors here it says process is is missing one of the",
    "start": "670640",
    "end": "678560"
  },
  {
    "text": "one of the parameters and i could fix that by by adding my parameter c but i could also instead",
    "start": "678560",
    "end": "685360"
  },
  {
    "text": "indicate that c is an optional parameter so this is a pattern that's very common in javascript where you take say options",
    "start": "685360",
    "end": "692560"
  },
  {
    "text": "bags that are a bunch of options but you don't actually have to specify all of them right so here we're saying that a",
    "start": "692560",
    "end": "698640"
  },
  {
    "text": "and b are mandatory but c is optional if i give a c it must be a bull",
    "start": "698640",
    "end": "705360"
  },
  {
    "text": "if i give a c that isn't a bull now it's an error so so we can we can sort of express some of",
    "start": "705360",
    "end": "711279"
  },
  {
    "text": "the the more intricate parts of what goes on in in javascript",
    "start": "711279",
    "end": "717120"
  },
  {
    "text": "let me actually try to take this piece of code here i'm just going to copy it and then let's switch to visual",
    "start": "717120",
    "end": "724480"
  },
  {
    "text": "studio and just get ourselves an empty",
    "start": "724480",
    "end": "730000"
  },
  {
    "text": "typescript file so now part of typescript the distribution is a",
    "start": "730000",
    "end": "735440"
  },
  {
    "text": "plugin for visual studio that uses the compiler and language service to power up all of these uh intelligent",
    "start": "735440",
    "end": "742160"
  },
  {
    "text": "facilities in the ide um as i said this stuff is all open source so you can use it anywhere else we you saw an example",
    "start": "742160",
    "end": "748959"
  },
  {
    "text": "of using in a web browser you someone could build an eclipse plugin and do do the same thing",
    "start": "748959",
    "end": "754000"
  },
  {
    "text": "i'm just going to paste it in here and then continue uh playing with with our code in in here",
    "start": "754000",
    "end": "761200"
  },
  {
    "text": "so one thing you of course can express whoops in in types is uh",
    "start": "761519",
    "end": "767440"
  },
  {
    "text": "is methods so now we're saying that thing has a and b properties of type number",
    "start": "767440",
    "end": "774079"
  },
  {
    "text": "and a foo method so now when i do statement completion you see we have a foo and when i do open",
    "start": "774079",
    "end": "780079"
  },
  {
    "text": "curly it tells me what the signature of that guy is and so on and again here we can infer then that it",
    "start": "780079",
    "end": "787040"
  },
  {
    "text": "now we return a string because foo returns a string um we actually also allow you to express",
    "start": "787040",
    "end": "793519"
  },
  {
    "text": "overloads um so i can say there's another there's foo",
    "start": "793519",
    "end": "798839"
  },
  {
    "text": "actually um is a method that when you give it a string returns a string and when you",
    "start": "798839",
    "end": "805440"
  },
  {
    "text": "give it a number it returns a number uh this happens very often in javascript for example like like think of jquery",
    "start": "805440",
    "end": "812160"
  },
  {
    "text": "and the dollar object that has seven different overloads that you can if you",
    "start": "812160",
    "end": "817440"
  },
  {
    "text": "give it a function then it does this if you give it a string it does that if you give it an object back it does this other thing and so on and so it's",
    "start": "817440",
    "end": "823760"
  },
  {
    "text": "important to be able to to model that in the type system so we can follow along and when you say dot on that give you",
    "start": "823760",
    "end": "829600"
  },
  {
    "text": "the right type information again um so now if we look here",
    "start": "829600",
    "end": "834720"
  },
  {
    "text": "uh if i say x dot foo you'll see that there are now two overloads uh uh oh",
    "start": "834720",
    "end": "840480"
  },
  {
    "text": "that's really yeah anyway uh um so and if i give it a number here you go then process now returns a",
    "start": "840480",
    "end": "847120"
  },
  {
    "text": "number now this stuff here actually uh",
    "start": "847120",
    "end": "853279"
  },
  {
    "text": "is really same as writing this uh",
    "start": "853279",
    "end": "859120"
  },
  {
    "text": "so foo what i'm really saying here with these two overloads is that there's a foo property that has two possible call",
    "start": "859120",
    "end": "866000"
  },
  {
    "text": "signatures one that takes a string and returns a string and one that takes a number and returns a number um and but i",
    "start": "866000",
    "end": "872320"
  },
  {
    "text": "can describe further things on my on my function for example it also has a data",
    "start": "872320",
    "end": "877680"
  },
  {
    "text": "property so and this again is stuff that occurs so now when i say foo dot you'll",
    "start": "877680",
    "end": "882720"
  },
  {
    "text": "see that there's a data property but i can also call it with two different overloads and so i can model all of",
    "start": "882720",
    "end": "889760"
  },
  {
    "text": "these crazy things that occur in in javascript libraries in fact just for completeness sake let me add a uh",
    "start": "889760",
    "end": "897600"
  },
  {
    "text": "a couple more here um i could i could now also define that thing",
    "start": "897600",
    "end": "903360"
  },
  {
    "text": "can be a constructor function that takes a string and returns elements and when you index into it you get dates and and",
    "start": "903360",
    "end": "909279"
  },
  {
    "text": "so forth and now so crazy stuff when i say new x here it says oh you must give me a string and",
    "start": "909279",
    "end": "916240"
  },
  {
    "text": "when you do then i'm going to return an element etc etc so",
    "start": "916240",
    "end": "921600"
  },
  {
    "text": "we basically can model all of these things that go on in the javascript dom",
    "start": "921600",
    "end": "926639"
  },
  {
    "text": "jquery all of the all of the frameworks okay",
    "start": "926639",
    "end": "931839"
  },
  {
    "text": "let me get rid of this stuff and try to paste in some other",
    "start": "932079",
    "end": "939360"
  },
  {
    "text": "here's a little more advanced example of type inference a function that closes",
    "start": "939360",
    "end": "945440"
  },
  {
    "text": "over a local variable and returns an object with a bunch of function properties that use that that local and",
    "start": "945440",
    "end": "951279"
  },
  {
    "text": "this is how you get privacy in javascript is a very very common pattern right um",
    "start": "951279",
    "end": "956639"
  },
  {
    "text": "if you if you look in this piece of code the only thing that that differs from regular javascript is this one",
    "start": "956639",
    "end": "961920"
  },
  {
    "text": "annotation here that says that that this function takes a number but we can infer all of the types from from from this so",
    "start": "961920",
    "end": "970160"
  },
  {
    "text": "if you hover over the return statement here you'll see that we've inferred that this returns a thing that has three",
    "start": "970160",
    "end": "976000"
  },
  {
    "text": "properties that are each of a function type that has certain argument types and so forth and in turn make accumulator",
    "start": "976000",
    "end": "982320"
  },
  {
    "text": "therefore is a function taking no arguments that returns an object literal containing three functions that etc etc",
    "start": "982320",
    "end": "988720"
  },
  {
    "text": "etc so so we can sort of grok it all um and now when i say bar a equals make",
    "start": "988720",
    "end": "994560"
  },
  {
    "text": "accumulator and then a dot you'll see that there's an ad here and that i need to pass a",
    "start": "994560",
    "end": "1000959"
  },
  {
    "text": "number five and so forth now so this shows how we can infer from code",
    "start": "1000959",
    "end": "1007759"
  },
  {
    "text": "that you're writing but sometimes inference you want inference to go in the other direction you may for example",
    "start": "1007759",
    "end": "1015680"
  },
  {
    "text": "have a declaration of an interface that you want to go implement and now really you would like to make inferences from",
    "start": "1015680",
    "end": "1022480"
  },
  {
    "text": "that about the code that you're that you're writing so let's say that my make accumulator function here is something",
    "start": "1022480",
    "end": "1028640"
  },
  {
    "text": "that's supposed to return an accumulator right well you'll see that it all works out now because",
    "start": "1028640",
    "end": "1034480"
  },
  {
    "text": "we actually have structural typing here so the mere fact of writing an object literal that has the right shape is an",
    "start": "1034480",
    "end": "1040959"
  },
  {
    "text": "implementation of that interface you don't have to first declare that you implement it",
    "start": "1040959",
    "end": "1046079"
  },
  {
    "text": "but but the other thing that's really cool is that if i made a mistake here like typed in the wrong property name",
    "start": "1046079",
    "end": "1053280"
  },
  {
    "text": "then it tells me what's wrong here it tells me that hey you're missing property ad from accumulator um now this",
    "start": "1053280",
    "end": "1060720"
  },
  {
    "text": "is where tooling gets really really useful imagine that this was like a 500 line object later on trust me i've seen",
    "start": "1060720",
    "end": "1067360"
  },
  {
    "text": "lots of them in javascript code and there's something wrong in there somewhere how the hell do you figure that out right i mean that's what tools",
    "start": "1067360",
    "end": "1073520"
  },
  {
    "text": "are supposed to do for you and that's what we that's what we do here",
    "start": "1073520",
    "end": "1078799"
  },
  {
    "text": "okay um another place where this kind of",
    "start": "1078799",
    "end": "1084080"
  },
  {
    "text": "contextual typing is interesting is um well actually i should show here that",
    "start": "1084080",
    "end": "1090080"
  },
  {
    "text": "even even if i get rid of that type annotation you'll note that we can still",
    "start": "1090080",
    "end": "1095280"
  },
  {
    "text": "infer that value is a number because you've said that you're returning an accumulator and accumulator has an ad",
    "start": "1095280",
    "end": "1102000"
  },
  {
    "text": "function that takes a number and therefore we can relate that and still flow the types in the other in the other",
    "start": "1102000",
    "end": "1107679"
  },
  {
    "text": "direction right this turns out to be useful for example if i say",
    "start": "1107679",
    "end": "1113200"
  },
  {
    "text": "document dot on mouse move",
    "start": "1113200",
    "end": "1118400"
  },
  {
    "text": "here which is one of the events you can handle equals function of e and then",
    "start": "1119280",
    "end": "1124880"
  },
  {
    "text": "open curly e dot and you'll note that we actually know what e is here and the way we know it is",
    "start": "1124880",
    "end": "1132720"
  },
  {
    "text": "because we know what document is document is the root document document has an on mouse move that takes a mouse",
    "start": "1132720",
    "end": "1138720"
  },
  {
    "text": "event and returns any and therefore we can push the type information into e as a mouse event and therefore we can give",
    "start": "1138720",
    "end": "1145039"
  },
  {
    "text": "you statement completion on e when you say dot and so lots of lots of inference going on",
    "start": "1145039",
    "end": "1151520"
  },
  {
    "text": "the cool thing is i can actually go to the definition of mouse move and and look at what this thing is",
    "start": "1151520",
    "end": "1157520"
  },
  {
    "text": "and that jumps you into in this particular case a file called lib.d.t.s",
    "start": "1157520",
    "end": "1162880"
  },
  {
    "text": "and this is 8 000 lines of typescript declarations that declare the entire",
    "start": "1162880",
    "end": "1167919"
  },
  {
    "text": "structure of the dom and the javascript runtime library this is actually generated from the idl files that are",
    "start": "1167919",
    "end": "1174240"
  },
  {
    "text": "standardized so so we know it's correct and the type information is actually",
    "start": "1174240",
    "end": "1179440"
  },
  {
    "text": "available um it's just that javascript itself has no way of conveying this information to you other",
    "start": "1179440",
    "end": "1185679"
  },
  {
    "text": "than at runtime when it's too late right so so here we can see that mouse move is",
    "start": "1185679",
    "end": "1191039"
  },
  {
    "text": "the thing that takes a mouse event that we can actually navigate around and and check out all of these things uh and",
    "start": "1191039",
    "end": "1196080"
  },
  {
    "text": "then see what what their shapes are now the thing that's really neat about this is",
    "start": "1196080",
    "end": "1202080"
  },
  {
    "text": "that we can provide this file just as an adjunct file on the side and once you have that information the tooling lights",
    "start": "1202080",
    "end": "1209360"
  },
  {
    "text": "up and we can do that for any javascript library out there so we and we actually do do that for node.js and we do it for",
    "start": "1209360",
    "end": "1216880"
  },
  {
    "text": "jquery in the typescript distribution so so just as an adjunct file we can provide",
    "start": "1216880",
    "end": "1224159"
  },
  {
    "text": "the missing information right and then light up the tooling based on on that and i think that is just super super",
    "start": "1224159",
    "end": "1230480"
  },
  {
    "text": "valuable okay um",
    "start": "1230480",
    "end": "1236080"
  },
  {
    "text": "so let me uh let's see where where did i want to go from here let me go back and just sort",
    "start": "1236080",
    "end": "1241440"
  },
  {
    "text": "of summarize a little bit about uh the typescript thing here so basically what what what typescript does is it",
    "start": "1241440",
    "end": "1248159"
  },
  {
    "text": "formalizes javascript's type system and provides a static view of it but we're",
    "start": "1248159",
    "end": "1253280"
  },
  {
    "start": "1252000",
    "end": "2371000"
  },
  {
    "text": "not trying to invent a new type system we're actually bending over backwards to stay true to what really is javascript's",
    "start": "1253280",
    "end": "1260480"
  },
  {
    "text": "type system you see that we do a lot of type inference and structural typing and",
    "start": "1260480",
    "end": "1265520"
  },
  {
    "text": "and and the reality is that when you're writing typescript code you actually end up writing very few type annotations and",
    "start": "1265520",
    "end": "1272240"
  },
  {
    "text": "then we just flow from from from there as i said it works with existing javascript libraries",
    "start": "1272240",
    "end": "1279440"
  },
  {
    "text": "and for the type system geeks out there this is not a provably",
    "start": "1279440",
    "end": "1284799"
  },
  {
    "text": "type safe type system because javascript is not in a sense provably type safe",
    "start": "1284799",
    "end": "1290000"
  },
  {
    "text": "well you do first have to define what you really mean by that but but the point here is that it is not a type",
    "start": "1290000",
    "end": "1295520"
  },
  {
    "text": "system for the traditional sakes of type systems like performance or like strict",
    "start": "1295520",
    "end": "1301840"
  },
  {
    "text": "validation rather it is a type system that helps you author code and that reflects you know the reality if you",
    "start": "1301840",
    "end": "1308320"
  },
  {
    "text": "will but it is optional and and you don't have to use it but when you do use it the tooling can help you more",
    "start": "1308320",
    "end": "1316799"
  },
  {
    "text": "okay let me try to jump back and show you some of the uh other",
    "start": "1317039",
    "end": "1322400"
  },
  {
    "text": "features that are available uh i wanted to show classes and modules and we'll go back to the playground because it's",
    "start": "1322400",
    "end": "1328159"
  },
  {
    "text": "instructive to see the code that the compiler generates so typescript supports classes so i can",
    "start": "1328159",
    "end": "1334240"
  },
  {
    "text": "declare class point for example here and say it has two fields uh sorry",
    "start": "1334240",
    "end": "1340159"
  },
  {
    "text": "my typing is not great x colon number and uh y colon number",
    "start": "1340159",
    "end": "1348320"
  },
  {
    "text": "like so um and you see that we generate the code that is",
    "start": "1348320",
    "end": "1353600"
  },
  {
    "text": "sort of typical for for for writing classes where you have a closure uh in which you have a constructor function",
    "start": "1353600",
    "end": "1360000"
  },
  {
    "text": "that we then return out of the out of the closure and now i can save our p equals new point",
    "start": "1360000",
    "end": "1366480"
  },
  {
    "text": "and now we know that on p there's an x and a y so we can give you statement completion so you can say p dot x equals",
    "start": "1366480",
    "end": "1372559"
  },
  {
    "text": "10 p dot y equals 20 and so on okay",
    "start": "1372559",
    "end": "1377760"
  },
  {
    "text": "now of course it would be nice to be able to give the arguments to my point here but",
    "start": "1377760",
    "end": "1382799"
  },
  {
    "text": "if i do i get an error because we haven't yet written a constructor but we could go right one",
    "start": "1382799",
    "end": "1389840"
  },
  {
    "text": "constructor of x colon number comma y colon number",
    "start": "1389919",
    "end": "1395520"
  },
  {
    "text": "and in here we can say this dot x and again you see we get statement completion on this because we know where",
    "start": "1395520",
    "end": "1401919"
  },
  {
    "text": "where you're at this dot y equals y uh and so forth now this this class syntax by the way is",
    "start": "1401919",
    "end": "1408400"
  },
  {
    "text": "aligned with ecmascript sixes current proposals for classes so so the class",
    "start": "1408400",
    "end": "1413440"
  },
  {
    "text": "and module extensions that you see in typescript are actually in a sense a preview of what's coming in ecmascript 6",
    "start": "1413440",
    "end": "1419440"
  },
  {
    "text": "but then on top of that we have layered optional static typing which is not part of what what ecmascript 6 is",
    "start": "1419440",
    "end": "1425760"
  },
  {
    "text": "is doing so of course you can have uh methods in",
    "start": "1425760",
    "end": "1430880"
  },
  {
    "text": "classes so let's write a dist method here and let's say in here we want to return math dot and again here you see i",
    "start": "1430880",
    "end": "1437520"
  },
  {
    "text": "get statement completion on all of the all the stuff that's available in in the standard runtime library so i want to",
    "start": "1437520",
    "end": "1443919"
  },
  {
    "text": "return this dot x times this dot x plus this dot y times this dot y",
    "start": "1443919",
    "end": "1450159"
  },
  {
    "text": "for example um let's format that a little nicer okay so one",
    "start": "1450159",
    "end": "1456960"
  },
  {
    "text": "thing you see here is that instance variables go on this but methods go on the prototype um and this",
    "start": "1456960",
    "end": "1464640"
  },
  {
    "text": "is exactly how javascript or ecmascript 6 is planning to do classes and this is basically the typical",
    "start": "1464640",
    "end": "1471360"
  },
  {
    "text": "pattern that people use them when they write prototype chains in javascript",
    "start": "1471360",
    "end": "1479120"
  },
  {
    "text": "we allow some other things in classes here for example i could declare",
    "start": "1480320",
    "end": "1485919"
  },
  {
    "text": "static field static origin equals new point of zero comma zero for",
    "start": "1485919",
    "end": "1491840"
  },
  {
    "text": "example and you'll note now that statics go on the constructor function object",
    "start": "1491840",
    "end": "1497360"
  },
  {
    "text": "methods go on to prototype instance variables go on the instance and so forth and now we understand what this",
    "start": "1497360",
    "end": "1503760"
  },
  {
    "text": "means so when i say point dot you see that i get an origin member on point",
    "start": "1503760",
    "end": "1510480"
  },
  {
    "text": "okay we also allow allow you to write private members but",
    "start": "1511120",
    "end": "1516720"
  },
  {
    "text": "but with a twist so i could say for example private color oops",
    "start": "1516720",
    "end": "1524159"
  },
  {
    "text": "hold on string like so and now down here if i say",
    "start": "1524159",
    "end": "1531600"
  },
  {
    "text": "this dot color equals red you'll see that we generate the code and",
    "start": "1532880",
    "end": "1539679"
  },
  {
    "text": "you see that this statement completion on this shows the color member but if i go down here and",
    "start": "1539679",
    "end": "1545039"
  },
  {
    "text": "say p dot you'll see that there's no caller member on p because it's private so we limit you to access only within",
    "start": "1545039",
    "end": "1552240"
  },
  {
    "text": "the class if you declare things to be private however in the generated code we simply just generate a normal member",
    "start": "1552240",
    "end": "1558240"
  },
  {
    "text": "call color because there is no way of having private members in javascript at least not currently uh once ecmascript",
    "start": "1558240",
    "end": "1564960"
  },
  {
    "text": "six rolls around with private names we could target private names for this kind of code generation and and perhaps do a",
    "start": "1564960",
    "end": "1571360"
  },
  {
    "text": "better job but right now we do the best we can okay uh a couple of other neat features",
    "start": "1571360",
    "end": "1579279"
  },
  {
    "text": "uh we support what we call automatic properties this pattern of declaring fields taking constructor arguments with",
    "start": "1579279",
    "end": "1586080"
  },
  {
    "text": "the same names as the as the as the properties and then saying this dot blah blah is super super common so we have a",
    "start": "1586080",
    "end": "1592799"
  },
  {
    "text": "nice shorthand for that where instead you can simply on the constructor argument say",
    "start": "1592799",
    "end": "1599520"
  },
  {
    "text": "public here and public here",
    "start": "1599520",
    "end": "1604880"
  },
  {
    "text": "and then we automatically inject properties with those names and inject the code to initialize those properties",
    "start": "1605440",
    "end": "1612880"
  },
  {
    "text": "we also support another ecmascript 6 feature which is default argument values so i could give",
    "start": "1612880",
    "end": "1620240"
  },
  {
    "text": "these arguments default values just by saying equals something and then we inject the correct code to check whether",
    "start": "1620240",
    "end": "1626400"
  },
  {
    "text": "they're undefined and so on and now of course the the type system oops the type",
    "start": "1626400",
    "end": "1632000"
  },
  {
    "text": "system now knows that it is permissible to omit the arguments uh in",
    "start": "1632000",
    "end": "1637520"
  },
  {
    "text": "the in the call so we don't get a reds quickly on that",
    "start": "1637520",
    "end": "1642559"
  },
  {
    "text": "okay that's well i should also show that we of",
    "start": "1643279",
    "end": "1649120"
  },
  {
    "text": "course support inheritance for classes let's try to declare class point 3d",
    "start": "1649120",
    "end": "1654399"
  },
  {
    "text": "extends point like this and then let's just take a look at what",
    "start": "1654399",
    "end": "1660799"
  },
  {
    "text": "happened in our generator code so we still have our point class right here and now we also have a",
    "start": "1660799",
    "end": "1666159"
  },
  {
    "text": "0.3 d and you notice that the code gen for that is a little bit different we generate a function closure that takes",
    "start": "1666159",
    "end": "1671440"
  },
  {
    "text": "the base class as an argument and then we call a helper extends that sets up the prototype chain the way you're",
    "start": "1671440",
    "end": "1677520"
  },
  {
    "text": "supposed to do in javascript this is why classes are hard in javascript because you're supposed to do all of these crazy things right",
    "start": "1677520",
    "end": "1685520"
  },
  {
    "text": "this extends method is injected into the generated source code only if there are clas derived classes",
    "start": "1685520",
    "end": "1692640"
  },
  {
    "text": "in that file and that is the only time we inject code that you didn't write into the output file otherwise the the",
    "start": "1692640",
    "end": "1700080"
  },
  {
    "text": "code you get is simply the method bodies that you wrote so there is no runtime library or new collection classes or",
    "start": "1700080",
    "end": "1706880"
  },
  {
    "text": "blah blah blah anything associated with typescript it is simply just javascript",
    "start": "1706880",
    "end": "1712080"
  },
  {
    "text": "okay i could in here write myself a constructor that takes x colon number",
    "start": "1712080",
    "end": "1719760"
  },
  {
    "text": "from my y colon number comma say public add an extra property z",
    "start": "1719760",
    "end": "1725919"
  },
  {
    "text": "colon number like that and then in here say call",
    "start": "1725919",
    "end": "1731440"
  },
  {
    "text": "super of x comma y for example and now you see that we generate the appropriate code for making a call to the super",
    "start": "1731440",
    "end": "1738880"
  },
  {
    "text": "constructor etc etc um yeah so that's uh classes um",
    "start": "1738880",
    "end": "1746720"
  },
  {
    "text": "what i wanted to show next is modules let's try to",
    "start": "1746720",
    "end": "1753520"
  },
  {
    "text": "actually let me try and grab a little snippet of code over here what i wanted to show before that",
    "start": "1753520",
    "end": "1759840"
  },
  {
    "text": "in fact is arrow functions so let me go to the toolbox and let me grab uh",
    "start": "1759840",
    "end": "1765120"
  },
  {
    "text": "tracker here we go okay let me paste that in here okay here's a little piece of code uh",
    "start": "1765120",
    "end": "1772399"
  },
  {
    "text": "whoop scroll this up so you can see what's going on here's a little class that declares a counter instance",
    "start": "1772399",
    "end": "1778320"
  },
  {
    "text": "variable and then it has a start method and in the start method we capture the on mouse move event and have a little",
    "start": "1778320",
    "end": "1783919"
  },
  {
    "text": "handler that increments our counter and then does a console.log of of the counter so let's try and run it so you",
    "start": "1783919",
    "end": "1790080"
  },
  {
    "text": "can actually run the output here in the playground let's bring up the f12 tools and go to",
    "start": "1790080",
    "end": "1795520"
  },
  {
    "text": "the console window and then we see that hm there's there's something wrong with our code we're getting a bunch of nands",
    "start": "1795520",
    "end": "1801840"
  },
  {
    "text": "out of this if we go back and look at what's going on here",
    "start": "1801840",
    "end": "1807360"
  },
  {
    "text": "the problem that we have here and if i had actually been typing this code in we would have already seen what what the",
    "start": "1807360",
    "end": "1812559"
  },
  {
    "text": "problem was is but if we hover over this now you can see that this is of type any",
    "start": "1812559",
    "end": "1817919"
  },
  {
    "text": "meaning that we do not know the type of this here and therefore we wouldn't have gotten statement completion to show count and so forth um",
    "start": "1817919",
    "end": "1825039"
  },
  {
    "text": "but the reason it's a problem or the reason this is is of type any is that you never",
    "start": "1825039",
    "end": "1831520"
  },
  {
    "text": "know what this you're gonna get in a function call and sometimes you're going to get the wrong this for example",
    "start": "1831520",
    "end": "1837360"
  },
  {
    "text": "in a mouse move event you get the element that the move occurred on you don't get the this of the surrounding",
    "start": "1837360",
    "end": "1842640"
  },
  {
    "text": "context now any everyone's gotten bit by this problem and it's got people have gotten",
    "start": "1842640",
    "end": "1848080"
  },
  {
    "text": "bit enough by it that there's a proposal in ecmascript 6 to support what's called arrow functions or what we in c-sharp",
    "start": "1848080",
    "end": "1854880"
  },
  {
    "text": "called lambda functions so i could instead write this code as e-arrow",
    "start": "1854880",
    "end": "1860399"
  },
  {
    "text": "and then in a lambda function this is always",
    "start": "1860399",
    "end": "1865519"
  },
  {
    "text": "of the type of the surrounding context or it's lexically scoped meaning that i get the this of the outer function",
    "start": "1865519",
    "end": "1872799"
  },
  {
    "text": "and the way we code generate that is we do the nasty little thing that you normally",
    "start": "1872799",
    "end": "1878720"
  },
  {
    "text": "have to do where you say bar that equals this and then that dot inside your function or whatever we can simply code",
    "start": "1878720",
    "end": "1884000"
  },
  {
    "text": "generate that for you instead here what's interesting about okay and let's let's actually just sort of run and",
    "start": "1884000",
    "end": "1890480"
  },
  {
    "text": "prove to ourselves that that it now works yep we're seeing what",
    "start": "1890480",
    "end": "1895840"
  },
  {
    "text": "we're supposed to see i think that's interesting too is if in my little mouse move here let's say that",
    "start": "1895840",
    "end": "1901919"
  },
  {
    "text": "i did not refer to the outer this then you'll note that we don't generate that",
    "start": "1901919",
    "end": "1907360"
  },
  {
    "text": "that closure so so we only inject it if you actually do it and then we rewrite it to underbar this instead",
    "start": "1907360",
    "end": "1915440"
  },
  {
    "text": "okay now the other thing we support in typescript is modules let's say i wanted to put",
    "start": "1916480",
    "end": "1922640"
  },
  {
    "text": "this class in a module i could write here module",
    "start": "1922640",
    "end": "1928320"
  },
  {
    "text": "open curly and down here close curly oops of course",
    "start": "1928320",
    "end": "1935200"
  },
  {
    "text": "we want to give this module a name we'll call it module utils and you'll see that what we generate for a module again is a",
    "start": "1935200",
    "end": "1941840"
  },
  {
    "text": "function closure where where we then for all of the things that you export out of",
    "start": "1941840",
    "end": "1947200"
  },
  {
    "text": "the module if i say export class tracker we then create a property on the module",
    "start": "1947200",
    "end": "1954320"
  },
  {
    "text": "object for each of the exported items in there so this is also a very very typical",
    "start": "1954320",
    "end": "1959600"
  },
  {
    "text": "pattern in in javascript and now of course we get red squigglies here because there is no tracker in the",
    "start": "1959600",
    "end": "1965440"
  },
  {
    "text": "global scope it is now utils dot and if i say dot you see that there's a tracker in there and that's that's the one that",
    "start": "1965440",
    "end": "1971840"
  },
  {
    "text": "that that we want right i can actually go deep with these things",
    "start": "1971840",
    "end": "1977799"
  },
  {
    "text": "acme.cor.utils and you see we just nest function closures uh sort of off the screen there",
    "start": "1977799",
    "end": "1985120"
  },
  {
    "text": "and now i have to refer to it act as acme.core.utils but you'll note that we do track it in",
    "start": "1985120",
    "end": "1990880"
  },
  {
    "text": "the type system so we know that the name of this type is acme.core.utils in fact we even allow you to import",
    "start": "1990880",
    "end": "1997600"
  },
  {
    "text": "modules so i can say import acu equals acme dot core dot utils for example and then",
    "start": "1997600",
    "end": "2006559"
  },
  {
    "text": "here i can use the shorthand for for that acu and if you look down here you'll see",
    "start": "2006559",
    "end": "2012640"
  },
  {
    "text": "that what we've generated is just a variable that grabs that module object and then you use that to reference",
    "start": "2012640",
    "end": "2019279"
  },
  {
    "text": "instead these modules we we call internal modules and they're they're very typical like jquery for example is",
    "start": "2019279",
    "end": "2025519"
  },
  {
    "text": "an example of a module called dollar right that has a whole bunch of stuff in it there's another kind of modules that are",
    "start": "2025519",
    "end": "2032720"
  },
  {
    "text": "that are in common use out there called common js modules and node.js uses those",
    "start": "2032720",
    "end": "2039120"
  },
  {
    "text": "and those are basically like source files that get loaded dynamically at runtime and have the ability to state",
    "start": "2039120",
    "end": "2046399"
  },
  {
    "text": "their requirements in terms of other modules and state their exports in terms of an exports object",
    "start": "2046399",
    "end": "2052800"
  },
  {
    "text": "and we support those so let me actually try to close down",
    "start": "2052800",
    "end": "2058158"
  },
  {
    "text": "the playground here and then let's go back in visual studio",
    "start": "2058159",
    "end": "2064800"
  },
  {
    "text": "and let's try to open up a server.ts here and let me try to write a",
    "start": "2064960",
    "end": "2071919"
  },
  {
    "text": "little two module node server application so",
    "start": "2071919",
    "end": "2077839"
  },
  {
    "text": "first thing i'm going to do is i'm going to import or reference the static typing of",
    "start": "2077839",
    "end": "2085440"
  },
  {
    "text": "node.js which is in a declaration file called node.d.t.s and i simply place a",
    "start": "2085440",
    "end": "2092320"
  },
  {
    "text": "reference in my in my source file which tells the compiler that when you compile this file also include that",
    "start": "2092320",
    "end": "2098640"
  },
  {
    "text": "other file in in the compilation and now i can say import http equals",
    "start": "2098640",
    "end": "2105359"
  },
  {
    "text": "module of http which is one of the modules defined by node and in fact if i go to",
    "start": "2105359",
    "end": "2113040"
  },
  {
    "text": "definition on this guy you'll see that it jumps me into the",
    "start": "2113040",
    "end": "2118480"
  },
  {
    "text": "adjunct static type information file for http and this is what it is itself powering",
    "start": "2118480",
    "end": "2125440"
  },
  {
    "text": "off of in order to give me statement completion help okay so let me now try to write a",
    "start": "2125440",
    "end": "2131119"
  },
  {
    "text": "function here export function uh simple server",
    "start": "2131119",
    "end": "2137119"
  },
  {
    "text": "ah that takes a port colon number comma message go on string",
    "start": "2137680",
    "end": "2145839"
  },
  {
    "text": "like so uh and in here let's say we want to call http.createserver and you see we get",
    "start": "2146400",
    "end": "2153040"
  },
  {
    "text": "statement completion on node here create server in turn is a thing that takes a callback function that has two",
    "start": "2153040",
    "end": "2159440"
  },
  {
    "text": "parameters request and response so i can give those guys and then in here i can",
    "start": "2159440",
    "end": "2166400"
  },
  {
    "text": "write the body of my of my code now i'm gonna just paste in some stuff here so",
    "start": "2166400",
    "end": "2171599"
  },
  {
    "text": "so you don't have to watch me type at all but note one thing that when i type",
    "start": "2171599",
    "end": "2177520"
  },
  {
    "text": "result dot we actually get statement completion on that so we flowed the types from the",
    "start": "2177520",
    "end": "2183680"
  },
  {
    "text": "declaration of create server into the callback function because we know what",
    "start": "2183680",
    "end": "2189440"
  },
  {
    "text": "the types of those callback arguments are and so we can flow it all without you having to explicitly state it",
    "start": "2189440",
    "end": "2195119"
  },
  {
    "text": "anywhere okay let's just go back here and say dot",
    "start": "2195119",
    "end": "2200480"
  },
  {
    "text": "listen uh of 1337. or no sorry a port",
    "start": "2200480",
    "end": "2206560"
  },
  {
    "text": "which was the argument that we got passed okay so that's the first module of our of our little server let me uh",
    "start": "2206560",
    "end": "2212560"
  },
  {
    "text": "create another let's see here our recent files let me",
    "start": "2212560",
    "end": "2218880"
  },
  {
    "text": "get hello this guy here open another empty file and now let's create a module that uses",
    "start": "2218880",
    "end": "2225599"
  },
  {
    "text": "the module that we just wrote so i'm going to say import server whoops",
    "start": "2225599",
    "end": "2232079"
  },
  {
    "text": "server equals module of server",
    "start": "2232880",
    "end": "2238079"
  },
  {
    "text": "and now i actually have referenced the module that i just wrote and so if i say server dot now i actually get statement",
    "start": "2238079",
    "end": "2245359"
  },
  {
    "text": "completion on the module that i just wrote so i can now call simple server and it tells me you got to pass me a",
    "start": "2245359",
    "end": "2250880"
  },
  {
    "text": "port number so 1337 comma hello go to uh",
    "start": "2250880",
    "end": "2257359"
  },
  {
    "text": "for example and then uh let's just also just say console",
    "start": "2257359",
    "end": "2262640"
  },
  {
    "text": "dot log of uh listening",
    "start": "2262640",
    "end": "2268240"
  },
  {
    "text": "like so there and let's save that guy all right and now let me jump out and",
    "start": "2268240",
    "end": "2274880"
  },
  {
    "text": "actually use the uh command line compiler so we'll switch to uh node uh",
    "start": "2274880",
    "end": "2280880"
  },
  {
    "text": "sorry demo uh and node and in here you'll see now that we have our three files the the",
    "start": "2280880",
    "end": "2287680"
  },
  {
    "text": "node declaration file and the two typescript files that i wrote now i can simply tell it to compile hello.ts",
    "start": "2287680",
    "end": "2294400"
  },
  {
    "text": "i don't even have to tell it about server.ts because the compiler will automatically trace all of my imports",
    "start": "2294400",
    "end": "2300320"
  },
  {
    "text": "and all of the references that i have and find the entire graph of files that need to be compiled and then compile",
    "start": "2300320",
    "end": "2306079"
  },
  {
    "text": "those so if we look at the output that got generated we now have two files hello.js and hello our",
    "start": "2306079",
    "end": "2312800"
  },
  {
    "text": "server.js we can just sort of take a look here's server.js if we oops",
    "start": "2312800",
    "end": "2319359"
  },
  {
    "text": "let's try and take a look at that and you'll see that the code that's in there is the code that i wrote with my import changed into",
    "start": "2319680",
    "end": "2326000"
  },
  {
    "text": "a require and if we type hello.js you'll see again",
    "start": "2326000",
    "end": "2331280"
  },
  {
    "text": "it's pretty much the same code right let's try to run a node on this server",
    "start": "2331280",
    "end": "2336640"
  },
  {
    "text": "so node hello and it's listening and now let's go to uh whoops let's get",
    "start": "2336640",
    "end": "2342960"
  },
  {
    "text": "rid of this guy there and then let's go to localhost 1337.",
    "start": "2342960",
    "end": "2351560"
  },
  {
    "text": "there and we should see hello go to there we go yep okay so that's a little bit about",
    "start": "2352000",
    "end": "2358320"
  },
  {
    "text": "classes and modules uh i could just quickly summarize here that that",
    "start": "2358320",
    "end": "2364800"
  },
  {
    "text": "basically you know these are the things that allow us to do scalable app development right and and",
    "start": "2364800",
    "end": "2371119"
  },
  {
    "start": "2371000",
    "end": "3127000"
  },
  {
    "text": "this is how you you get to write really large applications and have tools that understand what what the contracts are",
    "start": "2371119",
    "end": "2377200"
  },
  {
    "text": "between different modules and have them enforced so you find the errors before you run your app instead of whilst",
    "start": "2377200",
    "end": "2382640"
  },
  {
    "text": "you're running it um we're aligned with the emerging standards so as i said earlier classes modules arrow functions",
    "start": "2382640",
    "end": "2389280"
  },
  {
    "text": "are all things that are proposed for ecmascript 6 that that we're taking inspiration from and we support",
    "start": "2389280",
    "end": "2395440"
  },
  {
    "text": "the two popular module systems that are out there common js which is used by node.js and then amd modules which",
    "start": "2395440",
    "end": "2402000"
  },
  {
    "text": "probably the most common loader there's require a dot js and that's used for asynchronous module",
    "start": "2402000",
    "end": "2408480"
  },
  {
    "text": "loading in a browser and and we support both of those okay last thing i wanted to show was",
    "start": "2408480",
    "end": "2414240"
  },
  {
    "text": "just uh a few larger applications because we've been doing a bunch of little stuff here so let's try to load",
    "start": "2414240",
    "end": "2420720"
  },
  {
    "text": "up some of our samples first thing i'm going to open is uh",
    "start": "2420720",
    "end": "2427838"
  },
  {
    "text": "let's see demo slash image board this is one of the samples that that we include and let's just load",
    "start": "2428000",
    "end": "2435119"
  },
  {
    "text": "up app.ts so this is a multi-module node.js application that uses mongodb",
    "start": "2435119",
    "end": "2442400"
  },
  {
    "text": "and and the express framework so in here you see that we import",
    "start": "2442400",
    "end": "2449119"
  },
  {
    "text": "modules from various places http and url come from node uh db is actually a",
    "start": "2449119",
    "end": "2454560"
  },
  {
    "text": "module that we wrote we can navigate in and look at it and in here you see that that in turn uses mongodb so we can",
    "start": "2454560",
    "end": "2461040"
  },
  {
    "text": "navigate into that and check out the static typing of mongodb in here you see that we open we create a",
    "start": "2461040",
    "end": "2467520"
  },
  {
    "text": "server create a connection to it and then just for convenience we've defined some interface types that",
    "start": "2467520",
    "end": "2474319"
  },
  {
    "text": "represent the entities that we're storing in the database because they're all of the same type and it's really",
    "start": "2474319",
    "end": "2480160"
  },
  {
    "text": "actually convenient to have statement completion and validation on these entities that we that we're putting the",
    "start": "2480160",
    "end": "2485520"
  },
  {
    "text": "right thing into into the database um and then we've also written some helper",
    "start": "2485520",
    "end": "2490720"
  },
  {
    "text": "functions like get user here that takes an id and then asynchronously calls you back when it's fetched the user from the",
    "start": "2490720",
    "end": "2496800"
  },
  {
    "text": "database and here you see we use the interface files that we that we just declared now we can use the ide to",
    "start": "2496800",
    "end": "2502960"
  },
  {
    "text": "navigate in this larger app we can for example find all references of get user and you'll see that here's the",
    "start": "2502960",
    "end": "2508400"
  },
  {
    "text": "declaration of it and then there are two references over in the app here's one that that i think is",
    "start": "2508400",
    "end": "2514640"
  },
  {
    "text": "interesting if you look at this this function here there are zero type annotations in this",
    "start": "2514640",
    "end": "2520800"
  },
  {
    "text": "function yet we know all the secrets about it because app elsewhere is typed as being",
    "start": "2520800",
    "end": "2528079"
  },
  {
    "text": "uh of type express server we know that express server has a get method uh that takes",
    "start": "2528079",
    "end": "2534160"
  },
  {
    "text": "that has a bunch of overloads and one of them is one that takes a function that returns a that that has two arguments",
    "start": "2534160",
    "end": "2540000"
  },
  {
    "text": "request and response and so we can infer what their types are we know what the type of user is the one that we declared",
    "start": "2540000",
    "end": "2546240"
  },
  {
    "text": "over in the database module and so when we're in here if i say request dot you see that i get statement completion if i",
    "start": "2546240",
    "end": "2553520"
  },
  {
    "text": "say user dot you see that i get statement completion so we know all of this stuff without having use to state",
    "start": "2553520",
    "end": "2559440"
  },
  {
    "text": "it over and over uh it's inferred uh from the code",
    "start": "2559440",
    "end": "2564560"
  },
  {
    "text": "now in the interest of time i'm not going to actually run this one i'm going to try and switch and show you",
    "start": "2564560",
    "end": "2570960"
  },
  {
    "text": "another little sample which is one called warship",
    "start": "2570960",
    "end": "2577839"
  },
  {
    "text": "and let's try to load that guy up here and let's get rid of this dude no and this dude",
    "start": "2577839",
    "end": "2583760"
  },
  {
    "text": "here this is a little app that uh a browser app that uses jquery and jquery ui and",
    "start": "2583760",
    "end": "2590720"
  },
  {
    "text": "you'll see that we referenced the typing for jquery and for jquery ui um",
    "start": "2590720",
    "end": "2596240"
  },
  {
    "text": "and let me show you how this works then because the the pattern between these two libraries is that that jquery ui is",
    "start": "2596240",
    "end": "2604079"
  },
  {
    "text": "a library that builds on top of jquery it actually sort of monkey patches into",
    "start": "2604079",
    "end": "2609280"
  },
  {
    "text": "the dollar object and adds additional uh properties uh that that are for for for",
    "start": "2609280",
    "end": "2615599"
  },
  {
    "text": "ui manipulation so if we look at dollar well first of all you'll see that we now",
    "start": "2615599",
    "end": "2620720"
  },
  {
    "text": "have type information for jquery so we know the seven overloads of of dollar um",
    "start": "2620720",
    "end": "2625920"
  },
  {
    "text": "we're going to pick the one that takes a string and then we're going to press dot on it and here you see all",
    "start": "2625920",
    "end": "2631200"
  },
  {
    "text": "of the things that that you can say on dollar now this is the stuff that saves you from having the cheat sheet",
    "start": "2631200",
    "end": "2637520"
  },
  {
    "text": "next to you or or looking up in some html documentation right this is what tools are supposed to do for you um if",
    "start": "2637520",
    "end": "2644319"
  },
  {
    "text": "we pick ad class uh then we can actually go to the definition of that guy and you see now we jump into the jquery",
    "start": "2644319",
    "end": "2651520"
  },
  {
    "text": "declaration file and you see here's the main interface for jquery and it has an addpass in fact it has two overloads of",
    "start": "2651520",
    "end": "2657119"
  },
  {
    "text": "of add class now if we go back let's say we pick one of the ones",
    "start": "2657119",
    "end": "2663440"
  },
  {
    "text": "from jquery ui like draggable for example and let's say we go to definition on that guy",
    "start": "2663440",
    "end": "2669920"
  },
  {
    "text": "you'll note that we jump into a different file that declares the same interface",
    "start": "2669920",
    "end": "2675440"
  },
  {
    "text": "so in typescript interfaces are open-ended and multiple files can contribute to the same interface and",
    "start": "2675440",
    "end": "2682319"
  },
  {
    "text": "that's how we model this notion that one module does something and then another",
    "start": "2682319",
    "end": "2687440"
  },
  {
    "text": "module builds on that first module by adding things to its types and and so",
    "start": "2687440",
    "end": "2692640"
  },
  {
    "text": "we can model that in the type system and that's just super useful",
    "start": "2692640",
    "end": "2698318"
  },
  {
    "text": "okay last thing i wanted to show is a really large project uh the typescript",
    "start": "2698960",
    "end": "2704720"
  },
  {
    "text": "compiler itself uh let me try to load that up",
    "start": "2704720",
    "end": "2709599"
  },
  {
    "text": "here and we'll just pick one of the files out of the compiler the compiler is about 26 000 lines of types of",
    "start": "2710240",
    "end": "2716319"
  },
  {
    "text": "typescript code uh here i loaded up the file that contains the abstract syntax",
    "start": "2716319",
    "end": "2721520"
  },
  {
    "text": "tree class definitions um and i and as i said all of this is open source so it's",
    "start": "2721520",
    "end": "2726640"
  },
  {
    "text": "it's stuff that you can just grab and look at we can navigate in here for example go",
    "start": "2726640",
    "end": "2731760"
  },
  {
    "text": "to the definition of the case statement class which is a class that extends statement and so forth and so i can",
    "start": "2731760",
    "end": "2737200"
  },
  {
    "text": "navigate around the entire compiler now you saw that at the top of this file i",
    "start": "2737200",
    "end": "2742880"
  },
  {
    "text": "reference a file called typescript.ts if we go to the solution explorer in visual studio you see that we've",
    "start": "2742880",
    "end": "2748880"
  },
  {
    "text": "actually inferred the entire project that i'm working on here from",
    "start": "2748880",
    "end": "2754079"
  },
  {
    "text": "those references because if we go to typescript.ts you'll see that that in turn references",
    "start": "2754079",
    "end": "2760480"
  },
  {
    "text": "a whole bunch of other files and through these references the compiler can get the full picture and it almost doesn't",
    "start": "2760480",
    "end": "2766000"
  },
  {
    "text": "matter which file you open we know the context and therefore we can provide you all of the all of the appropriate",
    "start": "2766000",
    "end": "2772720"
  },
  {
    "text": "information so in here in the this is the main file for the typescript compiler there's a class",
    "start": "2772720",
    "end": "2778640"
  },
  {
    "text": "called typescript compiler not surprising uh typescript compiler instantiates a parser we can go to the",
    "start": "2778640",
    "end": "2784400"
  },
  {
    "text": "definition of the parser the parser in turn instantiates a scanner we can go to the definition of that guy and and so",
    "start": "2784400",
    "end": "2790800"
  },
  {
    "text": "you can sort of navigate around very easily and see how the compiler is built what i wanted to show though is is",
    "start": "2790800",
    "end": "2798319"
  },
  {
    "text": "one of the really neat things that you can do once you have static type information and that's things like refactorings and one of the refactorings",
    "start": "2798319",
    "end": "2804800"
  },
  {
    "text": "we support is rename for example let's say that here in the scanner i have a",
    "start": "2804800",
    "end": "2812400"
  },
  {
    "text": "field called called line number that i okay yeah i forgot to rename that back to uh to line",
    "start": "2812560",
    "end": "2819520"
  },
  {
    "text": "from the last demo i gave anyway there's a field called line number if i look at all the places that this guy is",
    "start": "2819520",
    "end": "2825680"
  },
  {
    "text": "referenced if i do go to definition on this guy so i go to find all references on this guy you'll see that",
    "start": "2825680",
    "end": "2832640"
  },
  {
    "text": "there are a bunch of references in the scanner itself and then there are some over in the parser that we can look at",
    "start": "2832640",
    "end": "2837839"
  },
  {
    "text": "uh and here's one for example uh in the parser where we reference a line now",
    "start": "2837839",
    "end": "2844880"
  },
  {
    "text": "up here there's also a property called line okay so let me first go back to the",
    "start": "2844880",
    "end": "2850160"
  },
  {
    "text": "scanner and try to rename here refactor rename and call this guy line",
    "start": "2850160",
    "end": "2857839"
  },
  {
    "text": "instead okay now if i go back to the parser you see that it has now renamed line number",
    "start": "2857839",
    "end": "2863520"
  },
  {
    "text": "over here to line okay but now what's really interesting is now i have two things called line one coming from the",
    "start": "2863520",
    "end": "2869680"
  },
  {
    "text": "scanner and then i have one coming from this line call thing that i'm that i'm using in here as a local right let's say",
    "start": "2869680",
    "end": "2876400"
  },
  {
    "text": "that i now had to rename my scanner's line back to line number okay now if this was javascript code",
    "start": "2876400",
    "end": "2883599"
  },
  {
    "text": "that would be insanely hard to do right because you have to look at every reference to line in all your source",
    "start": "2883599",
    "end": "2889920"
  },
  {
    "text": "files and decide on the fly is this the one or is that another one um but this",
    "start": "2889920",
    "end": "2895680"
  },
  {
    "text": "is what ides do for for you know all day long right they because",
    "start": "2895680",
    "end": "2901040"
  },
  {
    "text": "through static typing we know the difference so let me take this parser file here and actually put it down at",
    "start": "2901040",
    "end": "2906800"
  },
  {
    "text": "the and at the bottom and now let's try to actually show both of them here you see the one in my",
    "start": "2906800",
    "end": "2913040"
  },
  {
    "text": "scanner here you see the one that isn't related to it let's go back and say refactor rename and now let's call this",
    "start": "2913040",
    "end": "2919119"
  },
  {
    "text": "guy line number instead and you'll see that we renamed",
    "start": "2919119",
    "end": "2924160"
  },
  {
    "text": "that guy but not that guy because we understand the difference between the two so so",
    "start": "2924160",
    "end": "2929680"
  },
  {
    "text": "here we go this is again one of those things that just make",
    "start": "2929680",
    "end": "2934720"
  },
  {
    "text": "tooling incredibly valuable when you're writing large applications",
    "start": "2934720",
    "end": "2941119"
  },
  {
    "text": "okay final thing i wanted to show is just uh",
    "start": "2941119",
    "end": "2945440"
  },
  {
    "text": "compiling the compiler uh sorry there we go",
    "start": "2947760",
    "end": "2953440"
  },
  {
    "text": "so in here is the source for all the compiler that we that we just took a look at now i'm going to try to compile",
    "start": "2953440",
    "end": "2959359"
  },
  {
    "text": "the compiler i'm going to tell it to put the output in a file called ts.js then",
    "start": "2959359",
    "end": "2964480"
  },
  {
    "text": "i'm going to tell it to also generate generate declarations and i'm going to",
    "start": "2964480",
    "end": "2969680"
  },
  {
    "text": "compile typescript.ts so this is gonna produce two files um first it's gonna",
    "start": "2969680",
    "end": "2974960"
  },
  {
    "text": "produce the compiler in a file called ts.js and that's just gonna be plain",
    "start": "2974960",
    "end": "2980720"
  },
  {
    "text": "javascript then it's also gonna produce a declaration file that represents the external interface of the compiler so if",
    "start": "2980720",
    "end": "2988640"
  },
  {
    "text": "we look at what we what we uh sorry what we got here uh you'll see that there are there",
    "start": "2988640",
    "end": "2994800"
  },
  {
    "text": "we were we had two files uh produced ts.js and then ts.d.t.s",
    "start": "2994800",
    "end": "3003119"
  },
  {
    "text": "and that's the declaration file for the compiler and now if i uh load that one up in the development",
    "start": "3003119",
    "end": "3009680"
  },
  {
    "text": "environment here let's see edit gs.d.t.s there we go",
    "start": "3009680",
    "end": "3015920"
  },
  {
    "text": "and then let's just get rid of the parts and here you see basically the public abstract of all of the things",
    "start": "3015920",
    "end": "3023760"
  },
  {
    "text": "declared in the compiler that someone using the compiler as a service could use and so now i can in a sense",
    "start": "3023760",
    "end": "3030720"
  },
  {
    "text": "continue up the chain of my modular development i can take my typescript compiler run it through my minifier do",
    "start": "3030720",
    "end": "3036720"
  },
  {
    "text": "whatever it is that i do my obfuscator before i ship it and then i can continue on with the declaration file and that",
    "start": "3036720",
    "end": "3043440"
  },
  {
    "text": "really is what represents my external interface right and so you see how you can manually author declaration files",
    "start": "3043440",
    "end": "3050000"
  },
  {
    "text": "for existing javascript but if you're writing in typescript we can make the declaration files for you automatically",
    "start": "3050000",
    "end": "3056720"
  },
  {
    "text": "all right i think that is as much as i have time for wanted to just briefly summarize",
    "start": "3056720",
    "end": "3063040"
  },
  {
    "text": "watching what's included in typescript open source compiler written in typescript itself",
    "start": "3063040",
    "end": "3069520"
  },
  {
    "text": "tooling there's a browser hosted playground that uses these services and because it's",
    "start": "3069520",
    "end": "3074880"
  },
  {
    "text": "open source you anyone can build plugins to other editing environments we built one for visual studio that we include",
    "start": "3074880",
    "end": "3082640"
  },
  {
    "text": "we include static typings of a bunch of the popular libraries out there like node.js and",
    "start": "3082640",
    "end": "3088720"
  },
  {
    "text": "jquery and also lots of samples and a format language specification",
    "start": "3088720",
    "end": "3095040"
  },
  {
    "text": "so as i started out saying application scale javascript development is hard uh",
    "start": "3095040",
    "end": "3101839"
  },
  {
    "text": "i hope i've showed you here how typescript makes it easier and i'd love for you to go take a look at it yourself",
    "start": "3101839",
    "end": "3107520"
  },
  {
    "text": "at typescriptland.org at download and play with it and let us know what you think thank you",
    "start": "3107520",
    "end": "3115078"
  },
  {
    "text": "you",
    "start": "3126720",
    "end": "3128800"
  }
]