[
  {
    "text": "so today I think I might have the most boring title of any talks",
    "start": "1140",
    "end": "9360"
  },
  {
    "text": "that I've ever had ever so I apologize for that I can see that many of you were sort of",
    "start": "9360",
    "end": "16020"
  },
  {
    "text": "like what it doesn't even that it doesn't that",
    "start": "16020",
    "end": "21720"
  },
  {
    "text": "doesn't even mean anything so let me try to correct that so",
    "start": "21720",
    "end": "26760"
  },
  {
    "text": "what I'm going to try to talk about today is how do we do functional programming without sacrificing the",
    "start": "26760",
    "end": "34680"
  },
  {
    "text": "needs to be able to do communication and have resilient systems and programs",
    "start": "34680",
    "end": "42020"
  },
  {
    "text": "is that an improvement or not just future reference not not not okay",
    "start": "42420",
    "end": "49200"
  },
  {
    "text": "all right so very very unbold statement",
    "start": "49200",
    "end": "56160"
  },
  {
    "text": "I think today more than any day before this day we're writing more and more",
    "start": "56160",
    "end": "63840"
  },
  {
    "text": "interconnected programs and systems so every system and program tends to be",
    "start": "63840",
    "end": "70820"
  },
  {
    "text": "intertwined with some other system or program",
    "start": "70820",
    "end": "75320"
  },
  {
    "text": "just to make sure that I have something named after me",
    "start": "78360",
    "end": "83298"
  },
  {
    "text": "I think fundamentally programming is about encoding some sort of solution to some sort of",
    "start": "86100",
    "end": "92820"
  },
  {
    "text": "problem for a machine to be able to execute so if we can't solve something without",
    "start": "92820",
    "end": "100320"
  },
  {
    "text": "the programming there's nothing to encode for the machine",
    "start": "100320",
    "end": "105438"
  },
  {
    "text": "right so we need to think in order to solve problems",
    "start": "105479",
    "end": "111479"
  },
  {
    "text": "and I mean it's a truism right",
    "start": "111479",
    "end": "119000"
  },
  {
    "text": "it's nothing weird about it I also think that at some level reality",
    "start": "119159",
    "end": "127459"
  },
  {
    "text": "always beats imaginary because even if imaginary is fantastic",
    "start": "127459",
    "end": "136200"
  },
  {
    "text": "we live in reality so reality will always win over the",
    "start": "136200",
    "end": "141780"
  },
  {
    "text": "imaginary because there are fundamental constraints in reality some things",
    "start": "141780",
    "end": "148140"
  },
  {
    "text": "we might wish weren't real this is my office",
    "start": "148140",
    "end": "155459"
  },
  {
    "text": "this is the door of my office and this is the window of my office",
    "start": "155459",
    "end": "161160"
  },
  {
    "text": "it's very real I work out of a prison",
    "start": "161160",
    "end": "167340"
  },
  {
    "text": "right might not worship was real but reality even if I dream Myself Away",
    "start": "167340",
    "end": "174180"
  },
  {
    "text": "reality is always there now I happen to have the luxury of being",
    "start": "174180",
    "end": "179519"
  },
  {
    "text": "able to leave the prison whenever the day is over some people don't have that luxury",
    "start": "179519",
    "end": "186060"
  },
  {
    "text": "so reality very graciously gives us a separation in space and time",
    "start": "186060",
    "end": "193080"
  },
  {
    "text": "right I'm here you're there right things are over there some people are on",
    "start": "193080",
    "end": "198720"
  },
  {
    "text": "the other side of the planet that means that we need to use communication for coordination",
    "start": "198720",
    "end": "206580"
  },
  {
    "text": "right things are separated we need to use Communication in order to",
    "start": "206580",
    "end": "211620"
  },
  {
    "text": "coordinate between these things that are separated and that means that we'll have sort of",
    "start": "211620",
    "end": "217560"
  },
  {
    "text": "variable delays in that communication right can take different paths it might",
    "start": "217560",
    "end": "223860"
  },
  {
    "text": "be interrupted it might be corrupted we'll also have these sort of partial",
    "start": "223860",
    "end": "230459"
  },
  {
    "text": "failures where things might be broken in One Direction but not",
    "start": "230459",
    "end": "236400"
  },
  {
    "text": "the other direction so I think that my message is getting through but your acknowledgment is not",
    "start": "236400",
    "end": "243120"
  },
  {
    "text": "it also means that all knowledge is partial slash local stale",
    "start": "243120",
    "end": "251760"
  },
  {
    "text": "we only know we know but we don't know what we don't know yet",
    "start": "251760",
    "end": "256979"
  },
  {
    "text": "right so we all always have potentially stale",
    "start": "256979",
    "end": "262260"
  },
  {
    "text": "old information knowledge it also means that since we have these",
    "start": "262260",
    "end": "269220"
  },
  {
    "text": "things that are separated in space and time that uses communication for coordination",
    "start": "269220",
    "end": "275400"
  },
  {
    "text": "we have a lot of systems right things that communicate to coordinate",
    "start": "275400",
    "end": "282180"
  },
  {
    "text": "so what is a system well the definition is a set of things working together as a mechanism or an",
    "start": "282180",
    "end": "288840"
  },
  {
    "text": "interconnecting Network a complex hole right",
    "start": "288840",
    "end": "294300"
  },
  {
    "text": "system if you look at a system their purpose",
    "start": "294300",
    "end": "301500"
  },
  {
    "text": "tends to be quite simple we look at our watch for instance purpose show time",
    "start": "301500",
    "end": "309180"
  },
  {
    "text": "are arguably quite simple if you look at a modern automatic",
    "start": "309180",
    "end": "314479"
  },
  {
    "text": "movement for a watch highly complex right but the purpose is simple",
    "start": "314479",
    "end": "323240"
  },
  {
    "text": "inner workings might be extremely complex",
    "start": "323699",
    "end": "328220"
  },
  {
    "text": "but they consist of collaborating components as I said before like we're separating",
    "start": "328740",
    "end": "334919"
  },
  {
    "text": "space and time we communicate to coordinate so we need to have these sort of",
    "start": "334919",
    "end": "340560"
  },
  {
    "text": "collaborating components and what's interesting is about the nesting property of systems",
    "start": "340560",
    "end": "347340"
  },
  {
    "text": "if you really look at it everything is a system within a system within a system within a system within a system",
    "start": "347340",
    "end": "354560"
  },
  {
    "text": "the body is a system an organ is a system a team of people is a system",
    "start": "354660",
    "end": "362460"
  },
  {
    "text": "a city is a system a country is a system the entire sort of humanity is a system",
    "start": "362460",
    "end": "370800"
  },
  {
    "text": "the planet is a part of a solar system s within systems within systems",
    "start": "370800",
    "end": "378320"
  },
  {
    "text": "what's interesting is that according to my observation at least components tend to be as simple as feasible but not",
    "start": "378660",
    "end": "386400"
  },
  {
    "text": "simpler than that and I think that sort of derives from from sort of Darwinism",
    "start": "386400",
    "end": "392880"
  },
  {
    "text": "things can just be as complex as to achieve what they're trying to achieve but not more complex because that costs",
    "start": "392880",
    "end": "399060"
  },
  {
    "text": "more resilience",
    "start": "399060",
    "end": "404520"
  },
  {
    "text": "is a very important aspect of Building Systems",
    "start": "404520",
    "end": "410100"
  },
  {
    "text": "and according to Richard cook and I'm just paraphrasing him here any",
    "start": "410100",
    "end": "415620"
  },
  {
    "text": "sufficiently complex system is always always running in degraded mode",
    "start": "415620",
    "end": "423360"
  },
  {
    "text": "because as something gets more complex the the risk of something being wrong",
    "start": "423360",
    "end": "428819"
  },
  {
    "text": "somewhere within the system becomes one it just it's just a matter of fact",
    "start": "428819",
    "end": "437220"
  },
  {
    "text": "so this has a fundamental implication on how we need to be able to reason about",
    "start": "437220",
    "end": "442800"
  },
  {
    "text": "our systems we can't program for the happy path because that happy path will never occur",
    "start": "442800",
    "end": "450840"
  },
  {
    "text": "in practice if the if the system is complex enough",
    "start": "450840",
    "end": "456080"
  },
  {
    "text": "does that make sense so communication",
    "start": "456720",
    "end": "462720"
  },
  {
    "text": "very fluffy word right it's the production and consumption of",
    "start": "462720",
    "end": "467759"
  },
  {
    "text": "some sort of message right and in order to message or send messages",
    "start": "467759",
    "end": "474960"
  },
  {
    "text": "we have to be able to reason about who is the intended recipient of this message we need to have some sort of",
    "start": "474960",
    "end": "480840"
  },
  {
    "text": "addressing thing addresses are very important because",
    "start": "480840",
    "end": "487560"
  },
  {
    "text": "without addresses we don't know who's the intended recipient right we have no idea",
    "start": "487560",
    "end": "493919"
  },
  {
    "text": "and if we can communicate these addresses it means that we can relay information",
    "start": "493919",
    "end": "500160"
  },
  {
    "text": "we can build up knowledge about addresses where they exist or how to",
    "start": "500160",
    "end": "507000"
  },
  {
    "text": "send things through other adversies so they are knowledge addresses or",
    "start": "507000",
    "end": "513839"
  },
  {
    "text": "knowledge that also can be shared but what's also important to realize is that messages",
    "start": "513839",
    "end": "519479"
  },
  {
    "text": "since we live in the real world can be delayed lost or misunderstood",
    "start": "519479",
    "end": "525899"
  },
  {
    "text": "how many of you have ever experienced the misunderstanding of a message",
    "start": "525899",
    "end": "532879"
  },
  {
    "text": "I'll I'll raise my hand demonstration that's a fundamental property of",
    "start": "532980",
    "end": "540300"
  },
  {
    "text": "communication so in order to reason a bit about",
    "start": "540300",
    "end": "545459"
  },
  {
    "text": "reliability there's this phrase to get that gets",
    "start": "545459",
    "end": "550500"
  },
  {
    "text": "sort of thrown around about guaranteed delivery so what does that even mean",
    "start": "550500",
    "end": "555899"
  },
  {
    "text": "so we typically have three different versions of guaranteed delivery one is",
    "start": "555899",
    "end": "562380"
  },
  {
    "text": "at most once so if you send a message it will be received at most once it's typically the case if you send a letter",
    "start": "562380",
    "end": "568440"
  },
  {
    "text": "to somebody they won't get two versions of that letter but they might not get it",
    "start": "568440",
    "end": "574680"
  },
  {
    "text": "at least once is we'll send the same message over and over and you will just",
    "start": "574680",
    "end": "579839"
  },
  {
    "text": "have to discard if you find that you've received it before but it has a higher chance of reliability because if one",
    "start": "579839",
    "end": "586620"
  },
  {
    "text": "gets lost the other might get through and exactly once is some sort of magical",
    "start": "586620",
    "end": "591660"
  },
  {
    "text": "unicorn thing that doesn't really exist in the real world conceptually we can",
    "start": "591660",
    "end": "597180"
  },
  {
    "text": "build something that has very high reliability of receiving only one but",
    "start": "597180",
    "end": "602339"
  },
  {
    "text": "you can't sort of make a blanket statement that says this has exactly once delivery",
    "start": "602339",
    "end": "607440"
  },
  {
    "text": "so if we think about it it's not about guarantees it's about reliability",
    "start": "607440",
    "end": "614459"
  },
  {
    "text": "and reliability is about reasonability right if we can reason about the reliability of something that we know",
    "start": "614459",
    "end": "621120"
  },
  {
    "text": "that there's a chance that it might not happen and as such we need to do something about that we can't do the",
    "start": "621120",
    "end": "626700"
  },
  {
    "text": "happy path thing so somebody might just say well just use",
    "start": "626700",
    "end": "632459"
  },
  {
    "text": "two-faced commit and it will just all work out but as we all know that doesn't really work in practice because phase",
    "start": "632459",
    "end": "639899"
  },
  {
    "text": "two is not the happy path",
    "start": "639899",
    "end": "643700"
  },
  {
    "text": "communication is inherently bursty if you look at it you come here today",
    "start": "644940",
    "end": "652680"
  },
  {
    "text": "you'll get a lot of input right over a very short amount of time but then you",
    "start": "652680",
    "end": "657720"
  },
  {
    "text": "might go home and go to bed and there will be no communication for eight hours perhaps",
    "start": "657720",
    "end": "664980"
  },
  {
    "text": "some of this burstiness is predictable typically don't go to a conference",
    "start": "665880",
    "end": "671579"
  },
  {
    "text": "unless you're aware of the fact that you will be receiving a lot of information right so you could predict that there",
    "start": "671579",
    "end": "676680"
  },
  {
    "text": "will be a lot of information but some of it is pretty unpredictable",
    "start": "676680",
    "end": "681839"
  },
  {
    "text": "right you don't know when your kids are going to wake up in the middle of night and scream right",
    "start": "681839",
    "end": "687560"
  },
  {
    "text": "if we try to deal with the burstiness of communication",
    "start": "688740",
    "end": "694440"
  },
  {
    "text": "and we can't cope with it the option is to discard it right we",
    "start": "694440",
    "end": "700079"
  },
  {
    "text": "don't listen to it we'll just mark it as spam right",
    "start": "700079",
    "end": "705300"
  },
  {
    "text": "but the problem is that if we do that if that's our way of dealing with overload or a burst of messages that we can't",
    "start": "705300",
    "end": "712079"
  },
  {
    "text": "deal with what happens well somebody might resend that",
    "start": "712079",
    "end": "717300"
  },
  {
    "text": "information okay so we might actually cause more information to come along because we",
    "start": "717300",
    "end": "723120"
  },
  {
    "text": "just discarded information so that means that having some sort of",
    "start": "723120",
    "end": "729060"
  },
  {
    "text": "flow control over information and back pressure is quite important",
    "start": "729060",
    "end": "735360"
  },
  {
    "text": "we don't want to discard information and not let the sender know that it was discarded",
    "start": "735360",
    "end": "741800"
  },
  {
    "text": "and buffers they typically only tend to work as grease between cogs",
    "start": "741899",
    "end": "747000"
  },
  {
    "text": "quote-unquote cogs right because buffers are not infinite either so even if you buffer at some point you will",
    "start": "747000",
    "end": "753720"
  },
  {
    "text": "need to decide whether you're supposed to shed whatever information comes in",
    "start": "753720",
    "end": "758940"
  },
  {
    "text": "and load shedding as I said it doesn't inform the sender why this information was shed",
    "start": "758940",
    "end": "765720"
  },
  {
    "text": "or when it's okay to send more information again so there's a lot of context that is",
    "start": "765720",
    "end": "771480"
  },
  {
    "text": "missing for the sender in this case so for resilience we can never assume",
    "start": "771480",
    "end": "778560"
  },
  {
    "text": "that some other entity in this physical world is Immortal right",
    "start": "778560",
    "end": "784139"
  },
  {
    "text": "that doesn't work things come and go the machines come and go",
    "start": "784139",
    "end": "790680"
  },
  {
    "text": "and I think we need to treat sort of expectation violations as failures because if we don't know that something",
    "start": "790680",
    "end": "797700"
  },
  {
    "text": "disappeared then at some point we'll expect that something is wrong or",
    "start": "797700",
    "end": "803459"
  },
  {
    "text": "will think that something is wrong and we need to treat that as a failure",
    "start": "803459",
    "end": "809060"
  },
  {
    "text": "this means that we always have to have a plan B like we can't do happy path programming",
    "start": "810300",
    "end": "815579"
  },
  {
    "text": "because there needs to be a plan B in single Rock and we can't really make the clients",
    "start": "815579",
    "end": "825839"
  },
  {
    "text": "responsible for fixing your faulty provider I typically have have a example of if",
    "start": "825839",
    "end": "833880"
  },
  {
    "text": "you go to a vending machine and you put a coin in and you choose to get some",
    "start": "833880",
    "end": "839579"
  },
  {
    "text": "chocolate bar or something and the machine is broken should the machine tell the person who's",
    "start": "839579",
    "end": "846480"
  },
  {
    "text": "trying to buy that error code 43 out of memory error",
    "start": "846480",
    "end": "854540"
  },
  {
    "text": "what what does that even mean am I asked the consumer of this thing responsible for fixing it",
    "start": "855060",
    "end": "862200"
  },
  {
    "text": "and what does that even mean so we can't really escalate the problems",
    "start": "862200",
    "end": "869519"
  },
  {
    "text": "to the consumer we have to escalate the problems to someone else in this case we might want to escalate to the service",
    "start": "869519",
    "end": "876000"
  },
  {
    "text": "technician of the vending machine company saying that this device is broken and perhaps give the customer",
    "start": "876000",
    "end": "881459"
  },
  {
    "text": "their change back and with a message saying that please go find another vending machine because this is currently broken",
    "start": "881459",
    "end": "888740"
  },
  {
    "text": "so we need to sort of fail fast but we also need to fail predictably so that we can reason about what happens when",
    "start": "888959",
    "end": "895560"
  },
  {
    "text": "things fail supervision I don't know how many of you",
    "start": "895560",
    "end": "901500"
  },
  {
    "text": "guys are familiar with erlang they're laying hurling anybody cool all right so supervision is a very old",
    "start": "901500",
    "end": "908820"
  },
  {
    "text": "concept which essentially means that the responsibility of dealing with failure",
    "start": "908820",
    "end": "914120"
  },
  {
    "text": "is a supervisor of that thing and supervisors can be hierarchical so",
    "start": "914120",
    "end": "921120"
  },
  {
    "text": "there's a supervisor for the supervisor and as even all said who watches the Watchmen right at some",
    "start": "921120",
    "end": "928320"
  },
  {
    "text": "point you need just need to but if things go this wrong we'll just abort because everything is broken",
    "start": "928320",
    "end": "936380"
  },
  {
    "text": "so actor model anybody actor model actor model actor model OKAY a few of you okay",
    "start": "938100",
    "end": "945600"
  },
  {
    "text": "so I've been involved in in building this tool called akka for the past five",
    "start": "945600",
    "end": "950639"
  },
  {
    "text": "years and it's an implementation of the actor model and you can sort of see the the",
    "start": "950639",
    "end": "956820"
  },
  {
    "text": "unit of computation in akka which is the name of the thing an act so it's a unit",
    "start": "956820",
    "end": "962399"
  },
  {
    "text": "of computation and they have this sort of reactive property",
    "start": "962399",
    "end": "968100"
  },
  {
    "text": "where they have a current behavior which they apply to messages that they receive they have an address to which you can",
    "start": "968100",
    "end": "975060"
  },
  {
    "text": "send messages to that's their sort of their address for their mailbox where",
    "start": "975060",
    "end": "980279"
  },
  {
    "text": "these messages end up so they have a mailbox and they have some local storage so that they can",
    "start": "980279",
    "end": "986940"
  },
  {
    "text": "remember things and if they don't have any messages to",
    "start": "986940",
    "end": "993899"
  },
  {
    "text": "process they're completely just memory residents they don't take any CPU power at all so they will be scheduled to",
    "start": "993899",
    "end": "1000019"
  },
  {
    "text": "execute once they have a message and it has this sort of hierarchical",
    "start": "1000019",
    "end": "1005300"
  },
  {
    "text": "thing where an actor has a parent actor so that there is a possible supervisor",
    "start": "1005300",
    "end": "1012500"
  },
  {
    "text": "and an actor could have zero to n number of child actors",
    "start": "1012500",
    "end": "1018019"
  },
  {
    "text": "that it will supervise so it's a hierarchy and I don't know about you guys but whenever I see calm this is where what I",
    "start": "1018019",
    "end": "1025938"
  },
  {
    "text": "think about",
    "start": "1025939",
    "end": "1028240"
  },
  {
    "text": "so the actor so he can get messages but it will only process one message at a",
    "start": "1033020",
    "end": "1038058"
  },
  {
    "text": "time so it becomes this thing right it's a processor that processes one message at a time and",
    "start": "1038059",
    "end": "1045678"
  },
  {
    "text": "since it has an address it doesn't know who will send it messages so it could be n number of things that sends it or a",
    "start": "1045679",
    "end": "1052700"
  },
  {
    "text": "number of other actors that sends it messages but it's a single consumer of these",
    "start": "1052700",
    "end": "1057799"
  },
  {
    "text": "messages and the current overhead is about 450 bytes so that means that you can have",
    "start": "1057799",
    "end": "1064700"
  },
  {
    "text": "millions per gigabyte of ram so with our clustering you can have about",
    "start": "1064700",
    "end": "1070039"
  },
  {
    "text": "two and a half thousand nodes so it's sort of like two and a half thousand nodes times millions of actors per",
    "start": "1070039",
    "end": "1075980"
  },
  {
    "text": "gigabyte means like a lot of actors so it's not like thinking about threads",
    "start": "1075980",
    "end": "1081980"
  },
  {
    "text": "and I can only have a thousand of them or any kind of sort of scarce resource but you can really think about actors as",
    "start": "1081980",
    "end": "1088340"
  },
  {
    "text": "a lot of actors so the actor model or actors are really",
    "start": "1088340",
    "end": "1095059"
  },
  {
    "text": "great for communication so they send or receive messages really good that's sort of the core thing",
    "start": "1095059",
    "end": "1101720"
  },
  {
    "text": "and since they have an address it means that they don't have to live in process",
    "start": "1101720",
    "end": "1107059"
  },
  {
    "text": "they could live in a machine on the other end of the planet or some other planet it doesn't matter",
    "start": "1107059",
    "end": "1113960"
  },
  {
    "text": "and it also means that you can scale this thing out because communication",
    "start": "1113960",
    "end": "1120980"
  },
  {
    "text": "is all about being able to sort of send messages to other things so you can have multiple actors kind of",
    "start": "1120980",
    "end": "1127760"
  },
  {
    "text": "millions of actors and they're good at resilience because they have this sort of built-in supervisor thing where an actor Will",
    "start": "1127760",
    "end": "1134299"
  },
  {
    "text": "actively deal with the failures of its children act or child actors that's a good sort of resilient story",
    "start": "1134299",
    "end": "1142039"
  },
  {
    "text": "what they are not that good at is composition like how do we take these millions of actors and wire them",
    "start": "1142039",
    "end": "1149240"
  },
  {
    "text": "together challenge",
    "start": "1149240",
    "end": "1154660"
  },
  {
    "text": "Compass I'm I don't have to preach to you about functional composition right it's the",
    "start": "1155840",
    "end": "1161720"
  },
  {
    "text": "it's the conference why I should never have to do that right so we have this thing that is amazing",
    "start": "1161720",
    "end": "1167480"
  },
  {
    "text": "for composition perhaps we could do something with this like could we could we get them to work",
    "start": "1167480",
    "end": "1174380"
  },
  {
    "text": "together in some way so functional programming to me is great",
    "start": "1174380",
    "end": "1181280"
  },
  {
    "text": "for composition it's like to me it feels like the purpose of functional programming",
    "start": "1181280",
    "end": "1187640"
  },
  {
    "text": "but I think one of the main challenges that I see is how do you do communication resilience",
    "start": "1187640",
    "end": "1193460"
  },
  {
    "text": "using functional programming we have this thing that's really good at",
    "start": "1193460",
    "end": "1199520"
  },
  {
    "text": "communication and resilience that's challenged with doing composition and we have something that is great for",
    "start": "1199520",
    "end": "1205580"
  },
  {
    "text": "composition but is challenged with doing communication and resilience if we can make these things work",
    "start": "1205580",
    "end": "1212059"
  },
  {
    "text": "together then perhaps we have something here so we're working on something that we",
    "start": "1212059",
    "end": "1218960"
  },
  {
    "text": "call project goldma it's a Sami word for three which is the third incarnation of this",
    "start": "1218960",
    "end": "1225320"
  },
  {
    "text": "this actor model and the purpose is to try to distill an",
    "start": "1225320",
    "end": "1230480"
  },
  {
    "text": "actor to its essence seems fluffy right what's the essence of an actor but really it is the behavior",
    "start": "1230480",
    "end": "1236960"
  },
  {
    "text": "right what does the actor do and everything else besides",
    "start": "1236960",
    "end": "1245840"
  },
  {
    "text": "the behavior is a message so we have messages and behaviors",
    "start": "1245840",
    "end": "1253480"
  },
  {
    "text": "this means that there is nothing in between that we can sort of accidentally close over in some wrong way that we",
    "start": "1254960",
    "end": "1261200"
  },
  {
    "text": "currently could have an issue with so what we can do there is if we have",
    "start": "1261200",
    "end": "1267860"
  },
  {
    "text": "behaviors as a first-hand construct and we can make them functional",
    "start": "1267860",
    "end": "1273080"
  },
  {
    "text": "we can make behaviors composable so that you can compose behaviors and",
    "start": "1273080",
    "end": "1279559"
  },
  {
    "text": "now you have composition on the inside of an actor",
    "start": "1279559",
    "end": "1284620"
  },
  {
    "text": "and we're also working on a completely pure active implementation and we're working on a process algorithm that is",
    "start": "1285740",
    "end": "1292400"
  },
  {
    "text": "inspired by The Joint calculus it's in the works it's not all there yet",
    "start": "1292400",
    "end": "1297799"
  },
  {
    "text": "but that is a story in order to make the inside world of actors function",
    "start": "1297799",
    "end": "1305620"
  },
  {
    "text": "so just to give you a bit of code I don't want to be one of those guys that never show any code right",
    "start": "1306380",
    "end": "1313580"
  },
  {
    "text": "so this is Kawa and basically there's two different things",
    "start": "1313580",
    "end": "1320600"
  },
  {
    "text": "here there are signals and messages and signals are the life cycle management",
    "start": "1320600",
    "end": "1328280"
  },
  {
    "text": "and message processing is the other one so signals can be uh the actor was",
    "start": "1328280",
    "end": "1333740"
  },
  {
    "text": "restarted or some other actor that you were depending on has just terminated or",
    "start": "1333740",
    "end": "1339620"
  },
  {
    "text": "other sort of infrastructure related things and message is here's that you had a",
    "start": "1339620",
    "end": "1346760"
  },
  {
    "text": "message here's the message and here's the context for you and what's interesting about this is",
    "start": "1346760",
    "end": "1352880"
  },
  {
    "text": "that they return a behavior so that's the behavior for the next",
    "start": "1352880",
    "end": "1358280"
  },
  {
    "text": "message so you have recursion",
    "start": "1358280",
    "end": "1363340"
  },
  {
    "text": "and I don't think I need to go into the actual details but I just wanted to show that",
    "start": "1363919",
    "end": "1369559"
  },
  {
    "text": "this code here doesn't have an actor at all",
    "start": "1369559",
    "end": "1375320"
  },
  {
    "text": "it is some sort of protocol up there with the command",
    "start": "1375320",
    "end": "1381860"
  },
  {
    "text": "get and put there is a got message that is a result of a get",
    "start": "1381860",
    "end": "1389240"
  },
  {
    "text": "and there's an initial Behavior that is applying the empty map to this",
    "start": "1389240",
    "end": "1394460"
  },
  {
    "text": "with map Behavior so we can formulate the behavior",
    "start": "1394460",
    "end": "1401120"
  },
  {
    "text": "outside of running it as an actor",
    "start": "1401120",
    "end": "1405820"
  },
  {
    "text": "are you okay with me skipping on here cool we can get back to that later",
    "start": "1407059",
    "end": "1413179"
  },
  {
    "text": "so I don't know about you this is my bold assertion you know some",
    "start": "1413179",
    "end": "1419000"
  },
  {
    "text": "little screen that I'm wrong if I am what are the most common Dev tasks",
    "start": "1419000",
    "end": "1426760"
  },
  {
    "text": "am I wrong no am I right",
    "start": "1427400",
    "end": "1433780"
  },
  {
    "text": "just yell when sort of hitting close to home here",
    "start": "1435860",
    "end": "1441580"
  },
  {
    "text": "right are we getting there okay",
    "start": "1441919",
    "end": "1448159"
  },
  {
    "text": "call it a day we're done here right in my role these are some of the most",
    "start": "1448159",
    "end": "1454039"
  },
  {
    "text": "common things that developers do some inputs some transformation some output",
    "start": "1454039",
    "end": "1459919"
  },
  {
    "text": "have some coffee call it a day right so how can we improve that",
    "start": "1459919",
    "end": "1466340"
  },
  {
    "text": "so let's sort of undefine what we know about streams so far and just redefine",
    "start": "1466340",
    "end": "1471679"
  },
  {
    "text": "streams for the purpose of this presentation so estream is an ephemeral means that it just exists when you want",
    "start": "1471679",
    "end": "1479059"
  },
  {
    "text": "it or as it runs it's time dependent it's a sequence of elements so discrete",
    "start": "1479059",
    "end": "1486500"
  },
  {
    "text": "possibly but not necessarily unbounded in length or in the number of elements",
    "start": "1486500",
    "end": "1492860"
  },
  {
    "text": "and in essence it is the transformation and transportation of data",
    "start": "1492860",
    "end": "1500780"
  },
  {
    "text": "comes from somewhere goes to somewhere",
    "start": "1500780",
    "end": "1504820"
  },
  {
    "text": "so we've been working on something called AKA streams which is our way of trying to deal with this problem",
    "start": "1505940",
    "end": "1512360"
  },
  {
    "text": "how do we compose using functional programming and how do we leverage the actor model for its communication and",
    "start": "1512360",
    "end": "1518780"
  },
  {
    "text": "resilience so the lead world the theme for this was",
    "start": "1518780",
    "end": "1525020"
  },
  {
    "text": "to get something that is immutable reusable compostable",
    "start": "1525020",
    "end": "1530860"
  },
  {
    "text": "coordinated asynchronous and represents some sort of transformation",
    "start": "1530860",
    "end": "1537200"
  },
  {
    "text": "a lot of words but the purpose is to build something that is able to leverage having",
    "start": "1537200",
    "end": "1543200"
  },
  {
    "text": "multi-core without having to get your hands dirty",
    "start": "1543200",
    "end": "1549220"
  },
  {
    "text": "so one of the core problems is how do you get data across an asynchronous",
    "start": "1549440",
    "end": "1554539"
  },
  {
    "text": "boundary right how do I send information between",
    "start": "1554539",
    "end": "1560059"
  },
  {
    "text": "something that runs here or at a different clock than something that is running",
    "start": "1560059",
    "end": "1566720"
  },
  {
    "text": "over there and you can think of it as sort of how do I drink from a fire hose",
    "start": "1566720",
    "end": "1574960"
  },
  {
    "text": "without this right there's there's a there's a method that",
    "start": "1575000",
    "end": "1582559"
  },
  {
    "text": "I I I've I've sort of dubbed the uh the raccoon method uh I'm not necessarily",
    "start": "1582559",
    "end": "1589820"
  },
  {
    "text": "sure that it's an efficient means of dealing with getting more information or more data than you were expecting but",
    "start": "1589820",
    "end": "1596659"
  },
  {
    "text": "the raccoon method is interesting to say the least and whenever somebody tells me that they",
    "start": "1596659",
    "end": "1606200"
  },
  {
    "text": "have a model that processing that processes streams of data without back",
    "start": "1606200",
    "end": "1611419"
  },
  {
    "text": "pressure this is this is what I think I look like",
    "start": "1611419",
    "end": "1617679"
  },
  {
    "text": "so how do we get data across an asynchronous boundary with non-blocking",
    "start": "1618559",
    "end": "1624500"
  },
  {
    "text": "back pressure how do we make sure that we don't consume more data than we can deal with",
    "start": "1624500",
    "end": "1631779"
  },
  {
    "text": "so we had this sort of initiative where this this hap this has to be a problem where it's it's not one of these sort of",
    "start": "1632059",
    "end": "1638179"
  },
  {
    "text": "huge unsolved problems but how can we just solve this problem in a nice elegant way",
    "start": "1638179",
    "end": "1644179"
  },
  {
    "text": "so we created this sort of expert group uh and try to nail down a specification for dealing with this problem",
    "start": "1644179",
    "end": "1650779"
  },
  {
    "text": "so the end result if we compare sort of push versus pull on the old models",
    "start": "1650779",
    "end": "1659240"
  },
  {
    "text": "we want to be able to support potentially unbounded sequences right so we want to have something that is",
    "start": "1659240",
    "end": "1666679"
  },
  {
    "text": "potentially large that we can transport somewhere else and with a push model",
    "start": "1666679",
    "end": "1673100"
  },
  {
    "text": "that's fine right you just push super simple push push push",
    "start": "1673100",
    "end": "1678380"
  },
  {
    "text": "pull model also simple right there's no built-in limit to how much you can pull",
    "start": "1678380",
    "end": "1684380"
  },
  {
    "text": "but we also want to be able to get the sender running separately from the receiver",
    "start": "1684380",
    "end": "1689900"
  },
  {
    "text": "we don't want to lock them together that works you just push",
    "start": "1689900",
    "end": "1695360"
  },
  {
    "text": "right push still works still works with pull as well",
    "start": "1695360",
    "end": "1701059"
  },
  {
    "text": "so how can we vary the rate of reception from the rate of sending can we support",
    "start": "1701059",
    "end": "1706640"
  },
  {
    "text": "that sure you just send if I can't receive it I'll just drop it",
    "start": "1706640",
    "end": "1712340"
  },
  {
    "text": "right I run at a different rate than you I just drop your stuff",
    "start": "1712340",
    "end": "1718100"
  },
  {
    "text": "same here you can pull information the center could pull if the if the center is",
    "start": "1718100",
    "end": "1724039"
  },
  {
    "text": "faster that doesn't matter because you didn't pull any information but how about we don't want to drop",
    "start": "1724039",
    "end": "1730880"
  },
  {
    "text": "stuff or we don't necessarily want to drop stuff",
    "start": "1730880",
    "end": "1735980"
  },
  {
    "text": "that doesn't work well right if we push stuff the receiver is",
    "start": "1735980",
    "end": "1741559"
  },
  {
    "text": "not ready to receive it that we'll have to drop it doesn't work",
    "start": "1741559",
    "end": "1746960"
  },
  {
    "text": "with pull it works though the receiver can just choose to pull",
    "start": "1746960",
    "end": "1753620"
  },
  {
    "text": "whenever it's ready for information so that's fine so how about we get something that is minimal in",
    "start": "1753620",
    "end": "1760460"
  },
  {
    "text": "terms of latency and throughput how can we how can we get something that is super fast",
    "start": "1760460",
    "end": "1766220"
  },
  {
    "text": "well push it super fast there's just the overhead of sending in One Direction that's unfortunately as fast as you can",
    "start": "1766220",
    "end": "1773600"
  },
  {
    "text": "get but the pull problem is you first need to pull and then the",
    "start": "1773600",
    "end": "1779120"
  },
  {
    "text": "information needs to be sent right so there's bi-directional communication happening for everything that you're",
    "start": "1779120",
    "end": "1784760"
  },
  {
    "text": "pulling that's not super super fast so how about we treat",
    "start": "1784760",
    "end": "1792140"
  },
  {
    "text": "this thing as a supply and demand thing because that's what it's really about",
    "start": "1792140",
    "end": "1798760"
  },
  {
    "text": "so the sender we call a publisher here and the subscriber is the receiver",
    "start": "1798860",
    "end": "1805100"
  },
  {
    "text": "so data flows from the publisher to the subscriber but the demand for that",
    "start": "1805100",
    "end": "1810860"
  },
  {
    "text": "information comes from the subscriber going to the publisher",
    "start": "1810860",
    "end": "1816380"
  },
  {
    "text": "interesting that means that whenever the subscriber",
    "start": "1816380",
    "end": "1821840"
  },
  {
    "text": "is faster or can receive more things than the publisher can send it becomes",
    "start": "1821840",
    "end": "1827240"
  },
  {
    "text": "virtually a push model because the publisher can always push",
    "start": "1827240",
    "end": "1832840"
  },
  {
    "text": "but if if the if the publisher is faster",
    "start": "1834500",
    "end": "1840260"
  },
  {
    "text": "it means that the subscriber will only send the demand that he can deal with so it effectively becomes a pull model",
    "start": "1840260",
    "end": "1848480"
  },
  {
    "text": "does that make sense what's super interesting is that since",
    "start": "1848480",
    "end": "1854299"
  },
  {
    "text": "this happens at runtime if there's a change in rates between the",
    "start": "1854299",
    "end": "1859460"
  },
  {
    "text": "publisher and subscriber they will automatically switch between these sort of modes or behaviors",
    "start": "1859460",
    "end": "1865220"
  },
  {
    "text": "it's an Adaptive thing demand can be propagated whenever the",
    "start": "1865220",
    "end": "1873559"
  },
  {
    "text": "subscriber wants to so if the subscriber says that he wants five ice creams and then two seconds later says that he",
    "start": "1873559",
    "end": "1879020"
  },
  {
    "text": "wants an additional five that's fine you can batch this demand saying that I",
    "start": "1879020",
    "end": "1885440"
  },
  {
    "text": "want a hundred ice creams so you amortize the cost of transporting the demand",
    "start": "1885440",
    "end": "1891260"
  },
  {
    "text": "because if you build in the implementation such that you request one you get one you request",
    "start": "1891260",
    "end": "1898279"
  },
  {
    "text": "one it becomes effectively a pull model but you can amortize the cost of the pull by requesting more",
    "start": "1898279",
    "end": "1906140"
  },
  {
    "text": "so we call this sort of property dynamic push-pull there was no good word for it so we just",
    "start": "1906140",
    "end": "1911419"
  },
  {
    "text": "invented one so if we compare these things if we only",
    "start": "1911419",
    "end": "1917179"
  },
  {
    "text": "have push or only have pull we have these problems but we don't have the problem because we're sending back",
    "start": "1917179",
    "end": "1922580"
  },
  {
    "text": "demand so we don't have to drop stuff because the sender knows that there is",
    "start": "1922580",
    "end": "1928220"
  },
  {
    "text": "no information needed from the from the sender and we can amortize the cost of pulling",
    "start": "1928220",
    "end": "1935779"
  },
  {
    "text": "by saying that we want a hundred or a thousand",
    "start": "1935779",
    "end": "1940240"
  },
  {
    "text": "an interesting observation is when you try to use this model with having multiple lens or multiple outs",
    "start": "1941539",
    "end": "1948380"
  },
  {
    "text": "splitting data Downstream means merging the demand from the downstream and the inverse is true as well",
    "start": "1948380",
    "end": "1955220"
  },
  {
    "text": "so if you're merging streams you're essentially splitting demand from the downstream saying that I want one from",
    "start": "1955220",
    "end": "1960980"
  },
  {
    "text": "you and one from you so what does this look like so",
    "start": "1960980",
    "end": "1968960"
  },
  {
    "text": "in our customers we have something called sources which is sources of elements or information we",
    "start": "1968960",
    "end": "1975919"
  },
  {
    "text": "have something called flows which has one input and one output we have sinks where information goes",
    "start": "1975919",
    "end": "1983539"
  },
  {
    "text": "and if you plug these things together we call it a runnable graph because that is something that you can execute",
    "start": "1983539",
    "end": "1990260"
  },
  {
    "text": "or make run and just to give you a sense of what it looks like sorry",
    "start": "1990260",
    "end": "1997360"
  },
  {
    "text": "let's say that we Define fives to be a source that repeats the number five",
    "start": "1998960",
    "end": "2005399"
  },
  {
    "text": "unboundedly we have times two which is a flow of ins",
    "start": "2005399",
    "end": "2010480"
  },
  {
    "text": "that just Maps the input and does times two we have another flow called into string",
    "start": "2010480",
    "end": "2018100"
  },
  {
    "text": "which takes an INT and calls the two string method on it",
    "start": "2018100",
    "end": "2023320"
  },
  {
    "text": "we can take these two flows that we have now and create a new Flow by applying",
    "start": "2023320",
    "end": "2028720"
  },
  {
    "text": "the Via combinator so we attach those two flows but that returns a new flow so",
    "start": "2028720",
    "end": "2034840"
  },
  {
    "text": "the original ones are unchanged we create a sink",
    "start": "2034840",
    "end": "2040179"
  },
  {
    "text": "where we want to print this thing out and we can then use fives The Source via this transformation",
    "start": "2040179",
    "end": "2047380"
  },
  {
    "text": "but we want to augment that transformation with a take 10 because we only want five or ten of these fives and",
    "start": "2047380",
    "end": "2054339"
  },
  {
    "text": "we then pipe that to Swiss out so that creates a runnable graph",
    "start": "2054339",
    "end": "2059378"
  },
  {
    "text": "it's immutable you can pass it around you can call run on it as many times you want",
    "start": "2059379",
    "end": "2065980"
  },
  {
    "text": "so it's a composed like a blueprint of a transformation",
    "start": "2065980",
    "end": "2071260"
  },
  {
    "text": "and we have a step called materialization that happens when you called run",
    "start": "2071260",
    "end": "2076720"
  },
  {
    "text": "and that requires a materializer to be in scope and essentially what that does is that",
    "start": "2076720",
    "end": "2082118"
  },
  {
    "text": "it it looks at the graph and instantiates a lot of actors for every",
    "start": "2082119",
    "end": "2088000"
  },
  {
    "text": "stage and then pipes the information through and makes it execute but what's interesting is that there's",
    "start": "2088000",
    "end": "2093820"
  },
  {
    "text": "another combinator that I really like called bi-directional flows so they have two ins and two outs and",
    "start": "2093820",
    "end": "2100960"
  },
  {
    "text": "they are cross-connected so have you ever tried to design a protocol",
    "start": "2100960",
    "end": "2107619"
  },
  {
    "text": "pipeline in a typical programming language before",
    "start": "2107619",
    "end": "2112660"
  },
  {
    "text": "protocol pipeline it's it's terrible but what we can do is if we have a codec",
    "start": "2112660",
    "end": "2119920"
  },
  {
    "text": "that is a bi-directional flow from Foos to bite strings",
    "start": "2119920",
    "end": "2125680"
  },
  {
    "text": "and we have from bite strings to Foos and we have a crypto that takes byte",
    "start": "2125680",
    "end": "2131260"
  },
  {
    "text": "strings and encrypts them to other bite strings and then takes encrypted byte strings and turn them",
    "start": "2131260",
    "end": "2137500"
  },
  {
    "text": "into unencrypted byte strings and then we have some framing protocol that adds framing information to byte",
    "start": "2137500",
    "end": "2143680"
  },
  {
    "text": "strings then we can create a protocol stack by just stacking them atop each other",
    "start": "2143680",
    "end": "2150460"
  },
  {
    "text": "this is fully reusable right there's nothing that connects this to some networking thing or some file thing or",
    "start": "2150460",
    "end": "2155800"
  },
  {
    "text": "some other input we've just taken a description of things to do and compose",
    "start": "2155800",
    "end": "2161619"
  },
  {
    "text": "them into something new so typical sort of stream processing",
    "start": "2161619",
    "end": "2168400"
  },
  {
    "text": "thing tends to focus on directed acyclic graphs so we have this dag here the",
    "start": "2168400",
    "end": "2175599"
  },
  {
    "text": "green stuff is is sources we have reddish orange",
    "start": "2175599",
    "end": "2181000"
  },
  {
    "text": "terra cotta or something that is flows or some sort of Fannin or fan out and",
    "start": "2181000",
    "end": "2186940"
  },
  {
    "text": "then we have the darker blue ones which are sinks so this is a dag and we support dags of course",
    "start": "2186940",
    "end": "2192760"
  },
  {
    "text": "but we also support cyclographs so this is opt-in because",
    "start": "2192760",
    "end": "2199180"
  },
  {
    "text": "it's not recommended for a lot of things but sometimes you actually need to have a feedback loop",
    "start": "2199180",
    "end": "2204700"
  },
  {
    "text": "and I've seen this so many times I don't know if there's a name I call it the",
    "start": "2204700",
    "end": "2210280"
  },
  {
    "text": "watt graph where you take a sink and a source and then you silently pipe the",
    "start": "2210280",
    "end": "2216820"
  },
  {
    "text": "feedback around it it's still a diag right no it's not still a dag it's a what graph",
    "start": "2216820",
    "end": "2223900"
  },
  {
    "text": "so having direct support for cyclic graphs makes your program honest",
    "start": "2223900",
    "end": "2231240"
  },
  {
    "text": "how are we on time good so Fanning and fan out I mean that's the",
    "start": "2232300",
    "end": "2238119"
  },
  {
    "text": "interesting stuff that's how you are able to join streams or split streams",
    "start": "2238119",
    "end": "2243220"
  },
  {
    "text": "and send things to multiple directions and we support that as well",
    "start": "2243220",
    "end": "2248500"
  },
  {
    "text": "and we also support some fantastic stuff one thing that we haven't implemented",
    "start": "2248500",
    "end": "2255400"
  },
  {
    "text": "yet but we're really looking forward to implement is a end-to-end way merge",
    "start": "2255400",
    "end": "2260800"
  },
  {
    "text": "split operation so that you can program it yourself we have flexi merger flexi route for doing findings of fan outs",
    "start": "2260800",
    "end": "2268240"
  },
  {
    "text": "programmatically but uh I don't know I I've called it sort of the the Cthulhu",
    "start": "2268240",
    "end": "2273820"
  },
  {
    "text": "merch route thing and I can't really explain it in words so I'll explain it with a video",
    "start": "2273820",
    "end": "2281500"
  },
  {
    "text": "are you ready",
    "start": "2281500",
    "end": "2284280"
  },
  {
    "text": "that is how it works uh",
    "start": "2288640",
    "end": "2294220"
  },
  {
    "text": "looks complex but it's really simple",
    "start": "2294220",
    "end": "2299099"
  },
  {
    "text": "one thing that I said earlier about sort of what does programmers do is inputs and outputs",
    "start": "2300880",
    "end": "2307300"
  },
  {
    "text": "right receive information produce information I like to think about if you turn things",
    "start": "2307300",
    "end": "2314079"
  },
  {
    "text": "around to make them demand driven it's not IO it's oi right",
    "start": "2314079",
    "end": "2320079"
  },
  {
    "text": "because the demand travels in the opposite direction of the data that doesn't make sense at all right",
    "start": "2320079",
    "end": "2328680"
  },
  {
    "text": "everybody's fried if demand travels Upstream",
    "start": "2329560",
    "end": "2336400"
  },
  {
    "text": "it means that you could decide that if I can't write then I shall not read",
    "start": "2336400",
    "end": "2343839"
  },
  {
    "text": "you have end-to-end back pressure you could even say that if the user that",
    "start": "2343839",
    "end": "2350920"
  },
  {
    "text": "requested this webpage is not willing to read the bytes of the web page then why",
    "start": "2350920",
    "end": "2357040"
  },
  {
    "text": "should I even why should I even create the web page right",
    "start": "2357040",
    "end": "2363760"
  },
  {
    "text": "so out of the box we try to support the normal stuff like file i o and TCP and HTTP and stuff like that but it's",
    "start": "2363760",
    "end": "2370119"
  },
  {
    "text": "completely extensible and what's interesting is once you get this transitive back pressure",
    "start": "2370119",
    "end": "2375820"
  },
  {
    "text": "there are all kinds of things that you didn't think you'd need but you now get for free",
    "start": "2375820",
    "end": "2381280"
  },
  {
    "text": "like if you are an intermediary and you want to upload files to S3 or something",
    "start": "2381280",
    "end": "2387700"
  },
  {
    "text": "else and that is slow then that back pressure is actually going through both you and back to the",
    "start": "2387700",
    "end": "2394599"
  },
  {
    "text": "thing that is sending the information so there is a boundedness of your i o",
    "start": "2394599",
    "end": "2401140"
  },
  {
    "text": "that you wouldn't have otherwise so I touched on the topic briefly earlier I think this is one of the most",
    "start": "2401140",
    "end": "2407260"
  },
  {
    "text": "interesting parts of it uh the materialization the ability to stage",
    "start": "2407260",
    "end": "2413079"
  },
  {
    "text": "something to create a description of transformation and then by choice",
    "start": "2413079",
    "end": "2418180"
  },
  {
    "text": "deciding how do I want to make that run that is extremely powerful so because",
    "start": "2418180",
    "end": "2425200"
  },
  {
    "text": "if we can separate these things then we can decide how we want to do it",
    "start": "2425200",
    "end": "2431020"
  },
  {
    "text": "we could have different materializers we could do our own right we could we could augment materialize this we",
    "start": "2431020",
    "end": "2437380"
  },
  {
    "text": "could do some verification or or validation on the graph we could do optimizations",
    "start": "2437380",
    "end": "2444460"
  },
  {
    "text": "Traverse the graph and see okay we can drop these steps here because they're no longer relevant",
    "start": "2444460",
    "end": "2450760"
  },
  {
    "text": "or we could take this description of transformation and what if",
    "start": "2450760",
    "end": "2456339"
  },
  {
    "text": "we take parts of it and run it locally and parts of it and run it somewhere else",
    "start": "2456339",
    "end": "2462720"
  },
  {
    "text": "that doesn't matter right it's a decision how to execute the blueprint",
    "start": "2462820",
    "end": "2468539"
  },
  {
    "text": "another thing that I find interesting is what if we could get some result out of",
    "start": "2469300",
    "end": "2475420"
  },
  {
    "text": "the materialization step so we run the graph and we materialize",
    "start": "2475420",
    "end": "2482200"
  },
  {
    "text": "it but it's going to run asynchronously concurrently and possibly even distributed",
    "start": "2482200",
    "end": "2487540"
  },
  {
    "text": "what if I need some things out of the materialization step this specific",
    "start": "2487540",
    "end": "2492640"
  },
  {
    "text": "materialization instance well every single stage has a",
    "start": "2492640",
    "end": "2498700"
  },
  {
    "text": "materialized value that it can provide when it's going to be materialized and as you compose these stages you're",
    "start": "2498700",
    "end": "2506079"
  },
  {
    "text": "provided with the option of submitting a function that will compose the value of",
    "start": "2506079",
    "end": "2511420"
  },
  {
    "text": "the previous stage with the value of the next stage to produce the materialized value of the composting so you can",
    "start": "2511420",
    "end": "2518619"
  },
  {
    "text": "actually if you wanted to you could even compose like a like an H list of all the",
    "start": "2518619",
    "end": "2524740"
  },
  {
    "text": "values throughout the stage and you will be given that when you materialize The View or the or the Stream",
    "start": "2524740",
    "end": "2532560"
  },
  {
    "text": "right so we're pretty good on time",
    "start": "2534040",
    "end": "2539260"
  },
  {
    "text": "so imagine that we have this runnable graph so it has Source a",
    "start": "2539260",
    "end": "2546280"
  },
  {
    "text": "it has a b a fan out stage the fans to a fan in stage and a flow",
    "start": "2546280",
    "end": "2554260"
  },
  {
    "text": "right C and D and well you can read this right so it's it's nothing specific but the feedback",
    "start": "2554260",
    "end": "2561880"
  },
  {
    "text": "loop here right so there's as Things fall out in the end they're fed back",
    "start": "2561880",
    "end": "2567460"
  },
  {
    "text": "into the process so it's like it could be like a self-improving algorithm right or a fraud detection filter thing or",
    "start": "2567460",
    "end": "2575020"
  },
  {
    "text": "imagine what so let's see what does that look like in code",
    "start": "2575020",
    "end": "2580560"
  },
  {
    "text": "so we create this closed graph right it's a close graph it",
    "start": "2582579",
    "end": "2588339"
  },
  {
    "text": "doesn't will not have inputs and outputs exposed after it's created we create a which is a source of single",
    "start": "2588339",
    "end": "2595900"
  },
  {
    "text": "like it's a zero in this case we create a broadcast which will send",
    "start": "2595900",
    "end": "2600940"
  },
  {
    "text": "the same element to multiple outputs we have emerge",
    "start": "2600940",
    "end": "2607240"
  },
  {
    "text": "that takes two inputs and merges those we have a flow that adds plus one to",
    "start": "2607240",
    "end": "2613599"
  },
  {
    "text": "things that get passed through we have a balance balance stage that",
    "start": "2613599",
    "end": "2619420"
  },
  {
    "text": "will round rope and balance amongst its outputs and we have another merge stage",
    "start": "2619420",
    "end": "2625720"
  },
  {
    "text": "of two and then we have the sink that will just print out the value",
    "start": "2625720",
    "end": "2631060"
  },
  {
    "text": "and as you see here we imported flow graph implicits which will give us this sort",
    "start": "2631060",
    "end": "2636520"
  },
  {
    "text": "of Builder DSL with the squigglies that you can see over there but if you look",
    "start": "2636520",
    "end": "2643839"
  },
  {
    "text": "the code representation of this graph is almost exactly like the graphical",
    "start": "2643839",
    "end": "2650200"
  },
  {
    "text": "representation of the graphs right if you look at the graph picture next to it",
    "start": "2650200",
    "end": "2657180"
  },
  {
    "text": "so having these dags or even cyclic graphs",
    "start": "2657339",
    "end": "2662800"
  },
  {
    "text": "like in this case and being able to reason about their layout",
    "start": "2662800",
    "end": "2669040"
  },
  {
    "text": "is extremely important both for maintainability but also to sort of find issues with how you",
    "start": "2669040",
    "end": "2675700"
  },
  {
    "text": "formulated a graph so you could uh if you wanted to without importing the",
    "start": "2675700",
    "end": "2681760"
  },
  {
    "text": "the flow graph implicit you could just add edges and and manipulating the manipulate the graph programmatically",
    "start": "2681760",
    "end": "2688720"
  },
  {
    "text": "but this is more of a declarative way of of composing the graph",
    "start": "2688720",
    "end": "2694000"
  },
  {
    "text": "so if we have functional programming",
    "start": "2694000",
    "end": "2699579"
  },
  {
    "text": "right we have functions and we can compose functions and we can do interesting things and we can use them",
    "start": "2699579",
    "end": "2704920"
  },
  {
    "text": "with AGA streams here and compose things so the functional interface with a",
    "start": "2704920",
    "end": "2711400"
  },
  {
    "text": "functional programming interface is towards the user so this stack means that it's toward the",
    "start": "2711400",
    "end": "2718480"
  },
  {
    "text": "user and then we have a type of project goldma which has functional programming",
    "start": "2718480",
    "end": "2723640"
  },
  {
    "text": "on the inside of an actor then technically we should be able to have",
    "start": "2723640",
    "end": "2728920"
  },
  {
    "text": "functional programming on the outside functional programming on the inside and the fabric the communication and the",
    "start": "2728920",
    "end": "2736119"
  },
  {
    "text": "resilience will just be the middle layer of this sort of sandwich",
    "start": "2736119",
    "end": "2741400"
  },
  {
    "text": "right so that is not exposed in this part but we get the functional",
    "start": "2741400",
    "end": "2746740"
  },
  {
    "text": "composition and we get the communication and resilience from using the",
    "start": "2746740",
    "end": "2752380"
  },
  {
    "text": "materialization step but we also have the benefit of using functional programming to implement that thing",
    "start": "2752380",
    "end": "2760180"
  },
  {
    "text": "so I think to just to summarize I think if we can use both these things then we can get both the compositional strength",
    "start": "2760180",
    "end": "2766420"
  },
  {
    "text": "of functional programming paired with these sort of communicational strengths and resilience of the actor model",
    "start": "2766420",
    "end": "2774059"
  },
  {
    "text": "thank you [Applause]",
    "start": "2776140",
    "end": "2790180"
  },
  {
    "text": "we have five minutes for questions I guess yes",
    "start": "2790180",
    "end": "2795299"
  },
  {
    "text": "um so I was wondering if you know",
    "start": "2821560",
    "end": "2828900"
  },
  {
    "text": "so you want to do you want to sort of introspect uh what's currently or",
    "start": "2835780",
    "end": "2841359"
  },
  {
    "text": "already added to the Builder uh that's really a good question I haven't done that before but since the Builder just",
    "start": "2841359",
    "end": "2847900"
  },
  {
    "text": "adds vertices and edges the information is there so I don't know if we have exposed it",
    "start": "2847900",
    "end": "2855579"
  },
  {
    "text": "yet but you could definitely do that I think the question it becomes more like a reflective thing right how do you do",
    "start": "2855579",
    "end": "2861040"
  },
  {
    "text": "you even want to be able to reconstruct sort of or backtrack how you added stuff or not or like pull it apart or how do",
    "start": "2861040",
    "end": "2868180"
  },
  {
    "text": "you want to deal with it so you have both sort of the programmatic API of adding things manually but you also have",
    "start": "2868180",
    "end": "2874599"
  },
  {
    "text": "the DSL but clearly if you can if you can devise another API for for adding uh",
    "start": "2874599",
    "end": "2881920"
  },
  {
    "text": "adding Transformations then you have all the tools at your disposal for doing so",
    "start": "2881920",
    "end": "2888220"
  },
  {
    "text": "um that's a good question",
    "start": "2888220",
    "end": "2891119"
  },
  {
    "text": "oh great question so um the reactive streams initiative is",
    "start": "2896319",
    "end": "2901780"
  },
  {
    "text": "reactive streams.org and.com2 um",
    "start": "2901780",
    "end": "2907420"
  },
  {
    "text": "you can get most of the information there uh what we try to do with this my experience with standards committees",
    "start": "2907420",
    "end": "2914460"
  },
  {
    "text": "has not been the best I don't know if there are others that have the same",
    "start": "2914460",
    "end": "2920020"
  },
  {
    "text": "experience but what I think we did right here in this case was we got people like",
    "start": "2920020",
    "end": "2925119"
  },
  {
    "text": "Engineers together that shared the same problem and were willing to solve the",
    "start": "2925119",
    "end": "2931180"
  },
  {
    "text": "problem and we're willing to set aside uh ideal ideology sort of differences to",
    "start": "2931180",
    "end": "2938800"
  },
  {
    "text": "get a a thing that worked and we spent quite a lot of time in compromise or",
    "start": "2938800",
    "end": "2944020"
  },
  {
    "text": "compressing the uh the spec so it's quite small and we also sort of devised",
    "start": "2944020",
    "end": "2950260"
  },
  {
    "text": "a tck in order to verify implementations um I hoped and wished that there would",
    "start": "2950260",
    "end": "2956319"
  },
  {
    "text": "be better tools for doing this so this is sort of like a urge to to all of you like if we can improve the way that we",
    "start": "2956319",
    "end": "2963880"
  },
  {
    "text": "build specifications and verify specifications then we'll do the world a lot of favors",
    "start": "2963880",
    "end": "2971160"
  },
  {
    "text": "most of the protocol scars in my life is due to different interpretations of the same",
    "start": "2971200",
    "end": "2977680"
  },
  {
    "text": "specification leading to a lot of pain but you'll you'll get the more",
    "start": "2977680",
    "end": "2983140"
  },
  {
    "text": "information around the back pressure model from that",
    "start": "2983140",
    "end": "2989460"
  },
  {
    "text": "yes",
    "start": "2991060",
    "end": "2993540"
  },
  {
    "text": "yeah that's a great question so in this case we actually experimented with using",
    "start": "3004619",
    "end": "3009839"
  },
  {
    "text": "an immutable graph Builder the thing is both from a performance point of view it creates quite a bit of",
    "start": "3009839",
    "end": "3016619"
  },
  {
    "text": "especially if you're defining a bigger graph then it creates a lot of churn like",
    "start": "3016619",
    "end": "3022319"
  },
  {
    "text": "practically creates a lot of churn for allocating the new stuff all over the place so this is a case where we did we",
    "start": "3022319",
    "end": "3029940"
  },
  {
    "text": "decided that having a very scoped sort of section of mutable code that doesn't",
    "start": "3029940",
    "end": "3035400"
  },
  {
    "text": "leak out is very sort of the pragmatic approach to the to the problem",
    "start": "3035400",
    "end": "3041099"
  },
  {
    "text": "um I would love to see if we can improve that because uh there are I mean it's a double-edged sword right so",
    "start": "3041099",
    "end": "3047819"
  },
  {
    "text": "you're paying for that performance with other problems but definitely if you have ideas on how we could solve that better",
    "start": "3047819",
    "end": "3053400"
  },
  {
    "text": "more than all ears",
    "start": "3053400",
    "end": "3056779"
  },
  {
    "text": "Reinventing laziness",
    "start": "3061619",
    "end": "3064940"
  },
  {
    "text": "that's an interesting way of looking at because it's sort of like it's not Lacy more like it's demand driven slash",
    "start": "3081420",
    "end": "3088819"
  },
  {
    "text": "evaluate on by by need uh yeah",
    "start": "3088819",
    "end": "3095540"
  },
  {
    "text": "so skull is a strict language so that's the sort of one of the reasons",
    "start": "3095760",
    "end": "3102260"
  },
  {
    "text": "well it's a you have to sort of work with what you have but it's also due to",
    "start": "3103980",
    "end": "3109680"
  },
  {
    "text": "um dealing with potential Network artifacts as well you would have to",
    "start": "3109680",
    "end": "3114780"
  },
  {
    "text": "the Implement it's an implementation level problem so the the protocol itself does not really",
    "start": "3114780",
    "end": "3121880"
  },
  {
    "text": "mandate whether the language is strict or not yes",
    "start": "3121880",
    "end": "3128599"
  },
  {
    "text": "so so the implementation in this sense I mean the reactive streams implementation",
    "start": "3135980",
    "end": "3141359"
  },
  {
    "text": "of the protocol so the protocol only governs the the sort of the the valid transitions or the valid communication",
    "start": "3141359",
    "end": "3147660"
  },
  {
    "text": "between the things it doesn't really say how they should be implemented underneath right so if you want to implement it in",
    "start": "3147660",
    "end": "3155700"
  },
  {
    "text": "a lazy language over here in a strict language over here it's that's not a problem",
    "start": "3155700",
    "end": "3160800"
  },
  {
    "text": "does that make sense",
    "start": "3160800",
    "end": "3163760"
  },
  {
    "text": "so",
    "start": "3173220",
    "end": "3176220"
  },
  {
    "text": "so the thing is in a distributed system",
    "start": "3178400",
    "end": "3184880"
  },
  {
    "text": "you could get things failing right so the question is what is the the result",
    "start": "3184980",
    "end": "3190760"
  },
  {
    "text": "right and is that is that valid for all runs of the program",
    "start": "3190760",
    "end": "3196440"
  },
  {
    "text": "and I guess with a distributed system you never know but there is a there is a both a specification for the valid",
    "start": "3196440",
    "end": "3204420"
  },
  {
    "text": "the valid how to say the valid outcomes rather than the valid outcome",
    "start": "3204420",
    "end": "3213078"
  },
  {
    "text": "so it's the end of the day and you're probably completely ready for uh some fresh air and uh",
    "start": "3216660",
    "end": "3224819"
  },
  {
    "text": "a bit of a walk so thank you everybody [Applause]",
    "start": "3224819",
    "end": "3236309"
  }
]