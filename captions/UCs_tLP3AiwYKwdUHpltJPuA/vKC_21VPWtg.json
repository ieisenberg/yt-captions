[
  {
    "text": "thanks for coming so in the 1920s a spectre was Haunting quantum",
    "start": "5279",
    "end": "12000"
  },
  {
    "text": "physics this was that's the Gren pest or the plague of group Theory so this is a",
    "start": "12000",
    "end": "17840"
  },
  {
    "text": "part of abstract algebra um and a number of physicists at the time including Herman while had been using it to",
    "start": "17840",
    "end": "23240"
  },
  {
    "text": "calculate atomic Spectra sorry something it's Auto",
    "start": "23240",
    "end": "28400"
  },
  {
    "text": "advancing but not everyone was happy there was a lot of resistance few wanted to learn",
    "start": "28400",
    "end": "34760"
  },
  {
    "text": "this new branch of math which they felt was too abstract and an interloper into the world of physics then John Slater",
    "start": "34760",
    "end": "41079"
  },
  {
    "text": "worked out how to do the calculations without using group Theory and physicists were triumphant Slater had",
    "start": "41079",
    "end": "46120"
  },
  {
    "text": "slain the group and pest but in fact it was open only sleeping and then we fast forward to the",
    "start": "46120",
    "end": "52440"
  },
  {
    "text": "1960s group Theory isn't part of the curriculum for physicists but in the meantime a bewildering variety of",
    "start": "52440",
    "end": "58879"
  },
  {
    "text": "Elementary particles have been discovered start off with protons neutrons electrons and then they just",
    "start": "58879",
    "end": "63920"
  },
  {
    "text": "kept coming um um and then in 1961 Mari Gilman",
    "start": "63920",
    "end": "69960"
  },
  {
    "text": "learns group Theory and publish his famous eight-fold way which and wins a Nobel Prize for it so this uses group",
    "start": "69960",
    "end": "76280"
  },
  {
    "text": "Theory to classify the know particles into elegant families described by group Theory it's a forerunner to the theory",
    "start": "76280",
    "end": "83159"
  },
  {
    "text": "of quarks um it's a Triant for group Theory and today it's impossible to imagine theoretical physics without group Theory",
    "start": "83159",
    "end": "89640"
  },
  {
    "text": "it's key part of the curriculum and it's been Central to the advancement of the field so is category Theory our griin",
    "start": "89640",
    "end": "96880"
  },
  {
    "text": "best it's a little abstract to learn it's a little",
    "start": "96880",
    "end": "104320"
  },
  {
    "text": "scary try this this just doesn't work um it's a it's a good model for",
    "start": "104479",
    "end": "111399"
  },
  {
    "text": "what's going on um and it offers new tools so why do",
    "start": "111399",
    "end": "117079"
  },
  {
    "text": "I say I haven't turned this on that's why so",
    "start": "117079",
    "end": "122960"
  },
  {
    "text": "why do I say it's a good model well most of you have probably heard of the curry Howard correspondence so this",
    "start": "122960",
    "end": "129879"
  },
  {
    "text": "gives us uh or propositions of types and proofs programs this gives us a mirror",
    "start": "129879",
    "end": "138360"
  },
  {
    "text": "between the world of logic and programming and lets us translate backwards and forwards but did you know this mirror",
    "start": "138360",
    "end": "145040"
  },
  {
    "text": "has three sides it's actually part of a missing a larger Carrie Howard lamb correspondence",
    "start": "145040",
    "end": "152160"
  },
  {
    "text": "and the third piece is obviously categories um so Bob Harper likes to call this the Holy Trinity of",
    "start": "152160",
    "end": "157319"
  },
  {
    "text": "computational trinitarianism sound rolls off the tongue so given a given a type Theory we",
    "start": "157319",
    "end": "164920"
  },
  {
    "text": "can create a categorical model for it and given a category we can we can talk about its internal language and internal",
    "start": "164920",
    "end": "171760"
  },
  {
    "text": "so that's a kind of type Theory we have an internal logic um the field that studies this is called categorical logic",
    "start": "171760",
    "end": "178480"
  },
  {
    "text": "so in a sense we're already doing C Theory so we can't get away from it we might as well make use of it so okay",
    "start": "178480",
    "end": "185040"
  },
  {
    "text": "quickly some preliminaries um this ride will move quickly please get your pass all times",
    "start": "185040",
    "end": "192360"
  },
  {
    "text": "um uh and you have a trainy driver so now you're all terrified",
    "start": "192360",
    "end": "198280"
  },
  {
    "text": "um but seriously there is an actual category Theory expert here please go to",
    "start": "198280",
    "end": "203519"
  },
  {
    "text": "her Workshop tomorrow it's a tremendous opportunity um obviously I feel like a",
    "start": "203519",
    "end": "208920"
  },
  {
    "text": "bit of a full standing up yeah so what do I mean all of um surely",
    "start": "208920",
    "end": "216560"
  },
  {
    "text": "that's impossible well maybe the impossible is The Only Thing Worth",
    "start": "216560",
    "end": "221640"
  },
  {
    "text": "attempting so you might have seen this book in the spirit of all of chats we're going to quickly cover the fundamentals",
    "start": "223000",
    "end": "229120"
  },
  {
    "text": "of the field so that you'll be set to cover the rest on your own so we won't",
    "start": "229120",
    "end": "234159"
  },
  {
    "text": "become instant instant experts we're just learning the ABCs",
    "start": "234159",
    "end": "241239"
  },
  {
    "text": "so there are a wide range of terms that get banded around in functional",
    "start": "243239",
    "end": "249760"
  },
  {
    "text": "programming um so they all come from category Theory and how do you go about learning them H1 has parisit and they",
    "start": "249760",
    "end": "256959"
  },
  {
    "text": "have parisit and if you're trying to read the N laab or some other source it can feel like an unsolvable tangle what's the",
    "start": "256959",
    "end": "263520"
  },
  {
    "text": "best path to take through the subject to learn category Theory the answer is a",
    "start": "263520",
    "end": "269160"
  },
  {
    "text": "circle of course it's not going to",
    "start": "269160",
    "end": "277039"
  },
  {
    "text": "work sorry okay plays The Circle of Life by",
    "start": "278000",
    "end": "285440"
  },
  {
    "text": "Alon John",
    "start": "285440",
    "end": "292280"
  },
  {
    "text": "um got to put the slides back sorry okay",
    "start": "292280",
    "end": "300720"
  },
  {
    "text": "right um so it's not the ccle life it's circle",
    "start": "309199",
    "end": "316160"
  },
  {
    "text": "of universal constructions so we start with initial objects and we go right down the circle to can extensions um so",
    "start": "316160",
    "end": "324160"
  },
  {
    "text": "this will be our mind map for discovering category Theory don't worry too much about the small print um also",
    "start": "324160",
    "end": "330880"
  },
  {
    "text": "we'll get to it um um in fact all of these things are",
    "start": "330880",
    "end": "336520"
  },
  {
    "text": "equivalent which is quite surprising so meaning we can reformulate each one of them in terms of any of the others so",
    "start": "336520",
    "end": "342919"
  },
  {
    "text": "why are there so many this seems really extravagant well it's also a bit like the gears on a bike um or the",
    "start": "342919",
    "end": "348560"
  },
  {
    "text": "speedometer on your car so we start off in high gear at initial objects it's",
    "start": "348560",
    "end": "354319"
  },
  {
    "text": "easy to Pedal but we don't have a lot of power initial objects are Reas reasonably simple to describe but often",
    "start": "354319",
    "end": "361120"
  },
  {
    "text": "we can't apply them directly we have to create a new category first um and for those who know about F algebras you will",
    "start": "361120",
    "end": "367319"
  },
  {
    "text": "already seen an example so we have we build this new category and initial objects inside it are a nice way to",
    "start": "367319",
    "end": "373160"
  },
  {
    "text": "describe recursive structures and and folds in the original category but we've got to build this new category at the",
    "start": "373160",
    "end": "379560"
  },
  {
    "text": "other end we've moved to low gear we have to work harder to Pedal we've got a lot of",
    "start": "379560",
    "end": "385960"
  },
  {
    "text": "thrust so these more advanced tools like can extensions can usually be applied immediately to a problem and the flip",
    "start": "385960",
    "end": "392160"
  },
  {
    "text": "side is that they are a bit more complex to explain and understand",
    "start": "392160",
    "end": "398240"
  },
  {
    "text": "so I'm going to sh some basic familiarity with categories but let's take a quick refresher so category has",
    "start": "398240",
    "end": "403919"
  },
  {
    "text": "nodes and nodes and edges much like a graph but we call them objects and uh",
    "start": "403919",
    "end": "409039"
  },
  {
    "text": "arrows I'll also call them morphisms um and we'll",
    "start": "409039",
    "end": "415360"
  },
  {
    "text": "use both these notations for the set of arrows from A",
    "start": "415360",
    "end": "421160"
  },
  {
    "text": "to B um we call this a composite um we've got a bit more",
    "start": "421160",
    "end": "426400"
  },
  {
    "text": "algebraic flavor than graph Theory does so we've got composition and units which play the usual unit and associativity",
    "start": "426400",
    "end": "431879"
  },
  {
    "text": "laws we also got equations between arrows um so we write these as commutative diagrams this means we can",
    "start": "431879",
    "end": "438639"
  },
  {
    "text": "keep track of the objects that we pass through um so the opposite category has the same",
    "start": "438639",
    "end": "447479"
  },
  {
    "text": "objects the arrows are flipped um categories really should be called networks um and this explains why",
    "start": "447479",
    "end": "453919"
  },
  {
    "text": "they're so applicable in a whole lot of fields like Electronics chemistry control theory ecology quantum physics",
    "start": "453919",
    "end": "460199"
  },
  {
    "text": "and so on basically any field where you've got the words Network or system is probably a good fit but instead of",
    "start": "460199",
    "end": "466520"
  },
  {
    "text": "course they're called categories um named after the different departments or categories of",
    "start": "466520",
    "end": "472759"
  },
  {
    "text": "mathematics each has its own favorite kind of structure and comes with a",
    "start": "472759",
    "end": "478599"
  },
  {
    "text": "corresponding flavor of structure preserving function so we'll be using the categories of sets types Vector",
    "start": "478599",
    "end": "485840"
  },
  {
    "text": "spaces and monoids um and we're going to focus a lot on this one so you can think of type",
    "start": "485840",
    "end": "492159"
  },
  {
    "text": "as part of hascal so it's the the pure strict and total subset um lets us avoid some",
    "start": "492159",
    "end": "500360"
  },
  {
    "text": "complications um but we can also think of cat's uh algebraic structures in",
    "start": "500360",
    "end": "506199"
  },
  {
    "text": "their own right so a set is just category with no arrows except for",
    "start": "506199",
    "end": "511759"
  },
  {
    "text": "identities so I won't write identity arrows usually",
    "start": "511759",
    "end": "517120"
  },
  {
    "text": "um and what we call a pre-order is a category with the most one Arrow between",
    "start": "517120",
    "end": "522360"
  },
  {
    "text": "any two objects so here we have a lattice of subsets",
    "start": "522360",
    "end": "528320"
  },
  {
    "text": "and an up arrow means is contained within or is less than so we'll write a",
    "start": "528320",
    "end": "534760"
  },
  {
    "text": "is less than or equal to B to abbreviate to mean that this homet is not empty",
    "start": "534760",
    "end": "540600"
  },
  {
    "text": "um next funs so a fun is a way of drawing a picture of one category inside",
    "start": "540600",
    "end": "546720"
  },
  {
    "text": "another it's going to consist of two parts we",
    "start": "546720",
    "end": "551839"
  },
  {
    "text": "have one that sends the objects to the new category and ones that's in the arrows across um and in order to",
    "start": "551839",
    "end": "558720"
  },
  {
    "text": "preserve the shape the arrows need to go where the objects go and need to",
    "start": "558720",
    "end": "565480"
  },
  {
    "text": "preserve identities and composition it doesn't have to be an exact exact copy of course it could miss some objects it",
    "start": "565480",
    "end": "573360"
  },
  {
    "text": "could collapse some objects it could miss some you can't see but there's pale",
    "start": "573360",
    "end": "581120"
  },
  {
    "text": "lines here that the ones we didn't hit um and it can collapse some Arrow to he",
    "start": "581120",
    "end": "586200"
  },
  {
    "text": "the two it two bars of the te collapsed uh so in has school of course",
    "start": "586200",
    "end": "594040"
  },
  {
    "text": "what we call a funter is a funter from type to type um um we've got some",
    "start": "594040",
    "end": "600959"
  },
  {
    "text": "terminology for particular kinds of funs so fun that lands in set is called a",
    "start": "600959",
    "end": "606600"
  },
  {
    "text": "prief a contravariant functor is one that starts off in the in an opposite",
    "start": "606600",
    "end": "611760"
  },
  {
    "text": "category so this will reverse compositions um a functor that takes two",
    "start": "611760",
    "end": "618320"
  },
  {
    "text": "arguments one contar one covariant is called a prief h that it's called a",
    "start": "618320",
    "end": "625240"
  },
  {
    "text": "profunctor um and the good old H fun H set is",
    "start": "625240",
    "end": "632160"
  },
  {
    "text": "actually the prime example so why is this it's because if we precompose with",
    "start": "632160",
    "end": "641240"
  },
  {
    "text": "f post compose with F that acts contravariantly so B goes to B Prime B",
    "start": "641240",
    "end": "648120"
  },
  {
    "text": "goes to B Prime whereas if we act so that's the action of f on the first on",
    "start": "648120",
    "end": "654920"
  },
  {
    "text": "the right hand variable and if we pre OS that acts",
    "start": "654920",
    "end": "660920"
  },
  {
    "text": "contravariantly so that's the action of on the other side um so natural Transformations these",
    "start": "660920",
    "end": "668880"
  },
  {
    "text": "are are just morphing one picture of C into another so each picture is the action of a funter and we Mor one into",
    "start": "668880",
    "end": "676040"
  },
  {
    "text": "the other",
    "start": "676040",
    "end": "680240"
  },
  {
    "text": "um um so um formalizing this we um we we'll",
    "start": "682160",
    "end": "689519"
  },
  {
    "text": "say that a natural transformation should transform each object from F's picture into G's picture but we have to be quite",
    "start": "689519",
    "end": "696839"
  },
  {
    "text": "restricted in order to preserve the shape so following an edge and then translating has to be the same as",
    "start": "696839",
    "end": "702200"
  },
  {
    "text": "translating then following and we call that naturality um and this has to do with natural constructions in",
    "start": "702200",
    "end": "707240"
  },
  {
    "text": "mathematics these are the ones which are also constructively valid so you don't need to use the axium of choice",
    "start": "707240",
    "end": "713040"
  },
  {
    "text": "basically um and naturality was invented to explain where they come from um",
    "start": "713040",
    "end": "719920"
  },
  {
    "text": "just and just to note that because we can now translate between funs this means that our the set of funs between C",
    "start": "719920",
    "end": "725639"
  },
  {
    "text": "and D will be a category on its own um so in h we express we approximate",
    "start": "725639",
    "end": "732680"
  },
  {
    "text": "naturality with polymorphism um which is actually a strict a condition because we're with polymorphism we we're saying",
    "start": "732680",
    "end": "741240"
  },
  {
    "text": "that we do exactly the same thing at each type argument whereas Category 3 only only asked us to um that what we do",
    "start": "741240",
    "end": "749320"
  },
  {
    "text": "it different types should be coherent okay so finally we're ready for",
    "start": "749320",
    "end": "754480"
  },
  {
    "text": "position one on the wheel initial inter internal objects so um a minimum element in a pre- or",
    "start": "754480",
    "end": "764240"
  },
  {
    "text": "partial order is simply the the element an element that's smaller than all the others um we saw before a partial order",
    "start": "764240",
    "end": "772639"
  },
  {
    "text": "is a kind of category so how do we generalize the idea of minimal",
    "start": "772639",
    "end": "778000"
  },
  {
    "text": "element um um well less than or equal gets replaced",
    "start": "778000",
    "end": "783800"
  },
  {
    "text": "with morphism so it's clear that an initial uh object will have to have a",
    "start": "783800",
    "end": "789959"
  },
  {
    "text": "morphism to every other object and to get the right definition definition we",
    "start": "789959",
    "end": "795240"
  },
  {
    "text": "need to require there's exactly one Arrow to each other object so if this is",
    "start": "795240",
    "end": "800600"
  },
  {
    "text": "initial then all these composit will have to agree then there's exactly",
    "start": "800600",
    "end": "807720"
  },
  {
    "text": "one um so in type this will be the empty type there's a unique function from void",
    "start": "807720",
    "end": "816320"
  },
  {
    "text": "to any other type um uh which we sometimes call absurd",
    "start": "816320",
    "end": "821800"
  },
  {
    "text": "there's only one possible function you can write um and dually we've got ter um terminal",
    "start": "821800",
    "end": "832079"
  },
  {
    "text": "objects which are the generalization of greatest element um and so there's that the unit type in",
    "start": "832079",
    "end": "840240"
  },
  {
    "text": "in in high school um and once again there's only one def definition you can write so okay position two Universal",
    "start": "840240",
    "end": "848720"
  },
  {
    "text": "properties um category theorists confidently assert that lots of different things I looked entirely",
    "start": "848720",
    "end": "855560"
  },
  {
    "text": "different are all products what's the common theme um how do we ID when",
    "start": "855560",
    "end": "860920"
  },
  {
    "text": "something is or isn't a product and dually what makes something a sum or a",
    "start": "860920",
    "end": "866839"
  },
  {
    "text": "co-product so let's think about products first um if you studied coordinate",
    "start": "866839",
    "end": "872040"
  },
  {
    "text": "geometry at school especially parameterization of Curves you remember that if we've got a a point tracing out",
    "start": "872040",
    "end": "878279"
  },
  {
    "text": "a path in R2 over time we can break it up into its X and Y coordinates and then",
    "start": "878279",
    "end": "885880"
  },
  {
    "text": "if we put these back together we get the original function uh so there's the signatures of those functions um so",
    "start": "885880",
    "end": "892720"
  },
  {
    "text": "let's write that in our categorical um formulation so X goes from x coordinate",
    "start": "892720",
    "end": "899839"
  },
  {
    "text": "goes from time to the real real line so does a y-coordinate and that should be",
    "start": "899839",
    "end": "905720"
  },
  {
    "text": "isomorphic injection with functions into from time into",
    "start": "905720",
    "end": "911560"
  },
  {
    "text": "R2 um so category theorist would tell us this property is actually what makes a product a product so in general we're",
    "start": "911560",
    "end": "920000"
  },
  {
    "text": "going to have this situation so um the pair consisting of an arrow",
    "start": "920000",
    "end": "927079"
  },
  {
    "text": "from X to a and an Arrow from X to B is equivalent to one",
    "start": "927079",
    "end": "933240"
  },
  {
    "text": "Arrow from X to a * B and for the co-product you guess it we just flip the",
    "start": "933240",
    "end": "938839"
  },
  {
    "text": "whole thing around um so let's step through the definition that category theorist usually give for the product so",
    "start": "938839",
    "end": "945240"
  },
  {
    "text": "product of a and b is another object with projections to A and B just arrows",
    "start": "945240",
    "end": "953120"
  },
  {
    "text": "so that and this is the Universal Property part if you have any other object which also has arrows to A and B",
    "start": "953120",
    "end": "958240"
  },
  {
    "text": "we'll call them F and G there's a unique Arrow from that other object back to P",
    "start": "958240",
    "end": "963959"
  },
  {
    "text": "with a special property which is that the Composites with the projections give you back f and",
    "start": "963959",
    "end": "971279"
  },
  {
    "text": "g okay that's quite a lot to take in but if you squint",
    "start": "971279",
    "end": "978360"
  },
  {
    "text": "you'll maybe see that out of all the objects that have",
    "start": "978360",
    "end": "983880"
  },
  {
    "text": "projections morphisms to A and B we're actually looking for the terminal one so",
    "start": "983880",
    "end": "989639"
  },
  {
    "text": "this is another example of terminal objects um I've highlighted some words",
    "start": "989639",
    "end": "995319"
  },
  {
    "text": "to point out where I'm getting the isomorphism on the previous slide from so for all and there exists a unique",
    "start": "995319",
    "end": "1002800"
  },
  {
    "text": "mean we've got a function and the fact that we get our original f and g back means it has to be a",
    "start": "1002800",
    "end": "1008600"
  },
  {
    "text": "b um so for the um dual situation we just flip the diagram so",
    "start": "1008600",
    "end": "1016839"
  },
  {
    "text": "co-product uh is the closest object heading away from",
    "start": "1016839",
    "end": "1024959"
  },
  {
    "text": "from Q so we think of this as the closest object heading to A and B there",
    "start": "1024959",
    "end": "1031918"
  },
  {
    "text": "closest object heading away from A and B um and we call the arrows into the",
    "start": "1031919",
    "end": "1037839"
  },
  {
    "text": "co-product injections um it's easy enough to translate this to code um functional um",
    "start": "1037839",
    "end": "1045839"
  },
  {
    "text": "languages like Haso were designed to express products and sum so this isn't too surprising um so we take a tuple as",
    "start": "1045839",
    "end": "1053160"
  },
  {
    "text": "a product um uh we have a forwards Direction which is just basically T tling and inverse",
    "start": "1053160",
    "end": "1060360"
  },
  {
    "text": "and first and second of the projections um we have co-products for direction is",
    "start": "1060360",
    "end": "1065559"
  },
  {
    "text": "pattern matching backwards is um the constructors of the injections um so",
    "start": "1065559",
    "end": "1072039"
  },
  {
    "text": "number three representes okay so let's look at the",
    "start": "1072039",
    "end": "1078200"
  },
  {
    "text": "isomorphism of products and sums again both sides are sets in fact they're funs in X so these are isomorphisms of set",
    "start": "1078200",
    "end": "1085440"
  },
  {
    "text": "valued funs in both cases we're being told we can trade in two things for one",
    "start": "1085440",
    "end": "1091000"
  },
  {
    "text": "thing which does the work of the original two so two things one thing um",
    "start": "1091000",
    "end": "1096760"
  },
  {
    "text": "we can talk about this probably situation more generally we say that a set valued funct is isomorphic to um a",
    "start": "1096760",
    "end": "1105000"
  },
  {
    "text": "partially applied H funter h-r or h r d um so we say this is a representable",
    "start": "1105000",
    "end": "1111360"
  },
  {
    "text": "function fun and we say it's represented by R so going back to products and sums",
    "start": "1111360",
    "end": "1118080"
  },
  {
    "text": "we see the the funct on the top left so",
    "start": "1118080",
    "end": "1123679"
  },
  {
    "text": "this is a pair of morphisms one to a and one to B is represented by a * b and a",
    "start": "1123679",
    "end": "1131400"
  },
  {
    "text": "pair of morphisms one from a and one from B is represented by a plus",
    "start": "1131400",
    "end": "1137559"
  },
  {
    "text": "b um um another interesting thing to note is at the top level there's no sums only",
    "start": "1137559",
    "end": "1144480"
  },
  {
    "text": "products um which has interesting implications for functional programming no sums means there's no choices to be",
    "start": "1144480",
    "end": "1150440"
  },
  {
    "text": "made so we've got a single Constructor so we can think of a representable funter as a data structure with one fixed shape the type that represents the",
    "start": "1150440",
    "end": "1157520"
  },
  {
    "text": "functor is going to correspond to all the positions within it it's the type that indexes the data type um Conor MCB",
    "start": "1157520",
    "end": "1163440"
  },
  {
    "text": "likes to draw an analogy with logarithms and exponentials and calls it the logarithm of the data type so a stream",
    "start": "1163440",
    "end": "1171080"
  },
  {
    "text": "is indexed by natural numbers every natural number corresponds to a position in the",
    "start": "1171080",
    "end": "1177120"
  },
  {
    "text": "Stream um and streams are isomorphic to",
    "start": "1177120",
    "end": "1182919"
  },
  {
    "text": "functions from the national Naturals 2 a um so the forwards",
    "start": "1182919",
    "end": "1188880"
  },
  {
    "text": "Direction corresponds to indexing into the stream and the backwards builds up a stream by iterating to all the positions",
    "start": "1188880",
    "end": "1196520"
  },
  {
    "text": "um if you apply from to ID um we",
    "start": "1196520",
    "end": "1204280"
  },
  {
    "text": "get uh a stream with every position labeled filled by the label for that position",
    "start": "1204280",
    "end": "1210720"
  },
  {
    "text": "which is which is cool because the indexing type is manifesting as of value um tups uh right I think I said that um",
    "start": "1210720",
    "end": "1220280"
  },
  {
    "text": "tups are representable because they correspond to functions from the set of choices left or right um and we apply",
    "start": "1220280",
    "end": "1226520"
  },
  {
    "text": "the isomorphism to the identity and we get our Universal element which is",
    "start": "1226520",
    "end": "1232919"
  },
  {
    "text": "the not on the slide the pair left comma right um and we can combine these",
    "start": "1232919",
    "end": "1239840"
  },
  {
    "text": "examples so binary streams we have positions labeled by lists of left or right choices and that's what the universal element looks like most",
    "start": "1239840",
    "end": "1247039"
  },
  {
    "text": "important thing about representable functions is this apparently obscure result it's called the UN need LMA and",
    "start": "1247039",
    "end": "1253520"
  },
  {
    "text": "it actually ends up being the most widely used result in category Theory it's um also been called the deepest",
    "start": "1253520",
    "end": "1258679"
  },
  {
    "text": "triviality known to man so let's pause a minute to unpack what's going on so these two guys",
    "start": "1258679",
    "end": "1266720"
  },
  {
    "text": "are funs um so we're talking about the set of",
    "start": "1266720",
    "end": "1273320"
  },
  {
    "text": "natural Transformations from a partially H functor to F this natural naturality",
    "start": "1273320",
    "end": "1279679"
  },
  {
    "text": "condition is very rigid and in this case there's only one degree of Freedom we have to map the identity on R somewhere",
    "start": "1279679",
    "end": "1285720"
  },
  {
    "text": "so we choose an element on the set f r but once we do this it turns out naturality means we already have a full",
    "start": "1285720",
    "end": "1292520"
  },
  {
    "text": "definition for all objects hand is forced so basically to get the",
    "start": "1292520",
    "end": "1298200"
  },
  {
    "text": "definition of any other object we use fmap to that Universal element okay so done we move on",
    "start": "1298200",
    "end": "1307600"
  },
  {
    "text": "to limits um and",
    "start": "1307600",
    "end": "1312760"
  },
  {
    "text": "cols so let's think back to products um you're possibly already wondering can we",
    "start": "1312760",
    "end": "1319080"
  },
  {
    "text": "generalize for product of many objects um let's try and do one better so we can",
    "start": "1319080",
    "end": "1324799"
  },
  {
    "text": "think of two objects in D so that's C that's D um as the image under some fun",
    "start": "1324799",
    "end": "1331480"
  },
  {
    "text": "of a category which consists of just two objects which I draw as unlabeled dots",
    "start": "1331480",
    "end": "1336559"
  },
  {
    "text": "um we'll call this the image call the image a diagram of shape c in D so we",
    "start": "1336559",
    "end": "1343720"
  },
  {
    "text": "can replace C with another category um to get a diagram of another shape",
    "start": "1343720",
    "end": "1349200"
  },
  {
    "text": "the closest approximation to the diagram um will be called The",
    "start": "1349200",
    "end": "1356720"
  },
  {
    "text": "Limit um and I mean this in the same sense as we had for products the only",
    "start": "1356720",
    "end": "1362320"
  },
  {
    "text": "provisor is if this diagram has arrows in it then these projections have to be",
    "start": "1362320",
    "end": "1368919"
  },
  {
    "text": "coherent in a sense because they're going to interact so in other words if we end up forming any triangles they'll",
    "start": "1368919",
    "end": "1374679"
  },
  {
    "text": "have to commute so straight we've got n products um a nuller product is the same",
    "start": "1374679",
    "end": "1381159"
  },
  {
    "text": "as a terminal object it's a limit of the empty diagram oh this squares around the categories that",
    "start": "1381159",
    "end": "1389080"
  },
  {
    "text": "you can't see there um for parallel arrows we get what's",
    "start": "1389080",
    "end": "1394960"
  },
  {
    "text": "called an equalizer um let's draw it up that way um this is the categorical",
    "start": "1394960",
    "end": "1400960"
  },
  {
    "text": "equivalent to an equation um in sets these will be equations um the set of",
    "start": "1400960",
    "end": "1406320"
  },
  {
    "text": "solutions to in equality between two functions div on X and if our program if our programming language has dependent",
    "start": "1406320",
    "end": "1412799"
  },
  {
    "text": "types then we can express an equalizer using equality types",
    "start": "1412799",
    "end": "1418159"
  },
  {
    "text": "um the sorry",
    "start": "1418159",
    "end": "1424320"
  },
  {
    "text": "the other another important",
    "start": "1424320",
    "end": "1430080"
  },
  {
    "text": "uh um another important limit is the",
    "start": "1430080",
    "end": "1436919"
  },
  {
    "text": "pullback this time our diagram has two two objects with a morm to one in the middle um in set this will be a",
    "start": "1436919",
    "end": "1446320"
  },
  {
    "text": "subset of the product where the two sides are",
    "start": "1446320",
    "end": "1451600"
  },
  {
    "text": "required to agree after applying two functions to a common Co",
    "start": "1451600",
    "end": "1457320"
  },
  {
    "text": "domain so a great example of this is the inverse image of a set so this is the",
    "start": "1457320",
    "end": "1464520"
  },
  {
    "text": "set of x's and y's such that f ofx equals y so it's The Equalizer of F and",
    "start": "1464520",
    "end": "1470080"
  },
  {
    "text": "the identity function um if we flip the diagram around we get",
    "start": "1470080",
    "end": "1478480"
  },
  {
    "text": "Co limits um so this is the closest object heading away from the diagram so",
    "start": "1478480",
    "end": "1485440"
  },
  {
    "text": "we've got Notions of co- equalizer um and",
    "start": "1485440",
    "end": "1492200"
  },
  {
    "text": "pushout um so so in uh so in set these correspond quo of",
    "start": "1492200",
    "end": "1498960"
  },
  {
    "text": "sum in other in other words we're partitioning up the set by an equivalence relation and considering the",
    "start": "1498960",
    "end": "1504399"
  },
  {
    "text": "equivalence classes um these don't exist in type if we mean h agor or Idris but",
    "start": "1504399",
    "end": "1512080"
  },
  {
    "text": "if we've got homotopy type Theory then we have quotient types",
    "start": "1512080",
    "end": "1517360"
  },
  {
    "text": "um uh so summing up a limit is like a dentalized product where the projections",
    "start": "1517360",
    "end": "1522799"
  },
  {
    "text": "have to satisfy some compatibility conditions and a CO limit is a generalized sum where the injection are",
    "start": "1522799",
    "end": "1528640"
  },
  {
    "text": "forced to agree by taking equivalence rels um interesting thing is we don't",
    "start": "1528640",
    "end": "1537840"
  },
  {
    "text": "need to consider all limits we can build all limits as long as we've got equalizers and products and similar we",
    "start": "1537840",
    "end": "1543799"
  },
  {
    "text": "can build all co- limits if we've got coequalizers and co-products okay so let's have a look at",
    "start": "1543799",
    "end": "1552880"
  },
  {
    "text": "adjunctions so' got a fun from C to D um it's natural to ask it's got an inverse",
    "start": "1552880",
    "end": "1559399"
  },
  {
    "text": "in most interesting cases it won't so we've got to ask for the best approximation um so these are called",
    "start": "1559399",
    "end": "1566520"
  },
  {
    "text": "adjoints and they come in pairs uh left and right adjoints so what's happening is the D arrows from DC to D line up one",
    "start": "1566520",
    "end": "1574279"
  },
  {
    "text": "to one with the c AR is from C to Rd um so we say l is the left adint to r r is",
    "start": "1574279",
    "end": "1581679"
  },
  {
    "text": "the right adint to L so let's look at a couple of examples so the function that makes a vector space out of a set of",
    "start": "1581679",
    "end": "1587640"
  },
  {
    "text": "basis vectors is called the free Vector space fun it's opposite which I called",
    "start": "1587640",
    "end": "1593320"
  },
  {
    "text": "u u um uh turns a vector space into in underlining set so it's basically the",
    "start": "1593320",
    "end": "1599880"
  },
  {
    "text": "identity function fun um so the vector space R2 is free on the set of basis",
    "start": "1599880",
    "end": "1607960"
  },
  {
    "text": "vectors I and J the linear map a linear map from R2 to",
    "start": "1607960",
    "end": "1614279"
  },
  {
    "text": "R3 um consists of a 3x2 m Matrix and this Matrix is equivalent to the pair of",
    "start": "1614279",
    "end": "1620600"
  },
  {
    "text": "column vectors that are the images of the basis vectors um the next example should be",
    "start": "1620600",
    "end": "1627080"
  },
  {
    "text": "new and dear to functional programmers funs out of a product cross one one to one to their CED forms that take one",
    "start": "1627080",
    "end": "1632960"
  },
  {
    "text": "argument at a time categories that have an an adjunction like this are called cartisian closed and under the curry",
    "start": "1632960",
    "end": "1640559"
  },
  {
    "text": "Howard lamback correspondence they correspond to the Lambda calculus",
    "start": "1640559",
    "end": "1646360"
  },
  {
    "text": "um so there's important theorem that right adjoints preserve limits and left adjoints preserve colimits um this is",
    "start": "1646360",
    "end": "1653679"
  },
  {
    "text": "handy because it lets us see see the glance that some interesting isomorphisms hold so I know immediately",
    "start": "1653679",
    "end": "1659520"
  },
  {
    "text": "that the underlying set of a product is the product of the underlying sets and that the free monoid on the empty set is",
    "start": "1659520",
    "end": "1666320"
  },
  {
    "text": "the empty set again um okay monoids these of course",
    "start": "1666320",
    "end": "1672480"
  },
  {
    "text": "really important but function programers already spend too much time talking about mons so I'm going to skip it um",
    "start": "1672480",
    "end": "1679559"
  },
  {
    "text": "um we've met um Pro functors before now is there something like a limit for Prof",
    "start": "1679559",
    "end": "1685000"
  },
  {
    "text": "functors well okay we've um I'm running out of",
    "start": "1685000",
    "end": "1691480"
  },
  {
    "text": "time um if we've got a profunctor s and a morphism from A to B there's two wages to reach a sa we can apply start with s",
    "start": "1691480",
    "end": "1698919"
  },
  {
    "text": "AA apply F to the covariant argument or start with SBB and apply F to the contravariant argument this makes a",
    "start": "1698919",
    "end": "1705240"
  },
  {
    "text": "little diagram we do this for all the arrow in our category they overlap to form one big diagram we'll take the",
    "start": "1705240",
    "end": "1711840"
  },
  {
    "text": "limit of that big diagram and that's the end of s so I've",
    "start": "1711840",
    "end": "1718880"
  },
  {
    "text": "just drawn one there but you got imagine there a lot um it's um the notation",
    "start": "1718880",
    "end": "1724080"
  },
  {
    "text": "invented by Unita looks like an integral sign because in a sense we're integrating over the whole category it's",
    "start": "1724080",
    "end": "1729679"
  },
  {
    "text": "a kind of infinite product um with projections um dualizing we've got of",
    "start": "1729679",
    "end": "1735320"
  },
  {
    "text": "course the co end which has injections to each sa AA um and thenation has a",
    "start": "1735320",
    "end": "1741919"
  },
  {
    "text": "parameter at the top of the integral sign um inte great for two reasons the",
    "start": "1741919",
    "end": "1747320"
  },
  {
    "text": "first is that got an easy encoding into hle we model an end as universal quantification and uh simly Coen becomes",
    "start": "1747320",
    "end": "1754120"
  },
  {
    "text": "existential gratification um this is similar to what we had for natural Transformations the H version is",
    "start": "1754120",
    "end": "1759880"
  },
  {
    "text": "actually more stringent um second reason they're great is they're really easy to work with uh",
    "start": "1759880",
    "end": "1765919"
  },
  {
    "text": "so the whole co- end and calculus which mysteriously behaves a lot like integral calculus so we've got a rule of",
    "start": "1765919",
    "end": "1772720"
  },
  {
    "text": "interchange of integrals which is a lot like the fabini theorem um so this makes",
    "start": "1772720",
    "end": "1777840"
  },
  {
    "text": "them in some ways better behave than limits um so here we have the UN need Emma recast in end and co- form which is",
    "start": "1777840",
    "end": "1785640"
  },
  {
    "text": "quite interesting um so sorry here",
    "start": "1785640",
    "end": "1791399"
  },
  {
    "text": "so what what I'm saying is for any pre we've got a unique way to write it as an",
    "start": "1791399",
    "end": "1797000"
  },
  {
    "text": "integral over representable functors um so the",
    "start": "1797000",
    "end": "1803000"
  },
  {
    "text": "representable are in and this is a unique way so the representatives are in some sense the basis vectors of the",
    "start": "1803000",
    "end": "1809120"
  },
  {
    "text": "pre-shave world um so this is sometimes called the density formula um and we use",
    "start": "1809120",
    "end": "1814440"
  },
  {
    "text": "this calculus to uh hang on so right natural",
    "start": "1814440",
    "end": "1822440"
  },
  {
    "text": "Transformations actually appear as a kind of end um so we can",
    "start": "1822440",
    "end": "1829760"
  },
  {
    "text": "use sorry I lost my place um we can use",
    "start": "1829760",
    "end": "1837200"
  },
  {
    "text": "these uh calculat work out isomorphisms between types",
    "start": "1837200",
    "end": "1843840"
  },
  {
    "text": "so here I'm not going to have time to go through this but we apply these rules",
    "start": "1843840",
    "end": "1848880"
  },
  {
    "text": "along with things like our UNC currying and in so on",
    "start": "1848880",
    "end": "1854919"
  },
  {
    "text": "um uh so yeah and we can show things like this a",
    "start": "1854919",
    "end": "1862039"
  },
  {
    "text": "product F to C is the same as this type um and in a similar vein we can prove",
    "start": "1862039",
    "end": "1869399"
  },
  {
    "text": "that the pair of geta and seta is isomorphic to this which if you know the",
    "start": "1869399",
    "end": "1874480"
  },
  {
    "text": "lens library in high school you would have recognized this is the somewhat mysterious representation for lenses",
    "start": "1874480",
    "end": "1882159"
  },
  {
    "text": "that Library so it's basically you just keep applying the same rules and it's a bit of a longer calculation um um okay zero minutes left",
    "start": "1882159",
    "end": "1891000"
  },
  {
    "text": "can extensions um the problem can extensions try to",
    "start": "1891000",
    "end": "1898159"
  },
  {
    "text": "solve is so we've got a fun F defined on C we want to extend its domain of definition to a bigger category D",
    "start": "1898159",
    "end": "1904039"
  },
  {
    "text": "actually we won't insist on bigger we just mean another category we get to Via G so we think of composing G as",
    "start": "1904039",
    "end": "1910320"
  },
  {
    "text": "restricting composing with G as restricting to the smaller category C in",
    "start": "1910320",
    "end": "1916399"
  },
  {
    "text": "other words we're trying to find a fun K from D to e so that doing G than K is",
    "start": "1916399",
    "end": "1922720"
  },
  {
    "text": "the same as doing F this sounds like a hard problem to solve um but the opposite problem is easy so if we've",
    "start": "1922720",
    "end": "1929519"
  },
  {
    "text": "already got a solution k then we just K composed G gives us back the original",
    "start": "1929519",
    "end": "1936480"
  },
  {
    "text": "F so we know that where can we go with this we know that adjoints gives us the best approximations to an inverse",
    "start": "1936480",
    "end": "1942320"
  },
  {
    "text": "problem so let's try that so we call the left and right ad joints to the Restriction along G the",
    "start": "1942320",
    "end": "1950279"
  },
  {
    "text": "left and right can extensions and we call them right Lan and ran",
    "start": "1950279",
    "end": "1956960"
  },
  {
    "text": "um so what's the rest oh okay there's a",
    "start": "1956960",
    "end": "1963440"
  },
  {
    "text": "there's a box here which is a category D there's a box there which is a category C and there's a box there which is a",
    "start": "1963440",
    "end": "1969399"
  },
  {
    "text": "category e um",
    "start": "1969399",
    "end": "1975360"
  },
  {
    "text": "so we've got an object in d uh sorry some you have to go um I'll keep talking and until someone keeps me off the",
    "start": "1975360",
    "end": "1982559"
  },
  {
    "text": "stage yeah okay no yeah cool thanks for coming",
    "start": "1982559",
    "end": "1990399"
  },
  {
    "text": "[Applause]",
    "start": "1992070",
    "end": "1994669"
  }
]