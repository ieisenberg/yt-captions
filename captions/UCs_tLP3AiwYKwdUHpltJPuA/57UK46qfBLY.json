[
  {
    "start": "0",
    "end": "83000"
  },
  {
    "text": "[Music]",
    "start": "6990",
    "end": "10108"
  },
  {
    "text": "thank you and thank you for coming to this talk um the talk is titled",
    "start": "15000",
    "end": "20359"
  },
  {
    "text": "microservices at Netflix scale uh we'll talk about the various definitions of microservices and we'll talk about",
    "start": "20359",
    "end": "26480"
  },
  {
    "text": "Netflix scale uh but first I'd like to start with ask ask you a question",
    "start": "26480",
    "end": "32520"
  },
  {
    "text": "um did anyone make a large purchase recently a house expensive",
    "start": "32520",
    "end": "37920"
  },
  {
    "text": "car all right so a few how many of you made that purchase just looking at the features the benefits and not looking at",
    "start": "37920",
    "end": "44280"
  },
  {
    "text": "the price all right good so the analogy here",
    "start": "44280",
    "end": "50199"
  },
  {
    "text": "with microservices is clear it's in in many talks in many um seminars you go microservices pitched purely for their",
    "start": "50199",
    "end": "58480"
  },
  {
    "text": "benefits but that's only one side of the story these benefit comes at certain costs and so today what I'd like to talk",
    "start": "58480",
    "end": "65280"
  },
  {
    "text": "to you about is Netflix journey to microservices uh benefits and reiterate",
    "start": "65280",
    "end": "71320"
  },
  {
    "text": "some of them costs Lessons Learned basically the best practices and anti- patterns we discovered through our",
    "start": "71320",
    "end": "78040"
  },
  {
    "text": "journey to microservices and some resources that I'd like to make available too uh first by way of introduction",
    "start": "78040",
    "end": "85360"
  },
  {
    "start": "83000",
    "end": "212000"
  },
  {
    "text": "Netflix with over 81 million uh subscribers all over the world we're probably the largest",
    "start": "85360",
    "end": "92119"
  },
  {
    "text": "um uh internet television network and uh we allow people actually people enjoy",
    "start": "92119",
    "end": "98280"
  },
  {
    "text": "over 125 million hours of TV each",
    "start": "98280",
    "end": "103360"
  },
  {
    "text": "day that translates to a lot of band wits we'll talk about it later uh what I do at Netflix is I run several teams",
    "start": "103360",
    "end": "109920"
  },
  {
    "text": "Under the Umbrella of platform engineering we effectively make the Lego blocks that all the rest of the",
    "start": "109920",
    "end": "115479"
  },
  {
    "text": "engineering teams at Netflix use to build their own application so we create that common layer to enable teams to",
    "start": "115479",
    "end": "121240"
  },
  {
    "text": "move fast Netflix rounds and microservices uh",
    "start": "121240",
    "end": "128479"
  },
  {
    "text": "that's a well-known fact but what is Netflix scale so 125 million of ours watch per",
    "start": "128479",
    "end": "135640"
  },
  {
    "text": "day translates to over 4 billion hour streams each month in other terms it translates about",
    "start": "135640",
    "end": "141360"
  },
  {
    "text": "onethird of North American Downstream traffic on average that's a lot of",
    "start": "141360",
    "end": "147879"
  },
  {
    "text": "bits at any point in time all this traffic is supported by over 500",
    "start": "147879",
    "end": "153680"
  },
  {
    "text": "microservices the reason I say over 500 simply because we don't know how many services are running at any given time",
    "start": "153680",
    "end": "161440"
  },
  {
    "text": "uh at any given day we have maybe between hundreds to thousand production changes new services are being deployed",
    "start": "161440",
    "end": "167519"
  },
  {
    "text": "existing services are being changed some services are being retired there is no Central system that Gates it all because",
    "start": "167519",
    "end": "174560"
  },
  {
    "text": "we want people to to be able to move fast all these Services we have a aspiration",
    "start": "174560",
    "end": "180440"
  },
  {
    "text": "goal of four nines of availability the more um uh more closer to reality will",
    "start": "180440",
    "end": "186040"
  },
  {
    "text": "be three and a half nines of availability and we'll talk about that and that runs across three uh AWS",
    "start": "186040",
    "end": "192239"
  },
  {
    "text": "regions uh two in North America and one in Europe across nine availability zones and we'll talk about",
    "start": "192239",
    "end": "198400"
  },
  {
    "text": "why uh all of that on on the people side that's effectively represents a company",
    "start": "198400",
    "end": "203799"
  },
  {
    "text": "of about 2400 people about half of them are technical uh so about 1,200 Engineers working all the",
    "start": "203799",
    "end": "210799"
  },
  {
    "text": "services so let's start with with the journey how how did we get to this point",
    "start": "210799",
    "end": "216000"
  },
  {
    "start": "212000",
    "end": "381000"
  },
  {
    "text": "because we weren't always in the cloud weren't always in",
    "start": "216000",
    "end": "221200"
  },
  {
    "text": "microservices first of all our journey took seven years it didn't happen overnight uh we started back in August",
    "start": "221319",
    "end": "229840"
  },
  {
    "text": "2008 and just finished earlier this year so it was a long journey and our journey",
    "start": "229840",
    "end": "235519"
  },
  {
    "text": "to microservices was not really a necessarily Journey from monolith to microservices per se it was triggered by",
    "start": "235519",
    "end": "242239"
  },
  {
    "text": "our need to move into the cloud and for various reasons we blogged and talked about it uh at numerous places I'm not",
    "start": "242239",
    "end": "248079"
  },
  {
    "text": "going to reiterate there um but effectively the only way for us to take",
    "start": "248079",
    "end": "253400"
  },
  {
    "text": "a very big complex system and take it from data center into the cloud we couldn't just forklift we",
    "start": "253400",
    "end": "259959"
  },
  {
    "text": "couldn't just take this big complex fragile system move into the cloud and say we're done we had to Chisel it piece",
    "start": "259959",
    "end": "266160"
  },
  {
    "text": "by piece effectively microservice by microservice and then deploy it in a cloud re architect it redesign it",
    "start": "266160",
    "end": "272400"
  },
  {
    "text": "reimplement it and put it in a cloud so what did it look like before in our own",
    "start": "272400",
    "end": "277759"
  },
  {
    "text": "data center we had monolith there was this application that all the various teams",
    "start": "277759",
    "end": "283960"
  },
  {
    "text": "contributed jar files it would get baked into a war that war file would go through your",
    "start": "283960",
    "end": "290880"
  },
  {
    "text": "normal uh bi-weekly test release cycle or um Release Train Cycle and eventually",
    "start": "290880",
    "end": "297280"
  },
  {
    "text": "get deployed and on um on a data Bas side it was a a pretty big rdbms Oracle",
    "start": "297280",
    "end": "303280"
  },
  {
    "text": "DB in particular that would take all the traffic and you you can clearly see what the problems uh with with this are",
    "start": "303280",
    "end": "310000"
  },
  {
    "text": "besides the velocity we'll talk about velocity separately but even from reliability perspective this is very",
    "start": "310000",
    "end": "315440"
  },
  {
    "text": "fragile any issue that you introduce to your application whether it's instant or",
    "start": "315440",
    "end": "320680"
  },
  {
    "text": "latent will be homogeneously represented throughout your Farms so if you put a bug into one machine you put a bug into",
    "start": "320680",
    "end": "327080"
  },
  {
    "text": "all machines in addition this data base does represent a single point of failure",
    "start": "327080",
    "end": "332680"
  },
  {
    "text": "so in the previous slide I mentioned August 2008 this is exactly what happened in",
    "start": "332680",
    "end": "338080"
  },
  {
    "text": "August 2008 we had a database failure um our main production database got",
    "start": "338080",
    "end": "343560"
  },
  {
    "text": "corrupted and all of our Netflix users most of them were not streaming at the time but they were still mostly getting",
    "start": "343560",
    "end": "349800"
  },
  {
    "text": "DVD by mail got this ugly message sorry we're working on fixing our problem and",
    "start": "349800",
    "end": "356319"
  },
  {
    "text": "uh we'll get back to you uh that took four days",
    "start": "356319",
    "end": "361639"
  },
  {
    "text": "imagine having a 4-day outage that's that's not pretty so that was sort of a triggering event that led our um",
    "start": "361720",
    "end": "369360"
  },
  {
    "text": "transformation into microservices that led our transformation into being in a cloud only uh and uh I'm really happy",
    "start": "369360",
    "end": "376919"
  },
  {
    "text": "that transition is done before we get into the application",
    "start": "376919",
    "end": "382000"
  },
  {
    "start": "381000",
    "end": "655000"
  },
  {
    "text": "in practice let's talk about the first principles effectively the assumptions that we all made once we started",
    "start": "382000",
    "end": "388280"
  },
  {
    "text": "chiseling away those micros services from the mon application we had to make",
    "start": "388280",
    "end": "393680"
  },
  {
    "text": "certain assumptions we had to prioritize for something so let's uh let's quickly go",
    "start": "393680",
    "end": "398880"
  },
  {
    "text": "through what those assumptions were and uh we'll also talk about why we made those assumptions because again",
    "start": "398880",
    "end": "405080"
  },
  {
    "text": "depending on what you're trying to optimize for the assumptions could be different uh and I didn't want to pit",
    "start": "405080",
    "end": "410599"
  },
  {
    "text": "you a particular Solutions or uh Frameworks without understanding first what those assumptions",
    "start": "410599",
    "end": "416840"
  },
  {
    "text": "are so first of all we really don't like NIH or not invented here if we fac with",
    "start": "416840",
    "end": "423360"
  },
  {
    "text": "a choice between building something or buying something and just to be clear",
    "start": "423360",
    "end": "428440"
  },
  {
    "text": "buying includ it doesn't necessarily in um limit our to a vendor software it",
    "start": "428440",
    "end": "433840"
  },
  {
    "text": "means just using of the Shelf open source software we prefer not to build",
    "start": "433840",
    "end": "438919"
  },
  {
    "text": "it if we can leverage and potentially contribute to something from open source we would rather do that and so we we",
    "start": "438919",
    "end": "447000"
  },
  {
    "text": "only Reserve building something in house for the cases where there is no other",
    "start": "447000",
    "end": "452840"
  },
  {
    "text": "solutions for that will work for us uh particularly with our scale uh",
    "start": "452840",
    "end": "458319"
  },
  {
    "text": "we've tried many solutions that unfortunately ended up not working and ended up being building a lot of our own",
    "start": "458319",
    "end": "463759"
  },
  {
    "text": "software anyway but at least we tried not to most of your services as you breaking",
    "start": "463759",
    "end": "471440"
  },
  {
    "text": "out your monolist should be stateless with a caveat of course you know except for persistence and caching",
    "start": "471440",
    "end": "478199"
  },
  {
    "text": "layer what that means is you shouldn't rely on any sticker sessions if your part any particular instance or or node",
    "start": "478199",
    "end": "484599"
  },
  {
    "text": "uh dies you should be able to Simply retry it hit a different instance and uh",
    "start": "484599",
    "end": "490240"
  },
  {
    "text": "proceed on with your execution it's not enough to say sure okay we'll we'll do that you have to",
    "start": "490240",
    "end": "496039"
  },
  {
    "text": "prove it and the way we prove it at Netflix is by chaos testing uh chaos monkey and Al like will talk about",
    "start": "496039",
    "end": "503199"
  },
  {
    "text": "that scale out versus scale up you have two choices when you need more resources",
    "start": "503199",
    "end": "508680"
  },
  {
    "text": "one you can go to instances or nodes with more resources whether it's CPU memory storage Network you can always",
    "start": "508680",
    "end": "516000"
  },
  {
    "text": "get something that has more until you can't until you're running on that",
    "start": "516000",
    "end": "521880"
  },
  {
    "text": "instance that has the most cores available that has the most dis available and what do you do then you",
    "start": "521880",
    "end": "528880"
  },
  {
    "text": "architecturally paint yourself in a corner so what you'd rather do is when dealing it scale you want to scale out",
    "start": "528880",
    "end": "535399"
  },
  {
    "text": "it's so much easier to add new instances and especially in a cloud because it",
    "start": "535399",
    "end": "540600"
  },
  {
    "text": "gives you that nice benefit of elasticity not infinite elasticity but elasticity",
    "start": "540600",
    "end": "546959"
  },
  {
    "text": "nonetheless redundancy and isolation we'll talk about it when we when we talk um about",
    "start": "547160",
    "end": "553040"
  },
  {
    "text": "resiliency but it's really important redundant and these two principles are really common sense but redundancy you",
    "start": "553040",
    "end": "560279"
  },
  {
    "text": "make more than one of anything you simply don't want any single points of failure even though you make more than",
    "start": "560279",
    "end": "566959"
  },
  {
    "text": "one of anything you still need to isolate the blast radius for even given failure even if you have 150 nodes in",
    "start": "566959",
    "end": "573800"
  },
  {
    "text": "your cluster if one of the failures can result in cascading uh failure",
    "start": "573800",
    "end": "579000"
  },
  {
    "text": "throughout the whole cluster you haven't isolated that failure and so it's important to do",
    "start": "579000",
    "end": "584279"
  },
  {
    "text": "that and of course the destructive testing what you want to do is you don't want it to be a oneoff you don't want to",
    "start": "584279",
    "end": "590720"
  },
  {
    "text": "just do it once a quarter once a release or once whatever cycle like you want it",
    "start": "590720",
    "end": "596160"
  },
  {
    "text": "to be constantly running you want to constant constantly prove that your system can withstand the failures that",
    "start": "596160",
    "end": "602560"
  },
  {
    "text": "occur now it's not if the failure occur failure will occur it's when it will",
    "start": "602560",
    "end": "607880"
  },
  {
    "text": "occur and chances are Murphy's low still working last I checked failure will occur in the middle of the night on",
    "start": "607880",
    "end": "614920"
  },
  {
    "text": "Saturday night where most of your engineers are asleep or drunk or both and that's not the time when you",
    "start": "614920",
    "end": "622160"
  },
  {
    "text": "want to wake them up and have have to deal with a failure and so we actually put a lot of",
    "start": "622160",
    "end": "628079"
  },
  {
    "text": "thought and practice in into running destructive failures all the time during the office hours where Engineers are",
    "start": "628079",
    "end": "634240"
  },
  {
    "text": "there they're caffeinated they're fully alert they can deal with problems right away so it started with chaos monkey",
    "start": "634240",
    "end": "641600"
  },
  {
    "text": "probably our most famous member of the semi Army but it actually grew into much bigger thing uh with the whole principle",
    "start": "641600",
    "end": "648200"
  },
  {
    "text": "of being able to destructively prove that our systems are",
    "start": "648200",
    "end": "653959"
  },
  {
    "text": "resilient so how do these first principles all these assumptions work work in action",
    "start": "653959",
    "end": "661240"
  },
  {
    "start": "655000",
    "end": "989000"
  },
  {
    "text": "well we talked about stateless services in our ecosystem in order for a stateless",
    "start": "661320",
    "end": "667600"
  },
  {
    "text": "service to be a a good citizen effectively it just needs to do a few things it needs to register into service",
    "start": "667600",
    "end": "673959"
  },
  {
    "text": "Discovery and depending on your ecosystem service Discovery may be anything it could be DNS it could be",
    "start": "673959",
    "end": "679839"
  },
  {
    "text": "your own service Discovery anything it needs to implement a externally colable",
    "start": "679839",
    "end": "685079"
  },
  {
    "text": "health check again whether it's your service Discovery or um or load balancer",
    "start": "685079",
    "end": "690399"
  },
  {
    "text": "or other external agent can verify that your systems are not just there but they actually up and running and they're",
    "start": "690399",
    "end": "697279"
  },
  {
    "text": "functional and in order to call other services it needs to utilize that information it gets from service",
    "start": "697279",
    "end": "702680"
  },
  {
    "text": "discovery of where the other services are located simple right right until it",
    "start": "702680",
    "end": "708959"
  },
  {
    "text": "fails so when it fails all you need to be able to verify",
    "start": "708959",
    "end": "714480"
  },
  {
    "text": "is that the calling services in this particular diagram service a just need needs to retry that",
    "start": "714480",
    "end": "721880"
  },
  {
    "text": "request get a different instance of service B get the same response and then move on in order to do that you have to",
    "start": "721880",
    "end": "729200"
  },
  {
    "text": "kill an instance of service b or introduce a network partitioning event between a service a and an instance of",
    "start": "729200",
    "end": "735279"
  },
  {
    "text": "service B and then verify that the results are the same you have to do it",
    "start": "735279",
    "end": "740800"
  },
  {
    "text": "in production that's the catch I've seen tons of instances where",
    "start": "740800",
    "end": "746320"
  },
  {
    "text": "uh developers and companies claim that yes I've done this testing I've done this testing on my development machine",
    "start": "746320",
    "end": "751959"
  },
  {
    "text": "or environment I've done this testing in test or QA environment and yet in production the",
    "start": "751959",
    "end": "757800"
  },
  {
    "text": "systems failed in a different way so if you really want to prove to yourself that your stateless services are truly",
    "start": "757800",
    "end": "763680"
  },
  {
    "text": "stateless do this in production you don't have to do it overnight you can",
    "start": "763680",
    "end": "769320"
  },
  {
    "text": "build confidence but eventually if you really want to do this you got to do it in",
    "start": "769320",
    "end": "774920"
  },
  {
    "text": "production KS Mony I mentioned it already that's what it it's effectively a monkey running around data center a",
    "start": "775560",
    "end": "782040"
  },
  {
    "text": "virtual data center in our case but data center nonetheless and K killing instances",
    "start": "782040",
    "end": "787600"
  },
  {
    "text": "randomly uh we run it Monday through Friday 9 to 3 uh and each application is",
    "start": "787600",
    "end": "795199"
  },
  {
    "text": "subject to it initially it was just stateless only now it's stateful applications as well and you can tune it",
    "start": "795199",
    "end": "800360"
  },
  {
    "text": "basically you can you can tune it from doing it infrequently of maybe once a day to if you're feeling more bold more",
    "start": "800360",
    "end": "807240"
  },
  {
    "text": "frequently and see how your system reacts data so I mentioned in our data center",
    "start": "807240",
    "end": "814199"
  },
  {
    "text": "environment we had this big rdbms instances running Oracle DBS when we",
    "start": "814199",
    "end": "819720"
  },
  {
    "text": "started migrating to microservices to um to the cloud we embraced Cassandra as",
    "start": "819720",
    "end": "825440"
  },
  {
    "text": "our main uh key value storage and for several reasons um one it uh it actually",
    "start": "825440",
    "end": "832360"
  },
  {
    "text": "runs at scale it's uh one of the biggest scale nosql engines it's open source and",
    "start": "832360",
    "end": "839480"
  },
  {
    "text": "that was important to us because very early on we needed to and we in fact contributed quite a bit uh to Cassandra",
    "start": "839480",
    "end": "846040"
  },
  {
    "text": "in order to make it multi Regional multi-directional replication ready and in terms of the storage engine",
    "start": "846040",
    "end": "854199"
  },
  {
    "text": "uh From perspective of cap theorem it's available it's it tolerates partitions well and it has t tunable consistency",
    "start": "854199",
    "end": "861720"
  },
  {
    "text": "now in many talks about Cassandra you'll hear that it's a eventual consistency engine that's actually only a part of",
    "start": "861720",
    "end": "868000"
  },
  {
    "text": "the story Cassandra per request whether you're reading or writing you can tune the consistency of that request from cl1",
    "start": "868000",
    "end": "875759"
  },
  {
    "text": "which is pure eventual consistency to local Quorum all the way to the global Quorum I don't recommend Global Quorum",
    "start": "875759",
    "end": "883079"
  },
  {
    "text": "and we'll we'll go in in those reasons so this is actually how",
    "start": "883079",
    "end": "888839"
  },
  {
    "text": "Cassandra multiregional replication Works uh on one side your client let's say wres with a local Quorum that means",
    "start": "888839",
    "end": "896800"
  },
  {
    "text": "uh you're going to get uh three replicas locally is in the region before getting an act before confirming that the right",
    "start": "896800",
    "end": "902040"
  },
  {
    "text": "has been made but what you don't want to do is tolerate that confirmation over the longdistance network across the",
    "start": "902040",
    "end": "908880"
  },
  {
    "text": "regions your reads and WR simply will be too slow it's not going to scale so what you want to do is you want to replicate",
    "start": "908880",
    "end": "916160"
  },
  {
    "text": "that data across regions asynchronously and uh that's actually a change that one one of our committers",
    "start": "916160",
    "end": "923000"
  },
  {
    "text": "contributed to Cassandra very early on many years ago and now it's default in the distribution",
    "start": "923000",
    "end": "930040"
  },
  {
    "text": "so we talked about stateless Services we talked about stateful Services there is also issue of Billing",
    "start": "930040",
    "end": "936720"
  },
  {
    "text": "Services which probably composed of both but they deal with money so you have to",
    "start": "936720",
    "end": "942000"
  },
  {
    "text": "be a little bit more careful and that's actually that's the service that took us the longest to migrate to the cloud to break into microservices and for a good",
    "start": "942000",
    "end": "949079"
  },
  {
    "text": "reason we don't want to overcharge our users we also don't want to undercharge our users we want to do it just",
    "start": "949079",
    "end": "956680"
  },
  {
    "text": "right uh so in know also in order to be compliant with socks and PCI in in us we",
    "start": "956680",
    "end": "962959"
  },
  {
    "text": "had to put these Services into a separate account uh with a limited",
    "start": "962959",
    "end": "968319"
  },
  {
    "text": "access it's not as fully open as um all the other production systems at Netflix",
    "start": "968319",
    "end": "973440"
  },
  {
    "text": "it should be fully logged and auditable uh and",
    "start": "973440",
    "end": "979920"
  },
  {
    "text": "um and the key the key there is is just uh just to be a little bit more careful",
    "start": "980319",
    "end": "986120"
  },
  {
    "text": "about what you're doing okay so I will go very quickly through",
    "start": "986120",
    "end": "992680"
  },
  {
    "start": "989000",
    "end": "1179000"
  },
  {
    "text": "through the benefits of microservices because I'm pretty sure you've heard many of them already many times but I",
    "start": "992680",
    "end": "998040"
  },
  {
    "text": "think some of them worth repeating but before that what are Netflix priorities",
    "start": "998040",
    "end": "1003279"
  },
  {
    "text": "what are we trying to optimize for well first and foremost we want to optimize for velocity for Innovation for us it's",
    "start": "1003279",
    "end": "1009880"
  },
  {
    "text": "really important that all of our teams that are working on Netflix product move fast and because of that we're actually",
    "start": "1009880",
    "end": "1015519"
  },
  {
    "text": "willing and so far being able to to sacrifice a little bit of reliability that's why you see reliability is",
    "start": "1015519",
    "end": "1021120"
  },
  {
    "text": "priority number two as silly as it may sound in order to to achieve that high",
    "start": "1021120",
    "end": "1026600"
  },
  {
    "text": "velocity and efficiency is only a third on that list so when we we we making this",
    "start": "1026600",
    "end": "1032720"
  },
  {
    "text": "tradeoffs when we trying to decide which way to optimize we always optimize for Innovation first and that's exactly the",
    "start": "1032720",
    "end": "1039720"
  },
  {
    "text": "challenge that you have in the typical monolith systems and really cycles of monolith systems you have your teams",
    "start": "1039720",
    "end": "1046360"
  },
  {
    "text": "that are producing various components they're all developing eventually they submit their development results into a",
    "start": "1046360",
    "end": "1052760"
  },
  {
    "text": "test cycle for the train release and eventually after the QA signs off that gets",
    "start": "1052760",
    "end": "1058440"
  },
  {
    "text": "released that creates a lot of tight coupling between the teams and that just doesn't work if you're trying to optimize for velocity it's too",
    "start": "1058440",
    "end": "1067160"
  },
  {
    "text": "slow loose coupling is when you have each team working",
    "start": "1068520",
    "end": "1074280"
  },
  {
    "text": "independently that means each team needs to now work all of the parts of the cycle they develop the architect they",
    "start": "1074280",
    "end": "1080520"
  },
  {
    "text": "design they develop they test they deploy and they support in other words it's endtoend",
    "start": "1080520",
    "end": "1087400"
  },
  {
    "text": "ownership now in this sometimes it's called devops Model I'm trying not to use this word because it's getting",
    "start": "1087400",
    "end": "1093520"
  },
  {
    "text": "overused to the point of being a buzzword but if you think of endtoend ownership your team is responsible for",
    "start": "1093520",
    "end": "1099679"
  },
  {
    "text": "everything from Cradle to the Grave and this way their motivations are",
    "start": "1099679",
    "end": "1105480"
  },
  {
    "text": "set up so they write quality code but they also write it fast because Engineers especially great Engineers",
    "start": "1105480",
    "end": "1111280"
  },
  {
    "text": "they're motivated by the results they're motivated by the impact that they",
    "start": "1111280",
    "end": "1116799"
  },
  {
    "text": "make and if each team owns the full cycle you'd get something like this where all of them are",
    "start": "1116799",
    "end": "1123280"
  },
  {
    "text": "constantly making progress all of them are constantly doing",
    "start": "1123280",
    "end": "1128480"
  },
  {
    "text": "something if you think about it in technical terms imagine each team is a thread and all of them running",
    "start": "1128840",
    "end": "1134159"
  },
  {
    "text": "independently in parallel without a single gate uh to block them to impede",
    "start": "1134159",
    "end": "1139600"
  },
  {
    "text": "the progress all these teams that Netflix runs they very Loosely coupled we don't have a central um place to gate",
    "start": "1139600",
    "end": "1146760"
  },
  {
    "text": "uh or approve their releases they each move on their own cycle at their own Cadence you also get the benefit of",
    "start": "1146760",
    "end": "1153720"
  },
  {
    "text": "separation of concerns for example the lowest layer the infrastructure teams that I work with we mostly concerns with",
    "start": "1153720",
    "end": "1161400"
  },
  {
    "text": "availability scalability security the fundamental qualities that each application should have so then the",
    "start": "1161400",
    "end": "1168240"
  },
  {
    "text": "teams who who build their applications out of Lego blocks that we provide don't have to reinvent that wheel they can",
    "start": "1168240",
    "end": "1174280"
  },
  {
    "text": "build on top of it and leverage what we already have done enough about the benefits though",
    "start": "1174280",
    "end": "1180559"
  },
  {
    "start": "1179000",
    "end": "1387000"
  },
  {
    "text": "let's talk about the cost nothing is free first and",
    "start": "1180559",
    "end": "1186600"
  },
  {
    "text": "foremost microservices and N change if you want all your teams to",
    "start": "1186600",
    "end": "1194320"
  },
  {
    "text": "embrace the full cycle that means",
    "start": "1194320",
    "end": "1200400"
  },
  {
    "text": "you no longer have necessarily a QA team you no longer have an Ops Team now who wants to hear that the job",
    "start": "1200400",
    "end": "1208280"
  },
  {
    "text": "is going away or changing right these are the the harder things these are the",
    "start": "1208280",
    "end": "1213360"
  },
  {
    "text": "people things emotions are involved or changes are",
    "start": "1213360",
    "end": "1218480"
  },
  {
    "text": "hard and so what you what you need to do is you have to evolve the organization over time gradually you won't be able to",
    "start": "1219240",
    "end": "1225720"
  },
  {
    "text": "do it overnight and just to give you a couple of examples of how your practices may change again depending on what works",
    "start": "1225720",
    "end": "1233039"
  },
  {
    "text": "for you uh in our data center environment many years ago we had a centralized",
    "start": "1233039",
    "end": "1238679"
  },
  {
    "text": "knock that was basically approving and driving all the releases right we had a um it group that",
    "start": "1238679",
    "end": "1247080"
  },
  {
    "text": "was responsible for uh capacity and budgeting and planning and executing that capacity uh we had uh dbas who were",
    "start": "1247080",
    "end": "1255559"
  },
  {
    "text": "effectively Gatekeepers to this big rdbs that we had we no longer have any of",
    "start": "1255559",
    "end": "1261720"
  },
  {
    "text": "that now if the developer or team needs resources they self-provision it through",
    "start": "1261720",
    "end": "1267520"
  },
  {
    "text": "the tools now because they do it through the tools it's all transparent everybody can see what's going on and the people",
    "start": "1267520",
    "end": "1273919"
  },
  {
    "text": "who concerned themselves with capacity they can see a real-time signal of where that capacity is",
    "start": "1273919",
    "end": "1280159"
  },
  {
    "text": "needed we don't have a no team we have a s team that builds centralized set of tools that everybody can use leverage to",
    "start": "1280159",
    "end": "1286440"
  },
  {
    "text": "operate their own systems but they're not gating anybody and the dbas they work with",
    "start": "1286440",
    "end": "1293360"
  },
  {
    "text": "other teams to work out what what schemas for their databases would be optimal but we don't operate anything",
    "start": "1293360",
    "end": "1299799"
  },
  {
    "text": "for anybody so it's a lot of centralized teams who build the support models build a Frameworks for other teams to enable",
    "start": "1299799",
    "end": "1307159"
  },
  {
    "text": "them to own the full full life cycle again it's effectively we building these Lego",
    "start": "1307159",
    "end": "1314279"
  },
  {
    "text": "blocks but in order for you to reap that benefit you have to invest you have to build the teams that will",
    "start": "1314279",
    "end": "1321039"
  },
  {
    "text": "build these Lego blocks here comes the catch you have to",
    "start": "1321039",
    "end": "1326720"
  },
  {
    "text": "do it while still running your old stack and because migration doesn't",
    "start": "1326720",
    "end": "1332279"
  },
  {
    "text": "happen overnight you're going to be living in this dual World for for a while and at Netflix we we use this term",
    "start": "1332279",
    "end": "1339360"
  },
  {
    "text": "that this image represents Roman riding that's when you run ride two horses one leg at a time this guy looks very",
    "start": "1339360",
    "end": "1347360"
  },
  {
    "text": "uncomfortable think about it you supporting two tax TXS that's double the",
    "start": "1347520",
    "end": "1353200"
  },
  {
    "text": "bugs double the maintenance sometimes you have to propagate new features into two places",
    "start": "1353200",
    "end": "1359760"
  },
  {
    "text": "you have to replicate data and multimaster data replication especially it's scale is no picnic no matter what",
    "start": "1359760",
    "end": "1367200"
  },
  {
    "text": "what great Engineers you have and how much testing you do it's not going to be foolproof and only once you switch over",
    "start": "1367200",
    "end": "1375039"
  },
  {
    "text": "the source of Truth to the new state and stop that multimaster dat application you will be able to breathe a sigh of",
    "start": "1375039",
    "end": "1381159"
  },
  {
    "text": "relief until then you're going to be constantly fighting some kind of",
    "start": "1381159",
    "end": "1386880"
  },
  {
    "text": "battles so what kind of lessons we learned through that uh through that Journey uh first and foremost that there",
    "start": "1386880",
    "end": "1394000"
  },
  {
    "start": "1392000",
    "end": "1481000"
  },
  {
    "text": "are a few pieces that are critical to ensure this loose coupling now you talk about loose coupling between the various",
    "start": "1394000",
    "end": "1400400"
  },
  {
    "text": "teams developing microservices that are really two pieces that are needed one I covered on the slide which is IPC or IPC",
    "start": "1400400",
    "end": "1407640"
  },
  {
    "text": "RPC again interchangeable terms but you effectively want to establish a contract",
    "start": "1407640",
    "end": "1412960"
  },
  {
    "text": "or a language between any two services to talk to one another this way when time comes to De develop a new system",
    "start": "1412960",
    "end": "1420120"
  },
  {
    "text": "you already know which language to talk to all these systems and if you have 500 plus microservices running you don't",
    "start": "1420120",
    "end": "1427039"
  },
  {
    "text": "want to know 500 different languages it just simply doesn't scale so IPC is one",
    "start": "1427039",
    "end": "1432159"
  },
  {
    "text": "of those pieces the other one equally is important you want some homogeneity you",
    "start": "1432159",
    "end": "1438000"
  },
  {
    "text": "want some um consistency in how your applications are being deployed uh uh for us initially it was",
    "start": "1438000",
    "end": "1445279"
  },
  {
    "text": "Asgard that we had to develop in-house uh and then we recently uh replaced it with another tool that we also open",
    "start": "1445279",
    "end": "1451159"
  },
  {
    "text": "source called Spiner uh that automates all of our deployment um workflows um",
    "start": "1451159",
    "end": "1457320"
  },
  {
    "text": "the benefit of that being again the same Central Tool is that people don't have to reinvent this wheel already and we",
    "start": "1457320",
    "end": "1464480"
  },
  {
    "text": "also get a source of Truth point of view from what application were deployed when",
    "start": "1464480",
    "end": "1470240"
  },
  {
    "text": "uh and how uh and that provides an invaluable Insight in a time of Crisis one of the first things you want to see",
    "start": "1470240",
    "end": "1476440"
  },
  {
    "text": "when something goes sou is what was changed most recently",
    "start": "1476440",
    "end": "1483559"
  },
  {
    "start": "1481000",
    "end": "1579000"
  },
  {
    "text": "databases it's one thing when your database gets uh called by one or two",
    "start": "1484919",
    "end": "1489960"
  },
  {
    "text": "monol applications it's completely different when Suddenly It's get pummeled by 500 plus microservices you",
    "start": "1489960",
    "end": "1497080"
  },
  {
    "text": "want to protect your database and so a pattern that we um evolved into",
    "start": "1497080",
    "end": "1502360"
  },
  {
    "text": "over time is that for our most heavily hit databases even Cassandra has its limits we protect it with a layer of",
    "start": "1502360",
    "end": "1509039"
  },
  {
    "text": "cache and so we use actually two different cache uh caching Technologies",
    "start": "1509039",
    "end": "1514080"
  },
  {
    "text": "within Netflix one is the the key key value um addon we build on top of M cach",
    "start": "1514080",
    "end": "1520240"
  },
  {
    "text": "called evach and the other one is a richer schema that you could use redis for it is called Dynamite but the idea",
    "start": "1520240",
    "end": "1526840"
  },
  {
    "text": "is the same what you want to do is on the read path you want to hit cache",
    "start": "1526840",
    "end": "1531919"
  },
  {
    "text": "first and go to database only on a cach m and if you go to database on the cache",
    "start": "1531919",
    "end": "1537000"
  },
  {
    "text": "Miss on the way back you're going to backfill the cache you also want to make sure that in",
    "start": "1537000",
    "end": "1543760"
  },
  {
    "text": "your call graph right at the top of that call graph you will have a certain request cache so then for example if in",
    "start": "1543760",
    "end": "1551120"
  },
  {
    "text": "the beginning of that call you had to fetch the user information uh to understand some",
    "start": "1551120",
    "end": "1556760"
  },
  {
    "text": "metadata about that user you will propagate it Downstream so all the subsequent uh Services don't have to go",
    "start": "1556760",
    "end": "1563360"
  },
  {
    "text": "and call that database again to fish the same metadata over and over and over again uh you will find that you will",
    "start": "1563360",
    "end": "1569600"
  },
  {
    "text": "reduce the load in your databases by at least one order of magnitude maybe two maybe three depends on your call graph",
    "start": "1569600",
    "end": "1575880"
  },
  {
    "text": "depth and Inter interconnectedness Telemetry operational",
    "start": "1575880",
    "end": "1581559"
  },
  {
    "start": "1579000",
    "end": "1597000"
  },
  {
    "text": "visibility matters a lot if you run your monolith you",
    "start": "1581559",
    "end": "1588360"
  },
  {
    "text": "probably has some good metrics of what kind of application and system metrics you're looking into to to understand",
    "start": "1588360",
    "end": "1593640"
  },
  {
    "text": "your systems Health when you run hundreds of",
    "start": "1593640",
    "end": "1599000"
  },
  {
    "start": "1597000",
    "end": "1698000"
  },
  {
    "text": "microservices will your Telemetry scale how many graphs are you looking per server multiply it by number of",
    "start": "1599000",
    "end": "1605440"
  },
  {
    "text": "microservices that you have um will you be able to see forest from the",
    "start": "1605440",
    "end": "1612080"
  },
  {
    "text": "trees per server how much individual Human Action is needed when something",
    "start": "1612080",
    "end": "1617159"
  },
  {
    "text": "goes wrong how much of that are you able to automate just to give you an idea um",
    "start": "1617159",
    "end": "1623200"
  },
  {
    "text": "at Netflix we generate over 20 million metrics a second on average that translates to",
    "start": "1623200",
    "end": "1629679"
  },
  {
    "text": "about 1.7 trillion a day that that's simply unsustainable for",
    "start": "1629679",
    "end": "1635279"
  },
  {
    "text": "anybody any human to look into all of those metrics and actually be able to get some signal from that noise and so",
    "start": "1635279",
    "end": "1643120"
  },
  {
    "text": "most of these metrics never get looked at at least by a human they get piped into automatic",
    "start": "1643120",
    "end": "1648720"
  },
  {
    "text": "um uh um sorry um automatic error",
    "start": "1648720",
    "end": "1654360"
  },
  {
    "text": "detection algorithms U uh they get piped into automatic remediation algorithms",
    "start": "1654360",
    "end": "1659559"
  },
  {
    "text": "that will detect if there is an anomaly and in many cases will correct it without human ever ever being",
    "start": "1659559",
    "end": "1667559"
  },
  {
    "text": "involved the same goes to your log analysis tools right if you generate",
    "start": "1667840",
    "end": "1672919"
  },
  {
    "text": "logs like like us Ian couple of years ago my ex colleague coin the term that Netflix as a log generation service that",
    "start": "1672919",
    "end": "1680159"
  },
  {
    "text": "also allows you to watch movies because we just produce such an obscene amount of logs and so you need",
    "start": "1680159",
    "end": "1687840"
  },
  {
    "text": "to be able to find and hone in tools that will allow you to to get that",
    "start": "1687840",
    "end": "1693080"
  },
  {
    "text": "signal out of all that noise and preferably automate as much of it as you",
    "start": "1693080",
    "end": "1699200"
  },
  {
    "start": "1698000",
    "end": "1770000"
  },
  {
    "text": "can so this is what it looks like uh once you get into this scale of microservices you simply don't have a",
    "start": "1699440",
    "end": "1706080"
  },
  {
    "text": "luxury of having architectural dat diagrams CU things change all the time",
    "start": "1706080",
    "end": "1712519"
  },
  {
    "text": "and so what you'll need is a runtime at runtime you need to be able to discern who's calling who how where are the",
    "start": "1712519",
    "end": "1719320"
  },
  {
    "text": "errors uh where is traffic flowing is there any congestion into a system it may look something like this it may look",
    "start": "1719320",
    "end": "1724960"
  },
  {
    "text": "something different in this particular case you see that traffic starts at the elastic load balancer for us then it",
    "start": "1724960",
    "end": "1730880"
  },
  {
    "text": "gets spread through um our front U line of defense called zul which is our um",
    "start": "1730880",
    "end": "1736039"
  },
  {
    "text": "front end proxy then your calls may go into playback",
    "start": "1736039",
    "end": "1741240"
  },
  {
    "text": "systems API back end and this area comprises our Edge systems this kind of",
    "start": "1741240",
    "end": "1747159"
  },
  {
    "text": "front line of defense from then on you have middle tier Services platform",
    "start": "1747159",
    "end": "1752279"
  },
  {
    "text": "services like caching and um databases and so on and so forth but this type of",
    "start": "1752279",
    "end": "1758320"
  },
  {
    "text": "insight this type of telemetry you have to generate at run time because if you just create a static architectural",
    "start": "1758320",
    "end": "1764519"
  },
  {
    "text": "diagram with the next service p is going to change it's going to render it UPS",
    "start": "1764519",
    "end": "1770039"
  },
  {
    "start": "1770000",
    "end": "1803000"
  },
  {
    "text": "lead reliability it matters a lot especially at scale failure happens in distributed",
    "start": "1770600",
    "end": "1777640"
  },
  {
    "text": "systems and the rate of failure is proportional to the amount of change that you're pushing through in a scale",
    "start": "1777640",
    "end": "1783559"
  },
  {
    "text": "that which you running for us both are massive and so this Thrive",
    "start": "1783559",
    "end": "1789200"
  },
  {
    "text": "aspirationally we strive for four nines of availability unfortunately that only leaves us 52 minutes of downtime per",
    "start": "1789200",
    "end": "1794960"
  },
  {
    "text": "year up to now we haven't been able to consistently achieve that now and when",
    "start": "1794960",
    "end": "1800600"
  },
  {
    "text": "Netflix these days when Netflix is out that causes some",
    "start": "1800600",
    "end": "1806200"
  },
  {
    "text": "disappointment outrage or",
    "start": "1807799",
    "end": "1814919"
  },
  {
    "text": "withdrawal luckily some people actually do retain their sense of humor and react a lot more",
    "start": "1818320",
    "end": "1825398"
  },
  {
    "text": "positively but availability is important as much as we'd like to focus on Innovation and",
    "start": "1826960",
    "end": "1833000"
  },
  {
    "text": "velocity only you can do it at least for long if your system becomes unavailable",
    "start": "1833000",
    "end": "1838320"
  },
  {
    "text": "people just stop using it now in distributed systems especially when you have large number of",
    "start": "1838320",
    "end": "1844159"
  },
  {
    "start": "1840000",
    "end": "1871000"
  },
  {
    "text": "microservices you have to face the fact that you'll see some cascading",
    "start": "1844159",
    "end": "1849240"
  },
  {
    "text": "failures if you test each individual service microservice that you're right and each individual service reliability",
    "start": "1849240",
    "end": "1855600"
  },
  {
    "text": "is 29 well it's not great but it's not bad but if your graph is fairly",
    "start": "1855600",
    "end": "1861399"
  },
  {
    "text": "interconnected and you have over 500 of them the total availability is not going to be very good in fact you're going to",
    "start": "1861399",
    "end": "1867039"
  },
  {
    "text": "be out of service most of the time that's not acceptable so what you want to do is you",
    "start": "1867039",
    "end": "1874799"
  },
  {
    "start": "1871000",
    "end": "2200000"
  },
  {
    "text": "want to detect and correct these failures as fast as you can thus comes",
    "start": "1874799",
    "end": "1880880"
  },
  {
    "text": "the this the whole concept of circuit breakers because circuit breakers detect the fault in your electrical systems and",
    "start": "1880880",
    "end": "1886639"
  },
  {
    "text": "trigger a fallback in electrical systems you simply switch the power off but in software we have more options if you",
    "start": "1886639",
    "end": "1893679"
  },
  {
    "text": "detect a failure in a downstream system what you don't want is that that same failure to be propagated eventually to",
    "start": "1893679",
    "end": "1899440"
  },
  {
    "text": "the client because that that's not very helpful even if you propagate that failure fast what you want to do is you you want",
    "start": "1899440",
    "end": "1906480"
  },
  {
    "text": "to detect that there is a problem and figure out whether the problem is with a critical service which case game is over",
    "start": "1906480",
    "end": "1913440"
  },
  {
    "text": "or non-critical service and if it's a non-critical service like for example it at Netflix it could be a personalization",
    "start": "1913440",
    "end": "1920840"
  },
  {
    "text": "maybe for whatever reason we cannot give you the level of personalization that we like to do well you still can probably",
    "start": "1920840",
    "end": "1926519"
  },
  {
    "text": "would enjoy browsing and selecting a from a set of movies and TV shows that's not necessarily personalized to your",
    "start": "1926519",
    "end": "1933000"
  },
  {
    "text": "maximum liking probably will still find something good to watch so what you'd like to do you want all those failures",
    "start": "1933000",
    "end": "1939200"
  },
  {
    "text": "to turn into fallbacks as immediately as you can in this way you can still",
    "start": "1939200",
    "end": "1944240"
  },
  {
    "text": "operate while your uh the team responsible uh goes to debug and uh fix the",
    "start": "1944240",
    "end": "1950000"
  },
  {
    "text": "problem so a few years back we actually open source a library that enables us to do just that it's called histrix and",
    "start": "1950000",
    "end": "1956440"
  },
  {
    "text": "it's been used by many companies we've been getting really good uh feedback and contributions of",
    "start": "1956440",
    "end": "1961919"
  },
  {
    "text": "that I can't emphasize this enough you have to do destructive testing failures will happen and you only know how your",
    "start": "1961919",
    "end": "1968679"
  },
  {
    "text": "system will react to that failure if you inject it you got to do it in production again",
    "start": "1968679",
    "end": "1974600"
  },
  {
    "text": "not to start with but eventually if you want to prove it you got to do it in production because failures happen not just at a",
    "start": "1974600",
    "end": "1981720"
  },
  {
    "text": "system or cluster level but across those clusters at the network level some failures are more Insidious",
    "start": "1981720",
    "end": "1988200"
  },
  {
    "text": "than others if something fails it's actually a lot cleaner you know it's broken you",
    "start": "1988200",
    "end": "1995159"
  },
  {
    "text": "know you're getting error or mangled response back you can deal with it it's a lot more Insidious when the response",
    "start": "1995159",
    "end": "2002320"
  },
  {
    "text": "is returned just too slow too late right at the point where it's going to trigger your",
    "start": "2002320",
    "end": "2008639"
  },
  {
    "text": "timeout imagine it could cause cascading timeouts that's just not a not a pretty",
    "start": "2008639",
    "end": "2013679"
  },
  {
    "text": "scenario and so we actually develop a system internally known as fit where we able to inject per request in individual",
    "start": "2013679",
    "end": "2020559"
  },
  {
    "text": "call Path um certain faults and the faults could be errors or there could be latencies or combinations",
    "start": "2020559",
    "end": "2027840"
  },
  {
    "text": "thereof and when all else fails you got to trigger failure on more massive scale",
    "start": "2027840",
    "end": "2033760"
  },
  {
    "text": "it's not enough to trigger failure in individual instance or Zone or even full",
    "start": "2033760",
    "end": "2039159"
  },
  {
    "text": "cluster at Netflix we actually trigger failures exercises in production on a",
    "start": "2039159",
    "end": "2044279"
  },
  {
    "text": "monthly basis at least for our full regions so all of our services run at Three AWS regions across nine zones at",
    "start": "2044279",
    "end": "2052158"
  },
  {
    "text": "least once a month we randomly select one of the regions and we evacuate out of it we basically simulate that if that",
    "start": "2052159",
    "end": "2058638"
  },
  {
    "text": "region would fail what would our users see and our goal which happily to say",
    "start": "2058639",
    "end": "2064800"
  },
  {
    "text": "right now is the case when we evacuate AR region as a user you will not see a thing Netflix services will continue",
    "start": "2064800",
    "end": "2071358"
  },
  {
    "text": "working as if nothing happened it wasn't always like that the",
    "start": "2071359",
    "end": "2076720"
  },
  {
    "text": "first couple of times we run uh this simulation we call it Kos Kong things were not as fun we had about",
    "start": "2076720",
    "end": "2083320"
  },
  {
    "text": "40 engineers in a war room scenario debugging for about 4 hours trying to figure out various things that went",
    "start": "2083320",
    "end": "2089679"
  },
  {
    "text": "wrong and then we fixed those things and we tried it again then it was 10 Engineers debugging for about 2 hours",
    "start": "2089679",
    "end": "2097079"
  },
  {
    "text": "and now it's itively a piece of automation a piece of script that runs at monthly intervals most of Engineers",
    "start": "2097079",
    "end": "2102599"
  },
  {
    "text": "don't even know when it runs because the results are so transparent it takes a while to get",
    "start": "2102599",
    "end": "2108320"
  },
  {
    "text": "there but once you get there the rewards are pretty damn good so that's uh that's the graphs of",
    "start": "2108320",
    "end": "2115920"
  },
  {
    "text": "us in this particular case evacuating uh Us East into US West and EU West regions",
    "start": "2115920",
    "end": "2122480"
  },
  {
    "text": "uh you will see that as the on the bottom as the traffic went out to the other regions the overall traffic did",
    "start": "2122480",
    "end": "2129480"
  },
  {
    "text": "not change or as this much cooler illustration shows this is what a lot",
    "start": "2129480",
    "end": "2135720"
  },
  {
    "text": "faster time scale replay of what exactly happened the traffic that you see emanating from the middle circle is the",
    "start": "2135720",
    "end": "2141640"
  },
  {
    "text": "traffic from our users from the internet the traffic across the edges that's the traffic between the",
    "start": "2141640",
    "end": "2147640"
  },
  {
    "text": "regions and you will see that right now we triggered a failure in uh this region",
    "start": "2147640",
    "end": "2153079"
  },
  {
    "text": "right here in US West 2 it turned red and we just started proxying tra traffic to the other two surviving",
    "start": "2153079",
    "end": "2161119"
  },
  {
    "text": "regions and as that continues to to ramp up speed and scale at certain",
    "start": "2161240",
    "end": "2168079"
  },
  {
    "text": "point we will flip DNS switch and you will no longer see any traffic hitting Us East US West because all the all the",
    "start": "2168079",
    "end": "2175760"
  },
  {
    "text": "traffic had been fully redirected to the other regions this is a big",
    "start": "2175760",
    "end": "2181599"
  },
  {
    "text": "hammer takes a long time to get there but if High availability is your goal",
    "start": "2181599",
    "end": "2186920"
  },
  {
    "text": "you're going to have to exercise something like this not necessarily this it's whatever works for",
    "start": "2186920",
    "end": "2193720"
  },
  {
    "text": "you okay uh no Tok on microservices would be complete without mentioning",
    "start": "2193720",
    "end": "2199560"
  },
  {
    "text": "containers it's latest and greatest very shiny but let's get down to Basics",
    "start": "2199560",
    "end": "2205160"
  },
  {
    "start": "2200000",
    "end": "2245000"
  },
  {
    "text": "containers don't make microservices containers change the level of encapsulation of isolation from",
    "start": "2205160",
    "end": "2211880"
  },
  {
    "text": "virtual machine to a process containers bring you great benefits specific L for developer",
    "start": "2211880",
    "end": "2218440"
  },
  {
    "text": "velocity you can uh iterate on a second length Cycles you get the same artifact",
    "start": "2218440",
    "end": "2225319"
  },
  {
    "text": "that you around your development machine the same as in production you can do a lot of really cool magic with containers",
    "start": "2225319",
    "end": "2231680"
  },
  {
    "text": "as actually the first talk this morning showed but it's not a silver bullet and",
    "start": "2231680",
    "end": "2237680"
  },
  {
    "text": "so make sure that you're using it because it's a right tool for the job besides to run containers at scale would",
    "start": "2237680",
    "end": "2244839"
  },
  {
    "text": "require something like this the slide is intention Ally meant to be an information overload I'm not going to",
    "start": "2244839",
    "end": "2250480"
  },
  {
    "text": "dwell on any details here but it does require a very significant and complex systems now Google has done amazing work",
    "start": "2250480",
    "end": "2258599"
  },
  {
    "text": "with kubernetes it's matured quite a bit over the last couple of years um if",
    "start": "2258599",
    "end": "2263680"
  },
  {
    "text": "you're thinking of containers use a uh foundational blocks that are available to you don't write your own",
    "start": "2263680",
    "end": "2270680"
  },
  {
    "text": "unfortunately for us we started a bit earlier where a lot of these blocks were not available or were not available at",
    "start": "2270680",
    "end": "2276000"
  },
  {
    "text": "our scale and so again our preference is not to build something we can buy in",
    "start": "2276000",
    "end": "2281079"
  },
  {
    "text": "this case we actually ended up building a lot of pieces uh in our um container runtime called uh Titus uh we had to",
    "start": "2281079",
    "end": "2288800"
  },
  {
    "text": "write our own custom scheduler and a whole bunch of other things simply because the the ecosystem were not was",
    "start": "2288800",
    "end": "2294560"
  },
  {
    "text": "not ready yet for our scale so let's talk about some resources",
    "start": "2294560",
    "end": "2299920"
  },
  {
    "start": "2296000",
    "end": "2322000"
  },
  {
    "text": "that uh are available for you or you can think of it as a commercial break from the regularly scheduled presentation um",
    "start": "2299920",
    "end": "2306560"
  },
  {
    "text": "because we by being Pioneer into the cloud so early we ended up writing a lot of",
    "start": "2306560",
    "end": "2313079"
  },
  {
    "text": "things anyway and because we ended up writing a lot of these kind of foundational pieces we open source them",
    "start": "2313079",
    "end": "2319119"
  },
  {
    "text": "and so they're available to you if you go to netflix. github.com you will find",
    "start": "2319119",
    "end": "2327119"
  },
  {
    "start": "2322000",
    "end": "2434000"
  },
  {
    "text": "most of our infrastructure pieces the tooling pieces that are available to you to use and contribute if you choose to",
    "start": "2327119",
    "end": "2335359"
  },
  {
    "text": "it and uh this separated into major categories so it should be fairly easy for you to find anything that you're",
    "start": "2335359",
    "end": "2341319"
  },
  {
    "text": "looking for uh the don't try to read the small small print you can just go to the site and it's all it's all there um but",
    "start": "2341319",
    "end": "2348839"
  },
  {
    "text": "the the main the main pieces that you could benefit from uh Spiner is the tool that we open source that works for",
    "start": "2348839",
    "end": "2354720"
  },
  {
    "text": "continuous delivery workflow deployments uh consistently throughout any your stateful or stateless",
    "start": "2354720",
    "end": "2362000"
  },
  {
    "text": "applications uh for the common runtime sharing uh libraries if you need service Discovery for example we have Eureka",
    "start": "2362000",
    "end": "2368079"
  },
  {
    "text": "that you could use there are many other Alternatives as well and uh there are a few IPC components uh there as well for",
    "start": "2368079",
    "end": "2375839"
  },
  {
    "text": "um data persistence the uh open source and contributed um components to Cassandra ecosystem components to redis",
    "start": "2375839",
    "end": "2382560"
  },
  {
    "text": "ecosystem if you need to make redus distributed we have the component Dynamite uh evach for the mcash um",
    "start": "2382560",
    "end": "2389720"
  },
  {
    "text": "client replication and such for insight again if you need a Telemetry for distributed systems at",
    "start": "2389720",
    "end": "2396880"
  },
  {
    "text": "scale large pieces of it are available you can plug it into your ecosystem security matters a lot and",
    "start": "2396880",
    "end": "2404599"
  },
  {
    "text": "probably the last thing you want your teams to keep Reinventing is security pieces it takes some skilled security",
    "start": "2404599",
    "end": "2411640"
  },
  {
    "text": "software Engineers to write good crypto to write good secur systems that will not fall down on their basic attacks and",
    "start": "2411640",
    "end": "2419119"
  },
  {
    "text": "what you'd like to do is to provide these either a services or shared libraries so your application Engineers",
    "start": "2419119",
    "end": "2424800"
  },
  {
    "text": "can focus on the application logic that's their business impact it's not Reinventing",
    "start": "2424800",
    "end": "2431119"
  },
  {
    "text": "security so to wrap up microservices are good they bring",
    "start": "2431280",
    "end": "2436520"
  },
  {
    "start": "2434000",
    "end": "2477000"
  },
  {
    "text": "Great Value to development velocity availability many other dimensions but they're not free",
    "start": "2436520",
    "end": "2443560"
  },
  {
    "text": "microservices at scale first and foremost requires organizational change and centralized infrastructure",
    "start": "2443560",
    "end": "2448920"
  },
  {
    "text": "investment if you want to do it right and it's up to you when you want to make that investment just keep in mind that",
    "start": "2448920",
    "end": "2456040"
  },
  {
    "text": "if you have 10 teams working on 10 microservices and you want to introduce a certain centralized change there is",
    "start": "2456040",
    "end": "2462599"
  },
  {
    "text": "this much amount of tax that all 10 teams will have to pay if you want to do it later and perhaps it's 200 teams",
    "start": "2462599",
    "end": "2469560"
  },
  {
    "text": "running 200 microservices your centralized tax becomes a lot larger and so optimized",
    "start": "2469560",
    "end": "2477200"
  },
  {
    "start": "2477000",
    "end": "2503000"
  },
  {
    "text": "accordingly also I can stress this enough don't do something just because we did it what worked for us may not",
    "start": "2477200",
    "end": "2484400"
  },
  {
    "text": "work for you so be aware of your situation and and what are the right tradeoffs optimizations for you we're",
    "start": "2484400",
    "end": "2491079"
  },
  {
    "text": "happy to share our tools but they they only work for you if you makeing the similar assumptions and similar",
    "start": "2491079",
    "end": "2497160"
  },
  {
    "text": "tradeoffs as we do I hope this was helpful I can take any of your questions",
    "start": "2497160",
    "end": "2504440"
  },
  {
    "start": "2503000",
    "end": "2913000"
  },
  {
    "text": "now thank you very much um there are some interesting questions from uh from the audience and uh actually one of them",
    "start": "2510680",
    "end": "2517880"
  },
  {
    "text": "uh caused a little smile on my face um analog to the falling tree in the",
    "start": "2517880",
    "end": "2524920"
  },
  {
    "text": "forest if chaos Kong kills stuff and nobody notices it notices it how do you",
    "start": "2524920",
    "end": "2530160"
  },
  {
    "text": "know it actually happened excellent question so just because um just because our users may",
    "start": "2530160",
    "end": "2536599"
  },
  {
    "text": "not be aware that Kos Kong killed something our Telemetry is uh we have uh",
    "start": "2536599",
    "end": "2542599"
  },
  {
    "text": "Telemetry and logs and obscene amounts that pretty much tells us everything that's happening with the another system",
    "start": "2542599",
    "end": "2549040"
  },
  {
    "text": "now of course the most obvious side effect that we never want to see but seen it from time to time is when Kos",
    "start": "2549040",
    "end": "2554800"
  },
  {
    "text": "Kong causes user impact but this is actually a failure that we can learn from and make our systems more resilient",
    "start": "2554800",
    "end": "2561440"
  },
  {
    "text": "the tougher situation is when K kill something and users don't see anything it actually takes discipline from all",
    "start": "2561440",
    "end": "2568160"
  },
  {
    "text": "the system developers involved to look at their log of their system Health",
    "start": "2568160",
    "end": "2574240"
  },
  {
    "text": "understand how the systems fared under the ation situation under the latency",
    "start": "2574240",
    "end": "2579640"
  },
  {
    "text": "situations and make sure that there is no bottlenecks that we're close to reaching that there is no failures that",
    "start": "2579640",
    "end": "2584839"
  },
  {
    "text": "we just uh degraded out of and everything seemed peachy but it wasn't uh so there is a little bit of followup",
    "start": "2584839",
    "end": "2590800"
  },
  {
    "text": "that happens internally uh but first and foremost of course when we run Kongs is that there's no user",
    "start": "2590800",
    "end": "2598440"
  },
  {
    "text": "impact and who or how do you decide what services and thus teams need to be",
    "start": "2599280",
    "end": "2606040"
  },
  {
    "text": "created or go away way is that a central architect or ah excellent question so we",
    "start": "2606040",
    "end": "2612240"
  },
  {
    "text": "don't have a central architect we don't have architectural committees",
    "start": "2612240",
    "end": "2617359"
  },
  {
    "text": "um we really try to embrace culturally this whole concept of loose coupling and",
    "start": "2617359",
    "end": "2623680"
  },
  {
    "text": "individual or in this particular case team freedom and responsibility so each",
    "start": "2623680",
    "end": "2629200"
  },
  {
    "text": "team is free but also responsible for making these calls when new Services",
    "start": "2629200",
    "end": "2634559"
  },
  {
    "text": "need to come into operation when certain Serv need to be retired and how to deal with the migration",
    "start": "2634559",
    "end": "2642078"
  },
  {
    "text": "strategies um I think someone is afraid to do the chaos testing in production so",
    "start": "2642119",
    "end": "2647839"
  },
  {
    "text": "I think that's why this question came up would you also recommend destructive testing on production on more critical",
    "start": "2647839",
    "end": "2654119"
  },
  {
    "text": "applications for example Financial again it depends what you're",
    "start": "2654119",
    "end": "2660520"
  },
  {
    "text": "trying to optimize for it's a really good question but at certain point you need to embrace the fact that failure",
    "start": "2660520",
    "end": "2666640"
  },
  {
    "text": "will happen and if you don't test it it's going to happen anyway what you're what you're gaining",
    "start": "2666640",
    "end": "2674720"
  },
  {
    "text": "on running the destructive testing and yes in production is your understanding of whether your technology is ready to",
    "start": "2674720",
    "end": "2681240"
  },
  {
    "text": "deal with these failures but more importantly are your people ready to this to deal with these",
    "start": "2681240",
    "end": "2686880"
  },
  {
    "text": "failures for example will they have run books or will they have to scramble do you have enough people who understand",
    "start": "2686880",
    "end": "2693800"
  },
  {
    "text": "your systems do you have enough people who know who to call who understand these systems these",
    "start": "2693800",
    "end": "2700440"
  },
  {
    "text": "Readiness you can do simulation you can run the drills but nothing beats running",
    "start": "2700440",
    "end": "2705760"
  },
  {
    "text": "it in production and if you want to do it in production but on a copy of that let's say because it's your bilding system in a shadow mode that's fine too",
    "start": "2705760",
    "end": "2713280"
  },
  {
    "text": "but you want to get as close to the real thing as you're comfortable with please don't do it just because Netflix does it",
    "start": "2713280",
    "end": "2720119"
  },
  {
    "text": "we got comfortable with this over years so to do a fire drill you don't really need to put the building on fire",
    "start": "2720119",
    "end": "2726640"
  },
  {
    "text": "that's what you're saying probably not no um a question that has popped up more",
    "start": "2726640",
    "end": "2733760"
  },
  {
    "text": "than once so I I really have to ask that where can we get those awesome Service",
    "start": "2733760",
    "end": "2739559"
  },
  {
    "text": "visualizations uh uh so the service visualization uh that I used here in",
    "start": "2739559",
    "end": "2745079"
  },
  {
    "text": "videos are called uh flux and flow uh they haven't been open sourced yet uh",
    "start": "2745079",
    "end": "2750760"
  },
  {
    "text": "but uh I use the keyword yet because our",
    "start": "2750760",
    "end": "2755880"
  },
  {
    "text": "philosophy is gener generally we want to open source anything that's not proprietary critical to the business",
    "start": "2755880",
    "end": "2761640"
  },
  {
    "text": "which these as a pieces of infrastructure are not we'd like to share them at the same time I can't",
    "start": "2761640",
    "end": "2766880"
  },
  {
    "text": "commit on behalf of those teams to any particular timeline because business priorities always come first all I can",
    "start": "2766880",
    "end": "2772839"
  },
  {
    "text": "tell you that we'd love to open source and we'd love to share it with you and actually get your feedback and contributions I just don't know how soon",
    "start": "2772839",
    "end": "2779240"
  },
  {
    "text": "or how not soon it's going to happen I guess we have time for uh for",
    "start": "2779240",
    "end": "2784680"
  },
  {
    "text": "one or two more uh what kind of discipline do you ask of your team members oh that's a loaded question um",
    "start": "2784680",
    "end": "2793680"
  },
  {
    "text": "nothing really in particular but um if you haven't seen our culture deck I",
    "start": "2793680",
    "end": "2798839"
  },
  {
    "text": "highly recommend you go see it it's available on SlideShare on our site uh if you've seen it this whole concept of",
    "start": "2798839",
    "end": "2805000"
  },
  {
    "text": "freedom and responsibility uh the type of developers that are hired and become",
    "start": "2805000",
    "end": "2810079"
  },
  {
    "text": "successful at Netflix really embrace it and it doesn't mean that these people don't make mistakes it means that they",
    "start": "2810079",
    "end": "2816359"
  },
  {
    "text": "learn from the mistakes mistakes are fine I mean that's how we learn you just don't want to keep making the same",
    "start": "2816359",
    "end": "2821920"
  },
  {
    "text": "mistake all over again okay last question Services belong",
    "start": "2821920",
    "end": "2829520"
  },
  {
    "text": "to teams how do you handle new functionality that needs change in many services is there something to manage",
    "start": "2829520",
    "end": "2835480"
  },
  {
    "text": "this smoothly yes and um it's it's one of",
    "start": "2835480",
    "end": "2841720"
  },
  {
    "text": "those hard situations where there's no no magic bullet there are cases especially with",
    "start": "2841720",
    "end": "2847520"
  },
  {
    "text": "security let's say you want to respond to a newly discovered threat uh or you",
    "start": "2847520",
    "end": "2853079"
  },
  {
    "text": "need you need a critical piece of functionality to be spread throughout all the services uh where a campaign a",
    "start": "2853079",
    "end": "2859280"
  },
  {
    "text": "centralized campaign is necessary and you need somebody to coordinate it most of the time for us",
    "start": "2859280",
    "end": "2866559"
  },
  {
    "text": "this is basically the team that is pushing the change the championing the change they go and cross functional interface with whoever uh required and",
    "start": "2866559",
    "end": "2874599"
  },
  {
    "text": "make that change um get into production because most of our teams uh do",
    "start": "2874599",
    "end": "2880040"
  },
  {
    "text": "Implement some sort of cicd um where even centralized Library changes gets pushed on a regular Cadence",
    "start": "2880040",
    "end": "2887160"
  },
  {
    "text": "automatically um it really becomes a question of long tail there will be no no matter how much you try to embra",
    "start": "2887160",
    "end": "2893280"
  },
  {
    "text": "Embrace continuous delivery there will be a subset of applications that are not pushed as often and those will require",
    "start": "2893280",
    "end": "2899079"
  },
  {
    "text": "special attention okay that's it right thank you very much and please make sure that you",
    "start": "2899079",
    "end": "2904800"
  },
  {
    "text": "vote for the session",
    "start": "2904800",
    "end": "2908760"
  }
]