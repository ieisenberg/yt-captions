[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "text": "so my name is Victor Kang I work for a company called typ safe uh I am happy to",
    "start": "799",
    "end": "7080"
  },
  {
    "text": "work with a lot of really smart people uh which is something that uh makes your life really interesting um and today I'm",
    "start": "7080",
    "end": "14759"
  },
  {
    "text": "here to talk to you guys about streaming and stream programming or stream based programming so I have a lot of stuff to",
    "start": "14759",
    "end": "22680"
  },
  {
    "text": "say and uh we only have so many minutes so I will try to just churn through and",
    "start": "22680",
    "end": "29759"
  },
  {
    "text": "you guys as soon as you feel like there's something that needs to be elaborated you just ask and let's settle",
    "start": "29759",
    "end": "35360"
  },
  {
    "text": "that then and there um so let's start there's a quick little agenda I won't",
    "start": "35360",
    "end": "42800"
  },
  {
    "text": "read it to you I think that will be just fine but just to set sort of the the",
    "start": "42800",
    "end": "48719"
  },
  {
    "text": "frame of things so let's start I want to start by saying that streams are not Collections",
    "start": "48719",
    "end": "56680"
  },
  {
    "text": "and the reason I'm going to say this is it makes a whole lot of difference to us",
    "start": "56680",
    "end": "62480"
  },
  {
    "text": "as programmers uh the definitions of the words that we use so that we understand",
    "start": "62480",
    "end": "67520"
  },
  {
    "text": "each other and that we understand ourselves so let me get through the",
    "start": "67520",
    "end": "73479"
  },
  {
    "text": "streams or not collections reasoning there was a uh slightly famous",
    "start": "73479",
    "end": "80840"
  },
  {
    "text": "um Greek guy who once said you cannot step into the same stream for as you are",
    "start": "80840",
    "end": "87040"
  },
  {
    "text": "stepping in other waters are ever flowing unto to you sort of sets the stage there's",
    "start": "87040",
    "end": "93560"
  },
  {
    "text": "something something related to time there right it's like can't do it two",
    "start": "93560",
    "end": "101000"
  },
  {
    "text": "times so what is a stream in this context we're talking about an ephemeral flow of data it's something that is not",
    "start": "101000",
    "end": "108799"
  },
  {
    "start": "103000",
    "end": "205000"
  },
  {
    "text": "static it's something that uh um disappears underneath us so to say and",
    "start": "108799",
    "end": "115920"
  },
  {
    "text": "what's interesting is that a stream can be potentially unbounded in length and",
    "start": "115920",
    "end": "121200"
  },
  {
    "text": "the reason I say unbounded instead of infinite is because infinites have a whole lot of other baggage that gets",
    "start": "121200",
    "end": "126880"
  },
  {
    "text": "pulled into the picture so think of it as something that potentially never",
    "start": "126880",
    "end": "133319"
  },
  {
    "text": "ends when we talk about stream based programming we're usually focusing on describing transformation if we have",
    "start": "135680",
    "end": "142760"
  },
  {
    "text": "something that is Flowing we can take that thing coming from the upstream and",
    "start": "142760",
    "end": "148400"
  },
  {
    "text": "apply some transformation and push that to the downstream like a filtering operation or just passing data through",
    "start": "148400",
    "end": "155640"
  },
  {
    "text": "if we want to copy from one place to another what's interesting about that is",
    "start": "155640",
    "end": "161760"
  },
  {
    "text": "we can sort of see it as a processing Network that we can form we can have",
    "start": "161760",
    "end": "167720"
  },
  {
    "text": "different stages sort of the Upstream is going in that direction and the downstream is going in this direction so",
    "start": "167720",
    "end": "174440"
  },
  {
    "text": "we have stages of streams that fan in or",
    "start": "174440",
    "end": "179519"
  },
  {
    "text": "join coin and it can also be split up and what's interesting to see is that a",
    "start": "179519",
    "end": "185239"
  },
  {
    "text": "lot of stuff here could potentially be done in parel because they don't have any sort of real tight coupling in",
    "start": "185239",
    "end": "192159"
  },
  {
    "text": "between them so there's also a a very interesting amount of inherent",
    "start": "192159",
    "end": "198319"
  },
  {
    "text": "parallelism that is possible within stream processing so let's talk about what a",
    "start": "198319",
    "end": "204920"
  },
  {
    "text": "collection is how many of you guys have ever used a collection okay that should be good all",
    "start": "204920",
    "end": "211959"
  },
  {
    "start": "205000",
    "end": "298000"
  },
  {
    "text": "right so the Oxford dictionary which may or may not be the source of Truth for uh",
    "start": "211959",
    "end": "218040"
  },
  {
    "text": "defining computer science terms but it says that it's a group of things or people sort of sort of right group of",
    "start": "218040",
    "end": "226080"
  },
  {
    "text": "things are people and of course the source of all truth on the internet um says that a grouping of some variable",
    "start": "226080",
    "end": "233040"
  },
  {
    "text": "number of data items oh we're sort of we're sort of getting closer it's it's",
    "start": "233040",
    "end": "238280"
  },
  {
    "text": "getting a bit warmer all right so what happens if you Google for what is a collection of course there's a",
    "start": "238280",
    "end": "245120"
  },
  {
    "text": "JavaScript library right it's the backbone jss that",
    "start": "245120",
    "end": "250720"
  },
  {
    "text": "a collection are simply an ordered set of models all right fair enough I guess and",
    "start": "250720",
    "end": "260320"
  },
  {
    "text": "if we're on the jvm which probably a few of you are uh Java util collection is",
    "start": "260320",
    "end": "266880"
  },
  {
    "text": "something that has a definitive size like there is something like it it's all",
    "start": "266880",
    "end": "272800"
  },
  {
    "text": "always some size there right you know exactly what's in the collection and it provides some sort of iterator that we",
    "start": "272800",
    "end": "279120"
  },
  {
    "text": "can visit the elements in the collection so we can go through it in some way and",
    "start": "279120",
    "end": "284759"
  },
  {
    "text": "also there's a few uh methods that describe um whether or not something is",
    "start": "284759",
    "end": "290120"
  },
  {
    "text": "in that collection it's like contains and stuff like that we can query if some element exists in that",
    "start": "290120",
    "end": "296440"
  },
  {
    "text": "collection so what do we expect as users when we use use a collection well if we",
    "start": "296440",
    "end": "302000"
  },
  {
    "start": "298000",
    "end": "383000"
  },
  {
    "text": "have an iterator and we don't change the collection ourselves or like we know that there's no one else changing it and",
    "start": "302000",
    "end": "309479"
  },
  {
    "text": "we use an iterator and we don't end early we we expect to visit all the",
    "start": "309479",
    "end": "316240"
  },
  {
    "text": "elements of that collection because otherwise I think there's going to be a few broken programs out",
    "start": "316240",
    "end": "321840"
  },
  {
    "text": "there and what we also expect that if we have an iterator and we take the first element",
    "start": "321840",
    "end": "329720"
  },
  {
    "text": "out of that iterator and we create a concatenated iterator with the rest of",
    "start": "329720",
    "end": "336360"
  },
  {
    "text": "the iterator it should be the same like we took the first and the rest put it together again should be the same as the",
    "start": "336360",
    "end": "341720"
  },
  {
    "text": "first right the same elements also the contents of the",
    "start": "341720",
    "end": "348800"
  },
  {
    "text": "collection usually doesn't depend on who's actually processing that collection so it it has some sort of it",
    "start": "348800",
    "end": "356360"
  },
  {
    "text": "does not relate to who's using it and the contents does not really matter",
    "start": "356360",
    "end": "363600"
  },
  {
    "text": "or depend on when the processing happens usually right so if you get scheduled",
    "start": "363600",
    "end": "369639"
  },
  {
    "text": "out for 5 seconds while the GC is running uh when you come back the collection isn't different right that",
    "start": "369639",
    "end": "376360"
  },
  {
    "text": "would also be quite weird but when we observe a",
    "start": "376360",
    "end": "384120"
  },
  {
    "start": "383000",
    "end": "443000"
  },
  {
    "text": "sequence it would be very weird if it mattered when when we",
    "start": "384120",
    "end": "390080"
  },
  {
    "text": "subscribe to see that thing that would sort of go against the expectations if",
    "start": "390080",
    "end": "395240"
  },
  {
    "text": "we think about it as collections dreams as collections this would sort of be weird and also this would also be weird",
    "start": "395240",
    "end": "402120"
  },
  {
    "text": "like if we can't process the elements fast enough and that has weird effects that would also be sort of weird if we",
    "start": "402120",
    "end": "408080"
  },
  {
    "text": "think about it as collections because that's not necessarily something that we think about when it comes to collections like can we iterate fast",
    "start": "408080",
    "end": "416000"
  },
  {
    "text": "enough or the other way around when we can iterate faster but we don't get data",
    "start": "416000",
    "end": "422759"
  },
  {
    "text": "as fast like where where's the data that would also violate our",
    "start": "422759",
    "end": "427879"
  },
  {
    "text": "expectations so that's a very important there are very important distinctions between streams and Collections and",
    "start": "427879",
    "end": "435120"
  },
  {
    "text": "setting the right expectations is the first step of understanding the difference so let's have a look at",
    "start": "435120",
    "end": "441440"
  },
  {
    "text": "what's new in Java 8 there's this new Java Java util stream package and what",
    "start": "441440",
    "end": "447080"
  },
  {
    "start": "443000",
    "end": "516000"
  },
  {
    "text": "Java util stream says that they're not derived from collection so there's",
    "start": "447080",
    "end": "452680"
  },
  {
    "text": "there's some evidence out there that streams are not Collections and it also says that streams differ from",
    "start": "452680",
    "end": "458520"
  },
  {
    "text": "collections in several ways all right fair enough they don't have any storage",
    "start": "458520",
    "end": "464360"
  },
  {
    "text": "so they're not storing intermediate results they are functional in nature which means that they focus on",
    "start": "464360",
    "end": "470720"
  },
  {
    "text": "describing transformation using functions and they are laas seeking and",
    "start": "470720",
    "end": "477440"
  },
  {
    "text": "which is uh a way of saying that they don't need to evaluate stuff unless",
    "start": "477440",
    "end": "483039"
  },
  {
    "text": "there's somebody down there that really needs it so as you build up a transformation you don't need to do any",
    "start": "483039",
    "end": "489319"
  },
  {
    "text": "work until there's something that needs to be that needs to use the result and of course they're possibly",
    "start": "489319",
    "end": "496639"
  },
  {
    "text": "unbounded so like a stream of all natural numbers for",
    "start": "496639",
    "end": "502360"
  },
  {
    "text": "instance and they're consumable so Java javil streams are consumable you can only use them once like an iterator and",
    "start": "502360",
    "end": "509639"
  },
  {
    "text": "once you've used it it's sort of now it's used and now you need to go and get another one so streams versus",
    "start": "509639",
    "end": "516240"
  },
  {
    "start": "516000",
    "end": "878000"
  },
  {
    "text": "collections like how do we tie the bag together what's the relationship between streams and collections well you can",
    "start": "516240",
    "end": "522320"
  },
  {
    "text": "take a collection a collection is like a fact it's like I know that we have X and",
    "start": "522320",
    "end": "527839"
  },
  {
    "text": "I can turn that into a stream that has X right it doesn't really matter because I already know that I had X so we can",
    "start": "527839",
    "end": "535880"
  },
  {
    "text": "convert a collection into a stream but the other way around it's a bit harder but it's possible but it has some",
    "start": "535880",
    "end": "542120"
  },
  {
    "text": "caveats right so what happens if you have a stream that never receives an element at all like it takes forever to",
    "start": "542120",
    "end": "549640"
  },
  {
    "text": "create the first element of the stream when do we say that the collection is done like do we wait forever that's not",
    "start": "549640",
    "end": "557480"
  },
  {
    "text": "necessarily a good idea but you can do things like within X time take",
    "start": "557480",
    "end": "563240"
  },
  {
    "text": "everything that you receive in the Stream and bunch it up into a collection and then pass it on so there are way",
    "start": "563240",
    "end": "569560"
  },
  {
    "text": "that you can do it but it's not a onetoone mapping so saying that a stream is sort of like",
    "start": "569560",
    "end": "576600"
  },
  {
    "text": "a lazy collection it evokes the wrong kind of Association so let's try to divorce those",
    "start": "576600",
    "end": "583399"
  },
  {
    "text": "Concepts so let me just try to give you a brief live demo of what I mean let's",
    "start": "583399",
    "end": "589399"
  },
  {
    "text": "see if this works all right so here's some code here and this is scull it doesn't really",
    "start": "589399",
    "end": "595160"
  },
  {
    "text": "matter that the the language itself it's more uh about the the the flow of the",
    "start": "595160",
    "end": "600720"
  },
  {
    "text": "operations so what we're going to have here is we're importing something called bank so",
    "start": "600720",
    "end": "608120"
  },
  {
    "text": "this is a interesting example with defining some sort of model or domain where we're doing something related to",
    "start": "608120",
    "end": "615079"
  },
  {
    "text": "Banks and we're going to create something called an actor system I'm going to explain later what that means we're also",
    "start": "615079",
    "end": "622040"
  },
  {
    "text": "going to create a flow materializer and a flow materializer is something that is going to be able to take a description",
    "start": "622040",
    "end": "629040"
  },
  {
    "text": "of a stream and materialize it make it work make it run and do stuff so let's",
    "start": "629040",
    "end": "636079"
  },
  {
    "text": "start by by describing our Stream So first we're going to have something",
    "start": "636079",
    "end": "642800"
  },
  {
    "text": "which is a function to transfer and transfer here is just going to generate",
    "start": "642800",
    "end": "648639"
  },
  {
    "text": "a a random transfer between two accounts so this allows us to have an unbounded",
    "start": "648639",
    "end": "655040"
  },
  {
    "text": "stream of transfers because hopefully our bank is going to live for a very long long time there's going to be",
    "start": "655040",
    "end": "660399"
  },
  {
    "text": "transfers all the time an unbounded amount of transfers so",
    "start": "660399",
    "end": "665519"
  },
  {
    "text": "it's from an account to an account with in some currency and with some amount so that's our sort of domain object so",
    "start": "665519",
    "end": "671839"
  },
  {
    "text": "transfer here creates a random one then for each of these transfers we're going",
    "start": "671839",
    "end": "678200"
  },
  {
    "text": "to transform them using identity and that's not really meaningful but it's",
    "start": "678200",
    "end": "683839"
  },
  {
    "text": "just showing what you can do identity means that take whatever input you get and emit that as your output so I think",
    "start": "683839",
    "end": "690519"
  },
  {
    "text": "sort of copy file or something like that so we're just going going to pass transfers through so that's a processing",
    "start": "690519",
    "end": "698480"
  },
  {
    "text": "stage then we're going to take 10 of them of those unbounded number of transfers and for each of them we're",
    "start": "698480",
    "end": "705800"
  },
  {
    "text": "going to invoke the print line which is just going to print out to System out so now we've described a potentially",
    "start": "705800",
    "end": "713320"
  },
  {
    "text": "unbounded stream of transfers we're going to just pipe some stuff through take 10 of them and print them out",
    "start": "713320",
    "end": "720279"
  },
  {
    "text": "and then at the end we attach oncomplete which is when you've done all this you",
    "start": "720279",
    "end": "726279"
  },
  {
    "text": "want to shut the system down and system shutdown is important because all of this is going to run concurrently and",
    "start": "726279",
    "end": "732440"
  },
  {
    "text": "using all of our course so we pass in the materializer to",
    "start": "732440",
    "end": "737519"
  },
  {
    "text": "un complete to say okay now we're ready now we want to run this thing we have described our processing Pipeline and we",
    "start": "737519",
    "end": "744040"
  },
  {
    "text": "want to make it run so let's see if we can if we can make that work where do I",
    "start": "744040",
    "end": "749760"
  },
  {
    "text": "have my pointer this is always interesting does it",
    "start": "749760",
    "end": "755760"
  },
  {
    "text": "work at",
    "start": "755760",
    "end": "758959"
  },
  {
    "text": "all did I click it all right I clicked it all right so",
    "start": "763680",
    "end": "770399"
  },
  {
    "text": "what did it do it generated 10 transfers and printed",
    "start": "770399",
    "end": "776880"
  },
  {
    "text": "them out and then it was done right so we can describe a flow of",
    "start": "776880",
    "end": "784519"
  },
  {
    "text": "information and Transformations on top of that flow and then piping it somewhere",
    "start": "784519",
    "end": "790440"
  },
  {
    "text": "else and then running it but what's interesting is that this thing didn't",
    "start": "790440",
    "end": "795680"
  },
  {
    "text": "run in the current thread it actually used all the course in my tiny little MacBook Air but it's decoupling the",
    "start": "795680",
    "end": "804519"
  },
  {
    "text": "execution from the description of the transformation which is very important because we could decide to run this on",
    "start": "804519",
    "end": "810360"
  },
  {
    "text": "one thread or a million without changing the",
    "start": "810360",
    "end": "816440"
  },
  {
    "text": "code so let's jump back to the presentation and continue from there all",
    "start": "816440",
    "end": "824160"
  },
  {
    "text": "right makes more sense now we have both sort of some theory behind it and some code that did",
    "start": "824160",
    "end": "830160"
  },
  {
    "text": "something good good work all right so one of the main problems when it comes",
    "start": "830160",
    "end": "836519"
  },
  {
    "text": "to stream processing is that you tend to have asynchronous boundaries in your",
    "start": "836519",
    "end": "841639"
  },
  {
    "text": "program you have data coming in either from the network or from some other source that's running concurrently or",
    "start": "841639",
    "end": "849680"
  },
  {
    "text": "asynchronously with your program so you have an asynchronous boundary with your inputs and you tend to have an",
    "start": "849680",
    "end": "855320"
  },
  {
    "text": "asynchronous boundary with your outputs and what you want to do is you want to try to get data across that boundary",
    "start": "855320",
    "end": "862240"
  },
  {
    "text": "without blowing up if the the sender the guy on the Upstream is producing data",
    "start": "862240",
    "end": "868320"
  },
  {
    "text": "faster than the guy that can receive it receives it so if we want to do this and",
    "start": "868320",
    "end": "874800"
  },
  {
    "text": "do it safely we need to we need to work on that so what are the possible solutions for this well either we just",
    "start": "874800",
    "end": "882320"
  },
  {
    "start": "878000",
    "end": "973000"
  },
  {
    "text": "block we have asynchronous boundaries but we're going to block just just not",
    "start": "882320",
    "end": "887519"
  },
  {
    "text": "going to do anything unless that guy has either received or U",
    "start": "887519",
    "end": "893839"
  },
  {
    "text": "or or sent so that's not really going to work because if we block BL then no other",
    "start": "893839",
    "end": "900120"
  },
  {
    "text": "thread will be able like that thread is going to be hogged by this thing and it's not going to do anything not really",
    "start": "900120",
    "end": "906399"
  },
  {
    "text": "good so what if we uh what if we just we",
    "start": "906399",
    "end": "911519"
  },
  {
    "text": "just let the sender the Upstream just push whatever he has and if we can't",
    "start": "911519",
    "end": "916920"
  },
  {
    "text": "receive it we're just going to drop it on the floor perhaps we can buffer it at some to some point but if he's really faster",
    "start": "916920",
    "end": "924920"
  },
  {
    "text": "then at some point your non your your finite amount of memory is going to run",
    "start": "924920",
    "end": "930480"
  },
  {
    "text": "out and you have to start dropping things anyway so it's just sort of a Band-Aid on the problem so that doesn't",
    "start": "930480",
    "end": "935759"
  },
  {
    "text": "work either so is there another way of doing it well let's call that way the",
    "start": "935759",
    "end": "941560"
  },
  {
    "text": "reactive way which would be non-blocking like not like the first",
    "start": "941560",
    "end": "947759"
  },
  {
    "text": "thing and it's not dropping like the other thing that's good as well we're not dropping stuff and we're not hogging",
    "start": "947759",
    "end": "954319"
  },
  {
    "text": "our threads and we try to stay within a bounded space so so that we can always",
    "start": "954319",
    "end": "959759"
  },
  {
    "text": "reason about how much resources are being used when we sort of flood the",
    "start": "959759",
    "end": "965199"
  },
  {
    "text": "system so how do we do that so if you've heard about the",
    "start": "965199",
    "end": "970279"
  },
  {
    "text": "reactive Manifesto before this is uh not going to be new to you but what if we",
    "start": "970279",
    "end": "976000"
  },
  {
    "start": "973000",
    "end": "1027000"
  },
  {
    "text": "could take a lot of the the knowledge and ideas behind the reactive Manifesto",
    "start": "976000",
    "end": "981360"
  },
  {
    "text": "and apply it to this problem space can we can we solve can we solve",
    "start": "981360",
    "end": "986959"
  },
  {
    "text": "it in a reactive way so when we started working on this",
    "start": "986959",
    "end": "992199"
  },
  {
    "text": "problem we realized fairly quickly that we can't be the only ones that have this problem like it can't be 2013 or what it",
    "start": "992199",
    "end": "999279"
  },
  {
    "text": "was and like everyone else has never never seen this problem before so we we",
    "start": "999279",
    "end": "1006519"
  },
  {
    "text": "made a couple of calls and we asked a bunch of other people in the industry like okay do you have something similar",
    "start": "1006519",
    "end": "1012240"
  },
  {
    "text": "that you're working on or have an issue with so it turned out to be quite a few that had the exact same issue so we",
    "start": "1012240",
    "end": "1019800"
  },
  {
    "text": "created this reactive streams initiative to solve it in the general case so the origin and motivation for doing this was",
    "start": "1019800",
    "end": "1025918"
  },
  {
    "text": "that we all in the initiative or facing the same problem that's a very good way of starting a",
    "start": "1025919",
    "end": "1033438"
  },
  {
    "start": "1027000",
    "end": "1099000"
  },
  {
    "text": "collaboration and if we're all building tools for our communities we have a reason to sort of feel the urgency",
    "start": "1033439",
    "end": "1040199"
  },
  {
    "text": "really want to solve this problem and a common solution for",
    "start": "1040199",
    "end": "1045240"
  },
  {
    "text": "everybody would benefit everybody so what if we could connect things together",
    "start": "1045240",
    "end": "1050840"
  },
  {
    "text": "if they follow the same specification so you could use different implementations that are good at",
    "start": "1050840",
    "end": "1057280"
  },
  {
    "text": "different things and hook them together and get the benefit transitively through throughout that sort of",
    "start": "1057280",
    "end": "1064640"
  },
  {
    "text": "composition also interoperability would be the best use of the efforts right I mean if we don't have these isolated",
    "start": "1065240",
    "end": "1072039"
  },
  {
    "text": "Islands then we'll be able to reuse the efforts of everybody and the end goal",
    "start": "1072039",
    "end": "1079360"
  },
  {
    "text": "was to okay if we can really solve this problem it sounds like something that we could even be able to put into the jdk",
    "start": "1079360",
    "end": "1085080"
  },
  {
    "text": "if we try hard enough like if we had a a standard solution for this then",
    "start": "1085080",
    "end": "1090559"
  },
  {
    "text": "everybody could could benefit right even the even the standard Library So currently it's a",
    "start": "1090559",
    "end": "1097679"
  },
  {
    "text": "collaboration between Engineers from a lot of different companies and it's really focused on the engineer part",
    "start": "1097679",
    "end": "1103080"
  },
  {
    "start": "1099000",
    "end": "1122000"
  },
  {
    "text": "we're it's not a specifications group up in this guy writing writing where text",
    "start": "1103080",
    "end": "1109520"
  },
  {
    "text": "that uh is up to The Mortals to sort of decipher later um it's really focused on",
    "start": "1109520",
    "end": "1114679"
  },
  {
    "text": "engineering so we have a lot of different Engineers that are working together on this so I think that's super super",
    "start": "1114679",
    "end": "1120240"
  },
  {
    "text": "exciting so the goals are minimal interfaces Essentials only so if we can",
    "start": "1120240",
    "end": "1127120"
  },
  {
    "start": "1122000",
    "end": "1253000"
  },
  {
    "text": "make the the the core the root of the problem really easy or really simple in",
    "start": "1127120",
    "end": "1132559"
  },
  {
    "text": "terms of the uh surface area then we think that that's going to be beneficial",
    "start": "1132559",
    "end": "1138120"
  },
  {
    "text": "because it means that there's a way less gray area or gray areas and what we want",
    "start": "1138120",
    "end": "1144480"
  },
  {
    "text": "to do is make sure that the specification of the semantics is rigorous so there doesn't exist a lot of",
    "start": "1144480",
    "end": "1151960"
  },
  {
    "text": "Divergence down the line where people interpret stuff differently and you get things that sort of work together but",
    "start": "1151960",
    "end": "1158400"
  },
  {
    "text": "you also and I think this is something that every standards committee or organization or anybody who wants to",
    "start": "1158400",
    "end": "1164720"
  },
  {
    "text": "push a specification out on other people they should write a test Suite where you",
    "start": "1164720",
    "end": "1171280"
  },
  {
    "text": "can test your implementation using tests not sort of",
    "start": "1171280",
    "end": "1176679"
  },
  {
    "text": "did I understand the specification right but really something that you can execute over your implementation to say",
    "start": "1176679",
    "end": "1182400"
  },
  {
    "text": "okay now now I get it it's passing the tck as well so I have understood the specification I think this super",
    "start": "1182400",
    "end": "1190400"
  },
  {
    "text": "important what we're not trying to do is that we don't want to create a standard",
    "start": "1190400",
    "end": "1196640"
  },
  {
    "text": "API because if we are going to solve this problem on the jvm there's there's",
    "start": "1196640",
    "end": "1202000"
  },
  {
    "text": "Scala which is going to want to have a Scala kind of API and there's closure which is going to want to have a closure",
    "start": "1202000",
    "end": "1208280"
  },
  {
    "text": "style API so we don't want to have some sort of lowest common denominator end",
    "start": "1208280",
    "end": "1213880"
  },
  {
    "text": "user API because that's not fair to any user so if we're just trying to solve",
    "start": "1213880",
    "end": "1219120"
  },
  {
    "text": "the the core problem and then the implementations can focus on the API I think that's a very good",
    "start": "1219120",
    "end": "1225799"
  },
  {
    "text": "tradeoff and what most most people don't think about when it comes to specifications is that when you write a",
    "start": "1225799",
    "end": "1232600"
  },
  {
    "text": "specification if you're not careful you're going to rule out potential implementations like if you make",
    "start": "1232600",
    "end": "1240159"
  },
  {
    "text": "requirements that aren't possible to implement efficiently then you're locking down the performance of all",
    "start": "1240159",
    "end": "1247240"
  },
  {
    "text": "implementations so you need to think about that upfront which is what we've done so reactive streams is the the end",
    "start": "1247240",
    "end": "1255720"
  },
  {
    "start": "1253000",
    "end": "1354000"
  },
  {
    "text": "product of this initiative and they are asynchronous and non-blocking so that's",
    "start": "1255720",
    "end": "1261679"
  },
  {
    "text": "pretty good non-blocking is good and there's a flow of data from the Upstream to the downstream and how we solve the",
    "start": "1261679",
    "end": "1269039"
  },
  {
    "text": "problem with being within bounds and being non-blocking and asynchronous is",
    "start": "1269039",
    "end": "1274480"
  },
  {
    "text": "that we have a flow of demand that goes in the other direction so we know when",
    "start": "1274480",
    "end": "1280559"
  },
  {
    "text": "there's does this guy even want data we want to minimize coordination",
    "start": "1280559",
    "end": "1287760"
  },
  {
    "text": "and contention this is important I think I realized as I had written this um if",
    "start": "1287760",
    "end": "1295039"
  },
  {
    "text": "any of you guys attended Martin Thompson's talk or or uh the reactive",
    "start": "1295039",
    "end": "1300200"
  },
  {
    "text": "talk the universal scalability law ties exactly into this if we have",
    "start": "1300200",
    "end": "1306880"
  },
  {
    "text": "coordination and contention like coordination in terms of coherence and contention we're limiting the",
    "start": "1306880",
    "end": "1313400"
  },
  {
    "text": "scalability of the end product so we need to think about that when we design it",
    "start": "1313400",
    "end": "1320520"
  },
  {
    "text": "also if we use we think about the reactive Manifesto if we have message passing as a part of our thinking when",
    "start": "1320760",
    "end": "1327400"
  },
  {
    "text": "we design a specification so that we not do this tight coupling between components then we should be able to",
    "start": "1327400",
    "end": "1333760"
  },
  {
    "text": "have different pieces of a stream on potentially different CPUs different",
    "start": "1333760",
    "end": "1339039"
  },
  {
    "text": "machines different parts of the world because it doesn't matter so if we think about that as we design it then we'll be",
    "start": "1339039",
    "end": "1346799"
  },
  {
    "text": "able to scale out the use of of streams all right so enough fluff um",
    "start": "1346799",
    "end": "1356200"
  },
  {
    "start": "1354000",
    "end": "1489000"
  },
  {
    "text": "naming is hard this is where we ended up there was uh as you can imagine a lot of discussions on naming um there was like",
    "start": "1356200",
    "end": "1364159"
  },
  {
    "text": "consumer producer Source s you know there's probably 10 of these uh so the",
    "start": "1364159",
    "end": "1370640"
  },
  {
    "text": "upstream or the producer of information or data is called a publisher and a",
    "start": "1370640",
    "end": "1377000"
  },
  {
    "text": "consumer or recipient of data is called a subscriber so the publisher sends data",
    "start": "1377000",
    "end": "1383919"
  },
  {
    "text": "down to the subscriber and the subscriber sends demand to the publisher so the data elements flow",
    "start": "1383919",
    "end": "1390480"
  },
  {
    "text": "Downstream demand flows upstream and what's important is that data elements can only be sent when there is demand",
    "start": "1390480",
    "end": "1397440"
  },
  {
    "text": "for data it's important really important so the data in Flight is",
    "start": "1397440",
    "end": "1404440"
  },
  {
    "text": "bounded by the signal demand because if the subscri says how much he wants then he's effectively",
    "start": "1404440",
    "end": "1410840"
  },
  {
    "text": "bounding how much can be inlight at one point in time right and what's also important is that the",
    "start": "1410840",
    "end": "1417919"
  },
  {
    "text": "recipient of the data becomes in control over the maximal incoming data rate so",
    "start": "1417919",
    "end": "1424000"
  },
  {
    "text": "let me just take an example so if you were to go to the store and you want ice cream and let's say that you are super",
    "start": "1424000",
    "end": "1430279"
  },
  {
    "text": "hungry and you want 10,000 ice creams if you go to the store clerk and say that",
    "start": "1430279",
    "end": "1436440"
  },
  {
    "text": "give me ice creams and he will just start like throwing ice creams at you as fast as he can because",
    "start": "1436440",
    "end": "1443440"
  },
  {
    "text": "that's what he does and you have to y'll stop when you when you get to 10,000",
    "start": "1443440",
    "end": "1450880"
  },
  {
    "text": "there might be a case where you there's not enough space around you to contain",
    "start": "1450880",
    "end": "1456960"
  },
  {
    "text": "the ice cream right or you might not say no fast enough so he's already thrown a",
    "start": "1456960",
    "end": "1462120"
  },
  {
    "text": "couple of extra at you that's not really how we would solve the problem in the real life we need need to have this",
    "start": "1462120",
    "end": "1469200"
  },
  {
    "text": "demand saying that I want 10 ice creams I will put it in the bag I want 10 more",
    "start": "1469200",
    "end": "1474679"
  },
  {
    "text": "I will put it in the bag right so the consumer or the recipient of the data is in control over how much data is is",
    "start": "1474679",
    "end": "1482760"
  },
  {
    "text": "acceptable to receive by the by that consumer at any point in time so what's interesting um is that we didn't really",
    "start": "1482760",
    "end": "1489840"
  },
  {
    "start": "1489000",
    "end": "1646000"
  },
  {
    "text": "find a good word for it so we've been describing it as Dynamic Push Pull that's sort of the H how how it works",
    "start": "1489840",
    "end": "1497200"
  },
  {
    "text": "when you run it so so when the consumer can consume data faster than the",
    "start": "1497200",
    "end": "1503760"
  },
  {
    "text": "producer the publisher in this case can send it it becomes a push model yes um",
    "start": "1503760",
    "end": "1510760"
  },
  {
    "text": "so in the in the wording the Publishers subcribe a wording you're kind of implying that there can be more",
    "start": "1510760",
    "end": "1515960"
  },
  {
    "text": "subscribers for a given publisher yes doesn't that break down the the um",
    "start": "1515960",
    "end": "1522559"
  },
  {
    "text": "assumption that you can always control the rate of production so so the question is",
    "start": "1522559",
    "end": "1528880"
  },
  {
    "text": "does the fact that there can be more than one subscriber break the fact that there can be bounded yeah I mean if you",
    "start": "1528880",
    "end": "1536279"
  },
  {
    "text": "have a fast subscriber and a slow subscriber yes so so what's interesting is the next or the second slide after",
    "start": "1536279",
    "end": "1545039"
  },
  {
    "text": "this so let's get back to that so what's interesting is that when the consumer or the subscriber here can receive data",
    "start": "1545039",
    "end": "1551600"
  },
  {
    "text": "faster then the publisher can push it or send it it becomes a push model because the publisher can always send right it's",
    "start": "1551600",
    "end": "1559360"
  },
  {
    "text": "an important implication but it's also the other way around so when the publisher is faster or can send data",
    "start": "1559360",
    "end": "1566360"
  },
  {
    "text": "faster than the subscriber can receive it it becomes a pull model because the subscriber says okay now I'm ready for",
    "start": "1566360",
    "end": "1573960"
  },
  {
    "text": "x and what's super interesting is that during a runtime it automatically switches",
    "start": "1573960",
    "end": "1581360"
  },
  {
    "text": "between these modes depending on the scheduling artifacts or the availability of data in the system or the possibility",
    "start": "1581360",
    "end": "1588760"
  },
  {
    "text": "of of writing data to somewhere else so you don't have to do anything to get this nice benefit of um going as fast as",
    "start": "1588760",
    "end": "1596760"
  },
  {
    "text": "it can at any point in time so what you could do is the demand",
    "start": "1596760",
    "end": "1602760"
  },
  {
    "text": "if you only said I want one and I want one is the only thing you can say that",
    "start": "1602760",
    "end": "1608720"
  },
  {
    "text": "would be quite inefficient because you would have to say if you were to order 10,000 ice creams you would have to say",
    "start": "1608720",
    "end": "1614679"
  },
  {
    "text": "that I want an ice cream 10,000 times so if we allow you to say I want X number",
    "start": "1614679",
    "end": "1621240"
  },
  {
    "text": "of ice creams then you're more in control over how many times you say it and how much you're willing to store at",
    "start": "1621240",
    "end": "1627480"
  },
  {
    "text": "any point in time so batching the demand means that you can also batch the data",
    "start": "1627480",
    "end": "1633200"
  },
  {
    "text": "right you can store it somewhere you say I want 10 and then the",
    "start": "1633200",
    "end": "1638360"
  },
  {
    "text": "publisher can then create 10 you could do that in parallel if you wanted to so",
    "start": "1638360",
    "end": "1643919"
  },
  {
    "text": "going back to your example a very common use case is that you're going You're",
    "start": "1643919",
    "end": "1650000"
  },
  {
    "start": "1646000",
    "end": "1707000"
  },
  {
    "text": "broadcasting or sending out information to multiple recipients very",
    "start": "1650000",
    "end": "1655679"
  },
  {
    "text": "common so you see here both the flow of data and the the arrow so the is the",
    "start": "1655679",
    "end": "1661320"
  },
  {
    "text": "flow of demand and that goes Upstream so when you split data or when you send out",
    "start": "1661320",
    "end": "1667120"
  },
  {
    "text": "data you're effectively merging the demand between these two things if he",
    "start": "1667120",
    "end": "1673679"
  },
  {
    "text": "wants 10 and he only wants one you can only perhaps request one from your",
    "start": "1673679",
    "end": "1678960"
  },
  {
    "text": "Upstream because that's the aggregate demand but what's interesting about the model is that the model doesn't say that",
    "start": "1678960",
    "end": "1685120"
  },
  {
    "text": "all subscribers are entitled to data so if at any point in time the publisher",
    "start": "1685120",
    "end": "1690760"
  },
  {
    "text": "feels like this subscriber is not keeping up he's he's dragging us down I'm going to I'm going to error him out",
    "start": "1690760",
    "end": "1697480"
  },
  {
    "text": "and say that you need to keep up uh in the future if you want to you want to have my data so that's that's how it's",
    "start": "1697480",
    "end": "1704720"
  },
  {
    "text": "solved but the inverse is also true so it's very common to multiple sources of data and you want to merge them in some",
    "start": "1704720",
    "end": "1711840"
  },
  {
    "start": "1707000",
    "end": "1741000"
  },
  {
    "text": "way you want to like I have all that data from there I have all that data from there and I want to look at that",
    "start": "1711840",
    "end": "1717320"
  },
  {
    "text": "data in in aggregate what's interesting is that when you do merging of data",
    "start": "1717320",
    "end": "1723320"
  },
  {
    "text": "you're splitting the demand you're saying that okay I I want",
    "start": "1723320",
    "end": "1728559"
  },
  {
    "text": "five things so I will request from each I'm splitting the demand to my",
    "start": "1728559",
    "end": "1734679"
  },
  {
    "text": "upstreams that's symmetric so what does it look like in practice",
    "start": "1734679",
    "end": "1740480"
  },
  {
    "text": "this specification so there is four interfaces how many of you guys are jvm",
    "start": "1740480",
    "end": "1746640"
  },
  {
    "start": "1741000",
    "end": "1852000"
  },
  {
    "text": "Java people enough this an interface just sort of",
    "start": "1746640",
    "end": "1752760"
  },
  {
    "text": "specifies what you need to implement right this is this is the signature that you need to implement in order to be a",
    "start": "1752760",
    "end": "1759200"
  },
  {
    "text": "publisher or a subscriber or or whatnot so the publisher interface only has one",
    "start": "1759200",
    "end": "1765679"
  },
  {
    "text": "method it says subscribe takes a subscribe doesn't return anything because it could",
    "start": "1765679",
    "end": "1771399"
  },
  {
    "text": "use message passing it could send something to the subscriber but if returns something strict there then it",
    "start": "1771399",
    "end": "1777200"
  },
  {
    "text": "would have to wait in order to be able to return that thing and a subscriber",
    "start": "1777200",
    "end": "1782279"
  },
  {
    "text": "has four different methods and I I usually call them signals because it's signaling to the",
    "start": "1782279",
    "end": "1788240"
  },
  {
    "text": "subscriber that there is either a subscription for you or there's data for you or there's an end of stream or",
    "start": "1788240",
    "end": "1795240"
  },
  {
    "text": "something went wrong in your upstream and we need to abort so it signals to the subscriber and the",
    "start": "1795240",
    "end": "1802840"
  },
  {
    "text": "the actual instance of the subscriber that processes these signals could live",
    "start": "1802840",
    "end": "1808279"
  },
  {
    "text": "anywhere doesn't matter so the the common thing between a publisher",
    "start": "1808279",
    "end": "1815679"
  },
  {
    "text": "and subscriber becomes the subscription and the subscription is in control over requesting more elements and cancelling",
    "start": "1815679",
    "end": "1822320"
  },
  {
    "text": "the subscription perhaps you have an unbounded stream in in the case where we",
    "start": "1822320",
    "end": "1827440"
  },
  {
    "text": "did the live demo and you only want 10 items then you want to cancel your",
    "start": "1827440",
    "end": "1833480"
  },
  {
    "text": "subscription after you have received your 10 items so you want to be able to bail out early but this could be the",
    "start": "1833480",
    "end": "1840159"
  },
  {
    "text": "entirety of the spec if we wanted to but it's sort of like the ski combinators is",
    "start": "1840159",
    "end": "1845519"
  },
  {
    "text": "that there is another thing that is so useful that everybody's going to implement it themselves and I call we",
    "start": "1845519",
    "end": "1852320"
  },
  {
    "start": "1852000",
    "end": "1877000"
  },
  {
    "text": "call that the processor and it's something that is both a publisher and a subscriber so like think function right",
    "start": "1852320",
    "end": "1859080"
  },
  {
    "text": "if we only have Getters and only have Setters that would be sort of a a boring life so we want to be able to have",
    "start": "1859080",
    "end": "1864840"
  },
  {
    "text": "functions that can take both input and produce output so everybody's going to want to use that so we threw that in",
    "start": "1864840",
    "end": "1870399"
  },
  {
    "text": "there and it's super simple and it just sort of creates this common",
    "start": "1870399",
    "end": "1875440"
  },
  {
    "text": "vocabulary so how does the actual handshake work how do we set up the stream to work well first the subscriber",
    "start": "1875440",
    "end": "1882120"
  },
  {
    "start": "1877000",
    "end": "1908000"
  },
  {
    "text": "gets put into the Subscribe method on the publisher they sort of like here here am I I want to have data and the",
    "start": "1882120",
    "end": "1888600"
  },
  {
    "text": "publisher creates a subscription and passes that into unsubscribe on the subscriber so that's the handshake you",
    "start": "1888600",
    "end": "1894559"
  },
  {
    "text": "wanted to have data here's how you can signal demand and and cancel it and once",
    "start": "1894559",
    "end": "1900600"
  },
  {
    "text": "you've done that the subscriber can be Begin by requesting more information from the from the",
    "start": "1900600",
    "end": "1907200"
  },
  {
    "text": "publisher and the publisher is some free to send elements Downstream it's pretty",
    "start": "1907200",
    "end": "1912399"
  },
  {
    "start": "1908000",
    "end": "1941000"
  },
  {
    "text": "nice and the subscriber can request more elements but it's very important to",
    "start": "1912399",
    "end": "1917440"
  },
  {
    "text": "realize that there's not a first you need to request then he needs to send everything then you can request more",
    "start": "1917440",
    "end": "1924360"
  },
  {
    "text": "that's not how it works so you can request more at any point in time that you feel like okay now I have extra",
    "start": "1924360",
    "end": "1930000"
  },
  {
    "text": "space or extra room for more elements so it's not an acting protocol and then the publisher can send",
    "start": "1930000",
    "end": "1936840"
  },
  {
    "text": "more elements so what happens when the stream completes like how do we propagate the end of file for instance",
    "start": "1936840",
    "end": "1945240"
  },
  {
    "start": "1941000",
    "end": "2171000"
  },
  {
    "text": "well we first send elements and then the publisher is free at any point in time",
    "start": "1945240",
    "end": "1950600"
  },
  {
    "text": "where where the stream is closed or has stopped normally to send the uncomplete",
    "start": "1950600",
    "end": "1955880"
  },
  {
    "text": "signal and that is super important because if you were to require the sub",
    "start": "1955880",
    "end": "1961039"
  },
  {
    "text": "the subscriber to have signal demand in order to get the uncomplete call it might never get the uncomplete call so",
    "start": "1961039",
    "end": "1967320"
  },
  {
    "text": "this allows you to terminate as early as possible and there's a somewhat of a bug",
    "start": "1967320",
    "end": "1973120"
  },
  {
    "text": "SL bad condition in TCP where you have to register for either reading or writing in order to get get the the",
    "start": "1973120",
    "end": "1978760"
  },
  {
    "text": "closing of the stream uh especially when it uh when it fails and this allows it",
    "start": "1978760",
    "end": "1984679"
  },
  {
    "text": "to always get the completion signal no matter you don't need to do anything special for it and if there is a fatal",
    "start": "1984679",
    "end": "1992559"
  },
  {
    "text": "failure from the Upstream where there's never going to be more data because things went really wrong",
    "start": "1992559",
    "end": "1999960"
  },
  {
    "text": "when uh it just sends the on error signal and that passes through any",
    "start": "1999960",
    "end": "2006519"
  },
  {
    "text": "exception that you want to pass through saying that this is this is what went wrong you need to you need to deal with",
    "start": "2006519",
    "end": "2011639"
  },
  {
    "text": "it all right so so typ safe has a a project called AKA uh which I have been a part of uh",
    "start": "2011639",
    "end": "2019440"
  },
  {
    "text": "creating and what types is did in order to implement this reactive streams specification and the interfaces we",
    "start": "2019440",
    "end": "2025960"
  },
  {
    "text": "implemented on top of AA and AA has a unit of computation called an actor and an actor is sort of like a process that",
    "start": "2025960",
    "end": "2032519"
  },
  {
    "text": "communicates using sending and receiving messages and they're sort of Pur reactive because they don't execute",
    "start": "2032519",
    "end": "2038960"
  },
  {
    "text": "unless they have messages to produce and they don't need to block so it's a very good for us a very good um fabric to",
    "start": "2038960",
    "end": "2045880"
  },
  {
    "text": "implement the actual stream processing on top of and they have an address so we can send stuff to them and they have",
    "start": "2045880",
    "end": "2052878"
  },
  {
    "text": "sort of a a mailbox where the messages are put for the mail for for the actor until they can receive them they have",
    "start": "2052879",
    "end": "2059118"
  },
  {
    "text": "some sort of current behavior and they can change the current behavior as they process messages and they have some form",
    "start": "2059119",
    "end": "2065960"
  },
  {
    "text": "of local storage which means that they can can also do some some computation and store uh intermediate results and",
    "start": "2065960",
    "end": "2072760"
  },
  {
    "text": "they're only scheduled to run when there is a message so if there's no data they don't consume any CPU resources very",
    "start": "2072760",
    "end": "2080960"
  },
  {
    "text": "important and the interesting is also um I realized yesterday that I I read uh",
    "start": "2080960",
    "end": "2088398"
  },
  {
    "text": "have you read gabak the book gab um it's actually funny because I met olini for",
    "start": "2088399",
    "end": "2094280"
  },
  {
    "text": "the first time yesterday and I also remember that he was the guy that who recommend the book so I read the book",
    "start": "2094280",
    "end": "2099520"
  },
  {
    "text": "and a huge thing in the book is recursion and what's interesting with an actor is that every actor has a parent",
    "start": "2099520",
    "end": "2106200"
  },
  {
    "text": "actor so it's recursive every actor has a parent and at some point you need to",
    "start": "2106200",
    "end": "2111599"
  },
  {
    "text": "terminate that recursion right if every like that where",
    "start": "2111599",
    "end": "2116760"
  },
  {
    "text": "where does it end and outside like at the top of this where we try to to",
    "start": "2116760",
    "end": "2122839"
  },
  {
    "text": "terminate this we have the actor system as you saw in the code that's sort of the encapsulating thing and outside of",
    "start": "2122839",
    "end": "2131000"
  },
  {
    "text": "the that sort of bubble of of time and space uh lives the actor that's called",
    "start": "2131000",
    "end": "2137720"
  },
  {
    "text": "the one who walks the bubbles of SpaceTime and since he's outside of the model he doesn't need to have a parent",
    "start": "2137720",
    "end": "2144160"
  },
  {
    "text": "but he is the parent of the other the topmost one so that's how we term it just just an anecdote well and every",
    "start": "2144160",
    "end": "2152359"
  },
  {
    "text": "actor that means also that they don't have only have one child or one sub actor they can have n number of sub",
    "start": "2152359",
    "end": "2158839"
  },
  {
    "text": "actors so it sort of forms like a tree and you can spawn actors at any point in time which means that it's a",
    "start": "2158839",
    "end": "2165280"
  },
  {
    "text": "dynamic tree of processing so they they process one",
    "start": "2165280",
    "end": "2170880"
  },
  {
    "text": "message at a time so they can receive messages from many actors but only process one at a time and there's no",
    "start": "2170880",
    "end": "2177160"
  },
  {
    "start": "2171000",
    "end": "2239000"
  },
  {
    "text": "locking in between it's just the mailbox that grows in that case and what's interesting is that the overhead of one",
    "start": "2177160",
    "end": "2182920"
  },
  {
    "text": "actor is about 450 bytes in AA so that means that if you do the math you can",
    "start": "2182920",
    "end": "2188280"
  },
  {
    "text": "have millions of them on very small amount of memory so like there's like",
    "start": "2188280",
    "end": "2194640"
  },
  {
    "text": "2.5 million per gigabyte or something super important and also AA has a",
    "start": "2194640",
    "end": "2201040"
  },
  {
    "text": "clustering feature so that we've tested it so it scales at least to 2 and a half",
    "start": "2201040",
    "end": "2206880"
  },
  {
    "text": "thousand nodes so if you have millions of actors times 2,500 nodes that's a lot",
    "start": "2206880",
    "end": "2213599"
  },
  {
    "text": "of actors and ought to be enough for anybody right",
    "start": "2213599",
    "end": "2218839"
  },
  {
    "text": "but there might be use cases where where you need more but what's interesting is that with this multicore era where we",
    "start": "2218839",
    "end": "2224920"
  },
  {
    "text": "get more and more course if I create millions of actors on this machine and I would have millions of core on this",
    "start": "2224920",
    "end": "2231000"
  },
  {
    "text": "machine I would be able to use the course which is super important so if",
    "start": "2231000",
    "end": "2236599"
  },
  {
    "text": "you want to learn more about actors there are two papers that I recommend reading U you can you can check the",
    "start": "2236599",
    "end": "2242359"
  },
  {
    "start": "2239000",
    "end": "2259000"
  },
  {
    "text": "slides later if you want to have more more information so what's next for for AA",
    "start": "2242359",
    "end": "2247920"
  },
  {
    "text": "streams so AA streams was what I demoed that's sort of the DSL for AA streams and what the flow materializer does is",
    "start": "2247920",
    "end": "2254640"
  },
  {
    "text": "that it creates actors from your description of your transformation and runs those actors so what can we do with",
    "start": "2254640",
    "end": "2262880"
  },
  {
    "start": "2259000",
    "end": "2338000"
  },
  {
    "text": "this streaming AKA streams API well the current API is sort of minimal we're",
    "start": "2262880",
    "end": "2268200"
  },
  {
    "text": "trying to condense it and keep it small but of course we need to grow it to to fit a lot of common common use cases and",
    "start": "2268200",
    "end": "2276560"
  },
  {
    "text": "also naming is hard right either you take names as they are established from",
    "start": "2276560",
    "end": "2281960"
  },
  {
    "text": "research or you take names that are more intuitive to anybody that doesn't know about the research but then it's hard",
    "start": "2281960",
    "end": "2288560"
  },
  {
    "text": "for them to go and read the research because they don't have the same name so we it's still sort of a work in progress",
    "start": "2288560",
    "end": "2294359"
  },
  {
    "text": "to find the right names and we have a new API on the way that's called flow graph which is also some something we're",
    "start": "2294359",
    "end": "2300079"
  },
  {
    "text": "talking with where you can describe a complete processing graph immutably and",
    "start": "2300079",
    "end": "2305760"
  },
  {
    "text": "share that and plug in inputs and outputs at all ends you can sort of reuse the transformation in different",
    "start": "2305760",
    "end": "2312640"
  },
  {
    "text": "contexts where you have different data sources and plug different graphs together and build up this sort of",
    "start": "2312640",
    "end": "2318200"
  },
  {
    "text": "description of transformation build a vocabulary of transformation that you can reuse and what we also want to have",
    "start": "2318200",
    "end": "2325760"
  },
  {
    "text": "is really good both scull and Java apis because once you have a Java API",
    "start": "2325760",
    "end": "2331920"
  },
  {
    "text": "any language on the jbm can can use that so it's it's a a requirement",
    "start": "2331920",
    "end": "2338079"
  },
  {
    "start": "2338000",
    "end": "2441000"
  },
  {
    "text": "so the back pressure of the of the thing like we need to be able we we need to",
    "start": "2338079",
    "end": "2344000"
  },
  {
    "text": "communicate backwards that you can't send stuff now that's the demand that's",
    "start": "2344000",
    "end": "2349520"
  },
  {
    "text": "becomes the back pressure in the system and what's interesting is what we potentially could do with the back",
    "start": "2349520",
    "end": "2355000"
  },
  {
    "text": "pressure is that we could have it self-tuning at runtime so since every processing stage in our our sort of",
    "start": "2355000",
    "end": "2362920"
  },
  {
    "text": "pipeline or graph of transformation we can know information but when we request",
    "start": "2362920",
    "end": "2368560"
  },
  {
    "text": "more and we receive more like what does that look like over time what's the behavior of the of the thing in front of",
    "start": "2368560",
    "end": "2375680"
  },
  {
    "text": "me and also we can also know how how our latency we're processing stuff ourselves",
    "start": "2375680",
    "end": "2382760"
  },
  {
    "text": "like does that change over time like what's the relationship H how am I contributing to the overall",
    "start": "2382760",
    "end": "2389800"
  },
  {
    "text": "time and also it can look at the request from the downstream right you can see",
    "start": "2389800",
    "end": "2396200"
  },
  {
    "text": "the the thing that is consuming my data how does that behave what's the latency between me",
    "start": "2396200",
    "end": "2402880"
  },
  {
    "text": "satisfying the demand and receiving new demand and also Trends in the Demand",
    "start": "2402880",
    "end": "2408079"
  },
  {
    "text": "right is it running in lock step where it's asking for one I give it one it's asking for one I give it one like I can",
    "start": "2408079",
    "end": "2415520"
  },
  {
    "text": "know I can know about the behavior of of the thing after me and there's different",
    "start": "2415520",
    "end": "2420720"
  },
  {
    "text": "kinds of behaviors so you could have an emergent self-tuning back pressure that varies",
    "start": "2420720",
    "end": "2428119"
  },
  {
    "text": "over time where you only have local information at every step and the",
    "start": "2428119",
    "end": "2434040"
  },
  {
    "text": "changes will Ripple through in the entire pipeline dynamically super interesting would love to do",
    "start": "2434040",
    "end": "2440560"
  },
  {
    "text": "this we can also do something called operation fusion and what we could do is compile time as you declare your your",
    "start": "2440560",
    "end": "2447920"
  },
  {
    "start": "2441000",
    "end": "2606000"
  },
  {
    "text": "flow of of of things we could use Scala macros to rewrite your transformations",
    "start": "2447920",
    "end": "2454000"
  },
  {
    "text": "to optimize so let's say that we would have a filter and Plus+ is concatenate",
    "start": "2454000",
    "end": "2459920"
  },
  {
    "text": "here we have a filter operations that take some input and emits some of that",
    "start": "2459920",
    "end": "2465680"
  },
  {
    "text": "input and drops the rest so only keep the the red apples and drop all other",
    "start": "2465680",
    "end": "2471119"
  },
  {
    "text": "apples and a map operations that transform one to one like I want to peel",
    "start": "2471119",
    "end": "2478560"
  },
  {
    "text": "the apple and just send the peeled Apple down stream well the interesting thing that there's an operation for for that",
    "start": "2478560",
    "end": "2485319"
  },
  {
    "text": "sort of composite Behavior that's called collect which is match some predicate perform some",
    "start": "2485319",
    "end": "2491280"
  },
  {
    "text": "transformation and instead of running it in two different steps we merge it into one single step so we collapse it into",
    "start": "2491280",
    "end": "2499079"
  },
  {
    "text": "two but we can't really do the other thing right because if there is some if",
    "start": "2499079",
    "end": "2504920"
  },
  {
    "text": "you do the transformation and there's some sort of side effect happening then rewriting this would change the",
    "start": "2504920",
    "end": "2511560"
  },
  {
    "text": "semantics of the program so there where there's a question mark could be something that you opt into saying that",
    "start": "2511560",
    "end": "2517359"
  },
  {
    "text": "I know that my transformation is safe so you can apply this this optimization",
    "start": "2517359",
    "end": "2523200"
  },
  {
    "text": "anyway but we can also do this runtime so let's say that we have any type of",
    "start": "2523200",
    "end": "2530000"
  },
  {
    "text": "stage and after that stage we have an identity stage like transform just pass",
    "start": "2530000",
    "end": "2536760"
  },
  {
    "text": "data through we can just drop the past data through because it's not really doing anything we can just omit",
    "start": "2536760",
    "end": "2544240"
  },
  {
    "text": "that and also the other way around if we have an identi state and something else we can drop that too so what's",
    "start": "2544240",
    "end": "2549559"
  },
  {
    "text": "interesting is that if we have an expression like we filter stuff then we",
    "start": "2549559",
    "end": "2555440"
  },
  {
    "text": "have drop until some condition like drop stuff that doesn't match and the first",
    "start": "2555440",
    "end": "2561760"
  },
  {
    "text": "time it matches it's always going to pipe things through so that means if we follow that",
    "start": "2561760",
    "end": "2568520"
  },
  {
    "text": "with a map operation a transformation once at runtime the",
    "start": "2568520",
    "end": "2574520"
  },
  {
    "text": "condition triggers it becomes an identity stage perhaps it drops until there's a",
    "start": "2574520",
    "end": "2581559"
  },
  {
    "text": "big enough apple and then it sends all the all apples through since it's an identity stage we",
    "start": "2581559",
    "end": "2587520"
  },
  {
    "text": "have this rule where we can drop identity right we can drop identity and now becomes filter plus map",
    "start": "2587520",
    "end": "2595319"
  },
  {
    "text": "we have the filter plus map rule that says we can collapse filter plus map into collect so at run time we could",
    "start": "2595319",
    "end": "2601400"
  },
  {
    "text": "optimize the transformation but we can also do operation deletion we can remove moove",
    "start": "2601400",
    "end": "2607440"
  },
  {
    "start": "2606000",
    "end": "2660000"
  },
  {
    "text": "operations so for instance a fold is a transformation that only ever emits one",
    "start": "2607440",
    "end": "2613680"
  },
  {
    "text": "result so if you follow a fold with a take operation where take is Take N",
    "start": "2613680",
    "end": "2618880"
  },
  {
    "text": "number of items and N is bigger than one it's not going to do anything so we can",
    "start": "2618880",
    "end": "2623960"
  },
  {
    "text": "just drop that it will never it will never have any difference in the program",
    "start": "2623960",
    "end": "2629040"
  },
  {
    "text": "drop zero like Drop nothing doesn't do",
    "start": "2629040",
    "end": "2635160"
  },
  {
    "text": "anything and of course as we know before if it doesn't do anything we can remove it as well and we can also do interstage",
    "start": "2635599",
    "end": "2642720"
  },
  {
    "text": "simplification so let's say that you have this thing and at the end is Take n",
    "start": "2642720",
    "end": "2648880"
  },
  {
    "text": "and we know that take n once that becomes identity we can",
    "start": "2648880",
    "end": "2655839"
  },
  {
    "text": "remove that operation this leads us to if we have",
    "start": "2655839",
    "end": "2661440"
  },
  {
    "start": "2660000",
    "end": "2696000"
  },
  {
    "text": "the Take N there we have some execution optimizations so let's say we have Take N at the end",
    "start": "2661440",
    "end": "2667599"
  },
  {
    "text": "we know exactly how many instructions take in is going to need and the user cannot pass in any kind of function in",
    "start": "2667599",
    "end": "2674559"
  },
  {
    "text": "there it's completely sort of fixed so that means that we don't have to run it asynchronously we could run it",
    "start": "2674559",
    "end": "2680640"
  },
  {
    "text": "synchronously with the same operation the preceding operation or the succeeding operation we just fuse that",
    "start": "2680640",
    "end": "2686880"
  },
  {
    "text": "onto the end and make it run on the same thread at the same time or just after",
    "start": "2686880",
    "end": "2692800"
  },
  {
    "text": "it but we could also do stuff like distributed streams",
    "start": "2692800",
    "end": "2697839"
  },
  {
    "start": "2696000",
    "end": "3158000"
  },
  {
    "text": "so we could have a transport protocol where we have this sort of this",
    "start": "2697839",
    "end": "2703119"
  },
  {
    "text": "interface with sending demand and receiving stuff if we put that and sandwich that on top of network protocols we could run that over like",
    "start": "2703119",
    "end": "2709440"
  },
  {
    "text": "TCP UDP or any bidirectional channel we could also do mxing of",
    "start": "2709440",
    "end": "2714800"
  },
  {
    "text": "streams so reusing multiple reactor streams over one single transport and demoing at the other other side but what",
    "start": "2714800",
    "end": "2722480"
  },
  {
    "text": "I am super exciting about is the possibility of being able to materialize a flow like you you describe the the",
    "start": "2722480",
    "end": "2729440"
  },
  {
    "text": "transformation and when you pass in the materializer it can say okay I will run this part of the flow on this machine",
    "start": "2729440",
    "end": "2736640"
  },
  {
    "text": "and that part of the flow on that machine so you could scale out transparently your program super super",
    "start": "2736640",
    "end": "2744400"
  },
  {
    "text": "interesting so let's do another live demo just to wrap things",
    "start": "2744400",
    "end": "2750480"
  },
  {
    "text": "up um let me see let's see here can we",
    "start": "2750480",
    "end": "2758520"
  },
  {
    "text": "I think we need to run through this a bit so so what we're going to do here is",
    "start": "2758520",
    "end": "2764839"
  },
  {
    "text": "that we have the same thing that we had before right have the transfer we",
    "start": "2764839",
    "end": "2771760"
  },
  {
    "text": "unbounded stream of transfers and then under we have another flow which is a clock that every second it's going to",
    "start": "2771760",
    "end": "2778559"
  },
  {
    "text": "emit a tick so you have two different inputs or two different things that we can get input from and what we're going",
    "start": "2778559",
    "end": "2785160"
  },
  {
    "text": "to do if you skip the four one to 38462 what we're going to do is we're",
    "start": "2785160",
    "end": "2790839"
  },
  {
    "text": "going to take these two streams and join them with a zp operation and zp just means that you get the pair like one of",
    "start": "2790839",
    "end": "2798280"
  },
  {
    "text": "that and one of that in a pair and then we do map so we transform",
    "start": "2798280",
    "end": "2803920"
  },
  {
    "text": "it and we just retain the second part of the pair so we're going to discard The",
    "start": "2803920",
    "end": "2809440"
  },
  {
    "text": "Tick we don't care about the tick just keep the transfer then what we're going to do is",
    "start": "2809440",
    "end": "2815559"
  },
  {
    "text": "something called map future future and map future what that is going to do is",
    "start": "2815559",
    "end": "2821000"
  },
  {
    "text": "it's going to call a web service in this case and it's a web service that does",
    "start": "2821000",
    "end": "2826520"
  },
  {
    "text": "some sort of uh conversion between currencies so what we're going to do is the the currency that we have in the",
    "start": "2826520",
    "end": "2832680"
  },
  {
    "text": "transfer and the amount of the transfer we're going to send that off to the web service to get the result",
    "start": "2832680",
    "end": "2840520"
  },
  {
    "text": "back and we get that result in a future so a future is an an object that",
    "start": "2840520",
    "end": "2847160"
  },
  {
    "text": "represent a value that will be will be there in the future and when we get that thing when",
    "start": "2847160",
    "end": "2854440"
  },
  {
    "text": "we get the value from the web service we're going to transform it by creating",
    "start": "2854440",
    "end": "2860000"
  },
  {
    "text": "a new transfer with the Euro amount and",
    "start": "2860000",
    "end": "2865200"
  },
  {
    "text": "the new amount in Euros so we're going to convert every transfer to",
    "start": "2865200",
    "end": "2871880"
  },
  {
    "text": "euros everybody with us cool and",
    "start": "2871880",
    "end": "2877400"
  },
  {
    "text": "we're going to create a publisher out of that and we're going to create",
    "start": "2877400",
    "end": "2883319"
  },
  {
    "text": "3,462 of them so we have 46 3",
    "start": "2883319",
    "end": "2890200"
  },
  {
    "text": "38462 different streams right A lot of",
    "start": "2890200",
    "end": "2896599"
  },
  {
    "text": "them you know the reason why the number so what I have calculated that",
    "start": "2896760",
    "end": "2903160"
  },
  {
    "text": "using the materializer we'll create 26 actors for every one of them and 26 *",
    "start": "2903160",
    "end": "2909559"
  },
  {
    "text": "3,462 is 1 million 12 so it's close to a million so 1 million",
    "start": "2909559",
    "end": "2914640"
  },
  {
    "text": "actors we're going to create and then what we're going to do is we're going to create an nway merge taking the",
    "start": "2914640",
    "end": "2922599"
  },
  {
    "text": "3,462 streams and join them together into one and we're going to group",
    "start": "2922599",
    "end": "2929240"
  },
  {
    "text": "that so we're going to create a collection of at most 1 million elements",
    "start": "2929240",
    "end": "2937079"
  },
  {
    "text": "in one second so that's the batching thing that I talked about earlier transforming a stream into a",
    "start": "2937079",
    "end": "2943480"
  },
  {
    "text": "collection so then we have a collection of elements that happened within a",
    "start": "2943480",
    "end": "2948640"
  },
  {
    "text": "second what we're going to do is for each of those windows that collection we're going to analyze that collection",
    "start": "2948640",
    "end": "2955920"
  },
  {
    "text": "all the transfers that happened within that window we're going to analyze them and analyze is a very very naive thing",
    "start": "2955920",
    "end": "2962839"
  },
  {
    "text": "that just creates a string of the number of transfers that happen and the average sum in Euros of those those transfers",
    "start": "2962839",
    "end": "2971359"
  },
  {
    "text": "and it just creates a string out of that so down here after analyze we have a",
    "start": "2971359",
    "end": "2976839"
  },
  {
    "text": "stream of strings that we're going to print out right so we have a lot of streams",
    "start": "2976839",
    "end": "2983480"
  },
  {
    "text": "that call out to some web service to translate them and then we join all of them together create a window of",
    "start": "2983480",
    "end": "2989240"
  },
  {
    "text": "everything that happened every second and then we're going to analyze that and print it out right and we have more than",
    "start": "2989240",
    "end": "2995280"
  },
  {
    "text": "a million actors and at the end unless we actually execute this line",
    "start": "2995280",
    "end": "3003240"
  },
  {
    "text": "nothing is going to happen because up until now we've just described what we want to do and unless",
    "start": "3003240",
    "end": "3009640"
  },
  {
    "text": "we add consume there with the materializer nothing is ever going to happen so let's see what we can do",
    "start": "3009640",
    "end": "3017760"
  },
  {
    "text": "here like I don't see much from my own screen so let's uh let's run this thing",
    "start": "3020480",
    "end": "3028079"
  },
  {
    "text": "so what you might hear is the fan on my MacBook Air as it's uh tormented by my",
    "start": "3028079",
    "end": "3036839"
  },
  {
    "text": "program and generates over a million actors so if I if I 30 years from now",
    "start": "3036839",
    "end": "3045079"
  },
  {
    "text": "have 1 million cores in my MacBook Air that would be able to be used for this",
    "start": "3045079",
    "end": "3051000"
  },
  {
    "text": "thing so this runs within bounded space we didn't have to do anything to get",
    "start": "3051000",
    "end": "3057119"
  },
  {
    "text": "that bounded space we didn't encode that anywhere and it's transitive with the back pressure and this program is just",
    "start": "3057119",
    "end": "3063400"
  },
  {
    "text": "going to run on my computer and the important thing is that once we have the bounded space when we deploy stuff into",
    "start": "3063400",
    "end": "3070880"
  },
  {
    "text": "production we can start to reason about how much we can deploy into one machine",
    "start": "3070880",
    "end": "3076720"
  },
  {
    "text": "it's not that we have to get woken up at 2: a.m. because there was to much input",
    "start": "3076720",
    "end": "3081799"
  },
  {
    "text": "into our system super important to get this boundedness of work in our system and",
    "start": "3081799",
    "end": "3088559"
  },
  {
    "text": "everything here is non-blocking like it's if you if we can",
    "start": "3088559",
    "end": "3094280"
  },
  {
    "text": "see see my no we can't it's it's here",
    "start": "3094280",
    "end": "3099799"
  },
  {
    "text": "but if you could see let's uh if we exit the",
    "start": "3099799",
    "end": "3107559"
  },
  {
    "text": "uh you see my course up there uh it's sweating a bit",
    "start": "3109160",
    "end": "3116960"
  },
  {
    "text": "so it's using all my cores I didn't have to do anything specifically to say this",
    "start": "3116960",
    "end": "3122200"
  },
  {
    "text": "is how you need to do this in order to execute this so it's really divorcing",
    "start": "3122200",
    "end": "3127440"
  },
  {
    "text": "the concern of execution from the concern of describing transformation so if you want to you can",
    "start": "3127440",
    "end": "3133319"
  },
  {
    "text": "run this on a single core if you want to so if we start tormenting my poor",
    "start": "3133319",
    "end": "3139799"
  },
  {
    "text": "little machine can we see the is there is that the X",
    "start": "3139799",
    "end": "3147200"
  },
  {
    "text": "all right cool and we are almost back almost back so if you",
    "start": "3147200",
    "end": "3155280"
  },
  {
    "text": "want to get your hands dirty want to try this out um you can have a look at",
    "start": "3155280",
    "end": "3160359"
  },
  {
    "start": "3158000",
    "end": "3213000"
  },
  {
    "text": "reactor stream.org for reading more about the actual specification and things uh you can have a look at the",
    "start": "3160359",
    "end": "3166079"
  },
  {
    "text": "code there is an artifact published that is the current 04 o release we're going",
    "start": "3166079",
    "end": "3172079"
  },
  {
    "text": "to aim for one ofo as soon as possible because I think we've stabilized the API the specification we have an",
    "start": "3172079",
    "end": "3178720"
  },
  {
    "text": "experimental version of AA streams that was released yesterday if you want to have a look at that we also have",
    "start": "3178720",
    "end": "3184640"
  },
  {
    "text": "something called an activator template which activator is a learning experience you can download you can have a template",
    "start": "3184640",
    "end": "3190920"
  },
  {
    "text": "that generates all the things around you and you can just start hacking immediately if you just want to try",
    "start": "3190920",
    "end": "3195960"
  },
  {
    "text": "things out and and throw code at it and that's all I have and thank you so much",
    "start": "3195960",
    "end": "3205720"
  }
]