[
  {
    "start": "0",
    "end": "310000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "my name is and this uh 40 minutes",
    "start": "12719",
    "end": "17840"
  },
  {
    "text": "or i will be telling you my story about how i live after uh leaving business",
    "start": "17840",
    "end": "25039"
  },
  {
    "text": "objects um and i qualify myself as a",
    "start": "25039",
    "end": "30720"
  },
  {
    "text": "uh veteran of object-oriented programming um i i began uh well actually i began",
    "start": "30720",
    "end": "37200"
  },
  {
    "text": "uh before op i began with uh fortran at the university and then with",
    "start": "37200",
    "end": "44000"
  },
  {
    "text": "languages like pascal and c even prologue but from from the beginning of 90s i i've been uh working with",
    "start": "44000",
    "end": "52879"
  },
  {
    "text": "op with c plus plus and then uh with c sharp and you can",
    "start": "52879",
    "end": "60079"
  },
  {
    "text": "judge from my various of my nicknames on github my nickname is object and my",
    "start": "60079",
    "end": "66320"
  },
  {
    "text": "twitter nickname is o object because like object and object were already taken so it probably",
    "start": "66320",
    "end": "74400"
  },
  {
    "text": "gives you a hint about uh my relationship with uh object-oriented development",
    "start": "74400",
    "end": "82400"
  },
  {
    "text": "so uh then there must be some serious consideration for for a person",
    "start": "82400",
    "end": "89759"
  },
  {
    "text": "like me with github nickname object to uh to start like to to shift the",
    "start": "89759",
    "end": "96479"
  },
  {
    "text": "paradigm so i'm going to uh present you my story and like motivation",
    "start": "96479",
    "end": "101520"
  },
  {
    "text": "back the decision and how i feel today about that",
    "start": "101520",
    "end": "107040"
  },
  {
    "text": "uh and i want to start with disclaimer that this stock is",
    "start": "107040",
    "end": "114000"
  },
  {
    "text": "not about like trying to find the the one and only best programming",
    "start": "114000",
    "end": "121200"
  },
  {
    "text": "paradigm uh if you are happy with uh the way things around yourself",
    "start": "121200",
    "end": "129119"
  },
  {
    "text": "now and if you living in op world that's fine because uh we we should",
    "start": "129119",
    "end": "136959"
  },
  {
    "text": "build environment professional environment around us and and we should use paradigms",
    "start": "136959",
    "end": "142879"
  },
  {
    "text": "that that match our vision that match our uh conceptual view of the things",
    "start": "142879",
    "end": "150800"
  },
  {
    "text": "uh and it's only when we start being unsatisfied with things and and",
    "start": "150800",
    "end": "157200"
  },
  {
    "text": "being pragmatic most of us as developers are progressing then typically we try to look around and",
    "start": "157200",
    "end": "165760"
  },
  {
    "text": "see okay what what i can do to improve my professional workflow there's",
    "start": "165760",
    "end": "172160"
  },
  {
    "text": "a great article by eric singh uh erickson he's uh also based around programming he's",
    "start": "172160",
    "end": "179760"
  },
  {
    "text": "one of the people behind first internet browsers uh in early 90s and then",
    "start": "179760",
    "end": "188080"
  },
  {
    "text": "he has been running a company source gear which uh made one of the first",
    "start": "188080",
    "end": "194640"
  },
  {
    "text": "uh pre-git version control systems called source world so he's quite a visionary man and he",
    "start": "194640",
    "end": "200239"
  },
  {
    "text": "wrote he's using both c sharp and f sharp and he wrote few years ago blog post",
    "start": "200239",
    "end": "205840"
  },
  {
    "text": "uh which he called why your f sharp evangelism isn't working where he emphasized the fact that uh",
    "start": "205840",
    "end": "213440"
  },
  {
    "text": "you can't really uh start explaining um advantages of strong sides of uh like",
    "start": "213440",
    "end": "219760"
  },
  {
    "text": "monads uh or pure functions to somebody who is completely happy with uh how things are so you have to",
    "start": "219760",
    "end": "227920"
  },
  {
    "text": "reach pragmatists in pain when when there are some pain points uh of developers then uh they can they",
    "start": "227920",
    "end": "235840"
  },
  {
    "text": "can be approached with uh idea of paradigm shift",
    "start": "235840",
    "end": "241439"
  },
  {
    "text": "uh few words about our product but we won't be uh looking much into our domain actually",
    "start": "241439",
    "end": "248959"
  },
  {
    "text": "we'll be talking uh about more simple things uh i'm working for a project for uh",
    "start": "248959",
    "end": "255360"
  },
  {
    "text": "norwegian uh broadcasting corporation nrk so our small group is part of",
    "start": "255360",
    "end": "262720"
  },
  {
    "text": "large organization we are responsible for uh developing and maintaining services that",
    "start": "262720",
    "end": "268000"
  },
  {
    "text": "uh upload to the cloud media files so they can be streamed",
    "start": "268000",
    "end": "274080"
  },
  {
    "text": "files for tv programs radio program use clips they can be viewed and listened to",
    "start": "274080",
    "end": "280560"
  },
  {
    "text": "on tablets mobile phones computers so uh there are quite strict",
    "start": "280560",
    "end": "287600"
  },
  {
    "text": "requirements to scalability robustness availability of these services",
    "start": "287600",
    "end": "292720"
  },
  {
    "text": "so and this uh constraints of course they",
    "start": "292720",
    "end": "298560"
  },
  {
    "text": "played also significant role with um us",
    "start": "298560",
    "end": "303680"
  },
  {
    "text": "striving to find the best tools and uh best programming paradigm",
    "start": "303680",
    "end": "308720"
  },
  {
    "text": "but will start with much uh easier thing actually how to model a point yeah just a point",
    "start": "308720",
    "end": "314639"
  },
  {
    "start": "310000",
    "end": "493000"
  },
  {
    "text": "uh which consists of like x and y two numbers",
    "start": "314639",
    "end": "319680"
  },
  {
    "text": "uh i watched the stock a couple of years ago um uh it was talked by dmitry ivanov at",
    "start": "319680",
    "end": "326000"
  },
  {
    "text": "that time he was a jet brains i think he worked now for a different company and uh the talk was about immutable",
    "start": "326000",
    "end": "331919"
  },
  {
    "text": "collections in dot net but he started his presentation with a simple example showing",
    "start": "331919",
    "end": "337039"
  },
  {
    "text": "how uneasy it is for for developer with many choices",
    "start": "337039",
    "end": "344240"
  },
  {
    "text": "in op and in particular in c sharp to write proper implementation of a very",
    "start": "344240",
    "end": "350479"
  },
  {
    "text": "simple class such as point so uh",
    "start": "350479",
    "end": "355759"
  },
  {
    "text": "he showed this code which probably how many of cpc shop developers would read",
    "start": "355759",
    "end": "361759"
  },
  {
    "text": "would write it you have a class point you have x and y with getter and cetera you have constructor and also you have a couple",
    "start": "361759",
    "end": "367759"
  },
  {
    "text": "of methods to change x and y uh so it's a class with",
    "start": "367759",
    "end": "373440"
  },
  {
    "text": "only five lines of implementation and four of them are wrong and",
    "start": "373440",
    "end": "381919"
  },
  {
    "text": "two of them are missing what is missing it's um it's details but yeah it's significant",
    "start": "381919",
    "end": "388400"
  },
  {
    "text": "details because it's a reference type and then you need to declare get hash code you need",
    "start": "388400",
    "end": "394400"
  },
  {
    "text": "to declare quality but what's important more important is that the class as it's declared now it's not",
    "start": "394400",
    "end": "400639"
  },
  {
    "text": "thread safe so uh you shouldn't be uh declaring setters for x and y also increase",
    "start": "400639",
    "end": "408720"
  },
  {
    "text": "x and increase y they should be doing it in place changing with a changing existing point",
    "start": "408720",
    "end": "414400"
  },
  {
    "text": "instead you should declare x and y as read only and if you want to increase them",
    "start": "414400",
    "end": "422080"
  },
  {
    "text": "uh they this method they return new point instead of changing the values in place",
    "start": "422080",
    "end": "430160"
  },
  {
    "text": "so uh in comparison uh in f sharp which is functional",
    "start": "430160",
    "end": "436479"
  },
  {
    "text": "language on dotted platform you",
    "start": "436479",
    "end": "442560"
  },
  {
    "text": "come up with equivalent implementation without the the flows which we saw in the",
    "start": "442560",
    "end": "448840"
  },
  {
    "text": "beginning uh by writing just a few lines of code this is how",
    "start": "448840",
    "end": "453919"
  },
  {
    "text": "point definition looks in f sharp and this is how you declare point p and point q you reuse",
    "start": "453919",
    "end": "462160"
  },
  {
    "text": "values of point p and change um one of the fields one of the properties",
    "start": "462160",
    "end": "467680"
  },
  {
    "text": "uh you can say that okay developers should know what they're doing and developers should uh",
    "start": "467680",
    "end": "473520"
  },
  {
    "text": "yeah they can make design mistake they should correct them i i'd say that it's not just design",
    "start": "473520",
    "end": "478960"
  },
  {
    "text": "mistake it's it's more like insufficient experience because uh you need to",
    "start": "478960",
    "end": "484000"
  },
  {
    "text": "learn certain things okay this is how you write thread save class this is how you if it's a reference type",
    "start": "484000",
    "end": "489680"
  },
  {
    "text": "how you make it comparable and so on but this is actually a principle difference between",
    "start": "489680",
    "end": "495599"
  },
  {
    "start": "493000",
    "end": "714000"
  },
  {
    "text": "a set of defaults if you take uh the mainstream object-oriented languages",
    "start": "495599",
    "end": "501199"
  },
  {
    "text": "like c plus plus c sharp and java they",
    "start": "501199",
    "end": "507599"
  },
  {
    "text": "have set of defaults which is initially uh unsafe while with functional",
    "start": "507599",
    "end": "513760"
  },
  {
    "text": "programming it gives you uh it it sort of hints you to write correct implementation from uh",
    "start": "513760",
    "end": "522000"
  },
  {
    "text": "from the first attempt with objective programming uh it's languages they empower you through",
    "start": "522000",
    "end": "527760"
  },
  {
    "text": "a variety of choices so you can actually achieve uh",
    "start": "527760",
    "end": "532880"
  },
  {
    "text": "a lot of powerful things but you have to know exactly what you're doing and you",
    "start": "532880",
    "end": "538080"
  },
  {
    "text": "have to be uh very disciplined in that with uh functional programming",
    "start": "538080",
    "end": "543680"
  },
  {
    "text": "it uh it prevents you by safer set of initial choices prevent you",
    "start": "543680",
    "end": "549440"
  },
  {
    "text": "from making unconscious mistakes which can become important you know with in the project where you have",
    "start": "549440",
    "end": "556320"
  },
  {
    "text": "team members at different levels people coming people uh going and also as we would like to",
    "start": "556320",
    "end": "562560"
  },
  {
    "text": "see also it uh [Music] removes some of subjective choices so",
    "start": "562560",
    "end": "569839"
  },
  {
    "text": "it's i would say that it's less subjective and we'll see why uh also when it comes to um concurrency",
    "start": "569839",
    "end": "578160"
  },
  {
    "text": "management uh functional programming languages uh with uh immutable state uh with",
    "start": "578160",
    "end": "586240"
  },
  {
    "text": "immutable types as default they are the your path to concurrency which is quite important nowadays",
    "start": "586240",
    "end": "594480"
  },
  {
    "text": "uh you have to uh even if you apply like solid principles",
    "start": "594480",
    "end": "600720"
  },
  {
    "text": "at best uh they tell you nothing uh how you uh manage your concurrency how you lock",
    "start": "600720",
    "end": "607839"
  },
  {
    "text": "your shared state to prevent to provide for from corruption and uh",
    "start": "607839",
    "end": "613200"
  },
  {
    "text": "even if you care carefully do it on a competent level the problem is that lock students compose so if you're building a larger",
    "start": "613200",
    "end": "619200"
  },
  {
    "text": "application lock management is always a manual business which makes uh",
    "start": "619200",
    "end": "627279"
  },
  {
    "text": "large applications quite hard to maintain and quite easy to break uh and because of that",
    "start": "627279",
    "end": "633920"
  },
  {
    "text": "developers tend to be very conservative when working with locks they they they rather lock more than less",
    "start": "633920",
    "end": "641519"
  },
  {
    "text": "the problem with this uh is um illustrated by so-called amlas law which uh gives you",
    "start": "641519",
    "end": "649519"
  },
  {
    "text": "numerical values of like how much performance you lose if you if a large part of your",
    "start": "649519",
    "end": "656640"
  },
  {
    "text": "application uh can't be paralyzed and actually this is not not just large part uh",
    "start": "656640",
    "end": "663760"
  },
  {
    "text": "it can be a relatively small part which is cannot be paralyzed and then you can quickly get",
    "start": "663760",
    "end": "668800"
  },
  {
    "text": "stuck with how much performance gain you get so this is just um example uh if you if only",
    "start": "668800",
    "end": "676560"
  },
  {
    "text": "forty percent of your code can be paralyzed then you typically stuck at around 50 60 um",
    "start": "676560",
    "end": "683120"
  },
  {
    "text": "performance gain so if you even if you uh invest and you buy 10 cpus",
    "start": "683120",
    "end": "689519"
  },
  {
    "text": "you only get less than 60 performance gain so this is something that most of the developers actually not aware",
    "start": "689519",
    "end": "695680"
  },
  {
    "text": "how quickly you get stuck if you uh if your application can't be properly parallelized and with functional",
    "start": "695680",
    "end": "702000"
  },
  {
    "text": "languages with immutability uh by default with safe uh uh thread wise uh say structures",
    "start": "702000",
    "end": "710160"
  },
  {
    "text": "you don't get this problem at least you don't get this problem at large but let's uh go back to a business",
    "start": "710160",
    "end": "718079"
  },
  {
    "start": "714000",
    "end": "1088000"
  },
  {
    "text": "object um and have a closer look at that",
    "start": "718079",
    "end": "723279"
  },
  {
    "text": "so uh class point we began with that uh there is one thing which i",
    "start": "723279",
    "end": "729120"
  },
  {
    "text": "deliberately skipped in the first implementation it's a it's visibility",
    "start": "729120",
    "end": "735040"
  },
  {
    "text": "access visibility so actually we need to apply public modifiers to",
    "start": "735040",
    "end": "742639"
  },
  {
    "text": "properties to construct to methods otherwise because clients won't be able to use it and when i started working with uh",
    "start": "742639",
    "end": "749440"
  },
  {
    "text": "object-oriented development i thought that you know it's it's enough it's efficient you have this public you have protected private",
    "start": "749440",
    "end": "756079"
  },
  {
    "text": "in some language you have internal um access modifier but uh what it doesn't solve it doesn't",
    "start": "756079",
    "end": "763040"
  },
  {
    "text": "solve you uh ability to expose certain um methods for certain scenarios because",
    "start": "763040",
    "end": "771200"
  },
  {
    "text": "this is actually what you want to do uh when when uh modeling complex domain",
    "start": "771200",
    "end": "778639"
  },
  {
    "text": "so for example take a look at increase x increase y why why is it public what if you want to",
    "start": "778639",
    "end": "785040"
  },
  {
    "text": "have point um in two scenarios in one scenario we only need to view points",
    "start": "785040",
    "end": "790720"
  },
  {
    "text": "and also we want to edit point in first scenario actually we don't want to uh have increased x increase y we don't",
    "start": "790720",
    "end": "797120"
  },
  {
    "text": "want any operations that ate it that can modify the point but we need to expose them",
    "start": "797120",
    "end": "803120"
  },
  {
    "text": "or use inheritance we have a class point have some class editable uh point",
    "start": "803120",
    "end": "809680"
  },
  {
    "text": "and then we have such usage of these classes and i i don't i don't think i need to",
    "start": "809680",
    "end": "816639"
  },
  {
    "text": "explain uh flaws of this approach when i have hierarchy of classes with uh like read-only version of class uh read",
    "start": "816639",
    "end": "824399"
  },
  {
    "text": "and write version of class it has many um alternative is um",
    "start": "824399",
    "end": "830160"
  },
  {
    "text": "you have just one point and then you have point manager so you you just keep uh your data point",
    "start": "830160",
    "end": "836800"
  },
  {
    "text": "data in the point and uh point manager gets access module uh against the actual operations fine",
    "start": "836800",
    "end": "844880"
  },
  {
    "text": "but actually we are abandoning point as a business object so it's no",
    "start": "844880",
    "end": "850079"
  },
  {
    "text": "longer business object which is a combination of uh methods and",
    "start": "850079",
    "end": "856240"
  },
  {
    "text": "data uh in one class if you look at f sharp uh there it's",
    "start": "856240",
    "end": "863199"
  },
  {
    "text": "quite easy to separate logic in different models uh so different scenarios each another",
    "start": "863199",
    "end": "870800"
  },
  {
    "text": "has its own uh module where we put just uh operations that uh available for certain scenario so in",
    "start": "870800",
    "end": "878800"
  },
  {
    "text": "the simplest example if you really want to expose like increase x increase y for all points we can do like that",
    "start": "878800",
    "end": "885839"
  },
  {
    "text": "and this is how we can use it but if we if we want to uh limit to restrict access to those who",
    "start": "885839",
    "end": "891519"
  },
  {
    "text": "can edit this point uh we can move all operations uh",
    "start": "891519",
    "end": "896880"
  },
  {
    "text": "related to point update into different model increase where we have this increase x and chris",
    "start": "896880",
    "end": "902160"
  },
  {
    "text": "y so component that needs to access to this scenario",
    "start": "902160",
    "end": "907680"
  },
  {
    "text": "it needs to open that module and then it can start modifying points and um of course this is quite simple",
    "start": "907680",
    "end": "914720"
  },
  {
    "text": "example it may seem you know unnecessary to uh",
    "start": "914720",
    "end": "920000"
  },
  {
    "text": "have this simple to have this multiple modules at this",
    "start": "920000",
    "end": "925600"
  },
  {
    "text": "simple example but if your domain is complex and our domain is quite complex it",
    "start": "925600",
    "end": "930639"
  },
  {
    "text": "actually means a lot possibility to hide operation that shouldn't be visible",
    "start": "930639",
    "end": "938800"
  },
  {
    "text": "or for certain scenarios we continue with business objects so uh",
    "start": "938800",
    "end": "944639"
  },
  {
    "text": "business objects uh in classical op it's a combination of data",
    "start": "944639",
    "end": "952480"
  },
  {
    "text": "and operations on them and this is kind of holy cow of object oriented development",
    "start": "952480",
    "end": "958880"
  },
  {
    "text": "so this is all this has always been presented as a harmony like you define data types and",
    "start": "958880",
    "end": "966800"
  },
  {
    "text": "uh there are some methods some operations that naturally feed those data types i might say that",
    "start": "966800",
    "end": "974240"
  },
  {
    "text": "uh in almost all projects built using op uh which i've",
    "start": "974240",
    "end": "982639"
  },
  {
    "text": "happened to work with the relationship between uh data structures and the operation of",
    "start": "982639",
    "end": "988399"
  },
  {
    "text": "them probably looked more like this this is a painting uh by uh russian painter ilya",
    "start": "988399",
    "end": "996399"
  },
  {
    "text": "reppin and so you see on the front the actual data which has no personal interest or",
    "start": "996399",
    "end": "1003040"
  },
  {
    "text": "personal uh association with uh with methods on them but they need to drag them",
    "start": "1003040",
    "end": "1009519"
  },
  {
    "text": "because it's a part of the same class but those are different animals as uh",
    "start": "1009519",
    "end": "1015040"
  },
  {
    "text": "joe armstrong said once so he said that uh he believed that there is a",
    "start": "1015040",
    "end": "1020079"
  },
  {
    "text": "fundamental flaw of op that data and",
    "start": "1020079",
    "end": "1026000"
  },
  {
    "text": "functions operations on data they're so different animals they shouldn't be mixed in in the same cage",
    "start": "1026000",
    "end": "1033120"
  },
  {
    "text": "uh there's a great book if you want to get uh a uh introduction into how to",
    "start": "1033120",
    "end": "1041678"
  },
  {
    "text": "uh declare how to describe your domain with operations in a function level a",
    "start": "1041679",
    "end": "1048880"
  },
  {
    "text": "book by scott plushen domain modelling made functional uh where he uh shows",
    "start": "1048880",
    "end": "1056960"
  },
  {
    "text": "uh actually half of the book uh is not even about uh like f sharp or functional languages so",
    "start": "1056960",
    "end": "1064160"
  },
  {
    "text": "it's a half of the book he just introduces you",
    "start": "1064160",
    "end": "1069520"
  },
  {
    "text": "to functional way of solving or dealing with the things uh and uh and then he shows uh",
    "start": "1069520",
    "end": "1075919"
  },
  {
    "text": "using f sharp how how you can build proper application uh i tried to use the same domain and",
    "start": "1075919",
    "end": "1083280"
  },
  {
    "text": "examples which he used in his book and which is auto processing to show",
    "start": "1083280",
    "end": "1090880"
  },
  {
    "start": "1088000",
    "end": "1326000"
  },
  {
    "text": "how i would have done it if i if i came back to object oriented development",
    "start": "1090880",
    "end": "1096640"
  },
  {
    "text": "these days so we have all the processing with several scenarios unvalidated order validated order",
    "start": "1096640",
    "end": "1103280"
  },
  {
    "text": "total price we price the order and then we either ship it or cancel it so how can we",
    "start": "1103280",
    "end": "1109919"
  },
  {
    "text": "proceed okay you have a class order with a total",
    "start": "1109919",
    "end": "1115760"
  },
  {
    "text": "price from tracking url constellation reason and some properties which tell us about the",
    "start": "1115760",
    "end": "1122160"
  },
  {
    "text": "order whether it's validated shaped or cancelled no method yet so we start adding methods",
    "start": "1122160",
    "end": "1128720"
  },
  {
    "text": "okay we need to uh validate order ship it or cancel it so",
    "start": "1128720",
    "end": "1134720"
  },
  {
    "text": "this completes our scenarios should these operations be added to the class order",
    "start": "1134720",
    "end": "1140559"
  },
  {
    "text": "itself or they should be uh",
    "start": "1140559",
    "end": "1145679"
  },
  {
    "text": "added to another class or the manager because here at this level",
    "start": "1145679",
    "end": "1152000"
  },
  {
    "text": "things become very subjective and this is what i meant in the beginning of the document i said that when you",
    "start": "1152000",
    "end": "1157280"
  },
  {
    "text": "use op to define to describe your domain things quickly becomes uh subjective and",
    "start": "1157280",
    "end": "1163360"
  },
  {
    "text": "this is partly because you mix data and operation on them you need to",
    "start": "1163360",
    "end": "1168559"
  },
  {
    "text": "figure out okay do these operations really belong to your data structure or not",
    "start": "1168559",
    "end": "1173760"
  },
  {
    "text": "so some developers would say that you have to define uh methods validate ship council on",
    "start": "1173760",
    "end": "1180080"
  },
  {
    "text": "order itself so others uh would say that no we do it on order manager level because the order",
    "start": "1180080",
    "end": "1186960"
  },
  {
    "text": "will not ship itself the order can't cancel itself it should be done from outside so let's do it in order manager and",
    "start": "1186960",
    "end": "1194480"
  },
  {
    "text": "probably majority of experienced developers would go that way",
    "start": "1194480",
    "end": "1200000"
  },
  {
    "text": "but then we don't have business object anymore it's pure data and pure business",
    "start": "1200000",
    "end": "1205840"
  },
  {
    "text": "actually we split it up so we as joe armstrong said we we don't uh mix uh these animals in in the same",
    "start": "1205840",
    "end": "1213520"
  },
  {
    "text": "cage it's two different classes so what's left from op basically nothing today",
    "start": "1213520",
    "end": "1220400"
  },
  {
    "text": "if i if i came back to uh c-sharp i would uh instead of uh declaring uh",
    "start": "1220400",
    "end": "1229520"
  },
  {
    "text": "what one class order with various properties i would declare",
    "start": "1229520",
    "end": "1236400"
  },
  {
    "text": "class per uh scenario like unvalidated order validated order price order and so",
    "start": "1236400",
    "end": "1242559"
  },
  {
    "text": "on each class containing just fields just properties that make sense that are available",
    "start": "1242559",
    "end": "1250400"
  },
  {
    "text": "and probably mandatory at this stage and this was a quite important",
    "start": "1250400",
    "end": "1257120"
  },
  {
    "text": "difference between how developers often approach class design in c-sharp and java you know classes in",
    "start": "1257120",
    "end": "1265280"
  },
  {
    "text": "these languages they have a lot of ceremony associated so because of that partly",
    "start": "1265280",
    "end": "1271280"
  },
  {
    "text": "because of that developers typically they dedicate a file to a type even if",
    "start": "1271280",
    "end": "1277039"
  },
  {
    "text": "you have a numerator often is placed in a separate file new class new file because you know this",
    "start": "1277039",
    "end": "1283280"
  },
  {
    "text": "is important decision you have a new class",
    "start": "1283280",
    "end": "1288640"
  },
  {
    "text": "and uh while in uh functional uh programming uh what i i see",
    "start": "1288640",
    "end": "1294880"
  },
  {
    "text": "in various projects and classes or types type definitions are uh so compact so terse uh",
    "start": "1294880",
    "end": "1302559"
  },
  {
    "text": "so it's much it gives you much more advantage actually to combine different scenarios the family",
    "start": "1302559",
    "end": "1309360"
  },
  {
    "text": "of types in in the same file and make this type definitions very tight",
    "start": "1309360",
    "end": "1315039"
  },
  {
    "text": "so this is how probably i would have done if today in c sharp so it would look like similar to",
    "start": "1315039",
    "end": "1321679"
  },
  {
    "text": "what i would do in f sharp but if i did it in f sharp",
    "start": "1321679",
    "end": "1328880"
  },
  {
    "start": "1326000",
    "end": "1692000"
  },
  {
    "text": "i would define types like this uh again as i mentioned uh very compact",
    "start": "1328880",
    "end": "1336320"
  },
  {
    "text": "veritas uh containing exactly those data which are available for",
    "start": "1336320",
    "end": "1342240"
  },
  {
    "text": "for each stage of uh business processing then i would define a module with all",
    "start": "1342240",
    "end": "1348480"
  },
  {
    "text": "operations on on those types like validate order price order ship order so uh",
    "start": "1348480",
    "end": "1355600"
  },
  {
    "text": "the the code to run to execute this business workflow it",
    "start": "1355600",
    "end": "1360960"
  },
  {
    "text": "looks like this so i start with input data uh it's a",
    "start": "1360960",
    "end": "1366000"
  },
  {
    "text": "details book then i pipe it this is pipe um operating f sharp so it it",
    "start": "1366000",
    "end": "1373440"
  },
  {
    "text": "pipes the input of one function into another function um so i i pipe it to validate order the",
    "start": "1373440",
    "end": "1381120"
  },
  {
    "text": "output which is different type i pipe the price order with um",
    "start": "1381120",
    "end": "1386720"
  },
  {
    "text": "the actual price tag and then i pipe it to ship order with some euro a uri",
    "start": "1386720",
    "end": "1391760"
  },
  {
    "text": "and then uh in the end i will get i will get the return results",
    "start": "1391760",
    "end": "1397440"
  },
  {
    "text": "which is uh shipped order so at every stage the type of data changed",
    "start": "1397440",
    "end": "1402960"
  },
  {
    "text": "i have no variables here you see so there is there is no moving parts it's just functional transformations",
    "start": "1402960",
    "end": "1410400"
  },
  {
    "text": "uh what uh lets us those people who are developers who",
    "start": "1410400",
    "end": "1416960"
  },
  {
    "text": "use functional languages to be quite efficient in enters in domain modeling is use of also called",
    "start": "1416960",
    "end": "1423520"
  },
  {
    "text": "algebraic data types uh algebraic data types consist of product types and",
    "start": "1423520",
    "end": "1429360"
  },
  {
    "text": "some types product types is something that we we do have in java and c sharp um it's",
    "start": "1429360",
    "end": "1434640"
  },
  {
    "text": "analog of struct or class where you define a combination of uh properties",
    "start": "1434640",
    "end": "1441760"
  },
  {
    "text": "that all present in the type definition while uh uh some type it's either all",
    "start": "1441760",
    "end": "1450400"
  },
  {
    "text": "so finding sources either payment card or bank account and and then you pattern much like in",
    "start": "1450400",
    "end": "1456559"
  },
  {
    "text": "the example here so if we uh compute is source valid funding source valid then we can compute",
    "start": "1456559",
    "end": "1463200"
  },
  {
    "text": "easily payment card or bank account and then we have different computations for every state a step and uh actually if i",
    "start": "1463200",
    "end": "1470960"
  },
  {
    "text": "remove bank account part from here my compilation will fail because i will uh i will not have um",
    "start": "1470960",
    "end": "1478720"
  },
  {
    "text": "complete pattern matching in languages like f sharp i can even define so-called active patterns i can pattern",
    "start": "1478720",
    "end": "1485679"
  },
  {
    "text": "much on types that have infinite number of values like here i define uh like",
    "start": "1485679",
    "end": "1493039"
  },
  {
    "text": "categories even and odd uh which are defined on infinite",
    "start": "1493039",
    "end": "1499600"
  },
  {
    "text": "number of instances of entire integers of integers and then i can pattern much",
    "start": "1499600",
    "end": "1504960"
  },
  {
    "text": "like there are only two values like even or old uh",
    "start": "1504960",
    "end": "1511760"
  },
  {
    "text": "what is important also when we model domain using",
    "start": "1511760",
    "end": "1518960"
  },
  {
    "text": "this small instances of algebraic data types that it's",
    "start": "1518960",
    "end": "1525440"
  },
  {
    "text": "not just to avoid news often when people uh talk about advantages of functional programming",
    "start": "1525440",
    "end": "1531039"
  },
  {
    "text": "they said okay this the new was billion dollar mistake and this is a",
    "start": "1531039",
    "end": "1537120"
  },
  {
    "text": "continuous source of new reference exceptions let's uh get rid of it uh and we have this",
    "start": "1537120",
    "end": "1542880"
  },
  {
    "text": "opportunity with functional languages but in functionality you have options uh in the f-sharp you have uh",
    "start": "1542880",
    "end": "1549360"
  },
  {
    "text": "maybe maybe monad so you have various other ways to to express a",
    "start": "1549360",
    "end": "1556080"
  },
  {
    "text": "lack of data and i think just replacement uh nullable uh data with",
    "start": "1556080",
    "end": "1562720"
  },
  {
    "text": "optional data doesn't really make your domain tight",
    "start": "1562720",
    "end": "1569440"
  },
  {
    "text": "jaron minsky uh several years ago said in uh one of his blog posts that",
    "start": "1569440",
    "end": "1574480"
  },
  {
    "text": "we should strive to make illegal state unrepresentable it's quite important that something that",
    "start": "1574480",
    "end": "1580240"
  },
  {
    "text": "can't really happen should not be part of our domain definition and and this is uh often combination of",
    "start": "1580240",
    "end": "1588240"
  },
  {
    "text": "some optional values and we should be very critical to why we allow optional values into our",
    "start": "1588240",
    "end": "1593600"
  },
  {
    "text": "domain why we allow to be part of a business logic processing",
    "start": "1593600",
    "end": "1599279"
  },
  {
    "text": "uh of course we can't really do anything when we read things from the database or",
    "start": "1599279",
    "end": "1605279"
  },
  {
    "text": "we receive uh data from external services say they may have these",
    "start": "1605279",
    "end": "1610640"
  },
  {
    "text": "type definitions with uh with news with uh missing fields",
    "start": "1610640",
    "end": "1617120"
  },
  {
    "text": "but as soon as we entered our our domain like the core business logic",
    "start": "1617120",
    "end": "1623279"
  },
  {
    "text": "we should try to replace them with our own types which are more tight and we",
    "start": "1623279",
    "end": "1628799"
  },
  {
    "text": "should we don't have um optional places there's a great talk which goes into",
    "start": "1628799",
    "end": "1635360"
  },
  {
    "text": "details of how this can be achieved and why this should be achieved by rich hickey the creator of closure",
    "start": "1635360",
    "end": "1641679"
  },
  {
    "text": "and the whole like one hour talk is called maybe not it's dedicated to harm",
    "start": "1641679",
    "end": "1648240"
  },
  {
    "text": "of optional values uh and uh richie he has a great",
    "start": "1648240",
    "end": "1654720"
  },
  {
    "text": "uh slide in his talk uh showing uh principal difference between uh sets",
    "start": "1654720",
    "end": "1661200"
  },
  {
    "text": "versus slot so on the left hand side you see a set of sheep or a",
    "start": "1661200",
    "end": "1666960"
  },
  {
    "text": "map no no it's a set and here you don't have a really notion of missing ship here you have to",
    "start": "1666960",
    "end": "1674000"
  },
  {
    "text": "deal with uh with what you have while on the right hand side you have you have a",
    "start": "1674000",
    "end": "1679520"
  },
  {
    "text": "slot so there may be some empty slots so what you see but you may see some slots with some holes and you have",
    "start": "1679520",
    "end": "1685360"
  },
  {
    "text": "to deal with that and as hiki says that you you can see which which picture looks looks nicer",
    "start": "1685360",
    "end": "1691760"
  },
  {
    "text": "so uh uh this is what one of um our lessons when we",
    "start": "1691760",
    "end": "1698640"
  },
  {
    "start": "1692000",
    "end": "2006000"
  },
  {
    "text": "uh approached uh functional programming as as to to",
    "start": "1698640",
    "end": "1704720"
  },
  {
    "text": "make domain tight and with algebraic data types uh you can actually have great possibility to do that",
    "start": "1704720",
    "end": "1710880"
  },
  {
    "text": "but languages evolved also uh object-oriented languages and there",
    "start": "1710880",
    "end": "1717520"
  },
  {
    "text": "comes a question can't we adopt fp style in c-sharp java other traditional op languages",
    "start": "1717520",
    "end": "1726640"
  },
  {
    "text": "and especially since they all become multi-paradigm if you read",
    "start": "1726640",
    "end": "1734640"
  },
  {
    "text": "today's description of what java is what kotlin c sharp c plus plus",
    "start": "1735039",
    "end": "1741120"
  },
  {
    "text": "r they all uh claim that you can program using non or object oriented",
    "start": "1741120",
    "end": "1748480"
  },
  {
    "text": "paradigms um if when you use these languages so 25 years ago telling c plus plus",
    "start": "1748480",
    "end": "1755360"
  },
  {
    "text": "developer that uh he should be using op when working with c c plus plus would",
    "start": "1755360",
    "end": "1762799"
  },
  {
    "text": "be like a swaying uh in the church and um now you have a",
    "start": "1762799",
    "end": "1771520"
  },
  {
    "text": "talk by finlash oh ooh considered harmful and this talk has been has delivered at",
    "start": "1771520",
    "end": "1777520"
  },
  {
    "text": "cppcon 2018. and uh it's a great talk recommended uh",
    "start": "1777520",
    "end": "1782960"
  },
  {
    "text": "even if you don't uh work with ziploc on daily basis and uh in the end of his talk he gives some",
    "start": "1782960",
    "end": "1789760"
  },
  {
    "text": "recommendation about how today what what what to use in c plus software how to program surplus",
    "start": "1789760",
    "end": "1795279"
  },
  {
    "text": "plus and it's all functional persistent data structures magnetic operations function composable",
    "start": "1795279",
    "end": "1800399"
  },
  {
    "text": "uh algorithms so yes you can uh use uh",
    "start": "1800399",
    "end": "1808240"
  },
  {
    "text": "object languages to uh adopt uh fb style uh but",
    "start": "1808240",
    "end": "1815440"
  },
  {
    "text": "uh i did this talk yesterday and this is a new slide which i added um after reading twitter yesterday there",
    "start": "1815440",
    "end": "1823200"
  },
  {
    "text": "was a net conference online of course on a conference and",
    "start": "1823200",
    "end": "1828480"
  },
  {
    "text": "uh there were some presentations of uc sharp feature and c sharp is quite evolving languages which gets more and",
    "start": "1828480",
    "end": "1833520"
  },
  {
    "text": "more um f sharp uh features and uh uh so there was a short dialogue with",
    "start": "1833520",
    "end": "1840080"
  },
  {
    "text": "you like i say golob uh developer from ukraine i think uh and the math service and one one of uh",
    "start": "1840080",
    "end": "1846880"
  },
  {
    "text": "maintainers and uh people who actually influence uh uh see today's c-sharp and",
    "start": "1846880",
    "end": "1854799"
  },
  {
    "text": "adds new features to that uh so alexa said that uh it's disappointing to see that uh adopts more and more ffb features",
    "start": "1854799",
    "end": "1861919"
  },
  {
    "text": "because the paradigm of the language will stay or object oriented and i would just name",
    "start": "1861919",
    "end": "1870080"
  },
  {
    "text": "one thing it will always be uh based on mute",
    "start": "1870080",
    "end": "1875600"
  },
  {
    "text": "mutable data structures by default and uh master orgasm says that uh you",
    "start": "1875600",
    "end": "1881600"
  },
  {
    "text": "know some fba features are essential highly useful and we see that actually it's you can write much more",
    "start": "1881600",
    "end": "1886960"
  },
  {
    "text": "compact enters c sharp uh and it will be getting more and more features inspired by function",
    "start": "1886960",
    "end": "1892240"
  },
  {
    "text": "programming but as math admits and he agrees that if you want the full functional",
    "start": "1892240",
    "end": "1897679"
  },
  {
    "text": "experience f sharp is a great choice and the same can be said on about function languages",
    "start": "1897679",
    "end": "1903120"
  },
  {
    "text": "on other platforms so uh if i can summarize what are the impact of f sharp on fish",
    "start": "1903120",
    "end": "1909519"
  },
  {
    "text": "development cycle in our team uh it's algebraic types to help better",
    "start": "1909519",
    "end": "1915760"
  },
  {
    "text": "express functional requirements i think we can express our domain very well with algebraic type",
    "start": "1915760",
    "end": "1922240"
  },
  {
    "text": "data types it's uh um we're defining a lot of small",
    "start": "1922240",
    "end": "1927919"
  },
  {
    "text": "types all immutable types immutable records uh each type describe exactly there is a",
    "start": "1927919",
    "end": "1933440"
  },
  {
    "text": "one-to-one mapping queen with a certain business processing stage so for each scenario has its own type",
    "start": "1933440",
    "end": "1941279"
  },
  {
    "text": "elimination of news and mostly options it keeps business logic compact and",
    "start": "1941279",
    "end": "1946960"
  },
  {
    "text": "straightforward and i think i said enough about this but it's uh i can't really",
    "start": "1946960",
    "end": "1952240"
  },
  {
    "text": "underestimate importance of that to have domain tight and to make uh illegal state not representable in",
    "start": "1952240",
    "end": "1958559"
  },
  {
    "text": "your domain types and we control the visibility of of our apis of our",
    "start": "1958559",
    "end": "1968559"
  },
  {
    "text": "business methods by using models which is also a great way great replacement to this vertical uh",
    "start": "1968559",
    "end": "1977440"
  },
  {
    "text": "vertically aligned public protected private style of op languages",
    "start": "1977440",
    "end": "1985200"
  },
  {
    "text": "so uh there are more",
    "start": "1985200",
    "end": "1990559"
  },
  {
    "text": "probably details which i could share but that would be going into probably specific f sharp",
    "start": "1990559",
    "end": "1997679"
  },
  {
    "text": "uh language specific uh uh parts which is not uh intended for this relatively short",
    "start": "1997679",
    "end": "2004080"
  },
  {
    "text": "presentation but uh i should probably add that uh the main advantage we gained from uh",
    "start": "2004080",
    "end": "2009600"
  },
  {
    "start": "2006000",
    "end": "2047000"
  },
  {
    "text": "f sharp and from switching to functional programming is that it has shortened the site on propagation",
    "start": "2009600",
    "end": "2015200"
  },
  {
    "text": "to production so we really uh deliver features um",
    "start": "2015200",
    "end": "2023200"
  },
  {
    "text": "quicker we have more compact code we have co code that typically once it",
    "start": "2023200",
    "end": "2029919"
  },
  {
    "text": "compiles it works we still have a lot of tests unit tests but i see that the the number of unit tests",
    "start": "2029919",
    "end": "2036720"
  },
  {
    "text": "failing it introduced uh drastically after we have switched to functional uh",
    "start": "2036720",
    "end": "2042960"
  },
  {
    "text": "programming so uh with that uh i think i'm done with the",
    "start": "2042960",
    "end": "2051599"
  },
  {
    "start": "2047000",
    "end": "2068000"
  },
  {
    "text": "main part of my presentation",
    "start": "2051599",
    "end": "2061839"
  },
  {
    "text": "you",
    "start": "2067040",
    "end": "2069119"
  }
]