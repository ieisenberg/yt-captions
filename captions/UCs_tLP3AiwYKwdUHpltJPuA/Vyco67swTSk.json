[
  {
    "text": "[Applause]",
    "start": "7810",
    "end": "12360"
  },
  {
    "text": "let's imagine a clean data set where",
    "start": "12360",
    "end": "16000"
  },
  {
    "text": "there's no missing data no duplicate",
    "start": "16000",
    "end": "18480"
  },
  {
    "text": "records and definitely um no",
    "start": "18480",
    "end": "22560"
  },
  {
    "text": "corruption you're imagining a unicorn",
    "start": "22560",
    "end": "25680"
  },
  {
    "text": "data sets like that only exist in",
    "start": "25680",
    "end": "28160"
  },
  {
    "text": "fiction in this talk I'm going to talk",
    "start": "28160",
    "end": "30679"
  },
  {
    "text": "about how we implemented um the PC",
    "start": "30679",
    "end": "32719"
  },
  {
    "text": "algorithm for finding duplicates at",
    "start": "32719",
    "end": "34640"
  },
  {
    "text": "scale using aache",
    "start": "34640",
    "end": "36879"
  },
  {
    "text": "spark I'm Huen Wilson I'm a senior",
    "start": "36879",
    "end": "39600"
  },
  {
    "text": "software engineer at csro data 61",
    "start": "39600",
    "end": "42840"
  },
  {
    "text": "working on the um Stell graph graph",
    "start": "42840",
    "end": "45160"
  },
  {
    "text": "analytics",
    "start": "45160",
    "end": "47000"
  },
  {
    "text": "team we've been working on Pig and",
    "start": "47000",
    "end": "49640"
  },
  {
    "text": "entity resolution and other graph",
    "start": "49640",
    "end": "51280"
  },
  {
    "text": "related",
    "start": "51280",
    "end": "52960"
  },
  {
    "text": "algorithms so first I'm going to make",
    "start": "52960",
    "end": "55039"
  },
  {
    "text": "sure we're all on the same page and",
    "start": "55039",
    "end": "57120"
  },
  {
    "text": "using the same terminology I'll talk",
    "start": "57120",
    "end": "59440"
  },
  {
    "text": "about what is entity",
    "start": "59440",
    "end": "61359"
  },
  {
    "text": "resolution then I'll talk about the pig",
    "start": "61359",
    "end": "64198"
  },
  {
    "text": "algorithm and finally for those familiar",
    "start": "64199",
    "end": "66600"
  },
  {
    "text": "with our Apache spark I'll talk about",
    "start": "66600",
    "end": "68759"
  },
  {
    "text": "what we learned when implementing it",
    "start": "68759",
    "end": "70600"
  },
  {
    "text": "using Apache",
    "start": "70600",
    "end": "73200"
  },
  {
    "text": "spark so first things first maybe you",
    "start": "73200",
    "end": "77040"
  },
  {
    "text": "haven't heard of entity",
    "start": "77040",
    "end": "78479"
  },
  {
    "text": "resolution what is",
    "start": "78479",
    "end": "81159"
  },
  {
    "text": "it entity resolution is matching records",
    "start": "81159",
    "end": "84720"
  },
  {
    "text": "so we might have two data sets which",
    "start": "84720",
    "end": "86920"
  },
  {
    "text": "each represent um different attributes",
    "start": "86920",
    "end": "89560"
  },
  {
    "text": "of about certain entities like people or",
    "start": "89560",
    "end": "93280"
  },
  {
    "text": "businesses and we want to merge those",
    "start": "93280",
    "end": "95320"
  },
  {
    "text": "two data sets into one unified one where",
    "start": "95320",
    "end": "98560"
  },
  {
    "text": "we've got a single record for each of",
    "start": "98560",
    "end": "100119"
  },
  {
    "text": "those entities that combines the",
    "start": "100119",
    "end": "101840"
  },
  {
    "text": "attributes from those two data",
    "start": "101840",
    "end": "104719"
  },
  {
    "text": "sets or we might have a single um large",
    "start": "104719",
    "end": "109040"
  },
  {
    "text": "data set where we",
    "start": "109040",
    "end": "112560"
  },
  {
    "text": "um uh have dirty or corrupted duplicate",
    "start": "112560",
    "end": "116560"
  },
  {
    "text": "records and these um duplicate records",
    "start": "116560",
    "end": "119640"
  },
  {
    "text": "need need to be either deleted or we",
    "start": "119640",
    "end": "121600"
  },
  {
    "text": "need to create a new data set where",
    "start": "121600",
    "end": "122960"
  },
  {
    "text": "we've merged those",
    "start": "122960",
    "end": "125840"
  },
  {
    "text": "duplicates ironically given entity",
    "start": "126799",
    "end": "129080"
  },
  {
    "text": "resolution is talking about duplicates",
    "start": "129080",
    "end": "131000"
  },
  {
    "text": "there's many different names for it",
    "start": "131000",
    "end": "132920"
  },
  {
    "text": "maybe you've heard of D duplication or",
    "start": "132920",
    "end": "134879"
  },
  {
    "text": "record linkage I put six names here but",
    "start": "134879",
    "end": "137480"
  },
  {
    "text": "this paper mentions 17 different",
    "start": "137480",
    "end": "142400"
  },
  {
    "text": "ones throughout this talk I'm going to",
    "start": "145040",
    "end": "146959"
  },
  {
    "text": "talk about a specific example data set",
    "start": "146959",
    "end": "149440"
  },
  {
    "text": "so made up five people um uh five",
    "start": "149440",
    "end": "154000"
  },
  {
    "text": "records I should say where there's a",
    "start": "154000",
    "end": "155599"
  },
  {
    "text": "name an address and a phone number in",
    "start": "155599",
    "end": "158680"
  },
  {
    "text": "the best case our data sets would have",
    "start": "158680",
    "end": "160920"
  },
  {
    "text": "some sort of unique identifier like a",
    "start": "160920",
    "end": "163000"
  },
  {
    "text": "driver's license number for people or a",
    "start": "163000",
    "end": "165560"
  },
  {
    "text": "business number for",
    "start": "165560",
    "end": "167760"
  },
  {
    "text": "businesses but that's too much to hope",
    "start": "167760",
    "end": "169959"
  },
  {
    "text": "for",
    "start": "169959",
    "end": "170800"
  },
  {
    "text": "usually um so for this one there's no",
    "start": "170800",
    "end": "173800"
  },
  {
    "text": "such thing we have uh",
    "start": "173800",
    "end": "178120"
  },
  {
    "text": "um uh we have three different uh people",
    "start": "178120",
    "end": "181519"
  },
  {
    "text": "here a human could probably guess that",
    "start": "181519",
    "end": "183840"
  },
  {
    "text": "we have um Min Tran twice and Mary",
    "start": "183840",
    "end": "187319"
  },
  {
    "text": "Taylor twice but all of these records",
    "start": "187319",
    "end": "189680"
  },
  {
    "text": "are slightly",
    "start": "189680",
    "end": "190799"
  },
  {
    "text": "different for example there's missing",
    "start": "190799",
    "end": "194200"
  },
  {
    "text": "data there's records that is completely",
    "start": "194200",
    "end": "196640"
  },
  {
    "text": "missing a field as well as missing",
    "start": "196640",
    "end": "198920"
  },
  {
    "text": "components within a field so we're",
    "start": "198920",
    "end": "200760"
  },
  {
    "text": "missing a suburb",
    "start": "200760",
    "end": "203040"
  },
  {
    "text": "here there's also typos or Corruptions",
    "start": "203040",
    "end": "206200"
  },
  {
    "text": "so minran has lost the diacritics on her",
    "start": "206200",
    "end": "208879"
  },
  {
    "text": "a",
    "start": "208879",
    "end": "210280"
  },
  {
    "text": "and um the suburb has been",
    "start": "210280",
    "end": "213519"
  },
  {
    "text": "misspelled and of course there's",
    "start": "213519",
    "end": "216200"
  },
  {
    "text": "abbreviations and initialisms so Mary",
    "start": "216200",
    "end": "218760"
  },
  {
    "text": "Taylor has become M Taylor Road has",
    "start": "218760",
    "end": "221599"
  },
  {
    "text": "become Rd and some of the phone numbers",
    "start": "221599",
    "end": "224000"
  },
  {
    "text": "don't list the country",
    "start": "224000",
    "end": "226200"
  },
  {
    "text": "code entity resolution is taking these",
    "start": "226200",
    "end": "229319"
  },
  {
    "text": "five records and resolving them down to",
    "start": "229319",
    "end": "232000"
  },
  {
    "text": "the three people that they",
    "start": "232000",
    "end": "235200"
  },
  {
    "text": "represent if we have some way to score",
    "start": "235519",
    "end": "238120"
  },
  {
    "text": "or test where the two records with the",
    "start": "238120",
    "end": "240480"
  },
  {
    "text": "same people we um we would be able to do",
    "start": "240480",
    "end": "244000"
  },
  {
    "text": "a naive approach so we could take um the",
    "start": "244000",
    "end": "247360"
  },
  {
    "text": "first record compare it with all the",
    "start": "247360",
    "end": "249640"
  },
  {
    "text": "other ones our scoring function make our",
    "start": "249640",
    "end": "251680"
  },
  {
    "text": "scoring function might give us a number",
    "start": "251680",
    "end": "253760"
  },
  {
    "text": "between zero and one say the jackard",
    "start": "253760",
    "end": "256000"
  },
  {
    "text": "similarity using the record within the",
    "start": "256000",
    "end": "257440"
  },
  {
    "text": "data I've just made up some hypothetical",
    "start": "257440",
    "end": "259680"
  },
  {
    "text": "scores here but you can see that we've",
    "start": "259680",
    "end": "261600"
  },
  {
    "text": "sort of associated a score for the",
    "start": "261600",
    "end": "263199"
  },
  {
    "text": "similarity with that first record to all",
    "start": "263199",
    "end": "265600"
  },
  {
    "text": "of the other",
    "start": "265600",
    "end": "267479"
  },
  {
    "text": "four next We compare the next record",
    "start": "267479",
    "end": "270680"
  },
  {
    "text": "with the remaining with the three after",
    "start": "270680",
    "end": "272280"
  },
  {
    "text": "it this is a nice optimization because",
    "start": "272280",
    "end": "275199"
  },
  {
    "text": "we don't have to compare with the first",
    "start": "275199",
    "end": "276639"
  },
  {
    "text": "one we've already compared with",
    "start": "276639",
    "end": "278759"
  },
  {
    "text": "it and so on and so forth we compare",
    "start": "278759",
    "end": "281479"
  },
  {
    "text": "each record with the ones later for",
    "start": "281479",
    "end": "284199"
  },
  {
    "text": "these five records this is pretty easy",
    "start": "284199",
    "end": "286400"
  },
  {
    "text": "it's only 10 comparisons not too bad",
    "start": "286400",
    "end": "289280"
  },
  {
    "text": "however as the title of the slide",
    "start": "289280",
    "end": "291080"
  },
  {
    "text": "suggests this naive naive approach is um",
    "start": "291080",
    "end": "295639"
  },
  {
    "text": "scales quadratically for 100 records we",
    "start": "295639",
    "end": "298560"
  },
  {
    "text": "have to do 5,000 comparisons for a",
    "start": "298560",
    "end": "301120"
  },
  {
    "text": "million records we have to do 500",
    "start": "301120",
    "end": "303560"
  },
  {
    "text": "billion",
    "start": "303560",
    "end": "304880"
  },
  {
    "text": "comparisons this is not",
    "start": "304880",
    "end": "308759"
  },
  {
    "text": "scalable so we've seen What entity",
    "start": "308800",
    "end": "311120"
  },
  {
    "text": "resolution is and why it might be hard",
    "start": "311120",
    "end": "314080"
  },
  {
    "text": "now what does this pig algorithm I keep",
    "start": "314080",
    "end": "315800"
  },
  {
    "text": "mentioning it's a way of dividing up our",
    "start": "315800",
    "end": "318039"
  },
  {
    "text": "data so that we don't get a quadratic",
    "start": "318039",
    "end": "320479"
  },
  {
    "text": "explosion in the number of comparisons",
    "start": "320479",
    "end": "322160"
  },
  {
    "text": "that we have to",
    "start": "322160",
    "end": "324199"
  },
  {
    "text": "do so the first step is we start with",
    "start": "324199",
    "end": "326880"
  },
  {
    "text": "our original data unsurprising and then",
    "start": "326880",
    "end": "329319"
  },
  {
    "text": "we compute a series of small sets of",
    "start": "329319",
    "end": "331639"
  },
  {
    "text": "Records called micro blocks within those",
    "start": "331639",
    "end": "334880"
  },
  {
    "text": "blocks we we link up the data and we",
    "start": "334880",
    "end": "337560"
  },
  {
    "text": "hope that those links will only be",
    "start": "337560",
    "end": "339400"
  },
  {
    "text": "between records that um might be the",
    "start": "339400",
    "end": "342479"
  },
  {
    "text": "same entity and not between records that",
    "start": "342479",
    "end": "344960"
  },
  {
    "text": "are probably different entities or",
    "start": "344960",
    "end": "347000"
  },
  {
    "text": "obviously different entities once we've",
    "start": "347000",
    "end": "349600"
  },
  {
    "text": "created these links we can then score or",
    "start": "349600",
    "end": "352199"
  },
  {
    "text": "verify them to create a graph a network",
    "start": "352199",
    "end": "354840"
  },
  {
    "text": "of um our records and then the links",
    "start": "354840",
    "end": "356720"
  },
  {
    "text": "between them with weights for the scores",
    "start": "356720",
    "end": "361080"
  },
  {
    "text": "the um this entity resolution algorithm",
    "start": "361080",
    "end": "363440"
  },
  {
    "text": "was created and published by just let me",
    "start": "363440",
    "end": "365560"
  },
  {
    "text": "check my notes the Australian",
    "start": "365560",
    "end": "367440"
  },
  {
    "text": "transactions reports and Analysis Center",
    "start": "367440",
    "end": "370000"
  },
  {
    "text": "or o Trak as a more reasonable way to",
    "start": "370000",
    "end": "371960"
  },
  {
    "text": "say it um which is a Australian",
    "start": "371960",
    "end": "374759"
  },
  {
    "text": "government agency that uh works with uh",
    "start": "374759",
    "end": "377840"
  },
  {
    "text": "money laundering and other illegal",
    "start": "377840",
    "end": "379440"
  },
  {
    "text": "Financial",
    "start": "379440",
    "end": "380400"
  },
  {
    "text": "transactions the name Pig come from",
    "start": "380400",
    "end": "383280"
  },
  {
    "text": "comes from this paper where they call it",
    "start": "383280",
    "end": "385560"
  },
  {
    "text": "probabilistic signatures P",
    "start": "385560",
    "end": "388400"
  },
  {
    "text": "Sig",
    "start": "388400",
    "end": "391000"
  },
  {
    "text": "how does Micro blocking work well we",
    "start": "391000",
    "end": "393080"
  },
  {
    "text": "have a series of of candidate signatures",
    "start": "393080",
    "end": "396039"
  },
  {
    "text": "which we generate from the",
    "start": "396039",
    "end": "397680"
  },
  {
    "text": "data um each of those candidate",
    "start": "397680",
    "end": "399720"
  },
  {
    "text": "signatures is like a scattergun attempt",
    "start": "399720",
    "end": "401720"
  },
  {
    "text": "to Hash or summarize some identifying",
    "start": "401720",
    "end": "404639"
  },
  {
    "text": "information out of the data set um so",
    "start": "404639",
    "end": "408440"
  },
  {
    "text": "for this uh each each of those uh",
    "start": "408440",
    "end": "411840"
  },
  {
    "text": "signatures has to be chosen per data set",
    "start": "411840",
    "end": "414360"
  },
  {
    "text": "and for this one maybe we've chosen to",
    "start": "414360",
    "end": "416120"
  },
  {
    "text": "use the initials plus words from the",
    "start": "416120",
    "end": "418680"
  },
  {
    "text": "address so for Mary Taylor here we get",
    "start": "418680",
    "end": "422319"
  },
  {
    "text": "mt66 as one candidate signature and we",
    "start": "422319",
    "end": "425360"
  },
  {
    "text": "get Mt egist as another one and so on",
    "start": "425360",
    "end": "427639"
  },
  {
    "text": "for each of the words in the",
    "start": "427639",
    "end": "429240"
  },
  {
    "text": "address it's typically good to use",
    "start": "429240",
    "end": "431319"
  },
  {
    "text": "multiple candidate signatures because it",
    "start": "431319",
    "end": "433319"
  },
  {
    "text": "is a scatter gun approach and so we",
    "start": "433319",
    "end": "436000"
  },
  {
    "text": "might also pair the last name with words",
    "start": "436000",
    "end": "438240"
  },
  {
    "text": "from the",
    "start": "438240",
    "end": "439240"
  },
  {
    "text": "address this gives us Taylor 66 and",
    "start": "439240",
    "end": "442720"
  },
  {
    "text": "Taylor Egon and so",
    "start": "442720",
    "end": "446520"
  },
  {
    "text": "on um we do this for all of records so",
    "start": "446639",
    "end": "450680"
  },
  {
    "text": "for Michael Taylor we'll get mt66 again",
    "start": "450680",
    "end": "454199"
  },
  {
    "text": "and Taylor 66 also again but we'll get",
    "start": "454199",
    "end": "457039"
  },
  {
    "text": "different information like mt",
    "start": "457039",
    "end": "460599"
  },
  {
    "text": "Hayfield once we've done this for every",
    "start": "461879",
    "end": "464000"
  },
  {
    "text": "record we create a reverse index or the",
    "start": "464000",
    "end": "466440"
  },
  {
    "text": "set of records that generate each",
    "start": "466440",
    "end": "468560"
  },
  {
    "text": "candidate signature so for mt66 we see",
    "start": "468560",
    "end": "472159"
  },
  {
    "text": "that records 1 2 three and",
    "start": "472159",
    "end": "474879"
  },
  {
    "text": "five were the ones that correspond to it",
    "start": "474879",
    "end": "477800"
  },
  {
    "text": "the initials plus the words from the the",
    "start": "477800",
    "end": "480919"
  },
  {
    "text": "address for other signatures it will be",
    "start": "480919",
    "end": "483440"
  },
  {
    "text": "different so for Mt aiston we have two",
    "start": "483440",
    "end": "486319"
  },
  {
    "text": "and",
    "start": "486319",
    "end": "488639"
  },
  {
    "text": "five once we've created all of these",
    "start": "489720",
    "end": "492159"
  },
  {
    "text": "reverse",
    "start": "492159",
    "end": "493280"
  },
  {
    "text": "indices we can then put them into a",
    "start": "493280",
    "end": "495440"
  },
  {
    "text": "table where we have the candidate",
    "start": "495440",
    "end": "497120"
  },
  {
    "text": "signature on one column and the IDS in",
    "start": "497120",
    "end": "500879"
  },
  {
    "text": "another column the sets of IDs I should",
    "start": "500879",
    "end": "503400"
  },
  {
    "text": "say in another column this is the KE",
    "start": "503400",
    "end": "506400"
  },
  {
    "text": "step that will connect records um",
    "start": "506400",
    "end": "509800"
  },
  {
    "text": "try and find the true",
    "start": "509800",
    "end": "511800"
  },
  {
    "text": "entities um and hopefully when two",
    "start": "511800",
    "end": "515680"
  },
  {
    "text": "records correspond to the same true",
    "start": "515680",
    "end": "517240"
  },
  {
    "text": "entities like the two for minran they",
    "start": "517240",
    "end": "520000"
  },
  {
    "text": "will exist in the same",
    "start": "520000",
    "end": "523240"
  },
  {
    "text": "block um",
    "start": "523240",
    "end": "525920"
  },
  {
    "text": "however I'm sure you could guess that",
    "start": "525920",
    "end": "527880"
  },
  {
    "text": "there's going to be some of these",
    "start": "527880",
    "end": "528880"
  },
  {
    "text": "candidate signatures that are really",
    "start": "528880",
    "end": "530399"
  },
  {
    "text": "common there's probably going to be a",
    "start": "530399",
    "end": "532160"
  },
  {
    "text": "lot of people who live in New South",
    "start": "532160",
    "end": "534000"
  },
  {
    "text": "Wales with the last name Smith so Smith",
    "start": "534000",
    "end": "537040"
  },
  {
    "text": "New South Wales as a candidate signature",
    "start": "537040",
    "end": "539920"
  },
  {
    "text": "is going to have potentially millions of",
    "start": "539920",
    "end": "542920"
  },
  {
    "text": "Records Pig models this um uninformative",
    "start": "542920",
    "end": "546920"
  },
  {
    "text": "nature of some signatures by putting an",
    "start": "546920",
    "end": "548680"
  },
  {
    "text": "upper bound on the size of the",
    "start": "548680",
    "end": "550800"
  },
  {
    "text": "sets that upper bound has to be chosen",
    "start": "550800",
    "end": "553079"
  },
  {
    "text": "on a per data set basis but typically",
    "start": "553079",
    "end": "555519"
  },
  {
    "text": "small values work well maybe we've done",
    "start": "555519",
    "end": "558120"
  },
  {
    "text": "some data science to determine that four",
    "start": "558120",
    "end": "560480"
  },
  {
    "text": "is a good upper bound and so we",
    "start": "560480",
    "end": "562560"
  },
  {
    "text": "eliminate um sets that are of size four",
    "start": "562560",
    "end": "565480"
  },
  {
    "text": "or larger in this case",
    "start": "565480",
    "end": "568120"
  },
  {
    "text": "mt66",
    "start": "568120",
    "end": "570560"
  },
  {
    "text": "if you're familiar with other entity",
    "start": "570560",
    "end": "571959"
  },
  {
    "text": "resolution techniques you might notice",
    "start": "571959",
    "end": "574279"
  },
  {
    "text": "that this differs to St so-called",
    "start": "574279",
    "end": "576240"
  },
  {
    "text": "standard blocking because um uh standard",
    "start": "576240",
    "end": "580160"
  },
  {
    "text": "blocking only has one block per record",
    "start": "580160",
    "end": "582360"
  },
  {
    "text": "whereas Pig allows a record to be in",
    "start": "582360",
    "end": "584480"
  },
  {
    "text": "multiple blocks all of these blocks here",
    "start": "584480",
    "end": "586680"
  },
  {
    "text": "have two and five in",
    "start": "586680",
    "end": "588320"
  },
  {
    "text": "them um those standard blocking",
    "start": "588320",
    "end": "590800"
  },
  {
    "text": "techniques are forced to use fewer",
    "start": "590800",
    "end": "592320"
  },
  {
    "text": "larger blocks because they need to",
    "start": "592320",
    "end": "593760"
  },
  {
    "text": "optimize for recall whereas P can",
    "start": "593760",
    "end": "596200"
  },
  {
    "text": "optimize for precision and have many",
    "start": "596200",
    "end": "598040"
  },
  {
    "text": "small blocks",
    "start": "598040",
    "end": "601120"
  },
  {
    "text": "um and then because we can put uh a",
    "start": "601760",
    "end": "605200"
  },
  {
    "text": "record into multiple blocks this helps",
    "start": "605200",
    "end": "607160"
  },
  {
    "text": "raise our",
    "start": "607160",
    "end": "609600"
  },
  {
    "text": "recall remember how we had to do 10",
    "start": "610120",
    "end": "612200"
  },
  {
    "text": "comparisons before now we only need to",
    "start": "612200",
    "end": "615160"
  },
  {
    "text": "do three by just comparing the records",
    "start": "615160",
    "end": "618040"
  },
  {
    "text": "within each block so we can compare two",
    "start": "618040",
    "end": "620760"
  },
  {
    "text": "and three two and five and then three",
    "start": "620760",
    "end": "624120"
  },
  {
    "text": "and five we don't have to do the",
    "start": "624120",
    "end": "626399"
  },
  {
    "text": "duplicate comparisons for the records",
    "start": "626399",
    "end": "628000"
  },
  {
    "text": "that are in are paired in multiple",
    "start": "628000",
    "end": "630560"
  },
  {
    "text": "blocks going from 10 to three is a huge",
    "start": "630560",
    "end": "633120"
  },
  {
    "text": "saving and on bigger data sets it will",
    "start": "633120",
    "end": "635120"
  },
  {
    "text": "be an even bigger",
    "start": "635120",
    "end": "638040"
  },
  {
    "text": "saving finally let's suppose we've used",
    "start": "638360",
    "end": "641320"
  },
  {
    "text": "the phone number to do some additional",
    "start": "641320",
    "end": "642720"
  },
  {
    "text": "blocking that's linked the two records",
    "start": "642720",
    "end": "644680"
  },
  {
    "text": "for",
    "start": "644680",
    "end": "646200"
  },
  {
    "text": "menr so we've now got a um a larger set",
    "start": "646200",
    "end": "651240"
  },
  {
    "text": "of potential uh of candidate signatures",
    "start": "651240",
    "end": "653880"
  },
  {
    "text": "in that the associated sets and then we",
    "start": "653880",
    "end": "656600"
  },
  {
    "text": "can put that all into a graph when when",
    "start": "656600",
    "end": "659079"
  },
  {
    "text": "we do the comparisons along the links we",
    "start": "659079",
    "end": "661880"
  },
  {
    "text": "can associate the score to that link so",
    "start": "661880",
    "end": "666240"
  },
  {
    "text": "for the the previous side where we had",
    "start": "666240",
    "end": "667800"
  },
  {
    "text": "the three comparisons we've got this top",
    "start": "667800",
    "end": "670240"
  },
  {
    "text": "set of um three records where we've got",
    "start": "670240",
    "end": "673839"
  },
  {
    "text": "Mary Taylor twice and Michael Taylor and",
    "start": "673839",
    "end": "676200"
  },
  {
    "text": "then the scores associated with",
    "start": "676200",
    "end": "679880"
  },
  {
    "text": "them once we've got this graph we can",
    "start": "679880",
    "end": "682240"
  },
  {
    "text": "then process it into our set of true",
    "start": "682240",
    "end": "685200"
  },
  {
    "text": "entities and so one simple but effective",
    "start": "685200",
    "end": "687760"
  },
  {
    "text": "approach is to choose some threshold for",
    "start": "687760",
    "end": "690240"
  },
  {
    "text": "the score delete the edges that are",
    "start": "690240",
    "end": "692240"
  },
  {
    "text": "lower scoring and then compute the",
    "start": "692240",
    "end": "694160"
  },
  {
    "text": "connected components so again the",
    "start": "694160",
    "end": "696680"
  },
  {
    "text": "threshold is something that has to be",
    "start": "696680",
    "end": "697800"
  },
  {
    "text": "chosen per data set and maybe we've done",
    "start": "697800",
    "end": "701160"
  },
  {
    "text": "data science to work out that 0.5 is a",
    "start": "701160",
    "end": "703200"
  },
  {
    "text": "good threshold so we delete the lower",
    "start": "703200",
    "end": "706000"
  },
  {
    "text": "scoring edges and we're left with three",
    "start": "706000",
    "end": "708720"
  },
  {
    "text": "connected components we've got one for",
    "start": "708720",
    "end": "710320"
  },
  {
    "text": "Mary Taylor one for Michael Taylor and",
    "start": "710320",
    "end": "713160"
  },
  {
    "text": "one from",
    "start": "713160",
    "end": "714560"
  },
  {
    "text": "intran we've now correctly identified",
    "start": "714560",
    "end": "717480"
  },
  {
    "text": "our three people at out of our five",
    "start": "717480",
    "end": "720079"
  },
  {
    "text": "records and depending on what we want to",
    "start": "720079",
    "end": "722720"
  },
  {
    "text": "do for our data set we can either merge",
    "start": "722720",
    "end": "724920"
  },
  {
    "text": "them into single records or delete the",
    "start": "724920",
    "end": "729839"
  },
  {
    "text": "duplicates that's the pic algorithm it",
    "start": "731839",
    "end": "734360"
  },
  {
    "text": "will use candidate signatures to compute",
    "start": "734360",
    "end": "736680"
  },
  {
    "text": "a series of potential micro blocks and",
    "start": "736680",
    "end": "739000"
  },
  {
    "text": "then score within them to create a",
    "start": "739000",
    "end": "740320"
  },
  {
    "text": "linked record graph which we can process",
    "start": "740320",
    "end": "742120"
  },
  {
    "text": "into our",
    "start": "742120",
    "end": "743079"
  },
  {
    "text": "entities now for those who are familiar",
    "start": "743079",
    "end": "745800"
  },
  {
    "text": "with",
    "start": "745800",
    "end": "746560"
  },
  {
    "text": "spark um we use it to implement PC and",
    "start": "746560",
    "end": "750240"
  },
  {
    "text": "what did we learn for large data sets",
    "start": "750240",
    "end": "753720"
  },
  {
    "text": "obviously uh processing on a single",
    "start": "753720",
    "end": "755639"
  },
  {
    "text": "machine can take a long time so using a",
    "start": "755639",
    "end": "757320"
  },
  {
    "text": "cluster can be beneficial and for on the",
    "start": "757320",
    "end": "760480"
  },
  {
    "text": "stel graph team we've been using spark",
    "start": "760480",
    "end": "762760"
  },
  {
    "text": "for a variety of graph analytics and",
    "start": "762760",
    "end": "764880"
  },
  {
    "text": "deep learning",
    "start": "764880",
    "end": "766519"
  },
  {
    "text": "tasks we use P we use spark for pig as",
    "start": "766519",
    "end": "770320"
  },
  {
    "text": "well to try and um integrate with",
    "start": "770320",
    "end": "775040"
  },
  {
    "text": "those the first thing that's been said",
    "start": "775040",
    "end": "777680"
  },
  {
    "text": "before and should be said again is that",
    "start": "777680",
    "end": "780360"
  },
  {
    "text": "data frames are usually better than",
    "start": "780360",
    "end": "781880"
  },
  {
    "text": "resilient distributed data sets or",
    "start": "781880",
    "end": "784320"
  },
  {
    "text": "rdds this is true for pig as well we",
    "start": "784320",
    "end": "787680"
  },
  {
    "text": "first implemented Pig using rdds which",
    "start": "787680",
    "end": "790639"
  },
  {
    "text": "is the old spark form uh for",
    "start": "790639",
    "end": "793000"
  },
  {
    "text": "representing data and then we migrated",
    "start": "793000",
    "end": "795880"
  },
  {
    "text": "to data frames when we did that",
    "start": "795880",
    "end": "798360"
  },
  {
    "text": "migration we we recorded some benchmarks",
    "start": "798360",
    "end": "801720"
  },
  {
    "text": "so we've got the the first row we had 10",
    "start": "801720",
    "end": "804399"
  },
  {
    "text": "million records in our synthetic data",
    "start": "804399",
    "end": "807000"
  },
  {
    "text": "set the pig with data frames ran four",
    "start": "807000",
    "end": "810519"
  },
  {
    "text": "times faster than the PC with",
    "start": "810519",
    "end": "813480"
  },
  {
    "text": "RS next we tried with 50 million records",
    "start": "813480",
    "end": "816880"
  },
  {
    "text": "on our moderate size cluster and we",
    "start": "816880",
    "end": "819079"
  },
  {
    "text": "found that the id id code was still",
    "start": "819079",
    "end": "821360"
  },
  {
    "text": "running after 8 hours we got bored and",
    "start": "821360",
    "end": "824079"
  },
  {
    "text": "killed it meanwhile the data frame code",
    "start": "824079",
    "end": "827279"
  },
  {
    "text": "took only six and a half minutes so as",
    "start": "827279",
    "end": "829760"
  },
  {
    "text": "far as we know it's at least 70 times",
    "start": "829760",
    "end": "833519"
  },
  {
    "text": "faster why might that be the case well",
    "start": "835240",
    "end": "839279"
  },
  {
    "text": "um rdds are a distributed list of",
    "start": "839279",
    "end": "842600"
  },
  {
    "text": "self-contained individual Java objects",
    "start": "842600",
    "end": "845759"
  },
  {
    "text": "whereas data frames are a a distributed",
    "start": "845759",
    "end": "848360"
  },
  {
    "text": "table of data",
    "start": "848360",
    "end": "850959"
  },
  {
    "text": "columns these are quite similar to like",
    "start": "850959",
    "end": "853320"
  },
  {
    "text": "a distributed version of a pandas data",
    "start": "853320",
    "end": "855079"
  },
  {
    "text": "frame or an R data",
    "start": "855079",
    "end": "857079"
  },
  {
    "text": "frame this table representation gives",
    "start": "857079",
    "end": "859360"
  },
  {
    "text": "spark much more insight into how the",
    "start": "859360",
    "end": "860959"
  },
  {
    "text": "data is stored and much more control",
    "start": "860959",
    "end": "862759"
  },
  {
    "text": "over it this lets it be more compact",
    "start": "862759",
    "end": "866839"
  },
  {
    "text": "which means lower memory usage and less",
    "start": "866839",
    "end": "869839"
  },
  {
    "text": "garbage collector overhead and that's",
    "start": "869839",
    "end": "871519"
  },
  {
    "text": "really important when you're getting",
    "start": "871519",
    "end": "872480"
  },
  {
    "text": "close to the memory limits of your",
    "start": "872480",
    "end": "874800"
  },
  {
    "text": "cluster additionally spark data frames",
    "start": "874800",
    "end": "878040"
  },
  {
    "text": "come with the so-called Catalyst query",
    "start": "878040",
    "end": "880079"
  },
  {
    "text": "Optimizer this query Optimizer is very",
    "start": "880079",
    "end": "882399"
  },
  {
    "text": "similar to an SQL query Optimizer in a",
    "start": "882399",
    "end": "884759"
  },
  {
    "text": "conventional database like",
    "start": "884759",
    "end": "887079"
  },
  {
    "text": "postgress and it will take a sort of a",
    "start": "887079",
    "end": "890440"
  },
  {
    "text": "bird's eye view of your whole",
    "start": "890440",
    "end": "891639"
  },
  {
    "text": "computational Pipeline and transform it",
    "start": "891639",
    "end": "893600"
  },
  {
    "text": "to run more",
    "start": "893600",
    "end": "894920"
  },
  {
    "text": "efficiently after doing that",
    "start": "894920",
    "end": "896519"
  },
  {
    "text": "optimization it will even then generate",
    "start": "896519",
    "end": "898639"
  },
  {
    "text": "erate specialized Java code for that",
    "start": "898639",
    "end": "902000"
  },
  {
    "text": "particular",
    "start": "902000",
    "end": "904360"
  },
  {
    "text": "query that specialized Java code can",
    "start": "904360",
    "end": "906639"
  },
  {
    "text": "then be like compiled and jittered by",
    "start": "906639",
    "end": "909160"
  },
  {
    "text": "the jbm as per",
    "start": "909160",
    "end": "912240"
  },
  {
    "text": "normal however when we were um doing the",
    "start": "912639",
    "end": "916000"
  },
  {
    "text": "transition we were iterating fast with",
    "start": "916000",
    "end": "918040"
  },
  {
    "text": "small data frames so we had 10,000",
    "start": "918040",
    "end": "920720"
  },
  {
    "text": "records and we're just running on my",
    "start": "920720",
    "end": "921959"
  },
  {
    "text": "laptop in local mode on obviously on a",
    "start": "921959",
    "end": "924600"
  },
  {
    "text": "single machine the default settings um",
    "start": "924600",
    "end": "929519"
  },
  {
    "text": "meant that data frame uh RDS ran in 17",
    "start": "929519",
    "end": "932160"
  },
  {
    "text": "seconds pretty",
    "start": "932160",
    "end": "933759"
  },
  {
    "text": "short but data frames in their default",
    "start": "933759",
    "end": "936199"
  },
  {
    "text": "settings took 80 Seconds that's more",
    "start": "936199",
    "end": "938199"
  },
  {
    "text": "than four times slower what's going on",
    "start": "938199",
    "end": "941560"
  },
  {
    "text": "the explanation is that the number of",
    "start": "941560",
    "end": "943680"
  },
  {
    "text": "partitions for data frames defaults to",
    "start": "943680",
    "end": "946000"
  },
  {
    "text": "200 so data frames are being split",
    "start": "946000",
    "end": "948440"
  },
  {
    "text": "across 200 little segments this is a lot",
    "start": "948440",
    "end": "952000"
  },
  {
    "text": "of overhead spark typically recommends",
    "start": "952000",
    "end": "954759"
  },
  {
    "text": "using about three times the number of",
    "start": "954759",
    "end": "956199"
  },
  {
    "text": "cores so that's 3 * 12 for my laptop 36",
    "start": "956199",
    "end": "959360"
  },
  {
    "text": "much smaller than",
    "start": "959360",
    "end": "961639"
  },
  {
    "text": "200 data frames default to a more",
    "start": "961639",
    "end": "963880"
  },
  {
    "text": "reasonable 12 it's not perfect but it's",
    "start": "963880",
    "end": "966680"
  },
  {
    "text": "smaller and means less",
    "start": "966680",
    "end": "969800"
  },
  {
    "text": "overhead however even when we fix that",
    "start": "969800",
    "end": "972560"
  },
  {
    "text": "using the the appropriate spark default",
    "start": "972560",
    "end": "974959"
  },
  {
    "text": "parallelism and Spark SQL shuffles",
    "start": "974959",
    "end": "977720"
  },
  {
    "text": "partitions um spark",
    "start": "977720",
    "end": "980240"
  },
  {
    "text": "configurations um to make it match rdds",
    "start": "980240",
    "end": "982839"
  },
  {
    "text": "so we Ed 12 for both of them the data",
    "start": "982839",
    "end": "985279"
  },
  {
    "text": "frame code took 20 seconds still slower",
    "start": "985279",
    "end": "987480"
  },
  {
    "text": "than the rdds what's going",
    "start": "987480",
    "end": "989560"
  },
  {
    "text": "on well what's going on is the optimizer",
    "start": "989560",
    "end": "994000"
  },
  {
    "text": "is a like a big fixed overhead and it's",
    "start": "994000",
    "end": "996600"
  },
  {
    "text": "using a non-trivial amount of time but",
    "start": "996600",
    "end": "999440"
  },
  {
    "text": "to confirm this let's look at a",
    "start": "999440",
    "end": "1001800"
  },
  {
    "text": "profile so a profile is like a recording",
    "start": "1001800",
    "end": "1004759"
  },
  {
    "text": "of your um of your code as it runs and",
    "start": "1004759",
    "end": "1007440"
  },
  {
    "text": "you can get insight into the performance",
    "start": "1007440",
    "end": "1009839"
  },
  {
    "text": "in this case we represent our profile as",
    "start": "1009839",
    "end": "1011639"
  },
  {
    "text": "a flame",
    "start": "1011639",
    "end": "1013160"
  },
  {
    "text": "graph and a flame graph is represents",
    "start": "1013160",
    "end": "1016920"
  },
  {
    "text": "the call stack of your functions from",
    "start": "1016920",
    "end": "1018720"
  },
  {
    "text": "bottom to top so you got main on the on",
    "start": "1018720",
    "end": "1021040"
  },
  {
    "text": "the bottom and then everything it calls",
    "start": "1021040",
    "end": "1022519"
  },
  {
    "text": "going up and the the um x-axis the width",
    "start": "1022519",
    "end": "1027520"
  },
  {
    "text": "is proportional to the amount of",
    "start": "1027520",
    "end": "1028918"
  },
  {
    "text": "resources it uses in in this case that's",
    "start": "1028919",
    "end": "1032240"
  },
  {
    "text": "CPU time and so on the left we've got a",
    "start": "1032240",
    "end": "1036959"
  },
  {
    "text": "lot of uh green red and blue code that's",
    "start": "1036959",
    "end": "1040959"
  },
  {
    "text": "uh Java and Scara code and that's our",
    "start": "1040959",
    "end": "1043240"
  },
  {
    "text": "spark application that's how useful Co",
    "start": "1043240",
    "end": "1045360"
  },
  {
    "text": "useful um execution time and so that",
    "start": "1045360",
    "end": "1048640"
  },
  {
    "text": "takes up about half the screen so that's",
    "start": "1048640",
    "end": "1050919"
  },
  {
    "text": "using about half of our CPU time of this",
    "start": "1050919",
    "end": "1053039"
  },
  {
    "text": "run with 10,000 records and 12",
    "start": "1053039",
    "end": "1056640"
  },
  {
    "text": "partitions on the right we've got a lot",
    "start": "1056640",
    "end": "1059080"
  },
  {
    "text": "of yellow code that's C++ and that's",
    "start": "1059080",
    "end": "1061440"
  },
  {
    "text": "typically means that it's within the jvm",
    "start": "1061440",
    "end": "1063400"
  },
  {
    "text": "the Java virtual machine",
    "start": "1063400",
    "end": "1066520"
  },
  {
    "text": "itself um how do we create this we use",
    "start": "1066720",
    "end": "1070080"
  },
  {
    "text": "the async profiler project we tried to",
    "start": "1070080",
    "end": "1072480"
  },
  {
    "text": "look for a spark profile that would work",
    "start": "1072480",
    "end": "1074039"
  },
  {
    "text": "on a cluster but we couldn't find one so",
    "start": "1074039",
    "end": "1076240"
  },
  {
    "text": "we sort of just ran a normal jvm",
    "start": "1076240",
    "end": "1078480"
  },
  {
    "text": "sampling profile which can generate",
    "start": "1078480",
    "end": "1080400"
  },
  {
    "text": "flame graphs like this we'd love to",
    "start": "1080400",
    "end": "1082919"
  },
  {
    "text": "extend it to somehow run on a cluster",
    "start": "1082919",
    "end": "1084760"
  },
  {
    "text": "but that's like much more work than just",
    "start": "1084760",
    "end": "1086760"
  },
  {
    "text": "using it in its normal",
    "start": "1086760",
    "end": "1089919"
  },
  {
    "text": "settings let's zoom in and like confirm",
    "start": "1089919",
    "end": "1092280"
  },
  {
    "text": "our",
    "start": "1092280",
    "end": "1093440"
  },
  {
    "text": "suspicion by looking in that yellow",
    "start": "1093440",
    "end": "1095360"
  },
  {
    "text": "section we see compile compile compiler",
    "start": "1095360",
    "end": "1099880"
  },
  {
    "text": "compile compile compile all of these are",
    "start": "1099880",
    "end": "1101919"
  },
  {
    "text": "referring to the C2 jvm compiler so",
    "start": "1101919",
    "end": "1104760"
  },
  {
    "text": "that's ajus in time compiler that will",
    "start": "1104760",
    "end": "1106520"
  },
  {
    "text": "convert from java bite code into",
    "start": "1106520",
    "end": "1108679"
  },
  {
    "text": "optimize machine code to make it run our",
    "start": "1108679",
    "end": "1110600"
  },
  {
    "text": "code run even",
    "start": "1110600",
    "end": "1111960"
  },
  {
    "text": "faster this is suggesting that",
    "start": "1111960",
    "end": "1114720"
  },
  {
    "text": "compilation maybe does have something to",
    "start": "1114720",
    "end": "1116159"
  },
  {
    "text": "do with W 10,000 record case is",
    "start": "1116159",
    "end": "1120440"
  },
  {
    "text": "slow in fact it's taking about 40% of",
    "start": "1120440",
    "end": "1123120"
  },
  {
    "text": "the total CPU",
    "start": "1123120",
    "end": "1124840"
  },
  {
    "text": "time if we compare that to a bigger data",
    "start": "1124840",
    "end": "1127480"
  },
  {
    "text": "set say a million records using exactly",
    "start": "1127480",
    "end": "1130039"
  },
  {
    "text": "the same program with exactly the same",
    "start": "1130039",
    "end": "1132440"
  },
  {
    "text": "settings just more",
    "start": "1132440",
    "end": "1134600"
  },
  {
    "text": "data we find that that yellow section",
    "start": "1134600",
    "end": "1137280"
  },
  {
    "text": "has shrunk dramatically",
    "start": "1137280",
    "end": "1139039"
  },
  {
    "text": "it's gone down to just 15% of the total",
    "start": "1139039",
    "end": "1142080"
  },
  {
    "text": "execution time suggesting that",
    "start": "1142080",
    "end": "1143679"
  },
  {
    "text": "compilation that Catalyst query",
    "start": "1143679",
    "end": "1145799"
  },
  {
    "text": "dynamically generating Java code um and",
    "start": "1145799",
    "end": "1148799"
  },
  {
    "text": "then that Java code being optimized by",
    "start": "1148799",
    "end": "1150400"
  },
  {
    "text": "the jvm that process is a just a fixed",
    "start": "1150400",
    "end": "1153960"
  },
  {
    "text": "overhead that doesn't that will",
    "start": "1153960",
    "end": "1155440"
  },
  {
    "text": "disappear in our larger data sets this",
    "start": "1155440",
    "end": "1157520"
  },
  {
    "text": "is confirmed by our comparison earlier",
    "start": "1157520",
    "end": "1159200"
  },
  {
    "text": "where we had 10 million and 50 million",
    "start": "1159200",
    "end": "1161240"
  },
  {
    "text": "um",
    "start": "1161240",
    "end": "1163600"
  },
  {
    "text": "records of course profiling is really",
    "start": "1165200",
    "end": "1167799"
  },
  {
    "text": "useful side of spark in the jbm and",
    "start": "1167799",
    "end": "1169720"
  },
  {
    "text": "Flame graphs are as",
    "start": "1169720",
    "end": "1172400"
  },
  {
    "text": "well next we had to think about",
    "start": "1172400",
    "end": "1175720"
  },
  {
    "text": "partitioning and specifically how the",
    "start": "1175720",
    "end": "1178000"
  },
  {
    "text": "data is partitioned not just the number",
    "start": "1178000",
    "end": "1180200"
  },
  {
    "text": "of",
    "start": "1180200",
    "end": "1181440"
  },
  {
    "text": "partitions so when we're doing that",
    "start": "1181440",
    "end": "1183520"
  },
  {
    "text": "scoring step we need to use information",
    "start": "1183520",
    "end": "1185320"
  },
  {
    "text": "from both both ends of each link so we",
    "start": "1185320",
    "end": "1187360"
  },
  {
    "text": "have to compare Mary Taylor with the",
    "start": "1187360",
    "end": "1188760"
  },
  {
    "text": "mtaylor",
    "start": "1188760",
    "end": "1190480"
  },
  {
    "text": "record before we can do this we need to",
    "start": "1190480",
    "end": "1192559"
  },
  {
    "text": "make sure that they're on a single",
    "start": "1192559",
    "end": "1194120"
  },
  {
    "text": "executed machine you can't just compare",
    "start": "1194120",
    "end": "1196520"
  },
  {
    "text": "things you don't know about",
    "start": "1196520",
    "end": "1200240"
  },
  {
    "text": "and that requires a shuffle in some form",
    "start": "1200280",
    "end": "1202799"
  },
  {
    "text": "shuffling data across the network can be",
    "start": "1202799",
    "end": "1204360"
  },
  {
    "text": "very",
    "start": "1204360",
    "end": "1205320"
  },
  {
    "text": "expensive if we could use some sort of",
    "start": "1205320",
    "end": "1207240"
  },
  {
    "text": "better partitioning strategy where we",
    "start": "1207240",
    "end": "1209039"
  },
  {
    "text": "got these connected components all",
    "start": "1209039",
    "end": "1210320"
  },
  {
    "text": "within a single machine",
    "start": "1210320",
    "end": "1212280"
  },
  {
    "text": "automatically we wouldn't have to do as",
    "start": "1212280",
    "end": "1214360"
  },
  {
    "text": "much shuffling and our code can run",
    "start": "1214360",
    "end": "1216200"
  },
  {
    "text": "faster we got a 10% speed up by using a",
    "start": "1216200",
    "end": "1219039"
  },
  {
    "text": "2d Edge partition strategy which is a",
    "start": "1219039",
    "end": "1221840"
  },
  {
    "text": "probabilistic approach that restricts",
    "start": "1221840",
    "end": "1223440"
  },
  {
    "text": "where a link can go and so it increases",
    "start": "1223440",
    "end": "1225880"
  },
  {
    "text": "the chances that the data will be on the",
    "start": "1225880",
    "end": "1228240"
  },
  {
    "text": "right",
    "start": "1228240",
    "end": "1230400"
  },
  {
    "text": "machine so we saw some things we learned",
    "start": "1232200",
    "end": "1235000"
  },
  {
    "text": "when implementing Pig with spark now",
    "start": "1235000",
    "end": "1238159"
  },
  {
    "text": "let's finish",
    "start": "1238159",
    "end": "1239240"
  },
  {
    "text": "up in summary we saw that entity",
    "start": "1239240",
    "end": "1241600"
  },
  {
    "text": "resolution is matching or D duplicating",
    "start": "1241600",
    "end": "1243480"
  },
  {
    "text": "records and that can be hard to do",
    "start": "1243480",
    "end": "1245400"
  },
  {
    "text": "naively next we saw that the pig",
    "start": "1245400",
    "end": "1248000"
  },
  {
    "text": "algorithm will take our original data",
    "start": "1248000",
    "end": "1250480"
  },
  {
    "text": "compute micro blocks and then score",
    "start": "1250480",
    "end": "1252440"
  },
  {
    "text": "within the links um score within those",
    "start": "1252440",
    "end": "1254720"
  },
  {
    "text": "blocks to create a linked record graph",
    "start": "1254720",
    "end": "1257720"
  },
  {
    "text": "and it does do this in a way that",
    "start": "1257720",
    "end": "1258799"
  },
  {
    "text": "hopefully avoids the quadratic overhead",
    "start": "1258799",
    "end": "1261159"
  },
  {
    "text": "explosion in the number of",
    "start": "1261159",
    "end": "1263320"
  },
  {
    "text": "comparisons finally um with spark we saw",
    "start": "1263320",
    "end": "1267000"
  },
  {
    "text": "that data frames were good that",
    "start": "1267000",
    "end": "1268480"
  },
  {
    "text": "profiling was really helpful in",
    "start": "1268480",
    "end": "1269640"
  },
  {
    "text": "diagnosing a performance problem and",
    "start": "1269640",
    "end": "1271720"
  },
  {
    "text": "that partitioning makes our code run",
    "start": "1271720",
    "end": "1275559"
  },
  {
    "text": "faster pig doesn't solve entity",
    "start": "1275559",
    "end": "1278039"
  },
  {
    "text": "resolution there's always more work that",
    "start": "1278039",
    "end": "1279600"
  },
  {
    "text": "can be done we love to make Pig work on",
    "start": "1279600",
    "end": "1282080"
  },
  {
    "text": "live data streams where instead of",
    "start": "1282080",
    "end": "1283960"
  },
  {
    "text": "having to when you get new data instead",
    "start": "1283960",
    "end": "1285559"
  },
  {
    "text": "of having to recompute with the whole",
    "start": "1285559",
    "end": "1287000"
  },
  {
    "text": "data set you can just recompute with the",
    "start": "1287000",
    "end": "1289120"
  },
  {
    "text": "new data or some much smaller grou set",
    "start": "1289120",
    "end": "1291200"
  },
  {
    "text": "of data next remember how we used a very",
    "start": "1291200",
    "end": "1294559"
  },
  {
    "text": "naive strategy of just thresholding and",
    "start": "1294559",
    "end": "1296919"
  },
  {
    "text": "then um looking at Connected components",
    "start": "1296919",
    "end": "1299799"
  },
  {
    "text": "to work out our entities maybe we could",
    "start": "1299799",
    "end": "1301679"
  },
  {
    "text": "do something better about clustering or",
    "start": "1301679",
    "end": "1303279"
  },
  {
    "text": "something for the link record graph",
    "start": "1303279",
    "end": "1306039"
  },
  {
    "text": "finally or thirdly our um our candidate",
    "start": "1306039",
    "end": "1311840"
  },
  {
    "text": "signatures are very manual and we have",
    "start": "1311840",
    "end": "1313679"
  },
  {
    "text": "to think about them uh for each data set",
    "start": "1313679",
    "end": "1317039"
  },
  {
    "text": "it' be great if we could somehow use",
    "start": "1317039",
    "end": "1318279"
  },
  {
    "text": "deep learning to like choose our",
    "start": "1318279",
    "end": "1319960"
  },
  {
    "text": "candidate signatures choose our",
    "start": "1319960",
    "end": "1321320"
  },
  {
    "text": "thresholds and generally do do the whole",
    "start": "1321320",
    "end": "1324240"
  },
  {
    "text": "process now finally um if we had a graph",
    "start": "1324240",
    "end": "1327880"
  },
  {
    "text": "data set where our records are linked to",
    "start": "1327880",
    "end": "1329679"
  },
  {
    "text": "each other maybe we could use that extra",
    "start": "1329679",
    "end": "1332400"
  },
  {
    "text": "information about a neighborhood of a",
    "start": "1332400",
    "end": "1333840"
  },
  {
    "text": "record to somehow improve our entity",
    "start": "1333840",
    "end": "1337919"
  },
  {
    "text": "resolution graphs are particularly",
    "start": "1337919",
    "end": "1339760"
  },
  {
    "text": "interesting to me and my team because",
    "start": "1339760",
    "end": "1341520"
  },
  {
    "text": "we're working on a scalable Network",
    "start": "1341520",
    "end": "1343400"
  },
  {
    "text": "graph analytics platform we've got an",
    "start": "1343400",
    "end": "1345960"
  },
  {
    "text": "open source library on GitHub and and",
    "start": "1345960",
    "end": "1348520"
  },
  {
    "text": "we're hiring for a senior software",
    "start": "1348520",
    "end": "1349880"
  },
  {
    "text": "engineer as well as other roles we've",
    "start": "1349880",
    "end": "1351960"
  },
  {
    "text": "got a booth here and you can visit",
    "start": "1351960",
    "end": "1353559"
  },
  {
    "text": "telegraph. A/C",
    "start": "1353559",
    "end": "1356080"
  },
  {
    "text": "careers as a second part of my pitch two",
    "start": "1356080",
    "end": "1359400"
  },
  {
    "text": "of my colleagues are speaking as well",
    "start": "1359400",
    "end": "1360799"
  },
  {
    "text": "Kevin speaking about a application of",
    "start": "1360799",
    "end": "1362840"
  },
  {
    "text": "graph machine learning to bitcoin",
    "start": "1362840",
    "end": "1365080"
  },
  {
    "text": "tomorrow at 1050 in this room and",
    "start": "1365080",
    "end": "1367720"
  },
  {
    "text": "pantelis um pant is speaking about um",
    "start": "1367720",
    "end": "1372320"
  },
  {
    "text": "using the practic the that open source",
    "start": "1372320",
    "end": "1374600"
  },
  {
    "text": "python library to do graph machine",
    "start": "1374600",
    "end": "1376559"
  },
  {
    "text": "learning and comparing two our",
    "start": "1376559",
    "end": "1378559"
  },
  {
    "text": "he's also in this room tomorrow at",
    "start": "1378559",
    "end": "1380520"
  },
  {
    "text": "3:40 thank",
    "start": "1380520",
    "end": "1382710"
  },
  {
    "text": "[Applause]",
    "start": "1382710",
    "end": "1388919"
  },
  {
    "text": "you",
    "start": "1388919",
    "end": "1391919"
  }
]