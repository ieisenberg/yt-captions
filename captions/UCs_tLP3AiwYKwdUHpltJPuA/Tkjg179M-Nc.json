[
  {
    "start": "0",
    "end": "390000"
  },
  {
    "text": "[Music] thank you um",
    "start": "6990",
    "end": "13080"
  },
  {
    "text": "okay so hello everybody my name is Andre and um this talk will be return of",
    "start": "13080",
    "end": "21080"
  },
  {
    "text": "stream iioe and let's see a little bit what is that uh I am known for cycle JS frontend",
    "start": "21080",
    "end": "27840"
  },
  {
    "text": "framework that I've been building for about two years now actually yeah two years maybe it's more I don't know uh",
    "start": "27840",
    "end": "35200"
  },
  {
    "text": "raise hands if you have not heard of psycho Jaz okay that's kind of a lot",
    "start": "35200",
    "end": "40920"
  },
  {
    "text": "okay yeah yeah so yeah anyway this is not an introductory talk okay I'm sorry",
    "start": "40920",
    "end": "48199"
  },
  {
    "text": "like I have G given that type of talks before uh you can check it out on the internet and this will be a talk about",
    "start": "48199",
    "end": "55120"
  },
  {
    "text": "like of the story of how this framework came to be and its similarity to this",
    "start": "55120",
    "end": "60519"
  },
  {
    "text": "old thing in hasco okay um this is this type of powerful but useless talk and",
    "start": "60519",
    "end": "67960"
  },
  {
    "text": "you know just try to abstract way and try to look at the state of the art with stuff okay uh but it's still interesting",
    "start": "67960",
    "end": "75040"
  },
  {
    "text": "to people okay so uh I work at this European digital agency called futurz uh",
    "start": "75040",
    "end": "80439"
  },
  {
    "text": "based in Helsinki Finland and before futurize before I joined fut rice uh I",
    "start": "80439",
    "end": "85799"
  },
  {
    "text": "knew like zero about reactive programming I never even heard about it uh so then it was when I joined around",
    "start": "85799",
    "end": "92079"
  },
  {
    "text": "what 2013 or 14 that I started hear things such as rxjs or bacon JS or RX",
    "start": "92079",
    "end": "99040"
  },
  {
    "text": "Java or reactive Coco functional reactive programming and for me all of",
    "start": "99040",
    "end": "104360"
  },
  {
    "text": "that was super new I I barely even heard of functional programming so I started",
    "start": "104360",
    "end": "109840"
  },
  {
    "text": "like researching these things reading about it really got curious until I had",
    "start": "109840",
    "end": "115560"
  },
  {
    "text": "the opportunity of uh working on an Android project and then I I started that uh with the gut feeling",
    "start": "115560",
    "end": "122719"
  },
  {
    "text": "that I want to use RX Java and I want to use these observable stuff and you know",
    "start": "122719",
    "end": "127759"
  },
  {
    "text": "that's how I learned it the hard way by doing it in customer projects and uh it was not easy I mean I always sometimes I",
    "start": "127759",
    "end": "135640"
  },
  {
    "text": "got stuck and I had this gut feeling that there has to be this reactive way of doing this and that's how I",
    "start": "135640",
    "end": "142160"
  },
  {
    "text": "discovered uh how to do reactive programming and I also scribbled a lot on these paper notes and did a lot of",
    "start": "142160",
    "end": "148519"
  },
  {
    "text": "marble diagrams and yeah so that was how I learned it and then after a few months I wrote this introduction to reactive",
    "start": "148519",
    "end": "154800"
  },
  {
    "text": "programming that went kind of viral have you heard about this maybe",
    "start": "154800",
    "end": "160680"
  },
  {
    "text": "yeah a couple of people okay that's nice um you should check it out and then after a few months I kept on doing stuff",
    "start": "160680",
    "end": "167239"
  },
  {
    "text": "about observables and I released this website called RX marbles it's basically just a visualization tool so you can",
    "start": "167239",
    "end": "174080"
  },
  {
    "text": "understand how do these stuff work these streams and they're operators and you",
    "start": "174080",
    "end": "180159"
  },
  {
    "text": "know a lot of people like RX marbles but for me like there's a lot of stuff that happened in RX marbles that was kind of",
    "start": "180159",
    "end": "187360"
  },
  {
    "text": "background stuff so uh I first wrote it in coffee script and rxjs and Jake Peri",
    "start": "187360",
    "end": "194040"
  },
  {
    "text": "and then I threw away coffee script rewrote it in ecmascript 5 and then uh I",
    "start": "194040",
    "end": "199680"
  },
  {
    "text": "tried to put react in it and I was really annoyed with react so I threw",
    "start": "199680",
    "end": "205319"
  },
  {
    "text": "that away and I used virtual Dom with rxjs and then I converted to Babel and I",
    "start": "205319",
    "end": "210959"
  },
  {
    "text": "experimented with a ton of different architectures because I wasn't really sure how to do this um because there is",
    "start": "210959",
    "end": "217280"
  },
  {
    "text": "like there was no such thing as like an architecture built around rxjs",
    "start": "217280",
    "end": "223480"
  },
  {
    "text": "observables or streams in general for frontend and that kind of stuff so I",
    "start": "223480",
    "end": "229000"
  },
  {
    "text": "really did a lot of like architecture drafts and this is me trying to figure out stuff uh I I even like called it om",
    "start": "229000",
    "end": "237239"
  },
  {
    "text": "MVC as an observable MVC then I renamed it to mvi and things were crazy and",
    "start": "237239",
    "end": "243319"
  },
  {
    "text": "that's how I sort of released this small tiny Library called psycho JS and it relieved received a lot of feedback from",
    "start": "243319",
    "end": "250079"
  },
  {
    "text": "the open source community and slowly this started getting shape and by feedback I don't mean like yeah this is",
    "start": "250079",
    "end": "256120"
  },
  {
    "text": "cool I mean like this is crap you know and I was like why is it crap I",
    "start": "256120",
    "end": "263440"
  },
  {
    "text": "mean how can I unify it uh so then I released a little bit of like variations",
    "start": "263440",
    "end": "269440"
  },
  {
    "text": "and you know I started to like really think about this I mean you know with",
    "start": "269440",
    "end": "275120"
  },
  {
    "text": "regard to architecture I think I redid the whole idea seven times or something like that so it started getting less",
    "start": "275120",
    "end": "281919"
  },
  {
    "text": "crappy less crappy and then you know we got to this point where we got a nice architecture that people kind of",
    "start": "281919",
    "end": "288240"
  },
  {
    "text": "appreciate using and they they like it you know and I also like it I feel super productive with it um yeah so a little",
    "start": "288240",
    "end": "295160"
  },
  {
    "text": "bit after that I think this was last year may a little bit after after that I",
    "start": "295160",
    "end": "300280"
  },
  {
    "text": "saw this uh there was Eric Meer in some video uh on I think it's Channel 9 or",
    "start": "300280",
    "end": "306400"
  },
  {
    "text": "something where he was explaining about has school and stuff and then he said you know in the back in the days we used",
    "start": "306400",
    "end": "311880"
  },
  {
    "text": "to have this thing in has school and I paused the video I was like wait a second wait a second that's what I have",
    "start": "311880",
    "end": "317479"
  },
  {
    "text": "that is what I have and I was like so it turns out that this thing I've been",
    "start": "317479",
    "end": "323240"
  },
  {
    "text": "building is like has already been there a long time ago um so yeah in 1998 like",
    "start": "323240",
    "end": "331160"
  },
  {
    "text": "they wrote these papers in the University Paul Hudak and bunch of other amazing professors uh we're researching",
    "start": "331160",
    "end": "338720"
  },
  {
    "text": "about you know preh school so before high school came up and that's a bit",
    "start": "338720",
    "end": "344520"
  },
  {
    "text": "like you know how has school uh uh started taking shape so you know I'm not",
    "start": "344520",
    "end": "350360"
  },
  {
    "text": "going to I'm going to explain this thing called stream iio okay this thing here that Eric Meer is talking about but I'm",
    "start": "350360",
    "end": "357680"
  },
  {
    "text": "not going to show you a paper here and I'm not going to show hasal uh so and I also don't pretend I know everything",
    "start": "357680",
    "end": "364160"
  },
  {
    "text": "that they do because you know in 1989 they were there in the University re researching this stuff while in 1989 I",
    "start": "364160",
    "end": "370919"
  },
  {
    "text": "was just like you know fooling around just doing nonsense so yeah I did my own",
    "start": "370919",
    "end": "378199"
  },
  {
    "text": "reading and I think I know what this is about and I want to share with you kind of like the theoretical ideas uh behind",
    "start": "378199",
    "end": "384919"
  },
  {
    "text": "this so don't be afraid you know it's going to be rather easy I'm not going to show H or",
    "start": "384919",
    "end": "391479"
  },
  {
    "start": "390000",
    "end": "828000"
  },
  {
    "text": "code okay um so what is hasco and what is stream",
    "start": "391479",
    "end": "397160"
  },
  {
    "text": "iio there's nothing funny about the slide you guys are laughing on the wrong slides anyway uh so um in short it means",
    "start": "398199",
    "end": "408400"
  },
  {
    "text": "that you know usually you have your programs have Logics and effects mix in okay you have something like perform",
    "start": "408400",
    "end": "414759"
  },
  {
    "text": "Network request that's an effect and you have display pixels that's an effect and",
    "start": "414759",
    "end": "419800"
  },
  {
    "text": "you have logic like you know get the number multiply it by 100 that's logic it's just logic so what has schol does",
    "start": "419800",
    "end": "426720"
  },
  {
    "text": "is separate those two says like logic you go to one side effects you go to the other side but um there's different ways",
    "start": "426720",
    "end": "433400"
  },
  {
    "text": "how you can separate that okay one way that you can separate it is with the so-called monatic I/O the other way is",
    "start": "433400",
    "end": "439759"
  },
  {
    "text": "called stream IO and the other way is called continuation IO and this is back from the 1989",
    "start": "439759",
    "end": "445759"
  },
  {
    "text": "paper now it turns out that you know all of these three just monatic IO survived",
    "start": "445759",
    "end": "451840"
  },
  {
    "text": "in hasco so we're going to quickly see monatic IO and stream.io but not continuation IO it's kind of out of",
    "start": "451840",
    "end": "459039"
  },
  {
    "text": "scope so um okay I don't intend to give like a monad tutorial here on stage uh",
    "start": "459039",
    "end": "466639"
  },
  {
    "text": "now I'm just going to give a soft intuition of what is this for people who are not familiar with it now if you have",
    "start": "466639",
    "end": "473280"
  },
  {
    "text": "ever done hascal in your life uh okay you guys please close your eyes because",
    "start": "473280",
    "end": "480039"
  },
  {
    "text": "I'm going to explain this in JavaScript and you're probably going to be disgusted okay so yeah just don't vom",
    "start": "480039",
    "end": "488120"
  },
  {
    "text": "it so here's a program in JavaScript that uh is really simple okay it just says window confirmed so it does this",
    "start": "488120",
    "end": "494720"
  },
  {
    "text": "pop up like that and you can say yes or no and then it gets the answer is sure",
    "start": "494720",
    "end": "500639"
  },
  {
    "text": "if is sure say console log you are sure if it's not sure then you're not sure okay really simple program so I'm going",
    "start": "500639",
    "end": "508680"
  },
  {
    "text": "to apply a tri because this program mixes logic and effects so the effects are window confirm and console log and",
    "start": "508680",
    "end": "514919"
  },
  {
    "text": "the logic is the if and else okay so I'm going to apply a trick okay now uh my",
    "start": "514919",
    "end": "521320"
  },
  {
    "text": "program has like Effect one is an array with string and effect two is an array",
    "start": "521320",
    "end": "527440"
  },
  {
    "text": "with string and then I concatenate those two and I get array with two strings and",
    "start": "527440",
    "end": "532519"
  },
  {
    "text": "that's I output that okay so it's completely pure because you know once",
    "start": "532519",
    "end": "539200"
  },
  {
    "text": "you call that function you're going to get always exactly the same arrays with strings inside them okay pure but it",
    "start": "539200",
    "end": "546760"
  },
  {
    "text": "happens to be that the content of the string says window. confirm um yeah so",
    "start": "546760",
    "end": "553279"
  },
  {
    "text": "some of you might know what I'm going to do next I have this program there this this function run which takes each of",
    "start": "553279",
    "end": "560079"
  },
  {
    "text": "those effects strings and runs eval on it okay now you can kind of see what I'm",
    "start": "560079",
    "end": "565959"
  },
  {
    "text": "doing there huh um yeah and they say that you shouldn't use eval but that's",
    "start": "565959",
    "end": "571079"
  },
  {
    "text": "what I'm doing here so I call the first string uh with eval window confirm and it shows that",
    "start": "571079",
    "end": "577000"
  },
  {
    "text": "effect and then uh with that I get out a result I keep store that result there",
    "start": "577000",
    "end": "584519"
  },
  {
    "text": "and then I pass that result to the next string I substitute the dollar sign okay",
    "start": "584519",
    "end": "589920"
  },
  {
    "text": "so that's what I'm doing here and there you go you know uh the main program only",
    "start": "589920",
    "end": "595760"
  },
  {
    "text": "has data okay I encoded effects as data",
    "start": "595760",
    "end": "601399"
  },
  {
    "text": "right uh it's a trick because the string is always data but so the string doesn't",
    "start": "601399",
    "end": "607120"
  },
  {
    "text": "yet do the effects it's just like later something will'll get that and do that and that's how you can separate logic",
    "start": "607120",
    "end": "612519"
  },
  {
    "text": "from effects voila there you go that's kind of like monatic IO",
    "start": "612519",
    "end": "620240"
  },
  {
    "text": "yeah yeah has schoolers please stay in silence uh now we're going to see here a",
    "start": "620959",
    "end": "626079"
  },
  {
    "text": "different one this is called stream.io it's a different way of of doing the separation um so logic will go into your",
    "start": "626079",
    "end": "634200"
  },
  {
    "text": "program on the left and FX will go to the right on the operate in the operating system so the way that we're",
    "start": "634200",
    "end": "641519"
  },
  {
    "text": "going to set like make stuff happen in the operating system or in the real world like window. confirm is we're",
    "start": "641519",
    "end": "648720"
  },
  {
    "text": "going to send a message to the operating system as if the operating system would",
    "start": "648720",
    "end": "654440"
  },
  {
    "text": "be a server okay so we're sending a request to the operating system as if it be a server and that request is",
    "start": "654440",
    "end": "662680"
  },
  {
    "text": "something like hey please run console log for me okay and then we're going to",
    "start": "662680",
    "end": "667880"
  },
  {
    "text": "get out uh or like let's say please run window. confirm and then we're going to get out a response as if the operating",
    "start": "667880",
    "end": "675639"
  },
  {
    "text": "system would be a server and that response is the sort of messages that we",
    "start": "675639",
    "end": "681320"
  },
  {
    "text": "want to read from the outside world okay that's um that's the trick here so how",
    "start": "681320",
    "end": "686800"
  },
  {
    "text": "does it look like in JavaScript again hular please don't vomit um let's see",
    "start": "686800",
    "end": "692839"
  },
  {
    "text": "this in JavaScript using es6 generators okay uh and this just to give an intuition so first I create there um an",
    "start": "692839",
    "end": "701480"
  },
  {
    "text": "object that is my request and I I want to run window. confirm so my request has",
    "start": "701480",
    "end": "707920"
  },
  {
    "text": "there the type is confirm and the content or the value is are you sure and",
    "start": "707920",
    "end": "713320"
  },
  {
    "text": "then I yield that object in es6 generators you can do this you can yield",
    "start": "713320",
    "end": "718720"
  },
  {
    "text": "and the way that yield works is that uh it freezes uh on that yield point so you",
    "start": "718720",
    "end": "724920"
  },
  {
    "text": "kind of yield this object to the outside world and after that it freezes there and it and then once it gets back the",
    "start": "724920",
    "end": "731760"
  },
  {
    "text": "response it continues from that spot so it will get confirmed response it kind of it's this thing that has this ability",
    "start": "731760",
    "end": "738120"
  },
  {
    "text": "to pause and continue so then once you get that response from the uh server or the",
    "start": "738120",
    "end": "745279"
  },
  {
    "text": "operating system you can uh do a if and else that's our logic right and then you",
    "start": "745279",
    "end": "750959"
  },
  {
    "text": "can say um hey here's a request to run the console and with that content else",
    "start": "750959",
    "end": "757160"
  },
  {
    "text": "run the console with this content and those are also requests that we're giving passing to the operating system",
    "start": "757160",
    "end": "763600"
  },
  {
    "text": "now the other side is the operating system how does that work well we have a function here that will call your",
    "start": "763600",
    "end": "770519"
  },
  {
    "text": "program and it will get the first request from the program and it will",
    "start": "770519",
    "end": "775720"
  },
  {
    "text": "also do that in a loop and then it uh checks if that request type is of console if it's a console request then",
    "start": "775720",
    "end": "782519"
  },
  {
    "text": "it will perform the console and if it's a confirm request then it's going to perform the confirm and it will get back",
    "start": "782519",
    "end": "789959"
  },
  {
    "text": "the response and it will feed it back to the program like this this is just how you do it in es6 generators and then we",
    "start": "789959",
    "end": "796800"
  },
  {
    "text": "run that so there you go this is how we can get an intuition of what is monatic iio and what is stream.io and this is",
    "start": "796800",
    "end": "803800"
  },
  {
    "text": "basically stream.io um the diagram so uh here was a problem while",
    "start": "803800",
    "end": "809680"
  },
  {
    "text": "Eric Meer was showing that in the video he was like yeah this is stream iio this is how hasco used to work uh but like",
    "start": "809680",
    "end": "816279"
  },
  {
    "text": "then he wipes it away and he saids but it didn't work out so let's just forget about it and I was like whoa wait a",
    "start": "816279",
    "end": "822680"
  },
  {
    "text": "second like what went wrong with stream iio I mean I was kind of disappointed um",
    "start": "822680",
    "end": "828480"
  },
  {
    "start": "828000",
    "end": "864000"
  },
  {
    "text": "so what happened why didn't stream.io work so um take a careful look um the hasal report on version",
    "start": "828480",
    "end": "835800"
  },
  {
    "text": "1.0 uh is this uh file there do you see any",
    "start": "835800",
    "end": "841639"
  },
  {
    "text": "problem check the date right April fools so they put stream iio there but it's",
    "start": "841639",
    "end": "848199"
  },
  {
    "text": "like April fools huh gotcha you're supposed to laugh whatever anyway um yeah but",
    "start": "848199",
    "end": "856120"
  },
  {
    "text": "seriously why didn't stream iio work that that was I was like Curious like why did this thing work why is why is",
    "start": "856120",
    "end": "861680"
  },
  {
    "text": "Eric Myer wiping it away um so I went to study a bit more and I come um I saw",
    "start": "861680",
    "end": "868360"
  },
  {
    "start": "864000",
    "end": "962000"
  },
  {
    "text": "this definition of of reactive system and a definition of a transformational system and these are old stuff I mean",
    "start": "868360",
    "end": "874240"
  },
  {
    "text": "from the 90s and stuff so I'm not making this up there are books about it that we completely forgot uh but one of the",
    "start": "874240",
    "end": "881000"
  },
  {
    "text": "books said there gave the definition of a transformational system it says a transformational system repeatedly waits",
    "start": "881000",
    "end": "887440"
  },
  {
    "text": "for its inputs to arrive carries outs and processing and output to result when it's process done so it's basically it",
    "start": "887440",
    "end": "893639"
  },
  {
    "text": "gets some data some file or something it does some processing it spits out the",
    "start": "893639",
    "end": "899320"
  },
  {
    "text": "results and it's done basic examples are like your compiler or unix commands like",
    "start": "899320",
    "end": "905079"
  },
  {
    "text": "move or rename you know all of these things you know basic old programs",
    "start": "905079",
    "end": "910160"
  },
  {
    "text": "right so that's a transformational system what is a reactive system it continuously interacts with its",
    "start": "910160",
    "end": "915800"
  },
  {
    "text": "environments using inputs and outputs that either continuous in time or discreet uh and the inputs are often",
    "start": "915800",
    "end": "922440"
  },
  {
    "text": "asynchronous meaning that they may arrive whenever and the outputs may go",
    "start": "922440",
    "end": "927560"
  },
  {
    "text": "out whenever so it's kind of like this it's processing the whole time and at",
    "start": "927560",
    "end": "933399"
  },
  {
    "text": "some point it gets an input and maybe after two days or after two milliseconds",
    "start": "933399",
    "end": "939440"
  },
  {
    "text": "it sends out an output and it keeps on going so it doesn't necessarily stop it's just like this and it may in",
    "start": "939440",
    "end": "945680"
  },
  {
    "text": "parallel get inputs or outputs examples of that are the so-called realtime systems like these",
    "start": "945680",
    "end": "952959"
  },
  {
    "text": "Aviation control systems or user interfaces like mobile apps or websites",
    "start": "952959",
    "end": "958399"
  },
  {
    "text": "front end that we're building and servers right okay so history went like",
    "start": "958399",
    "end": "963600"
  },
  {
    "start": "962000",
    "end": "1351000"
  },
  {
    "text": "this in the early '90s um basically any computer program was a transformational system a kid asks his",
    "start": "963600",
    "end": "971000"
  },
  {
    "text": "dad Daddy what is a computer program and the dad is like well son you know it's",
    "start": "971000",
    "end": "977480"
  },
  {
    "text": "this thing you give a file to it in the computer it does some stuff and it spits out another file and then the kid is",
    "start": "977480",
    "end": "984319"
  },
  {
    "text": "like okay okay so at that time these were the pro uh dominant programming",
    "start": "984319",
    "end": "990440"
  },
  {
    "text": "languages and those languages were made for transformational programs I mean obviously because we were living in that",
    "start": "990440",
    "end": "997079"
  },
  {
    "text": "blue world that's what computer programs were so the languages were made for that",
    "start": "997079",
    "end": "1002720"
  },
  {
    "text": "so for instance C right C is made for that look at that we have main it takes",
    "start": "1002720",
    "end": "1007800"
  },
  {
    "text": "the arguments it does stuff in this for Loop and it returns zero and it's dies",
    "start": "1007800",
    "end": "1012959"
  },
  {
    "text": "after that okay C was made for that c comes with a main function and also you",
    "start": "1012959",
    "end": "1018079"
  },
  {
    "text": "know Java Java is still one of the top three languages in the world used and there we go you have this main just like",
    "start": "1018079",
    "end": "1024120"
  },
  {
    "text": "can see takes some arguments does some processing system. Exit Zero and it's",
    "start": "1024120",
    "end": "1029600"
  },
  {
    "text": "done it dies so it turns out that has schol stream iio was uh born out of this",
    "start": "1029600",
    "end": "1037319"
  },
  {
    "text": "time so it it it yeah it's from the '90s now the reasons why it didn't work is",
    "start": "1037319",
    "end": "1043839"
  },
  {
    "text": "that it turns out not to be good for transformational programs okay uh but",
    "start": "1043839",
    "end": "1048919"
  },
  {
    "text": "there's many reasons like one of the reasons that it was blocking not asynchronous uh it was also really easy",
    "start": "1048919",
    "end": "1054760"
  },
  {
    "text": "to deadlock and you because you had the circular dependency between request and",
    "start": "1054760",
    "end": "1060120"
  },
  {
    "text": "response so in order to have a response you need a request you need a request response so it was complicated it was",
    "start": "1060120",
    "end": "1066039"
  },
  {
    "text": "kind of easy to do something like I'm waiting for the res second response but",
    "start": "1066039",
    "end": "1073080"
  },
  {
    "text": "that relates to the first request so if it you did like a off by one error then",
    "start": "1073080",
    "end": "1078600"
  },
  {
    "text": "uh things would just lock and freeze because it's blocking and also one of the problems of",
    "start": "1078600",
    "end": "1083960"
  },
  {
    "text": "stream iio at that time was uh the whenever you had a question and answer type of program such as you know your",
    "start": "1083960",
    "end": "1089880"
  },
  {
    "text": "typical uh first program in computer science like please input your age and",
    "start": "1089880",
    "end": "1095520"
  },
  {
    "text": "then it freezes and then you input your age get Char and then hi your age is",
    "start": "1095520",
    "end": "1101400"
  },
  {
    "text": "this you are young in my case it's like you're getting a bit old um yeah so",
    "start": "1101400",
    "end": "1107919"
  },
  {
    "text": "stream iioa bit inconvenient for that type of uh question and answer this that this that um so and that was a dominant",
    "start": "1107919",
    "end": "1115200"
  },
  {
    "text": "type of uh programs that we had at the time so for other reasons it was hard to",
    "start": "1115200",
    "end": "1121320"
  },
  {
    "text": "extend the types of the io actions and whatever so they started studying and they figured out H monatic iio is quite",
    "start": "1121320",
    "end": "1127600"
  },
  {
    "text": "good for transformational programs so then in 1996 and onwards they started using uh monatic IO for almost",
    "start": "1127600",
    "end": "1134000"
  },
  {
    "text": "everything in hll and I think you can't even do nowadays stream IO in hasell so it's left dead and just to give you some",
    "start": "1134000",
    "end": "1141640"
  },
  {
    "text": "context you know in 1996 and around that it was the time when we started talking about multimedia just like it's like a",
    "start": "1141640",
    "end": "1148760"
  },
  {
    "text": "buzzword you know just like today we have Internet of Things it was like multimedia cdrom you",
    "start": "1148760",
    "end": "1156120"
  },
  {
    "text": "know yeah so you remember so so but multimedia was basically UI you know we",
    "start": "1156120",
    "end": "1163799"
  },
  {
    "text": "started having Windows 95 and things like that and you know we started getting the feeling for UI and UI are",
    "start": "1163799",
    "end": "1170600"
  },
  {
    "text": "reactive programs okay so we were still a dominantly blue world of transformational programs but we started",
    "start": "1170600",
    "end": "1176720"
  },
  {
    "text": "having a bit of green and in the early 2000s the whole programming Community went through very",
    "start": "1176720",
    "end": "1182760"
  },
  {
    "text": "dark times because um you know like on one hand we had this Foundation of",
    "start": "1182760",
    "end": "1189280"
  },
  {
    "text": "transformational programs with like C and C++ and Java but on the other hand we really had to deliver these",
    "start": "1189280",
    "end": "1195600"
  },
  {
    "text": "multimedia apps and we really need to get things done and also servers started",
    "start": "1195600",
    "end": "1201000"
  },
  {
    "text": "being a thing around this time and those were dark times because if you remember we had like a ton of shared memory",
    "start": "1201000",
    "end": "1207240"
  },
  {
    "text": "concurrency mixed with events and callbacks and win 32 apis and",
    "start": "1207240",
    "end": "1212360"
  },
  {
    "text": "object-oriented programming and this was fine you know so yeah and in the frontend world",
    "start": "1212360",
    "end": "1219440"
  },
  {
    "text": "around let's say 2004 five we barely even had jQuery and any Javascript app",
    "start": "1219440",
    "end": "1225600"
  },
  {
    "text": "that you open from that time most likely had a lot of callbacks and mutation of",
    "start": "1225600",
    "end": "1231320"
  },
  {
    "text": "global variables and that was also fine yeah but now um fast forward to today",
    "start": "1231320",
    "end": "1238880"
  },
  {
    "text": "2016 and you name it you know we live in this green world where all the programs are reactive so a kid asks his father",
    "start": "1238880",
    "end": "1247039"
  },
  {
    "text": "Daddy what is a computer program he might not even say computer program might even say app um and the father",
    "start": "1247039",
    "end": "1253480"
  },
  {
    "text": "says you know it's this thing that is on your phone or your computer and you can inter interact with it and it shows you",
    "start": "1253480",
    "end": "1260600"
  },
  {
    "text": "some stuff and you do some stuff on it and that's it you know so our idea of a",
    "start": "1260600",
    "end": "1266640"
  },
  {
    "text": "computer program is that it's interactive nowadays um so I bet you know any",
    "start": "1266640",
    "end": "1273760"
  },
  {
    "text": "software that you have seriously like any of you I could pick any of you and like you know do you have something",
    "start": "1273760",
    "end": "1280559"
  },
  {
    "text": "asynchronous uhhuh you know like I could do this now but yeah like promises call",
    "start": "1280559",
    "end": "1287880"
  },
  {
    "text": "backs stream CSP whatever everyone has something asynchronous you don't even like question it uh and I so like and",
    "start": "1287880",
    "end": "1296679"
  },
  {
    "text": "and I bet that also runs continuously like something interactive right uh for instance even compilers today which are",
    "start": "1296679",
    "end": "1302880"
  },
  {
    "text": "TR traditionally transformational programs they are also like interactive so in typescript we have now this thing",
    "start": "1302880",
    "end": "1310039"
  },
  {
    "text": "called a compilation server where it's just running and it may get source code",
    "start": "1310039",
    "end": "1316960"
  },
  {
    "text": "and check that and produce l output and it's just like a server really so this is used in editors for instance Visual",
    "start": "1316960",
    "end": "1323640"
  },
  {
    "text": "Studio code so that you know every time anything changes in your editor and any kind of uh source code in your project",
    "start": "1323640",
    "end": "1330440"
  },
  {
    "text": "it will check that for you and that's that's an interactive program suddenly and in these days for",
    "start": "1330440",
    "end": "1336440"
  },
  {
    "text": "concurrency most of the stuff that we're using for uh asynchronous and concurrency is uh message passing okay",
    "start": "1336440",
    "end": "1343080"
  },
  {
    "text": "so there's two types message passing and shared memory and that's pretty interesting okay because if you if you",
    "start": "1343080",
    "end": "1348960"
  },
  {
    "text": "haven't slept yet then uh I mean if you haven't slept during this presentation then you're going to remember that",
    "start": "1348960",
    "end": "1354120"
  },
  {
    "text": "stream.io was a message passing abstraction that was cool so it was message passing but in high school they",
    "start": "1354120",
    "end": "1360799"
  },
  {
    "text": "also used lazy lists and um blocking um programming so um I discovered that if",
    "start": "1360799",
    "end": "1368240"
  },
  {
    "text": "you just replace lazy lists with streams and blocking with a synchronous then",
    "start": "1368240",
    "end": "1373760"
  },
  {
    "text": "stream.io becomes very useful for um message passing or interactive apps that",
    "start": "1373760",
    "end": "1379679"
  },
  {
    "text": "we build today and that's why I say stream iio with quotes because the has schol people won't like me right now",
    "start": "1379679",
    "end": "1386520"
  },
  {
    "text": "because I changed lazy list to streams uh but the diagram didn't change okay so",
    "start": "1386520",
    "end": "1391600"
  },
  {
    "text": "when I changed uh lazy list to streams the diagram stay the same I really have a program that sends out messages and",
    "start": "1391600",
    "end": "1398919"
  },
  {
    "text": "receives back messages and voila my that my friends is the idea of psycho JS it's",
    "start": "1398919",
    "end": "1404320"
  },
  {
    "text": "a JavaScript framework for interactive apps uh where you have message passing",
    "start": "1404320",
    "end": "1409640"
  },
  {
    "text": "you have an input output gate for uh logic and effects and you have streams",
    "start": "1409640",
    "end": "1415440"
  },
  {
    "text": "for asynchronous programming that's it um let's take a quick look uh at it",
    "start": "1415440",
    "end": "1421200"
  },
  {
    "text": "again this is not an introductory talk but just to give an idea and code as well uh here we have some imports at the",
    "start": "1421200",
    "end": "1427440"
  },
  {
    "text": "top just to import the library and the stream Library as well and then uh this is our program sources is like incoming",
    "start": "1427440",
    "end": "1435200"
  },
  {
    "text": "messages from the operating system and then I can do something like this I can define a stream called increment stream",
    "start": "1435200",
    "end": "1441960"
  },
  {
    "text": "and that stream is all of the click events on the increment element mapped",
    "start": "1441960",
    "end": "1448120"
  },
  {
    "text": "to plus one in other words like if you abstract",
    "start": "1448120",
    "end": "1453279"
  },
  {
    "text": "a bit it's just I create the stream just think event emitter called increment",
    "start": "1453279",
    "end": "1458600"
  },
  {
    "text": "stream and then I listen to all the click events on the increment element",
    "start": "1458600",
    "end": "1463679"
  },
  {
    "text": "and then I dispatch a plus one on the increment stream okay that's basically",
    "start": "1463679",
    "end": "1469399"
  },
  {
    "text": "the same thing as doing map there so yeah uh I have many talks about like",
    "start": "1469399",
    "end": "1476720"
  },
  {
    "text": "careful introduction to Psycho J in case you want to take a look later so then we do almost the same thing for the",
    "start": "1476720",
    "end": "1482080"
  },
  {
    "text": "decrement stream we uh also merge together the increment stream with the",
    "start": "1482080",
    "end": "1487960"
  },
  {
    "text": "decrement stream we make this so-called action stream and it has some similarities with flux and Redux you can",
    "start": "1487960",
    "end": "1494440"
  },
  {
    "text": "think of an action like that and then we make a reducer stream also kind of like in Redux where you get each action and",
    "start": "1494440",
    "end": "1501760"
  },
  {
    "text": "you map that action to a function and that function knows how to take previous state and make new state so then we get",
    "start": "1501760",
    "end": "1510880"
  },
  {
    "text": "all the reducer functions over time and we can fold them this is kind of like array. reduce same idea as in Redux and",
    "start": "1510880",
    "end": "1518360"
  },
  {
    "text": "then we can uh finally map each count in the count stream to a markup and then we",
    "start": "1518360",
    "end": "1524840"
  },
  {
    "text": "send that back to the Dom so initially from the Dom we got messages which were",
    "start": "1524840",
    "end": "1530679"
  },
  {
    "text": "uh events like clicks and now we're sending back more messages which are Mark so from the Dom I get clicks into",
    "start": "1530679",
    "end": "1538240"
  },
  {
    "text": "my program and back to the Dom I send back markup of what should be",
    "start": "1538240",
    "end": "1543440"
  },
  {
    "text": "shown and then finally we just run this we run the program against the operating",
    "start": "1543440",
    "end": "1548640"
  },
  {
    "text": "system which is the browser and there we go on the left we have this program running it just you know you click the",
    "start": "1548640",
    "end": "1555919"
  },
  {
    "text": "yeah the counter app but on the right you see our Dev tools and they show uh",
    "start": "1555919",
    "end": "1561320"
  },
  {
    "text": "the structure of streams okay and you can literally see the messages being passed there okay and this is the idea",
    "start": "1561320",
    "end": "1567480"
  },
  {
    "text": "we have message passing not just in the at the boundaries with the operating system but also between your app you can",
    "start": "1567480",
    "end": "1573600"
  },
  {
    "text": "see the messages passing okay so the idea is just you have a stream of Dom events from the",
    "start": "1573600",
    "end": "1579679"
  },
  {
    "text": "outside world map that to the stream of actions map that the stream of reducers map that to stream of state and you send",
    "start": "1579679",
    "end": "1586080"
  },
  {
    "text": "back a stream of markup so uh it turns out that psycho JS has a",
    "start": "1586080",
    "end": "1591720"
  },
  {
    "start": "1588000",
    "end": "1747000"
  },
  {
    "text": "synchronous message passing it's good for user interfaces or any kind of reactive system and has good separation",
    "start": "1591720",
    "end": "1598159"
  },
  {
    "text": "concerns there's another talk for that uh but one thumbs down here is that it's not so good for handling question and",
    "start": "1598159",
    "end": "1605120"
  },
  {
    "text": "answer type of IO okay just like stream IO from has was not so good for question and answer uh this is not so good for",
    "start": "1605120",
    "end": "1612320"
  },
  {
    "text": "that either let's take a quick uh look at why so here we have a respon response",
    "start": "1612320",
    "end": "1618600"
  },
  {
    "text": "and a request to http to a real server okay and first of all I have the",
    "start": "1618600",
    "end": "1624039"
  },
  {
    "text": "response defined first and then I have the request defined later and that's",
    "start": "1624039",
    "end": "1629279"
  },
  {
    "text": "already kind of weird right because usually you define request before the response uh yeah but anyway in fact you",
    "start": "1629279",
    "end": "1635880"
  },
  {
    "text": "can actually put these in whatever order you want so that's also kind of weird so how is this response connected to that",
    "start": "1635880",
    "end": "1642360"
  },
  {
    "text": "request and they are connected through this thing called a category or just an ID Okay so I basically send out a",
    "start": "1642360",
    "end": "1649720"
  },
  {
    "text": "request to the server but I say hey that request is labeled C category hello and",
    "start": "1649720",
    "end": "1656840"
  },
  {
    "text": "then when I get back a response from the server I checked I I checked that that response has category hello because it",
    "start": "1656840",
    "end": "1663919"
  },
  {
    "text": "could be any other response I mean I could be making tons of different requests to different servers and I want",
    "start": "1663919",
    "end": "1670760"
  },
  {
    "text": "to know which one is that one so U as you can see I have to have some identifier here to connect these two",
    "start": "1670760",
    "end": "1677000"
  },
  {
    "text": "things but what I really wanted to do is just Define I have this request and then",
    "start": "1677000",
    "end": "1682039"
  },
  {
    "text": "my response depends on this request and then I don't need to have these hello identifiers anymore okay again you don't",
    "start": "1682039",
    "end": "1689440"
  },
  {
    "text": "need to understand all of these details here it's just to say that it's not so good for question and answer type of uh",
    "start": "1689440",
    "end": "1697519"
  },
  {
    "text": "interaction uh and also I mean you could do this you could do this but now we're",
    "start": "1697519",
    "end": "1702720"
  },
  {
    "text": "mixing effects with logic we're doing the network request inside our program",
    "start": "1702720",
    "end": "1708200"
  },
  {
    "text": "and you know that has its problems so does that mean that stream.io has this",
    "start": "1708200",
    "end": "1713480"
  },
  {
    "text": "inherit problem that question and answer type of interaction is is bad well not",
    "start": "1713480",
    "end": "1720279"
  },
  {
    "text": "really there's another IO model uh that comes very close to stream iio and that's Elm and the elm architecture and",
    "start": "1720279",
    "end": "1727279"
  },
  {
    "text": "it's also U message driven just like you know it has sends out messages literally",
    "start": "1727279",
    "end": "1732840"
  },
  {
    "text": "has a message type and you receive back uh oh I'm sorry you receive messages",
    "start": "1732840",
    "end": "1738360"
  },
  {
    "text": "from the operating system and you send out commands yeah so what's different about Elm does it solve this question",
    "start": "1738360",
    "end": "1745320"
  },
  {
    "text": "and answer type of thing well kind of yes it has a thing called task okay and",
    "start": "1745320",
    "end": "1751960"
  },
  {
    "start": "1747000",
    "end": "1858000"
  },
  {
    "text": "what is a task in Elm it's basically a command or or request that your program",
    "start": "1751960",
    "end": "1758440"
  },
  {
    "text": "is sending to the uh runtime or the operating system but this message is",
    "start": "1758440",
    "end": "1764200"
  },
  {
    "text": "quite big it says like you know I want you to do this go there and get that and do this and then that do that and then",
    "start": "1764200",
    "end": "1769519"
  },
  {
    "text": "do this and then finally you get the result and give it back to me okay so it's not like a very tiny request like",
    "start": "1769519",
    "end": "1777039"
  },
  {
    "text": "run console log it's like do a lot of stuff and then you get back the result",
    "start": "1777039",
    "end": "1783240"
  },
  {
    "text": "so again just pretend that you know Elm like like an advanced user already and",
    "start": "1783240",
    "end": "1789519"
  },
  {
    "text": "here we have a task which is like first HTTP get from that URL and then uh pick",
    "start": "1789519",
    "end": "1797120"
  },
  {
    "text": "out all the ID from all of these hats and then for each hat I want you to run",
    "start": "1797120",
    "end": "1802720"
  },
  {
    "text": "an HTTP post to like that hat okay so we're doing many requests here but this",
    "start": "1802720",
    "end": "1808919"
  },
  {
    "text": "is just one task now uh you might not know Elm but this is just data it",
    "start": "1808919",
    "end": "1815640"
  },
  {
    "text": "doesn't perform that task it's not like a promise you could imagine that this is just a string okay this whole thing is",
    "start": "1815640",
    "end": "1822360"
  },
  {
    "text": "just the string saying please do that do this and do this and do that it's just data and and if you've been paying",
    "start": "1822360",
    "end": "1829200"
  },
  {
    "text": "attention this is monatic uhhuh that's kind of interesting right so instead of using strings like",
    "start": "1829200",
    "end": "1836600"
  },
  {
    "text": "you know Elm has these data structures called tasks so that's kind of funky",
    "start": "1836600",
    "end": "1842159"
  },
  {
    "text": "because you can put monatic IO inside stream.io so a task is really like",
    "start": "1842159",
    "end": "1849480"
  },
  {
    "text": "monatic IO it's just like you're sending out this message please run this bunch of instructions and that can run inside",
    "start": "1849480",
    "end": "1856000"
  },
  {
    "text": "the context of this string of this thing called Stream iio So it turns out that we can have transformational programs",
    "start": "1856000",
    "end": "1862039"
  },
  {
    "start": "1858000",
    "end": "1922000"
  },
  {
    "text": "inside reactive programs and that's pretty cool so message passing is",
    "start": "1862039",
    "end": "1867279"
  },
  {
    "text": "awesome uh because it doesn't rule out monatic AO you can do both uh and if you squint you know it's",
    "start": "1867279",
    "end": "1874919"
  },
  {
    "text": "like maybe you can see message passing in flux and Redux as well because uh uh",
    "start": "1874919",
    "end": "1882159"
  },
  {
    "text": "you know you have your store and that has stuff inside it and you send back messages which are uh State objects to",
    "start": "1882159",
    "end": "1890120"
  },
  {
    "text": "your tree of components and then your tree of components eventually sends messages back to your store and those me",
    "start": "1890120",
    "end": "1896679"
  },
  {
    "text": "messages are actions so there we go we have messages of state and messages of actions and unidirectional",
    "start": "1896679",
    "end": "1904120"
  },
  {
    "text": "right that's where the stuff that's where the name kind of come froms uh but",
    "start": "1904120",
    "end": "1909639"
  },
  {
    "text": "Redux and flux are not purely functional because they don't try to do the separation of logic and effects so you could do logic and effects inside the",
    "start": "1909639",
    "end": "1916480"
  },
  {
    "text": "store you could do logic and effect inside the components um yeah so you can mix them as you wish so that start",
    "start": "1916480",
    "end": "1923720"
  },
  {
    "start": "1922000",
    "end": "1951000"
  },
  {
    "text": "started making me wondering does message passing plus a purely functional approach mean something like stream iio",
    "start": "1923720",
    "end": "1930919"
  },
  {
    "text": "with quotes um yeah so you know because flux misses the purely functional part",
    "start": "1930919",
    "end": "1937880"
  },
  {
    "text": "so it's not exactly streamio it's just unidirectional data flow but you know I find it quite hard to have those two",
    "start": "1937880",
    "end": "1944240"
  },
  {
    "text": "elements of message passing and purely functional and not end up with is something like stream.io with",
    "start": "1944240",
    "end": "1950679"
  },
  {
    "text": "quotes So my conclusion is we live in a world where all of the programs are reactive programs okay uh languages have",
    "start": "1950679",
    "end": "1959080"
  },
  {
    "start": "1951000",
    "end": "2066000"
  },
  {
    "text": "a lot of heavy inertia okay they take a lot of time to evolve and be and get adopted uh so in",
    "start": "1959080",
    "end": "1965360"
  },
  {
    "text": "1990s like U the languages that were use were actually created 10 or 20 years",
    "start": "1965360",
    "end": "1970960"
  },
  {
    "text": "before like in the 70s and the languages that we used in 2010 like JavaScript and",
    "start": "1970960",
    "end": "1976919"
  },
  {
    "text": "Ruby and Java they were created also about 10 years before so the trick is if you want to",
    "start": "1976919",
    "end": "1982880"
  },
  {
    "text": "know quite accurately what are we going to use in the next 5 years you need to look at the languages that are quite",
    "start": "1982880",
    "end": "1989559"
  },
  {
    "text": "promising right now because you know languages take a lot of time to be adopted so uh just a list a few okay",
    "start": "1989559",
    "end": "1997000"
  },
  {
    "text": "this is not an exhaustive list Elm Elixir closure Dart um and all of these",
    "start": "1997000",
    "end": "2003399"
  },
  {
    "text": "languages mentioned I mean there's a bunch of others uh have a focus on these",
    "start": "2003399",
    "end": "2008600"
  },
  {
    "text": "uh things they already assume asynchronous they're not going to be like uh they're not going to ignore this",
    "start": "2008600",
    "end": "2014279"
  },
  {
    "text": "this part they they take asynchron seriously so closure has like core async",
    "start": "2014279",
    "end": "2019440"
  },
  {
    "text": "that takes uh async quite seriously with CSP Elixir as well it has an airl style",
    "start": "2019440",
    "end": "2026279"
  },
  {
    "text": "action um uh model I'm not going to pretend I know that Elm as we saw has",
    "start": "2026279",
    "end": "2031440"
  },
  {
    "text": "also message passing and focus on asynchronous programming and dart you know it has a beautiful uh API for",
    "start": "2031440",
    "end": "2038480"
  },
  {
    "text": "streams that looks like rxjs you should take a look Dart is usually not mentioned but uh just in case you're",
    "start": "2038480",
    "end": "2045120"
  },
  {
    "text": "interested in sort of like ideas and stuff just take a look at how async is in Dart much better than in",
    "start": "2045120",
    "end": "2051398"
  },
  {
    "text": "JavaScript so uh and there's also a trend nowadays towards uh functional programming so Elm Elixir closure have",
    "start": "2051399",
    "end": "2059240"
  },
  {
    "text": "like a focus on functional programming okay so we can kind of know that the future is going to be something like",
    "start": "2059240",
    "end": "2065398"
  },
  {
    "text": "this in frontend the situation is like this today okay cycle JS uses message",
    "start": "2065399",
    "end": "2070599"
  },
  {
    "start": "2066000",
    "end": "2130000"
  },
  {
    "text": "passing react and Redux message passing Elm message passing vuejs with its uh",
    "start": "2070599",
    "end": "2076398"
  },
  {
    "text": "flux like VX uses message passing angular one with its scope you know that was shared memory concurrency angular",
    "start": "2076399",
    "end": "2083520"
  },
  {
    "text": "two has you know almost the same thing as shared memory concurrency but then",
    "start": "2083520",
    "end": "2089560"
  },
  {
    "text": "you have ngrx which is made for angular 2 and getting ideas from ux it's also",
    "start": "2089560",
    "end": "2095839"
  },
  {
    "text": "message passing so there's a strong ter tendency towards using message passing um",
    "start": "2095839",
    "end": "2102200"
  },
  {
    "text": "concurrency and then also uh when it comes to paradigms Psycho JS wants to be",
    "start": "2102200",
    "end": "2108720"
  },
  {
    "text": "functional like and Redux and reacts is like I want to be functional uh Elm is",
    "start": "2108720",
    "end": "2115160"
  },
  {
    "text": "like functional sunglasses um VJs is",
    "start": "2115160",
    "end": "2120400"
  },
  {
    "text": "objectoriented programming angular one and two objectoriented programming ngrx is like yeah I want to be functional so",
    "start": "2120400",
    "end": "2128119"
  },
  {
    "text": "there we go yeah uh that's why we can rather confidently say or predict that in the",
    "start": "2128119",
    "end": "2134440"
  },
  {
    "text": "next few years programming and front-end programming will be mainly purely functional event driven and uh message",
    "start": "2134440",
    "end": "2142880"
  },
  {
    "text": "passing concurrency thank you so much for listening and",
    "start": "2142880",
    "end": "2150359"
  },
  {
    "text": "yeah so thanks we have some question from the app um why not use closure",
    "start": "2154160",
    "end": "2162640"
  },
  {
    "text": "script with core async you can use go ahead why",
    "start": "2162640",
    "end": "2169720"
  },
  {
    "text": "not sometimes people ask me what do I think what do I think about closure and I have to answer I have no idea because",
    "start": "2169720",
    "end": "2176200"
  },
  {
    "text": "I I haven't used closure I mean I used closure maybe for 5 hours or something like that and um what I have of opinion",
    "start": "2176200",
    "end": "2184640"
  },
  {
    "text": "of closure is what I called unqualified opinion it means that I I don't know anything",
    "start": "2184640",
    "end": "2189920"
  },
  {
    "text": "about it so you shouldn't even listen to me you know so don't listen to people who haven't ever used stuff and I don't",
    "start": "2189920",
    "end": "2196839"
  },
  {
    "text": "know it's probably good I don't know good another one um how do we",
    "start": "2196839",
    "end": "2203319"
  },
  {
    "text": "prevent developers from creating their own effects without without using",
    "start": "2203319",
    "end": "2208560"
  },
  {
    "text": "cycle how to prevent developers from using writing their own effects creting their own effects without cycle uh I I",
    "start": "2208560",
    "end": "2216800"
  },
  {
    "text": "guess the question is kind of like how can I enforce that",
    "start": "2216800",
    "end": "2221880"
  },
  {
    "text": "people are not making effects in uh JavaScript and cycle JS you can't like",
    "start": "2221880",
    "end": "2228119"
  },
  {
    "text": "really enforce there's there's an interesting eslint Plugin or preset that bod Stokes uh helped put together that",
    "start": "2228119",
    "end": "2236520"
  },
  {
    "text": "basically makes JavaScript like you know you can't use mutation can't use anything um and that's an interesting",
    "start": "2236520",
    "end": "2243240"
  },
  {
    "text": "way maybe you could use that I I have used that with cycle JS and basically",
    "start": "2243240",
    "end": "2248280"
  },
  {
    "text": "yeah that kind of works it's one way of enforcing but the idea is really uh doing this like having some discipline",
    "start": "2248280",
    "end": "2256240"
  },
  {
    "text": "um and then like maybe I can say a little bit more that like I have played",
    "start": "2256240",
    "end": "2261760"
  },
  {
    "text": "with the thought of writing a language that would be optimized for psycle JS",
    "start": "2261760",
    "end": "2266960"
  },
  {
    "text": "just like you know we have Elm and we have a bunch of different Lang languages that compile the JavaScript but it takes so much time seriously you can't imagine",
    "start": "2266960",
    "end": "2274119"
  },
  {
    "text": "how much commitment writing a language takes so I don't think I would jump into",
    "start": "2274119",
    "end": "2279240"
  },
  {
    "text": "doing that but in an alternate universe I could maybe do that great um have you discussed this",
    "start": "2279240",
    "end": "2288480"
  },
  {
    "text": "with Eric Meer uh no so the thing is like I met",
    "start": "2288480",
    "end": "2293880"
  },
  {
    "text": "Eric Meer in person um let's say month one and then uh after in month seven I",
    "start": "2293880",
    "end": "2302119"
  },
  {
    "text": "discovered about stream iio so I I didn't have time to talk to him but he knows that I like to make like analogies",
    "start": "2302119",
    "end": "2310800"
  },
  {
    "text": "between the stuff but I think the key there with stream.io is that it was blocking and it was lazy lists so we",
    "start": "2310800",
    "end": "2317119"
  },
  {
    "text": "changed those two parts and now it's asynchronous and stream so that makes a big difference I",
    "start": "2317119",
    "end": "2323240"
  },
  {
    "text": "think good um how is bind or flat map",
    "start": "2323240",
    "end": "2329160"
  },
  {
    "text": "implemented bind or flat map implemented there's like I I have to assume many",
    "start": "2329160",
    "end": "2335359"
  },
  {
    "text": "things well um bind well I I I guess the question is",
    "start": "2335359",
    "end": "2342000"
  },
  {
    "text": "about bind or flat map in the hacky JavaScript monatic IO that I talked",
    "start": "2342000",
    "end": "2349599"
  },
  {
    "text": "about but maybe this is a question that you can ask me in person it's basically yeah let's talk about yeah is hll not a",
    "start": "2349599",
    "end": "2357960"
  },
  {
    "text": "good language for reactive UI since it's using monatic IO again I'm going to play",
    "start": "2357960",
    "end": "2363359"
  },
  {
    "text": "that car I have card I have no idea because I haven't used has for um uis uh",
    "start": "2363359",
    "end": "2370560"
  },
  {
    "text": "barely use hasco for almost anything I'm still learning like how to actually use",
    "start": "2370560",
    "end": "2375760"
  },
  {
    "text": "it um but I know that has has cool stuff like Fran which is a functional reactive",
    "start": "2375760",
    "end": "2381880"
  },
  {
    "text": "programming uh library and this was also like there's a ton of work that related",
    "start": "2381880",
    "end": "2387960"
  },
  {
    "text": "to functional reactive programming that was done by Paul Hudak who's one of the main people behind H has and those kind",
    "start": "2387960",
    "end": "2394440"
  },
  {
    "text": "of things um function artive programming is mainly for user interfaces so it's mainly for like reactive programs so I'm",
    "start": "2394440",
    "end": "2402480"
  },
  {
    "text": "quite sure that hasco has really nice stuff for that good um are you planning to migrate",
    "start": "2402480",
    "end": "2409760"
  },
  {
    "text": "the code to typescript and can we use it with angular 2 uh can we use cycle with angular 2 or",
    "start": "2409760",
    "end": "2418040"
  },
  {
    "text": "can we use typescript with angular 2 think to mean cycle okay well don't use",
    "start": "2418040",
    "end": "2424839"
  },
  {
    "text": "angular with cycle okay yeah yeah okay",
    "start": "2424839",
    "end": "2431318"
  },
  {
    "text": "yeah but you are migrating the code to typescript yeah please use typescript I mean you're going to thank yourself it's",
    "start": "2431440",
    "end": "2438319"
  },
  {
    "text": "really nice I mean um so people think that there's a lot of um like like like",
    "start": "2438319",
    "end": "2445599"
  },
  {
    "text": "things that you need to do in order to use typescript but in reality let's say you can't get the typings for some",
    "start": "2445599",
    "end": "2450839"
  },
  {
    "text": "Library you can just say like you can type this as any and then you're back to the level of quality of JavaScript right",
    "start": "2450839",
    "end": "2457760"
  },
  {
    "text": "because in JavaScript everything is typed as any so it's like by adopting it",
    "start": "2457760",
    "end": "2462920"
  },
  {
    "text": "you any way will have some benefit because in code like let's say you get a",
    "start": "2462920",
    "end": "2468599"
  },
  {
    "text": "response back from the server that thing is usually typed I mean right it has some fields that you expect to be there",
    "start": "2468599",
    "end": "2474240"
  },
  {
    "text": "there's so much stuff you can benefit just by using a little bit of typescript and it's even possible that you use some",
    "start": "2474240",
    "end": "2480000"
  },
  {
    "text": "files in your project or JavaScript some files are typescript but you know this is a whole separate talk",
    "start": "2480000",
    "end": "2488079"
  },
  {
    "text": "good um let me see why Elm and cycle JS",
    "start": "2489960",
    "end": "2497440"
  },
  {
    "text": "compare to typescript or igas script 6 with reactive",
    "start": "2497440",
    "end": "2503119"
  },
  {
    "text": "JS okay um um y",
    "start": "2503119",
    "end": "2509000"
  },
  {
    "text": "l with typescript what no element cycle G compared to typescript with reactive G",
    "start": "2509000",
    "end": "2517599"
  },
  {
    "text": "ah okay I think the question is how does Elm compare to typescript like when you're using cycle with typescript Elm",
    "start": "2517599",
    "end": "2524640"
  },
  {
    "text": "will be much better obviously it's a purely functional programming language",
    "start": "2524640",
    "end": "2529680"
  },
  {
    "text": "um but you know typescript is better than JavaScript that's why we started",
    "start": "2529680",
    "end": "2535760"
  },
  {
    "text": "using typescript but you can also use JavaScript if you want um but definitely",
    "start": "2535760",
    "end": "2541960"
  },
  {
    "text": "a language like Elm will be uh much better in this regards I mean you're going to have that",
    "start": "2541960",
    "end": "2547960"
  },
  {
    "text": "uh confidence of zero runtime errors while with typescript you have this confidence of like much less runtime",
    "start": "2547960",
    "end": "2555160"
  },
  {
    "text": "errors than JavaScript but still some runtime errors thanks again thank you",
    "start": "2555160",
    "end": "2562040"
  }
]