[
  {
    "text": "[Music] hello everybody",
    "start": "3670",
    "end": "10200"
  },
  {
    "text": "um so what I want to talk to talk to you guys about today in general is",
    "start": "10200",
    "end": "16260"
  },
  {
    "text": "um I've been working on a uh series of compiler-like projects uh",
    "start": "16260",
    "end": "22260"
  },
  {
    "text": "mostly at Mary on um but I've been calling Coda for various",
    "start": "22260",
    "end": "28320"
  },
  {
    "text": "reasons um it started out because I was working with an Italian guy uh also turns out to be a nice musical",
    "start": "28320",
    "end": "35219"
  },
  {
    "text": "term for the kind of piece that comes at the end of a piece of",
    "start": "35219",
    "end": "41340"
  },
  {
    "text": "um the project that I want to talk about",
    "start": "41340",
    "end": "46680"
  },
  {
    "text": "today is a sort of build up Dakota um it's the the so I've been calling it",
    "start": "46680",
    "end": "53160"
  },
  {
    "text": "uh Cadenza which in musical terms is like this like virtuosic solo thing that",
    "start": "53160",
    "end": "58320"
  },
  {
    "text": "comes right before the Dakota in a in a production um",
    "start": "58320",
    "end": "64220"
  },
  {
    "text": "and what it's about here is trying to find a better way to do",
    "start": "64220",
    "end": "71400"
  },
  {
    "text": "evaluation for functional programming languages okay so Stephanie's talk just spent a",
    "start": "71400",
    "end": "80640"
  },
  {
    "text": "significant amount of uh time setting up what substitution is and so I'm going to",
    "start": "80640",
    "end": "85799"
  },
  {
    "text": "try and do the same thing without substitution",
    "start": "85799",
    "end": "90320"
  },
  {
    "text": "let's see if I can uh so I work at Mary Mary is the machine intelligence Research Institute we do",
    "start": "92700",
    "end": "99000"
  },
  {
    "text": "research into AI safety and what that even means I'm happy to discuss that at",
    "start": "99000",
    "end": "104579"
  },
  {
    "text": "length I don't really have uh time here in the in the slides that we have",
    "start": "104579",
    "end": "110880"
  },
  {
    "text": "um so what I want is a fast evaluator um I want a fast type checker for",
    "start": "110880",
    "end": "117000"
  },
  {
    "text": "dependently type languages um and I want fast inference and",
    "start": "117000",
    "end": "122100"
  },
  {
    "text": "compiler like execution speed um four dependently type languages which",
    "start": "122100",
    "end": "127439"
  },
  {
    "text": "is hard because you don't really have the phase separation between Type checking and runtime as cleanly as you",
    "start": "127439",
    "end": "133200"
  },
  {
    "text": "do with other uh languages and I'm willing to do whatever horrible Grody",
    "start": "133200",
    "end": "139020"
  },
  {
    "text": "low-level nasty thing um like Jed may have alluded to in his introduction uh to make that happen and",
    "start": "139020",
    "end": "146520"
  },
  {
    "text": "in particular I'm willing to lean on Oracle and their work on grow and",
    "start": "146520",
    "end": "152220"
  },
  {
    "text": "truffle which I'll explain in a second so what is Graw um so the Java virtual machine has had a",
    "start": "152220",
    "end": "160319"
  },
  {
    "text": "like The Hot Spot jvm has had a jit that has been written in C plus plus like",
    "start": "160319",
    "end": "165780"
  },
  {
    "text": "pretty much since its Inception it's called C2 um and at the risk of",
    "start": "165780",
    "end": "173940"
  },
  {
    "text": "um uh attacking other people's work it is",
    "start": "173940",
    "end": "180599"
  },
  {
    "text": "a mess uh it has been around since dirt it's pre C plus plus 11. it's it's it's",
    "start": "180599",
    "end": "187200"
  },
  {
    "text": "hard to maintain almost nothing happens if you look at release announcements for Java they basically never say anything",
    "start": "187200",
    "end": "193620"
  },
  {
    "text": "new about legit they always say something weird about a garbage collector or something",
    "start": "193620",
    "end": "198840"
  },
  {
    "text": "um so there's been a Holy Grail project uh to replace the jit that's in the jvm",
    "start": "198840",
    "end": "204959"
  },
  {
    "text": "with one that's written in Java okay so Growler crawl I can't pronounce it",
    "start": "204959",
    "end": "210120"
  },
  {
    "text": "correctly is a uh jit for the jvm written in Java",
    "start": "210120",
    "end": "216420"
  },
  {
    "text": "um and it has an interesting sort of approach to things what it does is it",
    "start": "216420",
    "end": "221640"
  },
  {
    "text": "acts more or less like a function from byte code in to assembly up uh you can",
    "start": "221640",
    "end": "228060"
  },
  {
    "text": "basically look at the jvmci if you poke the the jvm compiler interface and if",
    "start": "228060",
    "end": "233519"
  },
  {
    "text": "you like look under the hood there's a few other things here for signatures and whatnot but materially it looks like you give me my",
    "start": "233519",
    "end": "240299"
  },
  {
    "text": "code I will give you assembly and then um Oracle abstracted over this and",
    "start": "240299",
    "end": "246900"
  },
  {
    "text": "enabled both C2 and grawl to implement this interface now internally what growl does is it",
    "start": "246900",
    "end": "253379"
  },
  {
    "text": "takes your byte code and it compiles it into a big graph where this graph has all of the like they can do all the",
    "start": "253379",
    "end": "260040"
  },
  {
    "text": "Escape analysis on it and like this depends on this um",
    "start": "260040",
    "end": "265699"
  },
  {
    "text": "and they take that and they produce assembly and the assembly has little like",
    "start": "265699",
    "end": "271919"
  },
  {
    "text": "slow path cases where oh wait we didn't bother to compile that yet so let's go back mangle the graph and then when we",
    "start": "271919",
    "end": "278100"
  },
  {
    "text": "recompile from the graph the rest of the way to assembly we'll fill in more of the cases as we need um the Java virtual machine is very good",
    "start": "278100",
    "end": "285360"
  },
  {
    "text": "at a thing called de-optimization unironically which is that it starts assuming that it can get away with",
    "start": "285360",
    "end": "291540"
  },
  {
    "text": "things and then gradually accepts when it can't this is an important way that",
    "start": "291540",
    "end": "297479"
  },
  {
    "text": "they are able to get away with making basically every function be able to be a virtual function call um it's part of the legacy of the way",
    "start": "297479",
    "end": "303240"
  },
  {
    "text": "the jvm works okay so um",
    "start": "303240",
    "end": "308820"
  },
  {
    "text": "truffle is a language framework that sits on top of girl",
    "start": "308820",
    "end": "315419"
  },
  {
    "text": "and you write your interpreter for your little interpreted language you're not",
    "start": "315419",
    "end": "321960"
  },
  {
    "text": "even little Ruby JavaScript python R all of these languages have",
    "start": "321960",
    "end": "328919"
  },
  {
    "text": "truffle based interpreters and by writing your interpreter in truffle what you're able to do is you're",
    "start": "328919",
    "end": "335400"
  },
  {
    "text": "able to get help from Grom basically what you're able to do is sort of implement those",
    "start": "335400",
    "end": "340740"
  },
  {
    "text": "nodes in the graph and tell it how to downgrade how to de-optimize your code when you failed to",
    "start": "340740",
    "end": "346440"
  },
  {
    "text": "actually meet the conditions that you needed for the more optimal code paths",
    "start": "346440",
    "end": "351960"
  },
  {
    "text": "um and this has been rather clever um like there's been other work in this space like Pi Pi is an attempt to build",
    "start": "351960",
    "end": "357539"
  },
  {
    "text": "a python interpreter by building it in Python more or less you build it in a restricted dialect of python but the problem is is that whenever",
    "start": "357539",
    "end": "364800"
  },
  {
    "text": "um all it can do is jit harder at a given point it doesn't actually get to you",
    "start": "364800",
    "end": "370380"
  },
  {
    "text": "don't get to instrument and tell it how to get your code and that's something that truffle does",
    "start": "370380",
    "end": "377759"
  },
  {
    "text": "fairly uniquely in this space so what I want to talk about um a bit is an evaluation style for a",
    "start": "377759",
    "end": "384180"
  },
  {
    "text": "Lambda calculus and I'll do it by just we'll just Live code one um right now",
    "start": "384180",
    "end": "389699"
  },
  {
    "text": "um to build a little normalization by evaluation interpreter okay um hopefully this will not go horribly",
    "start": "389699",
    "end": "397020"
  },
  {
    "text": "wrong if not if it does I've got a piece of it lying around here um do I have can",
    "start": "397020",
    "end": "402840"
  },
  {
    "text": "you um Jeb can you double check that you can see both of uh",
    "start": "402840",
    "end": "408419"
  },
  {
    "text": "all right I will set this to an appropriate size um if it's too small feel free to pop up",
    "start": "408419",
    "end": "415139"
  },
  {
    "text": "in QA Edward or whatever and let me know uh so what I want to do is",
    "start": "415139",
    "end": "421680"
  },
  {
    "text": "I'm going to start with a very simple version of names and we're going to write the",
    "start": "421680",
    "end": "426720"
  },
  {
    "text": "dumbest possible Lambda calculus interpreter so an expression is a value which is a",
    "start": "426720",
    "end": "434340"
  },
  {
    "text": "name or it's an application of an expression to an expression or it's a Lambda which captures a name and has a",
    "start": "434340",
    "end": "440940"
  },
  {
    "text": "font let's say that that's how I'm gonna view my Expressions this is none of the safety that Stephanie just spent the",
    "start": "440940",
    "end": "447599"
  },
  {
    "text": "last hour or so building um and for me what I want to be able to do is I want to write an email function",
    "start": "447599",
    "end": "453180"
  },
  {
    "text": "and it's going to have to do something like well it could fail it's going to take an environment and an expression",
    "start": "453180",
    "end": "459060"
  },
  {
    "text": "and give me back uh value whatever that is like this is going to try and produce the crunch down",
    "start": "459060",
    "end": "465120"
  },
  {
    "text": "version of this all right I don't know what a value is yet we'll make it up when we need it",
    "start": "465120",
    "end": "471560"
  },
  {
    "text": "and let's just figure out what eval should do um and I'm using monad fail here because we can fail we don't know like if the",
    "start": "475919",
    "end": "482940"
  },
  {
    "text": "environment if the thing is not in the environment we don't have all the fancy types that she gave us so to eval in an",
    "start": "482940",
    "end": "488759"
  },
  {
    "text": "environment variable X we're going to like look up um X in the environment and if we don't",
    "start": "488759",
    "end": "495660"
  },
  {
    "text": "find it we're going to fail with a programmer grade error message",
    "start": "495660",
    "end": "500360"
  },
  {
    "text": "um and if we do find it we're going to give back that value",
    "start": "500699",
    "end": "506240"
  },
  {
    "text": "and then to evaluate an application all we know how to do is eval so we'll eval",
    "start": "506819",
    "end": "512700"
  },
  {
    "text": "F and we'll eval X and we'll get those as values",
    "start": "512700",
    "end": "520620"
  },
  {
    "text": "and we'll come up with some definition of what it even means to apply function to a value",
    "start": "520620",
    "end": "527300"
  },
  {
    "text": "and then finally I don't know what apply is but it's going to take",
    "start": "527580",
    "end": "533000"
  },
  {
    "text": "two values and give me a value possibly blowing up in my face because of",
    "start": "533540",
    "end": "540480"
  },
  {
    "text": "bad terms when we have if we get around to building a type Checker which we I'll",
    "start": "540480",
    "end": "546060"
  },
  {
    "text": "skip to the end at the end um all this monad fail stuff will disappear from eval we'll just assume",
    "start": "546060",
    "end": "551220"
  },
  {
    "text": "that the type Checker did its job and left you only with sound trips",
    "start": "551220",
    "end": "556440"
  },
  {
    "text": "um and then finally we have Lambda and I've got some variable that I want to bind in the body and I don't know",
    "start": "556440",
    "end": "562080"
  },
  {
    "text": "what this is but I do know that whatever it is is going to be a function of e x and B here",
    "start": "562080",
    "end": "568200"
  },
  {
    "text": "it's going to be a function of the environment a function of what variable I want to extend the environment with and the body I want to run it with",
    "start": "568200",
    "end": "574140"
  },
  {
    "text": "so why don't we just Define a value that has all that stuff right this is sort of the initial Choice like everything else",
    "start": "574140",
    "end": "581760"
  },
  {
    "text": "would be a function of this um so we got a environment a name and an",
    "start": "581760",
    "end": "587220"
  },
  {
    "text": "expression this will be just give me the closure with e x and B in it",
    "start": "587220",
    "end": "594620"
  },
  {
    "text": "and now we can finally get around to defining apply because we have a case to analyze",
    "start": "594839",
    "end": "599880"
  },
  {
    "text": "I want to apply this closure to this value so this is the function that we've we've",
    "start": "599880",
    "end": "606180"
  },
  {
    "text": "built and this is the argument that we want to pass it and the only thing we know how to do is eval",
    "start": "606180",
    "end": "612240"
  },
  {
    "text": "so we're going to eval in an environment that has been extended with X set to Value V",
    "start": "612240",
    "end": "619519"
  },
  {
    "text": "the bottom okay and what do we have here I didn't tell",
    "start": "620459",
    "end": "626940"
  },
  {
    "text": "you what an environment is a environment is a list of pairs of names and values because",
    "start": "626940",
    "end": "632700"
  },
  {
    "text": "I'm and what did I screw up this is bar",
    "start": "632700",
    "end": "638339"
  },
  {
    "text": "there we go that looks like we've got it I'm going to skip just a",
    "start": "638339",
    "end": "643620"
  },
  {
    "text": "like a little bit of the boring stuff here what I've added is a little program",
    "start": "643620",
    "end": "650640"
  },
  {
    "text": "uh construct that takes an environment like full of expressions and gives me an environment full of values this",
    "start": "650640",
    "end": "655920"
  },
  {
    "text": "basically just runs through the list and gives me all the names for all the things that came before",
    "start": "655920",
    "end": "661140"
  },
  {
    "text": "bound to what they evaluated to and in this case what I'm doing is I'm",
    "start": "661140",
    "end": "666360"
  },
  {
    "text": "writing a program I'm saying the identity function takes Lambda X and gives back X",
    "start": "666360",
    "end": "672120"
  },
  {
    "text": "the constant function uh is Lambda X gives back Lambda y gives",
    "start": "672120",
    "end": "677220"
  },
  {
    "text": "back X so it gives back the first of two arguments and I'm applying the constant function to Identity which",
    "start": "677220",
    "end": "683820"
  },
  {
    "text": "in Haskell",
    "start": "683820",
    "end": "686600"
  },
  {
    "text": "will give me the function that gives back its second argument and if we look at if we run Haskell",
    "start": "689519",
    "end": "697320"
  },
  {
    "text": "um and zero",
    "start": "697320",
    "end": "701420"
  },
  {
    "text": "we get this mess we get this I'll move it up to the center of the screen",
    "start": "703200",
    "end": "709320"
  },
  {
    "text": "we get this closure of um X closure X bar X in closure like",
    "start": "709320",
    "end": "716640"
  },
  {
    "text": "that is theoretically this function but we can't see it we we have it in weird terms we have it in values and the users",
    "start": "716640",
    "end": "723360"
  },
  {
    "text": "never talked about values like we made up this thing and we said that's the thing",
    "start": "723360",
    "end": "729060"
  },
  {
    "text": "um so what I want is a way to turn a value back into an expression and the technique that I'm going to use is something called normalization by",
    "start": "729060",
    "end": "734940"
  },
  {
    "text": "evaluation um",
    "start": "734940",
    "end": "741180"
  },
  {
    "text": "so I'm going to start from here where we got this full front uh",
    "start": "741180",
    "end": "746339"
  },
  {
    "text": "this full program so like the real issue was that when I went to to build this I ran my example",
    "start": "746339",
    "end": "751500"
  },
  {
    "text": "and it gave me back a value and I would like this to give me back an expression so I need is like an inverse to eval I",
    "start": "751500",
    "end": "757920"
  },
  {
    "text": "need something that can sort of uneval a value and give me back an expression",
    "start": "757920",
    "end": "763139"
  },
  {
    "text": "and because we're without a type Checker right now it could blow up",
    "start": "763139",
    "end": "770000"
  },
  {
    "text": "and then if I had that then I could write a little normalization uh uh a a way to compute normal forms that does",
    "start": "770519",
    "end": "777959"
  },
  {
    "text": "this by taking a expression it gives me back an expression and it works by",
    "start": "777959",
    "end": "784560"
  },
  {
    "text": "um let's make it take an environment all this expression in this environment",
    "start": "784560",
    "end": "793019"
  },
  {
    "text": "term giving back a value and then we'll just uneval",
    "start": "793019",
    "end": "798300"
  },
  {
    "text": "the value okay and so if we were to take this example here and replace this called the eval",
    "start": "798300",
    "end": "804420"
  },
  {
    "text": "with NF here this will give back an expression which is in terms the user actually understands and I want to give",
    "start": "804420",
    "end": "811260"
  },
  {
    "text": "you back the the normalized Lambda calculus term but I want to give it back to you in normal form",
    "start": "811260",
    "end": "819180"
  },
  {
    "text": "um so how can we do that so I have to make a small like unmotivated decision here",
    "start": "819180",
    "end": "827399"
  },
  {
    "text": "I need like the ability to like make a fresh name a name that doesn't occur in a set of names",
    "start": "827399",
    "end": "832860"
  },
  {
    "text": "I'll take a list of names and a name and give you back a name and um fresh X's X is something like well if",
    "start": "832860",
    "end": "840480"
  },
  {
    "text": "x is an element of the names that I want to forbid I'm going to Fresh X's X",
    "start": "840480",
    "end": "848459"
  },
  {
    "text": "Prime sure this is not having this is not endeavoring to be efficient I will get",
    "start": "848459",
    "end": "855480"
  },
  {
    "text": "to the efficient part after we've seen the basics um otherwise we're going to give you back X",
    "start": "855480",
    "end": "861180"
  },
  {
    "text": "and then Ani Val is actually going to take a list of names to forbid so I'll start here",
    "start": "861180",
    "end": "867839"
  },
  {
    "text": "um and so to unival well the only case that we have",
    "start": "867839",
    "end": "873300"
  },
  {
    "text": "is the closure case right now I need to",
    "start": "873300",
    "end": "878880"
  },
  {
    "text": "let X Prime because it's probably going to be X Prime um be a fresh version of x",
    "start": "878880",
    "end": "884600"
  },
  {
    "text": "in X's and then",
    "start": "884600",
    "end": "890339"
  },
  {
    "text": "what do we need to do here we're going to need um to email",
    "start": "890339",
    "end": "897079"
  },
  {
    "text": "the body in but we don't have an argument so how can we extend our environment",
    "start": "897079",
    "end": "905160"
  },
  {
    "text": "we need to eval the body in an environment e where X has been bound to something magical and what it",
    "start": "905160",
    "end": "912899"
  },
  {
    "text": "what that something magical has to do is when it's fed to unival it needs to turn into VAR X Prime",
    "start": "912899",
    "end": "921800"
  },
  {
    "text": "so we we we've got like this notion of a variable that we should not try and look up in the environment something stuck",
    "start": "922920",
    "end": "930839"
  },
  {
    "text": "um the term that's usually used for this is a neutral term",
    "start": "930839",
    "end": "935060"
  },
  {
    "text": "and I'm going to extend my values with a notion of neutral",
    "start": "936120",
    "end": "941959"
  },
  {
    "text": "and right now eval doesn't produce any neutral terms like if you give it if you give eval a term that doesn't have",
    "start": "942959",
    "end": "949079"
  },
  {
    "text": "anything neutral in it you'll get a term that doesn't have anything neutral in it or you'll get a value that doesn't have any fancy neutral terms in it",
    "start": "949079",
    "end": "957420"
  },
  {
    "text": "um but what I want is a notion of a variable that's a name that when fed to",
    "start": "957420",
    "end": "962699"
  },
  {
    "text": "unival",
    "start": "962699",
    "end": "965420"
  },
  {
    "text": "just gives me back VAR X because I'm going to have a have a couple more neutral terms over time what",
    "start": "969240",
    "end": "975480"
  },
  {
    "text": "I'm going to do is I'm going to just make a Little Helper for unevaluating neutral",
    "start": "975480",
    "end": "980639"
  },
  {
    "text": "terms [Applause] and list of names give me back a neutral",
    "start": "980639",
    "end": "988139"
  },
  {
    "text": "giving back an expression okay um neutral X's n Bar X is just here's your",
    "start": "988139",
    "end": "996839"
  },
  {
    "text": "varex okay so now what I can do is I can smuggle in I want X to evaluate to a",
    "start": "996839",
    "end": "1002720"
  },
  {
    "text": "stuck X Prime and this gets me back uh value for the",
    "start": "1002720",
    "end": "1009680"
  },
  {
    "text": "body and then what I want to do is I want to say okay Lambda X Prime on eval",
    "start": "1009680",
    "end": "1018160"
  },
  {
    "text": "um in the context X Prime extending X's is",
    "start": "1018320",
    "end": "1024079"
  },
  {
    "text": "the the body so what we've done here is we've we've figured out a way to pass a new magic",
    "start": "1024079",
    "end": "1030438"
  },
  {
    "text": "argument to eval here's a term that eval will like",
    "start": "1030439",
    "end": "1036740"
  },
  {
    "text": "never do anything to and we left the evaluator alone the eval",
    "start": "1036740",
    "end": "1041839"
  },
  {
    "text": "code didn't change at all we're left with the same evaluator that we had all along the only thing we have to change is this",
    "start": "1041839",
    "end": "1047660"
  },
  {
    "text": "little apply function because now apply has to worry about the fact that it might get a neutral term of its own like",
    "start": "1047660",
    "end": "1053360"
  },
  {
    "text": "when you passed it we passed it before it would only see closures now it could see neutral terms",
    "start": "1053360",
    "end": "1059660"
  },
  {
    "text": "so what I need to do is I need to come down to apply and say hey apply you could be applying",
    "start": "1059660",
    "end": "1065720"
  },
  {
    "text": "a neutral term n to some value but I don't know how to know how to do with this this is like some argument to",
    "start": "1065720",
    "end": "1071600"
  },
  {
    "text": "a Lambda I haven't I'm I snuck under a Lambda and I told it hey here's a magic argument any attempt to apply that to",
    "start": "1071600",
    "end": "1079160"
  },
  {
    "text": "um another argument needs to build up something that will when it's fed to",
    "start": "1079160",
    "end": "1084740"
  },
  {
    "text": "unival give me back an application so I need to give back like a neutral",
    "start": "1084740",
    "end": "1090559"
  },
  {
    "text": "some kind of neutral application of n to V where we can say what a neutral",
    "start": "1090559",
    "end": "1095900"
  },
  {
    "text": "application is this is I'll take a neutral term on the left and any value on the right",
    "start": "1095900",
    "end": "1103000"
  },
  {
    "text": "so what we've done is we've made up this magical class of extra values these neutral terms",
    "start": "1104840",
    "end": "1110919"
  },
  {
    "text": "and we were able to unival one of them and into unival neutral x's and app FX",
    "start": "1111160",
    "end": "1119660"
  },
  {
    "text": "we do what we do app of unival neutral X",
    "start": "1119660",
    "end": "1125240"
  },
  {
    "text": "IS F and then unival because this is an arbitrary",
    "start": "1125240",
    "end": "1131320"
  },
  {
    "text": "um value the thing on the right",
    "start": "1131419",
    "end": "1136580"
  },
  {
    "text": "and with that if I didn't screw this up horribly",
    "start": "1136580",
    "end": "1143559"
  },
  {
    "text": "zero screw up 49 environment oh I've said",
    "start": "1145520",
    "end": "1152120"
  },
  {
    "text": "that environments are environments full of values now I change the way that worked",
    "start": "1152120",
    "end": "1157900"
  },
  {
    "text": "and 41 what did I typo here this would be the cons",
    "start": "1158600",
    "end": "1166539"
  },
  {
    "text": "and 56 we had this is pure of this",
    "start": "1168440",
    "end": "1174440"
  },
  {
    "text": "all right in theory if I run Haskell let me do that in this window",
    "start": "1174440",
    "end": "1181360"
  },
  {
    "text": "this program we actually get the output that the user",
    "start": "1182179",
    "end": "1189320"
  },
  {
    "text": "would expect we get Lambda y Lambda X variable X right we get the term in the",
    "start": "1189320",
    "end": "1195200"
  },
  {
    "text": "user's language so this is the idea of normalization by evaluation what we do is we use the",
    "start": "1195200",
    "end": "1201140"
  },
  {
    "text": "evaluator with some extra terms that We snuck in that like act like a little",
    "start": "1201140",
    "end": "1206480"
  },
  {
    "text": "ball of tar any attempt to interact with them any attempt to eliminate them builds a bigger ball of tar that has",
    "start": "1206480",
    "end": "1211580"
  },
  {
    "text": "like the sequence of instructions that you wanted to do to the thing so this is what normalization by",
    "start": "1211580",
    "end": "1217100"
  },
  {
    "text": "evaluation is um so now what I want to do is take this a little bit further",
    "start": "1217100",
    "end": "1224059"
  },
  {
    "text": "um and if we look at uh I want to show just a bit of a Lambda",
    "start": "1224059",
    "end": "1229880"
  },
  {
    "text": "calculus with some extra bells and whistles I'm not going to go through this in full detail but I wanted to show that like if we wanted to have if",
    "start": "1229880",
    "end": "1235940"
  },
  {
    "text": "expressions and we wanted like induction on the naturals we could totally fit",
    "start": "1235940",
    "end": "1240980"
  },
  {
    "text": "that into this framework if we want to have something that feels a lot like the system F ish environment that we had",
    "start": "1240980",
    "end": "1247160"
  },
  {
    "text": "earlier where we have types and well this is still like the simply type calculus but like we've got we've got",
    "start": "1247160",
    "end": "1252860"
  },
  {
    "text": "types with booleans and Naturals we could have it we Define and infer and",
    "start": "1252860",
    "end": "1258020"
  },
  {
    "text": "check which are responsible for computing the type and have the monad fail constraint",
    "start": "1258020",
    "end": "1263720"
  },
  {
    "text": "but then eval gets to get away without not having one like because we've handled all the errors all of the",
    "start": "1263720",
    "end": "1269600"
  },
  {
    "text": "ill-formed environments were captured but were handled by inferring and checking in this little bi-directional type check",
    "start": "1269600",
    "end": "1276760"
  },
  {
    "text": "so why am I going through all this pain um so",
    "start": "1276799",
    "end": "1282260"
  },
  {
    "text": "my goal here is to if I is to observe a couple of things about my Expressions",
    "start": "1282260",
    "end": "1289400"
  },
  {
    "text": "here um what did we need um out of expression expert in order to",
    "start": "1289400",
    "end": "1296299"
  },
  {
    "text": "run an expression all we needed was that eval existed we",
    "start": "1296299",
    "end": "1303200"
  },
  {
    "text": "needed some way to take an environment and spit out a value this an expression is really a function from an environment",
    "start": "1303200",
    "end": "1309140"
  },
  {
    "text": "full of values to a value right like that's what we need like we",
    "start": "1309140",
    "end": "1314659"
  },
  {
    "text": "we unival to produce a new expression but like eval just needs to be able to take",
    "start": "1314659",
    "end": "1319880"
  },
  {
    "text": "values to values so any efficient machine representation",
    "start": "1319880",
    "end": "1325039"
  },
  {
    "text": "could be dropped in here for this expression at this point",
    "start": "1325039",
    "end": "1330799"
  },
  {
    "text": "and I don't have to capture the entire environment I only really need to capture like you know what did I need",
    "start": "1330799",
    "end": "1338380"
  },
  {
    "text": "um and then down here in uh like so like what do I need to capture",
    "start": "1340039",
    "end": "1348320"
  },
  {
    "text": "I could like pre-compute which freak variables are free inside this expression and capture just those things this is like how you build like a small",
    "start": "1348320",
    "end": "1355640"
  },
  {
    "text": "frame with just what your function needs what you need for your closure the more",
    "start": "1355640",
    "end": "1361880"
  },
  {
    "text": "efficient closure representation than a big link list and then this expression can just be like an arbitrary",
    "start": "1361880",
    "end": "1368659"
  },
  {
    "text": "program like a bit of Assembly Language that knows how to take in those values and spit out the answer",
    "start": "1368659",
    "end": "1373940"
  },
  {
    "text": "so like we can move to a more efficient form we can move to a more efficient form by giving it a list of names and",
    "start": "1373940",
    "end": "1379039"
  },
  {
    "text": "giving it a list of Expressions that so you apply multiple arguments at a time like I'm just slowly trying to build",
    "start": "1379039",
    "end": "1385039"
  },
  {
    "text": "towards like what a more efficient machine representation looks like and it builds off of the same",
    "start": "1385039",
    "end": "1391039"
  },
  {
    "text": "kind of model so to run an expression I just need to",
    "start": "1391039",
    "end": "1396440"
  },
  {
    "text": "be able to call eval on it so let's define it as an object that has eval as a member",
    "start": "1396440",
    "end": "1403820"
  },
  {
    "text": "um and then what we can do is we can sort",
    "start": "1403820",
    "end": "1409340"
  },
  {
    "text": "of like break apart the concept of a program into like terms or like Source terms or something like that",
    "start": "1409340",
    "end": "1415520"
  },
  {
    "text": "terms type check um into terms that we can actually work with terms get compiled into Expressions",
    "start": "1415520",
    "end": "1421820"
  },
  {
    "text": "which you know how to manipulate values we can take that into a value and we can convert a value back into a term",
    "start": "1421820",
    "end": "1428419"
  },
  {
    "text": "if we had to or into an expression but I like to get through like this like this chain of",
    "start": "1428419",
    "end": "1435080"
  },
  {
    "text": "like well I start with the source term like the thing the user gave me I get you a thing that's been type checked or",
    "start": "1435080",
    "end": "1440720"
  },
  {
    "text": "like that I can use it for type checking purposes I can use that to get me to do Expressions where Expressions just have",
    "start": "1440720",
    "end": "1447140"
  },
  {
    "text": "eval those manipulate values values can be converted into normal forms normal forms can be compared for equality",
    "start": "1447140",
    "end": "1453500"
  },
  {
    "text": "quickly they're they're for like um I I want to be able to do like quick",
    "start": "1453500",
    "end": "1459200"
  },
  {
    "text": "Alpha quality checks on those things and then I need to be able to convert those back into Expressions without having to",
    "start": "1459200",
    "end": "1464299"
  },
  {
    "text": "go through the whole type checking process and once we've we've split apart the",
    "start": "1464299",
    "end": "1471320"
  },
  {
    "text": "role of a term into like these three or four different things we can have a very efficient evaluator",
    "start": "1471320",
    "end": "1479380"
  },
  {
    "text": "in particular what I'm doing in Cadenza is let's see if I can pull the slides",
    "start": "1479380",
    "end": "1486200"
  },
  {
    "text": "back up wherever I put them foreign",
    "start": "1486200",
    "end": "1492220"
  },
  {
    "text": "is um Implement in kotlin of all things a",
    "start": "1493520",
    "end": "1501080"
  },
  {
    "text": "Lambda calculus interpreter with a normalization by evaluation environment um and why why kotlin well basically I",
    "start": "1501080",
    "end": "1509059"
  },
  {
    "text": "have to run on the jvm in order to be able to use growl I get to use their jit and by having a jit here what I get is a",
    "start": "1509059",
    "end": "1515840"
  },
  {
    "text": "jit for the evaluator for my dependently type language it like gets to jit the",
    "start": "1515840",
    "end": "1521900"
  },
  {
    "text": "type level problems that I have like when I have to evaluate a big type that's an evaluator and it was currently",
    "start": "1521900",
    "end": "1528980"
  },
  {
    "text": "normally we would sit there and evaluate that by churning and churning and churning with a bunch of substitutions which are big and slow and often",
    "start": "1528980",
    "end": "1535279"
  },
  {
    "text": "quadratic and often like linear in the size of the term um and we really only care about it when",
    "start": "1535279",
    "end": "1540919"
  },
  {
    "text": "we actually go to like compare two types at the end",
    "start": "1540919",
    "end": "1545020"
  },
  {
    "text": "um so what I want is an efficient a very efficient evaluator that can get and get",
    "start": "1546020",
    "end": "1551900"
  },
  {
    "text": "me something like native evaluation performance I'm using kotlin rather than Java mainly because it winds up about a",
    "start": "1551900",
    "end": "1557539"
  },
  {
    "text": "fifth as verbose um all the grawl and truffle examples are in Java I try to do it in Scala",
    "start": "1557539",
    "end": "1563779"
  },
  {
    "text": "Scala doesn't do the Java annotation pre-processing stuff that you need so I",
    "start": "1563779",
    "end": "1569480"
  },
  {
    "text": "wound up in kotlin for some reason um I don't love kotlin but it worked as a",
    "start": "1569480",
    "end": "1576919"
  },
  {
    "text": "better Java um this is definitely a work in progress now I'm going to start tearing down the",
    "start": "1576919",
    "end": "1582500"
  },
  {
    "text": "dream a bit um so again normalization my evaluation lets us run anything that we can map",
    "start": "1582500",
    "end": "1588440"
  },
  {
    "text": "back to our expression domain um the main thing that I'm interested in",
    "start": "1588440",
    "end": "1593600"
  },
  {
    "text": "doing this for is to um use a technique that is stolen from",
    "start": "1593600",
    "end": "1599600"
  },
  {
    "text": "the self and small talk world the notion of a polymorphic inline cache okay and the idea is something like this",
    "start": "1599600",
    "end": "1606500"
  },
  {
    "text": "like when you have a virtual function call in C plus um normal what what that's implemented",
    "start": "1606500",
    "end": "1612140"
  },
  {
    "text": "by is you um there's a pointer to a virtual function table at the beginning of your",
    "start": "1612140",
    "end": "1618320"
  },
  {
    "text": "object or at the end of your object um you look in there for what function to do you call it with a reference to",
    "start": "1618320",
    "end": "1623419"
  },
  {
    "text": "the object and you go about your business um Java does everything with virtual function calls and so this would be too",
    "start": "1623419",
    "end": "1630260"
  },
  {
    "text": "slow so what they do instead is they dynamically write a piece of code basically they assume that if you called",
    "start": "1630260",
    "end": "1636020"
  },
  {
    "text": "a virtual function call on a shape and it was a circle last time it'll probably be a circle next time so they like test",
    "start": "1636020",
    "end": "1642080"
  },
  {
    "text": "to see is this a circle and then jump directly to the code and it's a branch rather than a jump to another address",
    "start": "1642080",
    "end": "1648200"
  },
  {
    "text": "um and then if it's not then they start building more and more cases until they finally give up and they go to the C",
    "start": "1648200",
    "end": "1653299"
  },
  {
    "text": "plus stop um this is this is the notion of a polymorphic inline caching",
    "start": "1653299",
    "end": "1659240"
  },
  {
    "text": "um when I go to evaluate functional languages I need my own notion of a polymorphic inline cache I need",
    "start": "1659240",
    "end": "1664940"
  },
  {
    "text": "something that is already aware because we over or under apply functions in Haskell and you just don't do that in Java so it's own thing and fortunately",
    "start": "1664940",
    "end": "1672080"
  },
  {
    "text": "with truffle what I get is enough support to be able to write the slow path for hey this wasn't a function I",
    "start": "1672080",
    "end": "1677539"
  },
  {
    "text": "expected before and to substitute in my own like fallback procedure",
    "start": "1677539",
    "end": "1682760"
  },
  {
    "text": "right I can I can make it gradually rewrite itself into the right program with its own properly structured",
    "start": "1682760",
    "end": "1689600"
  },
  {
    "text": "polymorphic and lung cache um the next step is trampolining like those of you who have written Scala are",
    "start": "1689600",
    "end": "1696620"
  },
  {
    "text": "aware that if you go to use a monad in say Scala Zed you suffer a great deal",
    "start": "1696620",
    "end": "1704360"
  },
  {
    "text": "um for the privilege of doing punctual programming in Scala um like I've seen 50x performance hits",
    "start": "1704360",
    "end": "1710720"
  },
  {
    "text": "pretty regularly um for the cost of trampolining so what we want to do is we want",
    "start": "1710720",
    "end": "1716720"
  },
  {
    "text": "trampolining we want tail call optimization and we have to run on the jvm so we're kind of hosed but there",
    "start": "1716720",
    "end": "1724100"
  },
  {
    "text": "there are a couple of things that are available to us one is that um with truffle you can specify how to",
    "start": "1724100",
    "end": "1731179"
  },
  {
    "text": "do tail call optimization you can you can build a trampoline by hand you can build exception based control flow",
    "start": "1731179",
    "end": "1737299"
  },
  {
    "text": "tricks that literally throw an exception and then through the magic of Escape analysis turn into the tight Loop that",
    "start": "1737299",
    "end": "1743120"
  },
  {
    "text": "you actually want um but to do that for a functional language",
    "start": "1743120",
    "end": "1749179"
  },
  {
    "text": "I have to actually build a series of trampolines that sort of degrade in quality",
    "start": "1749179",
    "end": "1756400"
  },
  {
    "text": "um I use an email apply style like GHC does under the hood um basically pass you all the arguments",
    "start": "1756679",
    "end": "1763399"
  },
  {
    "text": "that I have and then use the knowledge that I have about the arity of the target to try and make it take as many",
    "start": "1763399",
    "end": "1768679"
  },
  {
    "text": "arguments as it wants rather than pushing them onto a stack which is too oblivious to the caller uh to the colleague",
    "start": "1768679",
    "end": "1775640"
  },
  {
    "text": "um environment trimming like like I'm working on a haskell-like language so if",
    "start": "1775640",
    "end": "1780740"
  },
  {
    "text": "I were to just like use JavaScript or python style like hey I have an",
    "start": "1780740",
    "end": "1786320"
  },
  {
    "text": "environment a reference to some local namespace which references in the local names another local namespace I would",
    "start": "1786320",
    "end": "1792860"
  },
  {
    "text": "say for all of the huge space leaks that you often get in those languages and the people just don't diagnose because",
    "start": "1792860",
    "end": "1798260"
  },
  {
    "text": "they're working in the scripting language um so I want like GHC style environment trimming",
    "start": "1798260",
    "end": "1804080"
  },
  {
    "text": "um and uh let's just skip that last minute so",
    "start": "1804080",
    "end": "1812679"
  },
  {
    "text": "the goal here is to let us tell the jvm how we want to jit",
    "start": "1813740",
    "end": "1820039"
  },
  {
    "text": "so we can get smarter rather than just harder um there are a number of other like",
    "start": "1820039",
    "end": "1825080"
  },
  {
    "text": "extrinsic like extra benefits for working um through truffle here which is that we",
    "start": "1825080",
    "end": "1831200"
  },
  {
    "text": "get to use the Chrome debugger to do cross-language debugging so I can build my little toy language and I can little",
    "start": "1831200",
    "end": "1837140"
  },
  {
    "text": "literally single step through it um using the Chrome debugger and then if",
    "start": "1837140",
    "end": "1843440"
  },
  {
    "text": "I call a function that happens to be written in r or Ruby or python or something like that it will single step",
    "start": "1843440",
    "end": "1848539"
  },
  {
    "text": "into that language too and then keep going it's really quite elegant in that respect",
    "start": "1848539",
    "end": "1854419"
  },
  {
    "text": "um and we get this free ffi to other languages like JavaScript python Ruby R Etc so that this was the premise and I",
    "start": "1854419",
    "end": "1861620"
  },
  {
    "text": "was really hopeful um and my goal is something like if I could do this then I could get an",
    "start": "1861620",
    "end": "1867799"
  },
  {
    "text": "evaluator like I have to write The Interpreter for my Lambda calculus or my dependently",
    "start": "1867799",
    "end": "1873200"
  },
  {
    "text": "type language in Java or in kotlin using this funny Style but that's like 10 of the code in the",
    "start": "1873200",
    "end": "1880159"
  },
  {
    "text": "compiler so this gives a couple of directions what I have is an implementation of",
    "start": "1880159",
    "end": "1886580"
  },
  {
    "text": "basically a simply type Lambda calculus and there's two major directions that it could go that are actually somewhat",
    "start": "1886580",
    "end": "1892520"
  },
  {
    "text": "interesting to me one is I can double down and I can carry on into like dependent types what happens is infer",
    "start": "1892520",
    "end": "1898580"
  },
  {
    "text": "and check now call eval and this just works um uh we get to speed up type checking",
    "start": "1898580",
    "end": "1906380"
  },
  {
    "text": "this is a way to make a fast evaluation technology that also just makes my runtime my compile times",
    "start": "1906380",
    "end": "1911960"
  },
  {
    "text": "faster another more interesting Direction in some ways is can I use this to evaluate",
    "start": "1911960",
    "end": "1917600"
  },
  {
    "text": "something like GHC maybe not more interesting but like differently interesting is can I use this to evaluate something like GHC core like",
    "start": "1917600",
    "end": "1924799"
  },
  {
    "text": "I'm starting with a typed Lambda calculus that has a lot of the same",
    "start": "1924799",
    "end": "1929960"
  },
  {
    "text": "features that like GHC core does um we could in theory then substitute",
    "start": "1929960",
    "end": "1937640"
  },
  {
    "text": "this in for something like ETA where we would have a",
    "start": "1937640",
    "end": "1943760"
  },
  {
    "text": "um evaluator to run Haskell directly on the jvm through this jit",
    "start": "1943760",
    "end": "1950720"
  },
  {
    "text": "and unlike Ada where we have to sit there and compile everything into separate closures and everything it",
    "start": "1950720",
    "end": "1956000"
  },
  {
    "text": "would be jitted with unfortunately the long boot up time that you have for Growler truffle",
    "start": "1956000",
    "end": "1963200"
  },
  {
    "text": "um and the Hope was that I could get a decent enough evaluator um I never quite hit the speed ups that",
    "start": "1963200",
    "end": "1969260"
  },
  {
    "text": "I had hoped for but I didn't get the ones I feared so I'm somewhere in the middle I'm in this unfortunate uncomfortable Zone",
    "start": "1969260",
    "end": "1976880"
  },
  {
    "text": "um much like with Stephanie's talk where she sort of failed to slay the last dragon um I feel much the same way",
    "start": "1976880",
    "end": "1984200"
  },
  {
    "text": "um where um we're able to get this to a point where",
    "start": "1984200",
    "end": "1989960"
  },
  {
    "text": "it's fast enough to be interesting but it's not quite competitive with a fully",
    "start": "1989960",
    "end": "1995120"
  },
  {
    "text": "compiled story um it turned out that there were a bunch of weird Corner cases with the way Escape analysis works and in theory if I",
    "start": "1995120",
    "end": "2002919"
  },
  {
    "text": "was smarter about how to use grawl and really cared a lot about the jvm I can I",
    "start": "2002919",
    "end": "2008019"
  },
  {
    "text": "could probably force myself to finish this um the the name",
    "start": "2008019",
    "end": "2013720"
  },
  {
    "text": "uh Cadenza sort of implies this is a solo project um it hasn't been since about halfway",
    "start": "2013720",
    "end": "2020860"
  },
  {
    "text": "through the development I've been working with Sarah Charbonneau and she has been",
    "start": "2020860",
    "end": "2026740"
  },
  {
    "text": "um a huge help like actually just getting it to the point where it actually can run code",
    "start": "2026740",
    "end": "2032320"
  },
  {
    "text": "um and like hanging like banging out all of the like",
    "start": "2032320",
    "end": "2039399"
  },
  {
    "text": "the horrible edge cases uh there are a bunch of other things that went into this project that like turned out to be",
    "start": "2039399",
    "end": "2044740"
  },
  {
    "text": "interesting I think they go pretty far beyond the scope of what I have time to talk about here uh there's a whole assembler for Java byte code for",
    "start": "2044740",
    "end": "2052358"
  },
  {
    "text": "generating custom closure types rather than using their own materialized frame so I can like theoretically maybe get",
    "start": "2052359",
    "end": "2057878"
  },
  {
    "text": "away with like a quarter of the amount of memory that it would otherwise want and there's there's a bunch of crazy stuff that had to go in here",
    "start": "2057879",
    "end": "2065138"
  },
  {
    "text": "um but I do think the idea of leaning on something like truffle or grawl where we",
    "start": "2065139",
    "end": "2070300"
  },
  {
    "text": "have a jit that is sort of Cooperative where you can say hey look here in in code is how to handle the slow path",
    "start": "2070300",
    "end": "2078760"
  },
  {
    "text": "um for your language is something really promising like I don't necessarily know that I buy that",
    "start": "2078760",
    "end": "2085138"
  },
  {
    "text": "growl and truffle are that tool um I had I had bigger hopes than I think",
    "start": "2085139",
    "end": "2092679"
  },
  {
    "text": "um the the end result warranted um but a lot of this was my attempt to gain",
    "start": "2092679",
    "end": "2099640"
  },
  {
    "text": "familiarity with what Oracle can do by throwing 50 developers at a thing before",
    "start": "2099640",
    "end": "2104800"
  },
  {
    "text": "I go off and try and throw myself at doing the thing um the right way",
    "start": "2104800",
    "end": "2110079"
  },
  {
    "text": "um and then like get bored and abandon it in two years um so I wanted to sort of give this as a",
    "start": "2110079",
    "end": "2116020"
  },
  {
    "text": "bit of an experience report on like the status of my work with Cadenza the code is on GitHub you can download it",
    "start": "2116020",
    "end": "2123579"
  },
  {
    "text": "um there has been some changes in grawl since it was last",
    "start": "2123579",
    "end": "2129160"
  },
  {
    "text": "um worked with like a couple months ago um they've been working to try and get",
    "start": "2129160",
    "end": "2135099"
  },
  {
    "text": "graul to work on jdk 13 and I don't know if they actually got around to finishing that um at last check this worked on the",
    "start": "2135099",
    "end": "2142359"
  },
  {
    "text": "grill VM under jdk8 and then it got moved up to jdk 11.",
    "start": "2142359",
    "end": "2147640"
  },
  {
    "text": "um but I do think it's rather interesting I want to like just take a quick Gander at",
    "start": "2147640",
    "end": "2155140"
  },
  {
    "text": "some of the code in Java I figure I'm I don't know my time yet",
    "start": "2155140",
    "end": "2160180"
  },
  {
    "text": "um how am I doing I'm okay I got I got enough time to pull up some Haskell or some kotlin",
    "start": "2160180",
    "end": "2167320"
  },
  {
    "text": "do",
    "start": "2167320",
    "end": "2169800"
  },
  {
    "text": "and in particular let's see here um",
    "start": "2172619",
    "end": "2178180"
  },
  {
    "text": "is what types are I don't want types I want terms",
    "start": "2178180",
    "end": "2182640"
  },
  {
    "text": "so as I was saying before a term is something I can type check",
    "start": "2184480",
    "end": "2189640"
  },
  {
    "text": "so in this case like uh VAR knows how to look itself up in the environment give back a witness that is proof that this",
    "start": "2189640",
    "end": "2195099"
  },
  {
    "text": "thing type checked in a given environment um and then the anti-build code is the",
    "start": "2195099",
    "end": "2200859"
  },
  {
    "text": "replacement for an expression and I'll show an example of the code which is the interesting bit",
    "start": "2200859",
    "end": "2208000"
  },
  {
    "text": "Cadenza uh come on",
    "start": "2208000",
    "end": "2213760"
  },
  {
    "text": "code and I will zoom in here",
    "start": "2213760",
    "end": "2218980"
  },
  {
    "text": "so the way this works is that a code code is an object that knows how to execute basically",
    "start": "2218980",
    "end": "2226119"
  },
  {
    "text": "given an environment which is called virtual frame and uh growl or and truffle parlance I know",
    "start": "2226119",
    "end": "2233980"
  },
  {
    "text": "how to give you back a value which can be anything in Java but if I expect the result to be an INT",
    "start": "2233980",
    "end": "2240339"
  },
  {
    "text": "a Java ant then I can give that back to you and it will give it back to you unboxed so I call execute int or I call",
    "start": "2240339",
    "end": "2246700"
  },
  {
    "text": "execute depending on the amount of information that I have about the type",
    "start": "2246700",
    "end": "2252099"
  },
  {
    "text": "uh from context and then to implement things like applications this constructs the crazy",
    "start": "2252099",
    "end": "2259660"
  },
  {
    "text": "polymorphic inline cache that we talked about to build um like an if node here's a",
    "start": "2259660",
    "end": "2265000"
  },
  {
    "text": "good example of something like that needs to test a condition basically what it does is it checks the",
    "start": "2265000",
    "end": "2270820"
  },
  {
    "text": "conditional and then actually gets either then note or the else the else Branch but when it goes to execute",
    "start": "2270820",
    "end": "2277420"
  },
  {
    "text": "the conditional what it does it executes it expecting a Boolean and if it",
    "start": "2277420",
    "end": "2284200"
  },
  {
    "text": "fails because like the thing's stuck what I do is I throw an exception the exception is a neutral is the way I",
    "start": "2284200",
    "end": "2290440"
  },
  {
    "text": "represent neutral terms and I pull more and more content up into the exception",
    "start": "2290440",
    "end": "2296400"
  },
  {
    "text": "so that when you fail this it will catch and",
    "start": "2296859",
    "end": "2302500"
  },
  {
    "text": "attach the result of executing the then or the else Branch it will build the the",
    "start": "2302500",
    "end": "2308140"
  },
  {
    "text": "residue of the program uh that's how the normalization by",
    "start": "2308140",
    "end": "2313480"
  },
  {
    "text": "evaluation works like this little ball of tar this little error this normalization this neutral exception this little term that's going to throw a",
    "start": "2313480",
    "end": "2319240"
  },
  {
    "text": "neutral exception when you go to evaluate it will ball up more additional Machinery",
    "start": "2319240",
    "end": "2325240"
  },
  {
    "text": "um so this is this is sort of the direction that this interpreter went if I move to",
    "start": "2325240",
    "end": "2332020"
  },
  {
    "text": "the GHC core story it doesn't need the normalization by evaluation thing at all like this neutral exception just dies if",
    "start": "2332020",
    "end": "2339040"
  },
  {
    "text": "I use this for evaluating dependent types I need the neutral exception because I need to be able to evaluate types",
    "start": "2339040",
    "end": "2345520"
  },
  {
    "text": "I need to Crunch them down to normal forms and then compare the normal forms",
    "start": "2345520",
    "end": "2351040"
  },
  {
    "text": "so all the normalization by evaluation bits that I showed kind of melt away when I look at the GHC core and all that's left is the construction of",
    "start": "2351040",
    "end": "2357520"
  },
  {
    "text": "custom polymorphic inline caches and the machinery for constructing um like for like properly basically",
    "start": "2357520",
    "end": "2364599"
  },
  {
    "text": "applying uh functions and the same Machinery is",
    "start": "2364599",
    "end": "2369940"
  },
  {
    "text": "needed in order to build Pi types and to evaluate um lambdas other binders so like the",
    "start": "2369940",
    "end": "2377619"
  },
  {
    "text": "goal was to get how to evaluate those things down first",
    "start": "2377619",
    "end": "2383560"
  },
  {
    "text": "and that's why I started with a simply type Lambda calculus where I just didn't have to deal with any extra issues and",
    "start": "2383560",
    "end": "2389020"
  },
  {
    "text": "then we can move to an environment where the types are the same as the term language",
    "start": "2389020",
    "end": "2395040"
  },
  {
    "text": "so that is I think everything that I really wanted to say thank you",
    "start": "2395619",
    "end": "2401700"
  }
]