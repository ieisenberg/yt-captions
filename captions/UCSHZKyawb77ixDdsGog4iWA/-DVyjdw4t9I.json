[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "can you imagine possible features that python 4.0 might have that would",
    "start": "0",
    "end": "8960"
  },
  {
    "text": "necessitate the creation of the new 4.0 given the amount of",
    "start": "8960",
    "end": "15120"
  },
  {
    "text": "pain and joy suffering and Triumph that was involved in the move between version 2 and",
    "start": "15120",
    "end": "22320"
  },
  {
    "text": "version 3. the following is a conversation with Guido van Rossum his second time on this",
    "start": "22320",
    "end": "29279"
  },
  {
    "text": "podcast he is the creator of the Python programming language and is Python's",
    "start": "29279",
    "end": "34620"
  },
  {
    "text": "Emeritus pdfo benevolent dictator for life this is the Lex Friedman podcast to",
    "start": "34620",
    "end": "41340"
  },
  {
    "text": "support it please check out our sponsors in the description and now dear friends here's Guido and Russell",
    "start": "41340",
    "end": "48420"
  },
  {
    "start": "48000",
    "end": "361000"
  },
  {
    "text": "python 3.11 is coming out very soon init C python claimed to be 10 to 60 percent",
    "start": "48420",
    "end": "56640"
  },
  {
    "text": "faster how did you pull that off and what's C python C python is the last",
    "start": "56640",
    "end": "62340"
  },
  {
    "text": "python implementation standing also the first one that was ever created the original python implementation that I",
    "start": "62340",
    "end": "68820"
  },
  {
    "text": "started over 30 years ago so what does it mean that python the programming language is implemented in another",
    "start": "68820",
    "end": "75119"
  },
  {
    "text": "programming language called C what kind of audience do you have in mind here people who know programming no there's",
    "start": "75119",
    "end": "81900"
  },
  {
    "text": "somebody on a boat that's into fishing and have never heard about programming but also some world-class programmers",
    "start": "81900",
    "end": "88020"
  },
  {
    "text": "you're gonna have to speak to both imagine a boat with two people one of them has not heard about programming is",
    "start": "88020",
    "end": "93600"
  },
  {
    "text": "really into phishing and the other one is like uh an incredible Silicon Valley",
    "start": "93600",
    "end": "99180"
  },
  {
    "text": "programmer that's programmed in everything C C plus plus python rust",
    "start": "99180",
    "end": "104520"
  },
  {
    "text": "Java it knows the entire history of programming languages so you're gonna have to speak to both I imagine that",
    "start": "104520",
    "end": "110100"
  },
  {
    "text": "boat in the middle of the ocean yes I'm gonna please the guy who knows how to fish first yes please",
    "start": "110100",
    "end": "117540"
  },
  {
    "text": "he seems like the most useful in the middle of the ocean you got you gotta make him mad I'm sure he has a cell",
    "start": "117540",
    "end": "122759"
  },
  {
    "text": "phone so uh he's probably very suspicious about what goes on in that cell phone but he must have heard that",
    "start": "122759",
    "end": "129539"
  },
  {
    "text": "inside his cell phone is a tiny computer and a programming language is computer",
    "start": "129539",
    "end": "134879"
  },
  {
    "text": "code that tells the computer what to do it's a very low level language it's zeros and ones and then",
    "start": "134879",
    "end": "142440"
  },
  {
    "text": "there's assembly and then oh yeah we don't talk about these really low levels",
    "start": "142440",
    "end": "147959"
  },
  {
    "text": "because those just confuse people I mean when we're talking about human language we're not usually talking about vocal",
    "start": "147959",
    "end": "155040"
  },
  {
    "text": "tracts and how you position your tongue I was talking yesterday about how when you have a Chinese person and they speak",
    "start": "155040",
    "end": "162840"
  },
  {
    "text": "English uh this is a bit of a stereotype they often don't know or they they can't",
    "start": "162840",
    "end": "169440"
  },
  {
    "text": "can't seem to make the difference well between an l and an r and I have a",
    "start": "169440",
    "end": "174900"
  },
  {
    "text": "theory about that and I've never checked this with linguists uh that it probably has to do with the",
    "start": "174900",
    "end": "182459"
  },
  {
    "text": "fact that in Chinese there is not really a difference and it could be that there are Regional variations in how China",
    "start": "182459",
    "end": "190080"
  },
  {
    "text": "native Chinese speakers pronounce that one sound that sounds to L to some like L to some of",
    "start": "190080",
    "end": "197760"
  },
  {
    "text": "them like R to others so it's both the sounds you produce with your mouth",
    "start": "197760",
    "end": "203340"
  },
  {
    "text": "throughout the history of your life and what you're used to listening to I mean every language has that Russian has",
    "start": "203340",
    "end": "209099"
  },
  {
    "text": "exactly the Slavic languages have sounds like the letters",
    "start": "209099",
    "end": "214220"
  },
  {
    "text": "like uh Americans or English speakers don't seem to know the sounds",
    "start": "214220",
    "end": "220459"
  },
  {
    "text": "they seemed uncomfortable with that sound yeah so I'm sure oh yes okay so",
    "start": "220459",
    "end": "225959"
  },
  {
    "text": "we're not we're not going to the shapes of tongues and the sounds that the mouth can make fine words similarly we're not",
    "start": "225959",
    "end": "232860"
  },
  {
    "text": "going into the ones and zeros or machine language I would say a programming",
    "start": "232860",
    "end": "237900"
  },
  {
    "text": "language is a list of instructions like a cookbook recipe",
    "start": "237900",
    "end": "243000"
  },
  {
    "text": "that sort of tells you how to do a certain thing like make a sandwich well",
    "start": "243000",
    "end": "249180"
  },
  {
    "text": "acquire a loaf of bread cut it in slices uh take two slices uh put mustard on one",
    "start": "249180",
    "end": "256500"
  },
  {
    "text": "put the jelly on the other or something then add the meat then add the cheese",
    "start": "256500",
    "end": "263060"
  },
  {
    "text": "I've heard that science teachers can actually uh do great stuff with recipes",
    "start": "263060",
    "end": "268919"
  },
  {
    "text": "like that and trying to interpret their students instructions incorrectly until",
    "start": "268919",
    "end": "274080"
  },
  {
    "text": "the students are completely unambiguous about it with language see that's the difference",
    "start": "274080",
    "end": "279180"
  },
  {
    "text": "between natural languages and programming languages I think ambiguity is a feature",
    "start": "279180",
    "end": "285840"
  },
  {
    "text": "not a bug in human spoken languages like uh that's the dance of communication",
    "start": "285840",
    "end": "292440"
  },
  {
    "text": "between humans well for lawyers ambiguity certainly is a feature",
    "start": "292440",
    "end": "298860"
  },
  {
    "text": "uh for plenty of other cases uh the ambiguity is is not much of a feature",
    "start": "298860",
    "end": "306060"
  },
  {
    "text": "but we work around it of course well what's more important is context",
    "start": "306060",
    "end": "311160"
  },
  {
    "text": "so with context the Precision of the statement becomes more and more concrete right but you know when you say I love",
    "start": "311160",
    "end": "319020"
  },
  {
    "text": "you to a person that matters a lot to you the person doesn't try to compile",
    "start": "319020",
    "end": "324180"
  },
  {
    "text": "that statement and return an error saying please define love right no but I imagine that my wife and",
    "start": "324180",
    "end": "331080"
  },
  {
    "text": "my son uh interpret it very differently yes even though it's the same three",
    "start": "331080",
    "end": "337199"
  },
  {
    "text": "words but imprecisely still oh for sure lawyers never had a lot of follow-up",
    "start": "337199",
    "end": "343860"
  },
  {
    "text": "questions for you nevertheless the context is already different different in that case yes fair enough so that's",
    "start": "343860",
    "end": "350280"
  },
  {
    "text": "that's a programming language is uh ability to unambiguously State a recipe",
    "start": "350280",
    "end": "357960"
  },
  {
    "text": "actually let's go back let's go to Pepe you go through and pepe the style guide",
    "start": "357960",
    "end": "363720"
  },
  {
    "start": "361000",
    "end": "622000"
  },
  {
    "text": "for python code some ideas of what this language should look like",
    "start": "363720",
    "end": "369300"
  },
  {
    "text": "feel like read like and the big idea there is that code readability counts",
    "start": "369300",
    "end": "374400"
  },
  {
    "text": "what does that mean to you and how do we achieve it so this recipe should be readable that's a thing between",
    "start": "374400",
    "end": "380220"
  },
  {
    "text": "programmers because on the one hand we always explain the concept of programming",
    "start": "380220",
    "end": "387060"
  },
  {
    "text": "language as computers need instructions and computers are very dumb and they",
    "start": "387060",
    "end": "393419"
  },
  {
    "text": "need very precise instructions because they don't have much context in in fact they have lots of context but their",
    "start": "393419",
    "end": "399660"
  },
  {
    "text": "their context is very different but what we've seen emerge during the",
    "start": "399660",
    "end": "406199"
  },
  {
    "text": "development of software starting in the probably in the late 40s",
    "start": "406199",
    "end": "411360"
  },
  {
    "text": "is that software is a very social activity a software developer is not a",
    "start": "411360",
    "end": "418800"
  },
  {
    "text": "mad scientist who sits alone in his lab writing brilliant code",
    "start": "418800",
    "end": "424460"
  },
  {
    "text": "software is developed by teams of people uh even the Mad scientists sitting alone",
    "start": "424699",
    "end": "430800"
  },
  {
    "text": "in his lap can type fast enough to produce enough code so that by the time",
    "start": "430800",
    "end": "435960"
  },
  {
    "text": "he's done with his coding he still remembers what the first few lines he",
    "start": "435960",
    "end": "441060"
  },
  {
    "text": "wrote mean so even the mad scientist coding alone in his lab would would be",
    "start": "441060",
    "end": "447479"
  },
  {
    "text": "sort of wise to adopt conventions on how to format",
    "start": "447479",
    "end": "454500"
  },
  {
    "text": "the instructions that he gives to the computer so that the thing is there is a",
    "start": "454500",
    "end": "459840"
  },
  {
    "text": "difference between a cookbook recipe and a computer program The cookbook recipe the the author of",
    "start": "459840",
    "end": "466680"
  },
  {
    "text": "The cookbook writes it once and then is printed in 100 000 copies",
    "start": "466680",
    "end": "473220"
  },
  {
    "text": "and then lots of people in their kitchens try to recreate that recipe that that particular",
    "start": "473220",
    "end": "480300"
  },
  {
    "text": "pie or dish from the recipe and so there",
    "start": "480300",
    "end": "486240"
  },
  {
    "text": "the the goal of the cookbook author is to make it clear",
    "start": "486240",
    "end": "491940"
  },
  {
    "text": "to the human reader of the recipe the human amateur Chef in most cases",
    "start": "491940",
    "end": "499560"
  },
  {
    "text": "when you're writing a computer program you have two audiences at once",
    "start": "499560",
    "end": "507120"
  },
  {
    "text": "it needs to tell the computer what to do",
    "start": "507120",
    "end": "512300"
  },
  {
    "text": "but it also is useful if that program is",
    "start": "512300",
    "end": "517680"
  },
  {
    "text": "readable by other programmers because computer software unlike the typical recipe for a cherry pie is so",
    "start": "517680",
    "end": "526620"
  },
  {
    "text": "complex that you don't get all of it right at",
    "start": "526620",
    "end": "531839"
  },
  {
    "text": "once you end up with the activity of debugging and you end up with the",
    "start": "531839",
    "end": "537300"
  },
  {
    "text": "activity of so debugging is trying to figure out why your code",
    "start": "537300",
    "end": "544080"
  },
  {
    "text": "doesn't run the way you thought it should run that means brother could be stupid little errors or it could be big",
    "start": "544080",
    "end": "550040"
  },
  {
    "text": "logical errors it could be anything spiritual yeah it could be anything from",
    "start": "550040",
    "end": "555959"
  },
  {
    "text": "a typo to uh a wrong choice of algorithm to building something that does what you",
    "start": "555959",
    "end": "563760"
  },
  {
    "text": "tell it to do but that's not useful yeah it seems to work really well 99 of",
    "start": "563760",
    "end": "569940"
  },
  {
    "text": "the time but does weird things one percent of the time on some edge cases that's pretty much all software nowadays",
    "start": "569940",
    "end": "577500"
  },
  {
    "text": "all good software right well yeah for for bad software that that 99 goes down",
    "start": "577500",
    "end": "583440"
  },
  {
    "text": "a lot so but it's not just about the complexity of the program it's like you said it is a social endeavor",
    "start": "583440",
    "end": "590519"
  },
  {
    "text": "in that you're constantly improving that recipe for the cherry pie but you're",
    "start": "590519",
    "end": "596100"
  },
  {
    "text": "sort of you're in a group of people improving that recipe or the mad",
    "start": "596100",
    "end": "601560"
  },
  {
    "text": "scientist is improving the recipe that he created a year ago and making it",
    "start": "601560",
    "end": "607440"
  },
  {
    "text": "better or adding adding something he decides that he wants a I don't know he wants",
    "start": "607440",
    "end": "614459"
  },
  {
    "text": "some decoration on his pie or icing or so there's broad philosophical things",
    "start": "614459",
    "end": "619980"
  },
  {
    "text": "and there's specific advice on style so first of all the thing that people first experience when they look up python",
    "start": "619980",
    "end": "627060"
  },
  {
    "start": "622000",
    "end": "1618000"
  },
  {
    "text": "there is a it is very readable but there's also like a spatial",
    "start": "627060",
    "end": "632459"
  },
  {
    "text": "structure to it can you explain the indentation style of python and what is the magic to it space",
    "start": "632459",
    "end": "639660"
  },
  {
    "text": "bases are important for readability of any kind of text if you take a cookbook recipe",
    "start": "639660",
    "end": "647519"
  },
  {
    "text": "and you remove all the sort of all the bullets and other markup",
    "start": "647519",
    "end": "655620"
  },
  {
    "text": "and you just crunch all the text together maybe you leave the spaces between the words but that's all you",
    "start": "655620",
    "end": "660779"
  },
  {
    "text": "leave when you're in the kitchen trying to figure out oh what are the ingredients",
    "start": "660779",
    "end": "667320"
  },
  {
    "text": "and what are the steps and where does this step end and the next step begin you're going to have a",
    "start": "667320",
    "end": "673680"
  },
  {
    "text": "hard time if it's if it's just one solid block of text on the other hand what what a typical",
    "start": "673680",
    "end": "679620"
  },
  {
    "text": "cookbook does if the paper is not too expensive each recipe starts on its own page maybe",
    "start": "679620",
    "end": "686760"
  },
  {
    "text": "there's a picture next to it the list of ingredients comes first uh there's a standard notation the",
    "start": "686760",
    "end": "695040"
  },
  {
    "text": "there's there's shortcuts so that you don't have to sort of write two",
    "start": "695040",
    "end": "700800"
  },
  {
    "text": "sentences on how you have to cut the onion because there are only three ways that people ever cut onions in a kitchen",
    "start": "700800",
    "end": "706680"
  },
  {
    "text": "small medium and in slices or something like that right none of my examples make any sense",
    "start": "706680",
    "end": "713940"
  },
  {
    "text": "to real Cooks of course but yeah we're talking to programmers with a",
    "start": "713940",
    "end": "719820"
  },
  {
    "text": "metaphor of cooking I love it um but there is a strictness to the spacing that python defines so there's",
    "start": "719820",
    "end": "726899"
  },
  {
    "text": "some a looser thing some stricter things but the four spaces for the",
    "start": "726899",
    "end": "732540"
  },
  {
    "text": "for the indentation is really interesting it it really um it really defines what the language",
    "start": "732540",
    "end": "738360"
  },
  {
    "text": "looks and feels like because indentation sort of taking a block of text and then",
    "start": "738360",
    "end": "744420"
  },
  {
    "text": "having inside that block of text a smaller block of text that is indented",
    "start": "744420",
    "end": "750000"
  },
  {
    "text": "further as sort of a group it's it's it's like you have a a bulleted list",
    "start": "750000",
    "end": "757200"
  },
  {
    "text": "in a complex business document and inside some of the bullets are other",
    "start": "757200",
    "end": "762300"
  },
  {
    "text": "bulleted lists you will indent those too if each bulleted list is indented",
    "start": "762300",
    "end": "768720"
  },
  {
    "text": "several inches then at two levels deep there's no no space left on the page to",
    "start": "768720",
    "end": "774540"
  },
  {
    "text": "put any of the words of the text so you can't indent too far on the other hand if you don't indent at all you can tell",
    "start": "774540",
    "end": "782459"
  },
  {
    "text": "whether something is a top level bullet or a second level bullet or a third level bullet so you have to have",
    "start": "782459",
    "end": "788700"
  },
  {
    "text": "some compromise and uh based on Ancient",
    "start": "788700",
    "end": "793980"
  },
  {
    "text": "conventions and the sort of the typical width of a computer screen in the 80s",
    "start": "793980",
    "end": "800880"
  },
  {
    "text": "uh and all sorts of things sort of we we came up with sort of four spaces",
    "start": "800880",
    "end": "808740"
  },
  {
    "text": "as a compromise I mean there there are groups there are large groups of people",
    "start": "808740",
    "end": "814260"
  },
  {
    "text": "who code with uh two spaces per indent level for example the Google style guide",
    "start": "814260",
    "end": "820980"
  },
  {
    "text": "uh all the Google python code and I think also all the Google C plus plus code is indented with only two spaces",
    "start": "820980",
    "end": "827519"
  },
  {
    "text": "per block if you're not used to that it's harder to at a glance",
    "start": "827519",
    "end": "834000"
  },
  {
    "text": "understand the code because the the sort of the the high level structure is",
    "start": "834000",
    "end": "839160"
  },
  {
    "text": "determined by the indentation on the other hand there are there are other programming languages where the",
    "start": "839160",
    "end": "844680"
  },
  {
    "text": "indentation is uh eight spaces or a whole tab stop in in sort of classic",
    "start": "844680",
    "end": "850139"
  },
  {
    "text": "Unix and to me that looks weird because you you sort of after three indent levels you've you've got no room left",
    "start": "850139",
    "end": "857880"
  },
  {
    "text": "well there's some languages where the indentation is a recommendation it's a stylistic one the code compiles",
    "start": "857880",
    "end": "864779"
  },
  {
    "text": "even without any indentation and then python really indentations a",
    "start": "864779",
    "end": "870000"
  },
  {
    "text": "fundamental part of the language right it doesn't have to be four spaces so you",
    "start": "870000",
    "end": "875399"
  },
  {
    "text": "you can code python with two spaces per block or or six Paces or 12 if you",
    "start": "875399",
    "end": "883139"
  },
  {
    "text": "really want to go wild but sort of everything",
    "start": "883139",
    "end": "888180"
  },
  {
    "text": "that belongs to the same block needs to be indented the same way in practice in most other languages",
    "start": "888180",
    "end": "895019"
  },
  {
    "text": "people recommend doing that anyway if you look at C or rust or C plus plus",
    "start": "895019",
    "end": "902399"
  },
  {
    "text": "all those languages Java don't have a requirement of indentation",
    "start": "902399",
    "end": "908639"
  },
  {
    "text": "but except in extreme cases they're just as anal about having their",
    "start": "908639",
    "end": "915180"
  },
  {
    "text": "code properly indented so any IDE that the syntax highlighting that works with",
    "start": "915180",
    "end": "922800"
  },
  {
    "text": "Java or C plus they will yell at you aggressively if you don't do proper",
    "start": "922800",
    "end": "927839"
  },
  {
    "text": "indentation they'd suggests the proper indentation for you like uh in C you",
    "start": "927839",
    "end": "935040"
  },
  {
    "text": "type a few words and then you type a curly brace which there is their notion of sort of begin and an indented block",
    "start": "935040",
    "end": "944120"
  },
  {
    "text": "uh then you hit return and then it automatically indents four or eight spaces depending on uh your your style",
    "start": "944120",
    "end": "951360"
  },
  {
    "text": "preferences or how your editor is configured was there a possible Universe in which you considered having braces in",
    "start": "951360",
    "end": "958079"
  },
  {
    "text": "Python absolutely yeah well there's a 60 40 70 30 in your head uh uh what was the",
    "start": "958079",
    "end": "966660"
  },
  {
    "text": "trade-off for a long time I was actually convinced that the indentation was just",
    "start": "966660",
    "end": "973139"
  },
  {
    "text": "better uh without context I would still claim that",
    "start": "973139",
    "end": "980579"
  },
  {
    "text": "indentation is better uh it reduces clutter however",
    "start": "980579",
    "end": "987360"
  },
  {
    "text": "as I started to say earlier context is almost everything and in the context of coding",
    "start": "987360",
    "end": "995160"
  },
  {
    "text": "most programmers are familiar with multiple languages even if they're only",
    "start": "995160",
    "end": "1000259"
  },
  {
    "text": "good at one or two and apart from Python and maybe Fortran",
    "start": "1000259",
    "end": "1006199"
  },
  {
    "text": "I don't know how that's written these days anymore but all the other languages Java rust CC plus plus JavaScript",
    "start": "1006199",
    "end": "1012740"
  },
  {
    "text": "typescript Perl are all using curly braces uh to sort of indicate blocks and",
    "start": "1012740",
    "end": "1022579"
  },
  {
    "text": "so python is the odd one out so it's a radical idea do you still as a radical",
    "start": "1022579",
    "end": "1028760"
  },
  {
    "text": "Renegade revolutionary do you still stand behind this idea of space of uh indentation versus braces",
    "start": "1028760",
    "end": "1035839"
  },
  {
    "text": "like what what can you dig into it a little bit more why you still stand behind indentation",
    "start": "1035839",
    "end": "1042260"
  },
  {
    "text": "because context is not the whole story history in in a sense provides more",
    "start": "1042260",
    "end": "1048919"
  },
  {
    "text": "context so for python there's no chance that we can switch",
    "start": "1048919",
    "end": "1056480"
  },
  {
    "text": "python is using curly braces for something else dictionaries mostly",
    "start": "1056480",
    "end": "1061940"
  },
  {
    "text": "we would get in trouble if we wanted to switch just like you couldn't redefine C",
    "start": "1061940",
    "end": "1067520"
  },
  {
    "text": "to use indentation even if you agree that it that",
    "start": "1067520",
    "end": "1072740"
  },
  {
    "text": "indentation sort of in a Greenfield environment would be better",
    "start": "1072740",
    "end": "1077780"
  },
  {
    "text": "you can't change that kind of thing in a language yeah it's hard enough to reach",
    "start": "1077780",
    "end": "1084799"
  },
  {
    "text": "agreement over over much more Minor Details maybe I mean in the past in",
    "start": "1084799",
    "end": "1090020"
  },
  {
    "text": "Python we did have a big debate about test versus spaces and four spaces versus fewer or more",
    "start": "1090020",
    "end": "1096919"
  },
  {
    "text": "and we sort of came up with a recommended standard and sort of",
    "start": "1096919",
    "end": "1102679"
  },
  {
    "text": "options for people who want to be different but yes I guess the thought experiment",
    "start": "1102679",
    "end": "1110059"
  },
  {
    "text": "I'd like you to consider is if you could travel back through time when the when",
    "start": "1110059",
    "end": "1115880"
  },
  {
    "text": "the compatibility is not an issue and he started python all over again can you make the case for uh indentation",
    "start": "1115880",
    "end": "1125000"
  },
  {
    "text": "still well it frees up a pair of matched brackets of which there are",
    "start": "1125000",
    "end": "1130880"
  },
  {
    "text": "never enough in the world uh for other purposes really makes the language slightly",
    "start": "1130880",
    "end": "1138980"
  },
  {
    "text": "sort of easier to grasp for people who don't already know",
    "start": "1138980",
    "end": "1145760"
  },
  {
    "text": "another programming language because the sort of one of the things",
    "start": "1145760",
    "end": "1151640"
  },
  {
    "text": "and I I mostly got this from my mentors who were taught me programming language design in",
    "start": "1151640",
    "end": "1158780"
  },
  {
    "text": "the earlier 80s when you're teaching programming for for the the total newbie who has not",
    "start": "1158780",
    "end": "1168799"
  },
  {
    "text": "coded before in not in any other language uh a whole bunch of Concepts in",
    "start": "1168799",
    "end": "1176120"
  },
  {
    "text": "programming are very alien or sort of new and and maybe very interesting but",
    "start": "1176120",
    "end": "1184520"
  },
  {
    "text": "also distracting and confusing and there are many different things you have to learn you have to sort of",
    "start": "1184520",
    "end": "1191660"
  },
  {
    "text": "in a typical 13-week programming course you have to if it's like really",
    "start": "1191660",
    "end": "1199240"
  },
  {
    "text": "learning to program from scratch you have to cover algorithms you have to cover data structures you have to cover",
    "start": "1199240",
    "end": "1206200"
  },
  {
    "text": "syntax you have to cover variables Loops functions recursion classes",
    "start": "1206200",
    "end": "1214179"
  },
  {
    "text": "Expressions operators there are so many Concepts if you you sort of",
    "start": "1214179",
    "end": "1220820"
  },
  {
    "text": "if you can spend a little less time having to worry about the syntax",
    "start": "1220820",
    "end": "1227600"
  },
  {
    "text": "the the classic example was often oh the compiler complains every time I",
    "start": "1227600",
    "end": "1236240"
  },
  {
    "text": "put a semicolon in the wrong place or I forget to put a semicolon",
    "start": "1236240",
    "end": "1241460"
  },
  {
    "text": "uh python doesn't have semicolons in that sense so you can't forget them and",
    "start": "1241460",
    "end": "1247460"
  },
  {
    "text": "you're also not sort of misled into putting them where they don't belong because you don't",
    "start": "1247460",
    "end": "1254360"
  },
  {
    "text": "learn about them in the first place the flip side of that is forcing the",
    "start": "1254360",
    "end": "1259820"
  },
  {
    "text": "strictness onto the beginning programmer to teach them that programming is a",
    "start": "1259820",
    "end": "1266240"
  },
  {
    "text": "values attention to details you don't get to just write the way you write in English they have other details that",
    "start": "1266240",
    "end": "1271880"
  },
  {
    "text": "they have to pay attention to so I think they'll they'll still get the message about uh",
    "start": "1271880",
    "end": "1278120"
  },
  {
    "text": "paying attention to details the interesting design choice so I still program quite a bit in PHP and I'm sure",
    "start": "1278120",
    "end": "1284600"
  },
  {
    "text": "there's other languages like this but the dollar sign before a variable that was always an annoying thing for me",
    "start": "1284600",
    "end": "1292700"
  },
  {
    "text": "it didn't quite fit into my understanding of why this is good for a programming language I'm not sure if you",
    "start": "1292700",
    "end": "1299480"
  },
  {
    "text": "ever thought about that one that is a historical thing there is a",
    "start": "1299480",
    "end": "1305539"
  },
  {
    "text": "whole lineage of programming languages PHP is one Pearl was one",
    "start": "1305539",
    "end": "1312200"
  },
  {
    "text": "on the union shell uh is one of the oldest or or all the",
    "start": "1312200",
    "end": "1317600"
  },
  {
    "text": "different shells the dollar was invented for that purpose",
    "start": "1317600",
    "end": "1323299"
  },
  {
    "text": "because a very earliest shells had a notion of scripting but they did not",
    "start": "1323299",
    "end": "1328520"
  },
  {
    "text": "have a notion of parameterizing the scripting right and so a script is just a few",
    "start": "1328520",
    "end": "1335000"
  },
  {
    "text": "lines of text where each line of text is a command that is read by a very primitive command",
    "start": "1335000",
    "end": "1342919"
  },
  {
    "text": "processor that then sort of takes the first word on the line as the name of a",
    "start": "1342919",
    "end": "1348020"
  },
  {
    "text": "program and passes all the all the rest of the line as text into the program for",
    "start": "1348020",
    "end": "1355340"
  },
  {
    "text": "the program to figure out what to do with as arguments and so by the time scripting was",
    "start": "1355340",
    "end": "1362720"
  },
  {
    "text": "slightly more mature than the very first script there was a convention that just like",
    "start": "1362720",
    "end": "1369500"
  },
  {
    "text": "the first word of line is uh the name of the program the following words",
    "start": "1369500",
    "end": "1377059"
  },
  {
    "text": "uh could be names of files input.text",
    "start": "1377059",
    "end": "1382900"
  },
  {
    "text": "output.html things like that the next thing that happens is oh it",
    "start": "1382900",
    "end": "1389659"
  },
  {
    "text": "would actually be really nice if we could have variables and especially parameters for scripts parameters are",
    "start": "1389659",
    "end": "1396380"
  },
  {
    "text": "usually what starts this process but now you have a problem because you",
    "start": "1396380",
    "end": "1402260"
  },
  {
    "text": "can't just say the parameters are x y and z",
    "start": "1402260",
    "end": "1407360"
  },
  {
    "text": "and so now we we call say let's say x is the input file and Y is the output file",
    "start": "1407360",
    "end": "1413480"
  },
  {
    "text": "and let's forget about Z for now I have my program and I write program X Y well that",
    "start": "1413480",
    "end": "1420320"
  },
  {
    "text": "already has a meaning because that presumably means X itself is the file",
    "start": "1420320",
    "end": "1427220"
  },
  {
    "text": "it's a file name it's not a variable name uh and so",
    "start": "1427220",
    "end": "1434000"
  },
  {
    "text": "the inventors of of things like the unique shell and I'm sure job command language in at IBM before that",
    "start": "1434000",
    "end": "1442400"
  },
  {
    "text": "uh had to use something that made it clear to the",
    "start": "1442400",
    "end": "1448640"
  },
  {
    "text": "script processor here is an X that is not actually the",
    "start": "1448640",
    "end": "1453860"
  },
  {
    "text": "name of a file which you just pass through to the to the program you're running here is an X that is the name of",
    "start": "1453860",
    "end": "1461720"
  },
  {
    "text": "a variable yeah and when you're writing a script processor",
    "start": "1461720",
    "end": "1467020"
  },
  {
    "text": "you try to keep it as simple as possible because at as certainly in the 50s and",
    "start": "1467020",
    "end": "1473780"
  },
  {
    "text": "60s uh the thing that interprets the script was itself a very had to be a very small",
    "start": "1473780",
    "end": "1480559"
  },
  {
    "text": "program because it had to fit in a very small part of memory and so saying oh",
    "start": "1480559",
    "end": "1486500"
  },
  {
    "text": "just look at each character and if you see a dollar sign you jump to another",
    "start": "1486500",
    "end": "1492020"
  },
  {
    "text": "section of the code and then you gobble up characters or say until the next space or something and you say that's",
    "start": "1492020",
    "end": "1498679"
  },
  {
    "text": "the variable name and so it was was sort of invented as",
    "start": "1498679",
    "end": "1506539"
  },
  {
    "text": "a clever way to make parsing of things that contain but contain both variable",
    "start": "1506539",
    "end": "1512120"
  },
  {
    "text": "and fixed parts very easy in a very simple script processor it also helps even then it",
    "start": "1512120",
    "end": "1520400"
  },
  {
    "text": "also helps the human author and the human reader of the",
    "start": "1520400",
    "end": "1525740"
  },
  {
    "text": "the script to quickly see oh 20 lines down in the script I see a",
    "start": "1525740",
    "end": "1532760"
  },
  {
    "text": "reference to x y z Oh it has a dollar in front of it so now we know that x y z must be one of the parameters of the",
    "start": "1532760",
    "end": "1539299"
  },
  {
    "text": "script well this is fascinating several things to say which is the leftovers from the simple script",
    "start": "1539299",
    "end": "1546020"
  },
  {
    "text": "processor languages are now in code bases like behind Facebook or behind",
    "start": "1546020",
    "end": "1551720"
  },
  {
    "text": "most of the back end I think php's probably still runs most of the back end of the internet oh yeah yeah I think",
    "start": "1551720",
    "end": "1557299"
  },
  {
    "text": "there's a lot of it in Wikipedia too for example yeah it's funny that those decisions are not funny it's fascinating",
    "start": "1557299",
    "end": "1563360"
  },
  {
    "text": "that those decisions permeate Through Time just like biological systems right",
    "start": "1563360",
    "end": "1569960"
  },
  {
    "text": "I mean that the sort of the inner workings of DNA have been stable for well I don't know",
    "start": "1569960",
    "end": "1576980"
  },
  {
    "text": "how long it was like 300 million years half a billion years yeah and there",
    "start": "1576980",
    "end": "1582860"
  },
  {
    "text": "there are all sorts of weird quirks there that don't make a lot of sense if you",
    "start": "1582860",
    "end": "1587900"
  },
  {
    "text": "were to design a system like self-replicating molecules from scratch but that system has a lot",
    "start": "1587900",
    "end": "1594919"
  },
  {
    "text": "of interesting resilience it has redundancy that results like it messes",
    "start": "1594919",
    "end": "1601640"
  },
  {
    "text": "up in interesting ways that still is resilient when you look at the system level of the organism code doesn't",
    "start": "1601640",
    "end": "1608179"
  },
  {
    "text": "necessarily have that a program a computer programming code you'd be",
    "start": "1608179",
    "end": "1613580"
  },
  {
    "text": "surprised how much resilience modern code has",
    "start": "1613580",
    "end": "1618740"
  },
  {
    "start": "1618000",
    "end": "2306000"
  },
  {
    "text": "I mean if you if you look at the number of bugs per line of code even in in very well tested",
    "start": "1618740",
    "end": "1627679"
  },
  {
    "text": "code that in practice works just fine there are actually lots of things that",
    "start": "1627679",
    "end": "1634220"
  },
  {
    "text": "don't work fine and there are error correcting or self-correcting mechanisms at many",
    "start": "1634220",
    "end": "1641539"
  },
  {
    "text": "levels including probably the user of the code well in the end the user who",
    "start": "1641539",
    "end": "1647240"
  },
  {
    "text": "sort of is told well you got to reboot your your PC is part of that system and",
    "start": "1647240",
    "end": "1654320"
  },
  {
    "text": "a slightly uh less drastic thing is reload the page which we all know how to",
    "start": "1654320",
    "end": "1661580"
  },
  {
    "text": "do without thinking about it when something weird happens you you try to reload a few times before you say oh",
    "start": "1661580",
    "end": "1668539"
  },
  {
    "text": "there's something really weird okay or try to click the button again if the first time didn't work",
    "start": "1668539",
    "end": "1674140"
  },
  {
    "text": "well yeah that we should all have learned not to do that because that's probably just gonna turn the light back",
    "start": "1674140",
    "end": "1680720"
  },
  {
    "text": "off yeah true so do it three times that's the that's the right lesson so uh",
    "start": "1680720",
    "end": "1687080"
  },
  {
    "text": "and I wonder how many people actually like the dollar sign like you said it is",
    "start": "1687080",
    "end": "1692960"
  },
  {
    "text": "documentation so to me it's whatever the opposite of syntactic sugar is syntactic",
    "start": "1692960",
    "end": "1699500"
  },
  {
    "text": "poison to me it is such a pain in the ass that I have to type in a dollar shot",
    "start": "1699500",
    "end": "1704720"
  },
  {
    "text": "also super error prone so it's not self-documenting it's it's",
    "start": "1704720",
    "end": "1710240"
  },
  {
    "text": "like a bug generating thing it is a kind of documentation that's the pro and the con is it's a source of a lot of bugs",
    "start": "1710240",
    "end": "1716900"
  },
  {
    "text": "but actually I have to ask you um this is a really interesting idea of bugs per line of code",
    "start": "1716900",
    "end": "1723679"
  },
  {
    "text": "if you look at all the computer systems out there from the code that runs nuclear weapons to the code that runs",
    "start": "1723679",
    "end": "1731000"
  },
  {
    "text": "all the amazing companies that you've been involved with and not the code that runs Twitter and Facebook and Dropbox",
    "start": "1731000",
    "end": "1738080"
  },
  {
    "text": "and Google and Microsoft Windows and so on and we like laid out",
    "start": "1738080",
    "end": "1745220"
  },
  {
    "text": "wouldn't that be a cool like table bugs per line of code and what would that",
    "start": "1745220",
    "end": "1750919"
  },
  {
    "text": "let's let's put like actual companies aside do you think we'd be surprised by the number we see there for all these",
    "start": "1750919",
    "end": "1756919"
  },
  {
    "text": "companies that depends on whether you've ever read about research that's been done in this",
    "start": "1756919",
    "end": "1764480"
  },
  {
    "text": "area before and I didn't know the the re the the last",
    "start": "1764480",
    "end": "1770179"
  },
  {
    "text": "time I I saw some research like that that was probably in the 90s and the research",
    "start": "1770179",
    "end": "1775940"
  },
  {
    "text": "might have been done in the 80s but the the conclusion was across a wide range",
    "start": "1775940",
    "end": "1784220"
  },
  {
    "text": "of different software different languages different companies",
    "start": "1784220",
    "end": "1790460"
  },
  {
    "text": "different development styles the number of bugs is always",
    "start": "1790460",
    "end": "1796760"
  },
  {
    "text": "I think it's in the order of about one bug per thousand lines in sort of",
    "start": "1796760",
    "end": "1802240"
  },
  {
    "text": "mature software that that is considered interesting as good as it gets can I",
    "start": "1802240",
    "end": "1808820"
  },
  {
    "text": "give you some facts here there's a lot of good papers so you said mature software right so here's uh",
    "start": "1808820",
    "end": "1816380"
  },
  {
    "text": "a report from a uh like programming analytics company",
    "start": "1816380",
    "end": "1821720"
  },
  {
    "text": "now this is from a developer perspective let me just say what it says because this is very weird and surprising on",
    "start": "1821720",
    "end": "1829159"
  },
  {
    "text": "average a developer creates 70 bugs per 1000 lines of code",
    "start": "1829159",
    "end": "1834500"
  },
  {
    "text": "15 bugs per 1000 lines of code find their way to the customers",
    "start": "1834500",
    "end": "1839899"
  },
  {
    "text": "but this is in the software they've oh I was I was wrong by an order okay there fixing a bug takes 30 times longer than",
    "start": "1839899",
    "end": "1847279"
  },
  {
    "text": "writing a line of code that I can believe yeah 75 of a",
    "start": "1847279",
    "end": "1852559"
  },
  {
    "text": "developers time is spent on debugging um that's for an average developer that they Analyze This 15. argue",
    "start": "1852559",
    "end": "1860440"
  },
  {
    "text": "1500 hours a year in us alone 113 billion dollars to spend annually on",
    "start": "1860440",
    "end": "1867559"
  },
  {
    "text": "identifying and fixing bugs imagine this is marketing literature for",
    "start": "1867559",
    "end": "1873440"
  },
  {
    "text": "someone who claims to have a golden bullet or a silver bullet that makes all",
    "start": "1873440",
    "end": "1879020"
  },
  {
    "text": "that investment in fixing bugs go away but that that is usually yeah not going",
    "start": "1879020",
    "end": "1885020"
  },
  {
    "text": "to yeah that's not gonna happen well they're uh I mean they're referencing a lot of stuff of course but it is a page",
    "start": "1885020",
    "end": "1891279"
  },
  {
    "text": "uh that is you know there's a contact us button at the bottom presumably if you",
    "start": "1891279",
    "end": "1897440"
  },
  {
    "text": "just spend a little bit less than 100 billion dollars we're willing to solve the problem for you",
    "start": "1897440",
    "end": "1903440"
  },
  {
    "text": "right and there's also a report on stock exchanges stack overflow on the exact same topic but when I open it up at the",
    "start": "1903440",
    "end": "1909919"
  },
  {
    "text": "moment the page says stack Overflow is currently offline for maintenance oh it's ironic yes uh by the way their",
    "start": "1909919",
    "end": "1917179"
  },
  {
    "text": "error page is awesome anyway I mean can you believe that number of",
    "start": "1917179",
    "end": "1922340"
  },
  {
    "text": "bugs oh absolutely isn't that scary that 70 bucks per 1000 lines of code so even",
    "start": "1922340",
    "end": "1928340"
  },
  {
    "text": "10 bucks per thousand lives well that's about one bug after every 15 lines and that's when you're first typing it in",
    "start": "1928340",
    "end": "1935899"
  },
  {
    "text": "yeah from a developer but like how many bugs are going to be found if you're if you're typing well the",
    "start": "1935899",
    "end": "1942919"
  },
  {
    "text": "development process is extremely iterative yeah typically you don't make",
    "start": "1942919",
    "end": "1948500"
  },
  {
    "text": "a plan for what software you're going to release a year from now yeah uh and work",
    "start": "1948500",
    "end": "1954799"
  },
  {
    "text": "out all the details because actually all the details uh themselves consist",
    "start": "1954799",
    "end": "1960440"
  },
  {
    "text": "they're sort of compose a program and that's that",
    "start": "1960440",
    "end": "1965840"
  },
  {
    "text": "being a program all your plans will have bugs in them too and inaccuracies",
    "start": "1965840",
    "end": "1971840"
  },
  {
    "text": "uh but what what you actually do is you do a bunch of typing and I'm I'm",
    "start": "1971840",
    "end": "1978679"
  },
  {
    "text": "actually really I'm a really bad typist that just I've never learned to type",
    "start": "1978679",
    "end": "1985100"
  },
  {
    "text": "with 10 fingers how many do you use well I could use all 10 of them but not",
    "start": "1985100",
    "end": "1991220"
  },
  {
    "text": "very well but I I never I never took a talking class and I never sort of corrected that",
    "start": "1991220",
    "end": "1997039"
  },
  {
    "text": "so the first time I I seriously learned I had to learn the layout of a qwerty",
    "start": "1997039",
    "end": "2003399"
  },
  {
    "text": "keyboard was actually in college in my first programming classes where we used Punch",
    "start": "2003399",
    "end": "2009880"
  },
  {
    "text": "Cards and so with my two fingers I sort of pecked out",
    "start": "2009880",
    "end": "2016779"
  },
  {
    "text": "my code watch anyone give you a little coding demonstration",
    "start": "2016779",
    "end": "2023740"
  },
  {
    "text": "they'll have to produce like four lines of code and now see how many times they use the",
    "start": "2023740",
    "end": "2031179"
  },
  {
    "text": "backspace key yeah because they made a mistake and and and some people especially when when",
    "start": "2031179",
    "end": "2038440"
  },
  {
    "text": "someone else is looking will will backspace over 20 30 40",
    "start": "2038440",
    "end": "2045279"
  },
  {
    "text": "characters to fix a typo earlier in a line if you're",
    "start": "2045279",
    "end": "2050500"
  },
  {
    "text": "if you're slightly more experienced of course you use your arrow buttons to go or your mouse to but the mouse is",
    "start": "2050500",
    "end": "2056858"
  },
  {
    "text": "usually slower than uh than the arrows but a lot of people when they type a 20",
    "start": "2056859",
    "end": "2064000"
  },
  {
    "text": "character word which is not unusual and they realize they made us made a mistake",
    "start": "2064000",
    "end": "2069760"
  },
  {
    "text": "at the start of the word the backspace over the whole thing and then retype it and sometimes it",
    "start": "2069760",
    "end": "2075398"
  },
  {
    "text": "takes three four times to get it right so I don't know what your definition of bug",
    "start": "2075399",
    "end": "2081040"
  },
  {
    "text": "is arguably mistyping a word and then correcting it immediately is not a bug",
    "start": "2081040",
    "end": "2087520"
  },
  {
    "text": "on the other hand you you already do sort of lose time and every once in a",
    "start": "2087520",
    "end": "2094240"
  },
  {
    "text": "while there's sort of a typo that you don't get in that process",
    "start": "2094240",
    "end": "2099700"
  },
  {
    "text": "and now you've you've typed like 10 lines of code uh and some were in the middle of it you",
    "start": "2099700",
    "end": "2105700"
  },
  {
    "text": "don't know where yet is a typo or maybe a thinko where you you forgot that you",
    "start": "2105700",
    "end": "2112180"
  },
  {
    "text": "had to initialize a variable or something but those are two different things and I would say yes you have to",
    "start": "2112180",
    "end": "2117339"
  },
  {
    "text": "actually run the code to discover that typo but forgetting to initialize a variable is a fundamentally different",
    "start": "2117339",
    "end": "2123700"
  },
  {
    "text": "thing because that thing can go undiscovered uh that depends on the",
    "start": "2123700",
    "end": "2128920"
  },
  {
    "text": "language in Python it will not right in sort of modern compilers are usually pretty good at catching that even",
    "start": "2128920",
    "end": "2135579"
  },
  {
    "text": "even foresee so for that specific thing but actually deeper it might there might be another variable",
    "start": "2135579",
    "end": "2143280"
  },
  {
    "text": "that has initialized but logically speaking the one you meant related yep",
    "start": "2143280",
    "end": "2150359"
  },
  {
    "text": "it's like name the same but it's a different thing and you forgot to initialize uh whatever some counter or",
    "start": "2150359",
    "end": "2156880"
  },
  {
    "text": "some some basic variable they're using I can tell that you've coded yes by the",
    "start": "2156880",
    "end": "2162280"
  },
  {
    "text": "way I should mention that I use the Kinesis keyboard which has the backspace under the thumb",
    "start": "2162280",
    "end": "2167440"
  },
  {
    "text": "and one of the biggest reasons I use that keyboard is because you realize in",
    "start": "2167440",
    "end": "2174099"
  },
  {
    "text": "order to use the backspace on a usual keyboard you have to stretch your pinky out",
    "start": "2174099",
    "end": "2179940"
  },
  {
    "text": "and like the the for most normal keyboards the Backspaces under the pinky",
    "start": "2179940",
    "end": "2186280"
  },
  {
    "text": "and so I don't know if people realize the pain they go through in their life",
    "start": "2186280",
    "end": "2192700"
  },
  {
    "text": "because of the backspace keep being so far away so with the Kinesis it's right under the thumb so you don't have to",
    "start": "2192700",
    "end": "2198160"
  },
  {
    "text": "actually move your hands the backspace and the delivery what do you do if you're ever not with your own keyboard",
    "start": "2198160",
    "end": "2205060"
  },
  {
    "text": "and you have to use someone else's PC keyboard that has a standard layout so",
    "start": "2205060",
    "end": "2210760"
  },
  {
    "text": "first of all it turns out that you can actually go your whole life always having the keyboard",
    "start": "2210760",
    "end": "2216160"
  },
  {
    "text": "with you so this well except for that that little tablet that you're using so we're note taking right now right uh",
    "start": "2216160",
    "end": "2223000"
  },
  {
    "text": "yeah so it's very inefficient note-taking but I'm not I'm just looking stuff up but in most cases I would be",
    "start": "2223000",
    "end": "2229540"
  },
  {
    "text": "actually using the keyboard here right now I just don't anticipate you have to calculate how much typing do you",
    "start": "2229540",
    "end": "2236440"
  },
  {
    "text": "anticipate if I anticipate quite a bit then I'll just I have a keyboard and the same same with I mean",
    "start": "2236440",
    "end": "2243700"
  },
  {
    "text": "the embarrassing of accepted being the weirdo that I am but you know when I go on an airplane",
    "start": "2243700",
    "end": "2251680"
  },
  {
    "text": "and I anticipate to do programming or a lot of typing I will have a laptop that",
    "start": "2251680",
    "end": "2257320"
  },
  {
    "text": "will put pull out a Kinesis keyboard in addition to the laptop and it's just who",
    "start": "2257320",
    "end": "2262780"
  },
  {
    "text": "I am you have to you have to accept who you are um but also it's a you know for a lot of",
    "start": "2262780",
    "end": "2268359"
  },
  {
    "text": "people for me certainly there's a comfort space where there's a certain kind of setups",
    "start": "2268359",
    "end": "2274540"
  },
  {
    "text": "that are maximized productivity and um it's like some people have a warm",
    "start": "2274540",
    "end": "2280839"
  },
  {
    "text": "blanket that they like when they watch a movie I like the Kinesis keyboard takes me to uh a place",
    "start": "2280839",
    "end": "2287560"
  },
  {
    "text": "of focus and I still mostly I I'm trying to make sure I use the state-of-the-art",
    "start": "2287560",
    "end": "2293619"
  },
  {
    "text": "IDS for everything but my comfort place just like the Kinesis keyboard is still",
    "start": "2293619",
    "end": "2298780"
  },
  {
    "text": "emacs so I still use I still I mean that's one of",
    "start": "2298780",
    "end": "2307000"
  },
  {
    "start": "2306000",
    "end": "3217000"
  },
  {
    "text": "some of the debates I have with myself about everything from a technology perspective",
    "start": "2307000",
    "end": "2312339"
  },
  {
    "text": "is how much to hold on to the tools you're comfortable with versus how much to invest in using modern tools and the",
    "start": "2312339",
    "end": "2320859"
  },
  {
    "text": "signal that the communities provide you with is the noisy one because a lot of people year to year get excited about",
    "start": "2320859",
    "end": "2327160"
  },
  {
    "text": "new tools and you have to make a prediction are these tools defining a",
    "start": "2327160",
    "end": "2332619"
  },
  {
    "text": "new generation or something that will transform programming or is this just a fad that will pass certainly with",
    "start": "2332619",
    "end": "2339040"
  },
  {
    "text": "JavaScript Frameworks and front and the back end of the web there's a lot of",
    "start": "2339040",
    "end": "2345040"
  },
  {
    "text": "different styles that came and went I remember learning um what was it called",
    "start": "2345040",
    "end": "2350619"
  },
  {
    "text": "the action script I remember for flash um you know learning how to program in",
    "start": "2350619",
    "end": "2355780"
  },
  {
    "text": "Flash uh learning how to design doing graphic animation all that kind of stuff in Flash same with Java applets I",
    "start": "2355780",
    "end": "2362859"
  },
  {
    "text": "remember creating quite a lot of java applets thinking that this potentially defines the future of the web and it did",
    "start": "2362859",
    "end": "2369099"
  },
  {
    "text": "not well you know in most cases like that the particular technology",
    "start": "2369099",
    "end": "2375060"
  },
  {
    "text": "eventually gets replaced but many of the concepts that the technology",
    "start": "2375060",
    "end": "2383339"
  },
  {
    "text": "introduced or made accessible first are preserved of course",
    "start": "2383339",
    "end": "2390640"
  },
  {
    "text": "because yeah we're not using Java applets anymore but the notion of reactive web pages",
    "start": "2390640",
    "end": "2397780"
  },
  {
    "text": "that sort of contain little bits of code that respond directly to",
    "start": "2397780",
    "end": "2404800"
  },
  {
    "text": "something you do like pressing a button or a link or hovering even uh is has certainly not gone away",
    "start": "2404800",
    "end": "2412420"
  },
  {
    "text": "and that those animations that were made painfully",
    "start": "2412420",
    "end": "2418200"
  },
  {
    "text": "complicated with flesh I mean flash was an innovation when it",
    "start": "2418200",
    "end": "2423880"
  },
  {
    "text": "first came up and when it was replaced by JavaScript equivalence",
    "start": "2423880",
    "end": "2430119"
  },
  {
    "text": "stuff it was a somewhat better way to do animations but those animations are",
    "start": "2430119",
    "end": "2436660"
  },
  {
    "text": "still there not all of them but but sort of",
    "start": "2436660",
    "end": "2441880"
  },
  {
    "text": "again there is an evolution and often so often with technology",
    "start": "2441880",
    "end": "2447280"
  },
  {
    "text": "the the sort of the technology that was eventually thrown away or replaced",
    "start": "2447280",
    "end": "2452800"
  },
  {
    "text": "was still essential to to sort of get started there wouldn't be jet planes",
    "start": "2452800",
    "end": "2459700"
  },
  {
    "text": "without propeller planes I bet you but from a user perspective",
    "start": "2459700",
    "end": "2465520"
  },
  {
    "text": "yes from the feature set yes but I from a programmer perspective it feels like",
    "start": "2465520",
    "end": "2473079"
  },
  {
    "text": "all the time I've spent with actionscript all the time I spent",
    "start": "2473079",
    "end": "2478599"
  },
  {
    "text": "with Java on the applet side for the GUI development I well no Java I have to push back that was useful that because",
    "start": "2478599",
    "end": "2485859"
  },
  {
    "text": "it transfers but the Flash doesn't transfer so some things you learn and invest time in what yeah what what you",
    "start": "2485859",
    "end": "2493119"
  },
  {
    "text": "learned this the skill you picked up learning action script yeah",
    "start": "2493119",
    "end": "2498400"
  },
  {
    "text": "was sort of it was perhaps a super valuable skill at the time you",
    "start": "2498400",
    "end": "2505119"
  },
  {
    "text": "picked it up if if you if you learned action script early enough but",
    "start": "2505119",
    "end": "2513400"
  },
  {
    "text": "that skill is no longer in demand well that's the calculation you have to make when you're learning",
    "start": "2513520",
    "end": "2520000"
  },
  {
    "text": "new things like today people start learning programming today I'm trying to to see what are the new languages to try",
    "start": "2520000",
    "end": "2527440"
  },
  {
    "text": "what are the new uh systems to try that what are the new IDs to try to to keep",
    "start": "2527440",
    "end": "2532900"
  },
  {
    "text": "keep improving because that's why we start when we're young right",
    "start": "2532900",
    "end": "2538380"
  },
  {
    "text": "but that seems very true to me that that when you're young you have your whole life ahead of you and your you're",
    "start": "2538380",
    "end": "2545800"
  },
  {
    "text": "allowed to make mistakes in fact you should you should feel encouraged to to",
    "start": "2545800",
    "end": "2550839"
  },
  {
    "text": "do a bit of stupid stuff yeah try not to get yourself killed or seriously maimed",
    "start": "2550839",
    "end": "2556780"
  },
  {
    "text": "but try stuff that deviate from from what everybody else is",
    "start": "2556780",
    "end": "2562720"
  },
  {
    "text": "doing and like nine out of ten times you'll just learn why everybody else is not",
    "start": "2562720",
    "end": "2569800"
  },
  {
    "text": "doing that or why everybody else is doing it some other way and one out of",
    "start": "2569800",
    "end": "2574900"
  },
  {
    "text": "ten times you sort of you discover something that's better or",
    "start": "2574900",
    "end": "2580240"
  },
  {
    "text": "that's that somehow works I mean there are all sorts of crazy things that were invented",
    "start": "2580240",
    "end": "2585760"
  },
  {
    "text": "uh by accident by people trying trying stuff together",
    "start": "2585760",
    "end": "2590980"
  },
  {
    "text": "that's great advice to try random stuff make a lot of mistakes once you're married with kids you're probably going",
    "start": "2590980",
    "end": "2597460"
  },
  {
    "text": "to uh be a little more risk-averse because now there's more at stake and you've already hopefully had some time",
    "start": "2597460",
    "end": "2604480"
  },
  {
    "text": "where you where you were experimenting with crazy shit I like how marriage and kids solidifies their choice of",
    "start": "2604480",
    "end": "2610780"
  },
  {
    "text": "programming language how does that the robber Frost poem with the The Road Less taken which I think is misinterpreted by",
    "start": "2610780",
    "end": "2617859"
  },
  {
    "text": "most people but anyway I I feel like the choices you make early on especially if you go all in they're",
    "start": "2617859",
    "end": "2625060"
  },
  {
    "text": "going to define the rest of your life's trajectory in a way that like you basically are picking a camp so",
    "start": "2625060",
    "end": "2631900"
  },
  {
    "text": "uh you know there's if you invest a lot in PHP if you invest a lot in.net if you",
    "start": "2631900",
    "end": "2638020"
  },
  {
    "text": "invest a lot in JavaScript you're going to stick there",
    "start": "2638020",
    "end": "2644380"
  },
  {
    "text": "you that's that's your life Journey only as far as that technology remains",
    "start": "2644380",
    "end": "2652960"
  },
  {
    "text": "relevant yes yes I mean if if at age 16 you learn coding in C",
    "start": "2652960",
    "end": "2660480"
  },
  {
    "text": "and by the time you're 26 C is like a dead language",
    "start": "2660480",
    "end": "2667380"
  },
  {
    "text": "then there's still time to switch there's probably some kind of Survivor",
    "start": "2668079",
    "end": "2674140"
  },
  {
    "text": "bias or whatever it's called in in sort of your observation that that you pick a",
    "start": "2674140",
    "end": "2680260"
  },
  {
    "text": "camp because there are many different camps to pick and if you pick dot net",
    "start": "2680260",
    "end": "2685740"
  },
  {
    "text": "then then you can Coast for the rest of your life because that technology is now",
    "start": "2685740",
    "end": "2692200"
  },
  {
    "text": "so ubiquitous of course that it's even if it's if it's bound to die it's going",
    "start": "2692200",
    "end": "2697420"
  },
  {
    "text": "to take a very long time well for me personally I had a very difficult in my own head",
    "start": "2697420",
    "end": "2705280"
  },
  {
    "text": "Brave leap that I had to take relevant to our discussion which is most of my",
    "start": "2705280",
    "end": "2710319"
  },
  {
    "text": "life I programmed in C and C plus plus and so uh having that hammer everything",
    "start": "2710319",
    "end": "2717040"
  },
  {
    "text": "looked like a nail so I would literally even do scripting in C plus plus like I would create",
    "start": "2717040",
    "end": "2722740"
  },
  {
    "text": "programs that do script like things and uh when I first came to Google and and",
    "start": "2722740",
    "end": "2728380"
  },
  {
    "text": "before then it became already before tensorflow before all of that there was a growing realization that c plus is not",
    "start": "2728380",
    "end": "2736300"
  },
  {
    "text": "the right tool for machine learning we could talk about why that is it's unclear why that is a lot of things",
    "start": "2736300",
    "end": "2742720"
  },
  {
    "text": "has to do with community and culture and how it emerges and stuff like that but for me they decided to take the leap to",
    "start": "2742720",
    "end": "2749740"
  },
  {
    "text": "python like all out basically switched completely from C plus plus except for a",
    "start": "2749740",
    "end": "2756700"
  },
  {
    "text": "highly performant robotics applications there were still uh there's still a culture of C plus plus",
    "start": "2756700",
    "end": "2761800"
  },
  {
    "text": "in in the space of robotics that was a big leap like I had to you know like like people",
    "start": "2761800",
    "end": "2769300"
  },
  {
    "text": "have like existential crises or midlife crises or whatever you have to realize almost like walking away from uh from a",
    "start": "2769300",
    "end": "2776920"
  },
  {
    "text": "person you love um because I was sure that c plus would have to be a lifelong companion for a",
    "start": "2776920",
    "end": "2783460"
  },
  {
    "text": "lot of problems I would want to solve C plus would be there and it was a question to say well that might not be",
    "start": "2783460",
    "end": "2788920"
  },
  {
    "text": "the case because sibo spots is still one of the most popular languages in the world one of the most used one of the",
    "start": "2788920",
    "end": "2794319"
  },
  {
    "text": "most dependent on it's also still evolving quite a bit I mean",
    "start": "2794319",
    "end": "2800619"
  },
  {
    "text": "that that is not a sort of a fossilizing community yes they they are doing great",
    "start": "2800619",
    "end": "2808000"
  },
  {
    "text": "Innovative work actually a lot but yet the sort of their Innovations are hard to follow if you're not already a",
    "start": "2808000",
    "end": "2814839"
  },
  {
    "text": "hardcore C plus plus user well this was the thing it pulls you in it's a rabbit hole I was a hardcore the all meta",
    "start": "2814839",
    "end": "2821920"
  },
  {
    "text": "programming template programming like I I would start using the modern C plus plus as it developed right not just the",
    "start": "2821920",
    "end": "2829119"
  },
  {
    "text": "not just the shared pointer and the garbage collection that makes it easier for you to work with some of the flaws",
    "start": "2829119",
    "end": "2835240"
  },
  {
    "text": "but the detail like The Meta programming the the crazy stuff that's that's coming out there but then you have to just",
    "start": "2835240",
    "end": "2842079"
  },
  {
    "text": "empirically look and step back and say what language am I more productive in",
    "start": "2842079",
    "end": "2849700"
  },
  {
    "text": "sorry to say what language do I enjoy my life with more",
    "start": "2849700",
    "end": "2854740"
  },
  {
    "text": "and uh readability and able to think through and all that kind of stuff that those questions are harder to ask when",
    "start": "2854740",
    "end": "2861460"
  },
  {
    "text": "you already have a loved one which in my case was C plus plus and then there's python uh like",
    "start": "2861460",
    "end": "2869319"
  },
  {
    "text": "that Meme was is the the grass is greener on the other side am I just infatuated with a new fad new cool thing",
    "start": "2869319",
    "end": "2876280"
  },
  {
    "text": "or is this actually going to make my life better and I think a lot of people face that kind of decision it was a",
    "start": "2876280",
    "end": "2882460"
  },
  {
    "text": "difficult decision for me um when I made it at this time it's an",
    "start": "2882460",
    "end": "2887500"
  },
  {
    "text": "obvious switch if you're into machine learning but at that time it wasn't quite yet so obvious so it was a risk",
    "start": "2887500",
    "end": "2894700"
  },
  {
    "text": "and you know you have the same kind of stuff with um I still because of my connection to Wordpress",
    "start": "2894700",
    "end": "2900819"
  },
  {
    "text": "I still do a lot of back-end programming in PHP uh",
    "start": "2900819",
    "end": "2906579"
  },
  {
    "text": "and the question is you know node.js python do you switch to do you switch back into any of those",
    "start": "2906579",
    "end": "2913119"
  },
  {
    "text": "programming there's the case for node.js for me well more and more and more of",
    "start": "2913119",
    "end": "2918640"
  },
  {
    "text": "the front end it runs in JavaScript um and fascinating cool stuff is known",
    "start": "2918640",
    "end": "2924460"
  },
  {
    "text": "as JavaScript maybe use the same programming language for the back end as well uh the case for python for the back end",
    "start": "2924460",
    "end": "2931119"
  },
  {
    "text": "is well you're doing so much programming outside of the web in Python so maybe",
    "start": "2931119",
    "end": "2937000"
  },
  {
    "text": "use Python for the back end and then the case for PHP well most of the web still",
    "start": "2937000",
    "end": "2942400"
  },
  {
    "text": "runs in PHP you have a lot of experience with PHP why uh fix something that's not broken",
    "start": "2942400",
    "end": "2949540"
  },
  {
    "text": "those are my own personal struggles but I think they reflect the struggles of a lot of people and with different",
    "start": "2949540",
    "end": "2955300"
  },
  {
    "text": "programming languages with different problems they're trying to solve it's a weird one and there there's not a single",
    "start": "2955300",
    "end": "2961359"
  },
  {
    "text": "answer right because depending on how much time you have to learn new stuff",
    "start": "2961359",
    "end": "2967119"
  },
  {
    "text": "where you are in your life what what you're currently working on who you want",
    "start": "2967119",
    "end": "2972160"
  },
  {
    "text": "to work with what communities you like yeah there's not one right choice",
    "start": "2972160",
    "end": "2977680"
  },
  {
    "text": "maybe if you if you sort of if you can look back 20 years you can",
    "start": "2977680",
    "end": "2982960"
  },
  {
    "text": "say well that whole detour through action script was a waste of time but",
    "start": "2982960",
    "end": "2989319"
  },
  {
    "text": "nobody could know that so you can you can beat yourself up over",
    "start": "2989319",
    "end": "2994359"
  },
  {
    "text": "that uh you just need to accept that not every choice you make",
    "start": "2994359",
    "end": "3000660"
  },
  {
    "text": "is going to be perfect maybe sort of keep Plan B in the back of your mind",
    "start": "3000660",
    "end": "3008060"
  },
  {
    "text": "uh but don't don't overthink it don't don't try to sort of don't don't create",
    "start": "3008060",
    "end": "3015480"
  },
  {
    "text": "a spreadsheet with like where you're trying to estimate well if I learn this",
    "start": "3015480",
    "end": "3022200"
  },
  {
    "text": "language I expect to make x million dollars in a lifetime and if I learn that language I expect to make why a",
    "start": "3022200",
    "end": "3029940"
  },
  {
    "text": "million dollars in a lifetime and which Which is higher and what which has more",
    "start": "3029940",
    "end": "3035460"
  },
  {
    "text": "risk and where's the chance that it's like picking picking a stock",
    "start": "3035460",
    "end": "3041420"
  },
  {
    "text": "kind of kind of but uh I think with stocks you can do",
    "start": "3042020",
    "end": "3048980"
  },
  {
    "text": "diversifying your investment as good with productivity in life",
    "start": "3048980",
    "end": "3054119"
  },
  {
    "text": "boy that spreadsheet is possible to construct like if you actually carefully analyze",
    "start": "3054119",
    "end": "3061500"
  },
  {
    "text": "what your interest in life are where you think you can maximally impact the world there really is better and worse choices",
    "start": "3061500",
    "end": "3069119"
  },
  {
    "text": "for a programming language that are not just about the syntax but about the community about where you predict the",
    "start": "3069119",
    "end": "3075300"
  },
  {
    "text": "community's headed what large systems are programmed in that but can you create that spreadsheet",
    "start": "3075300",
    "end": "3081900"
  },
  {
    "text": "because that sort of you're mentioning a whole bunch of inputs that go into that spreadsheet where you have to estimate",
    "start": "3081900",
    "end": "3088619"
  },
  {
    "text": "things that are very hard to measure and even harder I mean they're they're hard",
    "start": "3088619",
    "end": "3093839"
  },
  {
    "text": "to measure retroactively and they're even harder to predict like what is the better",
    "start": "3093839",
    "end": "3099839"
  },
  {
    "text": "community well better is is one of those incredibly difficult words what's better",
    "start": "3099839",
    "end": "3107160"
  },
  {
    "text": "for you is not better for someone else no but we're not doing a public speech about what's better we're doing a",
    "start": "3107160",
    "end": "3113040"
  },
  {
    "text": "personal spiritual journey I can determine a circle of friends circle circle one and circle two and I",
    "start": "3113040",
    "end": "3120119"
  },
  {
    "text": "can have a bunch of parties with one and a bunch of parties with two and then right down or to take a mental note of",
    "start": "3120119",
    "end": "3126960"
  },
  {
    "text": "what made me happier right and that you know you have if you're a machine learning person you want to say Okay I",
    "start": "3126960",
    "end": "3134160"
  },
  {
    "text": "want to build a large company that does that is grounded in machine learning but",
    "start": "3134160",
    "end": "3139380"
  },
  {
    "text": "also has a sexy interface that has a large impact on the world what languages do I use you look at what Facebook is",
    "start": "3139380",
    "end": "3146520"
  },
  {
    "text": "using you look at what Twitter is using then you look at performance more newer languages like rust or you look at",
    "start": "3146520",
    "end": "3154079"
  },
  {
    "text": "languages that have taken that most the community uses in the machine learning space that's Python and you can like",
    "start": "3154079",
    "end": "3160440"
  },
  {
    "text": "think through you can hang out and think through it and it's it's always a invest and the the level of activity of the",
    "start": "3160440",
    "end": "3167220"
  },
  {
    "text": "community is also really interesting like you said C plus plus and python are super active in terms of the development",
    "start": "3167220",
    "end": "3172859"
  },
  {
    "text": "of the language itself but do you think that you can make objective choices there no no but",
    "start": "3172859",
    "end": "3180540"
  },
  {
    "text": "there's a gut you build up like don't you don't you believe in that gut feeling everything is very subjective",
    "start": "3180540",
    "end": "3187079"
  },
  {
    "text": "and yes you most certainly can have a gut feeling and your gut can also be wrong that's why there are billions of",
    "start": "3187079",
    "end": "3193740"
  },
  {
    "text": "people because they're not all right I mean clearly there are more people living in the Bay Area who have plans to",
    "start": "3193740",
    "end": "3201420"
  },
  {
    "text": "sort of create a Google sized company then there's room in the world for",
    "start": "3201420",
    "end": "3206640"
  },
  {
    "text": "Google sized companies and they're gonna have to Duke it out in the market the",
    "start": "3206640",
    "end": "3212280"
  },
  {
    "text": "space and there's many more choices than just the programming language speaking",
    "start": "3212280",
    "end": "3217740"
  },
  {
    "start": "3217000",
    "end": "4711000"
  },
  {
    "text": "of which let's go back to the boat with the with the fisherman who's tuned out long ago I talked to the programmer",
    "start": "3217740",
    "end": "3224640"
  },
  {
    "text": "let's jump around and go back to see python that we tried to Define as the reference implementation and one of the",
    "start": "3224640",
    "end": "3231180"
  },
  {
    "text": "big things that's coming out in 3.11 what's the right way we tend to say 3.11 because it really was like we went 3.8",
    "start": "3231180",
    "end": "3239400"
  },
  {
    "text": "3.9 3.10 3.11 and we're planning to go up to 3.99 99 what happens after 99",
    "start": "3239400",
    "end": "3247140"
  },
  {
    "text": "probably just 3.100 what if I make it there okay and go all the way to 420. I got it",
    "start": "3247140",
    "end": "3253920"
  },
  {
    "text": "forever python V3 we'll talk about four but more for fun",
    "start": "3253920",
    "end": "3260119"
  },
  {
    "text": "so 3.11 is coming out one of the big sexy things in it is it'll be much faster so how did you beyond hiring a",
    "start": "3260160",
    "end": "3269280"
  },
  {
    "text": "great team or working with a great team make it faster what are some ideas uh that may makes it faster",
    "start": "3269280",
    "end": "3277020"
  },
  {
    "text": "it has to do with Simplicity of software versus performance",
    "start": "3277020",
    "end": "3282780"
  },
  {
    "text": "and so even though C is known to be a low-level language which is",
    "start": "3282780",
    "end": "3288660"
  },
  {
    "text": "great for writing sort of a high performance language interpreter",
    "start": "3288660",
    "end": "3295020"
  },
  {
    "text": "when I originally started python or C python",
    "start": "3295020",
    "end": "3300059"
  },
  {
    "text": "I didn't expect there would be great success and fame in my future",
    "start": "3300059",
    "end": "3308960"
  },
  {
    "text": "uh so I I try to get something working",
    "start": "3308960",
    "end": "3315119"
  },
  {
    "text": "and useful uh in about three months",
    "start": "3315119",
    "end": "3320880"
  },
  {
    "text": "and so I I sort of I cut corners I borrowed ideas left and right when it",
    "start": "3320880",
    "end": "3329040"
  },
  {
    "text": "comes to language design as well as implementation uh I also wrote much of the code as",
    "start": "3329040",
    "end": "3336540"
  },
  {
    "text": "simple as it could be and they're they're like",
    "start": "3336540",
    "end": "3342540"
  },
  {
    "text": "there are many things that you can code more efficiently by adding more code",
    "start": "3342540",
    "end": "3349800"
  },
  {
    "text": "it's a bit of a sort of a time space trade-off",
    "start": "3349800",
    "end": "3355200"
  },
  {
    "text": "where you can compute a certain thing from a small number of inputs",
    "start": "3355200",
    "end": "3361980"
  },
  {
    "text": "uh and every time you get presented with new input uh you do the whole computation from the",
    "start": "3361980",
    "end": "3368940"
  },
  {
    "text": "top that can be simple looking code it's easy to understand it's easy to reason",
    "start": "3368940",
    "end": "3374940"
  },
  {
    "text": "about that you can you can tell quickly that it's correct in at least in the sort of mathematical sense of correct",
    "start": "3374940",
    "end": "3384079"
  },
  {
    "text": "uh because it's implemented in C maybe it performs relatively well",
    "start": "3384079",
    "end": "3390540"
  },
  {
    "text": "but over time as sort of as the requirements for that code and",
    "start": "3390540",
    "end": "3397920"
  },
  {
    "text": "the need for performance go up you might be able to rewrite that same",
    "start": "3397920",
    "end": "3404579"
  },
  {
    "text": "algorithm using more memory maybe remember",
    "start": "3404579",
    "end": "3409920"
  },
  {
    "text": "previous results so you don't have to recompute everything from scratch like the the",
    "start": "3409920",
    "end": "3416160"
  },
  {
    "text": "classic example is Computing prime numbers like is 10 a prime number",
    "start": "3416160",
    "end": "3423240"
  },
  {
    "text": "well you sort of is it divisible by two is it divisible by three is it divisible",
    "start": "3423240",
    "end": "3428460"
  },
  {
    "text": "by four and we go all the way to is it divisible by 9. and it is not well",
    "start": "3428460",
    "end": "3434760"
  },
  {
    "text": "actually 10 is divisible by two so there we stop but say 11. it's divisible by",
    "start": "3434760",
    "end": "3440160"
  },
  {
    "text": "ten the answer is nine is no ten times in a row so now we know 11 is a prime",
    "start": "3440160",
    "end": "3445260"
  },
  {
    "text": "number on the other hand if we already know that 2 3 5 and 7 are prime numbers and",
    "start": "3445260",
    "end": "3452640"
  },
  {
    "text": "you know a little bit about the mathematics of how prime numbers work you know that if you have a rough",
    "start": "3452640",
    "end": "3459420"
  },
  {
    "text": "estimate for the square root of 11 you don't actually have to check is it",
    "start": "3459420",
    "end": "3464640"
  },
  {
    "text": "divisible by four or is it divisible by five you all you have to check in the case of 11 is is it divisible by 2 is it",
    "start": "3464640",
    "end": "3471780"
  },
  {
    "text": "divisible by three because take 12. if it's divisible by 4 well 12 divided",
    "start": "3471780",
    "end": "3479160"
  },
  {
    "text": "by 4 is 3 so you you should have come across the question is it divisible by 3",
    "start": "3479160",
    "end": "3484200"
  },
  {
    "text": "first so if you know basically nothing about prime numbers except the definition",
    "start": "3484200",
    "end": "3490079"
  },
  {
    "text": "maybe you go for X from 2 through n minus 1 is n divisible by X",
    "start": "3490079",
    "end": "3499200"
  },
  {
    "text": "and then at the end if you got uh all no's uh for every single one of those",
    "start": "3499200",
    "end": "3506220"
  },
  {
    "text": "questions you know oh it must be a prime number well the first thing is you can",
    "start": "3506220",
    "end": "3511260"
  },
  {
    "text": "stop iterating when you find a yes answer and the second is you can also stop",
    "start": "3511260",
    "end": "3517140"
  },
  {
    "text": "iterating when you have have reached the square root of n because you know",
    "start": "3517140",
    "end": "3523680"
  },
  {
    "text": "that if it has a divisor larger than than the square root did not also have a divisor smaller than the square root",
    "start": "3523680",
    "end": "3531079"
  },
  {
    "text": "then you say oh except for two we don't need to bother with checking for even",
    "start": "3531079",
    "end": "3536460"
  },
  {
    "text": "numbers because all even numbers are divisible by two so if it's divisible by four",
    "start": "3536460",
    "end": "3542160"
  },
  {
    "text": "we would already have come across the question is it divisible by two and so now you go special case check is a",
    "start": "3542160",
    "end": "3548940"
  },
  {
    "text": "divisible by two and then you just check three five seven eleven uh and so now you've you've sort of",
    "start": "3548940",
    "end": "3555960"
  },
  {
    "text": "reduced your search Pace by 50 Again by by skipping all the even numbers I kept",
    "start": "3555960",
    "end": "3561359"
  },
  {
    "text": "for two if you think a bit more about it or you just read in your book about the history of",
    "start": "3561359",
    "end": "3568380"
  },
  {
    "text": "math one of the first algorithms ever written down all you have to do is check is it",
    "start": "3568380",
    "end": "3575339"
  },
  {
    "text": "divisible by any of the previous prime numbers that are smaller than the square root",
    "start": "3575339",
    "end": "3580920"
  },
  {
    "text": "and before you get to a better algorithm than that",
    "start": "3580920",
    "end": "3586400"
  },
  {
    "text": "you have to have several phds in in discrete math so that's as much as I",
    "start": "3586400",
    "end": "3593880"
  },
  {
    "text": "know so of course that same story applies to a lot of other algorithms string matching is a good example",
    "start": "3593880",
    "end": "3600000"
  },
  {
    "text": "of uh how to come up with an efficient algorithm and sometimes yeah the more",
    "start": "3600000",
    "end": "3605160"
  },
  {
    "text": "efficient algorithm is not so much more complex than the inefficient one but that's an art and it's not always the",
    "start": "3605160",
    "end": "3612119"
  },
  {
    "text": "case in the general cases the more performant the algorithm the more",
    "start": "3612119",
    "end": "3617460"
  },
  {
    "text": "complex it's going to be there's a there's a kind of trade-off the simpler algorithms are also the ones that people",
    "start": "3617460",
    "end": "3624599"
  },
  {
    "text": "invent first because when you're looking for a solution",
    "start": "3624599",
    "end": "3629640"
  },
  {
    "text": "you look at the simplest way to get there first and so if there is a simple solution",
    "start": "3629640",
    "end": "3636500"
  },
  {
    "text": "even if it's not the best solution not the fastest or the memory most memory",
    "start": "3636500",
    "end": "3642059"
  },
  {
    "text": "efficient or whatever a a simple solution and simple is is",
    "start": "3642059",
    "end": "3648059"
  },
  {
    "text": "fairly subjective but mathematicians have also thought about sort of what is",
    "start": "3648059",
    "end": "3653700"
  },
  {
    "text": "a good definition for simple in the case of algorithms uh but the simpler the simpler Solutions",
    "start": "3653700",
    "end": "3660740"
  },
  {
    "text": "tend to be easier to follow for other programmers",
    "start": "3660740",
    "end": "3666180"
  },
  {
    "text": "who haven't made a study of a particular field and when I when I started with python I I was a good programmer in",
    "start": "3666180",
    "end": "3674220"
  },
  {
    "text": "general I knew sort of basic data structures I knew the C language pretty well but there were many areas where I was",
    "start": "3674220",
    "end": "3683940"
  },
  {
    "text": "only somewhat familiar with the state of the art",
    "start": "3683940",
    "end": "3689940"
  },
  {
    "text": "and so I I picked in many cases the simplest way I could",
    "start": "3689940",
    "end": "3695700"
  },
  {
    "text": "solve a particular sub problem because when you when you're designing and implementing a language you have to like",
    "start": "3695700",
    "end": "3702299"
  },
  {
    "text": "you've many hundreds of little problems to solve and you have to have solutions for every",
    "start": "3702299",
    "end": "3708900"
  },
  {
    "text": "one of them before you can can sort of say I've invented a programming language",
    "start": "3708900",
    "end": "3716099"
  },
  {
    "text": "first of all so see python what kind of things does it do it's an interpreter it",
    "start": "3716099",
    "end": "3723000"
  },
  {
    "text": "takes in this readable language that we talked about that is python what is it supposed to do The Interpreter basically",
    "start": "3723000",
    "end": "3729780"
  },
  {
    "text": "it's it's sort of a recipe for understanding recipes",
    "start": "3729780",
    "end": "3736799"
  },
  {
    "text": "so instead of a recipe that says bake me a cake we have a recipe for",
    "start": "3736799",
    "end": "3743339"
  },
  {
    "text": "well given the text of a program",
    "start": "3743339",
    "end": "3748799"
  },
  {
    "text": "how do we run that program and and that is sort of the recipe for building a computer the recipe for the Baker and",
    "start": "3748799",
    "end": "3756000"
  },
  {
    "text": "the chef yeah what are the algorithmically tricky things that",
    "start": "3756000",
    "end": "3762000"
  },
  {
    "text": "happen to be low-hanging fruit that could be improved on maybe throughout the history of python but also now how",
    "start": "3762000",
    "end": "3769260"
  },
  {
    "text": "is it possible that 3.11 in year 2022 it's possible to get such a big performance Improvement",
    "start": "3769260",
    "end": "3776819"
  },
  {
    "text": "we focused on a few areas where we we still felt",
    "start": "3776819",
    "end": "3785220"
  },
  {
    "text": "there was low hanging fruit the biggest one is actually The Interpreter itself",
    "start": "3785220",
    "end": "3791520"
  },
  {
    "text": "and this has to do with details of Pi how python is defined so I didn't know",
    "start": "3791520",
    "end": "3797700"
  },
  {
    "text": "if the fisherman is going to follow this story he already he already jumped off the boat his uh he's he's this yeah",
    "start": "3797700",
    "end": "3806160"
  },
  {
    "text": "stupid python is actually even though it's always called an interpreted language it's there's also a compiler in",
    "start": "3806160",
    "end": "3813780"
  },
  {
    "text": "there it just doesn't compile to machine code it compiles to bytecode which is",
    "start": "3813780",
    "end": "3820020"
  },
  {
    "text": "sort of code for an imaginary computer that is called the python interpreter so",
    "start": "3820020",
    "end": "3825900"
  },
  {
    "text": "it's compiling code that is more easily digestible by The Interpreter or is digestible at all it is the code that is",
    "start": "3825900",
    "end": "3832740"
  },
  {
    "text": "digested by The Interpreter that's the compiler we tweaked very minor bits of the compiler almost all the work was",
    "start": "3832740",
    "end": "3839579"
  },
  {
    "text": "done in The Interpreter because when you have a program you compile it",
    "start": "3839579",
    "end": "3846540"
  },
  {
    "text": "once and then you run the code a whole bunch of times or maybe there's one function in the in",
    "start": "3846540",
    "end": "3852900"
  },
  {
    "text": "the code that gets run many times now I know that that sort of people who",
    "start": "3852900",
    "end": "3859980"
  },
  {
    "text": "who know this field are expecting me to at some point say we built adjusting",
    "start": "3859980",
    "end": "3865619"
  },
  {
    "text": "time compiler actually we didn't we just made The Interpreter uh a little more",
    "start": "3865619",
    "end": "3870960"
  },
  {
    "text": "efficient what's adjust in time compiler that is a thing from the Java World",
    "start": "3870960",
    "end": "3877200"
  },
  {
    "text": "although it's now applied to almost all uh programming languages especially",
    "start": "3877200",
    "end": "3883020"
  },
  {
    "text": "interpreted ones so you see the compile inside python not like a just-in-time",
    "start": "3883020",
    "end": "3888200"
  },
  {
    "text": "compiler but is it compiler that creates by code that is then fed to The Interpreter and the compiler",
    "start": "3888200",
    "end": "3896579"
  },
  {
    "text": "was there something interesting to say about the compiler it's interesting that you haven't changed that tweak that at all or much we changed some parts of the",
    "start": "3896579",
    "end": "3904680"
  },
  {
    "text": "byte code but not very much and so we only had to",
    "start": "3904680",
    "end": "3909839"
  },
  {
    "text": "change the parts of the compiler where we decided that the the breakdown of a Python program in bytecode instructions",
    "start": "3909839",
    "end": "3916680"
  },
  {
    "text": "had to be slightly different but",
    "start": "3916680",
    "end": "3921780"
  },
  {
    "text": "that did that didn't gain us the performance uh improvements that",
    "start": "3921780",
    "end": "3928559"
  },
  {
    "text": "performance improvements were like making The Interpreter faster in part by",
    "start": "3928559",
    "end": "3934859"
  },
  {
    "text": "sort of removing the fat from some internal data",
    "start": "3934859",
    "end": "3940140"
  },
  {
    "text": "structures used by The Interpreter but uh the the key idea is an Adaptive",
    "start": "3940140",
    "end": "3947180"
  },
  {
    "text": "specializing interpreter let's go what is adaptive about it what",
    "start": "3947180",
    "end": "3952559"
  },
  {
    "text": "is specialized about it well let me first talk about the specializing part because the Adaptive part is the sort of",
    "start": "3952559",
    "end": "3960240"
  },
  {
    "text": "the second order effect but they're both important so bytecode",
    "start": "3960240",
    "end": "3965280"
  },
  {
    "text": "is a bunch of machine instructions but it's an imaginary machine but the",
    "start": "3965280",
    "end": "3971280"
  },
  {
    "text": "machine can do things like call a function add two numbers",
    "start": "3971280",
    "end": "3976859"
  },
  {
    "text": "print value those are sort of typical instructions in Python",
    "start": "3976859",
    "end": "3982460"
  },
  {
    "text": "uh and if we take the example of adding two numbers",
    "start": "3982460",
    "end": "3988740"
  },
  {
    "text": "actually in Python the language there's no such thing as adding two numbers",
    "start": "3988740",
    "end": "3993900"
  },
  {
    "text": "there's just an the the compiler doesn't know that you're adding two",
    "start": "3993900",
    "end": "3999539"
  },
  {
    "text": "numbers you might as well be adding two strings or two lists uh or two instances of some user-defined",
    "start": "3999539",
    "end": "4007700"
  },
  {
    "text": "class that happen to implement this operator called add that's a very interesting and and fairly",
    "start": "4007700",
    "end": "4015380"
  },
  {
    "text": "powerful mathematical concept it's mostly a user interface trick because it",
    "start": "4015380",
    "end": "4020539"
  },
  {
    "text": "means that a certain category of functions can be written using a symbols single",
    "start": "4020539",
    "end": "4028460"
  },
  {
    "text": "symbol the plus sign and sort of a bunch of other functions can be written using another single",
    "start": "4028460",
    "end": "4034760"
  },
  {
    "text": "symbol the multiply sign uh so if we take addition the way",
    "start": "4034760",
    "end": "4041319"
  },
  {
    "text": "traditionally in Python the ad byte code was executed is",
    "start": "4041319",
    "end": "4048039"
  },
  {
    "text": "pointers pointers and more pointers so first we we have two objects an object",
    "start": "4048440",
    "end": "4055220"
  },
  {
    "text": "is basically a pointer to a bunch of memory that contains more pointers pointers all the way down",
    "start": "4055220",
    "end": "4061520"
  },
  {
    "text": "not quite but there there are a lot of them so to simplify a bit uh we look up",
    "start": "4061520",
    "end": "4067940"
  },
  {
    "text": "in one of the objects what is the type of that object and does",
    "start": "4067940",
    "end": "4074119"
  },
  {
    "text": "that object type Define an add operation and so you can imagine that there is a",
    "start": "4074119",
    "end": "4082280"
  },
  {
    "text": "sort of a type integer that knows how to add itself to another integer and there",
    "start": "4082280",
    "end": "4088039"
  },
  {
    "text": "is a type floating Point number that knows how to add itself to another floating Point number",
    "start": "4088039",
    "end": "4094039"
  },
  {
    "text": "and the integers and floating Point numbers are sort of important I think",
    "start": "4094039",
    "end": "4100758"
  },
  {
    "text": "mostly historically because in the first computers uh you use the sort of the same bit",
    "start": "4100759",
    "end": "4108679"
  },
  {
    "text": "pattern when interpreted as a floating Point number had a very different value than we interpret it as an integer can I",
    "start": "4108679",
    "end": "4115460"
  },
  {
    "text": "ask a dumb question here please do given the basics of ant and float and add who",
    "start": "4115460",
    "end": "4120738"
  },
  {
    "text": "carries the knowledge of how to add two integers is it the integer it's the type",
    "start": "4120739",
    "end": "4126500"
  },
  {
    "text": "integer versus it's the type integer and the type float what about the operator is the operator",
    "start": "4126500",
    "end": "4133640"
  },
  {
    "text": "just exists as a platonic form possessed by uh the operator is more like",
    "start": "4133640",
    "end": "4144440"
  },
  {
    "text": "it's an index in a list of functions that the integer type defines",
    "start": "4144440",
    "end": "4151818"
  },
  {
    "text": "and so the integer type is really a collection of functions and",
    "start": "4151819",
    "end": "4158778"
  },
  {
    "text": "there is an add function and there's a multiply function and there are like 30 other functions for other operations",
    "start": "4158779",
    "end": "4165080"
  },
  {
    "text": "there's a power function for example and you can imagine that",
    "start": "4165080",
    "end": "4171500"
  },
  {
    "text": "in in memory there is a distinct slot for the add operations let's say the add",
    "start": "4171500",
    "end": "4178278"
  },
  {
    "text": "operation is the first operation of a type and the multiply is the second operation of a type",
    "start": "4178279",
    "end": "4184160"
  },
  {
    "text": "so now we take the integer type and we take the floating Point type",
    "start": "4184160",
    "end": "4189338"
  },
  {
    "text": "in both cases the add operation is the first slot and multiplies the second",
    "start": "4189339",
    "end": "4195500"
  },
  {
    "text": "slot but each slot contains a function and the",
    "start": "4195500",
    "end": "4200600"
  },
  {
    "text": "functions are different because the the add to integers function interprets the",
    "start": "4200600",
    "end": "4207800"
  },
  {
    "text": "bit patterns as integers that add to float function interprets the the same bit",
    "start": "4207800",
    "end": "4215239"
  },
  {
    "text": "pattern as as a floating Point number and then there is the string",
    "start": "4215239",
    "end": "4221179"
  },
  {
    "text": "data type which again interprets the the bit pattern as a",
    "start": "4221179",
    "end": "4228440"
  },
  {
    "text": "the address of a sequence of characters there are lots of lies in that story but",
    "start": "4228440",
    "end": "4233900"
  },
  {
    "text": "that's that's sort of a basic idea I can tell I could tell the fact the fake news and",
    "start": "4233900",
    "end": "4239960"
  },
  {
    "text": "the fabrication going on here at the table but uh where's the optimization is it on the operator is it a different so",
    "start": "4239960",
    "end": "4246980"
  },
  {
    "text": "inside the integer optimization is the observation that",
    "start": "4246980",
    "end": "4253219"
  },
  {
    "text": "in a particular line of code so now you you write your little Python",
    "start": "4253219",
    "end": "4260060"
  },
  {
    "text": "program and you write a function and that function sort of takes a bunch of",
    "start": "4260060",
    "end": "4265100"
  },
  {
    "text": "inputs and at some point it adds two of the inputs together",
    "start": "4265100",
    "end": "4270380"
  },
  {
    "text": "now I bet you even if you call your function a thousand times that all those calls are likely all",
    "start": "4270380",
    "end": "4278960"
  },
  {
    "text": "going to be about integers because maybe your program is all about integers or",
    "start": "4278960",
    "end": "4284780"
  },
  {
    "text": "maybe on that particular line of code where there's that plus operator",
    "start": "4284780",
    "end": "4291920"
  },
  {
    "text": "every time the program hits that line the variables A and B that b are being",
    "start": "4291920",
    "end": "4297739"
  },
  {
    "text": "added together happen to be strings and so what we do is instead of having",
    "start": "4297739",
    "end": "4304159"
  },
  {
    "text": "this single byte code that says here's an ad operation and the implementation",
    "start": "4304159",
    "end": "4309260"
  },
  {
    "text": "of add is fully generic it looks at the object from the object it looks at the type then it takes the type and it looks",
    "start": "4309260",
    "end": "4316760"
  },
  {
    "text": "at looks of the function pointer then it calls the function now the function has",
    "start": "4316760",
    "end": "4321860"
  },
  {
    "text": "to be has to look at the other argument and it has to double check that the other argument has the right type",
    "start": "4321860",
    "end": "4327739"
  },
  {
    "text": "and then there's a bunch of error checking before it can actually just go ahead and add the two bit",
    "start": "4327739",
    "end": "4334820"
  },
  {
    "text": "patterns in the right way what we do is every time we execute an ad instruction",
    "start": "4334820",
    "end": "4342860"
  },
  {
    "text": "like that we we keep a little note of",
    "start": "4342860",
    "end": "4349760"
  },
  {
    "text": "in the end after we hit the code that that did the addition",
    "start": "4349760",
    "end": "4355699"
  },
  {
    "text": "for a particular type what type was it and then after a few times through that",
    "start": "4355699",
    "end": "4363980"
  },
  {
    "text": "code if it's this if it's the same type all the time",
    "start": "4363980",
    "end": "4369140"
  },
  {
    "text": "uh we say oh so this add operation even",
    "start": "4369140",
    "end": "4374780"
  },
  {
    "text": "though it's the generic ad operation it might as well be the add integer",
    "start": "4374780",
    "end": "4379820"
  },
  {
    "text": "operation and add integer operation is uh much more efficient because it just",
    "start": "4379820",
    "end": "4386060"
  },
  {
    "text": "says assume that A and B are integers do the addition operation do it right there",
    "start": "4386060",
    "end": "4392780"
  },
  {
    "text": "inline and produce the result and the big lie here is that in Python",
    "start": "4392780",
    "end": "4401360"
  },
  {
    "text": "even if you have great evidence that in the past it was always too integers that",
    "start": "4401360",
    "end": "4407060"
  },
  {
    "text": "you were adding at some point in the future that same line of code could still be hit with two floating points or",
    "start": "4407060",
    "end": "4413239"
  },
  {
    "text": "two strings or maybe a string and an integer it's not a great lie that's just the fact of life",
    "start": "4413239",
    "end": "4419179"
  },
  {
    "text": "I didn't account for what what should happen in that case in in the way I told",
    "start": "4419179",
    "end": "4425420"
  },
  {
    "text": "the story there is some accounting and and so what we actually have to do is",
    "start": "4425420",
    "end": "4431900"
  },
  {
    "text": "when we have the add integer operation we still have to check",
    "start": "4431900",
    "end": "4438020"
  },
  {
    "text": "are the two arguments in fact integers we applied some tricks to make those",
    "start": "4438020",
    "end": "4444620"
  },
  {
    "text": "checks efficient and we know statistically that the outcome is almost always yes they were",
    "start": "4444620",
    "end": "4452480"
  },
  {
    "text": "they are both integers uh and so we quickly make that check and",
    "start": "4452480",
    "end": "4457820"
  },
  {
    "text": "then we proceed with the the sort of add integer operation and then there is a fallback mechanism where we say",
    "start": "4457820",
    "end": "4465020"
  },
  {
    "text": "oops one of them wasn't an integer now we're going to pretend that there was just the fully generic ad operation",
    "start": "4465020",
    "end": "4472040"
  },
  {
    "text": "we wasted a few Cycles believing it was what was going to be two integers and",
    "start": "4472040",
    "end": "4479239"
  },
  {
    "text": "then we had to back up but we didn't waste that much time and statistically uh most of the time",
    "start": "4479239",
    "end": "4486980"
  },
  {
    "text": "basically we were sort of hoping that most of the time we guess right because if we if it turns out that",
    "start": "4486980",
    "end": "4494719"
  },
  {
    "text": "we guessed wrong too often uh or we didn't have a good guess at all",
    "start": "4494719",
    "end": "4500199"
  },
  {
    "text": "uh things might actually end up running a little slower so someone with armed with this",
    "start": "4500199",
    "end": "4507500"
  },
  {
    "text": "knowledge and a copy of the implementation someone could easily construct a counter example",
    "start": "4507500",
    "end": "4513800"
  },
  {
    "text": "where they say oh I have a program and then now it runs five times as slow in Python 311 than it did in Python 310.",
    "start": "4513800",
    "end": "4522140"
  },
  {
    "text": "but that's a very unrealistic program that's that's just like an extreme fluke",
    "start": "4522140",
    "end": "4529040"
  },
  {
    "text": "it's a fun reverse engineering task though oh yeah so there's uh",
    "start": "4529040",
    "end": "4534400"
  },
  {
    "text": "well people like fun yes so there's some",
    "start": "4534400",
    "end": "4539540"
  },
  {
    "text": "presumably heuristic of what defines a momentum of uh saying you know you seem to be",
    "start": "4539540",
    "end": "4547280"
  },
  {
    "text": "working adding two integers not two generic types uh so how do you figure",
    "start": "4547280",
    "end": "4552620"
  },
  {
    "text": "out that heuristic I think that the heuristic is actually we assume that the",
    "start": "4552620",
    "end": "4558560"
  },
  {
    "text": "weather tomorrow is going to be the same as the weather today so you don't need two days of the weather no",
    "start": "4558560",
    "end": "4564800"
  },
  {
    "text": "that is already so much better than than guessing randomly that so how do you",
    "start": "4564800",
    "end": "4571400"
  },
  {
    "text": "find this idea hey I wonder if instead of adding to",
    "start": "4571400",
    "end": "4576800"
  },
  {
    "text": "generic types we uh we start assuming that the weather tomorrow is the same as",
    "start": "4576800",
    "end": "4582980"
  },
  {
    "text": "the weather today where do you find the idea for that because that ultimately",
    "start": "4582980",
    "end": "4589280"
  },
  {
    "text": "for you to do that you have to kind of understand how people are using the language right python is not the first",
    "start": "4589280",
    "end": "4596000"
  },
  {
    "text": "language to do a thing like this this is a fairly well-known trick especially from",
    "start": "4596000",
    "end": "4602120"
  },
  {
    "text": "other interpreted languages that had reason to be sped up we occasionally",
    "start": "4602120",
    "end": "4608000"
  },
  {
    "text": "look at papers about hhvm which is for Facebook's uh",
    "start": "4608000",
    "end": "4614000"
  },
  {
    "text": "efficient compiler for uh PHP there are tricks known from the jvm and",
    "start": "4614000",
    "end": "4621440"
  },
  {
    "text": "sometimes it just comes from Academia and so the trick here is that the type itself doesn't the variable doesn't know",
    "start": "4621440",
    "end": "4628100"
  },
  {
    "text": "what type it is so this is not a statically typed language where you can",
    "start": "4628100",
    "end": "4635020"
  },
  {
    "text": "this is a trick that is especially important for uh for interpreted",
    "start": "4637420",
    "end": "4642980"
  },
  {
    "text": "languages with Dynamic typing because if if the compiler could read in the source",
    "start": "4642980",
    "end": "4651020"
  },
  {
    "text": "these X and Y that we're adding our integers the compiler can just insert",
    "start": "4651020",
    "end": "4656120"
  },
  {
    "text": "the single add machine code that Hardware machine instruction that exists",
    "start": "4656120",
    "end": "4662540"
  },
  {
    "text": "on every CPU and ditto for floats uh but because in Python you don't",
    "start": "4662540",
    "end": "4670300"
  },
  {
    "text": "generally declare your the types of your variables you you don't even declare the",
    "start": "4670300",
    "end": "4675920"
  },
  {
    "text": "existence of your variables they just spring into existence when you first assign them which",
    "start": "4675920",
    "end": "4682100"
  },
  {
    "text": "is really cool and and sort of helps those beginners because there's less bookkeeping they have to learn how to do",
    "start": "4682100",
    "end": "4689000"
  },
  {
    "text": "before they can start playing around with code but it makes the the in",
    "start": "4689000",
    "end": "4694400"
  },
  {
    "text": "interpretation of the code less efficient and so we're we're sort of",
    "start": "4694400",
    "end": "4700340"
  },
  {
    "text": "trying to to make the interpretation more efficient without losing the the super",
    "start": "4700340",
    "end": "4708140"
  },
  {
    "text": "Dynamic nature of the language that's always the challenge 3.5 got the pep 484",
    "start": "4708140",
    "end": "4714920"
  },
  {
    "start": "4711000",
    "end": "5029000"
  },
  {
    "text": "type hints what is Type hinting and is it used by",
    "start": "4714920",
    "end": "4721340"
  },
  {
    "text": "The Interpreter the hints or is it just syntactic sugar so the type hints is an",
    "start": "4721340",
    "end": "4726860"
  },
  {
    "text": "optional mechanism that people can use and it's especially popular with sort of",
    "start": "4726860",
    "end": "4733780"
  },
  {
    "text": "larger companies that have very large code bases written in Python do you",
    "start": "4733780",
    "end": "4739159"
  },
  {
    "text": "think of it as almost like documentation saying these two variables are this type more than documentation I mean so it",
    "start": "4739159",
    "end": "4747340"
  },
  {
    "text": "it is a sub language of python where where you can express the types of",
    "start": "4747560",
    "end": "4753020"
  },
  {
    "text": "variables so here's a variable and it's an integer and here's an argument to this function and it's a string and here",
    "start": "4753020",
    "end": "4759679"
  },
  {
    "text": "is a function that returns a list of strings but that's not checked when you run the code but",
    "start": "4759679",
    "end": "4765340"
  },
  {
    "text": "exactly there there is a separate piece of software called a static type Checker",
    "start": "4765340",
    "end": "4770780"
  },
  {
    "text": "that reads all your source code without executing it and things long and hard",
    "start": "4770780",
    "end": "4776600"
  },
  {
    "text": "about what it looks from just reading the code that code might be doing",
    "start": "4776600",
    "end": "4783860"
  },
  {
    "text": "and double checks if that makes sense if you take the types as annotated into",
    "start": "4783860",
    "end": "4790940"
  },
  {
    "text": "account so this is something you're supposed to run as you develop it's like a linter yeah that's definitely a",
    "start": "4790940",
    "end": "4797600"
  },
  {
    "text": "development tool but the type annotations currently are not used for",
    "start": "4797600",
    "end": "4803020"
  },
  {
    "text": "uh speeding up The Interpreter and there are a number of reasons uh many people",
    "start": "4803020",
    "end": "4810020"
  },
  {
    "text": "don't use them even when they do use them uh they",
    "start": "4810020",
    "end": "4815719"
  },
  {
    "text": "sometimes contain lies where the static type Checker says everything's fine",
    "start": "4815719",
    "end": "4822560"
  },
  {
    "text": "I cannot prove that this integer is ever not an integer but at runtime somehow",
    "start": "4822560",
    "end": "4828199"
  },
  {
    "text": "someone manages to violate that assumption and The Interpreter",
    "start": "4828199",
    "end": "4835159"
  },
  {
    "text": "ends up doing just fine if we started enforcing type annotations in Python",
    "start": "4835159",
    "end": "4841340"
  },
  {
    "text": "many python programs would no longer work and some python programs wouldn't even",
    "start": "4841340",
    "end": "4847340"
  },
  {
    "text": "be possible because they're too dynamic and so we made we made a choice of not",
    "start": "4847340",
    "end": "4852699"
  },
  {
    "text": "using the annotations there there is a possible future where eventually",
    "start": "4852699",
    "end": "4858860"
  },
  {
    "text": "three four five releases in the future we could start using those annotations",
    "start": "4858860",
    "end": "4865460"
  },
  {
    "text": "to sort of provide hints because we can we can",
    "start": "4865460",
    "end": "4870860"
  },
  {
    "text": "still say well the source code leads us to believe that these X and Y are both",
    "start": "4870860",
    "end": "4877760"
  },
  {
    "text": "integers and so we can generate an add an add integer instruction",
    "start": "4877760",
    "end": "4883159"
  },
  {
    "text": "but we can still have a fallback that says oh if the if somehow the code code",
    "start": "4883159",
    "end": "4890060"
  },
  {
    "text": "at runtime provided something else maybe it provided two decimal numbers",
    "start": "4890060",
    "end": "4895880"
  },
  {
    "text": "we can still use that generic ad operation as a fallback but we're not",
    "start": "4895880",
    "end": "4901280"
  },
  {
    "text": "there is there currently a mechanism or do you see something like that where you",
    "start": "4901280",
    "end": "4906860"
  },
  {
    "text": "can almost add like an assert inside a function that says please check",
    "start": "4906860",
    "end": "4912800"
  },
  {
    "text": "that my type hints are actually mapping to reality sort of like insert manual",
    "start": "4912800",
    "end": "4919520"
  },
  {
    "text": "static typing there are third-party libraries that uh are in that business",
    "start": "4919520",
    "end": "4925100"
  },
  {
    "text": "so it's possible to do that kind of thing it's possible to for a third party library to take a hint",
    "start": "4925100",
    "end": "4931159"
  },
  {
    "text": "and enforce it it seems like a tricky thing what what well what we actually do is and this I think this is a fairly",
    "start": "4931159",
    "end": "4938060"
  },
  {
    "text": "unique feature in Python the type hints can be introspected at runtime so while",
    "start": "4938060",
    "end": "4945679"
  },
  {
    "text": "the program is running they mean python is a very introspectable language you can look at",
    "start": "4945679",
    "end": "4953179"
  },
  {
    "text": "a variable and ask yourself what did what is the type of this this variable and if that baby that variable happens",
    "start": "4953179",
    "end": "4959960"
  },
  {
    "text": "to refer to a function you can ask what are the arguments to the function",
    "start": "4959960",
    "end": "4965679"
  },
  {
    "text": "and nowadays you can also ask what are the type annotations for the function so",
    "start": "4965679",
    "end": "4971179"
  },
  {
    "text": "the type annotations are there inside the variable as it's at runtime they're mostly associated with the function",
    "start": "4971179",
    "end": "4978140"
  },
  {
    "text": "object not with each individual variable but uh right you can sort of map from",
    "start": "4978140",
    "end": "4983719"
  },
  {
    "text": "from the arguments to the variables and that's what a third-party Library can have exactly and the problem with that",
    "start": "4983719",
    "end": "4989960"
  },
  {
    "text": "is that all that extra runtime type checking uh is going to slow your code down",
    "start": "4989960",
    "end": "4996320"
  },
  {
    "text": "instead of speed it up I think uh to reference this uh sales pitchy blog post that says 75",
    "start": "4996320",
    "end": "5004719"
  },
  {
    "text": "of developers time to spend on debugging I would say that in some cases that might be okay it might be okay to pay",
    "start": "5004719",
    "end": "5010960"
  },
  {
    "text": "the cost of performance for the catching of the types the type errors",
    "start": "5010960",
    "end": "5016000"
  },
  {
    "text": "and in most cases doing it statically before you ship your code to",
    "start": "5016000",
    "end": "5023380"
  },
  {
    "text": "production is more efficient than doing it at runtime piecemeal yeah",
    "start": "5023380",
    "end": "5030040"
  },
  {
    "start": "5029000",
    "end": "5345000"
  },
  {
    "text": "can you tell me about m-y-p-y my pie project",
    "start": "5030040",
    "end": "5036000"
  },
  {
    "text": "what is it what's the mission and in general what is the future of static",
    "start": "5036000",
    "end": "5042100"
  },
  {
    "text": "typing in Python well so my pie uh was started by a",
    "start": "5042100",
    "end": "5047380"
  },
  {
    "text": "Finnish uh developer ukulele so many cool things out of Finland I",
    "start": "5047380",
    "end": "5053800"
  },
  {
    "text": "gotta say just that part of the world I guess people have nothing better to do in those long cold Winters yeah I don't",
    "start": "5053800",
    "end": "5061239"
  },
  {
    "text": "know I think Yuka lived in England when he invented uh that stuff actually but my pie is the original static type",
    "start": "5061239",
    "end": "5069760"
  },
  {
    "text": "checker for Python and the the type annotations that were introduced with",
    "start": "5069760",
    "end": "5075040"
  },
  {
    "text": "pep484 were sort of developed together with the the static type",
    "start": "5075040",
    "end": "5082540"
  },
  {
    "text": "Checker and in fact Yuka had first invented a different syntax that wasn't",
    "start": "5082540",
    "end": "5087940"
  },
  {
    "text": "quite compatible with python and uh yukai and I sort of met at the",
    "start": "5087940",
    "end": "5094480"
  },
  {
    "text": "python conference in I think in 2013 and we we sort of came up with a",
    "start": "5094480",
    "end": "5103239"
  },
  {
    "text": "compromise syntax that would not require any changes to",
    "start": "5103239",
    "end": "5108640"
  },
  {
    "text": "python and that would let my pie sort of be an add-on static type checker for python",
    "start": "5108640",
    "end": "5115840"
  },
  {
    "text": "just out of curiosity was it like double colon or something what was he proposing that would break python I think he was",
    "start": "5115840",
    "end": "5122199"
  },
  {
    "text": "using angular brackets for uh types like in C plus plus or uh Java generics yeah",
    "start": "5122199",
    "end": "5129219"
  },
  {
    "text": "you can't use angular brackets in Python it would be too tricky for attempt well we the the key thing is",
    "start": "5129219",
    "end": "5136719"
  },
  {
    "text": "that we already had uh you know a Syntax for annotations we just didn't know what",
    "start": "5136719",
    "end": "5143199"
  },
  {
    "text": "to use them for yet so type annotations were just the sort of most logical thing to to use that",
    "start": "5143199",
    "end": "5151360"
  },
  {
    "text": "existing dummy Syntax for so but there was no there was no Syntax",
    "start": "5151360",
    "end": "5157179"
  },
  {
    "text": "for uh defining generics directly syntactically in the language",
    "start": "5157179",
    "end": "5164320"
  },
  {
    "text": "my pie literally meant my version of python where my it refers to Yuka",
    "start": "5164320",
    "end": "5170860"
  },
  {
    "text": "he had a parser that translated my pie into python by like doing the type",
    "start": "5170860",
    "end": "5179080"
  },
  {
    "text": "checks and then removing the annotations and",
    "start": "5179080",
    "end": "5184600"
  },
  {
    "text": "all the angular brackets from the positions where where he was using them",
    "start": "5184600",
    "end": "5190060"
  },
  {
    "text": "but a preprocessor model doesn't work very well with the typical workflow of",
    "start": "5190060",
    "end": "5195340"
  },
  {
    "text": "uh python development projects that's funny I mean that could have been another major split if it became",
    "start": "5195340",
    "end": "5201940"
  },
  {
    "text": "successful like uh if you watch typescript versus JavaScript",
    "start": "5201940",
    "end": "5207639"
  },
  {
    "text": "is it like a split in the community over types right that seems to be stabilizing",
    "start": "5207639",
    "end": "5212800"
  },
  {
    "text": "now it's not necessarily a split there are certainly plenty of people who don't",
    "start": "5212800",
    "end": "5218440"
  },
  {
    "text": "use typescript but just use the original JavaScript",
    "start": "5218440",
    "end": "5223500"
  },
  {
    "text": "notation just like there are many people in the python world who don't use type annotations and don't use static type",
    "start": "5223500",
    "end": "5230260"
  },
  {
    "text": "Checkers now I know but there is a bit of a split between typescript and JavaScript old school JavaScript AES",
    "start": "5230260",
    "end": "5236440"
  },
  {
    "text": "whatever well in the JavaScript world transpilers are sort of the standard way",
    "start": "5236440",
    "end": "5242440"
  },
  {
    "text": "of working anyway which is why typescript being a transpiler itself is",
    "start": "5242440",
    "end": "5247540"
  },
  {
    "text": "not a big deal and transplants for people who don't know it's what's exactly the thing you said with my pies it's the code I guess",
    "start": "5247540",
    "end": "5255040"
  },
  {
    "text": "you call it pre-processing code that translates from one language to the other and that's part of the culture part of the workflow of the JavaScript",
    "start": "5255040",
    "end": "5262780"
  },
  {
    "text": "community so that's right at the same time an interesting development in the",
    "start": "5262780",
    "end": "5268600"
  },
  {
    "text": "JavaScript slash typescript world at the moment is that there is a proposal under consideration",
    "start": "5268600",
    "end": "5275560"
  },
  {
    "text": "it's only a stage one proposal that proposes to add a feature to",
    "start": "5275560",
    "end": "5280600"
  },
  {
    "text": "JavaScript where just like python it will ignore certain syntax",
    "start": "5280600",
    "end": "5287920"
  },
  {
    "text": "when running the JavaScript code and what it ignores is more or less a",
    "start": "5287920",
    "end": "5295780"
  },
  {
    "text": "superset of The typescript annotation syntax interesting so that would mean that",
    "start": "5295780",
    "end": "5303699"
  },
  {
    "text": "eventually if you wanted to you could take typescript uh and you could shove it directly into",
    "start": "5303699",
    "end": "5311739"
  },
  {
    "text": "a JavaScript interpreter without transplation the interesting thing in the JavaScript",
    "start": "5311739",
    "end": "5318100"
  },
  {
    "text": "world at least the web browser world the web browsers have changed how they deploy and uh they they sort of update",
    "start": "5318100",
    "end": "5326860"
  },
  {
    "text": "their JavaScript engines much more quickly than they used to in",
    "start": "5326860",
    "end": "5332020"
  },
  {
    "text": "the the early days and so there's much less of a need for translation in JavaScript itself because",
    "start": "5332020",
    "end": "5340179"
  },
  {
    "text": "most browsers just support the most recent version of ecmascript just on a",
    "start": "5340179",
    "end": "5346360"
  },
  {
    "start": "5345000",
    "end": "6305000"
  },
  {
    "text": "tangent of a tangent do you see if you will recommend somebody use a thing would you recommend typescript or",
    "start": "5346360",
    "end": "5352840"
  },
  {
    "text": "JavaScript I would recommend a typescript just because of the strictness of the typing",
    "start": "5352840",
    "end": "5359040"
  },
  {
    "text": "it's an enormously helpful extra tool that helps you sort of",
    "start": "5359040",
    "end": "5366840"
  },
  {
    "text": "keep your head straight about what your code is actually doing",
    "start": "5366940",
    "end": "5371980"
  },
  {
    "text": "I mean it's it's it it helps with editing your code it helps with ensuring",
    "start": "5371980",
    "end": "5378520"
  },
  {
    "text": "that your code is not too incorrect and it's actually",
    "start": "5378520",
    "end": "5385060"
  },
  {
    "text": "quite compatible with JavaScript never mind this syntactic sort of hack that is",
    "start": "5385060",
    "end": "5391060"
  },
  {
    "text": "still years in the future but any library that is written in pure JavaScript can still be used from",
    "start": "5391060",
    "end": "5398139"
  },
  {
    "text": "typescript programs and also the other way around you can write a library in",
    "start": "5398139",
    "end": "5403840"
  },
  {
    "text": "typescript and then export it in a form that is totally consumable by JavaScript",
    "start": "5403840",
    "end": "5409980"
  },
  {
    "text": "that sort of compatibility is is sort of the key to this to the success of",
    "start": "5409980",
    "end": "5416080"
  },
  {
    "text": "typescript yeah just to look at it as almost like a biological system that's evolving it's",
    "start": "5416080",
    "end": "5421960"
  },
  {
    "text": "fascinating to see JavaScript evolve the way it does well maybe we should consider that biological systems are",
    "start": "5421960",
    "end": "5427780"
  },
  {
    "text": "just the Engineering Systems too right yes but very advanced with more history",
    "start": "5427780",
    "end": "5435159"
  },
  {
    "text": "but it's almost like the most visceral in the JavaScript world because there's",
    "start": "5435159",
    "end": "5441219"
  },
  {
    "text": "just so much code written in JavaScript that for its history was messy if you",
    "start": "5441219",
    "end": "5448719"
  },
  {
    "text": "talk about bugs per line of code I just feel like JavaScript eats the cake or whatever the",
    "start": "5448719",
    "end": "5454360"
  },
  {
    "text": "terminology is it beats python by a lot in terms of number of bugs meaning like way more bugs in JavaScript and then and",
    "start": "5454360",
    "end": "5462040"
  },
  {
    "text": "then the obviously the browsers the develop I mean just there's so much active development it feels a lot more",
    "start": "5462040",
    "end": "5468580"
  },
  {
    "text": "like Evolution where a bunch of stuff is born and dies and there's experimentation and debates versus",
    "start": "5468580",
    "end": "5475420"
  },
  {
    "text": "python is more um all that stuff is happening but there's just a longer history of stable",
    "start": "5475420",
    "end": "5482560"
  },
  {
    "text": "working giant software systems written in python versus JavaScript is just a",
    "start": "5482560",
    "end": "5488199"
  },
  {
    "text": "giant beautiful I would say mess of code it's very different culture and",
    "start": "5488199",
    "end": "5494440"
  },
  {
    "text": "to some extent differences in culture are random but to some extent they the",
    "start": "5494440",
    "end": "5499540"
  },
  {
    "text": "differences have to do with the environment yeah uh and the fact that",
    "start": "5499540",
    "end": "5505179"
  },
  {
    "text": "JavaScript is primarily the language for uh developing web",
    "start": "5505179",
    "end": "5512440"
  },
  {
    "text": "applications especially the client side and the fact that it's basically the",
    "start": "5512440",
    "end": "5518679"
  },
  {
    "text": "only language for developing web applications makes that Community sort of just have a",
    "start": "5518679",
    "end": "5525760"
  },
  {
    "text": "different nature than the community of other languages plus the graphical component",
    "start": "5525760",
    "end": "5533739"
  },
  {
    "text": "um and the fact that they're deploying it on all kinds of uh shapes of screens",
    "start": "5533739",
    "end": "5539080"
  },
  {
    "text": "and devices and all that kind of stuff it just creates a beautiful chaos anyway back to my fight",
    "start": "5539080",
    "end": "5544600"
  },
  {
    "text": "so what okay you you met you talked about a syntax that could work where does it currently stand",
    "start": "5544600",
    "end": "5551500"
  },
  {
    "text": "what's the future of static typing in Python it is still controversial but it is much",
    "start": "5551500",
    "end": "5558280"
  },
  {
    "text": "more accepted than when my pi and pep 484 were were young what's the connection between uh pep 484",
    "start": "5558280",
    "end": "5566020"
  },
  {
    "text": "type hints and my pie my pie was the original static type Checker so",
    "start": "5566020",
    "end": "5573520"
  },
  {
    "text": "it might buy quickly evolved from yuka's own variant of python to a static type",
    "start": "5573520",
    "end": "5581199"
  },
  {
    "text": "checker for Python and uh sort of Pep 484 that that was it like",
    "start": "5581199",
    "end": "5587620"
  },
  {
    "text": "a very productive year where like many hundreds of messages were exchanged",
    "start": "5587620",
    "end": "5593380"
  },
  {
    "text": "debating that merits of every aspect of of that pep",
    "start": "5593380",
    "end": "5599199"
  },
  {
    "text": "and so my pie is a static type checker for python it is itself written in",
    "start": "5599199",
    "end": "5605739"
  },
  {
    "text": "Python most additional static typing features that",
    "start": "5605739",
    "end": "5612280"
  },
  {
    "text": "we introduced in the time since three six uh we're also prototyped through my pie",
    "start": "5612280",
    "end": "5620820"
  },
  {
    "text": "my pie being an open source project with a very small number of maintainers",
    "start": "5620820",
    "end": "5627580"
  },
  {
    "text": "it was successful enough that people said the aesthetic type checking stuff",
    "start": "5627580",
    "end": "5632620"
  },
  {
    "text": "for python is actually worth an investment for our company nice but",
    "start": "5632620",
    "end": "5638980"
  },
  {
    "text": "somehow they chose not to support making my pie faster say or adding new",
    "start": "5638980",
    "end": "5648400"
  },
  {
    "text": "features to my Pi but both Google and Facebook and later Microsoft developed",
    "start": "5648400",
    "end": "5655300"
  },
  {
    "text": "their own static type Checker I think Facebook was one of the first they decided that they wanted to use the",
    "start": "5655300",
    "end": "5663699"
  },
  {
    "text": "same technology that they had successfully used for hhvm",
    "start": "5663699",
    "end": "5670480"
  },
  {
    "text": "because they they sort of they had a bunch of compiler writers and and sort",
    "start": "5670840",
    "end": "5676179"
  },
  {
    "text": "of static type checking experts who had written the hhvm compiler and it was a",
    "start": "5676179",
    "end": "5682900"
  },
  {
    "text": "big success within the company and they had done it in a certain way sort of",
    "start": "5682900",
    "end": "5688780"
  },
  {
    "text": "they wrote a big highly parallel application in an obscure language named",
    "start": "5688780",
    "end": "5695199"
  },
  {
    "text": "o camel which is apparently mostly very good for a writing static type checkers",
    "start": "5695199",
    "end": "5700960"
  },
  {
    "text": "interesting yeah I have a lot of questions about how to write a static type Checker then that's very confusing",
    "start": "5700960",
    "end": "5707860"
  },
  {
    "text": "Facebook wrote their version and they've worked on it in secret for about a year",
    "start": "5707860",
    "end": "5713560"
  },
  {
    "text": "and then they came clean and went open source uh Google in the meantime was developing",
    "start": "5713560",
    "end": "5720520"
  },
  {
    "text": "something called Pi type which was mostly interesting because it as you may have",
    "start": "5720520",
    "end": "5727840"
  },
  {
    "text": "heard they have one gigantic mono repo so all the code is checked into a single",
    "start": "5727840",
    "end": "5734500"
  },
  {
    "text": "repository Facebook has a different approach so Facebook developed pyre which which was written in O camel which",
    "start": "5734500",
    "end": "5742600"
  },
  {
    "text": "worked well with Facebook's development workflow and Google developed something they",
    "start": "5742600",
    "end": "5749620"
  },
  {
    "text": "called Pi type which was actually itself written in Python uh and it was meant to sort of fit well",
    "start": "5749620",
    "end": "5758199"
  },
  {
    "text": "in their static type checking needs in Google's gigantic mono repo so Google",
    "start": "5758199",
    "end": "5765880"
  },
  {
    "text": "wasn't one giant got it so the just to clarify this static type checker",
    "start": "5765880",
    "end": "5773080"
  },
  {
    "text": "philosophically is a thing that's supposed to exist outside of the language itself and it's just a workflow",
    "start": "5773080",
    "end": "5778600"
  },
  {
    "text": "like a debugger for the book it's a linter for people who don't know a linter maybe you can correct me but it",
    "start": "5778600",
    "end": "5785080"
  },
  {
    "text": "it's the thing that runs through the code continuously pre-processing to find issues based on",
    "start": "5785080",
    "end": "5792340"
  },
  {
    "text": "style documentation I mean there's all kinds of linters right you can check that what usual things does a linger do",
    "start": "5792340",
    "end": "5799840"
  },
  {
    "text": "maybe check that you haven't too many characters in a single line linters",
    "start": "5799840",
    "end": "5806380"
  },
  {
    "text": "often do static analysis where they try to point out things that are likely",
    "start": "5806380",
    "end": "5812080"
  },
  {
    "text": "mistakes but not incorrect according to the language specification like maybe",
    "start": "5812080",
    "end": "5818560"
  },
  {
    "text": "you have a variable that you never use for the compiler that is valid you might",
    "start": "5818560",
    "end": "5825100"
  },
  {
    "text": "sort of you might be planning to use it in future version of the of the code and",
    "start": "5825100",
    "end": "5830620"
  },
  {
    "text": "the compiler might just optimize it out but the compiler is not going to tell you hey you're never using this variable",
    "start": "5830620",
    "end": "5836320"
  },
  {
    "text": "a linter will tell you that variable is not used maybe there's a typo somewhere",
    "start": "5836320",
    "end": "5842860"
  },
  {
    "text": "else where you meant to use it but you accidentally use something else or there are a number of sort of common scenarios",
    "start": "5842860",
    "end": "5849820"
  },
  {
    "text": "and A linter is often a a big collection of little heuristics",
    "start": "5849820",
    "end": "5857159"
  },
  {
    "text": "where by looking at the combination of how your code is laid out maybe how it's",
    "start": "5857159",
    "end": "5862420"
  },
  {
    "text": "indented maybe the comment structure uh but also just",
    "start": "5862420",
    "end": "5868679"
  },
  {
    "text": "things like definition of names use of names it'll tell you likely things that are",
    "start": "5868679",
    "end": "5876219"
  },
  {
    "text": "wrong and in some cases linters are are really style checkers",
    "start": "5876219",
    "end": "5881320"
  },
  {
    "text": "uh for python there are a number of linters that check things like do you use the the pep 8",
    "start": "5881320",
    "end": "5889020"
  },
  {
    "text": "recommended naming scheme for your functions and classes and variables because like classes start with an",
    "start": "5889020",
    "end": "5896139"
  },
  {
    "text": "uppercase and the rest starts with a lowercase and there's like differences there and so",
    "start": "5896139",
    "end": "5901900"
  },
  {
    "text": "the linter can tell you hey you have a class that uh whose first letter is not",
    "start": "5901900",
    "end": "5907840"
  },
  {
    "text": "an uppercase letter and that's just I just find it annoying if I wanted that to be an uppercase letter I I would have",
    "start": "5907840",
    "end": "5914980"
  },
  {
    "text": "typed an uppercase letter but other people find it very comforting that if the linter is no longer complaining",
    "start": "5914980",
    "end": "5922239"
  },
  {
    "text": "about their code that they have followed all the style rules maybe it's a fast way for a new developer joining a team",
    "start": "5922239",
    "end": "5928840"
  },
  {
    "text": "to learn the style rules right yeah there's definitely that but the best use of linter is probably",
    "start": "5928840",
    "end": "5935380"
  },
  {
    "text": "not so much to to sort of enforce team uniformity but to actually",
    "start": "5935380",
    "end": "5942040"
  },
  {
    "text": "help Developers catch bugs that the compilers for",
    "start": "5942040",
    "end": "5947440"
  },
  {
    "text": "whatever reason don't catch and there's lots of that in Python and so uh but a",
    "start": "5947440",
    "end": "5953620"
  },
  {
    "text": "static type checker focuses on a particular aspect of the",
    "start": "5953620",
    "end": "5959440"
  },
  {
    "text": "linting which I mean it might probably doesn't care how you name your classes and variables",
    "start": "5959440",
    "end": "5965980"
  },
  {
    "text": "uh but it is meticulous about when you say that there was an integer here and",
    "start": "5965980",
    "end": "5973060"
  },
  {
    "text": "you're passing a string there it will tell you hey that string is not an integer so something's wrong either",
    "start": "5973060",
    "end": "5978820"
  },
  {
    "text": "either you were incorrect when you said it was an integer or you're incorrect",
    "start": "5978820",
    "end": "5984219"
  },
  {
    "text": "when you're passing into string if this is a race of static type Checkers is somebody winning as you said it's",
    "start": "5984219",
    "end": "5990639"
  },
  {
    "text": "interesting that the companies didn't choose to invest in this uh centralized",
    "start": "5990639",
    "end": "5995920"
  },
  {
    "text": "development of my pie is is there a future for my pie",
    "start": "5995920",
    "end": "6001739"
  },
  {
    "text": "what do you see as the oh well one of the companies went out and everybody uses like uh Pi type whatever Google's",
    "start": "6001739",
    "end": "6010260"
  },
  {
    "text": "is called well Microsoft is hoping that uh Microsoft's horse in that race called",
    "start": "6010260",
    "end": "6016199"
  },
  {
    "text": "pyrite is going to win by right right like r i g h t correct yeah my my all my",
    "start": "6016199",
    "end": "6024960"
  },
  {
    "text": "word processors tend to typo correct that as pyrite the name of the I don't",
    "start": "6024960",
    "end": "6031199"
  },
  {
    "text": "know what it is some kind of semi-precious metal all right",
    "start": "6031199",
    "end": "6037440"
  },
  {
    "text": "I love it okay so okay that's the Microsoft hope but it okay so let me ask",
    "start": "6037440",
    "end": "6043080"
  },
  {
    "text": "the question a different way is there going to be ever a future whereas the static type Checker gets integrated into",
    "start": "6043080",
    "end": "6049139"
  },
  {
    "text": "the language nobody is currently excited about",
    "start": "6049139",
    "end": "6057060"
  },
  {
    "text": "doing any work towards that that doesn't mean that five or ten years from now",
    "start": "6057060",
    "end": "6062639"
  },
  {
    "text": "the situation isn't different uh",
    "start": "6062639",
    "end": "6067980"
  },
  {
    "text": "at the moment all the static type checkers",
    "start": "6067980",
    "end": "6073400"
  },
  {
    "text": "uh still evolve at a much higher speed than Python and its annotation syntax",
    "start": "6073400",
    "end": "6081540"
  },
  {
    "text": "evolve you get a new release of python once a year those are the only times",
    "start": "6081540",
    "end": "6087780"
  },
  {
    "text": "that you can introduce new annotation syntax and there's there are always",
    "start": "6087780",
    "end": "6093300"
  },
  {
    "text": "people who invent new new annotation syntax that they're trying to push",
    "start": "6093300",
    "end": "6098580"
  },
  {
    "text": "uh and worse once we've all agreed that we are going",
    "start": "6098580",
    "end": "6104219"
  },
  {
    "text": "to put some new syntax in we can never take it back at least a sort of deprecating an",
    "start": "6104219",
    "end": "6111060"
  },
  {
    "text": "existing feature takes many releases because you have to assume that people started using it as soon as we announced",
    "start": "6111060",
    "end": "6117540"
  },
  {
    "text": "it and then you can't take it away from them right away you have to start",
    "start": "6117540",
    "end": "6122580"
  },
  {
    "text": "telling them well this will go away but we're not gonna commit tell you that",
    "start": "6122580",
    "end": "6128219"
  },
  {
    "text": "it's an error yet and then later it's going to be a warning and then eventually three releases in the future",
    "start": "6128219",
    "end": "6133739"
  },
  {
    "text": "maybe we remove it on the other hand the typical static",
    "start": "6133739",
    "end": "6138840"
  },
  {
    "text": "type checker still has a release like",
    "start": "6138840",
    "end": "6144678"
  },
  {
    "text": "every month every two months certainly many times a year",
    "start": "6144960",
    "end": "6150119"
  },
  {
    "text": "uh some type Checkers also include a bunch of",
    "start": "6150119",
    "end": "6155360"
  },
  {
    "text": "experimental ideas that aren't official standard python syntax yet yeah uh the",
    "start": "6155360",
    "end": "6162840"
  },
  {
    "text": "static type Checkers also just get better at discovering things that that sort of are unspecified",
    "start": "6162840",
    "end": "6170880"
  },
  {
    "text": "by the language but that sort of could make sense and so each static type Checker actually has its sort of strong",
    "start": "6170880",
    "end": "6178619"
  },
  {
    "text": "and weak points so it's cool it's like a laboratory of experiments yep Microsoft Google and all and you get to see and",
    "start": "6178619",
    "end": "6185340"
  },
  {
    "text": "you see that everywhere right because there's not one single uh JavaScript in",
    "start": "6185340",
    "end": "6190500"
  },
  {
    "text": "engine either there is one in Chrome there is one in Safari there's one in Firefox",
    "start": "6190500",
    "end": "6197040"
  },
  {
    "text": "but that said you said there's not interest I think there is a lot of interest in type hinting right",
    "start": "6197040",
    "end": "6203400"
  },
  {
    "text": "um in the pep 484. actually like how many people use that do you have a sense",
    "start": "6203400",
    "end": "6208800"
  },
  {
    "text": "how many people use because it's optional it's the sugar I can't put a",
    "start": "6208800",
    "end": "6214560"
  },
  {
    "text": "number on it but from the number of packages that do interesting things with it at runtime",
    "start": "6214560",
    "end": "6221520"
  },
  {
    "text": "and the fact that there are like now three or four very mature type",
    "start": "6221520",
    "end": "6227340"
  },
  {
    "text": "checkers that each have their their segment of the market and oh and then there is a",
    "start": "6227340",
    "end": "6233940"
  },
  {
    "text": "pie charm which has a sort of more heuristic based type Checker that also supports the same syntax",
    "start": "6233940",
    "end": "6240360"
  },
  {
    "text": "my assumption is that many many people developing python",
    "start": "6240360",
    "end": "6246360"
  },
  {
    "text": "software professionally for some kind of production situation are using a static",
    "start": "6246360",
    "end": "6253739"
  },
  {
    "text": "type checker especially any anybody who has a continuous integration cycle",
    "start": "6253739",
    "end": "6260219"
  },
  {
    "text": "probably has a one of the steps in in there their",
    "start": "6260219",
    "end": "6266159"
  },
  {
    "text": "testing routine that that happens for basically every every commit uh is run a static type checker and in",
    "start": "6266159",
    "end": "6274860"
  },
  {
    "text": "most in most cases that will be my pie so I think it's pretty popular topic",
    "start": "6274860",
    "end": "6282719"
  },
  {
    "text": "according to this webpage 20 to 30 percent of Python 3 code bases",
    "start": "6282719",
    "end": "6289080"
  },
  {
    "text": "are using type hints wow I wonder how they measured that did they just scan all of GitHub",
    "start": "6289080",
    "end": "6295440"
  },
  {
    "text": "yeah that's what it looks like yeah they did a quick sentence all of but like a",
    "start": "6295440",
    "end": "6300540"
  },
  {
    "text": "random sampling so you mentioned pie charm let me ask",
    "start": "6300540",
    "end": "6305580"
  },
  {
    "start": "6305000",
    "end": "6905000"
  },
  {
    "text": "you the uh the big subjective question what's the best IDE for Python and",
    "start": "6305580",
    "end": "6313619"
  },
  {
    "text": "you're extremely biased now that you're with Microsoft um is it pie charm vs code Vim or emex",
    "start": "6313619",
    "end": "6321260"
  },
  {
    "text": "historically I actually uh started out with using Vim but when it was still",
    "start": "6321260",
    "end": "6327540"
  },
  {
    "text": "called VI uh for a very long time I think from the",
    "start": "6327540",
    "end": "6333420"
  },
  {
    "text": "early 80s to uh I'd say two years ago",
    "start": "6333420",
    "end": "6339840"
  },
  {
    "text": "I was emacs user nice between I'd say 2013 and 2018",
    "start": "6339840",
    "end": "6348600"
  },
  {
    "text": "I dabbled with pie charm uh mostly because it had",
    "start": "6348600",
    "end": "6355380"
  },
  {
    "text": "had a couple of features I mean pie charm is like deriving an 18-wheeler truck",
    "start": "6355380",
    "end": "6363480"
  },
  {
    "text": "whereas emacs is more foreign driving uh your comfortable Toyota car",
    "start": "6363480",
    "end": "6372239"
  },
  {
    "text": "that's that's that that you've had for a hundred thousand miles and you know what every little rattle of the car means",
    "start": "6372239",
    "end": "6379139"
  },
  {
    "text": "I was very comfortable in emacs uh but there were certain things it couldn't do it wasn't very good at at sort of at",
    "start": "6379139",
    "end": "6386699"
  },
  {
    "text": "least the way I had configured it I didn't have very good Tooling in emacs",
    "start": "6386699",
    "end": "6393480"
  },
  {
    "text": "for finding a definition of a function got it when I was at Dropbox",
    "start": "6393480",
    "end": "6399560"
  },
  {
    "text": "exploring a 5 million line python code base uh just grabbing all that code for where",
    "start": "6399560",
    "end": "6408179"
  },
  {
    "text": "they're where is there a class Fubar Well turns out that if you grab all five million lines of code there are many",
    "start": "6408179",
    "end": "6415139"
  },
  {
    "text": "classes with the same name and so pycharm sort of once once you've",
    "start": "6415139",
    "end": "6421679"
  },
  {
    "text": "fired it up and once it's indexed your repository uh was very helpful but as",
    "start": "6421679",
    "end": "6428699"
  },
  {
    "text": "soon as I had to edit code I would jump back to emex and do all my editing there",
    "start": "6428699",
    "end": "6434040"
  },
  {
    "text": "because I could type much faster and switch between files when I was when I",
    "start": "6434040",
    "end": "6439440"
  },
  {
    "text": "knew which file I wanted much much quicker and I never really got used to the the whole pie charm user interface",
    "start": "6439440",
    "end": "6446300"
  },
  {
    "text": "yeah I feel torn in that same kind of way because I've used pycharm off and on",
    "start": "6446300",
    "end": "6451380"
  },
  {
    "text": "exactly in that same way and I feel like I'm just being an old grumpy man",
    "start": "6451380",
    "end": "6457619"
  },
  {
    "text": "for not learning how to quickly switch between files and all that kind of stuff I feel like that has to do with shortcuts that has to do with um I mean",
    "start": "6457619",
    "end": "6464520"
  },
  {
    "text": "you just have to get accustomed just like with touch typing yeah you have to just want to to learn that I mean if you",
    "start": "6464520",
    "end": "6469800"
  },
  {
    "text": "don't need it much you don't need touch typing either you can type with two fingers just fine in the short term but",
    "start": "6469800",
    "end": "6476460"
  },
  {
    "text": "in the long term your life will become better psychologically and productivity",
    "start": "6476460",
    "end": "6481560"
  },
  {
    "text": "wise if you learn how to type with 10 fingers if you do a lot of keyboard input before everyone emails and stuff",
    "start": "6481560",
    "end": "6488880"
  },
  {
    "text": "right like you look at the the next 20 30 years of your life you have to anticipate where technology is going",
    "start": "6488880",
    "end": "6496739"
  },
  {
    "text": "um do you want to invest in handwriting notes probably not more and more people are doing uh typing versus handwriting",
    "start": "6496739",
    "end": "6504300"
  },
  {
    "text": "notes so you can anticipate that so there's no reason to actually practice handwriting there's more reason to",
    "start": "6504300",
    "end": "6509760"
  },
  {
    "text": "practice typing you can actually estimate back to the spreadsheet the number of",
    "start": "6509760",
    "end": "6515540"
  },
  {
    "text": "paragraphs sentences or words you write for the rest of your life",
    "start": "6515540",
    "end": "6522139"
  },
  {
    "text": "yes I mean all of that is not actual like converting to a spreadsheet but",
    "start": "6525199",
    "end": "6530460"
  },
  {
    "text": "it's a gut feeling like I have the same kind of gut feeling about books I've almost exclusively switched to Kindle",
    "start": "6530460",
    "end": "6536880"
  },
  {
    "text": "now so ebook readers even though I still love and probably",
    "start": "6536880",
    "end": "6542100"
  },
  {
    "text": "always will the smell the feel of a physical book and",
    "start": "6542100",
    "end": "6547199"
  },
  {
    "text": "you the reason I switched to Kindle is like all right well this is really Paving the future is going to be digital",
    "start": "6547199",
    "end": "6555060"
  },
  {
    "text": "in terms of consuming books and content of that nature so you should get you know you should let your brain get",
    "start": "6555060",
    "end": "6561600"
  },
  {
    "text": "accustomed to that experience in that same way it feels like pie charm or vs code I think pycharm is is the the",
    "start": "6561600",
    "end": "6569820"
  },
  {
    "text": "most sort of sophisticated featureful uh python ID it feels like I should",
    "start": "6569820",
    "end": "6576659"
  },
  {
    "text": "probably at some point very soon switch entire like I'm not allowed to use anything else for python than this ID or",
    "start": "6576659",
    "end": "6584760"
  },
  {
    "text": "vs code it doesn't matter but walk away from emacs for this particular application because I think I'm limiting",
    "start": "6584760",
    "end": "6590340"
  },
  {
    "text": "myself in the same way that using two fingers for typing is limiting myself it's um this is a therapy session this",
    "start": "6590340",
    "end": "6597420"
  },
  {
    "text": "isn't I'm not even asking questions but I'm sure a lot of people are not going to stop you uh",
    "start": "6597420",
    "end": "6604560"
  },
  {
    "text": "I I think that that sort of everybody has to decide for themselves which one",
    "start": "6604560",
    "end": "6609780"
  },
  {
    "text": "they want to to invest more time in I actually",
    "start": "6609780",
    "end": "6615540"
  },
  {
    "text": "ended up giving vs code a very tentative try when I started out at Microsoft and",
    "start": "6615540",
    "end": "6622679"
  },
  {
    "text": "really liking it and it sort of it took me a while before",
    "start": "6622679",
    "end": "6628199"
  },
  {
    "text": "I realized why that was but and and I think that actually the",
    "start": "6628199",
    "end": "6633600"
  },
  {
    "text": "founders of vs code may not necessarily agree with me on this but to me vs code is in a sense the",
    "start": "6633600",
    "end": "6642780"
  },
  {
    "text": "spiritual successor of emacs because",
    "start": "6642780",
    "end": "6648420"
  },
  {
    "text": "as you probably know as an old emacs hack the the key part of emacs is that it",
    "start": "6648420",
    "end": "6655440"
  },
  {
    "text": "it's mostly written in in lisp and that that sort of new features of of",
    "start": "6655440",
    "end": "6662100"
  },
  {
    "text": "emacs usually update all the list packages and add new list packages and",
    "start": "6662100",
    "end": "6669239"
  },
  {
    "text": "oh yeah there's also some very obscure thing improved in the",
    "start": "6669239",
    "end": "6674460"
  },
  {
    "text": "part that's not in lisp but that's usually not why I would upgrade to a new version of emacs",
    "start": "6674460",
    "end": "6680820"
  },
  {
    "text": "there's a core implementation that that sort of",
    "start": "6680820",
    "end": "6686280"
  },
  {
    "text": "can read a file and it can put bits on the screen and it can sort of manage",
    "start": "6686280",
    "end": "6691920"
  },
  {
    "text": "memory and buffers and then what makes it an editor full of features is all the",
    "start": "6691920",
    "end": "6698520"
  },
  {
    "text": "list packages and of course the design of how the list packages interact with",
    "start": "6698520",
    "end": "6703980"
  },
  {
    "text": "each other and with that that sort of that base layer of of the the core",
    "start": "6703980",
    "end": "6710520"
  },
  {
    "text": "immutable engine without almost everything in that core engine in emacs case can still be overridden or replaced",
    "start": "6710520",
    "end": "6719219"
  },
  {
    "text": "and so vs code has a similar architecture where",
    "start": "6719219",
    "end": "6726239"
  },
  {
    "text": "there is like a base engine that you have no control",
    "start": "6726239",
    "end": "6732960"
  },
  {
    "text": "over I mean it's open source but nobody except the people who work on that part",
    "start": "6732960",
    "end": "6741480"
  },
  {
    "text": "changes it much uh and it has a sort of a package",
    "start": "6741480",
    "end": "6746880"
  },
  {
    "text": "manager and a whole series of interfaces for packages and an additional series of",
    "start": "6746880",
    "end": "6754639"
  },
  {
    "text": "conventions for how packages should interact with the lower layers and with each other",
    "start": "6754639",
    "end": "6760500"
  },
  {
    "text": "and Powerful primitive operations that let you",
    "start": "6760500",
    "end": "6765600"
  },
  {
    "text": "move the cursor around or select pieces of text or delete pieces of text or",
    "start": "6765600",
    "end": "6772500"
  },
  {
    "text": "interact with the keyboard and mouse and what other peripherals you have",
    "start": "6772500",
    "end": "6778020"
  },
  {
    "text": "and and so the sort of the the extreme extensibility and the package ecosystem",
    "start": "6778020",
    "end": "6785239"
  },
  {
    "text": "that you that you see in vs code is a is a mirror of very similar architectural",
    "start": "6785239",
    "end": "6792239"
  },
  {
    "text": "features in emacs well I'll have to give it a serious try because uh as far as",
    "start": "6792239",
    "end": "6798840"
  },
  {
    "text": "sort of the hype and the excitement in the general programming Community vs code seems to dominate the interesting",
    "start": "6798840",
    "end": "6805020"
  },
  {
    "text": "thing about pie charm and uh what is it PHP storm which are these",
    "start": "6805020",
    "end": "6811080"
  },
  {
    "text": "jet brains uh specific IDs that are designed for one programming language it's interesting to",
    "start": "6811080",
    "end": "6818639"
  },
  {
    "text": "when an ID is specialized right they're usually actually just specializations of",
    "start": "6818639",
    "end": "6825420"
  },
  {
    "text": "IntelliJ because underneath it's all the same editing Engine with different",
    "start": "6825420",
    "end": "6833159"
  },
  {
    "text": "veneer on top where in vs code",
    "start": "6833159",
    "end": "6838199"
  },
  {
    "text": "many things you do require loading third-party extensions",
    "start": "6838199",
    "end": "6845699"
  },
  {
    "text": "in pycharm it is possible to have third-party extensions but it is it is a",
    "start": "6845699",
    "end": "6852780"
  },
  {
    "text": "struggle to create one yes and it's not part of the culture all that kind of stuff yeah we that I remember that it",
    "start": "6852780",
    "end": "6860400"
  },
  {
    "text": "might have been five years ago or so we were trying to get some better my Pi",
    "start": "6860400",
    "end": "6865619"
  },
  {
    "text": "integration into pie charm because my pie is sort of python tooling and pycharm",
    "start": "6865619",
    "end": "6872340"
  },
  {
    "text": "had had its own type checking heuristic thing that we",
    "start": "6872340",
    "end": "6878760"
  },
  {
    "text": "wanted to replace with uh something based on my pie because that was what we were using in the company and it for the",
    "start": "6878760",
    "end": "6886320"
  },
  {
    "text": "for the guy who was writing that by charm extension it was really a",
    "start": "6886320",
    "end": "6892260"
  },
  {
    "text": "struggle to to sort of find documentation and get the development",
    "start": "6892260",
    "end": "6897900"
  },
  {
    "text": "workflow going and and debug his code and all that so that that was was not a",
    "start": "6897900",
    "end": "6904320"
  },
  {
    "text": "pleasant experience let me talk to you about parallelism in your post titled reasoning about",
    "start": "6904320",
    "end": "6911040"
  },
  {
    "start": "6905000",
    "end": "7978000"
  },
  {
    "text": "async IO semaphore you talk about a fast food restaurant Silicon Valley that has only one table",
    "start": "6911040",
    "end": "6917159"
  },
  {
    "text": "is this a real thing I just wanted to ask you about that is that just like a metaphor you're using or is that an",
    "start": "6917159",
    "end": "6922679"
  },
  {
    "text": "actual restaurant in Silicon Valley it was it was a metaphor of course okay I can imagine such a restaurant so for",
    "start": "6922679",
    "end": "6929940"
  },
  {
    "text": "people who don't then read the thing you should you should but it was uh",
    "start": "6929940",
    "end": "6935580"
  },
  {
    "text": "idea of a restaurant where there's only one table and you show up one at a time",
    "start": "6935580",
    "end": "6941280"
  },
  {
    "text": "and you're prepared and I actually looked it up and there is restaurants like this throughout the world and it",
    "start": "6941280",
    "end": "6948060"
  },
  {
    "text": "just seems like a fascinating idea you stand in line you show up there's one table",
    "start": "6948060",
    "end": "6953540"
  },
  {
    "text": "they um they ask you all kinds of questions they cook just for you that's fascinating it sounds like you'd find",
    "start": "6953540",
    "end": "6960360"
  },
  {
    "text": "places like that in Tokyo it sounds like a very Japanese thing or in the Bay Area there are proper places that probably",
    "start": "6960360",
    "end": "6967139"
  },
  {
    "text": "more or less work like that but I've never eaten at such a place the fascinating thing is you propose is the",
    "start": "6967139",
    "end": "6972360"
  },
  {
    "text": "fast food this is all for a burger it was one of my rare sort of more literary",
    "start": "6972360",
    "end": "6979080"
  },
  {
    "text": "or poetic moments where I thought I'll I'll just open with a crazy example to",
    "start": "6979080",
    "end": "6985860"
  },
  {
    "text": "catch your attention and the rest is very dry stuff about uh locks and",
    "start": "6985860",
    "end": "6990900"
  },
  {
    "text": "semaphores and how uh semaphore is a generalization of a lock well it was very poetic and well delivered and it",
    "start": "6990900",
    "end": "6997800"
  },
  {
    "text": "actually made me wonder if it's real or not because you don't make that explicit and it feels like it could be true and",
    "start": "6997800",
    "end": "7003920"
  },
  {
    "text": "in fact I wouldn't be surprised if somebody like listens to this and knows exactly a restaurant like this in Silicon Valley anyway can we step back",
    "start": "7003920",
    "end": "7011480"
  },
  {
    "text": "and can you just talk about parallelism concurrency threading",
    "start": "7011480",
    "end": "7016719"
  },
  {
    "text": "asynchronous all these different terms what is it sort of a high philosophical",
    "start": "7016719",
    "end": "7021800"
  },
  {
    "text": "level the the fisherman is back in the boat well the idea is if the fisherman",
    "start": "7021800",
    "end": "7026840"
  },
  {
    "text": "has uh two fishing rods uh since fishing is mostly a matter of",
    "start": "7026840",
    "end": "7032719"
  },
  {
    "text": "waiting for a fish to nibble well it depends on how you do it actually but if you had two if if you're doing the style",
    "start": "7032719",
    "end": "7039860"
  },
  {
    "text": "of fishing where you sort of you you throw it out and then you let it sit for",
    "start": "7039860",
    "end": "7045080"
  },
  {
    "text": "a while until maybe you see a nibble one fisherman can easily run two or three or",
    "start": "7045080",
    "end": "7050659"
  },
  {
    "text": "four fishing rods and so as long as you can afford the equipment you can catch four",
    "start": "7050659",
    "end": "7056719"
  },
  {
    "text": "times as many fish by a small investment in four fishing rods",
    "start": "7056719",
    "end": "7061760"
  },
  {
    "text": "and so since your time you sort of say you have all Saturday to go fishing if",
    "start": "7061760",
    "end": "7067820"
  },
  {
    "text": "you can catch four times as much fish you have a much higher productivity and",
    "start": "7067820",
    "end": "7073159"
  },
  {
    "text": "that's actually I think how deep sea fishing is done you could just have a rod and you put in a hole so you could have many rods uh what is there an",
    "start": "7073159",
    "end": "7081199"
  },
  {
    "text": "interesting difference between parallelism and concurrency and asynchronous is there one subset of",
    "start": "7081199",
    "end": "7088520"
  },
  {
    "text": "the other to you like how do you think about these terms in the computer World there is a big difference when people",
    "start": "7088520",
    "end": "7095480"
  },
  {
    "text": "are talking about parallelism uh like a parallel computer",
    "start": "7095480",
    "end": "7101659"
  },
  {
    "text": "that's usually really several complete CPUs that are sort of",
    "start": "7101659",
    "end": "7108500"
  },
  {
    "text": "tied together and and share something like memory or an i o",
    "start": "7108500",
    "end": "7114619"
  },
  {
    "text": "bus uh concurrency can be a much more",
    "start": "7114619",
    "end": "7119719"
  },
  {
    "text": "abstract concept where you have the illusion that things happen",
    "start": "7119719",
    "end": "7127480"
  },
  {
    "text": "simultaneously but what the computer actually does is it spends a little time running some",
    "start": "7127480",
    "end": "7134360"
  },
  {
    "text": "this program for a while and then it spends some time running that program for a while and then spending some time",
    "start": "7134360",
    "end": "7139940"
  },
  {
    "text": "for the third program for a while the parallelism is the reality and",
    "start": "7139940",
    "end": "7146000"
  },
  {
    "text": "concurrency is part reality part illusion yeah parallelism typically implies that there is multiple copies of",
    "start": "7146000",
    "end": "7154099"
  },
  {
    "text": "the hardware you write that implementing synchronization Primitives is hard in",
    "start": "7154099",
    "end": "7159860"
  },
  {
    "text": "that blog post and you talk about locks and semaphores why is it hard to implement synchronization Primitives",
    "start": "7159860",
    "end": "7166760"
  },
  {
    "text": "because at the conscious level our brains are not trained to to sort of",
    "start": "7166760",
    "end": "7174739"
  },
  {
    "text": "keep track of multiple things at the same time like obviously you can walk",
    "start": "7174739",
    "end": "7181159"
  },
  {
    "text": "and chew gum at the same time because they're both activities that",
    "start": "7181159",
    "end": "7186679"
  },
  {
    "text": "require only a little bit of your conscious activity but try balancing your",
    "start": "7186679",
    "end": "7192739"
  },
  {
    "text": "checkbook and watching a murder mystery on TV yeah you'll mix up the digits or you'll miss",
    "start": "7192739",
    "end": "7200719"
  },
  {
    "text": "an essential clue on in the TV show so why does it matter that the programmer the human",
    "start": "7200719",
    "end": "7207139"
  },
  {
    "text": "is uh is bad because the programmer is at least with the current state of the",
    "start": "7207139",
    "end": "7212480"
  },
  {
    "text": "art is responsible for writing the code correctly and it's hard",
    "start": "7212480",
    "end": "7218900"
  },
  {
    "text": "enough to keep track of a recipe that you just",
    "start": "7218900",
    "end": "7224599"
  },
  {
    "text": "execute one step at a time chop the carrots then peel the potatoes",
    "start": "7224599",
    "end": "7231739"
  },
  {
    "text": "mix the icing you need your whole brain when you're when you're reading a piece",
    "start": "7231739",
    "end": "7237860"
  },
  {
    "text": "of code what what is going on okay we're we're loading the number of mermaids in",
    "start": "7237860",
    "end": "7245780"
  },
  {
    "text": "variable a and the number of mermen in variable B and now we take the average",
    "start": "7245780",
    "end": "7251000"
  },
  {
    "text": "or whatever metaphor to Metaphor I like it you have",
    "start": "7251000",
    "end": "7257599"
  },
  {
    "text": "to keep in your head what is an a what is in B what is in C uh hopefully you",
    "start": "7257599",
    "end": "7263060"
  },
  {
    "text": "have better names and that is challenging enough if you have two different",
    "start": "7263060",
    "end": "7271099"
  },
  {
    "text": "pieces of code that are are sort of being executed",
    "start": "7271099",
    "end": "7277480"
  },
  {
    "text": "simultaneously weather is using the parallel or the concurrent approach",
    "start": "7277480",
    "end": "7283520"
  },
  {
    "text": "if like a is the number of fishermen and B is",
    "start": "7283520",
    "end": "7288980"
  },
  {
    "text": "the number of programmers but in another part of the code a is the number of mermaids and B is the number",
    "start": "7288980",
    "end": "7295159"
  },
  {
    "text": "of merman and somehow that's the same variable if",
    "start": "7295159",
    "end": "7300440"
  },
  {
    "text": "you do it sequentially if first you do your mermaid mer people computation and then you do your people in the boat",
    "start": "7300440",
    "end": "7307040"
  },
  {
    "text": "computation it doesn't matter that the variables are called A and B and that is",
    "start": "7307040",
    "end": "7312260"
  },
  {
    "text": "literally the same variable because you you're done with one use of that variable but when you mix them together",
    "start": "7312260",
    "end": "7318860"
  },
  {
    "text": "suddenly the number of more people replaces the number of fishermen and your computation",
    "start": "7318860",
    "end": "7325580"
  },
  {
    "text": "goes dramatically wrong and there's all kinds of ordering",
    "start": "7325580",
    "end": "7330800"
  },
  {
    "text": "of operations that could result in the assignment of those variables and so you have to anticipate all possible",
    "start": "7330800",
    "end": "7336320"
  },
  {
    "text": "orderings and you think you're smart and you'll put a lock around it and in",
    "start": "7336320",
    "end": "7342560"
  },
  {
    "text": "practice in terms of bugs per lineup per a thousand lines of code",
    "start": "7342560",
    "end": "7348020"
  },
  {
    "text": "this is an area where everything is worse so a lock is a mechanism by which",
    "start": "7348020",
    "end": "7354679"
  },
  {
    "text": "you forbid only one Chef can access the oven at a time",
    "start": "7354679",
    "end": "7361099"
  },
  {
    "text": "something like that and then semaphores allow you to do what multiple ovens that's not the bad idea because if",
    "start": "7361099",
    "end": "7368420"
  },
  {
    "text": "you're sort of if you're preparing if you're baking cakes and you have multiple people all",
    "start": "7368420",
    "end": "7374060"
  },
  {
    "text": "baking cakes but there's only one oven yeah then maybe you can tell that the oven is in use but maybe it's preheating",
    "start": "7374060",
    "end": "7380920"
  },
  {
    "text": "uh and so you have to maybe maybe you make a sign that says oven and use",
    "start": "7380920",
    "end": "7386540"
  },
  {
    "text": "uh and you flip the sign over and it says often is free when you're done baking your cake",
    "start": "7386540",
    "end": "7392719"
  },
  {
    "text": "uh that's a lock that's sort of and and what do you do when you have two ovens",
    "start": "7392719",
    "end": "7399080"
  },
  {
    "text": "or maybe you have ten ovens do you you can put a separate sign on each oven or",
    "start": "7399080",
    "end": "7404119"
  },
  {
    "text": "maybe you can sort of someone who comes in wants to see at a glance and maybe there's an electronic sign",
    "start": "7404119",
    "end": "7411020"
  },
  {
    "text": "that says uh there are still five ovens available uh or maybe they're already",
    "start": "7411020",
    "end": "7418460"
  },
  {
    "text": "three people waiting for an oven so you can if you see an oven that's not in use",
    "start": "7418460",
    "end": "7425659"
  },
  {
    "text": "it's already reserved for someone else who got in line first and that's sort of what what what the",
    "start": "7425659",
    "end": "7431119"
  },
  {
    "text": "restaurant metaphor was trying to explain yeah and so you're now tasks you're sitting as a designer of python",
    "start": "7431119",
    "end": "7438560"
  },
  {
    "text": "with a team of brilliant core developers and have to try to figure out to what degree can any of these ideas be",
    "start": "7438560",
    "end": "7445099"
  },
  {
    "text": "integrated and not so maybe this is a good time to ask what is async IO",
    "start": "7445099",
    "end": "7451040"
  },
  {
    "text": "and how has it evolved since Python 3.4 wow yeah so we had this really old",
    "start": "7451040",
    "end": "7459320"
  },
  {
    "text": "library for for doing things concurrently especially things that had",
    "start": "7459320",
    "end": "7466159"
  },
  {
    "text": "to do with IO and uh networking i o was especially uh sort of a popular topic",
    "start": "7466159",
    "end": "7474139"
  },
  {
    "text": "and in the python standard Library we had a",
    "start": "7474139",
    "end": "7480520"
  },
  {
    "text": "brief period where there was lots of development and I think it was late 90s",
    "start": "7480520",
    "end": "7487520"
  },
  {
    "text": "maybe early 2000s and like two little modules were added that were",
    "start": "7487520",
    "end": "7493940"
  },
  {
    "text": "the state of the Art of Doing asynchronous IO or sort of non-blocking AIO which means that you can keep",
    "start": "7493940",
    "end": "7500960"
  },
  {
    "text": "multiple network connections open and sort of service them all in parallel like a typical web server does so iOS",
    "start": "7500960",
    "end": "7508880"
  },
  {
    "text": "input and outputs you're writing either to the network network connection or",
    "start": "7508880",
    "end": "7514219"
  },
  {
    "text": "reading and writing to a hard drive the story also possible and you can do uh",
    "start": "7514219",
    "end": "7520159"
  },
  {
    "text": "the ideas you could do to multiple while also doing computation process of running some code that does",
    "start": "7520159",
    "end": "7526940"
  },
  {
    "text": "some fancy stuff yeah like when you're writing a web server when a request",
    "start": "7526940",
    "end": "7532159"
  },
  {
    "text": "comes in a user sort of needs to see a particular web page",
    "start": "7532159",
    "end": "7537440"
  },
  {
    "text": "uh you have to find that page maybe in the database and format it properly and",
    "start": "7537440",
    "end": "7542480"
  },
  {
    "text": "send it back to the client and there's a lot of waiting waiting for the database waiting for the network and so",
    "start": "7542480",
    "end": "7549320"
  },
  {
    "text": "you can handle hundreds or thousands or millions of requests concurrently on one machine anyway waste",
    "start": "7549320",
    "end": "7557540"
  },
  {
    "text": "of doing that in Python were kind of stagnated and uh I forget it might have been around",
    "start": "7557540",
    "end": "7564820"
  },
  {
    "text": "2012 2014 uh when someone for the umpteenth time",
    "start": "7564820",
    "end": "7571099"
  },
  {
    "text": "actually said these async chat and async core modules that you have in the",
    "start": "7571099",
    "end": "7577520"
  },
  {
    "text": "standard Library are not quite enough to solve my particular problem",
    "start": "7577520",
    "end": "7582679"
  },
  {
    "text": "can we add one tiny little feature and everybody said no that stuff is not too",
    "start": "7582679",
    "end": "7588980"
  },
  {
    "text": "but you're not supposed to use that stuff write your own using uh third-party library and then everybody",
    "start": "7588980",
    "end": "7594800"
  },
  {
    "text": "started a debate about what the rights third-party library was and somehow I I felt that",
    "start": "7594800",
    "end": "7603679"
  },
  {
    "text": "that was actually a cue for well maybe we need a better state of the art",
    "start": "7603679",
    "end": "7611060"
  },
  {
    "text": "module in the standard library for for multiplexing input output from different sources you could say that it spiraled",
    "start": "7611060",
    "end": "7619159"
  },
  {
    "text": "out of control a little bit it was at the time it was the largest python enhancement proposal that was ever",
    "start": "7619159",
    "end": "7625639"
  },
  {
    "text": "proposed and you were deeply involved with that at the time I was very much involved",
    "start": "7625639",
    "end": "7631460"
  },
  {
    "text": "with that I was like the lead architect uh I ended up",
    "start": "7631460",
    "end": "7637040"
  },
  {
    "text": "talking to people who had already developed Syria's third-party libraries",
    "start": "7637040",
    "end": "7643040"
  },
  {
    "text": "that did similar things and sort of taking ideas from them and",
    "start": "7643040",
    "end": "7648139"
  },
  {
    "text": "getting their feedback on my design and eventually we put it in the standard",
    "start": "7648139",
    "end": "7653780"
  },
  {
    "text": "library and after a few years I got distracted I think the thing the big thing that distracted me was actually",
    "start": "7653780",
    "end": "7659360"
  },
  {
    "text": "type annotations but other people kept it alive and",
    "start": "7659360",
    "end": "7664760"
  },
  {
    "text": "kicking and it's been quite successful actually yeah in the world of python web clients so",
    "start": "7664760",
    "end": "7671659"
  },
  {
    "text": "initially what are some of the design challenges there in that debate for the pep and what are some things that got",
    "start": "7671659",
    "end": "7677960"
  },
  {
    "text": "rejected what are some things that got accepted to stand out to you there are a couple of different ways you",
    "start": "7677960",
    "end": "7684080"
  },
  {
    "text": "can handle parallel i o and this happens sort of at an architectural level in",
    "start": "7684080",
    "end": "7690320"
  },
  {
    "text": "operating systems as well like Windows prefers to do it one way and Unix prefers to do it the other way",
    "start": "7690320",
    "end": "7697400"
  },
  {
    "text": "you sort of you have an object that represents a network endpoint say a connection with a",
    "start": "7697400",
    "end": "7705080"
  },
  {
    "text": "web browser that your client and say you're you're waiting for an",
    "start": "7705080",
    "end": "7710480"
  },
  {
    "text": "incoming request two fundamental approaches are",
    "start": "7710480",
    "end": "7716139"
  },
  {
    "text": "okay I'm waiting for an incoming request I'm doing something else come wake me up",
    "start": "7716239",
    "end": "7721340"
  },
  {
    "text": "or of course sort of come tell me when uh something interesting happened like a packet came in on that network",
    "start": "7721340",
    "end": "7726920"
  },
  {
    "text": "connection and the other Paradigm is",
    "start": "7726920",
    "end": "7733099"
  },
  {
    "text": "we're on a team of a whole bunch of people with maybe a little mind and we",
    "start": "7733099",
    "end": "7739219"
  },
  {
    "text": "we can only manage one web connection at a time so I'm just sitting",
    "start": "7739219",
    "end": "7746739"
  },
  {
    "text": "looking at this this web connection and I'm just blocked until something comes",
    "start": "7746739",
    "end": "7753560"
  },
  {
    "text": "in and then uh I'm already waiting for it uh I get I get the data I process the",
    "start": "7753560",
    "end": "7761480"
  },
  {
    "text": "data and then I go back to the top and say no sort of I'm waiting for the next packet those are about the two paradigms",
    "start": "7761480",
    "end": "7769280"
  },
  {
    "text": "one is a paradigm where there is sort of notionally a threat of control whether",
    "start": "7769280",
    "end": "7775940"
  },
  {
    "text": "it's an actual operating system thread or more an abstraction in async IO we call them tasks",
    "start": "7775940",
    "end": "7782360"
  },
  {
    "text": "but a task in async IO or a thread in other contexts is devoted to one thing",
    "start": "7782360",
    "end": "7789020"
  },
  {
    "text": "and it has Logic for all the stages like when it's a web request like",
    "start": "7789020",
    "end": "7795739"
  },
  {
    "text": "first wait wait for the first line of the web request parse it because then you know if it's a get or a post or a",
    "start": "7795739",
    "end": "7803480"
  },
  {
    "text": "put or whatever or an error uh then wait until you have a bunch of lines until",
    "start": "7803480",
    "end": "7809780"
  },
  {
    "text": "there's a blank line then parse that as headers and then interpret that and then",
    "start": "7809780",
    "end": "7815179"
  },
  {
    "text": "wait for the rest of the data to come in if there is any more that you request",
    "start": "7815179",
    "end": "7820280"
  },
  {
    "text": "expect that sort of standard web stuff and the other thing is and there's",
    "start": "7820280",
    "end": "7826880"
  },
  {
    "text": "always endless debate about which approach is more efficient and which approach is more error prone",
    "start": "7826880",
    "end": "7833000"
  },
  {
    "text": "where I just have a whole bunch of stacks in front of me and uh whenever",
    "start": "7833000",
    "end": "7839360"
  },
  {
    "text": "a packet comes in I sort of look at the number of the pack that there's some",
    "start": "7839360",
    "end": "7844580"
  },
  {
    "text": "number on the packet and I say oh that packet goes on this pile and then I can do a little bit and then",
    "start": "7844580",
    "end": "7851719"
  },
  {
    "text": "sort of that pile provides my context and as soon as I'm done with with the",
    "start": "7851719",
    "end": "7857300"
  },
  {
    "text": "processing I sort of I can forget everything about what's going on because the next packet will",
    "start": "7857300",
    "end": "7863540"
  },
  {
    "text": "come in from some random other client and it's that pile or this pile uh and every time a pile is maybe empty",
    "start": "7863540",
    "end": "7871219"
  },
  {
    "text": "or full or whatever the criteria is I can toss it away or use it for a new",
    "start": "7871219",
    "end": "7876380"
  },
  {
    "text": "space but several traditional third-party libraries for asynchronous i o",
    "start": "7876380",
    "end": "7882800"
  },
  {
    "text": "processing in Python shows the model of a callback and that's that's the idea where you",
    "start": "7882800",
    "end": "7889099"
  },
  {
    "text": "have a bunch of different stacks of paper in front of you and every time someone gives you a piece gives you new",
    "start": "7889099",
    "end": "7895580"
  },
  {
    "text": "sheet you decide which stack it belongs to and that leads to a certain style of",
    "start": "7895580",
    "end": "7903679"
  },
  {
    "text": "spaghetti code that I find sort of aesthetically",
    "start": "7903679",
    "end": "7908920"
  },
  {
    "text": "not pleasing and I I was sort of never very successful and I had heard many",
    "start": "7908920",
    "end": "7915560"
  },
  {
    "text": "stories about people who were also sort of complaining about that style of",
    "start": "7915560",
    "end": "7921320"
  },
  {
    "text": "coding uh it was very prevalent in JavaScript at the time at least because it was like",
    "start": "7921320",
    "end": "7927380"
  },
  {
    "text": "how the JavaScript event Loop basically works and so I thought well the",
    "start": "7927380",
    "end": "7934520"
  },
  {
    "text": "task-based model where each task has a bunch of logic we had mechanisms in the",
    "start": "7934520",
    "end": "7941179"
  },
  {
    "text": "Python language that we could easily reuse for for that and I thought I want",
    "start": "7941179",
    "end": "7947300"
  },
  {
    "text": "to build a whole library for asynchronous networking i o uh and all the other things that may",
    "start": "7947300",
    "end": "7954500"
  },
  {
    "text": "need to be done asynchronously uh based on that Paradigm and so I just",
    "start": "7954500",
    "end": "7960860"
  },
  {
    "text": "chose a paradigm and tried to see how far I could get with that and it turns",
    "start": "7960860",
    "end": "7966560"
  },
  {
    "text": "out that it's pretty good paradigm so people enjoy that kind of Paradigm programming for asynchronous Io relative",
    "start": "7966560",
    "end": "7975020"
  },
  {
    "text": "to callbacks okay beautiful so how does that all interplay with",
    "start": "7975020",
    "end": "7981739"
  },
  {
    "start": "7978000",
    "end": "8556000"
  },
  {
    "text": "the infamous Gill the goal the global interpreter lock maybe can you say what the Gill is and",
    "start": "7981739",
    "end": "7988940"
  },
  {
    "text": "how does the dance beautifully with Ace in Kyle the global interpreter lock",
    "start": "7988940",
    "end": "7995860"
  },
  {
    "text": "solves the problem that python originally was not written with either asynchronous or or parallelism in mind",
    "start": "7995860",
    "end": "8004360"
  },
  {
    "text": "at all there was no concurrency in the language there was no parallelism there were no threads",
    "start": "8004360",
    "end": "8010179"
  },
  {
    "text": "only a small number of years into Python's initial development",
    "start": "8010179",
    "end": "8015880"
  },
  {
    "text": "all the new cool operating systems like uh Sun OS and silicon graphics irex and",
    "start": "8015880",
    "end": "8023679"
  },
  {
    "text": "then eventually posix and windows all came with threading libraries",
    "start": "8023679",
    "end": "8029739"
  },
  {
    "text": "that lets you do multiple things in parallel and there is a certain",
    "start": "8029739",
    "end": "8034960"
  },
  {
    "text": "certain sort of principle which is the operating system handles the threads for",
    "start": "8034960",
    "end": "8041380"
  },
  {
    "text": "you and the program can pretend that there are as many CPUs as as there are threads",
    "start": "8041380",
    "end": "8050739"
  },
  {
    "text": "in the program uh and those CPUs were completely",
    "start": "8050739",
    "end": "8056260"
  },
  {
    "text": "independently and if you don't have enough CPUs the operating system sort of simulates those",
    "start": "8056260",
    "end": "8064179"
  },
  {
    "text": "extra CPUs on the other hand if you have enough CPUs you can get a lot of work",
    "start": "8064179",
    "end": "8070719"
  },
  {
    "text": "done by deploying those multiple CPUs but python wasn't written",
    "start": "8070719",
    "end": "8076599"
  },
  {
    "text": "to to do that uh and so",
    "start": "8076599",
    "end": "8083820"
  },
  {
    "text": "as libraries for for multi-threading were added to C",
    "start": "8083940",
    "end": "8090159"
  },
  {
    "text": "but every operating system vendor was adding their own version of that",
    "start": "8090159",
    "end": "8095219"
  },
  {
    "text": "we thought and maybe we were wrong but at the time we thought well we quickly",
    "start": "8095219",
    "end": "8100599"
  },
  {
    "text": "want to be able to support these multiple threads because they seemed at the time in the",
    "start": "8100599",
    "end": "8106719"
  },
  {
    "text": "early 90s when they were new at least to me they seemed a cool interesting",
    "start": "8106719",
    "end": "8112179"
  },
  {
    "text": "programming Paradigm and one of the things that that python at least at the time",
    "start": "8112179",
    "end": "8118060"
  },
  {
    "text": "felt was nice about the language was that we could give a safe version of all kinds of cool new",
    "start": "8118060",
    "end": "8126699"
  },
  {
    "text": "operating system toys to the python programmer like I remember",
    "start": "8126699",
    "end": "8132659"
  },
  {
    "text": "one or two years before threading I I had spent some time adding networking",
    "start": "8132659",
    "end": "8139420"
  },
  {
    "text": "sockets uh to Python and they were very literal",
    "start": "8139420",
    "end": "8144940"
  },
  {
    "text": "translation of the networking sockets that were in the BSD operating system so Unix BSD",
    "start": "8144940",
    "end": "8151239"
  },
  {
    "text": "but the nice thing was if you're using sockets from python then all the things",
    "start": "8151239",
    "end": "8156699"
  },
  {
    "text": "you can do wrong with sockets in C would automatically give you a clear error message instead of just ending up with a",
    "start": "8156699",
    "end": "8163719"
  },
  {
    "text": "malfunctioning hanging program and so we thought well we'll do the same thing with threading",
    "start": "8163719",
    "end": "8169960"
  },
  {
    "text": "but we didn't really want to rewrite The Interpreter",
    "start": "8169960",
    "end": "8175599"
  },
  {
    "text": "to be thread safe because that that was was like",
    "start": "8175599",
    "end": "8181060"
  },
  {
    "text": "that would be a very complex refactoring of all The Interpreter code and all the",
    "start": "8181060",
    "end": "8186159"
  },
  {
    "text": "runtime code because all the objects were written with the assumption that there is only one thread and so we said",
    "start": "8186159",
    "end": "8193359"
  },
  {
    "text": "okay well we'll take our losses we'll provide something that looks like",
    "start": "8193360",
    "end": "8198518"
  },
  {
    "text": "threads and as long as you only have a single CPU on your computer which most",
    "start": "8198519",
    "end": "8203978"
  },
  {
    "text": "computers at the time did uh it feels just like threads because",
    "start": "8203979",
    "end": "8210638"
  },
  {
    "text": "the the whole idea of of multiple threads in the OS was that even if your computer only had one CPU you could",
    "start": "8210639",
    "end": "8217899"
  },
  {
    "text": "still fire up at many threads as you wanted well within reason maybe 10 or 12",
    "start": "8217900",
    "end": "8223178"
  },
  {
    "text": "not 5000. uh and so we thought we had conquered",
    "start": "8223179",
    "end": "8229359"
  },
  {
    "text": "the the abstraction of threads pretty well",
    "start": "8229360",
    "end": "8234399"
  },
  {
    "text": "because multi core uh CPUs were were not in in most python programmers hands",
    "start": "8234400",
    "end": "8241719"
  },
  {
    "text": "anyway and then of course a couple of more iterations of Moore's Law and computers",
    "start": "8241719",
    "end": "8248558"
  },
  {
    "text": "getting faster and at some point uh the chip designers decided that they",
    "start": "8248559",
    "end": "8256058"
  },
  {
    "text": "couldn't make the CPUs faster but they could still make them smaller and so they could put multiple CPUs on one chip",
    "start": "8256059",
    "end": "8263219"
  },
  {
    "text": "and suddenly there was all this pressure about do things in parallel and that's where",
    "start": "8263219",
    "end": "8270638"
  },
  {
    "text": "the the solution we had in Python didn't work and that's that's sort of the moment",
    "start": "8270639",
    "end": "8277660"
  },
  {
    "text": "that the Gill became became infamous because the guilt the guilt was the",
    "start": "8277660",
    "end": "8283240"
  },
  {
    "text": "solution we used to sort of take this single interpreter and share",
    "start": "8283240",
    "end": "8289719"
  },
  {
    "text": "it between all the different operating system threats that you could create and",
    "start": "8289719",
    "end": "8295240"
  },
  {
    "text": "so as long as the the hardware physically only had one CPU that was all",
    "start": "8295240",
    "end": "8300399"
  },
  {
    "text": "fine and then as Hardware vendors were suddenly telling us all oh you got to",
    "start": "8300400",
    "end": "8306518"
  },
  {
    "text": "paralyze everything's got to be paralyzed people started saying oh uh but we can",
    "start": "8306519",
    "end": "8313719"
  },
  {
    "text": "use multiple threads in Python and uh then they discovered oh but actually all",
    "start": "8313719",
    "end": "8318939"
  },
  {
    "text": "threads run on a single single core yeah I mean is there a way is there ideas for",
    "start": "8318940",
    "end": "8325240"
  },
  {
    "text": "in the future to remove the global interpreter log Gill like maybe multiple sub interpreters some",
    "start": "8325240",
    "end": "8332678"
  },
  {
    "text": "tricky interpreters on top of interpreters kind of thing yeah there there are a couple",
    "start": "8332679",
    "end": "8339460"
  },
  {
    "text": "of possible uh Futures there the the most likely future is that we'll get",
    "start": "8339460",
    "end": "8346899"
  },
  {
    "text": "multiple sub interpreters which each run a completely independent",
    "start": "8346900",
    "end": "8352478"
  },
  {
    "text": "Python program nice uh but they're they're still some benefit of",
    "start": "8352479",
    "end": "8359080"
  },
  {
    "text": "of sort of faster communication between those programs but it's also managing",
    "start": "8359080",
    "end": "8366399"
  },
  {
    "text": "for you this running a multiple python programs yeah so it's hidden from you",
    "start": "8366400",
    "end": "8372340"
  },
  {
    "text": "right the it's it's hidden from you but you have to spend more time communicating between those programs",
    "start": "8372340",
    "end": "8379240"
  },
  {
    "text": "because the sort of the attractive thing about the multi-threaded model is",
    "start": "8379240",
    "end": "8385960"
  },
  {
    "text": "that the threads can share objects at the same time that's also the downfall",
    "start": "8385960",
    "end": "8391359"
  },
  {
    "text": "of the multi-threaded programming model because when you do share objects",
    "start": "8391359",
    "end": "8397300"
  },
  {
    "text": "you were and you didn't necessarily intend to share them or uh there were",
    "start": "8397300",
    "end": "8403300"
  },
  {
    "text": "aspects of those objects that that were not reusable you get all kinds",
    "start": "8403300",
    "end": "8409899"
  },
  {
    "text": "of concurrency bugs and so the reason I wrote that little blog post",
    "start": "8409899",
    "end": "8415840"
  },
  {
    "text": "about semaphores was that concurrency bugs are just harder it would be nice if",
    "start": "8415840",
    "end": "8422680"
  },
  {
    "text": "python had uh no Global interpreter lock and it had the so-called free threading",
    "start": "8422680",
    "end": "8430000"
  },
  {
    "text": "but it would also cause a lot more software bugs",
    "start": "8430000",
    "end": "8435160"
  },
  {
    "text": "uh the interesting thing is that there is still a possible future where we are",
    "start": "8435160",
    "end": "8441100"
  },
  {
    "text": "actually going to or where we could experiment at least with that",
    "start": "8441100",
    "end": "8446140"
  },
  {
    "text": "because there is a guy working for Facebook who has developed a fork of C",
    "start": "8446140",
    "end": "8453880"
  },
  {
    "text": "python that he called the no-gill interpreter where he removed the Gill",
    "start": "8453880",
    "end": "8461460"
  },
  {
    "text": "and made a whole bunch of optimizations so that the the single threaded case",
    "start": "8461460",
    "end": "8467680"
  },
  {
    "text": "doesn't run too much slower uh and multi-threaded case will actually uh use all the cores that you have",
    "start": "8467680",
    "end": "8477460"
  },
  {
    "text": "and so that that would be an interesting possibility",
    "start": "8477460",
    "end": "8482620"
  },
  {
    "text": "if we would be willing as a python core",
    "start": "8482620",
    "end": "8487899"
  },
  {
    "text": "developers to actually uh maintain that code indefinitely",
    "start": "8487899",
    "end": "8494520"
  },
  {
    "text": "and if we're willing to put up with the additional complexity of The Interpreter",
    "start": "8494520",
    "end": "8500560"
  },
  {
    "text": "and the additional sort of overhead for the single threaded case and I'm",
    "start": "8500560",
    "end": "8506319"
  },
  {
    "text": "personally not convinced that",
    "start": "8506319",
    "end": "8511141"
  },
  {
    "text": "there are enough people uh needing the speed of multiple threads",
    "start": "8511540",
    "end": "8519520"
  },
  {
    "text": "with their python programs that it's worth to sort of",
    "start": "8519520",
    "end": "8525220"
  },
  {
    "text": "take that performance hit and that complexity hit and I I feel that the Gill actually is",
    "start": "8525220",
    "end": "8532240"
  },
  {
    "text": "pretty nice Goldilocks point between no threads and",
    "start": "8532240",
    "end": "8537340"
  },
  {
    "text": "uh all threads all the time but not everybody agrees on that so that is",
    "start": "8537340",
    "end": "8543100"
  },
  {
    "text": "definitely a possible future the sub interpreters look like a fairly safe bet for 312 so say a year from now a year so",
    "start": "8543100",
    "end": "8552760"
  },
  {
    "text": "the goal is to do a new version every year yeah for python let me ask you perhaps a",
    "start": "8552760",
    "end": "8558580"
  },
  {
    "start": "8556000",
    "end": "9293000"
  },
  {
    "text": "fun question but there's a philosophy dude to will there ever be a python 4.0",
    "start": "8558580",
    "end": "8565120"
  },
  {
    "text": "now before you say it's currently a joke and probably not I'm gonna go to 3.99 or",
    "start": "8565120",
    "end": "8572700"
  },
  {
    "text": "3.99 999. can you imagine possible features",
    "start": "8572700",
    "end": "8580479"
  },
  {
    "text": "that python 4.0 might have that would necessitate the creation of the new 4.0",
    "start": "8580479",
    "end": "8589420"
  },
  {
    "text": "given the amount of pain and joy suffering and Triumph that was involved",
    "start": "8589420",
    "end": "8596200"
  },
  {
    "text": "in the move between version 2 and version three yeah well we're we",
    "start": "8596200",
    "end": "8605020"
  },
  {
    "text": "as a community and as a core development team we have a large amount of painful",
    "start": "8605020",
    "end": "8612939"
  },
  {
    "text": "memories about the Python 3 transition",
    "start": "8612939",
    "end": "8618040"
  },
  {
    "text": "uh which is one reason that sort of everybody is happy that we've decided",
    "start": "8618040",
    "end": "8624640"
  },
  {
    "text": "there's not going to be a 4.0 at least not anytime soon and if there is going",
    "start": "8624640",
    "end": "8631359"
  },
  {
    "text": "to be one it would will sort of plan the transition very differently because",
    "start": "8631359",
    "end": "8637180"
  },
  {
    "text": "clearly we underestimated the pain the transition cost for our users in the Python 3 case",
    "start": "8637180",
    "end": "8645580"
  },
  {
    "text": "and had we known we could have sort of",
    "start": "8645580",
    "end": "8650920"
  },
  {
    "text": "designed Python 3 somewhat differently without making it any worse",
    "start": "8650920",
    "end": "8657460"
  },
  {
    "text": "we just thought that we had a good plan but we we we underestimated where",
    "start": "8657460",
    "end": "8663580"
  },
  {
    "text": "what what sort of the users were capable of when it comes to that kind of transition by the way I think we talked",
    "start": "8663580",
    "end": "8671200"
  },
  {
    "text": "way before like a year and a half before the uh python 2 officially",
    "start": "8671200",
    "end": "8677680"
  },
  {
    "text": "end of life end of life oh yeah what was that what was your memory of",
    "start": "8677680",
    "end": "8682840"
  },
  {
    "text": "the end of life did you shed a tear on January 1st 2020 did was there everyone's standing alone our team had",
    "start": "8682840",
    "end": "8690340"
  },
  {
    "text": "basically moved on years before yeah it was it was purely it was a",
    "start": "8690340",
    "end": "8696700"
  },
  {
    "text": "little symbolic moment uh to signal to the the remaining users",
    "start": "8696700",
    "end": "8703120"
  },
  {
    "text": "that there was no longer going to be any new",
    "start": "8703120",
    "end": "8709420"
  },
  {
    "text": "releases or support for python 2 7. did you shed a single tier while looking",
    "start": "8709420",
    "end": "8716560"
  },
  {
    "text": "out over the horizon I'm not not a very poetic person and I",
    "start": "8716560",
    "end": "8722200"
  },
  {
    "text": "don't shed tears like that but no yeah we we actually had planned a party",
    "start": "8722200",
    "end": "8729640"
  },
  {
    "text": "but the party was planned for uh the python the U.S python conference that",
    "start": "8729640",
    "end": "8734859"
  },
  {
    "text": "year which would never happened of course because of the pandemic oh is it like in March yeah the conference was uh",
    "start": "8734859",
    "end": "8742120"
  },
  {
    "text": "going to be I think late April that year oh so that that was a very difficult",
    "start": "8742120",
    "end": "8747819"
  },
  {
    "text": "decision to cancel it but they did so anyway if we're going to",
    "start": "8747819",
    "end": "8753340"
  },
  {
    "text": "have a python 4 we're going to have to have both a different reason for for",
    "start": "8753340",
    "end": "8759220"
  },
  {
    "text": "having that and a different process for managing the transition can you imagine a possible",
    "start": "8759220",
    "end": "8765460"
  },
  {
    "text": "process that so so I think you're implying that if there is a 4.0 in some",
    "start": "8765460",
    "end": "8771819"
  },
  {
    "text": "ways it would break back compatibility well so",
    "start": "8771819",
    "end": "8777280"
  },
  {
    "text": "here is here is a concrete thought I've had and I'm not unique but not everyone",
    "start": "8777280",
    "end": "8782560"
  },
  {
    "text": "agrees with this so this is definitely a personal opinion if we were to try something like that no",
    "start": "8782560",
    "end": "8791620"
  },
  {
    "text": "Guild python uh my expectation is that",
    "start": "8791620",
    "end": "8799780"
  },
  {
    "text": "it would feel just different enough",
    "start": "8799780",
    "end": "8805420"
  },
  {
    "text": "at least for the the part of the Python ecosystem that",
    "start": "8805420",
    "end": "8810640"
  },
  {
    "text": "is heavily based on C extensions and that is like the entire machine",
    "start": "8810640",
    "end": "8817359"
  },
  {
    "text": "learning data science Scientific Python world is all based on C extensions for",
    "start": "8817359",
    "end": "8825220"
  },
  {
    "text": "python and so those people would likely feel the pain",
    "start": "8825220",
    "end": "8832840"
  },
  {
    "text": "the most because they even if we don't change",
    "start": "8832840",
    "end": "8838960"
  },
  {
    "text": "anything about the syntax of the language and the semantics of the language when you're writing python code",
    "start": "8838960",
    "end": "8844899"
  },
  {
    "text": "we we could even say suppose that after python say 3 19 instead of 320 we'll",
    "start": "8844899",
    "end": "8851859"
  },
  {
    "text": "have 4.0 suppose that's the time when we flip the switch to 4.0 will will not",
    "start": "8851859",
    "end": "8859720"
  },
  {
    "text": "have a gill imagine it was like that so",
    "start": "8859720",
    "end": "8865060"
  },
  {
    "text": "I would probably say that particular year the release that we",
    "start": "8865060",
    "end": "8871359"
  },
  {
    "text": "named 4.0 will be syntactically it will not have any new syntactical features no",
    "start": "8871359",
    "end": "8879340"
  },
  {
    "text": "new modules in the standard Library no new built-in functions everything will be at the python level",
    "start": "8879340",
    "end": "8887560"
  },
  {
    "text": "will be purely compatible with python 3.19 however",
    "start": "8887560",
    "end": "8894899"
  },
  {
    "text": "extension modules will have to make a change they all have",
    "start": "8894899",
    "end": "8900520"
  },
  {
    "text": "to be recompiled they will not have the same binary interface",
    "start": "8900520",
    "end": "8907600"
  },
  {
    "text": "uh the semantics and and apis for for some",
    "start": "8907600",
    "end": "8914620"
  },
  {
    "text": "things that are frequently accessed by C extensions will be different and so for",
    "start": "8914620",
    "end": "8921880"
  },
  {
    "text": "a pure python user 4.0 would be a breeze except that there",
    "start": "8921880",
    "end": "8927939"
  },
  {
    "text": "are very few pure python users left because everybody who is using python for something significant is using",
    "start": "8927939",
    "end": "8935439"
  },
  {
    "text": "third-party extensions they're like I don't know several hundreds of thousands of third-party extensions on uh the Pi",
    "start": "8935439",
    "end": "8943720"
  },
  {
    "text": "Pi service and I'm not saying they're old they're all good but there is a large list of",
    "start": "8943720",
    "end": "8951399"
  },
  {
    "text": "extensions that would have to do work and some of those extensions are currently already low on maintainers and",
    "start": "8951399",
    "end": "8960520"
  },
  {
    "text": "they're struggling to keep afloat so there you can give a huge heads up to",
    "start": "8960520",
    "end": "8966399"
  },
  {
    "text": "them if you go to 4.0 to really keep developing it yeah we'd probably have to",
    "start": "8966399",
    "end": "8971740"
  },
  {
    "text": "do something like several years before who knows maybe",
    "start": "8971740",
    "end": "8977200"
  },
  {
    "text": "five years earlier like 3.15 we would have to say and and I'm just making the",
    "start": "8977200",
    "end": "8984100"
  },
  {
    "text": "the specific numbers up but we at some point we'd have to say foreign",
    "start": "8984100",
    "end": "8990120"
  },
  {
    "text": "python could be an option it might be a compile time option",
    "start": "8990120",
    "end": "8995859"
  },
  {
    "text": "uh if you want to use no Guild python you",
    "start": "8995859",
    "end": "9001200"
  },
  {
    "text": "have to recompile python from source for your platform using your tool set",
    "start": "9001200",
    "end": "9006240"
  },
  {
    "text": "all you have to do is change one configuration variable and then you just run make",
    "start": "9006240",
    "end": "9011939"
  },
  {
    "text": "or configure and make and it will build it for you but now you also have to use the the",
    "start": "9011939",
    "end": "9019620"
  },
  {
    "text": "no-gill compatible versions of all extension modules you want to use",
    "start": "9019620",
    "end": "9024720"
  },
  {
    "text": "and so as long as many extension modules don't have fully functional",
    "start": "9024720",
    "end": "9031080"
  },
  {
    "text": "sort of variants that work within the no-gill world that's not a very practical thing for",
    "start": "9031080",
    "end": "9038580"
  },
  {
    "text": "python users but it would allow extension Developers",
    "start": "9038580",
    "end": "9043920"
  },
  {
    "text": "to test the waters see what they need to syntactically to be able to compile at",
    "start": "9043920",
    "end": "9050880"
  },
  {
    "text": "all maybe they're using functions that are defined by the Python",
    "start": "9050880",
    "end": "9056399"
  },
  {
    "text": "3 runtime that won't be in the python 4 runtime those functions will not work they'll have to find an alternative",
    "start": "9056399",
    "end": "9063840"
  },
  {
    "text": "uh but they can experiment with that and sort of write test applications and that",
    "start": "9063840",
    "end": "9069660"
  },
  {
    "text": "would be a way to transition and that that could be a series of releases where",
    "start": "9069660",
    "end": "9076620"
  },
  {
    "text": "the python 4 is more and more imminent uh we have supported more and more",
    "start": "9076620",
    "end": "9083880"
  },
  {
    "text": "third-party extension modules to have solid support that works for no Guild",
    "start": "9083880",
    "end": "9090359"
  },
  {
    "text": "python for that new API uh and then sort of python python 4.0 is",
    "start": "9090359",
    "end": "9098819"
  },
  {
    "text": "like the official moment that the mayor comes out and cuts the ribbon and is now",
    "start": "9098819",
    "end": "9104340"
  },
  {
    "text": "a python uh now the sort of no-gill mode is the default and maybe the only mode",
    "start": "9104340",
    "end": "9109920"
  },
  {
    "text": "there is the internet wants to know from Reddit uh it it's uh it's a small and fun",
    "start": "9109920",
    "end": "9118740"
  },
  {
    "text": "question there's many fun questions but uh out of the Pi Pi packages Pi Pi",
    "start": "9118740",
    "end": "9125100"
  },
  {
    "text": "packages uh do you have uh do you have ones you like do you in your opinion",
    "start": "9125100",
    "end": "9130200"
  },
  {
    "text": "other must have Pi Pi libraries or ones you use all the time constantly oh my",
    "start": "9130200",
    "end": "9136020"
  },
  {
    "text": "that I should really have a standard answer for that question but like a positive",
    "start": "9136020",
    "end": "9142800"
  },
  {
    "text": "standard answer but my current standard answer is that I'm not a big user of",
    "start": "9142800",
    "end": "9148020"
  },
  {
    "text": "third-party packages when I write python code I'm usually developing some tooling around building",
    "start": "9148020",
    "end": "9155760"
  },
  {
    "text": "python itself and the last thing we want is",
    "start": "9155760",
    "end": "9161340"
  },
  {
    "text": "dependencies on third-party packages so I I tend to just use the standard library and that's where your focus is",
    "start": "9161340",
    "end": "9168120"
  },
  {
    "text": "that's where your mind is but do you do you keep an eye of what's out there to understand where the",
    "start": "9168120",
    "end": "9175080"
  },
  {
    "text": "standard Library could be moving should be moving it's a good kind of landscape of what's missing from the same Library",
    "start": "9175080",
    "end": "9182520"
  },
  {
    "text": "well usually when something's missing from the standard Library nowadays uh",
    "start": "9182520",
    "end": "9189859"
  },
  {
    "text": "it is a relatively new idea and there is",
    "start": "9189859",
    "end": "9195240"
  },
  {
    "text": "a third party implementation or maybe possibly multiple third-party",
    "start": "9195240",
    "end": "9201180"
  },
  {
    "text": "implementations but they evolve at a much higher rate than they could when",
    "start": "9201180",
    "end": "9206939"
  },
  {
    "text": "they're in the standard Library so they it would be a big reduction in in",
    "start": "9206939",
    "end": "9213540"
  },
  {
    "text": "activity to incorporate things like that in the standard Library so I I like that there",
    "start": "9213540",
    "end": "9220080"
  },
  {
    "text": "is a lively package ecosystem and that sort of recent Trends in the standard",
    "start": "9220080",
    "end": "9225240"
  },
  {
    "text": "Library are actually that we're doing the occasional spring cleaning where we're just",
    "start": "9225240",
    "end": "9231660"
  },
  {
    "text": "we're we're choosing some",
    "start": "9231660",
    "end": "9236840"
  },
  {
    "text": "modules that have not had a lot of change in a long time and that maybe",
    "start": "9236840",
    "end": "9245060"
  },
  {
    "text": "would be better off not existing at all at this point because there might be a",
    "start": "9245060",
    "end": "9250200"
  },
  {
    "text": "better third party alternative anyway and we're sort of slowly removing those that often those",
    "start": "9250200",
    "end": "9258060"
  },
  {
    "text": "are things that I sort of I spiked somewhere in 1992 or 1993 and",
    "start": "9258060",
    "end": "9264680"
  },
  {
    "text": "if you look look through the commit history it's very sad like",
    "start": "9264680",
    "end": "9270260"
  },
  {
    "text": "all cosmetic changes like changes in the indentation style or uh the name of this",
    "start": "9270260",
    "end": "9276840"
  },
  {
    "text": "other standard Library module got changed or like like nothing nothing of",
    "start": "9276840",
    "end": "9282060"
  },
  {
    "text": "any substance the API is identical to what it was 20 years ago",
    "start": "9282060",
    "end": "9287939"
  },
  {
    "text": "So speaking of packages they have a a lot of impact on a lot of people's",
    "start": "9287939",
    "end": "9293399"
  },
  {
    "start": "9293000",
    "end": "9875000"
  },
  {
    "text": "lives does it make sense to you why python has become the primary the",
    "start": "9293399",
    "end": "9298500"
  },
  {
    "text": "dominant language for the machine learning community so packages like uh Pi torch tensorflow second learn and",
    "start": "9298500",
    "end": "9305460"
  },
  {
    "text": "even like the lower level stuff like numpy sci-fi pandas matplotlib with visualization can you like does it make",
    "start": "9305460",
    "end": "9312960"
  },
  {
    "text": "sense to you why it uh uh permeated the entire data science",
    "start": "9312960",
    "end": "9318780"
  },
  {
    "text": "machine learning AI community well it's part of it is an effect that's as simple",
    "start": "9318780",
    "end": "9325260"
  },
  {
    "text": "as we're all driving on the right side of the road right uh it's compatibility yeah it's it's in",
    "start": "9325260",
    "end": "9334740"
  },
  {
    "text": "and and and and part of it is uh not not quite as as as fundamental as",
    "start": "9334740",
    "end": "9343080"
  },
  {
    "text": "driving on the right side of the road which you have to do for for safety reasons I mean you have to agree on",
    "start": "9343080",
    "end": "9348120"
  },
  {
    "text": "something every they they could have picked JavaScript or Pearl there was there was",
    "start": "9348120",
    "end": "9353280"
  },
  {
    "text": "a time in the early 2000s that it really looked like Pearl was going to dominate",
    "start": "9353280",
    "end": "9358319"
  },
  {
    "text": "like biosciences because DNA search was all based on regular expressions and pearl has the",
    "start": "9358319",
    "end": "9364680"
  },
  {
    "text": "fastest and most comprehensive regular expression engine still does I spent quite a long time with pearl",
    "start": "9364680",
    "end": "9371880"
  },
  {
    "text": "that was another letting go letting go of this kind of uh data",
    "start": "9371880",
    "end": "9376979"
  },
  {
    "text": "processing uh system yeah the reasons why python",
    "start": "9376979",
    "end": "9382460"
  },
  {
    "text": "became the lingua Franca of the scientific code and and",
    "start": "9382460",
    "end": "9389580"
  },
  {
    "text": "machine learning learning in particular and data science it really had a lot to do with",
    "start": "9389580",
    "end": "9398280"
  },
  {
    "text": "anything was better than C or C plus plus recently a guy who worked at Lawrence",
    "start": "9398280",
    "end": "9405479"
  },
  {
    "text": "Livermore National Laboratories in the the sort of computing division",
    "start": "9405479",
    "end": "9412399"
  },
  {
    "text": "wrote me his his Memoirs and and he had his his own view of how he helped",
    "start": "9412399",
    "end": "9420140"
  },
  {
    "text": "something he called computational steering into existence",
    "start": "9420140",
    "end": "9426260"
  },
  {
    "text": "and this was the idea that you you take libraries that in in his days were",
    "start": "9426260",
    "end": "9431760"
  },
  {
    "text": "written in Fortran that that solved Universal mathematical problems",
    "start": "9431760",
    "end": "9438600"
  },
  {
    "text": "uh and those libraries still work but uh the scientists that use the libraries",
    "start": "9438600",
    "end": "9445560"
  },
  {
    "text": "use them to solve continuously different specific applications and answer",
    "start": "9445560",
    "end": "9452880"
  },
  {
    "text": "different questions and so those poor scientists were",
    "start": "9452880",
    "end": "9458700"
  },
  {
    "text": "were required to to use say Fortran because Fortran was the library the",
    "start": "9458700",
    "end": "9464160"
  },
  {
    "text": "language that the library was written in and then the scientist would have to",
    "start": "9464160",
    "end": "9469260"
  },
  {
    "text": "write an application that sort of uses the library to solve a particular",
    "start": "9469260",
    "end": "9475020"
  },
  {
    "text": "equation or set off of answer a set of questions and the safe same for C plus plus",
    "start": "9475020",
    "end": "9482819"
  },
  {
    "text": "because of and there's there's interoperability so the dusty decks are",
    "start": "9482819",
    "end": "9488220"
  },
  {
    "text": "written either in C plus plus or Fortran uh and so Paul DuBois was one of the people",
    "start": "9488220",
    "end": "9495420"
  },
  {
    "text": "who I think in the mid 90s saw that that you needed a higher level",
    "start": "9495420",
    "end": "9503160"
  },
  {
    "text": "language for the scientists to to sort of tie together the",
    "start": "9503160",
    "end": "9510540"
  },
  {
    "text": "fundamental mathematical algorithms of linear algebra and and other stuff",
    "start": "9510540",
    "end": "9517020"
  },
  {
    "text": "and so gradually some libraries started",
    "start": "9517020",
    "end": "9522479"
  },
  {
    "text": "appearing that did very fundamental stuff with arrays of numbers in Python I",
    "start": "9522479",
    "end": "9529620"
  },
  {
    "text": "mean when I first created python I was not expecting it to be used for arrays",
    "start": "9529620",
    "end": "9535080"
  },
  {
    "text": "of numbers much I thought that was like an outdated data type and everything was like objects and",
    "start": "9535080",
    "end": "9542160"
  },
  {
    "text": "strings and like python was good and fast at string manipulation and objects",
    "start": "9542160",
    "end": "9547500"
  },
  {
    "text": "obviously but arrays of numbers were not very efficient in the multi-dimensional",
    "start": "9547500",
    "end": "9552720"
  },
  {
    "text": "arrays didn't even exist in the language at all uh but there were people who realized",
    "start": "9552720",
    "end": "9559859"
  },
  {
    "text": "that python had extensibility that was flexible enough that they could",
    "start": "9559859",
    "end": "9566700"
  },
  {
    "text": "write third-party packages that did support large arrays of numbers and operations",
    "start": "9566700",
    "end": "9574140"
  },
  {
    "text": "on them very efficiently and somehow they got a foothold",
    "start": "9574140",
    "end": "9579600"
  },
  {
    "text": "through sort of different parts of the scientific Community I I",
    "start": "9579600",
    "end": "9585359"
  },
  {
    "text": "remember that the Hubble Space Telescope people in Baltimore Were Somehow big python fans in the late 90s",
    "start": "9585359",
    "end": "9592620"
  },
  {
    "text": "and at various points small improvements were made and more",
    "start": "9592620",
    "end": "9599100"
  },
  {
    "text": "people got in touch with using python to derive these libraries",
    "start": "9599100",
    "end": "9605520"
  },
  {
    "text": "of interesting uh algorithms and like",
    "start": "9605520",
    "end": "9610620"
  },
  {
    "text": "once once you have a bunch of scientists who are working on similar problems say they're all working on stuff that that",
    "start": "9610620",
    "end": "9617640"
  },
  {
    "text": "com data that comes in from the Hubble Space Telescope but they're looking at different things some some are looking",
    "start": "9617640",
    "end": "9623160"
  },
  {
    "text": "at stars in this galaxy other are looking at galaxies the math is completely different but the the",
    "start": "9623160",
    "end": "9629460"
  },
  {
    "text": "underlying libraries are still the same and so they Exchange",
    "start": "9629460",
    "end": "9636180"
  },
  {
    "text": "code they say well I wrote this Python program or I wrote a python library to",
    "start": "9636180",
    "end": "9641340"
  },
  {
    "text": "solve this class of problems and the other guys either say oh I can",
    "start": "9641340",
    "end": "9647040"
  },
  {
    "text": "use that Library 2 or if you make a few changes I can use that Library too",
    "start": "9647040",
    "end": "9652380"
  },
  {
    "text": "why why start from scratch in Pearl or JavaScript where there's not that infrastructure",
    "start": "9652380",
    "end": "9660260"
  },
  {
    "text": "for arrays of numbers yet whereas in Python you have it and so more and more",
    "start": "9660260",
    "end": "9666060"
  },
  {
    "text": "scientists at different places doing different different work",
    "start": "9666060",
    "end": "9671420"
  },
  {
    "text": "discovered Python and then then people who had an idea for an important new",
    "start": "9671420",
    "end": "9678240"
  },
  {
    "text": "fundamental Library decided oh python is is actually already known to our users",
    "start": "9678240",
    "end": "9684960"
  },
  {
    "text": "so let's use python as the user interface I think that's how tensor I imagine at",
    "start": "9684960",
    "end": "9691080"
  },
  {
    "text": "least that's how tensorflow ended up with python as the user interflow interface right but with tensorflow",
    "start": "9691080",
    "end": "9697520"
  },
  {
    "text": "there's a deeper history of what the community is it's not just like what",
    "start": "9697520",
    "end": "9703979"
  },
  {
    "text": "packages it needs it's like what the community leans on for programming language because tensorflow",
    "start": "9703979",
    "end": "9710700"
  },
  {
    "text": "uh had a prior library that was internal to Google but there was also competing",
    "start": "9710700",
    "end": "9716700"
  },
  {
    "text": "machine learning Frameworks like thiano Cafe they were in Python there was some",
    "start": "9716700",
    "end": "9723479"
  },
  {
    "text": "Scala um some other languages but python was really dominating it",
    "start": "9723479",
    "end": "9729540"
  },
  {
    "text": "and it's interesting because um there's other languages from the engineering space like Matlab",
    "start": "9729540",
    "end": "9736439"
  },
  {
    "text": "that a lot of people used but different design choices by the company by the",
    "start": "9736439",
    "end": "9742620"
  },
  {
    "text": "core developers led to it not spreading and one of the choices of Matlab",
    "start": "9742620",
    "end": "9748560"
  },
  {
    "text": "uh by math works is to not make it open source right or yeah not you know having",
    "start": "9748560",
    "end": "9753780"
  },
  {
    "text": "people pay it was a very expensive product and so uh universities",
    "start": "9753780",
    "end": "9759060"
  },
  {
    "text": "especially disliked it because it was a price per seat I I remember hearing",
    "start": "9759060",
    "end": "9765000"
  },
  {
    "text": "yeah but I think that's not why it failed or it failed to spread I think",
    "start": "9765000",
    "end": "9771300"
  },
  {
    "text": "the universities didn't like it but they would still pay for it the thing is it didn't feed into that",
    "start": "9771300",
    "end": "9777660"
  },
  {
    "text": "GitHub open source uh packages culture so like and that's",
    "start": "9777660",
    "end": "9783960"
  },
  {
    "text": "somehow a precondition for um for viral spreading the hacker culture like the",
    "start": "9783960",
    "end": "9789660"
  },
  {
    "text": "tinkerer culture uh with python it feels like you can build a package from scratch or solve a particular problem",
    "start": "9789660",
    "end": "9795720"
  },
  {
    "text": "and get excited about sharing that package with others and that creates an",
    "start": "9795720",
    "end": "9800760"
  },
  {
    "text": "excitement about a language I tend to like Python's approach to open source in particular because it's sort of",
    "start": "9800760",
    "end": "9807899"
  },
  {
    "text": "it's almost egalitarium uh there's there's little hierarchy",
    "start": "9807899",
    "end": "9814439"
  },
  {
    "text": "there's there's obviously some because the like you only need to decide whether you drive on the left or the right side",
    "start": "9814439",
    "end": "9820859"
  },
  {
    "text": "of the road sometimes but there is a lot of access for people with little power you don't have to work",
    "start": "9820859",
    "end": "9828600"
  },
  {
    "text": "for a big tech company to make a difference in the python world uh we have affordable events that really",
    "start": "9828600",
    "end": "9837899"
  },
  {
    "text": "care about community and support people and sort of the community is is",
    "start": "9837899",
    "end": "9844680"
  },
  {
    "text": "it's like a big deal at our conferences and in in the BSF when the psf funds",
    "start": "9844680",
    "end": "9852600"
  },
  {
    "text": "events it's always about growing the community the psf funds very",
    "start": "9852600",
    "end": "9860040"
  },
  {
    "text": "little development they that they do some but most of the",
    "start": "9860040",
    "end": "9865680"
  },
  {
    "text": "develop most of the money that the psf forks out uh is to community",
    "start": "9865680",
    "end": "9873260"
  },
  {
    "text": "fostering things So speaking of egalitarian last time we",
    "start": "9873260",
    "end": "9878460"
  },
  {
    "start": "9875000",
    "end": "10571000"
  },
  {
    "text": "talked four years ago it was just after you stepped down from your role as the",
    "start": "9878460",
    "end": "9884100"
  },
  {
    "text": "benevolent dictator for life pdfo looking back what are your insights and",
    "start": "9884100",
    "end": "9889740"
  },
  {
    "text": "lessons you learn from that experience about python developer Community about human",
    "start": "9889740",
    "end": "9895800"
  },
  {
    "text": "nature about human civilization life itself oh my uh",
    "start": "9895800",
    "end": "9903960"
  },
  {
    "text": "I probably held on to the position too long I remember being just",
    "start": "9903960",
    "end": "9911780"
  },
  {
    "text": "extremely stressed for a long time and",
    "start": "9911780",
    "end": "9917580"
  },
  {
    "text": "it wasn't very clear to me what was leading what was causing the",
    "start": "9917580",
    "end": "9923160"
  },
  {
    "text": "stress and looking back",
    "start": "9923160",
    "end": "9928560"
  },
  {
    "text": "uh I I should have sort of",
    "start": "9928560",
    "end": "9933740"
  },
  {
    "text": "relinquished my central role as bdfl sooner",
    "start": "9933740",
    "end": "9939680"
  },
  {
    "text": "what were the pros and cons of the bdfl role like what were the you not relinquishing it what what are the",
    "start": "9939680",
    "end": "9946500"
  },
  {
    "text": "benefits of that for the community and what are the drawbacks well the the",
    "start": "9946500",
    "end": "9951780"
  },
  {
    "text": "benefits for the community would be things like uh",
    "start": "9951780",
    "end": "9958800"
  },
  {
    "text": "Clarity of vision and sort of",
    "start": "9958800",
    "end": "9963899"
  },
  {
    "text": "a clear Direction because I I had certain ideas in in mind when I created",
    "start": "9963899",
    "end": "9971520"
  },
  {
    "text": "Python and well I sort of let myself be influenced by many other ideas as python",
    "start": "9971520",
    "end": "9979439"
  },
  {
    "text": "evolved and became more successful and more complex and",
    "start": "9979439",
    "end": "9985439"
  },
  {
    "text": "more used I also stuck to certain principles and",
    "start": "9985439",
    "end": "9990720"
  },
  {
    "text": "it's still hard to say what are Python's core principles but the fact that I was playing that",
    "start": "9990720",
    "end": "9999540"
  },
  {
    "text": "role and sort of always very active grew the community in a certain way",
    "start": "9999540",
    "end": "10007580"
  },
  {
    "text": "it modeled to the community how to think about",
    "start": "10007580",
    "end": "10012800"
  },
  {
    "text": "how to how to solve a certain problem well that was a source of stress but it was",
    "start": "10012800",
    "end": "10018260"
  },
  {
    "text": "also beneficial it was a source of stress for me personally but it was beneficial for the community because uh",
    "start": "10018260",
    "end": "10025160"
  },
  {
    "text": "people people sort of over time had learned how I was thinking and could",
    "start": "10025160",
    "end": "10032420"
  },
  {
    "text": "predict yeah but how how I would decide about a",
    "start": "10032420",
    "end": "10037760"
  },
  {
    "text": "particular issue and not always perfectly of course but there was like there wasn't a lot of jerking around",
    "start": "10037760",
    "end": "10044720"
  },
  {
    "text": "like this year we're all this year the Democrats are in power and we're doing",
    "start": "10044720",
    "end": "10050180"
  },
  {
    "text": "these kind of things and now the Republicans are in power and they roll all that back and do those kind of",
    "start": "10050180",
    "end": "10055460"
  },
  {
    "text": "things there is a clear fairly straight path ahead",
    "start": "10055460",
    "end": "10061040"
  },
  {
    "text": "and so fortunately the the successor structure with the steering Council",
    "start": "10061040",
    "end": "10067100"
  },
  {
    "text": "has has sort of found a similar way of of leading the community",
    "start": "10067100",
    "end": "10073420"
  },
  {
    "text": "in a fairly steady Direction without stagnating and and for me personally",
    "start": "10073420",
    "end": "10079760"
  },
  {
    "text": "it's more fun because there are there are things I can just ignore yeah oh yeah there's a bug in",
    "start": "10079760",
    "end": "10086540"
  },
  {
    "text": "multi-processing let someone else decide whether that's important to solve or not",
    "start": "10086540",
    "end": "10092420"
  },
  {
    "text": "I'll I'll stick to typing in the async io and the faster interpreter yeah it",
    "start": "10092420",
    "end": "10099380"
  },
  {
    "text": "allows you to focus a little bit more yeah uh what are interesting differences in",
    "start": "10099380",
    "end": "10104840"
  },
  {
    "text": "culture if you can comment on between Google Dropbox and Microsoft from our Python Programming perspective all",
    "start": "10104840",
    "end": "10110960"
  },
  {
    "text": "places you've been to the positive is there a difference or is it just",
    "start": "10110960",
    "end": "10116660"
  },
  {
    "text": "about people and there's great people everywhere or is there culture differences",
    "start": "10116660",
    "end": "10122960"
  },
  {
    "text": "sort of Dropbox is much smaller than the other two in your list yeah so that",
    "start": "10122960",
    "end": "10130760"
  },
  {
    "text": "that is a big difference the set of products they provide is more it's narrower so they're more focused smaller",
    "start": "10130760",
    "end": "10137660"
  },
  {
    "text": "code base yeah and and Dropbox sort of at least during the time I was there",
    "start": "10137660",
    "end": "10143540"
  },
  {
    "text": "had the tendency of sort of making a big plan putting the whole",
    "start": "10143540",
    "end": "10149780"
  },
  {
    "text": "company behind that plan for a year and then evaluate and then suddenly find",
    "start": "10149780",
    "end": "10155300"
  },
  {
    "text": "that everything was wrong about the plan and",
    "start": "10155300",
    "end": "10160399"
  },
  {
    "text": "then they had to do something completely different so there were there was like",
    "start": "10160399",
    "end": "10165680"
  },
  {
    "text": "the annual engineering reorg was was sort of an unpleasant tradition that",
    "start": "10165680",
    "end": "10171260"
  },
  {
    "text": "Dropbox because like oh there's a new VP of engineering and so now all the directors are being reshuffled and this",
    "start": "10171260",
    "end": "10178520"
  },
  {
    "text": "guy was in charge of of infrastructure one year and the next",
    "start": "10178520",
    "end": "10183800"
  },
  {
    "text": "year he was made in charge of I don't know product development it's fascinating because like you don't",
    "start": "10183800",
    "end": "10190100"
  },
  {
    "text": "think about these companies internally but I you know Dropbox to me from the very beginning was one of my favorite uh",
    "start": "10190100",
    "end": "10197060"
  },
  {
    "text": "Services there's certain like programs and online services that make me happy make me more efficient and",
    "start": "10197060",
    "end": "10203540"
  },
  {
    "text": "all that kind of stuff but one of the powers of those kinds of services they disappear they you're not supposed to",
    "start": "10203540",
    "end": "10209479"
  },
  {
    "text": "think about how it all works but it's incredible to me that you can sync stuff effortlessly",
    "start": "10209479",
    "end": "10215540"
  },
  {
    "text": "across so many machines so quickly and like don't have to worry about conflicts",
    "start": "10215540",
    "end": "10221720"
  },
  {
    "text": "they they take care of the you know as a person that comes from version repositories and all that kind of stuff",
    "start": "10221720",
    "end": "10227479"
  },
  {
    "text": "or merge is super difficult and uh just keeping different versions different",
    "start": "10227479",
    "end": "10232939"
  },
  {
    "text": "files is very tricky the fact that they could take care of that is just I don't know the the engineering behind the",
    "start": "10232939",
    "end": "10238880"
  },
  {
    "text": "scenes must be super difficult both on the computer infrastructure and the software a lot of internal sort of",
    "start": "10238880",
    "end": "10246160"
  },
  {
    "text": "hand-wringing about things like that but the the product itself always worked",
    "start": "10246160",
    "end": "10252500"
  },
  {
    "text": "very smoothly yeah it does but there's probably a lot of lessons to that you can have a lot of turmoil inside on the",
    "start": "10252500",
    "end": "10259160"
  },
  {
    "text": "engineering side but If the product is good the product is good and don't maybe don't mess with that either it is you",
    "start": "10259160",
    "end": "10266000"
  },
  {
    "text": "know when it's good keep it's like with Google focus on the search and the ads",
    "start": "10266000",
    "end": "10271300"
  },
  {
    "text": "right like and the money will come yeah and make sure that's done extremely well",
    "start": "10271300",
    "end": "10276439"
  },
  {
    "text": "and don't forget what you do extremely well and in what ways do you provide value and happiness to the world make",
    "start": "10276439",
    "end": "10284300"
  },
  {
    "text": "sure you do that well um is there something else to say about Google and Microsoft Microsoft has said",
    "start": "10284300",
    "end": "10290840"
  },
  {
    "text": "a very fascinating shift recently with the new CEO uh what you know recent CEO",
    "start": "10290840",
    "end": "10297500"
  },
  {
    "text": "with purchasing GitHub embracing open source culture embracing the developer culture is pretty",
    "start": "10297500",
    "end": "10303859"
  },
  {
    "text": "interesting to see that's like why I joined Microsoft I mean after after retiring and thinking",
    "start": "10303859",
    "end": "10310520"
  },
  {
    "text": "that I would stay retired for the rest of my life which of course was a ridiculous thought but that I was I was",
    "start": "10310520",
    "end": "10317620"
  },
  {
    "text": "I was done working for a bit and then the pandemic made me realize that work work can also provide a source of",
    "start": "10317620",
    "end": "10325580"
  },
  {
    "text": "fulfillment keep you keep you out of trouble uh Microsoft is a very interesting",
    "start": "10325580",
    "end": "10333680"
  },
  {
    "text": "company because it has this incredible very long and varied history and this",
    "start": "10333680",
    "end": "10342740"
  },
  {
    "text": "amazing catalog of products that many of which also date way back",
    "start": "10342740",
    "end": "10349760"
  },
  {
    "text": "I mean I've been been talking to a bunch of",
    "start": "10349760",
    "end": "10355040"
  },
  {
    "text": "excel people lately and Excel is like 35 years old yeah and they can still read",
    "start": "10355040",
    "end": "10361520"
  },
  {
    "text": "spreadsheets that that they might find on an old floppy Drive",
    "start": "10361520",
    "end": "10368200"
  },
  {
    "text": "yeah there's man they built so many incredible tools through the years Excel one of the great shames of my life",
    "start": "10368899",
    "end": "10378399"
  },
  {
    "text": "is that I've never learned how to use Excel well I mean it just always felt",
    "start": "10378399",
    "end": "10383479"
  },
  {
    "text": "like so many features are there it's similar with ideas like pie charm",
    "start": "10383479",
    "end": "10388520"
  },
  {
    "text": "it feels like I I converge quickly to the dumbest way to use a thing to get the job done when clearly there's so",
    "start": "10388520",
    "end": "10395479"
  },
  {
    "text": "much more power at your fingertips yeah but there's I I do think there's probably expert users of Excel and oh",
    "start": "10395479",
    "end": "10402920"
  },
  {
    "text": "that Excel is a cash cow actually oh it actually brings in money oh yeah a lot",
    "start": "10402920",
    "end": "10409220"
  },
  {
    "text": "of the engineering sort of if you look deep inside Excel",
    "start": "10409220",
    "end": "10414319"
  },
  {
    "text": "there's some very good engineering very very impressive stuff",
    "start": "10414319",
    "end": "10419600"
  },
  {
    "text": "okay now I need to definitely learn it's a little better I had issues because I'm a keyboard person so I had issues coming",
    "start": "10419600",
    "end": "10427100"
  },
  {
    "text": "up with shortcuts I mean Microsoft sometimes uh it's changed over the years but sometimes they kind of want to make",
    "start": "10427100",
    "end": "10433160"
  },
  {
    "text": "things easier for you on the surface and therefore make it harder for like uh",
    "start": "10433160",
    "end": "10440120"
  },
  {
    "text": "people that like to have shortcuts and all that kind of stuff to optimize their workflow now Excel is probably people",
    "start": "10440120",
    "end": "10446779"
  },
  {
    "text": "are probably yelling at me and it's like no Excel probably has a lot of ways to optimize work in fact I keep discovering",
    "start": "10446779",
    "end": "10453140"
  },
  {
    "text": "that there are many features in Excel that only exists at keyboard shortcuts",
    "start": "10453140",
    "end": "10459100"
  },
  {
    "text": "yeah that's the sense I have and now like I'm embarrassed that it's just you just have to know what they are yeah",
    "start": "10459100",
    "end": "10465620"
  },
  {
    "text": "that's that's like there's no logic or or Reason to the assignment of the",
    "start": "10465620",
    "end": "10471800"
  },
  {
    "text": "keyboard shortcuts because they they go back even longer than 35 years",
    "start": "10471800",
    "end": "10477080"
  },
  {
    "text": "can you maybe comment about Sachin Adela and how hard it is for CEO to sort of",
    "start": "10477080",
    "end": "10482420"
  },
  {
    "text": "pivot a company towards open source or develop a culture is there something you could see about like how what's the role",
    "start": "10482420",
    "end": "10489020"
  },
  {
    "text": "of leadership in such a pivot and definition of a new vision I've never met him but uh I hear",
    "start": "10489020",
    "end": "10499580"
  },
  {
    "text": "he's just a really sharp thinker",
    "start": "10499580",
    "end": "10504800"
  },
  {
    "text": "but he also has an incredible business sense he took the organization that had very",
    "start": "10504800",
    "end": "10511760"
  },
  {
    "text": "solid pieces but that was also struggling",
    "start": "10511760",
    "end": "10516819"
  },
  {
    "text": "with all sorts of shameful things especially the Steve Ballmer time",
    "start": "10516819",
    "end": "10523460"
  },
  {
    "text": "I imagine in part through his personal charm and thinking and of course the the",
    "start": "10523460",
    "end": "10529399"
  },
  {
    "text": "great trust that that the the rest of the leadership has in him he managed to to Really Turn the company around and",
    "start": "10529399",
    "end": "10536660"
  },
  {
    "text": "sort of change it from from openly hostile to",
    "start": "10536660",
    "end": "10541760"
  },
  {
    "text": "open source to to actively embracing open source and",
    "start": "10541760",
    "end": "10547340"
  },
  {
    "text": "that doesn't mean that suddenly Excel is going to go open source but that means that there's room for a product like vs",
    "start": "10547340",
    "end": "10554359"
  },
  {
    "text": "code which is open source yeah that's fascinating it gives me faith that large companies with good",
    "start": "10554359",
    "end": "10561920"
  },
  {
    "text": "leadership can grow can expand can change and pivot and so on develop",
    "start": "10561920",
    "end": "10567020"
  },
  {
    "text": "because it gets harder and harder as the company gets large um you wrote a blog post in response to",
    "start": "10567020",
    "end": "10573620"
  },
  {
    "start": "10571000",
    "end": "10963000"
  },
  {
    "text": "a person looking for advice about whether with the Cs degree to choose a nine to five job or to become an",
    "start": "10573620",
    "end": "10580460"
  },
  {
    "text": "entrepreneur it's an interesting question if you just think from first principles right now somebody has took a",
    "start": "10580460",
    "end": "10588020"
  },
  {
    "text": "few years in programming has loved software engineering in some sense creating python is an entrepreneurial",
    "start": "10588020",
    "end": "10594859"
  },
  {
    "text": "endeavor that's a choice that a lot of people that are good programmers have to make",
    "start": "10594859",
    "end": "10600620"
  },
  {
    "text": "do I work for a big company or do I create something new",
    "start": "10600620",
    "end": "10607359"
  },
  {
    "text": "or you can work for a big company and create something new there",
    "start": "10607880",
    "end": "10613220"
  },
  {
    "text": "oh inside the yeah I mean big companies have individuals who create new stuff",
    "start": "10613220",
    "end": "10620439"
  },
  {
    "text": "that eventually grows big all the time and if you're the person that creates a",
    "start": "10620439",
    "end": "10625939"
  },
  {
    "text": "new thing and grows big you you'll have a chance to move up quickly in the company to run that thing",
    "start": "10625939",
    "end": "10632300"
  },
  {
    "text": "if that's your aspiration what what what can also happen is that",
    "start": "10632300",
    "end": "10637340"
  },
  {
    "text": "someone is brilliant engineer and sort of builds a great first version of a",
    "start": "10637340",
    "end": "10643819"
  },
  {
    "text": "product and has no aspirations",
    "start": "10643819",
    "end": "10648920"
  },
  {
    "text": "to then become a manager and grow the team from five people to 20 people to",
    "start": "10648920",
    "end": "10654080"
  },
  {
    "text": "100 people to a thousand people and be in charge of hiring and meetings and",
    "start": "10654080",
    "end": "10660979"
  },
  {
    "text": "they move on to inventing another crazy thing inside the",
    "start": "10660979",
    "end": "10666080"
  },
  {
    "text": "same company or sometimes they they found a startup or they moved to a",
    "start": "10666080",
    "end": "10673220"
  },
  {
    "text": "different great large or small company there's all sorts of models",
    "start": "10673220",
    "end": "10678380"
  },
  {
    "text": "and sometimes people sort of do have this whole trajectory from engineer",
    "start": "10678380",
    "end": "10684620"
  },
  {
    "text": "buckling down writing code not nine to five but more like",
    "start": "10684620",
    "end": "10691279"
  },
  {
    "text": "noon till midnight seven days a week and coming up with a product and sort of",
    "start": "10691279",
    "end": "10701420"
  },
  {
    "text": "staying in charge I mean if you take drew a house and dropbox's founder he is",
    "start": "10701420",
    "end": "10707840"
  },
  {
    "text": "still the CEO and at least when when I was there he had not checked out or anything he was",
    "start": "10707840",
    "end": "10715100"
  },
  {
    "text": "he was good CEO but he had started out as the technical inventor or co-inventor",
    "start": "10715100",
    "end": "10722359"
  },
  {
    "text": "yeah and so he was someone who I don't know if he always aspired that I",
    "start": "10722359",
    "end": "10729319"
  },
  {
    "text": "think when when he was 16 he already started a company so maybe maybe he did but he sort of",
    "start": "10729319",
    "end": "10735859"
  },
  {
    "text": "it turned out that that he had he did have the the personal sort of skill set",
    "start": "10735859",
    "end": "10742660"
  },
  {
    "text": "needed to to grow and and stay on top and other people sort of",
    "start": "10742660",
    "end": "10748939"
  },
  {
    "text": "our brilliant engineers and horrible at management I I count myself at least in",
    "start": "10748939",
    "end": "10754939"
  },
  {
    "text": "the second category so you're you're your first love and still your love is to be the quote unquote individual",
    "start": "10754939",
    "end": "10761660"
  },
  {
    "text": "contributor so the programmer do you have advice for a programming",
    "start": "10761660",
    "end": "10769160"
  },
  {
    "text": "beginner on How to Learn Python the right way",
    "start": "10769160",
    "end": "10774340"
  },
  {
    "text": "find something you actually want to do with it",
    "start": "10776060",
    "end": "10781819"
  },
  {
    "text": "if you say I want to learn skill X that's not enough motivation you need to",
    "start": "10781819",
    "end": "10789560"
  },
  {
    "text": "pick something and it can be it can be a crazy problem you want to solve it can be completely",
    "start": "10789560",
    "end": "10796520"
  },
  {
    "text": "unrealistic but something that that challenges you",
    "start": "10796520",
    "end": "10803720"
  },
  {
    "text": "in into actually learning coding in in some language",
    "start": "10803720",
    "end": "10810580"
  },
  {
    "text": "and there's so many projects out there you can look for like that that doesn't have to be some big ambitious thing it",
    "start": "10810580",
    "end": "10815960"
  },
  {
    "text": "could be writing a small bot if you're into social media you can write a read about or a Twitter bot or uh or some",
    "start": "10815960",
    "end": "10824359"
  },
  {
    "text": "aspect of automating some as something that you do every single day processing files all that kind of stuff nowadays",
    "start": "10824359",
    "end": "10831319"
  },
  {
    "text": "you can take machine learning components and and sort of plug those things together so cool stuff",
    "start": "10831319",
    "end": "10840020"
  },
  {
    "text": "with them so that's actually a really good example so if you're interested in machine learning the state of machine learning is such that like a a tutorial",
    "start": "10840020",
    "end": "10847939"
  },
  {
    "text": "that takes an hour can get you to start using uh pre-trained models to do",
    "start": "10847939",
    "end": "10853460"
  },
  {
    "text": "something super cool and that's a good way to Learn Python because you learn just enough to run this model and that's",
    "start": "10853460",
    "end": "10859040"
  },
  {
    "text": "like a sneaky way to get get in there to figure out how to import stuff how to",
    "start": "10859040",
    "end": "10864819"
  },
  {
    "text": "write basic i o how to run functions and I'm not sure if",
    "start": "10864819",
    "end": "10870859"
  },
  {
    "text": "it's the best way to learn the basics of python but it could be nice to just get fall in love first and then figure out",
    "start": "10870859",
    "end": "10876740"
  },
  {
    "text": "the basics right yeah you can't expect to Learn Python from a one hour video",
    "start": "10876740",
    "end": "10882640"
  },
  {
    "text": "recording blanking out on the name of of someone who",
    "start": "10882640",
    "end": "10888500"
  },
  {
    "text": "who wrote a very funny blog post where he said I see all these ads for things like",
    "start": "10888500",
    "end": "10896540"
  },
  {
    "text": "Learn Python in 10 days or so and he said the goal should be Learn Python in",
    "start": "10896540",
    "end": "10903979"
  },
  {
    "text": "10 years that's hilarious but I completely disagree with that I think",
    "start": "10903979",
    "end": "10909620"
  },
  {
    "text": "the criticism behind that is that the the places just like the blog post",
    "start": "10909620",
    "end": "10914840"
  },
  {
    "text": "from earlier the places that tell you you learn python in five minutes or 10 minutes they're actually usually really",
    "start": "10914840",
    "end": "10920420"
  },
  {
    "text": "bad tutorials so the thing is I do believe that you can learn a thing",
    "start": "10920420",
    "end": "10926479"
  },
  {
    "text": "in an hour to like get some interesting quick like it hooks you I mean this but",
    "start": "10926479",
    "end": "10933020"
  },
  {
    "text": "it just takes a tremendous amount of skill to be that kind of educator Richard Feynman was able to condense a",
    "start": "10933020",
    "end": "10938359"
  },
  {
    "text": "lot of ideas and physics in a very short amount of time but that takes a deep deep understanding and so yes of course",
    "start": "10938359",
    "end": "10944300"
  },
  {
    "text": "the actual I think the 10 the 10 years is about the experience the pain along",
    "start": "10944300",
    "end": "10950720"
  },
  {
    "text": "the way and there's something you have to practice you can memorize the syntax",
    "start": "10950720",
    "end": "10956080"
  },
  {
    "text": "but well I couldn't but maybe maybe someone else can but that doesn't make you a coder yeah actually coding has",
    "start": "10956080",
    "end": "10964580"
  },
  {
    "start": "10963000",
    "end": "11170000"
  },
  {
    "text": "changed in fascinating ways because so much of uh coding is copying pasting",
    "start": "10964580",
    "end": "10969620"
  },
  {
    "text": "from stack Overflow and then adjusting which is another way of coding and I don't want to talk down to that kind of",
    "start": "10969620",
    "end": "10975740"
  },
  {
    "text": "style of coding because it's kind of nicely efficient but you know where that is going",
    "start": "10975740",
    "end": "10982240"
  },
  {
    "text": "I use it every day and it really yeah it writes a lot of code for me and usually",
    "start": "10985779",
    "end": "10992660"
  },
  {
    "text": "it's slightly wrong but it still saves me typing because all I have to do is like change one word in a line of text",
    "start": "10992660",
    "end": "11001000"
  },
  {
    "text": "that otherwise it it generated perfectly and like how many times are you looking",
    "start": "11001000",
    "end": "11007300"
  },
  {
    "text": "for like oh what was I doing this morning I was looking for a begin marker and I look was looking for an end marker",
    "start": "11007300",
    "end": "11013720"
  },
  {
    "text": "and so begin is blah blah blah search for begin this is",
    "start": "11013720",
    "end": "11021640"
  },
  {
    "text": "the begin token and then the next line I type e and it it completes the whole",
    "start": "11021640",
    "end": "11028899"
  },
  {
    "text": "line with end instead of begin that's a very simple example sometimes it it sort",
    "start": "11028899",
    "end": "11034120"
  },
  {
    "text": "of if I name my function right it writes a 5 or 10 line function",
    "start": "11034120",
    "end": "11040060"
  },
  {
    "text": "and you know python enough to very quickly then detect the issues so it",
    "start": "11040060",
    "end": "11047140"
  },
  {
    "text": "becomes a really good dance partner then it doesn't save me a lot of thinking but since I'm a poor typist I'm very much",
    "start": "11047140",
    "end": "11054279"
  },
  {
    "text": "appreciative of all the all the typing it does for me",
    "start": "11054279",
    "end": "11059740"
  },
  {
    "text": "much better actually than the the previous generation of suggestions that are also still built in vs code",
    "start": "11059740",
    "end": "11067479"
  },
  {
    "text": "uh where when you hit like a DOT it it tries to guess what the type is of",
    "start": "11067479",
    "end": "11074200"
  },
  {
    "text": "the variable to the left of the dot and then it gives you a list a pop-down menu of what the attributes of that object",
    "start": "11074200",
    "end": "11081700"
  },
  {
    "text": "are but copilot is much much smoother than that well it's fascinating to hear that you use GitHub copilot uh do you",
    "start": "11081700",
    "end": "11089800"
  },
  {
    "text": "think do you worry about the future of that um did the automatic code generation",
    "start": "11089800",
    "end": "11096279"
  },
  {
    "text": "the increasing amount of that kind of capability are programmers",
    "start": "11096279",
    "end": "11101560"
  },
  {
    "text": "jobs threatened or is there still a significant role for human our programmers jobs threatened by the",
    "start": "11101560",
    "end": "11107859"
  },
  {
    "text": "existence of stack overflow I don't think so it helps you take care",
    "start": "11107859",
    "end": "11113560"
  },
  {
    "text": "of the boring stuff and you shouldn't try to use it to do something that you",
    "start": "11113560",
    "end": "11119920"
  },
  {
    "text": "have no way of understanding what you're doing yet a tool like that is always best when the",
    "start": "11119920",
    "end": "11128319"
  },
  {
    "text": "question you're asking is please remind me of how I do this which I",
    "start": "11128319",
    "end": "11134620"
  },
  {
    "text": "I could do I could look up how to do it but right now I've forgotten whether the",
    "start": "11134620",
    "end": "11141700"
  },
  {
    "text": "method is called Foo or bar or how you what the shape of the API is does it use",
    "start": "11141700",
    "end": "11147880"
  },
  {
    "text": "a builder object or a Constructor or a factory or",
    "start": "11147880",
    "end": "11153939"
  },
  {
    "text": "uh something else and what are the parameters it serves that role it's like",
    "start": "11153939",
    "end": "11160359"
  },
  {
    "text": "a great assistant but the creative work of sort of deciding what you want what you want the",
    "start": "11160359",
    "end": "11166600"
  },
  {
    "text": "code to do is is totally yours what do you think is the future of",
    "start": "11166600",
    "end": "11172000"
  },
  {
    "start": "11170000",
    "end": "11751000"
  },
  {
    "text": "python in the next 10 20 50 years 100 years you look forward you ever think about you ever imagine a future",
    "start": "11172000",
    "end": "11179260"
  },
  {
    "text": "of human civilization or living inside the metaverse on Mars",
    "start": "11179260",
    "end": "11185380"
  },
  {
    "text": "humanoid robots everywhere what part does python play in that it'll eventually become sort of a legacy",
    "start": "11185380",
    "end": "11193540"
  },
  {
    "text": "language uh that plays an important role but that that most people have never",
    "start": "11193540",
    "end": "11198640"
  },
  {
    "text": "heard of and uh don't need to know about just like all kinds of",
    "start": "11198640",
    "end": "11205120"
  },
  {
    "text": "basic structures in in biology like mitochondria",
    "start": "11205120",
    "end": "11211840"
  },
  {
    "text": "so it permeates all of life all of digital life but people just build on",
    "start": "11211840",
    "end": "11216880"
  },
  {
    "text": "top of it and they only know the stuff that's on top of it yeah you guys you build layers of",
    "start": "11216880",
    "end": "11222399"
  },
  {
    "text": "abstractions I mean most programmers nowadays rarely need to do binary arithmetic",
    "start": "11222399",
    "end": "11230319"
  },
  {
    "text": "right yeah or even think about it or even",
    "start": "11230319",
    "end": "11236020"
  },
  {
    "text": "learn about it or they could go quite far without knowing I started",
    "start": "11236020",
    "end": "11241380"
  },
  {
    "text": "building little digital circuits out of nand gates that I built myself with",
    "start": "11241380",
    "end": "11247359"
  },
  {
    "text": "transistors and resistors so I'd sort of I feel very blessed that",
    "start": "11247359",
    "end": "11253359"
  },
  {
    "text": "with with that start when I was a teenager I I learned some of the basic at least",
    "start": "11253359",
    "end": "11261220"
  },
  {
    "text": "Concepts that that go into building a computer",
    "start": "11261220",
    "end": "11266260"
  },
  {
    "text": "and I sort of every part I have some understanding what",
    "start": "11266260",
    "end": "11273520"
  },
  {
    "text": "what it's for and why it's there and how it works and I can forget about all that",
    "start": "11273520",
    "end": "11279279"
  },
  {
    "text": "most of the time but I sort of I enjoy knowing oh if you go deeper you",
    "start": "11279279",
    "end": "11284979"
  },
  {
    "text": "at some point you get to uh nand Gates and have others and shift registers and",
    "start": "11284979",
    "end": "11293020"
  },
  {
    "text": "when it comes to the point of how do you how do you actually make a chip out of silicon I have no idea that's just magic",
    "start": "11293020",
    "end": "11299680"
  },
  {
    "text": "to me but you enjoy knowing that you can walk a while towards the lower and lower",
    "start": "11299680",
    "end": "11305500"
  },
  {
    "text": "layers but you don't need to it's nice the other day as a sort of",
    "start": "11305500",
    "end": "11310960"
  },
  {
    "text": "a mental exercise I was trying to figure out if I could build a",
    "start": "11310960",
    "end": "11318358"
  },
  {
    "text": "a flip-flop circuit out of uh relays it was just sort of",
    "start": "11318760",
    "end": "11325359"
  },
  {
    "text": "trying to remember oh how does it really relay work yeah there's like this",
    "start": "11325359",
    "end": "11330580"
  },
  {
    "text": "electromagnetic force that pulls a switch open or shut",
    "start": "11330580",
    "end": "11336120"
  },
  {
    "text": "uh and you can have have like it can open one switch and another shut another",
    "start": "11336120",
    "end": "11341680"
  },
  {
    "text": "and uh you can have multiple contacts that go at once and how many relays do I",
    "start": "11341680",
    "end": "11348819"
  },
  {
    "text": "really need to sort of represent one bit of information can really just feed on",
    "start": "11348819",
    "end": "11354100"
  },
  {
    "text": "itself there was I don't think I I got to the final solution but it was fun",
    "start": "11354100",
    "end": "11359260"
  },
  {
    "text": "that I I could still do a little bit of problem solving and thinking at that level",
    "start": "11359260",
    "end": "11366819"
  },
  {
    "text": "and it's cool how we build on top of each other so there's people that are just you you stood on the shoulders of",
    "start": "11366819",
    "end": "11373180"
  },
  {
    "text": "giants and there's others will stand on your shoulders and it's it's a giant beautiful hire yeah I feel I sort of",
    "start": "11373180",
    "end": "11379720"
  },
  {
    "text": "cover covered this middle layer of the technology stack where and sort of",
    "start": "11379720",
    "end": "11385359"
  },
  {
    "text": "Peters out glow the the level of of nand gates",
    "start": "11385359",
    "end": "11390939"
  },
  {
    "text": "and at the at the top I sort of I lose track when it gets to machine learning",
    "start": "11390939",
    "end": "11396300"
  },
  {
    "text": "and then eventually the machine learning will build higher and higher layers that will help us understand the lowest layer",
    "start": "11396300",
    "end": "11403120"
  },
  {
    "text": "of the physics and thereby the universe figures out how",
    "start": "11403120",
    "end": "11408220"
  },
  {
    "text": "it itself Works maybe maybe not yeah I did I mean it's it's possible I",
    "start": "11408220",
    "end": "11415300"
  },
  {
    "text": "mean if you think of human consciousness if that's even the right concept",
    "start": "11415300",
    "end": "11421720"
  },
  {
    "text": "it's it's interesting that that sort of we have this super parallel brain that",
    "start": "11421720",
    "end": "11427840"
  },
  {
    "text": "does all these incredible parallel operations like image recognition",
    "start": "11427840",
    "end": "11433300"
  },
  {
    "text": "I recognize your face does you huge amount of processing that goes on in",
    "start": "11433300",
    "end": "11439540"
  },
  {
    "text": "parallel there's lots of nerves between my eyes and my brain and the brain does a whole bunch of",
    "start": "11439540",
    "end": "11445120"
  },
  {
    "text": "stuff all at once because it's actually a really slow circuits but there are many of them that all work together",
    "start": "11445120",
    "end": "11452380"
  },
  {
    "text": "on the other hand when I'm speaking everything is completely sequential",
    "start": "11452380",
    "end": "11458260"
  },
  {
    "text": "I I have to sort of string words together one at a time",
    "start": "11458260",
    "end": "11463479"
  },
  {
    "text": "and when I'm thinking about stuff when I'm when I'm understanding the world",
    "start": "11463479",
    "end": "11469840"
  },
  {
    "text": "I'm also thinking of everything like one step at a time",
    "start": "11469840",
    "end": "11475479"
  },
  {
    "text": "and so we we've we've sort of we've got all this this incredible",
    "start": "11475479",
    "end": "11480779"
  },
  {
    "text": "parallel circuitry in our brains and eventually we use that to simulate a",
    "start": "11480779",
    "end": "11487240"
  },
  {
    "text": "single threaded much much higher level interpreter",
    "start": "11487240",
    "end": "11493960"
  },
  {
    "text": "uh it's exactly I mean that's the illusion of it that's the illusion of it for us that it's a single",
    "start": "11494260",
    "end": "11500439"
  },
  {
    "text": "sequential set of thoughts and all of that came from a single cell through the",
    "start": "11500439",
    "end": "11505779"
  },
  {
    "text": "process of embryogenesis so DNA is the code",
    "start": "11505779",
    "end": "11510819"
  },
  {
    "text": "DNA holds the entirety of the code the information and how to use that information to build up an organism the",
    "start": "11510819",
    "end": "11518140"
  },
  {
    "text": "entire like the arms how is it built yeah the brain it's so it's you don't buy a computer",
    "start": "11518140",
    "end": "11525100"
  },
  {
    "text": "you buy like uh you buy a a seed a diagram and then you plant the computer",
    "start": "11525100",
    "end": "11531359"
  },
  {
    "text": "and it builds itself in almost the same way and then does the computation and",
    "start": "11531359",
    "end": "11537939"
  },
  {
    "text": "then is uh eventually dies it gets stale but gives birth to Young",
    "start": "11537939",
    "end": "11544300"
  },
  {
    "text": "computers more and more and gives them lessons but they figure stuff out on their own and",
    "start": "11544300",
    "end": "11549700"
  },
  {
    "text": "over time it goes on that way and those computers when they go to college try to",
    "start": "11549700",
    "end": "11555520"
  },
  {
    "text": "figure out how to program and they built their own little computers they're increasingly more intelligent",
    "start": "11555520",
    "end": "11560560"
  },
  {
    "text": "increasingly higher and higher levels of abstractions isn't it interesting that",
    "start": "11560560",
    "end": "11565660"
  },
  {
    "text": "that you sort of you see the same thing appearing at different levels though",
    "start": "11565660",
    "end": "11571359"
  },
  {
    "text": "because you have like cells that that create new cells",
    "start": "11571359",
    "end": "11579160"
  },
  {
    "text": "and and eventually that builds a whole organism but then the animal or the",
    "start": "11579160",
    "end": "11584200"
  },
  {
    "text": "plant or the human has its own mechanism of replication",
    "start": "11584200",
    "end": "11590920"
  },
  {
    "text": "that that is is sort of connected in a very complicated way to the mechanism of",
    "start": "11590920",
    "end": "11598000"
  },
  {
    "text": "replication of the cells and then if you if you look inside the cell if you see",
    "start": "11598000",
    "end": "11603279"
  },
  {
    "text": "how DNA and proteins are are connected then there is yet another completely",
    "start": "11603279",
    "end": "11608800"
  },
  {
    "text": "different mechanism whereby proteins are mass produced",
    "start": "11608800",
    "end": "11614399"
  },
  {
    "text": "using enzymes and and and a little bit of code from from DNA and of course",
    "start": "11614399",
    "end": "11620319"
  },
  {
    "text": "viruses break into it at that level and while the mechanisms might be",
    "start": "11620319",
    "end": "11626500"
  },
  {
    "text": "different it seems like the nature of the mechanism is the same and it carries",
    "start": "11626500",
    "end": "11632560"
  },
  {
    "text": "across natural languages and programming languages humans",
    "start": "11632560",
    "end": "11639100"
  },
  {
    "text": "uh maybe even human civilizations or intelligent civilizations and then all the way down to uh the",
    "start": "11639100",
    "end": "11646540"
  },
  {
    "text": "single cell organism it is it is fascinating to see what abstraction levels are built on top of individual",
    "start": "11646540",
    "end": "11654460"
  },
  {
    "text": "humans yeah and how you have like whole societies",
    "start": "11654460",
    "end": "11659740"
  },
  {
    "text": "that that sort of have a similar self-preservation",
    "start": "11659740",
    "end": "11665260"
  },
  {
    "text": "I don't know what it is Instinct nature abstraction as the individuals have and the cells",
    "start": "11665260",
    "end": "11673120"
  },
  {
    "text": "have and they self-replicate and breed in different ways it's hard for us humans to introspect it because we were",
    "start": "11673120",
    "end": "11679720"
  },
  {
    "text": "very focused on our particular layer of abstraction but from an alien perspective looking on Earth they'll",
    "start": "11679720",
    "end": "11686340"
  },
  {
    "text": "they'll probably see the higher level organism of human civilization",
    "start": "11686340",
    "end": "11692560"
  },
  {
    "text": "as part of this bigger organism of life on Earth itself in fact that could be an organism just alone just life life life",
    "start": "11692560",
    "end": "11699180"
  },
  {
    "text": "on Earth uh this has been a wild both",
    "start": "11699180",
    "end": "11704380"
  },
  {
    "text": "philosophical and Technical conversation Guido you're you're an amazing human being you're you're gracious enough to",
    "start": "11704380",
    "end": "11710800"
  },
  {
    "text": "talk to me when I was first doing this podcast or one of the earliest first people I've talked to uh somebody I",
    "start": "11710800",
    "end": "11717460"
  },
  {
    "text": "admired for a long time it's just a huge honor that you did it at that time and you do it again you're awesome thank you",
    "start": "11717460",
    "end": "11722740"
  },
  {
    "text": "Lex thanks for listening to this conversation with Guido Ben Rossum to support this podcast please check out",
    "start": "11722740",
    "end": "11729279"
  },
  {
    "text": "our sponsors in the description and now let me leave you some words from Oscar Wilde experience is the name that",
    "start": "11729279",
    "end": "11736720"
  },
  {
    "text": "everyone gives to their mistakes thank you for listening and hope to see you next time",
    "start": "11736720",
    "end": "11743818"
  }
]