[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": "the following is a conversation with BR install stroke he's the creator of C++",
    "start": "60",
    "end": "5210"
  },
  {
    "text": "programming language that after 40 years is still one of the most popular and powerful languages in the world it's",
    "start": "5210",
    "end": "12690"
  },
  {
    "text": "focused on fast stable robust code underlies many of the biggest systems in the world that we have come to rely on",
    "start": "12690",
    "end": "19260"
  },
  {
    "text": "as a society if you're watching this on YouTube for example many of the critical backend components of YouTube are",
    "start": "19260",
    "end": "26039"
  },
  {
    "text": "written in C++ same goes for Google Facebook Amazon Twitter most Microsoft",
    "start": "26039",
    "end": "32160"
  },
  {
    "text": "applications Adobe applications most database systems and most physical",
    "start": "32160",
    "end": "37500"
  },
  {
    "text": "systems that operate in the real world like cars robots rockets that launches",
    "start": "37500",
    "end": "42570"
  },
  {
    "text": "into space and one day when landis on Mars C++ also happens to be the language",
    "start": "42570",
    "end": "49350"
  },
  {
    "text": "that I used more than any other in my life I've written several hundred thousand lines of C++ source code of",
    "start": "49350",
    "end": "56699"
  },
  {
    "text": "course lines of source code don't mean much but they do give hints of my personal journey through the world of",
    "start": "56699",
    "end": "63090"
  },
  {
    "text": "software I've enjoyed watching the development of C++ as a programming language leading up to the big update in",
    "start": "63090",
    "end": "70110"
  },
  {
    "text": "a standard in 2011 and those that followed in 1417 and told me the new C++",
    "start": "70110",
    "end": "76979"
  },
  {
    "text": "20 standard hopefully coming out next year this is the artificial intelligence",
    "start": "76979",
    "end": "82799"
  },
  {
    "text": "podcast if you enjoy it subscribe I knew to give it five stars and iTunes",
    "start": "82799",
    "end": "87840"
  },
  {
    "text": "supported on patreon or simply connect with me on Twitter Alex Friedman spelled Fri D ma a.m. and now here's my",
    "start": "87840",
    "end": "96270"
  },
  {
    "text": "conversation with Bjorn straw stroke what was the first program you've ever",
    "start": "96270",
    "end": "102390"
  },
  {
    "start": "100000",
    "end": "138000"
  },
  {
    "text": "written do you remember it was my second year in university first year of",
    "start": "102390",
    "end": "108600"
  },
  {
    "text": "computer science and it was an alcohol 60 I calculated the shape of super lips",
    "start": "108600",
    "end": "117450"
  },
  {
    "text": "and then connected points on the on the perimeter creating star patterns it was with a",
    "start": "117450",
    "end": "126320"
  },
  {
    "text": "with a wedding on paper printer and I",
    "start": "126320",
    "end": "131970"
  },
  {
    "text": "was in college university yeah yeah I learned to program the second year in university and what was the first",
    "start": "131970",
    "end": "139410"
  },
  {
    "start": "138000",
    "end": "261000"
  },
  {
    "text": "programming language if I may ask it this way that you fell in love with I I",
    "start": "139410",
    "end": "146760"
  },
  {
    "text": "think I'll call 60 and after that I remember I remember snowboard",
    "start": "146760",
    "end": "155819"
  },
  {
    "text": "I remember Fortran didn't fall in love with that I remember Pascal didn't fall",
    "start": "155819",
    "end": "161880"
  },
  {
    "text": "in love with that it all gotten away of me and then I just covered a simpler and",
    "start": "161880",
    "end": "168180"
  },
  {
    "text": "that was much more fun and from there I went to micro micro code so you were",
    "start": "168180",
    "end": "175320"
  },
  {
    "text": "drawn to the you found the low level stuff beautiful I went through a lot of",
    "start": "175320",
    "end": "183000"
  },
  {
    "text": "languages and then I spent significant time in in a simpler and micro code that",
    "start": "183000",
    "end": "189780"
  },
  {
    "text": "was sort of the first really profitable things I paid for my Master's actually and then I discovered Simula which was",
    "start": "189780",
    "end": "197700"
  },
  {
    "text": "absolutely great Simula simulation of",
    "start": "197700",
    "end": "203549"
  },
  {
    "text": "Albert 60 done primarily for simulation but basically they invented up to Tory",
    "start": "203549",
    "end": "210090"
  },
  {
    "text": "into programming at inheritance and runtime polymorphism when they were while they were doing it and that was a",
    "start": "210090",
    "end": "220200"
  },
  {
    "text": "language that taught me that you could have the sort of the problems of a",
    "start": "220200",
    "end": "226590"
  },
  {
    "text": "program grow with size of the program rather than with the square of the size",
    "start": "226590",
    "end": "231780"
  },
  {
    "text": "of program that is you can actually module arise very nicely and that that that was",
    "start": "231780",
    "end": "239120"
  },
  {
    "text": "a surprise to me it was also a surprise to me that a stricter type system than",
    "start": "239120",
    "end": "245990"
  },
  {
    "text": "Pascal's was helpful whereas Pascal's type system got in my way all the time",
    "start": "245990",
    "end": "252280"
  },
  {
    "text": "so you need a strong type system to organize your code well which has to be",
    "start": "252280",
    "end": "259459"
  },
  {
    "text": "extensible and flexible let's get into the details a little bit what kind of if you remember what kind of type system to",
    "start": "259459",
    "end": "265730"
  },
  {
    "start": "261000",
    "end": "337000"
  },
  {
    "text": "Pascal have what type system typing system did the Algol 60 have basically",
    "start": "265730",
    "end": "271870"
  },
  {
    "text": "Pascal was sort of the simplest language that Niklaus yet could define that",
    "start": "271870",
    "end": "279260"
  },
  {
    "text": "served the needs of Niklaus Viet at the time and it has a sort of our highly",
    "start": "279260",
    "end": "286220"
  },
  {
    "text": "moral tone to it that is if you can say it in Pascal it's good and if you can't",
    "start": "286220",
    "end": "292610"
  },
  {
    "text": "it's not so good whereas Simula large is basically to build your",
    "start": "292610",
    "end": "301050"
  },
  {
    "text": "own type system so instead of trying to fit yourself into Niklaus pierce'sworld",
    "start": "301050",
    "end": "309290"
  },
  {
    "text": "Christ knew God's language and Orion dance language allowed you to build your",
    "start": "309290",
    "end": "315120"
  },
  {
    "text": "own so it's sort of close to the original idea of you you you build a",
    "start": "315120",
    "end": "322440"
  },
  {
    "text": "domain-specific language as a matter of fact what you build is a set of types",
    "start": "322440",
    "end": "328230"
  },
  {
    "text": "and relations among types that allows you to express something that suitable",
    "start": "328230",
    "end": "334470"
  },
  {
    "text": "for an application the when you say types the stuff you're saying has echoes",
    "start": "334470",
    "end": "339840"
  },
  {
    "text": "of object-oriented programming Kjetil they invented it every language that uses the word class for type is a",
    "start": "339840",
    "end": "349200"
  },
  {
    "text": "descendant of Simula directly or indirectly Christ knew gone orientale",
    "start": "349200",
    "end": "356820"
  },
  {
    "text": "were mathematicians and they didn't think in terms of type C but they",
    "start": "356820",
    "end": "364170"
  },
  {
    "text": "understood sets and classes of elements and so they caught their types classes",
    "start": "364170",
    "end": "370410"
  },
  {
    "text": "and basically in C++ as in similar classes are user defined type so can you",
    "start": "370410",
    "end": "379380"
  },
  {
    "start": "378000",
    "end": "614000"
  },
  {
    "text": "try the impossible task and give a brief history of programming languages from",
    "start": "379380",
    "end": "385260"
  },
  {
    "text": "your perspective so we started with Algol 60 Simula Pascal but that's just",
    "start": "385260",
    "end": "392040"
  },
  {
    "text": "the 60s and seven I can try the most sort of interesting and major",
    "start": "392040",
    "end": "399759"
  },
  {
    "text": "improvement of programming languages was Fortran the first Fortran because before",
    "start": "399759",
    "end": "406539"
  },
  {
    "text": "that all code was written for a specific machine and each specific machine had a",
    "start": "406539",
    "end": "411969"
  },
  {
    "text": "language a simply language or cross embro or some extension of that idea but",
    "start": "411969",
    "end": "420249"
  },
  {
    "text": "it you are writing for a specific machine in the term in the language of",
    "start": "420249",
    "end": "425259"
  },
  {
    "text": "that machine and parker's and his team at IBM built a",
    "start": "425259",
    "end": "432380"
  },
  {
    "text": "language that would allow you to to write what you really wanted that is you",
    "start": "432380",
    "end": "440090"
  },
  {
    "text": "can write it in a language that was natural for people now these people happen to be engineers and physicists so",
    "start": "440090",
    "end": "446600"
  },
  {
    "text": "the language I came out was somewhat unusual for the rest of the world but basically they said formula translation",
    "start": "446600",
    "end": "453020"
  },
  {
    "text": "because they wanted to have the mathematical formulas translated into the machine and as a side effect",
    "start": "453020",
    "end": "460630"
  },
  {
    "text": "they got portability because now they are writing in the terms that the humans",
    "start": "460630",
    "end": "467630"
  },
  {
    "text": "used and the way humans thought and then they had a program that translated it",
    "start": "467630",
    "end": "473630"
  },
  {
    "text": "into the machines needs and that was new and that was great and it's something to",
    "start": "473630",
    "end": "480200"
  },
  {
    "text": "remember we want to raise the language to the human level but we don't want to",
    "start": "480200",
    "end": "486920"
  },
  {
    "text": "lose the efficiency so and the last first step towards the human that was",
    "start": "486920",
    "end": "492800"
  },
  {
    "text": "the first step and of course they were very particular kind of humans business",
    "start": "492800",
    "end": "498500"
  },
  {
    "text": "people MIT is different so they got COBOL instead and etc etc and simular",
    "start": "498500",
    "end": "504530"
  },
  {
    "text": "came out no let's not go to simulate yet let's go to Al Gore Fortran didn't have",
    "start": "504530",
    "end": "512360"
  },
  {
    "text": "at the time the notions of not a precise",
    "start": "512360",
    "end": "517460"
  },
  {
    "text": "notion of type not a precise notion of scope not a set of translation phases",
    "start": "517460",
    "end": "526460"
  },
  {
    "text": "that was what we have today lexical since heck semantics it was sort",
    "start": "526460",
    "end": "532850"
  },
  {
    "text": "of a bit of a model in the early days but hey they're just done the biggest",
    "start": "532850",
    "end": "538300"
  },
  {
    "text": "breakthrough and history of programming right so you can't criticize them for",
    "start": "538300",
    "end": "543530"
  },
  {
    "text": "not having gotten all the technical details right so we got alcohol that was very pretty and most people in Commerce",
    "start": "543530",
    "end": "553730"
  },
  {
    "text": "and science considered it useless because it was not flexible enough and it wasn't efficient enough and etc etc",
    "start": "553730",
    "end": "562700"
  },
  {
    "text": "but that was the breakthrough from a technical point of view then similar",
    "start": "562700",
    "end": "568340"
  },
  {
    "text": "came along to make that idea more flexible and you could define your own",
    "start": "568340",
    "end": "573770"
  },
  {
    "text": "types and that's where where I got very interested first Nicole was the main",
    "start": "573770",
    "end": "581150"
  },
  {
    "text": "idea and behind Simula I was late 60s this was late 60s was a visiting",
    "start": "581150",
    "end": "587750"
  },
  {
    "text": "professor in Oz and so I learned object-oriented programming by sitting",
    "start": "587750",
    "end": "594230"
  },
  {
    "text": "around well in theory discussing with",
    "start": "594230",
    "end": "600070"
  },
  {
    "text": "with Christ Mughal but Kristin once you",
    "start": "600070",
    "end": "605390"
  },
  {
    "text": "get started and then full flow it's very hard to get a word in edgeways where you're just listed so it was great I",
    "start": "605390",
    "end": "613040"
  },
  {
    "text": "learned it from them not to romanticize the notion but it seems like a big leap to think about object-oriented",
    "start": "613040",
    "end": "619640"
  },
  {
    "start": "614000",
    "end": "800000"
  },
  {
    "text": "programming it's really a leap of abstraction it's yes and was that as big",
    "start": "619640",
    "end": "630050"
  },
  {
    "text": "and beautiful of a leap as it seems from now in retrospect I was in an obvious",
    "start": "630050",
    "end": "636050"
  },
  {
    "text": "one at the time it was not obvious and many people have tried to do something",
    "start": "636050",
    "end": "643670"
  },
  {
    "text": "like that and most people didn't come up with something as wonderful as similar lots",
    "start": "643670",
    "end": "650270"
  },
  {
    "text": "of people got their PhDs and made their careers out of forgetting about Simula",
    "start": "650270",
    "end": "656420"
  },
  {
    "text": "or never knowing it for me the key idea was basically I could get my own types",
    "start": "656420",
    "end": "661700"
  },
  {
    "text": "and that's the idea that goes for a lines of C++ where I can get better",
    "start": "661700",
    "end": "669920"
  },
  {
    "text": "types and more flexible types and more efficient types but it's still the fundamental idea when I want to write a",
    "start": "669920",
    "end": "676220"
  },
  {
    "text": "program I want to write it with my types that is appropriate to my problem and",
    "start": "676220",
    "end": "682640"
  },
  {
    "text": "under the constraints that I'm under with hardware software environment etc",
    "start": "682640",
    "end": "689090"
  },
  {
    "text": "and that's that's the key idea people picked up on",
    "start": "689090",
    "end": "695600"
  },
  {
    "text": "hierarchy is in the virtual functions and the inheritance and that was only",
    "start": "695600",
    "end": "702590"
  },
  {
    "text": "part of it it was an interesting and major part and still a major part and a",
    "start": "702590",
    "end": "708500"
  },
  {
    "text": "lot of graphic stuff but it was not the most fundamental it it was when you",
    "start": "708500",
    "end": "715190"
  },
  {
    "text": "wanted to relate one type to another you don't want the more to be independent that the classical example is that you",
    "start": "715190",
    "end": "723280"
  },
  {
    "text": "don't actually want to write city simulation with vehicles where you say",
    "start": "723280",
    "end": "731240"
  },
  {
    "text": "well if it's a buy signal to write the code for turning a bicycle to the left if it's a normal car turn right a normal",
    "start": "731240",
    "end": "738980"
  },
  {
    "text": "car way if it's a fire engine and right the fire engine way da da da da da you get these big case statements and",
    "start": "738980",
    "end": "745910"
  },
  {
    "text": "bunches of if statement and such instead you tell the other the base",
    "start": "745910",
    "end": "752120"
  },
  {
    "text": "class that that's the Viacom saying turn turn left the way you want to and this",
    "start": "752120",
    "end": "760790"
  },
  {
    "text": "is actually a real example they they used it to simulate and optimize the",
    "start": "760790",
    "end": "766630"
  },
  {
    "text": "emergency the emergency services for somewhere Norway",
    "start": "766630",
    "end": "773210"
  },
  {
    "text": "back in the 60s Wow so this was one of the early examples for why you needed",
    "start": "773210",
    "end": "779510"
  },
  {
    "text": "inheritance and and you needed runtime polymorphism because you wanted to",
    "start": "779510",
    "end": "787010"
  },
  {
    "text": "handle this set of vehicles in a manageable way you you you can't just",
    "start": "787010",
    "end": "794780"
  },
  {
    "text": "rewrite your code each time a new kind of vehicle comes along yeah that's a",
    "start": "794780",
    "end": "800420"
  },
  {
    "start": "800000",
    "end": "928000"
  },
  {
    "text": "beautiful powerful idea and of course that it stretches through your work who C++ as we'll talk about but I think you",
    "start": "800420",
    "end": "809090"
  },
  {
    "text": "structured it nicely what other breakthroughs came along in the history of programming languages",
    "start": "809090",
    "end": "815600"
  },
  {
    "text": "they if we were to tell the history in that way obviously I'm bitter telling",
    "start": "815600",
    "end": "821090"
  },
  {
    "text": "the part of the history that that is the path I'm on as opposed to all the path",
    "start": "821090",
    "end": "826490"
  },
  {
    "text": "yeah you skipped the hippy John McCarthy and Lisp or my favorite languages but listen what Lisp is not",
    "start": "826490",
    "end": "834440"
  },
  {
    "text": "one of my favorite language yes it's obviously important it's obviously interesting lots of people write code in",
    "start": "834440",
    "end": "841670"
  },
  {
    "text": "it and then they rewrite it into C or C++ when they want to go to production yes it's in the world",
    "start": "841670",
    "end": "849260"
  },
  {
    "text": "I met which are constrained by performance reliability issues",
    "start": "849260",
    "end": "858110"
  },
  {
    "text": "deployability cost of hardware I I don't",
    "start": "858110",
    "end": "863660"
  },
  {
    "text": "like things to be too dynamic it is really hard to write a piece of code",
    "start": "863660",
    "end": "869840"
  },
  {
    "text": "that's perfectly flexible that you can also deploy on a small computer and that",
    "start": "869840",
    "end": "876740"
  },
  {
    "text": "you can also put in say a telephone switch in Bogota what's the chance if",
    "start": "876740",
    "end": "882620"
  },
  {
    "text": "you get an error and you find yourself in the debugger that the telephone switch in pockets are on late Sunday",
    "start": "882620",
    "end": "888860"
  },
  {
    "text": "night has a programmer around right their chance is zero and so a lot of",
    "start": "888860",
    "end": "894800"
  },
  {
    "text": "things I think most about can't afford that flexibility and I'm quite aware",
    "start": "894800",
    "end": "902650"
  },
  {
    "text": "that maybe 70 80 percent of all code are",
    "start": "902650",
    "end": "908870"
  },
  {
    "text": "not under the kind of constraints I'm interested in but somebody has to do the",
    "start": "908870",
    "end": "914870"
  },
  {
    "text": "job I'm doing because you have to get from these high level flexible languages",
    "start": "914870",
    "end": "921140"
  },
  {
    "text": "to the hardware the stuff that lasts for 10 20 30 years is robust",
    "start": "921140",
    "end": "926930"
  },
  {
    "text": "yeah operates under very constrained conditions yes absolutely that's right and it's fascinating and beautiful in",
    "start": "926930",
    "end": "933470"
  },
  {
    "text": "its own way it's C++ is one of my favorite languages and so is Lisp",
    "start": "933470",
    "end": "939650"
  },
  {
    "text": "so I can I can embody two for different reasons as as a programmer I understand",
    "start": "939650",
    "end": "948380"
  },
  {
    "text": "why it is popular and I can see the beauty of the ideas and similarly with",
    "start": "948380",
    "end": "954500"
  },
  {
    "text": "this more talk it's just know this relative thank it",
    "start": "954500",
    "end": "960850"
  },
  {
    "text": "it's not as relevant in my world and by the way I distinguish between those and",
    "start": "960850",
    "end": "967689"
  },
  {
    "text": "the functional languages where I go to things like ml and Hesco different",
    "start": "967689",
    "end": "974110"
  },
  {
    "text": "different kind of languages they have a different kind of huge in there very interesting and I actually try to learn",
    "start": "974110",
    "end": "981939"
  },
  {
    "text": "from all the languages I encounter to see what is layer that would make",
    "start": "981939",
    "end": "989519"
  },
  {
    "text": "working on the kind of problems I'm interested in with the kind of constraints that that I'm interested in",
    "start": "989519",
    "end": "998230"
  },
  {
    "text": "what can actually be done better because we can surely do better than we do today",
    "start": "998230",
    "end": "1005299"
  },
  {
    "start": "1005000",
    "end": "1347000"
  },
  {
    "text": "you've you've said that it's good for any professional programmer to know at least five languages speaking about a",
    "start": "1005299",
    "end": "1012569"
  },
  {
    "text": "variety of languages that you've taken inspiration from and you've listed the",
    "start": "1012569",
    "end": "1018660"
  },
  {
    "text": "yours as being at least at the time C++ obviously Java Python Ruby and",
    "start": "1018660",
    "end": "1026069"
  },
  {
    "text": "JavaScript can you first of all update that list modify it if you don't have to",
    "start": "1026069",
    "end": "1032788"
  },
  {
    "text": "be constrained to just five but can you describe what you picked up also from",
    "start": "1032789",
    "end": "1039329"
  },
  {
    "text": "each of these languages how you see them as inspirations for even you're working",
    "start": "1039329",
    "end": "1044788"
  },
  {
    "text": "with C++ this is a very hard question to answer so about languages you should know",
    "start": "1044789",
    "end": "1053360"
  },
  {
    "text": "languages I I reckon I knew about twenty-five or there abouts when I did",
    "start": "1053360",
    "end": "1060029"
  },
  {
    "text": "C++ it was easier than those days because the languages were smaller and",
    "start": "1060029",
    "end": "1065120"
  },
  {
    "text": "you didn't have to learn a whole programming environment and such to do it you you could learn the language",
    "start": "1065120",
    "end": "1071549"
  },
  {
    "text": "quite easily and it's good to learn so many languages and I imagine just like",
    "start": "1071549",
    "end": "1078270"
  },
  {
    "text": "with natural language for communication there's different paradigms that emerge",
    "start": "1078270",
    "end": "1084330"
  },
  {
    "text": "in all of them yeah that there's commonalities and so on so I picked fire",
    "start": "1084330",
    "end": "1090390"
  },
  {
    "text": "out of a head so far ahead obviously well the important thing that the number",
    "start": "1090390",
    "end": "1095910"
  },
  {
    "text": "is not one that's right it's like I don't like I mean if you're mono clot",
    "start": "1095910",
    "end": "1102150"
  },
  {
    "text": "you are likely to think that your own culture is the only ones peer is everybody else's a good learning of a",
    "start": "1102150",
    "end": "1109080"
  },
  {
    "text": "foreign language and a foreign culture is important it helps you think and be a",
    "start": "1109080",
    "end": "1114360"
  },
  {
    "text": "better person with programming languages you become a better programmer better designer with the second language now",
    "start": "1114360",
    "end": "1121890"
  },
  {
    "text": "once you've got to the wage of five is not that long it's the second one that's",
    "start": "1121890",
    "end": "1128130"
  },
  {
    "text": "most important and then when I had to pick five I sort of thinking what kinds",
    "start": "1128130",
    "end": "1137790"
  },
  {
    "text": "of languages are there well there's a really low level stuff it's good it's actually good to know machine code movie",
    "start": "1137790",
    "end": "1145320"
  },
  {
    "text": "very still sorry even today even today the C++ optimizer is right there a",
    "start": "1145320",
    "end": "1152130"
  },
  {
    "text": "machine code than I do yes but I don't think I could appreciate them if I actually didn't understand",
    "start": "1152130",
    "end": "1159560"
  },
  {
    "text": "machine code and machine architecture at least in in my position I have to",
    "start": "1159560",
    "end": "1164790"
  },
  {
    "text": "understand a bit of it because you mess up the cash and you're off in",
    "start": "1164790",
    "end": "1170490"
  },
  {
    "text": "performance by a factor of a hundred right shouldn't be that if you are",
    "start": "1170490",
    "end": "1175830"
  },
  {
    "text": "interested in higher performance or the size of the computer you have to deploy",
    "start": "1175830",
    "end": "1181460"
  },
  {
    "text": "so so I would go there's a simpler I used to mention C but these days going",
    "start": "1181460",
    "end": "1188970"
  },
  {
    "text": "low-level is not actually what gives you the performance it is to express your",
    "start": "1188970",
    "end": "1194460"
  },
  {
    "text": "ideas so cleanly that you can think about it and the optimizer can understand what you're up to",
    "start": "1194460",
    "end": "1200610"
  },
  {
    "text": "my favorite way of optimizing these days is to throw out the clever bits and see",
    "start": "1200610",
    "end": "1207120"
  },
  {
    "text": "if it's dawn runs fast and sometimes it runs faster so I need the abstraction",
    "start": "1207120",
    "end": "1214050"
  },
  {
    "text": "mechanisms or something like C++ to write compact high-performance code",
    "start": "1214050",
    "end": "1219740"
  },
  {
    "text": "there was a beautiful keynote by Jason Turner the CPP con a couple of years ago where",
    "start": "1219740",
    "end": "1226320"
  },
  {
    "text": "he decided he was going to program pong on Motorola 6800 I think it was and he",
    "start": "1226320",
    "end": "1238170"
  },
  {
    "text": "says well this is relevant because it looks like a microcontroller it has specialized hardware it has not very",
    "start": "1238170",
    "end": "1245220"
  },
  {
    "text": "much memory and it's relatively slow and so he shows in real time how he writes",
    "start": "1245220",
    "end": "1251640"
  },
  {
    "text": "pong starting with fairly straightforward low-level stuff",
    "start": "1251640",
    "end": "1257010"
  },
  {
    "text": "improving his abstractions and what he's doing he's writing C++ and it translate",
    "start": "1257010",
    "end": "1263910"
  },
  {
    "text": "into in 286 assembler which you can do with",
    "start": "1263910",
    "end": "1270460"
  },
  {
    "text": "playing and you can see it in real-time it's the compiled explora which you can",
    "start": "1270460",
    "end": "1276860"
  },
  {
    "text": "use on the web and then he wrote a little program that translated 86 assembler into",
    "start": "1276860",
    "end": "1283520"
  },
  {
    "text": "Motorola has simpler and so he types and you can see this thing in real time",
    "start": "1283520",
    "end": "1289010"
  },
  {
    "text": "while you can see it in real time and even if you can't read the assembly code you can just see it",
    "start": "1289010",
    "end": "1294980"
  },
  {
    "text": "his code gets better the code the assembler gets Kimura he increases the",
    "start": "1294980",
    "end": "1301190"
  },
  {
    "text": "abstraction level uses C++ 11 as it were better this code gets clean that gets",
    "start": "1301190",
    "end": "1308299"
  },
  {
    "text": "easier maintain the code shrinks and it keeps shrinking and I could not in any",
    "start": "1308299",
    "end": "1316490"
  },
  {
    "text": "reasonable amount of time write that a simpler as good as the compiler",
    "start": "1316490",
    "end": "1322130"
  },
  {
    "text": "generated from really a quite nice modern C++ and I'll go as far as to say",
    "start": "1322130",
    "end": "1328220"
  },
  {
    "text": "the the thing that looked like C was significantly uglier and and smaller",
    "start": "1328220",
    "end": "1335419"
  },
  {
    "text": "when it becames and and larger when it became machine",
    "start": "1335419",
    "end": "1340730"
  },
  {
    "text": "code so what the the abstractions that can be optimized important I would love",
    "start": "1340730",
    "end": "1347870"
  },
  {
    "start": "1347000",
    "end": "1507000"
  },
  {
    "text": "to see that kind of visualization larger code bases yeah there might be blood a few can't show a larger code base in a",
    "start": "1347870",
    "end": "1355309"
  },
  {
    "text": "one-hour talk and to have it fit on screen right so that C is if you love so",
    "start": "1355309",
    "end": "1360500"
  },
  {
    "text": "my two languages would be machine code and C++ and then I think you can learn a",
    "start": "1360500",
    "end": "1367070"
  },
  {
    "text": "lot from the functional languages so pig has pralaya male I don't care which I",
    "start": "1367070",
    "end": "1373460"
  },
  {
    "text": "think actually you you'll you'll learn the same lessons of expressing",
    "start": "1373460",
    "end": "1379630"
  },
  {
    "text": "especially mathematical notions really clearly and having the type system",
    "start": "1379630",
    "end": "1386029"
  },
  {
    "text": "that's really strict and then you should probably have a language for sort of",
    "start": "1386029",
    "end": "1391730"
  },
  {
    "text": "quickly churning out something you could pick JavaScript you could pick Python",
    "start": "1391730",
    "end": "1398690"
  },
  {
    "text": "you could pick Ruby really make of JavaScript in general so you kind of you're talking in the Platonic sense of",
    "start": "1398690",
    "end": "1406730"
  },
  {
    "text": "all languages about what they're good at what their philosophy design is but",
    "start": "1406730",
    "end": "1412039"
  },
  {
    "text": "there's also a large user base behind each of these languages and they use it in the way",
    "start": "1412039",
    "end": "1417320"
  },
  {
    "text": "maybe it wasn't really designed for that's right javascript is used way beyond I probably put hooks design for",
    "start": "1417320",
    "end": "1423710"
  },
  {
    "text": "it let let me say it this way when you build a tool you do not know how it's going to be used you try to improve the",
    "start": "1423710",
    "end": "1430909"
  },
  {
    "text": "tool by looking at how it's being used and when people cut their fingers off and try and stop that from happening but",
    "start": "1430909",
    "end": "1438590"
  },
  {
    "text": "really you have no control over how something is used so I'm very happy and",
    "start": "1438590",
    "end": "1443990"
  },
  {
    "text": "proud of some of the things he plus plaus being used at and some of the things I wish people wouldn't do Bitcoin",
    "start": "1443990",
    "end": "1451220"
  },
  {
    "text": "mining being my favorite example uses as much energy as Switzerland and mostly",
    "start": "1451220",
    "end": "1457970"
  },
  {
    "text": "serves criminals yeah but back to back to the languages I actually think that",
    "start": "1457970",
    "end": "1464389"
  },
  {
    "text": "having JavaScript run in the browser what was was an enabling thing for a lot",
    "start": "1464389",
    "end": "1472340"
  },
  {
    "text": "of things yes you could have done it better but people were trying to do it better they were using proof sort of",
    "start": "1472340",
    "end": "1480590"
  },
  {
    "text": "more principles language designs but they just couldn't do it right and the",
    "start": "1480590",
    "end": "1486669"
  },
  {
    "text": "non professional programmers that write or lots of that code just couldn't understand them so it did",
    "start": "1486669",
    "end": "1496679"
  },
  {
    "text": "amazing job for what it was it's not the prettiest language and I don't think it ever will be the prettiest language but",
    "start": "1496679",
    "end": "1504499"
  },
  {
    "text": "that's not be bigots here so what was the origin story of C++ you you",
    "start": "1504499",
    "end": "1512879"
  },
  {
    "start": "1507000",
    "end": "1652000"
  },
  {
    "text": "basically gave a few perspectives of your inspiration of object-oriented",
    "start": "1512879",
    "end": "1519840"
  },
  {
    "text": "programming that's you had a connection with C in performance efficiency was an",
    "start": "1519840",
    "end": "1525480"
  },
  {
    "text": "important thing you were drawn to efficiency and reliability reliability you have to get both what",
    "start": "1525480",
    "end": "1532769"
  },
  {
    "text": "what's reliability I I really want my telephone calls to get through and I",
    "start": "1532769",
    "end": "1539580"
  },
  {
    "text": "want the quality of what I am talking coming out with the other end the other",
    "start": "1539580",
    "end": "1545100"
  },
  {
    "text": "end might be in London or wherever so",
    "start": "1545100",
    "end": "1550159"
  },
  {
    "text": "and you don't want the system to be crashing if you're doing a bank here is",
    "start": "1550159",
    "end": "1555269"
  },
  {
    "text": "you must not crash it might be your your bank account that is in trouble there's",
    "start": "1555269",
    "end": "1562350"
  },
  {
    "text": "different constraints like in games it doesn't matter too much if there's a crash nobody dies and nobody gets ruined",
    "start": "1562350",
    "end": "1568169"
  },
  {
    "text": "but I am interested in the combination of performance partly because of sort of",
    "start": "1568169",
    "end": "1576090"
  },
  {
    "text": "speed of things being done part of being able to do things that is necessary to",
    "start": "1576090",
    "end": "1582149"
  },
  {
    "text": "do to have reliable energy of larger",
    "start": "1582149",
    "end": "1587190"
  },
  {
    "text": "systems if you spend all your time interpreting a simple function call you",
    "start": "1587190",
    "end": "1595470"
  },
  {
    "text": "are not going to have enough time to do proper signal processing to get the telephone calls to sound right I know",
    "start": "1595470",
    "end": "1602820"
  },
  {
    "text": "that or you have to have 10 times as many computers and you can't afford your phone anymore it's a ridiculous idea in",
    "start": "1602820",
    "end": "1610619"
  },
  {
    "text": "the modern world because we have solved all of those problems I mean they keep",
    "start": "1610619",
    "end": "1615990"
  },
  {
    "text": "popping up in different ways as we tackle bigger and bigger problems efficiency remains always an important",
    "start": "1615990",
    "end": "1622230"
  },
  {
    "text": "aspect but you have to think about efficiency not just as speed but as an",
    "start": "1622230",
    "end": "1627690"
  },
  {
    "text": "enabler to things and women thinks it enables is",
    "start": "1627690",
    "end": "1634260"
  },
  {
    "text": "this reliability is dependability you won when I press the pedal the brake",
    "start": "1634260",
    "end": "1640840"
  },
  {
    "text": "pedal of a car it is not actually connect it directly to to anything but a",
    "start": "1640840",
    "end": "1647440"
  },
  {
    "text": "computer that computer better work let's talk about reliability just a little bit",
    "start": "1647440",
    "end": "1653830"
  },
  {
    "start": "1652000",
    "end": "1767000"
  },
  {
    "text": "so modern cars have ECU's millions of",
    "start": "1653830",
    "end": "1659350"
  },
  {
    "text": "lines of code Mme so this is certainly especially true of",
    "start": "1659350",
    "end": "1664750"
  },
  {
    "text": "autonomous vehicles where some of the aspects of the control or driver assistance systems that steer the car",
    "start": "1664750",
    "end": "1670240"
  },
  {
    "text": "the key panel and so on so how do you think you know I talk to regulators",
    "start": "1670240",
    "end": "1675280"
  },
  {
    "text": "people in government who are very nervous about testing the safety of these systems of software ultimately",
    "start": "1675280",
    "end": "1682960"
  },
  {
    "text": "software that makes decisions that could lead to fatalities so how do you how do",
    "start": "1682960",
    "end": "1690370"
  },
  {
    "text": "we test software systems like these first of all safety like performance and",
    "start": "1690370",
    "end": "1697840"
  },
  {
    "text": "like security is a systems property",
    "start": "1697840",
    "end": "1702960"
  },
  {
    "text": "people tend to look at one part of a system at a time and saying something",
    "start": "1702960",
    "end": "1708130"
  },
  {
    "text": "like this is secure that's all right I don't need to do that yeah that piece of",
    "start": "1708130",
    "end": "1714580"
  },
  {
    "text": "code is secure I'll buy your operator right if you want to have reliability if",
    "start": "1714580",
    "end": "1721060"
  },
  {
    "text": "you want to have performance if you want to have security you have to look at the whole system I did not expect you to say",
    "start": "1721060",
    "end": "1728170"
  },
  {
    "text": "that but that's very true yes I'm dealing with one part of the system and I want my part to be really",
    "start": "1728170",
    "end": "1734320"
  },
  {
    "text": "good but I know it's not the whole system furthermore if making an",
    "start": "1734320",
    "end": "1739920"
  },
  {
    "text": "individual part perfect may actually not",
    "start": "1739920",
    "end": "1745150"
  },
  {
    "text": "be the best way of getting the highest degree of reliability and performance and such the spumone says super cross",
    "start": "1745150",
    "end": "1752140"
  },
  {
    "text": "type say not type safe you can break it sure I can break anything that runs on a",
    "start": "1752140",
    "end": "1758860"
  },
  {
    "text": "computer I may not go through your type system if I wanted to break into your computer",
    "start": "1758860",
    "end": "1765500"
  },
  {
    "text": "I'll probably try SQL injection and it's very true if you think about safety or",
    "start": "1765500",
    "end": "1771710"
  },
  {
    "start": "1767000",
    "end": "1912000"
  },
  {
    "text": "even reliability at its system level especially when a human being is involved it's starts becoming hopeless",
    "start": "1771710",
    "end": "1781010"
  },
  {
    "text": "pretty quickly in terms of proving that something is safe to a certain level",
    "start": "1781010",
    "end": "1788990"
  },
  {
    "text": "yeah there's so many variables it's so complex well let's get back to something we can talk about and it actually makes",
    "start": "1788990",
    "end": "1796760"
  },
  {
    "text": "some progress on yes we look at C++ programs and we can try and make sure",
    "start": "1796760",
    "end": "1802610"
  },
  {
    "text": "the crash less often the way you do that",
    "start": "1802610",
    "end": "1808280"
  },
  {
    "text": "is largely by simplification it is not",
    "start": "1808280",
    "end": "1813880"
  },
  {
    "text": "the first step is to simplify the code have less code have code that are less",
    "start": "1813880",
    "end": "1820220"
  },
  {
    "text": "likely to go wrong it's not by runtime testing everything it is not by big test",
    "start": "1820220",
    "end": "1827060"
  },
  {
    "text": "frameworks that you're using yes we do that also but the first step is actually",
    "start": "1827060",
    "end": "1833450"
  },
  {
    "text": "to make sure that when you want to express something you can express it directly in code rather than going",
    "start": "1833450",
    "end": "1841640"
  },
  {
    "text": "through endless loops and convolutions in your head before it gets down the",
    "start": "1841640",
    "end": "1846680"
  },
  {
    "text": "code that if if the way you are thinking about a problem is not in the code there",
    "start": "1846680",
    "end": "1855170"
  },
  {
    "text": "is a missing piece that's just in your head and the code you can see what it",
    "start": "1855170",
    "end": "1860840"
  },
  {
    "text": "does but it cannot see what you thought about it unless you have expressed",
    "start": "1860840",
    "end": "1865880"
  },
  {
    "text": "things directly when you express things directly you can maintain it",
    "start": "1865880",
    "end": "1871340"
  },
  {
    "text": "it's these years to find errors is easier to make modifications it's actually easier to test it and lo and",
    "start": "1871340",
    "end": "1878600"
  },
  {
    "text": "behold it runs faster and therefore you can use a smaller",
    "start": "1878600",
    "end": "1884130"
  },
  {
    "text": "number of computers which means there's less hardware that could possibly break",
    "start": "1884130",
    "end": "1889730"
  },
  {
    "text": "so I think the key here is simplification but it has to be to use",
    "start": "1889730",
    "end": "1896970"
  },
  {
    "text": "the Einstein code as simple as possible and no simpler not simpler well there are other areas with under constraints",
    "start": "1896970",
    "end": "1904320"
  },
  {
    "text": "where you can be simpler than you can be in C++ but in the domain I'm dealing with",
    "start": "1904320",
    "end": "1909500"
  },
  {
    "text": "that's the simplification I'm after so how do you inspire or ensure that the",
    "start": "1909500",
    "end": "1920100"
  },
  {
    "start": "1912000",
    "end": "2152000"
  },
  {
    "text": "Einstein level simplification is reached so okay can you do code review can you",
    "start": "1920100",
    "end": "1926490"
  },
  {
    "text": "look at code is there if I gave you the code for the Ford f-150 and said here is",
    "start": "1926490",
    "end": "1935030"
  },
  {
    "text": "this a mess or is this okay is it possible to tell is it possible to",
    "start": "1935030",
    "end": "1941010"
  },
  {
    "text": "regulate an experienced developer can do",
    "start": "1941010",
    "end": "1946200"
  },
  {
    "text": "it code and see if it smells you know I'm mixed metaphors deliberately yes the",
    "start": "1946200",
    "end": "1953610"
  },
  {
    "text": "the point is that it is hard to generate",
    "start": "1953610",
    "end": "1960660"
  },
  {
    "text": "something that is really obviously clean and can be appreciated but you can",
    "start": "1960660",
    "end": "1970170"
  },
  {
    "text": "usually recognize when you haven't reached that point and so if I I've",
    "start": "1970170",
    "end": "1976740"
  },
  {
    "text": "never looked at me if 150 code so I",
    "start": "1976740",
    "end": "1982320"
  },
  {
    "text": "wouldn't know but but I know what I ought to be looking for there I'll be looking for some tricks that correlates",
    "start": "1982320",
    "end": "1989100"
  },
  {
    "text": "with bugs and elsewhere and I have tried to formulate rules for what what good",
    "start": "1989100",
    "end": "1996900"
  },
  {
    "text": "code looks like and the current version",
    "start": "1996900",
    "end": "2002360"
  },
  {
    "text": "of that is called the C++ core guidelines one thing people should remember is",
    "start": "2002360",
    "end": "2009600"
  },
  {
    "text": "there's what you can do in a language and what you should do in a language you",
    "start": "2009600",
    "end": "2016350"
  },
  {
    "text": "have lots of things that is necessary in some context but not another's as things",
    "start": "2016350",
    "end": "2022679"
  },
  {
    "text": "that exist just because there's 30 year old code out there and you can't get rid of it but you can't have rules it says",
    "start": "2022679",
    "end": "2030360"
  },
  {
    "text": "when you create it try and follow these rules this does not create good programs",
    "start": "2030360",
    "end": "2038610"
  },
  {
    "text": "by themselves but it limits the damage and off for mistakes it limits the",
    "start": "2038610",
    "end": "2044400"
  },
  {
    "text": "possibilities of the mistakes and basically we are trying to say what is",
    "start": "2044400",
    "end": "2049530"
  },
  {
    "text": "it that a good programmer does at the fairly simple level of where you use the",
    "start": "2049530",
    "end": "2055950"
  },
  {
    "text": "language and how you use it now I can move all the rules for chiseling in my",
    "start": "2055950",
    "end": "2062250"
  },
  {
    "text": "marble it doesn't mean that somebody who follows all of those rules can do a",
    "start": "2062250",
    "end": "2068220"
  },
  {
    "text": "masterpiece by Machine Angelo that is there something else to write a",
    "start": "2068220",
    "end": "2074820"
  },
  {
    "text": "good program just is there something else to create important work of art",
    "start": "2074820",
    "end": "2081340"
  },
  {
    "text": "that is there's some kind of inspiration understanding gift but we can approach",
    "start": "2081340",
    "end": "2091510"
  },
  {
    "text": "the sort of technical the the craftsmanship level of it the the the",
    "start": "2091510",
    "end": "2100210"
  },
  {
    "text": "famous painters the famous cultures was among other things superb craftsmen they could express",
    "start": "2100210",
    "end": "2108790"
  },
  {
    "text": "their ideas using their tools very well and so these days I think what I'm doing",
    "start": "2108790",
    "end": "2118030"
  },
  {
    "text": "what a lot of people are doing we're still trying to figure out how it is to use our tools very well for a really",
    "start": "2118030",
    "end": "2125500"
  },
  {
    "text": "good piece of code you need a spark of inspiration and you can't",
    "start": "2125500",
    "end": "2131770"
  },
  {
    "text": "I think regulate that you you cannot say that I'll take a picture",
    "start": "2131770",
    "end": "2137740"
  },
  {
    "text": "only I'll buy your picture only if you're at least then go there are things",
    "start": "2137740",
    "end": "2146110"
  },
  {
    "text": "you can regulate but not the inspiration I think that's quite beautifully put it",
    "start": "2146110",
    "end": "2153010"
  },
  {
    "start": "2152000",
    "end": "2367000"
  },
  {
    "text": "is true that there is there's an experienced programmer when you see code",
    "start": "2153010",
    "end": "2159100"
  },
  {
    "text": "that's inspired that's like Michelangelo",
    "start": "2159100",
    "end": "2165180"
  },
  {
    "text": "you know it when you see it and the opposite of that is code that is",
    "start": "2165180",
    "end": "2171790"
  },
  {
    "text": "messy code that smells you know when you see it and I'm not sure you can describe it in words except vaguely through",
    "start": "2171790",
    "end": "2179140"
  },
  {
    "text": "guidelines and so on yes it's easier to recognize ugly than to recognize beauty",
    "start": "2179140",
    "end": "2185820"
  },
  {
    "text": "in code and for the reason is that sometimes beauty comes from something",
    "start": "2185820",
    "end": "2191350"
  },
  {
    "text": "that's innovative and unusual and you have to sometimes think reasonably hard",
    "start": "2191350",
    "end": "2197050"
  },
  {
    "text": "to appreciate that on the other hand the misses have things",
    "start": "2197050",
    "end": "2202860"
  },
  {
    "text": "in common and you can you can have static checkers dynamic checkers that",
    "start": "2202860",
    "end": "2209340"
  },
  {
    "text": "finds large number of the most common",
    "start": "2209340",
    "end": "2216060"
  },
  {
    "text": "mistakes you can catch a lot of sloppiness mechanically I'm a great fan",
    "start": "2216060",
    "end": "2223260"
  },
  {
    "text": "of static analysis in particular because",
    "start": "2223260",
    "end": "2228270"
  },
  {
    "text": "you can check for not just the language rules but for the usage of language rules and I think we will see much more",
    "start": "2228270",
    "end": "2235680"
  },
  {
    "text": "static analysis in the coming decade clear the drive word static analysis you",
    "start": "2235680",
    "end": "2242030"
  },
  {
    "text": "represent a piece of code so that you can write a program that goes or that",
    "start": "2242030",
    "end": "2250620"
  },
  {
    "text": "representation and look for things that are right and not right so for instance",
    "start": "2250620",
    "end": "2258600"
  },
  {
    "text": "you can analyze a program to see if",
    "start": "2258600",
    "end": "2265460"
  },
  {
    "text": "resources are leaked that's one of my favorite problems it's not actually all",
    "start": "2265640",
    "end": "2273450"
  },
  {
    "text": "that hard and one C++ but you can do it if you were writing in the C level you",
    "start": "2273450",
    "end": "2279060"
  },
  {
    "text": "have to have a Murloc and a free and they have to match if you have them in a",
    "start": "2279060",
    "end": "2285450"
  },
  {
    "text": "single function you can usually do it very easily if there's a man log here",
    "start": "2285450",
    "end": "2292140"
  },
  {
    "text": "there should be a free there on the other hand in between can be drawing complete code and then it becomes",
    "start": "2292140",
    "end": "2298380"
  },
  {
    "text": "impossible yeah if you pass that pointer to the memory out of a function and then",
    "start": "2298380",
    "end": "2306020"
  },
  {
    "text": "want to make sure that the free is done somewhere else now it gets really",
    "start": "2306020",
    "end": "2312330"
  },
  {
    "text": "difficult and so for static analysis you can run through a program and you can",
    "start": "2312330",
    "end": "2318180"
  },
  {
    "text": "try and figure out if there's any leaks and what you will properly find is that",
    "start": "2318180",
    "end": "2326340"
  },
  {
    "text": "you will find some leaks and you'll find quite a few places where your analysis",
    "start": "2326340",
    "end": "2331380"
  },
  {
    "text": "can't be complete it might depend on runtime it might depend on the cleverness of your",
    "start": "2331380",
    "end": "2340170"
  },
  {
    "text": "analyzer and it might take a long time some of these programs run for a long",
    "start": "2340170",
    "end": "2345540"
  },
  {
    "text": "time but if you combine such analysis",
    "start": "2345540",
    "end": "2351650"
  },
  {
    "text": "with a set of rules it says how people could use it you can actually see why",
    "start": "2351650",
    "end": "2357420"
  },
  {
    "text": "the rules are violated and that stops you from getting into the impossible",
    "start": "2357420",
    "end": "2363860"
  },
  {
    "text": "complexities you don't want to solve the halting problem the static analysis is",
    "start": "2363860",
    "end": "2369900"
  },
  {
    "start": "2367000",
    "end": "2476000"
  },
  {
    "text": "looking at the code without running the code yes and thereby it's almost not in",
    "start": "2369900",
    "end": "2377610"
  },
  {
    "text": "production code but it's almost like an educational tool of how the language should be used it's guys you like it is",
    "start": "2377610",
    "end": "2385890"
  },
  {
    "text": "best right it would guide you in how you write future code as well and you learn",
    "start": "2385890",
    "end": "2391290"
  },
  {
    "text": "together yes so basically you need a set of rules for how you use the language",
    "start": "2391290",
    "end": "2396570"
  },
  {
    "text": "then you need a static analysis that catches your mistakes when you violate",
    "start": "2396570",
    "end": "2404280"
  },
  {
    "text": "the rules or when your code ends up doing things that it shouldn't despite",
    "start": "2404280",
    "end": "2409620"
  },
  {
    "text": "the rules because there's the language rules you can go further and again it's",
    "start": "2409620",
    "end": "2415290"
  },
  {
    "text": "back to my idea that I would much rather find errors before I start running the code if nothing else once the code runs",
    "start": "2415290",
    "end": "2423390"
  },
  {
    "text": "if it catches an error at run times I have to have an error handler and one of",
    "start": "2423390",
    "end": "2428820"
  },
  {
    "text": "the hardest things to write in code is their handling code because you know",
    "start": "2428820",
    "end": "2434310"
  },
  {
    "text": "something went wrong do you know really exactly what went wrong usually not how can you recover",
    "start": "2434310",
    "end": "2441390"
  },
  {
    "text": "when you don't know what the problem was you can't be a hundred percent sure what the problem was in many many cases and",
    "start": "2441390",
    "end": "2448610"
  },
  {
    "text": "this is this is part of it so yes we need good languages or good type systems",
    "start": "2448610",
    "end": "2456240"
  },
  {
    "text": "we need rules for how to use them we need static analysis and the ultimate",
    "start": "2456240",
    "end": "2461940"
  },
  {
    "text": "for static analysis is of course program proof but that still doesn't scale so",
    "start": "2461940",
    "end": "2466980"
  },
  {
    "text": "the kind of systems we deploy then we start needing testing and the",
    "start": "2466980",
    "end": "2473520"
  },
  {
    "text": "rest of the stuff so C++ is an object-oriented programming language",
    "start": "2473520",
    "end": "2479940"
  },
  {
    "start": "2476000",
    "end": "2832000"
  },
  {
    "text": "that creates especially with its newer versions as we'll talk about higher and higher levels of abstraction so how do",
    "start": "2479940",
    "end": "2488430"
  },
  {
    "text": "you design let's even go back to the origin C++ how you design something with",
    "start": "2488430",
    "end": "2493890"
  },
  {
    "text": "so much abstraction that's still efficient and is still something that",
    "start": "2493890",
    "end": "2501690"
  },
  {
    "text": "you can manage do static analysis on you can have constraints on they can be",
    "start": "2501690",
    "end": "2509300"
  },
  {
    "text": "reliable those things we've talked about so create the to me slightly there's a",
    "start": "2509300",
    "end": "2516300"
  },
  {
    "text": "slight tension between high-level abstraction and efficiency that's a good",
    "start": "2516300",
    "end": "2522119"
  },
  {
    "text": "question I could probably have a year's course just trying to answer it yes",
    "start": "2522119",
    "end": "2528720"
  },
  {
    "text": "there's a tension between efficiency and abstraction but you also get the",
    "start": "2528720",
    "end": "2534990"
  },
  {
    "text": "interesting situation that you get the best efficiency out of the best abstraction and my main tool for",
    "start": "2534990",
    "end": "2543650"
  },
  {
    "text": "efficiency for performance actually is abstraction so let's go back to how C++",
    "start": "2543650",
    "end": "2550109"
  },
  {
    "text": "got there yeah you said it was up to Rory in the programming language I actually never said that it's always",
    "start": "2550109",
    "end": "2558000"
  },
  {
    "text": "quoted but I never did I said C++ supports object-oriented programming but",
    "start": "2558000",
    "end": "2563310"
  },
  {
    "text": "it's nine other techniques and that that's important because I think that",
    "start": "2563310",
    "end": "2569099"
  },
  {
    "text": "the best solution to most complex interesting problems require ideas and",
    "start": "2569099",
    "end": "2578250"
  },
  {
    "text": "techniques from things that has been called object-oriented data abstraction",
    "start": "2578250",
    "end": "2586020"
  },
  {
    "text": "function or traditional C style code all",
    "start": "2586020",
    "end": "2591930"
  },
  {
    "text": "of the above and so when I was designing C++ I soon realized I couldn't just add",
    "start": "2591930",
    "end": "2601020"
  },
  {
    "text": "features if you just add what looks pretty or what people ask for or what you think is",
    "start": "2601020",
    "end": "2608300"
  },
  {
    "text": "good one by one you're not going to get a coherent whole what you need is a set",
    "start": "2608300",
    "end": "2614930"
  },
  {
    "text": "of guidelines that that that guides your decisions should this feature Vienna",
    "start": "2614930",
    "end": "2621619"
  },
  {
    "text": "should this feature be out how should a feature be modified before it can go in",
    "start": "2621619",
    "end": "2627349"
  },
  {
    "text": "and such and there's a in in the book I wrote about that that sign evolution of",
    "start": "2627349",
    "end": "2632720"
  },
  {
    "text": "si+ process a whole bunch of rules like that most of them are not language",
    "start": "2632720",
    "end": "2637730"
  },
  {
    "text": "technical they they they're they're things like don't violate static type",
    "start": "2637730",
    "end": "2644420"
  },
  {
    "text": "system because I like static type system for the obvious reason that I like",
    "start": "2644420",
    "end": "2649720"
  },
  {
    "text": "things to be reliable on reasonable amounts of hardware",
    "start": "2649720",
    "end": "2657220"
  },
  {
    "text": "but one of these rules is the zero overhead principle the were kind of put a zero overhead principle it basically",
    "start": "2657220",
    "end": "2665170"
  },
  {
    "text": "says that if you have an abstraction it",
    "start": "2665170",
    "end": "2670720"
  },
  {
    "text": "should not cost anything compared to write the equivalent code at a lower",
    "start": "2670720",
    "end": "2676930"
  },
  {
    "text": "level so if I have say a matrix",
    "start": "2676930",
    "end": "2683890"
  },
  {
    "text": "multiplied it should be written in such a way that you could not drop to the C",
    "start": "2683890",
    "end": "2691510"
  },
  {
    "text": "level of abstraction and use arrays and pointers and such and run faster and so",
    "start": "2691510",
    "end": "2698170"
  },
  {
    "text": "people have written such matrix multiplications and we have actually",
    "start": "2698170",
    "end": "2704050"
  },
  {
    "text": "gotten code that ran faster than Fortran because once you had the right abstraction you can eliminate you can",
    "start": "2704050",
    "end": "2711910"
  },
  {
    "text": "eliminate temporaries and you can do loop fusion and other good stuff like",
    "start": "2711910",
    "end": "2717640"
  },
  {
    "text": "that that's quite hard to do by hand and in a lower level language and there's some really nice examples of that and",
    "start": "2717640",
    "end": "2725670"
  },
  {
    "text": "the key here is that that matrix multiplication the matrix abstraction",
    "start": "2725670",
    "end": "2731920"
  },
  {
    "text": "allows you to write code that's simple and easy you can do that in any language",
    "start": "2731920",
    "end": "2736930"
  },
  {
    "text": "but with C++ it has the features so that you can also have this thing run faster",
    "start": "2736930",
    "end": "2742750"
  },
  {
    "text": "than if you hand coded it now people have given that lecture many times I and",
    "start": "2742750",
    "end": "2749320"
  },
  {
    "text": "others and a very common on question after the talk where you have demonstrated that you can outperform",
    "start": "2749320",
    "end": "2755320"
  },
  {
    "text": "Fortran for dense matrix multiplication people come up and says yeah but there",
    "start": "2755320",
    "end": "2760570"
  },
  {
    "text": "are C++ if I rewrote your code and see how much faster would have run the",
    "start": "2760570",
    "end": "2766270"
  },
  {
    "text": "answer is much slower this happened the first time actually back in the ages",
    "start": "2766270",
    "end": "2773349"
  },
  {
    "text": "with a friend of mine called Doug McIlroy who demonstrated exactly this",
    "start": "2773349",
    "end": "2778660"
  },
  {
    "text": "effect and so the principle is you should give programmers the tools so",
    "start": "2778660",
    "end": "2786339"
  },
  {
    "text": "that the abstractions can follow the 0oi principle furthermore when you put in a language",
    "start": "2786339",
    "end": "2792510"
  },
  {
    "text": "feature in C++ or a standard library feature you try to meet this it doesn't",
    "start": "2792510",
    "end": "2798540"
  },
  {
    "text": "mean it's absolutely optimal but it means if you're hand coded with the",
    "start": "2798540",
    "end": "2803670"
  },
  {
    "text": "usual the facilities in the language in C++ in C you should not be able to",
    "start": "2803670",
    "end": "2810060"
  },
  {
    "text": "better it usually you can do better if you use embedded a simpler for machine",
    "start": "2810060",
    "end": "2817620"
  },
  {
    "text": "code for some of the details to utilize part of a computer that the compiler",
    "start": "2817620",
    "end": "2823110"
  },
  {
    "text": "doesn't know about but you should get to that point before you be to the abstraction so that's that's a beautiful",
    "start": "2823110",
    "end": "2830610"
  },
  {
    "text": "ideal to reach for and we meet it quite often quite often so where's the magic",
    "start": "2830610",
    "end": "2837600"
  },
  {
    "start": "2832000",
    "end": "3001000"
  },
  {
    "text": "of that coming from there's some of it is the compilation process so the implementation is C++ some of it is the",
    "start": "2837600",
    "end": "2844950"
  },
  {
    "text": "design of the feature itself the guidelines so I've recently an often",
    "start": "2844950",
    "end": "2852120"
  },
  {
    "text": "talk of Chris Ladner so clang what just",
    "start": "2852120",
    "end": "2857190"
  },
  {
    "text": "out of curiosity is your relationship in general with the different",
    "start": "2857190",
    "end": "2862740"
  },
  {
    "text": "implementations in C++ as you think about you and committee and other people",
    "start": "2862740",
    "end": "2868290"
  },
  {
    "text": "C++ think about the design of new features or design of previous features the in in trying to reach the ideal of",
    "start": "2868290",
    "end": "2876960"
  },
  {
    "text": "zero overhead who does the magic come from the design the guidelines or from",
    "start": "2876960",
    "end": "2885060"
  },
  {
    "text": "the implementations and and not all you have you you are you you you you go for",
    "start": "2885060",
    "end": "2892020"
  },
  {
    "text": "programming technique program language features and implementation techniques",
    "start": "2892020",
    "end": "2897240"
  },
  {
    "text": "you need all three and how can you think about all three at the same time it",
    "start": "2897240",
    "end": "2903840"
  },
  {
    "text": "takes some experience takes some practice and sometimes you get it wrong but after a while you sort of get it",
    "start": "2903840",
    "end": "2910470"
  },
  {
    "text": "right I don't write compilers anymore but",
    "start": "2910470",
    "end": "2916610"
  },
  {
    "text": "Brian Kearney and pointed out that one of the reason c++ succeeded was some of",
    "start": "2916839",
    "end": "2926739"
  },
  {
    "text": "the craftsmanship I put into the early compilers and of course I did the",
    "start": "2926739",
    "end": "2931869"
  },
  {
    "text": "languages sign of course I wrote a fair amount of code using this kind of stuff and I think most of the successes",
    "start": "2931869",
    "end": "2940229"
  },
  {
    "text": "involves progress in all three areas together a small group of people can do",
    "start": "2940229",
    "end": "2947289"
  },
  {
    "text": "that two three people can can work together to do something like that it's ideal if it's one person that has all",
    "start": "2947289",
    "end": "2954219"
  },
  {
    "text": "the skills necessary but nobody has all the skills necessary in all the fields where C++ is used so if you want to",
    "start": "2954219",
    "end": "2962589"
  },
  {
    "text": "approach my idea in say concurrent programming you need to know about",
    "start": "2962589",
    "end": "2967979"
  },
  {
    "text": "algorithms of my current programming you need to know the the triggering of lock-free programming you need to know",
    "start": "2967979",
    "end": "2975160"
  },
  {
    "text": "something about compiler techniques and then you have to know some of the program error the sorry the application",
    "start": "2975160",
    "end": "2982779"
  },
  {
    "text": "areas what this is like some forms of graphics or some forms of what are",
    "start": "2982779",
    "end": "2991479"
  },
  {
    "text": "called the web server and kind of stuff and that's very hard to get into a",
    "start": "2991479",
    "end": "2997930"
  },
  {
    "text": "single head but small groups can do it too it says there differences in your",
    "start": "2997930",
    "end": "3004589"
  },
  {
    "start": "3001000",
    "end": "3240000"
  },
  {
    "text": "view not saying which is better or so on but difference in the different implementations of C++ why are there",
    "start": "3004589",
    "end": "3013619"
  },
  {
    "text": "several sort of many of you naive questions for me GCC clang so this is a very reasonable",
    "start": "3013619",
    "end": "3022140"
  },
  {
    "text": "question when I designed C++",
    "start": "3022140",
    "end": "3027680"
  },
  {
    "text": "most languages have multiple implementations because if you wanna I",
    "start": "3028530",
    "end": "3034980"
  },
  {
    "text": "p.m. if you run on a Sun if you wanna Motorola that those just many many",
    "start": "3034980",
    "end": "3040170"
  },
  {
    "text": "companies and they each have their own compilation structure the old compilers it was just fairly common that those",
    "start": "3040170",
    "end": "3047520"
  },
  {
    "text": "many of them and I wrote C front assuming that other people would write",
    "start": "3047520",
    "end": "3053840"
  },
  {
    "text": "compilers for C++ if I was successful and furthermore I wanted to utilize all",
    "start": "3053840",
    "end": "3061140"
  },
  {
    "text": "the backend infrastructure were available I soon realized that my users",
    "start": "3061140",
    "end": "3067530"
  },
  {
    "text": "were using 25 different linkers I couldn't write my own linker yes I could",
    "start": "3067530",
    "end": "3073590"
  },
  {
    "text": "but I couldn't write 25 linkers and also get any work done on the language and so",
    "start": "3073590",
    "end": "3080700"
  },
  {
    "text": "it came from a world where there was many linkers many optimizers many",
    "start": "3080700",
    "end": "3086690"
  },
  {
    "text": "compiler front ends not not to start but",
    "start": "3086690",
    "end": "3092610"
  },
  {
    "text": "over at many operating systems the whole world was not an 86 and linux box or",
    "start": "3092610",
    "end": "3099180"
  },
  {
    "text": "something whatever is the standard today in the old days they said a set of X so",
    "start": "3099180",
    "end": "3105330"
  },
  {
    "text": "basically I assumed there'd be lots of compilers it was not a decision that",
    "start": "3105330",
    "end": "3110850"
  },
  {
    "text": "there should be many compilers it was just a fact that's the way the world is and yes many compilers emerged and today",
    "start": "3110850",
    "end": "3123410"
  },
  {
    "text": "there's at least four front ends playing",
    "start": "3123410",
    "end": "3128910"
  },
  {
    "text": "GCC Microsoft and EDG it is Design Group",
    "start": "3128910",
    "end": "3134730"
  },
  {
    "text": "they they supply a lot of the independence organizations and the",
    "start": "3134730",
    "end": "3140820"
  },
  {
    "text": "embedded systems industry and there's lots and lots of backends we have to",
    "start": "3140820",
    "end": "3146790"
  },
  {
    "text": "think about how many dozen begins there are because different machines have",
    "start": "3146790",
    "end": "3153420"
  },
  {
    "text": "different things especially in the embedded world their machines are very different the architectures are very",
    "start": "3153420",
    "end": "3159600"
  },
  {
    "text": "different and so having a single implementation",
    "start": "3159600",
    "end": "3165480"
  },
  {
    "text": "was never an option now I also happen to dislike",
    "start": "3165480",
    "end": "3171330"
  },
  {
    "text": "monocultures monocultures they are dangerous because whoever owns the",
    "start": "3171330",
    "end": "3178430"
  },
  {
    "text": "monoculture can go stale and there's no competition and there's no incentive to",
    "start": "3178430",
    "end": "3184920"
  },
  {
    "text": "innovate there's a lot of incentive to put barriers in the way of change",
    "start": "3184920",
    "end": "3190380"
  },
  {
    "text": "because hey we own the world and it's a very comfortable world for us and who",
    "start": "3190380",
    "end": "3195690"
  },
  {
    "text": "are you to to mess with that so I really",
    "start": "3195690",
    "end": "3200760"
  },
  {
    "text": "am very happy that this for front-ends for C++ clanks great but GCC was great",
    "start": "3200760",
    "end": "3210540"
  },
  {
    "text": "but then it got somewhat stale Tran came along and GCC's much better now",
    "start": "3210540",
    "end": "3217070"
  },
  {
    "text": "competition my Microsoft is much better now so hello at least a low number our front",
    "start": "3217070",
    "end": "3225119"
  },
  {
    "text": "end puts a lot of pressure on",
    "start": "3225119",
    "end": "3229910"
  },
  {
    "text": "stand-ups compliance and also on performance and error messages and",
    "start": "3230920",
    "end": "3236200"
  },
  {
    "text": "compile time speed all this good stuff that we want do you think crazy question",
    "start": "3236200",
    "end": "3243180"
  },
  {
    "start": "3240000",
    "end": "3484000"
  },
  {
    "text": "there might come along you hope that might come along implementation of C++",
    "start": "3243180",
    "end": "3250079"
  },
  {
    "text": "written given all its history written from scratch so written today from",
    "start": "3250079",
    "end": "3258579"
  },
  {
    "text": "scratch well playing and the LLVM this more less written by from scratch but",
    "start": "3258579",
    "end": "3265119"
  },
  {
    "text": "there's been c++ 11 14 17 20 you know",
    "start": "3265119",
    "end": "3270279"
  },
  {
    "text": "there's been a lot you know later somebody's going to try again there has been attempts to write new C++ compilers",
    "start": "3270279",
    "end": "3278230"
  },
  {
    "text": "and some of them has been used and some of them has been absorbed into others and so yeah I don't happen so what are",
    "start": "3278230",
    "end": "3286690"
  },
  {
    "text": "the key features of C++ and let's use that as a way to sort of talk about the",
    "start": "3286690",
    "end": "3294599"
  },
  {
    "text": "evolution of C++ the new feature so at the highest level what are the features",
    "start": "3294599",
    "end": "3300670"
  },
  {
    "text": "that were there in the beginning what features got added its first get a",
    "start": "3300670",
    "end": "3306420"
  },
  {
    "text": "principal on aim in place C++ is for",
    "start": "3306420",
    "end": "3312490"
  },
  {
    "text": "people who want to use hardware really well and then manage the complexity of",
    "start": "3312490",
    "end": "3318369"
  },
  {
    "text": "doing that through abstraction and so the first facility you you have is a way",
    "start": "3318369",
    "end": "3326859"
  },
  {
    "text": "of manipulating the machines at a fairly low level that looks very much like see",
    "start": "3326859",
    "end": "3332880"
  },
  {
    "text": "it has loops it has variables it has",
    "start": "3332880",
    "end": "3338259"
  },
  {
    "text": "pointers like machine addresses it can access memory directly it can allocate",
    "start": "3338259",
    "end": "3344710"
  },
  {
    "text": "stuff in the absolute minimum of space needed on the machine there's a machine",
    "start": "3344710",
    "end": "3351609"
  },
  {
    "text": "facing part of C++ which is roughly equivalent to C I said C++ could beat C",
    "start": "3351609",
    "end": "3359200"
  },
  {
    "text": "and it can doesn't mean I dislike see if I disliked C wouldn't have built on it furthermore",
    "start": "3359200",
    "end": "3366920"
  },
  {
    "text": "after Dennis Ritchie I'm probably the major contributor to modern C and well I",
    "start": "3366920",
    "end": "3375260"
  },
  {
    "text": "had lunch with Dennis most days for 16 years and we never had a harsh word",
    "start": "3375260",
    "end": "3383510"
  },
  {
    "text": "between us so these C versus C++ fights are for people who don't quite",
    "start": "3383510",
    "end": "3389840"
  },
  {
    "text": "understand what's going on then the other part is the abstraction and there",
    "start": "3389840",
    "end": "3395990"
  },
  {
    "text": "the key is the class which is a user defined type and my idea for the class",
    "start": "3395990",
    "end": "3401990"
  },
  {
    "text": "is that you should be able to build a type that's just like the building types in in the way you use them in the way",
    "start": "3401990",
    "end": "3409580"
  },
  {
    "text": "you declare them and the way you get the memory and you can do just as well",
    "start": "3409580",
    "end": "3415460"
  },
  {
    "text": "so in C++ there's an int as in C you",
    "start": "3415460",
    "end": "3421190"
  },
  {
    "text": "should be able to build an abstraction a class which we can call capital int that",
    "start": "3421190",
    "end": "3427850"
  },
  {
    "text": "you could use exactly like an integer and run just as fast as an integer",
    "start": "3427850",
    "end": "3432910"
  },
  {
    "text": "there's the idea right there and of course you probably don't want to use",
    "start": "3432910",
    "end": "3438650"
  },
  {
    "text": "the int itself but it has happened people have wanted integers that were",
    "start": "3438650",
    "end": "3445160"
  },
  {
    "text": "range checked so that you couldn't overflow one such especially for very safety critical applications like the",
    "start": "3445160",
    "end": "3452480"
  },
  {
    "text": "fuel injection for a marine diesel engine for the largest ships this is a",
    "start": "3452480",
    "end": "3457520"
  },
  {
    "text": "real example by the way this has been done they they built themselves an integer that was just like integer",
    "start": "3457520",
    "end": "3464990"
  },
  {
    "text": "except that couldn't overflow if there's no or flow you went into the error handling and then you built more",
    "start": "3464990",
    "end": "3473480"
  },
  {
    "text": "interesting types you can build a matrix which you need to do graphics or you",
    "start": "3473480",
    "end": "3480530"
  },
  {
    "text": "could build a gnome for a for a video game and all these are classes and they",
    "start": "3480530",
    "end": "3486500"
  },
  {
    "start": "3484000",
    "end": "3600000"
  },
  {
    "text": "appear just like the built-in types exciting terms of efficiency and so on so what else is there and flexibility so",
    "start": "3486500",
    "end": "3495130"
  },
  {
    "text": "I don't know for people who are not familiar with object-oriented programming there's inheritance there's a hierarchy",
    "start": "3495130",
    "end": "3502479"
  },
  {
    "text": "of classes you you can just like you said create a generic vehicle that can",
    "start": "3502479",
    "end": "3508059"
  },
  {
    "text": "turn left so what people found was that",
    "start": "3508059",
    "end": "3513309"
  },
  {
    "text": "you don't actually know how do I say",
    "start": "3513309",
    "end": "3518440"
  },
  {
    "text": "this a lot of types are related that is the",
    "start": "3518440",
    "end": "3525640"
  },
  {
    "text": "vehicles all the accounts are related bicycles cars fire engines tanks they",
    "start": "3525640",
    "end": "3534099"
  },
  {
    "text": "have some things in common and some things that differ and you would like to have the common things common and having",
    "start": "3534099",
    "end": "3540609"
  },
  {
    "text": "the differences specific and when you didn't want to know about the differences like just turn left",
    "start": "3540609",
    "end": "3549180"
  },
  {
    "text": "uuuuu you don't have to worry about it that's how you get the traditional object-oriented programming coming out",
    "start": "3549180",
    "end": "3555549"
  },
  {
    "text": "of simulate opted by small talk and C++ and all the other languages the other",
    "start": "3555549",
    "end": "3562029"
  },
  {
    "text": "kind of obvious similarity between types comes when you have something like a vector fortune gave us the vector as",
    "start": "3562029",
    "end": "3571029"
  },
  {
    "text": "called array of doubles but the minute",
    "start": "3571029",
    "end": "3576249"
  },
  {
    "text": "you have a vector of doubles you want a vector or double precision doubles and",
    "start": "3576249",
    "end": "3582219"
  },
  {
    "text": "for short doubles for graphics and why should you have not have a vector of",
    "start": "3582219",
    "end": "3587440"
  },
  {
    "text": "integers while you're added or vector of vectors and vector of vectors of chess",
    "start": "3587440",
    "end": "3594789"
  },
  {
    "text": "pieces now we have a board right so this",
    "start": "3594789",
    "end": "3599890"
  },
  {
    "text": "is you express array the commonality as the idea of a vector and the variations",
    "start": "3599890",
    "end": "3607569"
  },
  {
    "text": "come through parameterization and so here we get the two fundamental ways of",
    "start": "3607569",
    "end": "3613809"
  },
  {
    "text": "abstracting or of having similarities of",
    "start": "3613809",
    "end": "3618900"
  },
  {
    "text": "types in C++ there's the inheritance and there's a parameterization",
    "start": "3618900",
    "end": "3624249"
  },
  {
    "text": "there's the object-oriented programming in this generic programming with the templates for the generic",
    "start": "3624249",
    "end": "3630140"
  },
  {
    "text": "program yeah so you you've presented it very nicely but now you have to make all",
    "start": "3630140",
    "end": "3637520"
  },
  {
    "text": "that happen and make it efficient so generic programming with templates",
    "start": "3637520",
    "end": "3643190"
  },
  {
    "text": "there's all kinds of magic going on especially recently that you can help",
    "start": "3643190",
    "end": "3648559"
  },
  {
    "text": "catch up on but it feels to me like you can do way more than what you just said with templates you can start doing this",
    "start": "3648559",
    "end": "3656750"
  },
  {
    "text": "kind of meta programming this kind you can do meta programming also I I didn't go there and in that explanation we're",
    "start": "3656750",
    "end": "3664549"
  },
  {
    "text": "trying to be very basics but go back on so the implementation implementation if you couldn't implement this efficiently",
    "start": "3664549",
    "end": "3670640"
  },
  {
    "text": "if you couldn't use it so that it became efficient it has no place in C++ because",
    "start": "3670640",
    "end": "3677809"
  },
  {
    "text": "it were violates the zero overhead principle so when I had to get up during",
    "start": "3677809",
    "end": "3685280"
  },
  {
    "text": "programming inheritance I took the idea of virtual functions from Simula virtual",
    "start": "3685280",
    "end": "3692839"
  },
  {
    "text": "functions is a similar term class is a similar term if you ever use those words",
    "start": "3692839",
    "end": "3698420"
  },
  {
    "text": "say thanks to question you go and all you and I'll and I did the simplest",
    "start": "3698420",
    "end": "3705770"
  },
  {
    "text": "implementation I knew off which was basically a jump table so you get the",
    "start": "3705770",
    "end": "3712069"
  },
  {
    "text": "virtual function table or the function goes in do it does an indirection through a table and get the right",
    "start": "3712069",
    "end": "3718369"
  },
  {
    "text": "function that's how you pick the right thing there and I thought that was",
    "start": "3718369",
    "end": "3723380"
  },
  {
    "text": "trivial it's close to optimal it's endo is obvious it turned out the Simula had",
    "start": "3723380",
    "end": "3730130"
  },
  {
    "text": "a more complicated way of doing it therefore slower and it turns out that",
    "start": "3730130",
    "end": "3735770"
  },
  {
    "text": "most languages have something that's a little bit more complicated sometimes more flexible but you pay for it and one",
    "start": "3735770",
    "end": "3743000"
  },
  {
    "text": "of the strengths of C++ was that you could actually do this object-oriented stuff and your overhead compared to",
    "start": "3743000",
    "end": "3750549"
  },
  {
    "text": "ordinary functions there's no interactions it's not open five ten",
    "start": "3750549",
    "end": "3756530"
  },
  {
    "text": "twenty five percent for just the core it sits down there it's not too and that means you can afford to use it",
    "start": "3756530",
    "end": "3765150"
  },
  {
    "text": "furthermore in C++ you have the distinction between a virtual function",
    "start": "3765150",
    "end": "3770190"
  },
  {
    "text": "and a non-virtual function if you don't want any overhead if you don't need the interaction that gives you the",
    "start": "3770190",
    "end": "3776820"
  },
  {
    "text": "flexibility in object-oriented programming just don't ask for it so the",
    "start": "3776820",
    "end": "3783090"
  },
  {
    "text": "idea is that you only use virtual functions if you actually need the flexibility so it's not zero overhead",
    "start": "3783090",
    "end": "3790230"
  },
  {
    "text": "but zero overhead compared to any other way of achieving the flexibility now",
    "start": "3790230",
    "end": "3796770"
  },
  {
    "text": "also parameterization basically the",
    "start": "3796770",
    "end": "3802590"
  },
  {
    "text": "compiler looks at at the the template",
    "start": "3802590",
    "end": "3808160"
  },
  {
    "text": "say the vector and it looks at the",
    "start": "3808160",
    "end": "3813380"
  },
  {
    "text": "parameter and then combines the two and generates a piece of code that is",
    "start": "3813380",
    "end": "3819240"
  },
  {
    "text": "exactly as if you're written a vector off that specific type yes so that's the",
    "start": "3819240",
    "end": "3825330"
  },
  {
    "text": "that's the minimal overhead if you have many template parameters you can actually combine code that the compiler",
    "start": "3825330",
    "end": "3832410"
  },
  {
    "text": "couldn't usually see at the same time and therefore get code that is faster",
    "start": "3832410",
    "end": "3838770"
  },
  {
    "text": "then if you had handwritten stuff on this you are very very clever so the",
    "start": "3838770",
    "end": "3845550"
  },
  {
    "text": "thing is Parature i's code the compiler fills stuff in during the compilation",
    "start": "3845550",
    "end": "3852240"
  },
  {
    "text": "process not during runtime that's right and so in furthermore it gives all the",
    "start": "3852240",
    "end": "3859230"
  },
  {
    "text": "information it's gotten which is the template the parameter and the context",
    "start": "3859230",
    "end": "3865170"
  },
  {
    "text": "of use it combines the three and generates good code but it can generate",
    "start": "3865170",
    "end": "3872960"
  },
  {
    "text": "now it's a little outside of what I'm even comfortable thinking about but it",
    "start": "3872960",
    "end": "3878040"
  },
  {
    "text": "can generate a lot of code yes and how do you remember being both amazed at the",
    "start": "3878040",
    "end": "3886680"
  },
  {
    "text": "power of that idea and how ugly the",
    "start": "3886680",
    "end": "3891900"
  },
  {
    "text": "debugging look the debugging can be truly horrid come",
    "start": "3891900",
    "end": "3897130"
  },
  {
    "text": "back to this because I have a solution anyway the debugging was ugly the code",
    "start": "3897130",
    "end": "3904120"
  },
  {
    "text": "generated by C++ has always been ugly because there's these inherent",
    "start": "3904120",
    "end": "3910990"
  },
  {
    "text": "optimizations a modern C++ compiler has runned in middle-end and beckoned",
    "start": "3910990",
    "end": "3916200"
  },
  {
    "text": "optimizations even C front back in 83 had front end and back end optimizations",
    "start": "3916200",
    "end": "3923170"
  },
  {
    "text": "I actually took the code generated an internal representation munch that",
    "start": "3923170",
    "end": "3930160"
  },
  {
    "text": "implements a representation to generate good code so people says it's not a",
    "start": "3930160",
    "end": "3935380"
  },
  {
    "text": "compiler I generate see if the reason it generated C was a one that you used to C's code generators that are really good",
    "start": "3935380",
    "end": "3941890"
  },
  {
    "text": "at backend optimizations but I need a front end of two eyes Asians and therefore the C I generated was",
    "start": "3941890",
    "end": "3949180"
  },
  {
    "text": "optimized C hmm the way really good up a",
    "start": "3949180",
    "end": "3955300"
  },
  {
    "text": "handcrafted optimize a human who could could generate it and it was not meant",
    "start": "3955300",
    "end": "3960640"
  },
  {
    "text": "for humans it was the output of a program and it's much worse today and with templates it gets much worse still",
    "start": "3960640",
    "end": "3967360"
  },
  {
    "text": "so it's hard to do it's hard to combine simple debugging with simple with the",
    "start": "3967360",
    "end": "3975910"
  },
  {
    "text": "optimal code because the idea is to drag in information from different parts of",
    "start": "3975910",
    "end": "3981100"
  },
  {
    "text": "the code to generate good code machine",
    "start": "3981100",
    "end": "3986170"
  },
  {
    "text": "code and that's not readable so what",
    "start": "3986170",
    "end": "3991780"
  },
  {
    "text": "people often do for debugging is they turn the optimizer off and so you get",
    "start": "3991780",
    "end": "3997990"
  },
  {
    "text": "code that when you when when something in your source code looks like a",
    "start": "3997990",
    "end": "4003270"
  },
  {
    "text": "function call it is a function call when the optimizer is turned on it may",
    "start": "4003270",
    "end": "4009660"
  },
  {
    "text": "disappear the function call it may inline and so one of the things you can",
    "start": "4009660",
    "end": "4015060"
  },
  {
    "text": "do is you can actually get code that is",
    "start": "4015060",
    "end": "4020390"
  },
  {
    "text": "smaller than the function call because you eliminate the function preamble and",
    "start": "4020390",
    "end": "4026280"
  },
  {
    "text": "returned and that's just the operation there one of the key things when I did",
    "start": "4026280",
    "end": "4034099"
  },
  {
    "text": "templates was I wanted to make sure that if you have say a sort algorithm and you",
    "start": "4034099",
    "end": "4039780"
  },
  {
    "text": "give it a sorting criteria if that",
    "start": "4039780",
    "end": "4046619"
  },
  {
    "text": "sorting criteria is simply comparing things with lesson the code generators should be the less",
    "start": "4046619",
    "end": "4053790"
  },
  {
    "text": "than not a indirect function call to a compression object which is what it is",
    "start": "4053790",
    "end": "4062490"
  },
  {
    "text": "in the source code but we really want down to the single instruction and but",
    "start": "4062490",
    "end": "4069930"
  },
  {
    "text": "anyway turn off the optimizer and and you can you can debug the first level of debugging can be done and I always do",
    "start": "4069930",
    "end": "4077670"
  },
  {
    "text": "without the optimization on because then I can see what's going on and then there's this idea of concepts that puts",
    "start": "4077670",
    "end": "4086490"
  },
  {
    "text": "some now I've never even the I don't",
    "start": "4086490",
    "end": "4092250"
  },
  {
    "text": "know if it was ever available in any form but it puts some constraints on the",
    "start": "4092250",
    "end": "4097410"
  },
  {
    "text": "stuff you can parameterize essentially let me try and explain yes so yes it",
    "start": "4097410",
    "end": "4104580"
  },
  {
    "text": "wasn't there ten years ago we have had versions of it that actually work for",
    "start": "4104580",
    "end": "4112560"
  },
  {
    "text": "the last four or five years it was a design by Gabby does raise true certain",
    "start": "4112560",
    "end": "4119850"
  },
  {
    "text": "and me we were professors and postdocs in Texas at the time and the",
    "start": "4119850",
    "end": "4127980"
  },
  {
    "text": "implementation by Andrew Sutton has been available for at that time and it is",
    "start": "4127980",
    "end": "4136130"
  },
  {
    "text": "part of C++ 20 and the standard library",
    "start": "4136130",
    "end": "4141778"
  },
  {
    "text": "that uses it so this is becoming really very real it's available in clang and",
    "start": "4141779",
    "end": "4149719"
  },
  {
    "text": "GCC GCC for a couple of years and I believe Microsoft zum-zum going to",
    "start": "4149719",
    "end": "4156759"
  },
  {
    "text": "do it expect a wall of C++ 20 to be available so in all the major compilers",
    "start": "4156760",
    "end": "4162549"
  },
  {
    "text": "in 20 but this kind of stuff is it's",
    "start": "4162550",
    "end": "4167830"
  },
  {
    "text": "available now I'm just saying that because otherwise people might think I was talking about science fiction and so",
    "start": "4167830",
    "end": "4175210"
  },
  {
    "text": "what I'm going to say Israel on Crete you can write it today and there's production users of it so",
    "start": "4175210",
    "end": "4182088"
  },
  {
    "text": "the basic idea is that when you have a a",
    "start": "4182089",
    "end": "4187359"
  },
  {
    "text": "generic component like a sort function the sort function will will require at",
    "start": "4187359",
    "end": "4195199"
  },
  {
    "text": "least two parameters one a data structure with a given type and",
    "start": "4195199",
    "end": "4201520"
  },
  {
    "text": "comparison criteria and these things are related but obviously you can't compare",
    "start": "4201520",
    "end": "4208640"
  },
  {
    "text": "things if you don't know what the type of things you compare and so you want to be able to say I'm",
    "start": "4208640",
    "end": "4217170"
  },
  {
    "text": "going to sort something and did this to be sortable what does it mean to be sortable you look it up in the standard",
    "start": "4217170",
    "end": "4223170"
  },
  {
    "text": "it has to have it has to be a sequence with a beginning and an end there has to",
    "start": "4223170",
    "end": "4228780"
  },
  {
    "text": "be random access to that sequence and there has to be the element types has to",
    "start": "4228780",
    "end": "4236340"
  },
  {
    "text": "be comparable like you more like an operator can I do it yes what illogical",
    "start": "4236340",
    "end": "4242160"
  },
  {
    "text": "already cannot basically what concepts are there compile-time predicates there",
    "start": "4242160",
    "end": "4247500"
  },
  {
    "text": "predicates you can ask are you a sequence yes I have begin an end",
    "start": "4247500",
    "end": "4253350"
  },
  {
    "text": "are you a random exit sequence yes I have subscripting and plus it's your",
    "start": "4253350",
    "end": "4261570"
  },
  {
    "text": "element type something that has a less then yes I have a less than hits and so",
    "start": "4261570",
    "end": "4267570"
  },
  {
    "text": "basically that's the system and so instead of saying I will take a parameter of any type it'll say I'll",
    "start": "4267570",
    "end": "4273900"
  },
  {
    "text": "take something that's audible and it's well defined and so we say okay you can",
    "start": "4273900",
    "end": "4281070"
  },
  {
    "text": "sorta less then I don't want less then I want greater then also something I invent so you have two parameters the",
    "start": "4281070",
    "end": "4287460"
  },
  {
    "text": "sortable thing and the compassion criteria and the comparison criteria",
    "start": "4287460",
    "end": "4293220"
  },
  {
    "text": "will say well I can you you can write it saying it should operate on the element",
    "start": "4293220",
    "end": "4300660"
  },
  {
    "text": "type and it has the compassion operations so that's the simply the",
    "start": "4300660",
    "end": "4307230"
  },
  {
    "text": "fundamental thing it's compile-time predicates do you have the properties I need so it specifies the requirements of",
    "start": "4307230",
    "end": "4314720"
  },
  {
    "text": "the code on the parameters that gets yes",
    "start": "4314720",
    "end": "4320010"
  },
  {
    "text": "there are lots of types actually but operating in the space of concepts",
    "start": "4320010",
    "end": "4326960"
  },
  {
    "text": "concepts the word concept was used by",
    "start": "4326960",
    "end": "4332250"
  },
  {
    "text": "Alec Stephan of who is sort of the father of generic programming in the context of C++",
    "start": "4332250",
    "end": "4339360"
  },
  {
    "text": "there's other places that use that word but the way we call Genetic Programming",
    "start": "4339360",
    "end": "4344500"
  },
  {
    "text": "is Alex's and he called them concepts because he said there they are the sort",
    "start": "4344500",
    "end": "4349540"
  },
  {
    "text": "of the fundamental concepts of an area so they should be called concepts and",
    "start": "4349540",
    "end": "4354699"
  },
  {
    "text": "we've had concepts all the time if you look at the knr book about si si has",
    "start": "4354699",
    "end": "4360489"
  },
  {
    "text": "arithmetic types and it has integral",
    "start": "4360489",
    "end": "4366340"
  },
  {
    "text": "types it says so in the book and then it lists what they are and they have",
    "start": "4366340",
    "end": "4372070"
  },
  {
    "text": "certain properties the difference today is that we can actually write a concept",
    "start": "4372070",
    "end": "4377080"
  },
  {
    "text": "that will ask a type are you an integral type do you have the properties",
    "start": "4377080",
    "end": "4382900"
  },
  {
    "text": "necessary to be an integral type do you have Proust - divide so what may be the",
    "start": "4382900",
    "end": "4390100"
  },
  {
    "text": "story of concepts because I thought it",
    "start": "4390100",
    "end": "4395170"
  },
  {
    "text": "might be part of C++ 11 C C C's o X or",
    "start": "4395170",
    "end": "4401260"
  },
  {
    "text": "whatever it was at the time what was the why didn't it look like what we'll talk",
    "start": "4401260",
    "end": "4407920"
  },
  {
    "text": "a little bit about this fascinating process of standards because I think it's really interesting for people it's interesting for me but why did it take",
    "start": "4407920",
    "end": "4416170"
  },
  {
    "text": "so long what shapes the the idea of concepts take what were the challenges",
    "start": "4416170",
    "end": "4422969"
  },
  {
    "text": "back in 87 of there abouts 97 well 1987",
    "start": "4422969",
    "end": "4430420"
  },
  {
    "text": "like they are about so when I was designing templates obviously I wanted to express the notion of what is",
    "start": "4430420",
    "end": "4436930"
  },
  {
    "text": "required by a template of its arguments and so I looked at this and basically",
    "start": "4436930",
    "end": "4443739"
  },
  {
    "text": "for for templates I wanted three properties I wanted to be very flexible",
    "start": "4443739",
    "end": "4450180"
  },
  {
    "text": "it had to be able to express things I couldn't imagine because I know I can't",
    "start": "4450180",
    "end": "4458080"
  },
  {
    "text": "imagine everything and I've been suffering from languages and try to constrain you to only do what you're the",
    "start": "4458080",
    "end": "4465190"
  },
  {
    "text": "designer thought good didn't want to do that secondly it had to run faster",
    "start": "4465190",
    "end": "4472030"
  },
  {
    "text": "as faster faster that hand written code so basically if I have a vector of T and",
    "start": "4472030",
    "end": "4477730"
  },
  {
    "text": "I take a vector of cha it should run as fast as you built a vector of cha",
    "start": "4477730",
    "end": "4484000"
  },
  {
    "text": "yourself without parameterization and second and thirdly I wanted to be able",
    "start": "4484000",
    "end": "4490750"
  },
  {
    "text": "to express the constraints of of the",
    "start": "4490750",
    "end": "4497380"
  },
  {
    "text": "arguments have proper type checking of the interfaces and neither I nor anybody",
    "start": "4497380",
    "end": "4503320"
  },
  {
    "text": "else at the time knew how to get all three and I thought for C++ I must have",
    "start": "4503320",
    "end": "4510130"
  },
  {
    "text": "the two first otherwise it's not C++ and it bothered me for an hour a couple of",
    "start": "4510130",
    "end": "4517120"
  },
  {
    "text": "decades that I couldn't solve the third one I mean I was the one that put",
    "start": "4517120",
    "end": "4522180"
  },
  {
    "text": "function argument type checking in to see I know the value of good interfaces",
    "start": "4522180",
    "end": "4527860"
  },
  {
    "text": "I didn't invent that idea it's very common but I did it and I wanted to do",
    "start": "4527860",
    "end": "4534130"
  },
  {
    "text": "the same for templates of course and I could so it bothered me then we try it",
    "start": "4534130",
    "end": "4540580"
  },
  {
    "text": "again mm of to 2003 cavitus raised and I started analyzing",
    "start": "4540580",
    "end": "4547210"
  },
  {
    "text": "the problem explained possible solutions there was not a complete design a group",
    "start": "4547210",
    "end": "4554860"
  },
  {
    "text": "in University of Indiana an old friend of mine they started a project at",
    "start": "4554860",
    "end": "4563530"
  },
  {
    "text": "Indiana and we thought we could get a",
    "start": "4563530",
    "end": "4570810"
  },
  {
    "text": "good system of concepts in another two or three years that would have made C++",
    "start": "4570810",
    "end": "4579610"
  },
  {
    "text": "la 11 to C++ Oh 607 well it turns out",
    "start": "4579610",
    "end": "4587290"
  },
  {
    "text": "that I think we got a lot of the fundamental ideas are wrong they were",
    "start": "4587290",
    "end": "4593380"
  },
  {
    "text": "took on conventional they didn't quite fit C++ in my opinion didn't serve",
    "start": "4593380",
    "end": "4600100"
  },
  {
    "text": "implicit conversions very well it didn't of mixed makes type arithmetic mix type",
    "start": "4600100",
    "end": "4607070"
  },
  {
    "text": "computation computations very well a lot of stuff came out of the functional",
    "start": "4607070",
    "end": "4614060"
  },
  {
    "text": "community and it that community didn't",
    "start": "4614060",
    "end": "4621300"
  },
  {
    "text": "deal with multiple types in in the same way as C++ does had more constraints on",
    "start": "4621300",
    "end": "4628080"
  },
  {
    "text": "on what you could express and didn't have the draconian performance",
    "start": "4628080",
    "end": "4634590"
  },
  {
    "text": "requirements and basically we tried we tried very hard we had some successes",
    "start": "4634590",
    "end": "4640610"
  },
  {
    "text": "but it just in the end wasn't didn't",
    "start": "4640610",
    "end": "4646260"
  },
  {
    "text": "compile fast enough was too hard to use and didn't run fast enough unless you",
    "start": "4646260",
    "end": "4653699"
  },
  {
    "text": "had optimizes that was beyond the state",
    "start": "4653699",
    "end": "4658920"
  },
  {
    "text": "of the art they still are so we had to do something else basically it was the",
    "start": "4658920",
    "end": "4664290"
  },
  {
    "text": "idea that a set of parameters has defines a set of operations and you go",
    "start": "4664290",
    "end": "4672060"
  },
  {
    "text": "through an interaction table just like for virtual functions and then you try to optimize the interaction away to get",
    "start": "4672060",
    "end": "4680850"
  },
  {
    "text": "performance and we just couldn't do all of that but get back to the",
    "start": "4680850",
    "end": "4687420"
  },
  {
    "text": "standardization we are standardizing C++ on the ISO rules which a very open",
    "start": "4687420",
    "end": "4694500"
  },
  {
    "text": "process people come in there's no requirements for education or experience",
    "start": "4694500",
    "end": "4700100"
  },
  {
    "text": "they start develop C++ and there's a",
    "start": "4700100",
    "end": "4705650"
  },
  {
    "text": "hope when was the first standard established what is that like the ISO",
    "start": "4705650",
    "end": "4711659"
  },
  {
    "text": "standard is there committee that you're referring to she was a group of people what it was that like how often do you",
    "start": "4711659",
    "end": "4718320"
  },
  {
    "text": "meet what's the disguise I'll try and explain that so sometime in early 1989",
    "start": "4718320",
    "end": "4727909"
  },
  {
    "text": "two people one from IBM one from HP turned up in my office and told me I",
    "start": "4728869",
    "end": "4735840"
  },
  {
    "text": "would like to standardize it PLAs PLAs this was a new idea to me and I pointed",
    "start": "4735840",
    "end": "4743830"
  },
  {
    "text": "out that it wasn't finished yet it wasn't ready for former standardization",
    "start": "4743830",
    "end": "4749830"
  },
  {
    "text": "and such and they say no beyond even gotten it you you really want to do this",
    "start": "4749830",
    "end": "4755610"
  },
  {
    "text": "our organizations depend on c++ we cannot depend on something that's owned",
    "start": "4755610",
    "end": "4763150"
  },
  {
    "text": "by another corporation that might be a competitor of course we could rely on",
    "start": "4763150",
    "end": "4768400"
  },
  {
    "text": "you but you might get run over by a bus right the old really needs to get this",
    "start": "4768400",
    "end": "4775390"
  },
  {
    "text": "out new it has to be standardized under formal rules and we are going to",
    "start": "4775390",
    "end": "4783670"
  },
  {
    "text": "standardize it under ISO rules and you",
    "start": "4783670",
    "end": "4789220"
  },
  {
    "text": "really want to be part of it because basically otherwise we will do it ourselves and we know you can do it",
    "start": "4789220",
    "end": "4796090"
  },
  {
    "text": "better so through a combination of",
    "start": "4796090",
    "end": "4801120"
  },
  {
    "text": "arm-twisting and flattery Carolus started so in late",
    "start": "4801120",
    "end": "4808170"
  },
  {
    "text": "in late 89 there was a meeting in DC at",
    "start": "4808170",
    "end": "4813690"
  },
  {
    "text": "the x-ray no it was not ISO then it was an SI the American national standard",
    "start": "4813690",
    "end": "4819929"
  },
  {
    "text": "were doing we met there we were lectured on the",
    "start": "4819929",
    "end": "4826020"
  },
  {
    "text": "rules of how to do when ANSI standard there was about 25 of us there which",
    "start": "4826020",
    "end": "4831690"
  },
  {
    "text": "apparently was a new record for that kind of meeting and some of the old see",
    "start": "4831690",
    "end": "4838200"
  },
  {
    "text": "guys that it's been standardizing see was there so we got some expertise in so",
    "start": "4838200",
    "end": "4843270"
  },
  {
    "text": "the way this works is that it's an open process anybody can consign up if they pay the",
    "start": "4843270",
    "end": "4849300"
  },
  {
    "text": "minimal fee which is about a thousand dollars still less then just a little",
    "start": "4849300",
    "end": "4854460"
  },
  {
    "text": "bit more now and I think it's twelve hundred and eighty dollars it's not it's",
    "start": "4854460",
    "end": "4860220"
  },
  {
    "text": "not going to kill you and we have three meetings a year this",
    "start": "4860220",
    "end": "4866220"
  },
  {
    "text": "is fairly standard we try to meetings a year for a couple",
    "start": "4866220",
    "end": "4871260"
  },
  {
    "text": "years that didn't work too well so three weeks is three one-week meetings a year",
    "start": "4871260",
    "end": "4877200"
  },
  {
    "text": "and you meet and you have taken meet",
    "start": "4877200",
    "end": "4882840"
  },
  {
    "text": "technical discussions and then you bring proposals forward for votes the votes",
    "start": "4882840",
    "end": "4889170"
  },
  {
    "text": "are done one person per one vote per",
    "start": "4889170",
    "end": "4894290"
  },
  {
    "text": "organization so you can't have say IBM come in with 10 people and dominate",
    "start": "4894290",
    "end": "4901110"
  },
  {
    "text": "things that's not allowed and these organizations that extends to the UC bus bus this yes this is all individuals or",
    "start": "4901110",
    "end": "4908940"
  },
  {
    "text": "individuals I mean it's a it's a bunch of people in room deciding the design of",
    "start": "4908940",
    "end": "4915000"
  },
  {
    "text": "a language based on which a lot of the world's systems run right well I think",
    "start": "4915000",
    "end": "4922410"
  },
  {
    "text": "most people would agree it's better than if I decided it or better than if a",
    "start": "4922410",
    "end": "4928230"
  },
  {
    "text": "single organization like agency decides it I don't know if everyone agrees to",
    "start": "4928230",
    "end": "4933300"
  },
  {
    "text": "that by the way bureaucracies have their critics - yes they they're that look",
    "start": "4933300",
    "end": "4940460"
  },
  {
    "text": "standardization is not pleasant it's it's it's horrifying like democracy what",
    "start": "4940460",
    "end": "4946920"
  },
  {
    "text": "we exactly as Churchill says democracy is the worst way except for or the",
    "start": "4946920",
    "end": "4952230"
  },
  {
    "text": "others right and it's about say the same reforms but anyway so we meet and we we have",
    "start": "4952230",
    "end": "4960150"
  },
  {
    "text": "these votes and that determines what the standard is couple of years later we",
    "start": "4960150",
    "end": "4967710"
  },
  {
    "text": "extended this so it became worldwide we have stand out of organizations that are",
    "start": "4967710",
    "end": "4974220"
  },
  {
    "text": "active in currently 15 to 20 countries",
    "start": "4974220",
    "end": "4979260"
  },
  {
    "text": "and another fifteen to twenty are sort of looking",
    "start": "4979260",
    "end": "4986710"
  },
  {
    "text": "and and voting based on the rest of the work on it and we meet three times a",
    "start": "4986710",
    "end": "4993820"
  },
  {
    "text": "year next week I'll be in Cologne Germany spending a week doing",
    "start": "4993820",
    "end": "5000530"
  },
  {
    "text": "standardization and we'll vote out the committee draft or c plus plus 20 which goes to the national standards",
    "start": "5000530",
    "end": "5008280"
  },
  {
    "text": "committees for comments and requests for changes and improvements then we do that",
    "start": "5008280",
    "end": "5016050"
  },
  {
    "text": "and there's a second set of votes where hopefully everybody votes in favor this",
    "start": "5016050",
    "end": "5021450"
  },
  {
    "text": "has happened several times the first time we finished we started in the first",
    "start": "5021450",
    "end": "5027390"
  },
  {
    "text": "technical meeting was in 1990 the last was in 98 we voted it out that was",
    "start": "5027390",
    "end": "5035130"
  },
  {
    "text": "suspended that people used till 11:00 or a little bit past 11:00 and was an",
    "start": "5035130",
    "end": "5041730"
  },
  {
    "text": "international standard all the countries voted in favor it took longer with 11",
    "start": "5041730",
    "end": "5049320"
  },
  {
    "text": "I'll mention why what all the nations voted in favor and we work on the basis",
    "start": "5049320",
    "end": "5057420"
  },
  {
    "text": "of consensus that is we do not want something that passes 6040 because then",
    "start": "5057420",
    "end": "5065160"
  },
  {
    "text": "we're going to get dialects and opponents and people complain too much they don't complain so much but",
    "start": "5065160",
    "end": "5071720"
  },
  {
    "text": "basically it no real effect the the standards has been obeyed they have been",
    "start": "5071720",
    "end": "5077820"
  },
  {
    "text": "working to make it easier to use many compilers many computers and all of that",
    "start": "5077820",
    "end": "5084480"
  },
  {
    "text": "kind of stuff and so the first the traditional with ISO standards to take",
    "start": "5084480",
    "end": "5091380"
  },
  {
    "text": "ten years we did the first one and eight brilliant and we thought we were going",
    "start": "5091380",
    "end": "5097200"
  },
  {
    "text": "to do the next one and six because now we're good at it right it took 13 yeah",
    "start": "5097200",
    "end": "5104790"
  },
  {
    "text": "it was named Oh X he was named Oh X hoping that you would at least get it in",
    "start": "5104790",
    "end": "5110610"
  },
  {
    "text": "within the single within the arts the single day I thought we would get yeah I thought would gets",
    "start": "5110610",
    "end": "5116430"
  },
  {
    "text": "six seven or eight the confidence of youth yes right well the point is that this was sort of like a second system",
    "start": "5116430",
    "end": "5124710"
  },
  {
    "text": "effect that is we now knew how to do it and so we're going to do it much better and we got more ambitious and bish han",
    "start": "5124710",
    "end": "5131610"
  },
  {
    "text": "dicho penguia furthermore there is this tendency because it's a 10-year cycle or",
    "start": "5131610",
    "end": "5139500"
  },
  {
    "text": "age doesn't matter just before you're out to ship somebody has a bright idea",
    "start": "5139500",
    "end": "5148430"
  },
  {
    "text": "yeah and so we really really must get that in we did that successfully with",
    "start": "5148490",
    "end": "5157680"
  },
  {
    "text": "the STL we got the the standard Liars all the STL stuff that that my base be I",
    "start": "5157680",
    "end": "5165720"
  },
  {
    "text": "think it saved C++ it was beautiful yes and then people tried it with all",
    "start": "5165720",
    "end": "5170940"
  },
  {
    "text": "our things and it didn't work so well they got things in but it wasn't as",
    "start": "5170940",
    "end": "5175980"
  },
  {
    "text": "dramatic and it took longer and longer and longer so after C++ 11 which was a huge",
    "start": "5175980",
    "end": "5183480"
  },
  {
    "text": "improvement and what basically what most people are using today we decided ever",
    "start": "5183480",
    "end": "5191190"
  },
  {
    "text": "again and so how do you avoid those slips and the answer is that you shipped more",
    "start": "5191190",
    "end": "5198850"
  },
  {
    "text": "often so that if you if you if you have a slip on the 10-year cycle by the time",
    "start": "5198850",
    "end": "5207100"
  },
  {
    "text": "you know it's a slip there's 11 years till you get it yeah now with a three year cycle there is about three or four",
    "start": "5207100",
    "end": "5215409"
  },
  {
    "text": "years till you get it like the delay between feature freeze and shipping so",
    "start": "5215409",
    "end": "5223300"
  },
  {
    "text": "you always get one or two years more and so we were shipped fourteen on time we",
    "start": "5223300",
    "end": "5229300"
  },
  {
    "text": "shipped seventeen on time and we ship we will ship 20 on time",
    "start": "5229300",
    "end": "5234969"
  },
  {
    "text": "it's it'll happen and furthermore this allow this gives a predictability that",
    "start": "5234969",
    "end": "5242500"
  },
  {
    "text": "allows the implementers the compiler implementers the library implementers so",
    "start": "5242500",
    "end": "5247869"
  },
  {
    "text": "they have a target and they deliver on it 11 took two years before most",
    "start": "5247869",
    "end": "5254650"
  },
  {
    "text": "compilers were good enough 14 most compilers were actually getting pretty",
    "start": "5254650",
    "end": "5260710"
  },
  {
    "text": "good in 14 17 everybody shipped in 17 well we are going to have at least",
    "start": "5260710",
    "end": "5269560"
  },
  {
    "text": "almost everybody's ship almost everything in 20 and I know this because they're shipping in nineteen predictably",
    "start": "5269560",
    "end": "5278139"
  },
  {
    "text": "this is good delivery on time is good and so yeah that's great those how it",
    "start": "5278139",
    "end": "5283630"
  },
  {
    "text": "works there's a lot of features that came in in C++ 11 there's a lot of",
    "start": "5283630",
    "end": "5290770"
  },
  {
    "text": "features at the birth of C++ they were amazing and ideas with concepts in 2020",
    "start": "5290770",
    "end": "5297719"
  },
  {
    "text": "what to you is the most justjust to you personally beautiful or just you sit",
    "start": "5297719",
    "end": "5308920"
  },
  {
    "text": "back and think wow that's just nice and clean feature of C++ I have written two",
    "start": "5308920",
    "end": "5319179"
  },
  {
    "text": "papers for the history of programming languages conference which basically asked me such questions",
    "start": "5319179",
    "end": "5325820"
  },
  {
    "text": "and I'm writing a third one which I will deliver at the history of programming",
    "start": "5325820",
    "end": "5331100"
  },
  {
    "text": "languages conference in London next year so I've been thinking about that and there is one play answer constructors",
    "start": "5331100",
    "end": "5338780"
  },
  {
    "text": "and destructors the way a constructor can establish the environment for the",
    "start": "5338780",
    "end": "5345140"
  },
  {
    "text": "use of the Java type for object and the destructor that cleans up any messes at",
    "start": "5345140",
    "end": "5351350"
  },
  {
    "text": "the end of it that is the key to C++ that's why we don't have to use garbage",
    "start": "5351350",
    "end": "5357200"
  },
  {
    "text": "collection that's how we can get predictable performance that's how you",
    "start": "5357200",
    "end": "5362210"
  },
  {
    "text": "can get the minimal overhead in many many cases and have really clean types",
    "start": "5362210",
    "end": "5369700"
  },
  {
    "text": "it's the idea of constructor destructor pairs sometimes it comes out under the",
    "start": "5369700",
    "end": "5376220"
  },
  {
    "text": "name our high AIII resource acquisition is initialization which is the idea that",
    "start": "5376220",
    "end": "5383510"
  },
  {
    "text": "you grab resources and the constructor and release them and destructor it's",
    "start": "5383510",
    "end": "5388850"
  },
  {
    "text": "also the best example of why I shouldn't be in advertising I get the best idea",
    "start": "5388850",
    "end": "5393950"
  },
  {
    "text": "and I call it resource acquisition is initialization not the greatest naming",
    "start": "5393950",
    "end": "5400790"
  },
  {
    "text": "I've ever heard so it's types",
    "start": "5400790",
    "end": "5407380"
  },
  {
    "text": "abstraction of types you said I want to create my own types so types is an",
    "start": "5407380",
    "end": "5414410"
  },
  {
    "text": "essential part of C++ and making them efficient as the if it is the key part",
    "start": "5414410",
    "end": "5420860"
  },
  {
    "text": "and GU the this is almost getting philosophical but the construction and",
    "start": "5420860",
    "end": "5427820"
  },
  {
    "text": "the destruction the creation of an instance of a type and the freeing of",
    "start": "5427820",
    "end": "5434200"
  },
  {
    "text": "resources from that instance of a type is what defines the object is uh that's",
    "start": "5434200",
    "end": "5442130"
  },
  {
    "text": "like birth and death is what defines human life yeah that's right",
    "start": "5442130",
    "end": "5447650"
  },
  {
    "text": "by the way philosophy is important you can't do good language design without",
    "start": "5447650",
    "end": "5453860"
  },
  {
    "text": "philosophy because what you are determining is what people can express this is very important by the way",
    "start": "5453860",
    "end": "5462250"
  },
  {
    "text": "constructors destructors came into C++ in 79 in about the second week of my",
    "start": "5462250",
    "end": "5469270"
  },
  {
    "text": "work with what was then Corsi of the classes it is a fundamental idea next comes the",
    "start": "5469270",
    "end": "5476080"
  },
  {
    "text": "fact that you need to control copying because once you control as you says",
    "start": "5476080",
    "end": "5481270"
  },
  {
    "text": "birth and death you have to control taking copies which is another way of",
    "start": "5481270",
    "end": "5487330"
  },
  {
    "text": "creating an object and finally you have to be able to move things around so you",
    "start": "5487330",
    "end": "5493600"
  },
  {
    "text": "get the move operations and that's the set of key operations you can define on",
    "start": "5493600",
    "end": "5499450"
  },
  {
    "text": "a C++ type inserts you those things are",
    "start": "5499450",
    "end": "5505060"
  },
  {
    "text": "just a beautiful part of C++ that is at",
    "start": "5505060",
    "end": "5510130"
  },
  {
    "text": "the core of it all yes you mentioned that you hope there will be one unified",
    "start": "5510130",
    "end": "5515560"
  },
  {
    "text": "set of guidelines in the future for how to construct the programming language so perhaps not one programming language but",
    "start": "5515560",
    "end": "5522490"
  },
  {
    "text": "a unification of how we build programming languages if you remember",
    "start": "5522490",
    "end": "5529240"
  },
  {
    "text": "the statement I I have some trouble remembering it but I know the origin of that idea so maybe you can talk about",
    "start": "5529240",
    "end": "5536430"
  },
  {
    "text": "sort of C++ has been improving there's been a lot of programming language do you word is the arc of history taking us",
    "start": "5536430",
    "end": "5543700"
  },
  {
    "text": "do you hope that there is a unification about the languages with which we communicate in the digital space well",
    "start": "5543700",
    "end": "5552900"
  },
  {
    "text": "III think that languages should be designed not by clobbering language",
    "start": "5552900",
    "end": "5561100"
  },
  {
    "text": "features together and doing slightly different versions or somebody else's",
    "start": "5561100",
    "end": "5566380"
  },
  {
    "text": "ideas but through the creation of a set of principles rules of thumbs whatever",
    "start": "5566380",
    "end": "5575440"
  },
  {
    "text": "you call them I I made them for C++ and we're trying to teach people in the",
    "start": "5575440",
    "end": "5583900"
  },
  {
    "text": "Standards Committee about these rules because a lot of people come in and says I've got a great idea let's put it in",
    "start": "5583900",
    "end": "5589300"
  },
  {
    "text": "language and then you have to ask why does it fit in the language why does it fit in this",
    "start": "5589300",
    "end": "5594890"
  },
  {
    "text": "language it may fit in on our language and not here or may fit here not the other language",
    "start": "5594890",
    "end": "5601250"
  },
  {
    "text": "so you have to work from a set of principles and you have to develop that set of principles and it's one example",
    "start": "5601250",
    "end": "5612220"
  },
  {
    "text": "that I sometimes remember is I was sitting down with some of the designers",
    "start": "5612220",
    "end": "5618770"
  },
  {
    "text": "of common lisp and we are talking about languages and language features and",
    "start": "5618770",
    "end": "5626470"
  },
  {
    "text": "obviously we didn't agree about anything because well this was not C++ and vice",
    "start": "5626470",
    "end": "5632930"
  },
  {
    "text": "versa too many parenthesis but suddenly we started making progress I said I had",
    "start": "5632930",
    "end": "5641330"
  },
  {
    "text": "this problem and I developed it according to these ideas and they said",
    "start": "5641330",
    "end": "5646940"
  },
  {
    "text": "what why we had that problem different problem and we develop it the same kind of principles and so we worked through",
    "start": "5646940",
    "end": "5655810"
  },
  {
    "text": "large chunks of C++ and large chunks of Common Lisp and figure out we actually",
    "start": "5655810",
    "end": "5663320"
  },
  {
    "text": "had similar sets of principles of how to do it but the constraints on our designs",
    "start": "5663320",
    "end": "5670640"
  },
  {
    "text": "were very different and the aims for the usage was very different but there was",
    "start": "5670640",
    "end": "5677600"
  },
  {
    "text": "commonality in the way you reason about language features and the fundamental",
    "start": "5677600",
    "end": "5684410"
  },
  {
    "text": "principles you are trying to do so do you think that's possible to so they're just like there is perhaps a unified",
    "start": "5684410",
    "end": "5692150"
  },
  {
    "text": "theory of physics of the fundamental forces of physics now I'm sure there is",
    "start": "5692150",
    "end": "5699880"
  },
  {
    "text": "commonalities among the languages but there's also people involved you know",
    "start": "5699880",
    "end": "5705350"
  },
  {
    "text": "that help drive these developing these languages do you have a hope or an",
    "start": "5705350",
    "end": "5710840"
  },
  {
    "text": "optimism that there will be a unification if you think about physics",
    "start": "5710840",
    "end": "5717470"
  },
  {
    "text": "and Einstein towards a simplified language do you think that it's possible",
    "start": "5717470",
    "end": "5723910"
  },
  {
    "text": "let's remember sort of modern physics I think started with Galileo in the 1300s",
    "start": "5723910",
    "end": "5730940"
  },
  {
    "text": "so they have had seven hundred years to get going modern computing started in about 49",
    "start": "5730940",
    "end": "5739780"
  },
  {
    "text": "we've got what's that 70 years they have 10 10 times yeah",
    "start": "5739780",
    "end": "5746540"
  },
  {
    "text": "and furthermore they they are not as bothered with people using physics the",
    "start": "5746540",
    "end": "5752060"
  },
  {
    "text": "way we are worried about programming it's done by humans so each have",
    "start": "5752060",
    "end": "5760000"
  },
  {
    "text": "problems and constraints the others have but we are very immature compared to physics so I would look at sort of the",
    "start": "5760000",
    "end": "5769790"
  },
  {
    "text": "philosophical level and and look for fundamental principles like you don't",
    "start": "5769790",
    "end": "5777110"
  },
  {
    "text": "leak resources you shouldn't you don't take errors at runtime that you don't",
    "start": "5777110",
    "end": "5784160"
  },
  {
    "text": "need to you don't violate some kind of",
    "start": "5784160",
    "end": "5789770"
  },
  {
    "text": "type system there's many kinds of type systems but when you have one you don't break it",
    "start": "5789770",
    "end": "5795440"
  },
  {
    "text": "etc etc there will be quite a few and it will not be be the same for all",
    "start": "5795440",
    "end": "5802430"
  },
  {
    "text": "languages but I think if we step back at some kind of philosophical level we can",
    "start": "5802430",
    "end": "5808600"
  },
  {
    "text": "we would be able to agree on sets of principles that applied to two sets of",
    "start": "5808600",
    "end": "5815300"
  },
  {
    "text": "problem areas and within an area of use",
    "start": "5815300",
    "end": "5822050"
  },
  {
    "text": "by in C++ this case what used to be called systems programming the area",
    "start": "5822050",
    "end": "5828170"
  },
  {
    "text": "between the hardware and the the the fluffier parts of the system you you",
    "start": "5828170",
    "end": "5834860"
  },
  {
    "text": "might very well see a convergence so these days you see rust having a adopted",
    "start": "5834860",
    "end": "5840560"
  },
  {
    "text": "ra íí- and sometime accuses me for having borrowed it 20 years before they",
    "start": "5840560",
    "end": "5846140"
  },
  {
    "text": "discovered it but it's we're seeing some kind of conversion",
    "start": "5846140",
    "end": "5852990"
  },
  {
    "text": "convergence here instead of relying on garbage collection all the time the",
    "start": "5852990",
    "end": "5858910"
  },
  {
    "text": "garbage collection languages are doing things like the dispose patterns and",
    "start": "5858910",
    "end": "5865690"
  },
  {
    "text": "such that imitates some of the construction destruction stuff and they're trying not to use the garbage",
    "start": "5865690",
    "end": "5872380"
  },
  {
    "text": "collection all the time things like that so there's there there's conversion but",
    "start": "5872380",
    "end": "5877420"
  },
  {
    "text": "I think we have to step back to the philosophical level and agree on principles and then we'll see some conversions convergences and it will be",
    "start": "5877420",
    "end": "5888060"
  },
  {
    "text": "application domain-specific so a crazy question but I work a lot with machine",
    "start": "5888060",
    "end": "5896080"
  },
  {
    "text": "learning with deep learning I'm not sure if you touch that world that much but",
    "start": "5896080",
    "end": "5901380"
  },
  {
    "text": "you could think of programming is the thing that takes some input programming",
    "start": "5901380",
    "end": "5906880"
  },
  {
    "text": "is the task of creating a program and a program takes some input and produces some output so machine learning systems",
    "start": "5906880",
    "end": "5913830"
  },
  {
    "text": "train on data in order to be able to take an input and produce output but",
    "start": "5913830",
    "end": "5920770"
  },
  {
    "text": "they're messy fuzzy things much like we",
    "start": "5920770",
    "end": "5926590"
  },
  {
    "text": "as children grow up you know we take some input make some output but we're",
    "start": "5926590",
    "end": "5931780"
  },
  {
    "text": "noisy we mess up a lot we're definitely not reliable biological system or a giant mess so there's a sense in which",
    "start": "5931780",
    "end": "5940420"
  },
  {
    "text": "machine learning is a kind of way of programming but just fuzzy it's very",
    "start": "5940420",
    "end": "5945940"
  },
  {
    "text": "very very different than C++ because C++ is a like it's just like you said it's",
    "start": "5945940",
    "end": "5953200"
  },
  {
    "text": "extremely reliable it's efficient it's you know you can you can measure you can",
    "start": "5953200",
    "end": "5958870"
  },
  {
    "text": "test in a bunch of different ways with biological systems or machine learning systems you can't say much except sort",
    "start": "5958870",
    "end": "5967570"
  },
  {
    "text": "of empirically saying that ninety-nine point eight percent of the time it seems to work what do you think about this",
    "start": "5967570",
    "end": "5975250"
  },
  {
    "text": "fuzzy kind of programming indeed even see it as programming is it solely and",
    "start": "5975250",
    "end": "5981280"
  },
  {
    "text": "totally another kind of world I I think it's a different kind of world and it is fuzzy and in my domain I don't",
    "start": "5981280",
    "end": "5989320"
  },
  {
    "text": "like fuzziness that is people say things",
    "start": "5989320",
    "end": "5995680"
  },
  {
    "text": "like they want everybody to be able to program but I don't want everybody to",
    "start": "5995680",
    "end": "6000720"
  },
  {
    "text": "program my my aeroplane controls or the",
    "start": "6000720",
    "end": "6006300"
  },
  {
    "text": "car controls I want that to be done by engineers I want that to be done with",
    "start": "6006300",
    "end": "6012510"
  },
  {
    "text": "people that are specifically educated and trained for doing building things",
    "start": "6012510",
    "end": "6019380"
  },
  {
    "text": "and it is not for everybody similarly a language like C++ is not for",
    "start": "6019380",
    "end": "6025410"
  },
  {
    "text": "everybody it is generated via sharp and effective tool for professionals",
    "start": "6025410",
    "end": "6033690"
  },
  {
    "text": "basically and definitely for people who who aim at some kind of precision you",
    "start": "6033690",
    "end": "6040980"
  },
  {
    "text": "don't have people doing calculations without understanding math right",
    "start": "6040980",
    "end": "6046260"
  },
  {
    "text": "counting on your fingers not going to cut it if you want to fly to the moon and so there are areas where and",
    "start": "6046260",
    "end": "6057500"
  },
  {
    "text": "eighty-four percent accuracy rate 16 percent false positive rate it's",
    "start": "6057500",
    "end": "6065310"
  },
  {
    "text": "perfectly acceptable and where people will probably get no more than 70 you",
    "start": "6065310",
    "end": "6071310"
  },
  {
    "text": "said 98% I what I have seen is more like 84 and by by really a lot of blood sweat",
    "start": "6071310",
    "end": "6079050"
  },
  {
    "text": "and tears you can get up to the 92 and a half right so this is fine if it is say",
    "start": "6079050",
    "end": "6086540"
  },
  {
    "text": "pre-screening stuff before the human look at it it is not good enough for for",
    "start": "6086540",
    "end": "6095160"
  },
  {
    "text": "life-threatening situations and so there's lots of areas where where the",
    "start": "6095160",
    "end": "6101190"
  },
  {
    "text": "fuzziness is perfectly acceptable and good and better than humans cheaper than",
    "start": "6101190",
    "end": "6106290"
  },
  {
    "text": "humans but it's not the kind of engineering stuff I'm mostly interested",
    "start": "6106290",
    "end": "6111660"
  },
  {
    "text": "in I worry a bit about machine learning",
    "start": "6111660",
    "end": "6116820"
  },
  {
    "text": "the context of cars you know much more about this than I do I worry too but I'm",
    "start": "6116820",
    "end": "6121940"
  },
  {
    "text": "I'm sort of a an amateur here I've read some of the papers but I have not ever",
    "start": "6121940",
    "end": "6127260"
  },
  {
    "text": "done it and the the idea that scares me the most is the one I have heard and I",
    "start": "6127260",
    "end": "6136349"
  },
  {
    "text": "don't know how common it is that you",
    "start": "6136349",
    "end": "6142110"
  },
  {
    "text": "have this AI system machine learning all of these trained neural nets and when",
    "start": "6142110",
    "end": "6151829"
  },
  {
    "text": "they're something is too complicated they asked the human for help but human",
    "start": "6151829",
    "end": "6158130"
  },
  {
    "text": "is reading a book or sleep and he has 30",
    "start": "6158130",
    "end": "6163770"
  },
  {
    "text": "seconds or three seconds to figure out what the problem was that the AI system couldn't handle and do the right thing",
    "start": "6163770",
    "end": "6170300"
  },
  {
    "text": "this is scary I mean how do you do the cutter walk",
    "start": "6170300",
    "end": "6175380"
  },
  {
    "text": "between the Machine and the human it's very very difficult and for the designer",
    "start": "6175380",
    "end": "6184290"
  },
  {
    "text": "or one of the most reliable efficient and powerful programming languages C++ I",
    "start": "6184290",
    "end": "6189750"
  },
  {
    "text": "can understand why that world is actually unappealing it is for most",
    "start": "6189750",
    "end": "6195810"
  },
  {
    "text": "engineers to me it's extremely appealing because we don't know how to get that",
    "start": "6195810",
    "end": "6201599"
  },
  {
    "text": "interaction right but I think it's possible but it's very very hard it is and I was stating a problem no yes that",
    "start": "6201599",
    "end": "6209520"
  },
  {
    "text": "is the nostril I mean I would much rather never rely on a human if you're driving a nuclear reactor if you're or",
    "start": "6209520",
    "end": "6216840"
  },
  {
    "text": "an autonomous vehicle it would it's much better to design systems written in C++",
    "start": "6216840",
    "end": "6221880"
  },
  {
    "text": "that never asked human for help let's just get one fact in yeah all of this AI",
    "start": "6221880",
    "end": "6229380"
  },
  {
    "text": "star Suns help us constructs so so",
    "start": "6229380",
    "end": "6235260"
  },
  {
    "text": "that's one reason I have to keep a weather eye out or what's going on in that field but I will never become an",
    "start": "6235260",
    "end": "6241170"
  },
  {
    "text": "expert area but it's a good example of how you separate different areas of applications",
    "start": "6241170",
    "end": "6247809"
  },
  {
    "text": "and you have to have different tools different principles and then they",
    "start": "6247809",
    "end": "6253689"
  },
  {
    "text": "interact no major system today is written in one language and there are good reasons for that when you look back",
    "start": "6253689",
    "end": "6261629"
  },
  {
    "text": "at your life work what is uh what is the moment what is a event creation that",
    "start": "6261629",
    "end": "6272530"
  },
  {
    "text": "you're really proud of they say damn I did pretty good there is",
    "start": "6272530",
    "end": "6277629"
  },
  {
    "text": "it as obvious as the creation of C++ and so obvious I've spent a lot of time with",
    "start": "6277629",
    "end": "6283869"
  },
  {
    "text": "C++ and there's a combination of a few good ideas a lot of hard work and a bit",
    "start": "6283869",
    "end": "6290739"
  },
  {
    "text": "of luck and I try to get away from it a few times but I get tracked in again",
    "start": "6290739",
    "end": "6297249"
  },
  {
    "text": "partly because I'm most effective in this area and partly because what I do",
    "start": "6297249",
    "end": "6303809"
  },
  {
    "text": "has much more impact if I do it in the context of C++ I I have four and a half",
    "start": "6303809",
    "end": "6310329"
  },
  {
    "text": "million people that pick it up tomorrow if I get something right if I did it in another field I would have to start",
    "start": "6310329",
    "end": "6317110"
  },
  {
    "text": "learning then I have to build it and then or see if anybody wants to use it",
    "start": "6317110",
    "end": "6322530"
  },
  {
    "text": "one of the things that has kept me going for all of these years is one the good",
    "start": "6322790",
    "end": "6328370"
  },
  {
    "text": "things that people do with it and the interesting things they do with it and",
    "start": "6328370",
    "end": "6335000"
  },
  {
    "text": "also I get to see a lot of interesting stuff and talk to a lot of interesting",
    "start": "6335000",
    "end": "6340670"
  },
  {
    "text": "people I mean if it has just been",
    "start": "6340670",
    "end": "6346040"
  },
  {
    "text": "statements on paper on a screen I I don't think I could have kept going but",
    "start": "6346040",
    "end": "6351830"
  },
  {
    "text": "I get to see the telescopes up on Mauna Kea and I actually went and see how Ford",
    "start": "6351830",
    "end": "6358370"
  },
  {
    "text": "built cars and I got to JPL and see how they do the the Mars rovers there's so",
    "start": "6358370",
    "end": "6367880"
  },
  {
    "text": "much cool stuff going on and most of the cool stuff is done by pretty nice people and sometimes in very nice places",
    "start": "6367880",
    "end": "6375970"
  },
  {
    "text": "cambridge sophia antipolis silicon",
    "start": "6375970",
    "end": "6381200"
  },
  {
    "text": "valley yeah it's there there's more to it than just code but code is central on top of",
    "start": "6381200",
    "end": "6389660"
  },
  {
    "text": "the code are the people in very nice places well I think I speak for millions",
    "start": "6389660",
    "end": "6394880"
  },
  {
    "text": "of people we aren't in saying thank you for creating this language that so many",
    "start": "6394880",
    "end": "6402010"
  },
  {
    "text": "systems are built on top of them that make a better world so thank you and",
    "start": "6402010",
    "end": "6408050"
  },
  {
    "text": "thank you for talking today yeah thanks and we'll make it even better good",
    "start": "6408050",
    "end": "6414400"
  },
  {
    "text": "you",
    "start": "6419900",
    "end": "6421960"
  }
]