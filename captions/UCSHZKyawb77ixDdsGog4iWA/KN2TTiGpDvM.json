[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "this is the walrus operator and this",
    "start": "160",
    "end": "3040"
  },
  {
    "text": "is the assignment expression that it",
    "start": "3040",
    "end": "4720"
  },
  {
    "text": "enables it's been added as a feature",
    "start": "4720",
    "end": "7359"
  },
  {
    "text": "to python 3.8 after a whole lot of drama",
    "start": "7359",
    "end": "11599"
  },
  {
    "text": "majority of python core developers as",
    "start": "11599",
    "end": "13599"
  },
  {
    "text": "far as i can tell were against it",
    "start": "13599",
    "end": "15599"
  },
  {
    "text": "and the drama and toxicity over it drove",
    "start": "15599",
    "end": "18560"
  },
  {
    "text": "guido van rossum creator of python to",
    "start": "18560",
    "end": "20720"
  },
  {
    "text": "step",
    "start": "20720",
    "end": "21039"
  },
  {
    "text": "down from his leadership role of",
    "start": "21039",
    "end": "23119"
  },
  {
    "text": "benevolent dictator for life",
    "start": "23119",
    "end": "25279"
  },
  {
    "text": "after he accepted the walrus operator as",
    "start": "25279",
    "end": "27519"
  },
  {
    "text": "part of the",
    "start": "27519",
    "end": "28480"
  },
  {
    "text": "pep 572 proposal so what is it",
    "start": "28480",
    "end": "32078"
  },
  {
    "text": "first let's talk about the assignment",
    "start": "32079",
    "end": "34000"
  },
  {
    "text": "statement",
    "start": "34000",
    "end": "35200"
  },
  {
    "text": "the equal sign in python we can thank",
    "start": "35200",
    "end": "38239"
  },
  {
    "text": "fortran for this i think not very good",
    "start": "38239",
    "end": "41600"
  },
  {
    "text": "design decision of using",
    "start": "41600",
    "end": "43440"
  },
  {
    "text": "the equal sign for assignment",
    "start": "43440",
    "end": "46879"
  },
  {
    "text": "so assigning in this case 42 to the",
    "start": "46879",
    "end": "49039"
  },
  {
    "text": "variable x",
    "start": "49039",
    "end": "50559"
  },
  {
    "text": "most programming languages use it with a",
    "start": "50559",
    "end": "52320"
  },
  {
    "text": "few exceptions pascal uses the walrus",
    "start": "52320",
    "end": "55120"
  },
  {
    "text": "operator",
    "start": "55120",
    "end": "56079"
  },
  {
    "text": "for assignment and r uses a different",
    "start": "56079",
    "end": "59199"
  },
  {
    "text": "operator",
    "start": "59199",
    "end": "60399"
  },
  {
    "text": "this goes against the notation of",
    "start": "60399",
    "end": "62239"
  },
  {
    "text": "mathematics what the equal sign is used",
    "start": "62239",
    "end": "64158"
  },
  {
    "text": "to designate",
    "start": "64159",
    "end": "65119"
  },
  {
    "text": "equality but there's a lesson here i",
    "start": "65119",
    "end": "67840"
  },
  {
    "text": "think that even bad design decisions",
    "start": "67840",
    "end": "69760"
  },
  {
    "text": "once accepted and once we get used to",
    "start": "69760",
    "end": "71520"
  },
  {
    "text": "them",
    "start": "71520",
    "end": "72240"
  },
  {
    "text": "aren't so bad it's all about consistency",
    "start": "72240",
    "end": "75680"
  },
  {
    "text": "so the assignment expression does a",
    "start": "75680",
    "end": "76960"
  },
  {
    "text": "little bit more it also signs",
    "start": "76960",
    "end": "79040"
  },
  {
    "text": "42 to x performs the assignment",
    "start": "79040",
    "end": "81280"
  },
  {
    "text": "operation",
    "start": "81280",
    "end": "82320"
  },
  {
    "text": "but as an expression it returns the",
    "start": "82320",
    "end": "84320"
  },
  {
    "text": "value that it assigned as well",
    "start": "84320",
    "end": "86479"
  },
  {
    "start": "86000",
    "end": "213000"
  },
  {
    "text": "this can be useful in a lot of context",
    "start": "86479",
    "end": "88240"
  },
  {
    "text": "let me talk about the cases where i",
    "start": "88240",
    "end": "90320"
  },
  {
    "text": "find them particularly useful so i use",
    "start": "90320",
    "end": "92799"
  },
  {
    "text": "regular expressions a lot as part of",
    "start": "92799",
    "end": "94720"
  },
  {
    "text": "data science",
    "start": "94720",
    "end": "95600"
  },
  {
    "text": "to clean up and organize data so a",
    "start": "95600",
    "end": "97759"
  },
  {
    "text": "common piece of code you might see is",
    "start": "97759",
    "end": "99119"
  },
  {
    "text": "you perform a",
    "start": "99119",
    "end": "100159"
  },
  {
    "text": "regular expression match returning it to",
    "start": "100159",
    "end": "102560"
  },
  {
    "text": "a variable like res",
    "start": "102560",
    "end": "104000"
  },
  {
    "text": "here that contains the regular",
    "start": "104000",
    "end": "107040"
  },
  {
    "text": "expression object if a match was found",
    "start": "107040",
    "end": "109200"
  },
  {
    "text": "and contains none if no match was found",
    "start": "109200",
    "end": "111600"
  },
  {
    "text": "and then you have some kind of",
    "start": "111600",
    "end": "112960"
  },
  {
    "text": "conditional like an if statement that",
    "start": "112960",
    "end": "114799"
  },
  {
    "text": "checks whether a match was found",
    "start": "114799",
    "end": "116640"
  },
  {
    "text": "and if it has been found then you do",
    "start": "116640",
    "end": "118320"
  },
  {
    "text": "something with the regular expression",
    "start": "118320",
    "end": "119920"
  },
  {
    "text": "object",
    "start": "119920",
    "end": "120479"
  },
  {
    "text": "in python 3.8 all that gets combined",
    "start": "120479",
    "end": "122640"
  },
  {
    "text": "into a single line",
    "start": "122640",
    "end": "123920"
  },
  {
    "text": "that performs the match operation",
    "start": "123920",
    "end": "127840"
  },
  {
    "text": "assigns the result of the match to res",
    "start": "127840",
    "end": "130319"
  },
  {
    "text": "and then check if rest contains a",
    "start": "130319",
    "end": "132560"
  },
  {
    "text": "regular expression object a similar use",
    "start": "132560",
    "end": "134959"
  },
  {
    "text": "case is",
    "start": "134959",
    "end": "136000"
  },
  {
    "text": "in reading files there's a lot of ways",
    "start": "136000",
    "end": "137920"
  },
  {
    "text": "to read a file but a lower level version",
    "start": "137920",
    "end": "139920"
  },
  {
    "text": "there's usually a while loop then",
    "start": "139920",
    "end": "142000"
  },
  {
    "text": "there's a read operation that's stored",
    "start": "142000",
    "end": "143599"
  },
  {
    "text": "in the chunk variable or something like",
    "start": "143599",
    "end": "145120"
  },
  {
    "text": "that",
    "start": "145120",
    "end": "145440"
  },
  {
    "text": "and then there's a condition that checks",
    "start": "145440",
    "end": "146879"
  },
  {
    "text": "whether chunk contains anything or if",
    "start": "146879",
    "end": "149040"
  },
  {
    "text": "end of file was reached at which point",
    "start": "149040",
    "end": "150640"
  },
  {
    "text": "you break out of the while loop",
    "start": "150640",
    "end": "152319"
  },
  {
    "text": "if it has not been reached then you do",
    "start": "152319",
    "end": "154080"
  },
  {
    "text": "something with the data that was fetched",
    "start": "154080",
    "end": "156640"
  },
  {
    "text": "in python 3.8 this gets compressed into",
    "start": "156640",
    "end": "158879"
  },
  {
    "text": "a single line",
    "start": "158879",
    "end": "159760"
  },
  {
    "text": "that performs the read operation the",
    "start": "159760",
    "end": "162319"
  },
  {
    "text": "assignment of the fetch data to the",
    "start": "162319",
    "end": "163840"
  },
  {
    "text": "variable chunk and then the conditional",
    "start": "163840",
    "end": "165840"
  },
  {
    "text": "check in the while loop",
    "start": "165840",
    "end": "167360"
  },
  {
    "text": "of whether chunk returned any data or if",
    "start": "167360",
    "end": "169680"
  },
  {
    "text": "the end of the file was reached",
    "start": "169680",
    "end": "171519"
  },
  {
    "text": "to me this is elegant other use cases in",
    "start": "171519",
    "end": "174400"
  },
  {
    "text": "list comprehensions you can share sub",
    "start": "174400",
    "end": "176319"
  },
  {
    "text": "expressions like in the filter you can",
    "start": "176319",
    "end": "178000"
  },
  {
    "text": "assign",
    "start": "178000",
    "end": "178800"
  },
  {
    "text": "f of x to y and then reuse that y in the",
    "start": "178800",
    "end": "182159"
  },
  {
    "text": "output of the comprehension",
    "start": "182159",
    "end": "184000"
  },
  {
    "text": "you can also in a list reuse the value",
    "start": "184000",
    "end": "187120"
  },
  {
    "text": "for example if it's expensive to compute",
    "start": "187120",
    "end": "189200"
  },
  {
    "text": "so you can compute f of x once assign it",
    "start": "189200",
    "end": "191599"
  },
  {
    "text": "to y and then reuse y in the rest of the",
    "start": "191599",
    "end": "193599"
  },
  {
    "text": "list definition",
    "start": "193599",
    "end": "194800"
  },
  {
    "text": "as a side note i don't like to use",
    "start": "194800",
    "end": "197120"
  },
  {
    "text": "chained assignments",
    "start": "197120",
    "end": "198159"
  },
  {
    "text": "but chain assignments have the same",
    "start": "198159",
    "end": "200239"
  },
  {
    "text": "feature that",
    "start": "200239",
    "end": "201440"
  },
  {
    "text": "the function f is only computed once so",
    "start": "201440",
    "end": "203760"
  },
  {
    "text": "this particular statement here",
    "start": "203760",
    "end": "205760"
  },
  {
    "text": "is equivalent to computing f1 assigning",
    "start": "205760",
    "end": "208239"
  },
  {
    "text": "it to attempt variable and then",
    "start": "208239",
    "end": "209680"
  },
  {
    "text": "assigning that temp",
    "start": "209680",
    "end": "210959"
  },
  {
    "text": "variable to both x and y there are quite",
    "start": "210959",
    "end": "213920"
  },
  {
    "start": "213000",
    "end": "359000"
  },
  {
    "text": "a few criticisms that are both objective",
    "start": "213920",
    "end": "216000"
  },
  {
    "text": "and subjective",
    "start": "216000",
    "end": "217200"
  },
  {
    "text": "that talk about the complexities of",
    "start": "217200",
    "end": "220080"
  },
  {
    "text": "programming language design",
    "start": "220080",
    "end": "221440"
  },
  {
    "text": "and human nature in general so first is",
    "start": "221440",
    "end": "224159"
  },
  {
    "text": "the idea",
    "start": "224159",
    "end": "225040"
  },
  {
    "text": "that both the equal sign and the walrus",
    "start": "225040",
    "end": "227360"
  },
  {
    "text": "operator perform an assignment so it",
    "start": "227360",
    "end": "229040"
  },
  {
    "text": "might be confusing to beginners",
    "start": "229040",
    "end": "231519"
  },
  {
    "text": "i'm not sure about the history of pep",
    "start": "231519",
    "end": "233760"
  },
  {
    "text": "572",
    "start": "233760",
    "end": "235040"
  },
  {
    "text": "but my guess is that this criticism was",
    "start": "235040",
    "end": "237120"
  },
  {
    "text": "more prevalent before the exception was",
    "start": "237120",
    "end": "239040"
  },
  {
    "text": "added that assignment expressions can't",
    "start": "239040",
    "end": "240720"
  },
  {
    "text": "be",
    "start": "240720",
    "end": "241120"
  },
  {
    "text": "aligned stand alone by themselves",
    "start": "241120",
    "end": "243439"
  },
  {
    "text": "without using parentheses",
    "start": "243439",
    "end": "245439"
  },
  {
    "text": "i think this clarifies to beginners that",
    "start": "245439",
    "end": "247280"
  },
  {
    "text": "assignment expression should not be used",
    "start": "247280",
    "end": "249280"
  },
  {
    "text": "as an assignment statement there's a set",
    "start": "249280",
    "end": "251680"
  },
  {
    "text": "of principles",
    "start": "251680",
    "end": "252640"
  },
  {
    "text": "defined in pap 20 otherwise called zen",
    "start": "252640",
    "end": "254879"
  },
  {
    "text": "of python",
    "start": "254879",
    "end": "256079"
  },
  {
    "text": "that has some ideas to aspire to in the",
    "start": "256079",
    "end": "258000"
  },
  {
    "text": "design of python",
    "start": "258000",
    "end": "259359"
  },
  {
    "text": "just like guido said some of these are",
    "start": "259359",
    "end": "261359"
  },
  {
    "text": "subjective",
    "start": "261359",
    "end": "262479"
  },
  {
    "text": "and i think they are ideas to aspire to",
    "start": "262479",
    "end": "265520"
  },
  {
    "text": "as opposed to perfectly implement",
    "start": "265520",
    "end": "267600"
  },
  {
    "text": "because they're overlapping and there's",
    "start": "267600",
    "end": "269199"
  },
  {
    "text": "a natural tension between them",
    "start": "269199",
    "end": "271120"
  },
  {
    "text": "so first principle that's been brought",
    "start": "271120",
    "end": "272720"
  },
  {
    "text": "up is there should be only one",
    "start": "272720",
    "end": "274400"
  },
  {
    "text": "obvious way to do it and some people",
    "start": "274400",
    "end": "276560"
  },
  {
    "text": "argue that the walrus operator",
    "start": "276560",
    "end": "279360"
  },
  {
    "text": "performs an operation that already had",
    "start": "279360",
    "end": "281440"
  },
  {
    "text": "another way to do the same exact thing",
    "start": "281440",
    "end": "283600"
  },
  {
    "text": "i've also heard a funny kind of",
    "start": "283600",
    "end": "284880"
  },
  {
    "text": "criticism that the equals operator",
    "start": "284880",
    "end": "287919"
  },
  {
    "text": "worked like an assignment expression in",
    "start": "287919",
    "end": "289520"
  },
  {
    "text": "c and it kind of sucked and see",
    "start": "289520",
    "end": "291600"
  },
  {
    "text": "or at least was error prone so there you",
    "start": "291600",
    "end": "294000"
  },
  {
    "text": "go you have a",
    "start": "294000",
    "end": "295040"
  },
  {
    "text": "case study in the real world where this",
    "start": "295040",
    "end": "296720"
  },
  {
    "text": "kind of operator being used to designate",
    "start": "296720",
    "end": "298800"
  },
  {
    "text": "an assignment expression was",
    "start": "298800",
    "end": "300160"
  },
  {
    "text": "error prone another then a python",
    "start": "300160",
    "end": "302320"
  },
  {
    "text": "principle that people brought up",
    "start": "302320",
    "end": "304240"
  },
  {
    "text": "is that simple is better than complex",
    "start": "304240",
    "end": "307039"
  },
  {
    "text": "and",
    "start": "307039",
    "end": "307440"
  },
  {
    "text": "while it seems that the assignment",
    "start": "307440",
    "end": "309600"
  },
  {
    "text": "expression makes the code",
    "start": "309600",
    "end": "310960"
  },
  {
    "text": "simpler in fact it was argued that it",
    "start": "310960",
    "end": "313840"
  },
  {
    "text": "was only reducing white space and was in",
    "start": "313840",
    "end": "315840"
  },
  {
    "text": "fact adding complexity or at least",
    "start": "315840",
    "end": "317759"
  },
  {
    "text": "moving the complexity finally the",
    "start": "317759",
    "end": "320320"
  },
  {
    "text": "criticism that applies",
    "start": "320320",
    "end": "322080"
  },
  {
    "text": "often in programming language design is",
    "start": "322080",
    "end": "324560"
  },
  {
    "text": "that not enough testing was done on how",
    "start": "324560",
    "end": "326639"
  },
  {
    "text": "actual developers will use it",
    "start": "326639",
    "end": "328400"
  },
  {
    "text": "i think that's probably the biggest",
    "start": "328400",
    "end": "329919"
  },
  {
    "text": "challenge of programming language design",
    "start": "329919",
    "end": "332160"
  },
  {
    "text": "and design in general is you don't know",
    "start": "332160",
    "end": "334240"
  },
  {
    "text": "how people how thousands or millions of",
    "start": "334240",
    "end": "336479"
  },
  {
    "text": "developers are going to use this feature",
    "start": "336479",
    "end": "338160"
  },
  {
    "text": "once it's in the wild",
    "start": "338160",
    "end": "340160"
  },
  {
    "text": "and how other features will interact",
    "start": "340160",
    "end": "342240"
  },
  {
    "text": "with it when it's in the wild",
    "start": "342240",
    "end": "343520"
  },
  {
    "text": "so this criticism is certainly true but",
    "start": "343520",
    "end": "346160"
  },
  {
    "text": "i think it is always true",
    "start": "346160",
    "end": "348400"
  },
  {
    "text": "my own feelings about the walrus",
    "start": "348400",
    "end": "350160"
  },
  {
    "text": "operator is i think when used properly",
    "start": "350160",
    "end": "353120"
  },
  {
    "text": "it's quite elegant and even beautiful",
    "start": "353120",
    "end": "356880"
  },
  {
    "text": "but it also represents more than that to",
    "start": "356880",
    "end": "359360"
  },
  {
    "start": "359000",
    "end": "488000"
  },
  {
    "text": "me it represents the importance of",
    "start": "359360",
    "end": "360880"
  },
  {
    "text": "leadership in a community of smart",
    "start": "360880",
    "end": "362639"
  },
  {
    "text": "people that disagree",
    "start": "362639",
    "end": "363680"
  },
  {
    "text": "so this is the feature that led guido to",
    "start": "363680",
    "end": "366400"
  },
  {
    "text": "resign",
    "start": "366400",
    "end": "367039"
  },
  {
    "text": "and i spoke with him on the podcast that",
    "start": "367039",
    "end": "369280"
  },
  {
    "text": "i host and i'll speak to him again",
    "start": "369280",
    "end": "371120"
  },
  {
    "text": "i think he's one of the most brilliant",
    "start": "371120",
    "end": "373680"
  },
  {
    "text": "language designers and programmers we",
    "start": "373680",
    "end": "375440"
  },
  {
    "text": "have",
    "start": "375440",
    "end": "375840"
  },
  {
    "text": "also a great leader in the software",
    "start": "375840",
    "end": "377440"
  },
  {
    "text": "engineer community so this is a little",
    "start": "377440",
    "end": "379680"
  },
  {
    "text": "excerpt from a post he made",
    "start": "379680",
    "end": "381600"
  },
  {
    "text": "it reads now that pep 572 is done",
    "start": "381600",
    "end": "385280"
  },
  {
    "text": "i don't ever want to have to fight so",
    "start": "385280",
    "end": "387120"
  },
  {
    "text": "hard for a pep and find that so many",
    "start": "387120",
    "end": "389360"
  },
  {
    "text": "people despise my decisions",
    "start": "389360",
    "end": "391440"
  },
  {
    "text": "i would like to remove myself entirely",
    "start": "391440",
    "end": "393360"
  },
  {
    "text": "from the decision process",
    "start": "393360",
    "end": "395120"
  },
  {
    "text": "i'm basically giving myself a permanent",
    "start": "395120",
    "end": "397280"
  },
  {
    "text": "vacation from being bdfl",
    "start": "397280",
    "end": "399919"
  },
  {
    "text": "and you all will be on your own so what",
    "start": "399919",
    "end": "403280"
  },
  {
    "text": "are you all going to do",
    "start": "403280",
    "end": "405120"
  },
  {
    "text": "create a democracy anarchy a",
    "start": "405120",
    "end": "407600"
  },
  {
    "text": "dictatorship",
    "start": "407600",
    "end": "408639"
  },
  {
    "text": "a federation so to me the walrus",
    "start": "408639",
    "end": "412319"
  },
  {
    "text": "operator represents more than just",
    "start": "412319",
    "end": "413919"
  },
  {
    "text": "assignment expressions it",
    "start": "413919",
    "end": "415360"
  },
  {
    "text": "represents the power of leadership to uh",
    "start": "415360",
    "end": "419120"
  },
  {
    "text": "break through a toxic stalemate i think",
    "start": "419120",
    "end": "422560"
  },
  {
    "text": "leaders have to make difficult decisions",
    "start": "422560",
    "end": "425280"
  },
  {
    "text": "sometimes",
    "start": "425280",
    "end": "426080"
  },
  {
    "text": "unpopular decisions and sometimes",
    "start": "426080",
    "end": "429440"
  },
  {
    "text": "ones if you look at the long arc of",
    "start": "429440",
    "end": "431840"
  },
  {
    "text": "history prove out to be",
    "start": "431840",
    "end": "433919"
  },
  {
    "text": "bad decisions but without leadership i",
    "start": "433919",
    "end": "437360"
  },
  {
    "text": "think we can't make progress so",
    "start": "437360",
    "end": "439759"
  },
  {
    "text": "the messiness the chaos of democracy",
    "start": "439759",
    "end": "443120"
  },
  {
    "text": "is that the divisiveness can be",
    "start": "443120",
    "end": "445520"
  },
  {
    "text": "paralyzing",
    "start": "445520",
    "end": "447199"
  },
  {
    "text": "and we need leaders to inspire us to",
    "start": "447199",
    "end": "450240"
  },
  {
    "text": "guide us",
    "start": "450240",
    "end": "451759"
  },
  {
    "text": "and to make difficult risky decisions",
    "start": "451759",
    "end": "455520"
  },
  {
    "text": "so to me the walrus operator be useful",
    "start": "455520",
    "end": "458080"
  },
  {
    "text": "for regular expressions",
    "start": "458080",
    "end": "459599"
  },
  {
    "text": "but it will also be a reminder of the",
    "start": "459599",
    "end": "461520"
  },
  {
    "text": "importance of leadership",
    "start": "461520",
    "end": "463120"
  },
  {
    "text": "in the programming world and in our",
    "start": "463120",
    "end": "465360"
  },
  {
    "text": "world in general",
    "start": "465360",
    "end": "467360"
  },
  {
    "text": "if you enjoy these short little videos",
    "start": "467360",
    "end": "469520"
  },
  {
    "text": "subscribe",
    "start": "469520",
    "end": "470639"
  },
  {
    "text": "and remember try to learn something new",
    "start": "470639",
    "end": "472560"
  },
  {
    "text": "every day",
    "start": "472560",
    "end": "479840"
  },
  {
    "text": "you",
    "start": "487199",
    "end": "489280"
  }
]