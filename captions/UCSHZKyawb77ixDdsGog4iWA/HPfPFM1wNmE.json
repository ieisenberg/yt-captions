[
  {
    "text": "this is a hidden feature of python that",
    "start": "160",
    "end": "2560"
  },
  {
    "text": "i recently came across",
    "start": "2560",
    "end": "4319"
  },
  {
    "text": "the chaining of comparison operators",
    "start": "4319",
    "end": "7040"
  },
  {
    "text": "that is not available in almost",
    "start": "7040",
    "end": "8480"
  },
  {
    "text": "any mainstream programming language i",
    "start": "8480",
    "end": "11280"
  },
  {
    "text": "think it's elegant and intuitive and",
    "start": "11280",
    "end": "13040"
  },
  {
    "text": "doesn't make any sense to me why it's",
    "start": "13040",
    "end": "14559"
  },
  {
    "text": "not available in most languages",
    "start": "14559",
    "end": "16320"
  },
  {
    "text": "so what is it say we assign the values 2",
    "start": "16320",
    "end": "18800"
  },
  {
    "text": "and 3 to x and y",
    "start": "18800",
    "end": "20720"
  },
  {
    "text": "and then look at a single statement that",
    "start": "20720",
    "end": "22880"
  },
  {
    "text": "includes several comparison operators",
    "start": "22880",
    "end": "24880"
  },
  {
    "text": "chained together",
    "start": "24880",
    "end": "26000"
  },
  {
    "text": "1 less than x less than y less than 4",
    "start": "26000",
    "end": "29519"
  },
  {
    "text": "in python this evaluates to true the way",
    "start": "29519",
    "end": "32238"
  },
  {
    "text": "python evaluates the statement is the",
    "start": "32239",
    "end": "34000"
  },
  {
    "text": "same way that we would",
    "start": "34000",
    "end": "35280"
  },
  {
    "text": "intuitively or mathematically look at",
    "start": "35280",
    "end": "37440"
  },
  {
    "text": "the statement",
    "start": "37440",
    "end": "38480"
  },
  {
    "text": "which is as a chain of binary comparison",
    "start": "38480",
    "end": "42000"
  },
  {
    "text": "operators",
    "start": "42000",
    "end": "42960"
  },
  {
    "text": "1 is less than x and x is less than y",
    "start": "42960",
    "end": "46879"
  },
  {
    "text": "and y is less than 4 which again",
    "start": "46879",
    "end": "50079"
  },
  {
    "text": "evaluates to true now you can use any",
    "start": "50079",
    "end": "52879"
  },
  {
    "text": "comparison operator",
    "start": "52879",
    "end": "54000"
  },
  {
    "text": "less than greater than less than or",
    "start": "54000",
    "end": "56000"
  },
  {
    "text": "equal to greater than or equal to and",
    "start": "56000",
    "end": "58160"
  },
  {
    "text": "mix and match them together in a single",
    "start": "58160",
    "end": "60239"
  },
  {
    "text": "arbitrarily long chain of comparison",
    "start": "60239",
    "end": "62960"
  },
  {
    "text": "operators",
    "start": "62960",
    "end": "64000"
  },
  {
    "text": "now if we change the original statement",
    "start": "64000",
    "end": "65518"
  },
  {
    "text": "to include a greater than operator is",
    "start": "65519",
    "end": "67439"
  },
  {
    "text": "the last comparison",
    "start": "67439",
    "end": "68880"
  },
  {
    "text": "then the entire statement returns false",
    "start": "68880",
    "end": "71840"
  },
  {
    "text": "because y which is equal to 3",
    "start": "71840",
    "end": "73600"
  },
  {
    "text": "is not greater than 4. and then finally",
    "start": "73600",
    "end": "76320"
  },
  {
    "text": "again we can flip the 4 and the y",
    "start": "76320",
    "end": "78799"
  },
  {
    "text": "to make the statement return true",
    "start": "78799",
    "end": "80479"
  },
  {
    "text": "because all the individual comparisons",
    "start": "80479",
    "end": "82799"
  },
  {
    "text": "are true 1 is less than x which is equal",
    "start": "82799",
    "end": "86159"
  },
  {
    "text": "to two",
    "start": "86159",
    "end": "86960"
  },
  {
    "text": "x is less than four and four is greater",
    "start": "86960",
    "end": "89439"
  },
  {
    "text": "than y",
    "start": "89439",
    "end": "90240"
  },
  {
    "text": "y being equal to three now this feature",
    "start": "90240",
    "end": "93360"
  },
  {
    "text": "is available in a few",
    "start": "93360",
    "end": "94640"
  },
  {
    "text": "other languages not many like pearl six",
    "start": "94640",
    "end": "97759"
  },
  {
    "text": "or reiku i think it's been her name too",
    "start": "97759",
    "end": "99920"
  },
  {
    "text": "not sure how to pronounce it",
    "start": "99920",
    "end": "101520"
  },
  {
    "text": "and julia and as shown here it's also",
    "start": "101520",
    "end": "104799"
  },
  {
    "text": "a first-class citizen in some functional",
    "start": "104799",
    "end": "107439"
  },
  {
    "text": "languages like scheme common lisp and",
    "start": "107439",
    "end": "109280"
  },
  {
    "text": "closure",
    "start": "109280",
    "end": "110560"
  },
  {
    "text": "with the added constraint that the",
    "start": "110560",
    "end": "112000"
  },
  {
    "text": "chaining of the operator includes only",
    "start": "112000",
    "end": "114159"
  },
  {
    "text": "the same operator so you can't mix and",
    "start": "114159",
    "end": "116159"
  },
  {
    "text": "match so shown here the greatest",
    "start": "116159",
    "end": "117759"
  },
  {
    "text": "language of all time which is lisp",
    "start": "117759",
    "end": "120079"
  },
  {
    "text": "the equals operator applied to a list of",
    "start": "120079",
    "end": "123360"
  },
  {
    "text": "numbers",
    "start": "123360",
    "end": "124159"
  },
  {
    "text": "three and three returns true three and",
    "start": "124159",
    "end": "125920"
  },
  {
    "text": "five returns false",
    "start": "125920",
    "end": "127360"
  },
  {
    "text": "all threes returns true all threes",
    "start": "127360",
    "end": "130160"
  },
  {
    "text": "except one of them being five returns",
    "start": "130160",
    "end": "131920"
  },
  {
    "text": "false",
    "start": "131920",
    "end": "132640"
  },
  {
    "text": "so again that's chaining the equality",
    "start": "132640",
    "end": "135120"
  },
  {
    "text": "comparison operator across the entire",
    "start": "135120",
    "end": "137360"
  },
  {
    "text": "list",
    "start": "137360",
    "end": "138239"
  },
  {
    "text": "and the same is true for the less than",
    "start": "138239",
    "end": "140000"
  },
  {
    "text": "operator applied to the entire list",
    "start": "140000",
    "end": "142239"
  },
  {
    "text": "below 3 less than 5 is true",
    "start": "142239",
    "end": "145520"
  },
  {
    "text": "and then a long sequence returning true",
    "start": "145520",
    "end": "147520"
  },
  {
    "text": "if it's in strictly increasing order",
    "start": "147520",
    "end": "150000"
  },
  {
    "text": "and false if it's not in strictly",
    "start": "150000",
    "end": "152160"
  },
  {
    "text": "increasing order",
    "start": "152160",
    "end": "153599"
  },
  {
    "text": "i put some links in the description one",
    "start": "153599",
    "end": "155680"
  },
  {
    "text": "of the more interesting ones is in the",
    "start": "155680",
    "end": "157840"
  },
  {
    "text": "software engineering stack exchange",
    "start": "157840",
    "end": "159519"
  },
  {
    "text": "which discusses from a",
    "start": "159519",
    "end": "160680"
  },
  {
    "text": "semi-philosophical perspective",
    "start": "160680",
    "end": "162800"
  },
  {
    "text": "why most mainstream languages do not",
    "start": "162800",
    "end": "164640"
  },
  {
    "text": "include this feature",
    "start": "164640",
    "end": "166000"
  },
  {
    "text": "you should check out some of the answers",
    "start": "166000",
    "end": "167280"
  },
  {
    "text": "on that page but to summarize some of",
    "start": "167280",
    "end": "168720"
  },
  {
    "text": "the discussion the reason to do it",
    "start": "168720",
    "end": "171120"
  },
  {
    "text": "is despite the initial intuition about",
    "start": "171120",
    "end": "173440"
  },
  {
    "text": "this feature being difficult to",
    "start": "173440",
    "end": "174879"
  },
  {
    "text": "implement",
    "start": "174879",
    "end": "175760"
  },
  {
    "text": "it's actually very easy to implement and",
    "start": "175760",
    "end": "178480"
  },
  {
    "text": "as i said it's a",
    "start": "178480",
    "end": "179920"
  },
  {
    "text": "mathematically intuitive and just",
    "start": "179920",
    "end": "182840"
  },
  {
    "text": "elegant statement which i think makes it",
    "start": "182840",
    "end": "185280"
  },
  {
    "text": "one of the",
    "start": "185280",
    "end": "186080"
  },
  {
    "text": "best hidden features at least to me of",
    "start": "186080",
    "end": "188720"
  },
  {
    "text": "python",
    "start": "188720",
    "end": "190319"
  },
  {
    "text": "in the discussion the reasons that come",
    "start": "190319",
    "end": "191920"
  },
  {
    "text": "up not to do it is",
    "start": "191920",
    "end": "193840"
  },
  {
    "text": "fundamentally just laziness in that its",
    "start": "193840",
    "end": "196400"
  },
  {
    "text": "importance versus other features is",
    "start": "196400",
    "end": "198080"
  },
  {
    "text": "quite low",
    "start": "198080",
    "end": "199280"
  },
  {
    "text": "and it doesn't seem to be the kind of",
    "start": "199280",
    "end": "201040"
  },
  {
    "text": "feature that pops up as an",
    "start": "201040",
    "end": "202720"
  },
  {
    "text": "intuitive first feature to implement",
    "start": "202720",
    "end": "206000"
  },
  {
    "text": "when the language is first born and",
    "start": "206000",
    "end": "209040"
  },
  {
    "text": "as with certain other features this can",
    "start": "209040",
    "end": "211040"
  },
  {
    "text": "potentially break backward compatibility",
    "start": "211040",
    "end": "213519"
  },
  {
    "text": "if this kind of chaining operators was",
    "start": "213519",
    "end": "215599"
  },
  {
    "text": "allowed previously",
    "start": "215599",
    "end": "216879"
  },
  {
    "text": "syntactically speaking meaning it was",
    "start": "216879",
    "end": "219440"
  },
  {
    "text": "allowed but it",
    "start": "219440",
    "end": "220319"
  },
  {
    "text": "didn't do the intuitive thing it can",
    "start": "220319",
    "end": "222319"
  },
  {
    "text": "certainly break in quite painful ways",
    "start": "222319",
    "end": "224159"
  },
  {
    "text": "backward compatibility",
    "start": "224159",
    "end": "225680"
  },
  {
    "text": "but still as i said in the previous",
    "start": "225680",
    "end": "227280"
  },
  {
    "text": "video list comprehensions i think is the",
    "start": "227280",
    "end": "229519"
  },
  {
    "text": "best feature python",
    "start": "229519",
    "end": "231120"
  },
  {
    "text": "and the chaining of comparison operators",
    "start": "231120",
    "end": "233439"
  },
  {
    "text": "i think",
    "start": "233439",
    "end": "234159"
  },
  {
    "text": "is the best hidden feature or not well",
    "start": "234159",
    "end": "236879"
  },
  {
    "text": "known feature",
    "start": "236879",
    "end": "237760"
  },
  {
    "text": "of python quick shout out to expressvpn",
    "start": "237760",
    "end": "241680"
  },
  {
    "text": "click their link in the description",
    "start": "241680",
    "end": "243599"
  },
  {
    "text": "it's the best way to support the podcast",
    "start": "243599",
    "end": "246159"
  },
  {
    "text": "i host in these videos that i make",
    "start": "246159",
    "end": "248720"
  },
  {
    "text": "if you enjoy these subscribe and",
    "start": "248720",
    "end": "250239"
  },
  {
    "text": "remember try to learn something new",
    "start": "250239",
    "end": "252080"
  },
  {
    "text": "every day",
    "start": "252080",
    "end": "255840"
  },
  {
    "text": "you",
    "start": "273040",
    "end": "275120"
  }
]