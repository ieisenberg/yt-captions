[
  {
    "text": "this is a list comprehension that allows",
    "start": "160",
    "end": "2879"
  },
  {
    "text": "you to define one list in terms of",
    "start": "2879",
    "end": "4640"
  },
  {
    "text": "another list",
    "start": "4640",
    "end": "5680"
  },
  {
    "text": "and is reminiscent of set notation from",
    "start": "5680",
    "end": "8480"
  },
  {
    "text": "mathematics",
    "start": "8480",
    "end": "9519"
  },
  {
    "text": "the elegance simplicity and power of",
    "start": "9519",
    "end": "11360"
  },
  {
    "text": "this notation",
    "start": "11360",
    "end": "12559"
  },
  {
    "text": "makes it in my opinion the best feature",
    "start": "12559",
    "end": "15280"
  },
  {
    "text": "of python",
    "start": "15280",
    "end": "16240"
  },
  {
    "text": "now what does it mean to be a best",
    "start": "16240",
    "end": "17680"
  },
  {
    "text": "feature of a programming language",
    "start": "17680",
    "end": "19760"
  },
  {
    "text": "to me it's a feature that makes you fall",
    "start": "19760",
    "end": "21359"
  },
  {
    "text": "in love with the language",
    "start": "21359",
    "end": "22960"
  },
  {
    "text": "and the feature that makes you enjoy",
    "start": "22960",
    "end": "25039"
  },
  {
    "text": "programming in the language for many",
    "start": "25039",
    "end": "26640"
  },
  {
    "text": "years",
    "start": "26640",
    "end": "27439"
  },
  {
    "text": "so the basic notation is a for loop over",
    "start": "27439",
    "end": "30560"
  },
  {
    "text": "some input list nums and a function like",
    "start": "30560",
    "end": "34079"
  },
  {
    "text": "f of x that computes something",
    "start": "34079",
    "end": "36399"
  },
  {
    "text": "for each element x in nums in addition",
    "start": "36399",
    "end": "39600"
  },
  {
    "text": "there's a",
    "start": "39600",
    "end": "40320"
  },
  {
    "text": "filter conditional like if g of x",
    "start": "40320",
    "end": "44079"
  },
  {
    "text": "some function some expression that",
    "start": "44079",
    "end": "46559"
  },
  {
    "text": "filters the elements of nums",
    "start": "46559",
    "end": "48160"
  },
  {
    "text": "and only keeps the ones that pass this",
    "start": "48160",
    "end": "50480"
  },
  {
    "text": "conditional",
    "start": "50480",
    "end": "51600"
  },
  {
    "text": "let's look at an example input list nums",
    "start": "51600",
    "end": "54000"
  },
  {
    "text": "one two three",
    "start": "54000",
    "end": "54800"
  },
  {
    "text": "four the list comprehension squares each",
    "start": "54800",
    "end": "57360"
  },
  {
    "text": "element of nums",
    "start": "57360",
    "end": "58879"
  },
  {
    "text": "so x times x for x in nums and so that",
    "start": "58879",
    "end": "61840"
  },
  {
    "text": "creates a list that contains 1 4",
    "start": "61840",
    "end": "63680"
  },
  {
    "text": "9 and 16. simple beautiful",
    "start": "63680",
    "end": "66960"
  },
  {
    "text": "and now to add a filter to keep just the",
    "start": "66960",
    "end": "68640"
  },
  {
    "text": "even numbers we can add into the",
    "start": "68640",
    "end": "71439"
  },
  {
    "text": "filter conditional the list",
    "start": "71439",
    "end": "73040"
  },
  {
    "text": "comprehension x modulo two equals zero",
    "start": "73040",
    "end": "76240"
  },
  {
    "text": "and then the result is the squaring of",
    "start": "76240",
    "end": "77840"
  },
  {
    "text": "the elements that pass the filter",
    "start": "77840",
    "end": "79840"
  },
  {
    "text": "which is four and sixteen now some would",
    "start": "79840",
    "end": "82880"
  },
  {
    "text": "argue that you can achieve the same kind",
    "start": "82880",
    "end": "84640"
  },
  {
    "text": "of results with for loops",
    "start": "84640",
    "end": "86080"
  },
  {
    "text": "or more direct comparison is the map and",
    "start": "86080",
    "end": "88560"
  },
  {
    "text": "filter functions which are",
    "start": "88560",
    "end": "90079"
  },
  {
    "text": "also available in python so what would",
    "start": "90079",
    "end": "92320"
  },
  {
    "text": "that look like",
    "start": "92320",
    "end": "93439"
  },
  {
    "text": "to square each element in the list you",
    "start": "93439",
    "end": "96320"
  },
  {
    "text": "could have a lambda function that does",
    "start": "96320",
    "end": "97840"
  },
  {
    "text": "the squaring and a map",
    "start": "97840",
    "end": "99439"
  },
  {
    "text": "that applies that lambda function to",
    "start": "99439",
    "end": "102159"
  },
  {
    "text": "each element of nums",
    "start": "102159",
    "end": "103759"
  },
  {
    "text": "that's the second line the code here and",
    "start": "103759",
    "end": "105920"
  },
  {
    "text": "the third line",
    "start": "105920",
    "end": "107360"
  },
  {
    "text": "you can add a filter to that so first",
    "start": "107360",
    "end": "110079"
  },
  {
    "text": "apply",
    "start": "110079",
    "end": "110720"
  },
  {
    "text": "a filter with a lambda function that",
    "start": "110720",
    "end": "112640"
  },
  {
    "text": "does the module two equals zero",
    "start": "112640",
    "end": "115280"
  },
  {
    "text": "conditional and then on top of that on",
    "start": "115280",
    "end": "117920"
  },
  {
    "text": "the elements that pass the filter you",
    "start": "117920",
    "end": "119600"
  },
  {
    "text": "again do the map function of the lambda",
    "start": "119600",
    "end": "122000"
  },
  {
    "text": "that squares each element now i believe",
    "start": "122000",
    "end": "124640"
  },
  {
    "text": "this is also",
    "start": "124640",
    "end": "126000"
  },
  {
    "text": "beautiful and powerful notation but to",
    "start": "126000",
    "end": "128560"
  },
  {
    "text": "me it's not",
    "start": "128560",
    "end": "129520"
  },
  {
    "text": "nearly as elegant pythonic and readable",
    "start": "129520",
    "end": "132959"
  },
  {
    "text": "as the list comprehension notation",
    "start": "132959",
    "end": "135360"
  },
  {
    "text": "i already did a video on the most",
    "start": "135360",
    "end": "137760"
  },
  {
    "text": "controversial",
    "start": "137760",
    "end": "139040"
  },
  {
    "text": "python feature which in my opinion is",
    "start": "139040",
    "end": "141360"
  },
  {
    "text": "the wallers operator",
    "start": "141360",
    "end": "142800"
  },
  {
    "text": "it comes into play nicely with list",
    "start": "142800",
    "end": "144640"
  },
  {
    "text": "comprehensions now if we take some",
    "start": "144640",
    "end": "146480"
  },
  {
    "text": "difficult to compute function like",
    "start": "146480",
    "end": "148239"
  },
  {
    "text": "fibo here which computes the nth element",
    "start": "148239",
    "end": "150959"
  },
  {
    "text": "of the fibonacci sequence",
    "start": "150959",
    "end": "152959"
  },
  {
    "text": "the one line ternary operator",
    "start": "152959",
    "end": "155680"
  },
  {
    "text": "implementation of the function",
    "start": "155680",
    "end": "157760"
  },
  {
    "text": "written by me untested i'll leave it to",
    "start": "157760",
    "end": "160400"
  },
  {
    "text": "you as homework to test if this actually",
    "start": "160400",
    "end": "162319"
  },
  {
    "text": "works",
    "start": "162319",
    "end": "163360"
  },
  {
    "text": "and i threw it in there to give a shout",
    "start": "163360",
    "end": "165599"
  },
  {
    "text": "out to two other things i enjoy",
    "start": "165599",
    "end": "167599"
  },
  {
    "text": "which is recursion and the ternary",
    "start": "167599",
    "end": "170560"
  },
  {
    "text": "operator",
    "start": "170560",
    "end": "171680"
  },
  {
    "text": "the if else notation of which in python",
    "start": "171680",
    "end": "174959"
  },
  {
    "text": "i think is another beautiful design",
    "start": "174959",
    "end": "177360"
  },
  {
    "text": "choice",
    "start": "177360",
    "end": "178319"
  },
  {
    "text": "that makes an otherwise cryptic looking",
    "start": "178319",
    "end": "180400"
  },
  {
    "text": "ternary operator",
    "start": "180400",
    "end": "182080"
  },
  {
    "text": "actually readable to our human brains",
    "start": "182080",
    "end": "184879"
  },
  {
    "text": "and so if we take then",
    "start": "184879",
    "end": "186319"
  },
  {
    "text": "another definition of numbs that goes",
    "start": "186319",
    "end": "187920"
  },
  {
    "text": "from one to six",
    "start": "187920",
    "end": "189680"
  },
  {
    "text": "we can create a basic list comprehension",
    "start": "189680",
    "end": "192239"
  },
  {
    "text": "that applies the fibo function to each",
    "start": "192239",
    "end": "194480"
  },
  {
    "text": "element of nums",
    "start": "194480",
    "end": "195840"
  },
  {
    "text": "resulting in the familiar fibonacci",
    "start": "195840",
    "end": "197680"
  },
  {
    "text": "sequence of one one two three five eight",
    "start": "197680",
    "end": "200080"
  },
  {
    "text": "now if we wanted to also add a",
    "start": "200080",
    "end": "201280"
  },
  {
    "text": "conditional which is where the walrus",
    "start": "201280",
    "end": "203280"
  },
  {
    "text": "operator comes in",
    "start": "203280",
    "end": "204640"
  },
  {
    "text": "we can compute fibo x and assign it",
    "start": "204640",
    "end": "207840"
  },
  {
    "text": "to the variable y via the walrus",
    "start": "207840",
    "end": "210480"
  },
  {
    "text": "operator's assignment expression",
    "start": "210480",
    "end": "212560"
  },
  {
    "text": "and then do the modules 2 equals 0 check",
    "start": "212560",
    "end": "215440"
  },
  {
    "text": "to keep",
    "start": "215440",
    "end": "215920"
  },
  {
    "text": "just the even elements of the fibonacci",
    "start": "215920",
    "end": "217760"
  },
  {
    "text": "sequence and then in the actual output",
    "start": "217760",
    "end": "220480"
  },
  {
    "text": "of the list comprehension we can just",
    "start": "220480",
    "end": "222560"
  },
  {
    "text": "use the variable y",
    "start": "222560",
    "end": "223599"
  },
  {
    "text": "as opposed to recomputing the fable",
    "start": "223599",
    "end": "225360"
  },
  {
    "text": "function so the result of this list",
    "start": "225360",
    "end": "227200"
  },
  {
    "text": "comprehension that uses the wallace",
    "start": "227200",
    "end": "228959"
  },
  {
    "text": "operator",
    "start": "228959",
    "end": "229760"
  },
  {
    "text": "is 2 and 8. so list comprehension",
    "start": "229760",
    "end": "232879"
  },
  {
    "text": "actually creates a list objects computes",
    "start": "232879",
    "end": "235200"
  },
  {
    "text": "all the elements in the list and stores",
    "start": "235200",
    "end": "236879"
  },
  {
    "text": "the entire list of memory",
    "start": "236879",
    "end": "238640"
  },
  {
    "text": "while the generator expression stores",
    "start": "238640",
    "end": "240480"
  },
  {
    "text": "just the iterable object",
    "start": "240480",
    "end": "242080"
  },
  {
    "text": "and computes every element in the list",
    "start": "242080",
    "end": "244560"
  },
  {
    "text": "one at a time as it's being queried",
    "start": "244560",
    "end": "247200"
  },
  {
    "text": "so for most people the list",
    "start": "247200",
    "end": "248480"
  },
  {
    "text": "comprehension is probably the default",
    "start": "248480",
    "end": "250080"
  },
  {
    "text": "choice it's used when the size of the",
    "start": "250080",
    "end": "252080"
  },
  {
    "text": "list is not crazy large",
    "start": "252080",
    "end": "254000"
  },
  {
    "text": "especially when you want to reiterate",
    "start": "254000",
    "end": "255680"
  },
  {
    "text": "over the list multiple times",
    "start": "255680",
    "end": "257600"
  },
  {
    "text": "it is faster than generator expressions",
    "start": "257600",
    "end": "260239"
  },
  {
    "text": "depending on the context it could be two",
    "start": "260239",
    "end": "261759"
  },
  {
    "text": "to three times faster",
    "start": "261759",
    "end": "263120"
  },
  {
    "text": "so speed is essential you want to use",
    "start": "263120",
    "end": "264880"
  },
  {
    "text": "these and if you need different list",
    "start": "264880",
    "end": "267120"
  },
  {
    "text": "methods like",
    "start": "267120",
    "end": "268080"
  },
  {
    "text": "especially the slicing notation you",
    "start": "268080",
    "end": "270639"
  },
  {
    "text": "should be using list comprehension",
    "start": "270639",
    "end": "272320"
  },
  {
    "text": "on the other hand you should use",
    "start": "272320",
    "end": "274720"
  },
  {
    "text": "generator expressions",
    "start": "274720",
    "end": "276560"
  },
  {
    "text": "when the range of the sequence is large",
    "start": "276560",
    "end": "278800"
  },
  {
    "text": "or infinite",
    "start": "278800",
    "end": "280000"
  },
  {
    "text": "or if you want to construct iteratable",
    "start": "280000",
    "end": "281919"
  },
  {
    "text": "generator objects",
    "start": "281919",
    "end": "283840"
  },
  {
    "text": "which are great to impress your friends",
    "start": "283840",
    "end": "286080"
  },
  {
    "text": "with",
    "start": "286080",
    "end": "287360"
  },
  {
    "text": "i should mention i'm really grateful for",
    "start": "287360",
    "end": "288960"
  },
  {
    "text": "the sponsors that support these videos",
    "start": "288960",
    "end": "290800"
  },
  {
    "text": "and the podcast",
    "start": "290800",
    "end": "292000"
  },
  {
    "text": "in this case eight sleep so if you enjoy",
    "start": "292000",
    "end": "294240"
  },
  {
    "text": "these click the links in the description",
    "start": "294240",
    "end": "296080"
  },
  {
    "text": "to get a discount and to support my",
    "start": "296080",
    "end": "297919"
  },
  {
    "text": "efforts thanks for listening",
    "start": "297919",
    "end": "299600"
  },
  {
    "text": "and remember try to learn something new",
    "start": "299600",
    "end": "301759"
  },
  {
    "text": "every day",
    "start": "301759",
    "end": "311840"
  },
  {
    "text": "you",
    "start": "318560",
    "end": "320639"
  }
]