[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "so the world was was just coming online",
    "start": "13440",
    "end": "16160"
  },
  {
    "text": "say coming of",
    "start": "16160",
    "end": "17400"
  },
  {
    "text": "age and there were no smartphones there",
    "start": "17400",
    "end": "19920"
  },
  {
    "text": "there weren't even Pawn Pilots like you",
    "start": "19920",
    "end": "21720"
  },
  {
    "text": "know the people having devices in their",
    "start": "21720",
    "end": "23439"
  },
  {
    "text": "hands was not a thing if you walked up",
    "start": "23439",
    "end": "25560"
  },
  {
    "text": "to somebody on the street and said hey",
    "start": "25560",
    "end": "26880"
  },
  {
    "text": "do you have a phone they'd look at you",
    "start": "26880",
    "end": "28960"
  },
  {
    "text": "funny so young William Clinton just",
    "start": "28960",
    "end": "31759"
  },
  {
    "start": "29000",
    "end": "181000"
  },
  {
    "text": "completed one year uh as the President",
    "start": "31759",
    "end": "34040"
  },
  {
    "text": "of the United States and green day just",
    "start": "34040",
    "end": "36399"
  },
  {
    "text": "released dookie and the Winter Olympics",
    "start": "36399",
    "end": "39559"
  },
  {
    "text": "were held in Lili Homer Norway and The",
    "start": "39559",
    "end": "42559"
  },
  {
    "text": "Lion King came out that year friends was",
    "start": "42559",
    "end": "45440"
  },
  {
    "text": "in his first season and The game",
    "start": "45440",
    "end": "47480"
  },
  {
    "text": "everyone was playing with Doom 2 these",
    "start": "47480",
    "end": "49680"
  },
  {
    "text": "were heady days",
    "start": "49680",
    "end": "52079"
  },
  {
    "text": "indeed and in these housan days",
    "start": "52079",
    "end": "54399"
  },
  {
    "text": "Microsoft released a preview of it of",
    "start": "54399",
    "end": "56879"
  },
  {
    "text": "the next generation of its uh Windows",
    "start": "56879",
    "end": "58960"
  },
  {
    "text": "operating system code name",
    "start": "58960",
    "end": "60760"
  },
  {
    "text": "Chicago the worldwide web was just begin",
    "start": "60760",
    "end": "64280"
  },
  {
    "text": "beginning to be become a thing and uh",
    "start": "64280",
    "end": "67280"
  },
  {
    "text": "you could you know most people didn't",
    "start": "67280",
    "end": "68840"
  },
  {
    "text": "have it in their house you could walk",
    "start": "68840",
    "end": "70400"
  },
  {
    "text": "down to an internet cafe where you could",
    "start": "70400",
    "end": "73040"
  },
  {
    "text": "exhaust the internet in a couple of",
    "start": "73040",
    "end": "74600"
  },
  {
    "text": "hours you know by searching on",
    "start": "74600",
    "end": "77640"
  },
  {
    "text": "WebCrawler through",
    "start": "77640",
    "end": "79720"
  },
  {
    "text": "mosic uh so yeah the PlayStation came",
    "start": "79720",
    "end": "82040"
  },
  {
    "text": "out that year that was state of the art",
    "start": "82040",
    "end": "84400"
  },
  {
    "text": "and",
    "start": "84400",
    "end": "85280"
  },
  {
    "text": "Computing uh and the uh the Commodore",
    "start": "85280",
    "end": "88920"
  },
  {
    "text": "International went bankrupt and uh the",
    "start": "88920",
    "end": "93439"
  },
  {
    "text": "the the latest and greatest in Computing",
    "start": "93439",
    "end": "95360"
  },
  {
    "text": "was uh the power",
    "start": "95360",
    "end": "97960"
  },
  {
    "text": "MacIntosh and as we know risk",
    "start": "97960",
    "end": "99960"
  },
  {
    "text": "architecture changed",
    "start": "99960",
    "end": "102520"
  },
  {
    "text": "everything Steve Jobs was not at Apple",
    "start": "102520",
    "end": "105920"
  },
  {
    "text": "he was at next selling object technology",
    "start": "105920",
    "end": "108799"
  },
  {
    "text": "and uh and Objective C to uh to eager",
    "start": "108799",
    "end": "112360"
  },
  {
    "text": "customers and a company called rational",
    "start": "112360",
    "end": "114640"
  },
  {
    "text": "software was developing the first seeds",
    "start": "114640",
    "end": "116880"
  },
  {
    "text": "of of a a unified modeling language",
    "start": "116880",
    "end": "119600"
  },
  {
    "text": "called uml which was to become the",
    "start": "119600",
    "end": "121960"
  },
  {
    "text": "lingua Franca of objectoriented",
    "start": "121960",
    "end": "126280"
  },
  {
    "text": "design So speaking of object-oriented",
    "start": "126280",
    "end": "128959"
  },
  {
    "text": "design so this book came out all right",
    "start": "128959",
    "end": "132080"
  },
  {
    "text": "design patterns elements of for usable",
    "start": "132080",
    "end": "135200"
  },
  {
    "text": "objectoriented software so this was",
    "start": "135200",
    "end": "137400"
  },
  {
    "text": "published in 1994 20 years",
    "start": "137400",
    "end": "140120"
  },
  {
    "text": "ago uh so it it was was written by the",
    "start": "140120",
    "end": "143239"
  },
  {
    "text": "so called Gang of four and the idea with",
    "start": "143239",
    "end": "145519"
  },
  {
    "text": "this book was was to apply um oh here",
    "start": "145519",
    "end": "148599"
  },
  {
    "text": "I'll hold it",
    "start": "148599",
    "end": "150440"
  },
  {
    "text": "so it was it was to apply the the idea",
    "start": "150440",
    "end": "153319"
  },
  {
    "text": "of pattern languages which is was comes",
    "start": "153319",
    "end": "155239"
  },
  {
    "text": "from architecture an architect named",
    "start": "155239",
    "end": "156959"
  },
  {
    "text": "Christopher Alexander uh developed this",
    "start": "156959",
    "end": "159200"
  },
  {
    "text": "idea of pattern languages in",
    "start": "159200",
    "end": "160400"
  },
  {
    "text": "architecture and so the idea of this",
    "start": "160400",
    "end": "162360"
  },
  {
    "text": "book was to apply that to software",
    "start": "162360",
    "end": "164519"
  },
  {
    "text": "creation and this idea I caught on like",
    "start": "164519",
    "end": "167000"
  },
  {
    "text": "wildfire and it actually popularized the",
    "start": "167000",
    "end": "169519"
  },
  {
    "text": "notion of software architecture that was",
    "start": "169519",
    "end": "171840"
  },
  {
    "text": "not really a thing at least wasn't a",
    "start": "171840",
    "end": "174360"
  },
  {
    "text": "very popular notion before this book and",
    "start": "174360",
    "end": "177120"
  },
  {
    "text": "so this became the Bible of self-styled",
    "start": "177120",
    "end": "179360"
  },
  {
    "text": "software Architects",
    "start": "179360",
    "end": "181400"
  },
  {
    "start": "181000",
    "end": "212000"
  },
  {
    "text": "everywhere so you know the book contains",
    "start": "181400",
    "end": "184440"
  },
  {
    "text": "classic objectoriented design patterns",
    "start": "184440",
    "end": "186959"
  },
  {
    "text": "that I'm sure we've all heard of you",
    "start": "186959",
    "end": "189280"
  },
  {
    "text": "know hits like abstract Factory and",
    "start": "189280",
    "end": "192519"
  },
  {
    "text": "prototype iterator is in the standard",
    "start": "192519",
    "end": "194599"
  },
  {
    "text": "scholar Library uh Singleton is actually",
    "start": "194599",
    "end": "196920"
  },
  {
    "text": "built into Scola right",
    "start": "196920",
    "end": "200959"
  },
  {
    "text": "yeah and you know you can like people",
    "start": "200959",
    "end": "203319"
  },
  {
    "text": "combine these things like you know you",
    "start": "203319",
    "end": "204760"
  },
  {
    "text": "can have abstract single procy Factory",
    "start": "204760",
    "end": "206480"
  },
  {
    "text": "Bean in your in your library and and",
    "start": "206480",
    "end": "208439"
  },
  {
    "text": "people are like yeah that's that's",
    "start": "208439",
    "end": "209959"
  },
  {
    "text": "awesome but a lesser known pattern is",
    "start": "209959",
    "end": "213239"
  },
  {
    "start": "212000",
    "end": "261000"
  },
  {
    "text": "the inter interpreter pattern this one",
    "start": "213239",
    "end": "214879"
  },
  {
    "text": "is sort of like an unsung",
    "start": "214879",
    "end": "216599"
  },
  {
    "text": "hero um so so the description of",
    "start": "216599",
    "end": "220280"
  },
  {
    "text": "interpreter if you if you would all turn",
    "start": "220280",
    "end": "222040"
  },
  {
    "text": "to page 243 in your gang of hor books",
    "start": "222040",
    "end": "225280"
  },
  {
    "text": "you can see that the uh the description",
    "start": "225280",
    "end": "228239"
  },
  {
    "text": "is that given a language we Define a",
    "start": "228239",
    "end": "230480"
  },
  {
    "text": "representation for its grammar along",
    "start": "230480",
    "end": "232599"
  },
  {
    "text": "with an interpreter that uses the",
    "start": "232599",
    "end": "233959"
  },
  {
    "text": "representation to interpret sentences in",
    "start": "233959",
    "end": "235959"
  },
  {
    "text": "the language right sounds kind of weird",
    "start": "235959",
    "end": "238040"
  },
  {
    "text": "right",
    "start": "238040",
    "end": "240200"
  },
  {
    "text": "and so it's it was kind of a",
    "start": "240200",
    "end": "241920"
  },
  {
    "text": "misunderstood pattern and people didn't",
    "start": "241920",
    "end": "243200"
  },
  {
    "text": "really get it for instance o design.com",
    "start": "243200",
    "end": "246439"
  },
  {
    "text": "now says The Interpreter is one of the",
    "start": "246439",
    "end": "248120"
  },
  {
    "text": "design patterns published in the gang of",
    "start": "248120",
    "end": "249720"
  },
  {
    "text": "four which is not really",
    "start": "249720",
    "end": "251519"
  },
  {
    "text": "used and the department chair of",
    "start": "251519",
    "end": "254079"
  },
  {
    "text": "computer science at San Jose State",
    "start": "254079",
    "end": "255439"
  },
  {
    "text": "University said I'm not sure this",
    "start": "255439",
    "end": "257239"
  },
  {
    "text": "pattern has wide",
    "start": "257239",
    "end": "259880"
  },
  {
    "text": "applicability and Steve Yi in one of his",
    "start": "260600",
    "end": "263120"
  },
  {
    "text": "rants uh I'll just read this out of",
    "start": "263120",
    "end": "266000"
  },
  {
    "text": "course I loved all of design patterns",
    "start": "266000",
    "end": "267759"
  },
  {
    "text": "except for Pages 243 to 25 six which is",
    "start": "267759",
    "end": "270240"
  },
  {
    "text": "The Interpreter pattern which had the",
    "start": "270240",
    "end": "271919"
  },
  {
    "text": "magic property of inducing a coma likee",
    "start": "271919",
    "end": "273639"
  },
  {
    "text": "trance whenever I tried to skim through",
    "start": "273639",
    "end": "275240"
  },
  {
    "text": "them I could put on a black ninja suit",
    "start": "275240",
    "end": "277240"
  },
  {
    "text": "and sneak through the building and",
    "start": "277240",
    "end": "278560"
  },
  {
    "text": "presuming I didn't get arrested I could",
    "start": "278560",
    "end": "280039"
  },
  {
    "text": "tear those pages out of every single",
    "start": "280039",
    "end": "281840"
  },
  {
    "text": "copy of design patterns at Amazon and",
    "start": "281840",
    "end": "283919"
  },
  {
    "text": "almost nobody would",
    "start": "283919",
    "end": "286520"
  },
  {
    "text": "notice",
    "start": "286520",
    "end": "288199"
  },
  {
    "text": "but uh I so this is a quote from from me",
    "start": "288199",
    "end": "293720"
  },
  {
    "text": "so some somebody uh yeah caught caught",
    "start": "293720",
    "end": "297280"
  },
  {
    "text": "me saying that at one point",
    "start": "297280",
    "end": "300039"
  },
  {
    "text": "so no I I really think that this pattern",
    "start": "300039",
    "end": "301919"
  },
  {
    "text": "is is underutilized and uh and it's sort",
    "start": "301919",
    "end": "305080"
  },
  {
    "text": "of it captures an idea that uh that I",
    "start": "305080",
    "end": "309800"
  },
  {
    "text": "think is extremely useful and is sort of",
    "start": "309800",
    "end": "312199"
  },
  {
    "text": "universally applicable to almost",
    "start": "312199",
    "end": "314520"
  },
  {
    "text": "everything so let's look at this uh",
    "start": "314520",
    "end": "317880"
  },
  {
    "start": "315000",
    "end": "335000"
  },
  {
    "text": "let's look at this pattern so what is",
    "start": "317880",
    "end": "319360"
  },
  {
    "text": "the The Interpreter pattern well the",
    "start": "319360",
    "end": "321080"
  },
  {
    "text": "motivation section uh says that so you",
    "start": "321080",
    "end": "324039"
  },
  {
    "text": "have a problem that occurs often you",
    "start": "324039",
    "end": "326199"
  },
  {
    "text": "express instances of the problem as",
    "start": "326199",
    "end": "328840"
  },
  {
    "text": "sentences in a simple language and then",
    "start": "328840",
    "end": "331120"
  },
  {
    "text": "you solve the problem by interpreting",
    "start": "331120",
    "end": "333520"
  },
  {
    "text": "the",
    "start": "333520",
    "end": "334800"
  },
  {
    "text": "sentences now they give an example uh in",
    "start": "334800",
    "end": "338919"
  },
  {
    "start": "335000",
    "end": "364000"
  },
  {
    "text": "the beginning uh they always start with",
    "start": "338919",
    "end": "340840"
  },
  {
    "text": "an example in this book and so the",
    "start": "340840",
    "end": "342600"
  },
  {
    "text": "example that they start with is an a",
    "start": "342600",
    "end": "344720"
  },
  {
    "text": "simple regular expression language so",
    "start": "344720",
    "end": "348199"
  },
  {
    "text": "the problem is that you want to search",
    "start": "348199",
    "end": "349600"
  },
  {
    "text": "for Strings that match a pattern and",
    "start": "349600",
    "end": "352120"
  },
  {
    "text": "then you have um Regular Expressions",
    "start": "352120",
    "end": "354800"
  },
  {
    "text": "which are sort of a",
    "start": "354800",
    "end": "357360"
  },
  {
    "text": "language and then you interpret those",
    "start": "357360",
    "end": "360720"
  },
  {
    "text": "expressions using an interpreter to",
    "start": "360720",
    "end": "362440"
  },
  {
    "text": "match actual strings so here's the",
    "start": "362440",
    "end": "365039"
  },
  {
    "start": "364000",
    "end": "390000"
  },
  {
    "text": "grammar for their regular expression",
    "start": "365039",
    "end": "366479"
  },
  {
    "text": "language so they start with you know an",
    "start": "366479",
    "end": "369240"
  },
  {
    "text": "expression is one of these things it's a",
    "start": "369240",
    "end": "371039"
  },
  {
    "text": "literal or an alternation or a sequence",
    "start": "371039",
    "end": "373080"
  },
  {
    "text": "or a repetition or another expression in",
    "start": "373080",
    "end": "375120"
  },
  {
    "text": "parentheses an alternation is two",
    "start": "375120",
    "end": "377080"
  },
  {
    "text": "expressions separated by a pipe a",
    "start": "377080",
    "end": "379080"
  },
  {
    "text": "sequence is two expressions separated by",
    "start": "379080",
    "end": "381039"
  },
  {
    "text": "an ENT and a reputation is an expression",
    "start": "381039",
    "end": "383360"
  },
  {
    "text": "followed by an asterisk and then a",
    "start": "383360",
    "end": "385759"
  },
  {
    "text": "literal expression is uh a sequence of",
    "start": "385759",
    "end": "388880"
  },
  {
    "text": "characters",
    "start": "388880",
    "end": "390599"
  },
  {
    "start": "390000",
    "end": "423000"
  },
  {
    "text": "so here's the uml diagram for that you",
    "start": "390599",
    "end": "393319"
  },
  {
    "text": "know I'm I'm sure all of you are well",
    "start": "393319",
    "end": "395039"
  },
  {
    "text": "versed in inl by",
    "start": "395039",
    "end": "396880"
  },
  {
    "text": "now",
    "start": "396880",
    "end": "398440"
  },
  {
    "text": "so you uh I mean it's totally clear",
    "start": "398440",
    "end": "401039"
  },
  {
    "text": "right you have a a super class which is",
    "start": "401039",
    "end": "404440"
  },
  {
    "text": "abstract uh and then you have four",
    "start": "404440",
    "end": "406840"
  },
  {
    "text": "subclasses right and the subclasses",
    "start": "406840",
    "end": "408960"
  },
  {
    "text": "contain instances of the super class",
    "start": "408960",
    "end": "411360"
  },
  {
    "text": "like sequence expression has two",
    "start": "411360",
    "end": "413080"
  },
  {
    "text": "alternation expression has two",
    "start": "413080",
    "end": "414319"
  },
  {
    "text": "repetition has one uh right and so you",
    "start": "414319",
    "end": "417240"
  },
  {
    "text": "have this a class and then you have",
    "start": "417240",
    "end": "418919"
  },
  {
    "text": "these these sub classes which are sort",
    "start": "418919",
    "end": "421000"
  },
  {
    "text": "of the instances I mean the the cases so",
    "start": "421000",
    "end": "424240"
  },
  {
    "start": "423000",
    "end": "626000"
  },
  {
    "text": "in scolar we can do it like this right",
    "start": "424240",
    "end": "425840"
  },
  {
    "text": "so we can have a regular expression",
    "start": "425840",
    "end": "428160"
  },
  {
    "text": "trait uh so that's abstract and then we",
    "start": "428160",
    "end": "430639"
  },
  {
    "text": "have case classes for each one of those",
    "start": "430639",
    "end": "432680"
  },
  {
    "text": "but that's a little verbose for me so",
    "start": "432680",
    "end": "434000"
  },
  {
    "text": "I'm just going to do this so we have a",
    "start": "434000",
    "end": "437440"
  },
  {
    "text": "seal trait expression and then uh we",
    "start": "437440",
    "end": "439840"
  },
  {
    "text": "have a case class for each of the rules",
    "start": "439840",
    "end": "442319"
  },
  {
    "text": "in the grammar one uh for literals one",
    "start": "442319",
    "end": "444720"
  },
  {
    "text": "for and which is the sequence expression",
    "start": "444720",
    "end": "447280"
  },
  {
    "text": "uh one for Star which is many and then",
    "start": "447280",
    "end": "449160"
  },
  {
    "text": "or which which is the the pipe okay and",
    "start": "449160",
    "end": "451479"
  },
  {
    "text": "then an",
    "start": "451479",
    "end": "452560"
  },
  {
    "text": "actual uh expression in this language uh",
    "start": "452560",
    "end": "455599"
  },
  {
    "text": "has this structure this is the the uml",
    "start": "455599",
    "end": "457759"
  },
  {
    "text": "structure diagram for one of those",
    "start": "457759",
    "end": "460440"
  },
  {
    "text": "things and so if you have an expression",
    "start": "460440",
    "end": "463840"
  },
  {
    "text": "uh that represents the U so a structure",
    "start": "463840",
    "end": "468000"
  },
  {
    "text": "that represents a regular expression you",
    "start": "468000",
    "end": "469840"
  },
  {
    "text": "know that matches strings that start",
    "start": "469840",
    "end": "472159"
  },
  {
    "text": "with reing and then are followed by uh",
    "start": "472159",
    "end": "476960"
  },
  {
    "text": "many instances of either dogs or cats",
    "start": "476960",
    "end": "479840"
  },
  {
    "text": "then then this this would be the",
    "start": "479840",
    "end": "481319"
  },
  {
    "text": "expression for that and in Scala it",
    "start": "481319",
    "end": "482720"
  },
  {
    "text": "looks like this so it's just an and",
    "start": "482720",
    "end": "485520"
  },
  {
    "text": "containing a literal and a many of an",
    "start": "485520",
    "end": "488159"
  },
  {
    "text": "ore that has two literals dogs and cats",
    "start": "488159",
    "end": "490639"
  },
  {
    "text": "right so then the idea is that we can",
    "start": "490639",
    "end": "494199"
  },
  {
    "text": "interpret these Expressions given a",
    "start": "494199",
    "end": "497319"
  },
  {
    "text": "string we interpret them to see if they",
    "start": "497319",
    "end": "499240"
  },
  {
    "text": "match that string or not so the idea is",
    "start": "499240",
    "end": "502000"
  },
  {
    "text": "then given a string you know if if you",
    "start": "502000",
    "end": "503919"
  },
  {
    "text": "have a literal then you just check if",
    "start": "503919",
    "end": "505680"
  },
  {
    "text": "the if the literal string matches the",
    "start": "505680",
    "end": "508520"
  },
  {
    "text": "input string and or checks if either one",
    "start": "508520",
    "end": "510759"
  },
  {
    "text": "of the of its sub Expressions matches",
    "start": "510759",
    "end": "513440"
  },
  {
    "text": "and checks if both of them match in",
    "start": "513440",
    "end": "515399"
  },
  {
    "text": "sequence and many you know tries to uh",
    "start": "515399",
    "end": "518399"
  },
  {
    "text": "repeatedly apply the the",
    "start": "518399",
    "end": "520919"
  },
  {
    "text": "pattern so here is an implementation of",
    "start": "520919",
    "end": "523320"
  },
  {
    "text": "the of The Interpreter for regular",
    "start": "523320",
    "end": "525120"
  },
  {
    "text": "Expressions now they don't actually give",
    "start": "525120",
    "end": "528000"
  },
  {
    "text": "the the uh implementation until late in",
    "start": "528000",
    "end": "530880"
  },
  {
    "text": "the in the chapter and uh because they",
    "start": "530880",
    "end": "534000"
  },
  {
    "text": "use a they use a mutable context so they",
    "start": "534000",
    "end": "537279"
  },
  {
    "text": "they pass in instead of passing this",
    "start": "537279",
    "end": "538880"
  },
  {
    "text": "just the string they also pass into",
    "start": "538880",
    "end": "540480"
  },
  {
    "text": "mutable context and The Interpreter",
    "start": "540480",
    "end": "542360"
  },
  {
    "text": "proceeds to mutate it and it's it's all",
    "start": "542360",
    "end": "543839"
  },
  {
    "text": "written in small talk and it's totally",
    "start": "543839",
    "end": "545640"
  },
  {
    "text": "awesome but it's very long but I I wrote",
    "start": "545640",
    "end": "549399"
  },
  {
    "text": "it out in in Scala using an immutable",
    "start": "549399",
    "end": "552200"
  },
  {
    "text": "state so just pass in the input string",
    "start": "552200",
    "end": "555399"
  },
  {
    "text": "and then it Returns the the resulting",
    "start": "555399",
    "end": "557640"
  },
  {
    "text": "string and what this what this does is",
    "start": "557640",
    "end": "559920"
  },
  {
    "text": "if if there's a literal then you know if",
    "start": "559920",
    "end": "562079"
  },
  {
    "text": "that literal starts with L then it",
    "start": "562079",
    "end": "564160"
  },
  {
    "text": "matches and then we drop the you know we",
    "start": "564160",
    "end": "566600"
  },
  {
    "text": "consume that bit of the string um and",
    "start": "566600",
    "end": "569079"
  },
  {
    "text": "then or in many actually recurse of the",
    "start": "569079",
    "end": "570800"
  },
  {
    "text": "structure and pass the string along as",
    "start": "570800",
    "end": "572600"
  },
  {
    "text": "it's being consumed so it's it's you",
    "start": "572600",
    "end": "574519"
  },
  {
    "text": "know it's a purely functional thing in",
    "start": "574519",
    "end": "577360"
  },
  {
    "text": "fact uh we can use uh um the state monat",
    "start": "577360",
    "end": "582040"
  },
  {
    "text": "we can use uh like from Scala state so",
    "start": "582040",
    "end": "584760"
  },
  {
    "text": "our interpreter uh that just takes a",
    "start": "584760",
    "end": "587800"
  },
  {
    "text": "string and returns a Boolean and a",
    "start": "587800",
    "end": "589040"
  },
  {
    "text": "string is actually uh a state machine so",
    "start": "589040",
    "end": "592279"
  },
  {
    "text": "we can make that explicit using Scala",
    "start": "592279",
    "end": "593839"
  },
  {
    "text": "that's uh State",
    "start": "593839",
    "end": "595720"
  },
  {
    "text": "Monet in fact they say in the book on on",
    "start": "595720",
    "end": "598560"
  },
  {
    "text": "page 245",
    "start": "598560",
    "end": "600040"
  },
  {
    "text": "they say that the uh uh you know that",
    "start": "600040",
    "end": "604040"
  },
  {
    "text": "you're encouraged to not actually you",
    "start": "604040",
    "end": "606000"
  },
  {
    "text": "know interpret using a context they",
    "start": "606000",
    "end": "607720"
  },
  {
    "text": "actually encourage using an immutable uh",
    "start": "607720",
    "end": "610920"
  },
  {
    "text": "interpreter so an actual State machine",
    "start": "610920",
    "end": "613760"
  },
  {
    "text": "right which is what what I've done on",
    "start": "613760",
    "end": "616240"
  },
  {
    "text": "the previous slide so yeah they say",
    "start": "616240",
    "end": "618279"
  },
  {
    "text": "interpreters are usually not implemented",
    "start": "618279",
    "end": "619839"
  },
  {
    "text": "by interpreting par 3es directly but by",
    "start": "619839",
    "end": "621680"
  },
  {
    "text": "first translating them into another form",
    "start": "621680",
    "end": "623519"
  },
  {
    "text": "for example regular expressions are",
    "start": "623519",
    "end": "624800"
  },
  {
    "text": "often translated into State machines so",
    "start": "624800",
    "end": "628160"
  },
  {
    "text": "some important things to note",
    "start": "628160",
    "end": "629600"
  },
  {
    "text": "expressions are pure syntax they're just",
    "start": "629600",
    "end": "632399"
  },
  {
    "text": "syntactic they don't have any intrinsic",
    "start": "632399",
    "end": "634600"
  },
  {
    "text": "meaning of their own the fact that you",
    "start": "634600",
    "end": "636959"
  },
  {
    "text": "see and or and many um the the the",
    "start": "636959",
    "end": "641320"
  },
  {
    "text": "actual description of the meaning is not",
    "start": "641320",
    "end": "643600"
  },
  {
    "text": "inherent in the syntax it's not in the",
    "start": "643600",
    "end": "646000"
  },
  {
    "text": "objects semantics are given by",
    "start": "646000",
    "end": "648160"
  },
  {
    "text": "interpreting in some context now we",
    "start": "648160",
    "end": "650560"
  },
  {
    "text": "could interpret with a context that",
    "start": "650560",
    "end": "651760"
  },
  {
    "text": "turns all the NS into ores that would be",
    "start": "651760",
    "end": "653600"
  },
  {
    "text": "perfectly valid so an example of a",
    "start": "653600",
    "end": "656560"
  },
  {
    "text": "translation of giving semantics to an",
    "start": "656560",
    "end": "659880"
  },
  {
    "text": "expression is to translate it into a",
    "start": "659880",
    "end": "661760"
  },
  {
    "text": "state",
    "start": "661760",
    "end": "663320"
  },
  {
    "start": "663000",
    "end": "1032000"
  },
  {
    "text": "machine so then they give the overall",
    "start": "663320",
    "end": "666000"
  },
  {
    "text": "structure of The Interpreter pattern",
    "start": "666000",
    "end": "667959"
  },
  {
    "text": "which looks like this uh and again this",
    "start": "667959",
    "end": "669920"
  },
  {
    "text": "is should be totally clear right I just",
    "start": "669920",
    "end": "672160"
  },
  {
    "text": "have to show this for three seconds uh",
    "start": "672160",
    "end": "675440"
  },
  {
    "text": "so you have you have a client that that",
    "start": "675440",
    "end": "677440"
  },
  {
    "text": "knows about some Contex context and then",
    "start": "677440",
    "end": "680079"
  },
  {
    "text": "there's an interpreter that receives",
    "start": "680079",
    "end": "681920"
  },
  {
    "text": "that context uh and it consists of an",
    "start": "681920",
    "end": "686160"
  },
  {
    "text": "abstract expression class and then",
    "start": "686160",
    "end": "688160"
  },
  {
    "text": "there's a number of subclasses uh and",
    "start": "688160",
    "end": "691000"
  },
  {
    "text": "here they just say that there are in",
    "start": "691000",
    "end": "692279"
  },
  {
    "text": "general two different kinds uh there",
    "start": "692279",
    "end": "694639"
  },
  {
    "text": "could be a terminal expression which",
    "start": "694639",
    "end": "696000"
  },
  {
    "text": "does not which is not recursive and the",
    "start": "696000",
    "end": "698040"
  },
  {
    "text": "non-terminal expression which is",
    "start": "698040",
    "end": "699360"
  },
  {
    "text": "actually recursive right so this looks",
    "start": "699360",
    "end": "702680"
  },
  {
    "text": "really familiar right so um in Scala you",
    "start": "702680",
    "end": "706200"
  },
  {
    "text": "know we have a sealed trait and then a",
    "start": "706200",
    "end": "708240"
  },
  {
    "text": "number of case classes right so",
    "start": "708240",
    "end": "710560"
  },
  {
    "text": "interpreter is actually the algebraic",
    "start": "710560",
    "end": "712600"
  },
  {
    "text": "data type pattern right so it's a close",
    "start": "712600",
    "end": "715240"
  },
  {
    "text": "system consisting of an abstract super",
    "start": "715240",
    "end": "717079"
  },
  {
    "text": "type and a number of case classes um and",
    "start": "717079",
    "end": "721480"
  },
  {
    "text": "you know if we carry that thought",
    "start": "721480",
    "end": "723120"
  },
  {
    "text": "further we can say that algebraic T data",
    "start": "723120",
    "end": "725639"
  },
  {
    "text": "types actually are little languages and",
    "start": "725639",
    "end": "729040"
  },
  {
    "text": "so and then we have interpreters for",
    "start": "729040",
    "end": "731120"
  },
  {
    "text": "sort of interpreting those",
    "start": "731120",
    "end": "733040"
  },
  {
    "text": "languages for example option is a little",
    "start": "733040",
    "end": "735680"
  },
  {
    "text": "language that has two instructions um so",
    "start": "735680",
    "end": "739480"
  },
  {
    "text": "one one of them is we're specifying that",
    "start": "739480",
    "end": "741600"
  },
  {
    "text": "there is an element of type A and the",
    "start": "741600",
    "end": "743680"
  },
  {
    "text": "other one is for specifying that there",
    "start": "743680",
    "end": "745120"
  },
  {
    "text": "is not an element of type a right so you",
    "start": "745120",
    "end": "748199"
  },
  {
    "text": "have none and some these are both",
    "start": "748199",
    "end": "750320"
  },
  {
    "text": "terminal expressions in the in the",
    "start": "750320",
    "end": "753279"
  },
  {
    "text": "pattern um so yeah you take a problem",
    "start": "753279",
    "end": "757240"
  },
  {
    "text": "that occurs often which is uh the",
    "start": "757240",
    "end": "760560"
  },
  {
    "text": "ability to say that there there is the",
    "start": "760560",
    "end": "763320"
  },
  {
    "text": "lack of a value uh so that's what what",
    "start": "763320",
    "end": "766079"
  },
  {
    "text": "option does and then you express",
    "start": "766079",
    "end": "767480"
  },
  {
    "text": "instances of it as sentences in a simple",
    "start": "767480",
    "end": "769360"
  },
  {
    "text": "language that is in the option data type",
    "start": "769360",
    "end": "771480"
  },
  {
    "text": "and then you solve the problem by",
    "start": "771480",
    "end": "772800"
  },
  {
    "text": "interpreting these",
    "start": "772800",
    "end": "774160"
  },
  {
    "text": "sentences",
    "start": "774160",
    "end": "775959"
  },
  {
    "text": "so but we we'll get to what that means",
    "start": "775959",
    "end": "778160"
  },
  {
    "text": "to it's actually interpret option so",
    "start": "778160",
    "end": "780800"
  },
  {
    "text": "again option is purely syntactic right",
    "start": "780800",
    "end": "783279"
  },
  {
    "text": "there there is no inherent meaning uh",
    "start": "783279",
    "end": "785760"
  },
  {
    "text": "ascribed to some and none right it's",
    "start": "785760",
    "end": "788079"
  },
  {
    "text": "just some has a value of type A and none",
    "start": "788079",
    "end": "790560"
  },
  {
    "text": "does not but the uh the actual option",
    "start": "790560",
    "end": "794279"
  },
  {
    "text": "data type doesn't tell you anything",
    "start": "794279",
    "end": "796120"
  },
  {
    "text": "about what that means right it's up to",
    "start": "796120",
    "end": "799560"
  },
  {
    "text": "some interpretation in a context to then",
    "start": "799560",
    "end": "802959"
  },
  {
    "text": "deconstruct and figure out you know what",
    "start": "802959",
    "end": "805480"
  },
  {
    "text": "to do in the case that it's none or if",
    "start": "805480",
    "end": "806880"
  },
  {
    "text": "it's",
    "start": "806880",
    "end": "807920"
  },
  {
    "text": "some so so if we wanted to take the uh",
    "start": "807920",
    "end": "811519"
  },
  {
    "text": "interpreter pattern very literally then",
    "start": "811519",
    "end": "813800"
  },
  {
    "text": "option would have a method like this it",
    "start": "813800",
    "end": "816600"
  },
  {
    "text": "would take a mutable context that would",
    "start": "816600",
    "end": "818320"
  },
  {
    "text": "just pass into option and then this the",
    "start": "818320",
    "end": "821000"
  },
  {
    "text": "interpret method would proceed to mutate",
    "start": "821000",
    "end": "823320"
  },
  {
    "text": "that context in a certain way but then",
    "start": "823320",
    "end": "825480"
  },
  {
    "text": "we'd have to have one method uh on",
    "start": "825480",
    "end": "829120"
  },
  {
    "text": "option per behavior that we want right",
    "start": "829120",
    "end": "832639"
  },
  {
    "text": "so so we'd have to have a food context",
    "start": "832639",
    "end": "834880"
  },
  {
    "text": "and a bar context and any type of",
    "start": "834880",
    "end": "836639"
  },
  {
    "text": "context that we might want to work with",
    "start": "836639",
    "end": "837920"
  },
  {
    "text": "option we'd have to have an entirely new",
    "start": "837920",
    "end": "840519"
  },
  {
    "text": "method well fortunately all of these",
    "start": "840519",
    "end": "842519"
  },
  {
    "text": "interpreters are going to have a very",
    "start": "842519",
    "end": "844160"
  },
  {
    "text": "similar structure so what we have",
    "start": "844160",
    "end": "847160"
  },
  {
    "text": "instead is uh a fold so fold can be seen",
    "start": "847160",
    "end": "851240"
  },
  {
    "text": "as The Interpreter for option uh you",
    "start": "851240",
    "end": "853720"
  },
  {
    "text": "give it uh the meanings of the",
    "start": "853720",
    "end": "856600"
  },
  {
    "text": "individual Constructors for the none and",
    "start": "856600",
    "end": "858600"
  },
  {
    "text": "the sum so you're saying in the case of",
    "start": "858600",
    "end": "861040"
  },
  {
    "text": "of sum turn this option into a b by just",
    "start": "861040",
    "end": "865160"
  },
  {
    "text": "using the The Zed and then in the casa I",
    "start": "865160",
    "end": "867839"
  },
  {
    "text": "mean sorry in the case of none and then",
    "start": "867839",
    "end": "869320"
  },
  {
    "text": "in the case of sum uh turn it into a b",
    "start": "869320",
    "end": "872160"
  },
  {
    "text": "by using the function f so you pass in",
    "start": "872160",
    "end": "874759"
  },
  {
    "text": "handlers for uh each of the cases and",
    "start": "874759",
    "end": "878839"
  },
  {
    "text": "that's what it means to sort of",
    "start": "878839",
    "end": "879839"
  },
  {
    "text": "interpret an option to give it some",
    "start": "879839",
    "end": "883160"
  },
  {
    "text": "semantics so the the astute listener",
    "start": "883160",
    "end": "887040"
  },
  {
    "text": "will will note that that is the visitor",
    "start": "887040",
    "end": "889079"
  },
  {
    "text": "pattern right so we're actually passing",
    "start": "889079",
    "end": "891120"
  },
  {
    "text": "in uh the The Zed and F uh objects",
    "start": "891120",
    "end": "894360"
  },
  {
    "text": "actually constitute a visitor object so",
    "start": "894360",
    "end": "897120"
  },
  {
    "text": "if we were to implement the visitor",
    "start": "897120",
    "end": "898480"
  },
  {
    "text": "pattern for for for option then uh you",
    "start": "898480",
    "end": "901480"
  },
  {
    "text": "know we'd have something like option",
    "start": "901480",
    "end": "902800"
  },
  {
    "text": "visitor and it would have two members",
    "start": "902800",
    "end": "904440"
  },
  {
    "text": "one of them would be you know have one",
    "start": "904440",
    "end": "907079"
  },
  {
    "text": "of them would have the shape of F and",
    "start": "907079",
    "end": "908880"
  },
  {
    "text": "the other one would have the just be a",
    "start": "908880",
    "end": "911320"
  },
  {
    "text": "sort of a default value to give in case",
    "start": "911320",
    "end": "912800"
  },
  {
    "text": "of none all right but we can fold any AD",
    "start": "912800",
    "end": "917680"
  },
  {
    "text": "we just need a Handler for each case so",
    "start": "917680",
    "end": "921279"
  },
  {
    "text": "in our regular expression language uh we",
    "start": "921279",
    "end": "924079"
  },
  {
    "text": "can write many uh interpreters uh that",
    "start": "924079",
    "end": "927160"
  },
  {
    "text": "that all share the same structure by",
    "start": "927160",
    "end": "929480"
  },
  {
    "text": "just uh passing in uh how we want to",
    "start": "929480",
    "end": "932639"
  },
  {
    "text": "handle each of the cases right so we can",
    "start": "932639",
    "end": "934959"
  },
  {
    "text": "fold one of these uh regular expression",
    "start": "934959",
    "end": "937920"
  },
  {
    "text": "things by just saying well how do we",
    "start": "937920",
    "end": "939079"
  },
  {
    "text": "handle literals how do we turn them them",
    "start": "939079",
    "end": "940880"
  },
  {
    "text": "into A's and then how do we handle ands",
    "start": "940880",
    "end": "943560"
  },
  {
    "text": "and then many and or and so it's",
    "start": "943560",
    "end": "945160"
  },
  {
    "text": "recursive so the only case that really",
    "start": "945160",
    "end": "947360"
  },
  {
    "text": "turns something into an a is is lit",
    "start": "947360",
    "end": "950000"
  },
  {
    "text": "right you turn a literal string into an",
    "start": "950000",
    "end": "951560"
  },
  {
    "text": "A and all the other ones uh recurse over",
    "start": "951560",
    "end": "954839"
  },
  {
    "text": "the structure using that the inner a as",
    "start": "954839",
    "end": "958079"
  },
  {
    "text": "the as the argument",
    "start": "958079",
    "end": "960199"
  },
  {
    "text": "okay so yeah uh we have some other",
    "start": "960199",
    "end": "963279"
  },
  {
    "text": "language a uh that we're turning that",
    "start": "963279",
    "end": "966040"
  },
  {
    "text": "we're turning this",
    "start": "966040",
    "end": "967199"
  },
  {
    "text": "into so in that structure it didn't",
    "start": "967199",
    "end": "971040"
  },
  {
    "text": "really matter that our literals were",
    "start": "971040",
    "end": "972959"
  },
  {
    "text": "strings they could have been any type",
    "start": "972959",
    "end": "975199"
  },
  {
    "text": "right for at least for for the case of",
    "start": "975199",
    "end": "977480"
  },
  {
    "text": "sort of the general fold um so instead",
    "start": "977480",
    "end": "980560"
  },
  {
    "text": "of having an expression whose literals",
    "start": "980560",
    "end": "983160"
  },
  {
    "text": "are strings we just say well we have an",
    "start": "983160",
    "end": "985160"
  },
  {
    "text": "expression whose literals are T of some",
    "start": "985160",
    "end": "987600"
  },
  {
    "text": "type T and then that works uh as long as",
    "start": "987600",
    "end": "991160"
  },
  {
    "text": "we can turn our T's into the language or",
    "start": "991160",
    "end": "993560"
  },
  {
    "text": "into the semantics a uh that works out",
    "start": "993560",
    "end": "996440"
  },
  {
    "text": "and the implementation is",
    "start": "996440",
    "end": "999120"
  },
  {
    "text": "identical",
    "start": "999120",
    "end": "1001120"
  },
  {
    "text": "okay but uh so this so the fold so",
    "start": "1001120",
    "end": "1006199"
  },
  {
    "text": "writing the general fold like this",
    "start": "1006199",
    "end": "1007800"
  },
  {
    "text": "actually makes this pattern easier to to",
    "start": "1007800",
    "end": "1009839"
  },
  {
    "text": "see like we I mean we could have",
    "start": "1009839",
    "end": "1011959"
  },
  {
    "text": "extracted some kind of General uh thing",
    "start": "1011959",
    "end": "1015519"
  },
  {
    "text": "like this like we could have could have",
    "start": "1015519",
    "end": "1017040"
  },
  {
    "text": "uh extracted the the idea that",
    "start": "1017040",
    "end": "1019600"
  },
  {
    "text": "that the literals Don't Have To Be",
    "start": "1019600",
    "end": "1021000"
  },
  {
    "text": "Strings uh you know from The Interpreter",
    "start": "1021000",
    "end": "1024038"
  },
  {
    "text": "pattern somehow but I think writing it",
    "start": "1024039",
    "end": "1026640"
  },
  {
    "text": "you when you write out the fold like",
    "start": "1026640",
    "end": "1028120"
  },
  {
    "text": "this it becomes very obvious that the",
    "start": "1028120",
    "end": "1030280"
  },
  {
    "text": "literals Don't Have To Be",
    "start": "1030280",
    "end": "1031720"
  },
  {
    "text": "Strings okay so what is folding really",
    "start": "1031720",
    "end": "1035000"
  },
  {
    "start": "1032000",
    "end": "1103000"
  },
  {
    "text": "so folding essentially uh replaces all",
    "start": "1035000",
    "end": "1038520"
  },
  {
    "text": "the instructions in the program so you",
    "start": "1038520",
    "end": "1041798"
  },
  {
    "text": "have your expression language and you",
    "start": "1041799",
    "end": "1043000"
  },
  {
    "text": "have some expression written in that",
    "start": "1043000",
    "end": "1044880"
  },
  {
    "text": "language uh and folding replaces all of",
    "start": "1044880",
    "end": "1047880"
  },
  {
    "text": "those in instructions with instructions",
    "start": "1047880",
    "end": "1051120"
  },
  {
    "text": "that come from a different language but",
    "start": "1051120",
    "end": "1052799"
  },
  {
    "text": "that language has to have the same kind",
    "start": "1052799",
    "end": "1054160"
  },
  {
    "text": "of structure right for example we",
    "start": "1054160",
    "end": "1058880"
  },
  {
    "text": "could uh fold our regular Expressions",
    "start": "1058880",
    "end": "1062760"
  },
  {
    "text": "let's say they were full of booleans",
    "start": "1062760",
    "end": "1064400"
  },
  {
    "text": "instead of strings then we could use it",
    "start": "1064400",
    "end": "1067679"
  },
  {
    "text": "basically as a Boolean algebra so then",
    "start": "1067679",
    "end": "1069360"
  },
  {
    "text": "we could say that you know folding an a",
    "start": "1069360",
    "end": "1072240"
  },
  {
    "text": "regular expression that is full of",
    "start": "1072240",
    "end": "1074559"
  },
  {
    "text": "booleans uh passing in the identity for",
    "start": "1074559",
    "end": "1076880"
  },
  {
    "text": "the literals and then and for the",
    "start": "1076880",
    "end": "1078840"
  },
  {
    "text": "sequence thing and not instead of many",
    "start": "1078840",
    "end": "1082039"
  },
  {
    "text": "so we're saying that the meaning of many",
    "start": "1082039",
    "end": "1083679"
  },
  {
    "text": "is actually not and then we're saying",
    "start": "1083679",
    "end": "1085760"
  },
  {
    "text": "that the meaning of the or thing is is",
    "start": "1085760",
    "end": "1087760"
  },
  {
    "text": "Boolean or so uh the the meaning of the",
    "start": "1087760",
    "end": "1092320"
  },
  {
    "text": "structure isn't specified until we give",
    "start": "1092320",
    "end": "1094520"
  },
  {
    "text": "it meaning by folding so for",
    "start": "1094520",
    "end": "1097799"
  },
  {
    "text": "example uh yeah using booleans instead",
    "start": "1097799",
    "end": "1102159"
  },
  {
    "text": "of strings so they actually give this",
    "start": "1102159",
    "end": "1104440"
  },
  {
    "start": "1103000",
    "end": "1272000"
  },
  {
    "text": "example in the book right so there's a",
    "start": "1104440",
    "end": "1106919"
  },
  {
    "text": "fully worked example in C++",
    "start": "1106919",
    "end": "1109840"
  },
  {
    "text": "uh really really long hairy",
    "start": "1109840",
    "end": "1112640"
  },
  {
    "text": "C++ uh that that they so they go through",
    "start": "1112640",
    "end": "1115200"
  },
  {
    "text": "this exercise of implementing a bullan",
    "start": "1115200",
    "end": "1117039"
  },
  {
    "text": "expression language but is totally",
    "start": "1117039",
    "end": "1118760"
  },
  {
    "text": "separate from the uh from the string",
    "start": "1118760",
    "end": "1122480"
  },
  {
    "text": "expression language that we used earlier",
    "start": "1122480",
    "end": "1125240"
  },
  {
    "text": "um but it's very similar it has a",
    "start": "1125240",
    "end": "1127640"
  },
  {
    "text": "similar structure right so a Boolean",
    "start": "1127640",
    "end": "1129120"
  },
  {
    "text": "expression is you know an or an and a",
    "start": "1129120",
    "end": "1132440"
  },
  {
    "text": "not uh and they have variables or they",
    "start": "1132440",
    "end": "1135720"
  },
  {
    "text": "have you know another bullan expression",
    "start": "1135720",
    "end": "1137960"
  },
  {
    "text": "uh oh there's one case missing here",
    "start": "1137960",
    "end": "1140000"
  },
  {
    "text": "which should be constant so it's either",
    "start": "1140000",
    "end": "1142039"
  },
  {
    "text": "constant true or false uh okay so then",
    "start": "1142039",
    "end": "1146200"
  },
  {
    "text": "this uh this example is is slightly more",
    "start": "1146200",
    "end": "1149240"
  },
  {
    "text": "enriched so in addition to having the",
    "start": "1149240",
    "end": "1151240"
  },
  {
    "text": "constants or the literals true and false",
    "start": "1151240",
    "end": "1153480"
  },
  {
    "text": "they also have variables so you could",
    "start": "1153480",
    "end": "1155919"
  },
  {
    "text": "have variables uh that have names that",
    "start": "1155919",
    "end": "1158640"
  },
  {
    "text": "look like",
    "start": "1158640",
    "end": "1160159"
  },
  {
    "text": "strings uh and then you can actually uh",
    "start": "1160159",
    "end": "1164600"
  },
  {
    "text": "the idea is that you should be able to",
    "start": "1164600",
    "end": "1165880"
  },
  {
    "text": "interpret and replace those variables",
    "start": "1165880",
    "end": "1167720"
  },
  {
    "text": "with booleans",
    "start": "1167720",
    "end": "1170720"
  },
  {
    "text": "yeah so you have um so you have an A",
    "start": "1170960",
    "end": "1175760"
  },
  {
    "text": "Boolean expression uh could be",
    "start": "1175760",
    "end": "1177400"
  },
  {
    "text": "represented in Scala like this so you",
    "start": "1177400",
    "end": "1179360"
  },
  {
    "text": "have a literal Boolean you have and not",
    "start": "1179360",
    "end": "1181640"
  },
  {
    "text": "or and then a VAR which is a string so",
    "start": "1181640",
    "end": "1184320"
  },
  {
    "text": "that's just a variable name and it's not",
    "start": "1184320",
    "end": "1186320"
  },
  {
    "text": "specified what that means right what",
    "start": "1186320",
    "end": "1187960"
  },
  {
    "text": "does it mean for there to be a string",
    "start": "1187960",
    "end": "1190240"
  },
  {
    "text": "inside of this thing so what they",
    "start": "1190240",
    "end": "1193320"
  },
  {
    "text": "do uh so the book talks about using",
    "start": "1193320",
    "end": "1196679"
  },
  {
    "text": "different interpreters in this",
    "start": "1196679",
    "end": "1198280"
  },
  {
    "text": "particular example and and they give",
    "start": "1198280",
    "end": "1200799"
  },
  {
    "text": "implementations for each of these",
    "start": "1200799",
    "end": "1202120"
  },
  {
    "text": "interpreters but in the book The Two",
    "start": "1202120",
    "end": "1204400"
  },
  {
    "text": "inter interpreters are almost identical",
    "start": "1204400",
    "end": "1207559"
  },
  {
    "text": "so they have two examples that are",
    "start": "1207559",
    "end": "1208880"
  },
  {
    "text": "nearly identical to each other and then",
    "start": "1208880",
    "end": "1210520"
  },
  {
    "text": "they have two solutions to one of the uh",
    "start": "1210520",
    "end": "1213120"
  },
  {
    "text": "interpreter uh one of their examples",
    "start": "1213120",
    "end": "1215159"
  },
  {
    "text": "that are also nearly identical and so",
    "start": "1215159",
    "end": "1218159"
  },
  {
    "text": "these signatures are kind of simplified",
    "start": "1218159",
    "end": "1219559"
  },
  {
    "text": "from what the book uses um it uses a so",
    "start": "1219559",
    "end": "1222679"
  },
  {
    "text": "in the book they use a mutable map",
    "start": "1222679",
    "end": "1224720"
  },
  {
    "text": "instead of the environment lookup thing",
    "start": "1224720",
    "end": "1227440"
  },
  {
    "text": "here but otherwise it's basically the",
    "start": "1227440",
    "end": "1229080"
  },
  {
    "text": "same idea so two interpreters for",
    "start": "1229080",
    "end": "1231520"
  },
  {
    "text": "Boolean Expressions one of them uh is",
    "start": "1231520",
    "end": "1235000"
  },
  {
    "text": "evaluate which uh given an expression a",
    "start": "1235000",
    "end": "1239520"
  },
  {
    "text": "Boolean expression and an environment in",
    "start": "1239520",
    "end": "1241600"
  },
  {
    "text": "which we can look up variables right",
    "start": "1241600",
    "end": "1244200"
  },
  {
    "text": "variables named with strings uh and that",
    "start": "1244200",
    "end": "1247159"
  },
  {
    "text": "could give us booleans then we can",
    "start": "1247159",
    "end": "1248799"
  },
  {
    "text": "interpret the entire expression into a",
    "start": "1248799",
    "end": "1251600"
  },
  {
    "text": "Boolean but also there's another",
    "start": "1251600",
    "end": "1254080"
  },
  {
    "text": "interpreter which when given a Boolean",
    "start": "1254080",
    "end": "1256280"
  },
  {
    "text": "expression e and an environment in which",
    "start": "1256280",
    "end": "1258440"
  },
  {
    "text": "we we can look up",
    "start": "1258440",
    "end": "1259960"
  },
  {
    "text": "Expressions then we can give uh we can",
    "start": "1259960",
    "end": "1262679"
  },
  {
    "text": "get an expression where the variables",
    "start": "1262679",
    "end": "1264360"
  },
  {
    "text": "are replaced with sort of the reference",
    "start": "1264360",
    "end": "1268000"
  },
  {
    "text": "right but the variables Don't Have To Be",
    "start": "1268000",
    "end": "1271240"
  },
  {
    "text": "Strings right it's the same as before so",
    "start": "1271240",
    "end": "1273799"
  },
  {
    "start": "1272000",
    "end": "1325000"
  },
  {
    "text": "we can actually write this uh the",
    "start": "1273799",
    "end": "1276320"
  },
  {
    "text": "structure of this this interpreter sort",
    "start": "1276320",
    "end": "1278679"
  },
  {
    "text": "of once and for all so instead of using",
    "start": "1278679",
    "end": "1280919"
  },
  {
    "text": "strings we'll just use generics and",
    "start": "1280919",
    "end": "1282600"
  },
  {
    "text": "we'll say that variables are represented",
    "start": "1282600",
    "end": "1284840"
  },
  {
    "text": "by some type a right we have something",
    "start": "1284840",
    "end": "1288240"
  },
  {
    "text": "Ed that represent variables uh and that",
    "start": "1288240",
    "end": "1291360"
  },
  {
    "text": "the type that represents variables is",
    "start": "1291360",
    "end": "1293520"
  },
  {
    "text": "a okay so then we can write a fold a a",
    "start": "1293520",
    "end": "1297799"
  },
  {
    "text": "generic interpreter over these Boolean",
    "start": "1297799",
    "end": "1300799"
  },
  {
    "text": "expressions and then uh we have we just",
    "start": "1300799",
    "end": "1303440"
  },
  {
    "text": "take a Handler we take a visitor right",
    "start": "1303440",
    "end": "1305240"
  },
  {
    "text": "we take a Handler for each of the",
    "start": "1305240",
    "end": "1306760"
  },
  {
    "text": "instructions uh and the one that's this",
    "start": "1306760",
    "end": "1309120"
  },
  {
    "text": "is essentially the same as the one for",
    "start": "1309120",
    "end": "1311120"
  },
  {
    "text": "the string uh example with the",
    "start": "1311120",
    "end": "1313640"
  },
  {
    "text": "difference that there's a lookup",
    "start": "1313640",
    "end": "1314919"
  },
  {
    "text": "function for looking up variables of",
    "start": "1314919",
    "end": "1316520"
  },
  {
    "text": "type V uh and and match them up them up",
    "start": "1316520",
    "end": "1319679"
  },
  {
    "text": "with",
    "start": "1319679",
    "end": "1320799"
  },
  {
    "text": "a okay so then once we have this sort of",
    "start": "1320799",
    "end": "1325320"
  },
  {
    "start": "1325000",
    "end": "1437000"
  },
  {
    "text": "generic uh we can write the two",
    "start": "1325320",
    "end": "1327559"
  },
  {
    "text": "interpreters using just by calling fold",
    "start": "1327559",
    "end": "1330200"
  },
  {
    "text": "with different arguments so the first",
    "start": "1330200",
    "end": "1332000"
  },
  {
    "text": "one evaluates to a Boolean",
    "start": "1332000",
    "end": "1334840"
  },
  {
    "text": "using uh an environment that uh that",
    "start": "1334840",
    "end": "1337960"
  },
  {
    "text": "Maps variables Stu of type A to a",
    "start": "1337960",
    "end": "1340640"
  },
  {
    "text": "Boolean but the second one uh Returns",
    "start": "1340640",
    "end": "1344960"
  },
  {
    "text": "the same expression that it got except",
    "start": "1344960",
    "end": "1347200"
  },
  {
    "text": "with the variables expanded",
    "start": "1347200",
    "end": "1349200"
  },
  {
    "text": "to their bindings in the environment do",
    "start": "1349200",
    "end": "1352000"
  },
  {
    "text": "that make sense see that so we we're",
    "start": "1352000",
    "end": "1356000"
  },
  {
    "text": "folding and we're saying handle the",
    "start": "1356000",
    "end": "1357279"
  },
  {
    "text": "literal in the first case we're saying",
    "start": "1357279",
    "end": "1358880"
  },
  {
    "text": "handle the literal just by returning the",
    "start": "1358880",
    "end": "1360880"
  },
  {
    "text": "the Boolean uh",
    "start": "1360880",
    "end": "1364400"
  },
  {
    "text": "and uh oh actually that should be n not",
    "start": "1364400",
    "end": "1366840"
  },
  {
    "text": "identity it should be should be looking",
    "start": "1366840",
    "end": "1368520"
  },
  {
    "text": "up looking it up uh no no actually that",
    "start": "1368520",
    "end": "1373039"
  },
  {
    "text": "it the expression contains literal",
    "start": "1373039",
    "end": "1374679"
  },
  {
    "text": "bullan sorry literal",
    "start": "1374679",
    "end": "1377080"
  },
  {
    "text": "Boolean so we fold and for literal",
    "start": "1377080",
    "end": "1379919"
  },
  {
    "text": "booleans we say identity for n we say n",
    "start": "1379919",
    "end": "1382120"
  },
  {
    "text": "for not we say not for or we say or but",
    "start": "1382120",
    "end": "1384200"
  },
  {
    "text": "for variables we say n look them up look",
    "start": "1384200",
    "end": "1386720"
  },
  {
    "text": "up the Boolean in the environment now in",
    "start": "1386720",
    "end": "1388720"
  },
  {
    "text": "replace we just pass in the constructors",
    "start": "1388720",
    "end": "1391000"
  },
  {
    "text": "of the algebra so we'll get exactly the",
    "start": "1391000",
    "end": "1393000"
  },
  {
    "text": "same structure out except in the",
    "start": "1393000",
    "end": "1394919"
  },
  {
    "text": "variable case we'll have expanded it out",
    "start": "1394919",
    "end": "1397279"
  },
  {
    "text": "to a an actual",
    "start": "1397279",
    "end": "1400159"
  },
  {
    "text": "expression but wait a minute look at the",
    "start": "1400159",
    "end": "1403840"
  },
  {
    "text": "look at the uh type signature of replace",
    "start": "1403840",
    "end": "1406919"
  },
  {
    "text": "does that look familiar to anybody",
    "start": "1406919",
    "end": "1410440"
  },
  {
    "text": "yeah look at it look at it some",
    "start": "1410480",
    "end": "1413840"
  },
  {
    "text": "more it's flap map right and so once you",
    "start": "1413840",
    "end": "1417760"
  },
  {
    "text": "see it you're just",
    "start": "1417760",
    "end": "1420880"
  },
  {
    "text": "like wait a",
    "start": "1420880",
    "end": "1423039"
  },
  {
    "text": "minute so the gang of four book The",
    "start": "1423039",
    "end": "1425919"
  },
  {
    "text": "Bastion of object oriented programming",
    "start": "1425919",
    "end": "1428480"
  },
  {
    "text": "contains monets right so The Interpreter",
    "start": "1428480",
    "end": "1432840"
  },
  {
    "text": "pattern is is essentially the the Monet",
    "start": "1432840",
    "end": "1435919"
  },
  {
    "text": "pattern in fact let's let look at the",
    "start": "1435919",
    "end": "1438760"
  },
  {
    "start": "1437000",
    "end": "1506000"
  },
  {
    "text": "structure of interpreter again right so",
    "start": "1438760",
    "end": "1441600"
  },
  {
    "text": "we have an abstract expression and then",
    "start": "1441600",
    "end": "1444440"
  },
  {
    "text": "we have a terminal expression and we",
    "start": "1444440",
    "end": "1446679"
  },
  {
    "text": "have a non-terminal expression which is",
    "start": "1446679",
    "end": "1448840"
  },
  {
    "text": "recursive right so why do we need a",
    "start": "1448840",
    "end": "1452000"
  },
  {
    "text": "pattern language at all can we just",
    "start": "1452000",
    "end": "1453960"
  },
  {
    "text": "model this in Scala yes we can so we",
    "start": "1453960",
    "end": "1457000"
  },
  {
    "text": "don't need you know we don't need",
    "start": "1457000",
    "end": "1458720"
  },
  {
    "text": "English we can just say use a higher",
    "start": "1458720",
    "end": "1460799"
  },
  {
    "text": "kind of",
    "start": "1460799",
    "end": "1461679"
  },
  {
    "text": "type uh and so you have some abstract",
    "start": "1461679",
    "end": "1465039"
  },
  {
    "text": "expression right seal trait uh an",
    "start": "1465039",
    "end": "1467520"
  },
  {
    "text": "expression and then a terminal",
    "start": "1467520",
    "end": "1469200"
  },
  {
    "text": "expression carries some value of type A",
    "start": "1469200",
    "end": "1472080"
  },
  {
    "text": "and uh you have a non-terminal",
    "start": "1472080",
    "end": "1473640"
  },
  {
    "text": "expression then that adds some structure",
    "start": "1473640",
    "end": "1476000"
  },
  {
    "text": "of type f and that structure is then",
    "start": "1476000",
    "end": "1478360"
  },
  {
    "text": "full of other Expressions",
    "start": "1478360",
    "end": "1481120"
  },
  {
    "text": "right but this is actually you know a",
    "start": "1481120",
    "end": "1483880"
  },
  {
    "text": "very uh common data type and it's called",
    "start": "1483880",
    "end": "1485919"
  },
  {
    "text": "the free monad right so interpreter is",
    "start": "1485919",
    "end": "1489520"
  },
  {
    "text": "essentially the free monad pattern right",
    "start": "1489520",
    "end": "1493600"
  },
  {
    "text": "so who would have thought that like free",
    "start": "1493600",
    "end": "1494760"
  },
  {
    "text": "monads were in the gang of four book uh",
    "start": "1494760",
    "end": "1498720"
  },
  {
    "text": "and so and this this structure is in",
    "start": "1498720",
    "end": "1500399"
  },
  {
    "text": "Scala Zed uh but it's you know it's easy",
    "start": "1500399",
    "end": "1502480"
  },
  {
    "text": "to write on your on your own",
    "start": "1502480",
    "end": "1506559"
  },
  {
    "start": "1506000",
    "end": "1565000"
  },
  {
    "text": "um okay so then the Boolean algebra that",
    "start": "1506559",
    "end": "1509559"
  },
  {
    "text": "did develop in the uh C++",
    "start": "1509559",
    "end": "1512440"
  },
  {
    "text": "implementation uh could look like this",
    "start": "1512440",
    "end": "1514720"
  },
  {
    "text": "you have a seal trait uh bual for",
    "start": "1514720",
    "end": "1517399"
  },
  {
    "text": "Boolean algebra and then you have uh",
    "start": "1517399",
    "end": "1519760"
  },
  {
    "text": "these cases so you have a literal",
    "start": "1519760",
    "end": "1521960"
  },
  {
    "text": "Boolean and then the and or and not",
    "start": "1521960",
    "end": "1524360"
  },
  {
    "text": "cases just contain uh a they're they",
    "start": "1524360",
    "end": "1528399"
  },
  {
    "text": "just have holes in them but because the",
    "start": "1528399",
    "end": "1531080"
  },
  {
    "text": "idea is that bu Al is going to be the",
    "start": "1531080",
    "end": "1533880"
  },
  {
    "text": "structure that contains then the",
    "start": "1533880",
    "end": "1535279"
  },
  {
    "text": "recursion right so in the case of and it",
    "start": "1535279",
    "end": "1538320"
  },
  {
    "text": "has two holes so that says that we're",
    "start": "1538320",
    "end": "1540679"
  },
  {
    "text": "actually going to uh if we go back to",
    "start": "1540679",
    "end": "1543960"
  },
  {
    "text": "the to the free thing um where we see",
    "start": "1543960",
    "end": "1547120"
  },
  {
    "text": "that that f is not going to be bu Al and",
    "start": "1547120",
    "end": "1549559"
  },
  {
    "text": "if it's and it's going to be two",
    "start": "1549559",
    "end": "1552279"
  },
  {
    "text": "expressions right and if it's not it's",
    "start": "1552279",
    "end": "1554880"
  },
  {
    "text": "going to be one expression and so then",
    "start": "1554880",
    "end": "1556919"
  },
  {
    "text": "the Boolean expression language is just",
    "start": "1556919",
    "end": "1559159"
  },
  {
    "text": "the free monad generated by the Boolean",
    "start": "1559159",
    "end": "1562720"
  },
  {
    "text": "algebra all right so what does it mean",
    "start": "1562720",
    "end": "1566919"
  },
  {
    "start": "1565000",
    "end": "1597000"
  },
  {
    "text": "to interpret an expression in the free",
    "start": "1566919",
    "end": "1569480"
  },
  {
    "text": "Monet well it means to translate it to",
    "start": "1569480",
    "end": "1573200"
  },
  {
    "text": "some other",
    "start": "1573200",
    "end": "1574159"
  },
  {
    "text": "Monet so this could be the sort of side",
    "start": "1574159",
    "end": "1577159"
  },
  {
    "text": "effect monad or uh it could be the io",
    "start": "1577159",
    "end": "1580039"
  },
  {
    "text": "monad or it could be state or it could",
    "start": "1580039",
    "end": "1581279"
  },
  {
    "text": "be option or it could be list or could",
    "start": "1581279",
    "end": "1582640"
  },
  {
    "text": "be any other uh any other Monet or any",
    "start": "1582640",
    "end": "1585600"
  },
  {
    "text": "other data type that that has the same",
    "start": "1585600",
    "end": "1587399"
  },
  {
    "text": "structure basically that has some",
    "start": "1587399",
    "end": "1589720"
  },
  {
    "text": "terminal expression and some",
    "start": "1589720",
    "end": "1591159"
  },
  {
    "text": "non-terminal expression in its uh in its",
    "start": "1591159",
    "end": "1595679"
  },
  {
    "text": "language okay so yeah monad is just uh",
    "start": "1595679",
    "end": "1600240"
  },
  {
    "text": "something very simple so monad has has",
    "start": "1600240",
    "end": "1603440"
  },
  {
    "text": "pure and bind which you can see as the",
    "start": "1603440",
    "end": "1605440"
  },
  {
    "text": "terminal expression sorry",
    "start": "1605440",
    "end": "1609240"
  },
  {
    "text": "water should have should have held on to",
    "start": "1613520",
    "end": "1615679"
  },
  {
    "text": "that mic stand",
    "start": "1615679",
    "end": "1619000"
  },
  {
    "text": "okay so then we have um a",
    "start": "1619080",
    "end": "1622720"
  },
  {
    "text": "uh terminal expression which is pure and",
    "start": "1622720",
    "end": "1625520"
  },
  {
    "text": "then a non-terminal expression you could",
    "start": "1625520",
    "end": "1627440"
  },
  {
    "text": "see that as being the bind case so it's",
    "start": "1627440",
    "end": "1630720"
  },
  {
    "text": "you know you have an M full of A's and",
    "start": "1630720",
    "end": "1632360"
  },
  {
    "text": "then you have a way of turning your",
    "start": "1632360",
    "end": "1633799"
  },
  {
    "text": "variables of type A into other into M's",
    "start": "1633799",
    "end": "1637360"
  },
  {
    "text": "all right and then the squiggly line",
    "start": "1637360",
    "end": "1639679"
  },
  {
    "text": "thing so if we look at the fold map",
    "start": "1639679",
    "end": "1641559"
  },
  {
    "text": "signature it's",
    "start": "1641559",
    "end": "1643000"
  },
  {
    "text": "saying yeah so it's saying that if we",
    "start": "1643000",
    "end": "1645600"
  },
  {
    "text": "have a a you know a recursion over this",
    "start": "1645600",
    "end": "1648520"
  },
  {
    "text": "F thing we can turn it into we can",
    "start": "1648520",
    "end": "1650880"
  },
  {
    "text": "translate it interpret it in the",
    "start": "1650880",
    "end": "1652440"
  },
  {
    "text": "language G by turning all the fs into",
    "start": "1652440",
    "end": "1655000"
  },
  {
    "text": "into G's and that's what that squidly",
    "start": "1655000",
    "end": "1656919"
  },
  {
    "text": "line thing is it turns an F of a into G",
    "start": "1656919",
    "end": "1659240"
  },
  {
    "text": "of a for any",
    "start": "1659240",
    "end": "1660320"
  },
  {
    "text": "a uh we can implement the option monad",
    "start": "1660320",
    "end": "1663200"
  },
  {
    "text": "uh using free just by using sort of a",
    "start": "1663200",
    "end": "1665720"
  },
  {
    "text": "trivial functor so we turn off the",
    "start": "1665720",
    "end": "1667880"
  },
  {
    "text": "recursion so then we have either an A or",
    "start": "1667880",
    "end": "1670440"
  },
  {
    "text": "or",
    "start": "1670440",
    "end": "1671600"
  },
  {
    "text": "unit uh and we can construct any kind of",
    "start": "1671600",
    "end": "1675159"
  },
  {
    "text": "language that we like so more or less",
    "start": "1675159",
    "end": "1676600"
  },
  {
    "text": "any problem that we can think of can be",
    "start": "1676600",
    "end": "1679200"
  },
  {
    "text": "modeled as an algebra like this and then",
    "start": "1679200",
    "end": "1680880"
  },
  {
    "text": "we can take the freead that turns that",
    "start": "1680880",
    "end": "1683000"
  },
  {
    "text": "into a recursive expression language",
    "start": "1683000",
    "end": "1684960"
  },
  {
    "text": "with with variable bindings and here's",
    "start": "1684960",
    "end": "1686640"
  },
  {
    "text": "one I made earlier so this is one I",
    "start": "1686640",
    "end": "1688360"
  },
  {
    "text": "worked on with with di wall and Jessica",
    "start": "1688360",
    "end": "1691720"
  },
  {
    "text": "Kerr uh and so we made this free monad",
    "start": "1691720",
    "end": "1695120"
  },
  {
    "text": "to talk to couch and so we just have an",
    "start": "1695120",
    "end": "1697200"
  },
  {
    "text": "algebra that has like one case class for",
    "start": "1697200",
    "end": "1699760"
  },
  {
    "text": "everything that you might want to do to",
    "start": "1699760",
    "end": "1701080"
  },
  {
    "text": "a couch database and then we take the",
    "start": "1701080",
    "end": "1702799"
  },
  {
    "text": "free monad of that uh like that we have",
    "start": "1702799",
    "end": "1705840"
  },
  {
    "text": "a couch monad and now you know we can",
    "start": "1705840",
    "end": "1707799"
  },
  {
    "text": "talk about about couch things in our",
    "start": "1707799",
    "end": "1710080"
  },
  {
    "text": "little language but what that means is",
    "start": "1710080",
    "end": "1712360"
  },
  {
    "text": "then given by an interpreter like this",
    "start": "1712360",
    "end": "1714679"
  },
  {
    "text": "so run couch takes that thing and turns",
    "start": "1714679",
    "end": "1716880"
  },
  {
    "text": "it into like a schaly task or an IO",
    "start": "1716880",
    "end": "1719080"
  },
  {
    "text": "Monet or or side effects or something so",
    "start": "1719080",
    "end": "1722840"
  },
  {
    "start": "1721000",
    "end": "1781000"
  },
  {
    "text": "in",
    "start": "1722840",
    "end": "1723679"
  },
  {
    "text": "summary uh I think that you know the",
    "start": "1723679",
    "end": "1727480"
  },
  {
    "text": "gang of War book that if there's",
    "start": "1727480",
    "end": "1729399"
  },
  {
    "text": "anything to take away from this book uh",
    "start": "1729399",
    "end": "1732320"
  },
  {
    "text": "it is is that uh composition is should",
    "start": "1732320",
    "end": "1736600"
  },
  {
    "text": "be favored over inheritance",
    "start": "1736600",
    "end": "1738720"
  },
  {
    "text": "uh and I I think that they try to hammer",
    "start": "1738720",
    "end": "1740440"
  },
  {
    "text": "that home here uh a lot and and they",
    "start": "1740440",
    "end": "1743919"
  },
  {
    "text": "also say to prefer immutability over",
    "start": "1743919",
    "end": "1745760"
  },
  {
    "text": "mutability they don't necessarily say",
    "start": "1745760",
    "end": "1747640"
  },
  {
    "text": "that strictly but but that's basically",
    "start": "1747640",
    "end": "1750080"
  },
  {
    "text": "what that means so instead of having a",
    "start": "1750080",
    "end": "1752840"
  },
  {
    "text": "super class with inheritance where you",
    "start": "1752840",
    "end": "1754960"
  },
  {
    "text": "model the uh uh the different behaviors",
    "start": "1754960",
    "end": "1758279"
  },
  {
    "text": "as concrete subclasses you uh have an",
    "start": "1758279",
    "end": "1761559"
  },
  {
    "text": "algebra and you model the different",
    "start": "1761559",
    "end": "1762960"
  },
  {
    "text": "Behavior or the different meanings with",
    "start": "1762960",
    "end": "1764799"
  },
  {
    "text": "different",
    "start": "1764799",
    "end": "1767039"
  },
  {
    "text": "interpreters that's all I got thank you",
    "start": "1767039",
    "end": "1769840"
  },
  {
    "text": "[Applause]",
    "start": "1769840",
    "end": "1779490"
  }
]