[
  {
    "start": "0",
    "end": "226000"
  },
  {
    "text": "mmm already talked about generators so you want to follow along I've got some",
    "start": "11469",
    "end": "18230"
  },
  {
    "text": "slides github slash laser slash slides I had some totally lame github name and I",
    "start": "18230",
    "end": "25550"
  },
  {
    "text": "was told by someone that if you email like contact at github com they'll totally like respond and do",
    "start": "25550",
    "end": "31489"
  },
  {
    "text": "stuff so I emailed them and asked him if I could have laser because whomever was sitting on it wasn't doing anything with it they totally gave it to me so reach",
    "start": "31489",
    "end": "38780"
  },
  {
    "text": "for your dreams you might be able to get laser to or something like that if you",
    "start": "38780",
    "end": "46280"
  },
  {
    "text": "can't be bothered to sit here and watch me go through all these slides I've got some working demos of the generator",
    "start": "46280",
    "end": "52220"
  },
  {
    "text": "stuff up at es6 - gentoku app comm you can use these examples with the current",
    "start": "52220",
    "end": "60410"
  },
  {
    "text": "version of Chrome as long as you enable the experimental es6 features Firefox as",
    "start": "60410",
    "end": "66439"
  },
  {
    "text": "of Firefox 27 has promises implementation that works with excuse me not promises been sitting in too many",
    "start": "66439",
    "end": "73040"
  },
  {
    "text": "other people's talks today generators implementation that will work with all but one of the examples I have here",
    "start": "73040",
    "end": "79100"
  },
  {
    "text": "there's some discrepancy between how I think they deal with the yield keyword but it should more or less work and you",
    "start": "79100",
    "end": "84830"
  },
  {
    "text": "can sort of get a feel for some trivial examples of using generators so I'm",
    "start": "84830",
    "end": "90950"
  },
  {
    "text": "going to Vella per at carbon 5 there's some other carbon 5 people around here yeah I'm based out of the LA office I'm",
    "start": "90950",
    "end": "97760"
  },
  {
    "text": "from a little hillbilly town outside of Seattle whenever I come to San Francisco",
    "start": "97760",
    "end": "102860"
  },
  {
    "text": "I always love to like take digs on LA to try to like you know engender support so",
    "start": "102860",
    "end": "108049"
  },
  {
    "text": "I just want to let you guys know that I say hella hella often anyways okay so",
    "start": "108049",
    "end": "113900"
  },
  {
    "text": "what am I gonna actually talk about essentially the value proposition that I",
    "start": "113900",
    "end": "121880"
  },
  {
    "text": "think generators provide amongst others but the main one for me is it enables you to take code that looks like this",
    "start": "121880",
    "end": "127430"
  },
  {
    "text": "which is kind of sloppy lame JavaScript but there it's doing a bunch of things",
    "start": "127430",
    "end": "132500"
  },
  {
    "text": "that we do often try-catch used to trap",
    "start": "132500",
    "end": "137950"
  },
  {
    "text": "errors that arise from performing some synchronous operations using a closure and a centralized error",
    "start": "137950",
    "end": "144939"
  },
  {
    "text": "handler to consolidate error handling across let's say event loop tix as a",
    "start": "144939",
    "end": "151510"
  },
  {
    "text": "result of some like asynchronous operation gone awry or whatever anyways we do this stuff all the time",
    "start": "151510",
    "end": "157299"
  },
  {
    "text": "flow control by nesting continuations inside of continuations bla bla bla bla bla you can take that code and you can",
    "start": "157299",
    "end": "163390"
  },
  {
    "text": "condense it down to something that looks like this we're doing basically the same",
    "start": "163390",
    "end": "169180"
  },
  {
    "text": "thing we're gonna perform a synchronous operation some lib get data if some",
    "start": "169180",
    "end": "174189"
  },
  {
    "text": "exception were to like you know arise from that let's say some Lib was undefined we called get data on there",
    "start": "174189",
    "end": "180730"
  },
  {
    "text": "we're gonna hit our catch block similarly if we get an error passed to",
    "start": "180730",
    "end": "186519"
  },
  {
    "text": "our callback to get or a post which is let's just assume is like an alias for some memo HTTP get request to slash foo",
    "start": "186519",
    "end": "195310"
  },
  {
    "text": "or a post to slash bar if we get an error there it is gonna hit our same try",
    "start": "195310",
    "end": "200470"
  },
  {
    "text": "catch and generators enable you to write code that looks like this so you're gonna be able to move from a continuation passing style where you're",
    "start": "200470",
    "end": "206379"
  },
  {
    "text": "like asking the computer to do something at the same time telling it what you want to do next to direct style which is",
    "start": "206379",
    "end": "212139"
  },
  {
    "text": "asking the computer you know to do something getting a value back maybe putting in a variable or whatever and",
    "start": "212139",
    "end": "218169"
  },
  {
    "text": "just moving sequentially through your program without actually losing any of the excellent aspects of the single",
    "start": "218169",
    "end": "224919"
  },
  {
    "text": "thread event loop okay so that was kind of like hand wavy but really what I'm",
    "start": "224919",
    "end": "230139"
  },
  {
    "start": "226000",
    "end": "274000"
  },
  {
    "text": "gonna talk about I'm gonna try to demonstrate that I think that programming around asynchronous",
    "start": "230139",
    "end": "235449"
  },
  {
    "text": "callbacks is hard especially for people coming from programming languages that the idioms involved like direct style",
    "start": "235449",
    "end": "241629"
  },
  {
    "text": "programming so I work with people that have Java backgrounds have ruby backgrounds Python and over the last",
    "start": "241629",
    "end": "248199"
  },
  {
    "text": "five years have seen people transition into doing more JavaScript development especially on the client and it's proven",
    "start": "248199",
    "end": "257320"
  },
  {
    "text": "difficult for many people to move into that that continuation continuation passing style paradigm as I mentioned",
    "start": "257320",
    "end": "265240"
  },
  {
    "text": "before equi script 6 you get generators so you can do some interesting things syntactically to alleviate some of the",
    "start": "265240",
    "end": "270699"
  },
  {
    "text": "pain of learning how to write code around asynchronous callbacks okay so in",
    "start": "270699",
    "end": "275950"
  },
  {
    "start": "274000",
    "end": "353000"
  },
  {
    "text": "demonstrating how loss generators arm and it sort of enumerate some gripes that I have about programming with asynchronous callbacks",
    "start": "275950",
    "end": "281770"
  },
  {
    "text": "the first one being as I mentioned that I think it's a non-trivial amount of effort for someone coming into the",
    "start": "281770",
    "end": "287830"
  },
  {
    "text": "language programming with this asynchronous callbacks to follow the what's going on so we're all JavaScript",
    "start": "287830",
    "end": "295390"
  },
  {
    "text": "experts so we know that this is code is total but like I committed this",
    "start": "295390",
    "end": "300820"
  },
  {
    "text": "sin early on right like you write your program in many other languages from top to bottom here we have message variable",
    "start": "300820",
    "end": "309550"
  },
  {
    "text": "that's accessible to the closure this anonymous excuse me this anonymous function expression here so when I get a",
    "start": "309550",
    "end": "317470"
  },
  {
    "text": "response back from making an HP request to you profile I'm gonna in cube my",
    "start": "317470",
    "end": "323050"
  },
  {
    "text": "callback my callback is gonna fire I'm going to add profile name to whatever it",
    "start": "323050",
    "end": "329140"
  },
  {
    "text": "already existed message and then I'm gonna log it out no that's not true the VAR message hello and console log",
    "start": "329140",
    "end": "337120"
  },
  {
    "text": "message happened in the same tick of the event loop future ticket event loop is what I'm going to do the assignment to message which is available through the",
    "start": "337120",
    "end": "343180"
  },
  {
    "text": "closure so I'm actually gonna log hello and then nothing else after that which",
    "start": "343180",
    "end": "348220"
  },
  {
    "text": "is you know kind of a bummer as I said you guys all know how to do JavaScript so this is not like an error that you",
    "start": "348220",
    "end": "353740"
  },
  {
    "start": "353000",
    "end": "425000"
  },
  {
    "text": "make anymore but he tried to teach your mom how to write JavaScript she may have some questions for you the other thing I",
    "start": "353740",
    "end": "359950"
  },
  {
    "text": "want to talk about is handling exceptions across different ticks of the event loop so as we know try catch only",
    "start": "359950",
    "end": "366430"
  },
  {
    "text": "works if the code inside the try excuse me if the error is raised from code that",
    "start": "366430",
    "end": "371800"
  },
  {
    "text": "executes synchronously inside that those try braces so for instance if like some",
    "start": "371800",
    "end": "378130"
  },
  {
    "text": "lib get data if some exception is raised there I'll be able to catch it here and my catch block and if I want to",
    "start": "378130",
    "end": "384370"
  },
  {
    "text": "consolidate the way that I handle errors across these different ticks the event loop both asynchronous and synchronous",
    "start": "384370",
    "end": "389950"
  },
  {
    "text": "I'm gonna need to do something clever like create an error handler function which is going to be made available to",
    "start": "389950",
    "end": "397000"
  },
  {
    "text": "the asynchronous stuff through closure so let's say I get an error back from either one of my synchronous calls to",
    "start": "397000",
    "end": "403840"
  },
  {
    "text": "get or post which like I said is just an alias for like HTTP GET with an",
    "start": "403840",
    "end": "409120"
  },
  {
    "text": "asynchronous a synchronously fired function expression afterwards I get an error back I'm gonna via a closure send that",
    "start": "409120",
    "end": "417040"
  },
  {
    "text": "error to my centralized exception handler that's a lot of noise and I will demonstrate the it doesn't have to be",
    "start": "417040",
    "end": "423550"
  },
  {
    "text": "this bad the last thing is that it's my position that flow control especially if",
    "start": "423550",
    "end": "430510"
  },
  {
    "start": "425000",
    "end": "563000"
  },
  {
    "text": "you're mixing parallel and things that you want to do in series is harder than",
    "start": "430510",
    "end": "435580"
  },
  {
    "text": "it needs to be when working with asynchronous callbacks this is just the",
    "start": "435580",
    "end": "441310"
  },
  {
    "text": "vanilla JavaScript example but what we're doing here is we're doing an HTTP request for token and an HTP request to",
    "start": "441310",
    "end": "448510"
  },
  {
    "text": "get a key we're doing those two things concurrently when they're both done then we're going to execute our login",
    "start": "448510",
    "end": "454990"
  },
  {
    "text": "function which is going to take those two values it's gonna combine them into an array and we're gonna send all that",
    "start": "454990",
    "end": "460540"
  },
  {
    "text": "stuff via HTTP once we get a response back from that",
    "start": "460540",
    "end": "465580"
  },
  {
    "text": "then we're gonna redirect the user using some off key or something like that it's a lot of code and the continuation or",
    "start": "465580",
    "end": "472750"
  },
  {
    "text": "the callback that we're giving to our to get functions in order to achieve this",
    "start": "472750",
    "end": "477870"
  },
  {
    "text": "in order to achieve this notion of like blocking further operations until both",
    "start": "477870",
    "end": "483520"
  },
  {
    "text": "of these asynchronous things have completed I had to do some lame stuff to check to make sure that when one",
    "start": "483520",
    "end": "489910"
  },
  {
    "text": "asynchronous operation completed the other one was completed so on and so forth this gets a little bit better if",
    "start": "489910",
    "end": "495360"
  },
  {
    "text": "you use promises but it's still a lot of noise right we can use your favorite",
    "start": "495360",
    "end": "501070"
  },
  {
    "text": "promise library of the week to do two HTP requests one for token one for key",
    "start": "501070",
    "end": "506950"
  },
  {
    "text": "and then when both of those two promises have resolved with value we will execute",
    "start": "506950",
    "end": "512409"
  },
  {
    "text": "our anonymous function expression here to do an HTTP POST to off using that",
    "start": "512410",
    "end": "517479"
  },
  {
    "text": "data and then when that thing is done then we can do our redirect that's better I mean it's better than that sloppy",
    "start": "517479",
    "end": "523210"
  },
  {
    "text": "stuff but it's not it's not as good as we can do async there's a lot of code",
    "start": "523210",
    "end": "530650"
  },
  {
    "text": "here how many of you've used async many of you right yeah I use it all the time",
    "start": "530650",
    "end": "536760"
  },
  {
    "text": "where they think we're doing the same thing we're doing again to token and get key we get the results back we do a post",
    "start": "536760",
    "end": "542980"
  },
  {
    "text": "and then we do a window redirect we can cut some of the lines out of this by using bind to do some partial",
    "start": "542980",
    "end": "549160"
  },
  {
    "text": "applications so that we just pass a reference to the original function with some argument sparsely applied but it is",
    "start": "549160",
    "end": "555190"
  },
  {
    "text": "still a whole bunch of code and to the uninitiated and the uninitiated you have to look at all this stuff like parallel",
    "start": "555190",
    "end": "561370"
  },
  {
    "text": "waterfall whatever it's it's a bummer okay so generators generators are being",
    "start": "561370",
    "end": "567520"
  },
  {
    "start": "563000",
    "end": "593000"
  },
  {
    "text": "SPECT out in the es6 specification or being described in the es6 specification I'm not going to read you that but",
    "start": "567520",
    "end": "573910"
  },
  {
    "text": "they're essentially they are functions with multiple entry points so the functions even working within JavaScript",
    "start": "573910",
    "end": "580000"
  },
  {
    "text": "up to this point you enter in at the top and you exit out at the bottom these ones you enter into the top you can stop",
    "start": "580000",
    "end": "586240"
  },
  {
    "text": "freeze the generator function somewhere in the function body and then resume it later on at the point in which you",
    "start": "586240",
    "end": "592450"
  },
  {
    "text": "suspended you may be thinking yourself like ACMA scripts good Eckman script six",
    "start": "592450",
    "end": "598750"
  },
  {
    "start": "593000",
    "end": "660000"
  },
  {
    "text": "that's awesome but like I have a job that caused me to like you know write code for old web browsers or whatever",
    "start": "598750",
    "end": "604660"
  },
  {
    "text": "and I totally get that you can begin to play with these things and you can actually make this stuff work with es5",
    "start": "604660",
    "end": "612100"
  },
  {
    "text": "compliant browsers if you're willing to introduce a transporation step this google trace sewer or Twista or i don't",
    "start": "612100",
    "end": "619690"
  },
  {
    "text": "know how to say that but the Google T word project enables you to write some code that takes advantage of some of",
    "start": "619690",
    "end": "625690"
  },
  {
    "text": "these es6 features and try and pile it into es five and since like precompilation steps in javascript",
    "start": "625690",
    "end": "632260"
  },
  {
    "text": "Landor like all you know like the normal thing we do it's not you know if you transpile to yes five you can use this",
    "start": "632260",
    "end": "641590"
  },
  {
    "text": "stuff today in Firefox 27 Chrome Canary or even the chrome that the regular consumer Chrome as long as you're",
    "start": "641590",
    "end": "646810"
  },
  {
    "text": "willing to flip on that es6 experimental flag you can use the stuff in node 11 and more recent as long as you use the",
    "start": "646810",
    "end": "653410"
  },
  {
    "text": "Harmony flag that may not actually be true you may not need the Harmony flag anymore but as of zero-one-one you can",
    "start": "653410",
    "end": "659530"
  },
  {
    "text": "play around this stuff okay basics this is like the hello world of JavaScript generator functions and I'm",
    "start": "659530",
    "end": "667150"
  },
  {
    "start": "660000",
    "end": "692000"
  },
  {
    "text": "gonna go through a couple like pretty lame examples just to make sure that you understand how we're bouncing back and",
    "start": "667150",
    "end": "673630"
  },
  {
    "text": "forth between a generator function and the code that calls the generator function so it may be super simple",
    "start": "673630",
    "end": "678670"
  },
  {
    "text": "you may already know how to do this but just bear with me speaking of quick show of hands any of you used fibers in node",
    "start": "678670",
    "end": "685570"
  },
  {
    "text": "land yeah all right okay so you already know everything I'm about to talk about you can leave just kidding okay so a",
    "start": "685570",
    "end": "695740"
  },
  {
    "text": "couple new things that we're seeing here in this generator function on the left hand side of the screen there's a little",
    "start": "695740",
    "end": "701440"
  },
  {
    "text": "asterisk next to the word function which denotes a generator function which is different type of function than you're",
    "start": "701440",
    "end": "708520"
  },
  {
    "text": "used to you're also going to notice a yield keyword exactly what those things do will become self-evident in a moment",
    "start": "708520",
    "end": "715810"
  },
  {
    "text": "here but the asterisk things remember asterisk means generator function yield keyword is the point in which a",
    "start": "715810",
    "end": "721450"
  },
  {
    "text": "generator function is going to be able to suspend and be resumed if a yield",
    "start": "721450",
    "end": "726700"
  },
  {
    "text": "keyword exists in the body of a function body that is not a generator function you're gonna get an error from your browser so at least they help you out",
    "start": "726700",
    "end": "733870"
  },
  {
    "text": "there you can't accidentally shoot yourself in the foot as bad as you might think with for instance with like node",
    "start": "733870",
    "end": "739440"
  },
  {
    "start": "736000",
    "end": "818000"
  },
  {
    "text": "fibers okay so generator function definition on the left hand side and the",
    "start": "739440",
    "end": "745810"
  },
  {
    "text": "code that's going to interact with a generator function on the right hand side you can imagine these two things are like on top of each other but you",
    "start": "745810",
    "end": "752290"
  },
  {
    "text": "know that's not how they orient projector screens so bear with me okay first thing we're gonna do we're gonna",
    "start": "752290",
    "end": "757810"
  },
  {
    "text": "call our generator function so what that's gonna do is it's going to give me",
    "start": "757810",
    "end": "763330"
  },
  {
    "text": "back an object that is a generator object we haven't actually started evaluating the code in the generator",
    "start": "763330",
    "end": "770080"
  },
  {
    "text": "function yet that generator object I'm gonna store it in this seq variable the",
    "start": "770080",
    "end": "775210"
  },
  {
    "text": "generator function as I mentioned we haven't started going into that code yet until I call the next method on that",
    "start": "775210",
    "end": "780760"
  },
  {
    "text": "generator object that's gonna start executing the code from top to bottom so I'm gonna do my variable declaration a B",
    "start": "780760",
    "end": "787480"
  },
  {
    "text": "and C I'm gonna do some assignment zero one zero I'm gonna hit this while I'm",
    "start": "787480",
    "end": "792520"
  },
  {
    "text": "gonna enter into this wild block until I find the yield keyword what's hit a",
    "start": "792520",
    "end": "798370"
  },
  {
    "text": "yield keyword in a generator what the computer is going to do is it's going to evaluate down the expression as far as",
    "start": "798370",
    "end": "803680"
  },
  {
    "text": "it can on the right-hand side in this case it's just a and then it's going to",
    "start": "803680",
    "end": "809440"
  },
  {
    "text": "suspend the generator function the point right after like the yield and",
    "start": "809440",
    "end": "815720"
  },
  {
    "text": "its expression and it's gonna freeze it's just gonna stop what its gonna do is it's going to make available as the",
    "start": "815720",
    "end": "822740"
  },
  {
    "text": "value property of the thing that is returned from calling next the value that was yielded from the generator",
    "start": "822740",
    "end": "828980"
  },
  {
    "text": "function so sort of doing the mental substitution and you can tell cuz it drew a little line through it so you do",
    "start": "828980",
    "end": "834500"
  },
  {
    "text": "some substitution here the first thing that we yield is the value 0 we go down",
    "start": "834500",
    "end": "839930"
  },
  {
    "text": "to the next line and when we call next we resume the generator function immediately after that yield keyword and",
    "start": "839930",
    "end": "847100"
  },
  {
    "text": "it's expression so then we go down we do some more assignment we hit our while",
    "start": "847100",
    "end": "853370"
  },
  {
    "text": "loop again we hit our yield again and then now we yield the new value of the",
    "start": "853370",
    "end": "859910"
  },
  {
    "text": "expression on the right-hand side of yield which is going to be one generator",
    "start": "859910",
    "end": "865730"
  },
  {
    "text": "function is suspended again waiting for somebody to call next on it so you can sort of do like the mental exercise of",
    "start": "865730",
    "end": "873080"
  },
  {
    "text": "figuring out where we're gonna go here we're generating an infinite sequence of numbers lazily which is the sequence of",
    "start": "873080",
    "end": "879650"
  },
  {
    "text": "Fibonacci numbers okay so I was talking about multiple entry points we saw in",
    "start": "879650",
    "end": "886100"
  },
  {
    "start": "881000",
    "end": "1099000"
  },
  {
    "text": "the prior example how the caller of the generator the generator function is receiving values yielded to it you can",
    "start": "886100",
    "end": "893660"
  },
  {
    "text": "also go the other direction so before I go any farther pop quiz let's assume that log is an",
    "start": "893660",
    "end": "901160"
  },
  {
    "text": "alias to consult log what do you think we're gonna see in the console if we run that code you can just shout it out if",
    "start": "901160",
    "end": "909740"
  },
  {
    "text": "you feel empowered and I'm not going any further until somebody guesses a mmhmm",
    "start": "909740",
    "end": "918290"
  },
  {
    "text": "you're close yes all right well you were you were partially correct 42 you are",
    "start": "918290",
    "end": "924800"
  },
  {
    "text": "not correct it's okay though we'll learn we'll learn the answer together okay so",
    "start": "924800",
    "end": "930070"
  },
  {
    "text": "first thing we're gonna do we're gonna call our generator function which is gonna give us back a generator object we",
    "start": "930070",
    "end": "936020"
  },
  {
    "text": "haven't started evaluating any of the code here we've got in G we've got a reference to this generator object we",
    "start": "936020",
    "end": "942560"
  },
  {
    "text": "call next on it which as you all know causes the code inside the function body to start",
    "start": "942560",
    "end": "948839"
  },
  {
    "text": "being evaluated from wherever we left off in this case we never entered it so it's gonna be the top we're gonna do our",
    "start": "948839",
    "end": "956039"
  },
  {
    "text": "variable declaration so we've declared result and then we're just gonna follow the order of operations in the language",
    "start": "956039",
    "end": "961619"
  },
  {
    "text": "we're gonna hit this math dot pal and the way the JavaScript is going to work is it's going to reduce down nested",
    "start": "961619",
    "end": "969029"
  },
  {
    "text": "expressions as far as they can first thing that's going to happen is we're going to hit our yield keyword and we're gonna yield the string a back to our",
    "start": "969029",
    "end": "976529"
  },
  {
    "text": "caller which is going to again be made available by D referencing the value property of the this return thing that",
    "start": "976529",
    "end": "982799"
  },
  {
    "text": "we get back from our generator yielding and then the pound generator suspends so the first thing we're gonna log out to",
    "start": "982799",
    "end": "988799"
  },
  {
    "text": "the console is a so that was good good now we're gonna resume the generator",
    "start": "988799",
    "end": "995429"
  },
  {
    "text": "function but in this time instead of calling the next method and passing nothing we're gonna pass 10 when this is",
    "start": "995429",
    "end": "1003109"
  },
  {
    "text": "key if you want to build something that allows you to really communicate back",
    "start": "1003109",
    "end": "1008419"
  },
  {
    "text": "and forth between generator functions and their callers so 10 here is going to",
    "start": "1008419",
    "end": "1014539"
  },
  {
    "text": "be substituted in immediately where I resumed the generator function so 10 you",
    "start": "1014539",
    "end": "1021949"
  },
  {
    "text": "can imagine is insert here after where we used to have this yield a then we evaluate the rest of this expression",
    "start": "1021949",
    "end": "1028909"
  },
  {
    "text": "we're gonna hit a yield keyword we're gonna evaluate the expression on the right hand side all the way down as far as we can and then we're gonna suspend",
    "start": "1028909",
    "end": "1034938"
  },
  {
    "text": "the generator function again so the next thing we've got logged out to the console is B when you can corn you can",
    "start": "1034939",
    "end": "1041240"
  },
  {
    "text": "kind of see where we're going here the last time we iterate with the generator function we're gonna call the",
    "start": "1041240",
    "end": "1047029"
  },
  {
    "text": "next method we're gonna pass to which you can see substitutes in to for where",
    "start": "1047029",
    "end": "1052220"
  },
  {
    "text": "yield B was and then we're gonna evaluate math pal we're gonna store the result in the result variable and then",
    "start": "1052220",
    "end": "1058909"
  },
  {
    "text": "we're gonna return it so finally you get 100 so you can sort of see how you're bouncing back and forth between the code",
    "start": "1058909",
    "end": "1066529"
  },
  {
    "text": "that's calling the generator and the generator function body both sending values and receiving them from the generator function what's up",
    "start": "1066529",
    "end": "1074200"
  },
  {
    "text": "if you call G dot next again you're gonna get an error the generator object has some properties that you can",
    "start": "1074820",
    "end": "1081880"
  },
  {
    "text": "interrogate to figure out like if it is in a state that you can resume or like",
    "start": "1081880",
    "end": "1087100"
  },
  {
    "text": "start it up again I believe the property is finished but the fact that I said believe means I'm",
    "start": "1087100",
    "end": "1094000"
  },
  {
    "text": "probably full of but the specification actually does talk about that okay so Fibonacci sequences are all",
    "start": "1094000",
    "end": "1102400"
  },
  {
    "start": "1099000",
    "end": "1250000"
  },
  {
    "text": "great and yielding you know math and all that stuff it's cool but like we want to actually build some real stuff for this",
    "start": "1102400",
    "end": "1108550"
  },
  {
    "text": "I promised that we would alleviate the pain of programming around asynchronous callbacks and so we're gonna we're gonna",
    "start": "1108550",
    "end": "1113950"
  },
  {
    "text": "do that okay so I was whining about the path of execution through a program that is",
    "start": "1113950",
    "end": "1119080"
  },
  {
    "text": "constructed around asynchronous callbacks this is what we can do if we use generators there's some differences",
    "start": "1119080",
    "end": "1126160"
  },
  {
    "text": "here the implementation of our get function has not changed it's still",
    "start": "1126160",
    "end": "1132270"
  },
  {
    "text": "issuing an HTTP request it will still cause the browser to issue an xhr to this slash profile and it still expects",
    "start": "1132270",
    "end": "1140650"
  },
  {
    "text": "you to pass a callback what we're doing is we're gonna build together stepping",
    "start": "1140650",
    "end": "1146380"
  },
  {
    "text": "through these slides a little baby framework that manages this whole bouncing back and forth between our",
    "start": "1146380",
    "end": "1151810"
  },
  {
    "text": "generator function which we want to sort of look and feel like like look and feel",
    "start": "1151810",
    "end": "1158290"
  },
  {
    "text": "like it were to be using some direct style programming with the library that manages it all so you're seeing the sync",
    "start": "1158290",
    "end": "1164950"
  },
  {
    "text": "function here this is something that we actually implement the sync function takes a generator function as its only",
    "start": "1164950",
    "end": "1172240"
  },
  {
    "text": "argument so in this case it's going to be an anonymous function expression which is just your function with a",
    "start": "1172240",
    "end": "1177250"
  },
  {
    "text": "little star there it's going to immediately call the generator function",
    "start": "1177250",
    "end": "1183310"
  },
  {
    "text": "which is going to initialize it and start it running excuse me it's going to initialize it and it's going to pass it a reference to",
    "start": "1183310",
    "end": "1189940"
  },
  {
    "text": "our resume function this is all a little weird but this resume function via a closure has a reference to the generator",
    "start": "1189940",
    "end": "1197770"
  },
  {
    "text": "object itself and what this allows us to do is pass this resume function to all",
    "start": "1197770",
    "end": "1202870"
  },
  {
    "text": "of our asynchronous operations as the callback to execute and what means is when the asynchronous operation",
    "start": "1202870",
    "end": "1209410"
  },
  {
    "text": "completes our generator function will resume with the value that we are past if that makes any sense",
    "start": "1209410",
    "end": "1215770"
  },
  {
    "text": "well we'll step through it a little bit but it's this is bouncing back and forth thing that we're talking about",
    "start": "1215770",
    "end": "1221530"
  },
  {
    "text": "once again I mentioned this iterable next this is how you send a value back to the generator that is suspended so",
    "start": "1221530",
    "end": "1228400"
  },
  {
    "text": "you can imagine if this resume function this past is the callback to execute to my asynchronous operation that does like",
    "start": "1228400",
    "end": "1234340"
  },
  {
    "text": "an HTTP request to foo when the foo callback gets executed which is going to",
    "start": "1234340",
    "end": "1240220"
  },
  {
    "text": "be this resume if I get a value back like whatever the HP response was I'm",
    "start": "1240220",
    "end": "1245380"
  },
  {
    "text": "going to resume my generator function body passing in foo okay so the other",
    "start": "1245380",
    "end": "1252370"
  },
  {
    "start": "1250000",
    "end": "1374000"
  },
  {
    "text": "thing that you can do is manage event handling skews me manage error handling across different event loop ticks so in",
    "start": "1252370",
    "end": "1257800"
  },
  {
    "text": "spite of the fact that like some of the errors may be made available as the the",
    "start": "1257800",
    "end": "1263650"
  },
  {
    "text": "error argument to your synchronous callbacks you can consolidate all that stuff and handle it the same place as",
    "start": "1263650",
    "end": "1269650"
  },
  {
    "text": "your as your synchronous error handling code which would be in a cache block so",
    "start": "1269650",
    "end": "1275200"
  },
  {
    "text": "this is what this is like the State of the Union today your catch block references this on error function and",
    "start": "1275200",
    "end": "1281290"
  },
  {
    "text": "your asynchronous callbacks reference this on error function it's kind of lame you can shrink it all down into",
    "start": "1281290",
    "end": "1287100"
  },
  {
    "text": "something that looks like this so once again if some lib get data synchronous",
    "start": "1287100",
    "end": "1292210"
  },
  {
    "text": "operation causes something to blow up we can catch it in that block now if the asynchronous callback gets passed an",
    "start": "1292210",
    "end": "1298870"
  },
  {
    "text": "error as a result of our HP post to foo or our post to bar we're going to be",
    "start": "1298870",
    "end": "1304180"
  },
  {
    "text": "able to trap that in our catch block just as if it were a synchronous operation and we can do that with a",
    "start": "1304180",
    "end": "1309940"
  },
  {
    "text": "slight modification to our framework code which is this sync function that we're building okay so this resume",
    "start": "1309940",
    "end": "1316960"
  },
  {
    "text": "function I was mentioning this is a thing that we passed our asynchronous operation to use as its callback what",
    "start": "1316960",
    "end": "1324430"
  },
  {
    "text": "we're gonna do is assuming that our asynchronous operations callback is using this node style error first and",
    "start": "1324430",
    "end": "1330220"
  },
  {
    "text": "then return value thing which not all of your asynchronous callbacks are going to be in this form but for the sake of this",
    "start": "1330220",
    "end": "1335320"
  },
  {
    "text": "demo just suspend judgment of my my code samples if we have an error we're gonna be able",
    "start": "1335320",
    "end": "1341789"
  },
  {
    "text": "to resume the generator function not with next but with Ray's and what that's going to do is it's going to resume",
    "start": "1341789",
    "end": "1347669"
  },
  {
    "text": "execution of the code in the generator function body immediately raising whatever we pass to this raise method",
    "start": "1347669",
    "end": "1353460"
  },
  {
    "text": "which is going to allow us to use the catch block that we were using just for",
    "start": "1353460",
    "end": "1359820"
  },
  {
    "text": "the synchronous operations so we don't have to do anything clever with error checking and plumbing via this closure a",
    "start": "1359820",
    "end": "1366720"
  },
  {
    "text": "reference to our centralized error handler thing we rely on the framework to Reath row that thing for us",
    "start": "1366720",
    "end": "1373349"
  },
  {
    "text": "essentially and the last thing is flow control so mixing the doing two things",
    "start": "1373349",
    "end": "1379799"
  },
  {
    "start": "1374000",
    "end": "1646000"
  },
  {
    "text": "at one time with doing one thing and then one thing that one thing is kind of pain-in-the-butt the vanilla JavaScript",
    "start": "1379799",
    "end": "1384929"
  },
  {
    "text": "example shows my super strawman version of this promises and so on and so forth clean it up a little bit but it's still",
    "start": "1384929",
    "end": "1391200"
  },
  {
    "text": "not as good as it can be with generators there's a slight modification to this",
    "start": "1391200",
    "end": "1396690"
  },
  {
    "text": "code that is worth mentioning once upon a time and all the other examples our",
    "start": "1396690",
    "end": "1402659"
  },
  {
    "text": "asynchronous operations were being passed a reference to this resume function right now what's happening is",
    "start": "1402659",
    "end": "1409590"
  },
  {
    "text": "the resume function in order to achieve this this ability to do two things at one time is actually a reference to a",
    "start": "1409590",
    "end": "1417119"
  },
  {
    "text": "function that the generator function body needs to call which is going to return a function that your asynchronous",
    "start": "1417119",
    "end": "1424139"
  },
  {
    "text": "operation is going to use as its callback the details of which I'll explain in a second but just do that do",
    "start": "1424139",
    "end": "1431669"
  },
  {
    "text": "that make a note of that because now when we get into the modification we need to make to this resume function",
    "start": "1431669",
    "end": "1437039"
  },
  {
    "text": "it'll make a little bit of sense so before that resume function immediately when your asynchronous callback was done",
    "start": "1437039",
    "end": "1444119"
  },
  {
    "text": "and the callback that it was past fired would resume your generator function with the value that it was passed but",
    "start": "1444119",
    "end": "1450330"
  },
  {
    "text": "what if we want to do like five things at a time we don't want to resume our generator function until all five of those things have completed if we want",
    "start": "1450330",
    "end": "1459149"
  },
  {
    "text": "to get something that looks like what we're seeing here where we do a HP requested token and opposed to ki the",
    "start": "1459149",
    "end": "1465779"
  },
  {
    "text": "way that this works is every time you call resume we increment a counter and the framework keeps track",
    "start": "1465779",
    "end": "1473070"
  },
  {
    "text": "how many counters there are outstanding when you decrement the counter by virtue of your asynchronous operation",
    "start": "1473070",
    "end": "1478380"
  },
  {
    "text": "completing will check to see if no counters are left outstanding when we've",
    "start": "1478380",
    "end": "1483450"
  },
  {
    "text": "got everything back then we resume your generator function which allows you to do things like resume the generator",
    "start": "1483450",
    "end": "1491399"
  },
  {
    "text": "function faulting in an array which will contain both of these two values so I'll walk you through exactly how that works",
    "start": "1491399",
    "end": "1497690"
  },
  {
    "text": "first thing we're gonna do our sinc function is going to initialize our generator function that's going to call",
    "start": "1497690",
    "end": "1503309"
  },
  {
    "text": "next on it which is going to start the evaluation from top to bottom we're gonna hit our yield keyword and we're",
    "start": "1503309",
    "end": "1509580"
  },
  {
    "text": "gonna start reducing down the expression on the right hand side so this array",
    "start": "1509580",
    "end": "1514590"
  },
  {
    "text": "that I'm using here is a trick to force the stuff inside of it to evaluate before before we actually suspend the",
    "start": "1514590",
    "end": "1522809"
  },
  {
    "text": "generator function there are a ton of libraries that do this stuff for you this is just these demos for you to",
    "start": "1522809",
    "end": "1528240"
  },
  {
    "text": "understand like how they sort of work in a superficial level so so bear with me in reducing this expression down we're",
    "start": "1528240",
    "end": "1536309"
  },
  {
    "text": "gonna hit this array and we're gonna evaluate the left thing first the left thing is also an expression that needs",
    "start": "1536309",
    "end": "1541470"
  },
  {
    "text": "to be reduced so this is going to be our call to our get function get is actually",
    "start": "1541470",
    "end": "1547200"
  },
  {
    "text": "being passed a reference to this resume for the execution of this resume function so we're gonna call resume",
    "start": "1547200",
    "end": "1552509"
  },
  {
    "text": "which is going to give us back a function which we then pass to get get",
    "start": "1552509",
    "end": "1558269"
  },
  {
    "text": "like many other asynchronous operations like J queries get or whatever return undefined they don't have a return value",
    "start": "1558269",
    "end": "1564059"
  },
  {
    "text": "because they expect you to pass them a callback we haven't we haven't suspended",
    "start": "1564059",
    "end": "1569460"
  },
  {
    "text": "the generator function yet because we need to evaluate the expression in the second item of the array so we do the",
    "start": "1569460",
    "end": "1574590"
  },
  {
    "text": "same thing res we call it which is going to increment a counter in our framework and return us a function that we're",
    "start": "1574590",
    "end": "1580980"
  },
  {
    "text": "gonna pass as our callback and then we're going to do our post so the generator function has still not",
    "start": "1580980",
    "end": "1586740"
  },
  {
    "text": "suspended but now we've got to a synchronous operations that are like out there waiting for their data to come",
    "start": "1586740",
    "end": "1592289"
  },
  {
    "text": "back then we suspend the generator function and we only resume what both of",
    "start": "1592289",
    "end": "1597809"
  },
  {
    "text": "those two operations have completed and what the framework is going to do is it's going to substitute back into our",
    "start": "1597809",
    "end": "1603000"
  },
  {
    "text": "generator function an array that contains both Ida that aargh there are the results of our",
    "start": "1603000",
    "end": "1608880"
  },
  {
    "text": "two asynchronous operations so you can get this sort of feel of doing two things at one time or doing five things",
    "start": "1608880",
    "end": "1615330"
  },
  {
    "text": "at one time and then moving down to do the next thing you could be super expressive with very few lines of code",
    "start": "1615330",
    "end": "1620730"
  },
  {
    "text": "you leave all that stuff up to the framework to do for you and keep that out of your user land code we're doing",
    "start": "1620730",
    "end": "1627630"
  },
  {
    "text": "the same thing here we've already completed these 2-way synchronous operations up above now we're going to",
    "start": "1627630",
    "end": "1633000"
  },
  {
    "text": "do the same thing where we reduce our resume call to a function that we pass our posts we suspend the generator",
    "start": "1633000",
    "end": "1638640"
  },
  {
    "text": "function when we get some data back we can substitute that in here it gets assigned to off and then we redirect to",
    "start": "1638640",
    "end": "1644700"
  },
  {
    "text": "a different location so anyway so the whole point of this was to demonstrate the generators allow you to do some",
    "start": "1644700",
    "end": "1651270"
  },
  {
    "start": "1646000",
    "end": "1730000"
  },
  {
    "text": "direct style programming in a world in which like we've gotten pretty accustomed to programming and continuation passing style which is like",
    "start": "1651270",
    "end": "1657900"
  },
  {
    "text": "asking the computer do something and then giving it a continuation or a call back to to execute when the asynchronous",
    "start": "1657900",
    "end": "1662970"
  },
  {
    "text": "operation completes you can already use this stuff in Chrome Canary node 0 1 1",
    "start": "1662970",
    "end": "1668730"
  },
  {
    "text": "and Firefox and also es5 compliant browsers as long as you're willing to do the translation step it is my position",
    "start": "1668730",
    "end": "1675030"
  },
  {
    "text": "that their adoption the adoption of this stuff is going to change the shape of the code that we're writing it is my",
    "start": "1675030",
    "end": "1680940"
  },
  {
    "text": "hope that the complex the additional complexity and including this framework to do this stuff or including a",
    "start": "1680940",
    "end": "1686160"
  },
  {
    "text": "framework to do this stuff is going to be worth the the excuse me the the",
    "start": "1686160",
    "end": "1692190"
  },
  {
    "text": "learning curve benefit that you're going to get when you try to teach people how to program in this environment",
    "start": "1692190",
    "end": "1697610"
  },
  {
    "text": "hopefully it'll it'll flatten that out a little bit so I encourage you to go experiment there are tons of blog posts",
    "start": "1697610",
    "end": "1702810"
  },
  {
    "text": "online about this Toby Howe is a guy has been writing about generators and co-routines and javascript since 2009 or 2010 since way",
    "start": "1702810",
    "end": "1711780"
  },
  {
    "text": "back when Tim Caswell and Annie Wingo on the VA team all have really interesting things to say about this stuff",
    "start": "1711780",
    "end": "1717810"
  },
  {
    "text": "especially Andy Wingo talks about the implementation so I encourage you to go check it out follow me on Twitter I'm",
    "start": "1717810",
    "end": "1723990"
  },
  {
    "text": "laze Erica scuzz laser was taken kind of bummer and go check out the code examples and play around with stuff",
    "start": "1723990",
    "end": "1729950"
  },
  {
    "text": "check it out that's it",
    "start": "1729950",
    "end": "1733820"
  },
  {
    "start": "1730000",
    "end": "1952000"
  },
  {
    "text": "all right what do you got the question was like when are we gonna be able to use this stuff in the browser I mean",
    "start": "1736620",
    "end": "1743380"
  },
  {
    "text": "like I was saying before if you're fine with the translation step then you can start using it now if you are asking",
    "start": "1743380",
    "end": "1749410"
  },
  {
    "text": "like when will the es6 specification be finalized I'm not not totally sure I know that like it's not going to be too",
    "start": "1749410",
    "end": "1756190"
  },
  {
    "text": "much longer the real question is like when are all browsers that people use",
    "start": "1756190",
    "end": "1761980"
  },
  {
    "text": "going to support this stuff that could be awhile from now so I think the more common use case will probably be on the",
    "start": "1761980",
    "end": "1768640"
  },
  {
    "text": "server side where the runtime is like you know controlled but I think it's",
    "start": "1768640",
    "end": "1773740"
  },
  {
    "text": "gonna happen pretty soon I know that the Express guy TJ is already working with",
    "start": "1773740",
    "end": "1780550"
  },
  {
    "text": "generators right now so there are some people thinking about this stuff and the combination of generators and promises",
    "start": "1780550",
    "end": "1785710"
  },
  {
    "text": "is like a new sort of thing that I think Bluebird is taken on and the co library",
    "start": "1785710",
    "end": "1791290"
  },
  {
    "text": "and stuff like that so people are already starting to work with it especially on the node side yeah the question was are there any performance",
    "start": "1791290",
    "end": "1797140"
  },
  {
    "text": "implications it will depend on the runtime exactly like what the performance implications are Andy",
    "start": "1797140",
    "end": "1804250"
  },
  {
    "text": "Wingo talks about that a little bit in a blog post that he wrote within the last like couple years and he said the same",
    "start": "1804250",
    "end": "1811240"
  },
  {
    "text": "thing that like I hear all the time which is little hand wavy which is like if you're using this stuff too if you",
    "start": "1811240",
    "end": "1817780"
  },
  {
    "text": "were writing an i/o intensive application then you know it's not gonna be the bottleneck but there was a comparison that he made and the results",
    "start": "1817780",
    "end": "1823450"
  },
  {
    "text": "were like almost negligible once you're like from the perspective the CPU time was it was negligible but I",
    "start": "1823450",
    "end": "1829990"
  },
  {
    "text": "like again he's speaking specifically about v8 and I don't know what it's gonna look like for you know Mozilla's",
    "start": "1829990",
    "end": "1836230"
  },
  {
    "text": "stuff or we're Safari or whatever but I think it'll be negligible I think the",
    "start": "1836230",
    "end": "1841990"
  },
  {
    "text": "real cost will be involving a framework that does the stuff that we just sort of like did with our sync function relying",
    "start": "1841990",
    "end": "1850900"
  },
  {
    "text": "on something like that and just hoping that like they don't screw it up for you it's gonna be the bigger hit I think yes",
    "start": "1850900",
    "end": "1858490"
  },
  {
    "text": "sorry I I usually am pretty good about mentioning that there are a variety of frameworks that do the sorts of things",
    "start": "1858490",
    "end": "1864790"
  },
  {
    "text": "that I was demonstrating with that sing function only like in a you know 400",
    "start": "1864790",
    "end": "1869890"
  },
  {
    "text": "line version of it that's robust and not my 10 line version of it that sucks Co Co is one of them Gen run Jenny I",
    "start": "1869890",
    "end": "1879220"
  },
  {
    "text": "believe Bluebird now has a version of this that works with asynchronous",
    "start": "1879220",
    "end": "1884380"
  },
  {
    "text": "functions that return promises which is a really interesting thing one thing that I glazed over in these slides was",
    "start": "1884380",
    "end": "1891160"
  },
  {
    "text": "that the signature for the asynchronous callback that all of these things are using adheres to error first and then",
    "start": "1891160",
    "end": "1898809"
  },
  {
    "text": "return value well that that isn't always the case and there's no specification that says that you have to do it that",
    "start": "1898809",
    "end": "1904360"
  },
  {
    "text": "way right promises are interesting because they provide a unified interface for dealing with a synchronicity so you can write a",
    "start": "1904360",
    "end": "1910600"
  },
  {
    "text": "framework that can rely on that consistency as long as these asynchronous operations that returning promises then you can build a framework",
    "start": "1910600",
    "end": "1916780"
  },
  {
    "text": "that knows exactly how to interact with you know that kind of code so yeah Bluebird is one that does that and also",
    "start": "1916780",
    "end": "1923380"
  },
  {
    "text": "tasks jeaious which is an older Mozilla project I'll put some links in the",
    "start": "1923380",
    "end": "1929490"
  },
  {
    "text": "presentation in case you want to like poke through some of the frameworks it's pretty interesting to learn how the stuff works by like trying to",
    "start": "1929490",
    "end": "1935559"
  },
  {
    "text": "reverse-engineer the framework code also in my opinion yeah totally cool thank you everyone",
    "start": "1935559",
    "end": "1942240"
  }
]