[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "in this segment we're going to look at a",
    "start": "6040",
    "end": "8639"
  },
  {
    "text": "another demo of the problem we just saw",
    "start": "8639",
    "end": "11000"
  },
  {
    "text": "and we'll look at a common workaround",
    "start": "11000",
    "end": "12519"
  },
  {
    "text": "and we'll look at the pros and cons of",
    "start": "12519",
    "end": "13960"
  },
  {
    "text": "that before moving on to a better",
    "start": "13960",
    "end": "17080"
  },
  {
    "start": "17000",
    "end": "83000"
  },
  {
    "text": "solution",
    "start": "17080",
    "end": "18840"
  },
  {
    "text": "so to recreate that problem in a in a",
    "start": "18840",
    "end": "22000"
  },
  {
    "text": "way that's easy to see we can add",
    "start": "22000",
    "end": "23840"
  },
  {
    "text": "another method into our contact object",
    "start": "23840",
    "end": "26599"
  },
  {
    "text": "and we'll call this one print later so",
    "start": "26599",
    "end": "28480"
  },
  {
    "text": "we have print name which prints right",
    "start": "28480",
    "end": "30119"
  },
  {
    "text": "now and we want to create a function",
    "start": "30119",
    "end": "31679"
  },
  {
    "text": "print later which is going to wait a",
    "start": "31679",
    "end": "33120"
  },
  {
    "text": "second or two and then do the printing",
    "start": "33120",
    "end": "35719"
  },
  {
    "text": "so we'll create a function and we'll use",
    "start": "35719",
    "end": "38399"
  },
  {
    "text": "the built-in Global set",
    "start": "38399",
    "end": "41839"
  },
  {
    "text": "timeout and set timeout is going to take",
    "start": "43160",
    "end": "45719"
  },
  {
    "text": "a function and it's going to take a",
    "start": "45719",
    "end": "47520"
  },
  {
    "text": "timeout how long we want the browser to",
    "start": "47520",
    "end": "49360"
  },
  {
    "text": "wait before it fires off the event that",
    "start": "49360",
    "end": "51640"
  },
  {
    "text": "runs our function so we punch in the",
    "start": "51640",
    "end": "53760"
  },
  {
    "text": "function we want which is contact. print",
    "start": "53760",
    "end": "58000"
  },
  {
    "text": "name and we'll put into delay of maybe",
    "start": "58000",
    "end": "60719"
  },
  {
    "text": "1500",
    "start": "60719",
    "end": "63040"
  },
  {
    "text": "milliseconds and we'll come over to",
    "start": "63040",
    "end": "67000"
  },
  {
    "text": "Firefox and we'll see our contact. print",
    "start": "69119",
    "end": "72119"
  },
  {
    "text": "name",
    "start": "72119",
    "end": "72920"
  },
  {
    "text": "works and if we run contact. print",
    "start": "72920",
    "end": "77600"
  },
  {
    "text": "later that one fails and it fails the",
    "start": "78400",
    "end": "81000"
  },
  {
    "text": "exact same way we saw",
    "start": "81000",
    "end": "83040"
  },
  {
    "start": "83000",
    "end": "204000"
  },
  {
    "text": "before so what are some fixes for this",
    "start": "83040",
    "end": "87040"
  },
  {
    "text": "well a very common one that you may be",
    "start": "87040",
    "end": "89479"
  },
  {
    "text": "tempted to to write or you may see in",
    "start": "89479",
    "end": "91000"
  },
  {
    "text": "other people's code looks like this",
    "start": "91000",
    "end": "94119"
  },
  {
    "text": "before we actually use the function we",
    "start": "94119",
    "end": "97560"
  },
  {
    "text": "grab the current value of this and store",
    "start": "97560",
    "end": "99720"
  },
  {
    "text": "it in a different variable typically",
    "start": "99720",
    "end": "101439"
  },
  {
    "text": "called that so we have VAR that equals",
    "start": "101439",
    "end": "105719"
  },
  {
    "text": "this now that we've captured the this",
    "start": "105719",
    "end": "108680"
  },
  {
    "text": "value that we want we can use",
    "start": "108680",
    "end": "112079"
  },
  {
    "text": "it by writing a new function inside of",
    "start": "112079",
    "end": "114960"
  },
  {
    "text": "here",
    "start": "114960",
    "end": "117960"
  },
  {
    "text": "and the new function will",
    "start": "120399",
    "end": "122880"
  },
  {
    "text": "call that. Print",
    "start": "122880",
    "end": "127640"
  },
  {
    "text": "name and let's just check that this",
    "start": "129879",
    "end": "133959"
  },
  {
    "text": "works so now it prints out Joe and so",
    "start": "139480",
    "end": "142720"
  },
  {
    "text": "we've got our functionality back but",
    "start": "142720",
    "end": "146000"
  },
  {
    "text": "this isn't really an optimal solution",
    "start": "146000",
    "end": "148120"
  },
  {
    "text": "there are a couple of problems here uh",
    "start": "148120",
    "end": "150239"
  },
  {
    "text": "first we have this VAR that equals this",
    "start": "150239",
    "end": "153040"
  },
  {
    "text": "it doesn't just sound silly uh it is a",
    "start": "153040",
    "end": "154959"
  },
  {
    "text": "little bit silly um it's been used so",
    "start": "154959",
    "end": "158360"
  },
  {
    "text": "widely in JavaScript that it's actually",
    "start": "158360",
    "end": "159879"
  },
  {
    "text": "a pretty known and accepted idiom at",
    "start": "159879",
    "end": "161599"
  },
  {
    "text": "this point and if you're just doing a",
    "start": "161599",
    "end": "163280"
  },
  {
    "text": "simple call back like we have here it's",
    "start": "163280",
    "end": "164879"
  },
  {
    "text": "not the end of the world but specific",
    "start": "164879",
    "end": "168040"
  },
  {
    "text": "problems include if we've got more than",
    "start": "168040",
    "end": "170000"
  },
  {
    "text": "one call back which is not uncommon at",
    "start": "170000",
    "end": "172040"
  },
  {
    "text": "all in JavaScript and we want to capture",
    "start": "172040",
    "end": "174440"
  },
  {
    "text": "all of the relevant this contexts",
    "start": "174440",
    "end": "176720"
  },
  {
    "text": "because of the scope rules we would need",
    "start": "176720",
    "end": "178400"
  },
  {
    "text": "a different variable for each one so",
    "start": "178400",
    "end": "181720"
  },
  {
    "text": "instead of saying VAR that equals this",
    "start": "181720",
    "end": "183360"
  },
  {
    "text": "and being done with it we'd have to say",
    "start": "183360",
    "end": "185040"
  },
  {
    "text": "VAR that equals this for the first call",
    "start": "185040",
    "end": "187000"
  },
  {
    "text": "back and for the next one we'd have to",
    "start": "187000",
    "end": "188560"
  },
  {
    "text": "say VAR the first that equals that VAR",
    "start": "188560",
    "end": "191000"
  },
  {
    "text": "that equals this and for the third call",
    "start": "191000",
    "end": "193040"
  },
  {
    "text": "back we'd have to say VAR the original",
    "start": "193040",
    "end": "194560"
  },
  {
    "text": "that equals the first that then VAR the",
    "start": "194560",
    "end": "196760"
  },
  {
    "text": "next that equals and so on it it gets a",
    "start": "196760",
    "end": "199879"
  },
  {
    "text": "little bit crazy it be really hard to",
    "start": "199879",
    "end": "201280"
  },
  {
    "text": "read and pretty hard to express what",
    "start": "201280",
    "end": "202640"
  },
  {
    "text": "your codee's actually",
    "start": "202640",
    "end": "204200"
  },
  {
    "start": "204000",
    "end": "240000"
  },
  {
    "text": "doing the other problem we have is that",
    "start": "204200",
    "end": "206480"
  },
  {
    "text": "we're uh losing the opportunity for code",
    "start": "206480",
    "end": "208799"
  },
  {
    "text": "reuse right we already have a perfectly",
    "start": "208799",
    "end": "210920"
  },
  {
    "text": "useful function here contact. print name",
    "start": "210920",
    "end": "213000"
  },
  {
    "text": "that does everything we want but instead",
    "start": "213000",
    "end": "214840"
  },
  {
    "text": "of using that we've written another",
    "start": "214840",
    "end": "216480"
  },
  {
    "text": "function in line down here at line 20",
    "start": "216480",
    "end": "218760"
  },
  {
    "text": "through 22 now in this case the new",
    "start": "218760",
    "end": "221360"
  },
  {
    "text": "function isn't that different from the",
    "start": "221360",
    "end": "222720"
  },
  {
    "text": "original one but it obscures what's",
    "start": "222720",
    "end": "225159"
  },
  {
    "text": "going on because we have to use that",
    "start": "225159",
    "end": "226680"
  },
  {
    "text": "that symbol which is really a workaround",
    "start": "226680",
    "end": "229040"
  },
  {
    "text": "we're leveraging a JavaScript scope Rule",
    "start": "229040",
    "end": "231599"
  },
  {
    "text": "and the closure rule in order to get",
    "start": "231599",
    "end": "233519"
  },
  {
    "text": "around the problem with this in the next",
    "start": "233519",
    "end": "236159"
  },
  {
    "text": "section we're going to look at an easier",
    "start": "236159",
    "end": "237680"
  },
  {
    "text": "and better solution to the same problem",
    "start": "237680",
    "end": "241680"
  },
  {
    "start": "240000",
    "end": "430000"
  },
  {
    "text": "I'm going to add on to the example we've",
    "start": "241680",
    "end": "243200"
  },
  {
    "text": "been working on I'll leave print later",
    "start": "243200",
    "end": "245079"
  },
  {
    "text": "the way it is and I'll add another",
    "start": "245079",
    "end": "246680"
  },
  {
    "text": "version called print later",
    "start": "246680",
    "end": "248959"
  },
  {
    "text": "better so print later",
    "start": "248959",
    "end": "252200"
  },
  {
    "text": "better is going to be a",
    "start": "252200",
    "end": "254840"
  },
  {
    "text": "function and we'll come back to our set",
    "start": "254840",
    "end": "257199"
  },
  {
    "text": "timeout and we're going to look at",
    "start": "257199",
    "end": "258799"
  },
  {
    "text": "something we can do here so set timeout",
    "start": "258799",
    "end": "260359"
  },
  {
    "text": "is going to take a",
    "start": "260359",
    "end": "261479"
  },
  {
    "text": "function and it's going to take a",
    "start": "261479",
    "end": "263280"
  },
  {
    "text": "timeout so I'll put the 1500",
    "start": "263280",
    "end": "264560"
  },
  {
    "text": "milliseconds in",
    "start": "264560",
    "end": "266560"
  },
  {
    "text": "here now the feature we want to use here",
    "start": "266560",
    "end": "269440"
  },
  {
    "text": "is a method on function instances called",
    "start": "269440",
    "end": "272720"
  },
  {
    "text": "bind the the bind feature was originally",
    "start": "272720",
    "end": "276720"
  },
  {
    "text": "implemented in thirdparty libraries uh",
    "start": "276720",
    "end": "279759"
  },
  {
    "text": "to solve this and some related problems",
    "start": "279759",
    "end": "282400"
  },
  {
    "text": "and it turns out to be really popular",
    "start": "282400",
    "end": "284160"
  },
  {
    "text": "and really handy it made its way into",
    "start": "284160",
    "end": "286160"
  },
  {
    "text": "the ecmascript spec in version five in",
    "start": "286160",
    "end": "288720"
  },
  {
    "text": "2009 so any ecmascript 5 compliant",
    "start": "288720",
    "end": "291360"
  },
  {
    "text": "browser will support this bind feature",
    "start": "291360",
    "end": "293360"
  },
  {
    "text": "on any function instance even better",
    "start": "293360",
    "end": "295919"
  },
  {
    "text": "it's possible to polyfill this bind",
    "start": "295919",
    "end": "297639"
  },
  {
    "text": "feature into Old browsers so what we're",
    "start": "297639",
    "end": "299400"
  },
  {
    "text": "going to here can actually be used in",
    "start": "299400",
    "end": "301479"
  },
  {
    "text": "browsers that predate ecmascript 5 if",
    "start": "301479",
    "end": "303520"
  },
  {
    "text": "you need to do",
    "start": "303520",
    "end": "304720"
  },
  {
    "text": "that and what we're going to do is we're",
    "start": "304720",
    "end": "306759"
  },
  {
    "text": "going to find the function we want which",
    "start": "306759",
    "end": "309080"
  },
  {
    "text": "is this. print",
    "start": "309080",
    "end": "313638"
  },
  {
    "text": "name and we're going to call bind on the",
    "start": "313960",
    "end": "317680"
  },
  {
    "text": "print name function itself what bind",
    "start": "317680",
    "end": "320639"
  },
  {
    "text": "does is it takes optionally a this",
    "start": "320639",
    "end": "323000"
  },
  {
    "text": "parameter and optionally other",
    "start": "323000",
    "end": "324360"
  },
  {
    "text": "parameters and it returns a new version",
    "start": "324360",
    "end": "326759"
  },
  {
    "text": "of the function that binds or retain",
    "start": "326759",
    "end": "329919"
  },
  {
    "text": "contains the this value that you",
    "start": "329919",
    "end": "332199"
  },
  {
    "text": "provided if you provided one and the",
    "start": "332199",
    "end": "334479"
  },
  {
    "text": "other Arguments for this video what",
    "start": "334479",
    "end": "336759"
  },
  {
    "text": "we're interested in doing is preserving",
    "start": "336759",
    "end": "338120"
  },
  {
    "text": "a this value so we're just going to put",
    "start": "338120",
    "end": "340000"
  },
  {
    "text": "the current value of this the one we",
    "start": "340000",
    "end": "341960"
  },
  {
    "text": "want into as a parameter into bind so",
    "start": "341960",
    "end": "345160"
  },
  {
    "text": "this do print name. bind and we pass",
    "start": "345160",
    "end": "348240"
  },
  {
    "text": "this it looks a little bit strange but",
    "start": "348240",
    "end": "350520"
  },
  {
    "text": "it's actually what we want and we can",
    "start": "350520",
    "end": "352759"
  },
  {
    "text": "test this out",
    "start": "352759",
    "end": "356199"
  },
  {
    "text": "and after a second and a half it prints",
    "start": "366479",
    "end": "367880"
  },
  {
    "text": "out Joe so now we have the functionality",
    "start": "367880",
    "end": "370199"
  },
  {
    "text": "we want we're not using any scope or",
    "start": "370199",
    "end": "373120"
  },
  {
    "text": "closure workarounds we don't have any",
    "start": "373120",
    "end": "375120"
  },
  {
    "text": "VAR that and we're able to reuse exactly",
    "start": "375120",
    "end": "378120"
  },
  {
    "text": "the function that we already defined",
    "start": "378120",
    "end": "379880"
  },
  {
    "text": "that we knew we wanted to use so we're",
    "start": "379880",
    "end": "381880"
  },
  {
    "text": "able to uh have code reuse instead of",
    "start": "381880",
    "end": "385000"
  },
  {
    "text": "altering and copying the",
    "start": "385000",
    "end": "387560"
  },
  {
    "text": "code so it looks a little bit unusual",
    "start": "387560",
    "end": "390960"
  },
  {
    "text": "but it's actually a very common pattern",
    "start": "390960",
    "end": "393080"
  },
  {
    "text": "that when we create a function um",
    "start": "393080",
    "end": "395639"
  },
  {
    "text": "perhaps inline as an event handler we",
    "start": "395639",
    "end": "398080"
  },
  {
    "text": "might call bind this at the end of",
    "start": "398080",
    "end": "400759"
  },
  {
    "text": "defining that function because we want",
    "start": "400759",
    "end": "402199"
  },
  {
    "text": "to create a version of the function that",
    "start": "402199",
    "end": "403680"
  },
  {
    "text": "retains a specific known value of this",
    "start": "403680",
    "end": "406639"
  },
  {
    "text": "and be able to pass it to some other",
    "start": "406639",
    "end": "408120"
  },
  {
    "text": "piece of code to use so that the other",
    "start": "408120",
    "end": "410039"
  },
  {
    "text": "code can invoke the function without",
    "start": "410039",
    "end": "411800"
  },
  {
    "text": "knowing anything about the dots or the",
    "start": "411800",
    "end": "413560"
  },
  {
    "text": "context or anything else and get the",
    "start": "413560",
    "end": "415520"
  },
  {
    "text": "right",
    "start": "415520",
    "end": "416960"
  },
  {
    "text": "result in the next section we'll take a",
    "start": "416960",
    "end": "419800"
  },
  {
    "text": "look at an ecmascript 6 feature that",
    "start": "419800",
    "end": "422160"
  },
  {
    "text": "makes this even easier than it is right",
    "start": "422160",
    "end": "424599"
  },
  {
    "text": "here",
    "start": "424599",
    "end": "427599"
  }
]