[
  {
    "text": "so I'm going to talk a little bit about our project Valhalla to deliver what we",
    "start": "3889",
    "end": "11179"
  },
  {
    "text": "did in Oracle in that area I am NOT going to answer for that question does",
    "start": "11179",
    "end": "16670"
  },
  {
    "text": "Java need inline type types I am just showing what we have for you and we will",
    "start": "16670",
    "end": "23540"
  },
  {
    "text": "decide is it required or something else",
    "start": "23540",
    "end": "29030"
  },
  {
    "text": "so first of all sorry for that I have to show that slide but I really like that kind of slide from my company it means",
    "start": "29030",
    "end": "36079"
  },
  {
    "text": "that I can tell you total crap and company will be fine with that I am",
    "start": "36079",
    "end": "41420"
  },
  {
    "text": "protected okay Who am I I am working at Oracle I am working on Java performance",
    "start": "41420",
    "end": "48140"
  },
  {
    "text": "my goal is making job faster that is why here I will not talk a lot of about",
    "start": "48140",
    "end": "54829"
  },
  {
    "text": "functionality of online types I will talk what I see about performance what we get how it works so first of all I'd",
    "start": "54829",
    "end": "64009"
  },
  {
    "text": "like to show one simple demo for you its",
    "start": "64009",
    "end": "76220"
  },
  {
    "text": "execution of two programs which pointing",
    "start": "76220",
    "end": "82210"
  },
  {
    "text": "Mandelbrot said zooming each frame counted on each steps on left side the",
    "start": "82210",
    "end": "88670"
  },
  {
    "text": "classic Java Voltas you could write right now the other programming when",
    "start": "88670",
    "end": "95060"
  },
  {
    "text": "there is caption in line that swine it's a difference it's as a program as a JVM",
    "start": "95060",
    "end": "100790"
  },
  {
    "text": "as a difference with the first program is only seven characters it's six characters for keyword in line and one",
    "start": "100790",
    "end": "107689"
  },
  {
    "text": "space that's all you could see a frame percept per seconds which we get in here",
    "start": "107689",
    "end": "115850"
  },
  {
    "text": "and how it works okay it was fun our Mandelbrot set is finished and go on",
    "start": "115850",
    "end": "122780"
  },
  {
    "text": "what is Valhalla well it's a large project which starts started several years ago it doesn't have a single goal",
    "start": "122780",
    "end": "129920"
  },
  {
    "text": "we have several sub projects but the key idea is to provide new types we call it",
    "start": "129920",
    "end": "135620"
  },
  {
    "text": "inline types initially when the design if you read",
    "start": "135620",
    "end": "140720"
  },
  {
    "text": "our mailing list of discussion it called value types by app later people started",
    "start": "140720",
    "end": "147230"
  },
  {
    "text": "looking into Java language specification virtual machine specification and found",
    "start": "147230",
    "end": "152420"
  },
  {
    "text": "that in Java language specification word Wei Lian you can find it 800 times in",
    "start": "152420",
    "end": "159620"
  },
  {
    "text": "Java Virtual Machine specification you can find it 1,000 times already if you",
    "start": "159620",
    "end": "165140"
  },
  {
    "text": "add more values it will be some kind of mess we decided to rename it just just",
    "start": "165140",
    "end": "172040"
  },
  {
    "text": "typical keyboard we almost did in line types we have a very good prototype",
    "start": "172040",
    "end": "178310"
  },
  {
    "text": "single set of prototypes and that part of work became more clear for us the",
    "start": "178310",
    "end": "184700"
  },
  {
    "text": "other large projects which we will have in valhalla it will be specially specialized generics we didn't started",
    "start": "184700",
    "end": "193760"
  },
  {
    "text": "implementation yet it's only on a prototype and language discussion level",
    "start": "193760",
    "end": "198860"
  },
  {
    "text": "of course we have to provide library immigration for all that new features which we have and other sub projects for",
    "start": "198860",
    "end": "206330"
  },
  {
    "text": "valhalla like nest mates which already done and in Java starting GTA 11 okay the key problem",
    "start": "206330",
    "end": "213560"
  },
  {
    "text": "just shortly described what in line type is our goals provide to dance memory location and we found that the one sink",
    "start": "213560",
    "end": "221750"
  },
  {
    "text": "which created problems for us to to make a bad location of data is a identity",
    "start": "221750",
    "end": "227930"
  },
  {
    "text": "object identity it's like it's could be considered as address or something like",
    "start": "227930",
    "end": "233180"
  },
  {
    "text": "that memory allocation but in general it's it's an identity identity provides different effects it's required location",
    "start": "233180",
    "end": "240050"
  },
  {
    "text": "and heap it's required it's not required working in general in other languages but in Java identity couple twists",
    "start": "240050",
    "end": "247760"
  },
  {
    "text": "locking can monitors and all other thing so we decided to make a types without",
    "start": "247760",
    "end": "253820"
  },
  {
    "text": "identity why the general question why gvm it's smart machine can understand",
    "start": "253820",
    "end": "261799"
  },
  {
    "text": "that we don't need identity eliminated allocate object on stack on whatever do",
    "start": "261799",
    "end": "267560"
  },
  {
    "text": "is color replacement for it in reality GM can do it there is escape",
    "start": "267560",
    "end": "273430"
  },
  {
    "text": "analysis there is other things which provide a better performance in that",
    "start": "273430",
    "end": "278530"
  },
  {
    "text": "case but I've just in case I entered to ACM library and try to make a search for",
    "start": "278530",
    "end": "285910"
  },
  {
    "text": "escape analysis article I got approximately 8000 articles about that",
    "start": "285910",
    "end": "290940"
  },
  {
    "text": "try to synchronization elimination also again approximately 8,000 articles different kind of such keywords like",
    "start": "290940",
    "end": "298180"
  },
  {
    "text": "steak location again 8,000 articles probably it's the same articles because of logic and analysis is similar here",
    "start": "298180",
    "end": "305950"
  },
  {
    "text": "but it means that we have 300 articles per year.if took into account 25 years",
    "start": "305950",
    "end": "313360"
  },
  {
    "text": "of Java existence it would be first of all to be difficult to implement",
    "start": "313360",
    "end": "319120"
  },
  {
    "text": "everything that people invent and write in articles but the other thing so high",
    "start": "319120",
    "end": "325210"
  },
  {
    "text": "rate of articles almost every day in your article it means that there is",
    "start": "325210",
    "end": "330220"
  },
  {
    "text": "demands that previous is not enough and we have a problems with that that it's",
    "start": "330220",
    "end": "336160"
  },
  {
    "text": "too difficult to implement prop effective automatic solution and we",
    "start": "336160",
    "end": "341530"
  },
  {
    "text": "decided to to put the task for you for Java developers you tell us where",
    "start": "341530",
    "end": "347680"
  },
  {
    "text": "identity is not required and will optimize it so it required a new types in Java so what is in line class first",
    "start": "347680",
    "end": "355180"
  },
  {
    "text": "of all it's a class absolutely the class just with simple new canoe or tiki world",
    "start": "355180",
    "end": "360910"
  },
  {
    "text": "it has no identity it's immutable it's essential requirement you can't assign",
    "start": "360910",
    "end": "367510"
  },
  {
    "text": "no value in two variables of that type",
    "start": "367510",
    "end": "373180"
  },
  {
    "text": "and it has no synchronization at all of course like this is example of code we",
    "start": "373180",
    "end": "380170"
  },
  {
    "text": "assume that everything is final all our futures final its class immutable also in line types has no deep class",
    "start": "380170",
    "end": "388090"
  },
  {
    "text": "hierarchy every inline class is extends object and its final you can create",
    "start": "388090",
    "end": "396010"
  },
  {
    "text": "object lyrica here the only nice thing which we get here is that inline class",
    "start": "396010",
    "end": "401140"
  },
  {
    "text": "may implement any interfaces Jewish okay and as a changes of",
    "start": "401140",
    "end": "408120"
  },
  {
    "text": "semantics there are such operation like equals equals or reference comparison",
    "start": "408120",
    "end": "414449"
  },
  {
    "text": "for Java we had a very long discussion what we could do for Java here for in",
    "start": "414449",
    "end": "421949"
  },
  {
    "text": "line types we should we do for through two equals method should we forbid that",
    "start": "421949",
    "end": "429330"
  },
  {
    "text": "operation should we make it always false we tried that option but it's weird and right now we choose its so-called",
    "start": "429330",
    "end": "438840"
  },
  {
    "text": "substitutability check it's like recursive comparison of two variables by field and if it's also aggregate in line",
    "start": "438840",
    "end": "446340"
  },
  {
    "text": "it will be going down and down and if",
    "start": "446340",
    "end": "451710"
  },
  {
    "text": "you write in line class it doesn't mean that we magically will allocate it on",
    "start": "451710",
    "end": "457860"
  },
  {
    "text": "stack it just means that class has no identity virtual machine will decided",
    "start": "457860",
    "end": "463080"
  },
  {
    "text": "where the data for the that class will reside so in general if you're a third party implementer of Java Virtual",
    "start": "463080",
    "end": "469469"
  },
  {
    "text": "Machine just to make compatible with Valhalla project you may do nothing you",
    "start": "469469",
    "end": "476940"
  },
  {
    "text": "may just accept in line keyword and in line flags inside class file structure",
    "start": "476940",
    "end": "482669"
  },
  {
    "text": "and it will works nobody prevents you to allocate it on stack or on heap and",
    "start": "482669",
    "end": "488460"
  },
  {
    "text": "doing everything what you do but again our key features is to embed in line",
    "start": "488460",
    "end": "496289"
  },
  {
    "text": "types into containers upper containers like other class arrays in our key goals",
    "start": "496289",
    "end": "502560"
  },
  {
    "text": "and for locals put it on a stack or completely emanated and there is other",
    "start": "502560",
    "end": "509279"
  },
  {
    "text": "two functional features which I want to emphasize here it's like first of all in line types extent objects it means that",
    "start": "509279",
    "end": "516029"
  },
  {
    "text": "in line value could be assigned to object variable and also in well in line",
    "start": "516029",
    "end": "522089"
  },
  {
    "text": "arrays are covariant these objects or interface array even if it's flattened terrain and order fins you can assign",
    "start": "522089",
    "end": "529320"
  },
  {
    "text": "that array into objects and also every",
    "start": "529320",
    "end": "535860"
  },
  {
    "text": "inline type has boxing boxing companion etc etc right",
    "start": "535860",
    "end": "541860"
  },
  {
    "text": "now we had a syntax is like type name and question mark it's ugly syntax we don't like it we",
    "start": "541860",
    "end": "548970"
  },
  {
    "text": "already have a direction how it will be changed but anyway it's a way to force",
    "start": "548970",
    "end": "554760"
  },
  {
    "text": "in line type to be allocated on the heap with only a large difference so it can",
    "start": "554760",
    "end": "561060"
  },
  {
    "text": "be called boxing people used to the fact that if you box primitive really you will get on features of identity they",
    "start": "561060",
    "end": "567960"
  },
  {
    "text": "like normal reference comparison synchronization etc for inline types",
    "start": "567960",
    "end": "573540"
  },
  {
    "text": "even if you put it on stack and boxed it you won't get identity you still want to",
    "start": "573540",
    "end": "581730"
  },
  {
    "text": "be able to do synchronization in that class and the same as for efficiency quality so let's talk elite let's I",
    "start": "581730",
    "end": "590610"
  },
  {
    "text": "finished with from function description it's very short and very very weak but",
    "start": "590610",
    "end": "596910"
  },
  {
    "text": "it's required the whole presentation to describe all features of inline that but I want to talk about performance for a",
    "start": "596910",
    "end": "602670"
  },
  {
    "text": "long time the key slogan of project well it was code like class work like in in",
    "start": "602670",
    "end": "608430"
  },
  {
    "text": "let's check it let's check that in line types works and an int so here's our",
    "start": "608430",
    "end": "615170"
  },
  {
    "text": "piece of code from our demo which I show you it's a counting Mandelbrot set for",
    "start": "615170",
    "end": "622470"
  },
  {
    "text": "images if you get here or not we made complex numbers in line type and what we",
    "start": "622470",
    "end": "629670"
  },
  {
    "text": "get its comparison its average time and a second to make the whole computations",
    "start": "629670",
    "end": "634800"
  },
  {
    "text": "for reference class for primitive and Franca's so I see that here performance",
    "start": "634800",
    "end": "641400"
  },
  {
    "text": "of in line class is the same as primitives ads it's hippo locations one",
    "start": "641400",
    "end": "647070"
  },
  {
    "text": "application another interesting fact for for dealing with the says that graphical",
    "start": "647070",
    "end": "654180"
  },
  {
    "text": "the moment abroad set so it's quite much less hip location and a lot of",
    "start": "654180",
    "end": "660000"
  },
  {
    "text": "performance benefits from a hardware point of view and really it has much",
    "start": "660000",
    "end": "665430"
  },
  {
    "text": "better scalability I took my program and run and with",
    "start": "665430",
    "end": "670780"
  },
  {
    "text": "different amount of threads on a large silver machine and redline is a typical",
    "start": "670780",
    "end": "676420"
  },
  {
    "text": "reference implementation of complex class and green line is in-line class and that started almost a similar it's a",
    "start": "676420",
    "end": "684610"
  },
  {
    "text": "thirty operation per seconds for reference implementation and fifty",
    "start": "684610",
    "end": "689890"
  },
  {
    "text": "patient per seconds for inline implementation as you see it's one thread a little bit faster but when I",
    "start": "689890",
    "end": "697900"
  },
  {
    "text": "execute 64 threads on 64 core machine I got 16 times boost here",
    "start": "697900",
    "end": "705700"
  },
  {
    "text": "okay let's consider other situation I like that faction function I use it for",
    "start": "705700",
    "end": "711040"
  },
  {
    "text": "checking function vacation how our inline types are passed through method",
    "start": "711040",
    "end": "717700"
  },
  {
    "text": "parameters and arguments here value checked for two years and reference class and online class it's an argument",
    "start": "717700",
    "end": "724390"
  },
  {
    "text": "and results and also there is a handwritten primitive inertia it works",
    "start": "724390",
    "end": "730450"
  },
  {
    "text": "as exactly as a primitive as we have to check array access what we have on one",
    "start": "730450",
    "end": "737800"
  },
  {
    "text": "side we have our GU good old riffing hey when array contains reference for class",
    "start": "737800",
    "end": "742810"
  },
  {
    "text": "and so called flat and array when don't have fragrances and all fields of our",
    "start": "742810",
    "end": "748480"
  },
  {
    "text": "land class they allocate it in the same memory let's check cost of random access blue",
    "start": "748480",
    "end": "756940"
  },
  {
    "text": "and green it's a primitive it's a cost for random access Tori around 1 is a",
    "start": "756940",
    "end": "762730"
  },
  {
    "text": "reference again we got completely joining between primitive and online",
    "start": "762730",
    "end": "768640"
  },
  {
    "text": "class for performance point of view it's a random access or maybe in case of sequential access we'll get different",
    "start": "768640",
    "end": "774010"
  },
  {
    "text": "results because of hardware significantly help here yes results are different but are the same primitive",
    "start": "774010",
    "end": "781270"
  },
  {
    "text": "fine line types have the same performance it's it was short run I am",
    "start": "781270",
    "end": "787870"
  },
  {
    "text": "sorry for that I am a little bit afraid that I will be out of time so the first section is passed I believe that I",
    "start": "787870",
    "end": "795690"
  },
  {
    "text": "proved that in line times works as primitives like an int as",
    "start": "795690",
    "end": "803329"
  },
  {
    "text": "but the other section is different probably and my history of Valhalla",
    "start": "803329",
    "end": "809569"
  },
  {
    "text": "project is the first project first new feature in Java when we not just edit",
    "start": "809569",
    "end": "816709"
  },
  {
    "text": "new feature and all as a legacy code without that feature remains untouched",
    "start": "816709",
    "end": "823399"
  },
  {
    "text": "it was for many many many years for probably the whole evolution of job unfortunately here for Valhalla and in",
    "start": "823399",
    "end": "832459"
  },
  {
    "text": "line taps we can do it it's impossible there is a some impact of on legacy code",
    "start": "832459",
    "end": "838670"
  },
  {
    "text": "and in that section I want to tell you about that result just to know which",
    "start": "838670",
    "end": "846920"
  },
  {
    "text": "negative effects we regard okay so the",
    "start": "846920",
    "end": "852620"
  },
  {
    "text": "key question is the following even line type is in line into RA into",
    "start": "852620",
    "end": "858079"
  },
  {
    "text": "upper-class aggregate class into stack method parameters whatever it doesn't",
    "start": "858079",
    "end": "864889"
  },
  {
    "text": "matter we already know that it works like an integer like primitive types but",
    "start": "864889",
    "end": "871269"
  },
  {
    "text": "in some situation we have to allocate our inline class on heap it could be",
    "start": "871269",
    "end": "878529"
  },
  {
    "text": "intentionally by using type name question mark notation it could be",
    "start": "878529",
    "end": "884779"
  },
  {
    "text": "caused just by assigning value typing object it's assignable to object or interface",
    "start": "884779",
    "end": "889970"
  },
  {
    "text": "in that case we have to create a reference to put object into heap and leave it here oh gee VM just decided to",
    "start": "889970",
    "end": "896779"
  },
  {
    "text": "not locate object on the stack whatever for example just just just for for",
    "start": "896779",
    "end": "903139"
  },
  {
    "text": "comparison the very aggressive optimization of inline types are done by",
    "start": "903139",
    "end": "909259"
  },
  {
    "text": "JIT compiler by hotspot JIT compiler interpreter of hotspot don't care about inline types and allocated on the heap",
    "start": "909259",
    "end": "916279"
  },
  {
    "text": "and it works function it works but what it means it means that if we have a reference we don't know if we can line",
    "start": "916279",
    "end": "923480"
  },
  {
    "text": "up or not because of if it in line type semantics of some basic operation is",
    "start": "923480",
    "end": "929420"
  },
  {
    "text": "changed and the first operation which we every issue is our",
    "start": "929420",
    "end": "936529"
  },
  {
    "text": "comparison operation equal equals from one side there is how we do it right now",
    "start": "936529",
    "end": "942679"
  },
  {
    "text": "and from the other side what we have to do in case of Valhalla project and the",
    "start": "942679",
    "end": "950809"
  },
  {
    "text": "key equation here is the cost to check if the classes in line or it's good old Java class the first implementation we",
    "start": "950809",
    "end": "958429"
  },
  {
    "text": "just put that information in the class descriptor and we are going to our object we have two internal words like",
    "start": "958429",
    "end": "966679"
  },
  {
    "text": "markquart and class Patera and going to class description to check it it's not a good idea",
    "start": "966679",
    "end": "972259"
  },
  {
    "text": "it required two differences and probably it required also two we will get to cache misses in that case what if to put",
    "start": "972259",
    "end": "979639"
  },
  {
    "text": "that information about in line class and to mark worst long fight if you look",
    "start": "979639",
    "end": "984739"
  },
  {
    "text": "into hot spot sources it's very tight place markquart it's fitted with beat",
    "start": "984739",
    "end": "991429"
  },
  {
    "text": "all as information we unable to find one",
    "start": "991429",
    "end": "996949"
  },
  {
    "text": "single free beaten that mark word but we found a pattern like which means firmly",
    "start": "996949",
    "end": "1002589"
  },
  {
    "text": "locked in line taps can can belong so that pattern could be used for us and we",
    "start": "1002589",
    "end": "1008319"
  },
  {
    "text": "implemented it and right now we are doing only with one check and one the",
    "start": "1008319",
    "end": "1013659"
  },
  {
    "text": "different going to mark more okay that is a code we which I wrote and she check",
    "start": "1013659",
    "end": "1019509"
  },
  {
    "text": "which assembly we got after compilation that the code for the good old Java like",
    "start": "1019509",
    "end": "1027220"
  },
  {
    "text": "you will got right now just compared to references and doing one action on another action that is Valhalla a little",
    "start": "1027220",
    "end": "1038139"
  },
  {
    "text": "bit more complicated and even it's not the whole code because of on the right",
    "start": "1038139",
    "end": "1044129"
  },
  {
    "text": "bottom corner you could see invokedynamic it invoke dynamic which",
    "start": "1044129",
    "end": "1049629"
  },
  {
    "text": "should invokes substitutability check for inline types and also there is a",
    "start": "1049629",
    "end": "1056500"
  },
  {
    "text": "bunch of code there and there is difference if you don't have inline types in your program you never will",
    "start": "1056500",
    "end": "1063720"
  },
  {
    "text": "enter in the green value world where our inline times process but even for",
    "start": "1063720",
    "end": "1070060"
  },
  {
    "text": "Raylan's classes performance became complicated we just compare references thousand that comparison is checking for",
    "start": "1070060",
    "end": "1077410"
  },
  {
    "text": "no ii comparisons four or five it's our magic patterns that is in line class or",
    "start": "1077410",
    "end": "1083110"
  },
  {
    "text": "not and how it costs other issue which you found that if your loop has involved",
    "start": "1083110",
    "end": "1092530"
  },
  {
    "text": "dynamic invocation that loop won't bill and unrolled by hotspot it's just",
    "start": "1092530",
    "end": "1101160"
  },
  {
    "text": "outside we don't need it before we don't them it's not implemented we will implement it but right now it's real",
    "start": "1101160",
    "end": "1108670"
  },
  {
    "text": "status and that is why on that comparison I have three DIF two lines",
    "start": "1108670",
    "end": "1116890"
  },
  {
    "text": "one is for a CP reference not inline tabs comparison but all typical old",
    "start": "1116890",
    "end": "1124060"
  },
  {
    "text": "reference comparison in case of valhalla implementation in case of baseline like",
    "start": "1124060",
    "end": "1129190"
  },
  {
    "text": "before Valhalla to version unrolled and not enrolled because of a different",
    "start": "1129190",
    "end": "1134680"
  },
  {
    "text": "constant to show it for us in the worst cases operation became more than two",
    "start": "1134680",
    "end": "1140710"
  },
  {
    "text": "times slower I mean reference comparison in best cases it became not so bad okay as",
    "start": "1140710",
    "end": "1149080"
  },
  {
    "text": "operation which we prohibited for in line types it's synchronization it's just throwing exception if you're trying",
    "start": "1149080",
    "end": "1156100"
  },
  {
    "text": "to do synchronization in line types but here everything is fine all our",
    "start": "1156100",
    "end": "1163090"
  },
  {
    "text": "benchmarks showing less than one percent difference and we don't care about that anymore arrays so if we have object array in",
    "start": "1163090",
    "end": "1172480"
  },
  {
    "text": "runtime we may have to destroy evidence array but we may have not reference",
    "start": "1172480",
    "end": "1178180"
  },
  {
    "text": "array in array of online class which is flattened and it also causes additional",
    "start": "1178180",
    "end": "1183880"
  },
  {
    "text": "runtime checks and there's a problem we have to know that our array is flattened",
    "start": "1183880",
    "end": "1190270"
  },
  {
    "text": "tearing and we can't put that information inside class descriptor because of array of the same inline",
    "start": "1190270",
    "end": "1197290"
  },
  {
    "text": "class could be flattened or maybe not flattened like a representative array of reference otherwise we have to make 2d",
    "start": "1197290",
    "end": "1204540"
  },
  {
    "text": "class descriptors and males with having that it's the same class descriptor by different whatever and we don't have a",
    "start": "1204540",
    "end": "1212250"
  },
  {
    "text": "place inside markquart we decided to do the fall and so we need only to beat to",
    "start": "1212250",
    "end": "1219090"
  },
  {
    "text": "preserve that information and we did a little bit spoiling of class pointer",
    "start": "1219090",
    "end": "1224490"
  },
  {
    "text": "which resides in the header of every object really it's fine to do it because",
    "start": "1224490",
    "end": "1230280"
  },
  {
    "text": "of it's impossible to write a program when you have so huge amount of classes",
    "start": "1230280",
    "end": "1236429"
  },
  {
    "text": "different classes and class descriptors that that bit will be required it would be not enough memory for that what it",
    "start": "1236429",
    "end": "1243540"
  },
  {
    "text": "means it means that for every access for class descriptor if it's array we have",
    "start": "1243540",
    "end": "1249270"
  },
  {
    "text": "to clear the bits they may be set up it causes some little bit performance",
    "start": "1249270",
    "end": "1254520"
  },
  {
    "text": "aggression but in reality we checked and hot spot perfectly eliminated but anyway",
    "start": "1254520",
    "end": "1260070"
  },
  {
    "text": "Lord inquiry from array just compare which action we should be done in one",
    "start": "1260070",
    "end": "1266100"
  },
  {
    "text": "case right now and what we'll hear in mahalo world and the same situation but",
    "start": "1266100",
    "end": "1273740"
  },
  {
    "text": "different for a store operation we also make of storing something inside",
    "start": "1273740",
    "end": "1280220"
  },
  {
    "text": "flattened array and it should be checked and I won't show any charts the",
    "start": "1280220",
    "end": "1286890"
  },
  {
    "text": "situation for our X s quite different they're a bit benchmarks which has so",
    "start": "1286890",
    "end": "1292200"
  },
  {
    "text": "very huge situation up to 10 to minus 10% and in reality the source of all",
    "start": "1292200",
    "end": "1300390"
  },
  {
    "text": "regression which we got here is not like general inefficiency the idea of the",
    "start": "1300390",
    "end": "1307110"
  },
  {
    "text": "line types it just because of hotspot doesn't have some particular specific",
    "start": "1307110",
    "end": "1313230"
  },
  {
    "text": "optimization which may help in that case we we simply didn't need it before and",
    "start": "1313230",
    "end": "1322370"
  },
  {
    "text": "we will do that optimization and we'll check it and the sort the last example",
    "start": "1322370",
    "end": "1330750"
  },
  {
    "text": "is not related to any kind of functional semantics what I have I have two integer",
    "start": "1330750",
    "end": "1336270"
  },
  {
    "text": "is very short arrays just one thousand elements they are almost equal on the last element",
    "start": "1336270",
    "end": "1342150"
  },
  {
    "text": "different time checking the performance of radical separations and that is why I",
    "start": "1342150",
    "end": "1348299"
  },
  {
    "text": "put indifference on the last element and here is the performance difference a",
    "start": "1348299",
    "end": "1354710"
  },
  {
    "text": "right now Java is doing it for 600 no",
    "start": "1354710",
    "end": "1359820"
  },
  {
    "text": "second and all halides doing for 909 a second could you guess what's the problem it's it's integer its array of",
    "start": "1359820",
    "end": "1368880"
  },
  {
    "text": "integers not array of objects it's arraign integer in line tab has a very flat hierarchy we know that if it's",
    "start": "1368880",
    "end": "1376970"
  },
  {
    "text": "statically typed the integer no inline types could be there we could drop it",
    "start": "1376970",
    "end": "1383360"
  },
  {
    "text": "the problem is here the size for",
    "start": "1383360",
    "end": "1389030"
  },
  {
    "text": "generated code for me that array is equals 300 bytes right now it became",
    "start": "1389030",
    "end": "1395299"
  },
  {
    "text": "more than 5 times larger in case of Mahalo I just do to invoke dynamic stuff",
    "start": "1395299",
    "end": "1401940"
  },
  {
    "text": "which required to put into that methods and our inline heuristics failed because",
    "start": "1401940",
    "end": "1409080"
  },
  {
    "text": "of boundary just 1011 we know that issue you found that we are not going to T",
    "start": "1409080",
    "end": "1416100"
  },
  {
    "text": "unit right now but obviously before giving it to public it will be somehow",
    "start": "1416100",
    "end": "1422299"
  },
  {
    "text": "tuned either we change boundaries or will do something particular specific",
    "start": "1422299",
    "end": "1427679"
  },
  {
    "text": "form our inline types but in general the picture is not so bad I have shown you",
    "start": "1427679",
    "end": "1434400"
  },
  {
    "text": "we checked all our benchmark database it's all database it's no inline class",
    "start": "1434400",
    "end": "1441660"
  },
  {
    "text": "code it's just checking for regressions no huge regression on a big bench works",
    "start": "1441660",
    "end": "1447179"
  },
  {
    "text": "which we have 2% on large benchmark it's very difficult to analyze so we started",
    "start": "1447179",
    "end": "1452970"
  },
  {
    "text": "from micro benchmarks and if dealing with my crab in short we will fix big",
    "start": "1452970",
    "end": "1458970"
  },
  {
    "text": "benchmarks to define so when we finish with our mike rizzo big benchmarks so",
    "start": "1458970",
    "end": "1464429"
  },
  {
    "text": "right now I consider that the whole picture is very very promising for",
    "start": "1464429",
    "end": "1469470"
  },
  {
    "text": "performance and I have a request for you right now we know types achieved pretty",
    "start": "1469470",
    "end": "1477270"
  },
  {
    "text": "well situation so the next valhalla release we are going to make it as a",
    "start": "1477270",
    "end": "1482730"
  },
  {
    "text": "public preview feature for open JDK I can say will it be 14 or 15 right now",
    "start": "1482730",
    "end": "1491220"
  },
  {
    "text": "but it will be 14 or 15 when in line types became a Fisher preview in Java in",
    "start": "1491220",
    "end": "1501240"
  },
  {
    "text": "that case you may try it you don't need a right in line types but you can try it",
    "start": "1501240",
    "end": "1507210"
  },
  {
    "text": "for your application for for your code and it it W that Oracle has much much",
    "start": "1507210",
    "end": "1515370"
  },
  {
    "text": "less amount of course than you if you find if you check it earlier if you find",
    "start": "1515370",
    "end": "1521910"
  },
  {
    "text": "some issues performance regressions something else for all would Aldrich",
    "start": "1521910",
    "end": "1528080"
  },
  {
    "text": "reference legacy code just please report on try it I hope it won't take a lot of",
    "start": "1528080",
    "end": "1534900"
  },
  {
    "text": "time and let's finish talking about negative effects let's check what it",
    "start": "1534900",
    "end": "1543000"
  },
  {
    "text": "could bring us for us I have shown that the performance of the line types works",
    "start": "1543000",
    "end": "1548910"
  },
  {
    "text": "like a primitives it's comparable with primitives but what else just just a little bit set of examples when we can",
    "start": "1548910",
    "end": "1554550"
  },
  {
    "text": "get another differences I just even don't want to talk at that",
    "start": "1554550",
    "end": "1560130"
  },
  {
    "text": "in line that is very useful for any kind of arithmetic code we play in these complex numbers we did the Mandelbrot",
    "start": "1560130",
    "end": "1568290"
  },
  {
    "text": "set demo we played with just simple complex matrix multiplication and got very nice result I played with some",
    "start": "1568290",
    "end": "1574710"
  },
  {
    "text": "raytrace algorithms and just adding that keyword in line got speed up from 50",
    "start": "1574710",
    "end": "1580860"
  },
  {
    "text": "seconds rendering once in till 30 second just did nothing but let consider as",
    "start": "1580860",
    "end": "1586950"
  },
  {
    "text": "examples first of all i'll i did a very official example about java tell",
    "start": "1586950",
    "end": "1594450"
  },
  {
    "text": "optional just let me check who don't know what java the optional is who is",
    "start": "1594450",
    "end": "1600720"
  },
  {
    "text": "still working on java 5 it's not funny it's not funny there are",
    "start": "1600720",
    "end": "1607100"
  },
  {
    "text": "such people who has a productions out of five stealing in our time so yeah so",
    "start": "1607100",
    "end": "1618070"
  },
  {
    "text": "java.util optional is our litmus test for job for Java library immigration it",
    "start": "1618070",
    "end": "1625850"
  },
  {
    "text": "declared that it will be a value type in the future and it will be definitely a value type when it will be ready it's a",
    "start": "1625850",
    "end": "1634610"
  },
  {
    "text": "tricky question will Java long keen to do java.lang double will be value types or not because of if your application do",
    "start": "1634610",
    "end": "1642620"
  },
  {
    "text": "synchronizations are along integer and you'll make it inline type you'll fail",
    "start": "1642620",
    "end": "1647930"
  },
  {
    "text": "and there are such people it's the only question how many how much money they'll",
    "start": "1647930",
    "end": "1654470"
  },
  {
    "text": "pay oracle to preserve semantics of integers if they'll pay if they'll pay",
    "start": "1654470",
    "end": "1659480"
  },
  {
    "text": "enough money to oracle integer one bill value type okay so i tried to do",
    "start": "1659480",
    "end": "1667850"
  },
  {
    "text": "something a little bit bigger about optional just some benchmark to check how it helped us another situation like",
    "start": "1667850",
    "end": "1673990"
  },
  {
    "text": "regular discussion about bad design of hash mark class when get method may",
    "start": "1673990",
    "end": "1679670"
  },
  {
    "text": "return news for two cases when there are no such my pink inside our map or there",
    "start": "1679670",
    "end": "1685790"
  },
  {
    "text": "is a mapping to now but idea by design but when hash map interface were created",
    "start": "1685790",
    "end": "1692900"
  },
  {
    "text": "there or no such classes optional let's make it let's make it this returning",
    "start": "1692900",
    "end": "1698120"
  },
  {
    "text": "optional i could do everything and measure what we get in case of such",
    "start": "1698120",
    "end": "1703150"
  },
  {
    "text": "processing code optional class and here's comparison current classical reference optional and future inline",
    "start": "1703150",
    "end": "1709940"
  },
  {
    "text": "optional results and it's a average number for 1 million get operation from",
    "start": "1709940",
    "end": "1716270"
  },
  {
    "text": "a hash map which has 1 million pairs I think it's probably nice results another",
    "start": "1716270",
    "end": "1722840"
  },
  {
    "text": "example that task I solved in my life many many times it's like when I have",
    "start": "1722840",
    "end": "1730100"
  },
  {
    "text": "some several keys and I have to map several keys into one value and I know",
    "start": "1730100",
    "end": "1735370"
  },
  {
    "text": "only two is to do it as I write in a new class composite key you name it somehow or I'm",
    "start": "1735370",
    "end": "1743300"
  },
  {
    "text": "doing map of map of map of map I'm kind ask if you know short solution please",
    "start": "1743300",
    "end": "1750830"
  },
  {
    "text": "tell me I'm just curious I'm looking for that and let's check a performance I did",
    "start": "1750830",
    "end": "1757100"
  },
  {
    "text": "simple map of two integers into one integer 1 million get from 1 million map",
    "start": "1757100",
    "end": "1762710"
  },
  {
    "text": "and I did reference composite key map of maps and inline composite key what is",
    "start": "1762710",
    "end": "1769910"
  },
  {
    "text": "bad I prefer composite key from code reading perspective it's much clearer to",
    "start": "1769910",
    "end": "1776420"
  },
  {
    "text": "understand them that chain of maps but chain of maps right now works a little bit faster but inline should eliminate",
    "start": "1776420",
    "end": "1784040"
  },
  {
    "text": "the difference another situation which we are working on also obvious this map",
    "start": "1784040",
    "end": "1789440"
  },
  {
    "text": "has entries and entry says chain giant and site packets but what if the first",
    "start": "1789440",
    "end": "1795170"
  },
  {
    "text": "the first entry inside chain we will flattened into our array make it online",
    "start": "1795170",
    "end": "1800930"
  },
  {
    "text": "class we don't care about as a chain which is possible but it's questions to your hash function not anymore",
    "start": "1800930",
    "end": "1807280"
  },
  {
    "text": "for us which performance results here results a little bit controversial there",
    "start": "1807280",
    "end": "1812960"
  },
  {
    "text": "are some interesting effects like news hardware but in general it gives",
    "start": "1812960",
    "end": "1818290"
  },
  {
    "text": "performance not a huge bad performance improvements is possible and in that",
    "start": "1818290",
    "end": "1824870"
  },
  {
    "text": "case you even should know anything about online class its internal go for GDK to",
    "start": "1824870",
    "end": "1830960"
  },
  {
    "text": "deal with that another example iteration",
    "start": "1830960",
    "end": "1836170"
  },
  {
    "text": "just simple iteration of a hash map this work and if you write that benchmark you",
    "start": "1836170",
    "end": "1844160"
  },
  {
    "text": "could you may find that in different circumstances and defense as environment",
    "start": "1844160",
    "end": "1850610"
  },
  {
    "text": "not in that particular mission but in their problems performance of such iterations to the home up may be quite",
    "start": "1850610",
    "end": "1859520"
  },
  {
    "text": "different amount of times and very very significantly different does anyone",
    "start": "1859520",
    "end": "1867350"
  },
  {
    "text": "could guess what the difference why it happens okay here's solution the",
    "start": "1867350",
    "end": "1878619"
  },
  {
    "text": "problem is iterator so when it's colorized and escape analysis eliminate",
    "start": "1878619",
    "end": "1886509"
  },
  {
    "text": "our iterator we get much much better performance but please don't mess it",
    "start": "1886509",
    "end": "1894279"
  },
  {
    "text": "with us with the heap allocation that difference at 20 milliseconds it's not a",
    "start": "1894279",
    "end": "1900639"
  },
  {
    "text": "cost of heap allocation of our iterator because we have we had in a loop and",
    "start": "1900639",
    "end": "1907119"
  },
  {
    "text": "meet one million iterations and we locate it address only once obviously",
    "start": "1907119",
    "end": "1913899"
  },
  {
    "text": "can't cost for us 20 milliseconds what cost for us that 20 milliseconds the",
    "start": "1913899",
    "end": "1919330"
  },
  {
    "text": "problem is inside fresh map and inside iterator problem really here iterator",
    "start": "1919330",
    "end": "1925029"
  },
  {
    "text": "has a state and that state has a reference field and that state should be",
    "start": "1925029",
    "end": "1931359"
  },
  {
    "text": "updated on every move on every step when you go in through your iterator and if",
    "start": "1931359",
    "end": "1937570"
  },
  {
    "text": "you update a reference you have to invoke garbage collector right barriers and that 20 milliseconds for us it's the",
    "start": "1937570",
    "end": "1946989"
  },
  {
    "text": "cost of G 1 GC right barriers okay if I will run it on the z GC when there are",
    "start": "1946989",
    "end": "1954909"
  },
  {
    "text": "no right bias I won't have such effect but I won't have as affected because of the CDC has other barriers okay what",
    "start": "1954909",
    "end": "1963159"
  },
  {
    "text": "could be done how come we can't make an iterator as a line type it's not",
    "start": "1963159",
    "end": "1969129"
  },
  {
    "text": "immutable to make Sampson is in line type you should make it immutable what about such interface we call it",
    "start": "1969129",
    "end": "1976210"
  },
  {
    "text": "cursor there is no way to update that course all it's immutable you only just",
    "start": "1976210",
    "end": "1981609"
  },
  {
    "text": "get a cursor to the next element to create it and change it for for such",
    "start": "1981609",
    "end": "1987190"
  },
  {
    "text": "kind of benchmark using inline cursor and here is performance results it's the",
    "start": "1987190",
    "end": "1994149"
  },
  {
    "text": "same is the same equation no DC barriers very happy zone the best ways that we",
    "start": "1994149",
    "end": "2000350"
  },
  {
    "text": "don't rely on escape analysis and we always get nice results and probably the",
    "start": "2000350",
    "end": "2008370"
  },
  {
    "text": "my last example for that talk in general in general every program doing the",
    "start": "2008370",
    "end": "2016650"
  },
  {
    "text": "following it just move one data from one place to another with some permutations",
    "start": "2016650",
    "end": "2022020"
  },
  {
    "text": "the protests but what we are doing it's moving data from that place to that place to that place etc and looks like",
    "start": "2022020",
    "end": "2029100"
  },
  {
    "text": "it's common sense that cost of moving in line types will be higher they are",
    "start": "2029100",
    "end": "2035760"
  },
  {
    "text": "larger we have not we don't have only simple 4 or 8 bytes reference for old heap allocated object when we just move",
    "start": "2035760",
    "end": "2043050"
  },
  {
    "text": "in our reference and don't touch our objects in case of moving in line tab we have to move the whole object if from an",
    "start": "2043050",
    "end": "2048990"
  },
  {
    "text": "array to another and I choose that as sorting algorithms would be a very nice",
    "start": "2048990",
    "end": "2055889"
  },
  {
    "text": "example to measure data moving performance I did 3 implementation one I",
    "start": "2055890",
    "end": "2062100"
  },
  {
    "text": "took the basic default team source reference from GDK that i identically",
    "start": "2062100",
    "end": "2070409"
  },
  {
    "text": "reimplemented for inline tabs exactly identically so the sequence of compare",
    "start": "2070410",
    "end": "2076770"
  },
  {
    "text": "operations will be absolutely the same at K by out it I'm cared just only about moving data",
    "start": "2076770",
    "end": "2081990"
  },
  {
    "text": "and also it was some some ideas that ok ok in line that could be very large",
    "start": "2081990",
    "end": "2087030"
  },
  {
    "text": "maybe we should do some tricky optimizations just first of all sort indexes indices of our a primitive",
    "start": "2087030",
    "end": "2094740"
  },
  {
    "text": "indices and after that register it by moving and here I'll show your results",
    "start": "2094740",
    "end": "2100740"
  },
  {
    "text": "about the total data sourcing with all details I can't feed all results into one slide",
    "start": "2100740",
    "end": "2108900"
  },
  {
    "text": "so I'll show it by pieces for small arrays when we fit into l1 cache what I",
    "start": "2108900",
    "end": "2115470"
  },
  {
    "text": "see here on x-axis it's different sizes 4 8 16 up to 64 byte size of my objects",
    "start": "2115470",
    "end": "2124560"
  },
  {
    "text": "and y-axis is a time in microseconds and",
    "start": "2124560",
    "end": "2131070"
  },
  {
    "text": "lower than better and here for small arrays for the data which feetand",
    "start": "2131070",
    "end": "2137250"
  },
  {
    "text": "one case and I don't have cash misses I see that for all cases simple inline",
    "start": "2137250",
    "end": "2142590"
  },
  {
    "text": "classes as faster than references even if I move more data okay let's do",
    "start": "2142590",
    "end": "2153150"
  },
  {
    "text": "they're a little bit larger when it doesn't fit into l1 but perfectly future",
    "start": "2153150",
    "end": "2158730"
  },
  {
    "text": "into l3 on that laptop on my laptop every data is gathered to my laptop just",
    "start": "2158730",
    "end": "2164490"
  },
  {
    "text": "to show it and again in line classes faster everywhere and a little bit miss",
    "start": "2164490",
    "end": "2171540"
  },
  {
    "text": "for very large like 64 bytes in line classes but anyway trick with index it",
    "start": "2171540",
    "end": "2181380"
  },
  {
    "text": "online helps us in that case okay let's do it again larger and fit it into l3",
    "start": "2181380",
    "end": "2188880"
  },
  {
    "text": "and here's the only case where references became meaning but only for",
    "start": "2188880",
    "end": "2197130"
  },
  {
    "text": "large classes and etc let's do it again larger just 400 elements and again",
    "start": "2197130",
    "end": "2206000"
  },
  {
    "text": "station system to back our inline classes faster than than references and",
    "start": "2206000",
    "end": "2212460"
  },
  {
    "text": "Li add yet another large array and again I can see that in line classes faster",
    "start": "2212460",
    "end": "2218730"
  },
  {
    "text": "indexes is better in that station but online class is better than reference and the general conclusion which I may",
    "start": "2218730",
    "end": "2227360"
  },
  {
    "text": "do from that just quite simple results that the dance that location which we",
    "start": "2227360",
    "end": "2233400"
  },
  {
    "text": "get for inline classes it's much much better for performance then moving layers day the cost of some allusion of special",
    "start": "2233400",
    "end": "2243840"
  },
  {
    "text": "localities much has an cost of moving more data and it gives for us benefits",
    "start": "2243840",
    "end": "2249500"
  },
  {
    "text": "so in line class as icing give quite a",
    "start": "2249500",
    "end": "2255480"
  },
  {
    "text": "lot of performance benefit for us and we could use it in the future probably if",
    "start": "2255480",
    "end": "2262200"
  },
  {
    "text": "you want so here are links for projects we have a wiki page publicly available",
    "start": "2262200",
    "end": "2267540"
  },
  {
    "text": "which contains a lot of details if you wish you may participate in discussion have two different mailing",
    "start": "2267540",
    "end": "2275190"
  },
  {
    "text": "lists one for internal specification committee group not not in total I mean",
    "start": "2275190",
    "end": "2282450"
  },
  {
    "text": "that you you you can try the only read and while holiday offers general",
    "start": "2282450",
    "end": "2287670"
  },
  {
    "text": "discussion a million case you may ask any questions they have shown any examples what you have and if you issue",
    "start": "2287670",
    "end": "2294300"
  },
  {
    "text": "could download it as repository and tried but I promised soon it will be in",
    "start": "2294300",
    "end": "2299730"
  },
  {
    "text": "my trunk not turned on by default but on their option as official preview it will be",
    "start": "2299730",
    "end": "2305850"
  },
  {
    "text": "available so thank you very much thank",
    "start": "2305850",
    "end": "2312540"
  },
  {
    "text": "you for coming any questions where is a",
    "start": "2312540",
    "end": "2320850"
  },
  {
    "text": "microphone there is a microphones there",
    "start": "2320850",
    "end": "2325980"
  },
  {
    "text": "please take it hi thanks for the talk",
    "start": "2325980",
    "end": "2334800"
  },
  {
    "text": "I wonder how does project Valhalla play with growl VM for example or do you have",
    "start": "2334800",
    "end": "2340620"
  },
  {
    "text": "any insights on performance do we get anything automatically or do you have to work on something special for it's a",
    "start": "2340620",
    "end": "2348570"
  },
  {
    "text": "general question to you it's a little bit different team and right now there",
    "start": "2348570",
    "end": "2354990"
  },
  {
    "text": "are no value types implementation graph it's just just a question to play me on",
    "start": "2354990",
    "end": "2362070"
  },
  {
    "text": "that when guys implemented will check performance of it",
    "start": "2362070",
    "end": "2368510"
  },
  {
    "text": "quick quick one one one one so how do you compare us so this is very similar",
    "start": "2370890",
    "end": "2377280"
  },
  {
    "text": "to C++ you guys are kind of closing the gap how do you compare the C++ one to",
    "start": "2377280",
    "end": "2383670"
  },
  {
    "text": "what happens when you assign two value types do you copy or do you do move semantics",
    "start": "2383670",
    "end": "2390290"
  },
  {
    "text": "do you consider move semantics from C++ etcetera etcetera etcetera in C++ run",
    "start": "2390290",
    "end": "2396120"
  },
  {
    "text": "through this and many years ago it's a little bit different in C++ even if you",
    "start": "2396120",
    "end": "2402360"
  },
  {
    "text": "have struct or whatever without references okay did not and hit the object still has identity it has address",
    "start": "2402360",
    "end": "2411230"
  },
  {
    "text": "because you can take the address of yeah but you don't have that completely there",
    "start": "2411230",
    "end": "2418200"
  },
  {
    "text": "is some description how it put into array but there is no any limitation to",
    "start": "2418200",
    "end": "2425220"
  },
  {
    "text": "that it is possible automatically we don't play with that yet it's not a goal",
    "start": "2425220",
    "end": "2431700"
  },
  {
    "text": "but if you have for example array of online type do you know about such switches from array of structures to",
    "start": "2431700",
    "end": "2437610"
  },
  {
    "text": "attractions of array of it's a mere some optimization if you have array of",
    "start": "2437610",
    "end": "2443040"
  },
  {
    "text": "structures some optimizations and a some optimization we when you move to a structure for a when every field of our",
    "start": "2443040",
    "end": "2450510"
  },
  {
    "text": "original structures put into the owner a sometimes it's very helpful vectorization and optimization and we",
    "start": "2450510",
    "end": "2458910"
  },
  {
    "text": "can do it automatically Cerreta Klee we didn't play with that we",
    "start": "2458910",
    "end": "2463950"
  },
  {
    "text": "don't have rights that goes here there is no any kind of limitation and",
    "start": "2463950",
    "end": "2469890"
  },
  {
    "text": "specification how it put on terrain at the same for container and if for",
    "start": "2469890",
    "end": "2475770"
  },
  {
    "text": "example talking about local variables in light of implementation completely has",
    "start": "2475770",
    "end": "2481770"
  },
  {
    "text": "no local allocation of inline tab type on stack for local variables often line",
    "start": "2481770",
    "end": "2489300"
  },
  {
    "text": "types it just binds a set of primitive",
    "start": "2489300",
    "end": "2494640"
  },
  {
    "text": "variables for fuels it's completely sterilized and every every field of our",
    "start": "2494640",
    "end": "2501870"
  },
  {
    "text": "inline type may lived in different basis and it provides us very nice optimizations in the last what happens",
    "start": "2501870",
    "end": "2509759"
  },
  {
    "text": "when you assign for assignment you move",
    "start": "2509759",
    "end": "2515430"
  },
  {
    "text": "the whole value of a line that you do the compliment and the object also when",
    "start": "2515430",
    "end": "2524849"
  },
  {
    "text": "you assign two objects into object we have to do a heap allocation we have to",
    "start": "2524849",
    "end": "2531479"
  },
  {
    "text": "do boxing you box it you have to box it yeah we cap the boxer to you free code support can't eliminate boxing can prove",
    "start": "2531479",
    "end": "2538140"
  },
  {
    "text": "that box is not required thanks to you I had a I had a question about backing",
    "start": "2538140",
    "end": "2545430"
  },
  {
    "text": "arrays of inline types with off it memory is that a radical question it's",
    "start": "2545430",
    "end": "2552869"
  },
  {
    "text": "not a theoretical question because of her ethical Nazi really it's it's already became a practical question we",
    "start": "2552869",
    "end": "2560099"
  },
  {
    "text": "could be got that question constant first of all it's the first question for",
    "start": "2560099",
    "end": "2566430"
  },
  {
    "text": "us first implementation is to do joining Valhalla we see vector API because of",
    "start": "2566430",
    "end": "2573119"
  },
  {
    "text": "you know what vector it is okay vector API should be in line classes vector API",
    "start": "2573119",
    "end": "2580499"
  },
  {
    "text": "values but the actor API required specific layout of data which depends on",
    "start": "2580499",
    "end": "2588029"
  },
  {
    "text": "hardware and in general right now user",
    "start": "2588029",
    "end": "2594299"
  },
  {
    "text": "dating like that has no control of layout somehow that problem will be",
    "start": "2594299",
    "end": "2599880"
  },
  {
    "text": "solved for vectoring victory will be mine classes but we is required hardware",
    "start": "2599880",
    "end": "2606390"
  },
  {
    "text": "well and the general question how to exploit how to control layout of enlight",
    "start": "2606390",
    "end": "2612630"
  },
  {
    "text": "types for other cases except of your vector api mostly its joint our project",
    "start": "2612630",
    "end": "2618959"
  },
  {
    "text": "with Panama when we are going to move it to native of hip and right now there is",
    "start": "2618959",
    "end": "2626579"
  },
  {
    "text": "no solution which we can show you but it's you know it it is in our list to do",
    "start": "2626579",
    "end": "2638119"
  },
  {
    "text": "no more questions yeah do you plan to",
    "start": "2642230",
    "end": "2652380"
  },
  {
    "text": "support variable length in line type so effectively",
    "start": "2652380",
    "end": "2657660"
  },
  {
    "text": "converting string for instance into an inline variable lends classes also",
    "start": "2657660",
    "end": "2667230"
  },
  {
    "text": "called fused classes whose strings first of all it doesn't relate it to inline classes because of you may still",
    "start": "2667230",
    "end": "2675780"
  },
  {
    "text": "like a tit on heap and you may you may you may remain it as a typical Java",
    "start": "2675780",
    "end": "2683370"
  },
  {
    "text": "object just to attach our a to that for for string keys so-called few strings or",
    "start": "2683370",
    "end": "2689820"
  },
  {
    "text": "any kind of fused objects like big integers obvious candidate to that it",
    "start": "2689820",
    "end": "2695310"
  },
  {
    "text": "requires two implementations other projects which you called arrays dot two",
    "start": "2695310",
    "end": "2701880"
  },
  {
    "text": "dot o have you heard about that it's other projects it's called raise to the",
    "start": "2701880",
    "end": "2709590"
  },
  {
    "text": "tall and from that projects we will get probably some huge string and etc",
    "start": "2709590",
    "end": "2718100"
  },
  {
    "text": "there's a question about is it possible to make a string and a line time shrink",
    "start": "2718100",
    "end": "2725190"
  },
  {
    "text": "has three fields it's immutable dot k about array don't don't attach array about that but could you make a string",
    "start": "2725190",
    "end": "2733080"
  },
  {
    "text": "as a line type dance is clear so yes we can make stinking line type but look",
    "start": "2733080",
    "end": "2739500"
  },
  {
    "text": "like we won't do it because of so many applications they stuck with drinks",
    "start": "2739500",
    "end": "2745950"
  },
  {
    "text": "identities they're doing synchronization they they used to base the functionality",
    "start": "2745950",
    "end": "2753120"
  },
  {
    "text": "on string contain function the reference comparison and if you'll change the",
    "start": "2753120",
    "end": "2758550"
  },
  {
    "text": "victim line type a large set of application in the world will crashed",
    "start": "2758550",
    "end": "2765590"
  },
  {
    "text": "thank you I have one oh I have one more question here",
    "start": "2768440",
    "end": "2773460"
  },
  {
    "text": "here it is yes we are running some Peaks",
    "start": "2773460",
    "end": "2778710"
  },
  {
    "text": "or by using Java and I'm not supposing if I turn on that wall voila",
    "start": "2778710",
    "end": "2787380"
  },
  {
    "text": "Mahalo sorry if I enable it so am I supposed to expect that he LP memory",
    "start": "2787380",
    "end": "2794700"
  },
  {
    "text": "usage increasing and the heap memory is decreasing is that correct",
    "start": "2794700",
    "end": "2802160"
  },
  {
    "text": "[Music] it's I mean a thread level question but",
    "start": "2802240",
    "end": "2813810"
  },
  {
    "text": "I don't think that it will be that way because of yes the size of threats is",
    "start": "2813810",
    "end": "2821970"
  },
  {
    "text": "increased even there are some examples when you may get stack overflow",
    "start": "2821970",
    "end": "2828030"
  },
  {
    "text": "exception earlier the case from line types but it mostly related to when you",
    "start": "2828030",
    "end": "2833640"
  },
  {
    "text": "have sunlight apps as arguments and results but not from locals from locals",
    "start": "2833640",
    "end": "2838800"
  },
  {
    "text": "it's pretty highly optimized but definitely I never saw that stack access",
    "start": "2838800",
    "end": "2848450"
  },
  {
    "text": "provide a very large impact to to do from my from my experience from my data",
    "start": "2848450",
    "end": "2855420"
  },
  {
    "text": "I I saw mostly he provides in fact it will be no not that stagnate so in that",
    "start": "2855420",
    "end": "2863190"
  },
  {
    "text": "case I think it will be even better and like the other case which we can see on",
    "start": "2863190",
    "end": "2871230"
  },
  {
    "text": "comparison of crash mop in the bucket I",
    "start": "2871230",
    "end": "2878090"
  },
  {
    "text": "saw that he'll be amount of TLB miss has decreased significantly because of data",
    "start": "2878090",
    "end": "2886860"
  },
  {
    "text": "locality if you have preference you're going Toit's a page we have TLB miss or",
    "start": "2886860",
    "end": "2892050"
  },
  {
    "text": "whatever but if data is local even you require a little bit more pages but",
    "start": "2892050",
    "end": "2899430"
  },
  {
    "text": "it's the same such subsequent pages of of memory not random references to other",
    "start": "2899430",
    "end": "2904440"
  },
  {
    "text": "pages and in that case it provide better behavior for TB thank you okay probably",
    "start": "2904440",
    "end": "2911999"
  },
  {
    "text": "we are out of time",
    "start": "2911999",
    "end": "2915680"
  }
]