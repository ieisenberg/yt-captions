[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "14249"
  },
  {
    "text": "hi everyone my name is Selena and I live in a beautiful city of San Francisco",
    "start": "15000",
    "end": "20340"
  },
  {
    "text": "I'm not sure how many of you have visited SF before but one thing to know about the city is it's very hilly",
    "start": "20340",
    "end": "27060"
  },
  {
    "text": "even after three years of living the city I still run into this issue where every time I'm trying to get from point",
    "start": "27060",
    "end": "33059"
  },
  {
    "text": "A to point B in the city whether it's for dinner or for a walk I'll look at Google Maps and be like that looks easy",
    "start": "33059",
    "end": "39620"
  },
  {
    "text": "but when I actually get on my way at some point I will realize that up ahead is here with a non-trivial incline and",
    "start": "39620",
    "end": "46860"
  },
  {
    "text": "that happens a lot in SF because it's hilly in so many places when I think about it this sort of",
    "start": "46860",
    "end": "53039"
  },
  {
    "text": "uphill Journey resembles airbnb's very own journey to service oriented architecture in the sense that we",
    "start": "53039",
    "end": "58860"
  },
  {
    "text": "started out on this flat and straightforward path of migrating to SOA that realized that there's a",
    "start": "58860",
    "end": "64198"
  },
  {
    "text": "surprisingly Steep and interesting learning curve beyond that today I will share with you four key",
    "start": "64199",
    "end": "69720"
  },
  {
    "text": "lessons that we have learned along the way but before that let me introduce myself properly",
    "start": "69720",
    "end": "75540"
  },
  {
    "start": "75000",
    "end": "142000"
  },
  {
    "text": "so yes my name is Selena and I'm a software engineer at Airbnb a quick fun",
    "start": "75540",
    "end": "80580"
  },
  {
    "text": "fact about myself so over the pandemic I started running almost every other day after work to get",
    "start": "80580",
    "end": "87000"
  },
  {
    "text": "myself out of the house and keep myself sane in the days of social isolation you can see on a map here that my route",
    "start": "87000",
    "end": "93360"
  },
  {
    "text": "starts out on this zigzaggy path it is this one mile cycling route that's formerly called the wriggle or sorry the",
    "start": "93360",
    "end": "100500"
  },
  {
    "text": "wiggle that Wiggles its way between Hills to minimize inclines yes there's",
    "start": "100500",
    "end": "106020"
  },
  {
    "text": "just way too many Hills in SF so from there I will run West towards the Golden Gate Park stopping at the Conservatory",
    "start": "106020",
    "end": "112500"
  },
  {
    "text": "of Flowers in the park and then I will run back home the same way over time I fell in love with this",
    "start": "112500",
    "end": "119100"
  },
  {
    "text": "beautiful white building so much so that I started taking a photo every time I ran there",
    "start": "119100",
    "end": "124619"
  },
  {
    "text": "and here's just a small part of the entire collection of photos I have personally I think it's quite cool that",
    "start": "124619",
    "end": "130380"
  },
  {
    "text": "the building can look quite different depending on the weather and the time of the day or the time of the year",
    "start": "130380",
    "end": "135660"
  },
  {
    "text": "now that I have gotten the fun fact out of the way here's the four key lessons from our journey to SOA and Beyond and",
    "start": "135660",
    "end": "142379"
  },
  {
    "start": "142000",
    "end": "237000"
  },
  {
    "text": "let's dive straight into the first one which is to invest in common infrastructure early in your SOA Journey",
    "start": "142379",
    "end": "147900"
  },
  {
    "text": "because this will help to turbocharge your migration from monolith to SOA",
    "start": "147900",
    "end": "153200"
  },
  {
    "text": "to give you more context let's spend some time first on why and how we went",
    "start": "153200",
    "end": "158520"
  },
  {
    "text": "about our migration so back in 2008 just like most small Scrappy startups Airbnb started out with",
    "start": "158520",
    "end": "165599"
  },
  {
    "text": "a single web application written using the Ruby on Rails framework with the model view controller paradigm but over",
    "start": "165599",
    "end": "172019"
  },
  {
    "text": "the years as Airbnb expanded its Global footprint product offering and engineering team the single web app",
    "start": "172019",
    "end": "178260"
  },
  {
    "text": "Group grew into a massive bloated monolith and since it is developed using",
    "start": "178260",
    "end": "183599"
  },
  {
    "text": "the Ruby unreals framework internally we call it the monorail as more Engineers jumped onto the",
    "start": "183599",
    "end": "190260"
  },
  {
    "text": "monorail it was becoming slow unstable hard to maintain and a single point of failure",
    "start": "190260",
    "end": "195840"
  },
  {
    "text": "so in 2018 we launched a company-wide initiative to migrate our Tech stack",
    "start": "195840",
    "end": "201420"
  },
  {
    "text": "from this slow moving monorail to service oriented architecture so similar to the MVC model view",
    "start": "201420",
    "end": "208620"
  },
  {
    "text": "controller Paradigm we decided to decompose the monolith into first of all presentation services that render data",
    "start": "208620",
    "end": "215819"
  },
  {
    "text": "in the user-friendly format for fun and clients to consume and then we also have mid-tier Services",
    "start": "215819",
    "end": "221340"
  },
  {
    "text": "that's grouped around share business concerns and can be used in multiple contexts",
    "start": "221340",
    "end": "226560"
  },
  {
    "text": "and then under those there are data services that encapsulate multiple databases in a uniform data layer",
    "start": "226560",
    "end": "233459"
  },
  {
    "text": "to make this abstract diagram a little bit more concrete let's use host reservation details or hrd for short as",
    "start": "233459",
    "end": "240720"
  },
  {
    "start": "237000",
    "end": "335000"
  },
  {
    "text": "a case study but before I explain what hrd is I want",
    "start": "240720",
    "end": "245760"
  },
  {
    "text": "you to meet Maria so Maria is a new Airbnb host based in Colombia she just published her listing",
    "start": "245760",
    "end": "253260"
  },
  {
    "text": "on Airbnb last week and today she received her first ever booking request",
    "start": "253260",
    "end": "258419"
  },
  {
    "text": "so when she opens her host inbox on the Airbnb website she sees a message from",
    "start": "258419",
    "end": "263460"
  },
  {
    "text": "the guest Christopher and this panel on the right here that displays key information about the trip being",
    "start": "263460",
    "end": "268860"
  },
  {
    "text": "requested by the guests so this right panel here is the hrd or the host reservation details",
    "start": "268860",
    "end": "275699"
  },
  {
    "text": "taking a better look at it we see that it has these call to action buttons that prompt the host to either accept or",
    "start": "275699",
    "end": "281699"
  },
  {
    "text": "decline the booking the booking request and it also pulls information from a",
    "start": "281699",
    "end": "287280"
  },
  {
    "text": "myriad of sources in our system including users listings payments and",
    "start": "287280",
    "end": "292440"
  },
  {
    "text": "reviews in fact there is a lot more information that it offers below the fold as well",
    "start": "292440",
    "end": "299699"
  },
  {
    "text": "so to migrate this product feature to our SOA Paradigm we basically broke down",
    "start": "299699",
    "end": "304979"
  },
  {
    "text": "the product logic into first of all a presentation service that handles view",
    "start": "304979",
    "end": "310139"
  },
  {
    "text": "layer business logic such as formatting and translations and then we have a few mid-tier services",
    "start": "310139",
    "end": "315780"
  },
  {
    "text": "that handle right operations such as confirming or declining a booking request and then we have data services down the",
    "start": "315780",
    "end": "323160"
  },
  {
    "text": "stack that encapsulate different product entities such as reservations users and listings",
    "start": "323160",
    "end": "328860"
  },
  {
    "text": "and of course there are many other services on each layer and we interact with many of them every time we serve a",
    "start": "328860",
    "end": "334680"
  },
  {
    "text": "request by the way let's call our reservation presentation service Ramen because who",
    "start": "334680",
    "end": "341100"
  },
  {
    "start": "335000",
    "end": "451000"
  },
  {
    "text": "doesn't like Ramen so going back to this diagram we do",
    "start": "341100",
    "end": "346620"
  },
  {
    "text": "interact with a lot of services every time we serve just a single product service like hrd so you can you can",
    "start": "346620",
    "end": "353820"
  },
  {
    "text": "imagine that to serve all the product Services we own we need a predecisable number of SOA microservices to power",
    "start": "353820",
    "end": "361199"
  },
  {
    "text": "them so what made this Monumental task of migrating all the complex logic and",
    "start": "361199",
    "end": "366840"
  },
  {
    "text": "building out our vast SOA ecosystem possible are the building blocks that our infra team provided that allow that",
    "start": "366840",
    "end": "373139"
  },
  {
    "text": "allowed us to build services with confidence and speed and let me walk you",
    "start": "373139",
    "end": "378600"
  },
  {
    "text": "through some of them so first we have this in-house API framework built on the",
    "start": "378600",
    "end": "384300"
  },
  {
    "text": "thrift language it is used by all Airbnb services to Define clean API and to talk to each",
    "start": "384300",
    "end": "390539"
  },
  {
    "text": "other so let's say that as part of our business logic Ramen has to read data",
    "start": "390539",
    "end": "395880"
  },
  {
    "text": "from the tofu service to serve that data the tofu engineer only has to define the endpoint and",
    "start": "395880",
    "end": "401940"
  },
  {
    "text": "simple Thrift language and the framework will Auto generate the endpoint logic in",
    "start": "401940",
    "end": "407160"
  },
  {
    "text": "tofu that handles stuff like schema validation and observability metrics and",
    "start": "407160",
    "end": "412259"
  },
  {
    "text": "secondly a multi-threaded RPC client that the ramen service can use to talk to tofu service",
    "start": "412259",
    "end": "418919"
  },
  {
    "text": "and you handle stuff like error propagation circuit breaker requests retries and Etc",
    "start": "418919",
    "end": "424979"
  },
  {
    "text": "this means that Engineers can focus on implementing The Core Business logic and not spend time worrying about the",
    "start": "424979",
    "end": "430919"
  },
  {
    "text": "plumbing details of inter-service communication and based on the framework we also",
    "start": "430919",
    "end": "436319"
  },
  {
    "text": "developed productivity tools such as this API Explorer where Engineers can",
    "start": "436319",
    "end": "441539"
  },
  {
    "text": "browse different Services figure out which endpoint to call and even use an",
    "start": "441539",
    "end": "446580"
  },
  {
    "text": "API playground like this one to figure out how to call the endpoints",
    "start": "446580",
    "end": "451800"
  },
  {
    "start": "451000",
    "end": "562000"
  },
  {
    "text": "second we have power grid which is a Java Library built at Airbnb that makes it super easy to run code in parallel",
    "start": "451800",
    "end": "459720"
  },
  {
    "text": "so under the hood power grid helps us organize our code as a director basically graph or a deck where each",
    "start": "459720",
    "end": "466919"
  },
  {
    "text": "node is a function or a task and so we can use it to model each of our service endpoint as a data flow with",
    "start": "466919",
    "end": "474300"
  },
  {
    "text": "a request as the input and the response as the output of the data flow and because it handles multi-threading",
    "start": "474300",
    "end": "480960"
  },
  {
    "text": "and concurrency we can easily schedule chunks of code to be to run in parallel",
    "start": "480960",
    "end": "486720"
  },
  {
    "text": "so let's take the host sending a special offer to the guest as an example",
    "start": "486720",
    "end": "492599"
  },
  {
    "text": "so in this right operation in ramen service there's a bunch of checks of validation that has to be that have to",
    "start": "492599",
    "end": "499319"
  },
  {
    "text": "be performed before we allow the host to send a special offer so using power grid we we will basically",
    "start": "499319",
    "end": "506699"
  },
  {
    "text": "first take the listing ID from the request body use it to fetch information about the",
    "start": "506699",
    "end": "512039"
  },
  {
    "text": "listing from the listing data service and then we'll pass the information down to a bunch of Downstream services for",
    "start": "512039",
    "end": "518940"
  },
  {
    "text": "validating which will happen in parallel and then after that we will aggregate",
    "start": "518940",
    "end": "524159"
  },
  {
    "text": "all the validation responses make sure that we got green light from everyone before we write back to the special",
    "start": "524159",
    "end": "530700"
  },
  {
    "text": "offer data service to actually send it to the to the guest so using this power grid Library",
    "start": "530700",
    "end": "537480"
  },
  {
    "text": "provides a few benefits first of all it provides low latency for performing Network i o operations concurrently",
    "start": "537480",
    "end": "543839"
  },
  {
    "text": "which really makes a difference when your endpoint has multiple Downstream dependencies",
    "start": "543839",
    "end": "549120"
  },
  {
    "text": "it also offers granular metrics for each node which helps us to pinpoint bottlenecks in the data flow and these",
    "start": "549120",
    "end": "556260"
  },
  {
    "text": "benefits help to ensure that our code is performing observable and easy to reason about",
    "start": "556260",
    "end": "562160"
  },
  {
    "start": "562000",
    "end": "662000"
  },
  {
    "text": "third we have one touch which is a framework and a toolkit built on top of",
    "start": "562160",
    "end": "567540"
  },
  {
    "text": "kubernetes that allows us to manage our services transparently and to deploy to different environments efficiently and",
    "start": "567540",
    "end": "574680"
  },
  {
    "text": "this framework has two key aspects the first part is the principle that all service configurations should live in",
    "start": "574680",
    "end": "581399"
  },
  {
    "text": "one place and get so for instance all the configurations for the ramen service will live in an infrastructure folder",
    "start": "581399",
    "end": "588120"
  },
  {
    "text": "that lives right alongside the source code folder and from there we can easily configure stuff like CPU resources",
    "start": "588120",
    "end": "595080"
  },
  {
    "text": "deploy environments alerts and service dependencies and Etc",
    "start": "595080",
    "end": "600600"
  },
  {
    "text": "and then the second aspect to the OneTouch framework is this magical key tool which is a command line tool built",
    "start": "600600",
    "end": "607620"
  },
  {
    "text": "on top of kubernetes that allows us to deploy our services to different environments on the kubernetes Clusters",
    "start": "607620",
    "end": "614160"
  },
  {
    "text": "so if I just type K or on the command line it will automatically generate the configs build the app and deploy it to a",
    "start": "614160",
    "end": "621720"
  },
  {
    "text": "remote cluster and if you think about it it's actually just like making a bowl of ramen where",
    "start": "621720",
    "end": "627839"
  },
  {
    "text": "first you generate a bowl which is the convex and then you build the ramen",
    "start": "627839",
    "end": "633120"
  },
  {
    "text": "which is the the actual application then you deploy um the entire bowl of ramen",
    "start": "633120",
    "end": "639240"
  },
  {
    "text": "with garnishes and that is the end product and because all environments are deployed the same way we can easily make",
    "start": "639240",
    "end": "646320"
  },
  {
    "text": "five beautiful bowls of ramen soup for different environments so from the service governance",
    "start": "646320",
    "end": "652740"
  },
  {
    "text": "perspective it makes it super easy for everyone to orchestrate deploy and diagnose a service because there's only",
    "start": "652740",
    "end": "659339"
  },
  {
    "text": "one place to look and one process to learn lastly we have Spinnaker which is an",
    "start": "659339",
    "end": "666300"
  },
  {
    "start": "662000",
    "end": "739000"
  },
  {
    "text": "open source continuous delivery platform that we use to deploy our services",
    "start": "666300",
    "end": "671519"
  },
  {
    "text": "it provides safe and repeatable workflows for deploying changes to production",
    "start": "671519",
    "end": "676860"
  },
  {
    "text": "and one aspect that has been especially helpful for us is the automated Canary",
    "start": "676860",
    "end": "681899"
  },
  {
    "text": "analysis so in this step of the deploy pipeline we basically deployed both the Old and",
    "start": "681899",
    "end": "688620"
  },
  {
    "text": "the new snapshots to two temporary environments namely Baseline and Canary",
    "start": "688620",
    "end": "693920"
  },
  {
    "text": "and then we route a small percentage of production traffic to them",
    "start": "693920",
    "end": "699300"
  },
  {
    "text": "then key metrics about these environments such as error rates are automatically ingested and fed into",
    "start": "699300",
    "end": "705060"
  },
  {
    "text": "statistical tests that produce an aggregate score for the canary which is which has the new snapshot as measured",
    "start": "705060",
    "end": "711779"
  },
  {
    "text": "against Baseline which has the old snapshot and based on the score the analysis tool",
    "start": "711779",
    "end": "717720"
  },
  {
    "text": "will decide whether to fail or promote the canary environment to the next stage in the deploy pipeline which for example",
    "start": "717720",
    "end": "724200"
  },
  {
    "text": "could be deployed to production or you know running more integration tests",
    "start": "724200",
    "end": "729300"
  },
  {
    "text": "so in a SOA where so many services are deployed every single day this helps us",
    "start": "729300",
    "end": "735000"
  },
  {
    "text": "to release code changes at scale with confidence and ease so thanks to all these infra pieces we",
    "start": "735000",
    "end": "742380"
  },
  {
    "start": "739000",
    "end": "769000"
  },
  {
    "text": "were able to migrate our core product functionality to SOA within the span of two to three years with an architecture",
    "start": "742380",
    "end": "749279"
  },
  {
    "text": "like this and of course there are many other services that are not shown in this diagram in total we have more than",
    "start": "749279",
    "end": "756540"
  },
  {
    "text": "400 Services running in production with more than a thousand deploys every single day",
    "start": "756540",
    "end": "762240"
  },
  {
    "text": "after all this work you could think that we can now take a long nap in front of the computer just like this um cat but",
    "start": "762240",
    "end": "770160"
  },
  {
    "start": "769000",
    "end": "928000"
  },
  {
    "text": "we are not done in fact we haven't started climbing the metaphorical Hill that I mentioned in",
    "start": "770160",
    "end": "775500"
  },
  {
    "text": "the beginning what we realized is that with a sprawling architecture like ours there are some important SOA trade-offs that",
    "start": "775500",
    "end": "782519"
  },
  {
    "text": "we need to consider before we continue working in the same direction for instance it could sometimes take",
    "start": "782519",
    "end": "788940"
  },
  {
    "text": "more time to for engineers to ship a feature with SOA because Engineers need",
    "start": "788940",
    "end": "795240"
  },
  {
    "text": "to acquaint themselves with and make changes in multiple Services then they also have to deploy these different",
    "start": "795240",
    "end": "801540"
  },
  {
    "text": "services in order um before they can push out a feature there's also significant overhead in",
    "start": "801540",
    "end": "808440"
  },
  {
    "text": "maintaining each of these servers so on one hand our system has become",
    "start": "808440",
    "end": "813480"
  },
  {
    "text": "more reliable and highly available because if one service is down other parts of the SOA can still function",
    "start": "813480",
    "end": "820320"
  },
  {
    "text": "but on the other hand the proliferation of services along the stack also led to more developer friction",
    "start": "820320",
    "end": "827399"
  },
  {
    "text": "furthermore even though now our services are Loosely coupled it means that certain patterns and logic have to be",
    "start": "827399",
    "end": "833940"
  },
  {
    "text": "repeated across different Services since it's now harder to share code across service boundaries service boundaries",
    "start": "833940",
    "end": "840959"
  },
  {
    "text": "than before to continue the comparison on one hand our services are now individually",
    "start": "840959",
    "end": "847680"
  },
  {
    "text": "scalable which means that we can fine tune our resource allocation by service instead of scaling the entire monolith",
    "start": "847680",
    "end": "854220"
  },
  {
    "text": "but on the other hand we Face fragmentation and inconsistency in business logic which makes it harder for",
    "start": "854220",
    "end": "861000"
  },
  {
    "text": "us to have a full picture of what's going on in the system lastly on one hand we achieved business",
    "start": "861000",
    "end": "867300"
  },
  {
    "text": "agility by separating different parts of the product into different services that can basically iterate in parallel at the",
    "start": "867300",
    "end": "873540"
  },
  {
    "text": "same time but on the other hand it's also easy to end up with a complicated dependency graph if there's no rules around who can",
    "start": "873540",
    "end": "880860"
  },
  {
    "text": "call who and that's sort of what happened to us where due to unconstrained call patterns",
    "start": "880860",
    "end": "886500"
  },
  {
    "text": "between Services where basically anyone can call anyone else we have this dependency graph with unruly arrows",
    "start": "886500",
    "end": "893399"
  },
  {
    "text": "pointing in every single Direction this is unideal and potentially dangerous especially when they have",
    "start": "893399",
    "end": "899940"
  },
  {
    "text": "circular dependencies which can make relationships between Services hard to visualize and understand",
    "start": "899940",
    "end": "905820"
  },
  {
    "text": "on the good day this could make it hard for a new engineer to ramp up on the system but on a bad day when there's an",
    "start": "905820",
    "end": "912540"
  },
  {
    "text": "outage this could make it difficult to develop debug errors and to mitigate user impacts",
    "start": "912540",
    "end": "918360"
  },
  {
    "text": "so in a Tango dependency graph like this highly highly stable Services can also",
    "start": "918360",
    "end": "924480"
  },
  {
    "text": "be easily brought down by more volatile services so these are all flip sides of the same",
    "start": "924480",
    "end": "931019"
  },
  {
    "start": "928000",
    "end": "1084000"
  },
  {
    "text": "SOA coin that we have to Grapple with and to address these issues we took a",
    "start": "931019",
    "end": "936240"
  },
  {
    "text": "few steps starting with simplifying service dependencies which is our second takeaway",
    "start": "936240",
    "end": "942480"
  },
  {
    "text": "so if you recall we designed our architecture to be a tiered Tech stack consisting of presentation mid-tier and",
    "start": "942480",
    "end": "949980"
  },
  {
    "text": "data services and the motivation was to separate Services into layers as shown in this",
    "start": "949980",
    "end": "955800"
  },
  {
    "text": "diagram based on their technical priorities so as we go up the stack towards",
    "start": "955800",
    "end": "961440"
  },
  {
    "text": "application and UI layers the primary consideration here is iteration speed and schema flexibility leading to more",
    "start": "961440",
    "end": "968880"
  },
  {
    "text": "specific and fast changing API but on the other hand if we go down the stack towards platform and infra layers",
    "start": "968880",
    "end": "975240"
  },
  {
    "text": "they need to have more generalized API and higher reliability requirements since their blast radius is bigger which",
    "start": "975240",
    "end": "982620"
  },
  {
    "text": "means that if they go down many services many other services will be impacted",
    "start": "982620",
    "end": "987779"
  },
  {
    "text": "so for an SOA to be reliable and resilient it's imperative that stable services do not depend on more volatile",
    "start": "987779",
    "end": "994620"
  },
  {
    "text": "services conceptually speaking this means that a higher tier service can call a lower",
    "start": "994620",
    "end": "1000740"
  },
  {
    "text": "tier but not vice versa however the problem with our SOA system",
    "start": "1000740",
    "end": "1006440"
  },
  {
    "text": "was that there was not enough service governance and dependency management to enforce this fundamental principle and",
    "start": "1006440",
    "end": "1013040"
  },
  {
    "text": "to restrict who can call who hence to enforce a topology driven layer",
    "start": "1013040",
    "end": "1018920"
  },
  {
    "text": "architecture we introduce service blocks at a platform layer you can think of",
    "start": "1018920",
    "end": "1024438"
  },
  {
    "text": "each block as a collection of services with related business functionalities for instance the listing block as shown",
    "start": "1024439",
    "end": "1031699"
  },
  {
    "text": "here will encapsulate both the data and business logic that inform core listing attributes and then it will expose a",
    "start": "1031699",
    "end": "1039260"
  },
  {
    "text": "simple consistent read write API to Upstream clients through the facade under the hood the facade will help to",
    "start": "1039260",
    "end": "1046520"
  },
  {
    "text": "orchestrate the coordination between the underlying data and business logic Services while providing a layer of",
    "start": "1046520",
    "end": "1052400"
  },
  {
    "text": "abstraction that conceals the underlying complexity from the clients we also enforce a strict topology by",
    "start": "1052400",
    "end": "1059000"
  },
  {
    "text": "prohibiting clients from calling any of the internal Services as well as prohibiting blocks from having circular",
    "start": "1059000",
    "end": "1064760"
  },
  {
    "text": "dependencies with each other so with such a high level abstraction it's much easier for option clients to",
    "start": "1064760",
    "end": "1071900"
  },
  {
    "text": "discover and leverage our core functionality at the platform layer it is also much easier for us to manage to",
    "start": "1071900",
    "end": "1078380"
  },
  {
    "text": "manage block dependencies and maintain high level high levels of stability",
    "start": "1078380",
    "end": "1085160"
  },
  {
    "start": "1084000",
    "end": "1209000"
  },
  {
    "text": "next we also spend some time on platformizing data hydration so going back to this diagram again you",
    "start": "1085160",
    "end": "1092480"
  },
  {
    "text": "can see that we have quite a number of presentation services and if we zoom into any of these typical",
    "start": "1092480",
    "end": "1099080"
  },
  {
    "text": "presentation Services there are usually um three common and straightforward",
    "start": "1099080",
    "end": "1104660"
  },
  {
    "text": "functions that these Services perform including first which is data fetching",
    "start": "1104660",
    "end": "1109940"
  },
  {
    "text": "and hydration from different Downstream services so for example Ramen service costs you",
    "start": "1109940",
    "end": "1115820"
  },
  {
    "text": "know thousands of services to hydrate data for host reservation details",
    "start": "1115820",
    "end": "1120919"
  },
  {
    "text": "and second there's also simple transformation of data using um",
    "start": "1120919",
    "end": "1126080"
  },
  {
    "text": "using the same example Ramen service will transform and merge data from all",
    "start": "1126080",
    "end": "1131900"
  },
  {
    "text": "these thousands of Downstream Services into something that the client expects and then third there's also permission",
    "start": "1131900",
    "end": "1137660"
  },
  {
    "text": "checks that we have to perform before proceeding with more complex business logic",
    "start": "1137660",
    "end": "1143900"
  },
  {
    "text": "so as time went on we realized that Engineers uh were spending a lot of time on these three common functions",
    "start": "1143900",
    "end": "1150260"
  },
  {
    "text": "resulting in a lot of duplicated code and wasted productivity so our approach to this problem is to",
    "start": "1150260",
    "end": "1157400"
  },
  {
    "text": "introduce a platformized data access layer that provides a single Consolidated graphql schema stitching",
    "start": "1157400",
    "end": "1164720"
  },
  {
    "text": "together different entities across all of airbnb's data for instance listings users and reservations",
    "start": "1164720",
    "end": "1171020"
  },
  {
    "text": "and then it also serves as one platform to host all the mundane data fetching and hydration logic rather than",
    "start": "1171020",
    "end": "1177380"
  },
  {
    "text": "requiring duplication of this logic across many different passive Fusion services",
    "start": "1177380",
    "end": "1182600"
  },
  {
    "text": "so together with a more complex presentation Logic on the left and the right Logic on the right which we will",
    "start": "1182600",
    "end": "1188900"
  },
  {
    "text": "ignore for for this presentation this common data access layer will eventually",
    "start": "1188900",
    "end": "1194179"
  },
  {
    "text": "replace our old presentation services and then the service blocks below the",
    "start": "1194179",
    "end": "1200059"
  },
  {
    "text": "layer will also replace the old data data services so you can say that with this effort we",
    "start": "1200059",
    "end": "1206240"
  },
  {
    "text": "continue to simplify service dependencies going back to the layer itself it is",
    "start": "1206240",
    "end": "1212419"
  },
  {
    "start": "1209000",
    "end": "1487000"
  },
  {
    "text": "this service built in kotlin that we call Viaduct because it's sort of like a conduit for the data flowing through our",
    "start": "1212419",
    "end": "1218360"
  },
  {
    "text": "entire system so in essence it is an enhanced graphql",
    "start": "1218360",
    "end": "1223460"
  },
  {
    "text": "engine that's built in the language of kotlin that reimagines the way data is",
    "start": "1223460",
    "end": "1228679"
  },
  {
    "text": "fetched in SOA by going from service oriented to data oriented hydration",
    "start": "1228679",
    "end": "1233919"
  },
  {
    "text": "and what do I mean by that so to give you a more concrete example instead of writing code to explicitly",
    "start": "1233919",
    "end": "1241460"
  },
  {
    "text": "call reservation data service to get reservation data the caller will instead write a declarative query on the",
    "start": "1241460",
    "end": "1247640"
  },
  {
    "text": "resolution entity and they will even fetch the associated listing and guest user data using the same query",
    "start": "1247640",
    "end": "1255380"
  },
  {
    "text": "so such graphql queries are made possible by a graphql schema that's enriched with special directives",
    "start": "1255380",
    "end": "1262220"
  },
  {
    "text": "for example the service power type annotation with its templated Fields",
    "start": "1262220",
    "end": "1267380"
  },
  {
    "text": "allows us to associate a graphql type with a service endpoint where the response from the service will be",
    "start": "1267380",
    "end": "1273620"
  },
  {
    "text": "automatically used to hydrate the graphql type here you can see that we are linking the reservation data service",
    "start": "1273620",
    "end": "1280940"
  },
  {
    "text": "endpoints get reservations by IDs to the reservation graphql type",
    "start": "1280940",
    "end": "1287480"
  },
  {
    "text": "as another example the service power type key annotation allows us to link",
    "start": "1287480",
    "end": "1292880"
  },
  {
    "text": "different types together for instance the guest ID on the reservation type can link to a fully fledged user type that",
    "start": "1292880",
    "end": "1299900"
  },
  {
    "text": "is implicitly fetched from the user block service how the magic happens is that at build",
    "start": "1299900",
    "end": "1306200"
  },
  {
    "text": "time Vada translates these templated directives into other generated code AS",
    "start": "1306200",
    "end": "1311840"
  },
  {
    "text": "represented by the field and type resolvers in this diagram that basically takes care of the inter-service data",
    "start": "1311840",
    "end": "1317960"
  },
  {
    "text": "fetching and simple data Transformations a resolver in graphql terminology is",
    "start": "1317960",
    "end": "1323299"
  },
  {
    "text": "basically a function that outputs the value of a given field or type so in this diagram the third-party",
    "start": "1323299",
    "end": "1330380"
  },
  {
    "text": "graphql library is responsible for first parsing the incoming query and then",
    "start": "1330380",
    "end": "1335419"
  },
  {
    "text": "calling the resolvers for every field that we can process and in turn the fuel resolvers will call",
    "start": "1335419",
    "end": "1341539"
  },
  {
    "text": "the type resolvers to fetch data from Downstream services aside from these directives there's also",
    "start": "1341539",
    "end": "1348620"
  },
  {
    "text": "a privacy directive that wires in permission checks automatically and ownership directive that makes it easy",
    "start": "1348620",
    "end": "1354679"
  },
  {
    "text": "for us to find code reviewers and to Route alerts to the right teams for all these different types at Airbnb",
    "start": "1354679",
    "end": "1362240"
  },
  {
    "text": "another cool directive is the derived field directive which allows developers to create new Fields computed from one",
    "start": "1362240",
    "end": "1369200"
  },
  {
    "text": "or more existing fields for example this host facing status field is used in host resume host",
    "start": "1369200",
    "end": "1376220"
  },
  {
    "text": "reservation Details page to call out important stages or Milestones of a reservation to a host",
    "start": "1376220",
    "end": "1382400"
  },
  {
    "text": "so for instance you can take on the string values of pending payment checking out today review guests and Etc",
    "start": "1382400",
    "end": "1389720"
  },
  {
    "text": "to compute this status we need to consult listing reviews and payment data which will come from other parts of the",
    "start": "1389720",
    "end": "1396080"
  },
  {
    "text": "graphql schema so with the derived field annotation we",
    "start": "1396080",
    "end": "1401240"
  },
  {
    "text": "can tell Viaduct to resolve this derived field using the business logic defined in the host facing status provider class",
    "start": "1401240",
    "end": "1408919"
  },
  {
    "text": "and going into this class this provided class basically implements a",
    "start": "1408919",
    "end": "1414080"
  },
  {
    "text": "standardized interface and overrides two key methods the first one is this get",
    "start": "1414080",
    "end": "1419240"
  },
  {
    "text": "fragments method that allows us to Define data dependencies for this derived field in terms of a graphql",
    "start": "1419240",
    "end": "1425360"
  },
  {
    "text": "query you can see here that we are fetching data from listings reviews and payments",
    "start": "1425360",
    "end": "1431419"
  },
  {
    "text": "and then second we have this resolve method where we will write the actual",
    "start": "1431419",
    "end": "1436580"
  },
  {
    "text": "business Logic for resolving the derived field and what actually happens when a derived",
    "start": "1436580",
    "end": "1443059"
  },
  {
    "text": "field gets resolved is that it makes an additional fuel resolver sorry it makes",
    "start": "1443059",
    "end": "1448940"
  },
  {
    "text": "additional fuel resolver calls it can be multiple calls to satisfy its data requirements and in fact it creates its",
    "start": "1448940",
    "end": "1456140"
  },
  {
    "text": "own graphql engine which can instantiate fuel resolvers the same way that the other fields do",
    "start": "1456140",
    "end": "1462320"
  },
  {
    "text": "so such abstraction makes it easy for engineers to add all sorts of presentation logic without worrying",
    "start": "1462320",
    "end": "1467659"
  },
  {
    "text": "about the nitty-gritty details of data fetching but you can imagine that when a",
    "start": "1467659",
    "end": "1472880"
  },
  {
    "text": "query asks for multiple Fields especially multiple derived Fields it is easy to have overlapping data",
    "start": "1472880",
    "end": "1479299"
  },
  {
    "text": "dependencies within the query for instance here you see that three field resolvers might end up needing data from",
    "start": "1479299",
    "end": "1485419"
  },
  {
    "text": "the listing block service so to account for such scenarios Vada",
    "start": "1485419",
    "end": "1491419"
  },
  {
    "start": "1487000",
    "end": "1742000"
  },
  {
    "text": "has this built-in capability to batch the requests that is sent to Downstream services in an optimized manner making",
    "start": "1491419",
    "end": "1498559"
  },
  {
    "text": "sure that it is not it is not it is not making more calls than necessary and the battery logic here is",
    "start": "1498559",
    "end": "1505100"
  },
  {
    "text": "encapsulated by this data loader wrapper around each of the type resolvers",
    "start": "1505100",
    "end": "1510380"
  },
  {
    "text": "before I explain how this wrapper layer works just a warning first that I'll be getting into the weeds a little here but",
    "start": "1510380",
    "end": "1516860"
  },
  {
    "text": "hopefully it will all make sense so under the hood by that relies heavily on core routines in the calling language",
    "start": "1516860",
    "end": "1523880"
  },
  {
    "text": "which you can basically think of as lightweight threads So within the single buy that request",
    "start": "1523880",
    "end": "1530299"
  },
  {
    "text": "each of these field resolvers will trigger a core routine to resolve its field value",
    "start": "1530299",
    "end": "1536659"
  },
  {
    "text": "and some of the field resolvers might end up calling the same data loaders for example here you can see that the first",
    "start": "1536659",
    "end": "1542779"
  },
  {
    "text": "two field resolvers both called the listing data loader and same for the bottom two field resolvers which call",
    "start": "1542779",
    "end": "1549799"
  },
  {
    "text": "the user data loader it is important to highlight here that the load by ID method calls here don't",
    "start": "1549799",
    "end": "1556640"
  },
  {
    "text": "trigger immediate data loading but are rather suspended which means that it can be paused and resumed at a later time",
    "start": "1556640",
    "end": "1563779"
  },
  {
    "text": "and this suspension feature is a is a feature of the calling core routines",
    "start": "1563779",
    "end": "1569900"
  },
  {
    "text": "so Viaduct with its special Co routine dispatcher will basically wait until all",
    "start": "1569900",
    "end": "1575419"
  },
  {
    "text": "the core routines for this particular request have reached their suspension points meaning that no more resolution",
    "start": "1575419",
    "end": "1581600"
  },
  {
    "text": "is possible for that request before it is patching the actual data loading request to Downstream services in batch",
    "start": "1581600",
    "end": "1588700"
  },
  {
    "text": "so here you can see that Vida has aggregated all the listing IDs in one call to the listing block service and",
    "start": "1588700",
    "end": "1596240"
  },
  {
    "text": "other user IDs in one call to the user service respectively and once the data comes back Vada will",
    "start": "1596240",
    "end": "1603380"
  },
  {
    "text": "pass back the data to the original field result vertical routines which will then resume with the results",
    "start": "1603380",
    "end": "1610220"
  },
  {
    "text": "to go even one step further we also added an intra request cache which",
    "start": "1610220",
    "end": "1615500"
  },
  {
    "text": "basically keys on the global ID and the type of data to make sure that within the lives the life cycle of a single",
    "start": "1615500",
    "end": "1621679"
  },
  {
    "text": "request to Viaduct the same data doesn't get requested from its source more than once so for instance the same listing ID",
    "start": "1621679",
    "end": "1629059"
  },
  {
    "text": "or the same user ID does not get requested more than once so these two measures optimize batching",
    "start": "1629059",
    "end": "1636679"
  },
  {
    "text": "and caching for data loading prevents unconstrained fanout of requests to Downstream services",
    "start": "1636679",
    "end": "1643039"
  },
  {
    "text": "to give you a real life example um sorry this is the cashier to give you a",
    "start": "1643039",
    "end": "1649400"
  },
  {
    "text": "real life example this is the listing Details page that guests use to check out a listing and book the listing",
    "start": "1649400",
    "end": "1655539"
  },
  {
    "text": "naturally this page depends a lot on listing data but",
    "start": "1655539",
    "end": "1661159"
  },
  {
    "text": "um before with our first iteration of SOA the presentation service responsible for hydrating this page will end up",
    "start": "1661159",
    "end": "1668240"
  },
  {
    "text": "triggering 11 calls altogether to the listing block service through our SOA",
    "start": "1668240",
    "end": "1673340"
  },
  {
    "text": "maze but after migrating most of our presentation logic to Viaduct then the",
    "start": "1673340",
    "end": "1679460"
  },
  {
    "text": "number of calls is um you know reduced down to one so you can see how with batching and",
    "start": "1679460",
    "end": "1685159"
  },
  {
    "text": "caching biaduct helps to improve performance and saves us Computing costs by reducing the number of network",
    "start": "1685159",
    "end": "1690980"
  },
  {
    "text": "requests needed to serve a single page in addition we also have an online IDE",
    "start": "1690980",
    "end": "1696559"
  },
  {
    "text": "built on top of the open source graphical library that makes it super easy for engineers to explore the schema",
    "start": "1696559",
    "end": "1703460"
  },
  {
    "text": "issue actual queries and to inspect the data fetched it is also the primary way",
    "start": "1703460",
    "end": "1708980"
  },
  {
    "text": "that we use to test our local code changes since the IDE can be easily hooked up to local and test environments",
    "start": "1708980",
    "end": "1714980"
  },
  {
    "text": "as well so all in all a graphql schema that's",
    "start": "1714980",
    "end": "1720140"
  },
  {
    "text": "enriched with these configuration driven directives allows developers to easily create types construct an entire graph",
    "start": "1720140",
    "end": "1726919"
  },
  {
    "text": "representing airbnb's Central schema and to fetch data easily without having to navigate our vast consolation of",
    "start": "1726919",
    "end": "1733640"
  },
  {
    "text": "services this means that product Engineers can focus on product Innovation instead of",
    "start": "1733640",
    "end": "1739159"
  },
  {
    "text": "writing the same data hydration code over and over again lastly as we continue to evolve our SOA",
    "start": "1739159",
    "end": "1746419"
  },
  {
    "start": "1742000",
    "end": "2023000"
  },
  {
    "text": "we also decided to unify our client facing API in our original SOA diagram each",
    "start": "1746419",
    "end": "1753500"
  },
  {
    "text": "presentation service is usually maintained by a different product team an implication of this is that each",
    "start": "1753500",
    "end": "1759440"
  },
  {
    "text": "presentation service tends to Define its own client-facing API and solve problems its own way",
    "start": "1759440",
    "end": "1765500"
  },
  {
    "text": "there wasn't really a common set of best practices and people sometimes ended up Reinventing the wheel",
    "start": "1765500",
    "end": "1771380"
  },
  {
    "text": "this often resulted in inconsistent if not buggy user experience and lots of spaghetti code that is not really",
    "start": "1771380",
    "end": "1777620"
  },
  {
    "text": "reusable so our solution to the problem is UI platform which is a unified",
    "start": "1777620",
    "end": "1784460"
  },
  {
    "text": "opinionated server driven UI system to quickly visualize how it works this",
    "start": "1784460",
    "end": "1789919"
  },
  {
    "text": "is what the user sees on hrd and this is what the UI platform sees where everything on the page is broken",
    "start": "1789919",
    "end": "1796760"
  },
  {
    "text": "down into a standardized section so our idea was is for the content and",
    "start": "1796760",
    "end": "1801980"
  },
  {
    "text": "styling of the UI within each of these sections to be driven by the back end and this leaves the front end with just",
    "start": "1801980",
    "end": "1808220"
  },
  {
    "text": "a thin layer of logic that's responsible for rendering these sections in this diagram on the presentation",
    "start": "1808220",
    "end": "1815000"
  },
  {
    "text": "backend we you see that we expose a common schema to the clients and you can see that each of the front-end clients",
    "start": "1815000",
    "end": "1821360"
  },
  {
    "text": "has a UI platform runtime that is responsible for interpreting the API responses from the back end and",
    "start": "1821360",
    "end": "1827539"
  },
  {
    "text": "rendering it into UI for the user taking a deeper look into the",
    "start": "1827539",
    "end": "1832700"
  },
  {
    "text": "standardized API response you can see that it is broken down into two parts first we have the Regis a registry of",
    "start": "1832700",
    "end": "1839299"
  },
  {
    "text": "all the sections that's needed for a page and then second is the screen structure which expresses the layout of",
    "start": "1839299",
    "end": "1845480"
  },
  {
    "text": "the sections on the page for instance um you know like we can say that we want",
    "start": "1845480",
    "end": "1850580"
  },
  {
    "text": "a header section to be at the top of the page in the card section to be right below it",
    "start": "1850580",
    "end": "1856580"
  },
  {
    "text": "zooming further into each of these sections here we have the schema definition on the left with a concrete",
    "start": "1856580",
    "end": "1863059"
  },
  {
    "text": "example on the right so the example here is the user highlight section in hrd as indicated by",
    "start": "1863059",
    "end": "1869299"
  },
  {
    "text": "the section ID but focusing just on the key attributes we first have section data which",
    "start": "1869299",
    "end": "1876080"
  },
  {
    "text": "represent the data model for the section for example here we have a list of user info including where the user lives",
    "start": "1876080",
    "end": "1883100"
  },
  {
    "text": "and then second we have the UI component type field which is an enum that is used",
    "start": "1883100",
    "end": "1889340"
  },
  {
    "text": "to refer to the front-end UI component what that should be used to present the data in this case we want to render the",
    "start": "1889340",
    "end": "1896120"
  },
  {
    "text": "data as a bullet list so one thing to call out here is that it is possible for one section data type to",
    "start": "1896120",
    "end": "1903200"
  },
  {
    "text": "be rendered by different UI component types which gives us more flexibility and variation in UI design",
    "start": "1903200",
    "end": "1909860"
  },
  {
    "text": "but more importantly all these sections should be totally reusable across different services",
    "start": "1909860",
    "end": "1915440"
  },
  {
    "text": "for example this user highlight section here can be shared between a guest spacing and a hole spacing surface",
    "start": "1915440",
    "end": "1922899"
  },
  {
    "text": "there are a few other key features of the UI platform first we have support",
    "start": "1922899",
    "end": "1928340"
  },
  {
    "text": "for different layouts and placements of sections on the page which provides flexibility and range for product design",
    "start": "1928340",
    "end": "1934520"
  },
  {
    "text": "needs and second with different sections we can opt to delay the loading of more",
    "start": "1934520",
    "end": "1940940"
  },
  {
    "text": "expensive sections to a second Network request which helps to improve the initial page load time and user",
    "start": "1940940",
    "end": "1946460"
  },
  {
    "text": "experience overall this is especially helpful for mobile clients that can have weaker internet",
    "start": "1946460",
    "end": "1951799"
  },
  {
    "text": "signals than desktop web and lastly the framework also locks",
    "start": "1951799",
    "end": "1956840"
  },
  {
    "text": "impression and UI extra actions of each section automatically which is helpful for measuring user engagement when we",
    "start": "1956840",
    "end": "1964039"
  },
  {
    "text": "launch a new feature and to make the developer experience easier we also build out a web tool that",
    "start": "1964039",
    "end": "1971120"
  },
  {
    "text": "allows back-end Engineers to visualize their API response in real time by copy pasting their API response payload into",
    "start": "1971120",
    "end": "1977899"
  },
  {
    "text": "the text box in the tool so in summary by driving the UI from the",
    "start": "1977899",
    "end": "1985039"
  },
  {
    "text": "backend server we can basically establish a clear schema contract between Frontline and blackened and",
    "start": "1985039",
    "end": "1991399"
  },
  {
    "text": "maintain a repository of robust reusable UI components that makes it easier for us to prototype a feature",
    "start": "1991399",
    "end": "1998240"
  },
  {
    "text": "in addition with pre-built sections we could also easily push new content to the clients without waiting for the Long",
    "start": "1998240",
    "end": "2004179"
  },
  {
    "text": "mobile app release Cycles on App Stores since no client code changes are needed with pre-built sections",
    "start": "2004179",
    "end": "2010960"
  },
  {
    "text": "and lastly by centralizing the business logic and presentation logic in the back end instead of having it scattered",
    "start": "2010960",
    "end": "2017260"
  },
  {
    "text": "across clients we could also ensure a consistent user experience across all front-end platforms",
    "start": "2017260",
    "end": "2023919"
  },
  {
    "start": "2023000",
    "end": "2150000"
  },
  {
    "text": "so on the spectrum of how service driven we are we have been leaning very close",
    "start": "2023919",
    "end": "2029140"
  },
  {
    "text": "to the side of fully server driven UI but plot twist",
    "start": "2029140",
    "end": "2034720"
  },
  {
    "text": "so basically after piloting the UI platform for a few product launches we",
    "start": "2034720",
    "end": "2040419"
  },
  {
    "text": "noticed some issues first of all by driving the presentation logic from the back end",
    "start": "2040419",
    "end": "2046620"
  },
  {
    "text": "it makes it hard for the different fine clients to leverage latest native improvements or building capabilities",
    "start": "2046620",
    "end": "2053320"
  },
  {
    "text": "from their native OS platforms for instance the navigation Styles or",
    "start": "2053320",
    "end": "2058480"
  },
  {
    "text": "haptic feedback on Android and iOS are done very differently and is it is hard to server Drive these things different",
    "start": "2058480",
    "end": "2065679"
  },
  {
    "text": "um differently from in a centralized manner from the back end and second the UI platform makes it easy",
    "start": "2065679",
    "end": "2073179"
  },
  {
    "text": "for us to reuse existing sections to build new page however for a brand new",
    "start": "2073179",
    "end": "2078398"
  },
  {
    "text": "section designed for a brand new section designing the schema and building it out involves close collaboration between the",
    "start": "2078399",
    "end": "2086138"
  },
  {
    "text": "client and back-end Engineers initially and as our company continues to invest in the ambitious product roadmap we need",
    "start": "2086139",
    "end": "2093220"
  },
  {
    "text": "to find a way to decouple this very tight-knit on front end and back-end workflows to speed up our iteration",
    "start": "2093220",
    "end": "2101260"
  },
  {
    "text": "so we basically decided to scale back our server drivenness and move towards",
    "start": "2101260",
    "end": "2106900"
  },
  {
    "text": "the middle of the spectrum where the UI platform will become a thin screen",
    "start": "2106900",
    "end": "2112240"
  },
  {
    "text": "building layer in our front-end architecture in this Vision the section will",
    "start": "2112240",
    "end": "2117940"
  },
  {
    "text": "basically Remain the Primitive for screen building but now sections can be orchestrated with either server-side",
    "start": "2117940",
    "end": "2124540"
  },
  {
    "text": "logic or client logic meaning that some sections can remain server driven but",
    "start": "2124540",
    "end": "2129880"
  },
  {
    "text": "for the client driven sections the front end will handle the UI presentation logic while the backend will handle the",
    "start": "2129880",
    "end": "2136000"
  },
  {
    "text": "business logic so this pivoting in our finance strategy will hopefully give us more flexibility",
    "start": "2136000",
    "end": "2142960"
  },
  {
    "text": "in supporting new products and give us more Synergy and speed in developer collaboration",
    "start": "2142960",
    "end": "2150579"
  },
  {
    "start": "2150000",
    "end": "2295000"
  },
  {
    "text": "so we have gone through a lot of material and now to recap all the lessons that we have covered so far",
    "start": "2150760",
    "end": "2157720"
  },
  {
    "text": "first um we have the first lesson which is to invest in common infrastructure early to",
    "start": "2157720",
    "end": "2163780"
  },
  {
    "text": "turbocharge our initial SOA migration in our case we leverage both open source",
    "start": "2163780",
    "end": "2170440"
  },
  {
    "text": "and in-house Technologies to lay a foundation for our SOA second as you continue to expand and",
    "start": "2170440",
    "end": "2177460"
  },
  {
    "text": "scale your architecture you can consider to start simplifying your service dependency graph for long-term stability",
    "start": "2177460",
    "end": "2184240"
  },
  {
    "text": "for us we did it with service blocks at a platform layer third platformized common patterns such",
    "start": "2184240",
    "end": "2191260"
  },
  {
    "text": "as data hydration so that product Engineers can focus on solving new and important problems",
    "start": "2191260",
    "end": "2196540"
  },
  {
    "text": "for us we build a Viaduct service to do their job lastly unified client-facing API into a",
    "start": "2196540",
    "end": "2204099"
  },
  {
    "text": "robust system of flexible orchestration and reusable parts to support product iteration",
    "start": "2204099",
    "end": "2209800"
  },
  {
    "text": "for us we use the UI platform to standardize our API",
    "start": "2209800",
    "end": "2214960"
  },
  {
    "text": "so one overarching theme in the progression of these takeaways is that we continue to streamline and fine-tune",
    "start": "2214960",
    "end": "2221920"
  },
  {
    "text": "our layers of abstraction based on the way we work and the way we build our product starting from the infra layer",
    "start": "2221920",
    "end": "2227380"
  },
  {
    "text": "with the common building blocks to platform layer with the service blocks and then to API application and UI layer",
    "start": "2227380",
    "end": "2234700"
  },
  {
    "text": "with Viaduct and UI platform what informed these stepwise improvements were the common pain points",
    "start": "2234700",
    "end": "2241480"
  },
  {
    "text": "experienced by engineers and end users it's true that sometimes it means that we have to undo our earlier work but",
    "start": "2241480",
    "end": "2248859"
  },
  {
    "text": "that is fine it is really hard to get everything right the first time anyways the point is to keep evolving the",
    "start": "2248859",
    "end": "2254800"
  },
  {
    "text": "architecture to improve developer experience and to serve prevailing business needs",
    "start": "2254800",
    "end": "2260200"
  },
  {
    "text": "so going back to Metaphor the metaphorical Hill in SF again when we set out to migrate to SOA we",
    "start": "2260200",
    "end": "2267220"
  },
  {
    "text": "were not expecting our path to include this deep climb up ahead but the lessons along the way were enriching and the",
    "start": "2267220",
    "end": "2274119"
  },
  {
    "text": "learning curve was in fact quite an exciting and fulfilling ride we can say for sure that we have made it",
    "start": "2274119",
    "end": "2279820"
  },
  {
    "text": "to the top of the hill that when we survey our current Tech stack we begin to see that SOA is not a fixed",
    "start": "2279820",
    "end": "2286359"
  },
  {
    "text": "destination instead like a real City it is constantly changing and evolving into something more resilient and Lasting",
    "start": "2286359",
    "end": "2293800"
  },
  {
    "text": "thank you",
    "start": "2293800",
    "end": "2296520"
  },
  {
    "start": "2295000",
    "end": "2798000"
  },
  {
    "text": "thank you that was absolutely great there's so much it's so dense and full of information and thank you everybody for um asking uh your questions I think",
    "start": "2299320",
    "end": "2307480"
  },
  {
    "text": "you've answered most of them so if anyone has any um any other questions",
    "start": "2307480",
    "end": "2312640"
  },
  {
    "text": "please do post them into the chat we've got about 10 minutes and then after that we have the hangout with the speaker so",
    "start": "2312640",
    "end": "2319480"
  },
  {
    "text": "you'll be able to live a chat then as well in while I'm waiting for people to come",
    "start": "2319480",
    "end": "2325480"
  },
  {
    "text": "up with their own questions iPhone actually which is um what's what's your next big what's the next thing you're thinking we need",
    "start": "2325480",
    "end": "2331900"
  },
  {
    "text": "to make a change here to improve stuff hmm yeah so um at Airbnb we are now",
    "start": "2331900",
    "end": "2338020"
  },
  {
    "text": "focusing a lot on further improving developer productivity now that we have this like complex system of like so many",
    "start": "2338020",
    "end": "2345220"
  },
  {
    "text": "services being deployed and like features being launched um um at the same time so",
    "start": "2345220",
    "end": "2352599"
  },
  {
    "text": "um something that we are trying to speed up is uh developer Enviro like local",
    "start": "2352599",
    "end": "2357880"
  },
  {
    "text": "developing environment so um as you can see in one of my slides we used to have like all these like staging",
    "start": "2357880",
    "end": "2364300"
  },
  {
    "text": "environments test environments um and developers used to just push",
    "start": "2364300",
    "end": "2370599"
  },
  {
    "text": "their local changes to one of the test environments and issue some requests to make sure that their changes work as",
    "start": "2370599",
    "end": "2377020"
  },
  {
    "text": "expected but those test environments are like you know uh they're aesthetic and",
    "start": "2377020",
    "end": "2383320"
  },
  {
    "text": "they are um maintained by the service owner right now we are trying to Pilot something",
    "start": "2383320",
    "end": "2389500"
  },
  {
    "text": "different that is basically allowing any developer working on any service to to",
    "start": "2389500",
    "end": "2394900"
  },
  {
    "text": "just like spin up a private group of like um Cloud applications to basically",
    "start": "2394900",
    "end": "2401260"
  },
  {
    "text": "run your changes on and those can spin up or like you know like or ramp Down based on developer demands so it's sort",
    "start": "2401260",
    "end": "2408099"
  },
  {
    "text": "of like an on-demand sort of um test environment that is connected to the wider staging environment of the",
    "start": "2408099",
    "end": "2415780"
  },
  {
    "text": "different services in the ecosystem and so in that way hopefully we can speed up",
    "start": "2415780",
    "end": "2421240"
  },
  {
    "text": "um uh just like the deploy time because um in the past when we deploy to",
    "start": "2421240",
    "end": "2426339"
  },
  {
    "text": "specific test environments we have still have to go through like you know CI checks and stuff like that but with a",
    "start": "2426339",
    "end": "2432099"
  },
  {
    "text": "more private group that is that sort of have like safe safety boundaries around",
    "start": "2432099",
    "end": "2437200"
  },
  {
    "text": "it um we can make things faster and bypass some of the checks yeah so that's",
    "start": "2437200",
    "end": "2442359"
  },
  {
    "text": "something that we have been tinkering on and trying to get more adoption off within Airbnb",
    "start": "2442359",
    "end": "2448060"
  },
  {
    "text": "very interesting um anyone else got any questions",
    "start": "2448060",
    "end": "2454420"
  },
  {
    "text": "um so my other question I guess is so you talk about service oriented architecture and and I've been around long enough to remember",
    "start": "2454420",
    "end": "2460300"
  },
  {
    "text": "we had surface oriented architecture we started talking about microservices what do you what do you see is the difference",
    "start": "2460300",
    "end": "2465400"
  },
  {
    "text": "between the two why do you say service oriented architecture when you're talking about these changes",
    "start": "2465400",
    "end": "2470680"
  },
  {
    "text": "honestly I think it's just a process of like how we socialize the um idea within",
    "start": "2470680",
    "end": "2476320"
  },
  {
    "text": "our company I think um Tech leaders at that time they really just like use that",
    "start": "2476320",
    "end": "2481480"
  },
  {
    "text": "the word SOA to push the the concept wider to um like every every corner of",
    "start": "2481480",
    "end": "2487839"
  },
  {
    "text": "the company and um I think partially it might be because we at the start we were",
    "start": "2487839",
    "end": "2494020"
  },
  {
    "text": "sort of like wary of like you know um like splitting our logic into tiny",
    "start": "2494020",
    "end": "2499599"
  },
  {
    "text": "services so like we want to avoid just like using microservices just because the term might be a little bit um like",
    "start": "2499599",
    "end": "2506200"
  },
  {
    "text": "misleading or biased in just like how it's like understood by most people when I first hear them hear it",
    "start": "2506200",
    "end": "2513820"
  },
  {
    "text": "um so yeah I think it's probably just like the process of like how we um communicated more than anything else",
    "start": "2513820",
    "end": "2521500"
  },
  {
    "text": "excellent yeah that's interesting so basically microservices sound like there's going to be far too small and so",
    "start": "2521500",
    "end": "2527320"
  },
  {
    "text": "right yeah okay that's great and then from your perspective is there",
    "start": "2527320",
    "end": "2533320"
  },
  {
    "text": "a difference um I guess there isn't I really don't I think so and I think probably it's a I",
    "start": "2533320",
    "end": "2539920"
  },
  {
    "text": "would say it's a good um Instinct not to get hung up on the size of services because",
    "start": "2539920",
    "end": "2546220"
  },
  {
    "text": "um where we've built microservices architecture at the financial times I think we did build far too many services",
    "start": "2546220",
    "end": "2552099"
  },
  {
    "text": "because because we thought oh they're supposed to be small um there's a couple more questions so I'm just going to go to those so one uh",
    "start": "2552099",
    "end": "2558700"
  },
  {
    "text": "what's what are the biggest benefits of the presented uh service oriented architecture Airbnb compared to the",
    "start": "2558700",
    "end": "2564220"
  },
  {
    "text": "monorail yeah scalability scalability for sure",
    "start": "2564220",
    "end": "2571599"
  },
  {
    "text": "um I think uh the most important part is how it's mapped to how our teams are",
    "start": "2571599",
    "end": "2577540"
  },
  {
    "text": "divided so um like uh in a very like in very broad Strokes we have like the",
    "start": "2577540",
    "end": "2583420"
  },
  {
    "text": "guest facing um teams and host facing teams and we work on um like the logic on our website",
    "start": "2583420",
    "end": "2589000"
  },
  {
    "text": "separately for those things um so um in terms of like just like iterating and like pushing out new",
    "start": "2589000",
    "end": "2595540"
  },
  {
    "text": "features breaking our monolith into like different Services allow us to just like do things in parallel instead of you",
    "start": "2595540",
    "end": "2602020"
  },
  {
    "text": "know having this like one long deploy train on this like monolithic application that might you know like you",
    "start": "2602020",
    "end": "2608260"
  },
  {
    "text": "know a guest changed my break might delay a host uh change and stuff like",
    "start": "2608260",
    "end": "2613300"
  },
  {
    "text": "that so I think that that's like the main benefit mm-hmm downsides",
    "start": "2613300",
    "end": "2620280"
  },
  {
    "text": "downsides yeah it's just a fragmentation of uh like logic",
    "start": "2620280",
    "end": "2625900"
  },
  {
    "text": "um right now we are we are moving from like being very being being very fragmented to uh like being fragmented",
    "start": "2625900",
    "end": "2633400"
  },
  {
    "text": "having a lot of services to consolidating some of these logic um and we're trying to start from like",
    "start": "2633400",
    "end": "2638920"
  },
  {
    "text": "the more bottom layers of our like Tech stack so like starting from the platform layers we're trying to group all of",
    "start": "2638920",
    "end": "2645160"
  },
  {
    "text": "these like very very commonly used um data and logic into bigger service",
    "start": "2645160",
    "end": "2650920"
  },
  {
    "text": "blocks instead of having you know multiple Services uh like re-implementing the same thing",
    "start": "2650920",
    "end": "2657780"
  },
  {
    "text": "yeah my experience is definitely you end up moving things around as you realize you're changing them all at the same",
    "start": "2657780",
    "end": "2662920"
  },
  {
    "text": "time um right the next question in addition to Ruby what programming languages have",
    "start": "2662920",
    "end": "2668680"
  },
  {
    "text": "you added to us to your Stacks so yeah Ruby was used in the monolith",
    "start": "2668680",
    "end": "2674140"
  },
  {
    "text": "um right now we use a lot of java in our back-end services and some kotlin",
    "start": "2674140",
    "end": "2679359"
  },
  {
    "text": "sometimes as well for the data side of things we use Scala mm-hmm",
    "start": "2679359",
    "end": "2685900"
  },
  {
    "text": "uh was the monorail completely decommissioned um unfortunately not so that's I guess",
    "start": "2685900",
    "end": "2691540"
  },
  {
    "text": "that's like one of the like fine print in our presentation it's it's that it's",
    "start": "2691540",
    "end": "2696700"
  },
  {
    "text": "it's really hard there's gonna there's like different I guess different level of challenge",
    "start": "2696700",
    "end": "2702579"
  },
  {
    "text": "when it comes to migration they're just gonna be some stuff that's really really hard to migrate out or stuff that is uh",
    "start": "2702579",
    "end": "2709960"
  },
  {
    "text": "sort of important but not that critical and no one has the time to like you know migrate uh them out so um right now",
    "start": "2709960",
    "end": "2717760"
  },
  {
    "text": "monorail still serves um some very Legacy traffic oh another reason is some",
    "start": "2717760",
    "end": "2723640"
  },
  {
    "text": "very old front-end clients especially like mobile clients like IOS and Android might still be talking to monorail",
    "start": "2723640",
    "end": "2729700"
  },
  {
    "text": "endpoints and so for those reasons we have to keep it around for a while longer is there a plan to say we're going to",
    "start": "2729700",
    "end": "2736839"
  },
  {
    "text": "get rid of it or is it just we'll keep a certain amount of it that the the our goal is for me to",
    "start": "2736839",
    "end": "2743859"
  },
  {
    "text": "decommission it completely but um I am just not sure how long it will take there's going to be a very long tail",
    "start": "2743859",
    "end": "2749200"
  },
  {
    "text": "that might just um take um like maybe a couple more years that to uh like uh for",
    "start": "2749200",
    "end": "2757359"
  },
  {
    "text": "monorail to completely disappear um it's yeah it's it's not critical anymore it's",
    "start": "2757359",
    "end": "2764920"
  },
  {
    "text": "just gonna be a small component in our SOA it will be it will become one of the services basically",
    "start": "2764920",
    "end": "2771040"
  },
  {
    "text": "mm-hmm interesting there is one question if we can quickly do it because then we have",
    "start": "2771040",
    "end": "2776440"
  },
  {
    "text": "to go to the hangout with the speaker but how does the graphql there talk with the service lens does it use Thrift",
    "start": "2776440",
    "end": "2782140"
  },
  {
    "text": "uh yes yes that's correct well thanks everybody that was",
    "start": "2782140",
    "end": "2788920"
  },
  {
    "text": "absolutely brilliant thank you so much um the link um the Hank the hangout with",
    "start": "2788920",
    "end": "2794079"
  },
  {
    "text": "speaker the link is on the schedule page and uh Selena will be there for the next 20 minutes and please come and have a",
    "start": "2794079",
    "end": "2800380"
  },
  {
    "start": "2798000",
    "end": "2813000"
  },
  {
    "text": "chat thank you thanks again",
    "start": "2800380",
    "end": "2803880"
  },
  {
    "text": "[Music] thank you",
    "start": "2806320",
    "end": "2812220"
  }
]