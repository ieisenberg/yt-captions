[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "16160"
  },
  {
    "text": "honey and I'm here to talk to you about six impossible things",
    "start": "16160",
    "end": "22080"
  },
  {
    "text": "now that idea of six impossible things comes from one of the Alice books from Alice in Wonderland",
    "start": "22080",
    "end": "28980"
  },
  {
    "text": "um it's the first book through the Looking Glass it's the second book by Lewis Carroll and the White Queen is",
    "start": "28980",
    "end": "35219"
  },
  {
    "text": "asking Alice to believe in something that says well I can't believe that it's impossible and the queen just dismisses",
    "start": "35219",
    "end": "42840"
  },
  {
    "text": "that sometimes I believed as many as six impossible things before breakfast and I want to emphasize this idea of",
    "start": "42840",
    "end": "49680"
  },
  {
    "text": "impossibility because we are often taught that nothing is impossible",
    "start": "49680",
    "end": "55440"
  },
  {
    "text": "no it just takes more time more effort um anything is possible but at the same",
    "start": "55440",
    "end": "60780"
  },
  {
    "text": "time we also sometimes brand something is impossible",
    "start": "60780",
    "end": "65939"
  },
  {
    "text": "when actually it's just ridiculously hard and not feasible that's not the same thing if uh you know for you",
    "start": "65939",
    "end": "72479"
  },
  {
    "text": "somebody says that's impossible it would take a thousand years then they've just told you the circumstances",
    "start": "72479",
    "end": "78780"
  },
  {
    "text": "um for its possibility um so there is a distinction here I'm actually interested in the things that",
    "start": "78780",
    "end": "87180"
  },
  {
    "text": "are challenges um that we can't meet directly oh we may",
    "start": "87180",
    "end": "92220"
  },
  {
    "text": "work around them we may use our Ingenuity we may pull back um and uh innovate in other ways but",
    "start": "92220",
    "end": "99479"
  },
  {
    "text": "there are certain limits limits defined by mathematics and physics",
    "start": "99479",
    "end": "104759"
  },
  {
    "text": "um that uh every now and then hit in software development so I'm going to",
    "start": "104759",
    "end": "110340"
  },
  {
    "start": "110000",
    "end": "324000"
  },
  {
    "text": "count these down let's start at six",
    "start": "110340",
    "end": "115159"
  },
  {
    "text": "representations can be inferred that this is impossible and I said well",
    "start": "115460",
    "end": "120600"
  },
  {
    "text": "surely I can get I can represent infinity my floating Point numbers I can do that",
    "start": "120600",
    "end": "126540"
  },
  {
    "text": "plus M4 minus infinity yeah you're representing it's a standing for Infinity but it's not actually",
    "start": "126540",
    "end": "132180"
  },
  {
    "text": "Infinity um there are no Infinities in the physical Universe Infinity is a",
    "start": "132180",
    "end": "138060"
  },
  {
    "text": "mathematical concept not a physical one okay that's not so there's a distinction here we are using a placeholder to say",
    "start": "138060",
    "end": "144180"
  },
  {
    "text": "this thing is infinity it's like Infinity it doesn't behave like Infinity it not it is not itself uh",
    "start": "144180",
    "end": "152160"
  },
  {
    "text": "infinity it is much more bounded there are also other Concepts that lie Beyond",
    "start": "152160",
    "end": "158040"
  },
  {
    "text": "finiteness so for example not a number is is not a finite uh numeric concept",
    "start": "158040",
    "end": "164760"
  },
  {
    "text": "this is perhaps one of the most familiar to people um in their day-to-day use of",
    "start": "164760",
    "end": "170220"
  },
  {
    "text": "applications in the web and we get thrown back with Nan it's not a number",
    "start": "170220",
    "end": "176040"
  },
  {
    "text": "sometimes it's as frustrating as not being able to complete a flight booking",
    "start": "176040",
    "end": "182040"
  },
  {
    "text": "and other times it can be a little more dramatic this happened in 2020 um and uh driverless race cars uh drives",
    "start": "182040",
    "end": "190860"
  },
  {
    "text": "into a wall and what had happened um is during the initialization lap",
    "start": "190860",
    "end": "196319"
  },
  {
    "text": "something had happened which caused the steering control signal to go to Nan and subsequently the steering locked to the",
    "start": "196319",
    "end": "202200"
  },
  {
    "text": "maximum value to the right so this was a bit of a state management issue",
    "start": "202200",
    "end": "207599"
  },
  {
    "text": "it was interesting when I tweeted this originally um somebody had pointed out to me you know",
    "start": "207599",
    "end": "215519"
  },
  {
    "text": "oh are you saying that these applications that they use JavaScript",
    "start": "215519",
    "end": "220620"
  },
  {
    "text": "it's like well no that's not not at all to say um",
    "start": "220620",
    "end": "225720"
  },
  {
    "text": "um Nan is used outside the realm of JavaScript um it comes from IEEE 754 and IEEE 854",
    "start": "225720",
    "end": "234659"
  },
  {
    "text": "standards um so this is the 1980s we've seen Nan errors all over the place",
    "start": "234659",
    "end": "240540"
  },
  {
    "text": "but JavaScript thanks to its um long-standing idea that there is only",
    "start": "240540",
    "end": "246299"
  },
  {
    "text": "one um uh a one numeric type and it's a very uh well it's a very atypical numeric",
    "start": "246299",
    "end": "253140"
  },
  {
    "text": "type floating Point uh uh type is is its only way of expressing numbers",
    "start": "253140",
    "end": "259320"
  },
  {
    "text": "historically it's a limitation to do with that and that therefore is very public facing now",
    "start": "259320",
    "end": "266040"
  },
  {
    "text": "when it comes down to floating Point representations there was a piece in 97 things every programmer should know",
    "start": "266040",
    "end": "271740"
  },
  {
    "text": "piece by Chuck Allison uh called floating Point numbers aren't real and",
    "start": "271740",
    "end": "276960"
  },
  {
    "text": "he makes this observation there's this is important because real numbers have infinite precision and",
    "start": "276960",
    "end": "284040"
  },
  {
    "text": "are therefore continuous and non-lossy in fact real numbers are uncountably infinite between zero and one there are",
    "start": "284040",
    "end": "291120"
  },
  {
    "text": "an infinite number of numbers and we are not able to represent them all",
    "start": "291120",
    "end": "296400"
  },
  {
    "text": "we are ever going to do is approximation floating Point numbers are that",
    "start": "296400",
    "end": "302340"
  },
  {
    "text": "approximation they have limited Precision so they are finite and they resemble badly behaved integers that's a",
    "start": "302340",
    "end": "309060"
  },
  {
    "text": "lovely way of pulling it these are badly behaved integers they they don't behave as you would expect",
    "start": "309060",
    "end": "314419"
  },
  {
    "text": "but it's a little more uh it's a little more than that because it is not simply",
    "start": "314419",
    "end": "319860"
  },
  {
    "text": "that they are badly behaved integers integers are not always that well behaved either",
    "start": "319860",
    "end": "325979"
  },
  {
    "start": "324000",
    "end": "816000"
  },
  {
    "text": "one of the things that we learned is that most",
    "start": "325979",
    "end": "331020"
  },
  {
    "text": "um most languages present us with integers that are unlike true integers",
    "start": "331020",
    "end": "337320"
  },
  {
    "text": "true integers are unbounded they are countably infinite",
    "start": "337320",
    "end": "343020"
  },
  {
    "text": "a 32-bit integer is not countably inflated it's countably finite and we see it thrust into our faces every now",
    "start": "343020",
    "end": "350220"
  },
  {
    "text": "and then so here's one from a few years ago Visual Studio telling me that my license will explore it will expire and in about two billion",
    "start": "350220",
    "end": "357780"
  },
  {
    "text": "days and that number if you're outside software development you come from outside software development that looks just like an",
    "start": "357780",
    "end": "363360"
  },
  {
    "text": "arbitrarily large number if you're a software developer you look at that oh yeah it's 231-1 that is the",
    "start": "363360",
    "end": "369660"
  },
  {
    "text": "maximum value of a science 32-bit int that's a little bit suspicious",
    "start": "369660",
    "end": "375600"
  },
  {
    "text": "but we can also see there's something else going on here as well so somehow something got set to impacts value but",
    "start": "375600",
    "end": "381300"
  },
  {
    "text": "also notice your license has gone stale and must be updated well surely that's not right I mean my license is good for",
    "start": "381300",
    "end": "388080"
  },
  {
    "text": "a few hundred thousand years you know I'm I'm good here clearly the number that has been used",
    "start": "388080",
    "end": "393120"
  },
  {
    "text": "for comparison is different and so this is likely to be something that um uh manifests in the presentation",
    "start": "393120",
    "end": "399720"
  },
  {
    "text": "layer rather than rather than in the core but it does confront us with the",
    "start": "399720",
    "end": "406860"
  },
  {
    "text": "boundedness and the limitations as it were in errors we tend to find uh we confront",
    "start": "406860",
    "end": "412979"
  },
  {
    "text": "um the uh finiteness of our machines we might be tempted to try and prove",
    "start": "412979",
    "end": "419759"
  },
  {
    "text": "things okay there are limits to proofs and there are limits the practicality of proofs but",
    "start": "419759",
    "end": "426660"
  },
  {
    "text": "there's also something else in when we talk about um the limits of proof",
    "start": "426660",
    "end": "431880"
  },
  {
    "text": "this was inadvertently highlighted in a um a piece by John Bentley 1983",
    "start": "431880",
    "end": "440099"
  },
  {
    "text": "um during the 80s John Bentley had a column in Communications the sem programming pearls and these were",
    "start": "440099",
    "end": "447120"
  },
  {
    "text": "collected in a number of books program 12s more program pearls and then there was a second edition of programming",
    "start": "447120",
    "end": "452460"
  },
  {
    "text": "pools in the 90s and this one which you can find in the first edition",
    "start": "452460",
    "end": "458940"
  },
  {
    "text": "writing correct programs in fact you can find it online if you want to Google for it it's interesting because he presents",
    "start": "458940",
    "end": "464699"
  },
  {
    "text": "a he he presents a binary search algorithm he presents by research and proves that",
    "start": "464699",
    "end": "471419"
  },
  {
    "text": "it is correct and here's the pseudocode that he presents for it and we can see there's an interesting of",
    "start": "471419",
    "end": "477660"
  },
  {
    "text": "note there is a three-way partition in that case there's a three-way partition in terms of comparison then he annotates",
    "start": "477660",
    "end": "483960"
  },
  {
    "text": "this more completely and all of those things in curly brackets that say must be basically must be as an assertion",
    "start": "483960",
    "end": "489780"
  },
  {
    "text": "because it's an invariant a thing that must be true at that point and he uses this to demonstrate",
    "start": "489780",
    "end": "496380"
  },
  {
    "text": "correctness of this algorithm and one of the major benefits of program verification is that it gives",
    "start": "496380",
    "end": "502020"
  },
  {
    "text": "programmers a language in which they can express that understanding and we should always be on the lookout for",
    "start": "502020",
    "end": "508080"
  },
  {
    "text": "opportunities to in improve our vocabulary our ways of expressing",
    "start": "508080",
    "end": "513959"
  },
  {
    "text": "um and understanding certain problems more different points of view can be very helpful but he also observes this is not the b",
    "start": "513959",
    "end": "522240"
  },
  {
    "text": "or an end-all these techniques are only a small part of writing correct programs keeping the code simple is usually the",
    "start": "522240",
    "end": "528360"
  },
  {
    "text": "way to correct this he also highlights another aspect where our emphasis is drawn where our",
    "start": "528360",
    "end": "534660"
  },
  {
    "text": "attention is strong several professional programs familiar with these techniques have related to me",
    "start": "534660",
    "end": "539940"
  },
  {
    "text": "and experienced that is too common in my own program when they construct a program the hard Parts work first time",
    "start": "539940",
    "end": "545339"
  },
  {
    "text": "while the bugs are in the easy parts and this is you've probably had this",
    "start": "545339",
    "end": "550920"
  },
  {
    "text": "experience you know it you're so focused on the bit that you know is hard you put",
    "start": "550920",
    "end": "556260"
  },
  {
    "text": "so much attention you manage the detail and you get it right you completely Overlook something",
    "start": "556260",
    "end": "562320"
  },
  {
    "text": "else that's been validated or something else that should have been changed in conjunction with a more complex thing",
    "start": "562320",
    "end": "568279"
  },
  {
    "text": "and this kind of demonstrates to us we have a blind spot but that blind spot is",
    "start": "568279",
    "end": "573899"
  },
  {
    "text": "in fact deeper than what he's described here is code from the Java libraries",
    "start": "573899",
    "end": "581100"
  },
  {
    "text": "this is in the binary search um uh uh method that is found in the",
    "start": "581100",
    "end": "586860"
  },
  {
    "text": "collections kind of utility class is developed by Josh block Josh block was a student of John Bentley",
    "start": "586860",
    "end": "592380"
  },
  {
    "text": "and Josh is using you can see the three-way partition in there um Josh block is using the um the",
    "start": "592380",
    "end": "600180"
  },
  {
    "text": "approach that Bentley proved was correct and you know what this works just fine",
    "start": "600180",
    "end": "605399"
  },
  {
    "text": "until you use a very large array and this is the point very large arrays",
    "start": "605399",
    "end": "611760"
  },
  {
    "text": "did not really exist in the 1980s and 1990s this is why this bug was only found and reported in 2006",
    "start": "611760",
    "end": "620160"
  },
  {
    "text": "there was a problem here in any binary search no matter how you're doing it you're going to end up",
    "start": "620160",
    "end": "626040"
  },
  {
    "text": "with trying to establish the midpoint okay by researchers about searching",
    "start": "626040",
    "end": "631500"
  },
  {
    "text": "between midpoints and kind of halving the distance appropriately and the intuitive way that works with",
    "start": "631500",
    "end": "637980"
  },
  {
    "text": "integers is that you take the low point you've been searching the high point and",
    "start": "637980",
    "end": "643080"
  },
  {
    "text": "by when you find the midpoint you add the two together and you divide by two it's the arithmetic mean and that's fine",
    "start": "643080",
    "end": "649079"
  },
  {
    "text": "there's only one problem this is Java Java doesn't have integers it has INS INS are truncated they are not countably",
    "start": "649079",
    "end": "656279"
  },
  {
    "text": "infinite they are countably countable they account to be finite um if you have a large value that is low",
    "start": "656279",
    "end": "664079"
  },
  {
    "text": "and a high value that is low when you add the two together they won't make a very large number",
    "start": "664079",
    "end": "669540"
  },
  {
    "text": "they'll make a very negative number that's the point you simply didn't have arrays that were going to be this kind",
    "start": "669540",
    "end": "675600"
  },
  {
    "text": "of size you did not have a raise that we're going to have two gigs worth of",
    "start": "675600",
    "end": "680700"
  },
  {
    "text": "entries until you did so what we end up with is this",
    "start": "680700",
    "end": "686820"
  },
  {
    "text": "assumption this assumption was that inter ins behave like integers and they don't the one thing we know is that ints",
    "start": "686820",
    "end": "693180"
  },
  {
    "text": "are not integers they they actually follow a different form of arithmetic majority of the operations on the most",
    "start": "693180",
    "end": "699720"
  },
  {
    "text": "of the time behave like integers but they're not integers we fooled ourselves",
    "start": "699720",
    "end": "706560"
  },
  {
    "text": "and it's so easy to follow that habit the fix is is relatively simple what you",
    "start": "706560",
    "end": "712500"
  },
  {
    "text": "do is you find the distance between the low and the high you halve that and then you add that to the low point",
    "start": "712500",
    "end": "718079"
  },
  {
    "text": "and so we can see in the original proof that the assumption is here he is assuming that he is using integers but",
    "start": "718079",
    "end": "725579"
  },
  {
    "text": "he's not he's using integer division yeah on integers yeah except that that's not what's actually going on",
    "start": "725579",
    "end": "733160"
  },
  {
    "text": "we find other confrontations with the boundedness of numbers and again back to Infinity this is the USS yorkctor",
    "start": "734160",
    "end": "740399"
  },
  {
    "text": "uh it's a U.S Navy Cruiser since been decommissioned but in 1998",
    "start": "740399",
    "end": "746579"
  },
  {
    "text": "um it basically was dead in the water for about 48 Hours um solves the problem",
    "start": "746579",
    "end": "751860"
  },
  {
    "text": "um they uh they made a change um uh from a Unix to Windows installation",
    "start": "751860",
    "end": "758959"
  },
  {
    "text": "and sometimes people and this was originally published under the issue of like problems with Windows actually it was not a problem with Windows uh",
    "start": "759000",
    "end": "765120"
  },
  {
    "text": "specifically I'll get to that in a moment the source the problem on the Yorktown was the data contained a zero",
    "start": "765120",
    "end": "770220"
  },
  {
    "text": "where we shouldn't have done and when the software attempted to divide by zero which is a big no remember there are no",
    "start": "770220",
    "end": "775560"
  },
  {
    "text": "Infinities a buffer over on occur yeah big time crashing the entire network and causing the ship to lose control of its",
    "start": "775560",
    "end": "781560"
  },
  {
    "text": "propulsion system now divide by zero is something that it's not going to crash Windows",
    "start": "781560",
    "end": "787320"
  },
  {
    "text": "um most likely what this is given that this was networking software this is probably the driver and it runs in",
    "start": "787320",
    "end": "793560"
  },
  {
    "text": "kernel mode that is what caused the problem this was a custom driver and windows do not have sufficient",
    "start": "793560",
    "end": "799560"
  },
  {
    "text": "defenses with the driver for dealing with this so as Shakespeare observed",
    "start": "799560",
    "end": "805680"
  },
  {
    "text": "this is the monstrosity in love that the will is infinite and the execution is confined the desire is boundless in the",
    "start": "805680",
    "end": "812220"
  },
  {
    "text": "actor slave to limit there are no infinite representations",
    "start": "812220",
    "end": "817500"
  },
  {
    "start": "816000",
    "end": "1005000"
  },
  {
    "text": "coming to number five not every question has an answer okay it turns out we can ask more",
    "start": "817500",
    "end": "823920"
  },
  {
    "text": "questions that we can get answers to and to demonstrate this",
    "start": "823920",
    "end": "829040"
  },
  {
    "text": "um many years ago back before Facebook was busy destroying democracy um I",
    "start": "829139",
    "end": "835019"
  },
  {
    "text": "submitted a bug report to Facebook and I was told that my feedback would be used to improve Facebook that did not",
    "start": "835019",
    "end": "841440"
  },
  {
    "text": "apparently happen but thanks for taking the time to make a report how much time well that took me back quite a way okay",
    "start": "841440",
    "end": "848040"
  },
  {
    "text": "um 31st of December 1969. now that and that seems kind of familiar that's",
    "start": "848040",
    "end": "853079"
  },
  {
    "text": "really close to another number what we need to understand is that if you're a full stack development I",
    "start": "853079",
    "end": "859620"
  },
  {
    "text": "mean a real full stack development not a JavaScript developer who does front-end and talks to a database full stack the full stack if you're a full stack",
    "start": "859620",
    "end": "865440"
  },
  {
    "text": "developer you know how to program in C the full stack is really deep everything is ultimately built on sea at that level",
    "start": "865440",
    "end": "871320"
  },
  {
    "text": "and the time function in C um what does it measure what does it",
    "start": "871320",
    "end": "877500"
  },
  {
    "text": "respond in well on most platforms that use time at halftime the implementation is based on posix and the posix standard",
    "start": "877500",
    "end": "884040"
  },
  {
    "text": "says the time function shall return the value of the time in seconds since Epoch when is Epoch well this is really easy",
    "start": "884040",
    "end": "890339"
  },
  {
    "text": "to find it's actually quite a popular class of Errors um you can actually find that out what is time when it is zero",
    "start": "890339",
    "end": "895680"
  },
  {
    "text": "well it's the first of January 1970 okay stroke of midnight that leads you into",
    "start": "895680",
    "end": "901500"
  },
  {
    "text": "that and it's fairly unlikely that Intel we're Distributing drivers on the 1st of",
    "start": "901500",
    "end": "906779"
  },
  {
    "text": "January 1970 for Windows operating systems so this is a classic zero initialization",
    "start": "906779",
    "end": "913920"
  },
  {
    "text": "fault that is what I thought had gone on a zero initialization fault and then",
    "start": "913920",
    "end": "919320"
  },
  {
    "text": "a time zone shift I'm based in the UK Facebook is American therefore that's",
    "start": "919320",
    "end": "925079"
  },
  {
    "text": "West you know with negative time wise from where I am so therefore I assume a negative time adjustment so that would",
    "start": "925079",
    "end": "930540"
  },
  {
    "text": "give you zero initialization and then um back into 31st of December",
    "start": "930540",
    "end": "935639"
  },
  {
    "text": "but actually there is another explanation that in more recent years I've come to kind of considers more",
    "start": "935639",
    "end": "941519"
  },
  {
    "text": "plausible going back to the C standard",
    "start": "941519",
    "end": "948139"
  },
  {
    "text": "time the value of minus one is returned from time if the calendar",
    "start": "949199",
    "end": "954480"
  },
  {
    "text": "time is not available surely time is always available",
    "start": "954480",
    "end": "961560"
  },
  {
    "text": "and that's that's the shortfall here no it isn't time is a service it can fail",
    "start": "961560",
    "end": "966660"
  },
  {
    "text": "just like anything else when you involve time your application it's not some kind of global variable it's asynchronously",
    "start": "966660",
    "end": "972360"
  },
  {
    "text": "updated that you can call from a static method anywhere apis that do that are slightly misleading you're actually",
    "start": "972360",
    "end": "978180"
  },
  {
    "text": "coupling to an external dependency and like anything that involves that like",
    "start": "978180",
    "end": "983579"
  },
  {
    "text": "accessing it anything across the network as subject to failure it's not common",
    "start": "983579",
    "end": "989040"
  },
  {
    "text": "that you'll get that failure but that's not what we're discussing here we're not discussing frequency we're discussing possibility",
    "start": "989040",
    "end": "995060"
  },
  {
    "text": "and it is quite possible that -1 is returned and if minus one is returned",
    "start": "995060",
    "end": "1000620"
  },
  {
    "text": "then that will be interpreted as one second before midnight which will give you 1969. now another area of interest when we",
    "start": "1000620",
    "end": "1008420"
  },
  {
    "start": "1005000",
    "end": "1268000"
  },
  {
    "text": "talk about this stuff is is algorithms now you know algorithms for people who've done computer science degrees",
    "start": "1008420",
    "end": "1013940"
  },
  {
    "text": "that they've kind of done algorithms to death but what is it because the word is",
    "start": "1013940",
    "end": "1020060"
  },
  {
    "text": "widely misused these days in association and widely misused and over generalized as something intrinsically nefarious",
    "start": "1020060",
    "end": "1026360"
  },
  {
    "text": "related to machine learning it's nothing more complex and you know it's it's quite innocent it's a process or set of",
    "start": "1026360",
    "end": "1033260"
  },
  {
    "text": "rules to be followed in calculations or other problem-solving operations actually my computer",
    "start": "1033260",
    "end": "1038900"
  },
  {
    "text": "now to make make things a little more exciting if you are sick to death of computer science and sorting algorithms",
    "start": "1038900",
    "end": "1045260"
  },
  {
    "text": "let's have fun with esoteric algorithms I've been writing about esoteric algorithms on my blog post on and off",
    "start": "1045260",
    "end": "1050299"
  },
  {
    "text": "for a while um sleep sort drop sort and this one's permutation sort",
    "start": "1050299",
    "end": "1056000"
  },
  {
    "text": "um permutation sort the complexity of this thing it means grossly inefficient",
    "start": "1056000",
    "end": "1062419"
  },
  {
    "text": "it has factorial time complexity it's shocking we can consider it it's a",
    "start": "1062419",
    "end": "1068000"
  },
  {
    "text": "systematic but unoptimized search through the permutations of the input values until it finds the one Arrangement that is sorted so for 10",
    "start": "1068000",
    "end": "1074960"
  },
  {
    "text": "elements that potentially three million comparisons that it's going to perform",
    "start": "1074960",
    "end": "1080000"
  },
  {
    "text": "okay this is hugely inefficient it's also great fun it's it's also a useful",
    "start": "1080000",
    "end": "1085340"
  },
  {
    "text": "provocation it's not something you'd ever put into um production code except perhaps if",
    "start": "1085340",
    "end": "1090860"
  },
  {
    "text": "somebody says wait if you ask them hey what are your performance crimes oh we have no performance crimes hey use",
    "start": "1090860",
    "end": "1096559"
  },
  {
    "text": "permutation saw I bet you if you use permutation salt that person will discover they do indeed have performance",
    "start": "1096559",
    "end": "1102740"
  },
  {
    "text": "requirements it's just they didn't know what they were they didn't know the boundary demonstrate where the boundary is",
    "start": "1102740",
    "end": "1109580"
  },
  {
    "text": "so let's do this in groovy I need to work out whether or not something is sorted okay I've got a I've",
    "start": "1109580",
    "end": "1115280"
  },
  {
    "text": "got a simple predicate function here that figures out that's great now here's permutation salt permutation",
    "start": "1115280",
    "end": "1122419"
  },
  {
    "text": "saw I can just use the permutation generator um I use the permutation generator that",
    "start": "1122419",
    "end": "1127760"
  },
  {
    "text": "will systematically um return me an iterator permutation generator is iterable and",
    "start": "1127760",
    "end": "1134539"
  },
  {
    "text": "all I do is I just keep on going you know if it's sorted then I return the permutation otherwise keep on going so",
    "start": "1134539",
    "end": "1143600"
  },
  {
    "text": "there's kind of a it's kind of a thought here that you know surely there can be nothing worse than permutation saw in",
    "start": "1143600",
    "end": "1150380"
  },
  {
    "text": "terms of performance yeah don't be so sure um so I recently",
    "start": "1150380",
    "end": "1156380"
  },
  {
    "text": "um wrapped up on writing about bogus salt um but this was kind of interesting because bogosaur is not systematic bogus",
    "start": "1156380",
    "end": "1164780"
  },
  {
    "text": "thought takes a slightly different approach it just randomly shuffles not systematically it randomly shuffles and",
    "start": "1164780",
    "end": "1172100"
  },
  {
    "text": "checks whether or something so we might naively write it like this while it's not sorted then Shuffle the values",
    "start": "1172100",
    "end": "1178220"
  },
  {
    "text": "but that does give a free pass that the values are already sorted so we're going to do a shuffle first okay here's where",
    "start": "1178220",
    "end": "1184760"
  },
  {
    "text": "we definitely get terrible performance because this is kind of interesting that",
    "start": "1184760",
    "end": "1190520"
  },
  {
    "text": "we're just going to randomly Shuffle It Is it good no it's like throwing a deck of cards up into the air and",
    "start": "1190520",
    "end": "1196460"
  },
  {
    "text": "does it land is it sorted no okay throw it again now that kind of gives you a sense of the possibility um that this is",
    "start": "1196460",
    "end": "1203240"
  },
  {
    "text": "not the most efficient way to do things now we might have some of myself have some objections and concerns say well I",
    "start": "1203240",
    "end": "1209179"
  },
  {
    "text": "actually Kevin in technical you are systematically generating it because you're using pseudo random numbers rather real random numbers okay that",
    "start": "1209179",
    "end": "1215720"
  },
  {
    "text": "that's a fair objection but not one that is easily is not one sustained for very long we can have access to",
    "start": "1215720",
    "end": "1222679"
  },
  {
    "text": "um true random numbers through the entropy of your Hardware um and the way this works say in on Java",
    "start": "1222679",
    "end": "1230120"
  },
  {
    "text": "platform uh you secure random and that uses a pseudo random number generator",
    "start": "1230120",
    "end": "1236299"
  },
  {
    "text": "that is seeded off so there's one one time where we use a number that is truly random",
    "start": "1236299",
    "end": "1241640"
  },
  {
    "text": "um we're not doing this people often use time but time is not random um",
    "start": "1241640",
    "end": "1247520"
  },
  {
    "text": "well there are days it feels like that time is not random um but you're guaranteed that um uh that secure random",
    "start": "1247520",
    "end": "1254960"
  },
  {
    "text": "will give you something that is seeded in something that is as truly random as can be got from the hardware",
    "start": "1254960",
    "end": "1262360"
  },
  {
    "text": "but we have a kind of potential objection is this now an algorithm this is still",
    "start": "1262539",
    "end": "1268400"
  },
  {
    "start": "1268000",
    "end": "1461000"
  },
  {
    "text": "an algorithm so why would I question that because an algorithm is a specific procedure well",
    "start": "1268400",
    "end": "1275299"
  },
  {
    "text": "I've been very non-specific Randomness is not specific we've actually said there's a completely non-specific part",
    "start": "1275299",
    "end": "1281480"
  },
  {
    "text": "here but there is actually a deeper and more subtle objection procedure which always terminates is",
    "start": "1281480",
    "end": "1287600"
  },
  {
    "text": "called an algorithm it's not guaranteed to terminate this could actually genuinely never ever",
    "start": "1287600",
    "end": "1294559"
  },
  {
    "text": "terminate which is kind of interesting there is no guarantee that our sequence will the",
    "start": "1294559",
    "end": "1300440"
  },
  {
    "text": "sorted sequence it will appear of course the probability is so close to zero that",
    "start": "1300440",
    "end": "1305659"
  },
  {
    "text": "it probably isn't even actually representable in a floating Point number and every time I've ever implemented BOGO sort it has always terminated",
    "start": "1305659",
    "end": "1313220"
  },
  {
    "text": "um but then how would I wait for the end of the universe or Beyond um so here's a question how do we test",
    "start": "1313220",
    "end": "1319039"
  },
  {
    "text": "all this and this is kind of a demonstration of",
    "start": "1319039",
    "end": "1324559"
  },
  {
    "text": "um this is the origin of a very popular quote and structural program it's 50 years um 50 years ago this year it's published",
    "start": "1324559",
    "end": "1331460"
  },
  {
    "text": "dijkstra is very popular quote program testing can be used to show the presence of bugs but never to show their absence",
    "start": "1331460",
    "end": "1337640"
  },
  {
    "text": "um it kind of it does demonstrate that we have this challenge how do I demonstrate that this will always be correct",
    "start": "1337640",
    "end": "1344120"
  },
  {
    "text": "or rather will always terminate so here's a very simple example based test case",
    "start": "1344120",
    "end": "1349159"
  },
  {
    "text": "every time I've ever run it it certainly passes um I've taken a sequence of values I tell you what the expected ones are I",
    "start": "1349159",
    "end": "1354799"
  },
  {
    "text": "BOGO sort it and I test the values I get are the expected ones but how do I guarantee I want to be able",
    "start": "1354799",
    "end": "1361760"
  },
  {
    "text": "to guarantee that this terminates how can I do that well I can't do it in",
    "start": "1361760",
    "end": "1368720"
  },
  {
    "text": "the algorithm maybe I can maybe I can have the test kind of enforce that basically say you know fail the test if",
    "start": "1368720",
    "end": "1373880"
  },
  {
    "text": "it runs forever okay do we do it like this well that's not",
    "start": "1373880",
    "end": "1380120"
  },
  {
    "text": "going to work either because it turns out that there is no there is it's not just a case that there",
    "start": "1380120",
    "end": "1386480"
  },
  {
    "text": "is no end of time um it's not just the case that",
    "start": "1386480",
    "end": "1391820"
  },
  {
    "text": "um that we don't have that constant available to us in junit is that it",
    "start": "1391820",
    "end": "1397820"
  },
  {
    "text": "doesn't actually mean anything um you know if we reach the end of time then fail a test because the the",
    "start": "1397820",
    "end": "1404240"
  },
  {
    "text": "algorithm didn't terminate realize that doesn't really make a lot of sense so we just choose pragmatism a thousand",
    "start": "1404240",
    "end": "1411380"
  },
  {
    "text": "milliseconds yeah that runs typically within a second that's fine now what we've done though is we've been",
    "start": "1411380",
    "end": "1417799"
  },
  {
    "text": "pragmatic we've also demonstrated that another reason there are no Infinities",
    "start": "1417799",
    "end": "1423080"
  },
  {
    "text": "it's not just the physics doesn't uh tolerate them is that we our patients won't it also teaches us how to solve",
    "start": "1423080",
    "end": "1428419"
  },
  {
    "text": "things like the halting problem that is related to termination we can fix that very easily by putting",
    "start": "1428419",
    "end": "1433700"
  },
  {
    "text": "timeouts in and indeed that is how we address these problems where we are not guaranteed to ever receive an answer",
    "start": "1433700",
    "end": "1438980"
  },
  {
    "text": "what we do is we exchange the non-determinism of not knowing",
    "start": "1438980",
    "end": "1444080"
  },
  {
    "text": "whether we receive an answer for the non-determinism of we receive an answer or we get told it timed out so in other",
    "start": "1444080",
    "end": "1452059"
  },
  {
    "text": "words we replace we offer certainty we offer certainty and time but we trade up a certainty and result",
    "start": "1452059",
    "end": "1458240"
  },
  {
    "text": "and that's why timeouts exist now related is this is another",
    "start": "1458240",
    "end": "1464059"
  },
  {
    "start": "1461000",
    "end": "1916000"
  },
  {
    "text": "impossibility every truth can be established where it applies",
    "start": "1464059",
    "end": "1469059"
  },
  {
    "text": "what we're saying here is basically it's related to girdles incompleteness theorems",
    "start": "1469700",
    "end": "1476740"
  },
  {
    "text": "Adrian Collier did a really nice summary of this in a piece on fairness in",
    "start": "1477320",
    "end": "1482840"
  },
  {
    "text": "machine learning and he highlights that come with a number of other things at the beginning of the 20th century there",
    "start": "1482840",
    "end": "1488780"
  },
  {
    "text": "was this optimism that physics and Mathematics will be completely low and particularly in the",
    "start": "1488780",
    "end": "1495919"
  },
  {
    "text": "light of the proof from virtual muscle and Alpha North Whitehead in proclipping Mathematica um they they had the goal of providing a",
    "start": "1495919",
    "end": "1502580"
  },
  {
    "text": "solid foundation for all of mathematics um 20 years later Kirk girdle",
    "start": "1502580",
    "end": "1508039"
  },
  {
    "text": "shattered the dream showing for any consistent axiomatic system there will always be theorems that cannot be proven",
    "start": "1508039",
    "end": "1513260"
  },
  {
    "text": "within that system within that system in other words to prove those symptoms you have to step outside that in other words",
    "start": "1513260",
    "end": "1519020"
  },
  {
    "text": "there are statements that are true that cannot be proven to be true within that context",
    "start": "1519020",
    "end": "1524120"
  },
  {
    "text": "summarize differently um um girdle Asher bark perhaps a little more formally",
    "start": "1524120",
    "end": "1529340"
  },
  {
    "text": "all consistent axiomatic formulations of number Theory include undecidable propositions now many people might say",
    "start": "1529340",
    "end": "1534919"
  },
  {
    "text": "well that's great Kevin fine undecidable propositions fine axiomatic formulations",
    "start": "1534919",
    "end": "1540380"
  },
  {
    "text": "and number Theory fine but I'm dealing with code here okay turns out guess what code is",
    "start": "1540380",
    "end": "1547299"
  },
  {
    "text": "equivalent to such a formulation so yes everything that applies here applies to",
    "start": "1547299",
    "end": "1554000"
  },
  {
    "text": "our code there are undecidable propositions in code dependent on the context so let me demonstrate that",
    "start": "1554000",
    "end": "1560600"
  },
  {
    "text": "um let's try and determine how long a piece of string is to be precise let's measure the length of a string in C",
    "start": "1560600",
    "end": "1566779"
  },
  {
    "text": "Okay so standard function for this at C is stralent back in the days before we had",
    "start": "1566779",
    "end": "1572299"
  },
  {
    "text": "vowels um and sufficiently long identifiers",
    "start": "1572299",
    "end": "1577299"
  },
  {
    "text": "and what we've got size T that is a sign that is an integer type an unsigned integer type that is used for sizes and",
    "start": "1577400",
    "end": "1583760"
  },
  {
    "text": "child stars so this is a pointer to the beginning of the sequence of of characters okay and a string in C is",
    "start": "1583760",
    "end": "1591320"
  },
  {
    "text": "delimited by a null when we reach that null we are done we have measured the whole length of the string",
    "start": "1591320",
    "end": "1597080"
  },
  {
    "text": "so we go ahead we measure it we set it up um we start with our result it's zero",
    "start": "1597080",
    "end": "1603620"
  },
  {
    "text": "while um the nth position from s does not equal null character increment the count",
    "start": "1603620",
    "end": "1610400"
  },
  {
    "text": "return the count we are done this implementation is actually very similar to the one that you'll find in Kearney",
    "start": "1610400",
    "end": "1616279"
  },
  {
    "text": "and Richie's C programming language and retained most of the naming conventions from there",
    "start": "1616279",
    "end": "1622940"
  },
  {
    "text": "what truths can we establish what must be necessary for this to work well",
    "start": "1622940",
    "end": "1628460"
  },
  {
    "text": "here's one at that point it cannot be null see I can assert that and here's another one",
    "start": "1628460",
    "end": "1636399"
  },
  {
    "text": "he thought this to work in a way that is defined there must exist an N such that",
    "start": "1636799",
    "end": "1641900"
  },
  {
    "text": "there is a null and that every point between the beginning and that position n are valid and and are well defined in",
    "start": "1641900",
    "end": "1650720"
  },
  {
    "text": "the context of C obviously not wandering across garbage memory and technically stuff that is undefined um and then accessible",
    "start": "1650720",
    "end": "1657919"
  },
  {
    "text": "you will notice that this is in Gray and also uses a bunch of symbols that are not native to C that is because you",
    "start": "1657919",
    "end": "1663559"
  },
  {
    "text": "cannot actually write this in C it is not actually something you can assert on it is not possible within the context of",
    "start": "1663559",
    "end": "1670340"
  },
  {
    "text": "Australian to prove that it has um that it can uh behave correctly",
    "start": "1670340",
    "end": "1678140"
  },
  {
    "text": "so that's kind of a kind of simple way of looking at it and we can actually see this in practice we can change the",
    "start": "1678140",
    "end": "1683720"
  },
  {
    "text": "context I can demonstrate by changing context stepping outside Sterling into a test case here",
    "start": "1683720",
    "end": "1689419"
  },
  {
    "text": "and here I'm going to present it with a valid string be excellent to each other um s is it I'm going to print out how",
    "start": "1689419",
    "end": "1695960"
  },
  {
    "text": "long it is I'm going to print a string and how long it is and here we go I'll be asking to each other 26 characters",
    "start": "1695960",
    "end": "1701600"
  },
  {
    "text": "great um I can demonstrate the correctness of that just by inspection and stepping",
    "start": "1701600",
    "end": "1706940"
  },
  {
    "text": "outside and by execution now here we're not going to provide enough space I'm able to provide five characters in space you know there's not enough space for",
    "start": "1706940",
    "end": "1713059"
  },
  {
    "text": "the null and actually c will allow you to write it in this form we're not going to get the knot when I",
    "start": "1713059",
    "end": "1718640"
  },
  {
    "text": "run it actually there's a reasonable chance it will show five because memory may be null but the fact that it did",
    "start": "1718640",
    "end": "1723860"
  },
  {
    "text": "work is not a guarantee that it should work I mean equally well you could be cast into the void heading towards the",
    "start": "1723860",
    "end": "1729500"
  },
  {
    "text": "Galaxy m87 . similarly there is the idea that actually maybe the pointer itself is",
    "start": "1729500",
    "end": "1735200"
  },
  {
    "text": "uninitialized well it's just garbage and there you are finding it inside a black hole",
    "start": "1735200",
    "end": "1740240"
  },
  {
    "text": "in m87 so the point there is not it's not defined and there is there is no way",
    "start": "1740240",
    "end": "1745340"
  },
  {
    "text": "to demonstrate the correctness of this inside the context of Australia why I can do it by inspection with static",
    "start": "1745340",
    "end": "1751460"
  },
  {
    "text": "analysis outside that now why is this relevant um because a lot of people work in",
    "start": "1751460",
    "end": "1757640"
  },
  {
    "text": "managed languages and they're thinking well I don't need to worry about that kind of undefined Behavior well there are cases you can replicate or you can",
    "start": "1757640",
    "end": "1763159"
  },
  {
    "text": "demonstrate that kind of girdle problem um in other cases but actually just always remember that in any large system",
    "start": "1763159",
    "end": "1769039"
  },
  {
    "text": "there is always going to be an element that is touching the void in this respect",
    "start": "1769039",
    "end": "1775700"
  },
  {
    "text": "um and in this uh piece by Thomas Ronson in 97 things every Java programmer should know that",
    "start": "1775700",
    "end": "1782000"
  },
  {
    "text": "Trisha G and I edited a couple of years back um Thomas looks through he says well how",
    "start": "1782000",
    "end": "1787760"
  },
  {
    "text": "do I how can I show that something uh you know how can I crash my jvm how can I crash my incredibly well-managed and",
    "start": "1787760",
    "end": "1794779"
  },
  {
    "text": "my managed uh environment and in most cases it's by stepping outside though it's the stepping outside context as he",
    "start": "1794779",
    "end": "1801559"
  },
  {
    "text": "says write some native code all the syntax will see all the safety you'll see um",
    "start": "1801559",
    "end": "1807980"
  },
  {
    "text": "but this is bigger than just that as Adrian observes uh one premise of",
    "start": "1807980",
    "end": "1813500"
  },
  {
    "text": "many models of fairness in machine learning is that you can measure that must prove fairness and machine learning",
    "start": "1813500",
    "end": "1819799"
  },
  {
    "text": "um a machine learning model from within the system from the properties the model itself or perhaps the data it's trained",
    "start": "1819799",
    "end": "1825200"
  },
  {
    "text": "on how do we know we can't to show a machine learning model is fair you have to step outside you need information",
    "start": "1825200",
    "end": "1831080"
  },
  {
    "text": "from outside the system and this is also important for many of the metrics that we fool ourselves with",
    "start": "1831080",
    "end": "1838299"
  },
  {
    "text": "um this is a wonderful demonstration of this um what you're looking at is 99 second hand",
    "start": "1838399",
    "end": "1845179"
  },
  {
    "text": "um uh phones um that are running Google Maps and in uh 2020 the first wave of",
    "start": "1845179",
    "end": "1853460"
  },
  {
    "text": "lockdowns Simon Becker in Berlin um wandered around Berlin and created",
    "start": "1853460",
    "end": "1859940"
  },
  {
    "text": "virtual traffic jams um now notice I'm using the word virtual traffic jam Justice is reported there on",
    "start": "1859940",
    "end": "1866299"
  },
  {
    "text": "his website virtual traffic jam because that's not a traffic jam is it Google Maps can't tell you where there's",
    "start": "1866299",
    "end": "1872059"
  },
  {
    "text": "a traffic jam it's not possible for Google Maps to do that well it's possible for it to do is to",
    "start": "1872059",
    "end": "1879020"
  },
  {
    "text": "try and establish a correlate between traffic jams and the presence of phones",
    "start": "1879020",
    "end": "1887840"
  },
  {
    "text": "and therefore to determine ah you know what",
    "start": "1887840",
    "end": "1893299"
  },
  {
    "text": "there's a lot of phones moving very slowly and they're all in navigation map there's a lot of fans moving slowly and",
    "start": "1893299",
    "end": "1898580"
  },
  {
    "text": "um yeah therefore that that correlates with um that correlates with a traffic jam",
    "start": "1898580",
    "end": "1904580"
  },
  {
    "text": "but notice I'm using the word correlation it's not causal so what they're doing is they're doing",
    "start": "1904580",
    "end": "1909740"
  },
  {
    "text": "that you know a lot of the time it's going to show you where the traffic jams are but some of the time it's not and this",
    "start": "1909740",
    "end": "1915980"
  },
  {
    "text": "is a reminder how many people are measuring engagement I know what engagement is my dictionary",
    "start": "1915980",
    "end": "1921260"
  },
  {
    "start": "1916000",
    "end": "2024000"
  },
  {
    "text": "knows what an engagement engagement is it's the same to be engaged it's emotional involvement or commitment is",
    "start": "1921260",
    "end": "1927200"
  },
  {
    "text": "that what people are measuring you've got whole marketing departments trying to nudge up an engagement value",
    "start": "1927200",
    "end": "1934279"
  },
  {
    "text": "they're not measuring engagement they need to stop using that word we don't know whether or not people are engaged",
    "start": "1934279",
    "end": "1939919"
  },
  {
    "text": "found the correlations are actually far weaker this is engagement",
    "start": "1939919",
    "end": "1945620"
  },
  {
    "text": "we don't know how long people are spending um actually looking at a screen you can",
    "start": "1945620",
    "end": "1951140"
  },
  {
    "text": "tell when somebody's moved off to another screen but you don't know what they were doing before that unless you're doing eyeball tracking",
    "start": "1951140",
    "end": "1957279"
  },
  {
    "text": "you know that's a security issue let's not let's not worry about that but the point there is I have this I had",
    "start": "1957679",
    "end": "1962960"
  },
  {
    "text": "this exactly yesterday I was on a web page that I was on for a few seconds and I was going to go to another web page but the doorbell went I",
    "start": "1962960",
    "end": "1970220"
  },
  {
    "text": "received a delivery so for two minutes I was not on my screen",
    "start": "1970220",
    "end": "1975919"
  },
  {
    "text": "there is an engagement statistic engagement statistic somewhere that tells people that I was on that page for two minutes and 30 seconds now I wasn't",
    "start": "1975919",
    "end": "1982700"
  },
  {
    "text": "I was on that page for 30 seconds the minute I got back down I moved on to another page people are measuring clicks and shares",
    "start": "1982700",
    "end": "1989120"
  },
  {
    "text": "and that's what they need to understand they're not measuring engagement engagement should always appear in",
    "start": "1989120",
    "end": "1994460"
  },
  {
    "text": "quotes we must be careful not to confuse data with the abstractions we use to analyze them we do not always know the answers to the",
    "start": "1994460",
    "end": "2001240"
  },
  {
    "text": "questions in the context in which they are answered we do not know that that is a traffic jam we do not know that that",
    "start": "2001240",
    "end": "2007419"
  },
  {
    "text": "is engagement we do not know whether or not this is actually a valid call to a",
    "start": "2007419",
    "end": "2013179"
  },
  {
    "text": "particular method in a particular context and we cannot necessarily improve this machine Learning System is fair by using all the assumptions that",
    "start": "2013179",
    "end": "2019840"
  },
  {
    "text": "we put in to that machine Learning System we need to step outside that to demonstrate that see the bigger picture",
    "start": "2019840",
    "end": "2025419"
  },
  {
    "start": "2024000",
    "end": "2337000"
  },
  {
    "text": "now when we look to the bigger picture let's also look to the Future here is something that's impossible the",
    "start": "2025419",
    "end": "2030700"
  },
  {
    "text": "future is knowable before it happens now that kind of seems kind of obvious but we trip over that",
    "start": "2030700",
    "end": "2037480"
  },
  {
    "text": "often we do so because we don't appreciate the degree to which software development is",
    "start": "2037480",
    "end": "2043360"
  },
  {
    "text": "actually an exercise and applied philosophy it's about epistemology it is",
    "start": "2043360",
    "end": "2049118"
  },
  {
    "text": "about the nature of knowledge as Grace Hopper observed to me programming is more than an important Practical Art it",
    "start": "2049119",
    "end": "2056260"
  },
  {
    "text": "is also a gigantic undertaking in the foundations of knowledge in essence a code base is a codification of knowledge",
    "start": "2056260",
    "end": "2062260"
  },
  {
    "text": "is codification of the knowledge that we have about the problem domain and the solution domain bound together and",
    "start": "2062260",
    "end": "2067960"
  },
  {
    "text": "expressed in a way that is formally executable it's a form specification of this knowledge",
    "start": "2067960",
    "end": "2074138"
  },
  {
    "text": "and so therefore knowledge is the heart of everything that we do but that means we have to have good",
    "start": "2074139",
    "end": "2079179"
  },
  {
    "text": "models of what we know and what we don't know likewise what we what correlates first is what is causing what we know",
    "start": "2079179",
    "end": "2086020"
  },
  {
    "text": "versus what we don't know there are things that we know we know there are things that we know that we don't know",
    "start": "2086020",
    "end": "2091179"
  },
  {
    "text": "then it starts getting a little more exciting there are things we don't know we don't know these are often assumptions",
    "start": "2091179",
    "end": "2097599"
  },
  {
    "text": "you know those are the things that people that are hidden until you until you have them contradicted oh I had",
    "start": "2097599",
    "end": "2103359"
  },
  {
    "text": "assumed that at that moment you discovered you had an assumption you had the Assumption all along but if anybody had asked you before what are your",
    "start": "2103359",
    "end": "2109000"
  },
  {
    "text": "assumptions that thing whatever it was that was contradicted in future was",
    "start": "2109000",
    "end": "2114520"
  },
  {
    "text": "was not known to you you did not know you had the assumption and then",
    "start": "2114520",
    "end": "2119980"
  },
  {
    "text": "you cannot find out you have no process for knowing these things are unknowable until they",
    "start": "2119980",
    "end": "2126700"
  },
  {
    "text": "happen unknowable unknowns are the challenge here the whole problem for example",
    "start": "2126700",
    "end": "2132940"
  },
  {
    "text": "um I cannot know whether or not something is going to terminate until it doesn't terminate but hang on I don't have a process for that oh yeah so I",
    "start": "2132940",
    "end": "2140619"
  },
  {
    "text": "can't tell that future we have this observation that prediction is very difficult especially about the",
    "start": "2140619",
    "end": "2146200"
  },
  {
    "text": "future it's probable that Niels Bohr actually said this but there are other contenders",
    "start": "2146200",
    "end": "2151720"
  },
  {
    "text": "and I find that interesting and fascinating because this is in the past this quote was made",
    "start": "2151720",
    "end": "2157900"
  },
  {
    "text": "and we don't know who said that if we don't know this about the past how on Earth are we going to be able to know",
    "start": "2157900",
    "end": "2163060"
  },
  {
    "text": "about the future now we try and tackle a future in various ways well here's a road map in",
    "start": "2163060",
    "end": "2168940"
  },
  {
    "text": "fact this is a template for roadblock you can go online you can go to Google and find out PowerPoint templates for",
    "start": "2168940",
    "end": "2174160"
  },
  {
    "text": "roadmaps there's there's many of them and lots of them use Road images but eventually they suffer from one",
    "start": "2174160",
    "end": "2180460"
  },
  {
    "text": "problem I don't have a problem with a robot medical I have a problem with the fact that people don't use it correctly let me show you a real road map",
    "start": "2180460",
    "end": "2186520"
  },
  {
    "text": "um this is Bristol this is where I live there's more than one road and that that's kind of important",
    "start": "2186520",
    "end": "2192940"
  },
  {
    "text": "because that's the point of a road map if I only have one road I don't really need a rope people are misusing the metaphor the",
    "start": "2192940",
    "end": "2199540"
  },
  {
    "text": "metaphor is much more exciting when you show the different branches and possibilities because if you don't show those it means apparently you know how",
    "start": "2199540",
    "end": "2205839"
  },
  {
    "text": "to predict the future I'm guessing that this particular PowerPoint template",
    "start": "2205839",
    "end": "2211300"
  },
  {
    "text": "dates back to 2018. of particular interest here is 2020.",
    "start": "2211300",
    "end": "2216880"
  },
  {
    "text": "somebody here had a road map that included 2020. how many of you people out there have roadmaps for 2020 back in",
    "start": "2216880",
    "end": "2222880"
  },
  {
    "text": "2018 and how many of them said Global pandemic changes everything about the nature of our work and how we work and",
    "start": "2222880",
    "end": "2229240"
  },
  {
    "text": "how our clients interact with us and how Global markets work and even the business of going to the shops I'm pretty sure that nobody had that down",
    "start": "2229240",
    "end": "2235480"
  },
  {
    "text": "that was not knowable until it happened but it doesn't take a pandemic to",
    "start": "2235480",
    "end": "2240940"
  },
  {
    "text": "highlight this people are doing this making this mistake all the time they I hear often",
    "start": "2240940",
    "end": "2247180"
  },
  {
    "text": "when people got you know they're talking about the requirements they talk about prioritizing my business value",
    "start": "2247180",
    "end": "2253300"
  },
  {
    "text": "that sounds great sounds very positive I mean we're trying to focus on the business doesn't anyone problem",
    "start": "2253300",
    "end": "2259540"
  },
  {
    "text": "um you can't do it and I'm not let's be very clear I'm not saying you shouldn't do it I'm saying you can't do it that's",
    "start": "2259540",
    "end": "2264820"
  },
  {
    "text": "a very different statement you can't do it because it's impossible you don't know what the business value",
    "start": "2264820",
    "end": "2269920"
  },
  {
    "text": "of something is unless you travel into the future and then travel back it's the traveling",
    "start": "2269920",
    "end": "2276220"
  },
  {
    "text": "back bit that's hard we're traveling into the future all of the time it's the traveling back that's the hard part",
    "start": "2276220",
    "end": "2281800"
  },
  {
    "text": "that's why you can't prioritize by business value you are always using an estimate it's prioritizing by estimated",
    "start": "2281800",
    "end": "2288640"
  },
  {
    "text": "business value now you might say oh Kevin you're just picking on Words it's just semantics",
    "start": "2288640",
    "end": "2293920"
  },
  {
    "text": "you're right it is just semantics semantics is meaning if you don't say what you mean how are people supposed to",
    "start": "2293920",
    "end": "2299920"
  },
  {
    "text": "know if you have come if you are conf if you're on the business of confusing estimates with actuals we need to have a",
    "start": "2299920",
    "end": "2306820"
  },
  {
    "text": "serious conversation because you cannot prioritize my business value you can prioritize my estimated business value and that's a",
    "start": "2306820",
    "end": "2313540"
  },
  {
    "text": "little more interesting I'm asking you to change the way you work as as the great grasshopper set",
    "start": "2313540",
    "end": "2319660"
  },
  {
    "text": "humans are allergic to change they'd love to say we've always done it that way you know I try to fight that so I",
    "start": "2319660",
    "end": "2325660"
  },
  {
    "text": "have a clock on my wall that runs counterclockwise it's also by the way why I have Grace Hopper is the reason I",
    "start": "2325660",
    "end": "2331180"
  },
  {
    "text": "have a clock on my wall that does this and it's good for messing with people's minds but it breaks an assumption",
    "start": "2331180",
    "end": "2338260"
  },
  {
    "start": "2337000",
    "end": "2367000"
  },
  {
    "text": "now another impossibility the people often don't realize they're making but they often do it when they're talking",
    "start": "2338260",
    "end": "2343660"
  },
  {
    "text": "about data consistency and indeed many things about distributed systems when people sort of assume oh we",
    "start": "2343660",
    "end": "2350500"
  },
  {
    "text": "want you know we want the markets in Hong Kong we want the data that we have um here in Europe to be the same as the",
    "start": "2350500",
    "end": "2355780"
  },
  {
    "text": "data that we have in Hong Kong and Singapore within a few milliseconds not realizing that the speed of light means",
    "start": "2355780",
    "end": "2361960"
  },
  {
    "text": "that that's actually not going to be possible we have limits to what is knowable within a distributed system now Leslie",
    "start": "2361960",
    "end": "2368440"
  },
  {
    "start": "2367000",
    "end": "2412000"
  },
  {
    "text": "Lamport kind of captured the essence of what it says to be ahead to have a distributed system many years ago and",
    "start": "2368440",
    "end": "2374680"
  },
  {
    "text": "it's a distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable",
    "start": "2374680",
    "end": "2380980"
  },
  {
    "text": "it reminds us of the physicality and limitations of various systems",
    "start": "2380980",
    "end": "2388320"
  },
  {
    "text": "but it goes further than just a little bit of humor formulated",
    "start": "2388540",
    "end": "2393720"
  },
  {
    "text": "Eric Brewer formulated this originally was a principal um eventually got proven it's better",
    "start": "2393720",
    "end": "2399820"
  },
  {
    "text": "known these days as the cap theorem and it basically identifies three things",
    "start": "2399820",
    "end": "2404859"
  },
  {
    "text": "three qualities three behaviors that we are interested in consistency availability and",
    "start": "2404859",
    "end": "2411339"
  },
  {
    "text": "partition tolerance consistency it's about the data consistency is the idea",
    "start": "2411339",
    "end": "2416800"
  },
  {
    "start": "2412000",
    "end": "2512000"
  },
  {
    "text": "that every time you request a value for a piece of data you will receive the",
    "start": "2416800",
    "end": "2422619"
  },
  {
    "text": "most recent value or you will receive an error we all receive the same answer or we receive I'm sorry that wasn't",
    "start": "2422619",
    "end": "2427720"
  },
  {
    "text": "available right now availability is",
    "start": "2427720",
    "end": "2433540"
  },
  {
    "text": "every request for such data will receive an answer but you're not",
    "start": "2433540",
    "end": "2439240"
  },
  {
    "text": "guaranteed it's the latest answer partition tolerance partition is a fancy way of saying you know I have one I",
    "start": "2439240",
    "end": "2445960"
  },
  {
    "text": "started with one network now I've got two in other words um basically message loss for whatever course",
    "start": "2445960",
    "end": "2453099"
  },
  {
    "text": "and the point there is you can have two out of three of these but never all three and that was proven",
    "start": "2453099",
    "end": "2458800"
  },
  {
    "text": "20 years ago you can have things be consistent I'm going to give you the right answer or I'm going to give you an",
    "start": "2458800",
    "end": "2465160"
  },
  {
    "text": "error an error status in the event of um any kind of failures I can always",
    "start": "2465160",
    "end": "2471339"
  },
  {
    "text": "give you an answer I can give you the last cached version in the event of failure there's also the interesting",
    "start": "2471339",
    "end": "2477579"
  },
  {
    "text": "case that actually I can demonstrate you can have the right answer and everybody else has",
    "start": "2477579",
    "end": "2483820"
  },
  {
    "text": "the right answer for once but there is no tolerance for failure now that's actually the limiting case of you know",
    "start": "2483820",
    "end": "2490180"
  },
  {
    "text": "history it is viable when you're running in a single process if you like the cat theorem is kind of a",
    "start": "2490180",
    "end": "2496300"
  },
  {
    "text": "Heisenberg's uncertainty principle for distribution um it's sort of captured nicely",
    "start": "2496300",
    "end": "2502660"
  },
  {
    "text": "um and then all of these things are captured at a sort of level by Douglas Adams we demand rigidly defined areas of",
    "start": "2502660",
    "end": "2508420"
  },
  {
    "text": "doubt and uncertainty and indeed we have this but we need to understand where these are",
    "start": "2508420",
    "end": "2513460"
  },
  {
    "start": "2512000",
    "end": "2577000"
  },
  {
    "text": "uh because there are a number of cases where we find that we are being given inconsistent things",
    "start": "2513460",
    "end": "2520240"
  },
  {
    "text": "and there's no reason for it I you often get this you know sort of you you'll see something that says you have a message",
    "start": "2520240",
    "end": "2526180"
  },
  {
    "text": "that says you have four messages in your inbox or you have four things in your um",
    "start": "2526180",
    "end": "2531700"
  },
  {
    "text": "uh scheduled post queue or you have whatever it is you have four of them and then you look at the screen it shows",
    "start": "2531700",
    "end": "2537700"
  },
  {
    "text": "five well clearly one of these numbers is wrong and it's clearly the four there",
    "start": "2537700",
    "end": "2543040"
  },
  {
    "text": "are clearly five and all you have to do is take the length of that now how do we end up with such a mess because that's",
    "start": "2543040",
    "end": "2548800"
  },
  {
    "text": "nothing to do with distribution or eventual consistency that's to do with the fact that we've got front ends in a",
    "start": "2548800",
    "end": "2554260"
  },
  {
    "text": "front end you are in a you're in a system that can be consistent and this is maybe a side effect of",
    "start": "2554260",
    "end": "2560320"
  },
  {
    "text": "people using micro front ends or whatever but this is nothing to do with the limitations of a distributed system",
    "start": "2560320",
    "end": "2566320"
  },
  {
    "text": "it's it's it's just limitations of poorly designed client side uh code and this is this bit is solvable",
    "start": "2566320",
    "end": "2574180"
  },
  {
    "text": "so the last point that I want to um focus on is technical debt but it's actually",
    "start": "2574180",
    "end": "2580359"
  },
  {
    "start": "2577000",
    "end": "2702000"
  },
  {
    "text": "quantifiable as financial debt people often do this it's not possible it's not just that it's not right I mean",
    "start": "2580359",
    "end": "2587859"
  },
  {
    "text": "it's also not right in other words it's intent it's actually also not possible",
    "start": "2587859",
    "end": "2593079"
  },
  {
    "text": "we understand that systems can become more complex through compromises through the nature of time",
    "start": "2593079",
    "end": "2599200"
  },
  {
    "text": "um Maya Layman captures elegantly enough in 1980 as an evolving program has",
    "start": "2599200",
    "end": "2604240"
  },
  {
    "text": "continually changed its complexity reflecting deteriorating structure increases unless work is done to",
    "start": "2604240",
    "end": "2609760"
  },
  {
    "text": "maintain or reduce it there are lots of different ways of talking about our systems and the",
    "start": "2609760",
    "end": "2614859"
  },
  {
    "text": "quality of the abstract nature is we use different metaphors and the metaphor here",
    "start": "2614859",
    "end": "2620140"
  },
  {
    "text": "the master file I helped popularize um came originally from war coming technical debt is a wonderful metaphor",
    "start": "2620140",
    "end": "2626079"
  },
  {
    "text": "developed by Ward Cunningham to help us think about this problem and Ward came up with it in 1992 he didn't",
    "start": "2626079",
    "end": "2632560"
  },
  {
    "text": "actually call it technical debt he just said we can imagine this is basically like Dad um and there's a parallel here like",
    "start": "2632560",
    "end": "2640240"
  },
  {
    "text": "financial debt the technical debt incurs interest payments which come in the form of the extra effort that we have to do",
    "start": "2640240",
    "end": "2645760"
  },
  {
    "text": "in future development because of the quick and dirty design choice or it doesn't have to be quick and dirty it can be quite appropriate but it's",
    "start": "2645760",
    "end": "2652119"
  },
  {
    "text": "limited by uh the extent of our knowledge but we need to remind ourselves",
    "start": "2652119",
    "end": "2658660"
  },
  {
    "text": "It's a Wonderful metaphor it's a metaphor I find people taking it a little bit too",
    "start": "2658660",
    "end": "2663940"
  },
  {
    "text": "literally I find myself cautioning against the",
    "start": "2663940",
    "end": "2669099"
  },
  {
    "text": "Kashmir of treating the technical debt metaphor literally and numerically converted co-quality into a currency value on a dashboard oh that's a",
    "start": "2669099",
    "end": "2675940"
  },
  {
    "text": "disastrous thing to do it's like the bad stats we talked about earlier",
    "start": "2675940",
    "end": "2681359"
  },
  {
    "text": "first of all you cannot know what that value is financially let's be",
    "start": "2681760",
    "end": "2687280"
  },
  {
    "text": "very clear if the best you're only ever going to end up with an estimate of the debt but there are reasons even this is",
    "start": "2687280",
    "end": "2692920"
  },
  {
    "text": "not the right way of looking at it because it is based on a fallacy and a misunderstanding",
    "start": "2692920",
    "end": "2699460"
  },
  {
    "text": "I mean if you can find the conversion rate well done for you and I have had people tell me oh no no",
    "start": "2699460",
    "end": "2704920"
  },
  {
    "text": "we we do that yeah if you've got a fat if you've got a currency value and there are tools that will give you a currency value",
    "start": "2704920",
    "end": "2710859"
  },
  {
    "text": "honestly you know um there are people that will you can pay them money and",
    "start": "2710859",
    "end": "2715960"
  },
  {
    "text": "they will tell you what your future is big don't be taken in by this it's nonsense",
    "start": "2715960",
    "end": "2722260"
  },
  {
    "text": "um it's bad science answered based on a deep misunderstanding and when people have said oh no we have an estimate and",
    "start": "2722260",
    "end": "2729220"
  },
  {
    "text": "they've used the word estimate well done then we have an estimate and it's not in currency values it's in hours hours of",
    "start": "2729220",
    "end": "2735700"
  },
  {
    "text": "work in order to repay that debt",
    "start": "2735700",
    "end": "2742359"
  },
  {
    "text": "they've made a slight category error there technical debt is their human technical",
    "start": "2742359",
    "end": "2748540"
  },
  {
    "text": "debt is the cost of repayment debt problem is that is not the cost of repaying the debt technical debt is the cost of owning the",
    "start": "2748540",
    "end": "2754780"
  },
  {
    "text": "debt and that was what all of the wording that Martin had and Ward added and many",
    "start": "2754780",
    "end": "2761859"
  },
  {
    "text": "other people around it but have been lost in the kind of like the the kind of the",
    "start": "2761859",
    "end": "2766900"
  },
  {
    "text": "the excitement of hey maybe we can use a number for this be careful the message of the technical debt",
    "start": "2766900",
    "end": "2773560"
  },
  {
    "text": "metaphor is not simply a measure of the specific work needed to repay the debt it is the additional time and effort",
    "start": "2773560",
    "end": "2780880"
  },
  {
    "text": "added to all the past present and future work that comes from having the debt in the first place the burden of debt is",
    "start": "2780880",
    "end": "2787599"
  },
  {
    "text": "not momentary it's not now it is across all of these spans of Time how much did",
    "start": "2787599",
    "end": "2792760"
  },
  {
    "text": "it cost you in the past and then again the Future How much would it cost you in the future and that value may be",
    "start": "2792760",
    "end": "2798640"
  },
  {
    "text": "large or it may indeed turn out to be zero something you can write off",
    "start": "2798640",
    "end": "2804160"
  },
  {
    "text": "which brings us to the end of six impossible things these are not the only impossible things there are other impossible things that I have hinted at",
    "start": "2804160",
    "end": "2810520"
  },
  {
    "text": "I have not fully explored the whole thing problem I have not fully explored the question of the speed of light limiting certain behaviors in",
    "start": "2810520",
    "end": "2816640"
  },
  {
    "text": "distributed systems um and so on but it should give you a taster of this idea that sometimes we",
    "start": "2816640",
    "end": "2823000"
  },
  {
    "text": "need to step outside a little bit and look for things um and look at things from a different",
    "start": "2823000",
    "end": "2828040"
  },
  {
    "text": "angle okay that may spur on Innovation it may as our may allow us to be",
    "start": "2828040",
    "end": "2833800"
  },
  {
    "text": "creative but it may also give us creative questions thank you very much for your time",
    "start": "2833800",
    "end": "2840000"
  },
  {
    "text": "[Music] thank you",
    "start": "2842460",
    "end": "2849119"
  }
]