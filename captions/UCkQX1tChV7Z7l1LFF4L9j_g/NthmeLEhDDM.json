[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "hi my name is John David Dalton um I'll get into a little bit more about what I do in a second uh this talk is called",
    "start": "9000",
    "end": "15559"
  },
  {
    "text": "unorthodox performance um and it is about the performance optimizations that",
    "start": "15559",
    "end": "22720"
  },
  {
    "text": "I um implemented while developing low Dash so low Dash is a low how many",
    "start": "22720",
    "end": "30160"
  },
  {
    "text": "people know what low Dash is raise hands cool Lots um for those that don't know it's it's a utility Library so it's got",
    "start": "30160",
    "end": "37079"
  },
  {
    "text": "things to make working with arrays uh strings objects collections uh easier um",
    "start": "37079",
    "end": "43520"
  },
  {
    "text": "and it covers gaps that um exist in the the language itself um and in doing so",
    "start": "43520",
    "end": "51239"
  },
  {
    "text": "um I originally forked low Dash from an existing Library called underscore and",
    "start": "51239",
    "end": "58399"
  },
  {
    "text": "part of the things that differentiated my myself from the competition was performance um performance let's see if",
    "start": "58399",
    "end": "64600"
  },
  {
    "text": "I get into this next all right cool some of the things we'll talk about um in the",
    "start": "64600",
    "end": "71880"
  },
  {
    "text": "the presentation is the principles of performance and so the per principles I tried to add a bunch of words that",
    "start": "71880",
    "end": "78759"
  },
  {
    "start": "75000",
    "end": "308000"
  },
  {
    "text": "started with the same letter because it looked cool um but it's optimized for correctness um and what that means is",
    "start": "78759",
    "end": "87320"
  },
  {
    "text": "that JavaScript developers and and the ones that I I see a lot will will focus on",
    "start": "87320",
    "end": "95280"
  },
  {
    "text": "performance to the point that it's it's a negative um you shouldn't put performance as your highest priority uh",
    "start": "95280",
    "end": "102240"
  },
  {
    "text": "in this case I put correctness functional correctness over performance like if you get to the the result fast",
    "start": "102240",
    "end": "108399"
  },
  {
    "text": "but you get the wrong result that's not that's not a good thing right so you should always look at balancing",
    "start": "108399",
    "end": "114200"
  },
  {
    "text": "performance with other things and in the case of low Dash when I Implement something I make sure it's correct and consistent across all of my supported",
    "start": "114200",
    "end": "120719"
  },
  {
    "text": "environments and then worry about performance and then optimize it um there's also context too so I I maintain",
    "start": "120719",
    "end": "127560"
  },
  {
    "text": "a site called JS perf where you can go and Benchmark little Snippets of code and a lot of times devs will will",
    "start": "127560",
    "end": "133920"
  },
  {
    "text": "Benchmark things like single quotes or double quotes or double equals or triple equals or code with semicolons and code",
    "start": "133920",
    "end": "139879"
  },
  {
    "text": "without semicolons and that is just it's bananas right like you shouldn't focus on such micro performance so everything",
    "start": "139879",
    "end": "147239"
  },
  {
    "text": "has context whenever you get a readout on Js if it says things like uh how many",
    "start": "147239",
    "end": "152440"
  },
  {
    "text": "operations per second is is a given snippet and a lot of times it's millions and millions of operations a second and",
    "start": "152440",
    "end": "159000"
  },
  {
    "text": "uh for most use cases that's a difference between a million like 10 million and 11 million isn't going to",
    "start": "159000",
    "end": "165879"
  },
  {
    "text": "make a difference for your your code right so that's why there's context make sure you kind of you weigh your perf",
    "start": "165879",
    "end": "171400"
  },
  {
    "text": "decisions um in the context of the thing that you're executing um also something",
    "start": "171400",
    "end": "177680"
  },
  {
    "text": "I'll mention a a bunch is optimized for the common case and I'll go through and walk through examples of that um",
    "start": "177680",
    "end": "185280"
  },
  {
    "text": "basically if you have an API that you're exposing um and a lot of times your API",
    "start": "185280",
    "end": "190799"
  },
  {
    "text": "may be able to be overloaded so it can accept an options argument or it can accept one or two ways to be called you",
    "start": "190799",
    "end": "196840"
  },
  {
    "text": "want to optimize it for the the way that it's going to be called the most and you want to make sure that everything else falls off into the slow path that you",
    "start": "196840",
    "end": "202760"
  },
  {
    "text": "don't care about so I'll I'll go through some examples of that um and then another reason uh to optimize would be",
    "start": "202760",
    "end": "208760"
  },
  {
    "text": "to counteract the cost of something um in my case uh I wanted to make low Dash",
    "start": "208760",
    "end": "214959"
  },
  {
    "text": "cross browser consistent and that meant fixing bugs in older environments um and",
    "start": "214959",
    "end": "220560"
  },
  {
    "text": "fixing bugs comes with a cost right you have more checks you have more detections you have to do things like",
    "start": "220560",
    "end": "225760"
  },
  {
    "text": "iterate over properties that were missed and so that's extra extra overhead to a method call um and so to counteract that",
    "start": "225760",
    "end": "233159"
  },
  {
    "text": "cost I optimized those methods and made them faster to the point to where you could have code that executed",
    "start": "233159",
    "end": "239040"
  },
  {
    "text": "consistently and was faster which is usually something that doesn't go together right you're doing more things",
    "start": "239040",
    "end": "244319"
  },
  {
    "text": "and it's faster um and so that's what I did I used perf to offset the cost of those bug fixes and of added features",
    "start": "244319",
    "end": "250439"
  },
  {
    "text": "too so for example low Dash has methods that are faster than native Alternatives",
    "start": "250439",
    "end": "256359"
  },
  {
    "text": "right so like rore map is faster than array prototype map but it's also doing",
    "start": "256359",
    "end": "262400"
  },
  {
    "text": "a lot more too so it it accepts um instead of just a function you can pass it a string or you can pass it an object",
    "start": "262400",
    "end": "268479"
  },
  {
    "text": "and it will will create create a a predicate function for you um and it",
    "start": "268479",
    "end": "273520"
  },
  {
    "text": "does a lot of other things under the hood and we're still able to do that and be faster and so that's that's a it's",
    "start": "273520",
    "end": "280039"
  },
  {
    "text": "about counteracting costs and it's about optimizing the common case so I'll be talking about a few of",
    "start": "280039",
    "end": "287160"
  },
  {
    "text": "the things that I learned when I uh over the past two years I gave a perf talk",
    "start": "287160",
    "end": "292720"
  },
  {
    "text": "right before I created low Dash um and I I said some things uh and now I have a",
    "start": "292720",
    "end": "298720"
  },
  {
    "text": "different opinion on some of those things uh so I I'll go into what I used to think and now what I what I think um",
    "start": "298720",
    "end": "305720"
  },
  {
    "text": "on some of the the perf techniques so you can follow along um I'll be I'll be digging into a lot of",
    "start": "305720",
    "end": "312120"
  },
  {
    "text": "code and that's gross I'm sorry but there's no really there's no way to explain it really I got to point to the",
    "start": "312120",
    "end": "317560"
  },
  {
    "text": "code and say this is the chunk that's doing this and that um so you can go to github.com ladash lash I'll probably be",
    "start": "317560",
    "end": "325560"
  },
  {
    "text": "in the the the root lash. JS file for most things um so just um if if I reference a",
    "start": "325560",
    "end": "332319"
  },
  {
    "text": "function name or you see a little snippet here that's that's me referencing that file okay so the first thing is to",
    "start": "332319",
    "end": "340720"
  },
  {
    "start": "338000",
    "end": "687000"
  },
  {
    "text": "optimize for the common case and I I decided to pick a example",
    "start": "340720",
    "end": "347280"
  },
  {
    "text": "that really showed this common case it just so happens it's a wallet text so we'll see how well I can do this so",
    "start": "347280",
    "end": "354120"
  },
  {
    "text": "here's the common case wow right um Let me let me zoom in to that just a little",
    "start": "354120",
    "end": "361680"
  },
  {
    "text": "bit right okay and you don't need to see all the function because I'll I'll talk",
    "start": "361680",
    "end": "366840"
  },
  {
    "text": "you through it but we have a function called matches and matches creates a",
    "start": "366840",
    "end": "372000"
  },
  {
    "text": "function that will evaluate any pedin object and see if it matches the",
    "start": "372000",
    "end": "378080"
  },
  {
    "text": "original object that you passed so you can do that to to filter through an array of objects right um and the common",
    "start": "378080",
    "end": "387319"
  },
  {
    "text": "case for this method is to always evaluate or compare uh a source object",
    "start": "387319",
    "end": "393639"
  },
  {
    "text": "that has one property and it's a primitive value um with low Dash we also",
    "start": "393639",
    "end": "398800"
  },
  {
    "text": "do something called uh deep object comparison where we'll we'll take that",
    "start": "398800",
    "end": "403880"
  },
  {
    "text": "value and we'll crawl it and and compare arrays partially compare arrays and and",
    "start": "403880",
    "end": "409440"
  },
  {
    "text": "compare nested objects and that's horribly slow like that's gross that's gross slow and that's not the common",
    "start": "409440",
    "end": "415520"
  },
  {
    "text": "case and so if devs were using this method they would get hit with like like just 300% performance degreg on this on",
    "start": "415520",
    "end": "424800"
  },
  {
    "text": "this method for something they never use right and that's gross so what I do is",
    "start": "424800",
    "end": "430560"
  },
  {
    "text": "in this method I look at here I look at if the length of the properties that are",
    "start": "430560",
    "end": "436160"
  },
  {
    "text": "passed in is one I then say hey if can I can I compare this simply like is strict",
    "start": "436160",
    "end": "441800"
  },
  {
    "text": "comparable which means can I just go triple equals on this value and do a quick comparison and if so then I create",
    "start": "441800",
    "end": "447960"
  },
  {
    "text": "this really tiny compar comparison function right so that means for the common case you're getting this tiny",
    "start": "447960",
    "end": "453879"
  },
  {
    "text": "function that doesn't do NE that doesn't do deep crawling um that allows me to be",
    "start": "453879",
    "end": "460319"
  },
  {
    "text": "on par with the competition's implementation and the competition doesn't support deep crawling of object",
    "start": "460319",
    "end": "466080"
  },
  {
    "text": "comparison so I've got a feature added and I've got a performance and I'm on I'm in the ballpark of them um I've",
    "start": "466080",
    "end": "473280"
  },
  {
    "text": "taken oh uhoh let's see",
    "start": "473280",
    "end": "481440"
  },
  {
    "text": "here we go I've taken it a step further I just need to remember not to scroll with two",
    "start": "483560",
    "end": "491039"
  },
  {
    "text": "fingers so taking it a step further and",
    "start": "491159",
    "end": "497080"
  },
  {
    "text": "normally normally let's see if I can get down to it we'll just do that much for",
    "start": "497360",
    "end": "502800"
  },
  {
    "text": "now uh we'll keep going we'll keep going okay so here um and then more expensive",
    "start": "502800",
    "end": "510120"
  },
  {
    "text": "check I have a a case where uh I'll be",
    "start": "510120",
    "end": "515399"
  },
  {
    "text": "doing a a deep object comparison and that requires me to do a has owned",
    "start": "515399",
    "end": "521200"
  },
  {
    "text": "property check relatively cheap right compared to doing is equal which is um",
    "start": "521200",
    "end": "527120"
  },
  {
    "text": "here this has own property check and this is equal operation here",
    "start": "527120",
    "end": "534120"
  },
  {
    "text": "um but if any point in the time in this in this comparison one of the objects",
    "start": "534120",
    "end": "540839"
  },
  {
    "text": "fails so is false it doesn't match then I need to exit out of the the operation",
    "start": "540839",
    "end": "546240"
  },
  {
    "text": "so normally I would be doing has own property check is equal for every",
    "start": "546240",
    "end": "551600"
  },
  {
    "text": "element in the collection right has own property check is equal has own property check is equal and then if the if the",
    "start": "551600",
    "end": "559120"
  },
  {
    "text": "90th property of this object failed it would just return false so that's a lot",
    "start": "559120",
    "end": "564720"
  },
  {
    "text": "of work to just have a a false a fail case right and it turns out that when you're filtering objects a lot of the",
    "start": "564720",
    "end": "571200"
  },
  {
    "text": "time is going to be a fail case it's not going to match the the needle in that hay stack right um so what you do is",
    "start": "571200",
    "end": "577800"
  },
  {
    "text": "instead uh is break out those two checks the cheap check and the expensive check",
    "start": "577800",
    "end": "582839"
  },
  {
    "text": "into two separate Loops um so the the first the first trick is to always do",
    "start": "582839",
    "end": "588760"
  },
  {
    "text": "the cheap check first so before I was doing something like is equal and then the has own",
    "start": "588760",
    "end": "594800"
  },
  {
    "text": "property check wrong you need to do the cheap check so do the has own property check first",
    "start": "594800",
    "end": "599839"
  },
  {
    "text": "um but what you can do is iterate over all the elements and do a has- own property check the the cheap check first",
    "start": "599839",
    "end": "605920"
  },
  {
    "text": "if at any point it fails you haven't wasted a lot of of effort on JavaScript execution it'll exit fast without having",
    "start": "605920",
    "end": "612440"
  },
  {
    "text": "to ever touch the heavy path then only after all the elements pass the the light check then you go back through and",
    "start": "612440",
    "end": "619120"
  },
  {
    "text": "do another pass with the heavy check um and that is crazy cool there's some",
    "start": "619120",
    "end": "624839"
  },
  {
    "text": "stuff in here where I'm juggling based on um based on if it is a uh let's",
    "start": "624839",
    "end": "633160"
  },
  {
    "text": "see if it is a strict comparison uh or uh deep",
    "start": "633160",
    "end": "639880"
  },
  {
    "text": "comparison ignore that the gist is that it's order your execution of of",
    "start": "639880",
    "end": "644959"
  },
  {
    "text": "operations from cheap to most expensive and then if you can if it makes sense break them out into two separate loops",
    "start": "644959",
    "end": "650800"
  },
  {
    "text": "and do all your cheap first and then do all your more expensive",
    "start": "650800",
    "end": "655480"
  },
  {
    "text": "next let's see and that would be optimizing for the common case there so",
    "start": "657279",
    "end": "663200"
  },
  {
    "text": "we were able to get all of that functionality in there and still be performant now it's grosser because it's",
    "start": "663200",
    "end": "669240"
  },
  {
    "text": "it's larger but that little function can then be fast for every other use and so I",
    "start": "669240",
    "end": "676160"
  },
  {
    "text": "usually say if I can isolate the grossness to just a little bit I'm okay in this case it's it's it's not as gross",
    "start": "676160",
    "end": "681959"
  },
  {
    "text": "as it could have been the next thing is abstraction um",
    "start": "681959",
    "end": "687600"
  },
  {
    "start": "687000",
    "end": "928000"
  },
  {
    "text": "and and you all I'll have principles common case throughout all the methods that I'm using so that was just like an",
    "start": "687600",
    "end": "692680"
  },
  {
    "text": "a nice case that Illustrated it um when I when I first talked about JavaScript performance uh a couple years",
    "start": "692680",
    "end": "700480"
  },
  {
    "text": "ago I would always say the easiest way to improve your JavaScript performance is to do substraction right if you're",
    "start": "700480",
    "end": "707079"
  },
  {
    "text": "doing a function call that calls another function that calls another function that calls another function that's substraction and it'll it'll it'll slow",
    "start": "707079",
    "end": "713079"
  },
  {
    "text": "you down right that's not the case you can abstract in a way um that you can",
    "start": "713079",
    "end": "719680"
  },
  {
    "text": "Leverage The optimizations in the jit of the engine's jit to improve your",
    "start": "719680",
    "end": "724839"
  },
  {
    "text": "performance um and so now I'll walk you through how that's done so now in in the",
    "start": "724839",
    "end": "730440"
  },
  {
    "text": "current stable version of low Dash there is code that looks like this and I'm",
    "start": "730440",
    "end": "735839"
  },
  {
    "text": "sorry this is a function template this is a template that you would normally use to create HTML I'm using it to",
    "start": "735839",
    "end": "742800"
  },
  {
    "text": "compile a function and I'll zoom in just because I want gasps",
    "start": "742800",
    "end": "750120"
  },
  {
    "text": "uh this is this is gross right like you can't read this you look at this and you go what what is this now this is",
    "start": "750120",
    "end": "756240"
  },
  {
    "text": "actually the I believe the compiled form of that function but before it was all strings no one really wants this in",
    "start": "756240",
    "end": "761560"
  },
  {
    "text": "their code it was the biggest complaint I got from devs looking at low dashes that they couldn't understand what was",
    "start": "761560",
    "end": "766959"
  },
  {
    "text": "going on there and it was it was hurting contributions to the code base because it was something that was too bizarre um",
    "start": "766959",
    "end": "774320"
  },
  {
    "text": "turns out you don't need it throw it away so um in the next release we're going to just leverage abstraction and",
    "start": "774320",
    "end": "781160"
  },
  {
    "text": "Leverage The the jit in the engine to to optimize it for us and so here's here's",
    "start": "781160",
    "end": "787160"
  },
  {
    "text": "a case here's a simple I believe this is big enough I probably don't have to zoom um this is a simple like for each",
    "start": "787160",
    "end": "793560"
  },
  {
    "text": "implementation pretty basic it says hey if you if you've got an array go and do a for Loop over the array else do this",
    "start": "793560",
    "end": "801040"
  },
  {
    "text": "other function that that handles consistency over an object right uh or over a string or whatever happens to be",
    "start": "801040",
    "end": "807240"
  },
  {
    "text": "passed to it um and this is this is starting off this is kind of like uh reducing abstraction because I'm I'm not",
    "start": "807240",
    "end": "813880"
  },
  {
    "text": "calling another function for arrays I'm not calling a separate function for objects I'm I'm doing it inside nested",
    "start": "813880",
    "end": "820560"
  },
  {
    "text": "inside the function of for each um but it can be improved um one of the things",
    "start": "820560",
    "end": "827440"
  },
  {
    "text": "that I'll do here is that if you look at this snippet of code what's the and and say something that's iterating over a",
    "start": "827440",
    "end": "834320"
  },
  {
    "text": "collection what's the thing that's costing you um the biggest perf here and",
    "start": "834320",
    "end": "840120"
  },
  {
    "text": "it's it's actually it's this dot call here if we go back to the common case if you're",
    "start": "840120",
    "end": "846480"
  },
  {
    "text": "using for each a lot of the times you're not executing the this AR right you're not passing it that last that third",
    "start": "846480",
    "end": "852399"
  },
  {
    "text": "argument for your your this binding most people don't right you don't need to always do do call if you're never doing",
    "start": "852399",
    "end": "859360"
  },
  {
    "text": "a this binding so the next step is to hoist it out all right so we create a",
    "start": "859360",
    "end": "865880"
  },
  {
    "text": "small function called base callback that will sit and do the this binding only if",
    "start": "865880",
    "end": "871399"
  },
  {
    "text": "the this value is not undefined uh and it will also handle things like the the case of method shortcuts so I can have I",
    "start": "871399",
    "end": "878320"
  },
  {
    "text": "can pass a string and it'll handle converting that to a function I can pass it an object and it'll do that too but what it does is it leaves the common",
    "start": "878320",
    "end": "884839"
  },
  {
    "text": "case the case of the the no this AR fast because now it's not doing do call it",
    "start": "884839",
    "end": "889880"
  },
  {
    "text": "allows for engines to type specialize better for that uh invocation and you get faster than native performance just",
    "start": "889880",
    "end": "896120"
  },
  {
    "text": "by doing that that's the key like if you didn't do that you'd be slower than the native method that that little oneline",
    "start": "896120",
    "end": "901639"
  },
  {
    "text": "change is the secret to that function um and most of the things that are faster than native if it's dealing with array",
    "start": "901639",
    "end": "907560"
  },
  {
    "text": "iteration um so that's that's the next step is to just abstract that away now you you may have noticed because of that",
    "start": "907560",
    "end": "914079"
  },
  {
    "text": "I now have a simplified object Branch down there at the at the bottom too um",
    "start": "914079",
    "end": "920360"
  },
  {
    "text": "but that can be taken a step further so that gives us that gives us good performance but we can get we can get",
    "start": "920360",
    "end": "926279"
  },
  {
    "text": "better at that so here here's here's the next step um and this is to say hey if I'm an",
    "start": "926279",
    "end": "933399"
  },
  {
    "start": "928000",
    "end": "1050000"
  },
  {
    "text": "array go to a method that's basically taking that for Loop and moving it into its own array or into its I'm sorry into",
    "start": "933399",
    "end": "939399"
  },
  {
    "text": "its own function that handles it so now this is hey if this is array go the array route and if it's not go the uh",
    "start": "939399",
    "end": "947480"
  },
  {
    "text": "base each route um now this is almost there we can take it a step",
    "start": "947480",
    "end": "953399"
  },
  {
    "text": "further and go here now what this is doing is saying if you're not passing uh",
    "start": "953399",
    "end": "960480"
  },
  {
    "text": "something that needs to be calling the helper function uh don't do it just go",
    "start": "960480",
    "end": "966120"
  },
  {
    "text": "straight to the array case because that happens to be the most common case so now I'm avoiding even the Callback sugar",
    "start": "966120",
    "end": "972639"
  },
  {
    "text": "if if it's the common case which is to basically have no uh this binding it be",
    "start": "972639",
    "end": "978639"
  },
  {
    "text": "a function and it be an array so I've optimized it there too um there's a there's an alternate syntax that I have",
    "start": "978639",
    "end": "984360"
  },
  {
    "text": "on the next slide that's basically it's similar um but what this allows you to do is that now now whenever your your",
    "start": "984360",
    "end": "992319"
  },
  {
    "text": "function becomes hot especially if you're passing it the same kind of value so let's say it's it's it's the array um",
    "start": "992319",
    "end": "998600"
  },
  {
    "text": "it will the engine will create an alternate form of that function that's",
    "start": "998600",
    "end": "1003800"
  },
  {
    "text": "specialized for array and it may inline the array each right into the actual",
    "start": "1003800",
    "end": "1008959"
  },
  {
    "text": "function so it's doing what we were doing before with with the code being inlined so you're getting that performance benefit but it's not it's",
    "start": "1008959",
    "end": "1016240"
  },
  {
    "text": "not having to deal with the baggage of the object Branch being in there too and so what that allows uh later is that",
    "start": "1016240",
    "end": "1022959"
  },
  {
    "text": "specialized function can then be qualified to be inlined itself into another function call so it allows you",
    "start": "1022959",
    "end": "1028280"
  },
  {
    "text": "to to to inline the inlined code again so it allows the engine to to do what it",
    "start": "1028280",
    "end": "1033360"
  },
  {
    "text": "does best right well it handles the the the leg work for the optimization for you so by abstracting and creating",
    "start": "1033360",
    "end": "1039360"
  },
  {
    "text": "specialized functions for for just the array or just the object or just your",
    "start": "1039360",
    "end": "1044438"
  },
  {
    "text": "fast path you're able to um to get performance optimizations now let's see",
    "start": "1044439",
    "end": "1050520"
  },
  {
    "start": "1050000",
    "end": "1345000"
  },
  {
    "text": "here all right so I didn't have the I took out the alternate implementation and replaced it with this one here um",
    "start": "1050520",
    "end": "1057400"
  },
  {
    "text": "which is to to talk about a technique I've done with abstraction which is if",
    "start": "1057400",
    "end": "1063320"
  },
  {
    "text": "you have an exposed API that has to do a lot of a lot of it has to accept a lot",
    "start": "1063320",
    "end": "1070000"
  },
  {
    "text": "more things like what happens if you pass an naan value what happens if you pass a string do I do error checking on",
    "start": "1070000",
    "end": "1077200"
  },
  {
    "text": "this input that's passed in um if I have to uh do something like take the",
    "start": "1077200",
    "end": "1083080"
  },
  {
    "text": "arguments object and uh create a a slice of it and turn that into an array um all",
    "start": "1083080",
    "end": "1090200"
  },
  {
    "text": "of that heavy lifting can be done in the external function that's or the exposed function right and then you pass it off",
    "start": "1090200",
    "end": "1096400"
  },
  {
    "text": "to base functions that are specialized to not have to do any of those checks and so that means that other other code",
    "start": "1096400",
    "end": "1102640"
  },
  {
    "text": "in there I gotta be careful about walking away from this mic but other code can call That Base flatten there",
    "start": "1102640",
    "end": "1110080"
  },
  {
    "text": "instead of having to call um the the actual exposed flatten because the exposed flatten right now accepts a",
    "start": "1110080",
    "end": "1116520"
  },
  {
    "text": "function excepts uh the Deep flags and all this other stuff and uh you can",
    "start": "1116520",
    "end": "1121679"
  },
  {
    "text": "specify like it it automatically will filter out non-array values and arguments objects and it has all this",
    "start": "1121679",
    "end": "1127520"
  },
  {
    "text": "overhead that you you don't need to do internally right so you have this base version of the function that's specialized and doesn't do any of the",
    "start": "1127520",
    "end": "1133919"
  },
  {
    "text": "the heavy lifting something else uh that you can do here is um when you're doing",
    "start": "1133919",
    "end": "1139080"
  },
  {
    "text": "things there there's operations that you can do that affect perfor uh the",
    "start": "1139080",
    "end": "1145039"
  },
  {
    "text": "engine's ability to optimize a function that disqualify the function from optimizations um I you may see a lot of",
    "start": "1145039",
    "end": "1152960"
  },
  {
    "text": "posts that say hey here's performance killers in V8 um when I develop low Dash",
    "start": "1152960",
    "end": "1158320"
  },
  {
    "text": "I look for things that are applied across the board across engin so in",
    "start": "1158320",
    "end": "1163400"
  },
  {
    "text": "Firefox in IE in V8 um there's a Common Thread of things that you don't do if if",
    "start": "1163400",
    "end": "1168799"
  },
  {
    "text": "you want op your function to be optimized and so one of them is converting your arguments object to an",
    "start": "1168799",
    "end": "1175440"
  },
  {
    "text": "array if you do array prototype. slice uh your your arguments object you've",
    "start": "1175440",
    "end": "1181440"
  },
  {
    "text": "disqualified that function from optimizations there um because the engine punts on that it goes ah you're",
    "start": "1181440",
    "end": "1186679"
  },
  {
    "text": "touching the arguments object gross um no optimizations for you uh but what's",
    "start": "1186679",
    "end": "1192200"
  },
  {
    "text": "what's okay is if you have that exposed function that's doing that that arguments object conversion if it's it's",
    "start": "1192200",
    "end": "1198840"
  },
  {
    "text": "just that tiny external function and it's passing off to another function that that can get optimized because it's not doing any of that work so I create a",
    "start": "1198840",
    "end": "1205720"
  },
  {
    "text": "new function to do things like TR catch TR catch will disqualify your function from optimizations right uh some are are",
    "start": "1205720",
    "end": "1211840"
  },
  {
    "text": "more fine grained into where the deop happens but as a general rule since you're developing for more than one browser um you would want to abstract",
    "start": "1211840",
    "end": "1219480"
  },
  {
    "text": "that Tri catch into its own function that way that that function that has the tri catch is deoptimized but all it's doing is the TR catch Block in there",
    "start": "1219480",
    "end": "1226720"
  },
  {
    "text": "with your your code and so in the next version of low Dash will have a function called underscore.js",
    "start": "1226720",
    "end": "1233279"
  },
  {
    "text": "and then pass it off to a specialized function that doesn't even care about it so like my specialized functions it",
    "start": "1258919",
    "end": "1264080"
  },
  {
    "text": "doesn't care it doesn't do any checks to validate that the number is actually a number I know by the time it gets there it's a number um it doesn't do any",
    "start": "1264080",
    "end": "1271279"
  },
  {
    "text": "checks to see if the value is truthy like the collection is truthy I do all of those checks ahead of time in the other functions so they get optimized",
    "start": "1271279",
    "end": "1277320"
  },
  {
    "text": "they get inlined uh better uh there's no disqualifications of performance for them um and so that's where abstraction",
    "start": "1277320",
    "end": "1283840"
  },
  {
    "text": "is really really good and you don't get that whenever you in line and try to do all that stuff your right then all of a",
    "start": "1283840",
    "end": "1290320"
  },
  {
    "text": "sudden the engine looks at that and goes you I can't inline this it's past my my limit so V8 has a limit based on on the",
    "start": "1290320",
    "end": "1297279"
  },
  {
    "text": "actual number the actual character size of the body the function body um IE",
    "start": "1297279",
    "end": "1303240"
  },
  {
    "text": "chakra does is based on bite code generated um I'm not sure what uh",
    "start": "1303240",
    "end": "1308320"
  },
  {
    "text": "Firefox does but it it's basically small functions get inlined better than large functions um uh and if you if you Branch",
    "start": "1308320",
    "end": "1316200"
  },
  {
    "text": "off for specialized paths like the previous example with uh the array branch and the the object Branch then um",
    "start": "1316200",
    "end": "1324080"
  },
  {
    "text": "that even the inline form of that could potentially be inlined as well so that's that's cool so that is",
    "start": "1324080",
    "end": "1331039"
  },
  {
    "text": "abstraction all right the next one is bye-bye builtin um and I just I found",
    "start": "1331039",
    "end": "1337360"
  },
  {
    "text": "this it took me a while to find this G but I I like it so um it it really it",
    "start": "1337360",
    "end": "1342799"
  },
  {
    "text": "fits with what I'm about to say uh so",
    "start": "1342799",
    "end": "1348640"
  },
  {
    "start": "1345000",
    "end": "1622000"
  },
  {
    "text": "before I developed low Dash I I looked at Native methods and the performance",
    "start": "1348640",
    "end": "1355000"
  },
  {
    "text": "was pretty crappy um and it turns out they haven't really been optimized over the years um and it can affect depending",
    "start": "1355000",
    "end": "1363960"
  },
  {
    "text": "on the implementation in the engine like if your function gets inlined or not based on if it can cross boundaries of",
    "start": "1363960",
    "end": "1370120"
  },
  {
    "text": "if if the JavaScript version if you're built-in is implemented in JavaScript maybe it can be inline better but regardless they're always doing extra",
    "start": "1370120",
    "end": "1376480"
  },
  {
    "text": "work that you're normally not doing so that's not they're not optimized for the common case right you're usually working with a dense array you're usually not",
    "start": "1376480",
    "end": "1383240"
  },
  {
    "text": "caring about the this binding uh you can do this a lot faster on your own um so",
    "start": "1383240",
    "end": "1388840"
  },
  {
    "text": "in certain cases where I've profiled the implementations across multiple browsers and found that um JavaScript versions",
    "start": "1388840",
    "end": "1396200"
  },
  {
    "text": "were faster I've used them now that's bonus the the real reason was I wanted a",
    "start": "1396200",
    "end": "1402080"
  },
  {
    "text": "way to iterate over arrays consistently and I couldn't do that um with Native",
    "start": "1402080",
    "end": "1407960"
  },
  {
    "text": "methods or shims because older versions of IE would have would treat sparse arrays differently than modern versions",
    "start": "1407960",
    "end": "1414960"
  },
  {
    "text": "you could have an array with an UND undefined value like a literal undefined value and older IE so IE less than nine",
    "start": "1414960",
    "end": "1421840"
  },
  {
    "text": "would treat it as a as a whole in the array which would cause iterating over arrays to be wonky and if you use a shim",
    "start": "1421840",
    "end": "1428159"
  },
  {
    "text": "you're going to get that bug there's no way around it unless you treat all arrays as dense and so that's where I was coming from and then I looked at it",
    "start": "1428159",
    "end": "1434320"
  },
  {
    "text": "and was like holy crap that's really fast um so awesome so I I started at it",
    "start": "1434320",
    "end": "1440279"
  },
  {
    "text": "with consistency and then the bonus was performance um and this isn't like a ditch all your builtins this is profile",
    "start": "1440279",
    "end": "1448640"
  },
  {
    "text": "figure out what's right and and what you can where you can squeeze the performance and and add functionality uh",
    "start": "1448640",
    "end": "1455720"
  },
  {
    "text": "so for example I'm able to add all this functionality to a method and still be faster than native which is great devs don't notice the difference they get",
    "start": "1455720",
    "end": "1462159"
  },
  {
    "text": "more functionality they may get a speed boost that's bonus it's great um there's also cases where you don't",
    "start": "1462159",
    "end": "1469279"
  },
  {
    "text": "want to say bye-bye to built-ins there's some that are really really cool and I'll be talking about some es6 uh",
    "start": "1469279",
    "end": "1474640"
  },
  {
    "text": "functionality that's that's available in all modern browsers right now that you can use um that gives you crazy",
    "start": "1474640",
    "end": "1481720"
  },
  {
    "text": "performance um and in this case there's also some es5 stuff too let's see if I get into that before I go too far all",
    "start": "1481720",
    "end": "1488640"
  },
  {
    "text": "right so here's here's a a filter implementation again a basic implementation of filter this happens to",
    "start": "1488640",
    "end": "1494000"
  },
  {
    "text": "be uh crazy fast now what I'm not doing here is doing any if you notice there's",
    "start": "1494000",
    "end": "1499120"
  },
  {
    "text": "no this binding um that's because this is that base method remember I I created those those those tiny methods that that",
    "start": "1499120",
    "end": "1505960"
  },
  {
    "text": "are called out to by the other functions these are the these are the small functions these are the optimized functions all right so before I get into",
    "start": "1505960",
    "end": "1512799"
  },
  {
    "text": "the es6 I want to talk about the um the es5 goodness so if you're ever iterating",
    "start": "1512799",
    "end": "1518399"
  },
  {
    "text": "over a an object and you're doing for in plus has own property that's gross it's",
    "start": "1518399",
    "end": "1525279"
  },
  {
    "text": "slow ah don't do it I would even say say shim it shim it and then use object.",
    "start": "1525279",
    "end": "1531640"
  },
  {
    "text": "Keys uh object. Keys is full of win when it comes to iterating over objects um",
    "start": "1531640",
    "end": "1537679"
  },
  {
    "text": "you can't get faster in your JavaScript implementation of that there's no way like it's just where where other",
    "start": "1537679",
    "end": "1543520"
  },
  {
    "text": "implementations have drop the ball object. Keys has has picked it up like it's it's really the best method for",
    "start": "1543520",
    "end": "1549039"
  },
  {
    "text": "that um so we use that internally uh low Dash does so for underscore dokeys if",
    "start": "1549039",
    "end": "1554120"
  },
  {
    "text": "it's possible we use uh Native object. Keys now when you get into Edge case",
    "start": "1554120",
    "end": "1559919"
  },
  {
    "text": "land there's some bugs across browsers even modern browsers when it comes to iterating certain objects and so we fix",
    "start": "1559919",
    "end": "1565399"
  },
  {
    "text": "some of those bugs too so I'd say if you're using low Dash continue to we probably fix more bugs than a shim would",
    "start": "1565399",
    "end": "1572440"
  },
  {
    "text": "um so that's cool also another one is um checking if something is an array uh array.",
    "start": "1572440",
    "end": "1578240"
  },
  {
    "text": "isarray awesome awesome fast way to check if something is an array the shim",
    "start": "1578240",
    "end": "1583440"
  },
  {
    "text": "for that is really slow but all modern browsers have it so so take advantage of it and even older browsers now have it",
    "start": "1583440",
    "end": "1591159"
  },
  {
    "text": "because it's been around for a while so as long as you're not going so far back like like I8",
    "start": "1591159",
    "end": "1598559"
  },
  {
    "text": "um does that have it I don't even know anymore because I I I do a feature test for it and if it doesn't exist I have a",
    "start": "1598559",
    "end": "1604720"
  },
  {
    "text": "a fallback and if it does I use it I'd say uh try it out it's pretty cool um",
    "start": "1604720",
    "end": "1609840"
  },
  {
    "text": "but now off to es6 and the coolness that is available in all browsers right now",
    "start": "1609840",
    "end": "1615480"
  },
  {
    "text": "um and the thing that I I really love in loading Dash is getting to leverage set",
    "start": "1615480",
    "end": "1621200"
  },
  {
    "text": "es6 set so when when Dev switched from underscore to low Das the the main thing",
    "start": "1621200",
    "end": "1627919"
  },
  {
    "start": "1622000",
    "end": "2035000"
  },
  {
    "text": "that they say improved performance was large array iteration searching for a needle and a Hy stack basically so index",
    "start": "1627919",
    "end": "1634799"
  },
  {
    "text": "of if they're having to do a unique if they're having to do an intersection uh a union um anything that deals with",
    "start": "1634799",
    "end": "1642480"
  },
  {
    "text": "large arrays and looking up a value in them uh we perform better and in the next version we're leveraging es6 set",
    "start": "1642480",
    "end": "1649559"
  },
  {
    "text": "instead of using our internal like implementation of es6 set we're we're",
    "start": "1649559",
    "end": "1654600"
  },
  {
    "text": "just using the native um because it's really cool and I'll say uh explain why now so U one of the cool things about a",
    "start": "1654600",
    "end": "1662240"
  },
  {
    "text": "set is that it contains unique values inherently if you push if you try to if you try to in this case add but I've",
    "start": "1662240",
    "end": "1668559"
  },
  {
    "text": "aist it as push because I in the internal implementation that lades uses we think it's an array it looks like an",
    "start": "1668559",
    "end": "1673840"
  },
  {
    "text": "array because it's got the method I use it if it if native set is supported uh",
    "start": "1673840",
    "end": "1679519"
  },
  {
    "text": "then I use it in place of the array that's normally returned that's why I kind of make it look like an array um and that's why if it's found it return",
    "start": "1679519",
    "end": "1686480"
  },
  {
    "text": "zero and negative one because index of is going to return an index or a",
    "start": "1686480",
    "end": "1691840"
  },
  {
    "text": "negative one and the my implementation doesn't care it just says oh this looks like it's found and it's not found um",
    "start": "1691840",
    "end": "1698200"
  },
  {
    "text": "but anyways set allows you to take to cram all kinds of objects into it and it",
    "start": "1698200",
    "end": "1704320"
  },
  {
    "text": "automatically rejects the the duplicates so it's the set's always going to have",
    "start": "1704320",
    "end": "1709519"
  },
  {
    "text": "unique characters or unique objects so if you want to find something that's unique you just push all your your",
    "start": "1709519",
    "end": "1715519"
  },
  {
    "text": "elements into the set and then you just read them back out right and then you get your you get your unique array and",
    "start": "1715519",
    "end": "1722720"
  },
  {
    "text": "it doesn't do all of this array traversing like if it's a thousand elements you don't have to sit there for every single element and crawl the array",
    "start": "1722720",
    "end": "1729440"
  },
  {
    "text": "right that's gross um this way it allows you to to do it really really fast uh",
    "start": "1729440",
    "end": "1734679"
  },
  {
    "text": "and also when you do a set and you're looking to see if an object exists in there it's not having to do a linear",
    "start": "1734679",
    "end": "1740039"
  },
  {
    "text": "lookup it's just going hey is this in my set yes all right it's not having to go zero is it there no one is it there no",
    "start": "1740039",
    "end": "1745840"
  },
  {
    "text": "two is it there so es6 set is great um what I'm doing here though is I've kind of Hidden Away the feature detect but I",
    "start": "1745840",
    "end": "1753799"
  },
  {
    "text": "detect if if a set exists earlier in the code and if it's not shimmed um because",
    "start": "1753799",
    "end": "1759880"
  },
  {
    "text": "we want we want to Leverage The the native goodness right so I don't use object. keys if it's been shimmed um",
    "start": "1759880",
    "end": "1767039"
  },
  {
    "text": "because I trust Mye code better than some third party code right like we don't know if they're using some old",
    "start": "1767039",
    "end": "1772799"
  },
  {
    "text": "version of prototype that's paved over es5 methods with their own because they didn't check to see if they existed yet",
    "start": "1772799",
    "end": "1778279"
  },
  {
    "text": "um so we avoid doing that we we say let's not use a shimmed method let's only use it if it's native so I do that",
    "start": "1778279",
    "end": "1783799"
  },
  {
    "text": "and I set the value inside my closure uh per set so if it exists it's truthy and",
    "start": "1783799",
    "end": "1789279"
  },
  {
    "text": "if not it's falsy um normally you would not want to do that without doing uh checks and assigning variable references",
    "start": "1789279",
    "end": "1795080"
  },
  {
    "text": "because it would be an undefined variable lookup and that's gross and your code will error but I check that it",
    "start": "1795080",
    "end": "1800399"
  },
  {
    "text": "exists and if it does I implement the method then later on I say hey if create",
    "start": "1800399",
    "end": "1806039"
  },
  {
    "text": "cach is truthy because it's either going to be false or a function then I use create cach in my code um and that is",
    "start": "1806039",
    "end": "1813760"
  },
  {
    "text": "es6 set and the reason there's there's probably shorter ways of using es6 set",
    "start": "1813760",
    "end": "1821640"
  },
  {
    "text": "right they you can you can add values a lot easier in certain engines that",
    "start": "1821640",
    "end": "1826760"
  },
  {
    "text": "support uh more of the es6 um uh functionality but this is a this is the",
    "start": "1826760",
    "end": "1833279"
  },
  {
    "text": "the cross-section of functionality that works in all modern browsers um when I",
    "start": "1833279",
    "end": "1839120"
  },
  {
    "text": "say all modern browsers I'm probably excluding Safari but whatever they're",
    "start": "1839120",
    "end": "1844519"
  },
  {
    "text": "going to have Safari 8 soon enough right so feature test for it use it when it's available it's",
    "start": "1844519",
    "end": "1850279"
  },
  {
    "text": "great so uh this is a a a one from last year that I I liked enough to bring back",
    "start": "1850279",
    "end": "1856720"
  },
  {
    "text": "um because I got outraged in the Twitter feed from this um I don't know if you",
    "start": "1856720",
    "end": "1861960"
  },
  {
    "text": "can see that I'll scroll in a little bit zoom in so before I said hey if you're",
    "start": "1861960",
    "end": "1868799"
  },
  {
    "text": "not using this and this binding don't bind your functions because it's slow uh",
    "start": "1868799",
    "end": "1876000"
  },
  {
    "text": "you can detect that a function has a this reference in it um because it's not",
    "start": "1876000",
    "end": "1882039"
  },
  {
    "text": "quite specked per se now es6 maybe does a little more um but if you two string",
    "start": "1882039",
    "end": "1887679"
  },
  {
    "text": "aun function it'll kind of generate the function Source right so you can use a regx to say hey does that thing have a",
    "start": "1887679",
    "end": "1893440"
  },
  {
    "text": "this reference and if it does then you can then you can know that it needs to Leverage The this binding and if it",
    "start": "1893440",
    "end": "1900080"
  },
  {
    "text": "doesn't then you can um not do it right not do the dot call not do the do apply",
    "start": "1900080",
    "end": "1906799"
  },
  {
    "text": "do the optimized code path right uh so this was cool uh back then uh there's",
    "start": "1906799",
    "end": "1912960"
  },
  {
    "text": "some problems uh with it turns out that on certain resourc restricted uh devices",
    "start": "1912960",
    "end": "1918000"
  },
  {
    "text": "is like some mobile phones um and certain Windows apps um you can't corus",
    "start": "1918000",
    "end": "1923880"
  },
  {
    "text": "a function to a string without incurring a cost um in some cases it's loading bite code in some cases it's memory",
    "start": "1923880",
    "end": "1930760"
  },
  {
    "text": "impact uh so I have some feature detections now to kind of avoid this so I'd say use with caution that's why it's",
    "start": "1930760",
    "end": "1936960"
  },
  {
    "text": "unorthodox because uh it's cool but yeah so um there's something else I've done",
    "start": "1936960",
    "end": "1943320"
  },
  {
    "text": "here too which is first check to see if the function can be decomposed",
    "start": "1943320",
    "end": "1948639"
  },
  {
    "text": "and so hey I've got like this big like hey this is the environments that support it yay and here's what I return",
    "start": "1948639",
    "end": "1954960"
  },
  {
    "text": "Falls for and I'm testing my my one function to see if it can recognize the this reference in it now that function",
    "start": "1954960",
    "end": "1961200"
  },
  {
    "text": "is crazy large so if it can find the this value in there then it's supported um so I do that but then there's",
    "start": "1961200",
    "end": "1967200"
  },
  {
    "text": "something else too uh a lot of times you're you're",
    "start": "1967200",
    "end": "1972840"
  },
  {
    "text": "dealing with functions that um you can't store metadata on and so that's something I'll be talking about oh I've",
    "start": "1972840",
    "end": "1979399"
  },
  {
    "text": "got like just a couple minutes left um later is metadata and so I detect if a function can support the name property",
    "start": "1979399",
    "end": "1986399"
  },
  {
    "text": "because if chances are normally when you're calling uh an array function or",
    "start": "1986399",
    "end": "1991519"
  },
  {
    "text": "like a map or a filter a lot of times that's just a function that's created at the time of at the runtime right like it's you're passing it the function",
    "start": "1991519",
    "end": "1997519"
  },
  {
    "text": "right there um so storing metadata doesn't make any sense because that metadata is just going to be written to and then thrown away um so I detect if",
    "start": "1997519",
    "end": "2004519"
  },
  {
    "text": "the function has a name property and if it does I go okay it's probably safe to write metadata to um and so that leads",
    "start": "2004519",
    "end": "2010760"
  },
  {
    "text": "me into the next slide and we're going to ignore that",
    "start": "2010760",
    "end": "2016159"
  },
  {
    "text": "because I talked about it um metadata so",
    "start": "2016159",
    "end": "2021720"
  },
  {
    "text": "uh this um it's all right folks I got",
    "start": "2021720",
    "end": "2028440"
  },
  {
    "text": "this",
    "start": "2028440",
    "end": "2031440"
  },
  {
    "text": "metadata when you when you create a function bind or you do a partial or a curry or a partial right uh you're",
    "start": "2034360",
    "end": "2040960"
  },
  {
    "start": "2035000",
    "end": "2152000"
  },
  {
    "text": "wrapping the original function right and if you call partial on a partial or something that's already been bound",
    "start": "2040960",
    "end": "2046200"
  },
  {
    "text": "you're wrapping an already wrapped function um and so to avoid that especially because devs like U uh",
    "start": "2046200",
    "end": "2053440"
  },
  {
    "text": "functional programming right where you're always currying this or partialling that and then applying another Curry or a partial onto",
    "start": "2053440",
    "end": "2059240"
  },
  {
    "text": "something that's already curried or partialed um the performance impact of that is just bogging down the function",
    "start": "2059240",
    "end": "2065040"
  },
  {
    "text": "because you're going you're having to twist through all these wrappers to get to the original function but if you store metadata on the actual function",
    "start": "2065040",
    "end": "2072118"
  },
  {
    "text": "this is what low Dash does we flatten everything down to a single function a single wrapped uh single wrapper around",
    "start": "2072119",
    "end": "2078800"
  },
  {
    "text": "the function so no matter how many times you call bind on an already bound function or bind Curry partial partial",
    "start": "2078800",
    "end": "2084960"
  },
  {
    "text": "right wrap any of those combinations on a function you can call them 15 times and wrap it 15 levels deep it's only",
    "start": "2084960",
    "end": "2091158"
  },
  {
    "text": "ever one function call away from the actual original function um and that's because we store metadata on the",
    "start": "2091159",
    "end": "2096599"
  },
  {
    "text": "function that then flat all of the attributes down so this is why I I leveraged a bit mask for the first time",
    "start": "2096599",
    "end": "2102400"
  },
  {
    "text": "ever in JavaScript for me uh to implement this and I thought wow that's what they're used for instead of having",
    "start": "2102400",
    "end": "2109000"
  },
  {
    "text": "like eight arguments to pass to this function I can just store all the configuration inside a bit mask uh so",
    "start": "2109000",
    "end": "2115400"
  },
  {
    "text": "that's what I've done um I basically bolt on an array to a function um if",
    "start": "2115400",
    "end": "2121359"
  },
  {
    "text": "object. defin property exists because I don't want this metadata to be observed through object iteration so I make it",
    "start": "2121359",
    "end": "2127880"
  },
  {
    "text": "non- innumerable so engines that have that get that benefit if not the function should execute just like it",
    "start": "2127880",
    "end": "2134280"
  },
  {
    "text": "normally does the the metadata should not make and that's this was tricky because before you could leverage that",
    "start": "2134280",
    "end": "2139520"
  },
  {
    "text": "metadata to do a lot of cool stuff but it can't have any other side effect on there it should be able to be pulled out and your functions still operate so",
    "start": "2139520",
    "end": "2148760"
  },
  {
    "text": "um here is another view of that uh and this is me doing things like detecting",
    "start": "2148800",
    "end": "2156599"
  },
  {
    "text": "uh values like cloning the partial right arguments and cloning the the the partial left arguments and merging",
    "start": "2156599",
    "end": "2162760"
  },
  {
    "text": "arguments together it gets really trippy and honestly uh I have to throw unit tests at this um but it allows that that",
    "start": "2162760",
    "end": "2171319"
  },
  {
    "text": "really cool flattening down of functions and I've noticed that there's there's certain engines that optimize like",
    "start": "2171319",
    "end": "2178119"
  },
  {
    "text": "native function bind this way too that will no matter how many times you bind a function it's a fixed cost to that",
    "start": "2178119",
    "end": "2183160"
  },
  {
    "text": "function binding and that's not consistent in across engin so I do that here um I I deal with bit masks I try to",
    "start": "2183160",
    "end": "2189440"
  },
  {
    "text": "throw a bunch of comments at it um but what's great is that if if your if your engine doesn't support it it doesn't",
    "start": "2189440",
    "end": "2194920"
  },
  {
    "text": "matter it pulls it out things still work so that's really cool and let's see things okay so I'm about out of time",
    "start": "2194920",
    "end": "2203079"
  },
  {
    "text": "there's lash.com there's uh the repo lowash low Das uh if you go to lowash itself you'll find all",
    "start": "2203079",
    "end": "2209359"
  },
  {
    "text": "the different builds of lowash so there's AMD there's mpm there's node um there's es6 cuz in the next release we",
    "start": "2209359",
    "end": "2216880"
  },
  {
    "text": "will support a fully tested implementation of es6 classes that you can use um and then trans use your",
    "start": "2216880",
    "end": "2224160"
  },
  {
    "text": "favorite transpiler and transpile to the module format of your choice um so we do that too also JS perf please use JS perf",
    "start": "2224160",
    "end": "2231960"
  },
  {
    "text": "responsibly don't go down the rabbit hole of Micro Ops like profile your code first like wait wait for your code to",
    "start": "2231960",
    "end": "2239400"
  },
  {
    "text": "have a performance issue and then use JS perf to test different implementations of the bottleneck code like that's",
    "start": "2239400",
    "end": "2245800"
  },
  {
    "text": "that's the way to do it profile your code first first don't go crazy like I get devs that that'll say Hey you could",
    "start": "2245800",
    "end": "2251599"
  },
  {
    "text": "get faster execution of this if you do plus plus versus minus minus nah n just",
    "start": "2251599",
    "end": "2257200"
  },
  {
    "text": "just say no uh to to Micro Ops test first um I'm competitive so I have to",
    "start": "2257200",
    "end": "2263560"
  },
  {
    "text": "look at the the library landscaped around me and say all right their version is this fast my version needs to",
    "start": "2263560",
    "end": "2269640"
  },
  {
    "text": "be at least that fast or or better um and devs will end up building on top of",
    "start": "2269640",
    "end": "2276200"
  },
  {
    "text": "a library that's why I focus on some performance stuff but in in non in cases",
    "start": "2276200",
    "end": "2281520"
  },
  {
    "text": "that that aren't being built on like more stuff isn't being built on top of your stuff just apply context to it like",
    "start": "2281520",
    "end": "2287960"
  },
  {
    "text": "if this code is only going to be executed once you don't need to micro op that stuff like who cares make it as as",
    "start": "2287960",
    "end": "2293319"
  },
  {
    "text": "functional and chainy as you want it doesn't matter that the performance impact um and then also you can follow",
    "start": "2293319",
    "end": "2299040"
  },
  {
    "text": "me on Twitter at J doton cool that's that's my talk",
    "start": "2299040",
    "end": "2305720"
  },
  {
    "text": "uh questions yes how do you check it's",
    "start": "2310280",
    "end": "2320599"
  },
  {
    "text": "sh ah cool yeah so that's another one of my favorite things but it's not really",
    "start": "2320599",
    "end": "2325920"
  },
  {
    "text": "perf um but I'll show you anyways um okay so is",
    "start": "2325920",
    "end": "2332720"
  },
  {
    "text": "native here's how I do that is native so",
    "start": "2332720",
    "end": "2337800"
  },
  {
    "text": "um that's not going to really help you there either uh let's say this there is",
    "start": "2337800",
    "end": "2343520"
  },
  {
    "text": "native equals here here's the secret sauce I decompile a native function I",
    "start": "2343520",
    "end": "2349640"
  },
  {
    "start": "2344000",
    "end": "2619000"
  },
  {
    "text": "strip out any identifying characteristics of that function so right now I'm using um object.",
    "start": "2349640",
    "end": "2355920"
  },
  {
    "text": "prototype. two string right so I've got a reference of two string somewhere else up there that's why it just says two string um and I remove the the two",
    "start": "2355920",
    "end": "2364119"
  },
  {
    "text": "string word from it so that means that it should be generic enough to where any other native function where I remove its",
    "start": "2364119",
    "end": "2370240"
  },
  {
    "text": "identifier from it should kind of look like that when I decompile it and so normally when you decompile a native",
    "start": "2370240",
    "end": "2375359"
  },
  {
    "text": "function it'll go the function name and it'll it'll say bracket native code bracket right um that's the that's the",
    "start": "2375359",
    "end": "2382079"
  },
  {
    "text": "normal case but this using a regx in decompiling the function will allow me to support different cases because in",
    "start": "2382079",
    "end": "2387520"
  },
  {
    "text": "certain platforms it's not just native code other libraries do this too like Ember will detect if it's shimmed and",
    "start": "2387520",
    "end": "2392920"
  },
  {
    "text": "they just use like a native code inference and most of them do I saw uh",
    "start": "2392920",
    "end": "2398079"
  },
  {
    "text": "a fork a poll request on yui where they did this and I loved it like using the",
    "start": "2398079",
    "end": "2403400"
  },
  {
    "text": "the own function source to extract the the pattern for a native function was was awesome so I I did that I added a",
    "start": "2403400",
    "end": "2411240"
  },
  {
    "text": "little extra check to in there for what Rhino prints out rhino in in Java runtimes will add some extra like four",
    "start": "2411240",
    "end": "2418160"
  },
  {
    "text": "this or that into it too so I stripped that out um but that allows me to check because most most shims don't shim the",
    "start": "2418160",
    "end": "2423240"
  },
  {
    "text": "two- string representation of the function right um and even if they did later on down there where I'm actually",
    "start": "2423240",
    "end": "2428880"
  },
  {
    "text": "using it I'm using function. prototype. TW string. call and that allows me to bypass any custom two string they have",
    "start": "2428880",
    "end": "2435760"
  },
  {
    "text": "on that function so I can get straight to the actual two string value so no matter if they've even if they've tried",
    "start": "2435760",
    "end": "2441160"
  },
  {
    "text": "to trick me I can still detect the custom or the the the native method so yeah there's that uh I don't know if I",
    "start": "2441160",
    "end": "2448359"
  },
  {
    "text": "repeated the question that whole thing was about uh how do you detect a shim",
    "start": "2448359",
    "end": "2453640"
  },
  {
    "text": "cool any other questions I saw more hands that were up the first time yes",
    "start": "2453640",
    "end": "2462319"
  },
  {
    "text": "talk so that's",
    "start": "2462319",
    "end": "2467520"
  },
  {
    "text": "it okay different parts of the tri catch can be optimized by engines it different",
    "start": "2467520",
    "end": "2474640"
  },
  {
    "text": "engines do different things with that right so like some some of them if you're not throwing if you're not doing",
    "start": "2474640",
    "end": "2480040"
  },
  {
    "text": "the catch but you have a finally it may be able to optimize it but I'm I'm programming for performance",
    "start": "2480040",
    "end": "2487359"
  },
  {
    "text": "across the board and so across the board that hasn't been optimized away yet so that's why you do it um there are",
    "start": "2487359",
    "end": "2493640"
  },
  {
    "text": "probably some limitations to it like I don't know if they could optimize the entire thing away um I know that there's",
    "start": "2493640",
    "end": "2501400"
  },
  {
    "text": "I've seen resistance to trying to solve that problem so I would say that it's if",
    "start": "2501400",
    "end": "2507800"
  },
  {
    "text": "if es5 methods aren't optimized Tri catch is a lot lower on their list of things to to optimize um so so the",
    "start": "2507800",
    "end": "2514640"
  },
  {
    "text": "reason I so the lovely thing about browser",
    "start": "2514640",
    "end": "2520040"
  },
  {
    "text": "competition is that if one browser finds a way uh it puts pressure on the other",
    "start": "2520040",
    "end": "2526359"
  },
  {
    "text": "browser implementations um because uh we're very competitive so I would say",
    "start": "2526359",
    "end": "2532800"
  },
  {
    "text": "that's probably a good way in to getting something optimized is to get one of them to to do the leg work and optimize",
    "start": "2532800",
    "end": "2539040"
  },
  {
    "text": "it um and that'll put pressure on the other vendors um that's also a good thing to try to get whatever you want",
    "start": "2539040",
    "end": "2545359"
  },
  {
    "text": "optimized included into a benchmark um because browser vendors love benchmarks so I would say that's that's another",
    "start": "2545359",
    "end": "2551040"
  },
  {
    "text": "case too like Hey try to do a PO request against um octane or or Kraken or",
    "start": "2551040",
    "end": "2556359"
  },
  {
    "text": "SunSpider or whatever Benchmark like web Kit's got two new benchmarks right do do that there um and then browser venders",
    "start": "2556359",
    "end": "2563319"
  },
  {
    "text": "will pay attention to it so cool any other questions oh yes I just",
    "start": "2563319",
    "end": "2571319"
  },
  {
    "text": "add right and so by abstracting that into a function itself though you avoid that issue for other engines too so",
    "start": "2571319",
    "end": "2577960"
  },
  {
    "text": "that's why I I instead of recommending like all devs do that I made it into like an easy utility function right so",
    "start": "2577960",
    "end": "2584559"
  },
  {
    "text": "then they can just say attempt and it becomes just part of their their normal sugar that they use with a library and",
    "start": "2584559",
    "end": "2590160"
  },
  {
    "text": "that way they don't have to think about it like hey is the engine optimized this yet or not if they if they use the the",
    "start": "2590160",
    "end": "2595240"
  },
  {
    "text": "utility method they'll get they'll get the optimization either way cool any other",
    "start": "2595240",
    "end": "2602680"
  },
  {
    "text": "questions someone scratching their head is not a question um okay cool thank you",
    "start": "2603200",
    "end": "2608559"
  },
  {
    "text": "awesome [Music]",
    "start": "2608559",
    "end": "2613830"
  }
]