[
  {
    "text": "I'm Matt Blair I'm a software engineer",
    "start": "4160",
    "end": "5680"
  },
  {
    "text": "at Open Table I'm going to talk about",
    "start": "5680",
    "end": "7600"
  },
  {
    "text": "es6 today um specifically what we can do",
    "start": "7600",
    "end": "10559"
  },
  {
    "text": "with es6 today in the browser I know the",
    "start": "10559",
    "end": "13360"
  },
  {
    "text": "the the talk description mentioned a lot",
    "start": "13360",
    "end": "15559"
  },
  {
    "text": "of different things but like ended up",
    "start": "15559",
    "end": "17240"
  },
  {
    "text": "getting narrowed down when I try to get",
    "start": "17240",
    "end": "18560"
  },
  {
    "text": "this fit into 20 minutes just about like",
    "start": "18560",
    "end": "20800"
  },
  {
    "text": "what can we do today in modern browsers",
    "start": "20800",
    "end": "24039"
  },
  {
    "text": "with es6 um and researching this talk I",
    "start": "24039",
    "end": "27439"
  },
  {
    "text": "was talking to a friend of mine and he",
    "start": "27439",
    "end": "28640"
  },
  {
    "text": "was like oh man yeah ES six it's so cool",
    "start": "28640",
    "end": "31880"
  },
  {
    "text": "but uh we'll never be able to use it",
    "start": "31880",
    "end": "33239"
  },
  {
    "text": "like we're always going to have all",
    "start": "33239",
    "end": "34079"
  },
  {
    "text": "these Legacy browsers to support we're",
    "start": "34079",
    "end": "36040"
  },
  {
    "text": "going to have to support IE and like and",
    "start": "36040",
    "end": "37600"
  },
  {
    "text": "what's the chance browsers actually",
    "start": "37600",
    "end": "38840"
  },
  {
    "text": "Implement these features in a timely",
    "start": "38840",
    "end": "40559"
  },
  {
    "text": "manner and that was kind of the attitude",
    "start": "40559",
    "end": "42200"
  },
  {
    "text": "I had going into I was like this stuff's",
    "start": "42200",
    "end": "44079"
  },
  {
    "text": "never going to be available to me and",
    "start": "44079",
    "end": "46399"
  },
  {
    "text": "then I uh I started looking at open",
    "start": "46399",
    "end": "47760"
  },
  {
    "text": "tables um user log of like you know",
    "start": "47760",
    "end": "50399"
  },
  {
    "text": "who's using an evergreen browser who's",
    "start": "50399",
    "end": "52000"
  },
  {
    "text": "using a modern browser and I found 78%",
    "start": "52000",
    "end": "54520"
  },
  {
    "text": "of our user base was using a modern",
    "start": "54520",
    "end": "56640"
  },
  {
    "text": "browser an evergreen browser and",
    "start": "56640",
    "end": "58199"
  },
  {
    "text": "Evergreen is a self-updating browser and",
    "start": "58199",
    "end": "60399"
  },
  {
    "text": "the term modern in this context means",
    "start": "60399",
    "end": "62079"
  },
  {
    "text": "ones that support already supports CS6",
    "start": "62079",
    "end": "64600"
  },
  {
    "text": "so 78% of our user base already uses it",
    "start": "64600",
    "end": "66840"
  },
  {
    "text": "in the global web when I was looking at",
    "start": "66840",
    "end": "68280"
  },
  {
    "text": "statistics it was closer to 80% so if",
    "start": "68280",
    "end": "70960"
  },
  {
    "text": "anything open table is actually lagging",
    "start": "70960",
    "end": "72360"
  },
  {
    "text": "a little bit behind some sites I looked",
    "start": "72360",
    "end": "74360"
  },
  {
    "text": "at the statistics were as high as",
    "start": "74360",
    "end": "76360"
  },
  {
    "text": "93% so the fact is that like you can use",
    "start": "76360",
    "end": "79200"
  },
  {
    "text": "es6 right now certain features of it uh",
    "start": "79200",
    "end": "82920"
  },
  {
    "text": "on your website and you would have a you",
    "start": "82920",
    "end": "85200"
  },
  {
    "text": "know a giant portion of uh of your um",
    "start": "85200",
    "end": "88600"
  },
  {
    "text": "user base excuse me right so where are",
    "start": "88600",
    "end": "90840"
  },
  {
    "text": "we at where are we at with the spec",
    "start": "90840",
    "end": "92240"
  },
  {
    "text": "support uh since it was formalized in uh",
    "start": "92240",
    "end": "94640"
  },
  {
    "text": "in July uh the latest version of Chrome",
    "start": "94640",
    "end": "96840"
  },
  {
    "text": "and Opera is at 91% of the",
    "start": "96840",
    "end": "99439"
  },
  {
    "text": "spec uh Firefox 85 Edge is 83 and Safari",
    "start": "99439",
    "end": "105320"
  },
  {
    "text": "99's at 54% of the spec oh and one other",
    "start": "105320",
    "end": "107680"
  },
  {
    "text": "caveat when I say modern browsers I'm",
    "start": "107680",
    "end": "109439"
  },
  {
    "text": "not including",
    "start": "109439",
    "end": "111600"
  },
  {
    "text": "ie11 only Edge because it's the only",
    "start": "111600",
    "end": "114439"
  },
  {
    "text": "actual self-updating browser so it has",
    "start": "114439",
    "end": "116280"
  },
  {
    "text": "to be an evergreen browser as well all",
    "start": "116280",
    "end": "118399"
  },
  {
    "text": "right so um so what if we wanted to use",
    "start": "118399",
    "end": "120640"
  },
  {
    "text": "a transpiler we wanted to try to get",
    "start": "120640",
    "end": "122280"
  },
  {
    "text": "those features in what can we do and oh",
    "start": "122280",
    "end": "124280"
  },
  {
    "text": "by the way all these slides are online",
    "start": "124280",
    "end": "125960"
  },
  {
    "text": "they're all open source and all the code",
    "start": "125960",
    "end": "127680"
  },
  {
    "text": "I'm showing is all open source as well",
    "start": "127680",
    "end": "129759"
  },
  {
    "text": "my speaker notes um so with Babel the",
    "start": "129759",
    "end": "132599"
  },
  {
    "text": "latest version of Babel you get 76% of",
    "start": "132599",
    "end": "134480"
  },
  {
    "text": "the spec Tracer gives",
    "start": "134480",
    "end": "137319"
  },
  {
    "text": "59% uh typescript and other superat",
    "start": "137319",
    "end": "140000"
  },
  {
    "text": "languages uh 56% closures at 31 and jsx",
    "start": "140000",
    "end": "143760"
  },
  {
    "text": "is at",
    "start": "143760",
    "end": "144599"
  },
  {
    "text": "20% all right so I'm going to dive right",
    "start": "144599",
    "end": "146840"
  },
  {
    "text": "into examples of what features right now",
    "start": "146840",
    "end": "149959"
  },
  {
    "text": "all of those platforms share so what can",
    "start": "149959",
    "end": "152200"
  },
  {
    "text": "you use right now in all these different",
    "start": "152200",
    "end": "153840"
  },
  {
    "text": "browsers that will work currently for",
    "start": "153840",
    "end": "156000"
  },
  {
    "text": "your Evergreen uh users and your modern",
    "start": "156000",
    "end": "158200"
  },
  {
    "text": "browser users um a little note on the",
    "start": "158200",
    "end": "161080"
  },
  {
    "text": "syntax that works everywhere some",
    "start": "161080",
    "end": "163000"
  },
  {
    "text": "environments require a use strict",
    "start": "163000",
    "end": "164519"
  },
  {
    "text": "statement so like these features are",
    "start": "164519",
    "end": "166280"
  },
  {
    "text": "there but if you're not using UST strict",
    "start": "166280",
    "end": "167800"
  },
  {
    "text": "they won't won't be available and you'll",
    "start": "167800",
    "end": "169200"
  },
  {
    "text": "get an error all right so you get let",
    "start": "169200",
    "end": "171640"
  },
  {
    "text": "const Arrow functions object literal",
    "start": "171640",
    "end": "174400"
  },
  {
    "text": "extensions and string templates I'm",
    "start": "174400",
    "end": "176440"
  },
  {
    "text": "going to walk through each of these with",
    "start": "176440",
    "end": "177480"
  },
  {
    "text": "some",
    "start": "177480",
    "end": "178480"
  },
  {
    "text": "examples um let so here's some here's",
    "start": "178480",
    "end": "181319"
  },
  {
    "text": "some ES3 some like code we probably all",
    "start": "181319",
    "end": "183799"
  },
  {
    "text": "seen and this kind of exposes some",
    "start": "183799",
    "end": "186040"
  },
  {
    "text": "problems with how we declare variables",
    "start": "186040",
    "end": "187560"
  },
  {
    "text": "today the Top Line you see I declare X",
    "start": "187560",
    "end": "189840"
  },
  {
    "text": "is equal to 31 and then I have this if",
    "start": "189840",
    "end": "191760"
  },
  {
    "text": "block if true then I declare VAR X is",
    "start": "191760",
    "end": "194400"
  },
  {
    "text": "equal to 71 but because of browser",
    "start": "194400",
    "end": "196319"
  },
  {
    "text": "hoisting and how JavaScript Works VAR",
    "start": "196319",
    "end": "198959"
  },
  {
    "text": "X31 and VAR x71 are actually the same",
    "start": "198959",
    "end": "201480"
  },
  {
    "text": "variable so if you ran this code and did",
    "start": "201480",
    "end": "203560"
  },
  {
    "text": "console logs you would expect this to be",
    "start": "203560",
    "end": "205319"
  },
  {
    "text": "71 and then 31 but it's not it's 71",
    "start": "205319",
    "end": "208480"
  },
  {
    "text": "everywhere",
    "start": "208480",
    "end": "210760"
  },
  {
    "text": "however let resolves this problem and",
    "start": "210760",
    "end": "212799"
  },
  {
    "text": "introduces Block Level scoping so now",
    "start": "212799",
    "end": "215360"
  },
  {
    "text": "when you declare a variable inside of a",
    "start": "215360",
    "end": "217400"
  },
  {
    "text": "block like a while loop or a for Loop or",
    "start": "217400",
    "end": "219360"
  },
  {
    "text": "an if block that's actually a different",
    "start": "219360",
    "end": "221200"
  },
  {
    "text": "variable than the outer scoped fun uh",
    "start": "221200",
    "end": "223360"
  },
  {
    "text": "variable so you get the kind of correct",
    "start": "223360",
    "end": "225640"
  },
  {
    "text": "behavior that you're expecting at Open",
    "start": "225640",
    "end": "227680"
  },
  {
    "text": "Table when we write variables we we",
    "start": "227680",
    "end": "229319"
  },
  {
    "text": "almost never use VAR anymore I can't",
    "start": "229319",
    "end": "230720"
  },
  {
    "text": "actually think of any instances when we",
    "start": "230720",
    "end": "232000"
  },
  {
    "text": "use VAR because let is the behavior",
    "start": "232000",
    "end": "233879"
  },
  {
    "text": "we're actually looking",
    "start": "233879",
    "end": "235840"
  },
  {
    "text": "for all right uh let errors so if you",
    "start": "235840",
    "end": "239400"
  },
  {
    "text": "read and using VAR if I declared the",
    "start": "239400",
    "end": "242239"
  },
  {
    "text": "same variable twice it would just work",
    "start": "242239",
    "end": "243560"
  },
  {
    "text": "because of hoisting with let it'll",
    "start": "243560",
    "end": "245480"
  },
  {
    "text": "actually throw an error if you try to",
    "start": "245480",
    "end": "246720"
  },
  {
    "text": "redeclare the same variable again it'll",
    "start": "246720",
    "end": "249159"
  },
  {
    "text": "say you've already declared this um",
    "start": "249159",
    "end": "251159"
  },
  {
    "text": "something else if you de if you use a",
    "start": "251159",
    "end": "252959"
  },
  {
    "text": "variable before you declare it it will",
    "start": "252959",
    "end": "255439"
  },
  {
    "text": "actually throw an error as well and that",
    "start": "255439",
    "end": "256799"
  },
  {
    "text": "wasn't the case with VAR VAR would just",
    "start": "256799",
    "end": "258440"
  },
  {
    "text": "Hoist the variable up and it would work",
    "start": "258440",
    "end": "259959"
  },
  {
    "text": "even if that variable wasn't set",
    "start": "259959",
    "end": "262759"
  },
  {
    "text": "yet all right const const is another uh",
    "start": "262759",
    "end": "266360"
  },
  {
    "text": "block scoped",
    "start": "266360",
    "end": "268440"
  },
  {
    "text": "um uh block scope",
    "start": "268440",
    "end": "271440"
  },
  {
    "text": "syntax um except and it it it's exactly",
    "start": "271440",
    "end": "274880"
  },
  {
    "text": "what you would think it's it lets you",
    "start": "274880",
    "end": "276199"
  },
  {
    "text": "declare constant variables um but there",
    "start": "276199",
    "end": "278639"
  },
  {
    "text": "is one caveat I'll get to that caveat in",
    "start": "278639",
    "end": "280400"
  },
  {
    "text": "a second all right so you can see at the",
    "start": "280400",
    "end": "282320"
  },
  {
    "text": "top I say const my fave is equal to",
    "start": "282320",
    "end": "284120"
  },
  {
    "text": "seven the next line I try to I try to",
    "start": "284120",
    "end": "286479"
  },
  {
    "text": "change that variable that would be an",
    "start": "286479",
    "end": "287639"
  },
  {
    "text": "error you can't change a constant once",
    "start": "287639",
    "end": "289240"
  },
  {
    "text": "it's been set um except well you you",
    "start": "289240",
    "end": "293280"
  },
  {
    "text": "can't change the value but one thing",
    "start": "293280",
    "end": "294880"
  },
  {
    "text": "that's interesting about that is that um",
    "start": "294880",
    "end": "297240"
  },
  {
    "text": "sorry I'm messing with my mic um in",
    "start": "297240",
    "end": "299000"
  },
  {
    "text": "Firefox and you get an actual exception",
    "start": "299000",
    "end": "300919"
  },
  {
    "text": "and Safari it just swallows it silently",
    "start": "300919",
    "end": "302880"
  },
  {
    "text": "but doesn't change the value so it's one",
    "start": "302880",
    "end": "304720"
  },
  {
    "text": "of those things where const is there but",
    "start": "304720",
    "end": "306280"
  },
  {
    "text": "it doesn't quite work how you'd expect",
    "start": "306280",
    "end": "308280"
  },
  {
    "text": "it to um so you can see on the next line",
    "start": "308280",
    "end": "310560"
  },
  {
    "text": "I say console log my favorite number is",
    "start": "310560",
    "end": "312560"
  },
  {
    "text": "and in all those cases the number would",
    "start": "312560",
    "end": "314199"
  },
  {
    "text": "be seven whether you got the error or",
    "start": "314199",
    "end": "315840"
  },
  {
    "text": "not now you can see uh further down I",
    "start": "315840",
    "end": "318919"
  },
  {
    "text": "try to redeclare that variable as",
    "start": "318919",
    "end": "320360"
  },
  {
    "text": "another constant that would throw if I",
    "start": "320360",
    "end": "322919"
  },
  {
    "text": "try to declare a variable or or or use a",
    "start": "322919",
    "end": "325840"
  },
  {
    "text": "or a let uh with that same name that",
    "start": "325840",
    "end": "328319"
  },
  {
    "text": "would also throw you can only ever",
    "start": "328319",
    "end": "330080"
  },
  {
    "text": "declare a const once and again at the",
    "start": "330080",
    "end": "332560"
  },
  {
    "text": "bottom even with all of those cases if I",
    "start": "332560",
    "end": "334520"
  },
  {
    "text": "had those in my code the variable",
    "start": "334520",
    "end": "336000"
  },
  {
    "text": "wouldn't actually change",
    "start": "336000",
    "end": "338280"
  },
  {
    "text": "value um with const you have to supply a",
    "start": "338280",
    "end": "341800"
  },
  {
    "text": "value to start it is declaring a",
    "start": "341800",
    "end": "343440"
  },
  {
    "text": "constant variable that cannot change so",
    "start": "343440",
    "end": "345479"
  },
  {
    "text": "if you just try con Fu and then try to",
    "start": "345479",
    "end": "347120"
  },
  {
    "text": "set Fu later the even the Declaration",
    "start": "347120",
    "end": "349759"
  },
  {
    "text": "will explode um something cool about con",
    "start": "349759",
    "end": "352960"
  },
  {
    "text": "is that it doesn't have to be primitive",
    "start": "352960",
    "end": "354199"
  },
  {
    "text": "types you can declare objects arrays",
    "start": "354199",
    "end": "356560"
  },
  {
    "text": "sets maps and we'll talk about some of",
    "start": "356560",
    "end": "357919"
  },
  {
    "text": "those other data structures later but",
    "start": "357919",
    "end": "359639"
  },
  {
    "text": "but you can say const almost anything is",
    "start": "359639",
    "end": "361720"
  },
  {
    "text": "equal to that and that works um and then",
    "start": "361720",
    "end": "364319"
  },
  {
    "text": "same thing where if you tried to then",
    "start": "364319",
    "end": "365639"
  },
  {
    "text": "change that a complex objects value it",
    "start": "365639",
    "end": "367680"
  },
  {
    "text": "would explode here's the caveat though",
    "start": "367680",
    "end": "370680"
  },
  {
    "text": "constants are basically like object",
    "start": "370680",
    "end": "372599"
  },
  {
    "text": "pointers so they point to a reference in",
    "start": "372599",
    "end": "374360"
  },
  {
    "text": "memory so you can actually change if you",
    "start": "374360",
    "end": "376800"
  },
  {
    "text": "have a complex object you can change its",
    "start": "376800",
    "end": "379440"
  },
  {
    "text": "internal values and that doesn't cause",
    "start": "379440",
    "end": "381479"
  },
  {
    "text": "any explosions that's fine you can",
    "start": "381479",
    "end": "384039"
  },
  {
    "text": "declare a constant object and then",
    "start": "384039",
    "end": "385880"
  },
  {
    "text": "mutate all of its properties and that's",
    "start": "385880",
    "end": "388400"
  },
  {
    "text": "fine and that's part of the spec",
    "start": "388400",
    "end": "390360"
  },
  {
    "text": "so what it's saying is this object can",
    "start": "390360",
    "end": "392000"
  },
  {
    "text": "never change in the object reference can",
    "start": "392000",
    "end": "394039"
  },
  {
    "text": "never change but the internal properties",
    "start": "394039",
    "end": "395599"
  },
  {
    "text": "of that object can constantly mutate so",
    "start": "395599",
    "end": "398000"
  },
  {
    "text": "that's something that's good to know if",
    "start": "398000",
    "end": "399400"
  },
  {
    "text": "you're first trying out with",
    "start": "399400",
    "end": "401199"
  },
  {
    "text": "const all right arrow functions uh I",
    "start": "401199",
    "end": "403960"
  },
  {
    "text": "don't know how many of you were at the",
    "start": "403960",
    "end": "405360"
  },
  {
    "text": "ESX talk earlier the ESX",
    "start": "405360",
    "end": "407880"
  },
  {
    "text": "panel it's like half and half there's a",
    "start": "407880",
    "end": "410360"
  },
  {
    "text": "lot of mention of Arrow functions um",
    "start": "410360",
    "end": "412440"
  },
  {
    "text": "Arrow functions really don't give you",
    "start": "412440",
    "end": "414319"
  },
  {
    "text": "anything that wasn't already available",
    "start": "414319",
    "end": "415960"
  },
  {
    "text": "to you in es5 it's just really nice",
    "start": "415960",
    "end": "418639"
  },
  {
    "text": "syntactic sugar and again there's some",
    "start": "418639",
    "end": "421199"
  },
  {
    "text": "caveats um so basically you can see in",
    "start": "421199",
    "end": "424479"
  },
  {
    "text": "the comments on the right what the the",
    "start": "424479",
    "end": "426919"
  },
  {
    "text": "the equivalent are you know I have I",
    "start": "426919",
    "end": "429479"
  },
  {
    "text": "have parentheses Arrow you know uh curly",
    "start": "429479",
    "end": "432879"
  },
  {
    "text": "braces Fu and that's basically the",
    "start": "432879",
    "end": "434039"
  },
  {
    "text": "equivalent of function you know",
    "start": "434039",
    "end": "436280"
  },
  {
    "text": "parameters curly braces Fu so that's",
    "start": "436280",
    "end": "438599"
  },
  {
    "text": "basically I just lose the function",
    "start": "438599",
    "end": "439680"
  },
  {
    "text": "keyword add a couple braces so it's like",
    "start": "439680",
    "end": "442759"
  },
  {
    "text": "uh and then there's the implicit return",
    "start": "442759",
    "end": "444560"
  },
  {
    "text": "which is one of the nice benefits you",
    "start": "444560",
    "end": "446319"
  },
  {
    "text": "can see here I don't have the curly",
    "start": "446319",
    "end": "448319"
  },
  {
    "text": "braces and that's basically the",
    "start": "448319",
    "end": "450039"
  },
  {
    "text": "equivalent of saying curly brace return",
    "start": "450039",
    "end": "452639"
  },
  {
    "text": "those parameters and one of the",
    "start": "452639",
    "end": "454319"
  },
  {
    "text": "panelists mentioned that's like one of",
    "start": "454319",
    "end": "455479"
  },
  {
    "text": "their favorite features if you're",
    "start": "455479",
    "end": "456599"
  },
  {
    "text": "writing chaining lambdas where things",
    "start": "456599",
    "end": "458479"
  },
  {
    "text": "are constantly returning values you can",
    "start": "458479",
    "end": "460520"
  },
  {
    "text": "write a a structure like uh an",
    "start": "460520",
    "end": "462319"
  },
  {
    "text": "expression like this and it just",
    "start": "462319",
    "end": "463440"
  },
  {
    "text": "implicitly returns that",
    "start": "463440",
    "end": "465199"
  },
  {
    "text": "value um also if you only have a single",
    "start": "465199",
    "end": "468360"
  },
  {
    "text": "parameter and only in the single",
    "start": "468360",
    "end": "469800"
  },
  {
    "text": "parameter case um the parameters are",
    "start": "469800",
    "end": "472440"
  },
  {
    "text": "optional again that's really nice if",
    "start": "472440",
    "end": "474039"
  },
  {
    "text": "you're working with lambas so if this is",
    "start": "474039",
    "end": "476400"
  },
  {
    "text": "just syntactic sugar um you know why",
    "start": "476400",
    "end": "478960"
  },
  {
    "text": "would we use this okay so fat arrows for",
    "start": "478960",
    "end": "481039"
  },
  {
    "text": "one uh they bind to the this context so",
    "start": "481039",
    "end": "485039"
  },
  {
    "text": "if you're using them in like a class or",
    "start": "485039",
    "end": "486680"
  },
  {
    "text": "a prototype everything in that Arrow",
    "start": "486680",
    "end": "489639"
  },
  {
    "text": "function will be bound to this so you",
    "start": "489639",
    "end": "491000"
  },
  {
    "text": "could do this dot whatever and that's",
    "start": "491000",
    "end": "492800"
  },
  {
    "text": "bound to the outer scoped context so",
    "start": "492800",
    "end": "495639"
  },
  {
    "text": "that's one advantage two disadvantages",
    "start": "495639",
    "end": "498319"
  },
  {
    "text": "of using Arrow functions are that um one",
    "start": "498319",
    "end": "501240"
  },
  {
    "text": "you don't have access to the arguments",
    "start": "501240",
    "end": "502840"
  },
  {
    "text": "object so in this case where I have A1",
    "start": "502840",
    "end": "504879"
  },
  {
    "text": "A2 a n i can't do arguments whatever",
    "start": "504879",
    "end": "508080"
  },
  {
    "text": "it's actually bound arguments is found",
    "start": "508080",
    "end": "509639"
  },
  {
    "text": "to the outer scoped function you're",
    "start": "509639",
    "end": "511400"
  },
  {
    "text": "calling the Lambda in so it's not",
    "start": "511400",
    "end": "513159"
  },
  {
    "text": "available to you second thing is Arrow",
    "start": "513159",
    "end": "515200"
  },
  {
    "text": "functions don't work with generators so",
    "start": "515200",
    "end": "516839"
  },
  {
    "text": "if you're writing generators based code",
    "start": "516839",
    "end": "518518"
  },
  {
    "text": "you can't yield out of an arrow function",
    "start": "518519",
    "end": "521399"
  },
  {
    "text": "so there's some places they're very",
    "start": "521399",
    "end": "523039"
  },
  {
    "text": "useful and there's some cases where they",
    "start": "523039",
    "end": "524680"
  },
  {
    "text": "don't work at",
    "start": "524680",
    "end": "525720"
  },
  {
    "text": "all all right um object literal",
    "start": "525720",
    "end": "528320"
  },
  {
    "text": "extensions okay so I have some es5",
    "start": "528320",
    "end": "530080"
  },
  {
    "text": "written up here and then I'm going to",
    "start": "530080",
    "end": "530959"
  },
  {
    "text": "show you another slide where I show you",
    "start": "530959",
    "end": "532080"
  },
  {
    "text": "the equivalent with es6 so I have some",
    "start": "532080",
    "end": "534560"
  },
  {
    "text": "variables declared at the top then I",
    "start": "534560",
    "end": "536240"
  },
  {
    "text": "declare a and bar then I declare an",
    "start": "536240",
    "end": "538839"
  },
  {
    "text": "object and I say you know property a is",
    "start": "538839",
    "end": "540480"
  },
  {
    "text": "equal to a and then I say uh property m",
    "start": "540480",
    "end": "543200"
  },
  {
    "text": "is equal to this function and then below",
    "start": "543200",
    "end": "545680"
  },
  {
    "text": "that I I dynamically set a a property so",
    "start": "545680",
    "end": "548160"
  },
  {
    "text": "I say object bar in Brackets equals 104",
    "start": "548160",
    "end": "551360"
  },
  {
    "text": "and so that's the equivalent of saying",
    "start": "551360",
    "end": "552480"
  },
  {
    "text": "object. fu is equal to 104 and then I",
    "start": "552480",
    "end": "555000"
  },
  {
    "text": "use object defined property to set a set",
    "start": "555000",
    "end": "557000"
  },
  {
    "text": "a getter I don't know if you guys have",
    "start": "557000",
    "end": "558760"
  },
  {
    "text": "seen that object property uh method but",
    "start": "558760",
    "end": "561279"
  },
  {
    "text": "that's very standard es5 that's out",
    "start": "561279",
    "end": "563279"
  },
  {
    "text": "there so this is how you'd write this in",
    "start": "563279",
    "end": "566120"
  },
  {
    "text": "es6 so you can see it's a little turser",
    "start": "566120",
    "end": "568920"
  },
  {
    "text": "there's a lot of short hands going on",
    "start": "568920",
    "end": "570519"
  },
  {
    "text": "here uh at the top I declare my first",
    "start": "570519",
    "end": "572120"
  },
  {
    "text": "two variables but then on that next line",
    "start": "572120",
    "end": "574640"
  },
  {
    "text": "you know after the VAR object I say a",
    "start": "574640",
    "end": "576839"
  },
  {
    "text": "comma and that's object shorthand",
    "start": "576839",
    "end": "579120"
  },
  {
    "text": "basically if the property is the same",
    "start": "579120",
    "end": "581000"
  },
  {
    "text": "name as the variable you don't need to",
    "start": "581000",
    "end": "582839"
  },
  {
    "text": "say it twice just saying a comma goes",
    "start": "582839",
    "end": "585360"
  },
  {
    "text": "okay this is property a is equal to",
    "start": "585360",
    "end": "587000"
  },
  {
    "text": "value a um M PR Z so basically I don't",
    "start": "587000",
    "end": "591600"
  },
  {
    "text": "need the function keyword at all when",
    "start": "591600",
    "end": "592880"
  },
  {
    "text": "you're declaring it in an object or in a",
    "start": "592880",
    "end": "594519"
  },
  {
    "text": "class it just says name of the function",
    "start": "594519",
    "end": "597440"
  },
  {
    "text": "perins in the compiler the difference",
    "start": "597440",
    "end": "599920"
  },
  {
    "text": "there and so function goes out the",
    "start": "599920",
    "end": "601079"
  },
  {
    "text": "window um down here the next line uh I",
    "start": "601079",
    "end": "604640"
  },
  {
    "text": "have the square brackets bar that's a uh",
    "start": "604640",
    "end": "607399"
  },
  {
    "text": "computed property so it's basically",
    "start": "607399",
    "end": "608920"
  },
  {
    "text": "saying take the value of bar and make",
    "start": "608920",
    "end": "610680"
  },
  {
    "text": "that the property name so that's",
    "start": "610680",
    "end": "612200"
  },
  {
    "text": "basically the equivalent of object. Fu",
    "start": "612200",
    "end": "614839"
  },
  {
    "text": "be previously that doing a dynamic um uh",
    "start": "614839",
    "end": "618519"
  },
  {
    "text": "computed property wasn't possible at",
    "start": "618519",
    "end": "620240"
  },
  {
    "text": "object instantiation time and then the",
    "start": "620240",
    "end": "622440"
  },
  {
    "text": "last one is I don't actually use Getters",
    "start": "622440",
    "end": "624600"
  },
  {
    "text": "that often but I love the syntax this",
    "start": "624600",
    "end": "626399"
  },
  {
    "text": "shorthand get name of the getter and",
    "start": "626399",
    "end": "629079"
  },
  {
    "text": "then",
    "start": "629079",
    "end": "629839"
  },
  {
    "text": "what returns from the getter so instead",
    "start": "629839",
    "end": "631720"
  },
  {
    "text": "of that object defined property mess of",
    "start": "631720",
    "end": "634279"
  },
  {
    "text": "syntax you can do that now and like very",
    "start": "634279",
    "end": "636480"
  },
  {
    "text": "quickly set up a getter or a",
    "start": "636480",
    "end": "640040"
  },
  {
    "text": "Setter all right uh the last thing I'm",
    "start": "640120",
    "end": "642639"
  },
  {
    "text": "going to talk about with syntax is",
    "start": "642639",
    "end": "643800"
  },
  {
    "text": "string templating so this uh the first",
    "start": "643800",
    "end": "646160"
  },
  {
    "text": "line and the second line are equivalent",
    "start": "646160",
    "end": "647959"
  },
  {
    "text": "and as you can see in the first line",
    "start": "647959",
    "end": "649240"
  },
  {
    "text": "I've got this you know the the um what",
    "start": "649240",
    "end": "652120"
  },
  {
    "text": "is it called again double quotes and I'm",
    "start": "652120",
    "end": "653480"
  },
  {
    "text": "like string text line one new line",
    "start": "653480",
    "end": "656320"
  },
  {
    "text": "string text line two and then the next",
    "start": "656320",
    "end": "658360"
  },
  {
    "text": "line I say string text line one I do a",
    "start": "658360",
    "end": "660480"
  },
  {
    "text": "line break and then do string text line",
    "start": "660480",
    "end": "662120"
  },
  {
    "text": "two so this is the string templating",
    "start": "662120",
    "end": "664600"
  },
  {
    "text": "character the fact that I added the new",
    "start": "664600",
    "end": "666560"
  },
  {
    "text": "line in string templates just recognize",
    "start": "666560",
    "end": "668680"
  },
  {
    "text": "that and say oh you want a new line I'll",
    "start": "668680",
    "end": "670160"
  },
  {
    "text": "insert it in for you so you can actually",
    "start": "670160",
    "end": "671839"
  },
  {
    "text": "do formatted text as a template with all",
    "start": "671839",
    "end": "675000"
  },
  {
    "text": "the line breaks correct and it'll just",
    "start": "675000",
    "end": "676959"
  },
  {
    "text": "work out of the box um the next line you",
    "start": "676959",
    "end": "679920"
  },
  {
    "text": "can see um placeholder values and this",
    "start": "679920",
    "end": "681720"
  },
  {
    "text": "is one of the things I think most people",
    "start": "681720",
    "end": "683000"
  },
  {
    "text": "who use string templates use I say 15 is",
    "start": "683000",
    "end": "687279"
  },
  {
    "text": "dollar sign curly braces a plus plus b",
    "start": "687279",
    "end": "690120"
  },
  {
    "text": "and line bre not you know a bunch of",
    "start": "690120",
    "end": "692560"
  },
  {
    "text": "other stuff that that uh what's inside",
    "start": "692560",
    "end": "695600"
  },
  {
    "text": "those curly brakes is interpolated and",
    "start": "695600",
    "end": "697040"
  },
  {
    "text": "directly inserted into the string",
    "start": "697040",
    "end": "698880"
  },
  {
    "text": "without doing string",
    "start": "698880",
    "end": "700120"
  },
  {
    "text": "concatenation so this is a really nice",
    "start": "700120",
    "end": "702920"
  },
  {
    "text": "uh feature of string templates and I",
    "start": "702920",
    "end": "704440"
  },
  {
    "text": "think this is most of the use case at",
    "start": "704440",
    "end": "706040"
  },
  {
    "text": "least this is how we primarily use them",
    "start": "706040",
    "end": "707480"
  },
  {
    "text": "at Open Table all right so I've I've",
    "start": "707480",
    "end": "709920"
  },
  {
    "text": "rushed you through a bunch of syntax now",
    "start": "709920",
    "end": "712160"
  },
  {
    "text": "I'm going to rush you even more through",
    "start": "712160",
    "end": "713360"
  },
  {
    "text": "a bunch of new data structures that es6",
    "start": "713360",
    "end": "715639"
  },
  {
    "text": "gives you that are available through all",
    "start": "715639",
    "end": "717839"
  },
  {
    "text": "modern Evergreen browsers so it's set",
    "start": "717839",
    "end": "720760"
  },
  {
    "text": "map week set week map symbol and promise",
    "start": "720760",
    "end": "725760"
  },
  {
    "text": "and again these are all available to you",
    "start": "725760",
    "end": "727760"
  },
  {
    "text": "today all right what's a set uh a set is",
    "start": "727760",
    "end": "731120"
  },
  {
    "text": "basically like a set of Boolean",
    "start": "731120",
    "end": "733000"
  },
  {
    "text": "Flags uh you you knew up a set and then",
    "start": "733000",
    "end": "735880"
  },
  {
    "text": "you add a bunch of things to it",
    "start": "735880",
    "end": "737880"
  },
  {
    "text": "Primitives or complex objects it doesn't",
    "start": "737880",
    "end": "739839"
  },
  {
    "text": "matter and then it basically checks for",
    "start": "739839",
    "end": "741839"
  },
  {
    "text": "uniqueness of those values and then",
    "start": "741839",
    "end": "743519"
  },
  {
    "text": "keeps track of those so you can see on",
    "start": "743519",
    "end": "744959"
  },
  {
    "text": "the that second line I say s. add hello",
    "start": "744959",
    "end": "747680"
  },
  {
    "text": "I add hello again and then I add object",
    "start": "747680",
    "end": "750480"
  },
  {
    "text": "the next line I say what's the size of",
    "start": "750480",
    "end": "751959"
  },
  {
    "text": "this set it says two because I added",
    "start": "751959",
    "end": "753639"
  },
  {
    "text": "Hello twice it just throws out the",
    "start": "753639",
    "end": "755519"
  },
  {
    "text": "second reference and it says I've got",
    "start": "755519",
    "end": "757240"
  },
  {
    "text": "two objects the next line is say s has",
    "start": "757240",
    "end": "759920"
  },
  {
    "text": "hello that would return true so it's",
    "start": "759920",
    "end": "762399"
  },
  {
    "text": "basically just a way of keeping track of",
    "start": "762399",
    "end": "763760"
  },
  {
    "text": "like what objects have you",
    "start": "763760",
    "end": "765279"
  },
  {
    "text": "seen um and and with with the caveat",
    "start": "765279",
    "end": "768240"
  },
  {
    "text": "that it um allows you to see like",
    "start": "768240",
    "end": "769959"
  },
  {
    "text": "uniqueness you can keep adding the same",
    "start": "769959",
    "end": "771440"
  },
  {
    "text": "object hundreds of times and it would",
    "start": "771440",
    "end": "772560"
  },
  {
    "text": "just keep throwing it out and those",
    "start": "772560",
    "end": "774079"
  },
  {
    "text": "objects can be uh complex types and on",
    "start": "774079",
    "end": "776600"
  },
  {
    "text": "the next line you see four let key of",
    "start": "776600",
    "end": "778600"
  },
  {
    "text": "blah and that actually prints it out in",
    "start": "778600",
    "end": "780440"
  },
  {
    "text": "insertion order so you can keep adding",
    "start": "780440",
    "end": "782600"
  },
  {
    "text": "objects to this and then print out what",
    "start": "782600",
    "end": "784959"
  },
  {
    "text": "order did it actually see those objects",
    "start": "784959",
    "end": "787160"
  },
  {
    "text": "which is kind of nice all right uh now",
    "start": "787160",
    "end": "790519"
  },
  {
    "text": "there's a map uh this is very much like",
    "start": "790519",
    "end": "793120"
  },
  {
    "text": "a hash map except it takes uh n Only",
    "start": "793120",
    "end": "795440"
  },
  {
    "text": "Primitives but complex types so you can",
    "start": "795440",
    "end": "797839"
  },
  {
    "text": "see here I uh create a new map I set the",
    "start": "797839",
    "end": "801560"
  },
  {
    "text": "value I say the key hello is equal to 42",
    "start": "801560",
    "end": "804440"
  },
  {
    "text": "then I say the key object s is equal to",
    "start": "804440",
    "end": "807560"
  },
  {
    "text": "34 and then I say you know get the value",
    "start": "807560",
    "end": "810560"
  },
  {
    "text": "with that complex value s and it says oh",
    "start": "810560",
    "end": "812279"
  },
  {
    "text": "yeah it's it's 34 and then I ask for the",
    "start": "812279",
    "end": "814440"
  },
  {
    "text": "size and it's two so somewhat similar um",
    "start": "814440",
    "end": "817800"
  },
  {
    "text": "uh interfaces and then down there forl",
    "start": "817800",
    "end": "820600"
  },
  {
    "text": "of key Val of M entry same thing it's",
    "start": "820600",
    "end": "822480"
  },
  {
    "text": "done in insertion order so this is like",
    "start": "822480",
    "end": "824480"
  },
  {
    "text": "a very robust hash table that they've",
    "start": "824480",
    "end": "826320"
  },
  {
    "text": "added to JavaScript if you guys uh need",
    "start": "826320",
    "end": "829320"
  },
  {
    "text": "it now the next two are probably the",
    "start": "829320",
    "end": "831279"
  },
  {
    "text": "ones that the least people are using and",
    "start": "831279",
    "end": "832880"
  },
  {
    "text": "are probably the in my opinion the most",
    "start": "832880",
    "end": "835000"
  },
  {
    "text": "useful um week set all right week set is",
    "start": "835000",
    "end": "838399"
  },
  {
    "text": "a way to keep track of what objects",
    "start": "838399",
    "end": "840040"
  },
  {
    "text": "you've seen But as soon as they're ready",
    "start": "840040",
    "end": "841800"
  },
  {
    "text": "to be garbage collected uh they're taken",
    "start": "841800",
    "end": "844079"
  },
  {
    "text": "out of the",
    "start": "844079",
    "end": "846360"
  },
  {
    "text": "set excuse me so you see see at the top",
    "start": "846360",
    "end": "850079"
  },
  {
    "text": "I say let thing to delete equals an",
    "start": "850079",
    "end": "851920"
  },
  {
    "text": "object the next line I say let WS equal",
    "start": "851920",
    "end": "854920"
  },
  {
    "text": "new week set then I set the object WS",
    "start": "854920",
    "end": "858600"
  },
  {
    "text": "week set. set thing to delete uh one",
    "start": "858600",
    "end": "860959"
  },
  {
    "text": "thing one caveat with weak set is that",
    "start": "860959",
    "end": "862680"
  },
  {
    "text": "the objects cannot be Primitives they",
    "start": "862680",
    "end": "864120"
  },
  {
    "text": "have to be complex objects or arrays or",
    "start": "864120",
    "end": "866320"
  },
  {
    "text": "other types so then the next line I go",
    "start": "866320",
    "end": "868720"
  },
  {
    "text": "you know have I seen this thing and it",
    "start": "868720",
    "end": "870320"
  },
  {
    "text": "says yeah you've seen it on the next",
    "start": "870320",
    "end": "872519"
  },
  {
    "text": "line I delete that object I basically",
    "start": "872519",
    "end": "874199"
  },
  {
    "text": "mark it for garbage collection on that",
    "start": "874199",
    "end": "876360"
  },
  {
    "text": "very next line if I check if that object",
    "start": "876360",
    "end": "878240"
  },
  {
    "text": "exists the week set will say no so if",
    "start": "878240",
    "end": "880839"
  },
  {
    "text": "you ever have like let's say a dynamic",
    "start": "880839",
    "end": "882480"
  },
  {
    "text": "page you've like dynamically creating",
    "start": "882480",
    "end": "884279"
  },
  {
    "text": "sections of a page you could load them",
    "start": "884279",
    "end": "885720"
  },
  {
    "text": "into a week set and you've said you know",
    "start": "885720",
    "end": "887959"
  },
  {
    "text": "oh have I loaded this stuff and it would",
    "start": "887959",
    "end": "889759"
  },
  {
    "text": "tell you yes but then as soon as those",
    "start": "889759",
    "end": "891560"
  },
  {
    "text": "Dynamic portions are deleted you're not",
    "start": "891560",
    "end": "893480"
  },
  {
    "text": "going to hold a reference to them so the",
    "start": "893480",
    "end": "894800"
  },
  {
    "text": "garbage collection can freely collect",
    "start": "894800",
    "end": "896560"
  },
  {
    "text": "them so it's a great way if you're like",
    "start": "896560",
    "end": "898560"
  },
  {
    "text": "checking for you know conditions before",
    "start": "898560",
    "end": "900399"
  },
  {
    "text": "loading Dynamic uh features that are",
    "start": "900399",
    "end": "903000"
  },
  {
    "text": "going to you know come in and out of",
    "start": "903000",
    "end": "904240"
  },
  {
    "text": "memory it's a great way to do this",
    "start": "904240",
    "end": "905680"
  },
  {
    "text": "without introducing memory",
    "start": "905680",
    "end": "907720"
  },
  {
    "text": "links weak map is the kind of the same",
    "start": "907720",
    "end": "910399"
  },
  {
    "text": "concept except it's it's the hashtable",
    "start": "910399",
    "end": "912079"
  },
  {
    "text": "concept so I have an object to delete",
    "start": "912079",
    "end": "914800"
  },
  {
    "text": "let WM equal new week set I set a",
    "start": "914800",
    "end": "917959"
  },
  {
    "text": "complex object to a value now again the",
    "start": "917959",
    "end": "920399"
  },
  {
    "text": "key cannot be a primitive it has to be a",
    "start": "920399",
    "end": "922120"
  },
  {
    "text": "complex type and then I go and I grab",
    "start": "922120",
    "end": "924560"
  },
  {
    "text": "that you know I say hey give me what",
    "start": "924560",
    "end": "926519"
  },
  {
    "text": "that object uh value is I set earlier",
    "start": "926519",
    "end": "929040"
  },
  {
    "text": "and it's 42 in this case then I delete",
    "start": "929040",
    "end": "931600"
  },
  {
    "text": "it and then I go hey does that is that",
    "start": "931600",
    "end": "933720"
  },
  {
    "text": "thing in there and it goes nope not",
    "start": "933720",
    "end": "935240"
  },
  {
    "text": "there and then if I try to get the value",
    "start": "935240",
    "end": "936720"
  },
  {
    "text": "it just return undefined this is",
    "start": "936720",
    "end": "939040"
  },
  {
    "text": "extremely useful in the case of like",
    "start": "939040",
    "end": "941160"
  },
  {
    "text": "tracking event listeners you can",
    "start": "941160",
    "end": "942880"
  },
  {
    "text": "register event listeners get them and as",
    "start": "942880",
    "end": "945040"
  },
  {
    "text": "soon as the object disappears from",
    "start": "945040",
    "end": "946279"
  },
  {
    "text": "memory there's no pointer from the event",
    "start": "946279",
    "end": "948279"
  },
  {
    "text": "listener to the object which keeps both",
    "start": "948279",
    "end": "949800"
  },
  {
    "text": "of them in memory so again these are",
    "start": "949800",
    "end": "951959"
  },
  {
    "text": "really useful concept if you're doing",
    "start": "951959",
    "end": "953399"
  },
  {
    "text": "like uh any type of um Dynamic objects",
    "start": "953399",
    "end": "956600"
  },
  {
    "text": "in the browser where you want things you",
    "start": "956600",
    "end": "958040"
  },
  {
    "text": "know to not not leak memory all right uh",
    "start": "958040",
    "end": "961079"
  },
  {
    "text": "symbol symbol is probably the one that",
    "start": "961079",
    "end": "964000"
  },
  {
    "text": "people have the least idea what to do",
    "start": "964000",
    "end": "965360"
  },
  {
    "text": "with it but it's actually really useful",
    "start": "965360",
    "end": "966680"
  },
  {
    "text": "on a lot of different uh instances okay",
    "start": "966680",
    "end": "968880"
  },
  {
    "text": "so just bear with me and I'll explain",
    "start": "968880",
    "end": "970959"
  },
  {
    "text": "the use after I walk through it a bit um",
    "start": "970959",
    "end": "973759"
  },
  {
    "text": "so symbol fu is not equal to symbol Fu",
    "start": "973759",
    "end": "976319"
  },
  {
    "text": "every symbol you create is globally",
    "start": "976319",
    "end": "978319"
  },
  {
    "text": "unique no matter what keyword you pass",
    "start": "978319",
    "end": "980759"
  },
  {
    "text": "into it or what variable you pass in so",
    "start": "980759",
    "end": "983000"
  },
  {
    "text": "you can see there I say you know con Fu",
    "start": "983000",
    "end": "984920"
  },
  {
    "text": "and bar are equal to uh new symbols I",
    "start": "984920",
    "end": "987839"
  },
  {
    "text": "say type of fu and it it gives me back",
    "start": "987839",
    "end": "990199"
  },
  {
    "text": "oh this is a symbol and then I create an",
    "start": "990199",
    "end": "992680"
  },
  {
    "text": "object I say let object you know might",
    "start": "992680",
    "end": "994600"
  },
  {
    "text": "create an object and then I say object f",
    "start": "994600",
    "end": "997079"
  },
  {
    "text": "is equal to the word Foo object bar is",
    "start": "997079",
    "end": "998759"
  },
  {
    "text": "equal to the word bar so I've said",
    "start": "998759",
    "end": "1000800"
  },
  {
    "text": "object this symbol is equal to the value",
    "start": "1000800",
    "end": "1002680"
  },
  {
    "text": "Foo object this symbol is equal to the",
    "start": "1002680",
    "end": "1004079"
  },
  {
    "text": "value bar then if I Json stringify that",
    "start": "1004079",
    "end": "1006680"
  },
  {
    "text": "object those symbols aren't there and if",
    "start": "1006680",
    "end": "1008920"
  },
  {
    "text": "I object if I do an object. keys on that",
    "start": "1008920",
    "end": "1010959"
  },
  {
    "text": "object those symbols aren't there so",
    "start": "1010959",
    "end": "1013040"
  },
  {
    "text": "basically I've created an object I can't",
    "start": "1013040",
    "end": "1015360"
  },
  {
    "text": "you know I've created these properties",
    "start": "1015360",
    "end": "1016839"
  },
  {
    "text": "that can't be found and so like what",
    "start": "1016839",
    "end": "1019240"
  },
  {
    "text": "what's the use of that well one you",
    "start": "1019240",
    "end": "1021240"
  },
  {
    "text": "could create private variables with them",
    "start": "1021240",
    "end": "1022959"
  },
  {
    "text": "you can introspect symbols but it's just",
    "start": "1022959",
    "end": "1025720"
  },
  {
    "text": "it's not easy it's basically like kind",
    "start": "1025720",
    "end": "1027760"
  },
  {
    "text": "of out of the primary path of how people",
    "start": "1027760",
    "end": "1029760"
  },
  {
    "text": "get properties so it's an easy way to",
    "start": "1029760",
    "end": "1032038"
  },
  {
    "text": "tack on little bits of private data that",
    "start": "1032039",
    "end": "1034360"
  },
  {
    "text": "you don't want your consumers to see but",
    "start": "1034360",
    "end": "1035720"
  },
  {
    "text": "you want somehow to be able to be",
    "start": "1035720",
    "end": "1037120"
  },
  {
    "text": "surfaced another thing you can do with",
    "start": "1037120",
    "end": "1038839"
  },
  {
    "text": "this is like metaprogramming you could",
    "start": "1038839",
    "end": "1041240"
  },
  {
    "text": "use a symbol to Define like logger",
    "start": "1041240",
    "end": "1043280"
  },
  {
    "text": "behavior for a whole class of objects",
    "start": "1043280",
    "end": "1045600"
  },
  {
    "text": "and then you say hey if this symbol",
    "start": "1045600",
    "end": "1047079"
  },
  {
    "text": "exists on this object log it in a",
    "start": "1047079",
    "end": "1049799"
  },
  {
    "text": "different way or or give you know",
    "start": "1049799",
    "end": "1051640"
  },
  {
    "text": "provide additional data so you can kind",
    "start": "1051640",
    "end": "1053400"
  },
  {
    "text": "of change the behavior of built-in uh",
    "start": "1053400",
    "end": "1055799"
  },
  {
    "text": "pieces of code based off these symbols",
    "start": "1055799",
    "end": "1058360"
  },
  {
    "text": "the other thing that they're really used",
    "start": "1058360",
    "end": "1059320"
  },
  {
    "text": "for is constants if you're creating like",
    "start": "1059320",
    "end": "1061120"
  },
  {
    "text": "a mass of like kind of like enumerations",
    "start": "1061120",
    "end": "1062760"
  },
  {
    "text": "you can say each one's a different",
    "start": "1062760",
    "end": "1064039"
  },
  {
    "text": "symbol and you'll you'll be guaranteed",
    "start": "1064039",
    "end": "1065799"
  },
  {
    "text": "that they're globally unique and that",
    "start": "1065799",
    "end": "1067080"
  },
  {
    "text": "they can't possibly overlap with any",
    "start": "1067080",
    "end": "1068520"
  },
  {
    "text": "other symbol in your",
    "start": "1068520",
    "end": "1071200"
  },
  {
    "text": "system and if you have questions I'm",
    "start": "1071200",
    "end": "1073000"
  },
  {
    "text": "going to stick around after this I see a",
    "start": "1073000",
    "end": "1074360"
  },
  {
    "text": "lot of questions right now uh and the",
    "start": "1074360",
    "end": "1076360"
  },
  {
    "text": "last object I'm going to talk about are",
    "start": "1076360",
    "end": "1078360"
  },
  {
    "text": "piece of taex I was going to talk about",
    "start": "1078360",
    "end": "1079880"
  },
  {
    "text": "his promise but promises I feel like",
    "start": "1079880",
    "end": "1082799"
  },
  {
    "text": "who's used promises in",
    "start": "1082799",
    "end": "1084760"
  },
  {
    "text": "here I'm not going to talk about them",
    "start": "1084760",
    "end": "1086640"
  },
  {
    "text": "they're part of the language they're",
    "start": "1086640",
    "end": "1087640"
  },
  {
    "text": "baked in you don't need a third party",
    "start": "1087640",
    "end": "1088919"
  },
  {
    "text": "Library anymore they're available to you",
    "start": "1088919",
    "end": "1091760"
  },
  {
    "text": "um so what else is there that I can't",
    "start": "1091760",
    "end": "1093559"
  },
  {
    "text": "talk about in 20 minutes that I wish I",
    "start": "1093559",
    "end": "1095280"
  },
  {
    "text": "could the class keyword the super",
    "start": "1095280",
    "end": "1098440"
  },
  {
    "text": "keyword and generators these are like",
    "start": "1098440",
    "end": "1100880"
  },
  {
    "text": "probably 20 minute talks the first two",
    "start": "1100880",
    "end": "1102679"
  },
  {
    "text": "and the last one on their own and I just",
    "start": "1102679",
    "end": "1104320"
  },
  {
    "text": "didn't have space to fit them in but",
    "start": "1104320",
    "end": "1106080"
  },
  {
    "text": "they're globally available in all of the",
    "start": "1106080",
    "end": "1107919"
  },
  {
    "text": "modern Evergreen browsers to you right",
    "start": "1107919",
    "end": "1109679"
  },
  {
    "text": "now so what's not available to you and",
    "start": "1109679",
    "end": "1112520"
  },
  {
    "text": "and what is not shared between all the",
    "start": "1112520",
    "end": "1114280"
  },
  {
    "text": "browsers uh proxies which if you um",
    "start": "1114280",
    "end": "1117240"
  },
  {
    "text": "haven't heard of or seen they're",
    "start": "1117240",
    "end": "1118919"
  },
  {
    "text": "basically a way to like wrap an object",
    "start": "1118919",
    "end": "1120840"
  },
  {
    "text": "and then anytime anyone interacts with",
    "start": "1120840",
    "end": "1122559"
  },
  {
    "text": "that object you can raise an event and",
    "start": "1122559",
    "end": "1124080"
  },
  {
    "text": "then like kind of track what's going on",
    "start": "1124080",
    "end": "1126080"
  },
  {
    "text": "it's a really interesting way to",
    "start": "1126080",
    "end": "1127280"
  },
  {
    "text": "interact with objects you could say",
    "start": "1127280",
    "end": "1128440"
  },
  {
    "text": "every time a function is called call you",
    "start": "1128440",
    "end": "1131080"
  },
  {
    "text": "know call call a logger or something is",
    "start": "1131080",
    "end": "1133159"
  },
  {
    "text": "that example so it's like really it's a",
    "start": "1133159",
    "end": "1134400"
  },
  {
    "text": "way to basically introduce like kind of",
    "start": "1134400",
    "end": "1135640"
  },
  {
    "text": "aspect oriented programming in a",
    "start": "1135640",
    "end": "1137360"
  },
  {
    "text": "JavaScript",
    "start": "1137360",
    "end": "1139360"
  },
  {
    "text": "um destructuring they talked a little",
    "start": "1139360",
    "end": "1141080"
  },
  {
    "text": "bit about this earlier this is something",
    "start": "1141080",
    "end": "1142640"
  },
  {
    "text": "we use really extensively at uh Open",
    "start": "1142640",
    "end": "1144640"
  },
  {
    "text": "Table in our code base and we really",
    "start": "1144640",
    "end": "1146120"
  },
  {
    "text": "like and we think it simplifies but it's",
    "start": "1146120",
    "end": "1147799"
  },
  {
    "text": "just not not widely available um and the",
    "start": "1147799",
    "end": "1150840"
  },
  {
    "text": "last thing is subclassing array in",
    "start": "1150840",
    "end": "1152679"
  },
  {
    "text": "functions and other uh baked in like uh",
    "start": "1152679",
    "end": "1155280"
  },
  {
    "text": "primitive types or complex types so in",
    "start": "1155280",
    "end": "1158240"
  },
  {
    "text": "the future in es6 in this six in the",
    "start": "1158240",
    "end": "1160559"
  },
  {
    "text": "spec you'll be able to do something like",
    "start": "1160559",
    "end": "1161919"
  },
  {
    "text": "say I want to have an uh this something",
    "start": "1161919",
    "end": "1164919"
  },
  {
    "text": "called like a promise array that",
    "start": "1164919",
    "end": "1166080"
  },
  {
    "text": "inherits from an array and maybe",
    "start": "1166080",
    "end": "1167840"
  },
  {
    "text": "overwrite some of the base methods that",
    "start": "1167840",
    "end": "1169440"
  },
  {
    "text": "hang off of array currently that's not",
    "start": "1169440",
    "end": "1171320"
  },
  {
    "text": "possible that's coming but it's just not",
    "start": "1171320",
    "end": "1173240"
  },
  {
    "text": "widely",
    "start": "1173240",
    "end": "1174760"
  },
  {
    "text": "available all right so right now if you",
    "start": "1174760",
    "end": "1177640"
  },
  {
    "text": "wanted to write like the latest and",
    "start": "1177640",
    "end": "1179000"
  },
  {
    "text": "greatest es6 code what are your options",
    "start": "1179000",
    "end": "1181679"
  },
  {
    "text": "well you could write us if you know if",
    "start": "1181679",
    "end": "1183000"
  },
  {
    "text": "you have control your user base you're",
    "start": "1183000",
    "end": "1184400"
  },
  {
    "text": "like maybe like have internal users you",
    "start": "1184400",
    "end": "1186159"
  },
  {
    "text": "could write a client single page app in",
    "start": "1186159",
    "end": "1188039"
  },
  {
    "text": "in ch Chrome 49 plus give you 91 per 91%",
    "start": "1188039",
    "end": "1192919"
  },
  {
    "text": "of es6 uh it would give you proxies D",
    "start": "1192919",
    "end": "1196440"
  },
  {
    "text": "structuring and subclassing of the uh",
    "start": "1196440",
    "end": "1198799"
  },
  {
    "text": "ative types but doesn't have module",
    "start": "1198799",
    "end": "1200520"
  },
  {
    "text": "import or export you have to still use",
    "start": "1200520",
    "end": "1202039"
  },
  {
    "text": "something like browsery and require",
    "start": "1202039",
    "end": "1203960"
  },
  {
    "text": "require address or something else to get",
    "start": "1203960",
    "end": "1206159"
  },
  {
    "text": "module Import in there uh you could",
    "start": "1206159",
    "end": "1208280"
  },
  {
    "text": "write an Internet of Things application",
    "start": "1208280",
    "end": "1209640"
  },
  {
    "text": "using the X uh xs6 runtime um I never",
    "start": "1209640",
    "end": "1212720"
  },
  {
    "text": "heard of this runtime before but",
    "start": "1212720",
    "end": "1213960"
  },
  {
    "text": "apparently it has 97% of es6 implemented",
    "start": "1213960",
    "end": "1217720"
  },
  {
    "text": "um but unfortunately it's limited to",
    "start": "1217720",
    "end": "1219120"
  },
  {
    "text": "proprietary Hardware so it's kind of",
    "start": "1219120",
    "end": "1221120"
  },
  {
    "text": "like if you want to use es6 on their",
    "start": "1221120",
    "end": "1223080"
  },
  {
    "text": "boards you can use this runtime and it",
    "start": "1223080",
    "end": "1225320"
  },
  {
    "text": "will work and it'll give you most of the",
    "start": "1225320",
    "end": "1227200"
  },
  {
    "text": "language um the last thing you can do is",
    "start": "1227200",
    "end": "1229280"
  },
  {
    "text": "use like node 45 use like Babble on top",
    "start": "1229280",
    "end": "1232280"
  },
  {
    "text": "of it give you 75% of es6 it gives you",
    "start": "1232280",
    "end": "1235799"
  },
  {
    "text": "destructuring it gives you module Import",
    "start": "1235799",
    "end": "1237720"
  },
  {
    "text": "and Export um and it also can give you",
    "start": "1237720",
    "end": "1240600"
  },
  {
    "text": "some other features because Babble",
    "start": "1240600",
    "end": "1242240"
  },
  {
    "text": "allows you to put in plugins into uh its",
    "start": "1242240",
    "end": "1244240"
  },
  {
    "text": "infrastructure so you can start using uh",
    "start": "1244240",
    "end": "1246120"
  },
  {
    "text": "other things like es7 for sync on a",
    "start": "1246120",
    "end": "1248280"
  },
  {
    "text": "weight object rest spread you can also",
    "start": "1248280",
    "end": "1251039"
  },
  {
    "text": "use things like jsx typescript flow",
    "start": "1251039",
    "end": "1253400"
  },
  {
    "text": "things that are outside of the language",
    "start": "1253400",
    "end": "1255480"
  },
  {
    "text": "uh with this approach because Babble is",
    "start": "1255480",
    "end": "1256760"
  },
  {
    "text": "more like a a platform than uh than just",
    "start": "1256760",
    "end": "1259400"
  },
  {
    "text": "an es6",
    "start": "1259400",
    "end": "1260799"
  },
  {
    "text": "transpiler all right uh thanks so much",
    "start": "1260799",
    "end": "1263200"
  },
  {
    "text": "for your time I know I rushed through a",
    "start": "1263200",
    "end": "1264480"
  },
  {
    "text": "lot of material very densely uh this is",
    "start": "1264480",
    "end": "1267440"
  },
  {
    "text": "the link to my blog that's the get up",
    "start": "1267440",
    "end": "1269120"
  },
  {
    "text": "link which has all this uh all these",
    "start": "1269120",
    "end": "1270840"
  },
  {
    "text": "slides and all my notes and those two",
    "start": "1270840",
    "end": "1272799"
  },
  {
    "text": "Links at the top are kind of like invalu",
    "start": "1272799",
    "end": "1274760"
  },
  {
    "text": "if you want to find out what features",
    "start": "1274760",
    "end": "1276400"
  },
  {
    "text": "are available where and then how those",
    "start": "1276400",
    "end": "1278000"
  },
  {
    "text": "features work and uh does anybody have",
    "start": "1278000",
    "end": "1280679"
  },
  {
    "text": "any questions we have a",
    "start": "1280679",
    "end": "1282240"
  },
  {
    "text": "minute and actually no you know what",
    "start": "1282240",
    "end": "1284200"
  },
  {
    "text": "there's a break after this so",
    "start": "1284200",
    "end": "1285279"
  },
  {
    "text": "technically we have a minute and then if",
    "start": "1285279",
    "end": "1286919"
  },
  {
    "text": "you don't want to wait for the break I",
    "start": "1286919",
    "end": "1287960"
  },
  {
    "text": "can answer some more",
    "start": "1287960",
    "end": "1289400"
  },
  {
    "text": "questions in the",
    "start": "1289400",
    "end": "1292279"
  },
  {
    "text": "back a symbol in",
    "start": "1292279",
    "end": "1294840"
  },
  {
    "text": "Json um I'm I guess I'm not 100%",
    "start": "1294840",
    "end": "1298320"
  },
  {
    "text": "understanding your question do you mean",
    "start": "1298320",
    "end": "1299200"
  },
  {
    "text": "like a JavaScript object like how would",
    "start": "1299200",
    "end": "1301320"
  },
  {
    "text": "you use it on an object or what how",
    "start": "1301320",
    "end": "1302720"
  },
  {
    "text": "would you use it like Json across the",
    "start": "1302720",
    "end": "1304919"
  },
  {
    "text": "wire because symbols won't show up in",
    "start": "1304919",
    "end": "1306960"
  },
  {
    "text": "Json like as it is right now like if you",
    "start": "1306960",
    "end": "1308840"
  },
  {
    "text": "do Json stringify you will never see",
    "start": "1308840",
    "end": "1311159"
  },
  {
    "text": "symbols",
    "start": "1311159",
    "end": "1313880"
  },
  {
    "text": "yeah not really not for that use case",
    "start": "1317080",
    "end": "1319640"
  },
  {
    "text": "you can't really pass symbols across the",
    "start": "1319640",
    "end": "1321159"
  },
  {
    "text": "wire the way it's built I mean if you",
    "start": "1321159",
    "end": "1322640"
  },
  {
    "text": "wanted to write a custom implementation",
    "start": "1322640",
    "end": "1324159"
  },
  {
    "text": "of Json stringify you can interspect out",
    "start": "1324159",
    "end": "1327159"
  },
  {
    "text": "symbols you can find out all the symbols",
    "start": "1327159",
    "end": "1328919"
  },
  {
    "text": "on an object then you'd have to write",
    "start": "1328919",
    "end": "1330720"
  },
  {
    "text": "like your own syntax and it wouldn't",
    "start": "1330720",
    "end": "1332159"
  },
  {
    "text": "really be Json anymore does that make",
    "start": "1332159",
    "end": "1334679"
  },
  {
    "text": "sense all right any other questions",
    "start": "1334679",
    "end": "1337360"
  },
  {
    "text": "you uh shallow comparison it's looking",
    "start": "1337360",
    "end": "1339480"
  },
  {
    "text": "at object references so it's not doing",
    "start": "1339480",
    "end": "1341000"
  },
  {
    "text": "like it's not checking if the properties",
    "start": "1341000",
    "end": "1342360"
  },
  {
    "text": "all Al",
    "start": "1342360",
    "end": "1343840"
  },
  {
    "text": "line if you cloned it you could set them",
    "start": "1343840",
    "end": "1346320"
  },
  {
    "text": "both that's right uh right there",
    "start": "1346320",
    "end": "1349640"
  },
  {
    "text": "okay so there's a performance",
    "start": "1349640",
    "end": "1351559"
  },
  {
    "text": "implication if you're transpiling and",
    "start": "1351559",
    "end": "1353799"
  },
  {
    "text": "there's a performance implication if",
    "start": "1353799",
    "end": "1355159"
  },
  {
    "text": "you're bundling using something like",
    "start": "1355159",
    "end": "1356720"
  },
  {
    "text": "browserify or webpack um what was the",
    "start": "1356720",
    "end": "1360159"
  },
  {
    "text": "other one I was looking at the other day",
    "start": "1360159",
    "end": "1361039"
  },
  {
    "text": "I can't remember but anyway so and but",
    "start": "1361039",
    "end": "1363000"
  },
  {
    "text": "the performance implementations at least",
    "start": "1363000",
    "end": "1364480"
  },
  {
    "text": "from browser find webpack are just like",
    "start": "1364480",
    "end": "1365840"
  },
  {
    "text": "the amount of code they add to to bash",
    "start": "1365840",
    "end": "1368559"
  },
  {
    "text": "everything together and then with",
    "start": "1368559",
    "end": "1370400"
  },
  {
    "text": "transpilers they're adding code to shim",
    "start": "1370400",
    "end": "1372320"
  },
  {
    "text": "out that feature so there's additional",
    "start": "1372320",
    "end": "1373799"
  },
  {
    "text": "code there now uh there is actually a",
    "start": "1373799",
    "end": "1376120"
  },
  {
    "text": "really great um article that's someone",
    "start": "1376120",
    "end": "1378679"
  },
  {
    "text": "who wrote that's costing the which is",
    "start": "1378679",
    "end": "1380880"
  },
  {
    "text": "called I think the cost of transpiling",
    "start": "1380880",
    "end": "1383279"
  },
  {
    "text": "es uh 2016 uh in 2015 if you Google that",
    "start": "1383279",
    "end": "1387640"
  },
  {
    "text": "you'll get a link I have a link actually",
    "start": "1387640",
    "end": "1388880"
  },
  {
    "text": "on my laptop if you want to come up",
    "start": "1388880",
    "end": "1390200"
  },
  {
    "text": "afterwards which really talks about like",
    "start": "1390200",
    "end": "1392120"
  },
  {
    "text": "what is the cost of using",
    "start": "1392120",
    "end": "1394080"
  },
  {
    "text": "es25 today so yeah there is a cost but",
    "start": "1394080",
    "end": "1397480"
  },
  {
    "text": "honestly it's like what is your",
    "start": "1397480",
    "end": "1398640"
  },
  {
    "text": "acceptable level of cost you're want to",
    "start": "1398640",
    "end": "1400600"
  },
  {
    "text": "deal",
    "start": "1400600",
    "end": "1401679"
  },
  {
    "text": "with uh it's it's similar to numeral",
    "start": "1401679",
    "end": "1404039"
  },
  {
    "text": "false it's just one use case it's just",
    "start": "1404039",
    "end": "1405960"
  },
  {
    "text": "like not having to use object defined",
    "start": "1405960",
    "end": "1408559"
  },
  {
    "text": "property you can just say symbol",
    "start": "1408559",
    "end": "1410039"
  },
  {
    "text": "property done and you're out and then um",
    "start": "1410039",
    "end": "1413080"
  },
  {
    "text": "and the fact is that like it's it's such",
    "start": "1413080",
    "end": "1415480"
  },
  {
    "text": "a separate use case I think I think",
    "start": "1415480",
    "end": "1417080"
  },
  {
    "text": "honestly the people who use symbols are",
    "start": "1417080",
    "end": "1419440"
  },
  {
    "text": "going to be people who are doing a lot",
    "start": "1419440",
    "end": "1420360"
  },
  {
    "text": "of meta programming it's not actually",
    "start": "1420360",
    "end": "1421559"
  },
  {
    "text": "going to be for the use of like a",
    "start": "1421559",
    "end": "1422840"
  },
  {
    "text": "private variable in the end it's for",
    "start": "1422840",
    "end": "1424799"
  },
  {
    "text": "people who want to like build Frameworks",
    "start": "1424799",
    "end": "1426960"
  },
  {
    "text": "that if you define the symbol on an",
    "start": "1426960",
    "end": "1429360"
  },
  {
    "text": "object it will behave",
    "start": "1429360",
    "end": "1432440"
  },
  {
    "text": "differently oh like what's the",
    "start": "1432919",
    "end": "1434400"
  },
  {
    "text": "underlying implementation I'm not sure",
    "start": "1434400",
    "end": "1436279"
  },
  {
    "text": "honestly I've more like tested the",
    "start": "1436279",
    "end": "1437600"
  },
  {
    "text": "behavior and po to",
    "start": "1437600",
    "end": "1439520"
  },
  {
    "text": "I mean it's basically a hash table but",
    "start": "1439520",
    "end": "1440880"
  },
  {
    "text": "like with complex keys so but honestly",
    "start": "1440880",
    "end": "1443400"
  },
  {
    "text": "under the hood I can't tell you about",
    "start": "1443400",
    "end": "1445120"
  },
  {
    "text": "each browser does it so I'm sorry about",
    "start": "1445120",
    "end": "1446880"
  },
  {
    "text": "that um actually I'm gonna end now but",
    "start": "1446880",
    "end": "1449360"
  },
  {
    "text": "if you guys want to come up I'll stick",
    "start": "1449360",
    "end": "1450320"
  },
  {
    "text": "around for a couple more minutes okay",
    "start": "1450320",
    "end": "1452000"
  },
  {
    "text": "right thanks a lot for coming",
    "start": "1452000",
    "end": "1455760"
  }
]