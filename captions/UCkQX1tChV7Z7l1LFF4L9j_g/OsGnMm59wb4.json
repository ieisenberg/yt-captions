[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "hi everyone my name is Colleen Eberhardt I'm the technology director of a company called Scott logic which I doubt any of",
    "start": "4070",
    "end": "10879"
  },
  {
    "text": "you've heard about we were a fairly small uk-based software consultancy that specializes in writing some large-scale",
    "start": "10879",
    "end": "18130"
  },
  {
    "text": "applications for financial services I spend a lot of time writing fairly large-scale JavaScript applications I'm",
    "start": "18130",
    "end": "25790"
  },
  {
    "text": "also a bit of a fan of webassembly as you might guess from the talk title I run the web assembly weekly newsletter",
    "start": "25790",
    "end": "32450"
  },
  {
    "text": "I've heard it's the most popular webassembly newsletter it's actually the only one but it's still the most popular",
    "start": "32450",
    "end": "37640"
  },
  {
    "text": "and I published the hundredth issue just yesterday so I'm pretty chuffed with that one of the reasons that I'm quite",
    "start": "37640",
    "end": "44360"
  },
  {
    "text": "interested in web assembly is there's a lot going on in that community there's a lot of innovation going on in fact just",
    "start": "44360",
    "end": "50570"
  },
  {
    "text": "yesterday there was an announcement about a new group called the bytecode allowance which is a new industry",
    "start": "50570",
    "end": "56270"
  },
  {
    "text": "partnership between a number of different companies that are looking to make a secure by default web assembly",
    "start": "56270",
    "end": "62480"
  },
  {
    "text": "ecosystem and this is actually intended to tackle some of the problems that were talked about in the previous talk around",
    "start": "62480",
    "end": "68270"
  },
  {
    "text": "and vulnerabilities in in untrusted third-party NPM modules so why do we",
    "start": "68270",
    "end": "75890"
  },
  {
    "start": "73000",
    "end": "476000"
  },
  {
    "text": "need web assembly actually a show of hands who knows about web assembly or has a fairly good idea about it oh wow",
    "start": "75890",
    "end": "81680"
  },
  {
    "text": "that's that's pretty cool that's good some looks like about half of you so why do we actually need it to me this slide",
    "start": "81680",
    "end": "90710"
  },
  {
    "text": "sums it up really quite nicely and to give you a bit of a context JavaScript was invented about 25 years ago and it",
    "start": "90710",
    "end": "97909"
  },
  {
    "text": "was originally conceived as a relatively simple scripting language to add a little bit of interactivity into into",
    "start": "97909",
    "end": "104119"
  },
  {
    "text": "the web these days we're not just writing a few hundred lines of code of",
    "start": "104119",
    "end": "109520"
  },
  {
    "text": "JavaScript typically we're writing thousands or tens of thousands of lines of code of JavaScript and the tooling we",
    "start": "109520",
    "end": "116030"
  },
  {
    "text": "have is really quite advanced compared to that which we had 20 or so years ago we've got like typed script and babel",
    "start": "116030",
    "end": "122360"
  },
  {
    "text": "we've got UI frameworks like react that are doing all these really quite clever things and our tooling is doing all",
    "start": "122360",
    "end": "128330"
  },
  {
    "text": "kinds of complex compilation transformation and transforms yet the thing that it emits is still JavaScript",
    "start": "128330",
    "end": "135950"
  },
  {
    "text": "this kind of of for skated hard to read JavaScript which has it scripts is a compilation target",
    "start": "135950",
    "end": "142900"
  },
  {
    "text": "some have called it the assembly language of the web you might think yeah that's that's fine well it's not fine",
    "start": "142900",
    "end": "149790"
  },
  {
    "text": "the reason it's not fine is is well to understand why it's not fine you have to look at how javascript is executed",
    "start": "149790",
    "end": "156430"
  },
  {
    "text": "within the browser so the first thing that happens is your browser end engine receives the characters over HTTP and",
    "start": "156430",
    "end": "162670"
  },
  {
    "text": "then it has to parse them into what's known as an abstract syntax tree and we'll get onto that in a little bit",
    "start": "162670",
    "end": "168159"
  },
  {
    "text": "from there it's able to generate a bytecode and at that point it's able to initially run your application using an",
    "start": "168159",
    "end": "174819"
  },
  {
    "text": "interpreter but the thing is interpreters are pretty slow javascript of 10-15 years ago was very slow because",
    "start": "174819",
    "end": "181719"
  },
  {
    "text": "it was just interpreted so these days the the runtime will monitor the execution of your application and it",
    "start": "181719",
    "end": "187870"
  },
  {
    "text": "will make some assumptions it'll make some assumptions about for example the types being used and from there it's able to just in time emit a compiled",
    "start": "187870",
    "end": "195669"
  },
  {
    "text": "version of your code which runs faster now modern browsers have multiple levels of optimization multiple tiers",
    "start": "195669",
    "end": "202859"
  },
  {
    "text": "unfortunately if some of the if some of the things they did to optimize your",
    "start": "202859",
    "end": "208870"
  },
  {
    "text": "code proved to be invalid if some of the assumptions are invalid it has to bail out and go to a slightly lower",
    "start": "208870",
    "end": "214989"
  },
  {
    "text": "performance tier so these days JavaScript runs really quite fast but",
    "start": "214989",
    "end": "221769"
  },
  {
    "text": "unfortunately because of the these steps you see in front of you it takes a long time to get there it's my Mike going on and off the whole",
    "start": "221769",
    "end": "228189"
  },
  {
    "text": "time was it yeah it should I switch so that my core I mean can ever can you all hear me still yeah",
    "start": "228189",
    "end": "234669"
  },
  {
    "text": "he's struggling at the back there I mean if if you having problems someone can grab a mic so what this means is from an",
    "start": "234669",
    "end": "243609"
  },
  {
    "text": "end-user perspective there's an impact there's an end there's an impact on how long it takes for your JavaScript",
    "start": "243609",
    "end": "249939"
  },
  {
    "text": "application to get up and running so the first thing as I mentioned previously as your code is passed it's compiled",
    "start": "249939",
    "end": "255609"
  },
  {
    "text": "optimized we optimized and eventually executed at a pretty decent speed and then it's eventually garbage collected",
    "start": "255609",
    "end": "262300"
  },
  {
    "text": "so the way that javascript is delivered to the browser today has an impact on the end users so what is web assembly",
    "start": "262300",
    "end": "270500"
  },
  {
    "text": "the on the web assembly website they have this really nice one-liner description web assembly is a new",
    "start": "270500",
    "end": "276590"
  },
  {
    "text": "portable size and load time efficient format suitable for compilation to the web and I'm going to just pick this",
    "start": "276590",
    "end": "281810"
  },
  {
    "text": "apart a little bit so it's portable as you'd expect it's a web technology you expect it to work in",
    "start": "281810",
    "end": "287270"
  },
  {
    "text": "Safari and chrome it in in edge for example its size and load time efficient",
    "start": "287270",
    "end": "293120"
  },
  {
    "text": "format it's not an ASCII format it's a binary format its load time efficient",
    "start": "293120",
    "end": "298730"
  },
  {
    "text": "it's designed to load and execute quickly and finally it's suitable for",
    "start": "298730",
    "end": "303860"
  },
  {
    "text": "compilation to the web javascript is not suitable for compilation to the web it was never ever designed to do that",
    "start": "303860",
    "end": "309830"
  },
  {
    "text": "whereas web assembly was designed with compilation in mind from day one also it was designed to be a compilation target",
    "start": "309830",
    "end": "316550"
  },
  {
    "text": "for a wide range of languages so not just Java scripts in fact Java scripts tricky to compile to web assembly but it",
    "start": "316550",
    "end": "323060"
  },
  {
    "text": "was designed for C++ C sharp rust Java to bring all those languages to the web",
    "start": "323060",
    "end": "328550"
  },
  {
    "text": "as well so finally to bring that home the the sort of timeline of execution of",
    "start": "328550",
    "end": "334580"
  },
  {
    "text": "JavaScript is shown at the top contrast that with web assembly all the browser has to do is decode compile",
    "start": "334580",
    "end": "341900"
  },
  {
    "text": "optimize and execute and this happens much more rapidly when compared to JavaScript and that's why we need web",
    "start": "341900",
    "end": "348710"
  },
  {
    "text": "assembly so why create a web assembly compiler why am i standing here telling",
    "start": "348710",
    "end": "355040"
  },
  {
    "text": "you about how to create your own web assembly compiler there's a couple of reasons first is is something I read at",
    "start": "355040",
    "end": "362270"
  },
  {
    "text": "the beginning of the year Stack Overflow each year publish a fascinating survey I think they have around about twenty",
    "start": "362270",
    "end": "368090"
  },
  {
    "text": "thousand respondents where let they ask people about the languages and the frameworks they use they also asked them",
    "start": "368090",
    "end": "374000"
  },
  {
    "text": "for their sentiments what what languages tools frameworks do they love what do they read maybe not hate you know what",
    "start": "374000",
    "end": "380690"
  },
  {
    "text": "what do they enjoy using and interestingly web assembly was the fifth most loved programming language I",
    "start": "380690",
    "end": "388820"
  },
  {
    "text": "thought that's nuts how many people out there are actually programming and web assembly web assembly was the only",
    "start": "388820",
    "end": "394640"
  },
  {
    "text": "compilation target listed under the most loved languages so I thought maybe",
    "start": "394640",
    "end": "400910"
  },
  {
    "text": "people want to know a little bit more about web assembly that the language itself so that was one of the ideas that made me think about writing",
    "start": "400910",
    "end": "407629"
  },
  {
    "text": "this talk the next one is I've always had a bit of a programming bucket list you know there are things that I've",
    "start": "407629",
    "end": "413449"
  },
  {
    "text": "always wanted to do as a programmer things like create an open source project and meet Brendan Eich which I did he's a lovely guy I came from a",
    "start": "413449",
    "end": "421549"
  },
  {
    "text": "physics background so I didn't study computer science so I never got the opportunity to learn about compilers and",
    "start": "421549",
    "end": "427399"
  },
  {
    "text": "so on and I've always wanted to do that so those two things couple together made me think okay I'm going to write might",
    "start": "427399",
    "end": "433939"
  },
  {
    "text": "create my own language I'm going to write a compiler that compiles it to web assembly and then I'm gonna do a talk on",
    "start": "433939",
    "end": "439189"
  },
  {
    "text": "it it took me many weeks and months and there's quite a lot to go through so",
    "start": "439189",
    "end": "444349"
  },
  {
    "text": "I've got what a four hour slot or something like yeah four hours okay yeah okay they'll bring food in later on yeah",
    "start": "444349",
    "end": "450679"
  },
  {
    "text": "so in order to constrain my my experimentation I had all kinds of crazy",
    "start": "450679",
    "end": "457069"
  },
  {
    "text": "ideas I thought I'm going to write a programming language that has enough structure to it to achieve a fairly",
    "start": "457069",
    "end": "463549"
  },
  {
    "text": "modest goal I want to create a programming language that allows me to render a simple fractal a Mandelbrot set",
    "start": "463549",
    "end": "470059"
  },
  {
    "text": "and this is an example of the language it's not a very nice-looking language but you know it'll do so let's take the",
    "start": "470059",
    "end": "478159"
  },
  {
    "start": "476000",
    "end": "561000"
  },
  {
    "text": "first step let's look at creating the most simple the most trivial weather module and with code so I'm using",
    "start": "478159",
    "end": "486169"
  },
  {
    "text": "typescript here so I'm going to construct the simplest was a module possible and it turns out the simplest",
    "start": "486169",
    "end": "491569"
  },
  {
    "text": "was a module is just eight bytes long it starts with a module header and if you're any good with with your ASCII",
    "start": "491569",
    "end": "498860"
  },
  {
    "text": "codes I'm sure you'll know 6170 360 is terrible okay it spells out a SM the",
    "start": "498860",
    "end": "507439"
  },
  {
    "text": "next is the module version number which at the moment is version one concatenate these together and you get the simplest",
    "start": "507439",
    "end": "513258"
  },
  {
    "text": "possible web assembly module now typically you wouldn't do this typically you wouldn't construct this in memory",
    "start": "513259",
    "end": "518328"
  },
  {
    "text": "typically this would be downloaded over HTTP as a binary was a module but you",
    "start": "518329",
    "end": "523969"
  },
  {
    "text": "can do either so in order to run this what you have to do is is is take your",
    "start": "523969",
    "end": "529819"
  },
  {
    "text": "take your your binary and instantiate it using the web assembly API so there's a",
    "start": "529819",
    "end": "534889"
  },
  {
    "text": "there's a new set of api's for JavaScript that you to instantiate and interact with web assembly modules this already",
    "start": "534889",
    "end": "541970"
  },
  {
    "text": "illustrates some quite interesting properties of web assembly you don't download it into the browser directly",
    "start": "541970",
    "end": "547070"
  },
  {
    "text": "from a script tag the only way to get a web assembly module instantiated and interact with it is through the",
    "start": "547070",
    "end": "553430"
  },
  {
    "text": "JavaScript host at the moment this web assembly module does absolutely nothing",
    "start": "553430",
    "end": "558470"
  },
  {
    "text": "but it's still a perfectly valid model module so let's make it a little bit more complicated let's try to create a",
    "start": "558470",
    "end": "565370"
  },
  {
    "start": "561000",
    "end": "804000"
  },
  {
    "text": "module that does something vaguely useful a simple ad function now rather than looking at it from the binary",
    "start": "565370",
    "end": "572540"
  },
  {
    "text": "format and looking at hex codes it's a little easier to look at it in the web assembly text format if you've ever done",
    "start": "572540",
    "end": "578899"
  },
  {
    "text": "any assembly language programming typically when you're doing low-level programming you'll use assembly language",
    "start": "578899",
    "end": "585500"
  },
  {
    "text": "which is a slightly more human readable version of the machine code that it represents and web assembly has that",
    "start": "585500",
    "end": "591200"
  },
  {
    "text": "this same kind of two different views we have the text format and the binary format and this is a very simple valid",
    "start": "591200",
    "end": "598279"
  },
  {
    "text": "web assembly module that provides an add function so it's a function that has two parameters of type float 32 bits it",
    "start": "598279",
    "end": "606920"
  },
  {
    "text": "returns a 32-bit result and the way that it works is it it gets the two parameters using the get local up opcode",
    "start": "606920",
    "end": "614420"
  },
  {
    "text": "and then it adds the two together and finally this is exported to the host so that it can execute it so this gives us",
    "start": "614420",
    "end": "621080"
  },
  {
    "text": "a little bit more insight into what web assembly is actually like it has a relatively simple instruction set it has",
    "start": "621080",
    "end": "627709"
  },
  {
    "text": "an assembly like instruction set if you've ever done in the assembly language programming it's got that feel to it it only has four numeric types it",
    "start": "627709",
    "end": "636200"
  },
  {
    "text": "has two integer types and two floating-point types and that's it it's a stack machine so you'll notice the add",
    "start": "636200",
    "end": "643010"
  },
  {
    "text": "the add operation here the to get locals set up the stack they push two values",
    "start": "643010",
    "end": "649160"
  },
  {
    "text": "onto the stack the add instruction pops those two values adds them together and pushes them to the stack",
    "start": "649160",
    "end": "655130"
  },
  {
    "text": "finally the function returns the remaining value on the stack one other interesting thing is the web assembly",
    "start": "655130",
    "end": "661579"
  },
  {
    "text": "has absolutely absolutely no built-in i/o it cannot access the Dom it can't access a file system it can't do a",
    "start": "661579",
    "end": "667910"
  },
  {
    "text": "console log and this is quite important for web assembly it means that the attack surface is is",
    "start": "667910",
    "end": "673340"
  },
  {
    "text": "is non-existent so the only way for webassembly to interact with the DOM or its host is",
    "start": "673340",
    "end": "678720"
  },
  {
    "text": "through exported and imported functions so to encode that in binary format the",
    "start": "678720",
    "end": "686190"
  },
  {
    "text": "binaries are arranged in two sections so you've seen the header in the version number following that you have the type",
    "start": "686190",
    "end": "692730"
  },
  {
    "text": "section and the import section and the function section these are these are packed together in sequence I'm not",
    "start": "692730",
    "end": "699990"
  },
  {
    "text": "going to go into too much detail you don't need to know the ins and outs of all of these the main reason it's split into these various different sections is",
    "start": "699990",
    "end": "706290"
  },
  {
    "text": "to minimize the size of the assembly module if you have two functions with the same same signature it makes sense",
    "start": "706290",
    "end": "712620"
  },
  {
    "text": "to have have those all encoded in the type section and reference them later that that's that's the main difference",
    "start": "712620",
    "end": "719190"
  },
  {
    "text": "between the text format and the binary format so let's construct an add function again in code in this case",
    "start": "719190",
    "end": "726480"
  },
  {
    "text": "using typescript so the code is really quite simple I have an enumeration of my",
    "start": "726480",
    "end": "731970"
  },
  {
    "text": "available op codes I'm just taking the get local op code following that I'm encoding the zero index this uses an",
    "start": "731970",
    "end": "739770"
  },
  {
    "text": "unsigned leb encoding all you need to know is that that's a very standard encoding which is a variable length",
    "start": "739770",
    "end": "745620"
  },
  {
    "text": "encoding it's between zero sorry one and four bytes long next I'm encoding my get",
    "start": "745620",
    "end": "750900"
  },
  {
    "text": "local opcode and finally the adopt code and that's it that's my web assembly code the next thing I need to do is",
    "start": "750900",
    "end": "758010"
  },
  {
    "text": "package that up into a function body and again this is using some very simple encoding the encode vector function all",
    "start": "758010",
    "end": "764760"
  },
  {
    "text": "it does is is sort of prefix my my vector with the length and that's it",
    "start": "764760",
    "end": "771170"
  },
  {
    "text": "finally I'm constructing my code section by encoding my vector of functions together and this is pretty much it it",
    "start": "771170",
    "end": "778170"
  },
  {
    "text": "doesn't matter if you don't understand every single line here or all you need to really understand is that it's relatively simple to handcraft these",
    "start": "778170",
    "end": "785400"
  },
  {
    "text": "these web assembly modules so finally I'm able to instantiate the Yser module",
    "start": "785400",
    "end": "791339"
  },
  {
    "text": "and invoke the exported function and if I look at the output in binary format again I can see the actual code at the",
    "start": "791339",
    "end": "798000"
  },
  {
    "text": "end that if you recall the get local opcode had a hex code of 20 for example all really simple",
    "start": "798000",
    "end": "804610"
  },
  {
    "start": "804000",
    "end": "1024000"
  },
  {
    "text": "so let's start looking at how we can turn this simple example into a compiler",
    "start": "804610",
    "end": "810329"
  },
  {
    "text": "now before delving into the detail I just want to get a little bit of terminology out of the way if you're not",
    "start": "810329",
    "end": "815679"
  },
  {
    "text": "quite familiar with it so my language is is comprised of statements so at the top",
    "start": "815679",
    "end": "822309"
  },
  {
    "text": "level I just have a collection of statements here's one example a variable declaration statement as you can imagine",
    "start": "822309",
    "end": "828279"
  },
  {
    "text": "this declares the variable B and assigns it the value 0 here's a variable",
    "start": "828279",
    "end": "833529"
  },
  {
    "text": "assignment statements so assigns an existing variable to a new value interestingly statements can have other",
    "start": "833529",
    "end": "839860"
  },
  {
    "text": "statements nested within them as is the case with the while statement another important component of the language is a",
    "start": "839860",
    "end": "846459"
  },
  {
    "text": "concept called expressions so expressions return values whereas statements are void they do not return",
    "start": "846459",
    "end": "852069"
  },
  {
    "text": "values and finally here we see an expression tree expressions can be composed using brackets and operations",
    "start": "852069",
    "end": "859420"
  },
  {
    "text": "these are the basic building blocks of my language and then we'll look at the",
    "start": "859420",
    "end": "865089"
  },
  {
    "text": "basic building blocks of the compiler itself so your approach you might have heard of these terms before I'd",
    "start": "865089",
    "end": "870489"
  },
  {
    "text": "certainly heard of these terms by hand had the chance to explore them personally so the first thing that happens is is my code is is processed by",
    "start": "870489",
    "end": "878679"
  },
  {
    "text": "my tokenizer into an array of tokens it's then passed into an abstract syntax tree and then finally it emits my wasn't",
    "start": "878679",
    "end": "885249"
  },
  {
    "text": "binary and we're going to visit each one of these in turn so for the first version the 0.1 version of my language",
    "start": "885249",
    "end": "892660"
  },
  {
    "text": "which is called chasm I asked people on Twitter for some good programming language names 99% of them were terrible",
    "start": "892660",
    "end": "900100"
  },
  {
    "text": "this is the only one I thought some of them weren't even repeatable but yeah this is this is the version 0.1 of my",
    "start": "900100",
    "end": "907600"
  },
  {
    "text": "programming language my first iteration was a programming language which did nothing more than and then allowed me to",
    "start": "907600",
    "end": "913299"
  },
  {
    "text": "print numbers and that was it so let's look at the tokenizer for this language now rather than looking at the code of",
    "start": "913299",
    "end": "920169"
  },
  {
    "text": "the tokenizer I thought it's easier to actually look at to look at what this code does it's only about 15 lines of",
    "start": "920169",
    "end": "926259"
  },
  {
    "text": "code and it's comprised of a number of regular expressions which match the various building blocks of my language",
    "start": "926259",
    "end": "932169"
  },
  {
    "text": "so the top regular expression we have here matches a one or more did",
    "start": "932169",
    "end": "937769"
  },
  {
    "text": "it's or decimal points bonus points for noticing that it's not a terribly a robust regular expression I can have",
    "start": "937769",
    "end": "944009"
  },
  {
    "text": "multiple decimal points but we'll gloss over that my next regular expression matches a couple of my key words print",
    "start": "944009",
    "end": "950100"
  },
  {
    "text": "and bar and the final one matches white space so the tokenizer advances through",
    "start": "950100",
    "end": "956009"
  },
  {
    "text": "the input which is my my program written in in chasm and matches these tokens one",
    "start": "956009",
    "end": "961319"
  },
  {
    "text": "after another so the first at the first location here the whitespace pattern",
    "start": "961319",
    "end": "966839"
  },
  {
    "text": "matches and that does nothing as it advances to the next location my keyword",
    "start": "966839",
    "end": "973220"
  },
  {
    "text": "regular expression matches and this causes it to push a token to the output",
    "start": "973220",
    "end": "978869"
  },
  {
    "text": "it then advances to the next whitespace again which is ignored and finally it",
    "start": "978869",
    "end": "984029"
  },
  {
    "text": "matches the the number token which is pushed to the output and again it's retaining the index at which it matches",
    "start": "984029",
    "end": "990509"
  },
  {
    "text": "for future debug support which I haven't implemented yet so the output here is",
    "start": "990509",
    "end": "998549"
  },
  {
    "text": "just a couple of tokens and what we see here is it's removed some of the whitespace in my language white space is",
    "start": "998549",
    "end": "1003679"
  },
  {
    "text": "not semantic it has no meaning so it can be disposed of the tokenizer also",
    "start": "1003679",
    "end": "1009319"
  },
  {
    "text": "provides some basic validation of the syntax the output of that the ability to",
    "start": "1009319",
    "end": "1015350"
  },
  {
    "text": "tokenize a text string doesn't necessarily mean it's executable but it will throw up for example if if it comes",
    "start": "1015350",
    "end": "1021290"
  },
  {
    "text": "across a keyword which isn't valid in your language so next step is a little bit more complicated this is our parser",
    "start": "1021290",
    "end": "1027918"
  },
  {
    "start": "1024000",
    "end": "1136000"
  },
  {
    "text": "and the parser takes the tokens as the input now there's a little bit more code going on here I'm going to draw your",
    "start": "1027919",
    "end": "1033918"
  },
  {
    "text": "ride certain parts of it so don't worry if you don't understand all of it just like the tokenizer this is this advances",
    "start": "1033919",
    "end": "1040970"
  },
  {
    "text": "step by step so we have a pointer to the current token and we also have a",
    "start": "1040970",
    "end": "1046159"
  },
  {
    "text": "function that eats the current token and advances to the next token in the input we've got some code which I'll elaborate",
    "start": "1046159",
    "end": "1052880"
  },
  {
    "text": "on shortly and this is the main body of my parser as I mentioned previously my",
    "start": "1052880",
    "end": "1058159"
  },
  {
    "text": "language is comprised of a collection of statements so my parser is set up just like that it expects that for each token",
    "start": "1058159",
    "end": "1066440"
  },
  {
    "text": "it will will be the start of the next statement in in the language if for whatever reason the tokens do not",
    "start": "1066440",
    "end": "1073789"
  },
  {
    "text": "conform to that an exception will occur and in its court elsewhere so let's look",
    "start": "1073789",
    "end": "1079070"
  },
  {
    "text": "at the statement parser and at the moment my language does nothing more than print numbers so the only token",
    "start": "1079070",
    "end": "1084679"
  },
  {
    "text": "type I'm expecting here is a keyword and the value in this case the keyword value",
    "start": "1084679",
    "end": "1090140"
  },
  {
    "text": "is print in future there'll be more of them it eats the token and the next thing it does is it advances to the the",
    "start": "1090140",
    "end": "1098179"
  },
  {
    "text": "expression each print statements is followed by an expression and here's the expression parser again the language",
    "start": "1098179",
    "end": "1104570"
  },
  {
    "text": "does nothing more than prints simple numeric values for the expression parser is very simple it matches the type which is always",
    "start": "1104570",
    "end": "1111470"
  },
  {
    "text": "number it converts this number string into a real numeric type and that's it",
    "start": "1111470",
    "end": "1117110"
  },
  {
    "text": "and eats the token so the output of my parser is the abstract syntax tree so",
    "start": "1117110",
    "end": "1124549"
  },
  {
    "text": "here you can see these two tokens are converted into an abstract syntax tree which is a single print statement and it",
    "start": "1124549",
    "end": "1130490"
  },
  {
    "text": "ends a single number literal expression that that's a transformation taking place here the final step is the emitter",
    "start": "1130490",
    "end": "1138610"
  },
  {
    "start": "1136000",
    "end": "1302000"
  },
  {
    "text": "again a little bit of code going on here so the emitter iterates over each of the",
    "start": "1138610",
    "end": "1144049"
  },
  {
    "text": "statements and here it matches or it switches on the statement type and here",
    "start": "1144049",
    "end": "1149659"
  },
  {
    "text": "the only statement type is always print at the moment the first thing it does is it emits the expression that relates to",
    "start": "1149659",
    "end": "1156289"
  },
  {
    "text": "the print statement and this is because again webassembly is a stack machine the print the print operation expects to",
    "start": "1156289",
    "end": "1162649"
  },
  {
    "text": "have the value already present on the stack so we emit the expression first and here the only expression type again",
    "start": "1162649",
    "end": "1169190"
  },
  {
    "text": "is a numeric literal at the moment so all we do is we take the node value and we emit to the f32 Const opcode that's a",
    "start": "1169190",
    "end": "1176990"
  },
  {
    "text": "a constant value opcode using the I Triple E 75 for encoding which I'm sure",
    "start": "1176990",
    "end": "1182029"
  },
  {
    "text": "you all know finally the print statement itself is isn't is implemented as a a",
    "start": "1182029",
    "end": "1188990"
  },
  {
    "text": "call and I'll get onto that in a little bit we'll skip that for the time being so it's time for a demo if the demo gods",
    "start": "1188990",
    "end": "1196510"
  },
  {
    "text": "on my side I should be able to show chasm working so someone named a number",
    "start": "1196510",
    "end": "1203710"
  },
  {
    "text": "42 if I run my compiler the output is 42",
    "start": "1203710",
    "end": "1209050"
  },
  {
    "text": "yeah exactly I was I was so excited when that happen so just recap what's happening here is",
    "start": "1209050",
    "end": "1215690"
  },
  {
    "text": "my tokenizer my pars are an emitter are all written in typescript and compiled to JavaScript you know because we",
    "start": "1215690",
    "end": "1222080"
  },
  {
    "text": "compile JavaScript and within the browser it's it's translating that simple application into a web assembly",
    "start": "1222080",
    "end": "1229190"
  },
  {
    "text": "module and executing it so I should be able to print something else no I can't",
    "start": "1229190",
    "end": "1236210"
  },
  {
    "text": "type so if I run that I can print multiple statements so this is what it",
    "start": "1236210",
    "end": "1243620"
  },
  {
    "text": "looks like in ha I'm a bit of a magician because I knew you were gonna say 42 and that wasn't a setup every I've done this",
    "start": "1243620",
    "end": "1250010"
  },
  {
    "text": "a couple of times and the first time someone said 42 and I thought I bet everyone says 42 and they do so as you",
    "start": "1250010",
    "end": "1256790"
  },
  {
    "text": "can see here's tokenized and output the abstract syntax tree and the final web assembly module so you can",
    "start": "1256790",
    "end": "1263030"
  },
  {
    "text": "see it all all together and as I promised I said I'd return to the print statement as I mentioned web assembly",
    "start": "1263030",
    "end": "1268700"
  },
  {
    "text": "has no built-in i/o so in order to perform my my princedom i want to do effectively a console log so i have to",
    "start": "1268700",
    "end": "1275750"
  },
  {
    "text": "work with the javascript host in order to achieve that so web assembly modules can import and",
    "start": "1275750",
    "end": "1281300"
  },
  {
    "text": "export functions so by importing a function it's able to execute a JavaScript function by exporting it it",
    "start": "1281300",
    "end": "1288680"
  },
  {
    "text": "allows the JavaScript host to execute one of the web assembly functions that's how Weber somebody performs IO so for",
    "start": "1288680",
    "end": "1295340"
  },
  {
    "text": "example if you want to do something a little bit more meaningful like interact with the Dom you have to do it through function imports and exports so the next",
    "start": "1295340",
    "end": "1303530"
  },
  {
    "start": "1302000",
    "end": "1502000"
  },
  {
    "text": "version of my my chasm language I wanted to implement and more complex expressions I wanted to create sort of",
    "start": "1303530",
    "end": "1310100"
  },
  {
    "text": "expression trees to allow me to do some fairly simple maths so I'm not going to delve into each of the steps in quite so",
    "start": "1310100",
    "end": "1316160"
  },
  {
    "text": "much detail I'm going to accelerate a little bit here my tokenizer to support this I only had",
    "start": "1316160",
    "end": "1323000"
  },
  {
    "text": "to add another couple of regular expressions and that's about it I had to add a regular expression to match brackets and that only took me",
    "start": "1323000",
    "end": "1330320"
  },
  {
    "text": "five minutes because I had to work out the escaping and all that lot and then I have another regular expression which",
    "start": "1330320",
    "end": "1335990"
  },
  {
    "text": "matches the various operators that I support and that's it my tokenize is good to go looking at the",
    "start": "1335990",
    "end": "1342170"
  },
  {
    "text": "positive side of things the only thing I had to update update was my expression parser and this is a little bit more",
    "start": "1342170",
    "end": "1347930"
  },
  {
    "text": "interesting so here's what happens if it encounters parentheses in the array of",
    "start": "1347930",
    "end": "1353750"
  },
  {
    "text": "tokens what it does is in the array of tokens you expect to have the left hand",
    "start": "1353750",
    "end": "1361250"
  },
  {
    "text": "operands and the right hand operands with no operand obvi the thing on the left the thing on the right and the",
    "start": "1361250",
    "end": "1366590"
  },
  {
    "text": "operator in the middle they are up around slightly so you expect to see the left hand operand the right hand operand and the operator in the middle which is",
    "start": "1366590",
    "end": "1372920"
  },
  {
    "text": "expected basically the parser is expecting them in that order now they allow nesting so the left of",
    "start": "1372920",
    "end": "1380450"
  },
  {
    "text": "the left and the right hand side use recursion to recursively call the expression parser once again so with a",
    "start": "1380450",
    "end": "1386870"
  },
  {
    "text": "few additional lines of code my expression parser is now able to construct an abstract syntax tree which",
    "start": "1386870",
    "end": "1392990"
  },
  {
    "text": "is truly tree like so here this print 42 plus 10 divided by 2 is encoded as that",
    "start": "1392990",
    "end": "1398900"
  },
  {
    "text": "abstract syntax tree moving on to the emitter again there's a few extra",
    "start": "1398900",
    "end": "1404840"
  },
  {
    "text": "additional things going on here which I'm going to point out my expression emitter now uses a visitor pattern and",
    "start": "1404840",
    "end": "1411290"
  },
  {
    "text": "you I'm sure you'll have probably heard of a visitor pattern before it's a very classic software engineering pattern in",
    "start": "1411290",
    "end": "1417980"
  },
  {
    "text": "this case I'm using a tree visitor so my abstract syntax tree is a tree and might reverse function visits every node",
    "start": "1417980",
    "end": "1425630"
  },
  {
    "text": "on that tree executing a function that's that's the visitor now this is a depth-first post-order traversal so what",
    "start": "1425630",
    "end": "1432830"
  },
  {
    "text": "that means is it it visits the left hand node then the right hand node then the root and the reason it does that again",
    "start": "1432830",
    "end": "1439190"
  },
  {
    "text": "is that web assembly is a stack machine that sets up the operations in the correct order and then the binary expression when it",
    "start": "1439190",
    "end": "1447590"
  },
  {
    "text": "when it encounters that all it has to do is convert the operation into the right opcode and that's pretty much it so demo",
    "start": "1447590",
    "end": "1455750"
  },
  {
    "text": "time once again if I'm lucky if I run",
    "start": "1455750",
    "end": "1461030"
  },
  {
    "text": "that it does some basic maths for me [Music]",
    "start": "1461030",
    "end": "1467470"
  },
  {
    "text": "so yeah so one thing that I found interesting here is it took me quite a",
    "start": "1467470",
    "end": "1473230"
  },
  {
    "text": "while to set up my my original compiler architecture that the parser tokenizer",
    "start": "1473230",
    "end": "1478570"
  },
  {
    "text": "at MIT and that's that sort of thing but once I started to add extra features to my language it became really quite easy",
    "start": "1478570",
    "end": "1486029"
  },
  {
    "text": "just a small concept of having an expression trees which can be executed that was two or three lines of extra",
    "start": "1486029",
    "end": "1492730"
  },
  {
    "text": "code in the tokenizer that was maybe 10 or so extra lines of code in the parser and maybe another 10 in the emitter and",
    "start": "1492730",
    "end": "1499269"
  },
  {
    "text": "all of a sudden my language is a lot more powerful so I'm going to again accelerate a little further I'm not",
    "start": "1499269",
    "end": "1505809"
  },
  {
    "start": "1502000",
    "end": "1687000"
  },
  {
    "text": "going to go into all of the details I'm just going to touch on a few different things the next version of chasm I",
    "start": "1505809",
    "end": "1510879"
  },
  {
    "text": "wanted to add variables and while loops so we'll look at how variables map",
    "start": "1510879",
    "end": "1516490"
  },
  {
    "text": "between my language and web assembly so web assembly is is composed of multiple",
    "start": "1516490",
    "end": "1522850"
  },
  {
    "text": "functions and functions have parameters and a return value as with most most",
    "start": "1522850",
    "end": "1528250"
  },
  {
    "text": "languages they also have the concept of locals so each function has zero one or",
    "start": "1528250",
    "end": "1534279"
  },
  {
    "text": "more local variables so on the left hand side here you'll see my simple chasm",
    "start": "1534279",
    "end": "1539620"
  },
  {
    "text": "application it takes a variable assigns the value 23 and then I'm printing the value of that variable on the right hand",
    "start": "1539620",
    "end": "1546070"
  },
  {
    "text": "side this is roughly speaking how you do the same with web assembly so we define a function that has a single local which",
    "start": "1546070",
    "end": "1553090"
  },
  {
    "text": "is my variable F we set up a constant and store it within that local so set",
    "start": "1553090",
    "end": "1559480"
  },
  {
    "text": "local 0 then we retrieve it using get local 0 and then call my print function I know an optimizing compiler would",
    "start": "1559480",
    "end": "1566259"
  },
  {
    "text": "trash a few of those operations but I hope you get the point so mapping variables from my language to",
    "start": "1566259",
    "end": "1573009"
  },
  {
    "text": "web assembly is really quite easy all I have to do is maintain a symbol table which maps the variable name to the",
    "start": "1573009",
    "end": "1579730"
  },
  {
    "text": "index within the function and that's it it was really quite simple while loops again surprisingly simple an interesting",
    "start": "1579730",
    "end": "1587169"
  },
  {
    "text": "thing about web assembly is even though it is an assembly like language it has some surprisingly high-level concepts",
    "start": "1587169",
    "end": "1594000"
  },
  {
    "text": "intermix with there you've already seen that it has functions which is quite surprising for something that claims to",
    "start": "1594000",
    "end": "1599409"
  },
  {
    "text": "be an assembly language it also has loop constructs see it has ifs and else so for example when I",
    "start": "1599409",
    "end": "1606480"
  },
  {
    "text": "wanted to implement while loops I was able to use blocks and loops within",
    "start": "1606480",
    "end": "1611730"
  },
  {
    "text": "webassembly so the way this works is the lis loop condition is in is isn't is",
    "start": "1611730",
    "end": "1617840"
  },
  {
    "text": "encoded and then the next thing it does is it uses the eqz op code that",
    "start": "1617840",
    "end": "1623820"
  },
  {
    "text": "determines whether the current value on the stack is equal to 0 the next one is",
    "start": "1623820",
    "end": "1628950"
  },
  {
    "text": "is break if or branch if to a stack depth of one so what that means is if if",
    "start": "1628950",
    "end": "1634530"
  },
  {
    "text": "the stack value is equal to 0 it breaks to a execution stack depth of 1 so what",
    "start": "1634530",
    "end": "1641760"
  },
  {
    "text": "this means is it breaks out of both the loop and the block if that's not the case it will execute the nested",
    "start": "1641760",
    "end": "1647640"
  },
  {
    "text": "statements and then break to a stack depth of 0 which repeats the loop I'm pointing on the screen I've just",
    "start": "1647640",
    "end": "1653760"
  },
  {
    "text": "realized you can't see my finger so let's let's give that a quick demo this is going to be a little bit more",
    "start": "1653760",
    "end": "1659850"
  },
  {
    "text": "complicated so let's start with VAR F equals 0 well F this inten equals that's",
    "start": "1659850",
    "end": "1668250"
  },
  {
    "text": "one print F and while so that hey that",
    "start": "1668250",
    "end": "1675840"
  },
  {
    "text": "all works super chaffed and again as with the previous upgrade to the chasm",
    "start": "1675840",
    "end": "1682440"
  },
  {
    "text": "language it wasn't that hard to add these relatively high level concepts finally chasm version 1.0 time for a",
    "start": "1682440",
    "end": "1690690"
  },
  {
    "start": "1687000",
    "end": "1804000"
  },
  {
    "text": "major release and the set pixel function so rendering a Mandelbrot it's really",
    "start": "1690690",
    "end": "1696210"
  },
  {
    "text": "quite simple you don't need that many different language constructs to do the basic maths the final piece of the",
    "start": "1696210",
    "end": "1702360"
  },
  {
    "text": "puzzle I needed was a set pixel now this is interesting because as I mentioned a few times web assembly has no built-in",
    "start": "1702360",
    "end": "1708540"
  },
  {
    "text": "i/o so how do you write to canvas in order to render to the screen with a web",
    "start": "1708540",
    "end": "1714000"
  },
  {
    "text": "assembly now you could use function imports and exports so I could have a JavaScript function which is called set",
    "start": "1714000",
    "end": "1720510"
  },
  {
    "text": "pixel and import that into into my web assembly module but that would be relatively inefficient it'll be quite",
    "start": "1720510",
    "end": "1727230"
  },
  {
    "text": "chatty over the web assembly JavaScript boundary there's actually a slightly smarter way of doing it so previously I",
    "start": "1727230",
    "end": "1734310"
  },
  {
    "text": "mention the only way to do i oh with webassembly is through function imports and exports there's actually an additional way of",
    "start": "1734310",
    "end": "1740340"
  },
  {
    "text": "performing i/o as well so webassembly modules haven't had can optionally have",
    "start": "1740340",
    "end": "1746490"
  },
  {
    "text": "a block of linear memory and they are able to read and write to it using store and load operations now interestingly",
    "start": "1746490",
    "end": "1753420"
  },
  {
    "text": "this linear memory can be shared with the hosting environment so in the case of a javascript host this is an array",
    "start": "1753420",
    "end": "1759690"
  },
  {
    "text": "buffer so but if your web assembly application and your JavaScript application can read and write to the",
    "start": "1759690",
    "end": "1765030"
  },
  {
    "text": "same block of memory so what I did was basically set the memory up as video RAM",
    "start": "1765030",
    "end": "1770100"
  },
  {
    "text": "effectively this this is this is my kind of virtual canvas so this is the final",
    "start": "1770100",
    "end": "1775740"
  },
  {
    "text": "demo and I'm not going to type that all out in front of you because I'd never get it right but that now renders the",
    "start": "1775740",
    "end": "1782130"
  },
  {
    "text": "Mandelbrot set so my chasm language is is complete I must submit I did I worked on this quite",
    "start": "1782130",
    "end": "1788790"
  },
  {
    "text": "a lot in in my evenings and when I finally got this up and running I went yes like that and my kids just turn to",
    "start": "1788790",
    "end": "1796140"
  },
  {
    "text": "me what are you doing I try to explain they just didn't get it they get excited by different things so",
    "start": "1796140",
    "end": "1804900"
  },
  {
    "start": "1804000",
    "end": "1914000"
  },
  {
    "text": "finally to recap web assembly is a relatively simple virtual machine it has",
    "start": "1804900",
    "end": "1810600"
  },
  {
    "text": "something like sixty opcodes it's got a really quite simple runtime model and for me I I find that quite fascinating",
    "start": "1810600",
    "end": "1817890"
  },
  {
    "text": "I'm used to using web technologies that I don't understand and by that I mean I don't understand them under the hood I'd",
    "start": "1817890",
    "end": "1824310"
  },
  {
    "text": "like to think I understand how to use them but things like react for example I haven't got the foggiest how it works",
    "start": "1824310",
    "end": "1830520"
  },
  {
    "text": "under the hood whereas with web assembly it's quite enjoyable to find a new concept on the web that you can",
    "start": "1830520",
    "end": "1836490"
  },
  {
    "text": "literally understand everything about it as a result I find it quite a fun playground for doing some of the things",
    "start": "1836490",
    "end": "1842430"
  },
  {
    "text": "that you know I used to do back in the kind of 8-bit computing era I spend a fair bit of time writing web assembly by",
    "start": "1842430",
    "end": "1848550"
  },
  {
    "text": "hand not because I'm crazy it's it's it's fun there's a bit of an aside I don't use type scripts nearly as much as",
    "start": "1848550",
    "end": "1855420"
  },
  {
    "text": "I should and this project was a really nice reminder for myself about how powerful typescript is for example the",
    "start": "1855420",
    "end": "1861900"
  },
  {
    "text": "structure of my abstract syntax tree is defined as typescript interfaces so I",
    "start": "1861900",
    "end": "1867570"
  },
  {
    "text": "get type checking support which really ensures that my my my parser is quite robust I",
    "start": "1867570",
    "end": "1874190"
  },
  {
    "text": "also found that creating a simple compiler isn't as hard as I initially thought it's also a good way of",
    "start": "1874190",
    "end": "1880169"
  },
  {
    "text": "exercising your programming skills there are quite a few concepts in there things like visitor patterns tokenizer",
    "start": "1880169",
    "end": "1886860"
  },
  {
    "text": "so all kinds of interesting software engineering concepts that you come across through through having a go with",
    "start": "1886860",
    "end": "1891960"
  },
  {
    "text": "writing and compiler also web assembly is a very new technology and there's a",
    "start": "1891960",
    "end": "1897900"
  },
  {
    "text": "lot of creative energy being poured into a web assembly if you take the time to understand it there are quite a number",
    "start": "1897900",
    "end": "1903929"
  },
  {
    "text": "of really interesting open-source projects you can potentially and contribute to once you've got that",
    "start": "1903929",
    "end": "1909539"
  },
  {
    "text": "knowledge so hopefully you've been inspired by this talk to find out a little bit more so returning to my",
    "start": "1909539",
    "end": "1915870"
  },
  {
    "start": "1914000",
    "end": "1953000"
  },
  {
    "text": "bucket list you know I've ticked the final one off I guess well maybe not this is this is one of",
    "start": "1915870",
    "end": "1923640"
  },
  {
    "text": "those kind of fun projects that spiraled out of control once I've got that far I thought well you know I could spend",
    "start": "1923640",
    "end": "1930539"
  },
  {
    "text": "another few days doing strings or arrays or functions and and the interesting thing is when when you get to things",
    "start": "1930539",
    "end": "1936960"
  },
  {
    "text": "like strings and arrays you get to the really hard stuff you get to for example memory allocation where somebody doesn't",
    "start": "1936960",
    "end": "1943080"
  },
  {
    "text": "have a garbage collector so you need to manage memory yourself you need to work out how to store these concepts within",
    "start": "1943080",
    "end": "1949169"
  },
  {
    "text": "linear memory so it's a lot of fun so yeah that's how to build your own web assembly compiler all the codes on",
    "start": "1949169",
    "end": "1956370"
  },
  {
    "start": "1953000",
    "end": "1981000"
  },
  {
    "text": "github if you want to play around with it also it's arranged in such a way that each of the fictitious releases of chasm",
    "start": "1956370",
    "end": "1963330"
  },
  {
    "text": "is a commit so you can roll back right to the beginning which is that simple few lines of code that makes the first",
    "start": "1963330",
    "end": "1969510"
  },
  {
    "text": "eight bytes and go commit by commit through step by step if if you're interested in playing along at home so",
    "start": "1969510",
    "end": "1975330"
  },
  {
    "text": "thanks very much for listening",
    "start": "1975330",
    "end": "1978440"
  },
  {
    "start": "1981000",
    "end": "2060000"
  },
  {
    "text": "okay I think we have some time for questions anyone have any questions all",
    "start": "1981299",
    "end": "1987010"
  },
  {
    "text": "right nice saw you and then you over there so there's a lot of great languages that we want to run on the web",
    "start": "1987010",
    "end": "1994659"
  },
  {
    "text": "to your web assembly yeah is there any reason that tokenizing or the parsing",
    "start": "1994659",
    "end": "1999730"
  },
  {
    "text": "would have to be changed for webassembly or is it just writing a new emitter for an existing AHA okay so you're talking",
    "start": "1999730",
    "end": "2005909"
  },
  {
    "text": "about real languages now aren't you well there's a few different ways of doing it",
    "start": "2005909",
    "end": "2011730"
  },
  {
    "text": "the the first language to compile to web assembly was C and C++ using the M",
    "start": "2011730",
    "end": "2017370"
  },
  {
    "text": "scripting compiler under the hood that uses the LLVM tool chain which is a a",
    "start": "2017370",
    "end": "2023220"
  },
  {
    "text": "modular infrastructure for building compilers so to your point about whether you have to reinvent the wheel is I",
    "start": "2023220",
    "end": "2029460"
  },
  {
    "text": "guess what you're talking about compiler technology is already relatively modular so in order to create the first web",
    "start": "2029460",
    "end": "2036149"
  },
  {
    "text": "assembly compiler the C and C++ team were able to build on on some pre-existing LLVM concepts so it depends",
    "start": "2036149",
    "end": "2044940"
  },
  {
    "text": "on the language though for example a number of the early languages used the used M script and in LLVM some of them",
    "start": "2044940",
    "end": "2052950"
  },
  {
    "text": "have used different compiler technologies we're seeing quite a lot of divergence now in in the technologies used so besides just for fun have you",
    "start": "2052950",
    "end": "2063990"
  },
  {
    "start": "2060000",
    "end": "2506000"
  },
  {
    "text": "been able to apply this to anything like in your work yeah yeah not not much admittedly it's all pretty new",
    "start": "2063990",
    "end": "2070408"
  },
  {
    "text": "technology in in practice actually there are a few people using webassembly in",
    "start": "2070409",
    "end": "2075810"
  },
  {
    "text": "production and the ones that are most well-known are auto cad which have a huge C++ code base there's PS PDF kit",
    "start": "2075810",
    "end": "2083520"
  },
  {
    "text": "who have taken 1/2 million line of code PDF rendering engine and moved that to the web and in in my own line of work I",
    "start": "2083520",
    "end": "2090270"
  },
  {
    "text": "do work within financial services and we worked with a company that had their own bespoke protocol for streaming pricing",
    "start": "2090270",
    "end": "2097200"
  },
  {
    "text": "data and it's it's relatively old and it was all written in C++ and they keep getting annoying people say but I want",
    "start": "2097200",
    "end": "2103710"
  },
  {
    "text": "to do it in node and then I go but it's C++ so we were able to help them you",
    "start": "2103710",
    "end": "2108720"
  },
  {
    "text": "through em script and compile their client library for decoding their bespoke protocol wrapper typescript layer on top",
    "start": "2108720",
    "end": "2115859"
  },
  {
    "text": "of it to make it play nice so yes we have we have used it in production not not in many cases but you know it's",
    "start": "2115859",
    "end": "2122700"
  },
  {
    "text": "technology is only 2 years old hi",
    "start": "2122700",
    "end": "2127799"
  },
  {
    "text": "so I haven't looked into webassembly enough to really figure this out one thing that I've always been curious",
    "start": "2127799",
    "end": "2133589"
  },
  {
    "text": "about is for those more complex runtimes how do they interact with memory because",
    "start": "2133589",
    "end": "2139529"
  },
  {
    "text": "I saw on the on the in the assembly that you had that it's it's certainly putting",
    "start": "2139529",
    "end": "2144779"
  },
  {
    "text": "things you know in the stack on those those implicit registers I suppose yeah but how does it work when it's like oh",
    "start": "2144779",
    "end": "2151500"
  },
  {
    "text": "it's going to be C++ well it's it's entirely down to the design of the",
    "start": "2151500",
    "end": "2157410"
  },
  {
    "text": "language itself you've you've basically got linear memory you've got a big block of memory so at the moment rust ships",
    "start": "2157410",
    "end": "2164579"
  },
  {
    "text": "with its own very lightweight allocator whereas c-sharp through Blaser they",
    "start": "2164579",
    "end": "2169769"
  },
  {
    "text": "actually ship a garbage collector which is compiled to webassembly it's it's a bit of a blank canvas it's got that kind",
    "start": "2169769",
    "end": "2176430"
  },
  {
    "text": "of low-level feel it's it's up to the language designers and the implementers how they use that memory to best suit",
    "start": "2176430",
    "end": "2183119"
  },
  {
    "text": "their language so I guess what I'm a kind of unclear about is like is there a particularly like app code for like",
    "start": "2183119",
    "end": "2188309"
  },
  {
    "text": "saying hey like I want this much memory and then yeah yeah it's you you do you",
    "start": "2188309",
    "end": "2195630"
  },
  {
    "text": "ask for a certain number of pages of memory and you can also grow and shrink memory dynamically but that but that's",
    "start": "2195630",
    "end": "2202619"
  },
  {
    "text": "how it works you allocate a block of memory up front that is rent cool I was",
    "start": "2202619",
    "end": "2210329"
  },
  {
    "text": "wondering for like ghosts etcetera like they'd gone to Prince Ohio how do they like can you when you're S or C sharp or",
    "start": "2210329",
    "end": "2217890"
  },
  {
    "text": "she codes do you can you do any I or do you need to have like JavaScript Interop them yeah webassembly has no built in IO",
    "start": "2217890",
    "end": "2225660"
  },
  {
    "text": "at the moment however there's a working group called huazi which stands for web assembly system interface which are",
    "start": "2225660",
    "end": "2231990"
  },
  {
    "text": "defining a core set of i/o operations although they're not really designed for",
    "start": "2231990",
    "end": "2237720"
  },
  {
    "text": "the browser they're designed for out of browser web assembly so the web assembly runtimes being used for things like",
    "start": "2237720",
    "end": "2243960"
  },
  {
    "text": "serverless func for writing smart contracts on the blockchain and there is a a real need",
    "start": "2243960",
    "end": "2250320"
  },
  {
    "text": "for a standard set of system interfaces there in the browser they're making use",
    "start": "2250320",
    "end": "2256890"
  },
  {
    "text": "of automatic generation of bindings so there's a certain amount of glue code",
    "start": "2256890",
    "end": "2262530"
  },
  {
    "text": "required on each side to kind of bridge the the bridge the sort of boundary and at the moment you can generate a lot of",
    "start": "2262530",
    "end": "2268890"
  },
  {
    "text": "that there's a thing called razzin bind gen for rust which does exactly that so there's additional work but most of that",
    "start": "2268890",
    "end": "2275760"
  },
  {
    "text": "is hidden by tolling anybody else at okay so you went over here there's one",
    "start": "2275760",
    "end": "2286530"
  },
  {
    "text": "of the dreams of courses that you have like your bacon language skills used on the front end like is that anywhere on",
    "start": "2286530",
    "end": "2292890"
  },
  {
    "text": "the reason or is that far away okay",
    "start": "2292890",
    "end": "2297900"
  },
  {
    "text": "that's a good question in taking the example of PS PDF kit the the company that took their PDF rendering engine",
    "start": "2297900",
    "end": "2304470"
  },
  {
    "text": "they originally had a web version of their product and that was all running on the server and through web assembly",
    "start": "2304470",
    "end": "2310079"
  },
  {
    "text": "they were able to shift the same code into the browser and offer that as a as a commercial product and web assembly is",
    "start": "2310079",
    "end": "2317460"
  },
  {
    "text": "certainly one of the great things about web assembly is one of the main reasons that javascript is so popular is not how",
    "start": "2317460",
    "end": "2324900"
  },
  {
    "text": "good a language it is it's an awesome language it's the reason it's popular is because of the ubiquity of the web",
    "start": "2324900",
    "end": "2329910"
  },
  {
    "text": "platform is it's the biggest platform out there so I think web assembly is a great idea in its in that it that it",
    "start": "2329910",
    "end": "2337109"
  },
  {
    "text": "allows other languages to be part of the the most ubiquitous platform and runtime there is ya believe there's doom 3",
    "start": "2337109",
    "end": "2346710"
  },
  {
    "text": "running in web assembly in the browser right yeah that was one of the early Oh actually the Unreal Engine was one the",
    "start": "2346710",
    "end": "2352349"
  },
  {
    "text": "early demos from ASM j/s which was a precursor to web assembly right um great",
    "start": "2352349",
    "end": "2357750"
  },
  {
    "text": "talk and so one way to convince other people to pay attention to webassembly would be if we had some formal way to",
    "start": "2357750",
    "end": "2365910"
  },
  {
    "text": "quantify the speed benefits we get if ya report our application to web assembly",
    "start": "2365910",
    "end": "2372780"
  },
  {
    "text": "and so do you have some some good examples or I've got some bad examples",
    "start": "2372780",
    "end": "2378840"
  },
  {
    "text": "in the bad examples are the ones that are are the most revealing okay hey people do ask time and time again what's",
    "start": "2378840",
    "end": "2385050"
  },
  {
    "text": "the performance of webassembly like and my response to that is what's the performance of JavaScript like it's",
    "start": "2385050",
    "end": "2390480"
  },
  {
    "text": "actually pretty damn good if you look at most algorithmic benchmarks javascript is maybe I don't know 30% slower than",
    "start": "2390480",
    "end": "2398160"
  },
  {
    "text": "native code so you ask what's the performance of web assembly like well it's only got that 30 percent gap to",
    "start": "2398160",
    "end": "2404910"
  },
  {
    "text": "span it can't actually get that much faster which is why at the beginning of the talk I was focusing on the time it",
    "start": "2404910",
    "end": "2411810"
  },
  {
    "text": "takes for your JavaScript application to reach peak performance and that's what web assembly is improving it's",
    "start": "2411810",
    "end": "2417360"
  },
  {
    "text": "significantly reducing the amount of time to reach peak performance it's not adding much to peak performance because",
    "start": "2417360",
    "end": "2423870"
  },
  {
    "text": "JavaScript is pretty fast as it is so it is it does provide better performance being got to ask the right question all",
    "start": "2423870",
    "end": "2433800"
  },
  {
    "text": "right well oh I see last question",
    "start": "2433800",
    "end": "2437990"
  },
  {
    "text": "so just piggybacking on what you were just saying would you say that perhaps",
    "start": "2440060",
    "end": "2448560"
  },
  {
    "text": "the biggest value proposition for web assembly then over JavaScript would be",
    "start": "2448560",
    "end": "2453690"
  },
  {
    "text": "the ability to use other languages at near native speed yeah I think that has",
    "start": "2453690",
    "end": "2459270"
  },
  {
    "text": "to be one of the biggest propositions of web assembly and yeah I'd say so",
    "start": "2459270",
    "end": "2465510"
  },
  {
    "text": "javascript is a highly capable language they're never there are times when it doesn't give you the performance that",
    "start": "2465510",
    "end": "2471480"
  },
  {
    "text": "you need but there are very few people here who probably have a real performance issue with JavaScript typically your performance issue is",
    "start": "2471480",
    "end": "2477510"
  },
  {
    "text": "elsewhere it's in your use of the Dom API s or something else javascript is quite fast so yeah the",
    "start": "2477510",
    "end": "2482670"
  },
  {
    "text": "value proposition really is bringing other languages to the web but also the value proposition is the webassembly",
    "start": "2482670",
    "end": "2488010"
  },
  {
    "text": "runtime now being used we are in on the edge within cloud and on the blockchain",
    "start": "2488010",
    "end": "2493560"
  },
  {
    "text": "it's bringing that kind of universal runtime to a whole host of other areas as well once again give it up for Colin",
    "start": "2493560",
    "end": "2502170"
  },
  {
    "text": "thank you you",
    "start": "2502170",
    "end": "2505730"
  }
]