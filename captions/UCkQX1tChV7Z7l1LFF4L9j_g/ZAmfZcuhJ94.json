[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "so before I are coming to Q calm I had interview with the the chairman of the Q",
    "start": "4000",
    "end": "9160"
  },
  {
    "text": "cow and he mentioned that the talk after lunch is really good usually a tough one",
    "start": "9160",
    "end": "15910"
  },
  {
    "text": "because people tend to get sleepy they so that you already try to arrange some energetic talk for the the one after",
    "start": "15910",
    "end": "23349"
  },
  {
    "text": "lunch I'm not sure if there was a some thoughtful arrangement for me but look",
    "start": "23349",
    "end": "30880"
  },
  {
    "text": "I'm here to keep you guys awake and to make things a little more complicated",
    "start": "30880",
    "end": "36670"
  },
  {
    "text": "I'm still jet-lagged so it's worst time for me in California so I have to keep",
    "start": "36670",
    "end": "42700"
  },
  {
    "text": "myself awake so let's see at the end of talk I can accomplish both goals anyway",
    "start": "42700",
    "end": "49930"
  },
  {
    "text": "I really am really excited to have opportunity to come to London to talk about how long Alex uses Kafka Netflix",
    "start": "49930",
    "end": "57670"
  },
  {
    "text": "started to use Kaka in in 2013 and we are probably the largest Kopke operator",
    "start": "57670",
    "end": "64180"
  },
  {
    "text": "in AWS cloud and today our global footprint will be over thousands of",
    "start": "64180",
    "end": "71470"
  },
  {
    "text": "brokers so briefing instruction about",
    "start": "71470",
    "end": "78070"
  },
  {
    "start": "76000",
    "end": "76000"
  },
  {
    "text": "myself I joined a flex in 2011 with the",
    "start": "78070",
    "end": "83700"
  },
  {
    "text": "f1 team and have had the opportunity to work with Sid and and Danny with the",
    "start": "83700",
    "end": "89950"
  },
  {
    "text": "speaker in the morning in the club happen team I worked on a couple of",
    "start": "89950",
    "end": "96580"
  },
  {
    "text": "infrastructure infrastructure projects including dynamic properties and the",
    "start": "96580",
    "end": "102100"
  },
  {
    "text": "Netflix internal web services framework both of which are open source as Arceus",
    "start": "102100",
    "end": "107470"
  },
  {
    "text": "ribbon in efflux OSS and about three years ago I joined the real-time data",
    "start": "107470",
    "end": "114880"
  },
  {
    "text": "infrastructure team and Netflix where I started to work on our cop car strategy",
    "start": "114880",
    "end": "120040"
  },
  {
    "text": "I was the Apache car contributor for keep 36 wreck where partition assignment",
    "start": "120040",
    "end": "127479"
  },
  {
    "text": "so this was added in the cop car 0.10 release it was the second most important",
    "start": "127479",
    "end": "134080"
  },
  {
    "text": "feature coming after Kopke streams in the o10 release and it was a significant",
    "start": "134080",
    "end": "140080"
  },
  {
    "text": "improvement for for for tolerance so I",
    "start": "140080",
    "end": "146740"
  },
  {
    "text": "would like to start my presentation by showing you the general micro-services architecture in Netflix so my cursor so",
    "start": "146740",
    "end": "156070"
  },
  {
    "text": "Netflix is the pioneer for operating micro services in cloud environment and",
    "start": "156070",
    "end": "161440"
  },
  {
    "text": "today we thrive on hundreds of micro services so on the so this picture shows",
    "start": "161440",
    "end": "169960"
  },
  {
    "text": "the micro services architecture in tears so on the left side we have our proxy",
    "start": "169960",
    "end": "176200"
  },
  {
    "text": "tier where we get all the user requests and we do a little bit transformation or",
    "start": "176200",
    "end": "181290"
  },
  {
    "text": "processing and then we forward those requests to the central API services",
    "start": "181290",
    "end": "187210"
  },
  {
    "text": "which is the bright dot on the left and from the API service these requests will",
    "start": "187210",
    "end": "195640"
  },
  {
    "text": "be fanned out to hundreds of middle tier micro services so you may be wondering",
    "start": "195640",
    "end": "201630"
  },
  {
    "text": "where is Kafka in this picture well it turns out that caca is everywhere just",
    "start": "201630",
    "end": "209709"
  },
  {
    "text": "imagine that all those hundreds of micro services are either producers or",
    "start": "209709",
    "end": "214840"
  },
  {
    "text": "consumers to our caucus service and on top of that we have our hundreds of",
    "start": "214840",
    "end": "221530"
  },
  {
    "text": "streaming processing jobs running in containers and they are our major represents the major fleet for our",
    "start": "221530",
    "end": "228340"
  },
  {
    "text": "consumers so operating kafka in a cloud",
    "start": "228340",
    "end": "235720"
  },
  {
    "start": "231000",
    "end": "231000"
  },
  {
    "text": "environment with hundreds of micro services accessing us represent some",
    "start": "235720",
    "end": "241120"
  },
  {
    "text": "unique challenges so today I'm going to go through some of the interesting challenging areas and also if you have",
    "start": "241120",
    "end": "248740"
  },
  {
    "text": "attended my friends Danny's talk in the morning I feel like some of the areas",
    "start": "248740",
    "end": "253780"
  },
  {
    "text": "like size does matter for stateful service the multi-tenancy is becoming more",
    "start": "253780",
    "end": "261130"
  },
  {
    "text": "important more and more important these becoming the are becoming the common themes for distributed stay for services",
    "start": "261130",
    "end": "267460"
  },
  {
    "text": "so even if you don't know Kafka I hope you can get something out of my talk so",
    "start": "267460",
    "end": "273660"
  },
  {
    "text": "the first thing I'm going to talk about is availability so operating in the",
    "start": "273660",
    "end": "281650"
  },
  {
    "text": "cloud means network failures or Hardware faders are well expected so how do you",
    "start": "281650",
    "end": "287950"
  },
  {
    "text": "minimize the impact to our copper service and make sure we can keep a very",
    "start": "287950",
    "end": "294130"
  },
  {
    "text": "high message delivery SLA and the second",
    "start": "294130",
    "end": "300030"
  },
  {
    "text": "scalability with with Netflix viewing",
    "start": "300030",
    "end": "305110"
  },
  {
    "text": "activities frustrating fluctuating all the day and the services around us doing",
    "start": "305110",
    "end": "313000"
  },
  {
    "text": "Auto scale all the time how do we scale Kafka to deal with traffic changes and",
    "start": "313000",
    "end": "321150"
  },
  {
    "text": "finally multi-tenancy as our tropical topics become more and more popular a",
    "start": "321150",
    "end": "327760"
  },
  {
    "text": "lot of clients come to our service and there are trying to compete with limited",
    "start": "327760",
    "end": "334030"
  },
  {
    "text": "resources so how do we make sure that everybody have a fair share of the resource so for those of you who don't",
    "start": "334030",
    "end": "343840"
  },
  {
    "text": "know cacao or you're not familiar with copper I would like to give a very high-level overview so Kafka is a tea",
    "start": "343840",
    "end": "353320"
  },
  {
    "text": "situated streaming platform and at its core are replicated and partitioned the",
    "start": "353320",
    "end": "360820"
  },
  {
    "text": "logs organized in topics and partitions so in the Kafka ecosystem we have three",
    "start": "360820",
    "end": "368860"
  },
  {
    "text": "components producers consumers and brokers a producer produces a series of",
    "start": "368860",
    "end": "375910"
  },
  {
    "text": "Records to one or more topics and each record will be appended to the end of a",
    "start": "375910",
    "end": "383070"
  },
  {
    "text": "partition as illustrated on this diagram and for consumers they can subscribe to",
    "start": "383070",
    "end": "389110"
  },
  {
    "text": "one or more topics and they can also fetch records from corresponding partitions and cockta uses",
    "start": "389110",
    "end": "399130"
  },
  {
    "text": "the offset of a record and they use that",
    "start": "399130",
    "end": "404410"
  },
  {
    "text": "to keep track of the consumers positions",
    "start": "404410",
    "end": "409710"
  },
  {
    "text": "so there are two major use cases of capital in Netflix their first one as",
    "start": "410820",
    "end": "417420"
  },
  {
    "text": "Sid mentioned is the data pipeline where we rely ablator",
    "start": "417420",
    "end": "423960"
  },
  {
    "text": "from one application to another or from one system to another and the other use",
    "start": "423960",
    "end": "429400"
  },
  {
    "text": "case is streaming processing where we write real-time streaming applications to transform or react to the streams of",
    "start": "429400",
    "end": "439540"
  },
  {
    "text": "data and there are two major categories of data they're flowing in our system",
    "start": "439540",
    "end": "445150"
  },
  {
    "text": "one is the first ones business and analytical data so these includes all",
    "start": "445150",
    "end": "451090"
  },
  {
    "text": "the events that we use to track how user interact with Netflix services and they",
    "start": "451090",
    "end": "457360"
  },
  {
    "text": "also include device logs so these laws will be batched on our playback devices",
    "start": "457360",
    "end": "463260"
  },
  {
    "text": "and then sent to our proxy of each proxy service and then forward to koepcke and",
    "start": "463260",
    "end": "471180"
  },
  {
    "text": "they can also include a be test results so Netflix is a data driven company so",
    "start": "471180",
    "end": "478210"
  },
  {
    "text": "at any time we have tons of a BTS going on to determine what with the the best",
    "start": "478210",
    "end": "483550"
  },
  {
    "text": "decision for our business and the second major category is the system related so",
    "start": "483550",
    "end": "489940"
  },
  {
    "text": "these are typically application error lots as well as some tc2 beta tracing",
    "start": "489940",
    "end": "496330"
  },
  {
    "text": "information and we use those information to gain insights into our system and",
    "start": "496330",
    "end": "502720"
  },
  {
    "text": "also for some debugging purposes for both categories of events they have a",
    "start": "502720",
    "end": "507820"
  },
  {
    "text": "huge volume but they are now transactional and for most of our topics",
    "start": "507820",
    "end": "515520"
  },
  {
    "text": "event ordering is not important and therefore not required",
    "start": "515520",
    "end": "523000"
  },
  {
    "text": "and just to give you some ideas of the cop car skills running in a flicks we're",
    "start": "523000",
    "end": "531350"
  },
  {
    "text": "currently operating more than four thousand brokers in about 50 clusters in",
    "start": "531350",
    "end": "537020"
  },
  {
    "text": "three a SS regions two regions in US and one region in the u.s. one which serve",
    "start": "537020",
    "end": "545390"
  },
  {
    "text": "the most of you and we have more than one trillion we process more than one",
    "start": "545390",
    "end": "551720"
  },
  {
    "text": "trillion messages per day in our caucus system and our New Year's Day of 2018 we",
    "start": "551720",
    "end": "559670"
  },
  {
    "text": "reached a new milestone of processing more than 2 trillion messages so on that day we processed 2.2 trillion messages",
    "start": "559670",
    "end": "568790"
  },
  {
    "text": "including one point three unique messages which is equivalent equivalent to eight petabytes of data so this is a",
    "start": "568790",
    "end": "578750"
  },
  {
    "start": "577000",
    "end": "577000"
  },
  {
    "text": "typical cop car clustered look like in a flicks we have about 20 to 200 brokers",
    "start": "578750",
    "end": "586310"
  },
  {
    "text": "in a cluster each broker instance will have four to eight cores deep in network",
    "start": "586310",
    "end": "593570"
  },
  {
    "text": "and 2 to 12 terabytes of local disk our",
    "start": "593570",
    "end": "600110"
  },
  {
    "text": "brokers currently operate are on khakha version 0 10.2 and we usually we we",
    "start": "600110",
    "end": "607970"
  },
  {
    "text": "provision our craft our class we're within one region but we make sure that each capacitor will span across three",
    "start": "607970",
    "end": "614900"
  },
  {
    "text": "availability zones in AWS and we use rack where partition assignment to a",
    "start": "614900",
    "end": "621200"
  },
  {
    "text": "create topic so basically the rack where partition assignment will ensure that",
    "start": "621200",
    "end": "627500"
  },
  {
    "text": "different replicas of the same partition will be distributed to different racks",
    "start": "627500",
    "end": "632930"
  },
  {
    "text": "or Radium a SS zones this is a way to",
    "start": "632930",
    "end": "638330"
  },
  {
    "text": "achieve high for tolerance even if like the ho-ho in a very peas own goes down",
    "start": "638330",
    "end": "646180"
  },
  {
    "text": "and occasionally we use mirror maker to do cross region data replication but we",
    "start": "646180",
    "end": "653570"
  },
  {
    "text": "only do that for a handful of Atomics so in the next few",
    "start": "653570",
    "end": "662700"
  },
  {
    "text": "slides I'm going to go through some of the challenges and the strategies that we have been involved to deal with",
    "start": "662700",
    "end": "670350"
  },
  {
    "text": "challenges first one is availability so everybody wants their Kafka plastered to",
    "start": "670350",
    "end": "677820"
  },
  {
    "text": "up 24/7 365 but exactly how do you",
    "start": "677820",
    "end": "682889"
  },
  {
    "text": "define Kafka's availability so we would like to think of Kaka's availability as",
    "start": "682889",
    "end": "690149"
  },
  {
    "text": "the ratio of messages successfully produce your Kafka versus photo attempts so let's say you have you produce a",
    "start": "690149",
    "end": "699029"
  },
  {
    "text": "hundred messages or you try to produce 100 messages messages but one does not get into Kalka",
    "start": "699029",
    "end": "706620"
  },
  {
    "text": "then your availability is 99% in this case so here I'm showing you a magic",
    "start": "706620",
    "end": "715320"
  },
  {
    "start": "712000",
    "end": "712000"
  },
  {
    "text": "which is the producer message drop rate which happened at an early day of our",
    "start": "715320",
    "end": "721230"
  },
  {
    "text": "cop car operation so you can see that this incident happened last year a few",
    "start": "721230",
    "end": "727949"
  },
  {
    "text": "hours and certain times our producer message drop rate reaches a reached",
    "start": "727949",
    "end": "734310"
  },
  {
    "text": "almost a hundred percent in fact we have tried a different ways to recover from",
    "start": "734310",
    "end": "741120"
  },
  {
    "text": "that failure including rolling restart all of our brokers but none of the",
    "start": "741120",
    "end": "747269"
  },
  {
    "text": "approaches that we have tried helped us so luckily there was the first and the",
    "start": "747269",
    "end": "756390"
  },
  {
    "text": "last major instant that we observed on khakha and we have come a long way to",
    "start": "756390",
    "end": "764430"
  },
  {
    "text": "improve of availability to five nines and usually six lines recently but that",
    "start": "764430",
    "end": "771630"
  },
  {
    "text": "incident had a profound influence on how we operated Kafka we realize that Kafka",
    "start": "771630",
    "end": "778620"
  },
  {
    "text": "as a stateful service can go into a bad shape and it will be like a one-way",
    "start": "778620",
    "end": "785399"
  },
  {
    "text": "ticket so the only way to guarantee a higher Sally is to do fail",
    "start": "785399",
    "end": "791540"
  },
  {
    "text": "over and do that fast so that's for",
    "start": "791540",
    "end": "797570"
  },
  {
    "text": "availability our second challenge is scalability so let's say we release a",
    "start": "797570",
    "end": "808010"
  },
  {
    "start": "803000",
    "end": "803000"
  },
  {
    "text": "fabulous show and by the way I hope I did pick the the right example for this",
    "start": "808010",
    "end": "814250"
  },
  {
    "text": "location for this audience so we",
    "start": "814250",
    "end": "819590"
  },
  {
    "text": "released a fabulous show and here comes some good news and bad news the good news is we attracted a lot of users to",
    "start": "819590",
    "end": "826340"
  },
  {
    "text": "come online to start streaming the new show and the bad news is that we will",
    "start": "826340",
    "end": "831770"
  },
  {
    "text": "see traffic spike like this and it's it",
    "start": "831770",
    "end": "838100"
  },
  {
    "text": "usually means some problems for our carpark last year if our kakihara is under provisioned so how do we deal with",
    "start": "838100",
    "end": "844790"
  },
  {
    "text": "it so on this slide I'm going to show you how we do that problem for with our",
    "start": "844790",
    "end": "852080"
  },
  {
    "text": "stateliest service so on the slide the top of a metric we called the stream",
    "start": "852080",
    "end": "860240"
  },
  {
    "text": "start per second so it is the core measure that we use to to see usually",
    "start": "860240",
    "end": "867620"
  },
  {
    "text": "how much the overall traffic is for Netflix and the bottom magic is the",
    "start": "867620",
    "end": "875000"
  },
  {
    "text": "instance count from a stated service so you can see that the established service",
    "start": "875000",
    "end": "881210"
  },
  {
    "text": "can auto scale pretty well according to the traffic pattern and at the peak the",
    "start": "881210",
    "end": "888500"
  },
  {
    "text": "order of the city service can reach his capacity peak and when the traffic goes",
    "start": "888500",
    "end": "894410"
  },
  {
    "text": "down the failure service can also scale down and stay at a pretty low a pretty",
    "start": "894410",
    "end": "901490"
  },
  {
    "text": "stable level so that means the huge savings in terms of operational cost so",
    "start": "901490",
    "end": "910160"
  },
  {
    "text": "by contrast this is the instance account of one of a cop car cluster and you can",
    "start": "910160",
    "end": "915500"
  },
  {
    "text": "see this is a very boring flat line why this is because Kappa is difficult",
    "start": "915500",
    "end": "923189"
  },
  {
    "text": "to scale and usually we have to over-provision our Kafka caster",
    "start": "923189",
    "end": "928679"
  },
  {
    "text": "statically according to a presumed peak traffic so why is skating difficult for",
    "start": "928679",
    "end": "938549"
  },
  {
    "start": "936000",
    "end": "936000"
  },
  {
    "text": "Kafka let's first review our options available to skew up a cop car posture",
    "start": "938549",
    "end": "944819"
  },
  {
    "text": "so the first option available is that your ad brokers and then you add",
    "start": "944819",
    "end": "950429"
  },
  {
    "text": "partitions to those new brokers so it currently doesn't work well with keep",
    "start": "950429",
    "end": "955799"
  },
  {
    "text": "messages because when we add partitions the order of the kid messages will be",
    "start": "955799",
    "end": "961019"
  },
  {
    "text": "messed up and there's also a practical",
    "start": "961019",
    "end": "966209"
  },
  {
    "text": "limit of number of partitions you can have for a cop car cluster so according",
    "start": "966209",
    "end": "971220"
  },
  {
    "text": "to the latest recommendation from confluent on the 1.1 release you can",
    "start": "971220",
    "end": "976470"
  },
  {
    "text": "have roughly around a hundred thousand partitions for your car park pasture",
    "start": "976470",
    "end": "982230"
  },
  {
    "text": "that being said there's a new proposal",
    "start": "982230",
    "end": "987269"
  },
  {
    "text": "that's being worked on right now keep 253 in order in order message delivery",
    "start": "987269",
    "end": "994439"
  },
  {
    "text": "with partition expansion and division so there's already some you know heated discussion going on in in the cop car",
    "start": "994439",
    "end": "1001639"
  },
  {
    "text": "group you kafka a deaf group and this is actually referred to by some of the user",
    "start": "1001639",
    "end": "1009919"
  },
  {
    "text": "as the holy grail of Kafka's scalability and so definitely keeping an eye on that",
    "start": "1009919",
    "end": "1016819"
  },
  {
    "text": "and the second approach to skew up is to add broker and do partition reassignment",
    "start": "1016819",
    "end": "1026168"
  },
  {
    "text": "so the biggest problem with that is there's a data copying process involved",
    "start": "1026169",
    "end": "1032089"
  },
  {
    "text": "because when you bring up new broker and you reassign the ownership of the partition the new broker has to copy the",
    "start": "1032089",
    "end": "1040850"
  },
  {
    "text": "data of that partition from the current leader before it can function as a leader so these are time-consuming",
    "start": "1040850",
    "end": "1048139"
  },
  {
    "text": "process can usually take about you know a few hours depending on",
    "start": "1048139",
    "end": "1053580"
  },
  {
    "text": "your retention period of data and during that period there will be a significant",
    "start": "1053580",
    "end": "1059550"
  },
  {
    "text": "increase of network traffic and their kind of replication traffic will compete",
    "start": "1059550",
    "end": "1064890"
  },
  {
    "text": "with your production traffic for the limited bandwidth of your car back pasture just imagine that is 2:00 a.m.",
    "start": "1064890",
    "end": "1073800"
  },
  {
    "text": "in the morning and you see a spike of traffic and you need to screw up cow pasture",
    "start": "1073800",
    "end": "1079610"
  },
  {
    "text": "are you comfortable of doing partition reassignment at their time probably not",
    "start": "1079610",
    "end": "1085620"
  },
  {
    "text": "because by the time you are done with your partition reassignment everything is probably over so given all those",
    "start": "1085620",
    "end": "1096050"
  },
  {
    "text": "challenges and limitations from a single cow pasture we start to think instead of",
    "start": "1096050",
    "end": "1103140"
  },
  {
    "text": "looking inside a Kafka cluster for scalability and availability solutions",
    "start": "1103140",
    "end": "1108390"
  },
  {
    "text": "can we scale out and try to utilize multiple clusters so once you are done",
    "start": "1108390",
    "end": "1116580"
  },
  {
    "text": "once you start to migrate from datacenter to cloud one one benefit you",
    "start": "1116580",
    "end": "1122580"
  },
  {
    "text": "were in Italy to notice is the speed and easiness to bring up a new castle even",
    "start": "1122580",
    "end": "1129090"
  },
  {
    "text": "if it's a fairly big big size well it may take months to provision a new like",
    "start": "1129090",
    "end": "1135990"
  },
  {
    "text": "cluster of hundreds of instances in a traditional data center with some kind",
    "start": "1135990",
    "end": "1141180"
  },
  {
    "text": "of manual approval process in cloud it just takes a few mouse clicks and maybe",
    "start": "1141180",
    "end": "1147090"
  },
  {
    "text": "just an API call to your service provider so why not take advantage of",
    "start": "1147090",
    "end": "1152640"
  },
  {
    "text": "that so let's see how we can scale with multiple clusters to deal with traffic",
    "start": "1152640",
    "end": "1160770"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "changes and to start with let's assume you have one cluster and you have a",
    "start": "1160770",
    "end": "1167130"
  },
  {
    "text": "producer and consumer and now you see some like traffic spike and you want to scale up so what you can do is you can",
    "start": "1167130",
    "end": "1175380"
  },
  {
    "text": "start with average a second pasture and create the topics on your second cluster",
    "start": "1175380",
    "end": "1180660"
  },
  {
    "text": "and the next step you pure producer to start producing to both",
    "start": "1180660",
    "end": "1189019"
  },
  {
    "text": "passwords and consumer to start consuming from both casters so now you",
    "start": "1189019",
    "end": "1195379"
  },
  {
    "text": "have your traffic go through both clusters so you actually successfully",
    "start": "1195379",
    "end": "1203179"
  },
  {
    "text": "finished a skating up activity and now",
    "start": "1203179",
    "end": "1208249"
  },
  {
    "text": "the traffic goes down and you need to scale back so in order to achieve skill",
    "start": "1208249",
    "end": "1213649"
  },
  {
    "text": "back there first step you want to do is ask the producer to start producing to",
    "start": "1213649",
    "end": "1219859"
  },
  {
    "text": "the second cluster but at that time the consumers you have to consume from both because it has to make sure that all the",
    "start": "1219859",
    "end": "1228769"
  },
  {
    "text": "data have been consumed from the second pasture or the data retention period has",
    "start": "1228769",
    "end": "1234139"
  },
  {
    "text": "passed on the second cluster and then you can stop fetching from your second",
    "start": "1234139",
    "end": "1239809"
  },
  {
    "text": "cluster you can then safely delete your second cluster and finish this skill up",
    "start": "1239809",
    "end": "1247249"
  },
  {
    "text": "and skill down cycle so here I'm going",
    "start": "1247249",
    "end": "1254899"
  },
  {
    "start": "1253000",
    "end": "1253000"
  },
  {
    "text": "to show you how you can do topic move from one cluster to another as a way to",
    "start": "1254899",
    "end": "1259970"
  },
  {
    "text": "achieve failover so again you have the one cluster to start with and now you",
    "start": "1259970",
    "end": "1268340"
  },
  {
    "text": "want to move the traffic from class 1 to class or two so as a first step you ask",
    "start": "1268340",
    "end": "1275779"
  },
  {
    "text": "the producer to stop producing for the first posture but start producing to the",
    "start": "1275779",
    "end": "1281239"
  },
  {
    "text": "second cluster and the consumer is to needs to in the consumer consumer it",
    "start": "1281239",
    "end": "1287149"
  },
  {
    "text": "will needs to consuming from both clusters until the data retention here",
    "start": "1287149",
    "end": "1295549"
  },
  {
    "text": "has passed on your first classroom or it has consumed all the data from the from",
    "start": "1295549",
    "end": "1301070"
  },
  {
    "text": "the first cluster then the consumer can stop fetching from the curve from the first cluster so we bad",
    "start": "1301070",
    "end": "1308179"
  },
  {
    "text": "you have the traffic goes through the second cluster and you have achieved your failover",
    "start": "1308179",
    "end": "1316210"
  },
  {
    "start": "1317000",
    "end": "1317000"
  },
  {
    "text": "so since I have a talk about failover I would like to do a little bit deep time to see how Netflix does cough cough hey",
    "start": "1317790",
    "end": "1326530"
  },
  {
    "text": "over I want to first make a note that Netflix operates in the island model",
    "start": "1326530",
    "end": "1334750"
  },
  {
    "text": "that means we deploy all our applications in all regions and each",
    "start": "1334750",
    "end": "1339910"
  },
  {
    "text": "region can pretty much operate on its own and there's very little cross region traffic so the goal of our Kafka",
    "start": "1339910",
    "end": "1347650"
  },
  {
    "text": "failover is to ensure that we can recover from a cough cough cluster level",
    "start": "1347650",
    "end": "1352929"
  },
  {
    "text": "failure that happened within a region and we want to achieve that by doing",
    "start": "1352929",
    "end": "1360480"
  },
  {
    "text": "switching client traffic to a different cluster so the benefit of doing that is",
    "start": "1360480",
    "end": "1369610"
  },
  {
    "text": "there's no actual cost or redundancy there's no extra costs for redundancy or",
    "start": "1369610",
    "end": "1376660"
  },
  {
    "text": "cross DC traffic but in this case because at a certain point the same data",
    "start": "1376660",
    "end": "1384429"
  },
  {
    "text": "for the same topic may land up in two different clusters we cannot guarantee",
    "start": "1384429",
    "end": "1391330"
  },
  {
    "text": "any ordering and in best case we can achieve exactly once for our consumers",
    "start": "1391330",
    "end": "1399040"
  },
  {
    "text": "during that failover process because there's no duplicate data in any of the",
    "start": "1399040",
    "end": "1404980"
  },
  {
    "text": "clusters but in worst case if the original cluster is in such a bad shape",
    "start": "1404980",
    "end": "1412720"
  },
  {
    "text": "that you can no longer serve fetch request and then in that case there",
    "start": "1412720",
    "end": "1418990"
  },
  {
    "text": "might be some data loss during failover",
    "start": "1418990",
    "end": "1423540"
  },
  {
    "start": "1425000",
    "end": "1425000"
  },
  {
    "text": "so I want to pause here a little bit and to sum up how multi-class sure can help",
    "start": "1426000",
    "end": "1432060"
  },
  {
    "text": "us to achieve better scalability first and most importantly there's no data",
    "start": "1432060",
    "end": "1438330"
  },
  {
    "text": "copying in that scale process that means we can sue up fast typically just within",
    "start": "1438330",
    "end": "1445920"
  },
  {
    "text": "minutes and with the multiple clusters you can easily do failover by switching",
    "start": "1445920",
    "end": "1452520"
  },
  {
    "text": "time traffic and we currently implemented that extra capability to",
    "start": "1452520",
    "end": "1458400"
  },
  {
    "text": "switching to switch client traffic by some kind of dynamic properties",
    "start": "1458400",
    "end": "1463500"
  },
  {
    "text": "integration in our client applications so that means our client applications",
    "start": "1463500",
    "end": "1469980"
  },
  {
    "text": "can react to runtime property changes without restarting their applications",
    "start": "1469980",
    "end": "1477350"
  },
  {
    "text": "but this approach does not work with keep messages and as you can see in the",
    "start": "1477350",
    "end": "1483060"
  },
  {
    "text": "in the previous slides the ordering of messages can be messed up in this case",
    "start": "1483060",
    "end": "1488850"
  },
  {
    "text": "so this is still something we are trying to figure out and we are trying to find a solution for that for a final solution",
    "start": "1488850",
    "end": "1495540"
  },
  {
    "text": "for and second I want to show how you",
    "start": "1495540",
    "end": "1501690"
  },
  {
    "start": "1498000",
    "end": "1498000"
  },
  {
    "text": "can improve Kaka's availability by having multiple clusters so in this",
    "start": "1501690",
    "end": "1508830"
  },
  {
    "text": "chart you can see we will start with one cluster and this cluster has a has a",
    "start": "1508830",
    "end": "1516360"
  },
  {
    "text": "size of tau brokers and we assume we have replication factor two for the",
    "start": "1516360",
    "end": "1523440"
  },
  {
    "text": "classroom at at some point unfortunately you would use two brokers",
    "start": "1523440",
    "end": "1529100"
  },
  {
    "text": "because that tool blocker represents the rapid the total of all the replicas over",
    "start": "1529100",
    "end": "1535410"
  },
  {
    "text": "a partition you will likely run into some kind of data loss but if we can",
    "start": "1535410",
    "end": "1542820"
  },
  {
    "text": "divide up that cluster into three smaller clusters but you have the application factor to on those three",
    "start": "1542820",
    "end": "1550320"
  },
  {
    "text": "clusters chances are that those two bad brokers will be located in",
    "start": "1550320",
    "end": "1557549"
  },
  {
    "text": "two different clusters and because for each of these clusters in hazard application factor two so losing one",
    "start": "1557549",
    "end": "1564929"
  },
  {
    "text": "broker actually doesn't matter so there's no data loss in the once we divide up the cluster so that's just a",
    "start": "1564929",
    "end": "1574830"
  },
  {
    "text": "high-level intuition on how multi cluster can help with the availability",
    "start": "1574830",
    "end": "1580259"
  },
  {
    "text": "but we can actually approve it so let's divide one big cluster into as small",
    "start": "1580259",
    "end": "1587009"
  },
  {
    "text": "clusters and let's assume that losing K brokers in let's assume replication",
    "start": "1587009",
    "end": "1594570"
  },
  {
    "text": "factor is K in both cases and losing K brokers will lead to some kind of data",
    "start": "1594570",
    "end": "1601350"
  },
  {
    "text": "unavailability we can approve we can prove that the set of smaller clusters",
    "start": "1601350",
    "end": "1608639"
  },
  {
    "text": "can be asked to the power of K minus one times more reliable than one big cluster",
    "start": "1608639",
    "end": "1614789"
  },
  {
    "text": "so if you look at this formula as to the power of K minus one is actually fascinating so that means you will get a",
    "start": "1614789",
    "end": "1623879"
  },
  {
    "text": "lot of benefit by breaking up a class here if you have if the you have a large",
    "start": "1623879",
    "end": "1631379"
  },
  {
    "text": "number of your application and let's take let's take some examples if K is",
    "start": "1631379",
    "end": "1637830"
  },
  {
    "text": "one that means you have replication factor one then this whole thing is one that means there's no benefit of groups",
    "start": "1637830",
    "end": "1645899"
  },
  {
    "text": "of breaking your cluster but if K is three meanest replication factor three",
    "start": "1645899",
    "end": "1651840"
  },
  {
    "text": "which is you know a very common set up for a lot of use cases and if you can",
    "start": "1651840",
    "end": "1658739"
  },
  {
    "text": "break your cluster into ten smaller clusters then that's ten to the power of",
    "start": "1658739",
    "end": "1665009"
  },
  {
    "text": "two and suddenly your class has become 100 times more reliable and then a",
    "start": "1665009",
    "end": "1671940"
  },
  {
    "text": "regional one pasture and if you don't believe me here's the math",
    "start": "1671940",
    "end": "1679669"
  },
  {
    "text": "we basically want to compare the number of combinations to choose K brokers from",
    "start": "1680159",
    "end": "1686190"
  },
  {
    "text": "a culture of size n versus choosing K brokers from any one of the S clusters",
    "start": "1686190",
    "end": "1693449"
  },
  {
    "text": "of size M if you follow the math you'll get to a conclusion of as to the power",
    "start": "1693449",
    "end": "1700409"
  },
  {
    "text": "of s to the power of K minus 1",
    "start": "1700409",
    "end": "1705559"
  },
  {
    "text": "so aside from availability and scalability we find that multiple",
    "start": "1707599",
    "end": "1714839"
  },
  {
    "text": "clusters can also help us to deal with the challenge of high consumer data fan-out so I mean I'm going to use this",
    "start": "1714839",
    "end": "1723379"
  },
  {
    "text": "picture to to show you exactly what I mean by high consumer data find out so",
    "start": "1723379",
    "end": "1730379"
  },
  {
    "text": "this screenshot is taking from our self-service portal and each dotted path",
    "start": "1730379",
    "end": "1739129"
  },
  {
    "text": "from the root which is on the left to the lead which is on the right",
    "start": "1739129",
    "end": "1744989"
  },
  {
    "text": "represents a consumer so if you count we have about 14 consumers for this very",
    "start": "1744989",
    "end": "1752279"
  },
  {
    "text": "popular topic so the data volume for that topic is 4 gigabytes per second and",
    "start": "1752279",
    "end": "1760549"
  },
  {
    "text": "with the 14 consumers and data being compressed on the broker we are still",
    "start": "1760549",
    "end": "1766949"
  },
  {
    "text": "looking at 20 gigabytes out required to certify to satisfy all those 14",
    "start": "1766949",
    "end": "1774119"
  },
  {
    "text": "consumers and that's that is already very challenging for a even a big",
    "start": "1774119",
    "end": "1780029"
  },
  {
    "text": "cluster so how do we deal with that so",
    "start": "1780029",
    "end": "1786719"
  },
  {
    "start": "1783000",
    "end": "1783000"
  },
  {
    "text": "now let's look at this picture we have four consumers for a kafka cluster and",
    "start": "1786719",
    "end": "1791809"
  },
  {
    "text": "that cluster has just enough bandwidth for those four consumers now here comes",
    "start": "1791809",
    "end": "1800129"
  },
  {
    "text": "the fifth consumer and it also wants to consume from the cluster well because we",
    "start": "1800129",
    "end": "1808559"
  },
  {
    "text": "only have enough album them with four for consumers it's this not simply this is not",
    "start": "1808559",
    "end": "1814759"
  },
  {
    "text": "something we can do with the fifth consumer it will exceed the outbound",
    "start": "1814759",
    "end": "1820190"
  },
  {
    "text": "bandwidth for the classroom so what are our options in naive solution is just to",
    "start": "1820190",
    "end": "1827929"
  },
  {
    "text": "add more brokers to your class sure to satisfy the the bytes out but with that",
    "start": "1827929",
    "end": "1833209"
  },
  {
    "text": "approach you are facing with a classroom with every increasing classroom size and",
    "start": "1833209",
    "end": "1839629"
  },
  {
    "text": "as I mentioned before we don't typically like a huge Kafka class ready because",
    "start": "1839629",
    "end": "1845059"
  },
  {
    "text": "they tend to lead to you know worse availability so what can we do so the",
    "start": "1845059",
    "end": "1854509"
  },
  {
    "text": "solutions that we come up with is to create a second culture and the chain the second class you will be the first",
    "start": "1854509",
    "end": "1861589"
  },
  {
    "text": "classroom and then we have some kind of rolling servers basically it's like a",
    "start": "1861589",
    "end": "1867949"
  },
  {
    "text": "mirror maker they're copying data from one classroom to another so basically we the data will be copied from the first",
    "start": "1867949",
    "end": "1874669"
  },
  {
    "text": "cluster to the second cluster and then we assign three consumers to the first",
    "start": "1874669",
    "end": "1880039"
  },
  {
    "text": "cluster and hook to consumers to the second cluster so in this set up we only",
    "start": "1880039",
    "end": "1886519"
  },
  {
    "text": "have four consumers for the first pasture so it will help you dock them",
    "start": "1886519",
    "end": "1893299"
  },
  {
    "text": "with and if more consumers come we can",
    "start": "1893299",
    "end": "1898940"
  },
  {
    "text": "simply add that to the second cluster so with this kind of tree topology and with",
    "start": "1898940",
    "end": "1905599"
  },
  {
    "text": "multiple clusters you will find that actually it can scale infinitely to",
    "start": "1905599",
    "end": "1911899"
  },
  {
    "text": "satisfy any number of consumers so to",
    "start": "1911899",
    "end": "1918349"
  },
  {
    "text": "sum up what are the ideas behind the module cluster so first you want to",
    "start": "1918349",
    "end": "1924169"
  },
  {
    "text": "break up your big cluster into smaller ones and those smaller clusters are",
    "start": "1924169",
    "end": "1929839"
  },
  {
    "text": "usually mostly immutable clusters so",
    "start": "1929839",
    "end": "1935119"
  },
  {
    "text": "what I mean by immutable it means we don't do partition reassignment to our",
    "start": "1935119",
    "end": "1941059"
  },
  {
    "text": "compound clusters and the only operation that we do is creating clusters destroying clusters",
    "start": "1941059",
    "end": "1948110"
  },
  {
    "text": "creating topics delay topics and now",
    "start": "1948110",
    "end": "1953929"
  },
  {
    "text": "once you have your multiple clusters you can scale up and down by adding or",
    "start": "1953929",
    "end": "1958940"
  },
  {
    "text": "removing clusters and as I proved in my",
    "start": "1958940",
    "end": "1964610"
  },
  {
    "text": "previous lies small clusters tend to have better availability than a big",
    "start": "1964610",
    "end": "1969980"
  },
  {
    "text": "cluster but you can either improve that availability by doing failover with",
    "start": "1969980",
    "end": "1975230"
  },
  {
    "text": "client traffic migration and certainly",
    "start": "1975230",
    "end": "1980770"
  },
  {
    "text": "to satisfy the consumer bytes out you can connect class up clusters with a",
    "start": "1980770",
    "end": "1987950"
  },
  {
    "text": "routing service in between and as I mentioned before the routing server is basically like mineral maker that",
    "start": "1987950",
    "end": "1993380"
  },
  {
    "text": "copying data from one cluster to another but they can also do some simple ETL",
    "start": "1993380",
    "end": "1998420"
  },
  {
    "text": "work so now you have multiple clusters and you will find that you see the",
    "start": "1998420",
    "end": "2006780"
  },
  {
    "text": "overhead increase for managing multiple clusters as opposed to managing a single",
    "start": "2006780",
    "end": "2012580"
  },
  {
    "text": "clusters so that's where you need some kind of management service for automation and orchestration and to",
    "start": "2012580",
    "end": "2019780"
  },
  {
    "text": "reduce the chance of human errors we're operating on multiple clusters so I",
    "start": "2019780",
    "end": "2028300"
  },
  {
    "start": "2027000",
    "end": "2027000"
  },
  {
    "text": "would like to think about this multicast architecture as a transition from pads",
    "start": "2028300",
    "end": "2034750"
  },
  {
    "text": "to kettle so for pets they have their own identities and they require",
    "start": "2034750",
    "end": "2040750"
  },
  {
    "text": "personalized care but for cattle they have no identities and they can be",
    "start": "2040750",
    "end": "2047260"
  },
  {
    "text": "produced in mass scale so it becomes a non-event if you if you get or lose a",
    "start": "2047260",
    "end": "2054970"
  },
  {
    "text": "few cattle so we would like to our we like our copper clusters to behave like",
    "start": "2054970",
    "end": "2060638"
  },
  {
    "text": "a kettle where they can be easily created or destroyed for certain purposes so with that I'm showing you",
    "start": "2060639",
    "end": "2070270"
  },
  {
    "start": "2067000",
    "end": "2067000"
  },
  {
    "text": "this complete picture of our multi class or carcass resin",
    "start": "2070270",
    "end": "2075300"
  },
  {
    "text": "flex so on the left side we have our event producers and they produce events",
    "start": "2075300",
    "end": "2082169"
  },
  {
    "text": "to a set of Calca caster which we call confronting Kafka clusters and those",
    "start": "2082170",
    "end": "2088500"
  },
  {
    "text": "event producers are basically every micro-services in Netflix and they",
    "start": "2088500",
    "end": "2095399"
  },
  {
    "text": "produce events in two ways one is through an HTTP proxy or they can use a",
    "start": "2095400",
    "end": "2100980"
  },
  {
    "text": "Java client library in either way they have the capability to interact with",
    "start": "2100980",
    "end": "2107850"
  },
  {
    "text": "multiple clusters and once data get into our front-end cop-car cluster we are",
    "start": "2107850",
    "end": "2115380"
  },
  {
    "text": "consumed by our routing service which is currently implemented on top of link and",
    "start": "2115380",
    "end": "2121110"
  },
  {
    "text": "our auto service further sends those events to downstream sinks including s3",
    "start": "2121110",
    "end": "2127910"
  },
  {
    "text": "elasticsearch and a different set of Kafka cluster which we call consumer",
    "start": "2127910",
    "end": "2133950"
  },
  {
    "text": "caca clusters where they will be consumed by any regular consumers Austrian of streaming and processing",
    "start": "2133950",
    "end": "2141030"
  },
  {
    "text": "jobs so note that we have this unique kind of you know - - hierarchies of",
    "start": "2141030",
    "end": "2148320"
  },
  {
    "text": "kafka clusters so this so this setup is",
    "start": "2148320",
    "end": "2153510"
  },
  {
    "text": "used to achieve two goals one as I pointed out it can help us to deal with",
    "start": "2153510",
    "end": "2158820"
  },
  {
    "text": "the high consumer event of scenario and a second purpose is that with this setup",
    "start": "2158820",
    "end": "2164550"
  },
  {
    "text": "we can achieve a very good isolation between the producer and consumers so",
    "start": "2164550",
    "end": "2172080"
  },
  {
    "text": "that we can do easy multi-tenancy management and I'll talk about multi-tenancy management in later slides",
    "start": "2172080",
    "end": "2181490"
  },
  {
    "text": "okay so in the middle of this box we have our management service and I as I",
    "start": "2182870",
    "end": "2188820"
  },
  {
    "text": "mentioned before it's used to is it used to carry out automations and August regions and in the management service we",
    "start": "2188820",
    "end": "2196350"
  },
  {
    "text": "also have a user interface which we call a self-service where a user can come to",
    "start": "2196350",
    "end": "2202560"
  },
  {
    "text": "our system and request for streams or topics and they can also specify what kind of operations they want on the",
    "start": "2202560",
    "end": "2210119"
  },
  {
    "text": "stream and what kind of things they want to send those events to and our",
    "start": "2210119",
    "end": "2218970"
  },
  {
    "text": "Management Service also have a Adam iam portal so this is a for our own purposes",
    "start": "2218970",
    "end": "2225210"
  },
  {
    "text": "where we can go in and manage all of a cop car coaster from a single place and",
    "start": "2225210",
    "end": "2232260"
  },
  {
    "text": "we can also easily carry out automated operations like failover from this admin",
    "start": "2232260",
    "end": "2238859"
  },
  {
    "text": "portal so that's for availability and",
    "start": "2238859",
    "end": "2244740"
  },
  {
    "start": "2241000",
    "end": "2241000"
  },
  {
    "text": "scalability so now I know I'm going to talk about multi-tenancy so just to give you an idea of the",
    "start": "2244740",
    "end": "2252839"
  },
  {
    "text": "problems we are facing right now looking at our lard or looking at the classroom",
    "start": "2252839",
    "end": "2260400"
  },
  {
    "text": "with the largest number of our clients so for that cluster we have over 400 applications or microservices access in",
    "start": "2260400",
    "end": "2268619"
  },
  {
    "text": "the classroom and at a peak time we have over 33,000 of of network connections",
    "start": "2268619",
    "end": "2276599"
  },
  {
    "text": "per broker so with that kind of scale",
    "start": "2276599",
    "end": "2284880"
  },
  {
    "text": "and you know hundreds of micro services you being oral clients you can easily",
    "start": "2284880",
    "end": "2291540"
  },
  {
    "text": "get into a situation like this so this is what I call a problem kid whatever",
    "start": "2291540",
    "end": "2298349"
  },
  {
    "text": "you have he likes to take it all and this is what happens to our cop car",
    "start": "2298349",
    "end": "2304440"
  },
  {
    "text": "cluster so we start with our caucus service open to everyone in Netflix and",
    "start": "2304440",
    "end": "2310950"
  },
  {
    "text": "it actually fits quite well within the office culture which says freedom and responsibility but as the service",
    "start": "2310950",
    "end": "2319710"
  },
  {
    "text": "becomes more popular we started to observe problems that one client can",
    "start": "2319710",
    "end": "2325319"
  },
  {
    "text": "saturate the inbound or outbound period of a broker and it creates all sorts of",
    "start": "2325319",
    "end": "2331109"
  },
  {
    "text": "problem for us so if you go slow down the other consumers it can even store some",
    "start": "2331109",
    "end": "2338269"
  },
  {
    "text": "consumers and cause was and cause some streaming processing job failures and it",
    "start": "2338269",
    "end": "2343849"
  },
  {
    "text": "will slow down the replication which is likely to cause a stability problem for",
    "start": "2343849",
    "end": "2350929"
  },
  {
    "text": "the whole cluster so we determined that",
    "start": "2350929",
    "end": "2356659"
  },
  {
    "start": "2355000",
    "end": "2355000"
  },
  {
    "text": "we want to do a proper multi-tenancy management and the goal of",
    "start": "2356659",
    "end": "2362599"
  },
  {
    "text": "our more advanced management is to first get to know our clients establish their",
    "start": "2362599",
    "end": "2368869"
  },
  {
    "text": "true identity and then make sure that all of the they all have a fair share of",
    "start": "2368869",
    "end": "2374899"
  },
  {
    "text": "resources and they will not affect each other and finally we want to do a better",
    "start": "2374899",
    "end": "2380869"
  },
  {
    "text": "capacity planning with all the details we have on our clients so I would like",
    "start": "2380869",
    "end": "2387649"
  },
  {
    "text": "to think that the multi-tenancy management is no more complicated than hotel management to think of their",
    "start": "2387649",
    "end": "2395059"
  },
  {
    "text": "process you have to go through to get into a hotel room first you have to make",
    "start": "2395059",
    "end": "2400279"
  },
  {
    "text": "a reservation so it's the is it is equivalent to the client registration",
    "start": "2400279",
    "end": "2405379"
  },
  {
    "text": "process in our multi-tenancy management where our client will come to us and tell us the topics they are interested",
    "start": "2405379",
    "end": "2413209"
  },
  {
    "text": "to consume or produce and a second step",
    "start": "2413209",
    "end": "2418939"
  },
  {
    "text": "to get into the hotel room is to check in with front desk and show your ID this",
    "start": "2418939",
    "end": "2425479"
  },
  {
    "text": "is the authentication in multi-tenancy management and the final step before you",
    "start": "2425479",
    "end": "2432169"
  },
  {
    "text": "can get into your hotel room is to obtain a key so the key is used to",
    "start": "2432169",
    "end": "2437299"
  },
  {
    "text": "guarantee that you there you will get what your reserved word but nothing more this is the authorization and is also",
    "start": "2437299",
    "end": "2445729"
  },
  {
    "text": "equivalent to Kafka's ACL and coda so of",
    "start": "2445729",
    "end": "2451009"
  },
  {
    "text": "all these three steps I find that the most challenging but most critical step",
    "start": "2451009",
    "end": "2456139"
  },
  {
    "text": "is authentication so in the old ways in the old days when we need to identify",
    "start": "2456139",
    "end": "2462739"
  },
  {
    "text": "our certain clients for a Kafka concert you know we usually",
    "start": "2462739",
    "end": "2468850"
  },
  {
    "text": "have some usual suspects that we can ask for that we can email or ask them in the",
    "start": "2468850",
    "end": "2475150"
  },
  {
    "text": "slack channel or sometimes we can do code search to find all the references",
    "start": "2475150",
    "end": "2480220"
  },
  {
    "text": "of certain topics without certain topics within the source code of Netflix and",
    "start": "2480220",
    "end": "2486630"
  },
  {
    "text": "sometimes we can do TCP dump to find who is trying to access us but we so realize",
    "start": "2486630",
    "end": "2493990"
  },
  {
    "text": "I've done that none of this approach scale so what we decided to do is to do",
    "start": "2493990",
    "end": "2500170"
  },
  {
    "text": "proper authentication and authorization based on our Netflix security system so",
    "start": "2500170",
    "end": "2507270"
  },
  {
    "text": "the first step that we one that we have done is to require every client to",
    "start": "2507270",
    "end": "2513850"
  },
  {
    "text": "communicate with us with VSS via SSL and we required the client earth for all our",
    "start": "2513850",
    "end": "2521470"
  },
  {
    "text": "clients that turns out to be a not difficult task because our Security's us",
    "start": "2521470",
    "end": "2527590"
  },
  {
    "text": "our security system has already paved the path for us by installing a standard",
    "start": "2527590",
    "end": "2533950"
  },
  {
    "text": "client cert on every Netflix instance and that client cert includes all the",
    "start": "2533950",
    "end": "2540490"
  },
  {
    "text": "information we need like the host a host name IP address and most importantly the",
    "start": "2540490",
    "end": "2547780"
  },
  {
    "text": "application name and the second step that we have done is to integrate cop",
    "start": "2547780",
    "end": "2554260"
  },
  {
    "text": "cast authorization with Netflix authorization service so Netflix",
    "start": "2554260",
    "end": "2560350"
  },
  {
    "text": "authorization service currently only works for restful services so the only",
    "start": "2560350",
    "end": "2566770"
  },
  {
    "text": "understand HTTP method as they are some kind of operation and UI or as some kind",
    "start": "2566770",
    "end": "2573130"
  },
  {
    "text": "of resource so to speed up the integration with our authorization",
    "start": "2573130",
    "end": "2578650"
  },
  {
    "text": "service we decide to do a mapping from Kafka operation to HTTP methods which",
    "start": "2578650",
    "end": "2586540"
  },
  {
    "text": "I'll show a detail on the next slide so after going through all these efforts we",
    "start": "2586540",
    "end": "2594670"
  },
  {
    "text": "find that we are able to impose ACL and coda on truclient I true",
    "start": "2594670",
    "end": "2602490"
  },
  {
    "text": "true application identity so in this",
    "start": "2602490",
    "end": "2608790"
  },
  {
    "text": "slide I'm going to show you the process of authentication and authorization for our caucus service so you have an",
    "start": "2608790",
    "end": "2615780"
  },
  {
    "text": "application ax here who wants to produce some records and we have our",
    "start": "2615780",
    "end": "2621690"
  },
  {
    "text": "authorization service which is basically a ruse engine that operate our a preset",
    "start": "2621690",
    "end": "2627420"
  },
  {
    "text": "of a predefined rules so the first step for that application to produce some",
    "start": "2627420",
    "end": "2634140"
  },
  {
    "text": "record is to first establish a SSL session with its client cert and now and",
    "start": "2634140",
    "end": "2642000"
  },
  {
    "text": "the our kata broker will extract the application name from that point cert",
    "start": "2642000",
    "end": "2649410"
  },
  {
    "text": "and then the application can start to",
    "start": "2649410",
    "end": "2656780"
  },
  {
    "text": "create some requests for write to a",
    "start": "2656780",
    "end": "2662220"
  },
  {
    "text": "topic fool so once we get those produce",
    "start": "2662220",
    "end": "2668339"
  },
  {
    "text": "requests or write requests our broker will in turn ask a question from our all",
    "start": "2668339",
    "end": "2673890"
  },
  {
    "text": "service basically it will ask the question whether application acts has",
    "start": "2673890",
    "end": "2679740"
  },
  {
    "text": "the permission to write to topic foo and here we map the right topic",
    "start": "2679740",
    "end": "2688560"
  },
  {
    "text": "operation to the HTTP method put followed by a path slash topic slash",
    "start": "2688560",
    "end": "2696270"
  },
  {
    "text": "food because that's the only thing that our off service understands so let's say",
    "start": "2696270",
    "end": "2703530"
  },
  {
    "text": "the auth service returns a YES on this answer on this question and our broker",
    "start": "2703530",
    "end": "2710880"
  },
  {
    "text": "can then accept that produce request and write the data into the log and then",
    "start": "2710880",
    "end": "2718040"
  },
  {
    "text": "send a successful back back to the producer and that completes the author",
    "start": "2718040",
    "end": "2723839"
  },
  {
    "text": "authentication and authorization for our cooperation",
    "start": "2723839",
    "end": "2729020"
  },
  {
    "text": "so that's the end of my talk it has been",
    "start": "2729349",
    "end": "2734999"
  },
  {
    "text": "a long talk and I hope you know everyone can enjoy some bit of that and it's",
    "start": "2734999",
    "end": "2742619"
  },
  {
    "text": "perfect okay that you are not 100% clear on you know certain aspects of that but",
    "start": "2742619",
    "end": "2748589"
  },
  {
    "text": "I want you to walk away with some high-level ideas and maybe start to make",
    "start": "2748589",
    "end": "2754559"
  },
  {
    "text": "use of those ideas and specifically if you hit a bottleneck of scalability and",
    "start": "2754559",
    "end": "2761670"
  },
  {
    "text": "availability from a single cluster try to scale with the multiple clusters that",
    "start": "2761670",
    "end": "2767309"
  },
  {
    "text": "will give you a lot of benefits like being able to scale up and down with traffic by just simply adding removing",
    "start": "2767309",
    "end": "2774769"
  },
  {
    "text": "clusters doing failover migrating by migrating client traffic and then you",
    "start": "2774769",
    "end": "2782099"
  },
  {
    "text": "can also have the ability to change classes to deal with the high consumer",
    "start": "2782099",
    "end": "2787140"
  },
  {
    "text": "fare no problem and for multi-tenancy",
    "start": "2787140",
    "end": "2792650"
  },
  {
    "text": "the most important step is to do proper authentication and authorization and",
    "start": "2793279",
    "end": "2798900"
  },
  {
    "text": "that will lay you a very good foundation for your multi-tenancy management and you can achieve that goal by integrate",
    "start": "2798900",
    "end": "2805589"
  },
  {
    "text": "with your ssl infrastructure and possibly your own auto service and that",
    "start": "2805589",
    "end": "2813299"
  },
  {
    "text": "was it thank you very much [Applause]",
    "start": "2813299",
    "end": "2819880"
  }
]