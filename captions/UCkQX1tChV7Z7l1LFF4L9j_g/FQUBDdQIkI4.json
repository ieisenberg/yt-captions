[
  {
    "text": "[Music]",
    "start": "1100",
    "end": "10200"
  },
  {
    "text": "all right morning everyone um quick round of questions who here is a Java",
    "start": "10200",
    "end": "15880"
  },
  {
    "text": "developer all right who's not a Java developer but is here because of kubernetes all right awesome glad that",
    "start": "15880",
    "end": "22720"
  },
  {
    "text": "you came here because we do have a few things that are applicable to any language any runtime so let's get",
    "start": "22720",
    "end": "29199"
  },
  {
    "text": "started yes uh I work for uh Microsoft now I worked for Oracle before and uh",
    "start": "29199",
    "end": "36399"
  },
  {
    "text": "just to be clear I use a Mac and I'm a Java",
    "start": "36399",
    "end": "41600"
  },
  {
    "text": "developer at Microsoft so if that is not interesting enough hopefully the rest of the talk is",
    "start": "41600",
    "end": "48399"
  },
  {
    "text": "even more interesting than that weirdness paradoxical",
    "start": "48399",
    "end": "54320"
  },
  {
    "text": "situation um I work in the jav engineering team we have our own jdk at Microsoft",
    "start": "54320",
    "end": "60840"
  },
  {
    "text": "and um we help internal teams at Microsoft to optimize Java workloads",
    "start": "60840",
    "end": "66760"
  },
  {
    "text": "I'll give you an example of anybody can give an example of where Java is used inside",
    "start": "66760",
    "end": "73360"
  },
  {
    "text": "Microsoft anybody has an idea sorry",
    "start": "73360",
    "end": "78720"
  },
  {
    "text": "what Azure yes Azure has a lot of java internally in fact there is a component",
    "start": "78720",
    "end": "84320"
  },
  {
    "text": "called Azure control plane that does a lot of messaging Pub sub across data",
    "start": "84320",
    "end": "90040"
  },
  {
    "text": "centers and we use Java in uh one of that uh um in that",
    "start": "90040",
    "end": "95640"
  },
  {
    "text": "infrastructure office not much Java behind office except maybe elastic",
    "start": "95640",
    "end": "100680"
  },
  {
    "text": "search uh which is a Java technology uh for a few things anything",
    "start": "100680",
    "end": "105960"
  },
  {
    "text": "else so power toys not Java Minecraft",
    "start": "105960",
    "end": "111000"
  },
  {
    "text": "yes people forget Minecraft is Java there is the the non Java version of it now but the Java version has tens of",
    "start": "111000",
    "end": "118600"
  },
  {
    "text": "millions of players around the world and we have hundreds of hundreds of thousands of jvm instances at Microsoft",
    "start": "118600",
    "end": "125880"
  },
  {
    "text": "running Minecraft servers for the Java edition of Minecraft anything",
    "start": "125880",
    "end": "133000"
  },
  {
    "text": "else LinkedIn yes LinkedIn is the largest subsidiary at Microsoft fully on",
    "start": "133000",
    "end": "140640"
  },
  {
    "text": "Java with hundreds of thousands of jvms in production as well even more than the",
    "start": "140640",
    "end": "146200"
  },
  {
    "text": "Minecraft servers besides Minecraft linked in Azure we have a lot of big data so if",
    "start": "146200",
    "end": "152720"
  },
  {
    "text": "you're running spark if you're running hop if you're running Kafka those things",
    "start": "152720",
    "end": "157959"
  },
  {
    "text": "are written in Java it's the jvm runtime powering those things so even if you're not a Java developer but you are",
    "start": "157959",
    "end": "165280"
  },
  {
    "text": "interacting with those things you are consuming Java technology at the end of the day and if you're not a developer at",
    "start": "165280",
    "end": "172040"
  },
  {
    "text": "all but you are using for some reason",
    "start": "172040",
    "end": "177519"
  },
  {
    "text": "bang you are using Java Technologies behind the scenes because we also have a lot of java at bang all right so what",
    "start": "177519",
    "end": "185360"
  },
  {
    "text": "this what is this talk about we're going to cover four things we're going to cover a little bit of the basics of",
    "start": "185360",
    "end": "191400"
  },
  {
    "text": "optimizing Java work loads on kubernetes we're going to look at size of containers and the startup time we're",
    "start": "191400",
    "end": "198040"
  },
  {
    "text": "going to look at jvm defaults and how ergonomics in the jvm play a significant",
    "start": "198040",
    "end": "203080"
  },
  {
    "text": "role in your workloads then you're going to talk about kubernetes how kubernetes has some",
    "start": "203080",
    "end": "210560"
  },
  {
    "text": "interesting things that may affect your Java workloads and finally this weird",
    "start": "210560",
    "end": "215799"
  },
  {
    "text": "concept that I'm coming up with called AB performance testing in production all right there's a lot to",
    "start": "215799",
    "end": "222120"
  },
  {
    "text": "unpack so let's get started now now have only 42 minutes for 65 slides so stick",
    "start": "222120",
    "end": "229280"
  },
  {
    "text": "with me all right first and foremost this is not a jvm advanced tuning class if you",
    "start": "229280",
    "end": "236519"
  },
  {
    "text": "want to go uh uh learning about jvm tuning how to Le uh how to read and",
    "start": "236519",
    "end": "242280"
  },
  {
    "text": "understand GC garbage collection logs Java flat recorder jvm memory",
    "start": "242280",
    "end": "247519"
  },
  {
    "text": "optimization coding optimization tier compilation in the justing time compil inside the jvm there's plenty of books",
    "start": "247519",
    "end": "254920"
  },
  {
    "text": "from great experts and uh online material about that please go ahead and look for them I'm not an expert in jvm",
    "start": "254920",
    "end": "262400"
  },
  {
    "text": "tuning we do have jvm t experts in our jvm Engineering Group but if you don't",
    "start": "262400",
    "end": "268199"
  },
  {
    "text": "learn it won't be from this talk but hopefully this talk gives you pointers of opportunities so then you can go and",
    "start": "268199",
    "end": "274759"
  },
  {
    "text": "learn more later okay size and start of time who's",
    "start": "274759",
    "end": "281520"
  },
  {
    "text": "here is interested in reducing the size of your container images all right what is who who here",
    "start": "281520",
    "end": "290560"
  },
  {
    "text": "Rose raise your hand here what is the first reason why you want to reduce the size of C image",
    "start": "290560",
    "end": "298400"
  },
  {
    "text": "the download the download okay I and other folks that I've seen",
    "start": "301639",
    "end": "307720"
  },
  {
    "text": "online say that size is important but not the most important part remember",
    "start": "307720",
    "end": "313639"
  },
  {
    "text": "that you are running your infrastructure on a data center with highs speeed internet between the VMS is the speed",
    "start": "313639",
    "end": "320280"
  },
  {
    "text": "really uh impacting is the size really impacting the download of the image from your container registry to your VM where",
    "start": "320280",
    "end": "326759"
  },
  {
    "text": "the container will run if you can track the slowness of a startup time back to",
    "start": "326759",
    "end": "332960"
  },
  {
    "text": "download back to the speed of that then yes reduce the size if it storage is",
    "start": "332960",
    "end": "338240"
  },
  {
    "text": "getting expensive then sure reduce the size but I believe that security is even more important it's about reducing the",
    "start": "338240",
    "end": "344600"
  },
  {
    "text": "surface attack area it's about reducing components that are shipped in the image and may become an attacking Vector it's",
    "start": "344600",
    "end": "351240"
  },
  {
    "text": "about reducing what goes in so that um um patching and updating that image will",
    "start": "351240",
    "end": "358319"
  },
  {
    "text": "be faster and will will reduce basically all the dependencies of your system in production so for example oh my God",
    "start": "358319",
    "end": "365520"
  },
  {
    "text": "where do we have log for J in production well we don't use log for J because we remove that dependency from everywhere",
    "start": "365520",
    "end": "372280"
  },
  {
    "text": "just to reduce the size yeah sure but your primary goal was to reduce uh attacking Vector so that's an",
    "start": "372280",
    "end": "379400"
  },
  {
    "text": "example easier to audit as well people dealing with uh as bomb com um supply",
    "start": "379400",
    "end": "385639"
  },
  {
    "text": "chain security component governance all of that good stuff in recent days that",
    "start": "385639",
    "end": "391160"
  },
  {
    "text": "is in my opinion the primary reason to reduce the size of an image but how to reduce the image there",
    "start": "391160",
    "end": "398479"
  },
  {
    "text": "are three main areas and I have a good friend at oraco who uh presented this many times David deasi and uh he broke",
    "start": "398479",
    "end": "405560"
  },
  {
    "text": "down to these three areas there's the base image layer there is the application layer the onetime layer so",
    "start": "405560",
    "end": "412039"
  },
  {
    "text": "for base image layer you can use slim versions of Linux distributions you can use distal as images U or you can just",
    "start": "412039",
    "end": "419879"
  },
  {
    "text": "you know even build your own Linux Bas image with just the whatever distribution you want to base it",
    "start": "419879",
    "end": "427800"
  },
  {
    "text": "on what Aline Alpine is a good option as well and I'll talk more about that in the next Slide the second layer is the",
    "start": "427800",
    "end": "434879"
  },
  {
    "text": "Java application you should only put the dependencies that your application every uh really needs and it's not just Java",
    "start": "434879",
    "end": "440879"
  },
  {
    "text": "application but any application node packages python packages anything that goes in you should really be careful",
    "start": "440879",
    "end": "445919"
  },
  {
    "text": "about what is going into the final image uh there is a trick about uh application",
    "start": "445919",
    "end": "454000"
  },
  {
    "text": "layer you actually should break down the application layer in different layers the layer of your container image with",
    "start": "454000",
    "end": "460440"
  },
  {
    "text": "just the dependencies and then the layer with your application code why is that",
    "start": "460440",
    "end": "466159"
  },
  {
    "text": "caching you're going to cach the dependencies if you're not changing the dependencies you're not going to build",
    "start": "466159",
    "end": "471360"
  },
  {
    "text": "that layer again just the application layer if your spring developer spring has a plugin for that for",
    "start": "471360",
    "end": "478199"
  },
  {
    "text": "example run as a non-root user that's uh quite important and finally the jvm",
    "start": "478199",
    "end": "484039"
  },
  {
    "text": "runtime or any Tac runtime if your Tac runtime has capabilities of shrinking",
    "start": "484039",
    "end": "489240"
  },
  {
    "text": "down the runtime to something that only contains the bits required to run your application then great and the jdk",
    "start": "489240",
    "end": "496919"
  },
  {
    "text": "project uh years ago added that mechanism of modules so you can have a jvm run time with only the modules of",
    "start": "496919",
    "end": "504319"
  },
  {
    "text": "the jdk that are important to your application and if you really want to go",
    "start": "504319",
    "end": "509639"
  },
  {
    "text": "to extra mile drawm you can build a native image all right so uh here's a",
    "start": "509639",
    "end": "514959"
  },
  {
    "text": "few examples of uh size differences of images so you have Ubuntu and dban fo uh",
    "start": "514959",
    "end": "521120"
  },
  {
    "text": "actually it's interesting that Ubuntu fo Ubuntu doesn't have a sling version anymore they just have auntu 4 and it's",
    "start": "521120",
    "end": "527360"
  },
  {
    "text": "78 megabytes and Compares with the dban slam version of of dban if you really",
    "start": "527360",
    "end": "533959"
  },
  {
    "text": "want to cut it down then Alpine now Alpine has some um um",
    "start": "533959",
    "end": "540000"
  },
  {
    "text": "interesting things that you have to consider uh it's a muzzle libc library and some libraries may not be compatible",
    "start": "540000",
    "end": "546480"
  },
  {
    "text": "luckily the jdk is compatible with muzzle but there are other uh uh issues",
    "start": "546480",
    "end": "551720"
  },
  {
    "text": "in the past that look they got fixed but who knows what else is there so keep an",
    "start": "551720",
    "end": "558040"
  },
  {
    "text": "eye on Alpine it's a good option but make sure you test it and also it's hard to get commercial",
    "start": "558040",
    "end": "563560"
  },
  {
    "text": "support from cloud vendors for Alpine so if you're on Amazon Google or Azure you may not get that support",
    "start": "563560",
    "end": "570000"
  },
  {
    "text": "all right spring the application layer uh this is a classic Docker file for a spring application okay I have my jdk",
    "start": "570000",
    "end": "576240"
  },
  {
    "text": "interestingly enough it's coming from Aline but that's from the spring boot documentation I have my fat jar and I",
    "start": "576240",
    "end": "582880"
  },
  {
    "text": "have uh the entry point Java minus jar my application that's great but not the",
    "start": "582880",
    "end": "588160"
  },
  {
    "text": "best the the a better version of it would be to uh use the spring user or",
    "start": "588160",
    "end": "594519"
  },
  {
    "text": "create a custom user so you don't run it as root and finally an even better",
    "start": "594519",
    "end": "599760"
  },
  {
    "text": "option is to have those dependencies in different layers so when your application changes only that layer gets",
    "start": "599760",
    "end": "606640"
  },
  {
    "text": "rebuilt and that optimizes your build optimizes the download of the image as well and so on so",
    "start": "606640",
    "end": "614000"
  },
  {
    "text": "forth and if you want to Auto automate all that you can put your cicd I'm sorry it's small but um hopefully you can go",
    "start": "614000",
    "end": "620920"
  },
  {
    "text": "to the documentation on Spring just search for spring boot Docker and you're going to get the maven plugin to build",
    "start": "620920",
    "end": "626000"
  },
  {
    "text": "that image for you all right last ler the jvm or the language runtime whatever stack you have",
    "start": "626000",
    "end": "632720"
  },
  {
    "text": "uh here's an example of recent modern Java days jdk 22 334 megabytes extracted",
    "start": "632720",
    "end": "640160"
  },
  {
    "text": "but when you create a Java custom run time with only the bits that are needed for your application the jvm is only 57",
    "start": "640160",
    "end": "647600"
  },
  {
    "text": "megabytes and if you really want to go native you use grvm native image and you get less than 10 megabytes in many",
    "start": "647600",
    "end": "656279"
  },
  {
    "text": "applications okay so uh let's talk quickly about startup time uh uh of the jvm and other uh potentially other",
    "start": "656720",
    "end": "663480"
  },
  {
    "text": "languages may have capabilities like that the jdk has a capability called class data sharing it's basically a",
    "start": "663480",
    "end": "668880"
  },
  {
    "text": "binary representation of all the libraries so that it gets loaded into memory much faster so you got uh",
    "start": "668880",
    "end": "675240"
  },
  {
    "text": "improvements of startup Time by half by like well twice faster um and these are the jobs that you should look into on",
    "start": "675240",
    "end": "681720"
  },
  {
    "text": "how to a job stands for Java enhancement proposal or GDK enhancement proposal uh in search for those numbers or just",
    "start": "681720",
    "end": "687959"
  },
  {
    "text": "class data sharing you're going to figure out great ideas some future projects in startup",
    "start": "687959",
    "end": "694760"
  },
  {
    "text": "time that are happening in the open jdk world project Laden led by Oracle and Project Crack led by AO systems crack",
    "start": "694760",
    "end": "701680"
  },
  {
    "text": "stands for check uh checkpoint restore and uh here's some benchmarks that M uh",
    "start": "701680",
    "end": "707160"
  },
  {
    "text": "Oracle ran for Laden on Spring Boot and you can see the",
    "start": "707160",
    "end": "712480"
  },
  {
    "text": "uh the the blue bar is the traditional uh default for jdk 22 and then you have",
    "start": "712480",
    "end": "718480"
  },
  {
    "text": "all the way down to uh spring boot aot plus prean which is a cached version of the uh uh so you do a train you train",
    "start": "718480",
    "end": "725800"
  },
  {
    "text": "you train the execution and you get a um um the caching of that execution so the",
    "start": "725800",
    "end": "730839"
  },
  {
    "text": "next time you store it it's a lot faster so you go from one point well near about 2 seconds down to 0.5 seconds so",
    "start": "730839",
    "end": "740079"
  },
  {
    "text": "significant Improvement there then you have checko restore which",
    "start": "740079",
    "end": "747120"
  },
  {
    "text": "allows you to go from nearly 4 seconds for this application down to 38",
    "start": "747120",
    "end": "752279"
  },
  {
    "text": "milliseconds so it's a significant Improvement in startup time but of",
    "start": "752279",
    "end": "757680"
  },
  {
    "text": "course this is a checkpoint restore technology uh the framework the library the runtime they have to be aware of",
    "start": "757680",
    "end": "763600"
  },
  {
    "text": "checkpoint so you have the state of the application at a snapshot state so then",
    "start": "763600",
    "end": "769800"
  },
  {
    "text": "you can take that put in this and then snap and recover next time so keep an eye on those projects they will make",
    "start": "769800",
    "end": "776639"
  },
  {
    "text": "significant changes in the Java ecosystem all right so let's go into part one and",
    "start": "776639",
    "end": "781959"
  },
  {
    "text": "we still have 32 minutes great jvm defaults uh the jvm has something called",
    "start": "781959",
    "end": "787519"
  },
  {
    "text": "default economics and almost every language run time stack has defaults and",
    "start": "787519",
    "end": "793040"
  },
  {
    "text": "I like to say there's always premature optimization because the defaults tend to be a little bit conservative they",
    "start": "793040",
    "end": "798560"
  },
  {
    "text": "tend to be a little bit work for most applications but that is in essence an optimization by itself that it has to",
    "start": "798560",
    "end": "805639"
  },
  {
    "text": "set how much memory we've use for the Heap how many threads we use for a jit compiler and all of that based on",
    "start": "805639",
    "end": "811760"
  },
  {
    "text": "signals from the environment so let's do a quick puzzle",
    "start": "811760",
    "end": "816800"
  },
  {
    "text": "with uh jvm ergonomics and if my my screen fails we",
    "start": "816800",
    "end": "822399"
  },
  {
    "text": "can uh go back to slides and I have screenshots all right so here I have uh",
    "start": "822399",
    "end": "828519"
  },
  {
    "text": "uh some M uh puzzles and uh Let's do let's look at puzzle",
    "start": "828519",
    "end": "834240"
  },
  {
    "text": "one so I'm going to run a jav application um",
    "start": "834240",
    "end": "839560"
  },
  {
    "text": "actually not this one let's go to processors first uh I have a Java application quite simple public St V",
    "start": "839560",
    "end": "847560"
  },
  {
    "text": "main give me how many processors are there uh that the jvm can see okay so let's run puzzle",
    "start": "847560",
    "end": "855440"
  },
  {
    "text": "one puzzle one we run this thing on my local machine we'll just do",
    "start": "855440",
    "end": "861240"
  },
  {
    "text": "docka run Java and the application this is a Mac with uh 10",
    "start": "861240",
    "end": "869920"
  },
  {
    "text": "processors if I run this command how many processor R the jvmc anybody can",
    "start": "869920",
    "end": "876199"
  },
  {
    "text": "guess how many 10 let's",
    "start": "876199",
    "end": "881720"
  },
  {
    "text": "see it seees only eight why because I'm running Docker desktop",
    "start": "883040",
    "end": "888639"
  },
  {
    "text": "and I configure it you only allow eight processors for Docker desktop okay so",
    "start": "888639",
    "end": "893880"
  },
  {
    "text": "that was a a tricky tricky puzzle but it goes to show you how",
    "start": "893880",
    "end": "899040"
  },
  {
    "text": "settings in the environment will affect the jvm period right let's look at puzzle two so puzzle two I'm setting two",
    "start": "899040",
    "end": "906160"
  },
  {
    "text": "CPUs for the container so if I run this thing it's not really a puzzle I I will",
    "start": "906160",
    "end": "913839"
  },
  {
    "text": "get I will get two processors easy but what if I have a",
    "start": "913839",
    "end": "921880"
  },
  {
    "text": "variable not not not sorry not natural number like a decimal number let's look",
    "start": "921880",
    "end": "927639"
  },
  {
    "text": "at puzzle three 1.2 CPUs or in kubernetes World 1200 mour how many",
    "start": "927639",
    "end": "934360"
  },
  {
    "text": "processor does the JMC here anybody can take a guess two who said",
    "start": "934360",
    "end": "940600"
  },
  {
    "text": "two",
    "start": "940600",
    "end": "943600"
  },
  {
    "text": "okay and yes two because the jfm will round up if it has more than one",
    "start": "946720",
    "end": "951839"
  },
  {
    "text": "processor one 1,000 M cor it's two if it's 2100 M cor three processors so on",
    "start": "951839",
    "end": "958639"
  },
  {
    "text": "so for fourth all right let's go to memory memory is tricky uh we have uh I",
    "start": "958639",
    "end": "965920"
  },
  {
    "text": "have a program here I'll just show you that will find out what is the garbage collector running in the jvm now there's",
    "start": "965920",
    "end": "972800"
  },
  {
    "text": "a lot of code here because this code is actually compatible with lots of versions of the jvm um uh in in recent versions it's a",
    "start": "972800",
    "end": "979920"
  },
  {
    "text": "lot easier but I wanted to have something compatible with older versions all right so let's run this program cat",
    "start": "979920",
    "end": "986000"
  },
  {
    "text": "puzzle one and I have one one CPU with 500 mags of memory anybody can guess",
    "start": "986000",
    "end": "994360"
  },
  {
    "text": "what is the garbage collector that jvm will select and there are like five options in the jvm these days and how",
    "start": "994360",
    "end": "1000639"
  },
  {
    "text": "much memory will be set for the Heap for the memory it's going to be seral and how",
    "start": "1000639",
    "end": "1006639"
  },
  {
    "text": "much Heap how much 55%",
    "start": "1006639",
    "end": "1012600"
  },
  {
    "text": "25% so let's run this thing",
    "start": "1012600",
    "end": "1017560"
  },
  {
    "text": "25% correct and um seral so that goes to",
    "start": "1021360",
    "end": "1027480"
  },
  {
    "text": "show you that if you don't tune properly the jvm you're going to get really bad Heap configuration and why is that I'll",
    "start": "1027480",
    "end": "1033520"
  },
  {
    "text": "show you later let's go to the next puzzle I don't want I want spend too much time here with puzzles we have two",
    "start": "1033520",
    "end": "1039880"
  },
  {
    "text": "CPUs and two gig of memory you want to take a",
    "start": "1039880",
    "end": "1044760"
  },
  {
    "text": "guess all right Jan and 25% so let's go to puzzle",
    "start": "1046959",
    "end": "1055240"
  },
  {
    "text": "two so you got 25% now I want to do a quick change here",
    "start": "1055960",
    "end": "1066640"
  },
  {
    "text": "because I think I I made a mistake on my on my puzzle so let's run this puzzle",
    "start": "1066960",
    "end": "1072640"
  },
  {
    "text": "again let's give two gig all right so puzzle one let's go",
    "start": "1072640",
    "end": "1079039"
  },
  {
    "text": "back to puzzle one one CPU 2 gig which garbage collector how much",
    "start": "1079039",
    "end": "1084720"
  },
  {
    "text": "Heap the",
    "start": "1084720",
    "end": "1087880"
  },
  {
    "text": "same so you got 25% in cereal all right well all",
    "start": "1091080",
    "end": "1097000"
  },
  {
    "text": "done but there is a little puzzle this one is two CPUs with",
    "start": "1097000",
    "end": "1102919"
  },
  {
    "text": "1792 megabytes which garbage collector",
    "start": "1102919",
    "end": "1109480"
  },
  {
    "text": "G1 yeah you will get G1 but if you reduce one",
    "start": "1113000",
    "end": "1121400"
  },
  {
    "text": "megabyte then you get Cal because of one megabyte and this is",
    "start": "1123240",
    "end": "1128480"
  },
  {
    "text": "inside the source code of the jvm okay this logic so that's the trash hod",
    "start": "1128480",
    "end": "1134480"
  },
  {
    "text": "um yeah so it goes to show how how",
    "start": "1134480",
    "end": "1140520"
  },
  {
    "text": "complicated things are on this thing oh oh I remember where I missed I missed",
    "start": "1140520",
    "end": "1146000"
  },
  {
    "text": "the puzzle one puzzle one it was wrong on one thing it's not it's actually let's do",
    "start": "1146000",
    "end": "1154000"
  },
  {
    "text": "200 mag yes I remember now how 200 mag the hip size will not be",
    "start": "1154000",
    "end": "1162280"
  },
  {
    "text": "25% it will be less it will be around 50% so let's go back to the",
    "start": "1162280",
    "end": "1169400"
  },
  {
    "text": "for point and let's jump over here this is",
    "start": "1169400",
    "end": "1176000"
  },
  {
    "text": "the the math of the jvm at least other language run times may have different algorithms the defa Hep size for any",
    "start": "1176000",
    "end": "1183280"
  },
  {
    "text": "environment with less than 256 megabytes will be 50% that's the default Hep size",
    "start": "1183280",
    "end": "1188679"
  },
  {
    "text": "and then you have a pretty much a stable line of 127 megabytes up to 512",
    "start": "1188679",
    "end": "1194600"
  },
  {
    "text": "megabytes and then above that the Heap size is is set by 25 to 25% so if you're",
    "start": "1194600",
    "end": "1201559"
  },
  {
    "text": "just running like your application in the cloud and not configuring hip size which most people actually do really",
    "start": "1201559",
    "end": "1207440"
  },
  {
    "text": "well generally they don't don't have to concern about this that much unless you",
    "start": "1207440",
    "end": "1212640"
  },
  {
    "text": "are not tuning the jvm at at a minimum and this comes from a time of when the",
    "start": "1212640",
    "end": "1218919"
  },
  {
    "text": "jvm was designed for environments that were shared with different processes but in the container world the jvm is now s",
    "start": "1218919",
    "end": "1226320"
  },
  {
    "text": "to take advantage of as much resources available that environment so we have to uh inform the jvm manually that hey jvm",
    "start": "1226320",
    "end": "1233919"
  },
  {
    "text": "you actually have access to all those resources but the the defaults of the jvm have not been enhanced ever since",
    "start": "1233919",
    "end": "1240400"
  },
  {
    "text": "and there are lots of projects Happening Now Microsoft is involved in some of them uh Google is involved and orac is",
    "start": "1240400",
    "end": "1246200"
  },
  {
    "text": "involved in enhancing the ergonomics and defaults of the jvm for container",
    "start": "1246200",
    "end": "1251559"
  },
  {
    "text": "environments at the end of the story don't just minus jar your application otherwise you're going to be wasting",
    "start": "1251559",
    "end": "1257120"
  },
  {
    "text": "resources and that's money garbage collectors uh there are",
    "start": "1257120",
    "end": "1262880"
  },
  {
    "text": "lots of garbage collectors in the jvm you want to be aware of them uh there is actually one extra garbage collector did",
    "start": "1262880",
    "end": "1268840"
  },
  {
    "text": "not put in the list it's called The abson GC the abson GC is that a garbage collector does not collect anything it's",
    "start": "1268840",
    "end": "1276000"
  },
  {
    "text": "great for benchmarking applications where you want to eliminate the GC from the equation and you just want Benchmark",
    "start": "1276000",
    "end": "1283320"
  },
  {
    "text": "or application performance without the behavior of the GC does it help for production traditional business",
    "start": "1283320",
    "end": "1289640"
  },
  {
    "text": "applications not much but for compiler engineers and uh jvm Engineers it's really",
    "start": "1289640",
    "end": "1296039"
  },
  {
    "text": "helpful when you are running things in the cloud you got to keep in mind that no matter how much memory you give to an",
    "start": "1296039",
    "end": "1303360"
  },
  {
    "text": "application on a container there are certain areas of the memory that the jvm",
    "start": "1303360",
    "end": "1308480"
  },
  {
    "text": "or the workload will consume as the same amount it's called like the Met space or",
    "start": "1308480",
    "end": "1313919"
  },
  {
    "text": "code cache things like that the jvm will need regardless of how many how many",
    "start": "1313919",
    "end": "1319240"
  },
  {
    "text": "objects you have in the Heap and that's why when you have two containers that",
    "start": "1319240",
    "end": "1324440"
  },
  {
    "text": "are considered small they are using the same amount of non Heap memory no matter what pretty much and then the Heap is",
    "start": "1324440",
    "end": "1332159"
  },
  {
    "text": "different so you have to keep that in mind for a lot of things that we're going to talk",
    "start": "1332159",
    "end": "1337720"
  },
  {
    "text": "next um okay here's how you configure the jvm we do provide some recommendations set to 75% of memory",
    "start": "1338000",
    "end": "1344720"
  },
  {
    "text": "limit usually um if you want to make things a lot easier for you year you can use memory calculators if you have build",
    "start": "1344720",
    "end": "1351440"
  },
  {
    "text": "packs in the Peto project Peto has this memory calculator for building the conage of java workloads they have build",
    "start": "1351440",
    "end": "1358360"
  },
  {
    "text": "packs for other languages as well and those build packs usually tend to come with optimizations for containers that",
    "start": "1358360",
    "end": "1364840"
  },
  {
    "text": "most often the runtime doesn't have for example here we have how the Heap gets",
    "start": "1364840",
    "end": "1370520"
  },
  {
    "text": "calculated automatically for you so you don't have to set xmx in other",
    "start": "1370520",
    "end": "1375600"
  },
  {
    "text": "things um and and goes on and on with with what other areas that are uh",
    "start": "1375600",
    "end": "1380960"
  },
  {
    "text": "important to our application to tune eventually but check out the Peto build packs and here you have the job example",
    "start": "1380960",
    "end": "1388600"
  },
  {
    "text": "all right 22 minutes we have we have plenty of time to go into part two kubernetes or I like to call",
    "start": "1388600",
    "end": "1396960"
  },
  {
    "text": "yoland anybody here familiarized with vertical pod out scaler all right a few",
    "start": "1396960",
    "end": "1403240"
  },
  {
    "text": "hands who's familiarized with horizontal pod out scaler right most of you great",
    "start": "1403240",
    "end": "1410440"
  },
  {
    "text": "so horizontal P out scaler is great works for almost everything but it's",
    "start": "1410440",
    "end": "1415840"
  },
  {
    "text": "it's the the classic throw money at a problem and just put more computing",
    "start": "1415840",
    "end": "1420960"
  },
  {
    "text": "power um and scale out your application so when I when I see Keynotes people say",
    "start": "1420960",
    "end": "1427039"
  },
  {
    "text": "oh we have 200 billion transactions in our system okay tell me how many CPUs",
    "start": "1427039",
    "end": "1433039"
  },
  {
    "text": "you have nobody says that tell me tell me how many cores are running behind the",
    "start": "1433039",
    "end": "1438120"
  },
  {
    "text": "scenes how many course per transaction are you actually uh uh spending on that",
    "start": "1438120",
    "end": "1443679"
  },
  {
    "text": "is the true scaling of your system sure from a business perspective 200 billion",
    "start": "1443679",
    "end": "1448799"
  },
  {
    "text": "transactions are great you know I got a lot of Revenue but what's your margin and nobody will tell you the CPU per per",
    "start": "1448799",
    "end": "1456600"
  },
  {
    "text": "transaction because that will give people an idea of margin but for us for us Engineers",
    "start": "1456600",
    "end": "1463679"
  },
  {
    "text": "Engineers thinking about cost about scaling that is actually important",
    "start": "1463679",
    "end": "1469200"
  },
  {
    "text": "so horizontal PCT scaler is great you can you can scale out based on rules but",
    "start": "1469200",
    "end": "1476080"
  },
  {
    "text": "it's not a super bullet it is not and I'll give you an example there is a story of this company in Latin America",
    "start": "1476080",
    "end": "1483039"
  },
  {
    "text": "they um they were um complaining about Java workloads they were saying like you",
    "start": "1483039",
    "end": "1489360"
  },
  {
    "text": "know this is slow takes too much M too much CPU we have to have like 20 replicas of the microservice because it",
    "start": "1489360",
    "end": "1496600"
  },
  {
    "text": "doesn't scale well and I was like if I running 20 replicas of a jvm work load there's something",
    "start": "1496600",
    "end": "1502840"
  },
  {
    "text": "fundamentally wrong in your understanding of the jvm runtime and how",
    "start": "1502840",
    "end": "1508960"
  },
  {
    "text": "it behaves if you don't give enough resources to the jvm guess what happens",
    "start": "1508960",
    "end": "1514159"
  },
  {
    "text": "the jvm parts the parts of the jvm run time that the developers don't touch like garbage collectors J compilers will",
    "start": "1514159",
    "end": "1521720"
  },
  {
    "text": "suffer and if that is suffering yes scale scaling out is a great solution",
    "start": "1521720",
    "end": "1527520"
  },
  {
    "text": "but it's um not the most effective solution in many cases and then this company went ahead and migrated to",
    "start": "1527520",
    "end": "1534840"
  },
  {
    "text": "rust great great alternative to Java but it required six months of migration work",
    "start": "1534840",
    "end": "1541919"
  },
  {
    "text": "and the funny thing is the performance could have been solved in a day just by",
    "start": "1541919",
    "end": "1548520"
  },
  {
    "text": "properly understanding the jvm tuning the jvm and redistributing the resources",
    "start": "1548520",
    "end": "1553799"
  },
  {
    "text": "in their cluster but no they chose the hard route because they actually wanted to code in Ros because it's",
    "start": "1553799",
    "end": "1560600"
  },
  {
    "text": "fun and I respect that but vertical pod out scaler is an",
    "start": "1560600",
    "end": "1565840"
  },
  {
    "text": "interesting technology in kubernetes where now even now especially now with",
    "start": "1565840",
    "end": "1571640"
  },
  {
    "text": "version 1.7 plus you have something called in place pod vertical",
    "start": "1571640",
    "end": "1577399"
  },
  {
    "text": "scaling it allows the Pod to increase amount of resources of a container",
    "start": "1577399",
    "end": "1583600"
  },
  {
    "text": "without restoring the container I now it's important that the",
    "start": "1583600",
    "end": "1588799"
  },
  {
    "text": "runtime that is running inside understands that more resources were given and the runtime has to be able to",
    "start": "1588799",
    "end": "1595480"
  },
  {
    "text": "take advantage of that so the jvm still today doesn't have that great capability",
    "start": "1595480",
    "end": "1601960"
  },
  {
    "text": "but that's in the works the interesting thing about",
    "start": "1601960",
    "end": "1607120"
  },
  {
    "text": "vertical pod out scaler is something that Google offers in their GitHub and luckily I can use that on Azure as well",
    "start": "1607120",
    "end": "1614440"
  },
  {
    "text": "um called Cube startup CPU boost it allows a container to have access to",
    "start": "1614440",
    "end": "1621159"
  },
  {
    "text": "more resources up to a certain time up to a certain policy up to a certain rule",
    "start": "1621159",
    "end": "1627279"
  },
  {
    "text": "that you put down in your, 1500 lines of yo magic will work and uh you're going",
    "start": "1627279",
    "end": "1633360"
  },
  {
    "text": "to have a a jvm that for example has more access to CPU and memory to start",
    "start": "1633360",
    "end": "1639880"
  },
  {
    "text": "up but then you can actually reduce CPU and stabilize because the jvm yes it",
    "start": "1639880",
    "end": "1645720"
  },
  {
    "text": "will have significant work in the first few hours of the jvm when the system is being hit",
    "start": "1645720",
    "end": "1651679"
  },
  {
    "text": "and the jit compiler is working and optimizing the code uh uh in time but then after a while the CPU",
    "start": "1651679",
    "end": "1659080"
  },
  {
    "text": "usage doesn't change much it actually goes down that's when you figure out okay",
    "start": "1659080",
    "end": "1664760"
  },
  {
    "text": "this is how much time I can give to the that workload to have CPU",
    "start": "1664760",
    "end": "1670480"
  },
  {
    "text": "boost so search for cube startup CPU boost you're going to have um a nice uh",
    "start": "1670480",
    "end": "1677279"
  },
  {
    "text": "experience all right so what else what else we have here Javan",
    "start": "1677279",
    "end": "1683480"
  },
  {
    "text": "kubernetes what is the main issue that people here who are running or monitoring or deploying Java kubernetes",
    "start": "1683480",
    "end": "1689159"
  },
  {
    "text": "have what is your main issue raise your hand and speak up please anybody has like please I came to",
    "start": "1689159",
    "end": "1695799"
  },
  {
    "text": "this talk because I helped this crazy guy from Microsoft doing Java would help me",
    "start": "1695799",
    "end": "1701919"
  },
  {
    "text": "solve sorry what Li limited memory yes I think we covered that or for for the",
    "start": "1701919",
    "end": "1708399"
  },
  {
    "text": "past few slides any other issue that you have startup time we just go over that",
    "start": "1708399",
    "end": "1717240"
  },
  {
    "text": "thank you any other issue yes CPU CPU issue",
    "start": "1717240",
    "end": "1725600"
  },
  {
    "text": "strling yeah thank you finally I found somebody to who hooked me up for the",
    "start": "1725600",
    "end": "1730960"
  },
  {
    "text": "next slide thank you so CPU thring is a major problem you have an application",
    "start": "1730960",
    "end": "1737600"
  },
  {
    "text": "that is given not enough CPU but guess what there is a GC in there there's a g",
    "start": "1737600",
    "end": "1743279"
  },
  {
    "text": "compiler in there there are certain elements of your runtime stack that will require CPU time beyond what your",
    "start": "1743279",
    "end": "1751320"
  },
  {
    "text": "application your business application is doing so I'll give you an example let's walk through and I'm sure everybody",
    "start": "1751320",
    "end": "1758559"
  },
  {
    "text": "understands the the small bullets here um but I'll give you an example because I have this well produced PowerPoint",
    "start": "1758559",
    "end": "1765519"
  },
  {
    "text": "animation you're going to love it all right so if you don't understand CPU",
    "start": "1765519",
    "end": "1770720"
  },
  {
    "text": "throttling and how that impacts the jvm and even other run times with garbage collectors like net um no they G and go",
    "start": "1770720",
    "end": "1779480"
  },
  {
    "text": "they have garbage collectors um maybe not at the same scale perhaps as the jvm but it does",
    "start": "1779480",
    "end": "1785240"
  },
  {
    "text": "impact let's say you set the CPU limit to 1,000 M cor and that's in a system with a CPS period of 100 milliseconds",
    "start": "1785240",
    "end": "1793080"
  },
  {
    "text": "like by default so an application has access to 1,000 M core for every 100",
    "start": "1793080",
    "end": "1800399"
  },
  {
    "text": "milliseconds now there is like six HTTP requests in the load balancer Eng a or",
    "start": "1800399",
    "end": "1806640"
  },
  {
    "text": "whatever those requests are sent to the CPU to be processed by the jvm when they",
    "start": "1806640",
    "end": "1811760"
  },
  {
    "text": "come in and then they are processed across the four processors in the node why is that because the th000 M core is",
    "start": "1811760",
    "end": "1819080"
  },
  {
    "text": "about CPU timing not about not about how many processors I have access to but those threads when they performed each",
    "start": "1819080",
    "end": "1826600"
  },
  {
    "text": "request consume consed 200 M cores so in total they consumed 800 M",
    "start": "1826600",
    "end": "1834880"
  },
  {
    "text": "cores but those 800 M cores were consumed within 20",
    "start": "1834880",
    "end": "1840640"
  },
  {
    "text": "milliseconds now I only have 200 millor left for the rest of the 80 milliseconds",
    "start": "1840640",
    "end": "1848080"
  },
  {
    "text": "until the next period that I can use th micor again but guess what happens in",
    "start": "1848080",
    "end": "1854760"
  },
  {
    "text": "those 20 milliseconds the garbage collector has to work and remove objects from the Heap",
    "start": "1854760",
    "end": "1861399"
  },
  {
    "text": "clean up memory well the GC work total was 200 millor now I have to wait 600",
    "start": "1861399",
    "end": "1870240"
  },
  {
    "text": "millor 6 60 60 milliseconds until it can process",
    "start": "1870240",
    "end": "1876639"
  },
  {
    "text": "another request that is your CPU throttl when you understand that you",
    "start": "1876639",
    "end": "1882720"
  },
  {
    "text": "understand that you want the your application and your runtime stack to be",
    "start": "1882720",
    "end": "1888720"
  },
  {
    "text": "very clear on how many resources are needed to perform all the tasks on that",
    "start": "1888720",
    "end": "1895360"
  },
  {
    "text": "flow so now new requests come in and that's your latency going up by",
    "start": "1895360",
    "end": "1903080"
  },
  {
    "text": "at least 60 milliseconds in these two requests so we covered this thing you",
    "start": "1903080",
    "end": "1910440"
  },
  {
    "text": "know one M cor is One processor th1 to 200 2,000 M cor two",
    "start": "1910440",
    "end": "1915760"
  },
  {
    "text": "processor and so on there is this little flag in the jvm that you can actually use for whatever reason called active",
    "start": "1915760",
    "end": "1920880"
  },
  {
    "text": "processor count why why is this an interesting flag because you can say my application has 1500 micore limit but",
    "start": "1920880",
    "end": "1928760"
  },
  {
    "text": "I'm going to give I don't know three processor count that will tell the jvm",
    "start": "1928760",
    "end": "1934120"
  },
  {
    "text": "the jvm has access to three processors so it will size thread poles",
    "start": "1934120",
    "end": "1940480"
  },
  {
    "text": "internally according to this number so how many how many threads can I process",
    "start": "1940480",
    "end": "1946200"
  },
  {
    "text": "at the same time three sure I'll size my thread pool based on that and if you",
    "start": "1946200",
    "end": "1951799"
  },
  {
    "text": "have a very strong IO bound application this is where you may may want to use it",
    "start": "1951799",
    "end": "1957600"
  },
  {
    "text": "despite having CPU smaller CPU limit and guess what most microservices",
    "start": "1957600",
    "end": "1963399"
  },
  {
    "text": "on kuet is Rio bound because it's just Network just networ receiving request from from the load balancer sending",
    "start": "1963399",
    "end": "1969760"
  },
  {
    "text": "request to the database calling another rest API receiving a l of CPI is just IR Network",
    "start": "1969760",
    "end": "1975440"
  },
  {
    "text": "IR all right so so Microsoft it came up with this flow of recommendations or",
    "start": "1975440",
    "end": "1982200"
  },
  {
    "text": "better starting points for kubernetes depending on how how much you have in terms of CPU limits and I found",
    "start": "1982200",
    "end": "1988200"
  },
  {
    "text": "customers saying oh no our pods inates can only have up to 2,000 M core and I",
    "start": "1988200",
    "end": "1994080"
  },
  {
    "text": "find that crazy but there are cases like that um but yeah if that is the case",
    "start": "1994080",
    "end": "2000440"
  },
  {
    "text": "here's some guidance on where to get started start with this instead of the defaults in the jvm and then from this",
    "start": "2000440",
    "end": "2007120"
  },
  {
    "text": "point start observing your workload and fine-tune the jvm to your needs always",
    "start": "2007120",
    "end": "2015080"
  },
  {
    "text": "have a goal is your goal throughput is your goal latency is your goal cost",
    "start": "2015080",
    "end": "2020720"
  },
  {
    "text": "resource utilization I always have a going mind when jvm toning because you",
    "start": "2020720",
    "end": "2025840"
  },
  {
    "text": "have there are garbage collectors for latency there are garbage collectors for throughput there are garbage collectors for that are good in general for everything there are garbage collectors",
    "start": "2025840",
    "end": "2031519"
  },
  {
    "text": "that are good for memory you always have to keep that in mind that you have a goal to address",
    "start": "2031519",
    "end": "2038360"
  },
  {
    "text": "all right so last 10 minutes um resource distribution",
    "start": "2038360",
    "end": "2044200"
  },
  {
    "text": "remember when I S um the case of like 20 replicas they custom with 20 replicas 30",
    "start": "2044200",
    "end": "2051200"
  },
  {
    "text": "replicas like just growing and growing for the same workload well I did a benchmark years",
    "start": "2051200",
    "end": "2057760"
  },
  {
    "text": "ago when I started all this uh research and um I came up with this uh uh chart",
    "start": "2057760",
    "end": "2065118"
  },
  {
    "text": "where I put a Java work on kubernetes and I did four",
    "start": "2065119",
    "end": "2071480"
  },
  {
    "text": "scenarios the green line and the green bar represents six replicas of the",
    "start": "2071480",
    "end": "2080040"
  },
  {
    "text": "workload you can see that the through the latency my P99 is really bad like P",
    "start": "2080040",
    "end": "2087480"
  },
  {
    "text": "P it doesn't even it's not even good by P99 like and then it goes even worse on the uh",
    "start": "2087480",
    "end": "2094679"
  },
  {
    "text": "p999 the throughput is okay is 2.5 million requests but then I thought what if I",
    "start": "2094800",
    "end": "2102560"
  },
  {
    "text": "reduced the replicas and gave more CPU in memory technically I'm still using the",
    "start": "2102560",
    "end": "2108640"
  },
  {
    "text": "same amount of memory and CPU I'm scheduling the same amount but I'm reducing the number of replicas so that",
    "start": "2108640",
    "end": "2114960"
  },
  {
    "text": "my language run time has more opportunity to behave properly the throughput went up the",
    "start": "2114960",
    "end": "2122599"
  },
  {
    "text": "latency improved there is a correlation between uh um resource allocation I guess but",
    "start": "2122599",
    "end": "2130320"
  },
  {
    "text": "then I thought what if I could save money as well what if I could reduce",
    "start": "2130320",
    "end": "2135800"
  },
  {
    "text": "resources now that I have figured out re resource redistribution helps so I came",
    "start": "2135800",
    "end": "2141520"
  },
  {
    "text": "up with the two replicas uh the blue line two replicas with two CPUs so I went down from six",
    "start": "2141520",
    "end": "2149440"
  },
  {
    "text": "CPUs to four from 6 gig to 4 gig total I improved the performance my",
    "start": "2149440",
    "end": "2157280"
  },
  {
    "text": "through put is better than originally my latency is better than original it's not the",
    "start": "2157280",
    "end": "2162520"
  },
  {
    "text": "best but it's better and it cost less so that that goes to show that you have an",
    "start": "2162520",
    "end": "2169440"
  },
  {
    "text": "opportunity today if you have a case where you have systems with dozens of",
    "start": "2169440",
    "end": "2174760"
  },
  {
    "text": "replicas to do a resource redistribution on your kubernetes cluster and this is",
    "start": "2174760",
    "end": "2179880"
  },
  {
    "text": "applicable to any language I heard same story from net folks from go folks and so",
    "start": "2179880",
    "end": "2185240"
  },
  {
    "text": "on I'll give you some examples in and this is looking at Azure kubernetes cluster this is a cluster of 6 VM six",
    "start": "2185240",
    "end": "2191160"
  },
  {
    "text": "nodes I apply the same workload like 18 times and uh it costs me $840 a month to",
    "start": "2191160",
    "end": "2197800"
  },
  {
    "text": "run this scenario okay so what should I do first well I'm going to merge a few pods and",
    "start": "2197800",
    "end": "2205000"
  },
  {
    "text": "uh that should give me better uh uh performance on those uh on those pods on those nodes and then I'm going to",
    "start": "2205000",
    "end": "2211960"
  },
  {
    "text": "continue to apply this roll out to more and instead of having lots of replic is",
    "start": "2211960",
    "end": "2217760"
  },
  {
    "text": "on the same note I'm going to have just one replica per note and if you are into the idea of writing a kubernetes",
    "start": "2217760",
    "end": "2223800"
  },
  {
    "text": "operator that does this thing magically for you please be my guest I'm I I would love to have a talk with kubernetes",
    "start": "2223800",
    "end": "2229800"
  },
  {
    "text": "operator experts um and then finally well guess what this is performing better than",
    "start": "2229800",
    "end": "2238040"
  },
  {
    "text": "originally maybe I should go even further I'm going to increase my node",
    "start": "2238040",
    "end": "2243839"
  },
  {
    "text": "pool to taller VMS increase a little bit the resource",
    "start": "2243839",
    "end": "2250440"
  },
  {
    "text": "limits of those pods and have only three now I'm still interested in resiliency and all of that good stuff but now I",
    "start": "2250440",
    "end": "2257319"
  },
  {
    "text": "have standby standby CPU and memory the cost is still the same because I'm using",
    "start": "2257319",
    "end": "2262880"
  },
  {
    "text": "the same type of VM just with more CPU and memory on that type of VM so the cost is still the same but now I have",
    "start": "2262880",
    "end": "2268480"
  },
  {
    "text": "spare resources for more workloads so um from from from a cloud",
    "start": "2268480",
    "end": "2275280"
  },
  {
    "text": "vendor perspective it's great you know you're still the same but for your perspective you can do",
    "start": "2275280",
    "end": "2280640"
  },
  {
    "text": "more that is the beauty of this approach so to",
    "start": "2280640",
    "end": "2286200"
  },
  {
    "text": "finalize uh we're going to get into an a land of unproven uh practices and I'm",
    "start": "2286200",
    "end": "2292359"
  },
  {
    "text": "still I'm still hoping that somebody will will help me prove this thing but I have this concept called AB performance",
    "start": "2292359",
    "end": "2298280"
  },
  {
    "text": "testing we see AB per we we see AB testing all the time mostly for features in a in a system but what if we could do",
    "start": "2298280",
    "end": "2305400"
  },
  {
    "text": "AB testing for production performance as well what if we could go and say hey you",
    "start": "2305400",
    "end": "2310720"
  },
  {
    "text": "know what I'm going to have a load balancer and I'm going to Route the the",
    "start": "2310720",
    "end": "2315800"
  },
  {
    "text": "the loads to different instances of my application same application but configured differently this instance",
    "start": "2315800",
    "end": "2323040"
  },
  {
    "text": "here uses the garbage collector a this instance here runs the garbage collector B this instance here has more resource",
    "start": "2323040",
    "end": "2330319"
  },
  {
    "text": "limit this instance here has less uh uh memory limit and so on so forth so then",
    "start": "2330319",
    "end": "2335480"
  },
  {
    "text": "you start also considering okay I'm going to have smaller jvms with more replicas a horizontal uh scale or I'm",
    "start": "2335480",
    "end": "2342119"
  },
  {
    "text": "going to have taller jvms with lesser replicas a taller uh um",
    "start": "2342119",
    "end": "2348319"
  },
  {
    "text": "system and you can do that easily on on kubernetes you know here's an example of",
    "start": "2348319",
    "end": "2353920"
  },
  {
    "text": "how I can do the 2x two 2x3 3x2 6x1 I put that on from the NG X and I do round",
    "start": "2353920",
    "end": "2361319"
  },
  {
    "text": "robbing um I tried a least connection pattern for engine X It's Tricky it",
    "start": "2361319",
    "end": "2367839"
  },
  {
    "text": "really depends on your workload but for the Benchmark purposes I used Ro",
    "start": "2367839",
    "end": "2373800"
  },
  {
    "text": "robbing the the other scenario which is a lot easier actually is to use for",
    "start": "2373800",
    "end": "2379880"
  },
  {
    "text": "benchmarking garbage collector configuration and tuning so I have a deployment of the same application but",
    "start": "2379880",
    "end": "2385200"
  },
  {
    "text": "with ergonomics default jvm g1gc and parallel GC and that's how I configured",
    "start": "2385200",
    "end": "2391200"
  },
  {
    "text": "this one is actually uh interesting to use least connection because uh you want to see uh how the GCS work really fast",
    "start": "2391200",
    "end": "2397400"
  },
  {
    "text": "and doesn't pause too much the application so you can process more connections uh but for the my Benchmark",
    "start": "2397400",
    "end": "2402440"
  },
  {
    "text": "purposes I still use R robbing so when you when you combine all that you will have something like this",
    "start": "2402440",
    "end": "2409160"
  },
  {
    "text": "at least on Azure on Azure you're going to see something like um you have here",
    "start": "2409160",
    "end": "2415200"
  },
  {
    "text": "the here I have my sorry let me",
    "start": "2415200",
    "end": "2420440"
  },
  {
    "text": "um get out of presentation mode okay so here I have the Azure",
    "start": "2421040",
    "end": "2428200"
  },
  {
    "text": "dashboard you can see here the inspect which is a just a Jason path returns me",
    "start": "2428200",
    "end": "2434079"
  },
  {
    "text": "adjacent caliz Jason the prime factor which I used to do a CPU uh bound uh",
    "start": "2434079",
    "end": "2439920"
  },
  {
    "text": "emulation and then we can see the roles and then in the rows that's where I can",
    "start": "2439920",
    "end": "2445119"
  },
  {
    "text": "see okay 2 by two 2 by3 and then I can see which one is performing better and",
    "start": "2445119",
    "end": "2450760"
  },
  {
    "text": "um this is in the last 24 hours let me see if I can",
    "start": "2450760",
    "end": "2455880"
  },
  {
    "text": "uh yes I can make it a bit bigger for",
    "start": "2455880",
    "end": "2460920"
  },
  {
    "text": "sure yeah and here I have the other profiles um now I don't want to spend",
    "start": "2460920",
    "end": "2466800"
  },
  {
    "text": "too much time on in here because this was just to generate data to show you um",
    "start": "2466800",
    "end": "2472079"
  },
  {
    "text": "if we compare these cases here it won't show oh this is better than that it's clear no it's it won't be clear because",
    "start": "2472079",
    "end": "2477560"
  },
  {
    "text": "first of all my use case is definitely not like yours and you have to understand your scenario but I'm showing",
    "start": "2477560",
    "end": "2483079"
  },
  {
    "text": "you what you can put in practice so that you can observe in production how things",
    "start": "2483079",
    "end": "2488119"
  },
  {
    "text": "uh can behave differently um but I'll give you I'll give you the bread of the butter where I do a live thing at least",
    "start": "2488119",
    "end": "2496960"
  },
  {
    "text": "okay so here we have I have the 2x two 2x4 running and I'm going to trigger this Cube ISAC to get into the Pod I",
    "start": "2496960",
    "end": "2504800"
  },
  {
    "text": "have a container in a cluster and I want to I just access that container in this bottom right shell I apologize for the",
    "start": "2504800",
    "end": "2512240"
  },
  {
    "text": "size so let's make it bigger",
    "start": "2512240",
    "end": "2516960"
  },
  {
    "text": "hey this is for presentation mode like presentation mode I will make it bigger but that's my default font size sorry",
    "start": "2520440",
    "end": "2526880"
  },
  {
    "text": "hey that's why I use glasses all right so I'm inside a container uh in this cluster and now I'm",
    "start": "2526880",
    "end": "2533240"
  },
  {
    "text": "going to run uh the same test as I did before it's going to be prime factor all right",
    "start": "2533240",
    "end": "2540680"
  },
  {
    "text": "so I'm going to trigger this thing against ngx engx will route this thing to those uh different deployments",
    "start": "2540680",
    "end": "2546440"
  },
  {
    "text": "different topology okay boom I have 20 threads and 40 connections let's go to the dashboard",
    "start": "2546440",
    "end": "2553240"
  },
  {
    "text": "and let's actually use the live metrics which is a nice fancy thing for doing",
    "start": "2553240",
    "end": "2559280"
  },
  {
    "text": "live demos so here I have the the requests coming on the right side uh the",
    "start": "2559280",
    "end": "2566160"
  },
  {
    "text": "aggregated uh uh request rate and and everything from uh this",
    "start": "2566160",
    "end": "2572240"
  },
  {
    "text": "application now this application is deployed with the same instrumentation key right different containers but it's",
    "start": "2572240",
    "end": "2578319"
  },
  {
    "text": "the same it's the same sorry it's different deployments but it's the same container image but I'm given of course",
    "start": "2578319",
    "end": "2584240"
  },
  {
    "text": "different environment variable names so when I go to row I can see the roles of",
    "start": "2584240",
    "end": "2590000"
  },
  {
    "text": "the uh uh deployments and uh I can show you later how how I Define that in the",
    "start": "2590000",
    "end": "2595480"
  },
  {
    "text": "code but it's just a parameter for Azure monitor all right so how who's",
    "start": "2595480",
    "end": "2600599"
  },
  {
    "text": "performing better again hypothetical right here I have the pods all the pods",
    "start": "2600599",
    "end": "2605680"
  },
  {
    "text": "2 by two 2 by two 6x1 6x1 6x1 so for this case here it doesn't really matter",
    "start": "2605680",
    "end": "2611640"
  },
  {
    "text": "who's performing better because I haven't hit the Peak Performance need for this worklow you can see the CPU",
    "start": "2611640",
    "end": "2616760"
  },
  {
    "text": "usage is not above 50% so it's pretty good um but it goes to show you how you",
    "start": "2616760",
    "end": "2623319"
  },
  {
    "text": "can compare in production different topologies and different gc's and different jvm tuning flags different",
    "start": "2623319",
    "end": "2629800"
  },
  {
    "text": "parameters and that will give you a much better um opportunity to evaluate",
    "start": "2629800",
    "end": "2635119"
  },
  {
    "text": "production performance load uh still with you know with your application still working just fine um",
    "start": "2635119",
    "end": "2643000"
  },
  {
    "text": "sometimes I have issues with doing performance test in the lab just because it doesn't mimic exactly production",
    "start": "2643000",
    "end": "2648599"
  },
  {
    "text": "customer overload and this is an opportunity for the customer themselves to do that",
    "start": "2648599",
    "end": "2654000"
  },
  {
    "text": "house all right so with that let me uh let me kill this process because uh",
    "start": "2654000",
    "end": "2661440"
  },
  {
    "text": "it costs money to run this demo so you know all right so let's go back to the slides",
    "start": "2661440",
    "end": "2668240"
  },
  {
    "text": "so with that come on come on PO Point don't don't",
    "start": "2668240",
    "end": "2674839"
  },
  {
    "text": "no oh my",
    "start": "2674839",
    "end": "2678720"
  },
  {
    "text": "God yeah it happens it's co-pilot thinking how to finish this",
    "start": "2681599",
    "end": "2690000"
  },
  {
    "text": "representation wow",
    "start": "2690000",
    "end": "2695559"
  },
  {
    "text": "wow we just went just",
    "start": "2695559",
    "end": "2700960"
  },
  {
    "text": "just okay sorry we're going to do it oh I love doing this force quit",
    "start": "2700960",
    "end": "2707839"
  },
  {
    "text": "PowerPoint force quit oh still there okay all right",
    "start": "2707839",
    "end": "2715440"
  },
  {
    "text": "good let's go back let's go back let's go back yeah yeah I don't want to send the report you know I don't I don't I",
    "start": "2715440",
    "end": "2721640"
  },
  {
    "text": "don't care not now we have 30 seconds to finish we have 30 seconds to finish look at where's this light okay here's light",
    "start": "2721640",
    "end": "2728000"
  },
  {
    "text": "all right cool just work oh okay cool we're back all right funny when",
    "start": "2728000",
    "end": "2735200"
  },
  {
    "text": "life demos work with PowerPoint crashes okay so so the main",
    "start": "2735200",
    "end": "2740319"
  },
  {
    "text": "takeaways size reduce the size of container images but think primarily in security not in uh uh size itself unless",
    "start": "2740319",
    "end": "2748119"
  },
  {
    "text": "size is the problem track down is there loading the image into the node a",
    "start": "2748119",
    "end": "2753200"
  },
  {
    "text": "problem you know we have 1 gabit speed in your container registry is the same is in the same data center as your",
    "start": "2753200",
    "end": "2759599"
  },
  {
    "text": "kubernetes cluster does it really matter does it if it does yes but security",
    "start": "2759599",
    "end": "2765960"
  },
  {
    "text": "should be the primary focus in my opinion startup time optimize jvm for startup time there's lots of",
    "start": "2765960",
    "end": "2771160"
  },
  {
    "text": "Technologies and features in the jvm this these days that can make your application fly in terms of startup",
    "start": "2771160",
    "end": "2778520"
  },
  {
    "text": "time um CDs class data sharing is a main thing for most versions if you're on Java 11 Java 17 Java 21 class data",
    "start": "2778520",
    "end": "2786119"
  },
  {
    "text": "sharing is a available in those versions take advantage of that and evaluate",
    "start": "2786119",
    "end": "2791240"
  },
  {
    "text": "Project Crack and project Laden as you uh think about modernization in the near",
    "start": "2791240",
    "end": "2796400"
  },
  {
    "text": "future jvm tuni understand your runtime for any language understand your runtime",
    "start": "2796400",
    "end": "2802240"
  },
  {
    "text": "defaults understand your runtime capabilities and take advantage of them",
    "start": "2802240",
    "end": "2807319"
  },
  {
    "text": "and observe as much as possible observe memory CPU garbage collection J",
    "start": "2807319",
    "end": "2812400"
  },
  {
    "text": "compilation all of those things can be measured in production",
    "start": "2812400",
    "end": "2817520"
  },
  {
    "text": "it's fairly easy understand the impact of resource constraints in your runtime stack and",
    "start": "2817520",
    "end": "2823319"
  },
  {
    "text": "make sure that you're not giving uh uh make sure that you are giv enough for",
    "start": "2823319",
    "end": "2828480"
  },
  {
    "text": "the runtime to behave properly and horizontal scaling is not a super bullet",
    "start": "2828480",
    "end": "2834040"
  },
  {
    "text": "it's just throwing money at the problem take advantage of that vertical scaling as well and finally performance 20 in",
    "start": "2834040",
    "end": "2842119"
  },
  {
    "text": "production a performance 20 in production I think it's it's going to be the next big thing after AI",
    "start": "2842119",
    "end": "2847920"
  },
  {
    "text": "so uh consider that as well especially especially in your staging if you have a nice staging pre-production environment",
    "start": "2847920",
    "end": "2854680"
  },
  {
    "text": "that's a great opportunity and uh if you're interested in what other stuff that Microsoft is doing for Java uh go visit develop",
    "start": "2854680",
    "end": "2862000"
  },
  {
    "text": "microsoft.com Jaa my name is Brun bores thank you so [Applause]",
    "start": "2862000",
    "end": "2872160"
  },
  {
    "text": "much we have time for two questions",
    "start": "2872160",
    "end": "2877119"
  },
  {
    "text": "thank you very much uh I'm curious if Microsoft is looking to add CRA support in open GDK distribution of",
    "start": "2880920",
    "end": "2888000"
  },
  {
    "text": "Microsoft we are we are researching that we are working with internal teams um I",
    "start": "2888000",
    "end": "2893119"
  },
  {
    "text": "actually just emailed last night a followup on my conversation with the teams to um see the status on their",
    "start": "2893119",
    "end": "2899280"
  },
  {
    "text": "research of which projects they want to test crack um crack is a u is a nice is",
    "start": "2899280",
    "end": "2906280"
  },
  {
    "text": "a nice feature that is is working on there is one little thing that can complicate things especially if you're",
    "start": "2906280",
    "end": "2911720"
  },
  {
    "text": "not using a standard framework like spring which is it does require code uh",
    "start": "2911720",
    "end": "2917319"
  },
  {
    "text": "to be aware of the checkpoint restore flow you know I'm going to I'm going to checkpoint I'm going to restore so you",
    "start": "2917319",
    "end": "2922760"
  },
  {
    "text": "have to shut down a lot of things you have to shut down thread pools database connections and inflow transactions and",
    "start": "2922760",
    "end": "2928880"
  },
  {
    "text": "all of that before you can do a checkpoint snapshot and then when you restore you have to store those objects",
    "start": "2928880",
    "end": "2934359"
  },
  {
    "text": "again right spring has that uh implemented for you so if you are using spring or I think quarkus is working on",
    "start": "2934359",
    "end": "2941359"
  },
  {
    "text": "that uh in in the meantime if the framework has a capability great but we",
    "start": "2941359",
    "end": "2946799"
  },
  {
    "text": "know how Enterprise customers are creative and coming up with their own Frameworks in house so uh crack will",
    "start": "2946799",
    "end": "2952640"
  },
  {
    "text": "require at least that the framework team builds that capability into the into the application framework but yeah we are we",
    "start": "2952640",
    "end": "2958839"
  },
  {
    "text": "are looking into it yeah and so about the qu jsrs that",
    "start": "2958839",
    "end": "2965960"
  },
  {
    "text": "are in progress which one do you think will affect more most the Java performance production not jsr in",
    "start": "2965960",
    "end": "2971799"
  },
  {
    "text": "specifically so jsr stands for Java specification request we don't there are no jsor specifically for enhancing J the",
    "start": "2971799",
    "end": "2978720"
  },
  {
    "text": "jvm for these problems but there are projects in conversations in place by",
    "start": "2978720",
    "end": "2983920"
  },
  {
    "text": "Google Microsoft and Oracle to uh make the Heap the Heap of the jvm be dynamic",
    "start": "2983920",
    "end": "2991920"
  },
  {
    "text": "grow and Shrink as needed and that capability will allow especially the in",
    "start": "2991920",
    "end": "2997359"
  },
  {
    "text": "in in in in place scale in place vertical P scaling capability to be taken advantage of by the jvm so uh",
    "start": "2997359",
    "end": "3005240"
  },
  {
    "text": "that's work done by or Oracle is working on the zgc that's the other problem like because the jvm has lots of garbage",
    "start": "3005240",
    "end": "3010400"
  },
  {
    "text": "collectors it's up to the garbage collector not the jvm to Define memory areas and how to manage the object Etc",
    "start": "3010400",
    "end": "3017760"
  },
  {
    "text": "so Oracle is working on adaptable hip sizing on zgc Google has done some work",
    "start": "3017760",
    "end": "3024480"
  },
  {
    "text": "on the G1 GC and we Microsoft are looking into serial GC for uh that",
    "start": "3024480",
    "end": "3030720"
  },
  {
    "text": "idea y thank you yeah thank you very much",
    "start": "3030720",
    "end": "3036359"
  },
  {
    "text": "[Music]",
    "start": "3037900",
    "end": "3048619"
  }
]