[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "[Music]",
    "start": "1790",
    "end": "11120"
  },
  {
    "text": "thank you everybody for showing up the session right after really good heavy lunch is always the hardest so I",
    "start": "11120",
    "end": "18400"
  },
  {
    "text": "appreciate you guys making up all the way up here i see as well some familiar faces from the other u from the earlier",
    "start": "18400",
    "end": "25600"
  },
  {
    "text": "talk I gave the meta programming one thank you for coming back um makes me happy again um this is um um the rise of",
    "start": "25600",
    "end": "34960"
  },
  {
    "text": "NoSQL and polyglot persistence this is a little bit about me i work for just me",
    "start": "34960",
    "end": "42239"
  },
  {
    "text": "um I'm a frequent speaker at all in a lot of conferences and I started a bunch",
    "start": "42239",
    "end": "47920"
  },
  {
    "text": "of users groups and organizations over the years and that's my Twitter account at polyathic",
    "start": "47920",
    "end": "54680"
  },
  {
    "text": "cod um again the same thing this uh presentation is licensed under the creative common license so feel free to",
    "start": "54680",
    "end": "62160"
  },
  {
    "text": "um use it and don't make any money out of it and just say that it was uh my",
    "start": "62160",
    "end": "67799"
  },
  {
    "text": "work um so the way I would like to I don't like usually I don't like to have an agenda because when you have an",
    "start": "67799",
    "end": "74320"
  },
  {
    "start": "68000",
    "end": "102000"
  },
  {
    "text": "agenda in a talk and you kind of give people the idea of um it's more of a distraction because they're always",
    "start": "74320",
    "end": "80240"
  },
  {
    "text": "waiting for like the next thing so I would like to pretty much just let the the the the the talk kind of flow in a",
    "start": "80240",
    "end": "86479"
  },
  {
    "text": "in an I mean call it organic manner whatever you would you would like to call it but the first thing that I was I",
    "start": "86479",
    "end": "92000"
  },
  {
    "text": "want I wanted to talk about is pretty much relational databases to make sure that everybody's on the same page and",
    "start": "92000",
    "end": "97600"
  },
  {
    "text": "the first section is pretty much the golden age of relational databases as you see in the title so what a",
    "start": "97600",
    "end": "103360"
  },
  {
    "start": "102000",
    "end": "150000"
  },
  {
    "text": "relational data store is um it's been pretty much the technology that has been u dominant or like just",
    "start": "103360",
    "end": "110960"
  },
  {
    "text": "the obvious choice of storing data over the years um because of many reasons uh we have a lot of um existing material",
    "start": "110960",
    "end": "117759"
  },
  {
    "text": "solutions Oracle MySQL to name a few and there was just pretty much a wide adoption of the technology and a lot of",
    "start": "117759",
    "end": "124759"
  },
  {
    "text": "familiarity even by b developers or advanced business users themselves um",
    "start": "124759",
    "end": "130319"
  },
  {
    "text": "and there was an abundance u abundance of tooling out there so pretty much almost became the de facto uh standard",
    "start": "130319",
    "end": "137599"
  },
  {
    "text": "for storing data uh over the years um to the point that we just pretty much assume that we're going to have a",
    "start": "137599",
    "end": "143520"
  },
  {
    "text": "relational database we assume that we're either going to run on my SQL and on Oracle if we can afford it uh and what a",
    "start": "143520",
    "end": "150400"
  },
  {
    "start": "150000",
    "end": "237000"
  },
  {
    "text": "relational model is uh is pretty much this data and I'm sure a lot of you are",
    "start": "150400",
    "end": "155760"
  },
  {
    "text": "familiar with this that is stored in these two dimensional tables or relations in the form of pretty much",
    "start": "155760",
    "end": "161680"
  },
  {
    "text": "rows and and the column attributes has a well-defined enforced schema that means",
    "start": "161680",
    "end": "167840"
  },
  {
    "text": "that the relationship between the data itself in those tables is well defined",
    "start": "167840",
    "end": "173280"
  },
  {
    "text": "um and enforced and there was a lot of integrity constraints that are enforced integrity constraints",
    "start": "173280",
    "end": "179680"
  },
  {
    "text": "like the type of the data or referential integrity like the relationship between the data itself um and anybody that did",
    "start": "179680",
    "end": "187760"
  },
  {
    "text": "any work with the relational model knows that normalization is pretty much a a um",
    "start": "187760",
    "end": "193920"
  },
  {
    "text": "um good practice and what normalization is is pretty much these small tables well definfined relationship between",
    "start": "193920",
    "end": "199680"
  },
  {
    "text": "them to minimize redundancy and to pretty much avoid modification anomalies",
    "start": "199680",
    "end": "205200"
  },
  {
    "text": "so no redundant data whatsoever just was considered to be a bad thing and if you have a table a table depart a table of",
    "start": "205200",
    "end": "212239"
  },
  {
    "text": "departments and employees when you delete the department you would um",
    "start": "212239",
    "end": "217280"
  },
  {
    "text": "assume or you would would you would like that all the uh employees that are linked to that particular um department",
    "start": "217280",
    "end": "224799"
  },
  {
    "text": "of deleted as well because there is that refer that referential integrity or that propagation that is um supposed to that",
    "start": "224799",
    "end": "233040"
  },
  {
    "text": "that that that we would expect or would like to happen so this relational model",
    "start": "233040",
    "end": "239040"
  },
  {
    "start": "237000",
    "end": "266000"
  },
  {
    "text": "is also supported by SQL which is a somewhat standardized query language",
    "start": "239040",
    "end": "244799"
  },
  {
    "text": "that we're familiar with it's very flexible and it supports a lot of operations that uh that are across",
    "start": "244799",
    "end": "250959"
  },
  {
    "text": "multiple relations or across multiple tables such as joints and it allows us to go very nice aggregations with",
    "start": "250959",
    "end": "258239"
  },
  {
    "text": "statements like group by etc so it's a very nice um um language that we we",
    "start": "258239",
    "end": "264080"
  },
  {
    "text": "enjoyed using over the years um one important feature that the",
    "start": "264080",
    "end": "270320"
  },
  {
    "start": "266000",
    "end": "335000"
  },
  {
    "text": "relational model has is pretty much to be able to uh is transactions to be",
    "start": "270320",
    "end": "275440"
  },
  {
    "text": "transactional and what we call these acid transactions and acid stands for",
    "start": "275440",
    "end": "280720"
  },
  {
    "text": "automicity that means it's all or nothing i do um um a lot of I change a",
    "start": "280720",
    "end": "286880"
  },
  {
    "text": "bunch of data and it's treated as one uh one uh one unit either happens or",
    "start": "286880",
    "end": "293759"
  },
  {
    "text": "everything pretty much gets rolled back to uh uh to before uh which ties into",
    "start": "293759",
    "end": "299440"
  },
  {
    "text": "the second one is consistency that means that every time we do a transaction on this database it takes it from one valid",
    "start": "299440",
    "end": "305199"
  },
  {
    "text": "state to the next one to another valid one and the isolation which is pretty much concurrency is taken care of for us",
    "start": "305199",
    "end": "311440"
  },
  {
    "text": "by the system we never worry when we use an RDBMS of a lot of client querying the",
    "start": "311440",
    "end": "316639"
  },
  {
    "text": "database or changing it or whatever it is we expect that to just pretty much be taken care of by the LDBMS system and",
    "start": "316639",
    "end": "323280"
  },
  {
    "text": "durability uh once committed it's forever i mean this is not an in-memory database when the machine crashes",
    "start": "323280",
    "end": "329280"
  },
  {
    "text": "everything just goes away this is something the changes are persisted on",
    "start": "329280",
    "end": "334560"
  },
  {
    "text": "disk so it's really important to kind of",
    "start": "334560",
    "end": "340360"
  },
  {
    "text": "understand the um um the reasons or the design tradeoffs uh that the people who",
    "start": "340360",
    "end": "347919"
  },
  {
    "text": "first created these RDBMS systems pretty much took and this this this model was",
    "start": "347919",
    "end": "354080"
  },
  {
    "text": "pretty much brought forth uh because of many assumptions that they made the first one is that the end user would",
    "start": "354080",
    "end": "359680"
  },
  {
    "text": "directly interact with the database so um so meaning that there is this guy",
    "start": "359680",
    "end": "366080"
  },
  {
    "text": "there is this data right there and there's this guy sitting in front of a terminal writing SQL statements that's",
    "start": "366080",
    "end": "371919"
  },
  {
    "text": "pretty much how it it all started and he can enter data in he can query it back",
    "start": "371919",
    "end": "377360"
  },
  {
    "text": "and so forth and it makes sense that the avms should manage concurrency and integrity of that data right if we're",
    "start": "377360",
    "end": "384080"
  },
  {
    "text": "designing a system like that and um this means also that the access patterns are",
    "start": "384080",
    "end": "389199"
  },
  {
    "text": "unknown um SQL is very flexible i mean we're talking about an infinite",
    "start": "389199",
    "end": "394639"
  },
  {
    "text": "combination of queries of data and everything you're just giving it to a user and giving him this language to",
    "start": "394639",
    "end": "400080"
  },
  {
    "text": "pretty much use um and so SQL became that way a flexible query language close",
    "start": "400080",
    "end": "406400"
  },
  {
    "text": "to English and what we ended up doing is we store data in these data structures",
    "start": "406400",
    "end": "411919"
  },
  {
    "text": "that have no bias towards any particular pattern of querying we want this model that would support any pattern of",
    "start": "411919",
    "end": "418479"
  },
  {
    "text": "querying because we just don't know about it it's up to the user to um uh do",
    "start": "418479",
    "end": "423680"
  },
  {
    "text": "that so the data and the the other assumption is that the database runs on a single machine uh the distribution was not",
    "start": "423680",
    "end": "431919"
  },
  {
    "text": "something that we considered to begin with i mean uh we just didn't have enough data then so the only way to",
    "start": "431919",
    "end": "437680"
  },
  {
    "text": "promise um um the the database that runs on a on a single machine was anyways the",
    "start": "437680",
    "end": "443840"
  },
  {
    "text": "only way to promise acid only way to promise pretty much that your data that your that your data is that your",
    "start": "443840",
    "end": "450479"
  },
  {
    "text": "operations are going to be transactional so we had some road bumps",
    "start": "450479",
    "end": "455680"
  },
  {
    "start": "453000",
    "end": "554000"
  },
  {
    "text": "throughout the year this has been working very well for us it has been working great uh no complaints but we",
    "start": "455680",
    "end": "462639"
  },
  {
    "text": "what happened is that we started building more complex applications on top of these relational databases um a",
    "start": "462639",
    "end": "468000"
  },
  {
    "text": "lot of the business logic moved out of the business databases to the application layout itself we started",
    "start": "468000",
    "end": "473599"
  },
  {
    "text": "writing uh um started hating triggers uh we started not writing a lot of sort",
    "start": "473599",
    "end": "479919"
  },
  {
    "text": "procedures anymore uh we all that code kind of moved to the application layer",
    "start": "479919",
    "end": "484960"
  },
  {
    "text": "as these uh uh new frameworks and new languages and platforms evolved out of",
    "start": "484960",
    "end": "490479"
  },
  {
    "text": "the database the second thing is that these applications themselves that we",
    "start": "490479",
    "end": "495520"
  },
  {
    "text": "built outside of the database itself evolved beyond the procedural paradigm and became more OOP so all of a sudden",
    "start": "495520",
    "end": "503520"
  },
  {
    "text": "we have this object relational model um um that is that kind of looks at data",
    "start": "503520",
    "end": "510879"
  },
  {
    "text": "and structures it in a way that is completely different than the database itself and we have what is called the",
    "start": "510879",
    "end": "516000"
  },
  {
    "text": "object relational impedance mismatch it sucked but a lot of people put a lot of work into these um OM",
    "start": "516000",
    "end": "523880"
  },
  {
    "text": "frameworks we have hibernate we have all of these things everything was pretty much uh made our life a lot easier you",
    "start": "523880",
    "end": "530880"
  },
  {
    "text": "have um inheritance something that does not or like a hierarchy something that does not um um translate to the",
    "start": "530880",
    "end": "538480"
  },
  {
    "text": "relational model and you just annotate it uh using JPA to kind of figure out",
    "start": "538480",
    "end": "544080"
  },
  {
    "text": "like an inheritance strategy of how that data is supposed to be persisted and queried back from the database and it",
    "start": "544080",
    "end": "550800"
  },
  {
    "text": "was great I mean it's not really that big of a deal next",
    "start": "550800",
    "end": "556680"
  },
  {
    "start": "554000",
    "end": "560000"
  },
  {
    "text": "so next section is about scalability you can just to the next thing so uh we",
    "start": "556680",
    "end": "562560"
  },
  {
    "start": "560000",
    "end": "597000"
  },
  {
    "text": "start we became data hoarders as the database grow out you know grow out of pretty much control more data started",
    "start": "562560",
    "end": "569200"
  },
  {
    "text": "putting a lot of more data into them we started quering a lot more data and the performance pretty much just decreased",
    "start": "569200",
    "end": "574720"
  },
  {
    "text": "exponentially so started spending a lot of money buying the next big machine with multicores buying Oracle rack and",
    "start": "574720",
    "end": "583040"
  },
  {
    "text": "making this guy even richer like he needs more money and it kind of put the",
    "start": "583040",
    "end": "588480"
  },
  {
    "text": "problem off for a while we just buy this new Oracle rack and everything is good",
    "start": "588480",
    "end": "593680"
  },
  {
    "text": "now performance is uh back to an acceptable level so we got to the point that we",
    "start": "593680",
    "end": "601040"
  },
  {
    "start": "597000",
    "end": "711000"
  },
  {
    "text": "have the most expensive machine out there we spend millions of on dollars of this one but we're still not getting",
    "start": "601040",
    "end": "608480"
  },
  {
    "text": "really good performance so we hired this guy that walks in to optimize our database he walks in there and then he",
    "start": "608480",
    "end": "615120"
  },
  {
    "text": "creates secondary indexes all over the place certainly made a lot of queries a",
    "start": "615120",
    "end": "620160"
  },
  {
    "text": "lot of joins a lot faster uh he said \"You know what uh we're gonna actually go and create some materialized views.\"",
    "start": "620160",
    "end": "627360"
  },
  {
    "text": "And for those of you for complex joints for those of you who are not familiar with familiarized views which is pretty",
    "start": "627360",
    "end": "632880"
  },
  {
    "text": "much just the result um um the result of a query the data set of a query um that",
    "start": "632880",
    "end": "640959"
  },
  {
    "text": "is pretty much pre prefetched for you by the database um that is stored cached",
    "start": "640959",
    "end": "647120"
  },
  {
    "text": "for you by the database there are different um different uh different types of views some of them happen",
    "start": "647120",
    "end": "652959"
  },
  {
    "text": "during runtime and some of them pretty much would happen periodically so anyways I went off on a tangent on that",
    "start": "652959",
    "end": "659200"
  },
  {
    "text": "for a little bit but they were like a nightmare to maintain and they got stale and the ones that are not um the ones",
    "start": "659200",
    "end": "667680"
  },
  {
    "text": "the ones that are not real real time pretty much became useless the ones that are uh real time didn't really mean",
    "start": "667680",
    "end": "674720"
  },
  {
    "text": "anything uh because performance still sucks so he said we need to",
    "start": "674720",
    "end": "680600"
  },
  {
    "text": "denormalize we just couldn't join four tables with all this data and get good",
    "start": "680600",
    "end": "686440"
  },
  {
    "text": "performance so we did it was horrible you know we ended up with this redundancy that we did not want to begin",
    "start": "686440",
    "end": "692959"
  },
  {
    "text": "with and we have to pretty much manage it um so the guy said you know what um",
    "start": "692959",
    "end": "698000"
  },
  {
    "text": "we're going to introduce caching we introduced caching the data is too stale we have even more redundancy on top of",
    "start": "698000",
    "end": "704800"
  },
  {
    "text": "that we need to worry about when do we evict the cache and when it was just a mess anyways next one so we hired",
    "start": "704800",
    "end": "712480"
  },
  {
    "text": "another guy right was supposed to be smarter and this guy is pretty much tells us that we hit the limit of the",
    "start": "712480",
    "end": "718480"
  },
  {
    "text": "one machine that uh we should pretty much",
    "start": "718480",
    "end": "723920"
  },
  {
    "text": "scale out of scale horizontally that means we should have a cluster of machines instead of the one machine big",
    "start": "723920",
    "end": "730720"
  },
  {
    "text": "problem um remember that RDBMS was not designed that way but we're going to sit down and",
    "start": "730720",
    "end": "737360"
  },
  {
    "text": "then try to think of other creative solutions it tells us that we have two options the first one is a master slave",
    "start": "737360",
    "end": "743279"
  },
  {
    "text": "kind of architecture that assumes that you're actually um reading a lot more than writing which is the case in a lot",
    "start": "743279",
    "end": "749760"
  },
  {
    "text": "of systems and um uh but the problem with that is",
    "start": "749760",
    "end": "755040"
  },
  {
    "text": "you're right to the master and there is this time uh that you would have to wait",
    "start": "755040",
    "end": "760399"
  },
  {
    "text": "for your data to pretty much be replicated uh for the rest of the the the slaves that pretty much provide the",
    "start": "760399",
    "end": "766079"
  },
  {
    "text": "reading which means that you're risking that you're reading a you're risking that you're going to get get data that",
    "start": "766079",
    "end": "771760"
  },
  {
    "text": "is not consistent another one down no consistency um so it that was kind of a",
    "start": "771760",
    "end": "778880"
  },
  {
    "text": "problem and then he said all right if you don't want to do that you know for one of these reads for because you read",
    "start": "778880",
    "end": "785760"
  },
  {
    "text": "and write the ratio of the read the read and rights is pretty much um does not",
    "start": "785760",
    "end": "791279"
  },
  {
    "text": "work for you you're writing as much as you're reading this shard all this data and what sharding is that's pretty much",
    "start": "791279",
    "end": "797839"
  },
  {
    "text": "you take your data set and you pretty much um divide it across the cluster",
    "start": "797839",
    "end": "803600"
  },
  {
    "text": "based on some kind of strategy you could say that everybody's last names from A",
    "start": "803600",
    "end": "808720"
  },
  {
    "text": "to C are going in machine one from C to Z are going in machine two and such",
    "start": "808720",
    "end": "814560"
  },
  {
    "text": "right and you try to kind of keep an equal load and um if one of the machines",
    "start": "814560",
    "end": "820720"
  },
  {
    "text": "pretty much u grows out of control you kind of reshard it again try to keep",
    "start": "820720",
    "end": "826079"
  },
  {
    "text": "that data distribution even uh to an extent it was big problem because all of",
    "start": "826079",
    "end": "832959"
  },
  {
    "text": "a sudden we couldn't join across partitions you just couldn't do those joins anymore you just uh because the",
    "start": "832959",
    "end": "839519"
  },
  {
    "text": "data is literally in different databases but it it was a significant improvements of reads of reads and rights at the same",
    "start": "839519",
    "end": "846720"
  },
  {
    "text": "time no referential integrity no across tables uh we kind of required the",
    "start": "846720",
    "end": "852560"
  },
  {
    "text": "modification of our client applications so all of a sudden the client applications needs to be aware of where",
    "start": "852560",
    "end": "858160"
  },
  {
    "text": "the data exactly is in the shard and it was a problem uh so uh we kind of",
    "start": "858160",
    "end": "863360"
  },
  {
    "text": "introduced again a single point of failure one of the machines dies one one machine dies and pretty much you lose",
    "start": "863360",
    "end": "869519"
  },
  {
    "text": "like a big sub subset of your data right there how's that consistent next one so",
    "start": "869519",
    "end": "875600"
  },
  {
    "start": "874000",
    "end": "893000"
  },
  {
    "text": "what's the point we vertically scale our relational database we're no longer consistent no longer no acidity anymore",
    "start": "875600",
    "end": "882399"
  },
  {
    "text": "we no longer ask it and we lose the query flexibility so are we doing something",
    "start": "882399",
    "end": "890600"
  },
  {
    "text": "wrong maybe so the next thing I want to introduce is the cap theorem and what",
    "start": "890600",
    "end": "897199"
  },
  {
    "start": "893000",
    "end": "998000"
  },
  {
    "text": "cap theorem is is um this is something that was um introduced by Eric Brewer on",
    "start": "897199",
    "end": "904800"
  },
  {
    "text": "distributed systems pretty much for any distributed system has nothing to do with databases so it says that pick out",
    "start": "904800",
    "end": "910720"
  },
  {
    "text": "pick two out of consistency availability and partition tolerance pretty much if",
    "start": "910720",
    "end": "916560"
  },
  {
    "text": "you are consistent and available no partition tolerance if you are available",
    "start": "916560",
    "end": "922160"
  },
  {
    "text": "and and you have partition tolerance tolerance you're not consistent and I missed one and so forth this is kind of",
    "start": "922160",
    "end": "928240"
  },
  {
    "text": "similar to fast cheap good service there's no fast cheap good service hey",
    "start": "928240",
    "end": "933600"
  },
  {
    "text": "cheap good service won't be fast and fast good service won't be cheap and fast cheap service won't be good so you",
    "start": "933600",
    "end": "939839"
  },
  {
    "text": "can only have two of them next one so the relational model and cab the",
    "start": "939839",
    "end": "945600"
  },
  {
    "text": "relational model data store happens to actually favor consistency and availability what we mean by that and",
    "start": "945600",
    "end": "951680"
  },
  {
    "text": "every time you query the database this video for you and gives you some pretty much answer back and it's 100%",
    "start": "951680",
    "end": "957959"
  },
  {
    "text": "consistent so this is for historical historical reasons uh we have certain type of applications that require that",
    "start": "957959",
    "end": "965240"
  },
  {
    "text": "banks everybody knows the example I deposit $100 in my friend's bank account and all that kind of stuff and you you",
    "start": "965240",
    "end": "972959"
  },
  {
    "text": "know I'm not even going to go in that example but according to CAP partition tolerance is",
    "start": "972959",
    "end": "978839"
  },
  {
    "text": "impossible which means that uh it's impossible for you to horiz horizontally pretty much scale because partition",
    "start": "978839",
    "end": "985120"
  },
  {
    "text": "tolerance means you have a distributed system right um so by cap app the",
    "start": "985120",
    "end": "991680"
  },
  {
    "text": "relational model is impossible to be distributed right",
    "start": "991680",
    "end": "999240"
  },
  {
    "start": "998000",
    "end": "1031000"
  },
  {
    "text": "so yeah um we are in a pickle we have too much",
    "start": "999240",
    "end": "1004720"
  },
  {
    "text": "data in a CA model uh vertical scaling is too expensive and it's pretty much",
    "start": "1004720",
    "end": "1010079"
  },
  {
    "text": "not sustainable i mean doesn't really matter depend it doesn't really matter how how much money you have you're going",
    "start": "1010079",
    "end": "1016720"
  },
  {
    "text": "to buy the most expensive machine and you're going to have pretty much like more data you're going to have um um",
    "start": "1016720",
    "end": "1022399"
  },
  {
    "text": "more data sooner or later so that pretty much forced us to kind of explore other um alternatives in light of cap itself",
    "start": "1022399",
    "end": "1032079"
  },
  {
    "start": "1031000",
    "end": "1092000"
  },
  {
    "text": "so we say all right partition tolerance since we reach the limit of the one machine we want to be pretty much like",
    "start": "1032079",
    "end": "1038000"
  },
  {
    "text": "we have no other scale that no other choice that's scaling out right which means to be partition tolerant have like",
    "start": "1038000",
    "end": "1044319"
  },
  {
    "text": "some kind of store that has all this um instance this cluster of machines and",
    "start": "1044319",
    "end": "1050160"
  },
  {
    "text": "kind of manages them in a way and we want to be available we always want to be available so nobody's g is is pretty",
    "start": "1050160",
    "end": "1057440"
  },
  {
    "text": "much willing to give this up to give availability up because the but um and",
    "start": "1057440",
    "end": "1063280"
  },
  {
    "text": "the good news is like it becomes even better with distribution if you have one machine it's hard for you to keep the",
    "start": "1063280",
    "end": "1068640"
  },
  {
    "text": "machine always available we usually would have always like a stand um a standby machine and all that kind of",
    "start": "1068640",
    "end": "1074640"
  },
  {
    "text": "stuff with distribution um it's even cheaper and and and better because the cluster as a whole um is inherent",
    "start": "1074640",
    "end": "1082240"
  },
  {
    "text": "inherently more reliable and more available than the pretty much one machine as a whole uh you can have one",
    "start": "1082240",
    "end": "1088640"
  },
  {
    "text": "die but your whole system is still there it's still standing serving customers so anyways according to cap we simply",
    "start": "1088640",
    "end": "1095360"
  },
  {
    "start": "1092000",
    "end": "1186000"
  },
  {
    "text": "cannot have consistency you know um that means that I make an update also and what",
    "start": "1095360",
    "end": "1101120"
  },
  {
    "text": "consistency is this should be clear maybe I should have um discussed this before is what what it means to be",
    "start": "1101120",
    "end": "1108000"
  },
  {
    "text": "consistent is that you make one right and you update a record everybody who",
    "start": "1108000",
    "end": "1113120"
  },
  {
    "text": "reads the data right after that right gets the post the same most recent value",
    "start": "1113120",
    "end": "1119200"
  },
  {
    "text": "I wrote to the database right there's no in between there and this is impossible",
    "start": "1119200",
    "end": "1125440"
  },
  {
    "text": "so they're not going to work out work out for us so we said all right uh let's look up um like an AP system something",
    "start": "1125440",
    "end": "1133280"
  },
  {
    "text": "that is partition tolerance and um partition tolerant and available all the",
    "start": "1133280",
    "end": "1138640"
  },
  {
    "text": "time and the first thing that comes to mind is a DNS server right um you go and",
    "start": "1138640",
    "end": "1145200"
  },
  {
    "text": "you register nosql.com right and we have let's say",
    "start": "1145200",
    "end": "1151120"
  },
  {
    "text": "100 DNS servers servers right owned by two companies the first company update",
    "start": "1151120",
    "end": "1156240"
  },
  {
    "text": "their record the second one doesn't mean it takes two days or three days for all the data to pretty much propagate so you",
    "start": "1156240",
    "end": "1163520"
  },
  {
    "text": "go in them you try nosql.com you don't really get an IP back but the next day",
    "start": "1163520",
    "end": "1170240"
  },
  {
    "text": "eventually you're going to get I mean it would be in every server in every DNS server out there so it's just like a",
    "start": "1170240",
    "end": "1175679"
  },
  {
    "text": "matter of time because they kind of need to communicate that change um to all the nodes that are there to serve you um",
    "start": "1175679",
    "end": "1183919"
  },
  {
    "text": "that IP address that record next so what we're talking about is um what is called",
    "start": "1183919",
    "end": "1191120"
  },
  {
    "start": "1186000",
    "end": "1284000"
  },
  {
    "text": "eventual consistency which is not so bad it just means that we're just gonna not",
    "start": "1191120",
    "end": "1196559"
  },
  {
    "text": "give up consistency all the all together but what we're going to do is like just",
    "start": "1196559",
    "end": "1201600"
  },
  {
    "text": "settle for like a lesser degree of consistency data is going to be avail",
    "start": "1201600",
    "end": "1207200"
  },
  {
    "text": "eventually available um this is kind of scary in a way it could work for you and",
    "start": "1207200",
    "end": "1213600"
  },
  {
    "text": "cannot depending of what kind of system you're doing right some people even argue that this could work for banks as",
    "start": "1213600",
    "end": "1219600"
  },
  {
    "text": "well and we can discuss that later but anyways this guy goes and update his relationship status uh to single he's",
    "start": "1219600",
    "end": "1227440"
  },
  {
    "text": "got somebody else in Spain that goes to Facebook and refreshes that page and it says that he became single and available",
    "start": "1227440",
    "end": "1234480"
  },
  {
    "text": "but over somewhere else in the United States Sarah does not um see that change",
    "start": "1234480",
    "end": "1241440"
  },
  {
    "text": "yet it just says that he's in a relationship still because she's she",
    "start": "1241440",
    "end": "1247360"
  },
  {
    "text": "does not have access she's on a different edge node she does where the data is not is still stale it's not",
    "start": "1247360",
    "end": "1253039"
  },
  {
    "text": "updated but his brother in um where his brother in Japan gets it like three days",
    "start": "1253039",
    "end": "1258880"
  },
  {
    "text": "later who cares they're all gonna get that information one day i mean over",
    "start": "1258880",
    "end": "1264559"
  },
  {
    "text": "like a day or like over an hour or like two hours but it's not really critical for them to get it immediately it's not",
    "start": "1264559",
    "end": "1270880"
  },
  {
    "text": "like a the $100 example so it's cool that we can that eventual consistency is",
    "start": "1270880",
    "end": "1277520"
  },
  {
    "text": "totally cool within this application so this is as opposed to immediate",
    "start": "1277520",
    "end": "1282679"
  },
  {
    "text": "consistency next so the compromise pretty much is we would settle for a weaker consistency model this weaker",
    "start": "1282679",
    "end": "1289760"
  },
  {
    "start": "1284000",
    "end": "1316000"
  },
  {
    "text": "consistency model we call base as opposed to acid uh which is basically available soft state you are in this",
    "start": "1289760",
    "end": "1297120"
  },
  {
    "text": "soft state where some of the data is updated some of it is still stale and eventual consistency and that all the",
    "start": "1297120",
    "end": "1304240"
  },
  {
    "text": "soft state is pretty much going to be translated to the most current one um correctly so we're talking acid on the",
    "start": "1304240",
    "end": "1311360"
  },
  {
    "text": "individual node based on the cluster right",
    "start": "1311360",
    "end": "1316919"
  },
  {
    "start": "1316000",
    "end": "1322000"
  },
  {
    "text": "next slippery slope of the faithless i don't know why I picked that but hang on",
    "start": "1316919",
    "end": "1322799"
  },
  {
    "start": "1322000",
    "end": "1406000"
  },
  {
    "text": "so you might ask um we might as well ask questions yeah we doubted this uh",
    "start": "1322799",
    "end": "1328320"
  },
  {
    "text": "consistency thing and this asset that the RDBMS you know preaches and says that",
    "start": "1328320",
    "end": "1335600"
  },
  {
    "text": "it's a mustave we might as well start doubting everything else that this model brings in right so we're right there so",
    "start": "1335600",
    "end": "1343120"
  },
  {
    "text": "a schema what are we talking about a logical schema that we have is well defined and rigid in relational",
    "start": "1343120",
    "end": "1349120"
  },
  {
    "text": "databases you can't change the schema so why not even have a flexible schema or not even no schema at all let's just",
    "start": "1349120",
    "end": "1356000"
  },
  {
    "text": "throw all this schema away actually would be good for certain applications because uh you never know how your data",
    "start": "1356000",
    "end": "1362559"
  },
  {
    "text": "is going to be evol is going to to evolve 10 years from now you start collecting the name first name and last",
    "start": "1362559",
    "end": "1369840"
  },
  {
    "text": "name and phone number of certain users all of the sudden it's a requirement that you should keep keep track of their",
    "start": "1369840",
    "end": "1375360"
  },
  {
    "text": "emails as well or try to do that in a relational database it would be a nightmare right youtube it's not it's",
    "start": "1375360",
    "end": "1381360"
  },
  {
    "text": "not it's not easy or like physical schema itself most of these databases rely on B3 structures right so why not",
    "start": "1381360",
    "end": "1390159"
  },
  {
    "text": "use some other underlying data structure that would um be be more consistent with",
    "start": "1390159",
    "end": "1397039"
  },
  {
    "text": "the natural um um data structure of the n natural way our data that we're trying",
    "start": "1397039",
    "end": "1403039"
  },
  {
    "text": "to model organizes itself um as or like clusters as would be a better one",
    "start": "1403039",
    "end": "1410159"
  },
  {
    "text": "and the integrity constraints who cares you know we have all these databases",
    "start": "1410159",
    "end": "1415200"
  },
  {
    "text": "that you have this one needs to be a test text this one needs to be a number you know this relationship um foreign",
    "start": "1415200",
    "end": "1421919"
  },
  {
    "text": "key primary key relationship all that kind of stuff we can even like throw that away i mean if if if you want if",
    "start": "1421919",
    "end": "1427520"
  },
  {
    "text": "it's not as important for you um because you can never achieve 100% consistency",
    "start": "1427520",
    "end": "1433440"
  },
  {
    "text": "you can choose to manage that on the application layer and a query language",
    "start": "1433440",
    "end": "1439280"
  },
  {
    "text": "is SQL really that you know do we really care about SQL that much i mean it's",
    "start": "1439280",
    "end": "1445039"
  },
  {
    "text": "nice to have but what if we don't even care for it it's like something that comes pretty much secondary why because",
    "start": "1445039",
    "end": "1450799"
  },
  {
    "text": "there's always the application that goes and gets the data for us we interact with the application we don't interact",
    "start": "1450799",
    "end": "1456000"
  },
  {
    "text": "with the black screen and sit there and then write pretty much SQL statements for reporting all day as we used to do",
    "start": "1456000",
    "end": "1461360"
  },
  {
    "text": "ages ago not anymore these nice web interfaces that do a lot of stuff for us",
    "start": "1461360",
    "end": "1466880"
  },
  {
    "text": "so SQL who cares we hate it anyways i mean anybody who uses hibernate never goes back and writes",
    "start": "1466880",
    "end": "1472440"
  },
  {
    "text": "JDBC code security uh otherms comes with security a lot of security um do we",
    "start": "1472440",
    "end": "1480559"
  },
  {
    "text": "really have I I bet you 70% this is just a random number of",
    "start": "1480559",
    "end": "1486000"
  },
  {
    "text": "us um create the JDBC connections on like root as root wherever it is or my",
    "start": "1486000",
    "end": "1491360"
  },
  {
    "text": "SQL or doesn't really matter much uh or like as like a different as the one user",
    "start": "1491360",
    "end": "1496480"
  },
  {
    "text": "the entire cluster just hits the database with the same credentials root password whatever it is so name it",
    "start": "1496480",
    "end": "1502960"
  },
  {
    "text": "anything that this relational model model brings we're willing to question because we lost the most important thing",
    "start": "1502960",
    "end": "1509679"
  },
  {
    "text": "is the ability to pretty much scale we hit a wall the wall of the one machine um next one so no",
    "start": "1509679",
    "end": "1518679"
  },
  {
    "start": "1515000",
    "end": "1703000"
  },
  {
    "text": "SQL right um so what this NoSQL is that",
    "start": "1518679",
    "end": "1524279"
  },
  {
    "text": "you keep hearing about um it is not really something in particular it is",
    "start": "1524279",
    "end": "1530720"
  },
  {
    "text": "pretty much a wide range of specialized data stores with the goal of addressing the challenges of the relational model",
    "start": "1530720",
    "end": "1537679"
  },
  {
    "text": "one of these challenges happened to be uh the inability for it to be",
    "start": "1537679",
    "end": "1543120"
  },
  {
    "text": "distributed or the inability for it to be scale to scale out or scale horizontally as Eric Evans the guy who",
    "start": "1543120",
    "end": "1551919"
  },
  {
    "text": "coined the terms put it the whole point of seeking alternative is that you need to solve a problem that relational",
    "start": "1551919",
    "end": "1558240"
  },
  {
    "text": "databases are bad are a bad fit for as simple as that um instead of the",
    "start": "1558240",
    "end": "1563760"
  },
  {
    "text": "assumption that oh we have to use a relational database and we have to solve it this way and make your life harder so",
    "start": "1563760",
    "end": "1569760"
  },
  {
    "text": "let me make it easier it does not mean anti-SQL or anti- relational um any data",
    "start": "1569760",
    "end": "1575520"
  },
  {
    "text": "store that is non- relational that's pretty much what it means anything non-reational is no SQL and somebody",
    "start": "1575520",
    "end": "1581840"
  },
  {
    "text": "came up with not only SQL instead of NoSQL thing but that came like later so",
    "start": "1581840",
    "end": "1587760"
  },
  {
    "text": "I don't know if any uh but anyways no SQL is non relational next one just to",
    "start": "1587760",
    "end": "1594880"
  },
  {
    "text": "compare and contrast these things like in a little bit uh be mindful that there are some outliers no we're we're talking",
    "start": "1594880",
    "end": "1601679"
  },
  {
    "text": "about the relational model versus like 10 different models or you know tens of",
    "start": "1601679",
    "end": "1607039"
  },
  {
    "text": "open source projects out there that makes different design decisions and make diff choose different trade-offs so",
    "start": "1607039",
    "end": "1613120"
  },
  {
    "text": "no SQL usually runs designed to run on a single single machine most of NoSQL technologies would be designed to run on",
    "start": "1613120",
    "end": "1619520"
  },
  {
    "text": "a cluster of mach machines nosql is a CA SQL CA i don't know SQL technologies",
    "start": "1619520",
    "end": "1627360"
  },
  {
    "text": "would have AP CA CP sometimes um the",
    "start": "1627360",
    "end": "1632720"
  },
  {
    "text": "sometimes like even different degrees of consistencies and different degrees of C's out there uh as long as you're",
    "start": "1632720",
    "end": "1638880"
  },
  {
    "text": "willing to pretty much pay for it and um Dynamo DB is an example of that and MongoDB is an example of that as well uh",
    "start": "1638880",
    "end": "1646159"
  },
  {
    "text": "SQL scales vertically you know and then no SQL usually scales horizontally uh if you given NoSQL a bigger machine you",
    "start": "1646159",
    "end": "1653520"
  },
  {
    "text": "take take I mean it take advantage of the processing power but it's designed to scale horizontally unlike even",
    "start": "1653520",
    "end": "1659760"
  },
  {
    "text": "commodity commodity machines um um SQL relies on SQL or relational",
    "start": "1659760",
    "end": "1665600"
  },
  {
    "text": "databases rely on SQL uh no SQL usually have these custom APIs pretty much they're not there is no DSL on top of",
    "start": "1665600",
    "end": "1672960"
  },
  {
    "text": "these things I mean usually you're just going to have to make a series of uh method calls sql is acid we talked about",
    "start": "1672960",
    "end": "1680000"
  },
  {
    "text": "acid as well nosql is base uh SQL supports full indexing of the database i",
    "start": "1680000",
    "end": "1686480"
  },
  {
    "text": "mean usually the primary keys are indexed but anything that you will query by or put like on a web statement right",
    "start": "1686480",
    "end": "1692480"
  },
  {
    "text": "you can create a second uh index for and get pretty much better performance um no SQL most mostly on keys only mostly some",
    "start": "1692480",
    "end": "1700880"
  },
  {
    "text": "databases um uh vary uh another thing SQL has a rigid schema that you cannot",
    "start": "1700880",
    "end": "1707840"
  },
  {
    "start": "1703000",
    "end": "1783000"
  },
  {
    "text": "change or it's hard to change and a lot of no SQL is pretty much does not have any schema at all does not enforce it uh",
    "start": "1707840",
    "end": "1715360"
  },
  {
    "text": "SQL would allow you to have flexible flexible queries in no SQL you actually",
    "start": "1715360",
    "end": "1720640"
  },
  {
    "text": "have to have predefined queries and kind of design your data database is on more",
    "start": "1720640",
    "end": "1727840"
  },
  {
    "text": "than the way you would query data versus um",
    "start": "1727840",
    "end": "1733480"
  },
  {
    "text": "versus modeling your data to support any any any type any any combination of queries or like any query out there well",
    "start": "1733480",
    "end": "1740320"
  },
  {
    "text": "actually I have that over there so SQL as in relational is concerned about what what the data consists of so no",
    "start": "1740320",
    "end": "1746559"
  },
  {
    "text": "redundancy and the tables and the relationship between each other and all that kind of stuff is well defined in the schema but in non- relational",
    "start": "1746559",
    "end": "1753120"
  },
  {
    "text": "they're concerned of how the data is pretty much queried right um so if",
    "start": "1753120",
    "end": "1758720"
  },
  {
    "text": "you're um if you have if you're querying for example an employee first name last",
    "start": "1758720",
    "end": "1765520"
  },
  {
    "text": "name and his department wherever it is it's very common for a NoSQL database to",
    "start": "1765520",
    "end": "1770559"
  },
  {
    "text": "have that pretty much on one table you create like a one index table that has all that information so you have like pretty much easy access to",
    "start": "1770559",
    "end": "1776600"
  },
  {
    "text": "it right of course there are outliers of course yeah this thing I found online but you know the guy hates relationships",
    "start": "1776600",
    "end": "1784399"
  },
  {
    "start": "1783000",
    "end": "1787000"
  },
  {
    "text": "anyways the zoo all right so what the zoo is I'm pretty much",
    "start": "1784399",
    "end": "1790159"
  },
  {
    "start": "1787000",
    "end": "1901000"
  },
  {
    "text": "going to go over um like a taxonomy or like different kinds of relational databases and kind of talk feature some",
    "start": "1790159",
    "end": "1795919"
  },
  {
    "text": "of them and talk about them a little bit here in just a little bit so and give you kind of an idea when to use them",
    "start": "1795919",
    "end": "1802720"
  },
  {
    "text": "versus when um u not to and the challenges that are associated with them and the first one is pretty much the key",
    "start": "1802720",
    "end": "1808559"
  },
  {
    "text": "value data key value data source this is very simple probably like it's just a big hashmap or a big um associative",
    "start": "1808559",
    "end": "1816640"
  },
  {
    "text": "array that's it right there distributed across this you large large cluster",
    "start": "1816640",
    "end": "1821919"
  },
  {
    "text": "extreme very simple very fast reads and writes you know you just go give me this record this record and no unfortunately",
    "start": "1821919",
    "end": "1830159"
  },
  {
    "text": "no secondary indexes your only index is pretty much the key so you can only query data by that particular key that's",
    "start": "1830159",
    "end": "1836480"
  },
  {
    "text": "it if you decide to kind of filter by one of the values the different values in your table you're talking about full",
    "start": "1836480",
    "end": "1842640"
  },
  {
    "text": "table scans um I don't think that's a good idea at all even if you use map",
    "start": "1842640",
    "end": "1847919"
  },
  {
    "text": "reduce or anything like that because as your data grows uh the performance of your queries is going to decrease um",
    "start": "1847919",
    "end": "1856080"
  },
  {
    "text": "when to use this guy use it when your data is not highly related there's not a lot of relationship between your data uh",
    "start": "1856080",
    "end": "1862480"
  },
  {
    "text": "and pretty much use it when all you need is just basic CRUD basic pretty much read and and and and write uh there are",
    "start": "1862480",
    "end": "1869520"
  },
  {
    "text": "certainly challenges with complex queries if you have a complex query uh you're going to have to literally go and",
    "start": "1869520",
    "end": "1875279"
  },
  {
    "text": "duplicate data into index tables and um um query those tables instead of the",
    "start": "1875279",
    "end": "1880559"
  },
  {
    "text": "original instead of the original data set um check out the Amazon Dynamic paper it's a very good read um um you",
    "start": "1880559",
    "end": "1888640"
  },
  {
    "text": "know was uh that's the link for it is up there but if you Google for it you're not going to have a problem uh finding",
    "start": "1888640",
    "end": "1893760"
  },
  {
    "text": "it featured project projects of course Dynamob um from Amazon uh React and",
    "start": "1893760",
    "end": "1902039"
  },
  {
    "start": "1901000",
    "end": "2088000"
  },
  {
    "text": "Ris next thing I want to talk about is um column based or column family data",
    "start": "1902039",
    "end": "1907919"
  },
  {
    "text": "stores what these things are they're pretty much just a table you know when",
    "start": "1907919",
    "end": "1912960"
  },
  {
    "text": "data in the same column is stored together so this is a data structure that is completely different from the",
    "start": "1912960",
    "end": "1918880"
  },
  {
    "text": "way tables are uh structured in a relational database in a relational database you have the concept of a row",
    "start": "1918880",
    "end": "1924799"
  },
  {
    "text": "data is in rows right but right here is like you have um instead of an actual",
    "start": "1924799",
    "end": "1930640"
  },
  {
    "text": "row that is monolithic you have like a linked list of columns or linked list of",
    "start": "1930640",
    "end": "1936240"
  },
  {
    "text": "column families this makes it pretty much like easier to uh just go and fit",
    "start": "1936240",
    "end": "1941679"
  },
  {
    "text": "like an entire column of like the database or entire pretty much like column family it's a great for sparse",
    "start": "1941679",
    "end": "1948039"
  },
  {
    "text": "tables in a relational database if you remember your Oracle wherever it is you have to do ver and ver care 24 that",
    "start": "1948039",
    "end": "1957120"
  },
  {
    "text": "reserves 24 whatever that thing is bytes wherever or 24 characters for your queries so every one of those tables has",
    "start": "1957120",
    "end": "1965120"
  },
  {
    "text": "like pre-reserved space that you pretty much end up wasting per row even if half",
    "start": "1965120",
    "end": "1970480"
  },
  {
    "text": "of your values are pretty much null it doesn't matter whether they're null or not the space is reserved this is great",
    "start": "1970480",
    "end": "1976320"
  },
  {
    "text": "because if you have a null it doesn't get stored in disk so you save a lot of space um in these guys um but so storage",
    "start": "1976320",
    "end": "1985440"
  },
  {
    "text": "is not wasted they're very they have very fast column operations including a aggregations use it when you have big",
    "start": "1985440",
    "end": "1992159"
  },
  {
    "text": "data they have excellent leverage of um map reduce um and technologies like",
    "start": "1992159",
    "end": "1998480"
  },
  {
    "text": "pretty much Hadoop hh base runs on Hadoop as well and they they've performed really well on large large",
    "start": "1998480",
    "end": "2004960"
  },
  {
    "text": "clusters the challenge is is that you better know your access patterns really well beforehand and key design is not trivial",
    "start": "2004960",
    "end": "2012880"
  },
  {
    "text": "to give you an example with that uh don't expect serial for example keys for",
    "start": "2012880",
    "end": "2018640"
  },
  {
    "text": "u uh some a table because what that means is all your data is going to end",
    "start": "2018640",
    "end": "2024159"
  },
  {
    "text": "up in node one and node one is going to have to handle all the load of the queries so you want to be mindful that",
    "start": "2024159",
    "end": "2031200"
  },
  {
    "text": "your data is distributed across the entire cluster if you want to take full advantage of the map reduce technologies",
    "start": "2031200",
    "end": "2037600"
  },
  {
    "text": "if you happen to query by um zip code for example employee and zip code make",
    "start": "2037600",
    "end": "2044240"
  },
  {
    "text": "sure that you start all your queries would start or like would have um you know and after the sec the bite number",
    "start": "2044240",
    "end": "2051200"
  },
  {
    "text": "13 the zip code right there so you can just go scan those uh um scan the keys",
    "start": "2051200",
    "end": "2057599"
  },
  {
    "text": "and look for like a particular pattern within the key itself so the way relationships are established is by",
    "start": "2057599",
    "end": "2063440"
  },
  {
    "text": "actually creating a composite key itself in the in in in the database uh there",
    "start": "2063440",
    "end": "2069679"
  },
  {
    "text": "are a lot of best practices out there and the HB documentation is great for that check out the Google's Google's big",
    "start": "2069679",
    "end": "2075599"
  },
  {
    "text": "table paper as well it's a it's a good one it's available online uh featured projects HBase and",
    "start": "2075599",
    "end": "2084440"
  },
  {
    "text": "Cassandra how am I doing timewise okay thanks so the last one I want to talk",
    "start": "2084440",
    "end": "2090320"
  },
  {
    "start": "2088000",
    "end": "2273000"
  },
  {
    "text": "about not the last one actually I lied third one I want to talk about is document based stores uh what is",
    "start": "2090320",
    "end": "2096720"
  },
  {
    "text": "document based stores are pretty much just nested structures of hashes and their values that means just they're",
    "start": "2096720",
    "end": "2102079"
  },
  {
    "text": "just like document well structures the way XML is so you have or like let's use JSON as an example because um a lot of",
    "start": "2102079",
    "end": "2109359"
  },
  {
    "text": "these guys would actually store the actual JSON json would have like an object and it would have values but it",
    "start": "2109359",
    "end": "2115040"
  },
  {
    "text": "would it can have nested structures as well so if you have data looks like that um a lot of our data looks like that you",
    "start": "2115040",
    "end": "2121839"
  },
  {
    "text": "have like a user and the user have this and that have um you know a profile and such um use it they're um they're very",
    "start": "2121839",
    "end": "2130480"
  },
  {
    "text": "flexible they have a very flexible schema doesn't really matter i mean you can have a user with name and first name",
    "start": "2130480",
    "end": "2136640"
  },
  {
    "text": "you can have another user with like a whole different you know with his profile information in there it doesn't really care what schema is right there",
    "start": "2136640",
    "end": "2143520"
  },
  {
    "text": "and it has no limit in depth you can have a nested nested nested nested nested structure you know forever they",
    "start": "2143520",
    "end": "2148960"
  },
  {
    "text": "don't really care it's a very it's very flexible will index data this is something that a lot of NoSQL databases",
    "start": "2148960",
    "end": "2155839"
  },
  {
    "text": "actually um um miss is the ability to do queries this one where this one equals",
    "start": "2155839",
    "end": "2162160"
  },
  {
    "text": "that and get like acceptable have that pretty much that capability to begin with get acceptable performance and um",
    "start": "2162160",
    "end": "2169680"
  },
  {
    "text": "um yeah and it relies on these um big data technologies to uh perform that",
    "start": "2169680",
    "end": "2175680"
  },
  {
    "text": "well uh it works very well for OOP no impedance",
    "start": "2175680",
    "end": "2181079"
  },
  {
    "text": "mismatch that's kind of obvious in a way uh but um deformalized should be",
    "start": "2181079",
    "end": "2187680"
  },
  {
    "text": "denormalized the denormalizing is pretty much the best practice so u you want to",
    "start": "2187680",
    "end": "2193280"
  },
  {
    "text": "be as flat as possible in Dynamo the same way that you would take your data and serialize it into XML or like",
    "start": "2193280",
    "end": "2199119"
  },
  {
    "text": "serialize it into JSON use it when you don't have much when you don't know much about the schema you expect your data to",
    "start": "2199119",
    "end": "2204960"
  },
  {
    "text": "pretty much change over the you know over the years over the wherever it is you know your requirements is not really",
    "start": "2204960",
    "end": "2210240"
  },
  {
    "text": "well defined yet and use it when the schema is very likely to change if you're logging the IP address today and",
    "start": "2210240",
    "end": "2217760"
  },
  {
    "text": "you log in the actual um operation of the service that was accessed and your",
    "start": "2217760",
    "end": "2223440"
  },
  {
    "text": "boss comes in the next day and he tells you that you want to log in the credentials that were used or he wants",
    "start": "2223440",
    "end": "2229760"
  },
  {
    "text": "to log in the time or something else you should be no problem in Dynamo and actually this is true for a lot of NoSQL",
    "start": "2229760",
    "end": "2236320"
  },
  {
    "text": "technologies the challenge is complex join queries are very hard when you have",
    "start": "2236320",
    "end": "2242320"
  },
  {
    "text": "two documents you try to join both of them it's very hard and set referencing documents in circular dependencies are",
    "start": "2242320",
    "end": "2248960"
  },
  {
    "text": "almost an impossibility I mean you couldn't have a document that kind of references to itself a user references to itself would",
    "start": "2248960",
    "end": "2256480"
  },
  {
    "text": "be very hard to pretty much like model in Dynamob uh projects features featured",
    "start": "2256480",
    "end": "2262000"
  },
  {
    "text": "MongoDB couch DB um they also ref some I think couch DB has like this vest very",
    "start": "2262000",
    "end": "2268640"
  },
  {
    "text": "nice vest interface uh that you could pretty much leverage as well for",
    "start": "2268640",
    "end": "2274119"
  },
  {
    "start": "2273000",
    "end": "2365000"
  },
  {
    "text": "uh a lot of people so last thing I want to talk about is the graph data stores",
    "start": "2274119",
    "end": "2279440"
  },
  {
    "text": "graph is a graph um it's perfect for highly interconnected data allows for",
    "start": "2279440",
    "end": "2284880"
  },
  {
    "text": "explicit relationship fine grade relationship traversals very flexible works very well with OOP no impedance",
    "start": "2284880",
    "end": "2291720"
  },
  {
    "text": "mismatch if you remember your graphs from your data structures it's the exact exact same thing you could literally ask",
    "start": "2291720",
    "end": "2298720"
  },
  {
    "text": "the question who's the f um if you have this social graph for example you want",
    "start": "2298720",
    "end": "2304160"
  },
  {
    "text": "to know the friend of a friend you could totally totally pretty much just get your answer like that because it's a",
    "start": "2304160",
    "end": "2310800"
  },
  {
    "text": "graph um it comes with with ch I mean use it when your data looks like a graph and requires it requires like graph",
    "start": "2310800",
    "end": "2316800"
  },
  {
    "text": "questions like graph traversals the salesman problems is an example and use",
    "start": "2316800",
    "end": "2322079"
  },
  {
    "text": "it when you are smart enough not to try to do this on another data store you want to be able to answer those questions in relational in a relational",
    "start": "2322079",
    "end": "2329119"
  },
  {
    "text": "database good luck if you model it you get good performance good luck uh the challenge is it does not scale",
    "start": "2329119",
    "end": "2335960"
  },
  {
    "text": "horizontally just like a relational database you could take a graph and distribute it over a lot of machines um",
    "start": "2335960",
    "end": "2343599"
  },
  {
    "text": "it it has it's actually acid this is one of the NoSQL databases that is pretty much acid it's easy to do because it's",
    "start": "2343599",
    "end": "2350640"
  },
  {
    "text": "on the on on the one machine um and the featured project for this one is Neo4j",
    "start": "2350640",
    "end": "2356960"
  },
  {
    "text": "uh since you can only scale on one machine you want to be mindful um I'll delay this this this thing until later",
    "start": "2356960",
    "end": "2364560"
  },
  {
    "text": "this comment until later we don't want to forget about the relational databases we have to mention these these guys so",
    "start": "2364560",
    "end": "2371680"
  },
  {
    "start": "2365000",
    "end": "2420000"
  },
  {
    "text": "this is the Jurassic Park of the zoo where the dinosaurs live use it when",
    "start": "2371680",
    "end": "2377359"
  },
  {
    "text": "your data is highly relational use it when there is no need to break data into small pieces when there is a need to",
    "start": "2377359",
    "end": "2383040"
  },
  {
    "text": "break data into small pieces and assemble it in different way reporting you want to have you know this",
    "start": "2383040",
    "end": "2390160"
  },
  {
    "text": "from this table and this from that table and this from that table and then report and then group them a certain way perfect nobody beats relational uh use",
    "start": "2390160",
    "end": "2397760"
  },
  {
    "text": "it when consistence is a must because you're not going to immediate consistency you're not going to get it",
    "start": "2397760",
    "end": "2402880"
  },
  {
    "text": "anywhere else and use it when the access patterns of unknown you just don't know how these these people are pretty much",
    "start": "2402880",
    "end": "2408880"
  },
  {
    "text": "going to go and query your data um doesn't scale horizontally we talked about that featured project skip you",
    "start": "2408880",
    "end": "2415280"
  },
  {
    "text": "guys know um how do you choose right um if it doesn't fit you",
    "start": "2415280",
    "end": "2424160"
  },
  {
    "start": "2420000",
    "end": "2565000"
  },
  {
    "text": "might quit wondering where I got that quote from but um what you want to take",
    "start": "2424160",
    "end": "2430720"
  },
  {
    "text": "into consideration when choosing the data store that fits your need best is",
    "start": "2430720",
    "end": "2436000"
  },
  {
    "text": "the actual data itself does it have a natural structure does it like",
    "start": "2436000",
    "end": "2442599"
  },
  {
    "text": "cluster does it relate to each other um in a way that I mean what data how",
    "start": "2442599",
    "end": "2450720"
  },
  {
    "text": "does it relate to each other i mean if it's a graph maybe you should look for a data store that is more or like",
    "start": "2450720",
    "end": "2457680"
  },
  {
    "text": "friendlier towards like graph questions for example or like things like that i don't know if this might not have made",
    "start": "2457680",
    "end": "2464640"
  },
  {
    "text": "any sense but you know what I mean right i hope so um and how the data is",
    "start": "2464640",
    "end": "2469760"
  },
  {
    "text": "connected to each other is extremely important as well um how is it distributed um and how much of it you have more",
    "start": "2469760",
    "end": "2476839"
  },
  {
    "text": "importantly so you want to look at your data how much how distributed how is it",
    "start": "2476839",
    "end": "2482480"
  },
  {
    "text": "connected to each other and does it have a natural structure as your data and you try to answer these questions uh you",
    "start": "2482480",
    "end": "2487920"
  },
  {
    "text": "want to actually talk about the access patterns what is the read and write ratio becomes extremely important are",
    "start": "2487920",
    "end": "2493920"
  },
  {
    "text": "you reading more than you're writing and how much uh because certain data structures I mean um if you the the",
    "start": "2493920",
    "end": "2502200"
  },
  {
    "text": "the I mean hash tables have I mean trees for example tree data structures are",
    "start": "2502200",
    "end": "2507440"
  },
  {
    "text": "like the perfect for search wherever it is so you would if you have a search problem you would want to use like for example a tree and things of that of",
    "start": "2507440",
    "end": "2514480"
  },
  {
    "text": "that of that uh uh but if you're writing or like you want um like constant look",
    "start": "2514480",
    "end": "2520079"
  },
  {
    "text": "up on certain on something you might want to put like a hash table over there or I mean it's more so it's important to",
    "start": "2520079",
    "end": "2527760"
  },
  {
    "text": "know whether you're going to favor a solution that performs in reads really",
    "start": "2527760",
    "end": "2533200"
  },
  {
    "text": "well but writes are okay or whether you need both or not i want to get there and",
    "start": "2533200",
    "end": "2538400"
  },
  {
    "text": "also whether how distributed um um whether your data is pretty much",
    "start": "2538400",
    "end": "2544400"
  },
  {
    "text": "uniform or random that one should be moved up to the data it's really important to know how distribute the",
    "start": "2544400",
    "end": "2549599"
  },
  {
    "text": "distribution of your data is it uniform or is it pretty much like random um as",
    "start": "2549599",
    "end": "2555440"
  },
  {
    "text": "well and you want to actually look at cap and figure out you know which one of those letters you're you're willing to",
    "start": "2555440",
    "end": "2562480"
  },
  {
    "text": "pretty much give give up uh for the other ones so other considerations the",
    "start": "2562480",
    "end": "2567760"
  },
  {
    "start": "2565000",
    "end": "2617000"
  },
  {
    "text": "maturity of a solution a lot of these NoSQL databases are not mature you know",
    "start": "2567760",
    "end": "2572800"
  },
  {
    "text": "uh the stability of the code um the stability of the project itself is it something that has a community",
    "start": "2572800",
    "end": "2578880"
  },
  {
    "text": "around it is it something that is wellmaintained and stuff uh the durability as well um are you more",
    "start": "2578880",
    "end": "2585839"
  },
  {
    "text": "interested in something that gets persisted to disk or you you just want something that is in memory although some people argue that caches have not",
    "start": "2585839",
    "end": "2592480"
  },
  {
    "text": "really no SQL to begin with uh but that's something you might want to look You might want to look at cost as well",
    "start": "2592480",
    "end": "2599040"
  },
  {
    "text": "how much is it going to cost you tooling i mean nobody beats RGBMS in the",
    "start": "2599040",
    "end": "2604400"
  },
  {
    "text": "availability of tools and also the familiarity i mean this is a big learning curve for a lot of us uh coming",
    "start": "2604400",
    "end": "2611119"
  },
  {
    "text": "from uh years years of NoSQL and expect things to be a certain way",
    "start": "2611119",
    "end": "2617480"
  },
  {
    "start": "2617000",
    "end": "2620000"
  },
  {
    "text": "next so for fairness um relational data stores did not fail",
    "start": "2617480",
    "end": "2623440"
  },
  {
    "text": "us they didn't uh they actually performed really well for what they were designed for uh we kind of failed",
    "start": "2623440",
    "end": "2630319"
  },
  {
    "text": "ourselves if you have a Phillips screwdriver you try to use like a flathead to kind of unscrew it you know",
    "start": "2630319",
    "end": "2636240"
  },
  {
    "text": "you kind of going to do it but you're not going to do as well as the actual Phillips if you use like the actual Phillips um screwdriver",
    "start": "2636240",
    "end": "2643319"
  },
  {
    "text": "to that was designed for or sometimes it's just pretty much impossible to unscrew a flathead with a Phillips uh so",
    "start": "2643319",
    "end": "2651760"
  },
  {
    "text": "it's us using them uh for things that they were not intended uh to be used for",
    "start": "2651760",
    "end": "2656800"
  },
  {
    "text": "so take any data store and you'll get um take any data store and any data store",
    "start": "2656800",
    "end": "2661839"
  },
  {
    "text": "you get as much in in in in as much as much trouble as RDBMS if we started with",
    "start": "2661839",
    "end": "2668319"
  },
  {
    "text": "graph databases and we said everybody writes all their application on graph databases uh you're going to end up with",
    "start": "2668319",
    "end": "2673920"
  },
  {
    "text": "the same thing because there's no silver bullets there are always uh tradeoffs um so yeah you can skip",
    "start": "2673920",
    "end": "2682760"
  },
  {
    "start": "2682000",
    "end": "2816000"
  },
  {
    "text": "that now polyglot persistence that we talked about in",
    "start": "2682760",
    "end": "2690160"
  },
  {
    "text": "length um how we got here you know and our um journey with relational databases",
    "start": "2690160",
    "end": "2696079"
  },
  {
    "text": "talked a little bit about the nosql and uh you know and got to know some of them",
    "start": "2696079",
    "end": "2701359"
  },
  {
    "text": "we're going to move to something to this like new movement called polyglot persistence and before I go uh polyglot",
    "start": "2701359",
    "end": "2707760"
  },
  {
    "text": "is this term that was used by Neil Ford he's speaking in this conference uh for",
    "start": "2707760",
    "end": "2712800"
  },
  {
    "text": "programming languages he's a very big believer in uh ones that one of that we",
    "start": "2712800",
    "end": "2718560"
  },
  {
    "text": "should use different programming languages to solve different pretty much solutions within the enterprise he wants an application where half of it is Ruby",
    "start": "2718560",
    "end": "2725040"
  },
  {
    "text": "and half of it is Java and half of it is this not just for fun to play around but some problems are easier to solve with",
    "start": "2725040",
    "end": "2733280"
  },
  {
    "text": "uh with some languages so the same way for like data stores we're dealing with these enterprise applications that are",
    "start": "2733280",
    "end": "2739520"
  },
  {
    "text": "very complex and they combine complex problems um the assumption that we should always use one data store is just",
    "start": "2739520",
    "end": "2746000"
  },
  {
    "text": "absurd um you can try to fit it all in one model and and but don't expect no",
    "start": "2746000",
    "end": "2751920"
  },
  {
    "text": "problems take all these problems and try to put them in a relational database you're going to have problems take them",
    "start": "2751920",
    "end": "2756960"
  },
  {
    "text": "all and put them in a column base you're going to have problems uh so they just don't all fit in the one model so this",
    "start": "2756960",
    "end": "2764480"
  },
  {
    "text": "brings us to the polyglot persistence which is pretty much to leverage multiple data stores based on the way",
    "start": "2764480",
    "end": "2771200"
  },
  {
    "text": "data is used by the application they have multiple of them have your application have you use",
    "start": "2771200",
    "end": "2778240"
  },
  {
    "text": "multiple of them at the same time strategically of course this is associated with a learning curve and a",
    "start": "2778240",
    "end": "2785200"
  },
  {
    "text": "big risk and it's a long but it's a long-term investment because it becomes uh more productive um um in the in the",
    "start": "2785200",
    "end": "2792560"
  },
  {
    "text": "long run and you should do it really carefully and not go out of control it's like the guy that gets introduced to",
    "start": "2792560",
    "end": "2799119"
  },
  {
    "text": "design patterns and start seeing them all over the place uh I was that guy when back in college but what this",
    "start": "2799119",
    "end": "2806160"
  },
  {
    "text": "pretty much gives you is give you the ability to leverage the strengths of a multiple pretty much data store to",
    "start": "2806160",
    "end": "2811520"
  },
  {
    "text": "provide the best uh and the simplest solution for your problem uh so an example these are just",
    "start": "2811520",
    "end": "2819359"
  },
  {
    "start": "2816000",
    "end": "2970000"
  },
  {
    "text": "pretty much examples i would use MongoDB for product for a product catalog that's more likely to pretty much change and it",
    "start": "2819359",
    "end": "2824800"
  },
  {
    "text": "has all these hierarchy and like you know home and then end of home there is bathroom and under bathroom there's",
    "start": "2824800",
    "end": "2830400"
  },
  {
    "text": "towels wherever it is and you know some guy introduces an electronic towel so I",
    "start": "2830400",
    "end": "2835440"
  },
  {
    "text": "should have no problem pretty much saying that this towel takes like batteries and things like that um",
    "start": "2835440",
    "end": "2841680"
  },
  {
    "text": "they're MongoDB is very efficient in uh have slow reads that's slow right but",
    "start": "2841680",
    "end": "2847040"
  },
  {
    "text": "very fast very fast reads and So you have that ratio out there so I would totally go with something like",
    "start": "2847040",
    "end": "2853680"
  },
  {
    "text": "radius for shopping cart data is temporary and I need to pretty much just go and give me the shopping cart for",
    "start": "2853680",
    "end": "2859040"
  },
  {
    "text": "this user ID and you get it right there use for example Dynamo DB for like a um um for like social profile info it's a",
    "start": "2859040",
    "end": "2866160"
  },
  {
    "text": "key data store uh Neo4j for the social graph and I'm going I'm going to go over",
    "start": "2866160",
    "end": "2872000"
  },
  {
    "text": "there since this thing cannot scale vertically um it's completely okay for",
    "start": "2872000",
    "end": "2877200"
  },
  {
    "text": "you to have the data of your social graph are only the ID of your users so you have a graph of the ID of the users",
    "start": "2877200",
    "end": "2884160"
  },
  {
    "text": "and you kind of kind of save in space the profile information is stored somewhere else the profile information",
    "start": "2884160",
    "end": "2890319"
  },
  {
    "text": "is stored in pretty much Dynamo DB so you go and you have this user profile you take the ID and you query Neo4j of",
    "start": "2890319",
    "end": "2897920"
  },
  {
    "text": "all his friends and you get all the ids of his friends you turn around and you pretty much get the profile information",
    "start": "2897920",
    "end": "2903040"
  },
  {
    "text": "from Dynamob so you're the one who actually hold that key and with it you can go and ask different data stores uh",
    "start": "2903040",
    "end": "2909359"
  },
  {
    "text": "in a way that is more efficient hbs for inbox and public feed messages we depending on how much time we can",
    "start": "2909359",
    "end": "2915599"
  },
  {
    "text": "discuss why is that I mean I think Facebook use it for that particular purpose uh don't quote me I might be",
    "start": "2915599",
    "end": "2921119"
  },
  {
    "text": "completely wrong uh my SQL for payment and account info $100 problem and",
    "start": "2921119",
    "end": "2926880"
  },
  {
    "text": "Cassandra for audit and activity logs most important thing of the slide I",
    "start": "2926880",
    "end": "2932640"
  },
  {
    "text": "am not making any recommendation here and um by the way don't just go and do",
    "start": "2932640",
    "end": "2938400"
  },
  {
    "text": "this this can be a management nightmare you could totally fail if you I mean you",
    "start": "2938400",
    "end": "2944400"
  },
  {
    "text": "want to be very strategic if it's a real problem you know maybe use two maybe use one maybe three I mean depends but You",
    "start": "2944400",
    "end": "2951920"
  },
  {
    "text": "need to be aware that all your developers and all of the people who are working on this thing um needs a lot of",
    "start": "2951920",
    "end": "2958720"
  },
  {
    "text": "time to get that knowledge and that it's going to take a lot of time for you to manage these data stores individually um",
    "start": "2958720",
    "end": "2967400"
  },
  {
    "text": "next no SQL in the cloud no SQL become a commodity talking",
    "start": "2967400",
    "end": "2974000"
  },
  {
    "start": "2970000",
    "end": "3052000"
  },
  {
    "text": "about fully managed data stores no maintenance whatsoever dynamob is the perfect example i love that thing",
    "start": "2974000",
    "end": "2981760"
  },
  {
    "text": "you don't have to worry about cluster management i came from a company where we actually had to manage our Hbas",
    "start": "2981760",
    "end": "2986800"
  },
  {
    "text": "cluster ourselves it was a nightmare it was really hard and we're trying to do that on EC2 and wherever it is move away",
    "start": "2986800",
    "end": "2993440"
  },
  {
    "text": "from that to use Dynamo and everything is pretty much managed for us and we could scaling up scaling down it's a",
    "start": "2993440",
    "end": "3000480"
  },
  {
    "text": "pretty much like a matter of of a few clicks uh elastic scaling that's what you get uh with a lot of these companies",
    "start": "3000480",
    "end": "3007440"
  },
  {
    "text": "right there that do hosted uh mong hosted NoSQL and very cheap",
    "start": "3007440",
    "end": "3013119"
  },
  {
    "text": "storage it cost zero on Dynamo to store they bill you for for uh for bandwidth",
    "start": "3013119",
    "end": "3018800"
  },
  {
    "text": "for how much data to query but you could have billions of record of over there and they will not they're not going to",
    "start": "3018800",
    "end": "3024240"
  },
  {
    "text": "charge you anything runs I think on SSD or something featured Amazon AWS",
    "start": "3024240",
    "end": "3030599"
  },
  {
    "text": "um you know Heroku pretty much have a set of add-ons Neo4j I think is one of",
    "start": "3030599",
    "end": "3036480"
  },
  {
    "text": "them you know name any NoSQL uh database out there and uh you know cloud foundry",
    "start": "3036480",
    "end": "3042000"
  },
  {
    "text": "these are um maybe Hibuku and Cloud Foundry are both pads Amazon AWS kind of",
    "start": "3042000",
    "end": "3048160"
  },
  {
    "text": "tethered some of their offerings are pad offerings some of them is just pretty much infrastructure for you to use as",
    "start": "3048160",
    "end": "3053920"
  },
  {
    "start": "3052000",
    "end": "3170000"
  },
  {
    "text": "promised Um I'm going to answer my abstract has a bunch of questions those questions were",
    "start": "3053920",
    "end": "3061200"
  },
  {
    "text": "designed to draw you guys in and I told you I was going to have the answers for them there you go what does the rise of",
    "start": "3061200",
    "end": "3069119"
  },
  {
    "text": "all of these NoSQL databases mean to my enterprise i'm guessing a lot of this",
    "start": "3069119",
    "end": "3075240"
  },
  {
    "text": "presentation what is NoSQL to begin with in a non-reational data store does it",
    "start": "3075240",
    "end": "3080480"
  },
  {
    "text": "mean no SQL no uh could this be just another fad i don't think so personally",
    "start": "3080480",
    "end": "3088000"
  },
  {
    "text": "it's a matter of opinion you're entitled is it a good idea to abandon RGBMS for",
    "start": "3088000",
    "end": "3093280"
  },
  {
    "text": "all these new exa exotic whoever it is for my specific enterprise it's up to",
    "start": "3093280",
    "end": "3098480"
  },
  {
    "text": "you i would say no guts no glory now um I'll give you an advice though you don't",
    "start": "3098480",
    "end": "3104319"
  },
  {
    "text": "want to go and uh take the most critical piece of your application start experimenting with these databases",
    "start": "3104319",
    "end": "3110160"
  },
  {
    "text": "because most likely uh you are going to discover as you're learning that you pretty much made most likely made the",
    "start": "3110160",
    "end": "3116000"
  },
  {
    "text": "wrong choice to store your data over there you might want to get these like small projects that just like pretty",
    "start": "3116000",
    "end": "3121520"
  },
  {
    "text": "much like float around kind of experiment with it get your technique down and everything uh modeling is not",
    "start": "3121520",
    "end": "3127040"
  },
  {
    "text": "simple make sure you know that really well then trans transition in a way that is very graceful don't just go and say",
    "start": "3127040",
    "end": "3132640"
  },
  {
    "text": "hey five all the DBAs and they'll do that no although uh it's very tempting",
    "start": "3132640",
    "end": "3138240"
  },
  {
    "text": "so u how scalable is scalable however much you need it to be you know if you're uh doing audits",
    "start": "3138240",
    "end": "3146240"
  },
  {
    "text": "and you're interested in storing you know five year worth of data",
    "start": "3146240",
    "end": "3151760"
  },
  {
    "text": "you probably would be fine with just pretty much the one server and just use an RDBMS it's cheap and you're not going",
    "start": "3151760",
    "end": "3158480"
  },
  {
    "text": "to get in trouble because you only want five years of financial of audit data if you want the forever and you think that",
    "start": "3158480",
    "end": "3164960"
  },
  {
    "text": "you have millions of customers and that thing just grows you're going to have to make the call right there and make the trade-off for the right database uh",
    "start": "3164960",
    "end": "3172240"
  },
  {
    "start": "3170000",
    "end": "3242000"
  },
  {
    "text": "assuming that I'm sold how do I choose the one that fits my need best i'll tell you if you hire me i don't know your",
    "start": "3172240",
    "end": "3178319"
  },
  {
    "text": "needs all depends to you you know your needs more than anybody else uh this",
    "start": "3178319",
    "end": "3183359"
  },
  {
    "text": "presentation is just designed to kind of um introduce you and tell you give you like in a way you know just um a",
    "start": "3183359",
    "end": "3191359"
  },
  {
    "text": "starting point for you to kind of know where you stand and uh what the available technologies out there is",
    "start": "3191359",
    "end": "3197520"
  },
  {
    "text": "there a middle ground somewhere uh polyglot persistence is your middle ground um what is this poly polyglot",
    "start": "3197520",
    "end": "3206319"
  },
  {
    "text": "persistence I hear about is the middle ground so when you sit down and you realize that we deal with complex",
    "start": "3206319",
    "end": "3212800"
  },
  {
    "text": "problems they're all different um it's just uh um fair to say that I am going",
    "start": "3212800",
    "end": "3219680"
  },
  {
    "text": "to use this for this and I'm going to use that for that instead of going all go going only like one direction um yeah",
    "start": "3219680",
    "end": "3226720"
  },
  {
    "text": "I think that does it thank you all for sitting through the talk i really appreciate you pretty much being here",
    "start": "3226720",
    "end": "3234960"
  },
  {
    "text": "[Music]",
    "start": "3235860",
    "end": "3244330"
  }
]