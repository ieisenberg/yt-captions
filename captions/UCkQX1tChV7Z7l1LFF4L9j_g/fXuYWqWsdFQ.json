[
  {
    "start": "0",
    "end": "175000"
  },
  {
    "text": "hello everyone and thank you for coming",
    "start": "3960",
    "end": "8900"
  },
  {
    "text": "imagine it's the year 2000 and you're trying to build a software load balancer",
    "start": "10910",
    "end": "16368"
  },
  {
    "text": "we wanted to handle tens of thousands of concurrent connections per second you",
    "start": "16369",
    "end": "21869"
  },
  {
    "text": "want it to max out the network interface cards it's using and you want it to do all that with minimal latency the only",
    "start": "21869",
    "end": "30570"
  },
  {
    "text": "problem is you and your users have Hardware something like this well I'm exaggerating but this was the",
    "start": "30570",
    "end": "39900"
  },
  {
    "text": "time of painting three CPUs which ran at around 1 gigahertz and with only a",
    "start": "39900",
    "end": "46200"
  },
  {
    "text": "single CPU core Villatoro is the author",
    "start": "46200",
    "end": "51240"
  },
  {
    "text": "of EB trees and he ran an even slower machine he's also the primary author prolific",
    "start": "51240",
    "end": "59460"
  },
  {
    "text": "contributor and maintainer for the HP proxy open source project for the past",
    "start": "59460",
    "end": "64680"
  },
  {
    "text": "18 years so really had a problem if we imagine",
    "start": "64680",
    "end": "72540"
  },
  {
    "text": "this highway intersection to be a cheap proxy we can think of the cars on it as",
    "start": "72540",
    "end": "77930"
  },
  {
    "text": "connections going through their various stages of processing our single CPU",
    "start": "77930",
    "end": "84240"
  },
  {
    "text": "means that we only have one engine for all these vehicles so our challenge then",
    "start": "84240",
    "end": "90180"
  },
  {
    "text": "is to somehow magically share this one single engine amongst all of them in",
    "start": "90180",
    "end": "97590"
  },
  {
    "text": "such a way so that everybody travels at their preferred speed and that nobody",
    "start": "97590",
    "end": "103080"
  },
  {
    "text": "notices there is only one engine one way to do it is to process each connection",
    "start": "103080",
    "end": "110010"
  },
  {
    "text": "for a short period of time and then move on to the next connection that's that",
    "start": "110010",
    "end": "116220"
  },
  {
    "text": "has the highest need to be processed next and this is not a new concept it",
    "start": "116220",
    "end": "122820"
  },
  {
    "text": "has been popular popularized since then under terms such as green threading or",
    "start": "122820",
    "end": "129349"
  },
  {
    "text": "cooperative threading and we can find examples of it in Python G event or Ingo",
    "start": "129349",
    "end": "135930"
  },
  {
    "text": "Lang's Cortines and writing this type of software is interesting in and of itself but before",
    "start": "135930",
    "end": "143970"
  },
  {
    "text": "we can even do that we need to be able to wake up some tasks and find out which",
    "start": "143970",
    "end": "148980"
  },
  {
    "text": "one needs to be processed first so we need the timer and the scheduler a",
    "start": "148980",
    "end": "155239"
  },
  {
    "text": "scheduled implementation can be simple and probably should it has a specific",
    "start": "156020",
    "end": "161160"
  },
  {
    "text": "set of demands and in this talk I'll be talking about what makes it a proxy",
    "start": "161160",
    "end": "167040"
  },
  {
    "text": "scheduler so fast and in turn what makes it a proxy the fasted software wall",
    "start": "167040",
    "end": "172260"
  },
  {
    "text": "dancer in the industry my name is Angela Coe and I'm a director of engineering at",
    "start": "172260",
    "end": "179820"
  },
  {
    "start": "175000",
    "end": "306000"
  },
  {
    "text": "AG proxy my team and I we work on making sure that each a proxy remains the",
    "start": "179820",
    "end": "186480"
  },
  {
    "text": "fastest and most widely used software load balancer we work on integrating a",
    "start": "186480",
    "end": "192570"
  },
  {
    "text": "proxy with current and emerging platforms and technologies in order to",
    "start": "192570",
    "end": "197850"
  },
  {
    "text": "follow our users needs also in this talk we'll be showing that",
    "start": "197850",
    "end": "206870"
  },
  {
    "text": "if we take a concept an idea and think",
    "start": "206870",
    "end": "212610"
  },
  {
    "text": "outside of the box and implementing implemented with thinking about the",
    "start": "212610",
    "end": "218820"
  },
  {
    "text": "practical constraints of the environment where our software is going to be running we can make a big impact with it",
    "start": "218820",
    "end": "226880"
  },
  {
    "text": "in our example trees are fundamental and therefore ubiquitous data structure we",
    "start": "226880",
    "end": "234570"
  },
  {
    "text": "can find it virtually anywhere in any software or library it's in file systems ext4 HFS+ NTFS virtually any modern file",
    "start": "234570",
    "end": "244350"
  },
  {
    "text": "system it's in we can find it in higher",
    "start": "244350",
    "end": "249720"
  },
  {
    "text": "level languages as a way to implement more complex data structures it's in",
    "start": "249720",
    "end": "254970"
  },
  {
    "text": "databases was grass MySQL and also in the Linux kernel itself it powers the",
    "start": "254970",
    "end": "262560"
  },
  {
    "text": "completely fair scheduler which is the default schedule for the Linux kernel",
    "start": "262560",
    "end": "268270"
  },
  {
    "text": "even though the trees are used everywhere if we combine algorithmic innovation with paying attention to",
    "start": "268270",
    "end": "275830"
  },
  {
    "text": "memory allocation and CPU cache utilization we can make an",
    "start": "275830",
    "end": "281500"
  },
  {
    "text": "implementation that's better suited for our needs than any other competitor high",
    "start": "281500",
    "end": "290500"
  },
  {
    "text": "performance is also a way to protect our load balancers since it can be exposed",
    "start": "290500",
    "end": "295870"
  },
  {
    "text": "to malicious traffic and a slow dancer is a way to find the vector for an",
    "start": "295870",
    "end": "303070"
  },
  {
    "text": "attack will be our EB tree that we end",
    "start": "303070",
    "end": "311770"
  },
  {
    "start": "306000",
    "end": "375000"
  },
  {
    "text": "up with is a fast descent and search capability it's memory efficient it",
    "start": "311770",
    "end": "319389"
  },
  {
    "text": "allows us by the virtue of its makeup to",
    "start": "319389",
    "end": "324430"
  },
  {
    "text": "look up keys by mask or prefix it's optimized for inserts and deletes and",
    "start": "324430",
    "end": "330780"
  },
  {
    "text": "it's great with bit addressable data so",
    "start": "330780",
    "end": "337750"
  },
  {
    "text": "we will go about this talk by first exploring the problem space by taking a",
    "start": "337750",
    "end": "344320"
  },
  {
    "text": "look at the scheduling requirements that we have in our use case and some",
    "start": "344320",
    "end": "349630"
  },
  {
    "text": "candidate solutions that might be used to implement it then we'll take a look",
    "start": "349630",
    "end": "354639"
  },
  {
    "text": "at what makes eb-3 so special and those are two parts one of them is design and",
    "start": "354639",
    "end": "359830"
  },
  {
    "text": "the other one is the eb-3 implementation and finally we'll take a look how we can",
    "start": "359830",
    "end": "366449"
  },
  {
    "text": "make use of EB trees and how it's used with the nature proxy scheduler and then",
    "start": "366449",
    "end": "372699"
  },
  {
    "text": "we'll conclude so scheduling requirements in order to",
    "start": "372699",
    "end": "384930"
  },
  {
    "text": "solve our problem of a number of tasks needing to run on a single thread and",
    "start": "384930",
    "end": "390530"
  },
  {
    "text": "take care of network connections at the same time an event loop seems like an ideal the ideal design choice and",
    "start": "390530",
    "end": "398720"
  },
  {
    "text": "basically the H a proxy event loop what we needed to do is to handle the network",
    "start": "398720",
    "end": "403949"
  },
  {
    "text": "connections and the tasks that it's going to be handling can be grouped into two categories the tasks that are",
    "start": "403949",
    "end": "411210"
  },
  {
    "text": "running right now and that we need to run right now and the tasks that are",
    "start": "411210",
    "end": "416669"
  },
  {
    "text": "suspended that are chilling out that we're going to look up and check up on later so conceptually we can visualize",
    "start": "416669",
    "end": "426479"
  },
  {
    "text": "it like this our event loop is going to go through all these three stages in turn and then loop round back up on it",
    "start": "426479",
    "end": "434810"
  },
  {
    "text": "the connection parts well we already have a number of polling mechanisms on",
    "start": "434810",
    "end": "442349"
  },
  {
    "text": "Linux we have Paulie Pole capo so we're already in a pretty good spot with them",
    "start": "442349",
    "end": "448580"
  },
  {
    "text": "however with our tasks that's where we're on our own",
    "start": "448580",
    "end": "453780"
  },
  {
    "text": "so we need to implement something that can take care of our need there what is",
    "start": "453780",
    "end": "464340"
  },
  {
    "start": "462000",
    "end": "591000"
  },
  {
    "text": "a nature proxy task at all well at the basic level we can define it by only two",
    "start": "464340",
    "end": "471780"
  },
  {
    "text": "things one is the expiry time when we need the tasks to run and the other",
    "start": "471780",
    "end": "476910"
  },
  {
    "text": "thing is a bunch of code it's going to that we want to run at that time and our",
    "start": "476910",
    "end": "483630"
  },
  {
    "text": "schedule what do we want it to do well we just said we need to have two groups",
    "start": "483630",
    "end": "489479"
  },
  {
    "text": "of tasks active ones and suspended ones the task that we have consisting of key",
    "start": "489479",
    "end": "496530"
  },
  {
    "text": "with the timestamp and some code attached to it we're going to be inserting a lot of that we also need to",
    "start": "496530",
    "end": "505879"
  },
  {
    "text": "allow for duplicates to be inserted because it's likely and that we will end",
    "start": "505879",
    "end": "511819"
  },
  {
    "text": "up with tasks that want to be executed at the same moment of time after we've",
    "start": "511819",
    "end": "519919"
  },
  {
    "text": "done some inserting we'll want to read those tasks back but we want them sorted",
    "start": "519919",
    "end": "526160"
  },
  {
    "text": "we want to know which ones need to run first and as we read them back we're",
    "start": "526160",
    "end": "532850"
  },
  {
    "text": "going to be deleting them from that particular group because after we unsuspended them after we proclaim the",
    "start": "532850",
    "end": "540440"
  },
  {
    "text": "tasks active we no longer need it in that group and a last thing it would be",
    "start": "540440",
    "end": "547880"
  },
  {
    "text": "nice to have priorities so that if multiple tasks need to run at the same time we can have tasks which are",
    "start": "547880",
    "end": "555470"
  },
  {
    "text": "prioritized over others and run soon so",
    "start": "555470",
    "end": "560860"
  },
  {
    "text": "our handling of tasks is going to look something like this we're going to have",
    "start": "560860",
    "end": "566029"
  },
  {
    "text": "a number of tasks in a run queue we're going to be processing them as we",
    "start": "566029",
    "end": "571310"
  },
  {
    "text": "process each one of them we're going to move it to the wait kill and after we",
    "start": "571310",
    "end": "577490"
  },
  {
    "text": "process the number of tasks we can take a look at the way to you and pull up some tasks from it to promote to be",
    "start": "577490",
    "end": "583700"
  },
  {
    "text": "promoted to the rank you and then we rinse and repeat",
    "start": "583700",
    "end": "588819"
  },
  {
    "start": "591000",
    "end": "652000"
  },
  {
    "text": "what about our scheduling environment where will our schedule a run well since",
    "start": "591110",
    "end": "597480"
  },
  {
    "text": "we're building a software load balancer it's gonna be running potentially during",
    "start": "597480",
    "end": "603360"
  },
  {
    "text": "slow periods of net of network traffic but also running during very high periods of network traffic probably",
    "start": "603360",
    "end": "609269"
  },
  {
    "text": "sustained probably sustained periods so we can expect up to high frequency",
    "start": "609269",
    "end": "615240"
  },
  {
    "text": "events and then for its network connection we might have multiple processing rules or conditions",
    "start": "615240",
    "end": "622110"
  },
  {
    "text": "associated with it so there's just going to compound the number of rules that we need to insert and the number of tasks that we need to",
    "start": "622110",
    "end": "629399"
  },
  {
    "text": "keep track of and that number can grow quite huge we also are going to be doing",
    "start": "629399",
    "end": "638939"
  },
  {
    "text": "a frequent lookups because we just said we're going to be checking up on the list of suspended tasks to see do we",
    "start": "638939",
    "end": "646529"
  },
  {
    "text": "need to run something and that's going to happen quite a lot so what were what",
    "start": "646529",
    "end": "655800"
  },
  {
    "start": "652000",
    "end": "695000"
  },
  {
    "text": "are some of the desirable qualities that we can think of we want the schedule to be fast but even more than that we want",
    "start": "655800",
    "end": "662490"
  },
  {
    "text": "it to be predictable because we don't want to suddenly have a slowdown when no",
    "start": "662490",
    "end": "668160"
  },
  {
    "text": "external change has happened just because our scheduler has run up against",
    "start": "668160",
    "end": "673709"
  },
  {
    "text": "some of its internal limitation and if we combine the desire for speed with the",
    "start": "673709",
    "end": "680790"
  },
  {
    "text": "desire for simplicity with the desire for predictability we end up with needing to have something that's simple",
    "start": "680790",
    "end": "687720"
  },
  {
    "text": "enough it can be well understood",
    "start": "687720",
    "end": "691308"
  },
  {
    "text": "so let's take a look at some potential",
    "start": "694020",
    "end": "699180"
  },
  {
    "start": "695000",
    "end": "717000"
  },
  {
    "text": "solutions to our problem and we'll take",
    "start": "699180",
    "end": "704700"
  },
  {
    "text": "a look at the basic data structures that are commonly used in programming since those all are have the highest chance of",
    "start": "704700",
    "end": "713120"
  },
  {
    "text": "satisfying the demands that we just put forth the one of the most basic data",
    "start": "713120",
    "end": "720240"
  },
  {
    "start": "717000",
    "end": "984000"
  },
  {
    "text": "structures in air a but the only thing it has going for it enough for our use",
    "start": "720240",
    "end": "725370"
  },
  {
    "text": "case is that we can iterate through it quite fast so we can check up on the",
    "start": "725370",
    "end": "730680"
  },
  {
    "text": "list of tasks that needs to be woken up quickly but for insert for deletes for",
    "start": "730680",
    "end": "736200"
  },
  {
    "text": "sorting and for searching it doesn't really do much for us then we have a",
    "start": "736200",
    "end": "743459"
  },
  {
    "text": "linked list and that one well that one is a good improvement on the array",
    "start": "743459",
    "end": "748589"
  },
  {
    "text": "because not only can we iterate through it quickly we can also insert into it",
    "start": "748589",
    "end": "753750"
  },
  {
    "text": "quickly and we can delete for it quickly so we should maybe keep that one in mind",
    "start": "753750",
    "end": "760760"
  },
  {
    "text": "some of the other basic data structures like the stack and the queue they're not",
    "start": "761000",
    "end": "766260"
  },
  {
    "text": "going to be interesting for us because we can't reorder them that's part of their definition a hashmap another basic",
    "start": "766260",
    "end": "774240"
  },
  {
    "text": "data structure has fast inserts for the lists it can search really quickly but",
    "start": "774240",
    "end": "781520"
  },
  {
    "text": "doesn't do anything for sorting and lastly and there was a spoiler earlier",
    "start": "781520",
    "end": "787130"
  },
  {
    "text": "trees are a good thing to look at so we",
    "start": "787130",
    "end": "792779"
  },
  {
    "text": "isolated linked lists as a potential solution to our problem why well it",
    "start": "792779",
    "end": "798500"
  },
  {
    "text": "usually handled the linked list by referencing with a pointer to its head",
    "start": "798500",
    "end": "804660"
  },
  {
    "text": "and if the entry that we're interested in is at the start and if the entry that",
    "start": "804660",
    "end": "810930"
  },
  {
    "text": "we want to extract and delete is at the start well this gives us constant time",
    "start": "810930",
    "end": "816270"
  },
  {
    "text": "to access and delete entries and if we keep another pointer at the end of the",
    "start": "816270",
    "end": "822000"
  },
  {
    "text": "list and we always insert at the end and it gives us a constant time to",
    "start": "822000",
    "end": "827230"
  },
  {
    "text": "insert at the end so for our tasks if we",
    "start": "827230",
    "end": "832300"
  },
  {
    "text": "can rely on all the tasks having the same expiry time then the linked list is",
    "start": "832300",
    "end": "837550"
  },
  {
    "text": "a perfect solution and in fact originally a chap Roxy used the link list as a basis for its task scheduler",
    "start": "837550",
    "end": "844800"
  },
  {
    "text": "and it's not not it's not the only thing the only one between that a Linux",
    "start": "844800",
    "end": "850690"
  },
  {
    "text": "scheduler used to use a linked list basis of its implementation before",
    "start": "850690",
    "end": "857620"
  },
  {
    "text": "completely fair scheduler was introduced why we're not currently using a linked",
    "start": "857620",
    "end": "865060"
  },
  {
    "text": "list as the basis of the scheduler implementation for a proxy well the reason is simple because it's not",
    "start": "865060",
    "end": "871060"
  },
  {
    "text": "realistic anymore to have tasks with the same expiry time and as soon as we introduced the tasks that need to have",
    "start": "871060",
    "end": "878590"
  },
  {
    "text": "differing expiry times that means that after inserting tasks we'll probably",
    "start": "878590",
    "end": "884680"
  },
  {
    "text": "need to sort the linked list so adding to the end is no longer a solution to our problem because then after every",
    "start": "884680",
    "end": "890980"
  },
  {
    "text": "insert we need to sort the list and that's going to take additional time so",
    "start": "890980",
    "end": "896430"
  },
  {
    "text": "the linked list not an ideal solution after all a tree on the other hand is",
    "start": "896430",
    "end": "904180"
  },
  {
    "text": "there a structure that by the definition keep the data sorted so that's a good",
    "start": "904180",
    "end": "911440"
  },
  {
    "text": "thing to start with it has fast searches as well so if we",
    "start": "911440",
    "end": "918130"
  },
  {
    "text": "need to find a single task that for some reason needs to be terminated or needs to be promoted somewhere else it's easy",
    "start": "918130",
    "end": "924280"
  },
  {
    "text": "to do that however depending on implementation trees can have more",
    "start": "924280",
    "end": "932050"
  },
  {
    "text": "complicated insert and delete processes and why is that well if you take a look",
    "start": "932050",
    "end": "937990"
  },
  {
    "text": "at this basic binary search tree if we don't have any optimizations for insert",
    "start": "937990",
    "end": "945490"
  },
  {
    "text": "and delete procedures and if we insert data that's coming in already pre sorted",
    "start": "945490",
    "end": "950650"
  },
  {
    "text": "we're going to end up with a linked list all the data will be inserted",
    "start": "950650",
    "end": "955690"
  },
  {
    "text": "in the same branch of the tree and basically we didn't get it gained anything so to prevent that over time a",
    "start": "955690",
    "end": "963270"
  },
  {
    "text": "number of three variants have been devised as a class of self-balancing trees that perform three rotations or a",
    "start": "963270",
    "end": "972520"
  },
  {
    "text": "drop three operations after inserts or after delete in order to minimize the",
    "start": "972520",
    "end": "978100"
  },
  {
    "text": "difference between the longest branch of the tree and the shortest branch of the tree this is a good thing but it can get",
    "start": "978100",
    "end": "988330"
  },
  {
    "start": "984000",
    "end": "1269000"
  },
  {
    "text": "complex so here we have our enemy animation from Wikipedia showing a",
    "start": "988330",
    "end": "993790"
  },
  {
    "text": "number of different operations three rotations for one of the self dollars",
    "start": "993790",
    "end": "1000180"
  },
  {
    "text": "and trees the AVL tree and what that might look like in practice so this is",
    "start": "1000180",
    "end": "1006840"
  },
  {
    "text": "going to happen one of these is going to happen on every insert and there's a number of different ones and after with",
    "start": "1006840",
    "end": "1013860"
  },
  {
    "text": "the little entry the balance of the tree is going to change so again we're going to have to do some",
    "start": "1013860",
    "end": "1019730"
  },
  {
    "text": "rearrangement a different three different self balancing tree",
    "start": "1019730",
    "end": "1026220"
  },
  {
    "text": "implementation like red black tree has the same problem but there's one type of",
    "start": "1026220",
    "end": "1033270"
  },
  {
    "text": "tree we didn't consider yet and this is a prefix tree it has a completely",
    "start": "1033270",
    "end": "1039660"
  },
  {
    "text": "different set of properties to the one that we'd discussed up to now and this is because the prefix trees",
    "start": "1039660",
    "end": "1046709"
  },
  {
    "text": "introduce the distinction between the nodes that connect the tree and the last",
    "start": "1046709",
    "end": "1051840"
  },
  {
    "text": "row or the last line of nodes which are the leaves and they are used differently",
    "start": "1051840",
    "end": "1059940"
  },
  {
    "text": "in a way such that after when searching and when traversing the tree the nodes",
    "start": "1059940",
    "end": "1067110"
  },
  {
    "text": "are used to compare only parts of the key while the full key is achieved only",
    "start": "1067110",
    "end": "1072150"
  },
  {
    "text": "after reaching the leaf and here we have an example of with the number of words",
    "start": "1072150",
    "end": "1079110"
  },
  {
    "text": "and characters used and the common common parent of the tree in",
    "start": "1079110",
    "end": "1087720"
  },
  {
    "text": "this branch contains the common prefix while the different parts of the key are",
    "start": "1087720",
    "end": "1093450"
  },
  {
    "text": "stored on either side of the tree this is interesting because this type of tree",
    "start": "1093450",
    "end": "1101150"
  },
  {
    "text": "has its structure defined by the makeup of data that's stored in it so we can't",
    "start": "1101150",
    "end": "1107790"
  },
  {
    "text": "rotate this tree if we start rotating stuff first of all we're gonna mess up the ordering of the key components in it",
    "start": "1107790",
    "end": "1116010"
  },
  {
    "text": "and will not we no longer have the same data that we inserted in it and there's",
    "start": "1116010",
    "end": "1122730"
  },
  {
    "text": "a good part to it as well and that because the tree is not sortable or it's",
    "start": "1122730",
    "end": "1128910"
  },
  {
    "text": "not rearranged able if we want to delete an element we just remove it from the",
    "start": "1128910",
    "end": "1134340"
  },
  {
    "text": "tree and nothing else should or can change so while the inserts require",
    "start": "1134340",
    "end": "1143000"
  },
  {
    "text": "doing operations on the tree the deletes are very simple and since in every step",
    "start": "1143000",
    "end": "1150330"
  },
  {
    "text": "of the traversal down the tree we only compare the part of the key that's corresponding to the node in the",
    "start": "1150330",
    "end": "1157920"
  },
  {
    "text": "position of the node we're looking at in the tree we can compare three very long",
    "start": "1157920",
    "end": "1164160"
  },
  {
    "text": "keys much faster than other three variants because in other three variants",
    "start": "1164160",
    "end": "1169920"
  },
  {
    "text": "every node contains the entire key well here we only take a look at the part of the key for that particular node it's",
    "start": "1169920",
    "end": "1178380"
  },
  {
    "text": "also easy to do prefix matching because all of the keys with the same prefix",
    "start": "1178380",
    "end": "1185840"
  },
  {
    "text": "there will be elements of the same subtree it will find them under the same",
    "start": "1185840",
    "end": "1192270"
  },
  {
    "text": "node so those are good parts but there are some downside here as well as I said",
    "start": "1192270",
    "end": "1199410"
  },
  {
    "text": "the nodes and the leaves are treated differently so this makes our life harder because now we need to have",
    "start": "1199410",
    "end": "1206970"
  },
  {
    "text": "different algorithms and diff code to treat nodes and keys northern",
    "start": "1206970",
    "end": "1213430"
  },
  {
    "text": "leaves and this complicates memory management as well because we need to",
    "start": "1213430",
    "end": "1218620"
  },
  {
    "text": "keep track of which nodes are still used after we delete leaf I mean to garbage",
    "start": "1218620",
    "end": "1224500"
  },
  {
    "text": "collect them or do something with them afterward so it makes for a more",
    "start": "1224500",
    "end": "1231640"
  },
  {
    "text": "complicated code base the other downside is that the tree is not balanced and",
    "start": "1231640",
    "end": "1238330"
  },
  {
    "text": "that's part of the definite definition but if it's not balanced then we can run",
    "start": "1238330",
    "end": "1243670"
  },
  {
    "text": "in the same problem into the same problem we talked about earlier where depending on how the data is constructed",
    "start": "1243670",
    "end": "1251590"
  },
  {
    "text": "or what type of data we were inserting and the make up of the data we can end up with an unbalanced tree compared to a",
    "start": "1251590",
    "end": "1259870"
  },
  {
    "text": "self-balancing tree which would end up just fine in the balance so that's where",
    "start": "1259870",
    "end": "1271120"
  },
  {
    "start": "1269000",
    "end": "1346000"
  },
  {
    "text": "we were and this is where Willie found",
    "start": "1271120",
    "end": "1276190"
  },
  {
    "text": "himself so let's see what happened as I",
    "start": "1276190",
    "end": "1281350"
  },
  {
    "text": "already hinted at the initial implementation for the scheduler in a chip Roxie was based on linked lists but",
    "start": "1281350",
    "end": "1288340"
  },
  {
    "text": "that no longer worked after introducing different timeouts for tasks so the",
    "start": "1288340",
    "end": "1297430"
  },
  {
    "text": "community contributed an implementation of self-balancing tree in this case it",
    "start": "1297430",
    "end": "1302710"
  },
  {
    "text": "was a red-black tree but this just brought the problems which we associate",
    "start": "1302710",
    "end": "1308500"
  },
  {
    "text": "with self-balancing trees and those are more complex sensors and delete operations which means we just lost a",
    "start": "1308500",
    "end": "1315880"
  },
  {
    "text": "bunch of speed because we're doing inserts and deletes quite frequently will you try to solve this problem with",
    "start": "1315880",
    "end": "1324520"
  },
  {
    "text": "the simple mental implementation of a prefix tree just to discover the",
    "start": "1324520",
    "end": "1329560"
  },
  {
    "text": "downsides that we just mentioned which is more complex memory management and need to treat nodes and leave",
    "start": "1329560",
    "end": "1335980"
  },
  {
    "text": "differently resulting in an increase in memory allocation in vacations and at the rate that we're",
    "start": "1335980",
    "end": "1343060"
  },
  {
    "text": "talking about this makes a difference so then how what can we do about it",
    "start": "1343060",
    "end": "1350550"
  },
  {
    "text": "that constant time deletion for prefix trees is something that we can latch on to and it's the inherent quality of",
    "start": "1350550",
    "end": "1359320"
  },
  {
    "text": "prefix trees so if you can just simplify memory management and reduce the impact",
    "start": "1359320",
    "end": "1365770"
  },
  {
    "text": "of potentially having the tree in unbalanced then we might have a solution",
    "start": "1365770",
    "end": "1371320"
  },
  {
    "text": "for our lease case so let's take a look at the structure and the makeup of what",
    "start": "1371320",
    "end": "1380380"
  },
  {
    "text": "are the basic elements of the prefix 3 we have nodes here in green which are",
    "start": "1380380",
    "end": "1387850"
  },
  {
    "text": "pointed to by one parent and which in turn have two pointers to their children",
    "start": "1387850",
    "end": "1393310"
  },
  {
    "text": "those children can be either leaves or other nodes and we have the Leafs",
    "start": "1393310",
    "end": "1398410"
  },
  {
    "text": "which contain the full data of the key and which are pointed to by one node so",
    "start": "1398410",
    "end": "1406710"
  },
  {
    "text": "we can sort of from this description we can encode it into a diagram of a node",
    "start": "1406710",
    "end": "1413800"
  },
  {
    "text": "with the layer left and the right link but in order to traverse the tea tree",
    "start": "1413800",
    "end": "1420880"
  },
  {
    "text": "more efficiently and without needing to resort to recursion or remembering where",
    "start": "1420880",
    "end": "1428290"
  },
  {
    "text": "we were while traversing the tea the tree we can add a node parent pointer that will just point us back to where we",
    "start": "1428290",
    "end": "1435520"
  },
  {
    "text": "can and for the data we for the leaf we",
    "start": "1435520",
    "end": "1441670"
  },
  {
    "text": "can have just key data and again we'll for convenience sake we'll add the",
    "start": "1441670",
    "end": "1447190"
  },
  {
    "text": "parent pointer to the leaf so that we can faster move from it upwards there's",
    "start": "1447190",
    "end": "1454030"
  },
  {
    "text": "one additional element here which is the bit and that's the information that",
    "start": "1454030",
    "end": "1460000"
  },
  {
    "text": "we'll use to find where or how long the prefix how long the common prefix",
    "start": "1460000",
    "end": "1466130"
  },
  {
    "text": "for a particular node in the key is and I'll show that in a more detail in just",
    "start": "1466130",
    "end": "1471620"
  },
  {
    "text": "a bit so we had this as our example of a",
    "start": "1471620",
    "end": "1477380"
  },
  {
    "text": "prefix tree and the nodes and lift we",
    "start": "1477380",
    "end": "1482570"
  },
  {
    "text": "just defined would end up in this arrangement so that's the base of the",
    "start": "1482570",
    "end": "1489020"
  },
  {
    "text": "prefix tree that were working with so how do we go from that to an elastic",
    "start": "1489020",
    "end": "1494750"
  },
  {
    "text": "binary tree the elastic the elasticity",
    "start": "1494750",
    "end": "1502160"
  },
  {
    "text": "in the elastic binary tree comes from the realization that for n leaves if all",
    "start": "1502160",
    "end": "1509330"
  },
  {
    "text": "the nodes have older children assigned there will be n minus 1 nodes and in",
    "start": "1509330",
    "end": "1515480"
  },
  {
    "text": "this case we have 5 leaves in exactly 4 nodes and this relation will remain true",
    "start": "1515480",
    "end": "1522860"
  },
  {
    "text": "no matter how we insert or delete data from the tree we have 100 Leafs we'll",
    "start": "1522860",
    "end": "1529430"
  },
  {
    "text": "have 99 nodes so that's that gives us a",
    "start": "1529430",
    "end": "1535790"
  },
  {
    "text": "hint that if we can somehow establish a permanent relationship between the nodes and the Leafs",
    "start": "1535790",
    "end": "1541280"
  },
  {
    "text": "and if we can somehow cheat on that one one off we might be able to reduce the",
    "start": "1541280",
    "end": "1548690"
  },
  {
    "text": "number of memory operations by half and that's this is this is a diagram of how",
    "start": "1548690",
    "end": "1554810"
  },
  {
    "text": "we define our eb-3 node a node node",
    "start": "1554810",
    "end": "1561800"
  },
  {
    "text": "parent pointer a bit counter a left and a right pointer for the children of the",
    "start": "1561800",
    "end": "1567830"
  },
  {
    "text": "node key data and the parent pointer for the for the key for the leaf so when we",
    "start": "1567830",
    "end": "1578030"
  },
  {
    "text": "tie those two together if we continue building upon our example we can combine",
    "start": "1578030",
    "end": "1585050"
  },
  {
    "text": "them together somehow like this and now here we see that every leaf has an",
    "start": "1585050",
    "end": "1592430"
  },
  {
    "text": "Associated node with it only the first one doesn't so we're cheating with that one but the",
    "start": "1592430",
    "end": "1602799"
  },
  {
    "text": "takeaway is that with this we can",
    "start": "1602799",
    "end": "1608240"
  },
  {
    "text": "establish by establishing a permanent relationship between the nodes and the",
    "start": "1608240",
    "end": "1613759"
  },
  {
    "text": "leaves we just solve our problem with memory management to take a look at how",
    "start": "1613759",
    "end": "1622220"
  },
  {
    "start": "1620000",
    "end": "1787000"
  },
  {
    "text": "this actually works in practice how this relationship between the node and the leaf that we just established remains",
    "start": "1622220",
    "end": "1628789"
  },
  {
    "text": "holding we're going to take a look at the inserting procedure so if we start",
    "start": "1628789",
    "end": "1634730"
  },
  {
    "text": "with a tree root just a pointer pointing to the highest node in the tree",
    "start": "1634730",
    "end": "1640779"
  },
  {
    "text": "initially with an empty tree it would be entry empty and after adding the first",
    "start": "1640779",
    "end": "1647299"
  },
  {
    "text": "element in our case the element with the key value of 1 we only need to connect",
    "start": "1647299",
    "end": "1655519"
  },
  {
    "text": "the 3 pointer to 3 root pointer to the leaf and this is the node point node",
    "start": "1655519",
    "end": "1661909"
  },
  {
    "text": "part which we are cheating on this is the node part that's not going to be used and we're done thank you for coming",
    "start": "1661909",
    "end": "1671980"
  },
  {
    "text": "and just joking if we add the second node we're gonna",
    "start": "1671980",
    "end": "1677600"
  },
  {
    "text": "see that this is where we are using both the node and the leaf part of the data",
    "start": "1677600",
    "end": "1683240"
  },
  {
    "text": "structure between where we just define and here we're just reassigning the pointers back and forth it kind of looks",
    "start": "1683240",
    "end": "1690529"
  },
  {
    "text": "confusing but if we zoom out this is the structure that we achieved so we have",
    "start": "1690529",
    "end": "1696679"
  },
  {
    "text": "the first element with an unused point with an unused node part and we have the",
    "start": "1696679",
    "end": "1701869"
  },
  {
    "text": "second element with the key value of 2 which has both its node and it's leaf",
    "start": "1701869",
    "end": "1708889"
  },
  {
    "text": "parts used so we can continue we can add",
    "start": "1708889",
    "end": "1714110"
  },
  {
    "text": "a third and what happens here is that",
    "start": "1714110",
    "end": "1719769"
  },
  {
    "text": "we're going to be inserting the third node with the key value of 3 or again",
    "start": "1719769",
    "end": "1725960"
  },
  {
    "text": "we're gonna be using both its node and its leaf part but interestingly the note part for the third element is",
    "start": "1725960",
    "end": "1732440"
  },
  {
    "text": "gonna insert itself between the note part and the leaf part of the key and",
    "start": "1732440",
    "end": "1737649"
  },
  {
    "text": "with and the structure of the with the value two so if we zoom out this is what",
    "start": "1737649",
    "end": "1744260"
  },
  {
    "text": "it looks like and this is how logically the if we just observe the element to",
    "start": "1744260",
    "end": "1750830"
  },
  {
    "text": "the parts of the data structure logically just apart because we've started inserting other ones in between",
    "start": "1750830",
    "end": "1757970"
  },
  {
    "text": "them as indicated by the point point of errors as well but the takeaway here is",
    "start": "1757970",
    "end": "1764720"
  },
  {
    "text": "that the note in the leaf part of the elements number two are still the same",
    "start": "1764720",
    "end": "1770269"
  },
  {
    "text": "contiguous memory area allocated at once and we just keep using it like that and",
    "start": "1770269",
    "end": "1777130"
  },
  {
    "text": "if we can delete it at once and deallocate it advance then our problem",
    "start": "1777130",
    "end": "1782870"
  },
  {
    "text": "with memory management is completely solved if we continue adding more",
    "start": "1782870",
    "end": "1788600"
  },
  {
    "start": "1787000",
    "end": "1905000"
  },
  {
    "text": "elements at the element with number four and number five we're going to end up with something like this and here we",
    "start": "1788600",
    "end": "1796309"
  },
  {
    "text": "again we see that the element to the key 4 has had its node and leaf parts",
    "start": "1796309",
    "end": "1801340"
  },
  {
    "text": "logically drifted further apart but also here on the illustration we're showing",
    "start": "1801340",
    "end": "1808130"
  },
  {
    "text": "the use for the bit value and the bit value just tells us which is the first",
    "start": "1808130",
    "end": "1815120"
  },
  {
    "text": "bit from the end of the key where the data starts to differ between the left",
    "start": "1815120",
    "end": "1820220"
  },
  {
    "text": "and the right branch between the Leafs i've written out the values for the keys",
    "start": "1820220",
    "end": "1825799"
  },
  {
    "text": "in binary and if we take a look between the left and the right side of the tree",
    "start": "1825799",
    "end": "1831580"
  },
  {
    "text": "the third bit from the bottom is one where the difference start all the bits",
    "start": "1831580",
    "end": "1838010"
  },
  {
    "text": "leading up to the third bit from the from the end they're all 0 and the third",
    "start": "1838010",
    "end": "1843830"
  },
  {
    "text": "bit has the value of 0 for the left side of the tree and the value of 1 for the",
    "start": "1843830",
    "end": "1850070"
  },
  {
    "text": "right side of the tree and as we go down the same holds true for every node so if",
    "start": "1850070",
    "end": "1858649"
  },
  {
    "text": "you go one level down the difference starts four elements one",
    "start": "1858649",
    "end": "1864649"
  },
  {
    "text": "two and three at the second beat from the right the second bit from the last all the ones leading up to it are the",
    "start": "1864649",
    "end": "1871370"
  },
  {
    "text": "same and the element one has zero so it goes to the left and the elements two",
    "start": "1871370",
    "end": "1878210"
  },
  {
    "text": "and three they have the one at this bit position so they go to the right",
    "start": "1878210",
    "end": "1884289"
  },
  {
    "text": "finally elements two and three have only one bit of difference and that one bit",
    "start": "1885190",
    "end": "1892309"
  },
  {
    "text": "of difference is at the end and the same can be said for beats four and five all",
    "start": "1892309",
    "end": "1898250"
  },
  {
    "text": "the ones leading up to it are the same and just last bit is different so the",
    "start": "1898250",
    "end": "1906200"
  },
  {
    "start": "1905000",
    "end": "2024000"
  },
  {
    "text": "deletion the deletion in our case is likely going to start with deleting the",
    "start": "1906200",
    "end": "1911779"
  },
  {
    "text": "first element the smallest one because that's going to be the task that we want to run the soonest so we're going to",
    "start": "1911779",
    "end": "1917450"
  },
  {
    "text": "want to remove it from the scheduler the first remember that this first task also",
    "start": "1917450",
    "end": "1922490"
  },
  {
    "text": "has the onions note part associated with it and if we can delete it will the",
    "start": "1922490",
    "end": "1930019"
  },
  {
    "text": "delicate both the northern the leaf part is at the same time and in order to",
    "start": "1930019",
    "end": "1935330"
  },
  {
    "text": "delete it we'll just take it it's sibling and we're going to connect it to",
    "start": "1935330",
    "end": "1941539"
  },
  {
    "text": "it grandparent by doing that the node",
    "start": "1941539",
    "end": "1949159"
  },
  {
    "text": "part of the element number two is no one we're going to be accessible from the root of the tree so it's still allocated",
    "start": "1949159",
    "end": "1956899"
  },
  {
    "text": "but it's no longer in use and it becomes that minus one that cheating element",
    "start": "1956899",
    "end": "1962630"
  },
  {
    "text": "that we used earlier and we don't have to worry about it",
    "start": "1962630",
    "end": "1967669"
  },
  {
    "text": "because it's going to be removed at the same time when we extract the element number two from the tree and delete",
    "start": "1967669",
    "end": "1974600"
  },
  {
    "text": "deallocate its entire memory structure and all throughout this process we only",
    "start": "1974600",
    "end": "1981080"
  },
  {
    "text": "had to reassign two pointers the parent and the left pointer from the",
    "start": "1981080",
    "end": "1987400"
  },
  {
    "text": "grandparent and we end up with a tree",
    "start": "1987400",
    "end": "1993750"
  },
  {
    "text": "again that has the property of having n leaves and n minus n minus one nodes so",
    "start": "1993750",
    "end": "2003570"
  },
  {
    "text": "we solved the problem of memory allocations but what can we do about our tree potentially being unbalanced",
    "start": "2003570",
    "end": "2011210"
  },
  {
    "text": "compared to a salvarsan tree we might end up with five or six times more operations to search a value in the tree",
    "start": "2011360",
    "end": "2018480"
  },
  {
    "text": "and the solution is we'll just make everything five or six times faster and",
    "start": "2018480",
    "end": "2026210"
  },
  {
    "start": "2024000",
    "end": "2038000"
  },
  {
    "text": "how do we do that let's take a take a look at some tools that we use in the",
    "start": "2026270",
    "end": "2032250"
  },
  {
    "text": "implementation to make up for that potential loss of speed in some corner cases one of the first is the use of",
    "start": "2032250",
    "end": "2042929"
  },
  {
    "start": "2038000",
    "end": "2099000"
  },
  {
    "text": "pointer tagging and this is the property we are taking advantage of the property",
    "start": "2042929",
    "end": "2048990"
  },
  {
    "text": "of modern architectures that contain byte addressable memory their pointer",
    "start": "2048990",
    "end": "2054750"
  },
  {
    "text": "addresses are in bytes but when allocating memory we only ever allocate",
    "start": "2054750",
    "end": "2059940"
  },
  {
    "text": "in word sizes and align to word sizes so for 32-bit architectures the word size",
    "start": "2059940",
    "end": "2067320"
  },
  {
    "text": "is four bytes and for 64-bit architectures the word size is 8 bytes which means that we're never going to",
    "start": "2067320",
    "end": "2072868"
  },
  {
    "text": "get an address from our memory allocation that has any of the last 3 bits nonzero in the case of 64-bit and",
    "start": "2072869",
    "end": "2081960"
  },
  {
    "text": "i've we have some example pointers here with their bit values and these last 3",
    "start": "2081960",
    "end": "2087628"
  },
  {
    "text": "bits and every one they're free for the taking we can store any 3 bit values in them and as long as we clear them before the",
    "start": "2087629",
    "end": "2095070"
  },
  {
    "text": "referencing the pointer everything is going to work fine",
    "start": "2095070",
    "end": "2099560"
  },
  {
    "start": "2099000",
    "end": "2230000"
  },
  {
    "text": "another thing is and this is a humorous observation by Lily and we use it quite",
    "start": "2100859",
    "end": "2106020"
  },
  {
    "text": "a lot and that's that C is a portable assembler and we can take a look at a",
    "start": "2106020",
    "end": "2113310"
  },
  {
    "text": "couple of examples why this is the case in how we use it the first one is a historical one or a",
    "start": "2113310",
    "end": "2119910"
  },
  {
    "text": "legacy reason and you find it in the code still and this is the Reg Parma compiler directive sorry two bit",
    "start": "2119910",
    "end": "2126450"
  },
  {
    "text": "architectures the CPU only had eight general-purpose registers and the compiler was not likely to use them to",
    "start": "2126450",
    "end": "2133829"
  },
  {
    "text": "exchange data between function calls and instead opted to use the stack but using",
    "start": "2133829",
    "end": "2139500"
  },
  {
    "text": "the stack means the trip to the main memory and then 20 or more nanosecond delay for every operation there so with",
    "start": "2139500",
    "end": "2146579"
  },
  {
    "text": "this we could for 32-bit compilers to if possible at all keep using the mainship",
    "start": "2146579",
    "end": "2152880"
  },
  {
    "text": "general-purpose registers of our cpu currently a 64-bit CPUs have plenty of registers so the compiler should do the",
    "start": "2152880",
    "end": "2160349"
  },
  {
    "text": "right thing even without this then we have forced inlining which is a common",
    "start": "2160349",
    "end": "2165780"
  },
  {
    "text": "programming technique where we just direct the compiler to insert our entire",
    "start": "2165780",
    "end": "2171540"
  },
  {
    "text": "code into another function all the assembler commands without using the",
    "start": "2171540",
    "end": "2176550"
  },
  {
    "text": "stack we have a ----builtin expect compiler directive as well and this one",
    "start": "2176550",
    "end": "2181829"
  },
  {
    "text": "is interesting it directs it tells us that it tells the compiler which what do",
    "start": "2181829",
    "end": "2187050"
  },
  {
    "text": "we think which is the most likely branch in code pass that is going to be happening in our program as it runs and",
    "start": "2187050",
    "end": "2193099"
  },
  {
    "text": "then the compiler takes the assembler commands for that most likely code pass after an if statement or for example and",
    "start": "2193099",
    "end": "2200460"
  },
  {
    "text": "lays those commands sequentially so then we no longer have to rely on processor branch prediction to make the right",
    "start": "2200460",
    "end": "2206700"
  },
  {
    "text": "choice the commands that we know are most likely to be executed are already",
    "start": "2206700",
    "end": "2213690"
  },
  {
    "text": "pre-loaded in the cpu instruction cache and are going to be most likely executed",
    "start": "2213690",
    "end": "2219180"
  },
  {
    "text": "every time correctly lastly we can always resort to writing assembler code",
    "start": "2219180",
    "end": "2224550"
  },
  {
    "text": "ourselves and that's what we do in a couple of performance critical places so",
    "start": "2224550",
    "end": "2231030"
  },
  {
    "start": "2230000",
    "end": "2301000"
  },
  {
    "text": "taking a look at what we end up with our",
    "start": "2231030",
    "end": "2236630"
  },
  {
    "text": "node design translates directly into C code we have branches we have the bit",
    "start": "2236630",
    "end": "2243760"
  },
  {
    "text": "we have the note parent pointer and an old leaf pointer but the thing that we don't have here is the data or the key",
    "start": "2243760",
    "end": "2250960"
  },
  {
    "text": "and this is because this is the base track which we can use for implementing",
    "start": "2250960",
    "end": "2256320"
  },
  {
    "text": "different eb-3 variants that then implement a particular data type and",
    "start": "2256320",
    "end": "2262320"
  },
  {
    "text": "with the base node definition we can also have base functions and here I've",
    "start": "2262320",
    "end": "2268930"
  },
  {
    "text": "highlighted one where we use pointer tagging a lot and we can use it to check",
    "start": "2268930",
    "end": "2275109"
  },
  {
    "text": "whether the note that we're pointing to is a left or right note or we can use it",
    "start": "2275109",
    "end": "2282880"
  },
  {
    "text": "to check whether the node were pointing to is a leaf or a child or a different",
    "start": "2282880",
    "end": "2289030"
  },
  {
    "text": "node on Klink node and that saves us a trip to the reference the pointer and",
    "start": "2289030",
    "end": "2295119"
  },
  {
    "text": "take a look at the node from the main memory because we already have the data within the pointer so some of the eb3",
    "start": "2295119",
    "end": "2303760"
  },
  {
    "start": "2301000",
    "end": "2343000"
  },
  {
    "text": "data types relying on these base functions and structs are a type that",
    "start": "2303760",
    "end": "2309700"
  },
  {
    "text": "stores 32-bit integers and the type toward 64-bit integers we have one that",
    "start": "2309700",
    "end": "2315670"
  },
  {
    "text": "used for pointers we have indirect memory and strings and or memory blocks",
    "start": "2315670",
    "end": "2322420"
  },
  {
    "text": "and strings the variants are different in such a way that one stores pointers",
    "start": "2322420",
    "end": "2327970"
  },
  {
    "text": "and the water on storage hunters with with memory blocks contiguously allocated immediately after the data of",
    "start": "2327970",
    "end": "2335920"
  },
  {
    "text": "the node and all of them have the",
    "start": "2335920",
    "end": "2341740"
  },
  {
    "text": "support for the same set of functions in a be 64 node looks like this and it's",
    "start": "2341740",
    "end": "2349750"
  },
  {
    "start": "2343000",
    "end": "2476000"
  },
  {
    "text": "very simple it just contains the already I mentioned basic node part and then the key following it the functions that are",
    "start": "2349750",
    "end": "2358510"
  },
  {
    "text": "different between the various tree implementations are the ones regarding",
    "start": "2358510",
    "end": "2364119"
  },
  {
    "text": "insertion and lookup of keys because this is where the key start to matter all the other find next node delete node",
    "start": "2364119",
    "end": "2372280"
  },
  {
    "text": "traverse the tree they can be performed without ever the key part but the key being different",
    "start": "2372280",
    "end": "2379819"
  },
  {
    "text": "between 32-bit Keys 64-bit keys strings and memory blocks as where we have different functions that implement",
    "start": "2379819",
    "end": "2386079"
  },
  {
    "text": "lookups and insert and the lookup code",
    "start": "2386079",
    "end": "2391729"
  },
  {
    "text": "is basically the one that's being used for inserts as well only the because we",
    "start": "2391729",
    "end": "2398029"
  },
  {
    "text": "still need to find even when inserting we still need to find the location the three where we're going to insert the",
    "start": "2398029",
    "end": "2403190"
  },
  {
    "text": "data here the code is also relatively",
    "start": "2403190",
    "end": "2411890"
  },
  {
    "text": "simple if we find the leaf then we check that the code that the key is the food",
    "start": "2411890",
    "end": "2417769"
  },
  {
    "text": "the key is completely the same as the one that we're searching for and we can return the node if not we find the",
    "start": "2417769",
    "end": "2426229"
  },
  {
    "text": "difference in bits between the key that we're searching for and the one that we stumbled upon as we were traversing that",
    "start": "2426229",
    "end": "2433099"
  },
  {
    "text": "the key here's where we use the bits",
    "start": "2433099",
    "end": "2438109"
  },
  {
    "text": "value to mask out all the bits that we are not in the key being searched for",
    "start": "2438109",
    "end": "2444170"
  },
  {
    "text": "they were not interested at this step of traversal through the tree and this is",
    "start": "2444170",
    "end": "2449599"
  },
  {
    "text": "where we can confirm whether everything up to this particular node shares the same prefix or not if it doesn't you",
    "start": "2449599",
    "end": "2457130"
  },
  {
    "text": "just return null because it's not possible for the data to be contained in",
    "start": "2457130",
    "end": "2462440"
  },
  {
    "text": "this tree but if it is there's only one bit of difference then this is the bit",
    "start": "2462440",
    "end": "2468499"
  },
  {
    "text": "that tells us is it the left side of the tree or the right side of the tree that we need to descend next so that's how we",
    "start": "2468499",
    "end": "2478729"
  },
  {
    "start": "2476000",
    "end": "2598000"
  },
  {
    "text": "defined our eb-3 code and then now let's",
    "start": "2478729",
    "end": "2484039"
  },
  {
    "text": "take a look at what it looks like with in nature proxy scheduler so we already mentioned the tasks they have they can",
    "start": "2484039",
    "end": "2490999"
  },
  {
    "text": "be active or suspended they have some code and they have some timestamp and",
    "start": "2490999",
    "end": "2496180"
  },
  {
    "text": "we're going to have to have a group of suspended tasks so this is very high",
    "start": "2496180",
    "end": "2501550"
  },
  {
    "text": "and eb-3 English index and expiration date for those tasks industry and we're",
    "start": "2501550",
    "end": "2507550"
  },
  {
    "text": "going to have a group of activity across proxy tasks again a different a b-tree",
    "start": "2507550",
    "end": "2512850"
  },
  {
    "text": "index and expiration date but this time we're going to take into account a priority as well as we can shift those",
    "start": "2512850",
    "end": "2519790"
  },
  {
    "text": "more important tasks to be plucked out sooner and processed sooner if we now",
    "start": "2519790",
    "end": "2527320"
  },
  {
    "text": "combine all the stuff that we talked about and imagined into a more elaborate and more lifelike diagram and we get",
    "start": "2527320",
    "end": "2535330"
  },
  {
    "text": "something like this we have any i/o scheduler a pole or whatever reacting to",
    "start": "2535330",
    "end": "2540820"
  },
  {
    "text": "changes in the active connections the ones that have some data I get their data filled into buffers and some tasks",
    "start": "2540820",
    "end": "2549130"
  },
  {
    "text": "get created to process those buffers those tasks run until exhausting their",
    "start": "2549130",
    "end": "2555250"
  },
  {
    "text": "buffer data and then they get put into wait queue and occasionally we can check",
    "start": "2555250",
    "end": "2560619"
  },
  {
    "text": "on that wait queue or if the connection gets dropped or whatever we can direct",
    "start": "2560619",
    "end": "2566020"
  },
  {
    "text": "to look up that task in the wait queuing just terminate it there it's a proxy",
    "start": "2566020",
    "end": "2572320"
  },
  {
    "text": "event loop this was a diagram of it does exactly the same thing and this is almost the same code that you will find",
    "start": "2572320",
    "end": "2579190"
  },
  {
    "text": "I've just redacted it for readability a bit we have the function that runs the",
    "start": "2579190",
    "end": "2585520"
  },
  {
    "text": "active tasks we have the part that wakes up any tasks from the wait queue that",
    "start": "2585520",
    "end": "2590740"
  },
  {
    "text": "need to run next and then we have the part that takes care of network connections and that's it our tasks look",
    "start": "2590740",
    "end": "2603359"
  },
  {
    "start": "2598000",
    "end": "2665000"
  },
  {
    "text": "like this we have the entries for being inserted into either the EBIT we know",
    "start": "2603359",
    "end": "2609670"
  },
  {
    "text": "that we just called it we just pointed out we have the function pointer for the",
    "start": "2609670",
    "end": "2616000"
  },
  {
    "text": "processing code for the for this particular task we have the expiry date",
    "start": "2616000",
    "end": "2622200"
  },
  {
    "text": "we can schedule them by inserting into the wait queue we can wake them up by",
    "start": "2622200",
    "end": "2629109"
  },
  {
    "text": "looking them up in the wait queue and then modifying their expiry time buy some",
    "start": "2629109",
    "end": "2635030"
  },
  {
    "text": "nice value and then just insert it into the run queue in the run queue we just",
    "start": "2635030",
    "end": "2641930"
  },
  {
    "text": "take a look at which one is the lowest which one is the soonest their earliest",
    "start": "2641930",
    "end": "2647000"
  },
  {
    "text": "one with we access its entire struct so",
    "start": "2647000",
    "end": "2653750"
  },
  {
    "text": "that we can get its processing function pointer we invoke that and if the tasks",
    "start": "2653750",
    "end": "2660260"
  },
  {
    "text": "still needs to run we just queue it back into the waiting task list but it's not",
    "start": "2660260",
    "end": "2667579"
  },
  {
    "text": "all where we use EB trees we use it for time and run schedules but we also use",
    "start": "2667579",
    "end": "2673099"
  },
  {
    "text": "it for ACLs and it's useful because there we can rely on the prefix matching to match IP address subnet to record IP",
    "start": "2673099",
    "end": "2682700"
  },
  {
    "text": "addresses we use it for stick tables this is where we store stat counters",
    "start": "2682700",
    "end": "2689230"
  },
  {
    "text": "values related to process HTTP requests and we also use it for an hour LRU cache",
    "start": "2689230",
    "end": "2696200"
  },
  {
    "text": "in HT proxy we have zero maintenance small and fast LRU cache which we use to",
    "start": "2696200",
    "end": "2702710"
  },
  {
    "text": "call favicon cache just as an additional way to help out the backend performance",
    "start": "2702710",
    "end": "2711578"
  },
  {
    "text": "so performance of DB trees depending on",
    "start": "2712030",
    "end": "2717770"
  },
  {
    "start": "2713000",
    "end": "2781000"
  },
  {
    "text": "conditions the CPU type and whatever in ideal conditions we can get down to 100",
    "start": "2717770",
    "end": "2723079"
  },
  {
    "text": "nanoseconds per insert and this allows the cheap proxy to process more than 200",
    "start": "2723079",
    "end": "2728300"
  },
  {
    "text": "thousand TCP connections per second or more than 350 K HTTP requests per second",
    "start": "2728300",
    "end": "2734329"
  },
  {
    "text": "when we enable connection keep alive all throughout that are each a proxy",
    "start": "2734329",
    "end": "2740480"
  },
  {
    "text": "scheduler is using only to three to five percent of the CPU the rest of it is taken up by the remainder of the",
    "start": "2740480",
    "end": "2746930"
  },
  {
    "text": "processing tasks we have a utility in the HT proxy source code that's used to",
    "start": "2746930",
    "end": "2752089"
  },
  {
    "text": "parse default HT proxy logs and indexed and searched to them that one runs up to",
    "start": "2752089",
    "end": "2760160"
  },
  {
    "text": "four million logs lines per second that's in part thanks to EB trees and if",
    "start": "2760160",
    "end": "2767369"
  },
  {
    "text": "we insert 450 kb GP routes into an EB treat in 20 B tree we can get more than",
    "start": "2767369",
    "end": "2775650"
  },
  {
    "text": "two million hookups per second out of it so that's where we ended up we're gonna",
    "start": "2775650",
    "end": "2782460"
  },
  {
    "text": "skip the LRU cache implementation walkthrough because it's just as simple even more so than the one that we talked",
    "start": "2782460",
    "end": "2790319"
  },
  {
    "text": "about for the a proxy scheduler and you can find the code for it in the code of",
    "start": "2790319",
    "end": "2796380"
  },
  {
    "text": "the EB tree as an example the code there is almost the same as the code in a chip",
    "start": "2796380",
    "end": "2803249"
  },
  {
    "text": "proxy so what did we end up with we",
    "start": "2803249",
    "end": "2808499"
  },
  {
    "start": "2807000",
    "end": "2879000"
  },
  {
    "text": "found if we find that we've ended up with a pretty nice tree implementation but it's not just that we didn't take",
    "start": "2808499",
    "end": "2818630"
  },
  {
    "text": "the existing implementations as something that cannot be improved upon",
    "start": "2818630",
    "end": "2825890"
  },
  {
    "text": "we take we took a look at what we can",
    "start": "2825890",
    "end": "2831029"
  },
  {
    "text": "find out there has an existing solution we took it apart we found ways to",
    "start": "2831029",
    "end": "2838859"
  },
  {
    "text": "improve it both of rhythmically and through implementation that's strictly",
    "start": "2838859",
    "end": "2845130"
  },
  {
    "text": "tailored to our environment and we got a",
    "start": "2845130",
    "end": "2850309"
  },
  {
    "text": "good result out of that so you can check",
    "start": "2850309",
    "end": "2855869"
  },
  {
    "text": "out EB tree at the eb-3 repo you can check out teacher proxy at a tree proxy",
    "start": "2855869",
    "end": "2862259"
  },
  {
    "text": "the orb or a cheap proxy calm you can chat with developers at each",
    "start": "2862259",
    "end": "2867630"
  },
  {
    "text": "approximating list or just email me directly and if you have any questions",
    "start": "2867630",
    "end": "2874529"
  },
  {
    "text": "feel free to ask them [Applause]",
    "start": "2874529",
    "end": "2881349"
  }
]