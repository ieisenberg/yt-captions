[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "my name is Martin Chapman you might know me from this book that I published about",
    "start": "4150",
    "end": "9460"
  },
  {
    "text": "a year ago called designing data intensive applications this book is not about CRD T's instead it's a very broad",
    "start": "9460",
    "end": "16028"
  },
  {
    "text": "overview of the architecture of large-scale data systems and problems of distributed systems what I'm going to",
    "start": "16029",
    "end": "22990"
  },
  {
    "text": "talk about today is a different area so I am a researcher at the University of",
    "start": "22990",
    "end": "28720"
  },
  {
    "text": "Cambridge except today actually I am formerly on strike you might have you",
    "start": "28720",
    "end": "35410"
  },
  {
    "text": "might have gathered I mean this seriously does there's a dispute going on at the moment at many UK universities",
    "start": "35410",
    "end": "41080"
  },
  {
    "text": "where the powers that be want to essentially cut back our pension schemes in a very radical and unjustified way",
    "start": "41080",
    "end": "47670"
  },
  {
    "text": "which amounts to a massive pay cut and really is not justified so as part of",
    "start": "47670",
    "end": "52990"
  },
  {
    "text": "this I am on strike I'm still going to give to talk to you because our we have no problems with koukin it's our",
    "start": "52990",
    "end": "59470"
  },
  {
    "text": "university that we have a problem with but just to say that I am giving this talk as a private individual who happens",
    "start": "59470",
    "end": "66490"
  },
  {
    "text": "to be interested in distributed systems rather than ok so let's talk about some",
    "start": "66490",
    "end": "77799"
  },
  {
    "start": "76000",
    "end": "145000"
  },
  {
    "text": "technical stuff so what I'd like to talk about is collaborative applications and so a classic example of this would be",
    "start": "77799",
    "end": "84969"
  },
  {
    "text": "Google Docs so there as you know you can have several people who can all collaborate in a document they can edit",
    "start": "84969",
    "end": "91060"
  },
  {
    "text": "the document at the same time without having to email this back and forth which is very convenient now what we",
    "start": "91060",
    "end": "97749"
  },
  {
    "text": "want in this kind of systems is that eventually like even though several people might be editing the document at",
    "start": "97749",
    "end": "103960"
  },
  {
    "text": "the same time they should all end up with the same document on their screen at the end so this is what we call a",
    "start": "103960",
    "end": "109899"
  },
  {
    "text": "convergence property everyone should end up as they communicate having the same",
    "start": "109899",
    "end": "114909"
  },
  {
    "text": "state so if you were here this morning Heidi Howard gave a great talk on consensus which is also about getting",
    "start": "114909",
    "end": "122170"
  },
  {
    "text": "several nodes in the distributed system to agree on something and so it looks like superficially the problem that we",
    "start": "122170",
    "end": "128770"
  },
  {
    "text": "have here is kind of similar to consensus so as we'll explain later in",
    "start": "128770",
    "end": "133930"
  },
  {
    "text": "this talk act this is a very different kind of problem even though it looks superficially similar the properties that it has are",
    "start": "133930",
    "end": "140430"
  },
  {
    "text": "fundamentally different and comparing those two will be an interesting part of this talk okay so let's take a scenario",
    "start": "140430",
    "end": "147120"
  },
  {
    "start": "145000",
    "end": "232000"
  },
  {
    "text": "that is probably familiar to you this is you a little blue stick figure who is",
    "start": "147120",
    "end": "152370"
  },
  {
    "text": "hacking on some code on your laptop and you make some changes you edit some source files you save them to your local",
    "start": "152370",
    "end": "158340"
  },
  {
    "text": "disk at some point you decide you're ready to share this code with your colleagues and so you commit it to your",
    "start": "158340",
    "end": "164820"
  },
  {
    "text": "favorite version control system and then you maybe push it to a centralized repository maybe to github or something",
    "start": "164820",
    "end": "170760"
  },
  {
    "text": "like that some mechanism by which you can send your commits to your co-workers and so",
    "start": "170760",
    "end": "176490"
  },
  {
    "text": "at the same time while you've been editing the code maybe your colleague who is this pink stick figure has also",
    "start": "176490",
    "end": "183270"
  },
  {
    "text": "been editing the code has also been changing it maybe also making commits and what you end up now with is that if",
    "start": "183270",
    "end": "190410"
  },
  {
    "text": "this colleague wants to also push their changes to the server they will first have to fetch that the commit that you",
    "start": "190410",
    "end": "195900"
  },
  {
    "text": "pushed and have to merge those together and so as you've probably experienced before this kind of merge it's",
    "start": "195900",
    "end": "202980"
  },
  {
    "text": "straightforward if you were editing two different files because in that case get just knows well two different files I'm",
    "start": "202980",
    "end": "208350"
  },
  {
    "text": "just going to merge them together those changes are independent if one of you changed the top of a file and the other",
    "start": "208350",
    "end": "214680"
  },
  {
    "text": "one changed the bottom of the same file then that's probably still fine as well because the changes are fine up in the",
    "start": "214680",
    "end": "220320"
  },
  {
    "text": "part a part in the file that git just says okay I'll merge those automatically but if you were editing actually the",
    "start": "220320",
    "end": "226800"
  },
  {
    "text": "same lines then you've got a merge conflict that you need to resolve manually so if we look at this kind of",
    "start": "226800",
    "end": "233160"
  },
  {
    "text": "system more abstractly you can say there are a couple of nodes these might be like your laptop and your phone or they",
    "start": "233160",
    "end": "240000"
  },
  {
    "text": "might be servers in a data center we don't really care too much there's some kind of computing nodes each of which can store some data and when you want to",
    "start": "240000",
    "end": "247440"
  },
  {
    "text": "edit that data you make a change to your local copy which might like in the case of the source code is the source code",
    "start": "247440",
    "end": "253410"
  },
  {
    "text": "files living on your local hard disk you change that and then at some point those changes get communicated to anyone else",
    "start": "253410",
    "end": "260820"
  },
  {
    "text": "who also has a copy of that data so to any other nodes and so while this is",
    "start": "260820",
    "end": "265830"
  },
  {
    "text": "going on maybe a purple user can simultaneously in making some change to their copy of",
    "start": "265830",
    "end": "270970"
  },
  {
    "text": "the data and they similarly will then forward on those changes to the other users and so whether these these changes",
    "start": "270970",
    "end": "278740"
  },
  {
    "text": "here are like wire gets pushed by this kind of explicit operation or if you're using Google Docs these kind of changes",
    "start": "278740",
    "end": "285100"
  },
  {
    "text": "are sent automatically continuously in the background so in the case of Google Docs this the local copy that you apply",
    "start": "285100",
    "end": "292840"
  },
  {
    "text": "the changes to is living in memory in your web browser so in the tab that you've opened the Google Doc in when you",
    "start": "292840",
    "end": "299740"
  },
  {
    "text": "type a letter and you change the document that's change gets immediately applied to your local copy of the",
    "start": "299740",
    "end": "306340"
  },
  {
    "text": "document so it doesn't wait for a round-trip to the server before showing the letter that you just typed on your",
    "start": "306340",
    "end": "311710"
  },
  {
    "text": "own screen because that would take too long so what Google Docs does in that case is it immediately applies the",
    "start": "311710",
    "end": "317710"
  },
  {
    "text": "change locally and then asynchronously in the background which might take a few seconds or whatever it sends on the meta",
    "start": "317710",
    "end": "325330"
  },
  {
    "text": "change to the server will then sir sends on the change to anyone else who's got a copy of that document open and so you",
    "start": "325330",
    "end": "332860"
  },
  {
    "text": "kind of get the same kind of property that several people can make changes independently without knowing about each",
    "start": "332860",
    "end": "338800"
  },
  {
    "text": "other's changes just like you get with gits get commits just on a shorter timescale",
    "start": "338800",
    "end": "343900"
  },
  {
    "text": "but you still have exactly the same concurrency issue in particular this",
    "start": "343900",
    "end": "349120"
  },
  {
    "text": "concurrency issue becomes more obvious if you have offline editing so in this case you can think of this as a network",
    "start": "349120",
    "end": "355600"
  },
  {
    "text": "partition that is separating one of the nodes from the rest of the system and so",
    "start": "355600",
    "end": "360640"
  },
  {
    "text": "the pink user might still be changing the local copy their local copy of the document but they can't send the changes",
    "start": "360640",
    "end": "368289"
  },
  {
    "text": "to any of the other users because they are offline right now they don't have an internet connection or because there's",
    "start": "368289",
    "end": "373600"
  },
  {
    "text": "some network disruption and so in this case the changes will stay local to their own machine and then only sometime",
    "start": "373600",
    "end": "380650"
  },
  {
    "text": "later once the network is restored those changes will then be flushed but what we still want in that case is for those",
    "start": "380650",
    "end": "387070"
  },
  {
    "start": "385000",
    "end": "595000"
  },
  {
    "text": "changes to be merged together so taking this type of type of Google Docs again as an example you can let's take the",
    "start": "387070",
    "end": "394510"
  },
  {
    "text": "state of the thing that is that we're working on as a text document so this is like just a sequence of characters which",
    "start": "394510",
    "end": "401050"
  },
  {
    "text": "currently hello and so you have two users who can currently update this document the pink",
    "start": "401050",
    "end": "407300"
  },
  {
    "text": "user adds the word the word world before the exclamation mark and the blue",
    "start": "407300",
    "end": "412610"
  },
  {
    "text": "user adds a smiley face after the exclamation mark and so now if this was gits this would probably be a merge",
    "start": "412610",
    "end": "419480"
  },
  {
    "text": "conflict that you would have to resolve manually but if you tried this kind of thing in Google Docs it turns out that",
    "start": "419480",
    "end": "425120"
  },
  {
    "text": "actually Google Docs never prompts you to to resolve a merge conflict it will",
    "start": "425120",
    "end": "430160"
  },
  {
    "text": "always just merge the changes automatically based on what it thinks is a sensible way of merging this and in",
    "start": "430160",
    "end": "436669"
  },
  {
    "text": "this case we can actually define quite a sensible way of merging it because we can say well the world clearly came",
    "start": "436669",
    "end": "442520"
  },
  {
    "text": "before the exclamation mark the smiley face came after the exclamation mark so we could just preserve both of those insertions and so a final sensible final",
    "start": "442520",
    "end": "450560"
  },
  {
    "text": "merged state is hello world exclamation mark smiley and this is in fact what",
    "start": "450560",
    "end": "455630"
  },
  {
    "text": "what Google Docs will do but we're not limited to only text documents so let's look at a different data type you could",
    "start": "455630",
    "end": "461840"
  },
  {
    "text": "use a set for example so a set is just some unordered collection of elements and you could have the read user maybe",
    "start": "461840",
    "end": "469100"
  },
  {
    "text": "removes the item B from the set so it was previously a B removes B so only a",
    "start": "469100",
    "end": "474229"
  },
  {
    "text": "is left and concurrently while that is happening the purple user decides to add a new",
    "start": "474229",
    "end": "479990"
  },
  {
    "text": "element C to the set written here with that set Union operator so the set then",
    "start": "479990",
    "end": "485330"
  },
  {
    "text": "is merged ABC so as those two changes get propagated from one node to the",
    "start": "485330",
    "end": "491539"
  },
  {
    "text": "other again we can set just define what we consider to be a sensible merged outcome and in this case I'm going to",
    "start": "491539",
    "end": "498020"
  },
  {
    "text": "say well a was not touched by either user so we're just going to leave a there B was removed by all of the users",
    "start": "498020",
    "end": "504139"
  },
  {
    "text": "C was added by one of the users so we want in the final state to contain C but not B and so we just say a and C is a",
    "start": "504139",
    "end": "511220"
  },
  {
    "text": "sensible merged outcome in this case one more example I consider a counter so",
    "start": "511220",
    "end": "518959"
  },
  {
    "text": "maybe like the number of likes on a Facebook post or something like that would be a counter that you can",
    "start": "518959",
    "end": "524089"
  },
  {
    "text": "increment and so here let's say we're starting in the initial state where the",
    "start": "524089",
    "end": "529490"
  },
  {
    "text": "counter value is one and you have two users who are both increment that counter so they both chained",
    "start": "529490",
    "end": "535550"
  },
  {
    "text": "the value from 1 to 2 now you could say that's well both us design the same",
    "start": "535550",
    "end": "540709"
  },
  {
    "text": "state so we should just continue we should just consider 2 to be the merged",
    "start": "540709",
    "end": "545720"
  },
  {
    "text": "final states but that would actually lose information because here we know from inspecting the chain the set of",
    "start": "545720",
    "end": "553160"
  },
  {
    "text": "changes that happened that actually to increment operations happened so really what we want is for both increment",
    "start": "553160",
    "end": "560750"
  },
  {
    "text": "operations to still take effect in the final result so what we want is that the final result is actually three because",
    "start": "560750",
    "end": "566899"
  },
  {
    "text": "we started in one and then one user incremented it the other user incremented it the order in which you do",
    "start": "566899",
    "end": "572329"
  },
  {
    "text": "those two increments doesn't matter but the final value should be three so what this is saying is that we need to",
    "start": "572329",
    "end": "578390"
  },
  {
    "text": "consider not just the state the value at any one time because if we just compare two and two they look the same but",
    "start": "578390",
    "end": "585380"
  },
  {
    "text": "actually we need to capture the sequence of changes that were made to the data and we apply those and that will allow",
    "start": "585380",
    "end": "592279"
  },
  {
    "text": "us to reach a sensible merged outcome okay so this problem of people editing",
    "start": "592279",
    "end": "599269"
  },
  {
    "text": "stuff simultaneously and having to merge it has been studied for a rather long time and they are at a high level to",
    "start": "599269",
    "end": "605120"
  },
  {
    "text": "families of algorithms that were developed one is operational transformation which has been studied by",
    "start": "605120",
    "end": "610760"
  },
  {
    "text": "academics since the late 80s and which is actually the foundation of Google Docs so Google Docs internally uses an",
    "start": "610760",
    "end": "617870"
  },
  {
    "text": "operational transformation algorithm however due to some problems that I'll explain in a minute people got rather",
    "start": "617870",
    "end": "624709"
  },
  {
    "text": "frustrated with operational transformation in the early 2000s and then started this separate direction of",
    "start": "624709",
    "end": "630440"
  },
  {
    "text": "research called conflict-free replicated data types or CRE T's for short and this",
    "start": "630440",
    "end": "636140"
  },
  {
    "text": "is SEO duties has been the focus of our research so let me just give you a bit of historical background because it's",
    "start": "636140",
    "end": "642140"
  },
  {
    "text": "kind of interesting and also some motivation for why we wanted C Aditi's",
    "start": "642140",
    "end": "647600"
  },
  {
    "start": "645000",
    "end": "866000"
  },
  {
    "text": "so as I mentioned a whole bunch of people across research community have",
    "start": "647600",
    "end": "653810"
  },
  {
    "text": "proposed operational transformation algorithms so the first ones in in the late 80s and",
    "start": "653810",
    "end": "659029"
  },
  {
    "text": "you know the paper reads quite nicely and they kind of make sense and looks plausible when you read it except you do",
    "start": "659029",
    "end": "666199"
  },
  {
    "text": "win then realize reading some more papers they're actually a few years after this was published people discovered that",
    "start": "666199",
    "end": "672430"
  },
  {
    "text": "this application was this algorithm was simply wrong so what I mean with wrong is what these algorithms are supposed to",
    "start": "672430",
    "end": "679090"
  },
  {
    "text": "achieve is convergence that is everybody ends up with the same document on their screen at the end if no more edits are",
    "start": "679090",
    "end": "685300"
  },
  {
    "text": "happening however this algorithm did not achieve convergence attacked there were certain edge cases where certain edits",
    "start": "685300",
    "end": "692230"
  },
  {
    "text": "could happen concurrently where you would end up permanently diverged so these two different copies would be",
    "start": "692230",
    "end": "698050"
  },
  {
    "text": "permanently out of sync with each other and never become consistent again so that is kind of a problem so of course",
    "start": "698050",
    "end": "704860"
  },
  {
    "text": "people thought about this a bit harder and proposed another algorithm unfortunately a few years later that one",
    "start": "704860",
    "end": "710260"
  },
  {
    "text": "also turned out to be wrong it's had a very similar bug and this story just kept continuing so over the course of",
    "start": "710260",
    "end": "716530"
  },
  {
    "text": "about two decades all of these algorithms were proposed and then of only a few later few years later to",
    "start": "716530",
    "end": "722020"
  },
  {
    "text": "discover that it's wrong so a real bloodbath of failed algorithms here we",
    "start": "722020",
    "end": "729670"
  },
  {
    "text": "did end up with a couple of algorithms which are correct and in fact Google Docs is based on one of those that is",
    "start": "729670",
    "end": "734830"
  },
  {
    "text": "not wrong but the particular property of those remaining ones is that they",
    "start": "734830",
    "end": "740470"
  },
  {
    "text": "require a centralized server so they restrict the communication flows in the",
    "start": "740470",
    "end": "745870"
  },
  {
    "text": "system so that if the think user here changes something and the purple user has changed it's something the changes",
    "start": "745870",
    "end": "752590"
  },
  {
    "text": "they make have to be exchanged via this central server so it's not allowed for them to have some kind of back channel",
    "start": "752590",
    "end": "758470"
  },
  {
    "text": "or some kind of other communication paths on the side because if they had that they would break the consumptions",
    "start": "758470",
    "end": "764530"
  },
  {
    "text": "of the algorithm and that it would no longer achieve this convergence so this",
    "start": "764530",
    "end": "770470"
  },
  {
    "text": "is a severe restriction here all of the communication has to go by a Google server even if it's just like syncing",
    "start": "770470",
    "end": "776620"
  },
  {
    "text": "some data between your phone and your laptop and they are like 50 centimeters away from each other you still have to",
    "start": "776620",
    "end": "782230"
  },
  {
    "text": "go by a data center in Virginia or whatever which is kind of ridiculous if you think about it so what I'm",
    "start": "782230",
    "end": "788890"
  },
  {
    "text": "interested in is generalizing this model so that actually you can just have any communication topology in the system so",
    "start": "788890",
    "end": "795490"
  },
  {
    "text": "for example if the blue user here has two devices or a phone and a laptop and they want to synchronize some data",
    "start": "795490",
    "end": "802300"
  },
  {
    "text": "the pink use also has two devices well they should just be able to synchronize by our local network or whatever",
    "start": "802300",
    "end": "808770"
  },
  {
    "text": "connectivity they happen to have even if they're actually not connected to the internet right now so this kind of",
    "start": "808770",
    "end": "816550"
  },
  {
    "text": "communication pattern is simply won't work in the google docs case because you cannot safely have this communication",
    "start": "816550",
    "end": "823120"
  },
  {
    "text": "directly between devices without going through the central server so I think",
    "start": "823120",
    "end": "828279"
  },
  {
    "text": "it's it would be really great if applications can not depend on this central server be more decentralized so",
    "start": "828279",
    "end": "836080"
  },
  {
    "text": "that you can actually just use whatever network is available and then at some point later if connectivity is",
    "start": "836080",
    "end": "841899"
  },
  {
    "text": "re-established then of course the node should be able to synchronize again using the Internet so this is a more",
    "start": "841899",
    "end": "849399"
  },
  {
    "text": "kind of decentralized pattern for building applications and when I talk about decentralization people inevitably",
    "start": "849399",
    "end": "856089"
  },
  {
    "text": "ask is that something to do with block chains because because a lot of people",
    "start": "856089",
    "end": "861940"
  },
  {
    "text": "in the blockchain community who are interested in building these these systems without trust in a central",
    "start": "861940",
    "end": "868839"
  },
  {
    "start": "866000",
    "end": "941000"
  },
  {
    "text": "server also label their their work under the heading of decentralization so I'm",
    "start": "868839",
    "end": "876760"
  },
  {
    "text": "personally not all that interested in block chains I'm happy for other people to work on it but let me just compare",
    "start": "876760",
    "end": "883270"
  },
  {
    "text": "the two briefly because it is such a frequently asked question so as you",
    "start": "883270",
    "end": "888430"
  },
  {
    "text": "probably know a block chain consists of some blocks of data each subsequent block contains a hash of the previous",
    "start": "888430",
    "end": "895270"
  },
  {
    "text": "block a cryptographic hash and that means then if you have a signature on the last block you can follow through",
    "start": "895270",
    "end": "900339"
  },
  {
    "text": "the hashes and you're guaranteed the integrity of this entire sequence of blocks and then there might be some ugly",
    "start": "900339",
    "end": "906370"
  },
  {
    "text": "trees and stuff like that which allow you to cryptographically prove that a certain record appears in this chain and",
    "start": "906370",
    "end": "912010"
  },
  {
    "text": "so that's like the foundation for Bitcoin transactions and such like moreover what you have in most of these",
    "start": "912010",
    "end": "918820"
  },
  {
    "text": "blockchain protocols is some kind of consensus protocol which decides what the next block in the chain is going to",
    "start": "918820",
    "end": "925630"
  },
  {
    "text": "be and typically those are Byzantine consensus protocols which just means that they can tolerate some of the nodes",
    "start": "925630",
    "end": "932920"
  },
  {
    "text": "actually being actively malicious and still despite the presence of malicious nodes",
    "start": "932920",
    "end": "937930"
  },
  {
    "text": "this thing will agree on the next block so this agreement property is quite",
    "start": "937930",
    "end": "944200"
  },
  {
    "start": "941000",
    "end": "1082000"
  },
  {
    "text": "strong that you get in block chains so in particular what the protocol is supposed to guarantee is if there are no",
    "start": "944200",
    "end": "951520"
  },
  {
    "text": "Forks you have this linear sequence of blocks it's a totally ordered sequence and there's this decision process which",
    "start": "951520",
    "end": "960310"
  },
  {
    "text": "ensures that no conflicting transactions get put into the same block so what this means is if you're wanting to prevent a",
    "start": "960310",
    "end": "968200"
  },
  {
    "text": "user from spending the same coin twice you have to make a decision as to",
    "start": "968200",
    "end": "973300"
  },
  {
    "text": "whether this transaction or that transaction that they made using the same coin is the valid one so what you",
    "start": "973300",
    "end": "979060"
  },
  {
    "text": "need here is consensus which if there are several conflicting proposed transactions",
    "start": "979060",
    "end": "984430"
  },
  {
    "text": "it picks one and that is what prevents double spending in these cryptocurrencies so that is the",
    "start": "984430",
    "end": "990160"
  },
  {
    "text": "fundamental abstraction of consensus there are several proposed values potentially conflicting and what the",
    "start": "990160",
    "end": "996370"
  },
  {
    "text": "consensus protocol does is to decide on one of them and to throw away the others and that is exactly what you want in the",
    "start": "996370",
    "end": "1003839"
  },
  {
    "text": "case of a blockchain and it's exactly what you don't want in the case of collaborating on the document because if",
    "start": "1003839",
    "end": "1010140"
  },
  {
    "text": "you think about it if you make some changes to a document and your colleague makes some changes to the document what",
    "start": "1010140",
    "end": "1015600"
  },
  {
    "text": "a consensus protocol would do is to choose to do the changes from one of you and throw the other one away which is",
    "start": "1015600",
    "end": "1021630"
  },
  {
    "text": "actually what it would probably make you a bit unhappy so what we want here for",
    "start": "1021630",
    "end": "1026760"
  },
  {
    "text": "collaboration protocols is to keep all of the changes that were made and to merge them in such a way that they",
    "start": "1026760",
    "end": "1032819"
  },
  {
    "text": "converge towards the same state so that is what I mean with this thing look superficially like consensus and is",
    "start": "1032819",
    "end": "1039209"
  },
  {
    "text": "really different because consensus is fundamentally around this idea of choosing one okay so back to these two",
    "start": "1039209",
    "end": "1047579"
  },
  {
    "text": "families of algorithms for achieving convergence I'm going to talk briefly about some research that we did on the",
    "start": "1047579",
    "end": "1053580"
  },
  {
    "text": "oddities so the oddities are also a family of data structures which several",
    "start": "1053580",
    "end": "1059520"
  },
  {
    "text": "people on different nodes can update concurrently and which will automatically merge the changes together",
    "start": "1059520",
    "end": "1064980"
  },
  {
    "text": "very much like those examples I showed earlier anders talked and been used in a few practical systems so",
    "start": "1064980",
    "end": "1070919"
  },
  {
    "text": "for example the autumn text editor just recently released a collaboration feature that is built on CRD T's the",
    "start": "1070919",
    "end": "1078960"
  },
  {
    "text": "react database used them internally for merging things and so on so given this poor history of problems",
    "start": "1078960",
    "end": "1086490"
  },
  {
    "start": "1082000",
    "end": "1202000"
  },
  {
    "text": "with operational transformation algorithms what we wanted to do is to be really sure that we're not repeating the",
    "start": "1086490",
    "end": "1092010"
  },
  {
    "text": "same problems with CRD T's so we want to prove formally mathematically that the",
    "start": "1092010",
    "end": "1098070"
  },
  {
    "text": "CR D T's really do converge that they really do behave as they're supposed to",
    "start": "1098070",
    "end": "1103350"
  },
  {
    "text": "because as we saw with the problems with the OT algorithms some of these algorithms can be quite subtle and just",
    "start": "1103350",
    "end": "1110040"
  },
  {
    "text": "like thinking about it unform aliy you might not be able to fully convince yourself that it really under all",
    "start": "1110040",
    "end": "1115890"
  },
  {
    "text": "circumstances does converge so what we did is we used Isabel which is a theorem proving software which you can use to",
    "start": "1115890",
    "end": "1124620"
  },
  {
    "text": "write down formally the properties that we want that you want and so we use this software to write down several CR DT",
    "start": "1124620",
    "end": "1131760"
  },
  {
    "text": "algorithms so our GA is a is a text editing C R DT up set is a set and the counter is like",
    "start": "1131760",
    "end": "1137309"
  },
  {
    "text": "what I showed earlier and we can show that they satisfy a consistency property",
    "start": "1137309",
    "end": "1143520"
  },
  {
    "text": "called strong eventual consistency which in particular implies convergence and so we can show that these data types",
    "start": "1143520",
    "end": "1151200"
  },
  {
    "text": "satisfy this consistency property under certain assumptions but now how do we know that those assumptions are valid we",
    "start": "1151200",
    "end": "1158040"
  },
  {
    "text": "now have a second layer of proof in which we have a model of a network it's a very unreliable network it's allowed",
    "start": "1158040",
    "end": "1164280"
  },
  {
    "text": "to throw away any number of messages reorder messages and what we prove here",
    "start": "1164280",
    "end": "1169590"
  },
  {
    "text": "is that those assumptions under which this strong eventual consistency holds are satisfied in all possible executions",
    "start": "1169590",
    "end": "1177179"
  },
  {
    "text": "of this network model so no matter how badly the network tries to mess things",
    "start": "1177179",
    "end": "1182460"
  },
  {
    "text": "up we can prove that these algorithms will always satisfy the guarantees they claim so unfortunately I don't have time",
    "start": "1182460",
    "end": "1189120"
  },
  {
    "text": "to talk about this theoretical work in any more detail if you're interested there's a URL there at the bottom of the",
    "start": "1189120",
    "end": "1195090"
  },
  {
    "text": "paper it's reasonably readable even if you don't have prior experience in formal verification of algorithms so do",
    "start": "1195090",
    "end": "1201600"
  },
  {
    "text": "have a look at what I do want to spend a bit more time talking about is Auto merge which is an",
    "start": "1201600",
    "end": "1207660"
  },
  {
    "start": "1202000",
    "end": "1326000"
  },
  {
    "text": "application an implementation of these ideas that we've been working on this is an open source library in JavaScript in",
    "start": "1207660",
    "end": "1215190"
  },
  {
    "text": "principle you could implement it in any language but guess JavaScript is very portable across many platforms which is",
    "start": "1215190",
    "end": "1221220"
  },
  {
    "text": "why we're using that at the moment and you can think of this as a data model",
    "start": "1221220",
    "end": "1227280"
  },
  {
    "text": "layer or data structure library on top of which you can build collaborative applications so what it gives you is a",
    "start": "1227280",
    "end": "1235490"
  },
  {
    "text": "abstraction that looks very much like JSON and you can modify this JSON",
    "start": "1235490",
    "end": "1241169"
  },
  {
    "text": "document and use that to build applications on top of it so I'll show you some examples of prototype",
    "start": "1241169",
    "end": "1246570"
  },
  {
    "text": "applications that we built using this the first one is called trellis it's a",
    "start": "1246570",
    "end": "1251580"
  },
  {
    "text": "clone of Trello the the popular project management tool looks like this so just like Trello you have columns and",
    "start": "1251580",
    "end": "1259020"
  },
  {
    "text": "you have cards in those columns and you can drag and drop the cards between columns this year's a superhero",
    "start": "1259020",
    "end": "1265200"
  },
  {
    "text": "recruiting initiative that we've used as an example and you can assign columns to",
    "start": "1265200",
    "end": "1271230"
  },
  {
    "text": "people and you can leave comments on cars and so on all the typical stuff you would expect the cool thing with this is",
    "start": "1271230",
    "end": "1277470"
  },
  {
    "text": "that it's implemented without any servers at all so we are able to do this",
    "start": "1277470",
    "end": "1282900"
  },
  {
    "text": "based on a peer-to-peer networking model using WebRTC which is normally what enables like video calls in your web",
    "start": "1282900",
    "end": "1288929"
  },
  {
    "text": "browser but you can use it for transferring data as well in particular we can transfer them edits made to a C R",
    "start": "1288929",
    "end": "1295410"
  },
  {
    "text": "DT over something like WebRTC and as a bit of use interface here on the right hand side for managing that network and",
    "start": "1295410",
    "end": "1302130"
  },
  {
    "text": "moreover what it does it keeps track of all of the changes that happened so whenever you move a card around or you",
    "start": "1302130",
    "end": "1309750"
  },
  {
    "text": "update a card or whatever it actually appears in this log of changes here and on the bottom right hand side so that's",
    "start": "1309750",
    "end": "1315600"
  },
  {
    "text": "just one example app that we built on top of auto mode another example is an",
    "start": "1315600",
    "end": "1321480"
  },
  {
    "text": "app we call pixel pusher which is quite a fun one it's a collaborative pixel art",
    "start": "1321480",
    "end": "1327360"
  },
  {
    "text": "editor so like pixel art is kind of sort of retro gaming aesthetic where you try",
    "start": "1327360",
    "end": "1334049"
  },
  {
    "text": "to make pictures consisting from just this grid of a fairly small number of pixels and",
    "start": "1334049",
    "end": "1339429"
  },
  {
    "text": "people like make really cute animations and stuff like that with this so we took",
    "start": "1339429",
    "end": "1345130"
  },
  {
    "text": "this off-the-shelf open-source implementation by xavier balan i think is his name and this was",
    "start": "1345130",
    "end": "1353110"
  },
  {
    "text": "just a user app running in your web browser and we made it turned it into a",
    "start": "1353110",
    "end": "1358149"
  },
  {
    "text": "collaborative app by building on top of auto merge so it looks like this pixel pushes our variant and what we wanted to",
    "start": "1358149",
    "end": "1366340"
  },
  {
    "text": "experiment with this here is not just like the straightforward collaboration where one user makes a change it shows",
    "start": "1366340",
    "end": "1371919"
  },
  {
    "text": "up on another user's device but also wanted to think about like for example with git you get pull requests which is",
    "start": "1371919",
    "end": "1378880"
  },
  {
    "text": "a mechanism by which a user can suggest some changes and then the maintainer of",
    "start": "1378880",
    "end": "1384039"
  },
  {
    "text": "a repository can accept or not accept or maybe accept with some changes or with Google Docs there's this future for",
    "start": "1384039",
    "end": "1390610"
  },
  {
    "text": "suggesting changes and making comments and so we wanted to explore a bit like what would a similar kind of suggesting",
    "start": "1390610",
    "end": "1397450"
  },
  {
    "text": "changes like user interface look like for a collaborative pixel art editor so",
    "start": "1397450",
    "end": "1402669"
  },
  {
    "text": "then in the top right hand side there's this bit of user interface where you can actually see there several different versions of the document so the base",
    "start": "1402669",
    "end": "1409389"
  },
  {
    "text": "document contains just the eyeballs but then there's one variant that is like a potato man and so another variant and",
    "start": "1409389",
    "end": "1416289"
  },
  {
    "text": "you can switch back and forth between those variants any user can create our own copy and then another user if they",
    "start": "1416289",
    "end": "1423669"
  },
  {
    "text": "like it can merge that into their local kind of like a pull request but just with a very lightweight user interface",
    "start": "1423669",
    "end": "1429070"
  },
  {
    "text": "so these kind of things are enabled simply by keeping track of the history",
    "start": "1429070",
    "end": "1434620"
  },
  {
    "text": "of all of the changes that are done and that is what autumn urge does internally",
    "start": "1434620",
    "end": "1439649"
  },
  {
    "text": "so as I said Auto merge is this kind of data structure abstraction on top of which you can build applications what",
    "start": "1439649",
    "end": "1447039"
  },
  {
    "text": "emerged does not itself have a networking layer so it's just a piece of JavaScript that runs in one process it",
    "start": "1447039",
    "end": "1453309"
  },
  {
    "text": "doesn't prescribe a way how that communicates with copies of the document running on other devices",
    "start": "1453309",
    "end": "1459039"
  },
  {
    "text": "so we've now also been experimenting with different network layers that you can plug underneath what emerge so as I",
    "start": "1459039",
    "end": "1465789"
  },
  {
    "text": "mentioned earlier trellis is built on top of web RTC peer-to-peer communication using a",
    "start": "1465789",
    "end": "1470950"
  },
  {
    "text": "library that we called MPL the pixel pusher pixel art editor is actually",
    "start": "1470950",
    "end": "1477010"
  },
  {
    "text": "built on a different networking layout because we were just experimenting with different layers this one taken from the",
    "start": "1477010",
    "end": "1482470"
  },
  {
    "text": "DAT project so they are about a peer to peer synchronization of datasets it's a really interesting project so we were",
    "start": "1482470",
    "end": "1489250"
  },
  {
    "text": "able to build on top of that using their long abstraction which actually worked really nicely as well so that's library",
    "start": "1489250",
    "end": "1495460"
  },
  {
    "text": "called hyper merge which makes the connection between hyper call and Auto merge but if you like you can just send",
    "start": "1495460",
    "end": "1502240"
  },
  {
    "text": "updates via server via WebSockets or what have you like really so autumn urge doesn't prescribe any particular network",
    "start": "1502240",
    "end": "1509560"
  },
  {
    "text": "protocol for using here so let's look a bit more at the kinds of data structures",
    "start": "1509560",
    "end": "1514600"
  },
  {
    "start": "1511000",
    "end": "1589000"
  },
  {
    "text": "you can use to build these collaborative applications so as I said Auto merge",
    "start": "1514600",
    "end": "1519640"
  },
  {
    "text": "gives you this kind of JSON like abstraction and you can use JSON to implement for example a to-do lists so a",
    "start": "1519640",
    "end": "1525340"
  },
  {
    "text": "to-do list consists on some fairly simple structures so in particular JSON",
    "start": "1525340",
    "end": "1531550"
  },
  {
    "text": "has two ways of combining things together one is a list which is just an",
    "start": "1531550",
    "end": "1536830"
  },
  {
    "text": "like an ordered sequence of things and one and the other is maps and so maps",
    "start": "1536830",
    "end": "1542710"
  },
  {
    "text": "are just like a dictionary that map's a key to some value and the value can be",
    "start": "1542710",
    "end": "1548080"
  },
  {
    "text": "again a map or it could be a nested sequence so you can nest these lists and maps inside each other",
    "start": "1548080",
    "end": "1553210"
  },
  {
    "text": "arbitrarily and when you have this structure now you can modify it in several ways so for example you can",
    "start": "1553210",
    "end": "1559390"
  },
  {
    "text": "change a value that appears somewhere so overwrite one primitive with another so setting and an item that's done like",
    "start": "1559390",
    "end": "1566440"
  },
  {
    "text": "clicking the checkbox that this item is done would just trigger this flag here probably another thing you might do is",
    "start": "1566440",
    "end": "1573130"
  },
  {
    "text": "edit a string that appears in here or you might insert a new item into a list between some existing items or you might",
    "start": "1573130",
    "end": "1581020"
  },
  {
    "text": "like insert a new key into a map or you might remove things from this of course so you can do any sorts of editing",
    "start": "1581020",
    "end": "1586630"
  },
  {
    "text": "operations on this data structure and in auto merge it looks like this so this is",
    "start": "1586630",
    "end": "1593200"
  },
  {
    "start": "1589000",
    "end": "1687000"
  },
  {
    "text": "a some example JavaScript code of how you do this in auto mode so auto mode",
    "start": "1593200",
    "end": "1598900"
  },
  {
    "text": "uses an immutable state object that is the State here is the current state of your",
    "start": "1598900",
    "end": "1605629"
  },
  {
    "text": "data and that is never modified in place instead if you want to change it you call this water merged or changed",
    "start": "1605629",
    "end": "1611509"
  },
  {
    "text": "function you pass in the current state and you get back a new object which is a new state in which steps new item has",
    "start": "1611509",
    "end": "1618889"
  },
  {
    "text": "been reflected so it's very much like immutable J yes if you've used that kind of things it's a very similar way of",
    "start": "1618889",
    "end": "1624440"
  },
  {
    "text": "thinking except what we wanted to try here is to keep a sort of familiar imperative programming model and so what",
    "start": "1624440",
    "end": "1631219"
  },
  {
    "text": "we have here is you pass in this one thing you do is you can provide a kind of like a commit message we call it",
    "start": "1631219",
    "end": "1636859"
  },
  {
    "text": "which is just arbitrary string it's not interpreted but it is stored alongside",
    "start": "1636859",
    "end": "1641929"
  },
  {
    "text": "the editing history and so if you want to see what changes happened it's kind of nice to provide that sort of human",
    "start": "1641929",
    "end": "1647299"
  },
  {
    "text": "readable explanation of the change and then there's this callback here where we",
    "start": "1647299",
    "end": "1653299"
  },
  {
    "text": "have this document object which is mutable just within the period of this callback and any changes that you make",
    "start": "1653299",
    "end": "1659569"
  },
  {
    "text": "within here are intercepted in JavaScript using a proxy object so here for example this to do is not push",
    "start": "1659569",
    "end": "1665329"
  },
  {
    "text": "pushes the JavaScript or method for appending a new item to an array so it's",
    "start": "1665329",
    "end": "1670969"
  },
  {
    "text": "here using the dock - duze doc dot - duze as an array appending this new item",
    "start": "1670969",
    "end": "1676579"
  },
  {
    "text": "to the end of it and so these are just kind of standard javascript methods you",
    "start": "1676579",
    "end": "1681619"
  },
  {
    "text": "can use assignment or whatever you like as well and autumn urge captures any of",
    "start": "1681619",
    "end": "1686809"
  },
  {
    "text": "those changes and internally stores it as a log of operations so you don't",
    "start": "1686809",
    "end": "1691819"
  },
  {
    "start": "1687000",
    "end": "1810000"
  },
  {
    "text": "normally have to deal with this operation log I'm just explaining it to you so you have a bit of an idea of what's going on under the hood and so",
    "start": "1691819",
    "end": "1698690"
  },
  {
    "text": "internally this this one command here of adding a new to-do item gets broken down",
    "start": "1698690",
    "end": "1704029"
  },
  {
    "text": "into these lots of little micro operations so what we do is we we create a new empty map object then we set the",
    "start": "1704029",
    "end": "1711079"
  },
  {
    "text": "title key of that map object we set the donkey of that map object then we insert",
    "start": "1711079",
    "end": "1717139"
  },
  {
    "text": "a place it create a new placeholder position in a list which is where we",
    "start": "1717139",
    "end": "1722599"
  },
  {
    "text": "want to insert that to-do item and then we link that object we created into the list so fortunately you don't have to",
    "start": "1722599",
    "end": "1728899"
  },
  {
    "text": "ever write these kind of operations yourself that would get extremely tedious but this is just to an idea of what's going on internally",
    "start": "1728899",
    "end": "1735450"
  },
  {
    "text": "and now water merge simply remembers all of these operations forever and so this",
    "start": "1735450",
    "end": "1741990"
  },
  {
    "text": "does use some storage but our basically of thinking there is that well gets if you ever get repository and you don't do",
    "start": "1741990",
    "end": "1747750"
  },
  {
    "text": "a shallow clone actually the repository contains all of the commits that ever happened in that repository and so if",
    "start": "1747750",
    "end": "1753270"
  },
  {
    "text": "gifts can keep all history forever then so can we and if we need to do compaction things",
    "start": "1753270",
    "end": "1758760"
  },
  {
    "text": "in the future we'll solve that in the future but for now we're just storing everything and it's working surprisingly well actually and keeping all of the",
    "start": "1758760",
    "end": "1766470"
  },
  {
    "text": "operations where ever has some really nice properties like we can do time travel so which sounds amazing it's",
    "start": "1766470",
    "end": "1773160"
  },
  {
    "text": "actually really simple because we have all of the changes that happened we can look at past states of the document and",
    "start": "1773160",
    "end": "1780120"
  },
  {
    "text": "so you can just ask for the history and it'll just give you a list of states that the document went through since the",
    "start": "1780120",
    "end": "1786780"
  },
  {
    "text": "began in beginning of time and it'll keep the commit message that you attach to to any changes there there's human",
    "start": "1786780",
    "end": "1793800"
  },
  {
    "text": "readable like add the to-do item and give you a snapshot of what the document was at that point in time and so auto",
    "start": "1793800",
    "end": "1800100"
  },
  {
    "text": "mode is able to do this efficiently by just selecting the subset of operations at any given moment and figuring out",
    "start": "1800100",
    "end": "1805890"
  },
  {
    "text": "from those operations what the document looked like at that time okay so we were",
    "start": "1805890",
    "end": "1812370"
  },
  {
    "start": "1810000",
    "end": "1934000"
  },
  {
    "text": "talking about collaboration so let's talk about some concurrent changes because that's where the conflict resolution comes in so let's say that",
    "start": "1812370",
    "end": "1819960"
  },
  {
    "text": "our starting point is two users both have this to-do lists can containing a",
    "start": "1819960",
    "end": "1826050"
  },
  {
    "text": "single item which is watering the plants and it is not yet done and so two users",
    "start": "1826050",
    "end": "1831420"
  },
  {
    "text": "now concurrently update this to-do list like maybe like one of them is me and the other one is my wife and we're",
    "start": "1831420",
    "end": "1836910"
  },
  {
    "text": "sharing this to-do list between our two phones so for example maybe I add buying",
    "start": "1836910",
    "end": "1842070"
  },
  {
    "text": "the milk which is done false and my wife says our she's watered the plants now so she marks that item as done and so these",
    "start": "1842070",
    "end": "1848910"
  },
  {
    "text": "are two independent changes that happen maybe while the devices are offline so now we want to merge them together and",
    "start": "1848910",
    "end": "1855150"
  },
  {
    "text": "so firstly we immediately apply any change to your local copy of the data of",
    "start": "1855150",
    "end": "1861510"
  },
  {
    "text": "course that's what we want because even if you don't have an internet connection you should still be able to update the",
    "start": "1861510",
    "end": "1866610"
  },
  {
    "text": "data obviously but then at some later the network comes back and we're able to communicate these changes from",
    "start": "1866610",
    "end": "1873330"
  },
  {
    "text": "one device to the other and so at that point then Auto merge will figure out that well changes to two different",
    "start": "1873330",
    "end": "1879690"
  },
  {
    "text": "objects we can merge these two together cleanly so setting done to true for the watering the plants get supplied to the",
    "start": "1879690",
    "end": "1886380"
  },
  {
    "text": "left copy and inserting the new item of buying milk with done falls on the right",
    "start": "1886380",
    "end": "1891840"
  },
  {
    "text": "hand side they both get applied and so in this case the merger is quite straightforward and what auto merge",
    "start": "1891840",
    "end": "1898200"
  },
  {
    "text": "guarantees you this is the fundamental property of CR DTS is convergence and",
    "start": "1898200",
    "end": "1903510"
  },
  {
    "text": "that is more formally defined if any two devices any two nodes have seen the same",
    "start": "1903510",
    "end": "1909570"
  },
  {
    "text": "set of updates or the same set of operations even if they might have seen those operations in a different order as",
    "start": "1909570",
    "end": "1916890"
  },
  {
    "text": "soon as they've seen the same set of operations then the state of the document will also be the same this is a",
    "start": "1916890",
    "end": "1922500"
  },
  {
    "text": "really nice property to have because it means we're not depending on like who saw which operation in which order we",
    "start": "1922500",
    "end": "1928440"
  },
  {
    "text": "just have this simple property that once the data has been exchanged everyone's in the same state now there are some",
    "start": "1928440",
    "end": "1935070"
  },
  {
    "start": "1934000",
    "end": "2023000"
  },
  {
    "text": "edge cases in which there are conflicts that are not neatly result abour and this is really the only one actually",
    "start": "1935070",
    "end": "1941400"
  },
  {
    "text": "that we can't sensibly resolve automatically which is the same field or",
    "start": "1941400",
    "end": "1946680"
  },
  {
    "text": "the same item in the list it's overwritten with two different values and so like that's fundamentally",
    "start": "1946680",
    "end": "1953010"
  },
  {
    "text": "the the most basic type of conflict and in this case you know it's not really defined is it better to buy soymilk or",
    "start": "1953010",
    "end": "1959670"
  },
  {
    "text": "better to buy almond milk you know that could be a subject of debate and auto merge is not opinionated on whether soy",
    "start": "1959670",
    "end": "1966480"
  },
  {
    "text": "or almond milk milk is better so what auto mage merge does is firstly",
    "start": "1966480",
    "end": "1971850"
  },
  {
    "text": "it picks one of them arbitrarily but deterministically as the default value and so if you just like look at the",
    "start": "1971850",
    "end": "1979800"
  },
  {
    "text": "document without inspecting conflict it'll just pick one of the two that's about the best we can do but it keeps",
    "start": "1979800",
    "end": "1986940"
  },
  {
    "text": "the other one in the side object here called underscore conflicts and it will tell you hey you know there was a",
    "start": "1986940",
    "end": "1993330"
  },
  {
    "text": "conflict for the field title and this other nodes node ID one two three four set the value to buy almond milk so even",
    "start": "1993330",
    "end": "2000560"
  },
  {
    "text": "though we've got here buying soy milk as default value there's also this other one and so then it's up to the user",
    "start": "2000560",
    "end": "2006080"
  },
  {
    "text": "interface do you want to show like both conflicting values and let the user choose one you can implement that kind",
    "start": "2006080",
    "end": "2012169"
  },
  {
    "text": "of manual conflict resolution if you need to but this is actually this assignment to the same field is the only",
    "start": "2012169",
    "end": "2019340"
  },
  {
    "text": "case in which that manual conflict resolution has to happen so if it's text",
    "start": "2019340",
    "end": "2024860"
  },
  {
    "start": "2023000",
    "end": "2151000"
  },
  {
    "text": "editing for example let's say we've got an document that says hey guys and we",
    "start": "2024860",
    "end": "2029900"
  },
  {
    "text": "may want to make it more gender-neutral so maybe one user changes guys to everyone the other user concurrently",
    "start": "2029900",
    "end": "2035720"
  },
  {
    "text": "changes guys to folks and so you could say like how do we handle this kind of",
    "start": "2035720",
    "end": "2041929"
  },
  {
    "text": "conflict and what auto modes does for this is in fact the same as what Google",
    "start": "2041929",
    "end": "2046940"
  },
  {
    "text": "Docs would do in the same situation which is it thinks well ok guys was",
    "start": "2046940",
    "end": "2052550"
  },
  {
    "text": "deleted on both replicas so delete it twice is the same as deleted once so guys is gone everyone was inserted on",
    "start": "2052550",
    "end": "2060378"
  },
  {
    "text": "the left-hand side folks was inserted on the right-hand side if two things were inserted we're just going to keep both",
    "start": "2060379",
    "end": "2066108"
  },
  {
    "text": "of them and we're just going to put them in an arbitrary order but we're going to make sure that the order is the same on",
    "start": "2066109",
    "end": "2071658"
  },
  {
    "text": "all of the replicas so ensure that everyone sees either hey everyone folks or hey folks everyone",
    "start": "2071659",
    "end": "2077868"
  },
  {
    "text": "I hope those is a valid merged outcome but which of the two gets chosen is",
    "start": "2077869",
    "end": "2083929"
  },
  {
    "text": "non-deterministic sorry it's it's random but deterministic it's been chosen based",
    "start": "2083929",
    "end": "2089000"
  },
  {
    "text": "on the unique identifiers of the nodes so like this is fundamentally the",
    "start": "2089000",
    "end": "2094970"
  },
  {
    "text": "properties you get you might think it's not ideal maybe you do want more manual conflict resolution the basis on which",
    "start": "2094970",
    "end": "2102500"
  },
  {
    "text": "we are going here is that actually like Google Docs does this and millions of people use Google Docs so it seems to be",
    "start": "2102500",
    "end": "2107570"
  },
  {
    "text": "fine in many cases maybe what we want is kind of like an advisory conflict like notion",
    "start": "2107570",
    "end": "2115970"
  },
  {
    "text": "that says that maybe if some edits occurred within like 20 characters of each other or whatever defines some kind",
    "start": "2115970",
    "end": "2122540"
  },
  {
    "text": "of threshold that we show you a little note to the user saying by the way there were some edits close together here you",
    "start": "2122540",
    "end": "2128630"
  },
  {
    "text": "might want to check if the most outcome is like a valid English sentence or not we can't figure that out",
    "start": "2128630",
    "end": "2135190"
  },
  {
    "text": "but I think that's about as much conflict resolution as you might need here so I'd like to show you just",
    "start": "2135190",
    "end": "2142750"
  },
  {
    "text": "briefly before we wrap up here held the algorithm behind this works because I think it's kind of neat and so although",
    "start": "2142750",
    "end": "2148720"
  },
  {
    "text": "you don't need to implement this kind of algorithm yourself it's kind of cool to see what happens here so let's take as",
    "start": "2148720",
    "end": "2154359"
  },
  {
    "start": "2151000",
    "end": "2303000"
  },
  {
    "text": "example a document consisting of the letters H e l and o and we have two",
    "start": "2154359",
    "end": "2160300"
  },
  {
    "text": "concurrent edits happening to this document so one user adds a second L to make it reread hello and the user the",
    "start": "2160300",
    "end": "2167859"
  },
  {
    "text": "other user the purple goos on the right adds an exclamation mark at the end so the way the CR DT works is it gives each",
    "start": "2167859",
    "end": "2175780"
  },
  {
    "text": "character in the document a unique identifier and it has a particular scheme for creating those identifiers",
    "start": "2175780",
    "end": "2181980"
  },
  {
    "text": "and that is it consists of a number which is just like a counter and the a",
    "start": "2181980",
    "end": "2188560"
  },
  {
    "text": "and B here is the name of the node that created this particular list element so",
    "start": "2188560",
    "end": "2194349"
  },
  {
    "text": "node a on the Left creates new list elements with a and node B here creates",
    "start": "2194349",
    "end": "2200680"
  },
  {
    "text": "a new LMS tellement for B so using their name no to name me and so because each",
    "start": "2200680",
    "end": "2207400"
  },
  {
    "text": "node increments the counter for every operation is generated and two different nodes will have different names so that",
    "start": "2207400",
    "end": "2213970"
  },
  {
    "text": "makes these identify as unique across all of the nodes and so now when when",
    "start": "2213970",
    "end": "2220990"
  },
  {
    "text": "these nodes exchange data might be viola server or any kind of network doesn't really matter what they exchange is",
    "start": "2220990",
    "end": "2226900"
  },
  {
    "text": "these operations which say insert a new list element new character L with ID for",
    "start": "2226900",
    "end": "2233200"
  },
  {
    "text": "a so that's the new the new ID given to this new element after the existing list",
    "start": "2233200",
    "end": "2238630"
  },
  {
    "text": "element with ID to a so this is important it doesn't say like insert at position 15 because position 15 might",
    "start": "2238630",
    "end": "2246550"
  },
  {
    "text": "change if somebody inserts or deletes something before position 15 so instead we use these identifiers as a way of",
    "start": "2246550",
    "end": "2252900"
  },
  {
    "text": "reliably pointing to a particular position in the sequence and the other",
    "start": "2252900",
    "end": "2259329"
  },
  {
    "text": "user similarly creates this operation that says insert exclamation mark with ID for be after the existing element 3 a",
    "start": "2259329",
    "end": "2266319"
  },
  {
    "text": "which is the O and these messages simply get forwarded on to the to users and they each apply",
    "start": "2266319",
    "end": "2274060"
  },
  {
    "text": "exactly what what you would expect so the purple one here looks for the",
    "start": "2274060",
    "end": "2279460"
  },
  {
    "text": "character with ID 3a and puts the exclamation mark with 4p after the 3a so",
    "start": "2279460",
    "end": "2284500"
  },
  {
    "text": "it doesn't matter that the position has shifted along by 1 this unique identifier still clearly identifies the",
    "start": "2284500",
    "end": "2290980"
  },
  {
    "text": "position to where to insert and we just need this doesn't rely on any ordering guarantees particularly so this can just",
    "start": "2290980",
    "end": "2297730"
  },
  {
    "text": "go through any kind of network so you might realize that I haven't told you about one of their issues which is what",
    "start": "2297730",
    "end": "2305230"
  },
  {
    "start": "2303000",
    "end": "2551000"
  },
  {
    "text": "happens if two people insert in the same place in the same document and so this",
    "start": "2305230",
    "end": "2310330"
  },
  {
    "text": "one requires a little bit more explanation so imagine we have a document that reads ABC and on the left",
    "start": "2310330",
    "end": "2319660"
  },
  {
    "text": "hand side the user adds XY between the a and the B so it reads a XY BC and",
    "start": "2319660",
    "end": "2325980"
  },
  {
    "text": "independently of that on the purple side the letters P and Q get added similarly",
    "start": "2325980",
    "end": "2332020"
  },
  {
    "text": "between a and B and so what we want to ensure is that still here in this case",
    "start": "2332020",
    "end": "2338380"
  },
  {
    "text": "everybody ends up in the same state at the end ok and so for this I'm now going",
    "start": "2338380",
    "end": "2346090"
  },
  {
    "text": "to start with sending that that insertion of P over from the right hand side to the left hand side this works as",
    "start": "2346090",
    "end": "2352660"
  },
  {
    "text": "you would expect so insert p with ID 4 be after 1a 1a is still there's the",
    "start": "2352660",
    "end": "2358900"
  },
  {
    "text": "letter A so it puts the pede directly after a but before the X and then similarly the Q comes across insert Q",
    "start": "2358900",
    "end": "2366610"
  },
  {
    "text": "with ID 5b after 4 B so for P is there bits there letter P that we just",
    "start": "2366610",
    "end": "2372340"
  },
  {
    "text": "inserted so it puts the Q after the P okay so that's one direction sorted we've got a PQ x y BC now we need to",
    "start": "2372340",
    "end": "2381220"
  },
  {
    "text": "ensure that if the message is going the opposite direction we end up in the same state and if we just do this naively so",
    "start": "2381220",
    "end": "2387250"
  },
  {
    "text": "just applying say insert for a after one a it's actually going to end up with",
    "start": "2387250",
    "end": "2392380"
  },
  {
    "text": "this in the in the opposite order on the right hand side so here we need to be a little bit more clever so we need to",
    "start": "2392380",
    "end": "2399580"
  },
  {
    "text": "ensure that the X ends up after the Q so even though the the operation for",
    "start": "2399580",
    "end": "2405890"
  },
  {
    "text": "inserting X says insert after 1a what we need to do is actually shift along and",
    "start": "2405890",
    "end": "2411530"
  },
  {
    "text": "put it not directly after 1a but after 5b which it's a Q and so for that we're",
    "start": "2411530",
    "end": "2417350"
  },
  {
    "text": "going to use the following rule when a new insertion comes in so in this case",
    "start": "2417350",
    "end": "2423710"
  },
  {
    "text": "the insertion of for a comes in after 1a first of all we set to our starting",
    "start": "2423710",
    "end": "2429050"
  },
  {
    "text": "position which is 1a so we want to insert after 1a and now we're going to compare the ID of the new incoming",
    "start": "2429050",
    "end": "2436160"
  },
  {
    "text": "operation to the ID of the next element in the list and in this case at the next",
    "start": "2436160",
    "end": "2441800"
  },
  {
    "text": "element is the is 4b that's the P and so what we're going to do now is if the ID",
    "start": "2441800",
    "end": "2448460"
  },
  {
    "text": "of the incoming operation is less than the ID of the next element in the list",
    "start": "2448460",
    "end": "2453680"
  },
  {
    "text": "we're going to skip over that element and move on so move one further to the right and we'll repeat the same thing so",
    "start": "2453680",
    "end": "2460760"
  },
  {
    "text": "now we look at the next next element in the list which is Q Q has an ID of 5b 5b",
    "start": "2460760",
    "end": "2467150"
  },
  {
    "text": "is also greater than 4 a so we're going to skip over it as well so apply the same rule skip over any of the elements",
    "start": "2467150",
    "end": "2474770"
  },
  {
    "text": "that have a greater ID than the one we're inserting and so then we've",
    "start": "2474770",
    "end": "2480470"
  },
  {
    "text": "skipped over Q now the next next element to look at is the letter B which has an",
    "start": "2480470",
    "end": "2485720"
  },
  {
    "text": "ID of 2a 2a is less than 4 a so now we stop the skipping and this is where we",
    "start": "2485720",
    "end": "2491420"
  },
  {
    "text": "insert the letter X and so this rule it does actually work it takes a little bit",
    "start": "2491420",
    "end": "2498620"
  },
  {
    "text": "of convincing and this is why we did all of that for more proof stuff because it's not entirely obvious immediately",
    "start": "2498620",
    "end": "2503810"
  },
  {
    "text": "that this actually does the right thing but it turns out that it does actually always do the right thing and now",
    "start": "2503810",
    "end": "2509360"
  },
  {
    "text": "finally for the insertion of y this one is easy again because here now we have just insert y with ID 5 a after ID for a",
    "start": "2509360",
    "end": "2517250"
  },
  {
    "text": "for a is that X that we've really placed in the list so now we can just put it directly after the X just to show you",
    "start": "2517250",
    "end": "2525290"
  },
  {
    "text": "that the skipping doesn't happen in any other circumstances so this 5a is not going to skip over 2a because 2a is less",
    "start": "2525290",
    "end": "2530930"
  },
  {
    "text": "than 5 a on the other side here this insertion of p4 will not skip over the X here because 4",
    "start": "2530930",
    "end": "2539119"
  },
  {
    "text": "P is greater than 4 a so for P you will not skip over for a ok so this whole",
    "start": "2539119",
    "end": "2546170"
  },
  {
    "text": "thing is just an example of how the CR DTS work if you want to play around with this stuff what emerges open source and",
    "start": "2546170",
    "end": "2552500"
  },
  {
    "start": "2551000",
    "end": "2618000"
  },
  {
    "text": "liberally licensed and it would be really great if anyone wants to try and just prototype some applications on top",
    "start": "2552500",
    "end": "2558380"
  },
  {
    "text": "of it I'll tell you this is research code it's not production ready we're not pretending that it's perfect in all",
    "start": "2558380",
    "end": "2564200"
  },
  {
    "text": "circumstances but it does seem to be working reasonably well we were able to build some non-trivial applications on",
    "start": "2564200",
    "end": "2570320"
  },
  {
    "text": "top of it so maybe you will be able to as well thanks to especially the hyper",
    "start": "2570320",
    "end": "2576470"
  },
  {
    "text": "core from the doc project which we used for the networking in our last work if you're interested in the formal",
    "start": "2576470",
    "end": "2582260"
  },
  {
    "text": "verification there's a link to the paper this is this work is based on our earlier work on a Jason CR DT which is",
    "start": "2582260",
    "end": "2589369"
  },
  {
    "text": "this penultimate paper here on the list except the algorithm we use in auto mode is actually a bit different from what is",
    "start": "2589369",
    "end": "2595700"
  },
  {
    "text": "in the paper so we need to write an updated version of that with the latest algorithm but we haven't got around to that yet I'm afraid but there is a like",
    "start": "2595700",
    "end": "2603410"
  },
  {
    "text": "a mock down page on the auto mode repository telling you about the internals if you're interested in that",
    "start": "2603410",
    "end": "2609140"
  },
  {
    "text": "and finally this book which as I said it's not about CRD T's but might also be interesting to anyone thank you very",
    "start": "2609140",
    "end": "2615470"
  },
  {
    "text": "much [Applause]",
    "start": "2615470",
    "end": "2620539"
  }
]