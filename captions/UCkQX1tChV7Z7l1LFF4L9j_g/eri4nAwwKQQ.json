[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "[Music]",
    "start": "3320",
    "end": "14289"
  },
  {
    "text": "hi I'm Chris seon I'm a senior staff engineer at Shopify which is a Canadian e-commerce company I work on optimizing",
    "start": "15040",
    "end": "21640"
  },
  {
    "text": "the Ruby programming language but I do that by working on a rub impementation on top of java and the jvm and growl um",
    "start": "21640",
    "end": "29960"
  },
  {
    "text": "called chof Ruby which is why I'm here today I'm the founder of Cho Ruby um I write about compilers and optimizations",
    "start": "29960",
    "end": "36520"
  },
  {
    "text": "and data structures I maintain the Ruby bb.org which is a list of academic writing on Ruby in this talk when I talk",
    "start": "36520",
    "end": "44360"
  },
  {
    "text": "about compilers I mean the just in time or jit compiler that's the compiler that runs as your program is running so I",
    "start": "44360",
    "end": "51280"
  },
  {
    "text": "don't mean Java C in this context I spent a lot of time trying to understand what the Java compiler is doing with my",
    "start": "51280",
    "end": "57559"
  },
  {
    "text": "code and how I can change my code to get the result I want out of the compiler and I also spend a lot of time trying to",
    "start": "57559",
    "end": "63600"
  },
  {
    "text": "teach other people to do this there's a few tools for understanding the compiler you can look at the assembly code that's",
    "start": "63600",
    "end": "70080"
  },
  {
    "text": "produced by the compiler you can use a tool like jit watch to look at the logs that the compiler produces as it",
    "start": "70080",
    "end": "75720"
  },
  {
    "text": "produces the code um the ultimate option is to reach into the compiler and actually look at the data structures it",
    "start": "75720",
    "end": "81880"
  },
  {
    "text": "uses to understand optimize transform and compile your code but all these",
    "start": "81880",
    "end": "87960"
  },
  {
    "text": "options are quite complicated and they aren't very accessible I'm experimenting with some new ways to understand what",
    "start": "87960",
    "end": "93360"
  },
  {
    "text": "the compiler is doing including by trying to give you back pseudo Java code",
    "start": "93360",
    "end": "99119"
  },
  {
    "text": "from the compiler after it's finished running or part of the way through it's running um so the idea is that anyone",
    "start": "99119",
    "end": "106280"
  },
  {
    "text": "who can understand Java which should be most Java programmers can look at what the compiler is doing in terms of java",
    "start": "106280",
    "end": "112439"
  },
  {
    "text": "code which they already understand at Shopify maintain a tool called cfoam to",
    "start": "112439",
    "end": "117719"
  },
  {
    "text": "help us look at these data structures and to do this decompilation from optimized Java back",
    "start": "117719",
    "end": "123600"
  },
  {
    "text": "to pseudo Java it works within the context specifically of growl so if you're not a growl user already uh it",
    "start": "123600",
    "end": "130080"
  },
  {
    "text": "may not be immediately applicable to you but maybe it's another good reason to experiment with adopting",
    "start": "130080",
    "end": "135239"
  },
  {
    "text": "growl using it we can gain a bit more of an understanding of what the jit compiler really does I'm always amazed",
    "start": "135239",
    "end": "141800"
  },
  {
    "text": "that people argue online about what the jit compiler does do or doesn't do for some given code let's simply dive in and",
    "start": "141800",
    "end": "148680"
  },
  {
    "text": "check most of the time your Java program will start as source code in Java files on",
    "start": "148680",
    "end": "156400"
  },
  {
    "start": "150000",
    "end": "270000"
  },
  {
    "text": "disk and you'd normally run those through the Java compiler so Java C to",
    "start": "156400",
    "end": "161440"
  },
  {
    "text": "produce um bik code which is a machine readable representation of your program",
    "start": "161440",
    "end": "167080"
  },
  {
    "text": "uh not everyone's aware that there's a a second compiler the just in time compiler this takes your bik code while",
    "start": "167080",
    "end": "172760"
  },
  {
    "text": "the program is running and convert it to machine code which can run natively on your processor there's also another sort",
    "start": "172760",
    "end": "179959"
  },
  {
    "text": "of compiler you can use a head of time compiler that produces the same machine code but instead of you keeping it in memory like the like the the jit does it",
    "start": "179959",
    "end": "186959"
  },
  {
    "text": "can write it out to a file on dis so an executable file or a library or something like that um that's bit more",
    "start": "186959",
    "end": "193280"
  },
  {
    "text": "popular these days due to Native image which is part of the grow VM it's it's been an option for a long time but it's",
    "start": "193280",
    "end": "199280"
  },
  {
    "text": "it's getting more popularity these days in this talk the compiler we're interested in and the configuration",
    "start": "199280",
    "end": "205440"
  },
  {
    "text": "we're interested in is using the jit compiler to compile B codes to machine code at runtime um but some of the ideas",
    "start": "205440",
    "end": "211640"
  },
  {
    "text": "apply the same for the aot as well but we'll just keep it simple for this talk so we had a little arrow there for the",
    "start": "211640",
    "end": "218680"
  },
  {
    "text": "jit um but really the the jit is a a big thing it's a very important thing for the the performance of your Java",
    "start": "218680",
    "end": "224959"
  },
  {
    "text": "application um getting the kind of performance out of your application you'd like um and it it does a lot of",
    "start": "224959",
    "end": "230840"
  },
  {
    "text": "things um and one of the the problems with it is it's a bit of a black box um",
    "start": "230840",
    "end": "237000"
  },
  {
    "text": "so if you're not sure why it's giving the machine Cod it is why it's optimizing in the way it is uh what it's",
    "start": "237000",
    "end": "243480"
  },
  {
    "text": "going to do with a given program it's quite hard to figure that out because of it's generly seen as a sort of monolith that's quite hard to see inside but",
    "start": "243480",
    "end": "251040"
  },
  {
    "text": "really there's lots of things going on there there there's multiple processes it it passes the bite code it repasses",
    "start": "251040",
    "end": "256079"
  },
  {
    "text": "it like it passed your Java source code originally um it produces machine code and in the middle it uses a a data",
    "start": "256079",
    "end": "261320"
  },
  {
    "text": "structure called a graph which is what this talk is about and it's about looking inside the the jit compiler at",
    "start": "261320",
    "end": "267639"
  },
  {
    "text": "that day structure why would we want to do this um well",
    "start": "267639",
    "end": "274479"
  },
  {
    "start": "270000",
    "end": "499000"
  },
  {
    "text": "just for interest for one thing it's interesting to see how these these programs work especially if you spend a",
    "start": "274479",
    "end": "279520"
  },
  {
    "text": "lot of time using the Java jit be interesting to see how it's how it's running and why just for interest uh you",
    "start": "279520",
    "end": "286680"
  },
  {
    "text": "may want want to understand what the jit is doing for your program you know for for actually for your work may want",
    "start": "286680",
    "end": "292120"
  },
  {
    "text": "understand what it's doing with it you may want to figure out why it isn't optimizing as you expecting if you're trying to get a particular sort of",
    "start": "292120",
    "end": "299000"
  },
  {
    "text": "performance out of your program uh you may want to understand why the compiler",
    "start": "299000",
    "end": "304039"
  },
  {
    "text": "is doing what it is in order to get the best out of it perhaps you're working on a language that runs on top of the jvm",
    "start": "304039",
    "end": "310680"
  },
  {
    "text": "so for example I work on TR Ruby which is a ruby implementation but it runs on the jvm which is why I'm speaking in a a",
    "start": "310680",
    "end": "316960"
  },
  {
    "text": "jvm track at a conference um or if you're working on the Java compile yourself obviously that's a bit more",
    "start": "316960",
    "end": "322960"
  },
  {
    "text": "Niche um but there are people doing that uh but what we can use it for is we can use it to resolve online discussions",
    "start": "322960",
    "end": "329280"
  },
  {
    "text": "where people guessing what the the the jvm and the the jit does and we can find",
    "start": "329280",
    "end": "334479"
  },
  {
    "text": "out for Real by actually looking inside and asking the jit what it does uh nobody's advocating that um this",
    "start": "334479",
    "end": "342960"
  },
  {
    "text": "should really be a normal part of your your daily work to to analyze what the Java gist is doing as part of your",
    "start": "342960",
    "end": "348759"
  },
  {
    "text": "workflow uh nobody suggesting that um but it can be useful sometimes so this talk is all in the",
    "start": "348759",
    "end": "356440"
  },
  {
    "text": "context of the grow VM so the gra VM is an implementation of the jvm um plus a",
    "start": "356440",
    "end": "364840"
  },
  {
    "text": "lot more it runs Java it also runs other languages such as JavaScript such as python such as Ruby such as R such as",
    "start": "364840",
    "end": "371919"
  },
  {
    "text": "wasm um and and some more um it also gives you some some new ways around Java",
    "start": "371919",
    "end": "377360"
  },
  {
    "text": "code such as the native image tool I mentioned earlier which allows you to compile your your Java code to machine code ahead of time this is available",
    "start": "377360",
    "end": "384280"
  },
  {
    "text": "from grav m.org if you're not using grvm then um a lot of this won't be applicable I'm afraid but maybe it's",
    "start": "384280",
    "end": "390400"
  },
  {
    "text": "another good reason to go and look at grm if you haven't done it already so understanding what the jit",
    "start": "390400",
    "end": "396520"
  },
  {
    "text": "compiler does well we said that the output of the jit compiler was machine code um so the simplest thing we can do",
    "start": "396520",
    "end": "402639"
  },
  {
    "text": "is look at the machine code and uh human readable version of machine code is called assembly code um if you use these",
    "start": "402639",
    "end": "410240"
  },
  {
    "text": "two options so if we unlock the DI V the dtic VM options and if we print assembly",
    "start": "410240",
    "end": "416039"
  },
  {
    "text": "then it'll print out the assembly for us um every time it runs the jit option depends on a liary called HS disc that",
    "start": "416039",
    "end": "422479"
  },
  {
    "text": "is uh isn't included with a jvm and it can be a little bit annoying to build which is um an unfortunate thing you",
    "start": "422479",
    "end": "428039"
  },
  {
    "text": "can't just use these flags out of the box unfortunately and get actual assembly so that's what it would look",
    "start": "428039",
    "end": "433319"
  },
  {
    "text": "like um it gives you some comments which help you sort of orientate yourself but it's pretty hard to understand what's",
    "start": "433319",
    "end": "440520"
  },
  {
    "text": "been done to optimize here and it's definitely hard to understand why um so this is the the most basic of",
    "start": "440520",
    "end": "447120"
  },
  {
    "text": "tools a better tool is something like like um Chris Nan's jit watch so um if",
    "start": "447120",
    "end": "453280"
  },
  {
    "text": "you unlock your dyn VM options again you can trace class loading you can log compilation and the jit will write out a",
    "start": "453280",
    "end": "458919"
  },
  {
    "text": "log of what it's done and um to some extent why it's done it um then you can use jwatch to open this log it's a",
    "start": "458919",
    "end": "465960"
  },
  {
    "text": "graphical program or it can run headless um it'll do something to explain what's going on so um so for example in this",
    "start": "465960",
    "end": "472400"
  },
  {
    "text": "view it's showing us the source code corresponding bike code and the assembly um and if we zoom in you're still",
    "start": "472400",
    "end": "478360"
  },
  {
    "text": "getting the same assembly output here but um now you are you can get a bit more information about which which",
    "start": "478360",
    "end": "484199"
  },
  {
    "text": "machine instructions correspond back to which bike code and which lines of the program so this is a better option um I",
    "start": "484199",
    "end": "490680"
  },
  {
    "text": "want to talk more about jit watch here it's got loads of really useful tools um so I would consider using jit watch most",
    "start": "490680",
    "end": "497440"
  },
  {
    "text": "of the time what's the problems with assembly and these jit logs though um you're only",
    "start": "497440",
    "end": "503720"
  },
  {
    "start": "499000",
    "end": "560000"
  },
  {
    "text": "seeing the input and the output still not really the bit in the middle so jit watch will show you the the bike code",
    "start": "503720",
    "end": "509560"
  },
  {
    "text": "which is sort of some people would think of as a bit of the middle but really it's the the input to the the jit",
    "start": "509560",
    "end": "514640"
  },
  {
    "text": "componer and it only shows you the output as well the assembly code um you're trying to understand what was done and why by looking at the lowest",
    "start": "514640",
    "end": "521240"
  },
  {
    "text": "level representation so when you look at assembly most information is gone um so",
    "start": "521240",
    "end": "526279"
  },
  {
    "text": "it's not useful to to answer some detailed questions um and assembly code is very verose as well so it's hard to",
    "start": "526279",
    "end": "532399"
  },
  {
    "text": "work with graphs so we said in the middle of",
    "start": "532399",
    "end": "538160"
  },
  {
    "text": "the jit compiler is this uh this data structure and this is a compiler graph",
    "start": "538160",
    "end": "543760"
  },
  {
    "text": "so that's graph as in you know nodes and edges not graph as in a chart or",
    "start": "543760",
    "end": "549200"
  },
  {
    "text": "something like that um and it's this data structure we're going to look at so we're actually going to reach inside the",
    "start": "549200",
    "end": "554600"
  },
  {
    "text": "jit and we're going to look at this data structure in order to understand what the compiler is doing and",
    "start": "554600",
    "end": "560399"
  },
  {
    "start": "560000",
    "end": "660000"
  },
  {
    "text": "why how can we get the compiler to give us it it's internal data structure um",
    "start": "560399",
    "end": "567040"
  },
  {
    "text": "well gr's got this simple option so grow do dump equals colon one um colon one is",
    "start": "567040",
    "end": "572880"
  },
  {
    "text": "a a notation you can use to specify what things you want um it's got some complexity but col W giv use some what",
    "start": "572880",
    "end": "580200"
  },
  {
    "text": "you probably want for most stuff um and here's an interesting thing why is this a a d system property well that's cuz",
    "start": "580200",
    "end": "586279"
  },
  {
    "text": "grow is more or less just another Java Library so you can communicate to it using system properties like you would",
    "start": "586279",
    "end": "593079"
  },
  {
    "text": "um any other Java library or application um and this then prints out the graphs",
    "start": "593079",
    "end": "598640"
  },
  {
    "text": "when the the compiler runs what can we do with these graphs um",
    "start": "598640",
    "end": "604760"
  },
  {
    "text": "well like jit watch there's a tool called the ideal graph visualizer usually shortened to igv and this lets",
    "start": "604760",
    "end": "611240"
  },
  {
    "text": "you load up the graphs into a a viewer and um and analyze them this is a a tool",
    "start": "611240",
    "end": "617880"
  },
  {
    "text": "from Oracle it's part of the grow VM project it's being maintained by them at the moment um we can we can zoom in on",
    "start": "617880",
    "end": "623560"
  },
  {
    "text": "the graph I'll I'll explain what this graph um means when I start to talk about the the tool I'm specifically",
    "start": "623560",
    "end": "628839"
  },
  {
    "text": "using but this is what ideal graph visualizer will show you um at Shopify y",
    "start": "628839",
    "end": "634279"
  },
  {
    "text": "work we use a tool um which prints out the the graph to a an SVG F or a PDF or",
    "start": "634279",
    "end": "641279"
  },
  {
    "text": "a PNG and that's what we're going to use instead so it's the same dat strcture just looks a bit different and it's",
    "start": "641279",
    "end": "646399"
  },
  {
    "text": "generated by an open source program instead um yeah so cfoam is this work in",
    "start": "646399",
    "end": "652680"
  },
  {
    "text": "progress tool for for working with with gr graphs and we can produce these kind of images from them",
    "start": "652680",
    "end": "660240"
  },
  {
    "text": "so what Earth do we do with these graphs how do we how do we read them and understand them um well here's a simple example so I've got an example",
    "start": "660240",
    "end": "666639"
  },
  {
    "text": "arithmetic operator so a method it takes an X it takes a y and it returns adding",
    "start": "666639",
    "end": "671760"
  },
  {
    "text": "together the the X and the Y and they're both integers um so to read this graph we've got um",
    "start": "671760",
    "end": "679560"
  },
  {
    "text": "got boxes nodes and we've got edges which are lines between them and it's it's a flowchart basically um so in this",
    "start": "679560",
    "end": "687120"
  },
  {
    "text": "case p 0 is a parameter first parameter P1 is the second parameter they are the",
    "start": "687120",
    "end": "693000"
  },
  {
    "text": "X and Y for this add operation and the four just means it's it's node number four all the nodes are numbered um the",
    "start": "693000",
    "end": "699320"
  },
  {
    "text": "result of that flows into returning so we return the result of adding parameter",
    "start": "699320",
    "end": "704560"
  },
  {
    "text": "zero and parameter one um and then separately we have a a start node um",
    "start": "704560",
    "end": "710600"
  },
  {
    "text": "what we do is we run from the start node to the the return node and then every time we need a result we then run",
    "start": "710600",
    "end": "717040"
  },
  {
    "text": "whatever feeds into the result so it's a a a flow chart um and it's a a data",
    "start": "717040",
    "end": "722800"
  },
  {
    "text": "graph and it's a control flow graph at the the same time I'll become a bit more clear when we look at a slightly larger",
    "start": "722800",
    "end": "728519"
  },
  {
    "text": "example um I've got a a website where I talk about how to look at these graphs",
    "start": "728519",
    "end": "733720"
  },
  {
    "text": "and how to understand them a bit more so a slightly more complicated example is a an example compare operator",
    "start": "733720",
    "end": "740399"
  },
  {
    "text": "so um this Compares X and Y and returns true if x is less than or equal to Y so",
    "start": "740399",
    "end": "747560"
  },
  {
    "text": "we have our our less than operator here again um we have the two parameters if",
    "start": "747560",
    "end": "752760"
  },
  {
    "text": "you notice this is less than rather than less than or equal to and what the compiler has done is it's using a less",
    "start": "752760",
    "end": "758360"
  },
  {
    "text": "than rather than a less than equal to and has swapped them around so instead of saying uh this is less than equal to",
    "start": "758360",
    "end": "765680"
  },
  {
    "text": "this it's saying this is less than this the reason it's done that is something called canonicalization so the compiler tries to use one representation to",
    "start": "765680",
    "end": "773680"
  },
  {
    "text": "represent as many different types of programs as possible so it uses one comparison operator if it can so it uses",
    "start": "773680",
    "end": "778760"
  },
  {
    "text": "less than rather than using less than and less than equal to um now that",
    "start": "778760",
    "end": "785040"
  },
  {
    "text": "returns a condition um and then booleans in Java are zero or one under the hood",
    "start": "785040",
    "end": "790880"
  },
  {
    "text": "so we then say if it's true return zero if it's false return one and again we have a start node and a return",
    "start": "790880",
    "end": "799880"
  },
  {
    "text": "node um it starts to get more clear how these edges work when we start to talk about local variables so here we do a X",
    "start": "801000",
    "end": "808680"
  },
  {
    "text": "Plus Y and then we do a * 2 + a um if you notice here we have",
    "start": "808680",
    "end": "816839"
  },
  {
    "text": "A+ uh sorry x + y um and then that is used twice so this is represents the",
    "start": "816839",
    "end": "824440"
  },
  {
    "text": "value of a but there's it it's never stored in something called a in the graph it simply becomes edges so anyone",
    "start": "824440",
    "end": "830199"
  },
  {
    "text": "who uses a simply gets connected to the expression which produces a",
    "start": "830199",
    "end": "837759"
  },
  {
    "text": "um and also notice we have um the multiplied by two it's been converted by",
    "start": "837759",
    "end": "843279"
  },
  {
    "text": "the compiler into left shift by one which is a a common compiler optimization you may be aware of you've",
    "start": "843279",
    "end": "849000"
  },
  {
    "text": "done a sort of under undergraduate level compiler",
    "start": "849000",
    "end": "853720"
  },
  {
    "text": "course um that red line becomes more complicated the red line is the the control flow if we have um some control",
    "start": "855199",
    "end": "862399"
  },
  {
    "text": "flow so we have an if we have the red line diverges out so now there's two paths to get down to the return",
    "start": "862399",
    "end": "868720"
  },
  {
    "text": "depending on which side was taken of the if um the reason for the store field in",
    "start": "868720",
    "end": "873959"
  },
  {
    "text": "here is just to make sure there's there's something that has to happen so the if sticks around doesn't get optimized away um and you see the if",
    "start": "873959",
    "end": "880720"
  },
  {
    "text": "takes a condition um and as I said because the Boolean",
    "start": "880720",
    "end": "886120"
  },
  {
    "text": "represented 01 in Java it actually compares the parameter against zero comparing it um against",
    "start": "886120",
    "end": "895600"
  },
  {
    "start": "897000",
    "end": "1002000"
  },
  {
    "text": "false why can this be hard right this is a a useful way to look at programs well I've shown fairly small programs before",
    "start": "897360",
    "end": "904480"
  },
  {
    "text": "um and there's lots of reasons why this gets really hard really quickly so this is a a non this is still a trivial Java",
    "start": "904480",
    "end": "912440"
  },
  {
    "text": "um method written out as a graph and I can't even put it on one slide it gets so complicated so quickly and it gets",
    "start": "912440",
    "end": "918440"
  },
  {
    "text": "almost impossible to to read they get very large very quickly um graphs are",
    "start": "918440",
    "end": "924160"
  },
  {
    "text": "nonlinear as well so this is a an abstract from a graph um um you can't",
    "start": "924160",
    "end": "930480"
  },
  {
    "text": "read this right you can't read it from top to bottom very well you can't read it from left to right it's just a sort",
    "start": "930480",
    "end": "936519"
  },
  {
    "text": "of amorphus blob we call it a a CA of nodes or a soup of nodes um if you",
    "start": "936519",
    "end": "941800"
  },
  {
    "text": "noticed there's things beneath the return but obviously they aren't run",
    "start": "941800",
    "end": "947399"
  },
  {
    "text": "after the return so it can be hard to read um they're inherently cyclic so",
    "start": "947399",
    "end": "952600"
  },
  {
    "text": "they're not trees they're Nots they're they're graphs with Cycles so here this this code has a loop in it so it Loops",
    "start": "952600",
    "end": "959240"
  },
  {
    "text": "from this node here back up to this one and runs in a cycle so this is a a while loop or something like that um and I",
    "start": "959240",
    "end": "966639"
  },
  {
    "text": "think humans just aren't particularly great at understanding cycles and things so trying to reason about where in the",
    "start": "966639",
    "end": "972519"
  },
  {
    "text": "program it is from the cycle is is complicated they can be just hard to draw so even when they're not large they",
    "start": "972519",
    "end": "979160"
  },
  {
    "text": "can be tricky to draw and this is example of um igv IDE ideal graph",
    "start": "979160",
    "end": "984360"
  },
  {
    "text": "visualize the other tool getting it slightly wrong so this is has lots of things sort of crossing over over each other when ideally they wouldn't and",
    "start": "984360",
    "end": "991399"
  },
  {
    "text": "this is part of the reason why we built seafoam at Shopify so uh laying out these graphs can be very tricky and it",
    "start": "991399",
    "end": "997319"
  },
  {
    "text": "gets trickier as they get more more non-trivial so what could we do instead",
    "start": "997319",
    "end": "1004399"
  },
  {
    "start": "1002000",
    "end": "1129000"
  },
  {
    "text": "uh this is the idea I'm sort of floating at this conference in some and in some other venues um how about we decompile these",
    "start": "1004399",
    "end": "1012399"
  },
  {
    "text": "graphs right the jet compiler takes these graphs that's using to compile your Java code and it produces machine",
    "start": "1012399",
    "end": "1018079"
  },
  {
    "text": "code from them um perhaps we could take the graphs and produce something else instead um",
    "start": "1018079",
    "end": "1024240"
  },
  {
    "text": "perhaps we could produce some sort of sud sudo Java code so something that's sort of readable like Java is um so not",
    "start": "1024240",
    "end": "1034079"
  },
  {
    "text": "not a graphical representation but still allows us to understand what the compiler is doing by looking at um",
    "start": "1034079",
    "end": "1039558"
  },
  {
    "text": "similar things within the within the compiler so here's a a simple example",
    "start": "1039559",
    "end": "1044839"
  },
  {
    "text": "we've got the the same arithmetic operator from before and what I'm doing now is I'm decompiling that to a kind of",
    "start": "1044839",
    "end": "1050600"
  },
  {
    "text": "pseudo code so it's the the same operations we saw before um but now",
    "start": "1050600",
    "end": "1055679"
  },
  {
    "text": "things are written out like a a compiler like a um a normal program I understand so T1 is the parameter zero so X T2 is",
    "start": "1055679",
    "end": "1064559"
  },
  {
    "text": "the parameter 1 so Y and then T4 is T1 plus T2 and then we return",
    "start": "1064559",
    "end": "1071559"
  },
  {
    "text": "T4 and this is all within a something we call a a block so there's a a label like",
    "start": "1071559",
    "end": "1077480"
  },
  {
    "text": "you would with Goto in C and things like that um so it's a pseudo code it's not not really Java code but this helps",
    "start": "1077480",
    "end": "1084320"
  },
  {
    "text": "understand what's going on so now now the the graph we have is much more linear and you can read it from top to",
    "start": "1084320",
    "end": "1089720"
  },
  {
    "text": "bottom and left from right like you would do with Java",
    "start": "1089720",
    "end": "1095600"
  },
  {
    "text": "code um if we look at an example with control flow",
    "start": "1095960",
    "end": "1102960"
  },
  {
    "text": "um here we have statements such as if T6 so and T6 is T1 = T5 there the",
    "start": "1102960",
    "end": "1109320"
  },
  {
    "text": "parameters and comparing and things then go to B1 else go to B2 and you can see",
    "start": "1109320",
    "end": "1114400"
  },
  {
    "text": "which code is run within those um what I'm trying to do over time is restore a",
    "start": "1114400",
    "end": "1119960"
  },
  {
    "text": "a structured if as well so you see if and you see curly brace for the true and then else and the curly bra for the the",
    "start": "1119960",
    "end": "1128440"
  },
  {
    "text": "false so what problems can we solve this and this is the um the so what and the the interesting bit from this whole talk",
    "start": "1128440",
    "end": "1135360"
  },
  {
    "text": "um we said we'd like to understand what the the jit compiler is doing gain gain more knowledge of how the the jit",
    "start": "1135360",
    "end": "1141080"
  },
  {
    "text": "compiler works and what it does and and maybe resolve some some queries in the workplace or online about what the the",
    "start": "1141080",
    "end": "1148480"
  },
  {
    "text": "jit compiler is doing or why and we can give a couple of concrete examples here",
    "start": "1148480",
    "end": "1153720"
  },
  {
    "text": "that I've seen people actually um debate um and not know how to answer um without",
    "start": "1153720",
    "end": "1159760"
  },
  {
    "text": "looking at the what the compilo is actually doing so lock alision uh you may not be",
    "start": "1159760",
    "end": "1165159"
  },
  {
    "text": "aware that if you have um two synchronized blocks next to each other each other and they synchronize on the same",
    "start": "1165159",
    "end": "1170960"
  },
  {
    "text": "object um then will Java release the lock between these two blocks right so",
    "start": "1170960",
    "end": "1177039"
  },
  {
    "text": "it's synchronizing on one object and then it's synchronizing on the object again um will it acquire and release the",
    "start": "1177039",
    "end": "1183200"
  },
  {
    "text": "monitor twice or will it acquire it once and then keep going um you may think why",
    "start": "1183200",
    "end": "1189400"
  },
  {
    "text": "would anyone write code like this in the first place well code like this tends end up after inlining for example so if",
    "start": "1189400",
    "end": "1195159"
  },
  {
    "text": "you wrote If you have two synchronized methods and they're called one after the other and they're both synchronized then",
    "start": "1195159",
    "end": "1200200"
  },
  {
    "text": "will Java release the lock between them or will it keep hold of them well we can",
    "start": "1200200",
    "end": "1205280"
  },
  {
    "text": "answer this for ourselves using um cfoam this tool we're talking about so",
    "start": "1205280",
    "end": "1214919"
  },
  {
    "text": "um um so what we have when we when the compiler starts if we look at the the",
    "start": "1216000",
    "end": "1221720"
  },
  {
    "text": "the graph decompiled this pseudo code before optimizations are applied we can see a monitor enter which is the start",
    "start": "1221720",
    "end": "1228400"
  },
  {
    "text": "of syned block and monitor exit which is the end of a synchronized block and you can see the the store field inside it um",
    "start": "1228400",
    "end": "1234120"
  },
  {
    "text": "and then we have acquire it again so we monitor ENT again we stall the second field and then we monitor exit again so",
    "start": "1234120",
    "end": "1240480"
  },
  {
    "text": "at the start of compilation there are two separate synchronized blocks and we require the lock once and we release it",
    "start": "1240480",
    "end": "1246200"
  },
  {
    "text": "record it again and release it um the first thing the compiler does",
    "start": "1246200",
    "end": "1251679"
  },
  {
    "text": "is it lowers it lowers the program this means it replaces um some high level",
    "start": "1251679",
    "end": "1257000"
  },
  {
    "text": "operations with some lower level operations so the program gets a little bit more complicated before it gets simpler but we can still see here we've",
    "start": "1257000",
    "end": "1263880"
  },
  {
    "text": "got an enter and an exit an enter an exit it's just there's some some more stuff about how to use the object that's",
    "start": "1263880",
    "end": "1270159"
  },
  {
    "text": "been expanded out but then as the compiler runs we can look at the graph the data structure inside the compiler",
    "start": "1270159",
    "end": "1275480"
  },
  {
    "text": "at a slightly later point and we can see actually it's combined the two synchronized blocks because we can see",
    "start": "1275480",
    "end": "1281919"
  },
  {
    "text": "ah now there's only one monitor enter or one monitor exit and the two field rights are actually right next to each",
    "start": "1281919",
    "end": "1287799"
  },
  {
    "text": "other so we can answer this for ourselves yes the the Java jit compiler or at least grow um I think hotspot does",
    "start": "1287799",
    "end": "1294640"
  },
  {
    "text": "as well will um will keep the lock while it runs to back toback synchronized",
    "start": "1294640",
    "end": "1300760"
  },
  {
    "text": "objects um we can answer that for ourselves by using decompilation and compile a graphs to look at what it's",
    "start": "1300760",
    "end": "1306679"
  },
  {
    "text": "doing and why another example um say we've got a a",
    "start": "1306679",
    "end": "1311760"
  },
  {
    "text": "vector object so it's got symbol X and Y um and let's say we've written everything quite a functional way so",
    "start": "1311760",
    "end": "1317360"
  },
  {
    "text": "it's final um and adding produces a new Vector um and then if we want to sum but",
    "start": "1317360",
    "end": "1324159"
  },
  {
    "text": "only get the X component we would do a add and then get X um now",
    "start": "1324159",
    "end": "1330640"
  },
  {
    "text": "the the query is does this allocate a temporary Vector object um some people will say yes it will some people say no",
    "start": "1330640",
    "end": "1337320"
  },
  {
    "text": "it won't the jit compiler will get rid of it well let's let's find out by asking the jit compiler um and again this is this is covered in a blog post",
    "start": "1337320",
    "end": "1343720"
  },
  {
    "text": "in much more more depth um but here we go when the jit compiler starts running before it starts optimizing we can see",
    "start": "1343720",
    "end": "1349919"
  },
  {
    "text": "it creates a new Vector object and we can see it um stores into the vector and",
    "start": "1349919",
    "end": "1357279"
  },
  {
    "text": "then it loads out just X to return it so it returns T10 and T10 is loading out the X from the object it just allocated",
    "start": "1357279",
    "end": "1364559"
  },
  {
    "text": "but if we let the compiler run we let Escape analysis run which is an optimization to get rid of object",
    "start": "1364559",
    "end": "1370000"
  },
  {
    "text": "allocations we can see ah right all it does is it takes the the vector two",
    "start": "1370000",
    "end": "1376080"
  },
  {
    "text": "vectors in you can see it loads X from the first one loads X from the second one it adds them and returns them so",
    "start": "1376080",
    "end": "1383240"
  },
  {
    "text": "aori wrote a a method which looks like it allocates an object looks a bit wasteful we can see actually jit",
    "start": "1383240",
    "end": "1389039"
  },
  {
    "text": "compiler can show us that it is removing that allocation and actually it's doing what you might do if you manually",
    "start": "1389039",
    "end": "1395559"
  },
  {
    "text": "optimized it um something that um cfoam can also",
    "start": "1395559",
    "end": "1402320"
  },
  {
    "text": "do if you still want to see assembly cfoam can also show you assembly so it includes a tool called um CFG 2 ASM um",
    "start": "1402320",
    "end": "1409720"
  },
  {
    "text": "and this tool doesn't need that annoying HD file um and it will give you some",
    "start": "1409720",
    "end": "1415360"
  },
  {
    "text": "assembly output as well so we can see the assembly if we want to with our tool but we can also use it to answer",
    "start": "1415360",
    "end": "1421360"
  },
  {
    "text": "questions like World legit compiler compile combine my synchronized blocks",
    "start": "1421360",
    "end": "1426840"
  },
  {
    "text": "and we can use it to answer questions like will legit compiler remove the allocation of this object which I think",
    "start": "1426840",
    "end": "1432880"
  },
  {
    "text": "isn't needed so that's just a little Jaun through the grow jit compiler and the",
    "start": "1432880",
    "end": "1438159"
  },
  {
    "text": "grow graphical intermediate representation and cfoam and decompilation and how I think it can be",
    "start": "1438159",
    "end": "1444000"
  },
  {
    "text": "used can also be used for other application such as looking at how Ruby is compiled by troper Ruby or looking at",
    "start": "1444000",
    "end": "1451200"
  },
  {
    "text": "how your code is compiled by ahead of time or aot compilers like native image",
    "start": "1451200",
    "end": "1456960"
  },
  {
    "text": "from the grow VM if you're using that it's a prototype development Tool uh not a product uh it's open source and on",
    "start": "1456960",
    "end": "1464159"
  },
  {
    "text": "GitHub if you'd like to use it or improve it please get in touch and share what you're doing with it thanks very",
    "start": "1464159",
    "end": "1470200"
  },
  {
    "text": "much for listening thank you Chris um this was",
    "start": "1470200",
    "end": "1478480"
  },
  {
    "start": "1472000",
    "end": "1594000"
  },
  {
    "text": "awesome I have a few questions I think maybe the audience uh would like uh a",
    "start": "1478480",
    "end": "1485320"
  },
  {
    "text": "little bit of background on HS this because I know we we you spoke about it",
    "start": "1485320",
    "end": "1491000"
  },
  {
    "text": "uh so the for the um it's basically associated with the hotspot disassembly",
    "start": "1491000",
    "end": "1496279"
  },
  {
    "text": "and that's why it's HS for hot but um but would you like to provide how it's",
    "start": "1496279",
    "end": "1502440"
  },
  {
    "text": "uh dependent it's different for different architectures and how it's depending on the assembly yeah so it's",
    "start": "1502440",
    "end": "1508559"
  },
  {
    "text": "effectively a plug-in architecture so the idea is that hotspot can um dump out machine code by default will just give",
    "start": "1508559",
    "end": "1515000"
  },
  {
    "text": "you the raw bites which almost nobody can use to do something useful um even",
    "start": "1515000",
    "end": "1520279"
  },
  {
    "text": "someone who experience of working machine code so they raise a plug-in architecture where you can plug in a tool to do something else with it and",
    "start": "1520279",
    "end": "1526760"
  },
  {
    "text": "normally you just print out the um the actual assembly code that you'd like to see if you used a debug or",
    "start": "1526760",
    "end": "1532520"
  },
  {
    "text": "something like that now for complicated licensing reasons that I don't fully understand and I'm not a lawyer so I",
    "start": "1532520",
    "end": "1538919"
  },
  {
    "text": "would choose to try and explain it can't be bundled by default I think they use I",
    "start": "1538919",
    "end": "1544120"
  },
  {
    "text": "it's built on a library that um isn't compatible with GPL and the way it's used in hotspot um but the reason",
    "start": "1544120",
    "end": "1550760"
  },
  {
    "text": "doesn't matter why the problem is that means that people won't distribute it normally so you have to go and find your",
    "start": "1550760",
    "end": "1556320"
  },
  {
    "text": "own so you go and download one from a dodgy website well there's some reputable ones as well or you can try",
    "start": "1556320",
    "end": "1561520"
  },
  {
    "text": "and build it yourself but it's a bit of an awkward piece of software just to build so building parts of jdk on their",
    "start": "1561520",
    "end": "1567799"
  },
  {
    "text": "own aren't very fun um but they're trying to improve this actually so as well as using a tool like um cfone where",
    "start": "1567799",
    "end": "1575399"
  },
  {
    "text": "the machine gun gets written into a log and then you can use that tool offline to decompile it I think they're trying",
    "start": "1575399",
    "end": "1580480"
  },
  {
    "text": "to plug in now standard permissively licensed um decompiler the situation should get better in the future but at",
    "start": "1580480",
    "end": "1587520"
  },
  {
    "text": "the moment is a really awkward little wart on trying to look at assembly",
    "start": "1587520",
    "end": "1592880"
  },
  {
    "text": "yeah that's true when we did the windows on our import uh of course we had to uh",
    "start": "1592880",
    "end": "1598279"
  },
  {
    "start": "1594000",
    "end": "1707000"
  },
  {
    "text": "generate our own uh have our own HS disc for Windows and arm and we used the lmbm",
    "start": "1598279",
    "end": "1604240"
  },
  {
    "text": "uh compiler to do that and now I think we're trying to get it out to open jdk so that it can",
    "start": "1604240",
    "end": "1611760"
  },
  {
    "text": "be uh you know it's kind of better licensing agreement and everything so it could be a part of open jdk so let's see",
    "start": "1611760",
    "end": "1617520"
  },
  {
    "text": "where we uh get with that um I had another question but I want to check if somebody oh there is a question in the",
    "start": "1617520",
    "end": "1625200"
  },
  {
    "text": "chat so there's a question about Native image yeah so um Native image if you're",
    "start": "1625200",
    "end": "1630320"
  },
  {
    "text": "not aware is um a compiler from java code to Native machine code in the same",
    "start": "1630320",
    "end": "1635600"
  },
  {
    "text": "way that a traditional C compiler runs so you give it class files and it produces an executable and that's a",
    "start": "1635600",
    "end": "1641679"
  },
  {
    "text": "standalone exus includes everything you need to run it um the great thing about grow is it actually does this by running",
    "start": "1641679",
    "end": "1647600"
  },
  {
    "text": "the same compiler as the growl jit compiler just slightly reconfigured so it doesn't need any extra support um and",
    "start": "1647600",
    "end": "1654960"
  },
  {
    "text": "then they write the the machine code out the disk and you can use cfoam and the",
    "start": "1654960",
    "end": "1660080"
  },
  {
    "text": "decompiler to look at how it's compiled that ahead of time code EXA the same way so you can see what code you're really",
    "start": "1660080",
    "end": "1666880"
  },
  {
    "text": "going to run I think Native image also produces some other logs in the same graph file format so I think it might",
    "start": "1666880",
    "end": "1672760"
  },
  {
    "text": "give you some information about which classes call methods on which other classes that so I think you can use at",
    "start": "1672760",
    "end": "1678399"
  },
  {
    "text": "that as well um and also um if you know about truffle I won't spend ages explaining Truffle in depth because it's",
    "start": "1678399",
    "end": "1684279"
  },
  {
    "text": "not massively relevant but if you use truffle which is a system for building compilers automatically you can use it",
    "start": "1684279",
    "end": "1689559"
  },
  {
    "text": "to understand what trle is doing and why um and lots of lots of data structures",
    "start": "1689559",
    "end": "1695399"
  },
  {
    "text": "and compiled of graphs um so it's like a a common point of communication and a common point of",
    "start": "1695399",
    "end": "1702240"
  },
  {
    "text": "tools for understanding compilers is being able to look at things in these these graph representations there's another a",
    "start": "1702240",
    "end": "1708360"
  },
  {
    "start": "1707000",
    "end": "1847000"
  },
  {
    "text": "question about how this will help with with finding out errors at the time of",
    "start": "1708360",
    "end": "1715080"
  },
  {
    "text": "compilation so it's pretty rare that there's an error from the jit compiler so remember we're making a distinction",
    "start": "1715080",
    "end": "1720640"
  },
  {
    "text": "here between the the head of the the the Java source code to class file compil that's Java C and we're not talking",
    "start": "1720640",
    "end": "1726799"
  },
  {
    "text": "about that so we're talking about when at run time or ahead of time it's compiled to machine code um and it's",
    "start": "1726799",
    "end": "1733679"
  },
  {
    "text": "extremely rare for the compiler to mcomp something if it does then yes C phon very good tool for using that um I think",
    "start": "1733679",
    "end": "1740240"
  },
  {
    "text": "something's gone pretty wrong if a even a advanced application developer is trying to debug the jit",
    "start": "1740240",
    "end": "1747039"
  },
  {
    "text": "compiler um but we could um we could expand your definition of Errors to be",
    "start": "1747039",
    "end": "1752159"
  },
  {
    "text": "compiled in a way you didn't like so if you are expecting the jit compiler or depending on the jit compiler to work in",
    "start": "1752159",
    "end": "1758360"
  },
  {
    "text": "a certain way so we have people who for example build High lat low latency",
    "start": "1758360",
    "end": "1763399"
  },
  {
    "text": "applications and they don't want any allocations for example what they could do with cfoam they could look at all the",
    "start": "1763399",
    "end": "1769240"
  },
  {
    "text": "graphs involved in their application and they could programmatically detect if there were things they didn't like so",
    "start": "1769240",
    "end": "1775240"
  },
  {
    "text": "you could actually use it to test that your program isn't allocating anything um and you can do that for more more",
    "start": "1775240",
    "end": "1781679"
  },
  {
    "text": "subtle things as well something we did at Shopify once is we were trying to add a a new optimization for boxing so you",
    "start": "1781679",
    "end": "1787720"
  },
  {
    "text": "know boxing is where you have a capital I integer and U we had some things being boxed and unboxed that we didn't think",
    "start": "1787720",
    "end": "1794200"
  },
  {
    "text": "should be and we wanted to argue to the the Oracle team that they should um Implement a better optimization to get",
    "start": "1794200",
    "end": "1800279"
  },
  {
    "text": "rid of them and Oracle said well we don't think it's that um relevant this probably doesn't appear in reality so what we did was we dumped out all the",
    "start": "1800279",
    "end": "1806840"
  },
  {
    "text": "graphs for running our production application and because cfoam is a a library as well as a combinal",
    "start": "1806840",
    "end": "1812880"
  },
  {
    "text": "application we wrote a little program to use the library do query how often this pattern of boxing and unboxing appeared",
    "start": "1812880",
    "end": "1820039"
  },
  {
    "text": "and we could say Well it appears in this perent of graphs and this percent of time is being done unnecessarily and",
    "start": "1820039",
    "end": "1826880"
  },
  {
    "text": "things like that so you can use it to reason about your code and how it's being compiled and we're think about using it in tests so to sort of you know",
    "start": "1826880",
    "end": "1833840"
  },
  {
    "text": "test that something is compiled in the way we like rather than manually checking it or monitoring performance if",
    "start": "1833840",
    "end": "1840480"
  },
  {
    "text": "you want to test it in CI you can check the graph and say ah it has compiled like I wanted that's good and",
    "start": "1840480",
    "end": "1846440"
  },
  {
    "text": "assertive I think the last question that was there about how do you find it",
    "start": "1846440",
    "end": "1851480"
  },
  {
    "start": "1847000",
    "end": "2092000"
  },
  {
    "text": "helpful to find uh during the optimize the running time of the",
    "start": "1851480",
    "end": "1856880"
  },
  {
    "text": "code I think you answered with your example [Music]",
    "start": "1856880",
    "end": "1862639"
  },
  {
    "text": "um there is one asking about no additional",
    "start": "1862639",
    "end": "1867760"
  },
  {
    "text": "optimizations and recompilations to machine code and application runtime so I'm not sure um yeah so not all code is",
    "start": "1867760",
    "end": "1875600"
  },
  {
    "text": "is just in time compiled but if it if it doesn't get just in time compiled then by definition you're not interested in",
    "start": "1875600",
    "end": "1881559"
  },
  {
    "text": "what theit compiler would do of it because it hasn't been called enough to to make it useful to do so uh um but",
    "start": "1881559",
    "end": "1888919"
  },
  {
    "text": "something you can do is you can understand why code's been recompiled so often you'll see um say you have um code",
    "start": "1888919",
    "end": "1896440"
  },
  {
    "text": "which goes to one of two branches and it says if x then do this if y then do this and if your program starts off by just",
    "start": "1896440",
    "end": "1902960"
  },
  {
    "text": "calling X then it'll only compile X into the generator code and it'll leave y as",
    "start": "1902960",
    "end": "1908200"
  },
  {
    "text": "like a cut off part that says we won't won't that we've never seen that happen so we won't compile that and then you",
    "start": "1908200",
    "end": "1913679"
  },
  {
    "text": "can see the second time it's compiled if you start using Y it'll compile Y in you can see which parts of your code have",
    "start": "1913679",
    "end": "1919600"
  },
  {
    "text": "been compiled in or not um so you can see if things like your your error",
    "start": "1919600",
    "end": "1924960"
  },
  {
    "text": "conditions or your say say you write a method that has um something that's designed to handle most cases and then",
    "start": "1924960",
    "end": "1930639"
  },
  {
    "text": "something that's designed to handle degenerate cases that you only encounter rarely if you look at your graph and you",
    "start": "1930639",
    "end": "1936320"
  },
  {
    "text": "see the degenerate Cas is being used then you think oh my optimization isn't quite working I'd like to not compile",
    "start": "1936320",
    "end": "1944559"
  },
  {
    "text": "that um in native image if there is there no additional optimizations of recos machine code yes in Native image",
    "start": "1946360",
    "end": "1953880"
  },
  {
    "text": "um can't optimize quite as aggressively um in all cases as the the jit compiler",
    "start": "1953880",
    "end": "1960080"
  },
  {
    "text": "that's because of the jit compiler can optimize your code as it's actually being",
    "start": "1960080",
    "end": "1965240"
  },
  {
    "text": "used um so it can observe that the runtime values flowing through the program it's called profiling and Native",
    "start": "1965240",
    "end": "1971519"
  },
  {
    "text": "image has be a little bit more conservative because it doesn't know what value is going to run through your program um",
    "start": "1971519",
    "end": "1978880"
  },
  {
    "text": "so a good example in the system I work with is if you have a a function which adds together two numbers and one of the",
    "start": "1978880",
    "end": "1984679"
  },
  {
    "text": "numbers is always the same so say you have a function called add and it's only ever called with one and then another",
    "start": "1984679",
    "end": "1990519"
  },
  {
    "text": "number it'll turn that into an increment operator automatically because it sees what's it what the values actually",
    "start": "1990519",
    "end": "1998320"
  },
  {
    "text": "are um in how do you install it on Windows I'm not a Windows user sorry",
    "start": "1999120",
    "end": "2004559"
  },
  {
    "text": "monik um but it's it's it's a ruby so um it should work on Windows if you'd",
    "start": "2004559",
    "end": "2011000"
  },
  {
    "text": "like to try running it on Windows and it doesn't do what you'd like then please do open I will fix it as quickly as I",
    "start": "2011000",
    "end": "2017279"
  },
  {
    "text": "can um I'm trying to do a website version of as well so you can you can just run it online so you don't need to",
    "start": "2017279",
    "end": "2024120"
  },
  {
    "text": "um we're looking at doing a um like an atom version as well not atom",
    "start": "2024120",
    "end": "2030120"
  },
  {
    "text": "I mean um electron electron version so it's just a graphical application so it's a",
    "start": "2030120",
    "end": "2035559"
  },
  {
    "text": "bit easier to use how would you affect the running machine",
    "start": "2035559",
    "end": "2041000"
  },
  {
    "text": "code well that's where it gets tricky right so the graph can tell you what may not be ideal or may be wrong in your",
    "start": "2041000",
    "end": "2046679"
  },
  {
    "text": "mind but how you fix that is then up to you so um we do a lot of optimization",
    "start": "2046679",
    "end": "2052398"
  },
  {
    "text": "deep optimization of java staff in my job because if we're implementing another language Ruby on top of java so",
    "start": "2052399",
    "end": "2058599"
  },
  {
    "text": "we're trying to make that fast so it's fast for everyone else um and what we do",
    "start": "2058599",
    "end": "2064040"
  },
  {
    "text": "is we look for things in the graph we think shouldn't be there that we don't want to be there so",
    "start": "2064040",
    "end": "2070158"
  },
  {
    "text": "um what's a good example um so if we see a method call we",
    "start": "2070159",
    "end": "2076200"
  },
  {
    "text": "think that should have been in lined I don't know why we're left with that call then we'll go and examine why that call",
    "start": "2076200",
    "end": "2081480"
  },
  {
    "text": "is still there and these graphs include qu of debugging information so you can query why that node where it came from",
    "start": "2081480",
    "end": "2088000"
  },
  {
    "text": "why it's still there so that that leads to one of my",
    "start": "2088000",
    "end": "2094679"
  },
  {
    "start": "2092000",
    "end": "2152000"
  },
  {
    "text": "questions what are the other options with respect to the dump grow. dump you said one was the one that you used but",
    "start": "2094679",
    "end": "2101400"
  },
  {
    "text": "can this support C form support other options and how deeper um yeah so um",
    "start": "2101400",
    "end": "2108400"
  },
  {
    "text": "what you can get it to do ultimately is you can get it to dump out the graph before and after every optimization but",
    "start": "2108400",
    "end": "2114079"
  },
  {
    "text": "there's um I don't know how many optimizations are on grow I'm guessing off top my head like 50 or something",
    "start": "2114079",
    "end": "2119359"
  },
  {
    "text": "like that 50 major phases um so that turns out to be a lot of files very quickly so the the number can set the",
    "start": "2119359",
    "end": "2125640"
  },
  {
    "text": "verocity of it so you may want to see major phases not all of them you get a",
    "start": "2125640",
    "end": "2130960"
  },
  {
    "text": "huge amount of files on your dis so you can configure how many numbers are seen how many how muchos is you can also get",
    "start": "2130960",
    "end": "2136880"
  },
  {
    "text": "it to only print graphs for certain methods and you can just constrain what you see so you get lower volume of stuff",
    "start": "2136880",
    "end": "2143280"
  },
  {
    "text": "it also makes your application run slur because it's doing a lot of IO to write out these graphs um things like",
    "start": "2143280",
    "end": "2149359"
  },
  {
    "text": "that so I'm G to give the fast um last minute uh last",
    "start": "2149359",
    "end": "2156720"
  },
  {
    "start": "2152000",
    "end": "2194000"
  },
  {
    "text": "question uh why do you use Ruby on top of the jvm is it for performance or is",
    "start": "2156720",
    "end": "2162079"
  },
  {
    "text": "it for the tools is there anything it's mostly for performance but also up tooling so grvm lets you run other",
    "start": "2162079",
    "end": "2168400"
  },
  {
    "text": "languages on top of the the jvm and um the jvm has absolutely World beating",
    "start": "2168400",
    "end": "2174200"
  },
  {
    "text": "functionality in terms of compilers and garbage Cs and stuff like that we'd like to reuse that for Ruby at Shopify um so",
    "start": "2174200",
    "end": "2181960"
  },
  {
    "text": "that's what we work on we're reimplementing Ruby on top of the jvm it's similar to another project might have heard of called J Ruby which is",
    "start": "2181960",
    "end": "2187599"
  },
  {
    "text": "also Ruby on the jbm but uh trying in a different way it's a probably got",
    "start": "2187599",
    "end": "2193440"
  },
  {
    "text": "thing so there's one more question but before that question uh I encourage",
    "start": "2193440",
    "end": "2198800"
  },
  {
    "start": "2194000",
    "end": "2310000"
  },
  {
    "text": "everybody to join us uh at the zoom room uh it'll be right after it's the link",
    "start": "2198800",
    "end": "2204680"
  },
  {
    "text": "right after the link for this particular session so click on the link please join us there um and uh please turn on your",
    "start": "2204680",
    "end": "2213000"
  },
  {
    "text": "cameras there and uh share your questions and thoughts over there as well I'll join Drop pop in there briefly",
    "start": "2213000",
    "end": "2219400"
  },
  {
    "text": "right after the session and I hope to see you there Chris as well um the last",
    "start": "2219400",
    "end": "2225119"
  },
  {
    "text": "question goes in your experience how often does cfoam lead to ref factoring of high level Java Ruby code versus",
    "start": "2225119",
    "end": "2232000"
  },
  {
    "text": "recommending new jit optimizations it's almost always um refactoring the Java code to make it",
    "start": "2232000",
    "end": "2237960"
  },
  {
    "text": "more amable so Java's optimizations work really really well and they're almost always good enough to do what we want",
    "start": "2237960",
    "end": "2243760"
  },
  {
    "text": "it's just sometimes you have to phrase your things in Java in a slightly different way to persuade it to to work",
    "start": "2243760",
    "end": "2250119"
  },
  {
    "text": "um and maybe we can make the optimizations better but there's there's complicated rules in the Java language",
    "start": "2250119",
    "end": "2255319"
  },
  {
    "text": "that um the jit compiler has to meet um so the jit compiler has to always be absolutely correct for your Java code as",
    "start": "2255319",
    "end": "2261280"
  },
  {
    "text": "per the spec so sometimes it's just a case of slightly restructuring your code a little bit refactoring um it's",
    "start": "2261280",
    "end": "2267440"
  },
  {
    "text": "important then to comment because it means we end up with Java code that on the face of it you think why would be written like that and there's a reason",
    "start": "2267440",
    "end": "2274040"
  },
  {
    "text": "that pleases the jit compiler and now I say that it doesn't sound great actually maybe we should make theit compile organizations",
    "start": "2274040",
    "end": "2281599"
  },
  {
    "text": "Better well thank you for your time uh Chris I'm so glad that you could join us at cuon and uh this was awesome and I",
    "start": "2282119",
    "end": "2290599"
  },
  {
    "text": "learned a lot from here um I'll see you in the zoom",
    "start": "2290599",
    "end": "2296240"
  },
  {
    "text": "room thank you all thanks",
    "start": "2296240",
    "end": "2301520"
  },
  {
    "text": "[Music]",
    "start": "2303120",
    "end": "2309410"
  }
]