[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "so I'm tilda my pronouns are daivam and I'm a developer vandals - Twilio I'm",
    "start": "3879",
    "end": "11259"
  },
  {
    "text": "happy that Q Khan invited me to speak even though apparently they value engineers / evangelists anyway I'm not",
    "start": "11259",
    "end": "20289"
  },
  {
    "text": "here to talk to you about twilly or anything related I'm here to talk to you today about using declarative api's in",
    "start": "20289",
    "end": "26859"
  },
  {
    "text": "an imperative world so first I'll give you some background on what the",
    "start": "26859",
    "end": "32230"
  },
  {
    "text": "difference between imperative and declarative api's are and why you'd want or need to integrate them so when I",
    "start": "32230",
    "end": "40120"
  },
  {
    "text": "wrote this talk earlier this year I was a software engineer working at github working on the atom editor so I might",
    "start": "40120",
    "end": "46780"
  },
  {
    "text": "say things like my team etc etc when I really mean my former team but anyway",
    "start": "46780",
    "end": "51940"
  },
  {
    "text": "I'm going to show you some nitty-gritty details about how my team at github integrated react which is a declarative",
    "start": "51940",
    "end": "57940"
  },
  {
    "text": "UI framework in with some imperative api's of the atom text editor and then",
    "start": "57940",
    "end": "63610"
  },
  {
    "text": "finally I'll talk about the rise of declarative UI programming for the web and what we can learn from the history",
    "start": "63610",
    "end": "70060"
  },
  {
    "text": "of languages and frameworks to make the future better for all of us so what even",
    "start": "70060",
    "end": "76840"
  },
  {
    "start": "75000",
    "end": "206000"
  },
  {
    "text": "is declarative programming declarative programming is done with declarations",
    "start": "76840",
    "end": "83819"
  },
  {
    "text": "rather than statements yeah okay what the hell does that even mean it's not",
    "start": "83819",
    "end": "91990"
  },
  {
    "text": "the greatest of definitions how about declarative programming",
    "start": "91990",
    "end": "97259"
  },
  {
    "text": "expresses the logic of a computation without describing its control flow yeah",
    "start": "97259",
    "end": "104170"
  },
  {
    "text": "that's still not really not really doing it for me so I came across this blog post from a",
    "start": "104170",
    "end": "111189"
  },
  {
    "text": "guy named Tyler McGinnis and that was where I found the clearest explanation which is that declarative programming is",
    "start": "111189",
    "end": "116979"
  },
  {
    "text": "about what you do not how you do it yeah",
    "start": "116979",
    "end": "122499"
  },
  {
    "text": "okay it's maybe maybe a little bit better so I'm going to ask you a",
    "start": "122499",
    "end": "128080"
  },
  {
    "text": "question and I'd like you to think of both imperative and declarative answers does anybody know what this thing is",
    "start": "128080",
    "end": "134620"
  },
  {
    "text": "that's that's not the declarative and imperative so this is the at the Exploratorium",
    "start": "134620",
    "end": "143079"
  },
  {
    "text": "there is a light art sculpture by an artist named Leo Villareal that did the",
    "start": "143079",
    "end": "148719"
  },
  {
    "text": "same he's the same artist that did the bay lights on the Bay Bridge and this is",
    "start": "148719",
    "end": "153849"
  },
  {
    "text": "super super cool it's got these really beautiful patterns it's not that far from here but the question that I",
    "start": "153849",
    "end": "159849"
  },
  {
    "text": "actually want you to think of declarative and imperative answers for are how do you get from the",
    "start": "159849",
    "end": "165519"
  },
  {
    "text": "Exploratorium to here or how do you from here to the Exploratorium so the",
    "start": "165519",
    "end": "175299"
  },
  {
    "text": "imperative answer would be to write on drum Street and point two miles turn right onto Washington Street because",
    "start": "175299",
    "end": "181689"
  },
  {
    "text": "turn-by-turn driving directions are imperative AF now the declarative",
    "start": "181689",
    "end": "190139"
  },
  {
    "text": "Nestico route of answer would be to pretend that this is the interface to a ride-sharing app ride-sharing can be",
    "start": "190139",
    "end": "197409"
  },
  {
    "text": "thought of as a declarative framework because you merely specify the address and then the turn-by-turn directions are",
    "start": "197409",
    "end": "203199"
  },
  {
    "text": "abstracted away from you which brings me to my next point which is that all",
    "start": "203199",
    "end": "209439"
  },
  {
    "start": "206000",
    "end": "288000"
  },
  {
    "text": "declarative approaches have an underlying imperative implementation",
    "start": "209439",
    "end": "214650"
  },
  {
    "text": "Computers at some level are still pretty stupid and they need clear and exact",
    "start": "214650",
    "end": "220060"
  },
  {
    "text": "directions on what to do so declarative Ness just another layer of abstraction can",
    "start": "220060",
    "end": "227680"
  },
  {
    "text": "anybody tell me what are some declarative programming paradigms that you might already be using yes sequel or",
    "start": "227680",
    "end": "238900"
  },
  {
    "text": "SQL I don't actually know what the right way to say it is definitely pretty declarative because when you're like",
    "start": "238900",
    "end": "244389"
  },
  {
    "text": "select star from table you don't have to specify like what partition that table lives on or anything like that anybody",
    "start": "244389",
    "end": "251259"
  },
  {
    "text": "else got a declarative paradigm yeah",
    "start": "251259",
    "end": "256900"
  },
  {
    "text": "react is a declarative framework I'm going to be talking a whole lot about that in a few minutes you're absolutely right anybody else",
    "start": "256900",
    "end": "267430"
  },
  {
    "text": "well we've got pure functioning programming languages such as almond",
    "start": "267430",
    "end": "272630"
  },
  {
    "text": "Haskell we've got configuration management languages like puppet and of course we",
    "start": "272630",
    "end": "279260"
  },
  {
    "text": "have good old-fashioned regular expressions so you're probably already using to HTML is declarative as well",
    "start": "279260",
    "end": "288490"
  },
  {
    "start": "288000",
    "end": "474000"
  },
  {
    "text": "what are the advantages one big advantage of declarative programming in particular is reducing a whole class of",
    "start": "288580",
    "end": "295430"
  },
  {
    "text": "bugs known as state management bugs so when I first became a software engineer",
    "start": "295430",
    "end": "300590"
  },
  {
    "text": "in 2013 and I got a job at Pinterest and I was so excited and then the first real",
    "start": "300590",
    "end": "305660"
  },
  {
    "text": "like meaty task that I got was to rewrite the Digital Millennium Copyright Act form funsies na Fonzie's but I",
    "start": "305660",
    "end": "315110"
  },
  {
    "text": "learned a whole lot about both state management bugs and requirements gathering from lawyers but for for the",
    "start": "315110",
    "end": "323060"
  },
  {
    "text": "purposes of today let's consider a much simpler interface so this is like a list",
    "start": "323060",
    "end": "329150"
  },
  {
    "text": "of names that you can add and remove things from and this list exists on I",
    "start": "329150",
    "end": "335090"
  },
  {
    "text": "don't know every website ever that's like please PLEASE invite all your friends so let's look at an imperative",
    "start": "335090",
    "end": "343850"
  },
  {
    "text": "implementation of this code which I forked from a code pen originally by Alberto Camino so here it takes 13 lines",
    "start": "343850",
    "end": "352460"
  },
  {
    "text": "of code to sync the UI with the state when you add a new thing to the list 13",
    "start": "352460",
    "end": "357830"
  },
  {
    "text": "lines of code just for that now granted we're using vanilla Dom API is here but using jQuery doesn't even help you all",
    "start": "357830",
    "end": "364490"
  },
  {
    "text": "that much but worse than the verbosity is that this is fragile AF there's so",
    "start": "364490",
    "end": "370460"
  },
  {
    "text": "many ways that can go wrong if for example you're adding two people with the same name and then you forgot to add",
    "start": "370460",
    "end": "376550"
  },
  {
    "text": "assigning a unique data ID attribute each item you're gonna have a bad time and this is just a demo like if you",
    "start": "376550",
    "end": "383180"
  },
  {
    "text": "think about how much more complex production code is than demo code it only gets worse from there because you",
    "start": "383180",
    "end": "389240"
  },
  {
    "text": "might have like some state that's mutated by different components outside of the the you know module that you're",
    "start": "389240",
    "end": "395090"
  },
  {
    "text": "just currently looking at now let's look at the same implemented in react",
    "start": "395090",
    "end": "400539"
  },
  {
    "text": "so react is a declarative UI framework and it gives you an explicit object that",
    "start": "400539",
    "end": "405879"
  },
  {
    "text": "represents a state which makes your code more concise and easier to read and",
    "start": "405879",
    "end": "411129"
  },
  {
    "text": "reason about and then the code for adding and removing people also becomes",
    "start": "411129",
    "end": "417280"
  },
  {
    "text": "simpler and less error-prone so there's one more concept I just to kind of",
    "start": "417280",
    "end": "424030"
  },
  {
    "text": "explained state to you a little bit how that works and react there's one more react thing you need to know to understand this talk which is props so",
    "start": "424030",
    "end": "431439"
  },
  {
    "text": "in react we have a component hierarchy so each component keeps track of its own state in that little cloud inside of it",
    "start": "431439",
    "end": "438340"
  },
  {
    "text": "and parent components he has data down to child components but child components",
    "start": "438340",
    "end": "443620"
  },
  {
    "text": "cannot do the same thing so child components can't pass data upwards the",
    "start": "443620",
    "end": "449979"
  },
  {
    "text": "data only flows one way and this data is called props so react is far from being",
    "start": "449979",
    "end": "459460"
  },
  {
    "text": "the only declarative UI framework that's popular right now angular and view are also great this talk is only about react",
    "start": "459460",
    "end": "466419"
  },
  {
    "text": "because it's what I know the best but please let's not get into framework Wars because I really don't like that",
    "start": "466419",
    "end": "474120"
  },
  {
    "start": "474000",
    "end": "564000"
  },
  {
    "text": "engineering just like life is all about making trade-offs and in order to do a good job of making trade-offs you need",
    "start": "475469",
    "end": "481990"
  },
  {
    "text": "to know what the good parts are and what the bad parts are so what are the bad",
    "start": "481990",
    "end": "487210"
  },
  {
    "text": "parts of declarative frameworks well I mentioned earlier the declarative nough",
    "start": "487210",
    "end": "493270"
  },
  {
    "text": "sizz merely another layer of abstraction and what do we know about abstractions",
    "start": "493270",
    "end": "499050"
  },
  {
    "text": "the artist Jenny Holzer would say that abstractions are a form of decadence and I kind of agree with that like we're",
    "start": "499050",
    "end": "505509"
  },
  {
    "text": "living these Bhuj huazi lives now where he don't care about the size of a pointer anymore but Jenny Holzer jokes",
    "start": "505509",
    "end": "513070"
  },
  {
    "text": "aside all abstraction is leaked and if you want to do something that a framework doesn't give you an affordance",
    "start": "513070",
    "end": "519399"
  },
  {
    "text": "for you're kind of hosed and another problem with declarative news is that it",
    "start": "519399",
    "end": "525670"
  },
  {
    "text": "is frequently accomplished via a domain-specific language so this is JSX which is how you write your templates",
    "start": "525670",
    "end": "531819"
  },
  {
    "text": "and react and made specific languages are another language that keeps up space on your",
    "start": "531819",
    "end": "537550"
  },
  {
    "text": "cognitive stack I know that JSX in particular is confusing to beginners",
    "start": "537550",
    "end": "542950"
  },
  {
    "text": "because I've tried to teach it and it looks like HTML but it's not HTML and it's confusing also even for people",
    "start": "542950",
    "end": "551350"
  },
  {
    "text": "who've been Aptus for a while like there's little differences that trip you up like raise your hand if you",
    "start": "551350",
    "end": "556600"
  },
  {
    "text": "have been caught up on the whole class name spelling differents thing yes see it's not just me it's a thing so now you",
    "start": "556600",
    "end": "566200"
  },
  {
    "text": "understand a little bit more about the difference between declarative and imperative api's let's talk about why",
    "start": "566200",
    "end": "572680"
  },
  {
    "text": "you might want to integrate them and also how to do that so what kinds of imperative API is exists in the wild",
    "start": "572680",
    "end": "579190"
  },
  {
    "text": "that you might want to integrate with well there's video api's because I work",
    "start": "579190",
    "end": "586810"
  },
  {
    "text": "at Twilio I'm contractually obligated to mention telephone api's just kidding",
    "start": "586810",
    "end": "592420"
  },
  {
    "text": "they don't they would actually make me say that but it is really cool let me know after this talk if you want to talk about any telephone api's there's",
    "start": "592420",
    "end": "599860"
  },
  {
    "text": "mapping and GIS applications they're animation libraries like WebGL and three",
    "start": "599860",
    "end": "606279"
  },
  {
    "text": "Jas and there's Adam so for those of you",
    "start": "606279",
    "end": "611620"
  },
  {
    "text": "who haven't heard or might not know about it Adam is a free open-source text editor built on web technologies like",
    "start": "611620",
    "end": "617800"
  },
  {
    "text": "HTML CSS and JavaScript adam has an API",
    "start": "617800",
    "end": "623290"
  },
  {
    "text": "and it's pretty darn imperative and you might wonder why that is well Adam was originally released in",
    "start": "623290",
    "end": "629410"
  },
  {
    "text": "2013 before the epidemic rise of declarative api's now of course if",
    "start": "629410",
    "end": "637630"
  },
  {
    "text": "you're integrating with an imperative API that your team owns like we were you got to ask yourself some hard questions",
    "start": "637630",
    "end": "643330"
  },
  {
    "text": "like should we just rewrite this API to be a little more declarative in our case",
    "start": "643330",
    "end": "648580"
  },
  {
    "text": "we decided against it because Adam has this rich awesome ecosystem of community packages and we'd either have to",
    "start": "648580",
    "end": "656580"
  },
  {
    "text": "maintain two versions of the API or force our entire ecosystem to update which is not cool so we decided against",
    "start": "656580",
    "end": "665500"
  },
  {
    "text": "it speaking of packages and Adam everything",
    "start": "665500",
    "end": "671160"
  },
  {
    "text": "is a package the tree view and the settings page you get a package everybody gets a package so the team I",
    "start": "671160",
    "end": "679560"
  },
  {
    "text": "specifically worked on maintain the atom package for the git and github integration that's built into the editor",
    "start": "679560",
    "end": "684720"
  },
  {
    "text": "which is what you see here so my talk is going to be specifically focused around that when integrating react with an",
    "start": "684720",
    "end": "693390"
  },
  {
    "start": "690000",
    "end": "940000"
  },
  {
    "text": "existing application how do you choose where to start well it kind of depends on your use case so if you have like an",
    "start": "693390",
    "end": "700350"
  },
  {
    "text": "existing fully imperative web app and you wanted to just start sprinkling react into it you might start at the",
    "start": "700350",
    "end": "706500"
  },
  {
    "text": "bottom and make your leaf nodes like little reusable buttons and stuff react",
    "start": "706500",
    "end": "711930"
  },
  {
    "text": "and then move upwards from there so the atom github integration was a brand new",
    "start": "711930",
    "end": "718740"
  },
  {
    "text": "package and so we took a top-down approach atom allows you to inject Dom trees into our arbitrary places so we",
    "start": "718740",
    "end": "725850"
  },
  {
    "text": "had a route react component and then our component hierarchy extending beneath it",
    "start": "725850",
    "end": "731640"
  },
  {
    "text": "kind of like this so at the leaf nodes",
    "start": "731640",
    "end": "737190"
  },
  {
    "text": "that's where we start integrating with the imperative atom api's we map each API that we care about on to react",
    "start": "737190",
    "end": "743730"
  },
  {
    "text": "component that maintains the declarative imperative boundary the first API I'm",
    "start": "743730",
    "end": "749940"
  },
  {
    "text": "going to talk about is the atom text editor which maps on to the text editor API text editor is responsible for any",
    "start": "749940",
    "end": "757589"
  },
  {
    "text": "state that's applied to a text editor so things like where your cursor is positioned do you have any blocks of",
    "start": "757589",
    "end": "764220"
  },
  {
    "text": "code folded do you have soft wrapping enabled you know things like that so I'm",
    "start": "764220",
    "end": "771209"
  },
  {
    "text": "showing you simplified versions of these components for the sake of readability and time so here we are using Adams",
    "start": "771209",
    "end": "778589"
  },
  {
    "text": "built-in pub/sub library composite disposable to subscribe to code the",
    "start": "778589",
    "end": "784399"
  },
  {
    "text": "events that the imperative code emits how many of you have used pub/sub before or familiar with it as an architectural",
    "start": "784399",
    "end": "790440"
  },
  {
    "text": "pattern cool for folks who have it it's basically like you can listen for events",
    "start": "790440",
    "end": "797310"
  },
  {
    "text": "that have specific names and then invoke a function or do something in response to those events so",
    "start": "797310",
    "end": "803540"
  },
  {
    "text": "here we're usually in composite disposable and then the did change cursor position prop is passed down from",
    "start": "803540",
    "end": "809569"
  },
  {
    "text": "the parent component so every time the the cursor changes position we update",
    "start": "809569",
    "end": "814850"
  },
  {
    "text": "and re-render the whole component tree below that now I'll be the first person to admit that this isn't the most",
    "start": "814850",
    "end": "821060"
  },
  {
    "text": "declarative possible approach that I can imagine it would be more declarative to actually pull the state of the cursors",
    "start": "821060",
    "end": "827870"
  },
  {
    "text": "into the component and so that it would no one to re-render itself but because you can have multiple cursors the API",
    "start": "827870",
    "end": "834379"
  },
  {
    "text": "for that gets pretty clunky and so to simplify and for readability we decided",
    "start": "834379",
    "end": "839509"
  },
  {
    "text": "to just you know pull using the atom API and then update when we needed to so",
    "start": "839509",
    "end": "846050"
  },
  {
    "text": "your code doesn't need to meet some perfectly you know declarative standard in order to work example number two is",
    "start": "846050",
    "end": "854810"
  },
  {
    "text": "the panel API so panels are containers on the edges of the editor window like",
    "start": "854810",
    "end": "860569"
  },
  {
    "text": "this pull request review component that was the last big feature that my team shipped before we left so here we take",
    "start": "860569",
    "end": "868550"
  },
  {
    "text": "advantage of react Dom create portal to start a new component tree somewhere and",
    "start": "868550",
    "end": "874100"
  },
  {
    "text": "the Dom away from our main tree then it knows how to render any children that it needs to render here we're using should",
    "start": "874100",
    "end": "883189"
  },
  {
    "text": "component update as a performance optimization when should component update is implemented your component",
    "start": "883189",
    "end": "888949"
  },
  {
    "text": "won't update every time it gets new props so in this example we only want to update if panels being kinder stone we",
    "start": "888949",
    "end": "896959"
  },
  {
    "text": "don't care about those other problems and then in component did update we call the imperative methods to actually show",
    "start": "896959",
    "end": "903170"
  },
  {
    "text": "or hide the panel with the atom API now don't use component will receive props",
    "start": "903170",
    "end": "908930"
  },
  {
    "text": "for this kind of performance optimization because it's deprecated and eventually it's not going to work in",
    "start": "908930",
    "end": "914480"
  },
  {
    "text": "newer versions our react and you're gonna have a bad time",
    "start": "914480",
    "end": "919389"
  },
  {
    "text": "an underrated performance pack is to clean up after yourself so when a",
    "start": "923560",
    "end": "930380"
  },
  {
    "text": "component is unmounted we need to make sure to clean up any listeners and then call the Adam API for actually",
    "start": "930380",
    "end": "936829"
  },
  {
    "text": "destroying the panel one problem that was particularly gnarly to solve was",
    "start": "936829",
    "end": "943579"
  },
  {
    "start": "940000",
    "end": "1075000"
  },
  {
    "text": "focus management so honestly part of my motivation for doing this talk was that I didn't understand the focus management",
    "start": "943579",
    "end": "950449"
  },
  {
    "text": "code very well and I wanted to just use to dive in and really learn it the solution involved refs riffs are reacts",
    "start": "950449",
    "end": "959360"
  },
  {
    "text": "dirty little secret and they allow you to reach in and manipulate the dom nodes directly imperative style reacts",
    "start": "959360",
    "end": "967430"
  },
  {
    "text": "documentation is like hmm you think you need refs huh are you sure are you sure",
    "start": "967430",
    "end": "972620"
  },
  {
    "text": "about that but the use cases it listed were integrating with an imperative API",
    "start": "972620",
    "end": "978350"
  },
  {
    "text": "and doing focus management we were doing both of those things we figured that we",
    "start": "978350",
    "end": "984350"
  },
  {
    "text": "were covered so this is like the boilerplate example from react Docs where you create a ref by calling create",
    "start": "984350",
    "end": "991880"
  },
  {
    "text": "ref and then you pass that ref to a Dom element in your JSX and then to actually",
    "start": "991880",
    "end": "998000"
  },
  {
    "text": "focus it you call ref dot current dot focus so we have a problem though at",
    "start": "998000",
    "end": "1007449"
  },
  {
    "text": "least in Adam land we had a problem which is that react doesn't guarantee that refs are available until the component is finished mounting but a",
    "start": "1007449",
    "end": "1014410"
  },
  {
    "text": "component doesn't finish mounting until all its children are mounted and this causes problems when a child needs to",
    "start": "1014410",
    "end": "1019660"
  },
  {
    "text": "consume a Dom node from its parent so our solution were ref holders ref",
    "start": "1019660",
    "end": "1025058"
  },
  {
    "text": "holders allow us to defer operations until the Dom node actually exists and otherwise failed gracefully so in a",
    "start": "1025059",
    "end": "1032860"
  },
  {
    "text": "parent we set the ref setter on our div and then pass the ref holder to a child component",
    "start": "1032860",
    "end": "1039510"
  },
  {
    "text": "in the child component which is what we're looking at here we use the observed method to defer actions until",
    "start": "1042530",
    "end": "1048438"
  },
  {
    "text": "the Dom node actually exists so RIF holder is an example of what's known as a maybe monad pattern if you're",
    "start": "1048439",
    "end": "1054860"
  },
  {
    "text": "giving a talk on functional programming which this like kind of sorta is you're required by law to explain monads don't",
    "start": "1054860",
    "end": "1062270"
  },
  {
    "text": "hate me I didn't make the rules but it's okay because monads are probably not as complicated as you as you maybe have",
    "start": "1062270",
    "end": "1068960"
  },
  {
    "text": "been led to believe it's basically like a burrito or you know like like a",
    "start": "1068960",
    "end": "1075800"
  },
  {
    "text": "tortilla like it's a wrapper for a thing so to get just a little bit more",
    "start": "1075800",
    "end": "1082580"
  },
  {
    "text": "technical use functions to wrap values in monads and then you can even nest",
    "start": "1082580",
    "end": "1087890"
  },
  {
    "text": "these wrappers inside of one another like some kind of Taco Bell burrito nightmare inception thing see I used to",
    "start": "1087890",
    "end": "1095420"
  },
  {
    "text": "be so confused about the whole idea of functional programming because all I heard was that side effects are bad and",
    "start": "1095420",
    "end": "1102230"
  },
  {
    "text": "I should feel bad but a lot of important computery things like reading from disk",
    "start": "1102230",
    "end": "1108070"
  },
  {
    "text": "entirely side effects then I learned functional programming is not about",
    "start": "1108070",
    "end": "1113780"
  },
  {
    "text": "avoiding side-effects entirely it's about isolating side-effects to specific parts of the code base so that",
    "start": "1113780",
    "end": "1120170"
  },
  {
    "text": "you you're aware that they're there you can you know make your code easier to",
    "start": "1120170",
    "end": "1125330"
  },
  {
    "text": "reason about and that's where these monads come in so values that are wrapped in for an example an IO monad",
    "start": "1125330",
    "end": "1131600"
  },
  {
    "text": "say hey here be side-effects tread accordingly now maybe monad is a special",
    "start": "1131600",
    "end": "1139580"
  },
  {
    "text": "kind of monad and it wraps values that might be null so that you can gracefully avoid null pointer exceptions or cannot",
    "start": "1139580",
    "end": "1146570"
  },
  {
    "text": "be structure undefined or whatever that looks like in your language of choice but maybe monads are also kind of where",
    "start": "1146570",
    "end": "1154850"
  },
  {
    "text": "the tortilla burrito metaphors start to fall apart because an empty tortilla is not going to protect you from anything",
    "start": "1154850",
    "end": "1160250"
  },
  {
    "text": "least of all the emptiness inside of your soul so I came up with a different",
    "start": "1160250",
    "end": "1166340"
  },
  {
    "text": "metaphor to explain maybe monads a social metaphor if you will so recently",
    "start": "1166340",
    "end": "1173300"
  },
  {
    "text": "I asked out this friend I had a crush on for a long time and I was like hey I'd really like to take you",
    "start": "1173300",
    "end": "1179029"
  },
  {
    "text": "on a date but if not it's totally okay and I'll never I'll never bring this up again",
    "start": "1179029",
    "end": "1184220"
  },
  {
    "text": "it's like saying no can be really hard and with good reason right like a lot of people really don't handle rejection",
    "start": "1184220",
    "end": "1189919"
  },
  {
    "text": "well so I don't blame anybody who's afraid to say no so I wrapped my request",
    "start": "1189919",
    "end": "1195860"
  },
  {
    "text": "for a date in like a social maybe monad to signal that I would handle it gracefully if her desire to date me was",
    "start": "1195860",
    "end": "1202370"
  },
  {
    "text": "null now of course you can't just signal that then you actually have to handle the rejection gracefully which could be",
    "start": "1202370",
    "end": "1208580"
  },
  {
    "text": "a whole other talk so we're not even gonna worry about that but anyway I was like call me maybe monad and she said",
    "start": "1208580",
    "end": "1220250"
  },
  {
    "text": "yes so another more JavaScript D way of explaining monads is that a promise lets",
    "start": "1220250",
    "end": "1226880"
  },
  {
    "text": "us write code without worrying about whether our asynchronous data has arrived or not and similarly and maybe",
    "start": "1226880",
    "end": "1232130"
  },
  {
    "text": "monad lets us write code without worrying about whether our data exists or not and this isn't this definition of one of",
    "start": "1232130",
    "end": "1239149"
  },
  {
    "text": "moneda is is probably not helpful if you're like learning half-scale or something but like you can add those",
    "start": "1239149",
    "end": "1244760"
  },
  {
    "text": "additional layers of complexity when you need them I'm a fan of making things simple to begin with and then adding on",
    "start": "1244760",
    "end": "1250490"
  },
  {
    "text": "from there so don't at me about funk doors or category theory okay okay",
    "start": "1250490",
    "end": "1257110"
  },
  {
    "text": "anyway focus so Adam uses commands to oops move focus back and forth between",
    "start": "1257110",
    "end": "1264620"
  },
  {
    "text": "elements which is important for keyboard users or for people who can't use a",
    "start": "1264620",
    "end": "1271130"
  },
  {
    "text": "mouse because of accessibility reasons and just power users that know that a lot of times mousing it wastes time so I",
    "start": "1271130",
    "end": "1277970"
  },
  {
    "text": "understand focus management I need to explain the commands API of Adam that we're going to integrate with so the",
    "start": "1277970",
    "end": "1285980"
  },
  {
    "text": "command registry lets you associate listener functions with context with commands in a context-sensitive way",
    "start": "1285980",
    "end": "1291980"
  },
  {
    "text": "using CSS selectors and it kind of makes sense because Adam is built on top of a browser the command registry is",
    "start": "1291980",
    "end": "1300440"
  },
  {
    "text": "essentially global because we're using the style of event handling notice event delegation which is popularized by",
    "start": "1300440",
    "end": "1305840"
  },
  {
    "text": "jQuery so as the as the event bubbles up or through the Dom all registered event listeners are",
    "start": "1305840",
    "end": "1312859"
  },
  {
    "text": "invoked in order of specificity which mimics the CSS cascade so we have this",
    "start": "1312859",
    "end": "1320119"
  },
  {
    "text": "command react component which wraps the command registry API and allows you to add new commands so annoyingly because",
    "start": "1320119",
    "end": "1328369"
  },
  {
    "text": "we're using the event delegation pattern the command registry is essentially global and since as I mentioned before",
    "start": "1328369",
    "end": "1335599"
  },
  {
    "text": "react has one-way data-binding we needed to pass this component all the way down",
    "start": "1335599",
    "end": "1340940"
  },
  {
    "text": "from our component tree to like anywhere we wanted to register listener for a command as a matter of fact a lot of the",
    "start": "1340940",
    "end": "1348019"
  },
  {
    "text": "atom api's had this problem where they just want a ton of drops that need to be drilled down through our entire deep",
    "start": "1348019",
    "end": "1353149"
  },
  {
    "text": "component tree and at the time that I left the team we hadn't really found a great solution for this like we tended",
    "start": "1353149",
    "end": "1360139"
  },
  {
    "text": "to spread our props but in my opinion that is a code smell because props",
    "start": "1360139",
    "end": "1365629"
  },
  {
    "text": "the reason they prop types exist is for human readability right like you want to make it clear what are the dependencies",
    "start": "1365629",
    "end": "1371869"
  },
  {
    "text": "of this component so if you're just using the spread operator and passing down the props in the component use that",
    "start": "1371869",
    "end": "1377869"
  },
  {
    "text": "human readability so we had some ideas to resolve this like using the context",
    "start": "1377869",
    "end": "1384349"
  },
  {
    "text": "API that was introduced in react 16.3 and maybe some hooks to make it a little less repetitive there was some reason",
    "start": "1384349",
    "end": "1390889"
  },
  {
    "text": "that we couldn't use redux I don't remember what it was don't add me about that either anyway where was I all right",
    "start": "1390889",
    "end": "1398479"
  },
  {
    "text": "focus so we move focus around by registering atom commands in a root",
    "start": "1398479",
    "end": "1404690"
  },
  {
    "text": "react component which is the code I'm showing here we have these ref holders that can be passed a child components in",
    "start": "1404690",
    "end": "1410989"
  },
  {
    "text": "order to move the focus around and then we also have an event handler that keeps track of the last focus position every",
    "start": "1410989",
    "end": "1419419"
  },
  {
    "text": "time focus changes to an element that's a descendant as component the event handler fires and sets visit last focus",
    "start": "1419419",
    "end": "1426499"
  },
  {
    "text": "which falls back to a sensible default and then we pass that ref down any child",
    "start": "1426499",
    "end": "1432769"
  },
  {
    "text": "components that have focusable elements all of these child components gotta",
    "start": "1432769",
    "end": "1437989"
  },
  {
    "text": "implement an acid called remember focus which inspects the event target and then no way to restore the focus to",
    "start": "1437989",
    "end": "1444680"
  },
  {
    "text": "and then when it's actually time to restore the focus we call focus",
    "start": "1444680",
    "end": "1451340"
  },
  {
    "text": "imperative Leon the proper element so",
    "start": "1451340",
    "end": "1460400"
  },
  {
    "start": "1459000",
    "end": "1569000"
  },
  {
    "text": "one important use case for the good integration is that we wanted users to be able to switch seamlessly back and",
    "start": "1460400",
    "end": "1467690"
  },
  {
    "text": "forth between get in their editor and get on the command line because there's some some parts of get on the command",
    "start": "1467690",
    "end": "1473420"
  },
  {
    "text": "line that we didn't have support for but we wanted like your you know all your stage files and stuff to be in the same",
    "start": "1473420",
    "end": "1478490"
  },
  {
    "text": "state which meant that we had another imperative API to encapsulate which was",
    "start": "1478490",
    "end": "1483950"
  },
  {
    "text": "git so the architecture for our get encapsulation is vaguely like this so we",
    "start": "1483950",
    "end": "1492140"
  },
  {
    "text": "have these model objects which are playing JavaScript classes that were represent get entities such as repositories and then we have the model",
    "start": "1492140",
    "end": "1501200"
  },
  {
    "text": "observer which gives us a consistent imperative kind of API for fetching just the data that we need from our models",
    "start": "1501200",
    "end": "1507320"
  },
  {
    "text": "and I'll show you what this looks like in code in a few minutes so the models emit events and then the model observer",
    "start": "1507320",
    "end": "1513650"
  },
  {
    "text": "does stuff and respond to those events oh hey pub/sub nice to see you again and",
    "start": "1513650",
    "end": "1519110"
  },
  {
    "text": "then we have observed model which is a react component an observed model gives us some state where our data lives as",
    "start": "1519110",
    "end": "1525350"
  },
  {
    "text": "well as letting us define function to fetch data so I know that like model",
    "start": "1525350",
    "end": "1530600"
  },
  {
    "text": "observer and observed model is kind of a confusing naming scheme or at least I found it to be so but I don't know what",
    "start": "1530600",
    "end": "1537740"
  },
  {
    "text": "I don't know that I could have come up with anything better because naming things is hard so when we use the",
    "start": "1537740",
    "end": "1545330"
  },
  {
    "text": "observed model component we specify exactly what data we want from the repository model in our fetch data",
    "start": "1545330",
    "end": "1551270"
  },
  {
    "text": "function and then observe model also",
    "start": "1551270",
    "end": "1556760"
  },
  {
    "text": "takes a render profit we can use to say hey here's what our loading state looks like here's what our error state looks",
    "start": "1556760",
    "end": "1562760"
  },
  {
    "text": "like please render this according to the data that we have so now you have a",
    "start": "1562760",
    "end": "1571100"
  },
  {
    "start": "1569000",
    "end": "1659000"
  },
  {
    "text": "high-level overview of how the atom editor team any greater to react with some",
    "start": "1571100",
    "end": "1577400"
  },
  {
    "text": "imperative API is that we had to work with let's put that knowledge in the",
    "start": "1577400",
    "end": "1582440"
  },
  {
    "text": "context of the bigger picture so if declarative you eyes are really so",
    "start": "1582440",
    "end": "1590150"
  },
  {
    "text": "great why were we ever doing things any other way why weren't we using declarative you eyes the whole time I",
    "start": "1590150",
    "end": "1598510"
  },
  {
    "text": "thought about it and I came up with three reasons reason number one the web",
    "start": "1598510",
    "end": "1605779"
  },
  {
    "text": "did not used to be so darn complex now I'm going to pick on Amazon for a minute",
    "start": "1605779",
    "end": "1612380"
  },
  {
    "text": "but look at this page just look at it all those buttons and widgets and whatsits things have changed so much",
    "start": "1612380",
    "end": "1620149"
  },
  {
    "text": "because we did not used to have full-on applications sitting inside the browser but also",
    "start": "1620149",
    "end": "1626059"
  },
  {
    "text": "state management bug has become more of an issue the more state you have on your page so the more complex review I gets",
    "start": "1626059",
    "end": "1633200"
  },
  {
    "text": "the more you need declarative UI frameworks I mean in a way this",
    "start": "1633200",
    "end": "1641299"
  },
  {
    "text": "complexities even come full circle because we are building full-on desktop applications on top of chromium with",
    "start": "1641299",
    "end": "1648559"
  },
  {
    "text": "electron which is the framework that powers atom and it powers Visual Studio code and slack and a bunch of apps that",
    "start": "1648559",
    "end": "1654470"
  },
  {
    "text": "you're probably already using anyway reason number two is that programming is",
    "start": "1654470",
    "end": "1660710"
  },
  {
    "start": "1659000",
    "end": "1769000"
  },
  {
    "text": "fashion in the sense that programming is discourse it's an ongoing conversation and everything everything is a reaction",
    "start": "1660710",
    "end": "1668120"
  },
  {
    "text": "to things that came before it so first we had we had vanilla JavaScript and then jQuery was a reaction to that that",
    "start": "1668120",
    "end": "1675350"
  },
  {
    "text": "made it easier to add and remove class names make Ajax calls and that sort of thing and then react and the rest of the",
    "start": "1675350",
    "end": "1683090"
  },
  {
    "text": "declared VI frameworks for a reaction ha to jQuery reason number three is that I",
    "start": "1683090",
    "end": "1692510"
  },
  {
    "text": "framed this question incorrectly declarative for UI frameworks are not as new as I thought so when I asked why",
    "start": "1692510",
    "end": "1698840"
  },
  {
    "text": "weren't we using declared of your eye frameworks before we actually worry if we expand the definition of we this is",
    "start": "1698840",
    "end": "1706640"
  },
  {
    "text": "cute it's a desktop UI framework that's been our to 1995 and it powers a bunch of really",
    "start": "1706640",
    "end": "1713119"
  },
  {
    "text": "popular software like Adobe products now cute has been declarative since 2000",
    "start": "1713119",
    "end": "1719979"
  },
  {
    "text": "react was open-source and kind of blew up in 2013 now again there's a bunch of",
    "start": "1719979",
    "end": "1725989"
  },
  {
    "text": "factors I've already mentioned that impacted how long it took for declarative UI paradigms to make it to",
    "start": "1725989",
    "end": "1731479"
  },
  {
    "text": "the web but still I think this is an innovation that web developers could",
    "start": "1731479",
    "end": "1736940"
  },
  {
    "text": "have picked up on a little faster so some questions to reflect on what else",
    "start": "1736940",
    "end": "1745669"
  },
  {
    "text": "can web UI developers learn from desktop UI developers from functional program to functional programmers from back-end",
    "start": "1745669",
    "end": "1752869"
  },
  {
    "text": "developers what lessons can we draw from the history of computing so we can stop making the same mistakes and reinventing",
    "start": "1752869",
    "end": "1759469"
  },
  {
    "text": "wheels I've got to say that it would be a lot easier to answer these questions",
    "start": "1759469",
    "end": "1765049"
  },
  {
    "text": "if we weren't pushing older folks out of the tech industry it's such a high rate ageism is real it's real and we're going",
    "start": "1765049",
    "end": "1774200"
  },
  {
    "start": "1769000",
    "end": "1867000"
  },
  {
    "text": "to talk about it in particular ageism is real in Silicon Valley where we are",
    "start": "1774200",
    "end": "1779690"
  },
  {
    "text": "right now so I'm going to ask you to do a thought experiment with me mark",
    "start": "1779690",
    "end": "1786289"
  },
  {
    "text": "zuckerberg famously said young people are just smarter which like i know it's",
    "start": "1786289",
    "end": "1791509"
  },
  {
    "text": "it's gross right but like imagine replacing young people with men how does",
    "start": "1791509",
    "end": "1797809"
  },
  {
    "text": "that change your feelings about this statement how might that statement go",
    "start": "1797809",
    "end": "1802879"
  },
  {
    "text": "over differently in the public arena how does that change I don't know how does",
    "start": "1802879",
    "end": "1807889"
  },
  {
    "text": "that change everything and yeah I know the irony of dragging suck in the same",
    "start": "1807889",
    "end": "1812899"
  },
  {
    "text": "talk where I'm praising react is not lost on me so you might not know this",
    "start": "1812899",
    "end": "1818989"
  },
  {
    "text": "but Silicon Valley's 150 biggest tech companies have faced more accusations of",
    "start": "1818989",
    "end": "1824389"
  },
  {
    "text": "age bias in the past decade than racial or gender bias",
    "start": "1824389",
    "end": "1829989"
  },
  {
    "text": "and speaking of racial and gender bias bias compounds its multiplicative not",
    "start": "1832020",
    "end": "1837390"
  },
  {
    "text": "additive so older workers who belong to other underrepresented communities are even more likely to experience",
    "start": "1837390",
    "end": "1843750"
  },
  {
    "text": "discrimination so this is from stack overflows 20:19 Survey and it says that",
    "start": "1843750",
    "end": "1851070"
  },
  {
    "text": "75 percent of professional developers are under age 35 and I know that Stack",
    "start": "1851070",
    "end": "1856620"
  },
  {
    "text": "Overflow doesn't represent everybody that writes code everybody that identifies as a programmer but it's",
    "start": "1856620",
    "end": "1863100"
  },
  {
    "text": "still like a lot of people and that's a huge problem so what is the root cause",
    "start": "1863100",
    "end": "1869160"
  },
  {
    "start": "1867000",
    "end": "2051000"
  },
  {
    "text": "of ages thinking well ageism is a problem that's going to impact all of us",
    "start": "1869160",
    "end": "1874500"
  },
  {
    "text": "eventually so I have a sneaking suspicion that part of ageism is rooted in the fear of our bodies wearing out",
    "start": "1874500",
    "end": "1880980"
  },
  {
    "text": "and fears dying and avoiding thinking about it isn't going to help I have some",
    "start": "1880980",
    "end": "1888090"
  },
  {
    "text": "news for you and you're not gonna like it but you need to face it you're gonna die someday and you need to make peace",
    "start": "1888090",
    "end": "1893460"
  },
  {
    "text": "with that reality and Silicon Valley is still not really doing this like",
    "start": "1893460",
    "end": "1898860"
  },
  {
    "text": "alphabet even started an entire company called calico to solve the problem of death I mean having those people ever",
    "start": "1898860",
    "end": "1905340"
  },
  {
    "text": "seen an episode of Black Mirror I'm not trying to be all doomsday on you but I",
    "start": "1905340",
    "end": "1911550"
  },
  {
    "text": "don't think living forever actually sounds that great so moving on from the",
    "start": "1911550",
    "end": "1918300"
  },
  {
    "text": "like convincing you this is a problem I'm going to talk about like what can we do about this for starters we can",
    "start": "1918300",
    "end": "1924750"
  },
  {
    "text": "rethink the whole concept of Aging because actually it's relatively new so",
    "start": "1924750",
    "end": "1930900"
  },
  {
    "text": "according to his stole historians Carol Haber and Bill Bratton 200 years ago no one thought of older",
    "start": "1930900",
    "end": "1937050"
  },
  {
    "text": "people as a distinct population so a bunch of pseudoscience change that thanks pseudoscience so in the first",
    "start": "1937050",
    "end": "1945270"
  },
  {
    "text": "half of the 19th century doctors believe that people ran out of a substance known",
    "start": "1945270",
    "end": "1950550"
  },
  {
    "text": "as vital energy and that is what caused people to get older and died which like obviously that's not true and that was",
    "start": "1950550",
    "end": "1959220"
  },
  {
    "text": "debunked but still it kind of like changed our culture so that we started thinking of older people as a distinct",
    "start": "1959220",
    "end": "1964320"
  },
  {
    "text": "population I mean childhood is also a relatively recent invention we used to kind of just",
    "start": "1964320",
    "end": "1969820"
  },
  {
    "text": "treat kids like little adults and I don't think we should start doing that again because child labor laws are actually a good thing and I'm not saying",
    "start": "1969820",
    "end": "1977320"
  },
  {
    "text": "that like ignoring ageism is gonna make it go away it's not just the same way that ignoring racism sexism doesn't make",
    "start": "1977320",
    "end": "1983530"
  },
  {
    "text": "it go away like socially constructive things are still real money is socially constructed but you still have to deal with it but",
    "start": "1983530",
    "end": "1989890"
  },
  {
    "text": "what I am saying is that we have changed how we think about aging once so we have the power to change it again in a better",
    "start": "1989890",
    "end": "1995770"
  },
  {
    "text": "direction and there's a sick kind of",
    "start": "1995770",
    "end": "2000990"
  },
  {
    "text": "feedback loop where we just the way that we design and build products for older people reinforces the idea that older",
    "start": "2000990",
    "end": "2006150"
  },
  {
    "text": "people are a problem to be solved and honestly it's like the root problem is always capitalism if you dig deep enough",
    "start": "2006150",
    "end": "2013970"
  },
  {
    "text": "but since technologists are responsible for shaping so many products we need",
    "start": "2013970",
    "end": "2019620"
  },
  {
    "text": "both age diversity and age inclusion on our teams so how do we get there from here a lot of my next suggestions are",
    "start": "2019620",
    "end": "2029070"
  },
  {
    "text": "the kind of like rising tide lifting all boats kind of variety so like even if you are",
    "start": "2029070",
    "end": "2036360"
  },
  {
    "text": "an older person in this room you have some kind of privilege right because we all have some privilege and we all have some areas where we're not privileged so",
    "start": "2036360",
    "end": "2043049"
  },
  {
    "text": "all of us have the responsibility to pay it forward and do we can to help other",
    "start": "2043049",
    "end": "2048270"
  },
  {
    "text": "people advocate for change so the first thing you can do is to use subjective",
    "start": "2048270",
    "end": "2053878"
  },
  {
    "start": "2051000",
    "end": "2125000"
  },
  {
    "text": "hiring criteria so everybody likes to think they're unbiased I am no exception",
    "start": "2053879",
    "end": "2059850"
  },
  {
    "text": "to that but I was really surprised because when I was an engineer at Pinterest we started using hiring",
    "start": "2059850",
    "end": "2065310"
  },
  {
    "text": "rubrics and I was like I had to write down what good looks like and I was",
    "start": "2065310",
    "end": "2070500"
  },
  {
    "text": "surprised by the amount of bias I had and how often I would like someone walk in and I would immediately think like oh",
    "start": "2070500",
    "end": "2076440"
  },
  {
    "text": "I like this person and then I would like kind of tilt myself towards you know wanting to support their answers but",
    "start": "2076440",
    "end": "2082500"
  },
  {
    "text": "writing down what good looks like for a particular question before you even get anybody in the room actually prevents",
    "start": "2082500",
    "end": "2089490"
  },
  {
    "text": "you from being quite so biased but what does this look like in like that that's",
    "start": "2089490",
    "end": "2095820"
  },
  {
    "text": "in theory what does it look like in practice well media opensource some of their hiring rubric",
    "start": "2095820",
    "end": "2101310"
  },
  {
    "text": "and it's actually a really great article it's linked to there but for example on",
    "start": "2101310",
    "end": "2106920"
  },
  {
    "text": "their data structures question a know might look like a candidate is unfamiliar with the most common data structures and yes might look like the",
    "start": "2106920",
    "end": "2114120"
  },
  {
    "text": "candidate understands big o-notation even if they don't refer to it as big o-notation particles super good would definitely",
    "start": "2114120",
    "end": "2121290"
  },
  {
    "text": "recommend checking it out another thing",
    "start": "2121290",
    "end": "2126720"
  },
  {
    "start": "2125000",
    "end": "2283000"
  },
  {
    "text": "you can do is change your language you need to work to eliminate phrases like so easy your grandma could use it from",
    "start": "2126720",
    "end": "2133530"
  },
  {
    "text": "your vocabulary now changing language is hard and it's a process so be kind to",
    "start": "2133530",
    "end": "2139080"
  },
  {
    "text": "yourself because you're gonna screw it up and that's okay like did you know",
    "start": "2139080",
    "end": "2148950"
  },
  {
    "text": "that the whole like generational naming thing is also a relatively recent phenomenon like we weren't out there in",
    "start": "2148950",
    "end": "2155190"
  },
  {
    "text": "the 1800s being like oh the bighead generation is so whiny and self-absorbed",
    "start": "2155190",
    "end": "2160310"
  },
  {
    "text": "boomers are actually like the first generation to be named and I don't I don't think generational naming is",
    "start": "2160310",
    "end": "2165720"
  },
  {
    "text": "actually a good thing because like group psychology or the psychology group",
    "start": "2165720",
    "end": "2171240"
  },
  {
    "text": "prejudice tells us that as soon as you divide people into groups even if it's arbitrary they'll start developing a",
    "start": "2171240",
    "end": "2176610"
  },
  {
    "text": "group identity and again who benefits the most from us being divided in this way marketers capitalism but anyway for",
    "start": "2176610",
    "end": "2184530"
  },
  {
    "text": "the love of God okay boomer memes our ages and they don't belong in the workplace another thing you can do is",
    "start": "2184530",
    "end": "2192150"
  },
  {
    "text": "audit your job postings for bias there is a company called text IO that uses",
    "start": "2192150",
    "end": "2197910"
  },
  {
    "text": "machine learning to audit the language in your job postings and help you build the most diverse team that you possibly",
    "start": "2197910",
    "end": "2203550"
  },
  {
    "text": "can now caveat I have not used text IO personally but I have you heard good things from people who have another",
    "start": "2203550",
    "end": "2214110"
  },
  {
    "text": "important thing to do is ask ask people what you could do to be supportive so I",
    "start": "2214110",
    "end": "2219240"
  },
  {
    "text": "started a conversation on Twitter about like hey what are best ways to support older workers of tech and I got a really",
    "start": "2219240",
    "end": "2226740"
  },
  {
    "text": "a lot of really insightful answers my favorite was this which is to aim for the same emotional presentation and take",
    "start": "2226740",
    "end": "2232569"
  },
  {
    "text": "in meetings because if you're laughing and joking with some people but not other people people notice and you can",
    "start": "2232569",
    "end": "2239169"
  },
  {
    "text": "use humor to humor is a way that we bond in the workplace it's so easy to use humor to like push people out but let's",
    "start": "2239169",
    "end": "2245469"
  },
  {
    "text": "make sure that we're bringing people in like and it's okay to use you know generational references as long as you",
    "start": "2245469",
    "end": "2252910"
  },
  {
    "text": "explain the joke to other people and finally we in the JavaScript land can",
    "start": "2252910",
    "end": "2259959"
  },
  {
    "text": "stop being so obsessed with shiny new frameworks because I disagree that rewriting your entire code base every",
    "start": "2259959",
    "end": "2265329"
  },
  {
    "text": "couple of years the way that we tend to do is healthy now I don't think this is the cause of ageism but I think it's",
    "start": "2265329",
    "end": "2271569"
  },
  {
    "text": "it's a manifestation of the same kind of like short-sighted thinking that burns",
    "start": "2271569",
    "end": "2277479"
  },
  {
    "text": "people out and causes them to leave tech",
    "start": "2277479",
    "end": "2281489"
  },
  {
    "text": "so let's review what we've learned today and cut tease outs and themes",
    "start": "2283559",
    "end": "2289559"
  },
  {
    "text": "declarative UI frameworks are eating the Webby world according to NPM his most recent developer survey but it's not",
    "start": "2289679",
    "end": "2296859"
  },
  {
    "text": "just about like growth and uses it's about love so like if you've ever built tools for developers you know that we",
    "start": "2296859",
    "end": "2303309"
  },
  {
    "text": "are not the easiest group of people to please but the data shows that react and",
    "start": "2303309",
    "end": "2309880"
  },
  {
    "text": "view people actually love using it which is no small thing so hopefully this context is giving you",
    "start": "2309880",
    "end": "2316900"
  },
  {
    "text": "some context as to why people love declarative UI frameworks and now you",
    "start": "2316900",
    "end": "2325059"
  },
  {
    "text": "also understand some patterns for what it looks like if you need to integrate react with an imperative API and what I",
    "start": "2325059",
    "end": "2331239"
  },
  {
    "text": "really want to emphasize here is that there is no one-size-fits-all solution because the question fundamentally is",
    "start": "2331239",
    "end": "2336849"
  },
  {
    "text": "like how do i model the state of my particular application in a declarative way but now you have at least maybe some",
    "start": "2336849",
    "end": "2344499"
  },
  {
    "text": "questions you can start asking yourself in case you want to see any of the code that I showed you today in more detail",
    "start": "2344499",
    "end": "2351849"
  },
  {
    "text": "it is all open source and on github and finally now that you've heard some small",
    "start": "2351849",
    "end": "2357789"
  },
  {
    "text": "things you can do to address ageism within yourself and it's in the tech industry I'd like you to reflect what",
    "start": "2357789",
    "end": "2362979"
  },
  {
    "text": "action are you going to take to make the future better for all of us so it takes a village to make",
    "start": "2362979",
    "end": "2374140"
  },
  {
    "text": "a talk and credit where credit is due is super personally important to me I'd",
    "start": "2374140",
    "end": "2379330"
  },
  {
    "text": "like to thank Alberto given as the declarative and imperative UI examples Tyler McGinnis writing a blog post on",
    "start": "2379330",
    "end": "2386430"
  },
  {
    "text": "declarative and imperative thinking sorry Evelyn Massa who came up with the",
    "start": "2386430",
    "end": "2393369"
  },
  {
    "text": "comi maybe monad joke and then Katrina or choco joke Furman and ashy Kristin",
    "start": "2393369",
    "end": "2398440"
  },
  {
    "text": "for giving me feedback that shaped this talk thank you to the wonderful",
    "start": "2398440",
    "end": "2405340"
  },
  {
    "text": "organizers a Q Khan for bringing us here and all the hard work that you put into making this happen and finally thank you",
    "start": "2405340",
    "end": "2415109"
  }
]