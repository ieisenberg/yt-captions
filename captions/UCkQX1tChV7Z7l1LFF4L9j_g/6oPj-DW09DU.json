[
  {
    "start": "0",
    "end": "177000"
  },
  {
    "text": "all right let me get my clicker and let's begin so in the year of 2016 two big",
    "start": "4640",
    "end": "11719"
  },
  {
    "text": "events happened at Netflix in early January at the flip of",
    "start": "11719",
    "end": "17199"
  },
  {
    "text": "a switch we launched Netflix globally enabling customers from across 195 countries in the world to instantly",
    "start": "17199",
    "end": "24640"
  },
  {
    "text": "enjoy Netflix in the same year towards the end I believe it was around December of 2016",
    "start": "24640",
    "end": "31199"
  },
  {
    "text": "if I'm WR wrong we released one of our most requested features it was our",
    "start": "31199",
    "end": "36399"
  },
  {
    "text": "ability to download and Playback content offline it was motivated by the fact",
    "start": "36399",
    "end": "41760"
  },
  {
    "text": "that across the world if you have a spotty network connection uh it will come in handy to download the Netflix",
    "start": "41760",
    "end": "47879"
  },
  {
    "text": "content and watch it offline but according to me it comes in really handy if you have kids who watches big boss",
    "start": "47879",
    "end": "54120"
  },
  {
    "text": "boss baby not big boss again and again and again in a loop these two events translated into",
    "start": "54120",
    "end": "61519"
  },
  {
    "text": "two top level goals for our services engineering organization one was high availability",
    "start": "61519",
    "end": "67400"
  },
  {
    "text": "it was all always a prime time viewing in some part of the world and number two it was Innovation velocity the entire",
    "start": "67400",
    "end": "75560"
  },
  {
    "text": "downloads feature was conceived designed developed tested and deployed in a",
    "start": "75560",
    "end": "80759"
  },
  {
    "text": "matter of months however one key service our API",
    "start": "80759",
    "end": "86680"
  },
  {
    "text": "service whose responsibility is to orchestrate all all functionality flowing into the Netflix ecosystem was",
    "start": "86680",
    "end": "93240"
  },
  {
    "text": "struggling to keep keep up with these two top level goals to explain things more concretely",
    "start": "93240",
    "end": "99320"
  },
  {
    "text": "I'm going to show you a couple of graphs this graph indicates the number of times",
    "start": "99320",
    "end": "104640"
  },
  {
    "text": "Netflix had some form of an outage in the year of 2016 the Peaks indicate the number of",
    "start": "104640",
    "end": "110640"
  },
  {
    "text": "customers who got impacted by the outage and the width indicates the duration in which the outage lasted and specifically",
    "start": "110640",
    "end": "117719"
  },
  {
    "text": "the red dots indicate the number of times s our API servers was directly or indirectly a contributing factor to the",
    "start": "117719",
    "end": "125079"
  },
  {
    "text": "outage so our high availability goal was at risk separately we have plotted two",
    "start": "125079",
    "end": "132920"
  },
  {
    "text": "metrics this plots uh deployments per week and roll backs per month as you can",
    "start": "132920",
    "end": "138760"
  },
  {
    "text": "see over the years we are seeing a a decreasing tend in deployments and an alarming increase in the number of roll",
    "start": "138760",
    "end": "144800"
  },
  {
    "text": "backs due to the complexity of our API service now I want you folks to Imagine This",
    "start": "144800",
    "end": "150879"
  },
  {
    "text": "say you own and operate this API Service as I said before it is a critical service orchestrating and acting as an",
    "start": "150879",
    "end": "156640"
  },
  {
    "text": "excess point for all request coming into the Netflix ecosystem on the one hand",
    "start": "156640",
    "end": "161800"
  },
  {
    "text": "it's increasingly becoming a bottleneck for feature velocity and on the other hand our availability numbers are not",
    "start": "161800",
    "end": "168319"
  },
  {
    "text": "where we wanted to be in order to fix this your tasked with the responsibility of reecting the",
    "start": "168319",
    "end": "175360"
  },
  {
    "text": "service where do you begin the goal of the talk is to provide you with a framework to think and reason",
    "start": "175360",
    "end": "182080"
  },
  {
    "start": "177000",
    "end": "317000"
  },
  {
    "text": "about how to make such a big re architectural change I'm Sudan rangarajan I work in",
    "start": "182080",
    "end": "188000"
  },
  {
    "text": "the playback API team within Netflix and we are responsible for a dozen of microservices within the playback",
    "start": "188000",
    "end": "194120"
  },
  {
    "text": "domain I guess if you guys have been to the Jessica talk this morning she said she was an ex monolithic engineer I",
    "start": "194120",
    "end": "201519"
  },
  {
    "text": "think I guess it makes me a ex distributed monolithic engineer before we dive into the",
    "start": "201519",
    "end": "208040"
  },
  {
    "text": "specific let's take a quick uh look at the previous architecture workflow we support the Netflix",
    "start": "208040",
    "end": "214400"
  },
  {
    "text": "application amongst thousands of devices and millions of requests originating from these devices come into",
    "start": "214400",
    "end": "221439"
  },
  {
    "text": "a Netflix ecosystem of services run and operated by various teams at Netflix the requests typically come via",
    "start": "221439",
    "end": "228959"
  },
  {
    "text": "the API proxy service whose responsibility is to provide protocol termination monitoring and routing and",
    "start": "228959",
    "end": "236640"
  },
  {
    "text": "behind the API proxy servers we have the API servers whose responsibility is to orchestrate",
    "start": "236640",
    "end": "242360"
  },
  {
    "text": "all requests flowing into the Netflix ecosystem and behind the API servers we have hundreds of microservices whose",
    "start": "242360",
    "end": "249239"
  },
  {
    "text": "responsibility is a very domain specific Niche responsibility within the API servers we",
    "start": "249239",
    "end": "255480"
  },
  {
    "text": "have three major workflows the first is the signup workflow it is uh enabled by",
    "start": "255480",
    "end": "260600"
  },
  {
    "text": "a set of signup apis in coordination with say membership authorization billing and other similar",
    "start": "260600",
    "end": "268720"
  },
  {
    "text": "microservices once you log in you see rows and rows of content in your Netflix uh View and then um it is it's all",
    "start": "268720",
    "end": "276360"
  },
  {
    "text": "personalized for your taste this is enabled by a set of Discovery apis in",
    "start": "276360",
    "end": "281479"
  },
  {
    "text": "coordination with personalization artwork title metadata localization and",
    "start": "281479",
    "end": "287560"
  },
  {
    "text": "dozens of other services and finally you hit play button",
    "start": "287560",
    "end": "293280"
  },
  {
    "text": "from the moment you hit play till you exit a playback it is enabled by a set of uh apis we call the playback API and",
    "start": "293280",
    "end": "300199"
  },
  {
    "text": "its Associated microservices so let's keep the view of this architecture in mind so that like",
    "start": "300199",
    "end": "306800"
  },
  {
    "text": "uh as we go through this talk we'll pick apart the technical aspects of the previous architecture and we'll try and compare and contrast between the",
    "start": "306800",
    "end": "313120"
  },
  {
    "text": "previous architecture and our current architecture choices at the very high level we",
    "start": "313120",
    "end": "319680"
  },
  {
    "text": "recommend thinking about in terms of three fundamental principles number one identity number two type one and type",
    "start": "319680",
    "end": "327160"
  },
  {
    "text": "two decisions and number three AO solvability let's begin with",
    "start": "327160",
    "end": "333520"
  },
  {
    "text": "identity start yourself with asking why why does your service exist if you",
    "start": "333520",
    "end": "338759"
  },
  {
    "text": "removed your service from your ecosystem what would be the impact go a step further and ask why does your service",
    "start": "338759",
    "end": "345960"
  },
  {
    "text": "exist with respect to why your company exists let me paint a picture for you",
    "start": "345960",
    "end": "352039"
  },
  {
    "text": "folks why does Netflix exist Netflix goal is to lead the Internet TV Revolution to entertain billions of",
    "start": "352120",
    "end": "358919"
  },
  {
    "text": "people across the world world and within Netflix we have the product engineering organization why",
    "start": "358919",
    "end": "365160"
  },
  {
    "text": "does that exist its purpose is to maximize customer engagement across all Netflix functions from sign up all the",
    "start": "365160",
    "end": "372000"
  },
  {
    "text": "way to streaming and then you go one level down within the product engineering",
    "start": "372000",
    "end": "377440"
  },
  {
    "text": "organization we have the edge engineering or its sole purpose is to",
    "start": "377440",
    "end": "382639"
  },
  {
    "text": "enable acquisition Discovery and Playback experience with high",
    "start": "382639",
    "end": "388120"
  },
  {
    "text": "availability within the Edge engineering organization we have the API service and the API service identity is to deliver",
    "start": "388120",
    "end": "396520"
  },
  {
    "text": "acquisition playback and Discovery functions Around the",
    "start": "396520",
    "end": "401680"
  },
  {
    "text": "Clock as we went through this process of like hierarchically determining um what is the identity of our service with",
    "start": "401840",
    "end": "408599"
  },
  {
    "text": "respect to our organization with respect to other services the first thing which we questioned was does it still make",
    "start": "408599",
    "end": "413960"
  },
  {
    "text": "sense for one API servers to play a role in all these major",
    "start": "413960",
    "end": "419080"
  },
  {
    "text": "functions uh which enable the Netflix application in retrospect we are",
    "start": "419080",
    "end": "424520"
  },
  {
    "text": "realizing that we didn't really apply a single responsibility principle and we rolled multiple identities into one",
    "start": "424520",
    "end": "429960"
  },
  {
    "text": "service which made the API service unnecessarily complex this enabled us to make a first",
    "start": "429960",
    "end": "437440"
  },
  {
    "text": "decision in our re architecture we said that in order for us to grow the business for the next several years we",
    "start": "437440",
    "end": "443720"
  },
  {
    "text": "wanted a separate API servers for each of these functions so we split the API servers into a signup API service",
    "start": "443720",
    "end": "450120"
  },
  {
    "text": "Discovery API service and a playback API service so now within the edge",
    "start": "450120",
    "end": "456160"
  },
  {
    "text": "engineering organization we have a play API service whose responsibility is to",
    "start": "456160",
    "end": "461800"
  },
  {
    "text": "just deliver the playback life cycle with high availability in order to do that the",
    "start": "461800",
    "end": "468199"
  },
  {
    "text": "play API service interacts with three categories of mider",
    "start": "468199",
    "end": "473280"
  },
  {
    "text": "microservices it talks with a set of servers which decides what the best playback experience is",
    "start": "473280",
    "end": "480319"
  },
  {
    "text": "it talks with a set of services which authorizes each and every playback and then there's a third set of",
    "start": "480319",
    "end": "486360"
  },
  {
    "text": "services which collects the playback data for business intelligence so you know to ensure that",
    "start": "486360",
    "end": "493599"
  },
  {
    "text": "the there is a specific role for the play API servers what we did was we removed the play API servers from this",
    "start": "493599",
    "end": "499879"
  },
  {
    "text": "equation and try to reason about what would happen in that case immediately we notice that it",
    "start": "499879",
    "end": "506440"
  },
  {
    "text": "introduces high amount of coupling points before the coupling Point used to be three now it used to be like 12 or",
    "start": "506440",
    "end": "513800"
  },
  {
    "text": "13 that implied that the evolvability of each of the other services was going to",
    "start": "513800",
    "end": "519640"
  },
  {
    "text": "be difficult similarly each of the apis which the uh microservices the Mia",
    "start": "519640",
    "end": "525200"
  },
  {
    "text": "micros Services exposes we are exposing those apas directly to the devices and again it is a point of low evolvability",
    "start": "525200",
    "end": "532959"
  },
  {
    "text": "in essence this cartoon kind of captures the role of why do we need a play API",
    "start": "532959",
    "end": "538959"
  },
  {
    "text": "service we broken open from monolith and then we have separate domain specific playback",
    "start": "538959",
    "end": "544440"
  },
  {
    "text": "domain specific microservices and then we need a specific layer whose responsibility is to orchestrate amongst",
    "start": "544440",
    "end": "550600"
  },
  {
    "text": "those Services by doing this we came up with",
    "start": "550600",
    "end": "557120"
  },
  {
    "start": "554000",
    "end": "652000"
  },
  {
    "text": "the play api's identity we said its purpose is to orchestrate the playback life cycle",
    "start": "557120",
    "end": "563720"
  },
  {
    "text": "while providing stable abstractions between devices and all the domain specific playback services",
    "start": "563720",
    "end": "571360"
  },
  {
    "text": "so the guiding principle here is that we believe in simple singular identities the identity must relate to",
    "start": "572440",
    "end": "579000"
  },
  {
    "text": "your organization to your company and should complement the identity of all the peer services in your",
    "start": "579000",
    "end": "585920"
  },
  {
    "text": "ecosystem so that's the big F first guiding principle then let's talk about type one",
    "start": "585920",
    "end": "592279"
  },
  {
    "text": "and type two decisions let's do a quick show off hands how many of you guys have used type 1 and type two decisions",
    "start": "592279",
    "end": "597519"
  },
  {
    "text": "framework before not too bad I think like 5% so the concept came from Jeff Bezos",
    "start": "597519",
    "end": "605200"
  },
  {
    "text": "actually in his annual shareholders letter he talks about the type of decisions which sustains Innovation at",
    "start": "605200",
    "end": "611880"
  },
  {
    "text": "Amazon he says and I quote some decisions are consequential and irreversible or nearly irreversible",
    "start": "611880",
    "end": "618959"
  },
  {
    "text": "oneway doors and these decisions must be made methodically carefully slowly with",
    "start": "618959",
    "end": "625240"
  },
  {
    "text": "great deliberation and consultation we call these type 1 decisions he goes on and says but most decisions",
    "start": "625240",
    "end": "632600"
  },
  {
    "text": "aren't like that they are changeable reversible two-way doors if you made a suboptimal type two decision you don't",
    "start": "632600",
    "end": "639240"
  },
  {
    "text": "have to live with the consequences for that long type two decisions can and should be made by high judgment",
    "start": "639240",
    "end": "645000"
  },
  {
    "text": "individuals or small groups this is a great piece of wisdom which we can apply to architectural",
    "start": "645000",
    "end": "652160"
  },
  {
    "text": "design so at Netflix we believe there are three type one decs to consider number one is around",
    "start": "652160",
    "end": "658639"
  },
  {
    "text": "appropriate coupling number two is a choice between asynchronous and synchronous and number three is the data",
    "start": "658639",
    "end": "667800"
  },
  {
    "text": "architecture let's go over each of them when we talk about appropriate coupling we have to talk about shared libraries",
    "start": "667800",
    "end": "674680"
  },
  {
    "text": "and when we talk about shared libraries typically we talk about two types of shared libraries there's a set of shared",
    "start": "674680",
    "end": "681680"
  },
  {
    "text": "libraries which provides some common function say this could be the ID jard or the metrics jard or an inmemory cache",
    "start": "681680",
    "end": "687760"
  },
  {
    "text": "solution and then there's a a set of shared libraries which acts as client libraries which enables us to talk",
    "start": "687760",
    "end": "693760"
  },
  {
    "text": "between microservices for instance like most of",
    "start": "693760",
    "end": "699279"
  },
  {
    "text": "our uh microservices code originated from a monolithic code base so there are there is there was a",
    "start": "699279",
    "end": "707160"
  },
  {
    "text": "high proliferation of shared libraries from the data in fact there is this one particular Library which we call the streaming utilities jar and if you",
    "start": "707160",
    "end": "714160"
  },
  {
    "text": "looked at the dependency trees of the library it had 121 dependencies to to make things worse it",
    "start": "714160",
    "end": "721079"
  },
  {
    "text": "the library is consumed by almost 80% of our microservices so we have thick shared",
    "start": "721079",
    "end": "727440"
  },
  {
    "text": "libraries which are hundreds of dependent libraries so when you have these hundreds of libraries assembled as part",
    "start": "727440",
    "end": "733199"
  },
  {
    "text": "of the microservices and it's kind of crossing boundaries across different Services what we have is a distributed",
    "start": "733199",
    "end": "740680"
  },
  {
    "text": "monolith any fatal change in one of these libraries had the potential to bring multiple Services",
    "start": "740680",
    "end": "747880"
  },
  {
    "text": "down this dist monolith is worse than a monolith because it had all the effects of the",
    "start": "747880",
    "end": "754600"
  },
  {
    "text": "monolith on top of having to own an operate each of these microservices",
    "start": "754600",
    "end": "760199"
  },
  {
    "text": "separately so that's one form of coupling Sam Newan captures this very",
    "start": "760199",
    "end": "765560"
  },
  {
    "text": "well actually in this book uh building microservices he says the evils of too much coupling between services are far",
    "start": "765560",
    "end": "771480"
  },
  {
    "text": "worse than the problems caused by code duplication we have another form of",
    "start": "771480",
    "end": "778279"
  },
  {
    "text": "coupling with respect the client libraries see the play API servers talk to the playback decision service via the",
    "start": "778279",
    "end": "784240"
  },
  {
    "text": "playback decision client whenever the playback decision Services unavailable it uses a fallback",
    "start": "784240",
    "end": "790800"
  },
  {
    "text": "from within the playback decision client in order to improve the reliability of the service however in one particular",
    "start": "790800",
    "end": "797760"
  },
  {
    "text": "instance when that playback Deion service was down it it resulted in the fallback execution From Within the play",
    "start": "797760",
    "end": "803959"
  },
  {
    "text": "API servers however we saw that the latencies of the API servers went through went through the roof this is",
    "start": "803959",
    "end": "810920"
  },
  {
    "text": "because the fallback was so heavy and so CPU intensive even though it provided reliability for the playback decision",
    "start": "810920",
    "end": "816480"
  },
  {
    "text": "service from the P perspective of the playback API servers it was the availability was still impacted and",
    "start": "816480",
    "end": "822399"
  },
  {
    "text": "Netflix was still down so what we have here is some form of operational coupling we have two",
    "start": "822399",
    "end": "829680"
  },
  {
    "text": "domain contexts each with its own responsibilities playback de service does the playback decisions and the API",
    "start": "829680",
    "end": "835360"
  },
  {
    "text": "service does the orchestration however VI are the playback client the operational context of the playback",
    "start": "835360",
    "end": "841680"
  },
  {
    "text": "decision service is leaking into the play API",
    "start": "841680",
    "end": "846480"
  },
  {
    "start": "846000",
    "end": "1034000"
  },
  {
    "text": "service actually operational coupling worked very well for us for several years mainly because many teams may not",
    "start": "847320",
    "end": "853680"
  },
  {
    "text": "be uh ready to uh fully own and operate a highly available micros service",
    "start": "853680",
    "end": "860480"
  },
  {
    "text": "however as as years progress uh the API service being an Nexus service which is",
    "start": "860480",
    "end": "866720"
  },
  {
    "text": "which is incorp incorporated several client libraries it became an untenable",
    "start": "866720",
    "end": "872440"
  },
  {
    "text": "situation to operate the API service",
    "start": "872440",
    "end": "876560"
  },
  {
    "text": "itself another interesting issue which happens with the proliferation of shared libraries is some form of language",
    "start": "878800",
    "end": "884959"
  },
  {
    "text": "coupling it encourages people to stay in Java Netflix has historically been a Java shop however there has been use",
    "start": "884959",
    "end": "892199"
  },
  {
    "text": "cases which we are exploring specifically around like say we wanted to build a backend for frontend services",
    "start": "892199",
    "end": "897600"
  },
  {
    "text": "in node and we wanted to be able to uh take advantage of no's functionality and the device teams expertise to be able to",
    "start": "897600",
    "end": "904480"
  },
  {
    "text": "build such a service in order to do that any team who is owning the node service",
    "start": "904480",
    "end": "910240"
  },
  {
    "text": "will have to hand write the list of clients in order to communicate with the rest of the ecosystem it was such a high friction",
    "start": "910240",
    "end": "917079"
  },
  {
    "text": "point that it discouraged most people from even considering such an",
    "start": "917079",
    "end": "922600"
  },
  {
    "text": "option with respect to client dries there's another form of subtle coupling which happens uh this respect to the",
    "start": "923320",
    "end": "928959"
  },
  {
    "text": "communication protocol many services at Netflix is written on top of the Jersey",
    "start": "928959",
    "end": "934319"
  },
  {
    "text": "framework by our rest interface and the most communication happens rest over",
    "start": "934319",
    "end": "941240"
  },
  {
    "text": "http1 it works well except it has one limitation as soon as the connection is",
    "start": "941240",
    "end": "946440"
  },
  {
    "text": "established between the client and the server all communication is initiated by the client so it's unidirectional that",
    "start": "946440",
    "end": "953480"
  },
  {
    "text": "means it can only support request and response Style apis",
    "start": "953480",
    "end": "959079"
  },
  {
    "text": "drawing from these experiences we went to the uh we sat down and we kind of debated what our requirements should be",
    "start": "959440",
    "end": "965680"
  },
  {
    "text": "and then we came up with four requirements number one we wanted operationally thin clients by this we",
    "start": "965680",
    "end": "972279"
  },
  {
    "text": "meant like when whatever client libraries which we are incorporating it should not have any heavy fallbacks no",
    "start": "972279",
    "end": "977839"
  },
  {
    "text": "special logic and the dependencies which it brings in should be well defined and",
    "start": "977839",
    "end": "983560"
  },
  {
    "text": "limited second we don't want to use if possible not use any share libraries or have a well- defined set of",
    "start": "983560",
    "end": "990040"
  },
  {
    "text": "shared libraries which is acceptable to use within a API servers specifically if",
    "start": "990040",
    "end": "996279"
  },
  {
    "text": "like if we talked about the streaming utilities Char we we we made a call to not incorporate that in our API service",
    "start": "996279",
    "end": "1004440"
  },
  {
    "text": "anymore the third requirement are around autogenerated clients this is mainly for the polyot support this meant that we",
    "start": "1004959",
    "end": "1010959"
  },
  {
    "text": "want to define the API of our servers in some form of interface definition language and we wanted some kind of",
    "start": "1010959",
    "end": "1016360"
  },
  {
    "text": "tooling to generate the thin clients uh in multiple languages of our",
    "start": "1016360",
    "end": "1023920"
  },
  {
    "text": "needs and finally we wanted buy directional communication because we wanted to explore Beyond request and",
    "start": "1024520",
    "end": "1031120"
  },
  {
    "text": "response style apis one quick point of note here is one",
    "start": "1031120",
    "end": "1036918"
  },
  {
    "start": "1034000",
    "end": "1134000"
  },
  {
    "text": "of the things which we initially discussed around like do we really care about rest versus RPC we really didn't",
    "start": "1036919",
    "end": "1042199"
  },
  {
    "text": "have this as a requirement because at Netflix most use cases were modeled as request response and rest was a simple",
    "start": "1042199",
    "end": "1049360"
  },
  {
    "text": "and easy choice to use but it was more an incidental Choice rather than an intentional",
    "start": "1049360",
    "end": "1055600"
  },
  {
    "text": "one by analyzing some of the services we realized that most of the services were not really using restful principles",
    "start": "1055600",
    "end": "1063080"
  },
  {
    "text": "anyways the URLs didn't represent a unique resource instead the parameters which came along with the URL determine",
    "start": "1063080",
    "end": "1069120"
  },
  {
    "text": "the outcome of the call effectively making them a RPC",
    "start": "1069120",
    "end": "1074960"
  },
  {
    "text": "call so we said we agnostic to rest versus RPC as long as it meets our other",
    "start": "1074960",
    "end": "1081159"
  },
  {
    "text": "requirements based on this we squired in on grpc as our framework of choice grpc",
    "start": "1081159",
    "end": "1086600"
  },
  {
    "text": "provides protocol buffers as their ideal and uh we are able to uh Define our apis",
    "start": "1086600",
    "end": "1092720"
  },
  {
    "text": "and uh have clients automatically generated uh in all the languages of our interest it also supported uh NTI and",
    "start": "1092720",
    "end": "1100120"
  },
  {
    "text": "http2 for bidirectional communication however we did still have",
    "start": "1100120",
    "end": "1105240"
  },
  {
    "text": "to uh enable the ecosystem confidence we need to build some ecosystem compatibility within the grpc framework",
    "start": "1105240",
    "end": "1112200"
  },
  {
    "text": "to make it work within Netflix so this is a previous",
    "start": "1112200",
    "end": "1117440"
  },
  {
    "text": "architecture compared to the current architecture with respect to coupling we have very minimal operational",
    "start": "1117440",
    "end": "1123200"
  },
  {
    "text": "coupling limited intentional binary coupling we are able to go beyond Java",
    "start": "1123200",
    "end": "1128559"
  },
  {
    "text": "and we are free to explore Beyond request and response style",
    "start": "1128559",
    "end": "1133640"
  },
  {
    "text": "apis so the first type one Deion we made was around appropriate coupling is around we want to consider thin",
    "start": "1133679",
    "end": "1140000"
  },
  {
    "start": "1134000",
    "end": "1472000"
  },
  {
    "text": "autogenerated clients with bidirectional communication and minimize code reuse across service",
    "start": "1140000",
    "end": "1147480"
  },
  {
    "text": "boundaries the next type one Deion is around synchronous and asynchronous",
    "start": "1148840",
    "end": "1154520"
  },
  {
    "text": "choices in order to understand this let's consider an",
    "start": "1156159",
    "end": "1161600"
  },
  {
    "text": "example let's say we have a API called get play data API it takes in the",
    "start": "1161600",
    "end": "1166640"
  },
  {
    "text": "customer ID title ID and the device ID using the customer ID it talks to the customer info servers to fish the",
    "start": "1166640",
    "end": "1172919"
  },
  {
    "text": "customer info using the device ID it talks to the device servers get the device info and using the enrich",
    "start": "1172919",
    "end": "1179360"
  },
  {
    "text": "customer info and the device info it talks to a third servers say let's call it the play playback decision service in",
    "start": "1179360",
    "end": "1184440"
  },
  {
    "text": "order to decide the playback data and then return the play data let's see how we will code this up in both synchronous",
    "start": "1184440",
    "end": "1190960"
  },
  {
    "text": "and asynchronous architectures a typical synchronous architecture looks like this we have a",
    "start": "1190960",
    "end": "1197159"
  },
  {
    "text": "dedicated thread pool for all the incoming request each request execution gets one dedicated",
    "start": "1197159",
    "end": "1203600"
  },
  {
    "text": "thread separately for each of the clients which is talking to some other external microservices has its own",
    "start": "1203600",
    "end": "1210080"
  },
  {
    "text": "dedicated set of thread pools which is managing all the outgoing",
    "start": "1210080",
    "end": "1215200"
  },
  {
    "text": "communication so for the play data call what happens here is that we have three calls first call is the get customer",
    "start": "1215200",
    "end": "1223720"
  },
  {
    "text": "info okay let me back up a little bit so basically we get a request for get play data and then gets a thread from the",
    "start": "1223720",
    "end": "1230159"
  },
  {
    "text": "request uh Handler thread pool and then that thread blocks till the get play data call returns and within the get",
    "start": "1230159",
    "end": "1237760"
  },
  {
    "text": "play data call the first unit of execution is to call into the customer service in order to fet the customer",
    "start": "1237760",
    "end": "1242880"
  },
  {
    "text": "info for that it coordinates with a client thread pool corresponding to the customer info and makes a outborn call",
    "start": "1242880",
    "end": "1248640"
  },
  {
    "text": "to the customer service for this enti duration the the",
    "start": "1248640",
    "end": "1254400"
  },
  {
    "text": "execution thread is blocked till you get a response back from the customer service the same thing happens with the device",
    "start": "1254400",
    "end": "1260960"
  },
  {
    "text": "info and with the desired play data till the play data is uh returned uh and it's",
    "start": "1260960",
    "end": "1267039"
  },
  {
    "text": "available available for return so in a typical synchronous",
    "start": "1267039",
    "end": "1272520"
  },
  {
    "text": "architecture you have a blocking request hander and a blocking client",
    "start": "1272520",
    "end": "1278000"
  },
  {
    "text": "IO it works well for simple request response style apis where latency is not",
    "start": "1278000",
    "end": "1283080"
  },
  {
    "text": "that big of a concern and also it works if you have to just worry about limited number of clients which we are",
    "start": "1283080",
    "end": "1288799"
  },
  {
    "text": "communicating with I've been talking about request response for a while now are there use",
    "start": "1288799",
    "end": "1295440"
  },
  {
    "text": "cases which goes beyond request response let's say for the same play data call how can we model beyond the",
    "start": "1295440",
    "end": "1302640"
  },
  {
    "text": "request response patterns so the request response pattern looks like this you request play data for title X and you",
    "start": "1302640",
    "end": "1308679"
  },
  {
    "text": "get a response back for the play data for the title X so it's one request and one response we could Define an API which",
    "start": "1308679",
    "end": "1315840"
  },
  {
    "text": "accepts a play data requests for titles X Y and Z then as in when we have the",
    "start": "1315840",
    "end": "1321520"
  },
  {
    "text": "play data available for each of those titles we can stream the response back to the calling device so this will be a",
    "start": "1321520",
    "end": "1327760"
  },
  {
    "text": "reest stream pattern or we can flip it and we say that the devices can reest of play data",
    "start": "1327760",
    "end": "1334400"
  },
  {
    "text": "as and when it thinks it's necessary then we can collate all the uh request and then send a single response pack uh",
    "start": "1334400",
    "end": "1341360"
  },
  {
    "text": "with all the play data for all the titles so that will be a request the stream response",
    "start": "1341360",
    "end": "1347000"
  },
  {
    "text": "pattern and finally we can have streaming happening on both sides devices can request for play data as and",
    "start": "1347000",
    "end": "1353720"
  },
  {
    "text": "when it needs and then the service can respond with play data as and when it's available so it'll be a bidirectional",
    "start": "1353720",
    "end": "1358880"
  },
  {
    "text": "stream pattern if you think any any of these stream specific uh uh API patterns",
    "start": "1358880",
    "end": "1365840"
  },
  {
    "text": "will fit into one of your business domains it's worth considering an asynchronous",
    "start": "1365840",
    "end": "1371679"
  },
  {
    "text": "architecture asynchronous architecture looks like this so you have a a event",
    "start": "1371679",
    "end": "1376840"
  },
  {
    "text": "Loop for all the incoming communication so it's it's called it the request response event Loop and you typically",
    "start": "1376840",
    "end": "1382720"
  },
  {
    "text": "have a specific number of worker threats it's usually a function of number of course in a machine and then we have",
    "start": "1382720",
    "end": "1389080"
  },
  {
    "text": "outgoing even EV event Loop uh associated with each of the client which is managing the outgoing",
    "start": "1389080",
    "end": "1395640"
  },
  {
    "text": "Communication in order to take full full advantage of this asynchronous architecture we need to code up the play",
    "start": "1395640",
    "end": "1402000"
  },
  {
    "text": "data call little bit differently we want to split the play data call into",
    "start": "1402000",
    "end": "1407400"
  },
  {
    "text": "different independent EX tion units which can run in parallel for example the get customer info and the get device",
    "start": "1407400",
    "end": "1414080"
  },
  {
    "text": "info call can happen in parallel and then when the results of both both both those calls is available you can zip it",
    "start": "1414080",
    "end": "1420919"
  },
  {
    "text": "zip them together and send it to a third call which will be the device descided play data call let's see how the execution",
    "start": "1420919",
    "end": "1427960"
  },
  {
    "text": "workflow will work in such a such a call pattern say a request of play data comes",
    "start": "1427960",
    "end": "1433799"
  },
  {
    "text": "in and as soon as a request unit is available of the network buffer the event Loop will trigger one of the",
    "start": "1433799",
    "end": "1440120"
  },
  {
    "text": "worker threats to execute the get play data call the first call all it does is that it sets up the entire execution and",
    "start": "1440120",
    "end": "1447279"
  },
  {
    "text": "it immediately returns a separate worker thread will fetch the customer info and SE another",
    "start": "1447279",
    "end": "1454480"
  },
  {
    "text": "separate worker thread will get the device info and then there is another execution",
    "start": "1454480",
    "end": "1459640"
  },
  {
    "text": "unit which will zip the results from the device info in the customer info and then pass it on to the designed play",
    "start": "1459640",
    "end": "1464880"
  },
  {
    "text": "data work execution thread and once the the play data returns we are able to return the",
    "start": "1464880",
    "end": "1471600"
  },
  {
    "text": "response as you can see the workflow spans multiple threads all context is",
    "start": "1471600",
    "end": "1477000"
  },
  {
    "start": "1472000",
    "end": "1565000"
  },
  {
    "text": "passed as messages from one processing unit to another if we need to follow and reason about a particular request we",
    "start": "1477000",
    "end": "1483120"
  },
  {
    "text": "need some form of tooling to assemble and capture these requests so that we can reason about",
    "start": "1483120",
    "end": "1488880"
  },
  {
    "text": "it and finally none of the calls can block because uh we have a limited",
    "start": "1488880",
    "end": "1494159"
  },
  {
    "text": "number of worker threads uh and it is designed with uh complete paralyzation and mind so if one of those worker",
    "start": "1494159",
    "end": "1500200"
  },
  {
    "text": "thread blocks it will significantly reduce the throughput of the service so in an asynchronous",
    "start": "1500200",
    "end": "1507039"
  },
  {
    "text": "architecture we have an asynchronous request Handler and a non-blocking IO so",
    "start": "1507039",
    "end": "1512480"
  },
  {
    "text": "the question to ask is do you really have a need Beyond request response if",
    "start": "1512480",
    "end": "1518200"
  },
  {
    "text": "you did then an asynchronous architecture might you might benefit from an asynchronous architecture however for the purpose of",
    "start": "1518200",
    "end": "1525640"
  },
  {
    "text": "play API servers we try to te AP what is a type one decision in this and what is",
    "start": "1525640",
    "end": "1531080"
  },
  {
    "text": "a type two decision and we decided to make both the iOS the incoming IO and the outgoing IO as uh",
    "start": "1531080",
    "end": "1538320"
  },
  {
    "text": "non-blocking however we kept the actual request processing itself as blocking so",
    "start": "1538320",
    "end": "1543880"
  },
  {
    "text": "that we can reason about it this enabled uh this solved for",
    "start": "1543880",
    "end": "1549240"
  },
  {
    "text": "current use cases but it also left room for future use cases certainly in one of",
    "start": "1549240",
    "end": "1554279"
  },
  {
    "text": "the business use cases we are considering a bidirectional stream pattern and when that use case arrives",
    "start": "1554279",
    "end": "1559679"
  },
  {
    "text": "we'll be able to extend this architecture to support",
    "start": "1559679",
    "end": "1564440"
  },
  {
    "start": "1565000",
    "end": "1764000"
  },
  {
    "text": "that so the type one Deion here between synchronous and asynchronous is if most of your apis with the request response",
    "start": "1565360",
    "end": "1571880"
  },
  {
    "text": "pattern consider a synchronous request Handler but ensure that your IO is",
    "start": "1571880",
    "end": "1578240"
  },
  {
    "text": "non-blocking so that wraps up synchronous and asynchronous choices the third type one decision is",
    "start": "1579440",
    "end": "1586640"
  },
  {
    "text": "around data architecture whether you are breaking up a monol uh",
    "start": "1586640",
    "end": "1592200"
  },
  {
    "text": "into microservices or you're restarting one of your microservices design please consider the data architecture like the",
    "start": "1592200",
    "end": "1599360"
  },
  {
    "text": "treat it as a number First Class citizen uh because it deserves uh that specific",
    "start": "1599360",
    "end": "1606880"
  },
  {
    "text": "role without an intentional data architecture data becomes its own",
    "start": "1606880",
    "end": "1612679"
  },
  {
    "text": "monolith let's take a look at what the situation was with Netflix here so we have multiple data sources uh for",
    "start": "1612679",
    "end": "1619840"
  },
  {
    "text": "example you can have um encoding profile data deployment status data the title",
    "start": "1619840",
    "end": "1625760"
  },
  {
    "text": "data all all the localization data and there are several Services which",
    "start": "1625760",
    "end": "1631000"
  },
  {
    "text": "consumes these data sources Asis this pattern looks similar to the distributed monolith situation because",
    "start": "1631000",
    "end": "1637720"
  },
  {
    "text": "any change in data sources instantaneously impacts all the services which is consuming this",
    "start": "1637720",
    "end": "1644919"
  },
  {
    "text": "data from within the scope of the API servers we have a subset of these data sources which we consume and each of",
    "start": "1644919",
    "end": "1651919"
  },
  {
    "text": "these data sources are uh loaded in memory asynchronously as in when",
    "start": "1651919",
    "end": "1657000"
  },
  {
    "text": "the new data becomes available the first thing which we",
    "start": "1657000",
    "end": "1662039"
  },
  {
    "text": "noticed was when you very SP small percentage of the data was actually getting",
    "start": "1662039",
    "end": "1668039"
  },
  {
    "text": "used so uh it is a very inefficient use of all the resources especially for a",
    "start": "1668039",
    "end": "1673320"
  },
  {
    "text": "service like API servers and secondly because the was a",
    "start": "1673320",
    "end": "1678480"
  },
  {
    "text": "perversive Assumption of lot of all these data sources being always being available across all the services not",
    "start": "1678480",
    "end": "1684279"
  },
  {
    "text": "only the API servers was freely using all the data models from these data sources freely but also all the shared",
    "start": "1684279",
    "end": "1690399"
  },
  {
    "text": "libraries which it was consuming was also dependent on some of these data sources so it became really non-trivial",
    "start": "1690399",
    "end": "1697080"
  },
  {
    "text": "to unwind all the uh use cases for the data sources in fact we don't even know",
    "start": "1697080",
    "end": "1702360"
  },
  {
    "text": "what are all the data uh what all data sources are necessary to run the API service",
    "start": "1702360",
    "end": "1709440"
  },
  {
    "text": "the third observation was that whenever there was a data update we could see that there was a correlated uh",
    "start": "1710360",
    "end": "1716720"
  },
  {
    "text": "degradation in performance for instance in this particular graph you could see that whenever there was a data update",
    "start": "1716720",
    "end": "1722159"
  },
  {
    "text": "you could see an increase in CP utilization it also had increasing gz pressure uh increas in latencies so if",
    "start": "1722159",
    "end": "1729399"
  },
  {
    "text": "you if you if somebody comes and ask you what's your performance characteristic of an API service we are unable to say",
    "start": "1729399",
    "end": "1735279"
  },
  {
    "text": "that this is our steady state performance because it kept on varying depending on when the when there was a",
    "start": "1735279",
    "end": "1740640"
  },
  {
    "text": "data update and finally some of the data",
    "start": "1740640",
    "end": "1745840"
  },
  {
    "text": "updates can be catastrophic most of our uh deployments are immutable tested and",
    "start": "1745840",
    "end": "1751519"
  },
  {
    "text": "caned however because these data updates happen asynchronously it has the capability in",
    "start": "1751519",
    "end": "1758159"
  },
  {
    "text": "this particular situation almost for 40 minutes our API servers was",
    "start": "1758159",
    "end": "1763840"
  },
  {
    "start": "1764000",
    "end": "1862000"
  },
  {
    "text": "down so we debated and uh discussed as to what we want to do with these data sources without changing too much of the",
    "start": "1764720",
    "end": "1771880"
  },
  {
    "text": "architecture of the data sources themselves we want to isolate the play API servers from the data in which it's",
    "start": "1771880",
    "end": "1777760"
  },
  {
    "text": "consuming so we said we were the the classic uh in computer science right all",
    "start": "1777760",
    "end": "1782919"
  },
  {
    "text": "problems in computer science can be solved by another level of red indirection so that is that is what we",
    "start": "1782919",
    "end": "1788480"
  },
  {
    "text": "employed here what we did was we created a service called the data loader service",
    "start": "1788480",
    "end": "1793600"
  },
  {
    "text": "instead of the play API servers consuming these data sources directly we let the data loader service consume all",
    "start": "1793600",
    "end": "1799440"
  },
  {
    "text": "these data sources and all its refreshes and whenever there is a new refresh of any of the data source we would compute",
    "start": "1799440",
    "end": "1807360"
  },
  {
    "text": "the data which is necessary for the play API service and we will convert the original data source into a materialized",
    "start": "1807360",
    "end": "1813440"
  },
  {
    "text": "view which only the play API service needs and which we will store that into the data store separately we also created an",
    "start": "1813440",
    "end": "1820559"
  },
  {
    "text": "obstruction layer for the data store we call the data service and it was a very uh highly available highly cach High",
    "start": "1820559",
    "end": "1826840"
  },
  {
    "text": "throughput service uh which enabled us to fetch all the data which is necessary in order to provide different business",
    "start": "1826840",
    "end": "1833679"
  },
  {
    "text": "functions From Within the play API service if you",
    "start": "1833679",
    "end": "1839240"
  },
  {
    "text": "think uh let's let me quickly go over the benefits of this right so it uses only the data it needs it doesn't load",
    "start": "1839240",
    "end": "1845640"
  },
  {
    "text": "all the data it doesn't load any data in memory and because it doesn't load any data in memory we are having a very",
    "start": "1845640",
    "end": "1851080"
  },
  {
    "text": "predictable operational characteristic and a nice side effect of this is that the number of dependencies",
    "start": "1851080",
    "end": "1856279"
  },
  {
    "text": "which we need to assemble within the API service was also significantly",
    "start": "1856279",
    "end": "1861919"
  },
  {
    "start": "1862000",
    "end": "1901000"
  },
  {
    "text": "reduced so if you think like building such a big redirection um architecture",
    "start": "1862720",
    "end": "1867840"
  },
  {
    "text": "for your data is an overkill for your use case at least consider building an abstraction or anti-corruption layer so",
    "start": "1867840",
    "end": "1874480"
  },
  {
    "text": "that whenever the need arises you can remove the data source outside of the service into its own separate",
    "start": "1874480",
    "end": "1879639"
  },
  {
    "text": "services so the type one de here is that for data architecture isolate data from the service and then ensure that at",
    "start": "1879639",
    "end": "1886279"
  },
  {
    "text": "least if you don't want to isolate the data at least ensure that there is a layer of",
    "start": "1886279",
    "end": "1891720"
  },
  {
    "text": "abstraction so that brings us to the close of all the three type 1 decisions which we think is necessary in order to",
    "start": "1892080",
    "end": "1898000"
  },
  {
    "text": "build a architecture from fresh for type two decisions we suggest",
    "start": "1898000",
    "end": "1904080"
  },
  {
    "start": "1901000",
    "end": "1928000"
  },
  {
    "text": "you choose a path experiment and iterate it's simple because it's the decisions are not consequential for instance what",
    "start": "1904080",
    "end": "1910559"
  },
  {
    "text": "we did was we had around Within the play API maybe 20 odd apis which have to implement we implemented one API we we",
    "start": "1910559",
    "end": "1917960"
  },
  {
    "text": "figured out what is the integration pattern with the clients we figured out our migration strategy we figured out",
    "start": "1917960",
    "end": "1923519"
  },
  {
    "text": "Shadow testing strategy and then we learned from that and then we moved on to the other",
    "start": "1923519",
    "end": "1928880"
  },
  {
    "start": "1928000",
    "end": "2016000"
  },
  {
    "text": "apis so the guiding principle here is that identify what makes a type 1 and",
    "start": "1928880",
    "end": "1934320"
  },
  {
    "text": "type two decision for your use case among the type one decisions spend 80% of the time debating and aligning on the",
    "start": "1934320",
    "end": "1940360"
  },
  {
    "text": "type one choices and the third part of my talk is",
    "start": "1940360",
    "end": "1946480"
  },
  {
    "text": "around evolvability how many of you guys heard the term evolutionary architecture",
    "start": "1946480",
    "end": "1954279"
  },
  {
    "text": "before it's 20 25% so evolutionary architecture is a term coined by Rebecca",
    "start": "1954639",
    "end": "1960880"
  },
  {
    "text": "Parsons and Neil Ford from thought Works they Define it as such they say an",
    "start": "1960880",
    "end": "1966480"
  },
  {
    "text": "evolutionary architecture supports guided and incremental change as first principle among multiple",
    "start": "1966480",
    "end": "1972919"
  },
  {
    "text": "Dimensions there are three key words here first is it's designed for change",
    "start": "1972919",
    "end": "1979120"
  },
  {
    "text": "and every change is guided and most importantly we should be able to evolve",
    "start": "1979120",
    "end": "1984600"
  },
  {
    "text": "across multiple Dimensions let's tackle the multiple Dimensions Fe piece first by choosing a",
    "start": "1984600",
    "end": "1991399"
  },
  {
    "text": "microservices architecture with appropriate coupling I think the appropriate coupling is uh requires the",
    "start": "1991399",
    "end": "1997159"
  },
  {
    "text": "emphasis here it allows us to evolve across multiple Dimensions the play API servers can",
    "start": "1997159",
    "end": "2002679"
  },
  {
    "text": "evolve independently of the play decision service which can evolve independently of the customer info service and the device info service each",
    "start": "2002679",
    "end": "2008559"
  },
  {
    "text": "of the services should be able to evolve independently without impacting too much of other services in the",
    "start": "2008559",
    "end": "2015960"
  },
  {
    "start": "2016000",
    "end": "2152000"
  },
  {
    "text": "ecosystem with respect to changed let's understand how evolvable are the type one",
    "start": "2016760",
    "end": "2023399"
  },
  {
    "text": "decisions as I mentioned before if you wanted to completely try an asynchronous architecture compared to the previous",
    "start": "2023399",
    "end": "2029039"
  },
  {
    "text": "architecture the current architecture is in a much better place because as I mentioned all we need to do was adopt a",
    "start": "2029039",
    "end": "2035000"
  },
  {
    "text": "asynchronous framework and build an observ tool Tools around",
    "start": "2035000",
    "end": "2040398"
  },
  {
    "text": "it same with respect to polyglot services at the very least we are already able to uh accept request from a",
    "start": "2040440",
    "end": "2047080"
  },
  {
    "text": "non Java service and talk to a non- Java service we are much better suited for",
    "start": "2047080",
    "end": "2054158"
  },
  {
    "text": "developing bidirectional apis and any additional data sources which comes into",
    "start": "2054159",
    "end": "2059200"
  },
  {
    "text": "play in order to enable a new business function and we are able to incorporate that effectively as",
    "start": "2059200",
    "end": "2064398"
  },
  {
    "text": "well in some sense these are our known unknowns we already designed our",
    "start": "2064399",
    "end": "2069960"
  },
  {
    "text": "architecture with these in mind so we ensured that our architecture was ex extendable along these",
    "start": "2069960",
    "end": "2076919"
  },
  {
    "text": "Dimensions however there might be some few potential typon decisions which may come in the next 3 five years at least",
    "start": "2076919",
    "end": "2083800"
  },
  {
    "text": "within Netflix some set of teams are seriously considering and have deployed a lot of their services and",
    "start": "2083800",
    "end": "2089240"
  },
  {
    "text": "containers and serverless is something which you've not even started to uh uh we we are probably dabbling with",
    "start": "2089240",
    "end": "2096960"
  },
  {
    "text": "it a little bit so uh once we become really serious about these two uh I'm I'm sure like it will expose uh it will",
    "start": "2096960",
    "end": "2104760"
  },
  {
    "text": "it will tell us whether how evolvable our services are so these are in some sense our",
    "start": "2104760",
    "end": "2109880"
  },
  {
    "text": "unknown unknowns right we fully expect that and uh only time will tell how our architecture is able to evolve with",
    "start": "2109880",
    "end": "2115640"
  },
  {
    "text": "those U choices so typically when you start an",
    "start": "2115640",
    "end": "2122280"
  },
  {
    "text": "architecture fresh and you deploy it for the first few months it's always uh uh",
    "start": "2122280",
    "end": "2127720"
  },
  {
    "text": "things are looking Rosy and nice and fine but as new business uh use cases come in complexity usually Creeps in",
    "start": "2127720",
    "end": "2134720"
  },
  {
    "text": "often at the cost of the original principles which guided the architecture so the key question to ask",
    "start": "2134720",
    "end": "2140200"
  },
  {
    "text": "is as we evolve how do we ensure that we are not breaking our original goals or",
    "start": "2140200",
    "end": "2145680"
  },
  {
    "text": "if you are breaking it has to be an intentional choice to break that original",
    "start": "2145680",
    "end": "2152279"
  },
  {
    "start": "2152000",
    "end": "2412000"
  },
  {
    "text": "goal this is where Fitness functions come into play and this is what uh",
    "start": "2152520",
    "end": "2157760"
  },
  {
    "text": "evolutionary architecture also suggest with respect to guided",
    "start": "2157760",
    "end": "2163000"
  },
  {
    "text": "change as part of every architecture's goal we typically have The Usual Suspects like we wanted to be highly",
    "start": "2163000",
    "end": "2169680"
  },
  {
    "text": "available we have we wanted to be late low latency uh we wanted to be reliable",
    "start": "2169680",
    "end": "2176760"
  },
  {
    "text": "resilient and at Netflix we also cared about like observability Simplicity develop of",
    "start": "2176760",
    "end": "2182480"
  },
  {
    "text": "productivity sure these goals themselves are interesting but what we want is the",
    "start": "2182480",
    "end": "2188720"
  },
  {
    "text": "relative importance of one goal with respect to one another for instance this is a fitness",
    "start": "2188720",
    "end": "2194480"
  },
  {
    "text": "function for our play API service it actually categorizes each of our goal with relative importance to the other",
    "start": "2194480",
    "end": "2202119"
  },
  {
    "text": "goal a quick note of caution here the fitness function for your service might be totally different and it might be uh",
    "start": "2202119",
    "end": "2209119"
  },
  {
    "text": "it should be tailored for your particular business use case let's go over couple of choices",
    "start": "2209119",
    "end": "2216160"
  },
  {
    "text": "here and why we made why we ranked one goal higher uh compared to the other one",
    "start": "2216160",
    "end": "2221520"
  },
  {
    "text": "for example we have we choose Simplicity or reliability as we talked earlier in",
    "start": "2221520",
    "end": "2227040"
  },
  {
    "text": "the talk uh we had a play decision service and usually in order to improve the reliability of a service we allow",
    "start": "2227040",
    "end": "2234240"
  },
  {
    "text": "for fallbacks to happen and but then when the fallback happens it increases the operational complexity of the",
    "start": "2234240",
    "end": "2240240"
  },
  {
    "text": "calling service especially if the callbacks are uh if the fallbacks are talking to a totally different servers",
    "start": "2240240",
    "end": "2246839"
  },
  {
    "text": "in order to service the fallback or if it was a CPU intensive applic uh fallback logic",
    "start": "2246839",
    "end": "2252160"
  },
  {
    "text": "itself so if the choice was to have a heavy fall back to improve reliability",
    "start": "2252160",
    "end": "2257880"
  },
  {
    "text": "or to keep the calling service simple we want to choose",
    "start": "2257880",
    "end": "2263240"
  },
  {
    "text": "Simplicity similarly we prefer scalability over throughput any form of u u in order to",
    "start": "2264040",
    "end": "2271960"
  },
  {
    "text": "increase the throughput for any service usually it includes some form of caching right uh in in one particular case what",
    "start": "2271960",
    "end": "2277280"
  },
  {
    "text": "we noticed was if we just introduced an inmemory caching solution uh we were able to increase the throughput by",
    "start": "2277280",
    "end": "2283760"
  },
  {
    "text": "50% however in a dire situation where we want to quickly scale the horizontally",
    "start": "2283760",
    "end": "2289280"
  },
  {
    "text": "scale our services because there is an increase in request load this meant that we have to invest in some form of cash",
    "start": "2289280",
    "end": "2295240"
  },
  {
    "text": "Waring solution before we can allow the new instances to take traffic so it meant that the throughput",
    "start": "2295240",
    "end": "2303880"
  },
  {
    "text": "advantage came at the cost of scalability so we decided to say like we do we we prefer scalability and we",
    "start": "2303880",
    "end": "2310040"
  },
  {
    "text": "decided not to go ahead with that solution and finally let's quickly touch",
    "start": "2310040",
    "end": "2316560"
  },
  {
    "text": "upon why we prefer observability over latency so if you designed a a fully",
    "start": "2316560",
    "end": "2323720"
  },
  {
    "text": "asynchronous solution because of the advantages of like maximum paralyzing all the request uh typically it results",
    "start": "2323720",
    "end": "2331240"
  },
  {
    "text": "in low low lower latencies however if you have to reason",
    "start": "2331240",
    "end": "2337040"
  },
  {
    "text": "about what what happened during a request workflow we need to build separate observability Tools in order to",
    "start": "2337040",
    "end": "2343599"
  },
  {
    "text": "uh do day-to-day functions about like debugging a particular issue so when it comes to observability",
    "start": "2343599",
    "end": "2349760"
  },
  {
    "text": "and latency and if it has to be a choice between the two we prefer",
    "start": "2349760",
    "end": "2355079"
  },
  {
    "text": "observability so those are guiding uh those are the fitness functions which guides us for any intentional changes",
    "start": "2355079",
    "end": "2362800"
  },
  {
    "text": "but then in order to ensure that our service is not degrading due to any unintentional change we have a separate",
    "start": "2362800",
    "end": "2368440"
  },
  {
    "text": "set of Fitness functions these typically uh take the form of alerts metrics",
    "start": "2368440",
    "end": "2373920"
  },
  {
    "text": "monitoring or in some cases test for instance we have alerts for our availability and latency slas in order",
    "start": "2373920",
    "end": "2381440"
  },
  {
    "text": "to ensure that we are only uh taking in thin clients into the play API servers",
    "start": "2381440",
    "end": "2386839"
  },
  {
    "text": "we have written tests to ensure that the dependency tree only contains dependencies which we've already white",
    "start": "2386839",
    "end": "2392680"
  },
  {
    "text": "listed and we also ensure that we always write test to ensure for any non-critical service communication if",
    "start": "2392680",
    "end": "2399440"
  },
  {
    "text": "that communication fails it doesn't bring down the API service and for merge to deploy time we usually have a",
    "start": "2399440",
    "end": "2405560"
  },
  {
    "text": "monitoring dashboard we keep track of how how much the merch to deploy time is increasing or decreasing over the over",
    "start": "2405560",
    "end": "2412680"
  },
  {
    "start": "2412000",
    "end": "2522000"
  },
  {
    "text": "time so the guiding principle here is that divine define Fitness functions to",
    "start": "2412680",
    "end": "2418200"
  },
  {
    "text": "act as your guide for architectural Evolution so in terms of all the",
    "start": "2418200",
    "end": "2423920"
  },
  {
    "text": "different attributes which we talked about this is how the previous architecture Stacks up with the current architecture current architecture has",
    "start": "2423920",
    "end": "2430280"
  },
  {
    "text": "singular identities operational isolation almost limited or no binary coupling it allows for asynchronous",
    "start": "2430280",
    "end": "2437280"
  },
  {
    "text": "communication it enables us to go beyond Java and it has an explicit data architecture and we have a uh set of",
    "start": "2437280",
    "end": "2444040"
  },
  {
    "text": "Fitness functions which is guiding us for evolution coming back to the initial",
    "start": "2444040",
    "end": "2450079"
  },
  {
    "text": "graphs which I showed you at the start of the talk with respect to the high availability goal I'm happy to say that",
    "start": "2450079",
    "end": "2457280"
  },
  {
    "text": "in the one year of its Inception we have not had any single incident in which the play API service was a direct or an",
    "start": "2457280",
    "end": "2463200"
  },
  {
    "text": "indirect contributor and our goal of five deployments per week in for that goal we",
    "start": "2463200",
    "end": "2469440"
  },
  {
    "text": "are averaging around like 4.5 that means almost all days all week days during business are we are shipping and then we",
    "start": "2469440",
    "end": "2475560"
  },
  {
    "text": "just had to do two roll backs that do not relate to a customer phasing issue uh but it is more more around the data",
    "start": "2475560",
    "end": "2481560"
  },
  {
    "text": "quality issue so to summarize I would encourage you guys to think about about building a",
    "start": "2481560",
    "end": "2488359"
  },
  {
    "text": "evolutionary architecture build a strong domain specific identity ensure an",
    "start": "2488359",
    "end": "2493400"
  },
  {
    "text": "iterate on that identity so that like you can always keep the identity at the back of the mind while you are building",
    "start": "2493400",
    "end": "2498560"
  },
  {
    "text": "your architecture invest in type 1 and type two decisions framework determine what",
    "start": "2498560",
    "end": "2503800"
  },
  {
    "text": "constitutes your type 1 decision and spend 80% of the time debating and aligning on those",
    "start": "2503800",
    "end": "2509000"
  },
  {
    "text": "choices and finally ensure that your architecture is evolvable across multiple dimensions and use Fitness",
    "start": "2509000",
    "end": "2515920"
  },
  {
    "text": "functions to act as your guide that's all I got thank you very much",
    "start": "2515920",
    "end": "2522240"
  }
]