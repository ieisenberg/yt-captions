[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "uh so today we're going to talk about render script and kind of take a deep dive through it uh my name is Larry Schaffer and before we get started I'll",
    "start": "9240",
    "end": "15759"
  },
  {
    "start": "15000",
    "end": "15000"
  },
  {
    "text": "tell you a little bit about me I'm CTO and co-founder of highq LLC we're an",
    "start": "15759",
    "end": "20840"
  },
  {
    "text": "engineering consulting firm uh specializing in Mobile and embedded platforms working from the bootloader",
    "start": "20840",
    "end": "26679"
  },
  {
    "text": "all the way up through the application space I've over 16 years uh developing",
    "start": "26679",
    "end": "32719"
  },
  {
    "text": "embedded and mobile device software uh an extensive experience throughout the software",
    "start": "32719",
    "end": "38719"
  },
  {
    "text": "stack uh and that includes numerous operating systems so Linux Android uh windows and various R toses I've been",
    "start": "38719",
    "end": "45680"
  },
  {
    "text": "working with Android since the first uh AOSP release and since it was first publicly available and I've been doing",
    "start": "45680",
    "end": "52280"
  },
  {
    "text": "native development and debug along with your typical Java application and framework uh development uh even before",
    "start": "52280",
    "end": "59239"
  },
  {
    "text": "the ndk is available I've been the lead architect and developer on three custom",
    "start": "59239",
    "end": "64559"
  },
  {
    "text": "Android platforms for various customers um and I'm an experienced trainer I've",
    "start": "64559",
    "end": "70200"
  },
  {
    "text": "spoken here at andevcon before uh I've also developed some training classes for plural site which is an online training",
    "start": "70200",
    "end": "77040"
  },
  {
    "text": "provider and I also do in-person training for the new",
    "start": "77040",
    "end": "82159"
  },
  {
    "text": "Circle So today we're going to talk a bit about render script and we're going to talk about uh what render script is",
    "start": "82159",
    "end": "88360"
  },
  {
    "text": "and we're also going to talk about what it is is not uh there are some important things to understand there uh we'll go",
    "start": "88360",
    "end": "94240"
  },
  {
    "start": "91000",
    "end": "91000"
  },
  {
    "text": "through some typical use cases uh some people have some misconceptions about what render script is and so you know I",
    "start": "94240",
    "end": "101439"
  },
  {
    "text": "want to kind of go over some of those uh and then we're going to talk about the anatomy of a script basically how you",
    "start": "101439",
    "end": "106520"
  },
  {
    "text": "create one and how you actually leverage and use these things um we'll also go through some",
    "start": "106520",
    "end": "112759"
  },
  {
    "text": "performance comparisons um I was hoping there would be a projector in here and unfortunately there's not I will show a",
    "start": "112759",
    "end": "119479"
  },
  {
    "text": "demon ation on uh an Nexus 7 and unfortunately I'll just have to hold it up for you all to see the pretty screen",
    "start": "119479",
    "end": "126320"
  },
  {
    "text": "uh but we'll also talk about some performance numbers and then we're going to go a little bit through some of the debugging",
    "start": "126320",
    "end": "132120"
  },
  {
    "text": "and and pitfalls you have with dealing with render script um uh it continues to evolve so we're",
    "start": "132120",
    "end": "139280"
  },
  {
    "text": "going to go through some deprecated and new features uh that are available in render script and then what I call the",
    "start": "139280",
    "end": "144800"
  },
  {
    "text": "man behind the curtain so we're going to talk about kind of the underpinnings and do a brief overview of what the system's",
    "start": "144800",
    "end": "150879"
  },
  {
    "text": "doing uh under the hood to actually enable this functionality uh we can do some Q&A at",
    "start": "150879",
    "end": "156760"
  },
  {
    "text": "the end but you guys feel free if you've got questions as I go through just let me know I'm happy to answer any",
    "start": "156760",
    "end": "161879"
  },
  {
    "text": "questions as we go through this so first thing what is render",
    "start": "161879",
    "end": "167760"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "script it's high performance Computing that's what it's intended to be for",
    "start": "167760",
    "end": "173080"
  },
  {
    "text": "um it's a customized language it's based on c99 so it has a very C C++ like",
    "start": "173080",
    "end": "178959"
  },
  {
    "text": "syntax it's fully parallelized and it's optimized for Hardware as long as the",
    "start": "178959",
    "end": "185120"
  },
  {
    "text": "OEM enables that functionality so it allows you to leverage the capabilities",
    "start": "185120",
    "end": "190480"
  },
  {
    "text": "In the End Hardware uh to its fullest it is Target AG agnostic and",
    "start": "190480",
    "end": "196760"
  },
  {
    "text": "extensible and we'll talk a bit more about that so a little different than the ndk where you're building for a",
    "start": "196760",
    "end": "202640"
  },
  {
    "text": "specific Hardware device and you have to be very cognizant of what you're deploying upon uh with render script the",
    "start": "202640",
    "end": "209920"
  },
  {
    "text": "code that you write is Target agnostic it natively executes on the",
    "start": "209920",
    "end": "216000"
  },
  {
    "text": "device uh so even though it is Target agnostic you still get the benefits of native code",
    "start": "216000",
    "end": "223000"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "execution so all that sounds really great but what is render script not it's",
    "start": "223000",
    "end": "228200"
  },
  {
    "text": "not a general purpose programming language so it has a very c99 like syntax but you can't use it for your",
    "start": "228200",
    "end": "234760"
  },
  {
    "text": "everyday application development so therefore it's not a framework replacement you couldn't use",
    "start": "234760",
    "end": "240439"
  },
  {
    "text": "this just like you can't use the ndk to replace your typical Java application Logic the same holds true for render",
    "start": "240439",
    "end": "247760"
  },
  {
    "text": "script you can't use it to replace the framework it's also not an ndk or a jni",
    "start": "247760",
    "end": "253560"
  },
  {
    "text": "replacement okay while it runs at the native level it's not a full-on",
    "start": "253560",
    "end": "259160"
  },
  {
    "text": "replacement and we'll get into some of that uh as we go a little further into this so some typical use cases for",
    "start": "259160",
    "end": "266680"
  },
  {
    "text": "render script and I feel like I'm going really fast so if anybody has any questions just slow me down okay image",
    "start": "266680",
    "end": "272400"
  },
  {
    "text": "manipulation is a big one if you look through any of the render script documentation you're going to see a lot of information in there about",
    "start": "272400",
    "end": "278280"
  },
  {
    "text": "manipulating images and that's usually what the examples are and in fact that's what Google uses it for in the latest",
    "start": "278280",
    "end": "284520"
  },
  {
    "text": "version of Android so with KitKat the image editor or the photo editor that's built into the device is actually using",
    "start": "284520",
    "end": "291479"
  },
  {
    "start": "290000",
    "end": "290000"
  },
  {
    "text": "render script under the hood to do the image manipulations for efficiency as well as all the",
    "start": "291479",
    "end": "298080"
  },
  {
    "text": "filtering you can use for 3D graphics computations and a lot of folks really thought there'd be a nice tie in between",
    "start": "298080",
    "end": "304360"
  },
  {
    "text": "render script and openg and in fact it had kind of gone that way for a while but as we'll see later those apis were",
    "start": "304360",
    "end": "310759"
  },
  {
    "text": "deprecated they found it wasn't a good fit and it actually has much more use Beyond just",
    "start": "310759",
    "end": "316520"
  },
  {
    "text": "Graphics so you can actually use it for a lot of other intense computational work I've seen some posts online of",
    "start": "316520",
    "end": "323520"
  },
  {
    "text": "people uh using render script to do h264 implementations and their own",
    "start": "323520",
    "end": "328919"
  },
  {
    "text": "custom codec implementations and you absolutely can do that because it's meant for number",
    "start": "328919",
    "end": "334560"
  },
  {
    "text": "crunching so it is all about number crunching it's all about manipulating data and doing the kinds of things you",
    "start": "334560",
    "end": "340000"
  },
  {
    "text": "want to do very very efficiently on your Hardware so what does the anatomy of a",
    "start": "340000",
    "end": "346479"
  },
  {
    "text": "render script look like okay it's integrated with the",
    "start": "346479",
    "end": "351720"
  },
  {
    "text": "virtual machine in Android and the virtual machine is in control and owns all of the memory so everything that you",
    "start": "351720",
    "end": "359000"
  },
  {
    "text": "do memory wise it it's all managed up in the Java laay so up here in the",
    "start": "359000",
    "end": "365440"
  },
  {
    "text": "framework your application is going to allocate objects which get put into",
    "start": "365440",
    "end": "371120"
  },
  {
    "text": "memory and it can read and write through them and then over an interface to the render script there's a binding so that",
    "start": "371120",
    "end": "377520"
  },
  {
    "text": "the render script engine knows how to manipulate this same memory and it's doing that via some reflected class",
    "start": "377520",
    "end": "384800"
  },
  {
    "text": "layers and it's a very important aspect of this to understand as you see as we'll get into some code here in a",
    "start": "384800",
    "end": "390160"
  },
  {
    "text": "little while so it is a master and slave type relationship where the Java code is",
    "start": "390160",
    "end": "395720"
  },
  {
    "text": "the master and you can call render script via a reflected layer now if you've looked at any of the release",
    "start": "395720",
    "end": "401240"
  },
  {
    "text": "notes for the latest KitKat I'm sure most people in this room have they've also opened up render script to be used",
    "start": "401240",
    "end": "408319"
  },
  {
    "text": "from the ndk uh however as I'll touch on a little later the documentation for that is",
    "start": "408319",
    "end": "415919"
  },
  {
    "text": "basically nil there's nothing there the render script documentation on the Java side uh is there but it is a little",
    "start": "415919",
    "end": "422400"
  },
  {
    "text": "sparse and it's kind of hard to understand on the ndk side there's really none so you're kind of on your",
    "start": "422400",
    "end": "428319"
  },
  {
    "text": "own there uh so for most of my talk I'm going to talk about it all being managed up here in the Java lay um because",
    "start": "428319",
    "end": "435720"
  },
  {
    "text": "really from the ndk layer I've not had a chance to dive into how that works and how you could actually use it because",
    "start": "435720",
    "end": "440879"
  },
  {
    "text": "there literally is nothing to work from so again here in the Android",
    "start": "440879",
    "end": "447879"
  },
  {
    "text": "framework you've got your activity and you're going to have a render script context and then an object which",
    "start": "447879",
    "end": "453919"
  },
  {
    "text": "represents your actual render script code and you're going to call through to",
    "start": "453919",
    "end": "459160"
  },
  {
    "text": "the renderscript runtime by way of this object and this reflection object which will then actually execute your code",
    "start": "459160",
    "end": "466479"
  },
  {
    "text": "within the render script engine running at the native level so all that sounds great how do we",
    "start": "466479",
    "end": "474120"
  },
  {
    "start": "471000",
    "end": "471000"
  },
  {
    "text": "actually write one of these things what do we do with it well the first thing you have to do is you have to declare",
    "start": "474120",
    "end": "479199"
  },
  {
    "text": "some special pragmas at the top of the file okay it's one of the first things you have to do you always declare",
    "start": "479199",
    "end": "484319"
  },
  {
    "text": "version one and then you've got a pragma which declares your render script I don't know can you guys see that all the way in the",
    "start": "484319",
    "end": "490199"
  },
  {
    "text": "back okay you can good uh you basically tie in the render script with what the",
    "start": "490199",
    "end": "495879"
  },
  {
    "text": "package name is in Java and that ultimately is what's going to to cause",
    "start": "495879",
    "end": "501440"
  },
  {
    "text": "the renderscript compiler to kick out a Java uh reflection class which belongs",
    "start": "501440",
    "end": "507319"
  },
  {
    "text": "inside of this package so this creates that mapping for you you can have an optional in knit",
    "start": "507319",
    "end": "514039"
  },
  {
    "text": "function um which I'll talk about that here briefly then you have what's called root functions you can have one or more",
    "start": "514039",
    "end": "520880"
  },
  {
    "text": "uh especially with the newer versions of Android early on you could only have one",
    "start": "520880",
    "end": "526160"
  },
  {
    "text": "and the root function is really where all of your data comes in and all your data goes back out okay there are some",
    "start": "526160",
    "end": "531880"
  },
  {
    "text": "set forms um and as I found uh you know going through and refreshing my slides",
    "start": "531880",
    "end": "537640"
  },
  {
    "text": "in My Demo today it continues to evolve with the API so uh in fact I found that",
    "start": "537640",
    "end": "543120"
  },
  {
    "text": "this form here while it used to work in uh API",
    "start": "543120",
    "end": "548480"
  },
  {
    "text": "level 16 or 17 with the latest set of tools this form of the root function",
    "start": "548480",
    "end": "554959"
  },
  {
    "text": "doesn't work anymore and it doesn't tell you at build time it's not until runtime that it just hurls all over you um there",
    "start": "554959",
    "end": "562640"
  },
  {
    "text": "are probably some exceptions to that uh that you can do with some special attributes I'll talk about later uh and",
    "start": "562640",
    "end": "568880"
  },
  {
    "text": "so that's what this means here that you get to decide what your root function looks like so with the newer versions of",
    "start": "568880",
    "end": "575880"
  },
  {
    "text": "render script and the newer API levels you can actually Define what you want your root function to be U previously it",
    "start": "575880",
    "end": "583680"
  },
  {
    "text": "was set you had to follow a specific form you can have constants and variables inside of your render script",
    "start": "583680",
    "end": "590360"
  },
  {
    "text": "and you can have other helper functions which work along with your render script you can also call other scripts but",
    "start": "590360",
    "end": "596760"
  },
  {
    "text": "there are some limitations in what you can do there so the init function it's completely",
    "start": "596760",
    "end": "602920"
  },
  {
    "start": "598000",
    "end": "598000"
  },
  {
    "text": "optional it's up to you whether you even want to use this and it's effectively a Constructor if you've got any type of",
    "start": "602920",
    "end": "609040"
  },
  {
    "text": "initialization work that needs to be done before your render script can actually get going and be used this is",
    "start": "609040",
    "end": "616000"
  },
  {
    "text": "the place to do it it's called one time before your script actually gets executed it takes no arguments and it",
    "start": "616000",
    "end": "622959"
  },
  {
    "text": "gets no return values so you're not going to get any inputs as part of the init and it's not something you can trap ahead of time it's really just for any",
    "start": "622959",
    "end": "629320"
  },
  {
    "text": "any kind of setup you're going to need uh before you can get going that's",
    "start": "629320",
    "end": "634560"
  },
  {
    "text": "hardcoded okay I I touched on the root function before now one thing you'll find in the documentation is the root",
    "start": "634560",
    "end": "641120"
  },
  {
    "text": "function is also commonly known as the kernel and so you'll see a lot of you know this word used interchangeably with",
    "start": "641120",
    "end": "649000"
  },
  {
    "text": "the kernel function so or I'm sorry with the root this is the main entry point of",
    "start": "649000",
    "end": "654320"
  },
  {
    "text": "your script this is where all the work gets done and this is where you process your data items you're going to chew",
    "start": "654320",
    "end": "660680"
  },
  {
    "text": "through whatever memory has been shared from the Javas space and you're going to Output whatever it is you need to",
    "start": "660680",
    "end": "666639"
  },
  {
    "text": "Output it can have multiple forms like I touched on before so when render script",
    "start": "666639",
    "end": "671959"
  },
  {
    "text": "was first introduced back in honeycomb there were some fixed forms that you had to follow originally you had to have uh",
    "start": "671959",
    "end": "680560"
  },
  {
    "text": "exactly two arguments and then it was expanded out you could have uh the two the same two in andout arguments and",
    "start": "680560",
    "end": "686959"
  },
  {
    "text": "then you could also pass some user context data to it starting with Ice Cream Sandwich and API level 14 the same",
    "start": "686959",
    "end": "695360"
  },
  {
    "text": "two apis or or forms existed but now you could also include location information",
    "start": "695360",
    "end": "702160"
  },
  {
    "text": "and you'll see that in the demo here in a little while um excuse me where you",
    "start": "702160",
    "end": "707720"
  },
  {
    "text": "typically use this for something like a bit map where you want to have X and Y coordinates you want to know where in",
    "start": "707720",
    "end": "713600"
  },
  {
    "text": "your data set you are and there's actually a third form now where you can have a z-coordinate you can look at it",
    "start": "713600",
    "end": "719079"
  },
  {
    "text": "in three dimensions starting with API level 16 uh",
    "start": "719079",
    "end": "725320"
  },
  {
    "text": "your render script can have a completely custom root function it's up to you what it looks like and you can also have more",
    "start": "725320",
    "end": "731560"
  },
  {
    "text": "than one although as you'll see that with render script there's a lots of caveats and that is one of them I'll",
    "start": "731560",
    "end": "736959"
  },
  {
    "text": "talk about shortly so constants and variables these",
    "start": "736959",
    "end": "742519"
  },
  {
    "start": "737000",
    "end": "737000"
  },
  {
    "text": "are available only within your script so if you remember just a minute ago I I mentioned that you can call other",
    "start": "742519",
    "end": "748160"
  },
  {
    "text": "Scripts from within your script uh and that is true caveats there as well um",
    "start": "748160",
    "end": "755160"
  },
  {
    "text": "but you can't access variables in other scripts from within your render script you can only touch your variables and",
    "start": "755160",
    "end": "761079"
  },
  {
    "text": "your constants now in that reflection layer up in Java your variables do get",
    "start": "761079",
    "end": "768160"
  },
  {
    "text": "automatic accessor methods so you're going to get a getter and Setter so for",
    "start": "768160",
    "end": "773360"
  },
  {
    "text": "example if I Define a 32-bit integer called width in my render in my renderscript code",
    "start": "773360",
    "end": "780160"
  },
  {
    "text": "I'm automatically going to get JavaScript or I'm sorry Java code which",
    "start": "780160",
    "end": "785720"
  },
  {
    "text": "this is my reflection class here and we'll go into some of this in a little more detail in a minute but you can see",
    "start": "785720",
    "end": "791519"
  },
  {
    "text": "that I can set the width on it and I can also get it back out of the render script so my variables that I've defined",
    "start": "791519",
    "end": "799480"
  },
  {
    "text": "in render script automatically get these accessor methods as part of your build",
    "start": "799480",
    "end": "804600"
  },
  {
    "text": "process structures and pointers are special you can have structures you can have memory Point render script but they",
    "start": "804600",
    "end": "811120"
  },
  {
    "text": "are very special and you have to deal with them accordingly they can be used directly if they're Global within the",
    "start": "811120",
    "end": "817320"
  },
  {
    "text": "render script and they also get accessor methods and there's a whole separate reflection class that gets created for",
    "start": "817320",
    "end": "822639"
  },
  {
    "text": "your structures uh and and it is kind of complicated I'm not going to go into a whole lot of detail here this is one of",
    "start": "822639",
    "end": "828480"
  },
  {
    "text": "the areas where there actually is a good amount of documentation and some of the help now memory for pointers are",
    "start": "828480",
    "end": "834959"
  },
  {
    "text": "allocated up in Java just like everything else Java side owns the memory on this and it gets shared down with the render",
    "start": "834959",
    "end": "841959"
  },
  {
    "text": "script so what you do is you bind it you take a memory allocation up in Java and you actually bind it over a special call",
    "start": "841959",
    "end": "850000"
  },
  {
    "text": "uh down into your render script so it has access to that memory now your structures can also not",
    "start": "850000",
    "end": "856279"
  },
  {
    "text": "Nest pointers or arrays they have to be fairly flat",
    "start": "856279",
    "end": "861320"
  },
  {
    "text": "structures anybody have any questions so far I feel like I'm moving about a million miles an hour yeah uh they are",
    "start": "861320",
    "end": "867920"
  },
  {
    "text": "very similar uh for whatever reason Google chose to go this path rather than through opencl so opencl has not been",
    "start": "867920",
    "end": "874800"
  },
  {
    "text": "included in the framework or added as a stable Library as part of the ndk uh in",
    "start": "874800",
    "end": "880279"
  },
  {
    "text": "fact I believe the person at Google who originally came up with renderscript and",
    "start": "880279",
    "end": "885920"
  },
  {
    "text": "put it in here works very heavily on opencl so there are a lot of similarities in it why they decided to",
    "start": "885920",
    "end": "892079"
  },
  {
    "text": "go this route rather than an opencl I I couldn't say so in renderscript you can",
    "start": "892079",
    "end": "897279"
  },
  {
    "text": "Define your own functions uh uh these can be called within your own render script or you can call them from up in",
    "start": "897279",
    "end": "903959"
  },
  {
    "text": "Java so like everything else you do get a Java accessor method uh as part of",
    "start": "903959",
    "end": "909040"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "your automatically generated reflection class so it like the getter and Setter it",
    "start": "909040",
    "end": "916040"
  },
  {
    "text": "automatically includes this invoke and that's how you know you're calling a function so if I Define this in my",
    "start": "916040",
    "end": "921160"
  },
  {
    "text": "render script where I'm simply just taking some data and I'm adding it to some internal data structure in my",
    "start": "921160",
    "end": "926279"
  },
  {
    "text": "script from up in the Java layer I can actually call that function I can feed it data from the Java layer now this is",
    "start": "926279",
    "end": "933319"
  },
  {
    "text": "different than what you would do for your your computational piece of this you wouldn't want to use this for computation um this is really just to be",
    "start": "933319",
    "end": "940199"
  },
  {
    "text": "able to data down into your render script uh you know for it to have or to invoke some special function in there",
    "start": "940199",
    "end": "947519"
  },
  {
    "text": "possibly for setup or something along those lines you don't get any return value",
    "start": "947519",
    "end": "953759"
  },
  {
    "text": "okay that's why it's important you don't necessarily use this for your computation you can help augment your",
    "start": "953759",
    "end": "959079"
  },
  {
    "text": "computation or feed it some information but really this should not be the main part of the",
    "start": "959079",
    "end": "965199"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "computation so calling other scripts scripts can call other scripts",
    "start": "965199",
    "end": "971000"
  },
  {
    "text": "as I mentioned before but you can only call the compute function the compute kernel within another script you can't",
    "start": "971000",
    "end": "979079"
  },
  {
    "text": "call you know like back on my previous slide where I had my add data function I couldn't call that from within another",
    "start": "979079",
    "end": "985120"
  },
  {
    "text": "render script you can only call the root or kernel functions",
    "start": "985120",
    "end": "990920"
  },
  {
    "text": "and again like everything else all of your render script instances are managed up in the Java side so even if you're",
    "start": "991920",
    "end": "997759"
  },
  {
    "text": "going to call one render script from another render script your first one has to be fed the information about the",
    "start": "997759",
    "end": "1004920"
  },
  {
    "text": "second render script from your Java side so something like a function like we had",
    "start": "1004920",
    "end": "1010240"
  },
  {
    "text": "on the previous slide you could use to inform your render script of the way or",
    "start": "1010240",
    "end": "1015600"
  },
  {
    "text": "the render script uh name or handle to call for the other",
    "start": "1015600",
    "end": "1021279"
  },
  {
    "text": "one this is very useful for built-in intrinsics and I'll talk about this in a little while with uh regards to the",
    "start": "1021399",
    "end": "1028199"
  },
  {
    "text": "platform supports uh and some of the the things that have evolved over time but",
    "start": "1028199",
    "end": "1034600"
  },
  {
    "text": "it's order to support some built-in intrinsics particularly for IM processing so you can do things like",
    "start": "1034600",
    "end": "1039640"
  },
  {
    "text": "blurring uh image data and that kind of thing so this is very useful for that where you can have one script call",
    "start": "1039640",
    "end": "1044959"
  },
  {
    "text": "another script script groups are another another piece that's been added uh over the last",
    "start": "1044959",
    "end": "1052080"
  },
  {
    "text": "couple of apis to render script and this allows you to chain scripts together so now instead of uh one script having to",
    "start": "1052080",
    "end": "1060640"
  },
  {
    "text": "call another script and being aware that it needs to call another script um you can actually set all this up in Java and",
    "start": "1060640",
    "end": "1067480"
  },
  {
    "text": "the framework handles it you know very efficiently for you so I've talked about the anatomy of",
    "start": "1067480",
    "end": "1074120"
  },
  {
    "start": "1070000",
    "end": "1070000"
  },
  {
    "text": "a render script and how do you actually write one let's talk a little bit about how you call it from the Java side the",
    "start": "1074120",
    "end": "1079720"
  },
  {
    "text": "first thing you have to do in your uh activity is you're going to call this",
    "start": "1079720",
    "end": "1085520"
  },
  {
    "text": "static method called create and you pass it your context this render script object is really your render script",
    "start": "1085520",
    "end": "1093360"
  },
  {
    "text": "context you're going to use for all of the render script calls as you create uh your script reflection class so here I'm",
    "start": "1093360",
    "end": "1101799"
  },
  {
    "text": "going to create my reflection class um and this name will make a little more sense here but you can",
    "start": "1101799",
    "end": "1111200"
  },
  {
    "text": "see basically pregenerated version of my script uh and I'll talk some more about",
    "start": "1117600",
    "end": "1123520"
  },
  {
    "text": "that here shortly because it's it's important to understand what that is but this reflection class they're all",
    "start": "1123520",
    "end": "1129640"
  },
  {
    "text": "derived from this Bas script C abstract class and this basically defines the",
    "start": "1129640",
    "end": "1135200"
  },
  {
    "text": "things that you can normally call and the form that you can call these different classes",
    "start": "1135200",
    "end": "1140720"
  },
  {
    "text": "you're then going to set up your data on the Java side and this is done via allocation objects and this creates the",
    "start": "1141120",
    "end": "1148080"
  },
  {
    "text": "mapping of what your data looks like in Java for what it expects down in the render",
    "start": "1148080",
    "end": "1153960"
  },
  {
    "text": "script now you would invoke the script and you'll see that it it uses this for each prefix so kind of like when you're",
    "start": "1153960",
    "end": "1160720"
  },
  {
    "text": "calling the accessor methods uh for uh variables you get your get and your set",
    "start": "1160720",
    "end": "1166200"
  },
  {
    "text": "if you want to invoke a function you get this invoke prefix well here for your root function you get four each and it's kind of a funny name",
    "start": "1166200",
    "end": "1174080"
  },
  {
    "text": "but what that means is it's running your render script in parallel okay it's",
    "start": "1174080",
    "end": "1179280"
  },
  {
    "text": "looping over all of the data you want to feed your script and so that's what that name really means is it's for each data",
    "start": "1179280",
    "end": "1186240"
  },
  {
    "text": "point in your allocation I'm going to call your root function so that you can process that",
    "start": "1186240",
    "end": "1192480"
  },
  {
    "text": "data chunk so once this returns",
    "start": "1192480",
    "end": "1199520"
  },
  {
    "text": "you then need to get your data out of the allocation so that you can actually manipulate it up in the Javas space now",
    "start": "1199520",
    "end": "1205919"
  },
  {
    "text": "that you've got the results so you do have to do some marshalling there so I'll give you a quick",
    "start": "1205919",
    "end": "1213000"
  },
  {
    "start": "1208000",
    "end": "1208000"
  },
  {
    "text": "demonstration uh we're going to do a a Mandel BR fractal and a couple of different implementations of this thing",
    "start": "1213000",
    "end": "1219240"
  },
  {
    "text": "so let me hop over to some code so if it becomes too much of an eye",
    "start": "1219240",
    "end": "1224480"
  },
  {
    "text": "chart or it may it's hard to understand this stuff um you can definitely look at the code uh on your",
    "start": "1224480",
    "end": "1231159"
  },
  {
    "text": "own okay so the activity uh for this is pretty simple I'm not going to really spend a whole lot of time here other",
    "start": "1231159",
    "end": "1237039"
  },
  {
    "text": "than to say uh it creates um it creates a window with no title so",
    "start": "1237039",
    "end": "1244480"
  },
  {
    "text": "we're going to take up the full screen and then I create this fractal surface object and fractal surface is really",
    "start": "1244480",
    "end": "1251640"
  },
  {
    "text": "just a surface View and this allows me to um Bas basically initialize things",
    "start": "1251640",
    "end": "1259320"
  },
  {
    "text": "and then as the surface is created as it's changed I can update it with uh",
    "start": "1259320",
    "end": "1265080"
  },
  {
    "text": "data from the generator okay it's just a a generic way of doing this um the other thing the activity does to make it easy",
    "start": "1265080",
    "end": "1272440"
  },
  {
    "text": "to move between is uh I hook the key up key down the volume keys and we'll cycle",
    "start": "1272440",
    "end": "1278400"
  },
  {
    "text": "through all my different generators okay so up here in the",
    "start": "1278400",
    "end": "1284720"
  },
  {
    "text": "surface you'll see I've got a number of generators defined I'll show you a Java implementation a",
    "start": "1284919",
    "end": "1291440"
  },
  {
    "text": "multi-threaded Java implementation uh render script a native ndk and then a multi-threaded native and",
    "start": "1291440",
    "end": "1298720"
  },
  {
    "text": "we'll look at the performance uh differences but I also want to look at the code differences and the complexity",
    "start": "1298720",
    "end": "1304039"
  },
  {
    "text": "differences because that's one thing that you have to look at as a trade-off here",
    "start": "1304039",
    "end": "1309880"
  },
  {
    "text": "okay every one of these is a subass of what I've called fractal gen or fractal",
    "start": "1309880",
    "end": "1316039"
  },
  {
    "text": "generator class it's an abstract class stores some basic information and your concrete",
    "start": "1316039",
    "end": "1322720"
  },
  {
    "text": "implementation has to provide two methods a get name so it describes it and I can display it on screen and then",
    "start": "1322720",
    "end": "1329440"
  },
  {
    "text": "generate so it takes a bit map just as an integer array and it just needs to",
    "start": "1329440",
    "end": "1334720"
  },
  {
    "text": "generate data into that bit map okay it's a very simple API uh just for this",
    "start": "1334720",
    "end": "1341559"
  },
  {
    "text": "example so if we look at the Java",
    "start": "1341559",
    "end": "1345760"
  },
  {
    "text": "version I'm not going to take uh any kind of credit for uh a mandle brad algorithm or",
    "start": "1347520",
    "end": "1353039"
  },
  {
    "text": "anything pulled it right from Wikipedia um so no none of this is going to look uh you know really all that complex uh",
    "start": "1353039",
    "end": "1360840"
  },
  {
    "text": "but it it works and it does a good job um so here in the generate implementation on the Java side uh for",
    "start": "1360840",
    "end": "1368000"
  },
  {
    "text": "those that are familiar with manle BR fractals uh should look pretty familiar for those that aren't uh there's plenty",
    "start": "1368000",
    "end": "1374320"
  },
  {
    "text": "of information out there it's basically going to iterate over every point in your bit map and depending on an exit",
    "start": "1374320",
    "end": "1382000"
  },
  {
    "text": "condition for uh you know some certain mathematical bounds uh or if it hits too",
    "start": "1382000",
    "end": "1388640"
  },
  {
    "text": "many iterations it'll break out of the loop and that however many iterations it went through to get to those one of",
    "start": "1388640",
    "end": "1394120"
  },
  {
    "text": "those two exit conditions is what determines what we pull from our pallet and how we color",
    "start": "1394120",
    "end": "1399640"
  },
  {
    "text": "it okay so it's not overly complex but",
    "start": "1399640",
    "end": "1405200"
  },
  {
    "text": "it is computationally intensive because it is very iterative in nature okay so you can see it walks through an",
    "start": "1405200",
    "end": "1413520"
  },
  {
    "text": "outer loop uh basically the entire height of the image and then for every pixel in the width of the image on each",
    "start": "1413520",
    "end": "1421480"
  },
  {
    "text": "line it's going to iteratively do this calculation where it's doing uh some uh",
    "start": "1421480",
    "end": "1430120"
  },
  {
    "text": "some multiplication and some modulo operations and ultimately determines its breakout condition by uh the number of",
    "start": "1430120",
    "end": "1438559"
  },
  {
    "text": "iterations that it's gone through in the maximum number we set or if it hits a certain stop value so it's it's moved",
    "start": "1438559",
    "end": "1445080"
  },
  {
    "text": "Beyond a certain point so once we get the pallet index based on the number of",
    "start": "1445080",
    "end": "1450200"
  },
  {
    "text": "iterations that's been through that Loop we set that into the bit map and we return when we're",
    "start": "1450200",
    "end": "1457320"
  },
  {
    "text": "done okay so if I fire this up on the Nexus and I apologize I forgot to get a",
    "start": "1457320",
    "end": "1465039"
  },
  {
    "text": "projector so that this would be easier to see so the people in the back this is",
    "start": "1465039",
    "end": "1470200"
  },
  {
    "text": "probably going to be extremely hard for you to see it is strapped to landscape mode so",
    "start": "1470200",
    "end": "1476039"
  },
  {
    "text": "it looks nice and pretty but you'll see it's rendering for uh it's it's using the Java um and it is done screen's kind",
    "start": "1476039",
    "end": "1484159"
  },
  {
    "text": "of dim so it might be kind of hard to see and it is displaying some number some information about how long it took",
    "start": "1484159",
    "end": "1490240"
  },
  {
    "text": "to do the computation okay and I'll go through that here in a second since I can't",
    "start": "1490240",
    "end": "1495640"
  },
  {
    "text": "really show you guys on screen what that looks like so one of the things you'll see here is",
    "start": "1495640",
    "end": "1501840"
  },
  {
    "text": "as I go through each one of these the algorithm is exactly the same there's some slight variations to it but the code is going to look very very similar",
    "start": "1501840",
    "end": "1508200"
  },
  {
    "text": "in each of these implementations so multi-threaded",
    "start": "1508200",
    "end": "1514399"
  },
  {
    "text": "Java it's again the same algorithm but now I use a thread pool and I'm",
    "start": "1514399",
    "end": "1519720"
  },
  {
    "text": "basically going to feed a thread pool with the data uh to manipulate however",
    "start": "1519720",
    "end": "1525320"
  },
  {
    "text": "that could get really expensive and ugly to create objects to feed the thread pool for every pixel in this bit map so",
    "start": "1525320",
    "end": "1531399"
  },
  {
    "text": "what I do instead is I feed it a line at a time I basically tell it here's your line do every pixel in this line and let",
    "start": "1531399",
    "end": "1538039"
  },
  {
    "text": "me know when you're done okay so it sets up the",
    "start": "1538039",
    "end": "1544159"
  },
  {
    "text": "pool and then once generate is called remember we're walking line by line so",
    "start": "1544159",
    "end": "1550600"
  },
  {
    "text": "we're going to feed the thread pool with what I call this new generator task and",
    "start": "1550600",
    "end": "1555760"
  },
  {
    "text": "I give it the y-coordinate and the bit map to write the result results and now I wait on a semaphore that each of these",
    "start": "1555760",
    "end": "1562840"
  },
  {
    "text": "tasks is going to set when it's done and I make sure that I get through all the lines before I call it totally",
    "start": "1562840",
    "end": "1570720"
  },
  {
    "text": "complete and this algorithm should look basically the same just that we're doing one line at a time so this is that inner",
    "start": "1571000",
    "end": "1577919"
  },
  {
    "text": "loop that was in the previous version Let me see if I can adjust the",
    "start": "1577919",
    "end": "1584480"
  },
  {
    "text": "brightness on this to make it a little easier to see uh much better okay so that's the",
    "start": "1584480",
    "end": "1591919"
  },
  {
    "text": "previous version so now if I go to multi-threaded Java you can see it comes up significantly faster",
    "start": "1591919",
    "end": "1601080"
  },
  {
    "text": "okay so now let's get to the renderscript version that's why you guys are here you know who cares about the Java version",
    "start": "1604240",
    "end": "1611639"
  },
  {
    "text": "right so we do some initial setup you'll see like I mentioned before we're going",
    "start": "1613279",
    "end": "1618480"
  },
  {
    "text": "to create our render script context create an instance of our reflection",
    "start": "1618480",
    "end": "1624200"
  },
  {
    "text": "class and we're going to feed it this resource and I am going to talk more about this resource here in a little",
    "start": "1624200",
    "end": "1630760"
  },
  {
    "text": "bit now unlike the other fractal generation implementations the two Java",
    "start": "1630760",
    "end": "1636520"
  },
  {
    "text": "ones I showed you excuse me they automatically get the width and the height from the super class but",
    "start": "1636520",
    "end": "1643640"
  },
  {
    "text": "because we have to coordinate with the render script side of things uh I need to feed that information so the width",
    "start": "1643640",
    "end": "1649919"
  },
  {
    "text": "and the height and the number of iterations as well as pallet data I need to feed that here in part of the in the",
    "start": "1649919",
    "end": "1655880"
  },
  {
    "text": "Constructor as I you know build up the render script so the pallet is a little",
    "start": "1655880",
    "end": "1662240"
  },
  {
    "text": "different as well because it's a giant integer array in the way that I've done this and so just like the data that I",
    "start": "1662240",
    "end": "1669000"
  },
  {
    "text": "need the computational engine to uh you know copy into or or to do some number",
    "start": "1669000",
    "end": "1674080"
  },
  {
    "text": "crunching over uh I need to feed it this pallet data and the way I'm going to do that is over a memory binding so if you",
    "start": "1674080",
    "end": "1681559"
  },
  {
    "text": "remember I mentioned that your memory is managed up in the Java side and if you need to feed a pointer down to your",
    "start": "1681559",
    "end": "1687080"
  },
  {
    "text": "render script you have to call a special bind function this pallet and you'll see this momentarily in the render script",
    "start": "1687080",
    "end": "1693640"
  },
  {
    "text": "this is a variable that's a pointer it's a 32-bit integer pointer down in my render script okay so when I call bind",
    "start": "1693640",
    "end": "1700200"
  },
  {
    "text": "here I'm telling it that this allocation object is an integer array that I've",
    "start": "1700200",
    "end": "1706480"
  },
  {
    "text": "created and I set the total total size and uh here in the Builder and then",
    "start": "1706480",
    "end": "1714600"
  },
  {
    "text": "I actually copy the raw data that was passed in as part of my construction and then I bind it and I",
    "start": "1714600",
    "end": "1720279"
  },
  {
    "text": "tell the render script this is where you can find that data okay so down here in generate our generate function looks",
    "start": "1720279",
    "end": "1727200"
  },
  {
    "text": "strikingly small in the Java side now so we create a bit map object based on the",
    "start": "1727200",
    "end": "1733399"
  },
  {
    "text": "integer it's a mutable bit map now I create an allocation based on that bit",
    "start": "1733399",
    "end": "1739480"
  },
  {
    "text": "map and then I call my for each route so this is going to call the kernel down in",
    "start": "1739480",
    "end": "1744760"
  },
  {
    "text": "my render script to do what it needs to do over that bit map once it's done I",
    "start": "1744760",
    "end": "1750120"
  },
  {
    "text": "copy it back out into the bit map object get the pixels into my integer array",
    "start": "1750120",
    "end": "1756480"
  },
  {
    "text": "that I ultimately need to pass back to the surface okay so there's a little bit of extra copying going on here this could",
    "start": "1756480",
    "end": "1762880"
  },
  {
    "text": "probably be a little more efficient than what I'm doing um but for a simple demonstration I thought it was good enough",
    "start": "1762880",
    "end": "1768919"
  },
  {
    "text": "so let's look at the render script side of things now Eclipse does automatically",
    "start": "1768919",
    "end": "1776559"
  },
  {
    "text": "build this so if you drop a file in in the usual uh directory layout with your",
    "start": "1776559",
    "end": "1782200"
  },
  {
    "text": "Java code the eclipse build engine knows how to pick this up build the reflection class uh and do that if any of you are",
    "start": "1782200",
    "end": "1789120"
  },
  {
    "text": "intellig users it's the same thing it'll pick it up now with Android Studio they",
    "start": "1789120",
    "end": "1794919"
  },
  {
    "text": "did it a little bit different you don't drop your render script code in here with your Java code uh instead of in The",
    "start": "1794919",
    "end": "1801640"
  },
  {
    "text": "Source directory you're going to have an RS directory and then you build the same directory structure by package name and",
    "start": "1801640",
    "end": "1808440"
  },
  {
    "text": "drop your render script files in there okay so the build's a little different and unfortunately um as we'll see here in a",
    "start": "1808440",
    "end": "1815200"
  },
  {
    "text": "little bit with debugging uh render script builds along with debugging is not always the most informative thing so",
    "start": "1815200",
    "end": "1822000"
  },
  {
    "text": "your render script may not build and it may not give you much of an indication as to why um so if if you're playing",
    "start": "1822000",
    "end": "1828320"
  },
  {
    "text": "with Android studio uh I would expect some problems there or potential problems",
    "start": "1828320",
    "end": "1834720"
  },
  {
    "text": "there so really quickly you'll see the same kind of constants that were defined in the Java code because render script",
    "start": "1834760",
    "end": "1840279"
  },
  {
    "text": "needs to know about them and then these variables that are defined within the",
    "start": "1840279",
    "end": "1846480"
  },
  {
    "text": "script itself and there's my pallet pointer that I had to bind memory with and if you look really closely",
    "start": "1846480",
    "end": "1854039"
  },
  {
    "text": "you'll see that here I'm also using my set accessor methods to set those",
    "start": "1854039",
    "end": "1859880"
  },
  {
    "text": "variables during my initialization all right so here in my",
    "start": "1859880",
    "end": "1866679"
  },
  {
    "text": "root function you can see I chose to I'm using the form with the bit map to take",
    "start": "1866679",
    "end": "1872480"
  },
  {
    "text": "my output data and then my location within the data this algorithm is probably going to",
    "start": "1872480",
    "end": "1879240"
  },
  {
    "text": "look really old and the same now since we're looking at the same thing over and over again um but that's important too",
    "start": "1879240",
    "end": "1885320"
  },
  {
    "text": "because I want you to see that because it has a very c-like syntax it's basically",
    "start": "1885320",
    "end": "1891279"
  },
  {
    "text": "c99 and even the Java looks very similar to this it's the same algorithm it's the same code okay now the difference here",
    "start": "1891279",
    "end": "1898760"
  },
  {
    "text": "is where on the multi-threaded Java side I had to break it up I had to figure I",
    "start": "1898760",
    "end": "1904200"
  },
  {
    "text": "had to make a choice right I break it up by line and I feed it data here on the renderscript side the renderscript",
    "start": "1904200",
    "end": "1910159"
  },
  {
    "text": "compute engine's doing that for me okay if it decides to do it by line by individual pixel it's up to it as far as",
    "start": "1910159",
    "end": "1916799"
  },
  {
    "text": "I know this root function gets called and it's told this is the exact x and y coordinate you're working with right",
    "start": "1916799",
    "end": "1923519"
  },
  {
    "text": "now okay so however it decides to parallelize that for that Hardware is up to",
    "start": "1923519",
    "end": "1929360"
  },
  {
    "text": "it so my complexity is really a not any different",
    "start": "1929360",
    "end": "1935840"
  },
  {
    "text": "than doing it up on the Java side once it's into this implementation but this is for a single point",
    "start": "1935840",
    "end": "1943919"
  },
  {
    "text": "right the one other variation here you'll see we get our pallet index and now I need to write into the output the",
    "start": "1943919",
    "end": "1953000"
  },
  {
    "text": "alpha red green and blue values based on the pallet information so I shift that around uh and insert that in there so if",
    "start": "1953000",
    "end": "1960919"
  },
  {
    "text": "we look at the actual implementation and what it does so remember this was the last",
    "start": "1960919",
    "end": "1966720"
  },
  {
    "text": "version with Java we'll look at render script and we're done already okay so",
    "start": "1966720",
    "end": "1973159"
  },
  {
    "text": "it's significantly faster and we'll look at some of those numbers here in just a second",
    "start": "1973159",
    "end": "1978720"
  },
  {
    "text": "anybody have any questions over the render script side of things okay one more real quick because",
    "start": "1978720",
    "end": "1984840"
  },
  {
    "text": "on the native side the implementation",
    "start": "1984840",
    "end": "1990200"
  },
  {
    "text": "is multi-threaded or single-threaded and it's really down in the native code that it makes that decision so on the Java",
    "start": "1990200",
    "end": "1996320"
  },
  {
    "text": "side it's really excuse me part of our Constructor we tell it",
    "start": "1996320",
    "end": "2003799"
  },
  {
    "text": "whether or not we're going to be multi-threaded and the number of threads this right",
    "start": "2003799",
    "end": "2010080"
  },
  {
    "text": "here if you look at the underpinnings of render script and what it does at the platform level this is more or less",
    "start": "2010080",
    "end": "2016440"
  },
  {
    "text": "exactly what it does for an implementation in the native CPU so if",
    "start": "2016440",
    "end": "2022360"
  },
  {
    "text": "you're not taking advantage of a GPU on the device and it's just running on let's say the arm core it tries to",
    "start": "2022360",
    "end": "2027880"
  },
  {
    "text": "figure out the number of available processors and it spawns that many threads so that it can feed each of those threads so I do the same exact",
    "start": "2027880",
    "end": "2033760"
  },
  {
    "text": "thing here okay and then we're going to call generate and down here you'll see",
    "start": "2033760",
    "end": "2040360"
  },
  {
    "text": "that generate is a native method okay so the usual J and I magic",
    "start": "2040360",
    "end": "2049240"
  },
  {
    "text": "ensues and you know we'll set up some internal data structures uh similar to",
    "start": "2054720",
    "end": "2059839"
  },
  {
    "text": "the Java side I basically create a threadpool however many threads I'm told to",
    "start": "2059839",
    "end": "2065520"
  },
  {
    "text": "make down here where it's entered in the jni uh generate",
    "start": "2066720",
    "end": "2074040"
  },
  {
    "text": "function I'm going to create a pool which was that structure up at the",
    "start": "2074040",
    "end": "2079960"
  },
  {
    "text": "top just like on the Java side I create some uh a mutex to basically know when",
    "start": "2079960",
    "end": "2085560"
  },
  {
    "text": "I'm done and each of the the threads can basically signal me when it says it's done with data so that I can feed it",
    "start": "2085560",
    "end": "2090679"
  },
  {
    "text": "more information and then we set up you know width height iteration the same kind of",
    "start": "2090679",
    "end": "2096679"
  },
  {
    "text": "things we had to do on the script side we need to coordinate that with the Java side and then you'll see here if threads",
    "start": "2096679",
    "end": "2103599"
  },
  {
    "text": "is more than one we actually spawn off uh a thread",
    "start": "2103599",
    "end": "2108680"
  },
  {
    "text": "pool feed it a bunch of data and work so just like",
    "start": "2108680",
    "end": "2115480"
  },
  {
    "text": "before and then we wait around for it to be completely finished and make sure",
    "start": "2115480",
    "end": "2120520"
  },
  {
    "text": "that we've made it through our total done is our total height we've made it through every line in our bit map okay",
    "start": "2120520",
    "end": "2128839"
  },
  {
    "text": "however if it was just a single thread we call just a special function internal to the C code that says you know do this",
    "start": "2128839",
    "end": "2134640"
  },
  {
    "text": "single threaded and we're back looking at our same algorithm",
    "start": "2134640",
    "end": "2141160"
  },
  {
    "text": "again so that's on the single generated version I'm sorry the single-threaded",
    "start": "2141160",
    "end": "2146960"
  },
  {
    "text": "version here on the multi-threaded side in our thread we're feeding it just",
    "start": "2147400",
    "end": "2154839"
  },
  {
    "text": "like on the Java side line by line so I need to walk through every pixel on a line but there's a little more",
    "start": "2154839",
    "end": "2160160"
  },
  {
    "text": "bookkeeping here you'll see that this is a lot more complex looking than the render script side because I have to",
    "start": "2160160",
    "end": "2166119"
  },
  {
    "text": "manage the threads I have to know what data I'm getting I have to know what work to pull off I'm just using a simple",
    "start": "2166119",
    "end": "2171839"
  },
  {
    "text": "link list now once I've got through all the bookkeeping and I've pulled something",
    "start": "2171839",
    "end": "2178000"
  },
  {
    "text": "off of my list I can actually do the work and I",
    "start": "2178000",
    "end": "2184079"
  },
  {
    "text": "can actually manipulate the data and stick it into my bit Ma",
    "start": "2184079",
    "end": "2189560"
  },
  {
    "text": "okay so if we look at the native side and what it does",
    "start": "2189920",
    "end": "2197599"
  },
  {
    "text": "here this is going to be single threaded native and it happens pretty quick okay",
    "start": "2197599",
    "end": "2206000"
  },
  {
    "text": "multi-threaded native is really quick okay any questions over the code",
    "start": "2206000",
    "end": "2213480"
  },
  {
    "text": "anything I've shown there everybody good all",
    "start": "2213480",
    "end": "2218920"
  },
  {
    "text": "right so now after all that everybody's probably going okay we flashed a bunch of stuff up on the screen what does it",
    "start": "2218920",
    "end": "2225200"
  },
  {
    "text": "really mean numbers wise all right I took some averages running on my Nexus 7",
    "start": "2225200",
    "end": "2230839"
  },
  {
    "start": "2226000",
    "end": "2226000"
  },
  {
    "text": "it's a little different on different devices because they have different cap different capabilities so just a straight single",
    "start": "2230839",
    "end": "2236560"
  },
  {
    "text": "threaded Java we're about 2.7 seconds to render that image on average",
    "start": "2236560",
    "end": "2241640"
  },
  {
    "text": "multi-thread of java we Dro to 1.2 so we do see some benefits with multi-threading as we would expect now",
    "start": "2241640",
    "end": "2248040"
  },
  {
    "text": "render script we suddenly dropped to 680 milliseconds so there's a pretty",
    "start": "2248040",
    "end": "2253520"
  },
  {
    "text": "significant boost there single-threaded native is about 1.1 seconds uh which was",
    "start": "2253520",
    "end": "2259640"
  },
  {
    "text": "actually kind of surprising to me that single-threaded native came out really close to multi-threaded Java um but you",
    "start": "2259640",
    "end": "2265880"
  },
  {
    "text": "know it's interesting data point and then you've got multi-threaded native which is strikingly close to the render",
    "start": "2265880",
    "end": "2273359"
  },
  {
    "text": "script side so looking at it graphically it's smoking",
    "start": "2273359",
    "end": "2280359"
  },
  {
    "text": "fast so you can see that you know the render script and the native code are",
    "start": "2280880",
    "end": "2286240"
  },
  {
    "text": "actually really really close Okay and the complexity in my opinion was a lot",
    "start": "2286240",
    "end": "2292119"
  },
  {
    "text": "less in terms of writing your code any questions over the",
    "start": "2292119",
    "end": "2297839"
  },
  {
    "text": "numbers all right so now debugging it's very limited okay um if you're used to",
    "start": "2297839",
    "end": "2305760"
  },
  {
    "start": "2301000",
    "end": "2301000"
  },
  {
    "text": "Source level debugging you're in for a",
    "start": "2305760",
    "end": "2310680"
  },
  {
    "text": "treat uh you've got RS debug is about it okay and it's really just a very",
    "start": "2311040",
    "end": "2316480"
  },
  {
    "text": "primitive print F and you can't even really treat it like print F okay you don't get variable arguments you",
    "start": "2316480",
    "end": "2321839"
  },
  {
    "text": "basically get a fixed string and a number of data points that you can output and that's about it okay there's",
    "start": "2321839",
    "end": "2328119"
  },
  {
    "text": "no Source level debugging available on this thing um if any of you have worked on other embedded systems not Android",
    "start": "2328119",
    "end": "2335880"
  },
  {
    "text": "not working at the Java layer with all these fancy Ides you'll probably be write at home here okay for those of you",
    "start": "2335880",
    "end": "2343280"
  },
  {
    "text": "who have not it's a good challenge take it up so sometimes you have to get creative",
    "start": "2343280",
    "end": "2349319"
  },
  {
    "text": "there are uh some capabilities in the platform that I haven't talked about you can send messages up to the Java side so",
    "start": "2349319",
    "end": "2357079"
  },
  {
    "text": "you could feed the Java side some information and you could have your own framework if you will if you really",
    "start": "2357079",
    "end": "2362240"
  },
  {
    "text": "wanted to spend the time on it uh so you could feed your Java code some data and have your jav code be a little you know",
    "start": "2362240",
    "end": "2369200"
  },
  {
    "text": "sexier with the way that it output things um but you got to be really careful there the last thing you'd want to do is maybe set a breakpoint there",
    "start": "2369200",
    "end": "2375599"
  },
  {
    "text": "lock up your CPU or your GPU um it' probably be kind of hard to do with the way that the framework uh tries to",
    "start": "2375599",
    "end": "2382359"
  },
  {
    "text": "parallelize it and you know keep everything running in the background but there is some potential there so be very",
    "start": "2382359",
    "end": "2389560"
  },
  {
    "start": "2389000",
    "end": "2389000"
  },
  {
    "text": "careful so some of the built-in features uh again it's all about computation so you've got standard mathematical",
    "start": "2389560",
    "end": "2395520"
  },
  {
    "text": "functions trig functions uh logarithmic you know Vector Matrix math all those",
    "start": "2395520",
    "end": "2400640"
  },
  {
    "text": "capabilities are right there in render script just like opencl you have a lot of that same capability okay basic",
    "start": "2400640",
    "end": "2407760"
  },
  {
    "text": "drawing functions so you can do some basic drawing functions uh within render script right into say a bit",
    "start": "2407760",
    "end": "2415079"
  },
  {
    "text": "map now there's some intrinsic scripts and I touched on this a little bit earlier you're going to manage these",
    "start": "2415079",
    "end": "2420839"
  },
  {
    "text": "just like your own render script but there are special objects that you can create that come with the platform so",
    "start": "2420839",
    "end": "2427040"
  },
  {
    "text": "the form looks a little bit different but you can effectively treat it just like a render script that you've created",
    "start": "2427040",
    "end": "2433079"
  },
  {
    "text": "um You can call it directly or you can chain it together with other scripts the",
    "start": "2433079",
    "end": "2438440"
  },
  {
    "text": "intrinsics tend to be very Graphics heavy okay you're going to have a lot of blurs and blends color matrices uh",
    "start": "2438440",
    "end": "2445680"
  },
  {
    "text": "convolve operations yuv and RGB conversion those are all built into the platform and available for you to",
    "start": "2445680",
    "end": "2452880"
  },
  {
    "text": "use okay openg was in for a while now it's out um I couldn't tell you why they decided",
    "start": "2452880",
    "end": "2460160"
  },
  {
    "text": "to do that other than I think they tried to maybe uh you know just my speculation",
    "start": "2460160",
    "end": "2465640"
  },
  {
    "text": "they wanted to emphasize that this is meant for any type of computation you want to do not just Graphics even though",
    "start": "2465640",
    "end": "2471800"
  },
  {
    "text": "most of the documentation kind of points out a lot of Graphics",
    "start": "2471800",
    "end": "2476880"
  },
  {
    "text": "examples okay now with Android 4.4 it is available in the ndk I mentioned this",
    "start": "2476880",
    "end": "2483160"
  },
  {
    "text": "earlier um you won't find any documentation on it if you download the latest ndk you look in the docs",
    "start": "2483160",
    "end": "2489760"
  },
  {
    "text": "directory you're going to see a render script subdirectory under there and you're going to get all excited and go yay there's HTML there and really all it",
    "start": "2489760",
    "end": "2496359"
  },
  {
    "text": "does is point at the header files um so you just kind of have to go",
    "start": "2496359",
    "end": "2502400"
  },
  {
    "text": "splunking through header files to kind of figure out how it works on the native side all right so some",
    "start": "2502400",
    "end": "2508880"
  },
  {
    "text": "tradeoffs most of you have probably already figured most of this out but you get big performance gains by using Ren",
    "start": "2508880",
    "end": "2515079"
  },
  {
    "start": "2509000",
    "end": "2509000"
  },
  {
    "text": "okay it's portable I didn't touch a whole lot on this but one of the things that uh if you've ever built something",
    "start": "2515079",
    "end": "2522960"
  },
  {
    "text": "in the ndk part of your make file you have to specify what architecture it's targeting okay so the first version of",
    "start": "2522960",
    "end": "2531560"
  },
  {
    "text": "the Native implementation here that I ran on this Nexus it was dog slow and I realized it's because I just put arm",
    "start": "2531560",
    "end": "2538079"
  },
  {
    "text": "architecture instead of armv7 okay makes a world of difference in what gets compiled and what's",
    "start": "2538079",
    "end": "2544640"
  },
  {
    "text": "generated there so with the ndk you really have to pay attention to what architecture you're targeting and you've",
    "start": "2544640",
    "end": "2551240"
  },
  {
    "text": "got to build that into your make files and each one of those libraries gets bundled as part of your APK uh here in",
    "start": "2551240",
    "end": "2557640"
  },
  {
    "text": "render script it's portable okay and I'm going to talk about that because some of you are probably scratching your heads",
    "start": "2557640",
    "end": "2562880"
  },
  {
    "text": "going how um I'll touch on that here in just a few minutes it's fully parallelized so like I mentioned when I",
    "start": "2562880",
    "end": "2568839"
  },
  {
    "text": "was talking about my native implementation if it's running on the core application processor of your it",
    "start": "2568839",
    "end": "2576680"
  },
  {
    "text": "tries to figure out how many cores are there and it spawns that many threads to handle it if it's running and taking",
    "start": "2576680",
    "end": "2582119"
  },
  {
    "text": "advantage of say a GPU it's kind of OEM specific what happens there um but it still fully parallelizes that and tries",
    "start": "2582119",
    "end": "2589079"
  },
  {
    "text": "to leverage what it can out of the hardware so it leverages the best of",
    "start": "2589079",
    "end": "2594800"
  },
  {
    "text": "what the S so has to offer it's a familiar language most",
    "start": "2594800",
    "end": "2600040"
  },
  {
    "text": "people are probably used to seeing C or C++ and it can be easier to work with",
    "start": "2600040",
    "end": "2605079"
  },
  {
    "text": "than the ndk for those buildings bu purposes you know was building reasons but it is",
    "start": "2605079",
    "end": "2610720"
  },
  {
    "text": "limited okay so some of the cons you have to deal with the cross language runtime coordination if if you're",
    "start": "2610720",
    "end": "2617440"
  },
  {
    "text": "already used to dealing with the ndk this probably isn't a huge hurdle for you uh having to deal with you know the",
    "start": "2617440",
    "end": "2622720"
  },
  {
    "text": "jni interface it simplifies that a little bit but you still have this cross language coordination of data okay you",
    "start": "2622720",
    "end": "2629119"
  },
  {
    "text": "got a whole new set of apis to learn which in some cases are not documented very",
    "start": "2629119",
    "end": "2635720"
  },
  {
    "text": "well p documentation I keep emphasizing that because unfortunately it's not",
    "start": "2635720",
    "end": "2641160"
  },
  {
    "text": "gotten any better it's still really hard to understand some of what's going on in there and there's poor and limited debug",
    "start": "2641160",
    "end": "2649119"
  },
  {
    "text": "support it's still changing like I mentioned earlier that root function uh",
    "start": "2649119",
    "end": "2654280"
  },
  {
    "text": "in my mandle Brad implementation I was taking an output cor and then an x and y coordinate the",
    "start": "2654280",
    "end": "2659960"
  },
  {
    "text": "original implementation of that for those of you who are going to pull from the GitHub repository later if you go",
    "start": "2659960",
    "end": "2665280"
  },
  {
    "text": "back through my revision history you'll see that uh in an older version of this it actually had an input and an output and",
    "start": "2665280",
    "end": "2670920"
  },
  {
    "text": "it worked great until I upgraded into the latest tools this",
    "start": "2670920",
    "end": "2676640"
  },
  {
    "text": "morning shouldn't have done that so when I did that it suddenly uh",
    "start": "2676640",
    "end": "2682400"
  },
  {
    "text": "barfed all over it and it really wasn't at build time where it gave me problems it was at runtime and so the build",
    "start": "2682400",
    "end": "2690359"
  },
  {
    "text": "worked flawlessly it had no problems I stick it on the device great it did the Java run it did the multi-threaded Java",
    "start": "2690359",
    "end": "2696680"
  },
  {
    "text": "one skip to uh render script crashed okay with no explanation of what's going",
    "start": "2696680",
    "end": "2702400"
  },
  {
    "text": "on tried to hook up a debugger to it debugger doesn't even catch the crash I mean it's dead as a door nail and no",
    "start": "2702400",
    "end": "2710240"
  },
  {
    "text": "information about why that's happening luckily I managed to figure out that it was because they changed that form with",
    "start": "2710240",
    "end": "2715920"
  },
  {
    "text": "the x and y coordinate they don't expect an input in that case anymore so had to modify the code there so a lot of it's",
    "start": "2715920",
    "end": "2722559"
  },
  {
    "text": "still evolving and it's still changing so it's a little bit of the wild west but you know it's one of those things you have to weigh as you're deciding",
    "start": "2722559",
    "end": "2728920"
  },
  {
    "text": "whether to do this the support in Android Studio is a little bit poor and not documented so",
    "start": "2728920",
    "end": "2735240"
  },
  {
    "text": "like I mentioned before you have to put your code in a different place than you did traditionally um they've also uh",
    "start": "2735240",
    "end": "2741400"
  },
  {
    "text": "introduced a support Library which takes render Script support all the way back to uh",
    "start": "2741400",
    "end": "2746720"
  },
  {
    "text": "gingerbread and unfortunately that gingerbread support Library will not work with Android",
    "start": "2746720",
    "end": "2754040"
  },
  {
    "text": "Studio so deprecated a I it's really just the openg um so all your mesh program",
    "start": "2755040",
    "end": "2762000"
  },
  {
    "text": "fragments all the different things that they had added to render script to take advantage of openg they've now",
    "start": "2762000",
    "end": "2769599"
  },
  {
    "text": "deprecated and you're not really supposed to use that anymore new features intrinsics are",
    "start": "2769599",
    "end": "2776200"
  },
  {
    "start": "2770000",
    "end": "2770000"
  },
  {
    "text": "relatively new that wasn't in the first version that came out around API 16 I believe uh script groups uh which are",
    "start": "2776200",
    "end": "2783559"
  },
  {
    "text": "pretty cool but you won't find a whole lot of information on them um multiple kernel root functions I mentioned that",
    "start": "2783559",
    "end": "2790640"
  },
  {
    "text": "before and custom kernel root functions so you can Define what data you want to feed it uh and it's completely up to",
    "start": "2790640",
    "end": "2798119"
  },
  {
    "text": "you filter script is another new feature a new API I'll touch on that here in a",
    "start": "2798119",
    "end": "2803880"
  },
  {
    "text": "second uh and then the support Library I just talked about a moment ago which is available all the way back to",
    "start": "2803880",
    "end": "2810440"
  },
  {
    "text": "gingerbread it requires Eclipse uh or ant no Android Studio I think they're going to change",
    "start": "2810440",
    "end": "2816960"
  },
  {
    "text": "in the future but you know who knows um especially now with KitKat uh being",
    "start": "2816960",
    "end": "2822079"
  },
  {
    "text": "focused on lower-end devices and reducing the memory footprint there there's probably not a huge push to support gingerbread through the support",
    "start": "2822079",
    "end": "2828440"
  },
  {
    "text": "library but you know time will tell and now you can use it with a native code so",
    "start": "2828440",
    "end": "2833920"
  },
  {
    "text": "most of these changes have just happened since Jelly Bean okay so they're all",
    "start": "2833920",
    "end": "2839000"
  },
  {
    "text": "relatively new things you can see this continues to evolve script groups allow you to chain",
    "start": "2839000",
    "end": "2846160"
  },
  {
    "start": "2840000",
    "end": "2840000"
  },
  {
    "text": "together I've mentioned these a couple times over the course of The Talk The Reason these are kind of neat is uh",
    "start": "2846160",
    "end": "2851920"
  },
  {
    "text": "they're more efficient the render script engine handles all the routing of the data so instead of you having to call",
    "start": "2851920",
    "end": "2858400"
  },
  {
    "text": "one script get the data out call another script get its data out or call a script",
    "start": "2858400",
    "end": "2864359"
  },
  {
    "text": "and tell it what other script to call or have it hardcoded in your code uh down at the render script level the",
    "start": "2864359",
    "end": "2870640"
  },
  {
    "text": "renderscript engine can take care of that for you okay it's touched upon in the docs but there's really no details",
    "start": "2870640",
    "end": "2877800"
  },
  {
    "text": "okay it requires at least API level 17 for both your minimum and your target",
    "start": "2877800",
    "end": "2883559"
  },
  {
    "text": "okay so 17 or newer and you're basically going to set up using the script group",
    "start": "2883559",
    "end": "2891000"
  },
  {
    "text": "Builder a chaining of all these scripts together okay so you basically add your",
    "start": "2891000",
    "end": "2896640"
  },
  {
    "text": "kernels to a group okay using an add kernel call and",
    "start": "2896640",
    "end": "2901800"
  },
  {
    "text": "you pass this kernel ID and then you add a connection between the kernels in",
    "start": "2901800",
    "end": "2908839"
  },
  {
    "text": "these different scripts and you're going whoa whoa whoa we've talked about root functions we've talked about all kinds",
    "start": "2908839",
    "end": "2914920"
  },
  {
    "text": "of other things what in the heck is Kernel ID um you're not going to find any information about that",
    "start": "2914920",
    "end": "2921359"
  },
  {
    "text": "either it's an undocumented reflected method called get kernel ID and your",
    "start": "2921359",
    "end": "2927920"
  },
  {
    "text": "specific root function um you have to use a special attribute in your code to Define it as a",
    "start": "2927920",
    "end": "2934920"
  },
  {
    "text": "root function uh you can't use just the default rout it won't work it won't automatically generate you one so and I",
    "start": "2934920",
    "end": "2942880"
  },
  {
    "text": "touch on that here in just a second with this attribute um but once you do that",
    "start": "2942880",
    "end": "2948160"
  },
  {
    "text": "you can get this kernel ID and now you can patch these things together and the",
    "start": "2948160",
    "end": "2953480"
  },
  {
    "text": "connections there's a couple of different forms you can add a connection uh between data types from one script to",
    "start": "2953480",
    "end": "2959280"
  },
  {
    "text": "the other to call the root functions and then there's also some uh ability to take one script's output and just feed",
    "start": "2959280",
    "end": "2966240"
  },
  {
    "text": "it right into into member data in another script okay this is very handy for",
    "start": "2966240",
    "end": "2972920"
  },
  {
    "text": "intrinsics so the intrinsic classes uh again they kind of specialized forms of",
    "start": "2972920",
    "end": "2978799"
  },
  {
    "text": "these and they hide a lot of the render script functionality um and they have",
    "start": "2978799",
    "end": "2983920"
  },
  {
    "text": "built-in documented methods to get but really you want to bridge together or or",
    "start": "2983920",
    "end": "2988960"
  },
  {
    "text": "chain together your scripts this is where it gets really confusing because you really don't know",
    "start": "2988960",
    "end": "2995040"
  },
  {
    "start": "2993000",
    "end": "2993000"
  },
  {
    "text": "how to get the kernel ID so custom in multiple kernels I've",
    "start": "2995040",
    "end": "3000079"
  },
  {
    "text": "touched on this uh it's touched on in the docs but there's very few details about it and this is that attribute I",
    "start": "3000079",
    "end": "3005839"
  },
  {
    "text": "was telling you about so you define this in your render script and that tells the",
    "start": "3005839",
    "end": "3011480"
  },
  {
    "text": "compiler and the engine that this is now your root",
    "start": "3011480",
    "end": "3016599"
  },
  {
    "text": "function okay and it's going to generate multiple for each and then your root",
    "start": "3016599",
    "end": "3022400"
  },
  {
    "text": "name that you use here okay the compiler airs if you mess this up are",
    "start": "3022400",
    "end": "3029400"
  },
  {
    "text": "bizarre um and really kind of hard to understand unfortunately there's not a whole lot of information on that um the",
    "start": "3029400",
    "end": "3036440"
  },
  {
    "text": "multiple root is in concept it's not in the name so you're not doing overloaded",
    "start": "3036440",
    "end": "3043640"
  },
  {
    "text": "functions you can't have uh you know one defined as a kernel root that takes",
    "start": "3043640",
    "end": "3049079"
  },
  {
    "text": "these two inputs and then another one that takes um you know a couple of vectors and call them both root the",
    "start": "3049079",
    "end": "3055400"
  },
  {
    "text": "compiler will say no sorry can't do that so they have to have unique names they can't be overloaded",
    "start": "3055400",
    "end": "3062880"
  },
  {
    "start": "3062000",
    "end": "3062000"
  },
  {
    "text": "names now filter script I just kind of briefly touch on this this is intended",
    "start": "3062880",
    "end": "3068400"
  },
  {
    "text": "specifically for image processing so whereas render script is for uh any type of computation and the documentation is",
    "start": "3068400",
    "end": "3074480"
  },
  {
    "text": "very image heavy filter script is really what they intend to use for image processing um it's intended to be even",
    "start": "3074480",
    "end": "3080880"
  },
  {
    "text": "more generic uh you use an FS extension rather than an RS but it's basically still render script PL um the built-in",
    "start": "3080880",
    "end": "3089040"
  },
  {
    "text": "types cannot exceed 32 bits okay which is a little different than render script because you can have a lot larger",
    "start": "3089040",
    "end": "3097079"
  },
  {
    "text": "width you also have to put a special pragma at the top of your filter script which is telling it to relax the",
    "start": "3097079",
    "end": "3103520"
  },
  {
    "text": "floating point so you don't have to do uh full floating Point operations and your inputs and returns",
    "start": "3103520",
    "end": "3110359"
  },
  {
    "text": "cannot use pointers at all okay so it restricts that memory binding and you have to declare a custom",
    "start": "3110359",
    "end": "3117880"
  },
  {
    "text": "route for your filter script you can no longer depend on the default just root function all right so what I call the",
    "start": "3117880",
    "end": "3124799"
  },
  {
    "start": "3122000",
    "end": "3122000"
  },
  {
    "text": "man behind the curtain um so we talked about it before the the Java virtual machine and rs engine they coordinate",
    "start": "3124799",
    "end": "3131720"
  },
  {
    "text": "with each other with the uh virtual machine being the master and the render script being the slave so Java",
    "start": "3131720",
    "end": "3138799"
  },
  {
    "text": "Reflection classes and basically it gets compiled into what's called bit code for render",
    "start": "3138799",
    "end": "3145559"
  },
  {
    "text": "script okay and here's kind of a flow of what",
    "start": "3145559",
    "end": "3151440"
  },
  {
    "text": "happens your render script code goes through what's called llvm and you get",
    "start": "3151440",
    "end": "3156920"
  },
  {
    "text": "your reflection class up on the Java side and then you get this bit code",
    "start": "3156920",
    "end": "3161960"
  },
  {
    "text": "resource both of those get fed into AAP to create your APK okay and you get your",
    "start": "3161960",
    "end": "3169240"
  },
  {
    "start": "3168000",
    "end": "3168000"
  },
  {
    "text": "package you probably scratching your head going bit code I've heard of bite code we talk about Java here and Android",
    "start": "3169240",
    "end": "3174680"
  },
  {
    "text": "all the time what in the world is bit code okay llvm uh is another type of virtual",
    "start": "3174680",
    "end": "3181880"
  },
  {
    "text": "machine like technology and it outputs optimized bit code for an llvm engine",
    "start": "3181880",
    "end": "3190040"
  },
  {
    "text": "okay it's platform agnostic it's highly optimized and Android finishes the",
    "start": "3190040",
    "end": "3196280"
  },
  {
    "text": "render script uh compilation at runtime so what happens is when your APK gets",
    "start": "3196280",
    "end": "3202960"
  },
  {
    "text": "stuck on one of these devices that supports render script the first time that it's launched and it needs that",
    "start": "3202960",
    "end": "3209440"
  },
  {
    "text": "resource the renderscript piece goes hold on I know this is render script and",
    "start": "3209440",
    "end": "3214640"
  },
  {
    "text": "I've got a bit code resource because you remember we fed that into the Constructor and if it hasn't ever loaded",
    "start": "3214640",
    "end": "3220319"
  },
  {
    "text": "it before it goes off and it finishes the compilation and basically takes that bit code and turns it into native code",
    "start": "3220319",
    "end": "3227079"
  },
  {
    "text": "so your device has an llvm compiler actually on it to support render",
    "start": "3227079",
    "end": "3233200"
  },
  {
    "text": "script and it compiles and links this into machine code for your s so and it could",
    "start": "3233200",
    "end": "3241079"
  },
  {
    "text": "be something that's just for like your armv7 or something the OEM is provided",
    "start": "3241079",
    "end": "3246400"
  },
  {
    "text": "that knows how to take it on the armv7 and communicate with the GPU and feed the GPU",
    "start": "3246400",
    "end": "3252799"
  },
  {
    "text": "data it's also cached for future use so this happens the first time you run this",
    "start": "3252839",
    "end": "3258440"
  },
  {
    "text": "render script and the output of this compilation gets cached and it's used",
    "start": "3258440",
    "end": "3264640"
  },
  {
    "text": "the cache version is used as long as you don't update the APK from that point forward",
    "start": "3264640",
    "end": "3269760"
  },
  {
    "text": "okay uh the first time you run it sure",
    "start": "3269760",
    "end": "3274559"
  },
  {
    "text": "yeah right and do it at install time I have not heard anything uh or read anything that says they're going to do",
    "start": "3276960",
    "end": "3282799"
  },
  {
    "text": "something about it uh right now all the code basically the first time you instantiate it it goes out and it checks",
    "start": "3282799",
    "end": "3288640"
  },
  {
    "text": "a cach and if it's not there it kicks off a build for it um behind the scenes so I don't know what their plans are to",
    "start": "3288640",
    "end": "3295160"
  },
  {
    "text": "not possibly do that at install time it certainly might help the first time you load something okay in the end what ends up",
    "start": "3295160",
    "end": "3302440"
  },
  {
    "text": "happening is you get a special shared library that the render script engine",
    "start": "3302440",
    "end": "3308000"
  },
  {
    "text": "that runs as part of your application knows how to link against and that's how you get that near native performance or basically native",
    "start": "3308000",
    "end": "3315680"
  },
  {
    "start": "3313000",
    "end": "3313000"
  },
  {
    "text": "performance so on the framework side it's com comprised of java J Andi and a bunch of native libraries okay and",
    "start": "3316480",
    "end": "3323960"
  },
  {
    "text": "there's a whole slew of them here you've got you know the render script piece you've got the jni that that works in",
    "start": "3323960",
    "end": "3330960"
  },
  {
    "text": "conjunction with that uh render script itself uh which is all written in CN C++",
    "start": "3330960",
    "end": "3337640"
  },
  {
    "text": "and then the actual compiler and then there's this driver piece okay it's primarily all done in Native C and C++",
    "start": "3337640",
    "end": "3345039"
  },
  {
    "text": "so the Java side of this is pretty thin it pretty much calls down to J Andi and",
    "start": "3345039",
    "end": "3350480"
  },
  {
    "text": "calls native code to do all the work okay that's the piece that's very",
    "start": "3350480",
    "end": "3355559"
  },
  {
    "text": "platform specific so if you pull down AOSP and you look at the source code here you're going to see an",
    "start": "3355559",
    "end": "3362400"
  },
  {
    "text": "implementation it's a base implementation that'll be for the application processor that's running",
    "start": "3362400",
    "end": "3368119"
  },
  {
    "text": "Android oems would need to provide their own customized version of this to take",
    "start": "3368119",
    "end": "3373240"
  },
  {
    "text": "advantage of something like a GPU or a DSP or something along those lines and that's one of the things that they've",
    "start": "3373240",
    "end": "3378880"
  },
  {
    "text": "recently done with KitKat has made some optimizations here and I've tried to work with the OEM so that the Nexus 4",
    "start": "3378880",
    "end": "3385520"
  },
  {
    "text": "the Nexus 10 Nexus 7 and Nexus 5 all see some performance gains because they've",
    "start": "3385520",
    "end": "3390799"
  },
  {
    "text": "tried to optimize these and take advantage of the",
    "start": "3390799",
    "end": "3394799"
  },
  {
    "start": "3395000",
    "end": "3395000"
  },
  {
    "text": "gpus so your render script class if you remember when we walked through code this is the context for the scripts",
    "start": "3396480",
    "end": "3403839"
  },
  {
    "text": "and it manages the native threads which are all done in P threads just like I did in native code to do all the work",
    "start": "3403839",
    "end": "3410160"
  },
  {
    "text": "okay this is also what maintains that render script cache okay so the cach in",
    "start": "3410160",
    "end": "3415960"
  },
  {
    "text": "your application uh you know of of compiled code basically that bit code to a native",
    "start": "3415960",
    "end": "3421160"
  },
  {
    "text": "shared Library it's an app private cache that's available just to your application and",
    "start": "3421160",
    "end": "3427760"
  },
  {
    "text": "it manages native instances of the render script objects so the script C class is the",
    "start": "3427760",
    "end": "3434720"
  },
  {
    "text": "base we talked about this a little bit of your generated class it's a subass of script and base",
    "start": "3434720",
    "end": "3443359"
  },
  {
    "text": "object and it loads the bit code and compile files it if needed so the context manages the cache and it works",
    "start": "3443359",
    "end": "3450720"
  },
  {
    "text": "in conjunction with the script C to actually do the compilation if it's needed first time it's run or if you",
    "start": "3450720",
    "end": "3457200"
  },
  {
    "text": "update your APK and that renderscript uh resource has changed it'll recompile it",
    "start": "3457200",
    "end": "3464798"
  },
  {
    "text": "again okay the instance defines an ID for the render script the context so there's some coordination going on",
    "start": "3465280",
    "end": "3471640"
  },
  {
    "text": "between these two things so so all of your for each invoke",
    "start": "3471640",
    "end": "3478240"
  },
  {
    "text": "get and SE R wrap calls to render script those are all handled inside of here down within the",
    "start": "3478240",
    "end": "3485400"
  },
  {
    "text": "framework so if we look at a diagram of it you basically have your script C for",
    "start": "3485760",
    "end": "3490960"
  },
  {
    "text": "your script which goes into the render script uh engine crosses the jni",
    "start": "3490960",
    "end": "3496559"
  },
  {
    "text": "boundary and feeds data into worker threads and that gets passed off to your",
    "start": "3496559",
    "end": "3502839"
  },
  {
    "text": "bit code Library which has been compiled to whatever the platform ports whether it's just the application processor uh",
    "start": "3502839",
    "end": "3509880"
  },
  {
    "text": "on your SOC or it's taking advantage of a GPU DSP",
    "start": "3509880",
    "end": "3515000"
  },
  {
    "start": "3514000",
    "end": "3514000"
  },
  {
    "text": "whatever okay any questions over all that that's a great question I think it's up to the OEM so if you're going to",
    "start": "3515400",
    "end": "3522400"
  },
  {
    "text": "take advantage of the GPU uh the OEM would have to make sure that they provide an implementation to not starve",
    "start": "3522400",
    "end": "3529640"
  },
  {
    "text": "off openl operations or 3D Graphics operations right um I think you'd probably run into the same kind of",
    "start": "3529640",
    "end": "3535559"
  },
  {
    "text": "problem with open CL right uh you have to have that kind of coordination and scheduling there and unfortunately",
    "start": "3535559",
    "end": "3542640"
  },
  {
    "text": "there's nothing in here that you know I've seen that lets you tweak or update",
    "start": "3542640",
    "end": "3547680"
  },
  {
    "text": "the way that that behaves okay now certainly one potential uh gotcha that's",
    "start": "3547680",
    "end": "3553839"
  },
  {
    "text": "in here you know from what I've seen of the base implementation which uses the the application processor of your so it",
    "start": "3553839",
    "end": "3562039"
  },
  {
    "text": "spawns enough threads to match the number of cores so there's some potential for starvation there if you're",
    "start": "3562039",
    "end": "3567880"
  },
  {
    "text": "doing a lot of work um and I've not looked close enough at the underpinning",
    "start": "3567880",
    "end": "3573079"
  },
  {
    "text": "so I kind of touched on it here so you kind of you guys get a peek at what's going on with that man behind the curtain um but you know what is it",
    "start": "3573079",
    "end": "3581119"
  },
  {
    "text": "really doing under there how is it scheduling those threads is it truly just feeding enough you know for enough",
    "start": "3581119",
    "end": "3587119"
  },
  {
    "text": "threads to match all the cores because if so yes you could potentially starve off the",
    "start": "3587119",
    "end": "3592880"
  },
  {
    "text": "system any other questions okay so it's a powerful uh computational",
    "start": "3592880",
    "end": "3600799"
  },
  {
    "text": "framework it's c99 based so it's probably going to look familiar to most folks here okay you've got tradeoffs",
    "start": "3600799",
    "end": "3606520"
  },
  {
    "text": "versus pure Java and Native jni uh your performance is close to Native uh it's a",
    "start": "3606520",
    "end": "3613280"
  },
  {
    "text": "little less complex in dealing with jni particularly if you're going to do parallel operations um you do have inherent",
    "start": "3613280",
    "end": "3620799"
  },
  {
    "text": "inherent parallel operations on a multicore device or even be able to feed to something like GPU if you do your own",
    "start": "3620799",
    "end": "3628119"
  },
  {
    "text": "native spin with your own jni you've got to manage all of that okay this takes away some of that complexity um it will",
    "start": "3628119",
    "end": "3635039"
  },
  {
    "text": "take advantage of a GPU or a DSP if it's supported by the OEM okay uh it is",
    "start": "3635039",
    "end": "3642200"
  },
  {
    "text": "device architecture independent because it does finish that compilation once it's run on that specific device uh and",
    "start": "3642200",
    "end": "3648319"
  },
  {
    "text": "your debugging is very very limited all right you do have some",
    "start": "3648319",
    "end": "3655000"
  },
  {
    "text": "built-in image process in intrinsics um I would hope that they'll continue to",
    "start": "3655000",
    "end": "3660079"
  },
  {
    "text": "evolve this and possibly provide some more intrinsics Based On Demand right now the biggest thing we're seeing it in",
    "start": "3660079",
    "end": "3666079"
  },
  {
    "text": "is image processing and that's what a lot of the documentation focuses on but you can use it for a lot of other",
    "start": "3666079",
    "end": "3672160"
  },
  {
    "text": "things and it does continue to evolve so hopefully it'll continue along that track you use Java Reflection classes to",
    "start": "3672160",
    "end": "3680280"
  },
  {
    "text": "access your native runtime all right so here's a bunch of uh links for you um",
    "start": "3680280",
    "end": "3686319"
  },
  {
    "text": "this is upd it has been updated since uh the the conference slides were fed I made a few tweaks to it um so this copy",
    "start": "3686319",
    "end": "3695000"
  },
  {
    "text": "URL is you can get this presentation up there and all this is up to date on there um the SDK documentation AOSP",
    "start": "3695000",
    "end": "3703760"
  },
  {
    "text": "source code and then the GitHub for the fractal code is down here at the",
    "start": "3703760",
    "end": "3710000"
  },
  {
    "text": "bottom anybody have any other questions",
    "start": "3711960",
    "end": "3717079"
  },
  {
    "text": "all right thank you for your [Applause]",
    "start": "3717079",
    "end": "3723330"
  },
  {
    "text": "time",
    "start": "3728160",
    "end": "3731160"
  }
]