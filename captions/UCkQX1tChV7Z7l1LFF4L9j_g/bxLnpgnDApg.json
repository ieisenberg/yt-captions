[
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11320"
  },
  {
    "text": "just out of curiosity how many of you have actually touched closure before now anybody touched it at all okay that's",
    "start": "11320",
    "end": "16440"
  },
  {
    "text": "fine I don't assume any pre- knowledge of closure for this talk that's why it's called a curious closur and I'm here to",
    "start": "16440",
    "end": "22400"
  },
  {
    "text": "talk about closure and the things I want to talk about are what I'm calling the",
    "start": "22400",
    "end": "28080"
  },
  {
    "text": "four elevators of closure the thing that really elevated above all the other languages on the",
    "start": "28080",
    "end": "34440"
  },
  {
    "text": "jvm uh and here are the four elevators Java interop lisp functional programming",
    "start": "34440",
    "end": "40640"
  },
  {
    "text": "and closures unique State on or unique take on State and",
    "start": "40640",
    "end": "46000"
  },
  {
    "text": "concurrency um there are lots of languages on the",
    "start": "46000",
    "end": "51360"
  },
  {
    "text": "jvm now does anybody know how many languages on the jvm now just out of curiosity anybody anybody take a guess",
    "start": "51360",
    "end": "59559"
  },
  {
    "text": "I'll bet you're in order of magnitude off if you guess 20 20 so they're more than 200 so I was right you're more than",
    "start": "59559",
    "end": "65840"
  },
  {
    "text": "in order of magnitude off they're more than 200 languages in the jvm right now so why should you choose one like",
    "start": "65840",
    "end": "71880"
  },
  {
    "text": "closure versus all the other ones that's what I'm going to attempt to answer during this talk so here's the oneline",
    "start": "71880",
    "end": "77600"
  },
  {
    "text": "elevator pitch for closure closure is a dynamic strongly typed functional high performance",
    "start": "77600",
    "end": "83280"
  },
  {
    "text": "implementation of a lisp and the jvm so let's talk about a few of those characteristics closure is dynamic",
    "start": "83280",
    "end": "89159"
  },
  {
    "text": "meaning that it is dynamically typed like Ruby and groovy are dynamically typed meaning that you don't predefine",
    "start": "89159",
    "end": "97320"
  },
  {
    "text": "the type of a variable but once you assign something to a variable it is strongly typed it retains knowledge of",
    "start": "97320",
    "end": "102799"
  },
  {
    "text": "that you can do reflection on that thing uh you can do any kind of U activity you want on it based on the type so it is",
    "start": "102799",
    "end": "109320"
  },
  {
    "text": "dynamic strongly typed so in that way it is like groovy and Ruby both of which are Dynamic strongly typed languages a",
    "start": "109320",
    "end": "116560"
  },
  {
    "text": "difference though between Ruby and groovy and closure is that closures heavily functional uh and this is a",
    "start": "116560",
    "end": "122039"
  },
  {
    "text": "really big difference between closure and a language for example like Scala which is also a functional language on",
    "start": "122039",
    "end": "128039"
  },
  {
    "text": "the jvm but they are actually very very different in their approaches because",
    "start": "128039",
    "end": "133360"
  },
  {
    "text": "one of the things that scholar is trying to do is build a bridge from the object-oriented imperative world to",
    "start": "133360",
    "end": "139200"
  },
  {
    "text": "where it thinks you should be which is the more immutable functional world but the way that they're doing that is",
    "start": "139200",
    "end": "144879"
  },
  {
    "text": "supporting both paradigms which is a really nice characteristic for bridge",
    "start": "144879",
    "end": "149959"
  },
  {
    "text": "but it's also a dangerous language to program in because you have to have extreme discipline to do the right thing",
    "start": "149959",
    "end": "155519"
  },
  {
    "text": "same thing happened in C++ which is also a multi-paradigm language people had a mishmash of c and C++ and objects and",
    "start": "155519",
    "end": "162560"
  },
  {
    "text": "procedures and functions uh the same thing is true in scolar which is a multi- paradigm language closure is not",
    "start": "162560",
    "end": "169159"
  },
  {
    "text": "a multi Paradigm language closure is a functional language first and foremost now it can interact with all the",
    "start": "169159",
    "end": "175000"
  },
  {
    "text": "imperative Java world but you don't really write imperative code in closure you write functional code and so it has",
    "start": "175000",
    "end": "180760"
  },
  {
    "text": "a much stronger opinion about the way that you can do things correctly and in fact closure has taken over a few things",
    "start": "180760",
    "end": "187200"
  },
  {
    "text": "from you but by doing that they've greatly simplified some really really tricky things in the jvm so for example",
    "start": "187200",
    "end": "193760"
  },
  {
    "text": "closure does for concurrency what Java did for memory management you can write thread save code en closure without",
    "start": "193760",
    "end": "200840"
  },
  {
    "text": "thinking once about threading and everything is automatically concurrent and thread safe and I'll show you what that looks like so it's a very",
    "start": "200840",
    "end": "207480"
  },
  {
    "text": "functional language and a single Paradigm language versus a multi Paradigm language it's also very high",
    "start": "207480",
    "end": "213720"
  },
  {
    "text": "performance one of the goals in closure this is actually I think Rich's fifth uh lisp implementation he knows how to do",
    "start": "213720",
    "end": "221400"
  },
  {
    "text": "efficient Lis implementations and one of his goals was to make a really high performance language on the jvm and he",
    "start": "221400",
    "end": "227319"
  },
  {
    "text": "has managed to do that in fact done so in some ways that are a little bit controversial in the list world because",
    "start": "227319",
    "end": "233159"
  },
  {
    "text": "the traditional way that you build lisp programming languages is a a particular data structure called a conell rich",
    "start": "233159",
    "end": "239799"
  },
  {
    "text": "decided not to do that so he could make a higher performance version in Java and so the the surface characteristics of",
    "start": "239799",
    "end": "246159"
  },
  {
    "text": "the language are unchanged but the internal implementation is different so that he can get really good high",
    "start": "246159",
    "end": "251920"
  },
  {
    "text": "performance and the last thing here is that it is a lisp on the jvm so isn't",
    "start": "251920",
    "end": "257639"
  },
  {
    "text": "Lis the one with all the crazy parentheses yes it is which brings up",
    "start": "257639",
    "end": "263600"
  },
  {
    "text": "kind of an interesting point people don't like to read list code because it looks like it comes from another planet",
    "start": "263600",
    "end": "270199"
  },
  {
    "text": "and so you would have to be to build a brand new language and use list syntax",
    "start": "270199",
    "end": "275560"
  },
  {
    "text": "on the jvm you've either got to be a crazy person or you've got some really",
    "start": "275560",
    "end": "281320"
  },
  {
    "text": "cool ulterior motive and I've met Rich he's not a crazy person he's got a really cool ulterior motive because",
    "start": "281320",
    "end": "288840"
  },
  {
    "text": "lisps have a characteristic that other languages just don't have and the the",
    "start": "288840",
    "end": "294320"
  },
  {
    "text": "way that that's captured is is by saying that lisp is a homo ionic language which means that lis LP programs are actually",
    "start": "294320",
    "end": "301360"
  },
  {
    "text": "also legal lisp data structures which doesn't sound like that big a deal it turns out it's a huge deal when you get",
    "start": "301360",
    "end": "308800"
  },
  {
    "text": "to really really complex things that you need to attack in your language this makes all the difference in the world so",
    "start": "308800",
    "end": "315199"
  },
  {
    "text": "list programs actually consists of lisp data structures and this is all kinds of",
    "start": "315199",
    "end": "320240"
  },
  {
    "text": "useful and I'll show you uh implementing macros and why this is all kinds of useful and why it is worthwhile enduring",
    "start": "320240",
    "end": "327400"
  },
  {
    "text": "the pain of learning to deal with the parentheses and the pain goes away really fast trust me it looks like it'd",
    "start": "327400",
    "end": "334000"
  },
  {
    "text": "be painful for a long time is not at all uh there are some really compelling reasons to fight through that and and",
    "start": "334000",
    "end": "339680"
  },
  {
    "text": "adopt this language so let's talk briefly about the ecosystem I'm not going to spend a lot",
    "start": "339680",
    "end": "344960"
  },
  {
    "text": "of time here but if you have a new language you need to be able to do stuff with it so the language itself is on",
    "start": "344960",
    "end": "350240"
  },
  {
    "text": "closure. org it's an open source language project it is maintained by closure core and so if one of the things",
    "start": "350240",
    "end": "357520"
  },
  {
    "text": "that you strongly desire when you pick up a new l language is to have a throat to strangle if things go wrong then closure core will sell you a throat to",
    "start": "357520",
    "end": "364319"
  },
  {
    "text": "strangle if something goes wrong if you want support for closure or things around closure so there's an ecosystem a",
    "start": "364319",
    "end": "369880"
  },
  {
    "text": "lot of the spring ecosystem has grown up around closure there are a variety of different ways to edit closure code uh",
    "start": "369880",
    "end": "376080"
  },
  {
    "text": "if you're a typical Java developer you're probably an eclipse and so there's a eclipse plugin called counterclockwise that gives you syntax",
    "start": "376080",
    "end": "382720"
  },
  {
    "text": "highlighting and reple and a bunch of other nice things if you want to go more traditional old school and emac there's",
    "start": "382720",
    "end": "388479"
  },
  {
    "text": "an emac starter kit for closure that gives you all the bits and pieces to get closure up and running inside U emac",
    "start": "388479",
    "end": "395039"
  },
  {
    "text": "there's also a really nice intellig plugin uh that does a closure uh the",
    "start": "395039",
    "end": "400560"
  },
  {
    "text": "build Tool uh there are several in the closure world the most popular one is linan uh which is uh this is actually",
    "start": "400560",
    "end": "407160"
  },
  {
    "text": "based on a poem about this guy fighting an army of ants which is where the name of this tool came from there's also a",
    "start": "407160",
    "end": "412720"
  },
  {
    "text": "tool called cake which is rake enclosure but this is the most popular one this actually does transitive dependency",
    "start": "412720",
    "end": "417759"
  },
  {
    "text": "management kind of like maven without the evilness of Maven uh so it does the",
    "start": "417759",
    "end": "423319"
  },
  {
    "text": "the transitive dependency management for you but the syntax of course is all closure code instead of XML and it has",
    "start": "423319",
    "end": "429360"
  },
  {
    "text": "the usual complement there's a web framework there's several the most popular web framework is called composure it's uh a very lightweight",
    "start": "429360",
    "end": "436720"
  },
  {
    "text": "basically just router framework allas Sinatra and Ruby on Rails or rat pack and groovy uh there's also several",
    "start": "436720",
    "end": "444120"
  },
  {
    "text": "different ways to talk to relational databases there CLG record which is a a partial Port of the Ruby active record",
    "start": "444120",
    "end": "450039"
  },
  {
    "text": "stuff that's in rails onto the excuse me the closure stack there's also closure ql which is relational algebra to SQL as",
    "start": "450039",
    "end": "457599"
  },
  {
    "text": "a as a DSL excuse me there's also closure script which is closure implemented in",
    "start": "457599",
    "end": "465479"
  },
  {
    "text": "JavaScript so they've actually written the closure interpreter in JavaScript and you can run closure code on top of",
    "start": "465479",
    "end": "471440"
  },
  {
    "text": "JavaScript uh using a couple of key libraries like the closure library from U from Google uh but uh you can now it",
    "start": "471440",
    "end": "479759"
  },
  {
    "text": "doesn't support everything because there's some things that Java can't support like the software transaction memory stuff but all the syntax is",
    "start": "479759",
    "end": "486199"
  },
  {
    "text": "supported so there's a really nice opportunity here people write the same code on the back end and the same end on",
    "start": "486199",
    "end": "491360"
  },
  {
    "text": "the front end and pass data structures back and forth because you've got closure on both the browser and the server",
    "start": "491360",
    "end": "497680"
  },
  {
    "text": "side So speaking of code let's look at and see what some closure code looks like uh closure has the typical kind of",
    "start": "497680",
    "end": "504639"
  },
  {
    "text": "data types you would expect on a jvm based languages we have strings which are double string Limited we have",
    "start": "504639",
    "end": "509800"
  },
  {
    "text": "characters which are delimited with the slash in front of them we have regular Expressions as well and this is a good",
    "start": "509800",
    "end": "515000"
  },
  {
    "text": "example of uh some of the nice things en closure the regular expression here Maps",
    "start": "515000",
    "end": "520279"
  },
  {
    "text": "directly down to the pattern class in Java so this is really just a a wrapper on the pattern class in Java you can",
    "start": "520279",
    "end": "526920"
  },
  {
    "text": "also get to the matcher but closure doesn't like matcher because matcher is mutable in Java which is an evil thing",
    "start": "526920",
    "end": "532920"
  },
  {
    "text": "for matcher to be mutable and so closures implemented their own implementation of matcha that's not mutable which is a good thing",
    "start": "532920",
    "end": "539959"
  },
  {
    "text": "we have a Precision integers and you'll notice that these can be represented as in Longs or big integers you never have",
    "start": "539959",
    "end": "546200"
  },
  {
    "text": "to think about this in the closure World it automatically escalates the correct data type for you so if you do something",
    "start": "546200",
    "end": "551320"
  },
  {
    "text": "it's going to overflow in energy it'll just roll over to a long for you automatically we have doubles and we",
    "start": "551320",
    "end": "556920"
  },
  {
    "text": "have Precision doubles which represented by big decimals underneath we have booleans which are represented by",
    "start": "556920",
    "end": "561959"
  },
  {
    "text": "booleans underneath we have nil which is closure version of null uh we also have a symbol type a",
    "start": "561959",
    "end": "569040"
  },
  {
    "text": "symbol are basically strings that represent things like operators or function names uh there's also a",
    "start": "569040",
    "end": "575680"
  },
  {
    "text": "specialized symbol called a keyword this is not like a keyword in Java where if and while are keywords these are",
    "start": "575680",
    "end": "582800"
  },
  {
    "text": "basically from an implementation standpoint inter turn constant strings but this keyword Fu will always",
    "start": "582800",
    "end": "590120"
  },
  {
    "text": "represent this value of Fu and so it's useful to use these for efficiency sake because um rather than use strings uh",
    "start": "590120",
    "end": "598760"
  },
  {
    "text": "and there are several data structures in here that that kind of expect keywords like uh Maps keywords are frequently the",
    "start": "598760",
    "end": "605680"
  },
  {
    "text": "key part of the key value store so let's look at some data",
    "start": "605680",
    "end": "612240"
  },
  {
    "text": "literals we have lists which are singly linked and inserted front and the",
    "start": "612240",
    "end": "617480"
  },
  {
    "text": "example is that it's just within parentheses that's a a legal list and closure but rid actually added a new",
    "start": "617480",
    "end": "623600"
  },
  {
    "text": "kind of sequence data structure to closure called a vector and this is indexed in insert it",
    "start": "623600",
    "end": "630880"
  },
  {
    "text": "rear uh these two exist because they have different performance",
    "start": "630880",
    "end": "636120"
  },
  {
    "text": "characteristics in some cases you want to use a single link list in some cases you would like to use an indexed Vector",
    "start": "636120",
    "end": "642040"
  },
  {
    "text": "uh he also introduced vectors and and with a square brace syntax to clean up the uh the Syntax for defining functions",
    "start": "642040",
    "end": "649079"
  },
  {
    "text": "he uses a vector instead of a list and that actually gets rid of a a really nasty set of internal parentheses that",
    "start": "649079",
    "end": "654560"
  },
  {
    "text": "you'd like to get rid of I'll show you an example of that in a second we also have Maps which are key",
    "start": "654560",
    "end": "660200"
  },
  {
    "text": "value pairs keywords are frequently used here but any closure class can be used here as a key you don't have to worry",
    "start": "660200",
    "end": "666200"
  },
  {
    "text": "about the same thing you have to worry about in Java because everything here in enclosure is immutable and so that",
    "start": "666200",
    "end": "671680"
  },
  {
    "text": "everything makes good map keys because that's the thing that you have to be careful in Java don't let mutable things be mat keys because if you mutate it",
    "start": "671680",
    "end": "678360"
  },
  {
    "text": "then you won't be able to find your entry anymore that's not a problem here in closure because everything is",
    "start": "678360",
    "end": "683639"
  },
  {
    "text": "immutable and we also have sets which have this syntax with a pound side and curly braces this is uh closure is very",
    "start": "683639",
    "end": "691200"
  },
  {
    "text": "characteristic of a lot of functional programming languages in that it has very few data structures but a lot of",
    "start": "691200",
    "end": "697160"
  },
  {
    "text": "operations that understand those data structures a lot of imperative objectoriented languages have a lot of",
    "start": "697160",
    "end": "702360"
  },
  {
    "text": "data structures and a lot of operations most functional programming languages have a very small number of data",
    "start": "702360",
    "end": "707560"
  },
  {
    "text": "structures but a lot of things that operate on those data",
    "start": "707560",
    "end": "711800"
  },
  {
    "text": "structures let's talk about function calls here's what a function call looks like in the closure world all you really",
    "start": "713000",
    "end": "718920"
  },
  {
    "text": "doing thing here is taking the pr which you normally put right here in front of hello and just scooting it out to be in",
    "start": "718920",
    "end": "724360"
  },
  {
    "text": "front of the um in front of the opening p and so that's a function call and its",
    "start": "724360",
    "end": "730639"
  },
  {
    "text": "argument is a single string call to hello world but you'll also notice that this",
    "start": "730639",
    "end": "736440"
  },
  {
    "text": "function call is a legal closure data structure because it's just a list it's a list that has two elements in it it's",
    "start": "736440",
    "end": "743560"
  },
  {
    "text": "a list that has two symbols in it this is part of that homo ionicity that I was talking about before",
    "start": "743560",
    "end": "749600"
  },
  {
    "text": "here's how you can define a function defin greet uh you can put a doc string",
    "start": "749600",
    "end": "755440"
  },
  {
    "text": "there if you want which is a string that comes back uh closure has a tool called the reppel the Reed Val print Loop where",
    "start": "755440",
    "end": "761760"
  },
  {
    "text": "you can start it up and play around with closure code one of the functions you can call as DOC for something to get documentation for it which returns you",
    "start": "761760",
    "end": "768120"
  },
  {
    "text": "the doc string that's optional but you can put it in there and you can also do more elaborate kind of java doc style",
    "start": "768120",
    "end": "773360"
  },
  {
    "text": "documentation if you want the arguments in a closure end up in a vector so it's",
    "start": "773360",
    "end": "779240"
  },
  {
    "text": "function name and then this is a comma delimited list of U of arguments",
    "start": "779240",
    "end": "784360"
  },
  {
    "text": "actually comma or space delimited uh and this uses a vector instead of an embedded list which lets the function",
    "start": "784360",
    "end": "790760"
  },
  {
    "text": "definition stand out a little more uh and then this is a function body which is going to be a series of function",
    "start": "790760",
    "end": "798279"
  },
  {
    "text": "calls but again this homo ionicity property pops up notice that all these",
    "start": "798720",
    "end": "804079"
  },
  {
    "text": "things are just the data structures we've already seen it's a list that has a bunch of symbols in it there's a vector and then there's 's another list",
    "start": "804079",
    "end": "809839"
  },
  {
    "text": "with a bunch of symbols in it at the end of the day it's all just data and reason",
    "start": "809839",
    "end": "814920"
  },
  {
    "text": "that's important we'll come up in a bit yeah signicant no no no space is",
    "start": "814920",
    "end": "822440"
  },
  {
    "text": "significant in fact a comma enclosure is also Whit space so you can put commas",
    "start": "822440",
    "end": "827519"
  },
  {
    "text": "anywhere you want to make it look prettier I said comma delimited list here but it doesn't matter it can be space delimited because it doesn't",
    "start": "827519",
    "end": "832800"
  },
  {
    "text": "matter so space is irrelevant here in fact even less so than in a lot of languages uh that's part of this all",
    "start": "832800",
    "end": "839839"
  },
  {
    "text": "the parentheses stuff you can also uh for some interop scenarios you want to be able to prefix",
    "start": "839839",
    "end": "847199"
  },
  {
    "text": "function metadata like Types on here and so you can do that if you want that can either be a type or an arbitrary map",
    "start": "847199",
    "end": "852959"
  },
  {
    "text": "that has a value in it uh so you can add type hints here particularly for Java interop if you have an overloaded Java",
    "start": "852959",
    "end": "859639"
  },
  {
    "text": "function and you want to make sure that you call a specific one that has a particular type signature you can by",
    "start": "859639",
    "end": "865040"
  },
  {
    "text": "applying function metadata but that that's never really used in the closure world So speaking of java interrupt one of the",
    "start": "865040",
    "end": "871759"
  },
  {
    "text": "things that you're obviously going to need to do in in a a jvm language is interrupt with Java so let's look at",
    "start": "871759",
    "end": "877880"
  },
  {
    "text": "Java interrup and what that looks like you have syntax extensions to reach",
    "start": "877880",
    "end": "883639"
  },
  {
    "text": "all of java so there's no part of java that you can't get to in closure closure also compiles to bite",
    "start": "883639",
    "end": "890519"
  },
  {
    "text": "code so this is not an interpreted language it compiles down to bite code so which means it's fast uh and you can",
    "start": "890519",
    "end": "897320"
  },
  {
    "text": "also call closure from Java if you want because at the end of the day it's all bite",
    "start": "897320",
    "end": "902399"
  },
  {
    "text": "code the thing you run into is that Java or sorry closure is expecting some",
    "start": "902399",
    "end": "908279"
  },
  {
    "text": "characteristics of the things that it deals with like it it assumes immutability and if you pass mutable",
    "start": "908279",
    "end": "913480"
  },
  {
    "text": "things over you can still interact with them but it's not it's not a natural kind of thing to do uh and calling",
    "start": "913480",
    "end": "919680"
  },
  {
    "text": "closure from java makes a lot of assumptions about interfaces it's implementing a lot of other things that make it difficult so if uh if you want",
    "start": "919680",
    "end": "926639"
  },
  {
    "text": "to see a good example of that vincat super monum has a new book out on concurrency on the",
    "start": "926639",
    "end": "931920"
  },
  {
    "text": "jvm and he shows an example of calling into closure software transactional",
    "start": "931920",
    "end": "937160"
  },
  {
    "text": "memory from java so it is possible to do that but there's a long checklist of things you have to make sure because uh",
    "start": "937160",
    "end": "943600"
  },
  {
    "text": "uh closure is a much more restrictive language than Java in terms of some of the things it it will",
    "start": "943600",
    "end": "948880"
  },
  {
    "text": "allow so if you want to construct a new widget uh you would fire the Constructor like this in Java in closure everything",
    "start": "948880",
    "end": "956319"
  },
  {
    "text": "is function based and their sent ttic sugar in the language to say if you want to fire the Constructor on something",
    "start": "956319",
    "end": "962040"
  },
  {
    "text": "just do class name Dot and then argument uh argument list Constructor parameter",
    "start": "962040",
    "end": "968440"
  },
  {
    "text": "list you can also get to static members in Java you would do a class dot in",
    "start": "968440",
    "end": "973480"
  },
  {
    "text": "closure You' do class or namespace slash and whatever the constant is you can also get to instance members so if I",
    "start": "973480",
    "end": "980759"
  },
  {
    "text": "want to get to random number next in the way to do that enclosure isex in for round a random so notice that instead of",
    "start": "980759",
    "end": "988720"
  },
  {
    "text": "being object function it's function object everywhere and then any additional parameters would go after the",
    "start": "988720",
    "end": "995079"
  },
  {
    "text": "uh the object that's there so any dotted method you can call",
    "start": "995079",
    "end": "1001079"
  },
  {
    "text": "like this in the Java World although uh but there's a really common idium in the Java world I like to call the law of Dem",
    "start": "1001079",
    "end": "1007519"
  },
  {
    "text": "meter violation where you say this do this do this or this. get this do get",
    "start": "1007519",
    "end": "1012720"
  },
  {
    "text": "this this long series of things and that would be really ugly enclosure because it would have to be inside out and so",
    "start": "1012720",
    "end": "1019519"
  },
  {
    "text": "there's syntactic sugar enclosure to allow you to do chained access and so if you're calling person.get address. gzip",
    "start": "1019519",
    "end": "1026360"
  },
  {
    "text": "code you can just put dot dot there and then anything you put in here there's just an assumed dot in between all those",
    "start": "1026360",
    "end": "1032199"
  },
  {
    "text": "guys so this can be as long as you want dot dot handles all the intermediate dots there",
    "start": "1032199",
    "end": "1039640"
  },
  {
    "text": "yeah is running top of Java on top of J model where you actually have ating",
    "start": "1041039",
    "end": "1047240"
  },
  {
    "text": "language that kind of the Java intermed actually runs on top of the J well this this Does this does not produce Java",
    "start": "1047240",
    "end": "1053919"
  },
  {
    "text": "code this produces Java bite code when you compile this this produces bite code just like Java yeah this is not doing",
    "start": "1053919",
    "end": "1059679"
  },
  {
    "text": "code gen and Java this is pure Java bite code sooy",
    "start": "1059679",
    "end": "1065919"
  },
  {
    "text": "usy well actually groovy doesn't do that anymore either of comp Java yeah they",
    "start": "1067200",
    "end": "1073440"
  },
  {
    "text": "they all compil to bite code now some of them are interpreted so Ruby J Ruby for example is interpreted uh but uh closure",
    "start": "1073440",
    "end": "1080280"
  },
  {
    "text": "is not interpreted it compiles straight down to bite code so the ear version movie that I used ConEd created Java",
    "start": "1080280",
    "end": "1087520"
  },
  {
    "text": "class that compil you must have been using groovy pre-1.0 because that was that would have been ancient times but",
    "start": "1087520",
    "end": "1093480"
  },
  {
    "text": "because I mean last four years uh not in the not unless you've got some weird build of groovy because groovy has been",
    "start": "1093480",
    "end": "1099720"
  },
  {
    "text": "a first class language for a long time so but I me there may be some sort of translation tool that's doing that or",
    "start": "1099720",
    "end": "1105799"
  },
  {
    "text": "something but this one does not translate to Java code at all this is straight to bite code so very high performance so it's always two dots no",
    "start": "1105799",
    "end": "1112400"
  },
  {
    "text": "matter how many yeah it's always two dots no matter how many you want that's just that just basically says put dots between every one of these things I'm",
    "start": "1112400",
    "end": "1118360"
  },
  {
    "text": "about to chain across here so and in fact one of the things that terrifies people about lisp is the number of",
    "start": "1118360",
    "end": "1123960"
  },
  {
    "text": "parentheses but from the Java code that we've seen so far let's count them up and so in the Java version of the code",
    "start": "1123960",
    "end": "1129159"
  },
  {
    "text": "that we've seen so far we've got eight parentheses in the closure version we've only got six so",
    "start": "1129159",
    "end": "1134400"
  },
  {
    "text": "there closure realizes that the parenthesis can be numers some and so",
    "start": "1134400",
    "end": "1139480"
  },
  {
    "text": "they have a lot of syntactic sugar in the language to get rid of situations where you'd have to go nuts with parentheses things like dot dot to to",
    "start": "1139480",
    "end": "1146200"
  },
  {
    "text": "simplify some of those strings so this actually line has fewer parentheses than that",
    "start": "1146200",
    "end": "1152519"
  },
  {
    "text": "line so as I said you can get to all the pieces of java so for example let's say",
    "start": "1153080",
    "end": "1158200"
  },
  {
    "text": "you wanted to implement an interface from the Java world that's easy there's a function in there called rifi you give",
    "start": "1158200",
    "end": "1163440"
  },
  {
    "text": "it a Java interface and now you can have method bodies down here what is the the uh what is runnable look like it takes a",
    "start": "1163440",
    "end": "1170159"
  },
  {
    "text": "single run method that takes no parameters there's a single run method with no parameters there's the body of the method if this interface Define",
    "start": "1170159",
    "end": "1177039"
  },
  {
    "text": "multiple method signatures then I can have multiple bodies down here with multiple methods each one with parameter",
    "start": "1177039",
    "end": "1184039"
  },
  {
    "text": "signatures certainly using closure changes the shape of your code so I want to do is take a common piece of code",
    "start": "1184039",
    "end": "1191080"
  },
  {
    "text": "that probably exists in your codebase right now Apache Commons the is blank method and convert that over into",
    "start": "1191080",
    "end": "1198039"
  },
  {
    "text": "closure one step at a time deconstructing it from one language to the other I'll do this a couple of times here's the first",
    "start": "1198039",
    "end": "1205000"
  },
  {
    "text": "time so there's this blank this is from Apache commment what this does you pass a string and it tries to figure out if",
    "start": "1205000",
    "end": "1211559"
  },
  {
    "text": "it's blank or not the way that it does that is check to see is it null or is it length of zero that it returns true",
    "start": "1211559",
    "end": "1217559"
  },
  {
    "text": "otherwise it goes through every character and looks to see if it's a it's white space or not let's convert that over to",
    "start": "1217559",
    "end": "1224240"
  },
  {
    "text": "closure first thing we'll do since closure is uh uh dynamically typed we'll",
    "start": "1224240",
    "end": "1229640"
  },
  {
    "text": "get rid of all the type information so we'll strip out all the types looks like that we're definitely in stud code now",
    "start": "1229640",
    "end": "1235080"
  },
  {
    "text": "we're between Java and and closure now we can get rid of the class because we don't need classes here everything's",
    "start": "1235080",
    "end": "1240679"
  },
  {
    "text": "function based the next thing we're going to do is use a higher order function so this",
    "start": "1240679",
    "end": "1246360"
  },
  {
    "text": "thing right here this for Loop basically I'm going to replace it with an an every",
    "start": "1246360",
    "end": "1251520"
  },
  {
    "text": "function it says for every character in string then tell me if it's Whit space or not so that's a higher order function",
    "start": "1251520",
    "end": "1259200"
  },
  {
    "text": "now I'm going to come in and get rid of the corner cases it turns out that my every handles null and zero link strings",
    "start": "1259200",
    "end": "1265360"
  },
  {
    "text": "correctly so I don't need that special guard condition to handle that case so I can get rid of that corner",
    "start": "1265360",
    "end": "1271880"
  },
  {
    "text": "case which leaves me there and now I can listify it there's what is blank looks like",
    "start": "1273559",
    "end": "1282000"
  },
  {
    "text": "enclosure and that one is a lot easier to read than the Java version even if you're not a closure developer I think",
    "start": "1282400",
    "end": "1288400"
  },
  {
    "text": "that one's way easier to read because even even if you're an experienced Java developer if I didn't show you the name",
    "start": "1288400",
    "end": "1293640"
  },
  {
    "text": "of that method it would take you 30 seconds 45 seconds to figure out what that method does whereas here blank is",
    "start": "1293640",
    "end": "1300159"
  },
  {
    "text": "that every character is Whit space that's almost English that's",
    "start": "1300159",
    "end": "1305600"
  },
  {
    "text": "actually one of the goals in closure is to be able to write code that is very very readable code and this is very",
    "start": "1305600",
    "end": "1312360"
  },
  {
    "text": "readable compared to this stuff because that stuff's a bunch of loops and other other Arcana this is a pretty clean uh",
    "start": "1312360",
    "end": "1320679"
  },
  {
    "text": "version is blank it's a naming I'm glad you brought",
    "start": "1320679",
    "end": "1326679"
  },
  {
    "text": "that up as a naming convention in the closure world that suggests that this returns true or false in the traditional Lis world you put a p at the end for",
    "start": "1326679",
    "end": "1333159"
  },
  {
    "text": "predicate because the language wouldn't let you use punctuation for function names but you can use question mark As",
    "start": "1333159",
    "end": "1338799"
  },
  {
    "text": "punctuation for the function name it is part of the name and that's a clue that it probably returns true or false it's",
    "start": "1338799",
    "end": "1344640"
  },
  {
    "text": "not a requirement but it's a convention that's a good question as well so this",
    "start": "1344640",
    "end": "1350640"
  },
  {
    "text": "is actually a syntactic sugar for anonymous function so what every does every takes in a function to apply to",
    "start": "1350640",
    "end": "1357440"
  },
  {
    "text": "each element and so this is shorthand for saying I've got a function but it only takes one parameter so I'm not",
    "start": "1357440",
    "end": "1363559"
  },
  {
    "text": "actually going to create function with one parameter and give that parameter name and then call it so this is the the placeholder for the single parameter",
    "start": "1363559",
    "end": "1369840"
  },
  {
    "text": "this thing takes so if you have a function that just takes a single parameter you can write it like this as an anonymous function yep exactly you",
    "start": "1369840",
    "end": "1377960"
  },
  {
    "text": "can also if you have a function that has a bunch of arguments and you don't care about some of them you can use underscore to basically say I skip those",
    "start": "1377960",
    "end": "1384320"
  },
  {
    "text": "I don't care about those so what's so special about lisp",
    "start": "1384320",
    "end": "1391679"
  },
  {
    "text": "I've been bragging about how special lisp is this is a chart that Paul Graham came",
    "start": "1391679",
    "end": "1397799"
  },
  {
    "text": "up with now Paul Graham is a big advocate in the lisp world and he wrote a book called hackers and Painters and",
    "start": "1397799",
    "end": "1403279"
  },
  {
    "text": "one of the the articles in hackers and Painters is called beating the averages where he talks about the relative",
    "start": "1403279",
    "end": "1410159"
  },
  {
    "text": "strengths and weaknesses of various programming languages and this is his chart where",
    "start": "1410159",
    "end": "1415880"
  },
  {
    "text": "the industry Norm languages like Java and C Etc have conditionals variables",
    "start": "1415880",
    "end": "1421919"
  },
  {
    "text": "garbage collection and recursion no big deal there the kind of cool kid languages the rubies the groovies of the",
    "start": "1421919",
    "end": "1427559"
  },
  {
    "text": "world I've added some more stuff a function type a symbol type the whole language there all the time which means",
    "start": "1427559",
    "end": "1433559"
  },
  {
    "text": "you have the ability to do metaprogramming and control uh the runtime character istics of your",
    "start": "1433559",
    "end": "1439159"
  },
  {
    "text": "language uh everything's an expression but this last one's homo ionicity only",
    "start": "1439159",
    "end": "1444640"
  },
  {
    "text": "closures end up with this one so let's talk about that one a little bit more and I need to talk a little bit about",
    "start": "1444640",
    "end": "1451039"
  },
  {
    "text": "special forms special forms are the syntactic scaffolding for your language so these",
    "start": "1451039",
    "end": "1457919"
  },
  {
    "text": "are all the keywords that you know from a language like Java so the if is a a special form and so is while import",
    "start": "1457919",
    "end": "1464880"
  },
  {
    "text": "Scopes protection control flow anything using a keyword is a special form and",
    "start": "1464880",
    "end": "1470080"
  },
  {
    "text": "that's what you do when you learn a new programming language is you learn the rules for the special forms when you learn Java you learn about the if",
    "start": "1470080",
    "end": "1476640"
  },
  {
    "text": "statement you learn about the Boolean shortcircuit option you learn about the Els you learn about the dangling Els problem those are all characteristics of",
    "start": "1476640",
    "end": "1483360"
  },
  {
    "text": "that if special form in Java an outside lisp in languages like",
    "start": "1483360",
    "end": "1489760"
  },
  {
    "text": "Java special forms are limited to a specific use you can only use the if statement to do decisions about things",
    "start": "1489760",
    "end": "1495000"
  },
  {
    "text": "and that's it they look different from other things you can't build something that looks like the if statement in fact",
    "start": "1495000",
    "end": "1501159"
  },
  {
    "text": "you can't build new statements in Java you can build functions and methods but you can't build new",
    "start": "1501159",
    "end": "1506799"
  },
  {
    "text": "statements some of the special forms have special semantics that are not available to you like the if statement",
    "start": "1506799",
    "end": "1512240"
  },
  {
    "text": "the way it does short circuit Boolean evaluation that facility is just not available to you as a",
    "start": "1512240",
    "end": "1517679"
  },
  {
    "text": "developer and because of that they end up hampering reuse in a lot of situations now I'll talk more about that",
    "start": "1517679",
    "end": "1524000"
  },
  {
    "text": "in a second so what's so special about list special forms in list they look like everything else because it's just a",
    "start": "1524000",
    "end": "1530559"
  },
  {
    "text": "list remember everything is just a lisp data structure and special forms in lisp may have special semantics available",
    "start": "1530559",
    "end": "1537320"
  },
  {
    "text": "only to you as a developer so the the language designer actually giv you more power than they've taken for themselves",
    "start": "1537320",
    "end": "1543720"
  },
  {
    "text": "and the really nice thing is they can be augmented with macros and that's where the real power comes from and I'll show",
    "start": "1543720",
    "end": "1549200"
  },
  {
    "text": "you an example of macro in just a second and so here are the forms enclosure",
    "start": "1549200",
    "end": "1554960"
  },
  {
    "text": "functions are actually list operators are actually list method calls or lists well you get the idea here everything is",
    "start": "1554960",
    "end": "1561480"
  },
  {
    "text": "a list it's all the same kind of thing so why is this so important why do I keep ranting about this special forms",
    "start": "1561480",
    "end": "1568320"
  },
  {
    "text": "are easier to understand individually that's why they were created in programming languages because they're easy to understand there's a concrete",
    "start": "1568320",
    "end": "1575000"
  },
  {
    "text": "set of rules about how if works but then you get a whole bunch of things that have concrete rules and you",
    "start": "1575000",
    "end": "1581960"
  },
  {
    "text": "mix them all in together and have them start interacting with one another and you get combinatorial complexity when",
    "start": "1581960",
    "end": "1587640"
  },
  {
    "text": "you have a lot of special forms and to deal with that complexity you start categorizing things and when you start",
    "start": "1587640",
    "end": "1593159"
  },
  {
    "text": "categorizing things you end up with things like design patterns which does not exist in the eclip or closure world",
    "start": "1593159",
    "end": "1599120"
  },
  {
    "text": "so what's the alternative to that because what design patterns do for us in Java is help us build reusable code",
    "start": "1599120",
    "end": "1605000"
  },
  {
    "text": "and help us isolate and get rid of duplications things like that the alternative in the list world are macros",
    "start": "1605000",
    "end": "1611720"
  },
  {
    "text": "let me show you this how this works so for example let's say that I want to build a swing application in closure",
    "start": "1611720",
    "end": "1619000"
  },
  {
    "text": "and I've got a frame I want to add a panel to it I want to pack the frame and I want to set it visible property to",
    "start": "1619000",
    "end": "1624799"
  },
  {
    "text": "true that's how you write that code enclosure but it's annoying that that frame thing keeps showing up over and",
    "start": "1624799",
    "end": "1631080"
  },
  {
    "text": "over again that duplication is annoying and so we can stamp that out I'll create",
    "start": "1631080",
    "end": "1636399"
  },
  {
    "text": "a do2 frame and then do all these things to it say it once and then that do2 actually returns an expression so you",
    "start": "1636399",
    "end": "1642440"
  },
  {
    "text": "can do some other stuff to it so we've used a macro there to eliminate this duplication and got it",
    "start": "1642440",
    "end": "1648760"
  },
  {
    "text": "down to just one of them and now we have a better context for doing that du to is a buil-in",
    "start": "1648760",
    "end": "1654600"
  },
  {
    "text": "macro in the closure World there are actually a bunch of macros built in the closure World a lot of the the features",
    "start": "1654600",
    "end": "1662240"
  },
  {
    "text": "in closure implemented with macros how can you tell which ones they are you can't and that's the point let me show",
    "start": "1662240",
    "end": "1669440"
  },
  {
    "text": "you an example of a simple macro so let's say that I want to say when X is true then print this",
    "start": "1669440",
    "end": "1677120"
  },
  {
    "text": "stuff turns out that when does not exist in the language yet so I can build it by",
    "start": "1677120",
    "end": "1682200"
  },
  {
    "text": "creating a macro this de macro says Tak in a test and an optional body that's",
    "start": "1682200",
    "end": "1687720"
  },
  {
    "text": "what the pr means is the the rest of this is optional so I can take in an optional body and the return of this",
    "start": "1687720",
    "end": "1694200"
  },
  {
    "text": "macro returns a list that says if test then construct a list that consists of",
    "start": "1694200",
    "end": "1699760"
  },
  {
    "text": "the body that's what cons does construct a list but you'll notice the little tick in front of if and do there because when",
    "start": "1699760",
    "end": "1705679"
  },
  {
    "text": "I actually expand this macro what it's going to expand to is if x then do print",
    "start": "1705679",
    "end": "1710880"
  },
  {
    "text": "line X is true but notice what translation has happened there basically when it gets into this macro it takes in",
    "start": "1710880",
    "end": "1716880"
  },
  {
    "text": "test okay it's going to return a list what is this this is a list it's going to return a list that has if as the",
    "start": "1716880",
    "end": "1723679"
  },
  {
    "text": "first element and then the tests that's my parameter and then it's going to construct a list with the word do and",
    "start": "1723679",
    "end": "1731000"
  },
  {
    "text": "then the body notice that metaprogramming en",
    "start": "1731000",
    "end": "1737440"
  },
  {
    "text": "closure is just programming in languages like Ruby or",
    "start": "1737440",
    "end": "1742600"
  },
  {
    "text": "groovy you have to switch to a different syntax to do metaprogramming you have to learn about the expando meta class or in",
    "start": "1742600",
    "end": "1748559"
  },
  {
    "text": "Ruby you have to learn about the igen class in the scholar world you have to learn about implicit cast and all that",
    "start": "1748559",
    "end": "1753919"
  },
  {
    "text": "other stuff you don't have to learn any of that enclosure because there is no metaprogramming en closure programming",
    "start": "1753919",
    "end": "1760679"
  },
  {
    "text": "is metaprogramming enclosure because closure programs are closure data structures for example there is only one",
    "start": "1760679",
    "end": "1767760"
  },
  {
    "text": "me me ISM in all of closure that does decisions about things and it's called",
    "start": "1767760",
    "end": "1772960"
  },
  {
    "text": "if every other Boolean thing in the closure Universe are macros built on top",
    "start": "1772960",
    "end": "1778159"
  },
  {
    "text": "of if one place to make sure that truthiness is understood and then build",
    "start": "1778159",
    "end": "1783559"
  },
  {
    "text": "every other facility in the language on top of that one trusted thing that happens all over the place enclosure so",
    "start": "1783559",
    "end": "1790640"
  },
  {
    "text": "a lot of the the what you look at as keywords enclosure are actually macros so that double dot thing I showed you is",
    "start": "1790640",
    "end": "1796919"
  },
  {
    "text": "a macro syntactic sugar anytime in closure you have something that's ugly you can macro it away and make it pretty",
    "start": "1796919",
    "end": "1804760"
  },
  {
    "text": "again and that's really important because what we have been doing for the",
    "start": "1804760",
    "end": "1812039"
  },
  {
    "text": "past 30 40 years is taking some kind of problem some kind of business problem",
    "start": "1812039",
    "end": "1817760"
  },
  {
    "text": "and translating that problem into Java and sometimes that's not a friendly",
    "start": "1817760",
    "end": "1825080"
  },
  {
    "text": "translation you try to do the opposite enclosure enclosure because the language is so bendable you actually bend the",
    "start": "1825200",
    "end": "1831360"
  },
  {
    "text": "language toward the problem not the problem toward the language so it's really characteristic enclosure to",
    "start": "1831360",
    "end": "1837320"
  },
  {
    "text": "actually build up toward your problem using macros and other sorts of syntax and language rather than just purely try",
    "start": "1837320",
    "end": "1843360"
  },
  {
    "text": "to translate your problem into the only building blocks you have so here's the analogy I'm working on I may be hampered",
    "start": "1843360",
    "end": "1849559"
  },
  {
    "text": "by my age so we'll we'll try this out so Java is like a porcelain doll where you can't move any of the limbs it's just a",
    "start": "1849559",
    "end": "1855840"
  },
  {
    "text": "porcelain doll groovy and Ro Ruby are like the superhero figures where you can bend some of the joints like the elbows",
    "start": "1855840",
    "end": "1862200"
  },
  {
    "text": "and the wrist and closures like Gumby do you know what Gumby is this is my",
    "start": "1862200",
    "end": "1867279"
  },
  {
    "text": "problem is a lot of people don't know what Gumby is Gumby is this this plastic doll that just has wires in you can bend",
    "start": "1867279",
    "end": "1872320"
  },
  {
    "text": "them in any shape that you want that's what closure is is Gumby compared to a porcelain doll and that's why this is so",
    "start": "1872320",
    "end": "1879159"
  },
  {
    "text": "important this is in fact people ask me what kind of projects would you would you use closure for and the answer is",
    "start": "1879159",
    "end": "1885080"
  },
  {
    "text": "the nastiest hardest toughest kind of project possible because it's those",
    "start": "1885080",
    "end": "1890320"
  },
  {
    "text": "projects where you need the ability to mold your language toward your problem not vice versa so actually the two most",
    "start": "1890320",
    "end": "1897679"
  },
  {
    "text": "sophisticated projects we have going on in the world right now are both closure projects on purpose because we think that that's the only way those projects",
    "start": "1897679",
    "end": "1903639"
  },
  {
    "text": "could be done so that's why you endure all these parentheses the parentheses make this",
    "start": "1903639",
    "end": "1910840"
  },
  {
    "text": "possible to do this kind of metaprogramming they also make a lot of other handy things possible so one of",
    "start": "1910840",
    "end": "1916720"
  },
  {
    "text": "the things that you learn when you in Java you know there's a chart that has operator precedence where the multiplication happens before plus Etc",
    "start": "1916720",
    "end": "1924679"
  },
  {
    "text": "that chart doesn't exist in closure because everything is in prefix notation",
    "start": "1924679",
    "end": "1931200"
  },
  {
    "text": "you are writing it in the abstract syntax tree you not having to translate it anywhere and so for example plus you",
    "start": "1931200",
    "end": "1937360"
  },
  {
    "text": "can say plus with two numbers but you can also say plus and have 40 numbers there because you're just adding them",
    "start": "1937360",
    "end": "1943720"
  },
  {
    "text": "all together so another thing that's uh",
    "start": "1943720",
    "end": "1948960"
  },
  {
    "text": "interesting about closure is a strongly functional language so how is that different from what you're used to in",
    "start": "1948960",
    "end": "1954279"
  },
  {
    "text": "the object oriented world and how do you achieve reuse so in",
    "start": "1954279",
    "end": "1960519"
  },
  {
    "text": "the objectoriented world the way that we achieve reuse is we create a network of classes that communicate one another",
    "start": "1960519",
    "end": "1965960"
  },
  {
    "text": "with messages we find a piece of this that works really nicely and so we isolate that off and package up and",
    "start": "1965960",
    "end": "1973279"
  },
  {
    "text": "package that as a reusable class it's not coincidental that in the gang of",
    "start": "1973279",
    "end": "1979320"
  },
  {
    "text": "four design patterns book every single design pattern has a class diagram that's just the way you solve things in",
    "start": "1979320",
    "end": "1984720"
  },
  {
    "text": "imperative objectory languages functional languages are not after that functional languages take a",
    "start": "1984720",
    "end": "1990919"
  },
  {
    "text": "different approach to this what functional languages have done is taken a few data structures remember I said",
    "start": "1990919",
    "end": "1996840"
  },
  {
    "text": "that functional languages prefer a a small number of data structures and a lot of operations on them what they do",
    "start": "1996840",
    "end": "2002720"
  },
  {
    "text": "is build Machinery that understands those few core data structures and what you're expecting to do is take data plus",
    "start": "2002720",
    "end": "2009880"
  },
  {
    "text": "customization in the form of a higher order function and pass into this machinery and have it work on that and",
    "start": "2009880",
    "end": "2018120"
  },
  {
    "text": "do Transformations for you this is an example of what I call coar grain Machinery to get stuff",
    "start": "2018120",
    "end": "2024679"
  },
  {
    "text": "done so what they've done is taken really common abstractions for things that you do for things like lists and",
    "start": "2024679",
    "end": "2030639"
  },
  {
    "text": "maps and uh written generic versions of operations on them so for example if you",
    "start": "2030639",
    "end": "2036279"
  },
  {
    "text": "have something like a list one of the operations that you might want to do on that list is say I want to be able to uh",
    "start": "2036279",
    "end": "2043399"
  },
  {
    "text": "convert this list into a single element so let's say for example I wanted to sum this list one of the ways to sum this",
    "start": "2043399",
    "end": "2050040"
  },
  {
    "text": "list is to say take the first element add the second element on to it and make that the the new first element and then",
    "start": "2050040",
    "end": "2055638"
  },
  {
    "text": "do the same again over and over and uh if the operation you're using to do that is plus then what you're left with is",
    "start": "2055639",
    "end": "2062079"
  },
  {
    "text": "the sum of that list that's known as a fold or reduce in the functional programming world you're reducing that",
    "start": "2062079",
    "end": "2068599"
  },
  {
    "text": "down or folding it down to a single value another one of these uh Transformations common Transformations",
    "start": "2068599",
    "end": "2073679"
  },
  {
    "text": "is take a list and return me a subset of that list which is a filtering operation another one of these",
    "start": "2073679",
    "end": "2079679"
  },
  {
    "text": "operations is take some existing list that has values in it and then map a function onto each one of those yielding",
    "start": "2079679",
    "end": "2086118"
  },
  {
    "text": "a brand new uh uh list of items these are really common things",
    "start": "2086119",
    "end": "2092118"
  },
  {
    "text": "that pop up all the time um and of course they have uh optimized versions of these inclosure",
    "start": "2092119",
    "end": "2099640"
  },
  {
    "text": "this will also change the structure of your codes I want to do another one of these transformation exercises and this one's actually a little more",
    "start": "2101200",
    "end": "2106640"
  },
  {
    "text": "sophisticated this is Apache common index of any what this is supposed to do",
    "start": "2106640",
    "end": "2111960"
  },
  {
    "text": "is you give this um a a string and some characters and it will tell you the",
    "start": "2111960",
    "end": "2118320"
  },
  {
    "text": "beginning index of where those characters start so for example here B and Y looks like B is in the three",
    "start": "2118320",
    "end": "2125000"
  },
  {
    "text": "position so that's the first one of the two that show up it's in the third position so that's what this thing is supposed to do and here's the",
    "start": "2125000",
    "end": "2131240"
  },
  {
    "text": "implementation for it and so let's collapse this down to",
    "start": "2131240",
    "end": "2137040"
  },
  {
    "text": "lisp first thing we'll do is simplify the corner cases the corner cases up at the top or the is empty uh both those",
    "start": "2137040",
    "end": "2143680"
  },
  {
    "text": "empties actually uh are handled by my whenn or will be handled by my list comprehension in a second so we can get",
    "start": "2143680",
    "end": "2149640"
  },
  {
    "text": "rid of the edge cases we can also now strip out all the type information because we're not uh we don't need type",
    "start": "2149640",
    "end": "2155480"
  },
  {
    "text": "declarations anymore we will now come in and replace that for",
    "start": "2155480",
    "end": "2160920"
  },
  {
    "text": "Loop uh the internal for loop with a when Clause that basically says when you find one of these search characters and",
    "start": "2160920",
    "end": "2167200"
  },
  {
    "text": "just return it now I'm going to add a list",
    "start": "2167200",
    "end": "2173359"
  },
  {
    "text": "comprehension to get rid of this for Loop now I'm going to replace it with something that says four uh which is",
    "start": "2173359",
    "end": "2178800"
  },
  {
    "text": "just poorly named in my opinion because it's not a for loop it's actually a list comprehension which is kind of a Swiss",
    "start": "2178800",
    "end": "2184280"
  },
  {
    "text": "Army chainsaw of doing things with lists what you can do with a list comprehension is basically say for a",
    "start": "2184280",
    "end": "2191640"
  },
  {
    "text": "collection here's an input format and some values and and what you want it to",
    "start": "2191640",
    "end": "2196680"
  },
  {
    "text": "return and so I'm going to say for each index and character and index then in my index string then return um the index",
    "start": "2196680",
    "end": "2204160"
  },
  {
    "text": "when I find that character and now I'll listify this guy this is now index filter it takes in",
    "start": "2204160",
    "end": "2211680"
  },
  {
    "text": "a predicate and a collection the predicate is a higher order function that tells how to decide if it's in the collection or not when that predicate is",
    "start": "2211680",
    "end": "2218280"
  },
  {
    "text": "true then it's going to look at each index and element in the index collection and when that element is true",
    "start": "2218280",
    "end": "2223880"
  },
  {
    "text": "it's going to return that index but now that we've done that give",
    "start": "2223880",
    "end": "2229160"
  },
  {
    "text": "me a minute okay sorry oh you can't read list code that",
    "start": "2229160",
    "end": "2235200"
  },
  {
    "text": "fast yet that's shocking the list comprehension is the trickiest thing here basically what",
    "start": "2235200",
    "end": "2240839"
  },
  {
    "text": "that's saying is what I want is an input pattern is an index and an element and uh the collection I'm doing this for is",
    "start": "2240839",
    "end": "2247200"
  },
  {
    "text": "in the index collection uh when is a flag you can put when or if or if not or",
    "start": "2247200",
    "end": "2252839"
  },
  {
    "text": "some of those things to determine when those things end up getting filtered in or not and then the return value that",
    "start": "2252839",
    "end": "2258440"
  },
  {
    "text": "you ultimately want of those thing is the",
    "start": "2258440",
    "end": "2261640"
  },
  {
    "text": "index this is actually doing a filtering for me this is doing a filtering operation when this is basically a",
    "start": "2265880",
    "end": "2271200"
  },
  {
    "text": "predicate that says when this is true then I want that to to execute so it's not it's not actually a",
    "start": "2271200",
    "end": "2277200"
  },
  {
    "text": "for loop at all it's a list comprehension it's basically a way to apply a bunch of logic to a list in in",
    "start": "2277200",
    "end": "2282960"
  },
  {
    "text": "in bits and pieces but now that we've got that which",
    "start": "2282960",
    "end": "2288240"
  },
  {
    "text": "version is simpler the imperative version has 18 moving Parts the functional closure version has four",
    "start": "2288240",
    "end": "2294319"
  },
  {
    "text": "moving parts so the closure version is actually simpler in terms of amount of code and number of characters and yet",
    "start": "2294319",
    "end": "2301079"
  },
  {
    "text": "it's more General the Java version only works on strings this works on any",
    "start": "2301079",
    "end": "2306119"
  },
  {
    "text": "sequence so if I want to say index filter give me the number of heads out of a string of head and tail flips it",
    "start": "2306119",
    "end": "2312280"
  },
  {
    "text": "looks like the heads all show up at 2 48 and N here I'm saying is give me the first Fibonacci number that's greater",
    "start": "2312280",
    "end": "2319400"
  },
  {
    "text": "than a thousand so give me the root of the first Fibonacci number that's greater than a th turns out it's 17 17",
    "start": "2319400",
    "end": "2326480"
  },
  {
    "text": "is uh comes out Fibonacci of 17 is a little over a th so the imperative",
    "start": "2326480",
    "end": "2332720"
  },
  {
    "text": "version searches only strings whereas the functional version searches any sequence",
    "start": "2332720",
    "end": "2339040"
  },
  {
    "text": "imperative version matches only characters whereas the functional version matches any predicate you pass the predicate function in to determine",
    "start": "2339040",
    "end": "2345520"
  },
  {
    "text": "what it what the match criteria is the imperative version returns only the first match the functional version",
    "start": "2345520",
    "end": "2351040"
  },
  {
    "text": "returns a lazy sequences of all the matches so that's another thing you get from most of the sequences en closures",
    "start": "2351040",
    "end": "2357480"
  },
  {
    "text": "they're all lazy meaning that they evaluate the first element and then don't evaluate the rest of them till you",
    "start": "2357480",
    "end": "2363040"
  },
  {
    "text": "ask for them so it's as efficient as possible it it generates as as few values as it needs to but then you can",
    "start": "2363040",
    "end": "2369040"
  },
  {
    "text": "ask for more and it'll lazily generate those values for you as you need them and so here for my um my index what I'm",
    "start": "2369040",
    "end": "2376319"
  },
  {
    "text": "doing here is saying well give me the first one but then I can say okay well give me the next one and the next one and the next one so it's actually uh",
    "start": "2376319",
    "end": "2383400"
  },
  {
    "text": "more General and more powerful than the imperative version and this is true in a lot of uh functional code and",
    "start": "2383400",
    "end": "2389440"
  },
  {
    "text": "particularly in the closure world you really want to get to General solutions to things and having Dynamic typing and",
    "start": "2389440",
    "end": "2396000"
  },
  {
    "text": "higher order functions allows you to do that so before we get too deep into this",
    "start": "2396000",
    "end": "2403319"
  },
  {
    "text": "let's start talking about State and concurrency because that's one of the reasons you came here is because you heard closure had this really wicked",
    "start": "2403319",
    "end": "2409319"
  },
  {
    "text": "cool stuff around concurrency and it's true it does uh but let's talk about data structure for a second in the",
    "start": "2409319",
    "end": "2415240"
  },
  {
    "text": "closure World data structures in the closure world are",
    "start": "2415240",
    "end": "2420520"
  },
  {
    "text": "immutable which may make you frightened for performance because you're used to a language like Java where immutability is",
    "start": "2420520",
    "end": "2426920"
  },
  {
    "text": "a second or third class citizen at best so in Java if you have something like a mutable data structure and uh you want",
    "start": "2426920",
    "end": "2434040"
  },
  {
    "text": "to change it you have to create a brand new immutable data structure with all the same values and then a few separate",
    "start": "2434040",
    "end": "2439319"
  },
  {
    "text": "values but that's not true here because if you can assume everything's immutable you can share the common parts of those",
    "start": "2439319",
    "end": "2445400"
  },
  {
    "text": "data structures when you create new ones everything in uh closure is immutable you change things by applying",
    "start": "2445400",
    "end": "2452480"
  },
  {
    "text": "a function to it to to uh uh to Move It from one state to another all of the uh",
    "start": "2452480",
    "end": "2458760"
  },
  {
    "text": "persistent data structures maintain performance guarantees and closure so they're all very um uh very high",
    "start": "2458760",
    "end": "2465160"
  },
  {
    "text": "performance you also get full Fidelity old versions closure never deletes",
    "start": "2465160",
    "end": "2470240"
  },
  {
    "text": "anything because everything's immutable you can't delete things if they're immutable and so closure doesn't delete",
    "start": "2470240",
    "end": "2476680"
  },
  {
    "text": "things so how would that work with a link list so if I have my list and you",
    "start": "2476680",
    "end": "2481720"
  },
  {
    "text": "have your list and they happen to share some common terms this is perfectly okay because neither one of us can change any",
    "start": "2481720",
    "end": "2487880"
  },
  {
    "text": "of the things we point to It's Perfectly safe to share this data structure if you can assume that every one of these",
    "start": "2487880",
    "end": "2493160"
  },
  {
    "text": "elements is immutable and can never be changed or deleted so that works perfectly great with list what about more complex things",
    "start": "2493160",
    "end": "2500040"
  },
  {
    "text": "like trees you can do the exact same things with trees in fact there's some really deep computer science enclosure",
    "start": "2500040",
    "end": "2506079"
  },
  {
    "text": "based on some studies of red black balanced trees that's how this is implemented underneath so if you have",
    "start": "2506079",
    "end": "2511839"
  },
  {
    "text": "your part of a tree and there's another part of a tree you can actually share a lot of that data structure because all",
    "start": "2511839",
    "end": "2517040"
  },
  {
    "text": "of values are immutable this is an example of bit partition tries uh this is an example of um of doing two bit",
    "start": "2517040",
    "end": "2525280"
  },
  {
    "text": "partition tries which is too slow for practical purposes what closure actually implements underneath is a 32bit red",
    "start": "2525280",
    "end": "2531920"
  },
  {
    "text": "black balance tree uh to store all these data structures and log 32 is fast",
    "start": "2531920",
    "end": "2537319"
  },
  {
    "text": "enough that basically means that you get to results really fast because it's a really flat data structure rather than a",
    "start": "2537319",
    "end": "2543119"
  },
  {
    "text": "really deep data structure so that's the trade-off is flat versus deep this is all details you never have to car",
    "start": "2543119",
    "end": "2548480"
  },
  {
    "text": "anything about this but this is how he can maintain performance guarantees and have immutable data structures",
    "start": "2548480",
    "end": "2553920"
  },
  {
    "text": "internally as well he's determined that log 32n is fast enough to be able to",
    "start": "2553920",
    "end": "2558960"
  },
  {
    "text": "find things uh as you uh Traverse through this tree the other interesting thing that",
    "start": "2558960",
    "end": "2565359"
  },
  {
    "text": "closure has done around state is identified what makes concurrency so",
    "start": "2565359",
    "end": "2571559"
  },
  {
    "text": "hard in Java it's actually surprising the the core the root of the problem",
    "start": "2571559",
    "end": "2577800"
  },
  {
    "text": "if you go all the way down and find the criminal that makes threading so hard in Java it's",
    "start": "2577800",
    "end": "2584680"
  },
  {
    "text": "variables because when they created variables in Java they weren't thinking about concurrency and multi-threaded",
    "start": "2584680",
    "end": "2591000"
  },
  {
    "text": "situations they were always thinking about this variable owns this for all of",
    "start": "2591000",
    "end": "2596599"
  },
  {
    "text": "time and nobody else uh will ever interfere with this value the problem is",
    "start": "2596599",
    "end": "2602559"
  },
  {
    "text": "it's convoluting several different important Concepts basically this idea of identity and State because a variable",
    "start": "2602559",
    "end": "2609119"
  },
  {
    "text": "in Java holds on to the identity and whatever value happens to be there as well and it's hard to predict when",
    "start": "2609119",
    "end": "2615240"
  },
  {
    "text": "that's going to to change and it's hard to logic about that over time what closure has done is said you",
    "start": "2615240",
    "end": "2622160"
  },
  {
    "text": "know what we can fix this so what closure has done is says everything is",
    "start": "2622160",
    "end": "2627839"
  },
  {
    "text": "immutable save one thing there's one thing in closure that you can mutate and it's a reference so you can have a",
    "start": "2627839",
    "end": "2634640"
  },
  {
    "text": "variable that points to a reference that is its identity that reference is",
    "start": "2634640",
    "end": "2640720"
  },
  {
    "text": "it identity and at some point in time it points to some value at some snapshot in",
    "start": "2640720",
    "end": "2646480"
  },
  {
    "text": "time that is its state the identity's value at a point in time is its",
    "start": "2646480",
    "end": "2652359"
  },
  {
    "text": "state but what closure has done is said you know what if I can take over that if",
    "start": "2652359",
    "end": "2658359"
  },
  {
    "text": "you'll let closure manage that for you then closure can manage all of threading for you this is the core this is the the",
    "start": "2658359",
    "end": "2666200"
  },
  {
    "text": "the the central place where if you'll let closure handle assignment for you",
    "start": "2666200",
    "end": "2671720"
  },
  {
    "text": "using its functions that it'll handle all concurrency issues for you that's the way that this works so what they've",
    "start": "2671720",
    "end": "2678559"
  },
  {
    "text": "done is kind of Rema the idea of variables a value is an immutable data in some persistent data structure",
    "start": "2678559",
    "end": "2684599"
  },
  {
    "text": "somewhere identity is a series of causally related values over time state",
    "start": "2684599",
    "end": "2690160"
  },
  {
    "text": "is identity at some point in time and time is relative it's before it's",
    "start": "2690160",
    "end": "2695200"
  },
  {
    "text": "simultaneous it's after but ultimately and this is a campaign that Rich has been on we've got to start adding time",
    "start": "2695200",
    "end": "2702079"
  },
  {
    "text": "awareness into our code we just we can't ignore time anymore because if you talk",
    "start": "2702079",
    "end": "2708000"
  },
  {
    "text": "about some value it's meaningless unless you talk about when that value is is",
    "start": "2708000",
    "end": "2713319"
  },
  {
    "text": "applicable because values identities change over time they point to different values over time and so you have to know",
    "start": "2713319",
    "end": "2719599"
  },
  {
    "text": "the time to know what value that identity has and that's what he's really",
    "start": "2719599",
    "end": "2725599"
  },
  {
    "text": "done is created explicit sem Antics around that enclosure and so what happens enclosure is identity is a",
    "start": "2725599",
    "end": "2732160"
  },
  {
    "text": "succession of States you move from one state to the other you you change from one state to another by applying a m a",
    "start": "2732160",
    "end": "2738240"
  },
  {
    "text": "mutating function that moves the reference from one value to another value doesn't change the identity it just moves what it it points to from one",
    "start": "2738240",
    "end": "2744520"
  },
  {
    "text": "place to another um then at any point in time observers or perception memory can",
    "start": "2744520",
    "end": "2749599"
  },
  {
    "text": "look at the state of that thing which is the identity and the value at this point in time and and see what it is",
    "start": "2749599",
    "end": "2757559"
  },
  {
    "text": "so this is this this idea of a unified update model so what you do is you have a function that changes the state from a",
    "start": "2759000",
    "end": "2765599"
  },
  {
    "text": "reference using that uh Anonymous function uh for its value uh snapshots",
    "start": "2765599",
    "end": "2772000"
  },
  {
    "text": "are always available no user locking and no Deadlocks writers never impede readers never a deadlock never a",
    "start": "2772000",
    "end": "2778920"
  },
  {
    "text": "concurrency problem never a collision in fact you can also with software transactional memory say I want all four",
    "start": "2778920",
    "end": "2785640"
  },
  {
    "text": "of these V variables to get mutated or none of them but you can't do it all in Java now there's no transactional",
    "start": "2785640",
    "end": "2791160"
  },
  {
    "text": "semantics around variables at all but there is enclosure and that's really software transaction memory which is the",
    "start": "2791160",
    "end": "2797359"
  },
  {
    "text": "next thing I'm going to talk about because in software transaction memory what happens is moving that pointer from",
    "start": "2797359",
    "end": "2803200"
  },
  {
    "text": "a reference to reference one value to another closure does that within a transaction which means it can do many",
    "start": "2803200",
    "end": "2809280"
  },
  {
    "text": "variables if you want within the same transaction because it's managing all that that's exactly what this image is",
    "start": "2809280",
    "end": "2814760"
  },
  {
    "text": "showing is that you can actually tie several variables together and have them work in lock step closure will go back",
    "start": "2814760",
    "end": "2820200"
  },
  {
    "text": "and retry things that it can't achieve you can set retry limits and other kinds of things just like a transaction engine",
    "start": "2820200",
    "end": "2825800"
  },
  {
    "text": "wood this is the Syntax for doing this and the syntax is actually kind of anticlimactic because it's just pretty",
    "start": "2825800",
    "end": "2831480"
  },
  {
    "text": "simple and straightforward so here I'm defining messages which is a variable",
    "start": "2831480",
    "end": "2837040"
  },
  {
    "text": "that points to a ref and that ref is currently empty it's pointing to an empty list so I now have messages which",
    "start": "2837040",
    "end": "2843440"
  },
  {
    "text": "points to an empty list if I want to find out what's in messages at any point in time I can call the DF function on",
    "start": "2843440",
    "end": "2849720"
  },
  {
    "text": "messages and see what's in there this is such a common operation there's a special syntactic sugar if you just put",
    "start": "2849720",
    "end": "2855720"
  },
  {
    "text": "at messages in front of it it will dreference that message for you so let's talk about altering a",
    "start": "2855720",
    "end": "2862440"
  },
  {
    "text": "message uh you can use the alter function like this where I have a reference and an update function what that's going to do is take the old value",
    "start": "2862440",
    "end": "2869359"
  },
  {
    "text": "and then use that apply method to uh update that to the new value so this is what that looks like let's say you want",
    "start": "2869359",
    "end": "2875520"
  },
  {
    "text": "to update a message you you had a messaging application or something like that here's a a defined function add",
    "start": "2875520",
    "end": "2880960"
  },
  {
    "text": "message taking a new message and what I'm going to do is Alter messages that's",
    "start": "2880960",
    "end": "2886079"
  },
  {
    "text": "my reference to my list con join this message onto the end of it so add",
    "start": "2886079",
    "end": "2891480"
  },
  {
    "text": "another message onto the end of my list but you'll notice do sync right here if do sync is not there closure",
    "start": "2891480",
    "end": "2899520"
  },
  {
    "text": "won't execute this code you'll get a runtime error saying you're trying to mutate something outside a transaction",
    "start": "2899520",
    "end": "2905359"
  },
  {
    "text": "and I won't let you you have to have do sync there that's what kicks off the transaction but that's it now you got",
    "start": "2905359",
    "end": "2911839"
  },
  {
    "text": "software transactional memory questions about that it's a",
    "start": "2911839",
    "end": "2919200"
  },
  {
    "text": "really simple mechanism when you see it the the underlying implementation details are horrifically complex but you",
    "start": "2919200",
    "end": "2925040"
  },
  {
    "text": "never see that just like the garbage collection algorithms in Java are horrifically complex and you never see that either because you're working at a",
    "start": "2925040",
    "end": "2931400"
  },
  {
    "text": "higher level of abstraction that's aage it's a runtime message yep",
    "start": "2931400",
    "end": "2938720"
  },
  {
    "text": "you get everything but D so you get Atomic consistent isolated but no D because it's memory but you do get of",
    "start": "2941040",
    "end": "2948040"
  },
  {
    "text": "the four transaction characteristics acid Atomic consistent isolated and durable you get all but durable because",
    "start": "2948040",
    "end": "2953640"
  },
  {
    "text": "it's all happening in memory but it is a completely uh acid except for the D in",
    "start": "2953640",
    "end": "2960359"
  },
  {
    "text": "memory very super powerful mechanism uh inclosure",
    "start": "2960359",
    "end": "2965480"
  },
  {
    "text": "world so so let's look for a little bit about what data looks like in the closure world because closure really",
    "start": "2965480",
    "end": "2970720"
  },
  {
    "text": "likes things that are in maps and really very lightweight data structures but you can map back and forth between this",
    "start": "2970720",
    "end": "2977760"
  },
  {
    "text": "world and the Java world so let's say for example I wanted something looked like a class the data parts of a class",
    "start": "2977760",
    "end": "2984240"
  },
  {
    "text": "uh this is basically creates a name type with slots so I can now have a a Define a foo and construct a new F Fu object",
    "start": "2984240",
    "end": "2991760"
  },
  {
    "text": "there with a positional Constructor I can now if I want to get values out of F I can just use the",
    "start": "2991760",
    "end": "2999359"
  },
  {
    "text": "keyword against the data structure and it'll return the value this is true in maps as well I can also ask it what",
    "start": "2999359",
    "end": "3006680"
  },
  {
    "text": "class you are and it'll tell me what class it is I can also ask it what it super classes are and here are a bunch",
    "start": "3006680",
    "end": "3011920"
  },
  {
    "text": "of things that rich is automatically added to things classes you create enclosure to make it much easier to deal with like persistent Collections and",
    "start": "3011920",
    "end": "3018760"
  },
  {
    "text": "other things like that but you can also do this in maps and this is a a kind of a more typical",
    "start": "3018760",
    "end": "3024240"
  },
  {
    "text": "way to do this in the list world so here for example is some information about Stu hallay who wrote the one of the",
    "start": "3024240",
    "end": "3029520"
  },
  {
    "text": "first the very first closure book where I'm creating this map that's a basically nested structure what does this look a",
    "start": "3029520",
    "end": "3035359"
  },
  {
    "text": "lot like Jon looks a lot like Json doesn't it this is a really powerful",
    "start": "3035359",
    "end": "3040640"
  },
  {
    "text": "transport mechanism back and forth particularly if you have closure and closure script on on either side because you're actually passing real code back",
    "start": "3040640",
    "end": "3047960"
  },
  {
    "text": "and forth without having to serialize and deserialize into Json it's the real data structure which is kind of nice but",
    "start": "3047960",
    "end": "3053880"
  },
  {
    "text": "it's easy to M between this and something like Json uh you can get keyword access so if I",
    "start": "3053880",
    "end": "3059359"
  },
  {
    "text": "have stew I can say give me the last name of Stew a keyword becomes a function on the collection which is just",
    "start": "3059359",
    "end": "3065960"
  },
  {
    "text": "syntactic sugar in the closure world I can also get nested access with this uh the syntactic sugar little arrow guy",
    "start": "3065960",
    "end": "3072960"
  },
  {
    "text": "here that says give me stew address City so that's actually digging into this",
    "start": "3072960",
    "end": "3078280"
  },
  {
    "text": "collection if I want to do an update here I can say do an update for stew and",
    "start": "3078280",
    "end": "3084119"
  },
  {
    "text": "create a new give him a a new uh first name steuart instead of St when I do this update notice I'm not doing this in",
    "start": "3084119",
    "end": "3091400"
  },
  {
    "text": "a transaction what it's doing is returning me a new data structure so it is this is immutable just like you'd",
    "start": "3091400",
    "end": "3096440"
  },
  {
    "text": "expect immutable it's sharing all the common parts but it is returning a brand new data structure and the old one is",
    "start": "3096440",
    "end": "3102160"
  },
  {
    "text": "still there because nothing ever goes away and you can also do uh nested uh uh",
    "start": "3102160",
    "end": "3108680"
  },
  {
    "text": "updates as well if you want but you can do the exact same thing on top of Records if you want which are basically",
    "start": "3108680",
    "end": "3114440"
  },
  {
    "text": "classes so here's the same thing constru Ed in an object-oriented fashion but",
    "start": "3114440",
    "end": "3119559"
  },
  {
    "text": "even if you have this object structure you can still use the same keyword access to get things out of maps you can",
    "start": "3119559",
    "end": "3124960"
  },
  {
    "text": "still use the same nested access thing to get things out of uh deeply uh held Collections and you can also do uh the",
    "start": "3124960",
    "end": "3132240"
  },
  {
    "text": "update the exact same way you did it before this is part of this easy mapping between Java and closure closure likes",
    "start": "3132240",
    "end": "3139119"
  },
  {
    "text": "Maps Java likes classes you know what we'll just map them back and forth between each other and let them very",
    "start": "3139119",
    "end": "3144400"
  },
  {
    "text": "seamlessly move back and forth",
    "start": "3144400",
    "end": "3148480"
  },
  {
    "text": "yep so you can't add methods to it well actually you can in here uh but you're actually then creating a class so you",
    "start": "3152440",
    "end": "3158440"
  },
  {
    "text": "create a new class you create a bunch of functions that are associated with that class but that's actually pretty rare thing because you're not really create",
    "start": "3158440",
    "end": "3164960"
  },
  {
    "text": "the only reason you do that is to pass that back over to Java because it wanted a class for something and you could actually build it as a map and then as",
    "start": "3164960",
    "end": "3170680"
  },
  {
    "text": "you pass it it'll it'll uh coer it into a class but you're right there there are no methods on this this is just the part",
    "start": "3170680",
    "end": "3176880"
  },
  {
    "text": "of it so closure is a very is a functional",
    "start": "3176880",
    "end": "3183160"
  },
  {
    "text": "function based language everything is function so the idea in closure is uh you have a collection of functions you",
    "start": "3183160",
    "end": "3188520"
  },
  {
    "text": "can also have namespaces so you can think of a namespace almost like a package there's a named collection of functions within the namespace you can",
    "start": "3188520",
    "end": "3195599"
  },
  {
    "text": "actually have functions that are private to that namespace if you do defin minus it's private just to that name space you",
    "start": "3195599",
    "end": "3201559"
  },
  {
    "text": "can also have this thing called a protocol which is very much like an interface so the IDE en closure is",
    "start": "3201559",
    "end": "3206839"
  },
  {
    "text": "instead of doing classes what you do is Define a name space that has a protocol in it that defines the semantics of how",
    "start": "3206839",
    "end": "3213599"
  },
  {
    "text": "you're going to call functions that's actually implemented by functions underneath inside that namespace and so",
    "start": "3213599",
    "end": "3218720"
  },
  {
    "text": "you have these kind of coarse grain collections of functions that are names spaced that you can U execute and do",
    "start": "3218720",
    "end": "3224880"
  },
  {
    "text": "things with that's the the the way a closure program looks like that's the structure of closure code it's kind of like",
    "start": "3224880",
    "end": "3231720"
  },
  {
    "text": "packages classes and methods in Java except that we just eliminate the classes part and and you pass pass around data as parameters instead of",
    "start": "3231720",
    "end": "3239319"
  },
  {
    "text": "being passed around as party",
    "start": "3239319",
    "end": "3242359"
  },
  {
    "text": "object so what's cool about closure it's a really highly expressive language once",
    "start": "3244440",
    "end": "3250040"
  },
  {
    "text": "you get used to learn to reading lisp and it doesn't take that long in fact if you want a a fun way to kind of get",
    "start": "3250040",
    "end": "3256799"
  },
  {
    "text": "hooked on writing closure code go and download the closure cones it's K ANS a",
    "start": "3256799",
    "end": "3264240"
  },
  {
    "text": "lot of languages have these cones now which are these Zen puzzles that basically are just ways to exercise syntax so if you download the the",
    "start": "3264240",
    "end": "3271599"
  },
  {
    "text": "closure cones you run it and it'll give you a little puzzle and you fill in with with the code to make it work and then",
    "start": "3271599",
    "end": "3277599"
  },
  {
    "text": "it'll run it'll automatically pick that up and then give you the next one so this is the closure equivalent of potato",
    "start": "3277599",
    "end": "3282799"
  },
  {
    "text": "chips because you start doing this like okay just one more okay I'll just do one oh I can get that one to work one more",
    "start": "3282799",
    "end": "3287920"
  },
  {
    "text": "and then before you know it it's 2 am and you've eaten a whole bag of closure really super uh expressive",
    "start": "3287920",
    "end": "3295359"
  },
  {
    "text": "language once you get used to reading syntax and it really doesn't take much time at all uh really good seamless Java",
    "start": "3295359",
    "end": "3301680"
  },
  {
    "text": "interop that's one of the the goals of closures really really good Java interop uh heavily functional of course uh and a",
    "start": "3301680",
    "end": "3309000"
  },
  {
    "text": "really Advanced concurrency story uh the other thing that I would point you to as a a kind of a mindbending exercise is uh",
    "start": "3309000",
    "end": "3317400"
  },
  {
    "text": "so rich hickey is the guy who created closure he's here wonderr he's doing keynote tomorrow uh the the project the",
    "start": "3317400",
    "end": "3323000"
  },
  {
    "text": "Big Top Secret project he's been working on for like two years is this thing called datomic which is an atomic with a",
    "start": "3323000",
    "end": "3329119"
  },
  {
    "text": "du in front of it datomic is an immutable database think about that for a second",
    "start": "3329119",
    "end": "3337039"
  },
  {
    "text": "uh it uses all this closure stuff in software transaction memory but when you put stuff in datomic it doesn't go",
    "start": "3337039",
    "end": "3342799"
  },
  {
    "text": "away which May Scare You because it's like well then it's just going to grow forever but I've got a question for you",
    "start": "3342799",
    "end": "3348599"
  },
  {
    "text": "how many times is the Number Nine appear in your relational database that's a stupid waste of space",
    "start": "3348599",
    "end": "3354799"
  },
  {
    "text": "when you could just store one nine and then have every nine that needs it point to it because nine never changes",
    "start": "3354799",
    "end": "3360799"
  },
  {
    "text": "Nine's a fact so that's how datomic can store basically an infinite amount of information and never throw anything",
    "start": "3360799",
    "end": "3366640"
  },
  {
    "text": "away because it's immutable and you can rely on immutability to do this so but thinking about that so in datomic schema",
    "start": "3366640",
    "end": "3374720"
  },
  {
    "text": "and data use the same syntax so one of the really nasty problems in the",
    "start": "3374720",
    "end": "3380520"
  },
  {
    "text": "continuous delivery world is let's say you got your code and you got this database schema and now you want to roll",
    "start": "3380520",
    "end": "3386079"
  },
  {
    "text": "back back to a previous version of your database schema we have all these migrations and other crazy mechanism do",
    "start": "3386079",
    "end": "3391240"
  },
  {
    "text": "that in datomic you just point it to an older version of the database because every version that's ever been is still",
    "start": "3391240",
    "end": "3397359"
  },
  {
    "text": "there there's no migrating back and forth It's just there it's just it's always been there it will always be",
    "start": "3397359",
    "end": "3404240"
  },
  {
    "text": "there that's the point now you're going to have to start answering this question at your company why when you're using",
    "start": "3404240",
    "end": "3410119"
  },
  {
    "text": "that relational database are you destroying valuable company data every",
    "start": "3410119",
    "end": "3415160"
  },
  {
    "text": "time you're doing a destructive update the reason you're doing that is because hard drive space is really expensive and",
    "start": "3415160",
    "end": "3421599"
  },
  {
    "text": "really critical resource and we want to do as much as we can to maximize that oh wait a minute that's not true at all a lot of",
    "start": "3421599",
    "end": "3428799"
  },
  {
    "text": "our architectural assumptions are based on 20-year-old ideas like we need to maximize storage space as much as",
    "start": "3428799",
    "end": "3434640"
  },
  {
    "text": "possible so reuse that space well that's a dumb idea now when we have as much space as we want and there's huge value",
    "start": "3434640",
    "end": "3441520"
  },
  {
    "text": "to keeping that historical data that's happening uh in that database so that's a good example of the kind of radical",
    "start": "3441520",
    "end": "3448359"
  },
  {
    "text": "rethinking that becomes possible when you have a language that has really really Advanced capabilities and uh has",
    "start": "3448359",
    "end": "3454480"
  },
  {
    "text": "some really core key changes implemented down at the very bottom once you listen",
    "start": "3454480",
    "end": "3460359"
  },
  {
    "text": "to Rich talk a lot you realize that closure is not so much a programming language as a vision for how to write",
    "start": "3460359",
    "end": "3466559"
  },
  {
    "text": "software that you could only Implement by writing a new programming language called closure that's exactly what closure",
    "start": "3466559",
    "end": "3472400"
  },
  {
    "text": "is so I'm out of time actually 5 minutes over I apologize for that if you got other questions I'll be happy to answer",
    "start": "3472400",
    "end": "3477839"
  },
  {
    "text": "them and of course rich is here he's the source of all knowledge in this universe you can chase him down and congratulate",
    "start": "3477839",
    "end": "3483000"
  },
  {
    "text": "him on closure and ask him some questions as well uh thanks very much for coming and hope you enjoyed it",
    "start": "3483000",
    "end": "3490039"
  },
  {
    "text": "[Music]",
    "start": "3491790",
    "end": "3500249"
  }
]