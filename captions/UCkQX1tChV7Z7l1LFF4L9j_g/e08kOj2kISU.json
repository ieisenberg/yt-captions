[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music]",
    "start": "320",
    "end": "25400"
  },
  {
    "text": "the uh structure of tonight's presentation is pretty straightforward I'm going to talk about the problem that we had",
    "start": "25400",
    "end": "31000"
  },
  {
    "text": "the algorithm that was chosen to solve the uh to implement the solution but it ran too slowly and then two different",
    "start": "31000",
    "end": "37680"
  },
  {
    "text": "sets of solutions the first set we did in 2011 the second set in 2012 I say we mostly because I have",
    "start": "37680",
    "end": "45079"
  },
  {
    "text": "tapeworm hey it's a transparent Universe now you can't hide anything my doctor is pretty upset because I'm the only",
    "start": "46879",
    "end": "52600"
  },
  {
    "text": "medical record in his office Still on paper everything else is computerized now I said I know how this works keep me on paper uh then we'll talk about future",
    "start": "52600",
    "end": "59519"
  },
  {
    "text": "steps more things we could uh do to speed up the program and the second half of this presentation is going to be Lessons Learned I always think it's",
    "start": "59519",
    "end": "65518"
  },
  {
    "text": "worthwhile to spend a few minutes and learn from your mistakes so you can make them again the problem that we're faced with",
    "start": "65519",
    "end": "72640"
  },
  {
    "start": "67000",
    "end": "143000"
  },
  {
    "text": "is a fairly straightforward a common problem in these sorts of Enterprises we sell as I said games we",
    "start": "72640",
    "end": "79080"
  },
  {
    "text": "don't really sell them we mostly give them away for free and our games are very fun we have a huge pile of people at our company who know how to make",
    "start": "79080",
    "end": "85479"
  },
  {
    "text": "things that are fun we're an entertainment firm it's what we do internally we have a different definition of fun than just fun we have",
    "start": "85479",
    "end": "91560"
  },
  {
    "text": "a whole bunch of key performance indicators that tell us how fun the game is and we tweak them to make the game more and more fun or we measure them as",
    "start": "91560",
    "end": "97960"
  },
  {
    "text": "we tweak the game to make it more fun to figure out how to tweak the games we ask hundreds of questions across all of our",
    "start": "97960",
    "end": "104320"
  },
  {
    "text": "games and to get the small signal from a large amount of Noise We have to collect huge amounts of data the data is",
    "start": "104320",
    "end": "109799"
  },
  {
    "text": "collected from our servers on how our guests are playing the games we don't collect any uh invasive data on the",
    "start": "109799",
    "end": "115439"
  },
  {
    "text": "user's computer we just collect data on the server end",
    "start": "115439",
    "end": "121479"
  },
  {
    "text": "for each of these hundreds of questions we're going to take all of this giant data set we have and create 500",
    "start": "121479",
    "end": "127039"
  },
  {
    "text": "synthetic variations of that data and then do a particular computation that I still don't",
    "start": "127039",
    "end": "132040"
  },
  {
    "text": "understand and the result of that is the uh the answer to the question we have hundreds of millions of rows so this is",
    "start": "132040",
    "end": "138319"
  },
  {
    "text": "a classic big data problem I feel a little bit goofy using the word classic to describe something that's only a couple years old the concept of big data",
    "start": "138319",
    "end": "145280"
  },
  {
    "start": "143000",
    "end": "180000"
  },
  {
    "text": "but technology moves quickly beginning of last year we had a prototype written by our chief analyst",
    "start": "145280",
    "end": "151000"
  },
  {
    "text": "who is very good with Statistics not so great with programming that's okay I can't do the Analyst job either when I learned statistics in college we were",
    "start": "151000",
    "end": "157239"
  },
  {
    "text": "using Roman numerals try doing square roots in Roman numerals the best language for that by",
    "start": "157239",
    "end": "163159"
  },
  {
    "text": "the way is intercal if you haven't played with intercal this is a great time to learn it kind",
    "start": "163159",
    "end": "169360"
  },
  {
    "text": "of so the program worked correctly but for just a subset of the processing it took far longer than the batch window we",
    "start": "169360",
    "end": "174920"
  },
  {
    "text": "had available the best case batch Windows 4 and a half hours it's frequently less than that so obviously viously we needed a better",
    "start": "174920",
    "end": "181560"
  },
  {
    "start": "180000",
    "end": "200000"
  },
  {
    "text": "solution and this graph stops in March of this year because as I said I like to keep my job but you can see we have more",
    "start": "181560",
    "end": "187760"
  },
  {
    "text": "more data coming into this program so we have more questions being asked for each question the answer to that question is",
    "start": "187760",
    "end": "193400"
  },
  {
    "text": "recomputed every night from all of the data ever collected not a very good uh idea we're fetching all of the data",
    "start": "193400",
    "end": "199040"
  },
  {
    "text": "every single night and the amount of data is increasing as well so we have a problem you can see where the problems",
    "start": "199040",
    "end": "204840"
  },
  {
    "start": "200000",
    "end": "356000"
  },
  {
    "text": "lie this is the uh the guts of the algorithm by the way if you're wondering why I keep",
    "start": "204840",
    "end": "210239"
  },
  {
    "text": "stopping I'm not doing William Shatner it's just I have no idea what I'm talking",
    "start": "210239",
    "end": "215480"
  },
  {
    "text": "about not every joke is a winner some are good some are bad so this is the",
    "start": "216799",
    "end": "222799"
  },
  {
    "text": "basic algorithm this looks like python it's really pseudo code um after I wrote the program I went back and did the pseudo code just for these slides and",
    "start": "222799",
    "end": "229519"
  },
  {
    "text": "the code you see here in red is the outer loop for each of the jobs so phase one in white at the top uh we get the",
    "start": "229519",
    "end": "235879"
  },
  {
    "text": "list of jobs I'm sorry that's phase zero get the list of jobs phases 1 two and three three are inside the red Loop uh",
    "start": "235879",
    "end": "242120"
  },
  {
    "text": "phase one is the next two white rows talk to the database to get the data and convert it into",
    "start": "242120",
    "end": "248079"
  },
  {
    "text": "numpy then phase two is the blue loop and that's analyze the data and phase three are these two lines",
    "start": "248079",
    "end": "254599"
  },
  {
    "text": "here at the bottom where we write the results back to the database not terribly",
    "start": "254599",
    "end": "260440"
  },
  {
    "text": "complicated the uh blue loop there for ION range 500 that's where we're going to do these 500 random resamples of the",
    "start": "260880",
    "end": "266720"
  },
  {
    "text": "incoming data those resamples are the same same size as the original data set and consist of the same data from that",
    "start": "266720",
    "end": "273000"
  },
  {
    "text": "data set but the rows are selected at random so some rows might appear multiple times in the synthetic data and",
    "start": "273000",
    "end": "279039"
  },
  {
    "text": "some rows might not appear at all in the inner loop we're going to",
    "start": "279039",
    "end": "284840"
  },
  {
    "text": "take the random indices that we create with the white line just above the yellow line we use those indices to",
    "start": "284840",
    "end": "290120"
  },
  {
    "text": "create the synthetic data from the original data and then we're going to do two sets of sums over all the rows in",
    "start": "290120",
    "end": "296160"
  },
  {
    "text": "the first sum we're going to sum up those rows where some condition is true and in the second sum we're going to sum up all the rows where the condition is",
    "start": "296160",
    "end": "302919"
  },
  {
    "text": "false the result of that is two arrays sums T and sums F we pass those into some functions that generate SQL and",
    "start": "302919",
    "end": "309000"
  },
  {
    "text": "write a couple of rows into an output table again not terribly complicated you may be looking at this and thinking a",
    "start": "309000",
    "end": "314280"
  },
  {
    "text": "couple of questions um well you may be thinking first off why not just run it on to dupe that's a good question I'm going to come back to that later in some",
    "start": "314280",
    "end": "320120"
  },
  {
    "text": "some depth near the end of the presentation and you might also be looking at this and saying this is horrible inefficient code well yeah when",
    "start": "320120",
    "end": "326720"
  },
  {
    "text": "you start with horrible code you can get major speedups",
    "start": "326720",
    "end": "331479"
  },
  {
    "text": "that actually was not a joke we don't do a lot of Performance",
    "start": "333759",
    "end": "338960"
  },
  {
    "text": "Tuning anymore programmers are pushed to get features and functionality out the door and not to take time to make the",
    "start": "338960",
    "end": "344319"
  },
  {
    "text": "code Fest there's another way to make the code fast called scalability and in the second half of this presentation I'm going to I'm going to talk about why",
    "start": "344319",
    "end": "350680"
  },
  {
    "text": "scalability and Hadoop are crippling our ability to provide services to our",
    "start": "350680",
    "end": "357039"
  },
  {
    "start": "356000",
    "end": "384000"
  },
  {
    "text": "customers here's uh that same algorithm where I'm just calling out what's going on phases 0 1 and three are just waiting",
    "start": "357039",
    "end": "364000"
  },
  {
    "text": "on the database phase two where we're actually doing the analysis is doing lots and lots of random reads from the original",
    "start": "364000",
    "end": "371919"
  },
  {
    "text": "data sequential wres to the new data and then a couple of passes to compute the wear Clauses and the",
    "start": "371919",
    "end": "379520"
  },
  {
    "text": "sums so it's not too hard to look at this code and figure out where the time is probably",
    "start": "379520",
    "end": "385280"
  },
  {
    "start": "384000",
    "end": "414000"
  },
  {
    "text": "spent what I'm going to do now is describe the speedups that we done first we're look at the speed UPS in 2011 and",
    "start": "385759",
    "end": "391080"
  },
  {
    "text": "then the speed UPS in 2012 I had eight weeks of time in 2011 March April and May with a hard stop in May because I go",
    "start": "391080",
    "end": "397280"
  },
  {
    "text": "to New York and see all the shows I can and then I take my mom to one of them so I can justify ignoring her for the rest of the",
    "start": "397280",
    "end": "403199"
  },
  {
    "text": "year I grew up in New England we didn't get kissed good night Mom would wave from the other end of the room with the",
    "start": "403199",
    "end": "409080"
  },
  {
    "text": "back of her",
    "start": "409080",
    "end": "411478"
  },
  {
    "start": "414000",
    "end": "480000"
  },
  {
    "text": "hand the first of those speedups is hoisting and variant code I spent two weeks of the eight weeks just cleaning",
    "start": "414440",
    "end": "419879"
  },
  {
    "text": "up the code it went from 700 lines to 2,000 lines in the process but the resulting code was well structured",
    "start": "419879",
    "end": "425560"
  },
  {
    "text": "duplicate facts were centralized magic numbers were given names uh in several cases there were magic numbers where the",
    "start": "425560",
    "end": "431440"
  },
  {
    "text": "same number would appear in multiple places with different meanings so I had to figure that back that out of the code",
    "start": "431440",
    "end": "436599"
  },
  {
    "text": "there was a lot of invariant code inside Loops to pull out python can't do a lot of these optimizations the language is too Dynamic to figure out at compile",
    "start": "436599",
    "end": "442440"
  },
  {
    "text": "time what it can safely do at runtime so I had to do a lot of stuff to address the fact that python really can't",
    "start": "442440",
    "end": "448440"
  },
  {
    "text": "optimize terribly well I noticed in the process that in here in this wear Clause I'm not going into any detail",
    "start": "448440",
    "end": "455199"
  },
  {
    "text": "on there were some numbers being computed four numbers being computed for every row every time and they didn't",
    "start": "455199",
    "end": "461319"
  },
  {
    "text": "change on the various iterations of this Loop so I hoisted all that stuff out in the database query here where we get the",
    "start": "461319",
    "end": "467759"
  },
  {
    "text": "data for a given question job and question are synonymous in this case we have 17 columns coming back from the",
    "start": "467759",
    "end": "473120"
  },
  {
    "text": "database I took the four numbers and added them so instead of 17 columns we now had 21 columns pre-computing helped",
    "start": "473120",
    "end": "478479"
  },
  {
    "text": "quite a bit gave us a nice speed up next speed up that I did was pipeline",
    "start": "478479",
    "end": "485159"
  },
  {
    "start": "480000",
    "end": "623000"
  },
  {
    "text": "parallelism lots of ways of doing parallelism pipeline parallelism is a fairly simple approach you take a problem and you break it into pieces and",
    "start": "485159",
    "end": "491440"
  },
  {
    "text": "you run all those pieces in parallel so instead of running them sequentially you can now run them simultaneously in time",
    "start": "491440",
    "end": "496520"
  },
  {
    "text": "vertically in time so I took the program and I split",
    "start": "496520",
    "end": "502080"
  },
  {
    "text": "into the fetcher program phases zero and one get the list of jobs is Phase zero",
    "start": "502080",
    "end": "507240"
  },
  {
    "text": "and then for each job get the data for it that's the fetcher the fetcher does that work it's kicked off when our batch",
    "start": "507240",
    "end": "512599"
  },
  {
    "text": "job tells it that the prerequisites have been met and for each job it writes the data for that job millions and millions",
    "start": "512599",
    "end": "517760"
  },
  {
    "text": "of rows into a little file the next process the analyzer is only running the",
    "start": "517760",
    "end": "522839"
  },
  {
    "text": "CPU intensive part of the code that's this part here the stuff uh roughly in blue the blue",
    "start": "522839",
    "end": "529839"
  },
  {
    "text": "loop the analyzer is running continuously we have not turned it off in well over a year and it just monitors",
    "start": "529839",
    "end": "535720"
  },
  {
    "text": "the directory where the fetcher writes when it sees data has shown up it reads the data processes it and erases it very simple it writes its results into",
    "start": "535720",
    "end": "542120"
  },
  {
    "text": "another directory and in that directory the third program the writer is waiting when it sees results to be written it writes them out so it's looking for the",
    "start": "542120",
    "end": "548079"
  },
  {
    "text": "results of this calculation when it sees them it writes them into the database the writer runs very very quickly it's only inserting a couple of rows the",
    "start": "548079",
    "end": "554640"
  },
  {
    "text": "fetcher and the analyzer were originally taking about the same amount of time so by running them in parallel I doubled the speed of the system that's nice that",
    "start": "554640",
    "end": "562160"
  },
  {
    "text": "doesn't happen too often but it's nice when it does however over time that benefit grew",
    "start": "562160",
    "end": "567760"
  },
  {
    "text": "less and less because the analyzer quickly became uh a huge bottleneck once",
    "start": "567760",
    "end": "573440"
  },
  {
    "text": "I started doing the full processing and not the subset that had been in the Prototype so when you have one phase of",
    "start": "573440",
    "end": "579519"
  },
  {
    "text": "your pipeline taking a lot longer than the rest the benefits of overlapping the processing go away and then later on",
    "start": "579519",
    "end": "584640"
  },
  {
    "text": "with the work I did this year the analyzer started running so quickly that it took far less time than the fetcher again we weren't getting much benefit",
    "start": "584640",
    "end": "591160"
  },
  {
    "text": "from overlap processing however when I did the restructuring I also set it up so that I",
    "start": "591160",
    "end": "596959"
  },
  {
    "text": "could rerun any point in the pipeline very quickly quickly I could rerun my standard test cases and by having three",
    "start": "596959",
    "end": "602560"
  },
  {
    "text": "separate programs I could run just one of those programs more quickly than running all the uh the entire code",
    "start": "602560",
    "end": "607640"
  },
  {
    "text": "together so I had quicker reruns and I had simpler programs it's easier to deal with figuring out what's going on with a",
    "start": "607640",
    "end": "612800"
  },
  {
    "text": "block of code you don't understand when there's less of it pipeline parallelism is one simple way to get performance",
    "start": "612800",
    "end": "619320"
  },
  {
    "text": "easy to implement you have a producer and a consumer pretty simple relationship between",
    "start": "619320",
    "end": "624519"
  },
  {
    "start": "623000",
    "end": "684000"
  },
  {
    "text": "them I also made a fix to numpy the results set coming back from the database in uh phase one here had 17",
    "start": "624519",
    "end": "632240"
  },
  {
    "text": "columns a mixture of floats ins and one string when we pass that results set",
    "start": "632240",
    "end": "637600"
  },
  {
    "text": "into numpy and say hey numpy make a numpy array out of this numpy does what we tell it to do but numpy in the naive",
    "start": "637600",
    "end": "643920"
  },
  {
    "text": "form requires that all the elements in the numpy array be the same type and what's the least generic type to",
    "start": "643920",
    "end": "649760"
  },
  {
    "text": "represent int float and string Pi object which means that later on when we ask nump to do highspeed numeric",
    "start": "649760",
    "end": "655560"
  },
  {
    "text": "calculations it really can't it has to call back into python for every single element to get the current value so I",
    "start": "655560",
    "end": "661000"
  },
  {
    "text": "fixed that I replaced that one string column with an integer lookup table an integer value um and I found out in the",
    "start": "661000",
    "end": "667320"
  },
  {
    "text": "process there were only a couple of unique values in the string because it was really a version number so this",
    "start": "667320",
    "end": "672360"
  },
  {
    "text": "provided a nice speed up but at the end of last year it was made obsolete when they changed the database table to replace that string column with an",
    "start": "672360",
    "end": "678440"
  },
  {
    "text": "integer column as it should be I'm not arguing that's a f fine thing to do it simplified the",
    "start": "678440",
    "end": "683560"
  },
  {
    "text": "code but it was quite a quite an improvement because now numpy was actually providing high-speed numerics",
    "start": "683560",
    "end": "689040"
  },
  {
    "start": "684000",
    "end": "953000"
  },
  {
    "text": "it converted everything into float the least generic type that can represent int and Float accurately reasonably",
    "start": "689040",
    "end": "695320"
  },
  {
    "text": "accurately one more speed up that I did last year the multi-processing module instead of uh doing all the work",
    "start": "695320",
    "end": "702920"
  },
  {
    "text": "in the analyzer in one thread which is the way the code was written before I parallelized it to run in many threads",
    "start": "702920",
    "end": "708760"
  },
  {
    "text": "the first time I did this I spawned one process for each of the 500 loops and of course the computer fell over and died",
    "start": "708760",
    "end": "715880"
  },
  {
    "text": "immediately and I realized that for CPU intensive work that's kind of silly anyway if you're doing CPU intensive work you only need as many processes as",
    "start": "715880",
    "end": "722480"
  },
  {
    "text": "there are cores no point in having more just be wasting time in contact switching I used Fork without exec how",
    "start": "722480",
    "end": "729800"
  },
  {
    "text": "many people here are familiar with fork and exec I hope to see a few hands go up for those of you who aren't Fork means",
    "start": "729800",
    "end": "735240"
  },
  {
    "text": "make a child of my process that is an exact image of this process bite forbite identical the same open files everything",
    "start": "735240",
    "end": "740800"
  },
  {
    "text": "is the same they can tell which one is parent and which is child by basically the process idea and that's about it the",
    "start": "740800",
    "end": "746639"
  },
  {
    "text": "nice thing is that in modern Unix systems anything after the mid 880s Fork is very low cost because we don't actually copy the address space we just",
    "start": "746639",
    "end": "753360"
  },
  {
    "text": "copy some page table entries and in the present case that means that all the children processes were",
    "start": "753360",
    "end": "759639"
  },
  {
    "text": "sharing this data which is readon after a fork if the parent or",
    "start": "759639",
    "end": "765120"
  },
  {
    "text": "child make changes to table to Pages they get a private copy but since neither parent or child is making a",
    "start": "765120",
    "end": "770199"
  },
  {
    "text": "change to that numpy array there's no copies being made the result is I got a near linear speed up the startup",
    "start": "770199",
    "end": "776240"
  },
  {
    "text": "overhead the serial part of the code is very small the parallel part is very large so we get a nearly near speed up",
    "start": "776240",
    "end": "781560"
  },
  {
    "text": "am doll's law Works in our favor in this case here's what the analyzer looked",
    "start": "781560",
    "end": "786800"
  },
  {
    "text": "like again this is pseudo code that looks like python that's the great thing about python isn't it you write pseudo code and then five minutes later you",
    "start": "786800",
    "end": "791880"
  },
  {
    "text": "have a functioning program it's just python so this is pseudo code that looks like Python and almost is for just the",
    "start": "791880",
    "end": "797480"
  },
  {
    "text": "analyzer part the analyzer has at this point in the code figured out that there is some new data to analiz at the top of",
    "start": "797480",
    "end": "803600"
  },
  {
    "text": "the page there the top of the screen it reads in that data the data has been already converted by the fetcher into a",
    "start": "803600",
    "end": "809399"
  },
  {
    "text": "numpy format so we can simply suck it right in and go then I have uh middle Loop number one",
    "start": "809399",
    "end": "815760"
  },
  {
    "text": "I create all of the parallel processes and I start them running I'm using the multi-processing package which is part of python python has uh three ways of",
    "start": "815760",
    "end": "823079"
  },
  {
    "text": "doing parallel processing easily it has multiprocessing it has threading and",
    "start": "823079",
    "end": "828480"
  },
  {
    "text": "what's the other one subprocess I think and then of course you can use pipes and stuff and uh OS calls to do",
    "start": "828480",
    "end": "834680"
  },
  {
    "text": "multi-processing in other ways as well multi-processing is great because it just uses",
    "start": "834680",
    "end": "840759"
  },
  {
    "text": "for when each process is started that uh first of the blue lines there the new",
    "start": "841360",
    "end": "846839"
  },
  {
    "text": "process the child process is going to execute compute wrapper which has passed in the data that was read in from the data file and now instead of running 500",
    "start": "846839",
    "end": "854399"
  },
  {
    "text": "Loops in blue we're going to run 500 divided by the number of cores because we have number of cores processes running in parallel and we do our",
    "start": "854399",
    "end": "860759"
  },
  {
    "text": "calculation and we get a nice speed up in 2011 when I did this I was",
    "start": "860759",
    "end": "865839"
  },
  {
    "text": "operating under the belief that hyperthreading wasn't terribly useful so I limited the number of cores to the number of real cores not hyperthreaded",
    "start": "865839",
    "end": "872399"
  },
  {
    "text": "cores later on this year I tried jacking up the number of cores the program used until I used all the hyperthreaded cores",
    "start": "872399",
    "end": "877480"
  },
  {
    "text": "and it actually ran faster and faster the more hyperthreaded cores I gave it so that was an unexpected",
    "start": "877480",
    "end": "882839"
  },
  {
    "text": "benefit one little uh fly in the ointment the join call here is where we",
    "start": "882839",
    "end": "890959"
  },
  {
    "text": "wait for all the children to die this is a model I'm familiar with in my religious tradition that's basically what parents do they wait for their",
    "start": "890959",
    "end": "896720"
  },
  {
    "text": "children to die",
    "start": "896720",
    "end": "900680"
  },
  {
    "text": "and if you think about how that's going to work that's going to operate sequentially because it's a list comprehension it's going to start at the beginning and go all the way through to",
    "start": "902000",
    "end": "907800"
  },
  {
    "text": "the end so what happens if the first process happens to take a long time and all the subsequent processes finish very",
    "start": "907800",
    "end": "913720"
  },
  {
    "text": "quickly well in that case we're just wasting time all the other cores have nothing to do we don't have any more work for them so this is an example of",
    "start": "913720",
    "end": "920680"
  },
  {
    "text": "statically scheduled parallelism insanely easy to write three lines of code but you do have a speed bump in",
    "start": "920680",
    "end": "926839"
  },
  {
    "text": "this case it's not too bad because each of the children take about the same amount amount of time to run because they all do about the same amount of work that was the theory in practice I",
    "start": "926839",
    "end": "933800"
  },
  {
    "text": "saw that actually there was about a factor of two variation in the runtime between the child processes and I wasn't happy but I'm also very lazy so I didn't",
    "start": "933800",
    "end": "939959"
  },
  {
    "text": "fix it well lazy but then again good enough is perfect when you get to the point",
    "start": "939959",
    "end": "946120"
  },
  {
    "text": "where your program is fast enough you're finished move on there are other things we need to worry about it is easy to fall into a rout of Performance Tuning",
    "start": "946120",
    "end": "952160"
  },
  {
    "text": "forever and never actually ship anything I've worked with those companies this went fine for uh the rest",
    "start": "952160",
    "end": "959480"
  },
  {
    "text": "of 2011 in early 2012 we had a problem this program had proven to be very very",
    "start": "959480",
    "end": "964959"
  },
  {
    "text": "popular so there were more and more questions being submitted to it and remember every time the program runs we",
    "start": "964959",
    "end": "970160"
  },
  {
    "text": "recollect all of the data from the beginning of time so the data gets bigger and bigger every day combine those two factors together and you have",
    "start": "970160",
    "end": "976319"
  },
  {
    "text": "a problem in size in addition um management decided they wanted to do more sophisticated analyses we haven't",
    "start": "976319",
    "end": "982000"
  },
  {
    "text": "actually done that but had that occurred we'd need another factor of 10 or so in performance the situation had gotten B",
    "start": "982000",
    "end": "988720"
  },
  {
    "text": "enough that by February the fetcher alone was taking more than 24 hours to run clearly wasn't going to finish in",
    "start": "988720",
    "end": "994920"
  },
  {
    "text": "the batch window wouldn't even finish in the day so we needed more speed first thing I did this year was",
    "start": "994920",
    "end": "1002120"
  },
  {
    "start": "997000",
    "end": "1230000"
  },
  {
    "text": "take the program the analyzer because it's the CPU bound part and run it on a machine with way more cores obviously",
    "start": "1002120",
    "end": "1007600"
  },
  {
    "text": "that will speed it up how could it not and it didn't and I was vexed I was wroth I was ired I was concerned I was",
    "start": "1007600",
    "end": "1013319"
  },
  {
    "text": "puzzled I went through all seven stages of grief it took a week for one solid week I ignored what",
    "start": "1013319",
    "end": "1020440"
  },
  {
    "text": "the data was telling me and stuck with my own preconceptions we just con concluded a presidential campaign in which uh one side did that to their",
    "start": "1020440",
    "end": "1027520"
  },
  {
    "text": "numbers and they didn't get the results they were expecting did they there's a lesson there we'll talk",
    "start": "1027520",
    "end": "1033678"
  },
  {
    "text": "about that later but if elected I will not serve so",
    "start": "1033679",
    "end": "1040360"
  },
  {
    "text": "um you have to be of a certain age to get why that joke is almost funny uh so",
    "start": "1040360",
    "end": "1046438"
  },
  {
    "text": "after a week I said okay if it's not CPU bound it's not IO bound what could it possibly be and I had a a stroke of lightning or",
    "start": "1046439",
    "end": "1055160"
  },
  {
    "text": "possibly just a stroke that perhaps it was memory bound and not CPU bound well",
    "start": "1055160",
    "end": "1061600"
  },
  {
    "text": "how can I take that hunch and convert it into a theory how can I test it because if you can't test something then you don't have a",
    "start": "1061600",
    "end": "1067240"
  },
  {
    "text": "theory what I did was I took that numpy array the 21 Columns of four bytes each and I split into three arrays one array",
    "start": "1067240",
    "end": "1073880"
  },
  {
    "text": "had the columns that really needed to be floats the second array had the columns that could perfectly be be two by ins",
    "start": "1073880",
    "end": "1079559"
  },
  {
    "text": "and the third array had columns that could just be single byes most of them in fact were just bits very easy to do",
    "start": "1079559",
    "end": "1085360"
  },
  {
    "text": "that kind of res screwing around with your data in Python you don't have to worry about going into a header file and",
    "start": "1085360",
    "end": "1091760"
  },
  {
    "text": "messing around with headers you don't have to fight with your Java compiler non-stop you just do it and it",
    "start": "1091760",
    "end": "1096960"
  },
  {
    "text": "works don't get me wrong I love Java it's a great language for bad programmers but if you're competent you",
    "start": "1096960",
    "end": "1102280"
  },
  {
    "text": "can use Python and get better results faster again that was not a joke",
    "start": "1102280",
    "end": "1109520"
  },
  {
    "text": "I'll take the laugh um and the program sped up by the ratio of 84 to 36 big huge huge giant",
    "start": "1109520",
    "end": "1116280"
  },
  {
    "text": "clue so at that point I went all out for reducing memory bandwidth I used a radex",
    "start": "1116280",
    "end": "1121600"
  },
  {
    "text": "sort to take the array of random numbers which are indices into the main data set that we're going to use to copy that",
    "start": "1121600",
    "end": "1127559"
  },
  {
    "text": "data into the temporary data set I took that random array and I bin sorted it I radic sorted I Love radex Sword I came",
    "start": "1127559",
    "end": "1133200"
  },
  {
    "text": "up with this in college and then figured out of course somebody else had invented it 100 years ago but it wasn't until Wikipedia that I was able B to find out",
    "start": "1133200",
    "end": "1138799"
  },
  {
    "text": "what it's called and if you don't believe me wait until 5 minutes after this is over give me a chance to get on Wikipedia and it",
    "start": "1138799",
    "end": "1144960"
  },
  {
    "text": "will be there um the result of the radex sort is",
    "start": "1144960",
    "end": "1150640"
  },
  {
    "text": "an array the same length as the number of rows in the original data set and each entry tells me how many times the corresponding row should appear in the",
    "start": "1150640",
    "end": "1157080"
  },
  {
    "text": "synthetic data set so if the first entry in the bin count array the result of the Ric sort has the value 10 it says that",
    "start": "1157080",
    "end": "1162760"
  },
  {
    "text": "row zero should be used 10 times and if the second entry has the value zero it says Row one should not be should not",
    "start": "1162760",
    "end": "1167960"
  },
  {
    "text": "appear at all once I have the bin count array out from radex sort I now have a virtual",
    "start": "1167960",
    "end": "1174120"
  },
  {
    "text": "synthetic data set I don't need to actually copy the original data into the new data I can just use the radex sort",
    "start": "1174120",
    "end": "1179240"
  },
  {
    "text": "to pretend that I did that so I've now eliminated one entire set of random reads from the original data and one set",
    "start": "1179240",
    "end": "1184400"
  },
  {
    "text": "of sequential rights into the synthetic data set because I don't need to actually create it this takes advantage of the fact that row order is",
    "start": "1184400",
    "end": "1190320"
  },
  {
    "text": "unimportant in our algorithm all we're doing is summing up rows the order of summation does not work does does not",
    "start": "1190320",
    "end": "1195520"
  },
  {
    "text": "matter because addition is Comm mutative I was expecting a laugh there",
    "start": "1195520",
    "end": "1202640"
  },
  {
    "text": "okay we'll just move on I guess not everyone went through New Math in junior high school good for you didn't work um made",
    "start": "1202640",
    "end": "1211039"
  },
  {
    "text": "me the man I am today a man who hopes to someday afford long pants so here's the basic uh change we",
    "start": "1211039",
    "end": "1217120"
  },
  {
    "text": "take our random array and instead of just using it we passing it to radex sort and we get back our bin counts and we get all this nice stuff also inside",
    "start": "1217120",
    "end": "1224440"
  },
  {
    "text": "the inner loop I had that wear Clause I got rid of that as well so back out rid of more passes over the",
    "start": "1224440",
    "end": "1231120"
  },
  {
    "start": "1230000",
    "end": "1321000"
  },
  {
    "text": "data next thing I found was that because the user time had been reduced so much via that change the system time was now",
    "start": "1231120",
    "end": "1237159"
  },
  {
    "text": "significant system time didn't go up any it's just that user time went down a lot and I profiled the code where's the",
    "start": "1237159",
    "end": "1242640"
  },
  {
    "text": "system time going it turns out that those random number generator calls are expensive remember we're calling the random number generator for every single",
    "start": "1242640",
    "end": "1249480"
  },
  {
    "text": "row times 500 iterations we have millions of rows times 500 iterations that's a lot of calls so I changed the",
    "start": "1249480",
    "end": "1255840"
  },
  {
    "text": "code instead of 500 times length of data I made made it 500 plus the length of data here's what I",
    "start": "1255840",
    "end": "1260880"
  },
  {
    "text": "did generate that list of uh random numbers but just generate one list not 500 of them create the bin counts as we",
    "start": "1260880",
    "end": "1267679"
  },
  {
    "text": "said on the previous slide now take the bin count array and append a copy of it right to the",
    "start": "1267679",
    "end": "1273760"
  },
  {
    "text": "bottom make a list of 500 more random ints between zero and the number of rows",
    "start": "1274240",
    "end": "1279279"
  },
  {
    "text": "we're going to use those to index into this double bin count array at any random location and since it's twice as",
    "start": "1279279",
    "end": "1285240"
  },
  {
    "text": "long we know that we can't run off the end no matter where we start the result is not as random as if we did",
    "start": "1285240",
    "end": "1291400"
  },
  {
    "text": "500 times the length of data but random enough according to both the analysts who looked at it and also running the",
    "start": "1291400",
    "end": "1297279"
  },
  {
    "text": "code and getting the same results again good enough is perfect let's move on we're not physicists who want the",
    "start": "1297279",
    "end": "1303240"
  },
  {
    "text": "correct answer we're Engineers who want an answer that's good enough the word engineer comes from the same Italian",
    "start": "1303240",
    "end": "1308880"
  },
  {
    "text": "root as ingenious engineer is what I was taught in college it's a Renaissance word we are ingenious we don't need the",
    "start": "1308880",
    "end": "1314279"
  },
  {
    "text": "right answer we need one that's good enough at The Other Extreme we could be artist or accountants where it's what answer would you like I'm",
    "start": "1314279",
    "end": "1322200"
  },
  {
    "start": "1321000",
    "end": "1437000"
  },
  {
    "text": "flexible those of you who laughed will be ordered it just so you know next thing I did was touch the Big",
    "start": "1323720",
    "end": "1329679"
  },
  {
    "text": "Data only once this is a little bit tricky I realized that the original",
    "start": "1329679",
    "end": "1334760"
  },
  {
    "text": "algorithm 500 passes over the original data means we're going to be flushing all the caches in the system 500 times",
    "start": "1334760",
    "end": "1340640"
  },
  {
    "text": "as we swamp them with the huge data sets coming through not a good move we don't want to do that so I",
    "start": "1340640",
    "end": "1346320"
  },
  {
    "text": "swapped the inner loop and the middle Loop now the middle Loop is going to go across all the rows and the inner loop",
    "start": "1346320",
    "end": "1352880"
  },
  {
    "text": "is going to do the 500 iterations this slide is oversimplified because remember it's not 500 anymore it's 500 divided by",
    "start": "1352880",
    "end": "1358559"
  },
  {
    "text": "the number of cores due to parallelism but to make things fit on the slide I'm just leaving the number 500 there so on",
    "start": "1358559",
    "end": "1365000"
  },
  {
    "text": "the inner loop each time around we choose a new starting location in the bin count array that was uh the speed up",
    "start": "1365000",
    "end": "1371279"
  },
  {
    "text": "I talked about before and we have some much simpler code here now this code turns out to be an improvement because",
    "start": "1371279",
    "end": "1377600"
  },
  {
    "text": "we're only only going over the big data set once big Improvement remember this program is memory bound anything we can",
    "start": "1377600",
    "end": "1382919"
  },
  {
    "text": "do to cut down memory accesses is a win I'm not going to go over this in detail if you really care about the",
    "start": "1382919",
    "end": "1388320"
  },
  {
    "text": "details download the slides from these websites feel free to send me an email uh later on my email address is down",
    "start": "1388320",
    "end": "1394080"
  },
  {
    "text": "there at the bottom you might wonder why I'm using https for my personal website it's because I upgraded the firmware on my",
    "start": "1394080",
    "end": "1400360"
  },
  {
    "text": "router yesterday and now HTTP doesn't work anymore thank you linkis once",
    "start": "1400360",
    "end": "1406880"
  },
  {
    "text": "again notice that this line down here is really doing a vector times a",
    "start": "1406880",
    "end": "1413120"
  },
  {
    "text": "scalar and adding the result into a vector python really isn't set up to do that I don't think you can even express",
    "start": "1413120",
    "end": "1419039"
  },
  {
    "text": "it with numpy maybe you can I might be wrong um but what's really happening there is an inner inner loop because",
    "start": "1419039",
    "end": "1424440"
  },
  {
    "text": "we're going to have to iterate across each of the elements in the current row to do that so that's an inner inner loop",
    "start": "1424440",
    "end": "1430320"
  },
  {
    "text": "but there are only a few elements in the row remember I said there were 21 elements and we're only summing up 16 of them as it turns out so the cost that",
    "start": "1430320",
    "end": "1436279"
  },
  {
    "text": "inner in Loop is pretty trivial but we could unroll it and in a moment you're going to see that exactly next",
    "start": "1436279",
    "end": "1442360"
  },
  {
    "text": "thing I did was I uh contracted with some folks of Continuum analytics in Austin I met them at Pon earlier this",
    "start": "1442360",
    "end": "1449720"
  },
  {
    "text": "year what a wonderful conference that was that was probably the most useful conference I've ever been to sigraph has got more eye candy but Pon was terrific",
    "start": "1449720",
    "end": "1456480"
  },
  {
    "text": "I got the hat I got the jacket I went to all the tutorials on performance most of",
    "start": "1456480",
    "end": "1462880"
  },
  {
    "text": "which were good and I met these nice people from Austin Continuum analytics I also got a chance got out to Austin a",
    "start": "1462880",
    "end": "1468520"
  },
  {
    "text": "wonderful City I'm not sure what it's doing in Texas but it's a great City",
    "start": "1468520",
    "end": "1473039"
  },
  {
    "text": "anyway they helped me figure out how to use syon for those of you who aren't familiar with syon it's a program that takes python code that has had type",
    "start": "1474360",
    "end": "1481120"
  },
  {
    "text": "annotations added to it and generate C code from that plain vanilla python gets",
    "start": "1481120",
    "end": "1486159"
  },
  {
    "text": "its um flexibility because it uses late binding as much as possible the latest possible binding that makes python",
    "start": "1486159",
    "end": "1491440"
  },
  {
    "text": "flexible but incredibly slow scon does the reverse scon converts python into code where all the bindings are done as",
    "start": "1491440",
    "end": "1497760"
  },
  {
    "text": "as early as possible at compile time so you do as little as possible at runtime a huge performance benefit but you give up",
    "start": "1497760",
    "end": "1504440"
  },
  {
    "text": "flexibility the result of syon on just my roughly 40 line compute kernel in Python was a 6,000 line file of code",
    "start": "1504440",
    "end": "1512919"
  },
  {
    "text": "most of that was boiler plate I found out the parts that were the actual variable code and I hand optimized them",
    "start": "1512919",
    "end": "1519440"
  },
  {
    "text": "it ended up being after getting rid of a bunch of crud 62 lines of C code 62 lines of C code that's reasonable to get",
    "start": "1519440",
    "end": "1525200"
  },
  {
    "text": "a huge speed up which is what I got out of this and this is the beginnings part the beginning part of that I'm sorry this is the inside loop",
    "start": "1525200",
    "end": "1532440"
  },
  {
    "text": "um at this point in the code we have selected one row to process and we are on one of the 500 iterations and we have",
    "start": "1532440",
    "end": "1539919"
  },
  {
    "text": "figured out what the current random value is corresponding to that row that is how many times should that row appear in the synthetic data set and there are",
    "start": "1539919",
    "end": "1546799"
  },
  {
    "text": "only three choices for the the account either it's zero which means this row shouldn't be used at all and that's the",
    "start": "1546799",
    "end": "1552440"
  },
  {
    "text": "line at the top there if VB counted zero continue or the value is one or the value is more than than one I",
    "start": "1552440",
    "end": "1558520"
  },
  {
    "text": "distinguish between those last two cases because if it's one I can add the current row to the current accumulators",
    "start": "1558520",
    "end": "1563760"
  },
  {
    "text": "and if it's more than one I have to do a multiplication as well as an addition and you can see that uh let's",
    "start": "1563760",
    "end": "1570240"
  },
  {
    "text": "see this block of code here is all about choosing the appropriate set of accumulators remember we're doing all",
    "start": "1570240",
    "end": "1575760"
  },
  {
    "text": "500 iterations in parallel at this point so I have to choose one of 500 sets of sums T and sums F and then I have to",
    "start": "1575760",
    "end": "1581760"
  },
  {
    "text": "choose if it's sums t or sums F so that work is being done here again I'm not going to go into great detail on",
    "start": "1581760",
    "end": "1587240"
  },
  {
    "text": "this you can download the slides at your leisure and down here I do something which is not code and is not in the",
    "start": "1587240",
    "end": "1593440"
  },
  {
    "text": "actual file uh but I made it look like this it would fit on the slide I'm taking the current uh count multiplying",
    "start": "1593440",
    "end": "1600600"
  },
  {
    "text": "it by all the fields and adding them to the accumulator if the count is uh not equal",
    "start": "1600600",
    "end": "1606640"
  },
  {
    "text": "to one I do that if the count is equal to one then I just take the fields and add them so it looks like that on the",
    "start": "1606640",
    "end": "1611799"
  },
  {
    "text": "slide to make it fit but if we go to the next slide you can see what the code really looks like at the top there you see if V Bend",
    "start": "1611799",
    "end": "1618120"
  },
  {
    "text": "count is one just do an addition otherwise do a multiplication and an addition this is not rocket science this",
    "start": "1618120",
    "end": "1624080"
  },
  {
    "text": "is not the sort of code that should make you I don't know mess your pants good I was afraid I'd get to laugh",
    "start": "1624080",
    "end": "1629360"
  },
  {
    "text": "at that and I didn't want to laugh at that scatological humor is not my type of thing um there is something a little",
    "start": "1629360",
    "end": "1635840"
  },
  {
    "text": "strange going on here if you can read this code I don't know if you're past the third row you probably can't even see the slide terribly well um I'm not",
    "start": "1635840",
    "end": "1643679"
  },
  {
    "text": "adding up The Columns of the current Row in order I'm adding them up out of order now the first version of this code",
    "start": "1643679",
    "end": "1649679"
  },
  {
    "text": "straight out of scon did add up the columns in order so take the first column add it to the first accumulator the second column to the second",
    "start": "1649679",
    "end": "1655760"
  },
  {
    "text": "accumulator and so on and I had a thought it happens occasionally happens especially if you",
    "start": "1655760",
    "end": "1662919"
  },
  {
    "text": "are obsessive and can't stop thinking about this stuff please put down the uh computer and come to bed oh just one",
    "start": "1662919",
    "end": "1669039"
  },
  {
    "text": "more minute really I'm almost done three hours later please put down the computer go if you wait long enough they go to sleep on their own and that's much",
    "start": "1669039",
    "end": "1676519"
  },
  {
    "text": "better um my thought was that in that obvious",
    "start": "1676519",
    "end": "1682720"
  },
  {
    "text": "structure of adding up the columns in order the first addition is going to go to some line in the L1 cache to pick out",
    "start": "1682720",
    "end": "1688399"
  },
  {
    "text": "the current value of the first item in the row and then it's going to go to some other location in the L1 cache to",
    "start": "1688399",
    "end": "1693559"
  },
  {
    "text": "pick out the corresponding accumulator add the two together and write them back into that line in the L1 cache then it's",
    "start": "1693559",
    "end": "1699360"
  },
  {
    "text": "going to want to add the second column to the second accumulator and that's going to touch the same lines in the L1 cache because they're probably right next to each other there's no other",
    "start": "1699360",
    "end": "1705960"
  },
  {
    "text": "place they would be and then we're going to move on to the next column and probably hit the same cach lines again",
    "start": "1705960",
    "end": "1711799"
  },
  {
    "text": "how many times can you do that on a modern system I don't know but I do know that the computer inside is not behaving",
    "start": "1711799",
    "end": "1718600"
  },
  {
    "text": "like we were taught back in college what we were taught was that the computer executes instructions in order",
    "start": "1718600",
    "end": "1724960"
  },
  {
    "text": "and that those instructions are executed against a simple flat address space where the location of all uh where the",
    "start": "1724960",
    "end": "1730720"
  },
  {
    "text": "access time to all locations in memory is identical and that's not what really happens on these machines what's really",
    "start": "1730720",
    "end": "1735840"
  },
  {
    "text": "going on inside is that the computer is aggressively looking for runtime parallelism in the instruction stream",
    "start": "1735840",
    "end": "1742200"
  },
  {
    "text": "and using that to run instructions in parallel so if I give it a little bit of help then it can run these additions in",
    "start": "1742200",
    "end": "1749120"
  },
  {
    "text": "parallel and that's why I permuted the order here so I do the first item um in",
    "start": "1749120",
    "end": "1754840"
  },
  {
    "text": "the row sums P Sub 0 plus equal V Fields Arrow A1 and then I skip ahead to the",
    "start": "1754840",
    "end": "1760840"
  },
  {
    "text": "fifth item index 4 because that way when the computer is trying to get runtime",
    "start": "1760840",
    "end": "1766559"
  },
  {
    "text": "parallelism from the instructions it will say oh these instructions don't touch the same cach line I can run them",
    "start": "1766559",
    "end": "1771960"
  },
  {
    "text": "in parallel factor of two speed up to do that",
    "start": "1771960",
    "end": "1778600"
  },
  {
    "text": "required somebody with a fairly General background and that's my background I'm a generalist that's a polite way of",
    "start": "1778600",
    "end": "1784360"
  },
  {
    "text": "saying dilatant which means I don't know squat about anything but I know a very little bit about a whole lot of",
    "start": "1784360",
    "end": "1791600"
  },
  {
    "text": "stuff most of the folks in the audience tonight are probably Specialists that is to say you're probably really good at",
    "start": "1791799",
    "end": "1796960"
  },
  {
    "text": "something hold on just one second you shouldn't need to know this level of detail you shouldn't need to know about outof order execution and multi-level",
    "start": "1796960",
    "end": "1803000"
  },
  {
    "text": "caches to get this kind of performance and that's going to be much of the focus of the second half of my talk yes sir so how did you know that you need to",
    "start": "1803000",
    "end": "1809559"
  },
  {
    "text": "advance by five to make that possible Advance by four I hope unless I screwed up the slides uh the cach line is",
    "start": "1809559",
    "end": "1816200"
  },
  {
    "text": "probably 32 bytes wide if you check the spec sheet it says 32 bytes wide um I have 8 by floats at this point in the",
    "start": "1816200",
    "end": "1822000"
  },
  {
    "text": "algorithm so I can fit four of them in a cach line I see um that's hold on just a second",
    "start": "1822000",
    "end": "1828080"
  },
  {
    "text": "that's an example of false sharing and again I shouldn't need to know this stuff but I had to to get the speed yes sir that means your algorith",
    "start": "1828080",
    "end": "1834279"
  },
  {
    "text": "architecture specific it certainly is if you want to get the highest performance you have to know what's the machine you're running on python makes that",
    "start": "1834279",
    "end": "1840360"
  },
  {
    "text": "impossible we're too far from the machine Java PHP Pearl they're all wonderfully productive languages but",
    "start": "1840360",
    "end": "1845559"
  },
  {
    "text": "they take us so far from the machine that we can't make Intelligent Decisions and even if we could we can't tell the language what we need to do so you got",
    "start": "1845559",
    "end": "1851519"
  },
  {
    "text": "to drop down into C to do this lowle stuff doesn't the compiler us take this um I don't know of compilers smart",
    "start": "1851519",
    "end": "1857440"
  },
  {
    "text": "enough to do this certainly when I looked at the assembly code coming out of uh GCC it wasn't doing this and I was",
    "start": "1857440",
    "end": "1862639"
  },
  {
    "text": "asking for all the optimizations it could give me it would be lovely if it could and I'm going to talk a little bit more about that near the end of I think",
    "start": "1862639",
    "end": "1869000"
  },
  {
    "text": "the last slide of the entire show kind of speaks for itself doesn't",
    "start": "1869000",
    "end": "1874880"
  },
  {
    "start": "1870000",
    "end": "1970000"
  },
  {
    "text": "it this is back in 2008 I talked to some folks at Twitter sitting across a table",
    "start": "1874880",
    "end": "1880320"
  },
  {
    "text": "I asked the guy now your stuff is written in uh what and he says oh we use a lamp stack it's wonderful it's the way",
    "start": "1880320",
    "end": "1885639"
  },
  {
    "text": "to do things okay what exactly are you doing well we're we're routing 140 bytes from your phone to somebody else's phone okay um why are",
    "start": "1885639",
    "end": "1893480"
  },
  {
    "text": "you doing that with lamp stack well it's the way things are done I have a hammer therefore this",
    "start": "1893480",
    "end": "1898639"
  },
  {
    "text": "thing must be a nail I can pound on it and in San Francisco you can get away",
    "start": "1898639",
    "end": "1904760"
  },
  {
    "text": "with slaughtering meter maids no jury will convict convict you for that but you can't kill",
    "start": "1904760",
    "end": "1910399"
  },
  {
    "text": "programmers I did want to ask the guy have you ever called outside 415 that is a long phone call what do you think the",
    "start": "1910919",
    "end": "1916919"
  },
  {
    "text": "phone switch is written in it's either C or llang if it's from ericon it's probably llang or have you ever flown on",
    "start": "1916919",
    "end": "1923480"
  },
  {
    "text": "an airplane that wasn't military if it was a commercial jet the avionics is probably written in C use the right tool",
    "start": "1923480",
    "end": "1929039"
  },
  {
    "text": "for the job don't get tied down to one language python is a great language I've been programming in Python for 12 for 10",
    "start": "1929039",
    "end": "1934679"
  },
  {
    "text": "years maybe 11 depending on how you count if you're a physicist it's 10 if it's an if you're an engineer it's 11",
    "start": "1934679",
    "end": "1941200"
  },
  {
    "text": "close enough 11 um I love python you",
    "start": "1941200",
    "end": "1946240"
  },
  {
    "text": "will not find a stronger in Python every company I've been at for probably the last five or six years I have been the",
    "start": "1946240",
    "end": "1951559"
  },
  {
    "text": "strongest python Advocate but just because it's a great tool doesn't mean it's the only tool when I had a carpenter in remodeling my condos he had",
    "start": "1951559",
    "end": "1957519"
  },
  {
    "text": "five hammers in his toolbox and he could explain to me each one and he said you really want to know I said yes he said I'm charging 200 bucks an hour I said",
    "start": "1957519",
    "end": "1963440"
  },
  {
    "text": "200 an hour I'm a programmer I don't get 200 an hour he said yeah when I was a programmer I couldn't get that kind of cash out",
    "start": "1963440",
    "end": "1970559"
  },
  {
    "start": "1970000",
    "end": "2318000"
  },
  {
    "text": "of but he had five hammers each one did one job very well the same is true of computer languages is use the right",
    "start": "1972120",
    "end": "1977519"
  },
  {
    "text": "language don't get fixed on a particular language there are some more things we could do to get more speed because to",
    "start": "1977519",
    "end": "1982840"
  },
  {
    "text": "get that 114,000 I promised you I would have had to do more than what I did I stopped when I got a total of about",
    "start": "1982840",
    "end": "1988279"
  },
  {
    "text": "12,000 because that was good enough I'm going to tell you why that's the case in a moment but here are things I could do to get to that 114 and how do I know",
    "start": "1988279",
    "end": "1993919"
  },
  {
    "text": "it's 114 because I did read the specs as you were asking it's architecture specific I went into great detail on",
    "start": "1993919",
    "end": "1999679"
  },
  {
    "text": "what microprocessors were in these cheap ass servers that our crummy provider gives us",
    "start": "1999679",
    "end": "2005279"
  },
  {
    "text": "um and I know how the machine can do a uh can do computation so I was still off by a factor of 10 at least and there's",
    "start": "2005279",
    "end": "2012480"
  },
  {
    "text": "no reason we should not be able to extract all of that performance because what's this algorithm doing it's adding numbers what are computers good at",
    "start": "2012480",
    "end": "2018679"
  },
  {
    "text": "adding numbers so here are some things we could do first item use faster Hardware in the old days we called it a",
    "start": "2018679",
    "end": "2024240"
  },
  {
    "text": "forklift upgrade in the Mainframe days but nowadays it's not a forklift a server is this big and we're not even",
    "start": "2024240",
    "end": "2029639"
  },
  {
    "text": "going to take the old server out we're going to make it a Dev box so just use faster Hardware the problem goes away we can move on to something new we don't",
    "start": "2029639",
    "end": "2035399"
  },
  {
    "text": "even have to get involved we could let our Ops Team do that life is grand we can go see Skyfall tip of the day it's",
    "start": "2035399",
    "end": "2041279"
  },
  {
    "text": "not a very good movie it's great thing about working at an entertainment company I can actually",
    "start": "2041279",
    "end": "2046840"
  },
  {
    "text": "go to the movies and say I'm working now I'm not going to point at my",
    "start": "2046840",
    "end": "2052679"
  },
  {
    "text": "co-workers but you know who you are I did not do that but it really is not a very good",
    "start": "2052679",
    "end": "2058720"
  },
  {
    "text": "movie um those bit valued columns those bite columns are actually bits you could combine them all into a single bite and",
    "start": "2058720",
    "end": "2065079"
  },
  {
    "text": "then pull that data out later that would cut your row width from 36 to 30 bytes I actually tried that on some early",
    "start": "2065079",
    "end": "2070200"
  },
  {
    "text": "versions and it slowed things down which which is surprising because the cost of pulling the bits out is just a single",
    "start": "2070200",
    "end": "2076320"
  },
  {
    "text": "and and that should have been hidden that should be zero cost it wasn't it would be interesting to try that again with the current version of the code",
    "start": "2076320",
    "end": "2082440"
  },
  {
    "text": "more interesting because it's a shiny toy and I like shiny things would be item three use the vector instructions so every L1 fetch would not",
    "start": "2082440",
    "end": "2089839"
  },
  {
    "text": "give us one operand it would give us four or if we use some of the other more advanced Vector instructions I think you",
    "start": "2089839",
    "end": "2095240"
  },
  {
    "text": "can pull eight out at a time not quite sure how the hardware does that but anyway we should be able to get a huge",
    "start": "2095240",
    "end": "2100800"
  },
  {
    "text": "performance benefit because we could do the work in Vector mode big Improvement",
    "start": "2100800",
    "end": "2106640"
  },
  {
    "text": "also the uh the latter half of that slide that had the unrolled c-loops on it where I was doing multiply accumulate",
    "start": "2106640",
    "end": "2112200"
  },
  {
    "text": "there are special instructions for doing multiply accumulate so instead of having to multiply bin count by each value in",
    "start": "2112200",
    "end": "2117720"
  },
  {
    "text": "the row and then adding to the accumulator as separate instructions I could do the multiply and the addition in one instruction the new name for that",
    "start": "2117720",
    "end": "2123640"
  },
  {
    "text": "instruction set on the Intel chips is called FMA for fused multiply accumul there are some older instruction sets that do much the same thing those are",
    "start": "2123640",
    "end": "2129760"
  },
  {
    "text": "called Mac instructions you might wonder why the chip vendors would Implement such a weird instruction as multiply",
    "start": "2129760",
    "end": "2135079"
  },
  {
    "text": "accumulate it's because that's the fundamental thing you do in Signal analysis it's the fundamental thing you",
    "start": "2135079",
    "end": "2140640"
  },
  {
    "text": "do in all sorts of algorithms but in highle languages whether they're as high level as python or as mid-level as code",
    "start": "2140640",
    "end": "2147119"
  },
  {
    "text": "we can't really express any of these Vector Concepts standard C has no way to really talk about vectors python has no",
    "start": "2147119",
    "end": "2153359"
  },
  {
    "text": "way to talk about vectors we have to use extension libraries which have some substantial limits and what the kind of performance they can give",
    "start": "2153359",
    "end": "2159280"
  },
  {
    "text": "us we could rewrite the entire kernel and assembler I have a life I don't want to do",
    "start": "2159280",
    "end": "2164720"
  },
  {
    "text": "that and to do that means again to the point the gentleman in the back raised earlier means our code would really be",
    "start": "2164720",
    "end": "2170599"
  },
  {
    "text": "bound to this particular computer architecture that's good for about four years and then we'd have to think about rewriting it for some new architecture",
    "start": "2170599",
    "end": "2176960"
  },
  {
    "text": "uh I'm not happy doing that kind of work it's weeks of work to write that assembl language I'm not sure it's going to give",
    "start": "2176960",
    "end": "2182280"
  },
  {
    "text": "me much benefit I don't like the risk of taking on that much work and not knowing if we're going to get results couple completely weird",
    "start": "2182280",
    "end": "2188760"
  },
  {
    "text": "ideas on multi-socket machines each socket has local RAM and can talk to the RAM and all the other sockets over an",
    "start": "2188760",
    "end": "2194480"
  },
  {
    "text": "interprocessor link we can use Python calls that bind to the underlying Linux calls to tell Linux make sure that all",
    "start": "2194480",
    "end": "2200680"
  },
  {
    "text": "of the RAM for this core is allocated on the ram attached to this socket so we",
    "start": "2200680",
    "end": "2206319"
  },
  {
    "text": "don't have to go over the interprocessor link to get to the data there might be a benefit from that there might not be I don't know we could also try around",
    "start": "2206319",
    "end": "2213839"
  },
  {
    "text": "playing with the scheduler to uh use processor affinity maybe that's a benefit maybe it isn't easy to try I",
    "start": "2213839",
    "end": "2219040"
  },
  {
    "text": "doubt it's going to provide much benefit item seven is even more weird we could port to the GPU or Intel's new F chip",
    "start": "2219040",
    "end": "2225680"
  },
  {
    "text": "referred to as lrb because the predecessor is called larab we could port to the GPU using the python high",
    "start": "2225680",
    "end": "2230839"
  },
  {
    "text": "level library or for even more performance the low-level GPU Primitives which then binds you to that particular",
    "start": "2230839",
    "end": "2236280"
  },
  {
    "text": "GPU architecture that would get us a huge amount of speed but then you got to get your data",
    "start": "2236280",
    "end": "2241760"
  },
  {
    "text": "center to provision machines with gpus not all data centers are willing to do that and the code becomes kind of",
    "start": "2241760",
    "end": "2248200"
  },
  {
    "text": "unpleasant to write and Mo and understand so that might be a great way to get more speed if we needed it the",
    "start": "2248200",
    "end": "2253839"
  },
  {
    "text": "last item on the list is run this on a cluster and my boss was all over my butt every couple days run this on Hadoop run",
    "start": "2253839",
    "end": "2260079"
  },
  {
    "text": "this on Hadoop well boss man the speed up you want is this big and our Hadoop cluster",
    "start": "2260079",
    "end": "2267480"
  },
  {
    "text": "is this big the folks at Twitter were telling me recently their Hadoop cluster is this",
    "start": "2267480",
    "end": "2272839"
  },
  {
    "text": "big which means that never mind um",
    "start": "2272839",
    "end": "2278599"
  },
  {
    "text": "clusterz introduces a whole new set of errors that we don't know how to deal with we have an operations team that keeps the networking layer running and",
    "start": "2278760",
    "end": "2284960"
  },
  {
    "text": "the operating system L running and they have tools to do that all sorts of monitoring tools and learning tools and predictive maintenance tools and it's",
    "start": "2284960",
    "end": "2291400"
  },
  {
    "text": "wonderful at the apps layer we have a team of people that's us who keep the applications running and we also have",
    "start": "2291400",
    "end": "2296640"
  },
  {
    "text": "tools to monitor that some of our tools are very good some of our tools suck rocks but at least we have them at the",
    "start": "2296640",
    "end": "2302440"
  },
  {
    "text": "cluster layer there is none of that there is no tradition in our industry of how to manage clust finding people who can do it is",
    "start": "2302440",
    "end": "2308480"
  },
  {
    "text": "extremely difficult read impossible there are no good tools for it and when we clusterize our code we're introducing a new layer with a new set of failure",
    "start": "2308480",
    "end": "2315040"
  },
  {
    "text": "modes that we really don't understand terribly well and I'm going to come back to that in just a few minutes so why didn't I do any of those things good",
    "start": "2315040",
    "end": "2321880"
  },
  {
    "start": "2318000",
    "end": "2339000"
  },
  {
    "text": "enough is perfect at this point the analyzer was taking 5 to 10 minutes it's still taking 5 to 10 minutes the fetcher",
    "start": "2321880",
    "end": "2327520"
  },
  {
    "text": "is taking 15 hours so pretty clearly speeding up the analyzer anymore was",
    "start": "2327520",
    "end": "2333240"
  },
  {
    "text": "pointless at 9:00 a.m. the pretty printer runs to generate report reports from this if we don't have this stuff done by 9:00 a.m. it doesn't really",
    "start": "2333240",
    "end": "2339720"
  },
  {
    "start": "2339000",
    "end": "2424000"
  },
  {
    "text": "matter well if the fetcher is the bottom like what do we do we actually worked on this last week one of my co-workers and",
    "start": "2339720",
    "end": "2344960"
  },
  {
    "text": "I put in a little bit of time the first thing we tried was static parallelism fetch a bunch of jobs in parallel the",
    "start": "2344960",
    "end": "2351720"
  },
  {
    "text": "same technique that you saw a few slides back very simple to do the problem is some fetch jobs run quickly and some run",
    "start": "2351720",
    "end": "2358200"
  },
  {
    "text": "slowly so that roadblock that I talked about with static parallelism became a big issue or we could have tried running",
    "start": "2358200",
    "end": "2364319"
  },
  {
    "text": "it in parallel we could run all these hundreds of fetches in parallel I tried that last year crash the database I have",
    "start": "2364319",
    "end": "2371280"
  },
  {
    "text": "worked at three database companies I've consulted for fourth I do not understand why in 2012 we are putting up with this",
    "start": "2371280",
    "end": "2377720"
  },
  {
    "text": "[ __ ] from databases that cannot do what they've been advertised as doing I",
    "start": "2377720",
    "end": "2383000"
  },
  {
    "text": "should not be able to crash a database by sending ordinary requests over the wire it's okay if it sends back a",
    "start": "2383000",
    "end": "2389040"
  },
  {
    "text": "failure code to say you're an idiot stop it but I shouldn't be able to crash it the database we have is a commercial",
    "start": "2389040",
    "end": "2394319"
  },
  {
    "text": "database you've probably all heard the name I'm not going to mention it here because it's such a piece of crap I don't want to give them free publicity",
    "start": "2394319",
    "end": "2400359"
  },
  {
    "text": "it has been a disaster um be very careful about",
    "start": "2400359",
    "end": "2405440"
  },
  {
    "text": "databases I have yet to come across one that actually does what the vendors say one company I worked at you would",
    "start": "2405440",
    "end": "2411160"
  },
  {
    "text": "recognize their name it's a a great big round name I went out with a sales guy and he",
    "start": "2411160",
    "end": "2416640"
  },
  {
    "text": "felt compelled to lie about the product even though the product already met the customer's needs and did everything they wanted the sales guy felt the need to",
    "start": "2416640",
    "end": "2421839"
  },
  {
    "text": "inflate the numbers by a factor of 10 he couldn't tell the difference all right right uh what are",
    "start": "2421839",
    "end": "2427079"
  },
  {
    "start": "2424000",
    "end": "2502000"
  },
  {
    "text": "other ways we could speed up the fetcher I'm not going to go over all these but we could load directly into numpy those Folks at the Continuum analytics",
    "start": "2427079",
    "end": "2433560"
  },
  {
    "text": "consulting firm I referred to they now have a database loader that goes straight from the result set into numpy",
    "start": "2433560",
    "end": "2438880"
  },
  {
    "text": "bypassing the needless conversion from database results set Primitives to Python and then from python Primitives back to machine",
    "start": "2438880",
    "end": "2445760"
  },
  {
    "text": "Primitives we could make another attempt at speeding up the piece of crap database now that we have a dedicated resource who's an expert who used to",
    "start": "2445760",
    "end": "2451440"
  },
  {
    "text": "work at the database company I asked this person why did you leave and the answer was because I can make a ton of money selling you people services for",
    "start": "2451440",
    "end": "2457599"
  },
  {
    "text": "this piece of crap database another thing we could do completely different idea is instead of",
    "start": "2457599",
    "end": "2462920"
  },
  {
    "text": "fetching all the data every day cash all the previous data and just fetch the last 24 hours worth of data big win we",
    "start": "2462920",
    "end": "2468880"
  },
  {
    "text": "will probably do that in a not too distant future and then an even bigger change why are we even sticking around",
    "start": "2468880",
    "end": "2474319"
  },
  {
    "text": "with batch architectures this is 2012 it's not 1974 the first time I used an",
    "start": "2474319",
    "end": "2481359"
  },
  {
    "text": "ATM I took out 20 bucks and I went into the bank and I asked the teller what's my balance what do you think the balance",
    "start": "2481359",
    "end": "2486599"
  },
  {
    "text": "show did it show the minus 20 not until 3:00 the next morning with the teller's terminals reflect the State of the Union",
    "start": "2486599",
    "end": "2492920"
  },
  {
    "text": "because of batch processing why are we still doing this this is insane we're building online",
    "start": "2492920",
    "end": "2498160"
  },
  {
    "text": "systems realtime systems our tools should also be online and real time the pretty printer is also a",
    "start": "2498160",
    "end": "2505240"
  },
  {
    "start": "2502000",
    "end": "2529000"
  },
  {
    "text": "problem because the batch job was finishing after the deadline so we fixed that by speeding up the fetcher we now also run the pretty printer multiple",
    "start": "2505240",
    "end": "2511000"
  },
  {
    "text": "times a day in the future we will have the analyzer or the writer trigger the pretty printer it has a command line interface so we can do that and I have",
    "start": "2511000",
    "end": "2517160"
  },
  {
    "text": "that code working and then we installed a new version of the pretty printer and they broke their command line interface they claim it works but they actually",
    "start": "2517160",
    "end": "2523359"
  },
  {
    "text": "said in the release notes it works but the user interface is now completely different thank you so very very much youve broke all of our",
    "start": "2523359",
    "end": "2529440"
  },
  {
    "start": "2529000",
    "end": "2616000"
  },
  {
    "text": "scripts no no reason why they did that by the way the release notes didn't say and the enhanced value you get is blah",
    "start": "2529440",
    "end": "2534599"
  },
  {
    "text": "it's just somebody came in and changed the UI Lessons Learned I got about 15 minutes",
    "start": "2534599",
    "end": "2539839"
  },
  {
    "text": "left here are the topics for the remainder of the talk the first two about are about computer architecture",
    "start": "2539839",
    "end": "2547400"
  },
  {
    "text": "oh I have to tell you my Von nman story I had a a job as a computer technician at The Institute for advanced study in",
    "start": "2547400",
    "end": "2552800"
  },
  {
    "text": "Princeton it's place where Einstein spent the last part of his career and a bunch of other smart people I was being given a tour of the school of Natural",
    "start": "2552800",
    "end": "2559680"
  },
  {
    "text": "Sciences where I was doing my technician work and the guy giving the tour Professor ball took me up the library",
    "start": "2559680",
    "end": "2566079"
  },
  {
    "text": "and I said isn't this where John Von noyman invented about half of modern Computing Allen touring to the rest and",
    "start": "2566079",
    "end": "2571680"
  },
  {
    "text": "um this is a gross oversimplification but it's okay and uh Professor ball said said yeah yeah he he did his work here I",
    "start": "2571680",
    "end": "2577720"
  },
  {
    "text": "said shouldn't there be a memorial and ball pointed to the other end of the library he said yeah oh yeah so I go and I take a look in behind the bookcase his",
    "start": "2577720",
    "end": "2583520"
  },
  {
    "text": "little plaque I said why why why are you hiding the plaque and Mall looked at me and he",
    "start": "2583520",
    "end": "2589000"
  },
  {
    "text": "said V nyman's work had practical",
    "start": "2589000",
    "end": "2595040"
  },
  {
    "text": "applications also going to talk about scalability why it is generally not the way to get programs to run fast and why",
    "start": "2598760",
    "end": "2605079"
  },
  {
    "text": "I believe we are being go LED down the Garden Path with the best of intentions toward scalability and it is killing us",
    "start": "2605079",
    "end": "2610240"
  },
  {
    "text": "as an industry I'm going to beat on batch jobs a little bit more partly because they're stupid and partly because I have a really good",
    "start": "2610240",
    "end": "2616359"
  },
  {
    "start": "2616000",
    "end": "2640000"
  },
  {
    "text": "slide and uh Sharp Tools for cutting is going to be the uh the Launchpad to the",
    "start": "2616359",
    "end": "2621440"
  },
  {
    "text": "last slide so let's talk a little bit about computer architecture this is what we were taught in college here's the",
    "start": "2621440",
    "end": "2627319"
  },
  {
    "text": "memory hierarchy it ends with disc and tape that's not the way computers have worked since the 1980s for",
    "start": "2627319",
    "end": "2632599"
  },
  {
    "text": "microprocessors the 1970s for Min computers the 1960s for main frames so that was a lie when you were taught it",
    "start": "2632599",
    "end": "2637720"
  },
  {
    "text": "it was never true for anybody in this room unless you are really really old this is the real architecture I've taken",
    "start": "2637720",
    "end": "2643880"
  },
  {
    "start": "2640000",
    "end": "2674000"
  },
  {
    "text": "off the bottom two layers disc and tape this is what's really going on in terms of memory hierarchy the second item from the top",
    "start": "2643880",
    "end": "2649400"
  },
  {
    "text": "physical registers that's there to allow the microprocessor to do that aggressive extraction of parallelism from the",
    "start": "2649400",
    "end": "2655440"
  },
  {
    "text": "instruction stream at runtime it allows instructions to be executed out of order it allows instructions to go both ways",
    "start": "2655440",
    "end": "2661720"
  },
  {
    "text": "down a branch even before we know which way the branch is going to go and then throw out the path that should not have been taken",
    "start": "2661720",
    "end": "2667240"
  },
  {
    "text": "it allows us to implement hyperthreading it's wonderful everything else below that is for hiding memory",
    "start": "2667240",
    "end": "2673000"
  },
  {
    "text": "latency and that's kind of interesting I was wondering why is latency such a big deal so I looked at the experience I've",
    "start": "2673000",
    "end": "2680160"
  },
  {
    "start": "2674000",
    "end": "2725000"
  },
  {
    "text": "had programming computers not for 30 years but actually coming up on 40 thank you so much if you want to feel",
    "start": "2680160",
    "end": "2686520"
  },
  {
    "text": "old go to the Computer History Museum in Mountain View and you'll feel fine until the last five minutes when they bring you up to the current day and you look",
    "start": "2686520",
    "end": "2692079"
  },
  {
    "text": "at some antique computer and say well that was the one I learned on oh crap I feel",
    "start": "2692079",
    "end": "2697599"
  },
  {
    "text": "old when I started doing this stuff in the 70s early' 70s memory and CPU were",
    "start": "2697599",
    "end": "2702640"
  },
  {
    "text": "equally matched in a single instruction cycle we could do two memory accesses one for the instruction one for the data worked",
    "start": "2702640",
    "end": "2708200"
  },
  {
    "text": "perfectly over the intervening time memory got 10 times faster that's a logarithmic scale on the y- axis memory",
    "start": "2708200",
    "end": "2713800"
  },
  {
    "text": "got 10 times faster a little bit more CPUs got 3,000 times faster hence that",
    "start": "2713800",
    "end": "2719760"
  },
  {
    "text": "huge gap off on the right about a factor of 300 times so yeah we got to hide memory latency the memory is slow",
    "start": "2719760",
    "end": "2727880"
  },
  {
    "start": "2725000",
    "end": "2856000"
  },
  {
    "text": "so what does all this tell us it says that Ram is not really Random Access Memory anymore it's not true that all",
    "start": "2728440",
    "end": "2733720"
  },
  {
    "text": "locations take the same amount of time to access it depends on where you're accessing them and how recently adjacent",
    "start": "2733720",
    "end": "2740119"
  },
  {
    "text": "locations have an access to pulling the thing you want to the cache wouldn't it be cool if your program could give a",
    "start": "2740119",
    "end": "2745440"
  },
  {
    "text": "hint to the CPU to say hey CPU in a few instructions from now I'm going to need this location so why don't you start",
    "start": "2745440",
    "end": "2750880"
  },
  {
    "text": "fetching it now a prefetch instruction you can do that but python can can't",
    "start": "2750880",
    "end": "2756000"
  },
  {
    "text": "allow you to express that and C does not allow you to express that either there are a bunch of instructions like that that the machine has but our languages",
    "start": "2756000",
    "end": "2761760"
  },
  {
    "text": "do not let us get to so we're giving up a lot of performance that the hardware can actually",
    "start": "2761760",
    "end": "2767520"
  },
  {
    "text": "provide the lesson from uh this first line here is go ahead and use memory just don't read it or write it in",
    "start": "2767520",
    "end": "2774400"
  },
  {
    "text": "particular avoid random reads go sequentially because Ram is kind of like dis now random reads are 10 times slower",
    "start": "2774400",
    "end": "2779480"
  },
  {
    "text": "than sequential reads and try to avoid rights when you do an occasional right here or there",
    "start": "2779480",
    "end": "2785440"
  },
  {
    "text": "there's that's fine the chip has a special buffer called a right buffer to hide the fact that rights are very slow but if you do large Vector rights the",
    "start": "2785440",
    "end": "2791920"
  },
  {
    "text": "right buffer fills up and after it fills up which occurs very quickly it's a small buffer then all succeeding rights",
    "start": "2791920",
    "end": "2797319"
  },
  {
    "text": "will run at memory speed and your CPU slows to a crawl access vectors in blocks that are",
    "start": "2797319",
    "end": "2803800"
  },
  {
    "text": "L1 cach friendly you really need to start thinking of your program not as having access to a giant array of ram because it's so slow but really in terms",
    "start": "2803800",
    "end": "2810800"
  },
  {
    "text": "of having access to the L1 cache if your work doesn't fit in the L1 cache performance is going to go down the drain you're going to be running at L2",
    "start": "2810800",
    "end": "2817440"
  },
  {
    "text": "speed or L3 speed or Worse Ram speed try to use Hardware Primitives",
    "start": "2817440",
    "end": "2822800"
  },
  {
    "text": "which is why we use numpy instead of these beautiful fuzz balls that we get from python where how big is an in now it's",
    "start": "2822800",
    "end": "2829119"
  },
  {
    "text": "80 bytes for INT something like that they provide all sorts of wonderful services to us but for high performance",
    "start": "2829119",
    "end": "2834240"
  },
  {
    "text": "Computing we can't afford the overhead the machine has high-speed instructions for its Primitives we need to stick with",
    "start": "2834240",
    "end": "2839440"
  },
  {
    "text": "the Primitives so those instructions can be used write code usually in C that takes",
    "start": "2839440",
    "end": "2844599"
  },
  {
    "text": "advantage of knowledge of the out of order execution and the nature of the cach versus RAM and touch",
    "start": "2844599",
    "end": "2851839"
  },
  {
    "text": "the big data once only it's a big win because memory overhead is such a problem another lesson is that speed has",
    "start": "2851839",
    "end": "2859079"
  },
  {
    "start": "2856000",
    "end": "2897000"
  },
  {
    "text": "value for a project that I cannot describe in any depth we spend we think about 300,000 a month on servers if we",
    "start": "2859079",
    "end": "2864920"
  },
  {
    "text": "could speed up that code not by 100,000 or 10,000 or 1,000 but just by a factor of a 100 we would free up $297,000 a",
    "start": "2864920",
    "end": "2872240"
  },
  {
    "text": "month that would pay for a lot of programmers or a lot of additional game developers or if I got 10% of it I could",
    "start": "2872240",
    "end": "2878480"
  },
  {
    "text": "afford long pants so if we start thinking about performance as something that we're",
    "start": "2878480",
    "end": "2884079"
  },
  {
    "text": "responsible for instead of just saying to the operations team oh add more servers and the problem will go away",
    "start": "2884079",
    "end": "2889440"
  },
  {
    "text": "because our stuff is horizontally scalable we'd lower our Capital expenditures our operating expenditures",
    "start": "2889440",
    "end": "2894520"
  },
  {
    "text": "we'd also lower our CO2 emissions so maybe New York would not have to drown in the next",
    "start": "2894520",
    "end": "2899640"
  },
  {
    "start": "2897000",
    "end": "2943000"
  },
  {
    "text": "storm if that's funny you weren't watching TV I have friends who live there and it was not very pleasant for them",
    "start": "2900079",
    "end": "2907319"
  },
  {
    "text": "um another lesson clusters are hard anybody remember that old Barbie with the pull string you pull it and she",
    "start": "2907319",
    "end": "2913240"
  },
  {
    "text": "says math is hard well clusters are hard over on the left is a uh cell phone snapshot of a",
    "start": "2913240",
    "end": "2921319"
  },
  {
    "text": "piece of paper attached to the whiteboard in my group business intelligence with the five Prime directives for bi Captain peard got by",
    "start": "2921319",
    "end": "2927559"
  },
  {
    "text": "with one we have five and off on the left for each one of those five Prime directives an example of where we failed",
    "start": "2927559",
    "end": "2932760"
  },
  {
    "text": "to meet that directive because clusters are hard I'm not going to go into details you can read the slide as well",
    "start": "2932760",
    "end": "2938319"
  },
  {
    "text": "as I can and send me an email if something's not clear the point is we don't know how to make this stuff work very",
    "start": "2938319",
    "end": "2944559"
  },
  {
    "start": "2943000",
    "end": "2961000"
  },
  {
    "text": "well batching why are we still doing batching I love this picture I use it in every slideshow so the reason I'm using",
    "start": "2944559",
    "end": "2950119"
  },
  {
    "text": "it here is to beat on batching but really even if I had no reason I'd still show you this great photo you can sort of see the pig standing out in front of",
    "start": "2950119",
    "end": "2956599"
  },
  {
    "text": "the Python one of them is involved one of them is",
    "start": "2956599",
    "end": "2961799"
  },
  {
    "text": "committed thank you two shows nightly bring your friends tip your waitress when you do batch",
    "start": "2962359",
    "end": "2969359"
  },
  {
    "text": "programming jobs might fail and they might fail silently in which case you find out when you come in in the morning and your customers or clients have sent",
    "start": "2969359",
    "end": "2975680"
  },
  {
    "text": "you emails saying where's my data or they might fail loudly and then you get a 3: a.m. phone call in my case it was a",
    "start": "2975680",
    "end": "2981960"
  },
  {
    "text": "5 amm phone call and my boss actually wanted me to call other people on the team and wake them up at 5:00 in the",
    "start": "2981960",
    "end": "2987040"
  },
  {
    "text": "morning and I said no not unless you pay me like a manager that's what managers get paid for I got that phone call",
    "start": "2987040",
    "end": "2993760"
  },
  {
    "text": "because we happened to have one of our guys in in China visiting his significant other and he happened to be monitoring our system because what else",
    "start": "2993760",
    "end": "3000520"
  },
  {
    "text": "would you do when you're in China visiting your significant",
    "start": "3000520",
    "end": "3004519"
  },
  {
    "text": "other so he called me to tell me there was a problem with batch",
    "start": "3006000",
    "end": "3011119"
  },
  {
    "text": "job don't like those uh late night phone calls and if you're doing classical batch processing which starts at",
    "start": "3011119",
    "end": "3017280"
  },
  {
    "text": "midnight and runs until 8:00 a.m. or so you've just given up a lot of your compute time so you're going to have to have more servers to get the work done",
    "start": "3017280",
    "end": "3022880"
  },
  {
    "text": "in the length of the batch window and of course batch jobs add latency you submit a request and at some point in the",
    "start": "3022880",
    "end": "3028280"
  },
  {
    "text": "future you get a response by which time you've forgotten what the question was batch jobs are 1970s technology we",
    "start": "3028280",
    "end": "3034599"
  },
  {
    "start": "3031000",
    "end": "3222000"
  },
  {
    "text": "should not be doing them so fast code is cheap code save money save the planet",
    "start": "3034599",
    "end": "3040160"
  },
  {
    "text": "your machine is insanely fast the computer that I'm using at my employer gives me 80 billion instructions a",
    "start": "3040160",
    "end": "3047520"
  },
  {
    "text": "second before hyperthreading added hyperthreading it's probably about a 100 billion instructions a",
    "start": "3047520",
    "end": "3053319"
  },
  {
    "text": "second how many instructions do you you think it takes to move 140 bytes from my cell phone to your cell phone do you",
    "start": "3053319",
    "end": "3058720"
  },
  {
    "text": "think you could do a lot of those messages per second if you had 100 billion of them 100 billion instructions per second to do I kind of think you",
    "start": "3058720",
    "end": "3065599"
  },
  {
    "text": "could or you could scale it out as Twitter has done the Twitter cluster according to the guy in charge of the",
    "start": "3065599",
    "end": "3072160"
  },
  {
    "text": "group that keeps their servers running I talked to him a few weeks ago their cluster is 100,000 plus servers now sure",
    "start": "3072160",
    "end": "3079400"
  },
  {
    "text": "not all of them are moving messages from point A to point B maybe it's just 1% maybe it's just a thousand machines I wrote the same code",
    "start": "3079400",
    "end": "3086000"
  },
  {
    "text": "2008 it conformed to the Twitter API it handled the 2008 volume on one box not a",
    "start": "3086000",
    "end": "3091880"
  },
  {
    "text": "thousand certainly not 100,00 last week after the election anybody here you you know we had an",
    "start": "3091880",
    "end": "3097040"
  },
  {
    "text": "election right Twitter put out a blog post a press release disguises blog post",
    "start": "3097040",
    "end": "3103319"
  },
  {
    "text": "boasting that their system had not crashed on Election night that's kind of like a car company putting out a press",
    "start": "3103319",
    "end": "3108520"
  },
  {
    "text": "release saying our cars do not explode when driven on roads by",
    "start": "3108520",
    "end": "3114000"
  },
  {
    "text": "people the fact that they put out that blog post tells you how close to the hairy ede they are of falling over",
    "start": "3114359",
    "end": "3120680"
  },
  {
    "text": "because they're moving 140 bytes from my cell phone to your cell phone and that's a hard problem makes them get all scrunchy",
    "start": "3120680",
    "end": "3129200"
  },
  {
    "text": "inside speed up your code first if I can write code in a week's work to handle the Twitter message volume conforming to",
    "start": "3129520",
    "end": "3135599"
  },
  {
    "text": "their apis on one box so can they clusterize is the last resort when everything else is failed because",
    "start": "3135599",
    "end": "3141680"
  },
  {
    "text": "clusterz introduces so many problems you don't want to deal with if your business is real time your software should be two",
    "start": "3141680",
    "end": "3147559"
  },
  {
    "text": "batch mode is convenient for programmers but it produces lousy results for our clients because it introduces latency it",
    "start": "3147559",
    "end": "3153400"
  },
  {
    "text": "means we have to use more servers to make up for the limitations of the batch window and it makes things fail when we're asleep online code fails when",
    "start": "3153400",
    "end": "3159839"
  },
  {
    "text": "we're awake that's a better time to fail and make sure your tools are working correctly remember that problem we had",
    "start": "3159839",
    "end": "3165599"
  },
  {
    "text": "with numpy on my slides earlier on where numpy was being passed a mixture of string float and int and therefore it",
    "start": "3165599",
    "end": "3171040"
  },
  {
    "text": "couldn't do a good job so we have all these wonderful tools make sure they work correctly another example of that in our case is this piece of crap",
    "start": "3171040",
    "end": "3177359"
  },
  {
    "text": "database we've put all sorts of tables in it over the year we've never optimized it and I've worked as I said",
    "start": "3177359",
    "end": "3183200"
  },
  {
    "text": "at other database companies with the same problem the database gives you all sorts of ways to optimize your stuff and",
    "start": "3183200",
    "end": "3188400"
  },
  {
    "text": "they're too hard to understand it's kind of like you you're put in a garden with a 100 paths in front of you and at the",
    "start": "3188400",
    "end": "3193480"
  },
  {
    "text": "end of One path is a gorgeous Prince or princess or possibly the shellak corporate entity if you're in that kind",
    "start": "3193480",
    "end": "3199319"
  },
  {
    "text": "into that kind of thing Star Trek reference how many people got it one hand one okay I'll see you",
    "start": "3199319",
    "end": "3206599"
  },
  {
    "text": "later um and at the end of the other 99 paths our tigers that are going to bite your face off and you can't tell which",
    "start": "3206599",
    "end": "3212319"
  },
  {
    "text": "is which so we have this database we haven't tuned it of course the performance is garbage make sure if",
    "start": "3212319",
    "end": "3218880"
  },
  {
    "text": "you're using Sharp Tools that you're using them correctly and not just using them to pound dirt one more thing hey I'm gonna end on",
    "start": "3218880",
    "end": "3225760"
  },
  {
    "start": "3222000",
    "end": "3550000"
  },
  {
    "text": "time one more thing I've been doing this as I said for quite a while and one unrelenting theme over the 40 years I've",
    "start": "3225760",
    "end": "3232240"
  },
  {
    "text": "been doing this I fell in love with the stuff when I was 13 um friend of mine showed me how to mark up Optical Mark",
    "start": "3232240",
    "end": "3238640"
  },
  {
    "text": "cards they're kind of like the old Punch Cards but number two pencil you mark them up in the cafeteria and I was hooked and by the end of the week I knew",
    "start": "3238640",
    "end": "3244440"
  },
  {
    "text": "what I was going to do for the rest of my life I'm very lucky that way back in the 1970s we had computers in our junior",
    "start": "3244440",
    "end": "3249720"
  },
  {
    "text": "high school because one of the teachers wanted to do that and she was married to the",
    "start": "3249720",
    "end": "3255480"
  },
  {
    "text": "mayor they tried to cancel that program after a year and I went to the board of education and I was like 14 or something",
    "start": "3255680",
    "end": "3261680"
  },
  {
    "text": "and I said uh at the public testimony I said you should provide money for this and I gave them a list of bad reasons and they did and afterwards I asked one",
    "start": "3261680",
    "end": "3268440"
  },
  {
    "text": "of the board members uh I said I'm only 14 but I'm not stupid my my arguments were terrible why did you give me the money and the guy said we cut the",
    "start": "3268440",
    "end": "3274480"
  },
  {
    "text": "budgets of dozens of programs and no one cared to show up but you so you got the slush fund okay if you don't ask you won't get",
    "start": "3274480",
    "end": "3281760"
  },
  {
    "text": "so for 40 years we have been coming up with better languages better operating environments better",
    "start": "3281760",
    "end": "3287079"
  },
  {
    "text": "tools and in the late 90s we took a turn a bad turn it was the.com boom and we",
    "start": "3287079",
    "end": "3294319"
  },
  {
    "text": "were very concerned with making websites that wouldn't fall over if they got very popular I don't know if anybody here remembers that eBay fell over a lot when",
    "start": "3294319",
    "end": "3300400"
  },
  {
    "text": "it got popular early on so the industry consensus became programmers don't worry",
    "start": "3300400",
    "end": "3306200"
  },
  {
    "text": "about productivity about performance just worry about horizontal scalability and then we can throw the performance",
    "start": "3306200",
    "end": "3312040"
  },
  {
    "text": "problem over the wall into Ops and they can improve performance by just adding machines scale it up scalability is the",
    "start": "3312040",
    "end": "3318440"
  },
  {
    "text": "solution but here's the thing as programmers we have dozens of tools in our toolbox for performance I've shown you a few tonight all we gave the team",
    "start": "3318440",
    "end": "3325440"
  },
  {
    "text": "was one tool add more computers what's the result the result",
    "start": "3325440",
    "end": "3330839"
  },
  {
    "text": "is Twitter has over 100,000 servers in its data centers and that's just insane they're not the only ones",
    "start": "3330839",
    "end": "3337280"
  },
  {
    "text": "Google's building huge data centers Facebook Apple Microsoft lots of other companies including some I can't talk",
    "start": "3337280",
    "end": "3343160"
  },
  {
    "text": "about are building data centers New York Times was running an article a couple months ago about how",
    "start": "3343160",
    "end": "3348680"
  },
  {
    "text": "data centers now use a significant fraction of our nation's power which means we're burning coal or oil to power",
    "start": "3348680",
    "end": "3355480"
  },
  {
    "text": "these things you know what happens when you burn coal every time you turn on a new Coal Power Plant you condemn a couple hundred",
    "start": "3355480",
    "end": "3360839"
  },
  {
    "text": "children in the world to die from asthma we should not do that I say this because I used to work at a company that did high efficiency lighting and that was",
    "start": "3360839",
    "end": "3367119"
  },
  {
    "text": "part of the argument that I made there we don't really want to be burning coal we don't want to be building data centers and yet our data centers are",
    "start": "3367119",
    "end": "3373200"
  },
  {
    "text": "filled with racks of servers we're running out of power we running out of chilling capacity running out of physical space we should not be doing",
    "start": "3373200",
    "end": "3379599"
  },
  {
    "text": "this efficient code is a competitive advantage and as programmers we should take back from the Ops Team the",
    "start": "3379599",
    "end": "3385200"
  },
  {
    "text": "responsibility that is rightfully ours to write high performance code to do that we cannot have people in the",
    "start": "3385200",
    "end": "3390480"
  },
  {
    "text": "situation that I was for the speedups I talked about tonight you should not have to know this lowlevel mind-numbing",
    "start": "3390480",
    "end": "3395720"
  },
  {
    "text": "detail about computers I like this but I have no social life never have tried it",
    "start": "3395720",
    "end": "3400839"
  },
  {
    "text": "once didn't like it ugly bags of mostly water as far as I can",
    "start": "3400839",
    "end": "3406039"
  },
  {
    "text": "tell anybody get that joke Tre thank",
    "start": "3406039",
    "end": "3411720"
  },
  {
    "text": "you which series thank you my boss the one I was making",
    "start": "3411720",
    "end": "3417920"
  },
  {
    "text": "fun of before he said he saw Star Trek and I said oh what do you think what do you like about he said oh I love Star Trek with Captain peard that's",
    "start": "3417920",
    "end": "3426000"
  },
  {
    "text": "not you mean there was another series before that um we need to take back the stuff that",
    "start": "3426000",
    "end": "3433280"
  },
  {
    "text": "we know how to do well that we have the tools to do but we need better tools to do that and one tool in particular that",
    "start": "3433280",
    "end": "3439440"
  },
  {
    "text": "I would like to see in Python is a high performance numeric vector class",
    "start": "3439440",
    "end": "3445400"
  },
  {
    "text": "so that if you give python an expression that says y equal ax Cub plus bx2 plus CX plus d it would know how to do that",
    "start": "3445400",
    "end": "3452920"
  },
  {
    "text": "efficiently using the underlying Vector instructions knowing how to block things in the cache knowing how to schedule",
    "start": "3452920",
    "end": "3458079"
  },
  {
    "text": "things as efficiently as possible on the machine in question it could do the stuff that I had to do by",
    "start": "3458079",
    "end": "3463599"
  },
  {
    "text": "hand now you might say why a numeric vector class why not a generic vector class and the reason is the underlying",
    "start": "3463599",
    "end": "3469200"
  },
  {
    "text": "machine doesn't know from generic it knows about numbers Intel and AMD and IBM and arm have added the Vector",
    "start": "3469200",
    "end": "3475039"
  },
  {
    "text": "instructions because those are the things that clients need to do a lot of on computers we have huge amounts of",
    "start": "3475039",
    "end": "3480640"
  },
  {
    "text": "data flowing into our systems now whether it's sensor networks or social networks massive amounts of data coming",
    "start": "3480640",
    "end": "3485760"
  },
  {
    "text": "in it's going to be processed in Vector form the hardware can support the vectors but our languages aren't up to",
    "start": "3485760",
    "end": "3490839"
  },
  {
    "text": "the task so if you want to get the kind of performance I got here either spend 40 years like I did learning this",
    "start": "3490839",
    "end": "3495920"
  },
  {
    "text": "nonsense and making fun of database companies in Twitter especially it's easy to do Twitter or let's press the language",
    "start": "3495920",
    "end": "3502760"
  },
  {
    "text": "vendors in particular python because it is such a marous language for everything else to give us the tools we need to take advantage of the underlying",
    "start": "3502760",
    "end": "3508319"
  },
  {
    "text": "Hardware this 100 billion instruction per second machine that you can get off the shelf not fancy Hardware if you need",
    "start": "3508319",
    "end": "3513440"
  },
  {
    "text": "more compute by the way you can get an eight socket motherboard and double your uh compute power if you need memory you",
    "start": "3513440",
    "end": "3518720"
  },
  {
    "text": "can get two terabyte machines off the shelf not fancy stuff if you go beyond that yeah then you're going to get",
    "start": "3518720",
    "end": "3524319"
  },
  {
    "text": "reamed but two terabytes and 100 billion instructions per second that's a fair chunk of compute power let's find ways",
    "start": "3524319",
    "end": "3530359"
  },
  {
    "text": "to make use of that effectively instead of trying to scale out and fill up our data Cent with rack upon rack of cheap",
    "start": "3530359",
    "end": "3536000"
  },
  {
    "text": "boxes thank you so much David you're welome thank you for the",
    "start": "3536000",
    "end": "3543480"
  },
  {
    "text": "[Music]",
    "start": "3544040",
    "end": "3549640"
  },
  {
    "text": "opportunity",
    "start": "3549640",
    "end": "3552640"
  }
]