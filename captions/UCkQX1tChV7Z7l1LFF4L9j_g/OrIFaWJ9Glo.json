[
  {
    "start": "0",
    "end": "105000"
  },
  {
    "text": "[Music]",
    "start": "460",
    "end": "10840"
  },
  {
    "text": "my name is Michael macowski I'm the UI architect uh for a company called Snap",
    "start": "13160",
    "end": "18760"
  },
  {
    "text": "logic as my shirt might hint to you and this is uh Josh Powell that's with two",
    "start": "18760",
    "end": "26840"
  },
  {
    "text": "L's uh Josh and I have written a book called single page web applications",
    "start": "26840",
    "end": "32558"
  },
  {
    "text": "JavaScript end to end we both gave a presentation yesterday but it appears to",
    "start": "32559",
    "end": "39480"
  },
  {
    "text": "have been a popular uh presentation given the fact that we were about one",
    "start": "39480",
    "end": "44559"
  },
  {
    "text": "and a half times our room capacity both of us and also Michael Jackson cancelled",
    "start": "44559",
    "end": "51079"
  },
  {
    "text": "today which came as a shock to uh not too many people apparently um I probably",
    "start": "51079",
    "end": "56840"
  },
  {
    "text": "could have told you that six months ago but um um so we were asked to present here in a",
    "start": "56840",
    "end": "64640"
  },
  {
    "text": "larger room and um so what we've done is we've Blended things together so what",
    "start": "64640",
    "end": "69840"
  },
  {
    "text": "I'd like to do is introduce you to uh or welcome to an evening at The Improv uh",
    "start": "69840",
    "end": "75640"
  },
  {
    "text": "as we uh meld our two presentations together and try to bring the best of both all right uh we're going to try to",
    "start": "75640",
    "end": "82840"
  },
  {
    "text": "give you uh both a little bit of a higher overview of what an Spa really is",
    "start": "82840",
    "end": "89119"
  },
  {
    "text": "and what it's prosed and cons are and we're also going to try to do a little deeper dive in some of the harder stuff",
    "start": "89119",
    "end": "95759"
  },
  {
    "text": "that uh I wasn't able to get to yesterday in the presentation so without further Ado I'm",
    "start": "95759",
    "end": "101600"
  },
  {
    "text": "going to break into reading off my slides all right so yes all right so uh slide",
    "start": "101600",
    "end": "110719"
  },
  {
    "start": "105000",
    "end": "430000"
  },
  {
    "text": "number one we're talking about uh key JavaScript techniques for successful",
    "start": "110719",
    "end": "116960"
  },
  {
    "text": "large scale applications um I gave a nice little speech about uh growing up and I'm not",
    "start": "116960",
    "end": "123119"
  },
  {
    "text": "going to bore people who happen to be at my presentation yesterday again but the Crux the punchline was when you're",
    "start": "123119",
    "end": "131160"
  },
  {
    "text": "younger you can do stuff and get away with it when you're older and more mature and a more complex individual",
    "start": "131160",
    "end": "138800"
  },
  {
    "text": "certain rules about society that no long that that previously didn't apply to you now apply and such is the case with",
    "start": "138800",
    "end": "146519"
  },
  {
    "text": "JavaScript if you're doing flashing purple monkeys on the page uh who cares",
    "start": "146519",
    "end": "152280"
  },
  {
    "text": "if you're using a global variable however if you're doing an inventory satisfaction system and your front end",
    "start": "152280",
    "end": "160200"
  },
  {
    "text": "is running um uh with 100,000 lines of JavaScript you're probably going to need",
    "start": "160200",
    "end": "165599"
  },
  {
    "text": "to use a little more discipline and um convention to be able",
    "start": "165599",
    "end": "170640"
  },
  {
    "text": "to work on such a large project with multiple developers okay so um we're going to",
    "start": "170640",
    "end": "176959"
  },
  {
    "text": "talk about my favorite subject for a moment that'd be me um as mentioned uh I'm a co-author of",
    "start": "176959",
    "end": "184840"
  },
  {
    "text": "the uh single page web applications from end to end this is currently in Meep I'm",
    "start": "184840",
    "end": "190159"
  },
  {
    "text": "not going to give you the Hard Sell you into it buy it okay please uh Daddy needs a new",
    "start": "190159",
    "end": "196360"
  },
  {
    "text": "car all right um the uh and I've already mentioned that I'm a architect at snap",
    "start": "196360",
    "end": "203519"
  },
  {
    "text": "logic uh a lot of fun there by the way really excited about our next Generation product which I can't show you um this",
    "start": "203519",
    "end": "210000"
  },
  {
    "text": "is actually my fifth uh single page application large scale commercial",
    "start": "210000",
    "end": "215120"
  },
  {
    "text": "single page application um and I was the architect on four out of the five it was",
    "start": "215120",
    "end": "220400"
  },
  {
    "text": "the primary developer on the fifth um uh the only problem there is the guy who was the primary architect on that was",
    "start": "220400",
    "end": "226360"
  },
  {
    "text": "brighter than I was so he got the job um and uh as much as that pains me to say",
    "start": "226360",
    "end": "232079"
  },
  {
    "text": "it he was a brilliant guy uh still is actually um and uh prior to stumbling",
    "start": "232079",
    "end": "238879"
  },
  {
    "text": "into uh single page uh application development um I was actually a backend",
    "start": "238879",
    "end": "246040"
  },
  {
    "text": "guy had a couple hundred servers that was responsible for for an advertising platform on a couple different",
    "start": "246040",
    "end": "252239"
  },
  {
    "text": "continents and we did about two billion requests per day web transactions as you",
    "start": "252239",
    "end": "257560"
  },
  {
    "text": "might have guessed it was online advertising and um just one day um had a",
    "start": "257560",
    "end": "264560"
  },
  {
    "text": "task that nobody else seemed to be able to do um and it ended up being a single",
    "start": "264560",
    "end": "269800"
  },
  {
    "text": "page web application and I've been doing them ever since um also a great uh",
    "start": "269800",
    "end": "274960"
  },
  {
    "text": "experience uh coming from that environment into single page web applications because in that environment",
    "start": "274960",
    "end": "280840"
  },
  {
    "text": "where we use mod Pearl to um uh Pearl if anybody's ever worked in Pearl here you",
    "start": "280840",
    "end": "287440"
  },
  {
    "text": "know that the structure of your program comes from convention not from the code",
    "start": "287440",
    "end": "293320"
  },
  {
    "text": "itself javascript's very similar to that um and we'll talk about uh my first",
    "start": "293320",
    "end": "300199"
  },
  {
    "text": "Spa in fact I'll show you an example of it in a little bit so with that I'm going to hand the microphone over to",
    "start": "300199",
    "end": "305919"
  },
  {
    "text": "Josh and he's going to talk about his favorite subject um yeah I'm co-author in the",
    "start": "305919",
    "end": "311800"
  },
  {
    "text": "book uh my blog is on Js jing.fm",
    "start": "311800",
    "end": "317360"
  },
  {
    "text": "[Laughter] we're going to cover today uh first of",
    "start": "326470",
    "end": "332240"
  },
  {
    "text": "all we're going to look at as some example single page web applications uh second of all Josh is",
    "start": "332240",
    "end": "338120"
  },
  {
    "text": "going to take over and he is going to um talk about the pros and cons of single",
    "start": "338120",
    "end": "343960"
  },
  {
    "text": "page web applications and kind of what makes one of on a philosophical higher",
    "start": "343960",
    "end": "349560"
  },
  {
    "text": "plane way and then uh we're going to look at some key JavaScript Concepts",
    "start": "349560",
    "end": "354600"
  },
  {
    "text": "that we found um uh both working together and then over the years uh that",
    "start": "354600",
    "end": "360600"
  },
  {
    "text": "are really necessary to know to be successful with a large scage scale application uh the fourth part is where",
    "start": "360600",
    "end": "367880"
  },
  {
    "text": "you try to ask questions and we run out of the room as fast as possible okay that's the evasive",
    "start": "367880",
    "end": "373639"
  },
  {
    "text": "actions that being said let's talk about some example uh single page applications",
    "start": "373639",
    "end": "378759"
  },
  {
    "text": "I'm going to show you today the first one that I wrote back in 2007 which was for amds where to buy site and by AMD I",
    "start": "378759",
    "end": "386319"
  },
  {
    "text": "mean the people that make chips um and uh like the sledgehammer amd64 those guys",
    "start": "386319",
    "end": "394039"
  },
  {
    "text": "um second one we'll show you is one that I worked with uh where I was not the architect actually but primary developer",
    "start": "394039",
    "end": "401319"
  },
  {
    "text": "uh for game Crush which is uh quite a nice commercial site with uh a little bit of the not quite",
    "start": "401319",
    "end": "408520"
  },
  {
    "text": "NSFW Edge to it um and then we're going to also go over an exercise that we have",
    "start": "408520",
    "end": "414160"
  },
  {
    "text": "in the book so I'm going to go over these relatively quickly because we want to get to uh some of the uh the meat",
    "start": "414160",
    "end": "420840"
  },
  {
    "text": "that Josh referred to earlier all",
    "start": "420840",
    "end": "426120"
  },
  {
    "text": "right so the first one we're going to look at is the AMD where to buy site this was actually run off of two old AMD",
    "start": "429520",
    "end": "437400"
  },
  {
    "start": "430000",
    "end": "917000"
  },
  {
    "text": "64 servers that we dug out of the back room um it was actually run in a total",
    "start": "437400",
    "end": "444120"
  },
  {
    "text": "of uh eight different countries eventually um and we handle in each one",
    "start": "444120",
    "end": "450479"
  },
  {
    "text": "of these tabs here uh in some cases on the order of 1500 products at its peak",
    "start": "450479",
    "end": "457080"
  },
  {
    "text": "um so what I've done was dug up one of the pages um and just shows you or I'm",
    "start": "457080",
    "end": "462840"
  },
  {
    "text": "just going to show you what uh what magic we had wrought back in late 2006 early 2007 this was actually",
    "start": "462840",
    "end": "470800"
  },
  {
    "text": "pretty unheard of at the time um anybody here use New Egg besides me there we go",
    "start": "470800",
    "end": "477159"
  },
  {
    "text": "there we go all right so I've got stock and New Egg no I'm kidding but um uh I",
    "start": "477159",
    "end": "482800"
  },
  {
    "text": "do and one of my favorite features of it is power search we can go in and pick all the attributes you want of this",
    "start": "482800",
    "end": "489479"
  },
  {
    "text": "product you specify it down to like the screen size and everything and then you press go and it comes back and says no",
    "start": "489479",
    "end": "495240"
  },
  {
    "text": "results found after chugging away for 20 seconds right and then you get to do",
    "start": "495240",
    "end": "500319"
  },
  {
    "text": "that five or six different times finding no results until that seventh time and",
    "start": "500319",
    "end": "505440"
  },
  {
    "text": "now that you've spent 5 10 minutes doing this the seventh time you do it you come back with 500 results all right so not",
    "start": "505440",
    "end": "513279"
  },
  {
    "text": "exactly the world's best ux one thing that I was really proud of with this was",
    "start": "513279",
    "end": "518760"
  },
  {
    "text": "that um you could actually click about 10 times in the amount of time that the",
    "start": "518760",
    "end": "525560"
  },
  {
    "text": "previous site took for one round trip we downloaded the entire database",
    "start": "525560",
    "end": "533200"
  },
  {
    "text": "uh gzipped this is before Douglas crockford came up with the name Jason I believe in 2007 um or I'm sorry he",
    "start": "533200",
    "end": "540120"
  },
  {
    "text": "invented it um and uh I was just passing native JavaScript data structures in and",
    "start": "540120",
    "end": "549200"
  },
  {
    "text": "um the uh actual database for our largest product group of 1500 came in um",
    "start": "549200",
    "end": "556399"
  },
  {
    "text": "at about 250 uh kilobytes compressed and gzipped um so pretty impressive and um",
    "start": "556399",
    "end": "563600"
  },
  {
    "text": "our uh the people that ordered this at AMD were really happy with that so it was good it kind of nice to go back into",
    "start": "563600",
    "end": "570040"
  },
  {
    "text": "the way back machine all right so um I'm going to go now to the uh a little bit",
    "start": "570040",
    "end": "575560"
  },
  {
    "text": "more risque site which is the uh game Crush um and I just want to show you a",
    "start": "575560",
    "end": "581880"
  },
  {
    "text": "little bit of evolution here um so let's go and look at mave uh",
    "start": "581880",
    "end": "588519"
  },
  {
    "text": "one of my favorites apparently this is kind of a cross between a gaming site and a dating site um what I'm going to",
    "start": "588519",
    "end": "595600"
  },
  {
    "text": "do here is just pull up a couple of the images that mave has on site and what I want you to take a look at is notice",
    "start": "595600",
    "end": "601600"
  },
  {
    "text": "that on the right hand side I've got comments that are being loaded and uh on the left hand side I have ma um I'm",
    "start": "601600",
    "end": "608680"
  },
  {
    "text": "focusing on Ma right now um but the um the thing that you'll notice is that as",
    "start": "608680",
    "end": "614480"
  },
  {
    "text": "I move forward on these pictures here the only thing that updates even though I have multiple layers on the screen",
    "start": "614480",
    "end": "620800"
  },
  {
    "text": "here is the image of mave the only thing that changes is what needs to change there's no time wasted on rendering the",
    "start": "620800",
    "end": "628399"
  },
  {
    "text": "entire page now now imagine that you're looking at this in a Web 2.0 page right",
    "start": "628399",
    "end": "633800"
  },
  {
    "text": "it would L it would render everything this by the way folks is",
    "start": "633800",
    "end": "638920"
  },
  {
    "text": "becoming fast unacceptable right not what I'm showing you the other way right I mean I am I",
    "start": "638920",
    "end": "647079"
  },
  {
    "text": "just I I'm losing all patience with sites now where when I go from one page to the next I've got to wait 15 seconds",
    "start": "647079",
    "end": "653639"
  },
  {
    "text": "for all the ads to render right compare that again to here where you click",
    "start": "653639",
    "end": "659279"
  },
  {
    "text": "forward button or a backward button and it instantaneously responds and only the parts that need to",
    "start": "659279",
    "end": "666079"
  },
  {
    "text": "change change now check this out um I'm going to hit the back button a couple of times and we can see exactly where I",
    "start": "666079",
    "end": "673320"
  },
  {
    "text": "came from or I can hit the forward",
    "start": "673320",
    "end": "680040"
  },
  {
    "text": "button now somebody asked me yesterday how do you do that my answer was by the",
    "start": "680240",
    "end": "685360"
  },
  {
    "text": "book um it's it's a little bit complicated and we really don't have time to go over that but I'm actually",
    "start": "685360",
    "end": "690880"
  },
  {
    "text": "quite proud of that and uh there's a very overriding um uh technique that you can",
    "start": "690880",
    "end": "697040"
  },
  {
    "text": "employ that will always work uh for uh history",
    "start": "697040",
    "end": "702120"
  },
  {
    "text": "support all right now the last one we're going to take a look at today is uh an",
    "start": "702120",
    "end": "707240"
  },
  {
    "text": "actual uh example um and this is running uh no JS in the",
    "start": "707240",
    "end": "713839"
  },
  {
    "text": "background I'm going to just uh restart node right now",
    "start": "713839",
    "end": "721240"
  },
  {
    "text": "okay so you'll see here is an example of chat um now of course uh we chat isn't",
    "start": "724680",
    "end": "732480"
  },
  {
    "text": "just limited to instant messaging but it's probably the most accessible example of it so let's let's load up",
    "start": "732480",
    "end": "739519"
  },
  {
    "text": "Alfred or Alfred as the case may be now noticed that Alfred's online all by himself we're now going to join in with",
    "start": "739519",
    "end": "748120"
  },
  {
    "text": "uh oh let's see Barry Barry's named oddly but notice that Barry instantly shows up on the",
    "start": "748120",
    "end": "754320"
  },
  {
    "text": "user list here of course we've all seen socket.io example so we're not going to worry about uh uh too much detail and",
    "start": "754320",
    "end": "761680"
  },
  {
    "text": "now I'm going to uh sign in again here and uh oh what's a good name anyone",
    "start": "761680",
    "end": "767279"
  },
  {
    "text": "anyone what's that",
    "start": "767279",
    "end": "772360"
  },
  {
    "text": "mave oh yeah yeah yeah yeah yeah um I know what your mind is at sir",
    "start": "772360",
    "end": "780519"
  },
  {
    "text": "um okay how do we spell mave here M AE",
    "start": "780519",
    "end": "786160"
  },
  {
    "text": "V there's a mave in the audience apparently there we go mave although you",
    "start": "786160",
    "end": "793199"
  },
  {
    "text": "she's not here in person she's here in spirit thank you mave okay notice when I added that that on the other two windows",
    "start": "793199",
    "end": "800160"
  },
  {
    "text": "that those immediately uh responded and you'll also notice that uh",
    "start": "800160",
    "end": "806240"
  },
  {
    "text": "as mave here that before I logged in I was wasn't able to actually open the chat windows but now I am able to open",
    "start": "806240",
    "end": "813240"
  },
  {
    "text": "the chat Windows also you'll notice that there is no refreshing of the page in a Web 2.0 thing if I was going to put this",
    "start": "813240",
    "end": "820279"
  },
  {
    "text": "profound message and share it with others um and then press the return button or click on send here what would",
    "start": "820279",
    "end": "827880"
  },
  {
    "text": "happen is that uh it would of course reload the entire page um but in this",
    "start": "827880",
    "end": "834759"
  },
  {
    "text": "case of course only the changes that are coming across in this case over a soaka connection um I want to say one more",
    "start": "834759",
    "end": "842279"
  },
  {
    "text": "thing about Saka connections uh uh expect a lot of communication that you currently do over HP and Ajax to go over",
    "start": "842279",
    "end": "850720"
  },
  {
    "text": "Saka connections at least the lightweight messages um you know think",
    "start": "850720",
    "end": "856040"
  },
  {
    "text": "about a a chess game right um when you're when you move a piece the other",
    "start": "856040",
    "end": "863920"
  },
  {
    "text": "uh client only needs to know that you move the piece it doesn't need uh one",
    "start": "863920",
    "end": "869199"
  },
  {
    "text": ",200 bytes of Header information to go via an Ajax through a server right it",
    "start": "869199",
    "end": "874720"
  },
  {
    "text": "only needs the 8 byte header associated with the web connection or the socka connection and then the few bytes that",
    "start": "874720",
    "end": "881519"
  },
  {
    "text": "indicate what your move was so you can get your uh chest piece move down to probably about 16 bytes versus 1216",
    "start": "881519",
    "end": "890759"
  },
  {
    "text": "bytes that you'd use with an Ajax call and that's quite compelling all right so",
    "start": "890759",
    "end": "896360"
  },
  {
    "text": "that um those are some example spas now Josh is going to talk to you about",
    "start": "896360",
    "end": "901839"
  },
  {
    "text": "the philosophy of what an Spa really is uh and I think he get does a bang up job",
    "start": "901839",
    "end": "907240"
  },
  {
    "text": "so let's give a hand for the Josh man all",
    "start": "907240",
    "end": "912240"
  },
  {
    "text": "right all right well um what is an Spa what is a single page",
    "start": "914800",
    "end": "920600"
  },
  {
    "start": "917000",
    "end": "1423000"
  },
  {
    "text": "application all right thanks uh well it's simply a website",
    "start": "920600",
    "end": "925680"
  },
  {
    "text": "where the page does not reload uh so if you look at the traditional uh web",
    "start": "925680",
    "end": "931079"
  },
  {
    "text": "application how it works today uh the you know person will come in make request to the server uh amazon.com and",
    "start": "931079",
    "end": "938240"
  },
  {
    "text": "you we'll get a B Amazon will you know do whatever processing you need to on the server and it'll return an HTML page",
    "start": "938240",
    "end": "945120"
  },
  {
    "text": "to the client uh which will have a list of CSS JavaScript and images that need to get loaded uh they may be cach they",
    "start": "945120",
    "end": "952600"
  },
  {
    "text": "may not be if they're not it makes a whole bunch more requests back to the server uh which then responds with them",
    "start": "952600",
    "end": "959199"
  },
  {
    "text": "and who something",
    "start": "959199",
    "end": "962680"
  },
  {
    "text": "happened all right quickly go back there and",
    "start": "964240",
    "end": "970839"
  },
  {
    "text": "then finally the page gets loaded uh but then when you click on any links or try",
    "start": "970839",
    "end": "976480"
  },
  {
    "text": "to navigate do anything purchase something you have to do the whole round trip all over again and then you have to",
    "start": "976480",
    "end": "982360"
  },
  {
    "text": "do it again on the next one uh so the big difference with Spas isn't the first",
    "start": "982360",
    "end": "987759"
  },
  {
    "text": "load the first load is pretty much the same uh except that the uh the HTML gets",
    "start": "987759",
    "end": "993480"
  },
  {
    "text": "rendered on the client side um but then after that uh all you do is make a request for",
    "start": "993480",
    "end": "1000839"
  },
  {
    "text": "the data to the server the server doesn't have to spend all of its time uh processing HTML strings out of that data",
    "start": "1000839",
    "end": "1008480"
  },
  {
    "text": "uh it just quickly gets the data and returns it back to the client uh and",
    "start": "1008480",
    "end": "1014120"
  },
  {
    "text": "then the client takes it and you know does whatever it needs to do with it just changing the parts of the page need to",
    "start": "1014120",
    "end": "1021240"
  },
  {
    "text": "change um so what are the benefits of a single page application uh the first benefit is it",
    "start": "1021560",
    "end": "1027720"
  },
  {
    "text": "doesn't feel like a flat page things move around and are interactive even today when you go out and are surfing around the web it feels very much when",
    "start": "1027720",
    "end": "1034199"
  },
  {
    "text": "you go from page to page like you're turning the page in a magazine or newspaper uh you're just refreshing",
    "start": "1034199",
    "end": "1041280"
  },
  {
    "text": "everything instead you get a more uh you know interactive page that can draw the users in and uh you know makes them",
    "start": "1041280",
    "end": "1050400"
  },
  {
    "text": "makes for much better user experience uh the page also loads A Lot quickly because so much is less is being",
    "start": "1050400",
    "end": "1057080"
  },
  {
    "text": "loaded with each request uh traditional web versus single page web",
    "start": "1057080",
    "end": "1062720"
  },
  {
    "text": "application hey they're reloaded all right uh another important point is a",
    "start": "1062720",
    "end": "1068960"
  },
  {
    "text": "single page application distributes the load off of your servers you know you've got these uh tens or hundreds of",
    "start": "1068960",
    "end": "1075080"
  },
  {
    "text": "thousands of dollars or millions of dollars worth of server sitting around processing strings into HTML and sending",
    "start": "1075080",
    "end": "1080400"
  },
  {
    "text": "it over across the wire well why not distribute that string processing uh out to all the clients and uh let the",
    "start": "1080400",
    "end": "1086799"
  },
  {
    "text": "clients do that it results in a much cheaper and uh much more quickly scalable",
    "start": "1086799",
    "end": "1093840"
  },
  {
    "text": "system uh another huge benefit of uh single page applications uh especially",
    "start": "1094000",
    "end": "1099280"
  },
  {
    "text": "the kind we've outlined in the book is that you can use one language end to end um in your traditional application you",
    "start": "1099280",
    "end": "1105440"
  },
  {
    "text": "on the client side you've got JavaScript on the server side you've got Ruby groovy python Java list Pearl ASP or",
    "start": "1105440",
    "end": "1112159"
  },
  {
    "text": "something else uh and then when working with a database you have to work with SQL so uh and then you've got all the",
    "start": "1112159",
    "end": "1118480"
  },
  {
    "text": "libraries and plugins and things associated with each language you have different ways of thinking associated",
    "start": "1118480",
    "end": "1124000"
  },
  {
    "text": "with each stack uh you know they objectoriented static uh strongly typed",
    "start": "1124000",
    "end": "1129159"
  },
  {
    "text": "variables on the server and uh you know your SQL uh on the back end they're very",
    "start": "1129159",
    "end": "1135880"
  },
  {
    "text": "different mindsets to be thinking in uh and then on the client side you've got Dynamic Loosely typed language so you've",
    "start": "1135880",
    "end": "1143159"
  },
  {
    "text": "got all these different skills you have to master and you end up quite often having to have uh different people at",
    "start": "1143159",
    "end": "1148679"
  },
  {
    "text": "different levels of the system because there there's just so much to learn or you have to get somebody who's really",
    "start": "1148679",
    "end": "1154000"
  },
  {
    "text": "skilled and who's been around for a long time who can program in the entire",
    "start": "1154000",
    "end": "1159280"
  },
  {
    "text": "stack uh in a single page application with JavaScript end to end JavaScript on",
    "start": "1159280",
    "end": "1164640"
  },
  {
    "text": "the uh client JavaScript on the server JavaScript in the database so you don't have to to switch context you don't have",
    "start": "1164640",
    "end": "1170080"
  },
  {
    "text": "to think in one and then think in another way uh you just do the same you think the same sort of processes all",
    "start": "1170080",
    "end": "1175919"
  },
  {
    "text": "along you know you use similar libraries and plugins between the different systems uh you can use the same IDE to",
    "start": "1175919",
    "end": "1182400"
  },
  {
    "text": "work across them uh it's just a much cleaner smoother uh environment to work",
    "start": "1182400",
    "end": "1188480"
  },
  {
    "text": "in uh so how do we get JavaScript end to end in the stack we're using uh jQuery",
    "start": "1188480",
    "end": "1193520"
  },
  {
    "text": "on the client side uh nodejs on the server and mongodb for the database",
    "start": "1193520",
    "end": "1199520"
  },
  {
    "text": "um you know for the uh client side there are of course a whole host of other Frameworks and languages and things you",
    "start": "1199520",
    "end": "1205200"
  },
  {
    "text": "could use um but in fact as long as you're following uh you know a standard pattern framework that you don't",
    "start": "1205200",
    "end": "1211360"
  },
  {
    "text": "actually need all these uh all these other libraries you can do it just using",
    "start": "1211360",
    "end": "1217600"
  },
  {
    "text": "jQuery well you could use it just using JavaScript but I wouldn't recommend",
    "start": "1217600",
    "end": "1223120"
  },
  {
    "text": "that uh another benefit for uh single page applications is you've got one data format the same way you have different",
    "start": "1223559",
    "end": "1229760"
  },
  {
    "text": "mindsets when working with different languages uh you it's the same thing uh take a traditional rubyan rails",
    "start": "1229760",
    "end": "1236280"
  },
  {
    "text": "application uh in the front end you're dealing with Json format uh active record and the server side and SQL",
    "start": "1236280",
    "end": "1243240"
  },
  {
    "text": "results from the database so you spend a lot of your time uh marshalling data from one data structure to another",
    "start": "1243240",
    "end": "1250120"
  },
  {
    "text": "imagine you have to take the Json transform it into active record transform it into a SQL to query the",
    "start": "1250120",
    "end": "1256400"
  },
  {
    "text": "database take the results transform them back to active record and then print out Jason with them send them back over the",
    "start": "1256400",
    "end": "1263280"
  },
  {
    "text": "over to the client uh that that's a lot of marshalling and work involved in uh",
    "start": "1263280",
    "end": "1268840"
  },
  {
    "text": "working with with the stack um now we we have stuff that abstracts this this away",
    "start": "1268840",
    "end": "1274919"
  },
  {
    "text": "from us because it's so much of a pain to work in but it's much better if you can just use one format from end to end",
    "start": "1274919",
    "end": "1281520"
  },
  {
    "text": "where you don't have to do all this marshalling from data you don't have to have the abstractions you can just take the data right out of the database pass",
    "start": "1281520",
    "end": "1287760"
  },
  {
    "text": "it to the server which speaks it natively and then pass it back into the UI which is the way uh it's used so it's",
    "start": "1287760",
    "end": "1294320"
  },
  {
    "text": "much better to be able to store the data uh in the exact format you're going to be using it",
    "start": "1294320",
    "end": "1300279"
  },
  {
    "text": "in uh so benefits of an Spa uh you Dynamic and interactive sites no more",
    "start": "1300279",
    "end": "1305559"
  },
  {
    "text": "flat two-dimensional Pages it loads quickly because you only update the parts of the page that need to be",
    "start": "1305559",
    "end": "1310880"
  },
  {
    "text": "updated uh you distribute server load onto the client machines making it a cheaper more scalable solution uh you",
    "start": "1310880",
    "end": "1318080"
  },
  {
    "text": "get one language end to end uh JavaScript and one data data format end to end",
    "start": "1318080",
    "end": "1323880"
  },
  {
    "text": "Json uh but everything's not uh bright and shiny with with Spas there are uh some",
    "start": "1323880",
    "end": "1330600"
  },
  {
    "text": "pitfalls uh some of the pitfalls are that you can uh easily break the B but back button uh so that when you section",
    "start": "1330600",
    "end": "1338559"
  },
  {
    "text": "of the page you expected to be able to revisit and you press back you could break out and go to the last site you",
    "start": "1338559",
    "end": "1343720"
  },
  {
    "text": "were on uh I think we've all ran into that in you know flash sites where you can only link to the front page of the",
    "start": "1343720",
    "end": "1349799"
  },
  {
    "text": "application and then uh if you go in and dig around you can't send links and out to that Mike demonstrated how uh how",
    "start": "1349799",
    "end": "1356679"
  },
  {
    "text": "that worked um you must make it googleable because uh Google's fighers don't execute JavaScript uh you're",
    "start": "1356679",
    "end": "1363640"
  },
  {
    "text": "moving lots of code to the client and things can get messy because you suddenly have 100,000 lines of code in JavaScript which was initially intended",
    "start": "1363640",
    "end": "1370840"
  },
  {
    "text": "as a scripting language uh analytics require work because you just can't take uh Google",
    "start": "1370840",
    "end": "1377039"
  },
  {
    "text": "analytics and paste a snippet on every page and call it done and there's no sense of what errors are happening on",
    "start": "1377039",
    "end": "1383080"
  },
  {
    "text": "connected clients um uh because when you're using a traditional web application uh you've",
    "start": "1383080",
    "end": "1389919"
  },
  {
    "text": "got your server log which takes all the errors that are happening and just dumps them out to the log uh whereas now your",
    "start": "1389919",
    "end": "1395279"
  },
  {
    "text": "clients are off using the site and you have no idea what errors they're encountering um so the the the bright",
    "start": "1395279",
    "end": "1402520"
  },
  {
    "text": "side is that all these pitfalls are solvable um and uh",
    "start": "1402520",
    "end": "1409559"
  },
  {
    "text": "they're all solvable and then we go over them all in the book on how to solve them uh if you're my presentation on uh",
    "start": "1409559",
    "end": "1415760"
  },
  {
    "text": "yesterday then you I went through the list of of how it how it works but we we'll go over some of them at the end",
    "start": "1415760",
    "end": "1421720"
  },
  {
    "text": "today after there's time you know we got I asked to do this last night about uh 6 o'l in the evening",
    "start": "1421720",
    "end": "1428240"
  },
  {
    "start": "1423000",
    "end": "1546000"
  },
  {
    "text": "I think maybe 6:30 so um you know excuse the Improv aspect of this",
    "start": "1428240",
    "end": "1434960"
  },
  {
    "text": "um all right so uh powering things back up um we're going to talk about solving",
    "start": "1434960",
    "end": "1440919"
  },
  {
    "text": "some of those problems we talked about uh earlier I do want to bring Mau back up because she seems to have a fan set",
    "start": "1440919",
    "end": "1448480"
  },
  {
    "text": "here um one thing I I do want to show actually that's interesting about this",
    "start": "1448480",
    "end": "1453679"
  },
  {
    "text": "is that as you notice when I clicked one button here um the only thing that changed was the image and the comments",
    "start": "1453679",
    "end": "1461520"
  },
  {
    "text": "now what happens if I take this URL copy it paste it into a new tab like this any",
    "start": "1461520",
    "end": "1467520"
  },
  {
    "text": "guessing what's going to happen",
    "start": "1467520",
    "end": "1470360"
  },
  {
    "text": "happen pretty cool huh uh the eror messages about the xmpp",
    "start": "1472720",
    "end": "1478159"
  },
  {
    "text": "chat which wouldn't happen if we were using uh uh but the bottom line is um",
    "start": "1478159",
    "end": "1484679"
  },
  {
    "text": "the entire state is held there even though now when I move here I'm again",
    "start": "1484679",
    "end": "1493240"
  },
  {
    "text": "only changing what's changed so um there's a way of delegating things that",
    "start": "1493240",
    "end": "1499279"
  },
  {
    "text": "allow you to do that okay so back to that uh",
    "start": "1499279",
    "end": "1505320"
  },
  {
    "text": "presentation we had",
    "start": "1505320",
    "end": "1508360"
  },
  {
    "text": "running um oh here we",
    "start": "1513399",
    "end": "1520840"
  },
  {
    "text": "go the presentation is running there we go so um",
    "start": "1520840",
    "end": "1528640"
  },
  {
    "text": "if you don't like uh single page applications there are other options so I thought I'd bring those up here for",
    "start": "1528640",
    "end": "1534240"
  },
  {
    "text": "you here's one you can always pick if you'd like uh another one's real popular these",
    "start": "1534240",
    "end": "1539559"
  },
  {
    "text": "days mobile flex and of course uh what we're talking about",
    "start": "1539559",
    "end": "1546679"
  },
  {
    "start": "1546000",
    "end": "1649000"
  },
  {
    "text": "today so um let's uh re review a few points",
    "start": "1547080",
    "end": "1553159"
  },
  {
    "text": "that we've brought up already but uh this is building to something bigger",
    "start": "1553159",
    "end": "1558360"
  },
  {
    "text": "as we mentioned with a single page web application most of the application moves to the client your back end is",
    "start": "1558360",
    "end": "1565440"
  },
  {
    "text": "basically your document store in your authentication and user",
    "start": "1565440",
    "end": "1570880"
  },
  {
    "text": "database pretty much everything else moves to the front end that means you got to code at a lot",
    "start": "1570880",
    "end": "1579240"
  },
  {
    "text": "much larger scale than you used to on the front end uh if you hit 100,000",
    "start": "1579240",
    "end": "1585799"
  },
  {
    "text": "lines uh on in JavaScript you're not alone there's a lot of sites nowadays that are hitting that amount or even",
    "start": "1585799",
    "end": "1593559"
  },
  {
    "text": "greater and also since most of your applications moving to the front end instead of having instead of having one",
    "start": "1593559",
    "end": "1600240"
  },
  {
    "text": "front end developer or maybe two and eight backend developers you're having one or two backend developers and eight",
    "start": "1600240",
    "end": "1606960"
  },
  {
    "text": "frontend developers that means that all the convention and discipline that you",
    "start": "1606960",
    "end": "1613880"
  },
  {
    "text": "previously used on the back end now actually become important on the front",
    "start": "1613880",
    "end": "1619840"
  },
  {
    "text": "end and actually you can be a little more Loosey Goosey on the server side now because uh you know one or two",
    "start": "1619840",
    "end": "1626520"
  },
  {
    "text": "people can maintain it so what we're going to talk about now are the key Concepts that we found that",
    "start": "1626520",
    "end": "1634799"
  },
  {
    "text": "you really need to understand to make a successful large scale single page",
    "start": "1634799",
    "end": "1641398"
  },
  {
    "text": "application all right and we've got uh about 20 minutes to do it",
    "start": "1642399",
    "end": "1649279"
  },
  {
    "start": "1649000",
    "end": "1720000"
  },
  {
    "text": "so first of all we're going to talk about architecture then we're going to talk",
    "start": "1650799",
    "end": "1655880"
  },
  {
    "text": "about data types and names uh scope chains",
    "start": "1655880",
    "end": "1661840"
  },
  {
    "text": "hoisting uh prototype based objects as opposed to class-based uh some forms of",
    "start": "1661840",
    "end": "1668880"
  },
  {
    "text": "closures and execution context by the way if you want to fall asleep do so now cuz I'm going to wake your ass up when",
    "start": "1668880",
    "end": "1674840"
  },
  {
    "text": "execution context comes around cuz I cuz I respect you as an individual and I think you need to understand this okay",
    "start": "1674840",
    "end": "1681440"
  },
  {
    "text": "execution context is one of those hard things that when you buy a JavaScript book they always jump over they're like",
    "start": "1681440",
    "end": "1687080"
  },
  {
    "text": "you know really we should cover this because it's kind of fundamental to how JavaScript works but gosh it's kind of hard to explain so we'll skip over it",
    "start": "1687080",
    "end": "1694360"
  },
  {
    "text": "all right I've given this presentation to people who've coded in JavaScript for two years and went exe execution object",
    "start": "1694360",
    "end": "1701799"
  },
  {
    "text": "what right it's amazing how many people are coding in JavaScript and don't understand that um and it's really",
    "start": "1701799",
    "end": "1708559"
  },
  {
    "text": "important that you do if you don't go back to sleep um and we'll talk about the module",
    "start": "1708559",
    "end": "1713640"
  },
  {
    "text": "pattern which kind of pulls everything together first of all",
    "start": "1713640",
    "end": "1720120"
  },
  {
    "start": "1720000",
    "end": "1840000"
  },
  {
    "text": "architecture uh this is taped on the wall by my desk and on my co-worker desk",
    "start": "1720120",
    "end": "1726000"
  },
  {
    "text": "and at the vice president's desk as well um if you're not",
    "start": "1726000",
    "end": "1731159"
  },
  {
    "text": "careful on a large scale spa and you just all just start coding on features",
    "start": "1731159",
    "end": "1737600"
  },
  {
    "text": "and stuff you're going to find Spaghetti really fast and various other Italian",
    "start": "1737600",
    "end": "1744480"
  },
  {
    "text": "foods um what happens here with this",
    "start": "1744480",
    "end": "1749840"
  },
  {
    "text": "architecture and this is in the book and detailed uh you see where all those red",
    "start": "1749840",
    "end": "1755080"
  },
  {
    "text": "arrows just kind of descended from the heavens um there's boiler plate for all of",
    "start": "1755080",
    "end": "1761240"
  },
  {
    "text": "those not only that um this has API calls going in One Direction and data",
    "start": "1761240",
    "end": "1767600"
  },
  {
    "text": "flow going and the other and so we take great pains to make sure that we have",
    "start": "1767600",
    "end": "1772679"
  },
  {
    "text": "isolation between models and between feature uh modules so like if you take a",
    "start": "1772679",
    "end": "1779720"
  },
  {
    "text": "look from the on the far right hand side you see a user there he's not just any normal user he's a happy user you can",
    "start": "1779720",
    "end": "1785720"
  },
  {
    "text": "tell by the expression on his face um and on the left we basically",
    "start": "1785720",
    "end": "1790919"
  },
  {
    "text": "have our data source in the web server uh in between we have various modules",
    "start": "1790919",
    "end": "1797399"
  },
  {
    "text": "there's a dat data layer that exists that data layer knows nothing about any of the modules above it in other words",
    "start": "1797399",
    "end": "1804960"
  },
  {
    "text": "we don't allow it to make any API calls to any of the modules that come after it",
    "start": "1804960",
    "end": "1811960"
  },
  {
    "text": "whereas all modules that come after it may call it and that sort of convention",
    "start": "1811960",
    "end": "1819039"
  },
  {
    "text": "helps provide a level of isolation um that allows us to have multiple developers work on multiple",
    "start": "1819039",
    "end": "1825840"
  },
  {
    "text": "modules at one time because we have an API contract between our",
    "start": "1825840",
    "end": "1830960"
  },
  {
    "text": "modules I'm not going to go any further into it because I take up the rest of the hour but um certainly something you want",
    "start": "1830960",
    "end": "1838399"
  },
  {
    "text": "to think about before you dive in with your team of eight another point that we like to do",
    "start": "1838399",
    "end": "1845240"
  },
  {
    "start": "1840000",
    "end": "1904000"
  },
  {
    "text": "is to name our variables according to the scope that they're used in uh",
    "start": "1845240",
    "end": "1850360"
  },
  {
    "text": "generally we use under scores for variables that are local and then if",
    "start": "1850360",
    "end": "1857240"
  },
  {
    "text": "they're of a module scope will use camel case yeah I know this is real trivial",
    "start": "1857240",
    "end": "1862480"
  },
  {
    "text": "stuff guys but I'll tell you what anything you can do to reduce the cognitive overhead you have to deal with",
    "start": "1862480",
    "end": "1869039"
  },
  {
    "text": "when reading code is uh is very useful to redirect into some sort of productive",
    "start": "1869039",
    "end": "1876799"
  },
  {
    "text": "activity as opposed to uh wasting your time solving a riddle also um when",
    "start": "1876799",
    "end": "1884399"
  },
  {
    "text": "you're doing a single page web application you should be creating one Global variable and that's it all right",
    "start": "1884399",
    "end": "1891159"
  },
  {
    "text": "if you're creating more than one Global variable when you're creating your single page web application you're doing",
    "start": "1891159",
    "end": "1897360"
  },
  {
    "text": "it wrong okay um also",
    "start": "1897360",
    "end": "1904639"
  },
  {
    "start": "1904000",
    "end": "2030000"
  },
  {
    "text": "um let's talk about variable types well we all know that JavaScript is a d dynamically typed or Loosely typed",
    "start": "1904639",
    "end": "1912000"
  },
  {
    "text": "language and we should have no concern about data types it's funny that I",
    "start": "1912000",
    "end": "1918080"
  },
  {
    "text": "should mention that though because apparently the people who just released typescript feel that type is kind of",
    "start": "1918080",
    "end": "1924360"
  },
  {
    "text": "important also the people who recently released the closure compiler or",
    "start": "1924360",
    "end": "1929559"
  },
  {
    "text": "actually quite a while ago uh actually uh have a way of indicating type in",
    "start": "1929559",
    "end": "1935200"
  },
  {
    "text": "comments in the closure compiler GWT exists arguably largely because people",
    "start": "1935200",
    "end": "1942000"
  },
  {
    "text": "who are using it prefer to have a strongly typed language versus the loose or dynamically typed JavaScript and",
    "start": "1942000",
    "end": "1949440"
  },
  {
    "text": "finally Dart also provides a way of uh uh indicating type in",
    "start": "1949440",
    "end": "1956679"
  },
  {
    "text": "JavaScript so if you don't think type's important in JavaScript you go ahead and",
    "start": "1956679",
    "end": "1962519"
  },
  {
    "text": "continue to feel that way although I encourage you to go and add a subscript",
    "start": "1962519",
    "end": "1967919"
  },
  {
    "text": "1.5 to an array and see what happens it's",
    "start": "1967919",
    "end": "1973679"
  },
  {
    "text": "interesting the bottom line is most variables you will ever create in JavaScript never change type and often",
    "start": "1974720",
    "end": "1982320"
  },
  {
    "text": "times those that do are by",
    "start": "1982320",
    "end": "1986320"
  },
  {
    "text": "mistake also another thought to keep in mind is polymorphic interface is a really cool CS trick but they're rarely",
    "start": "1987519",
    "end": "1995679"
  },
  {
    "text": "a good idea in practice now I say rarely there are cases where they make a lot of sense but let me give you a for instance",
    "start": "1995679",
    "end": "2003760"
  },
  {
    "text": "if you're writing a function that returns a string return a string on always don't return null for a special",
    "start": "2003760",
    "end": "2010519"
  },
  {
    "text": "value and return false in a different case or true in a different case I mean that's really clever folks but if you're",
    "start": "2010519",
    "end": "2017320"
  },
  {
    "text": "going to indicate an exceptional situation throw an exception that's why",
    "start": "2017320",
    "end": "2022960"
  },
  {
    "text": "God invented exceptions all",
    "start": "2022960",
    "end": "2030120"
  },
  {
    "start": "2030000",
    "end": "2088000"
  },
  {
    "text": "right so what we do on large projects is we name our variables to indicate type",
    "start": "2030120",
    "end": "2038480"
  },
  {
    "text": "and if you don't know the type or the type changes we call it data now you don't have to follow this",
    "start": "2038480",
    "end": "2045760"
  },
  {
    "text": "you can make up your own notation at one point I used a Hungarian notation which the hungarians love but English speakers",
    "start": "2045760",
    "end": "2052638"
  },
  {
    "text": "don't um this is less precise but it reads a lot better in English and um I",
    "start": "2052639",
    "end": "2059560"
  },
  {
    "text": "highly encourage you to indicate the type in your names well of course you can always go back and use closure",
    "start": "2059560",
    "end": "2066118"
  },
  {
    "text": "compiler or Dart or typescript or whatever um but I found in large",
    "start": "2066119",
    "end": "2073118"
  },
  {
    "text": "projects this really reduces cognitive overhead it also indicates intent so if",
    "start": "2073119",
    "end": "2078679"
  },
  {
    "text": "you end up with a file with a name that indicates it's supposed to be a string and you find a Boolean you know whoa oh",
    "start": "2078679",
    "end": "2085878"
  },
  {
    "text": "somebody screwed up somewhere okay let's talk about variable scope a little bit scope in JavaScript",
    "start": "2085879",
    "end": "2093919"
  },
  {
    "start": "2088000",
    "end": "2148000"
  },
  {
    "text": "as most of us probably already know is functional another words if you want to scope something put it in a",
    "start": "2093919",
    "end": "2100599"
  },
  {
    "text": "function in this example here you're seeing uh this Freeman text which is",
    "start": "2100599",
    "end": "2107920"
  },
  {
    "text": "declared at the top level or Global um scope and when we log it its value is",
    "start": "2107920",
    "end": "2115599"
  },
  {
    "text": "presented however this prisoner text uh does not Escape outside of this",
    "start": "2115599",
    "end": "2122920"
  },
  {
    "text": "function and therefore when you try to log it down here it shows up is not declared you'll actually get an",
    "start": "2122920",
    "end": "2130760"
  },
  {
    "text": "error now one problem with JavaScript which by the way is solved by the use of",
    "start": "2135440",
    "end": "2140560"
  },
  {
    "text": "the word uh the Ed strict pragma but we won't get into that but um it's very",
    "start": "2140560",
    "end": "2147200"
  },
  {
    "text": "easy to create Global variables unintentionally and here we illustrate",
    "start": "2147200",
    "end": "2152920"
  },
  {
    "start": "2148000",
    "end": "2169000"
  },
  {
    "text": "that where I'm using a variable I within a function I forget to declare it and therefore it becomes a global whereas in",
    "start": "2152920",
    "end": "2160079"
  },
  {
    "text": "the second example that does not",
    "start": "2160079",
    "end": "2164240"
  },
  {
    "text": "happen um you need to recognize in JavaScript even though you can declare",
    "start": "2167720",
    "end": "2174040"
  },
  {
    "start": "2169000",
    "end": "2256000"
  },
  {
    "text": "and assign things at one time inside of JavaScript it's actually two different",
    "start": "2174040",
    "end": "2182520"
  },
  {
    "text": "steps um declaration uh always happens at the top",
    "start": "2182520",
    "end": "2187680"
  },
  {
    "text": "of a function and assignment happens at runtime um as",
    "start": "2187680",
    "end": "2193760"
  },
  {
    "text": "necessary we recommend that you use a single vir statement per functional",
    "start": "2193760",
    "end": "2199000"
  },
  {
    "text": "scope there's no need to have multiple vir statements there's no performance advantage to it at all all your",
    "start": "2199000",
    "end": "2206240"
  },
  {
    "text": "variables that you declare within a functional scope will be declared by JavaScript immediately on invocation of",
    "start": "2206240",
    "end": "2213280"
  },
  {
    "text": "that function so if you think hey I'm going to hold off on declar ing these 25",
    "start": "2213280",
    "end": "2218480"
  },
  {
    "text": "variables to the bottom to save time you're",
    "start": "2218480",
    "end": "2224160"
  },
  {
    "text": "not we recommend that you place one assignment per line although you may use",
    "start": "2224200",
    "end": "2229960"
  },
  {
    "text": "multiple declarations per line and we always prefer to declare",
    "start": "2229960",
    "end": "2235160"
  },
  {
    "text": "first and assign later because that mimics the JavaScript uh actual",
    "start": "2235160",
    "end": "2241000"
  },
  {
    "text": "implementation JavaScript first declares and then assigns and as I mentioned before uh and",
    "start": "2241000",
    "end": "2248200"
  },
  {
    "text": "we'll talk about a little bit further combining the two can actually cause confusion we we will illustrate",
    "start": "2248200",
    "end": "2255079"
  },
  {
    "text": "that all right let me talk about scope chains this example here I'm going to zip through really quick um notice that",
    "start": "2255079",
    "end": "2262839"
  },
  {
    "start": "2256000",
    "end": "2407000"
  },
  {
    "text": "we have this variable called Freeman text that is set at the top level here",
    "start": "2262839",
    "end": "2268760"
  },
  {
    "text": "in the window context so I've indicated the context uh next to each one of these",
    "start": "2268760",
    "end": "2275480"
  },
  {
    "text": "logs or assignments and and you'll see that we're always using the window uh",
    "start": "2275480",
    "end": "2281000"
  },
  {
    "text": "context or Global context so it's always coming out with the same value now here's where things get a",
    "start": "2281000",
    "end": "2287560"
  },
  {
    "text": "little bit tricky and you got to remember about scope chains uh see in the first declaration",
    "start": "2287560",
    "end": "2294240"
  },
  {
    "text": "here I've declared freem man text in the window scope in the second declaration",
    "start": "2294240",
    "end": "2300119"
  },
  {
    "text": "which is in this visit supermax function I guess I have a pointer I might as well use that here huh this is assigned in",
    "start": "2300119",
    "end": "2307240"
  },
  {
    "text": "the window visit supermax scope okay so notice the scope starts piling up as I",
    "start": "2307240",
    "end": "2313720"
  },
  {
    "text": "start going deeper into functions now here I've declared a the same name",
    "start": "2313720",
    "end": "2320079"
  },
  {
    "text": "variable in a window. visit supermax dovisit prison scope okay so when I log",
    "start": "2320079",
    "end": "2327839"
  },
  {
    "text": "it here that's where scope chain comes into play JavaScript says Hey within my",
    "start": "2327839",
    "end": "2335319"
  },
  {
    "text": "current scope do I have a variable name named Freeman text in this case it does and it's only declared since it's",
    "start": "2335319",
    "end": "2343720"
  },
  {
    "text": "only declared it gets the default value of undefined so when you log this you",
    "start": "2343720",
    "end": "2349240"
  },
  {
    "text": "will see undefined here down a little later here where my cursor",
    "start": "2349240",
    "end": "2355200"
  },
  {
    "text": "is um we have this uh uh it's also logging it but it's logging it within",
    "start": "2355200",
    "end": "2361680"
  },
  {
    "text": "the window dovisit Supermac scope again JavaScript looks in that scope and says",
    "start": "2361680",
    "end": "2369839"
  },
  {
    "text": "do I have a variable with that name within the scope chain and the truth is you do it's up",
    "start": "2369839",
    "end": "2375920"
  },
  {
    "text": "here so it then provides that",
    "start": "2375920",
    "end": "2380799"
  },
  {
    "text": "value uh in this case uh it's going to log uh assigned and then finally at the",
    "start": "2386760",
    "end": "2393000"
  },
  {
    "text": "end here when we call the log we're back in the Global scope and so it finds the",
    "start": "2393000",
    "end": "2399839"
  },
  {
    "text": "value in that Global scope chain so we don't have local versus",
    "start": "2399839",
    "end": "2407319"
  },
  {
    "start": "2407000",
    "end": "2479000"
  },
  {
    "text": "global we have local versus uh more local versus more",
    "start": "2407319",
    "end": "2413599"
  },
  {
    "text": "local right now let's talk about hoisting uh in this case",
    "start": "2413599",
    "end": "2421160"
  },
  {
    "text": "uh we're showing how uh variables are always the Declaration of variable is",
    "start": "2421160",
    "end": "2427880"
  },
  {
    "text": "always hoisted to the top of functional scope so in this example in most",
    "start": "2427880",
    "end": "2433400"
  },
  {
    "text": "languages if you were to encounter this Council log prisoner text you would expect an error because prisoner text",
    "start": "2433400",
    "end": "2440319"
  },
  {
    "text": "has not been defined yet but in this example uh and as I mentioned earlier",
    "start": "2440319",
    "end": "2446160"
  },
  {
    "text": "with JavaScript since uh uh all declarations are hoisted to the top of",
    "start": "2446160",
    "end": "2452880"
  },
  {
    "text": "the function this prisoner text variable is defined um well is declared and it",
    "start": "2452880",
    "end": "2459520"
  },
  {
    "text": "has a value of undefined so in the first log it will show up as undefined in the",
    "start": "2459520",
    "end": "2464920"
  },
  {
    "text": "second log the Declaration which is order dependent",
    "start": "2464920",
    "end": "2470040"
  },
  {
    "text": "comes into play and the declared variable is",
    "start": "2470040",
    "end": "2474200"
  },
  {
    "text": "shown okay so now let's take a look at uh this Freeman text here which is in",
    "start": "2480119",
    "end": "2485480"
  },
  {
    "text": "the window scope um and uh it is assigned uh it's defined",
    "start": "2485480",
    "end": "2491800"
  },
  {
    "text": "and assigned when the value is logged nothing really unusual here basically I'm using a global variable within this",
    "start": "2491800",
    "end": "2498319"
  },
  {
    "text": "function that's all kosher but look what happens here all",
    "start": "2498319",
    "end": "2503920"
  },
  {
    "text": "the same code the only difference is that we do this declaration below this log and if you paid attention in the",
    "start": "2503920",
    "end": "2511359"
  },
  {
    "text": "last example or you're just a Smart Cookie uh or you knew this before you",
    "start": "2511359",
    "end": "2516480"
  },
  {
    "text": "came in here um you'll know that this declaration gets hoisted to the top of the internal",
    "start": "2516480",
    "end": "2524040"
  },
  {
    "text": "function and so therefore the Declaration by default assigns Undeclared to the variable so",
    "start": "2524040",
    "end": "2531599"
  },
  {
    "text": "this Council log is not going to provide us with free man texes as assigned no",
    "start": "2531599",
    "end": "2537760"
  },
  {
    "text": "it's going to give us undefined because the uh visit prison in function um looks",
    "start": "2537760",
    "end": "2545480"
  },
  {
    "text": "in its scope chain to find Freeman text it finds the local um a local copy of",
    "start": "2545480",
    "end": "2552720"
  },
  {
    "text": "that variable and uses that okay a lot of people get burned by this one so bottom line guys put your Declarations",
    "start": "2552720",
    "end": "2560680"
  },
  {
    "text": "of all variables at the top of your functions and you won't be thrown for a",
    "start": "2560680",
    "end": "2566880"
  },
  {
    "text": "loop let's see what kind what time I got here all right we got a few minutes um",
    "start": "2566880",
    "end": "2577240"
  },
  {
    "start": "2567000",
    "end": "2615000"
  },
  {
    "text": "we go to 310 right okay I'm G to hop over the uh the object construction for",
    "start": "2580960",
    "end": "2587599"
  },
  {
    "text": "a little bit and if we get some luck we'll come back to that um because we're running a little short on time",
    "start": "2587599",
    "end": "2595400"
  },
  {
    "text": "here I want to talk about that one thing I don't want you to sleep through which is the execution",
    "start": "2595400",
    "end": "2602640"
  },
  {
    "text": "object although of you know you know you want to come and talk about objects I'm certain Josh would love to speak with",
    "start": "2605079",
    "end": "2611319"
  },
  {
    "text": "you about it okay so let's talk about the",
    "start": "2611319",
    "end": "2617640"
  },
  {
    "start": "2615000",
    "end": "2679000"
  },
  {
    "text": "execution context object this is the thing that most JavaScript books or",
    "start": "2617640",
    "end": "2623520"
  },
  {
    "text": "online uh guides seem to skip over because it's just plain too hard to explain however it's kind of the kernel",
    "start": "2623520",
    "end": "2631960"
  },
  {
    "text": "of how JavaScript works all right the key to remember",
    "start": "2631960",
    "end": "2637119"
  },
  {
    "text": "remember is that when JavaScript is executed every time you run a function",
    "start": "2637119",
    "end": "2643280"
  },
  {
    "text": "JavaScript constructs an execution context object all right let me rephrase that",
    "start": "2643280",
    "end": "2650599"
  },
  {
    "text": "every time you call a function an execution context object is created and by creating closures over",
    "start": "2650599",
    "end": "2658400"
  },
  {
    "text": "the execution context object is the whole basis of how we create objects",
    "start": "2658400",
    "end": "2664440"
  },
  {
    "text": "inside of JavaScript",
    "start": "2664440",
    "end": "2668119"
  },
  {
    "start": "2679000",
    "end": "2765000"
  },
  {
    "text": "oops so let's look at an example now uh what I'm going to show you isn't",
    "start": "2679000",
    "end": "2685960"
  },
  {
    "text": "necessarily uh absolutely correct um but",
    "start": "2685960",
    "end": "2691040"
  },
  {
    "text": "conceptionally if you think of execution this way you're going to do good all",
    "start": "2691040",
    "end": "2696079"
  },
  {
    "text": "right um so on the left hand side we have some",
    "start": "2696079",
    "end": "2701200"
  },
  {
    "text": "code that's running on the right hand side we have this concept of an execution object or execution context",
    "start": "2701200",
    "end": "2707680"
  },
  {
    "text": "object so on the right hand side we have a u invocation of a function uh on the",
    "start": "2707680",
    "end": "2715280"
  },
  {
    "text": "right hand side we show the object which is empty at this point uh when it's run",
    "start": "2715280",
    "end": "2721400"
  },
  {
    "text": "uh the values for the execution context object uh of the arguments are placed in",
    "start": "2721400",
    "end": "2727040"
  },
  {
    "text": "in to the um the object and then um this",
    "start": "2727040",
    "end": "2732960"
  },
  {
    "text": "is a a two pass process on the first pass all these local",
    "start": "2732960",
    "end": "2739559"
  },
  {
    "text": "variables I'm pointing at my screen here and I realize that you don't see my finger so I'm going to try to use the cursor here um all the variables are",
    "start": "2739559",
    "end": "2748440"
  },
  {
    "text": "assigned I'm sorry not assigned all the variables are declared not assigned so you see that here in the execution",
    "start": "2748440",
    "end": "2754440"
  },
  {
    "text": "object um and then uh inner functions then are recursively uh uh uh added to the",
    "start": "2754440",
    "end": "2762079"
  },
  {
    "text": "execution object in a similar Fashion on the run of the code on the",
    "start": "2762079",
    "end": "2768520"
  },
  {
    "start": "2765000",
    "end": "2824000"
  },
  {
    "text": "second pass uh these uh as we go through the code and uh variables are assigned",
    "start": "2768520",
    "end": "2776280"
  },
  {
    "text": "the execution context then actually gets the assignment",
    "start": "2776280",
    "end": "2782800"
  },
  {
    "text": "okay you have anything to add here Josh yeah let me just",
    "start": "2783160",
    "end": "2788599"
  },
  {
    "text": "uh try and say that succinctly here uh what what what this means is that the",
    "start": "2788599",
    "end": "2794280"
  },
  {
    "text": "the way variable hoisting works as you quite often don't hear it described we say what the result of it is is that the",
    "start": "2794280",
    "end": "2799760"
  },
  {
    "text": "variables get hoisted to the top and the way that hoisting works is the JavaScript engine runs over each",
    "start": "2799760",
    "end": "2805720"
  },
  {
    "text": "function twice the first time it runs over the code it uh declares all the variables then it runs over it again and",
    "start": "2805720",
    "end": "2812480"
  },
  {
    "text": "it actually assigns all the variables so it's not magic that gets the variables hoisted the top it's because it runs",
    "start": "2812480",
    "end": "2817800"
  },
  {
    "text": "over the code twice I knew I was missing something thanks",
    "start": "2817800",
    "end": "2824079"
  },
  {
    "start": "2824000",
    "end": "2966000"
  },
  {
    "text": "Josh um so uh let's take a look at um that",
    "start": "2824079",
    "end": "2831200"
  },
  {
    "text": "kind of in action with the with the closures here um oh one more one more",
    "start": "2831200",
    "end": "2836359"
  },
  {
    "text": "thing Mike oh please uh the execution object is uh not accessible in JavaScript it's something that happens",
    "start": "2836359",
    "end": "2842040"
  },
  {
    "text": "in the background so you can't actually get access to and log it or see it but it's there trust me well actually that's",
    "start": "2842040",
    "end": "2849680"
  },
  {
    "text": "the again that's the if you recognize that that's there what I'm going to talk about right now is the closure uh uh",
    "start": "2849680",
    "end": "2856920"
  },
  {
    "text": "closures and how those actually keep references to the execution context object so in the case that we're seeing",
    "start": "2856920",
    "end": "2863960"
  },
  {
    "text": "in front of us here it's a little bit dense but um like my cousin Lenny um but",
    "start": "2863960",
    "end": "2869920"
  },
  {
    "text": "you see here that um we have an inner function that's uh that uh is returned",
    "start": "2869920",
    "end": "2876599"
  },
  {
    "text": "okay and uh so when I do this log message um",
    "start": "2876599",
    "end": "2882480"
  },
  {
    "text": "and I create this function and and and provide this argument called yeah um I",
    "start": "2882480",
    "end": "2889319"
  },
  {
    "text": "am assigning back to log message effectively uh pointers that point to",
    "start": "2889319",
    "end": "2896319"
  },
  {
    "text": "the execution object so from that point forward whenever I run this log message",
    "start": "2896319",
    "end": "2902240"
  },
  {
    "text": "uh function it's always going to log yeah I can call Curry log message a",
    "start": "2902240",
    "end": "2908520"
  },
  {
    "text": "number of additional times with different values but my original uh",
    "start": "2908520",
    "end": "2913800"
  },
  {
    "text": "function that was returned is always going to have the closure over the uh",
    "start": "2913800",
    "end": "2919400"
  },
  {
    "text": "that ya word there sorry about",
    "start": "2919400",
    "end": "2926520"
  },
  {
    "text": "this in the second example um I'm calling this without",
    "start": "2927040",
    "end": "2932839"
  },
  {
    "text": "assigning uh the function to anything I'm just providing a string and then I'm",
    "start": "2932839",
    "end": "2939160"
  },
  {
    "text": "providing an execution um set of parentheses and so what happens is that what will be loged is Bob newart rules",
    "start": "2939160",
    "end": "2946359"
  },
  {
    "text": "for all those fans out in the audience um but there is no variable that",
    "start": "2946359",
    "end": "2953520"
  },
  {
    "text": "captures the return and therefore there is no",
    "start": "2953520",
    "end": "2959640"
  },
  {
    "text": "closure the execution context reference count goes to zero and it can be garbage",
    "start": "2959640",
    "end": "2965319"
  },
  {
    "text": "collected look at that again uh again using a cury",
    "start": "2965319",
    "end": "2971799"
  },
  {
    "text": "log function we have a uh function called log uh we're creating a uh",
    "start": "2971799",
    "end": "2977599"
  },
  {
    "text": "function called log hello and then notice I do a copy of that called log copy and then I have a Staying Alive",
    "start": "2977599",
    "end": "2985040"
  },
  {
    "text": "function again using the curry log message so you can see if I if I run log",
    "start": "2985040",
    "end": "2990720"
  },
  {
    "text": "hello I'll get hello if I run the copy of it I'll see hello again down below",
    "start": "2990720",
    "end": "2996280"
  },
  {
    "text": "here um I'm deleting these functions I delete the log copy um and I delete one",
    "start": "2996280",
    "end": "3003920"
  },
  {
    "text": "reference to the uh execution context object but um there's still one",
    "start": "3003920",
    "end": "3010119"
  },
  {
    "text": "remaining it's only when I delete the second uh and final remaining reference",
    "start": "3010119",
    "end": "3015799"
  },
  {
    "text": "to that execution context that it becomes available to delete this is kind",
    "start": "3015799",
    "end": "3021040"
  },
  {
    "text": "of a contrived example but you actually see this in real life you need to be real careful about cleaning up all your",
    "start": "3021040",
    "end": "3027319"
  },
  {
    "text": "references to objects or you will get memory leaks and if you don't believe me go ahead and use ie6 for a little while",
    "start": "3027319",
    "end": "3034000"
  },
  {
    "text": "and uh do some JavaScript uh um uh attributes on a Dom",
    "start": "3034000",
    "end": "3040640"
  },
  {
    "start": "3040000",
    "end": "3095000"
  },
  {
    "text": "object so a couple deep thoughts about closures um it's very easy to create",
    "start": "3042520",
    "end": "3048880"
  },
  {
    "text": "deep closures this is one reason why is a general rule you should try to avoid",
    "start": "3048880",
    "end": "3053920"
  },
  {
    "text": "nesting functions as much as possible if you think about it a lot of a lot of",
    "start": "3053920",
    "end": "3059240"
  },
  {
    "text": "your nested functions you don't need to Nest um closure is very good when you",
    "start": "3059240",
    "end": "3065240"
  },
  {
    "text": "want it think object inheritance and it's very bad when you don't the",
    "start": "3065240",
    "end": "3070359"
  },
  {
    "text": "aforementioned memory leak There Are Rules like the one I just mentioned um and uh to help avoid",
    "start": "3070359",
    "end": "3079280"
  },
  {
    "text": "unintended closures uh like don't declare a function in a loop and uh the final point which I",
    "start": "3079280",
    "end": "3086599"
  },
  {
    "text": "mentioned before is that the execution context objects are always maintained until you get that reference count to",
    "start": "3086599",
    "end": "3093119"
  },
  {
    "text": "zero so think of an execution object like a uh a file",
    "start": "3093119",
    "end": "3098240"
  },
  {
    "text": "system um and we are now over time uh by a whole minute uh and so I think it's",
    "start": "3098240",
    "end": "3105760"
  },
  {
    "text": "time to draw the presentation to a close so you guys want us to stick around okay",
    "start": "3105760",
    "end": "3113599"
  },
  {
    "text": "um uh well I guess I'll Stick Around to the next uh presenter shows up so uh it's break now uh it's break time coming",
    "start": "3113599",
    "end": "3120359"
  },
  {
    "text": "up here so uh uh if you want to stick around um I'll finish the presentation",
    "start": "3120359",
    "end": "3126280"
  },
  {
    "text": "we've only have a couple more slides left all right I want to talk about self",
    "start": "3126280",
    "end": "3132760"
  },
  {
    "text": "executing Anonymous",
    "start": "3132760",
    "end": "3135760"
  },
  {
    "text": "functions we mentioned before that J JavaScript does not offer blot scope um and that's not actually 100%",
    "start": "3144280",
    "end": "3152680"
  },
  {
    "text": "true um it's practically true um if you use JavaScript 1.7 Plus for Modzilla",
    "start": "3152680",
    "end": "3161040"
  },
  {
    "text": "there are constructions that you can use now to actually provide block scope but",
    "start": "3161040",
    "end": "3167079"
  },
  {
    "text": "uh in practice uh I found it not very useful um instead what you'll see a lot",
    "start": "3167079",
    "end": "3176200"
  },
  {
    "text": "of is the concept of an anonymous or self executing Anonymous function which",
    "start": "3176200",
    "end": "3182359"
  },
  {
    "text": "by the way if you're doing an interview for a JavaScript position to uh these days you almost will always be asked",
    "start": "3182359",
    "end": "3188319"
  },
  {
    "text": "this by everybody that you interview with um so uh in this example uh we're",
    "start": "3188319",
    "end": "3196559"
  },
  {
    "text": "declaring a function like normal however at the end we're putting parentheses uh with an optional set of",
    "start": "3196559",
    "end": "3203920"
  },
  {
    "text": "arguments in that um and uh what happens with that is that",
    "start": "3203920",
    "end": "3210359"
  },
  {
    "text": "the function then executes immediately using the arguments that you",
    "start": "3210359",
    "end": "3215760"
  },
  {
    "text": "provided in the uh parentheses at the end like here I'm showing you the",
    "start": "3215760",
    "end": "3221920"
  },
  {
    "text": "classical jQuery turkey sandwich implementation where jQuery is actually",
    "start": "3221920",
    "end": "3228280"
  },
  {
    "text": "what uh we're passing in and then we're renaming it as dollar sign inside this",
    "start": "3228280",
    "end": "3234440"
  },
  {
    "text": "function um and in this example we have this variable called warning message and",
    "start": "3234440",
    "end": "3241480"
  },
  {
    "text": "um notice now that I have it uh inside of this functional scope so when I log",
    "start": "3241480",
    "end": "3248040"
  },
  {
    "text": "it here it says Hear Me Now and believe me later in the greatest uh Saturday",
    "start": "3248040",
    "end": "3254079"
  },
  {
    "text": "Night Live tradition whereas down here that same uh variable scope is not",
    "start": "3254079",
    "end": "3261359"
  },
  {
    "text": "available I get the global scope and I instead see tornado so the way that we",
    "start": "3261359",
    "end": "3267240"
  },
  {
    "text": "have uh uh local private variables inside of JavaScript is to use the self",
    "start": "3267240",
    "end": "3274480"
  },
  {
    "text": "executing Anonymous function and I mentioned the turkey",
    "start": "3274480",
    "end": "3280280"
  },
  {
    "text": "sandwich earlier so now we can take that",
    "start": "3280280",
    "end": "3285839"
  },
  {
    "text": "self-executing Anonymous function and use what we call a module pattern now back in the early portion of the",
    "start": "3285839",
    "end": "3293400"
  },
  {
    "text": "presentation you may have remembered me talking about you should only create one",
    "start": "3293400",
    "end": "3299119"
  },
  {
    "text": "Global variable for your entire application this is how we do it what we",
    "start": "3299119",
    "end": "3305839"
  },
  {
    "text": "can do is we can take a um variable in",
    "start": "3305839",
    "end": "3311200"
  },
  {
    "text": "this case spa and we can assign it to a function",
    "start": "3311200",
    "end": "3318480"
  },
  {
    "text": "as we've done here and um and then what we're able to",
    "start": "3318480",
    "end": "3323960"
  },
  {
    "text": "do is uh through the use of the return statement return all of our public",
    "start": "3323960",
    "end": "3330200"
  },
  {
    "text": "functions anything that's not returned is a private function or",
    "start": "3330200",
    "end": "3336880"
  },
  {
    "text": "variable so for those of us who love the the aspect of private versus public in",
    "start": "3336880",
    "end": "3344720"
  },
  {
    "text": "Java the same is available via JavaScript just through a little bit different syntax and yeah maybe a little",
    "start": "3344720",
    "end": "3351640"
  },
  {
    "text": "more convoluted one more thing here so one",
    "start": "3351640",
    "end": "3357280"
  },
  {
    "text": "more thing here is uh through the magic of closures these private variables are still available to all these public",
    "start": "3357280",
    "end": "3363160"
  },
  {
    "text": "methods so when you return this warn user and then execute it it will still remember what these private variables",
    "start": "3363160",
    "end": "3369520"
  },
  {
    "text": "are so they're still accessible you can create Getters and Setters for them if you want to um it's a very useful",
    "start": "3369520",
    "end": "3377000"
  },
  {
    "text": "pattern sure",
    "start": "3377000",
    "end": "3381000"
  },
  {
    "text": "ah it both ways oh yeah yeah you can do it both ways but the the first the way that you've just referred to is",
    "start": "3387200",
    "end": "3393839"
  },
  {
    "text": "wrong um yeah that they're both correct um this one though um it's just pairing",
    "start": "3393839",
    "end": "3401319"
  },
  {
    "text": "the the the uh parentheses in a different way and both of them work um",
    "start": "3401319",
    "end": "3407640"
  },
  {
    "text": "and this just happens to be the one that we prefer and that we use cons consistently throughout the book okay um",
    "start": "3407640",
    "end": "3413599"
  },
  {
    "text": "if you look at our book uh or if you look at at uh the way that we name space we actually create an object called spa",
    "start": "3413599",
    "end": "3421119"
  },
  {
    "text": "and then we end up splitting it into various name spaces and I'm actually going to I'm going to break form here",
    "start": "3421119",
    "end": "3427400"
  },
  {
    "text": "since we've got a little bit of time uh for the people that stayed a little bit later I want to show it to you a little",
    "start": "3427400",
    "end": "3433119"
  },
  {
    "text": "bit um in um the actual uh application",
    "start": "3433119",
    "end": "3438319"
  },
  {
    "text": "so I've got this not applications running here and let's take a look at uh",
    "start": "3438319",
    "end": "3443680"
  },
  {
    "text": "public and I'm going to increase the font size",
    "start": "3443680",
    "end": "3449079"
  },
  {
    "text": "here let's do a tree here and you'll see that we actually have saba. chat spa.",
    "start": "3449079",
    "end": "3455920"
  },
  {
    "text": "dat spa. model spa. shell if you remember",
    "start": "3455920",
    "end": "3461039"
  },
  {
    "text": "anything of that uh architecture diagram before you notice these match exactly",
    "start": "3461039",
    "end": "3466319"
  },
  {
    "text": "the names in that architecture diagram and not by accident if you take a look at S.J",
    "start": "3466319",
    "end": "3477039"
  },
  {
    "text": "you'll see here that we declare Spa first and it has some public",
    "start": "3483039",
    "end": "3489559"
  },
  {
    "text": "functions and then if I look at spa.",
    "start": "3489559",
    "end": "3494200"
  },
  {
    "text": "Shell we're just building off of that original object what this allows us to",
    "start": "3495880",
    "end": "3501440"
  },
  {
    "text": "do is break our large project into functional name name spaces and Define",
    "start": "3501440",
    "end": "3509359"
  },
  {
    "text": "what those functions are for each name space which improves the ability for us",
    "start": "3509359",
    "end": "3516440"
  },
  {
    "text": "to split the project up against multiple developers",
    "start": "3516440",
    "end": "3521880"
  },
  {
    "text": "significantly right so I can say the shell is responsible for the shell of the application for the general window",
    "start": "3521880",
    "end": "3530440"
  },
  {
    "text": "and you Bob are the guy who's going to get to work on that and Frank I got this Spa chat function it's going to have a",
    "start": "3530440",
    "end": "3538280"
  },
  {
    "text": "defined API back to the shell and you Frank are responsible for doing that you guys figure out the API and oh by the",
    "start": "3538280",
    "end": "3545520"
  },
  {
    "text": "way the benefit of doing this is that when Frank finishes with his chat function and we want to use it on another project it's really easy to do",
    "start": "3545520",
    "end": "3553240"
  },
  {
    "text": "because it's isolated and it's got a defined",
    "start": "3553240",
    "end": "3558319"
  },
  {
    "text": "API okay so so much for going off the Beaten Track here let's uh get on let's",
    "start": "3558319",
    "end": "3564359"
  },
  {
    "text": "get on on the Beaten Track",
    "start": "3564359",
    "end": "3568038"
  },
  {
    "text": "um yeah that keeps coming up because my wireless is trying to hook up even though I have the wired connection um so",
    "start": "3579799",
    "end": "3588680"
  },
  {
    "text": "some best practice pick only one name space for your app as I mentioned before that should be your only Global variable",
    "start": "3588680",
    "end": "3595599"
  },
  {
    "text": "sub divide as I just mentioned um let's say I have a a a",
    "start": "3595599",
    "end": "3601200"
  },
  {
    "text": "division called model which is a recommendation I've got boiler plit for all of this by the way um but let's say",
    "start": "3601200",
    "end": "3608039"
  },
  {
    "text": "I have a portion of a model that requires some SVG uh handling well then",
    "start": "3608039",
    "end": "3614000"
  },
  {
    "text": "you can subdivide it you can say spa. model.svg and let's say I had a component of the",
    "start": "3614000",
    "end": "3621520"
  },
  {
    "text": "model that is specific to users I can have SBA . model.",
    "start": "3621520",
    "end": "3627839"
  },
  {
    "text": "users okay also uh we recommend that you use parallel namespaces for CSS and your uh",
    "start": "3627839",
    "end": "3637720"
  },
  {
    "text": "JavaScript files so if you've got something called spa. shell.jpg",
    "start": "3637720",
    "end": "3645839"
  },
  {
    "text": "optional okay now you're not required to do that but it's a very handy convention",
    "start": "3656799",
    "end": "3662760"
  },
  {
    "text": "because we're generating all of our HTML with our own modules so why not name the classes after the modules that control",
    "start": "3662760",
    "end": "3669960"
  },
  {
    "text": "them and use them and I have to say it one more time",
    "start": "3669960",
    "end": "3676160"
  },
  {
    "text": "buy the book if you want more because daddy does need a new car you haven't",
    "start": "3676160",
    "end": "3681200"
  },
  {
    "text": "seen my car it's it's disgusting okay so um",
    "start": "3681200",
    "end": "3687359"
  },
  {
    "text": "in Grand summary these Concepts that we're talking about not all of them are unique but we have found over many years",
    "start": "3687359",
    "end": "3696160"
  },
  {
    "text": "that they are all important for successful large scale uh single page",
    "start": "3696160",
    "end": "3701400"
  },
  {
    "text": "applications um as we mentioned understanding types uh scope chain and",
    "start": "3701400",
    "end": "3707280"
  },
  {
    "text": "hoisting help demystify the otherwise odd seeming behavior that you deal with",
    "start": "3707280",
    "end": "3712720"
  },
  {
    "text": "with JavaScript especially if you come from a different language where you expect things to work one way and",
    "start": "3712720",
    "end": "3718680"
  },
  {
    "text": "certainly in JavaScript they work another another thing to to that I think is very important to take away is the",
    "start": "3718680",
    "end": "3725000"
  },
  {
    "text": "execution context object is at the heart of much of the head scratching Behavior",
    "start": "3725000",
    "end": "3730640"
  },
  {
    "text": "with JavaScript remember that object's there remember when you create an object uh that you are creating a closure over",
    "start": "3730640",
    "end": "3737720"
  },
  {
    "text": "the execution object and things start making sense that used to make me",
    "start": "3737720",
    "end": "3743000"
  },
  {
    "text": "scratch my head a number of years ago we didn't talk about objects because we",
    "start": "3743000",
    "end": "3749119"
  },
  {
    "text": "didn't have time but prototype inheritance can be easy and useful and fast and we will make this presentation",
    "start": "3749119",
    "end": "3756680"
  },
  {
    "text": "available so you can take a look a little bit more about prototype inheritance um uh and again in summary the",
    "start": "3756680",
    "end": "3764000"
  },
  {
    "text": "self-executing anonymous function pattern replaces blocks uh and is the",
    "start": "3764000",
    "end": "3769440"
  },
  {
    "text": "basis for the module pattern and uh finally closures are all about reference",
    "start": "3769440",
    "end": "3775079"
  },
  {
    "text": "counts it's very much like a Unix file system you know um if you've ever been a Unix administrator you know that until",
    "start": "3775079",
    "end": "3781760"
  },
  {
    "text": "that last reference to the file goes away the the uh the file itself is actually not",
    "start": "3781760",
    "end": "3787799"
  },
  {
    "text": "deleted and that concludes thanks for staying around guys that concludes the presentation on um on single page web",
    "start": "3787799",
    "end": "3795400"
  },
  {
    "text": "applications and uh thank you all for staying longer giving me the love I need",
    "start": "3795400",
    "end": "3803790"
  },
  {
    "text": "[Music]",
    "start": "3803790",
    "end": "3811389"
  }
]