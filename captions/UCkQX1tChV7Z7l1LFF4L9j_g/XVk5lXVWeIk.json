[
  {
    "text": "before we get started who has already used Java nine was running on Jeff nine",
    "start": "4030",
    "end": "9370"
  },
  {
    "text": "few brave souls okay very well so as for the rest of you congratulations since",
    "start": "9370",
    "end": "14740"
  },
  {
    "text": "September last year you're actually building a legacy software now right because that's one job make nine came out so but we're going to change them",
    "start": "14740",
    "end": "21519"
  },
  {
    "text": "but your Hill that you're here now you're about to hear about all the changes that went into job nine and they're pretty significance even if",
    "start": "21519",
    "end": "28089"
  },
  {
    "text": "you're not going to use modules you will encounter probably some issues when migrate into Java nine so hence this",
    "start": "28089",
    "end": "35079"
  },
  {
    "text": "talk now of course we're not going to migrate everything to modules directly",
    "start": "35079",
    "end": "41830"
  },
  {
    "text": "and you might be thinking so I have a code based on Java 8 I just run it using",
    "start": "41830",
    "end": "47170"
  },
  {
    "text": "the class path it's inside jar file for example so Java has always been very big",
    "start": "47170",
    "end": "53590"
  },
  {
    "text": "on backwards compatibility right so I should be able to just run the same application on the class class in Java",
    "start": "53590",
    "end": "59710"
  },
  {
    "text": "nine it shouldn't I and I like the way you're thinking but well there are some caveats and we'll",
    "start": "59710",
    "end": "67299"
  },
  {
    "text": "see about this so in principle this scenario is true but it only works if",
    "start": "67299",
    "end": "73900"
  },
  {
    "text": "your application and your libraries etc don't use any of the internal implementation details of the JDK and as",
    "start": "73900",
    "end": "80440"
  },
  {
    "text": "it turns out many libraries that we do use have actually abused these internals of the JDK and this will come back to",
    "start": "80440",
    "end": "86740"
  },
  {
    "text": "haunt us when we're moving to Java nine or ten or even later because I mean it's",
    "start": "86740",
    "end": "92200"
  },
  {
    "text": "time to get with the program people we already have Java nine Java ten is coming this month Java eleven will be later this year and",
    "start": "92200",
    "end": "98799"
  },
  {
    "text": "will all feature the same change that you will have to make from Java ace to eat a Java nine or ten or eleven so you",
    "start": "98799",
    "end": "105370"
  },
  {
    "text": "might think okay I'll just wait it out for a bit but you will encounter these issues so good on you for being here and I hope I",
    "start": "105370",
    "end": "111369"
  },
  {
    "text": "can as they show you what to what to expect when making this move and how to solve the actual issues you take you",
    "start": "111369",
    "end": "117520"
  },
  {
    "text": "might encounter so we're going to do today is we're going to first talk about the acts of moving from Java 8 to Java 9",
    "start": "117520",
    "end": "125229"
  },
  {
    "text": "we're not even talking about modules yet we're talking about just taking your application as it is on the class path",
    "start": "125229",
    "end": "130509"
  },
  {
    "text": "and getting it to run and you're not this is always the first step and you know it may also be the last set free",
    "start": "130509",
    "end": "137010"
  },
  {
    "text": "application because not every application necessarily has to be modernized and we'll talk about some of",
    "start": "137010",
    "end": "143790"
  },
  {
    "text": "the benefits of modules and I think most of you have actually already seen some introductory talks around modules either",
    "start": "143790",
    "end": "150569"
  },
  {
    "text": "by Oracle or by me or some other people and these are always great stories about new applications being built using",
    "start": "150569",
    "end": "156569"
  },
  {
    "text": "modules and getting old benefits of the module system which is great but we have existing code bases right and we care",
    "start": "156569",
    "end": "163230"
  },
  {
    "text": "about taking these into your future as well and some of them already fit to be",
    "start": "163230",
    "end": "168659"
  },
  {
    "text": "ported to a modular wills and some of them well they might be sort of messy right we do occasionally write messy",
    "start": "168659",
    "end": "175769"
  },
  {
    "text": "code as you have a developer's sorry about that so in those cases it might be the last",
    "start": "175769",
    "end": "181560"
  },
  {
    "text": "step to just take it from the classpath java age of nine but of course there are many applications that we do want to",
    "start": "181560",
    "end": "187680"
  },
  {
    "text": "keep extending that we do want to take interview older future and in that case",
    "start": "187680",
    "end": "193049"
  },
  {
    "text": "we want to see how we can actually take these applications and turn them into modular applications so we're going to",
    "start": "193049",
    "end": "198209"
  },
  {
    "text": "do that today with an example application I'll introduce it later but the point here is this even if you're",
    "start": "198209",
    "end": "205019"
  },
  {
    "text": "not going to use modules you will have to move to Java 9 or 10 or later you might encounter some issues so we'll",
    "start": "205019",
    "end": "210180"
  },
  {
    "text": "first move their bets but after that we're going to look at how to actually reap the benefits of modularity so why",
    "start": "210180",
    "end": "216120"
  },
  {
    "text": "am I so interested in modularity so I work at the Lunas which is a software",
    "start": "216120",
    "end": "221280"
  },
  {
    "text": "technology company and we don't only do projects and consultancy but we all also develop our own products and as people",
    "start": "221280",
    "end": "228780"
  },
  {
    "text": "who develop their own products know this is a different kind of ballgame right if you're creating codes that you have some",
    "start": "228780",
    "end": "235169"
  },
  {
    "text": "maintained for for 10-15 years you make different choices and for us modularity",
    "start": "235169",
    "end": "241889"
  },
  {
    "text": "as a architectural principle really helps drive these decisions to make maintainable code to create extensible",
    "start": "241889",
    "end": "248699"
  },
  {
    "text": "codes which allows us to be more agile so all in all this this principle of",
    "start": "248699",
    "end": "254099"
  },
  {
    "text": "modularity is really important to us so we used to do this using for example post iran or what a module systems on",
    "start": "254099",
    "end": "259769"
  },
  {
    "text": "the Java system platform but obviously once Java 9 was going to get a module",
    "start": "259769",
    "end": "264990"
  },
  {
    "text": "system it's really really my interest and this is also why I very deeply into it",
    "start": "264990",
    "end": "270560"
  },
  {
    "text": "now about a migrating application and this is a typical what I would say",
    "start": "270560",
    "end": "277199"
  },
  {
    "text": "legacy spring hibernate application this is not a very modern spring boot to the",
    "start": "277199",
    "end": "282479"
  },
  {
    "text": "spring 5 whatever application this is just a spring floor application using hibernates there's even some XML",
    "start": "282479",
    "end": "288360"
  },
  {
    "text": "configuration still in there somewhere it's also using annotations so this is fairly representative of a application",
    "start": "288360",
    "end": "294030"
  },
  {
    "text": "and that most of us run in production and as you can see it's not a very big application but still it is all the",
    "start": "294030",
    "end": "300270"
  },
  {
    "text": "points it has a repository it has some entities it has some services that needs a dependency injection so this is what",
    "start": "300270",
    "end": "307349"
  },
  {
    "text": "we have this is what we're currently running on Java 8 and we're going to take it to Java 9 and we'll see that in",
    "start": "307349",
    "end": "313919"
  },
  {
    "text": "Java 9 we actually have a modular JDK underneath and we'll talk a bit about that more in more detail later but it",
    "start": "313919",
    "end": "321750"
  },
  {
    "text": "actually means that Java itself is subdivided into modules JDK itself subdivided into modules but our",
    "start": "321750",
    "end": "328319"
  },
  {
    "text": "application is still on the class path so all of our dependencies and well let's face it if you're creating spring",
    "start": "328319",
    "end": "333990"
  },
  {
    "text": "have an interpretation you do have a lot of dependencies they all live in the class path and as you can see here it is",
    "start": "333990",
    "end": "339690"
  },
  {
    "text": "only a subset our application code in orange is also there but what Mike might",
    "start": "339690",
    "end": "345750"
  },
  {
    "text": "catch your attention is that the class path now also has a different name it is",
    "start": "345750",
    "end": "351300"
  },
  {
    "text": "also known as demon names module because it turns out if you're running code from",
    "start": "351300",
    "end": "356669"
  },
  {
    "text": "the class pass on Jan 9 it's actually already inside of a module even though you didn't put it there the JVM will do",
    "start": "356669",
    "end": "363120"
  },
  {
    "text": "this for you when money comes and we'll see that this unnamed module is sort of a special module it's really it behaves",
    "start": "363120",
    "end": "368969"
  },
  {
    "text": "as as a normal class path but still it's already a signal that something has",
    "start": "368969",
    "end": "375089"
  },
  {
    "text": "changed in Java and something has fundamentally changed so what we're going to do is we're going to just try",
    "start": "375089",
    "end": "381750"
  },
  {
    "text": "and see what happens if we take our application from the class path in Java 8 to Java now so let's go here we have",
    "start": "381750",
    "end": "389370"
  },
  {
    "text": "our application it's just churches in a couple of packages",
    "start": "389370",
    "end": "394919"
  },
  {
    "text": "some API some implementation packages just to show that plain Java cause it's",
    "start": "394919",
    "end": "401099"
  },
  {
    "text": "just using some spring tabs etc so we have a main bootstrap application contacts we",
    "start": "401099",
    "end": "406960"
  },
  {
    "text": "have a book surface bookstore service or spring beans we're going to create some",
    "start": "406960",
    "end": "412750"
  },
  {
    "text": "ebooks using the hibernate repository and we're going to retrieve the books again and use the bookstore service to",
    "start": "412750",
    "end": "418300"
  },
  {
    "text": "calculate sum total so just to illustrate there's nothing really",
    "start": "418300",
    "end": "423880"
  },
  {
    "text": "special about this code anyway so I do have a little script here that just says",
    "start": "423880",
    "end": "429310"
  },
  {
    "text": "the classpath compiles our cards and runs the application so fair warning and",
    "start": "429310",
    "end": "434650"
  },
  {
    "text": "there will be command-line compiler implications in this talk and there will be code and there will be errors so if",
    "start": "434650",
    "end": "440530"
  },
  {
    "text": "you're not up for that you can still leave I won't make fun of you and now it's the time so let's just run this and",
    "start": "440530",
    "end": "447520"
  },
  {
    "text": "see what's going to happen if we're on the job it's so just to make sure I want",
    "start": "447520",
    "end": "453820"
  },
  {
    "text": "to be on Java 8 that's verify yep there we go and it's very much scripts there",
    "start": "453820",
    "end": "464860"
  },
  {
    "text": "we go unless you can see if compiles starts the application spring does it sting",
    "start": "464860",
    "end": "470200"
  },
  {
    "text": "takes tomorrow oh well we have time and now we have our outputs so it's created some books using hibernates retrieve",
    "start": "470200",
    "end": "476740"
  },
  {
    "text": "them and did the calculation now service so now I'm going to stepwise approach",
    "start": "476740",
    "end": "482290"
  },
  {
    "text": "this and I'm going to not run the application I'm just going to first see if we can compile it using Java 9 so the",
    "start": "482290",
    "end": "489910"
  },
  {
    "text": "first thing to notice it's not Java 1.9 anymore it's Java 9 so we can say set JDK 9 so I think it's a good thing this",
    "start": "489910",
    "end": "497320"
  },
  {
    "text": "prefix has been drops because it was really useless but now we're hopefully on Java or not and indeed there we have",
    "start": "497320",
    "end": "505330"
  },
  {
    "text": "it we're currently running everything once you have a nine so if I read my script now containing Eleni only the",
    "start": "505330",
    "end": "510790"
  },
  {
    "text": "compilation it works yay for backward compatibility that's good so that's now let's try to run this",
    "start": "510790",
    "end": "517750"
  },
  {
    "text": "application and reuse the same script again compile if the boots looks hopeful",
    "start": "517750",
    "end": "524530"
  },
  {
    "text": "and then we wait a bit more and it's shadows out all of our dreams that's",
    "start": "524530",
    "end": "530640"
  },
  {
    "text": "compatibility because well the application doesn't run does is it gives us a class found exception java xml by Jake's be",
    "start": "530640",
    "end": "537730"
  },
  {
    "text": "exception so what's up with that what we see here is one of the three major",
    "start": "537730",
    "end": "543519"
  },
  {
    "text": "problems that you can encounter when you move to jail for nine or later so there",
    "start": "543519",
    "end": "548529"
  },
  {
    "text": "are some modules in the JDK which are so-called Enterprise modules which now",
    "start": "548529",
    "end": "554470"
  },
  {
    "text": "with the other nine aren't visuals are available by default anymore so we'll look into that problem",
    "start": "554470",
    "end": "559959"
  },
  {
    "text": "there are also some libraries and even application codes that abuse platform internals of the JDK and this will",
    "start": "559959",
    "end": "567069"
  },
  {
    "text": "behave differently on Java 9 as well as it did in earlier versions a third class of issues that you might run into is",
    "start": "567069",
    "end": "573339"
  },
  {
    "text": "that there might be split packages between some of the libraries that you're using on the class path and",
    "start": "573339",
    "end": "579129"
  },
  {
    "text": "packages there that are actually inside the modules in the JDK now this is",
    "start": "579129",
    "end": "584679"
  },
  {
    "text": "somewhat rarer but if you use for example the admirable annotations from juror 3 or 5 etc this is a really common",
    "start": "584679",
    "end": "591249"
  },
  {
    "text": "issue and what happens is that class path types in this package will be ignored and it will only in the JVM see",
    "start": "591249",
    "end": "597489"
  },
  {
    "text": "the packages that have been shipped with the JDK itself so that will probably break your application we're not going",
    "start": "597489",
    "end": "603910"
  },
  {
    "text": "to look in the third issue today we're just going to stick to what we encounter when migrating this application so there",
    "start": "603910",
    "end": "609459"
  },
  {
    "text": "will be the first two issues but this this is definitely also something to to be aware of so let's try to bring this",
    "start": "609459",
    "end": "616839"
  },
  {
    "text": "problem that we just saw at runtime back into a small reputable compile time example so if we take this code where we",
    "start": "616839",
    "end": "624699"
  },
  {
    "text": "have a main class using just some simple data type converter class from the java xml bind package then we can't actually",
    "start": "624699",
    "end": "632499"
  },
  {
    "text": "even compile this code would you have a nine and it actually has the same root cause as the runtime parent or just so",
    "start": "632499",
    "end": "640529"
  },
  {
    "text": "what happens is that we now have a module graph of all modules inside of",
    "start": "640529",
    "end": "646059"
  },
  {
    "text": "the jdk and this exists regardless of us using modules or not so even though our",
    "start": "646059",
    "end": "652899"
  },
  {
    "text": "application is still in the class path it will run on top of this modular JDK and of course it's great that we now have a modular JDK because we have all",
    "start": "652899",
    "end": "659499"
  },
  {
    "text": "these explicit dependencies and it makes even genetic a much nicer etc etc but",
    "start": "659499",
    "end": "664929"
  },
  {
    "text": "there are some so if you look closely you'll find there's a module John found of x-men on",
    "start": "664929",
    "end": "670990"
  },
  {
    "text": "the box which does include the package that we just talked about and it's in the module graph it's in the complete",
    "start": "670990",
    "end": "677110"
  },
  {
    "text": "module graph of the JDK so that sounds promising right but if you look closely",
    "start": "677110",
    "end": "682470"
  },
  {
    "text": "it's only reachable from the jaw found at a seed of AE top-level notes and EE R",
    "start": "682470",
    "end": "688060"
  },
  {
    "text": "stands for Enterprise Edition modules now there's also a Java SE notes in the",
    "start": "688060",
    "end": "693700"
  },
  {
    "text": "module graph which groups or erase all of the Java SE modules that are available in the jdk so there is a set",
    "start": "693700",
    "end": "701080"
  },
  {
    "text": "of modules that is not reachable from Java se but it's reachable from Java as he now what happens if you compile or",
    "start": "701080",
    "end": "710200"
  },
  {
    "text": "run curves on the class path with JDK 9 is that the compiler and the runtime",
    "start": "710200",
    "end": "715560"
  },
  {
    "text": "actually resolve everything that's beneath Java SE but not anything that's",
    "start": "715560",
    "end": "721870"
  },
  {
    "text": "beneath Java as he only and there's a reason for this",
    "start": "721870",
    "end": "726880"
  },
  {
    "text": "the reason is sorry the reason is that they actually want to get rid of these",
    "start": "726880",
    "end": "732160"
  },
  {
    "text": "EE modules listed here so corbat will be gone actually with Java - yeh and Java",
    "start": "732160",
    "end": "739240"
  },
  {
    "text": "external WS same story etc so this is actually something that will change in a",
    "start": "739240",
    "end": "745360"
  },
  {
    "text": "future release the modules are still there currently but they're not resolved by defaults if you're compiling on the",
    "start": "745360",
    "end": "750640"
  },
  {
    "text": "class path or running on the class path so it's sort of pity that we only found this house when running the code right",
    "start": "750640",
    "end": "757450"
  },
  {
    "text": "so what you can also do is you can also use a tool called jaidev's to analyze",
    "start": "757450",
    "end": "763240"
  },
  {
    "text": "your existing code and see if it has any of these dependencies on unresolved",
    "start": "763240",
    "end": "768400"
  },
  {
    "text": "modules and what it will look like is you provide the main class in this instance and it will show you all the",
    "start": "768400",
    "end": "773830"
  },
  {
    "text": "dependencies that it has it has a dependency on java.lang which is a typical package because everybody uses which is",
    "start": "773830",
    "end": "779230"
  },
  {
    "text": "inside of the java base module and a java-based module is sort of at the bottom of the hierarchy everybody has a dependency in Java base it contains",
    "start": "779230",
    "end": "785710"
  },
  {
    "text": "foundational classes like Java line objects string collections utils etc but",
    "start": "785710",
    "end": "791500"
  },
  {
    "text": "the not founder is of course the interesting party so it has dependency on the java xml binds a package but it can't resolve",
    "start": "791500",
    "end": "799060"
  },
  {
    "text": "this but if and it will tell you this with a jade edge tool so there is some solutions that you can take so at compile-time you",
    "start": "799060",
    "end": "806079"
  },
  {
    "text": "can use the add module flag and tell it for example to explicitly also resolve the java xml bytes module for your",
    "start": "806079",
    "end": "813339"
  },
  {
    "text": "application to compile against so this works and you would have to do the same at runtime but at the same time I just",
    "start": "813339",
    "end": "820629"
  },
  {
    "text": "told you that these modules are not resolved for a reason because they're going to be removed and they're actually",
    "start": "820629",
    "end": "826870"
  },
  {
    "text": "going to be removed in Java 11 so the best solution to this problem is to find",
    "start": "826870",
    "end": "832059"
  },
  {
    "text": "an implantation of the java xml binds api yourself and add this to the class",
    "start": "832059",
    "end": "837490"
  },
  {
    "text": "path just like it was with any other library dependencies so here I mean you",
    "start": "837490",
    "end": "842499"
  },
  {
    "text": "do have a choice and for now we'll choose the easy way out and in John 4:9 and Java 10 this would work but in Java",
    "start": "842499",
    "end": "848410"
  },
  {
    "text": "11 you will have to provide your own implementation so that being said this",
    "start": "848410",
    "end": "854920"
  },
  {
    "text": "should fix our issue let's see if it's actually true so we're going back to our",
    "start": "854920",
    "end": "860529"
  },
  {
    "text": "run script we're going to say add modules Java that's smell don't bind",
    "start": "860529",
    "end": "868689"
  },
  {
    "text": "there we go now we're going to run our",
    "start": "868689",
    "end": "874120"
  },
  {
    "text": "application and this should fix the class not found exception that we just saw",
    "start": "874120",
    "end": "879839"
  },
  {
    "text": "so we haven't touched modules in our application yes but we still run into",
    "start": "879839",
    "end": "885730"
  },
  {
    "text": "the issue due to the modernisation of the JDK now this is like I said always the first",
    "start": "885730",
    "end": "892149"
  },
  {
    "text": "step so taking a Java 8 class past application to Java 9 class path and this will give you access to all the new",
    "start": "892149",
    "end": "897490"
  },
  {
    "text": "API s in Java 9 it will give you access to the performance and security improvements etc but it doesn't yes",
    "start": "897490",
    "end": "904179"
  },
  {
    "text": "really give you any benefits of having a module system for your application so",
    "start": "904179",
    "end": "909699"
  },
  {
    "text": "let's look at modules next but before we",
    "start": "909699",
    "end": "914980"
  },
  {
    "text": "do that we actually have to go back to what we just saw because if you were",
    "start": "914980",
    "end": "920709"
  },
  {
    "text": "very very attentive you might have seen that there was a warning in our APIs and",
    "start": "920709",
    "end": "926290"
  },
  {
    "text": "this was not a warning that is princess by spring or our application codes there's actually a warning that's been",
    "start": "926290",
    "end": "932379"
  },
  {
    "text": "printed by the jdk itself which is fairly in face of rice normally the jdk and",
    "start": "932379",
    "end": "938390"
  },
  {
    "text": "doesn't really print anything to the console for us but here it gave us a warning it says an illegal reflected",
    "start": "938390",
    "end": "943880"
  },
  {
    "text": "access operation has occurs that sounds very bad right so it says there's an",
    "start": "943880",
    "end": "950029"
  },
  {
    "text": "illegal reflective access to Java on glass water defined class which is apparently your methods of lacrosse",
    "start": "950029",
    "end": "955400"
  },
  {
    "text": "slaughter class and it turns out that the Japanese library that spring uses",
    "start": "955400",
    "end": "961790"
  },
  {
    "text": "internally uses this kind of class loader hacking to do its work now",
    "start": "961790",
    "end": "967480"
  },
  {
    "text": "apparently this is no longer a good idea because well it's a private class which",
    "start": "967480",
    "end": "974779"
  },
  {
    "text": "you shouldn't actually use so Java cysts must change so the first thing warning",
    "start": "974779",
    "end": "980150"
  },
  {
    "text": "says okay please consider reporting this to the maintainers of the library in this case Java cysts and actually they",
    "start": "980150",
    "end": "985910"
  },
  {
    "text": "fix this so a lesson here is if we would have upgraded to the latest version of all of our dependencies we wouldn't even",
    "start": "985910",
    "end": "992240"
  },
  {
    "text": "see this issue but if you did see some of these issues some of these warnings it also points to some things with",
    "start": "992240",
    "end": "998180"
  },
  {
    "text": "library code that's actually abuses internal implementation details of the jdk and it also says at the bottom all",
    "start": "998180",
    "end": "1006160"
  },
  {
    "text": "illegal access operations will be denied in the future released so we're still playing nice writes in the Java 9 but in",
    "start": "1006160",
    "end": "1013060"
  },
  {
    "text": "a later version this warning may be turned into actual error breaking your application so for now what you can do",
    "start": "1013060",
    "end": "1019750"
  },
  {
    "text": "is you can work around this by explicitly allowing this Java assist",
    "start": "1019750",
    "end": "1026140"
  },
  {
    "text": "library to break into the java dot length package of java base with the add opens java based so inside module Java",
    "start": "1026140",
    "end": "1034030"
  },
  {
    "text": "base we're going to open up the java.lang package where the class loader class lives and we're going to open it",
    "start": "1034030",
    "end": "1039250"
  },
  {
    "text": "up to all the unnamed modules so all pieces of code that are running on the class path and this should hopefully",
    "start": "1039250",
    "end": "1044980"
  },
  {
    "text": "also take away our warning and we're not",
    "start": "1044980",
    "end": "1050350"
  },
  {
    "text": "going to try this because you have to trust me this works so what generally",
    "start": "1050350",
    "end": "1056160"
  },
  {
    "text": "what happens if you have code that uses encapsulated api's so here we again we",
    "start": "1056160",
    "end": "1063190"
  },
  {
    "text": "have a small of this scenario but now I've compiled time again instead of a burn time and",
    "start": "1063190",
    "end": "1068809"
  },
  {
    "text": "here's a class that uses some security x.509 x5 Hyundai I mean who doesn't use",
    "start": "1068809",
    "end": "1075020"
  },
  {
    "text": "it right so it uses this class and this works perfectly fine on Java X however",
    "start": "1075020",
    "end": "1080900"
  },
  {
    "text": "if you're trying to compile this on Java 9 it will actually actively dislike this",
    "start": "1080900",
    "end": "1086299"
  },
  {
    "text": "because you shouldn't be using this and now it's truly encapsulated in a module in the JDK it can't even compile against",
    "start": "1086299",
    "end": "1093620"
  },
  {
    "text": "this so again if you want to find out by",
    "start": "1093620",
    "end": "1099410"
  },
  {
    "text": "other means than just looking at compiler errors and also see what alternatives are available use the Jade",
    "start": "1099410",
    "end": "1105049"
  },
  {
    "text": "ups tool in this case you can provide the JDK internal flag as well and if you provide it with the code if you want to",
    "start": "1105049",
    "end": "1111440"
  },
  {
    "text": "inspect it can be a class can be a jar file can be multiple jar files even then it will also scan for users of these",
    "start": "1111440",
    "end": "1117440"
  },
  {
    "text": "internal and deprecated API ends it will give you a replacement which by the way",
    "start": "1117440",
    "end": "1122960"
  },
  {
    "text": "has been available since Java 104 so what you're still using this but at the same time this is really helpful to to",
    "start": "1122960",
    "end": "1130070"
  },
  {
    "text": "order your own ghost and I think in general it will be mostly libraries that",
    "start": "1130070",
    "end": "1135140"
  },
  {
    "text": "abuse internal types but there are also some occurrences of uses of for example",
    "start": "1135140",
    "end": "1141760"
  },
  {
    "text": "base64 encoding and decoding tags that are in private packages of the JDK that are quite popular and application code",
    "start": "1141760",
    "end": "1147890"
  },
  {
    "text": "as well and this will break if you move to the modular JDK in Java 9 so I mean",
    "start": "1147890",
    "end": "1154340"
  },
  {
    "text": "what we just saw was code that's we could actually that was actually",
    "start": "1154340",
    "end": "1159350"
  },
  {
    "text": "compound for Java 8 so the Java is this code and we ran it with Java 9 and that",
    "start": "1159350",
    "end": "1164929"
  },
  {
    "text": "works because we're in the sort of lenient transition phase to a fully full",
    "start": "1164929",
    "end": "1170540"
  },
  {
    "text": "encapsulation story in the JDK so we only got a warning but the code still run in the future this will most",
    "start": "1170540",
    "end": "1178910"
  },
  {
    "text": "probably be the default of the JDK so there's an illegal access flag and by",
    "start": "1178910",
    "end": "1184820"
  },
  {
    "text": "default is set to warn but if you set it to denied then it will actually throw an error and it will just fill your code so",
    "start": "1184820",
    "end": "1193960"
  },
  {
    "text": "your goal should be to be able to run your application using illegal access is denied and if it",
    "start": "1193960",
    "end": "1201059"
  },
  {
    "text": "runs with that then you're completely ready for the future of any other job of releases that are upcoming and that will",
    "start": "1201059",
    "end": "1207450"
  },
  {
    "text": "tighten screws further on encapsulation in the JDK so if you really can't change",
    "start": "1207450",
    "end": "1214260"
  },
  {
    "text": "your code then what you can also use is the add exports flag and we'll talk a",
    "start": "1214260",
    "end": "1220320"
  },
  {
    "text": "little bit about the difference between an open package and exported package later if we talk about modules themselves but here we're still in a",
    "start": "1220320",
    "end": "1228030"
  },
  {
    "text": "class pass situation and this situation we can say ok we're going to export the package in security x.509 to again all",
    "start": "1228030",
    "end": "1235410"
  },
  {
    "text": "the names which is the class path and use that to run and compile our codes and again this will work around the",
    "start": "1235410",
    "end": "1243059"
  },
  {
    "text": "problem and this will at least get you running again so looking at class path",
    "start": "1243059",
    "end": "1250080"
  },
  {
    "text": "migration first you should always upgrade to the latest versions of tools and libraries so lots of these issues",
    "start": "1250080",
    "end": "1257130"
  },
  {
    "text": "have been teased out already for you so you won't run into the issues that we just saw hopefully and if you do then",
    "start": "1257130",
    "end": "1263990"
  },
  {
    "text": "really try to contact the danis and point them to their responsibility to",
    "start": "1263990",
    "end": "1269040"
  },
  {
    "text": "make it work with the future of java so again use Jade EPS to find any of the",
    "start": "1269040",
    "end": "1274110"
  },
  {
    "text": "potential issues like these dependencies on the enterprise modules or user in JDK internal ap is split packages I've",
    "start": "1274110",
    "end": "1281790"
  },
  {
    "text": "talked about that but we haven't seen any example of that and try to fix all",
    "start": "1281790",
    "end": "1288030"
  },
  {
    "text": "of the illegal access warnings either by using these command line flags which is sort of we workarounds or by changing",
    "start": "1288030",
    "end": "1295530"
  },
  {
    "text": "your codes if it's your code that's breaking the rules or upgrading to later versions of libraries that don't do",
    "start": "1295530",
    "end": "1302040"
  },
  {
    "text": "these illegal accesses to internal JDK types but I mean we have a class pass",
    "start": "1302040",
    "end": "1309059"
  },
  {
    "text": "application and we're on Java 9 so we wants to use modules as well right and before we're going to look at how to",
    "start": "1309059",
    "end": "1315809"
  },
  {
    "text": "move this spring application into the modular rules let's first talk about why",
    "start": "1315809",
    "end": "1321210"
  },
  {
    "text": "you want to do this because typically what we have in our whiteboard designs is a very nice like architecture diagram",
    "start": "1321210",
    "end": "1328800"
  },
  {
    "text": "so we have a main sort of part of the application that uses a books API and there's a bookstore part of functional",
    "start": "1328800",
    "end": "1335250"
  },
  {
    "text": "part of the application there's an implementation of the API it's all nice and clean but well if we really think",
    "start": "1335250",
    "end": "1341340"
  },
  {
    "text": "about it at runtime our view of the application is a bit more miserable it's the class path right just a bunch of",
    "start": "1341340",
    "end": "1348180"
  },
  {
    "text": "Java files on there and there's absolutely no structure in the class path so there are no explicit dependencies between these jars",
    "start": "1348180",
    "end": "1354660"
  },
  {
    "text": "it's easy to miss one and it will only blow up a runtime it's easy to have multiple versions of your libraries or",
    "start": "1354660",
    "end": "1362040"
  },
  {
    "text": "in your application code on the class path and it may or may not work depending on whatever happens in your",
    "start": "1362040",
    "end": "1367260"
  },
  {
    "text": "code so this is generally a bad place to be and it doesn't really reflect what we",
    "start": "1367260",
    "end": "1372360"
  },
  {
    "text": "just saw so if we're going to use modules like the modules are used in JDK",
    "start": "1372360",
    "end": "1377640"
  },
  {
    "text": "itself then this will become a possibility and we can get help from the compiler and from the JVM in",
    "start": "1377640",
    "end": "1383120"
  },
  {
    "text": "establishing modules by also defending the module boundaries and and having the",
    "start": "1383120",
    "end": "1391620"
  },
  {
    "text": "means to encapsulate inside of modules so before we move on a short primer on",
    "start": "1391620",
    "end": "1397230"
  },
  {
    "text": "modules modules are you can think of them as jar files containing extra",
    "start": "1397230",
    "end": "1402780"
  },
  {
    "text": "metadata in the form of a module description a module descriptor looks as follows we see two here there's one for",
    "start": "1402780",
    "end": "1408720"
  },
  {
    "text": "a module main and there's one for a module bookstore and as you can see this much of main has a required statements",
    "start": "1408720",
    "end": "1415680"
  },
  {
    "text": "and it says okay that much of main requires the bookstore module meaning",
    "start": "1415680",
    "end": "1420720"
  },
  {
    "text": "that it actually needs the bookstore implementation to do this work so it's probably accessing some code inside of",
    "start": "1420720",
    "end": "1427530"
  },
  {
    "text": "this book so motion so you need to be explicit about this and the module system in Java 9 helps us to actually",
    "start": "1427530",
    "end": "1435330"
  },
  {
    "text": "verify whether all modules are available if we're going to start the application so if we would start this module main",
    "start": "1435330",
    "end": "1441060"
  },
  {
    "text": "without the bookstore module being available it will already be detected at a resolution time so there will be a",
    "start": "1441060",
    "end": "1447780"
  },
  {
    "text": "resolution phase in the module system where it takes all of the module descriptors all of the module info files",
    "start": "1447780",
    "end": "1454020"
  },
  {
    "text": "and it will try to see if we have a feather module graph so that's already",
    "start": "1454020",
    "end": "1459270"
  },
  {
    "text": "quite helpful on the other side we have exports statements and if we look at modules I",
    "start": "1459270",
    "end": "1467120"
  },
  {
    "text": "said they're like a jar file with an additional metadata but they also behave differently than normal jar files if you",
    "start": "1467120",
    "end": "1473510"
  },
  {
    "text": "have some public class in a package in a jar file on the class path it's accessible to any other public to any",
    "start": "1473510",
    "end": "1480260"
  },
  {
    "text": "other class on the class path so there's no real way to do encapsulation and the JDK team found this out the hard way",
    "start": "1480260",
    "end": "1485990"
  },
  {
    "text": "when they actually had this problem of encapsulated AP is that were being used",
    "start": "1485990",
    "end": "1491090"
  },
  {
    "text": "in libraries and application cards so we have this on with LastPass now a modular",
    "start": "1491090",
    "end": "1496820"
  },
  {
    "text": "jar actually doesn't expose anything to the outside world only if you tell it to",
    "start": "1496820",
    "end": "1502310"
  },
  {
    "text": "using an export statements so here we say that the module bookstore exports the packaged book store API dose as we",
    "start": "1502310",
    "end": "1510080"
  },
  {
    "text": "see surface and any other packages that are inside of this module will be",
    "start": "1510080",
    "end": "1515300"
  },
  {
    "text": "encapsulated meaning that if another module has a dependency on bookstore it won't be able to access this code it",
    "start": "1515300",
    "end": "1521990"
  },
  {
    "text": "won't be able to use his code in packages that haven't been exported so this is a really good way to be",
    "start": "1521990",
    "end": "1528710"
  },
  {
    "text": "deliberate about the API of your module of your components and the smaller API",
    "start": "1528710",
    "end": "1533750"
  },
  {
    "text": "is the better of course because it will help you support only the parts of your",
    "start": "1533750",
    "end": "1539570"
  },
  {
    "text": "module to the outer circles that are actually part of your contracts and all of the internal implementation details",
    "start": "1539570",
    "end": "1545360"
  },
  {
    "text": "you can rename you can refactor you can do whatever every wants nobody Indians gets to see it now we also have a",
    "start": "1545360",
    "end": "1552740"
  },
  {
    "text": "concept of open packages and you can think of open packages as a sort of in",
    "start": "1552740",
    "end": "1558350"
  },
  {
    "text": "between full and capsulation and an exported package because what happens",
    "start": "1558350",
    "end": "1564770"
  },
  {
    "text": "actually in our applications is that we don't always have this real nice",
    "start": "1564770",
    "end": "1569950"
  },
  {
    "text": "boundary between what is API in our code and what is implementation details because for instance if we're using",
    "start": "1569950",
    "end": "1576200"
  },
  {
    "text": "spring spring needs to reach into our implementation classes to instantiate them and to be able to inject them maybe",
    "start": "1576200",
    "end": "1582740"
  },
  {
    "text": "even into private fields of other classes so spring and hibernate and all",
    "start": "1582740",
    "end": "1588050"
  },
  {
    "text": "these other tools does make heavy use of reflection actually need access to the internal implementation",
    "start": "1588050",
    "end": "1593560"
  },
  {
    "text": "of your modules well you could of course export the code in that case but it",
    "start": "1593560",
    "end": "1599650"
  },
  {
    "text": "doesn't really feel like a good solution because it was also mean that other parts of your application can now",
    "start": "1599650",
    "end": "1604720"
  },
  {
    "text": "compile against these implementation times these implementation details so we don't want that so what opens does is that it allows all",
    "start": "1604720",
    "end": "1613390"
  },
  {
    "text": "modules to access in this case the bookstore input package only at runtime so at compile time there's still",
    "start": "1613390",
    "end": "1620140"
  },
  {
    "text": "encapsulation you still can't compile against anything that's inside a bookstore the input which is what you",
    "start": "1620140",
    "end": "1625900"
  },
  {
    "text": "want you want to have nice service interfaces rather than talking to implementations but runtime libraries",
    "start": "1625900",
    "end": "1632770"
  },
  {
    "text": "like spring and hibernate are still able to break this encapsulation at runtime",
    "start": "1632770",
    "end": "1637840"
  },
  {
    "text": "and use reflection to instantiate your service implementations your entities and so on so this was a quick overview",
    "start": "1637840",
    "end": "1646720"
  },
  {
    "text": "but we'll see all of these features coming back in our migration path so how are we going to go about migrating to",
    "start": "1646720",
    "end": "1653230"
  },
  {
    "text": "modules it's very tempting to really dive in directly and already try to chop",
    "start": "1653230",
    "end": "1660580"
  },
  {
    "text": "up your whole application into multiple modules and get it to work but it turns out that there are some technical issues",
    "start": "1660580",
    "end": "1667900"
  },
  {
    "text": "still that we need to work out if we're going to create a module if we were going to create modules for application",
    "start": "1667900",
    "end": "1672910"
  },
  {
    "text": "so what we're going to do and is have a look at how we can do this in a simple",
    "start": "1672910",
    "end": "1679240"
  },
  {
    "text": "way and another issue that we encounter is the fact that well we might be able",
    "start": "1679240",
    "end": "1685450"
  },
  {
    "text": "to create a module or modules from an application but that doesn't mean that there are dependencies already modules",
    "start": "1685450",
    "end": "1691360"
  },
  {
    "text": "so how does it work so before we go to the spring application back again here's a simple example where we have a simple",
    "start": "1691360",
    "end": "1696730"
  },
  {
    "text": "demonstrative file that has a dependency on commerce Lang for example and it will run run on top of the modular JDK but",
    "start": "1696730",
    "end": "1703720"
  },
  {
    "text": "it's all still on the class path and it works fine and in this demand demonstrates a jar there's a single class that's uses left path from Apache",
    "start": "1703720",
    "end": "1712510"
  },
  {
    "text": "Commons Lang because we all learned from the JavaScript folks that we need an external dependency for DES so there we go and this works fine in the classpath",
    "start": "1712510",
    "end": "1720730"
  },
  {
    "text": "situation right so we have kumo lang on the class path we have our compiled class we run a",
    "start": "1720730",
    "end": "1726680"
  },
  {
    "text": "and always well but what if we want to make our demonstrated application into a",
    "start": "1726680",
    "end": "1732340"
  },
  {
    "text": "real module on the module path in JDK 9 well if we're going to have to define",
    "start": "1732340",
    "end": "1738620"
  },
  {
    "text": "the requires relation for this demonstrator jar then we would have to express our dependency on this class",
    "start": "1738620",
    "end": "1744830"
  },
  {
    "text": "path library commerce slang but for my module you can't reach the class path anymore you can't reference the class",
    "start": "1744830",
    "end": "1750710"
  },
  {
    "text": "stuff anymore and it's a good thing because we want all of the assurances of the module system so it wants to create a real",
    "start": "1750710",
    "end": "1756440"
  },
  {
    "text": "module graph and if we would still be able to reference the class path then all these promises of the module systems",
    "start": "1756440",
    "end": "1762890"
  },
  {
    "text": "will break down so this is a good thing but well it just posed the question ok how do we turn this commerce slag into a",
    "start": "1762890",
    "end": "1768920"
  },
  {
    "text": "module because it's not our code I mean we could patch it but that will be bad and it might work for one library but",
    "start": "1768920",
    "end": "1775760"
  },
  {
    "text": "doesn't work if we have 30 or 40 dependencies we might create a pull request or do a open an issue and get up",
    "start": "1775760",
    "end": "1783170"
  },
  {
    "text": "or whatever but again we would have to wait which might be viable for a single dependency but again not if you have 30",
    "start": "1783170",
    "end": "1789620"
  },
  {
    "text": "or 40 so what's what's the story here so fortunately there's a migration story",
    "start": "1789620",
    "end": "1795470"
  },
  {
    "text": "for jars that haven't been model arise yes - so what you can do is you can take",
    "start": "1795470",
    "end": "1801710"
  },
  {
    "text": "a plain jar file and you can take from the class path and put it on a module path in Java now there's we'll turn it",
    "start": "1801710",
    "end": "1808220"
  },
  {
    "text": "into an automatic module and an automatic module isn't a really great module we'll see that but at least it's",
    "start": "1808220",
    "end": "1814490"
  },
  {
    "text": "usable as a module in the inner modeler worlds so we'll get a module name that's derived from jar file name which is",
    "start": "1814490",
    "end": "1821360"
  },
  {
    "text": "great of course because anybody could change the file name or is derived from a automatic module name header in the",
    "start": "1821360",
    "end": "1827690"
  },
  {
    "text": "manifest file of a jar file which can be really easily added by library maintains much more easily than creating a full",
    "start": "1827690",
    "end": "1834860"
  },
  {
    "text": "module descriptor and going to Java 9 fully so that happens in a lot of cases already that these names are put into",
    "start": "1834860",
    "end": "1842400"
  },
  {
    "text": "had a manifest files of her files and then this automatic module will export",
    "start": "1842400",
    "end": "1847500"
  },
  {
    "text": "everything which of course is bad because there's no separation between implementation and API anymore but well",
    "start": "1847500",
    "end": "1853230"
  },
  {
    "text": "we don't know the intents of the library so we this is the best we can do it also reads all other modules that have been",
    "start": "1853230",
    "end": "1860460"
  },
  {
    "text": "resolved into the module graph because well it still doesn't have a real module descriptor expressing the dependencies",
    "start": "1860460",
    "end": "1866670"
  },
  {
    "text": "of the library so again this is the best we can do and it also and like the modules that we can create an automatic",
    "start": "1866670",
    "end": "1873150"
  },
  {
    "text": "automatic module also has access to the class path so as far as the library code goes it it's for the library code it",
    "start": "1873150",
    "end": "1879810"
  },
  {
    "text": "feels as if it's on the class path but for us from a module point of view we can actually refer to this automatic",
    "start": "1879810",
    "end": "1885720"
  },
  {
    "text": "module now from our module descriptors so we this way we can monetize our code without waiting on our libraries to",
    "start": "1885720",
    "end": "1892770"
  },
  {
    "text": "become Java modules which is good so now in our demonstrator jar we can say",
    "start": "1892770",
    "end": "1898140"
  },
  {
    "text": "requires commas length 3 and we can compile using the module path and the module source path which you should use",
    "start": "1898140",
    "end": "1905160"
  },
  {
    "text": "to compile modular applications and once we've done that we can run the",
    "start": "1905160",
    "end": "1910410"
  },
  {
    "text": "application also using the module path and there's a dash M instead of this jar",
    "start": "1910410",
    "end": "1915930"
  },
  {
    "text": "to start modules instead of playing jar files so this this is the way to",
    "start": "1915930",
    "end": "1921630"
  },
  {
    "text": "approach the migration with dependencies now we have a bit more than a single dependency of course in the case of our",
    "start": "1921630",
    "end": "1927570"
  },
  {
    "text": "string application so what we're going to do first is we're going to create a single module a single module around our",
    "start": "1927570",
    "end": "1935310"
  },
  {
    "text": "at whole application and we're going to do this to tease out any of the difficulties that we might encounter",
    "start": "1935310",
    "end": "1941400"
  },
  {
    "text": "when using these automatic modules because we do actually code against",
    "start": "1941400",
    "end": "1946470"
  },
  {
    "text": "several of these API a spring and in hibernate so some of these libraries",
    "start": "1946470",
    "end": "1951900"
  },
  {
    "text": "will have to move to the module path and become automatic modules so the first",
    "start": "1951900",
    "end": "1957000"
  },
  {
    "text": "step that we're going to take is we're going to actually create a module in photo java with a module descriptor for",
    "start": "1957000",
    "end": "1963030"
  },
  {
    "text": "our application another step that we see here is that we get another level of",
    "start": "1963030",
    "end": "1968520"
  },
  {
    "text": "indirection in our source tree so we now besides just having packages in directories we also got a module",
    "start": "1968520",
    "end": "1973860"
  },
  {
    "text": "directory so we call it book at now and in this book up directory there's two packages",
    "start": "1973860",
    "end": "1979059"
  },
  {
    "text": "in our codes and there's also module info to Jennifer so let's see how that works so we're going to compile and run",
    "start": "1979059",
    "end": "1994409"
  },
  {
    "text": "this application now and as you can see in our source directory we have the module directory containing our packages",
    "start": "1994409",
    "end": "1999700"
  },
  {
    "text": "which are just the same packages that we had on the classpath but now there's an additional module info Jennifer so if we",
    "start": "1999700",
    "end": "2006840"
  },
  {
    "text": "do this with an empty module descriptor then it will complain to us okay your",
    "start": "2006840",
    "end": "2012690"
  },
  {
    "text": "code is referencing types that are not in the module graph that are not",
    "start": "2012690",
    "end": "2017759"
  },
  {
    "text": "required so what we need to do now is we need to add a require statements for",
    "start": "2017759",
    "end": "2023220"
  },
  {
    "text": "each of the libraries that we're using directly in our code so that we're",
    "start": "2023220",
    "end": "2029039"
  },
  {
    "text": "coding against so that will be a spring contacts API for the application contacts type spring ta TX for the",
    "start": "2029039",
    "end": "2034649"
  },
  {
    "text": "annotations that we're using on our repository some of the hibernates core",
    "start": "2034649",
    "end": "2040440"
  },
  {
    "text": "API is and JPA annotations and these are all now on the module path as automatic",
    "start": "2040440",
    "end": "2046409"
  },
  {
    "text": "motions so we're not using a new release of spring we're not using a modular movie screen or whatever it's just",
    "start": "2046409",
    "end": "2052230"
  },
  {
    "text": "taking these old jars and putting them on the module path rather than the class path now if we do the same again then we",
    "start": "2052230",
    "end": "2062760"
  },
  {
    "text": "get an interesting error and it says okay apparently there's some session",
    "start": "2062760",
    "end": "2068368"
  },
  {
    "text": "factory code with cascarone session and it gives back some type that implements referenceable but it says okay it can't",
    "start": "2068369",
    "end": "2077700"
  },
  {
    "text": "find the class file for Java X naming referenceable now this is in a module in",
    "start": "2077700",
    "end": "2083908"
  },
  {
    "text": "the JDK and it's not encapsulated so what's the problem here why didn't we see this in the class pass situation",
    "start": "2083909",
    "end": "2089638"
  },
  {
    "text": "well in the class pass situation we just saw everything that was underneath Java",
    "start": "2089639",
    "end": "2094950"
  },
  {
    "text": "as you write all of these modules and this included the Java X namely",
    "start": "2094950",
    "end": "2099960"
  },
  {
    "text": "now in the modular worlds were explicit about which modules end up in our module graph and here we're requiring requiring",
    "start": "2099960",
    "end": "2107880"
  },
  {
    "text": "spring hibernates and Java X and Jack modules but these are all automatic modules and they don't have their own",
    "start": "2107880",
    "end": "2114600"
  },
  {
    "text": "module descriptors so if for example hibernates would have a dependency on",
    "start": "2114600",
    "end": "2120420"
  },
  {
    "text": "whatever is in the Java blaming module it doesn't express that yes because it doesn't have any module descriptor yes",
    "start": "2120420",
    "end": "2126000"
  },
  {
    "text": "and in the end of course when hibernate does become a module it should express",
    "start": "2126000",
    "end": "2132210"
  },
  {
    "text": "this you can see and then the module system will be able to resolve this Java naming module automatically for us so",
    "start": "2132210",
    "end": "2139230"
  },
  {
    "text": "then life will be good but until now we need to fix this situation so because",
    "start": "2139230",
    "end": "2144510"
  },
  {
    "text": "we're hibernate core has this dependency on the Java memory module we need to somehow add this module to our execution",
    "start": "2144510",
    "end": "2151560"
  },
  {
    "text": "so we could do this by adding a new required statements but that would be sort of bad right because we don't",
    "start": "2151560",
    "end": "2157920"
  },
  {
    "text": "really reference code in Java naming ourselves from our application code it's actually this transitive dependency it",
    "start": "2157920",
    "end": "2164310"
  },
  {
    "text": "is happening so what we can do there in this case I'm going to open the writes",
    "start": "2164310",
    "end": "2171090"
  },
  {
    "text": "run scripts what we can do there is again use this at modules directives",
    "start": "2171090",
    "end": "2176280"
  },
  {
    "text": "that we've seen earlier as well in a class per situation but now we're going to use is in the modeler wheels and we're going to add this jab naming",
    "start": "2176280",
    "end": "2182340"
  },
  {
    "text": "module explicitly to the module graph that will be resolved at compile time and by doing this because hibernate was",
    "start": "2182340",
    "end": "2190440"
  },
  {
    "text": "an automatic module and it will automatically get a dependency on all resolved modules and we're now making sure that channel name is resolved now",
    "start": "2190440",
    "end": "2197070"
  },
  {
    "text": "we won't see this error again so indeed we get a successful compilation so let's",
    "start": "2197070",
    "end": "2204359"
  },
  {
    "text": "move on to running the application and what I've got here is just our original",
    "start": "2204359",
    "end": "2210720"
  },
  {
    "text": "class path - all the jars that I moved to the module path because automatic",
    "start": "2210720",
    "end": "2215970"
  },
  {
    "text": "modules so we have these modules on our module path and our output from compilation we have there as well and",
    "start": "2215970",
    "end": "2222119"
  },
  {
    "text": "we're going to start our book at module and the main class this in there",
    "start": "2222119",
    "end": "2227710"
  },
  {
    "text": "so let's try this and this is sort of disappointing again right so we get a",
    "start": "2227710",
    "end": "2235150"
  },
  {
    "text": "class not found exception Java sequel sequel exception so what's happening",
    "start": "2235150",
    "end": "2240369"
  },
  {
    "text": "there and this is actually the same issue that we run into at compile time",
    "start": "2240369",
    "end": "2245559"
  },
  {
    "text": "with hibernates we now get at run time with spring again spring is used as an automatic module so it doesn't have a",
    "start": "2245559",
    "end": "2251530"
  },
  {
    "text": "modular script yet it doesn't really express its dependencies but it does",
    "start": "2251530",
    "end": "2257079"
  },
  {
    "text": "have a dependency on Java or sequel and java xml the binds and we saw that one previously already so in this case again",
    "start": "2257079",
    "end": "2265990"
  },
  {
    "text": "if spring becomes an explicit module and this is poised to happen in the spring",
    "start": "2265990",
    "end": "2271660"
  },
  {
    "text": "five recycle as far as I know but currently it's not yes we will have to",
    "start": "2271660",
    "end": "2277319"
  },
  {
    "text": "fill the void and make sure that these modules that we already saw are",
    "start": "2277319",
    "end": "2282490"
  },
  {
    "text": "available at runtime so let's do that and at the same time",
    "start": "2282490",
    "end": "2289089"
  },
  {
    "text": "let's also open up the java base module",
    "start": "2289089",
    "end": "2294609"
  },
  {
    "text": "and the java.lang package because we still have Java is just doing its nasty reflection on the class loader",
    "start": "2294609",
    "end": "2300430"
  },
  {
    "text": "but in this case we're not opening it up to all the names not to the class path but to Java sis which is running as a",
    "start": "2300430",
    "end": "2306490"
  },
  {
    "text": "automatic module on our module path so only Java assist will be able to break into the Java line class order in this",
    "start": "2306490",
    "end": "2313210"
  },
  {
    "text": "case we can be various about that so now if we run the application we still have",
    "start": "2313210",
    "end": "2320020"
  },
  {
    "text": "an issue but this is not some low-level technical issue this is really about the",
    "start": "2320020",
    "end": "2325059"
  },
  {
    "text": "design of our module because as I said if you have a module description that",
    "start": "2325059",
    "end": "2330369"
  },
  {
    "text": "doesn't export anything then it means that nobody will be able to access your code not even spring or hibernate or any of",
    "start": "2330369",
    "end": "2337480"
  },
  {
    "text": "the other libraries that will try to do reflection on whatever is inside your module so in that case we of course need",
    "start": "2337480",
    "end": "2346180"
  },
  {
    "text": "to be explicit about the API of a module so in this case we have two packages the service package and the entities package",
    "start": "2346180",
    "end": "2351760"
  },
  {
    "text": "that are exclusively API which is also in the biggest name that's convenient",
    "start": "2351760",
    "end": "2357359"
  },
  {
    "text": "but we also learned about open packages right so the packages that need to be",
    "start": "2357359",
    "end": "2363370"
  },
  {
    "text": "opens contain our implantation classes of the entities of the services that we",
    "start": "2363370",
    "end": "2369760"
  },
  {
    "text": "want spring to instantiate and to inject into so by opening these packages we allow spring and hibernate to use",
    "start": "2369760",
    "end": "2376150"
  },
  {
    "text": "reflection on our internal implementation types while at the same time we still can't empower against",
    "start": "2376150",
    "end": "2382270"
  },
  {
    "text": "these packages from other modules which is exactly what we want we want to prevent our fellow developers from",
    "start": "2382270",
    "end": "2388090"
  },
  {
    "text": "abusing these types but at runtime well we can just be a bit more lenient it",
    "start": "2388090",
    "end": "2394000"
  },
  {
    "text": "also does show you how invasive these dependency injection and reflection based libraries are right because they",
    "start": "2394000",
    "end": "2400090"
  },
  {
    "text": "really need there's a kind of access to your implantation class in your implementation comes so if we have this",
    "start": "2400090",
    "end": "2406780"
  },
  {
    "text": "in place then we can try this again and we finally have an application that",
    "start": "2406780",
    "end": "2412420"
  },
  {
    "text": "boots that's compiling on Java 9 as a module and that is using all of these libraries automatic modules and giving us the same",
    "start": "2412420",
    "end": "2419680"
  },
  {
    "text": "behavior as we have before now this",
    "start": "2419680",
    "end": "2425280"
  },
  {
    "text": "default encapsulation break that we talked about with open packages this is like I said there's not something and",
    "start": "2425280",
    "end": "2431140"
  },
  {
    "text": "that's a real low-level technical issue this is really about ok so what do you really want to expose from your module",
    "start": "2431140",
    "end": "2436330"
  },
  {
    "text": "to the outside world this is something that you should think about and these open modules or open packages allow you",
    "start": "2436330",
    "end": "2442840"
  },
  {
    "text": "to allow these libraries to do deep reflection so also access private fields",
    "start": "2442840",
    "end": "2448270"
  },
  {
    "text": "and other internal digital's of classes while still disallowing is at compile time so an open module and is a module",
    "start": "2448270",
    "end": "2457750"
  },
  {
    "text": "where all packages are opens and if you look at exports opens from a compile",
    "start": "2457750",
    "end": "2464260"
  },
  {
    "text": "time and reflection perspective if you export a package then it's accessible at compile time for other modules if you do",
    "start": "2464260",
    "end": "2471970"
  },
  {
    "text": "reflection on exports types and exported packages you're able to do so but only on the public parts of these exported",
    "start": "2471970",
    "end": "2478780"
  },
  {
    "text": "types so you won't be able to pry your way into private or protectors or whatever members of classes that are",
    "start": "2478780",
    "end": "2485320"
  },
  {
    "text": "exports so deep reflection is not possible on exported packages open is",
    "start": "2485320",
    "end": "2492240"
  },
  {
    "text": "the opposite so at compile time no other modules can use this code but at runtime",
    "start": "2492240",
    "end": "2498790"
  },
  {
    "text": "you can do reflection and you can do reflection both on the public parts of the types but also so-called deep",
    "start": "2498790",
    "end": "2505120"
  },
  {
    "text": "reflection on the private parts now you can't combine exports and opens which is fairly rare but technically",
    "start": "2505120",
    "end": "2512920"
  },
  {
    "text": "it's possible and then you would have this full array of exes to do the code in your module now of course we didn't",
    "start": "2512920",
    "end": "2522520"
  },
  {
    "text": "set out this journey to end up with a single monolithic module right so what",
    "start": "2522520",
    "end": "2527590"
  },
  {
    "text": "we really want is to achieve our our goal of creating multiple modules which have their nice boundaries and which we",
    "start": "2527590",
    "end": "2534370"
  },
  {
    "text": "can use to in the future extend our application and yeah where we actually get some of the benefits of using and",
    "start": "2534370",
    "end": "2541390"
  },
  {
    "text": "modular architecture so I can show what this looks like and we're not going to",
    "start": "2541390",
    "end": "2548440"
  },
  {
    "text": "have time to go into too much depth but all of this code is on get up and I'll give a link later so you can find it if",
    "start": "2548440",
    "end": "2555730"
  },
  {
    "text": "we look at the modular spring solution it actually has these four modules that we saw on the slide so we have a main",
    "start": "2555730",
    "end": "2561760"
  },
  {
    "text": "module and if we look at this module in photo Java it's it's fairly self-contained it only requires the",
    "start": "2561760",
    "end": "2568810"
  },
  {
    "text": "spring contacts API right to bootstrap the application contacts that we saw and for the rest only knows about the books",
    "start": "2568810",
    "end": "2575470"
  },
  {
    "text": "API and about the books bookstore package so there's no entanglement and",
    "start": "2575470",
    "end": "2582040"
  },
  {
    "text": "more with hibernate etc this is all contained in our book implementation module which as you would expect has the",
    "start": "2582040",
    "end": "2589770"
  },
  {
    "text": "requirements on hibernate types and has to open its packages for hibernate",
    "start": "2589770",
    "end": "2595120"
  },
  {
    "text": "to instantiate the entities and services so here you can already see that the concerns are nicely separated and there",
    "start": "2595120",
    "end": "2601870"
  },
  {
    "text": "are explicit dependencies between all of these modules that are checked by the module system both at compile time and",
    "start": "2601870",
    "end": "2606940"
  },
  {
    "text": "at run time you also see two patterns here so we have the books books part of",
    "start": "2606940",
    "end": "2612670"
  },
  {
    "text": "our application is separated in an API package and a implementation package the bookstore part actually combines",
    "start": "2612670",
    "end": "2619180"
  },
  {
    "text": "the API and implantation and single module again this is a design choice that you get to make but in the case of",
    "start": "2619180",
    "end": "2624820"
  },
  {
    "text": "a combines and API module then you would have to export your API package and you would",
    "start": "2624820",
    "end": "2632740"
  },
  {
    "text": "have to open up your implementation that gets for spring - to be able to do its",
    "start": "2632740",
    "end": "2638530"
  },
  {
    "text": "magic so I would advise you to take time to go to get up and check this house a",
    "start": "2638530",
    "end": "2645220"
  },
  {
    "text": "bit in a bit more detail and really see what's happening between all of these modules it will give you a very nice",
    "start": "2645220",
    "end": "2651130"
  },
  {
    "text": "overview of all of the features of the module system now if we have a modular",
    "start": "2651130",
    "end": "2656140"
  },
  {
    "text": "application we can actually go a step step further and we can start using all of the nice tools around the module",
    "start": "2656140",
    "end": "2661450"
  },
  {
    "text": "system that are becoming available and one of those tools is J link J link allows you to create a so-called custom",
    "start": "2661450",
    "end": "2666760"
  },
  {
    "text": "runtime image from your modular application and what you can do is you can tell JT so this is my root module",
    "start": "2666760",
    "end": "2673589"
  },
  {
    "text": "please calculate for me the complete module graph that's necessary to run",
    "start": "2673589",
    "end": "2678609"
  },
  {
    "text": "this application so that will include our other application modules that will include some of our libraries and it",
    "start": "2678609",
    "end": "2683890"
  },
  {
    "text": "would include any of the JDK modules that we need and hopefully it will be a subset only of the JDK modules that we",
    "start": "2683890",
    "end": "2690190"
  },
  {
    "text": "need so for example most applications don't use Korra or don't use the desktop API and it will create for you a custom",
    "start": "2690190",
    "end": "2696640"
  },
  {
    "text": "real time image - to create a tiny runtime that's just big enough to run",
    "start": "2696640",
    "end": "2702040"
  },
  {
    "text": "your application then you can use this to ship it to your customers or to use it as a base of your docker image and",
    "start": "2702040",
    "end": "2707290"
  },
  {
    "text": "this is a really nice way to actually use the module descriptors that you've already created also to create a small",
    "start": "2707290",
    "end": "2714790"
  },
  {
    "text": "custom runtime image there are all kinds of optimization possibilities here as well I won't go into detail there's one",
    "start": "2714790",
    "end": "2721359"
  },
  {
    "text": "caveat though jailing doesn't work with automatic modules so for this to work your libraries the libraries are using",
    "start": "2721359",
    "end": "2727720"
  },
  {
    "text": "also need to have an explicit module description and they're coming more and more of these libraries but it was this",
    "start": "2727720",
    "end": "2733930"
  },
  {
    "text": "dis will take time this is not something that will happen overnight in the Java ecosystem so to recap we had first a",
    "start": "2733930",
    "end": "2743380"
  },
  {
    "text": "migration to Java now just using the class path and the important point to note there's that you really need to",
    "start": "2743380",
    "end": "2749109"
  },
  {
    "text": "address these warnings so you should be able to run your code with illegal access is denied and then you're ready",
    "start": "2749109",
    "end": "2755950"
  },
  {
    "text": "both for the modular rules and also for the future defaults of of Java where the accesses will be cool",
    "start": "2755950",
    "end": "2762430"
  },
  {
    "text": "will be this Lots then what we did was we created a single module around our",
    "start": "2762430",
    "end": "2768190"
  },
  {
    "text": "application code just to tease out any of the technical issues that are still there if you're using for example",
    "start": "2768190",
    "end": "2773560"
  },
  {
    "text": "automatic modules like we like we saw and in the end after we took this step",
    "start": "2773560",
    "end": "2779500"
  },
  {
    "text": "we were able to model arise application split up into parts and again this is a",
    "start": "2779500",
    "end": "2786070"
  },
  {
    "text": "process that's not applicable to every application right some applications just are just running fine in the last pass",
    "start": "2786070",
    "end": "2792520"
  },
  {
    "text": "and there may be too messy internally to even think about module arising because wonder ization isn't just applying some",
    "start": "2792520",
    "end": "2798490"
  },
  {
    "text": "keywords in a module info file is rethinking about design of your application what are the components one of the API is what are the contracts",
    "start": "2798490",
    "end": "2804640"
  },
  {
    "text": "between these different parts so if you already have a strong structure in your",
    "start": "2804640",
    "end": "2809710"
  },
  {
    "text": "application currently then it's a prime candidate to also move to modules and to help preserve the structure but if",
    "start": "2809710",
    "end": "2816070"
  },
  {
    "text": "you're going to model arise a well big bowl of spaghetti that's just actually",
    "start": "2816070",
    "end": "2821980"
  },
  {
    "text": "too big tasks in one going from an earlier version to giraffe to a newer version of Java and also model arise in",
    "start": "2821980",
    "end": "2827680"
  },
  {
    "text": "your code which can be a bit much so if you encounter any issues when using the",
    "start": "2827680",
    "end": "2833350"
  },
  {
    "text": "libraries as for example automatic modules or any of the issues that we do some counts I urge you to also reach out",
    "start": "2833350",
    "end": "2840040"
  },
  {
    "text": "to library maintain maintenance make them aware of the issues make them aware of the impact wrong forwards of using",
    "start": "2840040",
    "end": "2846369"
  },
  {
    "text": "encapsulated types for example JDK so that we all can get the Java ecosystem moving forward so a big",
    "start": "2846369",
    "end": "2853840"
  },
  {
    "text": "question that lots of people have is okay so should I end up jamming nine now or or wait or what's up with that and we",
    "start": "2853840",
    "end": "2860109"
  },
  {
    "text": "all know they're going to be to Java releases each year and the first long-term support Rees will actually be",
    "start": "2860109",
    "end": "2866380"
  },
  {
    "text": "Java 11 later this year should I wait for deaths and I would advise to at",
    "start": "2866380",
    "end": "2872770"
  },
  {
    "text": "least make a distinction between moving to another version in your production runtime environments versus your",
    "start": "2872770",
    "end": "2878680"
  },
  {
    "text": "development and testing I think you ought to yourself to at least in your development environments and",
    "start": "2878680",
    "end": "2884260"
  },
  {
    "text": "you're built sex etc to make it possible to test against East Java 910 and other",
    "start": "2884260",
    "end": "2889510"
  },
  {
    "text": "versions that are coming up because you will encounter lots of these these small issues that will all snowball into a big",
    "start": "2889510",
    "end": "2895510"
  },
  {
    "text": "issue if you're going to wait until Java 11 for example so this is something that you can do today and it won't affect",
    "start": "2895510",
    "end": "2901630"
  },
  {
    "text": "your production environment it will only yeah take a little bit of development time but this time you have to spend anyway right if you're going to move to",
    "start": "2901630",
    "end": "2908470"
  },
  {
    "text": "some future Java version which I hope you're going to do because there are lots of benefits besides even modules",
    "start": "2908470",
    "end": "2915070"
  },
  {
    "text": "that will come in so yes in your developments definitely do for your",
    "start": "2915070",
    "end": "2920470"
  },
  {
    "text": "production well environments start thinking about what it means that these frequent releases of Java are coming up",
    "start": "2920470",
    "end": "2927390"
  },
  {
    "text": "so with that of course I would like to point you to decide around our book a Java modularity does come it also",
    "start": "2927390",
    "end": "2933670"
  },
  {
    "text": "contains the get up link that I talked about so you can find all of the examples that I talks about if you want",
    "start": "2933670",
    "end": "2939730"
  },
  {
    "text": "even more content about Java 9 and lots of stuff around that's all session dressage crosses so highly recommended",
    "start": "2939730",
    "end": "2946750"
  },
  {
    "text": "and O'Reilly was so kind to also sent me a few books to hand out after this talk",
    "start": "2946750",
    "end": "2952330"
  },
  {
    "text": "so what I'm going to do is I mean there's no such thing as a free book right so I'm going to there are some",
    "start": "2952330",
    "end": "2959230"
  },
  {
    "text": "string stats if you want to book then after the talk please come forward and",
    "start": "2959230",
    "end": "2964300"
  },
  {
    "text": "only pick up a book if you're actually planning to read it and also try to sort",
    "start": "2964300",
    "end": "2970630"
  },
  {
    "text": "of start a study club in your company to see how you can use the book to actually",
    "start": "2970630",
    "end": "2976030"
  },
  {
    "text": "migrate your codebase so if you're willing to do that if you're willing to involve other people then by all means come forward I have a box of books here",
    "start": "2976030",
    "end": "2982450"
  },
  {
    "text": "and it will be first come first serve but for now thank you for your attention if there are any questions may I'm sure",
    "start": "2982450",
    "end": "2989980"
  },
  {
    "text": "no time for questions ok well do come up anyway if you have questions and we'll get a source thanks",
    "start": "2989980",
    "end": "2998160"
  }
]