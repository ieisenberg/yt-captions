[
  {
    "text": "cap theorem also called brewer's theorem is often cited when discussing availability guarantees for distributed",
    "start": "5040",
    "end": "11120"
  },
  {
    "text": "systems or a system of compute interconnected by a network it basically says that if you have say a database",
    "start": "11120",
    "end": "17440"
  },
  {
    "text": "that runs on two or more computers you can have linearizability a specific consistency requirement which i'll just",
    "start": "17440",
    "end": "24160"
  },
  {
    "text": "say constrains what outputs are possible when an object is accessed by multiple processes concurrently or availability",
    "start": "24160",
    "end": "31279"
  },
  {
    "text": "which means you can always get a response you may have heard cap theorem described as consistency availability or",
    "start": "31279",
    "end": "36320"
  },
  {
    "text": "partition tolerance pick two oh and by the way you have to pick partition tolerance today on the podcast we're",
    "start": "36320",
    "end": "42480"
  },
  {
    "text": "speaking with oren any ceo of hibernating rhinos and creator of ravendb ravendb is an open source nosql",
    "start": "42480",
    "end": "49039"
  },
  {
    "text": "document database that is fully transactional ravendb includes distributed database cluster automatic",
    "start": "49039",
    "end": "54879"
  },
  {
    "text": "indexing easy-to-use gui top-of-the-line security in-memory performance for persistent database today we're going to",
    "start": "54879",
    "end": "61199"
  },
  {
    "text": "be discussing the back story of ravendb we're going to discuss how raven thinks about the cap theorem a spoiler alert it",
    "start": "61199",
    "end": "67600"
  },
  {
    "text": "thinks about on two different levels a bit about the choice of the implementation language c sharp and",
    "start": "67600",
    "end": "73040"
  },
  {
    "text": "finally index management with raven as always thank you for joining me on your jogs walks and commutes oren welcome to",
    "start": "73040",
    "end": "80560"
  },
  {
    "text": "the podcast thank you for having me so the very first question i have is right behind you on the screen so the people",
    "start": "80560",
    "end": "86640"
  },
  {
    "text": "that are listening can't see your screen but it's hibernating rhinos the name of the company behind raven where does that",
    "start": "86640",
    "end": "91759"
  },
  {
    "text": "come from it's a joke it's an old joke so around 2004 so 18 years ago i got started in",
    "start": "91759",
    "end": "100240"
  },
  {
    "text": "the hibernate project which is a port of the hamiltom2.net yes and i was very heavily involved in",
    "start": "100240",
    "end": "107360"
  },
  {
    "text": "that for a long time i also was involved in several officers project and my",
    "start": "107360",
    "end": "114079"
  },
  {
    "text": "tagline for most of those projects was rain or something rhino service bus rhino distributed hash table",
    "start": "114079",
    "end": "120960"
  },
  {
    "text": "etc so when i needed a name i just smashed those team together and",
    "start": "120960",
    "end": "127200"
  },
  {
    "text": "how many times came out and it was hilariously funny to me at the time and",
    "start": "127200",
    "end": "132480"
  },
  {
    "text": "just to be clear i'm living in israel which means that every time that i need to go to the store and buy a pen and",
    "start": "132480",
    "end": "138720"
  },
  {
    "text": "then they ask me who do you want the invoice for i have to tell them hibernating rhinos and then i have to",
    "start": "138720",
    "end": "144319"
  },
  {
    "text": "tell them how to spell that in hebrew so right now i would have really wished i would call the company one two three or",
    "start": "144319",
    "end": "151040"
  },
  {
    "text": "something like that if only for that reason yeah now you're going back to my early days i came up as a java developer",
    "start": "151040",
    "end": "158480"
  },
  {
    "text": "and then i had transitioned into doing c-sharp for some different companies and for some different roles that i was in",
    "start": "158480",
    "end": "164160"
  },
  {
    "text": "so i remember in hibernate real well when i was trying to grasp for similar tools that i was kind of familiar with",
    "start": "164160",
    "end": "169519"
  },
  {
    "text": "in the java world to bring with c sharp so it definitely triggered some memories for me",
    "start": "169519",
    "end": "174640"
  },
  {
    "text": "trigonometry it triggered i lost a good word huh okay so in the introduction i mentioned",
    "start": "174640",
    "end": "182000"
  },
  {
    "text": "that raven is a fully transactional nosql document store go deeper",
    "start": "182000",
    "end": "187120"
  },
  {
    "text": "what's the problem that ravendb is solving go to 2006.7",
    "start": "187120",
    "end": "192239"
  },
  {
    "text": "they're about at the time i was very big in the hibernate community i was going from custom to customer",
    "start": "192239",
    "end": "199680"
  },
  {
    "text": "building business applications and helping them meet their performance reliability all of the usual things that",
    "start": "199680",
    "end": "206239"
  },
  {
    "text": "they want to have and at the time the most popular databases i work with well sql server my",
    "start": "206239",
    "end": "212959"
  },
  {
    "text": "sequel oracle sometimes stuff like that and every single customer run into",
    "start": "212959",
    "end": "219120"
  },
  {
    "text": "problems now i was working within hibernate i had a very deep level of knowledge about how",
    "start": "219120",
    "end": "224799"
  },
  {
    "text": "to make inhabited dance and do things i was also a committer so i could make change to the code base and have them",
    "start": "224799",
    "end": "230400"
  },
  {
    "text": "there and it felt like this never-ending journey of trying to make things work",
    "start": "230400",
    "end": "237040"
  },
  {
    "text": "properly at some point i realized that the problem wasn't with the tooling that i had",
    "start": "237040",
    "end": "242480"
  },
  {
    "text": "the problem was the actual issue that i was trying to solve also remember this time domain driven design was older age",
    "start": "242480",
    "end": "249760"
  },
  {
    "text": "and everyone want to build a proper model and domain for the system and buildings properly but there was this",
    "start": "249760",
    "end": "257199"
  },
  {
    "text": "huge impedance mismatch between how you present your data in memory story type",
    "start": "257199",
    "end": "262800"
  },
  {
    "text": "objects a lot of interconnection and complex things then you have to hydrate",
    "start": "262800",
    "end": "268160"
  },
  {
    "text": "that to a database and oh my god you have 17 table for a",
    "start": "268160",
    "end": "273440"
  },
  {
    "text": "single object and if you wanted to have a complex object with polymorphism and",
    "start": "273440",
    "end": "279120"
  },
  {
    "text": "queries and things like that well you have a discriminator table you have a union table you have partial table",
    "start": "279120",
    "end": "286000"
  },
  {
    "text": "inheritance and also we are in a podcast but people if you could see his face right now he's like trigger trigger",
    "start": "286000",
    "end": "292400"
  },
  {
    "text": "trigger all over the place and the problem was you couldn't do that the database that you use that actually",
    "start": "292400",
    "end": "298560"
  },
  {
    "text": "fought you in order to do that and you had the options of either basically building transaction scripts",
    "start": "298560",
    "end": "305039"
  },
  {
    "text": "and even if you wanted to be a transaction script which is basically raw read and write to the database you",
    "start": "305039",
    "end": "311039"
  },
  {
    "text": "will be building such complicated applications today and 15 20 years ago was the same in many respects that the",
    "start": "311039",
    "end": "318560"
  },
  {
    "text": "amount of back and forth that you had to go with application database was huge so i",
    "start": "318560",
    "end": "324560"
  },
  {
    "text": "started looking into other options and i ran into nosql databases at the",
    "start": "324560",
    "end": "331039"
  },
  {
    "text": "time and it was amazing because it broke an assumption in my head",
    "start": "331039",
    "end": "336960"
  },
  {
    "text": "that the relational model is how you store data for persistence so i started looking into all of those",
    "start": "336960",
    "end": "343680"
  },
  {
    "text": "non-relational databases and at the time there were many of them in 2007 or",
    "start": "343680",
    "end": "349840"
  },
  {
    "text": "thereabout there came the dynamo paper from amazon which had a huge impact on",
    "start": "349840",
    "end": "354960"
  },
  {
    "text": "the database team and there were all sorts of projects such as a react and project voldemort and a whole bunch of",
    "start": "354960",
    "end": "360800"
  },
  {
    "text": "other stuff like that more good to be couched to be the time and all of them gave you a much better",
    "start": "360800",
    "end": "367759"
  },
  {
    "text": "system to deal with a lot of those issues however if you actually",
    "start": "367759",
    "end": "372960"
  },
  {
    "text": "looked into what you're giving up it was horrendous no sql databases typically did not have",
    "start": "372960",
    "end": "379680"
  },
  {
    "text": "transactions which is nice if you're building a system that can translate",
    "start": "379680",
    "end": "385120"
  },
  {
    "text": "away mongodb famously was meant to store logs and okay we lose one or two entry",
    "start": "385120",
    "end": "392160"
  },
  {
    "text": "once a while ah no big deal that wasn't reason it was meant to be so transactions was something that happened",
    "start": "392160",
    "end": "398000"
  },
  {
    "text": "to someone else but then you realized that okay i want to build a business application i actually care about my data i can't",
    "start": "398000",
    "end": "404400"
  },
  {
    "text": "accept no transactions and some databases said oh you can get",
    "start": "404400",
    "end": "410160"
  },
  {
    "text": "transactions if you write this horribly complicated dance in order to do that",
    "start": "410160",
    "end": "415280"
  },
  {
    "text": "which still isn't actually safe but pretends to be so so i started thinking i want to have a",
    "start": "415280",
    "end": "422000"
  },
  {
    "text": "database that would be transaction would give me all of the usual benefits that i get from the relational database but",
    "start": "422000",
    "end": "428319"
  },
  {
    "text": "also give me the proper modeling that i want what did that first mvp look like so you set out with this goal what came",
    "start": "428319",
    "end": "434560"
  },
  {
    "text": "out so the first version was basically there is a storage engine that comes",
    "start": "434560",
    "end": "442080"
  },
  {
    "text": "with windows that is called ecent that was recently open sourced recently as in two three years ago and this is the dll",
    "start": "442080",
    "end": "449759"
  },
  {
    "text": "that comes with every version of windows that implements an acid",
    "start": "449759",
    "end": "454880"
  },
  {
    "text": "b3 and isom index sequential access method this is a very old terminology",
    "start": "454880",
    "end": "461440"
  },
  {
    "text": "i'm talking about 70s 60s even but it is an amazing technology for many respects",
    "start": "461440",
    "end": "467360"
  },
  {
    "text": "and i took that as the acid layer that i had i plugged in",
    "start": "467360",
    "end": "472960"
  },
  {
    "text": "leucine for indexing mix them together with fairly permitted ui at that point",
    "start": "472960",
    "end": "479440"
  },
  {
    "text": "and i then created the client api that",
    "start": "479440",
    "end": "484479"
  },
  {
    "text": "mimic to a large extent the api in hibernate and other arms that",
    "start": "484479",
    "end": "490080"
  },
  {
    "text": "gave you the ability to operate on actual domain objects",
    "start": "490080",
    "end": "496160"
  },
  {
    "text": "and persist them in a transactional manner with all of the usual things such as unit of work just chain tracking all",
    "start": "496160",
    "end": "502080"
  },
  {
    "text": "of those and on top of that you had full text search you had the ability to query the",
    "start": "502080",
    "end": "509199"
  },
  {
    "text": "data in any arbitrary way and the database would just respond to you so fast forward 15 years 16 years from",
    "start": "509199",
    "end": "515360"
  },
  {
    "text": "where that mvp releases when you look at the like nosql landscape it is",
    "start": "515360",
    "end": "520399"
  },
  {
    "text": "definitely crowded but there's also a lot of overlap so where does ravendb fit into the landscape next to things like",
    "start": "520399",
    "end": "527360"
  },
  {
    "text": "cassandra and mongodb and just in general where does raven db excel and how does it differentiate itself well b",
    "start": "527360",
    "end": "534720"
  },
  {
    "text": "is a document database it's stored document in json format in addition to json documents you can also add",
    "start": "534720",
    "end": "542399"
  },
  {
    "text": "additional data to a document the data can be attachments so some binary data",
    "start": "542399",
    "end": "547920"
  },
  {
    "text": "of arbitrary size and we like to think about it like attachments on nemo which turn up being a really useful feature",
    "start": "547920",
    "end": "555440"
  },
  {
    "text": "you can store distributed counters this is very similar to the cassandra feature where you may have high throughput",
    "start": "555440",
    "end": "562480"
  },
  {
    "text": "counter that has been modified in many nodes at the same time and converts to the right value and again this is a",
    "start": "562480",
    "end": "568959"
  },
  {
    "text": "value that you can attach to a document so a great example if you have an instagram post and you want to count the",
    "start": "568959",
    "end": "575279"
  },
  {
    "text": "number of likes so that's something very easy to do with this sort of feature we also have revision support so you can",
    "start": "575279",
    "end": "582000"
  },
  {
    "text": "have automatic audit trail of all of the changes that happen to a document and",
    "start": "582000",
    "end": "587440"
  },
  {
    "text": "finally we have the notion of time sentence we can attach a value that modify over time to a document and the",
    "start": "587440",
    "end": "594240"
  },
  {
    "text": "idea here for example i have a smartwatch so my heart rate is being tracked over time and i can add that to",
    "start": "594240",
    "end": "600160"
  },
  {
    "text": "rev db and the idea here is that each one of those four or five different",
    "start": "600160",
    "end": "606399"
  },
  {
    "text": "aspects of a document have their own dedicated and optimized system that is",
    "start": "606399",
    "end": "613120"
  },
  {
    "text": "meant to make it easy for you to implement all sorts of features but going back to documents a document is a",
    "start": "613120",
    "end": "619839"
  },
  {
    "text": "json object that can be of arbitrary size practically speaking revenue b can",
    "start": "619839",
    "end": "625600"
  },
  {
    "text": "accept a document up to about 2 gigabyte in size okay yeah do not go that way",
    "start": "625600",
    "end": "631839"
  },
  {
    "text": "other important features of leveldb you have a query language we call it rql and",
    "start": "631839",
    "end": "637519"
  },
  {
    "text": "just very similar to sql except the select is in the end basically you can also issue commands such as",
    "start": "637519",
    "end": "644720"
  },
  {
    "text": "patches or transformations that happen on the server side you can have a transaction that would modify multiple",
    "start": "644720",
    "end": "651200"
  },
  {
    "text": "documents from the same collection from different collection all at once you have transactions that are either not",
    "start": "651200",
    "end": "657200"
  },
  {
    "text": "local or cluster-wide i want to switch over and talk about kind of a cap theorem consisting",
    "start": "657200",
    "end": "663040"
  },
  {
    "text": "availability guarantee a lot of times when we talk about databases distributed systems quickly cap theorem comes up",
    "start": "663040",
    "end": "668880"
  },
  {
    "text": "right and again as i said in the intro you can choose between consistency or linearizability availability of",
    "start": "668880",
    "end": "675440"
  },
  {
    "text": "networking or network partitions and all by the way you always have to choose network quality partitions so you can be",
    "start": "675440",
    "end": "681680"
  },
  {
    "text": "ap you can be cp however if you read the documentation about ravendb you kind of say we're both how is that possible",
    "start": "681680",
    "end": "688480"
  },
  {
    "text": "the question is when and now we try to extend a cap term only applies",
    "start": "688480",
    "end": "694640"
  },
  {
    "text": "when you have an actual failure and that's important so if",
    "start": "694640",
    "end": "699760"
  },
  {
    "text": "you can be consistently available as long as there is no failure in place the problem is that you have to assume that",
    "start": "699760",
    "end": "704880"
  },
  {
    "text": "at some point failures will happen so the question is how do i handle both the failures now and the success amount",
    "start": "704880",
    "end": "711279"
  },
  {
    "text": "and it turns out that this is really how to unsell globally for all of your",
    "start": "711279",
    "end": "717680"
  },
  {
    "text": "operations so with mdb you have two different levels that you can choose",
    "start": "717680",
    "end": "723440"
  },
  {
    "text": "there is the notion of a node local transaction and there is the notion of a",
    "start": "723440",
    "end": "728480"
  },
  {
    "text": "cluster by transaction now customary transaction requires you to go through a majority of the nodes and this is the",
    "start": "728480",
    "end": "735839"
  },
  {
    "text": "standard distributed consensus system where we are a consistent partition tolerance and that's great for certain",
    "start": "735839",
    "end": "743600"
  },
  {
    "text": "set of operations that you have and specifically that's raft right when it comes to raven rafters correct okay",
    "start": "743600",
    "end": "749440"
  },
  {
    "text": "correct by the way it's funny but i think that at this point there is rough boxes and view timestamp application and",
    "start": "749440",
    "end": "755360"
  },
  {
    "text": "all of them if you look deeply enough for the same thing just complexity is drastically different right and how access versus wrapped oh",
    "start": "755360",
    "end": "762399"
  },
  {
    "text": "dear god oh they got just very small grant about boxes i have read all of the papers of boxes i",
    "start": "762399",
    "end": "770160"
  },
  {
    "text": "went through all of the leap access implementation and a bunch of other implementations i have written a",
    "start": "770160",
    "end": "777120"
  },
  {
    "text": "practice implementation that works i have sold that and used it commercially",
    "start": "777120",
    "end": "782720"
  },
  {
    "text": "and to this point and i'm talking about 17 years of distributed programming experience i have no sense of how this",
    "start": "782720",
    "end": "789920"
  },
  {
    "text": "works nice you may make the rest of us feel good about it too then yeah and then i",
    "start": "789920",
    "end": "795680"
  },
  {
    "text": "read the raft paper and it was like this show of angel singing like i get it",
    "start": "795680",
    "end": "802079"
  },
  {
    "text": "there are details that draft isn't triple to implement yeah there are all sorts of pitfalls that you have to be",
    "start": "802079",
    "end": "807519"
  },
  {
    "text": "aware of but i grogged it i understood the concept of how this is supposed to work i could",
    "start": "807519",
    "end": "813440"
  },
  {
    "text": "reason about it yeah yeah the first person to make that comment on the podcast to me because that was what it",
    "start": "813440",
    "end": "818959"
  },
  {
    "text": "was designed for to be understandable so we use graph for distributed consensus and that's good for high value",
    "start": "818959",
    "end": "825279"
  },
  {
    "text": "things but the problem with distributed consensus that you have to apply that every single time now in a cluster that",
    "start": "825279",
    "end": "831839"
  },
  {
    "text": "means that in order to accept the decision you have to make at least two network round trips if you're",
    "start": "831839",
    "end": "838800"
  },
  {
    "text": "working on a transaction system you have to pay the cost of multiple f things to",
    "start": "838800",
    "end": "843839"
  },
  {
    "text": "the disk and that can dramatically increase the latency that you have for the happy path",
    "start": "843839",
    "end": "849680"
  },
  {
    "text": "i'm not talking about that failure mode just the happy part you have a higher latency involved now are always of",
    "start": "849680",
    "end": "855920"
  },
  {
    "text": "trying to reduce that and optimize but in the end of the day you have to do network run tips and f things to the",
    "start": "855920",
    "end": "863519"
  },
  {
    "text": "risk and those things cost a lot so revenue b has this notion of node local",
    "start": "863519",
    "end": "870320"
  },
  {
    "text": "transaction and the idea here is that in many cases you just want to store the data and if there is a failure we can",
    "start": "870320",
    "end": "878320"
  },
  {
    "text": "recover afterwards in the case of ndb there are two layers to the distributed",
    "start": "878320",
    "end": "883839"
  },
  {
    "text": "nature of revendemi at the bottom layer you have database nodes that are running",
    "start": "883839",
    "end": "889040"
  },
  {
    "text": "using a gaussian protocol and a node local transaction would write the data to one of them and then asynchronously",
    "start": "889040",
    "end": "896240"
  },
  {
    "text": "replicated to the rest of the nodes in the cluster at the cluster level you can have a clusterwide transaction that",
    "start": "896240",
    "end": "902079"
  },
  {
    "text": "would apply a transaction to all of the nodes in the cluster so those are the two levels that you have one of the",
    "start": "902079",
    "end": "908480"
  },
  {
    "text": "critiques of cap theorem i'm thinking specifically martin klepman his paper i",
    "start": "908480",
    "end": "913839"
  },
  {
    "text": "think 2015 or so it's called a critique of the cap theorem and you referred to a little while ago it talks about like",
    "start": "913839",
    "end": "919839"
  },
  {
    "text": "failure modes like it's complete failure for network partition but he kind of talks about things like slowness or just",
    "start": "919839",
    "end": "926000"
  },
  {
    "text": "latency in the system in this two level design that you have how does something like latency or slowness affect the",
    "start": "926000",
    "end": "933519"
  },
  {
    "text": "different failure modes with ravendb depending on how you want to manage that so let's talk about mods for a second",
    "start": "933519",
    "end": "940480"
  },
  {
    "text": "i write to rev db a set of documents and i want them to be stored by default i would use the node local transaction",
    "start": "940480",
    "end": "946399"
  },
  {
    "text": "which means that i get to the node it persists it to the disk so real quick when you say a local node transaction is",
    "start": "946399",
    "end": "952320"
  },
  {
    "text": "that a specific operation that's doing that or you just write into ravendb that happens to be a local node operation so",
    "start": "952320",
    "end": "959759"
  },
  {
    "text": "you have a transaction you have a session you modify things then you conserve changes that batch all of the changes that",
    "start": "959759",
    "end": "966399"
  },
  {
    "text": "happen in the transaction and send it to rev db in one shot that batch of operations is going to be",
    "start": "966399",
    "end": "974399"
  },
  {
    "text": "a transaction and that's going to be persisted you have the options of selecting",
    "start": "974399",
    "end": "980079"
  },
  {
    "text": "that transaction to be a cluster wide or not local transaction and if this is a",
    "start": "980079",
    "end": "986000"
  },
  {
    "text": "node local transaction then that node will tell you okay i'm done once it",
    "start": "986000",
    "end": "991279"
  },
  {
    "text": "flashed the data to disk once it was made durable and that's it if you ask it",
    "start": "991279",
    "end": "996320"
  },
  {
    "text": "to be a cluster by transaction then it has to get consensus that this has been",
    "start": "996320",
    "end": "1002000"
  },
  {
    "text": "persisted to disk on majority of the nodes in the cluster so this is where you have the latency versus a",
    "start": "1002000",
    "end": "1008959"
  },
  {
    "text": "consistency issue but just to that point as the developer writing it as the person interacting with it you do have",
    "start": "1008959",
    "end": "1014560"
  },
  {
    "text": "to be thinking about where you want this data persisted cluster wide or local you need to make that no in all cases the",
    "start": "1014560",
    "end": "1021360"
  },
  {
    "text": "data would be persisted cluster the issue is what is the consistent guarantees that you're requiring for",
    "start": "1021360",
    "end": "1027520"
  },
  {
    "text": "that and i know what is the value that is involved so i can make that determination on a case-by-case basis i",
    "start": "1027520",
    "end": "1034798"
  },
  {
    "text": "got it so you're as the person writing the code executing the use case or making the decision like what's my",
    "start": "1034799",
    "end": "1040160"
  },
  {
    "text": "trade-off but you're making that one right got it okay another thing that is important is that what happened if they",
    "start": "1040160",
    "end": "1046400"
  },
  {
    "text": "know that i'm trying to write to has failed then ravendb would transparently redirect the transaction",
    "start": "1046400",
    "end": "1053120"
  },
  {
    "text": "to another node so a node failure is just something that happens and you typically don't notice",
    "start": "1053120",
    "end": "1058799"
  },
  {
    "text": "there's another question that i wanted to ask you about ravendb one of the things that kind of stood out to me as i",
    "start": "1058799",
    "end": "1064799"
  },
  {
    "text": "was kind of diving in looking into it is the code bases in c-sharp what's the design thinking around c-sharp as",
    "start": "1064799",
    "end": "1070640"
  },
  {
    "text": "opposed to some of the other system languages that you might use to say something like rust i want to touch a",
    "start": "1070640",
    "end": "1076080"
  },
  {
    "text": "little bit on rust because it has a huge hype and i wrote not insignificant",
    "start": "1076080",
    "end": "1082480"
  },
  {
    "text": "amount of code in rust and i considered myself to be an okay developer programmer i know quite a few",
    "start": "1082480",
    "end": "1089520"
  },
  {
    "text": "languages have enough experience to say that i've been around the block and rust is super annoying you have to",
    "start": "1089520",
    "end": "1096160"
  },
  {
    "text": "continuously make the compiler happy now i spent a few weeks two months and separated by a couple of",
    "start": "1096160",
    "end": "1103679"
  },
  {
    "text": "years trying to do things and it just was really annoying to get things done conversely in c i swim because there is",
    "start": "1103679",
    "end": "1110559"
  },
  {
    "text": "no metal overhead then i crash because of invalid memory except or something like that here's the issue go into",
    "start": "1110559",
    "end": "1118080"
  },
  {
    "text": "rust and try to implement a binary tree or a tree or any interesting data structure",
    "start": "1118080",
    "end": "1125520"
  },
  {
    "text": "which require you to modify memory and you realize that this starts as",
    "start": "1125520",
    "end": "1132320"
  },
  {
    "text": "impossible and as you learn more you become only slightly extremely hard but",
    "start": "1132320",
    "end": "1138480"
  },
  {
    "text": "that is specifically unless because i find that uh other community language going back to yc shop just real quick on",
    "start": "1138480",
    "end": "1145600"
  },
  {
    "text": "that though like the russ community would say like the constructs like ownership within the language allow you",
    "start": "1145600",
    "end": "1150880"
  },
  {
    "text": "to be able to do things like you're talking about more safely than in places like c plus plus so they'd argue that",
    "start": "1150880",
    "end": "1157360"
  },
  {
    "text": "it's needed complexity let me give you a great example as a database i deal with pages",
    "start": "1157360",
    "end": "1163120"
  },
  {
    "text": "i have a page that i get from the buffer manager and this is a mutable page because i'm going to write to that and i",
    "start": "1163120",
    "end": "1170000"
  },
  {
    "text": "need to update the header and i need to update the content of the page the",
    "start": "1170000",
    "end": "1176160"
  },
  {
    "text": "easiest way for me to manage that in c for example is to say okay let me cast",
    "start": "1176160",
    "end": "1182320"
  },
  {
    "text": "the page pointer to the header and modify that and let me cast the data",
    "start": "1182320",
    "end": "1188160"
  },
  {
    "text": "portion of the page to a data objects sorry and manage that and i try to do",
    "start": "1188160",
    "end": "1193520"
  },
  {
    "text": "that with i said no you cannot have mutable refers to something but that's what i actually want because i have this",
    "start": "1193520",
    "end": "1200080"
  },
  {
    "text": "piece of memory that i arbitrarily say that it needs to be muted in multiple ways and the typical way you would",
    "start": "1200080",
    "end": "1207039"
  },
  {
    "text": "resolve that in last would be oh just use a box or a rc or any of those sort",
    "start": "1207039",
    "end": "1213600"
  },
  {
    "text": "of things but in this case i'm looking at the raw bytes that i'm working on so we have to jump through multiple ops to",
    "start": "1213600",
    "end": "1220480"
  },
  {
    "text": "do that or you have to copy the data mutate it and then copy it back which is",
    "start": "1220480",
    "end": "1225919"
  },
  {
    "text": "i want to do a zero copy system i actually had the challenge on doing a",
    "start": "1225919",
    "end": "1230960"
  },
  {
    "text": "tray with rust but the challenge was here is 32 kilobyte of memory this is",
    "start": "1230960",
    "end": "1236640"
  },
  {
    "text": "the only team that you're allowed to use this is your buffer an implemented trader and people did it in rust which",
    "start": "1236640",
    "end": "1243840"
  },
  {
    "text": "in a way that was completely unintuitive and broken okay all right so",
    "start": "1243840",
    "end": "1249760"
  },
  {
    "text": "c sharp so don't like rust yeah on the other hand by the way zig is",
    "start": "1249760",
    "end": "1255520"
  },
  {
    "text": "an amazing language really love it zig is very small it competes with c and",
    "start": "1255520",
    "end": "1261039"
  },
  {
    "text": "not c plus plus but it gives me all of the tools that i want to build system level software it gets off my way and",
    "start": "1261039",
    "end": "1268240"
  },
  {
    "text": "it's nice but you still have c sharp i still have c sharp yes and i will",
    "start": "1268240",
    "end": "1274320"
  },
  {
    "text": "explain why seashop is an interesting language because go back to",
    "start": "1274320",
    "end": "1280799"
  },
  {
    "text": "2000 when it came out and realized that one of the things that made c-sharp distinct from java was that",
    "start": "1280799",
    "end": "1288880"
  },
  {
    "text": "microsoft was blocked from adding extension to java that made it work well on windows",
    "start": "1288880",
    "end": "1294720"
  },
  {
    "text": "things like being able to easily call to the window to apis being able to",
    "start": "1294720",
    "end": "1299760"
  },
  {
    "text": "integrate well with chrome object or sort of things and when microsoft was forced to go with the dotnet and the",
    "start": "1299760",
    "end": "1306400"
  },
  {
    "text": "sila then they had a really interesting design for example you had value types from day one you had the ability to",
    "start": "1306400",
    "end": "1313760"
  },
  {
    "text": "allocate memory of the hip from day one because all of your existing",
    "start": "1313760",
    "end": "1319840"
  },
  {
    "text": "infrastructure that you would integrate with require that so calling to native code was trivial",
    "start": "1319840",
    "end": "1326640"
  },
  {
    "text": "that also meant that to a very large extent the language was already geared",
    "start": "1326640",
    "end": "1332799"
  },
  {
    "text": "to give you multiple level in which you can work with and i'm going back to c-sharp 1.0",
    "start": "1332799",
    "end": "1339520"
  },
  {
    "text": "but going back to c-sharp in 2015 at that time frame we had reached a",
    "start": "1339520",
    "end": "1346880"
  },
  {
    "text": "decision point for evandb i built the architecture for even db the first two",
    "start": "1346880",
    "end": "1351919"
  },
  {
    "text": "versions where i knew not that much about databases and we learned a lot in that iphone and",
    "start": "1351919",
    "end": "1358640"
  },
  {
    "text": "we couldn't push that architecture any longer and we had all of the classic issues with managed systems so high gc",
    "start": "1358640",
    "end": "1366880"
  },
  {
    "text": "utilization inability to control what's going on in many cases and stuff like that and i sat",
    "start": "1366880",
    "end": "1372799"
  },
  {
    "text": "down and wrote a design document for how we want to do things and one of the things that were quite",
    "start": "1372799",
    "end": "1378400"
  },
  {
    "text": "obvious to me is that i have to take ownership on all of the big resources",
    "start": "1378400",
    "end": "1384400"
  },
  {
    "text": "that i have so cpu io memory and we looked into doing things in c plus plus",
    "start": "1384400",
    "end": "1391919"
  },
  {
    "text": "or c at the time and that was okay let's start",
    "start": "1391919",
    "end": "1398240"
  },
  {
    "text": "walking barefoot to beijing basically i can do that there is the lame path from here to beijing but that's probably not",
    "start": "1398240",
    "end": "1405679"
  },
  {
    "text": "something that i want to do and because okay where is my hash table or how do i do things like concord data",
    "start": "1405679",
    "end": "1412720"
  },
  {
    "text": "structures you can do that but this is like this huge complicated topic",
    "start": "1412720",
    "end": "1418159"
  },
  {
    "text": "so we looked into can we control the resources that we want in c-sharp and it does not that you",
    "start": "1418159",
    "end": "1425520"
  },
  {
    "text": "can do that you can allocate native memory you can control your allocations",
    "start": "1425520",
    "end": "1431440"
  },
  {
    "text": "there are well-known patterns for object poolings for off-hipaa locations for",
    "start": "1431440",
    "end": "1437600"
  },
  {
    "text": "build your own tread pool so you can have fine grained control over where and how you execute and",
    "start": "1437600",
    "end": "1445120"
  },
  {
    "text": "here is a great example in ravendb which is a c sharp application we have our own",
    "start": "1445120",
    "end": "1451120"
  },
  {
    "text": "string type it's insane i mean the classic example about paid simpleplus",
    "start": "1451120",
    "end": "1457039"
  },
  {
    "text": "codebases is that they have three different string types well it turns out that for evandb we deal a lot with json",
    "start": "1457039",
    "end": "1463760"
  },
  {
    "text": "obviously and one of the interesting things about that is that we did a performance analysis of what's costing",
    "start": "1463760",
    "end": "1471120"
  },
  {
    "text": "us in terms of a cpu utilization and it turns out that 45 of our time was spent",
    "start": "1471120",
    "end": "1478880"
  },
  {
    "text": "in one method write escaped string because wherever we wanted to write a string to the network",
    "start": "1478880",
    "end": "1486000"
  },
  {
    "text": "or anywhere else we would have to check if this json string had an escape",
    "start": "1486000",
    "end": "1491360"
  },
  {
    "text": "character in it and then escape it and now we kind of write a lot of json",
    "start": "1491360",
    "end": "1496720"
  },
  {
    "text": "strings so what we did was okay let's reason writes another db are typically skewed",
    "start": "1496720",
    "end": "1502799"
  },
  {
    "text": "heavily toward reads so when we read a document from the network we store that",
    "start": "1502799",
    "end": "1509279"
  },
  {
    "text": "internally in a format that tells us where the escape positions are",
    "start": "1509279",
    "end": "1514400"
  },
  {
    "text": "so in most cases when i write it i can just send the full block directly to the",
    "start": "1514400",
    "end": "1519760"
  },
  {
    "text": "network without having to do any processing and we also implemented our",
    "start": "1519760",
    "end": "1525120"
  },
  {
    "text": "own json document type and the reason for that was that i can now have a system",
    "start": "1525120",
    "end": "1532000"
  },
  {
    "text": "that is zero copy if you think about it if you have a json string and you have let's say a 100 kilobyte of a json",
    "start": "1532000",
    "end": "1538080"
  },
  {
    "text": "stream i want you give me the name of the third person you have two options you can pass that into an in-memory",
    "start": "1538080",
    "end": "1544880"
  },
  {
    "text": "object and then just process the dom or you can try to do a sequential scan and hope that you would find the result",
    "start": "1544880",
    "end": "1551600"
  },
  {
    "text": "before the end both of which are incredibly expensive but there is another thing that you have to consider",
    "start": "1551600",
    "end": "1557279"
  },
  {
    "text": "here if you pass a json string into an object",
    "start": "1557279",
    "end": "1562480"
  },
  {
    "text": "you are at the mercy of the structure of that object what do you mean by that the cost of gc in all modern languages is",
    "start": "1562480",
    "end": "1570400"
  },
  {
    "text": "based around the number of reachable objects that you have but if you have a very complex json object",
    "start": "1570400",
    "end": "1576640"
  },
  {
    "text": "then as long as that has a reference all of that object has a reference and now you have to do far more work",
    "start": "1576640",
    "end": "1583760"
  },
  {
    "text": "so with terminally a document is represented as a pointer to a map file",
    "start": "1583760",
    "end": "1590240"
  },
  {
    "text": "and we can just go directly into that we can then traverse that document using",
    "start": "1590240",
    "end": "1595520"
  },
  {
    "text": "pointer arithmetic to find the exact value that we want and then send that over the network and that is difference",
    "start": "1595520",
    "end": "1602720"
  },
  {
    "text": "of 1 800 times faster than the other alternative the numbers",
    "start": "1602720",
    "end": "1610000"
  },
  {
    "text": "are utterly insane but it turns out that this is not sufficient because",
    "start": "1610000",
    "end": "1615279"
  },
  {
    "text": "when you start to control your own memory you start doing object pools and native memory and manage that yourself",
    "start": "1615279",
    "end": "1622640"
  },
  {
    "text": "then you have all of this nice first things that you have but you'd also remove from the purview of the gc",
    "start": "1622640",
    "end": "1629919"
  },
  {
    "text": "so much thing that it used to do so now gc has a far smaller manage heap to walk",
    "start": "1629919",
    "end": "1635279"
  },
  {
    "text": "through and he held that but this is funny because this is where it starts to get really interesting i don't have to",
    "start": "1635279",
    "end": "1642080"
  },
  {
    "text": "do that level of work each and every time i can absolutely say you know what this",
    "start": "1642080",
    "end": "1648080"
  },
  {
    "text": "is a debug endpoint it happens once in two hours if someone is feeling",
    "start": "1648080",
    "end": "1654559"
  },
  {
    "text": "generous i can just write it in the fastest quickest generate some code",
    "start": "1654559",
    "end": "1660000"
  },
  {
    "text": "generate some memory i don't care which means that my velocity for building things is far different but",
    "start": "1660000",
    "end": "1667039"
  },
  {
    "text": "there is also another thing here in simplest paths in graphs in zig any of the native languages",
    "start": "1667039",
    "end": "1673200"
  },
  {
    "text": "what happened if you messed up and you lost a reference to an object well you have a memory",
    "start": "1673200",
    "end": "1679279"
  },
  {
    "text": "enjoy finding that here's what happened with the way we did things we have native memory and if we",
    "start": "1679279",
    "end": "1685600"
  },
  {
    "text": "lose a reference to that the gc will come and clean up after me because i have a",
    "start": "1685600",
    "end": "1691600"
  },
  {
    "text": "managed object that holds a handle to this native memory and if i lost access to that the gc would collect that it",
    "start": "1691600",
    "end": "1698799"
  },
  {
    "text": "would execute the finalizer in debug i would get this big notice hey something happened you missed something and i",
    "start": "1698799",
    "end": "1705279"
  },
  {
    "text": "would go and fix that but in production it means that i have someone who is",
    "start": "1705279",
    "end": "1710399"
  },
  {
    "text": "making sure that i'm still up and running even if something happened so you like c sharp or you chose c sharp",
    "start": "1710399",
    "end": "1716000"
  },
  {
    "text": "because it gives you kind of a managed platform a managed framework that lets you operate both at a lower system level",
    "start": "1716000",
    "end": "1723440"
  },
  {
    "text": "and still operate quickly for times when you don't need that lower level programming to be able to improve",
    "start": "1723440",
    "end": "1729760"
  },
  {
    "text": "velocity by working just at a higher level so you can operate at two levels plus get a managed framework there is",
    "start": "1729760",
    "end": "1735360"
  },
  {
    "text": "actually another interesting scenario that came up here so the interesting thing about it is that we started very",
    "start": "1735360",
    "end": "1741760"
  },
  {
    "text": "early and it was a rough journey but along the way something really interesting happened in the community",
    "start": "1741760",
    "end": "1748240"
  },
  {
    "text": "because all of the things that we had to implement on our own direct memory",
    "start": "1748240",
    "end": "1753440"
  },
  {
    "text": "management things like that suddenly they're in the firmware we have spam and memory right now and there is a far",
    "start": "1753440",
    "end": "1759760"
  },
  {
    "text": "greater awareness in the community in the corpus in general for",
    "start": "1759760",
    "end": "1765039"
  },
  {
    "text": "the hidden course that we have for example one of the things that we had to implement on our own was a stream reader",
    "start": "1765039",
    "end": "1771360"
  },
  {
    "text": "now there is a stream reader in the doctor framework but i cannot use that i cannot use that",
    "start": "1771360",
    "end": "1776559"
  },
  {
    "text": "because whenever you initiate you create a new stream middle it allocates two buffers one that is four kilobytes in",
    "start": "1776559",
    "end": "1782640"
  },
  {
    "text": "size and one that is two kilobytes in size why because that's the internal buffers that it needs to map between pages and",
    "start": "1782640",
    "end": "1789279"
  },
  {
    "text": "characters well that sucks for me if i have to create a lot of so i had to create my own that avoided that now this",
    "start": "1789279",
    "end": "1796399"
  },
  {
    "text": "not only happens and the fact that donald corp became open source and there is active",
    "start": "1796399",
    "end": "1803200"
  },
  {
    "text": "encouragement of the community around that meant that a lot of the minor irritations got removed",
    "start": "1803200",
    "end": "1810480"
  },
  {
    "text": "if you look at the release notes i think since 3.2.1 or something like that so",
    "start": "1810480",
    "end": "1815840"
  },
  {
    "text": "that you can see that there is a huge number of community contributors each one of them remove this smaller minor",
    "start": "1815840",
    "end": "1822320"
  },
  {
    "text": "annoying here is an allocation here is slightly better way of doing those sort of things and it turns out that this",
    "start": "1822320",
    "end": "1828000"
  },
  {
    "text": "adds up a lot we had a release but we just updated the",
    "start": "1828000",
    "end": "1833440"
  },
  {
    "text": "dotnet version that we're running performance cost dropped by 20 so you can see that the isolated runtime",
    "start": "1833440",
    "end": "1841520"
  },
  {
    "text": "was at 30 cpu most of the time and then it dropped to 10 cpu something like that",
    "start": "1841520",
    "end": "1847200"
  },
  {
    "text": "all right or i need to start to wrap i was awesome conversation with you i want to ask about what's next i know that",
    "start": "1847200",
    "end": "1853679"
  },
  {
    "text": "sharding's going to be re-added it was removed a while back and it's being added again so tell me about sharding",
    "start": "1853679",
    "end": "1859840"
  },
  {
    "text": "and you know why it was removed in the first place so rev will be first getting shot in around 2011",
    "start": "1859840",
    "end": "1866080"
  },
  {
    "text": "and between 2015 and 2018 we had this big rewrite of everything and",
    "start": "1866080",
    "end": "1873120"
  },
  {
    "text": "shoddy didn't make the cut or to be like we explicitly removed sharding from that now sharding is a quite complicated",
    "start": "1873120",
    "end": "1880240"
  },
  {
    "text": "topic and because it became niche with the growth of hardware we decided not to try to",
    "start": "1880240",
    "end": "1886320"
  },
  {
    "text": "support it but i want to explain something about how this works charlie's support that we had in 2011 was from the",
    "start": "1886320",
    "end": "1892880"
  },
  {
    "text": "client perspective so you go and define the shouting configuration that you have on the client and then the client would",
    "start": "1892880",
    "end": "1899840"
  },
  {
    "text": "know how to write requests and things like that that box is not great but what end up happening over time is that we",
    "start": "1899840",
    "end": "1906799"
  },
  {
    "text": "realize that we want to have as little configuration as possible on the client side and the reason for that is how do",
    "start": "1906799",
    "end": "1914240"
  },
  {
    "text": "you support operations i want to be able to modify things and i don't want to",
    "start": "1914240",
    "end": "1919279"
  },
  {
    "text": "have to go and redeploy code to all of my clients i want to be able to go to the database engine and say change and",
    "start": "1919279",
    "end": "1925360"
  },
  {
    "text": "have it applied so that was a real issue so what we decided to do we decided we",
    "start": "1925360",
    "end": "1930960"
  },
  {
    "text": "wanted to implement a sharding on the server side and this is actually what we are busy doing for the 6-0 release of",
    "start": "1930960",
    "end": "1937840"
  },
  {
    "text": "revenue which we hope to be in mid q3 of this year all right oren well thank you for the",
    "start": "1937840",
    "end": "1943679"
  },
  {
    "text": "conversation for today thank you for joining us and i look forward to chatting with you again in the future",
    "start": "1943679",
    "end": "1950150"
  },
  {
    "text": "[Music]",
    "start": "1950150",
    "end": "1971509"
  },
  {
    "text": "you",
    "start": "1972080",
    "end": "1974158"
  }
]