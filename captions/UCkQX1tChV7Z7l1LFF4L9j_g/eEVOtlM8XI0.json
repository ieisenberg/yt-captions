[
  {
    "text": "[Music]",
    "start": "760",
    "end": "6950"
  },
  {
    "text": "[Music]",
    "start": "9090",
    "end": "22240"
  },
  {
    "text": "so those who don't know me I'm Brandon McAdams I am among other things a scholar developer I say that because I",
    "start": "22240",
    "end": "27320"
  },
  {
    "text": "seem to be the person at ten genen who knows every language we support and so I get stuck with all the weird stuff um I",
    "start": "27320",
    "end": "32480"
  },
  {
    "text": "think I'm in charge of our H and Earl drivers now too I haven't done anything with them um I am a developer ton our",
    "start": "32480",
    "end": "37960"
  },
  {
    "text": "main product obviously is mongodb among other things we use a ton of atlassian products for all our stuff we're using",
    "start": "37960",
    "end": "43320"
  },
  {
    "text": "jira Confluence um we until recently we're using bamboo but we had you know",
    "start": "43320",
    "end": "48360"
  },
  {
    "text": "we changed a couple things up it's still in use for some things um for us it's a big part of our public facing stuff for the open source so you know it's good to",
    "start": "48360",
    "end": "55320"
  },
  {
    "text": "be here and have these guys supporting something that obviously it's going both ways they've launched a product on Scala",
    "start": "55320",
    "end": "60559"
  },
  {
    "text": "and um a lot of what's been successful for is being able to have a good Wiki and a good bug tracker",
    "start": "60559",
    "end": "65920"
  },
  {
    "text": "and everything else um so this is really a bit of a talk more about me learning",
    "start": "65920",
    "end": "71560"
  },
  {
    "text": "Scola I did this talk originally at schola days last year it's cleaned up and evolved a bit since then but really",
    "start": "71560",
    "end": "77439"
  },
  {
    "text": "the idea is it's not just you know what is kasba but how I got where I was",
    "start": "77439",
    "end": "82920"
  },
  {
    "text": "because when I started writing this driver from I hadn't written any scol at all and so it's an it's an interesting look especially if you",
    "start": "82920",
    "end": "88960"
  },
  {
    "text": "haven't done as much SC or you're starting to dig into it or digging into more advanced points at some of the mistakes I've made some of the things",
    "start": "88960",
    "end": "94759"
  },
  {
    "text": "that work well and a little bit of a look at the Open Source process so I'm not actually going to start with David",
    "start": "94759",
    "end": "100520"
  },
  {
    "text": "Copperfield here um but I am an autodidact so I don't have any formal CS education everything I've learned I've",
    "start": "100520",
    "end": "106479"
  },
  {
    "text": "learned on my own um I spent about a semester in college it went really badly studying criminal justice and psychology",
    "start": "106479",
    "end": "112960"
  },
  {
    "text": "obviously that's not what I do now um but a lot of stuff I do spend a lot of",
    "start": "112960",
    "end": "118079"
  },
  {
    "text": "time uh reading you know CS his you know CS Theory I'm a big fan of history as",
    "start": "118079",
    "end": "123560"
  },
  {
    "text": "well I mean you look at some of the stuff we're repeating now the actor concept is from white paper in the 1970s",
    "start": "123560",
    "end": "129479"
  },
  {
    "text": "this isn't new stuff it's just that we're going back to this idea of having multiple processors we have to deal with",
    "start": "129479",
    "end": "134760"
  },
  {
    "text": "and a lot of these ideas are emerging again so it's important to not ignore what we have before and I try to bring",
    "start": "134760",
    "end": "140400"
  },
  {
    "text": "that in sometimes for me it's a little tough because I don't have all this formal Theory I did start on this lovely",
    "start": "140400",
    "end": "147319"
  },
  {
    "text": "computer though which for those who don't know it is a Comer 64 um and was",
    "start": "147319",
    "end": "152879"
  },
  {
    "text": "even you had to run weird commands even to Start programs something like load star 8 comma 1 which turns out to mean",
    "start": "152879",
    "end": "159200"
  },
  {
    "text": "load everything on device 8 which is the first external floppy Drive um for me it sort of dug into starting a program and",
    "start": "159200",
    "end": "166319"
  },
  {
    "text": "understand what's going on fast forwarding quite a bit though um really this started in about 2009 I was",
    "start": "166319",
    "end": "173519"
  },
  {
    "text": "doing a lot more work um especially with data analysis working with quantitative analysis people to take",
    "start": "173519",
    "end": "180440"
  },
  {
    "text": "basic data models they put together and scale them up for big processing so we were starting to look at different uh",
    "start": "180440",
    "end": "187120"
  },
  {
    "text": "database backends because stuff like SQL Server couldn't do what we needed and that's when I started digging into a lot of new new database stuff like",
    "start": "187120",
    "end": "194480"
  },
  {
    "text": "Cassandra all these different pieces playing with them getting a feel for what they could do um and also getting a",
    "start": "194480",
    "end": "200040"
  },
  {
    "text": "better feel suddenly for all this functional programming because you're working with quants suddenly you're into this idea of everything is a function",
    "start": "200040",
    "end": "205440"
  },
  {
    "text": "and you're just chaining functions together and you go back to looking at something like Python and everything like lamb just starts to make more sense",
    "start": "205440",
    "end": "212879"
  },
  {
    "text": "um and so it went from there and so I played a little with C which I think is why schol made sense in the",
    "start": "212879",
    "end": "218959"
  },
  {
    "text": "end that year I had put together uh the first nosql conference for New York and",
    "start": "218959",
    "end": "224040"
  },
  {
    "text": "uh we had about a 100 people which was as a as a point of reference if you're going to put a conference together and",
    "start": "224040",
    "end": "229519"
  },
  {
    "text": "post it to Hacker News before you go to lunch put a cap on how many people can",
    "start": "229519",
    "end": "234599"
  },
  {
    "text": "sign up based on how much space you've actually been assigned by your sponsor because I came back from lunch",
    "start": "234599",
    "end": "240640"
  },
  {
    "text": "and there were like a 100 people signed up and we had space for 15 um this was actually the first time I",
    "start": "240640",
    "end": "246319"
  },
  {
    "text": "had worked with ten genen because they were nice enough to sponsor it and didn't like stab me or anything else but instead say okay we'll find a venue to",
    "start": "246319",
    "end": "253560"
  },
  {
    "text": "rent uh I also around like about a week after that the job I was at sort of",
    "start": "253560",
    "end": "258759"
  },
  {
    "text": "imploded and uh I found myself looking for work and ended up at Nova's Partners which is where casbas started um and",
    "start": "258759",
    "end": "264680"
  },
  {
    "text": "they were looking for a lot of solutions to different problems one of which was in some ways a database solution but",
    "start": "264680",
    "end": "270240"
  },
  {
    "text": "also scaling the Java they had they had a lot of libraries and calculations and other things that didn't necessarily",
    "start": "270240",
    "end": "276160"
  },
  {
    "text": "scale to the level that they wanted and so I had been doing a lot of reading including things like some of the scholar books and Scholar seemed like a",
    "start": "276160",
    "end": "282440"
  },
  {
    "text": "good idea because suddenly hey here's this language we can reuse everything that's already there I know the jvm well",
    "start": "282440",
    "end": "287800"
  },
  {
    "text": "because I've spent enough years doing Java um let's take a stab at this and then obviously I was there for about a",
    "start": "287800",
    "end": "292960"
  },
  {
    "text": "year and tenen lured me away uh to come and work on the scholar driver I created while I was at Nova full-time uh which",
    "start": "292960",
    "end": "300280"
  },
  {
    "text": "is what I do now and among other things I get to play with scholar for a living so it could be worse um at at Nova originally like I",
    "start": "300280",
    "end": "308120"
  },
  {
    "text": "said they had a lot of problems and they needed new tools for which Java wasn't always the answer there were even things like they're doing Cal Financial",
    "start": "308120",
    "end": "314360"
  },
  {
    "text": "calculations where they wanted more control over formulas you know it would be great to have portfolio a plus",
    "start": "314360",
    "end": "319400"
  },
  {
    "text": "portfolio B and Define what that means which is something that we get with scholar with operators and everything else um and Scholar really was the right",
    "start": "319400",
    "end": "327479"
  },
  {
    "text": "tool I had read Alex and Dean wampler's book uh I had not written any code and",
    "start": "327479",
    "end": "333280"
  },
  {
    "text": "so I sort of just started writing things and uh started showing it to people and",
    "start": "333280",
    "end": "339440"
  },
  {
    "text": "slammed it in before anybody could really object I'll admit um AA was really a big part of this so obviously",
    "start": "339440",
    "end": "345520"
  },
  {
    "text": "in the scholar world uh if you didn't know apparently Chuck Nar says Victor clang is his emergency",
    "start": "345520",
    "end": "351960"
  },
  {
    "text": "contact uh good guy to know if you're ever in trouble also there I he he",
    "start": "351960",
    "end": "357080"
  },
  {
    "text": "showed me there's good Indian food in Sweden so we were doing a lot of stuff with",
    "start": "357080",
    "end": "362120"
  },
  {
    "text": "custom formulas dsls and other tools so I started to fiddle with a lot of things but I also started fiddling with",
    "start": "362120",
    "end": "368599"
  },
  {
    "text": "because it seemed like the right tool I had worked with it before it seemed like the right tool for certain parts of what we were doing is essentially taking you",
    "start": "368599",
    "end": "374319"
  },
  {
    "text": "know the terabytes of data we're calculating putting it up on the side and having a little slice of the",
    "start": "374319",
    "end": "379400"
  },
  {
    "text": "important information that we needed and having a cache but unfortunately when I started to look at what tools were there",
    "start": "379400",
    "end": "386599"
  },
  {
    "text": "none of them really fit what I was looking for and I tried to avoid that I'm going to my own but I never could get anything that was out there to work",
    "start": "386599",
    "end": "392160"
  },
  {
    "text": "the way I wanted um and uh Rose Tumi took a lot of things that I started to build initially and ran with it and I",
    "start": "392160",
    "end": "398280"
  },
  {
    "text": "had worked with rose before um some of you may know her she's somewhat quiet on Twitter but she's does a lot of the",
    "start": "398280",
    "end": "403800"
  },
  {
    "text": "development and maintenance on salot which is one of the big mapping libraries so this started really with um",
    "start": "403800",
    "end": "410639"
  },
  {
    "text": "nothing looking the way I wanted I had at first played with in Python and you know Python's a very Dynamic",
    "start": "410639",
    "end": "416759"
  },
  {
    "text": "language there's some flexible syntax and Mongo's pretty Dynamic you know we don't have static schemas everything's",
    "start": "416759",
    "end": "423280"
  },
  {
    "text": "flexible and the tools that I was playing with for with Scala and",
    "start": "423280",
    "end": "428680"
  },
  {
    "text": "really weren't where I wanted them to be I had my own picture in my head of what I was trying to do and a lot of these",
    "start": "428680",
    "end": "434720"
  },
  {
    "text": "were odms and I'm still I'm personally still not convinced that odms are a PR",
    "start": "434720",
    "end": "440160"
  },
  {
    "text": "completely useful tool because I think as soon as somebody has something that maps to an object they do everything with an object mapper I think they're",
    "start": "440160",
    "end": "446360"
  },
  {
    "text": "really good for certain things like hey I want my user dat dat to be a mapped object that's a great use for an odm but",
    "start": "446360",
    "end": "452720"
  },
  {
    "text": "I don't need everything to be an odm so for what we were doing an odm was completely the wrong",
    "start": "452720",
    "end": "457960"
  },
  {
    "text": "answer the Java driver existed but it had no support for any Scola sugar any",
    "start": "457960",
    "end": "463400"
  },
  {
    "text": "tricks any of the things I could normally do you couldn't even use apply methods and there was something called",
    "start": "463400",
    "end": "469919"
  },
  {
    "text": "scango which eventually was rolled into lift and became lift in 2.0 um but",
    "start": "469919",
    "end": "475199"
  },
  {
    "text": "it was completely an odm or Json tools and still not quite what we were looking for for and then there was something",
    "start": "475199",
    "end": "480960"
  },
  {
    "text": "called Monga scholar driver which actually the author has recently announced is deprecated um mostly because he said you know cbos fills that",
    "start": "480960",
    "end": "487840"
  },
  {
    "text": "hole it's supported he's rolled out a new library that I haven't had much time to play with called shapeless I think",
    "start": "487840",
    "end": "493360"
  },
  {
    "text": "it's called shapeless which is or something what's that no no sh it's maybe it's not",
    "start": "493360",
    "end": "500120"
  },
  {
    "text": "shapeless I forget the name of it it starts with an S it's the guy who did  scholar driver uh osinka on",
    "start": "500120",
    "end": "506639"
  },
  {
    "text": "Twitter or GitHub I think um and it's based around the Java driver as a",
    "start": "506639",
    "end": "512880"
  },
  {
    "text": "different way of doing odm but now he's focused on object mapping so here is initially when I",
    "start": "512880",
    "end": "518839"
  },
  {
    "text": "started really what looked like from python which is to me that gold standard this is what I'm looking to",
    "start": "518839",
    "end": "524120"
  },
  {
    "text": "have happen I want things like I want to be able to define a document without having to have a whole bunch of I mean I",
    "start": "524120",
    "end": "530120"
  },
  {
    "text": "can't even really properly do multi-line statements in Java you know I don't have multi-line strings any of the other",
    "start": "530120",
    "end": "536399"
  },
  {
    "text": "things I'm looking for and even things like the fact that you've got a little better handling of dynamic types because",
    "start": "536399",
    "end": "543560"
  },
  {
    "text": "you know if I pull out the value age from a document and pull out the type it tells",
    "start": "543560",
    "end": "548720"
  },
  {
    "text": "me it's an in and I can pull out easily the value of an array and you know python is sort",
    "start": "548720",
    "end": "556279"
  },
  {
    "text": "of automatically handling a lot for me that we may not get in something like Java um using Scala initially when I",
    "start": "556279",
    "end": "563800"
  },
  {
    "text": "started from just having the Java driver this is pretty much what you have you",
    "start": "563800",
    "end": "569079"
  },
  {
    "text": "know it's a slightly big difference here which is you know here where we have a nice clean single block and then all of",
    "start": "569079",
    "end": "576040"
  },
  {
    "text": "a sudden we're declaring object after object which is the Java model it doesn't necessarily mean that it's sane",
    "start": "576040",
    "end": "582640"
  },
  {
    "text": "and we get into trouble here um if we pull out age it's declared as any ref",
    "start": "582640",
    "end": "587920"
  },
  {
    "text": "because we don't actually know what it is the document is basically a map of string to any or in this case I think",
    "start": "587920",
    "end": "595279"
  },
  {
    "text": "string to any ref at the time so what we get out we have to know what we expect it to be and cast it and hope that it",
    "start": "595279",
    "end": "601560"
  },
  {
    "text": "gets where it's supposed to be but it's still not entirely perfect um this is",
    "start": "601560",
    "end": "607160"
  },
  {
    "text": "one place where I actually really strongly object it's something that I found with Scala where the way the",
    "start": "607160",
    "end": "612480"
  },
  {
    "text": "casting works I found that personally the postfix casting is really bad",
    "start": "612480",
    "end": "617640"
  },
  {
    "text": "because you don't read it the same way you know I read left to right which means that I want to read um you know",
    "start": "617640",
    "end": "623720"
  },
  {
    "text": "basic DB list dock interests whereas when it's sort of at the end it's not always clear and it's a little bit",
    "start": "623720",
    "end": "630760"
  },
  {
    "text": "messy so part of what I thought about was really type I want type safety I want compilation but it shouldn't make",
    "start": "630760",
    "end": "636560"
  },
  {
    "text": "me want to bang my head on my desk which I found myself doing frequently there's really nothing wrong with that syntax if",
    "start": "636560",
    "end": "642399"
  },
  {
    "text": "you're writing Java most of us are writing Scola not because we want to rewriting Java but because it's a tool",
    "start": "642399",
    "end": "647839"
  },
  {
    "text": "that's more flexible for things so we've got a lot of expressiveness we've got fluid syntax and it's you know it's very",
    "start": "647839",
    "end": "654560"
  },
  {
    "text": "beautiful in a lot of ways if you write good clean code it's got its own flow to it",
    "start": "654560",
    "end": "659839"
  },
  {
    "text": "and I started trying to make Scala look like Python and uh obviously I you",
    "start": "659839",
    "end": "665399"
  },
  {
    "text": "know I haven't made python in in Scala but more some of the same things that worked really well for me from python I",
    "start": "665399",
    "end": "670880"
  },
  {
    "text": "wanted to work the one other thing though is I didn't want to reinvent the wheel you know the network layer and the",
    "start": "670880",
    "end": "676800"
  },
  {
    "text": "the libraries for parsing the binary format in already existed on the jbm as much as possible there's no",
    "start": "676800",
    "end": "682920"
  },
  {
    "text": "reason to rewrite those from scratch because then every time there's a change in the server or a bug found I've",
    "start": "682920",
    "end": "688920"
  },
  {
    "text": "got a fix it in two places now I maintain both drivers and I have to fix it in two places if I had done that so I",
    "start": "688920",
    "end": "695160"
  },
  {
    "text": "kept the network layer and really just build a set of wrappers and really added syntactic",
    "start": "695160",
    "end": "700760"
  },
  {
    "text": "sugar which is why originally this was called scolar wrappers mostly because scolar driver was taken",
    "start": "700760",
    "end": "706160"
  },
  {
    "text": "but really it was just a set of wrappers and so today this is much closer to what it looks like you know I have something",
    "start": "706160",
    "end": "712399"
  },
  {
    "text": "that's somewhat close to what I really wanted to begin with which is that I can use the infix notation have have",
    "start": "712399",
    "end": "719440"
  },
  {
    "text": "everything flow in a nicer way um there is a mongodb object Constructor and I'll show you why in a few minutes because I",
    "start": "719440",
    "end": "725639"
  },
  {
    "text": "tried doing tupal parsing to begin with and it turned out to be a really horrific evil idea um and things like",
    "start": "725639",
    "end": "733040"
  },
  {
    "text": "the 28 scall 28 collection factories and Builders we fully Implement now so you can actually have a factory Constructor",
    "start": "733040",
    "end": "740120"
  },
  {
    "text": "you can build all those patterns that you're used to using with constructing a maap or something else in the Scala can",
    "start": "740120",
    "end": "745560"
  },
  {
    "text": "more or less be applied to the driver because you know apis libraries should fit into their language as a natural",
    "start": "745560",
    "end": "751800"
  },
  {
    "text": "thing it's a philosophy we tend to follow at ten genen with our drivers is we're not trying to write a driver that's a c driver in every",
    "start": "751800",
    "end": "758440"
  },
  {
    "text": "language we're trying to write a driver that's a mongod driver but feels like the language you're using that if you're",
    "start": "758440",
    "end": "763760"
  },
  {
    "text": "a python user and you use our python driver it should make sense within the context of python and hopefully the same",
    "start": "763760",
    "end": "770560"
  },
  {
    "text": "thing for the scholar driver if you're used to oh this is how I work with a collection in Scala then a driver that",
    "start": "770560",
    "end": "777480"
  },
  {
    "text": "provides a collection interface should follow those apis and one of them is you know we do",
    "start": "777480",
    "end": "785279"
  },
  {
    "text": "have an as now so you can actually say doc. as what you want to cast it at and",
    "start": "785279",
    "end": "790800"
  },
  {
    "text": "then the name so it reads more fluidly you're saying from the document get this field as this value and this does some",
    "start": "790800",
    "end": "798440"
  },
  {
    "text": "casting internally uh there's been some improvements in the last three weeks to make it compile time safe as opposed to",
    "start": "798440",
    "end": "804320"
  },
  {
    "text": "runtime safe where I had had it runtime safe and my Sabin and uh yon Anders tan",
    "start": "804320",
    "end": "809600"
  },
  {
    "text": "sent me some patches that actually fix it to catch at compile time if certain things haven't happened which is a good",
    "start": "809600",
    "end": "814800"
  },
  {
    "text": "thing catching these things at compile time saves you from runtime crashes and you know some of these other things they",
    "start": "814800",
    "end": "821000"
  },
  {
    "text": "cast nicely they flow there's also an experimental Dynamic support module that Jorge or's put together for um 29 so you",
    "start": "821000",
    "end": "829240"
  },
  {
    "text": "could do like doc. age and then call Dot typed and cast it as an in if you wanted to I don't ship that by default but it's",
    "start": "829240",
    "end": "835959"
  },
  {
    "text": "there for people want to compile it my rule is if you can figure out to turn on scola's Dynamic support in the compiler",
    "start": "835959",
    "end": "842240"
  },
  {
    "text": "the code is there for you but I will not give you this tool by default because I'm not convinced it's a good idea",
    "start": "842240",
    "end": "848199"
  },
  {
    "text": "because I don't want to support people doing weird stuff with this there's also a fluid DSL so if you've seen",
    "start": "848199",
    "end": "854560"
  },
  {
    "text": "before we have a syntax like this so if I'm looking for a document that's greater than or equal to 15 and less",
    "start": "854560",
    "end": "860959"
  },
  {
    "text": "than 35.2 and doesn't equal 16 which is a little bit of a weird query I admit um",
    "start": "860959",
    "end": "866680"
  },
  {
    "text": "you can you know you basically build up a structure of documents so you you know it's nested and we've",
    "start": "866680",
    "end": "871759"
  },
  {
    "text": "got these operators which fit within the JavaScript origins of and that the dollar is a special symbol what I found",
    "start": "871759",
    "end": "879440"
  },
  {
    "text": "is there's a lot of other drivers that were using like their own query DSL trying to be like you know SQL but I",
    "start": "879440",
    "end": "885079"
  },
  {
    "text": "know the query syntax really well I didn't want to have to keep looking both things up so I put a a DSL together",
    "start": "885079",
    "end": "891120"
  },
  {
    "text": "based on here's the syntax and I sort of get away with using the dollar signs because I'm careful to never name",
    "start": "891120",
    "end": "897040"
  },
  {
    "text": "an operator the same as something the scolar compil creates but you can now do a fluid construction like this you can",
    "start": "897040",
    "end": "903519"
  },
  {
    "text": "say f space GTE space 15 and that compiles down to a expression so",
    "start": "903519",
    "end": "910079"
  },
  {
    "text": "what you get is actually the equivalence of this and this lets people you know you don't have to have levels and levels",
    "start": "910079",
    "end": "916320"
  },
  {
    "text": "of multiple Constructor calls in order to construct a query or something else and it just makes it easier to maintain",
    "start": "916320",
    "end": "921519"
  },
  {
    "text": "and easier to read the code when it's on the screen we you know for something like not because not actually takes a",
    "start": "921519",
    "end": "927320"
  },
  {
    "text": "whole document under it for a query you can actually do something like this where it's an in nested block using the",
    "start": "927320",
    "end": "933279"
  },
  {
    "text": "implicit underscore and this all flows outward and it's actually fully tested now I I beat myself half to death uh",
    "start": "933279",
    "end": "940040"
  },
  {
    "text": "writing tests for every single case a few months ago and I mean there's a number of",
    "start": "940040",
    "end": "945560"
  },
  {
    "text": "others that come into this so there's things like nor which have a number of possibilities that come in and this is",
    "start": "945560",
    "end": "952360"
  },
  {
    "text": "all stuff that's built up over a few years but it's all there and it's an example of the kinds of things that you can pull off easily with Scola",
    "start": "952360",
    "end": "960920"
  },
  {
    "text": "um iteration within scholar works fine now as well so it did take a while to get here",
    "start": "961079",
    "end": "968120"
  },
  {
    "text": "I think the uh initial release that I put out was February 2010 uh when I put",
    "start": "968120",
    "end": "973480"
  },
  {
    "text": "this these slides together for scholar dayss last year I was slightly horrified to find out there was not a single test",
    "start": "973480",
    "end": "978560"
  },
  {
    "text": "in the initial release um to be fair you probably can't read this back here that says initial import it compiles and",
    "start": "978560",
    "end": "985959"
  },
  {
    "text": "reflects the working code in trunk but doesn't does have documentation or tests not for public consumption use at your",
    "start": "985959",
    "end": "992360"
  },
  {
    "text": "own risk may or may not blow your system up so at least I was being honest um but this really was just trying to get it",
    "start": "992360",
    "end": "998199"
  },
  {
    "text": "out there get it out the door for people to look at um we hired a couple people at novas over that time and people like Max aof got involved and really helping",
    "start": "998199",
    "end": "1005519"
  },
  {
    "text": "develop it that by July we got a release out um January the next year because I",
    "start": "1005519",
    "end": "1011519"
  },
  {
    "text": "was at tenen when I got to tenen you know the first thing I did was really step back look back at what I had done and try to clean it up as much as",
    "start": "1011519",
    "end": "1018040"
  },
  {
    "text": "possible today it's pretty solid it's used in a lot of places including these guys just mentioned they launched a new",
    "start": "1018040",
    "end": "1023440"
  },
  {
    "text": "project yesterday on it um I'm finishing up casba 3 now which is really things like getting rid of any last vestages",
    "start": "1023440",
    "end": "1029839"
  },
  {
    "text": "the project originally started on Scola 27 so it didn't have things like named to default arguments um cleaning up all",
    "start": "1029839",
    "end": "1036160"
  },
  {
    "text": "these overloaded con you know methods and making them one flat method cleaning a lot of things up bug fixes better",
    "start": "1036160",
    "end": "1043438"
  },
  {
    "text": "tests Etc uh and there's a milestone two of that available now if you want to",
    "start": "1043439",
    "end": "1048600"
  },
  {
    "text": "grab that so now to really dig into some scholar code if nobody's seen this",
    "start": "1048600",
    "end": "1054440"
  },
  {
    "text": "episode of South Park I thought it was appropriate um so we're really talking about you know pimping Java code",
    "start": "1054440",
    "end": "1059960"
  },
  {
    "text": "syntactic sugar internal dsls and all the things we're going to do I'm going to try not to sit here dwelling on code",
    "start": "1059960",
    "end": "1065480"
  },
  {
    "text": "slides which are somewhat hard to read um they're sort of part of the story but we can go through those as needed this",
    "start": "1065480",
    "end": "1071440"
  },
  {
    "text": "is actually what the first pass of Caspa looked like I had this bright idea of there's this whole tupal Constructor",
    "start": "1071440",
    "end": "1077679"
  },
  {
    "text": "system in Scala I'll just just leverage that and make that work uh it turned out there are a number of problems here",
    "start": "1077679",
    "end": "1084799"
  },
  {
    "text": "including the fact that even option is Tech so there is no Base Class for tupal",
    "start": "1084799",
    "end": "1090039"
  },
  {
    "text": "you've got tupal 1 through tupal 22 their Base Class is product so of",
    "start": "1090039",
    "end": "1096760"
  },
  {
    "text": "course I wrote an implicit conversion that looks for product which seemed like a really good idea until the first time",
    "start": "1096760",
    "end": "1103400"
  },
  {
    "text": "that the implicit accidentally picked up option which is also a product as are several other things built into Scola",
    "start": "1103400",
    "end": "1110280"
  },
  {
    "text": "this is also a really hairy ridiculous piece of code which tries to identify things that are only Tuple twos but it",
    "start": "1110280",
    "end": "1117760"
  },
  {
    "text": "has to do that at runtime and make sure that its aity is only two because they don't have some Base Class that we can",
    "start": "1117760",
    "end": "1123280"
  },
  {
    "text": "work off of not the brightest idea it worked for a while this was one of those",
    "start": "1123280",
    "end": "1128640"
  },
  {
    "text": "as soon as other people started touching the code they started sending emails asking what I was smoking uh because",
    "start": "1128640",
    "end": "1133919"
  },
  {
    "text": "this really was you know and at the time this seemed like a really good idea but this is sort of you jump into a new language first thing you try to do is",
    "start": "1133919",
    "end": "1139760"
  },
  {
    "text": "something very clever um it didn't work in this case because in you know in a",
    "start": "1139760",
    "end": "1145000"
  },
  {
    "text": "strongly type language like Java we can Hammer all we want a square peg is not going to fit into a round hole um you're",
    "start": "1145000",
    "end": "1151559"
  },
  {
    "text": "getting out the Chisel and the hammer maybe you'll make it fit but when all you have as a hammer everything looks a lot like a",
    "start": "1151559",
    "end": "1157039"
  },
  {
    "text": "thumb in a Loosely or a dynamically type language like Pearl and Python and Ruby",
    "start": "1157039",
    "end": "1162200"
  },
  {
    "text": "you know round holes can be convinced to accept Square pegs with a couple pints of liquor and uh stealing his glasses in",
    "start": "1162200",
    "end": "1170360"
  },
  {
    "text": "this case I don't think he's going to like what he finds in the morning I The more I've worked with",
    "start": "1170360",
    "end": "1175520"
  },
  {
    "text": "scholar the more I think it gives us a lath instead so we have this idea of having a very fine grain tool that can",
    "start": "1175520",
    "end": "1180720"
  },
  {
    "text": "let us shave the edges and make that square peg fit where we need it to we have things like implicits and",
    "start": "1180720",
    "end": "1187120"
  },
  {
    "text": "type classes abstract and parameterized types which are really you know with covariant and contravariant we have some",
    "start": "1187120",
    "end": "1193200"
  },
  {
    "text": "really flexible things you know you look at what you can pull off with scholas type system versus Javas and it's heads",
    "start": "1193200",
    "end": "1199000"
  },
  {
    "text": "and shoulders above structural types which not a lot of people use I don't use that much either but they're sort of",
    "start": "1199000",
    "end": "1205080"
  },
  {
    "text": "like duct typing which I am a fan of duct typing as a concept so I've sort of somewhat",
    "start": "1205080",
    "end": "1211200"
  },
  {
    "text": "conceitedly come up with my three laws of Library design and they are this am I helping my users or am I hurting them",
    "start": "1211200",
    "end": "1218440"
  },
  {
    "text": "and the corollary to that is do I have any idea who my users are because in a lot of cases I started getting emails",
    "start": "1218440",
    "end": "1223559"
  },
  {
    "text": "from people and I went wait they're using this code in production this is",
    "start": "1223559",
    "end": "1228679"
  },
  {
    "text": "probably not a good thing I should see how well this works um but this happens a lot you know once you put a code out",
    "start": "1228679",
    "end": "1234640"
  },
  {
    "text": "in open source it's out there people are using it and you're stuck with whatever they choose to do with it have you",
    "start": "1234640",
    "end": "1241159"
  },
  {
    "text": "accounted for all the use cases because this is really important if you build a library for yourself the problem is that",
    "start": "1241159",
    "end": "1246320"
  },
  {
    "text": "people are going to start using it in ways that you didn't account for and that means you've got to have type checks you've got to have compile checks",
    "start": "1246320",
    "end": "1252240"
  },
  {
    "text": "something to keep people from doing things that are stupid or that will get them in trouble because the worst possible thing is things like silent",
    "start": "1252240",
    "end": "1258280"
  },
  {
    "text": "corrupt or crashing in the middle of production or crashing in a demo and uh most importantly do I have",
    "start": "1258280",
    "end": "1265280"
  },
  {
    "text": "any idea what the hell I'm doing uh because in a lot of cases I don't think I did at the beginning so the rule is",
    "start": "1265280",
    "end": "1271799"
  },
  {
    "text": "supposed to be measured once cut twice but I'm not",
    "start": "1271799",
    "end": "1277080"
  },
  {
    "text": "really I'm not really a carpenter I have I don't think I could probably put a shelf together even if",
    "start": "1277080",
    "end": "1282960"
  },
  {
    "text": "you gave me all the tools and the wood so a lot of what I love about Scala is the compile time checks",
    "start": "1282960",
    "end": "1289080"
  },
  {
    "text": "they don't keep you from misunderstanding things hurting your users or just screwing up you know you",
    "start": "1289080",
    "end": "1294320"
  },
  {
    "text": "can catch things that won't work but it doesn't mean that there aren't certain things and especially when you get into things like the runtime eraser on the",
    "start": "1294320",
    "end": "1301240"
  },
  {
    "text": "jvm you can think that your code compiled all you want but the reality is",
    "start": "1301240",
    "end": "1306400"
  },
  {
    "text": "there's no information at runtime about what the type of sequence is and so you're kind of stuck with what's",
    "start": "1306400",
    "end": "1312720"
  },
  {
    "text": "there there's fun with type inference um one of the early mistakes I made in Daniel his uh ripped me on this",
    "start": "1312720",
    "end": "1319320"
  },
  {
    "text": "one a couple times because he's pointed out that yes type inference is good according to scholar style guide but not",
    "start": "1319320",
    "end": "1324679"
  },
  {
    "text": "if you're writing a library if you're writing a library every single method should have an explicit declared return",
    "start": "1324679",
    "end": "1331480"
  },
  {
    "text": "type and one of the reasons why is you can do things like Val x equals and then an if else elseif block and it will",
    "start": "1331480",
    "end": "1338200"
  },
  {
    "text": "capture the value but if you don't declare the type what scholar will do is it will choose the most appropriate",
    "start": "1338200",
    "end": "1345120"
  },
  {
    "text": "super class of all the different possible return types",
    "start": "1345120",
    "end": "1350159"
  },
  {
    "text": "if none of them have an appropriate super class your return type might be any or any ref and so I got bug reports",
    "start": "1350159",
    "end": "1357039"
  },
  {
    "text": "early on of things like I expected X to come out of this method but instead I",
    "start": "1357039",
    "end": "1362559"
  },
  {
    "text": "got Y which doesn't make sense or some intermediary abstract type that I had declared or something else it's really",
    "start": "1362559",
    "end": "1369279"
  },
  {
    "text": "important it doesn't seem like it we get in those you know when you're putting a library together this really made a huge",
    "start": "1369279",
    "end": "1374480"
  },
  {
    "text": "difference for me um even things like working with manifests you know manifests seemed early on to me like the",
    "start": "1374480",
    "end": "1380640"
  },
  {
    "text": "Panacea for solving every problem with typ erer but again they only get you as far as did you catch every possible",
    "start": "1380640",
    "end": "1387640"
  },
  {
    "text": "mistake at compile time or is this still going to blow up at runtime you manifest are really just generating a bunch of",
    "start": "1387640",
    "end": "1393400"
  },
  {
    "text": "paths without you having to cut and paste code yourself it's the compiler doing cutting and pasting for you and",
    "start": "1393400",
    "end": "1400799"
  },
  {
    "text": "you know knowing and understanding the fancy features but you need to really know when to use them and and",
    "start": "1400799",
    "end": "1406760"
  },
  {
    "text": "paraphrasing things I've heard a lot lot of times is that I think the difference at this point between a junior and a senior programmer is that a senior",
    "start": "1406760",
    "end": "1413600"
  },
  {
    "text": "programmer should have the wisdom to know when not to write code when not to pick up that fancy feature and hammer",
    "start": "1413600",
    "end": "1418919"
  },
  {
    "text": "away on it um and that really makes a difference and I think more for me lately with Casp I've been trying to",
    "start": "1418919",
    "end": "1424520"
  },
  {
    "text": "pull code out more than ad code because there's a lot of Simplicity that can be rolled",
    "start": "1424520",
    "end": "1430720"
  },
  {
    "text": "in so you know I spent a lot of time learning new features stuff that was undocumented finding whatever blog post",
    "start": "1430960",
    "end": "1436600"
  },
  {
    "text": "I could code that I could dig up um one of the questions that I had early on was how do I have this sort of sort",
    "start": "1436600",
    "end": "1442720"
  },
  {
    "text": "of type safe query DSL where users can have custom types so early on that DSL",
    "start": "1442720",
    "end": "1450240"
  },
  {
    "text": "just really allowed any type through the door the problem is there's limited types to what an operator like greater than or less than can",
    "start": "1450240",
    "end": "1456640"
  },
  {
    "text": "support but you also are on the jvm where it's possible that some user has",
    "start": "1456640",
    "end": "1462760"
  },
  {
    "text": "their own custom definition of a number and a number is a perfectly valid type for greater than or less than and as",
    "start": "1462760",
    "end": "1469000"
  },
  {
    "text": "long as they tell the Java driver how to serialize their number class it can be stored in but if in their query",
    "start": "1469000",
    "end": "1476000"
  },
  {
    "text": "DSL they reference this number class that kbot didn't know about to begin with they're suddenly in this situation",
    "start": "1476000",
    "end": "1483039"
  },
  {
    "text": "if there's this really cool query Library we'd love to use but we can't use it because our types aren't accepted",
    "start": "1483039",
    "end": "1489080"
  },
  {
    "text": "and so I started with you know really hardcoding this of okay well I think",
    "start": "1489080",
    "end": "1494919"
  },
  {
    "text": "string date any Val DB object and map of string any should be valid operators here but this is very much hardcoded it",
    "start": "1494919",
    "end": "1501679"
  },
  {
    "text": "doesn't account for what they're doing believe it or not this is actually a much better solution to the problem one",
    "start": "1501679",
    "end": "1508720"
  },
  {
    "text": "of which is yet again the constant trap I keep falling into in Scola is trying",
    "start": "1508720",
    "end": "1514399"
  },
  {
    "text": "to find that magic shortcut to not having to enter support for tupal 1",
    "start": "1514399",
    "end": "1520120"
  },
  {
    "text": "through 22 the right answer is to write a quick python script that generates it for you like The Scholar compiler has",
    "start": "1520120",
    "end": "1526240"
  },
  {
    "text": "and get over it so in this case obviously OB ly from here to here we're",
    "start": "1526240",
    "end": "1532600"
  },
  {
    "text": "defining how to handle tupal 1 through 22 because in and a list of things can be less than a list of other things",
    "start": "1532600",
    "end": "1539559"
  },
  {
    "text": "we also support string DB object which is the idea of a document or",
    "start": "1539559",
    "end": "1544720"
  },
  {
    "text": "the Java driver's idea of a mango document which Scola extends in Array",
    "start": "1544720",
    "end": "1550200"
  },
  {
    "text": "but we also have iterable here and then this's this last thing which we're going to dig in a little more detail if you've",
    "start": "1550200",
    "end": "1555760"
  },
  {
    "text": "seen these before but we're saying t is of a type where it's a valid date or numeric type and so we're using type",
    "start": "1555760",
    "end": "1562480"
  },
  {
    "text": "classes here which are new and 28 where suddenly now as long as a user implements a trait that identifies what",
    "start": "1562480",
    "end": "1570200"
  },
  {
    "text": "a valid date or numeric type is now in this case in the current iteration of casba it's basically a featureless",
    "start": "1570200",
    "end": "1576880"
  },
  {
    "text": "filter that it doesn't have information about serializing but the other driver I'm working on which is the async scholar driver you can actually write",
    "start": "1576880",
    "end": "1583960"
  },
  {
    "text": "all the information about how to convert your type to and from format in your type class so that it's all",
    "start": "1583960",
    "end": "1592679"
  },
  {
    "text": "isolated so now you've got user configurable filters and valid date or numeric type as long as there's a",
    "start": "1592679",
    "end": "1601399"
  },
  {
    "text": "definition of this type class for Java util date and it's in scope so this",
    "start": "1601399",
    "end": "1606880"
  },
  {
    "text": "implicit object has to be in scope at runtime as long as it's there the compiler passes anything you call date",
    "start": "1606880",
    "end": "1613840"
  },
  {
    "text": "with into that method because we don't actually do anything with t it's simply",
    "start": "1613840",
    "end": "1618960"
  },
  {
    "text": "there as a filter and the compiler can actually help us by making sure that we don't pass through anything that doesn't",
    "start": "1618960",
    "end": "1625000"
  },
  {
    "text": "work um you can the best way to understand this how I figured out how these things worked was looking at the",
    "start": "1625000",
    "end": "1630240"
  },
  {
    "text": "code for ordering and I think it was ordering was the main one there were a couple things",
    "start": "1630240",
    "end": "1636200"
  },
  {
    "text": "around numeric math operations in the scholar driver in the The Scholar code too but the way that scholar does",
    "start": "1636200",
    "end": "1642320"
  },
  {
    "text": "ordering is in is instead of having hard coding for if you've got a list of strings you sort it this way if you've",
    "start": "1642320",
    "end": "1647919"
  },
  {
    "text": "got a of numbers you sort it this way the if you look at the Java do or the",
    "start": "1647919",
    "end": "1653279"
  },
  {
    "text": "the Scola do sorry for something like sequence the sort method expects something very much like this",
    "start": "1653279",
    "end": "1659519"
  },
  {
    "text": "declaration where it says like T colon ordering what it's saying is that in order to sort a sequence of Foo you must",
    "start": "1659519",
    "end": "1667840"
  },
  {
    "text": "have in scope an implicit ordering of Foo and that type class has all the code",
    "start": "1667840",
    "end": "1673399"
  },
  {
    "text": "on how to compare one Fu to another Fu and decide which one is correct you you also as I've done can use them as very",
    "start": "1673399",
    "end": "1680200"
  },
  {
    "text": "simple filters where they have no implementation they're just there to pass the compiler um and really this",
    "start": "1680200",
    "end": "1686760"
  },
  {
    "text": "allows you to expand and contract what's type safe and it makes it really easy for me to patch things in at you know at",
    "start": "1686760",
    "end": "1692880"
  },
  {
    "text": "another release and it's really easy to talk somebody over email on how to add whatever support they need which I've",
    "start": "1692880",
    "end": "1699120"
  },
  {
    "text": "had people do they have some custom data object or something else that they want to do that seems to be a common thing",
    "start": "1699120",
    "end": "1704640"
  },
  {
    "text": "with with scholar users as they've all come to the conclusion that jdk date really sucks because it doesn't perform",
    "start": "1704640",
    "end": "1709760"
  },
  {
    "text": "well and it's mutable um many of them go to Joda time which we have support out of the box for but I've run into people",
    "start": "1709760",
    "end": "1715360"
  },
  {
    "text": "who've written their own date libraries and I'll bet they all had problems yesterday um I was my you know the",
    "start": "1715360",
    "end": "1721880"
  },
  {
    "text": "happiest I've been in a long time was realizing that the site I wrote years ago that's very dependent on dates",
    "start": "1721880",
    "end": "1728240"
  },
  {
    "text": "actually worked perfectly yesterday and didn't have any hiccups especially because I didn't realize until about 10 o'clock that I should have checked it",
    "start": "1728240",
    "end": "1736799"
  },
  {
    "text": "so this was a first attempt of doing this with manifest and again you know it's a whole block of code and I should",
    "start": "1738360",
    "end": "1743799"
  },
  {
    "text": "have had a zoom on this um manifestor this compile time check they use a little bit of the type classes to filter",
    "start": "1743799",
    "end": "1751559"
  },
  {
    "text": "out at compile time this is generating optimized pass so I'm saying if the class that you're passing to Dollar type",
    "start": "1751559",
    "end": "1758120"
  },
  {
    "text": "is a man has a manifest of string then allow it and the same kind of",
    "start": "1758120",
    "end": "1764360"
  },
  {
    "text": "thing this sort of worked um but it compile it compile time capture so",
    "start": "1764360",
    "end": "1769840"
  },
  {
    "text": "there's situations where something can be compiled and it compiled fine but at runtime there's a different situation",
    "start": "1769840",
    "end": "1775200"
  },
  {
    "text": "maybe it's running on a different jvm or something else and the implicit nature of how manifest Works sort of protects",
    "start": "1775200",
    "end": "1782279"
  },
  {
    "text": "us from calling the method unless the Manifest see or generate a manifest for",
    "start": "1782279",
    "end": "1787919"
  },
  {
    "text": "that type so it's actually a really crappy solution for this and it's funny because I had already used type classes",
    "start": "1787919",
    "end": "1794880"
  },
  {
    "text": "and I posted this code in a gist last year about a week week and a half before scholar dayss is sort of a bragging this",
    "start": "1794880",
    "end": "1801640"
  },
  {
    "text": "is one of the cool things that I'm going to explain how it works at scholar dayss and uh yon Anders Tegan replied to me",
    "start": "1801640",
    "end": "1807080"
  },
  {
    "text": "about 10 minutes later and with this in a gist he says why don't you just use type classes which again because I had",
    "start": "1807080",
    "end": "1814279"
  },
  {
    "text": "already been using type classes I felt rather stupid because it really is a better solution um and again it's got",
    "start": "1814279",
    "end": "1819919"
  },
  {
    "text": "flexibility in this the only way that somebody could add support for a different type would be if they were to",
    "start": "1819919",
    "end": "1825880"
  },
  {
    "text": "edit the code and recompile the library and so here we can Define all the things that we consider to be appropriate but",
    "start": "1825880",
    "end": "1832120"
  },
  {
    "text": "the user still has extension of them so there are context boundaries",
    "start": "1832120",
    "end": "1839519"
  },
  {
    "text": "which is a lot of what we're using um in this case we're defining dollar type and there's an A and A is really the user",
    "start": "1839519",
    "end": "1845880"
  },
  {
    "text": "defined type we're capturing the type that we are looking for as a then we're",
    "start": "1845880",
    "end": "1851600"
  },
  {
    "text": "saying colon Bon type and in this case this is this context boundary when you",
    "start": "1851600",
    "end": "1857080"
  },
  {
    "text": "say type symbol colon Something Else what it's actually looking for is a",
    "start": "1857080",
    "end": "1863159"
  },
  {
    "text": "trait called bon type that takes a type argument of a it's implied the scalar",
    "start": "1863159",
    "end": "1868679"
  },
  {
    "text": "compiler is helping us along here by omitting the a but in order to pass the",
    "start": "1868679",
    "end": "1873960"
  },
  {
    "text": "compile check the compiler has to find an implicit concrete instance of Bon",
    "start": "1873960",
    "end": "1879320"
  },
  {
    "text": "type in scope for the type that you're trying to pass with a and the same thing",
    "start": "1879320",
    "end": "1884440"
  },
  {
    "text": "with manifest and so the scalar compiler as of 28 let let us pull this trick off",
    "start": "1884440",
    "end": "1889639"
  },
  {
    "text": "by just saying a CO and B Sun type and in this case I'm also capturing a manifest for the compile here because",
    "start": "1889639",
    "end": "1896279"
  },
  {
    "text": "there are certain situations where I want to look at the Manifest to print error messages or something",
    "start": "1896279",
    "end": "1902000"
  },
  {
    "text": "else this is the equivalent um there there is one I think it's been fixed in",
    "start": "1902000",
    "end": "1907559"
  },
  {
    "text": "210 or you know but there's a really obnoxious bug in the way that the scolar",
    "start": "1907559",
    "end": "1914080"
  },
  {
    "text": "compiler works you cannot combine these with with your own defined implicit",
    "start": "1914080",
    "end": "1919960"
  },
  {
    "text": "arguments because the scolar compiler currently can't combine the generated implicits with your implicits so it's",
    "start": "1919960",
    "end": "1928200"
  },
  {
    "text": "important to know this because if you look at the phase printouts of Scola this is what actually is generated by",
    "start": "1928200",
    "end": "1935240"
  },
  {
    "text": "that code and so if you ever get the error that you can't combine type classes with",
    "start": "1935240",
    "end": "1940919"
  },
  {
    "text": "implicits you can write your own version of the same thing and this is all that it is and then there's an implicitly",
    "start": "1940919",
    "end": "1946880"
  },
  {
    "text": "operator if you within your body of your code say implicitly a it will give you",
    "start": "1946880",
    "end": "1951919"
  },
  {
    "text": "an instance of the type class for Bon type I'm sorry implicitely Bon type A",
    "start": "1951919",
    "end": "1957679"
  },
  {
    "text": "will actually give you a copy of the Bon type that passed that filter and that's",
    "start": "1957679",
    "end": "1963039"
  },
  {
    "text": "you know slapped in at compile time so quick pop quiz what does this",
    "start": "1963039",
    "end": "1971440"
  },
  {
    "text": "code do anybody I know there's at least three",
    "start": "1971440",
    "end": "1978120"
  },
  {
    "text": "people I've seen in this room who I know know the answer to this so what we're looking at specifically here is insert",
    "start": "1978120",
    "end": "1985639"
  },
  {
    "text": "and we're declaring our type is a less than percent of DB object so hopefully most of you have seen less than colon of",
    "start": "1985639",
    "end": "1992320"
  },
  {
    "text": "DB object which says that a can be any type that's a subass of DB",
    "start": "1992320",
    "end": "1998519"
  },
  {
    "text": "object less than percent is a little bit different and in this case it's a I think I may have the wrong term I call",
    "start": "1998519",
    "end": "2004760"
  },
  {
    "text": "them view boundaries I could be completely wrong corre it's a view bound okay cuz I think somebody told me I had",
    "start": "2004760",
    "end": "2009919"
  },
  {
    "text": "the wrong term previously this has a little bit of extra info that a normal boundary",
    "start": "2009919",
    "end": "2018159"
  },
  {
    "text": "doesn't which is that it flattens out the compile time with some extra",
    "start": "2018159",
    "end": "2024039"
  },
  {
    "text": "information and here's the trick if I had declared this as a less than colon",
    "start": "2024039",
    "end": "2029679"
  },
  {
    "text": "DB object unless a was actually a DB object it physically extended DB object",
    "start": "2029679",
    "end": "2036760"
  },
  {
    "text": "or implemented DB object object since it's a it's an interface it cannot pass this if you have an implicit method or",
    "start": "2036760",
    "end": "2045039"
  },
  {
    "text": "you have an implicit conversion that knows how to convert a into a DB object in an a less than percent DB object it",
    "start": "2045039",
    "end": "2052000"
  },
  {
    "text": "will not pass but if you use a view boundary where you say less than percent DB object you tell the scholar compiler",
    "start": "2052000",
    "end": "2059679"
  },
  {
    "text": "that it's okay to use an implicit conversion to pass this method through",
    "start": "2059679",
    "end": "2065720"
  },
  {
    "text": "and so at compile time what it actually looks at is that the type is really just flat a now and there's an extra implicit",
    "start": "2065720",
    "end": "2072000"
  },
  {
    "text": "what it's saying is that it requires an implicit method that knows how to convert a to DB",
    "start": "2072000",
    "end": "2077919"
  },
  {
    "text": "object same thing this is also very helpful if you want to use a view boundary along with your own defined",
    "start": "2077919",
    "end": "2083679"
  },
  {
    "text": "implicit methods because in 29 and below the compiler can't combine these things",
    "start": "2083679",
    "end": "2088760"
  },
  {
    "text": "so now this is a big deal because we have in a lot of cases people write say Maps they don't actually generate a",
    "start": "2088760",
    "end": "2094200"
  },
  {
    "text": "mongodb object they just build a map and there's an implicit conversion of a on the driver and or they're using some",
    "start": "2094200",
    "end": "2101280"
  },
  {
    "text": "custom object a lot of people have rolled their own simple OMS or odms without touching the DB object and they",
    "start": "2101280",
    "end": "2107280"
  },
  {
    "text": "need a way to convert in certain methods but you as a library author actually have control I think this is really",
    "start": "2107280",
    "end": "2113119"
  },
  {
    "text": "important it's not just implicits for everyone it's you as a library author having control over when implicits can",
    "start": "2113119",
    "end": "2119359"
  },
  {
    "text": "happen implicitly otherwise they would have to explicitly invoke this and say I",
    "start": "2119359",
    "end": "2124480"
  },
  {
    "text": "want to convert this to a DB object there's a quick look at something um I don't not I thought I understood",
    "start": "2124480",
    "end": "2131119"
  },
  {
    "text": "this and then I was reviewing my slides beforehand and I'm not sure I understand how it works I sort of do um but about",
    "start": "2131119",
    "end": "2138040"
  },
  {
    "text": "two weeks ago I got a PLL request from John Anders who just likes to make me look bad by fixing my code um I don't",
    "start": "2138040",
    "end": "2143880"
  },
  {
    "text": "think he's using for anything right now either um where he picked up a trick from my Sabin who is also doing",
    "start": "2143880",
    "end": "2149800"
  },
  {
    "text": "some miles is doing some really cool work with heterogenous lists in schola which if you're going to any schola next",
    "start": "2149800",
    "end": "2155880"
  },
  {
    "text": "week track miles down down and get him to explain it CU it's actually really cool he's figured out some cool tricks",
    "start": "2155880",
    "end": "2161319"
  },
  {
    "text": "with the compiler to have type safe heterogenous lists to do you know the kinds of things that I wish I could have",
    "start": "2161319",
    "end": "2167520"
  },
  {
    "text": "been able to do months ago um I don't know if is he doing a talk on it yeah he's doing oh great cool I",
    "start": "2167520",
    "end": "2174680"
  },
  {
    "text": "wasn't sure if he was or not um the uh that' be good because I I",
    "start": "2174680",
    "end": "2180000"
  },
  {
    "text": "spoke to him about it in London at one point um and he was still you know ironing out the bugs but",
    "start": "2180000",
    "end": "2187040"
  },
  {
    "text": "I know he's talking about it publicly lately so Miles knows all sorts of cool and clever tricks on this stuff so the",
    "start": "2187040",
    "end": "2193599"
  },
  {
    "text": "Manifest are really good for type safety but they sort of suck when the type parameter is not populated so I've got",
    "start": "2193599",
    "end": "2199839"
  },
  {
    "text": "that I've got a method called get as that's build SP and you can say get as",
    "start": "2199839",
    "end": "2206760"
  },
  {
    "text": "and pass a where a is a type but the compiler does not require the developer",
    "start": "2206760",
    "end": "2212760"
  },
  {
    "text": "to actually populate a if they don't fill a in it will try to to infer it so",
    "start": "2212760",
    "end": "2219560"
  },
  {
    "text": "you can actually say Val X colon string equals doc. Getz Fu and it can infer",
    "start": "2219560",
    "end": "2225760"
  },
  {
    "text": "that a should be string but if they say Val x equals doc get as Fu with no type argument the compiler will substitute",
    "start": "2225760",
    "end": "2233400"
  },
  {
    "text": "nothing if you should you remember the scaletype tree nothing is the very bottom of the tree and so there is a bug",
    "start": "2233400",
    "end": "2240319"
  },
  {
    "text": "that comes up occasionally which is I keep getting this error that nothing doesn't",
    "start": "2240319",
    "end": "2245920"
  },
  {
    "text": "work and you know this is you know from an early feature request and this was actually I",
    "start": "2245920",
    "end": "2252200"
  },
  {
    "text": "think Rose who asked for this Rose wanted to not have to call as instance of so she gets the blame I've had support for get ass",
    "start": "2252200",
    "end": "2259839"
  },
  {
    "text": "um I did at one point add something that does a require so I do check my",
    "start": "2259839",
    "end": "2265599"
  },
  {
    "text": "invariance that the Manifest for a is not nothing but this is a runtime check",
    "start": "2265599",
    "end": "2271760"
  },
  {
    "text": "so by the time this is being thrown at your users in production it's too late to fix the problem",
    "start": "2271760",
    "end": "2278400"
  },
  {
    "text": "it's also not I mean I did try to put a little example of the code here to hint that what they're doing wrong and I",
    "start": "2278400",
    "end": "2284359"
  },
  {
    "text": "didn't think there was any way to fix this if you you know failed to put something in um if you know there's a",
    "start": "2284359",
    "end": "2290800"
  },
  {
    "text": "check in the in the test or there was that said you know where you do this and it will throw illegal argument",
    "start": "2290800",
    "end": "2297560"
  },
  {
    "text": "exception this is what yon Anders sent me and like I said I thought I understood this earlier but I don't think I understand it now to be fair",
    "start": "2297560",
    "end": "2305839"
  },
  {
    "text": "um and this used his ambiguity so he's actually declared a not nthing type class and not he's got a nothing and I",
    "start": "2305839",
    "end": "2314640"
  },
  {
    "text": "believe what's happening is because nothing isn't the right shape to pass this get as where it's actually defined",
    "start": "2314640",
    "end": "2319920"
  },
  {
    "text": "as nothing it won't pass but anything that's actually a valid type will pass",
    "start": "2319920",
    "end": "2326599"
  },
  {
    "text": "through like I said I thought I understood it now I'm not so sure I did but it removes the need for that runtime",
    "start": "2326599",
    "end": "2333800"
  },
  {
    "text": "check this actually this statement fails to compile now because it's not possible to invoke",
    "start": "2333800",
    "end": "2341119"
  },
  {
    "text": "DB obge with nothing so there all all sorts of hidden tricks and the trick is",
    "start": "2341119",
    "end": "2346800"
  },
  {
    "text": "to just paste gists so that yon Anders can find them and show you why you're wrong um you know at one point this is",
    "start": "2346800",
    "end": "2354640"
  },
  {
    "text": "real quick I you know we did rename this this obvious called Kason now um we it wasn't just a rapper anymore and some",
    "start": "2354640",
    "end": "2361119"
  },
  {
    "text": "like co-workers thought it needed a new name and nobody could come up with anything and so I was listening to the radio on the way to work and I am a fan",
    "start": "2361119",
    "end": "2367240"
  },
  {
    "text": "of The Clash and so uh it stuck um one note on where you work I",
    "start": "2367240",
    "end": "2375480"
  },
  {
    "text": "jokingly repeatedly asked for a pony at work and so they actually bought me a stuffed Pony and told me to stop asking",
    "start": "2375480",
    "end": "2382319"
  },
  {
    "text": "for a pony I started asking for other ridiculous things and didn't get them so",
    "start": "2382319",
    "end": "2388000"
  },
  {
    "text": "doesn't help but yet really you know working both at uh tenent and Nova so me working with people who are supportive",
    "start": "2388000",
    "end": "2393680"
  },
  {
    "text": "when you're doing open source work and all these other things makes a huge difference in what you're doing so real quick speaking of",
    "start": "2393680",
    "end": "2401200"
  },
  {
    "text": "ponies I want to talk a little bit about dog food and if anybody remembers there's an",
    "start": "2401200",
    "end": "2406880"
  },
  {
    "text": "old it was like Lauren Green I think who did an albo commercial about how you know he believes so much in the product",
    "start": "2406880",
    "end": "2412400"
  },
  {
    "text": "he's pitching that he feeds it to his own dogs and then they had video of his dogs eating what was supposed to be Alpo but",
    "start": "2412400",
    "end": "2418839"
  },
  {
    "text": "probably wasn't so there is I mean there's a big difference between fixing bugs in production and shipping libraries to",
    "start": "2418839",
    "end": "2424560"
  },
  {
    "text": "users um type inference for me was a total mess all the things I was trying to do with product and other things but",
    "start": "2424560",
    "end": "2430839"
  },
  {
    "text": "they worked perfectly fine in my code base as soon as I released it to the world people wanted to know what I was smoking as I said um so eating your own",
    "start": "2430839",
    "end": "2439079"
  },
  {
    "text": "dog food is great but it can make you complacent and I only implemented the mango features I was using so one of the",
    "start": "2439079",
    "end": "2444400"
  },
  {
    "text": "first things I did when I got to tenen was realizing that I only implemented like four of the operators in the type",
    "start": "2444400",
    "end": "2449480"
  },
  {
    "text": "DSL because those were the only ones I was using and there were like 25 other ones that people wanted to use which is",
    "start": "2449480",
    "end": "2456319"
  },
  {
    "text": "why there's a thousand tests for this because I made sure there was full test coverage because I don't use a lot of those features so I didn't have code to",
    "start": "2456319",
    "end": "2462280"
  },
  {
    "text": "test them against um sometimes it was only the way I was using them which often was incorrect uh it turned out",
    "start": "2462280",
    "end": "2468599"
  },
  {
    "text": "that I don't know everything as much as I'd like to think so so I've spent a lot of time writing code probably about 15",
    "start": "2468599",
    "end": "2475000"
  },
  {
    "text": "years now and for a long time I thought tests were a really good idea and never actually had time to do them that's one",
    "start": "2475000",
    "end": "2480240"
  },
  {
    "text": "thing in schola that you have no excuse for not writing good tests because there's fantastic testing",
    "start": "2480240",
    "end": "2485640"
  },
  {
    "text": "libraries um the reality as well is that you you can keep telling your boss when you're doing a production system that",
    "start": "2485640",
    "end": "2491319"
  },
  {
    "text": "you want to write tests because you keep having to fix stuff at 3:00 a.m. and uh he tells you to shut up and code so",
    "start": "2491319",
    "end": "2497319"
  },
  {
    "text": "unless we want to have a new career flipping burgers sometimes we just have to smile and bear it but it's worth",
    "start": "2497319",
    "end": "2503760"
  },
  {
    "text": "learning to write good tests because if you do them as part of what you're building it makes a big difference um if",
    "start": "2503760",
    "end": "2509720"
  },
  {
    "text": "you're planning to give code to other people eating your own dog food is not enough this is contingent that you care",
    "start": "2509720",
    "end": "2515599"
  },
  {
    "text": "about your users and your code qual um there's certainly lots of vendors out there that don't seem to care about",
    "start": "2515599",
    "end": "2520760"
  },
  {
    "text": "their users or their code quality I care it's you know this artifact that I'm producing that's some kind of you know",
    "start": "2520760",
    "end": "2526200"
  },
  {
    "text": "thing that people are supposed to judge me by you know the world of GitHub is you know your resume is your",
    "start": "2526200",
    "end": "2531800"
  },
  {
    "text": "code so taking the time to learn tests is good um I really do love the tools in scholar so I used scholar test early on",
    "start": "2531800",
    "end": "2538640"
  },
  {
    "text": "uh Bill veners cornered me at one point because I sort of made a vague statement about not using scholar test anymore and",
    "start": "2538640",
    "end": "2543720"
  },
  {
    "text": "couldn't remember why and afterwards I remember the reason was simp scholar test has like 10 or 15 different",
    "start": "2543720",
    "end": "2549520"
  },
  {
    "text": "ways to develop tests they're all awesome we had five developers all who were writing their tests using a",
    "start": "2549520",
    "end": "2555079"
  },
  {
    "text": "different thing and the reason we went to Specs was at the time there was only one right to write a spec and this was",
    "start": "2555079",
    "end": "2560240"
  },
  {
    "text": "our solution for this will stop everyone from picking the test format they want understanding that we were trying",
    "start": "2560240",
    "end": "2566640"
  },
  {
    "text": "to solve a social problem with software which doesn't help but in this case um specs and specs 2 is awesome I",
    "start": "2566640",
    "end": "2573240"
  },
  {
    "text": "especially when I converted to Specs 2 I found so many weird bugs Corner cases in",
    "start": "2573240",
    "end": "2578280"
  },
  {
    "text": "the Caspa code that I had no idea could happen and so the the technology there",
    "start": "2578280",
    "end": "2583880"
  },
  {
    "text": "and the way that the tests are put together really fantastic and everybody keeps telling me scholar Chuck is",
    "start": "2583880",
    "end": "2589680"
  },
  {
    "text": "wonderful I've never had time to play with it yet I'll probably regret this since I just said that you should learn the tools and use them um there are some",
    "start": "2589680",
    "end": "2596800"
  },
  {
    "text": "stuff for fuzzing and every and other things that I know are really good and it's in my plan to dig into them now",
    "start": "2596800",
    "end": "2602079"
  },
  {
    "text": "that I've got a little more time it also helps you've got to have integration tests and this is something that I've",
    "start": "2602079",
    "end": "2607359"
  },
  {
    "text": "been burned by I did a whole lot of unit tests that test can I construct a DB object and pull things in fact he",
    "start": "2607359",
    "end": "2613599"
  },
  {
    "text": "pointed out to me somewhere where I had a unit test that was not an integration test an integration test would have been",
    "start": "2613599",
    "end": "2619319"
  },
  {
    "text": "can I save that object to read it back from and it comes out the way",
    "start": "2619319",
    "end": "2625440"
  },
  {
    "text": "I expect it to be and you have to have integration test if there's any network or anything else between you and part of",
    "start": "2625440",
    "end": "2630960"
  },
  {
    "text": "your code that has to be part of that cycle and it's a mistake that I made so I had a lot of things where I get",
    "start": "2630960",
    "end": "2636040"
  },
  {
    "text": "support requests and I go there's no way that doesn't work it works in my tests if your tests aren't correct you're",
    "start": "2636040",
    "end": "2642359"
  },
  {
    "text": "screwed um you should however be nice to users I learned this to be fair I learned this from Lyft Lyft has a bunch",
    "start": "2642359",
    "end": "2649319"
  },
  {
    "text": "of optional database support all of those are really good at detecting whether or not the database that it",
    "start": "2649319",
    "end": "2655440"
  },
  {
    "text": "needs to test against is installed and skipping the test if it's not because users don't want to have or developers",
    "start": "2655440",
    "end": "2661720"
  },
  {
    "text": "don't want to have to install every database even if they're not using it and they don't want to get a bunch of other messages they don't understand and",
    "start": "2661720",
    "end": "2667280"
  },
  {
    "text": "all of these tools have good ways of detecting this stuff um so I mean some of this I'm",
    "start": "2667280",
    "end": "2674040"
  },
  {
    "text": "going to just skip over because it's repeating what I've just said but higher coverage really does relate to less bugs",
    "start": "2674040",
    "end": "2679920"
  },
  {
    "text": "and that's a good thing it means more time you can spend writing new code instead of fixing bugs in Old code so",
    "start": "2679920",
    "end": "2685119"
  },
  {
    "text": "who wants to shave a yak because I'm apparently not allowed to saw Oracle employees in half on stage",
    "start": "2685119",
    "end": "2691920"
  },
  {
    "text": "anymore um I'm also not allowed to bring a yak on an airplane so this is a metaphorical yak and this is a real",
    "start": "2691920",
    "end": "2698280"
  },
  {
    "text": "quick um naring a yak which is one of the things that happened when I moved to",
    "start": "2698280",
    "end": "2703920"
  },
  {
    "text": "Specs 2 was realizing that I can't just treat Mongo's DB objects as if they're a map because there are other attributes",
    "start": "2703920",
    "end": "2710920"
  },
  {
    "text": "of them that aren't and there's a bunch of other code I was writing on my test so what I ended up doing and you can't",
    "start": "2710920",
    "end": "2717400"
  },
  {
    "text": "read this because it's too small because I can't be bothered to split into multiple slides for everyone's convenience um it's all about my",
    "start": "2717400",
    "end": "2723559"
  },
  {
    "text": "convenience the idea here though is this is actually a base set of matchers for",
    "start": "2723559",
    "end": "2729119"
  },
  {
    "text": "specs 2 Bill veners contributed one for SC um scholet test as well which in the 3.0 release will be available for",
    "start": "2729119",
    "end": "2736359"
  },
  {
    "text": "everyone we use them in every single test for kasbo 3 and there are matchers where every single one of them is",
    "start": "2736359",
    "end": "2742720"
  },
  {
    "text": "designed to properly test values coming from and account for all of the",
    "start": "2742720",
    "end": "2747800"
  },
  {
    "text": "edge cases so that you can be absolutely sure that your code is correct I started",
    "start": "2747800",
    "end": "2752960"
  },
  {
    "text": "with I'm going to convert to Specs 2 and then spent a month and a half like 18 hours a day rewriting tons and tons of",
    "start": "2752960",
    "end": "2758640"
  },
  {
    "text": "code to fix bugs put testing in place it's actually a good thing though so these will be available because I",
    "start": "2758640",
    "end": "2764480"
  },
  {
    "text": "learned the value of taking my test tools and turning them outwards to other people and then finally um there's a bit",
    "start": "2764480",
    "end": "2771760"
  },
  {
    "text": "of an epilog which is something that people keep asking to see and actually this wasn't in the talk originally and",
    "start": "2771760",
    "end": "2777280"
  },
  {
    "text": "over lunch at Scholars last year Jonas Bonaire and Victor Clan convinced me to like show this new thing that I was",
    "start": "2777280",
    "end": "2782480"
  },
  {
    "text": "working on which is you know I'm still working on Caspa I'm still evolving it there are plenty of people that are using and it's never going to go away",
    "start": "2782480",
    "end": "2788760"
  },
  {
    "text": "but there are also other ideas that I want to explore and that people really want one of which is asynchronous there's all these cool asynchronous",
    "start": "2788760",
    "end": "2795000"
  },
  {
    "text": "libraries out there but when you have a driver that's written asynchronously it does things like blocking when it's waiting for network code and that",
    "start": "2795000",
    "end": "2802079"
  },
  {
    "text": "doesn't always work in an async framework so I started playing with well it would be really cool to implement some of this stuff in pure Scala and do",
    "start": "2802079",
    "end": "2808040"
  },
  {
    "text": "it asynchronously which is where Hammersmith came from also another Clash reference not named after the Tube",
    "start": "2808040",
    "end": "2813440"
  },
  {
    "text": "Station in London um but it makes convenient you know coffee mugs for the project so this is really taking",
    "start": "2813440",
    "end": "2819880"
  },
  {
    "text": "everything I've learned over two years and building a better driver I mean cbot I can only do so much rewriting I can't completely change apis from the ground",
    "start": "2819880",
    "end": "2826359"
  },
  {
    "text": "up without upsetting users and breaking things but this is a chance to redo it and so the only thing that's left from",
    "start": "2826359",
    "end": "2833160"
  },
  {
    "text": "java is the bson code because that's one thing that works fine and doesn't block and there's no need to reinvent the",
    "start": "2833160",
    "end": "2838480"
  },
  {
    "text": "wheel everything else is from the ground up it's NY based it's moving to be pure nio the problem with being NY based is",
    "start": "2838480",
    "end": "2845240"
  },
  {
    "text": "if you want to plug into somebody else's container or even um AA ships a version of Hammersmith right now so that there's",
    "start": "2845240",
    "end": "2851359"
  },
  {
    "text": " uh durable mailboxes and I got I get emails every couple releases from Victor or someone",
    "start": "2851359",
    "end": "2858160"
  },
  {
    "text": "else over there of hey uh you're using a different version of netti that we are than we are in this release and it's causing breakage what that's led me to",
    "start": "2858160",
    "end": "2864960"
  },
  {
    "text": "realize is that if I want to interoperate with other people I have to dump netti so I'm going to move to Pure nio simply for the interaction um this",
    "start": "2864960",
    "end": "2872520"
  },
  {
    "text": "isn't a replacement for Casa though and it's focused more this isn't true",
    "start": "2872520",
    "end": "2877559"
  },
  {
    "text": "anymore originally part of the uh part of the argument I had to make to get approval to work on this on my time was",
    "start": "2877559",
    "end": "2885000"
  },
  {
    "text": "swearing that I wasn't going to make this for user space it was only for web Frameworks it's not the case anymore mostly because other people have",
    "start": "2885000",
    "end": "2890960"
  },
  {
    "text": "contributed good code to use it from userspace um there's going to probably also be a synchronous facade on top of",
    "start": "2890960",
    "end": "2898240"
  },
  {
    "text": "it and we're going to have Java support as well tenen is starting to do a lot of work on asynchronous drivers it's",
    "start": "2898240",
    "end": "2904720"
  },
  {
    "text": "something you'll start seeing this year obviously we have support for nodejs now we're adding an asynchronous python",
    "start": "2904720",
    "end": "2910000"
  },
  {
    "text": "driver we're working on things for Ruby and c and other things so this fits really well into I already had one going",
    "start": "2910000",
    "end": "2916559"
  },
  {
    "text": "for the jvm and the easiest way to get one for Java is just put a Java API on top of it um if you've looked at the",
    "start": "2916559",
    "end": "2921960"
  },
  {
    "text": "stuff stuff type safe offers like play and AA they're written in Scola but they have really good Java apis on top of",
    "start": "2921960",
    "end": "2928400"
  },
  {
    "text": "them so there is examples of how to do it well out there that I'm planning to leverage and then using things like",
    "start": "2928400",
    "end": "2933520"
  },
  {
    "text": "continuations Andor AA to make this appear synchronous for people who want it and trying to share as much code as I",
    "start": "2933520",
    "end": "2941839"
  },
  {
    "text": "can so this is a quick look at how it works and again um I misjudged how big",
    "start": "2941839",
    "end": "2946960"
  },
  {
    "text": "the projector was going to be can you guys get me a bigger TV can we wait a few minutes um",
    "start": "2946960",
    "end": "2953400"
  },
  {
    "text": "generally the idea here though is this is literally all call back based and it's probably easier at this point for",
    "start": "2953400",
    "end": "2959559"
  },
  {
    "text": "me to post the slides online and you to dig into this on your own um but the general idea here is we are using",
    "start": "2959559",
    "end": "2965480"
  },
  {
    "text": "iterate e so iter have been a big deal over the last year in the scholar world I think I heard I haven't read it yet",
    "start": "2965480",
    "end": "2971319"
  },
  {
    "text": "but I think Josh seret just wrote what's supposed to be a really good post explaining iterates which is good because I'm going to explain iterates in",
    "start": "2971319",
    "end": "2977160"
  },
  {
    "text": "my talk next week and I haven't figured out the best way to explain them to people so I'm just going to steal Josh's content but the idea is um for doing",
    "start": "2977160",
    "end": "2985319"
  },
  {
    "text": "something like this here iterating A cursor you know it's a chain of calls so",
    "start": "2985319",
    "end": "2991680"
  },
  {
    "text": "I'm finding from the inventory collection but I'm actually I decided for cleanness to use use multiple",
    "start": "2991680",
    "end": "2997640"
  },
  {
    "text": "argument lists so I separate out what collection do you want to work on from what's your query and what's your field",
    "start": "2997640",
    "end": "3003359"
  },
  {
    "text": "filter in this case they're empty um but the problem that I that turns out with an asynchronous networking framework is",
    "start": "3003359",
    "end": "3010000"
  },
  {
    "text": "often the thread that you're called back on to say that your initial request is ready you cannot block on that and so",
    "start": "3010000",
    "end": "3016520"
  },
  {
    "text": "the way that a database works and works the same way is that you have a cursor and so your initial",
    "start": "3016520",
    "end": "3023559"
  },
  {
    "text": "request comes back with a small batch of some of the items and a cursor ID and so",
    "start": "3023559",
    "end": "3029799"
  },
  {
    "text": "internally you buffer up those items you got and you start iterating over them when people call next on your iterator",
    "start": "3029799",
    "end": "3036160"
  },
  {
    "text": "and when that buffer is empty or in a smart driver sometime before it's empty you predict that it's going to be empty",
    "start": "3036160",
    "end": "3042359"
  },
  {
    "text": "and start the work when it's empty if you know that there are more documents on the server you go to the server and",
    "start": "3042359",
    "end": "3048319"
  },
  {
    "text": "ask for more so in an initial version of this I did one of these I'll just put a thread do sleep here for a few minutes",
    "start": "3048319",
    "end": "3055240"
  },
  {
    "text": "until I figure out what the structure of this code is going to do about three hours of yelling at my laptop I was",
    "start": "3055240",
    "end": "3060920"
  },
  {
    "text": "halfway on the home on the train and I went oh because I was blocking the",
    "start": "3060920",
    "end": "3066160"
  },
  {
    "text": "thread that was waiting for the reply so I called get more and then I called thread. Sleep waiting for the call back",
    "start": "3066160",
    "end": "3072400"
  },
  {
    "text": "to happen but it was blocking that thread from coming back so the trick is how do you actually handle basically in",
    "start": "3072400",
    "end": "3078599"
  },
  {
    "text": "instead of a dual State iteration a TR State iteration where you're not allowed to block and so the",
    "start": "3078599",
    "end": "3084720"
  },
  {
    "text": "answer is iterate e which I think the best answer is probably to read Josh's post on how this works but the general",
    "start": "3084720",
    "end": "3090200"
  },
  {
    "text": "idea is instead of Simply Having a next method what you do is you define you",
    "start": "3090200",
    "end": "3095799"
  },
  {
    "text": "define a method that you give to the iterate caller and your method expects",
    "start": "3095799",
    "end": "3101760"
  },
  {
    "text": "to get an argument of an iteration State and you return an iteration command so",
    "start": "3101760",
    "end": "3107839"
  },
  {
    "text": "in this case there's three states there's here's an element you know",
    "start": "3107839",
    "end": "3113000"
  },
  {
    "text": "you're calling next and this method is called every time next is called here's an element you know there's actually",
    "start": "3113000",
    "end": "3118040"
  },
  {
    "text": "something here for you um there's nothing left on the client side but I've got some more data on the server what",
    "start": "3118040",
    "end": "3125000"
  },
  {
    "text": "would you like me to do so the answer to here's an element is typically the command next and that",
    "start": "3125000",
    "end": "3132760"
  },
  {
    "text": "command next says just give the next element and call me again the typical response to there's no more on the",
    "start": "3132760",
    "end": "3139359"
  },
  {
    "text": "client but the server claims it has some is next batch and you call next batch",
    "start": "3139359",
    "end": "3145720"
  },
  {
    "text": "with a copy of your yourself the method that's going to be called when that batch comes back and so then the",
    "start": "3145720",
    "end": "3151520"
  },
  {
    "text": "framework can go out call for the next batch and whenever that batch arrives it can just start calling this method again",
    "start": "3151520",
    "end": "3158680"
  },
  {
    "text": "and iterate and then the final state is eof eof is end of file there's no more",
    "start": "3158680",
    "end": "3164799"
  },
  {
    "text": "data on the client there's no more data on the servers what do you want me to do there's really only one appropriate",
    "start": "3164799",
    "end": "3170640"
  },
  {
    "text": "response to this which is done and done says close out the call back chain shut",
    "start": "3170640",
    "end": "3176200"
  },
  {
    "text": "down any resources you need and prepare them for GC you know there's not really anything else you can do but you can",
    "start": "3176200",
    "end": "3181480"
  },
  {
    "text": "take this model and use it anywhere you have this idea suddenly of multiple States and your call back is given a",
    "start": "3181480",
    "end": "3189400"
  },
  {
    "text": "state and it can give a command here's what I want you to do with this state um in this case this code in this test is",
    "start": "3189400",
    "end": "3197040"
  },
  {
    "text": "actually only looking at the first 100 entries and calling cursor next but if there's more than 100 entries have been",
    "start": "3197040",
    "end": "3203240"
  },
  {
    "text": "red it calls cursor done so you can give a different command you have full control over what happens here and so",
    "start": "3203240",
    "end": "3209599"
  },
  {
    "text": "this allows this to be completely asynchronous but still makes some",
    "start": "3209599",
    "end": "3215440"
  },
  {
    "text": "sense um more you know sort of looking at how all this works now the big thing and the last thing I'm going to show is",
    "start": "3215440",
    "end": "3221720"
  },
  {
    "text": "that I did this all with type classes so instead of having some separate area where you register here's how I reg how",
    "start": "3221720",
    "end": "3228480"
  },
  {
    "text": "here's how you serialize and deserialize a foo number instead everything every",
    "start": "3228480",
    "end": "3234520"
  },
  {
    "text": "method in Hammersmith is looking for for the type class serializable Bon object",
    "start": "3234520",
    "end": "3240839"
  },
  {
    "text": "even our implementation of a DB object in Hammersmith is the type class so",
    "start": "3240839",
    "end": "3246359"
  },
  {
    "text": "everything uses it there's no hardcoded I have to have a DB object except in a few cases where it's the only right",
    "start": "3246359",
    "end": "3251920"
  },
  {
    "text": "answer so what you actually can do here is you can simply write the code to improve it this is a first pass",
    "start": "3251920",
    "end": "3258720"
  },
  {
    "text": "implementation it's going to be much easier in the next iteration but the general idea is decoupling youve got the",
    "start": "3258720",
    "end": "3264000"
  },
  {
    "text": "law of Dem meter everything should be separated out so that you have a type class that says you can just plug this",
    "start": "3264000",
    "end": "3269200"
  },
  {
    "text": "in it also means in the Java driver right now you have to do a global registration of any serialization deer",
    "start": "3269200",
    "end": "3274880"
  },
  {
    "text": "serialization that sucks especially if you've got a couple different contexts running in your VM or something else",
    "start": "3274880",
    "end": "3280480"
  },
  {
    "text": "having a global can make it very very difficult and so this really works off",
    "start": "3280480",
    "end": "3285520"
  },
  {
    "text": "everything is looking for an implicit serializable bson object and it can call that serializes will beon object",
    "start": "3285520",
    "end": "3292400"
  },
  {
    "text": "the implicit to find out how to turn Fubar number into what needs to be there",
    "start": "3292400",
    "end": "3297480"
  },
  {
    "text": "to serialize and then back again so this is you know very briefly",
    "start": "3297480",
    "end": "3306000"
  },
  {
    "text": "um way too much content for one slide but this is becoming a priority for me",
    "start": "3306000",
    "end": "3311319"
  },
  {
    "text": "again last few months I've been traveling I was in Europe doing a lot of conferences and talks and training and Consulting and had very little time to",
    "start": "3311319",
    "end": "3317799"
  },
  {
    "text": "work on code one of the things that fell behind is this although I'm starting to work on it again um like any other open",
    "start": "3317799",
    "end": "3322839"
  },
  {
    "text": "source project it always benefits from contributors there's lots of people who keep saying they're really interested and excited to see this project done but",
    "start": "3322839",
    "end": "3329319"
  },
  {
    "text": "don't send me any code to help me get it done um so if you're very interested in this I mean couple guys Havoc Pennington",
    "start": "3329319",
    "end": "3334920"
  },
  {
    "text": "Rose uh Geral sites have done some really good work on moving this forward initially um this could be a really cool",
    "start": "3334920",
    "end": "3340440"
  },
  {
    "text": "tool and there's lots of work that needs to be looked at reporting to AA we Havoc",
    "start": "3340440",
    "end": "3345880"
  },
  {
    "text": "did a first pass I'm still looking at seeing if it makes sense um looking at delimited continuation to create that",
    "start": "3345880",
    "end": "3351599"
  },
  {
    "text": "emulated synchronous API integrating with things like lift and salot",
    "start": "3351599",
    "end": "3356720"
  },
  {
    "text": "documentation tests some other brilliant idea that I don't have the SM else is going to come up with the same thing",
    "start": "3356720",
    "end": "3363359"
  },
  {
    "text": "applies really to C on everything else so the answer of course is send me a poll",
    "start": "3363359",
    "end": "3369520"
  },
  {
    "text": "request that's all of the rambling that I have for tonight um but if you stay for the second act we can start this",
    "start": "3369520",
    "end": "3375599"
  },
  {
    "text": "over I have a wonderful presentation on how functional programming Works questions if no you know nobody",
    "start": "3375599",
    "end": "3382079"
  },
  {
    "text": "seems to have run out crying yet so that's a good sign yourself and uh thank you very much much",
    "start": "3382079",
    "end": "3389359"
  },
  {
    "text": "[Music]",
    "start": "3394430",
    "end": "3402739"
  }
]