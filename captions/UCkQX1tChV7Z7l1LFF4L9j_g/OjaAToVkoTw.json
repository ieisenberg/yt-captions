[
  {
    "text": "[Music]",
    "start": "1990",
    "end": "14789"
  },
  {
    "text": "okay well I guess we'll just let everyone else trickle in the last if we go by the usual attrition rate we'll have another 10 15 people over the",
    "start": "15200",
    "end": "22480"
  },
  {
    "text": "evening um okay so uh thanks for coming guys I have no",
    "start": "22480",
    "end": "28439"
  },
  {
    "text": "idea how this is all going to go down because I finished these slides about two minutes before I drove over here um",
    "start": "28439",
    "end": "34719"
  },
  {
    "text": "and I you know so but I got plenty of code we can do and I can add more code um not sure how long this will take but",
    "start": "34719",
    "end": "41320"
  },
  {
    "text": "we'll go by you know whatever your interests are um so the goal of tonight is to just",
    "start": "41320",
    "end": "49840"
  },
  {
    "text": "give you an idea of the core mechanisms behind virtual machines you know Java",
    "start": "49840",
    "end": "55120"
  },
  {
    "text": "has a virtual machine uh python Ruby a lot of these fun you know languages that",
    "start": "55120",
    "end": "60440"
  },
  {
    "text": "you're using um and JavaScript ultimately or originally was uh purely an interpreted language um this will",
    "start": "60440",
    "end": "68360"
  },
  {
    "text": "give you an idea of how all these things are built yeah maybe close that and despite being really really simple",
    "start": "68360",
    "end": "76640"
  },
  {
    "text": "the virtual machine I'm showing you tonight is actually modulo efficiency exactly what I built the",
    "start": "76640",
    "end": "83880"
  },
  {
    "text": "first time I built a commercial interpreter 25 years ago I built a a machine very similar or similar to what",
    "start": "83880",
    "end": "90159"
  },
  {
    "text": "we have here tonight that was building cars in France you know with these robot controllers for many years word to the",
    "start": "90159",
    "end": "96880"
  },
  {
    "text": "wise don't buy a Rena car from like 1989 and 93 um I guess there's no danger of that",
    "start": "96880",
    "end": "103759"
  },
  {
    "text": "now uh okay so feel free to ask questions",
    "start": "103759",
    "end": "112360"
  },
  {
    "text": "interrupt send me on a tangent whatever um so I'm kind of not going to assume",
    "start": "112360",
    "end": "117520"
  },
  {
    "text": "you know anything except programming uh as we go through here so bear with me if if you happen to be an expert in this so",
    "start": "117520",
    "end": "125399"
  },
  {
    "text": "our goal of virtual machine and by virtual machine I don't mean something that you can spool up at Amazon to create a new like Linux box right this",
    "start": "125399",
    "end": "131840"
  },
  {
    "text": "is a virtual machine that is really a simulation of uh a simple computer that we use to execute code so why do we want",
    "start": "131840",
    "end": "139200"
  },
  {
    "text": "one of these things well obviously if I'm trying to implement a programming language um Java the first time or any",
    "start": "139200",
    "end": "144840"
  },
  {
    "text": "other language I've got to be able to execute it somehow right a computer does not inherently understand Java or C or",
    "start": "144840",
    "end": "151000"
  },
  {
    "text": "python or anything so we have to have some way to get that highle language",
    "start": "151000",
    "end": "156440"
  },
  {
    "text": "down into something the computer understands now a traditional compiler will take that highle language do some",
    "start": "156440",
    "end": "163360"
  },
  {
    "text": "really fancy stuff and generate really low-level machine code which are instructions specifically for the",
    "start": "163360",
    "end": "169640"
  },
  {
    "text": "processor that the computer has on its",
    "start": "169640",
    "end": "173959"
  },
  {
    "text": "motherboard that is how you're going to get the most efficient well uh I uh for",
    "start": "176120",
    "end": "181400"
  },
  {
    "text": "the researchers yes we'll say it's the most efficient but obviously on the Fly compiler could do a little better",
    "start": "181400",
    "end": "186720"
  },
  {
    "text": "sometimes but the basic idea is why don't we always go to machine code if it's so efficient well it's a lot harder",
    "start": "186720",
    "end": "193040"
  },
  {
    "text": "to generate b or machine codes than b codes bik codes are a little bit higher level they're somewhere between machine",
    "start": "193040",
    "end": "199200"
  },
  {
    "text": "code and source code so the other thing is that's portable so if I Define this",
    "start": "199200",
    "end": "205319"
  },
  {
    "text": "imaginary machine like a Java machine or whatever then I can Implement one those on any machine I want for example the",
    "start": "205319",
    "end": "213000"
  },
  {
    "text": "dovic VM running on your Android phone who has an Android phone I spit on you I",
    "start": "213000",
    "end": "218680"
  },
  {
    "text": "just sold mine I had an iPhone I'm like oh this is driving me crazy I spent 750 on an S5 then I spent 750 on a 5S 30",
    "start": "218680",
    "end": "227439"
  },
  {
    "text": "days later um yeah that just happened to me so but you got the doic VM running",
    "start": "227439",
    "end": "232560"
  },
  {
    "text": "Java that's a Java machine right it implemented an interpreter Al be at a different one but it implements a white code",
    "start": "232560",
    "end": "240120"
  },
  {
    "text": "interpreter virtual machine that will execute instructions that are in between machine code and high level language so",
    "start": "240120",
    "end": "247840"
  },
  {
    "text": "now of course the real trick is as I just alluded to is that for Real Performance then you have these virtual",
    "start": "247840",
    "end": "254760"
  },
  {
    "text": "machines like Java and the dovic VM that will take these bite code instructions and actually translate those down into",
    "start": "254760",
    "end": "261280"
  },
  {
    "text": "machine code as it executes them and then we really be running native code so",
    "start": "261280",
    "end": "266560"
  },
  {
    "text": "uh in the end these machines like the JavaScript VM is really fast Google's VM",
    "start": "266560",
    "end": "272840"
  },
  {
    "text": "is really fast it can because it's translating these bik goes to machine code uh ultimately on the Fly how many",
    "start": "272840",
    "end": "280960"
  },
  {
    "text": "people uh built Java code back when Java didn't have a compiler it was just",
    "start": "280960",
    "end": "286759"
  },
  {
    "text": "interpreted you youngsters okay one guy old guy um it was really slow really",
    "start": "286759",
    "end": "293680"
  },
  {
    "text": "slow uh but didn't have a compiler or didn't have a jit you didn't have a jit",
    "start": "293680",
    "end": "299080"
  },
  {
    "text": "yeah yeah that's the problem the new since we all have on the-fly compilers now it's hard to say well what exactly",
    "start": "299080",
    "end": "304520"
  },
  {
    "text": "is the compiler uh well there's two of them okay so uh so our goal is to",
    "start": "304520",
    "end": "310919"
  },
  {
    "text": "simulate some kind of little tiny computer and if you look up you know sort of in an engineering uh Computer",
    "start": "310919",
    "end": "318080"
  },
  {
    "text": "Engineering style Book You'll see things that look like this and anybody recognize the assembly code on the right",
    "start": "318080",
    "end": "323800"
  },
  {
    "text": "which processor I'll give you a hint it's an 8bit processor that cuts out most of you I",
    "start": "323800",
    "end": "328840"
  },
  {
    "text": "guess damn it really that old 6502 yeah it's 652 that was in the",
    "start": "328840",
    "end": "335000"
  },
  {
    "text": "original Apple uh so these are these are these simple little instructions like",
    "start": "335000",
    "end": "340880"
  },
  {
    "text": "this incremented put memory location so this is what we call assembly code so this is",
    "start": "340880",
    "end": "347160"
  },
  {
    "text": "for humans right but this is what the machine actually executes so at address",
    "start": "347160",
    "end": "352240"
  },
  {
    "text": "600 just happens to be hex I think yeah at some particular address in the code memory um there are some machine",
    "start": "352240",
    "end": "359160"
  },
  {
    "text": "instruction that are encoded in all these little bits here that we as humans interpret as this of course uh what we",
    "start": "359160",
    "end": "366680"
  },
  {
    "text": "really understand is something that looks like that in a high Lev language but so the goal of a bite Co compiler is",
    "start": "366680",
    "end": "373199"
  },
  {
    "text": "to take something that's well actually higher level than this but generate this",
    "start": "373199",
    "end": "378919"
  },
  {
    "text": "something like that and then we'll have a virtual machine instead of a real machine execute this but the the",
    "start": "378919",
    "end": "384240"
  },
  {
    "text": "terminology hear is fetch decode execute and so built within this processor",
    "start": "384240",
    "end": "390800"
  },
  {
    "text": "there's something that asks for the next instruction to execute and then it figures out what it is because you know what the hell is A4 well it's a bit",
    "start": "390800",
    "end": "397599"
  },
  {
    "text": "pattern and pieces of that bit pattern tell it what to do so it decodes it and",
    "start": "397599",
    "end": "402880"
  },
  {
    "text": "then it'll play around executing it by messing with registers or the arithmetic logic unit and then maybe writing stuff",
    "start": "402880",
    "end": "409000"
  },
  {
    "text": "back to memory things like that so but that's pretty gross and hard",
    "start": "409000",
    "end": "414160"
  },
  {
    "text": "to understand so we're going to do something higher level",
    "start": "414160",
    "end": "419319"
  },
  {
    "text": "because obviously that would be hard to generate so we're we're going to have fewer",
    "start": "420759",
    "end": "426039"
  },
  {
    "text": "instructions but they're going to be very regular machine code especially if you work in the Intel world they're like",
    "start": "426039",
    "end": "431280"
  },
  {
    "text": "oh this instruction only works with these registers and it's a big mess imagine uh you know if in your",
    "start": "431280",
    "end": "437319"
  },
  {
    "text": "programming language you can only use plus if your variable starts with Q I mean it's it's insane but those are",
    "start": "437319",
    "end": "444560"
  },
  {
    "text": "the limits of Hardware now since I'm not constrained by Hardware I can invent a very nice regular instruction set",
    "start": "444560",
    "end": "451520"
  },
  {
    "text": "so um let's say I have a highle programming language that wants to say this print 1 plus two assuming the",
    "start": "452720",
    "end": "460080"
  },
  {
    "text": "compiler doesn't do optimization and convert that to a three we're going to actually translate well a compiler that",
    "start": "460080",
    "end": "467720"
  },
  {
    "text": "generates bite codes would translate down to this which says integer constant one",
    "start": "467720",
    "end": "474000"
  },
  {
    "text": "push it on the stack integer constant two push it on the stack integer add",
    "start": "474000",
    "end": "479840"
  },
  {
    "text": "that's going to take the two top operands off the top of the stack so pop pop add the result and then push it back",
    "start": "479840",
    "end": "487639"
  },
  {
    "text": "on and we'll see this in more detail later so how many people have used one of the old HP calculators that was",
    "start": "487639",
    "end": "493360"
  },
  {
    "text": "reverse polish notation right you'd go like one two plus and you get the",
    "start": "493360",
    "end": "498639"
  },
  {
    "text": "result um that's what this is It's a stack machine just like that so now if",
    "start": "498639",
    "end": "503840"
  },
  {
    "text": "we actually this is a trace from the actual code that I built this is address zero these are all",
    "start": "503840",
    "end": "509680"
  },
  {
    "text": "decimal though address zero the instruction is integer constant and then the operand is one and you'll see that",
    "start": "509680",
    "end": "516240"
  },
  {
    "text": "after it executes it's pushed one on the stack and for this display the stack grows to the",
    "start": "516240",
    "end": "522839"
  },
  {
    "text": "right uh so then I push a two on there of course and then the result of adding integer add is going to be three and",
    "start": "524240",
    "end": "530720"
  },
  {
    "text": "then when I do a print that pops the value off and then dumps it to standard out and then halt just stops the",
    "start": "530720",
    "end": "536560"
  },
  {
    "text": "execution of the program um",
    "start": "536560",
    "end": "541440"
  },
  {
    "text": "why do you think I have the I constant instead of just const and I add instead of just add because then I have to have",
    "start": "541800",
    "end": "548959"
  },
  {
    "text": "like f for float like f add F const all this why do I do",
    "start": "548959",
    "end": "554120"
  },
  {
    "text": "that any is because the processor will care",
    "start": "554120",
    "end": "560519"
  },
  {
    "text": "ultimately the processor does care um and basically the less each of",
    "start": "560519",
    "end": "567079"
  },
  {
    "text": "these instructions has to think the faster it's going to be imagine a plain ad",
    "start": "567079",
    "end": "572399"
  },
  {
    "text": "instruction the ad instruction if I tell it the oper ends are integers it can",
    "start": "572399",
    "end": "578600"
  },
  {
    "text": "just grab them and go slap them together but if it asks the first say are you a",
    "start": "578600",
    "end": "585360"
  },
  {
    "text": "float is the other one a float is it a float and an integer is it an integer",
    "start": "585360",
    "end": "590399"
  },
  {
    "text": "and a float well you know so it has to do the conversion has to think anytime it has to think it's going to slow down",
    "start": "590399",
    "end": "596800"
  },
  {
    "text": "and so what we do is we make the compiler smarter and it realizes ah that one is an integer and that two is an",
    "start": "596800",
    "end": "603079"
  },
  {
    "text": "integer so I will generate integer instructions okay so that's assuming of",
    "start": "603079",
    "end": "608320"
  },
  {
    "text": "course the language has static types like Java python would have to have a generic instruction like ad and then in",
    "start": "608320",
    "end": "613680"
  },
  {
    "text": "runtime it would have to figure out what those operand are so that's another reason that often dynamically typed",
    "start": "613680",
    "end": "619959"
  },
  {
    "text": "languages are going to be slower okay um so any questions on the",
    "start": "619959",
    "end": "625560"
  },
  {
    "text": "basic execution of this little bit of I code yeah um what are the numbers in the trace is",
    "start": "625560",
    "end": "631839"
  },
  {
    "text": "that memory addresses uh this is code address code address have Jump by first",
    "start": "631839",
    "end": "638839"
  },
  {
    "text": "one is that yes it is the operant so as we'll",
    "start": "638839",
    "end": "644480"
  },
  {
    "text": "see later this each instruction is going to uh require a word and then each Opera",
    "start": "644480",
    "end": "651360"
  },
  {
    "text": "is a word now normally it would be a bite and then your operands would be like 16 bits or 32 bits for efficiency",
    "start": "651360",
    "end": "657360"
  },
  {
    "text": "right because you want to squish it you wanted as small as possible but so that I didn't have to do any like you know",
    "start": "657360",
    "end": "662760"
  },
  {
    "text": "bit twiddling or word collapsing I just said everything's a 32bit word so my code memory and my data memory are",
    "start": "662760",
    "end": "669120"
  },
  {
    "text": "32-bit word addressable they're just arrays of integers and so this is address zero address one address 2 three",
    "start": "669120",
    "end": "676000"
  },
  {
    "text": "four five six y That's funny judge alsup in the",
    "start": "676000",
    "end": "682360"
  },
  {
    "text": "Google Android uh Oracle trial asked me the exact same question that was the only technical question I got the whole",
    "start": "682360",
    "end": "688279"
  },
  {
    "text": "uh thing when or sued Google on some of these patents on the dovic VM I was uh",
    "start": "688279",
    "end": "694880"
  },
  {
    "text": "uh I was asked by the judge why does it Jump by two there that's exactly what he asked I kind of feel bad now that I",
    "start": "694880",
    "end": "701000"
  },
  {
    "text": "asked the same question oh but he's a programmer the judge is a programmer though and he was a smart guy yeah and",
    "start": "701000",
    "end": "706680"
  },
  {
    "text": "he was really smart he was a tough son of a yeah no he was good he it was",
    "start": "706680",
    "end": "713120"
  },
  {
    "text": "good yeah yeah that was interesting trying to explain uh how a virtual machine works to the jury",
    "start": "713120",
    "end": "720760"
  },
  {
    "text": "significantly more challenging than tonight um okay",
    "start": "720760",
    "end": "727279"
  },
  {
    "text": "so here's the full instruction set and I've only done integers floating",
    "start": "727360",
    "end": "734639"
  },
  {
    "text": "point is the same kind of it's it's a little more tricky because we have to store floats where we think there might",
    "start": "734639",
    "end": "740800"
  },
  {
    "text": "be integers and so on but in general we're going to be able to add and subtract and multiply I can't even divide that's okay",
    "start": "740800",
    "end": "748040"
  },
  {
    "text": "I got lazy I can check to see if an integer is less than another integer I can check to see if they're equal I can",
    "start": "748040",
    "end": "754639"
  },
  {
    "text": "jump this literally is just like a go-to this is go to only if the top of the stack is true this is if it's false push",
    "start": "754639",
    "end": "762639"
  },
  {
    "text": "a value on the stack um from a local variable or parameter loaded onto the",
    "start": "762639",
    "end": "769800"
  },
  {
    "text": "stack can't do anything with an OP with a value until I get it on the stack all operations happen on the stack now from",
    "start": "769800",
    "end": "777199"
  },
  {
    "text": "global address space I can get a value and we'll see that these are offsets really not addresses and that's a a",
    "start": "777199",
    "end": "783880"
  },
  {
    "text": "direct index into the memory store takes the top of the stack and sticks it in a local variable takes the top of the",
    "start": "783880",
    "end": "790560"
  },
  {
    "text": "stack and sticks it in a global variable uh takes the top of the stack prints it this throws away the top of the stack",
    "start": "790560",
    "end": "796720"
  },
  {
    "text": "and these are complicated but this is going to make a function call a return and then halt so believe it or not we can do all",
    "start": "796720",
    "end": "803639"
  },
  {
    "text": "sorts of things with that we could even fake division probably somehow if I've got subtraction I can divide",
    "start": "803639",
    "end": "811120"
  },
  {
    "text": "poorly all right so now more specifically getting",
    "start": "813360",
    "end": "819760"
  },
  {
    "text": "to here uh this is really what it looks like so even though I'm only using this part of it or this part depending if",
    "start": "819760",
    "end": "826279"
  },
  {
    "text": "you're on Intel or motor rol um these are the three kinds of instructions this",
    "start": "826279",
    "end": "831399"
  },
  {
    "text": "is just like you know pop and Halt and print and this is you know ions and uh load and store and that kind of stuff",
    "start": "831399",
    "end": "838279"
  },
  {
    "text": "and this is the only the call has two operants and so this is call the address",
    "start": "838279",
    "end": "844120"
  },
  {
    "text": "and then how many arguments we're going to push or we have pushed at that point okay so just to make everything",
    "start": "844120",
    "end": "851279"
  },
  {
    "text": "easy everything's an array of integers code data stack everything you'll see in",
    "start": "851279",
    "end": "856800"
  },
  {
    "text": "the code that's just integer Left Right bracket uh let's see okay and so because",
    "start": "856800",
    "end": "863120"
  },
  {
    "text": "I guess even at USF we dropped the Assembly Language requirement um so many",
    "start": "863120",
    "end": "868759"
  },
  {
    "text": "people haven't done assembly code in a while remind let me remind you the addresses there's nothing mysterious right it's just a",
    "start": "868759",
    "end": "874639"
  },
  {
    "text": "number so memory starts at zero and goes up different kinds of computers are",
    "start": "874639",
    "end": "880600"
  },
  {
    "text": "different differently addressable by size but ours are integers so if I have",
    "start": "880600",
    "end": "886000"
  },
  {
    "text": "a thousand words I will have a thousand addresses and that's it okay so pointers",
    "start": "886000",
    "end": "891720"
  },
  {
    "text": "just integers all right so",
    "start": "891720",
    "end": "899199"
  },
  {
    "text": "again we want to see we want to think about this stuff although still not you",
    "start": "899839",
    "end": "905000"
  },
  {
    "text": "know great it's not a high L language but so this is the Assembly Language of B code you might",
    "start": "905000",
    "end": "910399"
  },
  {
    "text": "say but we need to actually store it encode it just like we encode asky as",
    "start": "910399",
    "end": "915680"
  },
  {
    "text": "integers we encode bite code instructions as numbers so integer constant well the bite code for that is",
    "start": "915680",
    "end": "922480"
  },
  {
    "text": "nine why just happens to be where I stuck it you can make it anything you want as long as it's Unique right and",
    "start": "922480",
    "end": "928759"
  },
  {
    "text": "then so this is basically the first word is nine second word is one the third one is nine fourth one and then the bite",
    "start": "928759",
    "end": "936240"
  },
  {
    "text": "code for integer add is one arbitrarily and print is",
    "start": "936240",
    "end": "941560"
  },
  {
    "text": "14 so now ultimately what we really want is an assembly an assembler for this",
    "start": "942880",
    "end": "948759"
  },
  {
    "text": "that will take this text and generate this in memory so that we can execute it but we will fake that",
    "start": "948759",
    "end": "955600"
  },
  {
    "text": "tonight okay so our little machine is very very",
    "start": "955639",
    "end": "960759"
  },
  {
    "text": "simple we have data memory where we're going to store Global variables if I have space for 100 and when you launch",
    "start": "960759",
    "end": "966279"
  },
  {
    "text": "the virtual machine you tell me I want 100 Global variable spaces you also have code memory and that's where the",
    "start": "966279",
    "end": "971800"
  },
  {
    "text": "instructions are going to sit I could put them together whatever doesn't matter I separated it just to make it",
    "start": "971800",
    "end": "977480"
  },
  {
    "text": "easy so that there's something called code memory otherwise I have to relocate stuff um and this is my fabulous",
    "start": "977480",
    "end": "985000"
  },
  {
    "text": "Universal International symbol for data goes back and forth um so here's my little CPU and inside I",
    "start": "985000",
    "end": "992759"
  },
  {
    "text": "have a stack You could argue that it it could be outside the CPU whatever so",
    "start": "992759",
    "end": "998240"
  },
  {
    "text": "just uh for my own sake I think of the register or the stack as a stack of",
    "start": "998240",
    "end": "1003360"
  },
  {
    "text": "registers and I've got this fetch decode execute cycle that is pulling stuff out of the code memory it's decoding it and",
    "start": "1003360",
    "end": "1009920"
  },
  {
    "text": "executing it which could be writing stuff to the data memory could be reading from the data memory could be playing around with a stack it could be",
    "start": "1009920",
    "end": "1016079"
  },
  {
    "text": "messing with these uh registers so registers you remember are the little",
    "start": "1016079",
    "end": "1021120"
  },
  {
    "text": "tiny variables that CPUs have that are on the chip they're extremely fast to",
    "start": "1021120",
    "end": "1027038"
  },
  {
    "text": "access um we are not using them for data but there are special purpose registers",
    "start": "1027039",
    "end": "1032120"
  },
  {
    "text": "that all processors have that help it manage sort of where it's",
    "start": "1032120",
    "end": "1038640"
  },
  {
    "text": "at so the instruction pointer sometimes it's called the PC program or the program",
    "start": "1038640",
    "end": "1045038"
  },
  {
    "text": "counter um I'm very non-pc so I can't use those letters the um IP points to",
    "start": "1045039",
    "end": "1051760"
  },
  {
    "text": "where I am in the code memory so it's like keeping a finger where am I where am I executing and it might be in a loop right it might be bouncing around like",
    "start": "1051760",
    "end": "1058120"
  },
  {
    "text": "this I might be jumping to a function and then coming back the instruction pointer says what am I about to execute",
    "start": "1058120",
    "end": "1065039"
  },
  {
    "text": "or what am I currently executing the stack pointer says where I",
    "start": "1065039",
    "end": "1071039"
  },
  {
    "text": "am in the stack the stack pointer starts out below the stack and grows upwards so it starts out at negative one so to push",
    "start": "1071039",
    "end": "1077559"
  },
  {
    "text": "something I say increment the stack stack pointer to zero who and then I stick a value at stack of Stack pointer",
    "start": "1077559",
    "end": "1084520"
  },
  {
    "text": "if I push something again I increment the stack pointer and I stick something at stack of Stack",
    "start": "1084520",
    "end": "1090919"
  },
  {
    "text": "pointer so this will grow and fall depending on the instructions that push and pop stuff right now the frame",
    "start": "1090919",
    "end": "1097320"
  },
  {
    "text": "pointer is something we're going to use for accessing the current set of locals and parameters and so we'll get to that",
    "start": "1097320",
    "end": "1104280"
  },
  {
    "text": "uh when we do function calls but that's a little more complicated okay um so so what does a fetch look like this is freakishly",
    "start": "1104280",
    "end": "1112240"
  },
  {
    "text": "complex give me the op code at the current instruction pointer right very simple it just says fetch from data",
    "start": "1112240",
    "end": "1119840"
  },
  {
    "text": "memory uh code memory so I literally have an array called code that represents my code memory and I have one",
    "start": "1119840",
    "end": "1125440"
  },
  {
    "text": "called Data I think for Glo or globals for that now how do I decode an instruction in my virtual machine well I",
    "start": "1125440",
    "end": "1132679"
  },
  {
    "text": "just have a switch on the op code so if the op code is nine I know it's what did I say it was integer",
    "start": "1132679",
    "end": "1139679"
  },
  {
    "text": "constant now I guess this was getting kind of low for some of you guys but to execute you'll see like here's the integer ad I can do it all in one line",
    "start": "1139679",
    "end": "1146919"
  },
  {
    "text": "it says um you evaluate the right hand side first set um so I have to have two",
    "start": "1146919",
    "end": "1152600"
  },
  {
    "text": "things on top of the stack so it says give me the thing on top of the stack and then move the stack pointer down one",
    "start": "1152600",
    "end": "1158520"
  },
  {
    "text": "give me the thing on top of the stack and move the stack pointer down one so now it's",
    "start": "1158520",
    "end": "1163600"
  },
  {
    "text": "empty and then I add the result and then I increment the stack pointer",
    "start": "1163600",
    "end": "1169679"
  },
  {
    "text": "back up here and then I store the result and I'll show you in more detail later",
    "start": "1169679",
    "end": "1174760"
  },
  {
    "text": "but so this just demystifies it it's a very simple process and this for those",
    "start": "1174760",
    "end": "1180200"
  },
  {
    "text": "of you who've done like register transfer language stuff um micro code vhdl anything like that you'll recognize",
    "start": "1180200",
    "end": "1187000"
  },
  {
    "text": "this as sort of Hardware description language stuff so the Java code looks very much like how you would describe a",
    "start": "1187000",
    "end": "1193559"
  },
  {
    "text": "processor to vhdl or something",
    "start": "1193559",
    "end": "1198520"
  },
  {
    "text": "okay okay so my goal is just to set all this up and then we're going to jump in the code and uh I haven't figured out",
    "start": "1203360",
    "end": "1210640"
  },
  {
    "text": "what I'm going to do there I was thinking maybe I'd build it in front of you again um but we'll see okay uh so",
    "start": "1210640",
    "end": "1217039"
  },
  {
    "text": "here is the full sort of General algorithm for a b",
    "start": "1217039",
    "end": "1222480"
  },
  {
    "text": "code interpreter and this will work whether it's a stack code interpreter or a register interpreter um",
    "start": "1222480",
    "end": "1230640"
  },
  {
    "text": "you have a Fetch and while I still have uh",
    "start": "1231400",
    "end": "1236760"
  },
  {
    "text": "instructions or I don't have a halt then I move to the operand and then I Decode",
    "start": "1236760",
    "end": "1242880"
  },
  {
    "text": "by switching on the B code and then depending on which bik code it is I do something and so there's",
    "start": "1242880",
    "end": "1249400"
  },
  {
    "text": "the execute part and then I move on get the next bike code or op code",
    "start": "1249400",
    "end": "1256919"
  },
  {
    "text": "Whatever by the way I should point out where is that I cut and paste that",
    "start": "1257320",
    "end": "1263960"
  },
  {
    "text": "from my uh book that came out a few years ago so this is actually simpler than what I do in the book so if you",
    "start": "1263960",
    "end": "1270080"
  },
  {
    "text": "want to go a little further you can you can dig into this but if you really want to get into it then you got to start",
    "start": "1270080",
    "end": "1275440"
  },
  {
    "text": "digging into say the doic VM which is public domain or I should say open source um okay any any questions on that",
    "start": "1275440",
    "end": "1284279"
  },
  {
    "text": "I mean it's pretty straightforward right I mean this is yeah",
    "start": "1284279",
    "end": "1289679"
  },
  {
    "text": "so now here is the actual code that's going to execute well decode and execute",
    "start": "1290640",
    "end": "1295880"
  },
  {
    "text": "two instructions the branch instruction is",
    "start": "1295880",
    "end": "1301559"
  },
  {
    "text": "just saying I want to go somewhere else in the code that's easy I set the instruction pointer somewhere else now",
    "start": "1301559",
    "end": "1307320"
  },
  {
    "text": "remember the branch instruction takes an operand and that operand sits right next to it in code",
    "start": "1307320",
    "end": "1312679"
  },
  {
    "text": "memory and so the uh the op code is at the",
    "start": "1312679",
    "end": "1318039"
  },
  {
    "text": "instruction pointer and I Branch to here so then I oh and I and I incremented it per the last",
    "start": "1318039",
    "end": "1325120"
  },
  {
    "text": "slide here so now it's pointing at the operand and so I get the operand out of",
    "start": "1326000",
    "end": "1331520"
  },
  {
    "text": "code memory and then I say hey jump there that's it the way you do a jump is you move a special register in a CPU",
    "start": "1331520",
    "end": "1338960"
  },
  {
    "text": "that's just how those work if you want to do a call in a you know in an Intel processor whatever you're just",
    "start": "1338960",
    "end": "1344679"
  },
  {
    "text": "manipulating the stack pointer so if you do a jump all you're doing is manipulating that register okay",
    "start": "1344679",
    "end": "1350480"
  },
  {
    "text": "now um integer ad I'm not doing any type checking or",
    "start": "1350480",
    "end": "1355799"
  },
  {
    "text": "anything here I'm assuming that they're all integers if I were in a more complicated environment I might be you know for",
    "start": "1355799",
    "end": "1363440"
  },
  {
    "text": "safety checking the type um or I might have type information on the stack",
    "start": "1363440",
    "end": "1368480"
  },
  {
    "text": "itself but anyway so all I'm doing is saying um okay so when you push things",
    "start": "1368480",
    "end": "1374039"
  },
  {
    "text": "right if I have two oper a plus b I'm going to push a and I'm going to push B",
    "start": "1374039",
    "end": "1379679"
  },
  {
    "text": "that means B is on top of the stack right the last thing you push is on top therefore I'm getting the second operand",
    "start": "1379679",
    "end": "1387159"
  },
  {
    "text": "first doesn't really matter because plus is commutative but if you're doing less than you got to get that in the right",
    "start": "1387159",
    "end": "1392600"
  },
  {
    "text": "order otherwise it's not going to work so you get the second operand off first because this reverse order you get the",
    "start": "1392600",
    "end": "1398440"
  },
  {
    "text": "first operand and you have to be really careful with this pre- and post",
    "start": "1398440",
    "end": "1404039"
  },
  {
    "text": "increment stuff since uh I would at least Le 100 years ago I was comfortable with C I",
    "start": "1404039",
    "end": "1410360"
  },
  {
    "text": "kind of still do that but be very careful about the order because this is saying get the stack pointer first and",
    "start": "1410360",
    "end": "1415799"
  },
  {
    "text": "then decrement it okay so then it'll uh get the two operands then of course this",
    "start": "1415799",
    "end": "1421200"
  },
  {
    "text": "is a push so I increment the stack pointer and then set the value so just this add so to do integer",
    "start": "1421200",
    "end": "1426919"
  },
  {
    "text": "multiply it's the vastly complicated change to Star cut and",
    "start": "1426919",
    "end": "1433640"
  },
  {
    "text": "paste and then that will terminate the the switch questions",
    "start": "1433640",
    "end": "1440440"
  },
  {
    "text": "oh man maybe this is too easy I should have added some more complicated",
    "start": "1440880",
    "end": "1445919"
  },
  {
    "text": "stuff all right functions this is where it gets a little",
    "start": "1445919",
    "end": "1451320"
  },
  {
    "text": "tricky um and I did this literally seconds before I had to turn the machine off and come over here so I'm sure",
    "start": "1451320",
    "end": "1456360"
  },
  {
    "text": "there's an air in here somewhere um all",
    "start": "1456360",
    "end": "1461520"
  },
  {
    "text": "right we want to make a function call there's a call instruction but we have to figure out what the",
    "start": "1464279",
    "end": "1469919"
  },
  {
    "text": "operands are so f is in some high level",
    "start": "1469919",
    "end": "1475880"
  },
  {
    "text": "programming language but it's going to fit that function is going to fit somewhere in memory call it address 95 whatever it",
    "start": "1475880",
    "end": "1482320"
  },
  {
    "text": "doesn't matter it's going to fit somewhere so this F will actually be 95 or something like that when it's",
    "start": "1482320",
    "end": "1488440"
  },
  {
    "text": "actually sitting in code memory and then this is telling me how many operants uh how many function arguments there are",
    "start": "1488440",
    "end": "1494720"
  },
  {
    "text": "that I got pushed and the reason I need that is because",
    "start": "1494720",
    "end": "1499760"
  },
  {
    "text": "I'm going to have to clean up the stack when I do a return instruction now in this little virtual",
    "start": "1499760",
    "end": "1506440"
  },
  {
    "text": "machine thing I have set up every call every function always returns a value even if you don't use",
    "start": "1506440",
    "end": "1512640"
  },
  {
    "text": "it and so I just say pop and throw it away in this case because I'm not saving it",
    "start": "1512640",
    "end": "1518760"
  },
  {
    "text": "anywhere so now when I have two arguments Uh crap did I mix it up no now",
    "start": "1518760",
    "end": "1525640"
  },
  {
    "text": "I've got two arguments to f on the same call I'm gonna see two",
    "start": "1525640",
    "end": "1532080"
  },
  {
    "text": "now this this G doesn't matter I'm just I just want you to the only thing I care about is that you know that X and Y are",
    "start": "1532080",
    "end": "1538200"
  },
  {
    "text": "parameters that's all I care about and that Z is a local because I have to explain these",
    "start": "1538200",
    "end": "1543679"
  },
  {
    "text": "wacky numbers here okay so now instead of um throwing the value away in this",
    "start": "1543679",
    "end": "1550679"
  },
  {
    "text": "case like I did there I'm going to store it in a local variable Z so after the",
    "start": "1550679",
    "end": "1556720"
  },
  {
    "text": "call the result is on the top of the stack so the store pops it and stores it",
    "start": "1556720",
    "end": "1561919"
  },
  {
    "text": "at offset Z which in this case is going to be positive one from the frame pointer which we don't know what it is",
    "start": "1561919",
    "end": "1567279"
  },
  {
    "text": "yet okay so to make this call here I need to get X on the stack get y",
    "start": "1567279",
    "end": "1574799"
  },
  {
    "text": "on the stack remember all operands all the action happens on the stack I push X",
    "start": "1574799",
    "end": "1579880"
  },
  {
    "text": "I push Y and I call F saying I've got two",
    "start": "1579880",
    "end": "1584840"
  },
  {
    "text": "parameters so if I hide all this and I hide all this then it kind of makes",
    "start": "1585360",
    "end": "1590600"
  },
  {
    "text": "sense right but you actually need to know what these offsets are so here's",
    "start": "1590600",
    "end": "1597279"
  },
  {
    "text": "how the call works the call instruction actually does quite a bit of monkeying around with the stack so the stack down",
    "start": "1597279",
    "end": "1604880"
  },
  {
    "text": "here is doing whatever it wants this is the prehistory when I",
    "start": "1604880",
    "end": "1611360"
  },
  {
    "text": "push X it's going to go on top of the stack I'm going to push the second argument and so I guess I could have",
    "start": "1611360",
    "end": "1617960"
  },
  {
    "text": "shift did these up here since I only have two but I wanted to show there'd be any number of arguments here so the code",
    "start": "1617960",
    "end": "1624399"
  },
  {
    "text": "that does the invocation pushes all the arguments because I don't know what they are as function f and then the call",
    "start": "1624399",
    "end": "1630799"
  },
  {
    "text": "instruction itself does this stuff it says oh number two Let's uh two",
    "start": "1630799",
    "end": "1635840"
  },
  {
    "text": "arguments push that on the stack because I need that number later save the current frame",
    "start": "1635840",
    "end": "1641520"
  },
  {
    "text": "pointer save the current stack pointer so this is like save my state you know",
    "start": "1641520",
    "end": "1647000"
  },
  {
    "text": "this is like putting all the current state of the machine or the CPU um into a safe place because I",
    "start": "1647000",
    "end": "1654880"
  },
  {
    "text": "might have 30 of these on the stack and I can unroll all of them and record recover where I was okay so the call",
    "start": "1654880",
    "end": "1660519"
  },
  {
    "text": "does this the caller does that and then the actual function itself is going to",
    "start": "1660519",
    "end": "1665640"
  },
  {
    "text": "allocate space for locals we don't have locals yet um",
    "start": "1665640",
    "end": "1671240"
  },
  {
    "text": "so the call instruction pushes all this crap and then resets the frame pointer",
    "start": "1671240",
    "end": "1676399"
  },
  {
    "text": "after it saves it to point to it's arbitrary but I just thought I had to point it here",
    "start": "1676399",
    "end": "1683720"
  },
  {
    "text": "so if you want to access arguments they're down this way",
    "start": "1683919",
    "end": "1690320"
  },
  {
    "text": "because stat grows up right if you want to access locals they're this way because everything is relative to",
    "start": "1690320",
    "end": "1697200"
  },
  {
    "text": "the frame pointer right that's what local variables are they're all on the stack parameters locals they're always on the stack that's the only way we can",
    "start": "1697200",
    "end": "1704080"
  },
  {
    "text": "get recursion right did you know the first version of Fortran didn't have",
    "start": "1704080",
    "end": "1709760"
  },
  {
    "text": "recursion if you if F called like G which called f it would just never come",
    "start": "1709760",
    "end": "1716000"
  },
  {
    "text": "back awesome so um that's before they came up with this idea of a stack right so you",
    "start": "1716000",
    "end": "1721960"
  },
  {
    "text": "push the return address um oh where's my return address damn",
    "start": "1721960",
    "end": "1727159"
  },
  {
    "text": "it ask oh man so I told you I missed I missed one thing all right in your mind",
    "start": "1727159",
    "end": "1732679"
  },
  {
    "text": "everyone downshift this guy and store the return address in here I should have looked at the code more carefully but I",
    "start": "1732679",
    "end": "1739000"
  },
  {
    "text": "was running out of time um my brain was melting in the mission today uh so hot",
    "start": "1739000",
    "end": "1745279"
  },
  {
    "text": "ah crap okay well we have to save the return address otherwise we can't get back right so I'm saving the program",
    "start": "1745279",
    "end": "1751320"
  },
  {
    "text": "counter the instruction pointer so I'm saving the complete State like I said I'm just storing the other register that I",
    "start": "1751320",
    "end": "1757039"
  },
  {
    "text": "pictured uh in that block diagram I had um okay well we'll we'll worry about the",
    "start": "1757039",
    "end": "1764919"
  },
  {
    "text": "stack uh return adverse later um okay so where would it Point here uh let's see",
    "start": "1764919",
    "end": "1772360"
  },
  {
    "text": "uh I can check my code where did I stick it uh I think I pushed oh oh oh the",
    "start": "1772360",
    "end": "1778640"
  },
  {
    "text": "instruction yeah yeah yeah the return address good question the return address is going to point whatever is pointing",
    "start": "1778640",
    "end": "1785760"
  },
  {
    "text": "here so it's an instruction it's an instruction pointer yeah it's basically saying when F does a return where do I",
    "start": "1785760",
    "end": "1792440"
  },
  {
    "text": "go back to right and so that's going to be St saved on the stack so that when I do a return it's it's going to come back",
    "start": "1792440",
    "end": "1798880"
  },
  {
    "text": "here oddly enough it's actually easier when you look at the C well the picture is helpful as long as it's right um and",
    "start": "1798880",
    "end": "1807320"
  },
  {
    "text": "every virtual machine will do that differently I just tried to come up with the simplest thing that would work code Works my diagram doesn't um okay",
    "start": "1807320",
    "end": "1817278"
  },
  {
    "text": "so according to this diagram I must have I must have pushed",
    "start": "1817600",
    "end": "1823200"
  },
  {
    "text": "the return address here yeah anyway according to this diagram the first local is it one offset one for frame",
    "start": "1823200",
    "end": "1832519"
  },
  {
    "text": "pointer so when I'm storing it that's why we see plus one here now the arguments remember I pushed the first",
    "start": "1833000",
    "end": "1839200"
  },
  {
    "text": "one first and the second one next which means it's on top of the stack Which is higher up so that's",
    "start": "1839200",
    "end": "1846720"
  },
  {
    "text": "why the first one is lower relative to the frame pointer okay",
    "start": "1846720",
    "end": "1852360"
  },
  {
    "text": "now in this particular case I have an extra set of arguments in here um but",
    "start": "1852360",
    "end": "1857399"
  },
  {
    "text": "the first in this case the first argument would be at minus four and the second argument would be at minus three",
    "start": "1857399",
    "end": "1863000"
  },
  {
    "text": "and so that's why the offset would be minus 4 minus 3 and plus one now a",
    "start": "1863000",
    "end": "1868720"
  },
  {
    "text": "compiler would be the one generating all this the virtual machine doesn't care all it does is take the offset and add",
    "start": "1868720",
    "end": "1875480"
  },
  {
    "text": "it to the frame pointer and assume that that's correct okay so the compiler has the",
    "start": "1875480",
    "end": "1881039"
  },
  {
    "text": "hard task of figuring out where it's going to lay all this crap out and generating these offsets but the machine",
    "start": "1881039",
    "end": "1888440"
  },
  {
    "text": "doesn't do any thinking it just takes whatever value is there and pulls it from the",
    "start": "1888440",
    "end": "1893519"
  },
  {
    "text": "stack okay and then to do a return some expression you just get the expression on the stack and then use the return",
    "start": "1893519",
    "end": "1901679"
  },
  {
    "text": "instruction now I think that's it we have to jump in code so but the return",
    "start": "1906559",
    "end": "1912039"
  },
  {
    "text": "undoes all that right undoes a lot of that yeah return unrolls all this yeah",
    "start": "1912039",
    "end": "1917480"
  },
  {
    "text": "let's see so the return uh let's see um uh I should have",
    "start": "1917480",
    "end": "1922799"
  },
  {
    "text": "printed the code out so I have fresh in my head okay so the return instruction so this has all been set up by a call so",
    "start": "1922799",
    "end": "1929440"
  },
  {
    "text": "now I've played around and I've done a bunch of stuff I leave whatever return value on the stack that I want such as",
    "start": "1929440",
    "end": "1937039"
  },
  {
    "text": "here so let's say there's a nine right here and then I do a return instruction okay so now it gets complicated um what",
    "start": "1937039",
    "end": "1944679"
  },
  {
    "text": "I'm going to do is I'm going to take this value I'm G to store it someplace stick that in my back pocket and then I",
    "start": "1944679",
    "end": "1952399"
  },
  {
    "text": "want to set the the stack pointer down to the frame pointer so that throws away",
    "start": "1952399",
    "end": "1957559"
  },
  {
    "text": "all the locals [Music]",
    "start": "1957559",
    "end": "1964339"
  },
  {
    "text": "and I'm just thinking should I put the return address not the stack pointer here I'm going to look we'll look at the",
    "start": "1967600",
    "end": "1973799"
  },
  {
    "text": "code and that'll tell us exactly what has to happen um let's see because I know I need to",
    "start": "1973799",
    "end": "1981000"
  },
  {
    "text": "forget about this one for a second I need to restore the frame pointer because that's going to point I don't know somewhere down here that just going to restore it that's fine and then I",
    "start": "1981000",
    "end": "1988480"
  },
  {
    "text": "need to take the number of arguments off because then I need to throw all this crap away and then once all that's gone",
    "start": "1988480",
    "end": "1995039"
  },
  {
    "text": "I'm going to push the value that was here back on the stack so the return instruction cleans off everything and",
    "start": "1995039",
    "end": "2002159"
  },
  {
    "text": "leaves the result on the stack as if nothing had happened if the stack",
    "start": "2002159",
    "end": "2007399"
  },
  {
    "text": "pointer uh was here before the call it'll end up here after the call with a return of",
    "start": "2007399",
    "end": "2013639"
  },
  {
    "text": "value on there and if I don't want the result I throw it away if I do want the result I do a store a g store or or if I",
    "start": "2013639",
    "end": "2022080"
  },
  {
    "text": "have a nested function call like f of G then I leave that as an",
    "start": "2022080",
    "end": "2028039"
  },
  {
    "text": "argument so",
    "start": "2028080",
    "end": "2034000"
  },
  {
    "text": "um believe it or not that's the simplest version of this okay",
    "start": "2034000",
    "end": "2041840"
  },
  {
    "text": "um all right so let's make a choice here we have let's see Evan can I uh",
    "start": "2041840",
    "end": "2050679"
  },
  {
    "text": "hide this in any way or maybe just take it",
    "start": "2050679",
    "end": "2056960"
  },
  {
    "text": "down if I click minimize okay cool all right so I've got the full",
    "start": "2057440",
    "end": "2063158"
  },
  {
    "text": "implementations of the simple one without functions and then the one with functions",
    "start": "2063159",
    "end": "2069560"
  },
  {
    "text": "um let's see what it could do is just start a new project and build the",
    "start": "2071480",
    "end": "2078040"
  },
  {
    "text": "virtual machine on the Fly for you or um I could walk through the the",
    "start": "2078040",
    "end": "2086240"
  },
  {
    "text": "functioning version um generally I build things in the fly in front of people just because",
    "start": "2086240",
    "end": "2092398"
  },
  {
    "text": "it's easier to not just say here's the it's like if you want to learn how to",
    "start": "2092399",
    "end": "2097720"
  },
  {
    "text": "you know you know make a bake a cake or something like that you know it's it's",
    "start": "2097720",
    "end": "2103720"
  },
  {
    "text": "really kind of hard to learn how to make it if somebody goes hey look at this awesome cake I made um so maybe I'll",
    "start": "2103720",
    "end": "2110599"
  },
  {
    "text": "make a new project and uh cut and paste kind of slowly build this up piece by",
    "start": "2110599",
    "end": "2115920"
  },
  {
    "text": "piece so you can see how it works starting from a blank screen okay let's do that um let's see maybe I'll keep it in",
    "start": "2115920",
    "end": "2123440"
  },
  {
    "text": "the same uh that's going to",
    "start": "2123440",
    "end": "2129400"
  },
  {
    "text": "let's see will that work if I make a new module and then until get to ignore it that'll probably work okay let me make a",
    "start": "2129400",
    "end": "2135160"
  },
  {
    "text": "new module",
    "start": "2135160",
    "end": "2139760"
  },
  {
    "text": "hello let's make a new module let's call",
    "start": "2141280",
    "end": "2148320"
  },
  {
    "text": "this Java uh let's see uh meet up one",
    "start": "2148560",
    "end": "2158599"
  },
  {
    "text": "create the source sure why not and that should all be what we need",
    "start": "2158800",
    "end": "2164599"
  },
  {
    "text": "okay so now I got another one here and I'll make another package called the",
    "start": "2164599",
    "end": "2170200"
  },
  {
    "text": "M that files no no no no no no no could do get ignore I guess but",
    "start": "2171839",
    "end": "2181640"
  },
  {
    "text": "uh okay so now I got a package so first thing let's do let Let's uh let's define",
    "start": "2181640",
    "end": "2187599"
  },
  {
    "text": "what our B code looks like before we even try to come up with a machine that can implement it right so I'm going to",
    "start": "2187599",
    "end": "2193160"
  },
  {
    "text": "come up with a new class called B",
    "start": "2193160",
    "end": "2198400"
  },
  {
    "text": "code that's GNA get annoying",
    "start": "2198640",
    "end": "2203640"
  },
  {
    "text": "and I don't want to use the num because I want to assign the actual",
    "start": "2205800",
    "end": "2212640"
  },
  {
    "text": "values so I'm going to do public static final int uh what did I say well",
    "start": "2212640",
    "end": "2218280"
  },
  {
    "text": "whatever it doesn't matter integer add I think was our first one I'm G to call that one and then I could go through and do all of these",
    "start": "2218280",
    "end": "2224160"
  },
  {
    "text": "right um but instead I will cut and paste",
    "start": "2224160",
    "end": "2229520"
  },
  {
    "text": "those so rather than do all of those manually here's our BYO",
    "start": "2235400",
    "end": "2241560"
  },
  {
    "text": "instructions okay so this is just an enumerated type that lets me to find",
    "start": "2242400",
    "end": "2247520"
  },
  {
    "text": "find what these actual B code numbers are you know because in reality you'd want them to be certain bit patterns and",
    "start": "2247520",
    "end": "2253520"
  },
  {
    "text": "you know that's obviously going to be done with integers so these are the op",
    "start": "2253520",
    "end": "2259960"
  },
  {
    "text": "codes doesn't say anything about the operand these are the oper op codes um I think I can get away with",
    "start": "2259960",
    "end": "2267000"
  },
  {
    "text": "without the rest of that stuff let me see I think I can get rid get away with all that yes okay we don't need that all",
    "start": "2267000",
    "end": "2273480"
  },
  {
    "text": "right so let's uh let's come up with",
    "start": "2273480",
    "end": "2280200"
  },
  {
    "text": "a test meet up one meet meep meep up",
    "start": "2280200",
    "end": "2286880"
  },
  {
    "text": "one no if I say this it'll screw me later but that's all right",
    "start": "2286880",
    "end": "2293359"
  },
  {
    "text": "no um all right we'll do",
    "start": "2293359",
    "end": "2298720"
  },
  {
    "text": "the let's see uh okay so we're going to we want to let's say let's define a",
    "start": "2300800",
    "end": "2306520"
  },
  {
    "text": "program first so we're going to test driven design right I'm going to make a test so I said that my code memory is a",
    "start": "2306520",
    "end": "2312960"
  },
  {
    "text": "bunch of integers right okay let's make some integers static integer uh",
    "start": "2312960",
    "end": "2321480"
  },
  {
    "text": "hello there's my first program doesn't do",
    "start": "2323160",
    "end": "2329480"
  },
  {
    "text": "much here's another one import static BM",
    "start": "2329599",
    "end": "2338040"
  },
  {
    "text": "by code star there's our first program okay there's our first test",
    "start": "2338040",
    "end": "2346800"
  },
  {
    "text": "now how do we execute this virtual machine well let's make an object called",
    "start": "2346800",
    "end": "2353160"
  },
  {
    "text": "VM and I don't know what I called it but uh we will probably need a",
    "start": "2360839",
    "end": "2368040"
  },
  {
    "text": "Constructor but let's see okay oh what does a VM have uh let's say it just has code memory at the moment we've got code",
    "start": "2368040",
    "end": "2376000"
  },
  {
    "text": "we know we know we need a stack as well and then we need registers",
    "start": "2376000",
    "end": "2381400"
  },
  {
    "text": "right so",
    "start": "2381400",
    "end": "2384720"
  },
  {
    "text": "simulating simulating this ah",
    "start": "2389680",
    "end": "2395440"
  },
  {
    "text": "now here we go here we go so I need a stack I need data memory code memory and I need a",
    "start": "2398079",
    "end": "2404640"
  },
  {
    "text": "bunch of registers and then we'll we'll call this some kind of function to simulate that okay so let me",
    "start": "2404640",
    "end": "2411160"
  },
  {
    "text": "go back here let's put the data memory in there what the hell okay so I got all that stuff now let's define the",
    "start": "2411160",
    "end": "2417280"
  },
  {
    "text": "registers so registers are easy that's just I got an instruction pointer I got a stack pointer and I got a frame",
    "start": "2417280",
    "end": "2424760"
  },
  {
    "text": "pointer then um I need a Constructor and you're G have to pass me some",
    "start": "2424760",
    "end": "2430319"
  },
  {
    "text": "code and uh you have to tell me the initial starting point uh let's call that the",
    "start": "2430319",
    "end": "2437839"
  },
  {
    "text": "uh",
    "start": "2437839",
    "end": "2440839"
  },
  {
    "text": "main okay so when you want to execute something you create a virtual machine",
    "start": "2444440",
    "end": "2449480"
  },
  {
    "text": "that has code and you tell me where to start that's not quite right we got to tell much tell it how much memory it's",
    "start": "2449480",
    "end": "2454680"
  },
  {
    "text": "got to use so like uh data size whatever um and uh so then what I'm",
    "start": "2454680",
    "end": "2461800"
  },
  {
    "text": "going to do is say make me some data this",
    "start": "2461800",
    "end": "2466838"
  },
  {
    "text": "many that sounds good how about if I make the",
    "start": "2467680",
    "end": "2471760"
  },
  {
    "text": "stack I'll break a bunch of rules here uh now the instruction pointer",
    "start": "2474079",
    "end": "2479119"
  },
  {
    "text": "we're setting in the Constructor the stack pointer remember we want it to start below the stack so that we push",
    "start": "2479119",
    "end": "2485119"
  },
  {
    "text": "before we add so starting at Nega 1 means when I increment it'll start at zero frame",
    "start": "2485119",
    "end": "2492079"
  },
  {
    "text": "pointer uh we don't care what it is the first call will set that okay so that",
    "start": "2492079",
    "end": "2497599"
  },
  {
    "text": "actually creates that picture that we saw um now we need a function to execute",
    "start": "2497599",
    "end": "2502640"
  },
  {
    "text": "it um it's called CPU and it does precisely",
    "start": "2502640",
    "end": "2511160"
  },
  {
    "text": "nothing all right so now we know how to do this we say give me a virtual machine",
    "start": "2511319",
    "end": "2516920"
  },
  {
    "text": "and I'm I'm going to pass it code start at address zero because that's address zero and then how much how many data",
    "start": "2516920",
    "end": "2523359"
  },
  {
    "text": "elements do I need zero thank you okay now let us execute",
    "start": "2523359",
    "end": "2531960"
  },
  {
    "text": "it CPU okay give it the old smoke",
    "start": "2531960",
    "end": "2539480"
  },
  {
    "text": "test nothing that's exactly what it should do okay so we have the infrastructure",
    "start": "2540640",
    "end": "2546880"
  },
  {
    "text": "we've actually simulated by we've simulated the",
    "start": "2546880",
    "end": "2552640"
  },
  {
    "text": "elements within a processor we got memory uh stack and",
    "start": "2552640",
    "end": "2557960"
  },
  {
    "text": "registers and I've built my first little program that is pretty boring",
    "start": "2557960",
    "end": "2564599"
  },
  {
    "text": "but and we have a CPU that doesn't actually execute but that's the basic",
    "start": "2564599",
    "end": "2572480"
  },
  {
    "text": "infrastructure all right no Mysteries no Mysteries",
    "start": "2572480",
    "end": "2577680"
  },
  {
    "text": "uh well let's see if we can do this on the Fly um okay so uh let's see we have",
    "start": "2577680",
    "end": "2583040"
  },
  {
    "text": "an instruction pointer which is IP so the first thing we need to do is say what is my op code op code equals code",
    "start": "2583040",
    "end": "2589640"
  },
  {
    "text": "of Ip so that is the fetch let's put that",
    "start": "2589640",
    "end": "2598318"
  },
  {
    "text": "down okay does it still work yay now I don't it's not really a",
    "start": "2598480",
    "end": "2605680"
  },
  {
    "text": "test right because I didn't check to see what it did but okay so we have a Fetch and now we need an",
    "start": "2605680",
    "end": "2611400"
  },
  {
    "text": "execute uh decode so I'm going to say depending on the op code do something",
    "start": "2611400",
    "end": "2617000"
  },
  {
    "text": "and if it's a halt uh do a",
    "start": "2617000",
    "end": "2622400"
  },
  {
    "text": "return uh let's see uh VM B code",
    "start": "2627200",
    "end": "2633160"
  },
  {
    "text": "start and uh",
    "start": "2633480",
    "end": "2638240"
  },
  {
    "text": "probably do this let's once we've fetched",
    "start": "2640200",
    "end": "2645319"
  },
  {
    "text": "the instruction let's move immediately to the operand now if there are no operands that's cool because then I'm",
    "start": "2645319",
    "end": "2651280"
  },
  {
    "text": "just pointing at the next instruction right so this actually executes the halt",
    "start": "2651280",
    "end": "2658040"
  },
  {
    "text": "which is pretty uninteresting because all it does is return but let's run it",
    "start": "2658040",
    "end": "2663359"
  },
  {
    "text": "anyway yay it didn't erase the hard drive Okay so so",
    "start": "2663680",
    "end": "2670480"
  },
  {
    "text": "um let us let's see the simplest Pro program we",
    "start": "2671599",
    "end": "2677119"
  },
  {
    "text": "can probably write that gives some output involves a print so let's put a number on the stack and print",
    "start": "2677119",
    "end": "2683559"
  },
  {
    "text": "it so let's convert where's our",
    "start": "2683559",
    "end": "2689400"
  },
  {
    "text": "hello let's convert this to integer constant um followed by 99 and then",
    "start": "2689400",
    "end": "2697599"
  },
  {
    "text": "let's print and then let's halt why are you doing this to",
    "start": "2697599",
    "end": "2704520"
  },
  {
    "text": "me why are you doing this to me okay so there's a slightly more",
    "start": "2704520",
    "end": "2711240"
  },
  {
    "text": "interesting program that pushes 99 on the stack and then prints so this won't do anything but we",
    "start": "2711240",
    "end": "2719040"
  },
  {
    "text": "can run it and let's see now we go to our virtual machine here Noe that's the",
    "start": "2719040",
    "end": "2724280"
  },
  {
    "text": "wrong one stop looking let's go",
    "start": "2724280",
    "end": "2730280"
  },
  {
    "text": "to this guy all right so now we have to implement the integer",
    "start": "2730280",
    "end": "2737520"
  },
  {
    "text": "constant and we have to implement the",
    "start": "2737520",
    "end": "2742240"
  },
  {
    "text": "print now you'll notice of course that it's only going to do one instruction without a loop so let's make a",
    "start": "2742800",
    "end": "2751839"
  },
  {
    "text": "loop uh while something",
    "start": "2752160",
    "end": "2756799"
  },
  {
    "text": "let's do that and then uh op code equals code IP uh let's see okay uh",
    "start": "2758440",
    "end": "2767119"
  },
  {
    "text": "while that's pretty tricky then isn't it uh let's all change this then while the",
    "start": "2767119",
    "end": "2774160"
  },
  {
    "text": "op code is less than or equal to less than the code length and then we'll probably want to do something like",
    "start": "2774160",
    "end": "2780800"
  },
  {
    "text": "this and uh let's see so we get it inside yeah so we gate it so we guard it",
    "start": "2780800",
    "end": "2786319"
  },
  {
    "text": "so we don't um check it after we've tried to fetch",
    "start": "2786319",
    "end": "2793440"
  },
  {
    "text": "from it right we want to make sure we stay within the code memory so this will stop either if we run out of",
    "start": "2793440",
    "end": "2798640"
  },
  {
    "text": "instructions or if somebody executes",
    "start": "2798640",
    "end": "2803880"
  },
  {
    "text": "halt",
    "start": "2805520",
    "end": "2808520"
  },
  {
    "text": "now let's just do this so This should print",
    "start": "2810640",
    "end": "2819480"
  },
  {
    "text": "hon from our little test now it's doing it's recognizing",
    "start": "2820240",
    "end": "2826079"
  },
  {
    "text": "this it's fetching and decoding but it's not executing this because we haven't done anything it's fetching decoding",
    "start": "2826079",
    "end": "2831400"
  },
  {
    "text": "that and doing something stupid um and it's actually executing that by",
    "start": "2831400",
    "end": "2836720"
  },
  {
    "text": "exiting",
    "start": "2836720",
    "end": "2839720"
  },
  {
    "text": "okay so we know we need",
    "start": "2842960",
    "end": "2848160"
  },
  {
    "text": "well let's do this one at a time okay so how do we get something on the stack well first thing the integer constant",
    "start": "2848160",
    "end": "2853440"
  },
  {
    "text": "instruction has an operand in the code memory so we need to get it from the code memory onto the stack so what is",
    "start": "2853440",
    "end": "2858880"
  },
  {
    "text": "the value uh let's call it the operand whatever so it's on the stack somewhere",
    "start": "2858880",
    "end": "2865160"
  },
  {
    "text": "and I know it's something to do with the stack pointer but",
    "start": "2865160",
    "end": "2870280"
  },
  {
    "text": "um to pop something I take the value at the top of",
    "start": "2870280",
    "end": "2875480"
  },
  {
    "text": "the stack and then I decrement the stack pointer uh yeah rose up",
    "start": "2875480",
    "end": "2881800"
  },
  {
    "text": "ports so to push I increment all right so that's the gets the value off the",
    "start": "2881800",
    "end": "2887000"
  },
  {
    "text": "stack now I need to push something on the stack oh no that's not what I'm doing that just uh got",
    "start": "2887000",
    "end": "2894319"
  },
  {
    "text": "the I'm so you guys can stop me when I'm doing something stupid that's fine that was that was the opposite yeah",
    "start": "2894319",
    "end": "2901000"
  },
  {
    "text": "I'm going the wrong direction you want to get for print instruction right exactly so uh I want to get the operand",
    "start": "2901000",
    "end": "2908040"
  },
  {
    "text": "out of the code memory and this points at the operand so this gets the value and now I want to increment the stack",
    "start": "2908040",
    "end": "2915240"
  },
  {
    "text": "pointer and then stick something on",
    "start": "2915240",
    "end": "2919359"
  },
  {
    "text": "there oh correct see if I don't do it at the same",
    "start": "2921400",
    "end": "2927760"
  },
  {
    "text": "time I forget the increment stuff um so although that was probably the craziest",
    "start": "2927760",
    "end": "2932920"
  },
  {
    "text": "thing they allowed you to do is to have side effects like that but whatever um",
    "start": "2932920",
    "end": "2938319"
  },
  {
    "text": "okay so I have now moved to the instruction that follows the operand for",
    "start": "2938319",
    "end": "2943640"
  },
  {
    "text": "the next time I come back around this Loop and I've pushed something on the",
    "start": "2943640",
    "end": "2949440"
  },
  {
    "text": "stack by making room or by moving to the next spot in the stack and then storing the value right there okay so this went",
    "start": "2949440",
    "end": "2955760"
  },
  {
    "text": "from code memory to the stack now to go we go the other way to print I take",
    "start": "2955760",
    "end": "2961880"
  },
  {
    "text": "something off of the stack and then I print it so I'm going to print V V and V is",
    "start": "2961880",
    "end": "2968599"
  },
  {
    "text": "now on the stack so I get what's at the top of the stack and then I pop it by",
    "start": "2968599",
    "end": "2973839"
  },
  {
    "text": "decrementing it does that look right I think so",
    "start": "2973839",
    "end": "2980280"
  },
  {
    "text": "um okay do you want a new um I do I do but um Java won't let",
    "start": "2980280",
    "end": "2987799"
  },
  {
    "text": "me declare it again so it'll re it it'll just assign it it's in the same scope if you do this Java uh",
    "start": "2987799",
    "end": "2996960"
  },
  {
    "text": "you could add braces but that's an extra two characters hey it goes faster if you",
    "start": "2996960",
    "end": "3002680"
  },
  {
    "text": "don't have braces just kidding so anybody keeping up with the",
    "start": "3002680",
    "end": "3011040"
  },
  {
    "text": "code no all all right cool well I me typing it in but that's fine as long as you're mentally with us um or not I get",
    "start": "3011040",
    "end": "3018400"
  },
  {
    "text": "paid the same just nothing um so all right let's run it let's run",
    "start": "3018400",
    "end": "3024599"
  },
  {
    "text": "it our first interpreter crazy right see it's so",
    "start": "3025640",
    "end": "3032040"
  },
  {
    "text": "simple it's so simple um now wouldn't it be nice if we kind of",
    "start": "3032040",
    "end": "3038079"
  },
  {
    "text": "knew what was going on let's add a trace so that we can see which instructions it's executing",
    "start": "3038079",
    "end": "3044799"
  },
  {
    "text": "because right now it's mysterious it gets the right answer but we're not sure how so let's put a little Trace in here",
    "start": "3044799",
    "end": "3050960"
  },
  {
    "text": "where we say um so we can we can add a little buan what you uh Trace equals",
    "start": "3050960",
    "end": "3059240"
  },
  {
    "text": "let's say true well else turn it off by default and then in our",
    "start": "3059240",
    "end": "3067119"
  },
  {
    "text": "test before we execute we can say Trace",
    "start": "3067839",
    "end": "3073640"
  },
  {
    "text": "true and uh so now if Trace is",
    "start": "3074640",
    "end": "3079680"
  },
  {
    "text": "true then let's um let's do it standard here then we",
    "start": "3082520",
    "end": "3089559"
  },
  {
    "text": "want to print the address let's",
    "start": "3089559",
    "end": "3095040"
  },
  {
    "text": "say and um guess we'll need that and then let's put the bite code which is",
    "start": "3096599",
    "end": "3104240"
  },
  {
    "text": "the op code here and I guess we can do a new",
    "start": "3104240",
    "end": "3109119"
  },
  {
    "text": "line oh I need something else I want a comma don't yes and I want",
    "start": "3112240",
    "end": "3117680"
  },
  {
    "text": "another value there you go PA programming",
    "start": "3117680",
    "end": "3123280"
  },
  {
    "text": "awesome has anyone managed to do par programming here without killing their partner just kind of an informal",
    "start": "3123280",
    "end": "3130000"
  },
  {
    "text": "software engineering anybody I guess not see doesn't work uh okay so now check out it said it",
    "start": "3130000",
    "end": "3139079"
  },
  {
    "text": "address zero it executed by code n at address two it executed 14 and 16 what",
    "start": "3139079",
    "end": "3145520"
  },
  {
    "text": "that doesn't look very good what the the hell is 16 oh well if I don't have you around",
    "start": "3145520",
    "end": "3151000"
  },
  {
    "text": "how do I know what it is so we got to make a mapping that goes from B code back to string",
    "start": "3151000",
    "end": "3156640"
  },
  {
    "text": "right so one way to do that is to go back to our B code",
    "start": "3156640",
    "end": "3162760"
  },
  {
    "text": "and make an array of strings that um is the op",
    "start": "3162760",
    "end": "3170240"
  },
  {
    "text": "codes and then we just do this um the first one's invalid and then for is I",
    "start": "3170240",
    "end": "3177160"
  },
  {
    "text": "add iub I add I sub and so",
    "start": "3177160",
    "end": "3183160"
  },
  {
    "text": "on and then we could go in here in",
    "start": "3183160",
    "end": "3188839"
  },
  {
    "text": "here and say uh by code do op",
    "start": "3188839",
    "end": "3198960"
  },
  {
    "text": "codes did I make that static I guess not real static",
    "start": "3199040",
    "end": "3206920"
  },
  {
    "text": "uh op codes that's not very nice op codes of op code and then",
    "start": "3210400",
    "end": "3217559"
  },
  {
    "text": "that'll kind of Crash because it'll be out of bounds but um you can see that",
    "start": "3217559",
    "end": "3222799"
  },
  {
    "text": "this is getting us closer uh the one thing it doesn't say",
    "start": "3222799",
    "end": "3228680"
  },
  {
    "text": "though actually do we need to know that",
    "start": "3228680",
    "end": "3233640"
  },
  {
    "text": "yes the one thing it doesn't say is how many operands there are and it'd be nice to know those are",
    "start": "3237960",
    "end": "3244720"
  },
  {
    "text": "so we could print out the operands as well because right now we just print the op code so if there's zero one or two",
    "start": "3244720",
    "end": "3250000"
  },
  {
    "text": "operands we don't know by this number I mean we'd have to have another table that said map the bik code to how many",
    "start": "3250000",
    "end": "3256640"
  },
  {
    "text": "operants and we could do that too but we're oper object or programming dudes and du Debs so let's do that",
    "start": "3256640",
    "end": "3264799"
  },
  {
    "text": "by borrowing this little class here which groups a",
    "start": "3264799",
    "end": "3271599"
  },
  {
    "text": "name and the number of argument uh number yeah the number of",
    "start": "3271599",
    "end": "3276559"
  },
  {
    "text": "operands could do that it's true that's",
    "start": "3277640",
    "end": "3284960"
  },
  {
    "text": "true that's true and I could also specify the bite code yeah could do that",
    "start": "3285119",
    "end": "3290520"
  },
  {
    "text": "I got to get with the like 90s on Java for some reason the enums on in",
    "start": "3290520",
    "end": "3296559"
  },
  {
    "text": "Java have always pissed me off I don't know why they always sound awesome and every time I go down that path in the end I get pissed off and I go back to an",
    "start": "3296559",
    "end": "3302599"
  },
  {
    "text": "iner I don't know why it works great when I'm teaching the stuff I go like oh here's any new for Sunday Monday Tuesday",
    "start": "3302599",
    "end": "3309119"
  },
  {
    "text": "Wednesday but every time I use it for real it doesn't do what I want yeah yeah the same happens to me",
    "start": "3309119",
    "end": "3317160"
  },
  {
    "text": "but then somebody my code and ask me why don't you useem yeah",
    "start": "3317160",
    "end": "3322960"
  },
  {
    "text": "exactly IOP do while and just",
    "start": "3322960",
    "end": "3328318"
  },
  {
    "text": "yeah okay so this is just a uh this is the number of um operand in fact we can",
    "start": "3328720",
    "end": "3336480"
  },
  {
    "text": "do a little better than n operands and uh fix",
    "start": "3336480",
    "end": "3343280"
  },
  {
    "text": "that operand okay and so then instead of",
    "start": "3343280",
    "end": "3349559"
  },
  {
    "text": "doing it this way we will do new instruction um and then how many operant",
    "start": "3349559",
    "end": "3356839"
  },
  {
    "text": "I guess if we don't give one then it's zero uh did I do that right number what's wrong with that oh",
    "start": "3356839",
    "end": "3365559"
  },
  {
    "text": "the here we go and this will just be null and so on and so forth now of",
    "start": "3365559",
    "end": "3373640"
  },
  {
    "text": "course I'm not going to retype all that in front of you because I don't hate you that much but just a little bit uh let's",
    "start": "3373640",
    "end": "3381640"
  },
  {
    "text": "do this I'll just cut and paste it because",
    "start": "3381640",
    "end": "3387440"
  },
  {
    "text": "that's exactly what this is right I'm just magically pulling that cake out of the oven as if we had baked it for 45",
    "start": "3387440",
    "end": "3395359"
  },
  {
    "text": "minutes and I put that in my bite codes get rid of this",
    "start": "3395359",
    "end": "3401160"
  },
  {
    "text": "crap okay that's good so that oh and it doesn't have call because that's in the",
    "start": "3401160",
    "end": "3406920"
  },
  {
    "text": "other Branch um now I go back to my virtual machine I've changed the name of this to",
    "start": "3406920",
    "end": "3413160"
  },
  {
    "text": "instructions um so this gets let's get the name and then I can print the",
    "start": "3413160",
    "end": "3420880"
  },
  {
    "text": "operands by if all right let's do",
    "start": "3420880",
    "end": "3426558"
  },
  {
    "text": "this if the number of instructions number operands",
    "start": "3431839",
    "end": "3437960"
  },
  {
    "text": "is one instructions. number operands is two",
    "start": "3437960",
    "end": "3446280"
  },
  {
    "text": "do that okay so now we'll get rid of this if there's an",
    "start": "3446280",
    "end": "3455480"
  },
  {
    "text": "operand we're going to [Music]",
    "start": "3455960",
    "end": "3460649"
  },
  {
    "text": "do we're going to put a space and then the operand and that operand is at code",
    "start": "3461240",
    "end": "3466319"
  },
  {
    "text": "IP plus1 and we're going to print whatever the",
    "start": "3466319",
    "end": "3473680"
  },
  {
    "text": "integer value is if there's two of",
    "start": "3473680",
    "end": "3478440"
  },
  {
    "text": "them uh just to be sure that we do it the right way I'll cut and paste this",
    "start": "3480640",
    "end": "3486559"
  },
  {
    "text": "and then if there's two we're going to put actually",
    "start": "3486559",
    "end": "3491838"
  },
  {
    "text": "this plus two and oh then to be good little",
    "start": "3493520",
    "end": "3500480"
  },
  {
    "text": "programmers Let's uh disassemble",
    "start": "3500480",
    "end": "3507559"
  },
  {
    "text": "op code and do a little refactoring because we always clean up right",
    "start": "3508520",
    "end": "3515880"
  },
  {
    "text": "that oh",
    "start": "3515880",
    "end": "3519078"
  },
  {
    "text": "thanks oh thank you let's see there we",
    "start": "3524280",
    "end": "3529599"
  },
  {
    "text": "go and then uh that'll throw it on the end yeah that'll probably work",
    "start": "3529599",
    "end": "3536839"
  },
  {
    "text": "okay so now let's run it and see what we get oh much easier to read huh let's",
    "start": "3536839",
    "end": "3545079"
  },
  {
    "text": "move that up so unfortunately the the streams",
    "start": "3545079",
    "end": "3550880"
  },
  {
    "text": "aren't synchronized that way but the 99 just happens to come out at the same",
    "start": "3550880",
    "end": "3556079"
  },
  {
    "text": "time now of course it doesn't show us what the stack it looks like to save us all a little pain I will",
    "start": "3556400",
    "end": "3563160"
  },
  {
    "text": "go grab that from this virtual machine so you look at the bottom and this th JS",
    "start": "3563160",
    "end": "3571039"
  },
  {
    "text": "the instruction um oh oh These are the operand stack",
    "start": "3571039",
    "end": "3578319"
  },
  {
    "text": "okay oh it's funny two days later I'm doing it totally differently okay shows I can't remember",
    "start": "3580359",
    "end": "3586960"
  },
  {
    "text": "what I had for lunch okay so those are the operand and now what we want is the",
    "start": "3586960",
    "end": "3592480"
  },
  {
    "text": "stack so this",
    "start": "3592480",
    "end": "3596799"
  },
  {
    "text": "one of the things that changes and you get older when you write code you write more comments because you can't remember",
    "start": "3598000",
    "end": "3603880"
  },
  {
    "text": "literally anything and so rather than look stupid in front of your colleagues you put comments in your code so you can remember what you're doing um okay so",
    "start": "3603880",
    "end": "3611240"
  },
  {
    "text": "but of course I called this the stack I guess and now this is going to be",
    "start": "3611240",
    "end": "3619440"
  },
  {
    "text": "length uh am I doing this right way okay so I have an array",
    "start": "3619440",
    "end": "3626160"
  },
  {
    "text": "and I want to go from zero to the stack pointer God only knows what the hell I was doing let me think instead of cut",
    "start": "3626160",
    "end": "3632240"
  },
  {
    "text": "paste uh so this top of the stack is valid and so I want to get the top of",
    "start": "3632240",
    "end": "3637680"
  },
  {
    "text": "the stack whatever the value",
    "start": "3637680",
    "end": "3642880"
  },
  {
    "text": "is and oh I know why I was doing it this way because I was adding um yeah I was uh GNA use the string",
    "start": "3642920",
    "end": "3650559"
  },
  {
    "text": "print out of that to format it ah yeah okay whatever all right so I'm getting the value",
    "start": "3650559",
    "end": "3657920"
  },
  {
    "text": "and um let's just do it this tricky",
    "start": "3658319",
    "end": "3663839"
  },
  {
    "text": "way oh",
    "start": "3664280",
    "end": "3667720"
  },
  {
    "text": "crap oh you're killing me I cry a little bit every time I have to do this in",
    "start": "3676559",
    "end": "3683480"
  },
  {
    "text": "Java a you",
    "start": "3683480",
    "end": "3687799"
  },
  {
    "text": "and then this way we can just print this out when we're",
    "start": "3695720",
    "end": "3700599"
  },
  {
    "text": "done stack okay now we'll automatically get the brackets and crap around it let's see if this does it of course",
    "start": "3703359",
    "end": "3709799"
  },
  {
    "text": "we're going to want a couple of tabs aray and do that",
    "start": "3709799",
    "end": "3715160"
  },
  {
    "text": "for oh that's true that's true uh let's see can we do a subarray and",
    "start": "3715160",
    "end": "3721839"
  },
  {
    "text": "then all right well let's just forge",
    "start": "3721839",
    "end": "3728680"
  },
  {
    "text": "ahead since this will probably work it won't be pretty like the other thing I had because I did alignment and stuff",
    "start": "3728680",
    "end": "3733920"
  },
  {
    "text": "like that but okay so now it's oh and it's doing",
    "start": "3733920",
    "end": "3739119"
  },
  {
    "text": "it afterwards um this is printing the stack",
    "start": "3739119",
    "end": "3744880"
  },
  {
    "text": "before I execute the in instruction right because here I'm printing I'm tracing so it won't look exactly like",
    "start": "3744880",
    "end": "3750400"
  },
  {
    "text": "what I've got so let me go fix that by getting the real",
    "start": "3750400",
    "end": "3756760"
  },
  {
    "text": "one uh let's see is this going to be doing exactly what I",
    "start": "3756760",
    "end": "3762520"
  },
  {
    "text": "want that makes me a little nervous why is that uh oh it's doing it after it's executed it",
    "start": "3772440",
    "end": "3778359"
  },
  {
    "text": "okay that makes more sense actually all right so I'm going to do it the way I had before which printed it nicely so",
    "start": "3778359",
    "end": "3784480"
  },
  {
    "text": "I'm not going to do the trace before I'm going to trace after I've executed the instruction so that I can show what",
    "start": "3784480",
    "end": "3790520"
  },
  {
    "text": "the uh stack looks like after it's executed um op code I don't really need",
    "start": "3790520",
    "end": "3799920"
  },
  {
    "text": "that what the hell what's going on",
    "start": "3803799",
    "end": "3808119"
  },
  {
    "text": "here okay give me the air can I resolve print",
    "start": "3808839",
    "end": "3814520"
  },
  {
    "text": "F uh oh disassemble is got to come",
    "start": "3814520",
    "end": "3819160"
  },
  {
    "text": "back okay so now will get the actual thingy which comes back with a",
    "start": "3819559",
    "end": "3825960"
  },
  {
    "text": "string shouldn't have bothered with a trace you could trust me on the",
    "start": "3825960",
    "end": "3830920"
  },
  {
    "text": "trace just get rid of this whole",
    "start": "3833920",
    "end": "3837720"
  },
  {
    "text": "thing there we go and of course I've renamed that",
    "start": "3842799",
    "end": "3848640"
  },
  {
    "text": "yes uh what else screwed up and one more",
    "start": "3848640",
    "end": "3855119"
  },
  {
    "text": "thing this okay so all I've done is move the trace down to the bottom and cut and paste the thing that I know works",
    "start": "3855119",
    "end": "3863880"
  },
  {
    "text": "quite come on",
    "start": "3872720",
    "end": "3876920"
  },
  {
    "text": "bastard",
    "start": "3878720",
    "end": "3881720"
  },
  {
    "text": "stack okay I guess we need that one too while we're at it I'll just get all of these",
    "start": "3884039",
    "end": "3892160"
  },
  {
    "text": "let's get all this crap just for fun so that's all just tracing stuff has nothing to do with the",
    "start": "3901200",
    "end": "3906920"
  },
  {
    "text": "inter globals I think I called that data actually I better rename that",
    "start": "3908160",
    "end": "3914039"
  },
  {
    "text": "because to make it consistent with the other code",
    "start": "3914039",
    "end": "3920359"
  },
  {
    "text": "okay and op Brands okay now it will look",
    "start": "3920359",
    "end": "3928440"
  },
  {
    "text": "right okay uh why is it pretty good dat memory",
    "start": "3929920",
    "end": "3938160"
  },
  {
    "text": "twice that's going to dump after we've executed",
    "start": "3947839",
    "end": "3952559"
  },
  {
    "text": "everything okay now we got it so now it's printing the stack right okay um so",
    "start": "3953799",
    "end": "3959160"
  },
  {
    "text": "we need to make a more complicated program it's the only thing left is the set of",
    "start": "3959160",
    "end": "3965599"
  },
  {
    "text": "instructions um let's look at loading and storing",
    "start": "3965599",
    "end": "3971680"
  },
  {
    "text": "from Global memory oh that is an excellent question",
    "start": "3971680",
    "end": "3978799"
  },
  {
    "text": "um yeah I incremented it uh let's see so what did I yes what did I do",
    "start": "3978799",
    "end": "3987559"
  },
  {
    "text": "here oh holy crap got that",
    "start": "3989200",
    "end": "3996680"
  },
  {
    "text": "first oh and then the last one ah the last instruction excuse I got I go",
    "start": "3996680",
    "end": "4002720"
  },
  {
    "text": "you",
    "start": "4002720",
    "end": "4005720"
  },
  {
    "text": "okay right before the increment all right and then we move",
    "start": "4008440",
    "end": "4014000"
  },
  {
    "text": "these guys outside as",
    "start": "4014000",
    "end": "4020200"
  },
  {
    "text": "well bastard I'm missing after I've executed",
    "start": "4024520",
    "end": "4031640"
  },
  {
    "text": "the stack missing this guy good Lord all just to get this",
    "start": "4031640",
    "end": "4040278"
  },
  {
    "text": "Trace that's going to be just inside the while loop",
    "start": "4041200",
    "end": "4046680"
  },
  {
    "text": "oh thank God okay so now we have the the",
    "start": "4047440",
    "end": "4053559"
  },
  {
    "text": "trace but it's General and it'll work for any of the instructions that we have all right so let's do the um the",
    "start": "4053559",
    "end": "4062279"
  },
  {
    "text": "global stuff so let's make a little program that stores 99 somewhere let's",
    "start": "4062279",
    "end": "4070400"
  },
  {
    "text": "store it at address zero in global memory Global store",
    "start": "4070400",
    "end": "4076079"
  },
  {
    "text": "uh that 99 let's put it at address zero and then let's load it back in and print that okay so I'm taking 99",
    "start": "4076079",
    "end": "4084880"
  },
  {
    "text": "putting it on the stack I'm storing it in address zero in global memory that means I need one memory location and",
    "start": "4084880",
    "end": "4090720"
  },
  {
    "text": "then I'm loading it back in putting it on the stack and then printing it so now I tell it I've got to",
    "start": "4090720",
    "end": "4095920"
  },
  {
    "text": "have one global data",
    "start": "4095920",
    "end": "4104080"
  },
  {
    "text": "size here we go um and let's make this",
    "start": "4104080",
    "end": "4111318"
  },
  {
    "text": "one as a main IP okay um now we execute this course",
    "start": "4111359",
    "end": "4118520"
  },
  {
    "text": "it's not going to understand those instructions so we've got to implement uh Global store Global load so let's go jump in there real quick all",
    "start": "4118520",
    "end": "4127199"
  },
  {
    "text": "right Global load Global store let's do the store",
    "start": "4127480",
    "end": "4135120"
  },
  {
    "text": "first okay so the global store takes something from the top of",
    "start": "4135120",
    "end": "4141719"
  },
  {
    "text": "the stack and then stores it somewhere so let's do that first let's get the",
    "start": "4141719",
    "end": "4147278"
  },
  {
    "text": "value we've gotten the value off the top of the stack and popped it and now I want to",
    "start": "4147279",
    "end": "4154318"
  },
  {
    "text": "store it at an address specified in the code memory",
    "start": "4154319",
    "end": "4163520"
  },
  {
    "text": "because the code memory has the op code and it's got this operand which is the address to store it at the value it",
    "start": "4165839",
    "end": "4171440"
  },
  {
    "text": "stores is from the stack so now I've got everything I need and I can say uh whatever the global space is store at",
    "start": "4171440",
    "end": "4178920"
  },
  {
    "text": "that address that value that I pulled off",
    "start": "4178920",
    "end": "4183519"
  },
  {
    "text": "stack to load something from Global memory I got to go the other way I got to get the",
    "start": "4185679",
    "end": "4191040"
  },
  {
    "text": "address it's now going to screw me up again I got to get the address as the",
    "start": "4191040",
    "end": "4197640"
  },
  {
    "text": "operand got to increment over that operand load so and uh now I get the",
    "start": "4197640",
    "end": "4207880"
  },
  {
    "text": "value uh from the stack",
    "start": "4208120",
    "end": "4214520"
  },
  {
    "text": "right pop it oh yeah sorry thank you",
    "start": "4214520",
    "end": "4219760"
  },
  {
    "text": "globals address I get it from Global memory and now I need to stick it on the stack which means I increment",
    "start": "4219760",
    "end": "4226719"
  },
  {
    "text": "and then I say stack at the top of the stack store that",
    "start": "4226719",
    "end": "4231920"
  },
  {
    "text": "value I think that's right",
    "start": "4232120",
    "end": "4237360"
  },
  {
    "text": "okay so after we execute this we should not only see the value 99",
    "start": "4237360",
    "end": "4244320"
  },
  {
    "text": "come out we should also see it uh when it prints data memory out we should see one value in data",
    "start": "4244320",
    "end": "4250560"
  },
  {
    "text": "memory of 99 not bring the DAT in memory why",
    "start": "4250560",
    "end": "4257360"
  },
  {
    "text": "not let's see here at least it printed the right thing and executed it let's see here dump data",
    "start": "4257360",
    "end": "4267599"
  },
  {
    "text": "memory that's interesting",
    "start": "4275239",
    "end": "4279480"
  },
  {
    "text": "somebody's calling this for sure right",
    "start": "4285719",
    "end": "4292760"
  },
  {
    "text": "yes oh the halt is returning the halt damn that",
    "start": "4292760",
    "end": "4301440"
  },
  {
    "text": "halt there you go that'll solve that problem actually",
    "start": "4301440",
    "end": "4307320"
  },
  {
    "text": "that's not right we gota leave that in there so let's uh yeah you can do it a finally um just get rid of the halt",
    "start": "4307320",
    "end": "4314080"
  },
  {
    "text": "return break we'll just yeah that's true break uh no break will break the switch",
    "start": "4314080",
    "end": "4321159"
  },
  {
    "text": "we need to break the loop so that's all right lab it uh we could label it or we",
    "start": "4321159",
    "end": "4326480"
  },
  {
    "text": "could take out the H uh let's let's break uh the",
    "start": "4326480",
    "end": "4331199"
  },
  {
    "text": "loop Beyond yeah that's",
    "start": "4333159",
    "end": "4339080"
  },
  {
    "text": "true Loop okay now let's see what we're doing",
    "start": "4341320",
    "end": "4349480"
  },
  {
    "text": "here we're index out let's see so it's trying",
    "start": "4350080",
    "end": "4355639"
  },
  {
    "text": "to go too",
    "start": "4355639",
    "end": "4359280"
  },
  {
    "text": "far because we let the IP increment Beyond so we can't disassemble there so",
    "start": "4363920",
    "end": "4369639"
  },
  {
    "text": "we need a guard is greater than or equal",
    "start": "4369639",
    "end": "4376159"
  },
  {
    "text": "to code length that bugs me",
    "start": "4376159",
    "end": "4383520"
  },
  {
    "text": "return uh",
    "start": "4383520",
    "end": "4387199"
  },
  {
    "text": "nothing okay so now you can see at address zero in data memory we have",
    "start": "4388560",
    "end": "4394040"
  },
  {
    "text": "99 and so we got the 99 on the stack we stored it in location zero and that",
    "start": "4394040",
    "end": "4400520"
  },
  {
    "text": "disappeared from the stack I load zero I get it on the stack I print it takes it off the stack emits",
    "start": "4400520",
    "end": "4407440"
  },
  {
    "text": "it and then H terminates",
    "start": "4407440",
    "end": "4413400"
  },
  {
    "text": "okay um let's look at the other instructions real quick",
    "start": "4414040",
    "end": "4419600"
  },
  {
    "text": "um are there any of these you want me to go over before we hit the function stuff",
    "start": "4419600",
    "end": "4426639"
  },
  {
    "text": "see it's almost need clock okay so we're coming up on close to an hour and a half",
    "start": "4426639",
    "end": "4431880"
  },
  {
    "text": "it's sort of a general question but why we always load things into into the",
    "start": "4431880",
    "end": "4437040"
  },
  {
    "text": "stack before doing something with them instead of just doing it from is it just so there's less instructions um it's a",
    "start": "4437040",
    "end": "4445159"
  },
  {
    "text": "tighter uh code format generally if you don't have a have a lot of addresses like if you just had like you know uh a",
    "start": "4445159",
    "end": "4454480"
  },
  {
    "text": "plus b as variables you'd have to um",
    "start": "4454480",
    "end": "4459760"
  },
  {
    "text": "have possibly 32 bit addresses you could use uh well in that case",
    "start": "4459760",
    "end": "4466000"
  },
  {
    "text": "could um well let me let me think more carefully about that so why why don't we",
    "start": "4466000",
    "end": "4472360"
  },
  {
    "text": "pull it directly well because it can come from a lot of different places right so the ad",
    "start": "4472360",
    "end": "4478120"
  },
  {
    "text": "instruction always knows that it's coming from the stack it doesn't need to know that it's a local or a a parameter",
    "start": "4478120",
    "end": "4484560"
  },
  {
    "text": "or a global you can just have a whole bunch of combinations you could have you could",
    "start": "4484560",
    "end": "4489679"
  },
  {
    "text": "have enough combinations but then and different operands right so it's a combinatorial explosion of thing so they",
    "start": "4489679",
    "end": "4496440"
  },
  {
    "text": "basically normalize it what's that",
    "start": "4496440",
    "end": "4502920"
  },
  {
    "text": "have load load ad yeah oh this is definit I mean",
    "start": "4503719",
    "end": "4508880"
  },
  {
    "text": "basically for efficiency you wouldn't use a stack machine you would use a register version of this machine where",
    "start": "4508880",
    "end": "4515159"
  },
  {
    "text": "you could actually hold on to Temporary values because this is stupid right we're storing it and then we got to load",
    "start": "4515159",
    "end": "4520679"
  },
  {
    "text": "it back right if we stored it in a so-called register which is just another memory location um it actually produces",
    "start": "4520679",
    "end": "4528760"
  },
  {
    "text": "a slightly larger instruction set but it goes faster because we can save some pushes and Pops because the fewer",
    "start": "4528760",
    "end": "4534760"
  },
  {
    "text": "instructions you have the faster it goes the overhead for each one of these instructions as we go through the fetch",
    "start": "4534760",
    "end": "4539800"
  },
  {
    "text": "execute cycle is very high so you want you want the Cod to be as tight as you can but you want the fewest number of",
    "start": "4539800",
    "end": "4546080"
  },
  {
    "text": "instructions because you've got that overhead on fetch execute decode and all that Ma kind of number of instructions",
    "start": "4546080",
    "end": "4554679"
  },
  {
    "text": "in programmer fewest number instru instruction uh in the the fewest number",
    "start": "4554679",
    "end": "4559840"
  },
  {
    "text": "of instructions executed for the same functionality the fewer the instructions you interpret the",
    "start": "4559840",
    "end": "4565120"
  },
  {
    "text": "faster it'll go so in that sense you want really fat instructions that do more where does that overhead come from",
    "start": "4565120",
    "end": "4572199"
  },
  {
    "text": "and number of instructions why is that uh it comes",
    "start": "4572199",
    "end": "4577120"
  },
  {
    "text": "from this little bit right here so it's got this this Loop right",
    "start": "4578239",
    "end": "4585480"
  },
  {
    "text": "it's got to fetch it uh do this switch to decode it and",
    "start": "4585480",
    "end": "4590600"
  },
  {
    "text": "remember the bigger this switch the more instructions you have things like that that are in the",
    "start": "4590600",
    "end": "4596480"
  },
  {
    "text": "instruction set if you have more instructions physically just in your instruction set",
    "start": "4596480",
    "end": "4602080"
  },
  {
    "text": "it can push this out of cash maybe right so the cash issues like the dovic VM guy",
    "start": "4602080",
    "end": "4607320"
  },
  {
    "text": "Dan Bourn I guess he's not here tonight but he told me that they added a couple of machine",
    "start": "4607320",
    "end": "4612360"
  },
  {
    "text": "instructions and it pushed their VM out of the cache and all of a sudden the",
    "start": "4612360",
    "end": "4619920"
  },
  {
    "text": "their tests had made their VM seem unbelievably slow all of a sudden and all they did was shift something and",
    "start": "4619920",
    "end": "4625719"
  },
  {
    "text": "they missed a cach line or something so when you get really re when you your phone feels fast or slow based upon the",
    "start": "4625719",
    "end": "4632920"
  },
  {
    "text": "VM every single you know all your understanding of architecture and everything comes into play um but in",
    "start": "4632920",
    "end": "4639560"
  },
  {
    "text": "general there's a lot of overhead in this Loop right and the loop is bad enough that people will actually do",
    "start": "4639560",
    "end": "4644639"
  },
  {
    "text": "something something called a um I guess you call it a threaded interpreter where instead of doing a break see remember",
    "start": "4644639",
    "end": "4651840"
  },
  {
    "text": "modern processors have this pipeline right so if you have this if you change where the program counter is it it",
    "start": "4651840",
    "end": "4659280"
  },
  {
    "text": "throws away a lot of stuff it's already done because as I'm executing I'm actually prefetching other stuff and so",
    "start": "4659280",
    "end": "4664480"
  },
  {
    "text": "it causes this pipeline bubble so this branch is this Brak is actually a branch to the bottom of the loop and then it's",
    "start": "4664480",
    "end": "4670480"
  },
  {
    "text": "a branch back to the top to execute this come back in and jump to the right thing there's a lot of branching the more",
    "start": "4670480",
    "end": "4676239"
  },
  {
    "text": "branching you to do slower your processor it's going to go your physical processor and so what they'll do is",
    "start": "4676239",
    "end": "4681760"
  },
  {
    "text": "they'll change this brake into a computed goto they'll in like in C you can do something",
    "start": "4681760",
    "end": "4687000"
  },
  {
    "text": "like uh jump to the address associated with the next op code you know or",
    "start": "4687000",
    "end": "4693199"
  },
  {
    "text": "whatever and it'll do this funky jump directly to the next little",
    "start": "4693199",
    "end": "4698800"
  },
  {
    "text": "snippet of code here so you do everything you can to get rid of this um this thing and it's all",
    "start": "4698800",
    "end": "4705520"
  },
  {
    "text": "architecture related would the order matters depend on the most popular",
    "start": "4705520",
    "end": "4711600"
  },
  {
    "text": "instruction right so they do that too exactly right they they order them by",
    "start": "4711600",
    "end": "4716679"
  },
  {
    "text": "the frequency they analyze the programs and they figure out which instructions are more common and then you make sure",
    "start": "4716679",
    "end": "4722320"
  },
  {
    "text": "those are together uh so that they're more likely to fit in the cach and together on the same cach line maybe and",
    "start": "4722320",
    "end": "4729000"
  },
  {
    "text": "um and most of the time all this will be written in machine code so sounds like",
    "start": "4729000",
    "end": "4734880"
  },
  {
    "text": "you know trying to optimize a virtual machine you want to balance the instruction set with registers just",
    "start": "4734880",
    "end": "4741239"
  },
  {
    "text": "instead of as you sayal explosion of different of ways accessing like how do we simplify give you enough correct room",
    "start": "4741239",
    "end": "4748639"
  },
  {
    "text": "to be fast yeah it's it's uh it is",
    "start": "4748639",
    "end": "4754239"
  },
  {
    "text": "definitely you know to get a virtual machine working you can see even though I'm fumbling around a little bit here it's very easy uh to make one go fast is",
    "start": "4754239",
    "end": "4762239"
  },
  {
    "text": "very hard especially if everyone 's looking at your phone going man this is slow um so and then of course this is",
    "start": "4762239",
    "end": "4770440"
  },
  {
    "text": "just The Interpreter if you want to do the real uh a real virtual machine now that",
    "start": "4770440",
    "end": "4776400"
  },
  {
    "text": "compiles down to machine code you got even a harder problem and uh that's you know well",
    "start": "4776400",
    "end": "4781560"
  },
  {
    "text": "beyond my experience though uh I mean I could do a simple one but U so I mean they spent you know",
    "start": "4781560",
    "end": "4789199"
  },
  {
    "text": "maybe a billion dollars on that virtual machine for Java so um yeah so instruction set design so",
    "start": "4789199",
    "end": "4795960"
  },
  {
    "text": "for example um what happens a lot well we we",
    "start": "4795960",
    "end": "4801280"
  },
  {
    "text": "uh use 01 and two a lot you know when you're writing code right I + one um you",
    "start": "4801280",
    "end": "4808040"
  },
  {
    "text": "know set X to Zero we use those literal integers a lot so we're doing a lot of I",
    "start": "4808040",
    "end": "4813960"
  },
  {
    "text": "const and whatever so even the Java VM does this they make instructions called",
    "start": "4813960",
    "end": "4819080"
  },
  {
    "text": "push zero so it's not a bite code that says push and then zero or one or two",
    "start": "4819080",
    "end": "4825040"
  },
  {
    "text": "they literally make B codes so it uses eight bits instead of8 bits plus the operand so it reduces the decode time",
    "start": "4825040",
    "end": "4832679"
  },
  {
    "text": "because you don't have to fetch that in memory and it shrinks the size of the program maybe then that'll all fit in",
    "start": "4832679",
    "end": "4839239"
  },
  {
    "text": "cash right so um there's a lot of uh a lot you can do to improve the performance of these VMS just by fussing",
    "start": "4839239",
    "end": "4846280"
  },
  {
    "text": "with the instruction set so okay so I guess there's nothing else",
    "start": "4846280",
    "end": "4853280"
  },
  {
    "text": "super mysterious in this instru instruction set other than the call and return um so these you know Branch as we",
    "start": "4853280",
    "end": "4862800"
  },
  {
    "text": "showed earlier is just get the address out of the code operand and set the",
    "start": "4862800",
    "end": "4868040"
  },
  {
    "text": "special register IP and then all of a sudden you're at the new location and if you want to Branch only if true then you",
    "start": "4868040",
    "end": "4874199"
  },
  {
    "text": "figure out where you're going to go you have to get that anyway to increment Beyond it um and then you check the top",
    "start": "4874199",
    "end": "4879880"
  },
  {
    "text": "of the stack you pop the top of the stack and see if it's true and I just made that one the number one I encoded",
    "start": "4879880",
    "end": "4886080"
  },
  {
    "text": "Boolean one true as one and then you set that otherwise you just keep going so",
    "start": "4886080",
    "end": "4891760"
  },
  {
    "text": "you can see how these branches work um loads I guess these are for locals they should have gone only in the",
    "start": "4891760",
    "end": "4898000"
  },
  {
    "text": "other Branch but as I I showed you these locals and arguments are all offsets",
    "start": "4898000",
    "end": "4903679"
  },
  {
    "text": "from the frame pointer so you get the offset from code memory and then you get the value from",
    "start": "4903679",
    "end": "4910920"
  },
  {
    "text": "the stack not at the top but relative to the frame pointer and then you push that so here's the push of something I yank",
    "start": "4910920",
    "end": "4918719"
  },
  {
    "text": "from somewhere else on the stack so let's uh switch branches",
    "start": "4918719",
    "end": "4924760"
  },
  {
    "text": "now and I better move this module out of",
    "start": "4924760",
    "end": "4932800"
  },
  {
    "text": "here now let's move it up here okay see if it'll let me uh oh yeah duh",
    "start": "4932800",
    "end": "4943320"
  },
  {
    "text": "oh crap now I'm really getting into to",
    "start": "4947520",
    "end": "4955400"
  },
  {
    "text": "territory I'm not good at get Mr assembly code oh you",
    "start": "4955400",
    "end": "4961719"
  },
  {
    "text": "bastard let's see branch is ahead by one but that's okay did that did it actually",
    "start": "4961719",
    "end": "4967280"
  },
  {
    "text": "switch me yay it switched me okay it already",
    "start": "4967280",
    "end": "4973560"
  },
  {
    "text": "switched you before oh did it okay you that okay that's fine cool",
    "start": "4973560",
    "end": "4983400"
  },
  {
    "text": "thanks um all right let's figure out what call",
    "start": "4983400",
    "end": "4991360"
  },
  {
    "text": "does so there are two things there are two operands I'm going to get the",
    "start": "4991360",
    "end": "4996560"
  },
  {
    "text": "address comes next that I'm going to jump to and I want to know how many arguments there are to the",
    "start": "4996560",
    "end": "5002320"
  },
  {
    "text": "function so the first thing I do is push oh yeah I wasn't pushing the stack pointer like an idiot I was pushing the",
    "start": "5002320",
    "end": "5008880"
  },
  {
    "text": "the uh the instruction pointer so this is instruction pointer",
    "start": "5008880",
    "end": "5017520"
  },
  {
    "text": "not stack pointer I don't need to save the stack pointer I'm using the damn thing um this is the return",
    "start": "5017520",
    "end": "5024760"
  },
  {
    "text": "address okay that's what I'm pushing on there H go away",
    "start": "5024760",
    "end": "5033960"
  },
  {
    "text": "okay so I pushed the number of arguments I save the frame pointer I",
    "start": "5039360",
    "end": "5045800"
  },
  {
    "text": "store the return address and now I set the frame pointer to point to",
    "start": "5045800",
    "end": "5051440"
  },
  {
    "text": "that uh current position I just pushed which will be the return address and then I",
    "start": "5051440",
    "end": "5056760"
  },
  {
    "text": "jump okay so let's walk through that visually all the arguments have been",
    "start": "5056760",
    "end": "5062239"
  },
  {
    "text": "pushed that is the assumption so I save I get the address and the number of",
    "start": "5062239",
    "end": "5067400"
  },
  {
    "text": "arguments out of the code memory here and then the call",
    "start": "5067400",
    "end": "5073440"
  },
  {
    "text": "instruction pushes a number of arguments saves the frame pointer saves the return",
    "start": "5073440",
    "end": "5080800"
  },
  {
    "text": "address and then sets the frame pointer to point to this because the frame pointer somewhere else pointing at the",
    "start": "5080800",
    "end": "5086239"
  },
  {
    "text": "previous function call and now all of my locals are below me uh are above me and my arguments are",
    "start": "5086239",
    "end": "5092560"
  },
  {
    "text": "below me on the stack so so all positive 1 2 3 and so on are my locals and",
    "start": "5092560",
    "end": "5098760"
  },
  {
    "text": "negative from negative3 down are my",
    "start": "5098760",
    "end": "5102480"
  },
  {
    "text": "arguments I have functions yeah otherwise you'd get lost you",
    "start": "5105920",
    "end": "5112520"
  },
  {
    "text": "wouldn't know which locals you're looking at or whatever it doesn't when you return that",
    "start": "5112520",
    "end": "5118480"
  },
  {
    "text": "tells you how much to pop off correct that's what the that's what these do so let's look at um um in fact I think we",
    "start": "5118480",
    "end": "5125400"
  },
  {
    "text": "can uh do something",
    "start": "5125400",
    "end": "5130760"
  },
  {
    "text": "clever so",
    "start": "5134320",
    "end": "5137599"
  },
  {
    "text": "now um so to return now the stack pointer is",
    "start": "5140920",
    "end": "5148280"
  },
  {
    "text": "playing around uh and they eventually get a return value from the function and they leave it on the stack and then",
    "start": "5148280",
    "end": "5154520"
  },
  {
    "text": "somebody calls return so I get that return value from",
    "start": "5154520",
    "end": "5159600"
  },
  {
    "text": "the top of the stack and now the stack pointer was up here somewhere and I jump over all those",
    "start": "5159600",
    "end": "5166159"
  },
  {
    "text": "locals by setting the stack pointer back to where the frame pointer is so I set the stack pointer back down here so now",
    "start": "5166159",
    "end": "5173199"
  },
  {
    "text": "I just all of this stuff went away from here up so the stack pointer now points down",
    "start": "5173199",
    "end": "5180320"
  },
  {
    "text": "here remember that's instruction pointer return address right there and",
    "start": "5180320",
    "end": "5186239"
  },
  {
    "text": "and now stack pointer is right here and so I pop it and that's the return",
    "start": "5186440",
    "end": "5192000"
  },
  {
    "text": "address so that's I'm jumping back to where I want to go and now I pop the",
    "start": "5192000",
    "end": "5198119"
  },
  {
    "text": "next value off and stick that in the frame pointer because that was the saved frame pointer and then I say okay pop the",
    "start": "5198119",
    "end": "5204960"
  },
  {
    "text": "number of arguments that there were and then drop the stack by that",
    "start": "5204960",
    "end": "5210480"
  },
  {
    "text": "many so I go over the arguments that you originally pushed",
    "start": "5210480",
    "end": "5215800"
  },
  {
    "text": "now that I've gotten rid of all the locals all of my overhead in the frame activation record and all of the",
    "start": "5215800",
    "end": "5223159"
  },
  {
    "text": "arguments that were originally pushed then I push the return value that I got originally from the top of the",
    "start": "5223159",
    "end": "5231159"
  },
  {
    "text": "stack shouldn't where the stack is after you po outs be where the frame pointer",
    "start": "5231239",
    "end": "5236840"
  },
  {
    "text": "is is there um now the frame well the frame pointer is only used to access",
    "start": "5236840",
    "end": "5242800"
  },
  {
    "text": "locals and args during execution of the function so once we're done and we're in the in we're done with the return or",
    "start": "5242800",
    "end": "5249440"
  },
  {
    "text": "we're executing the return instruction the frame pointer is no longer valid we don't care about it we want to set it to",
    "start": "5249440",
    "end": "5255360"
  },
  {
    "text": "what it was in the caller say main calls F once we're done",
    "start": "5255360",
    "end": "5260679"
  },
  {
    "text": "with f we want to set the frame pointer back to where it was for main because when we go back to main we want to",
    "start": "5260679",
    "end": "5265920"
  },
  {
    "text": "access locals again right it's be to that's right it'll be the top of the main stack",
    "start": "5265920",
    "end": "5274239"
  },
  {
    "text": "ah shall we Implement factorial I think we",
    "start": "5282840",
    "end": "5287920"
  },
  {
    "text": "should oh that's so exciting so basically when you have a",
    "start": "5287920",
    "end": "5294040"
  },
  {
    "text": "bunch of functions calling each other you end up with activation me yes yes if we have if we have F",
    "start": "5294040",
    "end": "5303480"
  },
  {
    "text": "calling G calling H you'll have a record that looks like this for f well you'll",
    "start": "5303480",
    "end": "5308560"
  },
  {
    "text": "have one for Main and then you'll have one that looks like this for f and then you'll have one above it for G and then",
    "start": "5308560",
    "end": "5315280"
  },
  {
    "text": "you'll have one above it for H so you'll have like three of these little blue",
    "start": "5315280",
    "end": "5320880"
  },
  {
    "text": "sections on the stack and as you leave H and G and F and go back to main all of",
    "start": "5320880",
    "end": "5326159"
  },
  {
    "text": "these will pop off and as we see this factorial function um you'll see the stack grow",
    "start": "5326159",
    "end": "5334440"
  },
  {
    "text": "and Shrink so we'll start out with like factorial of two to see what the stack looks like um okay so I've played",
    "start": "5334440",
    "end": "5341520"
  },
  {
    "text": "compiler here and so here's the B code for factorial",
    "start": "5341520",
    "end": "5348400"
  },
  {
    "text": "um if the since I don't have less than equal I just have less than this is",
    "start": "5348400",
    "end": "5354600"
  },
  {
    "text": "really if n is less than or equal to one we know what the factorial of that is right it's just one it's zero or one factor has one so this is loading the",
    "start": "5354600",
    "end": "5364159"
  },
  {
    "text": "first argument FP minus 3 is the first",
    "start": "5364159",
    "end": "5369280"
  },
  {
    "text": "argument and then I'm checking if it's less than two by pushing a two and doing a less than now if it's not the case",
    "start": "5370639",
    "end": "5379400"
  },
  {
    "text": "that it's less than two I'm going to jump down to instruction 10 which is to actually compute the factorial otherwise",
    "start": "5379400",
    "end": "5386800"
  },
  {
    "text": "I return one I push a one and return okay so this is just has nothing to do with the execution of The",
    "start": "5386800",
    "end": "5392480"
  },
  {
    "text": "Interpreter this is the compiler translating High Lev language down into these bite codes so some bite code",
    "start": "5392480",
    "end": "5398719"
  },
  {
    "text": "compiler has to do this but I did it for us and I've listed all the addresses here so when I say branch of false to 10",
    "start": "5398719",
    "end": "5404800"
  },
  {
    "text": "you know the 10 is right here okay so now here's a little more complicated one I've got to multiply n times the result",
    "start": "5404800",
    "end": "5410400"
  },
  {
    "text": "of a function call well what is n well it's the",
    "start": "5410400",
    "end": "5417280"
  },
  {
    "text": "argument to the function so I know it's a frame point of minus three so I load it on the stack so I got one operand of",
    "start": "5417280",
    "end": "5424679"
  },
  {
    "text": "the multiply now I got to get the second operand of the multiply well how do I translate this I got to call a function",
    "start": "5424679",
    "end": "5430840"
  },
  {
    "text": "okay well what's the first argument minus three how many arguments do I have one so I push a",
    "start": "5430840",
    "end": "5436520"
  },
  {
    "text": "one oh I'm sorry I'm doing a subtraction here so how do I call this function well",
    "start": "5436520",
    "end": "5441600"
  },
  {
    "text": "I got to get its oper n on the stack it's argument so what is it well it's n minus one so I get n on the stack I get",
    "start": "5441600",
    "end": "5448360"
  },
  {
    "text": "a one in the stack and I do a subtraction that leaves n minus one in the stack now I call function zero which",
    "start": "5448360",
    "end": "5453760"
  },
  {
    "text": "is is back to you know me recursively",
    "start": "5453760",
    "end": "5459080"
  },
  {
    "text": "with one argument the result of calling factorial I multiply times this guy which is still",
    "start": "5459080",
    "end": "5465280"
  },
  {
    "text": "on the stack which is the original n and then I return that value",
    "start": "5465280",
    "end": "5471239"
  },
  {
    "text": "freaky um and then here's my main program it starts at address 22 it says let's",
    "start": "5471239",
    "end": "5478000"
  },
  {
    "text": "compute factorial five well let's start with one and see what that looks like so I push a one on the stack and and I call",
    "start": "5478000",
    "end": "5486239"
  },
  {
    "text": "factorial with um in fact we can be clever and",
    "start": "5486239",
    "end": "5493678"
  },
  {
    "text": "replace this with",
    "start": "5494400",
    "end": "5498280"
  },
  {
    "text": "factorial just to make it look a little better",
    "start": "5500119",
    "end": "5505159"
  },
  {
    "text": "okay so I'm calling the factorial function with one argument and that result of that I'm printing so this is",
    "start": "5514600",
    "end": "5520400"
  },
  {
    "text": "main program here call Fa print factorial of one see how that",
    "start": "5520400",
    "end": "5527360"
  },
  {
    "text": "translates factorial uh yes so could be done as a",
    "start": "5530840",
    "end": "5537480"
  },
  {
    "text": "loop obviously but it wouldn't be as interesting and I couldn't demo the uh",
    "start": "5537480",
    "end": "5543280"
  },
  {
    "text": "recursion you could do what's that I could that's",
    "start": "5543280",
    "end": "5549040"
  },
  {
    "text": "right but that would be the compiler and my brain is too slow to do that um okay",
    "start": "5549040",
    "end": "5554560"
  },
  {
    "text": "so now what we want to do is execute this guy um and let's just see what the stack looks like to see if it mimics",
    "start": "5554560",
    "end": "5560880"
  },
  {
    "text": "this uh so now we want to execute this",
    "start": "5560880",
    "end": "5565920"
  },
  {
    "text": "one okay again this is starting at address 22 Main and no data m memory it's all doing",
    "start": "5568080",
    "end": "5574600"
  },
  {
    "text": "on stack okay we're Computing factorial of one which should do nothing but from",
    "start": "5574600",
    "end": "5580800"
  },
  {
    "text": "Main jump into here and then return with one on the stack how does it do that okay we're",
    "start": "5580800",
    "end": "5587360"
  },
  {
    "text": "going to compute factorial of one I get one on the stack which is the argument of factorial I call factorial which is",
    "start": "5587360",
    "end": "5592840"
  },
  {
    "text": "that aders zero with one argument okay so the one on stack so this is the same one I got here now I'm pushing the",
    "start": "5592840",
    "end": "5600639"
  },
  {
    "text": "number of arguments which is a one the old frame point is negative 1 I don't care what it was I",
    "start": "5600639",
    "end": "5606400"
  },
  {
    "text": "I must have said it to negative one uh in this version so that's this guy and then return address is 27 what's",
    "start": "5606400",
    "end": "5613280"
  },
  {
    "text": "27 the print after the call that's the return",
    "start": "5613280",
    "end": "5618560"
  },
  {
    "text": "address okay so that's the results calling or executing the call instruction now notice I'm at address",
    "start": "5618560",
    "end": "5625280"
  },
  {
    "text": "zero oh okay so I go to address zero and it says load relative to the frame",
    "start": "5625280",
    "end": "5631600"
  },
  {
    "text": "pointer minus three which is going to be one so it pushes this guy right here it",
    "start": "5631600",
    "end": "5637719"
  },
  {
    "text": "pushes two and then checks to see if it's less",
    "start": "5637719",
    "end": "5643080"
  },
  {
    "text": "than so it pops both of these off and pushes the true on there in which case",
    "start": "5643080",
    "end": "5649119"
  },
  {
    "text": "it this branch of false does nothing so then it executes one or pushing a one on",
    "start": "5649119",
    "end": "5654440"
  },
  {
    "text": "the stack so all these this Branch popped that false off now it pushes one on the stack and now it executes a",
    "start": "5654440",
    "end": "5660239"
  },
  {
    "text": "return instruction notice what it does it's it's got the return value it's got the",
    "start": "5660239",
    "end": "5666440"
  },
  {
    "text": "return address it's got the frame pointer and it's got the argument and",
    "start": "5666440",
    "end": "5672040"
  },
  {
    "text": "all of that crap comes",
    "start": "5672040",
    "end": "5677760"
  },
  {
    "text": "off as a result of executing return and it leaves one on the stack",
    "start": "5677920",
    "end": "5685080"
  },
  {
    "text": "okay then halts so now let's try two and it'll do a recursive",
    "start": "5685080",
    "end": "5690840"
  },
  {
    "text": "call so we're going to do factorial of two",
    "start": "5690840",
    "end": "5695639"
  },
  {
    "text": "okay oh man okay let's see um we're",
    "start": "5706800",
    "end": "5711880"
  },
  {
    "text": "calling factorial with an argument of two so we put the argument on the stack there's one argument frame pointer is",
    "start": "5711880",
    "end": "5718400"
  },
  {
    "text": "some old thing we don't care what it is the return address is 27 this guy right here",
    "start": "5718400",
    "end": "5724639"
  },
  {
    "text": "we get inside the factorial function and we do this load constant check thing again until we get to this Branch if",
    "start": "5724639",
    "end": "5731960"
  },
  {
    "text": "false two is not less than two so it leaves false on the stack so Branch if false to",
    "start": "5731960",
    "end": "5739199"
  },
  {
    "text": "10 switches to address 10 and Pops the false off notice that it's left the frame",
    "start": "5739639",
    "end": "5746159"
  },
  {
    "text": "activation record here all on the stack and the argument I",
    "start": "5746159",
    "end": "5752360"
  },
  {
    "text": "guess so so this is these three plus the single argument okay so now the stack is",
    "start": "5752360",
    "end": "5758600"
  },
  {
    "text": "basically empty in effect for this function so now we're starting to push stuff on the stack again I load n twice",
    "start": "5758600",
    "end": "5767040"
  },
  {
    "text": "I do a subtraction and then I do another call so I load in which we know is two I do",
    "start": "5767040",
    "end": "5773639"
  },
  {
    "text": "it twice and then I put a one on there so I could do a subtract so I leave one on the stack and now I do another call",
    "start": "5773639",
    "end": "5779960"
  },
  {
    "text": "to zero so there's my argument there's how many arguments",
    "start": "5779960",
    "end": "5787159"
  },
  {
    "text": "one the frame pointer is three because where I uh this is 0 one",
    "start": "5787159",
    "end": "5793520"
  },
  {
    "text": "two three that's right there's my frame pointer my return address is 20 which is after the call right so you can see how",
    "start": "5793520",
    "end": "5799960"
  },
  {
    "text": "it starts to to push and that only does one extra call let's jump this up to five and then",
    "start": "5799960",
    "end": "5808560"
  },
  {
    "text": "that'll be a value of 120 when we execute yes and you can see",
    "start": "5808560",
    "end": "5814159"
  },
  {
    "text": "that this will get quite large but it keeps pushing all of these",
    "start": "5814159",
    "end": "5819679"
  },
  {
    "text": "frames on the stack and so like here's the the top of the stack is also is always where we're",
    "start": "5819679",
    "end": "5826000"
  },
  {
    "text": "doing our oper end stuff and so uh but the return will pop",
    "start": "5826000",
    "end": "5832199"
  },
  {
    "text": "all these frames off and uh you know obviously it's",
    "start": "5832199",
    "end": "5837560"
  },
  {
    "text": "tedious to go through there to make sure it works right but um it handles recursion no",
    "start": "5837560",
    "end": "5846320"
  },
  {
    "text": "problem more questions so",
    "start": "5849920",
    "end": "5858440"
  },
  {
    "text": "yeah uh how did I bu how would I build a register machine know have ah the trick is the registers are",
    "start": "5860000",
    "end": "5867719"
  },
  {
    "text": "virtual registers and you can have as many as you want so they don't map directly down to machine instruction",
    "start": "5867719",
    "end": "5874320"
  },
  {
    "text": "registers uh until of course you're generating machine code but so what you do is you say okay every function call",
    "start": "5874320",
    "end": "5882119"
  },
  {
    "text": "has a th000 2,000 100,000 registers whatever it doesn't matter",
    "start": "5882119",
    "end": "5888440"
  },
  {
    "text": "and um",
    "start": "5888440",
    "end": "5894000"
  },
  {
    "text": "registers so let's see I I don't have a good example off the top of my head but registers make it a lot easier to keep",
    "start": "5894000",
    "end": "5900280"
  },
  {
    "text": "stuff around without having to do this push pop stuff and they're not really mapped uh physical register so you don't have",
    "start": "5900280",
    "end": "5905599"
  },
  {
    "text": "to worry about that part like the dovic VM is a register machine do you end",
    "start": "5905599",
    "end": "5912719"
  },
  {
    "text": "pushings registers or do you end up you have to save off your reg you um",
    "start": "5912719",
    "end": "5919800"
  },
  {
    "text": "I don't know how dovic does it but um I believe what you do is you have um a set",
    "start": "5919800",
    "end": "5926119"
  },
  {
    "text": "of registers you know you need for that function and then you're going to call another function so you put more",
    "start": "5926119",
    "end": "5931840"
  },
  {
    "text": "registers here you're going to use for that and then you want to get tricky right because you got to pass arguments where are the arguments well they're the",
    "start": "5931840",
    "end": "5938040"
  },
  {
    "text": "arguments to this function are stored in registers for this function so what you do is you overlap these things so that",
    "start": "5938040",
    "end": "5944560"
  },
  {
    "text": "it magically sets the arguments of this guy with some locals of this guy right so you kind of treat them like",
    "start": "5944560",
    "end": "5951639"
  },
  {
    "text": "a stack and registers so you get really fancy like that for the VMS in my book I just said oh the hell with I copy it so",
    "start": "5951639",
    "end": "5959000"
  },
  {
    "text": "you don't have to worry about over laying but so again to make it efficient you got to avoid all memory copying um",
    "start": "5959000",
    "end": "5964880"
  },
  {
    "text": "and so they do sliding register windows are most lower langues",
    "start": "5964880",
    "end": "5973599"
  },
  {
    "text": "yes yeah they're going to be C or if you really want to go fast you go down to machine code C would be pretty good I",
    "start": "5973599",
    "end": "5978840"
  },
  {
    "text": "mean because um GCC now has that computed goto so you could avoid that whole Loop there wouldn't be any Loop in",
    "start": "5978840",
    "end": "5985159"
  },
  {
    "text": "your fetch decode execute because at the end of every instruction you would jump immediately to the code for the next",
    "start": "5985159",
    "end": "5990880"
  },
  {
    "text": "instruction and in fact I right the doic VM is even",
    "start": "5990880",
    "end": "5996239"
  },
  {
    "text": "more sophisticated it doesn't even want to look up the address of the next bit",
    "start": "5996239",
    "end": "6002599"
  },
  {
    "text": "of code to execute the instruction so let's say we know the next bite code is like integer ad well you might have to",
    "start": "6002599",
    "end": "6010119"
  },
  {
    "text": "look up in a table what that integer ad is right what's the address associated",
    "start": "6010119",
    "end": "6015320"
  },
  {
    "text": "with that b code that I need to execute the implementation execution they just",
    "start": "6015320",
    "end": "6020360"
  },
  {
    "text": "said you know what allocate a certain number of bytes to every bit of implementation code and then we can just",
    "start": "6020360",
    "end": "6026159"
  },
  {
    "text": "do a multiply or shift to jump to that code we don't even have to look it up I",
    "start": "6026159",
    "end": "6031280"
  },
  {
    "text": "mean crazy stuff to avoid a memory load because again on a phone you're dealing with you know slower",
    "start": "6031280",
    "end": "6038000"
  },
  {
    "text": "memory static Ram uh d uh whatever that is",
    "start": "6038000",
    "end": "6045080"
  },
  {
    "text": "um yes uh at the end of the day you're going to",
    "start": "6045080",
    "end": "6051360"
  },
  {
    "text": "have to Leverage when you implement the VM you're going to have to actual physical register Bas if you're going to",
    "start": "6051360",
    "end": "6058960"
  },
  {
    "text": "generate code or or yeah I mean when you're implementing the the the virtual machine and you're doing a machine code",
    "start": "6058960",
    "end": "6065119"
  },
  {
    "text": "you're going to have to think about the registers uh if you're generating code from the B code you're going to have to think about registers all real",
    "start": "6065119",
    "end": "6074400"
  },
  {
    "text": "registers so it's simplification of you know a higher level that's right it's a",
    "start": "6075239",
    "end": "6081040"
  },
  {
    "text": "high it's a high level physical machine and I think Sun actually built a Java",
    "start": "6081040",
    "end": "6087639"
  },
  {
    "text": "VM into a chip yeah the a while back and I think aul does that now",
    "start": "6087639",
    "end": "6094400"
  },
  {
    "text": "right yeah yeah something like that yeah and then I think Azul does that in hard the Java bik codes in VM in uh in",
    "start": "6094400",
    "end": "6101320"
  },
  {
    "text": "Hardware now too or at least something close to the bik codes um I think aul",
    "start": "6101320",
    "end": "6107080"
  },
  {
    "text": "does super high performance stuff but it turns out that you you know",
    "start": "6107080",
    "end": "6113360"
  },
  {
    "text": "the minut you implement a chip Intel comes out with a faster chip that with",
    "start": "6113360",
    "end": "6118480"
  },
  {
    "text": "machine code generation is actually faster than your chip you know he's like ah crap int yeah or you just let Intel",
    "start": "6118480",
    "end": "6124920"
  },
  {
    "text": "keep spending billions on chips and you work on compile Tech compiler technology which is what Sun did eventually it's",
    "start": "6124920",
    "end": "6131119"
  },
  {
    "text": "pretty hard to you know beat somebody else pouring that much money into into processors",
    "start": "6131119",
    "end": "6138560"
  },
  {
    "text": "right and that's why Apple eventually I think switched over to Intel right I mean they're building their own chips I mean it's just like you're going to",
    "start": "6138560",
    "end": "6144960"
  },
  {
    "text": "slowly lose against Intel on that",
    "start": "6144960",
    "end": "6150159"
  },
  {
    "text": "um more questions on the VM yeah it's pretty simple right is is",
    "start": "6150159",
    "end": "6156760"
  },
  {
    "text": "it simpler than you thought it is it would be I mean that that's exact I mean python Ruby they all work that way Ruby",
    "start": "6156760",
    "end": "6165040"
  },
  {
    "text": "was actually something a little slower first it was a tree based interpreter and uh it speed it up greatly when it",
    "start": "6165040",
    "end": "6170320"
  },
  {
    "text": "went to a b code interpreter the",
    "start": "6170320",
    "end": "6176480"
  },
  {
    "text": "trade so first of all what is a tree based interpreter so when we parse stuff oh I",
    "start": "6178679",
    "end": "6184840"
  },
  {
    "text": "get to show off my plugin check this out let's",
    "start": "6184840",
    "end": "6190960"
  },
  {
    "text": "see uh let's see uh let's see BL blah BL blah let's see if I launch this",
    "start": "6190960",
    "end": "6198719"
  },
  {
    "text": "I think I have a lest version on",
    "start": "6205320",
    "end": "6208480"
  },
  {
    "text": "here okay so let's say you want to build an interpreter for a high level language right well so I said you had to have a compiler down to B codes well you don't",
    "start": "6212760",
    "end": "6219719"
  },
  {
    "text": "necessarily have to you could actually have something that um doesn't go to B",
    "start": "6219719",
    "end": "6225719"
  },
  {
    "text": "codes but uses an uh an internal representation it's a tree representing",
    "start": "6225719",
    "end": "6232280"
  },
  {
    "text": "the input so for example here's a Java grammar I have sitting in intellig and let's say um I want to create uh let's",
    "start": "6232280",
    "end": "6240040"
  },
  {
    "text": "see I'm going to order these by alphabetically I want to test my rule",
    "start": "6240040",
    "end": "6247080"
  },
  {
    "text": "called um array initializer that didn't look right",
    "start": "6247080",
    "end": "6252719"
  },
  {
    "text": "but make this a little bigger okay so what does an array look like in Java and array initializer I",
    "start": "6252719",
    "end": "6259719"
  },
  {
    "text": "don't know whatever it looks like this kind of crap right so this tree",
    "start": "6259719",
    "end": "6265560"
  },
  {
    "text": "here is a representation of how this grammar",
    "start": "6265719",
    "end": "6271679"
  },
  {
    "text": "matched this input so the first thing that the parser does now I can to show off my plugin I",
    "start": "6271679",
    "end": "6277440"
  },
  {
    "text": "added these little cool oh man did I didn't I didn't pull that",
    "start": "6277440",
    "end": "6282198"
  },
  {
    "text": "in I didn't pull it all in but that's all right um so this shows you the token types with each",
    "start": "6282639",
    "end": "6289040"
  },
  {
    "text": "token uh that you're you're looking at here but then what this is unfortunately",
    "start": "6289040",
    "end": "6294679"
  },
  {
    "text": "I don't have the latest goodies on here um what this particularly is is",
    "start": "6294679",
    "end": "6300119"
  },
  {
    "text": "represented here so this you know 135 that's a literal which is a primary which is an expression it's part of this",
    "start": "6300119",
    "end": "6306199"
  },
  {
    "text": "initializer so what you could do you could just stop right here right this is the parse tree that represents this",
    "start": "6306199",
    "end": "6312280"
  },
  {
    "text": "input what you could do is make a tree Walker that simply walked this tree or a",
    "start": "6312280",
    "end": "6319080"
  },
  {
    "text": "simpler version of this tree if you wanted to execute the code",
    "start": "6319080",
    "end": "6324159"
  },
  {
    "text": "and that saves you having to good end of B codes so you can just immediately start once you've parsed it you start",
    "start": "6324159",
    "end": "6329599"
  },
  {
    "text": "executing you don't have to translate to B code first and then start to interpret and so on",
    "start": "6329599",
    "end": "6335480"
  },
  {
    "text": "so it seems easier at first but I think it's actually harder just to write The Interpreter itself when you're doing all",
    "start": "6335480",
    "end": "6342360"
  },
  {
    "text": "this tree walking because you're doing recursion to walk this tree",
    "start": "6342360",
    "end": "6348239"
  },
  {
    "text": "right and now imagine trying to debug a recursive program in implemented with",
    "start": "6348239",
    "end": "6353560"
  },
  {
    "text": "your treebase interpreter which has recursion so you're debugging a recursive",
    "start": "6353560",
    "end": "6359119"
  },
  {
    "text": "program that's simulating a recursive program and it just really starts to",
    "start": "6359119",
    "end": "6364159"
  },
  {
    "text": "hurt your mind um so when you unravel it down into this little bite code",
    "start": "6364159",
    "end": "6370520"
  },
  {
    "text": "stream you're serializing it right you're taking this tree and you're going I const one I const three I const five",
    "start": "6370520",
    "end": "6377320"
  },
  {
    "text": "you're serializing it um so in the end it's faster um because remember you're",
    "start": "6377320",
    "end": "6382520"
  },
  {
    "text": "going to have to keep keep touching this whole tree which might not fit in memory you know a cache um I find it harder to",
    "start": "6382520",
    "end": "6391400"
  },
  {
    "text": "understand so wait a second it's faster to doas uh you'll get the the latency is",
    "start": "6391400",
    "end": "6397440"
  },
  {
    "text": "faster it'll it'll start to interpret right away okay by a tiny bit um but",
    "start": "6397440",
    "end": "6403159"
  },
  {
    "text": "it's harder to implement The Interpreter itself I feel and it appears to be slower because you got more work to",
    "start": "6403159",
    "end": "6409520"
  },
  {
    "text": "do right you've got to walk a tree versus take like how do you go to the next instruction in a bite code",
    "start": "6409520",
    "end": "6415800"
  },
  {
    "text": "interpreter i++ that's one clock cycle whereas with a tree I've got to go oh call my visitor",
    "start": "6415800",
    "end": "6423719"
  },
  {
    "text": "function that goes over here or it's a lot more overhead let's",
    "start": "6423719",
    "end": "6430560"
  },
  {
    "text": "do yeah uh it turns out everyone seems to find it faster to go to the stack",
    "start": "6430560",
    "end": "6436040"
  },
  {
    "text": "machines I don't know anybody that's made it go super fast",
    "start": "6436040",
    "end": "6440280"
  },
  {
    "text": "so so uh to develop a language translator say from some kind of an",
    "start": "6441080",
    "end": "6448239"
  },
  {
    "text": "abstract grammar into a lower level Lang c m is",
    "start": "6448239",
    "end": "6453480"
  },
  {
    "text": "this is this the you know pattern that is mostly used well you probably use a",
    "start": "6453480",
    "end": "6460440"
  },
  {
    "text": "different pattern so there's trans uh translation from one high level language to another or you're saying from a high",
    "start": "6460440",
    "end": "6466400"
  },
  {
    "text": "level to a lower level like see or you're saying yeah okay so I'm going see",
    "start": "6466400",
    "end": "6471639"
  },
  {
    "text": "lower yes relativ yes so what you could do instead of generating B codes is",
    "start": "6471639",
    "end": "6477360"
  },
  {
    "text": "generate C code that had a bunch of function calls in it so",
    "start": "6477360",
    "end": "6482840"
  },
  {
    "text": "imagine that's also another kind of threaded interpreter see all these",
    "start": "6482840",
    "end": "6489719"
  },
  {
    "text": "uh where are these guys see all these little things right here I could pull these into",
    "start": "6489719",
    "end": "6495239"
  },
  {
    "text": "functions like let's say I I I broke this out into a function called load",
    "start": "6495239",
    "end": "6502840"
  },
  {
    "text": "now I instead of making bite codes you know called load or whatever I could",
    "start": "6505599",
    "end": "6511520"
  },
  {
    "text": "actually generate code which is a series of function calls that look like this load G load and so on so there would be",
    "start": "6511520",
    "end": "6519360"
  },
  {
    "text": "no like switch it would just be calling a bunch of functions in a row so the",
    "start": "6519360",
    "end": "6526400"
  },
  {
    "text": "output of so instead of generating these bite codes so let's look at this simple",
    "start": "6526800",
    "end": "6533040"
  },
  {
    "text": "thing up here instead of this you would see C code that looked like",
    "start": "6533040",
    "end": "6538199"
  },
  {
    "text": "this uh I con one I two I add I print or",
    "start": "6538199",
    "end": "6546639"
  },
  {
    "text": "print and halt so you could generate C code that look like that and then you would",
    "start": "6546639",
    "end": "6553000"
  },
  {
    "text": "compile this stuff and then execute it and that could go faster right",
    "start": "6553000",
    "end": "6558800"
  },
  {
    "text": "because the compiler the C compiler could look at that and go hey I can inline all that crap",
    "start": "6558800",
    "end": "6564400"
  },
  {
    "text": "and then that would go pretty fast but you know it could get bulky",
    "start": "6564400",
    "end": "6569920"
  },
  {
    "text": "right right because this is how many bytes of code memory in C well I don't",
    "start": "6569920",
    "end": "6575360"
  },
  {
    "text": "know but I do know that it's only eight bytes in bite code memory so if you",
    "start": "6575360",
    "end": "6582000"
  },
  {
    "text": "cared about memory size then doing it this way may not be so good but you could use a pattern like this yeah I've",
    "start": "6582000",
    "end": "6589080"
  },
  {
    "text": "seen that before and a clever C compiler could make that go very fast because you're getting rid of all",
    "start": "6589080",
    "end": "6595639"
  },
  {
    "text": "these branches right branches suck you don't want branches so when you're doing all this switch and jumping around and",
    "start": "6595639",
    "end": "6601920"
  },
  {
    "text": "all I mean it's super inefficient oh by the way who who who did the C interpreter here somebody did oh you did",
    "start": "6601920",
    "end": "6607320"
  },
  {
    "text": "yeah so he translated the Java version of the C and the exact same code just went twice as fast of course it's hard",
    "start": "6607320",
    "end": "6613760"
  },
  {
    "text": "to say right because you know was legit and you know fully warmed up and all that kind of stuff but um probably if",
    "start": "6613760",
    "end": "6621760"
  },
  {
    "text": "you uh if you didn't give it a chance to warm up then yeah the C is going to crush",
    "start": "6621760",
    "end": "6627920"
  },
  {
    "text": "it so uh let's see so there's lots of different kinds of interpreters but it all comes down to somehow you got to",
    "start": "6629440",
    "end": "6635960"
  },
  {
    "text": "represent the program and uh do a simulation or",
    "start": "6635960",
    "end": "6641320"
  },
  {
    "text": "compile it down to C or whatever so then and you also have to F C compiler on your system yeah",
    "start": "6641320",
    "end": "6650960"
  },
  {
    "text": "well yeah don't build a tree one don't build a tree based one that basically",
    "start": "6655199",
    "end": "6660440"
  },
  {
    "text": "what I language grows more complex easy in the beginning but it'll just get really really bad yeah and there's an",
    "start": "6660440",
    "end": "6667520"
  },
  {
    "text": "example I mean I have an example of a tree based interpreter in that language implementation patterns book if you want if you want it um and um it yeah my",
    "start": "6667520",
    "end": "6676239"
  },
  {
    "text": "experience is it just so it getss so complicated so fast so I would that's",
    "start": "6676239",
    "end": "6681400"
  },
  {
    "text": "the biggest gotcha bite code stuff is really easy the other thing I found like I had",
    "start": "6681400",
    "end": "6687760"
  },
  {
    "text": "uh Tim were you in my class when we did the bite code interpreter I mean the small talk",
    "start": "6687760",
    "end": "6692880"
  },
  {
    "text": "yeah the other thing I noticed is that if you're implementing a complicated language like small talk that has",
    "start": "6692880",
    "end": "6698199"
  },
  {
    "text": "closures and all kinds of wacky stuff",
    "start": "6698199",
    "end": "6703520"
  },
  {
    "text": "um you can make a bik code that says do all this really complicated stuff it's",
    "start": "6703520",
    "end": "6708920"
  },
  {
    "text": "just one instruction whereas if you're generating C you've got to generate or a",
    "start": "6708920",
    "end": "6714440"
  },
  {
    "text": "machine code you got a lot of stuff to generate to man to manage stuff so interpreters are often the fastest",
    "start": "6714440",
    "end": "6721520"
  },
  {
    "text": "easiest way to get an interpreter together I mean so the my grad students built a compiler and interpreter for",
    "start": "6721520",
    "end": "6729199"
  },
  {
    "text": "small talk a complete one right uh in you know in the one one",
    "start": "6729199",
    "end": "6734760"
  },
  {
    "text": "semester and half a semester really so it's it's pretty easy to do that whereas if you had to generate C to do that",
    "start": "6734760",
    "end": "6741440"
  },
  {
    "text": "you're like okay oh man I got all kinds of stuff to do because we well in that case we borrowed like Java's garbage collector",
    "start": "6741440",
    "end": "6747719"
  },
  {
    "text": "and stuff so anything",
    "start": "6747719",
    "end": "6753960"
  },
  {
    "text": "else like one question related to the code generation",
    "start": "6756239",
    "end": "6763040"
  },
  {
    "text": "so in real life implementations Whoever has implemented a cator they use like string templates oh",
    "start": "6763040",
    "end": "6771520"
  },
  {
    "text": "they should um yeah well I I've seen everything from",
    "start": "6771520",
    "end": "6777239"
  },
  {
    "text": "print statements to all kinds of weird stuff but yeah you should use some kind of template engine",
    "start": "6777239",
    "end": "6783040"
  },
  {
    "text": "to generate structured text um unless it's really simple um yeah I've taken to building up an",
    "start": "6783040",
    "end": "6791599"
  },
  {
    "text": "internal model that represents the output that's a hierarchy of model objects and then the name of the model",
    "start": "6791599",
    "end": "6798719"
  },
  {
    "text": "object maps to the name of a template and then I have a generic Walker that",
    "start": "6798719",
    "end": "6804400"
  },
  {
    "text": "walks my model tree instantiates templates for each object and passes the",
    "start": "6804400",
    "end": "6809679"
  },
  {
    "text": "object into the template which says that'll render it so it's pretty slick and then I just point to the top of my",
    "start": "6809679",
    "end": "6817360"
  },
  {
    "text": "model hierarchy and I say render the text and it gives me a big string of the whole program um",
    "start": "6817360",
    "end": "6824360"
  },
  {
    "text": "so yeah definitely and so antlers generated with string template um all",
    "start": "6824360",
    "end": "6829960"
  },
  {
    "text": "all the recent versions and um it's very useful for that he wouldn't use it for websites",
    "start": "6829960",
    "end": "6835840"
  },
  {
    "text": "anymore because it's all client side but you know okay well I'll hang around a little",
    "start": "6835840",
    "end": "6842520"
  },
  {
    "text": "bit and if you guys want to chitchat thanks for coming",
    "start": "6842520",
    "end": "6847119"
  },
  {
    "text": "guys don't forget",
    "start": "6848360",
    "end": "6852480"
  }
]