[
  {
    "text": "[Music]",
    "start": "4040",
    "end": "9519"
  },
  {
    "text": "okay so before you plunge back into your um lab assignments let's talk about something",
    "start": "9519",
    "end": "15000"
  },
  {
    "text": "new for a little while so error handling we haven't talked about error handling at all yet but what if you are writing a",
    "start": "15000",
    "end": "22680"
  },
  {
    "text": "program and something goes wrong an unexpected something goes wrong",
    "start": "22680",
    "end": "28960"
  },
  {
    "text": "um python supports try catch exceptions which is kind of the modern way of handling error conditions if you've",
    "start": "28960",
    "end": "36200"
  },
  {
    "text": "programmed in older languages you might be familiar with styles that involve",
    "start": "36200",
    "end": "41440"
  },
  {
    "text": "catching a return value that's special that indicates an error condition and checking to see if an error occurred in handling it um but python has exceptions",
    "start": "41440",
    "end": "50600"
  },
  {
    "text": "and I'd like to show you the syntax and then kind of talk about what they're for and kind of the",
    "start": "50600",
    "end": "56440"
  },
  {
    "text": "philosophy behind them",
    "start": "56440",
    "end": "61920"
  },
  {
    "text": "so we've already seen some errors uh usually this is inadvertent but basically any time I do",
    "start": "61920",
    "end": "68479"
  },
  {
    "text": "something that's not allowed you see some sort of error message it says Trace",
    "start": "68479",
    "end": "75400"
  },
  {
    "text": "back and a few of you have gone a couple files deep and so you see um now tracebacks that um follow your execution",
    "start": "75400",
    "end": "83119"
  },
  {
    "text": "path like what functions have been called tracebacks are kind of useful to see how you got where you got but the key bit about the traceback",
    "start": "83119",
    "end": "90400"
  },
  {
    "text": "um and sorry let me not quite maximize it",
    "start": "90400",
    "end": "96320"
  },
  {
    "text": "right we key bit about the trace back is the last line here it says name error",
    "start": "96320",
    "end": "103280"
  },
  {
    "text": "name q w r is not defined and name error is the name of the exception that",
    "start": "103280",
    "end": "109799"
  },
  {
    "text": "occurred exceptions are Python's name for um exceptional conditions that are",
    "start": "109799",
    "end": "116520"
  },
  {
    "text": "probably errors and we can hand handle and inspect exceptions possibly recover",
    "start": "116520",
    "end": "122920"
  },
  {
    "text": "from them and at least do something different if an error occurred um and exceptions also totally break program",
    "start": "122920",
    "end": "129640"
  },
  {
    "text": "flow which is kind of a good thing so let's let's handle an",
    "start": "129640",
    "end": "135120"
  },
  {
    "text": "exception to handle exceptions we use the tri multi-line statement and I'm going to do the same thing that I'm",
    "start": "135760",
    "end": "141720"
  },
  {
    "text": "doing here which is call a function that doesn't exist and try gets an accept",
    "start": "141720",
    "end": "151120"
  },
  {
    "text": "block which is also a multi-line statement it ends with a colon and the code under the accept",
    "start": "151120",
    "end": "157160"
  },
  {
    "text": "block will only execute if there was an exception in the triy",
    "start": "157160",
    "end": "164480"
  },
  {
    "text": "block",
    "start": "178760",
    "end": "181760"
  },
  {
    "text": "and I can't do",
    "start": "187239",
    "end": "190000"
  },
  {
    "text": "that",
    "start": "208680",
    "end": "211680"
  },
  {
    "text": "nothing happens as I expect um there's also an else",
    "start": "214879",
    "end": "222920"
  },
  {
    "text": "condition so we have actually I'll do it again from fresh we have a tri",
    "start": "223799",
    "end": "231239"
  },
  {
    "text": "block an accept",
    "start": "233480",
    "end": "237159"
  },
  {
    "text": "block",
    "start": "238680",
    "end": "241680"
  },
  {
    "text": "an else anybody want to speculate on um what an else",
    "start": "244439",
    "end": "249959"
  },
  {
    "text": "does yeah so else is going to execute um if there is no",
    "start": "249959",
    "end": "257000"
  },
  {
    "text": "exception oh and I defined quer earlier",
    "start": "268600",
    "end": "275160"
  },
  {
    "text": "nice and there's also a finally",
    "start": "276479",
    "end": "280919"
  },
  {
    "text": "Block in this case the try are just address label right it is not so this is",
    "start": "296080",
    "end": "302759"
  },
  {
    "text": "not actually a go-to this is um a multi-line statement that's part of the language",
    "start": "302759",
    "end": "308080"
  },
  {
    "text": "grammar so it's not it's not a it's not a label for a",
    "start": "308080",
    "end": "313560"
  },
  {
    "text": "go-to so how can interpret this a try just like if or just like while or",
    "start": "314400",
    "end": "322759"
  },
  {
    "text": "just like for it's a multi it's a multi-line statement that is a keyword oh mine keyword okay so this is this is",
    "start": "322759",
    "end": "329680"
  },
  {
    "text": "a new piece of syntax and we're introducing four new keywords well three new keywords one keyword being used in a",
    "start": "329680",
    "end": "335800"
  },
  {
    "text": "different way um finally any thoughts on finally",
    "start": "335800",
    "end": "341039"
  },
  {
    "text": "we have try except will run if there are errors else will run if there are not any",
    "start": "341039",
    "end": "347639"
  },
  {
    "text": "errors finally will run no matter what damn",
    "start": "347639",
    "end": "352319"
  },
  {
    "text": "it and then the last piece of complexity to trying and catching errors is our",
    "start": "358479",
    "end": "365919"
  },
  {
    "text": "accept Clause can specify what kind of Errors it wants to handle and you can have as",
    "start": "365919",
    "end": "371599"
  },
  {
    "text": "many accept Clauses as you want so you can have an accept Clause that catches one particular kind of",
    "start": "371599",
    "end": "377319"
  },
  {
    "text": "error and we're about to look at files so say we try to open a file and we fail we could have an accept Clause that handles an IO error it's a predefined",
    "start": "377319",
    "end": "384560"
  },
  {
    "text": "kind of error that the file um handle will throw we could have another accept Clause that handles some other kind of",
    "start": "384560",
    "end": "390080"
  },
  {
    "text": "error we might have a permissions error so the file actually exists but we don't have permissions to read it and throws a",
    "start": "390080",
    "end": "395160"
  },
  {
    "text": "different exception we could have different um problem resolution or error code messages depending on what kind of",
    "start": "395160",
    "end": "401560"
  },
  {
    "text": "exception we're catching and let's go ahead and catch an exception",
    "start": "401560",
    "end": "406720"
  },
  {
    "text": "um let's",
    "start": "413639",
    "end": "421400"
  },
  {
    "text": "okay look at that error again name error is the name of our exception",
    "start": "425599",
    "end": "432680"
  },
  {
    "text": "class and I'm just going to copy that and try to call the",
    "start": "432919",
    "end": "439039"
  },
  {
    "text": "non-existent file and accept name",
    "start": "439039",
    "end": "445680"
  },
  {
    "text": "error and we can also optionally catch the instance of the error if we",
    "start": "445680",
    "end": "453599"
  },
  {
    "text": "want right no you wouldn't so that's a that's a good point because it okay so",
    "start": "460840",
    "end": "466240"
  },
  {
    "text": "if everybody heard yim's question so this print always runs if I just move that down a line and unindented oh yeah",
    "start": "466240",
    "end": "472319"
  },
  {
    "text": "it would always run right it wouldn't run in the case of an exception because the exception will end",
    "start": "472319",
    "end": "478280"
  },
  {
    "text": "the program if it's not handled so that's only case this would make a difference so if there was an exception",
    "start": "478280",
    "end": "484720"
  },
  {
    "text": "the stuff in the finally Clause will run before the program exits so if I'm wanting to do and so for instance",
    "start": "484720",
    "end": "490120"
  },
  {
    "text": "finally is basically used to clean up resources very frequently let's say I've opened several files I'm processing them",
    "start": "490120",
    "end": "495280"
  },
  {
    "text": "and there's some sort of error whether there was an error or not I still want to close the files and release their",
    "start": "495280",
    "end": "500680"
  },
  {
    "text": "file handles so finally we'll always run no matter whether I'm all screwed up or",
    "start": "500680",
    "end": "506039"
  },
  {
    "text": "not and it's typically used for cleaning up of resources yep the resource post that I had up the",
    "start": "506039",
    "end": "512560"
  },
  {
    "text": "other day list the built-in exception types which you can see in the python documentation and it's a rather lengthy",
    "start": "512560",
    "end": "519640"
  },
  {
    "text": "list these are all classes which uh we don't really know what that means yet but there's a ton of them you",
    "start": "519640",
    "end": "528120"
  },
  {
    "text": "yourself can cause an exception to happen deliberately by raising any of the",
    "start": "528120",
    "end": "534760"
  },
  {
    "text": "built-in exception types",
    "start": "534760",
    "end": "541200"
  },
  {
    "text": "with the ray statement so if you have code that checks for error conditions we're not",
    "start": "542640",
    "end": "548839"
  },
  {
    "text": "talking syntax errors or things that raise errors themselves um you use the ray statement to cause an exception and",
    "start": "548839",
    "end": "555320"
  },
  {
    "text": "I said earlier um exceptions are another way of bro breaking program flow so let's just see how that",
    "start": "555320",
    "end": "562680"
  },
  {
    "text": "works I'm defining my function I'm going to print one",
    "start": "562680",
    "end": "570160"
  },
  {
    "text": "going to raise an index error and I'm going to print",
    "start": "570160",
    "end": "578040"
  },
  {
    "text": "two I'm going to try to call",
    "start": "578800",
    "end": "583120"
  },
  {
    "text": "Fu and accept anything I'm going to print",
    "start": "583920",
    "end": "590399"
  },
  {
    "text": "three and you notice it didn't ever print two so the way Python's error handling",
    "start": "591000",
    "end": "596600"
  },
  {
    "text": "mechanism works is if you raise an error that is not caught in the current",
    "start": "596600",
    "end": "602200"
  },
  {
    "text": "context it returns up the stack of calling contexts until it is handled and if it's never handled it ends your",
    "start": "602200",
    "end": "609839"
  },
  {
    "text": "program and I say continues up the stack you can think about that as namespaces F itself is a namespace python handles",
    "start": "609839",
    "end": "617079"
  },
  {
    "text": "that by using a stack implementation but fu is a namespace I raise an index error",
    "start": "617079",
    "end": "622480"
  },
  {
    "text": "and there is no catch in that namespace so it ends execution of the current",
    "start": "622480",
    "end": "628040"
  },
  {
    "text": "namespace and goes back to where it was called and in that context there is a",
    "start": "628040",
    "end": "636360"
  },
  {
    "text": "catch it always propagates upwards through the calling context until it finds a Handler and if it doesn't find a",
    "start": "636360",
    "end": "641440"
  },
  {
    "text": "Handler it ends your program yes and you might uh one small note here we've been",
    "start": "641440",
    "end": "646639"
  },
  {
    "text": "using cy. exit to end programs obviously you could raise any error you wanted and",
    "start": "646639",
    "end": "651880"
  },
  {
    "text": "it would end your program as long as it wasn't being handled but there's a built-in error a built-in exception called system",
    "start": "651880",
    "end": "660440"
  },
  {
    "text": "exit that you can raise to end your program and my IPython is catching it",
    "start": "660440",
    "end": "666600"
  },
  {
    "text": "and not letting me close but if you put raise system exit where before you imported CIS and called cy. exit they're",
    "start": "666600",
    "end": "672560"
  },
  {
    "text": "actually the exact same thing the implementation of system exit is to call this",
    "start": "672560",
    "end": "678000"
  },
  {
    "text": "exit so the general um the general python approach towards errors and exceptional conditions is it is easier",
    "start": "678600",
    "end": "685680"
  },
  {
    "text": "to ask for forgiveness than to ask for permission so so one approach to error checking is um you have a function that",
    "start": "685680",
    "end": "692360"
  },
  {
    "text": "operates on three or four different operands and it's important what range they have you could spend some time making sure that each is in the",
    "start": "692360",
    "end": "698560"
  },
  {
    "text": "appropriate range so maybe you do some division you could first check and make sure that you don't divide anything by zero",
    "start": "698560",
    "end": "704480"
  },
  {
    "text": "because we can't do that right python says uh go ahead and do what you like",
    "start": "704480",
    "end": "710639"
  },
  {
    "text": "and if any errors occur afterward it's easier to ask for",
    "start": "710639",
    "end": "715680"
  },
  {
    "text": "forgiveness and your function itself doesn't necessarily have to implement any error handling mechanism because the",
    "start": "715680",
    "end": "721760"
  },
  {
    "text": "containing context will get the error if your function doesn't handle it and can",
    "start": "721760",
    "end": "727360"
  },
  {
    "text": "then handle it so instead of having airror handling code that is dispersed widely in your",
    "start": "727360",
    "end": "734360"
  },
  {
    "text": "program you can have more centralized air handling code um that kind of breaks",
    "start": "734360",
    "end": "739839"
  },
  {
    "text": "through your normal program execution flow and it typically just lets you have less error handling",
    "start": "739839",
    "end": "745760"
  },
  {
    "text": "code their classes when we get to oop um we'll talk about how to make new classes but you can make uh classes that extend",
    "start": "745760",
    "end": "752600"
  },
  {
    "text": "the base error there's a base class for all exceptions",
    "start": "752600",
    "end": "760160"
  },
  {
    "text": "those and yes you can Define your own custom exceptions you can also pass your",
    "start": "763199",
    "end": "768240"
  },
  {
    "text": "own message to an",
    "start": "768240",
    "end": "770959"
  },
  {
    "text": "exception and that message gets attached to the exception and gets passed back up the the",
    "start": "774560",
    "end": "780959"
  },
  {
    "text": "context so we showed all the parts of um try catch there's try accept else",
    "start": "784600",
    "end": "790720"
  },
  {
    "text": "finally in real life very frequently you will use try with an accept and a finally block I",
    "start": "790720",
    "end": "798519"
  },
  {
    "text": "almost never use else which is just continue which is there was no",
    "start": "798519",
    "end": "806040"
  },
  {
    "text": "error and I only use finally when have resources that need to be cleaned",
    "start": "806279",
    "end": "811639"
  },
  {
    "text": "up so most of the time it's just down to try and accept it's considered bad",
    "start": "811639",
    "end": "817160"
  },
  {
    "text": "python style to have a bare accept because that catches all errors which",
    "start": "817160",
    "end": "822720"
  },
  {
    "text": "includes syntax errors so if I write a",
    "start": "822720",
    "end": "827319"
  },
  {
    "text": "script and I python might not let me do this let's see yeah I python won't let me do this",
    "start": "828880",
    "end": "836000"
  },
  {
    "text": "let me do it in emex and run it",
    "start": "836000",
    "end": "840759"
  },
  {
    "text": "for",
    "start": "867680",
    "end": "870680"
  },
  {
    "text": "yeah",
    "start": "897680",
    "end": "900680"
  },
  {
    "text": "I have to carefully craft",
    "start": "906680",
    "end": "909800"
  },
  {
    "text": "it okay so except is Catch every",
    "start": "924759",
    "end": "929839"
  },
  {
    "text": "exception that could possibly be raised and I might think that it's kind",
    "start": "929839",
    "end": "934959"
  },
  {
    "text": "of obvious that there's only one possible",
    "start": "934959",
    "end": "938399"
  },
  {
    "text": "error but in fact I'm wrong the actual exception that's being raised is I'm",
    "start": "956360",
    "end": "962319"
  },
  {
    "text": "referring to a variable that's not instantiated because I'm catching any",
    "start": "962319",
    "end": "969399"
  },
  {
    "text": "possible exception that could be returned so bare exception classes or having an exception statement um that",
    "start": "969399",
    "end": "974920"
  },
  {
    "text": "inherits from the base exception are not a good idea in general you want to be aiming at specific exceptions and you",
    "start": "974920",
    "end": "981800"
  },
  {
    "text": "can find out what the specific exception",
    "start": "981800",
    "end": "985600"
  },
  {
    "text": "is by EX exting it and noting the name zero division",
    "start": "987079",
    "end": "992759"
  },
  {
    "text": "error and now you'll notice um I ran my program again the error that's actually occurring is again I have a name that's",
    "start": "1003079",
    "end": "1008920"
  },
  {
    "text": "not defined and it is not caught and handled by my accept clause and it's",
    "start": "1008920",
    "end": "1015480"
  },
  {
    "text": "causing the end of my program so no bare accept Clauses",
    "start": "1015480",
    "end": "1020519"
  },
  {
    "text": "usually you'll only use try and accept um you can make your own custom errors it's worth looking at the list of",
    "start": "1020519",
    "end": "1027120"
  },
  {
    "text": "built-in python exception types because they've got one for most every instance that you would want including things",
    "start": "1027120",
    "end": "1033199"
  },
  {
    "text": "like runtime error which is for sort of generic errors maybe that are um data",
    "start": "1033199",
    "end": "1041160"
  },
  {
    "text": "dependent things like index error I'll sometimes use to say I'm getting something that is out of range or is not",
    "start": "1045319",
    "end": "1051640"
  },
  {
    "text": "a key that I",
    "start": "1051640",
    "end": "1054799"
  },
  {
    "text": "wanted look up errors the same way at runtime I got some sort of key that I",
    "start": "1058480",
    "end": "1063559"
  },
  {
    "text": "didn't expect so I'll raise a look up",
    "start": "1063559",
    "end": "1066799"
  },
  {
    "text": "eror okay errors fairly straightforward exceptions fairly straightforward has anybody used languages that have um TR",
    "start": "1071640",
    "end": "1077600"
  },
  {
    "text": "catch blocks Java does I know we had some Java programmers no PHP does",
    "start": "1077600",
    "end": "1083320"
  },
  {
    "text": "nowadays but probably not yeah it's kind of a new thing to PHP",
    "start": "1083320",
    "end": "1089440"
  },
  {
    "text": "um it's a different way of thinking about how to handle errors it's Le typically less ver Bose it's a little",
    "start": "1089440",
    "end": "1095280"
  },
  {
    "text": "confusing that it breaks program execution but really frequently that's what you want anyways um very frequently",
    "start": "1095280",
    "end": "1100760"
  },
  {
    "text": "when you're making guards around functions you're going to return anyways you can't bother to execute all the rest of the code when you don't have the",
    "start": "1100760",
    "end": "1106679"
  },
  {
    "text": "appropriate error conditions so um trying trying and catching flows pretty well in how most programs are",
    "start": "1106679",
    "end": "1113520"
  },
  {
    "text": "structured um so you have to manually yourself decide to take that approach there is a built-in logging module and",
    "start": "1113520",
    "end": "1121280"
  },
  {
    "text": "we'll probably talk about it on the fourth day it's kind of on my list of things to talk about and again if you look at the resources page the standard",
    "start": "1121280",
    "end": "1129080"
  },
  {
    "text": "lib loging module is a little bit verbose um I believe it's a copy again of a um of a Java",
    "start": "1129080",
    "end": "1136480"
  },
  {
    "text": "implementation so it's a little bit complic at to understand and this is actually the best piece of documentation I've found on it um it's pretty",
    "start": "1136480",
    "end": "1143880"
  },
  {
    "text": "configurable you can have logging channels logging channels can be connected to loggers that output the",
    "start": "1143880",
    "end": "1149159"
  },
  {
    "text": "various things like say email or database and you can configure what sort of Errors they respond to so you can log everything to a single Channel and only",
    "start": "1149159",
    "end": "1155720"
  },
  {
    "text": "email like critical errors for instance and yeah you could wrap your entire so if you wanted to do what",
    "start": "1155720",
    "end": "1163200"
  },
  {
    "text": "you're just suggesting you could use TR catch blocks in your code in places where you can",
    "start": "1163200",
    "end": "1168440"
  },
  {
    "text": "potentially recover from errors which is sometimes sometimes you can do some sort of cleanup or say oh I",
    "start": "1168440",
    "end": "1174280"
  },
  {
    "text": "got a zero divisor I'm just going to return zero here that that's a special case like normally I'm going to divide",
    "start": "1174280",
    "end": "1180039"
  },
  {
    "text": "by the diviser but in this case I'm just going to return zero so sometimes as you can recover from errors you could wrap your main",
    "start": "1180039",
    "end": "1187080"
  },
  {
    "text": "block inside of a TR catch that catches",
    "start": "1187080",
    "end": "1195519"
  },
  {
    "text": "anything and log any errors that",
    "start": "1197240",
    "end": "1203600"
  },
  {
    "text": "occur to catch the so the first thing is the kind of error it's the class name of the error that's been raised the",
    "start": "1211400",
    "end": "1217159"
  },
  {
    "text": "exception and the second thing that's optional is the instance of the",
    "start": "1217159",
    "end": "1223600"
  },
  {
    "text": "exception so exceptions are actually objects they're instantiated from classes we haven't talked enough to know",
    "start": "1223840",
    "end": "1229520"
  },
  {
    "text": "exactly what that means but that means the the class name is kind of important it tells you what kind of error and then",
    "start": "1229520",
    "end": "1234760"
  },
  {
    "text": "the instance may have a custom message attached to it um let's move on to talk about namespaces and importing we've",
    "start": "1234760",
    "end": "1241559"
  },
  {
    "text": "kind of been dancing around how python manages modules and packages a bunch of you have imported uh from your scripts",
    "start": "1241559",
    "end": "1247960"
  },
  {
    "text": "you were encouraged to do that in the last uh lab we're using the hiding behind if name equals main a syntax to",
    "start": "1247960",
    "end": "1255559"
  },
  {
    "text": "allow you to do that um Nam spaces first of all we've discussed function Nam",
    "start": "1255559",
    "end": "1260799"
  },
  {
    "text": "spaces and module Nam spaces we've even discussed the impact of",
    "start": "1260799",
    "end": "1268360"
  },
  {
    "text": "importing so we've been saying along there are basically two namespaces there's a local namespace and there's a global namespace once again I've kind of",
    "start": "1286400",
    "end": "1293559"
  },
  {
    "text": "lied to you in the interest of Simplicity there's actually a local namespace and what we've been calling the global namespace is actually your",
    "start": "1293559",
    "end": "1299520"
  },
  {
    "text": "modules namespace so there's not a single- shared Global namespace for all the",
    "start": "1299520",
    "end": "1305679"
  },
  {
    "text": "modules that exist we can create new namespaces by",
    "start": "1305679",
    "end": "1312120"
  },
  {
    "text": "creating functions uh classes and objects as we'll find in a little while and we can impact our current namespace",
    "start": "1312120",
    "end": "1319000"
  },
  {
    "text": "by importing in four different four different ways four different ways so",
    "start": "1319000",
    "end": "1325279"
  },
  {
    "text": "the import statement um python looks in predefined locations that are determined by um your python installation on most",
    "start": "1325279",
    "end": "1333440"
  },
  {
    "text": "sayane operating systems there is a site packages library that is in your system",
    "start": "1333440",
    "end": "1339240"
  },
  {
    "text": "directory if you have a python that's installed by your system so Unix and Mac OS people have fairly same setups um for",
    "start": "1339240",
    "end": "1346080"
  },
  {
    "text": "Windows I think it's actually the default like on your windows box is going to be C drive",
    "start": "1346080",
    "end": "1351120"
  },
  {
    "text": "python27 lib there's a bunch of python and pisy files uh in there and they're",
    "start": "1351120",
    "end": "1358039"
  },
  {
    "text": "all accessible to import automatically most python installations also will look in the current directory",
    "start": "1358039",
    "end": "1363760"
  },
  {
    "text": "automatically for importing things and aside from that you can manage your",
    "start": "1363760",
    "end": "1369480"
  },
  {
    "text": "environment basically where you look for things to import in a bunch of different ways you can um manage it",
    "start": "1369480",
    "end": "1376840"
  },
  {
    "text": "manually the cy. path",
    "start": "1376960",
    "end": "1383000"
  },
  {
    "text": "variable has every place python is looking for packages right",
    "start": "1383000",
    "end": "1388720"
  },
  {
    "text": "now and it alarms me somewhat to see that user bin is",
    "start": "1388720",
    "end": "1394240"
  },
  {
    "text": "there it's looking in egg files which we will talk about at some point but egg files are basically a way of zipping",
    "start": "1394240",
    "end": "1401039"
  },
  {
    "text": "together a python distribution um so you can do a single file distribution of a package and then it's looking in um some",
    "start": "1401039",
    "end": "1408480"
  },
  {
    "text": "predefined locations in lib the python uh directories and most significantly",
    "start": "1408480",
    "end": "1415159"
  },
  {
    "text": "disc packages are things that Ubuntu my OS",
    "start": "1415159",
    "end": "1419480"
  },
  {
    "text": "installs and you can yes manipulate the CIS path so I could at the start of my script say sis. path.",
    "start": "1425760",
    "end": "1436000"
  },
  {
    "text": "append it's just a",
    "start": "1436880",
    "end": "1442159"
  },
  {
    "text": "list and now it's got an extra location and any python files that are there I can automatically import by saying",
    "start": "1442480",
    "end": "1448080"
  },
  {
    "text": "import they have to be files that end in py to be importable you can't specify the full file name when you import and",
    "start": "1448080",
    "end": "1455360"
  },
  {
    "text": "as we've discussed they have to be files uh whose name is a proper python variable so yes you can run a python",
    "start": "1455360",
    "end": "1462919"
  },
  {
    "text": "file with a dash or space in it but you can't import it",
    "start": "1462919",
    "end": "1469399"
  },
  {
    "text": "python lets you organize modules into hierarchical collections called packages and the rules for packages are",
    "start": "1469399",
    "end": "1476840"
  },
  {
    "text": "pretty straightforward a directory is a package if it contains a special",
    "start": "1476840",
    "end": "1483200"
  },
  {
    "text": "file and the name of the special file is Dunder init.py socore uncore",
    "start": "1483200",
    "end": "1491840"
  },
  {
    "text": "init.py yep so",
    "start": "1491840",
    "end": "1498840"
  },
  {
    "text": "packages can be modules in a hierarchical folder layout but it only works if there is a",
    "start": "1498840",
    "end": "1506399"
  },
  {
    "text": "underscore uncore init.py",
    "start": "1506399",
    "end": "1511880"
  },
  {
    "text": "file so let's check that out a little",
    "start": "1513520",
    "end": "1517640"
  },
  {
    "text": "bit",
    "start": "1526679",
    "end": "1529679"
  },
  {
    "text": "so in my current directory I have a bunch of python files my current directory is on my path by default I've",
    "start": "1546279",
    "end": "1553600"
  },
  {
    "text": "got a directory called my package and my package has a python script and it called",
    "start": "1553600",
    "end": "1560520"
  },
  {
    "text": "f.y there is no module name my",
    "start": "1565320",
    "end": "1570480"
  },
  {
    "text": "package and now there is so what changed I just added a",
    "start": "1581399",
    "end": "1586720"
  },
  {
    "text": "special file to the directory that indicates to python this is a package",
    "start": "1586720",
    "end": "1592320"
  },
  {
    "text": "you don't need to do anything else that init file is empty there's",
    "start": "1592320",
    "end": "1598760"
  },
  {
    "text": "nothing in it you can if you want to put python code in the init file and when",
    "start": "1598760",
    "end": "1604080"
  },
  {
    "text": "python Imports a package what it actually Imports is that anit file and that anit file can Define the layout of",
    "start": "1604080",
    "end": "1611159"
  },
  {
    "text": "the modules contained in a package if it wants to and potentially hierarchically arranged I could put more direct",
    "start": "1611159",
    "end": "1617559"
  },
  {
    "text": "directories in my package and what that gets you then is there's four ways of importing things",
    "start": "1617559",
    "end": "1624919"
  },
  {
    "text": "uh actually let me go ahead and put some code in um f",
    "start": "1624919",
    "end": "1630799"
  },
  {
    "text": "there yep we'll talk about that in a",
    "start": "1646520",
    "end": "1652240"
  },
  {
    "text": "second so let's talk about the import statement we've been using import",
    "start": "1652240",
    "end": "1657640"
  },
  {
    "text": "without kind of explaining uh how it works or the various ways you can use it we've done straight Imports so I can",
    "start": "1657640",
    "end": "1664320"
  },
  {
    "text": "import my package and what does that statement",
    "start": "1664320",
    "end": "1672278"
  },
  {
    "text": "do I've created a new variable in my locals called my package that variable",
    "start": "1676519",
    "end": "1683600"
  },
  {
    "text": "is of type module and you'll notice that the file is that AIT",
    "start": "1683600",
    "end": "1691919"
  },
  {
    "text": "file that's it as far as affecting my local namespace if I want to refer to",
    "start": "1691919",
    "end": "1697320"
  },
  {
    "text": "things in my package I have to explicitly say my package and is there",
    "start": "1697320",
    "end": "1702480"
  },
  {
    "text": "anything in my package nope",
    "start": "1702480",
    "end": "1709440"
  },
  {
    "text": "no Foo my package is theit file my nit file doesn't Define",
    "start": "1710600",
    "end": "1715799"
  },
  {
    "text": "anything so I've got no code right my",
    "start": "1715799",
    "end": "1721200"
  },
  {
    "text": "package it's just a module the from statement can preface an",
    "start": "1725360",
    "end": "1733960"
  },
  {
    "text": "import and I did something new my package it it",
    "start": "1736399",
    "end": "1743240"
  },
  {
    "text": "itself doesn't have any code but it does have a module inside it so I'm importing",
    "start": "1743240",
    "end": "1748960"
  },
  {
    "text": "a subm",
    "start": "1748960",
    "end": "1751559"
  },
  {
    "text": "module and food does have you know a little bit of code attached to",
    "start": "1756000",
    "end": "1761960"
  },
  {
    "text": "it and when I did that from my package import",
    "start": "1763000",
    "end": "1771159"
  },
  {
    "text": "Fu how did I affect my local namespace I have only food there is no",
    "start": "1771159",
    "end": "1778360"
  },
  {
    "text": "my package I just have",
    "start": "1778360",
    "end": "1784200"
  },
  {
    "text": "Foo so this means you can store your modules in dotted hierarchies and people can import them",
    "start": "1784200",
    "end": "1793480"
  },
  {
    "text": "with short names if they like this helps to avoid the whole um um clashing",
    "start": "1793480",
    "end": "1798919"
  },
  {
    "text": "Library names problem and there's two other ways I can",
    "start": "1798919",
    "end": "1807518"
  },
  {
    "text": "import not only can I put a from module import module I can do as and a new",
    "start": "1817519",
    "end": "1824919"
  },
  {
    "text": "identifier so you remember earlier we were using date time it's like the very first",
    "start": "1824919",
    "end": "1831320"
  },
  {
    "text": "script and we could do import date time and then to get to the Now function we had to do date time which is a package",
    "start": "1832480",
    "end": "1840760"
  },
  {
    "text": "date time is a class inside that package now",
    "start": "1840760",
    "end": "1845880"
  },
  {
    "text": "is a function that belongs to that class which is kind of long we could do",
    "start": "1845880",
    "end": "1851679"
  },
  {
    "text": "from date time import date time",
    "start": "1851679",
    "end": "1858639"
  },
  {
    "text": "and that",
    "start": "1858639",
    "end": "1860960"
  },
  {
    "text": "shorter we could do as DT which I usually do when I'm using the",
    "start": "1864440",
    "end": "1869600"
  },
  {
    "text": "datetime module so I've given it a new and identifier can we import now",
    "start": "1869600",
    "end": "1877320"
  },
  {
    "text": "directly doesn't work because",
    "start": "1882120",
    "end": "1889159"
  },
  {
    "text": "date time is not a module it's a class so from a module I can import",
    "start": "1893320",
    "end": "1900320"
  },
  {
    "text": "anything I want like from my package which is a module I can import",
    "start": "1900320",
    "end": "1907519"
  },
  {
    "text": "fu fu is a module and from it I can import",
    "start": "1907519",
    "end": "1915000"
  },
  {
    "text": "x x was just a a integer variable and now I didn't import the",
    "start": "1915000",
    "end": "1921480"
  },
  {
    "text": "module at all I just grabbed one piece of data from",
    "start": "1921480",
    "end": "1926480"
  },
  {
    "text": "it so importing normally is used to say import a module it can be used to say from a",
    "start": "1927279",
    "end": "1934399"
  },
  {
    "text": "module import something else which is not necessarily a module but can",
    "start": "1934399",
    "end": "1940679"
  },
  {
    "text": "be it can say from a module import something with a name",
    "start": "1941120",
    "end": "1947679"
  },
  {
    "text": "and it can also be used and this is the dangerous and non-hygienic",
    "start": "1947679",
    "end": "1953080"
  },
  {
    "text": "version I'm in Python I have no locals just the built-in ones I say from my",
    "start": "1955240",
    "end": "1964320"
  },
  {
    "text": "package. Fu import Star and star in this case is in the glob Wild Card sense and",
    "start": "1964320",
    "end": "1972840"
  },
  {
    "text": "it Imports everything from Fu which is a module into my local",
    "start": "1972840",
    "end": "1978120"
  },
  {
    "text": "name",
    "start": "1978120",
    "end": "1980480"
  },
  {
    "text": "space and you notice there's now an X this is",
    "start": "1983720",
    "end": "1990840"
  },
  {
    "text": "dangerous cuz you don't know what you're getting and it could clobber your local variable",
    "start": "2002919",
    "end": "2008880"
  },
  {
    "text": "everything else package module and modules contain",
    "start": "2008880",
    "end": "2015799"
  },
  {
    "text": "variables variables can be classes they can be just you know x with an INT you can import any variable from a",
    "start": "2015799",
    "end": "2024519"
  },
  {
    "text": "module you can only directly import modules and a package is just a module",
    "start": "2024519",
    "end": "2031120"
  },
  {
    "text": "that contains other modules so I keep on saying packages but a package is just a special kind of",
    "start": "2031120",
    "end": "2037919"
  },
  {
    "text": "module so so date time it can yes mod",
    "start": "2037919",
    "end": "2043679"
  },
  {
    "text": "there yes technically a module technically everything in Python is a class okay and you can potentially",
    "start": "2043679",
    "end": "2049320"
  },
  {
    "text": "extend and overwrite the behavior but in the case of modules we do not so a module is a particular type in Python",
    "start": "2049320",
    "end": "2055118"
  },
  {
    "text": "just like a function is a particular type that has predefined behaviors so a function is predefined behavior that",
    "start": "2055119",
    "end": "2060200"
  },
  {
    "text": "special is it's a callable you can call it the modules predefined Behavior that's special is you can import from it",
    "start": "2060200",
    "end": "2067358"
  },
  {
    "text": "about how about a class what's the difference between a class and a module a class is something for making objects",
    "start": "2067359",
    "end": "2074398"
  },
  {
    "text": "okay and a class is really just a function we we we'll get to that there's",
    "start": "2074399",
    "end": "2081560"
  },
  {
    "text": "not really very much difference between classes and functions in Python except what you do with them okay yeah so we",
    "start": "2081560",
    "end": "2087280"
  },
  {
    "text": "we'll get to classes on day three but at this point think about classes is just another complex type like a dict or a",
    "start": "2087280",
    "end": "2093839"
  },
  {
    "text": "list or a function or a function function yep",
    "start": "2093839",
    "end": "2099440"
  },
  {
    "text": "okay so if you just do import my package mhm without any dot or for",
    "start": "2099440",
    "end": "2105880"
  },
  {
    "text": "slash could that be I didn't run make sure you're in um make sure you're in",
    "start": "2105880",
    "end": "2111200"
  },
  {
    "text": "the current work you're in the right working directory and you can do that I believe with OS",
    "start": "2111200",
    "end": "2118520"
  },
  {
    "text": "CWD",
    "start": "2125800",
    "end": "2128800"
  },
  {
    "text": "is there a CWD",
    "start": "2151359",
    "end": "2157680"
  },
  {
    "text": "I have to look in my nutshell to know I don't know if anybody's been checking out the um docs on python but it's got a pretty",
    "start": "2157680",
    "end": "2166240"
  },
  {
    "text": "good search",
    "start": "2166240",
    "end": "2169640"
  },
  {
    "text": "function H that's not what I",
    "start": "2177839",
    "end": "2181640"
  },
  {
    "text": "want get CWD",
    "start": "2183359",
    "end": "2188720"
  },
  {
    "text": "um so if we wanted to reorganize our classmates file which we aren't going to do yet",
    "start": "2196400",
    "end": "2204000"
  },
  {
    "text": "um we could start to think about it as Library code versus actual program code",
    "start": "2204680",
    "end": "2211119"
  },
  {
    "text": "and any general purpose functions that we have we could put into a separate file what would be the advantages or",
    "start": "2211119",
    "end": "2216160"
  },
  {
    "text": "disadvantages of doing that like why would we bother structuring things in packages and modules cleaner more organized yeah so",
    "start": "2216160",
    "end": "2223160"
  },
  {
    "text": "that's like the main number one thing you should think about in terms of your code um files shouldn't be big if you've",
    "start": "2223160",
    "end": "2230000"
  },
  {
    "text": "got 1,200 lines of python code you probably ought to break it up into multiple files so that you can group",
    "start": "2230000",
    "end": "2235160"
  },
  {
    "text": "similar functions because there's no way that you can page down and understand all that um and there's a few other",
    "start": "2235160",
    "end": "2241720"
  },
  {
    "text": "metrics for sizes that I sometimes I've got a couple of um automated tools I run on some code basis for customer times",
    "start": "2241720",
    "end": "2246880"
  },
  {
    "text": "they tell me just how much work we have to do to get things perfectly clean but say you're you have a file that defines",
    "start": "2246880",
    "end": "2252400"
  },
  {
    "text": "50 functions again even if they're short functions you may not be able to kind of grock the entire purpose of all those",
    "start": "2252400",
    "end": "2258359"
  },
  {
    "text": "functions and if you can group them in any sort of way or categorize them in any sort of way it's kind of a benefit",
    "start": "2258359",
    "end": "2263800"
  },
  {
    "text": "to you our um program isn't really big enough to profit from such grouping and",
    "start": "2263800",
    "end": "2270280"
  },
  {
    "text": "categorization when we start talking about testing which we will um just shortly and see how it is we test stuff",
    "start": "2270280",
    "end": "2276960"
  },
  {
    "text": "there are some other advantages to moving things into separate packages um or separate modules you can just test a",
    "start": "2276960",
    "end": "2282280"
  },
  {
    "text": "particular module and we might not want to test the main logic of our program but we might want to test all of our",
    "start": "2282280",
    "end": "2288240"
  },
  {
    "text": "helper functions and helper classes and objects when we get that far and moving them into separate um modules lets us",
    "start": "2288240",
    "end": "2295040"
  },
  {
    "text": "easily decide what pieces of our code we're running tests on and what pieces we're skipping would be",
    "start": "2295040",
    "end": "2302040"
  },
  {
    "text": "testing speed testing for correctness so we'll have automated testing that says here's how the function should work",
    "start": "2302119",
    "end": "2308599"
  },
  {
    "text": "here's an example of it working and the output I should get back run it and see if I do get in fact get back that output",
    "start": "2308599",
    "end": "2313800"
  },
  {
    "text": "um that's doc test and that's the simplest form of testing and we'll talk about unit test um either tomorrow or on",
    "start": "2313800",
    "end": "2319640"
  },
  {
    "text": "day four depending on how far long we get and if you're not aware testing is kind of all the rage in the programming",
    "start": "2319640",
    "end": "2325599"
  },
  {
    "text": "community at the moment if you work on a project of any significant size it's really wise to have tests and tests",
    "start": "2325599",
    "end": "2332760"
  },
  {
    "text": "basically demonstrate um the compliance of your program",
    "start": "2332760",
    "end": "2338440"
  },
  {
    "text": "overall and what tests do for you is let you be more agile you can change the implementation of a function if you've",
    "start": "2338440",
    "end": "2345480"
  },
  {
    "text": "got a lot of tests for it because you can run all the tests at the end and say hey I changed how this works but what it",
    "start": "2345480",
    "end": "2350960"
  },
  {
    "text": "does is still exactly what it did before and otherwise if you make a lot of changes to functionality um let's say",
    "start": "2350960",
    "end": "2358440"
  },
  {
    "text": "you have a function that runs way too slow so you're going to use a completely different algorithm but you still want to accomplish the same task when you're",
    "start": "2358440",
    "end": "2364960"
  },
  {
    "text": "done have you now introduced new bugs into program without test you don't know if",
    "start": "2364960",
    "end": "2370119"
  },
  {
    "text": "you've got an automated testing Suite set up you can feel free to edit your code um more freely without worrying",
    "start": "2370119",
    "end": "2376720"
  },
  {
    "text": "about the cost of change because you've already accounted for them so it's really popular right now even to do test",
    "start": "2376720",
    "end": "2381880"
  },
  {
    "text": "driven development which is write your test first note that they all fail and then start writing your program by making your test pass um no we have some",
    "start": "2381880",
    "end": "2389599"
  },
  {
    "text": "automatic ways to run the tests to run the test the test usually",
    "start": "2389599",
    "end": "2395560"
  },
  {
    "text": "not to generate the test tests um there are some tools that automatically kind of generate the stubs for your tests um",
    "start": "2395560",
    "end": "2401520"
  },
  {
    "text": "depending on what framework you're using but yeah you usually have to fill in the test definitions yourself because it's",
    "start": "2401520",
    "end": "2407680"
  },
  {
    "text": "it's basically restating the logic of your program as we'll see okay so let's do",
    "start": "2407680",
    "end": "2415319"
  },
  {
    "text": "One More Concept and then we can start playing with our lab again uh let's see what time is it",
    "start": "2415319",
    "end": "2423200"
  },
  {
    "text": "actually yeah let's do One More Concept and those of you who are ready to move on in your lab will have something to do",
    "start": "2425160",
    "end": "2430720"
  },
  {
    "text": "and those of you who aren't I will um come sit with you for a bit so files working with files we haven't talked about files at all so",
    "start": "2430720",
    "end": "2438200"
  },
  {
    "text": "far um I'm on page 24 of your docs at section 10 if you're interested but",
    "start": "2438200",
    "end": "2444839"
  },
  {
    "text": "basic file input and output um python has a library that is a thin skin over",
    "start": "2444839",
    "end": "2451079"
  },
  {
    "text": "the standard C methods of manipulating files so it should look pretty familiar to you if you use any other programming language that does a",
    "start": "2451079",
    "end": "2457000"
  },
  {
    "text": "kind of thing and let's just run through some of the bits and",
    "start": "2457000",
    "end": "2461839"
  },
  {
    "text": "pieces I'm using um IPython which will give me in fact let's give myself a file",
    "start": "2468839",
    "end": "2474119"
  },
  {
    "text": "to work",
    "start": "2474119",
    "end": "2476559"
  },
  {
    "text": "with okay I have a sample text file here that is just a directory",
    "start": "2482640",
    "end": "2489960"
  },
  {
    "text": "listing the open built-in accepts a file name argument it",
    "start": "2494680",
    "end": "2500000"
  },
  {
    "text": "can be relative path so it's based on where I currently am or an absolute",
    "start": "2500000",
    "end": "2506838"
  },
  {
    "text": "path and my IPython shell does autocomplete on the file system as well",
    "start": "2508119",
    "end": "2513560"
  },
  {
    "text": "so now what have I got I've got a file object it's just a normal variable no",
    "start": "2513560",
    "end": "2519640"
  },
  {
    "text": "special syntax but it's a type file it specifies where the file is it says mode",
    "start": "2519640",
    "end": "2524800"
  },
  {
    "text": "R when we read and write from files we can open them for a variety of things the default is to open them for reading",
    "start": "2524800",
    "end": "2532400"
  },
  {
    "text": "we can also open them for writing if you open a file for writing it empties the file and starts you at the beginning of",
    "start": "2532400",
    "end": "2539160"
  },
  {
    "text": "the file so you usually only open files that don't yet exist for writing if you want",
    "start": "2539160",
    "end": "2546880"
  },
  {
    "text": "to edit a file there's mode a for a pend and the file object will let you move to",
    "start": "2546880",
    "end": "2553599"
  },
  {
    "text": "a arbitrary position within the file and write data the other thing to be aware of is that you open files with either a",
    "start": "2553599",
    "end": "2560000"
  },
  {
    "text": "text or a binary mode and this is a crossplatform deal if you open uh files in text mode",
    "start": "2560000",
    "end": "2568680"
  },
  {
    "text": "which is the default I believe that right yeah which is the default",
    "start": "2568680",
    "end": "2574640"
  },
  {
    "text": "um python will automatically handle new line characters for you because it's assuming you have a text file that is",
    "start": "2574640",
    "end": "2581000"
  },
  {
    "text": "separated by Carriage returns if you open it as binary python doesn't take",
    "start": "2581000",
    "end": "2586079"
  },
  {
    "text": "into account the new",
    "start": "2586079",
    "end": "2589599"
  },
  {
    "text": "lines so what can I do with my open file I have read read",
    "start": "2593599",
    "end": "2600680"
  },
  {
    "text": "line and read lines let's look at read lines first it's a function",
    "start": "2600680",
    "end": "2607200"
  },
  {
    "text": "and it returns a list where each item in the list is one line from my file and it is the whole",
    "start": "2607200",
    "end": "2614960"
  },
  {
    "text": "line including the trailing carriage return see the slash in at the",
    "start": "2614960",
    "end": "2622640"
  },
  {
    "text": "end if I run it again I got nothing the file object is inherently file pointer",
    "start": "2622920",
    "end": "2631880"
  },
  {
    "text": "based so when you open a file object it has a position and it starts out at the",
    "start": "2631880",
    "end": "2637440"
  },
  {
    "text": "top you can move that pointer around explicitly by seeking to a specific",
    "start": "2637440",
    "end": "2643119"
  },
  {
    "text": "location or you can move the pointer by reading from the file and if you read a single line it moves a single line if",
    "start": "2643119",
    "end": "2649079"
  },
  {
    "text": "you read all the lines it moves to the end so I can do an F dot",
    "start": "2649079",
    "end": "2655319"
  },
  {
    "text": "seek to the beginning and read a single line and I've got the first line in the",
    "start": "2658880",
    "end": "2664680"
  },
  {
    "text": "file",
    "start": "2665000",
    "end": "2668000"
  },
  {
    "text": "so you may be very tempted to write code like",
    "start": "2670800",
    "end": "2675838"
  },
  {
    "text": "this print the line not the file",
    "start": "2691160",
    "end": "2697960"
  },
  {
    "text": "notice that there's two blank lines in between each line print appends a new",
    "start": "2699000",
    "end": "2705119"
  },
  {
    "text": "line to the end of its output by default and there's an embedded new line in each of the",
    "start": "2705119",
    "end": "2712040"
  },
  {
    "text": "lines got to",
    "start": "2714880",
    "end": "2718279"
  },
  {
    "text": "seek you can suppress the new line that print passes by appending a comma to the",
    "start": "2720880",
    "end": "2727640"
  },
  {
    "text": "end of your print statement and what that is actually doing is passing none as the last element in the Tuple to",
    "start": "2727640",
    "end": "2734200"
  },
  {
    "text": "print print in Python 2 is a statement that takes a tupo an implied Tuple of objects and I",
    "start": "2734200",
    "end": "2743440"
  },
  {
    "text": "can say print one two",
    "start": "2743440",
    "end": "2749640"
  },
  {
    "text": "five it's accepting multiple parameters if you",
    "start": "2749640",
    "end": "2754880"
  },
  {
    "text": "like if the last one is none it'll suppress the trailing new",
    "start": "2754880",
    "end": "2760880"
  },
  {
    "text": "line",
    "start": "2760880",
    "end": "2763880"
  },
  {
    "text": "um so there's a null argument at the end and therefore it's not printing it's",
    "start": "2767480",
    "end": "2774520"
  },
  {
    "text": "suppressing the new line if the last thing you pass it",
    "start": "2774520",
    "end": "2779760"
  },
  {
    "text": "yes so I still get a new line because there's one embedded in my file um and I was about to say you might be tempted to write code like for line in f. read",
    "start": "2779760",
    "end": "2786520"
  },
  {
    "text": "lines don't do that uh seeking back to the beginning",
    "start": "2786520",
    "end": "2795240"
  },
  {
    "text": "here at least don't do that read lines reads the",
    "start": "2797920",
    "end": "2803640"
  },
  {
    "text": "entire file into memory and creates a list with all the entries so if you have a really big file that you want to Loop",
    "start": "2803640",
    "end": "2809960"
  },
  {
    "text": "through like say you open a 2 gig text file and you save for line and f. read lines the first thing it'll do is read 2",
    "start": "2809960",
    "end": "2815559"
  },
  {
    "text": "gig of text into memory and then start looping very slow it would be better to",
    "start": "2815559",
    "end": "2821640"
  },
  {
    "text": "say forf and I got to remember to seek each",
    "start": "2821640",
    "end": "2826800"
  },
  {
    "text": "time I move to the end of the file for Ln",
    "start": "2826800",
    "end": "2833160"
  },
  {
    "text": "f. read",
    "start": "2833160",
    "end": "2836599"
  },
  {
    "text": "line H I'm thinking about",
    "start": "2844720",
    "end": "2852720"
  },
  {
    "text": "that ah right",
    "start": "2859040",
    "end": "2863319"
  },
  {
    "text": "H I'm making it iterate over a single",
    "start": "2865359",
    "end": "2870200"
  },
  {
    "text": "line",
    "start": "2874720",
    "end": "2877720"
  },
  {
    "text": "no actually what I want to do is the assignment and I thought I could shortcut the",
    "start": "2894800",
    "end": "2899760"
  },
  {
    "text": "assignment",
    "start": "2904640",
    "end": "2907640"
  },
  {
    "text": "there we go so I knew I'd done this the stupid way before so this way is more efficient and I've written code that",
    "start": "2912280",
    "end": "2918000"
  },
  {
    "text": "does this I'm reading through the file a line at a time and looping I can't do it with a for loop I have to do it with a",
    "start": "2918000",
    "end": "2924000"
  },
  {
    "text": "while loop and I have to initialize my line and read line at the end the file object itself is",
    "start": "2924000",
    "end": "2931520"
  },
  {
    "text": "iterable and the real way to do this",
    "start": "2931520",
    "end": "2937079"
  },
  {
    "text": "is for line in F just",
    "start": "2937079",
    "end": "2943838"
  },
  {
    "text": "F it's using an iterator it's reading in the lines one at a time instead of slurping them all into memory and this",
    "start": "2952559",
    "end": "2958839"
  },
  {
    "text": "is the fastest and um friendliest way to Loop through a",
    "start": "2958839",
    "end": "2964160"
  },
  {
    "text": "file so close which we'll talk about in a second encoding which we probably won't",
    "start": "2964520",
    "end": "2970200"
  },
  {
    "text": "talk about um file number is the underlying operating system level file handle",
    "start": "2970200",
    "end": "2976839"
  },
  {
    "text": "number there is not and that kind of makes sense how",
    "start": "2980839",
    "end": "2986839"
  },
  {
    "text": "could you tell how many lines there are on a file well you'd have to read the whole file read the whole file and count",
    "start": "2986839",
    "end": "2992640"
  },
  {
    "text": "the slash ends that's right so if you're going to do that",
    "start": "2992640",
    "end": "2997520"
  },
  {
    "text": "we can tell ourselves by grabbing the array of all the lines or we can Loop through and increment a",
    "start": "3009680",
    "end": "3014920"
  },
  {
    "text": "counter but counting the lines in a file would implicitly move the file pointer around yeah if there was a like f. count",
    "start": "3014920",
    "end": "3022200"
  },
  {
    "text": "lines that would move you to the end of the file",
    "start": "3022200",
    "end": "3027359"
  },
  {
    "text": "there isn't any way to tell without reading the whole file how many lines there are in it that is referring to the memory offset in the file offet",
    "start": "3027359",
    "end": "3035240"
  },
  {
    "text": "yep boundar depends on your operating system very sadly very so yes it is so in",
    "start": "3035240",
    "end": "3044720"
  },
  {
    "text": "general um I am using seek to go back to the beginning of my file and that's pretty much the only thing I ever use",
    "start": "3044720",
    "end": "3050920"
  },
  {
    "text": "seek for if you're writing to a binary formatted file you might be using seek and calculating offsets yourself but if",
    "start": "3050920",
    "end": "3056720"
  },
  {
    "text": "you're writing to a binary formatted file of some kind you're probably using a library that speaks to it directly so",
    "start": "3056720",
    "end": "3062480"
  },
  {
    "text": "for instance if I'm reading and writing from an Excel file I don't read and write the binary file and figure out",
    "start": "3062480",
    "end": "3067599"
  },
  {
    "text": "what data structures are underlying it I use a library that speaks to excel natively if I'm and and if I'm using a",
    "start": "3067599",
    "end": "3074440"
  },
  {
    "text": "database file like a dbm file I don't manipulate around Python's capable of",
    "start": "3074440",
    "end": "3079760"
  },
  {
    "text": "that but it's kind of annoying work I use a library that speaks to it directly there is aary typically so in any of my",
    "start": "3079760",
    "end": "3086599"
  },
  {
    "text": "file opening experience in my day-to-day day job I'm only directly using the file object when I'm reading and writing text",
    "start": "3086599",
    "end": "3091720"
  },
  {
    "text": "files and if I'm reading and writing binary files it's probably some sort of well-known format that has a library that doesn't force me down to the raw",
    "start": "3091720",
    "end": "3098599"
  },
  {
    "text": "file um file object so we know almost enough to be dangerous um let's look at",
    "start": "3098599",
    "end": "3103920"
  },
  {
    "text": "writing if I do f. write right now just write",
    "start": "3103920",
    "end": "3110040"
  },
  {
    "text": "something it complains my file is not open for writing I can specify the mode as an option second",
    "start": "3110040",
    "end": "3117280"
  },
  {
    "text": "argument to my file and now if I do",
    "start": "3117280",
    "end": "3124319"
  },
  {
    "text": "read it says it's not open for reading and if",
    "start": "3124319",
    "end": "3130000"
  },
  {
    "text": "I look at my file it's empty opening a file in writing mode empties it and",
    "start": "3131119",
    "end": "3138440"
  },
  {
    "text": "assumes that all you're going to do is put stuff into",
    "start": "3138440",
    "end": "3143359"
  },
  {
    "text": "it let me recreate my",
    "start": "3144280",
    "end": "3151160"
  },
  {
    "text": "file yes it do or writing for that matter",
    "start": "3169319",
    "end": "3177240"
  },
  {
    "text": "and if I do a pin mode um oh yeah a pin mode is going to",
    "start": "3183079",
    "end": "3188599"
  },
  {
    "text": "move me to the end of the file not truncating the file but it's still",
    "start": "3188599",
    "end": "3193960"
  },
  {
    "text": "opening it for writing on uh last thing to know about files so mostly we haven't talked very much about memory management",
    "start": "3193960",
    "end": "3200799"
  },
  {
    "text": "because python has automatic memory management file objects shouldn't be",
    "start": "3200799",
    "end": "3205880"
  },
  {
    "text": "left open once they're done with they do have a protocol that automatically close themselves so for instance if you open a",
    "start": "3205880",
    "end": "3212160"
  },
  {
    "text": "file within a function and the function execution ceases and the file variable",
    "start": "3212160",
    "end": "3217640"
  },
  {
    "text": "now goes out of scope it will python will automatically close the file for you but for instance if you're um",
    "start": "3217640",
    "end": "3224839"
  },
  {
    "text": "opening files within a loop it's possible to accumulate lots of open file handles which you're OS may or may not",
    "start": "3224839",
    "end": "3230359"
  },
  {
    "text": "like so it's worthwhile to explicitly close and common use of try and accept",
    "start": "3230359",
    "end": "3236319"
  },
  {
    "text": "blocks is to make sure that you have a finally that closes your file no matter what else",
    "start": "3236319",
    "end": "3241559"
  },
  {
    "text": "happens so if there was some exception in Reading that's fine but let's make sure that we close our",
    "start": "3241559",
    "end": "3246760"
  },
  {
    "text": "file so I'd like you all to play in the interactive console with the file object",
    "start": "3246760",
    "end": "3252359"
  },
  {
    "text": "and then the next thing we're going to do for our classmates file is start out reading our initial data from a text",
    "start": "3252359",
    "end": "3259559"
  },
  {
    "text": "file and I'd like that text file to be in CSV format we're not going to use the",
    "start": "3259559",
    "end": "3265240"
  },
  {
    "text": "built-in CSV library to read and write from it but we do know enough to parse CSV we have a split on a separator which",
    "start": "3265240",
    "end": "3271960"
  },
  {
    "text": "is going to be a comma me pull up the",
    "start": "3271960",
    "end": "3280119"
  },
  {
    "text": "instructions",
    "start": "3294079",
    "end": "3297079"
  },
  {
    "text": "uh so lab nine once we've finished with lab 8 I'll leave all the instructions and kind of circulate um let's load the",
    "start": "3299799",
    "end": "3306400"
  },
  {
    "text": "data from a CSV text file and CSV is a common data interchange format and it should look",
    "start": "3306400",
    "end": "3312240"
  },
  {
    "text": "something like",
    "start": "3312240",
    "end": "3314839"
  },
  {
    "text": "this so comma separated fields and I'd like to add a menu",
    "start": "3323680",
    "end": "3329640"
  },
  {
    "text": "option to save and write data and you can hardcode the file name",
    "start": "3329640",
    "end": "3335640"
  },
  {
    "text": "to start with we'll change that at some point in the future but let's start your program out",
    "start": "3335640",
    "end": "3340799"
  },
  {
    "text": "by reading from the hardcoded file and add a menu option to save so if you select the menu option your file will be",
    "start": "3340799",
    "end": "3347599"
  },
  {
    "text": "written to with any changes you've made your data structure if you don't your changes will be",
    "start": "3347599",
    "end": "3353359"
  },
  {
    "text": "lost the",
    "start": "3353359",
    "end": "3357000"
  },
  {
    "text": "read and uh so just to recap what we've said about files",
    "start": "3359319",
    "end": "3364799"
  },
  {
    "text": "here we operate on files by acquiring a file",
    "start": "3364799",
    "end": "3371000"
  },
  {
    "text": "object and we get that file object by calling",
    "start": "3373480",
    "end": "3378280"
  },
  {
    "text": "open open takes a file name and optionally a mode with read",
    "start": "3380039",
    "end": "3387200"
  },
  {
    "text": "being assumed so if you're going to write to a file you're going to have to specify your mode is",
    "start": "3387200",
    "end": "3392920"
  },
  {
    "text": "w and valid modes are r w and a and you can also append B to any mode to specify",
    "start": "3392920",
    "end": "3399960"
  },
  {
    "text": "that it's in binary but you won't need to do that since we're going to read and write text once you have a file object you can",
    "start": "3399960",
    "end": "3408319"
  },
  {
    "text": "read from it if you've opened it in read mode and you can read individual lines",
    "start": "3408319",
    "end": "3414400"
  },
  {
    "text": "you can itate over it and you can write to it or write individual lines if you've opened it in write mode CSV",
    "start": "3414400",
    "end": "3420440"
  },
  {
    "text": "stands for from the texal text CSV stands for comma separated values so CSV",
    "start": "3420440",
    "end": "3426039"
  },
  {
    "text": "files are files that use a delimiter character to separate fields and each row typically represents one row in your",
    "start": "3426039",
    "end": "3432920"
  },
  {
    "text": "data and comma specifically csvs are commas but sometimes people make um CSV",
    "start": "3432920",
    "end": "3439440"
  },
  {
    "text": "files that use a semicolon or use a tab or use another delimiter character and all spreadsheet software will freely",
    "start": "3439440",
    "end": "3445160"
  },
  {
    "text": "Import and Export from formats like CSV and tsv separ use for separating the",
    "start": "3445160",
    "end": "3450960"
  },
  {
    "text": "lines or separating separating the fields lines are separated by separated by a new line so you could have spaces",
    "start": "3450960",
    "end": "3456760"
  },
  {
    "text": "in your data and the important thing is basically to choose a separator that won't appear in your data which is why sometimes people use tabs if your data",
    "start": "3456760",
    "end": "3463520"
  },
  {
    "text": "contain commas then the additional complexity is you have to quote your data appropriately and there's a",
    "start": "3463520",
    "end": "3469920"
  },
  {
    "text": "built-in library that handles all that complexity um which we will switch to using at some point but we're going to start out wrangling our own CSV and",
    "start": "3469920",
    "end": "3476880"
  },
  {
    "text": "pretty much all you need to know for CSV is how to open and read files which we've covered how to split lines of text",
    "start": "3476880",
    "end": "3485720"
  },
  {
    "text": "so you're going to end up with lines that look like",
    "start": "3485720",
    "end": "3489520"
  },
  {
    "text": "this and actually they're going to look like",
    "start": "3492119",
    "end": "3496359"
  },
  {
    "text": "this you can split them by a separator character which would get you a list you'll notice",
    "start": "3501839",
    "end": "3508280"
  },
  {
    "text": "that that slash in is still on there if you want to get rid of that slash in the",
    "start": "3508280",
    "end": "3514039"
  },
  {
    "text": "string type has a bunch of functions on it including strip and strip",
    "start": "3514880",
    "end": "3521039"
  },
  {
    "text": "strips um leading and trailing white Space by default or you can specify the character you want to get rid of so just",
    "start": "3521039",
    "end": "3526920"
  },
  {
    "text": "calling strip online returns a new line because line is an immutable",
    "start": "3526920",
    "end": "3533240"
  },
  {
    "text": "type without Whit space and new lines are considered wh",
    "start": "3533720",
    "end": "3539240"
  },
  {
    "text": "space no so the idea is to load the CSV into the exact same data format you've",
    "start": "3544440",
    "end": "3549520"
  },
  {
    "text": "currently been using so you should create you've got a data format called names or classmates or something like",
    "start": "3549520",
    "end": "3555559"
  },
  {
    "text": "that that's a dict you need to Loop through the lines of a text file reading",
    "start": "3555559",
    "end": "3560680"
  },
  {
    "text": "each line splitting it into first name last name and roll and adding it to your dict",
    "start": "3560680",
    "end": "3567079"
  },
  {
    "text": "still keyed by first name is fine so we're going to build our dict",
    "start": "3567079",
    "end": "3572240"
  },
  {
    "text": "dynamically instead of specifying it statically in our code um and when you get to the writing part we're going to",
    "start": "3572240",
    "end": "3579240"
  },
  {
    "text": "Loop through the values in our dict we're going to open our same text file in write mode which will erase its",
    "start": "3579240",
    "end": "3584599"
  },
  {
    "text": "contents and we're going to write and you'll want to use right",
    "start": "3584599",
    "end": "3590480"
  },
  {
    "text": "lines",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "and right lines accepts a sequence of strings as in a list of",
    "start": "3605160",
    "end": "3612119"
  },
  {
    "text": "strings it expects the strings already have the new lines in them but it will write them all to the file so your",
    "start": "3612119",
    "end": "3618160"
  },
  {
    "text": "writing operation is simply going to be add new lines to your list of",
    "start": "3618160",
    "end": "3623559"
  },
  {
    "text": "values and write your list of values to pass your list of values to f. right",
    "start": "3623559",
    "end": "3629960"
  },
  {
    "text": "lines",
    "start": "3638039",
    "end": "3641039"
  }
]