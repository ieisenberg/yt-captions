[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "thanks for every thanks everybody for coming out we got a great group of folks",
    "start": "15109",
    "end": "20550"
  },
  {
    "text": "here tonight so I really appreciate it and I know that almost everybody here",
    "start": "20550",
    "end": "26010"
  },
  {
    "text": "does a lot of JavaScript stuff so there's sort of an obvious question you know we're here in San Francisco doing",
    "start": "26010",
    "end": "31080"
  },
  {
    "text": "JavaScript why talk about scopes and scope chains and closures here and the",
    "start": "31080",
    "end": "36540"
  },
  {
    "text": "answer is that they're not explained really well and the real test of that is",
    "start": "36540",
    "end": "42300"
  },
  {
    "text": "if you've ever had the situation where someone asks you about how scope chains or closures work and you start the",
    "start": "42300",
    "end": "49469"
  },
  {
    "text": "explanation and you kind of get a little bit in there and then all of a sudden you're like well and then it's kind of like when you do this so anytime you're",
    "start": "49469",
    "end": "56640"
  },
  {
    "text": "saying it's kind of like when that's usually a warning that maybe something's not quite working so you know we want to",
    "start": "56640",
    "end": "63570"
  },
  {
    "text": "get a better idea of exactly what's going on so I I don't want to point to",
    "start": "63570",
    "end": "72060"
  },
  {
    "start": "69000",
    "end": "113000"
  },
  {
    "text": "any particular sources because you know I don't really think that's productive but let's just say if you were to go out and Google for scope chains and closures",
    "start": "72060",
    "end": "80909"
  },
  {
    "text": "or even just closures in particular you'll find a lot of things on the Internet and if you drill down you'll",
    "start": "80909",
    "end": "87180"
  },
  {
    "text": "find a lot of nonsense in there and I mean just a ridiculous amount of nonsense and like I said I don't want to",
    "start": "87180",
    "end": "92220"
  },
  {
    "text": "I mean I could make a whole sort of funny talk putting stuff up on the white you know white board I was going to say up on the projector but I don't want to",
    "start": "92220",
    "end": "98460"
  },
  {
    "text": "do that because it's not really about anything that's out there that's not quite right it's about helping everybody get it right in the future I think",
    "start": "98460",
    "end": "104520"
  },
  {
    "text": "that's more valuable use of our time so this is what we want to do we want to make really clear what's actually going",
    "start": "104520",
    "end": "113460"
  },
  {
    "start": "113000",
    "end": "153000"
  },
  {
    "text": "on so my goal is not for not just for you know me to say some things and",
    "start": "113460",
    "end": "119460"
  },
  {
    "text": "hopefully it makes sense to you my goal is actually that you can go out and spread this information so with only",
    "start": "119460",
    "end": "126240"
  },
  {
    "text": "you know a couple hundred people here there's many thousands of JavaScript developers in San Francisco so my goal",
    "start": "126240",
    "end": "132060"
  },
  {
    "text": "is that at the end you know you understand the stuff really well and that you can easily and quickly explain this to other people without resorting",
    "start": "132060",
    "end": "139800"
  },
  {
    "text": "to any hand waving so hand waving is that's that thing where you sort of run out of technical information and you",
    "start": "139800",
    "end": "145920"
  },
  {
    "text": "kind of feel like well you know I should know this you should know this let's just pretend that we know it and move on because there's way too much of that out",
    "start": "145920",
    "end": "152099"
  },
  {
    "text": "there so we are one more you know maybe plug for why the stuff is",
    "start": "152099",
    "end": "158610"
  },
  {
    "text": "important if it wasn't obvious and we'll look at examples of this later but scope chains and closures are not they're not",
    "start": "158610",
    "end": "165330"
  },
  {
    "text": "optional in JavaScript so there's no syntax for this there's no keyword that you type there's no special feature that",
    "start": "165330",
    "end": "170730"
  },
  {
    "text": "you turn on you don't get to opt in or opt out so these are things that apply to your programs all the time every",
    "start": "170730",
    "end": "177420"
  },
  {
    "text": "single time that you write a function without them a lot of plain old JavaScript wouldn't work at all so",
    "start": "177420",
    "end": "183720"
  },
  {
    "text": "really really simple things would not work without this and we'll see why and it turns out that without a pretty good",
    "start": "183720",
    "end": "189989"
  },
  {
    "text": "working knowledge I mean you don't need a theoretical knowledge but without a working knowledge of how these things",
    "start": "189989",
    "end": "195180"
  },
  {
    "text": "fit together most of the advanced patterns that you come across are pretty hard to understand and then the last",
    "start": "195180",
    "end": "201780"
  },
  {
    "text": "thing is that the spec if you guys have ever looked up the ECMO script spec so",
    "start": "201780",
    "end": "206909"
  },
  {
    "text": "the spec is not meant as a teaching document right that's sort of a nice way to put it the spec is meant to help",
    "start": "206909",
    "end": "212580"
  },
  {
    "text": "implementers figure out how to implement JavaScript behavior and it's there to",
    "start": "212580",
    "end": "218010"
  },
  {
    "text": "help us figure out whether particular implementation actually complies so there's the sort of paradox where in",
    "start": "218010",
    "end": "223950"
  },
  {
    "text": "order to use the spec to figure out what's going on you already need to know what's supposed to be going on so if you know what's supposed to happen you can",
    "start": "223950",
    "end": "230580"
  },
  {
    "text": "look it up in the spec you can go through step by step so if you haven't seen it you should you know definitely take a look the ACMA script spec is is",
    "start": "230580",
    "end": "236280"
  },
  {
    "text": "known as pseudocode and it's there to define the behavior of a compliant implementation it's not there to explain",
    "start": "236280",
    "end": "243450"
  },
  {
    "text": "how there's no examples of code in the entire thing there's no exam out there to explain how code works and it's not",
    "start": "243450",
    "end": "249209"
  },
  {
    "text": "there to explain how any particular implementation is supposed to work under the hood so you know when we talk about",
    "start": "249209",
    "end": "256019"
  },
  {
    "text": "things here tonight one warning and I'll probably try and give this a couple of times during the talk there's no",
    "start": "256019",
    "end": "263430"
  },
  {
    "text": "guarantee that any particular implementation works exactly this way under the hood because the idea of the",
    "start": "263430",
    "end": "269430"
  },
  {
    "text": "spec is that if you are a compliant echo script implementation your runtime behaves as if it were running the",
    "start": "269430",
    "end": "277169"
  },
  {
    "text": "pseudocode in the spec as long as it runs as if that is to say it implements",
    "start": "277169",
    "end": "282180"
  },
  {
    "text": "the interface kind of described in human language in the spec then it complies so",
    "start": "282180",
    "end": "287909"
  },
  {
    "text": "underneath the hood you're welcome to do any crazy thing you want for performance or for minimizing memory footprint you",
    "start": "287909",
    "end": "295500"
  },
  {
    "text": "know or for whatever else you might want to do so what we're talking about will apply to every single compliant spec and",
    "start": "295500",
    "end": "302189"
  },
  {
    "text": "yet it sorry implementation and yet it doesn't necessarily mean that if you crack open v8 that you're going to see",
    "start": "302189",
    "end": "307889"
  },
  {
    "text": "this inside in fact I can guarantee you won't because you know v8 works a different way in terms of how it",
    "start": "307889",
    "end": "313560"
  },
  {
    "text": "represents JavaScript objects so when we do and I know there's a lot of text on",
    "start": "313560",
    "end": "319529"
  },
  {
    "text": "here and you can't read that and all these slides will be on speaker deck afterward so you know this is this deck",
    "start": "319529",
    "end": "325680"
  },
  {
    "text": "is free to give out and free to use and what I compress everything in here because it's it's almost a bit funny",
    "start": "325680",
    "end": "332279"
  },
  {
    "text": "when I go to talk about scope we figured that we better talk about what are the rules what are the rules of scope and",
    "start": "332279",
    "end": "338520"
  },
  {
    "text": "I'm going to do that I'll do that quickly I'm gonna get that out of the way because it turns out that the",
    "start": "338520",
    "end": "343589"
  },
  {
    "text": "English description of how scope works first of all it's impossible to cover every nuance that's in the spec that's",
    "start": "343589",
    "end": "349560"
  },
  {
    "text": "number one number two it's hard for our brains to figure out the implications of",
    "start": "349560",
    "end": "354930"
  },
  {
    "text": "what these rules are I think that's probably true even the folks on tc39 that are working on the next version of",
    "start": "354930",
    "end": "361680"
  },
  {
    "text": "ACMA script you know if you look at a lot of their debates about old features and new features it's clear that you know they're humans just like us and",
    "start": "361680",
    "end": "367560"
  },
  {
    "text": "they're limited in their ability to figure out what the implications are going to be of fairly sensible",
    "start": "367560",
    "end": "373800"
  },
  {
    "text": "requirements that they lay down right now so I will run down the big scope rule summary but what I'm going to move",
    "start": "373800",
    "end": "380969"
  },
  {
    "text": "into that I think will be a lot more useful is the picture of how this thing works we're going to look at some code we're going to pretend that we're the",
    "start": "380969",
    "end": "387870"
  },
  {
    "text": "JavaScript runtime and we're going to walk through the code line by line and see exactly what's going on and I",
    "start": "387870",
    "end": "394650"
  },
  {
    "text": "think that picture will actually make a lot more sense so when we when we get to that hopefully the picture will pay off and usually I do this on a white board",
    "start": "394650",
    "end": "401100"
  },
  {
    "text": "so I actually animate it step by step by actually drawing on the white board tonight I knew I wouldn't be able to do",
    "start": "401100",
    "end": "407220"
  },
  {
    "text": "that so what I've done is prepared slides that correspond to almost everything that I'm going to do so I can",
    "start": "407220",
    "end": "413130"
  },
  {
    "text": "step through with the slides and in a couple of places where I need to make live modifications I'll just do that in",
    "start": "413130",
    "end": "418169"
  },
  {
    "text": "PowerPoint like right in front of you and you'll see how these structures change so okay we have to do the",
    "start": "418169",
    "end": "425340"
  },
  {
    "start": "423000",
    "end": "628000"
  },
  {
    "text": "obligatory rundown of the rules and this are not all of the rules so you know the",
    "start": "425340",
    "end": "431820"
  },
  {
    "text": "spec contains more rules and there's lots of odds and ends but the main rules work like this okay so first every JavaScript runtime",
    "start": "431820",
    "end": "438330"
  },
  {
    "text": "has a global scope this is identical with the global object and unfortunately",
    "start": "438330",
    "end": "443849"
  },
  {
    "text": "there was never a requirement that it has to have a certain particular name so in the browser this is what we call",
    "start": "443849",
    "end": "449070"
  },
  {
    "text": "window you know we call it global in a worker we call it self and there's no",
    "start": "449070",
    "end": "454590"
  },
  {
    "text": "rule that in your own JavaScript runtime you couldn't call it something else so there's something there as a global but it may have a different name the next",
    "start": "454590",
    "end": "461880"
  },
  {
    "text": "thing is that local variables are declared with var and those are scoped to the function that they're declared",
    "start": "461880",
    "end": "466979"
  },
  {
    "text": "within so every now and again you'll come across someone waving around this term lexical scope like it's a magical",
    "start": "466979",
    "end": "472889"
  },
  {
    "text": "some kind of magical incantation lexical scope is nothing special all of the",
    "start": "472889",
    "end": "478050"
  },
  {
    "text": "modern languages that we use support lexical scope so it's not JavaScript versus everything else it's almost",
    "start": "478050",
    "end": "483539"
  },
  {
    "text": "everything that we use lexical scope just means that you can figure out the scope of a symbol based on where in the",
    "start": "483539",
    "end": "489960"
  },
  {
    "text": "parse tree the actual declaration is that's all lexical scope means is that there's a correlation between the place",
    "start": "489960",
    "end": "496409"
  },
  {
    "text": "where the thing is declared and the scope of it function declarations and by",
    "start": "496409",
    "end": "502409"
  },
  {
    "text": "this we mean actually function declarations not just any old function so we're excluding function expressions",
    "start": "502409",
    "end": "508349"
  },
  {
    "text": "but function declarations also produce local bindings and those actually turn out to have priority over VARs in the",
    "start": "508349",
    "end": "514680"
  },
  {
    "text": "same scope although that's a little bit of sort of trivia if you have functions name the same thing as your VARs you",
    "start": "514680",
    "end": "519930"
  },
  {
    "text": "probably have other problems so when a variable is accessed so when",
    "start": "519930",
    "end": "526100"
  },
  {
    "text": "you're accessing a variable trying to resolve a symbol whether it's been declared or not javascript resolves it",
    "start": "526100",
    "end": "531709"
  },
  {
    "text": "by looking in the current scope for a local variable with that same name and if it fails to find one it starts",
    "start": "531709",
    "end": "538250"
  },
  {
    "text": "working its way through the scopes from innermost to outermost looking for something with that same name as soon as",
    "start": "538250",
    "end": "543889"
  },
  {
    "text": "it finds something with that name it stops and that's the binding that's used",
    "start": "543889",
    "end": "549100"
  },
  {
    "text": "if it doesn't find any variable by the time it gets out to the global object then if you're trying to read something",
    "start": "549100",
    "end": "555439"
  },
  {
    "text": "you end up with a reference error if you're trying to write something you get that situation where you've accidentally",
    "start": "555439",
    "end": "561050"
  },
  {
    "text": "created a global so you know that's sort of almost universally regarded as a mistake in the language design but",
    "start": "561050",
    "end": "566600"
  },
  {
    "text": "that's you know almost 20 year old history at this point there's nothing we can do about it so if you're reading you get a reference",
    "start": "566600",
    "end": "572089"
  },
  {
    "text": "error if you're writing you're going to implicitly create a global so it's",
    "start": "572089",
    "end": "578959"
  },
  {
    "text": "actually going to start at the inside and we're going to see how that works so it turns out there's a mechanism that makes it easier to see how that works",
    "start": "578959",
    "end": "584509"
  },
  {
    "text": "it's not just a rule in words so the rule in words is yes inner to outer but it turns out there's what we're going to see a mechanism that makes it easy to",
    "start": "584509",
    "end": "590839"
  },
  {
    "text": "sort of predict how this is operating there's also handy if you guys ever go and apply for a job somewhere and one of",
    "start": "590839",
    "end": "596420"
  },
  {
    "text": "the interview questions is well how would you implement blah blah blah you know in a JavaScript runtime you'll",
    "start": "596420",
    "end": "601430"
  },
  {
    "text": "actually have no problem at all describing how this would work because it turns out not to be very complicated",
    "start": "601430",
    "end": "607240"
  },
  {
    "text": "let's say we also have a little note down here that if an outer variable is shadowed by an inner variable of the",
    "start": "607240",
    "end": "613009"
  },
  {
    "text": "same name the outer one won't be accessible through scope resolution if the outer one happens to be in the",
    "start": "613009",
    "end": "619399"
  },
  {
    "text": "global object you can kind of go around the side right because you could say global dot or window dot but if it's in",
    "start": "619399",
    "end": "625670"
  },
  {
    "text": "an intermediate scope and then it's no longer accessible and it turns out there's one more don't worry there's not",
    "start": "625670",
    "end": "631100"
  },
  {
    "start": "628000",
    "end": "879000"
  },
  {
    "text": "like ten pages of this there's only two two pages of the big scope rule summary hoisting sort of a bizarre word the",
    "start": "631100",
    "end": "639050"
  },
  {
    "text": "metaphor is that it's like moving the code to the top of a function that's where the term hoisting comes from but",
    "start": "639050",
    "end": "644449"
  },
  {
    "text": "it's not really having it doesn't really have anything to do with moving nothing's being moved at all there's two different phases to running the code so",
    "start": "644449",
    "end": "651829"
  },
  {
    "text": "what happens is that before we get to the execution phase on a function we're going to do this other phase and",
    "start": "651829",
    "end": "657980"
  },
  {
    "text": "we could call it hoisting if we want to where we're going to parse and scan the body of the function looking for",
    "start": "657980",
    "end": "664160"
  },
  {
    "text": "declaration so we're going to be looking for VARs that we're going to be looking for function declarations and those",
    "start": "664160",
    "end": "669529"
  },
  {
    "text": "things are going to get special treatment so if we find a VAR declaration we're going to create a special local variable slot for that",
    "start": "669529",
    "end": "676550"
  },
  {
    "text": "symbol and if we get a function declaration we're going to do two things we're going to create a local a local",
    "start": "676550",
    "end": "684970"
  },
  {
    "text": "symbol binding in the scope for that variable and we're also going to actually build the function object and",
    "start": "684970",
    "end": "691310"
  },
  {
    "text": "associate it with that symbol so at hoisting time VARs just get sort of a reservation they get a slot but no",
    "start": "691310",
    "end": "698000"
  },
  {
    "text": "actual value whereas function declarations get both a symbol local",
    "start": "698000",
    "end": "703130"
  },
  {
    "text": "binding for the symbol and a value the last main note here is the hoisting",
    "start": "703130",
    "end": "709040"
  },
  {
    "text": "disregards program flow logic so this is where those strange trivia sort of",
    "start": "709040",
    "end": "714470"
  },
  {
    "text": "problems come from where you see a return statement and then maybe a VAR after the return and the question is well does the VAR actually affect",
    "start": "714470",
    "end": "721460"
  },
  {
    "text": "anything and the answer is yes it does because we're not paying any attention at this point to the logic of the function we're just doing sort of parse",
    "start": "721460",
    "end": "728930"
  },
  {
    "text": "scan work at this point now I have a bunch of little notes down here I'm not sure I'm even going to always take a",
    "start": "728930",
    "end": "734240"
  },
  {
    "text": "look I don't think we're even going to go through any of these things so we will ignore within here it turns out that it turns out there is a facility in",
    "start": "734240",
    "end": "740720"
  },
  {
    "text": "JavaScript for sort of monkeying with the scope chain yourself are called width and if you're doing a meta",
    "start": "740720",
    "end": "747470"
  },
  {
    "text": "programming and building a framework and you really know exactly what you're doing that you may have a good use for width but largely width is considered a",
    "start": "747470",
    "end": "754280"
  },
  {
    "text": "sort of deprecated because it's it's roughly equivalent to controlling the",
    "start": "754280",
    "end": "759650"
  },
  {
    "text": "flow of the program based on data so it's a little bit like eval and it also breaks the optimizations that are in a",
    "start": "759650",
    "end": "765770"
  },
  {
    "text": "lot of browsers so width is largely deprecated ACMA script six also introduces blocks coping with let and",
    "start": "765770",
    "end": "771860"
  },
  {
    "text": "that's great that's awesome but we're not going to talk about that here tonight either that's sort of it becomes kind of like a trivial side case of what",
    "start": "771860",
    "end": "777680"
  },
  {
    "text": "we're doing it sort of adds on but doesn't really change things a whole lot got some other notes down here and I",
    "start": "777680",
    "end": "784100"
  },
  {
    "text": "definitely recommend Kyle Simpson who's a big open source guy Texas and I believe he's giving a talk",
    "start": "784100",
    "end": "790520"
  },
  {
    "text": "that was on one of the slides we saw earlier for an upcoming event um he has a book called you don't know J s scopes",
    "start": "790520",
    "end": "796820"
  },
  {
    "text": "and closures he's actually doing a series of books called you don't know J s and believe me he actually does know JavaScript insanely well but he makes",
    "start": "796820",
    "end": "802910"
  },
  {
    "text": "the point that actually none of us really know what we're all kind of always in the process of learning these little things we didn't realize so he's",
    "start": "802910",
    "end": "809660"
  },
  {
    "text": "you know I say he knows a whole lot he's incredibly humble and he's got this great book that's actually free that you",
    "start": "809660",
    "end": "815210"
  },
  {
    "text": "can read or you can buy I have the dead tree version called scopes and closures it covers everything pretty much that",
    "start": "815210",
    "end": "820940"
  },
  {
    "text": "we're doing here tonight so let's okay so now that I've gone and done talked about a whole bunch of rules",
    "start": "820940",
    "end": "826970"
  },
  {
    "text": "in English that probably make no sense whatsoever at this point let's take a look at actual code and we'll pretend",
    "start": "826970",
    "end": "833180"
  },
  {
    "text": "that we're the JavaScript runtime and we're going to look at how we process this code and I promise this will",
    "start": "833180",
    "end": "839690"
  },
  {
    "text": "actually make complete sense we'll figure out how this whole thing fits together first a little warning this",
    "start": "839690",
    "end": "846020"
  },
  {
    "text": "code does not implement any actual business rule for anything useful this is a this is akin to the kind of things",
    "start": "846020",
    "end": "851600"
  },
  {
    "text": "that you'll see online where someone will show you like a quiz they'll say okay look at this and run this and tell me what Z is equal to and you're like",
    "start": "851600",
    "end": "857720"
  },
  {
    "text": "hmm I wonder what Z is equal to at the end of this you know I've done it this way I've done it where we have a fake",
    "start": "857720",
    "end": "862760"
  },
  {
    "text": "business logic scenario but you have to twist business logic pretty hard to get it to cover all the strange cases I want",
    "start": "862760",
    "end": "867830"
  },
  {
    "text": "to cover here so I gave up on that and I've gone back to things like ABCD and Z",
    "start": "867830",
    "end": "873370"
  },
  {
    "text": "but this is not actually a very complicated piece of code at all it's just constructed to cover a number of",
    "start": "873370",
    "end": "878450"
  },
  {
    "text": "scenarios so we start out at the very beginning what we've got here is a chunk",
    "start": "878450",
    "end": "884390"
  },
  {
    "start": "879000",
    "end": "937000"
  },
  {
    "text": "of code and we've got our global scope and we know that you know window has a whole bunch of other stuff in it if you go into your browser right now and type",
    "start": "884390",
    "end": "890420"
  },
  {
    "text": "window dot you'll see about 30,000 things that are injected into the environment by the browser but that's",
    "start": "890420",
    "end": "895940"
  },
  {
    "text": "that's not our concern here so let's pretend that it's empty to start with and so what's going to happen first well",
    "start": "895940",
    "end": "901730"
  },
  {
    "text": "the first thing we're going to do is we're going to actually do hoisting at the outside level so before we actually",
    "start": "901730",
    "end": "907070"
  },
  {
    "text": "run anything in the script tag we're going to do a hoisting out here so we're going to look in the outermost level of",
    "start": "907070",
    "end": "912530"
  },
  {
    "text": "code here for VARs and function declarations so we'll look here we find",
    "start": "912530",
    "end": "917780"
  },
  {
    "text": "a VAR b and here we have a function declaration for F so we're going to be creating an",
    "start": "917780",
    "end": "924350"
  },
  {
    "text": "entry in this scope object over here for B and we're going to create one for F and the one for F is actually going to",
    "start": "924350",
    "end": "930709"
  },
  {
    "text": "be bound to the function object that we're calling F so after the global hoisting it's going to look like this so",
    "start": "930709",
    "end": "937180"
  },
  {
    "start": "937000",
    "end": "1064000"
  },
  {
    "text": "after the initial hoisting we have a B we have an F we have an actual function",
    "start": "937180",
    "end": "942560"
  },
  {
    "text": "object which I'm calling lambda and I'm putting the F in quotes because we know that you know these JavaScript functions",
    "start": "942560",
    "end": "948199"
  },
  {
    "text": "don't really have proper names and any point or to them is equivalent so they're just kind of floating out there we're going to call this thing F so we",
    "start": "948199",
    "end": "954680"
  },
  {
    "text": "have a symbol F over here and his value is a reference to the object F so at",
    "start": "954680",
    "end": "962329"
  },
  {
    "text": "this point we've done the hoisting for the outer part and we're ready to actually start running code so we're ready to come in and run logic starting",
    "start": "962329",
    "end": "968600"
  },
  {
    "text": "at line two so let's go ahead and do that let's go run some global scope code",
    "start": "968600",
    "end": "975350"
  },
  {
    "text": "at line two well we've got a equals one so what's going to happen there we're",
    "start": "975350",
    "end": "982279"
  },
  {
    "text": "going to look for a we're not going to find it and so we're going to end up creating an A out here in the global",
    "start": "982279",
    "end": "989209"
  },
  {
    "text": "scope so again arguably this is something that we shouldn't be able to do if you have strict mode on you can't",
    "start": "989209",
    "end": "995000"
  },
  {
    "text": "do this it probably should throw a reference error but it does not so we're going to end up with something like this",
    "start": "995000",
    "end": "1001449"
  },
  {
    "text": "we're going to have an a over here with a value 1 and then in line 3 we're going",
    "start": "1001449",
    "end": "1007660"
  },
  {
    "text": "to look up B and we already have B so we'll just assign the value 2 to it and",
    "start": "1007660",
    "end": "1012899"
  },
  {
    "text": "we've already handled building the function object so everything from line",
    "start": "1012899",
    "end": "1018519"
  },
  {
    "text": "5 through 19's already actually taken place at hoisting time because we built the function object at that point so",
    "start": "1018519",
    "end": "1023649"
  },
  {
    "text": "we're ready to run line 21 so here's where things start to get interesting we're going to run line 21 and that's",
    "start": "1023649",
    "end": "1029829"
  },
  {
    "text": "going to execute this function f so we know that sooner or later we're going to end up in F so we're going to end up at line 6 right that's the idea we're going",
    "start": "1029829",
    "end": "1037360"
  },
  {
    "text": "to jump to some subroutine and we're going to end up at line 6 but there's actually a little ritual we've got to do before we get there so just like every",
    "start": "1037360",
    "end": "1044350"
  },
  {
    "text": "language has some ritual that's involved in doing a function call or some kind of a jump maybe we you know put certain",
    "start": "1044350",
    "end": "1051250"
  },
  {
    "text": "values and so registers or we push a return address on the stack or we do some particular ritual before we make the jump in",
    "start": "1051250",
    "end": "1057820"
  },
  {
    "text": "JavaScript there's also a ritual and before we can enter f we need to set up a local scope for F so what we're going",
    "start": "1057820",
    "end": "1066070"
  },
  {
    "start": "1064000",
    "end": "1168000"
  },
  {
    "text": "to do is first thing we'll create a local scope object for f and here's a place where I'm simplifying what's in",
    "start": "1066070",
    "end": "1071530"
  },
  {
    "text": "the spec a tiny bit so it turns out that in the spec there's sort of two objects theoretically which you know may or may",
    "start": "1071530",
    "end": "1077800"
  },
  {
    "text": "not coincide but that sort of is an edge case and so the most important thing is",
    "start": "1077800",
    "end": "1082840"
  },
  {
    "text": "to think that we've got one object that represents this scope and I'll give you a couple hints from a qualitative point",
    "start": "1082840",
    "end": "1088150"
  },
  {
    "text": "of view meaning if you don't care about performance optimization but you just want to get the right answer you can",
    "start": "1088150",
    "end": "1093220"
  },
  {
    "text": "think of this as roughly being a JavaScript object so you can think of it as roughly being key value pairs and if",
    "start": "1093220",
    "end": "1098980"
  },
  {
    "text": "you're coming from a different language background you want to think of this as being allocated on the heap so it may",
    "start": "1098980",
    "end": "1106420"
  },
  {
    "text": "not seem obvious why that's important now but you don't want to think about these local scope bindings as being on a",
    "start": "1106420",
    "end": "1112570"
  },
  {
    "text": "stack this is actually an object and it's on the heap there is a stack in JavaScript and it's going to have a",
    "start": "1112570",
    "end": "1117970"
  },
  {
    "text": "reference to this but this object itself is on the heat so we've got this object",
    "start": "1117970",
    "end": "1123940"
  },
  {
    "text": "set up here so what goes in there before we can actually run the function we need to do some setup so first thing we're",
    "start": "1123940",
    "end": "1130480"
  },
  {
    "text": "going to do is well we've got a formal parameter on F called Z and we're passing one so we hope that inside of F",
    "start": "1130480",
    "end": "1137590"
  },
  {
    "text": "there's better be a local scope binding with the symbol Z and the value one so that it'd better be in there what else",
    "start": "1137590",
    "end": "1145120"
  },
  {
    "text": "is going to go in there in every local scope we have a symbol called this so we're not going to talk about what this points to tonight but in every local",
    "start": "1145120",
    "end": "1151540"
  },
  {
    "text": "scope there is a symbol called this and it points to something so we've got one of those we've also got that symbol arguments so arguments points to a",
    "start": "1151540",
    "end": "1159160"
  },
  {
    "text": "pseudo array of whatever you passed arguments is a local symbol we're going to have that I could fill these in one",
    "start": "1159160",
    "end": "1165400"
  },
  {
    "text": "by one but they're all in the next slide so maybe I'll come to here we're going to have Z that's going to have a 1 we're",
    "start": "1165400",
    "end": "1171070"
  },
  {
    "start": "1168000",
    "end": "1308000"
  },
  {
    "text": "going to have this we're going to have arguments that points to the pseudo array the next thing we're going to do",
    "start": "1171070",
    "end": "1176140"
  },
  {
    "text": "is hosting on F so we're going to look through the of f/4 declarations and we're going to",
    "start": "1176140",
    "end": "1182740"
  },
  {
    "text": "find a VAR d we're going to find a VAR e that's one of these tricky ones you know I put it here just to make the",
    "start": "1182740",
    "end": "1188200"
  },
  {
    "text": "demonstration we've got a VAR e it's after the return statement this is unreachable code if you're coming from like a C background you're",
    "start": "1188200",
    "end": "1194290"
  },
  {
    "text": "looking at this and going shouldn't the compiler just optimize that right out and you know maybe and C it would but",
    "start": "1194290",
    "end": "1199660"
  },
  {
    "text": "it's not going to in JavaScript and it actually can't or it can behave as if it cannot so we get an E and then we're",
    "start": "1199660",
    "end": "1206920"
  },
  {
    "text": "also we also have a function declaration in here function G so G itself is going",
    "start": "1206920",
    "end": "1212440"
  },
  {
    "text": "to get a local scope slot and it's going to have a pointer to the actual object G so the actual function object over here",
    "start": "1212440",
    "end": "1219179"
  },
  {
    "text": "so we're almost ready to go we've got the scope object we've got the parameters we've got the hoisting there's one last step so we're going to",
    "start": "1219179",
    "end": "1227110"
  },
  {
    "text": "have a hidden pointer javascript is really big on hidden pointers right we're going to have a hidden pointer from the scope object to the scope that",
    "start": "1227110",
    "end": "1234640"
  },
  {
    "text": "it was defined in so since F is defined out here we're going to have a handle or",
    "start": "1234640",
    "end": "1242590"
  },
  {
    "text": "a hidden pointer from the scope on F or the scope of this execution of F to the",
    "start": "1242590",
    "end": "1248410"
  },
  {
    "text": "outer scope here and that's this pointer right there it's this arrow so that's an actual pointer it doesn't have a name it's called the outer environment",
    "start": "1248410",
    "end": "1254320"
  },
  {
    "text": "reference so someday they'll formalize this and give it a name but it's called the outer environment reference and",
    "start": "1254320",
    "end": "1259420"
  },
  {
    "text": "that's going to be really important because it provides a way that we can in a simple mechanistic way do these",
    "start": "1259420",
    "end": "1264490"
  },
  {
    "text": "lookups so you know when the runtime does variable resolution it doesn't do it by reading the crazy rules that I described it does it by looking up this",
    "start": "1264490",
    "end": "1271540"
  },
  {
    "text": "reference to go each step of the scope chain so now we're ready to actually run",
    "start": "1271540",
    "end": "1277540"
  },
  {
    "text": "at line six so we're going to hop into line six here where we have B equals",
    "start": "1277540",
    "end": "1283390"
  },
  {
    "text": "three and here's where I'm going to actually break out of the presentation mode I'm going to switch to a mirror",
    "start": "1283390",
    "end": "1289480"
  },
  {
    "text": "mode here and I'm going to actually make changes to this slide oh yeah there we",
    "start": "1289480",
    "end": "1296380"
  },
  {
    "text": "go okay so what we can do now is we can hop in here and let me zoom so I can make",
    "start": "1296380",
    "end": "1303070"
  },
  {
    "text": "this big enough for us to see what we're doing and what we're going to do is we're",
    "start": "1303070",
    "end": "1310280"
  },
  {
    "text": "going to step in at line six and see what actually see what actually happens",
    "start": "1310280",
    "end": "1317350"
  },
  {
    "text": "so line six B equals three so what happens here we're going to look in the",
    "start": "1317350",
    "end": "1323420"
  },
  {
    "text": "local scope for we're going to look in the local scope for B that's over here",
    "start": "1323420",
    "end": "1330650"
  },
  {
    "text": "we're not going to find it so if JavaScript doesn't find it what does it do it goes up this hidden",
    "start": "1330650",
    "end": "1336530"
  },
  {
    "text": "pointer and looks for it in the next scope out so this is how that process works of going from interscope to outer",
    "start": "1336530",
    "end": "1341690"
  },
  {
    "text": "scope it doesn't have to do with the text at this point of the code at this point that's already been processed what",
    "start": "1341690",
    "end": "1347420"
  },
  {
    "text": "we're doing is simply looking at an object seeing is there something with the name B if there is we're going to use that if they're not if there's not",
    "start": "1347420",
    "end": "1352910"
  },
  {
    "text": "we're going to come up here and we're going to end up doing is putting in a three over here so I'm going to put in a",
    "start": "1352910",
    "end": "1358280"
  },
  {
    "text": "three and I'll do a strikethrough on",
    "start": "1358280",
    "end": "1363310"
  },
  {
    "text": "this so there was a two now there's a three the next thing we've got is C",
    "start": "1363310",
    "end": "1368570"
  },
  {
    "text": "equals four so we're going to look for C down here we're not going to find it because it's not there so we're going to go up to the next",
    "start": "1368570",
    "end": "1375350"
  },
  {
    "text": "scope out and we're going to look for C here and because there's no C here but we're doing an assignment and not a read",
    "start": "1375350",
    "end": "1381290"
  },
  {
    "text": "we're going to do that thing where we may be unintentionally create a global so now we've actually got this C equals",
    "start": "1381290",
    "end": "1387320"
  },
  {
    "text": "four over here maybe I'll color that text red so we can see that it happened later so we've created a see there",
    "start": "1387320",
    "end": "1393350"
  },
  {
    "text": "whether we wanted to or not the next line D equals five that's pretty straightforward because we have a D in",
    "start": "1393350",
    "end": "1398990"
  },
  {
    "text": "our local scope so we end up with a five in there and that should not be strikethrough so we'll unstriped through that the next",
    "start": "1398990",
    "end": "1408440"
  },
  {
    "text": "line equals six so here's where that VAR e is actually affecting our program flow because we had a VAR e there is an e",
    "start": "1408440",
    "end": "1415580"
  },
  {
    "text": "slot in our local scope object and so this six ends up down there if we did not have that VAR e we would have ended",
    "start": "1415580",
    "end": "1423140"
  },
  {
    "text": "up putting the six and the e out here and so that's how we can end up with a statement like that affecting the flow",
    "start": "1423140",
    "end": "1429950"
  },
  {
    "text": "of our code now you're looking at this going well I'm never going to write code like that that's crazy why would ever return and then put a var and the answer",
    "start": "1429950",
    "end": "1435710"
  },
  {
    "text": "is no you would never actually do that that's not how this happens here's how it happens in real life you have some complicated",
    "start": "1435710",
    "end": "1440980"
  },
  {
    "text": "if else if else if and a year goes by and you go back and you're fixing the",
    "start": "1440980",
    "end": "1446560"
  },
  {
    "text": "code and you go oh yeah we don't even support this product anymore we're not this use case doesn't apply let me go and prune this code out so you take out",
    "start": "1446560",
    "end": "1452800"
  },
  {
    "text": "a branch which you knew for a fact wasn't running maybe because it's covered in your tests or you just know for sure it's not running and something",
    "start": "1452800",
    "end": "1458590"
  },
  {
    "text": "over there breaks and now you've got to go and fix some problem that's happened in some other part of the system and you're like how did that happen and",
    "start": "1458590",
    "end": "1464560"
  },
  {
    "text": "that's what happens is you've removed a declaration that was in a chunk of code and although that chunk of code wasn't",
    "start": "1464560",
    "end": "1469870"
  },
  {
    "text": "running the declaration was still affecting the program flow through hoisting so that's sort of something to",
    "start": "1469870",
    "end": "1475480"
  },
  {
    "text": "watch out for so we've got the equals six we already did lines 11 through 15",
    "start": "1475480",
    "end": "1481450"
  },
  {
    "text": "because that's really part of the hoisting and that's what got us the G binding down there so we get to line 17",
    "start": "1481450",
    "end": "1487600"
  },
  {
    "text": "so 17s got two pieces right we're going to execute G and we're going to return the value so we have to kind of repeat",
    "start": "1487600",
    "end": "1493480"
  },
  {
    "text": "this whole process all over again because we want to run G so we're going to do the same things a little bit simpler this time because G is smaller",
    "start": "1493480",
    "end": "1499840"
  },
  {
    "text": "so before we can run G we've got to do the same thing we have to make a scope object for this execution of G and the",
    "start": "1499840",
    "end": "1505600"
  },
  {
    "text": "reason I say this this execution of G is that you know every time you run a function you expect it to have new local",
    "start": "1505600",
    "end": "1511360"
  },
  {
    "text": "scope values right so a scope object does not go one-to-one with a function it goes one-to-one with an invocation of",
    "start": "1511360",
    "end": "1519250"
  },
  {
    "text": "the function so if you run F 3 times you expect to get three different scopes if we run G three times we expect to get three different scopes for G so if we",
    "start": "1519250",
    "end": "1526420"
  },
  {
    "text": "want to prepare to execute G we're going to end up over here and I'll see I'll make this a little bit bigger now for",
    "start": "1526420",
    "end": "1532210"
  },
  {
    "text": "this part I think we've done the hard part there so when we go to setup for G",
    "start": "1532210",
    "end": "1537370"
  },
  {
    "start": "1536000",
    "end": "1985000"
  },
  {
    "text": "we're going to have to do hoisting first so we look inside g for VAR declarations and function declarations we find one of",
    "start": "1537370",
    "end": "1544870"
  },
  {
    "text": "them that's this one down here there's no formal parameters or have to worry about that we have this we have arguments we have E and that last step",
    "start": "1544870",
    "end": "1552730"
  },
  {
    "text": "is the outer environment reference so G or as I sorry the scope for this execution of G is going to get an outer",
    "start": "1552730",
    "end": "1559810"
  },
  {
    "text": "environment reference that points to the scope that G was defined in so it points up to here so now you can see these",
    "start": "1559810",
    "end": "1566290"
  },
  {
    "text": "things connected together and the the reason why we call it a scope chains to make sense right the more of these",
    "start": "1566290",
    "end": "1571810"
  },
  {
    "text": "functions we have nested the more of these objects we have essentially in a linked list and so when you're looking",
    "start": "1571810",
    "end": "1577360"
  },
  {
    "text": "from the bottom up it's actually it looks like a chain right you have this scope over here and if you miss if",
    "start": "1577360",
    "end": "1583750"
  },
  {
    "text": "you're missing something in there you can resolve up to here and if you're missing something in here you can resolve up to the global so from any",
    "start": "1583750",
    "end": "1590470"
  },
  {
    "text": "particular scope looking up its a scope chain so now let's go in and run G and",
    "start": "1590470",
    "end": "1598120"
  },
  {
    "text": "when we run G we're going to we have this local variable E and I mark this",
    "start": "1598120",
    "end": "1603610"
  },
  {
    "text": "over here so the e in the G scope shadows the e in the F scope so this one",
    "start": "1603610",
    "end": "1609130"
  },
  {
    "text": "that I marked purple over here that's that's inaccessible in G so this G this has been shadowed the one over here so",
    "start": "1609130",
    "end": "1616690"
  },
  {
    "text": "there's absolutely no way unless we're writing a debugger I mean if you're writing a debugger that's a different thing or if you're using the debugger",
    "start": "1616690",
    "end": "1622180"
  },
  {
    "text": "that's a different thing but as far as client code goes there's no API that lets you access anymore that's gone and",
    "start": "1622180",
    "end": "1628930"
  },
  {
    "text": "just to make the point just to make the point a little bit clearer these scope objects are not exposed",
    "start": "1628930",
    "end": "1634630"
  },
  {
    "text": "through any API so you know this picture looks a little bit like inheritance if that doesn't make sense you don't worry",
    "start": "1634630",
    "end": "1639940"
  },
  {
    "text": "about it if it does remind you of prototypal inheritance I think that's probably for a reason or at the stories",
    "start": "1639940",
    "end": "1645430"
  },
  {
    "text": "that brendan wrote the draft of this language in ten days and I think when you're doing a language in ten days you reuse the patterns that work so this",
    "start": "1645430",
    "end": "1652090"
  },
  {
    "text": "looks a little bit like inheritance but with inheritance we've got control over all of the objects and all the entries",
    "start": "1652090",
    "end": "1657220"
  },
  {
    "text": "in the chain in the scope mechanism we don't and that turns out it sounds like we're missing a piece of API there but",
    "start": "1657220",
    "end": "1663820"
  },
  {
    "text": "it turns out that that's actually really really helpful and we'll see why a little bit later so okay so we have this",
    "start": "1663820",
    "end": "1671500"
  },
  {
    "text": "scope for G it's chained up to the scope for F we've set a equals zero which is",
    "start": "1671500",
    "end": "1676840"
  },
  {
    "text": "the local Y down here the next line we have two pieces to this so this is D equals two times D so first we have to",
    "start": "1676840",
    "end": "1683500"
  },
  {
    "text": "do the right-hand side we have to evaluate this so we have to do a lookup of the D all the way on the right we're",
    "start": "1683500",
    "end": "1688810"
  },
  {
    "text": "looking up D over here we don't find it so we come over here we look up D and we find the five that was there and once",
    "start": "1688810",
    "end": "1695860"
  },
  {
    "text": "we've evaluated two times five is ten we can then assign it back to D and the assignment follows the same exact",
    "start": "1695860",
    "end": "1700990"
  },
  {
    "text": "pattern so we have two look up D over here we don't find it we find it over here so this D in the scope",
    "start": "1700990",
    "end": "1707530"
  },
  {
    "text": "of the FX ik you Shane just from five to ten because of this line so this",
    "start": "1707530",
    "end": "1713170"
  },
  {
    "text": "function in here G is actually manipulating data in its outer scope and",
    "start": "1713170",
    "end": "1719130"
  },
  {
    "text": "once we're done we can actually return the ten so that comes back to here and",
    "start": "1719130",
    "end": "1724240"
  },
  {
    "text": "then we return from line 17 so we end up back here and at line 21 we've got",
    "start": "1724240",
    "end": "1729370"
  },
  {
    "text": "ourselves a value of 10 and once we end up finishing the script so once we've",
    "start": "1729370",
    "end": "1735130"
  },
  {
    "text": "done line 21 okay what happens to all this stuff so let's just take a quick look because it'll be important in the",
    "start": "1735130",
    "end": "1741160"
  },
  {
    "text": "next section of the talk what could get garbage collected at this point so we know that in JavaScript you don't have",
    "start": "1741160",
    "end": "1746560"
  },
  {
    "text": "control over the garbage collector right that's that's sort of up to the implementation how that works but we do have a heuristic for what can be",
    "start": "1746560",
    "end": "1753280"
  },
  {
    "text": "collected and what can't and it works by reach ability so it's not via a reference counting it's via reach",
    "start": "1753280",
    "end": "1758500"
  },
  {
    "text": "ability if starting at the global object you can reach through a reference a particular object you can't collect it",
    "start": "1758500",
    "end": "1764800"
  },
  {
    "text": "because it might be used in the future if you can't reach it then it can be collected so everything with a red X here can be collected because there's no",
    "start": "1764800",
    "end": "1772570"
  },
  {
    "text": "pointer to it from the top scope so up here we have F but we don't actually have a handle to this scope object and",
    "start": "1772570",
    "end": "1779470"
  },
  {
    "text": "therefore we don't have a handle to these guys we don't have a handle to this so that doesn't hold on to F scope",
    "start": "1779470",
    "end": "1784690"
  },
  {
    "text": "all this other stuff can go away so this",
    "start": "1784690",
    "end": "1792010"
  },
  {
    "text": "is where we get to at the end of the scope investigation so any questions on",
    "start": "1792010",
    "end": "1798430"
  },
  {
    "text": "how this stuff works so far yeah",
    "start": "1798430",
    "end": "1801720"
  },
  {
    "text": "that you mention that the execution context is stored in the heat because",
    "start": "1803650",
    "end": "1809320"
  },
  {
    "text": "like if you come Java programming you know JVM like when you invoke a method",
    "start": "1809320",
    "end": "1815200"
  },
  {
    "text": "stored as a stack frame of the stack and I was thinking it's probably the same",
    "start": "1815200",
    "end": "1820870"
  },
  {
    "text": "case in Java in JavaScript but are you saying like closures are stored on the heap so we're going to look at we're",
    "start": "1820870",
    "end": "1827620"
  },
  {
    "text": "going to look at our closures work in a second so we will talk about that but the bottom line is - all these scope objects at least conceptually in the",
    "start": "1827620",
    "end": "1834640"
  },
  {
    "text": "naive implementation restored on the heat so there's that weird little like asterisk I keep having to bring up which",
    "start": "1834640",
    "end": "1840100"
  },
  {
    "text": "is that technically you are free to create an implementation which does everything on the stack that will create",
    "start": "1840100",
    "end": "1846610"
  },
  {
    "text": "some complications for closures but it's allowed as long as it behaves this way there's a question in the back yeah oh",
    "start": "1846610",
    "end": "1853620"
  },
  {
    "text": "sure I'm sorry thank you yes I will do that so the question was the question was are",
    "start": "1854760",
    "end": "1862840"
  },
  {
    "text": "these things on the heap and not the stack because coming from Java we often think of local allocations as being on",
    "start": "1862840",
    "end": "1869680"
  },
  {
    "text": "the stack so that is in a language like Java we would think about these local bindings being you know Z being on the",
    "start": "1869680",
    "end": "1875890"
  },
  {
    "text": "stack something like arguments being on the stack and then that pointer is on the stack the object at point two might be",
    "start": "1875890",
    "end": "1881650"
  },
  {
    "text": "somewhere else but the pointer itself is on the stack so that model works for something like C and it works for you",
    "start": "1881650",
    "end": "1887680"
  },
  {
    "text": "know Java and you're technically allowed to use it for JavaScript provided it behaves differently but it's it's it",
    "start": "1887680",
    "end": "1894190"
  },
  {
    "text": "makes more sense just from a let's sort of get our heads around this point of view it makes more sense to think about",
    "start": "1894190",
    "end": "1900820"
  },
  {
    "text": "the naive implementation where these are plain old objects on the heap and then we could optimize later so other",
    "start": "1900820",
    "end": "1907600"
  },
  {
    "text": "questions before we go into closures yeah",
    "start": "1907600",
    "end": "1912240"
  },
  {
    "text": "yes they would be and we're going to look at that next we will good point so yes the question was things will be",
    "start": "1912810",
    "end": "1918490"
  },
  {
    "text": "different if we return G the object and not G with the call operator not the result of running G and the answer the",
    "start": "1918490",
    "end": "1924460"
  },
  {
    "text": "question is yes they would be and that's exactly the scenario that we're going to do a little bit later where I kind of tweak this a little bit so we can play",
    "start": "1924460",
    "end": "1930400"
  },
  {
    "text": "with what the result of that so the next I'm going to look at here are closures so where do the where did the idea of",
    "start": "1930400",
    "end": "1937360"
  },
  {
    "text": "closures come from what we want to do is make this really really obvious what's going on we don't want to say closures",
    "start": "1937360",
    "end": "1942790"
  },
  {
    "text": "are like when you have a function inside of another function or they're kind of like when this thing happens and look",
    "start": "1942790",
    "end": "1948190"
  },
  {
    "text": "there's something to distract me and let's go back talk about Ajax now for a while which which seriously I've seen",
    "start": "1948190",
    "end": "1955540"
  },
  {
    "text": "that in so many books it's just anyway so the question is this what should happen if we're defining a language if",
    "start": "1955540",
    "end": "1961930"
  },
  {
    "text": "we're creating JavaScript or some other language what should we do if the function is executed outside of",
    "start": "1961930",
    "end": "1968320"
  },
  {
    "text": "his original scope chain so assuming that we have some kind of scope lexical scoping rules that almost every modern",
    "start": "1968320",
    "end": "1974350"
  },
  {
    "text": "language has so when a function is embedded in its scope chain and we're running it where the scope chain is right there it's kind of a no-brainer if",
    "start": "1974350",
    "end": "1981370"
  },
  {
    "text": "we can get the algorithm to work there's no question about what's supposed to happen but what happens if we hang on to",
    "start": "1981370",
    "end": "1986830"
  },
  {
    "text": "the function or send it somewhere and we run it away from its original scope chain and there is no one right answer",
    "start": "1986830",
    "end": "1992650"
  },
  {
    "text": "to this so this is a language design issue you get to pick the answer if you're creating a language so there's a",
    "start": "1992650",
    "end": "1997870"
  },
  {
    "text": "lot of possible answers I put three here there's more I'm sure there's other ones so one is you say you can't do that if you do that you're going to get a seg",
    "start": "1997870",
    "end": "2003870"
  },
  {
    "text": "fault or something like that if you try this and see you will generally get a seg fault because you'll general see why",
    "start": "2003870",
    "end": "2009210"
  },
  {
    "text": "but you'll generally be dereferencing something that doesn't exist so you can't do that and see another answer",
    "start": "2009210",
    "end": "2014670"
  },
  {
    "text": "would be you can do that but so we'll let people do that but there are free variables referenced in the inner",
    "start": "2014670",
    "end": "2020910"
  },
  {
    "text": "function so in our example here we've got a variable D here this is a free variable right it's not local to G and",
    "start": "2020910",
    "end": "2027450"
  },
  {
    "text": "it's not passed into G so we've got a free variable and maybe if we're going to let you run G somewhere else we're",
    "start": "2027450",
    "end": "2033780"
  },
  {
    "text": "going to require you to give us a binding for those free variables so this is something that's not required but",
    "start": "2033780",
    "end": "2039030"
  },
  {
    "text": "it's actually optional in Ruby alright so in Ruby you can create a proc and you can run it with binding object so you can say hey I've",
    "start": "2039030",
    "end": "2045419"
  },
  {
    "text": "got an idea of a scope chain over here and I've got an idea of some code over here and I'd like to tell Ruby to go and run the code treating that as the scope",
    "start": "2045419",
    "end": "2052320"
  },
  {
    "text": "chain so you can manually do that in Ruby and you can imagine a language where you require that so the answer",
    "start": "2052320",
    "end": "2058260"
  },
  {
    "text": "that we have here in JavaScript is that you can do that and the original scope chain still magically works so the",
    "start": "2058260",
    "end": "2065940"
  },
  {
    "text": "answer which gives rise to the concept of closures is to say yeah you can run this function anywhere you can get away",
    "start": "2065940",
    "end": "2071490"
  },
  {
    "text": "with and will still work with its original scope chain so that's the assertion that's the that's the feature",
    "start": "2071490",
    "end": "2076740"
  },
  {
    "text": "we're trying to implement if we're implementing a language that supports closures so what exactly is the closure",
    "start": "2076740",
    "end": "2083220"
  },
  {
    "text": "itself yeah oh the sound is not so great",
    "start": "2083220",
    "end": "2088350"
  },
  {
    "text": "and probably my fault here see if we can be I can hold this better sure so okay",
    "start": "2088350",
    "end": "2093960"
  },
  {
    "text": "so what is a closure so the closure is a permanent link it's a long-lived link between a",
    "start": "2093960",
    "end": "2099720"
  },
  {
    "text": "function and its scope chain it can be used for all sorts of stuff it enables the functionality that allows you to run",
    "start": "2099720",
    "end": "2106380"
  },
  {
    "text": "a function anywhere anytime and use its original scope chain the closure is this link between the function and the scope",
    "start": "2106380",
    "end": "2113040"
  },
  {
    "text": "chain and we've already seen what a scope chain is that it's actual specific objects that's not a mystery either right scope chain is very specific data",
    "start": "2113040",
    "end": "2119820"
  },
  {
    "text": "structures linked together in a very concrete way the closure is a link from the function to that scope chain and how",
    "start": "2119820",
    "end": "2127920"
  },
  {
    "text": "does that actually work well it turns out that you know again you can do it however you want especially if you're making up your own language but in",
    "start": "2127920",
    "end": "2132990"
  },
  {
    "text": "JavaScript it's actually there's a strong hint in the spec that tells you how this is supposed to work there is a",
    "start": "2132990",
    "end": "2138390"
  },
  {
    "text": "hidden variable on function objects called a bracket bracket scope bracket bracket so if you poked around with the",
    "start": "2138390",
    "end": "2144540"
  },
  {
    "text": "spec at all or read articles on JavaScript you may be familiar with this double square bracket notation so in the",
    "start": "2144540",
    "end": "2151140"
  },
  {
    "text": "spec hidden members that are described as part of the internal JavaScript API",
    "start": "2151140",
    "end": "2156150"
  },
  {
    "text": "but are not exposed to client code are marked with two square brackets so what they're saying here is that there is a",
    "start": "2156150",
    "end": "2161580"
  },
  {
    "text": "hidden internal member of every function which is a pointer to the scope that it was defined in and it turns out that",
    "start": "2161580",
    "end": "2168930"
  },
  {
    "text": "once you have that little hint the whole thing just falls down a whole problem becomes super easy it really does",
    "start": "2168930",
    "end": "2175140"
  },
  {
    "text": "because once you have this Poynter it means a couple things first it means the scope chain can't go away",
    "start": "2175140",
    "end": "2180479"
  },
  {
    "text": "so we talked about this garbage collection situation and we talked about holding on to objects well if the",
    "start": "2180479",
    "end": "2188009"
  },
  {
    "text": "function holds on to the scope object it was defined in that means as long as you have the function it has its outer scope",
    "start": "2188009",
    "end": "2194609"
  },
  {
    "text": "if you don't have a function you can't run it right so those two things kind of some kind of cover 100% of the cases you",
    "start": "2194609",
    "end": "2200670"
  },
  {
    "text": "either can never run the function again in which case you don't care what happens to the outer environment or you are going to run the function or at",
    "start": "2200670",
    "end": "2206880"
  },
  {
    "text": "least could in which case the function is holding that outer environment for you right there on a member and then how",
    "start": "2206880",
    "end": "2212759"
  },
  {
    "text": "do we use this well when we go to run the function no matter where we are in the program no matter what else has",
    "start": "2212759",
    "end": "2217920"
  },
  {
    "text": "happened we create the new scope object for the new execution of the function and we copy the reference from the scope",
    "start": "2217920",
    "end": "2226799"
  },
  {
    "text": "member of the function to create the outer environment reference of the scope",
    "start": "2226799",
    "end": "2232319"
  },
  {
    "text": "object that we've created so what does that look like in pictures because again you know we get into trouble if we do",
    "start": "2232319",
    "end": "2238049"
  },
  {
    "text": "too much talking without pictures so actually I'm going to skip over the slide and get to the pictures and I'll come back to the Y so let's add our new",
    "start": "2238049",
    "end": "2246269"
  },
  {
    "start": "2244000",
    "end": "2478000"
  },
  {
    "text": "knowledge and we'll make a little bit of an adjustment to the code so what I've done here is on line 17 I've ditched the",
    "start": "2246269",
    "end": "2252779"
  },
  {
    "text": "call operator we're going to return the object G and the overall flow is still going to be pretty similar so down in",
    "start": "2252779",
    "end": "2259440"
  },
  {
    "text": "line 20 we're going to grab the function that gets returned from F and we're going to execute it at line 21 so we",
    "start": "2259440",
    "end": "2264660"
  },
  {
    "text": "still end up running G the same object anyway we execute and we still get the same answer we still get a 10 out of the",
    "start": "2264660",
    "end": "2270150"
  },
  {
    "text": "bottom of this but the flow is a tiny bit different so when we go to execute F so if we run through 19 and we're",
    "start": "2270150",
    "end": "2276960"
  },
  {
    "text": "getting ready to run F here in line 20 we're going to create this thing here we already talked about that so that's not",
    "start": "2276960",
    "end": "2282749"
  },
  {
    "text": "news but now we understand a little bit more we know that we know that this function f has a hidden scope member",
    "start": "2282749",
    "end": "2290039"
  },
  {
    "text": "that points back to there we know that the G that was created at hoisting time before we've even run F has a pointer",
    "start": "2290039",
    "end": "2297119"
  },
  {
    "text": "back to here and we know that the way the JavaScript runtime can link up this",
    "start": "2297119",
    "end": "2302969"
  },
  {
    "text": "scope object here to the next one up is by copying this reference here to create",
    "start": "2302969",
    "end": "2308999"
  },
  {
    "text": "this pointer there so it's totally deterministic it's totally straightforward once you see",
    "start": "2308999",
    "end": "2314320"
  },
  {
    "text": "this trick there's no mystery about how this stuff works at all it's like a closure is this member on here being",
    "start": "2314320",
    "end": "2320860"
  },
  {
    "text": "used to create a link between any execution scope for F and the scope that",
    "start": "2320860",
    "end": "2327790"
  },
  {
    "text": "F was originally defined in so if we",
    "start": "2327790",
    "end": "2333880"
  },
  {
    "text": "were to step in and take a look at the",
    "start": "2333880",
    "end": "2339220"
  },
  {
    "text": "next step here so we know F and G have scope handles nothing can get garbage collected so far so if we run all the",
    "start": "2339220",
    "end": "2345760"
  },
  {
    "text": "way through line 20 so what happens when we're finished with line 20 we've returned to the object G and we've",
    "start": "2345760",
    "end": "2352030"
  },
  {
    "text": "assigned it to my G in the global scope out here so we have a thing called my G out here and that actually points",
    "start": "2352030",
    "end": "2358420"
  },
  {
    "text": "there's a curvy purple arrow over to this G object over there this G object",
    "start": "2358420",
    "end": "2364420"
  },
  {
    "text": "is holding on to this scope via its green scope pointer and that's why if we",
    "start": "2364420",
    "end": "2369820"
  },
  {
    "text": "have my G out here that's why we actually have the scope available it can't get garbage collected and we can",
    "start": "2369820",
    "end": "2375820"
  },
  {
    "text": "easily reuse it because we've got G and G's got the outer scope so when we step",
    "start": "2375820",
    "end": "2381760"
  },
  {
    "text": "in and execute G so that's line 21 when",
    "start": "2381760",
    "end": "2387970"
  },
  {
    "text": "we go to run 21 we create a new scope object for this execution of G that's",
    "start": "2387970",
    "end": "2393670"
  },
  {
    "text": "this guy over here that's not too new as we saw that before but now we know that where this black line comes from the",
    "start": "2393670",
    "end": "2400600"
  },
  {
    "text": "link from this scope to the outer scope is just a copy of this green thing right",
    "start": "2400600",
    "end": "2406870"
  },
  {
    "text": "here actually go back one so this green this green link on G just gets copied to",
    "start": "2406870",
    "end": "2412960"
  },
  {
    "text": "make that black one and that's it so really it's just you know the whole mystery just goes away and so now we",
    "start": "2412960",
    "end": "2422020"
  },
  {
    "text": "could say well when this is finished here at line 21 when that's done or let's say we finished 21 what's elbow",
    "start": "2422020",
    "end": "2427480"
  },
  {
    "text": "eligible for garbage collection now well this picture looks a little bit different so this was a question we had",
    "start": "2427480",
    "end": "2433150"
  },
  {
    "text": "earlier and I said yes it's going to look different so now because we have my G over here and my G holds onto this",
    "start": "2433150",
    "end": "2441090"
  },
  {
    "text": "G down here at the bottom and that G holds on to this scope over here and",
    "start": "2441090",
    "end": "2446430"
  },
  {
    "text": "that scope is holding on to a bunch of stuff it means that the objects on the",
    "start": "2446430",
    "end": "2451470"
  },
  {
    "text": "right with these red arrows sorry red X's those can get garbage collected but",
    "start": "2451470",
    "end": "2456750"
  },
  {
    "text": "the stuff on the Left none of these things can be garbage collected they were all got pointers pointing to them so that stuff's going to stick around",
    "start": "2456750",
    "end": "2462000"
  },
  {
    "text": "and if we run G any time later we can do the same trick again because G's still",
    "start": "2462000",
    "end": "2467100"
  },
  {
    "text": "there and the scope that it points to is still there so I'm going to rewind here",
    "start": "2467100",
    "end": "2473880"
  },
  {
    "text": "a tiny bit and talk about this stuff but",
    "start": "2473880",
    "end": "2482400"
  },
  {
    "start": "2478000",
    "end": "2518000"
  },
  {
    "text": "I wanted to skip over so we could get to the pictures I think the pictures are a little easier to digest at least they are for me so why are closures important",
    "start": "2482400",
    "end": "2490200"
  },
  {
    "text": "because that's the next thing people want to say well this is great that's really interesting but why are they important can I just ignore this and my",
    "start": "2490200",
    "end": "2495210"
  },
  {
    "text": "JavaScript will run okay and the answer is well no not really there's two situations where closures are used what",
    "start": "2495210",
    "end": "2501990"
  },
  {
    "text": "I like to call the implicit and the explicit implicit is where you're using closures without even thinking about it",
    "start": "2501990",
    "end": "2507030"
  },
  {
    "text": "but if you didn't have them you'd be in trouble explicit is where you're intentionally doing some kind of a pony",
    "start": "2507030",
    "end": "2512850"
  },
  {
    "text": "trick with closures so and there are some useful things you can do with that too so let's just take a look at this",
    "start": "2512850",
    "end": "2519570"
  },
  {
    "text": "right here so this this block of code this would not work if we if we do not have this closure rule so if we ran line",
    "start": "2519570",
    "end": "2528810"
  },
  {
    "text": "two we've got some data over here line three this is about the simplest asynchronous code we could write so",
    "start": "2528810",
    "end": "2534420"
  },
  {
    "text": "we're calling set timeout that tells the browser we'd like it to schedule an event for roughly a thousand milliseconds in the future and that when",
    "start": "2534420",
    "end": "2540930"
  },
  {
    "text": "that event triggers we'd like it to run this code in here so we'd like it to run the stuff at line four but by the time",
    "start": "2540930",
    "end": "2546570"
  },
  {
    "text": "line four runs our main block of code here is done so if we didn't have the closure rule then when we were writing",
    "start": "2546570",
    "end": "2553740"
  },
  {
    "text": "this code we'd think well this data in here that should be this data out here because the scope chain rules does that should be the case the lexical scoping",
    "start": "2553740",
    "end": "2560520"
  },
  {
    "text": "says that's true but there's there would be no guarantee that the outer data would actually still exist so and if",
    "start": "2560520",
    "end": "2566670"
  },
  {
    "text": "this if this is helpful for you would all imagine what this would be like and see if this doesn't make sense you just ignore it but if if it's helpful imagine",
    "start": "2566670",
    "end": "2572730"
  },
  {
    "text": "what this would be like and see so me line - looks like conch char star data equals some info and of course there's",
    "start": "2572730",
    "end": "2579300"
  },
  {
    "text": "no set timeout and see but pretty much every platform has something like it so you call the Windows or the Mac OS C",
    "start": "2579300",
    "end": "2584640"
  },
  {
    "text": "call that schedules an event and you give it maybe a function pointer and you",
    "start": "2584640",
    "end": "2590430"
  },
  {
    "text": "give it some kind of a timeout and eventually hopefully the operating system runs this code that you gave it a pointer to and it does this console dot",
    "start": "2590430",
    "end": "2597060"
  },
  {
    "text": "log so maybe that's some kind of a sprint F or something like that and it gets to data and what happens well now",
    "start": "2597060",
    "end": "2603030"
  },
  {
    "text": "bad things happen right because data is a reference or it's a pointer in this case to something that was on the stack",
    "start": "2603030",
    "end": "2608400"
  },
  {
    "text": "but when the stack unwound it's gone so what you've got now is either something that's off the end of the stack or has",
    "start": "2608400",
    "end": "2613800"
  },
  {
    "text": "been replaced if there's other stack frames there so this doesn't really work if we don't have closures so this this",
    "start": "2613800",
    "end": "2624720"
  },
  {
    "text": "pattern here is what I call the implicit use of closures so behind any kind of asynchronous coding where we want to get",
    "start": "2624720",
    "end": "2631620"
  },
  {
    "text": "data from before the asynchronous event - after the event through the scope chain we need closures to get that to",
    "start": "2631620",
    "end": "2638400"
  },
  {
    "text": "work that's the implicit the explicit is what we're going to talk about for this last little section here which is it",
    "start": "2638400",
    "end": "2644730"
  },
  {
    "text": "turns out that because there's no client API for working with these scopes so you",
    "start": "2644730",
    "end": "2650070"
  },
  {
    "text": "remember a little while back I mentioned that these scope objects are there there are references to them but there's no",
    "start": "2650070",
    "end": "2656040"
  },
  {
    "text": "client accessible API that lets you mess around with them because there's no API for them these represent the strongest",
    "start": "2656040",
    "end": "2662700"
  },
  {
    "text": "encapsulation mechanism we have in JavaScript and JavaScript as we all learned the hard way over these last five six years is very weak on",
    "start": "2662700",
    "end": "2669210"
  },
  {
    "text": "encapsulation that's sort of the you know the weakest piece of the whole language and so we've done a lot of work",
    "start": "2669210",
    "end": "2674580"
  },
  {
    "text": "to try and rebuild that and that's this that's closures on the module pattern so",
    "start": "2674580",
    "end": "2681420"
  },
  {
    "start": "2681000",
    "end": "2953000"
  },
  {
    "text": "if we have exactly one mechanism for encapsulation and we want some encapsulation that's what we're going to",
    "start": "2681420",
    "end": "2686820"
  },
  {
    "text": "lean on so pretty much every other language has some system for this so like in Java we have you know classes",
    "start": "2686820",
    "end": "2692970"
  },
  {
    "text": "with different visibility levels we have packages we have interfaces versus implementations we've lots of layers of encapsulation in languages like C we've",
    "start": "2692970",
    "end": "2700470"
  },
  {
    "text": "got header files versus you know implementation files so I can give you the header or I can give you a library you can run functions in that library",
    "start": "2700470",
    "end": "2707520"
  },
  {
    "text": "without actually knowing what the code is inside there in JavaScript we know the default is everything ends up in one big pile so",
    "start": "2707520",
    "end": "2713920"
  },
  {
    "text": "the module pattern is a way of doing a specific trick with closures in order to give us a way to separate interface from",
    "start": "2713920",
    "end": "2720580"
  },
  {
    "text": "implementation and what we're going to do is create a function use its local scope as our internal area we can put",
    "start": "2720580",
    "end": "2727300"
  },
  {
    "text": "our local variables any private state helper methods anything like that inside and then what we're going to do is",
    "start": "2727300",
    "end": "2733120"
  },
  {
    "text": "return from that function an object that represents the interface so it's going",
    "start": "2733120",
    "end": "2738280"
  },
  {
    "text": "to look like this so here's an example this is a really really simple module that just has one private data member",
    "start": "2738280",
    "end": "2745480"
  },
  {
    "text": "it's got some string in here well object anyway called data we could put whatever",
    "start": "2745480",
    "end": "2750610"
  },
  {
    "text": "else we want in here we've got a couple of functions defined we have a get data that prints it out and a set data that",
    "start": "2750610",
    "end": "2756340"
  },
  {
    "text": "stores something else in there and we're going to return an object with just the",
    "start": "2756340",
    "end": "2762520"
  },
  {
    "text": "get data and set data so the result of this and you may this may start looking more familiar because pretty much every",
    "start": "2762520",
    "end": "2769240"
  },
  {
    "text": "library in JavaScript that you're ever going to see on the Internet is going to be wrapped in something that looks a whole lot like this the reason is that",
    "start": "2769240",
    "end": "2775120"
  },
  {
    "text": "we have a local scope for this function and that allows us to stash our data and whatever else we want to stash and when",
    "start": "2775120",
    "end": "2781870"
  },
  {
    "text": "we execute this function we're going to grab just the interface this thing down here that's being returned so we can",
    "start": "2781870",
    "end": "2787660"
  },
  {
    "text": "choose to expose just what we want and we've actually that's sort of the one really nice piece of encapsulation",
    "start": "2787660",
    "end": "2795390"
  },
  {
    "text": "mechanism that we have in JavaScript yeah",
    "start": "2795390",
    "end": "2801900"
  },
  {
    "text": "so the iif ii is not my accessors my axis is the thing that gets returned",
    "start": "2803359",
    "end": "2809190"
  },
  {
    "text": "from so it actually can't even if it were to use you know arguments Kali or",
    "start": "2809190",
    "end": "2815130"
  },
  {
    "text": "if you put a name up in here or something that would be a handle to the function object but not but neither its",
    "start": "2815130",
    "end": "2820950"
  },
  {
    "text": "scope nor its return value so you wouldn't have to worry about that so IIF",
    "start": "2820950",
    "end": "2827190"
  },
  {
    "text": "e stands for immediately invoked function expression it's just a fancy phrase for this pattern where we create",
    "start": "2827190",
    "end": "2833700"
  },
  {
    "text": "a function and then immediately execute it and then grab the return value so it's very much just like writing a",
    "start": "2833700",
    "end": "2840060"
  },
  {
    "text": "regular function and running it the main difference is that if you were to write a regular function and then execute it you'd create this extra symbol you don't",
    "start": "2840060",
    "end": "2846930"
  },
  {
    "text": "need so if I made a function here called say build accessors and then I run build accessors to obtain my accessors at the",
    "start": "2846930",
    "end": "2854099"
  },
  {
    "text": "end of the day I'd have both my accessors and build accessors hanging out and what I'd like to do is come up",
    "start": "2854099",
    "end": "2859589"
  },
  {
    "text": "with something in a perfect world where I don't leak any extra symbols so I only get the thing out that I want out so",
    "start": "2859589",
    "end": "2865710"
  },
  {
    "text": "that's that's sort of this pattern here it's not super required for the con you",
    "start": "2865710",
    "end": "2870750"
  },
  {
    "text": "know for using closures the way I'm describing I just put it up here because there's so much code that uses this pattern that it's worth getting",
    "start": "2870750",
    "end": "2877680"
  },
  {
    "text": "comfortable with I guess yeah Oh would I prefer it to prototypes for a",
    "start": "2877680",
    "end": "2888469"
  },
  {
    "text": "module or four you mean for creating objects so it depends what you're trying",
    "start": "2888469",
    "end": "2897709"
  },
  {
    "text": "to do if you if you really want private stay then this is really the only option because with prototypes everything is",
    "start": "2897709",
    "end": "2904519"
  },
  {
    "text": "accessible you can always walk the prototype chain and do whatever you want so if you're arranging business objects",
    "start": "2904519",
    "end": "2910759"
  },
  {
    "text": "and creating relationships between them that's a case where prototypes often make more sense because you know you trust yourself and you're trying to",
    "start": "2910759",
    "end": "2916579"
  },
  {
    "text": "share stuff with yourself and the prototypes effectively hide things you don't want to see but when we're building modules that will eventually",
    "start": "2916579",
    "end": "2922579"
  },
  {
    "text": "get integrated into a bigger application like you know let's say each person here was working on a library and I'm going to integrate those all it's like I want",
    "start": "2922579",
    "end": "2930289"
  },
  {
    "text": "to see your API I don't want to see any of your implementation and you don't really want me to see it either because you might change it later and you don't",
    "start": "2930289",
    "end": "2935479"
  },
  {
    "text": "mean to depend on it so in that situation the modules make more sense and so when we're integrating pieces",
    "start": "2935479",
    "end": "2940729"
  },
  {
    "text": "whether we're using something like require Jas or you know implicit sort of integration like an angular we're going",
    "start": "2940729",
    "end": "2946910"
  },
  {
    "text": "to be using something like this",
    "start": "2946910",
    "end": "2949959"
  },
  {
    "text": "so I have a couple of other links on here I won't you know I'm not going to go through these for you but I'm like I said I'm going to post this deck so you",
    "start": "2952680",
    "end": "2958440"
  },
  {
    "start": "2953000",
    "end": "3003000"
  },
  {
    "text": "can look at them later of all the stuff on the Internet there are very few articles that do a",
    "start": "2958440",
    "end": "2963480"
  },
  {
    "text": "really nice job of this but I really like this one I don't know this gentleman but I really",
    "start": "2963480",
    "end": "2969599"
  },
  {
    "text": "love the piece of work that he did here describing how scopes closures and scope",
    "start": "2969599",
    "end": "2974789"
  },
  {
    "text": "chains work with reference to the spec it's a little bit thorny er than what I've gone through in here because he",
    "start": "2974789",
    "end": "2980010"
  },
  {
    "text": "does include that extra side case that has to do with dealing with whiff so it's a tiny bit more complicated but",
    "start": "2980010",
    "end": "2986220"
  },
  {
    "text": "it's a great place to go back to for more of this and if you're interested in where the heck did the word closure come",
    "start": "2986220",
    "end": "2991890"
  },
  {
    "text": "from anyway who was the first person to sort of pitch this there's a little article on the bottom it's really short",
    "start": "2991890",
    "end": "2997200"
  },
  {
    "text": "maybe half a page that talks about that so you know hopefully it's clear why",
    "start": "2997200",
    "end": "3004430"
  },
  {
    "text": "this stuff is useful at this point so scope chains and closures underlie all the stuff that we're using not just your",
    "start": "3004430",
    "end": "3011390"
  },
  {
    "text": "basic asynchronous code but all the more advanced patterns so some constructor based patterns combine constructors with",
    "start": "3011390",
    "end": "3018109"
  },
  {
    "text": "closures object definition patterns and a lot of libraries are implicitly used",
    "start": "3018109",
    "end": "3023630"
  },
  {
    "text": "closures so for example an angular a lot of the things that you make are wrapped in a function and so they automatically",
    "start": "3023630",
    "end": "3028760"
  },
  {
    "text": "leverage the closure module pattern events and callbacks we talked about more advanced async control flow stuff",
    "start": "3028760",
    "end": "3035770"
  },
  {
    "text": "so modules and dependency management functional programming patterns so if",
    "start": "3035770",
    "end": "3041359"
  },
  {
    "text": "you're dealing with things like bind trying to figure out how that works or how you can implement that promises and",
    "start": "3041359",
    "end": "3047270"
  },
  {
    "text": "other monads generally rely on converting functions into objects or wrapping functions and other functions",
    "start": "3047270",
    "end": "3053599"
  },
  {
    "text": "and where do you store your state you store it in a closure so all of these more advanced patterns depend on",
    "start": "3053599",
    "end": "3058910"
  },
  {
    "text": "closures and where do we go from here I would say please if this makes sense to",
    "start": "3058910",
    "end": "3065660"
  },
  {
    "text": "you then spread the word and take this you know take this deck spend a little",
    "start": "3065660",
    "end": "3071000"
  },
  {
    "text": "time to get familiar with it presented at your own company presented at school present it wherever I've so many times",
    "start": "3071000",
    "end": "3076880"
  },
  {
    "text": "I've heard people and I mean people who are very good developers doing great work say things like yeah you know the",
    "start": "3076880",
    "end": "3081950"
  },
  {
    "text": "Scopes in JavaScript are kind of weird you know it just kind of does something this let's just end all that because it's really hard to be taken seriously",
    "start": "3081950",
    "end": "3088050"
  },
  {
    "text": "when your language involves things that are full of mysteries and nobody can really explain it without sort of hand waving and begging off so let's just",
    "start": "3088050",
    "end": "3094770"
  },
  {
    "text": "make this really clear and say that it's nothing special and the more we can demystify this the better it'll be for",
    "start": "3094770",
    "end": "3100680"
  },
  {
    "text": "everybody so that's pretty much what I had to talk about here if you have any questions we have a few more minutes",
    "start": "3100680",
    "end": "3107220"
  },
  {
    "text": "maybe two or three more minutes so so performance implications so in terms of",
    "start": "3107220",
    "end": "3113850"
  },
  {
    "text": "in terms of cycles execution cycles the impact is minimal in terms of memory",
    "start": "3113850",
    "end": "3119490"
  },
  {
    "text": "there's a potential cost because like anything else in JavaScript if you're holding a reference so we know es6 we've",
    "start": "3119490",
    "end": "3124890"
  },
  {
    "text": "got weak references but that's the future and it's not really what we're doing today with regular hard references",
    "start": "3124890",
    "end": "3130890"
  },
  {
    "text": "any function you hold holds the whole scope chain so on the one hand you're potentially holding a bunch of objects",
    "start": "3130890",
    "end": "3137820"
  },
  {
    "text": "which you may or may not need but here's where it gets interesting if you need those objects then you need them right",
    "start": "3137820",
    "end": "3142890"
  },
  {
    "text": "so it's not a leak it's an issue you need to optimize in your code if you're holding on to things in the scope chain",
    "start": "3142890",
    "end": "3147960"
  },
  {
    "text": "that you don't need sometimes people will look at that and go well that's essentially a leak you're using the more",
    "start": "3147960",
    "end": "3153390"
  },
  {
    "text": "closed more functions you hang on to the more closures you're hanging on to the more stuff you're hanging on to and it's going to eat up a bunch of memory but",
    "start": "3153390",
    "end": "3159120"
  },
  {
    "text": "there's a really easy fix for that so and I think I even have an example I can show on here so here's an example I was",
    "start": "3159120",
    "end": "3164670"
  },
  {
    "text": "if we had more time I was going to maybe show this in a browser but here's an example of this module pattern it's the same thing I just had up on the slide so",
    "start": "3164670",
    "end": "3171120"
  },
  {
    "text": "let's suppose that in here in the module we have a buffer some very large piece of data in real life it might be",
    "start": "3171120",
    "end": "3177600"
  },
  {
    "text": "something like a UN to eight array that has megabytes of image data but here we're just going to pretend that it is a big piece of data it's actually a string",
    "start": "3177600",
    "end": "3184530"
  },
  {
    "text": "so let's suppose that when we get to the end of this here we realize that okay the way this code is currently written",
    "start": "3184530",
    "end": "3190680"
  },
  {
    "text": "we're going to be holding on to buffer forever where I shouldn't say it forever as long as I have accessors I have the",
    "start": "3190680",
    "end": "3196440"
  },
  {
    "text": "buffer but I don't need the buffer so what do I do to fix this well it's actually really easy I come down in here",
    "start": "3196440",
    "end": "3201990"
  },
  {
    "text": "and before I return from this function I take buffer the symbol and I assign to it something small like a number like",
    "start": "3201990",
    "end": "3207960"
  },
  {
    "text": "three or seven or no so now what I've got is the symbol buffer is in scope and",
    "start": "3207960",
    "end": "3214020"
  },
  {
    "text": "the symbol buffer will be in scope forever but I'm not actually leaking the data that goes with buffer so if buffer",
    "start": "3214020",
    "end": "3219740"
  },
  {
    "text": "pointed to like 10 Meg's of image data what I've now got is the reference for buffer which is you know maybe 8 bytes",
    "start": "3219740",
    "end": "3224840"
  },
  {
    "text": "or something but I haven't got the buffer so this is all you have to do is profile your code look for the big",
    "start": "3224840",
    "end": "3229970"
  },
  {
    "text": "objects that you don't need and then clear them out before you return from the function yeah well I think the I",
    "start": "3229970",
    "end": "3239900"
  },
  {
    "text": "would have to look at how v8 handles closures so you know I'm not going to give you a counter-argument without knowing exactly how the implementation",
    "start": "3239900",
    "end": "3246470"
  },
  {
    "text": "works but I guess what I would I would say sort of the the really I don't know maybe the silly answers would be you",
    "start": "3246470",
    "end": "3252620"
  },
  {
    "text": "know always profile first it's never in a you know it's not necessarily a problem until it's actually a problem so that's you know if true for all",
    "start": "3252620",
    "end": "3258260"
  },
  {
    "text": "performance issues the second thing is that v8 is always doing other new",
    "start": "3258260",
    "end": "3264310"
  },
  {
    "text": "optimizations so you don't want to make a big compromise in your architecture for something that like in two weeks might come out and be optimized so it",
    "start": "3264310",
    "end": "3271900"
  },
  {
    "text": "you know we don't want to write sloppy code hoping Google will bail us out that's not great either but I would just",
    "start": "3271900",
    "end": "3277460"
  },
  {
    "text": "I guess I would just be cautious about it and see like whether it's really an issue and if it turns out that it's something you're doing a million of like",
    "start": "3277460",
    "end": "3282980"
  },
  {
    "text": "if you're processing like really tiny sprites in a game and your performance is critical the objects are small and you have a lot of them then you know",
    "start": "3282980",
    "end": "3289700"
  },
  {
    "text": "that maybe there's no defense for this and actually you just go with the fastest thing today so you know definitely do what you need to do for",
    "start": "3289700",
    "end": "3295460"
  },
  {
    "text": "performance anything else out here yeah",
    "start": "3295460",
    "end": "3301880"
  },
  {
    "text": "that bracket bracket scope we can't really access that can you you can't despite my",
    "start": "3301880",
    "end": "3307240"
  },
  {
    "text": "practical scope you ah well so it's funny you should ask that",
    "start": "3307240",
    "end": "3312680"
  },
  {
    "text": "you cannot access it in client code there's no API for that but you it is actually there you can see it in Chrome",
    "start": "3312680",
    "end": "3319070"
  },
  {
    "text": "in the in the debug or if you want so for example if I come in here and I I've",
    "start": "3319070",
    "end": "3324710"
  },
  {
    "text": "just this is just running that page I was just looking at so we have my accessors get right we've got some so I",
    "start": "3324710",
    "end": "3330290"
  },
  {
    "text": "get is it get data to get data so there's the object if we ask chrome to dump out the details on this if I go",
    "start": "3330290",
    "end": "3336350"
  },
  {
    "text": "into a console dot der on this object so",
    "start": "3336350",
    "end": "3341410"
  },
  {
    "text": "now we can expand it and we can see all of the features in here so in this object there is a thing called function",
    "start": "3341410",
    "end": "3347900"
  },
  {
    "text": "scope and if we expand that we can see there's two two entities in here there's global which you can always get to and",
    "start": "3347900",
    "end": "3353900"
  },
  {
    "text": "there's closure which is all of the stuff in the scope chain outside of G it doesn't include this guy's locals I",
    "start": "3353900",
    "end": "3359810"
  },
  {
    "text": "could we had more time I could demonstrate that but this does not include locals it only includes the parent scope so it is actually here and",
    "start": "3359810",
    "end": "3365330"
  },
  {
    "text": "you can debug with it you just can't program against it so awesome well thanks thanks a lot I think we're out of",
    "start": "3365330",
    "end": "3372140"
  },
  {
    "text": "time for this you",
    "start": "3372140",
    "end": "3378980"
  }
]