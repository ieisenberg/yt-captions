[
  {
    "text": "[Music]",
    "start": "3350",
    "end": "14249"
  },
  {
    "text": "hello everyone House of guards was a huge game changer for Netflix this",
    "start": "15400",
    "end": "20880"
  },
  {
    "text": "political drama premiered in 2013 and since then Netflix has gone on to",
    "start": "20880",
    "end": "26000"
  },
  {
    "text": "produce several more successful shows such as The Witcher and stranger things producing original content",
    "start": "26000",
    "end": "33480"
  },
  {
    "text": "involves many different functions such as talent management budgeting post- production and to facilitate this we",
    "start": "33480",
    "end": "40360"
  },
  {
    "text": "have many back-end and front-end teams collaborating closely together in the studio",
    "start": "40360",
    "end": "46480"
  },
  {
    "text": "domain we adopted graphql fairly early on as a way to expose a unified graphql",
    "start": "46480",
    "end": "53239"
  },
  {
    "text": "API for our clients so that they didn't have to talk to individual backend services to fetch data we implemented",
    "start": "53239",
    "end": "60760"
  },
  {
    "text": "this API as a graphql monolith our initial graph was fairly small with a",
    "start": "60760",
    "end": "66040"
  },
  {
    "text": "few teams participating in the graph over time this graph grew and we found",
    "start": "66040",
    "end": "71640"
  },
  {
    "text": "ourselves having to add more and more custom business logic in the monolith this model didn't scale very well for us",
    "start": "71640",
    "end": "79159"
  },
  {
    "text": "we started looking into Federated graphql as a way to distribute ownership of this graph across several teams while",
    "start": "79159",
    "end": "86439"
  },
  {
    "text": "still maintaining a single unified API 3 years later our adoption of federation",
    "start": "86439",
    "end": "93479"
  },
  {
    "text": "Federated graphql has been fairly successful not only do we have the studio graph which continues to grow we",
    "start": "93479",
    "end": "99960"
  },
  {
    "text": "have more graphs one for our internal platform teams and another in the consumer space which Powers the",
    "start": "99960",
    "end": "106399"
  },
  {
    "text": "discovery experience on the Netflix UI today's talk is not so much about Federated graphql itself but more about",
    "start": "106399",
    "end": "113880"
  },
  {
    "text": "the platform including the framework and the tooling that we've built in order to facilitate and drive adoption of",
    "start": "113880",
    "end": "120200"
  },
  {
    "text": "Federated graphql I'll talk through some of the challenges we faced at various stages of",
    "start": "120200",
    "end": "125960"
  },
  {
    "text": "adoption and how our platform has evolved to keep up with these challenges I'm Kavita shasan and I'm an",
    "start": "125960",
    "end": "133599"
  },
  {
    "text": "engineer on the API platform team at Netflix our team is responsible for owning and operating the Federated",
    "start": "133599",
    "end": "140080"
  },
  {
    "text": "graphql Gateway and also for driving adoption of Federated graphql within the",
    "start": "140080",
    "end": "147000"
  },
  {
    "text": "company to help set some context let's spend some time to review the basics of",
    "start": "147400",
    "end": "152879"
  },
  {
    "text": "graphql here I have an example schema of a shows service we have three main root types a",
    "start": "152879",
    "end": "159680"
  },
  {
    "text": "query to fetch to Define apis to fetch your data a mutation for defining apis",
    "start": "159680",
    "end": "165959"
  },
  {
    "text": "to mutate data and subscriptions which allow clients to subscribe for events",
    "start": "165959",
    "end": "171120"
  },
  {
    "text": "from the server here I have a shows query that takes in a collection of show IDs and returns a collection of show",
    "start": "171120",
    "end": "177680"
  },
  {
    "text": "objects my type show is is defined as having the following Fields show ID",
    "start": "177680",
    "end": "183120"
  },
  {
    "text": "title and reviews and the review type has a ratings field now given the schema",
    "start": "183120",
    "end": "189319"
  },
  {
    "text": "here's an example graphql query that a client might send to this service I can request for shows specifying my show ID",
    "start": "189319",
    "end": "197799"
  },
  {
    "text": "and in my response I'm selecting my show ID and the rating that belongs to the",
    "start": "197799",
    "end": "203720"
  },
  {
    "text": "reviews type you'll note that I haven't actually requested for the title field",
    "start": "203720",
    "end": "208879"
  },
  {
    "text": "and therefore I don't actually get back that data in my response this illust this illustrates",
    "start": "208879",
    "end": "215040"
  },
  {
    "text": "the power of graphql wherein clients can specify exactly the data that they want",
    "start": "215040",
    "end": "220920"
  },
  {
    "text": "in the response they don't get anything more or less so why graphql as we just saw we",
    "start": "220920",
    "end": "228599"
  },
  {
    "text": "don't have the classic problem we have with rest apis where we under fetch or over fetch data you get exactly what",
    "start": "228599",
    "end": "235840"
  },
  {
    "text": "you've asked for it is strongly typed and and you have a clear schema contract all graph",
    "start": "235840",
    "end": "242920"
  },
  {
    "text": "services are able to publish their schema to make it easily discoverable by",
    "start": "242920",
    "end": "248720"
  },
  {
    "text": "clients this facilitates better schema collaboration and forces a conversation early on to be able to design an API",
    "start": "248720",
    "end": "256359"
  },
  {
    "text": "that meets both the client and the backend developer needs for the business use case at",
    "start": "256359",
    "end": "262160"
  },
  {
    "text": "hand there's no versioning with graphql any new fields are additive and if you",
    "start": "262160",
    "end": "268199"
  },
  {
    "text": "want to remove fields you can follow a nice deprecation workflow in in our company we implement this by tracking",
    "start": "268199",
    "end": "274800"
  },
  {
    "text": "client usage stats and we can remove fields from the schema once we have determined that there are no usages for",
    "start": "274800",
    "end": "281240"
  },
  {
    "text": "that field so this is what our initial Studio architecture look like in the early days",
    "start": "281240",
    "end": "288000"
  },
  {
    "text": "we had clients talking to one or more back-end Services over many different mechanisms grpc rest and some even",
    "start": "288000",
    "end": "295080"
  },
  {
    "text": "graphql there was no consistency in the implementation of fetching this data and there were multiple sources of",
    "start": "295080",
    "end": "302960"
  },
  {
    "text": "Truth we instead decided to switch to using a unified API graphql API we",
    "start": "303400",
    "end": "310280"
  },
  {
    "text": "implemented this as a graphql monolith and now clients could interact directly with this monolith instead of reaching",
    "start": "310280",
    "end": "316520"
  },
  {
    "text": "out to the backend services but the monolith did all the heavy lifting of translating incoming graphql queries",
    "start": "316520",
    "end": "323120"
  },
  {
    "text": "into the corresponding calls out to the backend services this was great for the clients",
    "start": "323120",
    "end": "328960"
  },
  {
    "text": "however it didn't scale for us we found ourselves having to add more and more custom business logic in this monolith",
    "start": "328960",
    "end": "336280"
  },
  {
    "text": "this is when we started exploring a different Federated ownership model what we wanted ideally is for the back-end",
    "start": "336280",
    "end": "342759"
  },
  {
    "text": "service teams to also own graphql API that they exposed and we wanted to slim",
    "start": "342759",
    "end": "348479"
  },
  {
    "text": "down this monolith by removing all the custom business logic so we wanted teams themselves to",
    "start": "348479",
    "end": "355319"
  },
  {
    "text": "stand up graphql services and expose their API but still be part of the same",
    "start": "355319",
    "end": "360440"
  },
  {
    "text": "unified API that's exposed as a Federated graph and the Gateway now",
    "start": "360440",
    "end": "365759"
  },
  {
    "text": "simply becomes a basic router where it just translates incoming graphql queries",
    "start": "365759",
    "end": "371280"
  },
  {
    "text": "into outgoing graphql calls to different services in 2018 Apollo published the",
    "start": "371280",
    "end": "377319"
  },
  {
    "text": "Federation spec that allowed us to do exactly that it provided a way to share",
    "start": "377319",
    "end": "382680"
  },
  {
    "text": "types within the same graph while being able to distribute ownership of the graph such that each team owned a",
    "start": "382680",
    "end": "389039"
  },
  {
    "text": "subgraph so with that we have clients still",
    "start": "389039",
    "end": "394840"
  },
  {
    "text": "talking to the Federated Gateway and the Federated Gateway in turn talks to Individual graphql Services we call",
    "start": "394840",
    "end": "402400"
  },
  {
    "text": "these as domain graph services or dgss in this architecture the dgss would be owned by",
    "start": "402400",
    "end": "409039"
  },
  {
    "text": "the corresponding backend teams that own the data itself and would be responsible for providing and registering the schema",
    "start": "409039",
    "end": "416199"
  },
  {
    "text": "with the Gateway so this is how the Gateway would know which services to talk to in order to fulfill an incoming",
    "start": "416199",
    "end": "422400"
  },
  {
    "text": "graphql query so let's take a look at a more",
    "start": "422400",
    "end": "427520"
  },
  {
    "text": "concrete example here I have the shows query from our previous example we have the client",
    "start": "427520",
    "end": "434440"
  },
  {
    "text": "asking for a show given in id1 and requesting for a title and a",
    "start": "434440",
    "end": "440039"
  },
  {
    "text": "reviews field with a star rating so in this example we have two",
    "start": "440039",
    "end": "445360"
  },
  {
    "text": "dgss one is the shows dgs it exposes a type show with an ID field and a title",
    "start": "445360",
    "end": "452599"
  },
  {
    "text": "field we have a review dgs that extends the show type using the at extends",
    "start": "452599",
    "end": "458440"
  },
  {
    "text": "directive and adds a review field to this show type both these schemas are registered",
    "start": "458440",
    "end": "465879"
  },
  {
    "text": "with the Gateway and so for an incoming query the Gateway is now able to know",
    "start": "465879",
    "end": "471000"
  },
  {
    "text": "that it needs to contact the show service in order to fetch the title field and the review service in order to",
    "start": "471000",
    "end": "477560"
  },
  {
    "text": "fetch the reviews field it then collates the responses from these two Services together into one",
    "start": "477560",
    "end": "484039"
  },
  {
    "text": "single response and sends it back to the client so this is how Federation works at a very high",
    "start": "484039",
    "end": "490319"
  },
  {
    "text": "level naturally this is a significant departure from our previous architectural model and it and it",
    "start": "490319",
    "end": "496840"
  },
  {
    "text": "involved a whole migration this didn't come without any challenges you asking more than 40 teams",
    "start": "496840",
    "end": "504680"
  },
  {
    "text": "who are already part of this unified API graph to now have to own new graphql",
    "start": "504680",
    "end": "510800"
  },
  {
    "text": "services to learn graphql which could be fairly new to most",
    "start": "510800",
    "end": "516240"
  },
  {
    "text": "folks in addition to that we were asking them to learn Federated graphql which was completely new for most of us at the",
    "start": "516240",
    "end": "522839"
  },
  {
    "text": "company and we were also asking them to rethink their apis because we wanted to focus on schema First Development such",
    "start": "522839",
    "end": "531040"
  },
  {
    "text": "that the apis made sense in a composed graph so how do we make it easy we",
    "start": "531040",
    "end": "538240"
  },
  {
    "text": "wanted to focus on on ease of onboarding so that teams could easily stand up and Implement their graphql apis we wanted",
    "start": "538240",
    "end": "545600"
  },
  {
    "text": "to provide Netflix Integrations out of the box because we have a lot of custom metrics in oddy that developers need to",
    "start": "545600",
    "end": "551959"
  },
  {
    "text": "integrate with whenever uh they're standing up a service we wanted to enforce best",
    "start": "551959",
    "end": "558160"
  },
  {
    "text": "practices and some consistency of patterns in the implementations in short we wanted to",
    "start": "558160",
    "end": "564000"
  },
  {
    "text": "provide a great developer experience to make it as easy as possible to migrate to this new",
    "start": "564000",
    "end": "571399"
  },
  {
    "text": "architecture so the first thing we set about doing is making it easy to implement a graphql API we implemented",
    "start": "571800",
    "end": "579040"
  },
  {
    "text": "the domain graph service framework to do exactly that the domain graph service framework is built on top of spring Boot",
    "start": "579040",
    "end": "585560"
  },
  {
    "text": "and graphql Java and just makes it easy to wire up your code in graphql",
    "start": "585560",
    "end": "591120"
  },
  {
    "text": "Java we provided several features out of the box the first is a spring based",
    "start": "591120",
    "end": "596440"
  },
  {
    "text": "spring annotation based model by wherein by using these annotations it",
    "start": "596440",
    "end": "601920"
  },
  {
    "text": "automatically wires up graphql Java code in your service we also implemented a code",
    "start": "601920",
    "end": "608640"
  },
  {
    "text": "generation Gradle plugin so it can take your schema and generate the corresponding Java classes that can be",
    "start": "608640",
    "end": "614839"
  },
  {
    "text": "used in your implementation we provided some basic Federation support out of the box we",
    "start": "614839",
    "end": "622600"
  },
  {
    "text": "also implemented a lightweight test framework to be able to test your graphql Fetchers data Fetchers or",
    "start": "622600",
    "end": "628160"
  },
  {
    "text": "resolvers easily without having to write heavyweight smoke tests we provided tracing and metrics",
    "start": "628160",
    "end": "634720"
  },
  {
    "text": "out of the box as well so these didn't have to be integrated manually by developers and over time we started",
    "start": "634720",
    "end": "640839"
  },
  {
    "text": "adding more features such as subscriptions and file",
    "start": "640839",
    "end": "645360"
  },
  {
    "text": "uploads we organized our project into several modules so that developers could",
    "start": "646560",
    "end": "651639"
  },
  {
    "text": "opt in and out of certain features to begin with as I mentioned we",
    "start": "651639",
    "end": "657040"
  },
  {
    "text": "built on top of spring boot the original idea behind the framework was to provide Netflix Integrations out",
    "start": "657040",
    "end": "663800"
  },
  {
    "text": "of the box so we started adding support for oddy metrics and tracing and",
    "start": "663800",
    "end": "669240"
  },
  {
    "text": "logging we also wanted to make it easy to wire up graphql Java code and so our dgs core provided the bulk of these",
    "start": "669240",
    "end": "676680"
  },
  {
    "text": "spring style annotations to do exactly that and then as I mentioned we built on",
    "start": "676680",
    "end": "683000"
  },
  {
    "text": "top of that and started adding more features such as subscriptions and support for file uploads",
    "start": "683000",
    "end": "690560"
  },
  {
    "text": "here's some examples of the annotations I was referring to earlier we have a dgs",
    "start": "690560",
    "end": "695720"
  },
  {
    "text": "query mutation and dgs subscription these let you automatically wire up your",
    "start": "695720",
    "end": "701480"
  },
  {
    "text": "data fetcher code and register it with graphql Java so that when a query for an",
    "start": "701480",
    "end": "707720"
  },
  {
    "text": "incoming graphql query it is able to invoke the implementation that you've registered with",
    "start": "707720",
    "end": "713560"
  },
  {
    "text": "it we have at input argument that lets you extract input parameters easily",
    "start": "713560",
    "end": "719480"
  },
  {
    "text": "in your implementation of the data fetcher we have many more such convenience annotations that let you",
    "start": "719480",
    "end": "725040"
  },
  {
    "text": "work and Implement your graphql service so let's take a quick look at",
    "start": "725040",
    "end": "730240"
  },
  {
    "text": "how you can actually build a dgs to demonstrate how easy it is I start with",
    "start": "730240",
    "end": "735560"
  },
  {
    "text": "a spring boot project initialized using the spring boot initializer I go ahead and add my dgs",
    "start": "735560",
    "end": "742160"
  },
  {
    "text": "dependencies which is a starter in this case and I can optionally add in the code generation plugin this lets lets me",
    "start": "742160",
    "end": "749560"
  },
  {
    "text": "generate Java classes based on my schema defined in the graph C",
    "start": "749560",
    "end": "755040"
  },
  {
    "text": "Service here I have a quick demo set up to show how we can Implement a",
    "start": "755040",
    "end": "760760"
  },
  {
    "text": "dgs the very first thing I start is by setting up my dependencies in my",
    "start": "760760",
    "end": "766079"
  },
  {
    "text": "build.gradle file I go ahead and add my optional code generation plugin this is",
    "start": "766079",
    "end": "771519"
  },
  {
    "text": "a Gradle plugin and then I can go ahead and add my dgs starter and the platform",
    "start": "771519",
    "end": "777920"
  },
  {
    "text": "dependencies that the DJs requires the next step is to Define",
    "start": "777920",
    "end": "783959"
  },
  {
    "text": "ESO here I'm going to implement a review service to complement the show service",
    "start": "783959",
    "end": "789240"
  },
  {
    "text": "so I have a reviews query that returns a type review and the review type has a star rating",
    "start": "789240",
    "end": "795639"
  },
  {
    "text": "field the next step is to implement my data fetcher itself here I've",
    "start": "795639",
    "end": "800959"
  },
  {
    "text": "prepopulated this with some static hardcoded data just to return within my data fetcher implementation you'll",
    "start": "800959",
    "end": "808040"
  },
  {
    "text": "notice that the view class doesn't actually exist yet once I build this",
    "start": "808040",
    "end": "813160"
  },
  {
    "text": "project code generation is going to kick in and build all the Java classes based",
    "start": "813160",
    "end": "818920"
  },
  {
    "text": "on the schema that I've defined so after I've built I should have the reviews",
    "start": "818920",
    "end": "824440"
  },
  {
    "text": "class generated reviews class available for me to use these are generated in",
    "start": "824440",
    "end": "829680"
  },
  {
    "text": "your build generated folder and you can have all the types that you've defined in your",
    "start": "829680",
    "end": "835360"
  },
  {
    "text": "schema viewable there my generat class also comes with a nice Builder style API",
    "start": "835360",
    "end": "841880"
  },
  {
    "text": "so I can construct these in my code easily so now let's go back to the data",
    "start": "841880",
    "end": "848720"
  },
  {
    "text": "fetcher itself now that we've generated these classes I'm able to use this in my",
    "start": "848720",
    "end": "855320"
  },
  {
    "text": "implementation the next step is to actually indicate to the framework that this is going to be my data fetcher",
    "start": "855320",
    "end": "862160"
  },
  {
    "text": "implementation so I first annotate this with an add dgs component and these are",
    "start": "862160",
    "end": "868000"
  },
  {
    "text": "any class annotated with this are processed specially by the framework now I can go ahead and",
    "start": "868000",
    "end": "875120"
  },
  {
    "text": "implement the code for my query so I start with an add dgs query to wire up",
    "start": "875120",
    "end": "880199"
  },
  {
    "text": "my data fetcher and here I'm going to set up my the implementation for the reviews query so the reviews query",
    "start": "880199",
    "end": "888240"
  },
  {
    "text": "returns a list of review objects and it takes in a show ID so if you'll recall I",
    "start": "888240",
    "end": "895800"
  },
  {
    "text": "can use my input argument annotation to extract this input parameter from the",
    "start": "895800",
    "end": "901199"
  },
  {
    "text": "data fetching environment that graphql Java provides so in your schema we have",
    "start": "901199",
    "end": "906519"
  },
  {
    "text": "the show ID defined as a string and so I can now just use that in my code so now",
    "start": "906519",
    "end": "913360"
  },
  {
    "text": "given the show ID all I need to do is look up the corresponding review object",
    "start": "913360",
    "end": "918759"
  },
  {
    "text": "and return that in my code and that's all it takes it's just",
    "start": "918759",
    "end": "925199"
  },
  {
    "text": "as simple once we now build and start the service I should be able to go and",
    "start": "925199",
    "end": "932240"
  },
  {
    "text": "execute start executing graphql queries against this graphical is an editor that",
    "start": "932240",
    "end": "938440"
  },
  {
    "text": "lets you execute graphql queries and it's integrated out of the box so here I can browse my schema and I can also",
    "start": "938440",
    "end": "946399"
  },
  {
    "text": "craft queries to execute against this service running locally on my machine so",
    "start": "946399",
    "end": "952759"
  },
  {
    "text": "now here I have a query I have a reviews query specifying a show ID in this case",
    "start": "952759",
    "end": "959440"
  },
  {
    "text": "I'm going to use a show ID of two because I know I've set up some data for that show ID and then I'm going to",
    "start": "959440",
    "end": "966680"
  },
  {
    "text": "select the star rating field so given this query I can now",
    "start": "966680",
    "end": "972759"
  },
  {
    "text": "execute it and get some data back from my service I also have some tracing extensions integrated and so that's the",
    "start": "972759",
    "end": "979079"
  },
  {
    "text": "data that you see here in the response if I provide an invalid show ID I get no",
    "start": "979079",
    "end": "984279"
  },
  {
    "text": "data in this case so we took a look at how to",
    "start": "984279",
    "end": "990160"
  },
  {
    "text": "implement a dgs the next step is to test it here I have a simple test that's set",
    "start": "990160",
    "end": "997800"
  },
  {
    "text": "up it's a spring boot test and you'll note that I've only specified the classes that I want to use in this",
    "start": "997800",
    "end": "1004240"
  },
  {
    "text": "test next I use a dgs query executor with which I'm going to start invoking",
    "start": "1004240",
    "end": "1009880"
  },
  {
    "text": "uh the the API to execute a query the first thing I want to set up is my query",
    "start": "1009880",
    "end": "1015160"
  },
  {
    "text": "string itself so let's take the same query string examp example that we just saw in our uh demo earlier I have the",
    "start": "1015160",
    "end": "1023000"
  },
  {
    "text": "reviews query and I specify the show ID the show ID itself is has a string type",
    "start": "1023000",
    "end": "1028918"
  },
  {
    "text": "input so that's why I'm escaping it here and then I select the star rating field",
    "start": "1028919",
    "end": "1035199"
  },
  {
    "text": "now with this query string I should be able to pass it into the query executor execute the query and test the",
    "start": "1035199",
    "end": "1042839"
  },
  {
    "text": "output instead of actually manually writing the query string I can also programmatically construct it using the",
    "start": "1042839",
    "end": "1049600"
  },
  {
    "text": "code generation plugin it generates a nice types saave client API and gives",
    "start": "1049600",
    "end": "1054640"
  },
  {
    "text": "you a builder style API that you can use to construct your query so here I have a reviews graphql query and I pass in a",
    "start": "1054640",
    "end": "1062320"
  },
  {
    "text": "show ID of one and I can also select the fields that I want in my response using",
    "start": "1062320",
    "end": "1068039"
  },
  {
    "text": "the projection route so in this case it's a star rating once I cize this I",
    "start": "1068039",
    "end": "1073400"
  },
  {
    "text": "get the exact same query string that I had passed in earlier now I can go ahead and run this",
    "start": "1073400",
    "end": "1079720"
  },
  {
    "text": "test and I should be able to get back the result and set up some assertions to",
    "start": "1079720",
    "end": "1085480"
  },
  {
    "text": "uh validate those as part of my test now instead of the plain execute query and having to inspect the",
    "start": "1085480",
    "end": "1092480"
  },
  {
    "text": "execution result I can also use a different API available for tests on the",
    "start": "1092480",
    "end": "1097720"
  },
  {
    "text": "query executor so in this case I can use extract and execute and extract Json",
    "start": "1097720",
    "end": "1102880"
  },
  {
    "text": "path as object and specify the path into my results data so here I have data.",
    "start": "1102880",
    "end": "1109200"
  },
  {
    "text": "reviews and this is extracted and given to me as a list of reviews that I can go",
    "start": "1109200",
    "end": "1114320"
  },
  {
    "text": "ahead and inspect and write assertions on so with this I'm able to get back a",
    "start": "1114320",
    "end": "1120240"
  },
  {
    "text": "list of reviews and in my test I can now go ahead and assert that I get for example",
    "start": "1120240",
    "end": "1128360"
  },
  {
    "text": "a certain number of reviews for show ID 1 and in this case I know I'm going to get three reviews because that's how",
    "start": "1128360",
    "end": "1135080"
  },
  {
    "text": "we've set it up in the test in the in the service so this should set up a passing test and",
    "start": "1135080",
    "end": "1142000"
  },
  {
    "text": "that's pretty much it that's how simple it is to write your test itself so we just saw how to easily",
    "start": "1142000",
    "end": "1148880"
  },
  {
    "text": "Implement a graphql service using the domain graph service framework and how to test your data fetcher",
    "start": "1148880",
    "end": "1154760"
  },
  {
    "text": "code initially while our idea behind having the framework was to offer Netflix Integrations out of the box over",
    "start": "1154760",
    "end": "1162200"
  },
  {
    "text": "time we started adding more and more features and it became evident that a bulk of the framework would available",
    "start": "1162200",
    "end": "1169240"
  },
  {
    "text": "could be easily used by the general graph cural Community itself that's when we considered open- sourcing the",
    "start": "1169240",
    "end": "1176120"
  },
  {
    "text": "framework we were able to take advantage of our modular structure to easily uh",
    "start": "1176120",
    "end": "1182240"
  },
  {
    "text": "create open source versions and Netflix uh versions of our starters so here we",
    "start": "1182240",
    "end": "1187840"
  },
  {
    "text": "just had the Netflix starter that had all the Netflix specific modules and the core modules together we were able to",
    "start": "1187840",
    "end": "1194559"
  },
  {
    "text": "separate these out into a separate OSS dgs starter that maintain the core non- Netflix functionality and then we had a",
    "start": "1194559",
    "end": "1202200"
  },
  {
    "text": "Netflix starter that depended on this OSS starter and added on additional features as modules such as metrics",
    "start": "1202200",
    "end": "1209520"
  },
  {
    "text": "tracing and oy and this way we were able to avoid forking our repository and",
    "start": "1209520",
    "end": "1215400"
  },
  {
    "text": "having a nice easily consumable model to maintain both the open source framework and the internal Netflix framework",
    "start": "1215400",
    "end": "1222559"
  },
  {
    "text": "together we open source the framework in early 2021 and since then we've gotten",
    "start": "1222559",
    "end": "1227640"
  },
  {
    "text": "some amazing feedback and contributions and interest and discussions from the community this has really helped evolve",
    "start": "1227640",
    "end": "1234080"
  },
  {
    "text": "the framework and keep it going forward the open-source version of our domain graph service framework does not",
    "start": "1234080",
    "end": "1240679"
  },
  {
    "text": "need a Netflix gateway to work with it it works just as well with the Apollo Gateway or router and it also works very",
    "start": "1240679",
    "end": "1249000"
  },
  {
    "text": "well to just Implement a graphql service with or without Federation to check out our projects you",
    "start": "1249000",
    "end": "1256240"
  },
  {
    "text": "can take a look at GitHub for both the dgs framework and the dgs code generation",
    "start": "1256240",
    "end": "1262280"
  },
  {
    "text": "tool to complement the framework we also built a dgs intellig plug-in today it",
    "start": "1262280",
    "end": "1268720"
  },
  {
    "text": "lets you navigate between schema and the corresponding data Fetchers it also provides some basic code hints and autof",
    "start": "1268720",
    "end": "1274840"
  },
  {
    "text": "fixes and gives you a nice view of all the dgs components in your",
    "start": "1274840",
    "end": "1280039"
  },
  {
    "text": "project we built this on top of the existing JS graphql plugin which is a",
    "start": "1280039",
    "end": "1286000"
  },
  {
    "text": "widely used plugin by the community we were able to leverage a lot of the features provided by the JS graphql",
    "start": "1286000",
    "end": "1292559"
  },
  {
    "text": "plugin for graphql specific feature functionality and simply added dgs uh",
    "start": "1292559",
    "end": "1299320"
  },
  {
    "text": "development features on top of that in our dgs intellig plugin let's take a quick quick look at",
    "start": "1299320",
    "end": "1306000"
  },
  {
    "text": "what this plugin does for you I mentioned navigation between",
    "start": "1306000",
    "end": "1311200"
  },
  {
    "text": "schema and data Fetchers so here you'll see by clicking on the DJs icon you can",
    "start": "1311200",
    "end": "1316880"
  },
  {
    "text": "navigate between the exact schema definition and the corresponding implementation you have in your dgs",
    "start": "1316880",
    "end": "1323840"
  },
  {
    "text": "service I can also take a look at all the components I have defined in my project in the window on the",
    "start": "1323840",
    "end": "1331880"
  },
  {
    "text": "side here I have an example of some code hinting and",
    "start": "1333240",
    "end": "1338960"
  },
  {
    "text": "fixing we made use of the input argument earlier the reviews query takes a show",
    "start": "1338960",
    "end": "1345279"
  },
  {
    "text": "ID as input now let's say I didn't actually have have that in my implementation you can get some hinting",
    "start": "1345279",
    "end": "1351279"
  },
  {
    "text": "and fixes and autof fixes to say you can actually use an input argument in your",
    "start": "1351279",
    "end": "1356559"
  },
  {
    "text": "data fetcher implementation it also gives you some basic detection of types and checking of names so if I have a",
    "start": "1356559",
    "end": "1364320"
  },
  {
    "text": "different name for my argument it will hint and detect that and if I have",
    "start": "1364320",
    "end": "1369360"
  },
  {
    "text": "mismatched types it can also catch bugs in this",
    "start": "1369360",
    "end": "1374440"
  },
  {
    "text": "manner intelligent plug-in development has taken off in a big way at Netflix it",
    "start": "1375080",
    "end": "1380240"
  },
  {
    "text": "gives you access to the abstract syntax tree thereby helping you build inspections in order to highlight issues",
    "start": "1380240",
    "end": "1386840"
  },
  {
    "text": "to automatically refactor your code and enforce best practices it's also been really",
    "start": "1386840",
    "end": "1392640"
  },
  {
    "text": "instrumental in migrating deprecated code to newer style code our intellig",
    "start": "1392640",
    "end": "1398120"
  },
  {
    "text": "plug-in is also open sourced and available on G GitHub if you're interested in checking it",
    "start": "1398120",
    "end": "1403760"
  },
  {
    "text": "out so so far we saw how we could easily implement and test a graphql service the",
    "start": "1403760",
    "end": "1410279"
  },
  {
    "text": "next step is to actually make the service part of the graph we use the schema registry in order to manage dgss",
    "start": "1410279",
    "end": "1417880"
  },
  {
    "text": "and manage your schema as well Reggie is a UI that fronts our",
    "start": "1417880",
    "end": "1423520"
  },
  {
    "text": "schema registry and it's kind of a One-Stop shop for dgs developers and clients",
    "start": "1423520",
    "end": "1431039"
  },
  {
    "text": "alike so with Reggie to begin with I'm able to go ahead and browse all all the",
    "start": "1431159",
    "end": "1438159"
  },
  {
    "text": "dgss that are part of this Federated graph so here's a list for the graph",
    "start": "1438159",
    "end": "1443640"
  },
  {
    "text": "that you chose you can look at all the dgss you can look up a particular dgs in",
    "start": "1443640",
    "end": "1448840"
  },
  {
    "text": "this case I have an example dgs set up so for my dgs I can go ahead and",
    "start": "1448840",
    "end": "1455279"
  },
  {
    "text": "browse the schema the schema also it also keeps track of the revision history for the",
    "start": "1455279",
    "end": "1461840"
  },
  {
    "text": "schema so I can take a look at all the changes that have been made when they were made and diff between the different",
    "start": "1461840",
    "end": "1468080"
  },
  {
    "text": "versions of the schemas I have client stats usage so it tells me which fields are being used by",
    "start": "1468080",
    "end": "1474600"
  },
  {
    "text": "which clients and how often and this is useful in order for in order to enforce",
    "start": "1474600",
    "end": "1479760"
  },
  {
    "text": "some defecation workflows so I can monitor to see when my client stats usage uh goes down to zero before I",
    "start": "1479760",
    "end": "1486600"
  },
  {
    "text": "remove a field from my schema it integrates nicely with your code repository so I can easily navigate",
    "start": "1486600",
    "end": "1493559"
  },
  {
    "text": "there and I also get out of the box a view into my metrics dashboard that's",
    "start": "1493559",
    "end": "1498600"
  },
  {
    "text": "available out of the box with the dgs framework so here I can go and monitor the graphical errors the latencies and",
    "start": "1498600",
    "end": "1505399"
  },
  {
    "text": "what sort of queries my services fulfilling I also have a graphical",
    "start": "1505399",
    "end": "1510840"
  },
  {
    "text": "editor here that lets you run Federated queries against the Gateway itself so I",
    "start": "1510840",
    "end": "1517080"
  },
  {
    "text": "can browse the entire Federated graph and craft queries based on this that uh",
    "start": "1517080",
    "end": "1523159"
  },
  {
    "text": "will be fulfilled by the Gateway directly so we took a look at how you",
    "start": "1523159",
    "end": "1528919"
  },
  {
    "text": "can register your dgs to be part of the Federated graph now once your service is deployed you want to be able to monitor",
    "start": "1528919",
    "end": "1535480"
  },
  {
    "text": "it and so we built a tool for Federated tracing this is our in-house tool that",
    "start": "1535480",
    "end": "1542200"
  },
  {
    "text": "we built but it just uses it's built on top of Zipkin traces here you get a nice Consolidated",
    "start": "1542200",
    "end": "1549080"
  },
  {
    "text": "view of the call graph so given an a query it tells you the fan out pattern",
    "start": "1549080",
    "end": "1554200"
  },
  {
    "text": "for all the services that the Gateway is making and it also gives you Consolidated logs for the services that",
    "start": "1554200",
    "end": "1560320"
  },
  {
    "text": "the query uh was was fulfilled by it also gives you a nice view into the",
    "start": "1560320",
    "end": "1566520"
  },
  {
    "text": "timeline so you can drill down into the times and latencies that it took for executing the query along each step of",
    "start": "1566520",
    "end": "1572960"
  },
  {
    "text": "the way and lastly but most importantly is documentation and training we put in a",
    "start": "1572960",
    "end": "1580559"
  },
  {
    "text": "lot of effort to providing comprehensive documentation to our tooling and framework and we've also invested a lot",
    "start": "1580559",
    "end": "1587159"
  },
  {
    "text": "of effort in putting together training Style videos for boot camps to help developers self-service and onboard",
    "start": "1587159",
    "end": "1594279"
  },
  {
    "text": "quickly this has been key and highly instrumental to the success of adopting Federated graphql at",
    "start": "1594279",
    "end": "1600880"
  },
  {
    "text": "Netflix so 3 years later here we are we have the studio graph it contains almost",
    "start": "1600880",
    "end": "1607279"
  },
  {
    "text": "200 dgss and it continues to grow we have the Enterprise graph primarily used",
    "start": "1607279",
    "end": "1612600"
  },
  {
    "text": "by our internal platform teams and we have the newer consumer graph this",
    "start": "1612600",
    "end": "1617840"
  },
  {
    "text": "Powers the discovery experience uh that you see on the Netflix",
    "start": "1617840",
    "end": "1623039"
  },
  {
    "text": "UI over time we started seeing more patterns newer patterns we had clients",
    "start": "1623039",
    "end": "1628640"
  },
  {
    "text": "wanting to request data from multiple graphs in this case the studio and the Enterprise graph and we also started",
    "start": "1628640",
    "end": "1634440"
  },
  {
    "text": "seeing dgss wanting to be part of more than one graph so it just made a lot of sense to merge these two together into",
    "start": "1634440",
    "end": "1640960"
  },
  {
    "text": "one bigger Federated graph the one graph which today has more than 250",
    "start": "1640960",
    "end": "1646520"
  },
  {
    "text": "dgss this came with a newer set of challenges to scale this graph we had to",
    "start": "1646520",
    "end": "1652200"
  },
  {
    "text": "make sure we were able to collaborate on a much larger schema we were not set up",
    "start": "1652200",
    "end": "1657760"
  },
  {
    "text": "for this just yet schema Discovery was becoming a lot more painful because our tooling",
    "start": "1657760",
    "end": "1663559"
  },
  {
    "text": "couldn't keep up with this large of a graph and schema governance was also",
    "start": "1663559",
    "end": "1669120"
  },
  {
    "text": "becoming challenging this has been largely manual for us at Netflix and it was becoming more and more painful or uh",
    "start": "1669120",
    "end": "1676200"
  },
  {
    "text": "difficult to actually keep keep track of all the types across the Federated graphs and ensuring it all made sense",
    "start": "1676200",
    "end": "1682760"
  },
  {
    "text": "from a from a one graph standpoint we had challenges with newer",
    "start": "1682760",
    "end": "1688240"
  },
  {
    "text": "deprecation workflows and also migrating fields from one service to another uh we",
    "start": "1688240",
    "end": "1693519"
  },
  {
    "text": "needed better workflows to facilitate this and also as I mentioned tooling",
    "start": "1693519",
    "end": "1699120"
  },
  {
    "text": "because our schema is now much larger uh has been impacted with respect to Discovery code Generation all of it uh",
    "start": "1699120",
    "end": "1706799"
  },
  {
    "text": "couldn't hasn't been uh well skilled to suit this larger graph at Netflix we lean heavily on the",
    "start": "1706799",
    "end": "1714360"
  },
  {
    "text": "schema first approach we have backend and front-end developers iterate on the schema to ensure that the API makes",
    "start": "1714360",
    "end": "1721480"
  },
  {
    "text": "sense for that particular business use case we have a schema Review Committee consisting of a group of folks uh who",
    "start": "1721480",
    "end": "1728480"
  },
  {
    "text": "are monitoring these schema changes and and PRS and making sure that it all makes sense from a composed graph",
    "start": "1728480",
    "end": "1735519"
  },
  {
    "text": "perspective and then once that's past the initial review we have the backend teams go ahead and implement the schema",
    "start": "1735519",
    "end": "1742039"
  },
  {
    "text": "and these are staged and tried by by our UI teams and and and then they go ahead",
    "start": "1742039",
    "end": "1747799"
  },
  {
    "text": "and iterate on the implementation uh a few more times before it actually makes it out into",
    "start": "1747799",
    "end": "1755000"
  },
  {
    "text": "production we wanted to automate some of the manual work here and so we introduced more tooling we introduce",
    "start": "1755240",
    "end": "1762440"
  },
  {
    "text": "graph doctor to automatically catch schema errors and enforce some sort of best practices to alleviate the burden",
    "start": "1762440",
    "end": "1769640"
  },
  {
    "text": "on the schema Review Committee themselves and then we also introduced graph Labs which allows developers to",
    "start": "1769640",
    "end": "1776159"
  },
  {
    "text": "Stage their schema changes for trial uh by UI UI teams so this avoided the need",
    "start": "1776159",
    "end": "1782159"
  },
  {
    "text": "to have your service completely deployed in test in order to do a full full endtoend",
    "start": "1782159",
    "end": "1788559"
  },
  {
    "text": "test so this is what uh graph doctor integration looks like today I have a PR",
    "start": "1788559",
    "end": "1794480"
  },
  {
    "text": "proposing some schema changes and GRA with integration with the graph doctor I'm able to automatically get feedback",
    "start": "1794480",
    "end": "1801039"
  },
  {
    "text": "around some best practices and annotations and it catches errors in my schema",
    "start": "1801039",
    "end": "1807519"
  },
  {
    "text": "proposal we wanted to enable local Federated testing with the schema it is pretty easy today to have",
    "start": "1807519",
    "end": "1814919"
  },
  {
    "text": "your dgs and you've made your local schema changes and with the graphical you can test CH uh changes uh with in",
    "start": "1814919",
    "end": "1821760"
  },
  {
    "text": "your schema directly but in a Federated setup that involves the Gateway and other dgs this is much more challenging",
    "start": "1821760",
    "end": "1828600"
  },
  {
    "text": "to do so initially we tried to set up a a mechanism in which developers are able",
    "start": "1828600",
    "end": "1835399"
  },
  {
    "text": "to run the local Gateway on their host as well initially they had to clone the",
    "start": "1835399",
    "end": "1840559"
  },
  {
    "text": "Gateway and run the Gateway and also run their local dgs but then we this was",
    "start": "1840559",
    "end": "1846039"
  },
  {
    "text": "proving to be challenging and so we provided a uh an image such that they could run this image in a Docker",
    "start": "1846039",
    "end": "1852760"
  },
  {
    "text": "container but this was still fairly heavyweight you had to run the Gateway and your local dgs and run a set of",
    "start": "1852760",
    "end": "1859399"
  },
  {
    "text": "commands to indicate to the dgs that it needs to talk and communicate with your local dgs it was all fairly cumbersome",
    "start": "1859399",
    "end": "1866960"
  },
  {
    "text": "to set up for the developer and also really hard to troubleshoot when the setup didn't quite work",
    "start": "1866960",
    "end": "1872799"
  },
  {
    "text": "right so we improved this with graph Labs graph Labs allowed us to set up a",
    "start": "1872799",
    "end": "1878559"
  },
  {
    "text": "nice sandbox environment by eliminating the need to run the Gateway locally so",
    "start": "1878559",
    "end": "1883799"
  },
  {
    "text": "here in this new setup the Gateway is actually running in the cloud and with a setup command we are able to",
    "start": "1883799",
    "end": "1890519"
  },
  {
    "text": "indicate to the Gateway that it needs to talk to the dgs running locally on your",
    "start": "1890519",
    "end": "1896080"
  },
  {
    "text": "host for all other fields it still reaches out to other dgss that have registered with it uh and deployed in",
    "start": "1896080",
    "end": "1902559"
  },
  {
    "text": "test so this greatly simplified the workflow of testing Federated queries",
    "start": "1902559",
    "end": "1907720"
  },
  {
    "text": "with your local changes on your dgs and it also greatly uh uh worked as",
    "start": "1907720",
    "end": "1913360"
  },
  {
    "text": "a tool to help understand how Federation works and to end as well for developers unfamiliar with",
    "start": "1913360",
    "end": "1920799"
  },
  {
    "text": "it so I mentioned that we had challenges with Discovery as well in the graph and",
    "start": "1921519",
    "end": "1926760"
  },
  {
    "text": "our tooling and so working with this entire graph became quite cumbersome and",
    "start": "1926760",
    "end": "1933240"
  },
  {
    "text": "so we introduced the co concept of graph lenses which basically gives you a a",
    "start": "1933240",
    "end": "1938320"
  },
  {
    "text": "subview into the graph so with predefine lenses you are now able to browse and",
    "start": "1938320",
    "end": "1944039"
  },
  {
    "text": "discover and and just work with a sub set of the types that are part of the entire",
    "start": "1944039",
    "end": "1950600"
  },
  {
    "text": "graph so with the introduction of lenses we updated our UI schema registry UI",
    "start": "1950600",
    "end": "1956559"
  },
  {
    "text": "Reggie to support that and this is what it looks like today so we have",
    "start": "1956559",
    "end": "1961840"
  },
  {
    "text": "predefined lenses that gives you subviews into the entire compos graph so",
    "start": "1961840",
    "end": "1967399"
  },
  {
    "text": "here I'm selecting my Spotlight lens and with the spotlight lens selected instead",
    "start": "1967399",
    "end": "1972600"
  },
  {
    "text": "of being able to view the entire graph I'm able to select from just a subset of",
    "start": "1972600",
    "end": "1978120"
  },
  {
    "text": "the queries that are supported by this lens so what's ahead for us so far I",
    "start": "1978120",
    "end": "1984519"
  },
  {
    "text": "described the graphql platform consisting of the dgs framework and several tools we built in order to help",
    "start": "1984519",
    "end": "1990639"
  },
  {
    "text": "with the schema workflows and generally working with the Federated graph next we are helping build out the",
    "start": "1990639",
    "end": "1997039"
  },
  {
    "text": "consumer graph this is the API that powers the discovery experience you see on the",
    "start": "1997039",
    "end": "2002840"
  },
  {
    "text": "Netflix UI today we are in the process of migrating away from the older architecture to",
    "start": "2002840",
    "end": "2008880"
  },
  {
    "text": "adopt Federated graphql for this the consumer graph is unique in that it",
    "start": "2008880",
    "end": "2014440"
  },
  {
    "text": "comes with new requirements it deals with very high scale so we are in the process of identifying performance",
    "start": "2014440",
    "end": "2021080"
  },
  {
    "text": "bottlenecks and improving the framework and tooling to keep up with this we're also investing heavily in improving",
    "start": "2021080",
    "end": "2027320"
  },
  {
    "text": "observability so that we can monitor for these Services more effectively and finally this graph comes",
    "start": "2027320",
    "end": "2034360"
  },
  {
    "text": "with complex schema design requirements and so we're also trying to improve our schema workflow tooling to assist with",
    "start": "2034360",
    "end": "2041080"
  },
  {
    "text": "this effort we continue to learn as we go and hope to share what we've learned in the near future I hope you'll stay",
    "start": "2041080",
    "end": "2048079"
  },
  {
    "text": "tuned for the next season that's all I had for folks today thank you very",
    "start": "2048079",
    "end": "2054878"
  },
  {
    "text": "[Music]",
    "start": "2057570",
    "end": "2063869"
  },
  {
    "text": "much",
    "start": "2064200",
    "end": "2067200"
  }
]