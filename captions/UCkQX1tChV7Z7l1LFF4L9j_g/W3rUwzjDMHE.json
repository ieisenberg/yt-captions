[
  {
    "start": "0",
    "end": "85000"
  },
  {
    "text": "hello hello hi my name is Jay how are you",
    "start": "640",
    "end": "6279"
  },
  {
    "text": "everyone cool um so this is going to be a very quick talk uh hopefully very",
    "start": "6279",
    "end": "11480"
  },
  {
    "text": "quick about webg and this is really um a",
    "start": "11480",
    "end": "16600"
  },
  {
    "text": "very deep dive so I want to discuss things more towards the hardware level rather than the JavaScript level however",
    "start": "16600",
    "end": "23320"
  },
  {
    "text": "being a JavaScript conference we will do some JavaScript so let's begin um so",
    "start": "23320",
    "end": "30320"
  },
  {
    "text": "this is me uh my name is Jay again uh that's my Twitter you can tweet about",
    "start": "30320",
    "end": "35800"
  },
  {
    "text": "this do whatever you want with it um I work for pubnub as a core engineer so I",
    "start": "35800",
    "end": "41719"
  },
  {
    "text": "do server level stuff uh python little bit of C I contribute to melon JS which",
    "start": "41719",
    "end": "47600"
  },
  {
    "text": "is a game engine written in JavaScript it uses webgl very recently which I uh I",
    "start": "47600",
    "end": "53879"
  },
  {
    "text": "contributed over um last winter I believe um",
    "start": "53879",
    "end": "60519"
  },
  {
    "text": "and what I want to really start with here is a little bit of the history of",
    "start": "60519",
    "end": "65960"
  },
  {
    "text": "gpus and uh rendering hardware and we'll show some fun stuff with that and then",
    "start": "65960",
    "end": "71439"
  },
  {
    "text": "go through and get into what webgl actually is um web ja proper rather so",
    "start": "71439",
    "end": "78640"
  },
  {
    "text": "on the last slide you noticed I said console hacking this is Mario 64 uh",
    "start": "78640",
    "end": "84400"
  },
  {
    "text": "Nintendo 64 this is a hack that I made and it's uh has nothing to do with webg",
    "start": "84400",
    "end": "91280"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "except you know this is the kind of lowl stuff that I get into this for example was written in",
    "start": "91280",
    "end": "98000"
  },
  {
    "text": "myips assembler language and that's what it looks like uh you can go through it",
    "start": "98000",
    "end": "103600"
  },
  {
    "start": "100000",
    "end": "100000"
  },
  {
    "text": "if you want um very simple the comments just read them out loud they're awesome um so",
    "start": "103600",
    "end": "112200"
  },
  {
    "text": "what it really does is changes the liquid to a solid by checking your",
    "start": "112200",
    "end": "118479"
  },
  {
    "text": "position once your feet Touch the Water uh moves the level the ground level up",
    "start": "118479",
    "end": "123759"
  },
  {
    "text": "to where your feet are that's it um very interesting and uh you can see",
    "start": "123759",
    "end": "131160"
  },
  {
    "text": "even more of that in some old stuff like say the Atari",
    "start": "131160",
    "end": "136640"
  },
  {
    "text": "2600 uh what I mean by that is to really program anything on this",
    "start": "136640",
    "end": "143519"
  },
  {
    "text": "old Hardware especially when uh you get into rendering stuff on a screen you're",
    "start": "143519",
    "end": "150120"
  },
  {
    "text": "really messing with the hardware uh so this thing has a tiny CPU",
    "start": "150120",
    "end": "155680"
  },
  {
    "text": "uh it's about one megahertz uh not very many pixels can be displayed 128 colors roughly on screen",
    "start": "155680",
    "end": "164800"
  },
  {
    "text": "simultaneously it has 128 bytes of ram that includes all of your stack space",
    "start": "164800",
    "end": "171120"
  },
  {
    "text": "and game state which is roughly enough for a couple of counters and a ball",
    "start": "171120",
    "end": "177920"
  },
  {
    "text": "position um interest interestingly enough no video memory so what the heck how did they",
    "start": "177920",
    "end": "185959"
  },
  {
    "text": "actually do anything with this at all um it turns out that there's a a really",
    "start": "185959",
    "end": "192440"
  },
  {
    "text": "great presentation at a GDC a couple of years ago by David crane who was the",
    "start": "192440",
    "end": "198480"
  },
  {
    "text": "author of the original Pitfall and I don't know if you're familiar with it but do check this out",
    "start": "198480",
    "end": "205640"
  },
  {
    "text": "and I'll tweet out the slides later so you can check out the video um it goes into a lot of depth about",
    "start": "205640",
    "end": "212560"
  },
  {
    "text": "how really with this Hardware you have to think in terms of Hardware rather",
    "start": "212560",
    "end": "218439"
  },
  {
    "text": "than in terms of software and that's kind of what I want to bring out in this presentation about webgl is it's the",
    "start": "218439",
    "end": "224879"
  },
  {
    "text": "same idea uh it's not that we're really",
    "start": "224879",
    "end": "230360"
  },
  {
    "text": "writing in webgl we're not really writing code for 3D rendering so much as",
    "start": "230360",
    "end": "236079"
  },
  {
    "text": "we are writing code that pokes a bunch of bits into offers and then asks the",
    "start": "236079",
    "end": "241159"
  },
  {
    "text": "GPU to do funny things with with custom code so this is really awesome and I do",
    "start": "241159",
    "end": "248159"
  },
  {
    "text": "recommend checking it out now going forward a few years uh one",
    "start": "248159",
    "end": "254439"
  },
  {
    "text": "of the very first arcade games that contained 3D rendering Hardware was the",
    "start": "254439",
    "end": "259680"
  },
  {
    "text": "Namco system 21 released in 1988 it has a little bit faster CPU it",
    "start": "259680",
    "end": "265720"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "has five dsps those are digital signal processors which which do all of the 3D",
    "start": "265720",
    "end": "271400"
  },
  {
    "text": "mathematics it also has 12 custom integrated circuits which are all of the",
    "start": "271400",
    "end": "277160"
  },
  {
    "text": "components necessary for the rendering so this thing has roughly 17",
    "start": "277160",
    "end": "283080"
  },
  {
    "text": "gpus um it has a little bit of memory uh lots of video RAM it needs that for",
    "start": "283080",
    "end": "290160"
  },
  {
    "text": "drawing those uh garage shaded 3D artifacts and on the farther range in",
    "start": "290160",
    "end": "299039"
  },
  {
    "text": "the mid 90s Nintendo came out with the Nintendo 64 and we saw that screenshot",
    "start": "299039",
    "end": "306120"
  },
  {
    "text": "earlier this thing has a 93 MHz CPU it's",
    "start": "306120",
    "end": "311280"
  },
  {
    "text": "a MIP CPU it also has a GPU that is roughly 62 megaherz also a myip CPU and",
    "start": "311280",
    "end": "318919"
  },
  {
    "text": "this is very important because it's programmable this is one of the very first uh instances",
    "start": "318919",
    "end": "326960"
  },
  {
    "text": "in uh in gaming cons at least gaming console Hardware",
    "start": "326960",
    "end": "333240"
  },
  {
    "text": "where the GPU is programmable in its contemporaries like",
    "start": "333240",
    "end": "338319"
  },
  {
    "text": "with PlayStation and so forth they gave you really a piece of Hardware a a",
    "start": "338319",
    "end": "345280"
  },
  {
    "text": "processor that really designed for doing one thing and that's like drawing triangles or or whatever in the case of",
    "start": "345280",
    "end": "351199"
  },
  {
    "text": "Nintendo though they had a a program that you could load onto this GPU and",
    "start": "351199",
    "end": "357800"
  },
  {
    "text": "have it run and then it just uses message passing between your main CPU and your GPU and you can do all kinds of",
    "start": "357800",
    "end": "364000"
  },
  {
    "text": "crazy stuff with it unfortunately very few companies ever did so they just use the the standard stuff that SGI",
    "start": "364000",
    "end": "372800"
  },
  {
    "text": "shipped and this is kind of what it looked like at least for the PlayStation",
    "start": "372800",
    "end": "378199"
  },
  {
    "start": "374000",
    "end": "374000"
  },
  {
    "text": "era of 3D rendering uh the top portion is the CPU the bottom portion and green is the GPU",
    "start": "378199",
    "end": "385639"
  },
  {
    "text": "so if your game program wants to draw something uh Draw Something pretty it might say you know I want to draw a",
    "start": "385639",
    "end": "392160"
  },
  {
    "text": "rectangle so it it builds up this packet and then it puts this on a que and the",
    "start": "392160",
    "end": "398759"
  },
  {
    "text": "GPU is constantly consuming from this queue and it says oh well I've got a rectangle this one's going to be blue",
    "start": "398759",
    "end": "404960"
  },
  {
    "text": "then it passes that information onto a rasterizer the rasterizer is part of the fixed functionality",
    "start": "404960",
    "end": "411160"
  },
  {
    "text": "pipeline so in this case it has a rectangle goes to the rectangle rasterizer we also do triangles all",
    "start": "411160",
    "end": "418440"
  },
  {
    "text": "kinds of different Primitives um some examples might be",
    "start": "418440",
    "end": "424599"
  },
  {
    "text": "say uh textured or gorod shaded uh different forms of lighting so on",
    "start": "424599",
    "end": "434120"
  },
  {
    "text": "and uh so things one interesting thing to note about this is those little boxes",
    "start": "434120",
    "end": "440879"
  },
  {
    "text": "in red those ruers that's where this programmable part of the GPU comes in so on N64 you",
    "start": "440879",
    "end": "447879"
  },
  {
    "text": "could change those you do things like uh do special lighting or whatever you",
    "start": "447879",
    "end": "453440"
  },
  {
    "text": "needed to to do and this is really what kind of leads into the more",
    "start": "453440",
    "end": "458639"
  },
  {
    "text": "modern uh more modern GPU and how it actually works uh in this case how the pipeline",
    "start": "458639",
    "end": "466039"
  },
  {
    "text": "is or uh simplified anyway uh closer to it when your CPU wants to draw something",
    "start": "466039",
    "end": "473680"
  },
  {
    "text": "it creates a big binary blob it's completely opaque arbitrary doesn't",
    "start": "473680",
    "end": "479000"
  },
  {
    "text": "really mean anything to the GPU you put it into a buffer you create a bunch of",
    "start": "479000",
    "end": "485360"
  },
  {
    "text": "buffer slots in memory you shove some data in there and then you ask the GPU",
    "start": "485360",
    "end": "491280"
  },
  {
    "text": "when you're ready to start drawing using these buffers and what happens",
    "start": "491280",
    "end": "498440"
  },
  {
    "text": "is this blob is passed on to the vertex Shader which is part of the this",
    "start": "498440",
    "end": "503800"
  },
  {
    "text": "programmable Pipeline and the vertex Shader will then pass information onto the fragment Shader",
    "start": "503800",
    "end": "510560"
  },
  {
    "text": "and we'll see some some more stuff about that in a bit um now getting into actual",
    "start": "510560",
    "end": "517039"
  },
  {
    "start": "513000",
    "end": "513000"
  },
  {
    "text": "webgl stuff these are some really good resources that you can use to learn",
    "start": "517039",
    "end": "522719"
  },
  {
    "text": "about it uh the top there webgl fundamentals is awesome it was written by uh a guy whose first name is Greg he",
    "start": "522719",
    "end": "531399"
  },
  {
    "text": "was a a programmer on the Chrome team uh really cool guy and what he wants to do",
    "start": "531399",
    "end": "539519"
  },
  {
    "text": "with this website is build some fresh tutorials and you know real information that isn't just",
    "start": "539519",
    "end": "547399"
  },
  {
    "text": "rehashed from old stuff that came out of like you know opengl 1.0 2.0",
    "start": "547399",
    "end": "554000"
  },
  {
    "text": "tutorials and uh the msdn webgl reference is really awesome so if there",
    "start": "554000",
    "end": "559680"
  },
  {
    "text": "are any Microsoft guys here props to that this is actually the best reference that I've been able to find for the",
    "start": "559680",
    "end": "566440"
  },
  {
    "text": "webgl API itself uh Kronos is the the group that oversees the webgl",
    "start": "566440",
    "end": "572600"
  },
  {
    "text": "specification uh they have a Wiki and there's some awesome presentations from",
    "start": "572600",
    "end": "578200"
  },
  {
    "text": "Google IO that talk a little bit more in detail about webgl itself and how you uh",
    "start": "578200",
    "end": "584839"
  },
  {
    "text": "build the buffers modify uh attributes and so forth uh so do watch",
    "start": "584839",
    "end": "591240"
  },
  {
    "text": "those and uh read the specifications if you're really desperate they contain actual information but they're uh very",
    "start": "591240",
    "end": "599120"
  },
  {
    "text": "Den it's hard to read and avoid at all cost those retrofitted open Gil stuff u",
    "start": "599120",
    "end": "605040"
  },
  {
    "text": "a lot of that information is just not portable uh so the very first steps",
    "start": "605040",
    "end": "612640"
  },
  {
    "start": "608000",
    "end": "608000"
  },
  {
    "text": "first thing we can do uh to get our webgo project going we have some Dom",
    "start": "612640",
    "end": "617839"
  },
  {
    "text": "elements we start out with a canvas and we have a script this is their JavaScript in my example here I'm using",
    "start": "617839",
    "end": "624839"
  },
  {
    "text": "jQuery just because it makes it easy to select that screen element and get the",
    "start": "624839",
    "end": "629880"
  },
  {
    "text": "webgl [Music] context there's also a little helper",
    "start": "629880",
    "end": "635600"
  },
  {
    "text": "function here which I use just for uh reusability really what it does is it",
    "start": "635600",
    "end": "641600"
  },
  {
    "text": "creates a Shader object then the Shader source code is uploaded into that object",
    "start": "641600",
    "end": "648440"
  },
  {
    "text": "or passed into that object finally it's compiled and then this compiled object",
    "start": "648440",
    "end": "654639"
  },
  {
    "text": "is returned the next thing to do is",
    "start": "654639",
    "end": "660560"
  },
  {
    "start": "657000",
    "end": "657000"
  },
  {
    "text": "actually take your Shader source code and you'll notice this is these are just",
    "start": "660560",
    "end": "665800"
  },
  {
    "text": "strings uh they can be anything really Source your source code from anything for example a a text file on a server",
    "start": "665800",
    "end": "674920"
  },
  {
    "text": "you just loaded in with xhr uh I've also seen in some tutorials they use a script",
    "start": "674920",
    "end": "680560"
  },
  {
    "text": "tag for this purpose um it doesn't really matter we're just using a string",
    "start": "680560",
    "end": "686680"
  },
  {
    "text": "here and some funny about these shaders is they're really the bare minimum that",
    "start": "686839",
    "end": "693279"
  },
  {
    "text": "you need it it looks it's a c like language and it has a couple of global",
    "start": "693279",
    "end": "700040"
  },
  {
    "text": "variables these glcore things uh these are Global variables and we'll talk about",
    "start": "700040",
    "end": "705760"
  },
  {
    "text": "that in a bit um so here we go we create",
    "start": "705760",
    "end": "711560"
  },
  {
    "text": "a program object we attach our our Shader source code that we get",
    "start": "711560",
    "end": "718880"
  },
  {
    "text": "from our our get Shader function attach that to the to the program attach the",
    "start": "718880",
    "end": "725600"
  },
  {
    "text": "second one to the program and then we link it and again this is like compiler",
    "start": "725600",
    "end": "731360"
  },
  {
    "text": "stuff so we compile them compile link and then we have this used program and",
    "start": "731360",
    "end": "736720"
  },
  {
    "text": "the used program is very interesting because it means that you can actually have multiple shaders running or rather",
    "start": "736720",
    "end": "744519"
  },
  {
    "text": "multiple shaders loaded simultaneously and then just switch between them when you need to do different things so you",
    "start": "744519",
    "end": "750040"
  },
  {
    "text": "might have one that's a quad Shader and it draws textured triangles textured",
    "start": "750040",
    "end": "755800"
  },
  {
    "text": "whatever and then you might want to switch over to a line Shader which does",
    "start": "755800",
    "end": "761959"
  },
  {
    "text": "uh like wireframe stuff rather uh another example would be uh",
    "start": "761959",
    "end": "767399"
  },
  {
    "text": "deferred lighting uh different tricks that you can pull off but you just use different programs and switch between",
    "start": "767399",
    "end": "773600"
  },
  {
    "text": "them per frame you don't want to do it too often but uh it's available for flexibility",
    "start": "773600",
    "end": "780680"
  },
  {
    "text": "and before we go on with any more code uh this is where the",
    "start": "782519",
    "end": "788519"
  },
  {
    "text": "shaders will be kind of demystified there are two parts uh that",
    "start": "788519",
    "end": "794079"
  },
  {
    "text": "are programmable the vertex Shader and the fragment Shader and you can read about uh kind of",
    "start": "794079",
    "end": "800680"
  },
  {
    "text": "their purpose here uh the one in the middle is the rasterizer and this is",
    "start": "800680",
    "end": "805760"
  },
  {
    "text": "part of the fixed functionality pipeline this is something that you don't don't have to code it's just built into webgl",
    "start": "805760",
    "end": "812959"
  },
  {
    "text": "and it does stuff for you in this case the rasterizer will take information that it gets from the vertex Shader the",
    "start": "812959",
    "end": "820079"
  },
  {
    "text": "code that you write and does some interpolation on it and then passes that",
    "start": "820079",
    "end": "826199"
  },
  {
    "text": "information onto the fragment Shader which is more code that you write so you",
    "start": "826199",
    "end": "831759"
  },
  {
    "text": "can use these two programmable things to do some uh well to do some",
    "start": "831759",
    "end": "839240"
  },
  {
    "text": "very basic things like the textured quads so on and so forth but you can",
    "start": "839240",
    "end": "845279"
  },
  {
    "text": "also do very interesting effects which uh I didn't have time to write but do",
    "start": "845279",
    "end": "851680"
  },
  {
    "text": "some crazy Transitions and wobbly stuff and it's just fun",
    "start": "851680",
    "end": "858440"
  },
  {
    "text": "so the uh things that you pass from JavaScript into these shaders are things",
    "start": "858440",
    "end": "866600"
  },
  {
    "text": "like attributes and uniform VAR Ables and so forth so just what is a uniform",
    "start": "866600",
    "end": "874560"
  },
  {
    "text": "variable um uniform variable is a part of the GL Shader language which is",
    "start": "874560",
    "end": "882399"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "called a data storage type quantifier and there are three of these",
    "start": "882399",
    "end": "887800"
  },
  {
    "text": "attribute uniform and varying in this diagram I have on the the left side",
    "start": "887800",
    "end": "894399"
  },
  {
    "text": "JavaScript you're able to provide attributes and uniform variables directly to your shaders in the case of",
    "start": "894399",
    "end": "901680"
  },
  {
    "text": "uniform you can pass uniforms directly to both shaders simultaneously and attributes only to",
    "start": "901680",
    "end": "909120"
  },
  {
    "text": "the vertex Shader the difference between these two",
    "start": "909120",
    "end": "915120"
  },
  {
    "text": "things is kind of subtle uh especially for beginners the attribute itself is",
    "start": "915120",
    "end": "922720"
  },
  {
    "text": "technically treated as an array within webgl which means that you would",
    "start": "922720",
    "end": "929319"
  },
  {
    "text": "normally want to pass things like your geometry using using attributes you",
    "start": "929319",
    "end": "934839"
  },
  {
    "text": "would want to pass things like uh the the blending color of a specific triangle things of that nature a uniform",
    "start": "934839",
    "end": "943440"
  },
  {
    "text": "on the other hand is something that is very static once you set a uniform",
    "start": "943440",
    "end": "949560"
  },
  {
    "text": "variable and ask webgl to draw your your attribute array uh that uniform can't",
    "start": "949560",
    "end": "958319"
  },
  {
    "text": "change so it's really static and this is good for things like Global blend colors",
    "start": "958319",
    "end": "964440"
  },
  {
    "text": "and ambient lighting uh a projection Matrix if you're doing",
    "start": "964440",
    "end": "969839"
  },
  {
    "text": "3D and also on the left side we have some actual glsl code uh this is just",
    "start": "970199",
    "end": "978759"
  },
  {
    "text": "variable declarations but it also has some data type information here the",
    "start": "978759",
    "end": "984480"
  },
  {
    "text": "attributes for example have VC four which are four element vectors in the",
    "start": "984480",
    "end": "989600"
  },
  {
    "text": "case of the color that's RGB and Alpha those four elements in the case of",
    "start": "989600",
    "end": "994839"
  },
  {
    "text": "position it's XYZ and a w the W is a scaler this is called homogeneous",
    "start": "994839",
    "end": "1000680"
  },
  {
    "text": "coordinates um I know I said I wouldn't get into any mathematics uh this is about as mathy as it",
    "start": "1000680",
    "end": "1007759"
  },
  {
    "text": "gets uh really I just want to explain what the hardware is doing so you can",
    "start": "1007759",
    "end": "1014880"
  },
  {
    "text": "poke at it and do funny things um what else can I talk about",
    "start": "1014880",
    "end": "1020160"
  },
  {
    "text": "here the uh uh the texture coordinate is a is a",
    "start": "1020160",
    "end": "1026319"
  },
  {
    "text": "two element Vector uh so on so",
    "start": "1026319",
    "end": "1030760"
  },
  {
    "start": "1030000",
    "end": "1030000"
  },
  {
    "text": "forth and these are the glore global variables that you saw",
    "start": "1032360",
    "end": "1039918"
  },
  {
    "text": "earlier in the minimal vertex and fragment shaders so the Shader language",
    "start": "1039919",
    "end": "1045720"
  },
  {
    "text": "itself specifies these variables and it's kind of Weir they didn't use something like I don't know a return",
    "start": "1045720",
    "end": "1051760"
  },
  {
    "text": "value from the main function or inputs to the main function whatever I don't",
    "start": "1051760",
    "end": "1057760"
  },
  {
    "text": "know but you get four different outputs that you can you can write to so there's",
    "start": "1057760",
    "end": "1063679"
  },
  {
    "text": "a position output from your your uh vertex Shader which allows you to do things",
    "start": "1063679",
    "end": "1070919"
  },
  {
    "text": "like input a Vertex from JavaScript do something with it maybe you want to uh cause it to wobble so a",
    "start": "1070919",
    "end": "1079159"
  },
  {
    "text": "tree or grass wobbling in the wind something of that sort and then you can",
    "start": "1079159",
    "end": "1084240"
  },
  {
    "text": "set the value of that position which then just gets updated by the vertex Shader and the vertex Shader will run",
    "start": "1084240",
    "end": "1092320"
  },
  {
    "text": "once per vertex element so if you have a triangle that runs three times one for",
    "start": "1092320",
    "end": "1097679"
  },
  {
    "text": "each point um let's see what else the frag",
    "start": "1097679",
    "end": "1103280"
  },
  {
    "text": "color is for the fragment Shader and that just specifies the color that you",
    "start": "1103280",
    "end": "1108919"
  },
  {
    "text": "want to draw to the frame buffer eventually the frag data is for multiple",
    "start": "1108919",
    "end": "1116600"
  },
  {
    "text": "render targets which you can use for some really crazy uh lighting effects",
    "start": "1116600",
    "end": "1122840"
  },
  {
    "text": "and so forth uh it's part of the fixed functionality pipeline I haven't played",
    "start": "1122840",
    "end": "1127919"
  },
  {
    "text": "with it too much but it's there it's available GL Point size and point cord",
    "start": "1127919",
    "end": "1134080"
  },
  {
    "text": "are inputs which allow you to uh sorry the point cord is an input um the point",
    "start": "1134080",
    "end": "1142799"
  },
  {
    "text": "size is an output so you would output a a size of a point so you can make a a",
    "start": "1142799",
    "end": "1147880"
  },
  {
    "text": "point that's like this big or really tiny and the point chord tells you where",
    "start": "1147880",
    "end": "1154320"
  },
  {
    "text": "in the rasterizer that actually is drawing so where it's drawing your point you can use this for funny uh for some",
    "start": "1154320",
    "end": "1161679"
  },
  {
    "text": "interesting things like say radial gradients right um",
    "start": "1161679",
    "end": "1169990"
  },
  {
    "text": "[Music] this is going back to some JavaScript",
    "start": "1169990",
    "end": "1176960"
  },
  {
    "text": "and this is where webg itself gets kind of mindboggling because",
    "start": "1176960",
    "end": "1184440"
  },
  {
    "text": "it's it's really a very simple API when you get down to it however it's like",
    "start": "1184440",
    "end": "1191520"
  },
  {
    "text": "nothing that resembles other web Technologies whatsoever uh really",
    "start": "1191520",
    "end": "1198080"
  },
  {
    "text": "because it comes out of the openg world so you have to do things like bind",
    "start": "1198080",
    "end": "1206080"
  },
  {
    "start": "1203000",
    "end": "1203000"
  },
  {
    "text": "your data to the GPU so you can perform IO operations on it totally weird this",
    "start": "1206080",
    "end": "1212799"
  },
  {
    "text": "is Javascript shouldn't do this but this is what we have in the first case we",
    "start": "1212799",
    "end": "1218159"
  },
  {
    "text": "have an attribute which again is it's it it's an array",
    "start": "1218159",
    "end": "1224559"
  },
  {
    "text": "right so what we can do is specify how webgl",
    "start": "1224559",
    "end": "1230240"
  },
  {
    "text": "is supposed to chop up this data this big binary blob and make sense of it as",
    "start": "1230240",
    "end": "1236039"
  },
  {
    "text": "an array uh we have this a position here on",
    "start": "1236039",
    "end": "1242520"
  },
  {
    "text": "the right the string is the variable name from our our vertex Shader and you",
    "start": "1242520",
    "end": "1249480"
  },
  {
    "text": "can do some uh some more interesting things with your JavaScript for example parsing",
    "start": "1249480",
    "end": "1255880"
  },
  {
    "text": "your source code to pull out all of the variable names and so forth to do this automatically but for a simple demo this",
    "start": "1255880",
    "end": "1264280"
  },
  {
    "text": "is this is okay so we need a uh we need to get the",
    "start": "1264280",
    "end": "1269880"
  },
  {
    "text": "location according to the GPU of where that variable exists somewhere in memory",
    "start": "1269880",
    "end": "1276520"
  },
  {
    "text": "so that's get attrib location second thing is we can enable it and I'm not",
    "start": "1276520",
    "end": "1282000"
  },
  {
    "text": "entirely certain of the purpose behind this but you can enable and disable these attribute arrays as you see fit uh",
    "start": "1282000",
    "end": "1290760"
  },
  {
    "text": "it's disabled by default so do enable it if you want to use it and the third line",
    "start": "1290760",
    "end": "1297840"
  },
  {
    "text": "there will do the actual chopping up of this binary blob into usable array",
    "start": "1297840",
    "end": "1304559"
  },
  {
    "text": "elements in this case the uh the arguments to this function",
    "start": "1304559",
    "end": "1310880"
  },
  {
    "text": "are first the bound variable second the component size in this case the a position is a",
    "start": "1310880",
    "end": "1318240"
  },
  {
    "text": "for or VC four so it's it has a component size four four components the",
    "start": "1318240",
    "end": "1324080"
  },
  {
    "text": "type is either going to be float a floating Point number or fixed which is a fix Point number and the next is",
    "start": "1324080",
    "end": "1333080"
  },
  {
    "text": "whether or not this data is normalized I've never had a use for normalized data",
    "start": "1333080",
    "end": "1338760"
  },
  {
    "text": "in my attribute array so I don't use it the next thing is the stride or the",
    "start": "1338760",
    "end": "1345799"
  },
  {
    "text": "size of each element in bytes in in the case of this VC 4 it's 32 bytes that is",
    "start": "1345799",
    "end": "1352159"
  },
  {
    "text": "four elements Time 4 bytes and finally the bite offset the",
    "start": "1352159",
    "end": "1357880"
  },
  {
    "text": "bite offset is allows you to combine multiple variables into the into a",
    "start": "1357880",
    "end": "1364480"
  },
  {
    "text": "single array so you might have for example this position attribute you might also",
    "start": "1364480",
    "end": "1371840"
  },
  {
    "text": "have a blend color following it so in that case you would have an offset of",
    "start": "1371840",
    "end": "1377120"
  },
  {
    "text": "zero for the position and an offset of 32 which is just following the uh the",
    "start": "1377120",
    "end": "1384000"
  },
  {
    "text": "position for that blend color and you can do uh some additional",
    "start": "1384000",
    "end": "1391720"
  },
  {
    "text": "things here uh it's probably a little bit easier with some graphics but uh I",
    "start": "1391720",
    "end": "1396760"
  },
  {
    "text": "will just go through this uh as quick as quick as I can because it's kind of",
    "start": "1396760",
    "end": "1402000"
  },
  {
    "text": "boring the uh the uniforms are very similar you have to get the location",
    "start": "1402000",
    "end": "1409600"
  },
  {
    "text": "uh but you don't have to specify anything else about it it's already a known uh a known data type so you can",
    "start": "1409600",
    "end": "1417799"
  },
  {
    "text": "simply populate it directly and we can do that by creating a float 32 array and",
    "start": "1417799",
    "end": "1424840"
  },
  {
    "text": "just fill out the information whatever you want in your projection Matrix I I just have commented out there uh we",
    "start": "1424840",
    "end": "1432840"
  },
  {
    "text": "don't care what these values are at the moment and that last line is is how to",
    "start": "1432840",
    "end": "1439440"
  },
  {
    "text": "actually populate this uniform there are a whole bunch of different functions",
    "start": "1439440",
    "end": "1444520"
  },
  {
    "text": "that you can use for webgl they all start with uniform so there's there's one for a matrix 4 there's one for",
    "start": "1444520",
    "end": "1450960"
  },
  {
    "text": "Matrix 3 Matrix 2 Vector 4 Vector 3 all these different functions so it it's not a an awesome",
    "start": "1450960",
    "end": "1459960"
  },
  {
    "text": "thing uh to have to learn but uh there are multiple functions for uh one for",
    "start": "1459960",
    "end": "1465120"
  },
  {
    "text": "each data type and the next thing we can do is populate",
    "start": "1465120",
    "end": "1474039"
  },
  {
    "start": "1468000",
    "end": "1468000"
  },
  {
    "text": "the attribute buffer that we created or populate the attribute with a buffer we",
    "start": "1474039",
    "end": "1480120"
  },
  {
    "text": "want to create the buffer and bind the buffer to this array buffer Index this",
    "start": "1480120",
    "end": "1487720"
  },
  {
    "text": "is a it's an index to a register within webgl so rather",
    "start": "1487720",
    "end": "1493840"
  },
  {
    "text": "than passing around full objects to webgl what you're really doing is",
    "start": "1493840",
    "end": "1499600"
  },
  {
    "text": "passing around these indexes it's kind of like a pointer uh it's smaller it's",
    "start": "1499600",
    "end": "1504640"
  },
  {
    "text": "more Compact and uh really yeah it's",
    "start": "1504640",
    "end": "1510120"
  },
  {
    "text": "just for performance reasons I I imagine uh bind the buffer to this",
    "start": "1510120",
    "end": "1516240"
  },
  {
    "text": "register and then actually fill out the buffer so the buffer data method",
    "start": "1516240",
    "end": "1523720"
  },
  {
    "text": "contains at least two forms possibly more that second element is either a",
    "start": "1523720",
    "end": "1530320"
  },
  {
    "text": "size for the array for the buffer or it's going to be a reference to a float",
    "start": "1530320",
    "end": "1538000"
  },
  {
    "text": "32 array or some kind of other native data type so in the first one we're just",
    "start": "1538000",
    "end": "1543559"
  },
  {
    "text": "creating it and giving it a size and say okay well I have uh each element is 32",
    "start": "1543559",
    "end": "1548960"
  },
  {
    "text": "bytes long and I have three of those elements so that's the size of",
    "start": "1548960",
    "end": "1554279"
  },
  {
    "text": "it in the bottom portion we create a a",
    "start": "1554279",
    "end": "1559679"
  },
  {
    "text": "an array of vertices and these are again Four Element vectors x y z and W and",
    "start": "1559679",
    "end": "1567960"
  },
  {
    "text": "this creates a simple triangle right now I'm just using uh what is it called normalized",
    "start": "1567960",
    "end": "1576840"
  },
  {
    "text": "uh normalized coordinates uh unit coordinat uh unit unit vectors sorry so",
    "start": "1576840",
    "end": "1582760"
  },
  {
    "text": "unit vectors uh between uh zero and one or in this case negative 1 to one",
    "start": "1582760",
    "end": "1589960"
  },
  {
    "text": "and we take this array and we set the uh",
    "start": "1589960",
    "end": "1595640"
  },
  {
    "text": "send that to the buffer through the buffer data the Shader for this is starting to",
    "start": "1595640",
    "end": "1605919"
  },
  {
    "start": "1601000",
    "end": "1601000"
  },
  {
    "text": "get a little bit more complex now we have a uniform Matrix and an attribute",
    "start": "1605919",
    "end": "1611919"
  },
  {
    "text": "for our position uh the position being the position of each vector or each vertex",
    "start": "1611919",
    "end": "1620480"
  },
  {
    "text": "of the triangle itself and then finally we have a varying variable and as you",
    "start": "1620480",
    "end": "1626440"
  },
  {
    "text": "recall from a previous Slide the varying variables always get passed from the",
    "start": "1626440",
    "end": "1631679"
  },
  {
    "text": "vertex Shader into the fragment Shader uh we don't touch those from JavaScript",
    "start": "1631679",
    "end": "1638840"
  },
  {
    "text": "otherwise inside the main function uh this vertex Shader will receive the",
    "start": "1638840",
    "end": "1646600"
  },
  {
    "text": "position and The Matrix from our attribute and our uniform and runs the main",
    "start": "1646600",
    "end": "1653799"
  },
  {
    "text": "function uh against each of those elements within our",
    "start": "1653799",
    "end": "1659760"
  },
  {
    "text": "array and in this case we're going to set the color for the varying in this",
    "start": "1659760",
    "end": "1665120"
  },
  {
    "text": "case it's red uh the the VC for there is RGB and",
    "start": "1665120",
    "end": "1670440"
  },
  {
    "text": "a and we're going to set the position which is going to be our Matrix multiplied by the position the actual",
    "start": "1670440",
    "end": "1679240"
  },
  {
    "text": "vertex so this would allow us to do things like projected into three",
    "start": "1679240",
    "end": "1685080"
  },
  {
    "text": "dimensions and on the other end the fragment Shader receives the ve the V 4 color",
    "start": "1685080",
    "end": "1693919"
  },
  {
    "start": "1687000",
    "end": "1687000"
  },
  {
    "text": "from the vertex Shader and it simply just passes it right back to the",
    "start": "1693919",
    "end": "1699399"
  },
  {
    "text": "rasterizer for drawing that color to the actual",
    "start": "1699399",
    "end": "1705360"
  },
  {
    "text": "location and uh really that's all I have for you um I'm sure there are a lot of",
    "start": "1705360",
    "end": "1713360"
  },
  {
    "text": "questions I kind of went through that really rapidly um one thing that I can",
    "start": "1713360",
    "end": "1719120"
  },
  {
    "text": "comment though is there's a website called Shader toy.com and if you're interested in getting into webgl and",
    "start": "1719120",
    "end": "1725880"
  },
  {
    "text": "shaders and so forth definitely check out Shader toy uh they have a lot of",
    "start": "1725880",
    "end": "1731440"
  },
  {
    "text": "really cool demos but it also has a uh a Sandbox a GLS cell sandbox that",
    "start": "1731440",
    "end": "1739000"
  },
  {
    "text": "you can just type in your your own Shader language and run it right there",
    "start": "1739000",
    "end": "1745240"
  },
  {
    "text": "um pretty cool stuff so since I do have uh about 10 minutes",
    "start": "1745240",
    "end": "1751640"
  },
  {
    "text": "I'm more than happy to take some questions if anyone has any great question so question is if you",
    "start": "1751640",
    "end": "1759200"
  },
  {
    "text": "want to start a big project medium project whether you want to use a",
    "start": "1759200",
    "end": "1764840"
  },
  {
    "text": "framework to help or uh just learn webg itself personally I would recommend if",
    "start": "1764840",
    "end": "1771240"
  },
  {
    "text": "you're short on time use the framework use 3js use uh I don't know there a",
    "start": "1771240",
    "end": "1777279"
  },
  {
    "text": "whole bunch of them um but it will really uh get you up and running rapidly",
    "start": "1777279",
    "end": "1784240"
  },
  {
    "text": "and if you don't need to use anything very special like you're not uh going to cause I don't know Ripple effects and",
    "start": "1784240",
    "end": "1790960"
  },
  {
    "text": "wobbling and wonky stuff uh you don't necessarily need to do like actual",
    "start": "1790960",
    "end": "1796519"
  },
  {
    "text": "coating Shader stuff yeah right you just might want to just load a model uh make sure it rotates around do that sort of",
    "start": "1796519",
    "end": "1803279"
  },
  {
    "text": "thing the Frameworks are awesome for that cool thanks uh shaders with 3GS yes",
    "start": "1803279",
    "end": "1809399"
  },
  {
    "text": "it's possible yep they have some kind of uh some kind of functionality for that",
    "start": "1809399",
    "end": "1815720"
  },
  {
    "text": "yeah right because 3 is incredibly easy compared to just do absolutely yeah uh",
    "start": "1815720",
    "end": "1822279"
  },
  {
    "text": "webgl itself is kind of intense to be honest uh it",
    "start": "1822279",
    "end": "1829000"
  },
  {
    "text": "like I said it's like nothing we've ever seen before or since on JavaScript or on",
    "start": "1829000",
    "end": "1834720"
  },
  {
    "text": "the web platform specifically because it's so lowlevel",
    "start": "1834720",
    "end": "1841679"
  },
  {
    "text": "right good question the glsl itself is a specification",
    "start": "1842559",
    "end": "1848399"
  },
  {
    "text": "for uh I believe it came out with openg glees not entirely certain about that es",
    "start": "1848399",
    "end": "1853720"
  },
  {
    "text": "is for embedded system which is for like tablets and phones mobile devices so it's a cut down version of",
    "start": "1853720",
    "end": "1860399"
  },
  {
    "text": "opengl and the the Shader language itself is for writing the programmable",
    "start": "1860399",
    "end": "1866799"
  },
  {
    "text": "part of this uh rendering pipeline so it's a c like language it's its own",
    "start": "1866799",
    "end": "1871880"
  },
  {
    "text": "language entirely okay and you compile it down into a uh into what's",
    "start": "1871880",
    "end": "1879440"
  },
  {
    "text": "essentially a a machine code and you do that from the browser theow from the browser yeah so",
    "start": "1879440",
    "end": "1886880"
  },
  {
    "text": "uh let me go back a couple couple of slides and we'll find that example",
    "start": "1886880",
    "end": "1894320"
  },
  {
    "text": "uh right there so when we create the Shader here yeah and then we say compile",
    "start": "1895480",
    "end": "1901240"
  },
  {
    "text": "Shader this Shader variable is just a string it's a big who cares what it is",
    "start": "1901240",
    "end": "1906600"
  },
  {
    "text": "it's a a string of source code and we ask webg API itself to compile that so",
    "start": "1906600",
    "end": "1913480"
  },
  {
    "text": "it compiles it down into U an object file right execute half executable and",
    "start": "1913480",
    "end": "1919840"
  },
  {
    "text": "then eventually you ask it to link so once you have all your shaders up you",
    "start": "1919840",
    "end": "1925080"
  },
  {
    "text": "link them together and then you use the program so that's kind of how U the Shader language fits in with webgl the",
    "start": "1925080",
    "end": "1932279"
  },
  {
    "text": "API okay and then uh what do you use uh webgl for instead of just using",
    "start": "1932279",
    "end": "1938919"
  },
  {
    "text": "somethings like what on your project so I don't recall exactly which",
    "start": "1938919",
    "end": "1946840"
  },
  {
    "text": "framework I was using originally with melon JS uh it",
    "start": "1946840",
    "end": "1952080"
  },
  {
    "text": "was whatever it was using browserify and some other things uh what I found though is it",
    "start": "1952080",
    "end": "1959720"
  },
  {
    "text": "turned out to be really too slow for some very particular use case uh for",
    "start": "1959720",
    "end": "1966120"
  },
  {
    "text": "melon JS it's just a 2D rendering uh game engine so we don't need things like",
    "start": "1966120",
    "end": "1973360"
  },
  {
    "text": "you know 3D projection and all this fancy stuff uh we just need to draw a",
    "start": "1973360",
    "end": "1980240"
  },
  {
    "text": "bunch of triangles really quickly and so that's kind of why I started learning all this stuff and eventually uh I was",
    "start": "1980240",
    "end": "1989240"
  },
  {
    "text": "able to write this little compositor that's actually a lot faster than what we",
    "start": "1989240",
    "end": "1995320"
  },
  {
    "text": "attempted to prototype to begin with uh so that was the the primary reason for",
    "start": "1995320",
    "end": "2001000"
  },
  {
    "text": "for going through all this hassle yes how do you learn",
    "start": "2001000",
    "end": "2008080"
  },
  {
    "text": "fragment Shader coding techniques uh a lot of the information is just whatever",
    "start": "2008080",
    "end": "2014000"
  },
  {
    "text": "you can find on Google you can also yeah you can also check out Shader toy",
    "start": "2014000",
    "end": "2019159"
  },
  {
    "text": "because they give you all kinds of different demos you just go find one that you're interested in and look",
    "start": "2019159",
    "end": "2024799"
  },
  {
    "text": "through the source code but because it's Shader language and you may not be familiar with anything similar to it uh",
    "start": "2024799",
    "end": "2033519"
  },
  {
    "text": "I would really recommend just you know taking it one step at a time look at some very simple examples and then go on",
    "start": "2033519",
    "end": "2040320"
  },
  {
    "text": "to the the more interesting things the more the things that you're more interested in there not like oh image",
    "start": "2040320",
    "end": "2046600"
  },
  {
    "text": "processing well that's what I mean by FR Shad",
    "start": "2046600",
    "end": "2053040"
  },
  {
    "text": "math yeah yeah that's so just see tutorials here and there doesn't really",
    "start": "2053399",
    "end": "2058560"
  },
  {
    "text": "give the foundation so if you wanted to go for the",
    "start": "2058560",
    "end": "2063679"
  },
  {
    "text": "found oh there's a library called",
    "start": "2064440",
    "end": "2072320"
  },
  {
    "text": "um I don't recall what it's called",
    "start": "2072359",
    "end": "2077440"
  },
  {
    "text": "Uh it has a really funny name uh maybe I can find it",
    "start": "2077760",
    "end": "2083079"
  },
  {
    "text": "here the yeah I would just really look at um",
    "start": "2083079",
    "end": "2089839"
  },
  {
    "text": "Graphics gems as a as a really good one so things like uh I don't know SGI has",
    "start": "2089839",
    "end": "2097118"
  },
  {
    "text": "their conference sigraph right and they always have white papers coming out of that and uh different presentations that",
    "start": "2097119",
    "end": "2104079"
  },
  {
    "text": "you can watch about different uh rendering techniques um",
    "start": "2104079",
    "end": "2109160"
  },
  {
    "text": "presentations presentations white papers definitely check out white papers if",
    "start": "2109160",
    "end": "2114200"
  },
  {
    "text": "you're interested in that stuff um one example solid example I can give you is",
    "start": "2114200",
    "end": "2119920"
  },
  {
    "text": "how to do font rendering within webgl because we're just doing things like uh",
    "start": "2119920",
    "end": "2126599"
  },
  {
    "text": "abstract points within webgl itself rather than uh rasterizing uh",
    "start": "2126599",
    "end": "2133119"
  },
  {
    "text": "vectorizing a right a glyph or something an S say uh there are some really",
    "start": "2133119",
    "end": "2140599"
  },
  {
    "text": "interesting techniques for using uh a a mask so you can like",
    "start": "2140599",
    "end": "2148359"
  },
  {
    "text": "uh how how did it work it was like you create basier curves and uh get",
    "start": "2148359",
    "end": "2156760"
  },
  {
    "text": "those to rasterize and then use masks and so forth and you can actually do like a vector font uh with within web JL",
    "start": "2156760",
    "end": "2165440"
  },
  {
    "text": "itself but this was all information that came out of a white paper so yeah I",
    "start": "2165440",
    "end": "2172160"
  },
  {
    "text": "remember materials are a much more higher level concept this is something that you'd more find in a framework like",
    "start": "2172160",
    "end": "2179920"
  },
  {
    "text": "3js yeah so what could you describe what what does a material do uh material uh",
    "start": "2179920",
    "end": "2186000"
  },
  {
    "text": "would be something like ad reflectivity uh or",
    "start": "2186000",
    "end": "2191359"
  },
  {
    "text": "um uh what's another example uh gloss glow you know that sort of thing so you",
    "start": "2191359",
    "end": "2197640"
  },
  {
    "text": "can create a create a mirror in your world or create um Reflections on the",
    "start": "2197640",
    "end": "2203400"
  },
  {
    "text": "body of a car you know stuff like that so surface aspects yeah precisely",
    "start": "2203400",
    "end": "2209200"
  },
  {
    "text": "surface of Any Given material and what it's qualities are precisely yeah but it's a more higher level concept than",
    "start": "2209200",
    "end": "2216480"
  },
  {
    "text": "what you would do uh with like this abstract points and such within a",
    "start": "2216480",
    "end": "2222680"
  },
  {
    "text": "fragment Shader if you were to write a fragment Shader for doing Reflections and so forth then you would want to do",
    "start": "2222680",
    "end": "2230040"
  },
  {
    "text": "uh well you would build that yourself clearly but it would be things like uh I",
    "start": "2230040",
    "end": "2235800"
  },
  {
    "text": "don't know reflect this vertex and then uh do some Ray casting or you know",
    "start": "2235800",
    "end": "2242359"
  },
  {
    "text": "stuff like that so it can get complex but yeah uh F security",
    "start": "2242359",
    "end": "2248079"
  },
  {
    "text": "in um that's a good question uh you can do some really bad things if you're not",
    "start": "2248079",
    "end": "2255599"
  },
  {
    "text": "careful for example spin your fragment Shader out of control with a an uncontrollable Loop",
    "start": "2255599",
    "end": "2263800"
  },
  {
    "text": "just as an example excuse me the uh yeah in that",
    "start": "2263800",
    "end": "2269880"
  },
  {
    "text": "case uh Chrome I know will support some uh minimal sandboxing for you and it",
    "start": "2269880",
    "end": "2277599"
  },
  {
    "text": "actually has this concept of losing the webg context in part because of this",
    "start": "2277599",
    "end": "2285200"
  },
  {
    "text": "aspect and in the case that the webg context gets lost then you have to recreate it and reinitialize all the",
    "start": "2285200",
    "end": "2292480"
  },
  {
    "text": "stuff but uh it allows you to say have",
    "start": "2292480",
    "end": "2297720"
  },
  {
    "text": "multiple webgl renders running run running simultaneously whether they're",
    "start": "2297720",
    "end": "2302839"
  },
  {
    "text": "within the same browser tab or within your own and they can be killed individually and so forth uh yeah really",
    "start": "2302839",
    "end": "2310119"
  },
  {
    "text": "the worst as far as security goes is a denial of service and those are some of the techniques to to take care of",
    "start": "2310119",
    "end": "2318119"
  },
  {
    "text": "that yeah all myself for uh which parts",
    "start": "2318800",
    "end": "2323920"
  },
  {
    "text": "exactly let's say for a game or something pretty intense uh I mean like",
    "start": "2323920",
    "end": "2329680"
  },
  {
    "text": "which uh which features um oh uh I don't",
    "start": "2329680",
    "end": "2334720"
  },
  {
    "text": "have a feature in mind like wondering what's the cost of you know nice having",
    "start": "2334720",
    "end": "2340000"
  },
  {
    "text": "a nice Library as oppos to getting my hand or um I think there's a very minimal",
    "start": "2340000",
    "end": "2348280"
  },
  {
    "text": "trade-off to be honest like there may be a slight performance cost probably not",
    "start": "2348280",
    "end": "2354240"
  },
  {
    "text": "all that probably doesn't matter all that much but really the the tradeoff I think",
    "start": "2354240",
    "end": "2360560"
  },
  {
    "text": "would be in terms of flexibility like what you're able to to do if you had",
    "start": "2360560",
    "end": "2365640"
  },
  {
    "text": "something very specific in mind like you can actually build an entire game and run it within the GPU and not",
    "start": "2365640",
    "end": "2372880"
  },
  {
    "text": "touch JavaScript at all except for poking at it every now and again say hey update the frame update the frame update",
    "start": "2372880",
    "end": "2379200"
  },
  {
    "text": "the frame um so if you wanted to do something very specialized like that uh a framework won't help you um but again",
    "start": "2379200",
    "end": "2386920"
  },
  {
    "text": "that code isn't really us reusable so you know it's going to be a oneoff thing",
    "start": "2386920",
    "end": "2392160"
  },
  {
    "text": "the framework is really meant to be reusable and run everywhere",
    "start": "2392160",
    "end": "2399319"
  },
  {
    "text": "thanks uh yeah one more we have one more question uh my opinion on Unity I",
    "start": "2402319",
    "end": "2410079"
  },
  {
    "text": "haven't used Unity however I know it has a huge Community behind it and Community Support is key so if you are interested",
    "start": "2410079",
    "end": "2418800"
  },
  {
    "text": "in getting into game development Unity was probably a really good place to",
    "start": "2418800",
    "end": "2425040"
  },
  {
    "text": "start all right thanks everyone",
    "start": "2425920",
    "end": "2431680"
  }
]