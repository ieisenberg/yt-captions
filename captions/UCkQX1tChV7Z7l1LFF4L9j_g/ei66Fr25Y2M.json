[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "so I am Jake I work at Google I work on the Android team and uh specifically",
    "start": "4520",
    "end": "10000"
  },
  {
    "text": "about 18 months ago Android actually announced cotlin as a a new supported uh language for the platform which is why",
    "start": "10000",
    "end": "16640"
  },
  {
    "text": "I'm I'm there working on it um but um a lot of this talk will be framed in the sense of I'm going to introduce you to",
    "start": "16640",
    "end": "23519"
  },
  {
    "text": "cotlin uh a lot of the talk will be framed contrasting it to Java and why the language exists um but really the",
    "start": "23519",
    "end": "30880"
  },
  {
    "text": "premise of this talk is actually about running cotlin Beyond just where it was originally designed to",
    "start": "30880",
    "end": "36680"
  },
  {
    "text": "run and so uh there's this effort called cotlin multiplatform which is what this talk is about and it's taking this",
    "start": "36680",
    "end": "43920"
  },
  {
    "text": "language that was built for a very specific purpose and the realization that actually it can run on more than",
    "start": "43920",
    "end": "49360"
  },
  {
    "text": "one platform and there's this this sentence uh that comes from java which",
    "start": "49360",
    "end": "55160"
  },
  {
    "text": "is the right one run right once run everywhere uh and cotlin is",
    "start": "55160",
    "end": "60879"
  },
  {
    "text": "kind of taking that and delivering it uh in a different way where it's not just the jvm runs everywhere and your Java",
    "start": "60879",
    "end": "66760"
  },
  {
    "text": "code then runs everywhere the jvm runs um cotlin is instead taking this and saying your cotlin code can run",
    "start": "66760",
    "end": "72119"
  },
  {
    "text": "everywhere but it can do it in a way that's much more intrinsic to each platform so I'd like to start with",
    "start": "72119",
    "end": "79600"
  },
  {
    "start": "77000",
    "end": "224000"
  },
  {
    "text": "introducing the language itself how many people have seen cotlin at all",
    "start": "79600",
    "end": "85119"
  },
  {
    "text": "before okay um so that's good uh that means this won't be for not",
    "start": "85119",
    "end": "90720"
  },
  {
    "text": "uh cin is a language that was created by a company called Jeet brains uh Jeet brains are primarily makers of idees of",
    "start": "90720",
    "end": "99200"
  },
  {
    "text": "tools and all these tools are mostly written in Java uh the foundation of",
    "start": "99200",
    "end": "105280"
  },
  {
    "text": "this Suite of tools uh is called intellig idea and there's a Community Edition which is open source and it has",
    "start": "105280",
    "end": "111600"
  },
  {
    "text": "about three and a half million lines of java code and then there's all and",
    "start": "111600",
    "end": "116920"
  },
  {
    "text": "that's just the Community Edition there's an ultimate edition which is paid which a bunch of extra functionality and then all these other",
    "start": "116920",
    "end": "123000"
  },
  {
    "text": "icons are idees for other languages which are built on the intellig platform",
    "start": "123000",
    "end": "128959"
  },
  {
    "text": "so that same Java based platform uh they then build you know language support and refactoring tools and all the stuff for",
    "start": "128959",
    "end": "135959"
  },
  {
    "text": "PHP for uh C and so Jeet brains you know they're",
    "start": "135959",
    "end": "144400"
  },
  {
    "text": "very aware of the pain points of the Java programming language this is a",
    "start": "144400",
    "end": "149920"
  },
  {
    "text": "company that's intimately familiar with the language three and a half million lines just in the base platform and then",
    "start": "149920",
    "end": "155599"
  },
  {
    "text": "however many million built to customize all these other languages and so they they know Java well and gez at this",
    "start": "155599",
    "end": "162400"
  },
  {
    "text": "point seven or eight years ago um they started looking for ways and and the the years ago context is really important",
    "start": "162400",
    "end": "169360"
  },
  {
    "text": "this is Java seven eight years ago as well and so they started looking at other languages to help improve their",
    "start": "169360",
    "end": "176239"
  },
  {
    "text": "productivity and the tools that they built they looked at it uh and so because this is jvm based you know",
    "start": "176239",
    "end": "182319"
  },
  {
    "text": "they're limited to jvm based languages they looked at groovy they looked at Scala um and they just found that while",
    "start": "182319",
    "end": "188480"
  },
  {
    "text": "these other languages had a lot of the things that they wanted they also came with a lot of downsides whether it's performance overhead um just complexity",
    "start": "188480",
    "end": "195959"
  },
  {
    "text": "of the language and they made a choice that is um is pretty bold which is",
    "start": "195959",
    "end": "201799"
  },
  {
    "text": "they're going to invent this new language it's going to be compatible with Java um but since none of the other",
    "start": "201799",
    "end": "208480"
  },
  {
    "text": "ones that were out at the time were able to solve the you know the use cases that they wanted in in the way that they",
    "start": "208480",
    "end": "214760"
  },
  {
    "text": "wanted and because they were a large enough company to invest these resources they decided to build this new language",
    "start": "214760",
    "end": "221200"
  },
  {
    "text": "called cotlin and so I want to go over what the language looks like to just get you",
    "start": "221200",
    "end": "227519"
  },
  {
    "start": "224000",
    "end": "460000"
  },
  {
    "text": "familiar with and this will play an important I I'll try and touch back on this over and over uh throughout the",
    "start": "227519",
    "end": "232760"
  },
  {
    "text": "rest of the talk uh as to why knowing what the language looks like is important it looks like almost any",
    "start": "232760",
    "end": "240000"
  },
  {
    "text": "modern language you would expect now uh like I said this comes from people that had worked mostly with Java but you know",
    "start": "240000",
    "end": "246560"
  },
  {
    "text": "they're aware of the other programming languages that were coming into existence uh over the course of about",
    "start": "246560",
    "end": "252079"
  },
  {
    "text": "seven to five years ago which is when most of the language work was done so we have here some uh properties which are",
    "start": "252079",
    "end": "260400"
  },
  {
    "text": "defined the very first keyword denotes whether something is read only or read WR so Val is a value which means it has",
    "start": "260400",
    "end": "267520"
  },
  {
    "text": "a value set and then it cannot change it's a strongly typed language so",
    "start": "267520",
    "end": "272639"
  },
  {
    "text": "everything must have a type that's known at compile time and then it has the concept of",
    "start": "272639",
    "end": "278440"
  },
  {
    "text": "optionality elevated into the type system if you're familiar with Java this is one of the biggest pain points of the",
    "start": "278440",
    "end": "284680"
  },
  {
    "text": "language um that you you can try and solve with things like annotations and static analysis or maybe the optional",
    "start": "284680",
    "end": "290520"
  },
  {
    "text": "type which eventually came out in Java 8 U but by having by having optionality in the type system you're now forced to do",
    "start": "290520",
    "end": "297320"
  },
  {
    "text": "things like null checks before you can dereference something often times the type can be",
    "start": "297320",
    "end": "304520"
  },
  {
    "text": "known can be inferred from the context whether in this case it's a literal that's a string or maybe you're just",
    "start": "304520",
    "end": "310080"
  },
  {
    "text": "calling a method and that method has a defined return type and so you can alide it from the",
    "start": "310080",
    "end": "316240"
  },
  {
    "text": "definition now because this was a language that was built you know from java and needing to work with Java it",
    "start": "316240",
    "end": "323560"
  },
  {
    "text": "had to have a really strong interop story similar to how you know Scala can",
    "start": "323560",
    "end": "328600"
  },
  {
    "text": "talk to Java compiled code or groovy can use Java compiled code this language needed to do",
    "start": "328600",
    "end": "334000"
  },
  {
    "text": "the same um they recognize certain patterns that are uh frequent in Java",
    "start": "334000",
    "end": "340759"
  },
  {
    "text": "and quite verbose one is the so-called Bean pattern where you have this getter",
    "start": "340759",
    "end": "345880"
  },
  {
    "text": "and a Setter for a a property and then there' be like some private field that backed it and when you view this from",
    "start": "345880",
    "end": "351960"
  },
  {
    "text": "cotlin what it's going to do is automatically recognize that pattern and collapse them down into a single property and so you get this much more",
    "start": "351960",
    "end": "358319"
  },
  {
    "text": "tur represent presentation of something that you can read from and it would call the getter or you write to and it calls",
    "start": "358319",
    "end": "363960"
  },
  {
    "text": "the setter there's string interpolation uh something Java doesn't have so allow you",
    "start": "363960",
    "end": "370720"
  },
  {
    "text": "to more easily create you know mix and match string literals with variables uh and then if you just want",
    "start": "370720",
    "end": "376960"
  },
  {
    "text": "to print the two string of an object you can just reference it like",
    "start": "376960",
    "end": "382560"
  },
  {
    "text": "that and what's cool about cotlin is they not only decided to do Java interop",
    "start": "384599",
    "end": "389800"
  },
  {
    "text": "in uh the way from java to cotlin they wanted the opposite experience to be",
    "start": "389800",
    "end": "395080"
  },
  {
    "text": "something that was also Pleasant and so if you use a language like scholar like groovy it has really good intera with",
    "start": "395080",
    "end": "401080"
  },
  {
    "text": "code that's written in Java um but sometimes when you're writing in Java and interacting with like a library",
    "start": "401080",
    "end": "406560"
  },
  {
    "text": "that's written in scholar groovy there's things that can look a little weird and you kind of have to jump through some extra Hoops because of how that more",
    "start": "406560",
    "end": "414000"
  },
  {
    "text": "powerful language works that it can't express the same thing in Java um but cin wanted to try and avoid this",
    "start": "414000",
    "end": "419879"
  },
  {
    "text": "wherever possible and so if we do the opposite of what was on the last slide we just Define now a a VAR property",
    "start": "419879",
    "end": "426240"
  },
  {
    "text": "which means it's both uh able to be read and written to if you consume this from",
    "start": "426240",
    "end": "431400"
  },
  {
    "text": "the Java side it looks like that getter and Setter the standard Bean",
    "start": "431400",
    "end": "436599"
  },
  {
    "text": "format so you can call the getter or you can uh call the setter and actually when you compile",
    "start": "436599",
    "end": "443680"
  },
  {
    "text": "cotlin um it compiles if you're targeting the jvm it compiles down to bite code and so so when even if when",
    "start": "443680",
    "end": "450319"
  },
  {
    "text": "you interact with this property through um just cotlin it's actually going to compile down to calls to like a get",
    "start": "450319",
    "end": "457680"
  },
  {
    "text": "method or a set method uh I talked about the read only",
    "start": "457680",
    "end": "463120"
  },
  {
    "start": "460000",
    "end": "618000"
  },
  {
    "text": "or read WR so if we Define something that's a V and try to reassign its value that's going to be a compile time error",
    "start": "463120",
    "end": "469919"
  },
  {
    "text": "whereas if we have something that's a variable we H we have the ability to change it and the IDE because Jeet brains is a tools company not only were",
    "start": "469919",
    "end": "477199"
  },
  {
    "text": "they developing a language but they also were able to develop the tooling alongside of it and so in their idees",
    "start": "477199",
    "end": "483599"
  },
  {
    "text": "intell especially in idea um they can do a lot of things to highlight parts of",
    "start": "483599",
    "end": "489360"
  },
  {
    "text": "the language to just make your code better and so mutability is often a point of where bugs are introduced and",
    "start": "489360",
    "end": "496599"
  },
  {
    "text": "so they actually will underline uh references that are mutable to just call out that this is something where you you",
    "start": "496599",
    "end": "503720"
  },
  {
    "text": "need to pay extra special care because mutability is in play",
    "start": "503720",
    "end": "509960"
  },
  {
    "text": "now in order to reuse a lot of the things that were present on the jvm uh they added something that's common in",
    "start": "511639",
    "end": "518518"
  },
  {
    "text": "maybe C uh which is extension functions the ability to hang additional functionality off of a type that you",
    "start": "518519",
    "end": "524880"
  },
  {
    "text": "don't control now this is not exactly the most useful of methods uh but given",
    "start": "524880",
    "end": "530320"
  },
  {
    "text": "any date you can now call an is Tuesday function on it and it will uh determine",
    "start": "530320",
    "end": "535680"
  },
  {
    "text": "whether or not um you know it will run the body and it will look at the call site as if it's a a member function but",
    "start": "535680",
    "end": "542920"
  },
  {
    "text": "it's actually you know you're not actually modifying the date class um if you if you do Java um this basically",
    "start": "542920",
    "end": "548440"
  },
  {
    "text": "compiles to just a static method and in Java you write a lot of static utility methods because you don't have this",
    "start": "548440",
    "end": "554440"
  },
  {
    "text": "functionality and they they're hard to discover but by again having the IDE on",
    "start": "554440",
    "end": "559760"
  },
  {
    "text": "cotland side uh now if you just have a date and you hit the dot it will actually autocomplete these extension",
    "start": "559760",
    "end": "565760"
  },
  {
    "text": "methods and then import them automatically for you and again going back to the the two-way",
    "start": "565760",
    "end": "572040"
  },
  {
    "text": "interoperability if you want to call this from java it will actually show up as an extension method um if this is in",
    "start": "572040",
    "end": "578600"
  },
  {
    "text": "a file called Date date. KT which is the cotlin extension um by default the class",
    "start": "578600",
    "end": "584440"
  },
  {
    "text": "name will be date KT which is kind of awkward uh but you can actually control this and make it whatever you want so if",
    "start": "584440",
    "end": "589760"
  },
  {
    "text": "you want to name it dates or date utils um you can you can have that idiomatic",
    "start": "589760",
    "end": "594920"
  },
  {
    "text": "behavior from both languages then it's got features of you know modern languages that you would",
    "start": "594920",
    "end": "600560"
  },
  {
    "text": "expect things like lambdas the ability to just you know pass code as",
    "start": "600560",
    "end": "606040"
  },
  {
    "text": "data function references so instead of uh having a Lambda that contains code if",
    "start": "606040",
    "end": "611200"
  },
  {
    "text": "you already have a function that contains code that you want to pass you can just refer to it using a this",
    "start": "611200",
    "end": "618160"
  },
  {
    "start": "618000",
    "end": "1006000"
  },
  {
    "text": "syntax higher level functions uh and this is both an extension function and a",
    "start": "618160",
    "end": "623519"
  },
  {
    "text": "higher level function so we're we're extending the functionality of list and",
    "start": "623519",
    "end": "628880"
  },
  {
    "text": "we're adding this filter method this is actually a built-in method in the cotland standard library but we could write it if we want to uh and so now",
    "start": "628880",
    "end": "635959"
  },
  {
    "text": "anywhere someone has a list they can call our filter method pass in a Lambda and then we can um in the body of the",
    "start": "635959",
    "end": "644000"
  },
  {
    "text": "method like do the obvious thing with the for Loop and what's nice about uh the how the higher order functions work",
    "start": "644000",
    "end": "650920"
  },
  {
    "text": "is this this is like how you would maybe naively call it at the call site where you call the filter method you open the",
    "start": "650920",
    "end": "657279"
  },
  {
    "text": "the parentheses because you're calling it as a function and then you pass in Lambda as the first argument this is a pattern that shows up",
    "start": "657279",
    "end": "664040"
  },
  {
    "text": "a lot um where there's a Lambda that takes uh that has a single argument so",
    "start": "664040",
    "end": "669240"
  },
  {
    "text": "here we're just always operating on the items in the list and so what you can actually do is uh not specify an",
    "start": "669240",
    "end": "676800"
  },
  {
    "text": "argument name and just use the implicit it but then the pattern of a Lambda",
    "start": "676800",
    "end": "682880"
  },
  {
    "text": "being the the last argument in a function call is something that's quite common and so what cin actually did is",
    "start": "682880",
    "end": "688959"
  },
  {
    "text": "allow you to move that Lambda outside of the parenthesis which looks a little weird but then because the parenthesis",
    "start": "688959",
    "end": "695440"
  },
  {
    "text": "block is empty you can actually uh eliminate that all together and get this this nicer like uh filter syntax where",
    "start": "695440",
    "end": "702200"
  },
  {
    "text": "you call it with just the Lambda looks a little weird uh if you haven't seen this before this is your first time seeing",
    "start": "702200",
    "end": "708240"
  },
  {
    "text": "the language but again being a language that's statically typed and having the IDE on your side um there there's",
    "start": "708240",
    "end": "714680"
  },
  {
    "text": "nothing like that can be inferred incorrectly here and and then this still",
    "start": "714680",
    "end": "719760"
  },
  {
    "text": "works if there are other arguments so there's a overload of filter called Filter 2 which allows you to pass in the",
    "start": "719760",
    "end": "726079"
  },
  {
    "text": "destination list that you want to filter your list into and so you can see here we have the parentheses and we're we're",
    "start": "726079",
    "end": "732639"
  },
  {
    "text": "passing that list but then that Lambda still stays outside of the the",
    "start": "732639",
    "end": "738000"
  },
  {
    "text": "parenthesis uh there's a cool function so like the in the jbm you rely on um",
    "start": "739800",
    "end": "746560"
  },
  {
    "text": "its compiler it's runtime compilers it's just time or maybe ahead of time compilers to do certain optimizations",
    "start": "746560",
    "end": "752360"
  },
  {
    "text": "for you like inlining you have a function that's called over and over and over again in a very hot path you rely",
    "start": "752360",
    "end": "758240"
  },
  {
    "text": "on the jit to recognize that and then inline it to the call site so you don't have to you know be constantly packing",
    "start": "758240",
    "end": "764760"
  },
  {
    "text": "and unpacking arguments and actually jumping to that separate piece of code uh cin actually allows you to do this at",
    "start": "764760",
    "end": "770720"
  },
  {
    "text": "compile time if you know something is in a in going to be called either in a hot",
    "start": "770720",
    "end": "776320"
  },
  {
    "text": "path uh or the overhead of creating the argument is a certain way where you you",
    "start": "776320",
    "end": "782000"
  },
  {
    "text": "want to eliminate that and so for this filter it's uh you might be wondering why why would you",
    "start": "782000",
    "end": "788240"
  },
  {
    "text": "ever inline this function uh and that's because if you've done filtering in a language without higher level functions",
    "start": "788240",
    "end": "794199"
  },
  {
    "text": "like this such as Java before Java 8 uh you would have to write you have to create a new local property that's a mut",
    "start": "794199",
    "end": "800839"
  },
  {
    "text": "like an array list you would have to write the for Loop over the current things you would call the if statement",
    "start": "800839",
    "end": "805959"
  },
  {
    "text": "uh your predicate would be inside the if conditional whe whether you wanted to keep an item or not and then you would",
    "start": "805959",
    "end": "811040"
  },
  {
    "text": "add it to the destination list and now what this is doing is saying uh you can have the the",
    "start": "811040",
    "end": "818440"
  },
  {
    "text": "ergonomics of the higher higher order function where it's much more declarative and all you see at the filter",
    "start": "818440",
    "end": "824399"
  },
  {
    "text": "site excuse me all you see at the filter site is a Lambda but the way uh the way this works",
    "start": "824399",
    "end": "830440"
  },
  {
    "text": "is like that that Lambda has to live somewhere and so there's usually an object created for that uh and that",
    "start": "830440",
    "end": "836399"
  },
  {
    "text": "object if you're targeting the jvm has a class Association with it and by inlining this function you actually",
    "start": "836399",
    "end": "841720"
  },
  {
    "text": "eliminate the need to have a class generated for what the Lambda implements and then at runtime that object",
    "start": "841720",
    "end": "847600"
  },
  {
    "text": "implemented and in the bite code you get what you otherwise would have written uh if you had done it manually and so you",
    "start": "847600",
    "end": "854040"
  },
  {
    "text": "lose the overhead of both the jumping to the call site but also the overhead associated with the",
    "start": "854040",
    "end": "860000"
  },
  {
    "text": "Lambda something that's uh important for contexts like if you're running on Android where things like performance uh",
    "start": "860000",
    "end": "867240"
  },
  {
    "text": "especially on the main thread is is very",
    "start": "867240",
    "end": "871519"
  },
  {
    "text": "key uh and then um since this pattern this pattern of just having classes that",
    "start": "873160",
    "end": "878920"
  },
  {
    "text": "carry data is somewhat common uh it's essentially ubiquitous I guess there's actually a shorthand for I mean this is",
    "start": "878920",
    "end": "885759"
  },
  {
    "text": "a terrible user because it's always named Jake uh but if you wanted to take in a name this is what you would write",
    "start": "885759",
    "end": "891680"
  },
  {
    "text": "and because the pattern of creating an object that's like a record type that just carries data is common they",
    "start": "891680",
    "end": "898480"
  },
  {
    "text": "actually C allows you to collapse the property and the Constructor argument into one definition and then you can",
    "start": "898480",
    "end": "904440"
  },
  {
    "text": "actually just drop the curly braces because they're no no longer",
    "start": "904440",
    "end": "909839"
  },
  {
    "text": "needed uh if you use this though you might be a little surprised like you want to I create myself again and I want",
    "start": "909839",
    "end": "915160"
  },
  {
    "text": "to print that out um if again you're running on the jvm and I promise I'm going to get some multiplatform stuff",
    "start": "915160",
    "end": "921040"
  },
  {
    "text": "eventually um it'll it'll do like the default Java thing where it just prints the memory address which is useless uh",
    "start": "921040",
    "end": "927199"
  },
  {
    "text": "because you need a you need to override two string uh but instead of having to override two string or also the other",
    "start": "927199",
    "end": "932920"
  },
  {
    "text": "stuff that Java forces you to do for Value based types which is like equals and hash code if you want to use them in",
    "start": "932920",
    "end": "938240"
  },
  {
    "text": "a map uh you can actually just use a a modifier on the class called data which",
    "start": "938240",
    "end": "943519"
  },
  {
    "text": "communicates to the compiler that listen this is just a a dumb carrier of other",
    "start": "943519",
    "end": "948920"
  },
  {
    "text": "references and I want you to generate that that boiler plate automatically for equals hash code two string and now we",
    "start": "948920",
    "end": "956680"
  },
  {
    "text": "get like a two string that's actually sayane",
    "start": "956680",
    "end": "960920"
  },
  {
    "text": "uh almost done with the language here another cool feature of these data classes is when you have multiple properties um very frequently you'll see",
    "start": "961920",
    "end": "968440"
  },
  {
    "text": "these returned from a function then you need to access the component bits of of",
    "start": "968440",
    "end": "973519"
  },
  {
    "text": "that type you need to pull out the name and need to pull out the age and then use them somewhere else and so there's",
    "start": "973519",
    "end": "979519"
  },
  {
    "text": "this feature called destructuring uh which is in a couple other languages uh you may have seen it in like python",
    "start": "979519",
    "end": "985199"
  },
  {
    "text": "where you can actually just pull out the component types using parentheses",
    "start": "985199",
    "end": "990680"
  },
  {
    "text": "uh you don't need a separate reference for this I mean this is kind of stupid I'm just creating an object and then destructuring it where you usually see",
    "start": "991120",
    "end": "997160"
  },
  {
    "text": "this is when it's returned from a function function returns you know a point and you pull out X and Y or a user",
    "start": "997160",
    "end": "1003199"
  },
  {
    "text": "and you pull out name and age uh okay two more language features",
    "start": "1003199",
    "end": "1009440"
  },
  {
    "start": "1006000",
    "end": "1270000"
  },
  {
    "text": "before we move on um something that uh this again is in the context of Android but it applies to",
    "start": "1009440",
    "end": "1016000"
  },
  {
    "text": "everything uh we may have a property where there's it's expensive to initialize and so in this case uh I'm",
    "start": "1016000",
    "end": "1022720"
  },
  {
    "text": "creating a a property that actually uh talks to the database and creates a a",
    "start": "1022720",
    "end": "1029880"
  },
  {
    "text": "compiled statement which is like I'm going to execute this SQL query over and over again so I want you to compile it",
    "start": "1029880",
    "end": "1035319"
  },
  {
    "text": "to a more efficient representation uh but the problem is this this happens like eagerly as soon as I create this class the very first",
    "start": "1035319",
    "end": "1041839"
  },
  {
    "text": "time I create this class it goes and does IO uh in the Constructor instead of say the first time I call the delete",
    "start": "1041839",
    "end": "1048480"
  },
  {
    "text": "method and so there's patterns to avoid this you can have like a lazy pattern where",
    "start": "1048480",
    "end": "1054280"
  },
  {
    "text": "maybe it's nullable and then you check if it's null and initialize it the first time um cotlin has this this concept",
    "start": "1054280",
    "end": "1060600"
  },
  {
    "text": "called delegated properties where you basically say I want to I I have a",
    "start": "1060600",
    "end": "1065840"
  },
  {
    "text": "certain behavior that I want to apply to a property uh and and it will every time I",
    "start": "1065840",
    "end": "1071559"
  },
  {
    "text": "call get on the property it will call into this like delegate object that has",
    "start": "1071559",
    "end": "1076600"
  },
  {
    "text": "certain behavior and so one of the ones that's built in is a lazy delegate and you give the lazy delegate a Lambda and",
    "start": "1076600",
    "end": "1082840"
  },
  {
    "text": "what this does is when you call get it does the annoying lazy pattern where it",
    "start": "1082840",
    "end": "1088000"
  },
  {
    "text": "checks if it's null if it's not null it takes a lock calls the Lambda gets the return value sets that to its field and",
    "start": "1088000",
    "end": "1094520"
  },
  {
    "text": "then returns that to you and then the next time you call get you know it checks its field that's already non-null and it just returns it to you over and",
    "start": "1094520",
    "end": "1100520"
  },
  {
    "text": "over again and so that that lazy pattern the pattern of lazy initialization is something that you can repeat over and",
    "start": "1100520",
    "end": "1106960"
  },
  {
    "text": "over and over again but what property delegates allow you to do is encapsulate that behavior in a class and then",
    "start": "1106960",
    "end": "1113919"
  },
  {
    "text": "delegate your property Behavior to that class uh and that class is actually that",
    "start": "1113919",
    "end": "1119039"
  },
  {
    "text": "lazy is a function that returns this property de delegate class and so that function then takes this",
    "start": "1119039",
    "end": "1125440"
  },
  {
    "text": "Lambda and there's a bunch of these property delegates some of them are built in and you can write ones",
    "start": "1125440",
    "end": "1130760"
  },
  {
    "text": "yourself so an example would be maybe you have a side effect you want to do every time a property value changes you",
    "start": "1130760",
    "end": "1136159"
  },
  {
    "text": "want to log for for debugging or for analytics purposes whatever uh you can",
    "start": "1136159",
    "end": "1141720"
  },
  {
    "text": "have a Lambda called back every time this property is changed to the consumer to the person consuming this name",
    "start": "1141720",
    "end": "1147799"
  },
  {
    "text": "property they're just reading and writing a a string property they don't see the delegate but then you have this",
    "start": "1147799",
    "end": "1153200"
  },
  {
    "text": "Behavior attached to it automatically uh because nullability is a concept in the type system sometimes",
    "start": "1153200",
    "end": "1160480"
  },
  {
    "text": "you know a property will never be null but the value isn't immediately accessible like it has to be initialized",
    "start": "1160480",
    "end": "1167120"
  },
  {
    "text": "just after an object is created and so there's a delegate that basically uh",
    "start": "1167120",
    "end": "1172360"
  },
  {
    "text": "allows a property to have a non-null type but if you call get on it before someone has actually set a value it'll",
    "start": "1172360",
    "end": "1178640"
  },
  {
    "text": "throw an exception uh and this is nice because then it doesn't Force the consumer to always do that null check it",
    "start": "1178640",
    "end": "1184960"
  },
  {
    "text": "encapsulates it inside the property itself and then you can write your own so like I said I I work on Android",
    "start": "1184960",
    "end": "1191559"
  },
  {
    "text": "Android has this view system uh and so like you can write a delegate that will",
    "start": "1191559",
    "end": "1196760"
  },
  {
    "text": "like go out and bind a view view given a certain ID to a certain type and then",
    "start": "1196760",
    "end": "1202159"
  },
  {
    "text": "you never know this you just interact with the the property the name view uh and it will lazily go out and find the",
    "start": "1202159",
    "end": "1208280"
  },
  {
    "text": "view the first time you call it and then last uh language feature",
    "start": "1208280",
    "end": "1214000"
  },
  {
    "text": "something that's really new just uh became stable actually a week ago uh is",
    "start": "1214000",
    "end": "1219600"
  },
  {
    "text": "this concept called cortines which are a lot of times are described as lightweight threads uh and so this piece",
    "start": "1219600",
    "end": "1225720"
  },
  {
    "text": "of code It's actually an old piece of code uh it's a really old example they like to show jet brains likes to show",
    "start": "1225720",
    "end": "1231880"
  },
  {
    "text": "where um they launch 100,000 co- routines that all sleep for one second and then print a DOT and so if you try",
    "start": "1231880",
    "end": "1238600"
  },
  {
    "text": "and do this with threads launch 100,000 threads like that's that's not going to work uh you're going to get it out of",
    "start": "1238600",
    "end": "1243799"
  },
  {
    "text": "memory especially if you do this on the jvm U but with co- routines this really just creates 100,000 objects and then",
    "start": "1243799",
    "end": "1250200"
  },
  {
    "text": "there's a single thread with a Looper uh that basically is just waiting one second until all these delays are up and",
    "start": "1250200",
    "end": "1257320"
  },
  {
    "text": "then it just runs through the $100,000 objects and calls their um the the print method and so this is actually only one",
    "start": "1257320",
    "end": "1263159"
  },
  {
    "text": "thread just 100,000 objects that are really lightweight compared to uh something like threads which are very",
    "start": "1263159",
    "end": "1270520"
  },
  {
    "start": "1270000",
    "end": "1593000"
  },
  {
    "text": "heavyweight okay um that was just kind of a quick Whirlwind tour of a bunch of features of the language uh and I'm",
    "start": "1270520",
    "end": "1277120"
  },
  {
    "text": "going to try and reference that over and over again of why cotlin uh is something",
    "start": "1277120",
    "end": "1282880"
  },
  {
    "text": "that started for the jvm and then moved outside of that space and so when I think about",
    "start": "1282880",
    "end": "1289559"
  },
  {
    "text": "something like multiplatform and running everywhere um the the modern version of",
    "start": "1289559",
    "end": "1295360"
  },
  {
    "text": "this the modern version of this is really uh three platforms which is um",
    "start": "1295360",
    "end": "1300520"
  },
  {
    "text": "Native which I'm representing uh representing with iOS but this could be",
    "start": "1300520",
    "end": "1305880"
  },
  {
    "text": "native running on like a microcontroller or your desktop or whatever um then you",
    "start": "1305880",
    "end": "1311279"
  },
  {
    "text": "have jbm Java bik code uh which I'm representing with Android but it could just be you know running on your backend",
    "start": "1311279",
    "end": "1318240"
  },
  {
    "text": "server uh and then the web which I'm representing just with a a Chrome icon",
    "start": "1318240",
    "end": "1323440"
  },
  {
    "text": "but obviously all web browsers or even potentially a JavaScript engine that's not uh a browser no JS or maybe just an",
    "start": "1323440",
    "end": "1331720"
  },
  {
    "text": "embedded uh bed JavaScript engine in another application but really it's the the",
    "start": "1331720",
    "end": "1337440"
  },
  {
    "text": "platform um the the targeted platforms that are important Java B code JavaScript and Native that gives you",
    "start": "1337440",
    "end": "1344320"
  },
  {
    "text": "that gives you everywhere and the important thing is uh you can get everywhere with just native right like",
    "start": "1344320",
    "end": "1351480"
  },
  {
    "text": "native code can run everywhere uh you can do Native code on Android you could",
    "start": "1351480",
    "end": "1356559"
  },
  {
    "text": "do Native code on desktop you do Native code in the browser with web assembly uh but these aren't inherently",
    "start": "1356559",
    "end": "1363480"
  },
  {
    "text": "intrinsic to each of these platforms right if you write a native application for Android it's very different than how",
    "start": "1363480",
    "end": "1369039"
  },
  {
    "text": "a normal application is built with the managed B code and the SDK they provide",
    "start": "1369039",
    "end": "1374520"
  },
  {
    "text": "and for the browser web assembly runs in certain contexts but can't do stuff like interacting with the Dom the actual",
    "start": "1374520",
    "end": "1380600"
  },
  {
    "text": "JavaScript that you know traditionally we associate with the browser and so cotlin has a notion of",
    "start": "1380600",
    "end": "1388360"
  },
  {
    "text": "platform independent and platform dependent cotlin and what it does is when when we",
    "start": "1388360",
    "end": "1393960"
  },
  {
    "text": "use cotlin uh traditionally we had been talking about cotlin targeting the jvm whether this was for you know backend",
    "start": "1393960",
    "end": "1400760"
  },
  {
    "text": "servers desktop applications or Android but over the last couple years um Jeet",
    "start": "1400760",
    "end": "1406159"
  },
  {
    "text": "brains has come to realize and and if you link back to all the language features that I've walked through there's nothing specific about the jvm",
    "start": "1406159",
    "end": "1413799"
  },
  {
    "text": "in the language itself it's just features of a a modern language features that we would expect of any language and",
    "start": "1413799",
    "end": "1419960"
  },
  {
    "text": "there's nothing that really prevents that from targeting a backend a language",
    "start": "1419960",
    "end": "1425640"
  },
  {
    "text": "back like a compilation backend different from java B code and so the Jeet brain started with uh",
    "start": "1425640",
    "end": "1432480"
  },
  {
    "text": "JavaScript uh about two two and a half years ago at this point where you could compile platform uh independent",
    "start": "1432480",
    "end": "1441240"
  },
  {
    "text": "cotlin which I'll talk more about what that means later on uh you can compile that directly to",
    "start": "1441240",
    "end": "1447360"
  },
  {
    "text": "JavaScript and then over the last year year and a half or so they've targeted native as well so you can now compile",
    "start": "1447360",
    "end": "1454120"
  },
  {
    "text": "this platform independent cotlin to uh to Native but then there's also platform",
    "start": "1454120",
    "end": "1459679"
  },
  {
    "text": "dependent cotlin uh so like if I'm writing cotland for Android I need to be able to reference Android types and if",
    "start": "1459679",
    "end": "1466679"
  },
  {
    "text": "I'm running cotland for JavaScript maybe I need to reference types from the Dom or if I'm running code for Native I need",
    "start": "1466679",
    "end": "1472679"
  },
  {
    "text": "to reference types from like lib curl or you know any native library that I'm interacting",
    "start": "1472679",
    "end": "1479159"
  },
  {
    "text": "with uh and so when you use cotlin in a multiplatform context the way that I've seen the way that it's easy to get",
    "start": "1479159",
    "end": "1486760"
  },
  {
    "text": "started with is to separate this out from the rest of your application where you have say a library that you know is",
    "start": "1486760",
    "end": "1494039"
  },
  {
    "text": "uh either business logic or just some encapsulated piece of code that you could then write in cin compile to each",
    "start": "1494039",
    "end": "1501080"
  },
  {
    "text": "of these backends and then consume it as a library if this is Android or Java",
    "start": "1501080",
    "end": "1507039"
  },
  {
    "text": "consume it as just a jar if it's JavaScript you just consume it as um you",
    "start": "1507039",
    "end": "1512240"
  },
  {
    "text": "know through npm or whatever you don't even need to know that it was written in cotlin and if it's native you just consume essentially the header and then",
    "start": "1512240",
    "end": "1519840"
  },
  {
    "text": "the B the compiled binary and the rest of your app gets to be written in the thing you are already writing it in C",
    "start": "1519840",
    "end": "1526080"
  },
  {
    "text": "C++ go rust Swift uh JavaScript typescripts or Javas Scola",
    "start": "1526080",
    "end": "1531919"
  },
  {
    "text": "groovy or even cotlin right if you're targeting Java back end um but this uh this is like a very",
    "start": "1531919",
    "end": "1539120"
  },
  {
    "text": "easy way to introduce it into your app but you don't have to do this if you want to have cotlin everywhere you could",
    "start": "1539120",
    "end": "1544640"
  },
  {
    "text": "have just your app be this whole multiplatform abstraction where the majority of it is cotlin and there's",
    "start": "1544640",
    "end": "1551279"
  },
  {
    "text": "very specific parts that are platform specific um and I want to look I want to",
    "start": "1551279",
    "end": "1556679"
  },
  {
    "text": "go through an example of what this actually would look like in order to motivate it a little bit more",
    "start": "1556679",
    "end": "1562919"
  },
  {
    "text": "I'm going to use a a concrete example which is a game we're going to build a tiny little game uh which is",
    "start": "1562919",
    "end": "1569480"
  },
  {
    "text": "Tic-tac-toe and we're going to have it run on four platforms uh Android through",
    "start": "1569480",
    "end": "1574640"
  },
  {
    "text": "the Java back end iOS through native backend the web through the JavaScript back end and then the server can be",
    "start": "1574640",
    "end": "1581440"
  },
  {
    "text": "through any backend uh could be running Java and using the Java by code could be",
    "start": "1581440",
    "end": "1586600"
  },
  {
    "text": "nodejs pulling in JavaScript or uh cc++ go rust whatever through the",
    "start": "1586600",
    "end": "1592480"
  },
  {
    "text": "native back end but I'm an Android developer so the way that I usually teach cotlin is by starting through Java",
    "start": "1592480",
    "end": "1599360"
  },
  {
    "text": "and then working my way to the other platforms and so if I've written this game uh say I just have written the",
    "start": "1599360",
    "end": "1605440"
  },
  {
    "text": "model here for representing the game and I've written it in Java so I have you know whether something's an X or an O I",
    "start": "1605440",
    "end": "1612279"
  },
  {
    "text": "have the board which is just a two-dimensional array of the cells and whether they're marked or not the player has a name and whether",
    "start": "1612279",
    "end": "1619559"
  },
  {
    "text": "they've assigned the x or the O you don't need to like really pay attention to what's going on here a state machine",
    "start": "1619559",
    "end": "1624919"
  },
  {
    "text": "these are the states of the state machine it's either one of the two players moves one of the two players have won or it was a draw nobody won",
    "start": "1624919",
    "end": "1633080"
  },
  {
    "text": "then you have the game which encapsulates all this has the state machine and has the two players and the",
    "start": "1633080",
    "end": "1639600"
  },
  {
    "start": "1640000",
    "end": "1753000"
  },
  {
    "text": "board and so you know C I've been hammering on the cotlin interupt story",
    "start": "1640039",
    "end": "1645840"
  },
  {
    "text": "between uh cotlin and Java and it's something Jeet brains has certainly been talking about and so we have these",
    "start": "1645840",
    "end": "1651120"
  },
  {
    "text": "objects and these objects are are connected in a you know a tiny little dependency graph and maybe you just go and grab the",
    "start": "1651120",
    "end": "1657840"
  },
  {
    "text": "player class and say well this looks like that um this is just a dumb carrier object of two properties it's the name",
    "start": "1657840",
    "end": "1664600"
  },
  {
    "text": "of the person and the name of the player and the uh whether they're an X or an O",
    "start": "1664600",
    "end": "1669919"
  },
  {
    "text": "uh and you know I have to write this equals hash code in two string and I I just talked about how these data classes",
    "start": "1669919",
    "end": "1675279"
  },
  {
    "text": "allow you to create record like types this is a good candidate for turning into a cotland data class and now I get",
    "start": "1675279",
    "end": "1681200"
  },
  {
    "text": "to you know show my show my boss that I replaced you know 150 lines of java boiler plate with just one line of code",
    "start": "1681200",
    "end": "1687799"
  },
  {
    "text": "uh now I'm you know more efficient as a programmer and uh but this is a little weird um because what we've done is",
    "start": "1687799",
    "end": "1693880"
  },
  {
    "text": "actually created a cyclic dependency between two languages we have our um our",
    "start": "1693880",
    "end": "1699279"
  },
  {
    "text": "Mark class which is written in Java which was the xro O uh enum we have our",
    "start": "1699279",
    "end": "1704399"
  },
  {
    "text": "player class which then has to hold on to a mark reference for each player and",
    "start": "1704399",
    "end": "1709480"
  },
  {
    "text": "then our game board has to hold on to two player instances so we have Java referencing cotlin and then cotlin",
    "start": "1709480",
    "end": "1714600"
  },
  {
    "text": "referencing back into Java and this is one like compilation unit so all this code is going to be compiled in one one",
    "start": "1714600",
    "end": "1721559"
  },
  {
    "text": "module this is like our our model but this actually works even though it seems like it shouldn't like this cyclic thing",
    "start": "1721559",
    "end": "1728039"
  },
  {
    "text": "shouldn't work because either cotlin the cotland compiler runs first which compiles the Java B code then the Java",
    "start": "1728039",
    "end": "1734440"
  },
  {
    "text": "compiler runs which pulls in that Java B code as a library and compiles a Java or the opposite has to happen Java compiler",
    "start": "1734440",
    "end": "1741399"
  },
  {
    "text": "runs uh spits out Java by code and then the cotlin compiler runs and eats the Java B code and spits out you know more",
    "start": "1741399",
    "end": "1748080"
  },
  {
    "text": "Java B code for the cot line so it doesn't seem like this should work but it does work uh and this is one of again like",
    "start": "1748080",
    "end": "1756320"
  },
  {
    "text": "it's not even just about having the interruptibility between the two languages it's about making the tool",
    "start": "1756320",
    "end": "1761519"
  },
  {
    "text": "chain work in a way that's conducive to you migrating to this language because otherwise like we don't need this",
    "start": "1761519",
    "end": "1767480"
  },
  {
    "text": "language right there's enough languages I mean every now and then a new language is invented and it comes with a very",
    "start": "1767480",
    "end": "1773679"
  },
  {
    "text": "specific purpose but another language on the jvm or at least that started on the jvm doesn't seem like something we need",
    "start": "1773679",
    "end": "1780640"
  },
  {
    "text": "uh and so it's really important to have these this really good interruptibility story both in the language but also in",
    "start": "1780640",
    "end": "1785760"
  },
  {
    "text": "the tool chain uh the way this actually works is that the cotlin compiler is both a",
    "start": "1785760",
    "end": "1791159"
  },
  {
    "text": "cotlin compiler and a Java compiler except it doesn't actually compile the Java code the whole way it goes like 50%",
    "start": "1791159",
    "end": "1798679"
  },
  {
    "text": "of the way just so that it can read enough to understand what will be compiled by the Java compiler and so you",
    "start": "1798679",
    "end": "1805120"
  },
  {
    "text": "feed both things our four Java classes and our one cotlin class into the cotland compiler it compiles only the",
    "start": "1805120",
    "end": "1811519"
  },
  {
    "text": "cotlin class using the what it knows from the Java classes that will be",
    "start": "1811519",
    "end": "1817200"
  },
  {
    "text": "compiled later and then the Java compiler runs after the cotlin compiler",
    "start": "1817200",
    "end": "1823039"
  },
  {
    "text": "and it takes in the class file the Java B code class file of just the one cotlin class CL and then our other four Java",
    "start": "1823039",
    "end": "1830360"
  },
  {
    "text": "classes get compiled again except this time they get compiled the whole way and so they spit you spit out the four class",
    "start": "1830360",
    "end": "1836600"
  },
  {
    "text": "files for Java code and then the two bite code outputs are combined and that's how we get like this cyclic",
    "start": "1836600",
    "end": "1842880"
  },
  {
    "text": "dependency to work and then the standard library or any other libraries that you're using",
    "start": "1842880",
    "end": "1848600"
  },
  {
    "text": "any other Java libraries are just available on both class paths uh and be they are made available",
    "start": "1848600",
    "end": "1856480"
  },
  {
    "text": "to any Downstream consumer and if you want like this can be like I said this can all just be encapsulated in you know",
    "start": "1856480",
    "end": "1862919"
  },
  {
    "text": "a module and nobody Downstream of you has to know you've written in",
    "start": "1862919",
    "end": "1868240"
  },
  {
    "text": "cotlin uh so if we're I've just been talking about the this like hypothetical model of this game uh and only for um",
    "start": "1868760",
    "end": "1876840"
  },
  {
    "text": "for for Android I guess for the Java back end but if we take a step back and look at what all is required for",
    "start": "1876840",
    "end": "1882279"
  },
  {
    "text": "building something even as simple as just a tictac toe game uh where we actually want to host it and deploy it",
    "start": "1882279",
    "end": "1889840"
  },
  {
    "text": "uh we have our mobile clients where you know they're they're pretty much going to be the same thing right like they they're going to have view models that",
    "start": "1889840",
    "end": "1895600"
  },
  {
    "text": "represent what's being displayed on screen maybe there's presenters which deal with talking to the network back",
    "start": "1895600",
    "end": "1900799"
  },
  {
    "text": "end uh and then with the web the web is a different client it probably renders a little bit differently at least a more",
    "start": "1900799",
    "end": "1907760"
  },
  {
    "text": "sophisticated app would but there's still backend infrastructure that you could share which is like how you talk",
    "start": "1907760",
    "end": "1913360"
  },
  {
    "text": "to the server and then you have the server API which then uh talks which interacts with",
    "start": "1913360",
    "end": "1920320"
  },
  {
    "text": "the rest of this where they all share this uh the business logic which is maybe like the state machine of the game",
    "start": "1920320",
    "end": "1925799"
  },
  {
    "text": "and then the models which represent which was what we were just talking about and so we've really only done one",
    "start": "1925799",
    "end": "1930880"
  },
  {
    "text": "thing here we've just converted like the most basic part of our application to cin",
    "start": "1930880",
    "end": "1936679"
  },
  {
    "text": "uh can we do the rest and how does that work so if we look at just the mobile",
    "start": "1936679",
    "end": "1941919"
  },
  {
    "start": "1940000",
    "end": "1977000"
  },
  {
    "text": "clients The View models these are also just dumb data carriers so we can just write these in cotlin and then they'll",
    "start": "1941919",
    "end": "1948360"
  },
  {
    "text": "uh because they're platform independent they they don't which again I'm I unfortunately I only distinguish between",
    "start": "1948360",
    "end": "1954360"
  },
  {
    "text": "platform independent and platform dependent a little more deeply at the end um but there's no references to like",
    "start": "1954360",
    "end": "1959799"
  },
  {
    "text": "a platform here we're not talking we're not referencing iOS uh like a UI view controller or an Android view or a web",
    "start": "1959799",
    "end": "1967639"
  },
  {
    "text": "like anything in the Dom these are just dumb objects so they're trivially compiled to every platform",
    "start": "1967639",
    "end": "1975278"
  },
  {
    "start": "1977000",
    "end": "2040000"
  },
  {
    "text": "uh presenter is also very similar except um a presenter has to talk to say",
    "start": "1978840",
    "end": "1985320"
  },
  {
    "text": "persistent so maybe you know like our games are being saved locally and so we're going to take that in as a a",
    "start": "1985320",
    "end": "1993120"
  },
  {
    "text": "reference and then uh we you know query query like the game store for so this is",
    "start": "1993120",
    "end": "1998159"
  },
  {
    "text": "the the like new game screen where we show how many games you've won so maybe we query for the totals and then we just",
    "start": "1998159",
    "end": "2003799"
  },
  {
    "text": "return that dumb object and then when you're actually in a game like that takes in which the ID",
    "start": "2003799",
    "end": "2008960"
  },
  {
    "text": "of the game you're playing the game store so that I can query the game information um using like a type called",
    "start": "2008960",
    "end": "2015679"
  },
  {
    "text": "observable here because the game State's going to update over time and your UI has to update then when the game State",
    "start": "2015679",
    "end": "2021279"
  },
  {
    "text": "changes an observable is just a way to like push updates to a model but nothing platform specific here and then",
    "start": "2021279",
    "end": "2027399"
  },
  {
    "text": "interactions from the UI come from here and it really just and or if you like Redux you've done the web stuff you can",
    "start": "2027399",
    "end": "2033519"
  },
  {
    "text": "have like States coming in and States going out and you're just a state machine but this is all just pure like cotlin code",
    "start": "2033519",
    "end": "2040639"
  },
  {
    "start": "2040000",
    "end": "2070000"
  },
  {
    "text": "again and so it it becomes really easy to see that each of these layers um",
    "start": "2040639",
    "end": "2045840"
  },
  {
    "text": "don't have anything specific maybe the web like this is a super dumb example of tic-tac-toe like",
    "start": "2045840",
    "end": "2053240"
  },
  {
    "text": "you would you could probably just reuse these models a more complex product you'd probably split split these out uh",
    "start": "2053240",
    "end": "2060118"
  },
  {
    "text": "but the client back end is where things get a little more interesting so I've just been talking about you know dumb records that carry data and pure cotlin",
    "start": "2060119",
    "end": "2067040"
  },
  {
    "text": "logic in the Pres enters um the game store that I reference is persistence and persistence",
    "start": "2067040",
    "end": "2073200"
  },
  {
    "start": "2070000",
    "end": "2136000"
  },
  {
    "text": "is something very specific to each platform and now I can get into something where there's the difference",
    "start": "2073200",
    "end": "2078800"
  },
  {
    "text": "between platform independent and platform dependent Colin so we start with an interface uh I didn't talk about",
    "start": "2078800",
    "end": "2085040"
  },
  {
    "text": "this suspend keyword that's another co- routines thing it basically means the function is asynchronous uh and so it can only be",
    "start": "2085040",
    "end": "2091760"
  },
  {
    "text": "called in certain contexts but you can think of it as like a a function that calls a a function that has a call back",
    "start": "2091760",
    "end": "2098160"
  },
  {
    "text": "under the hood but you don't program like it has a call back you program in this nice imperative flow and that's",
    "start": "2098160",
    "end": "2103920"
  },
  {
    "text": "because this is going to hit like a database or the file system uh in order to look up these these like totals for",
    "start": "2103920",
    "end": "2110599"
  },
  {
    "text": "displaying the overview and then we have the current state of a particular game and then the",
    "start": "2110599",
    "end": "2116200"
  },
  {
    "text": "ability to actually like record a move which we have to talk we have to like call out to the server and like ask it",
    "start": "2116200",
    "end": "2123800"
  },
  {
    "text": "to ask it to play this move also a asynchronous operation and so",
    "start": "2123800",
    "end": "2130200"
  },
  {
    "text": "this is just an interface but we need this we need this logic of how this is actually",
    "start": "2130200",
    "end": "2135599"
  },
  {
    "text": "implemented uh and so the interface is just again boring cotlin but the",
    "start": "2135599",
    "end": "2140839"
  },
  {
    "start": "2136000",
    "end": "2152000"
  },
  {
    "text": "implementations of that have to be platform specific on Android we want you know maybe a database on iOS core data",
    "start": "2140839",
    "end": "2147599"
  },
  {
    "text": "on the web um maybe like local storage and so this is where we start",
    "start": "2147599",
    "end": "2153800"
  },
  {
    "text": "getting into how we differentiate between platform specific and platform agnostic uh cotlin and it doesn't look",
    "start": "2153800",
    "end": "2161280"
  },
  {
    "text": "that different um so for the Android one",
    "start": "2161280",
    "end": "2167040"
  },
  {
    "text": "um uh like this sqlite database type is a Android SD it's a type in the Android",
    "start": "2167480",
    "end": "2173560"
  },
  {
    "text": "SDK only available to Android platforms and so what would have to happen is now",
    "start": "2173560",
    "end": "2178960"
  },
  {
    "text": "we're writing code that's platform specific and these have would have to be in um it's not quite separate",
    "start": "2178960",
    "end": "2186079"
  },
  {
    "text": "compilation units but uh you you sort of compile the same project multiple times",
    "start": "2186079",
    "end": "2191200"
  },
  {
    "text": "and then mix and match which source files are contributing to it and so the",
    "start": "2191200",
    "end": "2196640"
  },
  {
    "text": "the interface you could like have in a library but then you start getting just a tons of like modules for the only",
    "start": "2196640",
    "end": "2202680"
  },
  {
    "text": "purposes is multiplatform uh what you really want is just the the interface and the implementation and sort of one",
    "start": "2202680",
    "end": "2208520"
  },
  {
    "text": "representation of a module and so the interface and this platform specific implementation would be compiled uh by",
    "start": "2208520",
    "end": "2215800"
  },
  {
    "text": "cotlin C and Java C in one module and then we get to like iOS it's still the",
    "start": "2215800",
    "end": "2220880"
  },
  {
    "text": "same module but it's a separate compilation and so here we reference like core data and you know I'm not",
    "start": "2220880",
    "end": "2225920"
  },
  {
    "text": "showing the implementations because they don't they don't really matter here uh but you're you're talking to the actual",
    "start": "2225920",
    "end": "2230960"
  },
  {
    "text": "native platform and you're doing that from cotlin uh we're going to look at how you can do that from different",
    "start": "2230960",
    "end": "2236040"
  },
  {
    "text": "languages in a second uh so for uh because cotlin was",
    "start": "2236040",
    "end": "2242599"
  },
  {
    "text": "built to start interacting with uh the jbm as its primary um",
    "start": "2242599",
    "end": "2248920"
  },
  {
    "text": "primary platform that it runs on the the interupt there is very strong and the way Java works is you don't really there's no real header files you just",
    "start": "2248920",
    "end": "2255720"
  },
  {
    "text": "kind of infer the headers from the jar itself the jar which is has the Java B",
    "start": "2255720",
    "end": "2260960"
  },
  {
    "text": "code contains like a representation of what apis you can call uh a native that's a little bit different and so for",
    "start": "2260960",
    "end": "2266920"
  },
  {
    "text": "something like calling into uh core data you would need the the headers that you're actually able to link against and",
    "start": "2266920",
    "end": "2273560"
  },
  {
    "text": "so the cotlin native compiler allows you to specify which headers uh you want to be made available",
    "start": "2273560",
    "end": "2280920"
  },
  {
    "text": "as cotlin API and so uh we'll look at this a little bit more later but it basically",
    "start": "2280920",
    "end": "2286839"
  },
  {
    "text": "you give it a header and it creates this um almost like stubs in pure cotlin that",
    "start": "2286839",
    "end": "2292599"
  },
  {
    "text": "you can then interact with so instead of having to if you don't if you only know cotlin and want to write something",
    "start": "2292599",
    "end": "2297800"
  },
  {
    "text": "targeting native like iOS you don't actually have to interact with something like uh Swift or objective c you can",
    "start": "2297800",
    "end": "2305000"
  },
  {
    "text": "allow cotlin to synthesize uh stubs in the cotland language that you only interact",
    "start": "2305000",
    "end": "2311640"
  },
  {
    "text": "with and then JavaScript we use like local storage uh and what's interesting here is that kotlin's standard library",
    "start": "2311640",
    "end": "2319480"
  },
  {
    "text": "is something that also has a platform agnostic and platform specific versions",
    "start": "2319480",
    "end": "2324640"
  },
  {
    "text": "so there's apis that you can call in that that common code like the interface or the code that's just like the view",
    "start": "2324640",
    "end": "2330880"
  },
  {
    "text": "models you have like a list you have you know Primitives like string and integers",
    "start": "2330880",
    "end": "2336240"
  },
  {
    "text": "uh but if you're compiling to a plat platform specific uh standard Library compiling against the platform specific standard",
    "start": "2336240",
    "end": "2343640"
  },
  {
    "text": "Library you have um you have types that are available in only JavaScript like",
    "start": "2343640",
    "end": "2349200"
  },
  {
    "text": "the Dom storage uh Dom storage apis and so these are you know they're they're",
    "start": "2349200",
    "end": "2355560"
  },
  {
    "text": "again like stubs they don't actually exist as implementations when you compile this code to javascripts which",
    "start": "2355560",
    "end": "2361079"
  },
  {
    "text": "we'll see in a couple more slides it actually just write it calls into the JavaScript apis directly",
    "start": "2361079",
    "end": "2367560"
  },
  {
    "text": "and this is one mechanism that allows you to have both the platform agnostic client backend which is the the concept",
    "start": "2367560",
    "end": "2373920"
  },
  {
    "text": "of storage and then platform specific implementations that are specific to Android iOS and the",
    "start": "2373920",
    "end": "2380599"
  },
  {
    "text": "web uh and then business logic is just boring it's a you know a bunch of just State machine code which you don't need",
    "start": "2380599",
    "end": "2386000"
  },
  {
    "text": "to look at and that can be in cotland and then everything you know everything becomes cotland",
    "start": "2386000",
    "end": "2391839"
  },
  {
    "text": "multiplatform um and then uh all that's left when you know if we do this itical thing and we",
    "start": "2391839",
    "end": "2398160"
  },
  {
    "text": "go like full cotlin or whatever um all that's left is the The View part the rendering part which is platform",
    "start": "2398160",
    "end": "2404760"
  },
  {
    "text": "specific and so in Android in cin or Java you could write you know Android's version of views in iOS uh this is Swift",
    "start": "2404760",
    "end": "2413160"
  },
  {
    "start": "2405000",
    "end": "2423000"
  },
  {
    "text": "so cotlin types are made available in Swift and Objective C uh and so like",
    "start": "2413160",
    "end": "2418520"
  },
  {
    "text": "this UI model which came from the the presenter that was written in cotlin you can use in",
    "start": "2418520",
    "end": "2423839"
  },
  {
    "start": "2423000",
    "end": "2451000"
  },
  {
    "text": "Swift JavaScript uh because it's not typed um you know doesn't really matter you",
    "start": "2423839",
    "end": "2429599"
  },
  {
    "text": "can just write the JavaScript as if the types are there uh I believe it will generate typescript definitions from",
    "start": "2429599",
    "end": "2436200"
  },
  {
    "text": "cotlin uh and in a second I'll Show a slide it actually does the",
    "start": "2436200",
    "end": "2441480"
  },
  {
    "text": "opposite and then in in like Java or whatever this is like Jax Jax RS or whatever it's called for writing out a",
    "start": "2441480",
    "end": "2447599"
  },
  {
    "text": "Java back end and so this is like a very pretty picture where you have all of your cotlin code you're using cotlin",
    "start": "2447599",
    "end": "2454960"
  },
  {
    "start": "2451000",
    "end": "2505000"
  },
  {
    "text": "because maybe you're like this small shop or an indiv ual developer and you have the ability to Target all three of",
    "start": "2454960",
    "end": "2460359"
  },
  {
    "text": "these platforms where there's there's a lot of ways people can get into these platforms uh that no matter how people",
    "start": "2460359",
    "end": "2466599"
  },
  {
    "text": "get in it's all the same code and so you don't have to worry about uh the fact that like this person is using um a",
    "start": "2466599",
    "end": "2474560"
  },
  {
    "text": "Chromebook and Chromebook has um like installable Chrome like Chrome apps that",
    "start": "2474560",
    "end": "2479720"
  },
  {
    "text": "are just websites that you can install or Android has this thing called instant apps which is maybe they visit a website",
    "start": "2479720",
    "end": "2484880"
  },
  {
    "text": "and it just in time installs and launches an app uh or iOS is getting support or Mac OS is getting support for",
    "start": "2484880",
    "end": "2491359"
  },
  {
    "text": "Native apps uh next year and so your IOS app can now run on the desktop and because it's all the same code it",
    "start": "2491359",
    "end": "2497760"
  },
  {
    "text": "doesn't matter how the user gets into your system um like your business like everything is just the same because it's all written in the same",
    "start": "2497760",
    "end": "2505520"
  },
  {
    "text": "codebase okay uh I want to talk very very quickly about how each of these implementations work um I talked about",
    "start": "2507280",
    "end": "2514480"
  },
  {
    "start": "2513000",
    "end": "2523000"
  },
  {
    "text": "the you know I talked about Java a lot um that Java is the thing that I know the jvm uh and the the Java C",
    "start": "2514480",
    "end": "2521000"
  },
  {
    "text": "compilation is like the thing I know the best um so I already showed how that worked for javascripts um the way that",
    "start": "2521000",
    "end": "2529000"
  },
  {
    "text": "types from the way that apis from JavaScript are generally exposed is through stubs that you can write",
    "start": "2529000",
    "end": "2534800"
  },
  {
    "text": "yourself or that you can have generated automatically uh so I I work on something that has a that's a Chrome",
    "start": "2534800",
    "end": "2540240"
  },
  {
    "text": "extension written in cotlin and so I've defined Chrome's apis using interfaces stubs with this",
    "start": "2540240",
    "end": "2547520"
  },
  {
    "text": "external annotation uh and then an implementation of that which is like a a property that is the the root that how",
    "start": "2547520",
    "end": "2554559"
  },
  {
    "text": "you get to that object called Chrome and like I've named it how you would name it in cotlin but then I can tell it how",
    "start": "2554559",
    "end": "2560119"
  },
  {
    "text": "it's actually named in JavaScript and now if there were typescript definitions for the Chrome",
    "start": "2560119",
    "end": "2565480"
  },
  {
    "text": "apis which there might be I haven't actually looked uh there's a tool which can take any typescript definition and",
    "start": "2565480",
    "end": "2570720"
  },
  {
    "text": "generate these stubs for you automatically so if you're pulling in dependencies uh that have typescript definitions you don't have to write any",
    "start": "2570720",
    "end": "2577480"
  },
  {
    "text": "of this yourself and what's nice is when this actually gets compiled so this is a a",
    "start": "2577480",
    "end": "2582680"
  },
  {
    "text": "line of code from the Chrome extension where I'm creating an object and I'm passing in reference to Chrome storage",
    "start": "2582680",
    "end": "2588480"
  },
  {
    "text": "and I'm using the like you know the cotlin uppercase C property reference uh when this actually gets compiled to",
    "start": "2588480",
    "end": "2594680"
  },
  {
    "start": "2593000",
    "end": "2612000"
  },
  {
    "text": "Colin it looks like what you would have written if you wrote um wrote the JavaScript direct directly which is the",
    "start": "2594680",
    "end": "2600680"
  },
  {
    "text": "lowercase Chrome reference and you see like the other code kind of got mangled a little bit because of how it um how",
    "start": "2600680",
    "end": "2607760"
  },
  {
    "text": "the cotlin compiler represents stuff in JavaScript uh but it spits out just pure",
    "start": "2607760",
    "end": "2613760"
  },
  {
    "start": "2612000",
    "end": "2634000"
  },
  {
    "text": "JavaScript it's like JavaScript that you would have written had you written it directly uh it's not exactly idiomatic",
    "start": "2613760",
    "end": "2620480"
  },
  {
    "text": "but it's it's nice enough that you definitely could if you wanted to you could interact it from interact with it from other JavaScript or other",
    "start": "2620480",
    "end": "2626599"
  },
  {
    "text": "typescript code and then native which is the most interesting one that this like emerging",
    "start": "2626599",
    "end": "2632359"
  },
  {
    "text": "platform it's the newest um where I showed earlier about how we had the data",
    "start": "2632359",
    "end": "2637680"
  },
  {
    "text": "thing and we pass in the headers um the way this actually works is you give it a package name and it works similar to the",
    "start": "2637680",
    "end": "2643680"
  },
  {
    "text": "typescript to cotlin Tool where it's going to take in the headers read them and then turn them into like cotlin",
    "start": "2643680",
    "end": "2650440"
  },
  {
    "text": "specific stubs in this package and so here we would have an import like if if",
    "start": "2650440",
    "end": "2655559"
  },
  {
    "text": "my gam store. had a core dat gamestore type uh it would be we I would just",
    "start": "2655559",
    "end": "2661160"
  },
  {
    "text": "import that as if it was something in cotlin and you know I never really have to know that it was written in another",
    "start": "2661160",
    "end": "2666200"
  },
  {
    "text": "language uh the way that this compiler works is",
    "start": "2666200",
    "end": "2672480"
  },
  {
    "start": "2669000",
    "end": "2728000"
  },
  {
    "text": "quite similar to how the Java compiler Works uh where the header Files come in",
    "start": "2672480",
    "end": "2677559"
  },
  {
    "text": "uh into the the native compiler which is called Conan uh and then it spits out",
    "start": "2677559",
    "end": "2682599"
  },
  {
    "text": "llbm ir and so this is how uh it essentially was free not free because",
    "start": "2682599",
    "end": "2688920"
  },
  {
    "text": "you know there's work being done but the ability to Target every platform that lovm targets came for free and so this",
    "start": "2688920",
    "end": "2694760"
  },
  {
    "text": "is what gets you running on iOS Mac OS Windows Linux web assembly uh and then",
    "start": "2694760",
    "end": "2700920"
  },
  {
    "text": "you know lvm takes in uh the headers as well and it spits out the platform specific machine code that can run on",
    "start": "2700920",
    "end": "2706760"
  },
  {
    "text": "all those platforms and so the hard work here is just translating cotlin into lovm and",
    "start": "2706760",
    "end": "2712760"
  },
  {
    "text": "then everything else you U like all the optimizations and stuff basically come for",
    "start": "2712760",
    "end": "2719280"
  },
  {
    "text": "free I'm skipping a section because I'm out of time",
    "start": "2723160",
    "end": "2728280"
  },
  {
    "start": "2728000",
    "end": "2755000"
  },
  {
    "text": "uh so I work on a project called SK search just a little side project just so that I can mess around with this kind",
    "start": "2728280",
    "end": "2734079"
  },
  {
    "text": "of stuff um and it it runs it's a Android app and a Chrome extension and so I this pattern that I have",
    "start": "2734079",
    "end": "2741319"
  },
  {
    "text": "implemented or that I have talked about in the um Tic Tac Toe uh you can kind of",
    "start": "2741319",
    "end": "2747280"
  },
  {
    "text": "see here where the Orange is like the cotland spe the cotland platform agnostic stuff and then there's front",
    "start": "2747280",
    "end": "2752880"
  },
  {
    "text": "ends for Android and for the web and so the way this manifests is that now I I essentially just write something once",
    "start": "2752880",
    "end": "2758960"
  },
  {
    "text": "and it runs on Android and then when you're in Chrome it um like it it's a very different user interface which is",
    "start": "2758960",
    "end": "2765000"
  },
  {
    "text": "just the the Omni box in Chrome and so very very different front ends but same exact backends and then for uh I I don't",
    "start": "2765000",
    "end": "2773040"
  },
  {
    "text": "do iOS it's an Android app so I don't do iOS uh but the the cotland conference app uh that Jeet bra uh hosts every year",
    "start": "2773040",
    "end": "2780800"
  },
  {
    "text": "they've written their app in this entire model where it's the Android and iOS app share essentially all their code",
    "start": "2780800",
    "end": "2787760"
  },
  {
    "text": "code uh and so what I really wanted to convey here is that you know the language didn't start out as something",
    "start": "2787760",
    "end": "2792960"
  },
  {
    "start": "2788000",
    "end": "2864000"
  },
  {
    "text": "that was intended to run everywhere uh but because it's just a language that has been built in built with features",
    "start": "2792960",
    "end": "2799640"
  },
  {
    "text": "that any modern language could have uh and that it becomes then I don't want to say easy but it becomes almost obvious",
    "start": "2799640",
    "end": "2807359"
  },
  {
    "text": "that uh targeting more than Java was something that was going to happen and by doing only JavaScript and uh lovm and",
    "start": "2807359",
    "end": "2815760"
  },
  {
    "text": "everything it provides you essentially get every platform Java by code JavaScript and native means you're going",
    "start": "2815760",
    "end": "2820920"
  },
  {
    "text": "to run everywhere but also you run in a way that's intrinsic to the platform you're not you're not running native",
    "start": "2820920",
    "end": "2826920"
  },
  {
    "text": "code in an Android app and having to do you know jumping through a bunch of Hoops to interface uh or even native",
    "start": "2826920",
    "end": "2833440"
  },
  {
    "text": "code running on the web where you basically only have web assembly as your your target which is useful for certain",
    "start": "2833440",
    "end": "2839079"
  },
  {
    "text": "things but if you're doing visual stuff the actual UI that the user interacts",
    "start": "2839079",
    "end": "2844400"
  },
  {
    "text": "with it's not the thing that you want to have at least not yet uh and so by targeting JavaScript you get the ability",
    "start": "2844400",
    "end": "2850079"
  },
  {
    "text": "to get you know the things that are intrinsic to that platform uh so that's all I have I have run a tiny bit over",
    "start": "2850079",
    "end": "2856760"
  },
  {
    "text": "time but I will be happy to stick around and answer any questions you guys have thank you",
    "start": "2856760",
    "end": "2864040"
  }
]