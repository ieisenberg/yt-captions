[
  {
    "text": "foreign",
    "start": "3780",
    "end": "6779"
  },
  {
    "text": "okay so thank you for the invitation it's a pleasure to speak here I was",
    "start": "16619",
    "end": "22320"
  },
  {
    "text": "already in at the debates meeting two days ago and there I found that about",
    "start": "22320",
    "end": "27539"
  },
  {
    "text": "half of the audience hadn't done Scala before so I had to derail my plan and",
    "start": "27539",
    "end": "33960"
  },
  {
    "text": "essentially give an intro to scada and only got back to the some of the Jews a",
    "start": "33960",
    "end": "39120"
  },
  {
    "text": "bit towards the end so I promised all of these guys to say well if you want to know more about what's really going on",
    "start": "39120",
    "end": "45239"
  },
  {
    "text": "going on for Scala 2.10 and so on come here so here I won't let myself be",
    "start": "45239",
    "end": "50340"
  },
  {
    "text": "derailed we go right in the middle of things apology to the newbies who haven't seen Scala before there's only a",
    "start": "50340",
    "end": "56520"
  },
  {
    "text": "couple of slides for you afterwards we sort of talk about what's new uh what's the Delta from what we have to what we",
    "start": "56520",
    "end": "63719"
  },
  {
    "text": "will have in a couple of months from now so today uh Scala is doing pretty well",
    "start": "63719",
    "end": "69360"
  },
  {
    "text": "uh he's just a non-uh exhaustive list of companies using it",
    "start": "69360",
    "end": "74479"
  },
  {
    "text": "Manish you mentioned the pH P meeting so one of the guys here Foursquare actually",
    "start": "74479",
    "end": "80100"
  },
  {
    "text": "migrated from PHP to Scala some years back I don't I hope they didn't regret",
    "start": "80100",
    "end": "85259"
  },
  {
    "text": "it uh no not really and there are lots and",
    "start": "85259",
    "end": "90960"
  },
  {
    "text": "lots of others so what we see typically where it's mainly used is web platforms",
    "start": "90960",
    "end": "96600"
  },
  {
    "text": "like LinkedIn Foursquare Twitter then also a lot in financial services in",
    "start": "96600",
    "end": "102600"
  },
  {
    "text": "particular trading platforms Financial modeling simulation and it's really a",
    "start": "102600",
    "end": "108420"
  },
  {
    "text": "lot of odd things lots of other areas as well and the the advantage that most",
    "start": "108420",
    "end": "113759"
  },
  {
    "text": "people see in scada is that it's very fast to first product because it's a pretty pretty agile you can use it like",
    "start": "113759",
    "end": "120180"
  },
  {
    "text": "a scripting language it can be very productive and it's scalable afterwards so you won't typically run out of steam",
    "start": "120180",
    "end": "127320"
  },
  {
    "text": "as you would run if you were writing PHP or Ruby or things like that it's it's a language with a fairly good performance",
    "start": "127320",
    "end": "134160"
  },
  {
    "text": "story so some statistics here if you see where are we",
    "start": "134160",
    "end": "139500"
  },
  {
    "text": "in the grand thing of things so that's just came out from I think data is that",
    "start": "139500",
    "end": "145020"
  },
  {
    "text": "uh some some analysts so there here you see",
    "start": "145020",
    "end": "150599"
  },
  {
    "text": "on that uh line that's the number of stack Overflow questions and that one is the number of GitHub projects and you",
    "start": "150599",
    "end": "157440"
  },
  {
    "text": "see Scala is not yet a mainstream language that would be the upper triangle but it's sort of a head uh just",
    "start": "157440",
    "end": "164040"
  },
  {
    "text": "in front of the pack of second tier languages and hopefully over time we can sort of shift this thing a little bit",
    "start": "164040",
    "end": "171300"
  },
  {
    "text": "more towards the upper right",
    "start": "171300",
    "end": "174620"
  },
  {
    "text": "here's another graph that's the number of job ads indeed.com so it's a job ad",
    "start": "176879",
    "end": "182879"
  },
  {
    "text": "aggregator for all jobs in the US so there you see it was basically flattened",
    "start": "182879",
    "end": "188099"
  },
  {
    "text": "noise and then it jerked up that was when Twitter announced that they were actually using Scala in their stack at",
    "start": "188099",
    "end": "194819"
  },
  {
    "text": "that point and then there's a further acceleration that's when we announced that there was a company supporting",
    "start": "194819",
    "end": "200879"
  },
  {
    "text": "supporting the the technology so in all these measures we're doing pretty well and that's actually very encouraging",
    "start": "200879",
    "end": "208680"
  },
  {
    "text": "because essentially for me the modern times are not that uh that that old yet",
    "start": "208680",
    "end": "214019"
  },
  {
    "text": "so Scala 2.8 came out 17 months ago Paul told me the other weekend I was totally",
    "start": "214019",
    "end": "220860"
  },
  {
    "text": "surprised because for me everything before 2.8 is really prehistoric the Dark Ages so so that the the the Modern",
    "start": "220860",
    "end": "228900"
  },
  {
    "text": "Age of Scott is actually pretty young 17 months and I must say that anybody who really went deeply into it before like",
    "start": "228900",
    "end": "235379"
  },
  {
    "text": "like Twitter did what was very courageous and I'm really glad they did because that was really created the the",
    "start": "235379",
    "end": "242099"
  },
  {
    "text": "critical mass but for the late comers who got into in 2.8 or later it's so",
    "start": "242099",
    "end": "248400"
  },
  {
    "text": "much easier so 2.8 the main the main uh were new collections which then",
    "start": "248400",
    "end": "255720"
  },
  {
    "text": "essentially a lot of people like a lot that there were also some language",
    "start": "255720",
    "end": "260880"
  },
  {
    "text": "things that we added like package objects so a package can now contain",
    "start": "260880",
    "end": "265919"
  },
  {
    "text": "fields and methods and types and things like that and then some smaller ones",
    "start": "265919",
    "end": "271080"
  },
  {
    "text": "like context bounds and better implicit resolution",
    "start": "271080",
    "end": "276199"
  },
  {
    "text": "a priority from when we started the company and I think we're close to finally uh close to being there I'm",
    "start": "331280",
    "end": "339840"
  },
  {
    "text": "gonna talk a little bit about what happened in Eclipse later we have more recently done something on",
    "start": "339840",
    "end": "346740"
  },
  {
    "text": "the dock side there's a community doc doc site that a lot of people have contributed and done really good work",
    "start": "346740",
    "end": "353580"
  },
  {
    "text": "and I think that's also very very important because before the docs were lacking and lots and lots of bug fixes",
    "start": "353580",
    "end": "359940"
  },
  {
    "text": "so that was Scala 2.9 and in the the main addition of 2.99",
    "start": "359940",
    "end": "366960"
  },
  {
    "text": "like I said were parallel collections uh so parallel collections maybe I give you",
    "start": "366960",
    "end": "372360"
  },
  {
    "text": "uh if you're a newbie then nevertheless a quick intro of what they are just that",
    "start": "372360",
    "end": "377940"
  },
  {
    "text": "you see what they are so that's not uh Scala that's Java right so somebody can",
    "start": "377940",
    "end": "383880"
  },
  {
    "text": "tell me what that thing does probably I showed it what does that thing do well",
    "start": "383880",
    "end": "391560"
  },
  {
    "text": "it's okay you don't need to know Java",
    "start": "391560",
    "end": "395840"
  },
  {
    "text": "no no so that that sorts an array of people partitions into",
    "start": "396600",
    "end": "403919"
  },
  {
    "text": "an array of minus and an array of adults I was a bit mean to to specify arrays so",
    "start": "403919",
    "end": "410819"
  },
  {
    "text": "you had to use this in intermediate data structures arraylists because well arrays you have to know the size",
    "start": "410819",
    "end": "416280"
  },
  {
    "text": "beforehand so it's tough okay so that's on the bottom here you'll see the same thing",
    "start": "416280",
    "end": "422580"
  },
  {
    "text": "in scada so you say people is an array of person and then you say Miners and adults is",
    "start": "422580",
    "end": "430020"
  },
  {
    "text": "people partition according to whether their age is less than 18.",
    "start": "430020",
    "end": "435360"
  },
  {
    "text": "so I think it's pretty obvious which one is shorter and also pretty obvious",
    "start": "435360",
    "end": "440759"
  },
  {
    "text": "obvious which one is clearer so obviously this one is much closer to what you want to achieve whereas this",
    "start": "440759",
    "end": "447479"
  },
  {
    "text": "one exposes all the details how you go about doing that okay and that does that line here I",
    "start": "447479",
    "end": "454620"
  },
  {
    "text": "think James irie you work I think I got it from you uh so so you James was the",
    "start": "454620",
    "end": "459960"
  },
  {
    "text": "first one who brought up this wonderful example because in a single line that already shows some of the key concepts",
    "start": "459960",
    "end": "466259"
  },
  {
    "text": "of functional programming which of course is a key ingredient in scada so what you have on the left is a simple",
    "start": "466259",
    "end": "471960"
  },
  {
    "text": "pattern match that partition thing returns a pair of arrays and using",
    "start": "471960",
    "end": "477720"
  },
  {
    "text": "pattern matching we can deconstruct the pair and name the parts of the pair we say well the first one is minus the",
    "start": "477720",
    "end": "484620"
  },
  {
    "text": "second one is adults partition is actually a method called on the people array in Scala every infix operator is a",
    "start": "484620",
    "end": "493560"
  },
  {
    "text": "method called on its left usually and you might say well why do arrays have",
    "start": "493560",
    "end": "500520"
  },
  {
    "text": "partition method what's that data structure and I should say this array of person is exactly the same as the Java",
    "start": "500520",
    "end": "507660"
  },
  {
    "text": "array so we do that with what we call implicits so implicit wrappers can",
    "start": "507660",
    "end": "512820"
  },
  {
    "text": "actually inject new methods and also new interfaces into all types and that's very useful for these for these",
    "start": "512820",
    "end": "520080"
  },
  {
    "text": "situations and the final one is we have a function value that's this underscore",
    "start": "520080",
    "end": "525600"
  },
  {
    "text": "h less than 18. that's the function value of the Criterion that we pass to partition so",
    "start": "525600",
    "end": "532080"
  },
  {
    "text": "it can do its job okay you might say good so that's a quick intro to collections what about",
    "start": "532080",
    "end": "538380"
  },
  {
    "text": "parallel in Java I don't think I want to try it's obviously too much work to",
    "start": "538380",
    "end": "544920"
  },
  {
    "text": "parallelize this partition thing at least it wouldn't fit on a slide and we would lose a lot of time doing that it's",
    "start": "544920",
    "end": "550860"
  },
  {
    "text": "possible but it's work so in Scala what you can do is the only new thing is Doc",
    "start": "550860",
    "end": "557519"
  },
  {
    "text": "par here so that's a parallel collection people dot parse or dot part converts",
    "start": "557519",
    "end": "563880"
  },
  {
    "text": "any collection into a parallel collection and that means that afterwards all the operations on that",
    "start": "563880",
    "end": "569040"
  },
  {
    "text": "collections are executed in parallel where it makes sense so taking the first element of course you can't do that in",
    "start": "569040",
    "end": "575519"
  },
  {
    "text": "parallel but partition you can do very well in parallel so that's an operation that will be done in parallel here so",
    "start": "575519",
    "end": "581459"
  },
  {
    "text": "that's a an obvious win last week for instance Graham thackley",
    "start": "581459",
    "end": "587399"
  },
  {
    "text": "from the guardian told Julian who visited him that Guardian is a big",
    "start": "587399",
    "end": "592680"
  },
  {
    "text": "newspaper I think second largest afternoon York Times in terms of web views and I wanted to do a quick",
    "start": "592680",
    "end": "598519"
  },
  {
    "text": "real-time statistics how many people clicked on what pages so I threw together a quick app in an afternoon",
    "start": "598519",
    "end": "605180"
  },
  {
    "text": "using collections it was already fine but was a bit sluggish and then we said well let's try to make them parallel",
    "start": "605180",
    "end": "611399"
  },
  {
    "text": "throw in a couple parts and lo and behold it ran much faster it ran fast",
    "start": "611399",
    "end": "616980"
  },
  {
    "text": "enough so it's not always like that I'm not saying we have invented the Silver Bullet for parallelism that would be you",
    "start": "616980",
    "end": "625260"
  },
  {
    "text": "wouldn't believe me anyway if I told you that but it's there are a lot of situations where it is like that so it's",
    "start": "625260",
    "end": "631080"
  },
  {
    "text": "a good good thing to try in particular because collections are just so good anyway that you want to program with",
    "start": "631080",
    "end": "638220"
  },
  {
    "text": "corrections even if the parallelism story doesn't actually hold anything and if you do that then well if sometimes or",
    "start": "638220",
    "end": "645779"
  },
  {
    "text": "quite all quite often they actually do parallelize nicely then that's an obvious win of course",
    "start": "645779",
    "end": "652560"
  },
  {
    "text": "okay so going to uh the types the types",
    "start": "652560",
    "end": "657779"
  },
  {
    "text": "are actually pretty challenging of this whole thing and that's sort of the two",
    "start": "657779",
    "end": "663300"
  },
  {
    "text": "phases of Scala so on the one hand it's a beauty to use so the user sees that",
    "start": "663300",
    "end": "668519"
  },
  {
    "text": "right on the other hand if you look at how it's implemented in what are the",
    "start": "668519",
    "end": "674160"
  },
  {
    "text": "layers then it can be pretty frightening so the layers some parts of the layers",
    "start": "674160",
    "end": "679260"
  },
  {
    "text": "are that thing here that we say well this array of something like an array is",
    "start": "679260",
    "end": "684480"
  },
  {
    "text": "a sequence and that is a special case of an iterable and that's a special case of a traversable and then we have here the",
    "start": "684480",
    "end": "692040"
  },
  {
    "text": "dot par takes us from here to here so we have the parallel sequence and the parallel iterable over here but then we",
    "start": "692040",
    "end": "698579"
  },
  {
    "text": "have to say well there should be cases where I want to get a collection in it I",
    "start": "698579",
    "end": "703620"
  },
  {
    "text": "don't care whether it's parallel or sequential I just want it to do its job like a map or a filter or or",
    "start": "703620",
    "end": "709760"
  },
  {
    "text": "a partition and in that case I have these other types which says well it",
    "start": "709760",
    "end": "715500"
  },
  {
    "text": "could be a sequential collection or a parallel collection they're called gen SQL sequence generable and gen",
    "start": "715500",
    "end": "721860"
  },
  {
    "text": "traversable you might ask well why didn't we just make par iterable a subtype of iterable",
    "start": "721860",
    "end": "728880"
  },
  {
    "text": "and the answer is well that actually would break existing code because when I interact with an iterable now and I do a",
    "start": "728880",
    "end": "736380"
  },
  {
    "text": "4-H let's say I know that the thing would go from left to right sequentially so if I throw a party table in there",
    "start": "736380",
    "end": "742680"
  },
  {
    "text": "then that Assurance doesn't doesn't hold any longer because the thing will be done in parallel that means I might",
    "start": "742680",
    "end": "748260"
  },
  {
    "text": "observe any order including interleaved order so we can't do that so in order",
    "start": "748260",
    "end": "754200"
  },
  {
    "text": "not to break existing code we had to put in this new hierarchy and logically we",
    "start": "754200",
    "end": "759839"
  },
  {
    "text": "should have named that sequence and iterable and traversable and then that sequential sequence and so on but since",
    "start": "759839",
    "end": "765660"
  },
  {
    "text": "those names were taken that's the names we invented now one thing we actually think of we I",
    "start": "765660",
    "end": "771839"
  },
  {
    "text": "I take that very seriously that it's like well there are good reasons we have to do all that but it's still a lot of types I mean let's face it it's a lot of",
    "start": "771839",
    "end": "778560"
  },
  {
    "text": "types that hang together and integrate things so one thing we are considering for True 10 is actually to merge the",
    "start": "778560",
    "end": "784920"
  },
  {
    "text": "traversal plane iterable layers because that that they don't differ that much so a traversable is a thing that has a for",
    "start": "784920",
    "end": "791820"
  },
  {
    "text": "each method so you can essentially go through it with a with a function",
    "start": "791820",
    "end": "796920"
  },
  {
    "text": "either sequentially or in bulk whereas an iterable gives you an iterator",
    "start": "796920",
    "end": "802100"
  },
  {
    "text": "iterables are somewhat more General because essentially you can for instance go through two collections in lockstep",
    "start": "802100",
    "end": "808260"
  },
  {
    "text": "like when you do a zip or a compare with a 4-H you can't do that for each is only one collection but we might be able to",
    "start": "808260",
    "end": "815399"
  },
  {
    "text": "actually merge that better and that would remove about 20 of the super classes of something like list which",
    "start": "815399",
    "end": "821220"
  },
  {
    "text": "might be worth it okay so the next step afterwards so if you uh is uh to say well parallel",
    "start": "821220",
    "end": "829380"
  },
  {
    "text": "collections they're great what about uh going to distribute it so uh Big Data",
    "start": "829380",
    "end": "834839"
  },
  {
    "text": "tens of thousands of servers or something like that can we extend the same things there and actually that's",
    "start": "834839",
    "end": "839940"
  },
  {
    "text": "been done several times and every time the result is extremely impressive so",
    "start": "839940",
    "end": "844980"
  },
  {
    "text": "I've seen that scalar data talk by Josh durath on Cascade which has nothing to",
    "start": "844980",
    "end": "850200"
  },
  {
    "text": "do with cascading in this whole area people reinvent the same names all the time so Cascade is essentially a collect",
    "start": "850200",
    "end": "858600"
  },
  {
    "text": "Scala collections front-end over Google Map reduce or rather Flume Java so Flume",
    "start": "858600",
    "end": "864300"
  },
  {
    "text": "Java sits on top of mapreduce and does some optimizations by fusing several Map",
    "start": "864300",
    "end": "871320"
  },
  {
    "text": "review steps from java is quite impressive software but It suffers from",
    "start": "871320",
    "end": "876540"
  },
  {
    "text": "the problem that it's it's rather a pain to program so you have to essentially describe every step with the class and",
    "start": "876540",
    "end": "883019"
  },
  {
    "text": "that's really bulky to wire these things up whereas with parallel collections",
    "start": "883019",
    "end": "888120"
  },
  {
    "text": "what you do is precise something like that only now it works over the Internet with the things so that's really really",
    "start": "888120",
    "end": "894600"
  },
  {
    "text": "very nice and Josh Stewart and Danny Mara did that for that for Map Reviews the spark work well that will be",
    "start": "894600",
    "end": "901500"
  },
  {
    "text": "presented is actually quite similar so that's another thing that goes in that in that context and also there's been",
    "start": "901500",
    "end": "908040"
  },
  {
    "text": "something done by Twitter and Cloudera called scrunch which is essentially the",
    "start": "908040",
    "end": "913440"
  },
  {
    "text": "same thing now on on top of Hadoop so all this thing is pretty exciting because it takes a lot of the TVM out of",
    "start": "913440",
    "end": "919620"
  },
  {
    "text": "the problem with big data so I think that's the next logical step to do that",
    "start": "919620",
    "end": "924839"
  },
  {
    "text": "okay so I've talked about two nine parallel collections where we're going to take them uh what happened now",
    "start": "924839",
    "end": "931560"
  },
  {
    "text": "essentially in the post 29 era where I think three big things the Eclipse IDE",
    "start": "931560",
    "end": "937459"
  },
  {
    "text": "the play web framework 2.0 which got just announced in beta AKA 2.0 which is",
    "start": "937459",
    "end": "943800"
  },
  {
    "text": "close to being being in the first Beta release and then finally Scala 2.10 so",
    "start": "943800",
    "end": "949680"
  },
  {
    "text": "I'm going to talk about each of them a little bit um so the Scala Eclipse IDE is uh very",
    "start": "949680",
    "end": "956760"
  },
  {
    "text": "very close to final it's now in rc2 it would be it would be in final now if it",
    "start": "956760",
    "end": "962579"
  },
  {
    "text": "hadn't been for spring spring released a new version last week which turned out",
    "start": "962579",
    "end": "967740"
  },
  {
    "text": "to be incompatible in the weaving with uh what our plugin did so it turned out that if you installed Scala on top of of",
    "start": "967740",
    "end": "975779"
  },
  {
    "text": "spring that worked fine if you install spring on top of Scala it would fry your",
    "start": "975779",
    "end": "981660"
  },
  {
    "text": "eclipse and you'd have to essentially go back and and install a new Eclipse so bad bad luck so we couldn't release it",
    "start": "981660",
    "end": "988740"
  },
  {
    "text": "that way we had to fix that problem first and once that's fixed it will be it will be in final okay so the goals",
    "start": "988740",
    "end": "995220"
  },
  {
    "text": "for that version of the IDE were primarily it should be reliable no",
    "start": "995220",
    "end": "1000259"
  },
  {
    "text": "crashes no freezes it should be responsive so never wait when you type and it should work with large projects",
    "start": "1000259",
    "end": "1007339"
  },
  {
    "text": "and files so our own Benchmark here is this color compiler it's a bit more than",
    "start": "1007339",
    "end": "1012380"
  },
  {
    "text": "80 thousand lines of code some files have 5000 lines of code so you should be",
    "start": "1012380",
    "end": "1018079"
  },
  {
    "text": "able to edit those things and without waiting and getting all the services",
    "start": "1018079",
    "end": "1023120"
  },
  {
    "text": "like hyperlinking and completion okay the Scala compiler is also an excellent example of advanced use of the",
    "start": "1023120",
    "end": "1030380"
  },
  {
    "text": "type system with lots of the past dependent type self types makes sense the whole thing",
    "start": "1030380",
    "end": "1036140"
  },
  {
    "text": "so the feature set is to attain these calls the features that was intentionally rather small so we wanted",
    "start": "1036140",
    "end": "1043760"
  },
  {
    "text": "to do the highlighting completions including completions with implicit so",
    "start": "1043760",
    "end": "1049340"
  },
  {
    "text": "that means if you have an INT and all the stuff that you get in a rich int that's added is visible or if you have",
    "start": "1049340",
    "end": "1056000"
  },
  {
    "text": "an array the partition method should be visible even though in a Java array of course it isn't hyperlinking and good",
    "start": "1056000",
    "end": "1064039"
  },
  {
    "text": "project builds based on spt here and then the other big",
    "start": "1064039",
    "end": "1069640"
  },
  {
    "text": "feature that we had to do was good support for mixed Java Scala projects which I believe we have now so all",
    "start": "1069640",
    "end": "1077120"
  },
  {
    "text": "features should work between Java and scalar sources then junit test running",
    "start": "1077120",
    "end": "1082240"
  },
  {
    "text": "and then the other things we will get to now that this is released but so far we",
    "start": "1082240",
    "end": "1087260"
  },
  {
    "text": "have gotten some contributions from external libraries so essentially the first step to get something some limited",
    "start": "1087260",
    "end": "1093500"
  },
  {
    "text": "refactoring a code formatter that actually works pretty well micro currencies structured selections and",
    "start": "1093500",
    "end": "1100460"
  },
  {
    "text": "showing third semicolons the next big step beyond that once we push that out will be to to to work on the debugger so",
    "start": "1100460",
    "end": "1108620"
  },
  {
    "text": "right now the debugger is a Java debugger it's good enough but sometimes it's annoying because it just doesn't",
    "start": "1108620",
    "end": "1114679"
  },
  {
    "text": "understand uh Java Scala stack traces that well and things like that that will",
    "start": "1114679",
    "end": "1119780"
  },
  {
    "text": "be the next step afterwards okay so initial tweets were quite",
    "start": "1119780",
    "end": "1126919"
  },
  {
    "text": "encouraging so for instance Yoni Freeman the author of Lyft Jason said latest gun",
    "start": "1126919",
    "end": "1134059"
  },
  {
    "text": "Eclipse plugin works surprisingly well even manage it manages our mixed javascala project",
    "start": "1134059",
    "end": "1139640"
  },
  {
    "text": "or here the latest beta of the eclipse plugin is much better I'm starting to",
    "start": "1139640",
    "end": "1144919"
  },
  {
    "text": "like it after years of Misery the eclipse started working actually seems to work quite well so",
    "start": "1144919",
    "end": "1151720"
  },
  {
    "text": "you see that yeah obviously there's some improvement so that's all that's all I I",
    "start": "1151720",
    "end": "1159320"
  },
  {
    "text": "I think we can't we can't argue about that good uh so the architecture of the",
    "start": "1159320",
    "end": "1164780"
  },
  {
    "text": "eclipse plugin is quite interesting because I believe it's actually the only one that uses the standard compiler as",
    "start": "1164780",
    "end": "1171860"
  },
  {
    "text": "the interface for for doing all these things all the other Ides I know have a sort of a special compiler like the the",
    "start": "1171860",
    "end": "1178880"
  },
  {
    "text": "JDT compiler and things like that it's not the same as Java C also for instance IntelliJ have their own compiler to do",
    "start": "1178880",
    "end": "1185960"
  },
  {
    "text": "completion and and error error highlighting not the standards Galaxy so",
    "start": "1185960",
    "end": "1191000"
  },
  {
    "text": "we use the full scalar compiler for everything for error highlighting completion hyperlinking and things like",
    "start": "1191000",
    "end": "1197539"
  },
  {
    "text": "that and the other thing we had to do is wave into the JDT compiler where it needs help because to do the interrupt",
    "start": "1197539",
    "end": "1204679"
  },
  {
    "text": "with Java essentially the Scala IDE this color plugin needs to masquerade as a",
    "start": "1204679",
    "end": "1210980"
  },
  {
    "text": "sub perspective of the Java perspective so essentially we need to go into the JDP otherwise we couldn't have joint",
    "start": "1210980",
    "end": "1217460"
  },
  {
    "text": "projects and that was in times harder that's also the reason for the hold up",
    "start": "1217460",
    "end": "1222740"
  },
  {
    "text": "with final version because the JDT was not meant to be extended there were patch requests for years now to the JDT",
    "start": "1222740",
    "end": "1230240"
  },
  {
    "text": "team to say well please publish this extension Point everybody knew what they were and they all got denied because",
    "start": "1230240",
    "end": "1236120"
  },
  {
    "text": "they said we do not want to use the JDT for other languages except Java so if",
    "start": "1236120",
    "end": "1241580"
  },
  {
    "text": "you want to do that you're on your own we won't support that okay why rely on the scalar compiler",
    "start": "1241580",
    "end": "1247520"
  },
  {
    "text": "well the main reason was reuse so writing a type Checker is hard I think",
    "start": "1247520",
    "end": "1253460"
  },
  {
    "text": "one to two person years is optimistic it's probably more than that to be consistent so if you have two compilers",
    "start": "1253460",
    "end": "1260660"
  },
  {
    "text": "they might disagree and one might flag an error where the other finds finds this thing okay that's very annoying and",
    "start": "1260660",
    "end": "1267799"
  },
  {
    "text": "also because quite a lot of compiler plugins have already been written for Scala and if we use the same compiler in",
    "start": "1267799",
    "end": "1275480"
  },
  {
    "text": "the IDE that means they all work in the IDE which is of course a big advantage so why might you not rely on scholar C",
    "start": "1275480",
    "end": "1283400"
  },
  {
    "text": "well I guess the first reason is speed scholar C is not a million lines per",
    "start": "1283400",
    "end": "1288740"
  },
  {
    "text": "second compiler it's more like a thousand lines a second and that's if you have a 5 000 line uh file that you",
    "start": "1288740",
    "end": "1295880"
  },
  {
    "text": "want to recompile on every keystroke that's simply not fast enough so you have to do some clever tricks to make it to to",
    "start": "1295880",
    "end": "1303559"
  },
  {
    "text": "make that disappear and also there's a very tight dependency that way on the Scala version so 2.8 2.9 2.10 each one",
    "start": "1303559",
    "end": "1311840"
  },
  {
    "text": "of them has a different compiler and the eclipse plugin has to work with all of them which was quite an a constant",
    "start": "1311840",
    "end": "1318020"
  },
  {
    "text": "engineering problem to make that work but I think it's overall it's it's the right choice to do that so at the heart",
    "start": "1318020",
    "end": "1325039"
  },
  {
    "text": "of the IDE is then the presentation compiler which is a very intricate piece",
    "start": "1325039",
    "end": "1330260"
  },
  {
    "text": "of software the standard compiler is already very intricate piece of software and now we",
    "start": "1330260",
    "end": "1335960"
  },
  {
    "text": "say well the standard compiler now has to work asynchronously has to be interruptable at every point you have to",
    "start": "1335960",
    "end": "1342500"
  },
  {
    "text": "be able to do targeted type checking that means type check only some part of the thing not not the other parts of a",
    "start": "1342500",
    "end": "1348799"
  },
  {
    "text": "file and we have to be able to have it stop and give us a partial result after arriving at a certain point with type",
    "start": "1348799",
    "end": "1355760"
  },
  {
    "text": "checking so a lot of new demands to the presentation compiler the way it's done is that the",
    "start": "1355760",
    "end": "1362539"
  },
  {
    "text": "presentation compiler sits on its own thread and here the other Eclipse threads and there's a work queue so for",
    "start": "1362539",
    "end": "1369260"
  },
  {
    "text": "instance the eclipse thread might ask say might tell the presentation compiler well I want to know the type at a",
    "start": "1369260",
    "end": "1375799"
  },
  {
    "text": "certain position for instance in order to do afterwards a completion so that",
    "start": "1375799",
    "end": "1381140"
  },
  {
    "text": "that means to find out all the members of the type and all the members added by implicits that are then",
    "start": "1381140",
    "end": "1388600"
  },
  {
    "text": "presented to to the user Subway when they do control device you want to see the types okay so the presentation",
    "start": "1388600",
    "end": "1395059"
  },
  {
    "text": "compiler then would pick up the US type at and it would go to work",
    "start": "1395059",
    "end": "1400280"
  },
  {
    "text": "it would go through through the through the type tree and find the",
    "start": "1400280",
    "end": "1407720"
  },
  {
    "text": "uh and find the uh the the type at a given node now it could be that the type",
    "start": "1407720",
    "end": "1413659"
  },
  {
    "text": "well so what the presentation compiler does when nobody asks it anything it",
    "start": "1413659",
    "end": "1418880"
  },
  {
    "text": "will be busy and Greek and compile all the all the modules that it has loaded all the files that are currently open in",
    "start": "1418880",
    "end": "1425240"
  },
  {
    "text": "editing buffers the presentation compiler tries all the time to re recompile those if the user types a",
    "start": "1425240",
    "end": "1431240"
  },
  {
    "text": "single keystroke it has to throw away everything and start from scratch because that keystroke could potentially",
    "start": "1431240",
    "end": "1436640"
  },
  {
    "text": "change all the dependencies so so that's what it does and when somebody asks then",
    "start": "1436640",
    "end": "1442100"
  },
  {
    "text": "the thing it will interrupt what it does so on every node when it type checks it listens is somebody wanting something",
    "start": "1442100",
    "end": "1447559"
  },
  {
    "text": "from me and when it gets interrupted it tries to do that thing so if that's for",
    "start": "1447559",
    "end": "1453380"
  },
  {
    "text": "instance an us type I added will say well do I happen to have the note where where we are at this position does it",
    "start": "1453380",
    "end": "1460280"
  },
  {
    "text": "already have a type if that's okay if it has a type it can immediately return that if it doesn't have a type then it",
    "start": "1460280",
    "end": "1466700"
  },
  {
    "text": "goes into targeted type check mode which says well I started the root of this file in that type check essentially only",
    "start": "1466700",
    "end": "1472940"
  },
  {
    "text": "on the path of the root to this node I don't go into left or right subtrees I",
    "start": "1472940",
    "end": "1477980"
  },
  {
    "text": "go from the root of the thing to that node where somebody needed the type uh and that's possible fortunately",
    "start": "1477980",
    "end": "1484940"
  },
  {
    "text": "because the compiler's design essentially Embraces laziness everywhere very systematically so everything uh I",
    "start": "1484940",
    "end": "1492679"
  },
  {
    "text": "where I need the types I first create a symbol like a symbol for a field or a method or things like that and its type",
    "start": "1492679",
    "end": "1498799"
  },
  {
    "text": "is a lazyly computed value that means only if somebody needs the type it will",
    "start": "1498799",
    "end": "1504559"
  },
  {
    "text": "start the computation and the computation would then look at the subtree and maybe do type inference local type inference and produce the",
    "start": "1504559",
    "end": "1511280"
  },
  {
    "text": "type but if nobody needs a type it can just leave these things alone so that means going on the path to this note and",
    "start": "1511280",
    "end": "1518720"
  },
  {
    "text": "finding the type at this node will just force the minimal set of recompilation that we need so in that sense the",
    "start": "1518720",
    "end": "1525260"
  },
  {
    "text": "architecture of this color compiler actually made this job of incremental type checking much much easier",
    "start": "1525260",
    "end": "1532279"
  },
  {
    "text": "okay and then once it got the type type at the result is communicated through a sync wire and then it goes through the",
    "start": "1532279",
    "end": "1539840"
  },
  {
    "text": "next thing so that's basically how it works so all compiler activity happens on the PC thread when the queue is empty",
    "start": "1539840",
    "end": "1547400"
  },
  {
    "text": "we compile the loaded files and the work queue is checked when the type",
    "start": "1547400",
    "end": "1554179"
  },
  {
    "text": "Checker reaches save points in the AST so typically it's done type checking a node and we'll say that's a safe point I",
    "start": "1554179",
    "end": "1560480"
  },
  {
    "text": "can pick that up about a thousand times a second more than that a million times a second and it drops everything when a",
    "start": "1560480",
    "end": "1568039"
  },
  {
    "text": "file is changed okay so the implementation was",
    "start": "1568039",
    "end": "1575840"
  },
  {
    "text": "uh post some interesting challenges so by",
    "start": "1575840",
    "end": "1580940"
  },
  {
    "text": "that architect trade means that now because the type Checker is re-started",
    "start": "1580940",
    "end": "1586460"
  },
  {
    "text": "every time somebody presses a key so you can literally have hundreds of type checks type check runs per minute",
    "start": "1586460",
    "end": "1593419"
  },
  {
    "text": "and that means the tiniest memory leak you have goes up very very quickly because if you have so many of you you",
    "start": "1593419",
    "end": "1600320"
  },
  {
    "text": "leave a couple of bytes behind after a compiler run with that hundreds of types",
    "start": "1600320",
    "end": "1605900"
  },
  {
    "text": "runs per minute that can grow very quickly the the other problems were side effects",
    "start": "1605900",
    "end": "1612860"
  },
  {
    "text": "State and this targeted type checking and the next part of it was the so we",
    "start": "1612860",
    "end": "1618620"
  },
  {
    "text": "needed to improve the compiler to do that the initial part of the presentation compiler indeed did have",
    "start": "1618620",
    "end": "1624380"
  },
  {
    "text": "memory leaks that we had to fix for for the thing and that means we had to actually backport things to all the",
    "start": "1624380",
    "end": "1630500"
  },
  {
    "text": "versions so the eclipse plugin now works with 291 with 210 but also with two",
    "start": "1630500",
    "end": "1636440"
  },
  {
    "text": "eight and there we had new versions of 2A so the Latin the latest official",
    "start": "1636440",
    "end": "1641539"
  },
  {
    "text": "version of 28 was 281 and now we had a 282 and now it's 283 that essentially",
    "start": "1641539",
    "end": "1646760"
  },
  {
    "text": "contain only these improvements that are needed for the presentation compiler okay so that was the eclipse thing the",
    "start": "1646760",
    "end": "1654200"
  },
  {
    "text": "other new thing is play so Manisha already mentioned that it's used here it's a cool web framework uh it's uh",
    "start": "1654200",
    "end": "1661159"
  },
  {
    "text": "very much inspired by Ruby on Rails it's the same Convention of a configuration",
    "start": "1661159",
    "end": "1666320"
  },
  {
    "text": "rapid deployment web framework automatically so essentially what it does it contains actually a hot compiler",
    "start": "1666320",
    "end": "1675020"
  },
  {
    "text": "in the play framework so you can save your Scala file and we pick it up it will on the fly recompile it and",
    "start": "1675020",
    "end": "1681260"
  },
  {
    "text": "integrate it into the running thing so no build step no recompile step it's almost like it looks like it's an",
    "start": "1681260",
    "end": "1688159"
  },
  {
    "text": "interpretive language where you load this thing directly so originally play was a Java web",
    "start": "1688159",
    "end": "1693860"
  },
  {
    "text": "framework with a Scala module and it's now migrating to a scalar base",
    "start": "1693860",
    "end": "1699039"
  },
  {
    "text": "that will have two apis a Scala API and the Java API that will both be first",
    "start": "1699039",
    "end": "1706340"
  },
  {
    "text": "class apis for the framework it's going to be integrated in the next version of",
    "start": "1706340",
    "end": "1711380"
  },
  {
    "text": "the typesafe stack and types of will contribute to the development and provide also commercial support and",
    "start": "1711380",
    "end": "1718039"
  },
  {
    "text": "maintenance so it's a very very very nice framework and we're very glad to have it in the stack",
    "start": "1718039",
    "end": "1724880"
  },
  {
    "text": "also runs great on Heroku the roadmap of what we want to do then",
    "start": "1724880",
    "end": "1731799"
  },
  {
    "text": "so the initial type save stack that came out in May that bundled Scala 2 9 and",
    "start": "1731799",
    "end": "1737659"
  },
  {
    "text": "akka 1-1 we had a point release in October that bundles the 291 essentially the the",
    "start": "1737659",
    "end": "1745240"
  },
  {
    "text": "greatly improved 2-9 series with akka one two the next big step will be come",
    "start": "1745240",
    "end": "1751940"
  },
  {
    "text": "out in the first quarter next year that will still be the 2-9 series of Scala but then akka 2.0 which will be a big",
    "start": "1751940",
    "end": "1758899"
  },
  {
    "text": "step ahead for lack of time I can't really talk about that in the talk but if you ask me afterwards I can tell you",
    "start": "1758899",
    "end": "1764659"
  },
  {
    "text": "what it is and also the play framework second version and then we're looking about six months later at a version",
    "start": "1764659",
    "end": "1771860"
  },
  {
    "text": "which will have it's got a 2.10 and then the the current releases of akka play",
    "start": "1771860",
    "end": "1777980"
  },
  {
    "text": "and also a database connect layer that we are are working on it's got a 2.10 will probably come out",
    "start": "1777980",
    "end": "1784820"
  },
  {
    "text": "immediately after this probably also in the first quarter of 2012 but we didn't want to roll it in there in into the",
    "start": "1784820",
    "end": "1791240"
  },
  {
    "text": "stack because we didn't want to force people to upgrade their language to get essentially the new libraries so the",
    "start": "1791240",
    "end": "1796460"
  },
  {
    "text": "order will be new libraries and then immediately afterwards a new version of the language so which will then be in in",
    "start": "1796460",
    "end": "1802640"
  },
  {
    "text": "the in the in the next version of the stack six months later okay so now we come to Scala 2.10 so",
    "start": "1802640",
    "end": "1809899"
  },
  {
    "text": "what's in Scala 2.10 over what we have now so I think the biggest Step Ahead is",
    "start": "1809899",
    "end": "1815240"
  },
  {
    "text": "the new reflection Frameworks that's sort of on the same order of Scala collections to say well it's well no",
    "start": "1815240",
    "end": "1821659"
  },
  {
    "text": "it's no Scala collections replaced what was there before the reflection framework replaces a void so there was",
    "start": "1821659",
    "end": "1828200"
  },
  {
    "text": "no scalar reflection and now there is and that that's a big a big step forward uh there's been it it will be integrated",
    "start": "1828200",
    "end": "1835820"
  },
  {
    "text": "with something we call reification uh the type Dynamic that's something useful",
    "start": "1835820",
    "end": "1842659"
  },
  {
    "text": "to be able to interact with JavaScript and dynamic languages and reflection",
    "start": "1842659",
    "end": "1848240"
  },
  {
    "text": "also more IDE improvements so you plan to have find references debugger",
    "start": "1848240",
    "end": "1854240"
  },
  {
    "text": "worksheet faster builds we're working on that and then there's some scalar Improvement proposals for string into",
    "start": "1854240",
    "end": "1861200"
  },
  {
    "text": "interpolation in simple implicits which look like they will be accepted we have",
    "start": "1861200",
    "end": "1866360"
  },
  {
    "text": "Improvement proposal we have restarted the process to where the community can",
    "start": "1866360",
    "end": "1871940"
  },
  {
    "text": "discuss and propose things to improve Scala I think there are currently four of the",
    "start": "1871940",
    "end": "1877399"
  },
  {
    "text": "new ones out there so that's a bit modeled after the python pep process",
    "start": "1877399",
    "end": "1882679"
  },
  {
    "text": "python enhancement process so essentially open discussion and then Azure will decide what what what what",
    "start": "1882679",
    "end": "1888320"
  },
  {
    "text": "goes in and I have the last word okay so one of the things that will be",
    "start": "1888320",
    "end": "1895460"
  },
  {
    "text": "new in Scala 210 is the type Dynamic so here you see roughly what that is so",
    "start": "1895460",
    "end": "1902299"
  },
  {
    "text": "Dynamic is just a market market rate so nothing more than that and you can then have classes or trades that extend it",
    "start": "1902299",
    "end": "1909140"
  },
  {
    "text": "and those classes are trades that extended have to implement a method called apply Dynamic which is not the",
    "start": "1909140",
    "end": "1915620"
  },
  {
    "text": "same as invoke Dynamic you can implement it with invoke Dynamic if you choose but",
    "start": "1915620",
    "end": "1920960"
  },
  {
    "text": "you can implement it in other ways as well so apply Dynamic takes a method name and the arguments of the varex with",
    "start": "1920960",
    "end": "1928159"
  },
  {
    "text": "any and this one here doesn't do anything except print what what it gets but here's the usage scenario where you",
    "start": "1928159",
    "end": "1935480"
  },
  {
    "text": "say okay I create a new object new Js and I call now x dot four of one so of",
    "start": "1935480",
    "end": "1942080"
  },
  {
    "text": "course that thing doesn't have a full method but it will still type check and it will just translate into applied",
    "start": "1942080",
    "end": "1948860"
  },
  {
    "text": "Dynamic of the full method and then the added arguments and with the bar field it's the same thing so that means that",
    "start": "1948860",
    "end": "1956320"
  },
  {
    "text": "we have essentially a gradual transition from static to Dynamic and",
    "start": "1956320",
    "end": "1961700"
  },
  {
    "text": "reverse we if we want to have objects that we don't want to type check beforehand be it that they come from",
    "start": "1961700",
    "end": "1968840"
  },
  {
    "text": "JavaScript what you see here or a lot of things let's say from database wrappers we don't have a schema we don't know",
    "start": "1968840",
    "end": "1975200"
  },
  {
    "text": "what's in a row just call the type Dynamic and you essentially then you just delegate the the responsibility to",
    "start": "1975200",
    "end": "1982159"
  },
  {
    "text": "the runtime to do the right thing with that a pretty simple addition which I think",
    "start": "1982159",
    "end": "1987559"
  },
  {
    "text": "is will solve a lot of pretty hard problems the second proposal for 210 is string",
    "start": "1987559",
    "end": "1995240"
  },
  {
    "text": "interpolation I was sort of against string interpolation for a long long time because I always said well this one",
    "start": "1995240",
    "end": "2002200"
  },
  {
    "text": "is not that much longer than that one but I have to admit having after having written about 10 000 strings with the",
    "start": "2002200",
    "end": "2009399"
  },
  {
    "text": "pluses in between that it that it it does get tedious and it is not very legible so finally we have an idea how",
    "start": "2009399",
    "end": "2017019"
  },
  {
    "text": "we can get string interpolation but actually much much more than string interpolation in one one tiny package",
    "start": "2017019",
    "end": "2022779"
  },
  {
    "text": "and that was sort of for me the bang for the buck Factor was then high enough to say well okay let's do it so what we do",
    "start": "2022779",
    "end": "2029679"
  },
  {
    "text": "here is that we would have a string where just well the dollar thing gets interpolated but of course",
    "start": "2029679",
    "end": "2036220"
  },
  {
    "text": "doing that directly we can't do because well strings have a meaning in Java and Scala and the dollar is just a printable",
    "start": "2036220",
    "end": "2042340"
  },
  {
    "text": "character so you can't do that so what we do instead is with the syntax we write here a nice so the s means",
    "start": "2042340",
    "end": "2048820"
  },
  {
    "text": "essentially uh Scala standard string but the S could be something else so there",
    "start": "2048820",
    "end": "2054040"
  },
  {
    "text": "could be something an arbitrary sequence of characters here it's an S so what that gets translated to by the spec is",
    "start": "2054040",
    "end": "2060940"
  },
  {
    "text": "that the compiler will say well I create a new string context where I put all the",
    "start": "2060940",
    "end": "2066040"
  },
  {
    "text": "bits that are not interpolated here as of our act so Bob is years old and then",
    "start": "2066040",
    "end": "2071560"
  },
  {
    "text": "I call essentially my processing method here it's called s so s will be a method on the string context and that then gets",
    "start": "2071560",
    "end": "2078339"
  },
  {
    "text": "the argument that fits in here so that gets the n and what the method then would do is it would create a string",
    "start": "2078339",
    "end": "2084638"
  },
  {
    "text": "buffer it would put that in the string buffer it would put that convert it to a string into the string buffer and",
    "start": "2084639",
    "end": "2090339"
  },
  {
    "text": "finally that and it would return the string okay so that's how interpolation works and it's geared towards the the",
    "start": "2090339",
    "end": "2097720"
  },
  {
    "text": "fact that this s can be pretty arbitrary so here I told you what it does but if",
    "start": "2097720",
    "end": "2103060"
  },
  {
    "text": "you had another method name in here then it would translate to the same thing only with the other method name and then",
    "start": "2103060",
    "end": "2108580"
  },
  {
    "text": "the other method name could do other things and some of these things are quite interesting so one thing we could",
    "start": "2108580",
    "end": "2115119"
  },
  {
    "text": "do is we could have an alternate XML parsa so we write XML and then a bunch",
    "start": "2115119",
    "end": "2121660"
  },
  {
    "text": "of things in quotes and that thing would start an XML parser that would actually",
    "start": "2121660",
    "end": "2127119"
  },
  {
    "text": "give us the tree that corresponds to XML that trade needn't return the same",
    "start": "2127119",
    "end": "2132640"
  },
  {
    "text": "representation as the current XML literals for instance it could return an",
    "start": "2132640",
    "end": "2138040"
  },
  {
    "text": "anti-xml representation what then USB work has done so that means we decouple",
    "start": "2138040",
    "end": "2143200"
  },
  {
    "text": "actually XML from the actual library and who knows if that's successful then maybe at some point in the future Scala",
    "start": "2143200",
    "end": "2149859"
  },
  {
    "text": "won't have XML literals anymore because that will be a very good replacement for it would have to be a deprecation",
    "start": "2149859",
    "end": "2155800"
  },
  {
    "text": "process and things like that but I I would personally be very much in favor because I try to tell all the all people",
    "start": "2155800",
    "end": "2162820"
  },
  {
    "text": "look Scala it's actually a pretty regular and orthogonal and simple and small language and they say yeah but",
    "start": "2162820",
    "end": "2169900"
  },
  {
    "text": "what about XML and I said yeah except for XML so if we can get rid of that",
    "start": "2169900",
    "end": "2175839"
  },
  {
    "text": "then I have a strong argument for for that thing so I'm all in favor the other",
    "start": "2175839",
    "end": "2180940"
  },
  {
    "text": "thing we could do is actually then even have a hook up a scanner parser",
    "start": "2180940",
    "end": "2185980"
  },
  {
    "text": "with that thing and actually have code that inter interpolated scalar code that",
    "start": "2185980",
    "end": "2192700"
  },
  {
    "text": "the scalar capacitor would read that would create a scholar tree and that would add as these these things into the",
    "start": "2192700",
    "end": "2200140"
  },
  {
    "text": "tree so that would open up the whole world of macros classic quotation and",
    "start": "2200140",
    "end": "2205420"
  },
  {
    "text": "things like that and you could think of many many other things Rec Expressions is a third one that you could could",
    "start": "2205420",
    "end": "2211119"
  },
  {
    "text": "imagine so the the the simple change has has a lot of very powerful potential",
    "start": "2211119",
    "end": "2218260"
  },
  {
    "text": "okay so that was the one sip the next sip is so the everybody likes that so",
    "start": "2218260",
    "end": "2225520"
  },
  {
    "text": "the string control we went through a couple of versions the final version it's basically it's pretty clear that",
    "start": "2225520",
    "end": "2231099"
  },
  {
    "text": "they will be accepted because everybody loves it the second one is not at all clear whether it will be accepted",
    "start": "2231099",
    "end": "2236380"
  },
  {
    "text": "accepted because it's very very controversial so some things why I",
    "start": "2236380",
    "end": "2241540"
  },
  {
    "text": "pushed why I put it out here is to get some feedback of you what you think of that yeah so uh the the thing is so I've",
    "start": "2241540",
    "end": "2249880"
  },
  {
    "text": "written a lot of scalar code of course and it's gotten easier over the time so essentially my fingers type it",
    "start": "2249880",
    "end": "2256060"
  },
  {
    "text": "automatically except for one thing when I type if I always forget the open parent",
    "start": "2256060",
    "end": "2261880"
  },
  {
    "text": "always so I my fingers don't want to write write the condition not the open open parenthesis why is that because in",
    "start": "2261880",
    "end": "2269260"
  },
  {
    "text": "Scala actually there are two other usages of the keyword if in a four expression is a filter and in a garden a",
    "start": "2269260",
    "end": "2276460"
  },
  {
    "text": "pattern match where I don't need the parenthesis and that's just not very regular so can we like go and have a an",
    "start": "2276460",
    "end": "2284980"
  },
  {
    "text": "alternate syntax that lets you write the ifs without the parenthesis then of course you need a then to separate the",
    "start": "2284980",
    "end": "2291520"
  },
  {
    "text": "condition from the body so something like that and while we're at it of course we should do the same thing with",
    "start": "2291520",
    "end": "2296619"
  },
  {
    "text": "the wire where we would the do have to do in the body and for the for expression it would be the same thing I",
    "start": "2296619",
    "end": "2304180"
  },
  {
    "text": "do no parents need it here or a yield the yield we already have so for me",
    "start": "2304180",
    "end": "2309700"
  },
  {
    "text": "that's an overall cleaner design less notation less less",
    "start": "2309700",
    "end": "2315640"
  },
  {
    "text": "noise in the thing on the other hand some people told me look uh",
    "start": "2315640",
    "end": "2321720"
  },
  {
    "text": "it's not standard and they don't change the language anymore and now there's another convention people will write it",
    "start": "2321720",
    "end": "2328420"
  },
  {
    "text": "with parents or with that and things like that and I accept that also of course so it's not at all a done deal",
    "start": "2328420",
    "end": "2333820"
  },
  {
    "text": "whether this will will will go in or not maybe after the after the talk I'd be",
    "start": "2333820",
    "end": "2340119"
  },
  {
    "text": "interested to hear your opinion on on those sites",
    "start": "2340119",
    "end": "2345420"
  },
  {
    "text": "Okay the third one is again something with that I believe is a clear win and that's uh implicit classes uh so I said",
    "start": "2345760",
    "end": "2354220"
  },
  {
    "text": "the partition method gets added to arrays with an implicit uh here there's another uh here you see another class",
    "start": "2354220",
    "end": "2361180"
  },
  {
    "text": "that adds the Min method so minimum to the to the int type so you can write one",
    "start": "2361180",
    "end": "2367359"
  },
  {
    "text": "Min two or X Min y this gives you the minimum of X and Y and the way it's done",
    "start": "2367359",
    "end": "2373359"
  },
  {
    "text": "is it's a the Min method is a member of a class Rich int and origin takes an INT",
    "start": "2373359",
    "end": "2379540"
  },
  {
    "text": "is a parameter and it's an order it extends and it implements an interface and it implements the Min method and",
    "start": "2379540",
    "end": "2386760"
  },
  {
    "text": "that's the situation right now so you have the class here and then you have an",
    "start": "2386760",
    "end": "2392440"
  },
  {
    "text": "implicit wrapper method which we also call Regent here that will",
    "start": "2392440",
    "end": "2397839"
  },
  {
    "text": "create this class uh this class this this wrapper class when it's called and by by the fact that it's implicit it",
    "start": "2397839",
    "end": "2404619"
  },
  {
    "text": "means it will be inserted by the compiler whenever somebody calls Min on an in",
    "start": "2404619",
    "end": "2411400"
  },
  {
    "text": "um the problem is that's a bit cumbersome to write and we said well that's okay people tend to abuse",
    "start": "2411400",
    "end": "2416500"
  },
  {
    "text": "implicits anyway if we make that a little bit harder no no big deal but on the other hand uh it it would be much",
    "start": "2416500",
    "end": "2423820"
  },
  {
    "text": "nicer if we did it that way so let's just add an implicit to a class and that way we get the wrapper for free so",
    "start": "2423820",
    "end": "2430000"
  },
  {
    "text": "basically uh generated behind the scenes and that means we get a lot closer to",
    "start": "2430000",
    "end": "2435700"
  },
  {
    "text": "the Simplicity of extension methods because people always say well yeah but these implicits are so hard extension",
    "start": "2435700",
    "end": "2441400"
  },
  {
    "text": "methods in.net are much nicer and I have to say yeah sure they're shorter implicits can do more of course they can",
    "start": "2441400",
    "end": "2448000"
  },
  {
    "text": "Implement new interfaces like this audit you will never be able to do that with an extension method but there was a",
    "start": "2448000",
    "end": "2453460"
  },
  {
    "text": "price to pay so okay with the implicit class we get the syntactic noise down",
    "start": "2453460",
    "end": "2459040"
  },
  {
    "text": "then you might have the other objection to say yeah but you still create these wrapper objects but we can keep our",
    "start": "2459040",
    "end": "2466000"
  },
  {
    "text": "fingers crossed and hope that the VM will optimize them away but it doesn't always it usually there's a okay job but",
    "start": "2466000",
    "end": "2472599"
  },
  {
    "text": "not a not a perfect job doing that so the next thing that I you you don't see",
    "start": "2472599",
    "end": "2477880"
  },
  {
    "text": "on the slide is that we want to give you an possibility to write in line in front",
    "start": "2477880",
    "end": "2483040"
  },
  {
    "text": "of the implicit so we will let you have classes that can be inlined in-line",
    "start": "2483040",
    "end": "2489099"
  },
  {
    "text": "classes so what that means is that if you then invoker class with new class name",
    "start": "2489099",
    "end": "2496540"
  },
  {
    "text": "and then immediately call a method and the class is declared implicit the",
    "start": "2496540",
    "end": "2502300"
  },
  {
    "text": "compiler will not generate an instance of the class it will immediately call the method there are some conditions to",
    "start": "2502300",
    "end": "2508359"
  },
  {
    "text": "make that work the method must be final so the compiler will know what method to call the class must not have state the",
    "start": "2508359",
    "end": "2514900"
  },
  {
    "text": "class must what was the third condition not no side effects during creation but these",
    "start": "2514900",
    "end": "2521859"
  },
  {
    "text": "are all things that one can check that the compiler can check and it can flag the inline as an error and if we do that",
    "start": "2521859",
    "end": "2529359"
  },
  {
    "text": "then implicit wrappers would have exactly the same efficiency as extension",
    "start": "2529359",
    "end": "2534400"
  },
  {
    "text": "methods so that that's a big win I think okay so that's the next thing and the",
    "start": "2534400",
    "end": "2539980"
  },
  {
    "text": "last part which is actually the biggest chunk and I'm going to talk the rest of my talk about that is reflection",
    "start": "2539980",
    "end": "2546579"
  },
  {
    "text": "so previously there was no reflection in Scala so you needed to use Java",
    "start": "2546579",
    "end": "2551980"
  },
  {
    "text": "Reflection and that meant that there was no runtime info available on scala's type people",
    "start": "2551980",
    "end": "2558339"
  },
  {
    "text": "were incredibly inventive to actually recover that runtime info anyway so they were looking at the at the Java",
    "start": "2558339",
    "end": "2565900"
  },
  {
    "text": "signatures that we generate to actually to interrupt with Java and those can be",
    "start": "2565900",
    "end": "2572440"
  },
  {
    "text": "recovered by Java Reflection you can look at the attribute you can parse that and then they were sort of concluding",
    "start": "2572440",
    "end": "2578859"
  },
  {
    "text": "back well if the Java generated signature is that then probably the scalar type is that the problem was that",
    "start": "2578859",
    "end": "2584859"
  },
  {
    "text": "sometimes that was wrong and it was brittle and it wasn't wasn't it wasn't perfectly accurate anyway so what we",
    "start": "2584859",
    "end": "2591400"
  },
  {
    "text": "what you can do now is you can for instance get um",
    "start": "2591400",
    "end": "2596760"
  },
  {
    "text": "a a class from a Scala class class object from from from a string like Java",
    "start": "2596760",
    "end": "2604599"
  },
  {
    "text": "class 4 name you can also get the type of an object so what we do is actually",
    "start": "2604599",
    "end": "2610119"
  },
  {
    "text": "we have a mirror based design because that's sort of a more General Design Within than the the Java design so",
    "start": "2610119",
    "end": "2616780"
  },
  {
    "text": "there's a mirror a standard mirror scalar reflect mirror that you can ask to get the type of an object",
    "start": "2616780",
    "end": "2622660"
  },
  {
    "text": "and you can then use the type to do other things so for instance you you can say well the super type with the with",
    "start": "2622660",
    "end": "2629680"
  },
  {
    "text": "the with the given class of that object what's that type so for instance if your type is is uh is uh string well no some",
    "start": "2629680",
    "end": "2638800"
  },
  {
    "text": "car well ink list the list list and we will say well what's the super type of",
    "start": "2638800",
    "end": "2644500"
  },
  {
    "text": "traversable we'll say well that's traversable of int something like that you can get all the members of a type",
    "start": "2644500",
    "end": "2651640"
  },
  {
    "text": "you can get named members uh you can get them from for each member its type using",
    "start": "2651640",
    "end": "2657880"
  },
  {
    "text": "the type Sig method you can ask for instance whether whether that type is a subtype of another type so essentially",
    "start": "2657880",
    "end": "2664240"
  },
  {
    "text": "you have the full power of Scala types in reflection looks pretty reasonable no",
    "start": "2664240",
    "end": "2672280"
  },
  {
    "text": "okay so that's actually pretty hard so to show you how hard it is let me show",
    "start": "2672280",
    "end": "2678099"
  },
  {
    "text": "you what Java does so that's the interface type in Java and if you look",
    "start": "2678099",
    "end": "2683260"
  },
  {
    "text": "at the javadoc we find that it's actually empty there are no methods and types nothing you can do with a type if",
    "start": "2683260",
    "end": "2689680"
  },
  {
    "text": "you look at it then the particular types subtypes like generic array type parameterized type type variable class",
    "start": "2689680",
    "end": "2696880"
  },
  {
    "text": "then you find that those methods only tell you what they are like a parameterized type will tell you well",
    "start": "2696880",
    "end": "2703839"
  },
  {
    "text": "what's it its parameter but there's still no methods like what are the members of the type and those things so",
    "start": "2703839",
    "end": "2710500"
  },
  {
    "text": "the only essentially full kit that you have is on the level of classes so that",
    "start": "2710500",
    "end": "2715839"
  },
  {
    "text": "was pre-generics Java Java 1.4 actually has full reflection support you can for",
    "start": "2715839",
    "end": "2720880"
  },
  {
    "text": "instance ask what are the members of a class is a class A subclass of a class of another class but for types nothing",
    "start": "2720880",
    "end": "2726760"
  },
  {
    "text": "and it's not the same thing for instance a list of int is not a subtype of list of string right or traversable of string",
    "start": "2726760",
    "end": "2734500"
  },
  {
    "text": "so the question of whether type is a subtype of another is a very interesting question and there is no way to answer",
    "start": "2734500",
    "end": "2740980"
  },
  {
    "text": "that in Java so want to know whether an arbitrary type A",
    "start": "2740980",
    "end": "2746680"
  },
  {
    "text": "conforms to B in Java and says write your own Java compiler that's the only way you can do that",
    "start": "2746680",
    "end": "2752680"
  },
  {
    "text": "so why why the oversight why didn't why wasn't that done right it actually turns out",
    "start": "2752680",
    "end": "2759339"
  },
  {
    "text": "that in order to do that you need to write the essential parts of a compiler that's what a compiler does decide",
    "start": "2759339",
    "end": "2765520"
  },
  {
    "text": "whether type A is a subtype of type B and if you do that then you will need to ensure that your reflection compiler and",
    "start": "2765520",
    "end": "2772900"
  },
  {
    "text": "standard Java C compiler agree and that's over time it's almost impossible I mean you have bug fixes you have",
    "start": "2772900",
    "end": "2779560"
  },
  {
    "text": "things in the compiler goes forward and everything has to be back ported to the reflection framework imagine the",
    "start": "2779560",
    "end": "2784960"
  },
  {
    "text": "nightmare so it hasn't been done okay so how can we do better",
    "start": "2784960",
    "end": "2791440"
  },
  {
    "text": "the problem then is to manage the dependencies between compiler and",
    "start": "2791440",
    "end": "2797440"
  },
  {
    "text": "reflection so we said okay parts of a compiler will have to be embedded in our",
    "start": "2797440",
    "end": "2802599"
  },
  {
    "text": "reflection framework but other parts not and the reflection framework will add new parts so we have a partial overlap",
    "start": "2802599",
    "end": "2809020"
  },
  {
    "text": "so before I show you how to do that it's maybe time to refresh a little bit the",
    "start": "2809020",
    "end": "2814480"
  },
  {
    "text": "state of dependency injection in Scala so let's see what we do there so",
    "start": "2814480",
    "end": "2820540"
  },
  {
    "text": "dependency injection means we want to avoid hard dependencies to specific classes so that we can rewire them in",
    "start": "2820540",
    "end": "2827980"
  },
  {
    "text": "our reflection framework that will have to be rewired to either the compiler or the runtime reflection and uh instead of",
    "start": "2827980",
    "end": "2836140"
  },
  {
    "text": "calling specific classes with new which is a hard reference we want to have somebody else do the wiring so that's",
    "start": "2836140",
    "end": "2842260"
  },
  {
    "text": "dependency injection uh the Frameworks for dependency injection the most common ones are juice",
    "start": "2842260",
    "end": "2848140"
  },
  {
    "text": "and spring so here's a juice example so here's a simple example of essentially a",
    "start": "2848140",
    "end": "2854859"
  },
  {
    "text": "coffee pot thing so we have some service interfaces and on off device a sensor",
    "start": "2854859",
    "end": "2861520"
  },
  {
    "text": "device warmer and a client and then we have the implementations so",
    "start": "2861520",
    "end": "2867460"
  },
  {
    "text": "there's a there's a heater here which is an on off device there's a pot sensor which is a sensor and then there's a",
    "start": "2867460",
    "end": "2874540"
  },
  {
    "text": "warmer which contains the pot sensor and the heater and it has a trigger method",
    "start": "2874540",
    "end": "2880780"
  },
  {
    "text": "which says well if the sensor tells me coffee is present and heater on else heater off",
    "start": "2880780",
    "end": "2886420"
  },
  {
    "text": "and there there's a client object that takes a warmer and and triggers the warmer and",
    "start": "2886420",
    "end": "2893859"
  },
  {
    "text": "the problem then is uh that to actually wire that up to say well essentially I",
    "start": "2893859",
    "end": "2899140"
  },
  {
    "text": "need to know I need to get supplied the actual warmer in the system I don't want to do it",
    "start": "2899140",
    "end": "2904420"
  },
  {
    "text": "statically with a new uh I have to do some configuration so here we have some",
    "start": "2904420",
    "end": "2911260"
  },
  {
    "text": "binders which says well the on off device here is the heater the sensor devices the parts pot sensor the eye",
    "start": "2911260",
    "end": "2918520"
  },
  {
    "text": "warmer is the warmer and the client is my client and then we have these service injectors and low and p-hole finally we",
    "start": "2918520",
    "end": "2925720"
  },
  {
    "text": "can just start this thing so that's dependency injection with juice which of course works for for Scala as it works",
    "start": "2925720",
    "end": "2932560"
  },
  {
    "text": "for Java and it's pretty standard but it's also yeah I mean show that if you",
    "start": "2932560",
    "end": "2937839"
  },
  {
    "text": "show it to a newbie then I think there's a lot of incantations you have to do it this way",
    "start": "2937839",
    "end": "2942940"
  },
  {
    "text": "you shouldn't you shouldn't understand that right you you won't need to understand the basics how it's done you",
    "start": "2942940",
    "end": "2948400"
  },
  {
    "text": "just say you do it like that that's that's okay okay in scada it's actually uh",
    "start": "2948400",
    "end": "2954880"
  },
  {
    "text": "well it's kind of you can do that but you can also do another thing uh namely",
    "start": "2954880",
    "end": "2960220"
  },
  {
    "text": "use the cake pattern so here we have the same",
    "start": "2960220",
    "end": "2965800"
  },
  {
    "text": "service interfaces here we have the implementation the",
    "start": "2965800",
    "end": "2971140"
  },
  {
    "text": "heater pot sensor warmer component and then in the client we have a",
    "start": "2971140",
    "end": "2980200"
  },
  {
    "text": "the sub components as valves and we trigger",
    "start": "2980200",
    "end": "2986920"
  },
  {
    "text": "it and the advantage of having it with vowels is that we can freely override",
    "start": "2986920",
    "end": "2992079"
  },
  {
    "text": "that so we can override values in in the in the Base Class here",
    "start": "2992079",
    "end": "2998020"
  },
  {
    "text": "you would do a new client and you would override the on off value with a new mock heater into sensor with a new mock",
    "start": "2998020",
    "end": "3004680"
  },
  {
    "text": "sensor for testing and it would just work so over being able to override Fields gets you already part of the way",
    "start": "3004680",
    "end": "3012420"
  },
  {
    "text": "here you have the same fields on the right so that's a sort of intermediate thing in that in this new model components are",
    "start": "3012420",
    "end": "3020220"
  },
  {
    "text": "classes or traits requirements are abstract values so the",
    "start": "3020220",
    "end": "3025619"
  },
  {
    "text": "warmer component here would say okay I need an on off device but I don't want to specify which one so I just have a",
    "start": "3025619",
    "end": "3032940"
  },
  {
    "text": "vowel here which says well when somebody who will Implement me will have to supply that device but for the moment I",
    "start": "3032940",
    "end": "3039300"
  },
  {
    "text": "will leave it open and the sensor is a sensor device so requirements are abstract values and wiring",
    "start": "3039300",
    "end": "3046800"
  },
  {
    "text": "is done by implementing those values and the wiring can be changed by just overriding these values so it's our all",
    "start": "3046800",
    "end": "3054359"
  },
  {
    "text": "together I guess a pretty simple model but it's uh doesn't really work just",
    "start": "3054359",
    "end": "3061680"
  },
  {
    "text": "like the Constructor injection doesn't work for cyclic independencies this doesn't work for cyclic dependencies",
    "start": "3061680",
    "end": "3067740"
  },
  {
    "text": "either so what do we do about that for instead of constructing injection in",
    "start": "3067740",
    "end": "3076079"
  },
  {
    "text": "Juice you would have field injection cell injection so that would work but that's all together a different thing I",
    "start": "3076079",
    "end": "3084780"
  },
  {
    "text": "don't want to go too much into that for Scala what we have is the so-called Cake Powder",
    "start": "3084780",
    "end": "3090599"
  },
  {
    "text": "so what is the cake pattern so we start with the same service interfaces the",
    "start": "3090599",
    "end": "3097140"
  },
  {
    "text": "service implementations now say we have a heater component",
    "start": "3097140",
    "end": "3102359"
  },
  {
    "text": "and the heater component relies on the fact that it needs to be part of an assembly so that's done with this",
    "start": "3102359",
    "end": "3108540"
  },
  {
    "text": "self-type in the top where we say this colon assembly and then the heater component has nested",
    "start": "3108540",
    "end": "3115680"
  },
  {
    "text": "a class heater which is the same thing as it as we had before",
    "start": "3115680",
    "end": "3122339"
  },
  {
    "text": "um for the sensor component I do the same thing the sensor component uh requires",
    "start": "3122339",
    "end": "3129059"
  },
  {
    "text": "that it's part of an assembly and it contains a class sensor and finally for the warmer component we have that here",
    "start": "3129059",
    "end": "3136140"
  },
  {
    "text": "so components are trades the wiring is done by mixing composition we say that our",
    "start": "3136140",
    "end": "3143099"
  },
  {
    "text": "trade assembly is a warmer component and the sensor component and a heater component all together",
    "start": "3143099",
    "end": "3150859"
  },
  {
    "text": "and the requirements then they are the type of this so what do I mean by that",
    "start": "3151740",
    "end": "3157380"
  },
  {
    "text": "so here we see um let's see where do we have some for",
    "start": "3157380",
    "end": "3162780"
  },
  {
    "text": "instance in the sensor component we have a heater.off so where did the heater",
    "start": "3162780",
    "end": "3168059"
  },
  {
    "text": "come from it's not declared in sensor component well when we write here.off",
    "start": "3168059",
    "end": "3173640"
  },
  {
    "text": "what it means is really this dot heater.off right and the type of this in",
    "start": "3173640",
    "end": "3179339"
  },
  {
    "text": "sensor component is not sensor component but what it would usually be but it's a",
    "start": "3179339",
    "end": "3184980"
  },
  {
    "text": "type that we indicate here so it says the type of this in the sensor component is an assembly and we go to assembly and",
    "start": "3184980",
    "end": "3192119"
  },
  {
    "text": "say aha there we have a heater component and the heater component has a has the heater so that's how the heater got from",
    "start": "3192119",
    "end": "3198599"
  },
  {
    "text": "the heater component into the sensor component it could be used in the sensor component but defined in the heater",
    "start": "3198599",
    "end": "3204420"
  },
  {
    "text": "component simply by saying okay these things are mixed together here and here we in a sense we require already that",
    "start": "3204420",
    "end": "3211079"
  },
  {
    "text": "sensor component must be part of something that's at least as good as assembly so that's the idea of",
    "start": "3211079",
    "end": "3218400"
  },
  {
    "text": "self-types that we have in in Scala and it's again it's something that is in principle it's very very simple so what",
    "start": "3218400",
    "end": "3226700"
  },
  {
    "text": "the classical rule is always that the type of this is the type of the",
    "start": "3226700",
    "end": "3231839"
  },
  {
    "text": "enclosing class or and that's actually if you think of it there's no good reason why it should be",
    "start": "3231839",
    "end": "3238079"
  },
  {
    "text": "uh the type of this could be anything and here we just declare what it is you",
    "start": "3238079",
    "end": "3243720"
  },
  {
    "text": "just have to make sure that when you have a concrete class or you create an object that then the concrete class has",
    "start": "3243720",
    "end": "3251520"
  },
  {
    "text": "the same idea of what its self-type is what the type of this is and all components what what the",
    "start": "3251520",
    "end": "3258480"
  },
  {
    "text": "components want agrees with that so the the situation is really very analogous",
    "start": "3258480",
    "end": "3263940"
  },
  {
    "text": "to abstract methods in object-oriented languages an abstract method doesn't have an implementation but the compiler",
    "start": "3263940",
    "end": "3270720"
  },
  {
    "text": "doesn't scream and says well you can't write this class it has a method you haven't implemented you say that's okay",
    "start": "3270720",
    "end": "3275760"
  },
  {
    "text": "by the time you create an object of this class the compiler will check that you will have implemented this method surf",
    "start": "3275760",
    "end": "3282720"
  },
  {
    "text": "types it's the same thing the type of this is something richer than the component that's okay by the time you",
    "start": "3282720",
    "end": "3287880"
  },
  {
    "text": "create an object the compiler will check that the two types agree that's that's all there is to it really and it's been",
    "start": "3287880",
    "end": "3294240"
  },
  {
    "text": "something that we started actually when we modeled or object-oriented programming theoretical computer science",
    "start": "3294240",
    "end": "3301740"
  },
  {
    "text": "we try to model that it sort of fell out as something that was slightly more elegant in our model so we",
    "start": "3301740",
    "end": "3308760"
  },
  {
    "text": "say well we do it in the models but in the language we don't need to do that and then we somebody told me well no no",
    "start": "3308760",
    "end": "3315960"
  },
  {
    "text": "you should be honest what you have any model should be in the language I said okay put it in the language as well",
    "start": "3315960",
    "end": "3321300"
  },
  {
    "text": "probably not much use usage and now we found out well this thing actually gives you dependency injection so it's a big",
    "start": "3321300",
    "end": "3327059"
  },
  {
    "text": "deal so it's a very nice story how that how that made it from sort of saying the model becomes more elegant but I believe",
    "start": "3327059",
    "end": "3333540"
  },
  {
    "text": "the code as well okay why is it called the cake pattern well it's called the cake pattern because you see the cake",
    "start": "3333540",
    "end": "3339780"
  },
  {
    "text": "has slices and layers so these things they are the layers so there's the outer",
    "start": "3339780",
    "end": "3345359"
  },
  {
    "text": "layer there's the inner layer the warmer class and the warmer component traits and the slices are essentially the",
    "start": "3345359",
    "end": "3351300"
  },
  {
    "text": "warmer the sensor the heater so you can essentially layer things and slice things and then combine it all into a",
    "start": "3351300",
    "end": "3357599"
  },
  {
    "text": "cake okay the cake pattern is used in a lot",
    "start": "3357599",
    "end": "3362819"
  },
  {
    "text": "of scalar code I believe for instance foursquare's whole system uses the cake pattern almost everywhere so does the",
    "start": "3362819",
    "end": "3369720"
  },
  {
    "text": "Scala compiler so here's a very very abbreviated thing what this color compiler does so a big part of the",
    "start": "3369720",
    "end": "3377099"
  },
  {
    "text": "compiler is dealing with types and another big part is dealing with symbols so symbols represent definitions",
    "start": "3377099",
    "end": "3383460"
  },
  {
    "text": "declarations like fields and methods and classes and things like that and there",
    "start": "3383460",
    "end": "3388680"
  },
  {
    "text": "are two large parts so you don't want to merge them into a single one and they both need to know about each other so",
    "start": "3388680",
    "end": "3394500"
  },
  {
    "text": "the types when you have a types you have for instance a method type is a particular type that has parameters",
    "start": "3394500",
    "end": "3400619"
  },
  {
    "text": "which are symbols and a symbol of course has a type so the we have references on",
    "start": "3400619",
    "end": "3406079"
  },
  {
    "text": "the type on the type level now from one to the other not just on the field level on the type level and then we say a",
    "start": "3406079",
    "end": "3412200"
  },
  {
    "text": "simple table has the symbols part and the types part it extends those two in reality there are not two slices of the",
    "start": "3412200",
    "end": "3418980"
  },
  {
    "text": "cake like here about 20 uh of the that are the different aspects of things like that",
    "start": "3418980",
    "end": "3425640"
  },
  {
    "text": "okay so that's the compiler and it uses the cake pattern so how can we make use of that for reflection",
    "start": "3425640",
    "end": "3431700"
  },
  {
    "text": "uh the first thing is they are very close both need to decide different the",
    "start": "3431700",
    "end": "3436859"
  },
  {
    "text": "same the same questions it's a type of subtype of another what are the members of a type and so on but then again",
    "start": "3436859",
    "end": "3442319"
  },
  {
    "text": "they're also quite different so for instance if there's an error the compiler would probably show that nicely",
    "start": "3442319",
    "end": "3448140"
  },
  {
    "text": "on the console or in the IDE whereas if there's an error in reflection what can it do there is no console it has to",
    "start": "3448140",
    "end": "3454740"
  },
  {
    "text": "throw an exception a compiler will access a lot of files when it when it when it compiles in reflection you don't",
    "start": "3454740",
    "end": "3462180"
  },
  {
    "text": "have a class path so you can't actually go out and read files or things like that you have to do it all essentially",
    "start": "3462180",
    "end": "3467760"
  },
  {
    "text": "with the loaded classes and their annotations and so on so that's a couple of differences but we are close enough",
    "start": "3467760",
    "end": "3474000"
  },
  {
    "text": "that it makes sense to combine these two things so what we do is we",
    "start": "3474000",
    "end": "3482280"
  },
  {
    "text": "try to work with several cakes so we say we have one cake which is reflect internal Universe which is essentially",
    "start": "3482280",
    "end": "3489119"
  },
  {
    "text": "all the internal parts of Reflections that contain symbols and types and what the members are and things like that and",
    "start": "3489119",
    "end": "3495960"
  },
  {
    "text": "then we have NSC NSC is these the standard scalar compiler stood at some point for new scalar compiler now it's",
    "start": "3495960",
    "end": "3502859"
  },
  {
    "text": "no longer new for a long time already so NSC Global that's the root of this color compiler that would be a subtype of that",
    "start": "3502859",
    "end": "3510240"
  },
  {
    "text": "it would add more stuff to that and change some specific things like error reporting to go to the console and then",
    "start": "3510240",
    "end": "3517260"
  },
  {
    "text": "there's another thing reflect runtime mirror which is the actual mirror in reflection that also is a subtype of",
    "start": "3517260",
    "end": "3525059"
  },
  {
    "text": "reflect internal universe so each of these is a cake of many traits and classes and here we have two refinements",
    "start": "3525059",
    "end": "3531540"
  },
  {
    "text": "on the left and on the right so that works well but there's a problem with that that here this thing here simply",
    "start": "3531540",
    "end": "3540000"
  },
  {
    "text": "exposes way too much detail because essentially for the compiler to compiler needs a lot of access to symbols and",
    "start": "3540000",
    "end": "3547140"
  },
  {
    "text": "types A lot of very very sophisticated very subtle methods no way we're gonna guarantee that these are stable from one",
    "start": "3547140",
    "end": "3553859"
  },
  {
    "text": "version of the next nobody would have the the the the the the the stamina to",
    "start": "3553859",
    "end": "3559140"
  },
  {
    "text": "document all these things in a way that's expected from a from a public facing interface so we can't do that",
    "start": "3559140",
    "end": "3565020"
  },
  {
    "text": "that would be totally confusing I mean these things have way way too many methods so we want to abstract things",
    "start": "3565020",
    "end": "3571200"
  },
  {
    "text": "also there's a that's the other small issue that on the for the public facing API we need to be",
    "start": "3571200",
    "end": "3579599"
  },
  {
    "text": "thread safe in the compiler we need to be fast and not thread safe because it's single threaded so so that obvious",
    "start": "3579599",
    "end": "3585119"
  },
  {
    "text": "differences here so what we do instead is we put a cleaned up facade on top of this whole",
    "start": "3585119",
    "end": "3591839"
  },
  {
    "text": "thing which is called reflect API universe and that's essentially uh",
    "start": "3591839",
    "end": "3597599"
  },
  {
    "text": "there's an object that implements it which is called reflect.mirror",
    "start": "3597599",
    "end": "3602700"
  },
  {
    "text": "um so here's the here's the the roughly the",
    "start": "3602700",
    "end": "3611040"
  },
  {
    "text": "thing of the how we make this facade so we have our trade types and it's part of",
    "start": "3611040",
    "end": "3617280"
  },
  {
    "text": "our universe and then we have a class called apps type abstract type",
    "start": "3617280",
    "end": "3624180"
  },
  {
    "text": "which gives you the claimed up interface of a type so that's essentially what we want to expose to",
    "start": "3624180",
    "end": "3630839"
  },
  {
    "text": "the reflection framework so it contains things like type symbol declaration that gives you the member sorry now that",
    "start": "3630839",
    "end": "3637440"
  },
  {
    "text": "gives you the thing that's declared in the type member gives you the member of the type all members we have seen is",
    "start": "3637440",
    "end": "3643020"
  },
  {
    "text": "subtype we have seen base type so all the implementations of these methods that we have seen initially are in the",
    "start": "3643020",
    "end": "3649020"
  },
  {
    "text": "first state and then we say here in this trade types we say well it will have a",
    "start": "3649020",
    "end": "3654599"
  },
  {
    "text": "type type and that type will be a subtype of apps type but we don't say what that type is it's just an abstract",
    "start": "3654599",
    "end": "3661500"
  },
  {
    "text": "type now in the actual implementation of the reflect internal universe that's the",
    "start": "3661500",
    "end": "3667920"
  },
  {
    "text": "thing that we hide from you there is a concrete implementation of that type that actually does the thing but here",
    "start": "3667920",
    "end": "3673500"
  },
  {
    "text": "it's just abstract that we just say there is a type that has this interface and you can refer to it and you can call",
    "start": "3673500",
    "end": "3679500"
  },
  {
    "text": "all these members but you can't call the others because they are hidden from this type abstraction",
    "start": "3679500",
    "end": "3684839"
  },
  {
    "text": "so that's a very powerful way to actually package up things to do encapsulation information hiding which",
    "start": "3684839",
    "end": "3691920"
  },
  {
    "text": "is much more powerful than standard interfaces the fact that you can have abstract types is very powerful so why",
    "start": "3691920",
    "end": "3698220"
  },
  {
    "text": "can't we do that whole the same thing with interfaces so with interfaces the problem would be let's say we have this",
    "start": "3698220",
    "end": "3704880"
  },
  {
    "text": "less than method that takes another argument we type the the other type right let's say we don't want to do that",
    "start": "3704880",
    "end": "3713700"
  },
  {
    "text": "so if we ex if we mention that this thing is a type we have to tell you what it is because it's part of the interface",
    "start": "3713700",
    "end": "3720359"
  },
  {
    "text": "so type leaks so we can't tell you what it is we could maybe say that has a type",
    "start": "3720359",
    "end": "3725700"
  },
  {
    "text": "apps type right but that means that the less than method then could only use the cleaned",
    "start": "3725700",
    "end": "3732780"
  },
  {
    "text": "up interfaces of the apps type and it probably wants to know much more internally so I can't do that either",
    "start": "3732780",
    "end": "3738720"
  },
  {
    "text": "and we can't re-implement it with a type because if we override a method well it",
    "start": "3738720",
    "end": "3743880"
  },
  {
    "text": "must it must be exactly the same type it can't be something that's stricter than the other thing so that shows that with",
    "start": "3743880",
    "end": "3749339"
  },
  {
    "text": "the standard weight of just interfaces you don't actually get this information hiding if there are flows from one",
    "start": "3749339",
    "end": "3757440"
  },
  {
    "text": "method to the next via other types then you really need to full power of these abstract types",
    "start": "3757440",
    "end": "3763319"
  },
  {
    "text": "okay so here's the implementation that's the reflect internal package so here you",
    "start": "3763319",
    "end": "3769319"
  },
  {
    "text": "have the trade types and here's the concrete class type that would slot in so that's like an abstract",
    "start": "3769319",
    "end": "3775799"
  },
  {
    "text": "definition that's a concrete definition that tells you what it is it extends apps type of course and it contains the",
    "start": "3775799",
    "end": "3782460"
  },
  {
    "text": "Full implementation of the interface but it would also contain many more implemented many more methods",
    "start": "3782460",
    "end": "3789180"
  },
  {
    "text": "so interfaces are not enough so in the conclusion what I wanted to",
    "start": "3789180",
    "end": "3795480"
  },
  {
    "text": "show you here a little bit is what you can do with Scala in terms of composition and abstraction it's",
    "start": "3795480",
    "end": "3801240"
  },
  {
    "text": "actually a very powerful and but I believe also very regular language when it comes to position composition because",
    "start": "3801240",
    "end": "3806940"
  },
  {
    "text": "it has a couple of simple principles first is everything can be nested classes methods object types you can",
    "start": "3806940",
    "end": "3813240"
  },
  {
    "text": "Nest them all inside each other second one principle is everything can be abstract a method can be abstract but so",
    "start": "3813240",
    "end": "3820020"
  },
  {
    "text": "can be a value or a type and third is that the type of this can be declared",
    "start": "3820020",
    "end": "3825180"
  },
  {
    "text": "freely and that can express dependencies and finally that thing together gives us",
    "start": "3825180",
    "end": "3831000"
  },
  {
    "text": "a great software architecture that allows us to attack problems that are previously unsolvable because I believe",
    "start": "3831000",
    "end": "3837420"
  },
  {
    "text": "really to give a rich reflection interface to a language version and solve problem I don't know any other",
    "start": "3837420",
    "end": "3843359"
  },
  {
    "text": "language that has that and here the the composition principles made that problem solvable by being able to really extract",
    "start": "3843359",
    "end": "3851339"
  },
  {
    "text": "the key cards and make them both reusable in two instances reflection compiler but also be able to abstract",
    "start": "3851339",
    "end": "3858480"
  },
  {
    "text": "over that so that we can hide the parts that are not not important for the user",
    "start": "3858480",
    "end": "3864480"
  },
  {
    "text": "okay uh I think I probably skipped this thing and uh go right to questions okay",
    "start": "3864480",
    "end": "3871140"
  },
  {
    "text": "so there was a recent blog post by David Pollock where he claims that the major",
    "start": "3871140",
    "end": "3876240"
  },
  {
    "text": "uh obstacle to skull adoption in industry is the binary compatibility between different versions so there was",
    "start": "3876240",
    "end": "3882000"
  },
  {
    "text": "this process called Fresh Scala the idea was to simultaneously build all the",
    "start": "3882000",
    "end": "3887339"
  },
  {
    "text": "libraries and testing Frameworks with each new release and that was not implemented yet so I wonder what are",
    "start": "3887339",
    "end": "3893700"
  },
  {
    "text": "your opinions and what are the plans to automate this process yeah so so he's",
    "start": "3893700",
    "end": "3899280"
  },
  {
    "text": "absolutely right so what we hear we've asked a lot of people in the industry that use scada and people and other",
    "start": "3899280",
    "end": "3906960"
  },
  {
    "text": "people that do not use scalab for various reasons where essentially what are your main pain points and we got",
    "start": "3906960",
    "end": "3913079"
  },
  {
    "text": "number one always IDE immaturity so that's what we have worked on intensely and number two binary compatibility so",
    "start": "3913079",
    "end": "3920819"
  },
  {
    "text": "what are we going to do about binary compatibility the first thing is really",
    "start": "3920819",
    "end": "3926040"
  },
  {
    "text": "what David proposes he ran into an open door because that's precisely the thing that we have started doing the uh Josh",
    "start": "3926040",
    "end": "3934859"
  },
  {
    "text": "zurath who essentially started fresh Scala or David started first Scala but",
    "start": "3934859",
    "end": "3940040"
  },
  {
    "text": "Joshua's essentially was volunteered to do it he didn't have time then now he's",
    "start": "3940040",
    "end": "3945180"
  },
  {
    "text": "part of typesafe that's precisely what he will do so so there will be a it's",
    "start": "3945180",
    "end": "3950220"
  },
  {
    "text": "called Community build a set of blessed libraries that where the idea is the if",
    "start": "3950220",
    "end": "3957720"
  },
  {
    "text": "somebody wants to contribute that Library it will be built nightly with the nightly build so that means it will",
    "start": "3957720",
    "end": "3963420"
  },
  {
    "text": "come out at the same time as any new scholar release so you can then package the get get all these libraries in a",
    "start": "3963420",
    "end": "3970319"
  },
  {
    "text": "single package the other thing that does for us because I think to the libraries they're really two",
    "start": "3970319",
    "end": "3976260"
  },
  {
    "text": "problems it's not just binary compatibility it's also the fact that some of the libraries get pushed out",
    "start": "3976260",
    "end": "3982079"
  },
  {
    "text": "with uh great anti-anticipation and enthusiasm but then they sort of Whittle",
    "start": "3982079",
    "end": "3988200"
  },
  {
    "text": "away and people lose interest and they're not maintained and then if you bet your system on that library then",
    "start": "3988200",
    "end": "3994079"
  },
  {
    "text": "you've lost so one other part of this community build will be well those are libraries that are guaranteed to be",
    "start": "3994079",
    "end": "4000440"
  },
  {
    "text": "maintained so if somebody wants to use that Library they must guarantee a level",
    "start": "4000440",
    "end": "4005539"
  },
  {
    "text": "of commitment to actually maintaining that Library if you want to propose further libraries to do that and and are",
    "start": "4005539",
    "end": "4012920"
  },
  {
    "text": "committed to maintaining that and send mail to Josh sures and uh we I'm sure we",
    "start": "4012920",
    "end": "4020599"
  },
  {
    "text": "we would love to hear from you and and work with you on that so that's that's the the short term",
    "start": "4020599",
    "end": "4026780"
  },
  {
    "text": "version there are some other aspects to that one is that typesafe will guarantee",
    "start": "4026780",
    "end": "4031880"
  },
  {
    "text": "stable bills so you don't have to change as often the third part is that we",
    "start": "4031880",
    "end": "4037099"
  },
  {
    "text": "already guarantee binary compatibility of at least minor versions so 291 was binary",
    "start": "4037099",
    "end": "4043579"
  },
  {
    "text": "compatible to two nine and we actually checked verified that with the tool we've open source that tool so now other",
    "start": "4043579",
    "end": "4051440"
  },
  {
    "text": "libraries can do the same thing that if they actually push out a new library then that library",
    "start": "4051440",
    "end": "4057140"
  },
  {
    "text": "that can verify that the library is binary compatible one thing that's sometimes a bit overlooked is that it's",
    "start": "4057140",
    "end": "4063440"
  },
  {
    "text": "as much a library problem than a compiler problem because a library risks being binary incompatible if let's say",
    "start": "4063440",
    "end": "4070220"
  },
  {
    "text": "you add new things to a trait and then implementers of that trade uh become",
    "start": "4070220",
    "end": "4075500"
  },
  {
    "text": "can't can't really work anymore the that's things that you can't do in Java",
    "start": "4075500",
    "end": "4081319"
  },
  {
    "text": "it would be legal the compiler would would you'd have to rewrite your implementations scale is sort of one",
    "start": "4081319",
    "end": "4087260"
  },
  {
    "text": "step ahead and says well okay you can actually add new methods to a trade as long as they have implementations",
    "start": "4087260",
    "end": "4092599"
  },
  {
    "text": "everything will work as it did before only you need to recompile but the",
    "start": "4092599",
    "end": "4098238"
  },
  {
    "text": "problem is that since it's now so convenient to actually add stuff to a trait which in Java you can't do people",
    "start": "4098239",
    "end": "4105738"
  },
  {
    "text": "actually do it and break binary compatibility the alternative is not necessarily better so for instance if I",
    "start": "4105739",
    "end": "4112580"
  },
  {
    "text": "take eclipse eclipse has a couple of interfaces that are numbered through so interface one interface two interface",
    "start": "4112580",
    "end": "4118338"
  },
  {
    "text": "three interface four and so on and that was every time they added something to the old interface and then for a client",
    "start": "4118339",
    "end": "4124160"
  },
  {
    "text": "of the interface it's a nightmare because you don't know what you have you say well if it's the new version then I",
    "start": "4124160",
    "end": "4129318"
  },
  {
    "text": "can't can call this if it's the old version I have to do something else so you have a lot of spaghetti code if",
    "start": "4129319",
    "end": "4135140"
  },
  {
    "text": "instance of instance of instance of in in Java it's the only way to do it because you can't actually add two",
    "start": "4135140",
    "end": "4141258"
  },
  {
    "text": "interfaces in the current Java in Java 8 it looks a thing like virtual extension",
    "start": "4141259",
    "end": "4147318"
  },
  {
    "text": "methods that could solve that that would be very much like the trade methods and I'm lobbying with the Brian guts and the",
    "start": "4147319",
    "end": "4155778"
  },
  {
    "text": "the Java team to actually make that General enough that we can Implement trades that way and that would solve a lot of the binary compatibility problems",
    "start": "4155779",
    "end": "4162500"
  },
  {
    "text": "I'm not there yet so if you can help me have a good good direct line to to Brian",
    "start": "4162500",
    "end": "4168440"
  },
  {
    "text": "or something like that Lobby then that they do that",
    "start": "4168440",
    "end": "4172839"
  },
  {
    "text": "hey um I use IntelliJ and I it sounds like you're doing a lot of work on the",
    "start": "4173960",
    "end": "4179420"
  },
  {
    "text": "eclipse side of things is there going to be that work that you're doing is that",
    "start": "4179420",
    "end": "4184880"
  },
  {
    "text": "the will IntelliJ be able to take advantage of some of that work for the compiler or why be using Eclipse a year",
    "start": "4184880",
    "end": "4192199"
  },
  {
    "text": "from now yeah so so we we we concentrated on Eclipse because IntelliJ",
    "start": "4192199",
    "end": "4197840"
  },
  {
    "text": "is in pretty good hands already so we don't want to compete with those guys and and Eclipse was in Dire Straits so",
    "start": "4197840",
    "end": "4204080"
  },
  {
    "text": "we felt that Eclipse was the one more in need which is not a value judgment at all that we say you should be using",
    "start": "4204080",
    "end": "4210199"
  },
  {
    "text": "eclipse and not intelligent you're very very happy that jet brains and outside contributors do such a good job with",
    "start": "4210199",
    "end": "4216080"
  },
  {
    "text": "IntelliJ can IntelliJ use the eclipse or what we do with the presentation compiler in principle they could yeah so",
    "start": "4216080",
    "end": "4223840"
  },
  {
    "text": "intellij's model is a bit different that they use the IntelliJ data structures the IntelliJ trees that's shared between",
    "start": "4223840",
    "end": "4230420"
  },
  {
    "text": "all languages and that's why they get the whole the fantastic factorings for free essentially you can import them",
    "start": "4230420",
    "end": "4236719"
  },
  {
    "text": "immediately and you get this pasting from java to Scala and back so that's really a cute trick what they can do",
    "start": "4236719",
    "end": "4243140"
  },
  {
    "text": "where they suffer a little bit is then in the supporting compiler they had to write their own which we I personally",
    "start": "4243140",
    "end": "4250219"
  },
  {
    "text": "was found it great that they did that because it was really fantastic to get",
    "start": "4250219",
    "end": "4255500"
  },
  {
    "text": "some sanity check whether our spec and our compiler match so in the early days",
    "start": "4255500",
    "end": "4260780"
  },
  {
    "text": "of the intelligent plugin I always got that thing males that said well the spec says this the compiler says that explain",
    "start": "4260780",
    "end": "4267860"
  },
  {
    "text": "please and it was most most of the time it was a bug and the compiler or more",
    "start": "4267860",
    "end": "4273080"
  },
  {
    "text": "likely the spec actually that the spec just just didn't didn't do things correctly so this was immensely immensely helpful to do that but now can",
    "start": "4273080",
    "end": "4282739"
  },
  {
    "text": "they use the presentation compiler I believe they could but it would mean essentially having two parallel trees so",
    "start": "4282739",
    "end": "4288560"
  },
  {
    "text": "essentially to have their own trees and then to just generate the scatter trees on the side I mean presentation compiler",
    "start": "4288560",
    "end": "4293900"
  },
  {
    "text": "in its own thread anyway and then to just essentially get the information in",
    "start": "4293900",
    "end": "4299060"
  },
  {
    "text": "and out index by position to say to type check a tree on the IntelliJ site they",
    "start": "4299060",
    "end": "4304340"
  },
  {
    "text": "would say well that's the position start Point endpoint hand that over to the to the presentation compiler get the type",
    "start": "4304340",
    "end": "4309860"
  },
  {
    "text": "out of it and continue so it's possible and maybe maybe it will be there I think it would I mean it would increase the",
    "start": "4309860",
    "end": "4315800"
  },
  {
    "text": "memory footprint but I think it would certainly increase the the error highlighting in in territory yeah",
    "start": "4315800",
    "end": "4322940"
  },
  {
    "text": "uh last year's at least two new uh Java",
    "start": "4322940",
    "end": "4328760"
  },
  {
    "text": "GBM Baseline which appears uh say uh sale on from JBoss kotlin from IntelliJ",
    "start": "4328760",
    "end": "4336679"
  },
  {
    "text": "and buffer FM seems borrowed a lot of Scala aminstein syntax and organization",
    "start": "4336679",
    "end": "4344900"
  },
  {
    "text": "what you can talk about what is your opinion about weather projects I think",
    "start": "4344900",
    "end": "4350480"
  },
  {
    "text": "that's very very good so it shows that I I mean we have we have borrowed a lot of things from other languages so if other",
    "start": "4350480",
    "end": "4357080"
  },
  {
    "text": "languages now borrow things from Scala that's that's that's all together a very good thing and it shows well first we",
    "start": "4357080",
    "end": "4362780"
  },
  {
    "text": "did something that obviously is attractive and worthwhile and generally I think that having language",
    "start": "4362780",
    "end": "4370880"
  },
  {
    "text": "experimentation and new languages on the jvm is a very good thing so I there there's some really silly language Wars",
    "start": "4370880",
    "end": "4377540"
  },
  {
    "text": "that start and people say well why do you design a new language say Scala and things like that and I think that's just",
    "start": "4377540",
    "end": "4382640"
  },
  {
    "text": "silly so to give you one story when when I was um",
    "start": "4382640",
    "end": "4387920"
  },
  {
    "text": "when Java came out in 95 I was very attracted by Java that was even when it",
    "start": "4387920",
    "end": "4393440"
  },
  {
    "text": "was in Alpha so I set out to write a Java compiler because that should be the basis of writing then",
    "start": "4393440",
    "end": "4400540"
  },
  {
    "text": "our extended language compilers pizza and things like that and a colleague of me mine said well why do you write a",
    "start": "4400540",
    "end": "4406940"
  },
  {
    "text": "Java compiler there is already one well that compiler then became Java C in the end and uh and and things like that so",
    "start": "4406940",
    "end": "4413900"
  },
  {
    "text": "it shows that that often people will say well why do you do this new stuff there's already the incumbent but I",
    "start": "4413900",
    "end": "4419840"
  },
  {
    "text": "think well who knows I mean it might be something great that happens there so I I think absolutely Innovation is good",
    "start": "4419840",
    "end": "4426500"
  },
  {
    "text": "experimentation is good",
    "start": "4426500",
    "end": "4429880"
  },
  {
    "text": "so um I haven't seen that much yet so uh",
    "start": "4432260",
    "end": "4441440"
  },
  {
    "text": "before we can so so I I've seen some of the initial presentations",
    "start": "4441440",
    "end": "4447199"
  },
  {
    "text": "where uh the the problem is you can't really",
    "start": "4447199",
    "end": "4452540"
  },
  {
    "text": "judge before it's out there often you say well we want to do things this way and then there's a reality check that",
    "start": "4452540",
    "end": "4458420"
  },
  {
    "text": "you say well Scala has also evolved so in some of the things that we pushed out in Scala we believed well this is very",
    "start": "4458420",
    "end": "4465020"
  },
  {
    "text": "elegant this is the right way and then we found now actually there are lots of craps that programmers fall into so we",
    "start": "4465020",
    "end": "4470300"
  },
  {
    "text": "had to change it so I think we need to judge them when they're out it's too",
    "start": "4470300",
    "end": "4475640"
  },
  {
    "text": "early to to to to to to to to to to decide now of the two languages it seems like",
    "start": "4475640",
    "end": "4481159"
  },
  {
    "text": "kotlin goes more in this color Direction in terms of syntax and Cylon but all that is pretty superficial to judge a",
    "start": "4481159",
    "end": "4488000"
  },
  {
    "text": "language by its syntax so so we have to see when they're out and then see see how they're doing",
    "start": "4488000",
    "end": "4494980"
  }
]