[
  {
    "text": "foreign [Music]",
    "start": "1380",
    "end": "14249"
  },
  {
    "text": "so most of you are already familiar with graphql but just so we're on the same page let's",
    "start": "15360",
    "end": "21960"
  },
  {
    "text": "start with a quick intro so graphql is an alternative communication protocol for apis between",
    "start": "21960",
    "end": "28740"
  },
  {
    "text": "the client and the server in graphql we have a schema that describes the data graph",
    "start": "28740",
    "end": "34500"
  },
  {
    "text": "this data is all the data that you can fetch from the server and the schema is formed with types",
    "start": "34500",
    "end": "39719"
  },
  {
    "text": "which contains fields and this field reference other types this is what a schema looks like in the",
    "start": "39719",
    "end": "46200"
  },
  {
    "text": "graphql schema definition language set of root types that we call query",
    "start": "46200",
    "end": "52860"
  },
  {
    "text": "mutation and subscription these are the entry points to the graph",
    "start": "52860",
    "end": "58140"
  },
  {
    "text": "with these entry points we can construct a query this query is a tree based structure",
    "start": "58140",
    "end": "63840"
  },
  {
    "text": "and the query can be as big as you want or as small as you want in this particular query we want a list",
    "start": "63840",
    "end": "70500"
  },
  {
    "text": "of movies and for each movie we want a title now we can take this query and it's",
    "start": "70500",
    "end": "76560"
  },
  {
    "text": "typically packaged into an HTTP post request and sent to the graphql server",
    "start": "76560",
    "end": "81659"
  },
  {
    "text": "the graphql server processes the query and then returns a response typically a Json object",
    "start": "81659",
    "end": "87479"
  },
  {
    "text": "very simply put graphql gives you the ability to fetch exactly the data you want from the server not more not less",
    "start": "87479",
    "end": "94680"
  },
  {
    "text": "and that's it that's graphql in a nutshell so what's on the hype about why is everyone so excited about graphql",
    "start": "94680",
    "end": "101700"
  },
  {
    "text": "let's talk about some of the benefits one of the big benefits of graphql is to minimize the round trips with",
    "start": "101700",
    "end": "107520"
  },
  {
    "text": "aggregation since the query can be as big or small we can fetch all the needed data in a",
    "start": "107520",
    "end": "112560"
  },
  {
    "text": "single round trip so we can take a look at this quick example these are the movie recommendations for me on the Netflix UI",
    "start": "112560",
    "end": "120840"
  },
  {
    "text": "and you can imagine we might have two apis to support this UI we have a movie",
    "start": "120840",
    "end": "127020"
  },
  {
    "text": "recommendation API and for each of the movie IDs that the recommendation API",
    "start": "127020",
    "end": "132120"
  },
  {
    "text": "recommends we can have an image API and let's say they are deployed in U.S West in California",
    "start": "132120",
    "end": "138540"
  },
  {
    "text": "and I'm visiting my parents in Singapore which is approximately 8 600 miles from",
    "start": "138540",
    "end": "144060"
  },
  {
    "text": "the server so when I open the Netflix app I have to make two sequential requests to be able to render this UI",
    "start": "144060",
    "end": "150660"
  },
  {
    "text": "and now there's many ways to solve this problem but you could imagine we can use something like graphql to",
    "start": "150660",
    "end": "156420"
  },
  {
    "text": "aggregate so that the client can write a single query topics and image for each",
    "start": "156420",
    "end": "161700"
  },
  {
    "text": "of them maybe in the future we add badges and then we add a badge API",
    "start": "161700",
    "end": "167700"
  },
  {
    "text": "and then we just update the query it's still a single query and now",
    "start": "167700",
    "end": "172920"
  },
  {
    "text": "graphql is not the only way to solve this problem you can just this can be a rest API as well and but then",
    "start": "172920",
    "end": "180000"
  },
  {
    "text": "you kind of get this complex BFF architecture and the rest API is not reusable graphql provides a more",
    "start": "180000",
    "end": "185940"
  },
  {
    "text": "reusable pattern for this kind of aggregation orchestration hence graphql is a really good fit for",
    "start": "185940",
    "end": "192239"
  },
  {
    "text": "Consumer applications like Netflix sample graphql schema it might look",
    "start": "192239",
    "end": "199560"
  },
  {
    "text": "similar to model classes in Java because we can actually generate model classes both on the server side and the client",
    "start": "199560",
    "end": "205920"
  },
  {
    "text": "side and this gives us much much more ease to write the code and send it to our API",
    "start": "205920",
    "end": "212340"
  },
  {
    "text": "and back there's also a clear indication of what's nullable and what's not it's",
    "start": "212340",
    "end": "217800"
  },
  {
    "text": "built into the language so you can add an exclamation point to Mark a field nullable and this reduces the churn caused by",
    "start": "217800",
    "end": "225060"
  },
  {
    "text": "bugs in Loosely typed apis it also forces collaboration between the client and the server teams",
    "start": "225060",
    "end": "231120"
  },
  {
    "text": "but the strong typing is not just great as a contract you can also build developer tools and",
    "start": "231120",
    "end": "236220"
  },
  {
    "text": "power them using it and one other big benefit of graphql is",
    "start": "236220",
    "end": "242519"
  },
  {
    "text": "it shines when it implemented as a single graph for your organization because first it becomes a visual aid",
    "start": "242519",
    "end": "249120"
  },
  {
    "text": "for all the data in your organization and then it also becomes the connecting dots for all the different domains",
    "start": "249120",
    "end": "254939"
  },
  {
    "text": "and then you can write a query that crosses these domains so this is a really powerful paradigm",
    "start": "254939",
    "end": "262680"
  },
  {
    "text": "my name is Teja shikri and I'm a senior software engineer at Netflix for the past three years I've been blessed to be",
    "start": "262680",
    "end": "268620"
  },
  {
    "text": "part of this amazing team that I've been working on our Federated graphql platform",
    "start": "268620",
    "end": "273660"
  },
  {
    "text": "my focus has been with graphql and distributed systems and most recently I've been also working on developer",
    "start": "273660",
    "end": "279600"
  },
  {
    "text": "tools and developer education and I'm a big fan of API stewardship",
    "start": "279600",
    "end": "286340"
  },
  {
    "text": "so we'll for our talk today we're going to start cataloging two of the common architectures pattern for graphql in the",
    "start": "286440",
    "end": "293580"
  },
  {
    "text": "industry and we're going to dive deep into the Federated architecture which is what we're doing at Netflix",
    "start": "293580",
    "end": "298680"
  },
  {
    "text": "then we'll jump into some of the migration challenges and some strategy recommendations for you so let's get started",
    "start": "298680",
    "end": "306419"
  },
  {
    "text": "so graphql was open source by Facebook in 2015. and since then two core parents have",
    "start": "306419",
    "end": "312780"
  },
  {
    "text": "emerged across the industry the most common way to implement graphql is through in the monolithic",
    "start": "312780",
    "end": "319139"
  },
  {
    "text": "architecture why because we want the one graph that we saw earlier in small companies it is usually part",
    "start": "319139",
    "end": "325860"
  },
  {
    "text": "the graphql service is just part of your core monolith which is built within it and in some bigger companies you know",
    "start": "325860",
    "end": "331620"
  },
  {
    "text": "you can have the graphql layer separate talking to the monolithic layer or it could be talking to your microservice",
    "start": "331620",
    "end": "337199"
  },
  {
    "text": "architecture we've also seen that graphql service can be a BFF back and for front-end owned by",
    "start": "337199",
    "end": "343620"
  },
  {
    "text": "the UI teams or it could be a backend service an aggregation service",
    "start": "343620",
    "end": "349080"
  },
  {
    "text": "but really it's always owned by an API or a graphql theme",
    "start": "349080",
    "end": "354560"
  },
  {
    "text": "and this is kind of how we started at Netflix too this is an oversimplified view of the Netflix architecture",
    "start": "354780",
    "end": "360600"
  },
  {
    "text": "after we adopted microservices to scale our teams we quickly discovered the need for an API layer to bring together and",
    "start": "360600",
    "end": "367620"
  },
  {
    "text": "orchestrate everything for the uis and we created this service called DNA API except",
    "start": "367620",
    "end": "373740"
  },
  {
    "text": "graphql was not invented yet Facebook was still working on it internally and it was not open source so we developed a",
    "start": "373740",
    "end": "381180"
  },
  {
    "text": "similar technology called Falcor which is actually open source and it just kind of works like graphql",
    "start": "381180",
    "end": "388020"
  },
  {
    "text": "but it just didn't take off like graphql did and both Falcon and graphql actually",
    "start": "388020",
    "end": "393660"
  },
  {
    "text": "came from the same problem space at Facebook it was the newsfeed team trying to orchestrate data from multiple",
    "start": "393660",
    "end": "400380"
  },
  {
    "text": "sources and Netflix it was the TV UI team trying to lay out the TV UI",
    "start": "400380",
    "end": "407060"
  },
  {
    "text": "and then over years this monolith started growing as we added more features and eventually",
    "start": "408180",
    "end": "414660"
  },
  {
    "text": "it became bigger and along the way we started seeing some problems first for every new feature we needed a",
    "start": "414660",
    "end": "421860"
  },
  {
    "text": "code change both in the service layer but also in the API layer and this was often done by different teams",
    "start": "421860",
    "end": "428460"
  },
  {
    "text": "and because of this the API team had to become experts in many domains",
    "start": "428460",
    "end": "433680"
  },
  {
    "text": "they were also the first line of support because it's a single runtime and handles all the requests",
    "start": "433680",
    "end": "438840"
  },
  {
    "text": "this frequent code changes and assists more back-end Services we need to connect to them so more dependencies",
    "start": "438840",
    "end": "445620"
  },
  {
    "text": "and this resulted in slow build times and oftentimes when you have a single",
    "start": "445620",
    "end": "451440"
  },
  {
    "text": "runtime a memory leak in one area could cause problems in the completely unrelated",
    "start": "451440",
    "end": "456960"
  },
  {
    "text": "areas and we saw this cascading failures so these are some common problems of a monolith architecture and this is what",
    "start": "456960",
    "end": "464340"
  },
  {
    "text": "we saw with the API layer so to fix this you can imagine",
    "start": "464340",
    "end": "470340"
  },
  {
    "text": "let's say we have this API right and it's owned by multiple teams",
    "start": "470340",
    "end": "475680"
  },
  {
    "text": "Aggregates across many domains but what if we could still have this one graph but then",
    "start": "475680",
    "end": "481979"
  },
  {
    "text": "split the implementation of this all of these subgraphs to different teams",
    "start": "481979",
    "end": "488220"
  },
  {
    "text": "this is where we entered Federated graphql so what's what's the simplest way to",
    "start": "488220",
    "end": "493740"
  },
  {
    "text": "explain this concept so we have this type movie in the monolithic graphql API it has three",
    "start": "493740",
    "end": "501000"
  },
  {
    "text": "different fields fulfilled by three different services so the monolith API team would go and",
    "start": "501000",
    "end": "506819"
  },
  {
    "text": "Implement resolvers to resolve these fields and aggregate data from multiple sources but what if you could break this type",
    "start": "506819",
    "end": "513959"
  },
  {
    "text": "apart and give the type extended across service boundaries so that each team can",
    "start": "513959",
    "end": "519899"
  },
  {
    "text": "Implement their own uh part of the API and that's exactly what federation is",
    "start": "519899",
    "end": "527399"
  },
  {
    "text": "using this idea we envision an architecture and there are three main components to this architecture",
    "start": "527399",
    "end": "533040"
  },
  {
    "text": "the first is a dgs or a domain graph service",
    "start": "533040",
    "end": "538080"
  },
  {
    "text": "and it just implements the subgraph that we saw and",
    "start": "538080",
    "end": "544200"
  },
  {
    "text": "the domain graph service can be a separate service that calls into the microservice or it could be the microservice itself",
    "start": "544200",
    "end": "552019"
  },
  {
    "text": "so all it does is just Implement a graphql API pertaining to that team subgraph",
    "start": "552180",
    "end": "557880"
  },
  {
    "text": "next we have the schema registry the schema register is responsible for validating that each of these individual",
    "start": "557880",
    "end": "564180"
  },
  {
    "text": "subgraphs are valid and then merging them and composing them into a super graph",
    "start": "564180",
    "end": "570060"
  },
  {
    "text": "which is then exposed but to the client by this highly available service the graphql Gateway",
    "start": "570060",
    "end": "577920"
  },
  {
    "text": "the clients write queries against the Gateway and the Gateway is responsible for breaking these queries apart into",
    "start": "577920",
    "end": "583680"
  },
  {
    "text": "sub queries that are sent to the domain graph services",
    "start": "583680",
    "end": "588139"
  },
  {
    "text": "so my co-worker Stephen and Jennifer gave an amazing talk at qcom plus about two years ago explaining Federation and",
    "start": "588899",
    "end": "595620"
  },
  {
    "text": "architecture in great detail you can learn about query planning and query execution so I definitely urge you to",
    "start": "595620",
    "end": "601440"
  },
  {
    "text": "check that talk out if you haven't already so where are we today graphql is used",
    "start": "601440",
    "end": "608040"
  },
  {
    "text": "widely across the company if you pull out your phones today and open the Netflix app it's powered by",
    "start": "608040",
    "end": "613140"
  },
  {
    "text": "graphql and it's using our member in the gaming graph on the production and the studio side we",
    "start": "613140",
    "end": "620279"
  },
  {
    "text": "have a lot of uh people working on uh different parts of the the production",
    "start": "620279",
    "end": "625860"
  },
  {
    "text": "process such as pre-production and post-production on this side and we built a lot of apps for them and these",
    "start": "625860",
    "end": "631440"
  },
  {
    "text": "apps are also powered by graphql it's powered by our studio graph and then most recently we have started also",
    "start": "631440",
    "end": "637680"
  },
  {
    "text": "building an internal tools graph which is for apps that are Workforce facing and we build them with graphql as well",
    "start": "637680",
    "end": "645720"
  },
  {
    "text": "so we're dealing with multiple dimensions of scale here over a billion requests per day tens of thousands of",
    "start": "645720",
    "end": "651300"
  },
  {
    "text": "types and Fields and 500 plus active Developers and it's been over two years since",
    "start": "651300",
    "end": "657959"
  },
  {
    "text": "Jennifer and Steven presented and we've been operating and scaling Federation",
    "start": "657959",
    "end": "664380"
  },
  {
    "text": "so did we solve all our problems not quite I think using Federation has just",
    "start": "664380",
    "end": "670140"
  },
  {
    "text": "introduced some new ones and what I've learned from this experience is software engineering is largely about",
    "start": "670140",
    "end": "675480"
  },
  {
    "text": "understanding the benefits and the trade-offs and then applying them to the situation at your company no technology is the Silver Bullet so",
    "start": "675480",
    "end": "682740"
  },
  {
    "text": "today I want to take quite some time to share with you what the challenges we are facing with",
    "start": "682740",
    "end": "688800"
  },
  {
    "text": "Federation",
    "start": "688800",
    "end": "691279"
  },
  {
    "text": "so in the monolithic graphql theme when you have this monolith API layer only the API team needs to be graphql experts",
    "start": "694079",
    "end": "702500"
  },
  {
    "text": "but in the Federated world even the domain teams also need to learn graphql",
    "start": "702839",
    "end": "708540"
  },
  {
    "text": "and the initial barrier to entry is just too high imagine one day going to your team's uh back-end teams they're",
    "start": "708540",
    "end": "715260"
  },
  {
    "text": "implementing their apis in rest or grpc and you tell them hey start implementing",
    "start": "715260",
    "end": "720360"
  },
  {
    "text": "your apis or graphql and make sure they also merge into this unified graph this is really hard so to address this",
    "start": "720360",
    "end": "727560"
  },
  {
    "text": "we leaned heavily into developer education we created boot camps example codes and lots of documentation",
    "start": "727560",
    "end": "735420"
  },
  {
    "text": "for people to get started and then we also provided first class slack support and weekly",
    "start": "735420",
    "end": "741240"
  },
  {
    "text": "office hours but I think what really helped with the initial battery to entry is we actually",
    "start": "741240",
    "end": "747240"
  },
  {
    "text": "embedded with the domain teams my team knew how to do graphql so we worked with the other teams to help them spin up the",
    "start": "747240",
    "end": "753839"
  },
  {
    "text": "services and then they became the champions of the architecture so Federation sounds cool you know you",
    "start": "753839",
    "end": "760380"
  },
  {
    "text": "can just decentralize ownership but actually driving adoption is pretty hard",
    "start": "760380",
    "end": "766680"
  },
  {
    "text": "but you know over time you overcome the developer education problems the developers get start to get a hang of it",
    "start": "766680",
    "end": "773100"
  },
  {
    "text": "and then you start getting graphs in your ecosystem subgraphs",
    "start": "773100",
    "end": "778040"
  },
  {
    "text": "and then you know more developers come to the party and in the studio ecosystem we have 159 sub graphs so that many",
    "start": "778139",
    "end": "787380"
  },
  {
    "text": "domain graph services in that ecosystem so you know we it feels like we're successful we",
    "start": "787380",
    "end": "793620"
  },
  {
    "text": "have this one graph but does it feel like one it just feels like a hodgepodge of",
    "start": "793620",
    "end": "799740"
  },
  {
    "text": "things stitched together instead of this highly leveraged one graph created by the monolithic team",
    "start": "799740",
    "end": "807540"
  },
  {
    "text": "it seems more curated cohesive High Leverage",
    "start": "807540",
    "end": "813019"
  },
  {
    "text": "so why why do we see that because in the monolithic world schema design is a single player game",
    "start": "813720",
    "end": "820920"
  },
  {
    "text": "we have one team understanding all the requirements product requirements and exposing a unified API for the clients",
    "start": "820920",
    "end": "828959"
  },
  {
    "text": "in studio however in in the Federated architecture however it's a multiplayer game",
    "start": "828959",
    "end": "834600"
  },
  {
    "text": "and in studio it's a massively multiplayer game with 159 teams building out the schema",
    "start": "834600",
    "end": "841380"
  },
  {
    "text": "and this can lead to some issues so in graphql there's no specific way to handle errors",
    "start": "841380",
    "end": "848160"
  },
  {
    "text": "spec doesn't say anything about that so you can do it in many myriads of ways",
    "start": "848160",
    "end": "853200"
  },
  {
    "text": "one way so let's say we have this simple user API and we want to return a user not found error",
    "start": "853200",
    "end": "859260"
  },
  {
    "text": "one way to do it is alongside your response object you can return an error subject saying hey user not found just",
    "start": "859260",
    "end": "867120"
  },
  {
    "text": "like this another way to do it is you can model",
    "start": "867120",
    "end": "872279"
  },
  {
    "text": "the user not found into your schema so the user query can either return a user object or use it not found object",
    "start": "872279",
    "end": "880560"
  },
  {
    "text": "and this pros and cons this approach but",
    "start": "880560",
    "end": "885720"
  },
  {
    "text": "I think when you have 159 teams working on the graph at the same time it's difficult to enforce one approach or the",
    "start": "885720",
    "end": "892380"
  },
  {
    "text": "other so teams kind of use different approaches and who is affected by this the clients",
    "start": "892380",
    "end": "898620"
  },
  {
    "text": "because they can't reuse their code for error handling across different features",
    "start": "898620",
    "end": "903720"
  },
  {
    "text": "and we see the same pattern across other API design things like pagination",
    "start": "903720",
    "end": "909740"
  },
  {
    "text": "another big thing is our graph has become too big to collaborate",
    "start": "909839",
    "end": "915180"
  },
  {
    "text": "it has so many types queries and mutations and so many teams building it",
    "start": "915180",
    "end": "921779"
  },
  {
    "text": "so to address you know the first thing that happened when you have such a big graph with a global namespace is you",
    "start": "921779",
    "end": "927120"
  },
  {
    "text": "have naming conflicts so we decided okay build namespace our types and Fields",
    "start": "927120",
    "end": "933360"
  },
  {
    "text": "to avoid the naming conflicts but then I think we just dug ourselves into a hole",
    "start": "933360",
    "end": "938459"
  },
  {
    "text": "because now the namespace hides the what's been implemented",
    "start": "938459",
    "end": "944220"
  },
  {
    "text": "so we tend to repeat the same features sometimes and because we have the namespace create these informational",
    "start": "944220",
    "end": "949680"
  },
  {
    "text": "silos how do even new developers get on board",
    "start": "949680",
    "end": "955740"
  },
  {
    "text": "they get overwhelmed by the size of the graph and start collaborating in here and we start to ask ourselves if the",
    "start": "955740",
    "end": "962339"
  },
  {
    "text": "Leverage is still there so Federated graphql gives us the",
    "start": "962339",
    "end": "969420"
  },
  {
    "text": "freedom to move fast but I think in return we are trading off a well curated API",
    "start": "969420",
    "end": "974760"
  },
  {
    "text": "are we still the responsible stewards of the API I think API inconsistency and",
    "start": "974760",
    "end": "980160"
  },
  {
    "text": "collaboration issues is a big price to pay how can we achieve cohesion in the",
    "start": "980160",
    "end": "985500"
  },
  {
    "text": "Federated world I think solving this has been the core focus of my team for the last two years",
    "start": "985500",
    "end": "990959"
  },
  {
    "text": "and I'd like to share some ideas with you today",
    "start": "990959",
    "end": "995360"
  },
  {
    "text": "so first we came up with this workflow this workflow is what we called",
    "start": "996540",
    "end": "1001880"
  },
  {
    "text": "collaborative schema design but people don't just follow a workflow",
    "start": "1001880",
    "end": "1007040"
  },
  {
    "text": "we have to create mechanisms and tools to make it happen so before graphql we use memos for",
    "start": "1007040",
    "end": "1015139"
  },
  {
    "text": "defining product specs and requirements collaborating with product managers and that still worked great so we kept it",
    "start": "1015139",
    "end": "1023259"
  },
  {
    "text": "to address collaboration challenges between the client and the server teams we created grapha",
    "start": "1023540",
    "end": "1029480"
  },
  {
    "text": "a schema collaboration tool the goal of graph Hub is to escape from the shackles of the implementation",
    "start": "1029480",
    "end": "1035660"
  },
  {
    "text": "details and focus on the API and design a schema collaboratively with your UI partners",
    "start": "1035660",
    "end": "1044079"
  },
  {
    "text": "what is graphup graphup is just a mono repo it's just a git repo that has all",
    "start": "1044360",
    "end": "1049700"
  },
  {
    "text": "the schemas and it syncs with the schema registry the schema registry is dynamic and",
    "start": "1049700",
    "end": "1054799"
  },
  {
    "text": "always has the latest schema from prod and in this git repo any developer can file a pull request or",
    "start": "1054799",
    "end": "1062600"
  },
  {
    "text": "what we call the schema update proposal pull requests are a great form of collaboration",
    "start": "1062600",
    "end": "1068179"
  },
  {
    "text": "they communicate clearly and crisply the intentions and remove the hand waviness from",
    "start": "1068179",
    "end": "1073760"
  },
  {
    "text": "collaboration in this PR I added a new query for qcon demo",
    "start": "1073760",
    "end": "1079700"
  },
  {
    "text": "now I can just grab the branch name and access the live mocked API for the schema changes",
    "start": "1079700",
    "end": "1086500"
  },
  {
    "text": "and I can share this with my UI Partners or whoever else and they can run queries and get back",
    "start": "1087020",
    "end": "1094220"
  },
  {
    "text": "random data and this is all done just with schema changes no code was written no",
    "start": "1094220",
    "end": "1100280"
  },
  {
    "text": "implementation details were discussed and graph Hub is a runaway success",
    "start": "1100280",
    "end": "1106039"
  },
  {
    "text": "so many teams are using to collaborate with their schemas so that's graph hub",
    "start": "1106039",
    "end": "1113980"
  },
  {
    "text": "and to supplement graph Hub and improve collaboration even further we created this schema working group with",
    "start": "1117320",
    "end": "1122960"
  },
  {
    "text": "individuals who are super passionate about graphql with Federated graphql everybody has to",
    "start": "1122960",
    "end": "1129620"
  },
  {
    "text": "learn graphql but not everybody needs to be passionate about it this group gave us some of the benefits",
    "start": "1129620",
    "end": "1135260"
  },
  {
    "text": "of some the monolithic graphql theme and this group is open for anyone to join and they review schema changes",
    "start": "1135260",
    "end": "1141620"
  },
  {
    "text": "document best practices for pagination and error handling we highly recommend this",
    "start": "1141620",
    "end": "1148600"
  },
  {
    "text": "and to solve for schema and consistency we created a tool called graph doctor",
    "start": "1150080",
    "end": "1155120"
  },
  {
    "text": "which is a schema lender the goal of graph doctor is to help create a consistent API in the world of",
    "start": "1155120",
    "end": "1161660"
  },
  {
    "text": "massively multiplayer schema development graph doctor listens to every PR with",
    "start": "1161660",
    "end": "1167780"
  },
  {
    "text": "the schema change and it will run consistency checks and make recommendations directly in the pr",
    "start": "1167780",
    "end": "1175280"
  },
  {
    "text": "grav doctor is powered by schema guideline proposals and schema guideline proposals can be",
    "start": "1175280",
    "end": "1180679"
  },
  {
    "text": "created by anyone they have a unique identifier and can be accessed on our dock side",
    "start": "1180679",
    "end": "1187160"
  },
  {
    "text": "we can codify this schema or guideline proposals into linter rules and then",
    "start": "1187160",
    "end": "1192200"
  },
  {
    "text": "graph doctor can use these rules and vet PRS with wet pull requests with them",
    "start": "1192200",
    "end": "1198200"
  },
  {
    "text": "now that the schema is designed we go into the implementation phase",
    "start": "1198200",
    "end": "1203840"
  },
  {
    "text": "but then we might discover blockers and change our plans to help with that we created a tool",
    "start": "1203840",
    "end": "1209660"
  },
  {
    "text": "called graph labs to facilitate rapid prototyping and feedback loop between the client and the",
    "start": "1209660",
    "end": "1216020"
  },
  {
    "text": "server let's take a look at example here so let's say I want to add some changes",
    "start": "1216020",
    "end": "1223100"
  },
  {
    "text": "to the movie dgs so I made the schema changes I implemented the code to handle those changes and I file a blue pull",
    "start": "1223100",
    "end": "1229940"
  },
  {
    "text": "request now what graph Labs does is it creates a local sandbox environment",
    "start": "1229940",
    "end": "1236419"
  },
  {
    "text": "that is created and destroyed automatically for that particular pull request",
    "start": "1236419",
    "end": "1241940"
  },
  {
    "text": "and this environment is blended with the rest of the components",
    "start": "1241940",
    "end": "1247760"
  },
  {
    "text": "of the architecture in test and it's isolated and then we can share",
    "start": "1247760",
    "end": "1252980"
  },
  {
    "text": "this environment with client teams UI the client teams can then integrate",
    "start": "1252980",
    "end": "1258020"
  },
  {
    "text": "with this environment directly from the UI and test everything end to end",
    "start": "1258020",
    "end": "1263360"
  },
  {
    "text": "while the backing code is still in pull request this enables extremely rapid prototyping",
    "start": "1263360",
    "end": "1270860"
  },
  {
    "text": "and lastly API design is not a perfect process we'll make mistakes requirements evolve and to power the deprecation",
    "start": "1270860",
    "end": "1277580"
  },
  {
    "text": "workflow we created graph stats and notifications we count how many times deprecated",
    "start": "1277580",
    "end": "1284660"
  },
  {
    "text": "fields are used and send an email notification to the client teams who are using deprecated fields",
    "start": "1284660",
    "end": "1290840"
  },
  {
    "text": "the stats can be leveraged by many tools also for example grav doctor uses these",
    "start": "1290840",
    "end": "1296299"
  },
  {
    "text": "stats to make sure that people are not making breaking changes",
    "start": "1296299",
    "end": "1301480"
  },
  {
    "text": "so as you can see all of this tools revolve around schema collaboration and making the schema better because schema",
    "start": "1302539",
    "end": "1310100"
  },
  {
    "text": "is your API and we don't want to have the",
    "start": "1310100",
    "end": "1315140"
  },
  {
    "text": "information silos in our schema and fall breaks to conveys law we want a schema to feel more like this",
    "start": "1315140",
    "end": "1321919"
  },
  {
    "text": "from a cohesive unit I don't think we are there yet but the hope is that with the tools we've",
    "start": "1321919",
    "end": "1327620"
  },
  {
    "text": "created we can get there one day another big challenge with our graph is",
    "start": "1327620",
    "end": "1334039"
  },
  {
    "text": "it's growing too quickly it's hard to discover when you have a client team come in and",
    "start": "1334039",
    "end": "1340039"
  },
  {
    "text": "the clients of the API are trying to see what's available there's just too many things let me show you what I mean",
    "start": "1340039",
    "end": "1347659"
  },
  {
    "text": "so this is our UI for you know testing out an API and maybe you're familiar with swagger",
    "start": "1347659",
    "end": "1353360"
  },
  {
    "text": "and on the left hand side you can see all the different apis that you have",
    "start": "1353360",
    "end": "1359419"
  },
  {
    "text": "available there's a lot of them",
    "start": "1359419",
    "end": "1363100"
  },
  {
    "text": "but we created this thing called lenses which is a magnified View and it gives you a much more manageable",
    "start": "1365539",
    "end": "1372740"
  },
  {
    "text": "set and then you can select which API one you want to use",
    "start": "1372740",
    "end": "1377780"
  },
  {
    "text": "so what are lenses it's like remember these",
    "start": "1377780",
    "end": "1383480"
  },
  {
    "text": "sub graphs and the domains that we have it allows you to magnify into a domain and then but then it doesn't mean that",
    "start": "1383480",
    "end": "1390200"
  },
  {
    "text": "you don't have access to the rest of the graph you still do but it allows you to start small look at a smaller View and",
    "start": "1390200",
    "end": "1396559"
  },
  {
    "text": "then start building calling your uh building your queries from there this is just one way we're trying to solve the",
    "start": "1396559",
    "end": "1403400"
  },
  {
    "text": "big uh graph problem if you have other ideas we would love to know what they are because this is one",
    "start": "1403400",
    "end": "1410000"
  },
  {
    "text": "of the biggest problems of having a big graph even though the leverage creates",
    "start": "1410000",
    "end": "1415220"
  },
  {
    "text": "and I tried to highlight some of the core challenges with Federation but there are a lot more",
    "start": "1415220",
    "end": "1420620"
  },
  {
    "text": "it's for example it's much easier to share types between subgraphs in the",
    "start": "1420620",
    "end": "1426080"
  },
  {
    "text": "monolith than it is in the Federated architecture and Federation also has a lot of",
    "start": "1426080",
    "end": "1431539"
  },
  {
    "text": "limitations and I can talk about these all day but if you are implementing Federated",
    "start": "1431539",
    "end": "1437840"
  },
  {
    "text": "graphql in your company and you want to go deep dive into some of these problems reach out to me on Twitter or we can",
    "start": "1437840",
    "end": "1444020"
  },
  {
    "text": "meet up in a hallway track but the main takeaway is Federation is not free and it's not going to solve all",
    "start": "1444020",
    "end": "1450080"
  },
  {
    "text": "your problems magically we had to build a lot of additional tooling documentation and developer",
    "start": "1450080",
    "end": "1455659"
  },
  {
    "text": "education to make it work and what's the still trying to make it work",
    "start": "1455659",
    "end": "1461380"
  },
  {
    "text": "so now that we've looked at some of the problems with Federation it's important to reflect back on having a monolithic",
    "start": "1462559",
    "end": "1468380"
  },
  {
    "text": "API layer this is the slide from earlier where we talked about the problems with the monolith",
    "start": "1468380",
    "end": "1473960"
  },
  {
    "text": "we don't have to solve all the problems with the new architecture for example instead of the API team",
    "start": "1473960",
    "end": "1481220"
  },
  {
    "text": "becoming experts in many domains we can have a contribution model",
    "start": "1481220",
    "end": "1487000"
  },
  {
    "text": "and domain teams can contribute to it instead of having a centralized support",
    "start": "1488360",
    "end": "1494659"
  },
  {
    "text": "we can create decentralized support so that teams can for example even if it's the",
    "start": "1494659",
    "end": "1500960"
  },
  {
    "text": "same runtime we can create different metrics and Page different teams based on those metrics",
    "start": "1500960",
    "end": "1506539"
  },
  {
    "text": "we can also improve our developers tools for slow build times and lastly we can build",
    "start": "1506539",
    "end": "1513020"
  },
  {
    "text": "more resilient systems for example at Netflix we actually Shard",
    "start": "1513020",
    "end": "1519080"
  },
  {
    "text": "our monolithic API layer by device type so that one device one area doesn't",
    "start": "1519080",
    "end": "1525320"
  },
  {
    "text": "Cascade failures don't Cascade to another area we've done a lot of these improvements",
    "start": "1525320",
    "end": "1530600"
  },
  {
    "text": "and More in our API layer so what I the takeaway is Federation is",
    "start": "1530600",
    "end": "1538279"
  },
  {
    "text": "not the you don't need a new architecture to solve all your problems you can improve incrementally",
    "start": "1538279",
    "end": "1544520"
  },
  {
    "text": "but I still think it's a great fit for us because it goes in hand in hand with the microservice architecture",
    "start": "1544520",
    "end": "1551120"
  },
  {
    "text": "and Netflix is a decade of experience building microservices we've invested so much in improving",
    "start": "1551120",
    "end": "1556220"
  },
  {
    "text": "operability obserability and resiliency of a microservice architect and while Federation gives us the loose",
    "start": "1556220",
    "end": "1563059"
  },
  {
    "text": "coupling we did have to ensure a high level of alignment with workflow and developer tools and the schema working",
    "start": "1563059",
    "end": "1569480"
  },
  {
    "text": "group but is Federation the right choice for you",
    "start": "1569480",
    "end": "1574520"
  },
  {
    "text": "that's only up to you to decide but wait we're not done yet",
    "start": "1574520",
    "end": "1580340"
  },
  {
    "text": "remember this DNA API which implemented file core we still need to move to graphql",
    "start": "1580340",
    "end": "1587659"
  },
  {
    "text": "and as you all know migrations are non-trivial whether you're moving to monolith or Federated moving from rest",
    "start": "1587659",
    "end": "1594559"
  },
  {
    "text": "apis to graphql in our case it was the falcore API we've all been parts of",
    "start": "1594559",
    "end": "1599720"
  },
  {
    "text": "migration during our software career and it looks something like this",
    "start": "1599720",
    "end": "1604760"
  },
  {
    "text": "the plane is flying mid-air and you're changing out all its parts and it can't go down",
    "start": "1604760",
    "end": "1612220"
  },
  {
    "text": "on the left hand side is the very familiar Netflix Discovery UI that everybody loves this is what we decided",
    "start": "1614059",
    "end": "1620360"
  },
  {
    "text": "to migrate first onto graphql but the first Big Challenge was conflicting priorities",
    "start": "1620360",
    "end": "1626000"
  },
  {
    "text": "do Netflix developers work on a new product feature or do they work on a tech migration",
    "start": "1626000",
    "end": "1631580"
  },
  {
    "text": "thankfully the iOS and the Android teams were pretty excited about graphql so we managed to get them on board to",
    "start": "1631580",
    "end": "1637460"
  },
  {
    "text": "move things along then we have dimensions of scale over 200 million members use this canvas to",
    "start": "1637460",
    "end": "1645200"
  },
  {
    "text": "discover what to watch so you can only imagine how much traffic the screen receives",
    "start": "1645200",
    "end": "1650299"
  },
  {
    "text": "and where to absolutely maintain engagement metrics and feature parity",
    "start": "1650299",
    "end": "1655778"
  },
  {
    "text": "migration can take months sometimes years any new feature we add during the",
    "start": "1656059",
    "end": "1661520"
  },
  {
    "text": "migration needs to be exposed via both graphql and file core and while Roman writing is a fun",
    "start": "1661520",
    "end": "1668059"
  },
  {
    "text": "spectator sport I don't think developers are super excited about maintaining their features",
    "start": "1668059",
    "end": "1673520"
  },
  {
    "text": "into discrete systems but this is the price we have to pay",
    "start": "1673520",
    "end": "1678980"
  },
  {
    "text": "so we decided we needed to understand all the requirements and build a solid plan going into the migration",
    "start": "1678980",
    "end": "1686620"
  },
  {
    "text": "we had two sets of migrations going on we first were moving from the file core API to the graphql API and we're also",
    "start": "1687200",
    "end": "1693679"
  },
  {
    "text": "moving from the monolithic API layer to a Federated one we decided to focus on the first one",
    "start": "1693679",
    "end": "1699260"
  },
  {
    "text": "because it was involve both UI and back-end teams and here is the plan we came up with",
    "start": "1699260",
    "end": "1705020"
  },
  {
    "text": "so remember the DNA API from the bottom so that's that's the service that serves",
    "start": "1705020",
    "end": "1710720"
  },
  {
    "text": "the devices directly today but first to move to graphql we have to",
    "start": "1710720",
    "end": "1715880"
  },
  {
    "text": "make sure that the devices knew how to talk to graph knew how to talk graphql and this is actually a non-trivial task",
    "start": "1715880",
    "end": "1722240"
  },
  {
    "text": "it involves prototyping your client Library different client libraries figuring out client-side caching and",
    "start": "1722240",
    "end": "1727760"
  },
  {
    "text": "normalization and making sure that the client performance is acceptable",
    "start": "1727760",
    "end": "1733039"
  },
  {
    "text": "next we have to build a transformation dgs domain graph service that translated",
    "start": "1733039",
    "end": "1738260"
  },
  {
    "text": "Falcor from uh from file core to graphql so it",
    "start": "1738260",
    "end": "1744140"
  },
  {
    "text": "was another layer that we needed to add in there and then we needed to break the monolithic API apart and move the logic",
    "start": "1744140",
    "end": "1752120"
  },
  {
    "text": "into domain craft services",
    "start": "1752120",
    "end": "1755620"
  },
  {
    "text": "to further complicate matters the devices don't talk to the monolith directly",
    "start": "1757340",
    "end": "1762980"
  },
  {
    "text": "they actually have talked to the monolith through the BFF layer which is owned by a device theme",
    "start": "1762980",
    "end": "1770299"
  },
  {
    "text": "for graphql however we wanted to have a single flexible API just to be",
    "start": "1770299",
    "end": "1777380"
  },
  {
    "text": "clear a BFF is a backend for front-end so we wanted a single API for the for",
    "start": "1777380",
    "end": "1783080"
  },
  {
    "text": "the graphql but we you know each query can be have their own different query per",
    "start": "1783080",
    "end": "1789020"
  },
  {
    "text": "device but this added further complexity to our modeling now the API needed to be more flexible",
    "start": "1789020",
    "end": "1797539"
  },
  {
    "text": "and the BFF don't just go away the logic either moves into the client or it moves into the server",
    "start": "1797539",
    "end": "1804440"
  },
  {
    "text": "but this bet has paid off for us because our architecture is a lot simpler now",
    "start": "1804440",
    "end": "1810460"
  },
  {
    "text": "next we also had to make sure the migration was safe and since there's so many moving parts",
    "start": "1810740",
    "end": "1815960"
  },
  {
    "text": "we are adding new new way to call the server using a graphql client",
    "start": "1815960",
    "end": "1821179"
  },
  {
    "text": "we have this new extra layer server service that might add latency to our calls",
    "start": "1821179",
    "end": "1827659"
  },
  {
    "text": "and these views are also highly contextual so a lot of things were changing and",
    "start": "1827659",
    "end": "1834320"
  },
  {
    "text": "it's hard to test and make sure that every single thing works so we decided why don't we use a b testing and this",
    "start": "1834320",
    "end": "1841700"
  },
  {
    "text": "detect changes in our core metrics this was an excellent idea because it allowed us to make a decision quicker",
    "start": "1841700",
    "end": "1848240"
  },
  {
    "text": "instead of ironing out every single issue before launch this doesn't mean we didn't test we",
    "start": "1848240",
    "end": "1855020"
  },
  {
    "text": "still test we skipped writing we didn't skip writing our tests and we did end-to-end testing",
    "start": "1855020",
    "end": "1860779"
  },
  {
    "text": "and we also use this another technique called Shadow traffic testing specifically from moving from the",
    "start": "1860779",
    "end": "1866000"
  },
  {
    "text": "monolithic refrigerator graphql since the API in the query is exactly the same but the underlying implementation is",
    "start": "1866000",
    "end": "1872059"
  },
  {
    "text": "different we can we can use this technique we have this tool called mantis",
    "start": "1872059",
    "end": "1878179"
  },
  {
    "text": "with which we can sample random traffic events and it and with this we can build a",
    "start": "1878179",
    "end": "1883760"
  },
  {
    "text": "simple event processor that sniffs this random traffic event and send a request",
    "start": "1883760",
    "end": "1889880"
  },
  {
    "text": "the same request to both the monolithic and Federated pretending to be an actual user",
    "start": "1889880",
    "end": "1896299"
  },
  {
    "text": "and then we mash the response and if it matches great if it doesn't",
    "start": "1896299",
    "end": "1901340"
  },
  {
    "text": "then we investigate further but this allowed us to iron out a lot of functional correctness issues like",
    "start": "1901340",
    "end": "1907399"
  },
  {
    "text": "localization for instance and gave us a high confidence before launch",
    "start": "1907399",
    "end": "1913299"
  },
  {
    "text": "so there's nothing to sugarcoat here you need to figure out the list of steps and execute on them iteratively it's a long",
    "start": "1913399",
    "end": "1920480"
  },
  {
    "text": "process it took us almost a year but we're close to the finish line now",
    "start": "1920480",
    "end": "1925700"
  },
  {
    "text": "but what I've observed is there are two core things that complicate migrations first",
    "start": "1925700",
    "end": "1931220"
  },
  {
    "text": "is the baggage of your legacy architecture the more complex it is",
    "start": "1931220",
    "end": "1936919"
  },
  {
    "text": "the the more complex the migration is going to be and second is the dimensions of scale",
    "start": "1936919",
    "end": "1943159"
  },
  {
    "text": "the more Dimensions you have the more safety mechanisms you need and that said not all our graphql",
    "start": "1943159",
    "end": "1949340"
  },
  {
    "text": "migrations were this complicated especially on the studio and the",
    "start": "1949340",
    "end": "1954679"
  },
  {
    "text": "internal tools they just didn't have this much baggage all the dimensions of scale so as you're thinking about graphql",
    "start": "1954679",
    "end": "1961159"
  },
  {
    "text": "adoption in your company you don't want to underestimate but really have a solid plan going into the migration",
    "start": "1961159",
    "end": "1968000"
  },
  {
    "text": "and if the migrations are too hairy moving to the moving to graphql may not be a good choice for you at the moment",
    "start": "1968000",
    "end": "1975519"
  },
  {
    "text": "and though the migration was painful the Silver Lining is new product development was relatively smooth sailing for",
    "start": "1976100",
    "end": "1982340"
  },
  {
    "text": "example the Netflix games platform is built entirely with graphql and Federation",
    "start": "1982340",
    "end": "1989500"
  },
  {
    "text": "so now we've covered a lot of ground we've covered multiple architecture patterns their trade-offs migration",
    "start": "1995659",
    "end": "2001600"
  },
  {
    "text": "panes let's talk about graphical adoption in Europe and this next set of slides are just",
    "start": "2001600",
    "end": "2008799"
  },
  {
    "text": "recommendation based on my experience working with Raphael just some high ideas and not a hard set of guidelines",
    "start": "2008799",
    "end": "2016600"
  },
  {
    "text": "so whether you're at an early stage seed startup or a large company with deep microservices",
    "start": "2016600",
    "end": "2022240"
  },
  {
    "text": "you really want to start with a monolithic graphql API one graph",
    "start": "2022240",
    "end": "2028240"
  },
  {
    "text": "and this gives you the Good Foundations to build a unified API",
    "start": "2028240",
    "end": "2033898"
  },
  {
    "text": "and you want to Resource this effort into a single team to plant the seeds",
    "start": "2034480",
    "end": "2039760"
  },
  {
    "text": "and grow in 10 to the graphql API ideally this theme is a mix of backend and UI Engineers because you you",
    "start": "2039760",
    "end": "2047380"
  },
  {
    "text": "want both a scalable service but then also a great API for client and server for the client Developers",
    "start": "2047380",
    "end": "2053618"
  },
  {
    "text": "I think this is the most successful strategy for having a unified graphql API and then as your graph grows you can",
    "start": "2053619",
    "end": "2060460"
  },
  {
    "text": "think about Federation and if it makes sense in your organization it is also important to plan a",
    "start": "2060460",
    "end": "2067179"
  },
  {
    "text": "coordinated graphql effort in your organization what I've seen to be very common",
    "start": "2067179",
    "end": "2073358"
  },
  {
    "text": "is many teams will start building graphql for their own domains",
    "start": "2073359",
    "end": "2078580"
  },
  {
    "text": "and you often end up with many different graphql apis within the same company",
    "start": "2078580",
    "end": "2083638"
  },
  {
    "text": "if you have n different teams building their own graphql apis you're not going to unlock its Leverage",
    "start": "2083859",
    "end": "2089080"
  },
  {
    "text": "and we saw this in at Netflix too especially in our studio domain when you have so many different teams and you",
    "start": "2089080",
    "end": "2095560"
  },
  {
    "text": "have new technologies people are going to start building graphql in their silos and with that",
    "start": "2095560",
    "end": "2102339"
  },
  {
    "text": "you're not going to be able to do this where you can query across domain boundaries with a single",
    "start": "2102339",
    "end": "2107920"
  },
  {
    "text": "query so if you see this happening in your company or your organization organization",
    "start": "2107920",
    "end": "2113320"
  },
  {
    "text": "you need to get into the room and start collaborating trying to merge your multiple graphs",
    "start": "2113320",
    "end": "2118900"
  },
  {
    "text": "into a single graph it's possible it's not always possible because even at",
    "start": "2118900",
    "end": "2124000"
  },
  {
    "text": "Netflix we have three different big graphs in Netflix and one of the efforts on my team is to",
    "start": "2124000",
    "end": "2131380"
  },
  {
    "text": "merge the studio graph and the Enterprise graph into single graph to unlock even more leverage because",
    "start": "2131380",
    "end": "2136960"
  },
  {
    "text": "there's points of connection there and then as you've seen throughout my",
    "start": "2136960",
    "end": "2143560"
  },
  {
    "text": "talk I've focused a lot our team has focused a lot in schema design because it's your API it's absolutely table",
    "start": "2143560",
    "end": "2149140"
  },
  {
    "text": "Stakes the amount of effort you invest in schema design will directly affect the success of graphql in your company",
    "start": "2149140",
    "end": "2156640"
  },
  {
    "text": "we've discovered a few best practices that might be valuable",
    "start": "2156640",
    "end": "2161400"
  },
  {
    "text": "so first try to adopt a schema first approach sometimes you might feel the urge to",
    "start": "2161920",
    "end": "2167740"
  },
  {
    "text": "generate the graphql apis you're move adopting it to generate it from an existing API you have or a backend model",
    "start": "2167740",
    "end": "2174700"
  },
  {
    "text": "objects or you know even database objects database schema I think it's important to resist that urge even",
    "start": "2174700",
    "end": "2181300"
  },
  {
    "text": "though it might save you time in the short term it makes your API very tightly coupled with the server implementation",
    "start": "2181300",
    "end": "2187180"
  },
  {
    "text": "and then it can't evolve independently so graphql comes with an excellent schema definition language start",
    "start": "2187180",
    "end": "2193900"
  },
  {
    "text": "designing your schema there and keep it loose and flexible from the server",
    "start": "2193900",
    "end": "2199380"
  },
  {
    "text": "in graphql you can add fields and deprecate old ones",
    "start": "2199599",
    "end": "2205060"
  },
  {
    "text": "this is this allows the UI teams and the client teams to move to the new field over time and stop",
    "start": "2205060",
    "end": "2212380"
  },
  {
    "text": "using the deprecated field and once the deprecated field is gone we can simply remove it",
    "start": "2212380",
    "end": "2218440"
  },
  {
    "text": "from the schema this is what we call the deprecation workflow and I showed some tools earlier like how it counts stats",
    "start": "2218440",
    "end": "2225040"
  },
  {
    "text": "on deprecated fields and it's just to make it easier so we typically don't tend to version",
    "start": "2225040",
    "end": "2230619"
  },
  {
    "text": "our graphql apis like we do in rest but instead we try to follow the deprecation workflow",
    "start": "2230619",
    "end": "2237240"
  },
  {
    "text": "next it's important to think about the product when designing a graphql API",
    "start": "2237280",
    "end": "2242440"
  },
  {
    "text": "whether it's looking at product specs requirements and not just thinking about what your",
    "start": "2242440",
    "end": "2249220"
  },
  {
    "text": "backend provides go a step further collaborate with your UI engineers",
    "start": "2249220",
    "end": "2256920"
  },
  {
    "text": "and lastly graphql can be used for Server do server apis microservice messaging",
    "start": "2257800",
    "end": "2263500"
  },
  {
    "text": "but it's not meant for that it truly shines when we use it for consumer apis or device facing apis",
    "start": "2263500",
    "end": "2270700"
  },
  {
    "text": "if you do decide to use graphql for server to server apis make sure you keep a clear separation of concerns between",
    "start": "2270700",
    "end": "2276280"
  },
  {
    "text": "your back in dpi's your product API so we've covered a lot of ground today",
    "start": "2276280",
    "end": "2282880"
  },
  {
    "text": "and I hope you take some into got some interesting insights and takeaways let's do a quick recap",
    "start": "2282880",
    "end": "2289119"
  },
  {
    "text": "setting graphql is great for device or server apis and it really shines when one graph is",
    "start": "2289119",
    "end": "2295660"
  },
  {
    "text": "part of your strategy we also got the opportunity to catalog two of the most popular ways to",
    "start": "2295660",
    "end": "2301960"
  },
  {
    "text": "implement graphql monolithic and Federated and we Dove really deep into the Federation problems because that was",
    "start": "2301960",
    "end": "2307540"
  },
  {
    "text": "that's what we've been doing at Netflix and I shared some tools to make Federation easier but they're mainly",
    "start": "2307540",
    "end": "2314619"
  },
  {
    "text": "about managing your schema better and lastly migration is not free",
    "start": "2314619",
    "end": "2320260"
  },
  {
    "text": "migration complexity is deeply tied to the architecture at your company",
    "start": "2320260",
    "end": "2325440"
  },
  {
    "text": "and I didn't want this talk to be Netflix users Federated graphql or graphql so everyone should use it",
    "start": "2325720",
    "end": "2332140"
  },
  {
    "text": "it may not even be the right decision for you for your organization my goal today was to share our journey and put a",
    "start": "2332140",
    "end": "2338619"
  },
  {
    "text": "heavy focus on the challenges I hope you're able to take these ideas back to your organization and do what's",
    "start": "2338619",
    "end": "2344320"
  },
  {
    "text": "right for you thank you",
    "start": "2344320",
    "end": "2349440"
  },
  {
    "text": "so this is a very active chat I appreciate you taking the time to respond to almost every question that",
    "start": "2352300",
    "end": "2358660"
  },
  {
    "text": "came in um I was trying to keep track so if we missed your question um we're gonna try and copy the whole",
    "start": "2358660",
    "end": "2363700"
  },
  {
    "text": "transcript and put it into slack so we'll be sure to follow up to those later we've got about I think eight to",
    "start": "2363700",
    "end": "2369339"
  },
  {
    "text": "ten minutes to to answer some questions live um so I'm gonna go through the ones that I don't think we got to yet and I saw",
    "start": "2369339",
    "end": "2375940"
  },
  {
    "text": "one just pop up now um with implementing sub graph sub graph",
    "start": "2375940",
    "end": "2380980"
  },
  {
    "text": "providers from a traditional rest API if you tried tools that take open API and Swagger specs and auto generate a",
    "start": "2380980",
    "end": "2387820"
  },
  {
    "text": "graphql schema based on those yeah this is a great question and uh and",
    "start": "2387820",
    "end": "2394660"
  },
  {
    "text": "it's it's a it's a very common thing to do at the beginning because it's it uh",
    "start": "2394660",
    "end": "2401020"
  },
  {
    "text": "it's kind of an easy way to get started with graphql uh and I think it's totally",
    "start": "2401020",
    "end": "2406540"
  },
  {
    "text": "fine there's actually tools out there that you can use to generate uh both from rest and grpc uh to graphql I",
    "start": "2406540",
    "end": "2412780"
  },
  {
    "text": "forget the names of the back of my my my head but uh but the main thing you want",
    "start": "2412780",
    "end": "2418119"
  },
  {
    "text": "to watch out for is and I mentioned this in the best practice it guys you don't want to always generate the the API uh",
    "start": "2418119",
    "end": "2425619"
  },
  {
    "text": "the graphql API you can generate it once the first time and and then you want to",
    "start": "2425619",
    "end": "2431140"
  },
  {
    "text": "you want to be able to modify it independently because if you always keep generating the API from from the the",
    "start": "2431140",
    "end": "2437740"
  },
  {
    "text": "rest API or the grpc uh API the graphql API is going to be",
    "start": "2437740",
    "end": "2443200"
  },
  {
    "text": "tightly coupled with that so you want to be able to you can use these tools to generate it but you still want to independently",
    "start": "2443200",
    "end": "2449440"
  },
  {
    "text": "evolve and uh build your graphql API separately so so that's kind of what we",
    "start": "2449440",
    "end": "2454480"
  },
  {
    "text": "try to follow but you know uh sometimes it's easy to generate and you use the mapping code",
    "start": "2454480",
    "end": "2460500"
  },
  {
    "text": "easily so uh there's another trick you can do actually so once you generate it you can still return the model objects",
    "start": "2460500",
    "end": "2467560"
  },
  {
    "text": "from your rest API or grpc API to the graphql data fetcher and then let's say",
    "start": "2467560",
    "end": "2473320"
  },
  {
    "text": "if there is fields that match exactly then the graphql data Factor would be smart enough to use those fields from",
    "start": "2473320",
    "end": "2479859"
  },
  {
    "text": "the model object and I think this is supported in most languages so that's a neat trick to use so you don't have to",
    "start": "2479859",
    "end": "2485380"
  },
  {
    "text": "reconstruct and redo the model objects and transform between uh but then every new field you add you",
    "start": "2485380",
    "end": "2491920"
  },
  {
    "text": "would have to either add a data fetcher for it or or uh yeah so sorry for the long-winded answer but this is a very",
    "start": "2491920",
    "end": "2498820"
  },
  {
    "text": "common thing that everyone wants to do yeah it sounds like one of those things that makes it easy to get started but",
    "start": "2498820",
    "end": "2504099"
  },
  {
    "text": "once you get especially the scale that Netflix is at those those getting started tools",
    "start": "2504099",
    "end": "2509380"
  },
  {
    "text": "aren't as applicable for for your scenario especially exactly yeah um do you look this is a good follow-up",
    "start": "2509380",
    "end": "2515920"
  },
  {
    "text": "do you have any graphql schema standards the team should follow when they provide a subgraph",
    "start": "2515920",
    "end": "2521140"
  },
  {
    "text": "yeah absolutely I mean uh at Netflix we try to do uh freedom and responsibility",
    "start": "2521140",
    "end": "2527680"
  },
  {
    "text": "is one of our uh kind of big values so yeah we do have standards we do",
    "start": "2527680",
    "end": "2533079"
  },
  {
    "text": "communicate them we actually build linters so graph doctor is the tool that makes sure that some of the standards",
    "start": "2533079",
    "end": "2538540"
  },
  {
    "text": "are enforced that I that I covered in the talk but ultimately you can still bypass you know unless it's like a",
    "start": "2538540",
    "end": "2544060"
  },
  {
    "text": "breaking change or anything you can still do whatever you want but we have the working group we have uh the linter",
    "start": "2544060",
    "end": "2550300"
  },
  {
    "text": "to make sure that those standards aren't forced and we also make it easy with uh developer tools to make you know one of",
    "start": "2550300",
    "end": "2557440"
  },
  {
    "text": "the things pagination is actually uh there's many ways to do pagination in graphql and uh we do we do follow the",
    "start": "2557440",
    "end": "2563800"
  },
  {
    "text": "relay standard which is really nice but it's kind of complicated to implement uh so we we create this helper uh functions",
    "start": "2563800",
    "end": "2571540"
  },
  {
    "text": "and things like that to to help people Implement that so definitely having standards is great better handling is",
    "start": "2571540",
    "end": "2577540"
  },
  {
    "text": "another area I know someone asked the question about using HTTP error codes uh",
    "start": "2577540",
    "end": "2582880"
  },
  {
    "text": "so we actually you we can use that but we use that at a graphql error level so you can still kind of have HTTP error",
    "start": "2582880",
    "end": "2590020"
  },
  {
    "text": "code mapping because one field could be not found so it's a 404 but something else could be a different error and",
    "start": "2590020",
    "end": "2596140"
  },
  {
    "text": "since you have all these different requests that are happening uh you can have different partial errors uh so we",
    "start": "2596140",
    "end": "2603400"
  },
  {
    "text": "did try to do some standardization there but it's it's challenging yeah I think anytime you have that aggregation point",
    "start": "2603400",
    "end": "2610359"
  },
  {
    "text": "of I'm going to have this one request and it becomes five requests and I'm hiding that implementation detail",
    "start": "2610359",
    "end": "2615579"
  },
  {
    "text": "it's not always a simple answer to come back and maybe it's okay to give back some of the data even if even if you get",
    "start": "2615579",
    "end": "2621940"
  },
  {
    "text": "a 404 from one endpoint is it still okay to return part of that graph or do you just fail explicitly and say okay none",
    "start": "2621940",
    "end": "2627880"
  },
  {
    "text": "of it came back yeah so we definitely you know graphql one of the graphql's uh",
    "start": "2627880",
    "end": "2633400"
  },
  {
    "text": "superpowers to be able to return partial data so you can still render the UA can still decide now the UI might decide",
    "start": "2633400",
    "end": "2639579"
  },
  {
    "text": "like this particular field has to be present for us to render and they can make that decision at the client level",
    "start": "2639579",
    "end": "2645040"
  },
  {
    "text": "but the API itself can still operate operate with partial failure so you would return you know this particular",
    "start": "2645040",
    "end": "2650680"
  },
  {
    "text": "field as sector null and the errors you can add not found uh you can do also all sorts of all sorts of things",
    "start": "2650680",
    "end": "2657040"
  },
  {
    "text": "that's right and I think you mentioned earlier that the BFF pattern back and for front end is one of the first use",
    "start": "2657040",
    "end": "2663700"
  },
  {
    "text": "cases that people use and this is definitely front-end Focus the questions that came in now was um any thoughts on using graphql for",
    "start": "2663700",
    "end": "2669819"
  },
  {
    "text": "back into back-end communication yeah I mean it can be used it's fine uh",
    "start": "2669819",
    "end": "2676180"
  },
  {
    "text": "but that's not what it's you know it was invented for so uh you know if it's convenient to just use the graphql API",
    "start": "2676180",
    "end": "2683140"
  },
  {
    "text": "it's fine to use it obviously you probably don't want to rewrite the same API in grpc but even at Netflix uh",
    "start": "2683140",
    "end": "2690700"
  },
  {
    "text": "for things like backend use cases we do use grpc uh even today and we plan to do",
    "start": "2690700",
    "end": "2696339"
  },
  {
    "text": "that for the next foreseeable feature uh but for example we do have use cases",
    "start": "2696339",
    "end": "2701920"
  },
  {
    "text": "that have emerged where uh moving data from data warehouse moving data to uh to",
    "start": "2701920",
    "end": "2709480"
  },
  {
    "text": "to like a search index or something like that uh the graphql schema access a really nice way to kind of uh entry",
    "start": "2709480",
    "end": "2716560"
  },
  {
    "text": "point between like the data warehouse schemas which are usually in Avro or those kind of things and then you know",
    "start": "2716560",
    "end": "2722500"
  },
  {
    "text": "the last texture schema so so people have started using the graphql to move data into into for data movement but uh",
    "start": "2722500",
    "end": "2730480"
  },
  {
    "text": "but it's it's it's you know you you have this trade-offs again so again it's not close to the back end it's designed for",
    "start": "2730480",
    "end": "2736000"
  },
  {
    "text": "the for the UI so it's the data model is not going to be quite what you want to move to the data warehouse exactly so",
    "start": "2736000",
    "end": "2742359"
  },
  {
    "text": "you might have to re-create some data models within graphql to make that happen so",
    "start": "2742359",
    "end": "2747819"
  },
  {
    "text": "you have to evaluated backend usage on a case-by-case basis yeah I hadn't heard of that case before",
    "start": "2747819",
    "end": "2753099"
  },
  {
    "text": "but actually can see why it makes a little bit more sense to say the data warehouse because of it's that data",
    "start": "2753099",
    "end": "2758140"
  },
  {
    "text": "aggregation consumer you'd probably want different rules than a grpc is usually fairly tightly coupled between two",
    "start": "2758140",
    "end": "2764500"
  },
  {
    "text": "services like the contract's very well defined as opposed to it could change very easily there was a great qcon talk",
    "start": "2764500",
    "end": "2772720"
  },
  {
    "text": "at a previous one in the api's track about the the API Showdown and we had grpc rest and",
    "start": "2772720",
    "end": "2780599"
  },
  {
    "text": "graphql kind of all highlighting the the pros and cons of each so I recommend if",
    "start": "2780599",
    "end": "2785680"
  },
  {
    "text": "you'll go check that out it's available on all the info queue places um uh has latency become an issue does",
    "start": "2785680",
    "end": "2793000"
  },
  {
    "text": "this introducing latency because you're adding an extra step in the network yeah I mean so most of the latency so so I",
    "start": "2793000",
    "end": "2800319"
  },
  {
    "text": "think the whole goal of graphql is to reduce your latency right so you can like time to render basically because",
    "start": "2800319",
    "end": "2805420"
  },
  {
    "text": "you want to be able to make as little requests as possible but if you if you observe the graphql server sits in the",
    "start": "2805420",
    "end": "2811599"
  },
  {
    "text": "data center alongside all your microservices so all of these calls are within the data center so adding uh you",
    "start": "2811599",
    "end": "2818020"
  },
  {
    "text": "know an extra hop is as long as you're within the same region you know within the same Data Center",
    "start": "2818020",
    "end": "2823960"
  },
  {
    "text": "it's you know it's it's non-uh observable latency but apart but if you",
    "start": "2823960",
    "end": "2829540"
  },
  {
    "text": "do do you know if you don't have data in the same data center you have to hop across regions and stuff then it starts",
    "start": "2829540",
    "end": "2835540"
  },
  {
    "text": "to get uh slower this kind of migration but you have to pay the cost somewhere right like whether the client is paying",
    "start": "2835540",
    "end": "2842079"
  },
  {
    "text": "the cost or the you know someone's paying the car so you there's a we do a lot of observability tooling and we",
    "start": "2842079",
    "end": "2848319"
  },
  {
    "text": "provide like when developers are developing their apis with graphql you can see exactly where the time is spent",
    "start": "2848319",
    "end": "2854520"
  },
  {
    "text": "and really you shouldn't be spending more than five to ten milliseconds doing",
    "start": "2854520",
    "end": "2860380"
  },
  {
    "text": "any of the graphql stuff uh across the board and should be more in your business logic should be taking up time",
    "start": "2860380",
    "end": "2866440"
  },
  {
    "text": "your data queries and things like that um I think we've got enough time for one",
    "start": "2866440",
    "end": "2871780"
  },
  {
    "text": "more shorter answer um it's probably a long question but why is it difficult to share types between subgraphs don't they",
    "start": "2871780",
    "end": "2878200"
  },
  {
    "text": "have access to all the other types in the monorepo so yes uh the the sub graph itself is",
    "start": "2878200",
    "end": "2886839"
  },
  {
    "text": "that individual's freestanding graphql server right so it doesn't have all the types because you don't want to spin up",
    "start": "2886839",
    "end": "2893200"
  },
  {
    "text": "that service the subgraph service with all the types because it doesn't care for that but then uh but then like you",
    "start": "2893200",
    "end": "2901839"
  },
  {
    "text": "still need to when you make changes uh you need to be able to validate these types that they merge into the unified",
    "start": "2901839",
    "end": "2907780"
  },
  {
    "text": "graph now the unified graph only the client cares about it right because that they are the ones who are writing these",
    "start": "2907780",
    "end": "2913839"
  },
  {
    "text": "queries but really the subgraph is using an existing type you can you can just redefine it in your sub graph and it",
    "start": "2913839",
    "end": "2920680"
  },
  {
    "text": "merges cement seamlessly uh or you know you just have the types that you have in",
    "start": "2920680",
    "end": "2926560"
  },
  {
    "text": "your subgraph that are that are spun up in your subgraph subgraph service I don't know if I answer that well enough",
    "start": "2926560",
    "end": "2933099"
  },
  {
    "text": "but we can take it to the slack Channel that's a great transition so there's any other questions I think we got all maybe",
    "start": "2933099",
    "end": "2939640"
  },
  {
    "text": "one or two I have to go check my notes we'll copy the transcript and check everything um so feel free to repost your questions",
    "start": "2939640",
    "end": "2945339"
  },
  {
    "text": "we didn't answer them in slack contagious will be over there to answer them um we hope to see you at the next session have a good day thank you",
    "start": "2945339",
    "end": "2953640"
  },
  {
    "text": "[Music] foreign",
    "start": "2956070",
    "end": "2963119"
  }
]