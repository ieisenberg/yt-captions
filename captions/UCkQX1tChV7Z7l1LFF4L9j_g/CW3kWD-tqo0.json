[
  {
    "text": "hi everyone thank you so much for coming my name is Kristen O'Leary and I'm gonna",
    "start": "3890",
    "end": "9320"
  },
  {
    "text": "be talking today about the Java evolution of eclipse collections so",
    "start": "9320",
    "end": "14870"
  },
  {
    "text": "brief agenda for what we're going to go through today a quick introduction about myself what is Eclipse collections for those of",
    "start": "14870",
    "end": "21439"
  },
  {
    "text": "you who don't know and then we're gonna go through a bunch of new features that were included in the 8.0 release this",
    "start": "21439",
    "end": "28130"
  },
  {
    "text": "this release coordinating with the Java eight release so we included a lot of new changes that correspond with new",
    "start": "28130",
    "end": "34760"
  },
  {
    "text": "Java 8 features as well so we'll talk about optional collectors default methods and then we'll take a look at",
    "start": "34760",
    "end": "41059"
  },
  {
    "text": "our primitive collections and how they can work with Java 8 and then we'll take a look forward into what's going on with",
    "start": "41059",
    "end": "47449"
  },
  {
    "text": "the pending Java 9 release and then if we have some time I have some other stuff we can look at too so a little bit",
    "start": "47449",
    "end": "55309"
  },
  {
    "text": "about myself I'm a software developer at Goldman Sachs I am a contributor to GS / Eclipse",
    "start": "55309",
    "end": "61160"
  },
  {
    "text": "collections for the last five years so Eclipse collections was formerly known as GS collections prior to that it was",
    "start": "61160",
    "end": "68630"
  },
  {
    "text": "developed internally for about 12 years and I have been in Eclipse collections kata instructor and contributors so the",
    "start": "68630",
    "end": "76460"
  },
  {
    "text": "kata is our set of tutorials so if you don't know what eclipse collections is and after this talk you want to check it out or learn more about it I highly",
    "start": "76460",
    "end": "83060"
  },
  {
    "text": "recommend you take a look there so I can point you to that at the end and I'm an eclipse collections advocate so I've",
    "start": "83060",
    "end": "88430"
  },
  {
    "text": "been in a lot of cool conferences talking at the goldman sachs booth eclipse booth about eclipse collections spreading the word about it and just",
    "start": "88430",
    "end": "94579"
  },
  {
    "text": "teaching people about it so what is Eclipse collection so just before I get",
    "start": "94579",
    "end": "100549"
  },
  {
    "text": "into the slide show of hands who has heard of eclipse collections before knows what it is ok great and then out",
    "start": "100549",
    "end": "107360"
  },
  {
    "text": "of that group who uses it in their projects awesome ok so for those of you who haven't raised your hand hopefully",
    "start": "107360",
    "end": "113719"
  },
  {
    "text": "this talk will encourage you to take a look and try it out in your Java projects so Eclipse collections is a",
    "start": "113719",
    "end": "120079"
  },
  {
    "text": "feature-rich memory efficient Java collections framework it was open source in 2012 as gs collections as I mentioned",
    "start": "120079",
    "end": "127579"
  },
  {
    "text": "and now with our eight auto release we are now compatible with Java 8 and above",
    "start": "127579",
    "end": "133129"
  },
  {
    "text": "so prior to the its auto release we were compatible with versions 5 through 7 starting with a deado we're saying",
    "start": "133129",
    "end": "139970"
  },
  {
    "text": "you're only compatible with Java eight because we wanted to leverage a lot of the new things that Java eight brought about so we'll look at a lot of those in",
    "start": "139970",
    "end": "146570"
  },
  {
    "text": "a minute our Eclipse page is eclipse.org slash collections and other good resource there's all types of links",
    "start": "146570",
    "end": "152630"
  },
  {
    "text": "they're links to our github account links to the kata memory performance charts other talks things like that a",
    "start": "152630",
    "end": "157820"
  },
  {
    "text": "good splash page for you to learn about it and also most importantly eclipse collections is open for contributions so",
    "start": "157820",
    "end": "164750"
  },
  {
    "text": "if you do use eclipse collections and you want to contribute back to it you think there's something missing that you could use we're more than happy to take",
    "start": "164750",
    "end": "171500"
  },
  {
    "text": "your contribution so you can click on the link below to learn how to get started with that so new features in 8.0",
    "start": "171500",
    "end": "180010"
  },
  {
    "text": "so version 8 for Java 8 as I mentioned before a closed collections work with Java 8 you could use things like lambdas",
    "start": "180010",
    "end": "187130"
  },
  {
    "text": "and Method references no problem they actually worked really well with our existing API but that's pretty much all",
    "start": "187130",
    "end": "192740"
  },
  {
    "text": "you got you couldn't use any of the new Java 8 specific features that were not available before so we didn't require it",
    "start": "192740",
    "end": "199280"
  },
  {
    "text": "or embrace it really so version you changed that so now if you have Java 8 code it's a very very easy transition to",
    "start": "199280",
    "end": "205730"
  },
  {
    "text": "eclipse collections and if you have eclipse collections code it's way easier for you to use Java 8 features like",
    "start": "205730",
    "end": "211610"
  },
  {
    "text": "collections and streams so we'll take a look at a lot of examples coming up for that so one of the first things that's",
    "start": "211610",
    "end": "219500"
  },
  {
    "text": "new with Eclipse 8 is that we our functional interfaces now extend the Java 8 functional interfaces so this",
    "start": "219500",
    "end": "226100"
  },
  {
    "text": "gives us some new Interop with Java 8 features directly in our own API so I'm",
    "start": "226100",
    "end": "231200"
  },
  {
    "text": "gonna cover all of these methods coming up next reduce reduce in-place detect optional if you're familiar with the",
    "start": "231200",
    "end": "239209"
  },
  {
    "text": "Collector's class in Java we have taken it a step further and made our own collectors class called collectors 2",
    "start": "239209",
    "end": "244760"
  },
  {
    "text": "again we'll cover that shortly we've made use of default methods so we've been able to write a lot of new features",
    "start": "244760",
    "end": "251450"
  },
  {
    "text": "on our interfaces and we've gotten a lot more features with less code and primitive collections in Java 8 we'll",
    "start": "251450",
    "end": "257299"
  },
  {
    "text": "talk about some of the specialized things you can do there and how it compares with the Java 8 primitives so",
    "start": "257299",
    "end": "264050"
  },
  {
    "text": "the first thing I'm going to talk about is optional so again show of hands who uses optional awesome me too",
    "start": "264050",
    "end": "270380"
  },
  {
    "text": "I love optional I think it's a great feature before I get into optional specifically I'm going to just",
    "start": "270380",
    "end": "276510"
  },
  {
    "text": "quickly walk you through our domain so I have a lot of code examples coming up and the domain that these code examples",
    "start": "276510",
    "end": "283200"
  },
  {
    "text": "come from is we have a list of people each person object has a first name a last name and a list of pets each pet",
    "start": "283200",
    "end": "290880"
  },
  {
    "text": "has a pet type a name and an age and pet type can either the cat dog hamster",
    "start": "290880",
    "end": "297210"
  },
  {
    "text": "turtle bird or snake just an enum to specify what type of pet it is so we're gonna walk through some examples made-up",
    "start": "297210",
    "end": "302610"
  },
  {
    "text": "that involve this person pet domain so back to optional it is a new JDK feature",
    "start": "302610",
    "end": "310020"
  },
  {
    "text": "for those of you who don't know and directly from the Javadoc it's a container object which may or may not contain a non null value if a value is",
    "start": "310020",
    "end": "317460"
  },
  {
    "text": "present is present will return true and get will return the value so basically it's a way for you to avoid null pointer",
    "start": "317460",
    "end": "322740"
  },
  {
    "text": "exceptions it's a way for you to wrap your objects around and so you can check beforehand if they're null or not so it",
    "start": "322740",
    "end": "328380"
  },
  {
    "text": "saves you a lot of those nasty errors so we think this is great now where can we",
    "start": "328380",
    "end": "334290"
  },
  {
    "text": "use this in Eclipse collection so rich iterables detect with is one example rich iterable is one of our highest",
    "start": "334290",
    "end": "340470"
  },
  {
    "text": "sitting interfaces and we have a lot of api on it that our collections inherit from so detect with is essentially you",
    "start": "340470",
    "end": "347400"
  },
  {
    "text": "can read the Javadoc but it's essentially a way to iterate through a list and you're saying find me the first object in this list that satisfies a",
    "start": "347400",
    "end": "354390"
  },
  {
    "text": "certain predicate so it will return to you the object if it finds one but if it doesn't it will return no so this is",
    "start": "354390",
    "end": "361380"
  },
  {
    "text": "kind of a great case for us where we can start incorporating optional into our framework so that you don't have to deal",
    "start": "361380",
    "end": "367050"
  },
  {
    "text": "with getting back null values so what happens so from Licata this is taken from our",
    "start": "367050",
    "end": "374400"
  },
  {
    "text": "set of tutorials we want to find mary smith so in this example the stock",
    "start": "374400",
    "end": "379710"
  },
  {
    "text": "people is our list of people and we're saying detect with the first parameter is our method reference to this method",
    "start": "379710",
    "end": "386670"
  },
  {
    "text": "on person called named and the second parameter is mary smith so we're basically saying find me a person in my",
    "start": "386670",
    "end": "391800"
  },
  {
    "text": "list called mary smith if she's there she will get such a big person object but in this",
    "start": "391800",
    "end": "397920"
  },
  {
    "text": "case mary smith is not in our list so we're getting back a null value so what happens when i throw",
    "start": "397920",
    "end": "403740"
  },
  {
    "text": "my assertions I get a nullpointerexception because Mary Smith returned back null so pre Java 8 there's",
    "start": "403740",
    "end": "413550"
  },
  {
    "text": "a couple ways we can solve this or excuse me eclipse collections 8 oh there's a couple ways we can solve this we could write a simple null check say",
    "start": "413550",
    "end": "421289"
  },
  {
    "text": "if person is null create a new object and then my assertions the tests will pass this probably looks familiar to a",
    "start": "421289",
    "end": "427979"
  },
  {
    "text": "lot of you I've no I'm definitely written code like this before but it's not the prettiest it's not the greatest",
    "start": "427979",
    "end": "434180"
  },
  {
    "text": "another option before the atado release was we could call detect with if none so",
    "start": "434180",
    "end": "439319"
  },
  {
    "text": "we could find Mary Smith or create her so again this was prior to the it's Auto",
    "start": "439319",
    "end": "444479"
  },
  {
    "text": "release we have this other method which is basically saying find me Mary Smith if there's not one there create a new",
    "start": "444479",
    "end": "450389"
  },
  {
    "text": "one that solves our problem that's great the test passes but now with eight auto",
    "start": "450389",
    "end": "457349"
  },
  {
    "text": "we want to use things like optional they're really handy and we're not so we want to find Mary Smith or create her",
    "start": "457349",
    "end": "463500"
  },
  {
    "text": "but instead we are calling the method detect with optional so now we don't",
    "start": "463500",
    "end": "468509"
  },
  {
    "text": "have to pass that third parameter in and instead of getting a person object back we're now giving an optional wrapper",
    "start": "468509",
    "end": "473669"
  },
  {
    "text": "with the type person so she's either there or she isn't so now we're saying optional or else get so we're saying if",
    "start": "473669",
    "end": "480330"
  },
  {
    "text": "the optional is null get us a new person which is then created and again the test",
    "start": "480330",
    "end": "485940"
  },
  {
    "text": "passes so again a nice way for us to do you handle nulls and use it with a Java",
    "start": "485940",
    "end": "491699"
  },
  {
    "text": "eight style I think it's really really useful so collectors what is a collector",
    "start": "491699",
    "end": "499949"
  },
  {
    "text": "who uses collectors in their code today yeah a few streams I'm sure you use them a lot that's awesome",
    "start": "499949",
    "end": "505530"
  },
  {
    "text": "okay so again new feature in Java 8 it is a way to implement a mutable",
    "start": "505530",
    "end": "511020"
  },
  {
    "text": "reduction operation so basically something we can do is accumulate into a collection so again if you're familiar",
    "start": "511020",
    "end": "516630"
  },
  {
    "text": "with streams I'm sure you've used this before and the JDK has several built-in collectors so let's take a look at some",
    "start": "516630",
    "end": "523529"
  },
  {
    "text": "examples so in this these are all just plain Java examples no Eclipse",
    "start": "523529",
    "end": "530100"
  },
  {
    "text": "collections yet so in the first example we have our list of people we're calling stream on it and we're mapping each",
    "start": "530100",
    "end": "535860"
  },
  {
    "text": "person to their first and and then we're saying put that into a list for me which is collectors dot to",
    "start": "535860",
    "end": "541019"
  },
  {
    "text": "list and so what that does is it takes our stream and it puts everything into a list of first names and the output is",
    "start": "541019",
    "end": "546540"
  },
  {
    "text": "Bob Ted and Jake similarly something else cool that we can do is instead of doing any type of",
    "start": "546540",
    "end": "552990"
  },
  {
    "text": "mapper anything we just want to get a sum or a total of something in this example we're calling stream on people",
    "start": "552990",
    "end": "559499"
  },
  {
    "text": "and we're saying collect collectors that's summing int person get number of pets of it's taking each person's number",
    "start": "559499",
    "end": "565410"
  },
  {
    "text": "of pets summing them and returning back a total to us so these are really cool and we wanted to wait for our users to",
    "start": "565410",
    "end": "571920"
  },
  {
    "text": "use collectors as well with an extended API based on all of the features that we have in Eclipse collections so starting",
    "start": "571920",
    "end": "580410"
  },
  {
    "text": "with a todo we can leverage collectors awesome so we now have some built-in as well collectors too there's really no uh",
    "start": "580410",
    "end": "587660"
  },
  {
    "text": "interesting naming convention here it's just if you're typing collectors in your IDE hopefully the autocomplete you'll",
    "start": "587660",
    "end": "593040"
  },
  {
    "text": "see collectors too and you'll be inspired to use it so basically just copy the GDK name but we have a lot more",
    "start": "593040",
    "end": "599850"
  },
  {
    "text": "built in as well so let's take a look at those so in this example we are",
    "start": "599850",
    "end": "606839"
  },
  {
    "text": "collecting into a bags we have a list of people we're mapping each person to their pets or flat mapping and streaming",
    "start": "606839",
    "end": "614009"
  },
  {
    "text": "those again and then we're collecting into a bag a bag is an eclipse collection specific type essentially",
    "start": "614009",
    "end": "619799"
  },
  {
    "text": "behind the scenes it's a map of items account so when you get this back conceptually the bag looks like dog -",
    "start": "619799",
    "end": "626369"
  },
  {
    "text": "cat one snake one being those two dogs one cat and one snake so since this is",
    "start": "626369",
    "end": "631679"
  },
  {
    "text": "an Eclipse collection specific type this is a great way for us to leverage collectors - if you wanted to put something into an eclipse collection",
    "start": "631679",
    "end": "637709"
  },
  {
    "text": "site that doesn't exist in the JDK so in the next example we have our list of",
    "start": "637709",
    "end": "643470"
  },
  {
    "text": "people we're streaming again we're filtering the people who have cats and now we are collecting them into an",
    "start": "643470",
    "end": "650339"
  },
  {
    "text": "immutable set so Eclipse collections has a full immutability complement and library so if you want to use any type",
    "start": "650339",
    "end": "657299"
  },
  {
    "text": "of immutable data structure you can use collectors too to put them in now if you're streaming originally so now we",
    "start": "657299",
    "end": "662670"
  },
  {
    "text": "end up with an immutable set of person and the contents is Bob okay so this is",
    "start": "662670",
    "end": "669600"
  },
  {
    "text": "going to be a diagram that shows you scratches the surface really of a lot of the main types of collectors to",
    "start": "669600",
    "end": "675359"
  },
  {
    "text": "api's that you can use so we have most types so you thought you saw things like to immutableset",
    "start": "675359",
    "end": "681029"
  },
  {
    "text": "we have things like to mutable lists set to sorted set above all things that",
    "start": "681029",
    "end": "686040"
  },
  {
    "text": "currently are not exactly on the JDK but we have like my maps bags etc you can do",
    "start": "686040",
    "end": "693059"
  },
  {
    "text": "things like collect select reject things that are somewhere in the JDK but if you want to use those types you certainly",
    "start": "693059",
    "end": "698669"
  },
  {
    "text": "can we have primitive collections which again I'm going to cover in detail",
    "start": "698669",
    "end": "703679"
  },
  {
    "text": "further but we have a full primitive collections library as well so if you want to collect into a primitive",
    "start": "703679",
    "end": "708779"
  },
  {
    "text": "collection you can do that using one of these and again these are just some examples there's way more we have a full",
    "start": "708779",
    "end": "716459"
  },
  {
    "text": "set of multi maps which is again an eclipse collections concept not really in the JDK unless you wanted to",
    "start": "716459",
    "end": "722489"
  },
  {
    "text": "implement it yourself so you can do things like group by say to list multi map or two immutable bag multi maps you",
    "start": "722489",
    "end": "728850"
  },
  {
    "text": "can see we have all these varieties of different types of multi maps that you can use so any type you want it's",
    "start": "728850",
    "end": "734819"
  },
  {
    "text": "probably their miscellaneous we have some extra API that I think is really",
    "start": "734819",
    "end": "740730"
  },
  {
    "text": "cool so for example chunk basically puts things into batches for use you can say chunk my collection into twos and it",
    "start": "740730",
    "end": "747269"
  },
  {
    "text": "will create batches of size to partition make string we'll look at in the next example and then zip and zip with index",
    "start": "747269",
    "end": "755489"
  },
  {
    "text": "will return back to you a list of pairs so again all API that exists on our list",
    "start": "755489",
    "end": "762299"
  },
  {
    "text": "sets maps etc directly but if you're using collectors now you can use these as well to get into those collections",
    "start": "762299",
    "end": "769249"
  },
  {
    "text": "okay so here's some nice ways we can see some Interop with collectors and",
    "start": "769309",
    "end": "774779"
  },
  {
    "text": "collectors too these two examples produce the same exact output but let's take a look at how they're different",
    "start": "774779",
    "end": "780899"
  },
  {
    "text": "so in this actually I'm gonna look at the second example first we are we have",
    "start": "780899",
    "end": "786389"
  },
  {
    "text": "our list of people we're streaming them we're grouping them by their number of pets and then we're saying map each each",
    "start": "786389",
    "end": "793109"
  },
  {
    "text": "pet to a string and if you do each number of pets to a string and then join them by commas so what we're basically",
    "start": "793109",
    "end": "799980"
  },
  {
    "text": "doing is we're getting an output of how many pets each person has whereas the first example we're using collectors",
    "start": "799980",
    "end": "806730"
  },
  {
    "text": "grouping by again which is the JDK one but we're using collectors to make string so as you can see we achieved the",
    "start": "806730",
    "end": "813480"
  },
  {
    "text": "same result here but it saved us a little bit of code and I think it's a bit more intuitive so this is a nice way they're not mutually exclusive so you",
    "start": "813480",
    "end": "820110"
  },
  {
    "text": "can definitely use them together and to your benefits it'll save you some time and maybe some lines of code there any",
    "start": "820110",
    "end": "828269"
  },
  {
    "text": "questions before I move on and I'm saying a lot of material fast yeah sure",
    "start": "828269",
    "end": "833910"
  },
  {
    "text": "a multi map is basically a map where there's a key to a list or a set or",
    "start": "833910",
    "end": "839220"
  },
  {
    "text": "something else of values okay",
    "start": "839220",
    "end": "844670"
  },
  {
    "text": "default methods so who uses default methods I'm just going to go through all",
    "start": "844670",
    "end": "850139"
  },
  {
    "text": "the lists okay for a framework like eclipse collections which is very large default methods really come in handy so",
    "start": "850139",
    "end": "858029"
  },
  {
    "text": "we'll walk through one example so as I mentioned rich iterable is one of our highest level interfaces so if you want",
    "start": "858029",
    "end": "863970"
  },
  {
    "text": "to add new functionality and we don't use a default method we have a lot of cascading things we have to implement on",
    "start": "863970",
    "end": "869639"
  },
  {
    "text": "the way down so default methods are a great way for us to add new features without having to write all of the code",
    "start": "869639",
    "end": "875429"
  },
  {
    "text": "that we would have to otherwise I mean this is probably overwritten in a few places but for the most part makes our",
    "start": "875429",
    "end": "880829"
  },
  {
    "text": "lives a lot easier so reduce in place is a method that produces the equivalent",
    "start": "880829",
    "end": "886319"
  },
  {
    "text": "result as a collector so all the things we've seen collect passing in a collector this will do the same result",
    "start": "886319",
    "end": "892649"
  },
  {
    "text": "so why do we need this so in this",
    "start": "892649",
    "end": "897959"
  },
  {
    "text": "example we'll show simply we have a list of people we're streaming them we're",
    "start": "897959",
    "end": "903329"
  },
  {
    "text": "filtering them based on their pet type see who has dogs and then we are collecting them into an immutable set",
    "start": "903329",
    "end": "909709"
  },
  {
    "text": "whereas in the second example we are using reduce in place instead so we're",
    "start": "909709",
    "end": "914819"
  },
  {
    "text": "not calling stream we're just saying select people who have dogs and reduce in place so this is the",
    "start": "914819",
    "end": "920009"
  },
  {
    "text": "API we could use if we are not in the stream sense but we still want to use collectors so in this second example I",
    "start": "920009",
    "end": "925860"
  },
  {
    "text": "didn't call stream at all but I can still pass in a collector and get the same result so the contents of the set",
    "start": "925860",
    "end": "930990"
  },
  {
    "text": "is Bob and Ted there are the people who have dogs where this really",
    "start": "930990",
    "end": "937740"
  },
  {
    "text": "comes in handy though is if we use our immutable or lazy API so currently as it",
    "start": "937740",
    "end": "945000"
  },
  {
    "text": "stands today if you were to use the Eclipse collections immutable library you can't call stream on it same thing",
    "start": "945000",
    "end": "951960"
  },
  {
    "text": "with our lazy iterables you can't call stream on them subject to change in the future but for now this will not compile",
    "start": "951960",
    "end": "957360"
  },
  {
    "text": "as is so if we want to use collectors reduce in place is our way to do that",
    "start": "957360",
    "end": "963330"
  },
  {
    "text": "without having to conflict with the stream API and still keeping the types that we want so in this example we're",
    "start": "963330",
    "end": "970440"
  },
  {
    "text": "calling as lazy by the way as lazy and stream are pretty much the same thing because streams evaluate lazily so at",
    "start": "970440",
    "end": "977100"
  },
  {
    "text": "this point stream is no longer available we're selecting people who have dogs and we're saying reduce in place collectors",
    "start": "977100",
    "end": "983070"
  },
  {
    "text": "got to set and notice that I'm just using a JDK collector in this case and not using Eclipse collections and I just",
    "start": "983070",
    "end": "988920"
  },
  {
    "text": "end up with a plain old hash set so again a nice way for us to use collectors in the situation where we",
    "start": "988920",
    "end": "994410"
  },
  {
    "text": "wouldn't have been able to otherwise okay primitive collections so we've had",
    "start": "994410",
    "end": "1004250"
  },
  {
    "text": "primitive collections since G s collections 3.0 s we've had them for a really long time they are a memory",
    "start": "1004250",
    "end": "1010160"
  },
  {
    "text": "optimized collections for primitive types we have a similar interface hierarchy to the object collections we",
    "start": "1010160",
    "end": "1016850"
  },
  {
    "text": "try to keep the API as similar as possible there are some gaps so if you use them and you find something missing",
    "start": "1016850",
    "end": "1022190"
  },
  {
    "text": "feel free to contribute it back and we have symmetry among the primitive types meaning it doesn't matter if you're",
    "start": "1022190",
    "end": "1028939"
  },
  {
    "text": "using an int long float double etc we have the same API because we code",
    "start": "1028940",
    "end": "1034610"
  },
  {
    "text": "generate all of our primitive classes we don't hand write off all of them that would take forever so we have symmetry",
    "start": "1034610",
    "end": "1040880"
  },
  {
    "text": "across the primitive types which is really nice so how much didn't in cost",
    "start": "1040880",
    "end": "1047480"
  },
  {
    "text": "this is one of our memory comparison charts and it shows you the benefits of",
    "start": "1047480",
    "end": "1053150"
  },
  {
    "text": "using primitive collections if you can versus an object collection so the",
    "start": "1053150",
    "end": "1058280"
  },
  {
    "text": "orange is the JDK ArrayList of type integer and then the blue and green respectively are GS collections and",
    "start": "1058280",
    "end": "1064580"
  },
  {
    "text": "trove and their memory performances with an int list or an int array list of seasoning so again as your element size",
    "start": "1064580",
    "end": "1071700"
  },
  {
    "text": "increases its it really does save you a lot of memory so something to consider if you're dealing with things that could",
    "start": "1071700",
    "end": "1077519"
  },
  {
    "text": "potentially be primitive so Alyssa vintage shirt versus an int list Java",
    "start": "1077519",
    "end": "1083669"
  },
  {
    "text": "has object and primitive arrays but as you all probably know primitive ladies really have no behaviors besides like",
    "start": "1083669",
    "end": "1090230"
  },
  {
    "text": "Java does not have primitive list sets or maps so primitives must be boxed and",
    "start": "1090230",
    "end": "1096029"
  },
  {
    "text": "boxing is expensive we have reference and a header and alignment so this is",
    "start": "1096029",
    "end": "1101399"
  },
  {
    "text": "just a quick comparison chart between the primitive versus JDK collections that you can get with Eclipse",
    "start": "1101399",
    "end": "1106830"
  },
  {
    "text": "collections versus the plain old Java collections so as I mentioned we have primitive list sets Maps and stacks and",
    "start": "1106830",
    "end": "1114720"
  },
  {
    "text": "bags and vs. you'd have to box all these in the JDK and for things like bags you'd have to create a map first and",
    "start": "1114720",
    "end": "1121169"
  },
  {
    "text": "then box them since bag isn't readily available for you you'd have to implement it yourself where this becomes",
    "start": "1121169",
    "end": "1126570"
  },
  {
    "text": "interesting is with the stream API we do get primitives but only for int long and",
    "start": "1126570",
    "end": "1132510"
  },
  {
    "text": "doubles so if you want to use the lazy API on eclipse collections you will get all eight primitives so as I mentioned",
    "start": "1132510",
    "end": "1140850"
  },
  {
    "text": "Java only has three primitive streams and long and double to get into the",
    "start": "1140850",
    "end": "1146250"
  },
  {
    "text": "primitive collection side of things you would call in stream dub versus stream dub for creation they have specialized",
    "start": "1146250",
    "end": "1153120"
  },
  {
    "text": "lambda expressions and they are interchangeable between the primitive and the object types these new streams",
    "start": "1153120",
    "end": "1161630"
  },
  {
    "text": "lazy iterable is especially essentially our version of stream API and we have it",
    "start": "1162230",
    "end": "1168510"
  },
  {
    "text": "for all eight primitive types you would call as lazy on your collection for it for creation and the API is similar to",
    "start": "1168510",
    "end": "1176250"
  },
  {
    "text": "the object and type specific and again we have specialized functional interfaces as well",
    "start": "1176250",
    "end": "1181679"
  },
  {
    "text": "these can now be used in Java H streams to which we'll take a look at and as we'll show in the next example they are",
    "start": "1181679",
    "end": "1187980"
  },
  {
    "text": "reusable which is pretty cool so use or",
    "start": "1187980",
    "end": "1193590"
  },
  {
    "text": "reuse so streams are like iterators once you use them you can't use them again",
    "start": "1193590",
    "end": "1199889"
  },
  {
    "text": "so in this example we're creating an in stream of one two and three",
    "start": "1199889",
    "end": "1205140"
  },
  {
    "text": "and we're calling min get us int we get one great and then when we try and call",
    "start": "1205140",
    "end": "1211260"
  },
  {
    "text": "max on the stream we get an illegal state exception with it saying the stream has already been operated upon or",
    "start": "1211260",
    "end": "1217590"
  },
  {
    "text": "closed so unfortunately we can't reuse this stream once we've already used it once whereas if you have a lazy interval",
    "start": "1217590",
    "end": "1225140"
  },
  {
    "text": "you can use it as many times as you want so in this case we're creating a new int ArrayList of 1 2 & 3",
    "start": "1225140",
    "end": "1231240"
  },
  {
    "text": "we're calling as lazy on it which is essentially the same type of API and we're calling min we get 1 we call max",
    "start": "1231240",
    "end": "1237780"
  },
  {
    "text": "we got 3 no problem we're done so again an interesting thing to consider if you",
    "start": "1237780",
    "end": "1242970"
  },
  {
    "text": "plan on reusing these types of things if you want lazy evaluation this is a great way to do it so now I'm going to walk",
    "start": "1242970",
    "end": "1250470"
  },
  {
    "text": "you through some code examples using primitive collections and what you'd have to do in both streams or the lazy",
    "start": "1250470",
    "end": "1257040"
  },
  {
    "text": "api's so we want to filter pet ages appearing only once so in the first",
    "start": "1257040",
    "end": "1263910"
  },
  {
    "text": "example we have our list of people we're streaming them we're flat mapping each",
    "start": "1263910",
    "end": "1268980"
  },
  {
    "text": "person to their pets and then what I find interesting here is we have to call",
    "start": "1268980",
    "end": "1274470"
  },
  {
    "text": "stream again because wants to be flat map on the pets we're out of the stream we have to create anyone and then we are",
    "start": "1274470",
    "end": "1279870"
  },
  {
    "text": "collecting them with our favorite collectors we are grouping each pet by their age and we're counting how many",
    "start": "1279870",
    "end": "1285990"
  },
  {
    "text": "there are of that age and she set stream then we're saying filter each get value",
    "start": "1285990",
    "end": "1292260"
  },
  {
    "text": "equals 1 and then we are collecting them into a list so what this is doing is",
    "start": "1292260",
    "end": "1297570"
  },
  {
    "text": "we're saying get all the pet ages filter the ones that equal 1 and return it to me so we end up with a list of a map of",
    "start": "1297570",
    "end": "1304410"
  },
  {
    "text": "entry integer too long and the output is 3 appearing once and for appearing ones whereas if you want to use this using",
    "start": "1304410",
    "end": "1311010"
  },
  {
    "text": "primitive collections and lazy API with Clips collections you have your list of people you call as lazy you flat collect",
    "start": "1311010",
    "end": "1317820"
  },
  {
    "text": "the pets collect int which when we say collect int that's our signal that now we're going into the primitive side of",
    "start": "1317820",
    "end": "1324059"
  },
  {
    "text": "things we want to get the int value not the integer value when we call pet get age and to bag so at this point we are",
    "start": "1324059",
    "end": "1331770"
  },
  {
    "text": "we have an int bag we don't have to worry about oh we went back to the object side as soon as you enter the",
    "start": "1331770",
    "end": "1337200"
  },
  {
    "text": "collect end stage if it knows you're using a primitive collection and you don't have to worry about it going back to the object side",
    "start": "1337200",
    "end": "1342910"
  },
  {
    "text": "we call shoe bag we call select by occurrences which is our way of saying tell me the occurrences that are equal",
    "start": "1342910",
    "end": "1349480"
  },
  {
    "text": "to one so we get the same output three and four and we end up with a primitive collection instead find the mode of pet",
    "start": "1349480",
    "end": "1360010"
  },
  {
    "text": "age so find the most occurring pet age so we essentially this is what we call",
    "start": "1360010",
    "end": "1366190"
  },
  {
    "text": "the collections top occurrences so in the first example we have our list of people we're streaming them or flat mat",
    "start": "1366190",
    "end": "1372130"
  },
  {
    "text": "this is all the same as before we're getting the pet ages and Counting them now what we want to do is we want to",
    "start": "1372130",
    "end": "1377800"
  },
  {
    "text": "sort the occurrences comparing by value and then what's interesting here is we",
    "start": "1377800",
    "end": "1383170"
  },
  {
    "text": "have to call reverse so we get the most frequent pet age on top and then we're",
    "start": "1383170",
    "end": "1388810"
  },
  {
    "text": "saying limit one get me the first one and then collecting it into a list and the output is two occurring twice",
    "start": "1388810",
    "end": "1395850"
  },
  {
    "text": "whereas in Eclipse collections if you use a bag you already have the API called top occurrences so we're calling",
    "start": "1395850",
    "end": "1402280"
  },
  {
    "text": "as lazy we're flat collecting the pets we're collecting in of their ages we're",
    "start": "1402280",
    "end": "1407950"
  },
  {
    "text": "calling to bag on them and we're saying give me the number one top occurrence so again we're getting age to current toys",
    "start": "1407950",
    "end": "1415530"
  },
  {
    "text": "so this example is very similar finally spring gum pet age you'll see the only difference is here between the last",
    "start": "1416190",
    "end": "1423490"
  },
  {
    "text": "example and this one is we don't have to call reverse here because now we want the bottom occurrences sorry Jim question",
    "start": "1423490",
    "end": "1430320"
  },
  {
    "text": "bags are not sorted now it's basically in that behind the scenes so so in this",
    "start": "1431220",
    "end": "1439180"
  },
  {
    "text": "example we're just getting the bottom once we don't have to reverse them but same idea three occurred once whereas",
    "start": "1439180",
    "end": "1446370"
  },
  {
    "text": "when we called top occurrences here the only difference is now we're calling bottom occurrences so we occur at once",
    "start": "1446370",
    "end": "1454980"
  },
  {
    "text": "alrighty so Java not so who's excited for Java 9 yeah yeah lots of enthusiasm",
    "start": "1455970",
    "end": "1463420"
  },
  {
    "text": "back there that's awesome so Java 9 as I'm sure we know will introduce many",
    "start": "1463420",
    "end": "1469960"
  },
  {
    "text": "interesting changes to the Java ecosystem so just to name a few we're gonna have the module system and",
    "start": "1469960",
    "end": "1476179"
  },
  {
    "text": "internal API encapsulation so Eclipse collections must in bold must change in",
    "start": "1476179",
    "end": "1481850"
  },
  {
    "text": "order to be compatible as it stands well as it stood prior to the 8.2 release we need to include some fixes to get ready",
    "start": "1481850",
    "end": "1488240"
  },
  {
    "text": "for Java 9 ourselves so one of the examples that we ran into trouble with is methods using reflection so we need",
    "start": "1488240",
    "end": "1495769"
  },
  {
    "text": "to change our methods that use reflection in order to build so I'm",
    "start": "1495769",
    "end": "1501320"
  },
  {
    "text": "going to show you a quick demo as to one of one of the things that we had is a problem and I'll show you what we did to",
    "start": "1501320",
    "end": "1506630"
  },
  {
    "text": "fix it ok so full disclosure this is the",
    "start": "1506630",
    "end": "1515870"
  },
  {
    "text": "eclipse collection SCADA I have repurposed it for my demo but the most",
    "start": "1515870",
    "end": "1520940"
  },
  {
    "text": "important thing actually let me make this bigger ok much better",
    "start": "1520940",
    "end": "1529480"
  },
  {
    "text": "so we are using version 8.1 0 this was",
    "start": "1529480",
    "end": "1534620"
  },
  {
    "text": "our 8.2 was really some Friday's so with this one we have not yet included any Java 9 types of fixes so cute ok so I in",
    "start": "1534620",
    "end": "1547399"
  },
  {
    "text": "this demo I'm using one of our youth static utility classes called ArrayList iterate so I have an ArrayList",
    "start": "1547399",
    "end": "1553880"
  },
  {
    "text": "of people you know we would typically never never do this with the club's collections because you don't need to",
    "start": "1553880",
    "end": "1559159"
  },
  {
    "text": "make ArrayList we have our own versions of lists but for the purposes of this demo let's say I'm using some legacy",
    "start": "1559159",
    "end": "1564620"
  },
  {
    "text": "code and I just want some API on an ArrayList so I have my list of people and I am calling ArrayList iterate dot",
    "start": "1564620",
    "end": "1572360"
  },
  {
    "text": "all satisfies this is going to return true or false based on some kind of predicate my first parameter is my list",
    "start": "1572360",
    "end": "1579080"
  },
  {
    "text": "of people and I'm saying do all my people for all my people check to see if each person has a pet of type cat and",
    "start": "1579080",
    "end": "1586850"
  },
  {
    "text": "then I'm going to assert false that all people don't have cats so what happens",
    "start": "1586850",
    "end": "1592580"
  },
  {
    "text": "when I run this so as you can see we're running with Java 9 and I get an",
    "start": "1592580",
    "end": "1598580"
  },
  {
    "text": "exception in initializer error caused by java.lang perfect buh-buh-buh-buh-buh as",
    "start": "1598580",
    "end": "1604370"
  },
  {
    "text": "you can see what this is basically saying is you were using reflection on ArrayList and you can't do",
    "start": "1604370",
    "end": "1611060"
  },
  {
    "text": "that anymore so how do we fix this so that our users don't run into this",
    "start": "1611060",
    "end": "1616160"
  },
  {
    "text": "problem if they're using Java not",
    "start": "1616160",
    "end": "1619960"
  },
  {
    "text": "switching switching IDs okay now I have number two so so in this version I am",
    "start": "1626500",
    "end": "1638030"
  },
  {
    "text": "using 8.2 which was just released on Friday with some of our fancy job and I",
    "start": "1638030",
    "end": "1643340"
  },
  {
    "text": "fixes so I'm going to run the test again",
    "start": "1643340",
    "end": "1648669"
  },
  {
    "text": "and it passes right so what did we do so",
    "start": "1648940",
    "end": "1657530"
  },
  {
    "text": "our problem lied within this set accessible method calling true on it we",
    "start": "1657530",
    "end": "1663110"
  },
  {
    "text": "can't do this anymore with Java 9 we can't use this reflection sadly unfortunately so what we had to do was",
    "start": "1663110",
    "end": "1669140"
  },
  {
    "text": "add this new data equals null and size equals null so that these fields were initialized and not just thrown away",
    "start": "1669140",
    "end": "1674630"
  },
  {
    "text": "this this catch block was originally empty so what this is how we fixed it in order just to pass it through",
    "start": "1674630",
    "end": "1680480"
  },
  {
    "text": "unfortunately this means that when we iterate through our array lists this was done for optimization purposes we don't",
    "start": "1680480",
    "end": "1687470"
  },
  {
    "text": "know exactly what the implications of that are to see speed-up slowdowns I have promised I would write a jmh test",
    "start": "1687470",
    "end": "1693200"
  },
  {
    "text": "to see how the differences are but TBD so unfortunately can't do that anymore",
    "start": "1693200",
    "end": "1698300"
  },
  {
    "text": "can't optimize our iterations but we're still able to work with Java 9 so again that's just a very small example of one",
    "start": "1698300",
    "end": "1704300"
  },
  {
    "text": "of the things we had to do so workarounds for reflection this isn't",
    "start": "1704300",
    "end": "1710060"
  },
  {
    "text": "interesting if you're curious now with the open JDK I can open it if",
    "start": "1710060",
    "end": "1715400"
  },
  {
    "text": "you want but basically what this is saying is if you're using reflection and you're not and you want to use Java 9",
    "start": "1715400",
    "end": "1720920"
  },
  {
    "text": "but you're not quite ready to get rid of all your reflection calls you can avoid this with the command line arguments I",
    "start": "1720920",
    "end": "1727100"
  },
  {
    "text": "forgot what it is but it's basically way of flagging saying ignore all the reflection types of errors but because",
    "start": "1727100",
    "end": "1733670"
  },
  {
    "text": "we're a framework we proactively solve the problem because we wouldn't want to use to have to do that on account of us",
    "start": "1733670",
    "end": "1738860"
  },
  {
    "text": "you want to at least make sure we're compatible we're ready we won't cause you any troubles when Java 9 gets released so with that I think we have",
    "start": "1738860",
    "end": "1749000"
  },
  {
    "text": "some extra time so here are some links to the 8.2 release which again was",
    "start": "1749000",
    "end": "1754100"
  },
  {
    "text": "released on Friday has a lot more of these Java 9 types of fixes if you're curious and looking the second link is a",
    "start": "1754100",
    "end": "1760549"
  },
  {
    "text": "link to a presentation given by Donald robbery staff stolen at JavaOne back in September and it's all about collectors",
    "start": "1760549",
    "end": "1767299"
  },
  {
    "text": "so if you thought the collectors piece was interesting to you it's definitely a good piece to check out to see even",
    "start": "1767299",
    "end": "1772820"
  },
  {
    "text": "learn even more about it and specifically how to create your own and then since we have some time and I",
    "start": "1772820",
    "end": "1778220"
  },
  {
    "text": "always get questions about this we have a presentation linking to some of our memory benchmarks and performance tests",
    "start": "1778220",
    "end": "1783950"
  },
  {
    "text": "so I'm gonna open those up and just give you a quick look at what we have they",
    "start": "1783950",
    "end": "1794540"
  },
  {
    "text": "make this bigger okay so we have done",
    "start": "1794540",
    "end": "1802970"
  },
  {
    "text": "all these types of memory tests to see how they perform and how they scale especially Derk elections frameworks and",
    "start": "1802970",
    "end": "1809780"
  },
  {
    "text": "the JDK itself these are a bit older so this was wrong with Java 7 and GS",
    "start": "1809780",
    "end": "1815240"
  },
  {
    "text": "collection so clearly they are not the most current versions but we do keep these tests checked into our github",
    "start": "1815240",
    "end": "1821750"
  },
  {
    "text": "repository so if you want to run them yourself and see how they run on your machine feel free so they're all",
    "start": "1821750",
    "end": "1826940"
  },
  {
    "text": "available and you can check them out yourself here's an example of I think",
    "start": "1826940",
    "end": "1833030"
  },
  {
    "text": "this is no this is just a plain object one showing the differences between using a mutable list which is RDS",
    "start": "1833030",
    "end": "1840230"
  },
  {
    "text": "clark's GS collections eclipse collections version of a list versus the JDK ArrayList versus a linked list where",
    "start": "1840230",
    "end": "1848059"
  },
  {
    "text": "things get more interesting is memory savings with maps so we were comparing to the JDK hash map to eclipse",
    "start": "1848059",
    "end": "1854120"
  },
  {
    "text": "collections GS collections collection same thing trove and a JDK hash table so",
    "start": "1854120",
    "end": "1860090"
  },
  {
    "text": "a little bit more interesting here here's another one with mutable set with",
    "start": "1860090",
    "end": "1867260"
  },
  {
    "text": "it which is our version of a hash set so you can see here you're really starting to save",
    "start": "1867260",
    "end": "1872380"
  },
  {
    "text": "with memory savings behind-the-scenes bags since there are no JDK equivalents",
    "start": "1872380",
    "end": "1879429"
  },
  {
    "text": "we have a comparison versus Google's concurrent map and so they're okay and",
    "start": "1879429",
    "end": "1887289"
  },
  {
    "text": "now here these this is the one that I believe I showed in my presentation so showing you the savings of using a",
    "start": "1887289",
    "end": "1893440"
  },
  {
    "text": "primitive collections list versus not again primitive Maps versus an object map",
    "start": "1893440",
    "end": "1903210"
  },
  {
    "text": "primitive sets and goes on I can leave this up or if you want I can just leave",
    "start": "1904260",
    "end": "1909730"
  },
  {
    "text": "the link up so everyone can take a look but we do have a lot of interesting statistics here so if you're curious",
    "start": "1909730",
    "end": "1914770"
  },
  {
    "text": "feel free to take a look with that that's pretty much all I had so I'm happy to open it up to questions any",
    "start": "1914770",
    "end": "1925809"
  },
  {
    "text": "questions yeah for Java 9 you had about the internal API is on the slide which",
    "start": "1925809",
    "end": "1931780"
  },
  {
    "text": "ones were you using I'm sorry said oh so in this example so for Java 9 this was",
    "start": "1931780",
    "end": "1942640"
  },
  {
    "text": "the problem when we called set accessible on data this is what caused the issue for us anybody else all right",
    "start": "1942640",
    "end": "1957929"
  },
  {
    "text": "did I miss anybody behind the poll hi",
    "start": "1957929",
    "end": "1968710"
  },
  {
    "text": "thanks and the how do you manage to reuse the what was it called the lazy's",
    "start": "1968710",
    "end": "1976390"
  },
  {
    "text": "was it interpol extreme yeah do you like create one new one under the cover so do you just reset it at the end so we the",
    "start": "1976390",
    "end": "1983890"
  },
  {
    "text": "way we have our API we never made it an issue you can reuse them as much as you want for what I don't know the design",
    "start": "1983890",
    "end": "1989080"
  },
  {
    "text": "reason why strings are like that but that's the design decision they made but for us we just never put in that that",
    "start": "1989080",
    "end": "1994960"
  },
  {
    "text": "restriction that you have to use them once",
    "start": "1994960",
    "end": "1999929"
  },
  {
    "text": "except for Java 9 can you tell us something that might be coming up on your roadmap um I can show you let me",
    "start": "2005580",
    "end": "2012940"
  },
  {
    "text": "pull up let me pull up our github so",
    "start": "2012940",
    "end": "2018430"
  },
  {
    "text": "this is the cauda if anyone's curious but I'm going to go with you main page",
    "start": "2018430",
    "end": "2025410"
  },
  {
    "text": "so these are some polar crusts but we have our whole issue tracker with things",
    "start": "2025440",
    "end": "2031090"
  },
  {
    "text": "that we want help with as well as things that we want to do so you're free to",
    "start": "2031090",
    "end": "2036610"
  },
  {
    "text": "take a look here and or if you want to contribute feel free also but this is pretty much where we document all the stuff that's upcoming and things that we",
    "start": "2036610",
    "end": "2043660"
  },
  {
    "text": "might need help us if anyone wants to add to them alright thank you all for",
    "start": "2043660",
    "end": "2053830"
  },
  {
    "text": "coming and feel free to come up and chat some more",
    "start": "2053830",
    "end": "2057960"
  }
]