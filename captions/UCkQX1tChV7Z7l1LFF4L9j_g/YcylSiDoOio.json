[
  {
    "text": "[Music] h",
    "start": "0",
    "end": "3280"
  },
  {
    "text": "[Music]",
    "start": "5550",
    "end": "22420"
  },
  {
    "text": "[Music]",
    "start": "24850",
    "end": "36120"
  },
  {
    "text": "um it's great to be back here I spoke in this room a few months ago at the bay area.net User Group about jQuery and had",
    "start": "36120",
    "end": "42480"
  },
  {
    "text": "a lot of fun doing that um based on the reaction I saw originally when Bruno",
    "start": "42480",
    "end": "47920"
  },
  {
    "text": "asked up front how many people in New to jQuery there there seems to be quite a lot of people in this room who have come",
    "start": "47920",
    "end": "53399"
  },
  {
    "text": "really to learn about Jake GW they haven't done a lot of work with it before they're interested in what it does and so what I'm hoping to do in",
    "start": "53399",
    "end": "59320"
  },
  {
    "text": "this presentation is uh give you a good overview and hopefully uh highlight some of the",
    "start": "59320",
    "end": "66159"
  },
  {
    "text": "really good features of J crew but more so send you away with what you need or the things that you know you need to",
    "start": "66159",
    "end": "72000"
  },
  {
    "text": "investigate more to become a really good jQuery developer um and a lot of that comes down to actually knowing",
    "start": "72000",
    "end": "77280"
  },
  {
    "text": "JavaScript so I'm going to spend a little bit of time looking at um some of the fundamentals of JavaScript that a",
    "start": "77280",
    "end": "82560"
  },
  {
    "text": "lot of people perhaps aren't aware of um and then we'll we'll see how that becomes important when we start using",
    "start": "82560",
    "end": "88880"
  },
  {
    "text": "jQuery because a lot of these these function a lot of these features of JavaScript are exploited uh when you start developing with J crew and if",
    "start": "88880",
    "end": "95320"
  },
  {
    "text": "they're new to you um it can you can it is easy to get a little bit lost um if you're not used to seeing JavaScript",
    "start": "95320",
    "end": "101799"
  },
  {
    "text": "used in this fashion so without further Ado I'm going to switch over uh I don't have any slides I am just code for the",
    "start": "101799",
    "end": "109920"
  },
  {
    "text": "next 40 minutes or so so first thing I wanted to talk about is functions now",
    "start": "109920",
    "end": "116039"
  },
  {
    "text": "JavaScript is a functional language um it's it's many things but one of the it is as a functional language um if you",
    "start": "116039",
    "end": "122920"
  },
  {
    "text": "are a c developer or a ruby developer or any other language that uh has lambdas",
    "start": "122920",
    "end": "129920"
  },
  {
    "text": "or Anonymous delegates or Anonymous functions or whatever your language chooses to call those things this won't",
    "start": "129920",
    "end": "135680"
  },
  {
    "text": "be a New Concept to you um but let's start off with the really really basic stuff so if I declare a function a",
    "start": "135680",
    "end": "143959"
  },
  {
    "text": "function in the root of my Javascript file like this this is what we all know and love as JavaScript developers and",
    "start": "143959",
    "end": "149920"
  },
  {
    "text": "every web developer worth their salt at all knows how to do this type of thing um but we'll talk about why that's bad",
    "start": "149920",
    "end": "155560"
  },
  {
    "text": "later on um some of the things you might not know is that you can do really wacky",
    "start": "155560",
    "end": "160599"
  },
  {
    "text": "things like this so in this case what I've done is nested a function inside another function now this is totally",
    "start": "160599",
    "end": "166360"
  },
  {
    "text": "fine because functions of first class citizens in JavaScript uh they are values in their own right I can assign",
    "start": "166360",
    "end": "171920"
  },
  {
    "text": "them to variables I can pass them in as parameters to other functions I can even return them as a return type of other",
    "start": "171920",
    "end": "178239"
  },
  {
    "text": "functions so I can do really silly things like return this function from that function um as long as I close it",
    "start": "178239",
    "end": "185720"
  },
  {
    "text": "and then when I execute f i can immediately execute the resultant uh result from Fu because it itself is a",
    "start": "185720",
    "end": "191920"
  },
  {
    "text": "function and you can see people do very theoretical things with this and get really wacky where you basically have",
    "start": "191920",
    "end": "197560"
  },
  {
    "text": "code that looks like this because you're just forever returning functions and executing other functions now I'm glad",
    "start": "197560",
    "end": "203360"
  },
  {
    "text": "to say J cre doesn't quite go to that extent um but it does utilize this feature to to to uh to some important",
    "start": "203360",
    "end": "209920"
  },
  {
    "text": "points later on um as I said you know we can we can pass functions in so I can have a parameter like this and then I",
    "start": "209920",
    "end": "215599"
  },
  {
    "text": "can write code in here that assumes P1 is a function and that's fine and if I call F I could go ahead and pass a",
    "start": "215599",
    "end": "221760"
  },
  {
    "text": "function in directly like so now there are two types of functions that I currently have on the screen one is a a",
    "start": "221760",
    "end": "228519"
  },
  {
    "text": "function declaration which is this one here um which is fine as I said these",
    "start": "228519",
    "end": "234000"
  },
  {
    "text": "are the ones that people generally use and and and know the most and then this one here is a function expression um it",
    "start": "234000",
    "end": "239920"
  },
  {
    "text": "doesn't have a name so it's Anonymous it's an anonymous function expression and I'm just basically passing this",
    "start": "239920",
    "end": "245720"
  },
  {
    "text": "function as a raw value uh similar to the way you would pass in a string using a string literal or something like this",
    "start": "245720",
    "end": "252519"
  },
  {
    "text": "um this is really the the same way of of denoting a literal um into this function",
    "start": "252519",
    "end": "259519"
  },
  {
    "text": "I can also have a sort of a hybrid which is a named function expression so I can do something like this so now it's an",
    "start": "259519",
    "end": "265560"
  },
  {
    "text": "anonymous fun well it's not an anonymous function it's a function expression but now it's named and there reasons you would want to do that and we don't need",
    "start": "265560",
    "end": "271199"
  },
  {
    "text": "to go into those tonight but it's important to to note that all of these things are totally valid in JavaScript and they all have their have their uses",
    "start": "271199",
    "end": "277320"
  },
  {
    "text": "I won't say functions because then we're going to start overloading terms and wait till we get to talking about this and I'm going to really confuse you um",
    "start": "277320",
    "end": "284720"
  },
  {
    "text": "so that that's a really basic in introduction to functions um let's have a look at objects so objects I said that",
    "start": "284720",
    "end": "291600"
  },
  {
    "text": "JavaScript is is a functional language and by that I don't mean that it's useful I mean that it actually treats functions as first class uh uh citizens",
    "start": "291600",
    "end": "300479"
  },
  {
    "text": "it's also an object-oriented language and you you know we can get into arguments about this down the pub afterwards if you want to but for for my",
    "start": "300479",
    "end": "307080"
  },
  {
    "text": "money JavaScript is an object-oriented language and we can see that very very",
    "start": "307080",
    "end": "312520"
  },
  {
    "text": "simply because everything in JavaScript is based on objects now I can create an object very simply using something",
    "start": "312520",
    "end": "318280"
  },
  {
    "text": "called a JavaScript object literal um who's used Json okay so you'll know that Json",
    "start": "318280",
    "end": "323759"
  },
  {
    "text": "stands for JavaScript object notation um Json is a subset of what is valid",
    "start": "323759",
    "end": "330440"
  },
  {
    "text": "JavaScript object literal notation um so in Json you will generally see things like this where I have my little",
    "start": "330440",
    "end": "336319"
  },
  {
    "text": "squiggly brackets to represent a thing in my Json result and then I start well",
    "start": "336319",
    "end": "342600"
  },
  {
    "text": "I have an identifier called Fu which I give I use a string to do that and then I use a colon to separate the identifier",
    "start": "342600",
    "end": "348639"
  },
  {
    "text": "from the value so maybe my value fu is equal to one then I use a comma and I can go on and do my next value and I can",
    "start": "348639",
    "end": "354560"
  },
  {
    "text": "continue doing this um for the values that are that are in my object U and in",
    "start": "354560",
    "end": "359639"
  },
  {
    "text": "Bas on we can put these in arrays as well so I can use an array literal so I can surround this whole thing with",
    "start": "359639",
    "end": "365520"
  },
  {
    "text": "square brackets like this and you know even though my formatting is not great I can then you know copy this paste that",
    "start": "365520",
    "end": "372960"
  },
  {
    "text": "in there and now I have an array of two object literals using an array literal",
    "start": "372960",
    "end": "378560"
  },
  {
    "text": "to declare the array in the first place let's just undo all of that um now this is Json and Json says what you can and",
    "start": "378560",
    "end": "385440"
  },
  {
    "text": "can't put in this side of the on the left hand side of these uh of these name value pairs um but in JavaScript pure",
    "start": "385440",
    "end": "393000"
  },
  {
    "text": "JavaScript object literals you don't need to have these uh quotes here to denote the identifiers you can just uh",
    "start": "393000",
    "end": "399080"
  },
  {
    "text": "put the identifiers like such and there are certain identifiers that you are technically able to use in JavaScript",
    "start": "399080",
    "end": "405160"
  },
  {
    "text": "object leral that you're not allowed to use in Json things like reserve words and keywords that you can put in if you",
    "start": "405160",
    "end": "411400"
  },
  {
    "text": "you know do things like like this um while technically in in Json they",
    "start": "411400",
    "end": "416759"
  },
  {
    "text": "basically forbid that to to stop you getting yourself into trouble um and to be for compatible with versions of the",
    "start": "416759",
    "end": "423000"
  },
  {
    "text": "language but in JavaScript you can do those things and that's not a problem at all so this is a this thing o now is is",
    "start": "423000",
    "end": "429039"
  },
  {
    "text": "an object and if I hit o dot uh we can see that what I'm getting in uh Visual",
    "start": "429039",
    "end": "434319"
  },
  {
    "text": "Studio here is intellisense showing me that the members of O include those things that I just that that I just",
    "start": "434319",
    "end": "440360"
  },
  {
    "text": "declared on o um by by doing this subject literal my my Foo and my bar so that's all fine um but I can do other",
    "start": "440360",
    "end": "447720"
  },
  {
    "text": "things like well say I want to add another member like Alpha I can just go ahead and do that directly because we're",
    "start": "447720",
    "end": "453759"
  },
  {
    "text": "not talking about a statically typed language we're talking about an object based language where the objects are",
    "start": "453759",
    "end": "459400"
  },
  {
    "text": "basically just property bags dictionaries or hash tables whatever it is you want to call them they're things",
    "start": "459400",
    "end": "464560"
  },
  {
    "text": "that you can put identifiers on uh that there's there's a certain valid set of",
    "start": "464560",
    "end": "470720"
  },
  {
    "text": "characters you're allowed to use to build your identifiers and then the identifiers map to some type of value um",
    "start": "470720",
    "end": "475759"
  },
  {
    "text": "and this can be hierarchical so I could go ahead and if I went back to my literal I could put um I'll put Alpha on",
    "start": "475759",
    "end": "482080"
  },
  {
    "text": "here this time and I'll make this another object literal and so now I can put Alpha uh you know put me member",
    "start": "482080",
    "end": "488960"
  },
  {
    "text": "called Damian I can make that a function I'll zoom out again so we can see and we can build this object graph up uh as",
    "start": "488960",
    "end": "495919"
  },
  {
    "text": "easily as just declaring how we want it to look um but unlike Classical Languages where we define a class which",
    "start": "495919",
    "end": "502120"
  },
  {
    "text": "says this is how my objects that are based on this class are going to look and we compile that and that's what it",
    "start": "502120",
    "end": "507560"
  },
  {
    "text": "said in JavaScript you just do it you just write it this is the object this is what it is if I want to change it I can",
    "start": "507560",
    "end": "512880"
  },
  {
    "text": "do that that's fine um you can see I've declared Alpha here and then down here I've just change what Alpha is there's",
    "start": "512880",
    "end": "518479"
  },
  {
    "text": "nothing wrong with that um that's that's the nature of JavaScript so that's object literals but we can do um other",
    "start": "518479",
    "end": "525080"
  },
  {
    "text": "things with objects in JavaScript as well so so JavaScript uh despite not having classes and interfaces and being",
    "start": "525080",
    "end": "531480"
  },
  {
    "text": "uh and supporting classical inheritance it does have Constructors um and if anyone's read anyone read Douglas",
    "start": "531480",
    "end": "537680"
  },
  {
    "text": "crockford okay a couple of people and by the end of this I'll if I get time I'll will surely give you some links if you",
    "start": "537680",
    "end": "543519"
  },
  {
    "text": "want to learn more about JavaScript he is the the guy to read um Constructors are a bit of a blessing",
    "start": "543519",
    "end": "549880"
  },
  {
    "text": "and a curse in JavaScript I mean they're a necessary evil in the language in in the version that's widely supported",
    "start": "549880",
    "end": "556120"
  },
  {
    "text": "today in the the next version es5 you don't really need them anymore for doing a lot of things um but today if you want",
    "start": "556120",
    "end": "562640"
  },
  {
    "text": "to work uh with objects and have things like inheritance or what looks like inheritance uh then you need to use them",
    "start": "562640",
    "end": "569120"
  },
  {
    "text": "so uh Constructors aren't really special they're just other functions so I can say you know this is my we'll call this",
    "start": "569120",
    "end": "576000"
  },
  {
    "text": "my well let's do something a little more realistic this is my animal Constructor canonical o sort of a example um now the",
    "start": "576000",
    "end": "583720"
  },
  {
    "text": "thing that makes this a Constructor isn't anything that I do to the to do to the function declaration itself so far",
    "start": "583720",
    "end": "590480"
  },
  {
    "text": "it just looks like any other function but if I call this function and I uh use",
    "start": "590480",
    "end": "597399"
  },
  {
    "text": "the new keyword in front of its inv like such um what I get as a result of",
    "start": "597399",
    "end": "602800"
  },
  {
    "text": "invoking that is very different to what would have happened if I just called animal without the new keyword um what",
    "start": "602800",
    "end": "608959"
  },
  {
    "text": "the new keyword essentially does it says create me a new object that is based on",
    "start": "608959",
    "end": "614640"
  },
  {
    "text": "animals prototype which is something I haven't showed you yet based on animal's prototype and then run the animal",
    "start": "614640",
    "end": "621160"
  },
  {
    "text": "function um over that object and then give me the result now this is totally",
    "start": "621160",
    "end": "627160"
  },
  {
    "text": "different to how people who use things like Java and and C++ and c and those statically typed languages think about",
    "start": "627160",
    "end": "633640"
  },
  {
    "text": "Constructors so a lot of people when they see the new keyword in JavaScript and they're getting started and they've come from that classical language sort",
    "start": "633640",
    "end": "640440"
  },
  {
    "text": "of Paradigm either get confused or start using the new keyword in the wrong way",
    "start": "640440",
    "end": "646279"
  },
  {
    "text": "um it's also dangerous because if you write this animal uh Constructor this",
    "start": "646279",
    "end": "651959"
  },
  {
    "text": "function with the intent that it gets called this way then what you'll generally do is start using the this",
    "start": "651959",
    "end": "657360"
  },
  {
    "text": "keyword to refer to the new object that you're creating and you'll say well I wanted this you know when I create my animal I'm going to you know put this",
    "start": "657360",
    "end": "663959"
  },
  {
    "text": "dot breed is equal to something on it and I'm going to put uh this dot you know smells like equals to something",
    "start": "663959",
    "end": "670600"
  },
  {
    "text": "else on it and you think this is all fine and sure enough if I do f equals",
    "start": "670600",
    "end": "675880"
  },
  {
    "text": "new animal my f is going to have in fact I should be able to see that if I say F dot you'll see I now have an F do breed",
    "start": "675880",
    "end": "683560"
  },
  {
    "text": "and an F do smells like and everything is wonderful but if you forget uh to do this and if if I instead",
    "start": "683560",
    "end": "690320"
  },
  {
    "text": "do this by f equals animal bad things start happening um",
    "start": "690320",
    "end": "696720"
  },
  {
    "text": "instead of this referring to the object that I'm creating this now refers to Global scope and so what I've just done",
    "start": "696720",
    "end": "704160"
  },
  {
    "text": "is gone and put a breed member and a smells like member in the global scope which in my browser is my window object",
    "start": "704160",
    "end": "711279"
  },
  {
    "text": "which isn't really what I wanted to do so for this reason the the constructors",
    "start": "711279",
    "end": "716480"
  },
  {
    "text": "are generally noted as a bad part or a dangerous part of JavaScript and you have to be careful so one of the things",
    "start": "716480",
    "end": "721639"
  },
  {
    "text": "the conventions we do is we always capitalize Constructor functions this way we know when I'm reading my code",
    "start": "721639",
    "end": "728120"
  },
  {
    "text": "that if I see anything that looks like that where I've said f equals animal",
    "start": "728120",
    "end": "733199"
  },
  {
    "text": "some function that begins with capital and I don't see the new keyword I know immediately because I'm you know the the",
    "start": "733199",
    "end": "739000"
  },
  {
    "text": "human brain is a fantastic patent recognition machine that I I I forgotten to do something there and if you're",
    "start": "739000",
    "end": "744440"
  },
  {
    "text": "using something like JS lint that we heard about previously it will find these things for you as as well um if",
    "start": "744440",
    "end": "750199"
  },
  {
    "text": "you stick to the conventions that have been set up to do this type of stuff so um we can do that I mentioned uh this",
    "start": "750199",
    "end": "756160"
  },
  {
    "text": "prototype thing before so if I type animal down here and then uh go prototype what I can do here is say Well",
    "start": "756160",
    "end": "764199"
  },
  {
    "text": "when a new object is created using the animal constructive function I wanted to",
    "start": "764199",
    "end": "771000"
  },
  {
    "text": "have um these members other than just the members that I'm defining in the Constructor itself I",
    "start": "771000",
    "end": "778240"
  },
  {
    "text": "wanted to inherit a bunch of stuff from this thing this thing called prototype",
    "start": "778240",
    "end": "783720"
  },
  {
    "text": "now this is at the very core of how JavaScript objects work um and uh crockford calls this prototypical",
    "start": "783720",
    "end": "789519"
  },
  {
    "text": "inheritance so it's not really inheritance it's it's it's more correctly described as behavioral",
    "start": "789519",
    "end": "795440"
  },
  {
    "text": "delegation because the way it works is that we don't actually the new animal",
    "start": "795440",
    "end": "800560"
  },
  {
    "text": "object F isn't actually getting the members that I Define in here so if I I Define a member in here uh you know a",
    "start": "800560",
    "end": "808040"
  },
  {
    "text": "function like such and maybe I defined something else in here as a string um f",
    "start": "808040",
    "end": "814240"
  },
  {
    "text": "isn't actually getting Member One and member two on itself like you would get in a classical language where you define",
    "start": "814240",
    "end": "820880"
  },
  {
    "text": "a a hierarchy of classes which inherit from each other you create a new instance and you know essentially",
    "start": "820880",
    "end": "826240"
  },
  {
    "text": "everything is on that and never you never go back to the class you're now working with the object that was built from those class definitions with",
    "start": "826240",
    "end": "831959"
  },
  {
    "text": "JavaScript What's Happening Here is it saying well because it's all Dynamic when I refer to Member One at run time",
    "start": "831959",
    "end": "838720"
  },
  {
    "text": "what script is going to do is go okay well does the F object have Member One well no it doesn't because it wasn't",
    "start": "838720",
    "end": "844560"
  },
  {
    "text": "added in the Constructor and I didn't add it to myself immediately to the to the object after I created it but then",
    "start": "844560",
    "end": "851440"
  },
  {
    "text": "what I'll do is if if I don't find that let me go and have a look at animals prototype or this member's prototype and",
    "start": "851440",
    "end": "857079"
  },
  {
    "text": "see if it has that member that's being asked for and it will keep going up the prototypical chain because a prototype",
    "start": "857079",
    "end": "862839"
  },
  {
    "text": "can itself have prototypes until it either finds a member or it gets to the",
    "start": "862839",
    "end": "868399"
  },
  {
    "text": "root of the of Global scope and doesn't find anything anymore and at that point you'll get an undefined uh depending on how you're using that identifier um so",
    "start": "868399",
    "end": "876440"
  },
  {
    "text": "again prototypical inherence uh you don't need to know a lot about that to use jQuery but this is how jQuery is",
    "start": "876440",
    "end": "882000"
  },
  {
    "text": "built um under underneath the core um and if you're going to start doing any complex JavaScript applications um",
    "start": "882000",
    "end": "889120"
  },
  {
    "text": "sometimes you will find uh you might find this tool is something that you'd like to have in your belt um if you're",
    "start": "889120",
    "end": "894399"
  },
  {
    "text": "used to doing inherited uh you know inheritance and and object-oriented type things in JavaScript um so let's move on",
    "start": "894399",
    "end": "901560"
  },
  {
    "text": "to the next things scope enclosures um if you are used to working with a c type",
    "start": "901560",
    "end": "907279"
  },
  {
    "text": "language um you will be used to uh variable scope being block scope and by",
    "start": "907279",
    "end": "913120"
  },
  {
    "text": "that what I mean is that uh if I do something like this and I declare a variable in",
    "start": "913120",
    "end": "919040"
  },
  {
    "text": "here and this function is itself a block so the v i shouldn't appear outside this",
    "start": "919040",
    "end": "925040"
  },
  {
    "text": "block and everything is fine uh if I then do something like uh v j is equal to zero where J is less",
    "start": "925040",
    "end": "932920"
  },
  {
    "text": "than or equal to 10 um and I want to j++ each each time so this four itself is a",
    "start": "932920",
    "end": "939720"
  },
  {
    "text": "block and you would expect that if I declare something in here that X is only",
    "start": "939720",
    "end": "945519"
  },
  {
    "text": "visible with inside that block because that's how C languages generally work well in JavaScript that doesn't work in JavaScript uh scope is function level",
    "start": "945519",
    "end": "953000"
  },
  {
    "text": "scope so X is actually visible outside and you can see that the editor here is",
    "start": "953000",
    "end": "958079"
  },
  {
    "text": "telling me that because I'm getting statement completion for X inside this function if I jump down inside outside",
    "start": "958079",
    "end": "963880"
  },
  {
    "text": "that function uh we don't know what x is anymore because the editor is actually executing the JavaScript so it's just a",
    "start": "963880",
    "end": "969680"
  },
  {
    "text": "good tool for demonstrating what's going on now this is one of the things that a lot trips a lot of web developers up",
    "start": "969680",
    "end": "975079"
  },
  {
    "text": "when they start using JavaScript you in Anger um when they come from a c language because everything appears to",
    "start": "975079",
    "end": "981399"
  },
  {
    "text": "work for the first few weeks and then you'll get your first bug that's caused by this scoping problem um so it's well",
    "start": "981399",
    "end": "988600"
  },
  {
    "text": "worth knowing that scope is function in JavaScript now okay so that that may be",
    "start": "988600",
    "end": "994079"
  },
  {
    "text": "seen as a bad part but it also has you know we can work around it quite easily um we can work around it using closures",
    "start": "994079",
    "end": "1000959"
  },
  {
    "text": "and we can work around it using uh immediately executing Anonymous functions now that's a really long word",
    "start": "1000959",
    "end": "1006040"
  },
  {
    "text": "uh or lots of words um but what I'll explain what I mean by that so if if",
    "start": "1006040",
    "end": "1011199"
  },
  {
    "text": "scope is function level and I mentioned before about polluting the global scope",
    "start": "1011199",
    "end": "1016600"
  },
  {
    "text": "now when you when you do something wrong now polluting the scope is wrong and bad for for lots of different reasons uh one",
    "start": "1016600",
    "end": "1022480"
  },
  {
    "text": "of the main reasons is that in the browser you can't always guarantee that the JavaScript that's running in the browser is yours um a lot of the times",
    "start": "1022480",
    "end": "1030079"
  },
  {
    "text": "you're pulling in libraries from lots of different places you may have the user running script monkey or something wacky",
    "start": "1030079",
    "end": "1035400"
  },
  {
    "text": "like that you might be using plugins and you have to ensure that these things don't Clash now if all of these scripts",
    "start": "1035400",
    "end": "1041760"
  },
  {
    "text": "are trying to use Global scope they're declaring members in global scope inevitably you're going to end up in the",
    "start": "1041760",
    "end": "1047360"
  },
  {
    "text": "situation where two scripts are declaring the same identifier in global scope and you get a a a collision what",
    "start": "1047360",
    "end": "1054400"
  },
  {
    "text": "we call a collision and then they are very very hard bug to find so what we generally uh recommend people do is you",
    "start": "1054400",
    "end": "1061360"
  },
  {
    "text": "never do what I'm doing here you never ever declare a function in in the root of your Javascript file U and if you're",
    "start": "1061360",
    "end": "1067799"
  },
  {
    "text": "in a a document like this and you had a text block like sorry a JavaScript block like this you would never ever do what",
    "start": "1067799",
    "end": "1073760"
  },
  {
    "text": "I'm doing here either you would never declare a function like this so how do we get around that well we can use these",
    "start": "1073760",
    "end": "1079159"
  },
  {
    "text": "an immediately executing Anonymous functions to do this so all I'm going to do is create an anonymous function",
    "start": "1079159",
    "end": "1085320"
  },
  {
    "text": "that's a function with no name like this and then what I'm going to do is I'm going to immediately execute it by",
    "start": "1085320",
    "end": "1091360"
  },
  {
    "text": "following it with the invocation characters you know open parenthesis close parenthesis and then to show that",
    "start": "1091360",
    "end": "1096880"
  },
  {
    "text": "I'm doing something special here I'm going to wrap because although syntactically this is correct in",
    "start": "1096880",
    "end": "1102480"
  },
  {
    "text": "JavaScript it kind of looks funky and we want to we want to make it much easier",
    "start": "1102480",
    "end": "1108080"
  },
  {
    "text": "for me as the developer when I'm reading my code to see that this is what I meant to do and so I'm going to wrap the whole",
    "start": "1108080",
    "end": "1114320"
  },
  {
    "text": "thing in parenthesis which you can do pretty much anywhere in JavaScript you can just W",
    "start": "1114320",
    "end": "1119360"
  },
  {
    "text": "wrap stuff in parenthesis and you can just logically group it and it doesn't really have any effect on the scope or execution so now what's going to happen",
    "start": "1119360",
    "end": "1127000"
  },
  {
    "text": "is that anything inside of this function obviously is only scoped um to this function because variables in JavaScript",
    "start": "1127000",
    "end": "1134320"
  },
  {
    "text": "a function scope so I can now safely put whatever I like inside of this function",
    "start": "1134320",
    "end": "1139640"
  },
  {
    "text": "and as long as I'm declaring it with the VAR keyword it'll stay in the scope of this function now you can do stuff like",
    "start": "1139640",
    "end": "1146440"
  },
  {
    "text": "this accidentally where you say I equals test hey I'm inside I'm inside an anonymous function everything's fine and",
    "start": "1146440",
    "end": "1153120"
  },
  {
    "text": "what you'll find is that um these things can leak out because if you if you declare if you forget to to declare it",
    "start": "1153120",
    "end": "1158919"
  },
  {
    "text": "with a V then things can leak out depending on how you're using these functions um if you want to pass stuff",
    "start": "1158919",
    "end": "1164600"
  },
  {
    "text": "into this function now bear in mind you can still get to the global scope if I do this dot inside of here this is still",
    "start": "1164600",
    "end": "1171039"
  },
  {
    "text": "the global scope so you can see I've got all my sort of I I get alert so that's you know this is equal to the global",
    "start": "1171039",
    "end": "1176720"
  },
  {
    "text": "scope which is equal to window um so you can still get to Global scope but what's",
    "start": "1176720",
    "end": "1183159"
  },
  {
    "text": "generally done instead is you want to pass in the things that you want to use inside of here rather than relying on",
    "start": "1183159",
    "end": "1188480"
  },
  {
    "text": "the fact that you've got Global scope access so if I want the window I could just pass in the window object and then",
    "start": "1188480",
    "end": "1194000"
  },
  {
    "text": "you know pass it in as W and now W in here is going to be equal to window and if you look at the jQuery Source you'll",
    "start": "1194000",
    "end": "1200480"
  },
  {
    "text": "see that the entire jQuery file is wrapped in one of these and they pass in window um and then they pass in",
    "start": "1200480",
    "end": "1206919"
  },
  {
    "text": "something else uh well they don't pass it in but they declare it as a parameter um which",
    "start": "1206919",
    "end": "1212880"
  },
  {
    "text": "is kind of cool and if you're getting into Advan JavaScript you can read up on why they do this type of stuff um my",
    "start": "1212880",
    "end": "1217960"
  },
  {
    "text": "understanding is it's done for minification purposes it lets them use rather than relying on the undefined keyword they can just rely on this this",
    "start": "1217960",
    "end": "1224520"
  },
  {
    "text": "is now a parameter identifier it's not the undefined keyword and so I can when I Minify this JavaScript undefined could",
    "start": "1224520",
    "end": "1231120"
  },
  {
    "text": "safely be turned into U um and because it's not passed in here you will be equal to undefined because the parameter",
    "start": "1231120",
    "end": "1237679"
  },
  {
    "text": "was never actually passed in so you can do kind of cool things like that but the the the Crux of this lesson is that to",
    "start": "1237679",
    "end": "1243159"
  },
  {
    "text": "avoid polluting the global scope you want to use these anonymously executing uh Anonymous immediately executing",
    "start": "1243159",
    "end": "1249280"
  },
  {
    "text": "functions now when we get to jQuery we'll find there's a slightly easier way we can do this and we'll have a look at that in a moment lastly one of the",
    "start": "1249280",
    "end": "1256080"
  },
  {
    "text": "things I wanted to talk about is uh this",
    "start": "1256080",
    "end": "1260600"
  },
  {
    "text": "and I better hurry up because they're coming to get me um so the this is where it gets difficult because now I'm going",
    "start": "1261320",
    "end": "1267520"
  },
  {
    "text": "to talk about this and I want to use the word this to explain this um so bear with me I will get there um this is a",
    "start": "1267520",
    "end": "1277320"
  },
  {
    "text": "keyword in JavaScript you can see it's blue here um representing the fact it's a keyword and if I'm inside a function",
    "start": "1277320",
    "end": "1285720"
  },
  {
    "text": "inside my classic food function and I'm refer and this function is in the global scope or it's just a function that",
    "start": "1285720",
    "end": "1291080"
  },
  {
    "text": "exists anywhere like this then by default this the keyword maps to the",
    "start": "1291080",
    "end": "1297159"
  },
  {
    "text": "global scope which in the browser is the window object that's great that's fine um I",
    "start": "1297159",
    "end": "1304320"
  },
  {
    "text": "said before that if a f if the function was a Constructor so if I capitalize it",
    "start": "1304320",
    "end": "1309760"
  },
  {
    "text": "and then I call it uh using the new",
    "start": "1309760",
    "end": "1314840"
  },
  {
    "text": "keyword then this no longer refers to Global scope uh this refers to the object that you're",
    "start": "1314840",
    "end": "1321559"
  },
  {
    "text": "constructing with this Constructor function so this mutates depending on",
    "start": "1321559",
    "end": "1327440"
  },
  {
    "text": "how you call the function it doesn't depend on how you declare the function this is not a static Declaration of what",
    "start": "1327440",
    "end": "1334480"
  },
  {
    "text": "this is it all depends on who calls you so that may sound scary because you go",
    "start": "1334480",
    "end": "1341520"
  },
  {
    "text": "well I'm going to write my function making an assumption of what this is but anyone else could call it and then this could become b instead of this and then",
    "start": "1341520",
    "end": "1348679"
  },
  {
    "text": "my function won't work anymore and yes technically that is true but most of the time you're going to be uh know in",
    "start": "1348679",
    "end": "1354840"
  },
  {
    "text": "charge of what's calling your JavaScript anyway um and it's it's generally just not a problem you have to worry about so",
    "start": "1354840",
    "end": "1360559"
  },
  {
    "text": "that's two ways we can make uh this do something different the other one is that we can arbitrarily change what this",
    "start": "1360559",
    "end": "1368279"
  },
  {
    "text": "becomes so let's create a function called uh hello in fact I think I have a",
    "start": "1368279",
    "end": "1373480"
  },
  {
    "text": "sample of this already I do so let's have a function called Fu which is going to alert",
    "start": "1373480",
    "end": "1379240"
  },
  {
    "text": "this do high now by default this function the this keyword is going to refer to Global",
    "start": "1379240",
    "end": "1386240"
  },
  {
    "text": "scope because it's just a function on its own in the global scope in my script block but what I'm doing down here is",
    "start": "1386240",
    "end": "1392440"
  },
  {
    "text": "using uh the call method that's available on all functions in JavaScript now I didn't mention before I said",
    "start": "1392440",
    "end": "1398600"
  },
  {
    "text": "JavaScript is object oriented and JavaScript has great function support functions are objects in JavaScript",
    "start": "1398600",
    "end": "1404320"
  },
  {
    "text": "they're functions and they're objects so if I type food dot you'll see that Foo itself has members because it's not only",
    "start": "1404320",
    "end": "1411919"
  },
  {
    "text": "a function that I can invoke by going Foo open parns it's a fun it's an object",
    "start": "1411919",
    "end": "1416960"
  },
  {
    "text": "that has its own members by going Fu Dot and the Prototype that Fu inherits from",
    "start": "1416960",
    "end": "1422440"
  },
  {
    "text": "is the core function object in JavaScript and that's why I have a bunch of these methods here one of those",
    "start": "1422440",
    "end": "1428000"
  },
  {
    "text": "methods is is the call method so I can call a function by calling its call",
    "start": "1428000",
    "end": "1434520"
  },
  {
    "text": "function by and then I can pass into to that call function whatever it is I want",
    "start": "1434520",
    "end": "1439760"
  },
  {
    "text": "to be this whatever it is I can just make it up so in this case what I'm doing is I'm going to call Food twice",
    "start": "1439760",
    "end": "1447159"
  },
  {
    "text": "and in the first instance I'm going to pass in an object literal so this is what these little squiggly braces are remember and it's an object literal that",
    "start": "1447159",
    "end": "1454039"
  },
  {
    "text": "has a single member on it called high which is what I'm referring to in my uh my function here and in the first",
    "start": "1454039",
    "end": "1459760"
  },
  {
    "text": "instance it's a string called test in the second instance it's a number uh 1 2",
    "start": "1459760",
    "end": "1464880"
  },
  {
    "text": "3 so if I look at this in my browser now what we should see is I get",
    "start": "1464880",
    "end": "1470679"
  },
  {
    "text": "test okay and then I hit okay and I get one two three and chrome telling me that",
    "start": "1470679",
    "end": "1476720"
  },
  {
    "text": "I'm doing bad things because I keep popping belotes um so you can see how this is mutating very very simply and",
    "start": "1476720",
    "end": "1482960"
  },
  {
    "text": "again this is really important because jQuery exploits this so that um they can reuse this keyword in JavaScript um",
    "start": "1482960",
    "end": "1491000"
  },
  {
    "text": "depending on how you're using functions inside jqu so without further Ado let's",
    "start": "1491000",
    "end": "1496039"
  },
  {
    "text": "that's our JavaScript fundamentals over anyone have any questions on that before I jump into the jQuery yes did you skip",
    "start": "1496039",
    "end": "1504080"
  },
  {
    "text": "closures I did thank you very much and you know why I skipped closures because I hate trying to explain",
    "start": "1504080",
    "end": "1511279"
  },
  {
    "text": "them closures are one of those um closures are one of those things that uh",
    "start": "1511399",
    "end": "1518399"
  },
  {
    "text": "i' I've tried to explain it in talks like this over and over and over again I still haven't boiled it down to a really succinct phrase I think the",
    "start": "1518399",
    "end": "1525360"
  },
  {
    "text": "documentation on jcy actually has on the site somewhere one nice little paragraph that John wrote about what a closure is",
    "start": "1525360",
    "end": "1531600"
  },
  {
    "text": "and I should just remember that wrote but I I never do so essentially a closure is a function that references a",
    "start": "1531600",
    "end": "1539480"
  },
  {
    "text": "variable that is not contained within its own immediate scope I'll say that again a closure is a function for a",
    "start": "1539480",
    "end": "1547000"
  },
  {
    "text": "start that references a variable that isn't contained within its own immediate scope so let's have a look why what what",
    "start": "1547000",
    "end": "1554200"
  },
  {
    "text": "I mean by that let me uh get rid of these other this noise down here",
    "start": "1554200",
    "end": "1560200"
  },
  {
    "text": "okay so let's create a function and outside of this function",
    "start": "1560279",
    "end": "1566120"
  },
  {
    "text": "let's declare um a variable that isn't within the immediate scope of that function so when I say the",
    "start": "1566120",
    "end": "1572080"
  },
  {
    "text": "immediate scope I mean this scope inside here we have function scope so everything inside the",
    "start": "1572080",
    "end": "1577200"
  },
  {
    "text": "function is within the same scope because it's function scope this thing is not inside the function so I I can't",
    "start": "1577200",
    "end": "1583159"
  },
  {
    "text": "really get to it um but I can get to it okay because this function exists in the",
    "start": "1583159",
    "end": "1590360"
  },
  {
    "text": "same scope as this so I can say my VAR and I can see that everything's fine",
    "start": "1590360",
    "end": "1595559"
  },
  {
    "text": "everything's good so far fu is in the same scope as my VAR so the contents of Vu Fu can see my V that's fine so but",
    "start": "1595559",
    "end": "1603640"
  },
  {
    "text": "then what I can do is say okay I'm going to return another function this is the easiest way to to demonstrate this I'm going to return a new function and from",
    "start": "1603640",
    "end": "1611159"
  },
  {
    "text": "within that function I'm going to reference my v no I'm not going to do that let's do",
    "start": "1611159",
    "end": "1617240"
  },
  {
    "text": "it a different way I'm going to cleare another another uh variable in here",
    "start": "1617240",
    "end": "1623840"
  },
  {
    "text": "Aha and we'll get rid of this one this makes it easier to demonstrate and inside this one I'm going to uh",
    "start": "1623840",
    "end": "1629360"
  },
  {
    "text": "reference I'm going to return the value of my v.2 string that's a better okay and let me",
    "start": "1629360",
    "end": "1636559"
  },
  {
    "text": "just format that so it's easier to read okay so what have we got here I've",
    "start": "1636559",
    "end": "1643320"
  },
  {
    "text": "got a function Fu that itself is returning a function inside the scope of Fu I have a",
    "start": "1643320",
    "end": "1649159"
  },
  {
    "text": "variable called myar and then the function that it's returning references this myar",
    "start": "1649159",
    "end": "1656240"
  },
  {
    "text": "variable as the return result now this kind of looks you go okay fine big deal what's the big what's the big problem",
    "start": "1656240",
    "end": "1662200"
  },
  {
    "text": "here you go okay well what happens at runtime when I execute Fu any language",
    "start": "1662200",
    "end": "1668679"
  },
  {
    "text": "Geeks compiler Geeks runtime Geeks will go okay well fu is going to get invoked I'm going to build up a call stack for",
    "start": "1668679",
    "end": "1674600"
  },
  {
    "text": "Fu my VAR is now inside there that's fine and I'm going to return this function okay well I'm going to return a",
    "start": "1674600",
    "end": "1681399"
  },
  {
    "text": "function that contains my v.2 string now this isn't going to get evaluated at that point because what we're returning",
    "start": "1681399",
    "end": "1687640"
  },
  {
    "text": "is this value the function value function is a first class thing inside JavaScript so it's going to it's not",
    "start": "1687640",
    "end": "1693000"
  },
  {
    "text": "going to evaluate that it's just going to return the functions so it can get executed later and then the function",
    "start": "1693000",
    "end": "1699000"
  },
  {
    "text": "exits so any scope inside that function any stack is torn down and and it ceases",
    "start": "1699000",
    "end": "1704760"
  },
  {
    "text": "to exist right because the function is returned I'm now gone so what then happen say I assigned the",
    "start": "1704760",
    "end": "1711200"
  },
  {
    "text": "result of calling food to a variable called my funk so my funk is now equal",
    "start": "1711200",
    "end": "1716640"
  },
  {
    "text": "to this function and then I want to invoke my funk what happens at that",
    "start": "1716640",
    "end": "1722000"
  },
  {
    "text": "point well now it's going to go and evaluate this line and you see the",
    "start": "1722000",
    "end": "1727159"
  },
  {
    "text": "problem now my VAR doesn't exist anymore my VAR only existed in the scope of Fu",
    "start": "1727159",
    "end": "1732799"
  },
  {
    "text": "which is now returned the reason this worked is because of closure the fu well",
    "start": "1732799",
    "end": "1738480"
  },
  {
    "text": "the inside function this Anonymous function here is said to close over the",
    "start": "1738480",
    "end": "1743880"
  },
  {
    "text": "myar variable which was defined outside of its immediate scope and it will continue to live on as long as this",
    "start": "1743880",
    "end": "1750840"
  },
  {
    "text": "function lives on somewhere in memory in the stack somewhere and in this case it's living on because it's assigned to",
    "start": "1750840",
    "end": "1757480"
  },
  {
    "text": "my funk and as soon as that thing disappears then the closure goes away and everything inside of it goes away",
    "start": "1757480",
    "end": "1763120"
  },
  {
    "text": "with it okay now this may look like a trivial example um but when we look at",
    "start": "1763120",
    "end": "1769039"
  },
  {
    "text": "event handling in JavaScript and jQuery in particular this becomes really really important because it's really built on",
    "start": "1769039",
    "end": "1774320"
  },
  {
    "text": "the concept of closures any other questions how do you get rid of it right so when the closure",
    "start": "1774320",
    "end": "1781279"
  },
  {
    "text": "falls out of scope via so now that this closure Foo the result of Foo is a function that is a closure it's assigned",
    "start": "1781279",
    "end": "1787159"
  },
  {
    "text": "to my funk when my funk disappears for whatever reason because it falls out of scope it's no longer there then the",
    "start": "1787159",
    "end": "1793279"
  },
  {
    "text": "closure just goes away garbage collection will take care of it the JavaScript run time will do its clean up okay so let's get back into jQuery then",
    "start": "1793279",
    "end": "1800840"
  },
  {
    "text": "I could talk about JavaScript all night um but jQuery is what we here to learn about okay so the hello world of jQuery",
    "start": "1800840",
    "end": "1807360"
  },
  {
    "text": "I have an HTML page um in which I have a reference to jQuery at the bottom yay um",
    "start": "1807360",
    "end": "1814120"
  },
  {
    "text": "and then I have some script at the bottom there um and what I'm going to do is I want to push hello world into this",
    "start": "1814120",
    "end": "1819760"
  },
  {
    "text": "page so I'm going to use the zoom up a bit I'm going to use the Java the",
    "start": "1819760",
    "end": "1825399"
  },
  {
    "text": "jQuery I'm going to use the word Constructor um but it's kind of a I shouldn't really",
    "start": "1825399",
    "end": "1830679"
  },
  {
    "text": "but it's just easier to refer to this as the jQuery Constructor um the jQuery Constructor you can invoke just by",
    "start": "1830679",
    "end": "1837120"
  },
  {
    "text": "typing jQuery um but no one does that everyone uses the dollar shortcut",
    "start": "1837120",
    "end": "1842840"
  },
  {
    "text": "because that's cooler and it's less characters um so jQuery and then inside this I'm going to pass a function say",
    "start": "1842840",
    "end": "1849200"
  },
  {
    "text": "whoa whoa hang on function okay so here we're starting to see those things that I've just been talking about come to",
    "start": "1849200",
    "end": "1854960"
  },
  {
    "text": "action already the jQuery Constructor will mutate Its Behavior based on what you pass into it um another thing about",
    "start": "1854960",
    "end": "1862880"
  },
  {
    "text": "JavaScript I didn't talk about is that there are no function overloads in JavaScript um in objectoriented",
    "start": "1862880",
    "end": "1868000"
  },
  {
    "text": "languages that are statically typed you might be used to going well function Fu when it takes one parameter is this and when function Fu takes two parameters it",
    "start": "1868000",
    "end": "1875200"
  },
  {
    "text": "is this that doesn't exist in JavaScript because objects in JavaScript including function members are just an identifier",
    "start": "1875200",
    "end": "1881679"
  },
  {
    "text": "and a value you can't have the identifier twice mean different things so the way that you do function",
    "start": "1881679",
    "end": "1886840"
  },
  {
    "text": "overloads is you you say you know function f P1 P2 and then you just if",
    "start": "1886840",
    "end": "1893080"
  },
  {
    "text": "you wanted to do something when only P1 is there you just check for the existence of P2 and if P2 is there and",
    "start": "1893080",
    "end": "1899679"
  },
  {
    "text": "you do something and if P if it's not there then do something else um and now it's not just if it's there or not you",
    "start": "1899679",
    "end": "1905360"
  },
  {
    "text": "can check its type or if it's all a string you can investigate the string and basically you can mutate what fu is",
    "start": "1905360",
    "end": "1911639"
  },
  {
    "text": "going to do based on what gets passed into it and if even if you don't declare the parameters you can get to the",
    "start": "1911639",
    "end": "1917279"
  },
  {
    "text": "parameters because JavaScript has a uh Reserve word called arguments that represents everything that was passed",
    "start": "1917279",
    "end": "1923080"
  },
  {
    "text": "into this function when it was invoked even if I didn't declare them in the function signature very very cool stuff",
    "start": "1923080",
    "end": "1928399"
  },
  {
    "text": "so J crew uses this so you can call the J crew Constructor with a whole bunch of different parameters and the one I'm",
    "start": "1928399",
    "end": "1933720"
  },
  {
    "text": "showing you now as a function if you pass a function into the jQuery Constructor what it will do is run that",
    "start": "1933720",
    "end": "1939559"
  },
  {
    "text": "function when the Dom is ready to be manipulated when the document ready event is fired what you'll generally see",
    "start": "1939559",
    "end": "1945960"
  },
  {
    "text": "most introduction uh tutorials do is this they'll pass in the document object",
    "start": "1945960",
    "end": "1952080"
  },
  {
    "text": "and then they'll use the ready function to wire this up U and then you just just",
    "start": "1952080",
    "end": "1957360"
  },
  {
    "text": "so much more typing really I mean why did you have to do all of that when I could just do that right so now any time",
    "start": "1957360",
    "end": "1963240"
  },
  {
    "text": "you see that just delete it and do that instead right it's less characters it's much better for the environment",
    "start": "1963240",
    "end": "1970880"
  },
  {
    "text": "so so this is going to execute when it's safe you don't want to be executing stuff before the Dom is finished loading",
    "start": "1971000",
    "end": "1977399"
  },
  {
    "text": "why what happens if you try and manipulate the Dom before it's finished loading yeah it does different things depending on what version of the browser",
    "start": "1977399",
    "end": "1983440"
  },
  {
    "text": "and what browser you're in but it's just bad in general I6 will actually crash in a lot of circumstances cuz that's what",
    "start": "1983440",
    "end": "1988919"
  },
  {
    "text": "I6 does best and so you really don't want to do this um make sure that you're",
    "start": "1988919",
    "end": "1994360"
  },
  {
    "text": "always doing your code inside here the other advantage of doing this has anyone spotted what the other Advantage is if",
    "start": "1994360",
    "end": "2000799"
  },
  {
    "text": "we go back to here and we look at this thing where did I did I keep it I deleted it that was clever wasn't it",
    "start": "2000799",
    "end": "2007880"
  },
  {
    "text": "I've protected the scope excellent give that man a cookie I have protected the scope anything I declare inside here",
    "start": "2007880",
    "end": "2014840"
  },
  {
    "text": "only exists within this function because I have function scope I'm not polluting Global scope now J cury as a library",
    "start": "2014840",
    "end": "2021480"
  },
  {
    "text": "will never pollute the the global scope except obviously for the jQuery member itself obviously dollar has to exist on",
    "start": "2021480",
    "end": "2027320"
  },
  {
    "text": "the window object so you can call it um but you should be able to do everything inside of here and never have to have",
    "start": "2027320",
    "end": "2033039"
  },
  {
    "text": "stuff outside of here if you have stuff outside of here then you know I can't help you you do it inside here things",
    "start": "2033039",
    "end": "2039039"
  },
  {
    "text": "are much safer now that we're inside here let's actually do our hello world so what I want to do is I want to find",
    "start": "2039039",
    "end": "2044159"
  },
  {
    "text": "the body tag which I do now I'm passing a string in I'm not passing a function in I'm passing a string when you pass a",
    "start": "2044159",
    "end": "2050638"
  },
  {
    "text": "string into JC it says oh this must be a CSS selector I'm going to invoke that wonderful Sizzle CSS selector engine",
    "start": "2050639",
    "end": "2057358"
  },
  {
    "text": "that we heard about before and find all the elements that match this selector now in this case there's only one",
    "start": "2057359",
    "end": "2063158"
  },
  {
    "text": "element that matches the body tag so what I'm going to get is a jery collection with one element in it and",
    "start": "2063159",
    "end": "2068679"
  },
  {
    "text": "then to that to that collection I'm going to append some stuff by calling the append method and in this case all I",
    "start": "2068679",
    "end": "2075158"
  },
  {
    "text": "want to do is append hello world so I'm just going to uh literally type that in we'll view that in the",
    "start": "2075159",
    "end": "2081480"
  },
  {
    "text": "browser and what we should see is Hello World the world is happy now I can also",
    "start": "2081480",
    "end": "2088040"
  },
  {
    "text": "type HTML in here and if I F5 jQuery was clever enough to figure",
    "start": "2088040",
    "end": "2095720"
  },
  {
    "text": "out not only is this a string that passed in but it's a string that looks like HTML and so it's actually passed",
    "start": "2095720",
    "end": "2101520"
  },
  {
    "text": "that into Dom elements and then injected it and escaped it uh correctly for me into the Dom um which is really really",
    "start": "2101520",
    "end": "2108320"
  },
  {
    "text": "cool as well because if you try and do this using the raw Dom API you will have blood on your fingers before you finish",
    "start": "2108320",
    "end": "2113680"
  },
  {
    "text": "typing it all out um so that is our hello world of jqu very very very simple",
    "start": "2113680",
    "end": "2118720"
  },
  {
    "text": "thing to do let's move on to selectors so I left that with when you pass in a",
    "start": "2118720",
    "end": "2123920"
  },
  {
    "text": "string to the jQuery Constructor it assumes that what you're passing in is a Lector um now if you want to be a great",
    "start": "2123920",
    "end": "2129960"
  },
  {
    "text": "jQuery developer you really need to brush up on your CSS selectors but don't worry because as soon as you start",
    "start": "2129960",
    "end": "2135960"
  },
  {
    "text": "writing jQuery and you look at jQuery samples you'll just start absorbing CSS",
    "start": "2135960",
    "end": "2141040"
  },
  {
    "text": "selector goodness because that's really where the power of jQuery comes in the fact that it lets you find stuff in your",
    "start": "2141040",
    "end": "2147000"
  },
  {
    "text": "document using the wonderful wonderful CSS selector language if you don't like CSS then you know get out of the last",
    "start": "2147000",
    "end": "2153480"
  },
  {
    "text": "century and get into here cuz that's where it's really really at CSS selector language is perfect uh the perfect",
    "start": "2153480",
    "end": "2159760"
  },
  {
    "text": "language for expressing um a statement that says go find me stuff in the Dom",
    "start": "2159760",
    "end": "2165520"
  },
  {
    "text": "that matches this and doing it succinctly yes so let's have a look at different type of selectors so the first one I showed you was you fairly obvious",
    "start": "2165520",
    "end": "2172440"
  },
  {
    "text": "I just want to find uh elements that uh are of a particular type so before I do that I've got a basic document here I've",
    "start": "2172440",
    "end": "2179079"
  },
  {
    "text": "got some divs uls some anchor tags some spans um I got class attributes set on",
    "start": "2179079",
    "end": "2184880"
  },
  {
    "text": "some I got some anchors i' got some P's so let's say let me find all the anchor tags and then uh once I've got that",
    "start": "2184880",
    "end": "2191800"
  },
  {
    "text": "collection all I'm going to do for the purpose of this demo is add a CSS class and I've I've actually declared a class",
    "start": "2191800",
    "end": "2197960"
  },
  {
    "text": "at the top of this file called highlight so we can see that when stuff's been applied to it so find me all the anchor",
    "start": "2197960",
    "end": "2203200"
  },
  {
    "text": "tags and then add the CSS class highlight to them so if we look at that in my browser and I have it a five then",
    "start": "2203200",
    "end": "2211480"
  },
  {
    "text": "we can see that it's found all the anchor tags and it's highlighted them by adding the CSS class highlight that's pretty easy let's do something different",
    "start": "2211480",
    "end": "2219040"
  },
  {
    "text": "what about class well if you know what CS if you know your CSS selectors you'll know that you use the dot the full stop",
    "start": "2219040",
    "end": "2225400"
  },
  {
    "text": "to uh denote the fact that you're looking for a class and then you put the class name and I think I have a class",
    "start": "2225400",
    "end": "2230720"
  },
  {
    "text": "name Foo in here so if we go back now and hit Refresh on this um I've got a couple of elements that have a uh class",
    "start": "2230720",
    "end": "2237560"
  },
  {
    "text": "name of Fu here I've got a span and here I have the whole Li so it's found both of those nicely for me if I want to find",
    "start": "2237560",
    "end": "2244119"
  },
  {
    "text": "something by ID I can use the hash or or pound or whatever you call it in your",
    "start": "2244119",
    "end": "2249680"
  },
  {
    "text": "Woods uh neck of the woods um to find something by ID and if I remember correctly I have something up here",
    "start": "2249680",
    "end": "2255839"
  },
  {
    "text": "called nav so I can change this to say find me the thing with an ID of nav and",
    "start": "2255839",
    "end": "2260920"
  },
  {
    "text": "hit F5 and now I found that first UL because I gave that an idea of uh nav and now",
    "start": "2260920",
    "end": "2267440"
  },
  {
    "text": "that's all the simple ones and but jQuery actually supports a whole bunch of uh much more complex selectors um",
    "start": "2267440",
    "end": "2273400"
  },
  {
    "text": "commonly referred to as CSS 3 selectors um or even CSS 2.1 selector for that matter uh it's just that you know IE",
    "start": "2273400",
    "end": "2279760"
  },
  {
    "text": "didn't get them until I 7 or8 so if we do something like let me find all the a",
    "start": "2279760",
    "end": "2285119"
  },
  {
    "text": "tags that have the rail attribute defined and if I look up at the uh",
    "start": "2285119",
    "end": "2290839"
  },
  {
    "text": "document here we'll see if I scroll across I have a anchor tag here that has the ra attribute defined to a value of",
    "start": "2290839",
    "end": "2296960"
  },
  {
    "text": "external so if I just say uh square bracket ra and don't put anything else it's just going to find anything where real exists as long as real is even",
    "start": "2296960",
    "end": "2304359"
  },
  {
    "text": "declared this is going to match and so now if I hit five you can see that it's found this link down here because R was",
    "start": "2304359",
    "end": "2311000"
  },
  {
    "text": "declared if I want to be a little more explicit I can say well you know where real is equal to some value um so I'll",
    "start": "2311000",
    "end": "2317520"
  },
  {
    "text": "say well is equal to external now which is what I've declared it to so that should find it which it did if I change",
    "start": "2317520",
    "end": "2323319"
  },
  {
    "text": "that to something other than that and hit F5 it's it's not going to find it this time now um you can do quite",
    "start": "2323319",
    "end": "2330040"
  },
  {
    "text": "Advanced things so you can say anything that starts with ext I think that's the correct one yes",
    "start": "2330040",
    "end": "2337560"
  },
  {
    "text": "that found it or anything that uh ends use a dollar sign with",
    "start": "2337560",
    "end": "2344760"
  },
  {
    "text": "n okay I found that as well now again it might look a bit strange but this becomes a lot more useful when you're",
    "start": "2344760",
    "end": "2350760"
  },
  {
    "text": "doing things like this and you say well find me end of thing that ends with jpeg",
    "start": "2350760",
    "end": "2355960"
  },
  {
    "text": "now you can find all the links that link off to a JPEG or find me anything that starts",
    "start": "2355960",
    "end": "2361400"
  },
  {
    "text": "with uh HTTP now find me all the links that aren't internal to the site anything",
    "start": "2361400",
    "end": "2367680"
  },
  {
    "text": "that goes off to a different website all external links okay um now for those who",
    "start": "2367680",
    "end": "2373119"
  },
  {
    "text": "are really quick you would have noticed that the characters that are used here are the anyone anything that that's",
    "start": "2373119",
    "end": "2379640"
  },
  {
    "text": "begins and that's ends where do they come from Rex I didn't know that until",
    "start": "2379640",
    "end": "2384800"
  },
  {
    "text": "someone pointed out to me last week I always had trouble remembering which one was which and I'm like du look at that",
    "start": "2384800",
    "end": "2390240"
  },
  {
    "text": "so there you go um there are some other ones there's the tier as well um this is where I forget which one does what but",
    "start": "2390240",
    "end": "2396599"
  },
  {
    "text": "essentially there are bunch of different uh prefixes to the equals operator you can use to say um if the attribute",
    "start": "2396599",
    "end": "2402119"
  },
  {
    "text": "accepts a space delimited list of values now the only one really that does that is the class the class attribute then",
    "start": "2402119",
    "end": "2409079"
  },
  {
    "text": "you can use I think it's tilder it's one of them um to find anything that has a single instance um if it takes a comma",
    "start": "2409079",
    "end": "2414720"
  },
  {
    "text": "separated list of values you can use a different operator if it takes um a hyphen separated list of values which is",
    "start": "2414720",
    "end": "2420960"
  },
  {
    "text": "generally the Lang operator um where you might have something like you know en-us or you just want to find anything",
    "start": "2420960",
    "end": "2428599"
  },
  {
    "text": "where Lang has n in it somewhere then you can use an operator to do that um",
    "start": "2428599",
    "end": "2433760"
  },
  {
    "text": "and there there's a set of those in CSS 2.1 and some further ones in CSS 3 and J cury supports them all so that's really",
    "start": "2433760",
    "end": "2440280"
  },
  {
    "text": "kind of cool um some other ones we can then do some funky stuff like filters so",
    "start": "2440280",
    "end": "2446200"
  },
  {
    "text": "this one here looks like what I had before so um we got this colon in here now so what I'm saying is I want to find",
    "start": "2446200",
    "end": "2453119"
  },
  {
    "text": "all the LI elements that has something else underneath it um and there is this",
    "start": "2453119",
    "end": "2460319"
  },
  {
    "text": "this semicolon is used to denote what's called a pseudo class um so I can say get me all the Allis that are even so if",
    "start": "2460319",
    "end": "2466960"
  },
  {
    "text": "I hit F5 now it's gotten me the the first one that's strange well it's zero",
    "start": "2466960",
    "end": "2472240"
  },
  {
    "text": "based so it's zero and one zero and two and zero and you get the idea um and of",
    "start": "2472240",
    "end": "2477960"
  },
  {
    "text": "course I can do Odd as well that's going to get me the opposite um you can get really funky so you can say like a nth",
    "start": "2477960",
    "end": "2485560"
  },
  {
    "text": "child of 2 n + 1 and that will do something that just",
    "start": "2485560",
    "end": "2491200"
  },
  {
    "text": "did what I did before um let's let's make it minus 4 or something let's make it n minus 4 I don't know what that'll",
    "start": "2491200",
    "end": "2497319"
  },
  {
    "text": "do oh oh I got all of them right so you can this is basically a way of expressing an equation used to find",
    "start": "2497319",
    "end": "2505839"
  },
  {
    "text": "children using some formula so you can use this to like get me every seventh and fifth item or the third last item",
    "start": "2505839",
    "end": "2512319"
  },
  {
    "text": "plus whatever you can do crazy stuff in here to find very very particular items",
    "start": "2512319",
    "end": "2517520"
  },
  {
    "text": "um you can do last child of type you can do first of type um all types of wonderful stuff like that um now a lot",
    "start": "2517520",
    "end": "2524000"
  },
  {
    "text": "of these are again are standard parts of CSS 2.1 and CSS 3 um and there are some stuff that jQuery has actually added",
    "start": "2524000",
    "end": "2530280"
  },
  {
    "text": "themselves and you can even put your own ones in there um I actually have a sample here this is a plugin that I",
    "start": "2530280",
    "end": "2536480"
  },
  {
    "text": "wrote we'll get to plugins later um where called track dirty and one of the",
    "start": "2536480",
    "end": "2541960"
  },
  {
    "text": "things it does is it adds a new selector uh using this tiny iny winty bit code",
    "start": "2541960",
    "end": "2547599"
  },
  {
    "text": "down here if I get rid of that so just this little block of code here adds a new selector that can then be used in in",
    "start": "2547599",
    "end": "2555079"
  },
  {
    "text": "inside jQuery so I just say dollar. extend uh jQuery do expression colon and",
    "start": "2555079",
    "end": "2561880"
  },
  {
    "text": "then I pass it an object literal and I give it the name of the thing I want to extend it with I want to add one called dirty and then just give it a function",
    "start": "2561880",
    "end": "2568559"
  },
  {
    "text": "that's a predicate basically a function that returns true or false given an input um when looking at characters of",
    "start": "2568559",
    "end": "2574079"
  },
  {
    "text": "that function and then the way you would use this is something like this so I can say you know find me the dirty elements",
    "start": "2574079",
    "end": "2580119"
  },
  {
    "text": "just by saying colon dirty okay so J cury is immensely extensible and it's",
    "start": "2580119",
    "end": "2585599"
  },
  {
    "text": "not just because it's JavaScript um I mean JavaScript is Loosey Goosey Dynamic you can basically replace anything with",
    "start": "2585599",
    "end": "2591240"
  },
  {
    "text": "anything else um which mically means means anything is extensible but there's a cost because you you might have to",
    "start": "2591240",
    "end": "2598160"
  },
  {
    "text": "completely reimplement something to extend it um jQuery in most Parts is built and engineered to be extensible so",
    "start": "2598160",
    "end": "2604480"
  },
  {
    "text": "rather than having to completely replace a section to make it do it you you want they give you hooks to uh enhance what",
    "start": "2604480",
    "end": "2610599"
  },
  {
    "text": "it can do and a lot of the best plugins aren't fancy um you know light boxes",
    "start": "2610599",
    "end": "2616000"
  },
  {
    "text": "that are 100 light box plugins or fancy new animation effects they're just minor tweaks that they've made to jiry to to",
    "start": "2616000",
    "end": "2622640"
  },
  {
    "text": "give it further building blocks or make it support stuff that J Cy core doesn't um one of the ones that we mentioned",
    "start": "2622640",
    "end": "2627960"
  },
  {
    "text": "before was the rotate plugin which extends the CSS stuff to support the the new rotate CSS transform um so you know",
    "start": "2627960",
    "end": "2636280"
  },
  {
    "text": "it really is for extensibility which is why the plug-in Community around JC is",
    "start": "2636280",
    "end": "2641599"
  },
  {
    "text": "is is really so vibrant um and of course you can join these things together so if you want to find all the Lis and all the",
    "start": "2641599",
    "end": "2648000"
  },
  {
    "text": "a tags um and turn off my caps lock then then you just uh do as you do in CSS you",
    "start": "2648000",
    "end": "2654160"
  },
  {
    "text": "separate them with a comma and now it'll find that's one selector and that is another selector and it'll just concatenate the result um and if I look",
    "start": "2654160",
    "end": "2660920"
  },
  {
    "text": "at that in the browser at5 I should find uh my all my Lis and my a have been",
    "start": "2660920",
    "end": "2666240"
  },
  {
    "text": "highlighted so that's that's that's the introduction to uh selectors events now",
    "start": "2666240",
    "end": "2673040"
  },
  {
    "text": "events has got to be one of the most painful thing to do when doing Dom programming especially",
    "start": "2673040",
    "end": "2678960"
  },
  {
    "text": "across browser the main reason being that up until Li 9 the main browsers out",
    "start": "2678960",
    "end": "2684400"
  },
  {
    "text": "there you know IE and everything else did events totally differently they used",
    "start": "2684400",
    "end": "2689800"
  },
  {
    "text": "a completely different API for managing events now there is a reason and if you want to know the history of it you know watch Douglas crockford he explains it",
    "start": "2689800",
    "end": "2696200"
  },
  {
    "text": "there is a reason it's like like that there's really no good reason why iie didn't update to support the the better",
    "start": "2696200",
    "end": "2701680"
  },
  {
    "text": "stuff later but there's a reason why it was the way it was so J cre is great because um as we heard before the",
    "start": "2701680",
    "end": "2707680"
  },
  {
    "text": "biggest part J cre really does is it creates an abstraction layer over the Dom and events is just one core of that",
    "start": "2707680",
    "end": "2713319"
  },
  {
    "text": "so here's the real Basics I got a page here with a few things on it a few interactive elements that I want to show you if you look at this in the browser",
    "start": "2713319",
    "end": "2720280"
  },
  {
    "text": "uh what we have is a button um I have a check boox with a label and I have a bunch of links and I'm going to wire up",
    "start": "2720280",
    "end": "2726720"
  },
  {
    "text": "some some Behavior to these uh elements using jQuery and the event handling stuff so first of all I'm going to say",
    "start": "2726720",
    "end": "2732880"
  },
  {
    "text": "okay I'm inside my function load here remember um I'm going to find the clickme element that is the the element",
    "start": "2732880",
    "end": "2739079"
  },
  {
    "text": "that has an ID of clickme I'm going to call the click function and I'm going to pass to The Click function a function so",
    "start": "2739079",
    "end": "2745640"
  },
  {
    "text": "this is going to be my Handler um now this is an anonymous function otherwise",
    "start": "2745640",
    "end": "2751240"
  },
  {
    "text": "known as a Lambda otherwise known as a callback in jQuery palants they usually call these callbacks um this is the",
    "start": "2751240",
    "end": "2757119"
  },
  {
    "text": "function that will be called when the click event happens on the click me element that we found and so when that",
    "start": "2757119",
    "end": "2763720"
  },
  {
    "text": "function gets called when the click happens I'm going to run some more jQuery I'm going to find this result element and I'm going to append you",
    "start": "2763720",
    "end": "2769240"
  },
  {
    "text": "click to me to it so if I go up here and click to me you can see that every time I do that it's just depending you click to me to that element easy as that to",
    "start": "2769240",
    "end": "2775559"
  },
  {
    "text": "handle a click element a click event um if we want to do something a little more funky I've done the exact",
    "start": "2775559",
    "end": "2782280"
  },
  {
    "text": "same thing here but now I'm doing it for all the anchor tags under this links uh element so that's this thing here I've",
    "start": "2782280",
    "end": "2788520"
  },
  {
    "text": "got a list of links and I'm I'm I'm I'm a handling the click event um I'm",
    "start": "2788520",
    "end": "2793760"
  },
  {
    "text": "calling and this time my my signature is taking in a single parameter uh this parameter will be populated with the",
    "start": "2793760",
    "end": "2799839"
  },
  {
    "text": "event object if you've ever done event Dom programming you'll know what the event object is you'll know that it's different in every browser you'll be",
    "start": "2799839",
    "end": "2806079"
  },
  {
    "text": "happy to know that jQuery has their own event object that abstracts the event uh system in all the browsers so this e",
    "start": "2806079",
    "end": "2812440"
  },
  {
    "text": "object is of type jQuery do event and it has a bunch of methods on them uh one is the prevent default method which stops",
    "start": "2812440",
    "end": "2819440"
  },
  {
    "text": "the bubbling of the event up through the Dom so I'm calling that cuz this is an anchor tag and if I don't do that it'll navigate off to whatever a t refer set",
    "start": "2819440",
    "end": "2826079"
  },
  {
    "text": "to and then I'm going to append another item to the same list of items that I clicked on so if I click on this I click",
    "start": "2826079",
    "end": "2833680"
  },
  {
    "text": "on these links I just keep adding more links now the only the first four links will work because all these new links",
    "start": "2833680",
    "end": "2840240"
  },
  {
    "text": "that I've added don't have that Handler on them if I look at my code again I'm going okay well find all anchor tags",
    "start": "2840240",
    "end": "2847839"
  },
  {
    "text": "oops all anchor tags under the links and then assign a okay well when this executed it only found the the four",
    "start": "2847839",
    "end": "2854400"
  },
  {
    "text": "original ones that were there okay and so then it assigned that click handle to those I went and added a bunch more now",
    "start": "2854400",
    "end": "2860480"
  },
  {
    "text": "you might have done this via Ajax um or you might have uh just done something in JavaScript to build up some type of Dom",
    "start": "2860480",
    "end": "2865640"
  },
  {
    "text": "you might have used the templating plugin to build this up and so your uh handlers aren't going to get attached",
    "start": "2865640",
    "end": "2870920"
  },
  {
    "text": "automatically to those new events so the way we can get around that is using something called event delegation otherwise known as live binding",
    "start": "2870920",
    "end": "2877480"
  },
  {
    "text": "so I'm going to change from using the click uh event uh method to the live",
    "start": "2877480",
    "end": "2882599"
  },
  {
    "text": "method and that's all I had to do um I've now I'm passing in the click event name to the live method and now this is",
    "start": "2882599",
    "end": "2889480"
  },
  {
    "text": "just going to work so if I hit F5 and I start clicking these I can click any of these new ones and this will continue to",
    "start": "2889480",
    "end": "2895520"
  },
  {
    "text": "work and the reason that is is because rather than uh attaching this event handler to the all the events that it",
    "start": "2895520",
    "end": "2901960"
  },
  {
    "text": "found it attached the event handler way up in the Dom tree somewhere and then",
    "start": "2901960",
    "end": "2907240"
  },
  {
    "text": "use the event delegation when the event bubbles up from uh any event that",
    "start": "2907240",
    "end": "2912280"
  },
  {
    "text": "matches this selector to figure out that it's one of those uh one of those uh uh elements and then uh process that click",
    "start": "2912280",
    "end": "2918640"
  },
  {
    "text": "Handler um so it reduces memory consumption because obviously you're not attaching handlers to all of these Dom elements you're just doing it once and",
    "start": "2918640",
    "end": "2925280"
  },
  {
    "text": "it means that you don't have to reattach handlers it just does it for you automatically and the other one is working with mouse events this is",
    "start": "2925280",
    "end": "2930599"
  },
  {
    "text": "notoriously difficult to do um so Mouse events the I I mentioned the event object that gets passed into event",
    "start": "2930599",
    "end": "2937240"
  },
  {
    "text": "callbacks that also has a bunch of great properties on it that tell you details about the mouse cursor um here I'll just",
    "start": "2937240",
    "end": "2943040"
  },
  {
    "text": "zoom out a bit I have a track Mouse button that when you uh that check box",
    "start": "2943040",
    "end": "2948319"
  },
  {
    "text": "this thing here that when you click it I'm going to check if it's checked and if it is I'm going to wire up um the",
    "start": "2948319",
    "end": "2953599"
  },
  {
    "text": "mouse move event uh on the HTML node and when I detect that the mouse is moved in the document I'm just going to go and",
    "start": "2953599",
    "end": "2960160"
  },
  {
    "text": "basically update a bunch of properties on the page so I can track it and I'm going to update the position of something to match it um else if it's",
    "start": "2960160",
    "end": "2966880"
  },
  {
    "text": "not checked I'm just going to unbind that so this is a situation where I'm physically unbinding that event um",
    "start": "2966880",
    "end": "2972200"
  },
  {
    "text": "because I want to let the user toggle the usability on and off so if we look at that working um the moment I hit",
    "start": "2972200",
    "end": "2978079"
  },
  {
    "text": "track Mouse and we can see now that I got this little Dom element that's following the mouse around if we look do it a bit slower you'll see that the",
    "start": "2978079",
    "end": "2984079"
  },
  {
    "text": "numbers inside are being updated to the cursor position um of the current mouse cursor um now I you know and I and I've",
    "start": "2984079",
    "end": "2990720"
  },
  {
    "text": "calculated the offset based on the cursor and stuff but that's the code here like it's really quite quite simple",
    "start": "2990720",
    "end": "2995799"
  },
  {
    "text": "to do um using the jQuery venting system and this was notoriously difficult to get to work across browser before things",
    "start": "2995799",
    "end": "3002240"
  },
  {
    "text": "like jQuery lastly I've only got time for one last thing I think um animation",
    "start": "3002240",
    "end": "3007280"
  },
  {
    "text": "the animation in jQuery is is very rudimentary it's very basic I mean animation not as core is one very basic",
    "start": "3007280",
    "end": "3014200"
  },
  {
    "text": "concept take a value in its current state get it to another value over a period of time using some function to",
    "start": "3014200",
    "end": "3021400"
  },
  {
    "text": "increment the value along the way that's all animation is um now you can get more complic complicated with automatic",
    "start": "3021400",
    "end": "3027200"
  },
  {
    "text": "tweening and things like that but jcy is just about changing one value from this to that over this period of time using",
    "start": "3027200",
    "end": "3032559"
  },
  {
    "text": "this function and the things that you're animating the values of CSS properties now um I just have a a sample page here",
    "start": "3032559",
    "end": "3040839"
  },
  {
    "text": "that basically builds up a series of animations so as I click on this thing it moves around and does stuff um the",
    "start": "3040839",
    "end": "3047839"
  },
  {
    "text": "code is is a little bit fancy because I I generally build up to the to the stuff but it's really not that much code",
    "start": "3047839",
    "end": "3054040"
  },
  {
    "text": "essentially what I'm I have here is an array of of um objects that represents the animations I'm going to do so I'm",
    "start": "3054040",
    "end": "3060280"
  },
  {
    "text": "going to animate the left property to 400 I'm going to animate the top property to 200 etc etc and then I've",
    "start": "3060280",
    "end": "3066040"
  },
  {
    "text": "got a function called apply effects which I give it an effect which is one of these things and then the element I",
    "start": "3066040",
    "end": "3071079"
  },
  {
    "text": "want to apply it to um and then down here um when I this is the thing I'm clicking on when you click on it it",
    "start": "3071079",
    "end": "3077680"
  },
  {
    "text": "basically just says hey call this next effect function find the current effect from this array move to the next one and",
    "start": "3077680",
    "end": "3084280"
  },
  {
    "text": "then call apply effect and the actual core of what we're looking at is this animate function here so this dollar L",
    "start": "3084280",
    "end": "3090480"
  },
  {
    "text": "dollar L is an instance of a jQuery uh is just a variable name I created but uh",
    "start": "3090480",
    "end": "3095559"
  },
  {
    "text": "I know that that's a jcy collection and I'm calling the animate method um and I'm just passing in what it is I want to",
    "start": "3095559",
    "end": "3101280"
  },
  {
    "text": "animate um so animation is very very basic in Jer there are great plugins that will um add better easing functions",
    "start": "3101280",
    "end": "3107799"
  },
  {
    "text": "so rather than just animating in a linear fashion you can make it go slow and then fast or fast and then slow or",
    "start": "3107799",
    "end": "3113680"
  },
  {
    "text": "go beyond and then bounce back or use elastic and do types of stuff like that there are other plugins that let you",
    "start": "3113680",
    "end": "3118720"
  },
  {
    "text": "animate color so you can go from red to blue um by default J cre won't do that but there's a very simple plugin that we",
    "start": "3118720",
    "end": "3124799"
  },
  {
    "text": "do that for you um so with that I'm out of time so um hopefully you've got something out of that if you want to",
    "start": "3124799",
    "end": "3130119"
  },
  {
    "text": "learn more about JavaScript in general check out the uh yui theater so if you just type in yui theater into your",
    "start": "3130119",
    "end": "3137079"
  },
  {
    "text": "favorite um search engine click on there and look for Douglas crockford stuff anything by this guy here um watch",
    "start": "3137079",
    "end": "3145000"
  },
  {
    "text": "everything that this guy does on on here and you'll become a a billion percent better JavaScript developer I can't",
    "start": "3145000",
    "end": "3151040"
  },
  {
    "text": "overstate that enough um otherwise grab me afterwards you've got any questions thanks for your time",
    "start": "3151040",
    "end": "3159078"
  },
  {
    "text": "[Music]",
    "start": "3162780",
    "end": "3169090"
  }
]