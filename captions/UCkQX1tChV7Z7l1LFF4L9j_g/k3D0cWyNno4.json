[
  {
    "start": "0",
    "end": "183000"
  },
  {
    "text": "so my name is scout shake in case you didn't know so I work at a start-up I'm an Android developer I work at a",
    "start": "210",
    "end": "5580"
  },
  {
    "text": "start-up in Palo Alto called wedding party so if you're getting married or you know anyone who is getting married",
    "start": "5580",
    "end": "10830"
  },
  {
    "text": "definitely use our app because I think it's definitely one of the best apps you have out there for a wedding in addition",
    "start": "10830",
    "end": "16770"
  },
  {
    "text": "I also host this podcast called fragmented so I usually don't say too",
    "start": "16770",
    "end": "23039"
  },
  {
    "text": "intelligent stuff but like my co-host Don Felker's like a really smart guy so you should just listen for him in",
    "start": "23039",
    "end": "28109"
  },
  {
    "text": "between like you know you can suffer through me just to listen to his content so that's basically the pitch for fragmented podcast you can go ahead and",
    "start": "28109",
    "end": "35640"
  },
  {
    "text": "listen at fragmented podcast com we usually interview some of like the best like we're fortunate that some of the best developers have come in as",
    "start": "35640",
    "end": "42390"
  },
  {
    "text": "guests so if you know you have to walk the dog clean the dishes I have a long",
    "start": "42390",
    "end": "49079"
  },
  {
    "text": "commute or something you can just like wire in and listen to like some really smarts because smart people speed okay",
    "start": "49079",
    "end": "55440"
  },
  {
    "text": "with that a introduction I want to give",
    "start": "55440",
    "end": "60480"
  },
  {
    "text": "you like what the objective is for today so Ari Chavez sort of like this beast",
    "start": "60480",
    "end": "66659"
  },
  {
    "text": "right like it has this mega huge steep learning curve and personally the way",
    "start": "66659",
    "end": "72030"
  },
  {
    "text": "I've dealt with our exam so like when I started out I've been doing Alex Avila now possibly for maybe like a year so I",
    "start": "72030",
    "end": "77490"
  },
  {
    "text": "like to think I'm decently conversant with like rxjava but I mean don't hold me to it but the thing is like when I started",
    "start": "77490",
    "end": "84270"
  },
  {
    "text": "like looking at the theory of eyeglasses making any sense so like you know they have this thing",
    "start": "84270",
    "end": "89880"
  },
  {
    "text": "where they say basically if you want to teach a kid swimming just like throw them to the deep side of the pool and they'll figure it out a terrible",
    "start": "89880",
    "end": "96869"
  },
  {
    "text": "terrible idea for swimming don't do that for swimming like you know your kids will hate you for the rest of your life don't do that but it's excellent for",
    "start": "96869",
    "end": "103140"
  },
  {
    "text": "Alex Java for our Taba I think that's like the perfect way to learn just dive",
    "start": "103140",
    "end": "108270"
  },
  {
    "text": "in start looking at examples and eventually like if you're doing it for like maybe a month or so suddenly",
    "start": "108270",
    "end": "114030"
  },
  {
    "text": "everything will just start clicking and you know it'll all make sense so with that in mind basically what I want to do",
    "start": "114030",
    "end": "119939"
  },
  {
    "text": "is as quickly as possible I'm gonna try to keep it very light on theory but more heavy with code examples so I'll keep",
    "start": "119939",
    "end": "125969"
  },
  {
    "text": "switching like to code I apologize this there's gonna be a lot of code in the slides but I try to make it a little",
    "start": "125969",
    "end": "131550"
  },
  {
    "text": "pleasant to at least look and like once we walk through it together it'll probably make more sense I do however",
    "start": "131550",
    "end": "137400"
  },
  {
    "text": "have to start with at least like some sort of a primer because I'm going to be using a lot of terms like observable",
    "start": "137400",
    "end": "144000"
  },
  {
    "text": "observer subscription subscriber like I'm going to be using these terms pretty heavily and if that really doesn't make",
    "start": "144000",
    "end": "149820"
  },
  {
    "text": "sense if you don't have like a solid understanding of those terms then like the rest of the talk is really not going to make any sense",
    "start": "149820",
    "end": "154980"
  },
  {
    "text": "so I'm going to have like a very quick primer just a quick show of hands how many of you have worked with Aleks Java",
    "start": "154980",
    "end": "162080"
  },
  {
    "text": "like cool so a fairly decent amount okay so I have like a couple of examples the",
    "start": "162080",
    "end": "169530"
  },
  {
    "text": "way I wanted to work was basically try to spend like more time on the things that people would be more interested in solid like a 50/50 at this point so I'll",
    "start": "169530",
    "end": "176520"
  },
  {
    "text": "just like run with it and like we will see if you guys want to like change up the routine at some point like you'll",
    "start": "176520",
    "end": "182220"
  },
  {
    "text": "see how that goes all right cool so let's get into it the objective for the stock like I said",
    "start": "182220",
    "end": "189240"
  },
  {
    "start": "183000",
    "end": "270000"
  },
  {
    "text": "is if you have never used our excel before if you go home today add like this one line and start using Alex our",
    "start": "189240",
    "end": "195330"
  },
  {
    "text": "that's a win and it is possible like regardless of what you read online people are going to say well our servers",
    "start": "195330",
    "end": "200520"
  },
  {
    "text": "like complex does it it doesn't make sense it has a steep learning curve all that is true it still remains true but",
    "start": "200520",
    "end": "207720"
  },
  {
    "text": "the thing is you can you can start using it like right away and that's like the whole objective I'm going to give you like four examples where you can go home",
    "start": "207720",
    "end": "213570"
  },
  {
    "text": "and rip out all your async tasks your timer tasks all that horrible garbage like from your code and you can start",
    "start": "213570",
    "end": "219990"
  },
  {
    "text": "using beautiful art like our Xterra so like that's the objective the very first thing you want to do is basically have",
    "start": "219990",
    "end": "226460"
  },
  {
    "text": "this in your Gradle script now cradle allows you like the Gradle build system allows you to basically pull in",
    "start": "226460",
    "end": "232140"
  },
  {
    "text": "libraries left and right so if you wanted to use Eric's Java all you have to do is add this line however if you",
    "start": "232140",
    "end": "237870"
  },
  {
    "text": "are an Android developer basically what you should be doing is making sure your",
    "start": "237870",
    "end": "243300"
  },
  {
    "text": "slides go in the right sequence but also our X Android so you basically want to use our X Android and as I walk through",
    "start": "243300",
    "end": "250110"
  },
  {
    "text": "some of the examples I will tell you there are some constructs with our X Android that work really well specifically if you are an Android",
    "start": "250110",
    "end": "256530"
  },
  {
    "text": "developer also the the good thing is all the dependencies for our X Java are pulled automatically with our X Android",
    "start": "256530",
    "end": "262860"
  },
  {
    "text": "so at this stage you really just should be using our X Android because it do everything that you need specifically",
    "start": "262860",
    "end": "268550"
  },
  {
    "text": "as an Android developer okay so in case you didn't know our X stands for",
    "start": "268550",
    "end": "273860"
  },
  {
    "start": "270000",
    "end": "682000"
  },
  {
    "text": "reactive extensions now our X is not a new language right like many people",
    "start": "273860",
    "end": "279470"
  },
  {
    "text": "associate rx Java with FRP which is like functional reactive programming that's like a big debate of its own but the",
    "start": "279470",
    "end": "286370"
  },
  {
    "text": "important thing to realize is that it's it's simple Java in the end it's just normal Java but the folks at Netflix",
    "start": "286370",
    "end": "294889"
  },
  {
    "text": "basically use this pattern called reactive extensions and reactive extensions in turn was created by the",
    "start": "294889",
    "end": "300620"
  },
  {
    "text": "folks at Microsoft so this is a really smart some really smart people have like",
    "start": "300620",
    "end": "305870"
  },
  {
    "text": "come up with this pattern and what it allows you to do is sort of like write code that behaves in a functional manner",
    "start": "305870",
    "end": "311510"
  },
  {
    "text": "so it doesn't necessarily have to be function code but it sort of behaves in this manner and that's where the true power of like rx Java is so that's why",
    "start": "311510",
    "end": "318680"
  },
  {
    "text": "you can like go ahead and start using it in like plain old Java classes so Alex Java is just a library just like you",
    "start": "318680",
    "end": "325160"
  },
  {
    "text": "have like other amazing libraries like dagger or retrofit and the like alex java is just another library it doesn't",
    "start": "325160",
    "end": "331729"
  },
  {
    "text": "require any like huge change in your framework or anything that you need you can start using our java right away",
    "start": "331729",
    "end": "337460"
  },
  {
    "text": "okay so we have a couple of terms so you're going to so this is a very",
    "start": "337460",
    "end": "343760"
  },
  {
    "text": "typical rx Java routine right so you have like in observable then you have like these like a lot of this code so",
    "start": "343760",
    "end": "350449"
  },
  {
    "text": "what exactly does this mean whenever you think about rx Java all you have to do is just think about the routine as three",
    "start": "350449",
    "end": "356990"
  },
  {
    "text": "constructs just think of any rx Java routine that you see as like having three constructs now what a lot of you",
    "start": "356990",
    "end": "365389"
  },
  {
    "text": "know again like this this thing with how they play the piano right like so you have rules and once you like sort of",
    "start": "365389",
    "end": "370430"
  },
  {
    "text": "like master of the rules if you want to go to the next cell you just throw the rules off and then like you start like realizing that there's more to it right",
    "start": "370430",
    "end": "376400"
  },
  {
    "text": "it's the same thing with a like Java when you start off just think of it as like just have these rules in mind because it would really help you get",
    "start": "376400",
    "end": "382310"
  },
  {
    "text": "like 60% of the way once you're there then you can like actually understand the nuances of like the theory that goes",
    "start": "382310",
    "end": "387979"
  },
  {
    "text": "behind behind it and then you can like start swapping your code like left and right so the very first thing that you",
    "start": "387979",
    "end": "394280"
  },
  {
    "text": "should know is there are three constructs what's the first construct the first construct is what is called",
    "start": "394280",
    "end": "400490"
  },
  {
    "text": "these animations are a bad idea okay in any case the first concept is what you call the observer now Eric Sava follows",
    "start": "400490",
    "end": "409130"
  },
  {
    "text": "the observable pattern in case you didn't know and it's a very basic pattern so what basically you have this",
    "start": "409130",
    "end": "415280"
  },
  {
    "text": "interesting thing right so assuming you have a stage and you have like this object or this entity that's doing interesting stuff right",
    "start": "415280",
    "end": "421789"
  },
  {
    "text": "you call that the observable because you're interested in finding out what that thing is doing so that's like one way to think about it usually in your",
    "start": "421789",
    "end": "428599"
  },
  {
    "text": "code typically all the funky operators that you have like map flatmap the bounds buffer all these things that",
    "start": "428599",
    "end": "435020"
  },
  {
    "text": "you'll eventually get to read like in the list of operators for rxjava all that basically all that good stuff",
    "start": "435020",
    "end": "440509"
  },
  {
    "text": "happens like at the observable construct right so that's like number one the observable the second thing is well I",
    "start": "440509",
    "end": "446900"
  },
  {
    "text": "mean you have this amazing person who's giving you like some interesting events but you need someone who actually listens to these events right that's",
    "start": "446900",
    "end": "453949"
  },
  {
    "text": "what you call the observer because I mean if you don't have an audience what's the point of having like the observer so that's like the second",
    "start": "453949",
    "end": "459650"
  },
  {
    "text": "construct so then you have an Rx java retain always think okay there's got to be like an observable that's like shooting out interesting events and in",
    "start": "459650",
    "end": "466430"
  },
  {
    "text": "the end you've got you you also have to have like an observer that listens into these events right so that's the two",
    "start": "466430",
    "end": "472250"
  },
  {
    "text": "principal parts now another super huge",
    "start": "472250",
    "end": "477560"
  },
  {
    "text": "advantage with Erics java is it allows it allows instant concurrency now all",
    "start": "477560",
    "end": "483710"
  },
  {
    "text": "the geniuses in the computer science field have like I don't I don't remember the codes exactly but basically everyone",
    "start": "483710",
    "end": "489020"
  },
  {
    "text": "is like in unison everyone says like concurrency is like a hard thing to deal with right concurrency is always",
    "start": "489020",
    "end": "494479"
  },
  {
    "text": "difficult it still remains difficult but the advantage with Erics Java is it sort of like abstracts all of this",
    "start": "494479",
    "end": "500569"
  },
  {
    "text": "away from you so the way it does that is with this thing called like schedulers right so you have subscribe on which",
    "start": "500569",
    "end": "507620"
  },
  {
    "text": "basically says hey you have this observable and you have this observer when you establish this connection",
    "start": "507620",
    "end": "513020"
  },
  {
    "text": "basically do it on this thread so in the end if we do get time like we try to",
    "start": "513020",
    "end": "518390"
  },
  {
    "text": "touch on some of the things you can achieve all of this with pure Java you can use like executor is you can use",
    "start": "518390",
    "end": "523969"
  },
  {
    "text": "like implementations of like executives like tread pools you can do all of this the thing is schedulers are just like a",
    "start": "523969",
    "end": "530120"
  },
  {
    "text": "much nicer API to deal with all of this right so you have subscribe on you have you have like the observer you're",
    "start": "530120",
    "end": "537019"
  },
  {
    "text": "establishing the connection this piece of code that you have here basically sort of tells it sort of indicates on",
    "start": "537019",
    "end": "544459"
  },
  {
    "text": "which threads you won't have each of these things happening so what the subscribe on does is it basically says",
    "start": "544459",
    "end": "550220"
  },
  {
    "text": "hey you have this observer this is like the interested stuff like all the funky stuff that's happening in our observer do it on this thread which is basically",
    "start": "550220",
    "end": "557329"
  },
  {
    "text": "like your which is your i/o thread well the scheduler IO which provides it",
    "start": "557329",
    "end": "562459"
  },
  {
    "text": "a thread but for like for convenience let's just say okay it's going to happen on the i/o thread then you say basically",
    "start": "562459",
    "end": "567829"
  },
  {
    "text": "hey observe on another thread and this is where rx Android comes in handy so",
    "start": "567829",
    "end": "574879"
  },
  {
    "text": "like I said rx Java is a very basic library rightly you can use it in any of the Java code that you have what what rx",
    "start": "574879",
    "end": "581600"
  },
  {
    "text": "Android does is like if you're an Android developer you obviously know if you have like a network operation that's happening there if you try to do that",
    "start": "581600",
    "end": "587600"
  },
  {
    "text": "like on your main thread is going to blow up on you right so what you want to be able to do is say hey do all this on",
    "start": "587600",
    "end": "592939"
  },
  {
    "text": "one thread and do this other stuff on the other thread so this other stuff that I'm talking about is basically on",
    "start": "592939",
    "end": "598309"
  },
  {
    "text": "the main that I want to do it on the main thread and for most sort of like examples like introductory kind of",
    "start": "598309",
    "end": "605059"
  },
  {
    "text": "examples all like the observer that you have there basically what you're going to do is you're going to update like you",
    "start": "605059",
    "end": "611629"
  },
  {
    "text": "have like a textview you have like a list view that you have a bunch of these interesting events that are coming to",
    "start": "611629",
    "end": "616879"
  },
  {
    "text": "you're going to update all of that in your observer right again this is just",
    "start": "616879",
    "end": "622189"
  },
  {
    "text": "like an introductory rule start off with this sort of like understanding that is not necessarily true you can do like a",
    "start": "622189",
    "end": "627470"
  },
  {
    "text": "whole bunch of crazy things with our excel but to begin with let's just keep thinking of it like that because then it",
    "start": "627470",
    "end": "633139"
  },
  {
    "text": "makes it really easy to sort of like quickly sort of port your examples okay",
    "start": "633139",
    "end": "638480"
  },
  {
    "text": "so we have three constructs first is the observable second is the observer and the third is this layer where we sort of",
    "start": "638480",
    "end": "645259"
  },
  {
    "text": "like establish this concurrency right so which is like the schedulers does anyone have any questions at this point because",
    "start": "645259",
    "end": "651470"
  },
  {
    "text": "you they're going to have Q&A hopefully at the end of this session but if you don't understand any of these terms or",
    "start": "651470",
    "end": "658369"
  },
  {
    "text": "something doesn't make sense now then excellent time to ask me because if you have an example three or four and you say hey what's an observable that's yeah",
    "start": "658369",
    "end": "665119"
  },
  {
    "text": "I can't help you there so if you have any questions any questions",
    "start": "665119",
    "end": "670590"
  },
  {
    "text": "go ahead and stop me and ask so far all this makes sense three constructs be",
    "start": "670590",
    "end": "676410"
  },
  {
    "text": "good okay cool I lied to you there's this not three concept there's actually one more thing and that's so I told you",
    "start": "676410",
    "end": "683640"
  },
  {
    "start": "682000",
    "end": "795000"
  },
  {
    "text": "like hey so I was very like coy and saying like I get observer the observer also has this interface right so in",
    "start": "683640",
    "end": "691260"
  },
  {
    "text": "order for an object to actually function as an observer you basically need to",
    "start": "691260",
    "end": "696510"
  },
  {
    "text": "override three methods you have oh jeez that's super small okay I'll read it out this is uncompleted on error and on next",
    "start": "696510",
    "end": "705030"
  },
  {
    "text": "so if you have like an object that implements these three methods basically",
    "start": "705030",
    "end": "711000"
  },
  {
    "text": "can function as what you call an observer right now again this is not necessarily true sometimes you may say",
    "start": "711000",
    "end": "716280"
  },
  {
    "text": "hey I don't really want an on error all I need an uncompleted or I just need the on next alexavic provides functions",
    "start": "716280",
    "end": "722550"
  },
  {
    "text": "which basically allows you to have observers that have just like the methods that you want but honestly I",
    "start": "722550",
    "end": "728820"
  },
  {
    "text": "would recommend that you always just override all three methods and I mean just put like a log statement on like",
    "start": "728820",
    "end": "734970"
  },
  {
    "text": "completed or something here's why if by chance your observer actually errors out like jump operation",
    "start": "734970",
    "end": "742410"
  },
  {
    "text": "errors out and you haven't actually called if you haven't implemented on error it'll blow up now the nice thing",
    "start": "742410",
    "end": "748620"
  },
  {
    "text": "with our ex Java here is basically it's like going to like neatly handle that error exception is like hey something",
    "start": "748620",
    "end": "754080"
  },
  {
    "text": "went wrong here deal with it in a nice way but if you don't if you don't indicate how you want to deal with this",
    "start": "754080",
    "end": "760080"
  },
  {
    "text": "exception we'll just blow in your face so this is like thrown exception so I usually it's a good thing to always just like overwrite all three and once",
    "start": "760080",
    "end": "766710"
  },
  {
    "text": "you start using it enough you'll like it's like all the API is right like you you'll start like like when I see this",
    "start": "766710",
    "end": "772260"
  },
  {
    "text": "all I see is like okay on error uncompleted on you you'll start training your eyes so sort of like crossover all like the boilerplate code so it's it's a",
    "start": "772260",
    "end": "779490"
  },
  {
    "text": "very good idea to sort of like over at all three okay so I also I don't wanna make it too boring for everyone so I got",
    "start": "779490",
    "end": "786420"
  },
  {
    "text": "like goodies can anyone tell me what the exact exception is that'll get thrown if",
    "start": "786420",
    "end": "792960"
  },
  {
    "text": "you don't go right on error I must say I brought three of these to begin with these are basically the most amazing",
    "start": "792960",
    "end": "799230"
  },
  {
    "start": "795000",
    "end": "957000"
  },
  {
    "text": "chocolates I've ever had like that can fit in my farm I had three of these I finished one on the Caltrain because I was just",
    "start": "799230",
    "end": "804360"
  },
  {
    "text": "like - I mean it was so good you get this it's worth it man I mean I'm telling you just like give me any answer",
    "start": "804360",
    "end": "810810"
  },
  {
    "text": "if you're if you're good like you know what exactly the exception is that gets thrown if you don't start off like",
    "start": "810810",
    "end": "816959"
  },
  {
    "text": "override Leon error go for it boom pretty gets the first goodie by the way",
    "start": "816959",
    "end": "827160"
  },
  {
    "text": "you can attack and just like take it from him at any point I mean if you want I can't control that all right cool",
    "start": "827160",
    "end": "832970"
  },
  {
    "text": "let's see I talked about like this connection so you have an observable and",
    "start": "832970",
    "end": "839009"
  },
  {
    "text": "you have an observer right you've established this connection now you can",
    "start": "839009",
    "end": "844440"
  },
  {
    "text": "represent that connection in another object okay and that object is what you call a subscription so this is like the",
    "start": "844440",
    "end": "850500"
  },
  {
    "text": "fourth thing yeah I promise you there's no more like entities it's only these four like I'm not lying this time you",
    "start": "850500",
    "end": "855839"
  },
  {
    "text": "have three you have the observable you connected to the observer you tell them which threads you want to be doing all",
    "start": "855839",
    "end": "861300"
  },
  {
    "text": "the connections in in the schedulers and what results basically in the end is what you call a subscription right now",
    "start": "861300",
    "end": "868519"
  },
  {
    "text": "why do you need a subscription now what's the point of having a subscription",
    "start": "868519",
    "end": "873889"
  },
  {
    "text": "next Candyman can you say that again you can",
    "start": "874850",
    "end": "881770"
  },
  {
    "text": "unsubscribe from boom can you get it do you know what hmm oh yeah no I'm you get",
    "start": "881770",
    "end": "888610"
  },
  {
    "text": "it you get it hungry man I want to have to talk to myself again so that's why you would",
    "start": "888610",
    "end": "894460"
  },
  {
    "text": "have this subscription assuming like with Android this is very common right you have an activity or you have a",
    "start": "894460",
    "end": "900550"
  },
  {
    "text": "fragment and you're basically pausing the activity or the fragment if you've used async tasks this is like a big",
    "start": "900550",
    "end": "905680"
  },
  {
    "text": "problem what do you do if like your activity has gone out of cycle like the network operation is gonna come back like hey I have a result so you stick it",
    "start": "905680",
    "end": "912010"
  },
  {
    "text": "on the UI and the UI is going to blow up because it's like hey this activities you have to handle it in certain specific ways right the way you actually",
    "start": "912010",
    "end": "919450"
  },
  {
    "text": "handle that with rx Java is you get a hold of this subscription object and you",
    "start": "919450",
    "end": "924700"
  },
  {
    "text": "basically call unsubscribe one you have to do the extra work but it's basically",
    "start": "924700",
    "end": "929950"
  },
  {
    "text": "it's very neat and elegant in that it's very simple this is the only way if you",
    "start": "929950",
    "end": "935110"
  },
  {
    "text": "want to kill like that connection you can't basically get hold of the same observer or like your observable and say",
    "start": "935110",
    "end": "940330"
  },
  {
    "text": "like unsubscribe from here and selves Unser's unsubscribe from there you just it gives you this subscription and you",
    "start": "940330",
    "end": "946480"
  },
  {
    "text": "can basically say hey okay my activity is going out of the life cycle I want to kill the supper so just like unsubscribe",
    "start": "946480",
    "end": "952900"
  },
  {
    "text": "from there so that's basically why you would have a subscription any more questions be good so far",
    "start": "952900",
    "end": "960560"
  },
  {
    "start": "957000",
    "end": "1257000"
  },
  {
    "text": "I'm out of candy so I'm sorry I can't give any more",
    "start": "960560",
    "end": "965170"
  },
  {
    "text": "on the on error not implemented exception yes so like if you have an",
    "start": "966769",
    "end": "975620"
  },
  {
    "text": "observable and it for some reason calls on error on that sucker right if you",
    "start": "975620",
    "end": "981320"
  },
  {
    "text": "don't have on error implemented it's basically going to blow up saying I don't know how to handle this and I'll",
    "start": "981320",
    "end": "986630"
  },
  {
    "text": "throw the exception yes please excellent",
    "start": "986630",
    "end": "995420"
  },
  {
    "text": "you're you're listening keenly yes so this subscription object that I have is",
    "start": "995420",
    "end": "1000579"
  },
  {
    "text": "basically for this specific observable disconnection so this observer connects",
    "start": "1000579",
    "end": "1006339"
  },
  {
    "text": "to this observable and it gives you this single object it's a single subscription right I'm going to talk and in fact it's",
    "start": "1006339",
    "end": "1012790"
  },
  {
    "text": "the next slide so let's just go about ok so you have unsub so like if the way",
    "start": "1012790",
    "end": "1018640"
  },
  {
    "text": "you actually get a hold of it is initially with this construct I was just like neglecting the subscription I was just like letting it go into either I",
    "start": "1018640",
    "end": "1025000"
  },
  {
    "text": "can just assign it to this subscription object right so that basically allows you to unsubscribe now rxj like if you",
    "start": "1025000",
    "end": "1032380"
  },
  {
    "text": "have many of these rx Java routines in your activity or your fragment basically what you can do is it provides this",
    "start": "1032380",
    "end": "1039370"
  },
  {
    "text": "concert call like a composite subscription and it's basically a very convenient way because like with this",
    "start": "1039370",
    "end": "1044500"
  },
  {
    "text": "composite subscription it's basically like a bucket you can say like hey give me the subscription give me that subscription I'll collect all the",
    "start": "1044500",
    "end": "1050290"
  },
  {
    "text": "subscriptions and in the very end all I can do is like hit a single composite subscription unsubscribe and then all of",
    "start": "1050290",
    "end": "1057520"
  },
  {
    "text": "the connections are killed so it's just a very convenient way to sort of like handle all this as answer your question",
    "start": "1057520",
    "end": "1063060"
  },
  {
    "text": "cool any other questions",
    "start": "1063060",
    "end": "1067770"
  },
  {
    "text": "how do you get multiple subscriptions on a single observer I don't know I don't think is possible you can't basically so",
    "start": "1071100",
    "end": "1078340"
  },
  {
    "text": "this subscription it represents a single connection like the whole objective of this subscription is because if you if",
    "start": "1078340",
    "end": "1084999"
  },
  {
    "text": "you got like multiple subscriptions and you want to basically cancel out on one of those are you going to do it right it does make too much sense it mind",
    "start": "1084999",
    "end": "1091570"
  },
  {
    "text": "repeating the question for my answers we get on with you perfect yeah okay so the question was like okay how how do I get",
    "start": "1091570",
    "end": "1098049"
  },
  {
    "text": "multiple subscriptions from this observer like from this connection you can't basically the whole idea is to",
    "start": "1098049",
    "end": "1103659"
  },
  {
    "text": "sort of link this observable with this you want to be able to I to identify",
    "start": "1103659",
    "end": "1108789"
  },
  {
    "text": "this connection independently that's why like this is like the primary thing so before I knew about composite",
    "start": "1108789",
    "end": "1114340"
  },
  {
    "text": "subscription essentially what I Suz I still have like subscription one subscription to s3 s4 s5 and in the end",
    "start": "1114340",
    "end": "1120549"
  },
  {
    "text": "like as my activity was going out of the lifecycle I would like start calling unsubscribe and subscribe this is just",
    "start": "1120549",
    "end": "1126070"
  },
  {
    "text": "like a convenience method but the whole point is you want them to be independent because if you want to cancel three of",
    "start": "1126070",
    "end": "1131499"
  },
  {
    "text": "them but not the fourth one how would you do that right it would make it tricky if you add multiple subscriptions I mean what does that mean like if you",
    "start": "1131499",
    "end": "1137889"
  },
  {
    "text": "unsubscribe one does the other one get unsubscribe so the whole point is to like uniquely identify that subscription",
    "start": "1137889",
    "end": "1144059"
  },
  {
    "text": "any other questions yes",
    "start": "1144059",
    "end": "1149278"
  },
  {
    "text": "can you Reese absque ribe to this subscription so I mean this gets into",
    "start": "1151140",
    "end": "1160419"
  },
  {
    "text": "like the territory of like when you want to like cash things how about we do this like like ask me this question towards",
    "start": "1160419",
    "end": "1166149"
  },
  {
    "text": "the end just just because they got this point if I say it's like not going to make sense because I told you like the",
    "start": "1166149",
    "end": "1171580"
  },
  {
    "text": "theories like super complex in this right there are hot observables that are cold observers you can have like this subscription if you with a composite",
    "start": "1171580",
    "end": "1178659"
  },
  {
    "text": "subscription if you unsubscribe that sucker is gone so the only way you can",
    "start": "1178659",
    "end": "1183970"
  },
  {
    "text": "like if you kill that connection it's gone if you want to agree subscribe you have to like repeat the process that's",
    "start": "1183970",
    "end": "1189850"
  },
  {
    "text": "like the TLDR of like that answer sorry the question was can you realities here you can see I'm very experienced at this",
    "start": "1189850",
    "end": "1196390"
  },
  {
    "text": "okay so the question was can you give can you V subscribe using a subscription",
    "start": "1196390",
    "end": "1201880"
  },
  {
    "text": "without your question okay so the answer is No",
    "start": "1201880",
    "end": "1207480"
  },
  {
    "text": "yeah so the thing is a subscription is a connection it's a very tight sort of link if you unsubscribe from the",
    "start": "1218580",
    "end": "1225190"
  },
  {
    "text": "subscription it's gone you cannot likely subscribe however if you have the observable like if you had this if you",
    "start": "1225190",
    "end": "1232240"
  },
  {
    "text": "had this interesting sucker stored somewhere as a singleton and he was capable of like producing events",
    "start": "1232240",
    "end": "1237640"
  },
  {
    "text": "constantly and then you reestablish a new subscription then that would work",
    "start": "1237640",
    "end": "1242970"
  },
  {
    "text": "okay if you want to like talk about one the details like probably let's do that in the end cuz like right now people",
    "start": "1242970",
    "end": "1248260"
  },
  {
    "text": "think I'm crazy like what I mean it makes no sense so let's like maybe go through some of the examples and then like and start making a little more",
    "start": "1248260",
    "end": "1254500"
  },
  {
    "text": "sense that work okay cool so now finally examples how are we doing 24 minutes",
    "start": "1254500",
    "end": "1261160"
  },
  {
    "start": "1257000",
    "end": "1408000"
  },
  {
    "text": "okay who likes async tasks get out",
    "start": "1261160",
    "end": "1268660"
  },
  {
    "text": "you're not allowed in this session I'm just kidding a sync tasks okay in all fairness async",
    "start": "1268660",
    "end": "1274360"
  },
  {
    "text": "tasks actually have a very nice API I'm not kidding you like until alexavic came",
    "start": "1274360",
    "end": "1279520"
  },
  {
    "text": "in it basically had the nicest API to handle concurrency right what's the most typical example so I I was just telling",
    "start": "1279520",
    "end": "1286300"
  },
  {
    "text": "one of the other folks here so I've not used async tasks in a long time so like when I made this presentation I completely forgot how to use a syntax",
    "start": "1286300",
    "end": "1293020"
  },
  {
    "text": "and I was like wow use flash async that's just money they still suck I mean they're not that great now anyway but in",
    "start": "1293020",
    "end": "1299680"
  },
  {
    "text": "any case this is how do you implement like a very basic async task right so this is the Declaration of the async",
    "start": "1299680",
    "end": "1305860"
  },
  {
    "text": "task object the interesting thing that's happening here is like you want this to happen like in the background thread",
    "start": "1305860",
    "end": "1311400"
  },
  {
    "text": "basically API dot get user I'm using retrofit at this point so it gives me a lot of like the niceties of",
    "start": "1311400",
    "end": "1316680"
  },
  {
    "text": "where it basically makes life much you should be using retrofit as well so you",
    "start": "1316680",
    "end": "1322300"
  },
  {
    "text": "have API dot get user it returns it it basically issues a network call as you",
    "start": "1322300",
    "end": "1328780"
  },
  {
    "text": "know in Android all Network calls have to happen like on a third other than the main third you can't do it on the main thread so this is a nice a pair that",
    "start": "1328780",
    "end": "1335830"
  },
  {
    "text": "sort of like a wraps that information so it says okay do this in the background it returns this user object and onpostexecute what I'm saying is like",
    "start": "1335830",
    "end": "1342850"
  },
  {
    "text": "hey given this user object this is basically just I'm adding I have like an adapter to a list",
    "start": "1342850",
    "end": "1348340"
  },
  {
    "text": "you and I'm like adding a single entry into that adapter right so I'm not going to explain how I'm not going to go into",
    "start": "1348340",
    "end": "1354460"
  },
  {
    "text": "the details of acing test because this is over rx Java and if you forgotten how to use async tasks excellent that's like",
    "start": "1354460",
    "end": "1360310"
  },
  {
    "text": "where you want to be so let's like try to like gloss over all like the boilerplate the most interesting parts",
    "start": "1360310",
    "end": "1366010"
  },
  {
    "text": "are here right so this is where the network connection happens this is where the network connections happen yeah a",
    "start": "1366010",
    "end": "1371470"
  },
  {
    "text": "laser pointer and this is where basically you update the UI view right",
    "start": "1371470",
    "end": "1377160"
  },
  {
    "text": "okay so if you have to convert this into an RX Java construct right",
    "start": "1377160",
    "end": "1382600"
  },
  {
    "text": "like thinking about the three parts so you have like this interesting thing emitting events and you have like this",
    "start": "1382600",
    "end": "1388030"
  },
  {
    "text": "observer at the end that wants to do something with this right if you wanted to sort of like transform this sucker into in like an Rx Java construct right",
    "start": "1388030",
    "end": "1395370"
  },
  {
    "text": "how would you think about this right that's a rhetorical question I'll tell you have to do it anyway so you have",
    "start": "1395370",
    "end": "1402070"
  },
  {
    "text": "what okay oh yeah okay and there we go",
    "start": "1402070",
    "end": "1407920"
  },
  {
    "text": "so the first thing I want to do is you want to have an observable right the observe the interesting part of this",
    "start": "1407920",
    "end": "1413920"
  },
  {
    "start": "1408000",
    "end": "1606000"
  },
  {
    "text": "async task code is essentially this part right so you plug that sucker in to the",
    "start": "1413920",
    "end": "1418990"
  },
  {
    "text": "observer now look at it give this is where we come in two operators one of",
    "start": "1418990",
    "end": "1425050"
  },
  {
    "text": "the advantages with rx Java is basically it gives you like a whole bunch of super cool operators right",
    "start": "1425050",
    "end": "1431050"
  },
  {
    "text": "the problem is there's so many of this probably an operator for everything you know this is like the saying there's an app for that like in our a Java that's",
    "start": "1431050",
    "end": "1436570"
  },
  {
    "text": "probably an operator that you just like give all of this for free this operator is called just okay what does just do if",
    "start": "1436570",
    "end": "1443980"
  },
  {
    "text": "you have like maybe like an integer object you have like I know you have an integer you have a string you have like",
    "start": "1443980",
    "end": "1450340"
  },
  {
    "text": "a single sort of object then you want to convert into an observable right just basically just does that I mean that's",
    "start": "1450340",
    "end": "1458050"
  },
  {
    "text": "why it's worded excellently the API is like okay you have the string but I don't know man just give me an",
    "start": "1458050",
    "end": "1464200"
  },
  {
    "text": "observable for that and it does exactly just that so here what happens is you say absorb or just what it gives you is",
    "start": "1464200",
    "end": "1471340"
  },
  {
    "text": "an observable of a string though because if you see this is this user name is an edit text",
    "start": "1471340",
    "end": "1477430"
  },
  {
    "text": "so when I do get text dot to string what it gives me is a string so I'm passing into the just operator a string so what",
    "start": "1477430",
    "end": "1484480"
  },
  {
    "text": "I would what would come out of this is basically an observable of the string but I don't want an observer of a string",
    "start": "1484480",
    "end": "1490180"
  },
  {
    "text": "here basically what I want to do is convert in the end I want basically a user object right so the way we do the",
    "start": "1490180",
    "end": "1497500"
  },
  {
    "text": "secret sauce there is basically the network connection so that's where this comes in you have a map operator now I",
    "start": "1497500",
    "end": "1503590"
  },
  {
    "text": "like to call the map operators basically the alchemists operator edge you give it one object and what it does is it",
    "start": "1503590",
    "end": "1509650"
  },
  {
    "text": "provides you a function that will basically just spit out a completely different object that's essentially what",
    "start": "1509650",
    "end": "1514690"
  },
  {
    "text": "the map operator is so here what I want to do is I have a username string and essentially what I want to do is I want",
    "start": "1514690",
    "end": "1521380"
  },
  {
    "text": "to spit out a user object and the way I actually do that is with retrofits call it's the exact same call here right now",
    "start": "1521380",
    "end": "1528550"
  },
  {
    "text": "this is typically how you would convert this the equivalent of like converting",
    "start": "1528550",
    "end": "1533680"
  },
  {
    "text": "the exact same API with this now things can get a little better and like this is why I recommend retrofit right let me",
    "start": "1533680",
    "end": "1539800"
  },
  {
    "text": "see if this is the next thing yeah okay so with retrofit this is the exact same",
    "start": "1539800",
    "end": "1545200"
  },
  {
    "text": "API so in this example I'm going to point you to a github project where I've written some of these examples the API",
    "start": "1545200",
    "end": "1551320"
  },
  {
    "text": "that essentially you have here is get user so this is like the standard stuff this basically executes like the network",
    "start": "1551320",
    "end": "1558370"
  },
  {
    "text": "call it doesn't care about the thread it's just boom going to like execute that network call and give you the result this is what this is like the",
    "start": "1558370",
    "end": "1564550"
  },
  {
    "text": "interface with the retrofit the advantage with retrofit is it also gives you this option of converting it",
    "start": "1564550",
    "end": "1570100"
  },
  {
    "text": "automatically to an observable now there's I mean there are like certain nuances to this because obviously your",
    "start": "1570100",
    "end": "1575140"
  },
  {
    "text": "API has to be in JSON because it converts like it parses JSON there are other formats or you can write",
    "start": "1575140",
    "end": "1580600"
  },
  {
    "text": "like a custom converter and basically convert it to the user object all you have to do is like indicate how to convert it to a user object and then",
    "start": "1580600",
    "end": "1587230"
  },
  {
    "text": "basically it knows to give you an observable I'm not I haven't looked at the internals but I guess pretty much it",
    "start": "1587230",
    "end": "1593350"
  },
  {
    "text": "would do something similar to what we just had or maybe a more efficient way obtained at write so if you use retrofit",
    "start": "1593350",
    "end": "1599500"
  },
  {
    "text": "like all that chunk of code basically just goes away but for the benefit of those who don't use the retrofit we will",
    "start": "1599500",
    "end": "1604540"
  },
  {
    "text": "stick to like the old way of doing it okay we had the observable that's construct one there were three constructs in this",
    "start": "1604540",
    "end": "1611060"
  },
  {
    "start": "1606000",
    "end": "1753000"
  },
  {
    "text": "on in any rx Java routine we think about three constructs right the first was the observable what's the second one you",
    "start": "1611060",
    "end": "1616430"
  },
  {
    "text": "observed right so given this user object what you want to do is update your list",
    "start": "1616430",
    "end": "1621860"
  },
  {
    "text": "you right so basically you're saying hey okay this is my observer this is like a construct that basically deals with this",
    "start": "1621860",
    "end": "1628130"
  },
  {
    "text": "user object in some way so that's essentially what happens here now this observer has an uncompleted on error if",
    "start": "1628130",
    "end": "1635450"
  },
  {
    "text": "you notice like the signature of these methods so uncompleted is only at the very end of this call right so you have",
    "start": "1635450",
    "end": "1641870"
  },
  {
    "text": "this interesting object that's emitting out events called the observable at the very end it's going to say okay I'm done",
    "start": "1641870",
    "end": "1648830"
  },
  {
    "text": "like I've done all like the interesting stuff that I have to do so I'm out when it actually when you actually leg",
    "start": "1648830",
    "end": "1655370"
  },
  {
    "text": "reaches that stage uncompleted is called so typically like the stuff that you actually do here is going to happen in",
    "start": "1655370",
    "end": "1662510"
  },
  {
    "text": "our next so on next is when you're going to be able to like sort of like modify the events that keep coming out of like",
    "start": "1662510",
    "end": "1668390"
  },
  {
    "text": "this interesting thing which is called the observable right does that make sense so far are we good",
    "start": "1668390",
    "end": "1673720"
  },
  {
    "text": "there's something missing though if I run this exact same code it's going to blow up on me why is it going to blow up",
    "start": "1673720",
    "end": "1679250"
  },
  {
    "text": "on me exactly we need to add the schedulers right if I just said again this goes",
    "start": "1679250",
    "end": "1688570"
  },
  {
    "text": "into like the theory of our Xterra there are like certain default schedulers that run I'm not going to go into that but right now this is a very sort of like",
    "start": "1688570",
    "end": "1695710"
  },
  {
    "text": "straightforward rxjava construct what is going to do is going to run everything on the same thread by default any app",
    "start": "1695710",
    "end": "1701980"
  },
  {
    "text": "like if you have code it's going to run the main thread so it's going like fail right there because it's going to try to",
    "start": "1701980",
    "end": "1707260"
  },
  {
    "text": "execute that onto your main on your main thread and Android is going to say hey that's a network connection and I ain't",
    "start": "1707260",
    "end": "1712990"
  },
  {
    "text": "going to allow that and it's you're like blow up the way you handle that is the third constant the third construct is basically MN okay the third concept is",
    "start": "1712990",
    "end": "1721300"
  },
  {
    "text": "schedulers right so I say subscribe on the i/o scheduler and I say observe on",
    "start": "1721300",
    "end": "1727480"
  },
  {
    "text": "the main thread so what happens is the SUBSCRIBE on points to the interesting stuff that happens on the top it says",
    "start": "1727480",
    "end": "1733030"
  },
  {
    "text": "okay all this interesting stuff do it on the i/o thread all this like all this",
    "start": "1733030",
    "end": "1738580"
  },
  {
    "text": "stuff all you're like observing that you have to do do it on the main thread okay the minute I add this in I add my",
    "start": "1738580",
    "end": "1745390"
  },
  {
    "text": "concurrency layer to this you're good this example would work perfectly well",
    "start": "1745390",
    "end": "1750630"
  },
  {
    "text": "so this is basically just the code if you want again like I'll share all of this so don't worry about like writing",
    "start": "1750630",
    "end": "1756400"
  },
  {
    "start": "1753000",
    "end": "1907000"
  },
  {
    "text": "it down or taking pictures it's all like out there so it shouldnt be too much of a problem so with this in mind you can",
    "start": "1756400",
    "end": "1764110"
  },
  {
    "text": "go home today and rip out all your async tasks and basically just use the equivalent code it's as simple as that",
    "start": "1764110",
    "end": "1769710"
  },
  {
    "text": "any questions on this so far",
    "start": "1769710",
    "end": "1773700"
  },
  {
    "text": "it here they are usually you don't have to do too much because oh yes sorry the",
    "start": "1777340",
    "end": "1784210"
  },
  {
    "text": "question was what do you basically do in uncompleted so why do you have uncompleted in that case right there are",
    "start": "1784210",
    "end": "1790180"
  },
  {
    "text": "certain times where like your functionality might demand it like you may want to say like okay I'm done like",
    "start": "1790180",
    "end": "1795580"
  },
  {
    "text": "maybe okay so here's a use case basically I'm downloading images like",
    "start": "1795580",
    "end": "1801820"
  },
  {
    "text": "one after the other like I'm downloading ten images right I shoot out a call as each image comes I'm updating my views and hey image one",
    "start": "1801820",
    "end": "1808120"
  },
  {
    "text": "ready image two ready but at the very end what I want to do is I want to say like all your images are done I'm like",
    "start": "1808120",
    "end": "1813460"
  },
  {
    "text": "you know posting like a text view or something uncompleted would be a good way to do that now you could also just",
    "start": "1813460",
    "end": "1819040"
  },
  {
    "text": "like accumulate like the number of object that you are expecting and do it on next but that would not be the idiomatic way of doing that right so if",
    "start": "1819040",
    "end": "1825430"
  },
  {
    "text": "you did that on completed then that's good it's uncompleted tipic uncompleted",
    "start": "1825430",
    "end": "1831190"
  },
  {
    "text": "is typically where you want to do stuff where it says it's really done if you have something specific that needs to be",
    "start": "1831190",
    "end": "1836890"
  },
  {
    "text": "done when your observe completed like if you want to release objects or you want to do something uncompleted is probably",
    "start": "1836890",
    "end": "1841990"
  },
  {
    "text": "a good way to do it yeah question",
    "start": "1841990",
    "end": "1845910"
  },
  {
    "text": "aha I knew you're gonna ask that question so I actually have it written",
    "start": "1855210",
    "end": "1861160"
  },
  {
    "text": "on my notes you may say code that's shorter is generally good but that's never the case like when the number of",
    "start": "1861160",
    "end": "1868480"
  },
  {
    "text": "lines of code are small that doesn't necessarily mean it's a good thing and as I go through these examples it'll",
    "start": "1868480",
    "end": "1873970"
  },
  {
    "text": "make sense yes we have more lines oh by the way if I use a retrofit let me see if I use a retrofit like hey look at",
    "start": "1873970",
    "end": "1880270"
  },
  {
    "text": "that the number of lines have gone down right I mean so it helps there but the point is the",
    "start": "1880270",
    "end": "1886570"
  },
  {
    "text": "advantage with using rx Java is like once you have this pattern set you can do like a crazy amount of things like",
    "start": "1886570",
    "end": "1893440"
  },
  {
    "text": "you can go you can let's talk about like some of the air like some of the problems with an async task right like I",
    "start": "1893440",
    "end": "1899200"
  },
  {
    "text": "mean here you started this so I'm gonna like go through all of the problems in it she does this is like my terrible is like therapy session I'm going to",
    "start": "1899200",
    "end": "1904600"
  },
  {
    "text": "excited talking about all the horrible things in the async task okay I'll try to keep it short ever handling if you",
    "start": "1904600",
    "end": "1911320"
  },
  {
    "start": "1907000",
    "end": "2000000"
  },
  {
    "text": "had to like handle errors with async tasks how do you guys typically do it it's possible I mean it's not impossible",
    "start": "1911320",
    "end": "1916720"
  },
  {
    "text": "but how do you typically do it you would have to have maybe like a try-catch here on a network operation what do you do with that catch operation do you just",
    "start": "1916720",
    "end": "1923110"
  },
  {
    "text": "like throw it out no I mean if you want to handle it on your post execute you would basically have to have maybe I",
    "start": "1923110",
    "end": "1928600"
  },
  {
    "text": "don't know like a tuple or something that basically is caught in here and then you check to see if one part of the tuple has an exception if it has an",
    "start": "1928600",
    "end": "1935410"
  },
  {
    "text": "exception then you update the UI great what if I had multiple Network calls right like in our examine and all that",
    "start": "1935410",
    "end": "1941920"
  },
  {
    "text": "is like don't worry all that is just going to happen on the on error any error throughout the life like if you",
    "start": "1941920",
    "end": "1947590"
  },
  {
    "text": "have multiple observables running at any point of time if you have a single error it's gonna like whoop drop in all the",
    "start": "1947590",
    "end": "1954190"
  },
  {
    "text": "way and come into the on error that's like a huge advantage like you you shouldn't underestimate like the",
    "start": "1954190",
    "end": "1960190"
  },
  {
    "text": "advantage of having a neat API where it's sort of like encapsulate all this functionality error handling is one",
    "start": "1960190",
    "end": "1966730"
  },
  {
    "text": "thing lifecycle changes so I mean everyone knows with async tasks the problem is if your activity is going up",
    "start": "1966730",
    "end": "1973900"
  },
  {
    "text": "like if it's like an activity or a fragment is sort of like exiting like is going on stop and an async task sort of",
    "start": "1973900",
    "end": "1980620"
  },
  {
    "text": "like says hey go ahead and update this view and post execute this code alone without any",
    "start": "1980620",
    "end": "1985720"
  },
  {
    "text": "additional stuff is going to blow up on you because like your activity is no longer like alive you have to write extra code to make",
    "start": "1985720",
    "end": "1991600"
  },
  {
    "text": "sure where can I do anything with the activity can I do anything in the fragment is am I like at that point of",
    "start": "1991600",
    "end": "1996940"
  },
  {
    "text": "my life cycle where I can basically make UI changes which is not to say you have to do some of that code without",
    "start": "1996940",
    "end": "2003230"
  },
  {
    "start": "2000000",
    "end": "2231000"
  },
  {
    "text": "exhibition the way you do it in rx Java is like once you have that subscription on your on stop you call unsubscribe and",
    "start": "2003230",
    "end": "2009090"
  },
  {
    "text": "then you're guaranteed that none of the like the observe the observer base you've killed the connection so",
    "start": "2009090",
    "end": "2014430"
  },
  {
    "text": "basically that doesn't happen so it's a nicer way to do it with rx Java if I had to do that with the async tasks like",
    "start": "2014430",
    "end": "2020190"
  },
  {
    "text": "it's it is it's possible but it's fun yeah go ahead question",
    "start": "2020190",
    "end": "2025970"
  },
  {
    "text": "you could you could what if you had",
    "start": "2032620",
    "end": "2037670"
  },
  {
    "text": "multiple icing tasks the nested async tasks do you call cancel on like the outermost one or they flake you had",
    "start": "2037670",
    "end": "2044030"
  },
  {
    "text": "multiple did I repeat the question I do to be the question did I damn it okay so the question was why is it",
    "start": "2044030",
    "end": "2050419"
  },
  {
    "text": "basically harder like so if you have an async task object so like if you have get user info a task the question was",
    "start": "2050419",
    "end": "2057710"
  },
  {
    "text": "okay so like if I have on stop or on destroy and I have a reference to this task I could just call cancel on that I",
    "start": "2057710",
    "end": "2063408"
  },
  {
    "text": "think that's how you do it also right I mean yeah we chasing - that's how you do yeah you could do it but you have to",
    "start": "2063409",
    "end": "2069620"
  },
  {
    "text": "remember to do it if you do rx Java like again the thing okay so this may like this may seem sort of like convoluted",
    "start": "2069620",
    "end": "2075950"
  },
  {
    "text": "but once I learned this pattern is going to be the same throughout now I have like and I have like another like the",
    "start": "2075950",
    "end": "2082100"
  },
  {
    "text": "next example is going to be with timer tasks right but that has a different API like yes you can do it I'm not saying",
    "start": "2082100",
    "end": "2088128"
  },
  {
    "text": "you can't do it for sure you can do it I mean people have been doing it what what have people been doing before our Java right so you can do it",
    "start": "2088129",
    "end": "2094040"
  },
  {
    "text": "I feel the API is nicer and again so like to the other question that I had if you had nested async tasks you can",
    "start": "2094040",
    "end": "2101210"
  },
  {
    "text": "probably can you call cancel on an async task if it's already done then you can right so I guess that's how you would",
    "start": "2101210",
    "end": "2108320"
  },
  {
    "text": "handle it if you had like nested async tasks at some level yeah could probably handle like that but it I mean trust me",
    "start": "2108320",
    "end": "2114380"
  },
  {
    "text": "at that point the core is not looking pretty I mean like with with our example it's",
    "start": "2114380",
    "end": "2119750"
  },
  {
    "text": "like all there is just in one a single place right question",
    "start": "2119750",
    "end": "2126100"
  },
  {
    "text": "okay so let me repeat the question just correct me if I'm if I've understood the question incorrectly the question is",
    "start": "2134980",
    "end": "2141860"
  },
  {
    "text": "okay so once I exit my activity or like the the life cycle has come to a close",
    "start": "2141860",
    "end": "2147110"
  },
  {
    "text": "and I kill the connection so I call unsubscribe what happens to like the observe so I say like interesting stuff happens here",
    "start": "2147110",
    "end": "2154100"
  },
  {
    "text": "and what if like the network connection took like 20 seconds right and at second",
    "start": "2154100",
    "end": "2159260"
  },
  {
    "text": "number 10 the activity is like you've exited like the life cycle right so what",
    "start": "2159260",
    "end": "2164360"
  },
  {
    "text": "happens does it continue and come back yes the observable like to my knowledge the observable will complete what it's",
    "start": "2164360",
    "end": "2169880"
  },
  {
    "text": "supposed to do so it will finish that and to a connection but as it comes in so the observer like when it says okay",
    "start": "2169880",
    "end": "2176330"
  },
  {
    "text": "I'm ready to update the observer it because the connection is killed it's not going to happen",
    "start": "2176330",
    "end": "2181520"
  },
  {
    "text": "this can I say and this is actually like again like this is me trying to like sort of like pitch our Xterra versus",
    "start": "2181520",
    "end": "2187760"
  },
  {
    "text": "some of the other things that's actually a use case right like if you have a network operation that takes twenty seconds you don't keep doing that every",
    "start": "2187760",
    "end": "2193850"
  },
  {
    "text": "time right how would I do that with async tasks can I do that with async tasks yeah sure I could - the async task",
    "start": "2193850",
    "end": "2199700"
  },
  {
    "text": "in an object I could get the result put it in a singleton and then hold it possible but yeah if I wanted a cache",
    "start": "2199700",
    "end": "2205970"
  },
  {
    "text": "like this observable essentially if I say like hey do your stuff keep it ready",
    "start": "2205970",
    "end": "2212210"
  },
  {
    "text": "and then I can subscribe at any point from any place to the same observer it'll still work because you can",
    "start": "2212210",
    "end": "2218330"
  },
  {
    "text": "reestablish a new subscription okay questions I don't know who okay so I saw you first I'm going to do that first",
    "start": "2218330",
    "end": "2225670"
  },
  {
    "text": "okay so that's like one point for Alicia",
    "start": "2241360",
    "end": "2246580"
  },
  {
    "text": "so uh you mean how asynctasks help or so",
    "start": "2248890",
    "end": "2255230"
  },
  {
    "text": "if you cash so there's like this operator called cash if you cash the operator it won't reacts acute the connection you",
    "start": "2255230",
    "end": "2262250"
  },
  {
    "text": "can establish the connection again right you can say hey execute this network connection if it's cashed it'll",
    "start": "2262250",
    "end": "2267920"
  },
  {
    "text": "basically spit out the last result that it has so it will avoid having to go through that whole network connection",
    "start": "2267920",
    "end": "2273410"
  },
  {
    "text": "again does that make sense okay",
    "start": "2273410",
    "end": "2278530"
  },
  {
    "text": "okay so the question was okay so assuming you have started the network call and now you have like rotated your",
    "start": "2288690",
    "end": "2295540"
  },
  {
    "text": "screen and then you have like entered into the new activity your question is like okay how do I like listen back do",
    "start": "2295540",
    "end": "2302950"
  },
  {
    "text": "that so you have your observer you have a reference to the observable right you",
    "start": "2302950",
    "end": "2308000"
  },
  {
    "text": "establish a new connection so if you have like a new if it's rotated then it's probably going to be the same observer but if it was like I know if",
    "start": "2308000",
    "end": "2313970"
  },
  {
    "text": "your layouts are different by you have like a different fragment so in the fragment in question where you basically want to like you you have to like",
    "start": "2313970",
    "end": "2321680"
  },
  {
    "text": "establish a new connection so you have this reference available you connect back to this guy and only after it isn't",
    "start": "2321680",
    "end": "2328220"
  },
  {
    "text": "because you're saying it would take five seconds so at second number two it's not going to show anything right like you",
    "start": "2328220",
    "end": "2334160"
  },
  {
    "text": "can maybe mark it you can mark it as saying like okay it's in progress or something but only after like second",
    "start": "2334160",
    "end": "2339440"
  },
  {
    "text": "number three will you get like the completed call so until then it's not going to have anything to show yeah",
    "start": "2339440",
    "end": "2344690"
  },
  {
    "text": "there were a couple sorry it looks like a loader I haven't used loaders enough",
    "start": "2344690",
    "end": "2351620"
  },
  {
    "text": "so that we okay so I guess like the question was it looks like a loader possibly I've heard I've heard some",
    "start": "2351620",
    "end": "2357860"
  },
  {
    "text": "people say that thank God for our exam I don't have to use loaders anymore so I'm guessing it maybe does many of the",
    "start": "2357860",
    "end": "2364850"
  },
  {
    "text": "similar things I haven't used loaders enough to maybe make a qualified sort of judgment if it's the same or not",
    "start": "2364850",
    "end": "2372970"
  },
  {
    "text": "how about we like sort of like quickly like I know someone out there who had a question yes questions what about retrying so uh yeah",
    "start": "2374240",
    "end": "2383930"
  },
  {
    "text": "what about we trying o rxl so basically ok so the question is how do you retry",
    "start": "2383930",
    "end": "2391580"
  },
  {
    "text": "with rxjava alexavic has this thing called has an operator called retry and",
    "start": "2391580",
    "end": "2396760"
  },
  {
    "text": "it does retry now yeah Alex Alva also has like a bunch of super complex things",
    "start": "2396760",
    "end": "2403100"
  },
  {
    "text": "it has a retry when so how many of you know what exponential back-off is okay",
    "start": "2403100",
    "end": "2409220"
  },
  {
    "text": "so basically what exponential back-off is is assuming you have you tree you try",
    "start": "2409220",
    "end": "2414290"
  },
  {
    "text": "once and then maybe like your network is down so you don't retry again like in one second you want to retry maybe like",
    "start": "2414290",
    "end": "2420770"
  },
  {
    "text": "in two seconds okay you retry in two seconds again like now but you haven't heard back from like this server maybe",
    "start": "2420770",
    "end": "2427130"
  },
  {
    "text": "the server is down you don't try again in two seconds you aim you maybe want to try in five seconds right so that's",
    "start": "2427130",
    "end": "2432440"
  },
  {
    "text": "basically exponential back-off so as you keep increasing it sort of like increases this time span this is super",
    "start": "2432440",
    "end": "2438500"
  },
  {
    "text": "hard by the way to do it I mean I've had to do like exponential back-off without our Xterra again it's possible I'm not",
    "start": "2438500",
    "end": "2444290"
  },
  {
    "text": "saying it's not possible it's very hard but with our example you have this operator called retry when and it's",
    "start": "2444290",
    "end": "2450170"
  },
  {
    "text": "again this is a little more like you have to understand the theory to sort of like you know how it works but with retry when I can point it to an",
    "start": "2450170",
    "end": "2455930"
  },
  {
    "text": "observable and then say okay only when this observe basically returns something like start retrying and in that I can",
    "start": "2455930",
    "end": "2463369"
  },
  {
    "text": "basically control like this operation so you can do exponential back-off so basic retrying is like super simple you have",
    "start": "2463369",
    "end": "2469940"
  },
  {
    "text": "an operator that says retry add like 1 you add the parameters the ill-starred",
    "start": "2469940",
    "end": "2475190"
  },
  {
    "text": "retrying but you can also do like super complex stuff where you have exponential exponentially backing of a train",
    "start": "2475190",
    "end": "2482260"
  },
  {
    "text": "questions yes please",
    "start": "2482260",
    "end": "2486550"
  },
  {
    "start": "2492000",
    "end": "2741000"
  },
  {
    "text": "yeah so one again so this is an important point and thank you thank you so much so",
    "start": "2497310",
    "end": "2505750"
  },
  {
    "text": "the question was okay API dot get user is basically going to hold a reference right in our observer out here you can",
    "start": "2505750",
    "end": "2512170"
  },
  {
    "text": "see I've used I've intentionally used like Java six basically just because like I wanted to be easy for most people",
    "start": "2512170",
    "end": "2518200"
  },
  {
    "text": "to use like I don't think most people use a eight where you have lambdas right so the problem is you have a lot of like",
    "start": "2518200",
    "end": "2525190"
  },
  {
    "text": "anonymous inner classes and whenever you have an anonymous inner class the the",
    "start": "2525190",
    "end": "2532090"
  },
  {
    "text": "problem is basically that it holds a reference to your activity right so if you have this network connection going",
    "start": "2532090",
    "end": "2538330"
  },
  {
    "text": "on and then you come back so your",
    "start": "2538330",
    "end": "2544060"
  },
  {
    "text": "question was okay so you have a reference to this your question is okay I'm executing this network connection I",
    "start": "2544060",
    "end": "2549610"
  },
  {
    "text": "have an anonymous inner class that has a reference to this when does it go away",
    "start": "2549610",
    "end": "2554880"
  },
  {
    "text": "my is that your question",
    "start": "2554880",
    "end": "2558630"
  },
  {
    "text": "what cases would you keep the references okay mm-hmm I don't think I understood",
    "start": "2561050",
    "end": "2574230"
  },
  {
    "text": "your question exactly so you okay so",
    "start": "2574230",
    "end": "2579600"
  },
  {
    "text": "your point is obviously the your questions at what point does it actually get released",
    "start": "2579600",
    "end": "2585500"
  },
  {
    "text": "right so you're basically going to have reference to the activity in any of these you know like in these inner and anonymous inner classes so my",
    "start": "2594410",
    "end": "2600740"
  },
  {
    "text": "understanding I've asked some super smart people about this and essentially the thing is when you unsubscribe it",
    "start": "2600740",
    "end": "2606590"
  },
  {
    "text": "will get garbage collected you've released like the references I can't go into the theory because I don't know it",
    "start": "2606590",
    "end": "2612650"
  },
  {
    "text": "as well but basically when you say unsubscribe you are basically releasing the references inside that doesn't mean",
    "start": "2612650",
    "end": "2619730"
  },
  {
    "text": "goes away immediately but the references are eventually going to go away once you unsubscribe",
    "start": "2619730",
    "end": "2626619"
  },
  {
    "text": "when the garbage collection happens because you are basically saying okay release the reference at this point when",
    "start": "2627080",
    "end": "2632850"
  },
  {
    "text": "you unsubscribe right my okay so your",
    "start": "2632850",
    "end": "2642060"
  },
  {
    "text": "question is my function one is still going to be alive for 30 seconds",
    "start": "2642060",
    "end": "2649130"
  },
  {
    "text": "the problems I didn't quite catch either the answer that was given orally the question entirely right let's do one",
    "start": "2662299",
    "end": "2667729"
  },
  {
    "text": "thing let's like push it off to the end because I've got like through one example I have like another four examples let's bring the question up",
    "start": "2667729",
    "end": "2673759"
  },
  {
    "text": "again yeah any other quick questions I can handle at this point or shall we move to the next example",
    "start": "2673759",
    "end": "2678939"
  },
  {
    "text": "really quick question okay what was uncle oh I need to speak",
    "start": "2678939",
    "end": "2685120"
  },
  {
    "text": "if uncompleted is called do you need to explicitly unsubscribe I do it I usually unsubscribe do I need to",
    "start": "2685120",
    "end": "2693960"
  },
  {
    "text": "let's live up this I know yeah I mean well the answer is not quick I mean so the thing is eventually I think it will",
    "start": "2699030",
    "end": "2706570"
  },
  {
    "text": "get released you don't need to if it gets on company actually I don't think you need to if it completes fast enough you don't need to because there have",
    "start": "2706570",
    "end": "2712720"
  },
  {
    "text": "been cases where I haven't had a subscription and again smarter people have told me if it's quick enough then",
    "start": "2712720",
    "end": "2719230"
  },
  {
    "text": "you don't need to worry about it but I unsubscribe anyway just to be safe okay let's get back asked me the",
    "start": "2719230",
    "end": "2727750"
  },
  {
    "text": "question in the end I can maybe point you to like a reference is that where because I've had these are like chats I've had online I can maybe like give",
    "start": "2727750",
    "end": "2733720"
  },
  {
    "text": "you a reference to like some of the things that they've said and you can take it up with them okay so depth to",
    "start": "2733720",
    "end": "2741610"
  },
  {
    "start": "2741000",
    "end": "3109000"
  },
  {
    "text": "asynctasks depth to timer tasks let's look at this example now this is a very typical sort",
    "start": "2741610",
    "end": "2747340"
  },
  {
    "text": "of example essentially what I'm trying to do is I have a timer I'm scheduling",
    "start": "2747340",
    "end": "2752740"
  },
  {
    "text": "this at a fixed rate and what I'm doing is okay with a delay of okay so with",
    "start": "2752740",
    "end": "2759370"
  },
  {
    "text": "actually zero delay at this interval I want to constantly keep repeating this",
    "start": "2759370",
    "end": "2764680"
  },
  {
    "text": "action do something it's basically like a polling sort of example rate how would",
    "start": "2764680",
    "end": "2771010"
  },
  {
    "text": "I convert this to rx Java the first thing is okay what's the interesting thing that's happening here in this",
    "start": "2771010",
    "end": "2777130"
  },
  {
    "text": "example the interesting thing is actually like the polling right like you have a zero delay and you're constantly",
    "start": "2777130",
    "end": "2782230"
  },
  {
    "text": "polling every three seconds so they're going to like use that to be our",
    "start": "2782230",
    "end": "2787450"
  },
  {
    "text": "observable rx Java has this really convenient operator called timer right",
    "start": "2787450",
    "end": "2792760"
  },
  {
    "text": "in timer you can provide it with essentially two parameters but it's the third one is to indicate like what the",
    "start": "2792760",
    "end": "2798610"
  },
  {
    "text": "unit is so you have this as your start delay and this is your polling interval which is the basic same thing that you",
    "start": "2798610",
    "end": "2805180"
  },
  {
    "text": "have here okay so that's your observable notice how like the API is like very",
    "start": "2805180",
    "end": "2810400"
  },
  {
    "text": "very similar to like the previous example right I have an observable I basically have a timer operator my",
    "start": "2810400",
    "end": "2816220"
  },
  {
    "text": "observable is saying okay I having something interesting happening now every every poll interval which is",
    "start": "2816220",
    "end": "2822280"
  },
  {
    "text": "basically three seconds given that I have this observable what do I want to",
    "start": "2822280",
    "end": "2827440"
  },
  {
    "text": "do according to this example basically I've got a little lazy here and said okay just do something here so basically",
    "start": "2827440",
    "end": "2833590"
  },
  {
    "text": "the same do something here is going to happen on next and that's it this is",
    "start": "2833590",
    "end": "2838990"
  },
  {
    "text": "basically how you so it's very similar to the async task I mean the conversion to rx Java is very similar and this is",
    "start": "2838990",
    "end": "2846880"
  },
  {
    "text": "basically all you have to do now let's look at the other interesting part here which is how you cancel stuff right so",
    "start": "2846880",
    "end": "2852610"
  },
  {
    "text": "you have a timer here and you can cancel out here if I had to do the equivalent in our X",
    "start": "2852610",
    "end": "2857950"
  },
  {
    "text": "Java I have my subscription over there in the end I basically call unsubscribe",
    "start": "2857950",
    "end": "2863610"
  },
  {
    "text": "question is uncompleted call on a saree",
    "start": "2863610",
    "end": "2870310"
  },
  {
    "text": "seller again now in this case basically",
    "start": "2870310",
    "end": "2876820"
  },
  {
    "text": "it would depend on the operator it's actually not going to uncomplete because timer essentially is like a polling",
    "start": "2876820",
    "end": "2882820"
  },
  {
    "text": "thing so it's constant this this is where you get into what hot observables and cold observables are basically in",
    "start": "2882820",
    "end": "2888640"
  },
  {
    "text": "this case it's not going to call on it's never going to reach uncompleted if I remember the timer operator example yeah",
    "start": "2888640",
    "end": "2894940"
  },
  {
    "text": "in this case it's going to constantly keep polling so it's not going to reach uncompleted which is why it's actually crucial in this point to call and",
    "start": "2894940",
    "end": "2901510"
  },
  {
    "text": "subscribe because if you don't is going to keep running in the background and that's like a super huge problem ok so",
    "start": "2901510",
    "end": "2910300"
  },
  {
    "text": "this is basically so notice how it's very similar a like it's super similar to like the previous example there is",
    "start": "2910300",
    "end": "2916870"
  },
  {
    "text": "something interesting here though what's interesting here notice how like",
    "start": "2916870",
    "end": "2924089"
  },
  {
    "text": "in Iowa I always told you they're like three sort of like principal concepts that you need I don't have concurrency",
    "start": "2924089",
    "end": "2930810"
  },
  {
    "text": "here right like I haven't set up concurrency and I wanted to bring this point if I did any UI activity here as",
    "start": "2930810",
    "end": "2935970"
  },
  {
    "text": "you know it's going to blow up again right but it's important to realize that certain operators by default operate on",
    "start": "2935970",
    "end": "2943230"
  },
  {
    "text": "different schedulers right certain operators have like a specific default scheduler so unless you explicitly point",
    "start": "2943230",
    "end": "2949740"
  },
  {
    "text": "to a scheduler sometimes it's it's going to have unexpected results right so I",
    "start": "2949740",
    "end": "2954810"
  },
  {
    "text": "wanted to bring it in this case in this case I'm not really doing anything to my UI so this example will just run right because in the example that I wrote I",
    "start": "2954810",
    "end": "2960990"
  },
  {
    "text": "was just basically logging into a console so in this case it wouldn't really matter but just keep that in mind",
    "start": "2960990",
    "end": "2966210"
  },
  {
    "text": "always 1 2 3 always had three steps you have the observable you have the observer and essentially you have",
    "start": "2966210",
    "end": "2971910"
  },
  {
    "text": "concurrency setup okay so this is the second example now the advantage that I",
    "start": "2971910",
    "end": "2978210"
  },
  {
    "text": "the reason I chose timer tasks is because you can actually do some really cool stuff right with timer the operator",
    "start": "2978210",
    "end": "2983970"
  },
  {
    "text": "I can basically say okay execute this task after a certain delay right and the",
    "start": "2983970",
    "end": "2989670"
  },
  {
    "text": "way you do that is with this the example that I just talked about is basically I can also say hey do it with a start",
    "start": "2989670",
    "end": "2995730"
  },
  {
    "text": "delay but also provide this interval so keep after a certain delay keep executing this task every X number of",
    "start": "2995730",
    "end": "3002660"
  },
  {
    "text": "seconds which is basically the polling interval right this is basically a nicer",
    "start": "3002660",
    "end": "3007670"
  },
  {
    "text": "API it does the it does the same thing no actually doesn't do the same thing here you don't have a delay with",
    "start": "3007670",
    "end": "3012890"
  },
  {
    "text": "interval if I say you know what I don't want an interval every 10 seconds just keep executing this task then this is",
    "start": "3012890",
    "end": "3018500"
  },
  {
    "text": "basically the API that you want to use the advantage with composing rx Java",
    "start": "3018500",
    "end": "3024950"
  },
  {
    "text": "operators is I can do something like this so I can say hey okay do this every 10 seconds right so I have a polling",
    "start": "3024950",
    "end": "3031369"
  },
  {
    "text": "interval every 10 seconds keep doing this but you know what take only the first 20 actions so I have an operator",
    "start": "3031369",
    "end": "3038060"
  },
  {
    "text": "that says take 20 and what it's going to do is is every 5 or 10 seconds it's going to constantly perform your action",
    "start": "3038060",
    "end": "3044089"
  },
  {
    "text": "is going to spit out events the minute it collects 20 events it's going to complete so your question was when does",
    "start": "3044089",
    "end": "3049760"
  },
  {
    "text": "it complete in this case if I had take 20 it would actually hit on complete - right I can additionally do multiple",
    "start": "3049760",
    "end": "3055520"
  },
  {
    "text": "things I can say like because it's composable I can I can take like what gets spit out in this case with the",
    "start": "3055520",
    "end": "3061190"
  },
  {
    "text": "interval it spits out like a time not a timestamp it's going to spit out like integers like I think it's 1 or 1 2 3",
    "start": "3061190",
    "end": "3067130"
  },
  {
    "text": "this is where it's probably a good thing to look into the documentation because it is a little different you can also",
    "start": "3067130",
    "end": "3072620"
  },
  {
    "text": "specify time stunts saying like hey I want to hear the timestamps but basically you can essentially compose",
    "start": "3072620",
    "end": "3079310"
  },
  {
    "text": "operators left and right you have a timer you can say take 20 map that sucker flat map you can do a whole bunch",
    "start": "3079310",
    "end": "3084740"
  },
  {
    "text": "of things that's like the advantage with the timer tasks that's the advantage",
    "start": "3084740",
    "end": "3089840"
  },
  {
    "text": "with our X Java using the timer operator okay so I want to quickly do one thing",
    "start": "3089840",
    "end": "3096260"
  },
  {
    "text": "I'm going to switch to a genymotion emulator what I've done is basically",
    "start": "3096260",
    "end": "3101300"
  },
  {
    "text": "have sort of like written these basic example well nothing shiny opposites",
    "start": "3101300",
    "end": "3107680"
  },
  {
    "start": "3109000",
    "end": "3412000"
  },
  {
    "text": "this there is an easy way to solve this I'm going to turn display mirroring on",
    "start": "3113740",
    "end": "3119359"
  },
  {
    "text": "okay that'd look better okay so I have a couple of examples that have certain",
    "start": "3119359",
    "end": "3124849"
  },
  {
    "text": "I've written in our Xterra one of this is this variation of timing and interval right so button one",
    "start": "3124849",
    "end": "3131510"
  },
  {
    "text": "basically what it does is it runs like it's very similar to what I just pointed you to button one all it does is it runs",
    "start": "3131510",
    "end": "3137270"
  },
  {
    "text": "out a certain delay so if you carefully watch this I hit button it says button click and",
    "start": "3137270",
    "end": "3142430"
  },
  {
    "text": "after two seconds it's going to hit next and because I because I've said because",
    "start": "3142430",
    "end": "3149210"
  },
  {
    "text": "the very first API that I showed which is observable timer all it does is it executes after a certain delay and it",
    "start": "3149210",
    "end": "3155839"
  },
  {
    "text": "completes and that's basically what you can see in the logs here is does that look visible okay so you have button",
    "start": "3155839",
    "end": "3162619"
  },
  {
    "text": "click there's a two-second delay at which point next is called and finally",
    "start": "3162619",
    "end": "3167750"
  },
  {
    "text": "completed its call this example does something this is like the second a pair that I pointed to essentially what it",
    "start": "3167750",
    "end": "3174049"
  },
  {
    "text": "does is it says hey every one second just keep doing this so if the way I've implemented it is it's a toggle button",
    "start": "3174049",
    "end": "3180980"
  },
  {
    "text": "so unless I hit toggle it's never going to complete so it has like next being called completely right so if I hit next",
    "start": "3180980",
    "end": "3186319"
  },
  {
    "text": "it basically kills this so all these use the timer API I have not used anything different like",
    "start": "3186319",
    "end": "3191690"
  },
  {
    "text": "everything just uses the time array but just see like the versatility of the worst utility of like the kind of",
    "start": "3191690",
    "end": "3198200"
  },
  {
    "text": "functions you can do with just the timer operator there are a couple of other examples as well but I really am running",
    "start": "3198200",
    "end": "3205099"
  },
  {
    "text": "out of time so I want to quickly touch some of the other ones I how about this",
    "start": "3205099",
    "end": "3213260"
  },
  {
    "text": "I'm going to show you two examples tell me which is more interesting one and we'll basically look at the",
    "start": "3213260",
    "end": "3218450"
  },
  {
    "text": "implementation of that right so there are two examples here this is a very",
    "start": "3218450",
    "end": "3224300"
  },
  {
    "text": "common case right so if you have like a sort of autocomplete kind of functionality right if you type if you",
    "start": "3224300",
    "end": "3231830"
  },
  {
    "text": "type a text character like I'm going to type B I'm going to type r I'm going to",
    "start": "3231830",
    "end": "3236960"
  },
  {
    "text": "try to I'm going to type C so if you have like an autocomplete search box",
    "start": "3236960",
    "end": "3242150"
  },
  {
    "text": "right a very common functionality is like you have a bunch of characters and then you shoot out a network call and",
    "start": "3242150",
    "end": "3247280"
  },
  {
    "text": "you show a bunch of results right what do you want to do is you want to be a little intelligent about this like if",
    "start": "3247280",
    "end": "3252710"
  },
  {
    "text": "the user is typing pretty fast what do you want to do is you want to give them like sort of some time to understand",
    "start": "3252710",
    "end": "3258590"
  },
  {
    "text": "like all the characters bunch it up and then shoot out a single network all right that's like a nice it's a nice UI",
    "start": "3258590",
    "end": "3263810"
  },
  {
    "text": "it's a sensible thing to do right you can do that with our exam super easily so if you notice here let",
    "start": "3263810",
    "end": "3269870"
  },
  {
    "text": "me clear this out I'm going to type Bruce Lee and you can see it collects",
    "start": "3269870",
    "end": "3275420"
  },
  {
    "text": "everything in just like one single thing right does this make sense this is actually pretty cool",
    "start": "3275420",
    "end": "3281120"
  },
  {
    "text": "in order to implement this I had to like again use like async tasks and there was like a lot of timing thing it was",
    "start": "3281120",
    "end": "3286340"
  },
  {
    "text": "possible but it was not very straightforward but with our X Java it's like a single operator it's called debounce that's like the",
    "start": "3286340",
    "end": "3292190"
  },
  {
    "text": "operator and it's very useful for this case specific right so you can you can do some pretty cool stuff with the",
    "start": "3292190",
    "end": "3298700"
  },
  {
    "text": "debounce operator that's one example the other example is a form validation right",
    "start": "3298700",
    "end": "3304070"
  },
  {
    "text": "so I have this super simple form here and essentially unless all three inputs",
    "start": "3304070",
    "end": "3310010"
  },
  {
    "text": "are valid like my submit button isn't going to highlight right so let's enter something here I have an email here",
    "start": "3310010",
    "end": "3318850"
  },
  {
    "text": "okay eight characters so let's six seven eight I have a number just a",
    "start": "3320880",
    "end": "3328650"
  },
  {
    "text": "random number between one and hundred so let me enter 101 so you notice here what",
    "start": "3328650",
    "end": "3334920"
  },
  {
    "text": "basically happens is it collects all the inputs and it tells me what's wrong so",
    "start": "3334920",
    "end": "3340559"
  },
  {
    "text": "if I correct that if I correct the inputs here this is why is this an",
    "start": "3340559",
    "end": "3346349"
  },
  {
    "text": "invalid oh so it's greater than eight characters so if I hit nine the button highlights right if I at any point if I",
    "start": "3346349",
    "end": "3352589"
  },
  {
    "text": "change this number it's going to like again go back to the error condition if",
    "start": "3352589",
    "end": "3357750"
  },
  {
    "text": "I have ten five one zero then if my email becomes invalid at any",
    "start": "3357750",
    "end": "3365569"
  },
  {
    "text": "point basically sort of combines this the way it does the way it does the way I've implemented this is using this",
    "start": "3365569",
    "end": "3372619"
  },
  {
    "text": "operator called combine latest right so it takes the inputs from this box",
    "start": "3372619",
    "end": "3378799"
  },
  {
    "text": "it takes the inputs from this box it takes the inputs from this box it collects all of them together and based",
    "start": "3378799",
    "end": "3384140"
  },
  {
    "text": "on any condition that I provide I can say okay light up this submit box only",
    "start": "3384140",
    "end": "3389689"
  },
  {
    "text": "after a bunch of these inputs are valued right so that's using the combined latest operators I think I'll have time",
    "start": "3389689",
    "end": "3395929"
  },
  {
    "text": "to explain only one of them which one seems more interesting to you guys",
    "start": "3395929",
    "end": "3400959"
  },
  {
    "text": "combined latest okay cool combined latest okay this is another",
    "start": "3400959",
    "end": "3413600"
  },
  {
    "start": "3412000",
    "end": "3599000"
  },
  {
    "text": "reason to use rx Android right with rx Android you have this thing called a widget observable and essentially what",
    "start": "3413600",
    "end": "3420650"
  },
  {
    "text": "you can do is you can point and edit text to this visit observable and what it spits out on the other side is an",
    "start": "3420650",
    "end": "3427210"
  },
  {
    "text": "observable of on text change event so on takes change event is a common thing that Android developers probably are",
    "start": "3427210",
    "end": "3433820"
  },
  {
    "text": "familiar with right so all I have to do is I have this this is a normal a very simple vanilla edit text I use this and",
    "start": "3433820",
    "end": "3442190"
  },
  {
    "text": "what it gives me is an observable of some events what is that event that event is basically any changes to the edit text",
    "start": "3442190",
    "end": "3449240"
  },
  {
    "text": "comes out as an observer right so I have the email change observable so I had three edit text in the example if you",
    "start": "3449240",
    "end": "3455840"
  },
  {
    "text": "remember right so I have I have an observable point into each of these edit",
    "start": "3455840",
    "end": "3461390"
  },
  {
    "text": "text inputs now if you try to think about like the",
    "start": "3461390",
    "end": "3466619"
  },
  {
    "text": "concept where you have an observable you have something interesting and then in the end you want like an observer that sort of like observes all of this",
    "start": "3466619",
    "end": "3472740"
  },
  {
    "text": "interesting stuff right the way I have it implemented here is this is your",
    "start": "3472740",
    "end": "3478740"
  },
  {
    "text": "observable you have combined latest I'm providing it with three observables so I have like the email change like from the",
    "start": "3478740",
    "end": "3485190"
  },
  {
    "text": "last slide the password change and the number change as a fourth parameter basically I would pass in a funk 3 which",
    "start": "3485190",
    "end": "3491279"
  },
  {
    "text": "is again like an inner anonymous inner class I've shortened it to like the IntelliJ like syntax here just because",
    "start": "3491279",
    "end": "3497549"
  },
  {
    "text": "it didn't fit in the slide or if you used if you use retro lambda or the sort",
    "start": "3497549",
    "end": "3502859"
  },
  {
    "text": "then makes it look much better but basically it combines all of these three and inside that function what I'm doing",
    "start": "3502859",
    "end": "3511289"
  },
  {
    "text": "is I'm checking to see if the email is valid so I have email valid as a boolean here this is the on text this is the on",
    "start": "3511289",
    "end": "3518609"
  },
  {
    "text": "email change event this is the event that I get from the observer so this is",
    "start": "3518609",
    "end": "3524369"
  },
  {
    "text": "what it's spitting out to me right if I do a dot text on that I think it's dot text dot - string if I do that I",
    "start": "3524369",
    "end": "3530609"
  },
  {
    "text": "basically get the characters that were presented to me so I check to see if the email is valid this is a very standard",
    "start": "3530609",
    "end": "3536750"
  },
  {
    "text": "mechanism I use a matcher to see if like the email is valid the important point here is basically I try to see if the",
    "start": "3536750",
    "end": "3542849"
  },
  {
    "text": "email is valid if the email is not valid I basically set so this email is",
    "start": "3542849",
    "end": "3548250"
  },
  {
    "text": "basically the edit text I set an error on that same invalid email I do the same",
    "start": "3548250",
    "end": "3553859"
  },
  {
    "text": "thing for a password so if is the password a valid thing it's a very similar process how I do it is not",
    "start": "3553859",
    "end": "3560279"
  },
  {
    "text": "important like how I calculate if it's valid or not what's important is I have another boolean that says pass valid I",
    "start": "3560279",
    "end": "3565770"
  },
  {
    "text": "do a very similar process for like the third thing the number and in the end",
    "start": "3565770",
    "end": "3570809"
  },
  {
    "text": "what I return from this observable so combined latest takes in three events and what I have to do is in the end I",
    "start": "3570809",
    "end": "3577289"
  },
  {
    "text": "have to spit out something right the way I have chosen to do it is I'm spitting out a boolean variable and if this",
    "start": "3577289",
    "end": "3582990"
  },
  {
    "text": "boolean comes out to be 2 that means all three inputs are valid if it's not if or if even one of them is false the",
    "start": "3582990",
    "end": "3589589"
  },
  {
    "text": "condition is going to end up being false and so the final output that I get is false right so",
    "start": "3589589",
    "end": "3595780"
  },
  {
    "text": "that's the observable part of this whole thing if you want to implement the",
    "start": "3595780",
    "end": "3600790"
  },
  {
    "text": "observer basically you have the very same syntax that you've seen before I have a I have like an observer and on",
    "start": "3600790",
    "end": "3608380"
  },
  {
    "text": "next I get this boolean variable so this is the this is the boolean variable that I like I sort of expected from the",
    "start": "3608380",
    "end": "3614470"
  },
  {
    "text": "observable right that comes in on my own next and if you can see I've written like a nice helper here but basically",
    "start": "3614470",
    "end": "3620470"
  },
  {
    "text": "just lights up the submit button I check to see is the form valid if it's valid turn it valid if it's not don't this one",
    "start": "3620470",
    "end": "3628390"
  },
  {
    "text": "wants to this though if you noticed the example",
    "start": "3628390",
    "end": "3633930"
  },
  {
    "text": "when I started out the example Oh",
    "start": "3633930",
    "end": "3638520"
  },
  {
    "text": "okay when I started out the example it basically didn't tell me anything so if",
    "start": "3643970",
    "end": "3649920"
  },
  {
    "text": "you look at this code like I showed you right shouldn't that shouldn't it have basically lit up or like showed the",
    "start": "3649920",
    "end": "3656160"
  },
  {
    "text": "error you would expect that right because like I have an email here I'm entering an email let's make this email",
    "start": "3656160",
    "end": "3662190"
  },
  {
    "text": "invalid I have characters here clearly this is valid I have 50",
    "start": "3662190",
    "end": "3669160"
  },
  {
    "text": "only after the very end does it actually spit out that you know why",
    "start": "3669160",
    "end": "3676470"
  },
  {
    "text": "it does not have to do with the validity of the characters because it is like the",
    "start": "3678330",
    "end": "3683680"
  },
  {
    "text": "validity is being checked but if if it was checking the length right then this thing should have lit up right as I",
    "start": "3683680",
    "end": "3691000"
  },
  {
    "text": "switched to the next ed attack exactly so that's basically what",
    "start": "3691000",
    "end": "3696330"
  },
  {
    "text": "combined latest is right combined latest explicitly combines the latest of all",
    "start": "3696330",
    "end": "3701520"
  },
  {
    "text": "three of the observable so even if one of them is spitting out events it's not going to care it's going to collect",
    "start": "3701520",
    "end": "3707310"
  },
  {
    "text": "events from the first one from the second one from the third one and in the end it's going to pick up only the last",
    "start": "3707310",
    "end": "3712770"
  },
  {
    "text": "event from each of these observers does that make sense so only after sorry give",
    "start": "3712770",
    "end": "3718560"
  },
  {
    "text": "me a question give me a minute only after all of these three events are collected do I ever like go back to the",
    "start": "3718560",
    "end": "3726450"
  },
  {
    "text": "observer and actually turn the form to I turn the button to either a valid button or an invalid button right question Oh",
    "start": "3726450",
    "end": "3735020"
  },
  {
    "text": "once all the observables okay",
    "start": "3736340",
    "end": "3741710"
  },
  {
    "text": "yes okay so the question was okay",
    "start": "3741710",
    "end": "3750290"
  },
  {
    "text": "assuming events are like only so assuming an event is emitted from all of",
    "start": "3750290",
    "end": "3756330"
  },
  {
    "text": "the of assuming an event has not been emitted from each of the three",
    "start": "3756330",
    "end": "3761460"
  },
  {
    "text": "observables do I get the function call the answer is no only after each of them have emitted at least one event do I",
    "start": "3761460",
    "end": "3769140"
  },
  {
    "text": "land up in the observer okay hmm",
    "start": "3769140",
    "end": "3775609"
  },
  {
    "text": "absolutely so the question was okay once the process that I just explained",
    "start": "3777380",
    "end": "3783869"
  },
  {
    "text": "happens if I get another event does it call the function again absolutely",
    "start": "3783869",
    "end": "3788940"
  },
  {
    "text": "that's the whole point like if you see in this example rate it is spitting out an event the the email is still pretty",
    "start": "3788940",
    "end": "3795330"
  },
  {
    "text": "much invalid right only after I hit this does it become so which means like it's gone through the function once and then",
    "start": "3795330",
    "end": "3801869"
  },
  {
    "text": "it's like processing each of these events right that's like the whole point of the combined latest question",
    "start": "3801869",
    "end": "3807890"
  },
  {
    "text": "basically you you are refacing what exactly happens with combine latest the only difference with that is it's the",
    "start": "3820520",
    "end": "3828320"
  },
  {
    "text": "very first time all three events oh yeah it's pretty much the same thing that you said but all could like the very first",
    "start": "3828320",
    "end": "3834050"
  },
  {
    "text": "time that all of the three events when you like the way you mentioned it it made me feel like it takes basically",
    "start": "3834050",
    "end": "3839360"
  },
  {
    "text": "once all the events are there it takes the next event no it isn't the next event the minute all three omit at least",
    "start": "3839360",
    "end": "3844640"
  },
  {
    "text": "one event your very first event is triggered does that make sense",
    "start": "3844640",
    "end": "3849790"
  },
  {
    "text": "exactly it inspects the state of each and every single observable once all of them have emitted at least one event it",
    "start": "3850300",
    "end": "3857300"
  },
  {
    "text": "collects all of those events and passes it down to a function subsequently any other event that comes in is going to do",
    "start": "3857300",
    "end": "3863330"
  },
  {
    "text": "the same process right make sense that's the combined later",
    "start": "3863330",
    "end": "3868720"
  },
  {
    "text": "question okay right you would probably",
    "start": "3868720",
    "end": "3881860"
  },
  {
    "text": "have to use I guess a different operator you can use maybe okay sorry the question was what's the workaround to",
    "start": "3881860",
    "end": "3888790"
  },
  {
    "text": "doing this right like assuming I sherilee want the event to be triggered after every field there are different",
    "start": "3888790",
    "end": "3897550"
  },
  {
    "text": "ways you can do it I mean I can think the zip operator is a good way right so like you can zip all the events together the minute you get an event you have to",
    "start": "3897550",
    "end": "3904960"
  },
  {
    "text": "like inspect the state of each edit text because again like so what would your",
    "start": "3904960",
    "end": "3910120"
  },
  {
    "text": "requirement be so the minute you tab out of the edit text do you want to like check it for that one alone and then tab",
    "start": "3910120",
    "end": "3915880"
  },
  {
    "text": "out of the second one you want to check for that one alone and then the third one and then you want to collect the results at that point your basic yeah",
    "start": "3915880",
    "end": "3921670"
  },
  {
    "text": "combined laters won't help you at that point because I combined me this helps the you're like let the user do whatever",
    "start": "3921670",
    "end": "3926860"
  },
  {
    "text": "they want with the form and in the very end once I have all my inputs let me worry about it that's like the use case you can handle",
    "start": "3926860",
    "end": "3932710"
  },
  {
    "text": "it at that point you probably have to handle it independently right and you can zip all of those together the",
    "start": "3932710",
    "end": "3938170"
  },
  {
    "text": "advantage with zip is it like it'll shoot out like events all together right so you can maybe like send like an empty",
    "start": "3938170",
    "end": "3943750"
  },
  {
    "text": "event from the others or something along those sorts any other questions we are sort of",
    "start": "3943750",
    "end": "3950340"
  },
  {
    "text": "running out of time I believe West I can see ty yeah do we have time for ten more",
    "start": "3950340",
    "end": "3959790"
  },
  {
    "text": "minutes okay cool a quick question",
    "start": "3959790",
    "end": "3964220"
  },
  {
    "text": "how would we keep that to the end and if it's general let me go through the last example and then we'll keep all the questions in the end that work I want to",
    "start": "3964930",
    "end": "3971450"
  },
  {
    "text": "quickly touch a combine okay so the",
    "start": "3971450",
    "end": "3977420"
  },
  {
    "text": "autocomplete the reason I want to show this is because it's it's so simple it's beautiful I mean like remember I talked",
    "start": "3977420",
    "end": "3985010"
  },
  {
    "text": "about like a text observable like with the autocomplete thing all you have to do is basically this the bounce operator",
    "start": "3985010",
    "end": "3991490"
  },
  {
    "text": "right so I have I have an edit text",
    "start": "3991490",
    "end": "3999200"
  },
  {
    "text": "called input edit text I use the same widget observable and that gives me basically an observable of on text",
    "start": "3999200",
    "end": "4005500"
  },
  {
    "text": "change events very similar to the previous example all I do in the end is this operator called the bounce what is",
    "start": "4005500",
    "end": "4010960"
  },
  {
    "text": "the D bounce operator only emit an item from the source observable after a",
    "start": "4010960",
    "end": "4016360"
  },
  {
    "text": "particular time span has passed without the observable emitting any other items",
    "start": "4016360",
    "end": "4022030"
  },
  {
    "text": "and I read it out super fast it may not make sense which is why like the folks over at rx developed this concept called",
    "start": "4022030",
    "end": "4028300"
  },
  {
    "text": "marble diagrams right so this depicts basically what the D bounce operator",
    "start": "4028300",
    "end": "4034030"
  },
  {
    "text": "does it the way to like when you at whenever you look at like a diagram like this a marble diagram like this the way",
    "start": "4034030",
    "end": "4039970"
  },
  {
    "text": "to think about this is this is basically the observable this is the thing that's emitting events so in our case the input",
    "start": "4039970",
    "end": "4047050"
  },
  {
    "text": "edit text that's emitting events that's this sucker here right so this is the events that's coming in the operator",
    "start": "4047050",
    "end": "4053740"
  },
  {
    "text": "then I'm actually passing it down is the bounce what the bounce basically does is it looks for a minimum time span time",
    "start": "4053740",
    "end": "4059830"
  },
  {
    "text": "span here any time an event is emitted if your time span has passed it emits",
    "start": "4059830",
    "end": "4066100"
  },
  {
    "text": "that event outside so let's look at this yellow marble here you have a time span here but before you even hit the time",
    "start": "4066100",
    "end": "4073180"
  },
  {
    "text": "son the next event comes in so when the next event comes in it sort of cancels out the previous one and since that's",
    "start": "4073180",
    "end": "4079030"
  },
  {
    "text": "passed through like it drops the green marble and then you have the blue one which follows the same process right so",
    "start": "4079030",
    "end": "4085390"
  },
  {
    "text": "the bounce is basically just this operator that says you know what I'm going to give you a time span and I'm",
    "start": "4085390",
    "end": "4091600"
  },
  {
    "text": "going to just take the last event out of that time span you can do in that in that sort of section you can do whatever",
    "start": "4091600",
    "end": "4097150"
  },
  {
    "text": "you want so that's just it like the example is as simple as this I just like added in the",
    "start": "4097150",
    "end": "4103720"
  },
  {
    "text": "D bonds operator there I have an observer which is very similar to what you've seen before I allow the format and that's it so this",
    "start": "4103720",
    "end": "4111339"
  },
  {
    "text": "is essentially the autocomplete one I have I have a github repository where I",
    "start": "4111340",
    "end": "4120670"
  },
  {
    "text": "talk about some of the other examples at this point there are like ten or eleven examples I would encourage you to look",
    "start": "4120670",
    "end": "4126220"
  },
  {
    "text": "at the examples you have to remember some of this code I've written is actually kind of old so it's like super",
    "start": "4126220",
    "end": "4131859"
  },
  {
    "text": "crappy code right so if you can send in PRS that sort of clean up the code that's great like look at this like I",
    "start": "4131860",
    "end": "4137830"
  },
  {
    "text": "rewrote the debounce operator and like what was I thinking with the previous code because I looked at it I was like",
    "start": "4137830",
    "end": "4142900"
  },
  {
    "text": "Jesus this is like really bad code because it was at a point where I didn't really understand what was happening right but as you keep practicing more",
    "start": "4142900",
    "end": "4151720"
  },
  {
    "text": "examples you sort of like understand it a little better and then like you can go back and clean up code if you are at a",
    "start": "4151720",
    "end": "4156880"
  },
  {
    "text": "point further than me then I would strongly encourage you send PRS and clean up my code also a good way for me",
    "start": "4156880",
    "end": "4163630"
  },
  {
    "text": "to learn also if you have if you use directs Java before and you have more interesting examples you're like hey",
    "start": "4163630",
    "end": "4169270"
  },
  {
    "text": "Alex Java does this really cool thing that you probably didn't touch upon or you don't have any recovery me where",
    "start": "4169270",
    "end": "4177069"
  },
  {
    "text": "I've listed ideas this is like my to-do list where eventually I'll try to get down and flush examples if you want to",
    "start": "4177070",
    "end": "4183160"
  },
  {
    "text": "take an example send in PR be more than happy though that's pretty much it you",
    "start": "4183160",
    "end": "4189339"
  },
  {
    "text": "can go ahead and have a look at that on the gate of all the examples that I posted in the slides everything is there",
    "start": "4189340",
    "end": "4194770"
  },
  {
    "text": "I'll also try to extend in slides to try and maybe we can extend it through the group that makes sense cool okay we are going to have me five",
    "start": "4194770",
    "end": "4202600"
  },
  {
    "text": "more minutes I get five minutes of questions let's try to get quickly some questions he asked me first I'm gonna go",
    "start": "4202600",
    "end": "4209530"
  },
  {
    "text": "with him so the question is basically how do you learn the different operators practice",
    "start": "4209530",
    "end": "4216570"
  },
  {
    "text": "practice the RX Doc's are amazing at this point they're really good and very",
    "start": "4216570",
    "end": "4222210"
  },
  {
    "text": "informative they have marble diagrams so basically just try to implement the example it usually there's always a",
    "start": "4222210",
    "end": "4228900"
  },
  {
    "text": "better way to do it that's like the approach you should always have start familiar as if familiarizing yourself",
    "start": "4228900",
    "end": "4234570"
  },
  {
    "text": "with the operators and you'll find something that's interesting that's basically how I did it",
    "start": "4234570",
    "end": "4239579"
  },
  {
    "text": "there's no because like there are like 50 or 60 or 70 operators and each of like depending on the parameters that",
    "start": "4239579",
    "end": "4245280"
  },
  {
    "text": "you pass in they're going to behave just a little differently so there's no way I going to learn it in like a weekend or something so just like keep learning",
    "start": "4245280",
    "end": "4251670"
  },
  {
    "text": "practice that's the kind of a stupid answer but I mean that's what I did question so the question was a lot of",
    "start": "4251670",
    "end": "4261989"
  },
  {
    "text": "the events that seem emitted are immutable how",
    "start": "4261989",
    "end": "4267610"
  },
  {
    "text": "the way to deal with that is basically to identify that's happening and not do it I guess like that mean if you I mean",
    "start": "4267610",
    "end": "4273820"
  },
  {
    "text": "if you catch that event and replay it maybe after like an hour or something like and it holds on to it I mean it's",
    "start": "4273820",
    "end": "4280330"
  },
  {
    "text": "going to do the same thing right like I said our Excel has a very straightforward library I mean it he doesn't do anything very specific I'd",
    "start": "4280330",
    "end": "4286420"
  },
  {
    "text": "like I don't think there's anything in our ex Android also that sort of like handles that situation but yeah you just",
    "start": "4286420",
    "end": "4292810"
  },
  {
    "text": "have to watch out you have to understand what the operators are meant to do and basically work around that issue you",
    "start": "4292810",
    "end": "4298570"
  },
  {
    "text": "have a question yes how do you test excellent question and",
    "start": "4298570",
    "end": "4303620"
  },
  {
    "text": "this is a question I like I had this question initially as well the TLDR of this so like I had Dan Lew",
    "start": "4303620",
    "end": "4310540"
  },
  {
    "text": "okay so today I repeat the question yes okay I'll repeat the questions how do you test our X Java I had Dan Lew on one",
    "start": "4310540",
    "end": "4318560"
  },
  {
    "text": "of my podcast episodes and I asked them the same question the way I used to do it before is essentially with operators",
    "start": "4318560",
    "end": "4325640"
  },
  {
    "text": "what you can do is you can force them to be synchronous so if I have like an observable that's emitting events I can",
    "start": "4325640",
    "end": "4332420"
  },
  {
    "text": "like say to blocking to list and basically what it will do is it'll spit",
    "start": "4332420",
    "end": "4337520"
  },
  {
    "text": "out like a list so it is sort of like fake it to be synchronous and then I can",
    "start": "4337520",
    "end": "4342770"
  },
  {
    "text": "just use regular testing that's what I've done that's like a hack ish way to do it I've heard again I haven't gone",
    "start": "4342770",
    "end": "4349700"
  },
  {
    "text": "back because I've just been doing it this way it's been working out decently well for me I've heard there's this thing called Eric's Android plugins",
    "start": "4349700",
    "end": "4355820"
  },
  {
    "text": "that's coming in and what that allows you to do is basically say execute",
    "start": "4355820",
    "end": "4361250"
  },
  {
    "text": "everything in Eric's Java at this point only on this thread so you have like test schedulers and you can basically",
    "start": "4361250",
    "end": "4368090"
  },
  {
    "text": "say no execute every single thing on this test generator and basically that allows you to sort of like take the",
    "start": "4368090",
    "end": "4374240"
  },
  {
    "text": "synchronous thing without having to call to blocking and doing all this stuff those are the two ways that I have heard",
    "start": "4374240",
    "end": "4379880"
  },
  {
    "text": "about maybe there are other ways but those work pretty well like most cases where I've used are a",
    "start": "4379880",
    "end": "4385640"
  },
  {
    "text": "chav and I wanted to test something it's always work so unless there's some super different case I haven't encountered",
    "start": "4385640",
    "end": "4393070"
  },
  {
    "text": "okay questions hey ty just raise your hand when we're up when times up I'd",
    "start": "4393070",
    "end": "4399650"
  },
  {
    "text": "only I'm just going to keep taking questions and do one more question okay who's the lucky one I think you raised",
    "start": "4399650",
    "end": "4408050"
  },
  {
    "text": "your hand first so let me give you the question okay",
    "start": "4408050",
    "end": "4414190"
  },
  {
    "text": "yes that's all okay so the question was okay if you if if you are explicitly uh",
    "start": "4417290",
    "end": "4423350"
  },
  {
    "text": "if you are explicitly pointing out the scheduler that you want as we have done in most of these examples like the",
    "start": "4423350",
    "end": "4429210"
  },
  {
    "text": "concurrency part where I say hey run it on this scheduler that's another very good way to do it like if you have a",
    "start": "4429210",
    "end": "4434610"
  },
  {
    "text": "very well architected application using dagger that you can basically have inject dependencies and schedulers and",
    "start": "4434610",
    "end": "4440790"
  },
  {
    "text": "you can say hey use this scheduler so when you're running like maybe testing you can say inject the scheduler yes you",
    "start": "4440790",
    "end": "4446130"
  },
  {
    "text": "can do that unfortunately many apps are not architected that well with dagger and so in those cases this helps but",
    "start": "4446130",
    "end": "4452310"
  },
  {
    "text": "yeah for sure that's definitely another way to do it alright thank you folks and",
    "start": "4452310",
    "end": "4457500"
  },
  {
    "text": "if you have any questions just",
    "start": "4457500",
    "end": "4460940"
  }
]