[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "thanks for coming quick question how many people run something on the JVM",
    "start": "4500",
    "end": "10650"
  },
  {
    "text": "here ok so most of the room just regular Java raise your hand",
    "start": "10650",
    "end": "17060"
  },
  {
    "text": "Scala cool so this talk is called fun with closure as carbon mentioned I do a",
    "start": "17060",
    "end": "25770"
  },
  {
    "text": "little closure it's mostly for fun projects or like tooling and stuff that I have to use or teammates have to use",
    "start": "25770",
    "end": "33140"
  },
  {
    "text": "so this is on the 21st language 21st century language track so I forget",
    "start": "33140",
    "end": "38730"
  },
  {
    "text": "we could do a little history lesson at first so what is a 21st century it's",
    "start": "38730",
    "end": "44940"
  },
  {
    "text": "anything after January 1st 2001 so closure made it in there so it is a 21st",
    "start": "44940",
    "end": "51480"
  },
  {
    "text": "century language even though it's been around for some time since 2007 Lisp",
    "start": "51480",
    "end": "58199"
  },
  {
    "text": "which is what closure is it was specified firstly in 1958 CSP which is",
    "start": "58199",
    "end": "66509"
  },
  {
    "text": "communicating sequential processes was described in 1978 the JVM first was",
    "start": "66509",
    "end": "74430"
  },
  {
    "text": "introduced in 1994 javascript in 1995 and closure right so closure leverages",
    "start": "74430",
    "end": "82650"
  },
  {
    "start": "77000",
    "end": "143000"
  },
  {
    "text": "all these technologies from back in the day and it's putting them together to",
    "start": "82650",
    "end": "88080"
  },
  {
    "text": "solve problems that we're currently having in a very pragmatic and simple",
    "start": "88080",
    "end": "94229"
  },
  {
    "text": "way so 21st century problems what are",
    "start": "94229",
    "end": "99630"
  },
  {
    "text": "these so we probably want some evolvable systems so we want to quickly add",
    "start": "99630",
    "end": "106020"
  },
  {
    "text": "features for our customers for making money because that's how we get paid we",
    "start": "106020",
    "end": "111780"
  },
  {
    "text": "want to refactor our apps get rid of technical debt but we want to do that with confidence we want to have some",
    "start": "111780",
    "end": "118829"
  },
  {
    "text": "resiliency so closure allows you to have an open system just because it's a data",
    "start": "118829",
    "end": "126270"
  },
  {
    "text": "first language and you want brought you would probably want a quick service right so low response times",
    "start": "126270",
    "end": "133520"
  },
  {
    "text": "and very responsive services and then most likely you have to do something",
    "start": "133520",
    "end": "139100"
  },
  {
    "text": "with JavaScript because that's just a way of life so our journey today so I",
    "start": "139100",
    "end": "145130"
  },
  {
    "start": "143000",
    "end": "246000"
  },
  {
    "text": "will be your guide through lists planned for some reason people get really intimidated when they see parentheses",
    "start": "145130",
    "end": "151300"
  },
  {
    "text": "even though it's not that bad so I'm here to guide you and show you the way and answer any questions that you might",
    "start": "151300",
    "end": "157850"
  },
  {
    "text": "have about it we're going to talk about three concepts and hopefully one of these concepts so all of these concepts",
    "start": "157850",
    "end": "163130"
  },
  {
    "text": "will spark your interests and you'll give closure or try this talk is",
    "start": "163130",
    "end": "168800"
  },
  {
    "text": "basically three talks condensed into one so we'll see how that goes so the first",
    "start": "168800",
    "end": "174980"
  },
  {
    "text": "the agenda we're going to talk about specifying our problems and our data for",
    "start": "174980",
    "end": "181190"
  },
  {
    "text": "correctness and then we're going to talk about concurrency and parallelism and then we're going to touch on closure",
    "start": "181190",
    "end": "186740"
  },
  {
    "text": "script which is their JavaScript part of the talk so a little bit about me my",
    "start": "186740",
    "end": "193370"
  },
  {
    "text": "name is Giovanni as Carmen said day today I'm a developer advocate at Comcast surprise surprise we have one of",
    "start": "193370",
    "end": "200060"
  },
  {
    "text": "those Twitter you can find me if you want to ask me questions or get into",
    "start": "200060",
    "end": "205220"
  },
  {
    "text": "touch with me and then the code for this talk will be on github for that URL and",
    "start": "205220",
    "end": "211280"
  },
  {
    "text": "we'll publish the slides later and you'll get access to them so why did I decide to give this talk so",
    "start": "211280",
    "end": "218450"
  },
  {
    "text": "as I mentioned before my day to day is just building tools for folks and getting them unstuck on certain problems",
    "start": "218450",
    "end": "225530"
  },
  {
    "text": "and I've been recently trying to write a policy as code engine for AWS I'm trying",
    "start": "225530",
    "end": "233210"
  },
  {
    "text": "to do that in closure and those I found happiness again with closure and I was",
    "start": "233210",
    "end": "238610"
  },
  {
    "text": "like I should share this so that's where this talk is coming from and Zeeshan who works with me knows about this challenge",
    "start": "238610",
    "end": "243980"
  },
  {
    "text": "that we currently have so what is closure a little synopsis closure is a",
    "start": "243980",
    "end": "250220"
  },
  {
    "start": "246000",
    "end": "298000"
  },
  {
    "text": "dynamic language so you know it's not statically and compiled it is a list",
    "start": "250220",
    "end": "255500"
  },
  {
    "text": "it's predominantly functional it's a very pragmatic language it's not going to force you to be one way or the other",
    "start": "255500",
    "end": "260900"
  },
  {
    "text": "what do you want to be functional you can be when you want to get away from that you can't you",
    "start": "260900",
    "end": "266090"
  },
  {
    "text": "also it's it has immutable data structures but also you don't have to use the mutability all the time",
    "start": "266090",
    "end": "271840"
  },
  {
    "text": "functions our first-class citizen and so it's data closure really focuses on",
    "start": "271840",
    "end": "278030"
  },
  {
    "text": "simplicity if you watch any of the talks from the author of closure IRA chikki there's always something about",
    "start": "278030",
    "end": "283940"
  },
  {
    "text": "simplicity one of his talks so I highly encourage you to check that out so just",
    "start": "283940",
    "end": "290630"
  },
  {
    "text": "enough closure so how many of people are familiar with Lisp cool so most of the",
    "start": "290630",
    "end": "295940"
  },
  {
    "text": "audience so for those that are not this is basically just enough for you to figure out what what a lisp is or how closer",
    "start": "295940",
    "end": "302600"
  },
  {
    "start": "298000",
    "end": "364000"
  },
  {
    "text": "works so you have two parentheses or an opening and closing the first thing in",
    "start": "302600",
    "end": "307850"
  },
  {
    "text": "the parentheses is always the function call and then the rest of the things can be considered as arguments so this is",
    "start": "307850",
    "end": "315080"
  },
  {
    "text": "how you would add two numbers so the first one is the addition operator and then you pass in two arguments and you",
    "start": "315080",
    "end": "321200"
  },
  {
    "text": "would get three out of that some other closure things that you need to know for the talk is closure separates code into",
    "start": "321200",
    "end": "329630"
  },
  {
    "text": "namespaces so similar how you help a Java class you'd have a namespace in closure and you could import that",
    "start": "329630",
    "end": "336139"
  },
  {
    "text": "namespace using similar to how I have it here so you say require and then you could Elias it so you don't have to use",
    "start": "336139",
    "end": "341990"
  },
  {
    "text": "the fully qualified name at all times and then you could call the functions in that namespace using the alias that you",
    "start": "341990",
    "end": "348260"
  },
  {
    "text": "give it to so here we're saying require the spec namespace and we're gonna call",
    "start": "348260",
    "end": "355490"
  },
  {
    "text": "the valid function from that namespace and that's gonna be available in our key con spec or namespace so what is spec so",
    "start": "355490",
    "end": "365599"
  },
  {
    "start": "364000",
    "end": "420000"
  },
  {
    "text": "I'm gonna try to get through the first part of this talk without mentioning types if you are a type enthusiast I ask",
    "start": "365599",
    "end": "374030"
  },
  {
    "text": "that you open your mind and you get past that is not like static types but it is",
    "start": "374030",
    "end": "381289"
  },
  {
    "text": "still useful so types allow you to describe data it allows you to have",
    "start": "381289",
    "end": "387889"
  },
  {
    "text": "documentation without writing Docs because you're specifying functions you're specifying data sometimes you",
    "start": "387889",
    "end": "396590"
  },
  {
    "text": "know you come back to a function like three months from now or you trying to change some code lay down your like like what's the signature of",
    "start": "396590",
    "end": "404370"
  },
  {
    "text": "this function or how does this work or what is it supposed to return or sometimes you have a higher-order function like a map and you iterate it",
    "start": "404370",
    "end": "411300"
  },
  {
    "text": "over a data structure you like what is in this data structure right I don't know so when your code reviewing you're kind of lost and you have to go ask the",
    "start": "411300",
    "end": "418320"
  },
  {
    "text": "person so this is the anatomy of a spec so similar to how we saw that list code",
    "start": "418320",
    "end": "424410"
  },
  {
    "start": "420000",
    "end": "433000"
  },
  {
    "text": "earlier there's a spec function which is like valid there's a predicate and",
    "start": "424410",
    "end": "429960"
  },
  {
    "text": "there's a value so this is what a real world spec looks like so the valid is a",
    "start": "429960",
    "end": "436830"
  },
  {
    "start": "433000",
    "end": "451000"
  },
  {
    "text": "spec function the in question mark is a predicate and the value that we're passing in is 3000 this is basically",
    "start": "436830",
    "end": "443789"
  },
  {
    "text": "saying is the number 3000 integer its it is just when they return true so the",
    "start": "443789",
    "end": "451889"
  },
  {
    "start": "451000",
    "end": "491000"
  },
  {
    "text": "signature of a predicate is any function that takes in an argument and returns a boolean value so it could either return",
    "start": "451889",
    "end": "458430"
  },
  {
    "text": "true if it matches the criteria or it returns false if it doesn't match criteria so",
    "start": "458430",
    "end": "464120"
  },
  {
    "text": "spec was introduced maybe a year ago and any closure already has part it gets in",
    "start": "464120",
    "end": "472349"
  },
  {
    "text": "the language but they introduced some new ones and these are some of the predicates that that you will run into",
    "start": "472349",
    "end": "477960"
  },
  {
    "text": "so you know if you want to test with a URL matches the URI that's built in you",
    "start": "477960",
    "end": "483000"
  },
  {
    "text": "don't have to write that yourself you could check if it numbers even or odd I will see some some product gets later in",
    "start": "483000",
    "end": "489000"
  },
  {
    "text": "the talk and then you could define your own predicate so this is a predicate that checks if someone is legal age for",
    "start": "489000",
    "end": "497310"
  },
  {
    "start": "491000",
    "end": "530000"
  },
  {
    "text": "voting I don't know why I did that but voting was in my head at the time so it says it takes in an argument which is",
    "start": "497310",
    "end": "503849"
  },
  {
    "text": "the value the thing you're checking against if it's above 18 of equal or two",
    "start": "503849",
    "end": "509130"
  },
  {
    "text": "above 18 and they will return true if it is false if it doesn't so so far we've",
    "start": "509130",
    "end": "515070"
  },
  {
    "text": "just seen how you would just use specs on demand right so you're in a function",
    "start": "515070",
    "end": "520919"
  },
  {
    "text": "or you you're just writing them ad hoc but similar to programming you probably want to give them a name or reference",
    "start": "520919",
    "end": "526950"
  },
  {
    "text": "them later and you don't want to rewrite the same spec so that's where name specs come in",
    "start": "526950",
    "end": "532180"
  },
  {
    "text": "and here you can see we're creating a port a port spec and your port should be",
    "start": "532180",
    "end": "537580"
  },
  {
    "text": "an integer depending on your service that you're writing so let's go into",
    "start": "537580",
    "end": "545680"
  },
  {
    "text": "some code so it in this talk I read a lot of code and I'm gonna try to do some",
    "start": "545680",
    "end": "552070"
  },
  {
    "text": "live demos but there will be some switching happening so please be mindful",
    "start": "552070",
    "end": "559470"
  },
  {
    "text": "or have patience alright okay so can",
    "start": "559470",
    "end": "568630"
  },
  {
    "text": "everyone see this code alright so it is",
    "start": "568630",
    "end": "575560"
  },
  {
    "text": "not a requirement to use Emacs if you're if you're right enclosure but I highly",
    "start": "575560",
    "end": "580839"
  },
  {
    "text": "recommend it since it's the best editor ever just kidding just kidding alright",
    "start": "580839",
    "end": "590680"
  },
  {
    "text": "so here you can see we're requiring a bunch of namespaces most important ones",
    "start": "590680",
    "end": "596320"
  },
  {
    "text": "are the spec namespace which you saw earlier and then later on we're going to",
    "start": "596320",
    "end": "602200"
  },
  {
    "text": "talk about the gen namespace and the test namespace so basically I'm just going to evaluate this stuff you see",
    "start": "602200",
    "end": "608110"
  },
  {
    "text": "we're just checking it in real time [Music] basically what we saw earlier and this",
    "start": "608110",
    "end": "614380"
  },
  {
    "text": "is our custom spec that we wrote so that's 15 if we want to change that to",
    "start": "614380",
    "end": "620080"
  },
  {
    "text": "21 that's the person's that's the number you're checking against will be true and",
    "start": "620080",
    "end": "625450"
  },
  {
    "text": "this is the the spec that we wrote that's a named spec cool",
    "start": "625450",
    "end": "632490"
  },
  {
    "start": "636000",
    "end": "657000"
  },
  {
    "text": "I'm just gonna wing it and not to notes so this is the the name SPECT and then",
    "start": "636209",
    "end": "642120"
  },
  {
    "text": "this is how you would reference the spec later on so you're saying hey does this thing match the port specification and",
    "start": "642120",
    "end": "649499"
  },
  {
    "text": "what is the port specification it's an integer so you can basically reuse this in all of your coach of closure code and",
    "start": "649499",
    "end": "656040"
  },
  {
    "text": "then when you put a name spec everything goes into this global registry so you",
    "start": "656040",
    "end": "661230"
  },
  {
    "start": "657000",
    "end": "919000"
  },
  {
    "text": "can reference it either in your front-end code your back-end code or any of your namespaces that you're requiring them to and the patterns that I've seen",
    "start": "661230",
    "end": "668370"
  },
  {
    "text": "is like some people have it just a giant spec file that has all their specs and respects all their data route or they",
    "start": "668370",
    "end": "673800"
  },
  {
    "text": "have it per component or poor part of their application so if you have like a database component or your specs for",
    "start": "673800",
    "end": "680009"
  },
  {
    "text": "your database and your data lives in that that database so now that we have a",
    "start": "680009",
    "end": "686040"
  },
  {
    "text": "name spec closures closure code really",
    "start": "686040",
    "end": "691889"
  },
  {
    "text": "has makes high use of Maps closure really likes your data to be a",
    "start": "691889",
    "end": "698910"
  },
  {
    "text": "first-class citizen and you know they don't want you to hide your data they just advise that you pass around",
    "start": "698910",
    "end": "704279"
  },
  {
    "text": "basically a map data structure or vector which is just an array with the data in it and then you could modify it or read",
    "start": "704279",
    "end": "711329"
  },
  {
    "text": "it however you want they don't want you doing any data hiding like how you would do in Java and get us get our methods",
    "start": "711329",
    "end": "717540"
  },
  {
    "text": "and setter methods and stuff like that so you probably will be specking Maps a",
    "start": "717540",
    "end": "722819"
  },
  {
    "text": "lot so in your code you probably have a",
    "start": "722819",
    "end": "729209"
  },
  {
    "text": "config file and I'm sure many times you've launched your application and you don't have the right config and you",
    "start": "729209",
    "end": "735329"
  },
  {
    "text": "can't figure out why the application is work it's not working and you don't have",
    "start": "735329",
    "end": "740399"
  },
  {
    "text": "any code doing error messages on your config so we're gonna write some code to specify what a config for our",
    "start": "740399",
    "end": "746490"
  },
  {
    "text": "application will look like and our config just has a port and has an",
    "start": "746490",
    "end": "751620"
  },
  {
    "text": "environment so the port is gonna be an integer and the environment is going to be a string so we're gonna say hey let's",
    "start": "751620",
    "end": "757769"
  },
  {
    "text": "define a name spec call config it's gonna be a map that's like you know it's a map because it has the word keys in it",
    "start": "757769",
    "end": "764160"
  },
  {
    "text": "and then we're gonna say we're gonna require that the key B port and",
    "start": "764160",
    "end": "769860"
  },
  {
    "text": "and they must be in the in the config to be a valid config so one of the magic",
    "start": "769860",
    "end": "776640"
  },
  {
    "text": "series you notice that we're not saying in the config spec that what the values",
    "start": "776640",
    "end": "781860"
  },
  {
    "text": "of the port or the M should be basically we're starting from the smallest",
    "start": "781860",
    "end": "786950"
  },
  {
    "text": "contract that we want to use which was support and then we're gonna build up larger data structures from that",
    "start": "786950",
    "end": "793050"
  },
  {
    "text": "so when closure reads this config and it wants to do validation against it there's gonna hit a port the port",
    "start": "793050",
    "end": "798840"
  },
  {
    "text": "keyword here and it's gonna say what's the definition of a port and it's gonna go back here and say okay it's an",
    "start": "798840",
    "end": "804780"
  },
  {
    "text": "integer is it an integer yes and it's gonna go to the and then go",
    "start": "804780",
    "end": "810300"
  },
  {
    "text": "back to the definition of that so you can basically reuse the definition of",
    "start": "810300",
    "end": "817140"
  },
  {
    "text": "port in other places like if you have a specific Postgres config you could use",
    "start": "817140",
    "end": "822480"
  },
  {
    "text": "the port definition that you had earlier in there in another definition of a",
    "start": "822480",
    "end": "828750"
  },
  {
    "text": "config so you might be wondering about",
    "start": "828750",
    "end": "835650"
  },
  {
    "text": "port so a port is not only an integer right there are other rules for ports",
    "start": "835650",
    "end": "842180"
  },
  {
    "text": "and basically this is the way you saw that it's composing specs suspects are",
    "start": "842180",
    "end": "848010"
  },
  {
    "text": "composable so here you can see they're using the two specs so I define a new",
    "start": "848010",
    "end": "854370"
  },
  {
    "text": "spec call port range and those are few who are familiar reports know that",
    "start": "854370",
    "end": "860430"
  },
  {
    "text": "there's a highest number that you can get to and there are some reverse ports that you should not be using for your",
    "start": "860430",
    "end": "865950"
  },
  {
    "text": "application so I'm gonna say hey the port that you specify for me should be 10 23 and should be above 10 23 and it",
    "start": "865950",
    "end": "873750"
  },
  {
    "text": "should be lower than 65,000 now if you require that your app run and say 3,000",
    "start": "873750",
    "end": "879270"
  },
  {
    "text": "you could say that the port number should just equal that instead of giving it a range I'm only using this to show",
    "start": "879270",
    "end": "884880"
  },
  {
    "text": "that you can compose them here and this is a custom spec that we wrote the the",
    "start": "884880",
    "end": "890370"
  },
  {
    "text": "hash tag there's just a way a fancy way to write anonymous functions and the percentage sign is just the arguments",
    "start": "890370",
    "end": "896460"
  },
  {
    "text": "are you passing in which is the port value that you're specifying and then the second part of this is we're saying",
    "start": "896460",
    "end": "902730"
  },
  {
    "text": "OK a port there's these two things and the end is how you would say that it should match",
    "start": "902730",
    "end": "908040"
  },
  {
    "text": "both of these if it should match an either/or use the or keywords so you're saying hey it should be an integer and",
    "start": "908040",
    "end": "914310"
  },
  {
    "text": "it should match the spec valid port range so let's do some more demos we'll",
    "start": "914310",
    "end": "922170"
  },
  {
    "start": "919000",
    "end": "1269000"
  },
  {
    "text": "talk about what you can do with spec also if anyone knows the the shortcut on",
    "start": "922170",
    "end": "929850"
  },
  {
    "text": "how to do marrying displays let me know ok so back to the best editor ever sure",
    "start": "929850",
    "end": "943760"
  },
  {
    "text": "okay so I'll make that smaller no you can't see",
    "start": "943760",
    "end": "950870"
  },
  {
    "text": "oh I have to mirror",
    "start": "959540",
    "end": "963130"
  },
  {
    "text": "cool all right now you can see it okay so here we have a port we have an end",
    "start": "970470",
    "end": "977370"
  },
  {
    "text": "and you can see we're also composing what an M should be right so it should be a string and it should not be blank",
    "start": "977370",
    "end": "983250"
  },
  {
    "text": "and we'll see why we want to specify a blank later so you have a config we",
    "start": "983250",
    "end": "990330"
  },
  {
    "text": "compose some stuff and this stuff is already loaded so what can you do with specs you wrote these things how do you",
    "start": "990330",
    "end": "996420"
  },
  {
    "text": "use them so you have three options you can do validation against them you can conform them which just means that you're going to take the data that",
    "start": "996420",
    "end": "1003620"
  },
  {
    "text": "you're getting in and conform them to some type of map structure so if you're getting random data from your config",
    "start": "1003620",
    "end": "1009440"
  },
  {
    "text": "file you're going to conform that into a map that your configuration function could use",
    "start": "1009440",
    "end": "1015640"
  },
  {
    "text": "so let's look you already saw what what validation looks like so we're gonna do some conforming stuff so here we",
    "start": "1015640",
    "end": "1022880"
  },
  {
    "text": "specified a building spec and an address spec so we say a building is going to",
    "start": "1022880",
    "end": "1029209"
  },
  {
    "text": "match a series of numbers with a building number and the address is just a string and here we're going to conform",
    "start": "1029210",
    "end": "1035930"
  },
  {
    "text": "this array data structure to that map so you see it printed out the result of",
    "start": "1035930",
    "end": "1042439"
  },
  {
    "text": "that I was going to give me back a building number which is the first value of the array and then the street address",
    "start": "1042440",
    "end": "1050650"
  },
  {
    "text": "which is the JFK Boulevard and we're",
    "start": "1050650",
    "end": "1055910"
  },
  {
    "text": "getting those keys from this cap value here which is basically you can think of this like if you have a array of arrays",
    "start": "1055910",
    "end": "1062450"
  },
  {
    "text": "I mean you need to parse that into a data structure that you can read or use in your function you can just use",
    "start": "1062450",
    "end": "1068570"
  },
  {
    "text": "conform for that all right so let's look",
    "start": "1068570",
    "end": "1074090"
  },
  {
    "text": "at how this would be used in a function",
    "start": "1074090",
    "end": "1078340"
  },
  {
    "text": "so here we have a load hello config function it takes in a config it tries",
    "start": "1079600",
    "end": "1085190"
  },
  {
    "text": "to conform it and the result of forbad conform is an invalid value and the",
    "start": "1085190",
    "end": "1091090"
  },
  {
    "text": "result of a valid conform is just a conformed value so we're gonna say hey there's the value of conformed invalid",
    "start": "1091090",
    "end": "1097340"
  },
  {
    "text": "if it is through an exception and give me exactly why it failed",
    "start": "1097340",
    "end": "1103330"
  },
  {
    "text": "if it's valid just return that value so we're going to call this function with a",
    "start": "1103330",
    "end": "1108399"
  },
  {
    "text": "data structure here that we have so this is what a configure that looks like that",
    "start": "1108399",
    "end": "1114159"
  },
  {
    "text": "we're passing in and this should be invalid so we're gonna see here it says spec failed that was a value it should",
    "start": "1114159",
    "end": "1122499"
  },
  {
    "text": "have had an F key and the M key is this basically predicate it should be a",
    "start": "1122499",
    "end": "1129639"
  },
  {
    "text": "string and it should not be blank so we're gonna go back now we're gonna try",
    "start": "1129639",
    "end": "1135399"
  },
  {
    "text": "to load the config here for this valid config it should just be a success it just returns what the map should be does",
    "start": "1135399",
    "end": "1142899"
  },
  {
    "text": "that make sense for everyone cool so in",
    "start": "1142899",
    "end": "1148509"
  },
  {
    "text": "here you see in this line we're calling this function call explain and that's",
    "start": "1148509",
    "end": "1154359"
  },
  {
    "text": "another thing you can do with your specs you can explain why they're failing so there are these function call explain",
    "start": "1154359",
    "end": "1160509"
  },
  {
    "text": "string explain and explain data we're just gonna evaluate these and see what they look like so it just gives you a",
    "start": "1160509",
    "end": "1166389"
  },
  {
    "text": "nice evaluation of why that thing is failing so you can see the value of this is like when closures closures are",
    "start": "1166389",
    "end": "1173289"
  },
  {
    "text": "dynamic language right so you don't have those compile time tricks but at runtime",
    "start": "1173289",
    "end": "1178450"
  },
  {
    "text": "you get this nice output in this nice validation and checking so another cool",
    "start": "1178450",
    "end": "1186190"
  },
  {
    "text": "thing is so this spec matches should fail for one of the compound specs and",
    "start": "1186190",
    "end": "1191499"
  },
  {
    "text": "you can see that we are getting a nice output here of why it's basically you",
    "start": "1191499",
    "end": "1199629"
  },
  {
    "text": "can see it's saying it's giving you why that that's failing right so you're",
    "start": "1199629",
    "end": "1205539"
  },
  {
    "text": "saying it's less than the invalid range another thing you can do is get",
    "start": "1205539",
    "end": "1213009"
  },
  {
    "text": "documentation so I'm going to evaluate this hold on sorry live coding",
    "start": "1213009",
    "end": "1224429"
  },
  {
    "text": "so let's evaluate this and see the adapt of it so here you can see that if",
    "start": "1226430",
    "end": "1233220"
  },
  {
    "text": "someone wants to know what a port is when they were coming in to work on the app later they can just come in and say",
    "start": "1233220",
    "end": "1238320"
  },
  {
    "text": "what's it what's the docks looks pretty look looks like for this and then you",
    "start": "1238320",
    "end": "1243840"
  },
  {
    "text": "don't have to write any Docs right it's just gonna show you what the spec is so everyone who hates writing documentation",
    "start": "1243840",
    "end": "1249150"
  },
  {
    "text": "this is a great tool for you which is most of us alright let's go back to the",
    "start": "1249150",
    "end": "1258420"
  },
  {
    "text": "slides",
    "start": "1258420",
    "end": "1260720"
  },
  {
    "start": "1269000",
    "end": "1381000"
  },
  {
    "text": "so we went over what you could do with speck right so so far we've only been",
    "start": "1269480",
    "end": "1275480"
  },
  {
    "text": "specking a data that we're getting in or data that we're passing around but you",
    "start": "1275480",
    "end": "1280760"
  },
  {
    "text": "could actually speck your functions and here you can see respecting a fine by ID function so just a raise of hands let's",
    "start": "1280760",
    "end": "1288260"
  },
  {
    "text": "do a survey if you have a fine by ID question function and it doesn't find",
    "start": "1288260",
    "end": "1294590"
  },
  {
    "text": "anything should it return nil or should it return like a null object raise your hand if you should return nil what would",
    "start": "1294590",
    "end": "1301460"
  },
  {
    "text": "you do no all right there's no right or wrong answer it's just preference now raise your hand if",
    "start": "1301460",
    "end": "1307850"
  },
  {
    "text": "it should not be nil it should be like an empty object okay cool just a fun question all right so let's",
    "start": "1307850",
    "end": "1315080"
  },
  {
    "text": "try to spec out our function find my ID so you might think so a situation could be okay you have to write this function",
    "start": "1315080",
    "end": "1321919"
  },
  {
    "text": "it's like a new car you're taking from Trello you give the function some thought what will it take in what will",
    "start": "1321919",
    "end": "1329210"
  },
  {
    "text": "the return so here we're going to use the f def function we're gonna call find",
    "start": "1329210",
    "end": "1335570"
  },
  {
    "text": "by ID is the function name we're gonna say there are three things that you could spec a function with versus the",
    "start": "1335570",
    "end": "1341269"
  },
  {
    "text": "arguments so we're gonna see where what are those function arguments so in",
    "start": "1341269",
    "end": "1346549"
  },
  {
    "text": "functional programming usually pass in all the things that you want to use so you're gonna pass in a database for this",
    "start": "1346549",
    "end": "1352490"
  },
  {
    "text": "situation we're just gonna use a map and then we're gonna pass in an ID which should be a Val ID and for a spec for a",
    "start": "1352490",
    "end": "1360350"
  },
  {
    "text": "valid ID it should be greater than zero because you don't have IDs that are zero you don't have IDs that are negative",
    "start": "1360350",
    "end": "1365750"
  },
  {
    "text": "numbers so that's just a custom spec that I wrote earlier and then it should",
    "start": "1365750",
    "end": "1371240"
  },
  {
    "text": "return a map there's a bug here we're gonna discuss how to solve this bug",
    "start": "1371240",
    "end": "1376429"
  },
  {
    "text": "later so once that you define the spec for you to find the function and it's",
    "start": "1376429",
    "end": "1383480"
  },
  {
    "start": "1381000",
    "end": "1417000"
  },
  {
    "text": "basically what was in our head when we were thinking about it so fine by ID it takes in your database it takes in an ID it will filter that",
    "start": "1383480",
    "end": "1392690"
  },
  {
    "text": "map until it finds an ID that matches it and then return the first value from",
    "start": "1392690",
    "end": "1398299"
  },
  {
    "text": "that because it's an array so let's go back to some code do this whole",
    "start": "1398299",
    "end": "1408470"
  },
  {
    "text": "dance again",
    "start": "1408470",
    "end": "1411039"
  },
  {
    "text": "all right so this is the database this is the ID",
    "start": "1415420",
    "end": "1421620"
  },
  {
    "text": "spec it should be an integer it should be greater than zero and I also started",
    "start": "1421620",
    "end": "1426900"
  },
  {
    "text": "specking out the what the map should look like right because not only should",
    "start": "1426900",
    "end": "1432870"
  },
  {
    "text": "it be a map it should be a collection so the database should be an array and it",
    "start": "1432870",
    "end": "1438510"
  },
  {
    "text": "should be a collection of maps which match this person map so here we're",
    "start": "1438510",
    "end": "1443610"
  },
  {
    "text": "saying a person is just a map with an ID",
    "start": "1443610",
    "end": "1450510"
  },
  {
    "text": "in it the optional thing is a name which we're not specifying and then a person DB is a collection of the person spec",
    "start": "1450510",
    "end": "1459120"
  },
  {
    "text": "and the kind should be a vector which is just an array in closure and it should be distinct so we don't want our",
    "start": "1459120",
    "end": "1465299"
  },
  {
    "text": "database to have multiple maps with the same IDs it's gonna say like make sure it's like 1 2 3 4 and stuff like 1 1 2 3",
    "start": "1465299",
    "end": "1473070"
  },
  {
    "text": "3 stuff like that so we can see how can form works there so here we have a DB just var that we",
    "start": "1473070",
    "end": "1482669"
  },
  {
    "text": "that has a name it has two options in it one is me and one is Beyonce because I",
    "start": "1482669",
    "end": "1488190"
  },
  {
    "text": "know Beyonce on a personal level just kidding we're gonna see that conform so",
    "start": "1488190",
    "end": "1493830"
  },
  {
    "text": "are we taking the first value and say hey do you match what a person spec is and it says yes and then we're gonna",
    "start": "1493830",
    "end": "1500070"
  },
  {
    "text": "conform that the actual DB var and that's what it is it does match and this",
    "start": "1500070",
    "end": "1508830"
  },
  {
    "text": "is the spec definition so here in this definition we actually have one more",
    "start": "1508830",
    "end": "1515460"
  },
  {
    "text": "line so here we see the arts and we're saying hey these are the ABS orgs that",
    "start": "1515460",
    "end": "1521909"
  },
  {
    "text": "we expect and then this FN key word is going to basically run a function on the",
    "start": "1521909",
    "end": "1528809"
  },
  {
    "text": "return value so return the RET keyword just matches the type on the return value but the function keyword actually",
    "start": "1528809",
    "end": "1535950"
  },
  {
    "text": "runs any type of custom validation that you want on on the actual return value",
    "start": "1535950",
    "end": "1541770"
  },
  {
    "text": "of the function so here we're saying the ID that we pass in which is the ID from",
    "start": "1541770",
    "end": "1548309"
  },
  {
    "text": "args which is this value right here so this value which is the argument",
    "start": "1548309",
    "end": "1554720"
  },
  {
    "text": "should match the ID value off the return keyword so you're basically is saying",
    "start": "1554720",
    "end": "1561559"
  },
  {
    "text": "hey if you ask for a record with a 1 ID",
    "start": "1561559",
    "end": "1566740"
  },
  {
    "text": "the return value should have the idea of 1 in it so you're doing like a equal matching so if someone you can think of",
    "start": "1566740",
    "end": "1574789"
  },
  {
    "text": "a situation if you were testing this and you forgot that your hard-coded the ID in the function it would catch it all",
    "start": "1574789",
    "end": "1582110"
  },
  {
    "text": "right and this is the implementation that you start earlier so we can see",
    "start": "1582110",
    "end": "1587860"
  },
  {
    "start": "1583000",
    "end": "1761000"
  },
  {
    "text": "we'll just execute it it returns nil it's not what the thing should should be",
    "start": "1587860",
    "end": "1593899"
  },
  {
    "text": "right we're gonna fix that later okay so",
    "start": "1593899",
    "end": "1599539"
  },
  {
    "text": "we saw how we could spec out functions how we could spec out the data that we're seeing what can we do with those",
    "start": "1599539",
    "end": "1605509"
  },
  {
    "text": "things and the next level to this is doing generate exploring and you do that",
    "start": "1605509",
    "end": "1610940"
  },
  {
    "text": "using generators so how many people did anyone go to the property base testing yesterday talk so this is what that gets",
    "start": "1610940",
    "end": "1618139"
  },
  {
    "text": "into so here if you recall earlier our",
    "start": "1618139",
    "end": "1625389"
  },
  {
    "text": "config spec if we wanted to see the shape of that data we could use the generator the generator function from",
    "start": "1625389",
    "end": "1631999"
  },
  {
    "text": "the generator library and execute that I'll give us an example of what that looks like so you see it has a port it",
    "start": "1631999",
    "end": "1639230"
  },
  {
    "text": "has a random port and it has an in a string value if we wanted to see how if",
    "start": "1639230",
    "end": "1645679"
  },
  {
    "text": "we generated a lot of these if it does match up and there are no errors you know we could use a sample command which",
    "start": "1645679",
    "end": "1651799"
  },
  {
    "text": "is ten at a time and you can you'll see a better use case for this later so here",
    "start": "1651799",
    "end": "1657049"
  },
  {
    "text": "you can see it just 10 values of what an example of config should be and if you wanted to put more restrictions on",
    "start": "1657049",
    "end": "1663110"
  },
  {
    "text": "saying like the EM should be at least three letters like prot of four letters like prod or stage you can set those up",
    "start": "1663110",
    "end": "1669559"
  },
  {
    "text": "in custom generators you could also exercise the function which basically",
    "start": "1669559",
    "end": "1676840"
  },
  {
    "text": "runs the function many times and then gives you the return value of it",
    "start": "1676840",
    "end": "1684140"
  },
  {
    "text": "so if you look down here at the last value it returns ID one and before the",
    "start": "1684140",
    "end": "1690830"
  },
  {
    "text": "closing parenthesis you see its reach requiring the 1:1 ID you can also",
    "start": "1690830",
    "end": "1699710"
  },
  {
    "text": "instrument functions so we're gonna turn that on now we're gonna say so this is",
    "start": "1699710",
    "end": "1705050"
  },
  {
    "text": "what a alright so we turned on instrumenting and we're gonna pass in a string and this should yell at us so it",
    "start": "1705050",
    "end": "1712850"
  },
  {
    "text": "gives us a nice error message depending on your definition of nice but it's gonna say hey you pass in the value of",
    "start": "1712850",
    "end": "1719450"
  },
  {
    "text": "57 but that should actually be an integer so it failed that spec so you",
    "start": "1719450",
    "end": "1727130"
  },
  {
    "text": "can if you're running your tests and you're doing your you're writing a test against this and you're passing the",
    "start": "1727130",
    "end": "1732470"
  },
  {
    "text": "wrong value it's instrumentation could catch that or if you're in production and you get a wrong value you know see",
    "start": "1732470",
    "end": "1738680"
  },
  {
    "text": "if we did that 57 that error should go away cool",
    "start": "1738680",
    "end": "1746000"
  },
  {
    "text": "and you could turn this off with one stream it's I don't know why they didn't",
    "start": "1746000",
    "end": "1751310"
  },
  {
    "text": "call it on instruments or use a better word but instrument alright so going",
    "start": "1751310",
    "end": "1762800"
  },
  {
    "start": "1761000",
    "end": "1926000"
  },
  {
    "text": "back to property based testing so when you're using spec spec knows that about the data that you want and you don't",
    "start": "1762800",
    "end": "1768710"
  },
  {
    "text": "want right so you can imagine a scenario where you were able to generate a bunch of random inputs give it to your",
    "start": "1768710",
    "end": "1774320"
  },
  {
    "text": "function run it and you can find possible scenarios that you didn't match up to or didn't protect yourself against",
    "start": "1774320",
    "end": "1781390"
  },
  {
    "text": "so we're gonna call this check function we're gonna run it a thousand times and",
    "start": "1781390",
    "end": "1787520"
  },
  {
    "text": "try to find a value that that does not match our function spec so run that and",
    "start": "1787520",
    "end": "1793100"
  },
  {
    "text": "you can see that immediately finds one and it says hey if you pass in an empty",
    "start": "1793100",
    "end": "1798440"
  },
  {
    "text": "array which is this value here and the value 1 it does not return a map it",
    "start": "1798440",
    "end": "1804200"
  },
  {
    "text": "returns nil and it should satisfy map so",
    "start": "1804200",
    "end": "1811680"
  },
  {
    "text": "let's see if we can fix that does anyone want to give it a shot so I earlier I",
    "start": "1811680",
    "end": "1821950"
  },
  {
    "text": "wrote a spec that hourly does already does this let's just run down so this is",
    "start": "1821950",
    "end": "1831130"
  },
  {
    "text": "some complicated code because has a lot of parenthesis but don't don't worry so",
    "start": "1831130",
    "end": "1838410"
  },
  {
    "text": "earlier we we all agreed that nil is a valid value so we're gonna just modify a",
    "start": "1838410",
    "end": "1844300"
  },
  {
    "text": "respect to expect nil when it does not exist so we're gonna say if there's not",
    "start": "1844300",
    "end": "1850600"
  },
  {
    "text": "a value from return then nil is valid if there is a value then one should match",
    "start": "1850600",
    "end": "1858550"
  },
  {
    "text": "up into the map sorry this is the line",
    "start": "1858550",
    "end": "1863559"
  },
  {
    "text": "where it says if there's a return value then map should be a valid output for",
    "start": "1863559",
    "end": "1870340"
  },
  {
    "text": "the return value if not then nil is fine so no question mark just checks the return value if it's nil it will return",
    "start": "1870340",
    "end": "1876640"
  },
  {
    "text": "true and then this function below here is just doing more checking saying when",
    "start": "1876640",
    "end": "1883059"
  },
  {
    "text": "it does find something it is a map then the value of ID should match up the ID that you passed in so let's run that",
    "start": "1883059",
    "end": "1890020"
  },
  {
    "text": "again and try to find a value",
    "start": "1890020",
    "end": "1900960"
  },
  {
    "text": "so sweet it's a success so we fixed our our spec and our function let's see if",
    "start": "1902610",
    "end": "1910990"
  },
  {
    "text": "we run it maybe five thousand times what happens success again so we wrote a",
    "start": "1910990",
    "end": "1918490"
  },
  {
    "text": "perfect function",
    "start": "1918490",
    "end": "1921270"
  },
  {
    "start": "1926000",
    "end": "2048000"
  },
  {
    "text": "all right so that's the end of spec I'll pause for questions around spec for like",
    "start": "1926490",
    "end": "1932940"
  },
  {
    "text": "- if there are questions I'll pause so any questions around spec okay I don't",
    "start": "1932940",
    "end": "1952080"
  },
  {
    "text": "have a you mean that check if it's instrumented or not if it's turned on",
    "start": "1952080",
    "end": "1957090"
  },
  {
    "text": "for so there is an instrument - all that",
    "start": "1957090",
    "end": "1965310"
  },
  {
    "text": "just instruments all your functions I have also googled this and it seems",
    "start": "1965310",
    "end": "1970860"
  },
  {
    "text": "like some people write custom functions to only instrument their stuff that",
    "start": "1970860",
    "end": "1975990"
  },
  {
    "text": "they're writing because I don't know what the repercussion of instrumenting all functions would be yeah well there's",
    "start": "1975990",
    "end": "1989640"
  },
  {
    "text": "a you can set up your line again profile and developer mode for to run the like instrument Hall and they'll instrument",
    "start": "1989640",
    "end": "1995820"
  },
  {
    "text": "all the functions such as names for my - all I mean it's one of the biggest value",
    "start": "1995820",
    "end": "2008320"
  },
  {
    "text": "but I think if you use closure you know that well you'll quickly figure out that",
    "start": "2008320",
    "end": "2014290"
  },
  {
    "text": "you have all these all this data roaming around in the maps and you could spec",
    "start": "2014290",
    "end": "2020990"
  },
  {
    "text": "out only the data that you need and then just not crash your system for inputs",
    "start": "2020990",
    "end": "2026420"
  },
  {
    "text": "that you don't need so the the conform spec just helps you with that just fetching the data that you you like any",
    "start": "2026420",
    "end": "2034790"
  },
  {
    "text": "other questions let's back also I should repeat the questions sorry okay so you can ask more",
    "start": "2034790",
    "end": "2043850"
  },
  {
    "text": "questions earlier later but we're gonna jump into the second part of the talk which is concurrency and parallelism so",
    "start": "2043850",
    "end": "2052970"
  },
  {
    "start": "2048000",
    "end": "2144000"
  },
  {
    "text": "this is a quote from one of the closure books closure applied and says the",
    "start": "2052970",
    "end": "2058280"
  },
  {
    "text": "future belongs to languages that can automatically leverage more course as we become available and most",
    "start": "2058280",
    "end": "2065000"
  },
  {
    "text": "of the talks at this conference this year sort of mentions this and anything that you read it always talks about",
    "start": "2065000",
    "end": "2071530"
  },
  {
    "text": "concurrency right the languages that are doing well at this are languages that",
    "start": "2071530",
    "end": "2077990"
  },
  {
    "text": "people are adopting so closure being a very pragmatic language they don't want",
    "start": "2077990",
    "end": "2085280"
  },
  {
    "text": "you mucking around at a little lower level stuff with concurrency and stuff like that so they provide you",
    "start": "2085280",
    "end": "2091490"
  },
  {
    "text": "higher-order functions to basically deal with this stuff all you have to do is use a function and you can trust that",
    "start": "2091490",
    "end": "2097359"
  },
  {
    "text": "closures doing the hard and heavy lifting for you I guess we should define",
    "start": "2097359",
    "end": "2103670"
  },
  {
    "text": "concurrency and parallelism does anybody want to give it a shot",
    "start": "2103670",
    "end": "2110170"
  },
  {
    "text": "parallelism is things that you can do multiple things that you do at the same time so you can think of like if you're",
    "start": "2112030",
    "end": "2118340"
  },
  {
    "text": "taking the train home there are like four cars and four doors so we're entering the Train in a",
    "start": "2118340",
    "end": "2123590"
  },
  {
    "text": "parallel manner and then the concurrency part of that is the line that we're forming to enter the Train so you know",
    "start": "2123590",
    "end": "2132290"
  },
  {
    "text": "Amtrak has done this great well not in the Penn Station but we form a line and",
    "start": "2132290",
    "end": "2138440"
  },
  {
    "text": "then we use all the train car doors to parallely go into the Torino aboard the train okay",
    "start": "2138440",
    "end": "2144830"
  },
  {
    "text": "so closure runs into JVM that's one place that it runs so if you're comfortable with Java or the JVM you",
    "start": "2144830",
    "end": "2151400"
  },
  {
    "text": "don't even have to use the closure stuff you could just use your old Java ways and just use the things that Java gives",
    "start": "2151400",
    "end": "2159109"
  },
  {
    "text": "to you if you do want to take the",
    "start": "2159109",
    "end": "2164450"
  },
  {
    "text": "benefit of closure you can't so why is closure why is concurrency great in closure",
    "start": "2164450",
    "end": "2170510"
  },
  {
    "text": "there are two reasons why look first is pure functions the closure encourages",
    "start": "2170510",
    "end": "2176060"
  },
  {
    "text": "you to use pure functions right so a pure function is just a function that doesn't have a side effect so you can",
    "start": "2176060",
    "end": "2182030"
  },
  {
    "text": "imagine that if you were saying like I'm gonna concurrently or do this in parallel but I'm also like writing some",
    "start": "2182030",
    "end": "2189200"
  },
  {
    "text": "value then if you're doing that thing over and over again you're having side effects",
    "start": "2189200",
    "end": "2194930"
  },
  {
    "text": "and that's not good right it's having an effect on your system that that you're",
    "start": "2194930",
    "end": "2200840"
  },
  {
    "text": "not expecting so your when doing this type of work you should use pure functions small pure functions and then",
    "start": "2200840",
    "end": "2208160"
  },
  {
    "text": "the other part of that is immutable data and by default closures provides mutable",
    "start": "2208160",
    "end": "2213710"
  },
  {
    "text": "data structures so here you can see that we're using the Associated I'm",
    "start": "2213710",
    "end": "2219050"
  },
  {
    "text": "associating my last name into this map and it's going to return a new map with",
    "start": "2219050",
    "end": "2224570"
  },
  {
    "text": "my first and last name in it and the second thing of that function is me doing the same thing by returning M and",
    "start": "2224570",
    "end": "2231050"
  },
  {
    "text": "M will still be the function that were that I'm gonna use so I'll show this in",
    "start": "2231050",
    "end": "2236120"
  },
  {
    "text": "a little bit live coding and there's this other thing called an atom so I",
    "start": "2236120",
    "end": "2241550"
  },
  {
    "text": "keep saying over and over that closure is very pragmatic and they want to help",
    "start": "2241550",
    "end": "2249050"
  },
  {
    "text": "you in whatever way they can so they also recognize that not everything could be immutable right so you you need to",
    "start": "2249050",
    "end": "2254990"
  },
  {
    "text": "have some state mutation and one of the most popular ways to do that is using the construct Alden atom and this is an",
    "start": "2254990",
    "end": "2262610"
  },
  {
    "text": "atom and what an atom allows you to do is just have a like global variable",
    "start": "2262610",
    "end": "2269150"
  },
  {
    "text": "basically and have a safe way to mutate that using the swap function and the",
    "start": "2269150",
    "end": "2275090"
  },
  {
    "text": "swap function is an atomic function so it's gonna say so a scenario would be okay I need to update this variable",
    "start": "2275090",
    "end": "2284290"
  },
  {
    "text": "let's say two threads are actually let's just show the code okay",
    "start": "2284290",
    "end": "2291670"
  },
  {
    "start": "2288000",
    "end": "2657000"
  },
  {
    "text": "so let's find the code",
    "start": "2292540",
    "end": "2297280"
  },
  {
    "text": "all right so let's show the immutable side first so here you see that even",
    "start": "2300770",
    "end": "2307070"
  },
  {
    "text": "though I'm associating inside of the function my last name it's still returning the original map that I had so",
    "start": "2307070",
    "end": "2312830"
  },
  {
    "text": "it's not modifying it so you could expect that in the background when you're relying on something some data",
    "start": "2312830",
    "end": "2318980"
  },
  {
    "text": "structure something else isn't changing it it's always the value that you set it to be so I wrote this little situation",
    "start": "2318980",
    "end": "2325490"
  },
  {
    "text": "here or the scenario where we're gonna say it's a green smiley because we're all gonna vote green when you leave the",
    "start": "2325490",
    "end": "2331610"
  },
  {
    "text": "room and it's an atom and it's set to zero so the situation here is let's say",
    "start": "2331610",
    "end": "2337130"
  },
  {
    "text": "we have a server it's gonna reach out to all the little boxes that has the values",
    "start": "2337130",
    "end": "2343310"
  },
  {
    "text": "on them and it's going to basically increment the value on the counter so",
    "start": "2343310",
    "end": "2349100"
  },
  {
    "text": "the counter here is their green smiley and if we run this it's gonna run it's",
    "start": "2349100",
    "end": "2355490"
  },
  {
    "text": "gonna spin up threads for each one of these and increment the value and the way you get a value from the atom is",
    "start": "2355490",
    "end": "2363020"
  },
  {
    "text": "doing a dereference will hold on I ran that earlier so I'll reset it to zero",
    "start": "2363020",
    "end": "2371500"
  },
  {
    "text": "basically ran through all these examples so it's gonna do that and then it should",
    "start": "2371650",
    "end": "2376790"
  },
  {
    "text": "be nine so it's safely in the background all nine threads are writing to this value and the way it does this is a",
    "start": "2376790",
    "end": "2382790"
  },
  {
    "text": "check-in set so if a thread tries to write to the atom it'll make sure that it's the most updated value that is that",
    "start": "2382790",
    "end": "2390170"
  },
  {
    "text": "it's getting first before it overwrites it so that's where PR functions come in right if you with the check and set it's",
    "start": "2390170",
    "end": "2397310"
  },
  {
    "text": "gonna run it multiple times to make sure it's getting the right check and set so if you have a function with side-effects",
    "start": "2397310",
    "end": "2402350"
  },
  {
    "text": "then you're just gonna do haywire on your system so that's an atom I'll just",
    "start": "2402350",
    "end": "2409820"
  },
  {
    "text": "stick with the code for now so here we have a simulation of a slow square function what it does it just multiplies",
    "start": "2409820",
    "end": "2416390"
  },
  {
    "text": "is the value that you passing into it and it's gonna sleep for one second so",
    "start": "2416390",
    "end": "2422710"
  },
  {
    "text": "right out of the box if you want to make your system faster closure has this",
    "start": "2422710",
    "end": "2428630"
  },
  {
    "text": "higher-order function called map which does things in sequential manner but they also have Pema",
    "start": "2428630",
    "end": "2434450"
  },
  {
    "text": "which does a thread for each item in the collection so sometimes PMF is not worth it so you",
    "start": "2434450",
    "end": "2443030"
  },
  {
    "text": "know with a array of three values spinning up and you thread first there's three values you're gonna have more",
    "start": "2443030",
    "end": "2449210"
  },
  {
    "text": "overhead and doing the threat manipulation then if you were to do it sequentially so we're gonna open up a",
    "start": "2449210",
    "end": "2456369"
  },
  {
    "text": "ripple and we're gonna see some timings on these so first of all we're just",
    "start": "2456369",
    "end": "2462020"
  },
  {
    "text": "gonna get a time so to increment these three integers that's point zero three milliseconds for P map it should be a",
    "start": "2462020",
    "end": "2469430"
  },
  {
    "text": "higher number thirty point thirty two milliseconds because it's doing the thread manipulation behind the scenes so",
    "start": "2469430",
    "end": "2475700"
  },
  {
    "text": "it's not worth it here but it'll probably worth it if you were trying to hit a slow service right so let's do a",
    "start": "2475700",
    "end": "2484250"
  },
  {
    "text": "map over a slow square so you can see in",
    "start": "2484250",
    "end": "2490280"
  },
  {
    "text": "the background it's running it's going to print out a time soon so it's ten",
    "start": "2490280",
    "end": "2498619"
  },
  {
    "text": "seconds basically because there are ten things in the collection each thing takes a second so that number is right",
    "start": "2498619",
    "end": "2504490"
  },
  {
    "text": "so let's try does anyone want to guess what the parallel version of that will be the time around that one yeah yeah so",
    "start": "2504490",
    "end": "2517670"
  },
  {
    "text": "it's running it comes back to be one second because the longest time will just be whatever the longest thing takes",
    "start": "2517670",
    "end": "2524030"
  },
  {
    "text": "to execute right because it's doing ten to ten threads and each thread takes one second so that's the first thing one X",
    "start": "2524030",
    "end": "2532339"
  },
  {
    "text": "scenario of this is I wrote a bot enclosure to go pull pull requests from",
    "start": "2532339",
    "end": "2537790"
  },
  {
    "text": "github to put in our slack Channel and for each repo I just parallel hit the",
    "start": "2537790",
    "end": "2543309"
  },
  {
    "text": "github repo I bought that boat back to pull requests I didn't have to do any hard work it",
    "start": "2543309",
    "end": "2549799"
  },
  {
    "text": "just came out the box so here the other contract that they give you use features Java also has this",
    "start": "2549799",
    "end": "2557530"
  },
  {
    "text": "but it's easier to use here right all we were doing is using the future function",
    "start": "2557530",
    "end": "2562579"
  },
  {
    "text": "that's going to create another thread and run it in the background so we have a fake scenario here",
    "start": "2562579",
    "end": "2568310"
  },
  {
    "text": "we have three services that we're going to hit that builds up one object so you",
    "start": "2568310",
    "end": "2573470"
  },
  {
    "text": "have a recommendation service and account service and a device service but one service takes longer than the other",
    "start": "2573470",
    "end": "2580540"
  },
  {
    "text": "so again the longest that this thing will run in parallel will be five",
    "start": "2580540",
    "end": "2586160"
  },
  {
    "text": "seconds so I have two functions basically doing the same thing except",
    "start": "2586160",
    "end": "2591410"
  },
  {
    "text": "one does a future again which does the stuff in the background and then one which does it sequentially so let's run",
    "start": "2591410",
    "end": "2598760"
  },
  {
    "text": "the sequential one first whoops hold on",
    "start": "2598760",
    "end": "2605500"
  },
  {
    "text": "how do you evaluate though",
    "start": "2606880",
    "end": "2610720"
  },
  {
    "text": "so it's running it's running it's running it'll return soo and imagine if",
    "start": "2613750",
    "end": "2619359"
  },
  {
    "text": "this was a user using your service you don't want to do this right so it took",
    "start": "2619359",
    "end": "2625030"
  },
  {
    "text": "11 seconds which is about right we're gonna call build result which does the",
    "start": "2625030",
    "end": "2631780"
  },
  {
    "text": "future version and you see it takes 5 seconds because it's doing it in",
    "start": "2631780",
    "end": "2636790"
  },
  {
    "text": "parallel so one of the benefits of this",
    "start": "2636790",
    "end": "2642340"
  },
  {
    "text": "is like you don't really have to give this any thought right because you have immutable data structures and you have these higher-order functions or",
    "start": "2642340",
    "end": "2648609"
  },
  {
    "text": "high-level functions that you could just use and have safety with your code have",
    "start": "2648609",
    "end": "2654160"
  },
  {
    "text": "5 minutes so I'm going to rush through some of the things ok",
    "start": "2654160",
    "end": "2659530"
  },
  {
    "start": "2657000",
    "end": "3054000"
  },
  {
    "text": "so let's talk about reducers and then we'll talk about CSV and then we'll be done okay so earlier you saw the map",
    "start": "2659530",
    "end": "2672010"
  },
  {
    "text": "function right and if you have maps maps just do that in a sequential order now",
    "start": "2672010",
    "end": "2677800"
  },
  {
    "text": "you have these reducer functions with which closure closure also provides so",
    "start": "2677800",
    "end": "2684130"
  },
  {
    "text": "let's take this as an example so here we're seeing we're filtering the rides",
    "start": "2684130",
    "end": "2689339"
  },
  {
    "text": "we're gonna map over them and get the right count out of them and then we're gonna reduce them and reduce a reducer",
    "start": "2689339",
    "end": "2695920"
  },
  {
    "text": "function is just something that takes a collection and reduces them into something else into one value so here",
    "start": "2695920",
    "end": "2701260"
  },
  {
    "text": "we're just reducing them into one integer so if we run this this will",
    "start": "2701260",
    "end": "2707020"
  },
  {
    "text": "first pass and rise into filter it will filter those create a new collection",
    "start": "2707020",
    "end": "2712180"
  },
  {
    "text": "then it'll map over that collection and then the reduce will reduce over that",
    "start": "2712180",
    "end": "2717190"
  },
  {
    "text": "collection but there's you can imagine",
    "start": "2717190",
    "end": "2722470"
  },
  {
    "text": "that if you have a big value if you're creating this like a large array you're constantly creating these objects and",
    "start": "2722470",
    "end": "2727930"
  },
  {
    "text": "that's going to be slow right and there's gonna be a lot of garbage collection so closure has a side of your producers which basically composes that",
    "start": "2727930",
    "end": "2735300"
  },
  {
    "text": "chain into one foldable function so",
    "start": "2735300",
    "end": "2740650"
  },
  {
    "text": "you're not creating those intermediate grades it's just going to do it all at once and then there's this fold",
    "start": "2740650",
    "end": "2747580"
  },
  {
    "text": "that basically runs that foldable in parallel so here you can see so this",
    "start": "2747580",
    "end": "2753610"
  },
  {
    "text": "this one cool thing about spec again is I'm using expect to generate two million",
    "start": "2753610",
    "end": "2759430"
  },
  {
    "text": "samples of what our driver map should look like and then I'm going to use that data in in this function so let's open",
    "start": "2759430",
    "end": "2767950"
  },
  {
    "text": "up that okay so let's run and the timing",
    "start": "2767950",
    "end": "2774130"
  },
  {
    "text": "on this sequential version and you can see it's three hundred and sixty eight milliseconds and then the foldable",
    "start": "2774130",
    "end": "2783340"
  },
  {
    "text": "version which runs in parallel is 234 milliseconds so it's like more than a",
    "start": "2783340",
    "end": "2789880"
  },
  {
    "text": "hundred seconds quicker to do it for is just a foldable way okay and then the",
    "start": "2789880",
    "end": "2795940"
  },
  {
    "text": "last thing we're going to talk about since we only have five minutes is Cory sink which if you want to talk earlier",
    "start": "2795940",
    "end": "2804310"
  },
  {
    "text": "or if you went to Carmen's talk on the CSP paper you should check that out",
    "start": "2804310",
    "end": "2810340"
  },
  {
    "text": "so Cory I think is closures implementation of CSP which could be boiled down to just communication via",
    "start": "2810340",
    "end": "2818500"
  },
  {
    "text": "wire processes so one process sends another process of message over a channel and if you use go go also has go",
    "start": "2818500",
    "end": "2828490"
  },
  {
    "text": "routines which is based on CSP so how many people have heard of the token",
    "start": "2828490",
    "end": "2834010"
  },
  {
    "text": "bucket filter algorithm cool so I'll try",
    "start": "2834010",
    "end": "2839470"
  },
  {
    "text": "I'll explain it so all it is because there's some rules right so there's a",
    "start": "2839470",
    "end": "2845560"
  },
  {
    "text": "bucket and your bucket has a certain amount of tokens in it let's say your bucket has 10 tokens a value comes in so",
    "start": "2845560",
    "end": "2853570"
  },
  {
    "text": "this is the rule for the the buckets and there's a process writing to the bucket",
    "start": "2853570",
    "end": "2858580"
  },
  {
    "text": "right so it's writing tokens constantly to the bucket but there's a max amount so if there are 10 tokens in the bucket",
    "start": "2858580",
    "end": "2863920"
  },
  {
    "text": "and 10 is your max the process should stop writing to the bucket then there's another process that's receiving the the",
    "start": "2863920",
    "end": "2871540"
  },
  {
    "text": "token bucket came out of packet routing so it's going to send a packet if the packet is the same size as how many",
    "start": "2871540",
    "end": "2878230"
  },
  {
    "text": "tokens are in the bucket then the packet goes through so it's basically a rate limiter but you could apply this rate limiting to other other things like",
    "start": "2878230",
    "end": "2884480"
  },
  {
    "text": "appointments or or whatever so this problem fits with Korey sync and",
    "start": "2884480",
    "end": "2891350"
  },
  {
    "text": "CSV very well so first we're just going",
    "start": "2891350",
    "end": "2896720"
  },
  {
    "text": "to define the bucket right and the bucket is just a channel here that we're",
    "start": "2896720",
    "end": "2903320"
  },
  {
    "text": "getting in so someone's passing us a channel so let's see what the definition is so we're gonna pass in a token bucket",
    "start": "2903320",
    "end": "2908330"
  },
  {
    "text": "we're passing a value of 15 which is the max amount of tokens that we have now",
    "start": "2908330",
    "end": "2914690"
  },
  {
    "text": "when the way you put stuff on the bucket is using these put functions so you're",
    "start": "2914690",
    "end": "2920780"
  },
  {
    "text": "gonna put put put when the channel reaches its buffer size it's gonna stop writing to it or stuff except accepting",
    "start": "2920780",
    "end": "2927290"
  },
  {
    "text": "values so we've just defined the bucket with like three lines of code okay like",
    "start": "2927290",
    "end": "2934340"
  },
  {
    "text": "two more minutes so that's our bucket so",
    "start": "2934340",
    "end": "2939650"
  },
  {
    "text": "you see here we're gonna put a value on the bucket this is the bucket we're just",
    "start": "2939650",
    "end": "2945680"
  },
  {
    "text": "gonna put the T value we have this other channel construct called a timeout which just times out every waste one",
    "start": "2945680",
    "end": "2953960"
  },
  {
    "text": "second and then it closes itself so we're basically simulating a one-second delay and then writing to it again and",
    "start": "2953960",
    "end": "2960619"
  },
  {
    "text": "this is the limiting part of it so basically we're saying okay what's",
    "start": "2960619",
    "end": "2965720"
  },
  {
    "text": "the packet count when it comes in we're gonna get the size of it and we're gonna",
    "start": "2965720",
    "end": "2970780"
  },
  {
    "text": "take it off the end channel and then we are going to check if the bucket has",
    "start": "2970780",
    "end": "2977240"
  },
  {
    "text": "enough tokens in it matches in matching the size and then we're going to extract that amount of tokens from the bucket",
    "start": "2977240",
    "end": "2984590"
  },
  {
    "text": "and then we're gonna put on an out Janowicz basically listening you could think of that as your processor that the",
    "start": "2984590",
    "end": "2991430"
  },
  {
    "text": "packet was processed so we can see that here so earlier I started out this",
    "start": "2991430",
    "end": "2996800"
  },
  {
    "text": "function we're going to pass in one second",
    "start": "2996800",
    "end": "3003539"
  },
  {
    "text": "sorry to function we're gonna send a message and it has the size of 12 on our",
    "start": "3006050",
    "end": "3013460"
  },
  {
    "text": "inbound channel so you see we saw packet process so we just stole 12 tokens right",
    "start": "3013460",
    "end": "3020970"
  },
  {
    "text": "so there should be less tokens there now so you see we got the waiting on tokens message just gonna keep checking and",
    "start": "3020970",
    "end": "3026850"
  },
  {
    "text": "it's gonna keep writing to the bucket and when there is enough it automatically just sends that message to",
    "start": "3026850",
    "end": "3032580"
  },
  {
    "text": "it it's basically just a different way of if you want to talk earlier about elixir and OTP",
    "start": "3032580",
    "end": "3038490"
  },
  {
    "text": "it's basically the same concept just message passing between processes so",
    "start": "3038490",
    "end": "3044790"
  },
  {
    "text": "yeah that's pretty much concurrency we will not go over closure scope but it is",
    "start": "3044790",
    "end": "3049980"
  },
  {
    "text": "cool trust me",
    "start": "3049980",
    "end": "3052760"
  }
]