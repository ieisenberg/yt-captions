[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "all right so I have a lot of material so I'm gonna try to talk fast and leave",
    "start": "3889",
    "end": "8990"
  },
  {
    "text": "room for questions but as as was announced there will be an AMA a little bit later so if you don't get your",
    "start": "8990",
    "end": "15919"
  },
  {
    "text": "questions answered at the end of this talk there will be a whole session at 4:10 today so today I'm going to talk a",
    "start": "15919",
    "end": "22940"
  },
  {
    "text": "little bit about where the the java language and platform is going in the next few years and a little bit about",
    "start": "22940",
    "end": "28760"
  },
  {
    "text": "how we've changed the way we're going to get it there so this is how you know I",
    "start": "28760",
    "end": "35090"
  },
  {
    "text": "work at Oracle's not an impostor okay so",
    "start": "35090",
    "end": "41140"
  },
  {
    "text": "let's talk a little bit about where where Java has been and where it's going Java is getting kind of old",
    "start": "41140",
    "end": "48649"
  },
  {
    "start": "42000",
    "end": "42000"
  },
  {
    "text": "in a sense job has been around for almost 25 years if I had a dollar for every time Java was declared dead I",
    "start": "48649",
    "end": "54380"
  },
  {
    "text": "could probably retire and all of those predictions so far have turned out to be",
    "start": "54380",
    "end": "59930"
  },
  {
    "text": "incorrect Java is still the world's most popular programming platform and we would like that to continue to be the",
    "start": "59930",
    "end": "65810"
  },
  {
    "text": "case for a long long time and so how do we do that ham well it's not a big",
    "start": "65810",
    "end": "71240"
  },
  {
    "text": "secret the answer is stay relevant stay relevant to the problems people want to solve stay relevant to the parred where",
    "start": "71240",
    "end": "78740"
  },
  {
    "text": "people want to run on and don't break your promises and you know that's easy to say it's a little bit harder to do",
    "start": "78740",
    "end": "84770"
  },
  {
    "text": "but you know you should see each of those themes going on in the things that I'm talking about in this talk in terms",
    "start": "84770",
    "end": "92930"
  },
  {
    "start": "91000",
    "end": "91000"
  },
  {
    "text": "of don't break your promises that's basically compatibility and from our perspective that's the prime directive",
    "start": "92930",
    "end": "98420"
  },
  {
    "text": "is stay compatible and it is it's my belief that Java is successful today because the Java code that you wrote 25",
    "start": "98420",
    "end": "105770"
  },
  {
    "text": "years ago just works old binary is still run old source code still compiles and",
    "start": "105770",
    "end": "111920"
  },
  {
    "text": "we keep our users by keeping our promises now this has a cost it means that evolution of the you know the",
    "start": "111920",
    "end": "118250"
  },
  {
    "text": "language takes takes longer and you know it means there are certain things that",
    "start": "118250",
    "end": "124130"
  },
  {
    "text": "we can't do or it's gonna you know take longer for us to do and you know on the",
    "start": "124130",
    "end": "129739"
  },
  {
    "text": "other hand it allows people to adopt new functionality without us pulling the rug",
    "start": "129739",
    "end": "135349"
  },
  {
    "text": "out from under them completely so a perfect example of how we pulled this off was generics generics was a big disruptive change in",
    "start": "135349",
    "end": "142370"
  },
  {
    "text": "the language and in the ecosystem but nobody had to pay attention to it at any",
    "start": "142370",
    "end": "147470"
  },
  {
    "text": "given time you could take your old non generic code and continue to run it you could migrate it in whole or in part",
    "start": "147470",
    "end": "154010"
  },
  {
    "text": "you could migrate it now later or Never you could interoperate between generic code and non generic code with graceful",
    "start": "154010",
    "end": "160580"
  },
  {
    "text": "degradation of the boundaries and no flag day is where someone blew the whistle and everybody has to go recompile their code and you know that",
    "start": "160580",
    "end": "168620"
  },
  {
    "text": "is how you know we can make a significant upgrade to the platform without you know without the risk of",
    "start": "168620",
    "end": "176900"
  },
  {
    "text": "breaking our promises to the users and leaving people behind in a simple example of you know our compatibility is",
    "start": "176900",
    "end": "183530"
  },
  {
    "text": "what we did with lambdas when we did lambdas in Java 8 all of a sudden libraries that have been",
    "start": "183530",
    "end": "188810"
  },
  {
    "text": "written 20 years ago that didn't even know that lambdas were coming work with lambdas on day one because we we played",
    "start": "188810",
    "end": "195709"
  },
  {
    "text": "into patterns of programming like single method interfaces that were in common use rather than saying oh if you want to",
    "start": "195709",
    "end": "202670"
  },
  {
    "text": "use lambdas you have to rewrite your libraries to use function types and that would have meant a 10-year adoption",
    "start": "202670",
    "end": "207860"
  },
  {
    "text": "curve for lambdas rather than they work with old libraries on day one so it's",
    "start": "207860",
    "end": "212870"
  },
  {
    "text": "possible to do this it takes longer it's a little bit harder but we can still get a good result the important thing to",
    "start": "212870",
    "end": "219500"
  },
  {
    "start": "218000",
    "end": "218000"
  },
  {
    "text": "remember you know when we're picking language features is that language features are forever once we put a",
    "start": "219500",
    "end": "224989"
  },
  {
    "text": "feature in the language we're never going to be able to take it away and every feature interacts with every other",
    "start": "224989",
    "end": "230480"
  },
  {
    "text": "feature and it constrains every future feature we might want to do and that means we have to pick very carefully and",
    "start": "230480",
    "end": "237019"
  },
  {
    "text": "sometimes the consequence of that is well yeah we can't do this feature or we can't do this feature right now generics",
    "start": "237019",
    "end": "243560"
  },
  {
    "text": "were a good example of this you know in in 1995 we knew the language needed",
    "start": "243560",
    "end": "249170"
  },
  {
    "text": "generics it's not like we didn't know what parametric polymorphism was but we didn't know the right way to do it",
    "start": "249170",
    "end": "254360"
  },
  {
    "text": "we knew the wrong way to do it the wrong way to do it was to copy C++ and I think we're all glad that we didn't make that",
    "start": "254360",
    "end": "260209"
  },
  {
    "text": "choice in 1995 even though the consequence was we had to wait a lot longer to get generics in the language",
    "start": "260209",
    "end": "266240"
  },
  {
    "text": "but I think we got a much better result than we would have we had just copied C++ in 1995 and the",
    "start": "266240",
    "end": "273000"
  },
  {
    "text": "same thing is true with lambdas in the 2005 timeframe some of you may remember there was a vibrant debate in the",
    "start": "273000",
    "end": "278910"
  },
  {
    "text": "community with many competing proposals about how to add lambdas to Java and I think we're all glad we didn't pick any",
    "start": "278910",
    "end": "284699"
  },
  {
    "text": "of those proposals it took maybe five years longer but we got a much much better result but you know as",
    "start": "284699",
    "end": "291410"
  },
  {
    "text": "programmers we tend to focus on language features because we look at code all day but you know the reality is the way we",
    "start": "291410",
    "end": "298620"
  },
  {
    "text": "think about how to pick language features is is this making it easier for people to build and maintain reliable",
    "start": "298620",
    "end": "304800"
  },
  {
    "text": "programs right we want people to you know if they write code we want them to",
    "start": "304800",
    "end": "312330"
  },
  {
    "text": "be able to keep their investment in that code for a long time we don't want there to be arbitrary reasons why they have to",
    "start": "312330",
    "end": "318389"
  },
  {
    "text": "throw that throw that code out and the best way to do it is to make it easy to build reliable programs that you that",
    "start": "318389",
    "end": "324780"
  },
  {
    "text": "you can read you can understand you can maintain and you know because the code that you can't can't understand is the",
    "start": "324780",
    "end": "331289"
  },
  {
    "text": "code you're gonna throw out right so when we select features we look at it through the lens of is this making it",
    "start": "331289",
    "end": "337320"
  },
  {
    "text": "easier for people to build and maintain programs that they understand so I think",
    "start": "337320",
    "end": "343650"
  },
  {
    "text": "you know it should be clear that no language is ever finished and and and Java is no exception there you know I",
    "start": "343650",
    "end": "349909"
  },
  {
    "text": "was talking above you know before this before the talks you know some folks in",
    "start": "349909",
    "end": "355110"
  },
  {
    "text": "the lounge about why the programming language designers always want to add new features to languages you know why",
    "start": "355110",
    "end": "360990"
  },
  {
    "text": "aren't language is ever good enough and the reason is well the problems that we want to solve with programming languages",
    "start": "360990",
    "end": "366659"
  },
  {
    "text": "change the hardware we want to run on changes and developer expectations change developer fashions change and if",
    "start": "366659",
    "end": "374310"
  },
  {
    "text": "we want to stay relevant to the way people want to program the language has to evolve and that's ok and we can",
    "start": "374310",
    "end": "381240"
  },
  {
    "text": "continue to evolve although we have to do it carefully because languages can get full what you know in the sense of",
    "start": "381240",
    "end": "387659"
  },
  {
    "text": "not being able to add new things without breaking things so we have to pick carefully so alright so let's talk about",
    "start": "387659",
    "end": "394530"
  },
  {
    "text": "what's happened in the last year or actually a little bit more we we recently switched to a",
    "start": "394530",
    "end": "401490"
  },
  {
    "start": "397000",
    "end": "397000"
  },
  {
    "text": "different delivery cadence for Java it used to be that we had these two to four year time feature box releases where we",
    "start": "401490",
    "end": "408510"
  },
  {
    "text": "pick a giant feature like lambdas and we'd say that's the release driver for Java eight and then we would take a wild",
    "start": "408510",
    "end": "415169"
  },
  {
    "text": "crazy gasp that we could get that done in three years and we be wrong big surprise and then we'd be late and you",
    "start": "415169",
    "end": "421740"
  },
  {
    "text": "know this wasn't good for us this wasn't good for our customers the perception was things were moving slowly dates were",
    "start": "421740",
    "end": "427050"
  },
  {
    "text": "unpredictable but there were also a bunch of other sort of ill effects that you know that came from that release",
    "start": "427050",
    "end": "432810"
  },
  {
    "text": "model like it often didn't feel worthwhile to do smaller features because they always got stuck behind the",
    "start": "432810",
    "end": "439020"
  },
  {
    "text": "big features and you know the users got frustrated because a feature that might have been done in the first six months",
    "start": "439020",
    "end": "445560"
  },
  {
    "text": "of a release cycle had to wait three more years for the release to finish and so we made the decision to switch to a",
    "start": "445560",
    "end": "452400"
  },
  {
    "text": "six-month time box release cycle and we're we've been doing this almost two years now we've been able to deliver",
    "start": "452400",
    "end": "458610"
  },
  {
    "text": "releases like clockwork and it's been fantastic not only are we able to",
    "start": "458610",
    "end": "464220"
  },
  {
    "text": "deliver things more frequently be more agile and our planning but from our",
    "start": "464220",
    "end": "469770"
  },
  {
    "text": "perspective internally our release management overhead has gone almost a zero it's fantastic I get to spend all",
    "start": "469770",
    "end": "475830"
  },
  {
    "text": "my time on Janee ring and almost no time on release management meetings and things like that because features don't",
    "start": "475830",
    "end": "482970"
  },
  {
    "text": "board the train till they're ready and you know if something this is a this is a train no big deal six months is not a",
    "start": "482970",
    "end": "490530"
  },
  {
    "text": "very long time to wait for the next train whereas the next train is four years away people would move heaven and earth to try to get a feature in and",
    "start": "490530",
    "end": "496919"
  },
  {
    "text": "that didn't always work out as well as they would have hoped so you know this transition from our perspective has been",
    "start": "496919",
    "end": "503610"
  },
  {
    "text": "fantastic in terms of our ability to focus and deliver value more frequently I think it's been a little bit of a you",
    "start": "503610",
    "end": "511590"
  },
  {
    "text": "know a challenge for users because they don't quite understand it yet but it's actually fairly simple we're",
    "start": "511590",
    "end": "517919"
  },
  {
    "text": "not actually the rate of innovation hasn't really changed it's the rate of delivery that's changed and you can pick",
    "start": "517919",
    "end": "524730"
  },
  {
    "text": "up every release if you want you could pick up right every other release every three years whatever you want to do it",
    "start": "524730",
    "end": "530820"
  },
  {
    "text": "all works so to illustrate you know Java 9 which was released you know",
    "start": "530820",
    "end": "536800"
  },
  {
    "start": "532000",
    "end": "532000"
  },
  {
    "text": "almost two years ago was three and a half years in the making there were over 90 Japs Japs as our unit",
    "start": "536800",
    "end": "542140"
  },
  {
    "text": "of feature planning and you know this was as some of you probably know was somewhat of a disruptive release the",
    "start": "542140",
    "end": "549220"
  },
  {
    "text": "following releases 10 11 12 followed every six months after that and you know",
    "start": "549220",
    "end": "555700"
  },
  {
    "text": "they weren't as big as nine because you know we hadn't been working on them for as long but if you sort of count up the",
    "start": "555700",
    "end": "561250"
  },
  {
    "text": "Japs in like a six month release like Java 10 and you multiply it by you know the you know to the out to the scale of",
    "start": "561250",
    "end": "567310"
  },
  {
    "text": "how long Java eight or nine took you you see that the rate at which features are being added hasn't really changed the",
    "start": "567310",
    "end": "573880"
  },
  {
    "text": "rate at which features are being delivered has changed and the most recent you know most recent version Java",
    "start": "573880",
    "end": "580330"
  },
  {
    "text": "13 is already in ramp down and should be you know released you know released in a few months and",
    "start": "580330",
    "end": "587980"
  },
  {
    "text": "we're already working on Java 14 so you know these six-month releases are full feature releases and they're they're not",
    "start": "587980",
    "end": "598120"
  },
  {
    "text": "as they're not as you know big and disruptive as seven eight nine were but you know they are you know they're not",
    "start": "598120",
    "end": "604570"
  },
  {
    "text": "betas they're not you know they're they're they're real real releases as we",
    "start": "604570",
    "end": "612610"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "develop the platform faster there's a risk that certain things will happen too",
    "start": "612610",
    "end": "618040"
  },
  {
    "text": "quickly especially because as I said language features are forever once we put a feature in the language we don't",
    "start": "618040",
    "end": "623050"
  },
  {
    "text": "want to change it so we still need a way to make sure that we're putting the right features in the language and so",
    "start": "623050",
    "end": "629740"
  },
  {
    "text": "what we decided to do was that four features four major features that are visible in the programming model we have",
    "start": "629740",
    "end": "636580"
  },
  {
    "text": "a mechanism called preview where features will go through a round of preview it's sort of a provisional the",
    "start": "636580",
    "end": "642520"
  },
  {
    "text": "feature is done but we might you know change change the paint color a little bit before we we finalize it so these",
    "start": "642520",
    "end": "649660"
  },
  {
    "text": "aren't you know experimental or beta features as much as you know they're they're provisional we're test driving",
    "start": "649660",
    "end": "655660"
  },
  {
    "text": "them and the expected outcome is they'll be promoted to full permanent features",
    "start": "655660",
    "end": "661300"
  },
  {
    "text": "in the next version or two so this this",
    "start": "661300",
    "end": "666790"
  },
  {
    "text": "this way not only do you a chance to see what's coming you also have a chance to to try it out there's",
    "start": "666790",
    "end": "672339"
  },
  {
    "text": "full IDE support tooling support for all the preview features when they're released because they're part of the",
    "start": "672339",
    "end": "677860"
  },
  {
    "text": "language specification they're not you know they're not just nailed on the side but if you want to use them you have to",
    "start": "677860",
    "end": "685089"
  },
  {
    "text": "turn them on because we don't want people to accidentally run them in production and find that out after the",
    "start": "685089",
    "end": "691540"
  },
  {
    "text": "fact so for example if you're using the command-line tools Java compiler or you",
    "start": "691540",
    "end": "697990"
  },
  {
    "text": "know launching the JVM you have to say enable preview in order to use preview features and if you're using your IDE",
    "start": "697990",
    "end": "705279"
  },
  {
    "text": "IDE is like in their language level picker you'll see two different choices you know one for twelve and one for 12",
    "start": "705279",
    "end": "711279"
  },
  {
    "text": "with preview so you can pick which language level you want to have all",
    "start": "711279",
    "end": "716740"
  },
  {
    "text": "right so that's that's process you didn't come here to talk about talk about process you came here to hear about features so let's talk about",
    "start": "716740",
    "end": "723070"
  },
  {
    "start": "721000",
    "end": "721000"
  },
  {
    "text": "features our feature pipeline is better than it has ever been all the time that I've been involved in",
    "start": "723070",
    "end": "730060"
  },
  {
    "text": "Java I've never seen a feature pipeline this rich and this deep so we have a lot",
    "start": "730060",
    "end": "735550"
  },
  {
    "text": "of projects going on I'm not going to talk about them all I'm going to talk about a couple of them the one that developers are probably most interested",
    "start": "735550",
    "end": "742630"
  },
  {
    "text": "in are the features that are closest to the surface of the language this is project amber we call this right sizing",
    "start": "742630",
    "end": "747970"
  },
  {
    "text": "language ceremony the you know these are a lot of the features that have been developers have been asking for for a",
    "start": "747970",
    "end": "753730"
  },
  {
    "text": "long time that might not be deep but they help you know what we do every day that some of the other projects of",
    "start": "753730",
    "end": "759910"
  },
  {
    "text": "Valhalla and loom are much deeper features in the sense that they start in the VM and work their way up through the",
    "start": "759910",
    "end": "765730"
  },
  {
    "text": "language and have to do with adapting the programming model to run better on",
    "start": "765730",
    "end": "771760"
  },
  {
    "text": "modern hardware for example a project loom is about fibers and continuations so that we can you know run you know",
    "start": "771760",
    "end": "778630"
  },
  {
    "text": "millions of concurrent activities on a single JVM project Panama is about better Interop with native code and",
    "start": "778630",
    "end": "785290"
  },
  {
    "text": "native data like I said I'm not going to talk about all of these today about I'm gonna talk about amber in some detail",
    "start": "785290",
    "end": "791350"
  },
  {
    "text": "and Valhalla in a little bit of detail so I know this talk is called language",
    "start": "791350",
    "end": "797709"
  },
  {
    "start": "795000",
    "end": "795000"
  },
  {
    "text": "futures I'm going to talk about something that's already the language because I'll bet for a lot of you it's still in your future how",
    "start": "797709",
    "end": "803839"
  },
  {
    "text": "many people here are still on Java 8 so I'm sorry you know so this is a feature",
    "start": "803839",
    "end": "811190"
  },
  {
    "text": "we added in Java 10 which from your perspective is the future and from my perspective is the infinite past and",
    "start": "811190",
    "end": "817399"
  },
  {
    "text": "this is kind of interesting feature it's not actually from a language design perspective a very interesting feature",
    "start": "817399",
    "end": "822440"
  },
  {
    "text": "but it was actually one of the most commonly requested features that we got which is why do I have to type out the",
    "start": "822440",
    "end": "828949"
  },
  {
    "text": "whole big name of a type why can't I just let the compiler figure this out for me and this is something that you",
    "start": "828949",
    "end": "835910"
  },
  {
    "text": "might have seen in Scala or in Kotlin or numerous other languages where instead of declaring a local variable with an",
    "start": "835910",
    "end": "843440"
  },
  {
    "text": "explicit type you can tell the compiler go ahead and infer that for me figure out the type compute the type of the",
    "start": "843440",
    "end": "849320"
  },
  {
    "text": "initializer and make that the type of the variable and as I said it's not particularly deep it's not quite as",
    "start": "849320",
    "end": "855649"
  },
  {
    "text": "shallow as some people think it is some people call the syntactic sugar it is absolutely not syntactic sugar it's it's",
    "start": "855649",
    "end": "862160"
  },
  {
    "text": "deeper than that but it does allow you the thing I liked about this is you know in any of these declarations there are",
    "start": "862160",
    "end": "869060"
  },
  {
    "text": "three things going on there's a type there's a variable name and there's an expression the most important thing in",
    "start": "869060",
    "end": "874220"
  },
  {
    "text": "that in that line is the variable name because that that's the aspect that",
    "start": "874220",
    "end": "879440"
  },
  {
    "text": "involves programmer creativity where you've actually said what this variable means in my program by leading the type",
    "start": "879440",
    "end": "885949"
  },
  {
    "text": "it brings the variable name sort of front and center where it is more clearly and you know in the users field",
    "start": "885949",
    "end": "891649"
  },
  {
    "text": "of attention and makes it easier if you have chosen good variable names how many people here routinely choose bad",
    "start": "891649",
    "end": "897500"
  },
  {
    "text": "variable names let's see I thought no one was gonna raise their hand on that we'll try this again none of us choose",
    "start": "897500",
    "end": "905029"
  },
  {
    "text": "bad variable names right see so if we don't choose bad variable names we often",
    "start": "905029",
    "end": "911510"
  },
  {
    "text": "don't lose a lot of readability sometimes we might in which case we're not making it illegal to declare an",
    "start": "911510",
    "end": "917240"
  },
  {
    "text": "explicit type we're just saying if you think it's more readable go ahead and",
    "start": "917240",
    "end": "922250"
  },
  {
    "text": "and leave the type out if you you know otherwise you know put it in if you think that's more readable so developer",
    "start": "922250",
    "end": "928940"
  },
  {
    "text": "choice some people don't like when we give developers choices because bad developers might make bad choices what",
    "start": "928940",
    "end": "935690"
  },
  {
    "text": "we found is that's true but it's like pretty hard to stop bad developers from making bad choices so but you know the",
    "start": "935690",
    "end": "942680"
  },
  {
    "text": "key thing here is the variable name is often the most useful thing so let's give that give that priority so what are",
    "start": "942680",
    "end": "949340"
  },
  {
    "text": "the restrictions this works for local variables it doesn't work for method return types or parameter types because",
    "start": "949340",
    "end": "955820"
  },
  {
    "text": "those are part of the API but for local variables which are part of the implementation it's perfectly okay there",
    "start": "955820",
    "end": "961880"
  },
  {
    "text": "are some you know some weird cases because the Java language actually has some weird types and its type system",
    "start": "961880",
    "end": "967760"
  },
  {
    "text": "like AI intersection types and capture types so every once in a while this will",
    "start": "967760",
    "end": "973340"
  },
  {
    "text": "expose a weird type to your program that you didn't realize was there so for example if you say the type of this get",
    "start": "973340",
    "end": "981320"
  },
  {
    "text": "class you might think that's class of question it's actually class of capture of question what's a capture type well",
    "start": "981320",
    "end": "987680"
  },
  {
    "text": "we've all managed to ignore capture types for a long time even though they've been there they have to do with",
    "start": "987680",
    "end": "994000"
  },
  {
    "text": "they're basically existential types that that say whenever I use a wild card there's a specific type that I mean at",
    "start": "994000",
    "end": "1000760"
  },
  {
    "text": "that point in the program and the capture describes that most of the time we can ignore this but I bring the I",
    "start": "1000760",
    "end": "1007120"
  },
  {
    "text": "bring this up because this is bringing some of the the fine points of the type system a little bit more in-your-face",
    "start": "1007120",
    "end": "1013540"
  },
  {
    "text": "and sometimes people get surprised glad more interestingly if I say list out of",
    "start": "1013540",
    "end": "1019150"
  },
  {
    "text": "1 comma 2 comma the string 3 you might think that would be a list of question but actually it's a list of question",
    "start": "1019150",
    "end": "1025930"
  },
  {
    "text": "extends serializable and comparable and some more because the common supertype between those parameters is that is not",
    "start": "1025930",
    "end": "1033069"
  },
  {
    "text": "just not just object or wildcard so every once in a while this may by you",
    "start": "1033070",
    "end": "1038438"
  },
  {
    "text": "just be aware the type system that you've been working with all along is a little more complicated than you thought and most of the time that's just been",
    "start": "1038439",
    "end": "1044949"
  },
  {
    "text": "hidden from you at a sort of metal level it's interesting this was one of the most commonly requested features you",
    "start": "1044949",
    "end": "1052090"
  },
  {
    "text": "know people like would frequently like say you know when is Javal gonna do this this you know it's it's crazy that I",
    "start": "1052090",
    "end": "1058300"
  },
  {
    "text": "still have to type out these big long types when in you know in Scala I don't have to on the other hand when we said",
    "start": "1058300",
    "end": "1066370"
  },
  {
    "text": "this and finally that we're gonna go ahead and do this there was this vocal backlash of oh you're just giving into",
    "start": "1066370",
    "end": "1072880"
  },
  {
    "text": "fashion oh you're gonna make code unreadable you're just you're just enabling bad developers to write bad",
    "start": "1072880",
    "end": "1078340"
  },
  {
    "text": "code so you know you can't win right and then when you know when we actually",
    "start": "1078340",
    "end": "1084040"
  },
  {
    "text": "released the feature the reality was completely different it was fine no one complained and so you know I think this",
    "start": "1084040",
    "end": "1091030"
  },
  {
    "text": "is all just a lesson about how we fear change but it will take a little bit of time for you know for good practices and",
    "start": "1091030",
    "end": "1097990"
  },
  {
    "text": "good style to emerge and in aid of that you know we've written some documents a",
    "start": "1097990",
    "end": "1103120"
  },
  {
    "text": "FAQ and a style guide about how most effectively to use this feature and we plan to keep doing that for new you know",
    "start": "1103120",
    "end": "1108520"
  },
  {
    "text": "for other new features so you know like most features that give you a choice you",
    "start": "1108520",
    "end": "1113980"
  },
  {
    "text": "know it requires some judgment that should be a good thing most of us hopefully have good judgment",
    "start": "1113980",
    "end": "1120400"
  },
  {
    "text": "most of the time but you know it does also mean that people have you know are given an opportunity to to do the wrong",
    "start": "1120400",
    "end": "1126490"
  },
  {
    "text": "thing and we need to you know help each other fight you know find that find the",
    "start": "1126490",
    "end": "1131980"
  },
  {
    "text": "right style all right so that's like I said from my perspective past but still",
    "start": "1131980",
    "end": "1138670"
  },
  {
    "text": "sort of future what else is coming up so in in in job 12 which is also in the",
    "start": "1138670",
    "end": "1145960"
  },
  {
    "start": "1141000",
    "end": "1141000"
  },
  {
    "text": "past we we had a preview feature which was enhancements to switch this was",
    "start": "1145960",
    "end": "1151630"
  },
  {
    "text": "reproving with with with a small change and this",
    "start": "1151630",
    "end": "1158170"
  },
  {
    "text": "feature sort of sedimented out of a bigger feature called pattern matching which i'll talk about where we had",
    "start": "1158170",
    "end": "1164050"
  },
  {
    "text": "explored this as part of pattern matching and then realized well here's a small chunk of it we can deliver earlier",
    "start": "1164050",
    "end": "1169690"
  },
  {
    "text": "so this is one of the benefits of the more rapid release cadence and the you",
    "start": "1169690",
    "end": "1175480"
  },
  {
    "text": "know the switch the switch statement in Java is sort of one of the more unfortunate sets of choices in the",
    "start": "1175480",
    "end": "1180850"
  },
  {
    "text": "language I think we were copying a little bit too literally from the C specification when when the language was",
    "start": "1180850",
    "end": "1186190"
  },
  {
    "text": "designed and so there are a lot of complaints about switch very often you",
    "start": "1186190",
    "end": "1192700"
  },
  {
    "text": "want to use it as an expression but it's a statement so you have to sort of simulate an expression by assigning to a",
    "start": "1192700",
    "end": "1198220"
  },
  {
    "text": "common variable and rearm for example people certainly hate having to break on every every arm of a",
    "start": "1198220",
    "end": "1205490"
  },
  {
    "text": "switch which is irritating but you know much worse than irritating is it's error-prone it's it's a way to make",
    "start": "1205490",
    "end": "1212000"
  },
  {
    "text": "mistakes that are that are hard to notice and so you know we in the context",
    "start": "1212000",
    "end": "1217670"
  },
  {
    "text": "of pattern matching we looked at well how does the switch statement have to evolve to support pattern matching and then we identified a couple of things",
    "start": "1217670",
    "end": "1224210"
  },
  {
    "text": "that we could do to make it more generally useful so has an example of like what's wrong with switch right here",
    "start": "1224210",
    "end": "1229820"
  },
  {
    "text": "so sort of a typical switch that's an expression masquerading as a statement so we have a declare local variable and",
    "start": "1229820",
    "end": "1235460"
  },
  {
    "text": "then in each arm of the switch we assign to the local variable and then even though we've covered all the cases we",
    "start": "1235460",
    "end": "1240740"
  },
  {
    "text": "still have to have a default case saying you know something about the world is broken and there's a lot of repetition",
    "start": "1240740",
    "end": "1246470"
  },
  {
    "text": "here right we're repeating the assignment we're repeating the breaks and you know and then we have this you",
    "start": "1246470",
    "end": "1253910"
  },
  {
    "text": "know we have this annoying you know boilerplate that we have to write and people complain to that boilerplate",
    "start": "1253910",
    "end": "1259580"
  },
  {
    "text": "I don't like boilerplate either but for a very different reason most people know like boilerplate because it's stuff they have to type and they don't want to type",
    "start": "1259580",
    "end": "1265820"
  },
  {
    "text": "it I don't like boilerplate because the place for bugs to hide so I want to eliminate boilerplate because it",
    "start": "1265820",
    "end": "1272270"
  },
  {
    "text": "eliminates the places where where bugs are gonna hide so here's a the same",
    "start": "1272270",
    "end": "1277760"
  },
  {
    "text": "switch that's rewritten as a switch expression it looks slightly syntactically different but the basic",
    "start": "1277760",
    "end": "1284390"
  },
  {
    "text": "concept is the same and this is probably a lot closer to the code you had in your",
    "start": "1284390",
    "end": "1289550"
  },
  {
    "text": "head when you sat down to write the previous code which is if it's Monday Friday or Sunday the number of letters",
    "start": "1289550",
    "end": "1295460"
  },
  {
    "text": "is 6 otherwise if it's Tuesday at 7 etc and expressions have to be total they",
    "start": "1295460",
    "end": "1301040"
  },
  {
    "text": "have to provide a value in in all cases and because we're switching here over an enum the compiler actually knows that",
    "start": "1301040",
    "end": "1307460"
  },
  {
    "text": "it's total and doesn't make you write the default Clause and you know so we've",
    "start": "1307460",
    "end": "1312950"
  },
  {
    "text": "squeezed away a lot of the repetition but we've also squeezed away a lot of the sources of error and so the code is",
    "start": "1312950",
    "end": "1319940"
  },
  {
    "text": "shorter but it's also has fewer places for bugs to hide so there's actually two sub features going on here",
    "start": "1319940",
    "end": "1326840"
  },
  {
    "text": "at once one is that you can use switch either as an expression or a statement and the other",
    "start": "1326840",
    "end": "1333100"
  },
  {
    "text": "is we have a sort of streamlined form of the case label which uses an arrow",
    "start": "1333100",
    "end": "1338140"
  },
  {
    "text": "instead of a colon which means there has to be one thing on the right-hand side either one expression or one statement",
    "start": "1338140",
    "end": "1344560"
  },
  {
    "text": "depending on whether it's a you know a a statement switch or an expression switch and that means by design you can't fall",
    "start": "1344560",
    "end": "1350440"
  },
  {
    "text": "through because fall through only happens if you have more than one can only happen if you have more than one thing and you know because it's in a lot",
    "start": "1350440",
    "end": "1361960"
  },
  {
    "text": "of a lot of switches today or actually expressions in disguise we did some searches over some typical bodies of",
    "start": "1361960",
    "end": "1368890"
  },
  {
    "text": "code and like eighty percent of the switches were actually wanted to be switch expressions anyway so instead of",
    "start": "1368890",
    "end": "1375190"
  },
  {
    "text": "making people specify something in a very roundabout way we let them specify what they mean directly and these two",
    "start": "1375190",
    "end": "1381940"
  },
  {
    "text": "improvements in orthogonal you can use the streamlined case format in either expression or statement switches there's",
    "start": "1381940",
    "end": "1388900"
  },
  {
    "text": "sort of two independent improvements to switch that that work nicely together so",
    "start": "1388900",
    "end": "1394780"
  },
  {
    "text": "like I said this was originally previewed in 12 we made a small change Reap reviewed in 13 presumably it'll be",
    "start": "1394780",
    "end": "1400540"
  },
  {
    "text": "a permanent feature in 14 unless the feedback and 13 tells us that we made some horrible error that we didn't",
    "start": "1400540",
    "end": "1406750"
  },
  {
    "text": "anticipate which could happen it's the other preview feature that's in in Java",
    "start": "1406750",
    "end": "1413050"
  },
  {
    "start": "1409000",
    "end": "1409000"
  },
  {
    "text": "13 is better string literals so string literals are again have been common",
    "start": "1413050",
    "end": "1419200"
  },
  {
    "text": "source of complaints in Java and again this is a trivial feature it's there's not a lot of a lot of rocket science here but this is something that people",
    "start": "1419200",
    "end": "1425380"
  },
  {
    "text": "complain about a lot where if you have a multi-line snippet of code a snippet of JSON or HTML or sequel or XML or",
    "start": "1425380",
    "end": "1431500"
  },
  {
    "text": "whatever you have to you know mangle it up manually with backslash and then quotes and",
    "start": "1431500",
    "end": "1437100"
  },
  {
    "text": "concatenation and that's boiler plate and boiler plate is bad because it's a place for bugs to hide what you'd like",
    "start": "1437100",
    "end": "1443560"
  },
  {
    "text": "to be able to do is take a snippet of text and just paste it in you know to your java code without having to mangle",
    "start": "1443560",
    "end": "1450010"
  },
  {
    "text": "it up that's both easier to read but it's also less error-prone and this was",
    "start": "1450010",
    "end": "1455440"
  },
  {
    "text": "sort of illustrates another aspect of the the more rapid cadence which was we",
    "start": "1455440",
    "end": "1461180"
  },
  {
    "text": "originally were gonna do this feature in 12 we had a different feature designed and at the last minute we withdrew it",
    "start": "1461180",
    "end": "1467600"
  },
  {
    "text": "because we realized we could do better so we withdrew it stopped redesigned it and I think the version that we have is",
    "start": "1467600",
    "end": "1473720"
  },
  {
    "text": "significantly better than what we were considering in 12 and so to just give a quick example this is what people have",
    "start": "1473720",
    "end": "1479510"
  },
  {
    "text": "to write today it's awful and if you you",
    "start": "1479510",
    "end": "1485420"
  },
  {
    "text": "can write a multi-line string literal the delimiter is the three double quotes that a lot of languages that made that",
    "start": "1485420",
    "end": "1490970"
  },
  {
    "text": "delimiter choice the dots aren't actually dots they're there to illustrate what we call accidental",
    "start": "1490970",
    "end": "1496160"
  },
  {
    "text": "whitespace which is when you have a multi-line string you're likely to indent it with your code but you don't",
    "start": "1496160",
    "end": "1502730"
  },
  {
    "text": "actually want that indentation you want some of the indentation not all of the indentation and so the dots illustrate",
    "start": "1502730",
    "end": "1509810"
  },
  {
    "text": "the accidental indentation that the language is gonna strip for you and then the the the the whitespace that you know",
    "start": "1509810",
    "end": "1516650"
  },
  {
    "text": "hasn't been rendered as dots that is the essential indentation which is relative to the delimiters that gets kept and so",
    "start": "1516650",
    "end": "1524930"
  },
  {
    "text": "this way if your IDE re indents your code it doesn't actually change the output of your program by it you know",
    "start": "1524930",
    "end": "1530750"
  },
  {
    "text": "adding extraneous spaces and removing spaces so you know the the the intent is",
    "start": "1530750",
    "end": "1536810"
  },
  {
    "text": "you should be able to take a multi-line snippet of something cut and paste it out of you know out of another editor",
    "start": "1536810",
    "end": "1542410"
  },
  {
    "text": "and to put it between the FATA limiters and you're good to go okay so those are",
    "start": "1542410",
    "end": "1548660"
  },
  {
    "text": "features that have already shipped in some form either as permanent features or as previous let's let's look ahead a",
    "start": "1548660",
    "end": "1554570"
  },
  {
    "text": "little bit see what's on the board so I mentioned earlier a larger feature called pattern matching that we've been",
    "start": "1554570",
    "end": "1560540"
  },
  {
    "text": "working on for a while that we intend to deliver out in phases and the first phase probably will come",
    "start": "1560540",
    "end": "1566240"
  },
  {
    "text": "in 14 I hope no promises the basic basic concept underlying",
    "start": "1566240",
    "end": "1571880"
  },
  {
    "text": "pattern matching is that we writes a certain pattern of code all the time where we take some objects and we do",
    "start": "1571880",
    "end": "1579740"
  },
  {
    "text": "some tests against it and if the test succeeds then we conditionally extract some data from it and we use the data a",
    "start": "1579740",
    "end": "1587840"
  },
  {
    "text": "cast is actually a very in a simple example of that you say is this thing an integer if so cast",
    "start": "1587840",
    "end": "1594090"
  },
  {
    "text": "it to integer and then use the integer value and there's some repetition here",
    "start": "1594090",
    "end": "1599820"
  },
  {
    "text": "too right we're repeating the type name twice that's a place for bugs to hide how many people have ever accidentally",
    "start": "1599820",
    "end": "1605370"
  },
  {
    "text": "cut and pasted some some instance of an cast code and they changed the instance of type and they forgot to change the",
    "start": "1605370",
    "end": "1611610"
  },
  {
    "text": "cast type right that's an easy mistake to make and it's it's like super irritating because the cast actually",
    "start": "1611610",
    "end": "1618690"
  },
  {
    "text": "isn't adding any value here right what are you gonna do after you do instance of integer the only thing you could",
    "start": "1618690",
    "end": "1624300"
  },
  {
    "text": "possibly do is cast it to integer so not only you know does the language like make you do it explicitly but it gives",
    "start": "1624300",
    "end": "1631020"
  },
  {
    "text": "you a chance to get it wrong right so that's that's not that's not how we want it to be we'd we'd like to get rid of",
    "start": "1631020",
    "end": "1636390"
  },
  {
    "text": "that repetition because it's where bugs hide and some languages have chosen to",
    "start": "1636390",
    "end": "1641970"
  },
  {
    "text": "address this with flow typing but I think there's a a much much better answer hiding in there which is pattern",
    "start": "1641970",
    "end": "1647160"
  },
  {
    "text": "matching and a pattern basically fuses those three things that I mentioned a",
    "start": "1647160",
    "end": "1652200"
  },
  {
    "text": "test a conditional extraction and binding new variables into one operation",
    "start": "1652200",
    "end": "1657690"
  },
  {
    "text": "so we can rewrite this instance of using a pattern by some writing it like this",
    "start": "1657690",
    "end": "1666390"
  },
  {
    "text": "if object instance of integer and then we give it a name so the integer in",
    "start": "1666390",
    "end": "1671550"
  },
  {
    "text": "value is a type pattern and it it combines the the type test are you an",
    "start": "1671550",
    "end": "1677310"
  },
  {
    "text": "integer with a conditional extraction of if you're an integer cast a temperature and bind the integer result to that",
    "start": "1677310",
    "end": "1683730"
  },
  {
    "text": "fresh variable in value with the exact scoping that you'd expect that that in value is valid inside the block but not",
    "start": "1683730",
    "end": "1690690"
  },
  {
    "text": "valid outside the block it looks a little like a variable declaration that's not an accident and if you",
    "start": "1690690",
    "end": "1696840"
  },
  {
    "text": "rewrite existing code that uses instance of and cast with patterns basically all the casts go away so",
    "start": "1696840",
    "end": "1701970"
  },
  {
    "text": "that's that's kind of nice but this is really just scratching the surface of what pattern matching can do so I have",
    "start": "1701970",
    "end": "1707940"
  },
  {
    "text": "some more examples you know that you know that show that there's a little bit a little bit more depth here pattern",
    "start": "1707940",
    "end": "1716610"
  },
  {
    "text": "matching also works nicely when you're when you're doing short-circuiting because the scoping rules are",
    "start": "1716610",
    "end": "1722640"
  },
  {
    "text": "you know their flow sensitive so for example if you look at the the code for an equals method that your ID two",
    "start": "1722640",
    "end": "1729120"
  },
  {
    "text": "generates it's generally this horrible mess of if this return false else if",
    "start": "1729120",
    "end": "1735240"
  },
  {
    "text": "that return true else return this and that and the other thing but not the other thing on Tuesdays and this is ugly",
    "start": "1735240",
    "end": "1742170"
  },
  {
    "text": "code to read it's you know you have to actually look at it carefully to make sure you understand it and if you were",
    "start": "1742170",
    "end": "1749610"
  },
  {
    "text": "to express this using a pattern match you could express your equals in a single a single expression which is much",
    "start": "1749610",
    "end": "1755610"
  },
  {
    "text": "more straightforward if object instance of whatever class and then bind it to a",
    "start": "1755610",
    "end": "1761370"
  },
  {
    "text": "variable and this size equal that size and this name equal that name you look",
    "start": "1761370",
    "end": "1766740"
  },
  {
    "text": "at that it's much easier to read it's obvious what's going on and like I said because this is the scoping of pattern",
    "start": "1766740",
    "end": "1772710"
  },
  {
    "text": "binding variables it's flow sensitive the compiler will be able to type check",
    "start": "1772710",
    "end": "1777900"
  },
  {
    "text": "that yes it works if I can join these expressions with an but not with order because it might not be defined when you",
    "start": "1777900",
    "end": "1785040"
  },
  {
    "text": "get to you know gets the other side lower so it it gives us a better way to",
    "start": "1785040",
    "end": "1790350"
  },
  {
    "text": "express a lot of things that we do every day and we can use it in instance of",
    "start": "1790350",
    "end": "1796110"
  },
  {
    "text": "like I showed but we can also use it in switch that's probably going to come in a later phase so here's another example of a you know highly repetitive use of a",
    "start": "1796110",
    "end": "1805280"
  },
  {
    "text": "you know boiler boilerplate code where you're repeatedly testing something against a bunch of types is it an",
    "start": "1805280",
    "end": "1811049"
  },
  {
    "text": "integer is it a byte is it as long as it a double etc and in each case you you know you repeat the test you have to",
    "start": "1811049",
    "end": "1817500"
  },
  {
    "text": "repeat the instance I have a bunch of times you repeat the assignment a bunch of times there's a lot of repetition here and we can we can turn this into a",
    "start": "1817500",
    "end": "1827700"
  },
  {
    "text": "switch statement with patterns where the case labels instead of being constants are type patterns if the target is an",
    "start": "1827700",
    "end": "1836669"
  },
  {
    "text": "integer cast it to integer bind it to I use I in that case arm if the target is",
    "start": "1836669",
    "end": "1842220"
  },
  {
    "text": "a byte same thing etc so the code got a little bit smaller that's good we got rid of some boilerplate the business",
    "start": "1842220",
    "end": "1848429"
  },
  {
    "text": "logic starting to get more obvious so that's all all good and then we can combine it with the expression switch",
    "start": "1848429",
    "end": "1854010"
  },
  {
    "text": "feature that we talked about and you end up with something like this which is obviously a lot more concise",
    "start": "1854010",
    "end": "1859940"
  },
  {
    "text": "but it's also a lot more clear what's going on and probably like this is kind of the code you had in your head when",
    "start": "1859940",
    "end": "1865580"
  },
  {
    "text": "you sat down to write it in the first place but you couldn't but you couldn't write it so you ended up writing this big nasty if then else if instance of",
    "start": "1865580",
    "end": "1872810"
  },
  {
    "text": "etc chain with all the cut and paste errors that you could you could manage so like I said the expression switch",
    "start": "1872810",
    "end": "1880910"
  },
  {
    "text": "feature started out as a sub part of the pattern matching feature it said meant it out into its own feature the pattern",
    "start": "1880910",
    "end": "1887960"
  },
  {
    "text": "matching will come later so the pattern matching rabbit-hole goes deeper than this so a lot of classes are just sort",
    "start": "1887960",
    "end": "1897020"
  },
  {
    "start": "1890000",
    "end": "1890000"
  },
  {
    "text": "of dumb aggregates for data and when we write one of these classes there's again",
    "start": "1897020",
    "end": "1902150"
  },
  {
    "text": "a lot of repetition where you know you've got a bunch of fields but then you have to have a constructor and an",
    "start": "1902150",
    "end": "1908120"
  },
  {
    "text": "equals and a hash code and a two string and getters and setters and all of that and you know this is we you know we've",
    "start": "1908120",
    "end": "1914660"
  },
  {
    "text": "all experienced this frustration the idea will generate the code for us but it doesn't help us read the code it only",
    "start": "1914660",
    "end": "1920660"
  },
  {
    "text": "helps us write the code and reading code is actually a lot more important than writing code and the reason you know I",
    "start": "1920660",
    "end": "1928220"
  },
  {
    "text": "don't like code like this again is all this repetition is an opportunity to make mistakes if all this class is is a",
    "start": "1928220",
    "end": "1935240"
  },
  {
    "text": "dumb holder for a couple of fields then it should be clear just by looking at the code that that's all that's going on",
    "start": "1935240",
    "end": "1941360"
  },
  {
    "text": "I shouldn't have to read every line of boilerplate code to say oh yeah there's no code I had to read here right that",
    "start": "1941360",
    "end": "1946850"
  },
  {
    "text": "that's a that's a frustrating experience to read all this code and say good I didn't have to read any of that you know",
    "start": "1946850",
    "end": "1952010"
  },
  {
    "text": "CLE because you don't get that time back right and so you know people have asked",
    "start": "1952010",
    "end": "1958910"
  },
  {
    "text": "again repeatedly for I want to be able to write a dumb data holder that morally as a class like this but I don't want to",
    "start": "1958910",
    "end": "1965120"
  },
  {
    "text": "have to write all of this and again you know this is a not a particularly deep",
    "start": "1965120",
    "end": "1973190"
  },
  {
    "text": "feature but I think will make a lot of people happy to be able to say all right just like enums were a kind of",
    "start": "1973190",
    "end": "1979190"
  },
  {
    "text": "specialized class where i gave up some flexibility and in turn I got some you know some extra features records are a",
    "start": "1979190",
    "end": "1986120"
  },
  {
    "text": "similar sort of thing where I say here's a record it's called point it has feel called dicks X&Y and if I don't you know",
    "start": "1986120",
    "end": "1993130"
  },
  {
    "text": "if I don't implement the standard members myself I'll get sensible defaults for constructor and accessors and equals",
    "start": "1993130",
    "end": "2001020"
  },
  {
    "text": "hash code to string etc so that's that's a nice feature it's a pleasant reduction",
    "start": "2001020",
    "end": "2006720"
  },
  {
    "text": "in boilerplate but it's not a feature that's about boilerplate it's about raising the level of semantics semantics",
    "start": "2006720",
    "end": "2013200"
  },
  {
    "text": "in your program when you see a record it's saying I am just a carrier for my data I am NOT anything more than that",
    "start": "2013200",
    "end": "2019830"
  },
  {
    "text": "and because the programmer has committed to this semantic restriction it allows",
    "start": "2019830",
    "end": "2025080"
  },
  {
    "text": "us to infer all of the methods you know and other API members that are related",
    "start": "2025080",
    "end": "2030870"
  },
  {
    "text": "to the state and like I said this is a trade-off we've seen before in the language with enums we gave up control",
    "start": "2030870",
    "end": "2036120"
  },
  {
    "text": "over instance creation and in return we got a lot of functionality for free with records we give up control over over",
    "start": "2036120",
    "end": "2045480"
  },
  {
    "text": "being able to decouple the API from the representation we say the API is the representation it's got you know the",
    "start": "2045480",
    "end": "2051599"
  },
  {
    "text": "representation is int x and y and that's the API that's my constructor that's my access ters that's my equals in return I",
    "start": "2051599",
    "end": "2057960"
  },
  {
    "text": "get all of those things for free we're gonna come back to pattern matching in a minute this is in some sense a",
    "start": "2057960",
    "end": "2063599"
  },
  {
    "start": "2063000",
    "end": "2063000"
  },
  {
    "text": "digression but you'll see the connection in a minute so if you programmed in functional languages you'll you'll look",
    "start": "2063599",
    "end": "2070500"
  },
  {
    "text": "at records and you'll say well that looks like kind of a nominal form of a tuple or what ml would call product type",
    "start": "2070500",
    "end": "2076290"
  },
  {
    "text": "so records are one half of what are called algebraic data types they're the products half of algebraic data types",
    "start": "2076290",
    "end": "2082050"
  },
  {
    "text": "the other half which is some types is also a very useful thing a sum type is",
    "start": "2082050",
    "end": "2087210"
  },
  {
    "text": "just a discriminated Union it's a way of saying a shape is a circle or a rectangle and nothing else and again",
    "start": "2087210",
    "end": "2094800"
  },
  {
    "text": "we've seen this before in Java enums are a form of some type of some type you know a day is either Monday Tuesday",
    "start": "2094800",
    "end": "2101400"
  },
  {
    "text": "Wednesday it's not you know anything you know other than these seven days and as",
    "start": "2101400",
    "end": "2106950"
  },
  {
    "text": "we saw earlier in the in the switch example when you program with some types",
    "start": "2106950",
    "end": "2112050"
  },
  {
    "text": "it gives the compiler the ability to reason about exhaust of this if you say a shape is either a circle or a",
    "start": "2112050",
    "end": "2118890"
  },
  {
    "text": "rectangle and then you do something that covers circles you do something that covers wreck the compiler should be able to say okay",
    "start": "2118890",
    "end": "2125250"
  },
  {
    "text": "you've covered everything without you having to say and if it's something else then I don't know what to do because that should be impossible compiler can",
    "start": "2125250",
    "end": "2131640"
  },
  {
    "text": "figure that out for you so seal types",
    "start": "2131640",
    "end": "2136740"
  },
  {
    "text": "and records sums and products go very nicely together so you know continuing on the shape example which might not be",
    "start": "2136740",
    "end": "2142920"
  },
  {
    "text": "the best example but it's it's it's good for fitting on slides if I say a point is x and y and I say I have a sealed",
    "start": "2142920",
    "end": "2150360"
  },
  {
    "text": "interface shape and it's subtypes our circle and rectangle and a circle is defined by a point and a radius",
    "start": "2150360",
    "end": "2156120"
  },
  {
    "text": "sorry center and a radius and a rectangle is defined by two corner points I can you know the compiler can",
    "start": "2156120",
    "end": "2163920"
  },
  {
    "text": "like I said reason about exhaustive miss and this connects very nicely with pattern matching again so as we get",
    "start": "2163920",
    "end": "2171510"
  },
  {
    "start": "2169000",
    "end": "2169000"
  },
  {
    "text": "deeper into the the phase delivery of pattern matching we'll have in addition to type patterns which we've seen before",
    "start": "2171510",
    "end": "2177420"
  },
  {
    "text": "deconstruction patterns which we'll be able to take apart a shape into its its",
    "start": "2177420",
    "end": "2182730"
  },
  {
    "text": "appropriate parts so a deconstruction pattern for circle looks like this here it kind of looks like the constructor a",
    "start": "2182730",
    "end": "2189510"
  },
  {
    "text": "little bit again that's not an accident where you say a shape instance of circle var center of our radius you're saying",
    "start": "2189510",
    "end": "2197730"
  },
  {
    "text": "if the things a circle cast it's a circle extracted center property and its radius property I haven't told you how",
    "start": "2197730",
    "end": "2203940"
  },
  {
    "text": "yet and put them in local variables and I can just use them and so where does",
    "start": "2203940",
    "end": "2211350"
  },
  {
    "text": "this deconstruction pattern comes from come from well it comes from the declaration of your code just like the constructor you can think of the",
    "start": "2211350",
    "end": "2217860"
  },
  {
    "text": "deconstruction pattern as an anti constructor constructor takes some state makes an object D constructor takes an",
    "start": "2217860",
    "end": "2224670"
  },
  {
    "text": "object explodes it into the state and records in addition to getting constructors for free we'll get deconstruction patterns for",
    "start": "2224670",
    "end": "2231000"
  },
  {
    "text": "free so for the declaration of circle that I had on the previous slide I'm automatically able to do this to say",
    "start": "2231000",
    "end": "2237390"
  },
  {
    "text": "take a circle apart into its center and radius and I'll get full type checking I",
    "start": "2237390",
    "end": "2242820"
  },
  {
    "text": "didn't have to save over here it's just a matter of convenience I could have said points an int but you can use a",
    "start": "2242820",
    "end": "2249060"
  },
  {
    "text": "type inference in patterns just as easily there's no magic here we're not guessing based on field names",
    "start": "2249060",
    "end": "2255280"
  },
  {
    "text": "you know there well you know if you want to do a deconstruction pattern on a class that class has to have a",
    "start": "2255280",
    "end": "2261550"
  },
  {
    "text": "deconstruction pattern classes like records will get them for free other classes will have to write them the same",
    "start": "2261550",
    "end": "2266589"
  },
  {
    "text": "way we write constructors today so here's sort of how it all comes together which is if I have a switch over a shape",
    "start": "2266589",
    "end": "2276339"
  },
  {
    "text": "I can say well is it a circle and extract the circle content and say the",
    "start": "2276339",
    "end": "2281890"
  },
  {
    "text": "area of a circle is PI R squared okay is it a rectangle I extract the bounding boxes i compute Delta Y Delta X and",
    "start": "2281890",
    "end": "2290250"
  },
  {
    "text": "there are no other cases so I don't have to say default and I'm done and the",
    "start": "2290250",
    "end": "2296349"
  },
  {
    "text": "compiler will type check exhaustive nests and if I haven't covered all the cases it will fail so there are a lot of",
    "start": "2296349",
    "end": "2303339"
  },
  {
    "text": "things that make sense to to model in terms of these sums of products or",
    "start": "2303339",
    "end": "2308530"
  },
  {
    "text": "sealed types of records and it allows us to sort of pass them around and and and",
    "start": "2308530",
    "end": "2314380"
  },
  {
    "text": "and you know take them apart very easily without having to do a lot of instance",
    "start": "2314380",
    "end": "2319480"
  },
  {
    "text": "of and caste and and and and all of that so once you have this feature in the",
    "start": "2319480",
    "end": "2325240"
  },
  {
    "text": "language you'll you'll wonder how you live without it so okay I'm gonna switch",
    "start": "2325240",
    "end": "2331060"
  },
  {
    "text": "gears a little bit very quickly because I know we're probably coming to the end of the the timeslot so this was project amber this was",
    "start": "2331060",
    "end": "2338530"
  },
  {
    "text": "mostly like I said language productivity features I want to talk briefly about project Valhalla which is a much deeper feature has to do with how the VM lays",
    "start": "2338530",
    "end": "2346540"
  },
  {
    "text": "out data in memory this is a project we've been working on for a long time you've probably heard me talk about this",
    "start": "2346540",
    "end": "2351609"
  },
  {
    "text": "before some of you are wondering gee Brian you were talking about this five years ago you telling me you're not done and no we're not done we've been working",
    "start": "2351609",
    "end": "2358119"
  },
  {
    "text": "on it hard for a long time and we've made a lot of progress and we're not done but this is an example of staying",
    "start": "2358119",
    "end": "2364210"
  },
  {
    "text": "relevant to the hardware hardware has changed tremendously in the last thirty years thirty years ago the cost of the",
    "start": "2364210",
    "end": "2370119"
  },
  {
    "text": "memory fetch versus the cost of an arithmetic op we're about the same they reach a handful of cycles now I can",
    "start": "2370119",
    "end": "2376180"
  },
  {
    "text": "issue for arithmetic ops on a cycle but a cache miss might cost me 300 cycles to go out to main memory so that's a factor",
    "start": "2376180",
    "end": "2382390"
  },
  {
    "text": "of a thousand that the relative cost model has drifted in 30 years so it stands to reason that whatever we did",
    "start": "2382390",
    "end": "2388170"
  },
  {
    "text": "memory layout 30 years ago probably isn't optimal for today's hardware and",
    "start": "2388170",
    "end": "2393210"
  },
  {
    "text": "so if the hardware that we're running on has changed the behavior of the runtime",
    "start": "2393210",
    "end": "2399059"
  },
  {
    "text": "should change in order to take advantage of today's hardware and unfortunately the layout and memory that we have today",
    "start": "2399059",
    "end": "2405710"
  },
  {
    "text": "induces a lot of cache misses because because of object identity the natural",
    "start": "2405710",
    "end": "2411599"
  },
  {
    "text": "way to implement objects with identity is through pointers pointers meaning direction and in Direction means cache",
    "start": "2411599",
    "end": "2417660"
  },
  {
    "text": "misses not all objects need identity a lot of objects are just dumb data they",
    "start": "2417660",
    "end": "2423030"
  },
  {
    "text": "don't need identity they don't necessarily need to pay for it so as an example you know how do we pay for it",
    "start": "2423030",
    "end": "2428670"
  },
  {
    "start": "2427000",
    "end": "2427000"
  },
  {
    "text": "well we pay for it in the form of layout if I have my point class and I have an",
    "start": "2428670",
    "end": "2433680"
  },
  {
    "text": "array of them this is what the layout looks like in memory the array is an object with a bunch of pointers in it",
    "start": "2433680",
    "end": "2440250"
  },
  {
    "text": "and each element is a pointer that points to a a point object you know which again has a header and some data",
    "start": "2440250",
    "end": "2446730"
  },
  {
    "text": "payload so first of all on a memory density basis I'm not doing very well",
    "start": "2446730",
    "end": "2454200"
  },
  {
    "text": "because I have these headers for every point and about 60% of the memory in",
    "start": "2454200",
    "end": "2459210"
  },
  {
    "text": "this diagram is just overhead for object headers and pointers and isn't actual data so that's limiting how much data I",
    "start": "2459210",
    "end": "2465180"
  },
  {
    "text": "can put in the heap but it also means if I want to walk down this array of points and do a calculation across it I'm",
    "start": "2465180",
    "end": "2471299"
  },
  {
    "text": "risking cache miss every time I traverse one of those those arrows and I didn't",
    "start": "2471299",
    "end": "2477390"
  },
  {
    "text": "ask for this layout directly but it's sort of the layout I got because of the assumption that these points are objects",
    "start": "2477390",
    "end": "2483119"
  },
  {
    "text": "and we care about object identity and the VM can't really figure out whether you don't want object identity and",
    "start": "2483119",
    "end": "2488309"
  },
  {
    "text": "therefore it's very hard to optimize away now when confronted with this sometimes developers will do stuff like",
    "start": "2488309",
    "end": "2493920"
  },
  {
    "text": "this they'll say forget about this object abstraction I'm just gonna shred things into arrays of primitives which",
    "start": "2493920",
    "end": "2499920"
  },
  {
    "text": "is like a totally fine trick except now your code is unmaintainable unreadable and error-prone and sometimes we have to",
    "start": "2499920",
    "end": "2507240"
  },
  {
    "text": "do that but some people sometimes people do it just you know out of some bizarre obsessive compulsive disorder and you",
    "start": "2507240",
    "end": "2514799"
  },
  {
    "text": "know I kind of look at this as well we've given people a bad choice we've said abstraction or performance pick one",
    "start": "2514799",
    "end": "2519839"
  },
  {
    "text": "and this is a Chan for people to pick wrong and given this particular choice between anything in",
    "start": "2519839",
    "end": "2525070"
  },
  {
    "text": "performance developers almost always pick wrong and they go for performance even when they don't need it so you know",
    "start": "2525070",
    "end": "2532750"
  },
  {
    "text": "the cure to this is for the programmer to say I actually don't care about that identity you're free to lay things out",
    "start": "2532750",
    "end": "2538030"
  },
  {
    "text": "you know the way you want because the data layout we want in in most cases is something like this I want a big array",
    "start": "2538030",
    "end": "2544540"
  },
  {
    "text": "and alternate XY XY XY right so the question is what code do we write to get this layout and we don't want it to be",
    "start": "2544540",
    "end": "2551470"
  },
  {
    "text": "vastly different from the code we're writing today and so we model this as a",
    "start": "2551470",
    "end": "2556570"
  },
  {
    "text": "modifier on a class we're calling this inline we used to call it value classes that that people found that confusing",
    "start": "2556570",
    "end": "2562060"
  },
  {
    "text": "because the word value meant too many other things and you know this means that you can take the contents of this",
    "start": "2562060",
    "end": "2567940"
  },
  {
    "text": "class and inline it into other classes inline it into arrays it's just the data",
    "start": "2567940",
    "end": "2573609"
  },
  {
    "text": "there's no identity here and looks like a small change it's not a small change",
    "start": "2573609",
    "end": "2579310"
  },
  {
    "text": "goes all the way down to the middle so it's been you know taking a little bit of time but this is a way for the",
    "start": "2579310",
    "end": "2584650"
  },
  {
    "text": "programmer to say this is what I mean and for the VM to respond with okay I can give you a flat and dense layout",
    "start": "2584650",
    "end": "2590050"
  },
  {
    "text": "that doesn't have any of that object header overhead and pointer indirection and you know and you can do calculations",
    "start": "2590050",
    "end": "2596410"
  },
  {
    "text": "over this much more quickly so this is again one of those trade-offs that I was",
    "start": "2596410",
    "end": "2601750"
  },
  {
    "start": "2597000",
    "end": "2597000"
  },
  {
    "text": "talking about well you give something up you give up identity what does that mean it means you're giving up mutability you're giving up representational",
    "start": "2601750",
    "end": "2608020"
  },
  {
    "text": "polymorphism but in return you're getting you know the the VM is giving you the ability to have things laid out",
    "start": "2608020",
    "end": "2614950"
  },
  {
    "text": "in memory in a much more Hardware friendly way you get flattened dense layout you can fit a lot more data in",
    "start": "2614950",
    "end": "2620890"
  },
  {
    "text": "memory and you can access it more quickly so you can think of this as faster classes or programmable",
    "start": "2620890",
    "end": "2627160"
  },
  {
    "text": "primitives it kind of is like you know the same thing for both both directions and you know but they're they're really",
    "start": "2627160",
    "end": "2635440"
  },
  {
    "text": "more like classes in in terms of the programming model they can have methods they can have fields they can have",
    "start": "2635440",
    "end": "2640480"
  },
  {
    "text": "interfaces they can have type variables they can have private fields they can use encapsulation they can use generics",
    "start": "2640480",
    "end": "2646050"
  },
  {
    "text": "and you know so like I said you know you can think of this as faster objects or",
    "start": "2646050",
    "end": "2651220"
  },
  {
    "text": "as user definable primitives both both intuitions work but the the",
    "start": "2651220",
    "end": "2656380"
  },
  {
    "text": "sort of motto is codes like a class works like an INT okay so who cares",
    "start": "2656380",
    "end": "2661839"
  },
  {
    "text": "about this my claim is everybody cares if you're writing applications with large datasets you care about locality",
    "start": "2661839",
    "end": "2669010"
  },
  {
    "text": "and footprint if you're writing libraries this is a mechanism by which you can write more efficient libraries",
    "start": "2669010",
    "end": "2675640"
  },
  {
    "text": "better data structure implementations or numerix or smart pointers or wrappers like optional that give you",
    "start": "2675640",
    "end": "2681369"
  },
  {
    "text": "functionality but that don't have extra memory footprints or interactions in them if you're a compiler writer if",
    "start": "2681369",
    "end": "2687670"
  },
  {
    "text": "you're like Charlie Nutter write it writing the JRuby compiler you know you aren't forced to model rubies rubies",
    "start": "2687670",
    "end": "2694290"
  },
  {
    "text": "numerix using objects you can and and take a you know take a boxing hit an",
    "start": "2694290",
    "end": "2702250"
  },
  {
    "text": "indirection hit every time you do a numerical calculation so my claim is this benefits everybody whether you're",
    "start": "2702250",
    "end": "2709180"
  },
  {
    "text": "using the feature directly because you're working with large datasets or you're working in a language like JRuby",
    "start": "2709180",
    "end": "2714880"
  },
  {
    "text": "in which case you just get faster faster performance or you're working in Java and hashmap just got 40% faster so all",
    "start": "2714880",
    "end": "2723520"
  },
  {
    "text": "of your programs just get faster as a result this is something that benefits the whole ecosystem even if you're using",
    "start": "2723520",
    "end": "2728710"
  },
  {
    "text": "it directly or indirectly so oK we've been working on this for quite a while",
    "start": "2728710",
    "end": "2734050"
  },
  {
    "start": "2730000",
    "end": "2730000"
  },
  {
    "text": "we've gone through multiple rounds of prototypes to investigate various aspects of the problem where we're sort",
    "start": "2734050",
    "end": "2741460"
  },
  {
    "text": "of honing in on what I think is the first first prototype that is should be",
    "start": "2741460",
    "end": "2746530"
  },
  {
    "text": "usable for people to actually like write data structures with we expect that to be out in August or so and so if you're",
    "start": "2746530",
    "end": "2754420"
  },
  {
    "text": "interested in trying this out it's getting to be a good time and I'll just give you a quick example of the kind of",
    "start": "2754420",
    "end": "2760300"
  },
  {
    "text": "improvements that are possible here so here's a typical text book complex matrix multiplication so I wrote you",
    "start": "2760300",
    "end": "2767410"
  },
  {
    "text": "know complex class by literally copying out of my math textbook and you know",
    "start": "2767410",
    "end": "2773230"
  },
  {
    "text": "people are like look at this code and it's not very complicated but they shudder because they see new complex all",
    "start": "2773230",
    "end": "2778599"
  },
  {
    "text": "over the place and they say oh that's gonna allocate a lot of stuff and does write and then we do the multiple write",
    "start": "2778599",
    "end": "2783609"
  },
  {
    "text": "the multiplication out again copying for the textbook and it's straightforward for the fact that we're allocating a ton",
    "start": "2783609",
    "end": "2790120"
  },
  {
    "text": "of objects right and if we run this our performance is going to be limited by all of this allocation cost if I change",
    "start": "2790120",
    "end": "2797950"
  },
  {
    "text": "complex to be an inline type all that cost goes away so micro benchmark take",
    "start": "2797950",
    "end": "2805510"
  },
  {
    "text": "with a grain of salt this was run on a pretty typical modern desktop class system when I ran the the inline class",
    "start": "2805510",
    "end": "2815020"
  },
  {
    "text": "version from a wall clock time perspective I saw a speed-up of 12x",
    "start": "2815020",
    "end": "2820380"
  },
  {
    "text": "that's pretty good 3x reduction and instructions executed",
    "start": "2820380",
    "end": "2825450"
  },
  {
    "text": "thousand X reduction in allocation that's all pretty cool right and why did",
    "start": "2825450",
    "end": "2831580"
  },
  {
    "text": "that happen well the interesting number is this last one which is instruction per cycle remember earlier I said modern",
    "start": "2831580",
    "end": "2836800"
  },
  {
    "text": "CPUs can issue multiple arithmetic ops per cycle but in reality they rarely do",
    "start": "2836800",
    "end": "2842710"
  },
  {
    "text": "because they're spending all the time waiting for the memory subsystem to cough up data so in the boxed version",
    "start": "2842710",
    "end": "2848500"
  },
  {
    "text": "we were running about we were retiring about one instruction per cycle in the inline version we were retiring almost",
    "start": "2848500",
    "end": "2855190"
  },
  {
    "text": "three times that many instructions per cycle and that's why even though we executed 3x fewer instructions we spend",
    "start": "2855190",
    "end": "2861960"
  },
  {
    "text": "way more than 3x less that doesn't make any sense wall clock time you know running the",
    "start": "2861960",
    "end": "2868630"
  },
  {
    "text": "universe benchmark so very very promising still a work in progress but",
    "start": "2868630",
    "end": "2875530"
  },
  {
    "text": "you know that it's starting to bear fruit so ok summing up our pipeline is",
    "start": "2875530",
    "end": "2881770"
  },
  {
    "start": "2878000",
    "end": "2878000"
  },
  {
    "text": "awesome amber is already delivering features there's lots more good features coming the bigger projects like Valhalla",
    "start": "2881770",
    "end": "2888610"
  },
  {
    "text": "and Panama and loom are also starting to bear fruit it's a really exciting time and as you notice from the title of my",
    "start": "2888610",
    "end": "2895240"
  },
  {
    "text": "talk this was the mid 2019 Edition I've gone to the Apple you know the Apple",
    "start": "2895240",
    "end": "2900640"
  },
  {
    "text": "version numbering you know for my talk because things change so quickly so come",
    "start": "2900640",
    "end": "2905650"
  },
  {
    "text": "back next to your gauge how much progress we've made in the last year so thank you very much and we can take questions if we have time",
    "start": "2905650",
    "end": "2912330"
  },
  {
    "text": "you",
    "start": "2912330",
    "end": "2914390"
  }
]