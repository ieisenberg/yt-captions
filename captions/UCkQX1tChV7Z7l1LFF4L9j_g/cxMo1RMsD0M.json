[
  {
    "text": "this is a talk that I gave that at any Scala and I finished the important part of the talk in about 15 minutes so if",
    "start": "4040",
    "end": "10010"
  },
  {
    "text": "you guys don't have any interactions that all this will be really boring and we'll just finish in 15 minutes but if you guys have a lot of questions which I",
    "start": "10010",
    "end": "15650"
  },
  {
    "text": "hope you do then we'll we'll run on sort of longer than that so sort of audience",
    "start": "15650",
    "end": "22070"
  },
  {
    "text": "audience driven development this is all going to be live coded I'm gonna sort of",
    "start": "22070",
    "end": "27439"
  },
  {
    "text": "do things in an editor over here think hello world line hi all right this is",
    "start": "27439",
    "end": "37340"
  },
  {
    "text": "your last chance to tell me that the font is unreadable or the color is unreadable because otherwise we're just basically and go with this my name is",
    "start": "37340",
    "end": "43550"
  },
  {
    "text": "Daniel speak for those of you who don't know I work at a company called slam data yeah that's basically me I've",
    "start": "43550",
    "end": "49850"
  },
  {
    "text": "talked about a lot of stuff and today we're really talking about the free monad so how many people here have heard",
    "start": "49850",
    "end": "56360"
  },
  {
    "text": "of the free Mona cool like basically most of everybody now honest question",
    "start": "56360",
    "end": "61910"
  },
  {
    "text": "and no aspersions how many people here like really really understand it awesome this talk is for you like I",
    "start": "61910",
    "end": "69200"
  },
  {
    "text": "really I I really really want this to be a like come in with not understanding come out with like yeah I get it like a",
    "start": "69200",
    "end": "76070"
  },
  {
    "text": "hundred percent we're good right you may not you may not like it at the end of it but like you'll you'll understand it and",
    "start": "76070",
    "end": "82520"
  },
  {
    "text": "if you don't understand it maiya culpa and the way we're gonna do this is the way that I learned to",
    "start": "82520",
    "end": "88340"
  },
  {
    "text": "understand it because like honestly I I even used the free monad for years before I really really got it and the",
    "start": "88340",
    "end": "94040"
  },
  {
    "text": "way I got it was just implementing it myself like just from scratch from an empty editor buffer so what we're gonna",
    "start": "94040",
    "end": "99350"
  },
  {
    "text": "do is command a delete we are gonna implement the free monad starting right now cool all right so now what we're",
    "start": "99350",
    "end": "107180"
  },
  {
    "text": "gonna do so what the free monad is is a monad for any type constructor so for",
    "start": "107180",
    "end": "114860"
  },
  {
    "text": "any type constructor F takes a single type parameter we're gonna implement pure and flatmap so now remember pure is",
    "start": "114860",
    "end": "122090"
  },
  {
    "text": "is that thing that takes an A and gives you you know an F of a where F is a monad and then flatmap is that sort of",
    "start": "122090",
    "end": "128090"
  },
  {
    "text": "complicated thing that takes an F of a you know function a to f of B and gives you an F of B right so you've got you",
    "start": "128090",
    "end": "133370"
  },
  {
    "text": "lift something into the monad and then sequentially by the way so our goal is to provide this",
    "start": "133370",
    "end": "140700"
  },
  {
    "text": "functionality for any type constructor and buy any type constructor I mean it's not just like option or list or like you",
    "start": "140700",
    "end": "147540"
  },
  {
    "text": "know easy things like that I mean like my random completely unconstrained thing that doesn't even have a x' inside of it",
    "start": "147540",
    "end": "154290"
  },
  {
    "text": "of a right so like just completely random stuff so can can we actually do",
    "start": "154290",
    "end": "159900"
  },
  {
    "text": "this well let's see what we can do so we're gonna start off with you know sealed trade sealed treat sealed tape",
    "start": "159900",
    "end": "167969"
  },
  {
    "text": "free of F I'm gonna give us another line there so sealed trade free of F of a",
    "start": "167969",
    "end": "174480"
  },
  {
    "text": "okay so it's gonna be the free monad for any type constructor F and it's a monad",
    "start": "174480",
    "end": "180120"
  },
  {
    "text": "so it has an A inside of it right so we're gonna have to do that and we're gonna have a flat map okay so that this",
    "start": "180120",
    "end": "187709"
  },
  {
    "text": "is just part of what it means to be a monad right we take an A to a free of F of B and we give a free of F of B right",
    "start": "187709",
    "end": "195299"
  },
  {
    "text": "everybody following me so far this is this is exactly what we have to do and we'll just like triple question mark",
    "start": "195299",
    "end": "201239"
  },
  {
    "text": "that out for now and I'll create a companion object here and on this companion object well we already talked",
    "start": "201239",
    "end": "206819"
  },
  {
    "text": "about how we need pure right so pure takes an A and it returns a free of f of",
    "start": "206819",
    "end": "213269"
  },
  {
    "text": "a okay so this is the this is the return function from Haskell scholars ed calls",
    "start": "213269",
    "end": "218579"
  },
  {
    "text": "this point like I I don't know like whatever you want to call it it's it's pure right okay so we have to define that function and I'm gonna add a third",
    "start": "218579",
    "end": "226319"
  },
  {
    "text": "function to this mix here just because I know the future and I know what's actually useful here which is okay we're",
    "start": "226319",
    "end": "231780"
  },
  {
    "text": "gonna we're gonna call it lifts M okay and it's Oh actually Simba D correct me",
    "start": "231780",
    "end": "237540"
  },
  {
    "text": "on type signatures here all right so we have to have enough obey that right by the way because I'm a coward we're not",
    "start": "237540",
    "end": "242669"
  },
  {
    "text": "actually compiling this for real we're just using the compiler of my mind because that way my talk can't like flame out and like randomly fail so if",
    "start": "242669",
    "end": "250019"
  },
  {
    "text": "you see me like makes them sort of like Scala salep system like tell me because",
    "start": "250019",
    "end": "255780"
  },
  {
    "text": "otherwise I just won't notice all right so lift down is gonna take an F of a and and put that into a free of F",
    "start": "255780",
    "end": "263849"
  },
  {
    "text": "of a okay this seems like a reasonable function to have right so maybe maybe we don't already we already",
    "start": "263849",
    "end": "270490"
  },
  {
    "text": "something that's in you know f of a we want to put it into the Fremont we want to get a monad for our arbitrary type",
    "start": "270490",
    "end": "275949"
  },
  {
    "text": "constructor right so these are the functions that we are trying to implement so let's see if we can do this",
    "start": "275949",
    "end": "281979"
  },
  {
    "text": "right let's start with pure okay pure seems like it's probably the easiest thing to do right so what can we",
    "start": "281979",
    "end": "289599"
  },
  {
    "text": "do now we will notice that free currently doesn't actually have any structure right we haven't implemented",
    "start": "289599",
    "end": "294699"
  },
  {
    "text": "any constructors for the free ADT so so presumably we're gonna have like you",
    "start": "294699",
    "end": "300490"
  },
  {
    "text": "know down here here be case classes right so stuff stuff is gonna be down",
    "start": "300490",
    "end": "306070"
  },
  {
    "text": "here okay so pure well we don't have any structure we don't have anything that we can do",
    "start": "306070",
    "end": "312370"
  },
  {
    "text": "with our a that turns it into a free so probably the easiest thing we could do maybe is just you know add a case class",
    "start": "312370",
    "end": "320039"
  },
  {
    "text": "pure of a contains an a and it is a free",
    "start": "320039",
    "end": "326110"
  },
  {
    "text": "of that fact okay so if we've got that then this is really easy right pure of a",
    "start": "326110",
    "end": "331990"
  },
  {
    "text": "done cool so okay we've implemented one of our three functions 30% done what",
    "start": "331990",
    "end": "339699"
  },
  {
    "text": "else are we gonna do well let's what about lift down okay so lift em well here here's the first question we should ask right so we are",
    "start": "339699",
    "end": "345460"
  },
  {
    "text": "we've got some structure now right free free actually means something can we take an F of a and put it into a",
    "start": "345460",
    "end": "351610"
  },
  {
    "text": "free FA can we actually do that given the structure that we have and the answer to that is no right because if we",
    "start": "351610",
    "end": "357190"
  },
  {
    "text": "tried to do something like you know pure of FA this would actually end up being like free of F of like f of a or",
    "start": "357190",
    "end": "364120"
  },
  {
    "text": "something like that right that's that's completely not what we want so so we need to do something about this so well",
    "start": "364120",
    "end": "369759"
  },
  {
    "text": "what can we do well we can't do it with the structure we have so let's let's just add another case class right lift",
    "start": "369759",
    "end": "376169"
  },
  {
    "text": "underscore a fa fa extends free fa okay",
    "start": "376169",
    "end": "382539"
  },
  {
    "text": "lift fa all right sweet okay we're two-thirds of the way done guys",
    "start": "382539",
    "end": "388650"
  },
  {
    "text": "cool does anybody object to what I've done so far it seems pretty",
    "start": "388650",
    "end": "393909"
  },
  {
    "text": "uncontroversial right flatmap okay so can we can we amble my flat map for this",
    "start": "393909",
    "end": "399520"
  },
  {
    "text": "thing well we could probably implement it if we only had pure right so like pure we get the a out of",
    "start": "399520",
    "end": "406960"
  },
  {
    "text": "that we probably find some way to like turn it back into like a free free of FFA but the thing is that we also have",
    "start": "406960",
    "end": "413230"
  },
  {
    "text": "this lift thing right and so we can't you know that this the the signature of flat map right requires us to provide it",
    "start": "413230",
    "end": "418750"
  },
  {
    "text": "with an A but if if the if the free that is represented by this is just like you",
    "start": "418750",
    "end": "424480"
  },
  {
    "text": "know is a lift then that lift contains an F of a well we don't know anything about f we don't even even we wouldn't even know if it contains an A so how are",
    "start": "424480",
    "end": "431770"
  },
  {
    "text": "we going to get that a to give it to the function well answer is we can't and and there's you know sort of very elegant",
    "start": "431770",
    "end": "437770"
  },
  {
    "text": "proof that we can't so I'm gonna learn how to type and import things so so what",
    "start": "437770",
    "end": "445630"
  },
  {
    "text": "can we do here well we can basically do what we've been doing so far and we can",
    "start": "445630",
    "end": "451120"
  },
  {
    "text": "cheat case class flat map uh I'm going",
    "start": "451120",
    "end": "457270"
  },
  {
    "text": "to call it e and you know self is going to be free F of E and then we're gonna",
    "start": "457270",
    "end": "463270"
  },
  {
    "text": "have some function e to free F of a and that is a free F of a cool so now we go",
    "start": "463270",
    "end": "471040"
  },
  {
    "text": "up here flat map this and F right that works and we won't say because we're not",
    "start": "471040",
    "end": "478690"
  },
  {
    "text": "actually saving and that is the free monad applause oh yeah ok this is super",
    "start": "478690",
    "end": "486850"
  },
  {
    "text": "confusing right because we didn't actually do anything like nothing nothing is actually implemented here right we just like wrote a bunch of data",
    "start": "486850",
    "end": "493180"
  },
  {
    "text": "and then you know called a day but honestly like I'm not actually lying to you this is the free monad this is all",
    "start": "493180",
    "end": "498250"
  },
  {
    "text": "there is to it so obviously this is not useful sort of in its current form right",
    "start": "498250",
    "end": "504790"
  },
  {
    "text": "so maybe maybe it might be nice to write a function that actually maybe does something with this data something",
    "start": "504790",
    "end": "509890"
  },
  {
    "text": "that's that's something other than been a type constructor oh by the way just because I'm paranoid about the JVM with",
    "start": "509890",
    "end": "516460"
  },
  {
    "text": "that final all right so so so what's another sort of function we could write here because we've already satisfied all",
    "start": "516460",
    "end": "523270"
  },
  {
    "text": "the constraints to be a monad and by the way this is a lawful monad hilariously right like this this is actually like",
    "start": "523270",
    "end": "528640"
  },
  {
    "text": "completely valid no one will complain about this so anyway a function that's that's traditionally put on the free",
    "start": "528640",
    "end": "535720"
  },
  {
    "text": "monad is something called full map okay now the full map function is a",
    "start": "535720",
    "end": "541000"
  },
  {
    "text": "little bit tricky and there's a reason for its name that we'll get back to in a second but the full map function says",
    "start": "541000",
    "end": "546370"
  },
  {
    "text": "okay given some type constructor G they're completely different than F and",
    "start": "546370",
    "end": "551500"
  },
  {
    "text": "that G that is a monad okay so we have a monad for G and a a function called a",
    "start": "551500",
    "end": "560079"
  },
  {
    "text": "natural transformation that maps from F to G and we'll loop back to what this actually means in a second",
    "start": "560079",
    "end": "566050"
  },
  {
    "text": "give us a G of a okay so so there's a lot to unpack in this time signature but",
    "start": "566050",
    "end": "571870"
  },
  {
    "text": "what this is saying is we've got this free monad structure thing that has some stuff inside of it maybe a bunch of flat",
    "start": "571870",
    "end": "577750"
  },
  {
    "text": "maps maybe some lifts and things like that so start what where is the a from",
    "start": "577750",
    "end": "585639"
  },
  {
    "text": "the a yeah we're we're inside of free right now yeah so the a is in scope okay",
    "start": "585639",
    "end": "591399"
  },
  {
    "text": "so we've got we've got this free that has like some structure and things and and you know it represents all these",
    "start": "591399",
    "end": "597939"
  },
  {
    "text": "operations and we've got this other completely unrelated type constructor G that happens to be a monad so we know",
    "start": "597939",
    "end": "604000"
  },
  {
    "text": "that G is a mod F is not a monad G is a monad and we want to sort of convert our",
    "start": "604000",
    "end": "610449"
  },
  {
    "text": "free structure and sort of interpret it into G and and you know given a way of",
    "start": "610449",
    "end": "616540"
  },
  {
    "text": "actually converting the individual thunks and what this allows us to do is allows us to sort of defer the notion of",
    "start": "616540",
    "end": "622870"
  },
  {
    "text": "interpretation we'll get back to that in a second but this is the function that actually does things right because you know we're not we're not just gonna like",
    "start": "622870",
    "end": "629529"
  },
  {
    "text": "run you know create a new case called full map and call it a day right and we're actually gonna we're actually gonna write this function so before I do",
    "start": "629529",
    "end": "636759"
  },
  {
    "text": "that though I want to be clear about what natural transformation is right so this this funny squiggly arrow thing",
    "start": "636759",
    "end": "643180"
  },
  {
    "text": "here this is Scala Zed syntax if I write this in terms of cats it looks like it looks like this right so that's that's",
    "start": "643180",
    "end": "648970"
  },
  {
    "text": "maybe a little bit more familiar so what function K is is it's it's a",
    "start": "648970",
    "end": "655480"
  },
  {
    "text": "function that takes to type construct or it's a trait that takes to type constructors and it has just as a this",
    "start": "655480",
    "end": "660910"
  },
  {
    "text": "this like a a can't type apply apply function that takes an F of a and",
    "start": "660910",
    "end": "667860"
  },
  {
    "text": "returns a G of a so a function k is just basically this notion of mapping between two type",
    "start": "667860",
    "end": "674049"
  },
  {
    "text": "constructors right so for any F of a or F of B or F of C or like f of anything",
    "start": "674049",
    "end": "679209"
  },
  {
    "text": "right F of anything we can get G of that same thing that's what function K says it's literally a function on type",
    "start": "679209",
    "end": "686049"
  },
  {
    "text": "constructors as opposed to a function right on types okay so this is a really useful thing so we're saying is given this natural",
    "start": "686049",
    "end": "692079"
  },
  {
    "text": "transformation you know function K up to G and the fact that you use a monad we can do this so so how are we actually",
    "start": "692079",
    "end": "699279"
  },
  {
    "text": "going to do this alright so we're gonna we're at a pattern match on ourself and start implementing things right so pure",
    "start": "699279",
    "end": "705039"
  },
  {
    "text": "of a so what do we what do we have right we've got an A something of type a and",
    "start": "705039",
    "end": "711489"
  },
  {
    "text": "we need to return a G of a right because that's what the type says we have to return so how do we get our a into a G",
    "start": "711489",
    "end": "719139"
  },
  {
    "text": "of a well we know that G is a monad right and remember from earlier one of the functions that monads have is pure",
    "start": "719139",
    "end": "725859"
  },
  {
    "text": "which takes an a and puts it in you know Emma Bay so we can take an A and put it",
    "start": "725859",
    "end": "731619"
  },
  {
    "text": "in G of a because we have monad for G right pure of a and this returns a G of",
    "start": "731619",
    "end": "738009"
  },
  {
    "text": "a right everybody everybody agree with that seem seem satisfactory cool all",
    "start": "738009",
    "end": "743109"
  },
  {
    "text": "right so another case that we could have here is lift right so lift I mean this",
    "start": "743109",
    "end": "748959"
  },
  {
    "text": "is an F of a inside of here right so so we've got a lift what are we gonna do",
    "start": "748959",
    "end": "754869"
  },
  {
    "text": "with that well we have an F of a and we're trying to get to a G of a and we",
    "start": "754869",
    "end": "761229"
  },
  {
    "text": "have this function K thing sort of handily here which says for any F of a I",
    "start": "761229",
    "end": "766539"
  },
  {
    "text": "can give you a G of a so so we just call natural transformation on F of a and",
    "start": "766539",
    "end": "773289"
  },
  {
    "text": "this will return G of a right cool so far so good nothing terribly complicated all right",
    "start": "773289",
    "end": "779439"
  },
  {
    "text": "flat map this seems like it'll be scary right so inner and add F okay so how are",
    "start": "779439",
    "end": "786639"
  },
  {
    "text": "we gonna do this right well inner inner is of type like free you know f of E right where E is like",
    "start": "786639",
    "end": "793059"
  },
  {
    "text": "use something complicated I made it lowercase for reason it and then f is like e to free of f of F ok so we've got",
    "start": "793059",
    "end": "800289"
  },
  {
    "text": "it we've got to turn this in a G&A how are we gonna do that well we can't do anything with F just yet",
    "start": "800289",
    "end": "807940"
  },
  {
    "text": "because we don't have an e write this e is like this mysterious thing that comes from somewhere the only place it can",
    "start": "807940",
    "end": "812980"
  },
  {
    "text": "possibly come from his inner so let's let's do something with inner right well what can we do with inner well we can flatten a pit but that's",
    "start": "812980",
    "end": "819580"
  },
  {
    "text": "probably not going to help us but because you know if we if we just flat map it right we're essentially back",
    "start": "819580",
    "end": "825190"
  },
  {
    "text": "where we started but the other thing we can do with it is we can fold map it okay so if we fold map inner sorry",
    "start": "825190",
    "end": "834550"
  },
  {
    "text": "internet fold map natural transformation this is gonna return to us a G of E",
    "start": "834550",
    "end": "840490"
  },
  {
    "text": "right everybody agree that those types work out and I'm not that's not a rhetorical question by the way I might",
    "start": "840490",
    "end": "846610"
  },
  {
    "text": "have just like simply made a mistake so keep keep an eye out this is the dangers of not compiling your live coding so so full map natural",
    "start": "846610",
    "end": "852790"
  },
  {
    "text": "transformation that gives us a G of E but can we take that E and like sort of",
    "start": "852790",
    "end": "858130"
  },
  {
    "text": "do anything with it well we know that G is a Moana and the two functions that",
    "start": "858130",
    "end": "863920"
  },
  {
    "text": "monent have are pure which we already used in flat map right so maybe we can just like monad G flat map right I just",
    "start": "863920",
    "end": "871570"
  },
  {
    "text": "put my computer to sleep and that is fantastic ladies and gentlemen the touch bar let's see if that comes back out",
    "start": "871570",
    "end": "880230"
  },
  {
    "text": "cool all right note to self disable that button all right a flat map this okay",
    "start": "880230",
    "end": "887860"
  },
  {
    "text": "and this is gonna give us an e okay so there's we've got this lambda now that",
    "start": "887860",
    "end": "893410"
  },
  {
    "text": "that will take an e from the flat mapping on on G using moto G right so",
    "start": "893410",
    "end": "899110"
  },
  {
    "text": "now we've got an e what can we do with it what we can call f okay that's that's actually literally the only thing we can",
    "start": "899110",
    "end": "904660"
  },
  {
    "text": "do with e because there's only one operation on it so so we've now passed this into our function we're making some forward",
    "start": "904660",
    "end": "910630"
  },
  {
    "text": "progress here right because we've now used at least both of our parameters but this is not going to type check because flat map on G wants a wants the months",
    "start": "910630",
    "end": "919420"
  },
  {
    "text": "the function that we passed to it to return a G so this doesn't return a G this this inner thing right this returns",
    "start": "919420",
    "end": "925660"
  },
  {
    "text": "like free of of f of a I guess right yeah free of f of a so if only there",
    "start": "925660",
    "end": "932290"
  },
  {
    "text": "were a way that we could turn free F of a into G of a and of course there",
    "start": "932290",
    "end": "938210"
  },
  {
    "text": "is right so we just like take this thing and fold map it again and now it works",
    "start": "938210",
    "end": "943720"
  },
  {
    "text": "[Music] so that's cool so so we so we actually",
    "start": "943720",
    "end": "950210"
  },
  {
    "text": "have it so this is this is a little dense right but like it's because it clear what's going on here right so",
    "start": "950210",
    "end": "955640"
  },
  {
    "text": "we're taking we're transforming the structure of our free monad the",
    "start": "955640",
    "end": "961070"
  },
  {
    "text": "structure of our like yo so three things right pure lift and flat map we're transforming that and we're interpreting",
    "start": "961070",
    "end": "967310"
  },
  {
    "text": "it into some other monad G and then",
    "start": "967310",
    "end": "972440"
  },
  {
    "text": "we're running that monad and that's all that we're doing here so so this is the",
    "start": "972440",
    "end": "977690"
  },
  {
    "text": "free monad this is the whole structure of the free monad and everything else that people traditionally do with the free monad is just built on top of this",
    "start": "977690",
    "end": "983960"
  },
  {
    "text": "we have now implemented the whole thing from scratch and the cool thing is like this F there's no constraints on this F",
    "start": "983960",
    "end": "990260"
  },
  {
    "text": "whatsoever we can put anything we want into this type constructor and it or or nothing into this type constructor and",
    "start": "990260",
    "end": "996650"
  },
  {
    "text": "this will work there's nothing wrong with this trick so that's really cool right",
    "start": "996650",
    "end": "1001900"
  },
  {
    "text": "are there any other any questions about this it doesn't make sense does it not make sense did I actually type it",
    "start": "1001900",
    "end": "1007750"
  },
  {
    "text": "correctly E flat map what are you asking",
    "start": "1007750",
    "end": "1015640"
  },
  {
    "text": "about inner has an e type parameter",
    "start": "1015640",
    "end": "1021880"
  },
  {
    "text": "that's correct so yeah so inner yeah inner is this thing of type free f of e so the reason",
    "start": "1021880",
    "end": "1029199"
  },
  {
    "text": "so I'm being tricky here right but like this ething here right the reason I call",
    "start": "1029199",
    "end": "1034270"
  },
  {
    "text": "the e is because it's existential okay so yeah okay you can also see this on",
    "start": "1034270",
    "end": "1039459"
  },
  {
    "text": "the screen so e so you notice that e like it's on the left hand side here it's like in this flat map thing but I",
    "start": "1039459",
    "end": "1044890"
  },
  {
    "text": "don't actually put it in sort of the extends right it extends free of a so this is actually kind of this weird",
    "start": "1044890",
    "end": "1050980"
  },
  {
    "text": "thing right we're like you know your your a is sort of trapped inside of the subtype and then you sort of threw it",
    "start": "1050980",
    "end": "1056320"
  },
  {
    "text": "away right in Haskell we call this a phantom type or I get it right",
    "start": "1056320",
    "end": "1063690"
  },
  {
    "text": "so you actually need a language extension to do this elegantly in in Haskell in Scala we just sort of call it",
    "start": "1063690",
    "end": "1071790"
  },
  {
    "text": "object orientation something I don't know but yeah so the reason we need this",
    "start": "1071790",
    "end": "1077370"
  },
  {
    "text": "is because we might have we met have an instance of our free monads say like",
    "start": "1077370",
    "end": "1082980"
  },
  {
    "text": "free of F of int right and then we flatmap on it and now we've got a free of F of string right so we can sort of",
    "start": "1082980",
    "end": "1090210"
  },
  {
    "text": "flat map things together right because there's no constraint cuz flat map is there's sort of a - f of B right so it's sort of like you're changing your type",
    "start": "1090210",
    "end": "1096480"
  },
  {
    "text": "as you go along but that's building up this free monad this free structure right and we remember inside the free",
    "start": "1096480",
    "end": "1102030"
  },
  {
    "text": "structure all we're doing is like putting things inside of case classes right so we're not actually we're not",
    "start": "1102030",
    "end": "1107130"
  },
  {
    "text": "actually interpreting anything yet so we have to hold on to all of those like individual types if you will so we hide",
    "start": "1107130",
    "end": "1112830"
  },
  {
    "text": "them off and these existential a things and then when we come along to fold map we're like well okay we've got this e we",
    "start": "1112830",
    "end": "1120179"
  },
  {
    "text": "don't have any idea what it is because we threw it out like three hours ago but we can we know that it's the same thing",
    "start": "1120179",
    "end": "1125880"
  },
  {
    "text": "as this other Yi over here so we can put them together so the type system actually holds us together there was um",
    "start": "1125880",
    "end": "1131910"
  },
  {
    "text": "there was a bunch of bugs in you know and Scala until very very recently with",
    "start": "1131910",
    "end": "1137429"
  },
  {
    "text": "respect to this particular language feature and this didn't work until like about eight months ago so it's actually",
    "start": "1137429",
    "end": "1144150"
  },
  {
    "text": "really nice that it compiles now good question really good question anybody else okay",
    "start": "1144150",
    "end": "1151200"
  },
  {
    "text": "so we'll move forward because we have now it has been 20 minutes so five minutes longer than I expected",
    "start": "1151200",
    "end": "1157770"
  },
  {
    "text": "and we have completely defined the free monad and everything there is to know about it so what we're gonna do instead of just sort of hanging out is we're",
    "start": "1157770",
    "end": "1165000"
  },
  {
    "text": "gonna see how you use it because the thing is that now now that you actually like see what the free monad is and",
    "start": "1165000",
    "end": "1171480"
  },
  {
    "text": "really honestly like how all of it works there's no magic here the examples of",
    "start": "1171480",
    "end": "1176820"
  },
  {
    "text": "what you do with it kind of make a little bit more sense so new editor buffers Scala all right here is a very",
    "start": "1176820",
    "end": "1186270"
  },
  {
    "text": "common use case for the free mode app right so let's say that we have some",
    "start": "1186270",
    "end": "1192240"
  },
  {
    "text": "part of our code that's doing something with a file system okay and like all good programmers",
    "start": "1192240",
    "end": "1201160"
  },
  {
    "text": "who've been bitten by unit testing and you know integration testing in the past we know that you don't really want to",
    "start": "1201160",
    "end": "1207400"
  },
  {
    "text": "deal with the file system directly you want to build some sort of virtual file system layer so you can actually test the thing and you know not have your CI",
    "start": "1207400",
    "end": "1215020"
  },
  {
    "text": "randomly you know muddling up the file system and there are frameworks out this",
    "start": "1215020",
    "end": "1221290"
  },
  {
    "text": "for out there for doing this like Commons VFS and stuff like that and they all more or less varyingly work horrific",
    "start": "1221290",
    "end": "1227080"
  },
  {
    "text": "Lee poorly it's and they also like I really specialized on like this notion of a file system right and so like if",
    "start": "1227080",
    "end": "1234010"
  },
  {
    "text": "you if you don't have a file system but instead have like my cool micro service number seven and you know there's",
    "start": "1234010",
    "end": "1240430"
  },
  {
    "text": "certainly no mocking framework out there that will help you with my cool muck you know micro service number seven you're kind of up a creek so it's really cool",
    "start": "1240430",
    "end": "1246790"
  },
  {
    "text": "to have like a general technique for this and this is what it turns out the freeman ad gives us so what we do what",
    "start": "1246790",
    "end": "1253150"
  },
  {
    "text": "we would do with this file system thing is we would express an algebra of the operations that we want to perform on",
    "start": "1253150",
    "end": "1260650"
  },
  {
    "text": "the file system so here's what I mean by that CL trait file system all right well it's",
    "start": "1260650",
    "end": "1266980"
  },
  {
    "text": "colored disk right disk and we say disk of a I have no idea what a is but disk",
    "start": "1266980",
    "end": "1272590"
  },
  {
    "text": "disk of a no object disk all right so",
    "start": "1272590",
    "end": "1278520"
  },
  {
    "text": "one of the operations each of the operations is going to become like a constructor on the disk algebra so one",
    "start": "1278520",
    "end": "1285280"
  },
  {
    "text": "obvious operation is reading okay we might want to like you know read read a",
    "start": "1285280",
    "end": "1290770"
  },
  {
    "text": "particular file off the disk and when we read it the result is going to be an",
    "start": "1290770",
    "end": "1296110"
  },
  {
    "text": "array of bytes okay so this is kind of a pattern that you use you define you or",
    "start": "1296110",
    "end": "1301450"
  },
  {
    "text": "you define your operations it's individual cases of this algebra and the algebra is like you know something of a",
    "start": "1301450",
    "end": "1307360"
  },
  {
    "text": "and for each of the operations the result type the output of the operation",
    "start": "1307360",
    "end": "1313180"
  },
  {
    "text": "is what you put in the egg okay so the read operation is a disk operation of a",
    "start": "1313180",
    "end": "1319440"
  },
  {
    "text": "what about the write operation alright so actually I'm just gonna like right so right so this is presumably gonna also",
    "start": "1319440",
    "end": "1327370"
  },
  {
    "text": "take a file name right basically everything's gonna take a filename and you know so it's gonna take",
    "start": "1327370",
    "end": "1333140"
  },
  {
    "text": "some bytes and in this case we were writing to disk what are we running a",
    "start": "1333140",
    "end": "1338240"
  },
  {
    "text": "return well probably something like boolean but you know we're gonna be we're gonna be dirty and just say unit",
    "start": "1338240",
    "end": "1343789"
  },
  {
    "text": "right so what all of our write operations always succeed this is a very",
    "start": "1343789",
    "end": "1349399"
  },
  {
    "text": "optimistic virtual file system right and then you know maybe you might have some other some other some other operation",
    "start": "1349399",
    "end": "1357019"
  },
  {
    "text": "that's like delete or look something like that right you know thinking okay extends yes cool yeah I don't know",
    "start": "1357019",
    "end": "1364880"
  },
  {
    "text": "something I thought okay this is really not that dissimilar from what we used to do with you know service mocking right",
    "start": "1364880",
    "end": "1370730"
  },
  {
    "text": "so where we used to where we used to say okay I'm gonna have like you know a disk service and I'm gonna have like a way of",
    "start": "1370730",
    "end": "1378889"
  },
  {
    "text": "reading from it it's gonna return an array of byte and a way of writing file",
    "start": "1378889",
    "end": "1384440"
  },
  {
    "text": "string right you see what you see what I'm doing here so this is sort of like this is sort of like the old-school way",
    "start": "1384440",
    "end": "1390230"
  },
  {
    "text": "of doing it where you you define an interface and then you know you're gonna have different implementations of those interfaces and then some sort of magical",
    "start": "1390230",
    "end": "1396830"
  },
  {
    "text": "framework from the devil is gonna inject them into your code so rather than doing",
    "start": "1396830",
    "end": "1402320"
  },
  {
    "text": "that there's there's some advantages if we do it this way and I'll get to that in a second but this is sort of like",
    "start": "1402320",
    "end": "1407830"
  },
  {
    "text": "this is sort of like the be that the object-oriented equivalent of what we just did everybody following me anything",
    "start": "1407830",
    "end": "1414350"
  },
  {
    "text": "doesn't make sense at all cool all right I see a lot of confused",
    "start": "1414350",
    "end": "1419720"
  },
  {
    "text": "stares but I'm assuming you're just like in awe of how cool this is all right so right so we've got we've",
    "start": "1419720",
    "end": "1427490"
  },
  {
    "text": "got our disk algebra okay but we can't actually do anything with it okay we've described the operations but",
    "start": "1427490",
    "end": "1432769"
  },
  {
    "text": "we haven't actually described like how you use the operations all we've said is like there are things in it's a very",
    "start": "1432769",
    "end": "1438799"
  },
  {
    "text": "philosophical way so the thing though is that we did by describing the disk",
    "start": "1438799",
    "end": "1445130"
  },
  {
    "text": "algebra in this way we can get some things for free so disk is a type",
    "start": "1445130",
    "end": "1451580"
  },
  {
    "text": "constructor right you know the disk takes a type parameter it is an F of a right so we have this",
    "start": "1451580",
    "end": "1458870"
  },
  {
    "text": "cool little Thema doodle that will allow us to get Monad for any type constructor so for",
    "start": "1458870",
    "end": "1466130"
  },
  {
    "text": "any type constructor that takes a single type parameter we can now get them on it and it doesn't matter what's inside that type constructor we can get a monad for",
    "start": "1466130",
    "end": "1472700"
  },
  {
    "text": "it so that's kind of cool right so disk disk am of a is like free of disk of a",
    "start": "1472700",
    "end": "1479300"
  },
  {
    "text": "right so disk M has a monad cool but what does that actually buy us right I",
    "start": "1479300",
    "end": "1484970"
  },
  {
    "text": "mean we just we just finished seeing how the free monad basically has nothing inside of it so like why why would we",
    "start": "1484970",
    "end": "1490640"
  },
  {
    "text": "care right well it turns out that it allows us to write programs because what",
    "start": "1490640",
    "end": "1496430"
  },
  {
    "text": "a monad is is nothing more than just sequential computation right this idea",
    "start": "1496430",
    "end": "1502130"
  },
  {
    "text": "that well first I do this thing and then it gives me some result and then I do this other thing and it gives me some",
    "start": "1502130",
    "end": "1507230"
  },
  {
    "text": "result and then I keep you know doing things right that's literally all a monad is and we now have that structure",
    "start": "1507230",
    "end": "1512870"
  },
  {
    "text": "for free so what does it look like maybe we might want to write a program so a",
    "start": "1512870",
    "end": "1520790"
  },
  {
    "text": "program is gonna be like I'll use the full rather than using the type alias because I think it's hard to keep track of that stuff so we're gonna say free of",
    "start": "1520790",
    "end": "1527240"
  },
  {
    "text": "disk of a okay and we're gonna use for comprehensions for this and we're gonna",
    "start": "1527240",
    "end": "1533000"
  },
  {
    "text": "say the first thing we're going to do is like read the contents of a file so I'm gonna say contents right so read read",
    "start": "1533000",
    "end": "1540680"
  },
  {
    "text": "the file and the file is gonna be like hi text ok now read of course like this",
    "start": "1540680",
    "end": "1546830"
  },
  {
    "text": "is this is a disk of array of byte and what we actually need is a free of disk of array of byte that's like really easy",
    "start": "1546830",
    "end": "1553250"
  },
  {
    "text": "to get right free dot lift and I think we called it cool right so now now we",
    "start": "1553250",
    "end": "1558440"
  },
  {
    "text": "have a flat map function so for comprehensions will work and then maybe we might want to do something like free",
    "start": "1558440",
    "end": "1563750"
  },
  {
    "text": "lift um like right hi to that text",
    "start": "1563750",
    "end": "1569440"
  },
  {
    "text": "contents I don't know plus well plus array 1 2 3 ok that doesn't make any",
    "start": "1569440",
    "end": "1576740"
  },
  {
    "text": "sense but we're gonna do it anyway ok so we can write we can write some disk on tens and we also want to like we also",
    "start": "1576740",
    "end": "1584330"
  },
  {
    "text": "want to write like a log of fact that we did stuff right some logs text",
    "start": "1584330",
    "end": "1589820"
  },
  {
    "text": "[Music] did a thing to get bytes right cool",
    "start": "1589820",
    "end": "1595770"
  },
  {
    "text": "and then I guess will yield it well",
    "start": "1595770",
    "end": "1603150"
  },
  {
    "text": "yield 42 so or some status code status code 0 cool that makes sense that",
    "start": "1603150",
    "end": "1608490"
  },
  {
    "text": "actually does make any sense but we're doing it anyway so so we've written we've written a program here okay and",
    "start": "1608490",
    "end": "1614250"
  },
  {
    "text": "this program does does three things well does in a relative sense it reads a text",
    "start": "1614250",
    "end": "1620700"
  },
  {
    "text": "file or purports to read a text file and it gets some contents out of that we have no idea where these contents are",
    "start": "1620700",
    "end": "1625770"
  },
  {
    "text": "coming from but you know this this is totally like contents is really like legitimately of type array of byte and",
    "start": "1625770",
    "end": "1631650"
  },
  {
    "text": "we can like use it to do things with so presumably it's coming from somewhere right so we get the contents from this",
    "start": "1631650",
    "end": "1637740"
  },
  {
    "text": "file from somewhere and then we keep like using it and we write to two files and then we're done okay",
    "start": "1637740",
    "end": "1643320"
  },
  {
    "text": "that is our program but of course it's not actually like doing anything right",
    "start": "1643320",
    "end": "1649440"
  },
  {
    "text": "so just like the free monad there isn't actually any anything happening here we just put some stuff in like data",
    "start": "1649440",
    "end": "1655530"
  },
  {
    "text": "constructors and then you know claim to be writing code but but in reality like nothing has actually happened so how do",
    "start": "1655530",
    "end": "1661830"
  },
  {
    "text": "we how do we make stuff happen well the trick is in that full map function okay and by the way I'm just gonna call this",
    "start": "1661830",
    "end": "1667350"
  },
  {
    "text": "I'm gonna make this a valve because you know there's no reason for that to be a death yes do I have to yield more than",
    "start": "1667350",
    "end": "1675630"
  },
  {
    "text": "zero shouldn't I be yelling a 3-mile ad",
    "start": "1675630",
    "end": "1681240"
  },
  {
    "text": "[Music] didn't mean to cut you off that was",
    "start": "1681240",
    "end": "1687179"
  },
  {
    "text": "technical edge okay no I can actually yield whatever I want here so so the",
    "start": "1687179",
    "end": "1693600"
  },
  {
    "text": "yield I don't know how familiar you are with scholars for comprehensions but like yield yield basically is like map",
    "start": "1693600",
    "end": "1699480"
  },
  {
    "text": "it's not like flat map so so we can just like put whatever we want in here as long as it matches up with this type so",
    "start": "1699480",
    "end": "1705299"
  },
  {
    "text": "there's actually no reason that we're yielding and I mean really if you were actually writing this program you would probably yield unit so we can do",
    "start": "1705299",
    "end": "1713400"
  },
  {
    "text": "whatever we want if we needed to yield something that was inside of free like maybe let's actually make this more",
    "start": "1713400",
    "end": "1718740"
  },
  {
    "text": "complicated right so so like delete has to like delete something right so like maybe",
    "start": "1718740",
    "end": "1724310"
  },
  {
    "text": "back right Freda lift lift delete like badness write or delete evil",
    "start": "1724310",
    "end": "1734840"
  },
  {
    "text": "right and we could yield this and now it's gonna be like this is gonna be a program that yields boolean that's",
    "start": "1734840",
    "end": "1741840"
  },
  {
    "text": "probably a lot more useful good good excellent question anybody else okay",
    "start": "1741840",
    "end": "1747630"
  },
  {
    "text": "moving on so we've got a we've got our program here it's not actually doing anything like I said but we presumably",
    "start": "1747630",
    "end": "1753750"
  },
  {
    "text": "want to make it do something so how can we how can we make it do something well we've got this full map function right",
    "start": "1753750",
    "end": "1759120"
  },
  {
    "text": "so the full map function says if we can tell Scala how we how we can turn a disk into some",
    "start": "1759120",
    "end": "1768600"
  },
  {
    "text": "other type that has a monad I'm just gonna like do that because this is getting absurd if we can tell Scala how",
    "start": "1768600",
    "end": "1775860"
  },
  {
    "text": "we can turn disk into some other type that is a monad then full map can run",
    "start": "1775860",
    "end": "1780990"
  },
  {
    "text": "our program inside that monad and we'll get the results that kind of sounds like",
    "start": "1780990",
    "end": "1786660"
  },
  {
    "text": "more or less like we might want like something we might want so can we find a monad that makes sense to turn disk into",
    "start": "1786660",
    "end": "1793440"
  },
  {
    "text": "it English grammar is terrible so it turns out that probably the most useful",
    "start": "1793440",
    "end": "1799440"
  },
  {
    "text": "mouna that we could do that we could use this with in production is a monad that actually I don't know manipulates the",
    "start": "1799440",
    "end": "1805830"
  },
  {
    "text": "file system right like something that actually runs our program and whenever",
    "start": "1805830",
    "end": "1811110"
  },
  {
    "text": "we're talking about like manipulating file systems or like you know reading from network sockets or launching",
    "start": "1811110",
    "end": "1817050"
  },
  {
    "text": "missiles you should be thinking at that point of the i/o monad okay so the i/o",
    "start": "1817050",
    "end": "1822300"
  },
  {
    "text": "monad like the name comes from Haskell but like this exists and you know various libraries and I actually I",
    "start": "1822300",
    "end": "1827550"
  },
  {
    "text": "opened I opened up a project literally this morning to add it to the cat's",
    "start": "1827550",
    "end": "1834630"
  },
  {
    "text": "library so like IO is basically everywhere right so il is it is a monad",
    "start": "1834630",
    "end": "1840420"
  },
  {
    "text": "and it's like IO of a that sort of the result but it returns so can we find a",
    "start": "1840420",
    "end": "1846030"
  },
  {
    "text": "way to maybe turn disk into so any disk of a into an i elevate well it turns out",
    "start": "1846030",
    "end": "1853650"
  },
  {
    "text": "that this is pretty easy so what we're gonna do is we're gonna represent this a natural transformation write a",
    "start": "1853650",
    "end": "1859020"
  },
  {
    "text": "function k from disk to i/o okay equals new function k disk IO I",
    "start": "1859020",
    "end": "1867000"
  },
  {
    "text": "actually I actually want the like the Java 7 you know sort of thing syntax",
    "start": "1867000",
    "end": "1872460"
  },
  {
    "text": "it's sort of unfortunate that Scala can't always type in for this alright so death apply right and this is",
    "start": "1872460",
    "end": "1878160"
  },
  {
    "text": "gonna give a so we need to take a disk of a and we need to return an Iowa vein okay for any for whatever a the disk",
    "start": "1878160",
    "end": "1885090"
  },
  {
    "text": "decides to give us this is the type that we have to define alright so how are we gonna do this well let's pattern match",
    "start": "1885090",
    "end": "1890190"
  },
  {
    "text": "okay so disk of a well what could we possibly be looking at well possibility",
    "start": "1890190",
    "end": "1895350"
  },
  {
    "text": "number one is a read read this file name okay and so given this we have to return",
    "start": "1895350",
    "end": "1901470"
  },
  {
    "text": "an IO of you know array of bytes right cool so that's actually not all that",
    "start": "1901470",
    "end": "1906960"
  },
  {
    "text": "difficult to do right we just literally write the function so like file new file",
    "start": "1906960",
    "end": "1913200"
  },
  {
    "text": "input stream okay actually this is kind of difficult to do we're just gonna pretend we did all of that so pretend",
    "start": "1913200",
    "end": "1920190"
  },
  {
    "text": "pretend that we just did like messy IO stuff and and it went into this like IO thing if we return denial by it's cool",
    "start": "1920190",
    "end": "1925740"
  },
  {
    "text": "all right we're done so what about right okay I'm right we take a file and some bytes and now we have to return so right",
    "start": "1925740",
    "end": "1933570"
  },
  {
    "text": "remember right is a disk of as a disk of unit right so we have to return an IO of",
    "start": "1933570",
    "end": "1940500"
  },
  {
    "text": "unit here so this is gonna be like you know new file output stream okay this is",
    "start": "1940500",
    "end": "1946710"
  },
  {
    "text": "actually kind of hard to basically anything dealing with Java IO is very unnecessarily hard cool alright so",
    "start": "1946710",
    "end": "1953850"
  },
  {
    "text": "delete delete file I think this one will actually be somewhat easier alright so here here now we have to return an Iowa",
    "start": "1953850",
    "end": "1959700"
  },
  {
    "text": "boolean right so however you do this well this is literally gonna be like I",
    "start": "1959700",
    "end": "1965040"
  },
  {
    "text": "think new file and file dot to leave right there finally a function that we",
    "start": "1965040",
    "end": "1971310"
  },
  {
    "text": "can actually implement I really I hope that we can actually implement that alright cool and that's all there is we don't have to",
    "start": "1971310",
    "end": "1978420"
  },
  {
    "text": "write anything else because these are the only three possibilities for disk right if someone hands you a disk it has to be one of these three things so that",
    "start": "1978420",
    "end": "1985500"
  },
  {
    "text": "was actually pretty easy we just basically defined how this implementation was going to get if you sort of rewind this back into",
    "start": "1985500",
    "end": "1992039"
  },
  {
    "text": "object-oriented terms right and remember with like our sort of magic spring injection service thing that we were talking about right this is sort of like",
    "start": "1992039",
    "end": "1998909"
  },
  {
    "text": "the concrete implementation of your interface right so this is your production implementation this is the",
    "start": "1998909",
    "end": "2003950"
  },
  {
    "text": "one that you're actually gonna run run your program with so now we've got this natural transformation we now know how",
    "start": "2003950",
    "end": "2009409"
  },
  {
    "text": "to turn a disk into an IO and IO is a monad which means we can take our",
    "start": "2009409",
    "end": "2014450"
  },
  {
    "text": "program and full map with our natural transformation and that's going to",
    "start": "2014450",
    "end": "2019970"
  },
  {
    "text": "return an IO a boolean and we can run that and magically sort of out of the",
    "start": "2019970",
    "end": "2027859"
  },
  {
    "text": "blue we've somehow gotten a running program something that we can actually do that that I don't know feeds our",
    "start": "2027859",
    "end": "2033379"
  },
  {
    "text": "family that's pretty cool like just sort of like not and not doing anything at",
    "start": "2033379",
    "end": "2038809"
  },
  {
    "text": "all so programming is hard guys yeah so anyway are there any questions about",
    "start": "2038809",
    "end": "2043999"
  },
  {
    "text": "what we've seen like what we've done so far nothing ok cool because we're about",
    "start": "2043999",
    "end": "2050690"
  },
  {
    "text": "to gonna get to this we're about to get to the part where this gets really really really cool because the thing is",
    "start": "2050690",
    "end": "2055940"
  },
  {
    "text": "that the whole point all of this is testing ok the whole point I mean",
    "start": "2055940",
    "end": "2061700"
  },
  {
    "text": "arguably I would I would honestly argue I would stand up here and argue that the whole point of functional programming in",
    "start": "2061700",
    "end": "2067549"
  },
  {
    "text": "general is testing yes",
    "start": "2067549",
    "end": "2071619"
  },
  {
    "text": "is there any syntactic sugar for abstracting away the free lift M repetitive madness stuff yes so what",
    "start": "2076760",
    "end": "2085820"
  },
  {
    "text": "people generally do is they'll do something like this and they'll create a smart constructor so we'll say like read",
    "start": "2085820",
    "end": "2092000"
  },
  {
    "text": "with a lowercase R and that will return you know free of disk array byte right",
    "start": "2092000",
    "end": "2098690"
  },
  {
    "text": "and then you do normally do like free lift read file and then if you go down here it becomes like a lot easier",
    "start": "2098690",
    "end": "2105859"
  },
  {
    "text": "because you just well I did the wrong one but you just usually be like read write okay",
    "start": "2105859",
    "end": "2111470"
  },
  {
    "text": "that's usually what you end up doing there's various libraries that have tried to make that even a little bit",
    "start": "2111470",
    "end": "2116840"
  },
  {
    "text": "better where they'll just like derive that function for you so then like I wrote a library once where you could",
    "start": "2116840",
    "end": "2122000"
  },
  {
    "text": "actually do this and it just like magically inferred everything and it was super cool and it like crashed half the",
    "start": "2122000",
    "end": "2128330"
  },
  {
    "text": "time but it was cool it was like it was exciting and nobody actually liked that",
    "start": "2128330",
    "end": "2134000"
  },
  {
    "text": "for some reason but it but it was cool yeah no it is the boilerplate can be",
    "start": "2134000",
    "end": "2139730"
  },
  {
    "text": "annoying if you're not careful yeah implicit def where's what line 6 this is",
    "start": "2139730",
    "end": "2149450"
  },
  {
    "text": "a def yes so let me I'll just base that out so it's a little easier to read that",
    "start": "2149450",
    "end": "2154550"
  },
  {
    "text": "clear Oh implicit def no it's not it's not an",
    "start": "2154550",
    "end": "2160910"
  },
  {
    "text": "implicit that would be that would be a little strange because so anytime you",
    "start": "2160910",
    "end": "2166190"
  },
  {
    "text": "see implicit def alarm bells should be ringing because it's like well shoot am",
    "start": "2166190",
    "end": "2171200"
  },
  {
    "text": "i actually accidentally getting an implicit conversion right because you don't want implicit conversions and this",
    "start": "2171200",
    "end": "2176210"
  },
  {
    "text": "will in fact be an implicit conversion from string to like free of disk array byte and that that doesn't make any",
    "start": "2176210",
    "end": "2182450"
  },
  {
    "text": "sense right because anytime you have an implicit conversion from A to B what you're actually saying is well a is sort of secretly a subtype of B but like",
    "start": "2182450",
    "end": "2189920"
  },
  {
    "text": "Liskov substitution principle doesn't make any sense here so so we definitely don't want that ya know we want we want",
    "start": "2189920",
    "end": "2196130"
  },
  {
    "text": "to death there are some cool things we can do with implicit so just not in in a one-hour talk",
    "start": "2196130",
    "end": "2202569"
  },
  {
    "text": "so is it necessary to have an ADT and could we hmm it's not it's not at all",
    "start": "2213520",
    "end": "2221050"
  },
  {
    "text": "necessary to have an ADT I'm just not sure what else you would do like so we",
    "start": "2221050",
    "end": "2226510"
  },
  {
    "text": "could I mean so I guess I guess for example like oh yeah yeah so if this",
    "start": "2226510",
    "end": "2238000"
  },
  {
    "text": "were not your code and and you didn't know that disk was sealed and you just wanted to like use the free money to do cool things you can do that and in fact",
    "start": "2238000",
    "end": "2245760"
  },
  {
    "text": "you could use the free moon end to do a lot of things that have nothing to do with monads or programming so this is",
    "start": "2245760",
    "end": "2252490"
  },
  {
    "text": "actually where things get really really really crazy so like I said I work at slam data slam data like one of the",
    "start": "2252490",
    "end": "2258520"
  },
  {
    "text": "employees of slam data builds a library called matroyshka which is I'd like to Russian doll right and and matroyshka",
    "start": "2258520",
    "end": "2266470"
  },
  {
    "text": "provides some tools for abstracting over recursions games which are like hilariously mind-bending things so",
    "start": "2266470",
    "end": "2273849"
  },
  {
    "text": "basically like I I know very very little about them but these mysterious things",
    "start": "2273849",
    "end": "2278980"
  },
  {
    "text": "that I have to work with every day and I just sort of go in and I'm like I don't know how this code works please help me but one of the things you can do is you",
    "start": "2278980",
    "end": "2286000"
  },
  {
    "text": "can use the free monad to abstract over sort of injecting things into holes in data structures right so we have these",
    "start": "2286000",
    "end": "2292240"
  },
  {
    "text": "like trees and graphs but rather than actually representing them as a recursive data we represent them as very",
    "start": "2292240",
    "end": "2297310"
  },
  {
    "text": "flat data where each like piece of the data has a hole in it and in the Freeman IDE we'll just sort of inject things",
    "start": "2297310",
    "end": "2302950"
  },
  {
    "text": "into there and so when we sort of like expand it outright it actually becomes a graph at runtime but we don't see it as",
    "start": "2302950",
    "end": "2309280"
  },
  {
    "text": "a graph and we just manipulate it as a flat structure so it's actually cool we don't write recursive recursive",
    "start": "2309280",
    "end": "2315220"
  },
  {
    "text": "structures or recursive functions anymore we just like have recursion schemes it's really bizarre I don't actually understand it so please",
    "start": "2315220",
    "end": "2321580"
  },
  {
    "text": "don't ask me about it but I'm still like I am very much still trying to learn that but hopefully hopefully someday",
    "start": "2321580",
    "end": "2328000"
  },
  {
    "text": "I'll be able to give a talk about it and you know sound cool good question anyone else okay we're not",
    "start": "2328000",
    "end": "2337430"
  },
  {
    "text": "gonna go that much longer all right but I wanted to talk about testing because testing is like I the reason that we do",
    "start": "2337430",
    "end": "2342920"
  },
  {
    "text": "all of this stuff it's the reason that the Freeman add exists it's really the reason that functional programming",
    "start": "2342920",
    "end": "2348740"
  },
  {
    "text": "exists because like functional programming is basically a response to the fact that all of us are really",
    "start": "2348740",
    "end": "2353930"
  },
  {
    "text": "stupid like I am not smart enough to understand like software at all like I",
    "start": "2353930",
    "end": "2360110"
  },
  {
    "text": "can't I can't be a programmer and so because because I'm so stupid I have to like restrict the domain of",
    "start": "2360110",
    "end": "2367010"
  },
  {
    "text": "things that my code can do to like these immutable things that I can actually reason about because my mind is sort of",
    "start": "2367010",
    "end": "2372590"
  },
  {
    "text": "that tiny and in order to do that like functional programming helps me and",
    "start": "2372590",
    "end": "2377600"
  },
  {
    "text": "reasoning about code is basically the same thing as testing it right because if you can reason about something you",
    "start": "2377600",
    "end": "2382820"
  },
  {
    "text": "can express that reasoning as a test or as a property or as Allah and then we",
    "start": "2382820",
    "end": "2388490"
  },
  {
    "text": "have tools that can verify all of these things for us so it helps us write safer software so the free monad helps us do",
    "start": "2388490",
    "end": "2395900"
  },
  {
    "text": "this but it helps us do this on things that are not pure functions right my my complicated business logic that talks to",
    "start": "2395900",
    "end": "2402770"
  },
  {
    "text": "seven different micro services and like bring some data back and like jumbles it up and then compares whether or not it's",
    "start": "2402770",
    "end": "2408230"
  },
  {
    "text": "less than or equal to seven because like some sales person was like seven is a cool number like that is not a pure",
    "start": "2408230",
    "end": "2413600"
  },
  {
    "text": "function in any sense of any universe right but the reality is that's where most of our bugs are because the",
    "start": "2413600",
    "end": "2419600"
  },
  {
    "text": "salesperson was crazy so like how do we how do we test that right the free monad is the answer so you write you write",
    "start": "2419600",
    "end": "2426530"
  },
  {
    "text": "that complicated logic in the middle in terms of the free monad right so all of these different services that you talk",
    "start": "2426530",
    "end": "2432050"
  },
  {
    "text": "to you represent them as algebras that are like this this this service you know supports these operations and I can I",
    "start": "2432050",
    "end": "2438050"
  },
  {
    "text": "can get a free of that so the question is how do we take this and how do we test it okay and the answer is well we",
    "start": "2438050",
    "end": "2445520"
  },
  {
    "text": "can just write a different natural transformation and there are actually better tools for doing this they're just",
    "start": "2445520",
    "end": "2451180"
  },
  {
    "text": "not open source right now and I really really hope they're open source soon but",
    "start": "2451180",
    "end": "2456560"
  },
  {
    "text": "I promise you they exist but right now what you do is you write in natural transformation so so rather than",
    "start": "2456560",
    "end": "2461630"
  },
  {
    "text": "interpreting too IO which is like this everything that manipulates the disk maybe we could interpret to like you",
    "start": "2461630",
    "end": "2468910"
  },
  {
    "text": "know Val Mach sort of an odd name but we can use it function K disk to like well",
    "start": "2468910",
    "end": "2476380"
  },
  {
    "text": "now we're getting hints like strange land but like you know some some like thing that's like there we go right",
    "start": "2476380",
    "end": "2484230"
  },
  {
    "text": "question mark I know I'm miss associated bad question mark okay do these question",
    "start": "2484230",
    "end": "2491950"
  },
  {
    "text": "marks make sense I just realized that I did not at all explain that syntax like in any sense of the word",
    "start": "2491950",
    "end": "2497250"
  },
  {
    "text": "the question mark here this is uh oh no",
    "start": "2497250",
    "end": "2502539"
  },
  {
    "text": "I did to it I did do it right the first time alright this is this is a compiler plugin called kind projector and it basically avoids the need to do like",
    "start": "2502539",
    "end": "2509289"
  },
  {
    "text": "crazy you know sort of like question mark bracket type lambda you know alpha",
    "start": "2509289",
    "end": "2516130"
  },
  {
    "text": "equals like this craziness right you know hash Tambe right you know one wants",
    "start": "2516130",
    "end": "2521410"
  },
  {
    "text": "to see that in their code so kind projector your limits that all right so so we can write we can write a function",
    "start": "2521410",
    "end": "2526510"
  },
  {
    "text": "K that interprets from disk to the state monad where the thing that's inside of our state monad is just like a map from",
    "start": "2526510",
    "end": "2533319"
  },
  {
    "text": "string to array of bytes right so this is this notion of like an in-memory file system right we can define what that",
    "start": "2533319",
    "end": "2538420"
  },
  {
    "text": "means and then we can run our tests like in memory just by saying well use the",
    "start": "2538420",
    "end": "2544119"
  },
  {
    "text": "mock natural transformation don't use the real one okay so this is like you",
    "start": "2544119",
    "end": "2549490"
  },
  {
    "text": "can think of this again like you can think of this a lot like a form of dependency injection that doesn't involve any magic and actually just uses",
    "start": "2549490",
    "end": "2555220"
  },
  {
    "text": "monads rather than spring spring greater than monads less than moments so anyway",
    "start": "2555220",
    "end": "2561430"
  },
  {
    "text": "but like that's really cool and there's a lot of more powerful tools that you can build on this because inside of free",
    "start": "2561430",
    "end": "2567069"
  },
  {
    "text": "like fundamentally remember the implementation of free is really really really dirt simple and it's data it's",
    "start": "2567069",
    "end": "2572980"
  },
  {
    "text": "not like complicated you know sort of constructor injection inside of class loaders with sort of JVM agents or",
    "start": "2572980",
    "end": "2579490"
  },
  {
    "text": "anything like that but we can't understand it's actually data we have it in our hands we can introspect it we can",
    "start": "2579490",
    "end": "2585039"
  },
  {
    "text": "write other functions other than full map right these constructors are open so we can just like sort of go into them",
    "start": "2585039",
    "end": "2590079"
  },
  {
    "text": "and lunge around and see what's here and fundamentally all we have is like just a list of actions right sort of a sequence",
    "start": "2590079",
    "end": "2596140"
  },
  {
    "text": "of actions that to perform a sequence of flat maps we could go in there and we could pull it apart and we could say well I want my",
    "start": "2596140",
    "end": "2601900"
  },
  {
    "text": "function to say a read followed by a right followed by another right followed by a read and we could write that test",
    "start": "2601900",
    "end": "2608099"
  },
  {
    "text": "so for example on a previous job I wrote a I wrote a test for a service that was",
    "start": "2608099",
    "end": "2614290"
  },
  {
    "text": "talking to a database that shall not be named Cassandra that has compare-and-swap operations right and",
    "start": "2614290",
    "end": "2621130"
  },
  {
    "text": "like atomic operations for some reason and I wanted to make sure that my complicated compare-and-swap semantics were actually correct right",
    "start": "2621130",
    "end": "2627700"
  },
  {
    "text": "has anybody ever written a unit test for a caste loop like a compare-and-swap thing that is like murder like how the",
    "start": "2627700",
    "end": "2633790"
  },
  {
    "text": "heck - unit test that your unit testing or race condition that doesn't even make sense but with the Freeman and I could do it because I said well I'm gonna set",
    "start": "2633790",
    "end": "2641109"
  },
  {
    "text": "up this situation where it's like I want to say I want to see my function read from the database first right so get",
    "start": "2641109",
    "end": "2647200"
  },
  {
    "text": "some data out and then I want to see my a function compute some value - right and then I want to see it try to write it and then I want to see that write",
    "start": "2647200",
    "end": "2653109"
  },
  {
    "text": "fail and I want to see my function read from the database again to figure out the race condition and I want to see you",
    "start": "2653109",
    "end": "2659140"
  },
  {
    "text": "to try to write again I want to see it fail a second time and I can actually set that whole thing up and I can test it and the function was bulletproof like",
    "start": "2659140",
    "end": "2666400"
  },
  {
    "text": "I had a compare and swap like race condition test function that was bulletproof indeterministic that's fantastic right that's how you",
    "start": "2666400",
    "end": "2673180"
  },
  {
    "text": "write good software and the free monad allowed me to do that so anyway we're",
    "start": "2673180",
    "end": "2679450"
  },
  {
    "text": "we're very much we're very much running out of time at least if I we take my artificial limit of like not an hour so",
    "start": "2679450",
    "end": "2685950"
  },
  {
    "text": "are there any questions about things I know I didn't I know I sort of hand-wave past the testing thing really really",
    "start": "2685950",
    "end": "2691180"
  },
  {
    "text": "really fast but any questions at all anything you want to see again any like stuff do you",
    "start": "2691180",
    "end": "2697720"
  },
  {
    "text": "want me to explain why a monad is a model in the category of endo functors because we could do that too",
    "start": "2697720",
    "end": "2703780"
  },
  {
    "text": "[Music] yes hi so I'm very confused in a good",
    "start": "2703780",
    "end": "2713579"
  },
  {
    "text": "way sweet I'm coming from a closure background I don't know Scala at all so",
    "start": "2713579",
    "end": "2718829"
  },
  {
    "text": "I'm probably not the right audience for this but I'm just so confused I don't",
    "start": "2718829",
    "end": "2725579"
  },
  {
    "text": "know like my brain is still trying to figure it out sweet that's great so if I had one",
    "start": "2725579",
    "end": "2731070"
  },
  {
    "text": "question it would just be like explain more of what the free Monette does can",
    "start": "2731070",
    "end": "2738540"
  },
  {
    "text": "you give me just some more concrete examples of the free mode ad in use okay so let's let's let's do another really",
    "start": "2738540",
    "end": "2744510"
  },
  {
    "text": "really quick concrete example right so rather than disk let's imagine that I had like some some service right",
    "start": "2744510",
    "end": "2751470"
  },
  {
    "text": "that was like weather you know and my weather my weather service and I'm just",
    "start": "2751470",
    "end": "2757920"
  },
  {
    "text": "creating I'm just creating an algebra for this right my weather service has the ability to like you know get weather for you know some zip code and that you",
    "start": "2757920",
    "end": "2767880"
  },
  {
    "text": "know returns whether it's the old temperature or something right I'm just",
    "start": "2767880",
    "end": "2773010"
  },
  {
    "text": "like describing the operation so I'm not actually implementing here I'm just describing it's sort of like writing an interface except instead of writing an",
    "start": "2773010",
    "end": "2779579"
  },
  {
    "text": "interface I'm producing data okay I'm describing what data could be here right we have get weather and like get",
    "start": "2779579",
    "end": "2785460"
  },
  {
    "text": "forecasts and this is like you know five day or something like that like I can sort of produce these operations right",
    "start": "2785460",
    "end": "2790980"
  },
  {
    "text": "so",
    "start": "2790980",
    "end": "2793700"
  },
  {
    "text": "yeah each one of these case kids classes is like an endpoint on a theoretical API and that is actually very common thing",
    "start": "2796530",
    "end": "2802410"
  },
  {
    "text": "to do when you're writing some messy business logic here and you've got like six microservices that you're talking to just write an algebra for each",
    "start": "2802410",
    "end": "2808860"
  },
  {
    "text": "microservice right and that describes how you can get them into Data now the thing and what the free monad does and",
    "start": "2808860",
    "end": "2814350"
  },
  {
    "text": "all that the free monad does is it allows you to write sequential programs with that data okay because this is all",
    "start": "2814350",
    "end": "2821820"
  },
  {
    "text": "that monads are right there just sequential ization sequential computation right so the free mail that",
    "start": "2821820",
    "end": "2827070"
  },
  {
    "text": "gives you sequential computation for any data at all and so that way we can just",
    "start": "2827070",
    "end": "2833370"
  },
  {
    "text": "describe our dsl x' like are our operations in terms of data and the free monad gives us the computation stuff",
    "start": "2833370",
    "end": "2839010"
  },
  {
    "text": "it's like basically factoring out boilerplate in a way okay",
    "start": "2839010",
    "end": "2844550"
  },
  {
    "text": "so does that help a little bit I'm gonna have to not do more of the example",
    "start": "2844550",
    "end": "2850650"
  },
  {
    "text": "because like if I if I sort of keep going down that rabbit hole we'll have to be typing for a lot longer but I can I can show you more if you want to come",
    "start": "2850650",
    "end": "2857220"
  },
  {
    "text": "up with too much later yeah cool cool confusion is good anybody else confused yes okay",
    "start": "2857220",
    "end": "2868800"
  },
  {
    "text": "multiple people come up and I will show you I show you examples there maybe this is just like a terrible talk and like the whole room shuffles forward it's",
    "start": "2868800",
    "end": "2874200"
  },
  {
    "text": "like you didn't explain anything Daniel yes wait there's a microphone in Scala today",
    "start": "2874200",
    "end": "2881670"
  },
  {
    "text": "is there any way to combine this with software transactional memory or something like Haskell atomically yeah",
    "start": "2881670",
    "end": "2887510"
  },
  {
    "text": "so there's some people who've played around with that and actually there was a discussion the cats channel like an",
    "start": "2887510",
    "end": "2892830"
  },
  {
    "text": "hour ago about that idea software transactional memory is really interesting and you",
    "start": "2892830",
    "end": "2898620"
  },
  {
    "text": "could very definitely describe operations on it using the free monad that might make a lot of sense generally",
    "start": "2898620",
    "end": "2905010"
  },
  {
    "text": "speaking I find though that STM doesn't make sense like I just just in practice like it doesn't actually get used all that much",
    "start": "2905010",
    "end": "2911460"
  },
  {
    "text": "which is really kind of weird like it seems like this cool thing but I've never actually seen someone do something useful with it if you are someone who",
    "start": "2911460",
    "end": "2917280"
  },
  {
    "text": "has done something useful with STM please come and show me because I'd like love to see it but I've never actually",
    "start": "2917280",
    "end": "2923370"
  },
  {
    "text": "seen someone do anything with it but yeah you could I've actually seen people do things like use the free monad",
    "start": "2923370",
    "end": "2930240"
  },
  {
    "text": "with something that's already a monad just so they can get like sequential ization but not sequenced inside of the",
    "start": "2930240",
    "end": "2935580"
  },
  {
    "text": "inner mode ad and then sort of delay their computation I can't kind of be cool thing that's",
    "start": "2935580",
    "end": "2944280"
  },
  {
    "text": "kind of interesting to me is that it seems that these are mechanisms to basically allow you to have arbitrary arbitrary sequential arbitrary",
    "start": "2944280",
    "end": "2950130"
  },
  {
    "text": "sequential computation basically encoded as data and interpreted the way you want to so it feels like you could take an",
    "start": "2950130",
    "end": "2956250"
  },
  {
    "text": "arbitrary procedural program and write it this way or even a translator to translate it into this functional stuff",
    "start": "2956250",
    "end": "2961859"
  },
  {
    "text": "right so yeah that's like the lambdas the ultimate go-to type thing it's kinda like you can basically go ahead and mimic go tooth with the continuations",
    "start": "2961859",
    "end": "2968430"
  },
  {
    "text": "and all these other things so is there a sense among people using this that this is not the first thing you reach for because it seems like you're at least at",
    "start": "2968430",
    "end": "2974730"
  },
  {
    "text": "the you know if you can end up having functional code looks exactly like procedural what's the advantage really",
    "start": "2974730",
    "end": "2979830"
  },
  {
    "text": "yes okay so the reason the reason so the there's a couple of things packed up in there",
    "start": "2979830",
    "end": "2985950"
  },
  {
    "text": "that's a really fantastic series of thoughts right and like your initial description of what the Freeman is that's exactly what it is right so why",
    "start": "2985950",
    "end": "2992820"
  },
  {
    "text": "would you do this rather than just procedural code right well the thing is that like a procedural yeah well well",
    "start": "2992820",
    "end": "3002750"
  },
  {
    "text": "what is it more functional solution right I mean function oh so functional right is just like you know immutable so this",
    "start": "3002750",
    "end": "3009530"
  },
  {
    "text": "the whole the whole idea behind it is trying to get something that's easier to test easier to reason about and what",
    "start": "3009530",
    "end": "3015680"
  },
  {
    "text": "this does like all the different does is it gives us the ability to sort of peel apart sequential computation sequential",
    "start": "3015680",
    "end": "3021320"
  },
  {
    "text": "programs and see them as data right whereas when you have something that's sequentialized but not inside of a",
    "start": "3021320",
    "end": "3027710"
  },
  {
    "text": "structure like this where it's all as data then you can't see what's happening right so if you just have function",
    "start": "3027710",
    "end": "3032780"
  },
  {
    "text": "composition for example you can't go in the middle of that and see well I really want to be sure that F has been before G",
    "start": "3032780",
    "end": "3038780"
  },
  {
    "text": "you can't actually like say that you have to look at the end point and say well I guess the answer is 42 so maybe",
    "start": "3038780",
    "end": "3045589"
  },
  {
    "text": "maybe that's right so that becomes harder used to work with like Haskell and like lazy and stuff like this and",
    "start": "3045589",
    "end": "3051589"
  },
  {
    "text": "you're kind of like there are many things that don't have to be sequential right it's just you know when you're doing with the outside world quite often",
    "start": "3051589",
    "end": "3057380"
  },
  {
    "text": "you wanna have sequential computation so right that's the place where you just don't reach for this until you really",
    "start": "3057380",
    "end": "3062540"
  },
  {
    "text": "need it yes so this is an important question right it's like where where does the free monad make sense because",
    "start": "3062540",
    "end": "3069170"
  },
  {
    "text": "in in the small in in functions like taking the absolute value of a number",
    "start": "3069170",
    "end": "3074450"
  },
  {
    "text": "right there's no reason whatsoever to put that in the free monad that makes no sense right do it doing some sort of",
    "start": "3074450",
    "end": "3080660"
  },
  {
    "text": "computation something that's actually like already pure why would you put that in the free monad and at the other end",
    "start": "3080660",
    "end": "3086359"
  },
  {
    "text": "of the spectrum maybe you might have something like something complicated like I'm I'm running this on a web",
    "start": "3086359",
    "end": "3092780"
  },
  {
    "text": "server or I'm setting up some sort of like asynchronous socket poll or something like that why would you put that in the free mode that doesn't make",
    "start": "3092780",
    "end": "3098810"
  },
  {
    "text": "any sense I mean maybe it does make sense but like probably not like you're dealing with like concurrency you're dealing with IO you're dealing with like",
    "start": "3098810",
    "end": "3105160"
  },
  {
    "text": "really like raw bits like I don't know but like that middle that middle part of your your software stack where you're",
    "start": "3105160",
    "end": "3111920"
  },
  {
    "text": "doing things like like the crazy business logic they're talking to seven services and like stuff underneath it",
    "start": "3111920",
    "end": "3117200"
  },
  {
    "text": "maybe that's pure functions or like some sort of messy IO thing but like your middle stuff here is complicated logic",
    "start": "3117200",
    "end": "3122619"
  },
  {
    "text": "but it's like middleware stuff and you want to be able to write tests about that middle stuff as easily as possible",
    "start": "3122619",
    "end": "3128720"
  },
  {
    "text": "because honestly like that's what bugs in software are cuz that's where all your edge cases are so the free monad",
    "start": "3128720",
    "end": "3134420"
  },
  {
    "text": "like without the free monad you would have to write that stuff in IO because you're like doing service calls and",
    "start": "3134420",
    "end": "3139730"
  },
  {
    "text": "stuff like that but I oh you can't test like that's an integration test Freeman ad you can test so that's the advantage",
    "start": "3139730",
    "end": "3147220"
  },
  {
    "text": "yeah excellent great question basically",
    "start": "3147220",
    "end": "3152510"
  },
  {
    "text": "out of time I think almost out of time I don't know no one's pulled me at the stage last question no last questions",
    "start": "3152510",
    "end": "3160869"
  },
  {
    "text": "cool thank you very much",
    "start": "3160869",
    "end": "3164619"
  }
]