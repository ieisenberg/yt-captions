[
  {
    "start": "0",
    "end": "558000"
  },
  {
    "text": "okay I'm Brian Clapper I'm a independent",
    "start": "10120",
    "end": "12360"
  },
  {
    "text": "consultant I run the Philadelphia area",
    "start": "12360",
    "end": "14320"
  },
  {
    "text": "scholar User Group uh and I teach schola",
    "start": "14320",
    "end": "17400"
  },
  {
    "text": "and play and a few other things for New",
    "start": "17400",
    "end": "19160"
  },
  {
    "text": "Circle and today what we're going to",
    "start": "19160",
    "end": "20480"
  },
  {
    "text": "talk about is um is a feature of schola",
    "start": "20480",
    "end": "24439"
  },
  {
    "text": "that I think is one of the killer",
    "start": "24439",
    "end": "25599"
  },
  {
    "text": "features it's one of the most",
    "start": "25599",
    "end": "26679"
  },
  {
    "text": "interesting uh capabilities in the",
    "start": "26679",
    "end": "28560"
  },
  {
    "text": "language so those of you coming from a",
    "start": "28560",
    "end": "30400"
  },
  {
    "text": "Java background might find this",
    "start": "30400",
    "end": "31759"
  },
  {
    "text": "particularly interesting because even",
    "start": "31759",
    "end": "33040"
  },
  {
    "text": "with Java 8 there's nothing like this in",
    "start": "33040",
    "end": "35239"
  },
  {
    "text": "Java uh so we're going to start talking",
    "start": "35239",
    "end": "37520"
  },
  {
    "text": "about something called apply and update",
    "start": "37520",
    "end": "40120"
  },
  {
    "text": "this is this is a setup for the cool",
    "start": "40120",
    "end": "41960"
  },
  {
    "text": "feature that we're going to be talking",
    "start": "41960",
    "end": "43120"
  },
  {
    "text": "about um Scala permits you to make uh",
    "start": "43120",
    "end": "46559"
  },
  {
    "text": "make anything callable as if it were a",
    "start": "46559",
    "end": "48760"
  },
  {
    "text": "function so if I've got a class or I've",
    "start": "48760",
    "end": "51239"
  },
  {
    "text": "got an object uh if that object has an",
    "start": "51239",
    "end": "54199"
  },
  {
    "text": "apply function on it then I can call it",
    "start": "54199",
    "end": "57239"
  },
  {
    "text": "as if it were a function so for instance",
    "start": "57239",
    "end": "59039"
  },
  {
    "text": "if you look up here",
    "start": "59039",
    "end": "60440"
  },
  {
    "text": "on the",
    "start": "60440",
    "end": "62120"
  },
  {
    "text": "slide here we're calling something",
    "start": "62120",
    "end": "64158"
  },
  {
    "text": "called f and this looks just like a",
    "start": "64159",
    "end": "65600"
  },
  {
    "text": "function call exactly like a function",
    "start": "65600",
    "end": "67640"
  },
  {
    "text": "call but really what Scola does is it",
    "start": "67640",
    "end": "69720"
  },
  {
    "text": "looks at that it says is f really a",
    "start": "69720",
    "end": "71680"
  },
  {
    "text": "function no it's not okay does f have an",
    "start": "71680",
    "end": "75400"
  },
  {
    "text": "apply function if it does then it Maps",
    "start": "75400",
    "end": "78479"
  },
  {
    "text": "this call into an apply call right so",
    "start": "78479",
    "end": "81720"
  },
  {
    "text": "that's if that's if you call it um in",
    "start": "81720",
    "end": "84520"
  },
  {
    "text": "this fashion it also permits the uh the",
    "start": "84520",
    "end": "87400"
  },
  {
    "text": "function call to appear on the",
    "start": "87400",
    "end": "89439"
  },
  {
    "text": "assignment side of an equal sign so in",
    "start": "89439",
    "end": "92320"
  },
  {
    "text": "this second instance here it looks as",
    "start": "92320",
    "end": "94600"
  },
  {
    "text": "though we're assigning some value to a",
    "start": "94600",
    "end": "96280"
  },
  {
    "text": "function call uh but really what's",
    "start": "96280",
    "end": "98759"
  },
  {
    "text": "happening is is Scala desugar that and",
    "start": "98759",
    "end": "100960"
  },
  {
    "text": "that's the term we tally typically call",
    "start": "100960",
    "end": "103439"
  },
  {
    "text": "um is is desugaring this is syntactic",
    "start": "103439",
    "end": "106000"
  },
  {
    "text": "sugar for this f. update call so it",
    "start": "106000",
    "end": "109960"
  },
  {
    "text": "calls f. update and it passes in the",
    "start": "109960",
    "end": "112960"
  },
  {
    "text": "arguments that you give it over here on",
    "start": "112960",
    "end": "114600"
  },
  {
    "text": "the left followed by the value now where",
    "start": "114600",
    "end": "116799"
  },
  {
    "text": "this is typically used um a very common",
    "start": "116799",
    "end": "119360"
  },
  {
    "text": "example is we're updating a map or an",
    "start": "119360",
    "end": "121240"
  },
  {
    "text": "array so this next example down here",
    "start": "121240",
    "end": "123360"
  },
  {
    "text": "shows that we have created a mutable",
    "start": "123360",
    "end": "125320"
  },
  {
    "text": "hashmap which corresponds to a Java",
    "start": "125320",
    "end": "127960"
  },
  {
    "text": "typical Java hashmap and now we're going",
    "start": "127960",
    "end": "130119"
  },
  {
    "text": "to assign the key Bob the value 100 and",
    "start": "130119",
    "end": "133640"
  },
  {
    "text": "because of the update syntax we get this",
    "start": "133640",
    "end": "135920"
  },
  {
    "text": "natural assignment right there okay we",
    "start": "135920",
    "end": "138560"
  },
  {
    "text": "don't have to say scores. put we don't",
    "start": "138560",
    "end": "140480"
  },
  {
    "text": "have to make any weird function call",
    "start": "140480",
    "end": "142400"
  },
  {
    "text": "we're just saying hey assign scores Saab",
    "start": "142400",
    "end": "146040"
  },
  {
    "text": "the value of 100 all right so far",
    "start": "146040",
    "end": "148879"
  },
  {
    "text": "nothing really slick about this I mean",
    "start": "148879",
    "end": "151040"
  },
  {
    "text": "it's kind of nice the compiler does this",
    "start": "151040",
    "end": "152640"
  },
  {
    "text": "for you um but you know of what of what",
    "start": "152640",
    "end": "155400"
  },
  {
    "text": "value is this right so the um one of one",
    "start": "155400",
    "end": "159120"
  },
  {
    "text": "use for the apply method is typically in",
    "start": "159120",
    "end": "161040"
  },
  {
    "text": "what scholar calls a companion object",
    "start": "161040",
    "end": "162840"
  },
  {
    "text": "whenever you create a class in uh",
    "start": "162840",
    "end": "164840"
  },
  {
    "text": "scholar so here's an example of a class",
    "start": "164840",
    "end": "166760"
  },
  {
    "text": "called",
    "start": "166760",
    "end": "167560"
  },
  {
    "text": "fraction you can create what's called a",
    "start": "167560",
    "end": "169640"
  },
  {
    "text": "companion object now an object for those",
    "start": "169640",
    "end": "172000"
  },
  {
    "text": "of you not familiar with it in schola is",
    "start": "172000",
    "end": "174040"
  },
  {
    "text": "a Singleton um it's kind of like a",
    "start": "174040",
    "end": "178560"
  },
  {
    "text": "static class is is in Java but it isn't",
    "start": "178560",
    "end": "181360"
  },
  {
    "text": "really a static class it truly is a",
    "start": "181360",
    "end": "183040"
  },
  {
    "text": "Singleton so if I put an apply method on",
    "start": "183040",
    "end": "185920"
  },
  {
    "text": "my companion object fraction note what",
    "start": "185920",
    "end": "187840"
  },
  {
    "text": "this apply method does this apply method",
    "start": "187840",
    "end": "189959"
  },
  {
    "text": "basically says uh you're going to give",
    "start": "189959",
    "end": "191720"
  },
  {
    "text": "me a numerator and a denominator and I'm",
    "start": "191720",
    "end": "194400"
  },
  {
    "text": "going to create a fraction for you out",
    "start": "194400",
    "end": "196239"
  },
  {
    "text": "of that so this allows me to create new",
    "start": "196239",
    "end": "197920"
  },
  {
    "text": "fraction objects without the use of the",
    "start": "197920",
    "end": "199879"
  },
  {
    "text": "new keyword which is kind of nice",
    "start": "199879",
    "end": "202120"
  },
  {
    "text": "because this leads to a little bit more",
    "start": "202120",
    "end": "204000"
  },
  {
    "text": "of a readable syntax when you're",
    "start": "204000",
    "end": "205560"
  },
  {
    "text": "stringing a lot of the these things",
    "start": "205560",
    "end": "207159"
  },
  {
    "text": "together looking down here instead of",
    "start": "207159",
    "end": "209120"
  },
  {
    "text": "saying new fraction 3a4 Star new",
    "start": "209120",
    "end": "212239"
  },
  {
    "text": "fraction 2A 5 the new in that would be S",
    "start": "212239",
    "end": "215599"
  },
  {
    "text": "it's kind of visual noise you don't",
    "start": "215599",
    "end": "217120"
  },
  {
    "text": "really need it so the the apply method",
    "start": "217120",
    "end": "219519"
  },
  {
    "text": "allows us to uh to use uh to call these",
    "start": "219519",
    "end": "223239"
  },
  {
    "text": "things and create them without needing",
    "start": "223239",
    "end": "224959"
  },
  {
    "text": "the new so that's one that's one",
    "start": "224959",
    "end": "226840"
  },
  {
    "text": "advantage to this um and again this is",
    "start": "226840",
    "end": "228840"
  },
  {
    "text": "all lead into the cool feature so we're",
    "start": "228840",
    "end": "230760"
  },
  {
    "text": "not to the cool feature",
    "start": "230760",
    "end": "232400"
  },
  {
    "text": "yet where we're going with this is",
    "start": "232400",
    "end": "235040"
  },
  {
    "text": "something called unapply so just as",
    "start": "235040",
    "end": "237400"
  },
  {
    "text": "there's an apply method Scola has this",
    "start": "237400",
    "end": "240239"
  },
  {
    "text": "idea of an unapply method so think about",
    "start": "240239",
    "end": "242200"
  },
  {
    "text": "an apply method as taking a bunch of",
    "start": "242200",
    "end": "244400"
  },
  {
    "text": "discrete parameters and assembling them",
    "start": "244400",
    "end": "247079"
  },
  {
    "text": "into an object that's the typical use of",
    "start": "247079",
    "end": "248920"
  },
  {
    "text": "it so what's the reverse of that I have",
    "start": "248920",
    "end": "251120"
  },
  {
    "text": "an object and I want to disassemble that",
    "start": "251120",
    "end": "254200"
  },
  {
    "text": "object into those original discrete",
    "start": "254200",
    "end": "255920"
  },
  {
    "text": "parameters that's unapply um so for",
    "start": "255920",
    "end": "259160"
  },
  {
    "text": "instance unapply is used for what",
    "start": "259160",
    "end": "261880"
  },
  {
    "text": "scholar calls extractors and this is an",
    "start": "261880",
    "end": "264479"
  },
  {
    "text": "example of an extractor here I've got a",
    "start": "264479",
    "end": "266600"
  },
  {
    "text": "fraction 3/4s * a fraction 2 fths um and",
    "start": "266600",
    "end": "271280"
  },
  {
    "text": "I can do that because of operator",
    "start": "271280",
    "end": "272520"
  },
  {
    "text": "overloading something we're not going to",
    "start": "272520",
    "end": "274039"
  },
  {
    "text": "talk too much about right now and then",
    "start": "274039",
    "end": "276000"
  },
  {
    "text": "on this side I'm assigning it to",
    "start": "276000",
    "end": "279280"
  },
  {
    "text": "fraction ab and what Scola dgar this",
    "start": "279280",
    "end": "282680"
  },
  {
    "text": "into is basically fraction. unapply of",
    "start": "282680",
    "end": "286039"
  },
  {
    "text": "the resulting fraction and so the bottom",
    "start": "286039",
    "end": "289000"
  },
  {
    "text": "line here is that this VAR this",
    "start": "289000",
    "end": "291199"
  },
  {
    "text": "statement right here pulls out a and b",
    "start": "291199",
    "end": "294720"
  },
  {
    "text": "automatically it it extracts them right",
    "start": "294720",
    "end": "297360"
  },
  {
    "text": "out of this fraction subsequent to this",
    "start": "297360",
    "end": "300600"
  },
  {
    "text": "statement in the code I can now refer to",
    "start": "300600",
    "end": "302639"
  },
  {
    "text": "A and B without having to assign them",
    "start": "302639",
    "end": "304759"
  },
  {
    "text": "anywhere they're extracted right out of",
    "start": "304759",
    "end": "306320"
  },
  {
    "text": "the fraction into local variables where",
    "start": "306320",
    "end": "308840"
  },
  {
    "text": "this is most commonly used is in a",
    "start": "308840",
    "end": "310520"
  },
  {
    "text": "pattern match and pattern matching is",
    "start": "310520",
    "end": "312440"
  },
  {
    "text": "where we're going with this pattern",
    "start": "312440",
    "end": "314120"
  },
  {
    "text": "matching is the whole point of all of",
    "start": "314120",
    "end": "315880"
  },
  {
    "text": "this is so that we can talk about this",
    "start": "315880",
    "end": "317639"
  },
  {
    "text": "so how do I build an unapply",
    "start": "317639",
    "end": "319800"
  },
  {
    "text": "method basically this is it it goes on",
    "start": "319800",
    "end": "322720"
  },
  {
    "text": "the companion object we put defa unapply",
    "start": "322720",
    "end": "326880"
  },
  {
    "text": "and here's the input the input is a",
    "start": "326880",
    "end": "328960"
  },
  {
    "text": "fraction and this case so we're unapply",
    "start": "328960",
    "end": "330840"
  },
  {
    "text": "the fraction we're going to be taking",
    "start": "330840",
    "end": "332319"
  },
  {
    "text": "the fraction apart into its pieces now",
    "start": "332319",
    "end": "335080"
  },
  {
    "text": "in order for this to work properly we",
    "start": "335080",
    "end": "336880"
  },
  {
    "text": "have to return an indication of whether",
    "start": "336880",
    "end": "339240"
  },
  {
    "text": "or not we were able to find something to",
    "start": "339240",
    "end": "342080"
  },
  {
    "text": "extract so what we're saying here is um",
    "start": "342080",
    "end": "344960"
  },
  {
    "text": "we're going to return an option an",
    "start": "344960",
    "end": "346400"
  },
  {
    "text": "option is none meaning there's nothing",
    "start": "346400",
    "end": "348360"
  },
  {
    "text": "there or some which contains the result",
    "start": "348360",
    "end": "351720"
  },
  {
    "text": "so in this case we're returning none if",
    "start": "351720",
    "end": "353400"
  },
  {
    "text": "the denominator is zero it makes no",
    "start": "353400",
    "end": "355039"
  },
  {
    "text": "sense to pull apart a fraction if the",
    "start": "355039",
    "end": "356479"
  },
  {
    "text": "denominator is zero because that's an",
    "start": "356479",
    "end": "358240"
  },
  {
    "text": "illegal fraction you can't divide by by",
    "start": "358240",
    "end": "359840"
  },
  {
    "text": "zero so if for some reason somebody's",
    "start": "359840",
    "end": "361960"
  },
  {
    "text": "constructed a denominator of zero this",
    "start": "361960",
    "end": "364360"
  },
  {
    "text": "extractor is going to return nothing and",
    "start": "364360",
    "end": "366639"
  },
  {
    "text": "fail so we return a none otherwise we're",
    "start": "366639",
    "end": "369560"
  },
  {
    "text": "going to return the pieces in in a Scala",
    "start": "369560",
    "end": "372960"
  },
  {
    "text": "Tuple which is a readon uh heterogeneous",
    "start": "372960",
    "end": "376680"
  },
  {
    "text": "collection so here's the input numerator",
    "start": "376680",
    "end": "379199"
  },
  {
    "text": "and the input denominator collected up",
    "start": "379199",
    "end": "380840"
  },
  {
    "text": "in a tupal and then wrapped up in a sum",
    "start": "380840",
    "end": "383240"
  },
  {
    "text": "which is the opposite of a none this is",
    "start": "383240",
    "end": "385360"
  },
  {
    "text": "all you need to do to build an unapply",
    "start": "385360",
    "end": "387360"
  },
  {
    "text": "and as soon as you do that you can start",
    "start": "387360",
    "end": "389360"
  },
  {
    "text": "do pattern matching stuff on this we're",
    "start": "389360",
    "end": "391759"
  },
  {
    "text": "going to look at that in just a moment",
    "start": "391759",
    "end": "393400"
  },
  {
    "text": "so the key here to remember as we start",
    "start": "393400",
    "end": "395120"
  },
  {
    "text": "talking about pattern matching is apply",
    "start": "395120",
    "end": "398479"
  },
  {
    "text": "and unapply they are cool uh they are",
    "start": "398479",
    "end": "401639"
  },
  {
    "text": "key to doing uh pattern matching in",
    "start": "401639",
    "end": "405800"
  },
  {
    "text": "scolar all right we can have um",
    "start": "405800",
    "end": "408560"
  },
  {
    "text": "extractors with multiple arguments so",
    "start": "408560",
    "end": "411160"
  },
  {
    "text": "here's an unapply that takes an input",
    "start": "411160",
    "end": "414879"
  },
  {
    "text": "um of a string so the problem is that",
    "start": "414879",
    "end": "417400"
  },
  {
    "text": "Scala doesn't provide the ability to do",
    "start": "417400",
    "end": "420160"
  },
  {
    "text": "a one tupal it has two tupal three tupal",
    "start": "420160",
    "end": "422400"
  },
  {
    "text": "four tupal what if my extractor is only",
    "start": "422400",
    "end": "424720"
  },
  {
    "text": "extracting one thing well the answer",
    "start": "424720",
    "end": "426599"
  },
  {
    "text": "there is there's a special case don't",
    "start": "426599",
    "end": "428479"
  },
  {
    "text": "put it in a tupal here we're returning",
    "start": "428479",
    "end": "430240"
  },
  {
    "text": "an option of a single integer not an",
    "start": "430240",
    "end": "432080"
  },
  {
    "text": "option of a tuple so we're going to try",
    "start": "432080",
    "end": "434680"
  },
  {
    "text": "to unapply a number by parsing the",
    "start": "434680",
    "end": "437319"
  },
  {
    "text": "string that you give it and if that",
    "start": "437319",
    "end": "439759"
  },
  {
    "text": "fails we're going to return a none we're",
    "start": "439759",
    "end": "442000"
  },
  {
    "text": "going to catch the exception return a",
    "start": "442000",
    "end": "443440"
  },
  {
    "text": "none so in this case the sum does not",
    "start": "443440",
    "end": "445560"
  },
  {
    "text": "include a tupal the sum just includes",
    "start": "445560",
    "end": "447560"
  },
  {
    "text": "the thing that we're trying to return",
    "start": "447560",
    "end": "449280"
  },
  {
    "text": "and with this in place I can then do",
    "start": "449280",
    "end": "451080"
  },
  {
    "text": "something like",
    "start": "451080",
    "end": "452599"
  },
  {
    "text": "this okay Val number n is equal to this",
    "start": "452599",
    "end": "457440"
  },
  {
    "text": "string and N will be set to um to the",
    "start": "457440",
    "end": "462400"
  },
  {
    "text": "value of that number if the parse",
    "start": "462400",
    "end": "464080"
  },
  {
    "text": "succeeds okay and again this is just an",
    "start": "464080",
    "end": "466759"
  },
  {
    "text": "example this is not the common use case",
    "start": "466759",
    "end": "468720"
  },
  {
    "text": "of this the more common use case is",
    "start": "468720",
    "end": "470919"
  },
  {
    "text": "something like this um where you you use",
    "start": "470919",
    "end": "474560"
  },
  {
    "text": "it in a pattern match so let's keep",
    "start": "474560",
    "end": "477199"
  },
  {
    "text": "moving there's one more piece that we",
    "start": "477199",
    "end": "480080"
  },
  {
    "text": "need to look at and that's called",
    "start": "480080",
    "end": "481400"
  },
  {
    "text": "unapply seek unapply is intended to pull",
    "start": "481400",
    "end": "485680"
  },
  {
    "text": "out always the same number of things so",
    "start": "485680",
    "end": "487800"
  },
  {
    "text": "in the case of fraction we always know",
    "start": "487800",
    "end": "489400"
  },
  {
    "text": "we want to take apart a fraction into",
    "start": "489400",
    "end": "491520"
  },
  {
    "text": "two pieces the numerator and the",
    "start": "491520",
    "end": "493199"
  },
  {
    "text": "denominator but what if we want to take",
    "start": "493199",
    "end": "495199"
  },
  {
    "text": "apart something that is of indeterminate",
    "start": "495199",
    "end": "497360"
  },
  {
    "text": "length like an array or a list some kind",
    "start": "497360",
    "end": "500039"
  },
  {
    "text": "of a sequence in that case we can't use",
    "start": "500039",
    "end": "502159"
  },
  {
    "text": "an unapply because to take apart an",
    "start": "502159",
    "end": "504360"
  },
  {
    "text": "array I might be taking apart something",
    "start": "504360",
    "end": "506120"
  },
  {
    "text": "that has one element or 15 elements so",
    "start": "506120",
    "end": "508680"
  },
  {
    "text": "in that case Scola looks for something",
    "start": "508680",
    "end": "510759"
  },
  {
    "text": "called unapply seek seek being in this",
    "start": "510759",
    "end": "512919"
  },
  {
    "text": "case shorthand for sequence so we call",
    "start": "512919",
    "end": "516000"
  },
  {
    "text": "it if we do an unapply seek we provide",
    "start": "516000",
    "end": "519159"
  },
  {
    "text": "that capability then we can allow an",
    "start": "519159",
    "end": "522000"
  },
  {
    "text": "indeterminate number of matches so this",
    "start": "522000",
    "end": "524240"
  },
  {
    "text": "match down here for instance take apart",
    "start": "524240",
    "end": "526600"
  },
  {
    "text": "a name if the name contains two elements",
    "start": "526600",
    "end": "529640"
  },
  {
    "text": "a first name and a last name I want to",
    "start": "529640",
    "end": "531760"
  },
  {
    "text": "run this case match if the name contains",
    "start": "531760",
    "end": "534200"
  },
  {
    "text": "three elements of first middle and last",
    "start": "534200",
    "end": "536040"
  },
  {
    "text": "I want to run this match if if it's a",
    "start": "536040",
    "end": "538320"
  },
  {
    "text": "certain kind of Dutch name name so that",
    "start": "538320",
    "end": "540160"
  },
  {
    "text": "the first element is captured here",
    "start": "540160",
    "end": "542959"
  },
  {
    "text": "followed by the string van followed by",
    "start": "542959",
    "end": "545640"
  },
  {
    "text": "the string dur and Then followed by a",
    "start": "545640",
    "end": "547839"
  },
  {
    "text": "last name like James Van derinden or",
    "start": "547839",
    "end": "550560"
  },
  {
    "text": "something then it will match this case",
    "start": "550560",
    "end": "553000"
  },
  {
    "text": "so in this case the unapply seek allows",
    "start": "553000",
    "end": "555000"
  },
  {
    "text": "us to do an indeterminant level of",
    "start": "555000",
    "end": "557600"
  },
  {
    "text": "matching all right so that's the",
    "start": "557600",
    "end": "559760"
  },
  {
    "start": "558000",
    "end": "901000"
  },
  {
    "text": "background and with that background in",
    "start": "559760",
    "end": "561720"
  },
  {
    "text": "place now we can start to talk about",
    "start": "561720",
    "end": "564000"
  },
  {
    "text": "pattern matching so now we're to the",
    "start": "564000",
    "end": "565839"
  },
  {
    "text": "cool part pattern matching in case",
    "start": "565839",
    "end": "567760"
  },
  {
    "text": "classes pattern matching is sort of like",
    "start": "567760",
    "end": "569920"
  },
  {
    "text": "a better switch statement okay those of",
    "start": "569920",
    "end": "572399"
  },
  {
    "text": "you coming from Java or C or C++ you're",
    "start": "572399",
    "end": "574959"
  },
  {
    "text": "used to the C style switch statement",
    "start": "574959",
    "end": "577200"
  },
  {
    "text": "when you switch off of a value in those",
    "start": "577200",
    "end": "579600"
  },
  {
    "text": "languages that value has to be integral",
    "start": "579600",
    "end": "581959"
  },
  {
    "text": "it has to be a number of some kind and",
    "start": "581959",
    "end": "584399"
  },
  {
    "text": "characters count as a number there are",
    "start": "584399",
    "end": "585680"
  },
  {
    "text": "small number stored in a bite usually",
    "start": "585680",
    "end": "587519"
  },
  {
    "text": "right or in the case of java stored in a",
    "start": "587519",
    "end": "589959"
  },
  {
    "text": "16 uh bit utf-16 representation but",
    "start": "589959",
    "end": "593920"
  },
  {
    "text": "they're still integral so um you can",
    "start": "593920",
    "end": "597040"
  },
  {
    "text": "think of the pattern matching is sort of",
    "start": "597040",
    "end": "598959"
  },
  {
    "text": "like C style switch so if you look at",
    "start": "598959",
    "end": "601519"
  },
  {
    "text": "this example here this doesn't look much",
    "start": "601519",
    "end": "603480"
  },
  {
    "text": "different than a switch in Java or C or",
    "start": "603480",
    "end": "606600"
  },
  {
    "text": "C++ we got a character and if it matches",
    "start": "606600",
    "end": "610120"
  },
  {
    "text": "a plus sign then we're going to run the",
    "start": "610120",
    "end": "611920"
  },
  {
    "text": "first case if it matches a minus sign",
    "start": "611920",
    "end": "613920"
  },
  {
    "text": "we're going to run the second case if it",
    "start": "613920",
    "end": "615440"
  },
  {
    "text": "matches anything else and the underscore",
    "start": "615440",
    "end": "617480"
  },
  {
    "text": "is sort of sort of the default case then",
    "start": "617480",
    "end": "620360"
  },
  {
    "text": "you know we're going to run the last",
    "start": "620360",
    "end": "621480"
  },
  {
    "text": "case now there are a couple differences",
    "start": "621480",
    "end": "623279"
  },
  {
    "text": "here that you don't see in Java there's",
    "start": "623279",
    "end": "625680"
  },
  {
    "text": "no break statement here there's no fall",
    "start": "625680",
    "end": "628959"
  },
  {
    "text": "through",
    "start": "628959",
    "end": "630160"
  },
  {
    "text": "okay so case matches don't fall through",
    "start": "630160",
    "end": "632560"
  },
  {
    "text": "to the next one so you don't need to",
    "start": "632560",
    "end": "634079"
  },
  {
    "text": "have a break statement they don't work",
    "start": "634079",
    "end": "635800"
  },
  {
    "text": "that way when a case is match the code",
    "start": "635800",
    "end": "637959"
  },
  {
    "text": "next to that case gets run and then the",
    "start": "637959",
    "end": "639560"
  },
  {
    "text": "match is",
    "start": "639560",
    "end": "640760"
  },
  {
    "text": "done all right so um we can because this",
    "start": "640760",
    "end": "644519"
  },
  {
    "text": "is Scala and every expression in Scala",
    "start": "644519",
    "end": "646680"
  },
  {
    "text": "has a value we can take the result of",
    "start": "646680",
    "end": "648440"
  },
  {
    "text": "this match which is an expression and we",
    "start": "648440",
    "end": "651560"
  },
  {
    "text": "can assign that to um to a vow so if I",
    "start": "651560",
    "end": "655480"
  },
  {
    "text": "don't want to use like up at the top",
    "start": "655480",
    "end": "657079"
  },
  {
    "text": "here I'm actually assigning it to a VAR",
    "start": "657079",
    "end": "659399"
  },
  {
    "text": "we don't like to use vars in Scola we",
    "start": "659399",
    "end": "661120"
  },
  {
    "text": "like to use immutable variables so",
    "start": "661120",
    "end": "663320"
  },
  {
    "text": "that's okay I can just do it this way",
    "start": "663320",
    "end": "665079"
  },
  {
    "text": "run the match each case ends with an",
    "start": "665079",
    "end": "669000"
  },
  {
    "text": "expression these Expressions then",
    "start": "669000",
    "end": "671240"
  },
  {
    "text": "whichever one fires that'll be the",
    "start": "671240",
    "end": "672760"
  },
  {
    "text": "return value of the case the result of",
    "start": "672760",
    "end": "675480"
  },
  {
    "text": "the case or the match expression which",
    "start": "675480",
    "end": "677480"
  },
  {
    "text": "we can then assign to sign and we can",
    "start": "677480",
    "end": "679839"
  },
  {
    "text": "match any type okay this is the this is",
    "start": "679839",
    "end": "682160"
  },
  {
    "text": "where we start to stray away from um",
    "start": "682160",
    "end": "685040"
  },
  {
    "text": "from java we can match with any type at",
    "start": "685040",
    "end": "687399"
  },
  {
    "text": "all not just numic stuff so these this",
    "start": "687399",
    "end": "691360"
  },
  {
    "text": "is an enumerated type called color I can",
    "start": "691360",
    "end": "693680"
  },
  {
    "text": "match against the colors but even more",
    "start": "693680",
    "end": "696040"
  },
  {
    "text": "interesting I can be I can match against",
    "start": "696040",
    "end": "698880"
  },
  {
    "text": "um I can add guard",
    "start": "698880",
    "end": "701040"
  },
  {
    "text": "statements okay so typically in C if I",
    "start": "701040",
    "end": "704120"
  },
  {
    "text": "want to match all the numbers I'll have",
    "start": "704120",
    "end": "707760"
  },
  {
    "text": "multiple cases and because these cases",
    "start": "707760",
    "end": "710040"
  },
  {
    "text": "fall through if there's no break",
    "start": "710040",
    "end": "711320"
  },
  {
    "text": "statement then no matter which one gets",
    "start": "711320",
    "end": "713800"
  },
  {
    "text": "matched 0 1 2 Etc up to 9 it'll fall",
    "start": "713800",
    "end": "717120"
  },
  {
    "text": "through and run the code associated with",
    "start": "717120",
    "end": "720399"
  },
  {
    "text": "the nine because of the fall through",
    "start": "720399",
    "end": "722760"
  },
  {
    "text": "without fall through we can't do this in",
    "start": "722760",
    "end": "724680"
  },
  {
    "text": "Scola but what we can do is the",
    "start": "724680",
    "end": "726279"
  },
  {
    "text": "following down here we can say okay if",
    "start": "726279",
    "end": "729399"
  },
  {
    "text": "it matches a plus set the sign variable",
    "start": "729399",
    "end": "731959"
  },
  {
    "text": "to one if it matches a minus set the",
    "start": "731959",
    "end": "733920"
  },
  {
    "text": "sign variable to negative 1 if it's any",
    "start": "733920",
    "end": "736240"
  },
  {
    "text": "other character as long as it's a digit",
    "start": "736240",
    "end": "738240"
  },
  {
    "text": "so this is a guard condition case",
    "start": "738240",
    "end": "740240"
  },
  {
    "text": "anything but only if the character is a",
    "start": "740240",
    "end": "742440"
  },
  {
    "text": "digit run the digit code",
    "start": "742440",
    "end": "744760"
  },
  {
    "text": "otherwise and that's our otherwise at",
    "start": "744760",
    "end": "746800"
  },
  {
    "text": "the bottom so these guard conditions",
    "start": "746800",
    "end": "748760"
  },
  {
    "text": "then ow us the same flexibility with a",
    "start": "748760",
    "end": "751440"
  },
  {
    "text": "different syntax and that guard",
    "start": "751440",
    "end": "753519"
  },
  {
    "text": "condition can be any buling expression",
    "start": "753519",
    "end": "755320"
  },
  {
    "text": "at all okay now the other thing to note",
    "start": "755320",
    "end": "757639"
  },
  {
    "text": "here is that patterns are always matched",
    "start": "757639",
    "end": "759760"
  },
  {
    "text": "top to bottom so if there are two",
    "start": "759760",
    "end": "761959"
  },
  {
    "text": "patterns that happen to match the same",
    "start": "761959",
    "end": "764120"
  },
  {
    "text": "thing the first one",
    "start": "764120",
    "end": "767440"
  },
  {
    "text": "wins all right now let's let's continue",
    "start": "767800",
    "end": "770399"
  },
  {
    "text": "because this gets even more interesting",
    "start": "770399",
    "end": "772639"
  },
  {
    "text": "uh here's a case where I can actually",
    "start": "772639",
    "end": "774399"
  },
  {
    "text": "use a variable in the pattern so I can",
    "start": "774399",
    "end": "776800"
  },
  {
    "text": "say does string subi match a plus do",
    "start": "776800",
    "end": "779720"
  },
  {
    "text": "this does it match a minus do this if it",
    "start": "779720",
    "end": "782360"
  },
  {
    "text": "matches anything else though I would",
    "start": "782360",
    "end": "784199"
  },
  {
    "text": "like to capture that anything else in",
    "start": "784199",
    "end": "786800"
  },
  {
    "text": "this C variable so that I can do stuff",
    "start": "786800",
    "end": "788760"
  },
  {
    "text": "with",
    "start": "788760",
    "end": "790360"
  },
  {
    "text": "it okay this is also something that",
    "start": "790360",
    "end": "792519"
  },
  {
    "text": "cannot be done very cleanly in in Java",
    "start": "792519",
    "end": "795000"
  },
  {
    "text": "if at all all right so I can I can use",
    "start": "795000",
    "end": "798360"
  },
  {
    "text": "the variable name even in the guard I",
    "start": "798360",
    "end": "800440"
  },
  {
    "text": "can add this here if it matches anything",
    "start": "800440",
    "end": "802279"
  },
  {
    "text": "else but if that anything else is a",
    "start": "802279",
    "end": "804600"
  },
  {
    "text": "digit so now I've",
    "start": "804600",
    "end": "806920"
  },
  {
    "text": "captured that character here and I'm",
    "start": "806920",
    "end": "809199"
  },
  {
    "text": "using it in the guard",
    "start": "809199",
    "end": "811040"
  },
  {
    "text": "condition okay so there's more to this",
    "start": "811040",
    "end": "814040"
  },
  {
    "text": "though I can use this to deconstruct",
    "start": "814040",
    "end": "817399"
  },
  {
    "text": "types this is one of the cool things",
    "start": "817399",
    "end": "819240"
  },
  {
    "text": "that you can do here this is why in",
    "start": "819240",
    "end": "821040"
  },
  {
    "text": "Scala we never use the the equivalent of",
    "start": "821040",
    "end": "824199"
  },
  {
    "text": "the instance of operator that we use in",
    "start": "824199",
    "end": "827079"
  },
  {
    "text": "in Java in Scala I can just do this",
    "start": "827079",
    "end": "829800"
  },
  {
    "text": "object match all right is it an integer",
    "start": "829800",
    "end": "832639"
  },
  {
    "text": "well then capture its value in X and do",
    "start": "832639",
    "end": "834759"
  },
  {
    "text": "something with it is it a string capture",
    "start": "834759",
    "end": "836759"
  },
  {
    "text": "its value in s and do something with it",
    "start": "836759",
    "end": "839199"
  },
  {
    "text": "is it anything of that's a big integer",
    "start": "839199",
    "end": "842079"
  },
  {
    "text": "in other words if it's a big integer I",
    "start": "842079",
    "end": "844240"
  },
  {
    "text": "don't want to capture the value I just",
    "start": "844240",
    "end": "845839"
  },
  {
    "text": "want to return in. max value and if it's",
    "start": "845839",
    "end": "848399"
  },
  {
    "text": "anything else return is zero I can",
    "start": "848399",
    "end": "850519"
  },
  {
    "text": "decompose types in this patter match",
    "start": "850519",
    "end": "852519"
  },
  {
    "text": "capability this is really really useful",
    "start": "852519",
    "end": "854959"
  },
  {
    "text": "and it's a heck of a lot more readable",
    "start": "854959",
    "end": "856720"
  },
  {
    "text": "than a bunch of cascaded ifs where you",
    "start": "856720",
    "end": "858440"
  },
  {
    "text": "say hey if if OB is instance of this",
    "start": "858440",
    "end": "862360"
  },
  {
    "text": "else if OB is instance of string this",
    "start": "862360",
    "end": "865160"
  },
  {
    "text": "way you've got a nice little table that",
    "start": "865160",
    "end": "867279"
  },
  {
    "text": "decomposes it now the one thing you",
    "start": "867279",
    "end": "868680"
  },
  {
    "text": "can't do",
    "start": "868680",
    "end": "871040"
  },
  {
    "text": "is is this kind of thing you can't",
    "start": "871079",
    "end": "872959"
  },
  {
    "text": "decompose generics like this I can't say",
    "start": "872959",
    "end": "875639"
  },
  {
    "text": "hey is this thing a map of string to int",
    "start": "875639",
    "end": "879000"
  },
  {
    "text": "you can't do that that won't work",
    "start": "879000",
    "end": "881360"
  },
  {
    "text": "because of of a limitation in the jvn it",
    "start": "881360",
    "end": "884519"
  },
  {
    "text": "erases these uh generic types so you",
    "start": "884519",
    "end": "887279"
  },
  {
    "text": "don't have the option you don't have",
    "start": "887279",
    "end": "888560"
  },
  {
    "text": "this information it's just simply not",
    "start": "888560",
    "end": "890440"
  },
  {
    "text": "available this won't work but you can",
    "start": "890440",
    "end": "892399"
  },
  {
    "text": "match a map and say look I know I can't",
    "start": "892399",
    "end": "894839"
  },
  {
    "text": "look at at the map's generic types but I",
    "start": "894839",
    "end": "898000"
  },
  {
    "text": "can still match a map M so you can do",
    "start": "898000",
    "end": "901639"
  },
  {
    "start": "901000",
    "end": "929000"
  },
  {
    "text": "that it gets more interesting than that",
    "start": "901639",
    "end": "904160"
  },
  {
    "text": "though this is where we get back to our",
    "start": "904160",
    "end": "906440"
  },
  {
    "text": "extractors okay so now what we've seen",
    "start": "906440",
    "end": "908519"
  },
  {
    "text": "so far is the ability to use the match",
    "start": "908519",
    "end": "911199"
  },
  {
    "text": "capability to do standard switch style",
    "start": "911199",
    "end": "913759"
  },
  {
    "text": "stuff and we've seen that it also allows",
    "start": "913759",
    "end": "915959"
  },
  {
    "text": "us to do um reflection we can determine",
    "start": "915959",
    "end": "919120"
  },
  {
    "text": "the type of the thing that we're looking",
    "start": "919120",
    "end": "920399"
  },
  {
    "text": "at but when you throw in unapply and",
    "start": "920399",
    "end": "922720"
  },
  {
    "text": "unapply seek now you can begin to do",
    "start": "922720",
    "end": "926199"
  },
  {
    "text": "things like what we see on the screen",
    "start": "926199",
    "end": "928399"
  },
  {
    "text": "here so I have an array I want to do",
    "start": "928399",
    "end": "931519"
  },
  {
    "text": "something to this array depending on the",
    "start": "931519",
    "end": "933480"
  },
  {
    "text": "shape of the array so here we have an",
    "start": "933480",
    "end": "936000"
  },
  {
    "text": "array and we're saying hey look it the",
    "start": "936000",
    "end": "937920"
  },
  {
    "text": "first case says does this array match an",
    "start": "937920",
    "end": "941639"
  },
  {
    "text": "array with a single element that has the",
    "start": "941639",
    "end": "943920"
  },
  {
    "text": "value zero that's a very specific match",
    "start": "943920",
    "end": "947800"
  },
  {
    "text": "does it match an array that contains one",
    "start": "947800",
    "end": "949839"
  },
  {
    "text": "element and that element has the value",
    "start": "949839",
    "end": "951639"
  },
  {
    "text": "zero if so the first case fires the",
    "start": "951639",
    "end": "953959"
  },
  {
    "text": "second case fires if the array matches",
    "start": "953959",
    "end": "956120"
  },
  {
    "text": "an array with two elements so",
    "start": "956120",
    "end": "959440"
  },
  {
    "text": "case number two here array XY says that",
    "start": "959440",
    "end": "962560"
  },
  {
    "text": "will match if the array passed into the",
    "start": "962560",
    "end": "964680"
  },
  {
    "text": "match has two elements and then we'll",
    "start": "964680",
    "end": "966440"
  },
  {
    "text": "capture those two elements in X and Y we",
    "start": "966440",
    "end": "968920"
  },
  {
    "text": "will extract those two elements out of",
    "start": "968920",
    "end": "971199"
  },
  {
    "text": "the array what's happening is unapply",
    "start": "971199",
    "end": "973319"
  },
  {
    "text": "seek is being called on the array and if",
    "start": "973319",
    "end": "975480"
  },
  {
    "text": "it matches those two elements come out",
    "start": "975480",
    "end": "978440"
  },
  {
    "text": "they come out and they end up in X and Y",
    "start": "978440",
    "end": "980360"
  },
  {
    "text": "and now we can play with them the third",
    "start": "980360",
    "end": "982279"
  },
  {
    "text": "match basically says match any other",
    "start": "982279",
    "end": "984880"
  },
  {
    "text": "array with but it must start with a zero",
    "start": "984880",
    "end": "987560"
  },
  {
    "text": "and have any number of elements",
    "start": "987560",
    "end": "989000"
  },
  {
    "text": "afterwards so that unders star is sort",
    "start": "989000",
    "end": "991079"
  },
  {
    "text": "of a a magic incantation that says",
    "start": "991079",
    "end": "994040"
  },
  {
    "text": "variable number of of things",
    "start": "994040",
    "end": "996399"
  },
  {
    "text": "matching so the third case will give us",
    "start": "996399",
    "end": "998680"
  },
  {
    "text": "an array that starts with the zero but",
    "start": "998680",
    "end": "1000880"
  },
  {
    "text": "has multiple things after that and then",
    "start": "1000880",
    "end": "1003279"
  },
  {
    "text": "we've got our fall through at the bottom",
    "start": "1003279",
    "end": "1004639"
  },
  {
    "text": "the case underscore so and it's always",
    "start": "1004639",
    "end": "1007120"
  },
  {
    "text": "good to have a fall through if you don't",
    "start": "1007120",
    "end": "1008800"
  },
  {
    "text": "have a fall through you'll get a runtime",
    "start": "1008800",
    "end": "1010480"
  },
  {
    "text": "error if something doesn't match any of",
    "start": "1010480",
    "end": "1012639"
  },
  {
    "text": "the cases other things that we can do",
    "start": "1012639",
    "end": "1015519"
  },
  {
    "start": "1014000",
    "end": "1114000"
  },
  {
    "text": "are um lists have a special syntax for",
    "start": "1015519",
    "end": "1018519"
  },
  {
    "text": "extra action they use this thing called",
    "start": "1018519",
    "end": "1020600"
  },
  {
    "text": "um a consing operator but basically what",
    "start": "1020600",
    "end": "1023639"
  },
  {
    "text": "this means is I think of this as a list",
    "start": "1023639",
    "end": "1026640"
  },
  {
    "text": "Constructor nil is a special constant",
    "start": "1026640",
    "end": "1029280"
  },
  {
    "text": "that means empty list so if I'm matching",
    "start": "1029280",
    "end": "1032038"
  },
  {
    "text": "a list type I can use this operator and",
    "start": "1032039",
    "end": "1034120"
  },
  {
    "text": "I can say does it match a list that",
    "start": "1034120",
    "end": "1036520"
  },
  {
    "text": "begins with zero and has no nothing",
    "start": "1036520",
    "end": "1038798"
  },
  {
    "text": "after",
    "start": "1038799",
    "end": "1039839"
  },
  {
    "text": "it then run this does it match a list",
    "start": "1039839",
    "end": "1042918"
  },
  {
    "text": "that starts with X it's followed by Y",
    "start": "1042919",
    "end": "1045520"
  },
  {
    "text": "and Then followed by the empty list well",
    "start": "1045520",
    "end": "1047400"
  },
  {
    "text": "this is a list of two elements so want",
    "start": "1047400",
    "end": "1049000"
  },
  {
    "text": "to capture X and Y and play with them",
    "start": "1049000",
    "end": "1052120"
  },
  {
    "text": "does it match a list that starts with",
    "start": "1052120",
    "end": "1054120"
  },
  {
    "text": "zero and then has um uh a list you know",
    "start": "1054120",
    "end": "1058520"
  },
  {
    "text": "the remainder of the list after it which",
    "start": "1058520",
    "end": "1060080"
  },
  {
    "text": "I'm capturing in tail then do this",
    "start": "1060080",
    "end": "1063160"
  },
  {
    "text": "otherwise do this so this is the same",
    "start": "1063160",
    "end": "1065360"
  },
  {
    "text": "match for a list as the array match is",
    "start": "1065360",
    "end": "1067360"
  },
  {
    "text": "up at the top all right and then finally",
    "start": "1067360",
    "end": "1070080"
  },
  {
    "text": "you can even do the same deconstruction",
    "start": "1070080",
    "end": "1072120"
  },
  {
    "text": "with the tupo so let's say I have a two",
    "start": "1072120",
    "end": "1074080"
  },
  {
    "text": "tupal this may be a two Tuple of",
    "start": "1074080",
    "end": "1076960"
  },
  {
    "text": "integers here is this uh does it match a",
    "start": "1076960",
    "end": "1079880"
  },
  {
    "text": "tupal where the first element is zero",
    "start": "1079880",
    "end": "1081679"
  },
  {
    "text": "and I don't care what the second element",
    "start": "1081679",
    "end": "1083080"
  },
  {
    "text": "is yes if so run this case does it match",
    "start": "1083080",
    "end": "1087600"
  },
  {
    "text": "a case where the first element is",
    "start": "1087600",
    "end": "1089520"
  },
  {
    "text": "something which I'm going to capture in",
    "start": "1089520",
    "end": "1090919"
  },
  {
    "text": "y and the second element is a zero if so",
    "start": "1090919",
    "end": "1093760"
  },
  {
    "text": "run this case otherwise neither one is",
    "start": "1093760",
    "end": "1096360"
  },
  {
    "text": "zero run the final case okay so now",
    "start": "1096360",
    "end": "1099080"
  },
  {
    "text": "we're getting into a really powerful",
    "start": "1099080",
    "end": "1101240"
  },
  {
    "text": "abstraction you can use this for so many",
    "start": "1101240",
    "end": "1103840"
  },
  {
    "text": "different things in Scala so um we've",
    "start": "1103840",
    "end": "1107880"
  },
  {
    "text": "seen how we can use these patterns to",
    "start": "1107880",
    "end": "1109880"
  },
  {
    "text": "match arrays lists and tupal but it gets",
    "start": "1109880",
    "end": "1112799"
  },
  {
    "text": "even better than that regular",
    "start": "1112799",
    "end": "1114760"
  },
  {
    "start": "1114000",
    "end": "1201000"
  },
  {
    "text": "Expressions provide their own unapply",
    "start": "1114760",
    "end": "1116880"
  },
  {
    "text": "seeks and unapply so I can do something",
    "start": "1116880",
    "end": "1120000"
  },
  {
    "text": "like this those of you who've used",
    "start": "1120000",
    "end": "1121280"
  },
  {
    "text": "regular expressions are familiar with",
    "start": "1121280",
    "end": "1123120"
  },
  {
    "text": "this par parenthesis uh construct in",
    "start": "1123120",
    "end": "1126000"
  },
  {
    "text": "here it's a it's a matching group it",
    "start": "1126000",
    "end": "1128080"
  },
  {
    "text": "doesn't contribute to the pattern match",
    "start": "1128080",
    "end": "1129640"
  },
  {
    "text": "but it says look if this pattern matches",
    "start": "1129640",
    "end": "1133000"
  },
  {
    "text": "then extract the Matched pieces so that",
    "start": "1133000",
    "end": "1135880"
  },
  {
    "text": "I can get at them later so this says you",
    "start": "1135880",
    "end": "1138919"
  },
  {
    "text": "know if if this regular expression",
    "start": "1138919",
    "end": "1140799"
  },
  {
    "text": "starts with any number of digits",
    "start": "1140799",
    "end": "1142200"
  },
  {
    "text": "followed by a blank followed by any",
    "start": "1142200",
    "end": "1144159"
  },
  {
    "text": "number of lowercase characters U then",
    "start": "1144159",
    "end": "1147840"
  },
  {
    "text": "that the whole regular expression will",
    "start": "1147840",
    "end": "1149280"
  },
  {
    "text": "match but the digits will be captured in",
    "start": "1149280",
    "end": "1151480"
  },
  {
    "text": "group one and the uh lowercase",
    "start": "1151480",
    "end": "1154320"
  },
  {
    "text": "characters will be captured in group two",
    "start": "1154320",
    "end": "1156159"
  },
  {
    "text": "and almost every regular expression",
    "start": "1156159",
    "end": "1157400"
  },
  {
    "text": "Library out there both supports this and",
    "start": "1157400",
    "end": "1160280"
  },
  {
    "text": "then provides the ability for you after",
    "start": "1160280",
    "end": "1162080"
  },
  {
    "text": "the match to say okay give me group one",
    "start": "1162080",
    "end": "1164000"
  },
  {
    "text": "and group two but because Scala has this",
    "start": "1164000",
    "end": "1166840"
  },
  {
    "text": "unapply and unapply C and this pattern",
    "start": "1166840",
    "end": "1169480"
  },
  {
    "text": "matching capability they've implemented",
    "start": "1169480",
    "end": "1171559"
  },
  {
    "text": "the scholar regular expression class to",
    "start": "1171559",
    "end": "1173400"
  },
  {
    "text": "allow you to deconstruct it in a more",
    "start": "1173400",
    "end": "1175120"
  },
  {
    "text": "readable fashion so that I can say take",
    "start": "1175120",
    "end": "1177760"
  },
  {
    "text": "this string 99 bottles and match it",
    "start": "1177760",
    "end": "1180280"
  },
  {
    "text": "against this regular expression pattern",
    "start": "1180280",
    "end": "1182960"
  },
  {
    "text": "if it",
    "start": "1182960",
    "end": "1184000"
  },
  {
    "text": "matches then extract group one into num",
    "start": "1184000",
    "end": "1187559"
  },
  {
    "text": "and group two into",
    "start": "1187559",
    "end": "1189159"
  },
  {
    "text": "item this is much easier and much more",
    "start": "1189159",
    "end": "1192120"
  },
  {
    "text": "natural and you can see how this would",
    "start": "1192120",
    "end": "1193720"
  },
  {
    "text": "be very useful for building complicated",
    "start": "1193720",
    "end": "1196600"
  },
  {
    "text": "parsers it makes this sort of thing very",
    "start": "1196600",
    "end": "1199159"
  },
  {
    "text": "very",
    "start": "1199159",
    "end": "1201280"
  },
  {
    "start": "1201000",
    "end": "1284000"
  },
  {
    "text": "easy we can use these patterns in",
    "start": "1201280",
    "end": "1203640"
  },
  {
    "text": "variable declarations as well to",
    "start": "1203640",
    "end": "1205320"
  },
  {
    "text": "deconstruct things so I can deconstruct",
    "start": "1205320",
    "end": "1207919"
  },
  {
    "text": "a tupal into uh its constituent Elements",
    "start": "1207919",
    "end": "1211720"
  },
  {
    "text": "by just doing this kind of a simple",
    "start": "1211720",
    "end": "1213320"
  },
  {
    "text": "assignment and it's the same sort of",
    "start": "1213320",
    "end": "1215320"
  },
  {
    "text": "extraction that's going on I can also um",
    "start": "1215320",
    "end": "1218320"
  },
  {
    "text": "big int has this nice uh operator um",
    "start": "1218320",
    "end": "1221240"
  },
  {
    "text": "other languages refer to this as the div",
    "start": "1221240",
    "end": "1223039"
  },
  {
    "text": "mod operator so if you divide a big int",
    "start": "1223039",
    "end": "1225919"
  },
  {
    "text": "by 10 I'm sorry if you divide big int of",
    "start": "1225919",
    "end": "1228320"
  },
  {
    "text": "10 by three you're going to get a",
    "start": "1228320",
    "end": "1231000"
  },
  {
    "text": "quotient and a remainder well this",
    "start": "1231000",
    "end": "1233320"
  },
  {
    "text": "operator returns them both as a uh a",
    "start": "1233320",
    "end": "1235840"
  },
  {
    "text": "tupal which I can deconstruct in one",
    "start": "1235840",
    "end": "1238120"
  },
  {
    "text": "statement like this this is similar to",
    "start": "1238120",
    "end": "1240960"
  },
  {
    "text": "um you can do this in languages like",
    "start": "1240960",
    "end": "1243039"
  },
  {
    "text": "Ruby and Python and it's a very clean",
    "start": "1243039",
    "end": "1245760"
  },
  {
    "text": "and very simple and very readable syntax",
    "start": "1245760",
    "end": "1248080"
  },
  {
    "text": "unfortunately you can't do it in",
    "start": "1248080",
    "end": "1250280"
  },
  {
    "text": "Java so this also allows me to do",
    "start": "1250280",
    "end": "1252760"
  },
  {
    "text": "something like this I have an array I",
    "start": "1252760",
    "end": "1255360"
  },
  {
    "text": "don't know how long this array is but I",
    "start": "1255360",
    "end": "1257960"
  },
  {
    "text": "do know that it has at least two",
    "start": "1257960",
    "end": "1259679"
  },
  {
    "text": "elements in it and I want those two",
    "start": "1259679",
    "end": "1261280"
  },
  {
    "text": "first elements and I don't care about",
    "start": "1261280",
    "end": "1262679"
  },
  {
    "text": "the rest of the array I can use this",
    "start": "1262679",
    "end": "1264840"
  },
  {
    "text": "syntax to extract it to break that array",
    "start": "1264840",
    "end": "1267000"
  },
  {
    "text": "apart instead of subscripting into the",
    "start": "1267000",
    "end": "1269200"
  },
  {
    "text": "array and saying give me the first",
    "start": "1269200",
    "end": "1270760"
  },
  {
    "text": "element array Sub Zero and give me the",
    "start": "1270760",
    "end": "1273039"
  },
  {
    "text": "second element array sub one I can just",
    "start": "1273039",
    "end": "1274760"
  },
  {
    "text": "deconstruct it like this it's a very",
    "start": "1274760",
    "end": "1276840"
  },
  {
    "text": "clean way to pull a thing",
    "start": "1276840",
    "end": "1278880"
  },
  {
    "text": "apart okay so one one more place where",
    "start": "1278880",
    "end": "1281440"
  },
  {
    "text": "we can use pattern matching is in a for",
    "start": "1281440",
    "end": "1283799"
  },
  {
    "text": "Loop right so here's a for Loop we um if",
    "start": "1283799",
    "end": "1286520"
  },
  {
    "start": "1284000",
    "end": "1395000"
  },
  {
    "text": "you take the course with us we will",
    "start": "1286520",
    "end": "1288200"
  },
  {
    "text": "already have discussed this in great",
    "start": "1288200",
    "end": "1289799"
  },
  {
    "text": "detail so here's a case where I'm",
    "start": "1289799",
    "end": "1292080"
  },
  {
    "text": "looping over a Java system uh system",
    "start": "1292080",
    "end": "1295480"
  },
  {
    "text": "doget properties which returns of java",
    "start": "1295480",
    "end": "1297120"
  },
  {
    "text": "util properties up here this little bit",
    "start": "1297120",
    "end": "1299320"
  },
  {
    "text": "in blue is U more Scala magic that",
    "start": "1299320",
    "end": "1301919"
  },
  {
    "text": "automatically allows us basically to map",
    "start": "1301919",
    "end": "1304720"
  },
  {
    "text": "a properties object automatically into a",
    "start": "1304720",
    "end": "1306720"
  },
  {
    "text": "Scala map and then we can Loop over that",
    "start": "1306720",
    "end": "1308440"
  },
  {
    "text": "map now what is a map a map is a set of",
    "start": "1308440",
    "end": "1311159"
  },
  {
    "text": "key value pairs so when you Loop over a",
    "start": "1311159",
    "end": "1313520"
  },
  {
    "text": "map in Scala the map class just feeds",
    "start": "1313520",
    "end": "1316279"
  },
  {
    "text": "you back these key value pairs but I can",
    "start": "1316279",
    "end": "1318679"
  },
  {
    "text": "deconstruct those on the fly in the for",
    "start": "1318679",
    "end": "1320640"
  },
  {
    "text": "Loop here this is a form of the pattern",
    "start": "1320640",
    "end": "1322360"
  },
  {
    "text": "matching syntax so that I don't have to",
    "start": "1322360",
    "end": "1324520"
  },
  {
    "text": "say okay now I've got this tupal let me",
    "start": "1324520",
    "end": "1326320"
  },
  {
    "text": "take it apart it can be taken apart",
    "start": "1326320",
    "end": "1328240"
  },
  {
    "text": "right here in the for Loop this can also",
    "start": "1328240",
    "end": "1330960"
  },
  {
    "text": "be used to do pattern matching on the",
    "start": "1330960",
    "end": "1333039"
  },
  {
    "text": "fly so I can say hey Loop over these",
    "start": "1333039",
    "end": "1335840"
  },
  {
    "text": "properties as a map but only give me",
    "start": "1335840",
    "end": "1338080"
  },
  {
    "text": "keys and values where the value is the",
    "start": "1338080",
    "end": "1339720"
  },
  {
    "text": "empty string right so this is an implied",
    "start": "1339720",
    "end": "1342679"
  },
  {
    "text": "filter because of the pattern matching",
    "start": "1342679",
    "end": "1344480"
  },
  {
    "text": "here and this is exactly the same as if",
    "start": "1344480",
    "end": "1346600"
  },
  {
    "text": "I had used a guard condition in the",
    "start": "1346600",
    "end": "1348080"
  },
  {
    "text": "bottom here hey Loop over the map assign",
    "start": "1348080",
    "end": "1350120"
  },
  {
    "text": "the key to K the value to V but only if",
    "start": "1350120",
    "end": "1353760"
  },
  {
    "text": "V is equal to the empty string both of",
    "start": "1353760",
    "end": "1356000"
  },
  {
    "text": "these things are equivalent and this",
    "start": "1356000",
    "end": "1358080"
  },
  {
    "text": "first one in the middle here works",
    "start": "1358080",
    "end": "1360679"
  },
  {
    "text": "because of pattern matching so what you",
    "start": "1360679",
    "end": "1363600"
  },
  {
    "text": "should take away from this is that",
    "start": "1363600",
    "end": "1365279"
  },
  {
    "text": "pattern matching is an extremely",
    "start": "1365279",
    "end": "1367400"
  },
  {
    "text": "powerful uh feature in this language",
    "start": "1367400",
    "end": "1370440"
  },
  {
    "text": "provides you the programmer with an",
    "start": "1370440",
    "end": "1372320"
  },
  {
    "text": "amazing amount of power uh to do all",
    "start": "1372320",
    "end": "1375400"
  },
  {
    "text": "kinds of matches with a very concise and",
    "start": "1375400",
    "end": "1378600"
  },
  {
    "text": "very readable syntax and because it's",
    "start": "1378600",
    "end": "1381159"
  },
  {
    "text": "all just syntactic sugar for unapply and",
    "start": "1381159",
    "end": "1383559"
  },
  {
    "text": "unapply seek as you build out your own",
    "start": "1383559",
    "end": "1386039"
  },
  {
    "text": "classes you can build pattern matching",
    "start": "1386039",
    "end": "1388320"
  },
  {
    "text": "into them and they will automatically",
    "start": "1388320",
    "end": "1389640"
  },
  {
    "text": "work with these with these matches it's",
    "start": "1389640",
    "end": "1391799"
  },
  {
    "text": "an amazing feature and you will not find",
    "start": "1391799",
    "end": "1393840"
  },
  {
    "text": "this feature in Java for my part when I",
    "start": "1393840",
    "end": "1397000"
  },
  {
    "start": "1395000",
    "end": "1429000"
  },
  {
    "text": "have to go back and program Java I",
    "start": "1397000",
    "end": "1399000"
  },
  {
    "text": "really miss this",
    "start": "1399000",
    "end": "1400400"
  },
  {
    "text": "feature now this is just the tiniest bit",
    "start": "1400400",
    "end": "1404840"
  },
  {
    "text": "of what the the new Circle scholar",
    "start": "1404840",
    "end": "1406760"
  },
  {
    "text": "course will cover so if you want to find",
    "start": "1406760",
    "end": "1409240"
  },
  {
    "text": "more interesting cool powerful features",
    "start": "1409240",
    "end": "1411679"
  },
  {
    "text": "that this language provides check out",
    "start": "1411679",
    "end": "1413760"
  },
  {
    "text": "some of the new Circle uh Scala",
    "start": "1413760",
    "end": "1416200"
  },
  {
    "text": "offerings and that's our introduction to",
    "start": "1416200",
    "end": "1418520"
  },
  {
    "text": "pattern matching for",
    "start": "1418520",
    "end": "1421320"
  },
  {
    "text": "today",
    "start": "1428640",
    "end": "1431640"
  }
]