[
  {
    "text": "hello and welcome to the info cue podcast i'm daniel bryant news manager here at info cue and director of devrel",
    "start": "4720",
    "end": "10400"
  },
  {
    "text": "at ambassador labs in this edition of the podcast i had the pleasure of sitting down with claire ligouri principal software engineer at amazon",
    "start": "10400",
    "end": "16640"
  },
  {
    "text": "web services i followed claire's work for many years having first seen her present live at aws re invent back in",
    "start": "16640",
    "end": "21760"
  },
  {
    "text": "2017. i've recently been enjoying reading the amazon builders library article series published on the aws",
    "start": "21760",
    "end": "27760"
  },
  {
    "text": "website claire's recent article here titled automating safe hands-off deployments caught my eye the advice",
    "start": "27760",
    "end": "33600"
  },
  {
    "text": "presented was fantastic and provided insight into how aws implement continuous delivery and also provided",
    "start": "33600",
    "end": "39040"
  },
  {
    "text": "pointers for the rest of us that aren't quite operating at this scale yet i was keen to dive deeper into the topic and",
    "start": "39040",
    "end": "44079"
  },
  {
    "text": "jumped at the chance to chat with claire welcome to the info key podcast claire thanks i'm excited to be here could you",
    "start": "44079",
    "end": "49840"
  },
  {
    "text": "briefly introduce yourself for the listeners please yeah i'm claire ligouri i'm a principal engineer at aws i have",
    "start": "49840",
    "end": "56079"
  },
  {
    "text": "been at amazon web services for about six years now and currently i focus on",
    "start": "56079",
    "end": "62160"
  },
  {
    "text": "developer tooling for containers now i've seen you present many times on the stage both live and watching by video as",
    "start": "62160",
    "end": "68159"
  },
  {
    "text": "well and i've read your blog post recently that's what got me super excited about chatting to you when i read the recent aws blog posts",
    "start": "68159",
    "end": "74640"
  },
  {
    "text": "so we're going to dive into that today what do you think are the primary goals of continuous delivery i think for me",
    "start": "74640",
    "end": "81439"
  },
  {
    "text": "sort of as a continuous delivery user as a developer i think there's two things i think one is just developer productivity",
    "start": "81439",
    "end": "89119"
  },
  {
    "text": "before i came to amazon and you know in amazon's history as well we haven't always done continuous delivery but you",
    "start": "89119",
    "end": "95600"
  },
  {
    "text": "know without continuous delivery you spend so much of your time as a developer just managing deployments",
    "start": "95600",
    "end": "101840"
  },
  {
    "text": "managing builds managing all of these individual little steps that you have to do that really just take you away from",
    "start": "101840",
    "end": "109119"
  },
  {
    "text": "what i want to be doing which is writing code and then i think the other side of that is just human error that's involved",
    "start": "109119",
    "end": "116479"
  },
  {
    "text": "in doing all of these steps manually you know can really end up affecting your customers right you end up deploying the",
    "start": "116479",
    "end": "123119"
  },
  {
    "text": "wrong package accidentally or not rolling back fast enough manually",
    "start": "123119",
    "end": "128399"
  },
  {
    "text": "and so continuous delivery takes a lot of the human error and sort of the fear and the scariness for me",
    "start": "128399",
    "end": "134720"
  },
  {
    "text": "out of sending my code out to production i like that a lot i've been there running shell scripts never a good look",
    "start": "134720",
    "end": "140840"
  },
  {
    "text": "right what does a typical continuous delivery pipeline look like at amazon at a high level i like to describe it as",
    "start": "140840",
    "end": "148000"
  },
  {
    "text": "four basic stages one is going to be source that can be anything from your application source",
    "start": "148000",
    "end": "155200"
  },
  {
    "text": "code your infrastructures code patches that need to be applied to your operating system really anything that",
    "start": "155200",
    "end": "161840"
  },
  {
    "text": "you want to deploy out to production as a source and a trigger for the pipeline the next stage is going to be build so",
    "start": "161840",
    "end": "168239"
  },
  {
    "text": "compiling your search code running your unit tests and then pre-production environments where you're running all of",
    "start": "168239",
    "end": "173920"
  },
  {
    "text": "your integration tests against real running code and then finally going out",
    "start": "173920",
    "end": "179200"
  },
  {
    "text": "to production one of the things that is great about the amazon pipelines is that",
    "start": "179200",
    "end": "184239"
  },
  {
    "text": "it's very flexible for how we want to do those deployments so one of the things",
    "start": "184239",
    "end": "189599"
  },
  {
    "text": "that i talk about in the blog post is how we split up production to really",
    "start": "189599",
    "end": "194800"
  },
  {
    "text": "reduce the risk of deploying up to production and before i came to amazon",
    "start": "194800",
    "end": "200319"
  },
  {
    "text": "one of my conceptions of pipelines was that deploying to production was really sort of a script write a shell script or",
    "start": "200319",
    "end": "207840"
  },
  {
    "text": "a file that has a list of commands that need to run and deploying to production was kind of an atomic thing you have one",
    "start": "207840",
    "end": "214480"
  },
  {
    "text": "change that starts running this script and then nothing else can be deployed until that script is done and at amazon",
    "start": "214480",
    "end": "221360"
  },
  {
    "text": "we have such a large number of deployments that we split production into to reduce the risk of those",
    "start": "221360",
    "end": "227519"
  },
  {
    "text": "deployments and do very very small scope deployments out to customer workloads that it's super important that we don't",
    "start": "227519",
    "end": "234720"
  },
  {
    "text": "think of it as this atomic script it's actually more of a lot of parallel workflows going on that promote changes",
    "start": "234720",
    "end": "241680"
  },
  {
    "text": "one to the other and so production might look like literally a hundred different",
    "start": "241680",
    "end": "246799"
  },
  {
    "text": "deployments but we're not waiting for each all 100 deployments to succeed for",
    "start": "246799",
    "end": "252319"
  },
  {
    "text": "an individual change once that first deployment is done the next deployment can go in and so we can have actually",
    "start": "252319",
    "end": "258239"
  },
  {
    "text": "100 changes flowing through that pipeline through those 100 deployments so that was one of the most unique",
    "start": "258239",
    "end": "264240"
  },
  {
    "text": "things that i found in coming to amazon and learning about how we do our pipelines i like the way you sort of",
    "start": "264240",
    "end": "269280"
  },
  {
    "text": "broke down the four stages there so i'd love to go a bit deeper into each of those stages now i think many folks even if they're not operating at amazon scale",
    "start": "269280",
    "end": "275680"
  },
  {
    "text": "can definitely relate to those stages so how many pipelines does a typical service have at",
    "start": "275680",
    "end": "281759"
  },
  {
    "text": "i sort of read the blog post i know there's a few does this help with the separation of concerns as well i would",
    "start": "281759",
    "end": "286960"
  },
  {
    "text": "say the typical team has it is a lot of pipelines for a particular microservice",
    "start": "286960",
    "end": "293360"
  },
  {
    "text": "you might have multiple different pipelines that are deploying different types of changes so one type of change",
    "start": "293360",
    "end": "299919"
  },
  {
    "text": "is the application code another type of change would be maybe the infrastructure's code and any other kind",
    "start": "299919",
    "end": "307199"
  },
  {
    "text": "of changes to production like i mentioned before even patches that need to be applied to the operating system",
    "start": "307199",
    "end": "313199"
  },
  {
    "text": "some of those get combined into we have a workflow system that lets you",
    "start": "313199",
    "end": "318639"
  },
  {
    "text": "do multiple changes going out to production at the same time but the key here is really the",
    "start": "318639",
    "end": "325520"
  },
  {
    "text": "rollback behavior for us for me you know pipelines are all about helping out with human error and doing the right thing",
    "start": "325520",
    "end": "332080"
  },
  {
    "text": "before a human even gets involved and so rollbacks are super important to us and",
    "start": "332080",
    "end": "337520"
  },
  {
    "text": "with the pipelines being separated into these different types of changes it's",
    "start": "337520",
    "end": "342560"
  },
  {
    "text": "really easy to roll back just that change that was going out you made a change to just the cloud formation",
    "start": "342560",
    "end": "348160"
  },
  {
    "text": "template for your service so you can just roll back that formation template but one of the things we're starting to",
    "start": "348160",
    "end": "353840"
  },
  {
    "text": "see and why some of these pipelines are getting combined now is that application",
    "start": "353840",
    "end": "358880"
  },
  {
    "text": "code is also going out through infrastructure's code especially with things like containers with things like",
    "start": "358880",
    "end": "365120"
  },
  {
    "text": "lambda functions a lot of that is modeled in infrastructure as code as well and so the lines are starting to",
    "start": "365120",
    "end": "371919"
  },
  {
    "text": "blur between application code and infrastructure as code and so a little",
    "start": "371919",
    "end": "377199"
  },
  {
    "text": "bit we're starting to get into combining those into the same pipeline but being able to roll back sort of multiple",
    "start": "377199",
    "end": "383919"
  },
  {
    "text": "related changes so if you have a dynamodb table change and a ecs elastic",
    "start": "383919",
    "end": "390639"
  },
  {
    "text": "container service change going out at the same time the workflow will deploy them in the right order and then roll",
    "start": "390639",
    "end": "397039"
  },
  {
    "text": "them back in the right order so it becomes a lot easier to sort of reason about how are these changes flowing out",
    "start": "397039",
    "end": "403039"
  },
  {
    "text": "to production but you still get that benefit of being able to roll back automatically the whole thing without a",
    "start": "403039",
    "end": "409199"
  },
  {
    "text": "person ever having to get involved and make decisions about what that order should be you mentioned about the human",
    "start": "409199",
    "end": "415440"
  },
  {
    "text": "balance and automation how are code reviews undertaken at amazon and how do",
    "start": "415440",
    "end": "421120"
  },
  {
    "text": "you balance the automation that linting versus human intuition every change that",
    "start": "421120",
    "end": "426160"
  },
  {
    "text": "goes out to production at amazon is code reviewed and our pipelines actually",
    "start": "426160",
    "end": "432080"
  },
  {
    "text": "enforce that so they won't let a change go out to production if it somehow got pushed into a repository and has not",
    "start": "432080",
    "end": "438400"
  },
  {
    "text": "been code reviewed and i think one of the most important things about what we call full cd which is there are no human",
    "start": "438400",
    "end": "446400"
  },
  {
    "text": "interactions after that change has been pushed into the source code repository",
    "start": "446400",
    "end": "451919"
  },
  {
    "text": "before it gets deployed to production and so really the last time that you",
    "start": "451919",
    "end": "457680"
  },
  {
    "text": "have a person that's looking at a change evaluating a change is that code review",
    "start": "457680",
    "end": "462720"
  },
  {
    "text": "and so code review starts to take on multiple purposes so one is you want to",
    "start": "462720",
    "end": "468080"
  },
  {
    "text": "review it for you know just the performance aspects the correctness aspects is this code maintainable but",
    "start": "468080",
    "end": "474240"
  },
  {
    "text": "it's also about is this safe to deploy to production are we making any backwards and compatible changes that we",
    "start": "474240",
    "end": "481199"
  },
  {
    "text": "need to change those to be backward compatible or are we making any changes that we",
    "start": "481199",
    "end": "486639"
  },
  {
    "text": "think are going to be performance regressions at high scale or is it instrumented enough so that we can",
    "start": "486639",
    "end": "493199"
  },
  {
    "text": "tell when something's going wrong do we have alarms on any new metrics that are being introduced and so",
    "start": "493199",
    "end": "499840"
  },
  {
    "text": "a lot of teams that's a lot to sort of have in your mind when you're going through some of these code reviews",
    "start": "499840",
    "end": "505440"
  },
  {
    "text": "that's a lot to evaluate and so one of the things that i evangelize a bit on my",
    "start": "505440",
    "end": "510800"
  },
  {
    "text": "teams is the use of checklists in order to think through all of those aspects of",
    "start": "510800",
    "end": "517200"
  },
  {
    "text": "evaluating this code when you're looking at a code review how do you mock external services or",
    "start": "517200",
    "end": "522800"
  },
  {
    "text": "dependencies on other amazon components so this is an area which differs between",
    "start": "522800",
    "end": "528880"
  },
  {
    "text": "whether we're doing unit tests or whether we're doing integration tests typically in a unit test our builds",
    "start": "528880",
    "end": "535440"
  },
  {
    "text": "actually run in an environment that has no access to the network we want to make sure that our builds are fully",
    "start": "535440",
    "end": "542320"
  },
  {
    "text": "reproducible and so a build would not be calling out to a live service because that could change",
    "start": "542320",
    "end": "548080"
  },
  {
    "text": "the behavior of the build and all of a sudden you can end up with very flaky unit tests running in your build and so",
    "start": "548080",
    "end": "555360"
  },
  {
    "text": "in unit tests typically we would end up mocking using you know my favorites are",
    "start": "555360",
    "end": "560560"
  },
  {
    "text": "mokito for java we would end up mocking those other services you know mocking out the aws",
    "start": "560560",
    "end": "566560"
  },
  {
    "text": "sdk that we're using and making some assumptions along the way about what is the behavior going to be of that service",
    "start": "566560",
    "end": "573600"
  },
  {
    "text": "what error code are they going to return to us for a particular input or what is",
    "start": "573600",
    "end": "578959"
  },
  {
    "text": "the success code going to be when it comes back what's the response going to be and the way that i see integration tests",
    "start": "578959",
    "end": "586480"
  },
  {
    "text": "is really an opportunity to validate some of those assumptions against the real live service and so integration",
    "start": "586480",
    "end": "592880"
  },
  {
    "text": "tests almost never mock the dependency services so for calling dynamic db or s3",
    "start": "592880",
    "end": "600560"
  },
  {
    "text": "the service would actually call those production services in our pre-prod stages during integration tests and",
    "start": "600560",
    "end": "607200"
  },
  {
    "text": "really run through that actual full stack of you know getting the request",
    "start": "607200",
    "end": "612399"
  },
  {
    "text": "processing that requests storing it in the database and returning a response and so we get to validate you know what",
    "start": "612399",
    "end": "618959"
  },
  {
    "text": "is the response from dynamodb going to be for a request that comes from the integration test in a pre-prod",
    "start": "618959",
    "end": "624800"
  },
  {
    "text": "environment in your blog post you mentioned the use of alpha beta and gamma pre-production environments could you explain the",
    "start": "624800",
    "end": "631519"
  },
  {
    "text": "functionality and benefits of each of the pre-prod environments please i think looking at you know the number of",
    "start": "631519",
    "end": "637200"
  },
  {
    "text": "pre-prod environments that we have it's really about building confidence in this change before it goes to production and",
    "start": "637200",
    "end": "644240"
  },
  {
    "text": "so what we tend to see with alpha beta and gamma is more and more testing as the",
    "start": "644240",
    "end": "651360"
  },
  {
    "text": "pipeline promotes that change between environments but also how stable those environments tend to be",
    "start": "651360",
    "end": "658720"
  },
  {
    "text": "uh so you know typically that first stage in the environment it's probably not",
    "start": "658720",
    "end": "663839"
  },
  {
    "text": "going to be super stable there's it's going to be broken a lot by changes that are getting you know code reviewed but",
    "start": "663839",
    "end": "669279"
  },
  {
    "text": "missing some things and getting deployed out in the pipeline but then as we move",
    "start": "669279",
    "end": "674320"
  },
  {
    "text": "from alpha to beta beta to gamma gamma tends to be a bit more stable than alpha",
    "start": "674320",
    "end": "680000"
  },
  {
    "text": "right so alpha is typically where we would run tests that are really scoped to the",
    "start": "680000",
    "end": "686640"
  },
  {
    "text": "changes that are being deployed by that particular pipeline so what i mean by that is running some very simple maybe",
    "start": "686640",
    "end": "693120"
  },
  {
    "text": "smoke tests or synthetic traffic tests against just that micro service that was being",
    "start": "693120",
    "end": "698480"
  },
  {
    "text": "deployed by that pipeline and then as we get into beta beta starts to exercise",
    "start": "698480",
    "end": "703519"
  },
  {
    "text": "really the full stack so these systems are lots of microservices that work together to provide something like an",
    "start": "703519",
    "end": "710880"
  },
  {
    "text": "aws service and so typically beta will be an environment",
    "start": "710880",
    "end": "716079"
  },
  {
    "text": "that has all of these microservices in it within particular teams service or api space and the tests will actually",
    "start": "716079",
    "end": "724399"
  },
  {
    "text": "exercise that full stack so they'll go through the front end call those front-end apis that we're going to be",
    "start": "724399",
    "end": "730480"
  },
  {
    "text": "exposing to aws customers in production and that ends up calling all the different back-end services and going",
    "start": "730480",
    "end": "736399"
  },
  {
    "text": "through async workflows and all of that to complete those requests so the integration tests really end up showing",
    "start": "736399",
    "end": "743200"
  },
  {
    "text": "that yes with this change we haven't broken anything upstream or downstream from that particular microservice and",
    "start": "743200",
    "end": "749920"
  },
  {
    "text": "then gamma is really intended to be the most stable and is really intended to be",
    "start": "749920",
    "end": "755760"
  },
  {
    "text": "as production-like as possible so this is where we start to really test out",
    "start": "755760",
    "end": "761279"
  },
  {
    "text": "some of the deployment safety mechanisms we have in production and make sure that this",
    "start": "761279",
    "end": "766880"
  },
  {
    "text": "change is actually going to be safe to deploy to production so it goes through all the same integration tests it also",
    "start": "766880",
    "end": "773279"
  },
  {
    "text": "starts running things like monitoring canaries with synthetic traffic that we also run against production",
    "start": "773279",
    "end": "779760"
  },
  {
    "text": "it runs through all of the same things like canary deployments deploying that change out to the gamma fleet and making",
    "start": "779760",
    "end": "786399"
  },
  {
    "text": "sure that that's going to be successful we actually even alarm on it at the same thresholds as in production so we make",
    "start": "786399",
    "end": "793839"
  },
  {
    "text": "sure that that change is not going to trigger alarms in production before we actually get there which is very nice",
    "start": "793839",
    "end": "800160"
  },
  {
    "text": "you know our on-call engineers love that so we really try to make sure that you know even before that change gets to a",
    "start": "800160",
    "end": "806800"
  },
  {
    "text": "single instance or a single customer workload that we've tested it against something that's as production-like as",
    "start": "806800",
    "end": "812639"
  },
  {
    "text": "possible i think you've covered this a little bit already but i was quite keen to dive into how do engineers design and",
    "start": "812639",
    "end": "818880"
  },
  {
    "text": "build integration tests now i've often struggled with this who owns an integration test that spans more than",
    "start": "818880",
    "end": "824639"
  },
  {
    "text": "one service say so who is responsible is it the engineer making the changes perhaps the bigger team you've mentioned",
    "start": "824639",
    "end": "831040"
  },
  {
    "text": "or is there a dedicated qa function so typically within aws there are very few",
    "start": "831040",
    "end": "837040"
  },
  {
    "text": "qa groups so really we practice you know full stack ownership i would call it",
    "start": "837040",
    "end": "843519"
  },
  {
    "text": "with our engineers on our service teams that they are responsible for not only",
    "start": "843519",
    "end": "848800"
  },
  {
    "text": "writing the application code but thinking about how that change needs to be tested thinking about how that change",
    "start": "848800",
    "end": "854639"
  },
  {
    "text": "needs to be monitored in production how it needs to be deployed so they build their pipelines and then how that change",
    "start": "854639",
    "end": "862240"
  },
  {
    "text": "needs to be operated so they're also on call for that change and so integration tests are you know largely either",
    "start": "862240",
    "end": "869440"
  },
  {
    "text": "written by their peers on their team or by themselves for the changes that they're making and i think one of the",
    "start": "869440",
    "end": "875920"
  },
  {
    "text": "interesting things about integration tests in an environment like this where there's so many microservices that it is",
    "start": "875920",
    "end": "882880"
  },
  {
    "text": "very difficult to write a test that covers the entire surface area for a very complex service that might have",
    "start": "882880",
    "end": "890160"
  },
  {
    "text": "hundreds of microservices behind it one of the things that tends to happen",
    "start": "890160",
    "end": "895279"
  },
  {
    "text": "is that you write integration tests for the services really that your team owns",
    "start": "895279",
    "end": "900639"
  },
  {
    "text": "and so one of the things that becomes important is understanding really what's the interface the apis that this team",
    "start": "900639",
    "end": "907839"
  },
  {
    "text": "owns that we're going to be surfacing to other teams and making sure that we're really testing that whole interface that",
    "start": "907839",
    "end": "914399"
  },
  {
    "text": "other teams might be hooking into or customers might be calling if there are front-end apis for",
    "start": "914399",
    "end": "920399"
  },
  {
    "text": "aws customers and then making sure that we have coverage around all of those that we're not introducing changes that",
    "start": "920399",
    "end": "926800"
  },
  {
    "text": "are going to break those callers i'm really curious around backwards compatibility because that is super hard",
    "start": "926800",
    "end": "932320"
  },
  {
    "text": "again for my experience my java days as well do all services have to be backwards compatible at amazon to some",
    "start": "932320",
    "end": "938320"
  },
  {
    "text": "degree and if so how do you test for that backwards compatibility you know one of the funny things that i tend to",
    "start": "938320",
    "end": "945040"
  },
  {
    "text": "tell teams is you know diamonds are forever right we've all heard that that apis are also for effort",
    "start": "945040",
    "end": "952480"
  },
  {
    "text": "so when we release a public aws api we really stand by that for the long term",
    "start": "952480",
    "end": "958639"
  },
  {
    "text": "right we want customers to be able to confidently build applications against those apis and know that those apis are",
    "start": "958639",
    "end": "965920"
  },
  {
    "text": "going to continue working over the long term and so all of our aws apis have a long",
    "start": "965920",
    "end": "972959"
  },
  {
    "text": "history of being backward compatible but we do have to you know do testing to ensure that right and so that comes back",
    "start": "972959",
    "end": "980000"
  },
  {
    "text": "to the integration tests are really documenting and testing what is the",
    "start": "980000",
    "end": "985519"
  },
  {
    "text": "behavior that we are exposing to our customers and running through those same integration tests on every single change",
    "start": "985519",
    "end": "992480"
  },
  {
    "text": "that goes out so one question that i get a lot is do you only run tests for the apis that",
    "start": "992480",
    "end": "997920"
  },
  {
    "text": "have changed or no we always run the same full integration test suite because",
    "start": "997920",
    "end": "1003600"
  },
  {
    "text": "you never know when a change is gonna break or change the behavior of an api so",
    "start": "1003600",
    "end": "1009040"
  },
  {
    "text": "things like infrastructure as code changes could change the behavior of an api if you're changing the storage layer",
    "start": "1009040",
    "end": "1015360"
  },
  {
    "text": "or the routing layer lots of unexpected changes could end up changing the behavior of an api and so",
    "start": "1015360",
    "end": "1022079"
  },
  {
    "text": "all of these changes that are going out to production you know regardless of which pipeline it is run that same",
    "start": "1022079",
    "end": "1027360"
  },
  {
    "text": "integration test suite and then one of the things that i've noticed that helps us with backward compatibility testing",
    "start": "1027360",
    "end": "1033839"
  },
  {
    "text": "is canary deployments so deploying out to what we call one box deployments deploying out to a single virtual",
    "start": "1033839",
    "end": "1040240"
  },
  {
    "text": "machine a single ec2 instance or a single container or a little small percentage of lambda function",
    "start": "1040240",
    "end": "1046400"
  },
  {
    "text": "invocations and having that new change running really side by side with the old",
    "start": "1046400",
    "end": "1052480"
  },
  {
    "text": "change actually helps us a lot with backward compatibility because things",
    "start": "1052480",
    "end": "1057600"
  },
  {
    "text": "like if we're changing a nosql database schema for example that one is very easy",
    "start": "1057600",
    "end": "1064000"
  },
  {
    "text": "to bite you because all of a sudden you're writing this new schema that the old code can't",
    "start": "1064000",
    "end": "1069360"
  },
  {
    "text": "actually read and you definitely don't want to be in that state in production of course and so you know going back to",
    "start": "1069360",
    "end": "1076080"
  },
  {
    "text": "our gamma stages also doing canary deployments they are exercising those",
    "start": "1076080",
    "end": "1081120"
  },
  {
    "text": "both code paths old and new during that canary deployment and so we're able to",
    "start": "1081120",
    "end": "1086240"
  },
  {
    "text": "get a little bit of backward compatibility testing just through canary deployments which is fun",
    "start": "1086240",
    "end": "1091520"
  },
  {
    "text": "something you mentioned there's one box deploys i'm kind of curious do you typically perform any load testing on a",
    "start": "1091520",
    "end": "1096960"
  },
  {
    "text": "service before deploying it into prod load testing tends to be one of those things that depends on the team we give",
    "start": "1096960",
    "end": "1103520"
  },
  {
    "text": "teams a lot of freedom to do as much testing that they need to for the needs of their service so there are teams that",
    "start": "1103520",
    "end": "1111440"
  },
  {
    "text": "do load testing in the pipeline as an approval step for one of the pre-production stages so",
    "start": "1111440",
    "end": "1117760"
  },
  {
    "text": "if there are load tests that they can run that would find performance regressions at scale and things like",
    "start": "1117760",
    "end": "1123600"
  },
  {
    "text": "that some teams do that other teams find it hard to build up sufficient load in a",
    "start": "1123600",
    "end": "1130000"
  },
  {
    "text": "pre-production environment compared to the scale of some of our aws regions and our customers and so sometimes that's",
    "start": "1130000",
    "end": "1136880"
  },
  {
    "text": "not always possible sometimes it looks like you know when we're making a large architectural change doing more of a",
    "start": "1136880",
    "end": "1142640"
  },
  {
    "text": "one-off load test that really builds up the scale to what we call testing to",
    "start": "1142640",
    "end": "1148000"
  },
  {
    "text": "break in a pre-production environment where we're trying to find that next bottleneck for this architectural change",
    "start": "1148000",
    "end": "1153679"
  },
  {
    "text": "that we need to make so you know it really depends a lot of what we do at aws is really you know we give teams the",
    "start": "1153679",
    "end": "1160640"
  },
  {
    "text": "freedom since they own that full stack to make choices for their operational excellence for that but generally the",
    "start": "1160640",
    "end": "1166880"
  },
  {
    "text": "sort of minimum bar would be you know unit tests integration tests and then monitoring can areas that are running",
    "start": "1166880",
    "end": "1172720"
  },
  {
    "text": "against production do you use canary releasing and feature flagging for all production deployments",
    "start": "1172720",
    "end": "1178559"
  },
  {
    "text": "we use canary deployments fairly broadly across all of our applications so canary",
    "start": "1178559",
    "end": "1185280"
  },
  {
    "text": "deployments are interesting in that there are some changes that are just difficult to impossible to do as a",
    "start": "1185280",
    "end": "1192240"
  },
  {
    "text": "canary deployment so the example that usually comes to mind is something like a database or really any kind of",
    "start": "1192240",
    "end": "1198720"
  },
  {
    "text": "infrastructure so making a change to load balancers is a little hard to do as a canary deployment in confirmation but",
    "start": "1198720",
    "end": "1206240"
  },
  {
    "text": "generally speaking wherever we can we do canary deployments in production and the reason for that is that it limits the",
    "start": "1206240",
    "end": "1214280"
  },
  {
    "text": "potential impact of that change in production to a very very small",
    "start": "1214280",
    "end": "1219760"
  },
  {
    "text": "percentage of requests or customer workloads and then during the canary deployment once we've deployed to that",
    "start": "1219760",
    "end": "1226159"
  },
  {
    "text": "what we call one box we'll let that bake there for a little bit so one of the things that we tend to see is changes",
    "start": "1226159",
    "end": "1233520"
  },
  {
    "text": "don't always trigger alarms immediately they often will trigger alarms maybe 30",
    "start": "1233520",
    "end": "1239360"
  },
  {
    "text": "minutes after maybe an hour after and by that point you know if you're",
    "start": "1239360",
    "end": "1244400"
  },
  {
    "text": "doing a canary deployment and you deploy to this one ec2 instance that might not take very long and then you kind of",
    "start": "1244400",
    "end": "1250799"
  },
  {
    "text": "deploy it out to the rest of the production fleet pretty quickly and all of a sudden you've now rolled out this",
    "start": "1250799",
    "end": "1256480"
  },
  {
    "text": "change that is triggering alarms to a much broader percentage of your fleet and so bake time for us has been a",
    "start": "1256480",
    "end": "1262799"
  },
  {
    "text": "really important sort of enhancement on traditional canary deployments in order",
    "start": "1262799",
    "end": "1267919"
  },
  {
    "text": "to ensure that we're finding those changes before they get out to a large percentage of our production capacity",
    "start": "1267919",
    "end": "1274720"
  },
  {
    "text": "so how do you roll out a change across the entire aws estate the blog post mentioned the use of waves i think and",
    "start": "1274720",
    "end": "1281039"
  },
  {
    "text": "i'm sure i wasn't super familiar with the term and listeners may not be as well i've also got a follow-up question i guess there is that do the alert",
    "start": "1281039",
    "end": "1287520"
  },
  {
    "text": "thresholds change as more boxes azs regions come online with this new change",
    "start": "1287520",
    "end": "1294000"
  },
  {
    "text": "well rule number one in deployments in aws is that we never want to",
    "start": "1294000",
    "end": "1300400"
  },
  {
    "text": "cause a multi-region or multi-az impact from a change you know customers really",
    "start": "1300400",
    "end": "1306799"
  },
  {
    "text": "rely on that isolation between regions and so",
    "start": "1306799",
    "end": "1312000"
  },
  {
    "text": "that really drives how we think about reducing the percentage of production",
    "start": "1312000",
    "end": "1317600"
  },
  {
    "text": "capacity that we are deploying to at any one time with a new change so typically",
    "start": "1317600",
    "end": "1322799"
  },
  {
    "text": "a team will break down those production deployments into individual region deployments and",
    "start": "1322799",
    "end": "1329760"
  },
  {
    "text": "then even further into individual zonal deployments so we're never introducing a",
    "start": "1329760",
    "end": "1335600"
  },
  {
    "text": "change to a lot of regions at a time all at the beginning right",
    "start": "1335600",
    "end": "1341440"
  },
  {
    "text": "now one of the challenges is that as we've scaled we have a lot of zones we have a lot of regions",
    "start": "1341440",
    "end": "1347840"
  },
  {
    "text": "so doing those one at a time can take a long time and so we're really having to balance here the speed at which we can",
    "start": "1347840",
    "end": "1354880"
  },
  {
    "text": "deliver these changes to customers of course we want to get new features out to customers as fast as possible but",
    "start": "1354880",
    "end": "1360880"
  },
  {
    "text": "also balancing the risk of deploying very very quickly globally across all of",
    "start": "1360880",
    "end": "1366000"
  },
  {
    "text": "our regions and zones and so waves help us to balance those two things so again going",
    "start": "1366000",
    "end": "1372960"
  },
  {
    "text": "back to this idea of building confidence in a change as you start to roll it out",
    "start": "1372960",
    "end": "1378080"
  },
  {
    "text": "you start with a very very small percentage of production capacity so",
    "start": "1378080",
    "end": "1383200"
  },
  {
    "text": "initially we start with you know the one box or the canary deployment but we also start with just a single zone",
    "start": "1383200",
    "end": "1389679"
  },
  {
    "text": "out of all of the zones that we have globally and then we roll it out to the rest of that single region and then",
    "start": "1389679",
    "end": "1397039"
  },
  {
    "text": "we'll do one zone and another region and then roll it out to the rest of that region",
    "start": "1397039",
    "end": "1402159"
  },
  {
    "text": "and between those two regions that we've done independently we've built a lot of confidence in the change because that",
    "start": "1402159",
    "end": "1407440"
  },
  {
    "text": "whole time we've been monitoring for any impact any increased latency any increased error rates that we're seeing",
    "start": "1407440",
    "end": "1414080"
  },
  {
    "text": "for api requests and then we can start to parallelize a little bit more and more as we get into what we call waves",
    "start": "1414080",
    "end": "1421039"
  },
  {
    "text": "in the pipeline so we might do three regions at a time individually",
    "start": "1421039",
    "end": "1426240"
  },
  {
    "text": "picking an az from each of those regions and deploying it so that you know each",
    "start": "1426240",
    "end": "1431279"
  },
  {
    "text": "of these individual deployments is still very small scoped we do a canary deployment in each individual zone and",
    "start": "1431279",
    "end": "1438480"
  },
  {
    "text": "so we're continually looking at you know how to have small small scope deployments while being able to",
    "start": "1438480",
    "end": "1445279"
  },
  {
    "text": "parallelize some of it as we're building confidence and so by the end we might be deploying to",
    "start": "1445279",
    "end": "1450400"
  },
  {
    "text": "multiple regions at a time but we've been through this whole process of really just building that confidence and",
    "start": "1450400",
    "end": "1456080"
  },
  {
    "text": "changes i like i'm definitely getting the confidence vibe that makes a lot of sense do any humans monitor a typical rollout",
    "start": "1456080",
    "end": "1463520"
  },
  {
    "text": "not typically and that is one of my favorite things about continuous deployment at amazon",
    "start": "1463520",
    "end": "1468720"
  },
  {
    "text": "is that you know largely we kind of forget about changes once we have merged them you know merge the",
    "start": "1468720",
    "end": "1475279"
  },
  {
    "text": "plural at the beginning and so there's really no one that is you know watching these pipelines we're really letting the",
    "start": "1475279",
    "end": "1482159"
  },
  {
    "text": "pipelines do the watching for us so things like automatic monitoring by the pipelines",
    "start": "1482159",
    "end": "1488960"
  },
  {
    "text": "auto roll back by the pipelines becomes super important because there is no one sitting there waiting to click that roll",
    "start": "1488960",
    "end": "1495440"
  },
  {
    "text": "back button right and so often what we find is that when an alarm goes off and the on-call gets",
    "start": "1495440",
    "end": "1502320"
  },
  {
    "text": "engaged usually if it's a problem caused by a deployment the pipeline has already",
    "start": "1502320",
    "end": "1508320"
  },
  {
    "text": "started rolling back that change before the on-call engineers even logged in and started looking at what's going on",
    "start": "1508320",
    "end": "1514880"
  },
  {
    "text": "and so it really helps us to work on being able to have as little risk as",
    "start": "1514880",
    "end": "1520799"
  },
  {
    "text": "possible in these deployments as well because we not only scope them to be very small percentages of production",
    "start": "1520799",
    "end": "1527679"
  },
  {
    "text": "capacity but they also get rolled back really quickly you mentioned sort of pull request being the last moment where humans sort of",
    "start": "1527679",
    "end": "1534240"
  },
  {
    "text": "review do you think everyone can aspire to implementing these kind of hands-off deployments one of the important things",
    "start": "1534240",
    "end": "1541120"
  },
  {
    "text": "to remember as i talk about how we do things at amazon is that we didn't",
    "start": "1541120",
    "end": "1546640"
  },
  {
    "text": "always have all of this built into our pipelines this has been a pretty long",
    "start": "1546640",
    "end": "1552240"
  },
  {
    "text": "journey for us and one of the things that we've done over time and we've sort of arrived at",
    "start": "1552240",
    "end": "1558080"
  },
  {
    "text": "this kind of complex complex pipelines when you look at them is that it's been an iteration over many",
    "start": "1558080",
    "end": "1564640"
  },
  {
    "text": "years of learning about what changes are going out what changes have caused",
    "start": "1564640",
    "end": "1571360"
  },
  {
    "text": "impact in production and how could we have prevented that and so that's led to",
    "start": "1571360",
    "end": "1577200"
  },
  {
    "text": "sort of our discovery of canary deployments looking at how do we also do canary",
    "start": "1577200",
    "end": "1583039"
  },
  {
    "text": "deployments in pre-production how can we find these problems before customers do",
    "start": "1583039",
    "end": "1588640"
  },
  {
    "text": "and so monitoring can aries help us to exercise all of those code paths hopefully before customers do yeah yes",
    "start": "1588640",
    "end": "1596000"
  },
  {
    "text": "and so i think these are achievable really by anyone but i think it's important to you know start small and",
    "start": "1596000",
    "end": "1601919"
  },
  {
    "text": "start to look at what are the biggest risks to production deployments for you and how can you reduce that risk over",
    "start": "1601919",
    "end": "1609120"
  },
  {
    "text": "time yeah and that sort of perfectly leads on to my next question because it can seem when folks look at you know companies",
    "start": "1609120",
    "end": "1615200"
  },
  {
    "text": "like amazon it can seem quite a jump and how would you recommend or have you got any advice for developers in building",
    "start": "1615200",
    "end": "1620960"
  },
  {
    "text": "trust in their pipelines one of the things that we do naturally see at amazon in new teams is kind of a",
    "start": "1620960",
    "end": "1628480"
  },
  {
    "text": "distrust of the pipeline but it's interesting it's also sort of a distrust",
    "start": "1628480",
    "end": "1633840"
  },
  {
    "text": "in their own tests their own alarms and things like that when you build a brand new service you know you're always",
    "start": "1633840",
    "end": "1640559"
  },
  {
    "text": "worried is the pager not going off because the service is doing well or is the paper not going off because i'm",
    "start": "1640559",
    "end": "1646320"
  },
  {
    "text": "missing an alarm somewhere that i should have enabled and so one of the things",
    "start": "1646320",
    "end": "1651679"
  },
  {
    "text": "that's pretty common you know when we're building a brand new service is to actually add what we call manual",
    "start": "1651679",
    "end": "1657520"
  },
  {
    "text": "approval steps the pipeline to begin with so you know just like you build confidence and changes that are going",
    "start": "1657520",
    "end": "1663120"
  },
  {
    "text": "out to production you also need to build confidence in your own tests your own alarms your own pipeline approval steps",
    "start": "1663120",
    "end": "1670480"
  },
  {
    "text": "and so just putting that manual approval and having someone watch the pipeline for a while and see what are those",
    "start": "1670480",
    "end": "1677520"
  },
  {
    "text": "changes that are going out are they causing impact to production looking weekly at what do the metrics",
    "start": "1677520",
    "end": "1683600"
  },
  {
    "text": "look like and should we have alarmed on any of these spikes that are happening in the metrics weekly so really",
    "start": "1683600",
    "end": "1689919"
  },
  {
    "text": "validating for yourself what is the pipeline looking at and what i've made them the same choice really in deploying",
    "start": "1689919",
    "end": "1696159"
  },
  {
    "text": "to production can help to build that confidence in a new pipeline or a new service and then over time being able to",
    "start": "1696159",
    "end": "1703440"
  },
  {
    "text": "remove that once you feel like you have sufficient test coverage you have sufficient monitoring coverage that",
    "start": "1703440",
    "end": "1709520"
  },
  {
    "text": "you're not as a person adding value by sitting there watching the deployment happening",
    "start": "1709520",
    "end": "1715039"
  },
  {
    "text": "would you recommend that all folks move towards trying to build pipelines as code one of the things that i really",
    "start": "1715039",
    "end": "1721600"
  },
  {
    "text": "like about pipelines is code is that similar to any kind of code review it really drives",
    "start": "1721600",
    "end": "1728799"
  },
  {
    "text": "a conversation about is this the right change so as you're building up that pipeline you can very naturally have",
    "start": "1728799",
    "end": "1735520"
  },
  {
    "text": "conversations in a code review if it's pipelines as code about how you want to design your team's pipelines and whether",
    "start": "1735520",
    "end": "1742720"
  },
  {
    "text": "it meets the bar for removing that manual approval step after launching that service or whether we're running",
    "start": "1742720",
    "end": "1749440"
  },
  {
    "text": "the right set of tests things like that one of the things that i did find when",
    "start": "1749440",
    "end": "1754480"
  },
  {
    "text": "joining amazon and starting to build out a lot of these pipelines is also that it's very easy to forget some of these",
    "start": "1754480",
    "end": "1760799"
  },
  {
    "text": "steps there are a lot of steps in the pipeline there's a lot of pre-production environments a lot of integration test",
    "start": "1760799",
    "end": "1766480"
  },
  {
    "text": "steps you know across all of our regions and zones there's a lot of deployments going on and so as the pipeline just",
    "start": "1766480",
    "end": "1774000"
  },
  {
    "text": "gets more and more complex you just want to click less buttons right in order to set these up and to have consistency",
    "start": "1774000",
    "end": "1780880"
  },
  {
    "text": "across your pipeline so if you've got you know 10 different micro services that your team owns you want those to be",
    "start": "1780880",
    "end": "1786000"
  },
  {
    "text": "consistent and so pipelines is code especially with tools like the aws cloud development kit",
    "start": "1786000",
    "end": "1792799"
  },
  {
    "text": "where you get to use your favorite programming language and you get to use object-oriented design and inheritance",
    "start": "1792799",
    "end": "1798480"
  },
  {
    "text": "what's really common is to set up a base class that represents this is how our team sets up pipelines these are the",
    "start": "1798480",
    "end": "1804960"
  },
  {
    "text": "steps that we run in the pipeline because we're running the same integration tests and all of these pipelines across that full stack",
    "start": "1804960",
    "end": "1811520"
  },
  {
    "text": "and so that really helps to achieve some consistency across our team's pipelines",
    "start": "1811520",
    "end": "1817039"
  },
  {
    "text": "which has been super helpful and a lot less painful than clicking all the buttons and trying to look at the pipelines to see if they're consistent",
    "start": "1817039",
    "end": "1824000"
  },
  {
    "text": "excellent yeah i definitely like clicking buttons i've been there for sure maybe it's a bit of a meta question a",
    "start": "1824000",
    "end": "1829200"
  },
  {
    "text": "bigger question there's a final question but do you have any advice for how listeners should approach migrating to",
    "start": "1829200",
    "end": "1834559"
  },
  {
    "text": "continuous delivery continuous deployment if they're kind of coming from a place now where they're literally clicking the buttons and you know that's",
    "start": "1834559",
    "end": "1841360"
  },
  {
    "text": "working but it's painful any guidance on how to make the iterative jumps towards",
    "start": "1841360",
    "end": "1846640"
  },
  {
    "text": "full continuous delivery i think again start small and i think you can break up",
    "start": "1846640",
    "end": "1851679"
  },
  {
    "text": "pipelines into you know a lot of different steps we have this sort of full continuous delivery across source",
    "start": "1851679",
    "end": "1859039"
  },
  {
    "text": "build test and production and what i see with even some aws",
    "start": "1859039",
    "end": "1864240"
  },
  {
    "text": "customers is kind of tackling a few of those steps at a time it might just be",
    "start": "1864240",
    "end": "1870080"
  },
  {
    "text": "you know continuous integration to start consistently building a docker image",
    "start": "1870080",
    "end": "1875200"
  },
  {
    "text": "when someone pushes something to the main branch or it might be consistently deploying out to a test environment and",
    "start": "1875200",
    "end": "1882480"
  },
  {
    "text": "running integration tests and getting a little confidence in your tests and you know working on test flakiness and",
    "start": "1882480",
    "end": "1888399"
  },
  {
    "text": "things like that and working on test coverage and then you know getting to iterating further to production and",
    "start": "1888399",
    "end": "1894960"
  },
  {
    "text": "starting to think about you know how do you make these production deployments smaller scoped and reliable and",
    "start": "1894960",
    "end": "1901360"
  },
  {
    "text": "monitored and auto roll back but i think it's important to start small and to start with small steps because it really",
    "start": "1901360",
    "end": "1907519"
  },
  {
    "text": "is an iterative process it's been an iterative process for amazon and something that we continue to look at we",
    "start": "1907519",
    "end": "1913200"
  },
  {
    "text": "continue to look kind of across aws and look for any kind of customer impact",
    "start": "1913200",
    "end": "1918559"
  },
  {
    "text": "that's been caused by a deployment what was the root cause and how could we have prevented it and we think about you",
    "start": "1918559",
    "end": "1924720"
  },
  {
    "text": "know new solutions that we could add to our pipelines and roll out across aws and so we're continuing to iterate on",
    "start": "1924720",
    "end": "1931279"
  },
  {
    "text": "our pipelines i think they're definitely not done yet as we learn at higher and higher scale how to prevent impact and",
    "start": "1931279",
    "end": "1937279"
  },
  {
    "text": "reduce the risk of impact that's great many of us look up to amazon it's nice to hear you're still learning too right",
    "start": "1937279",
    "end": "1942559"
  },
  {
    "text": "because that gives us confidence that we can get there which is great yeah absolutely so if listeners want to reach",
    "start": "1942559",
    "end": "1948000"
  },
  {
    "text": "out to you claire where can they find you online i'm totally happy to answer any questions on twitter my handle is",
    "start": "1948000",
    "end": "1954279"
  },
  {
    "text": "clear.ligouri or sorry claire underscore legori on twitter so totally happy to",
    "start": "1954279",
    "end": "1960159"
  },
  {
    "text": "answer any questions about how we do pipelines at amazon awesome well thanks for your time today thank you",
    "start": "1960159",
    "end": "1967880"
  },
  {
    "text": "[Music]",
    "start": "1971270",
    "end": "1987260"
  },
  {
    "text": "you",
    "start": "1987519",
    "end": "1989600"
  }
]