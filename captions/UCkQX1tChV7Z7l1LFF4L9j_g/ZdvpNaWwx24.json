[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "[Music]",
    "start": "1990",
    "end": "17240"
  },
  {
    "text": "so I don't know maybe this was uh one of",
    "start": "17240",
    "end": "18680"
  },
  {
    "text": "you Jokers but just recently someone",
    "start": "18680",
    "end": "21000"
  },
  {
    "text": "emailed me and said that they uh they",
    "start": "21000",
    "end": "22920"
  },
  {
    "text": "love some of my screencast and stuff at",
    "start": "22920",
    "end": "24880"
  },
  {
    "text": "least they thought they did and then",
    "start": "24880",
    "end": "26720"
  },
  {
    "text": "they noticed that I use the word",
    "start": "26720",
    "end": "27760"
  },
  {
    "text": "basically all the time and now they",
    "start": "27760",
    "end": "29519"
  },
  {
    "text": "can't watch anything that I say so I",
    "start": "29519",
    "end": "31519"
  },
  {
    "text": "basically just feel like basically all",
    "start": "31519",
    "end": "32800"
  },
  {
    "text": "the time I say nothing but basically I'm",
    "start": "32800",
    "end": "34079"
  },
  {
    "text": "incredibly self-conscious about",
    "start": "34079",
    "end": "37160"
  },
  {
    "text": "it yeah if you want to ring a little",
    "start": "37320",
    "end": "39160"
  },
  {
    "text": "bell every time I say basically",
    "start": "39160",
    "end": "41160"
  },
  {
    "text": "apparently this is a",
    "start": "41160",
    "end": "42920"
  },
  {
    "text": "problem yeah yeah yeah cool there we go",
    "start": "42920",
    "end": "47360"
  },
  {
    "text": "a Yeah so basically the talk tonight is",
    "start": "47360",
    "end": "49680"
  },
  {
    "text": "about",
    "start": "49680",
    "end": "50480"
  },
  {
    "text": "descriptors um starting with me so I'm",
    "start": "50480",
    "end": "52719"
  },
  {
    "text": "siman Franklin and uh what high said the",
    "start": "52719",
    "end": "56000"
  },
  {
    "text": "sky which is about right actually you're",
    "start": "56000",
    "end": "58239"
  },
  {
    "text": "a humble co-organizer I currently work",
    "start": "58239",
    "end": "59640"
  },
  {
    "text": "for Twitter a technical instructor I",
    "start": "59640",
    "end": "61239"
  },
  {
    "text": "teach Python and like some other stuff",
    "start": "61239",
    "end": "62680"
  },
  {
    "text": "to people at uh at Twitter you can",
    "start": "62680",
    "end": "64518"
  },
  {
    "text": "follow me on Twitter or find my personal",
    "start": "64519",
    "end": "66400"
  },
  {
    "text": "page semf franklin.com",
    "start": "66400",
    "end": "68720"
  },
  {
    "text": "um so I don't know maybe this would have",
    "start": "68720",
    "end": "70799"
  },
  {
    "start": "69000",
    "end": "69000"
  },
  {
    "text": "been a better title what are descriptors",
    "start": "70799",
    "end": "72000"
  },
  {
    "text": "and why do I care so kind of the idea",
    "start": "72000",
    "end": "74240"
  },
  {
    "text": "with the talk tonight is descriptores",
    "start": "74240",
    "end": "76439"
  },
  {
    "text": "give us a powerful interface to write um",
    "start": "76439",
    "end": "79520"
  },
  {
    "text": "reusable code that can be shared between",
    "start": "79520",
    "end": "81680"
  },
  {
    "text": "classes totally not in an inheritance",
    "start": "81680",
    "end": "83640"
  },
  {
    "text": "sense we we'll see what that means uh",
    "start": "83640",
    "end": "85720"
  },
  {
    "text": "just if you're working with object",
    "start": "85720",
    "end": "86920"
  },
  {
    "text": "oriented python code you need to",
    "start": "86920",
    "end": "88560"
  },
  {
    "text": "understand how descriptors work even if",
    "start": "88560",
    "end": "90520"
  },
  {
    "text": "you're not going to write any yourself",
    "start": "90520",
    "end": "91680"
  },
  {
    "text": "and it might turn out uh that it's",
    "start": "91680",
    "end": "93600"
  },
  {
    "text": "useful for you to write some descript",
    "start": "93600",
    "end": "95399"
  },
  {
    "text": "yourself so we're going to try and talk",
    "start": "95399",
    "end": "96640"
  },
  {
    "text": "through some implementation patterns and",
    "start": "96640",
    "end": "98680"
  },
  {
    "text": "anti-patterns and some use cases as well",
    "start": "98680",
    "end": "101119"
  },
  {
    "text": "as explain again you know what what the",
    "start": "101119",
    "end": "102880"
  },
  {
    "text": "heck descriptors are in the first place",
    "start": "102880",
    "end": "104439"
  },
  {
    "text": "so um cool we we'll do some descriptor",
    "start": "104439",
    "end": "106799"
  },
  {
    "start": "105000",
    "end": "105000"
  },
  {
    "text": "magic here in just a little bit but it's",
    "start": "106799",
    "end": "109960"
  },
  {
    "text": "going to take me a little bit to get to",
    "start": "109960",
    "end": "111439"
  },
  {
    "text": "the scriptors got just a bit of",
    "start": "111439",
    "end": "113000"
  },
  {
    "text": "background knowledge to review first",
    "start": "113000",
    "end": "114520"
  },
  {
    "text": "there's going to be like lots of details",
    "start": "114520",
    "end": "117039"
  },
  {
    "text": "um listening to Jess like trying to pay",
    "start": "117039",
    "end": "119119"
  },
  {
    "text": "attention when it gets detailed I'll try",
    "start": "119119",
    "end": "121240"
  },
  {
    "text": "to go slow with details you know I'm",
    "start": "121240",
    "end": "122880"
  },
  {
    "text": "having trouble um following meta classes",
    "start": "122880",
    "end": "125439"
  },
  {
    "text": "I think this is this this might be",
    "start": "125439",
    "end": "126680"
  },
  {
    "text": "easier um but it's it's worthwhile",
    "start": "126680",
    "end": "128599"
  },
  {
    "text": "knowledge is power so let's let's gain a",
    "start": "128599",
    "end": "130080"
  },
  {
    "text": "little bit of power um everybody knows",
    "start": "130080",
    "end": "132200"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "about simple classes and objects right",
    "start": "132200",
    "end": "135239"
  },
  {
    "text": "you make a class it's got some",
    "start": "135239",
    "end": "136920"
  },
  {
    "text": "attributes it's got some functions um",
    "start": "136920",
    "end": "139760"
  },
  {
    "text": "this particular thing is kind of",
    "start": "139760",
    "end": "141480"
  },
  {
    "text": "interesting it's got class attributes",
    "start": "141480",
    "end": "144200"
  },
  {
    "text": "and object attributes and everybody's",
    "start": "144200",
    "end": "145959"
  },
  {
    "text": "okay with that I Can Make an instance of",
    "start": "145959",
    "end": "148120"
  },
  {
    "text": "my class and I can refer to an attribute",
    "start": "148120",
    "end": "150200"
  },
  {
    "text": "called Pi there on line n hm what what",
    "start": "150200",
    "end": "154599"
  },
  {
    "text": "exactly is that so when you access an",
    "start": "154599",
    "end": "158239"
  },
  {
    "start": "157000",
    "end": "157000"
  },
  {
    "text": "attribute of an object so basically just",
    "start": "158239",
    "end": "160159"
  },
  {
    "text": "say you know like object. what what goes",
    "start": "160159",
    "end": "162440"
  },
  {
    "text": "on exactly so the first thing you get",
    "start": "162440",
    "end": "165040"
  },
  {
    "text": "back is something stored in the objects",
    "start": "165040",
    "end": "167400"
  },
  {
    "text": "uncore uncore dict property right",
    "start": "167400",
    "end": "169120"
  },
  {
    "text": "everybody knows that it's just object",
    "start": "169120",
    "end": "171200"
  },
  {
    "text": "attribute access is like syntactic sugar",
    "start": "171200",
    "end": "173120"
  },
  {
    "text": "for for dictionaries more or",
    "start": "173120",
    "end": "176800"
  },
  {
    "text": "less but of course if you reference an",
    "start": "176800",
    "end": "179840"
  },
  {
    "text": "attribute that doesn't exist on the",
    "start": "179840",
    "end": "181080"
  },
  {
    "text": "object then you fall back to looking in",
    "start": "181080",
    "end": "182879"
  },
  {
    "text": "the classes underscore uncore dict",
    "start": "182879",
    "end": "185400"
  },
  {
    "text": "property which is also like a dictionary",
    "start": "185400",
    "end": "187840"
  },
  {
    "text": "like like thing in this case so you can",
    "start": "187840",
    "end": "189840"
  },
  {
    "text": "say my circle Pi that's not on the",
    "start": "189840",
    "end": "191400"
  },
  {
    "text": "object so it looks in the class so",
    "start": "191400",
    "end": "193920"
  },
  {
    "text": "everybody's there three simple rules for",
    "start": "193920",
    "end": "196000"
  },
  {
    "text": "understanding attribute access you say",
    "start": "196000",
    "end": "197519"
  },
  {
    "text": "object. FU and that means you're getting",
    "start": "197519",
    "end": "199840"
  },
  {
    "text": "the foo key out of the dict on the",
    "start": "199840",
    "end": "201959"
  },
  {
    "text": "object or you're getting the fuk key out",
    "start": "201959",
    "end": "205040"
  },
  {
    "text": "of the dict on the type of the object I",
    "start": "205040",
    "end": "208280"
  },
  {
    "text": "the class the object or if you assign to",
    "start": "208280",
    "end": "209920"
  },
  {
    "text": "it you're just creating it in the",
    "start": "209920",
    "end": "211239"
  },
  {
    "text": "dictionary okay so three Simple Rules",
    "start": "211239",
    "end": "214040"
  },
  {
    "text": "attribute access really really simple",
    "start": "214040",
    "end": "215760"
  },
  {
    "text": "really easy really",
    "start": "215760",
    "end": "218159"
  },
  {
    "text": "uncomplicated um throw inheritance into",
    "start": "218159",
    "end": "220400"
  },
  {
    "start": "219000",
    "end": "219000"
  },
  {
    "text": "the mix just to make sure we account for",
    "start": "220400",
    "end": "221840"
  },
  {
    "text": "that so you have um method resolution",
    "start": "221840",
    "end": "224400"
  },
  {
    "text": "order Class B inherits from class A I",
    "start": "224400",
    "end": "226480"
  },
  {
    "text": "got a couple classes here and you can",
    "start": "226480",
    "end": "228480"
  },
  {
    "text": "say um you make a you make an object and",
    "start": "228480",
    "end": "231319"
  },
  {
    "text": "you can reference like the copyright",
    "start": "231319",
    "end": "232879"
  },
  {
    "text": "attribute and it looks through the the",
    "start": "232879",
    "end": "234760"
  },
  {
    "text": "mro the method resolution order um is it",
    "start": "234760",
    "end": "237040"
  },
  {
    "text": "on the object is it on the class is it",
    "start": "237040",
    "end": "239840"
  },
  {
    "text": "on all the classes listed in the mro The",
    "start": "239840",
    "end": "241640"
  },
  {
    "text": "Inheritance chain okay so it it actually",
    "start": "241640",
    "end": "244280"
  },
  {
    "text": "should be four rules look in object in",
    "start": "244280",
    "end": "248319"
  },
  {
    "text": "the classic look through all the classes",
    "start": "248319",
    "end": "251439"
  },
  {
    "text": "in the mro oh yeah and if you assign to",
    "start": "251439",
    "end": "253599"
  },
  {
    "text": "it just create something on the object",
    "start": "253599",
    "end": "256040"
  },
  {
    "text": "okay so basic python knowledge",
    "start": "256040",
    "end": "257400"
  },
  {
    "text": "everybody's with me so",
    "start": "257400",
    "end": "260720"
  },
  {
    "text": "far one more thing here before we get to",
    "start": "261040",
    "end": "263280"
  },
  {
    "text": "descriptor sometimes just simple",
    "start": "263280",
    "end": "265080"
  },
  {
    "text": "attributes aren't enough we need",
    "start": "265080",
    "end": "267160"
  },
  {
    "text": "something uh a little bit more powerful",
    "start": "267160",
    "end": "269680"
  },
  {
    "text": "so uh you know here's a classic",
    "start": "269680",
    "end": "271600"
  },
  {
    "text": "object-oriented programming mistake I",
    "start": "271600",
    "end": "273000"
  },
  {
    "text": "have this class called Circle you call",
    "start": "273000",
    "end": "274520"
  },
  {
    "text": "the Constructor you pass it a radius oh",
    "start": "274520",
    "end": "276120"
  },
  {
    "text": "and sometimes people want the",
    "start": "276120",
    "end": "277240"
  },
  {
    "text": "circumference so I'm going to calculate",
    "start": "277240",
    "end": "278560"
  },
  {
    "text": "that in my uh in my Constructor there on",
    "start": "278560",
    "end": "280759"
  },
  {
    "text": "line five and store it and I now have a",
    "start": "280759",
    "end": "283080"
  },
  {
    "text": "broken class right you can change the",
    "start": "283080",
    "end": "284280"
  },
  {
    "text": "radius and the circumference doesn't",
    "start": "284280",
    "end": "285680"
  },
  {
    "text": "change",
    "start": "285680",
    "end": "287440"
  },
  {
    "text": "so yeah I'm I'm stealing from Raymond",
    "start": "287440",
    "end": "289840"
  },
  {
    "text": "head and Jerry going go watch his Pyon",
    "start": "289840",
    "end": "291320"
  },
  {
    "text": "talk and he's got circles and explains",
    "start": "291320",
    "end": "293520"
  },
  {
    "text": "this stuff but you know steal from the",
    "start": "293520",
    "end": "294840"
  },
  {
    "text": "best so everybody knows how to fix this",
    "start": "294840",
    "end": "297320"
  },
  {
    "start": "296000",
    "end": "296000"
  },
  {
    "text": "particular problem right it's it's it's",
    "start": "297320",
    "end": "299000"
  },
  {
    "text": "really beautiful in Python you say at",
    "start": "299000",
    "end": "300800"
  },
  {
    "text": "property that's a decorator you write a",
    "start": "300800",
    "end": "303160"
  },
  {
    "text": "function that has the name of the",
    "start": "303160",
    "end": "304759"
  },
  {
    "text": "attribute you want to intercept and hey",
    "start": "304759",
    "end": "307400"
  },
  {
    "text": "it's it's a getter right it's a",
    "start": "307400",
    "end": "309520"
  },
  {
    "text": "calculated property it still looks like",
    "start": "309520",
    "end": "312120"
  },
  {
    "text": "you're referencing an attribute you can",
    "start": "312120",
    "end": "313880"
  },
  {
    "text": "say my circle. radius is equal to three",
    "start": "313880",
    "end": "316680"
  },
  {
    "text": "and my circle. circumference it looks",
    "start": "316680",
    "end": "318360"
  },
  {
    "text": "like it's an attribute but really",
    "start": "318360",
    "end": "319919"
  },
  {
    "text": "there's like there's a function call you",
    "start": "319919",
    "end": "321319"
  },
  {
    "text": "know kind of hidden there so we added",
    "start": "321319",
    "end": "323520"
  },
  {
    "text": "together but we didn't have to change",
    "start": "323520",
    "end": "325280"
  },
  {
    "text": "the API of our class at all cool",
    "start": "325280",
    "end": "327319"
  },
  {
    "text": "powerful feature we like uh we like",
    "start": "327319",
    "end": "329520"
  },
  {
    "text": "proper I love getting people uh who",
    "start": "329520",
    "end": "331440"
  },
  {
    "text": "write Java and showing them properties",
    "start": "331440",
    "end": "333720"
  },
  {
    "text": "and they're really happy because you",
    "start": "333720",
    "end": "334560"
  },
  {
    "text": "don't have to write all your ghs and",
    "start": "334560",
    "end": "335479"
  },
  {
    "text": "Setters up front you can add them later",
    "start": "335479",
    "end": "336720"
  },
  {
    "text": "on when when you need them so property",
    "start": "336720",
    "end": "338800"
  },
  {
    "text": "is property is cool we like",
    "start": "338800",
    "end": "341319"
  },
  {
    "text": "property have you ever wondered how the",
    "start": "341319",
    "end": "343880"
  },
  {
    "text": "app property decorator",
    "start": "343880",
    "end": "346720"
  },
  {
    "text": "works and is it actually always the",
    "start": "346720",
    "end": "349360"
  },
  {
    "text": "right tool for the",
    "start": "349360",
    "end": "351360"
  },
  {
    "text": "job so just review our attribute access",
    "start": "351360",
    "end": "354720"
  },
  {
    "text": "rules which are growing slightly",
    "start": "354720",
    "end": "358479"
  },
  {
    "text": "okay six simple rules if you say object.",
    "start": "358479",
    "end": "362000"
  },
  {
    "text": "FU you get the result of the property if",
    "start": "362000",
    "end": "365479"
  },
  {
    "text": "it's defined and I don't really know",
    "start": "365479",
    "end": "367039"
  },
  {
    "text": "what that",
    "start": "367039",
    "end": "367960"
  },
  {
    "text": "means or the value in the object",
    "start": "367960",
    "end": "370080"
  },
  {
    "text": "dictionary or the value in the class or",
    "start": "370080",
    "end": "371479"
  },
  {
    "text": "the value in the inherited classes until",
    "start": "371479",
    "end": "373639"
  },
  {
    "text": "you find a match looking through the mro",
    "start": "373639",
    "end": "375360"
  },
  {
    "text": "accounting for inheritance there and you",
    "start": "375360",
    "end": "377319"
  },
  {
    "text": "always assignment always creates a new",
    "start": "377319",
    "end": "379000"
  },
  {
    "text": "entry in the dict unless there was a",
    "start": "379000",
    "end": "381520"
  },
  {
    "text": "Setter property and we can do both",
    "start": "381520",
    "end": "382919"
  },
  {
    "text": "Getters and Setters with that at",
    "start": "382919",
    "end": "384240"
  },
  {
    "text": "property thing so our rules got slightly",
    "start": "384240",
    "end": "386199"
  },
  {
    "text": "more complicated but everything we know",
    "start": "386199",
    "end": "388000"
  },
  {
    "text": "so far",
    "start": "388000",
    "end": "390160"
  },
  {
    "text": "that rule number one is actually this",
    "start": "390160",
    "end": "392919"
  },
  {
    "text": "rule instead accessing an",
    "start": "392919",
    "end": "395680"
  },
  {
    "text": "attribute by saying object. Fu gets you",
    "start": "395680",
    "end": "399720"
  },
  {
    "text": "the result of the underscore uncore get",
    "start": "399720",
    "end": "402000"
  },
  {
    "text": "method of the data descriptor of the",
    "start": "402000",
    "end": "404840"
  },
  {
    "text": "same name attached to the class if it",
    "start": "404840",
    "end": "407400"
  },
  {
    "text": "exists that's really what's going",
    "start": "407400",
    "end": "411120"
  },
  {
    "text": "on yay descriptors finally we got there",
    "start": "411240",
    "end": "414120"
  },
  {
    "text": "okay so what is a data descriptor what's",
    "start": "414120",
    "end": "416400"
  },
  {
    "text": "a descriptor it's easy a descriptor is",
    "start": "416400",
    "end": "418840"
  },
  {
    "text": "just any object that has one of at least",
    "start": "418840",
    "end": "421240"
  },
  {
    "text": "one of three methods get set and",
    "start": "421240",
    "end": "424400"
  },
  {
    "text": "delete a data descriptor has both get",
    "start": "424400",
    "end": "426919"
  },
  {
    "text": "and set a nonata descriptor that's",
    "start": "426919",
    "end": "429280"
  },
  {
    "text": "really the name for it uh has just just",
    "start": "429280",
    "end": "433599"
  },
  {
    "text": "get so I'm done uh okay not not",
    "start": "433599",
    "end": "438360"
  },
  {
    "text": "quite thank you have I said basically",
    "start": "438360",
    "end": "441400"
  },
  {
    "text": "yet by the way no okay I'm sweat I'm",
    "start": "441400",
    "end": "445919"
  },
  {
    "text": "sweating up here I'm really working hard",
    "start": "445919",
    "end": "447400"
  },
  {
    "text": "not to ever say basically",
    "start": "447400",
    "end": "450680"
  },
  {
    "text": "okay so we'll look at the implementation",
    "start": "450680",
    "end": "452680"
  },
  {
    "text": "some some ways to implement those three",
    "start": "452680",
    "end": "454120"
  },
  {
    "text": "functions like what they mean um but",
    "start": "454120",
    "end": "456680"
  },
  {
    "text": "first you'll hear people talk about the",
    "start": "456680",
    "end": "457840"
  },
  {
    "text": "descriptor protocol so just to kind of",
    "start": "457840",
    "end": "459599"
  },
  {
    "text": "clarify uh the descriptor protocol is",
    "start": "459599",
    "end": "462599"
  },
  {
    "text": "rule number one explained and also a",
    "start": "462599",
    "end": "465879"
  },
  {
    "text": "brand new rule number three plus a few",
    "start": "465879",
    "end": "468400"
  },
  {
    "text": "more details of management so here's the",
    "start": "468400",
    "end": "471840"
  },
  {
    "start": "471000",
    "end": "471000"
  },
  {
    "text": "deal seven simple",
    "start": "471840",
    "end": "474199"
  },
  {
    "text": "rules if you say object. FU what you get",
    "start": "474199",
    "end": "477720"
  },
  {
    "text": "back is the get method of the data",
    "start": "477720",
    "end": "481400"
  },
  {
    "text": "descriptor that's attached to the class",
    "start": "481400",
    "end": "484720"
  },
  {
    "text": "the type of the object you're",
    "start": "484720",
    "end": "486000"
  },
  {
    "text": "referencing if it",
    "start": "486000",
    "end": "487639"
  },
  {
    "text": "exists or number two you could be",
    "start": "487639",
    "end": "490560"
  },
  {
    "text": "retrieving the key from the underscore",
    "start": "490560",
    "end": "492800"
  },
  {
    "text": "underscore dict attached to the object",
    "start": "492800",
    "end": "495440"
  },
  {
    "text": "or number three you could be getting the",
    "start": "495440",
    "end": "498560"
  },
  {
    "text": "get method of the N Dat descriptor it's",
    "start": "498560",
    "end": "502159"
  },
  {
    "text": "like there's two different kinds of",
    "start": "502159",
    "end": "503199"
  },
  {
    "text": "descriptors and they both have little",
    "start": "503199",
    "end": "504599"
  },
  {
    "text": "slots in in these",
    "start": "504599",
    "end": "506919"
  },
  {
    "text": "rules or you could fall back to looking",
    "start": "506919",
    "end": "508840"
  },
  {
    "text": "on the type or the list of inherited",
    "start": "508840",
    "end": "510520"
  },
  {
    "text": "types until you find a match an",
    "start": "510520",
    "end": "512320"
  },
  {
    "text": "assignment always creates an entry and",
    "start": "512320",
    "end": "513919"
  },
  {
    "text": "your objects",
    "start": "513919",
    "end": "517120"
  },
  {
    "text": "dict unless there was a set of property",
    "start": "517399",
    "end": "519599"
  },
  {
    "text": "which we now know means you're calling",
    "start": "519599",
    "end": "521959"
  },
  {
    "text": "the underscore underscore set method of",
    "start": "521959",
    "end": "524159"
  },
  {
    "text": "the descriptor which is an object that's",
    "start": "524159",
    "end": "526080"
  },
  {
    "text": "attached to your class and and and we",
    "start": "526080",
    "end": "527480"
  },
  {
    "text": "got to figure out what what all that is",
    "start": "527480",
    "end": "528839"
  },
  {
    "text": "okay so there's actually seven things",
    "start": "528839",
    "end": "531399"
  },
  {
    "text": "that object. Fu could mean right this is",
    "start": "531399",
    "end": "533680"
  },
  {
    "text": "just this is horrific no one could",
    "start": "533680",
    "end": "535720"
  },
  {
    "text": "possibly uh understand all this stuff so",
    "start": "535720",
    "end": "538760"
  },
  {
    "text": "many rules",
    "start": "538760",
    "end": "540040"
  },
  {
    "text": "right it's not that complicated people",
    "start": "540040",
    "end": "542120"
  },
  {
    "text": "do all sorts of really complicated",
    "start": "542120",
    "end": "543320"
  },
  {
    "text": "things all the time um descriptors so",
    "start": "543320",
    "end": "545519"
  },
  {
    "start": "545000",
    "end": "545000"
  },
  {
    "text": "there's this get set delete method their",
    "start": "545519",
    "end": "547240"
  },
  {
    "text": "signatures are fixed and I want to look",
    "start": "547240",
    "end": "548519"
  },
  {
    "text": "at what it means to write these three",
    "start": "548519",
    "end": "549760"
  },
  {
    "text": "methods some common patterns of",
    "start": "549760",
    "end": "551480"
  },
  {
    "text": "implementation besides just you know",
    "start": "551480",
    "end": "553320"
  },
  {
    "text": "what the signature looks like um and I'm",
    "start": "553320",
    "end": "555519"
  },
  {
    "text": "going to just punt on Dell because who",
    "start": "555519",
    "end": "557160"
  },
  {
    "text": "wants to delete a property an attribute",
    "start": "557160",
    "end": "559760"
  },
  {
    "text": "anyways so just do get and set if you",
    "start": "559760",
    "end": "562079"
  },
  {
    "text": "don't",
    "start": "562079",
    "end": "563720"
  },
  {
    "text": "mind okay so get and set H my slides",
    "start": "563720",
    "end": "567399"
  },
  {
    "text": "look really weird in this resolution can",
    "start": "567399",
    "end": "569560"
  },
  {
    "text": "I just there we go",
    "start": "569560",
    "end": "573480"
  },
  {
    "text": "cool uh descriptors will look really odd",
    "start": "573480",
    "end": "578440"
  },
  {
    "text": "because descriptors are instances of an",
    "start": "578440",
    "end": "581079"
  },
  {
    "text": "object that's then attached to another",
    "start": "581079",
    "end": "585320"
  },
  {
    "text": "class so this is uh lines 1 through five",
    "start": "585320",
    "end": "589720"
  },
  {
    "text": "here is a descriptor class any class",
    "start": "589720",
    "end": "592120"
  },
  {
    "text": "that implements at least one of",
    "start": "592120",
    "end": "593720"
  },
  {
    "text": "underscore uncore get underscore set",
    "start": "593720",
    "end": "596360"
  },
  {
    "text": "underscore Dell here so I've got get and",
    "start": "596360",
    "end": "598800"
  },
  {
    "text": "set and all I'm going to do is print out",
    "start": "598800",
    "end": "600519"
  },
  {
    "text": "the arguments that I got so I'm not",
    "start": "600519",
    "end": "602000"
  },
  {
    "text": "going to do anything useful but you",
    "start": "602000",
    "end": "603519"
  },
  {
    "text": "would typically attach this to a class",
    "start": "603519",
    "end": "605240"
  },
  {
    "text": "by saying at class definition time there",
    "start": "605240",
    "end": "608880"
  },
  {
    "text": "on line 8 x equals an instance of my",
    "start": "608880",
    "end": "611320"
  },
  {
    "text": "descriptor and that's really weird",
    "start": "611320",
    "end": "612519"
  },
  {
    "text": "that's not really how most stuff tends",
    "start": "612519",
    "end": "614360"
  },
  {
    "text": "to work in Python usually you make",
    "start": "614360",
    "end": "615680"
  },
  {
    "text": "attributes you know like in theit on",
    "start": "615680",
    "end": "617440"
  },
  {
    "text": "self and attaching it to the class is a",
    "start": "617440",
    "end": "619640"
  },
  {
    "text": "totally different",
    "start": "619640",
    "end": "621880"
  },
  {
    "text": "thing but again the point of this is to",
    "start": "621880",
    "end": "624760"
  },
  {
    "text": "simulate attribute access and kind of",
    "start": "624760",
    "end": "626440"
  },
  {
    "text": "hide a function call so when you make an",
    "start": "626440",
    "end": "628560"
  },
  {
    "text": "instance of your class you can reference",
    "start": "628560",
    "end": "631360"
  },
  {
    "text": "object dox X attached to the object and",
    "start": "631360",
    "end": "634519"
  },
  {
    "text": "what you're really calling is the get",
    "start": "634519",
    "end": "636560"
  },
  {
    "text": "method of the instance of the descriptor",
    "start": "636560",
    "end": "638839"
  },
  {
    "text": "that's attached to your class that's",
    "start": "638839",
    "end": "640480"
  },
  {
    "text": "what happens so function calls hidden uh",
    "start": "640480",
    "end": "644160"
  },
  {
    "text": "attached to the class too you could say",
    "start": "644160",
    "end": "645920"
  },
  {
    "text": "my class dox and you've got a hidden",
    "start": "645920",
    "end": "648800"
  },
  {
    "text": "function call you're calling the get",
    "start": "648800",
    "end": "650279"
  },
  {
    "text": "method of the instance of the descriptor",
    "start": "650279",
    "end": "651880"
  },
  {
    "text": "attach to your class um and you can",
    "start": "651880",
    "end": "654240"
  },
  {
    "text": "assign to the object you can't assign to",
    "start": "654240",
    "end": "655880"
  },
  {
    "text": "the class we'll see that in a bit but",
    "start": "655880",
    "end": "658120"
  },
  {
    "text": "again it's kind of like a proper sort of",
    "start": "658120",
    "end": "659519"
  },
  {
    "text": "thing but a lot more complicated so",
    "start": "659519",
    "end": "662360"
  },
  {
    "text": "far so details on the methods uh you're",
    "start": "662360",
    "end": "666079"
  },
  {
    "text": "going to get self cuz you always get",
    "start": "666079",
    "end": "667519"
  },
  {
    "text": "self self is the instance of the",
    "start": "667519",
    "end": "670639"
  },
  {
    "text": "descriptor so just thinking about this",
    "start": "670639",
    "end": "672800"
  },
  {
    "text": "there's going to be one",
    "start": "672800",
    "end": "674880"
  },
  {
    "text": "self for any particular class like you",
    "start": "674880",
    "end": "677519"
  },
  {
    "text": "made one instance of the descriptor",
    "start": "677519",
    "end": "679360"
  },
  {
    "text": "attached to the class doesn't matter how",
    "start": "679360",
    "end": "680880"
  },
  {
    "text": "many objects you make from the class",
    "start": "680880",
    "end": "682880"
  },
  {
    "text": "there just one self one instance of the",
    "start": "682880",
    "end": "684760"
  },
  {
    "text": "descriptor object is the thing that",
    "start": "684760",
    "end": "687120"
  },
  {
    "text": "you're attached to so the object that",
    "start": "687120",
    "end": "689120"
  },
  {
    "text": "you're attached to that's made from the",
    "start": "689120",
    "end": "691240"
  },
  {
    "text": "class that you put yourself on type is",
    "start": "691240",
    "end": "694200"
  },
  {
    "text": "the class that you're attached",
    "start": "694200",
    "end": "697200"
  },
  {
    "text": "to and get you can call on both the",
    "start": "697200",
    "end": "699600"
  },
  {
    "text": "class or the object set you can only",
    "start": "699600",
    "end": "701079"
  },
  {
    "text": "call on the object and H there's a few",
    "start": "701079",
    "end": "703639"
  },
  {
    "text": "obvious reasons uh for that also if you",
    "start": "703639",
    "end": "706279"
  },
  {
    "text": "call on the",
    "start": "706279",
    "end": "709880"
  },
  {
    "text": "uh elf and type are both provided on",
    "start": "711680",
    "end": "714120"
  },
  {
    "text": "object attribute access that makes sense",
    "start": "714120",
    "end": "717279"
  },
  {
    "text": "only type is provided on class attribute",
    "start": "717279",
    "end": "719399"
  },
  {
    "text": "access cuz uh I think I meant to say",
    "start": "719399",
    "end": "721959"
  },
  {
    "text": "object there is no object that you're",
    "start": "721959",
    "end": "723560"
  },
  {
    "text": "attached to if you're calling attached",
    "start": "723560",
    "end": "724839"
  },
  {
    "text": "to a class uh I think I got an example",
    "start": "724839",
    "end": "726680"
  },
  {
    "text": "here that'll make that clear so this is",
    "start": "726680",
    "end": "729320"
  },
  {
    "text": "what our descriptor looks like and this",
    "start": "729320",
    "end": "731320"
  },
  {
    "text": "is me trying to write a useful",
    "start": "731320",
    "end": "732639"
  },
  {
    "text": "descriptor so I could say uh you know",
    "start": "732639",
    "end": "734920"
  },
  {
    "text": "what do you usually do in a class you",
    "start": "734920",
    "end": "736160"
  },
  {
    "text": "like attach stuff to self right this",
    "start": "736160",
    "end": "738959"
  },
  {
    "text": "looks like really good normal python",
    "start": "738959",
    "end": "741120"
  },
  {
    "text": "code this doesn't work for descriptors",
    "start": "741120",
    "end": "743079"
  },
  {
    "text": "why",
    "start": "743079",
    "end": "743760"
  },
  {
    "text": "not",
    "start": "743760",
    "end": "746199"
  },
  {
    "text": "Sor self is the descriptor there's only",
    "start": "746199",
    "end": "748720"
  },
  {
    "text": "one descriptor and how many different",
    "start": "748720",
    "end": "751519"
  },
  {
    "text": "objects are made from the class that",
    "start": "751519",
    "end": "753639"
  },
  {
    "text": "it's attached to so like essentially we",
    "start": "753639",
    "end": "755880"
  },
  {
    "text": "just recreated a class level attribute",
    "start": "755880",
    "end": "758600"
  },
  {
    "text": "you could set your attribute and then",
    "start": "758600",
    "end": "761000"
  },
  {
    "text": "you'll be able to retrieve the current",
    "start": "761000",
    "end": "762279"
  },
  {
    "text": "value from another instance of the same",
    "start": "762279",
    "end": "764440"
  },
  {
    "text": "class so you can't do that simple thing",
    "start": "764440",
    "end": "766519"
  },
  {
    "text": "it would be nice you can't do that",
    "start": "766519",
    "end": "767959"
  },
  {
    "text": "simple thing um possible strategies for",
    "start": "767959",
    "end": "770440"
  },
  {
    "text": "how we could write uh recipes for how we",
    "start": "770440",
    "end": "772959"
  },
  {
    "text": "could write our descriptors we might uh",
    "start": "772959",
    "end": "774959"
  },
  {
    "text": "try storing stuff on object so that's",
    "start": "774959",
    "end": "778320"
  },
  {
    "text": "the instance",
    "start": "778320",
    "end": "779399"
  },
  {
    "text": "of the thing I'm attached to we could",
    "start": "779399",
    "end": "781920"
  },
  {
    "text": "try storing stuff sorry instance of the",
    "start": "781920",
    "end": "785120"
  },
  {
    "text": "class the instance part descript is",
    "start": "785120",
    "end": "786240"
  },
  {
    "text": "attached to sometimes I have no idea",
    "start": "786240",
    "end": "788480"
  },
  {
    "text": "what I'm saying myself it's really not",
    "start": "788480",
    "end": "790079"
  },
  {
    "text": "my fault it is that complicated um or",
    "start": "790079",
    "end": "792839"
  },
  {
    "text": "maybe instead of attaching stuff to",
    "start": "792839",
    "end": "795079"
  },
  {
    "text": "object we get attached stuff to self",
    "start": "795079",
    "end": "797399"
  },
  {
    "text": "that's the descriptor itself but we'll",
    "start": "797399",
    "end": "799680"
  },
  {
    "text": "have to vary it somehow so let's look at",
    "start": "799680",
    "end": "802360"
  },
  {
    "text": "those strategies and maybe this will",
    "start": "802360",
    "end": "804040"
  },
  {
    "text": "help us uh understand our get method a",
    "start": "804040",
    "end": "806199"
  },
  {
    "text": "little bit better let's try storing",
    "start": "806199",
    "end": "807880"
  },
  {
    "text": "stuff on self so here's here's the",
    "start": "807880",
    "end": "810360"
  },
  {
    "text": "problem you can't just store stuff on",
    "start": "810360",
    "end": "813680"
  },
  {
    "start": "811000",
    "end": "811000"
  },
  {
    "text": "self with the same field name you got to",
    "start": "813680",
    "end": "815680"
  },
  {
    "text": "vary the field name so what I might try",
    "start": "815680",
    "end": "817519"
  },
  {
    "text": "doing is using object that's the thing",
    "start": "817519",
    "end": "821480"
  },
  {
    "text": "that I'm attached to as a dictionary",
    "start": "821480",
    "end": "824279"
  },
  {
    "text": "key so I'm going to make an empty",
    "start": "824279",
    "end": "826360"
  },
  {
    "text": "dictionary in the Constructor of my",
    "start": "826360",
    "end": "828199"
  },
  {
    "text": "descriptor when you try to retrieve the",
    "start": "828199",
    "end": "830720"
  },
  {
    "text": "value of my descriptor I say well which",
    "start": "830720",
    "end": "832639"
  },
  {
    "text": "object am I attached to and then I'll",
    "start": "832639",
    "end": "834920"
  },
  {
    "text": "give you the value for that particular",
    "start": "834920",
    "end": "836079"
  },
  {
    "text": "object right and the same thing with",
    "start": "836079",
    "end": "837680"
  },
  {
    "text": "self I'm just going to store the the",
    "start": "837680",
    "end": "838880"
  },
  {
    "text": "value that comes in and I'm going to use",
    "start": "838880",
    "end": "840440"
  },
  {
    "text": "the object as the key so this um this is",
    "start": "840440",
    "end": "844199"
  },
  {
    "text": "actually really horrible um I actually",
    "start": "844199",
    "end": "846720"
  },
  {
    "text": "wrote a descriptor like this and it has",
    "start": "846720",
    "end": "848440"
  },
  {
    "text": "some really uh strong problems among",
    "start": "848440",
    "end": "850759"
  },
  {
    "text": "other things you now have a reference",
    "start": "850759",
    "end": "853639"
  },
  {
    "text": "for every instance of your class stored",
    "start": "853639",
    "end": "855519"
  },
  {
    "text": "in the descriptor attached to the class",
    "start": "855519",
    "end": "857079"
  },
  {
    "text": "so you can delete the objects they don't",
    "start": "857079",
    "end": "859240"
  },
  {
    "text": "get garbage collected because You' still",
    "start": "859240",
    "end": "860959"
  },
  {
    "text": "got you know a pointer to them",
    "start": "860959",
    "end": "862440"
  },
  {
    "text": "essentially you'd have to delete the",
    "start": "862440",
    "end": "864079"
  },
  {
    "text": "class to make the objects made from the",
    "start": "864079",
    "end": "866120"
  },
  {
    "text": "class go away that's really bad",
    "start": "866120",
    "end": "867759"
  },
  {
    "text": "shouldn't do that you could still use",
    "start": "867759",
    "end": "869399"
  },
  {
    "text": "the same pattern yeah you could use weak",
    "start": "869399",
    "end": "871839"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "references so pep 205 there's a weak ref",
    "start": "871839",
    "end": "874880"
  },
  {
    "text": "module it's got a dictionary that you",
    "start": "874880",
    "end": "877279"
  },
  {
    "text": "give it objects to use as keys and it",
    "start": "877279",
    "end": "879040"
  },
  {
    "text": "doesn't use the object it uses a weak",
    "start": "879040",
    "end": "880720"
  },
  {
    "text": "reference to the object be careful",
    "start": "880720",
    "end": "883160"
  },
  {
    "text": "because stuff disappears from your",
    "start": "883160",
    "end": "884360"
  },
  {
    "text": "dictionary when it gets garbage",
    "start": "884360",
    "end": "885480"
  },
  {
    "text": "collected that occasionally bites you",
    "start": "885480",
    "end": "887000"
  },
  {
    "text": "when you're iterating but this would",
    "start": "887000",
    "end": "888519"
  },
  {
    "text": "this would work and some people write",
    "start": "888519",
    "end": "889800"
  },
  {
    "text": "descriptors this",
    "start": "889800",
    "end": "891079"
  },
  {
    "text": "way so just make a a weak key dictionary",
    "start": "891079",
    "end": "895000"
  },
  {
    "text": "again kind of vary stuff by the object",
    "start": "895000",
    "end": "897560"
  },
  {
    "text": "as key and store everything in the",
    "start": "897560",
    "end": "901360"
  },
  {
    "text": "descriptor sort of kind of not",
    "start": "903160",
    "end": "905240"
  },
  {
    "text": "everything can be weak referenced so if",
    "start": "905240",
    "end": "906759"
  },
  {
    "text": "use slots no weak references a bunch of",
    "start": "906759",
    "end": "909279"
  },
  {
    "text": "the the built-in types can't be weak",
    "start": "909279",
    "end": "911360"
  },
  {
    "text": "referenced you can't use lots of things",
    "start": "911360",
    "end": "913440"
  },
  {
    "text": "as keys right you get the uh have you",
    "start": "913440",
    "end": "915959"
  },
  {
    "text": "ever tried to you know use a list as a",
    "start": "915959",
    "end": "917320"
  },
  {
    "text": "key to a dictionary you get the",
    "start": "917320",
    "end": "918560"
  },
  {
    "text": "unhashable type thing so if you inherit",
    "start": "918560",
    "end": "920759"
  },
  {
    "text": "from a mutable data type you can't use",
    "start": "920759",
    "end": "923440"
  },
  {
    "text": "so there's a bunch of uh there's a bunch",
    "start": "923440",
    "end": "924959"
  },
  {
    "text": "of classes of things that you won't be",
    "start": "924959",
    "end": "927240"
  },
  {
    "text": "able to use as weak reference keys in a",
    "start": "927240",
    "end": "929720"
  },
  {
    "text": "dictionary so we might not be able to",
    "start": "929720",
    "end": "931319"
  },
  {
    "text": "use this",
    "start": "931319",
    "end": "933600"
  },
  {
    "text": "solution so let's try storing stuff on",
    "start": "933839",
    "end": "936279"
  },
  {
    "start": "934000",
    "end": "934000"
  },
  {
    "text": "the object that a descriptor is attached",
    "start": "936279",
    "end": "939040"
  },
  {
    "text": "to so that would be obj and here's a",
    "start": "939040",
    "end": "942519"
  },
  {
    "text": "problem you define your descriptor like",
    "start": "942519",
    "end": "944920"
  },
  {
    "text": "this right you you say like vow equals",
    "start": "944920",
    "end": "946800"
  },
  {
    "text": "an instance of my descriptor class at",
    "start": "946800",
    "end": "949040"
  },
  {
    "text": "class definition time the descriptor",
    "start": "949040",
    "end": "951959"
  },
  {
    "text": "Constructor runs it doesn't know the",
    "start": "951959",
    "end": "954120"
  },
  {
    "text": "name of the attribute that it's attached",
    "start": "954120",
    "end": "957160"
  },
  {
    "text": "to so how do you you know like what name",
    "start": "957160",
    "end": "959720"
  },
  {
    "text": "should I use on the object you could um",
    "start": "959720",
    "end": "963720"
  },
  {
    "text": "you could do this right you could just",
    "start": "963720",
    "end": "965160"
  },
  {
    "text": "duplicate the name you could pass like",
    "start": "965160",
    "end": "967000"
  },
  {
    "text": "hardcode the name Val is equal to my",
    "start": "967000",
    "end": "968920"
  },
  {
    "text": "descriptor and I'll pass you the name of",
    "start": "968920",
    "end": "970240"
  },
  {
    "text": "the field in which you can safely store",
    "start": "970240",
    "end": "972279"
  },
  {
    "text": "stuff so just a little bit of code",
    "start": "972279",
    "end": "974279"
  },
  {
    "text": "duplication and uh it makes the",
    "start": "974279",
    "end": "977120"
  },
  {
    "start": "976000",
    "end": "976000"
  },
  {
    "text": "descriptor easy to write so my new",
    "start": "977120",
    "end": "979480"
  },
  {
    "text": "strategy is the Constructor for my",
    "start": "979480",
    "end": "981399"
  },
  {
    "text": "descriptor assumes you're going to give",
    "start": "981399",
    "end": "983040"
  },
  {
    "text": "it a field",
    "start": "983040",
    "end": "983959"
  },
  {
    "text": "name my get uh just prints you called",
    "start": "983959",
    "end": "986759"
  },
  {
    "text": "get so I can see it happens and then",
    "start": "986759",
    "end": "988880"
  },
  {
    "text": "you're going to store stuff in the",
    "start": "988880",
    "end": "991000"
  },
  {
    "text": "objects",
    "start": "991000",
    "end": "993040"
  },
  {
    "text": "dictionary with the key self. field and",
    "start": "993040",
    "end": "996399"
  },
  {
    "text": "the set is going to store stuff the get",
    "start": "996399",
    "end": "998399"
  },
  {
    "text": "is going to retrieve stuff but you're",
    "start": "998399",
    "end": "999560"
  },
  {
    "text": "going to",
    "start": "999560",
    "end": "1000319"
  },
  {
    "text": "use the field name in the object",
    "start": "1000319",
    "end": "1005959"
  },
  {
    "text": "dictionary so you get why that works",
    "start": "1006440",
    "end": "1008839"
  },
  {
    "text": "right if you say object dox normally",
    "start": "1008839",
    "end": "1011959"
  },
  {
    "text": "you'd get the stuff stored in the",
    "start": "1011959",
    "end": "1013839"
  },
  {
    "text": "object's dictionary but since you have a",
    "start": "1013839",
    "end": "1015639"
  },
  {
    "text": "descriptor you don't it's kind of hidden",
    "start": "1015639",
    "end": "1017800"
  },
  {
    "text": "so it's okay if the the descriptor uses",
    "start": "1017800",
    "end": "1021120"
  },
  {
    "text": "objector dict dox nobody else is going",
    "start": "1021120",
    "end": "1024480"
  },
  {
    "text": "to be able to get to that that value",
    "start": "1024480",
    "end": "1025798"
  },
  {
    "text": "without explicitly referencing the",
    "start": "1025799",
    "end": "1026880"
  },
  {
    "text": "dictionary so that would be a safe thing",
    "start": "1026880",
    "end": "1028199"
  },
  {
    "text": "to do um the only thing is you've got a",
    "start": "1028199",
    "end": "1030199"
  },
  {
    "text": "little code duplication and fortunately",
    "start": "1030199",
    "end": "1031798"
  },
  {
    "text": "that like doesn't bug programmers like a",
    "start": "1031799",
    "end": "1033319"
  },
  {
    "text": "little duplicated code it's fine so",
    "start": "1033319",
    "end": "1035600"
  },
  {
    "text": "nobody cares that solution works fine",
    "start": "1035600",
    "end": "1039480"
  },
  {
    "text": "um if only I knew something about meta",
    "start": "1039480",
    "end": "1041720"
  },
  {
    "text": "classes which I totally",
    "start": "1041720",
    "end": "1043438"
  },
  {
    "text": "don't or class decorators you could do",
    "start": "1043439",
    "end": "1046480"
  },
  {
    "text": "something magical to make the go away um",
    "start": "1046480",
    "end": "1051160"
  },
  {
    "text": "like this so you can attach a decorator",
    "start": "1051160",
    "end": "1053679"
  },
  {
    "text": "to a class it's always easier for me to",
    "start": "1053679",
    "end": "1055960"
  },
  {
    "text": "write the meta classes but not quite as",
    "start": "1055960",
    "end": "1057400"
  },
  {
    "text": "powerful and this is um a descriptor",
    "start": "1057400",
    "end": "1059799"
  },
  {
    "text": "that says give me a class I'll Loop over",
    "start": "1059799",
    "end": "1061440"
  },
  {
    "text": "all the attributes of the class and I I",
    "start": "1061440",
    "end": "1063280"
  },
  {
    "text": "got the name and I got the thing if the",
    "start": "1063280",
    "end": "1065480"
  },
  {
    "text": "thing is a descriptor then let's go",
    "start": "1065480",
    "end": "1067120"
  },
  {
    "text": "ahead and tell the descriptor the name",
    "start": "1067120",
    "end": "1068720"
  },
  {
    "text": "that it's being stored under so that",
    "start": "1068720",
    "end": "1071240"
  },
  {
    "text": "prevents my little bit of code",
    "start": "1071240",
    "end": "1072919"
  },
  {
    "text": "duplication um just at the expense of a",
    "start": "1072919",
    "end": "1074960"
  },
  {
    "text": "little bit of magic it might be too much",
    "start": "1074960",
    "end": "1077360"
  },
  {
    "text": "magic it does work it's nice but you",
    "start": "1077360",
    "end": "1079760"
  },
  {
    "text": "know I don't know your your tolerance",
    "start": "1079760",
    "end": "1082120"
  },
  {
    "text": "for magic may vary so again the point of",
    "start": "1082120",
    "end": "1084960"
  },
  {
    "text": "all this is you can say like object. x",
    "start": "1084960",
    "end": "1086720"
  },
  {
    "text": "equals 10 and object. x and you get back",
    "start": "1086720",
    "end": "1088679"
  },
  {
    "text": "a value and really behind the scenes",
    "start": "1088679",
    "end": "1090600"
  },
  {
    "text": "there are function calls and this feels",
    "start": "1090600",
    "end": "1092440"
  },
  {
    "text": "like",
    "start": "1092440",
    "end": "1094320"
  },
  {
    "text": "um property was cool right does anybody",
    "start": "1094320",
    "end": "1097200"
  },
  {
    "text": "think does anybody think descriptors are",
    "start": "1097200",
    "end": "1099159"
  },
  {
    "text": "cool so",
    "start": "1099159",
    "end": "1100520"
  },
  {
    "text": "far y y'all want to go out and write Des",
    "start": "1100520",
    "end": "1102520"
  },
  {
    "text": "scriptures now",
    "start": "1102520",
    "end": "1105159"
  },
  {
    "text": "right property is actually syntactic",
    "start": "1107320",
    "end": "1110720"
  },
  {
    "text": "sugar on top of the descriptor protocol",
    "start": "1110720",
    "end": "1112520"
  },
  {
    "text": "it's implemented using descriptors and",
    "start": "1112520",
    "end": "1114159"
  },
  {
    "text": "so is static method and class method a",
    "start": "1114159",
    "end": "1116720"
  },
  {
    "text": "bunch of the the decorators that do",
    "start": "1116720",
    "end": "1119400"
  },
  {
    "text": "stuff to your classes methods are",
    "start": "1119400",
    "end": "1122640"
  },
  {
    "text": "actually just taking advantage of",
    "start": "1122640",
    "end": "1123960"
  },
  {
    "text": "knowing how the descriptive protocol",
    "start": "1123960",
    "end": "1125159"
  },
  {
    "text": "works so we might want to understand",
    "start": "1125159",
    "end": "1127679"
  },
  {
    "text": "what's going on underneath the",
    "start": "1127679",
    "end": "1129120"
  },
  {
    "text": "covers but hey you know maybe properties",
    "start": "1129120",
    "end": "1131840"
  },
  {
    "text": "is just like doing the typical python",
    "start": "1131840",
    "end": "1133600"
  },
  {
    "text": "thing right gives me a simple interface",
    "start": "1133600",
    "end": "1134840"
  },
  {
    "text": "to a complicated thing and cool I don't",
    "start": "1134840",
    "end": "1136240"
  },
  {
    "text": "have to write custom descriptors CU",
    "start": "1136240",
    "end": "1137960"
  },
  {
    "text": "somebody else did that hard work for me",
    "start": "1137960",
    "end": "1140559"
  },
  {
    "text": "is there ever a reason for me to go out",
    "start": "1140559",
    "end": "1142200"
  },
  {
    "text": "and write objects with get set delete",
    "start": "1142200",
    "end": "1144559"
  },
  {
    "text": "methods and attach them to my classes at",
    "start": "1144559",
    "end": "1145799"
  },
  {
    "text": "runtime and put up with all the pain of",
    "start": "1145799",
    "end": "1149039"
  },
  {
    "text": "implementation yes there is so app",
    "start": "1149039",
    "end": "1152360"
  },
  {
    "text": "property is not going to work for every",
    "start": "1152360",
    "end": "1154720"
  },
  {
    "text": "case where I need to attribute uh",
    "start": "1154720",
    "end": "1156640"
  },
  {
    "text": "intercept attribute",
    "start": "1156640",
    "end": "1159039"
  },
  {
    "text": "access imagine this use case you got a",
    "start": "1159039",
    "end": "1161240"
  },
  {
    "text": "class it's got a bunch of it's got a",
    "start": "1161240",
    "end": "1162840"
  },
  {
    "text": "bunch of attributes and they're all",
    "start": "1162840",
    "end": "1164039"
  },
  {
    "text": "going to store uh currency amounts and",
    "start": "1164039",
    "end": "1165640"
  },
  {
    "text": "so you want to make sure that they're",
    "start": "1165640",
    "end": "1166520"
  },
  {
    "text": "they're decimals you want to do like a",
    "start": "1166520",
    "end": "1167520"
  },
  {
    "text": "little bit of normaliz",
    "start": "1167520",
    "end": "1169200"
  },
  {
    "text": "well that's cool you know I know",
    "start": "1169200",
    "end": "1170120"
  },
  {
    "text": "properties so I can just write uh a",
    "start": "1170120",
    "end": "1173320"
  },
  {
    "start": "1172000",
    "end": "1172000"
  },
  {
    "text": "separate property definition for every",
    "start": "1173320",
    "end": "1175320"
  },
  {
    "text": "single attribute like if I had a dozen",
    "start": "1175320",
    "end": "1177240"
  },
  {
    "text": "attributes and all of them wanted to",
    "start": "1177240",
    "end": "1179400"
  },
  {
    "text": "convert stuff back and forth to decimal",
    "start": "1179400",
    "end": "1181600"
  },
  {
    "text": "I'd have to copy and paste um you know",
    "start": "1181600",
    "end": "1184520"
  },
  {
    "text": "it's not very much code but I'd have to",
    "start": "1184520",
    "end": "1185919"
  },
  {
    "text": "have one of these app property things",
    "start": "1185919",
    "end": "1187559"
  },
  {
    "text": "for every single field and another one",
    "start": "1187559",
    "end": "1190080"
  },
  {
    "text": "of these Setter things for every single",
    "start": "1190080",
    "end": "1191799"
  },
  {
    "text": "field like I've got a bunch of",
    "start": "1191799",
    "end": "1192880"
  },
  {
    "text": "repetition there just keep repeating and",
    "start": "1192880",
    "end": "1195760"
  },
  {
    "text": "it kind of seemed to me that the point",
    "start": "1195760",
    "end": "1197240"
  },
  {
    "text": "of app property was to keep me from",
    "start": "1197240",
    "end": "1199240"
  },
  {
    "text": "having to put a bunch of boilerplate in",
    "start": "1199240",
    "end": "1200559"
  },
  {
    "text": "my code in the first place so I don't",
    "start": "1200559",
    "end": "1202600"
  },
  {
    "text": "want to do",
    "start": "1202600",
    "end": "1204039"
  },
  {
    "text": "that wouldn't you rather do",
    "start": "1204039",
    "end": "1207559"
  },
  {
    "text": "this you could write the translate stuff",
    "start": "1207559",
    "end": "1211720"
  },
  {
    "text": "from strings to decimals or from from",
    "start": "1211720",
    "end": "1213640"
  },
  {
    "text": "floats to strings to decimals in a",
    "start": "1213640",
    "end": "1215679"
  },
  {
    "text": "descript there pretty easily and then",
    "start": "1215679",
    "end": "1217159"
  },
  {
    "text": "you can just signify the fields that",
    "start": "1217159",
    "end": "1219200"
  },
  {
    "text": "have some common Behavior at class",
    "start": "1219200",
    "end": "1221200"
  },
  {
    "text": "definition time that's a lot prettier I",
    "start": "1221200",
    "end": "1223760"
  },
  {
    "text": "mean that that looks good I'd rather I'd",
    "start": "1223760",
    "end": "1225400"
  },
  {
    "text": "rather do that if I",
    "start": "1225400",
    "end": "1226960"
  },
  {
    "text": "could the the takeaway descriptors are",
    "start": "1226960",
    "end": "1230480"
  },
  {
    "text": "cool if you've got properties that have",
    "start": "1230480",
    "end": "1232760"
  },
  {
    "text": "the same behavior across lots of",
    "start": "1232760",
    "end": "1235159"
  },
  {
    "text": "different names and maybe across lots of",
    "start": "1235159",
    "end": "1236799"
  },
  {
    "text": "different",
    "start": "1236799",
    "end": "1238240"
  },
  {
    "text": "classes it's like reusable properties so",
    "start": "1238240",
    "end": "1241320"
  },
  {
    "text": "does that ever does that ever",
    "start": "1241320",
    "end": "1243360"
  },
  {
    "text": "happen think database fields and this",
    "start": "1243360",
    "end": "1245559"
  },
  {
    "text": "looks like familiar code right you have",
    "start": "1245559",
    "end": "1248039"
  },
  {
    "start": "1248000",
    "end": "1248000"
  },
  {
    "text": "like VAR charar fields and there's some",
    "start": "1248039",
    "end": "1250159"
  },
  {
    "text": "stuff that goes into having a VAR charar",
    "start": "1250159",
    "end": "1251919"
  },
  {
    "text": "field you might always want to make sure",
    "start": "1251919",
    "end": "1253840"
  },
  {
    "text": "that the varchar field the data coming",
    "start": "1253840",
    "end": "1255280"
  },
  {
    "text": "in isn't longer than the the maximum",
    "start": "1255280",
    "end": "1257000"
  },
  {
    "text": "length the varchar field fields of our",
    "start": "1257000",
    "end": "1259240"
  },
  {
    "text": "Char Fields name different things on",
    "start": "1259240",
    "end": "1260960"
  },
  {
    "text": "lots of different classes so familiar",
    "start": "1260960",
    "end": "1263200"
  },
  {
    "text": "code you know for any database or layer",
    "start": "1263200",
    "end": "1266679"
  },
  {
    "text": "and there's some descriptors in Django",
    "start": "1266679",
    "end": "1268480"
  },
  {
    "text": "um or guey languages you've got",
    "start": "1268480",
    "end": "1272720"
  },
  {
    "text": "properties that need to do stuff when",
    "start": "1272720",
    "end": "1275039"
  },
  {
    "text": "they change their values you know talk",
    "start": "1275039",
    "end": "1276960"
  },
  {
    "text": "to an event Loop tell them something has",
    "start": "1276960",
    "end": "1278919"
  },
  {
    "text": "changed if you've done a little bit of",
    "start": "1278919",
    "end": "1280120"
  },
  {
    "text": "Ki KY has properties they really its own",
    "start": "1280120",
    "end": "1283200"
  },
  {
    "text": "handroll",
    "start": "1283200",
    "end": "1284320"
  },
  {
    "text": "descriptor um or you know you might do",
    "start": "1284320",
    "end": "1286440"
  },
  {
    "text": "it just to be cool like it's kind of",
    "start": "1286440",
    "end": "1287640"
  },
  {
    "text": "nice to a declarative API it it it's fun",
    "start": "1287640",
    "end": "1290360"
  },
  {
    "text": "writing um forms or models in Jango they",
    "start": "1290360",
    "end": "1293919"
  },
  {
    "text": "all kind of look the same you make a",
    "start": "1293919",
    "end": "1295080"
  },
  {
    "text": "class you have a few like class level",
    "start": "1295080",
    "end": "1297279"
  },
  {
    "text": "instances um we can provide that API if",
    "start": "1297279",
    "end": "1299679"
  },
  {
    "text": "we can write",
    "start": "1299679",
    "end": "1300640"
  },
  {
    "text": "descriptors or maybe you just want to do",
    "start": "1300640",
    "end": "1303840"
  },
  {
    "text": "advanc things like your own property",
    "start": "1303840",
    "end": "1305200"
  },
  {
    "text": "decorator and this is one um that I've",
    "start": "1305200",
    "end": "1307320"
  },
  {
    "text": "seen zope has this more or less AR",
    "start": "1307320",
    "end": "1310240"
  },
  {
    "text": "roniker has one of these there's one of",
    "start": "1310240",
    "end": "1312000"
  },
  {
    "text": "these like in flask I think it's a it's",
    "start": "1312000",
    "end": "1314200"
  },
  {
    "text": "a lazy loading property and let's see if",
    "start": "1314200",
    "end": "1317520"
  },
  {
    "text": "we can understand what's going on here",
    "start": "1317520",
    "end": "1319559"
  },
  {
    "text": "so every framework ever seems to have an",
    "start": "1319559",
    "end": "1321640"
  },
  {
    "text": "implementation of this the first thing",
    "start": "1321640",
    "end": "1324120"
  },
  {
    "text": "is my lazy property um what kind of",
    "start": "1324120",
    "end": "1327720"
  },
  {
    "text": "descriptor is",
    "start": "1327720",
    "end": "1330320"
  },
  {
    "text": "that non- dat descriptor right you",
    "start": "1333360",
    "end": "1335799"
  },
  {
    "text": "remember so descriptors have at least",
    "start": "1335799",
    "end": "1338200"
  },
  {
    "text": "one of three methods data descriptors",
    "start": "1338200",
    "end": "1340279"
  },
  {
    "text": "have get and set non- dat descriptors",
    "start": "1340279",
    "end": "1342520"
  },
  {
    "text": "only have get okay so non- dat",
    "start": "1342520",
    "end": "1345360"
  },
  {
    "text": "descriptor and what it does is",
    "start": "1345360",
    "end": "1349880"
  },
  {
    "text": "uh hm that's interesting my Constructor",
    "start": "1349880",
    "end": "1352919"
  },
  {
    "text": "takes a function and stores it and also",
    "start": "1352919",
    "end": "1355640"
  },
  {
    "text": "remembers what the function's name was",
    "start": "1355640",
    "end": "1358200"
  },
  {
    "text": "and then my get method says I'm going to",
    "start": "1358200",
    "end": "1360640"
  },
  {
    "text": "call the function that was passed to me",
    "start": "1360640",
    "end": "1363720"
  },
  {
    "text": "to compute the value I'm going to stuff",
    "start": "1363720",
    "end": "1365679"
  },
  {
    "text": "it in the object and I'm going to give",
    "start": "1365679",
    "end": "1367400"
  },
  {
    "text": "you back the value so you could use it",
    "start": "1367400",
    "end": "1369760"
  },
  {
    "text": "like this it looks a lot like the",
    "start": "1369760",
    "end": "1371039"
  },
  {
    "text": "property decorator you just write a",
    "start": "1371039",
    "end": "1372320"
  },
  {
    "text": "function defx it returns you know 42 the",
    "start": "1372320",
    "end": "1375279"
  },
  {
    "text": "answer to every complicated question and",
    "start": "1375279",
    "end": "1377159"
  },
  {
    "text": "it's decorated with at Lazy property so",
    "start": "1377159",
    "end": "1379159"
  },
  {
    "text": "what is it",
    "start": "1379159",
    "end": "1381120"
  },
  {
    "text": "doing the first time you reference X it",
    "start": "1381120",
    "end": "1384880"
  },
  {
    "text": "called the descriptor and gives you 42",
    "start": "1384880",
    "end": "1387480"
  },
  {
    "text": "the second time it just gives you",
    "start": "1387480",
    "end": "1389720"
  },
  {
    "text": "42 do you remember",
    "start": "1389720",
    "end": "1393320"
  },
  {
    "text": "why we're relying on rule number three",
    "start": "1396360",
    "end": "1399039"
  },
  {
    "text": "you know rule number one is data",
    "start": "1399039",
    "end": "1400440"
  },
  {
    "text": "descriptor rule number two is in the",
    "start": "1400440",
    "end": "1402600"
  },
  {
    "text": "object's dict rule number three is",
    "start": "1402600",
    "end": "1404080"
  },
  {
    "text": "nonata descriptor we hit the nonata",
    "start": "1404080",
    "end": "1406279"
  },
  {
    "text": "descriptor the first time we put it in",
    "start": "1406279",
    "end": "1408240"
  },
  {
    "text": "the object dict the second time we hit",
    "start": "1408240",
    "end": "1409760"
  },
  {
    "text": "the object dict instead of falling down",
    "start": "1409760",
    "end": "1411440"
  },
  {
    "text": "to the non-data descriptor it's um it's",
    "start": "1411440",
    "end": "1414320"
  },
  {
    "text": "a lot of details honestly uh writing out",
    "start": "1414320",
    "end": "1417480"
  },
  {
    "text": "the the list of rules I was struggling",
    "start": "1417480",
    "end": "1418880"
  },
  {
    "text": "to keep it all in one slide um but if",
    "start": "1418880",
    "end": "1421360"
  },
  {
    "text": "you get how it works like",
    "start": "1421360",
    "end": "1422440"
  },
  {
    "text": "congratulations this is a complicated",
    "start": "1422440",
    "end": "1423919"
  },
  {
    "text": "piece of Python's object-oriented",
    "start": "1423919",
    "end": "1425120"
  },
  {
    "text": "Machinery that's that's useful uh go",
    "start": "1425120",
    "end": "1428279"
  },
  {
    "start": "1428000",
    "end": "1428000"
  },
  {
    "text": "forth and wizard write cool stuff with",
    "start": "1428279",
    "end": "1429640"
  },
  {
    "text": "it some resources you might like um",
    "start": "1429640",
    "end": "1431440"
  },
  {
    "text": "totally uh was inspired by Luciano",
    "start": "1431440",
    "end": "1433679"
  },
  {
    "text": "ralo's talk Pon about descriptors um",
    "start": "1433679",
    "end": "1436760"
  },
  {
    "text": "made me actually think descriptors could",
    "start": "1436760",
    "end": "1438000"
  },
  {
    "text": "useful David Beasley has a cool talk",
    "start": "1438000",
    "end": "1440480"
  },
  {
    "text": "that has some stuff about descriptors in",
    "start": "1440480",
    "end": "1441840"
  },
  {
    "text": "it among other uh class magic um follow",
    "start": "1441840",
    "end": "1445360"
  },
  {
    "text": "me on Twitter and I will post the slides",
    "start": "1445360",
    "end": "1447039"
  },
  {
    "text": "on my blog here when I when we get done",
    "start": "1447039",
    "end": "1448919"
  },
  {
    "text": "tonight any any",
    "start": "1448919",
    "end": "1451159"
  },
  {
    "text": "questions uh can these properties I was",
    "start": "1451159",
    "end": "1453640"
  },
  {
    "text": "thinking be used to make some of the",
    "start": "1453640",
    "end": "1456080"
  },
  {
    "text": "attributes in uh instances objects",
    "start": "1456080",
    "end": "1459679"
  },
  {
    "text": "private uh",
    "start": "1459679",
    "end": "1461440"
  },
  {
    "text": "effectively similarly the descriptor",
    "start": "1461440",
    "end": "1463880"
  },
  {
    "text": "spec says make a data descriptor and",
    "start": "1463880",
    "end": "1466200"
  },
  {
    "text": "then you're supposed to raise a like not",
    "start": "1466200",
    "end": "1468159"
  },
  {
    "text": "implemented there's a specific exception",
    "start": "1468159",
    "end": "1469720"
  },
  {
    "text": "to raise in the set method and that is",
    "start": "1469720",
    "end": "1472320"
  },
  {
    "text": "what python means when it says you have",
    "start": "1472320",
    "end": "1473760"
  },
  {
    "text": "a readon property um there's also uh you",
    "start": "1473760",
    "end": "1476840"
  },
  {
    "text": "can raise it in the get to say like you",
    "start": "1476840",
    "end": "1479320"
  },
  {
    "text": "could get the value but you're not",
    "start": "1479320",
    "end": "1480480"
  },
  {
    "text": "allowed to so yeah implementing things",
    "start": "1480480",
    "end": "1482240"
  },
  {
    "text": "like data privacy or data prevention is",
    "start": "1482240",
    "end": "1484840"
  },
  {
    "text": "something you should do with the",
    "start": "1484840",
    "end": "1486399"
  },
  {
    "text": "scriptors you could just put a at",
    "start": "1486399",
    "end": "1488520"
  },
  {
    "text": "property to write the getter and not",
    "start": "1488520",
    "end": "1489960"
  },
  {
    "text": "write a set or two but you get a more",
    "start": "1489960",
    "end": "1492039"
  },
  {
    "text": "cryptic ER message in that",
    "start": "1492039",
    "end": "1495039"
  },
  {
    "text": "case slots",
    "start": "1496320",
    "end": "1498399"
  },
  {
    "text": "descri so uh is there could you describe",
    "start": "1498399",
    "end": "1501200"
  },
  {
    "text": "some useful use cases where where these",
    "start": "1501200",
    "end": "1503840"
  },
  {
    "text": "two things go hand in",
    "start": "1503840",
    "end": "1505360"
  },
  {
    "text": "hand",
    "start": "1505360",
    "end": "1508360"
  },
  {
    "text": "uh so I need more rules if I get to",
    "start": "1515919",
    "end": "1518880"
  },
  {
    "text": "slots because if we have slots we don't",
    "start": "1518880",
    "end": "1520640"
  },
  {
    "text": "have an underscore underscore dict at",
    "start": "1520640",
    "end": "1522279"
  },
  {
    "text": "all we've kind of hardcoded what our",
    "start": "1522279",
    "end": "1524279"
  },
  {
    "text": "definition looks like and we're no",
    "start": "1524279",
    "end": "1525240"
  },
  {
    "text": "longer syntactic suar over a dictionary",
    "start": "1525240",
    "end": "1527279"
  },
  {
    "text": "um",
    "start": "1527279",
    "end": "1529679"
  },
  {
    "text": "a reason to use both slots and",
    "start": "1530799",
    "end": "1534360"
  },
  {
    "text": "descriptors I can't think of a",
    "start": "1535240",
    "end": "1536760"
  },
  {
    "text": "particular reason to use both you",
    "start": "1536760",
    "end": "1537880"
  },
  {
    "text": "typically use slots for uh efficiency",
    "start": "1537880",
    "end": "1540120"
  },
  {
    "text": "right and you typically use descriptors",
    "start": "1540120",
    "end": "1542120"
  },
  {
    "text": "for mediated access to properties the",
    "start": "1542120",
    "end": "1544240"
  },
  {
    "text": "two don't necessarily interfere with",
    "start": "1544240",
    "end": "1545559"
  },
  {
    "text": "each other as long as you're not trying",
    "start": "1545559",
    "end": "1546720"
  },
  {
    "text": "to like you know store references to the",
    "start": "1546720",
    "end": "1548480"
  },
  {
    "text": "particular objects so I I I don't see",
    "start": "1548480",
    "end": "1551039"
  },
  {
    "text": "any reason why you can't use both I",
    "start": "1551039",
    "end": "1552080"
  },
  {
    "text": "can't think of a good reason to use both",
    "start": "1552080",
    "end": "1554279"
  },
  {
    "text": "particularly I I tend to leave off slots",
    "start": "1554279",
    "end": "1556760"
  },
  {
    "text": "if I can if I can man it I like my",
    "start": "1556760",
    "end": "1558360"
  },
  {
    "text": "python Dynamic so Simeon I wanted to ask",
    "start": "1558360",
    "end": "1560919"
  },
  {
    "text": "you about the slide so you you brought",
    "start": "1560919",
    "end": "1562960"
  },
  {
    "text": "up kind of increasingly scary use cases",
    "start": "1562960",
    "end": "1565679"
  },
  {
    "text": "of descriptors before switching back to",
    "start": "1565679",
    "end": "1567559"
  },
  {
    "text": "properties but if we went back to that",
    "start": "1567559",
    "end": "1569480"
  },
  {
    "text": "kind of really scary um part uh what's",
    "start": "1569480",
    "end": "1573320"
  },
  {
    "text": "what's really if we wanted to start",
    "start": "1573320",
    "end": "1575000"
  },
  {
    "text": "using descriptors where should we be",
    "start": "1575000",
    "end": "1576919"
  },
  {
    "text": "storing the data what what came out to",
    "start": "1576919",
    "end": "1579120"
  },
  {
    "text": "you as the best way of uh uh so I do I",
    "start": "1579120",
    "end": "1583159"
  },
  {
    "text": "do like storing it on the object it's",
    "start": "1583159",
    "end": "1585120"
  },
  {
    "text": "nice to get the field name and I'm okay",
    "start": "1585120",
    "end": "1586880"
  },
  {
    "text": "with a like using a class decorator to",
    "start": "1586880",
    "end": "1589080"
  },
  {
    "text": "magically give me the field name when",
    "start": "1589080",
    "end": "1590720"
  },
  {
    "text": "should you use descriptors if that was",
    "start": "1590720",
    "end": "1592279"
  },
  {
    "text": "the case if that was the question if I",
    "start": "1592279",
    "end": "1594480"
  },
  {
    "text": "have to",
    "start": "1594480",
    "end": "1597120"
  },
  {
    "text": "um I think you got the when should we",
    "start": "1597120",
    "end": "1599320"
  },
  {
    "text": "use them yeah if I have to write two",
    "start": "1599320",
    "end": "1601320"
  },
  {
    "text": "properties that look the same descriptor",
    "start": "1601320",
    "end": "1603360"
  },
  {
    "text": "time right just where where's a good",
    "start": "1603360",
    "end": "1605200"
  },
  {
    "text": "place to store them because when you",
    "start": "1605200",
    "end": "1606880"
  },
  {
    "text": "brought up using a dictionary with keys",
    "start": "1606880",
    "end": "1608960"
  },
  {
    "text": "I mean the hashable yeah so it seems",
    "start": "1608960",
    "end": "1610840"
  },
  {
    "text": "like there isn't any perfect like always",
    "start": "1610840",
    "end": "1613120"
  },
  {
    "text": "solution and uh if you look for",
    "start": "1613120",
    "end": "1614960"
  },
  {
    "text": "descriptor recipes people use the week",
    "start": "1614960",
    "end": "1617760"
  },
  {
    "text": "it tends to make sense that uh",
    "start": "1617760",
    "end": "1620039"
  },
  {
    "text": "descriptor data should be stored in the",
    "start": "1620039",
    "end": "1621640"
  },
  {
    "text": "descriptor that logically makes sense um",
    "start": "1621640",
    "end": "1623799"
  },
  {
    "text": "but there's some significant drawbacks",
    "start": "1623799",
    "end": "1624960"
  },
  {
    "text": "to that approach and I personally when I",
    "start": "1624960",
    "end": "1626279"
  },
  {
    "text": "write them I always store them on the",
    "start": "1626279",
    "end": "1627640"
  },
  {
    "text": "object with a field of the same",
    "start": "1627640",
    "end": "1630960"
  },
  {
    "text": "name hello oh um so you use you showed",
    "start": "1631279",
    "end": "1635080"
  },
  {
    "text": "your examples of showing descriptors for",
    "start": "1635080",
    "end": "1637919"
  },
  {
    "text": "objects as attributes on your classes",
    "start": "1637919",
    "end": "1641240"
  },
  {
    "text": "what in which cases would you want to",
    "start": "1641240",
    "end": "1643399"
  },
  {
    "text": "use a uh descriptor uh for a function",
    "start": "1643399",
    "end": "1648120"
  },
  {
    "text": "on a",
    "start": "1648120",
    "end": "1650559"
  },
  {
    "text": "class so intercepting access to a",
    "start": "1654720",
    "end": "1657440"
  },
  {
    "text": "function function yeah I've seen that",
    "start": "1657440",
    "end": "1659399"
  },
  {
    "text": "before but I can't remember why they did",
    "start": "1659399",
    "end": "1662120"
  },
  {
    "text": "it the the normal way we're kind of",
    "start": "1662120",
    "end": "1663679"
  },
  {
    "text": "attaching descriptors is yeah it kind of",
    "start": "1663679",
    "end": "1665480"
  },
  {
    "text": "looks like fields and we're thinking",
    "start": "1665480",
    "end": "1666919"
  },
  {
    "text": "about these things as attributes just",
    "start": "1666919",
    "end": "1668200"
  },
  {
    "text": "pieces of data and not thinking about",
    "start": "1668200",
    "end": "1669480"
  },
  {
    "text": "them as functions but that last one that",
    "start": "1669480",
    "end": "1671279"
  },
  {
    "text": "I did see if I can get to it here",
    "start": "1671279",
    "end": "1674140"
  },
  {
    "text": "[Music]",
    "start": "1674140",
    "end": "1675640"
  },
  {
    "text": "um it's important to realize",
    "start": "1675640",
    "end": "1679519"
  },
  {
    "text": "where's the implementation here we",
    "start": "1680760",
    "end": "1684799"
  },
  {
    "text": "go this at Lazy property decorator thing",
    "start": "1685039",
    "end": "1689000"
  },
  {
    "text": "is making a descriptor and returning it",
    "start": "1689000",
    "end": "1691760"
  },
  {
    "text": "in place of this function that I made",
    "start": "1691760",
    "end": "1695000"
  },
  {
    "text": "and then this function X is going to be",
    "start": "1695000",
    "end": "1696640"
  },
  {
    "text": "called by my descriptor so I am totally",
    "start": "1696640",
    "end": "1698559"
  },
  {
    "text": "replacing a function with a descriptor",
    "start": "1698559",
    "end": "1700679"
  },
  {
    "text": "and if you're going to do that The",
    "start": "1700679",
    "end": "1701880"
  },
  {
    "text": "Decorator syntax and decorators are take",
    "start": "1701880",
    "end": "1704120"
  },
  {
    "text": "a callable and give a callable back in",
    "start": "1704120",
    "end": "1705919"
  },
  {
    "text": "its place seems like the right thing to",
    "start": "1705919",
    "end": "1707240"
  },
  {
    "text": "use",
    "start": "1707240",
    "end": "1708720"
  },
  {
    "text": "it's extremely common I might say to to",
    "start": "1708720",
    "end": "1710760"
  },
  {
    "text": "write descriptors and then apply them as",
    "start": "1710760",
    "end": "1712320"
  },
  {
    "text": "function or apply them as",
    "start": "1712320",
    "end": "1715240"
  },
  {
    "text": "decorators cool so uh I I I thought",
    "start": "1719679",
    "end": "1722519"
  },
  {
    "text": "about doing this at the beginning but I",
    "start": "1722519",
    "end": "1723720"
  },
  {
    "text": "thought I might be um too discouraged",
    "start": "1723720",
    "end": "1725720"
  },
  {
    "text": "has anybody written descriptors in the",
    "start": "1725720",
    "end": "1727480"
  },
  {
    "text": "audience raise a",
    "start": "1727480",
    "end": "1729760"
  },
  {
    "text": "hand so it's my perception that this is",
    "start": "1729760",
    "end": "1732159"
  },
  {
    "text": "an underutilized feature of the Python",
    "start": "1732159",
    "end": "1734440"
  },
  {
    "text": "language and maybe it's like meta",
    "start": "1734440",
    "end": "1735519"
  },
  {
    "text": "classes there's a lot of details uh to",
    "start": "1735519",
    "end": "1737880"
  },
  {
    "text": "manage but I do look at Frameworks like",
    "start": "1737880",
    "end": "1739360"
  },
  {
    "text": "Django and see really effective use um",
    "start": "1739360",
    "end": "1742200"
  },
  {
    "text": "uh using descriptors to manage uh",
    "start": "1742200",
    "end": "1744240"
  },
  {
    "text": "complicated types so I'm actually kind",
    "start": "1744240",
    "end": "1746120"
  },
  {
    "text": "of encouraged to go out and look for use",
    "start": "1746120",
    "end": "1747279"
  },
  {
    "text": "cases for Des scriptures I kind of was",
    "start": "1747279",
    "end": "1748720"
  },
  {
    "text": "hoping I'd do that for you too any other",
    "start": "1748720",
    "end": "1752518"
  },
  {
    "text": "questions",
    "start": "1755799",
    "end": "1758340"
  },
  {
    "text": "[Applause]",
    "start": "1758340",
    "end": "1765849"
  },
  {
    "text": "cool",
    "start": "1766320",
    "end": "1769320"
  }
]