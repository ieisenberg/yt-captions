[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "the Stokes is about callbacks callback",
    "start": "25399",
    "end": "31169"
  },
  {
    "text": "patterns and mediums I am not really going to be able to cover the",
    "start": "31169",
    "end": "38539"
  },
  {
    "text": "alternative to callbacks to do similar tasks which are very important but I",
    "start": "38539",
    "end": "44670"
  },
  {
    "text": "will briefly mention them and maybe I'll need at some point to have a follow-up",
    "start": "44670",
    "end": "51030"
  },
  {
    "text": "talk because they're starting to emerge the URL here don't have to join it down",
    "start": "51030",
    "end": "57179"
  },
  {
    "text": "now it will also mean the last slide is the PDF with exactly these slides I've",
    "start": "57179",
    "end": "64280"
  },
  {
    "start": "63000",
    "end": "173000"
  },
  {
    "text": "picked this talk because it aims at a pretty broad range of competence levels",
    "start": "64280",
    "end": "72450"
  },
  {
    "text": "in Python and programming in general you know every discipline goes through three",
    "start": "72450",
    "end": "79500"
  },
  {
    "text": "stages which in Japanese theater and",
    "start": "79500",
    "end": "84630"
  },
  {
    "text": "later from that in martial arts are often named Shu Hari first you need to",
    "start": "84630",
    "end": "92969"
  },
  {
    "text": "retain the basics and then you gradually",
    "start": "92969",
    "end": "99320"
  },
  {
    "text": "detach from the basis into actual practice and finally when you're a real",
    "start": "99320",
    "end": "107430"
  },
  {
    "text": "master of anything you transcend all the details you've been taught towards the",
    "start": "107430",
    "end": "115259"
  },
  {
    "text": "perfection of the experience so this talk needs you to be at least",
    "start": "115259",
    "end": "125100"
  },
  {
    "text": "midway through Shu if you're over midway through re and find yourself bored",
    "start": "125100",
    "end": "130740"
  },
  {
    "text": "please stick around because I really want to drink at the fount of your wisdom",
    "start": "130740",
    "end": "135770"
  },
  {
    "text": "but quite a few people have been privileged to interact with that's",
    "start": "135770",
    "end": "141330"
  },
  {
    "text": "another advantage of working at Google you're very unlikely to be the best at anything there's always somebody better",
    "start": "141330",
    "end": "148170"
  },
  {
    "text": "than you that you can learn from I realize this requires to be actually a",
    "start": "148170",
    "end": "154170"
  },
  {
    "text": "hundred percent true would require us to have an infinite number of employees because otherwise there's going to be",
    "start": "154170",
    "end": "159750"
  },
  {
    "text": "one who is best at something but we're trying that's what we're hiring all the",
    "start": "159750",
    "end": "164910"
  },
  {
    "text": "time we're striving towards that infinite number of employees that will allow us to make that actually hundred",
    "start": "164910",
    "end": "172050"
  },
  {
    "text": "percent true okay what's a callback they",
    "start": "172050",
    "end": "177320"
  },
  {
    "start": "173000",
    "end": "409000"
  },
  {
    "text": "concept which by now is like old and totally digested but used to be somewhat",
    "start": "177320",
    "end": "184730"
  },
  {
    "text": "perturbing is when some library or framework is going to call your",
    "start": "184730",
    "end": "192750"
  },
  {
    "text": "functions the traditional concept of a library born in the 50s and the 60s was",
    "start": "192750",
    "end": "198720"
  },
  {
    "text": "hey here's a bunch of functions go ahead and call them to do cool stuff for you",
    "start": "198720",
    "end": "204120"
  },
  {
    "text": "in the callback things are reversed you don't call them they call you why would",
    "start": "204120",
    "end": "211560"
  },
  {
    "text": "that be helpful the principle has been",
    "start": "211560",
    "end": "218220"
  },
  {
    "text": "named by Richard sweet it is a sweet pun the Hollywood principle you know you go",
    "start": "218220",
    "end": "225510"
  },
  {
    "text": "to Hollywood I don't know if you bother going to Southern California but to like try out for some big part like out there",
    "start": "225510",
    "end": "235500"
  },
  {
    "text": "on the stage doing it thank you don't call us we'll call you that's actually not a particularly promising",
    "start": "235500",
    "end": "243290"
  },
  {
    "text": "introduction in that in that concept but this shows essentially that the date of",
    "start": "243290",
    "end": "252150"
  },
  {
    "text": "this 1985 for some of you is like wow I'm older than the concept of callbacks",
    "start": "252150",
    "end": "257690"
  },
  {
    "text": "for some reasons like cool I was already working then I was recently mentioned",
    "start": "257690",
    "end": "264090"
  },
  {
    "text": "although our very young grandfather I'm a grandfather now so so what is the",
    "start": "264090",
    "end": "270490"
  },
  {
    "text": "purpose of being called back by libraries or framework I classify that",
    "start": "270490",
    "end": "281140"
  },
  {
    "text": "into two possible motivations which will both explore one is get better",
    "start": "281140",
    "end": "288550"
  },
  {
    "text": "flexibility by customizing some aspects of how the framework is working for you",
    "start": "288550",
    "end": "295000"
  },
  {
    "text": "instead of having to tell the framework this is how you work at the very start with some initialization call the",
    "start": "295000",
    "end": "301510"
  },
  {
    "text": "framework calls back to you whenever it needs to know what do I do here your callback function will tell it and this",
    "start": "301510",
    "end": "309190"
  },
  {
    "text": "is one important class for which I would say there are very few alternatives this",
    "start": "309190",
    "end": "317230"
  },
  {
    "text": "is simply the fact that instead of giving the parameters of exactly how the",
    "start": "317230",
    "end": "323410"
  },
  {
    "text": "operation must go once and for all at the start you give them like every time",
    "start": "323410",
    "end": "330280"
  },
  {
    "text": "so it can change the penning on situation and so on that's a nonpareil flexibility and then there's all the",
    "start": "330280",
    "end": "338280"
  },
  {
    "text": "event-driven architecture event-driven architecture was actually born in the",
    "start": "338280",
    "end": "344380"
  },
  {
    "text": "world where events outside of the system actually occur and are important to",
    "start": "344380",
    "end": "349630"
  },
  {
    "text": "react to probably started with graphical user interfaces so around the early 80s",
    "start": "349630",
    "end": "357820"
  },
  {
    "text": "when gooeys were coming of age or late 70s in the research world and then",
    "start": "357820",
    "end": "363940"
  },
  {
    "text": "somebody noticed that hey networks work exactly that way stuff is happening outside it's not a human being it's some",
    "start": "363940",
    "end": "370600"
  },
  {
    "text": "other node in the network but things are happening and need to be responded to and they concept for people whose minds",
    "start": "370600",
    "end": "379540"
  },
  {
    "text": "are sufficiently warped which I hope covers most of us it proved to be such a",
    "start": "379540",
    "end": "385780"
  },
  {
    "text": "useful concept that artificial events just to be able to structure your program in an event-driven way were also",
    "start": "385780",
    "end": "392890"
  },
  {
    "text": "introduced I call these pseudo events and those are of course items for which",
    "start": "392890",
    "end": "398740"
  },
  {
    "text": "there are any alternatives I'm just trying to show why would somebody want to program like",
    "start": "398740",
    "end": "406090"
  },
  {
    "text": "that in a couple of situations what the implementation of a callback no matter",
    "start": "406090",
    "end": "411460"
  },
  {
    "start": "409000",
    "end": "552000"
  },
  {
    "text": "what the purpose of the callback is I spent some time discussing why would you want to do that how would you want to do",
    "start": "411460",
    "end": "418450"
  },
  {
    "text": "that well you just need to have a language with Co level objects which",
    "start": "418450",
    "end": "424120"
  },
  {
    "text": "with the possible exception of Java I believe applies to every modern language somebody would say not having",
    "start": "424120",
    "end": "431920"
  },
  {
    "text": "first-class callable means Java is not a modern language it's a relic of the deep",
    "start": "431920",
    "end": "437440"
  },
  {
    "text": "past every every language that you pass around even see this you pass around a",
    "start": "437440",
    "end": "443050"
  },
  {
    "text": "function for Christ's sake it's not doesn't it take and and C was written by",
    "start": "443050",
    "end": "448150"
  },
  {
    "text": "a guy who's older than me now so it's really not the newest languages only you",
    "start": "448150",
    "end": "455620"
  },
  {
    "text": "hand that call a bowl object over to some part of the framework whoever",
    "start": "455620",
    "end": "462610"
  },
  {
    "text": "you're handing it off to I'd better stash it somewhere somewhere might be",
    "start": "462610",
    "end": "468430"
  },
  {
    "text": "very transient maybe just on stays a local variable if they scope in which",
    "start": "468430",
    "end": "473860"
  },
  {
    "text": "the callback needs to happen is limited to the execution of a single function or else it will put it in a container said",
    "start": "473860",
    "end": "480850"
  },
  {
    "text": "it has an attribute you don't really care from the outside what how does the",
    "start": "480850",
    "end": "486340"
  },
  {
    "text": "framework preserve your callable object just make sure that it does and then if",
    "start": "486340",
    "end": "493360"
  },
  {
    "text": "and when appropriate at some point in the future this colorable object of",
    "start": "493360",
    "end": "500110"
  },
  {
    "text": "yours gets cold called back because you originally did some kind of call to",
    "start": "500110",
    "end": "505740"
  },
  {
    "text": "handover the caller Bo and now you get the call back either because it needs to",
    "start": "505740",
    "end": "513460"
  },
  {
    "text": "know something to customize the operation that's the first kind of motivation or appropriate events occur",
    "start": "513460",
    "end": "520169"
  },
  {
    "text": "like state changes user actions a yo event network canal system stuff that",
    "start": "520170",
    "end": "530710"
  },
  {
    "text": "the system is about to catch on fire you better do something about it or events can be made up for structuring",
    "start": "530710",
    "end": "538890"
  },
  {
    "text": "control flaw property as well see now customization is not necessarily limited",
    "start": "538890",
    "end": "544649"
  },
  {
    "text": "to tailors anymore we also want to do it in software system and let's take a",
    "start": "544649",
    "end": "550230"
  },
  {
    "text": "really simple example I have a list of stuff things in this case probably",
    "start": "550230",
    "end": "556829"
  },
  {
    "start": "552000",
    "end": "895000"
  },
  {
    "text": "strings I want to sort them but not just sort them any which way sort them in a",
    "start": "556829",
    "end": "563070"
  },
  {
    "text": "customized way for example I'd really like to sort them in a case insensitive",
    "start": "563070",
    "end": "568110"
  },
  {
    "text": "way how do I do that well let's read the",
    "start": "568110",
    "end": "573149"
  },
  {
    "text": "things backward the original approach to",
    "start": "573149",
    "end": "579570"
  },
  {
    "text": "doing this which I kind of rolled up I discovered I didn't invent it it was",
    "start": "579570",
    "end": "585180"
  },
  {
    "text": "already being used an important code and called the DSU for decorate sort and",
    "start": "585180",
    "end": "590310"
  },
  {
    "text": "decorate proceeds like that I make an auxiliary there stuff which includes the",
    "start": "590310",
    "end": "597990"
  },
  {
    "text": "objects of the list their indices and some kind of key function apply to them",
    "start": "597990",
    "end": "605250"
  },
  {
    "text": "which comes first and then I can use a natural sort the lexicographical sort of",
    "start": "605250",
    "end": "612240"
  },
  {
    "text": "python things with different keys are sorted in order key if the keys are",
    "start": "612240",
    "end": "618720"
  },
  {
    "text": "equal then the indices are going to be different",
    "start": "618720",
    "end": "623730"
  },
  {
    "text": "note that the object themselves never end up being compared that's actually an",
    "start": "623730",
    "end": "628860"
  },
  {
    "text": "important detail of the semantics of TSU and then I have two undecorated is",
    "start": "628860",
    "end": "636180"
  },
  {
    "text": "extract the objects back into my list this is for an in place sort of my list",
    "start": "636180",
    "end": "642779"
  },
  {
    "text": "so this is and was a great idea but it really kind of cumbersome to have to",
    "start": "642779",
    "end": "648660"
  },
  {
    "text": "keep coding it so Raymond Hettinger who you had the pleasure to listening to",
    "start": "648660",
    "end": "654449"
  },
  {
    "text": "last year said hey I'm coding this sort",
    "start": "654449",
    "end": "660870"
  },
  {
    "text": "of thing all the time it's getting boring",
    "start": "660870",
    "end": "666240"
  },
  {
    "text": "I don't I put it in their interiors of the sort method if after all the only",
    "start": "666240",
    "end": "672510"
  },
  {
    "text": "thing that changes between one specialized sorting and another is what",
    "start": "672510",
    "end": "678360"
  },
  {
    "text": "function do I call to get the sorting key out of the objects so let me just",
    "start": "678360",
    "end": "684330"
  },
  {
    "text": "pass the sorting key in this case I'm using the two upper method of object",
    "start": "684330",
    "end": "691950"
  },
  {
    "text": "class a type STR because they'd better all be strings it wouldn't work if I had",
    "start": "691950",
    "end": "699630"
  },
  {
    "text": "some Unicode things there and therein lies a tale well but as long as they're",
    "start": "699630",
    "end": "706290"
  },
  {
    "text": "all byte strings in in Python 2 something this thing and by doing all of",
    "start": "706290",
    "end": "712560"
  },
  {
    "text": "these internals internally where they should be done I strongly recommend to",
    "start": "712560",
    "end": "718500"
  },
  {
    "text": "any Python ista with decent C background to study they Python C internal so",
    "start": "718500",
    "end": "724200"
  },
  {
    "text": "they're extremely interesting but essentially does all of this internally",
    "start": "724200",
    "end": "731190"
  },
  {
    "text": "and so it can also be much faster as well as abstracting away all the details",
    "start": "731190",
    "end": "737010"
  },
  {
    "text": "of the implementation it does guarantee for example that the objects themselves will never be compared directly so you",
    "start": "737010",
    "end": "743310"
  },
  {
    "text": "could apply to with a appropriate key to say a list of complex numbers you can",
    "start": "743310",
    "end": "748589"
  },
  {
    "text": "never compare to complex numbers for greater than less than and that would raise an exception but with D s you use",
    "start": "748589",
    "end": "756480"
  },
  {
    "text": "apps for example so they the objects are sorted in in order of of absolute value",
    "start": "756480",
    "end": "766730"
  },
  {
    "text": "you're going to be absolutely fine you also gain an advantage of",
    "start": "766730",
    "end": "772290"
  },
  {
    "text": "abstraction you're working at a higher level of abstraction when you're using",
    "start": "772290",
    "end": "777930"
  },
  {
    "text": "the callback customization then you are when you boringly code it out as usual",
    "start": "777930",
    "end": "785370"
  },
  {
    "text": "more often than not in Python the higher abstraction you think and work out the",
    "start": "785370",
    "end": "791550"
  },
  {
    "text": "faster you get that's exactly the reverse of what you get with most",
    "start": "791550",
    "end": "796920"
  },
  {
    "text": "languages which are Thunder Stepanov called the obstruction penalty how much does it cost me how",
    "start": "796920",
    "end": "805110"
  },
  {
    "text": "much does it slow me down to use abstraction in Python typically the",
    "start": "805110",
    "end": "812430"
  },
  {
    "text": "obstruction penalty is an obstruction premium you actually get to rewarded for",
    "start": "812430",
    "end": "818130"
  },
  {
    "text": "being more concise higher-level and more abstract and this DSU example is a",
    "start": "818130",
    "end": "824340"
  },
  {
    "text": "perfect one now I did kind of mention in passing a little problem if I was doing",
    "start": "824340",
    "end": "831480"
  },
  {
    "text": "the comparison directly instead of passing on the key function I would have",
    "start": "831480",
    "end": "837390"
  },
  {
    "text": "a and B and I would say a to upper open calls less than B to upper open calls I",
    "start": "837390",
    "end": "843870"
  },
  {
    "text": "would be calling the method to offer on the objects a and B this way I'm not",
    "start": "843870",
    "end": "849900"
  },
  {
    "text": "really calling the method on the objects I need to call some callable on each",
    "start": "849900",
    "end": "855870"
  },
  {
    "text": "object so I'd better have a callable that can be applied to each object so",
    "start": "855870",
    "end": "861600"
  },
  {
    "text": "I'm kind of breaking the abstraction layer of object-oriented programming we",
    "start": "861600",
    "end": "867770"
  },
  {
    "text": "sometimes okay like if I know that all the objects are of class str then",
    "start": "867770",
    "end": "874050"
  },
  {
    "text": "passing a method extracted from the class str will be fine and not too badly",
    "start": "874050",
    "end": "880500"
  },
  {
    "text": "break the abstraction of object-oriented programming but sometimes you really",
    "start": "880500",
    "end": "887520"
  },
  {
    "text": "need to be getting properties or calling method in the object-oriented way how do",
    "start": "887520",
    "end": "893850"
  },
  {
    "text": "you do that then well you typically start by import operator standard",
    "start": "893850",
    "end": "902750"
  },
  {
    "start": "895000",
    "end": "1251000"
  },
  {
    "text": "library module 2h Revan Hettinger you",
    "start": "902750",
    "end": "908700"
  },
  {
    "text": "may already be familiar with a name added a couple of useful tweaks operator has been around forever but it typically",
    "start": "908700",
    "end": "915540"
  },
  {
    "text": "abstracts into callable such things as addition multiplication you know operators raymond handed after getter",
    "start": "915540",
    "end": "924320"
  },
  {
    "text": "and i don't think this was him but somebody in the same vein added method",
    "start": "924320",
    "end": "929970"
  },
  {
    "text": "collar so utter getter you give it the name of an attribute and it gives you back a color so it",
    "start": "929970",
    "end": "937620"
  },
  {
    "text": "dynamically constructs and returns a color that will directly call that",
    "start": "937620",
    "end": "946970"
  },
  {
    "text": "extract that property or attribute from the objects so if your objects carry an",
    "start": "946970",
    "end": "956100"
  },
  {
    "text": "attribute K which is the key along which you want them to be sorted this is how",
    "start": "956100",
    "end": "961620"
  },
  {
    "text": "you do it I already mentioned the possibility of extracting from the class to which all day all the objects must",
    "start": "961620",
    "end": "969750"
  },
  {
    "text": "belong some method without arguments that may be a bit restrictive maybe also",
    "start": "969750",
    "end": "975089"
  },
  {
    "text": "want to pass some arguments well then you can use the method color method note",
    "start": "975089",
    "end": "981930"
  },
  {
    "text": "that this in some environments is known",
    "start": "981930",
    "end": "987540"
  },
  {
    "text": "as higher-order programming so take it as a compliment when you're calling a",
    "start": "987540",
    "end": "994170"
  },
  {
    "text": "function that returns another function in some languages that's called",
    "start": "994170",
    "end": "999510"
  },
  {
    "text": "higher-order programming in Python it's I believe just as easy as two plus two",
    "start": "999510",
    "end": "1005839"
  },
  {
    "text": "so method color takes the method name and arbitrary set of position and",
    "start": "1005839",
    "end": "1012769"
  },
  {
    "text": "keyword argument and will extract this method and call it with this argument",
    "start": "1012769",
    "end": "1017810"
  },
  {
    "text": "from each object to obtain the sorting key of course I usually get at this",
    "start": "1017810",
    "end": "1026089"
  },
  {
    "text": "point of rejection but I could have written a lambda to do that well you could have but you don't have",
    "start": "1026089",
    "end": "1033048"
  },
  {
    "text": "to and when you can avoid lambda you're usually going to be much happier don't",
    "start": "1033049",
    "end": "1040100"
  },
  {
    "text": "believe me time this use the Python - M",
    "start": "1040100",
    "end": "1045140"
  },
  {
    "text": "time it approach and see how many microsecond or nanosecond does it take",
    "start": "1045140",
    "end": "1052429"
  },
  {
    "text": "to do this versus doing that and you'll find out that avoiding lambda",
    "start": "1052429",
    "end": "1058309"
  },
  {
    "text": "programming at a higher level of abstraction rewards you with better performance now to see if",
    "start": "1058309",
    "end": "1066300"
  },
  {
    "text": "anybody was following on what's common to all these approaches and this one",
    "start": "1066300",
    "end": "1072350"
  },
  {
    "text": "that I couldn't just have done wait a second they they see approach is",
    "start": "1072350",
    "end": "1082260"
  },
  {
    "text": "different I remember doing sorting see I also pass in a function but a passing a",
    "start": "1082260",
    "end": "1088350"
  },
  {
    "text": "function that gets called with two arguments and master returns minus 1 0",
    "start": "1088350",
    "end": "1095250"
  },
  {
    "text": "or +1 depending if they're to be considered equal or one is less one is more what does this key abstract key",
    "start": "1095250",
    "end": "1104240"
  },
  {
    "text": "extraction concept by me I'm more used to passing in the comparator function",
    "start": "1104240",
    "end": "1110280"
  },
  {
    "text": "unfortunately sort given that Python was",
    "start": "1110280",
    "end": "1115880"
  },
  {
    "text": "obviously heavily inspired by C at many levels they're very close languages philosophically also as a CMP optional",
    "start": "1115880",
    "end": "1124880"
  },
  {
    "text": "argument that lets you pass a callable that will perform the comparison just",
    "start": "1124880",
    "end": "1130530"
  },
  {
    "text": "like in C why would you want to use a key approach versus the C like approach",
    "start": "1130530",
    "end": "1139170"
  },
  {
    "text": "of passing in the comparison the answer",
    "start": "1139170",
    "end": "1145610"
  },
  {
    "text": "can be a single uppercase letter",
    "start": "1145610",
    "end": "1152330"
  },
  {
    "text": "it could and therefore what's a single uppercase letter that explains why you",
    "start": "1156530",
    "end": "1162810"
  },
  {
    "text": "want to do it with key Big O I hope we have a piece of shrug for this guy who",
    "start": "1162810",
    "end": "1169080"
  },
  {
    "text": "got it exactly the number of comparison you're doing is going to be Big O n log",
    "start": "1169080",
    "end": "1175320"
  },
  {
    "text": "n the number of comparison you're doing grows more than linearly not that much",
    "start": "1175320",
    "end": "1182040"
  },
  {
    "text": "more log n is well behaved function but still in this way all you need to do is",
    "start": "1182040",
    "end": "1187860"
  },
  {
    "text": "to be go of n is actually exactly n you need to extract the keys once per object",
    "start": "1187860",
    "end": "1195810"
  },
  {
    "text": "so n times for an object so of course you get faster especially if as the",
    "start": "1195810",
    "end": "1202230"
  },
  {
    "text": "other gentleman said the key is costly to extract this system can in this case",
    "start": "1202230",
    "end": "1209010"
  },
  {
    "text": "very explicitly cache the key computation for you but the key equal",
    "start": "1209010",
    "end": "1216930"
  },
  {
    "text": "argument does it just the same so thank you for the cooperation and the",
    "start": "1216930",
    "end": "1223160"
  },
  {
    "text": "first-order success also key equal is",
    "start": "1223160",
    "end": "1228450"
  },
  {
    "text": "not only for sorting it's such a handy thing that it was generalized to max",
    "start": "1228450",
    "end": "1234060"
  },
  {
    "text": "mean almost everywhere you'd really want to use key transformation instead of",
    "start": "1234060",
    "end": "1243170"
  },
  {
    "text": "okay if you're really deep into all the customization of just for sorting but in",
    "start": "1243170",
    "end": "1250500"
  },
  {
    "text": "a more general case he's done vehicle back in the somewhat rigid design",
    "start": "1250500",
    "end": "1257700"
  },
  {
    "start": "1251000",
    "end": "1357000"
  },
  {
    "text": "pattern known as template method the template method design pattern has been",
    "start": "1257700",
    "end": "1264060"
  },
  {
    "text": "described somewhere perhaps with a bit of an excessive enthusiasm as the spirit",
    "start": "1264060",
    "end": "1270840"
  },
  {
    "text": "of object orientation I have a long presentation at this URL I suggest you",
    "start": "1270840",
    "end": "1283140"
  },
  {
    "text": "get the PDF the the URL the some of the first and last page and",
    "start": "1283140",
    "end": "1288200"
  },
  {
    "text": "as opposed to try to write this one down and then follow this at slide 49 and",
    "start": "1288200",
    "end": "1293539"
  },
  {
    "text": "following because it's a presentation on all sort of classic design patterns as",
    "start": "1293539",
    "end": "1299029"
  },
  {
    "text": "they occur and get applied to Python it's somewhat rigid and I also suggest",
    "start": "1299029",
    "end": "1305929"
  },
  {
    "text": "all sort of more flexible alternatives but the general point is that in some",
    "start": "1305929",
    "end": "1313399"
  },
  {
    "text": "abstract class parent class you call self some hook method and then the child",
    "start": "1313399",
    "end": "1321230"
  },
  {
    "text": "classes implement the hook method this isn't obvious but it's always also a",
    "start": "1321230",
    "end": "1326330"
  },
  {
    "text": "case of callback it's not obvious because you're not like handing over explicitly the color ball but you're",
    "start": "1326330",
    "end": "1333919"
  },
  {
    "text": "creating the color ball by overriding the some hoc method in the concrete",
    "start": "1333919",
    "end": "1340970"
  },
  {
    "text": "child class and that is how the objects",
    "start": "1340970",
    "end": "1346519"
  },
  {
    "text": "find the the organizing method finds they hook method to call let's get",
    "start": "1346519",
    "end": "1354710"
  },
  {
    "text": "another example of customization which unfortunately isn't surviving in the",
    "start": "1354710",
    "end": "1360440"
  },
  {
    "start": "1357000",
    "end": "1752000"
  },
  {
    "text": "Python standard library but I still think was a very nice between design",
    "start": "1360440",
    "end": "1365649"
  },
  {
    "text": "scheduling I want to be able to schedule a series of events the events I'm",
    "start": "1365649",
    "end": "1374630"
  },
  {
    "text": "scheduling are of course going to be in concrete calls to my method so there's also this like normal semantic",
    "start": "1374630",
    "end": "1382700"
  },
  {
    "text": "event-driven level of callbacks but forget that for a moment the point is I want this to be",
    "start": "1382700",
    "end": "1390679"
  },
  {
    "text": "called in five minutes or I want that to be called at exactly 9:00 p.m. and so on",
    "start": "1390679",
    "end": "1396830"
  },
  {
    "text": "and so forth how if you think about it how you're going to implement this well",
    "start": "1396830",
    "end": "1402169"
  },
  {
    "text": "you're going to keep a queue of things and you will need two core",
    "start": "1402169",
    "end": "1408610"
  },
  {
    "text": "functionalities some way to tell what time is it right now and some time to",
    "start": "1408610",
    "end": "1414320"
  },
  {
    "text": "say sleep until the time of the first scheduled event to occur so you",
    "start": "1414320",
    "end": "1421200"
  },
  {
    "text": "just spin around in a tight loop asking are we there yet are we there yet are we there yet I'm looking forward I had my",
    "start": "1421200",
    "end": "1428039"
  },
  {
    "text": "experience with my children like every parent I'm looking forward having it again once my now two month old grandson",
    "start": "1428039",
    "end": "1436470"
  },
  {
    "text": "gets old enough to speak and be driven around they one way you could consider",
    "start": "1436470",
    "end": "1448080"
  },
  {
    "text": "would be well they old fashioned but",
    "start": "1448080",
    "end": "1453120"
  },
  {
    "text": "still present time module offers timed",
    "start": "1453120",
    "end": "1458159"
  },
  {
    "text": "up time to tell me what time it is and time to sleep it's time sleep to wait",
    "start": "1458159",
    "end": "1464250"
  },
  {
    "text": "and for a certain duration of time so I could have as a scheduler object except",
    "start": "1464250",
    "end": "1473750"
  },
  {
    "text": "the module as an argument modular objects like any other thing and just call it time and sleep functions or",
    "start": "1473750",
    "end": "1485460"
  },
  {
    "text": "methods doesn't isn't really any deep difference in terms of the syntax so",
    "start": "1485460",
    "end": "1491309"
  },
  {
    "text": "that schedule we'll be using if you're focused more on functional programming",
    "start": "1491309",
    "end": "1497519"
  },
  {
    "text": "than object-oriented programming you end up with the architecture that was in the",
    "start": "1497519",
    "end": "1503519"
  },
  {
    "text": "Python standard library you pass separately they time time function and",
    "start": "1503519",
    "end": "1508799"
  },
  {
    "text": "they times three function so that you they normally will have to go hand in",
    "start": "1508799",
    "end": "1515130"
  },
  {
    "text": "hand how you tell what time it is and how do you wait until or for a certain",
    "start": "1515130",
    "end": "1520980"
  },
  {
    "text": "time had better be synchronized with each other which is the argument for having them as method of a single object",
    "start": "1520980",
    "end": "1527610"
  },
  {
    "text": "on the other hand advantages of passing them separately you don't need them to",
    "start": "1527610",
    "end": "1533549"
  },
  {
    "text": "be named time injury for example you can name them anything but that's clearer in",
    "start": "1533549",
    "end": "1539190"
  },
  {
    "text": "your context because the scheduler would receive them as color blob jects it doesn't care what they're called it just",
    "start": "1539190",
    "end": "1545730"
  },
  {
    "text": "calls them it holds them internally and another factor you could also",
    "start": "1545730",
    "end": "1554250"
  },
  {
    "text": "supply default for them if you want to allow your user to customize you buy",
    "start": "1554250",
    "end": "1561929"
  },
  {
    "text": "call back but not require them to do so you could have the to function default",
    "start": "1561929",
    "end": "1568980"
  },
  {
    "text": "to time to time in times of sleep unless explicitly passed with other values",
    "start": "1568980",
    "end": "1574529"
  },
  {
    "text": "which in general convenience is not a bad thing in practice the original designers of",
    "start": "1574529",
    "end": "1582809"
  },
  {
    "text": "the of the scheduler module decided to not have any default so the user must",
    "start": "1582809",
    "end": "1589080"
  },
  {
    "text": "like is explicitly made aware of the need to specify those it's they're both",
    "start": "1589080",
    "end": "1595320"
  },
  {
    "text": "valid choices in different contexts they not going to pronounce on it they object-oriented about a evolution of",
    "start": "1595320",
    "end": "1603059"
  },
  {
    "text": "this is the dependency injection design pattern I've already given you the the",
    "start": "1603059",
    "end": "1610409"
  },
  {
    "text": "URL to my general design pattern coverage there's also unfortunately should have put the URL here but I think",
    "start": "1610409",
    "end": "1617220"
  },
  {
    "text": "if you look for Alex and mortality dependency injection you'll find my talk specifically on an in-depth in deep dive",
    "start": "1617220",
    "end": "1624149"
  },
  {
    "text": "in under the dependency injection how how is it used in Python and why it also",
    "start": "1624149",
    "end": "1630240"
  },
  {
    "text": "in a sense boils down more often than not to callbacks although you could give",
    "start": "1630240",
    "end": "1636690"
  },
  {
    "text": "no callable objects but mostly you will be given call above such as factories so",
    "start": "1636690",
    "end": "1642840"
  },
  {
    "text": "this is the part where I cover call",
    "start": "1642840",
    "end": "1647850"
  },
  {
    "text": "backs for customization I hope it's obvious why they're more flexible as they claimed in some cases",
    "start": "1647850",
    "end": "1655289"
  },
  {
    "text": "you couldn't possibly just specify things once and for all not with",
    "start": "1655289",
    "end": "1661409"
  },
  {
    "text": "callable but with values like here you can say okay and the time it is is 5:00",
    "start": "1661409",
    "end": "1666600"
  },
  {
    "text": "p.m. okay and how do i that was the time you called me and now it's past sometime",
    "start": "1666600",
    "end": "1672419"
  },
  {
    "text": "how do i know what time is it now I obviously did that is progressing",
    "start": "1672419",
    "end": "1679919"
  },
  {
    "text": "continuously and also they what I might need not know some parameter but perform",
    "start": "1679919",
    "end": "1685919"
  },
  {
    "text": "some action like sleeping I need to do something in order to sleep that it's wait for the next",
    "start": "1685919",
    "end": "1693580"
  },
  {
    "text": "appropriate time but also if even if all they is doing is just returning a value",
    "start": "1693580",
    "end": "1702429"
  },
  {
    "text": "it can return a different value at different time like in the sorting customization case it's obviously not",
    "start": "1702429",
    "end": "1708309"
  },
  {
    "text": "just going to return 23 that wouldn't produce a very useful sorting if every object has a key of 23 you end up not",
    "start": "1708309",
    "end": "1716260"
  },
  {
    "text": "sorting anything the object that the value that gets produced must depend on",
    "start": "1716260",
    "end": "1721480"
  },
  {
    "text": "the object so the flexibility of the callback for customization is absolutely crucial any question on this part thing",
    "start": "1721480",
    "end": "1730600"
  },
  {
    "text": "or we can wait and have all the questions at the end perhaps but I'm now",
    "start": "1730600",
    "end": "1736269"
  },
  {
    "text": "going to move to events which are a rather distinct thingy for the second part so okay even's does anybody",
    "start": "1736269",
    "end": "1746919"
  },
  {
    "text": "recognize this kind of diagram okay so",
    "start": "1746919",
    "end": "1753940"
  },
  {
    "start": "1752000",
    "end": "2009000"
  },
  {
    "text": "as I keep saying but the repetition is",
    "start": "1753940",
    "end": "1760600"
  },
  {
    "text": "not because I'm becoming old and doddering by having a grandson I was old and doddering before them but it's it's",
    "start": "1760600",
    "end": "1769000"
  },
  {
    "text": "an important principle a design pattern in in writing articles or giving talks",
    "start": "1769000",
    "end": "1776730"
  },
  {
    "text": "tell them what you will tell them then tell them then tell them what you've told them that's the way people actually",
    "start": "1776730",
    "end": "1783880"
  },
  {
    "text": "retain information better so I'm trying to apply that by this pattern there are",
    "start": "1783880",
    "end": "1792220"
  },
  {
    "text": "actual events stuff that is indeed happening somewhere outside or within",
    "start": "1792220",
    "end": "1798669"
  },
  {
    "text": "the purview of the system user user do",
    "start": "1798669",
    "end": "1803740"
  },
  {
    "text": "stuff they move Mouse nice they click",
    "start": "1803740",
    "end": "1809620"
  },
  {
    "text": "buttons they saw and so forth and each of these is an external occurrence",
    "start": "1809620",
    "end": "1816970"
  },
  {
    "text": "and in the sense that you want your user interface to be able to respond for then",
    "start": "1816970",
    "end": "1824380"
  },
  {
    "text": "there's stuff more inside the system like the observer observable design",
    "start": "1824380",
    "end": "1829840"
  },
  {
    "text": "pattern one object is doing stuff another object wants to respond to some",
    "start": "1829840",
    "end": "1835240"
  },
  {
    "text": "of the stuff a former object is doing so the observe observable is a object doing",
    "start": "1835240",
    "end": "1840669"
  },
  {
    "text": "stuff and the observer is the one who needs to respond and then there's a yellow IO that I always often modeled as",
    "start": "1840669",
    "end": "1848650"
  },
  {
    "text": "in do the command and just wait until it's done but depending on who's",
    "start": "1848650",
    "end": "1856240"
  },
  {
    "text": "responding the wait might be very long and you don't necessarily want to",
    "start": "1856240",
    "end": "1861760"
  },
  {
    "text": "program it in this synchronous way you normally do like you you're reading a file you're saying X equal my file dot",
    "start": "1861760",
    "end": "1870730"
  },
  {
    "text": "read open close that may I don't know I may wait a few milliseconds who cares is",
    "start": "1870730",
    "end": "1876190"
  },
  {
    "text": "your usual attitude but depending on what your programming and depending what that file like object is the way it",
    "start": "1876190",
    "end": "1882580"
  },
  {
    "text": "might be might be very long so you might want to actually be reading a line at a time and not wait for you trying to arrive",
    "start": "1882580",
    "end": "1890260"
  },
  {
    "text": "but do something until it's dawn to something else until it's done",
    "start": "1890260",
    "end": "1895659"
  },
  {
    "text": "networks are particularly prone to that because delays can often be orders of",
    "start": "1895659",
    "end": "1901179"
  },
  {
    "text": "magnitude more than for local stuff stuff local to your system and then there are system events like the system",
    "start": "1901179",
    "end": "1909640"
  },
  {
    "text": "is getting turned off for example the program is about terminate you know",
    "start": "1909640",
    "end": "1915130"
  },
  {
    "text": "slightly smaller scale but not conceptually different from somebody operating the on/off switch on the whole",
    "start": "1915130",
    "end": "1921610"
  },
  {
    "text": "system you may want to be able to respond to that for example oh it's",
    "start": "1921610",
    "end": "1927309"
  },
  {
    "text": "about to terminate let me save some information so I can restart properly next time and then when people have had",
    "start": "1927309",
    "end": "1937480"
  },
  {
    "text": "become used enough to event so the way of thinking because they were",
    "start": "1937480",
    "end": "1943539"
  },
  {
    "text": "programming a lot of gooeys and networks and things they started making up events",
    "start": "1943539",
    "end": "1949580"
  },
  {
    "text": "be able to use those structures in where the events are not necessarily real like",
    "start": "1949580",
    "end": "1956810"
  },
  {
    "text": "even driven parsing will mention that the scheduled call back then the",
    "start": "1956810",
    "end": "1962390"
  },
  {
    "text": "concurrent callbacks is slightly different and all sort of timing and debugging which we want to really be",
    "start": "1962390",
    "end": "1969110"
  },
  {
    "text": "able to get into that much but for example I did mention tonight in passing",
    "start": "1969110",
    "end": "1975410"
  },
  {
    "text": "pythons - M time it starts the time it module the time it module needs",
    "start": "1975410",
    "end": "1982840"
  },
  {
    "text": "something some way to set up the situation and something to call repeatedly so it can call it a thousand",
    "start": "1982840",
    "end": "1990530"
  },
  {
    "text": "times and tell you how long the average time took those are conceptually",
    "start": "1990530",
    "end": "1995750"
  },
  {
    "text": "callbacks although what you usually pass a string so which off of Python code which it parses and and the same could",
    "start": "1995750",
    "end": "2003070"
  },
  {
    "text": "apply to PDB but that's not I'm not really going in depth in that part let's",
    "start": "2003070",
    "end": "2009280"
  },
  {
    "start": "2009000",
    "end": "2322000"
  },
  {
    "text": "start at the beginning where actually they practice of event-driven",
    "start": "2009280",
    "end": "2016030"
  },
  {
    "text": "programming did if not really start definitely took root heavily the early",
    "start": "2016030",
    "end": "2023950"
  },
  {
    "text": "graphical user interface frameworks they",
    "start": "2023950",
    "end": "2030600"
  },
  {
    "text": "Python used to have to come with decay inter which is a peculiar GUI framework",
    "start": "2030600",
    "end": "2037420"
  },
  {
    "text": "but it was like all others with a lot of callbacks some events are pretty",
    "start": "2037420",
    "end": "2045190"
  },
  {
    "text": "macroscopic like user clicks a button ok",
    "start": "2045190",
    "end": "2050530"
  },
  {
    "text": "user clicks a button what happens when the user clicks the button they typical",
    "start": "2050530",
    "end": "2056710"
  },
  {
    "text": "approach is something very simple a command that is a it's some sort of",
    "start": "2056710",
    "end": "2062139"
  },
  {
    "text": "argument class function gets called so it's a callback responding to the a macro event and then",
    "start": "2062140",
    "end": "2070860"
  },
  {
    "text": "Takai inter goes in-depth or allowing",
    "start": "2070860",
    "end": "2075940"
  },
  {
    "text": "you to set bindings between what you could call classes of event",
    "start": "2075940",
    "end": "2082480"
  },
  {
    "text": "and and callbacks for example enter leave that say mousers entered a widget",
    "start": "2082480",
    "end": "2090520"
  },
  {
    "text": "the mousers left a widget some key has been pressed or or you could be more",
    "start": "2090520",
    "end": "2099250"
  },
  {
    "text": "specific like a specific key price only and so on and upon that event the",
    "start": "2099250",
    "end": "2106119"
  },
  {
    "text": "handler gets called with an event argument while they command here is just",
    "start": "2106119",
    "end": "2114609"
  },
  {
    "text": "gold with our arguments this in this case the collar bolt takes an argument",
    "start": "2114609",
    "end": "2120250"
  },
  {
    "text": "which describes the event in details which attributes like which widget which",
    "start": "2120250",
    "end": "2128109"
  },
  {
    "text": "X&Y position for the mouse and so on what type of event so that a single",
    "start": "2128109",
    "end": "2134410"
  },
  {
    "text": "color Bowl by analyzing the event object can deal with slightly different",
    "start": "2134410",
    "end": "2139589"
  },
  {
    "text": "situation you can you don't have to bind to a specific widget but you can bind to",
    "start": "2139589",
    "end": "2145119"
  },
  {
    "text": "a whole class to all widgets to a certain root window and so and so on so",
    "start": "2145119",
    "end": "2151510"
  },
  {
    "text": "it's a very flexible way of binding stuff that can happen the event or classes of events on one or a group of",
    "start": "2151510",
    "end": "2160750"
  },
  {
    "text": "widgets to a callable that will be required to deal with that this is a",
    "start": "2160750",
    "end": "2168640"
  },
  {
    "text": "specific decanter system and there's plenty of other excellent ones but in",
    "start": "2168640",
    "end": "2176609"
  },
  {
    "text": "practice at a conceptual level they all work very similarly some will not have",
    "start": "2176609",
    "end": "2182920"
  },
  {
    "text": "this kind of flexibility you may have to write a big block of code to bind a",
    "start": "2182920",
    "end": "2189400"
  },
  {
    "text": "certain handler instead of matching by class by root window and so on but",
    "start": "2189400",
    "end": "2197020"
  },
  {
    "text": "that's in a sense a minor implementation detailed compared with a conceptual thing that things happen a handler gets",
    "start": "2197020",
    "end": "2204819"
  },
  {
    "text": "called the handler is responsible for doing stuff in response to the thing that happened which it either knows",
    "start": "2204819",
    "end": "2211990"
  },
  {
    "text": "implicitly when it's called without argument or gets as an so it can analyze exactly what happened",
    "start": "2211990",
    "end": "2219260"
  },
  {
    "text": "in detail are there alternatives to this some to some extent you can for example",
    "start": "2219260",
    "end": "2230800"
  },
  {
    "text": "it's described as not needing a hammer but in certain certain frameworks such as QT you can connect directly a source",
    "start": "2230800",
    "end": "2240020"
  },
  {
    "text": "of signals which I would call an answer to a sink of signals and that could",
    "start": "2240020",
    "end": "2246980"
  },
  {
    "text": "operate without you having explicitly to code what's going on but that's just",
    "start": "2246980",
    "end": "2252140"
  },
  {
    "text": "using a handler implicit in the system for example if somebody clicks here",
    "start": "2252140",
    "end": "2257420"
  },
  {
    "text": "close that window you may not have written the code the code calling this",
    "start": "2257420",
    "end": "2264050"
  },
  {
    "text": "window door close but that's only because the system supplies it for you",
    "start": "2264050",
    "end": "2269540"
  },
  {
    "text": "so it's not really a deep conceptual difference okay now this if you think of the event",
    "start": "2269540",
    "end": "2278720"
  },
  {
    "text": "happening on day on the widget is because actually the user is doing something they completely system",
    "start": "2278720",
    "end": "2285500"
  },
  {
    "text": "completely external to your your stuff but you could think it is okay the",
    "start": "2285500",
    "end": "2291589"
  },
  {
    "text": "widget has done something this status has changed in that's a slightly different conceptualization of the same",
    "start": "2291589",
    "end": "2297770"
  },
  {
    "text": "thing the mouse gets in well da the user has moved the mouse and the pointer has",
    "start": "2297770",
    "end": "2303080"
  },
  {
    "text": "gotten within this particular rectangle yes but I could see it as the state of",
    "start": "2303080",
    "end": "2308320"
  },
  {
    "text": "the widget has changed from not having the mouse in to now having the mouse in",
    "start": "2308320",
    "end": "2314530"
  },
  {
    "text": "and when you conceive of things that happen is happening to certain",
    "start": "2314530",
    "end": "2320000"
  },
  {
    "text": "particular objects you're almost arrived to the observer design pattern again",
    "start": "2320000",
    "end": "2325900"
  },
  {
    "start": "2322000",
    "end": "2743000"
  },
  {
    "text": "there's that big URL where I cover all sort of design pattern here I'm just seeing it as a specialized form of",
    "start": "2325900",
    "end": "2331849"
  },
  {
    "text": "callbacks because it is you can add observers note the plural that's a",
    "start": "2331849",
    "end": "2339290"
  },
  {
    "text": "typical often a difference where they Bui paradigm instead of saying well this",
    "start": "2339290",
    "end": "2347089"
  },
  {
    "text": "event has happened so here is the handler the deals with it we says",
    "start": "2347089",
    "end": "2352579"
  },
  {
    "text": "this widget state has changed so here are all the objects or they observer as",
    "start": "2352579",
    "end": "2361700"
  },
  {
    "text": "opposed to handler that a usual term that who are interested or potentially interested in it it's not really will",
    "start": "2361700",
    "end": "2369349"
  },
  {
    "text": "show that him more general having a single callback or multiple callbacks is",
    "start": "2369349",
    "end": "2376940"
  },
  {
    "text": "actually not that drastically different because if you did manage somehow to",
    "start": "2376940",
    "end": "2385309"
  },
  {
    "text": "force every event to correspond to a single callback ever possibly you would have managed to build a taxonomy of",
    "start": "2385309",
    "end": "2392500"
  },
  {
    "text": "events you know what suppose the mouse object has an event it",
    "start": "2392500",
    "end": "2399380"
  },
  {
    "text": "moved and the widget object has an event the mouse entered you know what one in",
    "start": "2399380",
    "end": "2406910"
  },
  {
    "text": "the other will often both happen at the same time because the way the mouse",
    "start": "2406910",
    "end": "2413000"
  },
  {
    "text": "pointer entered is because the mouse moved so you can't really constrain all",
    "start": "2413000",
    "end": "2419599"
  },
  {
    "text": "either the move Mouse has moved handler or just they Mouse's entered handler to",
    "start": "2419599",
    "end": "2428049"
  },
  {
    "text": "trigger you really want to trigger both that's a very specific example of the",
    "start": "2428049",
    "end": "2435020"
  },
  {
    "text": "philosophy of taxonomy taxonomy is never correct taxonomy is predicated on the underlying concept or something is",
    "start": "2435020",
    "end": "2442190"
  },
  {
    "text": "either A or B well I know things that are seventy-two percent a and 45 percent",
    "start": "2442190",
    "end": "2448609"
  },
  {
    "text": "B they overlap is deliberate table isn't a hundred percent taxonomy is a great",
    "start": "2448609",
    "end": "2457789"
  },
  {
    "text": "temptation for the human mind but is hardly ever right anyway in particular",
    "start": "2457789",
    "end": "2463339"
  },
  {
    "text": "it's hardly ever right when applied to all except the simplest callback",
    "start": "2463339",
    "end": "2471140"
  },
  {
    "text": "situations sunway an object must be aware that it's state is changing which",
    "start": "2471140",
    "end": "2478400"
  },
  {
    "text": "is presumably house for example it will have mutating methods it knows when a we're taking method is",
    "start": "2478400",
    "end": "2484440"
  },
  {
    "text": "call that changes the state other methods don't end it somehow keeps track",
    "start": "2484440",
    "end": "2491250"
  },
  {
    "text": "of all the observers it must inform when the state changes and it simply does it",
    "start": "2491250",
    "end": "2496980"
  },
  {
    "text": "after him after or maybe before implementing the day the stage change",
    "start": "2496980",
    "end": "2503069"
  },
  {
    "text": "every observer is notified why before why would you do that before well because maybe you want to let observer",
    "start": "2503069",
    "end": "2509490"
  },
  {
    "text": "be to the state change in in a certain situation in which case you do they",
    "start": "2509490",
    "end": "2515579"
  },
  {
    "text": "calls before implementing the state change if some object some observer",
    "start": "2515579",
    "end": "2522140"
  },
  {
    "text": "vetoes the change then you don't then you actually just quit the mutating",
    "start": "2522140",
    "end": "2528690"
  },
  {
    "text": "method otherwise you prevent the change and then call the non vetoing observers",
    "start": "2528690",
    "end": "2533930"
  },
  {
    "text": "you can have other design choices to general observer would be one that gets",
    "start": "2533930",
    "end": "2541349"
  },
  {
    "text": "informed of any state change and is totally responsible in a way that's",
    "start": "2541349",
    "end": "2546420"
  },
  {
    "text": "entirely opaque entirely inside the object to know whether it's interested",
    "start": "2546420",
    "end": "2551460"
  },
  {
    "text": "in that state change or not and that's okay so obviously the most general possible approach but often you may want",
    "start": "2551460",
    "end": "2559319"
  },
  {
    "text": "to know only off about objects of a certain kind for example I may want to",
    "start": "2559319",
    "end": "2566009"
  },
  {
    "text": "do stuff for when keys get pressed now exactly what key may be too specific but",
    "start": "2566009",
    "end": "2571349"
  },
  {
    "text": "I don't really want to be called every time a mouse moves because I just don't",
    "start": "2571349",
    "end": "2576509"
  },
  {
    "text": "care is just sheer overhead having to say if the event is not a key price then",
    "start": "2576509",
    "end": "2581940"
  },
  {
    "text": "go away it's maybe your framer lets you say only key presses are state changes",
    "start": "2581940",
    "end": "2590130"
  },
  {
    "text": "of of interest on the on the keyboard object and you again may recur instead",
    "start": "2590130",
    "end": "2596759"
  },
  {
    "text": "of having a simple color ball having a group of a group of color balls meaning",
    "start": "2596759",
    "end": "2601829"
  },
  {
    "text": "an object with several methods so that they could call for example the the",
    "start": "2601829",
    "end": "2608069"
  },
  {
    "text": "observer object might have a method that gets called on key presses one that get",
    "start": "2608069",
    "end": "2613170"
  },
  {
    "text": "called on moves and so on so they you don't have",
    "start": "2613170",
    "end": "2618520"
  },
  {
    "text": "to explicitly code yourself if it's keypress than something else if it's",
    "start": "2618520",
    "end": "2624720"
  },
  {
    "text": "mousemove something else which one makes sense depends a lot on specifics of the",
    "start": "2624720",
    "end": "2631120"
  },
  {
    "text": "framework that is organizing all this I'm just pointing out all of the design",
    "start": "2631120",
    "end": "2637060"
  },
  {
    "text": "issues if you're ever designing or if you're looking at an unfamiliar framer",
    "start": "2637060",
    "end": "2642250"
  },
  {
    "text": "consider that it may be doing things different than you're used to for possibly good reasons possibly not but",
    "start": "2642250",
    "end": "2648910"
  },
  {
    "text": "this is what you have to handle deal with similarly you can have several kind",
    "start": "2648910",
    "end": "2657430"
  },
  {
    "text": "of callbacks in that a callback might have no argument at all or reasonable",
    "start": "2657430",
    "end": "2664870"
  },
  {
    "text": "idea for example for the observer design pattern is past the target object who",
    "start": "2664870",
    "end": "2672070"
  },
  {
    "text": "stay just changed so you can use a single observer to deal in similar",
    "start": "2672070",
    "end": "2677350"
  },
  {
    "text": "fashion with different possible observed objects however this does require since",
    "start": "2677350",
    "end": "2685030"
  },
  {
    "text": "no indication is given off okay what state changed how to somehow explore so",
    "start": "2685030",
    "end": "2690610"
  },
  {
    "text": "having a description of the state changes will save all day so is the",
    "start": "2690610",
    "end": "2697870"
  },
  {
    "text": "mouse in the same place that it was before yes is the key being pressed the",
    "start": "2697870",
    "end": "2703390"
  },
  {
    "text": "same as was before yes and so on which can be rather cumbersome the description",
    "start": "2703390",
    "end": "2709690"
  },
  {
    "text": "of the event main particular has eight dogs in TK inter include okay oh and by",
    "start": "2709690",
    "end": "2715330"
  },
  {
    "text": "the way on which widget has the event occurred but first what type of event a mouse",
    "start": "2715330",
    "end": "2720850"
  },
  {
    "text": "move and then the tails like x and y-coordinates object in which the mouse",
    "start": "2720850",
    "end": "2728050"
  },
  {
    "text": "move but then this is all about the event but the collar ball themselves may",
    "start": "2728050",
    "end": "2734410"
  },
  {
    "text": "also require other arguments that aren't really connected to the specific event but to the reason it's being putting in",
    "start": "2734410",
    "end": "2740680"
  },
  {
    "text": "he's been put in charge of watching over that event for that purpose the general",
    "start": "2740680",
    "end": "2747730"
  },
  {
    "text": "solution would be sank tools dot partial which binds some are arguments positional star",
    "start": "2747730",
    "end": "2757880"
  },
  {
    "text": "a and named they start rkw pre binding them into a projected callable with",
    "start": "2757880",
    "end": "2767119"
  },
  {
    "text": "partial application this is a general thing and if okay somebody will say",
    "start": "2767119",
    "end": "2773720"
  },
  {
    "text": "lambda is a more general thing again if you avoid lambda you will hardly ever",
    "start": "2773720",
    "end": "2779140"
  },
  {
    "text": "have to complain about that having to for example set to scroll back with an",
    "start": "2779140",
    "end": "2786740"
  },
  {
    "text": "explicit functional partial why can't I just set the call back with an X with directly giving what A's and kws do I",
    "start": "2786740",
    "end": "2795710"
  },
  {
    "text": "want to pre bind why can't you do the pre binding for me the answer it perfectly well can and while I love",
    "start": "2795710",
    "end": "2804130"
  },
  {
    "text": "single-purpose tools the the difference in elegance between having the a and kW",
    "start": "2804130",
    "end": "2813230"
  },
  {
    "text": "passed directly to set B K and having to wrap the functions partial around is so",
    "start": "2813230",
    "end": "2819050"
  },
  {
    "text": "huge that I really think this is a better design in some but not all of the",
    "start": "2819050",
    "end": "2825859"
  },
  {
    "text": "Python callback systems do that I if you ever find yourself designing a whole",
    "start": "2825859",
    "end": "2831200"
  },
  {
    "text": "back system please look for they second for me just instead of just memorizing",
    "start": "2831200",
    "end": "2836480"
  },
  {
    "text": "the callable you memorize a callable tuple a in in dictionary kW in the guppy",
    "start": "2836480",
    "end": "2842270"
  },
  {
    "text": "and after and nobody needs to yes",
    "start": "2842270",
    "end": "2847390"
  },
  {
    "text": "is lambda higher level of obstructions all this not in Python lambda in Python does not allow you to",
    "start": "2854090",
    "end": "2859830"
  },
  {
    "text": "are statements in sign and therefore is not a higher level of abstention it's our abomination and greed or had wanted",
    "start": "2859830",
    "end": "2868770"
  },
  {
    "text": "to originally to delete it from Python three because he just couldn't find a good way to allow states mint in it and",
    "start": "2868770",
    "end": "2876330"
  },
  {
    "text": "that thing was never acceptable he unfortunately then let himself be",
    "start": "2876330",
    "end": "2881760"
  },
  {
    "text": "lobbied into keeping it around and so everybody who gets my talk will start",
    "start": "2881760",
    "end": "2887580"
  },
  {
    "text": "will continue to get bored by my explaining why lambda is just wrong in",
    "start": "2887580",
    "end": "2893130"
  },
  {
    "text": "Python you want Lisp you know what to find it this isn't it even though even",
    "start": "2893130",
    "end": "2899850"
  },
  {
    "text": "though my good friend Peter Nord we keep saying that well much the same but it's not other questions okay so now we come",
    "start": "2899850",
    "end": "2913740"
  },
  {
    "start": "2913000",
    "end": "3238000"
  },
  {
    "text": "to the general issue that I described earlier for for observer what if there's",
    "start": "2913740",
    "end": "2922770"
  },
  {
    "text": "more than a callback set for a single event maybe because the event falls into",
    "start": "2922770",
    "end": "2927780"
  },
  {
    "text": "two overlapping categories or maybe more directly they simplest in roughest way",
    "start": "2927780",
    "end": "2935070"
  },
  {
    "text": "is to remember and call they last handler that was set I remember doing",
    "start": "2935070",
    "end": "2942840"
  },
  {
    "text": "that about 30 years ago dealing with that about 30 years ago with pc dos 1.0",
    "start": "2942840",
    "end": "2949410"
  },
  {
    "text": "which allowed only one way to handle an",
    "start": "2949410",
    "end": "2955530"
  },
  {
    "text": "interrupt so what you did you saved the previous handler then you set yours and all the handlers were",
    "start": "2955530",
    "end": "2962700"
  },
  {
    "text": "responsible for chaining the Cole until it got well it was pretty rough indeed",
    "start": "2962700",
    "end": "2968730"
  },
  {
    "text": "but for thirty years ago I guess it was acceptable simplified the kernel if it",
    "start": "2968730",
    "end": "2974640"
  },
  {
    "text": "deserves being called the kernel alternatively why we've got like more",
    "start": "2974640",
    "end": "2980790"
  },
  {
    "text": "powerful tools now why not to remember them all well the problem is you have to still have to make some decision last in",
    "start": "2980790",
    "end": "2986870"
  },
  {
    "text": "first out first in first out or is there like a priority order it's far from",
    "start": "2986870",
    "end": "2993440"
  },
  {
    "text": "obvious also far from abuses by the way I set five callbacks to be called in",
    "start": "2993440",
    "end": "2999920"
  },
  {
    "text": "some order now how do I remove one of them if the order is specified can a",
    "start": "2999920",
    "end": "3009430"
  },
  {
    "text": "callback that just happens to come in early say okay I'm all done every other callback after me",
    "start": "3009430",
    "end": "3015250"
  },
  {
    "text": "don't even bother it the nothing to see move along move along these are very difficult design choices because you",
    "start": "3015250",
    "end": "3023260"
  },
  {
    "text": "there is no single good answer and whatever you pick you will wish in",
    "start": "3023260",
    "end": "3031420"
  },
  {
    "text": "certain other usage cases to have picked the other way around what I'm all I'm",
    "start": "3031420",
    "end": "3037150"
  },
  {
    "text": "saying here is trying to make you aware that these are promises there is no",
    "start": "3037150",
    "end": "3044260"
  },
  {
    "text": "obvious solution to them well if you don't specify the order in which",
    "start": "3044260",
    "end": "3049720"
  },
  {
    "text": "multiple callbacks occur it then follows that no callback and preempt the others",
    "start": "3049720",
    "end": "3055000"
  },
  {
    "text": "because that would make sub salutely no sense you'd give a random caliber",
    "start": "3055000",
    "end": "3060940"
  },
  {
    "text": "callback and order if you don't specify order strongly recommend like you can",
    "start": "3060940",
    "end": "3067630"
  },
  {
    "text": "get now optionally depending on how you you build your Python binary do",
    "start": "3067630",
    "end": "3072640"
  },
  {
    "text": "explicitly randomize them otherwise people will happen to will end up",
    "start": "3072640",
    "end": "3078370"
  },
  {
    "text": "relying on having read your documentation that says the order isn't guaranteed will happen to rely in",
    "start": "3078370",
    "end": "3083950"
  },
  {
    "text": "whatever order happens to eat you can now compile Python so that it randomizes",
    "start": "3083950",
    "end": "3089310"
  },
  {
    "text": "every time the order of keys in a dictionaries instead of of just not",
    "start": "3089310",
    "end": "3096490"
  },
  {
    "text": "caring I will predict that if you do a lot of unit tests 20% of your tests will",
    "start": "3096490",
    "end": "3103990"
  },
  {
    "text": "break because they just happened to rely without knowing yet on on a dictionary",
    "start": "3103990",
    "end": "3109060"
  },
  {
    "text": "order it's been happening to me so anyway if you're aware of all of",
    "start": "3109060",
    "end": "3116920"
  },
  {
    "text": "these issues you stand a chance of making this difficult decision if you're not even aware that there's a decision",
    "start": "3116920",
    "end": "3123790"
  },
  {
    "text": "to be made then your chances are much lower so depending on this decision that",
    "start": "3123790",
    "end": "3129040"
  },
  {
    "text": "will be implementation for example if if",
    "start": "3129040",
    "end": "3135580"
  },
  {
    "text": "you decide the order doesn't matter then you can use most anything like a set to",
    "start": "3135580",
    "end": "3140590"
  },
  {
    "text": "hold all the collar bolts if you decide it's last in first out or simplest out you need to keep track of the order the",
    "start": "3140590",
    "end": "3148420"
  },
  {
    "text": "the problem how to remove a collar ball is actually particularly hard but you if",
    "start": "3148420",
    "end": "3154930"
  },
  {
    "text": "you can't have exactly the same callable object and a remove function then whether it's a cent or a list you can",
    "start": "3154930",
    "end": "3162010"
  },
  {
    "text": "still look for it it will be much slower in a list if if it's a very long list but in practice in my experience you",
    "start": "3162010",
    "end": "3169240"
  },
  {
    "text": "often want to have multiple callbacks but by multiple you mean three not three",
    "start": "3169240",
    "end": "3176080"
  },
  {
    "text": "millions so even looking in a list is gonna call you so don't worry about the",
    "start": "3176080",
    "end": "3181840"
  },
  {
    "text": "implementation to make these decision it's not what really matters most and",
    "start": "3181840",
    "end": "3188160"
  },
  {
    "text": "finally I've already mentioned in the past you have to decide in the case of of multiple things whether you want",
    "start": "3188160",
    "end": "3199450"
  },
  {
    "text": "separate collar balls for flexibility or to make sure the various things are",
    "start": "3199450",
    "end": "3205300"
  },
  {
    "text": "consistent with each other have them be method of a single object again both",
    "start": "3205300",
    "end": "3212020"
  },
  {
    "text": "choices can be right I tend to think functionally more than I do object",
    "start": "3212020",
    "end": "3217420"
  },
  {
    "text": "oriented ly but that's just my instinct and when I design API is I try to think",
    "start": "3217420",
    "end": "3222640"
  },
  {
    "text": "about these things in depth because I know that once the API is published the changing it is going to be such a pain",
    "start": "3222640",
    "end": "3229720"
  },
  {
    "text": "that I'll have to live with whatever decision I'm regretting for I'm not",
    "start": "3229720",
    "end": "3235240"
  },
  {
    "text": "saying the rest of my life but far too long our errors events like any other",
    "start": "3235240",
    "end": "3242520"
  },
  {
    "start": "3238000",
    "end": "3478000"
  },
  {
    "text": "maybe but I think there's a very good case to",
    "start": "3242520",
    "end": "3247690"
  },
  {
    "text": "suggest they are best singled out you may have a cascade of actual events like",
    "start": "3247690",
    "end": "3253450"
  },
  {
    "text": "still successes and then a cascade of possible exceptions and for that I",
    "start": "3253450",
    "end": "3258690"
  },
  {
    "text": "particularly glad to have glyph in the audience er because he's one of the guys",
    "start": "3258690",
    "end": "3264880"
  },
  {
    "text": "responsible for this concept of deferred which remains to this day a great way to",
    "start": "3264880",
    "end": "3271270"
  },
  {
    "text": "organize it's not the only way but it is one simple very linear a cascade of a",
    "start": "3271270",
    "end": "3279820"
  },
  {
    "text": "code of chain or cascade of success callback such a nor cascade of error",
    "start": "3279820",
    "end": "3285910"
  },
  {
    "text": "callback every one of them except star n star star kW so you don't have to use",
    "start": "3285910",
    "end": "3292360"
  },
  {
    "text": "Funko partial which is excellent little design convenience and you get argument",
    "start": "3292360",
    "end": "3300880"
  },
  {
    "text": "to identify what event whatever and this is how the chain works so it's not",
    "start": "3300880",
    "end": "3307990"
  },
  {
    "text": "exactly a preemption its each event in the chain can modify and return and pass",
    "start": "3307990",
    "end": "3315730"
  },
  {
    "text": "on to the next one the error or or result of the other print as well",
    "start": "3315730",
    "end": "3322240"
  },
  {
    "text": "a callback so it is at least something",
    "start": "3322240",
    "end": "3327310"
  },
  {
    "text": "you can lift without any effort even if",
    "start": "3327310",
    "end": "3334450"
  },
  {
    "text": "you're not doing anything related to networking like the system in which",
    "start": "3334450",
    "end": "3339900"
  },
  {
    "text": "twisted in which in which the farad we're originally conceived it's still",
    "start": "3339900",
    "end": "3345010"
  },
  {
    "text": "going to work for you I believe this also has the distinction of being the",
    "start": "3345010",
    "end": "3352480"
  },
  {
    "text": "only Python library concept copied verbatim in a popular JavaScript",
    "start": "3352480",
    "end": "3361290"
  },
  {
    "text": "framework the dojo they those others are in general obvious that matters of",
    "start": "3361590",
    "end": "3368170"
  },
  {
    "text": "Python but this one is like they really moved is just transliterated from from I",
    "start": "3368170",
    "end": "3373540"
  },
  {
    "text": "think the JavaScript yes that's I don't know if this old",
    "start": "3373540",
    "end": "3381350"
  },
  {
    "text": "paper points to it you probably just need to use a web search engine and does anybody know any search engine or or or",
    "start": "3381350",
    "end": "3390560"
  },
  {
    "text": "maybe you can find yelp reviews for it",
    "start": "3390560",
    "end": "3394480"
  },
  {
    "text": "I'm sorry can't hear you",
    "start": "3402690",
    "end": "3406069"
  },
  {
    "text": "so they just for the recording",
    "start": "3424150",
    "end": "3430609"
  },
  {
    "text": "somebody was explaining that it's not just dojo there's just very similar",
    "start": "3430609",
    "end": "3435890"
  },
  {
    "text": "things copied into all remember that a synchronous programming is very general",
    "start": "3435890",
    "end": "3441440"
  },
  {
    "text": "is any applicable to JavaScript well like it's also one of the like passing",
    "start": "3441440",
    "end": "3448910"
  },
  {
    "text": "function objects around is one of the very few corners in which JavaScript is",
    "start": "3448910",
    "end": "3454190"
  },
  {
    "text": "better than Python syntactically because the keyword that for function is",
    "start": "3454190",
    "end": "3459250"
  },
  {
    "text": "function instead of death and lambda to",
    "start": "3459250",
    "end": "3466910"
  },
  {
    "text": "do anything to do with the team known as the Spartans it just function means",
    "start": "3466910",
    "end": "3472400"
  },
  {
    "text": "function it's the one bit where JavaScript got it right in Python got it wrong so there are several kind of",
    "start": "3472400",
    "end": "3483049"
  },
  {
    "start": "3478000",
    "end": "3599000"
  },
  {
    "text": "events that are intrinsic to the system such as your running program or process",
    "start": "3483049",
    "end": "3489440"
  },
  {
    "text": "rather so the at exit library lets you register a callback that will be called",
    "start": "3489440",
    "end": "3494480"
  },
  {
    "text": "in normal shutdown not if they Python binary interpreter crashes but for both",
    "start": "3494480",
    "end": "3502819"
  },
  {
    "text": "the normal and error exits within the Python control signal to let you handle",
    "start": "3502819",
    "end": "3511299"
  },
  {
    "text": "unique signals this one is one of those where you only have one handler per",
    "start": "3511299",
    "end": "3518420"
  },
  {
    "text": "signal number and what you call signal signal it returns the old handler so you",
    "start": "3518420",
    "end": "3524210"
  },
  {
    "text": "can make believe it's still 1982 and have fun chaining the calls like you did",
    "start": "3524210",
    "end": "3532039"
  },
  {
    "text": "in dos 1.0 isn't that fun or maybe you can program at a slightly higher",
    "start": "3532039",
    "end": "3537319"
  },
  {
    "text": "abstraction level but sometimes you really have to have those signals and then there's a series of hooks that you",
    "start": "3537319",
    "end": "3545210"
  },
  {
    "text": "can use for example this accept hook is going to be the",
    "start": "3545210",
    "end": "3550790"
  },
  {
    "text": "callback whenever the interactive interpreter detects an exception they",
    "start": "3550790",
    "end": "3557630"
  },
  {
    "text": "default one just gives you a big stock price but you can actually do something",
    "start": "3557630",
    "end": "3565430"
  },
  {
    "text": "very different set tray set profile display hook that's all stuff that can",
    "start": "3565430",
    "end": "3573110"
  },
  {
    "text": "be really helpful if especially if you're like writing or or or hacking on",
    "start": "3573110",
    "end": "3579490"
  },
  {
    "text": "python ide because it all stuff that's happening to your interactive execution",
    "start": "3579490",
    "end": "3587150"
  },
  {
    "text": "and some extension modules follow exactly the same like read line that you",
    "start": "3587150",
    "end": "3593180"
  },
  {
    "text": "start off set all sort of system in and callbacks then I did mention sulla meant",
    "start": "3593180",
    "end": "3599170"
  },
  {
    "text": "to structure execution by making them up parsing is an example they original",
    "start": "3599170",
    "end": "3606920"
  },
  {
    "text": "approach to parsing stuff like XML was well let me process all day they extend",
    "start": "3606920",
    "end": "3614210"
  },
  {
    "text": "I'll start and end up with a big document in memory and that organizes a",
    "start": "3614210",
    "end": "3620960"
  },
  {
    "text": "tree lot physical tree to correspond to the logical tree that's the XML document that's a dumb document object model",
    "start": "3620960",
    "end": "3629500"
  },
  {
    "text": "point is okay so XML took over the world and now I have I regularly received from",
    "start": "3629500",
    "end": "3638360"
  },
  {
    "text": "from my partner over there a JavaScript meant about a hundred gigabyte each oh",
    "start": "3638360",
    "end": "3645430"
  },
  {
    "text": "where can I buy a terabyte of memory to hold the Dom for that it's price I mean",
    "start": "3645430",
    "end": "3651020"
  },
  {
    "text": "you can buy it today but it's pretty pricey and actually I only need to find",
    "start": "3651020",
    "end": "3656930"
  },
  {
    "text": "where there's a tag foo within a tag bar what's the attribute bus that's all I",
    "start": "3656930",
    "end": "3662510"
  },
  {
    "text": "care about all of these 64 gigabyte well with the Dom that doesn't matter you have to have",
    "start": "3662510",
    "end": "3667790"
  },
  {
    "text": "it all so event-driven parsers like go over they open tag this close tag that",
    "start": "3667790",
    "end": "3675800"
  },
  {
    "text": "as event so you can simply ignore all the junk you don't",
    "start": "3675800",
    "end": "3681560"
  },
  {
    "text": "care about which in the average xml case",
    "start": "3681560",
    "end": "3686720"
  },
  {
    "text": "is 97.2% I think about approximately and and just",
    "start": "3686720",
    "end": "3693350"
  },
  {
    "text": "capture and keep around those you need or you can use Paul press codes pulled",
    "start": "3693350",
    "end": "3698420"
  },
  {
    "text": "on concept now available several implementation where you essentially start as a stream of events but when you",
    "start": "3698420",
    "end": "3705740"
  },
  {
    "text": "find one that oh I know I need this you get the Dom like structure for",
    "start": "3705740",
    "end": "3711650"
  },
  {
    "text": "everything that's below this node that's a dummy subtree as they call it then a",
    "start": "3711650",
    "end": "3717890"
  },
  {
    "text": "pretty original approach to parsing but it's partly event-driven and they the",
    "start": "3717890",
    "end": "3724880"
  },
  {
    "text": "real motivation for the event-driven is to make it serial so not everything has",
    "start": "3724880",
    "end": "3730130"
  },
  {
    "text": "to stay in memory considering that in those documents you don't care about most of it so you don't really want to",
    "start": "3730130",
    "end": "3738770"
  },
  {
    "text": "buy a terabyte of memory just to handle it for schedule they already mentioned",
    "start": "3738770",
    "end": "3744800"
  },
  {
    "text": "scared in terms of their customization but of course as I mentioned earlier what it does is it makes scheduled calls",
    "start": "3744800",
    "end": "3750680"
  },
  {
    "text": "to your functions your your events with",
    "start": "3750680",
    "end": "3757400"
  },
  {
    "text": "certain lay priority this is a collab all the arguments and and so on you can",
    "start": "3757400",
    "end": "3762830"
  },
  {
    "text": "come sell the events and when all the queue is ready you run everything and this is serialized but then there's a",
    "start": "3762830",
    "end": "3769940"
  },
  {
    "text": "concurrent version which is the part of it that we like with thread and to some",
    "start": "3769940",
    "end": "3775190"
  },
  {
    "text": "and of course with processes and other concepts yet like Green France and stock",
    "start": "3775190",
    "end": "3781970"
  },
  {
    "text": "LEDs and and so on and other alternatives such as the NWS way which",
    "start": "3781970",
    "end": "3790520"
  },
  {
    "text": "has elements and workers cooperating this is what is where things start to",
    "start": "3790520",
    "end": "3796910"
  },
  {
    "text": "get really hairy compared to the cleanliness of the 'single in exact",
    "start": "3796910",
    "end": "3802940"
  },
  {
    "text": "solution and many alternatives such as the future also known as promise the",
    "start": "3802940",
    "end": "3808280"
  },
  {
    "text": "design pattern are getting into the standard library in Python 3 and very",
    "start": "3808280",
    "end": "3816050"
  },
  {
    "text": "interesting structure based on that is part of the NDB module for App Engine",
    "start": "3816050",
    "end": "3822160"
  },
  {
    "text": "that's fully available a source so just get the up Engine SDK and or or get",
    "start": "3822160",
    "end": "3829840"
  },
  {
    "text": "package and so on and then hack to your heart's content good and we're all done",
    "start": "3829840",
    "end": "3836180"
  },
  {
    "text": "thank you very much",
    "start": "3836180",
    "end": "3838960"
  }
]