[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "good morning all right uh my name is RAR I'm gonna be talking about uh skullet stream",
    "start": "80",
    "end": "7799"
  },
  {
    "text": "um which is a library for streaming IO for Scala uh this is going to be sort of an introduction to this and then",
    "start": "7799",
    "end": "13200"
  },
  {
    "text": "tomorrow at the onc conference uh I'll do sort of like a Hands-On workshop for those who are interested but this is",
    "start": "13200",
    "end": "19359"
  },
  {
    "text": "going to be sort of the overview the high level overview of of this Library so uh schol dream or or FS2 so it's",
    "start": "19359",
    "end": "28199"
  },
  {
    "text": "being renamed in the in the next version uh this is uh a streaming IO library for",
    "start": "28199",
    "end": "34960"
  },
  {
    "text": "scholar and uh so FS2 stands for functional streams for Scola which is the the new",
    "start": "34960",
    "end": "40840"
  },
  {
    "text": "name and is a library that uh so I work at Verizon labs and we use this Library a lot for for streaming uh things for",
    "start": "40840",
    "end": "48840"
  },
  {
    "text": "example uh we're streaming Telemetry data from servers and uh from deployed",
    "start": "48840",
    "end": "54640"
  },
  {
    "text": "services at a rate of about a billion data points a day and it's like totally fine",
    "start": "54640",
    "end": "60440"
  },
  {
    "text": "uh so a little bit of a disclaimer that this talk is going to be about the current version of the library uh you",
    "start": "60440",
    "end": "65960"
  },
  {
    "text": "may have heard that there's going to be a new sort of redesigned version of this Library uh which is going to be called",
    "start": "65960",
    "end": "71159"
  },
  {
    "text": "FS2 but this talk is going to be about scholar at stream which is the current version 0.8 and it has a dependency on",
    "start": "71159",
    "end": "78520"
  },
  {
    "text": "scolar at 7.1 whereas the next iteration of this library has no dependencies at all because you know managing",
    "start": "78520",
    "end": "86240"
  },
  {
    "text": "dependencies and scol is a complete nightmare um so right so again it's a it's a",
    "start": "86240",
    "end": "93680"
  },
  {
    "start": "88000",
    "end": "139000"
  },
  {
    "text": "streaming IO library for Scala but it's a purely functional streaming IO library for Scola what that means is that uh",
    "start": "93680",
    "end": "101799"
  },
  {
    "text": "streams are immutable and referentially transparent that is um you know they're",
    "start": "101799",
    "end": "107719"
  },
  {
    "text": "purely functional right so so you just have really sort of a description of a stream that doesn't actually sort of do",
    "start": "107719",
    "end": "113320"
  },
  {
    "text": "anything until you run it um they're essentially so a stream essentially you",
    "start": "113320",
    "end": "119119"
  },
  {
    "text": "can think of it as a lazy list and it's a lazy list that can contain both data",
    "start": "119119",
    "end": "124240"
  },
  {
    "text": "and effects so at every sort of step of the list or every time you pull from the list you're going to get either some",
    "start": "124240",
    "end": "130200"
  },
  {
    "text": "data or you're going to get some effect that needs to happen and this makes it sort of naturally pull based so it's",
    "start": "130200",
    "end": "136280"
  },
  {
    "text": "you're constantly pulling from from these stams so design goals of the library",
    "start": "136280",
    "end": "141400"
  },
  {
    "start": "139000",
    "end": "157000"
  },
  {
    "text": "excuse me design goals of the library are uh that it' be",
    "start": "141400",
    "end": "148000"
  },
  {
    "text": "compositional and expressive uh resource safe and above all",
    "start": "148000",
    "end": "154319"
  },
  {
    "text": "comprehensible uh and that's sort of my goal here is to demystify uh so so everything in this",
    "start": "154319",
    "end": "161040"
  },
  {
    "text": "Library like can be understood right uh there there are some simple Concepts and there are some simple ways of combining",
    "start": "161040",
    "end": "167440"
  },
  {
    "text": "things and if you understand the the the elements and then you understand the",
    "start": "167440",
    "end": "172760"
  },
  {
    "text": "comp compositions then you really can understand like everything that's written in this Library so uh a big",
    "start": "172760",
    "end": "178959"
  },
  {
    "text": "thing about this is is that it can be understood compositionally and that is more true in",
    "start": "178959",
    "end": "184280"
  },
  {
    "text": "FS2 in the next iteration of this Library uh than it is in the current one so your code at the end of the day",
    "start": "184280",
    "end": "191519"
  },
  {
    "text": "when you use this library is going to look something like this it's going to have um you know you're going to have",
    "start": "191519",
    "end": "197959"
  },
  {
    "text": "some stream that you're building up uh as sort of a an expression like this uh",
    "start": "197959",
    "end": "203879"
  },
  {
    "text": "so you import Scola at stream and then you import uh right now right here I'm",
    "start": "203879",
    "end": "209159"
  },
  {
    "text": "working with scol concurrent task which is scaled sort of IO type so this",
    "start": "209159",
    "end": "215040"
  },
  {
    "text": "converter is a task which when run at the bottom will actually do the stuff in",
    "start": "215040",
    "end": "220959"
  },
  {
    "text": "between right it'll it'll uh sort of execute this program okay so you can",
    "start": "220959",
    "end": "226319"
  },
  {
    "text": "think of the task is sort of like a a first class program which then when run at the bottom actually makes the side effects happen Okay so let's look at",
    "start": "226319",
    "end": "234040"
  },
  {
    "text": "what this thing does right it's uh so IO is a package in scy stream uh that g do",
    "start": "234040",
    "end": "240000"
  },
  {
    "text": "facilities for doing uh reading from from uh IO streams and reading from",
    "start": "240000",
    "end": "245319"
  },
  {
    "text": "files and things like that so io. lines are says well open this file uh and you",
    "start": "245319",
    "end": "250840"
  },
  {
    "text": "know stream the lines from it they're going to be separated by new lines and then I'm saying filter out all the empty",
    "start": "250840",
    "end": "257519"
  },
  {
    "text": "lines and lines that start with two slashes and then I'm saying for every line so maap over the stream for every",
    "start": "257519",
    "end": "263600"
  },
  {
    "text": "line convert it from Fahrenheit to Celsius because you know Fahrenheit is updated and then",
    "start": "263600",
    "end": "271160"
  },
  {
    "text": "uh we intersperse with uh new lines so we put a new line after each uh string",
    "start": "271160",
    "end": "277840"
  },
  {
    "text": "and then we pipe that to uh a uh an encoder a utf8 encoder which is a a",
    "start": "277840",
    "end": "284800"
  },
  {
    "text": "stream transducer that turns the stream of strings into a stream of",
    "start": "284800",
    "end": "290000"
  },
  {
    "text": "bytes and then we say two to send that to a sync and we say IO file chunk right",
    "start": "290000",
    "end": "296560"
  },
  {
    "text": "which uh which will write those B in chunks to a file celsius. txd and then",
    "start": "296560",
    "end": "303880"
  },
  {
    "text": "at the end we say run to basically compile the stream to a task um so that",
    "start": "303880",
    "end": "309919"
  },
  {
    "text": "that turns into a single task that we can then run so it's sort of like run. run which is kind of weird but let",
    "start": "309919",
    "end": "316280"
  },
  {
    "text": "that's how it is uh so let's start by looking at at task so what what is Task so Scala",
    "start": "316280",
    "end": "323720"
  },
  {
    "start": "319000",
    "end": "355000"
  },
  {
    "text": "concurrent task is uh a purely functional data type for talking about",
    "start": "323720",
    "end": "328840"
  },
  {
    "text": "IO in scolar uh it is uh asynchronous that means you you know you can do",
    "start": "328840",
    "end": "334639"
  },
  {
    "text": "asynchronous IO it's compositional meaning if you have two tasks you can compose them and and again it's purely",
    "start": "334639",
    "end": "341160"
  },
  {
    "text": "functional so you can think of a task as sort of like a first class program it's it's a value that you can manipulate in",
    "start": "341160",
    "end": "347720"
  },
  {
    "text": "your code uh you can also think of a task as a list of instructions that need to be executed at some point uh in",
    "start": "347720",
    "end": "355360"
  },
  {
    "start": "355000",
    "end": "362000"
  },
  {
    "text": "time and task is also a Monet for those who are familiar with Monet so supports",
    "start": "355360",
    "end": "360400"
  },
  {
    "text": "Mantic composition and we'll get into that uh but importantly a task doesn't",
    "start": "360400",
    "end": "366720"
  },
  {
    "start": "362000",
    "end": "379000"
  },
  {
    "text": "actually do anything like while you're looking at it it doesn't actually do anything until you call run on it right",
    "start": "366720",
    "end": "373440"
  },
  {
    "text": "so you can you know pass them around safely and and do stuff with them but they don't actually execute until you",
    "start": "373440",
    "end": "379000"
  },
  {
    "start": "379000",
    "end": "607000"
  },
  {
    "text": "call run so then how do we construct tasks well there are three basic ways of",
    "start": "379000",
    "end": "384720"
  },
  {
    "text": "constructing tasks we can say task delay which takes an unevaluated",
    "start": "384720",
    "end": "390360"
  },
  {
    "text": "expression and we'll capture that in task so here for instance I'm saying",
    "start": "390360",
    "end": "395720"
  },
  {
    "text": "task delay read line and read line is just like read line from the standard uh scolar library and so that will be a",
    "start": "395720",
    "end": "402160"
  },
  {
    "text": "task which when run will read a line from the standard input and return it",
    "start": "402160",
    "end": "407759"
  },
  {
    "text": "return the string super simple um but importantly that read line is not",
    "start": "407759",
    "end": "412840"
  },
  {
    "text": "evaluated right there it's not evaluated until uh you call run okay",
    "start": "412840",
    "end": "420039"
  },
  {
    "text": "now says evaluate this thing right now and then capture it in uh in a task so",
    "start": "420039",
    "end": "428039"
  },
  {
    "text": "it's that's eagerly evaluated if you say test that now so inance for instance this 42 thing is a pure value but if it",
    "start": "428039",
    "end": "435120"
  },
  {
    "text": "had something a side effect that side effect would happen now um test. fail",
    "start": "435120",
    "end": "441240"
  },
  {
    "text": "will construct a task that fails and once run it will throw this exception",
    "start": "441240",
    "end": "449400"
  },
  {
    "text": "all right um there's another way of of constructing tasks so you can construct",
    "start": "449680",
    "end": "455039"
  },
  {
    "text": "uh sort of asynchronous uh waiting tasks so for instance if you have like a call",
    "start": "455039",
    "end": "461160"
  },
  {
    "text": "backy Api if you have uh like future for instance has a call backy Api scolar concurrent",
    "start": "461160",
    "end": "466599"
  },
  {
    "text": "future uh in the sense that it has a an oncomplete method and so you can register a call back with the future so",
    "start": "466599",
    "end": "473919"
  },
  {
    "text": "it's that when it completes it will call your function right and that function is",
    "start": "473919",
    "end": "480080"
  },
  {
    "text": "that call back function is oncomplete sorry the the register function so you call future. oncomplete to register your",
    "start": "480080",
    "end": "486319"
  },
  {
    "text": "call back but what uh this async Constructor in task allows you to do is",
    "start": "486319",
    "end": "492280"
  },
  {
    "text": "to pass the uh the on complete or the the registry function uh to this to this",
    "start": "492280",
    "end": "499560"
  },
  {
    "text": "Constructor to capture this idea in a task so then uh whereas future.",
    "start": "499560",
    "end": "506120"
  },
  {
    "text": "uncomplete would take a function that receives an INT now this TK async thing",
    "start": "506120",
    "end": "511520"
  },
  {
    "text": "uh is a task which when run will return an INT it will go and register a call",
    "start": "511520",
    "end": "516599"
  },
  {
    "text": "back with the future wait for it to finish and then return the end all",
    "start": "516599",
    "end": "522000"
  },
  {
    "text": "right uh now what was on the previous slide doesn't actually look compile so you have to actually do uh you know it's",
    "start": "522000",
    "end": "528080"
  },
  {
    "text": "a little more involved so you have to actually say you know test that async and then uh you pass it a a function",
    "start": "528080",
    "end": "535279"
  },
  {
    "text": "that receives another function so it's a higher order function so it takes that function takes another function K which",
    "start": "535279",
    "end": "541120"
  },
  {
    "text": "is the continuation and then you say you know register a call back and uh if that call",
    "start": "541120",
    "end": "547920"
  },
  {
    "text": "back gets a success then I call K with right of a otherwise uh if it's a fail",
    "start": "547920",
    "end": "554360"
  },
  {
    "text": "then I call K with left uh of of the error and this uh back SL forward SL",
    "start": "554360",
    "end": "560000"
  },
  {
    "text": "thing is Scala Zed's either type so it's uh it's going to be either an error or a",
    "start": "560000",
    "end": "567160"
  },
  {
    "text": "value okay so",
    "start": "567160",
    "end": "573120"
  },
  {
    "text": "uh so here another way of constructing sort of asynchronous tasks is to",
    "start": "573120",
    "end": "578519"
  },
  {
    "text": "explicitly say like I want to schedule this task on a thread pool so so say you have a task a which is uh you know just",
    "start": "578519",
    "end": "586160"
  },
  {
    "text": "some task and you have a thread pool and you want to say uh I when I run this",
    "start": "586160",
    "end": "591560"
  },
  {
    "text": "task I actually don't want to run it in the current thread I want to run it on a different thread and so you can say t.",
    "start": "591560",
    "end": "596959"
  },
  {
    "text": "Fork to uh SCH a task to run on a different thread when when you actually",
    "start": "596959",
    "end": "602920"
  },
  {
    "text": "run it all right so that's that's constructing tasks so combining tasks so now now that",
    "start": "602920",
    "end": "610160"
  },
  {
    "start": "607000",
    "end": "736000"
  },
  {
    "text": "we know how to construct tasks let's talk about how to put them together um",
    "start": "610160",
    "end": "616240"
  },
  {
    "text": "so one way is like like imagine if you have um two tasks and you want to run",
    "start": "616240",
    "end": "621880"
  },
  {
    "text": "them simultaneously you want to run them both at the same time so you can construct a task uh of of the pair a and B that will",
    "start": "621880",
    "end": "630399"
  },
  {
    "text": "do A and B at the same time just by calling uh both and that's a method on",
    "start": "630399",
    "end": "635760"
  },
  {
    "text": "nondeterminism of task uh for some reason so and non-determinism comes with",
    "start": "635760",
    "end": "642000"
  },
  {
    "text": "a whole bunch of other methods like uh you could spawn uh a whole list of tasks rather than just two of them right you",
    "start": "642000",
    "end": "648160"
  },
  {
    "text": "could have a list of tasks and then say uh non-deterministically run all of them and then give me the list of of",
    "start": "648160",
    "end": "654639"
  },
  {
    "text": "results uh and other stuff that's on on determinism as well another of combining",
    "start": "654639",
    "end": "659959"
  },
  {
    "text": "tasks is to use flat map so if you have a task of a and then you have a function",
    "start": "659959",
    "end": "666480"
  },
  {
    "text": "that can receive excuse me that can receive uh values of type A",
    "start": "666480",
    "end": "671920"
  },
  {
    "text": "so we would receive the result of that of running that first task then you can construct a composite task that will you",
    "start": "671920",
    "end": "677120"
  },
  {
    "text": "know do a and then pass the result of that to F and that will be a composite task that returns you know the result of",
    "start": "677120",
    "end": "684240"
  },
  {
    "text": "of F and that allows us to sort of Nest the",
    "start": "684240",
    "end": "689480"
  },
  {
    "text": "things or sort of put them one after the other uh and uh that allows us to use",
    "start": "689480",
    "end": "695200"
  },
  {
    "text": "four comprehensions and four comprehensions dgar to calls to flat map so that allows us to do things like",
    "start": "695200",
    "end": "703839"
  },
  {
    "text": "uh write imperative looking programs all right so note that this is this is a a data structure like it's a first class",
    "start": "703839",
    "end": "710800"
  },
  {
    "text": "it's a it's a a first class object like this doesn't actually do anything but it looks like an imperative program and so you can say you know test delay print",
    "start": "710800",
    "end": "717880"
  },
  {
    "text": "line something and then then uh delay standard in read line and assign the",
    "start": "717880",
    "end": "723279"
  },
  {
    "text": "results to n and then we can you know print line hello and so we can write like an imperative looking program but",
    "start": "723279",
    "end": "728880"
  },
  {
    "text": "importantly this whole thing is just a task which when run will do all these steps okay and it doesn't do anything",
    "start": "728880",
    "end": "735800"
  },
  {
    "text": "before that so running tasks if we have a task of a you can call run on it and",
    "start": "735800",
    "end": "742760"
  },
  {
    "start": "736000",
    "end": "816000"
  },
  {
    "text": "it will do all the things and it will wait for the value to be available so you can get your a out of the task by",
    "start": "742760",
    "end": "748040"
  },
  {
    "text": "running it uh you want to do this sort of at the last possible moment like you",
    "start": "748040",
    "end": "753160"
  },
  {
    "text": "want to do it at the outside of your uh sort of the the edge of your programs because you can always like map or flat",
    "start": "753160",
    "end": "759639"
  },
  {
    "text": "map over a task you you don't really have to run them until you're really sure that you want the effects to",
    "start": "759639",
    "end": "765959"
  },
  {
    "text": "happen um so this uh run async thing is",
    "start": "765959",
    "end": "772880"
  },
  {
    "text": "uh like run but and and so we can say uh run async on a task and give it a",
    "start": "772880",
    "end": "778480"
  },
  {
    "text": "continuation and so that will actually start running the task and return immediately so we will start running the",
    "start": "778480",
    "end": "784959"
  },
  {
    "text": "task and if it was scheduled to run on another thread uh it'll schedule it to run on that thread and then it will",
    "start": "784959",
    "end": "791399"
  },
  {
    "text": "return control to you right so this is a way of sort of running a task as synchronously without waiting for it um",
    "start": "791399",
    "end": "797760"
  },
  {
    "text": "and you give it a continuation K which will then receive either the value it",
    "start": "797760",
    "end": "804000"
  },
  {
    "text": "will receive uh the value of type A that was in that task or it will receive a throwable if that task through an error",
    "start": "804000",
    "end": "811199"
  },
  {
    "text": "right so you run it and it'll it'll like make it happen uh how to handle errors you can",
    "start": "811199",
    "end": "818639"
  },
  {
    "start": "816000",
    "end": "896000"
  },
  {
    "text": "handle errors um in in task so if the thing that you delay if the expression",
    "start": "818639",
    "end": "824560"
  },
  {
    "text": "that you delay actually throws an exception uh then um that that exception",
    "start": "824560",
    "end": "830079"
  },
  {
    "text": "will actually be captured in the in the task and it will be the same thing as saying like task off fail and giving it",
    "start": "830079",
    "end": "835240"
  },
  {
    "text": "the exception and that'll construct the task which when run will throw that exception okay so it captures the",
    "start": "835240",
    "end": "843680"
  },
  {
    "text": "whatever errors or whatever U exceptions are being thrown in the code that's",
    "start": "843680",
    "end": "848720"
  },
  {
    "text": "that's captured and if you want to handle an error you can say attempt so if you have",
    "start": "848720",
    "end": "856519"
  },
  {
    "text": "a task and you say he that attempt that will actually uh convert that task into",
    "start": "856519",
    "end": "861839"
  },
  {
    "text": "a task of either an error or an A so when you run t. attempt it will not",
    "start": "861839",
    "end": "867920"
  },
  {
    "text": "throw an exception if T th threw an exception t. attempt will not throw an exception but it will return the exception as a value",
    "start": "867920",
    "end": "874959"
  },
  {
    "text": "instead uh and so you can flap map over that in order to get uh at the the",
    "start": "874959",
    "end": "881160"
  },
  {
    "text": "actual error and handle it as a as a normal value so that's super helpful um okay so that's task right so",
    "start": "881160",
    "end": "891120"
  },
  {
    "text": "pretty straightforward uh let's now talk about streams which is the the real meat of this all right",
    "start": "891120",
    "end": "897199"
  },
  {
    "start": "896000",
    "end": "933000"
  },
  {
    "text": "so uh streams are represented by this type uh which is uh process and it's a",
    "start": "897199",
    "end": "904040"
  },
  {
    "text": "process of F and A's um so the the F Type here is the effect type so this",
    "start": "904040",
    "end": "913079"
  },
  {
    "text": "this type represents a stream that has values of type A or may produce values of type",
    "start": "913079",
    "end": "919240"
  },
  {
    "text": "A and will um have effects of type f so it's a it's a lazy list and at every",
    "start": "919240",
    "end": "926320"
  },
  {
    "text": "step it will either have an effect of type f or it will have a value of type a",
    "start": "926320",
    "end": "933120"
  },
  {
    "text": "um and most of the time this effect type f is going to be specialized to task that's sort of the common use case",
    "start": "933120",
    "end": "939680"
  },
  {
    "text": "right uh so this is a stream with stream of tasks basically and a in equal",
    "start": "939680",
    "end": "946759"
  },
  {
    "start": "946000",
    "end": "1113000"
  },
  {
    "text": "measure um we can construct streams uh in there essentially only",
    "start": "946759",
    "end": "952480"
  },
  {
    "text": "three ways that we can construct sort of primitive streams so these are the sort of atoms of this thing uh there's the",
    "start": "952480",
    "end": "959319"
  },
  {
    "text": "empty stream which is halt uh that is just a a stream so it's a process of nothing nothing uh so it has no effects",
    "start": "959319",
    "end": "967440"
  },
  {
    "text": "and it has no values right and it does nothing there's a Mt sorry there's a Mt",
    "start": "967440",
    "end": "974279"
  },
  {
    "text": "which will um emit a single value on the Stream So emit o will will be a process",
    "start": "974279",
    "end": "981279"
  },
  {
    "text": "that emits that o and has no effects so just a single value on the string uh there's a weight and and this is where",
    "start": "981279",
    "end": "988360"
  },
  {
    "text": "it sort of gives it's interesting a weight will say okay I have an effect of type f like imagine if f is Task right",
    "start": "988360",
    "end": "995240"
  },
  {
    "text": "so it's like uh there's some task that I want you to to execute uh or or a wait",
    "start": "995240",
    "end": "1002319"
  },
  {
    "text": "will uh so the stream will contain a task right that needs to be executed by whatever is running the stream by The",
    "start": "1002319",
    "end": "1008600"
  },
  {
    "text": "Interpreter of this thing and once that task is run there will be a value of",
    "start": "1008600",
    "end": "1013720"
  },
  {
    "text": "type I and then the receive function will receive that value of type I and",
    "start": "1013720",
    "end": "1018959"
  },
  {
    "text": "then continue the process so this is saying like wait on this task or on this",
    "start": "1018959",
    "end": "1024160"
  },
  {
    "text": "effect to happen once it has happened take the value that it gave you and and continue the process okay make",
    "start": "1024160",
    "end": "1034039"
  },
  {
    "text": "sense so then you can actually take a an F or an effect let's say this is a task",
    "start": "1034919",
    "end": "1040959"
  },
  {
    "text": "so say FU is a is a task of then you can say we turn that task into a stream uh",
    "start": "1040959",
    "end": "1047079"
  },
  {
    "text": "by saying process eval so you can sort of turn uh tasks into streams of tasks",
    "start": "1047079",
    "end": "1053480"
  },
  {
    "text": "so this this thing will be a stream which does FU and and then emits the",
    "start": "1053480",
    "end": "1060360"
  },
  {
    "text": "result of Fu another way of writing the same thing is to say f and then",
    "start": "1060360",
    "end": "1067080"
  },
  {
    "text": "Adit okay uh for example here is uh process",
    "start": "1067080",
    "end": "1073600"
  },
  {
    "text": "that reads a single line from the standard input and emits it so",
    "start": "1073600",
    "end": "1079559"
  },
  {
    "text": "uh we say just say Tas delay read line and then we eval that to turn that into a stream and that stream will just have",
    "start": "1079559",
    "end": "1085159"
  },
  {
    "text": "a single string on it and that string comes from the standard input uh now we're saying uh in practice we're saying",
    "start": "1085159",
    "end": "1092080"
  },
  {
    "text": "eval delay a lot and so I like to have a little combinator or a little uh helper function called I call it IO which takes",
    "start": "1092080",
    "end": "1098880"
  },
  {
    "text": "an unevaluated expression and then we'll eval delay that to turn that expression into a stream that executes that",
    "start": "1098880",
    "end": "1105840"
  },
  {
    "text": "expression and returns its result or emits the result on the stream so that's a single element list uh",
    "start": "1105840",
    "end": "1113080"
  },
  {
    "start": "1113000",
    "end": "1337000"
  },
  {
    "text": "Stream So then combining processes like you know how to do one element streams",
    "start": "1113080",
    "end": "1118840"
  },
  {
    "text": "we know how to do sort of a single effect uh on a stream and we know how to do the empty stream uh so let's now talk",
    "start": "1118840",
    "end": "1124840"
  },
  {
    "text": "about how we combine these into larger things uh there basically basically only",
    "start": "1124840",
    "end": "1130760"
  },
  {
    "text": "two ways that you can combine uh streams and or two basic ways so we can append",
    "start": "1130760",
    "end": "1137400"
  },
  {
    "text": "one process at the end of another or one stream at the end of another actually process is being renamed to stream uh in",
    "start": "1137400",
    "end": "1143720"
  },
  {
    "text": "the next iteration of this and that's um makes it easier to talk about so if you have a stream P1 and you have a stream",
    "start": "1143720",
    "end": "1150360"
  },
  {
    "text": "P2 you can append uh P2 to P1 and that'll do P1 and then do P2 so P3 will",
    "start": "1150360",
    "end": "1159000"
  },
  {
    "text": "be the you know everything that P1 does and then everything that P2 does and you can also say append or you can use the",
    "start": "1159000",
    "end": "1166000"
  },
  {
    "text": "Plus+ for example uh if you wanted to read two lines from the standard input you could",
    "start": "1166000",
    "end": "1171760"
  },
  {
    "text": "say well read a line and then append that to read another line and so now you have a stream that will contain two",
    "start": "1171760",
    "end": "1178840"
  },
  {
    "text": "lines from the standard input stream uh we can repeat a process",
    "start": "1178840",
    "end": "1184200"
  },
  {
    "text": "indefinitely by pending it to itself so here for in instance I'm representing the standard input stream itself as a",
    "start": "1184200",
    "end": "1191400"
  },
  {
    "text": "stream of strings uh which uh at every step will execute a task to read a",
    "start": "1191400",
    "end": "1197159"
  },
  {
    "text": "string from the standard input so so this is now the standard input stream another way of doing the same thing is",
    "start": "1197159",
    "end": "1203200"
  },
  {
    "text": "to say repeat so if you have a stream a process of of something you can say do",
    "start": "1203200",
    "end": "1210280"
  },
  {
    "text": "repeat on it and that will repeat that process indefinitely all right so this is now the standard input string and so we can",
    "start": "1210280",
    "end": "1217159"
  },
  {
    "text": "write you know like the Unix utility cat or sort of a baby version of it uh where we say",
    "start": "1217159",
    "end": "1223679"
  },
  {
    "text": "uh uh oh yeah so okay flat map sorry flat map is another way of combining two",
    "start": "1223679",
    "end": "1230559"
  },
  {
    "text": "streams all right so if you have uh the stream standard in which is a stream of strings you can say flat map to say for",
    "start": "1230559",
    "end": "1237520"
  },
  {
    "text": "every element s in that stream insert a whole other process in its place in the",
    "start": "1237520",
    "end": "1243880"
  },
  {
    "text": "place of that element uh and that will allow us to do things like like this where we say you know standard in flat",
    "start": "1243880",
    "end": "1249799"
  },
  {
    "text": "map and then for every element S I want to print that to the uh the standard out",
    "start": "1249799",
    "end": "1255960"
  },
  {
    "text": "and then the result of that will be a process uh in task of units because the",
    "start": "1255960",
    "end": "1261039"
  },
  {
    "text": "result of printing a line is is unit right you can write the same thing using",
    "start": "1261039",
    "end": "1266640"
  },
  {
    "text": "for comprehension so you say well for s in standard in do the io print line S so",
    "start": "1266640",
    "end": "1272960"
  },
  {
    "text": "it it reads sort of nicely as a as an imperative program as well but it's important to note that uh even though",
    "start": "1272960",
    "end": "1278600"
  },
  {
    "text": "this looks like an imperative program it's really more like a list comprehension",
    "start": "1278600",
    "end": "1284278"
  },
  {
    "text": "right uh so we can write uh like the Unix utility GP or a baby version of",
    "start": "1284360",
    "end": "1291000"
  },
  {
    "text": "that uh we the process or the streams they they come with a lot of methods",
    "start": "1291000",
    "end": "1296720"
  },
  {
    "text": "that you would expect to see on lists or you know on a collection uh type of",
    "start": "1296720",
    "end": "1303120"
  },
  {
    "text": "thing uh and so filter is one of those things and so here I'm um uh you know",
    "start": "1303120",
    "end": "1308880"
  },
  {
    "text": "take a regular expression and then I want to filter the standard input with the predicate that I construct from that",
    "start": "1308880",
    "end": "1314880"
  },
  {
    "text": "regular expression predicate is just a function that returns a so it compares",
    "start": "1314880",
    "end": "1320240"
  },
  {
    "text": "the string to the regular expression and then I say flat map out to say for every",
    "start": "1320240",
    "end": "1325640"
  },
  {
    "text": "line in the standard in that matches that is not filtered out uh send that to",
    "start": "1325640",
    "end": "1331480"
  },
  {
    "text": "the standard output right so now we were in graph totally",
    "start": "1331480",
    "end": "1336720"
  },
  {
    "text": "awesome um so that gets me to running processes so now we know how to construct simple processes we know how",
    "start": "1336720",
    "end": "1343080"
  },
  {
    "start": "1337000",
    "end": "1505000"
  },
  {
    "text": "to build uh sort of more complicated processes let's talk about running them",
    "start": "1343080",
    "end": "1350200"
  },
  {
    "text": "um so to run a process really means uh",
    "start": "1350200",
    "end": "1356200"
  },
  {
    "text": "to sort of collect its effects right so you'll have a a process is a stream of",
    "start": "1356200",
    "end": "1361919"
  },
  {
    "text": "effects and you want to say well I want to collapse them all into a single thing",
    "start": "1361919",
    "end": "1368320"
  },
  {
    "text": "like imagine if f is task for instance then you have a stream that make emit some tasks and I want to collapse all of",
    "start": "1368320",
    "end": "1374880"
  },
  {
    "text": "those into a single task that I can then run so if you say process that run then this F thing has to be a monad and monad",
    "start": "1374880",
    "end": "1382080"
  },
  {
    "text": "is just a fancy way of saying accumulate the effects right um and you there's even a uh so",
    "start": "1382080",
    "end": "1391240"
  },
  {
    "text": "here F also has to has to be a Monet but there is there's a way of accumulating into a list so if you want to do",
    "start": "1391240",
    "end": "1396640"
  },
  {
    "text": "something with the elements or if you want to look at the actual elements so so on the so if you say do run it'll",
    "start": "1396640",
    "end": "1403240"
  },
  {
    "text": "give you like a task of unit or an F of unit and so you don't actually see the elements what's expected",
    "start": "1403240",
    "end": "1409200"
  },
  {
    "text": "is that you know you you flat map over it uh and you know you actually put your",
    "start": "1409200",
    "end": "1415919"
  },
  {
    "text": "effects or whatever you want to do with the elements in the Stream itself right",
    "start": "1415919",
    "end": "1421039"
  },
  {
    "text": "so this so then this thing just returns a a unit yes uh but if you actually do",
    "start": "1421039",
    "end": "1427640"
  },
  {
    "text": "want to look at the elements if you want to run the stream and see what the elements actually are then you can do run log and it will give you a list of",
    "start": "1427640",
    "end": "1433760"
  },
  {
    "text": "the elements I don't recommend doing that in uh in like production code because you know lists are are pretty",
    "start": "1433760",
    "end": "1440960"
  },
  {
    "text": "slow uh you can also collect using a monoid so if you have uh a process of of",
    "start": "1440960",
    "end": "1449120"
  },
  {
    "text": "A's you have a stream of A's then you can if you can map that into uh using a",
    "start": "1449120",
    "end": "1455559"
  },
  {
    "text": "function f from A's to B's then you can collect using a monoid and a monoid is just a fancy way of saying collect the",
    "start": "1455559",
    "end": "1462120"
  },
  {
    "text": "elements so you add all the elements together into a single B using runfold",
    "start": "1462120",
    "end": "1468200"
  },
  {
    "text": "map there",
    "start": "1468200",
    "end": "1471158"
  },
  {
    "text": "question uh if you expect the process to be non-terminating right you should right ex yes that's that's a good",
    "start": "1476279",
    "end": "1483960"
  },
  {
    "text": "right you should not uh you should not run log or runfold map a process that you expect to never terminate you should",
    "start": "1483960",
    "end": "1490320"
  },
  {
    "text": "you know flat map and have an effect inside of the inside of the process so whatever you want to actually do with",
    "start": "1490320",
    "end": "1496080"
  },
  {
    "text": "the elements you should put that in the process itself like you should put tasks or whatever in in the uh in the",
    "start": "1496080",
    "end": "1504279"
  },
  {
    "text": "Stream um okay so that gives me to pipes so if we have a stream of a uh and we",
    "start": "1504279",
    "end": "1511919"
  },
  {
    "start": "1505000",
    "end": "1772000"
  },
  {
    "text": "want to sort of pipe that to some other thing and turn that into a stream of of",
    "start": "1511919",
    "end": "1517200"
  },
  {
    "text": "fees um that sort of does something in between uh then we use pipes so the",
    "start": "1517200",
    "end": "1523000"
  },
  {
    "text": "Primitive way to create a pipe is to uh that transforms one string into another",
    "start": "1523000",
    "end": "1529919"
  },
  {
    "text": "uh is is a weight one and so process. a weight one is then a sort of stream",
    "start": "1529919",
    "end": "1536279"
  },
  {
    "text": "transducer which will ask for a single element from a stram okay and then it",
    "start": "1536279",
    "end": "1542399"
  },
  {
    "text": "will emit that element uh and I don't know why this is called process one uh so a process one",
    "start": "1542399",
    "end": "1549640"
  },
  {
    "text": "of a to a is a is a a Transformer that will take a stream of a and turn it into another stream of a I don't know why",
    "start": "1549640",
    "end": "1555840"
  },
  {
    "text": "it's called process one it really should be called pipe but so it's uh yeah it's a it's a stream",
    "start": "1555840",
    "end": "1564360"
  },
  {
    "text": "transformer for example you can write a take Transformer which will take a number of elements from uh another stram",
    "start": "1564360",
    "end": "1572279"
  },
  {
    "text": "so this is now a process one or a pipe from I to I which when given when given",
    "start": "1572279",
    "end": "1577679"
  },
  {
    "text": "a stream will take n elements from that stream um and it'll do that by calling a weight",
    "start": "1577679",
    "end": "1584520"
  },
  {
    "text": "one followed by Take N minus one yeah",
    "start": "1584520",
    "end": "1590240"
  },
  {
    "text": "uh and if you know if we reach zero then we halt then it's the empty string so the way that you use a process one use a",
    "start": "1591000",
    "end": "1597559"
  },
  {
    "text": "pipe you pass it to the pipe method so if a is a process or a stream of a uh",
    "start": "1597559",
    "end": "1605080"
  },
  {
    "text": "and P is a process one or a pipe from A to B then we can say A's pipe P to turn",
    "start": "1605080",
    "end": "1612520"
  },
  {
    "text": "that that A's into a process of BS right and so for instance if it's take then",
    "start": "1612520",
    "end": "1618960"
  },
  {
    "text": "you know a pipe take four will be a stream that contains the first four elements of",
    "start": "1618960",
    "end": "1625840"
  },
  {
    "text": "a uh another example is uh there's there's thing called chunk which will uh",
    "start": "1625840",
    "end": "1633159"
  },
  {
    "text": "so process one is an object it's a it's a package in the in the library and it contains a lot of these pipes a lot of",
    "start": "1633159",
    "end": "1640200"
  },
  {
    "text": "these processed ones that that are useful one of them is chunk uh if you want to chunk your input into into",
    "start": "1640200",
    "end": "1646919"
  },
  {
    "text": "vectors of some f size so you have a process of a and then you say you know",
    "start": "1646919",
    "end": "1652240"
  },
  {
    "text": "pipe that to a a chunker that that uh produces chunks of size 10 and that will",
    "start": "1652240",
    "end": "1658440"
  },
  {
    "text": "now be a stream of vectors okay and most of those uh process ones or pipes",
    "start": "1658440",
    "end": "1664600"
  },
  {
    "text": "actually have convenient methods uh so there's there's syntax sugar for that on at the actual stream and so if you say",
    "start": "1664600",
    "end": "1670640"
  },
  {
    "text": "A's chunk 10 that's the same thing as saying you know a",
    "start": "1670640",
    "end": "1676240"
  },
  {
    "text": "pipe uh chunk 10 all right",
    "start": "1676240",
    "end": "1682600"
  },
  {
    "text": "um and you can write your own you can write your own pipes like for instance uh here I've written a a distinct pipe",
    "start": "1682600",
    "end": "1689799"
  },
  {
    "text": "so this thing will be it will take if you pipe a a stream to this a stream of",
    "start": "1689799",
    "end": "1694919"
  },
  {
    "text": "A's uh then this thing will emit uh each element in that stream only once right",
    "start": "1694919",
    "end": "1701960"
  },
  {
    "text": "so you start out with the empty set of elements you've seen and then uh what",
    "start": "1701960",
    "end": "1707000"
  },
  {
    "text": "this process will do is it will await a single a and then for each a that's seen",
    "start": "1707000",
    "end": "1712559"
  },
  {
    "text": "that's flat map um if it has been I mean so for each element that that we have if",
    "start": "1712559",
    "end": "1717799"
  },
  {
    "text": "it has been seen before uh then you know we we drop it and we just continue",
    "start": "1717799",
    "end": "1724120"
  },
  {
    "text": "without it otherwise we emit it and then we continue have adding the element to",
    "start": "1724120",
    "end": "1729559"
  },
  {
    "text": "the set of things we've seen right",
    "start": "1729559",
    "end": "1734720"
  },
  {
    "text": "easy and sort of behind the scenes so one of the things one of the things I",
    "start": "1734720",
    "end": "1740159"
  },
  {
    "text": "want to to show is that uh none of this stuff is is really like magic or or",
    "start": "1740159",
    "end": "1745440"
  },
  {
    "text": "special because a process one or a pipe is really just a stream whose effect is",
    "start": "1745440",
    "end": "1752799"
  },
  {
    "text": "to ask for a value right so so you know you can understand the uh the process",
    "start": "1752799",
    "end": "1759480"
  },
  {
    "text": "one type in terms of of effects you know every every stream is just the stream of",
    "start": "1759480",
    "end": "1764799"
  },
  {
    "text": "effects and values and process one the pipe just happens to be a stream whose effect is to ask for a",
    "start": "1764799",
    "end": "1772440"
  },
  {
    "start": "1772000",
    "end": "1794000"
  },
  {
    "text": "value all right so then there's uh multiple sources so let's so pipes you",
    "start": "1772519",
    "end": "1778760"
  },
  {
    "text": "know you can have one stream and then you can pipe it to another",
    "start": "1778760",
    "end": "1784559"
  },
  {
    "text": "Stream So with multiple sources uh we use uh something called a t so and",
    "start": "1784880",
    "end": "1791480"
  },
  {
    "text": "that's in the Scala Z stream T package and um so so the idea of a t is that you",
    "start": "1791480",
    "end": "1799480"
  },
  {
    "start": "1794000",
    "end": "2051000"
  },
  {
    "text": "have two input two input streams and you want to sort of combine them into into",
    "start": "1799480",
    "end": "1804559"
  },
  {
    "text": "one stream uh and there are there's a number of combinators on process one or",
    "start": "1804559",
    "end": "1810279"
  },
  {
    "text": "a number of number of methods on process one or sorry on on process on on the",
    "start": "1810279",
    "end": "1815880"
  },
  {
    "text": "stream um that allow you to combine it with other streams for instance zip so",
    "start": "1815880",
    "end": "1821679"
  },
  {
    "text": "if I have F1 and F2 uh each one is reading from some file uh",
    "start": "1821679",
    "end": "1828720"
  },
  {
    "text": "and I do this type Alias here so so I don't have to type as much so I have a source of of strings and another source",
    "start": "1828720",
    "end": "1834240"
  },
  {
    "text": "of strings which is F1 and F2 then I can zip them together to get a source of pairs which is uh you",
    "start": "1834240",
    "end": "1842159"
  },
  {
    "text": "know it's it'll do them both in lock step right it'll take one from uh from F1 it'll take one from F2 and it'll emit",
    "start": "1842159",
    "end": "1849679"
  },
  {
    "text": "both of those uh and then there's inter leave which will do them alternatingly",
    "start": "1849679",
    "end": "1855159"
  },
  {
    "text": "so it'll take one from F1 it'll take one from F2 and you know it'll it'll emit uh from",
    "start": "1855159",
    "end": "1862240"
  },
  {
    "text": "from one and then the other so and that's now a source of string strings that interleaves the contents of these",
    "start": "1862240",
    "end": "1867480"
  },
  {
    "text": "two files and there's other cool stuff like until like we can say do F1",
    "start": "1867480",
    "end": "1875600"
  },
  {
    "text": "until uh F2 returns or F2 emits a true",
    "start": "1875600",
    "end": "1881360"
  },
  {
    "text": "and in this case I'm taking uh F2 and I'm mapping over it to say well is it is the line that I'm getting equal to stop",
    "start": "1881360",
    "end": "1889639"
  },
  {
    "text": "and if it is equal to stop then I stop the whole process yeah and this uh this stuff here is uh",
    "start": "1889639",
    "end": "1897679"
  },
  {
    "text": "this this stuff is really just syntax sugar for method calls to te so the idea",
    "start": "1897679",
    "end": "1905440"
  },
  {
    "text": "of of a t is that uh it's it's a process that can receive two inputs and so uh",
    "start": "1905440",
    "end": "1913039"
  },
  {
    "text": "for instance the zip is really a t called zip so it's tzip",
    "start": "1913039",
    "end": "1919120"
  },
  {
    "text": "um but that's sort of besides the point but a t is very much like a process one",
    "start": "1919120",
    "end": "1925399"
  },
  {
    "text": "or a pipe except that pipe can have two inputs instead of just one so if you",
    "start": "1925399",
    "end": "1930720"
  },
  {
    "text": "have A's which is a process process of of A's a stream of A's and you have B's",
    "start": "1930720",
    "end": "1936559"
  },
  {
    "text": "which a stream of B's and you have a t uh ABC then you can turn your your whole",
    "start": "1936559",
    "end": "1944480"
  },
  {
    "text": "you know both of these processes by teeing them together using the T sorry I'm saying t a lot uh so you can sort of",
    "start": "1944480",
    "end": "1951360"
  },
  {
    "text": "T them together and and the way that they are combined is specified by the T",
    "start": "1951360",
    "end": "1958840"
  },
  {
    "text": "right and uh so so it will always ask so it'll",
    "start": "1958840",
    "end": "1964159"
  },
  {
    "text": "deterministically ask for for them um so The Primitives for a t is it's very much",
    "start": "1964159",
    "end": "1971080"
  },
  {
    "text": "like pipe where pipe said like a weit one but with a t you can say a weight left and you can say a weight right",
    "start": "1971080",
    "end": "1978399"
  },
  {
    "text": "so if you want to await uh like an element uh from the left side of the zip",
    "start": "1978399",
    "end": "1984360"
  },
  {
    "text": "uh from the T then you say a wait left otherwi you say a wait right for instance here is a a t that takes two",
    "start": "1984360",
    "end": "1991919"
  },
  {
    "text": "streams and adds their elements together uh sort of uh in a zip-like fashion in a",
    "start": "1991919",
    "end": "1997919"
  },
  {
    "text": "in a element by element right so it'll take corresponding elements from from",
    "start": "1997919",
    "end": "2004159"
  },
  {
    "text": "two streams it'll from the left stream and the right stream and then it'll add them together by yielding X Plus Y and",
    "start": "2004159",
    "end": "2010320"
  },
  {
    "text": "it'll repeat it'll do that repeatedly and then to sum the elements of P1 and",
    "start": "2010320",
    "end": "2017159"
  },
  {
    "text": "P2 we say P1 T P2 and T them together with ad all",
    "start": "2017159",
    "end": "2024480"
  },
  {
    "text": "right and a t again is not magic it is a",
    "start": "2025799",
    "end": "2031519"
  },
  {
    "text": "um it's a a stream or a process whose effect happens to be the ability to",
    "start": "2031519",
    "end": "2036880"
  },
  {
    "text": "request uh an A or a B right so the effect will",
    "start": "2036880",
    "end": "2042840"
  },
  {
    "text": "be an either a function that receives an A or a function that receives a b so it will be an a weight left or an A we",
    "start": "2042840",
    "end": "2049919"
  },
  {
    "text": "right uh another way of doing these things is to combine them with a with a Y another way of combining two streams",
    "start": "2049919",
    "end": "2057320"
  },
  {
    "start": "2051000",
    "end": "2347000"
  },
  {
    "text": "and a y is very much like a t except uh instead of sort of deterministically",
    "start": "2057320",
    "end": "2063200"
  },
  {
    "text": "asking for like I want the left one or I want the right one you can say you know give me whichever one is ready right",
    "start": "2063200",
    "end": "2070480"
  },
  {
    "text": "just like run these two processes and then when one of them emits uh an",
    "start": "2070480",
    "end": "2076320"
  },
  {
    "text": "element I want it and tell me which one it was right and",
    "start": "2076320",
    "end": "2083000"
  },
  {
    "text": "uh methods on on process on that that you can use are things like either so F1",
    "start": "2083000",
    "end": "2090679"
  },
  {
    "text": "either F2 will return so at every every step it'll be a so it'll be a stream",
    "start": "2090679",
    "end": "2096760"
  },
  {
    "text": "it'll be a source of either in or strings and at every step it will contain either an INT or a string right",
    "start": "2096760",
    "end": "2103760"
  },
  {
    "text": "and the int will come from F1 and the string will come from F2 where F1 is the",
    "start": "2103760",
    "end": "2109760"
  },
  {
    "text": "uh uh system input and F2 is this file",
    "start": "2109760",
    "end": "2116040"
  },
  {
    "text": "right and uh you can also merge uh where if you have two uh streams of the same",
    "start": "2116960",
    "end": "2124040"
  },
  {
    "text": "that emit the same type you can mer non-deterministically merge and together which is very much like inter except",
    "start": "2124040",
    "end": "2130320"
  },
  {
    "text": "that instead of saying like oh do this one first then this one then this one then this one it'll do you know it'll",
    "start": "2130320",
    "end": "2136200"
  },
  {
    "text": "run them both as fast as you can and then it will run uh it'll return uh it",
    "start": "2136200",
    "end": "2141640"
  },
  {
    "text": "will emit from them as they as they appear on the stream right so let's say you had you know like a like two network",
    "start": "2141640",
    "end": "2148800"
  },
  {
    "text": "sockets right and then you have both of them are streams uh then you can uh merge them",
    "start": "2148800",
    "end": "2155440"
  },
  {
    "text": "together and it'll just like wait on the socket and emit things as fast as they",
    "start": "2155440",
    "end": "2160560"
  },
  {
    "text": "come okay uh and there's also there's other stuff like for instance with the",
    "start": "2160560",
    "end": "2166079"
  },
  {
    "text": "until you can do the same thing with with y's which is uh interrupt like you can non-deterministically interrupt uh a",
    "start": "2166079",
    "end": "2172160"
  },
  {
    "text": "stream like this where you know I can say uh you know if there is anything on the",
    "start": "2172160",
    "end": "2179680"
  },
  {
    "text": "system input so I say mapcore to true so if if there's any element on the F1",
    "start": "2179680",
    "end": "2186800"
  },
  {
    "text": "which is the system so as soon as there's any input interrupt uh this the stream otherwise keep reading lines from",
    "start": "2186800",
    "end": "2194680"
  },
  {
    "text": "uh from F2 pretty cool um so yeah uh the the idea is that",
    "start": "2194680",
    "end": "2203640"
  },
  {
    "text": "if you have a y like this a y ABC you have two processes one that is a stream of A's and another that is a stream of",
    "start": "2203640",
    "end": "2210240"
  },
  {
    "text": "B's then you can y them together like this and which means either to non-deterministically interl them or",
    "start": "2210240",
    "end": "2216839"
  },
  {
    "text": "nondeterministic merge them uh and and the the actual method of like what it",
    "start": "2216839",
    "end": "2222319"
  },
  {
    "text": "actually does is specified by the y s",
    "start": "2222319",
    "end": "2226440"
  },
  {
    "text": "question uh yeah so so the the implementation of this like the",
    "start": "2232000",
    "end": "2238359"
  },
  {
    "text": "uh oh wait know you have whether there's anything",
    "start": "2238359",
    "end": "2244319"
  },
  {
    "text": "ready right uh so so so if once it's halted it's it's finished but uh the the",
    "start": "2245560",
    "end": "2252119"
  },
  {
    "text": "implementation of of the thing that runs the Y uh will it'll await on whatever",
    "start": "2252119",
    "end": "2258520"
  },
  {
    "text": "effects are happening on on either side and uh and so you know they're tasks",
    "start": "2258520",
    "end": "2264280"
  },
  {
    "text": "right it's a stream you have two streams of tasks and you're taking one task from each one one of them and you're like",
    "start": "2264280",
    "end": "2270160"
  },
  {
    "text": "running both of them and then whichever one whichever task finishes first that's",
    "start": "2270160",
    "end": "2275480"
  },
  {
    "text": "going to be your element and you're going to emit that on to the downstream it's not specialized task",
    "start": "2275480",
    "end": "2283440"
  },
  {
    "text": "no oh it is in",
    "start": "2284079",
    "end": "2288160"
  },
  {
    "text": "in okay okay so so in the last in the",
    "start": "2291280",
    "end": "2297599"
  },
  {
    "text": "previous version this was specialized in task is that yeah okay okay so FS2 makes this makes this",
    "start": "2297599",
    "end": "2305520"
  },
  {
    "text": "General cool um yeah so and also why is not",
    "start": "2305520",
    "end": "2311280"
  },
  {
    "text": "really uh Magic it is just a thing that can whose effect it's a stream whose",
    "start": "2311280",
    "end": "2316480"
  },
  {
    "text": "effect is uh a triple and so the effect is like",
    "start": "2316480",
    "end": "2322680"
  },
  {
    "text": "you know here are three functions one of them can receive an a one of them can receive a b and one of them can receive",
    "start": "2322680",
    "end": "2328760"
  },
  {
    "text": "both an A and A B and like whichever ones of these you have like call the",
    "start": "2328760",
    "end": "2334200"
  },
  {
    "text": "appropriate function like if you have an a call this one if you have a b call that one if you have both ready for me",
    "start": "2334200",
    "end": "2339720"
  },
  {
    "text": "call this function right so you know a y is also just a",
    "start": "2339720",
    "end": "2345079"
  },
  {
    "text": "just a stream yeah um so then uh another way of",
    "start": "2345079",
    "end": "2352720"
  },
  {
    "start": "2347000",
    "end": "2471000"
  },
  {
    "text": "combining things is it's very much like sort of uh uh flat map which is to to merge",
    "start": "2352720",
    "end": "2359680"
  },
  {
    "text": "streams so uh and it works very very much like a y except with any number of",
    "start": "2359680",
    "end": "2366599"
  },
  {
    "text": "processes so if you if you have a process full of processes like if you have a stream of streams you can say",
    "start": "2366599",
    "end": "2375200"
  },
  {
    "text": "uh uh merge them all together like all of those streams would produce A's and",
    "start": "2375200",
    "end": "2380440"
  },
  {
    "text": "what I'm saying is non-deterministically merge them like just run them all really really quickly and then um if they emit",
    "start": "2380440",
    "end": "2388440"
  },
  {
    "text": "an a like emit that on the on this on the stream right so whole bunch of streams you merge them all together",
    "start": "2388440",
    "end": "2395680"
  },
  {
    "text": "yeah uh and it's kind of like monatic join right it's given the type signature right but but the monatic join would",
    "start": "2395680",
    "end": "2401640"
  },
  {
    "text": "actually like finish one process and then finish the next process but this allows you to do is like run all the",
    "start": "2401640",
    "end": "2407720"
  },
  {
    "text": "processes uh simultaneously and emit the results as they become",
    "start": "2407720",
    "end": "2413200"
  },
  {
    "text": "available uh and this actually calls uh a thing called njin uh which is on this",
    "start": "2413200",
    "end": "2418680"
  },
  {
    "text": "non-determinism package and that gives you a little more control over like how you're actually combining uh these",
    "start": "2418680",
    "end": "2425359"
  },
  {
    "text": "streams uh so Max open is the is the maximum number of processes open at any given time uh and Max cued is the",
    "start": "2425359",
    "end": "2433520"
  },
  {
    "text": "maximum number of elements uh that are are sort of queued on the output before you actually block on the input so this",
    "start": "2433520",
    "end": "2440240"
  },
  {
    "text": "this is how you implement sort of like back pressure it's using uh and",
    "start": "2440240",
    "end": "2445440"
  },
  {
    "text": "join question",
    "start": "2445440",
    "end": "2449440"
  },
  {
    "text": "oh yeah so so right so even though this looks like a a monatic joint it does not",
    "start": "2462720",
    "end": "2468920"
  },
  {
    "text": "obey the the monad laws Daniel points out uh okay so that gets us to syncs and",
    "start": "2468920",
    "end": "2476680"
  },
  {
    "start": "2471000",
    "end": "2566000"
  },
  {
    "text": "a sync is really just a source of functions right so if you",
    "start": "2476680",
    "end": "2481839"
  },
  {
    "text": "have uh oh sorry sorry I've confused myself so okay so here",
    "start": "2481839",
    "end": "2488040"
  },
  {
    "text": "uh there there is a uh a method called two so if you have a process a stream of",
    "start": "2488040",
    "end": "2493400"
  },
  {
    "text": "a and you have a sync that receives a then you can say X2 y to to stream the A's to the sync right um and that is uh",
    "start": "2493400",
    "end": "2504720"
  },
  {
    "text": "uh provided by so so there's a bunch of things that are provided in the io package for instance standard in lines",
    "start": "2504720",
    "end": "2511000"
  },
  {
    "text": "is a uh is a process uh of strings and then standard outlines is a sync that",
    "start": "2511000",
    "end": "2516560"
  },
  {
    "text": "receives strings yeah uh and then we can Implement Cat by saying standard inlines to standard outlines so that will just",
    "start": "2516560",
    "end": "2524240"
  },
  {
    "text": "Echo the standard in lines to the standard outlines and sync is just a stream of functions uh that is uh it's",
    "start": "2524240",
    "end": "2531640"
  },
  {
    "text": "it's this it's really this type here so a sync is a stream which can emit uh",
    "start": "2531640",
    "end": "2539160"
  },
  {
    "text": "effects of type f but it will also it can also emit functions which receive A's right and then those will have some",
    "start": "2539160",
    "end": "2546480"
  },
  {
    "text": "effect for example we can Implement standard out by just",
    "start": "2546480",
    "end": "2552520"
  },
  {
    "text": "saying um emit this function which receives an S uh and then prints that to",
    "start": "2552520",
    "end": "2559520"
  },
  {
    "text": "the standard out and then repeat that so that now becomes a sync which is the standard output sync uh channels a",
    "start": "2559520",
    "end": "2568079"
  },
  {
    "start": "2566000",
    "end": "2596000"
  },
  {
    "text": "channel is a very similar kind of thing except that it can it can have a result",
    "start": "2568079",
    "end": "2573800"
  },
  {
    "text": "uh so it's it's like a sync except that uh it doesn't just like it also emits",
    "start": "2573800",
    "end": "2579960"
  },
  {
    "text": "B's right so and then you say through instead of two and so X through y will take a process of a and emit the",
    "start": "2579960",
    "end": "2587160"
  },
  {
    "text": "elements through the channel y uh which will then receive the values of type A",
    "start": "2587160",
    "end": "2593839"
  },
  {
    "text": "and emit values of type B all right and again a a channel is just a stream of",
    "start": "2593839",
    "end": "2599480"
  },
  {
    "text": "functions and so uh you know it's a it's a stream",
    "start": "2599480",
    "end": "2605040"
  },
  {
    "text": "where you know it has some effects type f and it will emit functions that are",
    "start": "2605040",
    "end": "2610400"
  },
  {
    "text": "sort of effectful functions and those functions will then return uh F of B",
    "start": "2610400",
    "end": "2616480"
  },
  {
    "text": "where it likes to say is a Tas of B uh and then this channel will emit the B's that are returned by this function and",
    "start": "2616480",
    "end": "2623079"
  },
  {
    "text": "in fact the sync is a channel that specialized to unit uh I'm going to skip over",
    "start": "2623079",
    "end": "2630839"
  },
  {
    "text": "here um okay all right that gets me to Q's",
    "start": "2630839",
    "end": "2638000"
  },
  {
    "text": "very okay started late all right that gives me to cues and signals um so uh",
    "start": "2638000",
    "end": "2645240"
  },
  {
    "text": "the uh the Skyla stream async package uh contains uh some really useful stuff",
    "start": "2645240",
    "end": "2650880"
  },
  {
    "start": "2649000",
    "end": "2735000"
  },
  {
    "text": "that you should check out uh cues and signals so a q allows you to NQ and DQ",
    "start": "2650880",
    "end": "2656839"
  },
  {
    "text": "and and it's backed by like an actual mutable Q uh but in it presents the que",
    "start": "2656839",
    "end": "2661960"
  },
  {
    "text": "as a streaming interface so there's an NQ sync that you can pipe to",
    "start": "2661960",
    "end": "2667640"
  },
  {
    "text": "and there's a DQ source so a stream of a so every time something uh sends",
    "start": "2667640",
    "end": "2673359"
  },
  {
    "text": "something to the NQ sync it will appear on the DQ stream right uh and there is a number of of",
    "start": "2673359",
    "end": "2681559"
  },
  {
    "text": "ways of constructing cues you can construct bounded cues unbounded cues and there's a circular buffer which will overwrite itself um",
    "start": "2681559",
    "end": "2690200"
  },
  {
    "text": "and skip over that uh there's a a another thing super useful called the",
    "start": "2690200",
    "end": "2697040"
  },
  {
    "text": "signal which is like a mutable cell which will allow you to get and set so",
    "start": "2697040",
    "end": "2702400"
  },
  {
    "text": "you can get the value that's in the signal which is an A and but you get it as a task and then you can set the a",
    "start": "2702400",
    "end": "2708680"
  },
  {
    "text": "also as a task um and we can get a stream of the values of the signal like",
    "start": "2708680",
    "end": "2713960"
  },
  {
    "text": "as it changes over time uh and we can get the discret and continuous so discrete will emit a value every time",
    "start": "2713960",
    "end": "2720920"
  },
  {
    "text": "the signal changes and continuous will just you know it's just like fire hose it will like continue give us A's or the",
    "start": "2720920",
    "end": "2729000"
  },
  {
    "text": "current value of of the signal as long as we keep asking for it um okay now I",
    "start": "2729000",
    "end": "2736119"
  },
  {
    "start": "2735000",
    "end": "2821000"
  },
  {
    "text": "was going to do a little demo but I think I'm going to save that for the unconference tomorrow uh but you can",
    "start": "2736119",
    "end": "2743319"
  },
  {
    "text": "sort of check that out in the meantime uh here on uh at this on GitHub uh and",
    "start": "2743319",
    "end": "2751680"
  },
  {
    "text": "so yeah I'll take a I'll take a question all right thank you",
    "start": "2751680",
    "end": "2758920"
  },
  {
    "text": "anyone other than Daniel yes sir oh the question is can I give an",
    "start": "2765400",
    "end": "2771400"
  },
  {
    "text": "indication of what's changing between this and next Daniel is sitting right behind you and he can definitely give you an indication of of what is changing",
    "start": "2771400",
    "end": "2779520"
  },
  {
    "text": "um but the the the short answer is that resource safety is being improved uh I",
    "start": "2779520",
    "end": "2785200"
  },
  {
    "text": "mean it it's like actually becoming resource safe and uh the the way that you sort of",
    "start": "2785200",
    "end": "2791359"
  },
  {
    "text": "pull from multiple sources is is also changing like you you know you don't need to necessarily mess with like pipes",
    "start": "2791359",
    "end": "2798440"
  },
  {
    "text": "and y's and T's and and things like that that you know you can you can express like how you pull from various sources",
    "start": "2798440",
    "end": "2805079"
  },
  {
    "text": "in a much more sort of compositional way all right that's it thank you",
    "start": "2805079",
    "end": "2814440"
  }
]