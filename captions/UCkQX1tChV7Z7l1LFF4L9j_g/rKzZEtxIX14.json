[
  {
    "text": "classes are factories that create objects and if you get really technical",
    "start": "7670",
    "end": "13590"
  },
  {
    "text": "you can say classes are objects because everything in Python is an object but a class is a special kind of thing whose",
    "start": "13590",
    "end": "18869"
  },
  {
    "text": "job it is to be the specification for the creator of objects so we make new",
    "start": "18869",
    "end": "24539"
  },
  {
    "text": "objects with classes and what specifically did we explore about classes what can you what can you do to",
    "start": "24539",
    "end": "31500"
  },
  {
    "text": "customize classes right so the basic thing we want to do with classes is packaged some code and some data",
    "start": "31500",
    "end": "37739"
  },
  {
    "text": "together the methods are regular functions but they're attached to an object they take a first mandatory",
    "start": "37739",
    "end": "43230"
  },
  {
    "text": "parameter called self that refers to the object once it's actually created we",
    "start": "43230",
    "end": "50250"
  },
  {
    "text": "don't have to pass that parameter in and it's a way for the methods to be directly attached to the data they're",
    "start": "50250",
    "end": "55260"
  },
  {
    "text": "operating on they can set variables on self and that's in the local namespace of the instantiated object methods what",
    "start": "55260",
    "end": "62250"
  },
  {
    "text": "methods methods did we talk about your study on classes we're talking about in",
    "start": "62250",
    "end": "67950"
  },
  {
    "text": "it what does in it do yeah and it is the",
    "start": "67950",
    "end": "73820"
  },
  {
    "text": "so you'll find out later that I've lied to you for the purposes of simplification but yes and it is the constructor of the class there's also an",
    "start": "73820",
    "end": "81900"
  },
  {
    "text": "underscore underscore new method and the deal is in Python you don't have to take",
    "start": "81900",
    "end": "91920"
  },
  {
    "text": "your construction and destruction of your classes quite as seriously as you do in many other languages so it's very",
    "start": "91920",
    "end": "97950"
  },
  {
    "text": "typical not to write destructors for your classes at all which most other OOP languages you would and we don't",
    "start": "97950",
    "end": "105119"
  },
  {
    "text": "actually handle the classes allocation and construction in it really is called",
    "start": "105119",
    "end": "112200"
  },
  {
    "text": "after the class is made and it's a way for us to go ahead and initialize the data that should exist on every single object if you really had to control how",
    "start": "112200",
    "end": "118979"
  },
  {
    "text": "the class is allocated you can use new and you can also use yeah there's a",
    "start": "118979",
    "end": "124439"
  },
  {
    "text": "couple of complicated concepts that are way beyond the scope of the class but you can use the metaclass of the class",
    "start": "124439",
    "end": "129959"
  },
  {
    "text": "the totally control how it's created and instantiated they all sorts of crazy things like returning objects that aren't even part",
    "start": "129959",
    "end": "135850"
  },
  {
    "text": "of your class at all if you wanted to and it's it's way beyond the scope of the class to discuss it but be aware in",
    "start": "135850",
    "end": "141880"
  },
  {
    "text": "it is not actually the constructor but it is the initializer of your of your object and it is what you're going to",
    "start": "141880",
    "end": "147760"
  },
  {
    "text": "use ninety-nine point nine percent of the time to initialize your objects other use cases are for people who are writing complicated software that I",
    "start": "147760",
    "end": "154150"
  },
  {
    "text": "might use okay so talking about other functions we talked about on classes",
    "start": "154150",
    "end": "160380"
  },
  {
    "text": "other methods of classes we actually listed a whole bunch of underscore",
    "start": "160380",
    "end": "168310"
  },
  {
    "text": "methods and you Lee is asking kind of how are these related to one another and we did the underscore underscore string",
    "start": "168310",
    "end": "174340"
  },
  {
    "text": "method yesterday we did an underscore underscore repper re PR method we talked",
    "start": "174340",
    "end": "181090"
  },
  {
    "text": "about like the underscore underscore add the dunder add method and there's a bunch more they're not related to each",
    "start": "181090",
    "end": "190060"
  },
  {
    "text": "other in any technical sense what all the underscore methods are our protocol",
    "start": "190060",
    "end": "198160"
  },
  {
    "text": "methods I never Python does stuff with your objects it checks to see if these methods exist and uses them if they do",
    "start": "198160",
    "end": "205890"
  },
  {
    "text": "so Python allows you to influence how your methods respond to all the built-in",
    "start": "205890",
    "end": "211300"
  },
  {
    "text": "operators so converting to strings converting to representation responding",
    "start": "211300",
    "end": "218980"
  },
  {
    "text": "to ad responding to the call operator which is parenthesis you can customize how your object could handle being",
    "start": "218980",
    "end": "225540"
  },
  {
    "text": "called and responding two plus two x",
    "start": "225540",
    "end": "230850"
  },
  {
    "text": "divided you remember we did sets way back and we could use functions to do",
    "start": "230850",
    "end": "238810"
  },
  {
    "text": "things like the intersection of two sets but we could also use operators we could",
    "start": "238810",
    "end": "244330"
  },
  {
    "text": "say like set one ampersand set to and that operator is actually a boolean",
    "start": "244330",
    "end": "250239"
  },
  {
    "text": "ampersand by default and it only has meaning on sets because sets have the",
    "start": "250239",
    "end": "255910"
  },
  {
    "text": "set class has implemented the underscore method that responds to that operator so",
    "start": "255910",
    "end": "263590"
  },
  {
    "text": "all those methods there just to allow us to customize how our objects get handled by Python",
    "start": "263590",
    "end": "269800"
  },
  {
    "text": "yes nope that's we are we are doing",
    "start": "269800",
    "end": "274820"
  },
  {
    "text": "operator overloading and this is how Python accomplishes it yes it is yes and",
    "start": "274820",
    "end": "281260"
  },
  {
    "text": "again it kind of works by protocol and you can read the documentation about the protocol but Python will call even a",
    "start": "281260",
    "end": "287540"
  },
  {
    "text": "succession of methods so if you define the underscore underscore and new when",
    "start": "287540",
    "end": "292639"
  },
  {
    "text": "you create a new object of your class Python will call that if you then have an underscore underscore in it Python",
    "start": "292639",
    "end": "298130"
  },
  {
    "text": "I'll call that if you didn't provide either one it'll just make your object so as protocol based there's no",
    "start": "298130",
    "end": "303800"
  },
  {
    "text": "syntactic enforcement of making sure that you have a constructor or a destructor or implement any of these",
    "start": "303800",
    "end": "309410"
  },
  {
    "text": "dunder square methods you'll just find out about it when you try to use an operator on a object that doesn't",
    "start": "309410",
    "end": "316190"
  },
  {
    "text": "support it and I'll say I'm sorry I can't add a row in a row that operation isn't supported protocol I'm using in",
    "start": "316190",
    "end": "322910"
  },
  {
    "text": "the sense that there is a defined order of operations that Python follows and that allows us to hook into and modify",
    "start": "322910",
    "end": "331760"
  },
  {
    "text": "the behavior of our objects but it's not a syntactic level enforcement at all",
    "start": "331760",
    "end": "336919"
  },
  {
    "text": "yeah and just as an example of how flexible that makes things you can",
    "start": "336919",
    "end": "343160"
  },
  {
    "text": "respond to the operator for brackets for square brackets so if you want your address book to be able to say I got a",
    "start": "343160",
    "end": "351590"
  },
  {
    "text": "new address book in its a and you can just say a bracket one closing bracket",
    "start": "351590",
    "end": "356780"
  },
  {
    "text": "you're not getting into whatever data structure you're using your calling a function that can get into whatever data",
    "start": "356780",
    "end": "363560"
  },
  {
    "text": "structure using so you could enable for instance indexing by position and",
    "start": "363560",
    "end": "368960"
  },
  {
    "text": "indexing by name on the same object because ultimately being handed to a",
    "start": "368960",
    "end": "374180"
  },
  {
    "text": "function in the function could say hey if this is an energy let's do positional and if this is a string let's do a key base look up so you can program how your",
    "start": "374180",
    "end": "384289"
  },
  {
    "text": "objects are going to respond to all the operators and some things are operators that you don't think of like square brackets like parentheses it's just the",
    "start": "384289",
    "end": "391280"
  },
  {
    "text": "operator for call and it's you can make very fluent interfaces using the dunder",
    "start": "391280",
    "end": "397760"
  },
  {
    "text": "score methods and emulation okay what else do we talked about yesterday besides OOP it seems like the",
    "start": "397760",
    "end": "403020"
  },
  {
    "text": "only thing we talked about but we really talked about that for like an hour and a half maybe list comprehension which",
    "start": "403020",
    "end": "408570"
  },
  {
    "text": "should be like your new best friend for life seriously you should love these things and list comprehensions are",
    "start": "408570",
    "end": "414150"
  },
  {
    "text": "indicated by what square brackets those",
    "start": "414150",
    "end": "419280"
  },
  {
    "text": "comprehensions have three parts with one part being optional the first thing in",
    "start": "419280",
    "end": "425460"
  },
  {
    "text": "the list comprehension is yes basically the return value the statement the expression that will be evaluated and",
    "start": "425460",
    "end": "431490"
  },
  {
    "text": "become a single item in the resulting list and it is everything up until you bump into a four and it can mutate it",
    "start": "431490",
    "end": "439020"
  },
  {
    "text": "can change it can just be a value from the iterable you're iterating over the",
    "start": "439020",
    "end": "445770"
  },
  {
    "text": "next thing is the next thing is the four and that defines your iteration for",
    "start": "445770",
    "end": "451940"
  },
  {
    "text": "value in some iterable innumerable and",
    "start": "451940",
    "end": "456980"
  },
  {
    "text": "the last and optional part is the if the",
    "start": "456980",
    "end": "462630"
  },
  {
    "text": "condition you can optionally include items in the resulting list so in the",
    "start": "462630",
    "end": "468330"
  },
  {
    "text": "list comprehension we can filter things out and we can change their values in one statement and we can nest list",
    "start": "468330",
    "end": "475260"
  },
  {
    "text": "comprehensions but um I don't approve of that there we go so we talked about not",
    "start": "475260",
    "end": "482580"
  },
  {
    "text": "just functions as first-class citizens but higher order functions functional composition factories functions that",
    "start": "482580",
    "end": "489360"
  },
  {
    "text": "create special case functions for us and return them decorators which do exactly",
    "start": "489360",
    "end": "495210"
  },
  {
    "text": "that but wrap the enclosing function decorators we can mostly conclude make",
    "start": "495210",
    "end": "500400"
  },
  {
    "text": "you think when you write them but they're trivial to use we're going to use another decorator at today as we continue doing oops it's super useful",
    "start": "500400",
    "end": "505770"
  },
  {
    "text": "and that's built in we took a look at well we took a look at anonymous",
    "start": "505770",
    "end": "512669"
  },
  {
    "text": "functions lambda if you remember lambda",
    "start": "512670",
    "end": "518130"
  },
  {
    "text": "they have to be really simple a single expression which is implicitly a return an optional list of parameters no",
    "start": "518130",
    "end": "525990"
  },
  {
    "text": "parentheses just a semicolon separating the two things and the keyword lambda and we might use them as short one",
    "start": "525990",
    "end": "531210"
  },
  {
    "text": "liners to pass things like filter or sort or map built-ins that expect you to pass a",
    "start": "531210",
    "end": "537750"
  },
  {
    "text": "function that does something simple like pick a key a return a value or compare two objects we talked a little bit more",
    "start": "537750",
    "end": "544860"
  },
  {
    "text": "about namespaces yesterday namespace is going from packages and modules",
    "start": "544860",
    "end": "549899"
  },
  {
    "text": "functions and nested functions and now classes and objects and we're ready to",
    "start": "549899",
    "end": "558029"
  },
  {
    "text": "talk a little bit more about OOP today",
    "start": "558029",
    "end": "562520"
  },
  {
    "text": "I guess I shouldn't forget we had did a little random coverage of the standard library so we talked about like",
    "start": "587600",
    "end": "592759"
  },
  {
    "text": "itertools for instance and the operator module as well so in our OOP section in",
    "start": "592759",
    "end": "602060"
  },
  {
    "text": "our curriculum we've got the first and basic level of objects we talked about",
    "start": "602060",
    "end": "609069"
  },
  {
    "text": "emulation which is the section in the curriculum it talks about the dunder square methods another word for that",
    "start": "609069",
    "end": "615139"
  },
  {
    "text": "could be operator overloading but basically how to customize the behavior of your classes in response to various",
    "start": "615139",
    "end": "620449"
  },
  {
    "text": "operators it's worth noting that one of the examples in the curriculum is",
    "start": "620449",
    "end": "625959"
  },
  {
    "text": "iteration so it shows a class this is on page 44 it shows a class that defines an",
    "start": "625959",
    "end": "634399"
  },
  {
    "text": "underscore underscore writer function and that simply enables you to do things like for value in object it'll respond",
    "start": "634399",
    "end": "644990"
  },
  {
    "text": "to the iteration protocol so we hadn't covered that we might do a code sample of that today we did talk about static",
    "start": "644990",
    "end": "653329"
  },
  {
    "text": "method we use the decorator we left self off of our function if you didn't use the decorator and you left self off of",
    "start": "653329",
    "end": "659089"
  },
  {
    "text": "your function when you call your function on an object it complains",
    "start": "659089",
    "end": "664899"
  },
  {
    "text": "because once the past self when you call on the classic complains because you want to pass self if you add the static",
    "start": "666009",
    "end": "671779"
  },
  {
    "text": "method object or the static method decorator you can call your function directly on the class without having",
    "start": "671779",
    "end": "677209"
  },
  {
    "text": "instantiated an object and that sometimes a little bit useful there's also the class method decorator that we",
    "start": "677209",
    "end": "684500"
  },
  {
    "text": "could cover if you have methods you might want to call without like class",
    "start": "684500",
    "end": "689689"
  },
  {
    "text": "being instantiated but you do want access to the class well I meant why",
    "start": "689689",
    "end": "697519"
  },
  {
    "text": "might you want access to the class change the common data so objects have",
    "start": "697519",
    "end": "703399"
  },
  {
    "text": "namespaces and every object has its own namespace but they also share the class name space so if you wrote a class",
    "start": "703399",
    "end": "710209"
  },
  {
    "text": "method and it changed a variable on the class every single object would see it",
    "start": "710209",
    "end": "715399"
  },
  {
    "text": "so there could be two ways of passing a piece of information to all the objects that exist one might be to ran",
    "start": "715399",
    "end": "721850"
  },
  {
    "text": "them all up let's say you've made 20 rows or you go through each row and give",
    "start": "721850",
    "end": "727130"
  },
  {
    "text": "it some data or you could just set the data directly on the class and you might",
    "start": "727130",
    "end": "732259"
  },
  {
    "text": "want to do that as a class method in which case every object would be able to look up and see the change data the data",
    "start": "732259",
    "end": "737930"
  },
  {
    "text": "is in common and class methods we can do real quickly and by the way today we get",
    "start": "737930",
    "end": "750980"
  },
  {
    "text": "to explain what this whole row object thing is that we start our classes with",
    "start": "750980",
    "end": "757060"
  },
  {
    "text": "so if we want access to the class we should probably pass it and the default",
    "start": "759759",
    "end": "769100"
  },
  {
    "text": "is to use again an argument that is named nicely CLS this is not syntactically enforced but again if you",
    "start": "769100",
    "end": "776360"
  },
  {
    "text": "write class methods in the first object is the first argument is called food than other people might hit you",
    "start": "776360",
    "end": "784149"
  },
  {
    "text": "there is no roex",
    "start": "799400",
    "end": "802720"
  },
  {
    "text": "I tell you",
    "start": "839070",
    "end": "843740"
  },
  {
    "text": "try this one more time",
    "start": "853920",
    "end": "857720"
  },
  {
    "text": "ok so I've written a class it has a",
    "start": "881760",
    "end": "887040"
  },
  {
    "text": "class method and that class method is a function whose first argument is the",
    "start": "887040",
    "end": "893430"
  },
  {
    "text": "class and it takes a value and I set the value on the class and when i",
    "start": "893430",
    "end": "902850"
  },
  {
    "text": "instantiate objects",
    "start": "902850",
    "end": "905839"
  },
  {
    "text": "we can see that we are in fact changing common data that's shared between the objects games games are kind of fun to",
    "start": "916190",
    "end": "928700"
  },
  {
    "text": "play around with and I've written a bunch of games with a Python library",
    "start": "928700",
    "end": "933860"
  },
  {
    "text": "called PI game it's another one called pikelet that I'm supposedly transitioning to but they let you write",
    "start": "933860",
    "end": "940000"
  },
  {
    "text": "simple 2d games in 100 lines of code stuff like our address book and you can",
    "start": "940000",
    "end": "946550"
  },
  {
    "text": "write simple 2d games if you want to do 3d and you want to do very much hardware",
    "start": "946550",
    "end": "952760"
  },
  {
    "text": "enhancement things get more complicated but to write simple games i wrote written games for my kids i wrote like a",
    "start": "952760",
    "end": "958580"
  },
  {
    "text": "typing game and a math game for my daughter you know bubbles fly across the screen with math problems and you type the answer on the keypad and the bubbles",
    "start": "958580",
    "end": "965330"
  },
  {
    "text": "pop a sort of thing and it's fun to be able to do that in 20 lines in 15 minutes but very frequently if your game",
    "start": "965330",
    "end": "972620"
  },
  {
    "text": "is at all complex you have tons and tons of objects everything in your gaming environment might be an object your",
    "start": "972620",
    "end": "978050"
  },
  {
    "text": "player all the enemies all the sprites moving around the screen and I've used class variables as a way to do method",
    "start": "978050",
    "end": "985160"
  },
  {
    "text": "passing to all the objects that are the same type so if for instance I've won the level and all the enemies in my",
    "start": "985160",
    "end": "991610"
  },
  {
    "text": "space game should blow up I might just set a variable called destruct on the",
    "start": "991610",
    "end": "996620"
  },
  {
    "text": "class for enemies and all the different kinds of enemy's ships people whatever notice that they're supposed to be",
    "start": "996620",
    "end": "1002890"
  },
  {
    "text": "distracting and start blowing themselves up it's a way to do message passing to a bunch of stuff instead of having to",
    "start": "1002890",
    "end": "1008260"
  },
  {
    "text": "reach out to each individual one and tell it so shared data it's it's useful and the other decorator that I wanted to",
    "start": "1008260",
    "end": "1017050"
  },
  {
    "text": "show you is going to skip ahead just a bit this section called encapsulation",
    "start": "1017050",
    "end": "1023069"
  },
  {
    "text": "we're still not talking about inheritance I'm going to do that afterwards but sections 16.7 and your",
    "start": "1023069",
    "end": "1032410"
  },
  {
    "text": "curriculum has three different ways of implementing encapsulation on our Python",
    "start": "1032410",
    "end": "1039430"
  },
  {
    "text": "objects and encapsulation basically is the object-oriented principle that how",
    "start": "1039430",
    "end": "1047890"
  },
  {
    "text": "you do something should be hidden from the end user of your class you could just expose that",
    "start": "1047890",
    "end": "1055580"
  },
  {
    "text": "you do something and what that means is the implementation details can change",
    "start": "1055580",
    "end": "1063430"
  },
  {
    "text": "but how your object is used might remain exactly the same and I gave the example",
    "start": "1063430",
    "end": "1068630"
  },
  {
    "text": "yesterday of your address book scaling if you are exposing all your data as a",
    "start": "1068630",
    "end": "1074600"
  },
  {
    "text": "list for our type programs that's fine and you implement searching by searching",
    "start": "1074600",
    "end": "1080000"
  },
  {
    "text": "of the list and that's fine maybe you want to store your data in a database if all the access to your address book is",
    "start": "1080000",
    "end": "1086930"
  },
  {
    "text": "happening through address book methods and Road methods you can change the fact that your address book is storing them",
    "start": "1086930",
    "end": "1092870"
  },
  {
    "text": "in a list to the fact that your address book is looking them up in a database without changing any of the methods and",
    "start": "1092870",
    "end": "1098390"
  },
  {
    "text": "the program that uses your objects doesn't have to know about it the",
    "start": "1098390",
    "end": "1105140"
  },
  {
    "text": "concept of coupling is involved here tight versus loose coupling and basically objects should be able to use",
    "start": "1105140",
    "end": "1112460"
  },
  {
    "text": "one another without knowing very much about one another so as an example when",
    "start": "1112460",
    "end": "1118430"
  },
  {
    "text": "I say I want to represent a row if my address book says print % s % s % s",
    "start": "1118430",
    "end": "1126950"
  },
  {
    "text": "first name last name role of my row my address book knows a lot about my row",
    "start": "1126950",
    "end": "1133130"
  },
  {
    "text": "object it knows that it has three fields it knows what the names of the three fields are if I ever change the three",
    "start": "1133130",
    "end": "1140150"
  },
  {
    "text": "fields I have to change my address book class if on the other hand my address book class just says print row and we",
    "start": "1140150",
    "end": "1148040"
  },
  {
    "text": "delegate that printing operation to the string the dunder score string method my",
    "start": "1148040",
    "end": "1153440"
  },
  {
    "text": "address book doesn't know anything about row and when Row starts adding fields or row decides that we want to show a",
    "start": "1153440",
    "end": "1160810"
  },
  {
    "text": "fixed-width format instead of an English sentence the address book doesn't change",
    "start": "1160810",
    "end": "1168910"
  },
  {
    "text": "so what it does display a row is completely separate from the",
    "start": "1168910",
    "end": "1174280"
  },
  {
    "text": "implementation and row hide that from the address book if possible it should be the relationship between all your of",
    "start": "1174280",
    "end": "1180830"
  },
  {
    "text": "your objects when you have one object that is poking deeply into the data structures of another object",
    "start": "1180830",
    "end": "1185840"
  },
  {
    "text": "they're tightly coupled if you change one you're going to have to change the other make one small change to one",
    "start": "1185840",
    "end": "1191060"
  },
  {
    "text": "object it may cascade up a chain of three or four other objects that are not",
    "start": "1191060",
    "end": "1196280"
  },
  {
    "text": "directly related but would use it and we'd like to prevent that from happening so we have encapsulation and we already",
    "start": "1196280",
    "end": "1202760"
  },
  {
    "text": "have a basic level encapsulation which is we can just make you do everything through functions yes we may have data structures but you know two functions",
    "start": "1202760",
    "end": "1209420"
  },
  {
    "text": "and we can emulate various operators to make that nature so we can emulate emulate iteration and hide from you",
    "start": "1209420",
    "end": "1216680"
  },
  {
    "text": "whether we're storing things in a list are storing things in a database and when you iterate over us we'll pull them from a list or pull them from a database",
    "start": "1216680",
    "end": "1222800"
  },
  {
    "text": "and you don't know which and that's kind of one level of encapsulation that's useful and but we can also fake some",
    "start": "1222800",
    "end": "1230570"
  },
  {
    "text": "things about our objects and there's three ways of faking things about the",
    "start": "1230570",
    "end": "1235790"
  },
  {
    "text": "properties of our objects I'm going to tell you about one in detail but I'm",
    "start": "1235790",
    "end": "1240950"
  },
  {
    "text": "going to mention all three the first one",
    "start": "1240950",
    "end": "1246080"
  },
  {
    "text": "is that we can intercept attribute access and attribute access is the dot",
    "start": "1246080",
    "end": "1252800"
  },
  {
    "text": "operator the dot says what comes next is",
    "start": "1252800",
    "end": "1257840"
  },
  {
    "text": "a variable but I want to look this variable up in the namespace before the dot so in this case the namespace before",
    "start": "1257840",
    "end": "1265640"
  },
  {
    "text": "the dot is an object and when I say RX it looks up X in the namespace of the",
    "start": "1265640",
    "end": "1271160"
  },
  {
    "text": "object it happens that it doesn't find it but objects look at their enclosing class namespace and does find it there",
    "start": "1271160",
    "end": "1277460"
  },
  {
    "text": "and returns it to us we can use the underscore underscore get at her method",
    "start": "1277460",
    "end": "1285490"
  },
  {
    "text": "to respond to the dot object which is the most flexible way of doing",
    "start": "1285490",
    "end": "1291530"
  },
  {
    "text": "encapsulation but also way overkill for most of what we want and what it means is every single time we use the dot",
    "start": "1291530",
    "end": "1297620"
  },
  {
    "text": "operator instead of going to look for the field it'll call our function and",
    "start": "1297620",
    "end": "1303500"
  },
  {
    "text": "pass it the name that is trying to look up and let us decide whether that name should be looked up and where it should be looked up and it's probably not what",
    "start": "1303500",
    "end": "1312530"
  },
  {
    "text": "we want it's probably a little too powerful the",
    "start": "1312530",
    "end": "1318680"
  },
  {
    "text": "simpler use case is to use a concept called properties anybody done i need java programming in here so Java it's",
    "start": "1318680",
    "end": "1326540"
  },
  {
    "text": "very frequent to write getters and setters for the properties on your objects you don't let somebody directly",
    "start": "1326540",
    "end": "1331850"
  },
  {
    "text": "say Rho dot X and X is an int you probably say something like Rho dot get",
    "start": "1331850",
    "end": "1340240"
  },
  {
    "text": "X to get the value and if you're going to assign to it you price a Rho dot said",
    "start": "1340240",
    "end": "1348290"
  },
  {
    "text": "X and pass a value and the idea is encapsulation you're hiding the data",
    "start": "1348290",
    "end": "1354650"
  },
  {
    "text": "type of your underlying property it's programmability let's say that we want",
    "start": "1354650",
    "end": "1360350"
  },
  {
    "text": "our object to do something every time X changes if we start out with X as a",
    "start": "1360350",
    "end": "1365750"
  },
  {
    "text": "simple integer and we set the integer we have no way of responding to that operation so it's very common in Java to",
    "start": "1365750",
    "end": "1373040"
  },
  {
    "text": "hide every single attribute access behind getters and setters Python has",
    "start": "1373040",
    "end": "1379600"
  },
  {
    "text": "the idea of getters and setters but in a more flexible implementation so let's",
    "start": "1379600",
    "end": "1385450"
  },
  {
    "text": "write a property",
    "start": "1385450",
    "end": "1389169"
  },
  {
    "text": "ok so I've got a class a be for address book I'm defining mine it function it",
    "start": "1434860",
    "end": "1440300"
  },
  {
    "text": "takes self it takes data it's just setting data to a object level variable and I've got another variable called num",
    "start": "1440300",
    "end": "1447860"
  },
  {
    "text": "rows that I get from calculating the length of data I'd like to expose I have",
    "start": "1447860",
    "end": "1454700"
  },
  {
    "text": "in fact exposed num rows right now",
    "start": "1454700",
    "end": "1458380"
  },
  {
    "text": "obviously not passing a real address book data here but I can see numrows if",
    "start": "1466279",
    "end": "1476119"
  },
  {
    "text": "I want to take some sort of action or I want to do some sort of filtering",
    "start": "1476119",
    "end": "1482059"
  },
  {
    "text": "anytime somebody looks up numrows I can use a property I'm going to hide numrows",
    "start": "1482059",
    "end": "1497499"
  },
  {
    "text": "slightly python has no concept of private variables it is convention to",
    "start": "1497499",
    "end": "1505549"
  },
  {
    "text": "use a leading underscore for variables you do not intend people to directly access and what this basically",
    "start": "1505549",
    "end": "1510830"
  },
  {
    "text": "communicates is hey if you're peeking at my underscore variables you may not know",
    "start": "1510830",
    "end": "1515989"
  },
  {
    "text": "what you're doing they may or may not be accurate this isn't the way you're supposed to use them it does have data",
    "start": "1515989",
    "end": "1522859"
  },
  {
    "text": "mangling that we'll talk about in a little bit that's a convention not",
    "start": "1522859",
    "end": "1533539"
  },
  {
    "text": "syntactically enforced",
    "start": "1533539",
    "end": "1536528"
  },
  {
    "text": "now what makes the difference is whether you set it on the class or whether you",
    "start": "1580830",
    "end": "1586090"
  },
  {
    "text": "set it on the object so back in our class method the first parameter that",
    "start": "1586090",
    "end": "1591460"
  },
  {
    "text": "came in wasn't self it wasn't an object it was class it was the class and so",
    "start": "1591460",
    "end": "1598660"
  },
  {
    "text": "saying back then CLS X is no different than saying Road X and remember row is a",
    "start": "1598660",
    "end": "1606480"
  },
  {
    "text": "class so class variables are shared between all the instances of the object",
    "start": "1606480",
    "end": "1613110"
  },
  {
    "text": "no so if you say self if you say self dot X inside of a bound method a regular",
    "start": "1613110",
    "end": "1620500"
  },
  {
    "text": "class method you're changing objects in the object name space and a different for each object if you use a class",
    "start": "1620500",
    "end": "1629110"
  },
  {
    "text": "method and I I could have hard-coded the name of the class inside my class method",
    "start": "1629110",
    "end": "1635500"
  },
  {
    "text": "and said road x instead of accepting it as a parameter but as we'll see in a little while sometimes methods don't",
    "start": "1635500",
    "end": "1641289"
  },
  {
    "text": "know what class it is that they belong to we'll see that okay so back to my",
    "start": "1641289",
    "end": "1647830"
  },
  {
    "text": "example with a property here I've got a and if you look at a i see i have num",
    "start": "1647830",
    "end": "1657610"
  },
  {
    "text": "rows and i also have data and i have underscore num rows and what is num rows",
    "start": "1657610",
    "end": "1667080"
  },
  {
    "text": "it was a function right",
    "start": "1667080",
    "end": "1671250"
  },
  {
    "text": "it's this this piece right here and when",
    "start": "1675020",
    "end": "1680310"
  },
  {
    "text": "i say r dot numrows i would think i would see like a function object as for",
    "start": "1680310",
    "end": "1686700"
  },
  {
    "text": "instance i say r dot in it it's a",
    "start": "1686700",
    "end": "1691890"
  },
  {
    "text": "function it's a it's a bound method but it's ultimately a function but when i",
    "start": "1691890",
    "end": "1697650"
  },
  {
    "text": "say r dot numrows sorry when i say a dot",
    "start": "1697650",
    "end": "1704070"
  },
  {
    "text": "numrows it calls my function even though i didn't use any parentheses and it",
    "start": "1704070",
    "end": "1711120"
  },
  {
    "text": "returns my value so what the property",
    "start": "1711120",
    "end": "1716540"
  },
  {
    "text": "decorator does is let you pretend that your function is an attribute and the",
    "start": "1716540",
    "end": "1723960"
  },
  {
    "text": "default thing the property does is handle the lookup of your attribute and",
    "start": "1723960",
    "end": "1729050"
  },
  {
    "text": "you can do whatever you want with a lookup of your attribute you can keep",
    "start": "1729050",
    "end": "1734130"
  },
  {
    "text": "people from looking at your attribute you can delegate it in some way you can access the hidden variable which is what",
    "start": "1734130",
    "end": "1741360"
  },
  {
    "text": "I'm doing and I'm also just printing you Pete this is differently making normal",
    "start": "1741360",
    "end": "1748530"
  },
  {
    "text": "function because it is not really num rows that's being called it's the",
    "start": "1748530",
    "end": "1753780"
  },
  {
    "text": "decorator property if you remember decorators they wrap the function they do something and then they call the",
    "start": "1753780",
    "end": "1759300"
  },
  {
    "text": "original function that's what's happening and let me switch over to my",
    "start": "1759300",
    "end": "1765090"
  },
  {
    "text": "text editor to do a slightly longer example",
    "start": "1765090",
    "end": "1769880"
  },
  {
    "text": "I don't know",
    "start": "1786220",
    "end": "1790440"
  },
  {
    "text": "so there's no syntactic relationship between num rows and they underscored",
    "start": "1799990",
    "end": "1806270"
  },
  {
    "text": "numbers it doesn't figure out that what you really mean is this private variable it leaves the implementation of the property completely up to you and let me",
    "start": "1806270",
    "end": "1814250"
  },
  {
    "text": "experiment with that double callback thing but let me also show the other",
    "start": "1814250",
    "end": "1823880"
  },
  {
    "text": "part of the property here we have our",
    "start": "1823880",
    "end": "1829900"
  },
  {
    "text": "address book class",
    "start": "1829900",
    "end": "1833440"
  },
  {
    "text": "and then the interesting thing about properties is when you call app property",
    "start": "1891090",
    "end": "1897960"
  },
  {
    "text": "on a function at property does more than one thing it does wrap the function it",
    "start": "1897960",
    "end": "1903900"
  },
  {
    "text": "also creates some new variables that you can access and those variables are named",
    "start": "1903900",
    "end": "1914640"
  },
  {
    "text": "for your function and provide a list of",
    "start": "1914640",
    "end": "1921600"
  },
  {
    "text": "other decorators that you can use",
    "start": "1921600",
    "end": "1925160"
  },
  {
    "text": "to handle setting as well as looking up so let's see if this works",
    "start": "1953330",
    "end": "1961390"
  },
  {
    "text": "that's what I thought the fact that I'm getting it twice is an interface between",
    "start": "2011630",
    "end": "2018020"
  },
  {
    "text": "ipython and my Python between ipython and Python runtime engine I'm not sure",
    "start": "2018020",
    "end": "2026210"
  },
  {
    "text": "why I patha why I python is echoing it again but if i run it just from the",
    "start": "2026210",
    "end": "2031280"
  },
  {
    "text": "command line I'm initializing at the",
    "start": "2031280",
    "end": "2039680"
  },
  {
    "text": "same way I'm accessing my property editor Lee prints at once and I could say so it's an I Python thing and i'm",
    "start": "2039680",
    "end": "2051470"
  },
  {
    "text": "not sure why",
    "start": "2051470",
    "end": "2053830"
  },
  {
    "text": "okay let me come look at that in just a second but let's also note it already is",
    "start": "2063260",
    "end": "2070648"
  },
  {
    "text": "10 I just said a number 0 equals 1 and again if you think about the code that",
    "start": "2070649",
    "end": "2077010"
  },
  {
    "text": "I'm actually writing",
    "start": "2077010",
    "end": "2079579"
  },
  {
    "text": "it seems like I'm assigning to a function variable and it also seems like I have two deaths with the exact same",
    "start": "2087510",
    "end": "2096030"
  },
  {
    "text": "name but what's happening here is at",
    "start": "2096030",
    "end": "2103200"
  },
  {
    "text": "property has completely taken away this deaf numrows function replacing it with",
    "start": "2103200",
    "end": "2110310"
  },
  {
    "text": "its own thing and is intercepting attribute access to num rows at property",
    "start": "2110310",
    "end": "2116760"
  },
  {
    "text": "num rows setter is completely taken away again my attempt to define num rows and",
    "start": "2116760",
    "end": "2123020"
  },
  {
    "text": "is replacing it with access to the property number 0 and responding to the",
    "start": "2123020",
    "end": "2131880"
  },
  {
    "text": "equals operator there's some cool magic going on behind the scenes the first",
    "start": "2131880",
    "end": "2138090"
  },
  {
    "text": "property encapsulation that I said was too powerful is what the properties are using and emulation to respond to",
    "start": "2138090",
    "end": "2145890"
  },
  {
    "text": "operators like the equal sign is what those those decorators are using the",
    "start": "2145890",
    "end": "2153120"
  },
  {
    "text": "property decorators are using and would be complicated to write them but we",
    "start": "2153120",
    "end": "2158160"
  },
  {
    "text": "don't have to write them and it's relatively straightforward to use them my first function is my the name of my",
    "start": "2158160",
    "end": "2165270"
  },
  {
    "text": "attribute and it gives the app property decorator about half the time that's all you need to all you need to do because",
    "start": "2165270",
    "end": "2170940"
  },
  {
    "text": "you just want to do something when somebody looks up a value for instance maybe if you're storing your records in",
    "start": "2170940",
    "end": "2177270"
  },
  {
    "text": "the database you don't keep a number that says how many there are because",
    "start": "2177270",
    "end": "2182640"
  },
  {
    "text": "multiple programs could be using the database and when someone checks num rows you go ask the database how many there are and you return the number but",
    "start": "2182640",
    "end": "2190620"
  },
  {
    "text": "again the in script doesn't know what the actual implementation of num rows is",
    "start": "2190620",
    "end": "2196950"
  },
  {
    "text": "it can just directly use it as far as it's concerned it's just a number on the class even though what it really is is a",
    "start": "2196950",
    "end": "2204120"
  },
  {
    "text": "function that calls the database and ask the database how many rows there are and you can change how it works without",
    "start": "2204120",
    "end": "2210090"
  },
  {
    "text": "changing the interface that you present to your using program sometimes you do",
    "start": "2210090",
    "end": "2216180"
  },
  {
    "text": "want to intercept setting it and setting the number of rows doesn't make any sense",
    "start": "2216180",
    "end": "2221460"
  },
  {
    "text": "carolee so don't get lost on that and just demonstrating that anytime you define the property any time you use the",
    "start": "2221460",
    "end": "2228270"
  },
  {
    "text": "property decorator it dynamically creates for you new decorators that",
    "start": "2228270",
    "end": "2233400"
  },
  {
    "text": "didn't exist until you used it and their name is at your property which in this",
    "start": "2233400",
    "end": "2239580"
  },
  {
    "text": "case is num rows and then dot and I believe they're actually four of them but usually we will just use dot setter",
    "start": "2239580",
    "end": "2245940"
  },
  {
    "text": "because what we want to intercept is attribute setting as well as attribute access and it works as I want it to work",
    "start": "2245940",
    "end": "2254910"
  },
  {
    "text": "I can say a dot num rows and it prints out something's happening again I don't",
    "start": "2254910",
    "end": "2261750"
  },
  {
    "text": "know why it's printing twice but it's a night python thing not a Python thing so I'm not too concerned and it returns the",
    "start": "2261750",
    "end": "2268440"
  },
  {
    "text": "value and I can assign a new value and again some extra code is happening but",
    "start": "2268440",
    "end": "2276690"
  },
  {
    "text": "it is setting the value so I've wrapped some potentially complicated code around",
    "start": "2276690",
    "end": "2283980"
  },
  {
    "text": "what looks like direct attribute access",
    "start": "2283980",
    "end": "2289338"
  },
  {
    "text": "and what's really cool about this as opposed to the Java way of handling getters and setters is with the Java way",
    "start": "2292160",
    "end": "2298589"
  },
  {
    "text": "you need to remember to do this at the very beginning the first thing you need to do is write all your getter and setter rose and lots of Java eclipses",
    "start": "2298589",
    "end": "2304589"
  },
  {
    "text": "lots of Java eclipses lots of Java IDEs like eclipse will automatically let you",
    "start": "2304589",
    "end": "2309750"
  },
  {
    "text": "say here's my class and it's got ten properties go ahead and make the get name setname functions for all of them",
    "start": "2309750",
    "end": "2316320"
  },
  {
    "text": "and then i'll fill them out poof it makes 20 functions for you because you need to do that right away if the users",
    "start": "2316320",
    "end": "2321839"
  },
  {
    "text": "get used to saying dot name you've got no way of intercepting that later on we",
    "start": "2321839",
    "end": "2327300"
  },
  {
    "text": "can directly expose num rows as a property just a simple property initially and if later on we decide hey",
    "start": "2327300",
    "end": "2333960"
  },
  {
    "text": "we need to change it we can use the property decorator to introduce a function into the mix and as far as the",
    "start": "2333960",
    "end": "2340650"
  },
  {
    "text": "user knows they're still directly accessing that attribute we're not forced to start from the very beginning",
    "start": "2340650",
    "end": "2346530"
  },
  {
    "text": "being as complicated as we'll eventually need to be we can change the implementation later on but the",
    "start": "2346530",
    "end": "2352200"
  },
  {
    "text": "interface to the user still just looks like Dex as far as they know they're just looking",
    "start": "2352200",
    "end": "2357990"
  },
  {
    "text": "at an attribute on your object just one to get it the first one basic but",
    "start": "2357990",
    "end": "2364079"
  },
  {
    "text": "usually but if you want if you want to get it and set it to i believe the",
    "start": "2364079",
    "end": "2372270"
  },
  {
    "text": "property decorator automatically creates a couple of other decorators for you and let me look that up in my Python on a",
    "start": "2372270",
    "end": "2379290"
  },
  {
    "text": "nutshell so that I steer you exactly right because I never use the other ones yeah that's why I didn't reviews I it",
    "start": "2379290",
    "end": "2385799"
  },
  {
    "text": "there's also a decorator for deletion and that handles if you say del the",
    "start": "2385799",
    "end": "2393180"
  },
  {
    "text": "built-in function del lets us actually delete variables so we can delete",
    "start": "2393180",
    "end": "2398520"
  },
  {
    "text": "variables from our local namespace we can remove variables from a list we can delete variables out of our dictionary I know I've done that with a couple people",
    "start": "2398520",
    "end": "2405150"
  },
  {
    "text": "how if you actually wanted to get something out of your dictionary you can't just assign it to none or a blank string the key still exists if you want",
    "start": "2405150",
    "end": "2411059"
  },
  {
    "text": "to get rid of it you can say del brackets label and it's gone there's a",
    "start": "2411059",
    "end": "2416970"
  },
  {
    "text": "property that allows your attribute on your object to respond to the adelle",
    "start": "2416970",
    "end": "2422250"
  },
  {
    "text": "function as well I've never done that I don't know why you would delete an attribute on your object since in",
    "start": "2422250",
    "end": "2429960"
  },
  {
    "text": "general you want all of your objects to have a consistent interface but you can do it and there's also one for doc so",
    "start": "2429960",
    "end": "2437490"
  },
  {
    "text": "you can handle retrieving the doc string on your property and I haven't used that",
    "start": "2437490",
    "end": "2443280"
  },
  {
    "text": "one either so yeah most of the time you just need to write two functions one for getting one for setting yuly you're",
    "start": "2443280",
    "end": "2448890"
  },
  {
    "text": "trying things along as you go and are they working they're working fine okay",
    "start": "2448890",
    "end": "2454549"
  },
  {
    "text": "there is one other emulation topic and this one I'm really going to skip so the",
    "start": "2454549",
    "end": "2462210"
  },
  {
    "text": "first one I said was so powerful you rarely need to use it and it is the get a derp underscore method and that method",
    "start": "2462210",
    "end": "2469650"
  },
  {
    "text": "will get called every time you access any property no matter what its name on your object and allow you to do anything",
    "start": "2469650",
    "end": "2475500"
  },
  {
    "text": "you want and we usually like we don't want that most of the time I mean usually we've got functions we want feel",
    "start": "2475500",
    "end": "2481950"
  },
  {
    "text": "just to call them we've got some attributes want people just to be able to access them it's too powerful the",
    "start": "2481950",
    "end": "2487109"
  },
  {
    "text": "middle ground is the property decorator that we're using and so just for the attributes that we're interested in preserving protecting so for instance",
    "start": "2487109",
    "end": "2495240"
  },
  {
    "text": "this way you can make read-only attributes right you could store numrows",
    "start": "2495240",
    "end": "2500970"
  },
  {
    "text": "as an int but you could leave off the function that assigns to it or you could",
    "start": "2500970",
    "end": "2506850"
  },
  {
    "text": "write the function that assigns to it and have it return an exception that says I'm sorry you're not allowed to set num rows that's a read-only property",
    "start": "2506850",
    "end": "2514130"
  },
  {
    "text": "alright so we can modify access to a particular variable by writing our property functions and using the property decorators and then there's a",
    "start": "2514130",
    "end": "2520860"
  },
  {
    "text": "final emulation are there's a final encapsulation method called descriptors",
    "start": "2520860",
    "end": "2527790"
  },
  {
    "text": "and descriptors basically involve making the attributes of our class a special",
    "start": "2527790",
    "end": "2538290"
  },
  {
    "text": "kind of class Python defines for us that once again lets us wrap access to our",
    "start": "2538290",
    "end": "2546330"
  },
  {
    "text": "class and some other functionality and I find descriptors again usually to be",
    "start": "2546330",
    "end": "2551400"
  },
  {
    "text": "overkill they do change how your object is inherited and that's handled",
    "start": "2551400",
    "end": "2557850"
  },
  {
    "text": "differently from properties which is one of the reasons for using them but we don't know what inheritance is yet so I",
    "start": "2557850",
    "end": "2563100"
  },
  {
    "text": "can't even discuss why you might possibly want to use descriptors and it's finally time to discuss inheritance",
    "start": "2563100",
    "end": "2568290"
  },
  {
    "text": "so the second part of",
    "start": "2568290",
    "end": "2572300"
  },
  {
    "text": "think about the classmate project that we've been working on and we have Rosen",
    "start": "2579650",
    "end": "2585170"
  },
  {
    "text": "and address book and every row is first name last name and roll let's say you",
    "start": "2585170",
    "end": "2591410"
  },
  {
    "text": "wanted to use this to organize all of your contacts in your life Facebook",
    "start": "2591410",
    "end": "2597380"
  },
  {
    "text": "friends your Google+ friends your family your cell phone numbers maybe a lot of",
    "start": "2597380",
    "end": "2607160"
  },
  {
    "text": "data and the data wouldn't look the same",
    "start": "2607160",
    "end": "2612280"
  },
  {
    "text": "necessarily like for a lot of people you want to store things like there Twitter",
    "start": "2612280",
    "end": "2618650"
  },
  {
    "text": "account their website their phone number and for cell phone contacts the most",
    "start": "2618650",
    "end": "2624590"
  },
  {
    "text": "important thing is probably their phone number on the first and last name for family maybe you want to print the",
    "start": "2624590",
    "end": "2630530"
  },
  {
    "text": "relationship and their first and last name for celebrities you're keeping in",
    "start": "2630530",
    "end": "2638690"
  },
  {
    "text": "the database maybe you want to print notable information about them some sort of bio so all your rows might look",
    "start": "2638690",
    "end": "2645560"
  },
  {
    "text": "different and kind of with the single row object that we have the way we could",
    "start": "2645560",
    "end": "2651680"
  },
  {
    "text": "handle that use case is to just start putting lots of fields on our row right every row could have a first name last",
    "start": "2651680",
    "end": "2659750"
  },
  {
    "text": "name Twitter website home number cell phone number relationship but when you",
    "start": "2659750",
    "end": "2669650"
  },
  {
    "text": "print them out if we're using the diner score string method to get a string representation they'd all print out",
    "start": "2669650",
    "end": "2676010"
  },
  {
    "text": "exactly the same way and be really nice to print differently depending on what kind of object they are we can start to",
    "start": "2676010",
    "end": "2682280"
  },
  {
    "text": "do that since we're using a method by saying okay what kind of object are you and I'll use a different format string in different fields I could get a little",
    "start": "2682280",
    "end": "2689360"
  },
  {
    "text": "bit complex really basic to and kind of",
    "start": "2689360",
    "end": "2694370"
  },
  {
    "text": "the second major reason to use OOP the first reason is hey we can group some methods and some data together the",
    "start": "2694370",
    "end": "2700250"
  },
  {
    "text": "second reason is we can create hierarchies of related objects that",
    "start": "2700250",
    "end": "2706130"
  },
  {
    "text": "share functionality that's shared but that implement functionality that's different themselves",
    "start": "2706130",
    "end": "2713470"
  },
  {
    "text": "what I do I'm defining a class like we",
    "start": "2727630",
    "end": "2732640"
  },
  {
    "text": "have been and I said every class should take object the parameters that you pass",
    "start": "2732640",
    "end": "2740620"
  },
  {
    "text": "to your class definition are the objects that it inherits from and I'll explain",
    "start": "2740620",
    "end": "2748600"
  },
  {
    "text": "what inheritance is it is a valid Python statement to have a class that doesn't",
    "start": "2748600",
    "end": "2756970"
  },
  {
    "text": "inherit from anything but that's only there for backwards compatibility I",
    "start": "2756970",
    "end": "2763770"
  },
  {
    "text": "believe it's removed in three Python 3 and originally in Python like in many",
    "start": "2763770",
    "end": "2770170"
  },
  {
    "text": "programming languages there was a distinction between base types and complex types base types were not",
    "start": "2770170",
    "end": "2775270"
  },
  {
    "text": "objects and complex types were objects that turns out to make things clunky for",
    "start": "2775270",
    "end": "2780700"
  },
  {
    "text": "the user and Python the language was changed that every single type in Python",
    "start": "2780700",
    "end": "2785830"
  },
  {
    "text": "inherits from a base type of object everything is an object and that unification is really nice this",
    "start": "2785830",
    "end": "2792240"
  },
  {
    "text": "definition of row without a objectin tax",
    "start": "2792240",
    "end": "2797350"
  },
  {
    "text": "error but it gives you an old-style class that's slightly different than all",
    "start": "2797350",
    "end": "2802630"
  },
  {
    "text": "the other classes all the other objects will produce objects are slightly diff and then all the other objects and is",
    "start": "2802630",
    "end": "2807910"
  },
  {
    "text": "always an error so you should always inherit from object or another class and",
    "start": "2807910",
    "end": "2815010"
  },
  {
    "text": "my second class I made a class called student and it inherits from row what",
    "start": "2815010",
    "end": "2823150"
  },
  {
    "text": "does it mean that it inherits from row",
    "start": "2823150",
    "end": "2826740"
  },
  {
    "text": "you",
    "start": "2829750",
    "end": "2831810"
  },
  {
    "text": "okay exactly right ro get the right console here row except some data",
    "start": "2851980",
    "end": "2864240"
  },
  {
    "text": "with an init function and sets a local member data you notice my implementation",
    "start": "2869860",
    "end": "2875350"
  },
  {
    "text": "of student I didn't actually do anything at all besides inherit from row so far I",
    "start": "2875350",
    "end": "2880750"
  },
  {
    "text": "didn't even provide an anit function",
    "start": "2880750",
    "end": "2884640"
  },
  {
    "text": "and yet i'm calling the init function and passing it data and the data exists",
    "start": "2893880",
    "end": "2901100"
  },
  {
    "text": "so how inheritance works is it modifies our look up so on an object if i call a",
    "start": "2901100",
    "end": "2912090"
  },
  {
    "text": "method it looks in its local namespace to see if the method is defined if the",
    "start": "2912090",
    "end": "2919200"
  },
  {
    "text": "method is not defined it looks up the inheritance tree to find the method and",
    "start": "2919200",
    "end": "2926450"
  },
  {
    "text": "if it exists it calls it so for instance",
    "start": "2926450",
    "end": "2932870"
  },
  {
    "text": "when I say stir s what python is doing",
    "start": "2932870",
    "end": "2939780"
  },
  {
    "text": "is saying okay I have an object it's of type student it's had the string",
    "start": "2939780",
    "end": "2946350"
  },
  {
    "text": "operator called on it so i'm going to call its underscore underscore STR function it doesn't have an underscore",
    "start": "2946350",
    "end": "2953670"
  },
  {
    "text": "underscore STR function but it inherits from row I'll look in row and see if it",
    "start": "2953670",
    "end": "2959250"
  },
  {
    "text": "has an underscore underscore STR function row does not have an underscore",
    "start": "2959250",
    "end": "2964290"
  },
  {
    "text": "underscore STR function row inherits from objects so I'll look an object Oh object provides the default",
    "start": "2964290",
    "end": "2969870"
  },
  {
    "text": "implementation of that Dunder score method is just to print out a",
    "start": "2969870",
    "end": "2978780"
  },
  {
    "text": "programmable representation it's actually calling wrapper which tells you that this is a module OOP class student",
    "start": "2978780",
    "end": "2987800"
  },
  {
    "text": "instantiated object and print its ID ok",
    "start": "2987800",
    "end": "2995040"
  },
  {
    "text": "this is method delegation and it's a big part of the point of inheritance we will",
    "start": "2995040",
    "end": "3004460"
  },
  {
    "text": "also share variables but we'll be sharing class variables and I made one",
    "start": "3004460",
    "end": "3012830"
  },
  {
    "text": "comment earlier the reason we have class methods and the class accepts the class that it's attached to the class method",
    "start": "3012830",
    "end": "3018560"
  },
  {
    "text": "accepts the class that it's attached to as the first parameter is because it's possible that you have a function that doesn't know what class it's being",
    "start": "3018560",
    "end": "3025400"
  },
  {
    "text": "called on and that's because when we call a method",
    "start": "3025400",
    "end": "3034100"
  },
  {
    "text": "on an object we might not get a method that was defined on that object we might get a method that was defined on an",
    "start": "3034100",
    "end": "3039740"
  },
  {
    "text": "object someplace up the inheritance tree so let's do a couple things with",
    "start": "3039740",
    "end": "3046040"
  },
  {
    "text": "inheritance here if the point of this is",
    "start": "3046040",
    "end": "3054920"
  },
  {
    "text": "to make rows that are different types and accept different fields we could",
    "start": "3054920",
    "end": "3061090"
  },
  {
    "text": "define in its for each type and accept",
    "start": "3061090",
    "end": "3068060"
  },
  {
    "text": "only the specific fields we want but that would mean initializing like like",
    "start": "3068060",
    "end": "3074450"
  },
  {
    "text": "this",
    "start": "3074450",
    "end": "3076660"
  },
  {
    "text": "but that would mean that people would need to know how to construct the different instances of our objects they",
    "start": "3094920",
    "end": "3103470"
  },
  {
    "text": "know about our implementation so let's not supply any in its",
    "start": "3103470",
    "end": "3110869"
  },
  {
    "text": "so I'm barely implementing things here but I've made a default class called row",
    "start": "3189859",
    "end": "3196969"
  },
  {
    "text": "it's an it just accepts and the tuple or the list that we've been reading and",
    "start": "3196969",
    "end": "3203640"
  },
  {
    "text": "writing from now it seems like a convenient data interchange format because we're going to get a tuple or list from our CSV file or from a",
    "start": "3203640",
    "end": "3211170"
  },
  {
    "text": "database I'm just going to store that data we could use properties to give us",
    "start": "3211170",
    "end": "3216809"
  },
  {
    "text": "convenient access to the data when we started to rewrite our address book program our classmates program with",
    "start": "3216809",
    "end": "3221969"
  },
  {
    "text": "objects we noticed it's a lot more convenient to say if you know Rho dot role equals role than to say if row",
    "start": "3221969",
    "end": "3228569"
  },
  {
    "text": "brackets 2 equals role so we like having names let's preserve the names that doesn't mean that we actually have to",
    "start": "3228569",
    "end": "3234900"
  },
  {
    "text": "load the data into the proper field we can just use property to expose the appropriate index student is going to",
    "start": "3234900",
    "end": "3244259"
  },
  {
    "text": "work the same way presumably we'd right properties to set the first name as well a property for a last name in a role",
    "start": "3244259",
    "end": "3249650"
  },
  {
    "text": "celebrity has got a property Twitter",
    "start": "3249650",
    "end": "3254660"
  },
  {
    "text": "it's going to return the fourth column of our data and we're not defining that for student or four row",
    "start": "3254660",
    "end": "3263839"
  },
  {
    "text": "yes",
    "start": "3269280",
    "end": "3272280"
  },
  {
    "text": "you're going to break up the deal",
    "start": "3284630",
    "end": "3288588"
  },
  {
    "text": "so what I would do well yeah I can do",
    "start": "3292500",
    "end": "3298540"
  },
  {
    "text": "this I'm not super concerned about the whole module level versus top level naming structure because what I would",
    "start": "3298540",
    "end": "3305380"
  },
  {
    "text": "probably define is the dictionary that map's a roll named to the appropriate",
    "start": "3305380",
    "end": "3311140"
  },
  {
    "text": "row object and any role names that aren't found should just be default rose",
    "start": "3311140",
    "end": "3316330"
  },
  {
    "text": "and then when I get a new line as I read my data I can look at the role and say",
    "start": "3316330",
    "end": "3321340"
  },
  {
    "text": "is this a role I have a special class for if it is let's make any one of those if it's not let's just make a default",
    "start": "3321340",
    "end": "3326860"
  },
  {
    "text": "row so I can store functions and data structures I can also store classes and",
    "start": "3326860",
    "end": "3333370"
  },
  {
    "text": "data structures and just like we made menus that had a key base look up and",
    "start": "3333370",
    "end": "3340210"
  },
  {
    "text": "you call the appropriate function I could make a dict that has a key based look up and instantiate the appropriate",
    "start": "3340210",
    "end": "3346450"
  },
  {
    "text": "object by storing the class as a variable one class has to be defined before it can be inherited from another",
    "start": "3346450",
    "end": "3352930"
  },
  {
    "text": "class load of the classes do matter if we're doing inheritance it is CSS has um",
    "start": "3352930",
    "end": "3361559"
  },
  {
    "text": "CSS has classes they're not boob style classes but they are things that denote",
    "start": "3362160",
    "end": "3367570"
  },
  {
    "text": "categories of objects which will have implementation details in common it also",
    "start": "3367570",
    "end": "3372970"
  },
  {
    "text": "has IDs and that's a little bit more like a specific object so you can write",
    "start": "3372970",
    "end": "3378520"
  },
  {
    "text": "Rho write rules and CSS that are common to all objects of a particular kind and",
    "start": "3378520",
    "end": "3384310"
  },
  {
    "text": "then you can customize the details of the first and the last one and the one with a particular name yeah it's the",
    "start": "3384310",
    "end": "3390010"
  },
  {
    "text": "same sort of technique we're writing code that's going to be similar for all of them on our row",
    "start": "3390010",
    "end": "3398579"
  },
  {
    "text": "encoded it might be specific to the implementation of this particular kind of thing right on its object",
    "start": "3423650",
    "end": "3432790"
  },
  {
    "text": "so remember how much the delegation works if I try to convert a celebrity to",
    "start": "3458130",
    "end": "3464279"
  },
  {
    "text": "a string it's looking for the underscore underscore string method on that object",
    "start": "3464279",
    "end": "3469890"
  },
  {
    "text": "itself if it finds it it calls it yep if",
    "start": "3469890",
    "end": "3476849"
  },
  {
    "text": "it doesn't find it it will go up the inheritance tree and this is this is a good quick point the code that I have up",
    "start": "3476849",
    "end": "3487099"
  },
  {
    "text": "again this isn't syntactically enforced but you'll run into problems when you",
    "start": "3488720",
    "end": "3493769"
  },
  {
    "text": "try the property function but just use",
    "start": "3493769",
    "end": "3502410"
  },
  {
    "text": "the plane property decorator obviously has self the mandatory first argument which is the reference to the object and",
    "start": "3502410",
    "end": "3507869"
  },
  {
    "text": "the method is attached to but the setter",
    "start": "3507869",
    "end": "3513799"
  },
  {
    "text": "will be passed an argument and if you don't supply X here when you try to set",
    "start": "3513799",
    "end": "3520710"
  },
  {
    "text": "it you'll get a error it'll say I tried to call a function and I tried to pass it to arguments and it only accepts one",
    "start": "3520710",
    "end": "3525779"
  },
  {
    "text": "and that'll look kind of weird to you because you think you're just setting an attribute so that error message isn't super helpful but underlying everything",
    "start": "3525779",
    "end": "3532980"
  },
  {
    "text": "it's calling this number whose function and trying to pass it in argument so last last thing here on classes before I",
    "start": "3532980",
    "end": "3543150"
  },
  {
    "text": "turn you loose to work on labs foil is that sadly we can inherit from more than",
    "start": "3543150",
    "end": "3548609"
  },
  {
    "text": "one class at a time the syntax for doing that is just a comma and additional",
    "start": "3548609",
    "end": "3557900"
  },
  {
    "text": "types and you can inherit from as many",
    "start": "3557900",
    "end": "3564210"
  },
  {
    "text": "classes as you want the main complication this provides is that",
    "start": "3564210",
    "end": "3575009"
  },
  {
    "text": "method delegation now gets more complicated when I say call a method on my object and if my object doesn't",
    "start": "3575009",
    "end": "3581640"
  },
  {
    "text": "implement it look up that object on all the classes that I inherit from it has a",
    "start": "3581640",
    "end": "3590759"
  },
  {
    "text": "particular order it goes as you would expect in order of",
    "start": "3590759",
    "end": "3597900"
  },
  {
    "text": "declaration so the method resolution order mro you'll see that abbreviation",
    "start": "3597900",
    "end": "3602999"
  },
  {
    "text": "sometimes is depth first and from left to right if you don't use multiple",
    "start": "3602999",
    "end": "3611369"
  },
  {
    "text": "inheritance or you only use it in one limited use case which I'll explain in a moment you don't need to worry about this if you do try to use multiple",
    "start": "3611369",
    "end": "3618599"
  },
  {
    "text": "inheritance you will inevitably at some point get to your calling a function you",
    "start": "3618599",
    "end": "3623640"
  },
  {
    "text": "know that it exists in some object that you're inheriting from but you're getting some other objects function and",
    "start": "3623640",
    "end": "3631469"
  },
  {
    "text": "you're trying to figure out why",
    "start": "3631469",
    "end": "3634999"
  },
  {
    "text": "ok",
    "start": "3647620",
    "end": "3650310"
  },
  {
    "text": "ok notice I'm also getting a violation when",
    "start": "3671470",
    "end": "3676590"
  },
  {
    "text": "i try to inherit from object and something else that's inheriting from",
    "start": "3676590",
    "end": "3681600"
  },
  {
    "text": "object and it complained about my mr oh",
    "start": "3681600",
    "end": "3690200"
  },
  {
    "text": "that's that method resolution order and",
    "start": "3690200",
    "end": "3699830"
  },
  {
    "text": "basically if you're inheriting from another new class that already inherits",
    "start": "3699830",
    "end": "3705000"
  },
  {
    "text": "from object you don't need to inherit from object yourself the only reason we inherit from object is to make clear",
    "start": "3705000",
    "end": "3710970"
  },
  {
    "text": "that we're a new style class everything is an object but if I'm inheriting from object it's not just redundant but wrong",
    "start": "3710970",
    "end": "3721470"
  },
  {
    "text": "to say my student is an object than it is a row because row is an object as well I can however inherit from two",
    "start": "3721470",
    "end": "3730980"
  },
  {
    "text": "classes this is a stupid example because there's no point to saying a celebrity is a student and as an address book I",
    "start": "3730980",
    "end": "3737670"
  },
  {
    "text": "don't think I did it nevertheless so if",
    "start": "3737670",
    "end": "3756900"
  },
  {
    "text": "I say this that's multiple inheritance from object which is the built the built-in base class and row but row",
    "start": "3756900",
    "end": "3763650"
  },
  {
    "text": "already is an object and the only reason we provide object on our list of",
    "start": "3763650",
    "end": "3768750"
  },
  {
    "text": "inheritance is to specify that we're a new style class so if we inherit from any other class that is a new style",
    "start": "3768750",
    "end": "3774660"
  },
  {
    "text": "class we don't need to inherit from object we do but we also inherit",
    "start": "3774660",
    "end": "3781470"
  },
  {
    "text": "everything that row itself inherited and row inherits a bunch of methods from",
    "start": "3781470",
    "end": "3787620"
  },
  {
    "text": "object so when I say when I say I",
    "start": "3787620",
    "end": "3793500"
  },
  {
    "text": "inherit from object and I inherit from row it's a duplication and it's noting",
    "start": "3793500",
    "end": "3799080"
  },
  {
    "text": "that when I go to look up methods",
    "start": "3799080",
    "end": "3802580"
  },
  {
    "text": "it does and it's basically why object is sort of a special case it's the only one",
    "start": "3816089",
    "end": "3824529"
  },
  {
    "text": "Python will do the this checking for although will complain about the method resolution if you make some other obvious multiple inheritance mistakes",
    "start": "3824529",
    "end": "3831400"
  },
  {
    "text": "because object is the base class for everything so since I said celebrity is",
    "start": "3831400",
    "end": "3840579"
  },
  {
    "text": "a student and an address book",
    "start": "3840579",
    "end": "3844829"
  },
  {
    "text": "if I'm confused about how it's calling methods and saying which method is actually being called here I can look at",
    "start": "3849220",
    "end": "3856810"
  },
  {
    "text": "the dunder mro item on my class and it gives me a list in order of how it would",
    "start": "3856810",
    "end": "3867010"
  },
  {
    "text": "look up methods so if I call any random method it will first look to see if that",
    "start": "3867010",
    "end": "3872560"
  },
  {
    "text": "method belongs to celebrity celebrity",
    "start": "3872560",
    "end": "3877900"
  },
  {
    "text": "inherits from student and a B it goes leftmost and says okay I would look at",
    "start": "3877900",
    "end": "3889210"
  },
  {
    "text": "student next to see if the method is defined student inherits from row it",
    "start": "3889210",
    "end": "3897700"
  },
  {
    "text": "goes left most in this case there's only one but it goes leftmost and depth first and looks down to row if it still didn't",
    "start": "3897700",
    "end": "3908770"
  },
  {
    "text": "find it it would come back and take the",
    "start": "3908770",
    "end": "3914410"
  },
  {
    "text": "next class in line why didn't go to object if its depth first again object",
    "start": "3914410",
    "end": "3920710"
  },
  {
    "text": "is a special case object is the base class it knows when it has reached object that it will stop so it comes",
    "start": "3920710",
    "end": "3928030"
  },
  {
    "text": "back and takes the next class and looks in a bee a bee doesn't inherit from",
    "start": "3928030",
    "end": "3934720"
  },
  {
    "text": "anything else just object and its looked at all of my multiple inherited classes",
    "start": "3934720",
    "end": "3941050"
  },
  {
    "text": "so it will check object and stop so you can look at the MRO to see exactly how",
    "start": "3941050",
    "end": "3948040"
  },
  {
    "text": "it is that python is figuring out which class your method should be called from but if you ever find yourself looking at",
    "start": "3948040",
    "end": "3953710"
  },
  {
    "text": "the mro to figure this out let's clear sign you're doing it wrong people argue",
    "start": "3953710",
    "end": "3960609"
  },
  {
    "text": "as to whether multiple inheritance is a good idea or a bad design decision and",
    "start": "3960609",
    "end": "3967690"
  },
  {
    "text": "some languages outlawed completely so",
    "start": "3967690",
    "end": "3973089"
  },
  {
    "text": "Java for instance is a very object oriented language much more so than Python everything is an object in Python",
    "start": "3973089",
    "end": "3979270"
  },
  {
    "text": "there is no concept of simple types exactly there is no procedural programming in",
    "start": "3979270",
    "end": "3985420"
  },
  {
    "text": "Java but Java has only single inheritance I would encourage you not to",
    "start": "3985420",
    "end": "3990430"
  },
  {
    "text": "use multiple inheritance except in one limited use case which we'd call mix-ins",
    "start": "3990430",
    "end": "3998340"
  },
  {
    "text": "mix-ins are not syntactically defined but the idea is you might have some",
    "start": "3998340",
    "end": "4004320"
  },
  {
    "text": "functions that you want to apply to a",
    "start": "4004320",
    "end": "4011160"
  },
  {
    "text": "bunch of different kinds of classes",
    "start": "4011160",
    "end": "4015289"
  },
  {
    "text": "method resolution order so for instance we've kind of talked a couple times",
    "start": "4020510",
    "end": "4025620"
  },
  {
    "text": "about logging you might want your class every class whether it's um dress book",
    "start": "4025620",
    "end": "4032550"
  },
  {
    "text": "or whether it's a row or a student or a celebrity to have a function called",
    "start": "4032550",
    "end": "4038070"
  },
  {
    "text": "laget and you could get that by having them all inherit from a new class called",
    "start": "4038070",
    "end": "4045080"
  },
  {
    "text": "logging class this does not imply that a",
    "start": "4045080",
    "end": "4052700"
  },
  {
    "text": "celebrity is a log in the same way that it implies that celebrity is a row",
    "start": "4052700",
    "end": "4059180"
  },
  {
    "text": "you're using inheritance typically to group things into hierarchical relationships a celebrity is a row a",
    "start": "4059180",
    "end": "4065190"
  },
  {
    "text": "student it is a row that relationship indicates fundamentally what it's type",
    "start": "4065190",
    "end": "4070470"
  },
  {
    "text": "is if you inherited from a log in class you're not really indicating that it is",
    "start": "4070470",
    "end": "4076320"
  },
  {
    "text": "a log and you might not share any data whatsoever you might only provide a",
    "start": "4076320",
    "end": "4083040"
  },
  {
    "text": "couple of utility functions other languages have special syntax for this kind of inheritance and call it a mixin",
    "start": "4083040",
    "end": "4090570"
  },
  {
    "text": "and sometimes you'll hear Python programmers say well I'm using multiple inheritance but this other classes is",
    "start": "4090570",
    "end": "4095610"
  },
  {
    "text": "basically just a mix in and what they mean to say is that class defines functions that no other class will it's",
    "start": "4095610",
    "end": "4101819"
  },
  {
    "text": "not going to have any mro confusion it's just a way to get a function on to this class that I want to call and that's",
    "start": "4101820",
    "end": "4108720"
  },
  {
    "text": "kind of a safe use of multiple inheritance if you draw diagrams of your",
    "start": "4108720",
    "end": "4113850"
  },
  {
    "text": "class hierarchy and every class is inheriting three different kinds of classes you will get in trouble you will find points",
    "start": "4113850",
    "end": "4119940"
  },
  {
    "text": "where you can't figure out what's going on and multiple inheritance is just basically dangerous so use single",
    "start": "4119940",
    "end": "4124949"
  },
  {
    "text": "inheritance maybe occasionally use multiple inheritance just for a little extra functionality on your classes but",
    "start": "4124949",
    "end": "4130380"
  },
  {
    "text": "primarily things are one kind of thing proceeding up hierarchically not like",
    "start": "4130380",
    "end": "4136230"
  },
  {
    "text": "four kinds of things for your own sanity sake okay so that's all the oop syntax",
    "start": "4136230",
    "end": "4143790"
  },
  {
    "text": "that we need to do I'd like to turn you loose on our lab for a little bit we can",
    "start": "4143790",
    "end": "4148889"
  },
  {
    "text": "complete what we were starting yesterday I was kind of getting around to everybody which is refactoring our address book to use objects yeah so with",
    "start": "4148889",
    "end": "4156540"
  },
  {
    "text": "mix-ins I'm just saying it's not fundamentally expressing a relationship where all access lots of stuff based on",
    "start": "4156540",
    "end": "4163830"
  },
  {
    "text": "the base classes with inheritance you're usually saying like most of my functionality is in the base classes and then I'm customizing or overriding the",
    "start": "4163830",
    "end": "4170400"
  },
  {
    "text": "little bits that are specific to me with a mixin you're actually saying I'm not customizing overriding anything and all",
    "start": "4170400",
    "end": "4177719"
  },
  {
    "text": "the functionalities on the base class and I just want to grab a couple of functions and add them to my class it's",
    "start": "4177719",
    "end": "4184588"
  },
  {
    "text": "more like addition complimentary things yeah cubbies Carla mixing yes yes yes",
    "start": "4184589",
    "end": "4190980"
  },
  {
    "text": "and you could always do that by composition of objects which is you could pass all these different kinds of",
    "start": "4190980",
    "end": "4197550"
  },
  {
    "text": "objects a logging class in there init function and they could all have a single function that called the logging",
    "start": "4197550",
    "end": "4204060"
  },
  {
    "text": "class to do whatever logging it is that you want to do but that's a little bit of extra glue code so if you just wanted",
    "start": "4204060",
    "end": "4210090"
  },
  {
    "text": "to inherit from a mix in class that might be okay an acceptable use of multiple inheritance that won't come",
    "start": "4210090",
    "end": "4216210"
  },
  {
    "text": "back to bite you in the butt too badly probably",
    "start": "4216210",
    "end": "4221090"
  },
  {
    "text": "so I was going to have you I was making the rounds and some of you are well started on using objects in your address",
    "start": "4222280",
    "end": "4228190"
  },
  {
    "text": "book for those of you who are well started I'd like to suggest that you try",
    "start": "4228190",
    "end": "4238900"
  },
  {
    "text": "a little bit of inheritance so I'm going to put two assignments up if you're still working on the first one that's",
    "start": "4238900",
    "end": "4249460"
  },
  {
    "text": "fine if you feel like you've got a handle on lab 15 anyone move on to lab",
    "start": "4249460",
    "end": "4254500"
  },
  {
    "text": "16 that would be great and I'll come around and see where everybody is the point of lab 15 is basically we were",
    "start": "4254500",
    "end": "4259960"
  },
  {
    "text": "refactoring our program to use objects you can decide whether you go address book should be an object or not but",
    "start": "4259960",
    "end": "4265539"
  },
  {
    "text": "definitely your rows should be an object and they should know how to do things",
    "start": "4265539",
    "end": "4270639"
  },
  {
    "text": "like sort themselves and print themselves and I might talk about that a",
    "start": "4270639",
    "end": "4276039"
  },
  {
    "text": "little bit further knowing how to sort themselves as a matter of implementing the underscore underscore cmp for",
    "start": "4276039",
    "end": "4281440"
  },
  {
    "text": "compare method and if you do implement that method and you call sort on a list that contains your objects the CMP",
    "start": "4281440",
    "end": "4290619"
  },
  {
    "text": "method says given to my objects which one should be first or last and you can do things like simply return a",
    "start": "4290619",
    "end": "4296829"
  },
  {
    "text": "comparison of the last name and then you could sort your list of objects by last name just by calling sort on your list",
    "start": "4296829",
    "end": "4303280"
  },
  {
    "text": "that contains them optionally I guess the address book should be an object that knows how to print itself and add new rows and then if you want to get",
    "start": "4303280",
    "end": "4309550"
  },
  {
    "text": "slightly more adventurous with lab 16 let's add some fields let's add some",
    "start": "4309550",
    "end": "4316000"
  },
  {
    "text": "types let's think about storing more than just students and instructors in your address book and you might have",
    "start": "4316000",
    "end": "4322989"
  },
  {
    "text": "different representations and be interested in different fields so play with inheritance a little bit to",
    "start": "4322989",
    "end": "4328030"
  },
  {
    "text": "implement that you",
    "start": "4328030",
    "end": "4334630"
  }
]