[
  {
    "start": "0",
    "end": "123000"
  },
  {
    "text": "my name is thomas groff i'm probably like the best description would be a long-term long-time kernel developer a bit more",
    "start": "4560",
    "end": "12799"
  },
  {
    "text": "reason also co-founded a company called i surveillance and i created psyllium together with a",
    "start": "12799",
    "end": "18720"
  },
  {
    "text": "team this is not going to be a pure talk about sodium",
    "start": "18720",
    "end": "23920"
  },
  {
    "text": "i'm going to talk more broadly about rethinking the linux kernel",
    "start": "23920",
    "end": "29119"
  },
  {
    "text": "and why that is happening before we get to that who remembers this age",
    "start": "29119",
    "end": "37600"
  },
  {
    "text": "nice lots of lots of uh people remember this right this is how the web used to look like",
    "start": "37760",
    "end": "44399"
  },
  {
    "text": "like pre-year 2000 most websites looked similar to this one",
    "start": "44399",
    "end": "51120"
  },
  {
    "text": "how did we get from websites looking like on the left to the age we're used",
    "start": "52000",
    "end": "58320"
  },
  {
    "text": "to today which is what you're seeing on on the right where we spent the majority of our time",
    "start": "58320",
    "end": "64239"
  },
  {
    "text": "in a web browser right we went from simple web simple web pages um",
    "start": "64239",
    "end": "70960"
  },
  {
    "text": "showing nice shifts or gifs however you want to um pronounce it to",
    "start": "70960",
    "end": "76320"
  },
  {
    "text": "massive applications running in web browsers what what enabled this evolution in",
    "start": "76320",
    "end": "82720"
  },
  {
    "text": "roughly 20 years we went from pretty much markup only and",
    "start": "82720",
    "end": "88320"
  },
  {
    "text": "i'm using like the html 2.0 request for comments here to a age where we use primarily",
    "start": "88320",
    "end": "95920"
  },
  {
    "text": "programmable platforms um i'm a current developer so i'm not actually familiar with all of these javascript frameworks",
    "start": "95920",
    "end": "102159"
  },
  {
    "text": "but they're a ton out there and it's basically what allowed this to happen obviously there's a lot more to it but",
    "start": "102159",
    "end": "107439"
  },
  {
    "text": "fundamentally it is to programmability that enable to go from pretty much static websites to",
    "start": "107439",
    "end": "113439"
  },
  {
    "text": "applications running in web browsers why does that matter and why does that",
    "start": "113439",
    "end": "119680"
  },
  {
    "text": "matter for the for the linux kernel we'll get to that before we look at a couple of",
    "start": "119680",
    "end": "124880"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "programmability essentials what does it mean to create a programmable system",
    "start": "124880",
    "end": "130160"
  },
  {
    "text": "like javascript enables a web browser first of all we need some notion of",
    "start": "130160",
    "end": "135920"
  },
  {
    "text": "safety right if you allow untrusted code to run in a web browser",
    "start": "135920",
    "end": "141440"
  },
  {
    "text": "that needs to be isolated needs to be sandboxed in some way needs to be secure",
    "start": "141440",
    "end": "148000"
  },
  {
    "text": "we need continuous delivery right there's no point if we extend our application if we",
    "start": "148959",
    "end": "155040"
  },
  {
    "text": "innovate to then require the user to install a new web browser like nobody would ever use any application any web-based",
    "start": "155040",
    "end": "162160"
  },
  {
    "text": "application if you have to install a new a new web browser there was this age when where you had to upgrade to new",
    "start": "162160",
    "end": "168000"
  },
  {
    "text": "versions of web browsers and it was very very confusing to users we're no longer used to this we're used to pretty much automatically getting",
    "start": "168000",
    "end": "174400"
  },
  {
    "text": "updates for both websites websites and browsers on the fly probably you don't even notice when you",
    "start": "174400",
    "end": "179760"
  },
  {
    "text": "upgrade your chrome at this point and you definitely don't notice on the unless there is some visual appeal or some visual change",
    "start": "179760",
    "end": "185360"
  },
  {
    "text": "that a website has changed its back end for example this is all happening continuously and seamless right if you deploy a new",
    "start": "185360",
    "end": "192959"
  },
  {
    "text": "version of your app you will have potentially millions of users on that website at time time",
    "start": "192959",
    "end": "198159"
  },
  {
    "text": "you want to seamlessly upgrade so any programmable system needs to have some notion of continuous",
    "start": "198159",
    "end": "204480"
  },
  {
    "text": "continuous continuous delivery and seamless upgrades and the last",
    "start": "204480",
    "end": "210159"
  },
  {
    "text": "aspect is performance if we gain programmability and we sacrifice performance the",
    "start": "210159",
    "end": "217040"
  },
  {
    "text": "programmability is probably not worth it a good example of this is the early stages or early early years of java",
    "start": "217040",
    "end": "224000"
  },
  {
    "text": "where there was a huge performance penalty a lot of that went away later on but initially the the the the",
    "start": "224000",
    "end": "230560"
  },
  {
    "text": "cost of running java the difference running a c plus plus application a java application was huge",
    "start": "230560",
    "end": "236720"
  },
  {
    "text": "similar with javascript like before jit compilers running javascript added a considerable",
    "start": "236720",
    "end": "243120"
  },
  {
    "text": "amount of of cpu usage on users laptop or on users and machines so any sort of programmability aspect",
    "start": "243120",
    "end": "250080"
  },
  {
    "text": "also needs the notion of native executions and in a lot of instances this is doing is being done with",
    "start": "250080",
    "end": "255680"
  },
  {
    "text": "just in time compilers or chit compilers where some notion of generic byte code is being translated into what the cpu",
    "start": "255680",
    "end": "262560"
  },
  {
    "text": "that your machine is running actually understands so we're getting to as close and close as possible to native",
    "start": "262560",
    "end": "269040"
  },
  {
    "text": "execution speed",
    "start": "269040",
    "end": "271840"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "so the second aspect before we can connect the two pieces together is to do a super quick",
    "start": "274080",
    "end": "281040"
  },
  {
    "text": "not a detail but a super quick introduction to kernel how does how does how does the linux kernel look like and",
    "start": "281040",
    "end": "286639"
  },
  {
    "text": "roughly there are three pieces that we have a user space that's like kernel people like to put that on top and then below that is the",
    "start": "286639",
    "end": "293840"
  },
  {
    "text": "linux kernel the operating system and then on the very top bottom layer is the hardware",
    "start": "293840",
    "end": "300400"
  },
  {
    "text": "then we have some notion of process a scripting application some some tasks running in user space and on",
    "start": "302160",
    "end": "309360"
  },
  {
    "text": "the bottom layer we have hardware and i've simply massively simplified this storage and storage network obviously",
    "start": "309360",
    "end": "315120"
  },
  {
    "text": "there's many many more pieces of of hardware but i've simplified this as much as possible",
    "start": "315120",
    "end": "322240"
  },
  {
    "text": "then the kernel the first thing the kernel will do is it will abstract this away using so-called drivers so the kernel",
    "start": "322240",
    "end": "328000"
  },
  {
    "text": "obviously needs to understand the hardware and needs to enable it but it doesn't want to expose this complexity",
    "start": "328000",
    "end": "333039"
  },
  {
    "text": "straight to the applications so it will it will introduce the first level of abstraction so the linux kernel will",
    "start": "333039",
    "end": "339120"
  },
  {
    "text": "understand i'm aware of block devices i'm aware of network devices i'm aware of like an input output device",
    "start": "339120",
    "end": "344880"
  },
  {
    "text": "i'm aware of a console and so on it's the first level of abstraction similar we have so-called system calls",
    "start": "344880",
    "end": "352320"
  },
  {
    "text": "which is what an application invokes to to communicate with the linux kernel",
    "start": "352320",
    "end": "358240"
  },
  {
    "text": "there's many many of them i've i've used a couple of examples here one to do file i o a read and write",
    "start": "358240",
    "end": "365680"
  },
  {
    "text": "this is would allow to read files uh write to files and also send message and",
    "start": "365680",
    "end": "371280"
  },
  {
    "text": "receive messages this is what an application would use to to network interaction to actually",
    "start": "371280",
    "end": "376400"
  },
  {
    "text": "send data on a on a bsd socket or into a tcp socket this is what the kernel exposes to the",
    "start": "376400",
    "end": "383039"
  },
  {
    "text": "user space into applications this is where the kernel provides guarantees in terms of backwards compatibility this",
    "start": "383039",
    "end": "389680"
  },
  {
    "text": "is the api that does not change allowing for applications to continue running even if if the kernel actually",
    "start": "389680",
    "end": "396479"
  },
  {
    "text": "evolves and then we have middle layers middleware in the middle this is what a logic is this is kind of the business",
    "start": "396479",
    "end": "402000"
  },
  {
    "text": "logic like the virtual file system process scheduler networking tcp firewalling technology and so on all of",
    "start": "402000",
    "end": "408960"
  },
  {
    "text": "this is in the middle and then the last piece is somebody is actually operating this system",
    "start": "408960",
    "end": "415520"
  },
  {
    "text": "uh in the past this used to be an actual human being these days all of this is pretty much automated and",
    "start": "415520",
    "end": "421360"
  },
  {
    "text": "this is being done through configuration apis and over the years the kernel has taken on many many of many different",
    "start": "421360",
    "end": "428000"
  },
  {
    "text": "apis we have system system fs or sysfs procfs netlink there are many many more",
    "start": "428000",
    "end": "434560"
  },
  {
    "text": "different apis how either a human or a controller or some script or some",
    "start": "434560",
    "end": "440400"
  },
  {
    "text": "some some some component can interact with the linux kernel and config configure uh these systems for example",
    "start": "440400",
    "end": "447520"
  },
  {
    "text": "mount the file system change the firewall rule load a new drive or load the linux kernel module all of these",
    "start": "447520",
    "end": "452560"
  },
  {
    "text": "things are done through these apis so that was like a super quick 101 into linux architecture",
    "start": "452560",
    "end": "460160"
  },
  {
    "text": "raise your hand if you want more details here i see a couple of hats",
    "start": "460160",
    "end": "466639"
  },
  {
    "text": "so we'll go into the kernel development process so like what do you do if you want to change any",
    "start": "466800",
    "end": "472720"
  },
  {
    "start": "467000",
    "end": "467000"
  },
  {
    "text": "aspect of that so like what options do i have if the knowledge kernel as it stands right now does not provide what i need",
    "start": "472720",
    "end": "479919"
  },
  {
    "text": "you pretty much have two options you can either go ahead and do a native implementation or you can",
    "start": "479919",
    "end": "486639"
  },
  {
    "text": "write a kernel module and we'll look at both so native support it means changing",
    "start": "486639",
    "end": "494080"
  },
  {
    "text": "kernel source code it means going upstream to the lens kernel mailing list and convincing the world that this change is really needed",
    "start": "494080",
    "end": "499599"
  },
  {
    "text": "um and whatever complexity you're adding the rest of the role should be paying it means exposing and some sort of",
    "start": "499599",
    "end": "506000"
  },
  {
    "text": "configuration api to actually expose that and to um to actually enable it and then you have to wait five years until all your",
    "start": "506000",
    "end": "512080"
  },
  {
    "text": "users actually upgrade to the latest to the latest limits kernel version so this is nice once you do this one",
    "start": "512080",
    "end": "518240"
  },
  {
    "text": "that is in and once these five years have passed the whole world will basically have this capability",
    "start": "518240",
    "end": "523839"
  },
  {
    "text": "the problem with that we don't really have time for that right nobody wants to wait these five years",
    "start": "523839",
    "end": "529760"
  },
  {
    "text": "the second aspect is a linux kernel module which is a loadable plugin that you can load in",
    "start": "529760",
    "end": "535040"
  },
  {
    "text": "into the linux kernel at runtime it will extend the kernel functionality it's basically like a like a shared",
    "start": "535040",
    "end": "541120"
  },
  {
    "text": "library that you can load um the problem with that is the kernel does not have any stable",
    "start": "541120",
    "end": "546880"
  },
  {
    "text": "apis inside like only the user space facing pieces are actually stable which",
    "start": "546880",
    "end": "553279"
  },
  {
    "text": "means if you write a linux kernel module it will break with probably every single kernel release so you will basically rewrite not",
    "start": "553279",
    "end": "560000"
  },
  {
    "text": "rewrite but adjust the source code of your linux kernel module with every linux release as it goes along and",
    "start": "560000",
    "end": "565600"
  },
  {
    "text": "you probably have to ship a different kernel module for all the different uh",
    "start": "565600",
    "end": "571200"
  },
  {
    "text": "linux kernel versions and the most horrible part is if you have any bug in that windows kernel module it will just bluntly crash your kernel",
    "start": "571200",
    "end": "578320"
  },
  {
    "text": "so probably you want to be very careful before you ship a linux kernel module to any of your",
    "start": "578320",
    "end": "583600"
  },
  {
    "text": "users because you might literally just kill kill the machine so these are not really great options",
    "start": "583600",
    "end": "590640"
  },
  {
    "text": "so we've talked about javascript and how that helped um evolve web browser applications to",
    "start": "590640",
    "end": "597519"
  },
  {
    "text": "become huge and basically take over the world we looked into linus kernel and like the options we have to extend it and that they're not",
    "start": "597519",
    "end": "604240"
  },
  {
    "text": "really good good options how can we combine the two well how about we add something like a",
    "start": "604240",
    "end": "610160"
  },
  {
    "text": "javascript like functionality to the linux kernel that sounds appealing right it should solve all the",
    "start": "610160",
    "end": "615920"
  },
  {
    "text": "problems we have so this is basically evpf it's like almost literally ebpf",
    "start": "615920",
    "end": "622240"
  },
  {
    "text": "and we'll we'll take a deep dive into into what that actually does so first of all if you go back to our",
    "start": "622240",
    "end": "629839"
  },
  {
    "text": "description what a user space application or a process does when it interacts with the operating system",
    "start": "629839",
    "end": "635279"
  },
  {
    "text": "it performs system calls right for example the exec system call is used to launch a",
    "start": "635279",
    "end": "641200"
  },
  {
    "text": "new process so if you type something in your bash in your shell and you you run a new command the bash shell will",
    "start": "641200",
    "end": "647680"
  },
  {
    "text": "run an exact ve system call to launch a new process to launch for example top or ps or",
    "start": "647680",
    "end": "654720"
  },
  {
    "text": "whatever binary you're running and then the scheduler will basically fork the process and and so on right",
    "start": "654720",
    "end": "661839"
  },
  {
    "text": "what ebpf allows us to do is something that's pretty amazing it allows us to take that system call",
    "start": "661839",
    "end": "669040"
  },
  {
    "text": "and run a program that takes over on behalf of the system",
    "start": "669040",
    "end": "674240"
  },
  {
    "text": "call and then returns so we can do something like this we can define a bpf program that will re",
    "start": "674240",
    "end": "681120"
  },
  {
    "text": "that will execute on the return of the system called xx exec ve and it",
    "start": "681120",
    "end": "686720"
  },
  {
    "text": "will execute this code this this example code will basically extract some metadata",
    "start": "686720",
    "end": "692399"
  },
  {
    "text": "from the system call such as the binary name or the com name and send that through a ppf map when we'll get to that",
    "start": "692399",
    "end": "698480"
  },
  {
    "text": "and expose that user space for example for audit or tracing purposes this is how bpf based tracing works",
    "start": "698480",
    "end": "705040"
  },
  {
    "text": "where we can trace all the system calls that are being done and provide context like along with that",
    "start": "705040",
    "end": "711600"
  },
  {
    "text": "this is one example how bpf allows us to run almost arbitrary code at various hook",
    "start": "711600",
    "end": "718639"
  },
  {
    "text": "points this example is using a system call we'll look into all the other",
    "start": "718639",
    "end": "724480"
  },
  {
    "start": "723000",
    "end": "723000"
  },
  {
    "text": "hooks we have as well how does that work exactly like how do we actually execute code in",
    "start": "724480",
    "end": "731040"
  },
  {
    "text": "the linux kernel how do we define that program how do we load it in there's a so-called bpf runtime",
    "start": "731040",
    "end": "737760"
  },
  {
    "text": "and the runtime will also ensure that we guarantee and fulfill all of the programmability",
    "start": "737760",
    "end": "743440"
  },
  {
    "text": "requirements or the programmability essentials that we that we covered earlier so there's some program bpf",
    "start": "743440",
    "end": "750959"
  },
  {
    "text": "bytecode which is basically the compiled version of the code that we've seen in the last slide and you as a user you want to load this",
    "start": "750959",
    "end": "758160"
  },
  {
    "text": "and actually run this as part of a of a system call you will",
    "start": "758160",
    "end": "763279"
  },
  {
    "text": "call the bpf system call and load this program say i want to load this program whenever",
    "start": "763279",
    "end": "768560"
  },
  {
    "text": "this system call is being invoked the kernel will then take this program and will",
    "start": "768560",
    "end": "774399"
  },
  {
    "text": "pass it through the bpf verifier the verifier will ensure that the pre the program is actually safe to run so",
    "start": "774399",
    "end": "781279"
  },
  {
    "text": "this is the first major difference to a linux kernel module if the bpf program is buggy or it has some flaw it cannot crash the",
    "start": "781279",
    "end": "788720"
  },
  {
    "text": "car the verifier will ensure that the program is safe to run if it is not safe to run it will reject",
    "start": "788720",
    "end": "794720"
  },
  {
    "text": "it and you cannot load the program it will for example also ensure that you have privileges required",
    "start": "794720",
    "end": "800000"
  },
  {
    "text": "to actually load the bpf program it will for example assure that you cannot access arbitrary kernel",
    "start": "800000",
    "end": "805680"
  },
  {
    "text": "memory it will assure that you cannot expose arbitrary kernel memory to user space and so on it",
    "start": "805680",
    "end": "811440"
  },
  {
    "text": "guarantees that a vpf program is safe to run and only if that passes",
    "start": "811440",
    "end": "816720"
  },
  {
    "text": "the program can be attached so very very similar to javascript where exactly the same is being done as well there's also",
    "start": "816720",
    "end": "822720"
  },
  {
    "text": "a software a software-based run timer or a software-based sandbox which ensures that a javascript program",
    "start": "822720",
    "end": "829760"
  },
  {
    "text": "running as part of one tab in your chrome browser can not basically access the entire memory of",
    "start": "829760",
    "end": "834800"
  },
  {
    "text": "all of all of your chrome tabs for example the next piece is once this bpf program",
    "start": "834800",
    "end": "840720"
  },
  {
    "text": "is passed it is it is approved and it will go to the chit compiler the just in time compiler",
    "start": "840720",
    "end": "846959"
  },
  {
    "text": "where the generic byte code which is entirely portable so you can you can load this byte code on x86 on arm",
    "start": "846959",
    "end": "853040"
  },
  {
    "text": "whatever whatever whatever cpu you're running the chit compiler will take this and",
    "start": "853040",
    "end": "858079"
  },
  {
    "text": "compile this to the native cpu that your system runs for example x86",
    "start": "858079",
    "end": "863839"
  },
  {
    "text": "which means instead of interpreting bytecoding software we are now executing a program that runs",
    "start": "863839",
    "end": "870800"
  },
  {
    "text": "at the same speed as if we had compiled it natively and loaded that in so now we are almost",
    "start": "870800",
    "end": "876399"
  },
  {
    "text": "to the point where we can where we have a kernel module but it's it's done in a safe way we",
    "start": "876399",
    "end": "881440"
  },
  {
    "text": "cannot crash the kernel right and then after it has passed through the chit compiler",
    "start": "881440",
    "end": "887839"
  },
  {
    "text": "we will we can attach it to the system call and this is where or like various other hook points that we'll get to and this is where the last",
    "start": "887839",
    "end": "894160"
  },
  {
    "text": "piece is coming into continuous delivery we can replace these programs these bpf",
    "start": "894160",
    "end": "899760"
  },
  {
    "text": "programs in live systems in linux kernels without impacting applications right for example if we take a network",
    "start": "899760",
    "end": "907040"
  },
  {
    "text": "related program that processes network packets we can replace that program atomically",
    "start": "907040",
    "end": "912240"
  },
  {
    "text": "which means let's say we're processing hundreds of thousands of packets per second between one and the next packet that",
    "start": "912240",
    "end": "918320"
  },
  {
    "text": "program is atomically replaced the last program so like the last packets are the old version",
    "start": "918320",
    "end": "923760"
  },
  {
    "text": "the next packet will see the new version there is no there's no breakage in any in in any way this is allowing us to",
    "start": "923760",
    "end": "930800"
  },
  {
    "text": "continuously run systems while upgrading our logic without breaking any for example tcp connections or or",
    "start": "930800",
    "end": "938880"
  },
  {
    "text": "actual applications running and so on so we are fulfilling the three programmability uh essentials that we",
    "start": "938880",
    "end": "944560"
  },
  {
    "text": "covered earlier so hooks i've always talked about i've",
    "start": "944560",
    "end": "951279"
  },
  {
    "start": "948000",
    "end": "948000"
  },
  {
    "text": "been talking about system calls but also mention networking there's many many many many different hooks where you can connect",
    "start": "951279",
    "end": "957120"
  },
  {
    "text": "or attach a vpn program to if we start from the top we can attach to arbitrary system calls",
    "start": "957120",
    "end": "963199"
  },
  {
    "text": "so whether it's a tcp file open a send message a sock like creation of a socket executing a",
    "start": "963199",
    "end": "968880"
  },
  {
    "text": "program all the system programs all the system calls we can attach to we can also attach to user space",
    "start": "968880",
    "end": "975920"
  },
  {
    "text": "applications so we can run using so-called u-probes or user space probes we can run a bpf",
    "start": "975920",
    "end": "981680"
  },
  {
    "text": "program for particular functions in your applications this is how you can profile applications",
    "start": "981680",
    "end": "987920"
  },
  {
    "text": "using bpf we can uh we can attach to an arbitrary trace point in",
    "start": "987920",
    "end": "993600"
  },
  {
    "text": "in the linux kernel a trace point is a well-known defined uh function name of the linux kernel that will stay stable over time while",
    "start": "993600",
    "end": "1000480"
  },
  {
    "text": "the kernel functions are changing per release trace points are valid and they will stay stable so this is allowing to",
    "start": "1000480",
    "end": "1006880"
  },
  {
    "text": "instrument the the entire linux kernel we can use f entry f exit like for every kernel",
    "start": "1006880",
    "end": "1012959"
  },
  {
    "text": "function called at enter and at exit time we can attach a bpf program we can attach to various sockets and and",
    "start": "1012959",
    "end": "1020320"
  },
  {
    "text": "actual network events so for example tcp level right we can implement tcp concussion congestion algorithms using vpf bpf",
    "start": "1020320",
    "end": "1028240"
  },
  {
    "text": "we can attach at the network device level so for any virtual or physical device we can attach a bpf program",
    "start": "1028240",
    "end": "1034558"
  },
  {
    "text": "and it gets invoked for every network device never every network packet that is being received or sent",
    "start": "1034559",
    "end": "1039839"
  },
  {
    "text": "we can even go and offload this to hardware so we can attach a ppf program and work together",
    "start": "1039839",
    "end": "1045600"
  },
  {
    "text": "with the nik to actually offload the program so as your physical network card receives a",
    "start": "1045600",
    "end": "1050880"
  },
  {
    "text": "packet then if the neck is programmable it can run the bpf program so we gain programmability and we can",
    "start": "1050880",
    "end": "1057280"
  },
  {
    "text": "attach this logic at a very very wide range of different hook points and we'll get when we get to the",
    "start": "1057280",
    "end": "1063120"
  },
  {
    "text": "use cases you will see how how wide the the actual examples and the how whitey the use cases are that",
    "start": "1063120",
    "end": "1070160"
  },
  {
    "text": "can be solved with ebps so nice so we can run programs um",
    "start": "1070160",
    "end": "1078000"
  },
  {
    "text": "what kind of what can these programs do like one essential piece about any program where the",
    "start": "1078000",
    "end": "1083440"
  },
  {
    "text": "complexity complexity usually comes in is state where can we store state statistic",
    "start": "1083440",
    "end": "1089200"
  },
  {
    "text": "metrics and so on and this is where evpf maps are coming in so a bpf program itself is only the instructions",
    "start": "1089200",
    "end": "1097600"
  },
  {
    "text": "right it will not contain actual data like there is no memory in the sense of",
    "start": "1097600",
    "end": "1103360"
  },
  {
    "text": "um that we can dynamically allocate memory on the fly any sort of state that is stored is",
    "start": "1103360",
    "end": "1109520"
  },
  {
    "text": "stored in bpf maps and it's very important these are separate from the program which",
    "start": "1109520",
    "end": "1115120"
  },
  {
    "text": "means we can keep the map alive for example we can we can create a map which is implemented",
    "start": "1115120",
    "end": "1120559"
  },
  {
    "text": "as a hash table or as a stack we can keep this alive while replacing the program",
    "start": "1120559",
    "end": "1126400"
  },
  {
    "text": "this is again allowing the seamless upgrade right so let's say we have a program that's actually collecting stats for example or metrics we can",
    "start": "1126400",
    "end": "1133200"
  },
  {
    "text": "replace the program logic without losing that state maps can be accessed from the vpf programs itself so",
    "start": "1133200",
    "end": "1139679"
  },
  {
    "text": "they can be used for example to share information or stay between different programs but they can also be accessed",
    "start": "1139679",
    "end": "1145200"
  },
  {
    "text": "from user space so we can have a user space application or some cli or some some tool that allows to",
    "start": "1145200",
    "end": "1152000"
  },
  {
    "text": "retrieve or configure aspects while bpf maps",
    "start": "1152000",
    "end": "1157280"
  },
  {
    "text": "different types exists so like on the left the lower left you see the different map types we have hash tables",
    "start": "1157280",
    "end": "1162480"
  },
  {
    "text": "we have um least recently used hash tables this is allowing us to dynamically size",
    "start": "1162480",
    "end": "1168799"
  },
  {
    "text": "it which means like the older stranger the least recently uh like the oldest entry will always be",
    "start": "1168799",
    "end": "1174320"
  },
  {
    "text": "expired if the the map becomes full or if you run out of resources we can use ring buffers",
    "start": "1174320",
    "end": "1180720"
  },
  {
    "text": "so we can send actual events to user space we can we have a stack trace and we have a longest previous match which is which is a",
    "start": "1180720",
    "end": "1186720"
  },
  {
    "text": "specific networking implementation to do implement routing tables so just a subset of all these",
    "start": "1186720",
    "end": "1193520"
  },
  {
    "text": "map types there are more map types being added um as the use cases are growing for you for",
    "start": "1193520",
    "end": "1199760"
  },
  {
    "text": "ebpf helpers so a linux kernel module can",
    "start": "1199760",
    "end": "1207039"
  },
  {
    "start": "1203000",
    "end": "1203000"
  },
  {
    "text": "pretty much call any kernel function which has upsides and downsides the upside is",
    "start": "1207039",
    "end": "1212400"
  },
  {
    "text": "a linux kernel module can reuse any functionality that is part of the linux kernel the downside is",
    "start": "1212400",
    "end": "1217840"
  },
  {
    "text": "if you abuse this or if you misuse it you will crash your kernel and the second aspect is obviously the internal list of functions",
    "start": "1217840",
    "end": "1224080"
  },
  {
    "text": "is changing all the time it's not stable right so if a function is being removed and your kernel module relies on",
    "start": "1224080",
    "end": "1230320"
  },
  {
    "text": "it the kernel model will no longer compile and if you load it it will not load it will say like i cannot resolve a certain",
    "start": "1230320",
    "end": "1236640"
  },
  {
    "text": "symbol name with bpf programs this is done differently they're so called ebpf",
    "start": "1236640",
    "end": "1241760"
  },
  {
    "text": "helpers which are used to interact with the operating system and they are stable so the subset of",
    "start": "1241760",
    "end": "1247840"
  },
  {
    "text": "helper functions that exist they are stable over time and they're being maintained backwards",
    "start": "1247840",
    "end": "1254000"
  },
  {
    "text": "for example the bpf program does not know how to generate a random number but there's a vpf helper that will allow",
    "start": "1254000",
    "end": "1259919"
  },
  {
    "text": "to retrieve and ask the colonel give me a random number or give me the current time or redirect this network",
    "start": "1259919",
    "end": "1265280"
  },
  {
    "text": "packet to to this device or for example read a certain value from a ppf map",
    "start": "1265280",
    "end": "1271679"
  },
  {
    "text": "and so on any sort of interaction with the operating system is being done via bpf helpers and",
    "start": "1271679",
    "end": "1277280"
  },
  {
    "text": "because these are stable apis bpf programs are portable across kernel versions",
    "start": "1277280",
    "end": "1284640"
  },
  {
    "start": "1287000",
    "end": "1287000"
  },
  {
    "text": "tail calls and function calls so instead of composing one big program we can we can",
    "start": "1287600",
    "end": "1294320"
  },
  {
    "text": "divide our programs into multiple small pieces and do tail calls and function calls function",
    "start": "1294320",
    "end": "1299440"
  },
  {
    "text": "calls are pretty much exactly the same as you would expect from a different programming language tail calls are a little bit",
    "start": "1299440",
    "end": "1305440"
  },
  {
    "text": "different tail calls are more like an exec which means you can replace the context of your programs you can basically chain",
    "start": "1305440",
    "end": "1311919"
  },
  {
    "text": "programs together but once the program is finished it will not return to the old program",
    "start": "1311919",
    "end": "1317039"
  },
  {
    "text": "so it's basically more of a chaining it allows programs which may not even be aware of",
    "start": "1317039",
    "end": "1322240"
  },
  {
    "text": "each other to be chained together so you can add a certain hook run multiple logical pieces after each other",
    "start": "1322240",
    "end": "1328799"
  },
  {
    "text": "tail calls and function calls are used obviously to make bpf programs composable they're",
    "start": "1328799",
    "end": "1334799"
  },
  {
    "text": "also used to reduce uh the size of the program obviously we could tell the the compiler",
    "start": "1334799",
    "end": "1339840"
  },
  {
    "text": "to inline everything like even if we use function calls in our source code we could inline everything",
    "start": "1339840",
    "end": "1345039"
  },
  {
    "text": "generate one large program even as part of source code that would just increase the size so function calls are primarily used to",
    "start": "1345039",
    "end": "1351919"
  },
  {
    "text": "reduce the the size of our bpf programs",
    "start": "1351919",
    "end": "1356720"
  },
  {
    "text": "okay nice so the all of this is great who is actually responsible for this like who who can i who can i bog if",
    "start": "1357760",
    "end": "1364159"
  },
  {
    "text": "if something is not working who's behind this um it's a huge huge community it's pretty",
    "start": "1364159",
    "end": "1369760"
  },
  {
    "text": "it's been pretty invisible actually uh given how many people have been working on this and the main reason is because the most",
    "start": "1369760",
    "end": "1376000"
  },
  {
    "text": "people involved in this don't really have much of an interest in this becoming widely known that like there's no",
    "start": "1376000",
    "end": "1382799"
  },
  {
    "text": "there's no there's no interest in marketing let's let's put it this way right there's definitely an interest in in sharing the uh the overall cost of",
    "start": "1382799",
    "end": "1390640"
  },
  {
    "text": "maintaining this but primarily this has been used by very very large cloud providers for example",
    "start": "1390640",
    "end": "1396799"
  },
  {
    "text": "or other large-scale infrastructure companies which have very specific needs around the like the linux linux operating",
    "start": "1396799",
    "end": "1403200"
  },
  {
    "text": "system and they did not see an ability to to fulfill their needs by implementing kernel source code changes",
    "start": "1403200",
    "end": "1409120"
  },
  {
    "text": "but basically uh switched over to using ebpf to fulfill",
    "start": "1409120",
    "end": "1414240"
  },
  {
    "text": "their needs you so you can see like large companies like google and facebook like maintaining this and driving this",
    "start": "1414240",
    "end": "1420240"
  },
  {
    "text": "forward and then the third uh big player in there there you can see is uh sodium that's that's us",
    "start": "1420240",
    "end": "1426320"
  },
  {
    "text": "um and we'll we'll get to solium uh where we have been obviously been involved very much in uh",
    "start": "1426320",
    "end": "1432559"
  },
  {
    "text": "maintaining ebpf as well structurally there are two maintainers so there is daniel burkman",
    "start": "1432559",
    "end": "1438159"
  },
  {
    "text": "and um alexis daravoyta from facebook daniel is working for us co-maintaining evpf",
    "start": "1438159",
    "end": "1445840"
  },
  {
    "start": "1447000",
    "end": "1447000"
  },
  {
    "text": "evpf project so i've i've touched on a lot a couple of them um this is giving you obviously this is",
    "start": "1447520",
    "end": "1452559"
  },
  {
    "text": "just like a very small subset but this gives you like a glimpse into the the width of of",
    "start": "1452559",
    "end": "1458320"
  },
  {
    "text": "like active users of ebpf so starting from the upper left uh facebook is massive usage of evpf",
    "start": "1458320",
    "end": "1465919"
  },
  {
    "text": "um maybe the most well-known usage is catron which is a high performance",
    "start": "1465919",
    "end": "1472000"
  },
  {
    "text": "load balancer they've done to replace ipvs which is another software-based load balancing solution",
    "start": "1472000",
    "end": "1477360"
  },
  {
    "text": "that facebook has been using before that they've switched over to using ebpf and saw a massive performance increase",
    "start": "1477360",
    "end": "1483279"
  },
  {
    "text": "because of that and they've open sourced this so you can go to the github there and check out the",
    "start": "1483279",
    "end": "1488640"
  },
  {
    "text": "code it's definitely specifically built for",
    "start": "1488640",
    "end": "1493840"
  },
  {
    "text": "the facebook and for the facebook infrastructure but if you're using a linux based software infrastructure system you could",
    "start": "1493840",
    "end": "1500159"
  },
  {
    "text": "you could use this as well then obviously we have sodium but we'll we'll get to that in a bit more details",
    "start": "1500159",
    "end": "1506400"
  },
  {
    "text": "providing networking security and load balancing for kubernetes uh we have bcc and bpf trace",
    "start": "1506400",
    "end": "1513120"
  },
  {
    "text": "many many people working on this but the main person i'm not sure what it's fair to say but the main person",
    "start": "1513120",
    "end": "1518480"
  },
  {
    "text": "behind this is probably brandon greg working at netflix this is applying bpf for profiling and",
    "start": "1518480",
    "end": "1525039"
  },
  {
    "text": "tracing so gaining understanding of what my application is doing what is the system doing",
    "start": "1525039",
    "end": "1530080"
  },
  {
    "text": "figuring out why the application is not behaving in terms of for example how many block ir calls is it making and",
    "start": "1530080",
    "end": "1535760"
  },
  {
    "text": "so on we have the android team and google in general investing heavily into bpf",
    "start": "1535760",
    "end": "1541279"
  },
  {
    "text": "so for example there's a bpf loader in android there is there's a network traffic monitor in",
    "start": "1541279",
    "end": "1546480"
  },
  {
    "text": "android there is uh the krsi the runtime security infrastructure",
    "start": "1546480",
    "end": "1551600"
  },
  {
    "text": "done by google and so on then cloudflare cluster has many many blog posts on how they use",
    "start": "1551600",
    "end": "1557120"
  },
  {
    "text": "ebpf for traffic optimization and qos um if you're if you're if you're interested in that i",
    "start": "1557120",
    "end": "1564159"
  },
  {
    "text": "would i would suggest you to check out this blog post they've also open sourced various",
    "start": "1564159",
    "end": "1569679"
  },
  {
    "text": "toolings around ppf and there is falco from systick a cncf project which is applying dpf for container",
    "start": "1569679",
    "end": "1577440"
  },
  {
    "text": "runtime security so introspecting system calls and then",
    "start": "1577440",
    "end": "1582840"
  },
  {
    "text": "detecting whether certain system calls certain metadata around system calls could actually",
    "start": "1582840",
    "end": "1588320"
  },
  {
    "text": "indicate that some some security related threat is going on so that's a glimpse into some of the use",
    "start": "1588320",
    "end": "1594000"
  },
  {
    "text": "cases we'll dive into some of them so first of all there is like bcc um",
    "start": "1594000",
    "end": "1601600"
  },
  {
    "text": "maybe the most well-known application of bpf at this point so how does bpf work",
    "start": "1601600",
    "end": "1606960"
  },
  {
    "text": "bcc work so bcc stands for bpf compiler collection i think",
    "start": "1606960",
    "end": "1614080"
  },
  {
    "text": "and it's allowing application developers to write a python program which contains both the actual",
    "start": "1614080",
    "end": "1621440"
  },
  {
    "text": "bpf program which will run and generate events and metrics and then also the",
    "start": "1621440",
    "end": "1626799"
  },
  {
    "text": "the logic in python to read the state the metrics from from the bpf maps and display that in",
    "start": "1626799",
    "end": "1633200"
  },
  {
    "text": "some way the lower right gives you and one example for example this is a",
    "start": "1633200",
    "end": "1638960"
  },
  {
    "text": "tcp top pcc program which will attach a bpf program to all send message",
    "start": "1638960",
    "end": "1644799"
  },
  {
    "text": "and receive message system calls and then maintain a list of all tcp",
    "start": "1644799",
    "end": "1649840"
  },
  {
    "text": "connections on i think also udp connections like this case only tcp and then also record how many bytes are",
    "start": "1649840",
    "end": "1655840"
  },
  {
    "text": "being transmitted for example it's using exactly the same kernel subsystems right it's going through the",
    "start": "1655840",
    "end": "1662159"
  },
  {
    "text": "chip compile it's going through the verifier what's specific about bcc is the user space component",
    "start": "1662159",
    "end": "1667919"
  },
  {
    "text": "that is actually controlling this so the ability to write a python based program that",
    "start": "1667919",
    "end": "1672960"
  },
  {
    "text": "will then automatically load the bpf program and so on uh if you go to iovisor bcc uh obviously",
    "start": "1672960",
    "end": "1680159"
  },
  {
    "text": "it's open source there's a huge collection of different programs where you find many pre-cooked small programs that you",
    "start": "1680159",
    "end": "1687279"
  },
  {
    "text": "can use to monitor your systems like from networking storage there's there's stuff like",
    "start": "1687279",
    "end": "1692559"
  },
  {
    "text": "show me all the all the files that are being opened there's there's it's hard to mention because so",
    "start": "1692559",
    "end": "1698399"
  },
  {
    "text": "many different examples like almost any hook that can somehow be used for tracing and profiling will will have an",
    "start": "1698399",
    "end": "1705360"
  },
  {
    "text": "example program in that repo so you don't have to actually write the bpf programs yourself you can pretty much",
    "start": "1705360",
    "end": "1711279"
  },
  {
    "text": "reuse a lot of the precooked examples there so this is in python then there's more",
    "start": "1711279",
    "end": "1717919"
  },
  {
    "text": "recently there has been a project introduced called bpf trace and it's to sum it up it's pretty much d",
    "start": "1717919",
    "end": "1723600"
  },
  {
    "start": "1718000",
    "end": "1718000"
  },
  {
    "text": "trace for linux and the main difference here is instead of writing python programs you can write a programming a new higher",
    "start": "1723600",
    "end": "1731440"
  },
  {
    "text": "level bpf trace syntax same scope same focus so it's still about profiling and tracing",
    "start": "1731440",
    "end": "1737440"
  },
  {
    "text": "but you don't need to write python python programs otherwise it works exactly the same in",
    "start": "1737440",
    "end": "1742799"
  },
  {
    "text": "this case it's an example on how to use vpf trace to record all file opens so as we run",
    "start": "1742799",
    "end": "1750159"
  },
  {
    "text": "vpf trace and we specify uh to attach a program at the kernel probe called do sis open",
    "start": "1750159",
    "end": "1756720"
  },
  {
    "text": "that's an internal kernel function though that's not the system call it's the actual kernel there's a kernel function called do sys open which is the function that's",
    "start": "1756720",
    "end": "1763520"
  },
  {
    "text": "called by the system call then like invoke this program logic like the printf and just uh basically invoke the the com",
    "start": "1763520",
    "end": "1770640"
  },
  {
    "text": "string and the first argument which happens to be the file name that is being opened so this gives you the program",
    "start": "1770640",
    "end": "1776640"
  },
  {
    "text": "programmability it's a single line but it's a lot of logic that goes into that and it will automate everything from",
    "start": "1776640",
    "end": "1782320"
  },
  {
    "text": "creating the bpf maps reading that and so on so this is bpf trace also open source",
    "start": "1782320",
    "end": "1787520"
  },
  {
    "text": "also in the visor org then we're going into psyllium",
    "start": "1787520",
    "end": "1793360"
  },
  {
    "text": "so psyllium is broadly networking load balancing and security for kubernetes and the main aspect the main",
    "start": "1793360",
    "end": "1800320"
  },
  {
    "text": "goal of it is to take all the power of ubpf and then bring that to the to the kubernetes world and not have the user",
    "start": "1800320",
    "end": "1806960"
  },
  {
    "text": "base actually need to understand vpf obviously it's a very very low level technology right and",
    "start": "1806960",
    "end": "1812399"
  },
  {
    "text": "yes it can be used to very very effectively implement for example kubernetes services but",
    "start": "1812399",
    "end": "1817760"
  },
  {
    "text": "users would they just want to load a component that will then translate kubernetes services or the implementation of that",
    "start": "1817760",
    "end": "1823039"
  },
  {
    "text": "and implement it with ebpf they don't want to necessarily care much more about about it selim automates",
    "start": "1823039",
    "end": "1829360"
  },
  {
    "text": "all of that so for example we implement network policies kubernetes services and so on",
    "start": "1829360",
    "end": "1836480"
  },
  {
    "text": "uh sodium uses a wide range of hooks so we are starting obviously at the network hardware level where we can for example",
    "start": "1836480",
    "end": "1841840"
  },
  {
    "text": "do ddos mitigation we do can do load balancing at the network layer then we are the softer network device level",
    "start": "1841840",
    "end": "1847760"
  },
  {
    "text": "we are using sockets where we actually introspect the data that is an application is sending in and out that's how we can for example",
    "start": "1847760",
    "end": "1854000"
  },
  {
    "text": "look into the layer 7 aspect without running a like a full layer 7 proxy and we're also",
    "start": "1854000",
    "end": "1859840"
  },
  {
    "text": "looking at the system call level to for example do load balancing at the with the connect system call and so on i",
    "start": "1859840",
    "end": "1865760"
  },
  {
    "text": "will not go into all of the details um but we're using the full range of hooks that are available",
    "start": "1865760",
    "end": "1872000"
  },
  {
    "text": "and are abstracting this away nicely so you can basically run solium as either a cni plugin or just a",
    "start": "1872000",
    "end": "1877919"
  },
  {
    "text": "daemon set and configure everything through the standard kubernetes objects and resources that",
    "start": "1877919",
    "end": "1883760"
  },
  {
    "text": "you're used to such as services network policies and so on this is the full overview of",
    "start": "1883760",
    "end": "1890559"
  },
  {
    "text": "everything we're doing like container networking so we we um we provide very efficient flexible",
    "start": "1890559",
    "end": "1897679"
  },
  {
    "text": "networking with bpf um we can do for example overlays we can do native routing we can integrate with",
    "start": "1897679",
    "end": "1903360"
  },
  {
    "text": "cloud provider ipams we can use we can do multi-cluster routing obviously we have v4 and v6",
    "start": "1903360",
    "end": "1909279"
  },
  {
    "text": "support we can even do things that the lens kernel itself cannot do such as net four six translation between ipv4",
    "start": "1909279",
    "end": "1916159"
  },
  {
    "text": "and v6 we can do service load balancing we can we can completely replace q proxy so",
    "start": "1916159",
    "end": "1921440"
  },
  {
    "text": "you can get rid of ip tables entirely on your on your kubernetes nodes we can do",
    "start": "1921440",
    "end": "1927760"
  },
  {
    "text": "direct server server return and so on um container security not a huge focus",
    "start": "1927760",
    "end": "1933440"
  },
  {
    "text": "of psyllium we are using an identity based approach so we're not using ip and port based firewalling technology",
    "start": "1933440",
    "end": "1940720"
  },
  {
    "text": "but instead we're allocating security identities to workloads and enforcing based on that also something we can do with bpf which",
    "start": "1940720",
    "end": "1947360"
  },
  {
    "text": "would not be possible with the existing linux kernel frameworks uh we are api aware so we not",
    "start": "1947360",
    "end": "1953039"
  },
  {
    "text": "only understand network packets we also understand layer seven calls such as rest memcached",
    "start": "1953039",
    "end": "1958720"
  },
  {
    "text": "cassandra cuff card your pc and so on we are dns aware so we you can define security policies",
    "start": "1958720",
    "end": "1965519"
  },
  {
    "text": "instead of whitelisting or specifying network firewall rules by stone ip addresses you",
    "start": "1965519",
    "end": "1971039"
  },
  {
    "text": "can for example allow star.mycorp.io and then all uh all",
    "start": "1971039",
    "end": "1976960"
  },
  {
    "text": "ips returned by the dns for that pattern will be will be allowed by our firewall so you don't have to for example",
    "start": "1976960",
    "end": "1983039"
  },
  {
    "text": "hard code ip addresses uh we support uh transparent encryption we have ssl data",
    "start": "1983039",
    "end": "1988559"
  },
  {
    "text": "visibility and so on so a wide range of of use cases that we",
    "start": "1988559",
    "end": "1995200"
  },
  {
    "text": "can implement using bpf and then very recent we also open sourced",
    "start": "1995200",
    "end": "2000480"
  },
  {
    "text": "hubble which is the visibility component of cilia super exciting it's basically building",
    "start": "2000480",
    "end": "2008480"
  },
  {
    "text": "on top of the existing ebpf framework that we have in psyllium then adds a visibility component on top",
    "start": "2008480",
    "end": "2014240"
  },
  {
    "text": "which provides mainly two things or three things a very nice service map what you can see",
    "start": "2014240",
    "end": "2021440"
  },
  {
    "text": "in the upper right where you can where you can dynamically transparently generate uh an overview of which services are",
    "start": "2021440",
    "end": "2027679"
  },
  {
    "text": "talking to what other services okay like a service map over you like or what what so what service are actually",
    "start": "2027679",
    "end": "2032720"
  },
  {
    "text": "talking to each other you can go all the way into layer seven so you can actually see the http calls",
    "start": "2032720",
    "end": "2037840"
  },
  {
    "text": "being made and so on then we have metrics so all of the visibility that ebpf",
    "start": "2037840",
    "end": "2044559"
  },
  {
    "text": "gives us is being translated into metrics that we serve and then we also have flow lock so if",
    "start": "2044559",
    "end": "2050000"
  },
  {
    "text": "you want to record all the network connectivity that went on you can you can expose that uh wire flow locks so this is hubble all",
    "start": "2050000",
    "end": "2057440"
  },
  {
    "text": "bpf powered a lot of this would just simply not be possible without bpf like if you would try to implement this this",
    "start": "2057440",
    "end": "2063520"
  },
  {
    "text": "based on an ip tables packet counter that would be incredibly hard to do for example so this is a good example of like the",
    "start": "2063520",
    "end": "2069440"
  },
  {
    "text": "program programmability aspect giving us this huge leap forward in terms of",
    "start": "2069440",
    "end": "2074720"
  },
  {
    "text": "uh driving driving features what if you wanted to develop uh let's",
    "start": "2074720",
    "end": "2082000"
  },
  {
    "start": "2077000",
    "end": "2077000"
  },
  {
    "text": "say you don't want to use psyllium you don't you want to do your own go programs or your own bpf program how do",
    "start": "2082000",
    "end": "2087839"
  },
  {
    "text": "how do you get how do you do that how do you write a bpf program how do you load it what type of tools are um available we",
    "start": "2087839",
    "end": "2095679"
  },
  {
    "text": "have open source the entire tool chain we have and we use forcillium",
    "start": "2095679",
    "end": "2100880"
  },
  {
    "text": "it's in the library in the repost selling dash slash ebpf",
    "start": "2100880",
    "end": "2106079"
  },
  {
    "text": "and it's obviously still using the exactly the same linux kernel uh components and it is a library that sits",
    "start": "2106079",
    "end": "2113440"
  },
  {
    "text": "on top which is what we call the ebpf go library and it will hide the abstract will abstract away",
    "start": "2113440",
    "end": "2120560"
  },
  {
    "text": "both the system call that will load the programs and create the maps and also the excess of the map so all of that",
    "start": "2120560",
    "end": "2126800"
  },
  {
    "text": "is nicely hidden away and exposed as goal types program and maps",
    "start": "2126800",
    "end": "2134079"
  },
  {
    "text": "so you can basically load a bpf program by using a go library and you can create",
    "start": "2134079",
    "end": "2139200"
  },
  {
    "text": "read write from maps and on two maps using go bindings as well how do you define",
    "start": "2139200",
    "end": "2145599"
  },
  {
    "text": "the actual program there's many ways of doing this the one we use most is to write it in a in a higher level",
    "start": "2145599",
    "end": "2155040"
  },
  {
    "text": "from a bpf perspective higher level language such as c code and then use clang with the bpf backend",
    "start": "2155040",
    "end": "2162000"
  },
  {
    "text": "target to generate bytecode so we you can write the program similar to",
    "start": "2162000",
    "end": "2168400"
  },
  {
    "text": "like one of the examples we have seen earlier run clang and what you will get is generic bpf byte code",
    "start": "2168400",
    "end": "2174480"
  },
  {
    "text": "and you will have your controller program using the golang bin binding which will open that",
    "start": "2174480",
    "end": "2182160"
  },
  {
    "text": "generic bytecode file and will load it into the linux kernel using the system call the verifier will",
    "start": "2182160",
    "end": "2188720"
  },
  {
    "text": "actually verify it the jit compiler will compile this into your native uh native cpu",
    "start": "2188720",
    "end": "2194560"
  },
  {
    "text": "and then attach it to the system call or to the hook that you define so from an end from a user perspective",
    "start": "2194560",
    "end": "2201520"
  },
  {
    "text": "or from a developer perspective you can use clan plus the goal library to to",
    "start": "2201520",
    "end": "2207040"
  },
  {
    "text": "inject arbitrary programs at various hook points on the actual runtime so what will run",
    "start": "2207040",
    "end": "2213440"
  },
  {
    "text": "on the system is only the the go library and your controller obviously you don't need to",
    "start": "2213440",
    "end": "2218560"
  },
  {
    "text": "run clang on the system where you actually load the the program and where you attach it so you can for",
    "start": "2218560",
    "end": "2224720"
  },
  {
    "text": "example run clang on your laptop generate the bytecode ship the bytecode and use the go library",
    "start": "2224720",
    "end": "2231520"
  },
  {
    "text": "to load it",
    "start": "2231520",
    "end": "2234000"
  },
  {
    "text": "all right outlook into the future so ebpf sounds amazing um is this",
    "start": "2236640",
    "end": "2243760"
  },
  {
    "text": "all you can do like initially the title was rethinking rethinking the linux kernel so",
    "start": "2243760",
    "end": "2248960"
  },
  {
    "text": "what exactly is the rethinking part and there's two aspects here which are very interesting",
    "start": "2248960",
    "end": "2254160"
  },
  {
    "text": "all of this all of what i've just talked about sounds kind of normal and natural right it's like oh yeah this makes sense like why haven't we done this earlier",
    "start": "2254160",
    "end": "2260880"
  },
  {
    "text": "all makes sense but what's kind of happening with this is that we basically by accident kind of went",
    "start": "2260880",
    "end": "2268480"
  },
  {
    "text": "the microkernel route so for those of you who are not super deep into operating systems a long long time back when linux was",
    "start": "2268480",
    "end": "2275680"
  },
  {
    "text": "first created there was a huge debate about how should operating systems be designed and it was",
    "start": "2275680",
    "end": "2281599"
  },
  {
    "text": "yeah either you go microkernel kind of like similar to how microservices are being written today or you create a huge",
    "start": "2281599",
    "end": "2287520"
  },
  {
    "text": "monolith and linux was the best example that monolith was the better approach right single code base huge code base",
    "start": "2287520",
    "end": "2295520"
  },
  {
    "text": "single binary that you run linux kernel modules came way way later like much after this debate the loans kernel",
    "start": "2295520",
    "end": "2302800"
  },
  {
    "text": "was not really extendable in in the very beginning huge copays compile five megabyte binary",
    "start": "2302800",
    "end": "2309280"
  },
  {
    "text": "that you load when you're when your machine comes up and with bpf we're kind of quietly without even noticing maybe went",
    "start": "2309280",
    "end": "2317040"
  },
  {
    "text": "down back to the to the old discussion and i've started to implement a micro kernel model where we can now dynamically load",
    "start": "2317040",
    "end": "2323920"
  },
  {
    "text": "programs we can dynamically replace logic in a safe way we can we can make",
    "start": "2323920",
    "end": "2329680"
  },
  {
    "text": "logic composable so we're going away from the requirement that every single linux kernel change",
    "start": "2329680",
    "end": "2335040"
  },
  {
    "text": "requires full consensus across the entire industry or across the entire um development community and instead you",
    "start": "2335040",
    "end": "2341440"
  },
  {
    "text": "can define your own logic you can define your own modules and load them safely and with the",
    "start": "2341440",
    "end": "2347200"
  },
  {
    "text": "necessary efficiency a very good example of this i think is solium itself",
    "start": "2347200",
    "end": "2352400"
  },
  {
    "text": "the linux kernel itself has no clue what a container is this may be very surprising but there's",
    "start": "2352400",
    "end": "2357839"
  },
  {
    "text": "no no there's no such thing as a container id in the linux kernel the linux kernel does not literally not know what a",
    "start": "2357839",
    "end": "2364079"
  },
  {
    "text": "container is the linux kernel knows about name spaces right that the the lynch troll knows how to do resource",
    "start": "2364079",
    "end": "2370000"
  },
  {
    "text": "management it knows oh i have a c group and the c group has certain cpu constraints",
    "start": "2370000",
    "end": "2375520"
  },
  {
    "text": "and these are the processes that are attached to this c group and it so happens that the container",
    "start": "2375520",
    "end": "2381200"
  },
  {
    "text": "uses c group or the container container runtime uses c group for resource management",
    "start": "2381200",
    "end": "2386240"
  },
  {
    "text": "the linux kernel has a concept of network namespace oh i can have multiple virtual virtual network scopes",
    "start": "2386240",
    "end": "2393440"
  },
  {
    "text": "and each of these scopes can have its own ip address and so on the kernel does not know that",
    "start": "2393440",
    "end": "2399920"
  },
  {
    "text": "container is using a particular network name space in fact if you are using kubernetes a kubernetes",
    "start": "2399920",
    "end": "2406640"
  },
  {
    "text": "pod will have two containers and both of them will share the same network namespace so there's not even",
    "start": "2406640",
    "end": "2411680"
  },
  {
    "text": "like a tight coupling between network namespace or namespace and particular container the kernel does not",
    "start": "2411680",
    "end": "2417200"
  },
  {
    "text": "know about anything at all about containers it only provides the tooling and this has been a big problem",
    "start": "2417200",
    "end": "2422640"
  },
  {
    "text": "right because the kernel stopped being able to deliver functionality that is essential right um because it",
    "start": "2422640",
    "end": "2429680"
  },
  {
    "text": "was not aware of containers psyllium is adding this ability to the kernel making the aware of containers and for example",
    "start": "2429680",
    "end": "2436400"
  },
  {
    "text": "kubernetes services without requiring to change the kernel source code right because the changes that psyllium",
    "start": "2436400",
    "end": "2442880"
  },
  {
    "text": "needs may not be acceptable to the 80 of non-kubernetes use cases for example",
    "start": "2442880",
    "end": "2448240"
  },
  {
    "text": "right so that the kernel community would not be willing for everybody to pay the cost of the complexity that psyllium is",
    "start": "2448240",
    "end": "2455040"
  },
  {
    "text": "adding for the kubernetes specific use case so this is a this is definitely a huge",
    "start": "2455040",
    "end": "2460480"
  },
  {
    "text": "shift and there was no there was no debate about this it just naturally happened and everybody's fine with this or the",
    "start": "2460480",
    "end": "2467280"
  },
  {
    "text": "majority is fine with it and then the second aspect this is this is this is a like a a really big outlook",
    "start": "2467280",
    "end": "2473200"
  },
  {
    "text": "in into the future so who's running more than let's say 5000 either servers vms or some",
    "start": "2473200",
    "end": "2480880"
  },
  {
    "text": "something like that all right how long does it take you to reboot all of them",
    "start": "2480880",
    "end": "2487920"
  },
  {
    "text": "you don't know maybe you have never had the need for it like but if you let's say you run 5000 right",
    "start": "2489119",
    "end": "2495920"
  },
  {
    "text": "and there's some kernel security bug and you need to reboot all of them",
    "start": "2495920",
    "end": "2501040"
  },
  {
    "text": "how do you do that without sacrificing or without introducing massive downtime like you need some sort of schedule",
    "start": "2501040",
    "end": "2506560"
  },
  {
    "text": "right you can say oh i can reboot like two percent of them at the time and then that might take you let's say i",
    "start": "2506560",
    "end": "2512480"
  },
  {
    "text": "can reboot i don't know ten per five minutes or something it will take you quite a long time to actually",
    "start": "2512480",
    "end": "2517520"
  },
  {
    "text": "reboot them imagine there's a scale of like facebook and google and others like hundreds of thousands of servers",
    "start": "2517520",
    "end": "2523599"
  },
  {
    "text": "it may take weeks to reboot all of that so some of the systems will be vulnerable",
    "start": "2523599",
    "end": "2529119"
  },
  {
    "text": "to the kernel block for weeks and that's not really acceptable like if you have a zero day uh block coming up you want to to",
    "start": "2529119",
    "end": "2535839"
  },
  {
    "text": "protect yourself as quickly as possible if you're lucky you can somehow catch like what's what's actually the like you",
    "start": "2535839",
    "end": "2542160"
  },
  {
    "text": "can have some firewall rule that may be able to catch then you're lucky but if it needs a hot patch you will be out of luck and your systems",
    "start": "2542160",
    "end": "2548160"
  },
  {
    "text": "you have the choice either downtime or like having a massive buffer of",
    "start": "2548160",
    "end": "2553359"
  },
  {
    "text": "machines that are unused or you just have systems that are are",
    "start": "2553359",
    "end": "2559040"
  },
  {
    "text": "unprotected so the solution to this might be ebpf i've used a heartbleed example here but",
    "start": "2559040",
    "end": "2564960"
  },
  {
    "text": "we could use any any type of security bug of the of like similar scope obviously in this scenario it's like",
    "start": "2564960",
    "end": "2570560"
  },
  {
    "text": "some kernel function or something is vulnerable inside of the luna's kernel and a hotfix would typically patch that function and",
    "start": "2570560",
    "end": "2576640"
  },
  {
    "text": "change the logic of that so what if we instead of changing the lens kernel and rebooting what if we could actually do the hot patching",
    "start": "2576640",
    "end": "2583359"
  },
  {
    "text": "on the fly and this is not completely new not at all like hot patching has been available for a while but it has never really been",
    "start": "2583359",
    "end": "2589200"
  },
  {
    "text": "solved well enough that it has been that has spread widely it's been um insecure difficult to use and so on",
    "start": "2589200",
    "end": "2595520"
  },
  {
    "text": "ebpf could be the solution to this where instead of patching the kernel we basically bring a",
    "start": "2595520",
    "end": "2601280"
  },
  {
    "text": "bpf program in which runs on behalf of the insecure function and implements the same logic but without",
    "start": "2601280",
    "end": "2607599"
  },
  {
    "text": "the actual bug right zero zero day zero day fixes are only one example there's only many many other box that",
    "start": "2607599",
    "end": "2614319"
  },
  {
    "text": "could uh benefit from a from a from a similar treatment",
    "start": "2614319",
    "end": "2619520"
  },
  {
    "text": "so this is definitely something that has sparked a lot of interest and there's lots of discussion on how this can can be can",
    "start": "2619520",
    "end": "2626000"
  },
  {
    "text": "how bpf can be used to solve this all right with that i want to",
    "start": "2626000",
    "end": "2634000"
  },
  {
    "text": "say a huge thank you to everybody on the left i'm not going to read all of the names but i wanted to give a big shout out to like",
    "start": "2634000",
    "end": "2640800"
  },
  {
    "text": "all like the huge community that has been involved in getting bpf as far as it is today um starting with",
    "start": "2640800",
    "end": "2647599"
  },
  {
    "text": "like the actual ebpf maintainers working day and night almost uh like the psyllium team facebook team google team",
    "start": "2647599",
    "end": "2652960"
  },
  {
    "text": "and so on like long long lists uh it's a absolutely wonderful technical",
    "start": "2652960",
    "end": "2658319"
  },
  {
    "text": "community um this has been evolving incredibly fast and quick and it's a joy to work",
    "start": "2658319",
    "end": "2665040"
  },
  {
    "text": "with all of them if you want to learn more about bpf and xdp which is the network device bpf program",
    "start": "2665040",
    "end": "2673440"
  },
  {
    "text": "there's a getting started guide which which first of all gives you like of the full language spec",
    "start": "2673440",
    "end": "2678560"
  },
  {
    "text": "and also uh introduces you how to write bpf programs there is obviously stylium that you can",
    "start": "2678560",
    "end": "2684160"
  },
  {
    "text": "look at which is um kubernetes specific and then the previous slides with pcc and ppf trace",
    "start": "2684160",
    "end": "2691280"
  },
  {
    "text": "the links are on the slides itself if you want to learn more about psyllium and follow us you can follow us on twitter",
    "start": "2691280",
    "end": "2696480"
  },
  {
    "text": "and if you want reached out to me you can follow me on twitter as well with that i think we have a couple of",
    "start": "2696480",
    "end": "2702160"
  },
  {
    "text": "more minutes for questions excellent",
    "start": "2702160",
    "end": "2706799"
  },
  {
    "text": "all right questions",
    "start": "2710640",
    "end": "2713599"
  },
  {
    "text": "everyone's stunned to silence",
    "start": "2716960",
    "end": "2720240"
  },
  {
    "text": "yes thank you for the amazing talk um i have a question about the verification program process of these",
    "start": "2722880",
    "end": "2732000"
  },
  {
    "text": "so what happens if like there's one program that is in itself",
    "start": "2732560",
    "end": "2739280"
  },
  {
    "text": "safe the second one is safe but in combination they are unsafe can that happen and what will",
    "start": "2739280",
    "end": "2746000"
  },
  {
    "text": "happen then uh it should not be able to happen and the reason for this is it's not possible to orbit to do",
    "start": "2746000",
    "end": "2751839"
  },
  {
    "text": "arbitrary function calls between programs like if if we do a so-called",
    "start": "2751839",
    "end": "2757440"
  },
  {
    "text": "tail call between programs then the amount of context that you can put into a program is very",
    "start": "2757440",
    "end": "2763680"
  },
  {
    "text": "limited by that i mean so you can't just take the memory from the old program and give that to the new",
    "start": "2763680",
    "end": "2768960"
  },
  {
    "text": "program for example you can you can you can pass on a very limited amount of well-defined types",
    "start": "2768960",
    "end": "2774880"
  },
  {
    "text": "like numbers strings and so on right but you can't so the it's it's incredibly it's well-known and",
    "start": "2774880",
    "end": "2781119"
  },
  {
    "text": "the verifier can can validate that all possible combinations of the input to the new program are safe to run",
    "start": "2781119",
    "end": "2787760"
  },
  {
    "text": "so no matter what what what state the the old program leaves behind before we do the tail call",
    "start": "2787760",
    "end": "2794400"
  },
  {
    "text": "it the verifier guarantees that it is safe to run so the verifier will test all possible combinations that can",
    "start": "2794400",
    "end": "2800960"
  },
  {
    "text": "happen so that's did that answer the question for you",
    "start": "2800960",
    "end": "2806079"
  },
  {
    "text": "so thanks for the hey here i am thanks for the amazing call uh talk and i would like to ask actually uh",
    "start": "2806079",
    "end": "2812000"
  },
  {
    "text": "with the observability features that are built into celium where do you see the line between a",
    "start": "2812000",
    "end": "2818240"
  },
  {
    "text": "service mesh like istio which you said that it's compatible or integratable in this tool stack",
    "start": "2818240",
    "end": "2824000"
  },
  {
    "start": "2823000",
    "end": "2823000"
  },
  {
    "text": "and celium this is question number one and question number two i would like to know whether you said that it can run as a cni",
    "start": "2824000",
    "end": "2832079"
  },
  {
    "text": "plug-in so for example if somebody uses kubernetes on a eks",
    "start": "2832079",
    "end": "2837440"
  },
  {
    "text": "and it obviously comes with a aws cni plug-in bundled in does that work in any sense",
    "start": "2837440",
    "end": "2844480"
  },
  {
    "text": "like can you still use celia more does it exclude that thank you yes so first first question",
    "start": "2844480",
    "end": "2850000"
  },
  {
    "text": "um obviously there is some overlap in terms of both both projects will provide what's",
    "start": "2850000",
    "end": "2856000"
  },
  {
    "text": "typically referred to as tracing the biggest difference is that psyllium is 100 transparent it does not even uh inject a so-called",
    "start": "2856000",
    "end": "2863839"
  },
  {
    "text": "sidecar proxy so there's nothing that the application will not even understand or notice that anybody is observing",
    "start": "2863839",
    "end": "2869359"
  },
  {
    "text": "anything all the observation is done using kernel level bpf programs and then we uh we can also",
    "start": "2869359",
    "end": "2875680"
  },
  {
    "text": "transparently inject envoy as a proxy on demand but not in this not in a sidecar model",
    "start": "2875680",
    "end": "2881520"
  },
  {
    "text": "where the actual proxy that was providing the visibility runs inside of the application container it's running outside",
    "start": "2881520",
    "end": "2888160"
  },
  {
    "text": "hidden away from the application so the biggest difference is the transparency aspect and the second aspect is that because of",
    "start": "2888160",
    "end": "2894240"
  },
  {
    "text": "dpf we can provide this visibility at much better efficiency so you will have less overhead as you",
    "start": "2894240",
    "end": "2900400"
  },
  {
    "text": "add this um observability other aspects for example the dns awareness is something that is your non-war",
    "start": "2900400",
    "end": "2906400"
  },
  {
    "text": "do not provide yet they may in the future in general it's not an eater or decision at all like we have many users",
    "start": "2906400",
    "end": "2912000"
  },
  {
    "text": "that will run psyllium and for example istio or linker d or some other service mesh perfectly",
    "start": "2912000",
    "end": "2917760"
  },
  {
    "text": "fine what we see very commonly is that this visibility is used by the platform team the security team as",
    "start": "2917760",
    "end": "2923599"
  },
  {
    "text": "the ground layer for everything and then different application teams sometimes even different teams running in the same clusters will",
    "start": "2923599",
    "end": "2930559"
  },
  {
    "text": "pick different service meshes based on their needs and the service mesh obviously provides several aspects that stealing does not",
    "start": "2930559",
    "end": "2936319"
  },
  {
    "text": "provide at all selen does not do any layer 7 load balancing it does not do any circuit breaking it does not do any",
    "start": "2936319",
    "end": "2942000"
  },
  {
    "text": "retries none of that like we are focusing on visibility and also the last aspect in",
    "start": "2942000",
    "end": "2947359"
  },
  {
    "text": "that is we are also providing a lot of operational metrics so for example we allow to do um to",
    "start": "2947359",
    "end": "2953920"
  },
  {
    "text": "detect situations where dns resolution failures which is very common cause for outages that you can notice and observe",
    "start": "2953920",
    "end": "2960160"
  },
  {
    "text": "them earlier which is something that the service mesh is less focusing on your second question",
    "start": "2960160",
    "end": "2965760"
  },
  {
    "text": "was on eks yes so serium has two modes you can run it in native aws modes where we",
    "start": "2965760",
    "end": "2972000"
  },
  {
    "text": "basically provide exactly the same model as the standard eks cni provides so it's fully compatible it also uses",
    "start": "2972000",
    "end": "2978160"
  },
  {
    "text": "what's called aws eni it's what our probably our largest users uh use",
    "start": "2978160",
    "end": "2985200"
  },
  {
    "text": "scales to like massive numbers and then the second deployment model is you can run selem in",
    "start": "2985200",
    "end": "2990400"
  },
  {
    "text": "chaining mode where you can run it on top of for example the aws cni plugin or on top of the the",
    "start": "2990400",
    "end": "2995839"
  },
  {
    "text": "gcp network cni and so on so both are viable options typically we",
    "start": "2995839",
    "end": "3000960"
  },
  {
    "text": "we recommend to use the non the native mode for any large deployment",
    "start": "3000960",
    "end": "3007119"
  },
  {
    "text": "thanks as well from my site for the talk uh one question which actually like",
    "start": "3007680",
    "end": "3014240"
  },
  {
    "text": "ties into your question is uh are you open tracing api compliant or like because they kind",
    "start": "3014240",
    "end": "3020880"
  },
  {
    "text": "of try to merge all the other tracing um efforts and is it already compatible or is it",
    "start": "3020880",
    "end": "3028000"
  },
  {
    "text": "planned it's planned so we don't uh output the open tracing spec",
    "start": "3028000",
    "end": "3033119"
  },
  {
    "text": "yet um the main reason for this that these systems have been built with a slightly different design in mind",
    "start": "3033119",
    "end": "3039680"
  },
  {
    "text": "most of these tracing libraries they're basically built you're running on behalf of the app and you're",
    "start": "3039680",
    "end": "3045040"
  },
  {
    "text": "reporting on behalf of the app and we're more kind of a transparent middle system so we're basically",
    "start": "3045040",
    "end": "3050720"
  },
  {
    "text": "reporting both sides at the same time this is making it a bit challenging to do this but we are working on this to",
    "start": "3050720",
    "end": "3056559"
  },
  {
    "text": "implement the open tracing api yes i um you mentioned using clang to",
    "start": "3056559",
    "end": "3063440"
  },
  {
    "text": "compile the spf programs does that mean that any language that has an lvm front end can be used or is",
    "start": "3063440",
    "end": "3069040"
  },
  {
    "text": "it only c uh i think you can use other languages so as long as clang supports high level",
    "start": "3069040",
    "end": "3074559"
  },
  {
    "text": "to intermediate to bpf backend you can use any language you want i'm not enough of a clang expert to make the claim that",
    "start": "3074559",
    "end": "3080400"
  },
  {
    "text": "any of the languages will work but as long as clang supports that translation like the the gold library all it will",
    "start": "3080400",
    "end": "3087359"
  },
  {
    "text": "expect is bpf bytecode and how you generate you can even write that by code by hand gcc also supports bpf backend by now so",
    "start": "3087359",
    "end": "3094400"
  },
  {
    "text": "there's multiple ways on how to generate that by code okay we're out of time he'll still be around the next talk is at 4",
    "start": "3094400",
    "end": "3100400"
  },
  {
    "text": "10 it'll be the tesla talk up in the keynote area thank you",
    "start": "3100400",
    "end": "3109599"
  }
]