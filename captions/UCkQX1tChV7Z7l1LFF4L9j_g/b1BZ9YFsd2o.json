[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "actually this quick question just to for my own to gauge the audience how many people have used MongoDB or currently",
    "start": "16740",
    "end": "22410"
  },
  {
    "text": "using my gonna be okay great so this won't be all new for folks so you know",
    "start": "22410",
    "end": "29310"
  },
  {
    "text": "as Bruno spoke about in the beginning I think everyone would agree that the main driving force behind no sequel and the",
    "start": "29310",
    "end": "35820"
  },
  {
    "text": "reason a lot of these new database technologies came about was to solve the big data problem the horizontal",
    "start": "35820",
    "end": "42390"
  },
  {
    "text": "scalability problem that relational databases ran into it's scale but what I",
    "start": "42390",
    "end": "48840"
  },
  {
    "text": "wanted to talk about today even though  you know is like all those other no sequel solutions in that it does have",
    "start": "48840",
    "end": "55110"
  },
  {
    "text": "a big data story that's what the and long ago DBS for but I wanted to",
    "start": "55110",
    "end": "60390"
  },
  {
    "text": "convince you all today that MongoDB is a great database even if you don't have big data if you don't have a big data",
    "start": "60390",
    "end": "65640"
  },
  {
    "text": "problem so what is MongoDB MongoDB is a scalable open source high performance",
    "start": "65640",
    "end": "72390"
  },
  {
    "start": "68000",
    "end": "95000"
  },
  {
    "text": "document oriented database and and that's a mouthful but hopefully by the time I'm done with this talk all of",
    "start": "72390",
    "end": "77880"
  },
  {
    "text": "those will make sense but first before I you know talk about you know why MongoDB",
    "start": "77880",
    "end": "84869"
  },
  {
    "text": "is good for just any size of data I just want to give a little background on what MongoDB is so you can have a mental",
    "start": "84869",
    "end": "90720"
  },
  {
    "text": "model of what we're talking about so first thing is the storage model MongoDB",
    "start": "90720",
    "end": "97380"
  },
  {
    "start": "95000",
    "end": "300000"
  },
  {
    "text": "is really not all that different at a high level from a traditional relational database in the sense that you've got",
    "start": "97380",
    "end": "104070"
  },
  {
    "text": "these things called databases inside databases there are collections and that's the term that represents what in",
    "start": "104070",
    "end": "111030"
  },
  {
    "text": "a sequel world you think of as a table and then where is in the sequel world you have rows in MongoDB you have what",
    "start": "111030",
    "end": "118710"
  },
  {
    "text": "are called documents or objects and really documents objects are",
    "start": "118710",
    "end": "126030"
  },
  {
    "text": "I have an example here that I like to go through it's a big block of JSON and so",
    "start": "126030",
    "end": "132050"
  },
  {
    "text": "JSON is the JavaScript object notation it's become really popular you know",
    "start": "132050",
    "end": "138900"
  },
  {
    "text": "first it was you know part of the JavaScript language it became very popular as an API data exchange format",
    "start": "138900",
    "end": "143930"
  },
  {
    "text": "and you know fast forward a little bit the document oriented databases like",
    "start": "143930",
    "end": "149310"
  },
  {
    "text": "MongoDB CouchDB they use JSON also as a storage format and so this example here",
    "start": "149310",
    "end": "155310"
  },
  {
    "text": "is a little example of a blog post and what you can see is an ID and everything",
    "start": "155310",
    "end": "163200"
  },
  {
    "text": "in MongoDB has an ID or an underscore ID that's one of the main tenants of how",
    "start": "163200",
    "end": "170160"
  },
  {
    "text": "documents are stored and then here we've represented an author as a as a nested",
    "start": "170160",
    "end": "176790"
  },
  {
    "text": "object so it's got a name and an email you got the body of the of the blog post",
    "start": "176790",
    "end": "182489"
  },
  {
    "text": "a date a location so the reason I included this in there is one of the",
    "start": "182489",
    "end": "189150"
  },
  {
    "text": "cool things about MongoDB is it understands latitude and longitude natively and so I'll explain a little bit later you can do all sorts of cool",
    "start": "189150",
    "end": "195540"
  },
  {
    "text": "Geographic searches with you don't have to sidecar on another technology new your database to do geo geo search",
    "start": "195540",
    "end": "202430"
  },
  {
    "text": "and this here we show whoops sorry about",
    "start": "202430",
    "end": "210540"
  },
  {
    "text": "that so how you know if you've a blog",
    "start": "210540",
    "end": "216209"
  },
  {
    "text": "post you might want to store comments to the blog post here we show an array of",
    "start": "216209",
    "end": "221400"
  },
  {
    "text": "nested objects each one has user up votes down votes and one of the cool",
    "start": "221400",
    "end": "228120"
  },
  {
    "text": "things about MongoDB is you know let's say you implemented your blog system and this is what your data model looks like",
    "start": "228120",
    "end": "233370"
  },
  {
    "text": "when you launched and then product manager comes rolling in and says hey you know I I need to have tagging we",
    "start": "233370",
    "end": "239310"
  },
  {
    "text": "need to be able to tag these blog posts it's a new feature well you know doesn't enforce schema your data has",
    "start": "239310",
    "end": "245640"
  },
  {
    "text": "schema but doesn't enforce it so if you need to go and add the tags field which is an array of in this case you",
    "start": "245640",
    "end": "252780"
  },
  {
    "text": "know or rear strings representing topics that the blog post is about you can go add that you don't have to do an update",
    "start": "252780",
    "end": "260190"
  },
  {
    "text": "schema which you know for those of you who've updated big schemas and sequel can take forever",
    "start": "260190",
    "end": "266510"
  },
  {
    "text": "and so this is basically the storage model of MongoDB and it's very different",
    "start": "266510",
    "end": "272100"
  },
  {
    "text": "than a lot of the other no sequel solutions it's really you know the term optic database is not what we like to",
    "start": "272100",
    "end": "277950"
  },
  {
    "text": "use but it really is a database that stores very rich objects it's not just",
    "start": "277950",
    "end": "283350"
  },
  {
    "text": "key value pairs where the values or numbers or strings the values themselves can be other objects arrays arrays of",
    "start": "283350",
    "end": "290250"
  },
  {
    "text": "objects and it's infinitely recursive as deep as you want to go you can represent",
    "start": "290250",
    "end": "296340"
  },
  {
    "text": "data in a very rich way in MongoDB so okay so I talked about the storage model",
    "start": "296340",
    "end": "302040"
  },
  {
    "start": "300000",
    "end": "457000"
  },
  {
    "text": "how do you access data in so another thing I think borrowed",
    "start": "302040",
    "end": "307890"
  },
  {
    "text": "correctly from the relational world is it has the idea of a query language and a lot of the no sequel solutions",
    "start": "307890",
    "end": "313740"
  },
  {
    "text": "actually do not have a query language you look up data by indexing it and you",
    "start": "313740",
    "end": "319200"
  },
  {
    "text": "look it up by ID structure in a certain way MongoDB likes the idea of you can",
    "start": "319200",
    "end": "325740"
  },
  {
    "text": "query your data however you want to and you know some examples here actually",
    "start": "325740",
    "end": "334260"
  },
  {
    "text": "this is really cool the query language is also clearly there's also in JSON so",
    "start": "334260",
    "end": "340110"
  },
  {
    "text": "this is an example here and a lot of post you can see you know there's an",
    "start": "340110",
    "end": "347490"
  },
  {
    "text": "author field and it's got a nested name so you can say things like author name is Mike and the next one might find all",
    "start": "347490",
    "end": "356270"
  },
  {
    "text": "blog posts where the weighting is greater than 2 another cool thing is if",
    "start": "356270",
    "end": "363240"
  },
  {
    "text": "you notice tags wasn't just a single value tags was an array but if you want",
    "start": "363240",
    "end": "368460"
  },
  {
    "text": "to find all blog posts where the tag software appears as one of the tags you",
    "start": "368460",
    "end": "374520"
  },
  {
    "text": "can do that and I can tell it handles multi indexing really well and then things like sorting pagination or",
    "start": "374520",
    "end": "382169"
  },
  {
    "text": "cursors that sliding windows through your data Margeaux does that really well the query",
    "start": "382169",
    "end": "388919"
  },
  {
    "text": "language like I mentioned really mathematically complete it's got a whole list of predicate operators like in not",
    "start": "388919",
    "end": "397169"
  },
  {
    "text": "in nor not and or it supports regular expressions in the query language so if you want to search for Strings with a",
    "start": "397169",
    "end": "403889"
  },
  {
    "text": "regular expression matching search you can do that it also supports embedded JavaScript for",
    "start": "403889",
    "end": "408990"
  },
  {
    "text": "where clauses that really don't fit with the query language so if you want to write a little little snippet of",
    "start": "408990",
    "end": "414689"
  },
  {
    "text": "JavaScript that you use to troll over every document in the collection and",
    "start": "414689",
    "end": "420870"
  },
  {
    "text": "return all those that match and reject all this that don't because you know",
    "start": "420870",
    "end": "425969"
  },
  {
    "text": "natively its JSON the JavaScript works really well there it's got a group operator which I won't",
    "start": "425969",
    "end": "433319"
  },
  {
    "text": "go into the details but allows you to do aggregations one big thing about MongoDB though and I think you know this was",
    "start": "433319",
    "end": "439860"
  },
  {
    "text": "mentioned with Bruno no joints so well you have a very expressive query language one of the ways MongoDB solves",
    "start": "439860",
    "end": "447240"
  },
  {
    "text": "the horizontal scalability problem is by not allowing joins and we'll talk about why when when I talk about the",
    "start": "447240",
    "end": "453509"
  },
  {
    "text": "clustering and charting and then also",
    "start": "453509",
    "end": "458639"
  },
  {
    "start": "457000",
    "end": "570000"
  },
  {
    "text": "like the relational world no MongoDB says ok the query language is something",
    "start": "458639",
    "end": "464399"
  },
  {
    "text": "we give you two very richly Express how you want to find a subset of all your documents in the database if those are",
    "start": "464399",
    "end": "471810"
  },
  {
    "text": "slow we have the concept of indexes like in the relational world so this is an example where if I know I'm looking up",
    "start": "471810",
    "end": "477899"
  },
  {
    "text": "by the author's name all the time I can specify an index on that field and then",
    "start": "477899",
    "end": "483689"
  },
  {
    "text": "the queries will go quickly and so we just quickly go back to this here you",
    "start": "483689",
    "end": "489479"
  },
  {
    "text": "can index on anything so you can index not only on nested values but you can",
    "start": "489479",
    "end": "496979"
  },
  {
    "text": "index multi values you can index latitude and longitude so like I",
    "start": "496979",
    "end": "503039"
  },
  {
    "text": "mentioned before geospatial is built-in",
    "start": "503039",
    "end": "510719"
  },
  {
    "text": "so we had a look feel on that sample I",
    "start": "510719",
    "end": "516779"
  },
  {
    "text": "gave you guys before we can do things like look for all",
    "start": "516779",
    "end": "522510"
  },
  {
    "text": "points within a rectangle so bounding box type searches searches with a",
    "start": "522510",
    "end": "527520"
  },
  {
    "text": "bounding circle so so one on the bottom is a point in a radius so all things",
    "start": "527520",
    "end": "534120"
  },
  {
    "text": "within 10 units of the point forty forty and it's actually cool you don't need to",
    "start": "534120",
    "end": "539550"
  },
  {
    "text": "just use it for geospatial indexing I think there's one really pretty well-known MongoDB app which is an",
    "start": "539550",
    "end": "546420"
  },
  {
    "text": "infinite Scrabble board or maybe not infinite but incredibly large and it uses the the geospatial",
    "start": "546420",
    "end": "554600"
  },
  {
    "text": "capabilities to represent that that plane that all the tiles are on so in",
    "start": "554600",
    "end": "563310"
  },
  {
    "text": "addition to querying it's got a really rich language for doing atomic updates to documents so oh the question again",
    "start": "563310",
    "end": "570980"
  },
  {
    "start": "570000",
    "end": "780000"
  },
  {
    "text": "selects so the concept of a select is really a sequel concept but in essence",
    "start": "570980",
    "end": "579899"
  },
  {
    "text": "you know a select statement is a is a query right so so these all here these",
    "start": "579899",
    "end": "586650"
  },
  {
    "text": "all of these are examples of how you query in MongoDB so instead of the language being kind of a syntax where",
    "start": "586650",
    "end": "592110"
  },
  {
    "text": "it's select from where this is saying find in the posts collection says that D",
    "start": "592110",
    "end": "598560"
  },
  {
    "text": "be dumb posts that's representing the actual table the collection you're searching in so that's all it's almost",
    "start": "598560",
    "end": "604290"
  },
  {
    "text": "like the from this is the where closet and maybe this is what you're getting at the projection part which is where you",
    "start": "604290",
    "end": "610620"
  },
  {
    "text": "strip out in sequel you say you know what you might have this big object here but I only want to see a subset I only",
    "start": "610620",
    "end": "617820"
  },
  {
    "text": "want to see ID and author and actually the answer is yes it does do that I didn't show that in the example but",
    "start": "617820",
    "end": "622829"
  },
  {
    "text": "there is the idea of a field mask that you can use to yeah you know",
    "start": "622829",
    "end": "631579"
  },
  {
    "text": "for the wild card you would just you just would you would not specify constrain at all so so for example if you want to say",
    "start": "636050",
    "end": "642590"
  },
  {
    "text": "what the name could be anything then you want yes you used the regular",
    "start": "642590",
    "end": "649340"
  },
  {
    "text": "expressions so it's got the full regular expression capability built-in so I didn't use an example of regular",
    "start": "649340",
    "end": "655250"
  },
  {
    "text": "expressions here but instead of saying Mike in this example I could put a",
    "start": "655250",
    "end": "660590"
  },
  {
    "text": "regular expression like Star Mike star or Mike star L or anything that the",
    "start": "660590",
    "end": "666860"
  },
  {
    "text": "standard regular expression syntax supports and you can do that so getting to update operators so obviously you",
    "start": "666860",
    "end": "675980"
  },
  {
    "text": "know you can create these documents in your programming language you can insert them you can save them but you can also",
    "start": "675980",
    "end": "682240"
  },
  {
    "text": "atomically modify them so this is an example where if you if you remember",
    "start": "682240",
    "end": "687530"
  },
  {
    "text": "back here we had a comments field that",
    "start": "687530",
    "end": "693410"
  },
  {
    "text": "was a list of these objects that represented the comments I could say to",
    "start": "693410",
    "end": "698810"
  },
  {
    "text": "the system push I can make a new comment this is an example I'm using JavaScript",
    "start": "698810",
    "end": "703880"
  },
  {
    "text": "server-side JavaScript but this could be any programming language I make a new comment and then I can tell",
    "start": "703880",
    "end": "709310"
  },
  {
    "text": "MongoDB to push this comment on to the comments list and it will do that",
    "start": "709310",
    "end": "714410"
  },
  {
    "text": "atomically it'll guarantee that only that will either all happen or it won't",
    "start": "714410",
    "end": "719510"
  },
  {
    "text": "happen and if there are multiple threads trying to do the same thing they will",
    "start": "719510",
    "end": "726020"
  },
  {
    "text": "happen atomically each one of them and so there's a whole bunch of atomic operators like for example increments",
    "start": "726020",
    "end": "732230"
  },
  {
    "text": "another good one let's say you're tracking votes actually in this example we did we had one of the one of the",
    "start": "732230",
    "end": "739520"
  },
  {
    "text": "fields on a comment was a was a vote field you could use the increment operator to atomically incremented by",
    "start": "739520",
    "end": "745820"
  },
  {
    "text": "one versus dealing with a race condition that you might have if you were to pull the object out look it and say oh it's",
    "start": "745820",
    "end": "751370"
  },
  {
    "text": "for I want to make it five and then save it back so it's really useful and then",
    "start": "751370",
    "end": "756770"
  },
  {
    "text": "there's a whole set of them so there's unset increment push pull pull all and",
    "start": "756770",
    "end": "763070"
  },
  {
    "text": "so you know the whole crud story here is really good with mug be very very rich query language you've",
    "start": "763070",
    "end": "768860"
  },
  {
    "text": "got indexes for making your queries fast you've got insert and save operations",
    "start": "768860",
    "end": "774230"
  },
  {
    "text": "and then you've got atomic update operators which allow you to atomically modify your objects and I'm not going to",
    "start": "774230",
    "end": "781160"
  },
  {
    "start": "780000",
    "end": "846000"
  },
  {
    "text": "go into too much detail with it here but in addition to all the stuff I just talked about there is an aggregation",
    "start": "781160",
    "end": "788060"
  },
  {
    "text": "language so I was showing you queries that are mostly about selecting a subset of your data there's also all sorts of",
    "start": "788060",
    "end": "795110"
  },
  {
    "text": "cool aggregations you can do and the two ways you do aggregations in MongoDB are either a with the aggregation framework",
    "start": "795110",
    "end": "801430"
  },
  {
    "text": "the aggregation framework and the 1x code line is somewhat limited",
    "start": "801430",
    "end": "807440"
  },
  {
    "text": "functionality the two o code line coming out really really soon one of the big big features of it is a whole bunch more",
    "start": "807440",
    "end": "814279"
  },
  {
    "text": "aggregation functionality and it's actually really cool and then there's MapReduce so MongoDB does have a",
    "start": "814279",
    "end": "821389"
  },
  {
    "text": "MapReduce engine where you can specify map functions and reduce functions and",
    "start": "821389",
    "end": "826730"
  },
  {
    "text": "then it runs over your data and computes the result and it saves that in another collection not sophisticated as Hadoop's",
    "start": "826730",
    "end": "834529"
  },
  {
    "text": "MapReduce system in fact people have hooked up Hadoop to MongoDB but for",
    "start": "834529",
    "end": "840290"
  },
  {
    "text": "simple MapReduce style jobs it's it's really convenient and works really well the other thing I should say about",
    "start": "840290",
    "end": "848660"
  },
  {
    "start": "846000",
    "end": "897000"
  },
  {
    "text": "that really you know is a subtle point that but shouldn't be overlooked is that",
    "start": "848660",
    "end": "855339"
  },
  {
    "text": "10gen has gone through the trouble of actually creating a driver in every programming language for job not for",
    "start": "855339",
    "end": "861769"
  },
  {
    "text": "tougher for MongoDB so Java JavaScript Python Ruby whatever programming language you use there is an officially",
    "start": "861769",
    "end": "869120"
  },
  {
    "text": "supported driver from the makers of the database and I can't tell you how",
    "start": "869120",
    "end": "875029"
  },
  {
    "text": "convenient that is compared to a lot of other database technologies I've used where there's either some protocol",
    "start": "875029",
    "end": "881329"
  },
  {
    "text": "interface that you have to implement or or you know you really only have one programming language that you have to",
    "start": "881329",
    "end": "887329"
  },
  {
    "text": "use to be able to interface with it and so you know I'm sure I'm sure most of",
    "start": "887329",
    "end": "893480"
  },
  {
    "text": "you have played around with some of these drivers and then the other thing about MongoDB",
    "start": "893480",
    "end": "898920"
  },
  {
    "text": "which you know like all the no sequel solutions which I'll touch upon briefly but is not the main thrust of my talk is",
    "start": "898920",
    "end": "904770"
  },
  {
    "text": "that it was built with reliability and scalability from the ground up like all",
    "start": "904770",
    "end": "910950"
  },
  {
    "text": "the no sequel solutions I think the horizontal scalability problem like I mentioned before something that really",
    "start": "910950",
    "end": "918000"
  },
  {
    "text": "drove this whole Renaissance and database technologies that we're seeing now so let me talk a little bit about",
    "start": "918000",
    "end": "923780"
  },
  {
    "text": "the scaling and reliability in the clustering story with and how that all works so when you talk about MongoDB",
    "start": "923780",
    "end": "931320"
  },
  {
    "text": "clusters there are two main concepts that MongoDB introduces one is the idea",
    "start": "931320",
    "end": "938280"
  },
  {
    "text": "of replication and replica sets replica sets are groups of MongoDB databases and",
    "start": "938280",
    "end": "945570"
  },
  {
    "text": "actually if you can see right here this this this is an example of a big sharded cluster but I wanted to focus on the",
    "start": "945570",
    "end": "950970"
  },
  {
    "text": "gray box first so if you have a deployment where you know you care about",
    "start": "950970",
    "end": "959300"
  },
  {
    "text": "high availability the story with is you create a cluster with with",
    "start": "959300",
    "end": "964920"
  },
  {
    "text": "replicas each replica has a copy of your data and you can put a bullet in one of",
    "start": "964920",
    "end": "970410"
  },
  {
    "text": "those those set members and all of your reads and writes will failover to",
    "start": "970410",
    "end": "976430"
  },
  {
    "text": "another member of the cluster and there's an interesting voting algorithm that goes underneath the covers for the",
    "start": "976430",
    "end": "983280"
  },
  {
    "text": "cluster to decide who should be promoted from a secondary to a primary so for",
    "start": "983280",
    "end": "989160"
  },
  {
    "text": "high availability use the replica set feature the other reason you use the replica set feature is this is how",
    "start": "989160",
    "end": "994170"
  },
  {
    "text": "MongoDB talks about read scaling so if you have a scaling if you have a scaling",
    "start": "994170",
    "end": "1000650"
  },
  {
    "text": "problem where it's about read throughput what you do is is you have your driver read evenly across all of the members of",
    "start": "1000650",
    "end": "1007940"
  },
  {
    "text": "the replica set cluster that spreads the read load across it could be two three",
    "start": "1007940",
    "end": "1013550"
  },
  {
    "text": "five twenty nodes that's how you do read scalability and then write scalability",
    "start": "1013550",
    "end": "1019460"
  },
  {
    "text": "is handled with sharding in the auto sharding future so this is where you start to partition",
    "start": "1019460",
    "end": "1025150"
  },
  {
    "text": "your data and you know folks have been doing charting in sequel for years but mostly manually the cool thing about",
    "start": "1025150",
    "end": "1031209"
  },
  {
    "text": " sharding is that it automatically balances data across the charts so each",
    "start": "1031210",
    "end": "1036760"
  },
  {
    "text": "one of these vertical columns here on this diagram represents a shard so you can imagine a scenario where you have a",
    "start": "1036760",
    "end": "1043360"
  },
  {
    "text": "user collection that is just for whatever reason too big to handle the",
    "start": "1043360",
    "end": "1049030"
  },
  {
    "text": "write load with one MongoDB node what you do is you say okay you know I know",
    "start": "1049030",
    "end": "1054640"
  },
  {
    "text": "some of you know what charting is but maybe some of you don't you say that you know let's say users a through C or on",
    "start": "1054640",
    "end": "1060130"
  },
  {
    "text": "this chart and then users see through F or on this shard you actually partition the data set into a bunch of different",
    "start": "1060130",
    "end": "1065620"
  },
  {
    "text": "buckets and then each bucket consists of a replica set because you don't want any",
    "start": "1065620",
    "end": "1071710"
  },
  {
    "text": "node in that bucket to be able to go dark because you want to have high availability so each shard consists of a",
    "start": "1071710",
    "end": "1077440"
  },
  {
    "text": "little cluster of replicas and then the entire cluster is a cluster of shards",
    "start": "1077440",
    "end": "1082540"
  },
  {
    "text": "and that's how long ago DB handles you know the most badass of scaling",
    "start": "1082540",
    "end": "1088480"
  },
  {
    "text": "situations so you know examples of folks who really scale big with MongoDB Foursquare is a really famous example",
    "start": "1088480",
    "end": "1095280"
  },
  {
    "text": "they've got a cluster set up like this where they handle an enormous amount of write throughput so you can imagine",
    "start": "1095280",
    "end": "1101160"
  },
  {
    "text": "having to handle every check-in for every mobile device running Foursquare",
    "start": "1101160",
    "end": "1106540"
  },
  {
    "text": "on the planet that's a lot of Rights and so they're an example where they use charting and there are others that you",
    "start": "1106540",
    "end": "1113830"
  },
  {
    "text": "can look up online MongoDB has a really good and public list of all of their deployments okay",
    "start": "1113830",
    "end": "1123580"
  },
  {
    "start": "1120000",
    "end": "1381000"
  },
  {
    "text": "but scaling aside the main thing I want to talk to you today everyone about",
    "start": "1123580",
    "end": "1130180"
  },
  {
    "text": "today is the fact that you know most people don't realize that while MongoDB",
    "start": "1130180",
    "end": "1135190"
  },
  {
    "text": "you know really got popular because it has a great story around scaling data it's really not just about big data in",
    "start": "1135190",
    "end": "1142960"
  },
  {
    "text": "fact what I want to talk about is why it's it's really good for for almost any sized data set",
    "start": "1142960",
    "end": "1149210"
  },
  {
    "text": "and to do that let me bring up an example of what we used to look at the",
    "start": "1149210",
    "end": "1154310"
  },
  {
    "text": "old world so I'm gonna continue with my blogpost example this is an example of how we might store that blog post that I",
    "start": "1154310",
    "end": "1162230"
  },
  {
    "text": "was talking about in a relational world and I've abbreviated a little bit for making the diagram simple but as you can",
    "start": "1162230",
    "end": "1169670"
  },
  {
    "text": "see we've got our main table which represents the blog post the author",
    "start": "1169670",
    "end": "1176030"
  },
  {
    "text": "being another structured object is is normalized out into into another table within this example I just put a name",
    "start": "1176030",
    "end": "1183170"
  },
  {
    "text": "and email in there but then you know you look at the comments for example and the",
    "start": "1183170",
    "end": "1188540"
  },
  {
    "text": "comments because it's a list of comments this is a menu to one relationship where",
    "start": "1188540",
    "end": "1193610"
  },
  {
    "text": "you have the comment details but they have a pointer back up to the blog post and then if you wanted to get all",
    "start": "1193610",
    "end": "1201020"
  },
  {
    "text": "comments related to a blog post you'd look up from that table with this ID or",
    "start": "1201020",
    "end": "1206210"
  },
  {
    "text": "if you wanted to get all the comments with the blog post you do a join between those two tables to get all the data",
    "start": "1206210",
    "end": "1212480"
  },
  {
    "text": "back related to a blog post or to get a set of blog posts back with all the data you'd actually do a join with these four",
    "start": "1212480",
    "end": "1219170"
  },
  {
    "text": "tables and then when you're done with that join you're not done with your work because you're probably programming in a",
    "start": "1219170",
    "end": "1225380"
  },
  {
    "text": "language like Java or Python or something that's object-oriented and you probably are representing those comments",
    "start": "1225380",
    "end": "1231020"
  },
  {
    "text": "and those tags in your code as an array or a list or some sort of data structure",
    "start": "1231020",
    "end": "1236150"
  },
  {
    "text": "like that and so after you do your big ass join you've then got to go and go through all of that data and now reshape",
    "start": "1236150",
    "end": "1243620"
  },
  {
    "text": "it so that you have a parent blog post object and that you take all those other pieces and shove them into the array",
    "start": "1243620",
    "end": "1249590"
  },
  {
    "text": "values this is what's called object relational mapping I'm sure a lot of you have played with things like hibernate",
    "start": "1249590",
    "end": "1256060"
  },
  {
    "text": "active record and Ruby things like that and you know for those of you who've",
    "start": "1256060",
    "end": "1261620"
  },
  {
    "text": "done it it sucks I don't know how many of you guys know Ted new word but he's a famous",
    "start": "1261620",
    "end": "1270419"
  },
  {
    "text": "author and programmer in the industry and and he had it rights it's the the Vietnam of our industry the amount of",
    "start": "1270419",
    "end": "1276630"
  },
  {
    "text": "time firstly I can tell you the amount of time in the late 90s and an early part of the 2000s I personally spent as",
    "start": "1276630",
    "end": "1283919"
  },
  {
    "text": "a programmer changing the shape of my data from the relational world to the object world both for inserting the data",
    "start": "1283919",
    "end": "1290539"
  },
  {
    "text": "updating the data expressing queries about the data you know either we've",
    "start": "1290539",
    "end": "1296610"
  },
  {
    "text": "written out the correlational mappers or we've used optic relational mappers and if you use them they're still not easy to use especially if you want to get",
    "start": "1296610",
    "end": "1302640"
  },
  {
    "text": "them to be performant and then there's some things where you're like you know what screw it I've just got a you know bypassed the object relational mapper",
    "start": "1302640",
    "end": "1308940"
  },
  {
    "text": "because it's not doing what I want to do I mean how many people have you know probably felt really guilty about doing",
    "start": "1308940",
    "end": "1315539"
  },
  {
    "text": "it but you know put a comma-separated list of strings in a column in a DB and",
    "start": "1315539",
    "end": "1322320"
  },
  {
    "text": "felt super guilty about it right but said like okay I'm not really gonna search by this so when I pull it out",
    "start": "1322320",
    "end": "1327840"
  },
  {
    "text": "I'll just do a spring string split on the comma and I'll and I'll get into my object and the reason you did that is",
    "start": "1327840",
    "end": "1333450"
  },
  {
    "text": "because frankly relational model was not the right model for what you were trying to do so you think about all that mess",
    "start": "1333450",
    "end": "1340620"
  },
  {
    "text": "and then you you know you look at this right you say wow this this looks like the way I represent this stuff in my",
    "start": "1340620",
    "end": "1346830"
  },
  {
    "text": "code like if you're a Python programmer or a JavaScript programmer it looks exactly like this if you're a Ruby",
    "start": "1346830",
    "end": "1352169"
  },
  {
    "text": "programmer it looks almost like this where the columns are separated with you know that equal greater than if you're a",
    "start": "1352169",
    "end": "1358380"
  },
  {
    "text": "PHP programmer this is almost like what you'd use except everything's arrays and so you know it's a raise of arrays and",
    "start": "1358380",
    "end": "1366120"
  },
  {
    "text": "nested arrays which is still a very expressive data structure this in my opinion is a more subtle reason as to",
    "start": "1366120",
    "end": "1374370"
  },
  {
    "text": "why you should think about using MongoDB even if you do not have a big data",
    "start": "1374370",
    "end": "1379380"
  },
  {
    "text": "problem it's really great as a general-purpose database actually so",
    "start": "1379380",
    "end": "1387360"
  },
  {
    "text": "some examples you know in my travels where I've seen it really good so using it for accounts and user profiles right",
    "start": "1387360",
    "end": "1394409"
  },
  {
    "text": "so you have your account object everyone has this every website consumer",
    "start": "1394409",
    "end": "1399429"
  },
  {
    "text": "enterprise everyone has their accounts and their users probably no reason why",
    "start": "1399429",
    "end": "1405200"
  },
  {
    "text": "you really need a relational database for that you're probably not doing any interesting Cartesian products between",
    "start": "1405200",
    "end": "1410720"
  },
  {
    "text": "tables you're just looking up the account by ID you may be following the account - it's to have a pointer to its",
    "start": "1410720",
    "end": "1416779"
  },
  {
    "text": "user the user as a pointer back to account there's a few different ways of modeling it really good for user form",
    "start": "1416779",
    "end": "1422809"
  },
  {
    "text": "data so you have user forms you just want to store that data back in the",
    "start": "1422809",
    "end": "1428630"
  },
  {
    "text": "database you might change the form often so the flexible schema of Mugabe's really great because you can add fields",
    "start": "1428630",
    "end": "1434480"
  },
  {
    "text": "remove fields it's not going to impact things content management systems also place where this shines CMS systems are",
    "start": "1434480",
    "end": "1441889"
  },
  {
    "text": "where you'll often see the table inheritance problem so how many people",
    "start": "1441889",
    "end": "1447260"
  },
  {
    "text": "have seen where you know you have a parent table representing a certain type of thing and then you have all these children tables that point up to the",
    "start": "1447260",
    "end": "1453649"
  },
  {
    "text": "parent table so the parent table might be like the content item and then you might have you know blog post news",
    "start": "1453649",
    "end": "1459289"
  },
  {
    "text": "article you know offer of the day might be another subclass and in your in your",
    "start": "1459289",
    "end": "1465230"
  },
  {
    "text": "programming languages this really is a hierarchy and then you go into your relational modeling exercise and you",
    "start": "1465230",
    "end": "1470360"
  },
  {
    "text": "create a parent table and all the sub tables of the pointers up and then you know you do the joins between them to",
    "start": "1470360",
    "end": "1475490"
  },
  {
    "text": "get all the attributes and then if you want to you know if you want to find out information across all of those",
    "start": "1475490",
    "end": "1481549"
  },
  {
    "text": "different subtypes then you're doing all sorts of interesting Union things and all that type of stuff whereas a",
    "start": "1481549",
    "end": "1486710"
  },
  {
    "text": "you know you would just maybe you'd put a field in there the represent of the type so you could you know discriminate based on that but you would just put the",
    "start": "1486710",
    "end": "1493159"
  },
  {
    "text": "things that represent blog posts in the blog post type and you'd put the things represent the tip of the day or the deal",
    "start": "1493159",
    "end": "1498470"
  },
  {
    "text": "of the day or the coupon of the day and that you could have them all in one collection they don't all have to be exactly the same",
    "start": "1498470",
    "end": "1505070"
  },
  {
    "text": "great great use case for MongoDB storing geo data so anything that's geo based",
    "start": "1505070",
    "end": "1511309"
  },
  {
    "text": "like location based apps mobile apps really great because MongoDB understands geo data natively so that's a that's a",
    "start": "1511309",
    "end": "1519889"
  },
  {
    "text": "big win app configuration really good so you know everything from you know you",
    "start": "1519889",
    "end": "1527500"
  },
  {
    "text": "know ports and you know connection info to you know really complex IOC kind of",
    "start": "1527500",
    "end": "1535870"
  },
  {
    "text": "dependency injection type stuff right that really you know all the stuff you want to use to configure your application you know stick and date",
    "start": "1535870",
    "end": "1542170"
  },
  {
    "text": "stick and JSON data structures it's it's very convenient and then application logging a lot of people use MongoDB for",
    "start": "1542170",
    "end": "1548920"
  },
  {
    "text": "app log instead of log files MongoDB is famous for its write performance and a",
    "start": "1548920",
    "end": "1555880"
  },
  {
    "text": "lot of people just fire-and-forget into one big collection then they can search it later",
    "start": "1555880",
    "end": "1562060"
  },
  {
    "text": "as a database collection instead of trolling to log files it's really convenient ok well that one quicker than",
    "start": "1562060",
    "end": "1570730"
  },
  {
    "text": "I thought that's CUNY that's a great question so the question is what's a MongoDB",
    "start": "1570730",
    "end": "1576160"
  },
  {
    "text": "technique for normalization when you do want to normalize your data so let me",
    "start": "1576160",
    "end": "1581560"
  },
  {
    "text": "just quickly go back so the one thing I did not show here is there actually is",
    "start": "1581560",
    "end": "1587050"
  },
  {
    "start": "1584000",
    "end": "1738000"
  },
  {
    "text": "syntax for references to items in other collections so there it's I won't draw",
    "start": "1587050",
    "end": "1593560"
  },
  {
    "text": "it here but you have a little syntax where it's a it's a tuple where you name the collection and the ID of the other",
    "start": "1593560",
    "end": "1598750"
  },
  {
    "text": "thing in the other collection and it's a pointer to something so you could take the author out and put it in another",
    "start": "1598750",
    "end": "1605860"
  },
  {
    "text": "collection and point to it and you can model your data that way if it's if it's makes sense for what you're doing so",
    "start": "1605860",
    "end": "1612220"
  },
  {
    "text": "first of all I probably I need right we did not meet before this did we okay so I I'm with mongolab and we are a",
    "start": "1612220",
    "end": "1622930"
  },
  {
    "text": "host of a matter but yeah so we host on ec2 and Rackspace",
    "start": "1622930",
    "end": "1631780"
  },
  {
    "text": "we can we can talk afterwards I don't want this to be a pinch session but yeah there are there are hosting and we're",
    "start": "1631780",
    "end": "1637030"
  },
  {
    "text": "not the only one so great question so the question is is there support for constraints on the data ways of",
    "start": "1637030",
    "end": "1642430"
  },
  {
    "text": "specifying for example that a certain field cannot be no in general not really",
    "start": "1642430",
    "end": "1648790"
  },
  {
    "text": "I will say that when you specify indexes on things you can specify that they have",
    "start": "1648790",
    "end": "1653950"
  },
  {
    "text": "to be unique and there are a few constraints like that but really that's not really truly what you're asking and",
    "start": "1653950",
    "end": "1659710"
  },
  {
    "text": "so the answer your question is no you're doing your application I will say that in the community a lot of open source",
    "start": "1659710",
    "end": "1665920"
  },
  {
    "text": "projects have cropped up that rap the MongoDB drivers that come from 10 gens",
    "start": "1665920",
    "end": "1671820"
  },
  {
    "text": "little mapping layers and most of those I know of do add some sort of constraint",
    "start": "1671820",
    "end": "1677440"
  },
  {
    "text": "language or constraint system but it's handled the application tier question how does DB handle concurrent",
    "start": "1677440",
    "end": "1684460"
  },
  {
    "text": "reads and writes is there a locking mechanism on the database the answer is yes there is a server wide right look",
    "start": "1684460",
    "end": "1692070"
  },
  {
    "text": "that basically when you write it blocks other writes and it blocks reads for the",
    "start": "1692070",
    "end": "1698800"
  },
  {
    "text": "duration of that lock for every database for every collection on that database",
    "start": "1698800",
    "end": "1704260"
  },
  {
    "text": "server it is it is something that's being worked on actively its first going",
    "start": "1704260",
    "end": "1710440"
  },
  {
    "text": "to go down to database level and then it's going to be at even finer grain of",
    "start": "1710440",
    "end": "1716020"
  },
  {
    "text": "collection level and then even filesystem extent and document level so that's going to that's going to get",
    "start": "1716020",
    "end": "1722080"
  },
  {
    "text": "better right so the question is is there any support for dealing with concurrent",
    "start": "1722080",
    "end": "1728590"
  },
  {
    "text": "access to documents you know and one example is a read of modified flag or",
    "start": "1728590",
    "end": "1734290"
  },
  {
    "text": "some sort of mechanism like that so the main mechanism MongoDB handles that is",
    "start": "1734290",
    "end": "1739750"
  },
  {
    "start": "1738000",
    "end": "2036000"
  },
  {
    "text": "with the atomic operators I was mentioning so all of those operators one",
    "start": "1739750",
    "end": "1745990"
  },
  {
    "text": "in one of them the most simple one is is called set where you set a field to a specific value if you update your",
    "start": "1745990",
    "end": "1752890"
  },
  {
    "text": "database with one of those operators it is guaranteed guaranteed to be atomic and you",
    "start": "1752890",
    "end": "1758269"
  },
  {
    "text": "can set multiple fields at once so in the example I gave before that this is",
    "start": "1758269",
    "end": "1763459"
  },
  {
    "text": "the example I gave before where is this atomically push this new comment under the list of comments I could have also",
    "start": "1763459",
    "end": "1770389"
  },
  {
    "text": "said they're not only push the comments but then increment a number so I can actually do a modification of multiple",
    "start": "1770389",
    "end": "1777409"
  },
  {
    "text": "fields at the same time atomically and it's guaranteed that all of those will update at once got it got it so I think",
    "start": "1777409",
    "end": "1784969"
  },
  {
    "text": "what you're asking is is there also a way to specify a query constraint along with that update to say push this on",
    "start": "1784969",
    "end": "1791570"
  },
  {
    "text": "only where the ID is 55 or only where this thing is not null or set it to 7 if",
    "start": "1791570",
    "end": "1798799"
  },
  {
    "text": "it's not null or set it to 12 if it's less than 10 but if it's more than 10 to",
    "start": "1798799",
    "end": "1804619"
  },
  {
    "text": "nothing that kind of thing okay so if the first part of this update operator",
    "start": "1804619",
    "end": "1809779"
  },
  {
    "text": "is a query constraint so that query and the update happened together yes sorry I",
    "start": "1809779",
    "end": "1817459"
  },
  {
    "text": "was not clear no so okay so the question is you can get an atomic operators on a",
    "start": "1817459",
    "end": "1823339"
  },
  {
    "text": "single object but what about across objects so one of the place one of the things that MongoDB is not well-suited",
    "start": "1823339",
    "end": "1828950"
  },
  {
    "text": "for our applications we need multi operation transactions right so the idea",
    "start": "1828950",
    "end": "1835339"
  },
  {
    "text": "is saying insert insert insert update update delete delete Oh roll all that back or commit all that together the",
    "start": "1835339",
    "end": "1842299"
  },
  {
    "text": "kind of two phase commit stuff MongoDB does not support that what is the",
    "start": "1842299",
    "end": "1847519"
  },
  {
    "text": "support for querying nested arrays is it would that be correct",
    "start": "1847519",
    "end": "1853129"
  },
  {
    "text": "so one Operator I did not show it's called LM match and you can look this up on the docs online but it's actually",
    "start": "1853129",
    "end": "1858919"
  },
  {
    "text": "particularly for matching those things that have arrays with elements that",
    "start": "1858919",
    "end": "1864950"
  },
  {
    "text": "match a query that you specify and that should work fine I've never personally done it on arrays of arrays but in",
    "start": "1864950",
    "end": "1871070"
  },
  {
    "text": "principle it should work sorry the question is is there a way to substitute the way you compute geo searches the way",
    "start": "1871070",
    "end": "1879109"
  },
  {
    "text": "you compute distances between I think is what you're getting at not not that I'm aware of I think it's",
    "start": "1879109",
    "end": "1885049"
  },
  {
    "text": "really just spherical coordinate computations and that's it or spherical I think there might be spiracle and",
    "start": "1885049",
    "end": "1891080"
  },
  {
    "text": "Cartesian but no but nothing where you can kind of plug in your own version of the distance formula that I that I'm aware of",
    "start": "1891080",
    "end": "1896389"
  },
  {
    "text": "oh great yeah so the question is how do you back up these databases there are a",
    "start": "1896389",
    "end": "1902179"
  },
  {
    "text": "variety of techniques so you can use okay so the main ways folks do it are a",
    "start": "1902179",
    "end": "1908659"
  },
  {
    "text": "there are some built-in commands that come with MongoDB one is called",
    "start": "1908659",
    "end": "1913669"
  },
  {
    "text": "export one it's called dump export exports it's Warbeck human-friendly export",
    "start": "1913669",
    "end": "1919519"
  },
  {
    "text": "exports into either CSV S or JSON files  dump is a binary dump format the",
    "start": "1919519",
    "end": "1925580"
  },
  {
    "text": "technique you use with dump depending on if you have journaling and replication on is either you run mugga",
    "start": "1925580",
    "end": "1931820"
  },
  {
    "text": "dump and it'll actually properly backup the database and you can have it do a point-in-time backup without having to",
    "start": "1931820",
    "end": "1938629"
  },
  {
    "text": "stop it in other scenarios you can do what's called an F sync and lock where you basically tell the database to flush",
    "start": "1938629",
    "end": "1945619"
  },
  {
    "text": "everything to disk you suspend writes to the database and then you dump the data",
    "start": "1945619",
    "end": "1951649"
  },
  {
    "text": "or you can alternately copy it's also depending if you have a small data set you can copy the database files one nice",
    "start": "1951649",
    "end": "1958549"
  },
  {
    "text": "thing is it's very clear what's going on under the hood there's a directory with files and for your database and you can",
    "start": "1958549",
    "end": "1965029"
  },
  {
    "text": "copy those over and you can be sure that you copy those over that represents the whole thing if you're on something that",
    "start": "1965029",
    "end": "1972289"
  },
  {
    "text": "supports journaled snapshotting so you have a journal file system you know EPS",
    "start": "1972289",
    "end": "1977659"
  },
  {
    "text": "supports this there are other journal file systems you can do incremental snapshots and let me think with some of",
    "start": "1977659",
    "end": "1986149"
  },
  {
    "text": "the other ways those are the main techniques and in there and they're pretty well documented on the MongoDB",
    "start": "1986149",
    "end": "1991600"
  },
  {
    "text": "site and you tend to one thing I'll say also replication is often often used for",
    "start": "1991600",
    "end": "1997850"
  },
  {
    "text": "doing backups so one thing that's typical is instead of doing backups off of a master",
    "start": "1997850",
    "end": "2003830"
  },
  {
    "text": "and affecting the performance of that node you will have you can have a slave that's devoted for as a backup slave so",
    "start": "2003830",
    "end": "2011660"
  },
  {
    "text": "you replicate that slave and then you take backups off that slave and you're not affecting the actual primaries that",
    "start": "2011660",
    "end": "2018380"
  },
  {
    "text": "are that are serving your application okay so thank you very much guys",
    "start": "2018380",
    "end": "2024520"
  }
]