[
  {
    "text": "and again if you take a look at the Python fundamentals curriculum we're",
    "start": "11120",
    "end": "17760"
  },
  {
    "text": "starting out with lab 4.5 and you can just type in that code example and make sure that it works and then we'd like to extend it to also report on the evening",
    "start": "17760",
    "end": "24210"
  },
  {
    "text": "and handle midnight and let me give you",
    "start": "24210",
    "end": "30090"
  },
  {
    "text": "the two-second tour of importing we can do four different kinds of imports I",
    "start": "30090",
    "end": "36719"
  },
  {
    "text": "think",
    "start": "36719",
    "end": "38930"
  },
  {
    "text": "yeah and I didn't actually catch that so it just says returning it but I could say X is equal to and X is now a",
    "start": "55480",
    "end": "62839"
  },
  {
    "text": "date/time object we haven't yet talked about objects very much and X has a",
    "start": "62839",
    "end": "68270"
  },
  {
    "text": "bunch of members that will give me",
    "start": "68270",
    "end": "73880"
  },
  {
    "text": "information about the",
    "start": "73880",
    "end": "76719"
  },
  {
    "text": "date that I have date time object that I have",
    "start": "84760",
    "end": "88710"
  },
  {
    "text": "and really quickly to talk about imports the most basic import statement is to",
    "start": "97790",
    "end": "102860"
  },
  {
    "text": "import a module and it's just import and",
    "start": "102860",
    "end": "111740"
  },
  {
    "text": "the name of the module if the Mosel doesn't exist then you'll get an error",
    "start": "111740",
    "end": "117160"
  },
  {
    "text": "and this creates a variable & local",
    "start": "117160",
    "end": "122260"
  },
  {
    "text": "namespace called date/time that points to a module and you can actually see where that module is stored if your",
    "start": "122260",
    "end": "128390"
  },
  {
    "text": "Python installation shipped with a source code you could go read the source code for the module assuming that is written in Python much of the standard",
    "start": "128390",
    "end": "133820"
  },
  {
    "text": "library for Python is written in Python some of it is written in C for particularly high-performance modules",
    "start": "133820",
    "end": "141400"
  },
  {
    "text": "you can import something specific from a module so to access that now command as",
    "start": "141400",
    "end": "147380"
  },
  {
    "text": "of that last import statement I have to say date/time which is a package it's a",
    "start": "147380",
    "end": "153320"
  },
  {
    "text": "module that contains other modules date/time which is a module inside of date/time and that seems like a lot of",
    "start": "153320",
    "end": "161260"
  },
  {
    "text": "confusing typing so I could get that",
    "start": "161260",
    "end": "168140"
  },
  {
    "text": "second module by saying from date/time",
    "start": "168140",
    "end": "173630"
  },
  {
    "text": "import date time and now date time is a",
    "start": "173630",
    "end": "180769"
  },
  {
    "text": "variable that's pointing to a module inside the date/time module",
    "start": "180769",
    "end": "185739"
  },
  {
    "text": "now everything is imported all now is actually a function so it's not important only modules are in portable but I could rename modules that I import",
    "start": "194459",
    "end": "210689"
  },
  {
    "text": "with a different name by just adding as name at the end and again that creates a variable in the local namespace that's",
    "start": "210689",
    "end": "217859"
  },
  {
    "text": "pointing to a module that I imported yes",
    "start": "217859",
    "end": "223230"
  },
  {
    "text": "and an ideally you don't know the path to the modules so lots of languages lets",
    "start": "223230",
    "end": "228720"
  },
  {
    "text": "you import code by specifying the path Python prefers that you manage the path",
    "start": "228720",
    "end": "234510"
  },
  {
    "text": "it automatically puts all the system modules in your path and then you don't",
    "start": "234510",
    "end": "239639"
  },
  {
    "text": "have to know the path and you don't do path based imports you do name based imports so there wouldn't be any sense",
    "start": "239639",
    "end": "244980"
  },
  {
    "text": "of saying like import dot dot some module name it's purely name based and",
    "start": "244980",
    "end": "250650"
  },
  {
    "text": "either Python knows how to find it automatically or doesn't and there's ways to manage that so I did I did",
    "start": "250650",
    "end": "257190"
  },
  {
    "text": "actually I did actually specify yeah I said from date/time which is this module import date/time which is actually a",
    "start": "257190",
    "end": "263849"
  },
  {
    "text": "class and if I just say import date/time",
    "start": "263849",
    "end": "269010"
  },
  {
    "text": "I will get the module if I want to import something from it I have to say from the module import something else",
    "start": "269010",
    "end": "277550"
  },
  {
    "text": "and don't worry too much about the mechanics of imports because we'll talk about them at great length here so all",
    "start": "278330",
    "end": "285479"
  },
  {
    "text": "the top all the top level built-in modules are in the site packages directory for Python which on Windows is",
    "start": "285479",
    "end": "292470"
  },
  {
    "text": "in Python 2.7 Lib I believe and it automatically sets up to look in that",
    "start": "292470",
    "end": "297750"
  },
  {
    "text": "spot first whenever you run an import statement so are people starting on that",
    "start": "297750",
    "end": "305460"
  },
  {
    "text": "lab so if hours before 12:00 we take morning",
    "start": "305460",
    "end": "312510"
  },
  {
    "text": "if it's before 18 which every six o'clock afternoon LF it's less than 21",
    "start": "312510",
    "end": "318930"
  },
  {
    "text": "we type evening else night that's fine",
    "start": "318930",
    "end": "324740"
  },
  {
    "text": "there is actually and you could say if our is less than 12 and Python does on",
    "start": "325100",
    "end": "332610"
  },
  {
    "text": "some languages don't let you change arithmetic operators with Python will so",
    "start": "332610",
    "end": "342440"
  },
  {
    "text": "see X is equal to 10",
    "start": "342440",
    "end": "347180"
  },
  {
    "text": "that works as we would expect",
    "start": "354160",
    "end": "357789"
  },
  {
    "text": "and nicely enough so does that so that would say if X is greater than 11 less",
    "start": "366380",
    "end": "372740"
  },
  {
    "text": "than 12 its between 11 and 12 11 is less than X X is less than 12 in mathematical",
    "start": "372740",
    "end": "381470"
  },
  {
    "text": "yeah exactly a lot of languages would make you say like if X is less than 12 and X is",
    "start": "381470",
    "end": "389030"
  },
  {
    "text": "greater than and you can do it that way as well but Python does allow the shortcutting arithmetic notation so has",
    "start": "389030",
    "end": "396590"
  },
  {
    "text": "everybody got their their date parsing script working it's got a few ifs and else if let's talk about some more",
    "start": "396590",
    "end": "402560"
  },
  {
    "text": "complicated data types and I'll just show something in the answer to you Lee's question really quickly we",
    "start": "402560",
    "end": "407750"
  },
  {
    "text": "actually have a lab later on that is using a built in module that lets us build complicated command-line interfaces a parse but for really simple",
    "start": "407750",
    "end": "415850"
  },
  {
    "text": "usages of command-line interfaces the cysts module provides access to lots of",
    "start": "415850",
    "end": "422560"
  },
  {
    "text": "our environment and SISTAR's v is the",
    "start": "422560",
    "end": "427970"
  },
  {
    "text": "list of command-line arguments there's also Arg C which is the count and those",
    "start": "427970",
    "end": "439970"
  },
  {
    "text": "are kind of arcane names but long-standing UNIX practice I was there",
    "start": "439970",
    "end": "445040"
  },
  {
    "text": "not Argosy nice I'm printing Arg V and",
    "start": "445040",
    "end": "454040"
  },
  {
    "text": "it prints a list which has all the command-line arguments that I give it if",
    "start": "454040",
    "end": "460610"
  },
  {
    "text": "I add command-line arguments there they are an Arg V and the first one is always",
    "start": "460610",
    "end": "465710"
  },
  {
    "text": "the name of the script that's currently executing",
    "start": "465710",
    "end": "468910"
  },
  {
    "text": "that seems really dumb",
    "start": "480230",
    "end": "483550"
  },
  {
    "text": "and not the date portion",
    "start": "487740",
    "end": "491270"
  },
  {
    "text": "so now is a and that's actually some of the confusion with the date time you first look at it it kind of seems",
    "start": "514539",
    "end": "520130"
  },
  {
    "text": "confusing but it has portions for working with just times just dates differences between dates differences",
    "start": "520130",
    "end": "525350"
  },
  {
    "text": "between times and now my variable now is equal to date time now whatever the",
    "start": "525350",
    "end": "531080"
  },
  {
    "text": "return value of that is which is a date time object that has the year the month the day the hour the minute the second",
    "start": "531080",
    "end": "537950"
  },
  {
    "text": "the microsecond or there's a few",
    "start": "537950",
    "end": "545570"
  },
  {
    "text": "built-in formatting methods that are",
    "start": "545570",
    "end": "551450"
  },
  {
    "text": "somewhat limited ISO format but is more",
    "start": "551450",
    "end": "556670"
  },
  {
    "text": "readable so for we were having trouble running help before and help functions",
    "start": "556670",
    "end": "562820"
  },
  {
    "text": "on existing objects so if I say help date there is no date there is no",
    "start": "562820",
    "end": "570650"
  },
  {
    "text": "variable name date help is a function that takes a variable I do have a variable called now and now is a date",
    "start": "570650",
    "end": "576950"
  },
  {
    "text": "time objects I could call help on my now and as far as syntax it's just a",
    "start": "576950",
    "end": "582290"
  },
  {
    "text": "function call it requires parenthesis it accepts one argument which is the thing that it is going to introspect and tell",
    "start": "582290",
    "end": "587570"
  },
  {
    "text": "you about it's there it's in the list",
    "start": "587570",
    "end": "598390"
  },
  {
    "text": "it's just down a little ways so this the",
    "start": "598390",
    "end": "603410"
  },
  {
    "text": "first functions help talks about I'll start with underscores and these are emulation functions we'll talk about that when we get to there basically ways",
    "start": "603410",
    "end": "610250"
  },
  {
    "text": "to make your object respond to variety of built-in operators after that anything that doesn't stop with",
    "start": "610250",
    "end": "615589"
  },
  {
    "text": "underscores built-in functions to the object your introspect and in this case there's only about twelve of them or so",
    "start": "615589",
    "end": "622310"
  },
  {
    "text": "they're not too bad ISO format you can specify a separator it returns a string",
    "start": "622310",
    "end": "628250"
  },
  {
    "text": "and ISO 8601 format separators use the separate the year from the time defaults",
    "start": "628250",
    "end": "633950"
  },
  {
    "text": "to T yeah yes argh V is always filled",
    "start": "633950",
    "end": "640010"
  },
  {
    "text": "with whatever the command-line arguments we're that were passed to the script when it executes and note in an interactive interpreter",
    "start": "640010",
    "end": "647829"
  },
  {
    "text": "there Nia I told you wrong there is no aargh see and my interactive interpreter there is no script it's the name of the",
    "start": "651519",
    "end": "657079"
  },
  {
    "text": "interpreter if you're actually running a script it'll always the first command allows be the name of the interpreter",
    "start": "657079",
    "end": "662690"
  },
  {
    "text": "and there is no argh seat which strikes me is really dumb and I'm kind of convinced that there used to be but you",
    "start": "662690",
    "end": "668269"
  },
  {
    "text": "can use the built in function lengths Elian to tell you how long a list is ok",
    "start": "668269",
    "end": "677720"
  },
  {
    "text": "so let's talk about some more complicated types container types we've",
    "start": "677720",
    "end": "686570"
  },
  {
    "text": "already talked a little bit about lists the syntax for lists is to put square brackets around a comma separated list",
    "start": "686570",
    "end": "692690"
  },
  {
    "text": "of values lists are mutable we talked about that as well",
    "start": "692690",
    "end": "698060"
  },
  {
    "text": "lists are ordered there is a concept of order which means that if you evaluate a",
    "start": "698060",
    "end": "704390"
  },
  {
    "text": "list twice in a row without doing anything to it it's items are in the same order that they used to be it's",
    "start": "704390",
    "end": "709550"
  },
  {
    "text": "important because not all collection types in Python are have a concept of order and lists can be heterogeneous you",
    "start": "709550",
    "end": "716930"
  },
  {
    "text": "don't have to store only one kind of item in a list at a time so this is perfectly legitimate",
    "start": "716930",
    "end": "728500"
  },
  {
    "text": "it's a list it's got three different types of variables in it you can",
    "start": "734470",
    "end": "741850"
  },
  {
    "text": "initialize lists a couple of different ways this is the normal way in which I would create a list just using the",
    "start": "741850",
    "end": "747459"
  },
  {
    "text": "brackets you can initialize empty lists with empty brackets with nothing inside them you can also use the built-in list",
    "start": "747459",
    "end": "754449"
  },
  {
    "text": "function which returns an empty list and",
    "start": "754449",
    "end": "759579"
  },
  {
    "text": "can also be used to convert some other type to a list so you notice I pass it a",
    "start": "759579",
    "end": "766420"
  },
  {
    "text": "string and it converts that to a list of single characters list the function will accept any type that supports iteration",
    "start": "766420",
    "end": "773529"
  },
  {
    "text": "which strings do and a bunch of other types do and we'll convert them to a list this will be important later on and",
    "start": "773529",
    "end": "782069"
  },
  {
    "text": "then the cool thing about lists is that they are iterable we can talk about positions in a list Python uses zero",
    "start": "782069",
    "end": "789759"
  },
  {
    "text": "position syntax and it uses brackets to",
    "start": "789759",
    "end": "796240"
  },
  {
    "text": "index into lists so X is equal to list asdf which gets converted into a list of",
    "start": "796240",
    "end": "804610"
  },
  {
    "text": "characters and I can index to an individual spot and list by appending",
    "start": "804610",
    "end": "812259"
  },
  {
    "text": "opening and closing brackets and a position to my list variable that makes",
    "start": "812259",
    "end": "817329"
  },
  {
    "text": "sense to everybody there's then that another programming languages some languages make the first spot be one but Python has the first",
    "start": "817329",
    "end": "823630"
  },
  {
    "text": "spot be zero in the true computer science fashion and the last spot be the length minus one you can add things to",
    "start": "823630",
    "end": "835180"
  },
  {
    "text": "lists and change their contents that's what mutable means so not only can we fetch something at a single",
    "start": "835180",
    "end": "843790"
  },
  {
    "text": "position we can also assign to it",
    "start": "843790",
    "end": "848699"
  },
  {
    "text": "it's mutable and lists have some utility",
    "start": "853430",
    "end": "860690"
  },
  {
    "text": "functions so I'm running the help function on my object which is of type",
    "start": "860690",
    "end": "867110"
  },
  {
    "text": "list so it'll show me the help layout for the list object and again I'm gonna",
    "start": "867110",
    "end": "873260"
  },
  {
    "text": "ignore the underscore methods at the beginning which list has a ton of and it usefully has append I can add things to",
    "start": "873260",
    "end": "881240"
  },
  {
    "text": "the end it has pop you can see a little down you can emulate stacks and queues with lists pretty trivially it has count",
    "start": "881240",
    "end": "891220"
  },
  {
    "text": "which is a search function not the length of the list lengths of lists are",
    "start": "891220",
    "end": "900680"
  },
  {
    "text": "determined by the built-in LAN which works on a bunch of different types",
    "start": "900680",
    "end": "907780"
  },
  {
    "text": "and we can also take things out of the list with the built in de L we talked about a little earlier so that count",
    "start": "914550",
    "end": "928019"
  },
  {
    "text": "function I just mentioned specifically because it doesn't return you the length of the list what it actually does is search for values in a list and tell you",
    "start": "928019",
    "end": "936870"
  },
  {
    "text": "how many there are so there's one D and",
    "start": "936870",
    "end": "943290"
  },
  {
    "text": "there's no and the built-in list type has a bunch of wonderful properties the",
    "start": "943290",
    "end": "950130"
  },
  {
    "text": "implementation is fascinating but it has really fast indexing and sorting",
    "start": "950130",
    "end": "955560"
  },
  {
    "text": "properties so it's really common to use lists as the main tool by which you process things and in place sort them or",
    "start": "955560",
    "end": "963149"
  },
  {
    "text": "search on them and those operations are extremely fast list is the most heavily optimized data structure and Python",
    "start": "963149",
    "end": "969209"
  },
  {
    "text": "thanks to Tim Peters so count says I'm",
    "start": "969209",
    "end": "976140"
  },
  {
    "text": "passing a value D and I'll look in my list and see how many times that value occurs so my list X it's searching yep",
    "start": "976140",
    "end": "987209"
  },
  {
    "text": "and similarly there was index",
    "start": "987209",
    "end": "992000"
  },
  {
    "text": "which will look at the values in my list and return me the position of the value if it's found and if it's not I'll get",
    "start": "997670",
    "end": "1007180"
  },
  {
    "text": "an error lists are iterable it's our first the",
    "start": "1007180",
    "end": "1014320"
  },
  {
    "text": "first iterable type we're going to talk about so we've looked at branching ifs and else the other common thing you're",
    "start": "1014320",
    "end": "1019750"
  },
  {
    "text": "gonna do in scripts to manage your program flow is loop and python supports",
    "start": "1019750",
    "end": "1027250"
  },
  {
    "text": "are a couple kinds of loops supports for loops and the syntax for for loops and",
    "start": "1027250",
    "end": "1032650"
  },
  {
    "text": "their semantics are different than you might be familiar with other languages for loops are specifically for indexing",
    "start": "1032650",
    "end": "1039750"
  },
  {
    "text": "specifically for looping over indexes into objects typically so if you're coming from AC e or java language you",
    "start": "1039750",
    "end": "1046900"
  },
  {
    "text": "might be used to a for loop to look something like this",
    "start": "1046900",
    "end": "1050610"
  },
  {
    "text": "if I could type right something like that there's a whole mini syntax in for loops so for loops are really simple in",
    "start": "1058940",
    "end": "1065780"
  },
  {
    "text": "Python it is for value in iterable and I'll say",
    "start": "1065780",
    "end": "1071390"
  },
  {
    "text": "X in this case and value is not the index value is the actual value so when",
    "start": "1071390",
    "end": "1082820"
  },
  {
    "text": "I run this for loop it's printing the actual contents of my list if you really",
    "start": "1082820",
    "end": "1091400"
  },
  {
    "text": "want the index when you're looping over iterables you can use the enumerate function",
    "start": "1091400",
    "end": "1098470"
  },
  {
    "text": "which returns things two at a time we",
    "start": "1104820",
    "end": "1110040"
  },
  {
    "text": "turns a pair of the key and the value",
    "start": "1110040",
    "end": "1113540"
  },
  {
    "text": "but knowing the index of the thing in the list turns out to be a little less important in Python than in lots of",
    "start": "1115490",
    "end": "1121080"
  },
  {
    "text": "other languages because of the richness of the built-in mmhmm yep",
    "start": "1121080",
    "end": "1128210"
  },
  {
    "text": "so count is how many times does the value I'm looking for occur in my list so here's that makes sense there's two",
    "start": "1129860",
    "end": "1141930"
  },
  {
    "text": "zeros and index will return the first",
    "start": "1141930",
    "end": "1150180"
  },
  {
    "text": "occurrence if there is one otherwise it will throw an error yeah so let's go back over the for loops real quickly the",
    "start": "1150180",
    "end": "1157800"
  },
  {
    "text": "first one that I did is this one and the syntax is straightforward right it's a",
    "start": "1157800",
    "end": "1163500"
  },
  {
    "text": "multi-line statement so there's a colon at the end the bobby of the statement is indented which in this case is just one",
    "start": "1163500",
    "end": "1169110"
  },
  {
    "text": "line and it's printing the value we're looping over an iterable and when we loop over and it will by default we just get each of alyou one at a time but we",
    "start": "1169110",
    "end": "1176100"
  },
  {
    "text": "don't know what position that value is and we could look it up with the index function but if for some reason you",
    "start": "1176100",
    "end": "1181560"
  },
  {
    "text": "wanted to know what the index did everything was as you loop through there is a built-in function frequently used",
    "start": "1181560",
    "end": "1188040"
  },
  {
    "text": "called enumerate that takes an iterable and instead of just giving you a value gives you the position and the value of",
    "start": "1188040",
    "end": "1194730"
  },
  {
    "text": "the index and the value and when I ran this loop then yeah when I ran this loop",
    "start": "1194730",
    "end": "1200220"
  },
  {
    "text": "then instead of just printing the values like it did the first time it prints",
    "start": "1200220",
    "end": "1205470"
  },
  {
    "text": "first the index which is K and I couldn't say I instead of K I suppose it's not really a key it's an index and",
    "start": "1205470",
    "end": "1212090"
  },
  {
    "text": "the value so we'll talk about all the built-in functions at some point there's",
    "start": "1212090",
    "end": "1217680"
  },
  {
    "text": "yeah there's about 60 built-ins and you really need to know about 25 or 30 of",
    "start": "1217680",
    "end": "1222750"
  },
  {
    "text": "them and we will tour Python standard library that has a bunch of additional",
    "start": "1222750",
    "end": "1227820"
  },
  {
    "text": "stuff the built-ins are things you don't have to import to use they're just there and if you look at",
    "start": "1227820",
    "end": "1234529"
  },
  {
    "text": "there's a special module called built-in you don't need to explicitly import",
    "start": "1241810",
    "end": "1246890"
  },
  {
    "text": "anything that's built-in hence the name built-in but if you wanted to see",
    "start": "1246890",
    "end": "1252850"
  },
  {
    "text": "everything that's built in you could look at the attributes of the built-in",
    "start": "1260050",
    "end": "1265400"
  },
  {
    "text": "module okay there's a hundred and fifty",
    "start": "1265400",
    "end": "1273860"
  },
  {
    "text": "built-in things that also includes all the values that are built in as far as built-in functions there's you know 30",
    "start": "1273860",
    "end": "1280190"
  },
  {
    "text": "important ones",
    "start": "1280190",
    "end": "1282700"
  },
  {
    "text": "yeah I could use help on it as well",
    "start": "1292130",
    "end": "1296500"
  },
  {
    "text": "which is really long because it's describing everything it's describing every object in there as well as listing",
    "start": "1298870",
    "end": "1305299"
  },
  {
    "text": "every object they're just lists the objects okay and you could look it's",
    "start": "1305299",
    "end": "1311690"
  },
  {
    "text": "page 13 in your curriculum if you want to follow along at the simple looping",
    "start": "1311690",
    "end": "1317960"
  },
  {
    "text": "that we're talking about there's in addition to a for loop there's a while loop built into Python people familiar",
    "start": "1317960",
    "end": "1326419"
  },
  {
    "text": "with other programming languages what's the difference between a for loop and a while loop yeah so while loop you're",
    "start": "1326419",
    "end": "1331730"
  },
  {
    "text": "checking a condition and you may not know how many times you want to execute for loops are typically used when you know exactly how many times you want to",
    "start": "1331730",
    "end": "1338840"
  },
  {
    "text": "run or you're enumerated over something that has a predefined length so while",
    "start": "1338840",
    "end": "1344419"
  },
  {
    "text": "loops could potentially run without ever stopping which is sometimes useful and",
    "start": "1344419",
    "end": "1350320"
  },
  {
    "text": "Wiles are just like if statements they",
    "start": "1350320",
    "end": "1356210"
  },
  {
    "text": "take some sort of boolean value not necessarily an interval so we were looping over X with for if I do while X",
    "start": "1356210",
    "end": "1365270"
  },
  {
    "text": "as long as X had something in it my while loop would run forever because it's just evaluating the boolean this of",
    "start": "1365270",
    "end": "1370850"
  },
  {
    "text": "X it's not actually iterating it it's a while length X",
    "start": "1370850",
    "end": "1378519"
  },
  {
    "text": "and pop removes the top most first item in my list so that works while length x",
    "start": "1388850",
    "end": "1396170"
  },
  {
    "text": "the first time it runs the length function on my list X which presumably had some stuff in it therefore length is greater than zero",
    "start": "1396170",
    "end": "1402470"
  },
  {
    "text": "therefore my while condition is true that runs the body of the loop I pop something I print X zero zero and five",
    "start": "1402470",
    "end": "1412210"
  },
  {
    "text": "and the little nine in there is the return value of x dot pop and my",
    "start": "1412210",
    "end": "1417710"
  },
  {
    "text": "interactive console is automatically showing me the value of every statement that I run I wouldn't get that out but",
    "start": "1417710",
    "end": "1424040"
  },
  {
    "text": "if I ran this as a script it runs again length of X and length of X is shorter but there's still something in it a",
    "start": "1424040",
    "end": "1429920"
  },
  {
    "text": "couple of three values I pop something off it prints the thing that I popped",
    "start": "1429920",
    "end": "1436670"
  },
  {
    "text": "off there are five and prints X which now has just zero and zero and so forth",
    "start": "1436670",
    "end": "1442910"
  },
  {
    "text": "until my container is empty in which case length of X returns zero which is a true fie value of zero and",
    "start": "1442910",
    "end": "1450080"
  },
  {
    "text": "false and my while loop stops running so while loops like if statements it's a",
    "start": "1450080",
    "end": "1455930"
  },
  {
    "text": "multi-line statement it in ends in a colon there's an indented body underneath there's no parentheses around",
    "start": "1455930",
    "end": "1461540"
  },
  {
    "text": "the boolean condition necessary those are optional and that's all for a while",
    "start": "1461540",
    "end": "1471460"
  },
  {
    "text": "yeah and actually it's popping from the end of the list so it by default is acting like a queue but there's",
    "start": "1471460",
    "end": "1477410"
  },
  {
    "text": "built-ins on the there's there's",
    "start": "1477410",
    "end": "1486860"
  },
  {
    "text": "built-in functions to treat lists as though they were stacks or as though they were queues first in first out or",
    "start": "1486860",
    "end": "1491870"
  },
  {
    "text": "last in first out either way so you can emulate stack or queue behavior with a list pretty trivially the other cool",
    "start": "1491870",
    "end": "1500750"
  },
  {
    "text": "thing about lists is they have a whole mini syntax built around those brackets",
    "start": "1500750",
    "end": "1507100"
  },
  {
    "text": "the next thing we're gonna do is a lab we're going to iterate over a list and explore the mini syntax around brackets",
    "start": "1507100",
    "end": "1514430"
  },
  {
    "text": "and this is somewhat unique to Python as far as I know lots of other languages",
    "start": "1514430",
    "end": "1520280"
  },
  {
    "text": "you're familiar with have bracket based indexing of things let's go ahead",
    "start": "1520280",
    "end": "1526220"
  },
  {
    "text": "and give ourselves a list using a built-in function range is a built-in",
    "start": "1526220",
    "end": "1533750"
  },
  {
    "text": "function and it returns a list from the start value to just before the end value",
    "start": "1533750",
    "end": "1540669"
  },
  {
    "text": "so I have the value 0 through 9 in my list and so far we've looked at indexing",
    "start": "1540669",
    "end": "1547370"
  },
  {
    "text": "to a particular position and that works our bracket our brackets can take three",
    "start": "1547370",
    "end": "1555590"
  },
  {
    "text": "values separated by colons to index and they can take positive and negative",
    "start": "1555590",
    "end": "1561440"
  },
  {
    "text": "numbers and figuring out what all that means can be a little challenging I'll",
    "start": "1561440",
    "end": "1568639"
  },
  {
    "text": "start with the easy ones the first number you pass a bracket is the starting position and if you supply an",
    "start": "1568639",
    "end": "1576409"
  },
  {
    "text": "ending position instead of returning a single piece of the index a single value",
    "start": "1576409",
    "end": "1581720"
  },
  {
    "text": "it returns a slice",
    "start": "1581720",
    "end": "1585309"
  },
  {
    "text": "and it's it's nice that I've got the numbers synchronized up here it's returning me the slice that is starting",
    "start": "1598730",
    "end": "1606739"
  },
  {
    "text": "at the fifth position zero one two three four five through ending in the seventh",
    "start": "1606739",
    "end": "1616669"
  },
  {
    "text": "position and you can think about the positions as the commas in the list",
    "start": "1616669",
    "end": "1622519"
  },
  {
    "text": "they're sort of between the values so I said five through seven and that only",
    "start": "1622519",
    "end": "1627889"
  },
  {
    "text": "gets me five and six it does not include",
    "start": "1627889",
    "end": "1633470"
  },
  {
    "text": "the seven the seventh position is right here yeah if you if you think about it",
    "start": "1633470",
    "end": "1639649"
  },
  {
    "text": "as the position of the item itself then the slicing index is returning one",
    "start": "1639649",
    "end": "1645799"
  },
  {
    "text": "before the the last one is not included it's a non-inclusive know the last",
    "start": "1645799",
    "end": "1652429"
  },
  {
    "text": "number is the position no no length of the slice if I say zero through one I",
    "start": "1652429",
    "end": "1662749"
  },
  {
    "text": "get that single item I get that single item if I say 1 through - I'm not",
    "start": "1662749",
    "end": "1671269"
  },
  {
    "text": "getting a slice that's too long I'm getting a slice that's made up by taking all the values between the first",
    "start": "1671269",
    "end": "1677629"
  },
  {
    "text": "position and the second position I can",
    "start": "1677629",
    "end": "1685220"
  },
  {
    "text": "specify up to three numbers but we're not there yet okay so there's one more",
    "start": "1685220",
    "end": "1691309"
  },
  {
    "text": "number I can specify I can leave off anything I want to so if I say just X 1",
    "start": "1691309",
    "end": "1697909"
  },
  {
    "text": "that's the one position if I say X : and don't fill in the second number it is",
    "start": "1697909",
    "end": "1703609"
  },
  {
    "text": "assumed I mean to the end of the list so that's how to get all the list except",
    "start": "1703609",
    "end": "1709220"
  },
  {
    "text": "for the first item I have a slice that starts at the first position so right at that comma and I left off the ending",
    "start": "1709220",
    "end": "1717200"
  },
  {
    "text": "condition but it would be the length of the list so it would be the last comma here that's not actually printing out",
    "start": "1717200",
    "end": "1722899"
  },
  {
    "text": "and similarly if I leave off the first number it assumes you're starting at the",
    "start": "1722899",
    "end": "1729559"
  },
  {
    "text": "beginning of the list so I'm getting from the zeroeth position",
    "start": "1729559",
    "end": "1736090"
  },
  {
    "text": "which again isn't printed through the one to three third position 0 1 2 0 1 &",
    "start": "1736090",
    "end": "1751420"
  },
  {
    "text": "2 here 3 positions get the actual list I'm working on and my numbers can be",
    "start": "1751420",
    "end": "1757810"
  },
  {
    "text": "positive or negative",
    "start": "1757810",
    "end": "1760650"
  },
  {
    "text": "so anybody want to speculate about what that will do I know I have a smiley face",
    "start": "1768810",
    "end": "1777450"
  },
  {
    "text": "in brackets doesn't seem wrong that this evaluates so I left off the first number",
    "start": "1777450",
    "end": "1785070"
  },
  {
    "text": "and it would be by default that begins the list let's go ahead and put that in so it's gonna start at zero the second",
    "start": "1785070",
    "end": "1791850"
  },
  {
    "text": "number represents the position that's gonna go to and if you specify negative numbers it starts at the end and counts",
    "start": "1791850",
    "end": "1798000"
  },
  {
    "text": "backwards so this is all the list except for the last item and it's the exact",
    "start": "1798000",
    "end": "1805470"
  },
  {
    "text": "same thing as saying the second position",
    "start": "1805470",
    "end": "1817290"
  },
  {
    "text": "in my slice is the length of the list minus one well I can just leave off that",
    "start": "1817290",
    "end": "1823080"
  },
  {
    "text": "length of the list and supply the minus one so again if you think about other",
    "start": "1823080",
    "end": "1831900"
  },
  {
    "text": "languages you've used where you have lists and very frequently you do want things like give me everything except for the last one",
    "start": "1831900",
    "end": "1837000"
  },
  {
    "text": "or give me everything except for the first one there's a built in mini language between brackets there's and",
    "start": "1837000",
    "end": "1844010"
  },
  {
    "text": "the first condition can be negative how",
    "start": "1844010",
    "end": "1850620"
  },
  {
    "text": "about that one what does that do the first position is going to start at",
    "start": "1850620",
    "end": "1857960"
  },
  {
    "text": "the end and count backwards so let me get get my actual list here so it's",
    "start": "1857960",
    "end": "1869570"
  },
  {
    "text": "starting here on two three four then the second number is left off and by default",
    "start": "1869570",
    "end": "1876499"
  },
  {
    "text": "that would be the end of the list so this will get me the last four items in",
    "start": "1876499",
    "end": "1881929"
  },
  {
    "text": "my list and I could give them both",
    "start": "1881929",
    "end": "1887480"
  },
  {
    "text": "negative numbers if my order works out and say start from four back and go to",
    "start": "1887480",
    "end": "1893179"
  },
  {
    "text": "two from the end crazy right okay there's one negative numbers are",
    "start": "1893179",
    "end": "1904429"
  },
  {
    "text": "counting from the end of the list positive numbers are counting from the beginning of the list yep one more",
    "start": "1904429",
    "end": "1914559"
  },
  {
    "text": "semicolon and it's always implied and",
    "start": "1914559",
    "end": "1920509"
  },
  {
    "text": "it's always one by default but I can supply it and say to and in fact let's",
    "start": "1920509",
    "end": "1926450"
  },
  {
    "text": "do this so it is very good I have a",
    "start": "1926450",
    "end": "1934039"
  },
  {
    "text": "start position of default because I didn't supply it that would be the number before the first : looks good and",
    "start": "1934039",
    "end": "1939590"
  },
  {
    "text": "supply it I have an ending position of default that would be the end of the list by default I didn't supply it but I",
    "start": "1939590",
    "end": "1946669"
  },
  {
    "text": "could and then to is how I'll increment",
    "start": "1946669",
    "end": "1952730"
  },
  {
    "text": "and this is getting me every other item in my list usually if I iterate over a",
    "start": "1952730",
    "end": "1960379"
  },
  {
    "text": "list I get every item I can get every other item or every third item or every",
    "start": "1960379",
    "end": "1968330"
  },
  {
    "text": "fourth item",
    "start": "1968330",
    "end": "1970720"
  },
  {
    "text": "unfortunately negative numbers make no sense in this context cuz I don't think I could take one more thing between",
    "start": "1982750",
    "end": "1987919"
  },
  {
    "text": "square brackets so three numbers what's",
    "start": "1987919",
    "end": "1994700"
  },
  {
    "text": "the first number represent starting point starting location and if all I",
    "start": "1994700",
    "end": "2000309"
  },
  {
    "text": "specify is the first number I just get a value not a slice I have to specify a",
    "start": "2000309",
    "end": "2005950"
  },
  {
    "text": "second value at least by putting in com a colon even if I don't say what the number is but the second number is the",
    "start": "2005950",
    "end": "2014019"
  },
  {
    "text": "ending location be false to end the list and the third number is how I increment",
    "start": "2014019",
    "end": "2020220"
  },
  {
    "text": "every one by default but every other etc it's a whole mini syntax between",
    "start": "2020220",
    "end": "2026980"
  },
  {
    "text": "brackets and it's super incredibly useful as you know if you've done this processing at all lots of stuff that",
    "start": "2026980",
    "end": "2032950"
  },
  {
    "text": "it's several function calls and other languages can be reduced to one bracket expression that you have to think about",
    "start": "2032950",
    "end": "2038080"
  },
  {
    "text": "for just a second so go ahead and make",
    "start": "2038080",
    "end": "2044350"
  },
  {
    "text": "yourself a new file call it class PI I would like you to put in that file a",
    "start": "2044350",
    "end": "2050260"
  },
  {
    "text": "list that has all the names of your classmates print off the list with a for",
    "start": "2050260",
    "end": "2056500"
  },
  {
    "text": "loop so when you run it it should print all the names one at a time in a for",
    "start": "2056500",
    "end": "2061690"
  },
  {
    "text": "loop and that much of the lab is in your",
    "start": "2061690",
    "end": "2068618"
  },
  {
    "text": "textbook it's lab 5.2 and it once you just print",
    "start": "2068619",
    "end": "2075669"
  },
  {
    "text": "hello name we're name is the first name and then I'd like you to do three extra",
    "start": "2075669",
    "end": "2086888"
  },
  {
    "text": "things so go ahead and follow the instructions all the first names you can look at",
    "start": "2086889",
    "end": "2092740"
  },
  {
    "text": "people's name tags print off each name hello name in a for loop and then print",
    "start": "2092740",
    "end": "2097930"
  },
  {
    "text": "the last name in your list not the last name but the last item in your list",
    "start": "2097930",
    "end": "2104080"
  },
  {
    "text": "print the last two items in your list and print every other item in your list",
    "start": "2104080",
    "end": "2109390"
  },
  {
    "text": "also using for loops and using our spring slicing notation oh and there's one thing I forgot to mention",
    "start": "2109390",
    "end": "2116140"
  },
  {
    "text": "here which is it's kind of implied but",
    "start": "2116140",
    "end": "2122280"
  },
  {
    "text": "even if we're just specifying one position ie we don't want a slice we can still use negative numbers so there you",
    "start": "2122280",
    "end": "2131770"
  },
  {
    "text": "go for free the last item in your list is negative one so it varies I'll show",
    "start": "2131770",
    "end": "2144460"
  },
  {
    "text": "you a pet that is the preferred style for everything a lot of the standard library comes from ports from other",
    "start": "2144460",
    "end": "2149560"
  },
  {
    "text": "languages like the unit testing libraries a portage a unit and so the unit test library uses Java standards",
    "start": "2149560",
    "end": "2154990"
  },
  {
    "text": "which is all camel case in general Python prefers underscore and lowercase particularly for variables but it's",
    "start": "2154990",
    "end": "2161680"
  },
  {
    "text": "really common to use camel case for classes and objects and all uppercase",
    "start": "2161680",
    "end": "2166750"
  },
  {
    "text": "for things intended to be consonants although python does not have a constant type yep the last name in your list the",
    "start": "2166750",
    "end": "2176830"
  },
  {
    "text": "last two names in your list and every other name in your list all in one",
    "start": "2176830",
    "end": "2182530"
  },
  {
    "text": "program so when you run it it should print out hello each of the names in the",
    "start": "2182530",
    "end": "2187570"
  },
  {
    "text": "class and then hello the last name hello last two names hello every other name",
    "start": "2187570",
    "end": "2193080"
  },
  {
    "text": "this would be a good time actually while people are hitting labs I pull up a blog post earlier that I had put up from a",
    "start": "2193080",
    "end": "2199510"
  },
  {
    "text": "previous class of additional resources you should know and these might be useful as you're going through and doing",
    "start": "2199510",
    "end": "2204700"
  },
  {
    "text": "labs I personally am a big fan of Python on a nut shell which is a desktop",
    "start": "2204700",
    "end": "2209830"
  },
  {
    "text": "reference to the Python language and good chunk of the standard library Alex Martelli and one of the Python gurus",
    "start": "2209830",
    "end": "2216600"
  },
  {
    "text": "there are other books that are online and that are more tutorial based and I mentioned a couple of them putting the",
    "start": "2216600",
    "end": "2222970"
  },
  {
    "text": "official Python tutorial and Ivan the Python code like a Python ista you should read when you've completed this",
    "start": "2222970",
    "end": "2228670"
  },
  {
    "text": "course and we'll probably talk about the last day a little bit and also Doug Hellmann's Python module of the week is",
    "start": "2228670",
    "end": "2234250"
  },
  {
    "text": "now out in book form it's like 1,500 pages it's like this gigantic book but just to get a guided hands-on tour of",
    "start": "2234250",
    "end": "2241110"
  },
  {
    "text": "Python standard Lib those are great but in general python has really good documentation and so you shouldn't",
    "start": "2241110",
    "end": "2247690"
  },
  {
    "text": "restrict yourself to just the help function you can go and look at pythons built-in",
    "start": "2247690",
    "end": "2254109"
  },
  {
    "text": "documentation and for instance here's a list of all the built-in functions and",
    "start": "2254109",
    "end": "2260500"
  },
  {
    "text": "if you click on one it's actually the same content as help but frequently there will be some more tutorial like",
    "start": "2260500",
    "end": "2266079"
  },
  {
    "text": "usage with it I do mention the built-ins",
    "start": "2266079",
    "end": "2272230"
  },
  {
    "text": "and the keyword modules which will give you a list of all the built-ins and keywords and some tools which those of",
    "start": "2272230",
    "end": "2277960"
  },
  {
    "text": "you who are on Windows should think about using a replacement console possibly I got a good question from you",
    "start": "2277960",
    "end": "2286089"
  },
  {
    "text": "Lee who's playing more with the first example but to change the type of objects a lot of languages use a keyword",
    "start": "2286089",
    "end": "2292359"
  },
  {
    "text": "to cast the type from one to another and Python actually uses functions the built-in functions and they're named",
    "start": "2292359",
    "end": "2298180"
  },
  {
    "text": "after the type so there's a function int that takes a value and attempts to make an integer out of it pumpkin float",
    "start": "2298180",
    "end": "2303190"
  },
  {
    "text": "there's a function STR for Strings boo bol for boolean's and they're all",
    "start": "2303190",
    "end": "2310210"
  },
  {
    "text": "built-ins that list of built-ins that I pulled up moments ago",
    "start": "2310210",
    "end": "2320789"
  },
  {
    "text": "okay so everybody's completed that alphabetize your list and don't",
    "start": "2327740",
    "end": "2334920"
  },
  {
    "text": "alphabetize it by going in and retyping anything so I said that the built-in",
    "start": "2334920",
    "end": "2345360"
  },
  {
    "text": "functions or the built-in list type has a concept of order it also has a",
    "start": "2345360",
    "end": "2353730"
  },
  {
    "text": "built-in sort function and there's ways to pass your own comparator to the built-in sort function but by default it",
    "start": "2353730",
    "end": "2360270"
  },
  {
    "text": "will try and sort the list if the list is homogeneous or if all the types on the list provide their own comparison",
    "start": "2360270",
    "end": "2366480"
  },
  {
    "text": "functions it can successfully sort and it's not very interesting to sort a list that was already sorted there's also a",
    "start": "2366480",
    "end": "2373710"
  },
  {
    "text": "reverse function which sorts it and then reverses the order",
    "start": "2373710",
    "end": "2380510"
  },
  {
    "text": "and it works on strings just goes by alphabetic case by default and note that",
    "start": "2396730",
    "end": "2401890"
  },
  {
    "text": "this is a destructive sort that's modifying your list in place so you have",
    "start": "2401890",
    "end": "2407020"
  },
  {
    "text": "a different list after you call the sort function than you do before it and a",
    "start": "2407020",
    "end": "2413170"
  },
  {
    "text": "couple of other notes about lists we probably should mention lists are",
    "start": "2413170",
    "end": "2419440"
  },
  {
    "text": "mutable types and we talked about this really early on but if I say Y is equal",
    "start": "2419440",
    "end": "2425890"
  },
  {
    "text": "to X I have two tags on the same",
    "start": "2425890",
    "end": "2431500"
  },
  {
    "text": "variable that variable is mutable so if",
    "start": "2431500",
    "end": "2441010"
  },
  {
    "text": "I change one I change the other what if I wanted a copy of the first list to be",
    "start": "2441010",
    "end": "2449079"
  },
  {
    "text": "able to modify a change maybe sort and not mess with the first one there's some",
    "start": "2449079",
    "end": "2455049"
  },
  {
    "text": "built-in functions for copying things in Python but actually the default way of copying things is this you'll see this",
    "start": "2455049",
    "end": "2465579"
  },
  {
    "text": "idiom very frequently I'm taking a slice of my list and it's a slice that starts from the beginning and goes to the end",
    "start": "2465579",
    "end": "2472329"
  },
  {
    "text": "and slices return copies so that if you take a slice and modify the slice you",
    "start": "2472329",
    "end": "2478630"
  },
  {
    "text": "don't modify the original so in this case now Y and X look like the same",
    "start": "2478630",
    "end": "2484450"
  },
  {
    "text": "thing but in fact are not so I made a",
    "start": "2484450",
    "end": "2493359"
  },
  {
    "text": "copy with just brackets : and that's implying the beginning of the list to",
    "start": "2493359",
    "end": "2499210"
  },
  {
    "text": "the end of the list return me a slice that's as long as the whole list it's a copy make sense yeah so and that's one of the",
    "start": "2499210",
    "end": "2506589"
  },
  {
    "text": "piece of syntax that we've been using and not explaining but dot is the dereference operator for python and in",
    "start": "2506589",
    "end": "2514270"
  },
  {
    "text": "Python everything is an object so in a lot of languages you have a distinction",
    "start": "2514270",
    "end": "2520750"
  },
  {
    "text": "between simple types and complex types that might have additional things besides their value but everything even",
    "start": "2520750",
    "end": "2527589"
  },
  {
    "text": "simple types in Python actually are and they have a multiplicity of built-in",
    "start": "2527589",
    "end": "2533410"
  },
  {
    "text": "functions on them so yes if X is a list of names X has a member function just",
    "start": "2533410",
    "end": "2543609"
  },
  {
    "text": "because it is a list called sort they",
    "start": "2543609",
    "end": "2555520"
  },
  {
    "text": "are part of the list and notice there's not actually that much stuff to know here I can't just highlight the last",
    "start": "2555520",
    "end": "2561640"
  },
  {
    "text": "column for a list you need to know append it adds it to the end count counts how many instances of a value",
    "start": "2561640",
    "end": "2568410"
  },
  {
    "text": "extend lets you append one list to another so a pin just gives you one more",
    "start": "2568410",
    "end": "2574420"
  },
  {
    "text": "list and let's look at that really quickly",
    "start": "2574420",
    "end": "2579720"
  },
  {
    "text": "with me so far right I just added one more vitae my list if I wanted to add another list that I had this doesn't do",
    "start": "2584920",
    "end": "2593680"
  },
  {
    "text": "what I want it to do it means that the last position is a value that has two",
    "start": "2593680",
    "end": "2601570"
  },
  {
    "text": "things is a list itself what I wanted to do I would have to use extend and it",
    "start": "2601570",
    "end": "2617230"
  },
  {
    "text": "copies all the items from the iterable you give it and adds them to the list I",
    "start": "2617230",
    "end": "2627119"
  },
  {
    "text": "just did the range to get me back my original list without the stuff in it so all range does is give me a list of numbers index we've talked about insert",
    "start": "2627510",
    "end": "2639120"
  },
  {
    "text": "here's my list",
    "start": "2639300",
    "end": "2642690"
  },
  {
    "text": "it's position first I think yeah nope",
    "start": "2649120",
    "end": "2657550"
  },
  {
    "text": "list is built-in ex inserted or insert",
    "start": "2657550",
    "end": "2668290"
  },
  {
    "text": "inserted at a particular place there's pop removed reverse and sort which we've talked about we've covered everything built-in on lists and let me look at",
    "start": "2668290",
    "end": "2674920"
  },
  {
    "text": "your problem and then there's one other piece of syntax to know about lists okay",
    "start": "2674920",
    "end": "2684010"
  },
  {
    "text": "so if you don't specify anything and just enter it is a syntax error because",
    "start": "2684010",
    "end": "2689560"
  },
  {
    "text": "you have to specify the name that you want to dereference it by when I'm getting extra stuff I'm hitting X and",
    "start": "2689560",
    "end": "2695380"
  },
  {
    "text": "then tab and your interactive will autocomplete and this gives you a list of all the things that you could say",
    "start": "2695380",
    "end": "2700480"
  },
  {
    "text": "here like insert is one of those things so up here I hit tab and in my console",
    "start": "2700480",
    "end": "2707920"
  },
  {
    "text": "instead of showing a little pop-up like that it prints out the whole list but that's just a this is not specific to",
    "start": "2707920",
    "end": "2714190"
  },
  {
    "text": "Python a specific type ipython which is a interactive console and this is basically doing the same thing I hit tab",
    "start": "2714190",
    "end": "2720310"
  },
  {
    "text": "and here you get a list instead of printing it out this assumes you're running under a console only terminal",
    "start": "2720310",
    "end": "2725860"
  },
  {
    "text": "and so it just prints out everything",
    "start": "2725860",
    "end": "2729060"
  },
  {
    "text": "what if you wanted to check and see if something was in a list how could you do",
    "start": "2731220",
    "end": "2736420"
  },
  {
    "text": "that if I wanted to make sure that yemm's name was in my list of classmates",
    "start": "2736420",
    "end": "2742810"
  },
  {
    "text": "how could I do that I could do count and",
    "start": "2742810",
    "end": "2748450"
  },
  {
    "text": "check and see if the value of count was greater than zero so I could do names count yem greater than zero that would",
    "start": "2748450",
    "end": "2756730"
  },
  {
    "text": "work in an if statement the",
    "start": "2756730",
    "end": "2760440"
  },
  {
    "text": "preferred way to do this and see if I still have while and is to use the in",
    "start": "2764609",
    "end": "2773710"
  },
  {
    "text": "operator and the in operator returns",
    "start": "2773710",
    "end": "2780099"
  },
  {
    "text": "true or false and it's just presents and",
    "start": "2780099",
    "end": "2786779"
  },
  {
    "text": "instead of doing if y dot count simian",
    "start": "2786779",
    "end": "2792990"
  },
  {
    "text": "greater than 0 as my if statement which",
    "start": "2792990",
    "end": "2803109"
  },
  {
    "text": "does work but you read that and it's not necessarily fluent if I just say if",
    "start": "2803109",
    "end": "2809609"
  },
  {
    "text": "simian in Y that's a lot more fluent and",
    "start": "2809609",
    "end": "2819160"
  },
  {
    "text": "the in operator supports a variety of types as we'll see",
    "start": "2819160",
    "end": "2823680"
  },
  {
    "text": "like strings so I'm checking for the presence of a given character in a string okay do we have enough time to",
    "start": "2834270",
    "end": "2842310"
  },
  {
    "text": "tackle strings in a little more detail yeah we do we got 10 minutes to lunch time thoughts questions ok so insert",
    "start": "2842310",
    "end": "2855510"
  },
  {
    "text": "takes a position and a value so you need to the position and you can put 0 if you",
    "start": "2855510",
    "end": "2861450"
  },
  {
    "text": "want to insert it at the top which is the implementation of push if you're",
    "start": "2861450",
    "end": "2866940"
  },
  {
    "text": "looking for stacks but I should say while the Python lists they're really",
    "start": "2866940",
    "end": "2873570"
  },
  {
    "text": "ridiculously performant it's worthwhile if you're a C programmer to read Tim Peters implementation of the sorting features in lists because it's actually",
    "start": "2873570",
    "end": "2880920"
  },
  {
    "text": "really cool several algorithms implemented depending on like how big the list is and whether it's a heterogeneous or not about the only",
    "start": "2880920",
    "end": "2889380"
  },
  {
    "text": "performance gotcha is actually inserting at the beginning of lists if you have very large lists inserting at the",
    "start": "2889380",
    "end": "2895200"
  },
  {
    "text": "beginning of list is an expensive operation okay so strings can we talk about",
    "start": "2895200",
    "end": "2901950"
  },
  {
    "text": "strings a little bit more we actually",
    "start": "2901950",
    "end": "2907650"
  },
  {
    "text": "haven't done too much with strings we've specified that we can use single quotes double quotes or triple quotes on",
    "start": "2907650",
    "end": "2914670"
  },
  {
    "text": "strings I forgot to mention the best part about or the reason for triple",
    "start": "2914670",
    "end": "2922200"
  },
  {
    "text": "quotes and I should mention a couple other pieces of Python syntax so the",
    "start": "2922200",
    "end": "2927690"
  },
  {
    "text": "reason for triple quotes among other things is a triple quoted string can span multiple lines by default strings",
    "start": "2927690",
    "end": "2935520"
  },
  {
    "text": "can only span one line one and it complains syntax error I don't have a",
    "start": "2935520",
    "end": "2941099"
  },
  {
    "text": "closing quote if I want to have a long string that has a lot more content",
    "start": "2941099",
    "end": "2951020"
  },
  {
    "text": "I can use triple boots and it does in",
    "start": "2952510",
    "end": "2960070"
  },
  {
    "text": "fact have that embedded new line in it triple quotes are also used for",
    "start": "2960070",
    "end": "2968830"
  },
  {
    "text": "documentation where do you suppose this",
    "start": "2968830",
    "end": "2976600"
  },
  {
    "text": "documentation comes from it actually comes from Python source and the Python syntax specifies some places you can put",
    "start": "2976600",
    "end": "2983230"
  },
  {
    "text": "plain strings they're not assigned to any variables and they will actually be stored on the object that contains them",
    "start": "2983230",
    "end": "2991170"
  },
  {
    "text": "so for instance the first thing in any",
    "start": "2991170",
    "end": "2997240"
  },
  {
    "text": "Python program can be a triple quoted string",
    "start": "2997240",
    "end": "3002839"
  },
  {
    "text": "that briefly describes the script and that's not a syntax error and there are",
    "start": "3009140",
    "end": "3014630"
  },
  {
    "text": "actually ways of programmatically retrieving that you can also use this is called dock strings you can also use",
    "start": "3014630",
    "end": "3019640"
  },
  {
    "text": "dock strings when we get to you can use dock strings in classes and methods when we get to functions and again they'll be",
    "start": "3019640",
    "end": "3026329"
  },
  {
    "text": "remembered and can be retrieved so all the stuff you're reading when you use the help function is actually embedded via dock strings right in your code and",
    "start": "3026329",
    "end": "3033559"
  },
  {
    "text": "we'll have a future lab where we'll note you can also embed parsable and runnable",
    "start": "3033559",
    "end": "3038779"
  },
  {
    "text": "tests in your dock strings that verify that the implementation of your program is correct so doc string is a triple",
    "start": "3038779",
    "end": "3047150"
  },
  {
    "text": "coded string does not assign to anything and at a plot that appears in a few key places and the key places are the first",
    "start": "3047150",
    "end": "3054019"
  },
  {
    "text": "line of any namespace so the first line of my script I have a triple quoted",
    "start": "3054019",
    "end": "3059299"
  },
  {
    "text": "string that's actually significant I'm not assigning it to any variable but it gets assigned to the doc string variable",
    "start": "3059299",
    "end": "3065059"
  },
  {
    "text": "of my scripts namespace when I run the",
    "start": "3065059",
    "end": "3071180"
  },
  {
    "text": "program it doesn't appear you don't see it but my it's like a comment but",
    "start": "3071180",
    "end": "3076309"
  },
  {
    "text": "comments are thrown away when the program is compiled and this is actually saved and can be later retrieved so when",
    "start": "3076309",
    "end": "3083180"
  },
  {
    "text": "we use help we're looking at the doc strings that are embedded in the Python source code of the libraries so the",
    "start": "3083180",
    "end": "3092630"
  },
  {
    "text": "primary use of docstrings is to document your code in ways that are runtime in respectable because it is very common",
    "start": "3092630",
    "end": "3098630"
  },
  {
    "text": "for somebody to be poking around your Python library in the interactive console and they don't wanna have to go someplace else necessarily to read a",
    "start": "3098630",
    "end": "3104720"
  },
  {
    "text": "quick brief help they can just they can look at the documentation is actually part of your source code and is",
    "start": "3104720",
    "end": "3110869"
  },
  {
    "text": "retrievable at runtime so it's a really nice feature built in and there's a library to let you embed simple tests",
    "start": "3110869",
    "end": "3118460"
  },
  {
    "text": "that look like interactive console sessions that you can then run so you can say this function does this here's",
    "start": "3118460",
    "end": "3124609"
  },
  {
    "text": "an example of it running and the output should be and it'll run your doc tests and tell you that all of them are",
    "start": "3124609",
    "end": "3130069"
  },
  {
    "text": "working or not which as long as they enhance your documentation is a really useful is a",
    "start": "3130069",
    "end": "3135529"
  },
  {
    "text": "really useful tool it's not a full unit testing suite but it's a useful tool what else about strings here",
    "start": "3135529",
    "end": "3142990"
  },
  {
    "text": "let's talk about dicing and chopping strings up a little bit strings can be",
    "start": "3143620",
    "end": "3149690"
  },
  {
    "text": "indexed into although they're not mutable and we already know everything there is to know about indexing into",
    "start": "3149690",
    "end": "3156020"
  },
  {
    "text": "strings because it's just like lists my",
    "start": "3156020",
    "end": "3161510"
  },
  {
    "text": "name we can get a single position or you",
    "start": "3161510",
    "end": "3167510"
  },
  {
    "text": "can get the last character we can get a",
    "start": "3167510",
    "end": "3174980"
  },
  {
    "text": "slice just like lists same stuff works",
    "start": "3174980",
    "end": "3183470"
  },
  {
    "text": "on strings so again if you're comparing strings and you're you know looking for a prefix or something you can use the bracket mini",
    "start": "3183470",
    "end": "3190640"
  },
  {
    "text": "language to do that there's also split and join built-in functions for converting to and from",
    "start": "3190640",
    "end": "3196760"
  },
  {
    "text": "lists based on a delimiter so my name X",
    "start": "3196760",
    "end": "3205730"
  },
  {
    "text": "dot split and a by the way my ipython show ending with a question mark like",
    "start": "3205730",
    "end": "3211460"
  },
  {
    "text": "that is a shortcut for help X dot split",
    "start": "3211460",
    "end": "3216800"
  },
  {
    "text": "but that is a ipython ik specific built in don't expect it to work if you're not",
    "start": "3216800",
    "end": "3222200"
  },
  {
    "text": "running ipython not part of the language so help on X dot split it splits based",
    "start": "3222200",
    "end": "3228620"
  },
  {
    "text": "on a separator so X was my name and X",
    "start": "3228620",
    "end": "3234170"
  },
  {
    "text": "dot split and I'm passing it a separator value of a space returns a list with all",
    "start": "3234170",
    "end": "3242120"
  },
  {
    "text": "the values no separator and",
    "start": "3242120",
    "end": "3247690"
  },
  {
    "text": "all right so why is the list X is the name and if I wanted to go the other way",
    "start": "3253990",
    "end": "3260549"
  },
  {
    "text": "and what I'm doing yep and it's not",
    "start": "3267180",
    "end": "3275349"
  },
  {
    "text": "actually a pattern there is a red X version of split by the basic version of split is looking for a single character",
    "start": "3275349",
    "end": "3282930"
  },
  {
    "text": "and it did yes mm-hmm so I ended up with a list that doesn't",
    "start": "3283230",
    "end": "3290050"
  },
  {
    "text": "contain any spaces but contains each piece that was uh between the spaces yes",
    "start": "3290050",
    "end": "3303240"
  },
  {
    "text": "yes it's a list that contains two strings to go the other direction",
    "start": "3304650",
    "end": "3312390"
  },
  {
    "text": "this is a common idiom and it's kind of confusing",
    "start": "3314940",
    "end": "3320700"
  },
  {
    "text": "so the string type has a function split that splits a string by a separator the",
    "start": "3323649",
    "end": "3331399"
  },
  {
    "text": "string type also has a function join but in this case instead of taking a",
    "start": "3331399",
    "end": "3337779"
  },
  {
    "text": "separator it takes a list and it joins by the value of the string itself so",
    "start": "3337779",
    "end": "3343339"
  },
  {
    "text": "that line 17 there is really this Z equals a string and let's go ahead back",
    "start": "3343339",
    "end": "3349009"
  },
  {
    "text": "two spaces C join Y and if you remember Y was a list before so to go back to a",
    "start": "3349009",
    "end": "3356359"
  },
  {
    "text": "string inserting a separator between the positions in a list you use the",
    "start": "3356359",
    "end": "3363229"
  },
  {
    "text": "separator as a string and call join and this works as a shortcut because the",
    "start": "3363229",
    "end": "3373759"
  },
  {
    "text": "string literal there is converted to an object right away and the string literal has methods",
    "start": "3373759",
    "end": "3380738"
  },
  {
    "text": "so the first string that's inside double quotes is my separator and it does not",
    "start": "3385860",
    "end": "3391450"
  },
  {
    "text": "have to be a single character it could be anything and it'll take a list as an",
    "start": "3391450",
    "end": "3398140"
  },
  {
    "text": "argument and it'll put all the items in the list concatenate it together with the separator I specified and you will",
    "start": "3398140",
    "end": "3406540"
  },
  {
    "text": "even see sometimes this because you just",
    "start": "3406540",
    "end": "3412150"
  },
  {
    "text": "want all the stuff in a list joined together with nothing between it so I have an empty string as my separator so",
    "start": "3412150",
    "end": "3425800"
  },
  {
    "text": "I generally use single quote whenever I can because it's less keypresses I use double quotes sometimes for long",
    "start": "3425800",
    "end": "3436240"
  },
  {
    "text": "strings because I think maybe I'll type a single quote in it and triple quotes for what I want to span strings the",
    "start": "3436240",
    "end": "3443110"
  },
  {
    "text": "other thing is if you want",
    "start": "3443110",
    "end": "3446700"
  },
  {
    "text": "your slash ends",
    "start": "3467070",
    "end": "3470510"
  },
  {
    "text": "any PHP programmers here I thought I saw that on somebody's PHP makes the",
    "start": "3485150",
    "end": "3490980"
  },
  {
    "text": "difference between single quotes and double quotes as to whether or not it uses the escape character so when I say",
    "start": "3490980",
    "end": "3495990"
  },
  {
    "text": "slash in this is interpreting it as a newline and you'll notice both single quotes and double quote to do control",
    "start": "3495990",
    "end": "3501960"
  },
  {
    "text": "character interpolation slash in is a newline slash T is a tab if you're",
    "start": "3501960",
    "end": "3508200"
  },
  {
    "text": "familiar with them then this will make sense if you aren't familiar with them it won't make a lot of sense if you want to avoid interpolation you have to",
    "start": "3508200",
    "end": "3514500"
  },
  {
    "text": "specify that you have a raw string by prefixing your string with an R",
    "start": "3514500",
    "end": "3522200"
  },
  {
    "text": "so if you have a string that has a slash and a significant character and this",
    "start": "3528700",
    "end": "3534770"
  },
  {
    "text": "will bite you sometimes because that's",
    "start": "3534770",
    "end": "3540289"
  },
  {
    "text": "fine there is no slash D control character",
    "start": "3540289",
    "end": "3546160"
  },
  {
    "text": "but just by changing the next character there is a slash T there's a tab",
    "start": "3546160",
    "end": "3551890"
  },
  {
    "text": "suddenly you have a different string than you thought you're getting so if",
    "start": "3552190",
    "end": "3559220"
  },
  {
    "text": "you're concerned about embedding control characters when you're typing string literals you can prefix your string with",
    "start": "3559220",
    "end": "3565880"
  },
  {
    "text": "an R for raw and you can also do that for a Unicode entry if you're doing slash and exited hexadecimal unicode's",
    "start": "3565880",
    "end": "3574960"
  },
  {
    "text": "although Unicode is gonna be beyond the scope of this class and totally changes",
    "start": "3574960",
    "end": "3580579"
  },
  {
    "text": "from 2 to 7 it actually works in from two sorry from",
    "start": "3580579",
    "end": "3586849"
  },
  {
    "text": "2.7 to 3 it totally works in 3 it's a little annoying in a 2.7 we already",
    "start": "3586849",
    "end": "3593990"
  },
  {
    "text": "talked about the built-in function length which works for strings as well",
    "start": "3593990",
    "end": "3601819"
  },
  {
    "text": "as for lists and one more piece to mention about strings operators we've",
    "start": "3601819",
    "end": "3610910"
  },
  {
    "text": "used the plus operator for concatenation there's one other operator very frequently used and",
    "start": "3610910",
    "end": "3617799"
  },
  {
    "text": "listed here under the additional documentation which is formatting",
    "start": "3624030",
    "end": "3631090"
  },
  {
    "text": "strings this is from the book type in the Python by Mark Pilgrim which is",
    "start": "3631090",
    "end": "3636130"
  },
  {
    "text": "slightly dated at this point but as a really readable python tutorial the",
    "start": "3636130",
    "end": "3643510"
  },
  {
    "text": "percent operator which is modulus on integers is the string formatting operator in Python 2 and it looks for",
    "start": "3643510",
    "end": "3653520"
  },
  {
    "text": "percent signs in the string it's applying so the percent operator between",
    "start": "3655890",
    "end": "3669220"
  },
  {
    "text": "the strings here is a string formatting operator inside my doubly quoted string",
    "start": "3669220",
    "end": "3674680"
  },
  {
    "text": "this percent s is a format code that means convert the first value to percent",
    "start": "3674680",
    "end": "3680410"
  },
  {
    "text": "s or to type string",
    "start": "3680410",
    "end": "3684569"
  },
  {
    "text": "and it supports a whole variety of formatting options this says I have a",
    "start": "3695160",
    "end": "3700470"
  },
  {
    "text": "formatting code starts with percent and then point 2f specifies a float with two",
    "start": "3700470",
    "end": "3707339"
  },
  {
    "text": "decimal places",
    "start": "3707339",
    "end": "3709849"
  },
  {
    "text": "and it's converting that float to have two decimal places",
    "start": "3718060",
    "end": "3724059"
  },
  {
    "text": "by default the string operator uses positional indexing and it uses tuples",
    "start": "3725650",
    "end": "3738950"
  },
  {
    "text": "which is going to be the next thing we talked about after lunch so it put the",
    "start": "3738950",
    "end": "3751280"
  },
  {
    "text": "first string it got the first thing it got got converted to a string and put in this bass string the second thing I got",
    "start": "3751280",
    "end": "3757430"
  },
  {
    "text": "was converted to a string and put in the bass string when we get to dictionaries",
    "start": "3757430",
    "end": "3762590"
  },
  {
    "text": "you can also do a name based interpolation instead of position based interpolation and there's a bunch of formatting for numbers for dates",
    "start": "3762590",
    "end": "3769790"
  },
  {
    "text": "anything for Strings",
    "start": "3769790",
    "end": "3773140"
  },
  {
    "text": "sadly no tuples only tuples are very similar to lists they're immutable as",
    "start": "3782290",
    "end": "3789100"
  },
  {
    "text": "their main difference and we'll talk about tuples after lunch as our next next type so effluent we're gonna talk about tuples and dicks dicks are key",
    "start": "3789100",
    "end": "3797140"
  },
  {
    "text": "value stores complex key value stores and we're gonna do a bigger lab and we'll typically do larger labs in the",
    "start": "3797140",
    "end": "3803440"
  },
  {
    "text": "afternoon okay anything else we should",
    "start": "3803440",
    "end": "3810070"
  },
  {
    "text": "wrap up before lunch I think it's about",
    "start": "3810070",
    "end": "3813540"
  }
]