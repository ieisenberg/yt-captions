[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "[Music]",
    "start": "3320",
    "end": "6500"
  },
  {
    "text": "hey there got all the buttons clicked great to be here um",
    "start": "9920",
    "end": "15120"
  },
  {
    "text": "and thanks thanks to you all for being here uh this is actually um i'm coming to you live",
    "start": "15120",
    "end": "20160"
  },
  {
    "text": "because um we wanted to shake things up a little bit um you can still um ask questions uh",
    "start": "20160",
    "end": "26160"
  },
  {
    "text": "along the way and um randy the tri-coast is here he'll keep an eye on them and whenever i take",
    "start": "26160",
    "end": "32398"
  },
  {
    "text": "a breath he can shoot the hardest ones at me so um so we live the whole time send those questions and ask them whenever",
    "start": "32399",
    "end": "38559"
  },
  {
    "text": "it um it fits naturally in the flow i'm really live i'm really here in real",
    "start": "38559",
    "end": "43600"
  },
  {
    "text": "time okay so um i'm max jorgensen i am the um the current lead designer of c sharp",
    "start": "43600",
    "end": "50879"
  },
  {
    "text": "i've been that for a good half decade now and worked on the language for about 15 years during which and",
    "start": "50879",
    "end": "59039"
  },
  {
    "text": "you know it's just a bit older than that about two decades old and during that it's gone through um a phenomenal",
    "start": "59039",
    "end": "65119"
  },
  {
    "text": "journey of transformation um and sort of started out as a very",
    "start": "65119",
    "end": "70640"
  },
  {
    "text": "very classic very turn of the century",
    "start": "70640",
    "end": "76080"
  },
  {
    "text": "object-oriented language mainstream optic drawing languages language and has evolved a lot and many of the things",
    "start": "76159",
    "end": "81200"
  },
  {
    "text": "that happened over time were inspired slash borrowed slash",
    "start": "81200",
    "end": "86240"
  },
  {
    "text": "steeled stolen steeled um from the um from the functional world so it's been a",
    "start": "86240",
    "end": "92000"
  },
  {
    "start": "90000",
    "end": "218000"
  },
  {
    "text": "lot of crossover there and i'm i'm gonna sort of um just to put some structure on it um there are many many things that",
    "start": "92000",
    "end": "97680"
  },
  {
    "text": "we can talk about here just to put a little bit of structure i'll start in the past you know talk about",
    "start": "97680",
    "end": "102880"
  },
  {
    "text": "the kinds of functional stuff we were we were um getting into um c-sharp",
    "start": "102880",
    "end": "109759"
  },
  {
    "text": "um around the time when i first joined um 15 years ago and throughout that period where it was",
    "start": "109759",
    "end": "115280"
  },
  {
    "text": "very much about trying to enhance the you know staying within the object-oriented paradigm but trying to",
    "start": "115280",
    "end": "121600"
  },
  {
    "text": "enhance it in various ways in particular around control flow and and those kinds of things then we went",
    "start": "121600",
    "end": "127920"
  },
  {
    "text": "into a phase that we're still in where the focus which is really sort of um triggered by",
    "start": "127920",
    "end": "135840"
  },
  {
    "text": "triggered by the cloud really and devices um and the fact that um much more than",
    "start": "135840",
    "end": "142080"
  },
  {
    "text": "in the in the distant past that many of you probably don't remember um data is something that is shared",
    "start": "142080",
    "end": "148239"
  },
  {
    "text": "between many different applications and um and",
    "start": "148239",
    "end": "153360"
  },
  {
    "text": "uh that's just you know concurrently and that's a scenario where in some sense history is on the",
    "start": "153360",
    "end": "159599"
  },
  {
    "text": "side of functional programming and so this is a this is a point time where we had to not just enhance optic ground",
    "start": "159599",
    "end": "165440"
  },
  {
    "text": "programming but kind of provide an alternative within the the c sharp language to supplement the object going to",
    "start": "165440",
    "end": "170959"
  },
  {
    "text": "programming with um making a more functional paradigm easier within the language",
    "start": "170959",
    "end": "176640"
  },
  {
    "text": "and then finally we can talk a little bit about the future and some of the thoughts we have in in",
    "start": "176640",
    "end": "182879"
  },
  {
    "text": "different directions of uh being inspired by a functional program including",
    "start": "182879",
    "end": "188080"
  },
  {
    "text": "um how to um through the through the type system how to really um get rid of some of the",
    "start": "188080",
    "end": "195040"
  },
  {
    "text": "strong dependencies that are a bit of a tax on uh software development processes in um",
    "start": "195040",
    "end": "202640"
  },
  {
    "text": "in object owner programming today so that's sort of the overall um structure of it and i'm going to",
    "start": "202640",
    "end": "211040"
  },
  {
    "text": "spend most of this talk like the two first bullets of these three i'm going to spend in visual studio which some of you may have",
    "start": "211040",
    "end": "217360"
  },
  {
    "text": "heard of it's the world's first and foremost ide",
    "start": "217360",
    "end": "222879"
  },
  {
    "start": "218000",
    "end": "322000"
  },
  {
    "text": "i'm sure many of you will agree with and it's coming from microsoft it has excellent",
    "start": "222879",
    "end": "228080"
  },
  {
    "text": "support for c-sharp so um i am going to go right in there",
    "start": "228080",
    "end": "233360"
  },
  {
    "text": "and we're going to simply take a little journey through um the first three versions of c-sharp and all the functional stuff that",
    "start": "233360",
    "end": "239280"
  },
  {
    "text": "happened there so this is the c sharp 10 program pretty much i'm cheating a little bit um attempting to um",
    "start": "239280",
    "end": "247920"
  },
  {
    "text": "to abstract over some uh functionality in um you know to have uh first for",
    "start": "247920",
    "end": "254319"
  },
  {
    "text": "using first class functions and actually the very first version of cd sharp unlike many",
    "start": "254319",
    "end": "259680"
  },
  {
    "text": "optical programming languages actually supported first class functions from the get-go um so um you can you",
    "start": "259680",
    "end": "267360"
  },
  {
    "text": "have function types you can declare you have to declare them they're nominal just like declaring a class or an",
    "start": "267360",
    "end": "272639"
  },
  {
    "text": "interface or struct you have to declare a delegate as we call them they're sort of function",
    "start": "272639",
    "end": "277759"
  },
  {
    "text": "types they're really crappy in many ways but i'm not going to go into that um but they get the job done",
    "start": "277759",
    "end": "283680"
  },
  {
    "text": "you declare the predicate type here as something that takes an int and returns a bool and then i can write a method that takes",
    "start": "283680",
    "end": "290080"
  },
  {
    "text": "a predicate using that type and when i call the method i have to",
    "start": "290080",
    "end": "295680"
  },
  {
    "text": "pass it there are no function literals yet so i have to pass it a named method right so i can pass it",
    "start": "295680",
    "end": "302320"
  },
  {
    "text": "the method greater than five here which fits the type um sort of structurally um",
    "start": "302320",
    "end": "308080"
  },
  {
    "text": "and and therefore uh can be converted to a delegate object which is a function a first class function passed to the",
    "start": "308080",
    "end": "314479"
  },
  {
    "text": "filter and applied there and you can see the application of it um here the little calling of p here you",
    "start": "314479",
    "end": "320880"
  },
  {
    "text": "can call that that's a first class function so that's already in c sharp from the get-go which is a little bit of a leg up on",
    "start": "320880",
    "end": "326639"
  },
  {
    "text": "some of the other languages but obviously it's very fairly clunky and so on it's also from a",
    "start": "326639",
    "end": "331840"
  },
  {
    "text": "type perspective um it's not like super super elegant and that that's",
    "start": "331840",
    "end": "338880"
  },
  {
    "text": "something that it shares with many um most optical online languages at the time um that the",
    "start": "338880",
    "end": "346800"
  },
  {
    "text": "the programming world sort of has these two different kinds of polymorphism two different",
    "start": "346800",
    "end": "352160"
  },
  {
    "text": "ways that you can write code that applies to multiple different types at a time and the art the functional camp has gone",
    "start": "352160",
    "end": "359440"
  },
  {
    "text": "with parametric polymorphism where you are parameterized over type your code is parameterized over types",
    "start": "359440",
    "end": "365280"
  },
  {
    "text": "and can be applied to different types and object runner programming had gone with subtype polymorphism",
    "start": "365280",
    "end": "371440"
  },
  {
    "text": "where you have hierarchies of different classes and they can all",
    "start": "371440",
    "end": "376560"
  },
  {
    "text": "pose as the base type and sort of be mixed together like in in collections and so on like that",
    "start": "376560",
    "end": "382319"
  },
  {
    "text": "and both have um strengths and weaknesses and around the turn of the century here",
    "start": "382319",
    "end": "387360"
  },
  {
    "text": "we were all engaged in trying to figure out how to get parametric polymorphism um",
    "start": "387360",
    "end": "394240"
  },
  {
    "text": "into object-oriented programming languages and to help with things like you know i have",
    "start": "394240",
    "end": "399600"
  },
  {
    "start": "398000",
    "end": "570000"
  },
  {
    "text": "a i have a collection here that is untyped and i have to cast i put ins",
    "start": "399600",
    "end": "405120"
  },
  {
    "text": "into it but i can't say that so i have to cast them as they come out again and so on the whole thing is specific to",
    "start": "405120",
    "end": "410240"
  },
  {
    "text": "ins there's no abstraction over types so first thing we do c sharp two is okay um",
    "start": "410240",
    "end": "415520"
  },
  {
    "text": "we need parametric polymorphism we add generics and so now i can make my types generic so i can",
    "start": "415520",
    "end": "421599"
  },
  {
    "text": "make my predicate type generic here and have it applied to all kinds of values not just",
    "start": "421599",
    "end": "427360"
  },
  {
    "text": "ins that's that's very nice um and of course i need to then say that",
    "start": "427360",
    "end": "434400"
  },
  {
    "text": "what i what i take here in my filter method is that is a predicate event um but i can also make uh methods",
    "start": "434400",
    "end": "441440"
  },
  {
    "text": "generic so and many of you if you don't know c sharp you also know this from java you should not be",
    "start": "441440",
    "end": "446800"
  },
  {
    "text": "um surprised uh the the the support for generics in c sharp is um it's a it's a",
    "start": "446800",
    "end": "454080"
  },
  {
    "text": "different mainly in that it is worked all the way into the runtime it's not erased by the compiler so it has like it",
    "start": "454080",
    "end": "460240"
  },
  {
    "text": "sort of runs deeper if you will um and it's more more complete um",
    "start": "460240",
    "end": "466400"
  },
  {
    "text": "and so i can and i can make my filter method generic as well saying oh i can take any kind of predicate and any kind of",
    "start": "466400",
    "end": "473759"
  },
  {
    "text": "array and return that same kind of array and um um and now i should be able to",
    "start": "473759",
    "end": "483280"
  },
  {
    "text": "if i can just replace all the ins with t's here i should be able to um to",
    "start": "483280",
    "end": "490720"
  },
  {
    "text": "apply the filter to um to anything um i should not replace that one the",
    "start": "490720",
    "end": "496319"
  },
  {
    "text": "filter to anything that is a um you know as long as the t's match up in the in",
    "start": "496319",
    "end": "503520"
  },
  {
    "text": "the um signature so to speak and here you can see that my call to filter",
    "start": "503520",
    "end": "508639"
  },
  {
    "text": "doesn't actually need to to pass um in explicitly as a type argument it",
    "start": "508639",
    "end": "514959"
  },
  {
    "text": "can that can be inferred implicitly so there's a little type inference that's also creeping into c sharp at this point",
    "start": "514959",
    "end": "520719"
  },
  {
    "text": "okay so that's uh generics but with generics arrives the uh opportunity to have",
    "start": "520719",
    "end": "526720"
  },
  {
    "text": "better libraries right that's a big thing when you add generic you can add generic libraries let's forget about these old clunky",
    "start": "526720",
    "end": "533519"
  },
  {
    "text": "collections let's have some generic ones and now that we can check this arraylist",
    "start": "533519",
    "end": "539040"
  },
  {
    "text": "on the uh garbage sheep and we can use list of tea instead new generic list and",
    "start": "539040",
    "end": "546000"
  },
  {
    "text": "of course that is all very nice now i don't have to cast things when i take them out",
    "start": "546000",
    "end": "552240"
  },
  {
    "text": "because they're already known to be you know all these benefits but what's more list of tea can actually have",
    "start": "552240",
    "end": "558640"
  },
  {
    "text": "better methods on it because it it knows its type so we could actually just return the",
    "start": "558640",
    "end": "564959"
  },
  {
    "text": "calling the two array on this on this accumulator",
    "start": "564959",
    "end": "570000"
  },
  {
    "text": "method that we have and we don't even have to do our own manual building up of the result here there's a method for that right so generics really",
    "start": "570000",
    "end": "576399"
  },
  {
    "text": "help with the abstraction here all by taking this functional programming",
    "start": "576399",
    "end": "582240"
  },
  {
    "text": "language kind of polymorphism into into c-sharp",
    "start": "582240",
    "end": "587360"
  },
  {
    "text": "as well so um that's probably a good place to ask if there are any",
    "start": "587360",
    "end": "593760"
  },
  {
    "text": "questions so far randy is here track host uh not uh not",
    "start": "593760",
    "end": "600480"
  },
  {
    "text": "any questions so far matt okay this should be sort of repetition for people who went through this",
    "start": "600480",
    "end": "605600"
  },
  {
    "text": "in um in real time um and the rest of you who just grew up um much later than us you'll be like",
    "start": "605600",
    "end": "612640"
  },
  {
    "text": "what that's like that's completely basic but it's you know this is how it came in and to to c-sharp and to many um",
    "start": "612640",
    "end": "620959"
  },
  {
    "text": "too many object-oriented programming languages of that age and it sort of was just um became the new standard for what",
    "start": "620959",
    "end": "627680"
  },
  {
    "text": "should obviously be in any modern language now um we can actually um do a little better",
    "start": "627680",
    "end": "635040"
  },
  {
    "text": "here um there's uh now also other array used to be the only generic type",
    "start": "635040",
    "end": "641120"
  },
  {
    "text": "now we can have other collection types so for instance we can have one that's called innumerable of t which abstracts over",
    "start": "641120",
    "end": "647440"
  },
  {
    "text": "essentially anything that can be iterated over so we can take innumerable of t",
    "start": "647440",
    "end": "654480"
  },
  {
    "text": "and we can return i normal of t and i'm getting sick of writing types all",
    "start": "654480",
    "end": "660160"
  },
  {
    "text": "the time so i can i can use i'll cheat and use the c sharp three feature here and and just use",
    "start": "660160",
    "end": "665839"
  },
  {
    "text": "um type inference on local variables here but um i know bubbles can be for reached",
    "start": "665839",
    "end": "672320"
  },
  {
    "text": "over just like arrays and everything else now when i do that i can i can now",
    "start": "672320",
    "end": "679279"
  },
  {
    "text": "write my method as a generator which is another thing that came out of the functional world where i am lazily producing the results",
    "start": "679279",
    "end": "686880"
  },
  {
    "text": "of this filter as you ask for them so instead of having this accumulation",
    "start": "686880",
    "end": "694720"
  },
  {
    "text": "into a temporary collection and returning that i can simply say yield return because this is",
    "start": "694720",
    "end": "702720"
  },
  {
    "text": "this is an old language we have to have some syntax there yield return the value and then i don't need the",
    "start": "702720",
    "end": "710560"
  },
  {
    "text": "temporary collection and i don't need the return i'm simply now writing a generator that whenever the for each here asks for the",
    "start": "710560",
    "end": "718480"
  },
  {
    "text": "next value the item will go say oh let me run the next bit of code that produces that so again another functional thing that",
    "start": "718480",
    "end": "725440"
  },
  {
    "text": "makes it into c sharp two um the last thing though is that is the first",
    "start": "725440",
    "end": "731200"
  },
  {
    "text": "attempt at having um function literals or um you know anonymous functions if you",
    "start": "731200",
    "end": "737519"
  },
  {
    "text": "will um so instead of of having to have a name method for everything that we want",
    "start": "737519",
    "end": "742720"
  },
  {
    "text": "to pass as a function we can now say the syntax isn't like",
    "start": "742720",
    "end": "748000"
  },
  {
    "text": "beautiful but this is the first like run at a syntax for anonymous functions",
    "start": "748000",
    "end": "753200"
  },
  {
    "text": "and we can get rid of that declared method there so far so good now comes c sharp three",
    "start": "753200",
    "end": "759920"
  },
  {
    "text": "and we want to we we get um we um we want to start addressing",
    "start": "759920",
    "end": "766079"
  },
  {
    "text": "scenarios like um inter operating with uh databases so we have um",
    "start": "766079",
    "end": "772959"
  },
  {
    "text": "what we call language integrated query is the big new thing here and in order to do that we need to do better on the functional front so",
    "start": "772959",
    "end": "779360"
  },
  {
    "text": "first of all let's take this clunky syntax and let's let's give that a do over let's have lambda expressions",
    "start": "779360",
    "end": "786320"
  },
  {
    "text": "in c-sharp instead you can write it like this which isn't much better but lambda expressions can optionally",
    "start": "786320",
    "end": "792000"
  },
  {
    "text": "you know have expression bodies so that gets a little better and also",
    "start": "792000",
    "end": "797200"
  },
  {
    "text": "we get more type inference so you don't actually have to say the parameter types of a lambda expression",
    "start": "797200",
    "end": "802240"
  },
  {
    "text": "as long as they're passed to something that will tell tell them the type so more type inference here because we're calling",
    "start": "802240",
    "end": "808000"
  },
  {
    "text": "filter with an array of int then t will be inferred to be ant then this is inferred",
    "start": "808000",
    "end": "814320"
  },
  {
    "text": "to be a predicate event and therefore in is pushed back down into the lambda and its body is type checked in the",
    "start": "814320",
    "end": "819440"
  },
  {
    "text": "context of that so um one more type of inference there um",
    "start": "819440",
    "end": "824480"
  },
  {
    "text": "we um also realize that we're going to be using first class functions a lot",
    "start": "824480",
    "end": "829600"
  },
  {
    "start": "826000",
    "end": "975000"
  },
  {
    "text": "so this whole declaring your own delegates like that really sucks other from you know functional languages",
    "start": "829600",
    "end": "834800"
  },
  {
    "text": "they have typically structural function types and we should get at least closer to that but we can just add a library",
    "start": "834800",
    "end": "840959"
  },
  {
    "text": "of generic delegates to c-sharp itself so we now have uh funk of t",
    "start": "840959",
    "end": "848639"
  },
  {
    "text": "comma bool and that's a delegate type that's pre-declared and we have them like up to certain number of parameters",
    "start": "848639",
    "end": "854480"
  },
  {
    "text": "so um which grows for every release right because we want to try to capture bigger and bigger functions",
    "start": "854480",
    "end": "860639"
  },
  {
    "text": "so we can get rid of that as well um and now we're down to something that is",
    "start": "860639",
    "end": "866000"
  },
  {
    "text": "um that is is fairly neat um you saw the var",
    "start": "866000",
    "end": "871600"
  },
  {
    "text": "here we can put var in many places more and more type entrance who needs to see the types all the time",
    "start": "871600",
    "end": "880160"
  },
  {
    "text": "then but then you know one thing that when you start using uh something like filter here you know",
    "start": "880160",
    "end": "886800"
  },
  {
    "text": "you might want to apply more than one filter and now it gets really annoying because i have to sort of want to apply a filter to this then i",
    "start": "886800",
    "end": "892399"
  },
  {
    "text": "get this sort of nesting going on um so let's say i want to get all the things that have",
    "start": "892399",
    "end": "898639"
  },
  {
    "text": "you know where three um it can be divided by three um",
    "start": "898639",
    "end": "904959"
  },
  {
    "text": "that's that just looks really ugly like that kind of becomes a lump of code um and so what a functional language",
    "start": "904959",
    "end": "910639"
  },
  {
    "text": "would do here is that it would have a pipeline operator so it would say hey um the first parameter there why can't we just",
    "start": "910639",
    "end": "917440"
  },
  {
    "text": "we can type that into a function call with some syntax c-sharp can't do this so i'm just sort of going",
    "start": "917440",
    "end": "922800"
  },
  {
    "text": "to wing it here and i could even take the original array",
    "start": "922800",
    "end": "927839"
  },
  {
    "text": "and i could um type that into the the first filter call there um something like this",
    "start": "927839",
    "end": "936079"
  },
  {
    "text": "so this is what a functional language would do and we don't we don't put that into sharp but what we do instead is we say",
    "start": "936079",
    "end": "942079"
  },
  {
    "text": "okay you can you can declare a static method like this you can declare it as an extension",
    "start": "942079",
    "end": "948160"
  },
  {
    "text": "method and that means that it can be called on its first parameter as if it was an",
    "start": "948160",
    "end": "953920"
  },
  {
    "text": "instance method on it and so now i can say array dot filter",
    "start": "953920",
    "end": "959440"
  },
  {
    "text": "and i can say that dot filter and you get that fluent flow that you",
    "start": "959440",
    "end": "966000"
  },
  {
    "text": "would get in a functional language as well so yet another inspiration there um so extension methods have really like",
    "start": "966000",
    "end": "972639"
  },
  {
    "text": "proved their worth in um in c sharp but of course um querying is a general thing",
    "start": "972639",
    "end": "979920"
  },
  {
    "start": "975000",
    "end": "1156000"
  },
  {
    "text": "so we we add a library called link for language integrated query um where you don't even have to write",
    "start": "979920",
    "end": "986720"
  },
  {
    "text": "your own filter message you can just use the where method from there and it it looks exactly the same way as the",
    "start": "986720",
    "end": "991920"
  },
  {
    "text": "filter i just i just used so we can get rid of that as well and",
    "start": "991920",
    "end": "997120"
  },
  {
    "text": "um and we're doing some we're doing some querying here now um",
    "start": "997120",
    "end": "1005600"
  },
  {
    "text": "uh one thing that i mean this this is really beautiful you",
    "start": "1005600",
    "end": "1010800"
  },
  {
    "text": "can add other query methods you could have like instead of here you could have like a um a select method where we uh we",
    "start": "1010800",
    "end": "1018000"
  },
  {
    "text": "transformed the result and so let's say we want to we we also add support for little",
    "start": "1018000",
    "end": "1024160"
  },
  {
    "text": "anonymous record like thing so i could output an anonymous object of x and the um",
    "start": "1024160",
    "end": "1031839"
  },
  {
    "text": "and x squared or whatever y equals x squared some silly thing and you can",
    "start": "1031839",
    "end": "1038959"
  },
  {
    "text": "sort of put together what looks like um more more like a sql query um but you",
    "start": "1038959",
    "end": "1044079"
  },
  {
    "text": "really not like some nice syntax just like sql so we could we could say",
    "start": "1044079",
    "end": "1050320"
  },
  {
    "text": "from x in array um where",
    "start": "1050320",
    "end": "1056320"
  },
  {
    "text": "x lesson five select you can now write this as a as",
    "start": "1057760",
    "end": "1064720"
  },
  {
    "text": "a syntactic sugar for um the same thing right for um um",
    "start": "1064720",
    "end": "1070890"
  },
  {
    "text": "[Music] there we go uh for stringing together",
    "start": "1070890",
    "end": "1076160"
  },
  {
    "text": "these calls and lambdas and this is again a functional construct uh this is a list comprehension or query",
    "start": "1076160",
    "end": "1082160"
  },
  {
    "text": "comprehension it's magnetic so it's a mona c-sharp has monads in this particular case and it um and it does the job",
    "start": "1082160",
    "end": "1090320"
  },
  {
    "text": "um so um that's sort of like the classic phase we also have i don't want to show",
    "start": "1090320",
    "end": "1096320"
  },
  {
    "text": "it here but we also add the ability to actually quote lambda expressions so that",
    "start": "1096320",
    "end": "1101840"
  },
  {
    "text": "when you pass them instead of passing them to a delegate type you pass them to another kind of type called expression of of",
    "start": "1101840",
    "end": "1108960"
  },
  {
    "text": "t um you get instead of getting a lambda function you can execute you actually",
    "start": "1108960",
    "end": "1114160"
  },
  {
    "text": "get a a syntax tree of the lambda at runtime",
    "start": "1114160",
    "end": "1119520"
  },
  {
    "text": "so code quotations lisp style comes in at this point and",
    "start": "1119520",
    "end": "1125840"
  },
  {
    "text": "that's how we built our orm support the object relational mapping",
    "start": "1125840",
    "end": "1130960"
  },
  {
    "text": "when you write a query like this it gets translated into a tree that can then be passed to a sql translator turn it into",
    "start": "1130960",
    "end": "1136640"
  },
  {
    "text": "sql pass it to a sql database and and run the query like that so that was our first like functional boost",
    "start": "1136640",
    "end": "1143679"
  },
  {
    "text": "wanna here is there any questions so far i think so there's a question about if there's any aspect of the c-sharp syntax",
    "start": "1143679",
    "end": "1150400"
  },
  {
    "text": "you would retire and i'd recognize your own three at this point but i thought that was a cool question",
    "start": "1150400",
    "end": "1156559"
  },
  {
    "text": "yeah i mean um certainly that first that first shot at at function literals",
    "start": "1156559",
    "end": "1163200"
  },
  {
    "text": "the anonymous methods was like a clunky mistake and we we overwrote it immediately in c",
    "start": "1163200",
    "end": "1168400"
  },
  {
    "text": "sharp three of course we can't take it out but coming up with a better lambda more flexible lambda syntax",
    "start": "1168400",
    "end": "1173440"
  },
  {
    "text": "that's an obvious one i also think these delegates i'm not showing the underbelly of of the",
    "start": "1173440",
    "end": "1178880"
  },
  {
    "text": "delegate types the function types but the way we designed them they really weren't designed in c",
    "start": "1178880",
    "end": "1184240"
  },
  {
    "text": "one for functional programming they would assign for programming with events like support supporting subject observer",
    "start": "1184240",
    "end": "1190480"
  },
  {
    "text": "style um kind of eventing um so they have all kinds of they're",
    "start": "1190480",
    "end": "1196480"
  },
  {
    "text": "actually not just they can't they can contain more than one function they can contain like a list of functions and if you",
    "start": "1196480",
    "end": "1202400"
  },
  {
    "text": "execute them all of those functions will get called and only the last one will you'll get its result and",
    "start": "1202400",
    "end": "1208320"
  },
  {
    "text": "so it's really hideous so that i would just like have done i would have a do-over on that whole thing if i could",
    "start": "1208320",
    "end": "1215120"
  },
  {
    "text": "i hope that answers the question that's some of my common reasons we may get to later um how does your how does the current",
    "start": "1215120",
    "end": "1221120"
  },
  {
    "text": "and envisioned future state of c-sharp support for functional programming stack up against for example scala you",
    "start": "1221120",
    "end": "1227919"
  },
  {
    "text": "know which we know is a purely functional or like more functional language right so uh one thing i i mean i love scala um",
    "start": "1227919",
    "end": "1235919"
  },
  {
    "text": "at least in some details i don't like but i love scala in in the its philosophy which is to",
    "start": "1235919",
    "end": "1241039"
  },
  {
    "text": "produce a genuinely not so much a multi-paradigm language but a unified paradigm language where",
    "start": "1241039",
    "end": "1246080"
  },
  {
    "text": "everything is carefully worked together and as we add functional things to c sharp we try to do it in the same way",
    "start": "1246080",
    "end": "1251840"
  },
  {
    "text": "where they fit well with what's already there rather than being sort of like a separate part of the",
    "start": "1251840",
    "end": "1258080"
  },
  {
    "text": "language so i really adore that as a philosophy i don't think we'll get to where c sharp",
    "start": "1258080",
    "end": "1264000"
  },
  {
    "text": "is a complete balance between functional object oriented we always have we're always object first so and",
    "start": "1264000",
    "end": "1270240"
  },
  {
    "text": "we're never going to compete with like a functional first language like f sharp for instance like there's so many things",
    "start": "1270240",
    "end": "1275520"
  },
  {
    "text": "from functional programming so many idioms such an amount of type inference that we could never get there from here",
    "start": "1275520",
    "end": "1281679"
  },
  {
    "text": "um so it's sort of in between there um but we we take these functional",
    "start": "1281679",
    "end": "1287760"
  },
  {
    "text": "things in not because we want to be multi-paradigm but because there are scenarios where it's really useful and that's sort",
    "start": "1287760",
    "end": "1293840"
  },
  {
    "text": "of a is there another question because otherwise that's a great segue to the next section",
    "start": "1293840",
    "end": "1299200"
  },
  {
    "text": "halfway point to give you a time check yep good perfect um so",
    "start": "1299200",
    "end": "1305760"
  },
  {
    "start": "1302000",
    "end": "1515000"
  },
  {
    "text": "so the next wave really is this cloud-driven wave where object-oriented programming focuses a",
    "start": "1305760",
    "end": "1311679"
  },
  {
    "text": "lot on encapsulating functionality and data together and that's great for some scenarios it",
    "start": "1311679",
    "end": "1317039"
  },
  {
    "text": "really had a golden era and it's still good for many things but when your data is",
    "start": "1317039",
    "end": "1323600"
  },
  {
    "text": "in the cloud and is being shared across many different application areas being used in",
    "start": "1323600",
    "end": "1329760"
  },
  {
    "text": "different ways then packaging the functionality and the data just doesn't make sense anymore right there you really want to have the",
    "start": "1329760",
    "end": "1337440"
  },
  {
    "text": "functions on the outside not on the inside which means the core data needs to be public in the data type",
    "start": "1337440",
    "end": "1344880"
  },
  {
    "text": "it often needs to be immutable depending on how you architect and and you need to be able to do the",
    "start": "1344880",
    "end": "1351120"
  },
  {
    "text": "things that you do by have by having virtual methods in um",
    "start": "1351120",
    "end": "1356240"
  },
  {
    "text": "in an object-oriented program like you have shape dependent behavior by overriding virtual methods in a hierarchy",
    "start": "1356240",
    "end": "1361840"
  },
  {
    "text": "those things you that kind of shape dependency you need to be able to express from the outside",
    "start": "1361840",
    "end": "1366880"
  },
  {
    "text": "right you need to write a function that takes some object in the object doesn't know about the function but the function itself",
    "start": "1366880",
    "end": "1372559"
  },
  {
    "text": "does different things depending on the type of the object and that's what pattern matching is for so",
    "start": "1372559",
    "end": "1377840"
  },
  {
    "text": "in c sharp fast forward to c sharp seven we get pattern matching into c sharp and and we start very we start",
    "start": "1377840",
    "end": "1384559"
  },
  {
    "text": "laser focusing on that scenario only so if you have some sort of let's say void m that takes an",
    "start": "1384559",
    "end": "1391600"
  },
  {
    "text": "object o uh now we can you've always been able to say",
    "start": "1391600",
    "end": "1398480"
  },
  {
    "text": "what's a complaint oh it has to be static sorry about that um uh you you've always been able to say",
    "start": "1398480",
    "end": "1405440"
  },
  {
    "text": "in c sharp if o is string for instance and get a boolean result back",
    "start": "1405440",
    "end": "1410799"
  },
  {
    "text": "but now when you want to do something about it you can't you've lost it as a string you check that it was a string and then you lost it",
    "start": "1410799",
    "end": "1416559"
  },
  {
    "text": "and you'll say something like console or right line um of you know yeah it was a string",
    "start": "1416559",
    "end": "1424400"
  },
  {
    "text": "um so what if you could just you know give that string a name while",
    "start": "1424400",
    "end": "1430240"
  },
  {
    "text": "you were at it and now you can say string we can we cannot put the string as well um",
    "start": "1430240",
    "end": "1436080"
  },
  {
    "text": "so like this and an interpolated um string um so um this this now is an example of",
    "start": "1436080",
    "end": "1443919"
  },
  {
    "text": "a pattern right and uh we just allow patterns initially we just allow them in the places",
    "start": "1443919",
    "end": "1449360"
  },
  {
    "text": "where they already that in inside of already existing control structures in c sharp so this",
    "start": "1449360",
    "end": "1454400"
  },
  {
    "text": "is expression gets enhanced to not just check against types but to check against various patterns switch statement as well",
    "start": "1454400",
    "end": "1461200"
  },
  {
    "text": "i can say switch and switch of o and instead of just comparing against constants in",
    "start": "1461200",
    "end": "1466640"
  },
  {
    "text": "the cases i'm going to switch syntax it's just hideous in c sharp as well as all the other",
    "start": "1466640",
    "end": "1472240"
  },
  {
    "text": "c based languages i can say case and instead of just using constants here i can say case",
    "start": "1472240",
    "end": "1477919"
  },
  {
    "text": "string s and then go to my thing um of course it's a classic",
    "start": "1477919",
    "end": "1486159"
  },
  {
    "text": "um it's classic switch stuff where you have to you have to put a break in order to um",
    "start": "1486159",
    "end": "1494000"
  },
  {
    "text": "in order to close things out but um so now i can use that alongside with and we sort of read",
    "start": "1494000",
    "end": "1499840"
  },
  {
    "text": "retcon constants as well like constant values they're also a kind of pattern",
    "start": "1499840",
    "end": "1504960"
  },
  {
    "text": "so i can also say is null or things like that so now patterns have a place in the language",
    "start": "1504960",
    "end": "1510000"
  },
  {
    "text": "and then and there are only these two kinds of patterns pretty much to begin with but then we uh",
    "start": "1510000",
    "end": "1515520"
  },
  {
    "start": "1515000",
    "end": "1633000"
  },
  {
    "text": "since then we've been expanding on what kinds of patterns do we have in c sharp and where can they be used so we get more towards the",
    "start": "1515520",
    "end": "1521679"
  },
  {
    "text": "expressiveness of c sharp and i want to show you an example of that where um um",
    "start": "1521679",
    "end": "1528480"
  },
  {
    "text": "we've since evolved since what i showed you we've evolved c-sharp to now have expression bodies",
    "start": "1528480",
    "end": "1533679"
  },
  {
    "text": "in ordinary methods as well so this is an expression-bodied method that takes in some object and again it's trying to",
    "start": "1533679",
    "end": "1541360"
  },
  {
    "text": "apply functionality from the outside of the object model by saying hey okay which kind of thing is this",
    "start": "1541360",
    "end": "1546640"
  },
  {
    "text": "oh if it's a car then we do one thing if it's a taxi well then the pattern is more fancy it",
    "start": "1546640",
    "end": "1552000"
  },
  {
    "text": "will apply um what we call a property pattern to the taxi and look at its fares property",
    "start": "1552000",
    "end": "1559279"
  },
  {
    "text": "and apply now it applies a constant pattern to it say oh there's zero people here so they have to pay this much to go with a bridge which this is all",
    "start": "1559279",
    "end": "1566080"
  },
  {
    "text": "for right or we have uh we have deconstruction in the language now bus has a deconstructor so",
    "start": "1566080",
    "end": "1572080"
  },
  {
    "text": "we can apply a positional pattern and uh applying patterns recursively again",
    "start": "1572080",
    "end": "1578240"
  },
  {
    "text": "to uh the parts of the bus if you will um the wheels on the bus not that but other things um",
    "start": "1578240",
    "end": "1585679"
  },
  {
    "text": "we have um in this nested switch here we have relational patterns now coming into c sharp nine",
    "start": "1585679",
    "end": "1591279"
  },
  {
    "text": "we have logical patterns to and or not to combine other patterns and so on so we get this whole",
    "start": "1591279",
    "end": "1596880"
  },
  {
    "text": "patterns have gone off as a thing of its own and of course this whole thing is not a switch statement but it's a",
    "start": "1596880",
    "end": "1602640"
  },
  {
    "text": "switch expression which is much more nifty and modern and so on so this thing has ballooned over time to be a really expressive um",
    "start": "1602640",
    "end": "1610159"
  },
  {
    "text": "part of c sharp from being not there at all a couple of versions ago like c sharp six there was",
    "start": "1610159",
    "end": "1615279"
  },
  {
    "text": "no no such thing as pattern matching so that's a big concession to um you need this style of programming to make",
    "start": "1615279",
    "end": "1621840"
  },
  {
    "text": "up for the fact that you can't wrap the functionality up with your object hierarchy i think you're seeing many languages",
    "start": "1621840",
    "end": "1628240"
  },
  {
    "text": "doing the same kind of thing all driven by the need to work on outside data so speaking of outside data",
    "start": "1628240",
    "end": "1636080"
  },
  {
    "start": "1633000",
    "end": "2107000"
  },
  {
    "text": "one of the things you often want to do is treat that outside data more as a",
    "start": "1637919",
    "end": "1643760"
  },
  {
    "text": "value and often also work with it as an immutable value okay",
    "start": "1643760",
    "end": "1651440"
  },
  {
    "text": "and so here's an example where this is me before i was married and then i",
    "start": "1651440",
    "end": "1656480"
  },
  {
    "text": "changed my last name that's how you would classically you'd mutate the thing right um and we uh",
    "start": "1656480",
    "end": "1664720"
  },
  {
    "text": "we we added support for for classes like this in c sharp now to",
    "start": "1664720",
    "end": "1671039"
  },
  {
    "text": "have properties that can only be mutated during initialization so in this object initializer here when",
    "start": "1671039",
    "end": "1676799"
  },
  {
    "text": "the object is being created i can still mutate the properties but i can't change the last name if i wanna",
    "start": "1676799",
    "end": "1682080"
  },
  {
    "text": "if i want to change the last name i need to create a new record like i need to have an immutable discipline where i create a copy",
    "start": "1682080",
    "end": "1688240"
  },
  {
    "text": "i copy and modify right i do a non-destructive mutation and in order to better support that in",
    "start": "1688240",
    "end": "1695600"
  },
  {
    "text": "order to support sort of like value semantics like that um you now also have records in t-sharp",
    "start": "1695600",
    "end": "1701120"
  },
  {
    "text": "um which you know come with a bunch of of ultra abbreviations and stuff i'm not",
    "start": "1701120",
    "end": "1706159"
  },
  {
    "text": "going to show you but the main thing they give you is they give you they give you value semantics by default",
    "start": "1706159",
    "end": "1712480"
  },
  {
    "text": "so instead of like always assuming object grounded stuff and you have to sort of overwrite the defaults and write very long things to be immutable and",
    "start": "1712480",
    "end": "1719120"
  },
  {
    "text": "value based they give you this by default so instead of creating person.last name i",
    "start": "1719120",
    "end": "1726480"
  },
  {
    "text": "can now say var newperson equals person with",
    "start": "1726480",
    "end": "1734960"
  },
  {
    "text": "last name equals torguson right so there's none destructive mutation supported in the language on",
    "start": "1735840",
    "end": "1742080"
  },
  {
    "text": "records and and more uh more types will come over time to to support an undestructive",
    "start": "1742080",
    "end": "1748480"
  },
  {
    "text": "mutation where you can say it's like that one with everything copied over and that's and that's",
    "start": "1748480",
    "end": "1753600"
  },
  {
    "text": "that's sort of merged with the object during the paradigm where the new person you can see that i'm actually creating",
    "start": "1753600",
    "end": "1758640"
  },
  {
    "text": "an employee here but i'm only storing it as a person but the new person here will also be an",
    "start": "1758640",
    "end": "1764480"
  },
  {
    "text": "employee and they will also copy over even the things that that can't be seen statically at this point in time so that's sort of like the",
    "start": "1764480",
    "end": "1771039"
  },
  {
    "text": "um um that's sort of like trying to fit this in with the the with",
    "start": "1771039",
    "end": "1778159"
  },
  {
    "text": "subtype polymorphism you really need to make sure that non-destructive mutation works well",
    "start": "1778159",
    "end": "1783440"
  },
  {
    "text": "um even when you don't have the whole truth about the um the the actual runtime type of things",
    "start": "1783440",
    "end": "1791120"
  },
  {
    "text": "around at the point where you do the copying and and mutation so um the other thing with records",
    "start": "1791120",
    "end": "1799200"
  },
  {
    "text": "and i think just for time that i'm not going to show is uh i can just tell you it's that they",
    "start": "1799200",
    "end": "1806399"
  },
  {
    "text": "have value quality and so they will uh you compare to records they that",
    "start": "1806399",
    "end": "1811919"
  },
  {
    "text": "um correspond to comparing all the members and making sure that they're equal and we we take care of generating all that",
    "start": "1811919",
    "end": "1818799"
  },
  {
    "text": "code and the hash code and also making sure that it's symmetric so i mean a big difficulty is writing a co it's",
    "start": "1818799",
    "end": "1826320"
  },
  {
    "text": "actually it's not difficult per se but it's a maintenance nightmare to maintain",
    "start": "1826320",
    "end": "1832320"
  },
  {
    "text": "a manually written equals function that is symmetric and and remembers to deal with all the",
    "start": "1832320",
    "end": "1838480"
  },
  {
    "text": "all the data and so on so we do that for you as well in records so that's another like step towards functional programming if",
    "start": "1838480",
    "end": "1844320"
  },
  {
    "text": "you will this is a good this will be a good point in time to uh to get a question or two perfect yeah there were several people",
    "start": "1844320",
    "end": "1850000"
  },
  {
    "text": "wondering about performance concerns with immutability ah yes",
    "start": "1850000",
    "end": "1856559"
  },
  {
    "text": "so um immutability as a as a discipline and this goes you know",
    "start": "1856559",
    "end": "1862000"
  },
  {
    "text": "regardless of pretty much regardless of the programming uh language features that whether",
    "start": "1862000",
    "end": "1868320"
  },
  {
    "text": "they're nifty or not like typically with immutability that means allocating a lot of objects",
    "start": "1868320",
    "end": "1874159"
  },
  {
    "text": "right in c sharp um sometimes you can get around that by",
    "start": "1874159",
    "end": "1879919"
  },
  {
    "text": "using structs instead but that's like then you have higher copying costs as well because structs are value types and",
    "start": "1879919",
    "end": "1886720"
  },
  {
    "text": "they are signed by copy so if they're big you you know the the lesser evil is to um",
    "start": "1886720",
    "end": "1892720"
  },
  {
    "text": "to have them be um reference types to be classes and records here as well are classes",
    "start": "1892720",
    "end": "1898799"
  },
  {
    "text": "they are they are objects and um and we have we've built",
    "start": "1898799",
    "end": "1904000"
  },
  {
    "text": "very big things that use an immutable discipline the the whole c-sharp compiler including",
    "start": "1904000",
    "end": "1910960"
  },
  {
    "text": "um i mean the c-sharp compiler is not just a compiler it's an api that can give you every detail of",
    "start": "1910960",
    "end": "1917039"
  },
  {
    "text": "uh every syntactic and semantic detail about a c-sharp program it can help you build another you know build more c-sharp code",
    "start": "1917039",
    "end": "1924240"
  },
  {
    "text": "and it's what's being used by this by the c-sharp ide here as i'm using the ide in front of you it's using incremental",
    "start": "1924240",
    "end": "1930960"
  },
  {
    "text": "apis and and uh everything so it's a big big big api and the whole data model is",
    "start": "1930960",
    "end": "1937120"
  },
  {
    "text": "immutable and so we've had to and performance really was a problem allocation was a problem as we built in",
    "start": "1937120",
    "end": "1943360"
  },
  {
    "text": "and we've had to do tricks along the way to share as much as possible to um to cheat to use structs where we",
    "start": "1943360",
    "end": "1951440"
  },
  {
    "text": "can to cheat and not copy things where we can and so on so that is that's sort of like the scourge of immutable programming if you",
    "start": "1951440",
    "end": "1958159"
  },
  {
    "text": "will and i don't know that um as much we can do about it other than have you know try to tune our garbage",
    "start": "1958159",
    "end": "1964960"
  },
  {
    "text": "collectors for it um yeah",
    "start": "1964960",
    "end": "1970240"
  },
  {
    "text": "was another question there andy several but i think for interest time i'll give you one which is",
    "start": "1971919",
    "end": "1977360"
  },
  {
    "text": "what you're doing um when would you choose a class versus a record and vice versa i think um",
    "start": "1977360",
    "end": "1984559"
  },
  {
    "text": "i mean records really are classes with extra bells and whistles so when the defaults",
    "start": "1984559",
    "end": "1991200"
  },
  {
    "text": "of classes you know reference equality uh mutability when those things are not what you like what you need",
    "start": "1991200",
    "end": "1998000"
  },
  {
    "text": "um that's when you choose a record when you need to be value based and um potentially immutable",
    "start": "1998000",
    "end": "2004880"
  },
  {
    "text": "um typically you don't have to be immutable like i can totally have a record that's mutable",
    "start": "2004880",
    "end": "2010240"
  },
  {
    "text": "c-sharp doesn't prevent it in any way um but um you just have to be careful when you",
    "start": "2010240",
    "end": "2016399"
  },
  {
    "text": "have mutable reference types with valuability because you know you the hash code will",
    "start": "2016399",
    "end": "2023600"
  },
  {
    "text": "change over time and you stick that sucker in um in a in a hash table and you mutate it",
    "start": "2023600",
    "end": "2031360"
  },
  {
    "text": "you can you know it can never be found so um so they just you know there'll be",
    "start": "2031360",
    "end": "2037440"
  },
  {
    "text": "dragons um but yeah the the core choice really is",
    "start": "2037440",
    "end": "2042480"
  },
  {
    "text": "i i am working with data from the outside and i am and i'm treating it as data i'm",
    "start": "2042480",
    "end": "2048638"
  },
  {
    "text": "treating as values i don't care about the object i will have object identity it's a reference type but i don't care about it",
    "start": "2048639",
    "end": "2055200"
  },
  {
    "text": "um it's not the important part of it of the um of the data model you still have inheritance you see your",
    "start": "2055200",
    "end": "2061520"
  },
  {
    "text": "records inheriting from each other here get all that modeling that's sort of if you wanted to have",
    "start": "2061520",
    "end": "2067679"
  },
  {
    "text": "um discriminated unions like we might add some shorthands to c-sharp later to give you something like discriminated",
    "start": "2067679",
    "end": "2073679"
  },
  {
    "text": "unions from functional programming but this gets you a fair bit of the way in that you can have these value-oriented types that where",
    "start": "2073679",
    "end": "2081200"
  },
  {
    "text": "you can you can create a hierarchy to model the fact that there's a type with different multiple different",
    "start": "2081200",
    "end": "2086878"
  },
  {
    "text": "shapes so let's get you very far out of the way towards discriminated union style semantics",
    "start": "2086879",
    "end": "2093679"
  },
  {
    "text": "with that i think i will go to the last bit which is which is shorter so you shouldn't be too worried randy",
    "start": "2093679",
    "end": "2098800"
  },
  {
    "text": "um which is uh the the future um let me let me get this up on the",
    "start": "2098800",
    "end": "2105599"
  },
  {
    "text": "screen um so one thing that a few functional languages notably",
    "start": "2105599",
    "end": "2112480"
  },
  {
    "start": "2107000",
    "end": "2318000"
  },
  {
    "text": "haskell has really um has really nailed is in haskell",
    "start": "2112480",
    "end": "2117680"
  },
  {
    "text": "um they have this thing called type classes that allow you to",
    "start": "2117680",
    "end": "2122800"
  },
  {
    "text": "state you know to express that some types have abstract over some",
    "start": "2122800",
    "end": "2128560"
  },
  {
    "text": "types having a certain number of functions and then to say that",
    "start": "2128560",
    "end": "2134079"
  },
  {
    "text": "a given type satisfies that type class but when you say that when you witness",
    "start": "2134079",
    "end": "2139280"
  },
  {
    "text": "that as they say you can do that independently of the declaration of either the type class or",
    "start": "2139280",
    "end": "2144480"
  },
  {
    "text": "the concrete type so you kind of have a third place in the code where you put them together and that gives an amazing",
    "start": "2144480",
    "end": "2150320"
  },
  {
    "text": "amount of decoupling um that is a that is a bit of a tight coupling is a bit of a scourge of",
    "start": "2150320",
    "end": "2156400"
  },
  {
    "text": "a lot of programming including definitely object-oriented programming like in order to abstract over some in order",
    "start": "2156400",
    "end": "2161680"
  },
  {
    "text": "for a class to have to implement abstractions it has to implement an interface for instance and so it has to say right there that it",
    "start": "2161680",
    "end": "2168160"
  },
  {
    "text": "implements the interface it has to have pre-knowledge that it was going to be used in the context where the interface makes sense",
    "start": "2168160",
    "end": "2174960"
  },
  {
    "text": "and so it's been interesting for us to study is there's something we can learn from type classes and kind of flip them into a fully",
    "start": "2174960",
    "end": "2182400"
  },
  {
    "text": "object-oriented um uh feature set that um that could help us with that so",
    "start": "2182400",
    "end": "2189760"
  },
  {
    "text": "that's what i'm gonna show you here in the last two minutes so um one thing is that this whole idea of",
    "start": "2189760",
    "end": "2195359"
  },
  {
    "text": "functions on the outside they're sort of represented in c sharp by",
    "start": "2195359",
    "end": "2200960"
  },
  {
    "text": "by static members and many other many optogna languages and so if an interface could abstract over static members",
    "start": "2200960",
    "end": "2207440"
  },
  {
    "text": "like static properties and also operators which are overloaded in c sharp then we could say that implements",
    "start": "2207440",
    "end": "2213599"
  },
  {
    "text": "this particular thing that has a plus and a zero and if we constrain our generic by it",
    "start": "2213599",
    "end": "2218960"
  },
  {
    "text": "then we can now write generic numeric algorithms for instance so",
    "start": "2218960",
    "end": "2224640"
  },
  {
    "text": "that's kind of nice talking about the functions that apply to the type rather than just the instance members",
    "start": "2224640",
    "end": "2230640"
  },
  {
    "text": "but we still have the strong coupling here between the int type and it has to know about the imo night and implement",
    "start": "2230640",
    "end": "2236000"
  },
  {
    "text": "it but what so that's the problem here but what if you could instead say that somewhere else like what if",
    "start": "2236000",
    "end": "2242720"
  },
  {
    "text": "after the fact i could say well here's an extension that tells you if this is in scope for you",
    "start": "2242720",
    "end": "2248320"
  },
  {
    "text": "then it tells you that in 32 implements the imanoid interface right um as as a sort of like a third",
    "start": "2248320",
    "end": "2256800"
  },
  {
    "text": "party declaration in the scope of this declaration i i know that in 32 actually implements",
    "start": "2256800",
    "end": "2263440"
  },
  {
    "text": "this interface even though the two the the type and the interface didn't know about each other um inherently",
    "start": "2263440",
    "end": "2268640"
  },
  {
    "text": "and i can even say you know how it implements the interface in the cases where it doesn't already like it already has a plus operator so",
    "start": "2268640",
    "end": "2275200"
  },
  {
    "text": "that's implied but i can say i can i can explicitly specify here how the witness here can say exactly how",
    "start": "2275200",
    "end": "2282720"
  },
  {
    "text": "i implement this so that's sort of like a kind of direction that we are thinking about taking the type",
    "start": "2282720",
    "end": "2287839"
  },
  {
    "text": "system that can really um uh i mean it's going to be hard to do in",
    "start": "2287839",
    "end": "2293200"
  },
  {
    "text": "practice but we're working on it because it can really sort of affect",
    "start": "2293200",
    "end": "2298480"
  },
  {
    "text": "software development and decouple decoupling of components in a way that's",
    "start": "2298480",
    "end": "2303839"
  },
  {
    "text": "that object-oriented programming kind of needs so with that um i want to say",
    "start": "2303839",
    "end": "2310160"
  },
  {
    "text": "thanks a lot it's 9 40 and we should head over to the hallway to continue the conversation but",
    "start": "2310160",
    "end": "2316000"
  },
  {
    "text": "thank you so much it's been a pleasure",
    "start": "2316000",
    "end": "2320480"
  }
]