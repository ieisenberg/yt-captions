[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "foreign",
    "start": "0",
    "end": "2179"
  },
  {
    "text": "[Music]",
    "start": "3350",
    "end": "20060"
  },
  {
    "text": "Java how do you go about doing this and",
    "start": "20060",
    "end": "23760"
  },
  {
    "text": "indeed why would you even want to",
    "start": "23760",
    "end": "26640"
  },
  {
    "start": "25000",
    "end": "52000"
  },
  {
    "text": "we have a couple of libraries called",
    "start": "26640",
    "end": "29039"
  },
  {
    "text": "kind of called q and Chronicle map which",
    "start": "29039",
    "end": "31920"
  },
  {
    "text": "make extensive use of a library called",
    "start": "31920",
    "end": "34020"
  },
  {
    "text": "Chronicle bites which is",
    "start": "34020",
    "end": "36960"
  },
  {
    "text": "um where our support for this",
    "start": "36960",
    "end": "39660"
  },
  {
    "text": "functionality resides and as you can see",
    "start": "39660",
    "end": "42420"
  },
  {
    "text": "again a significant number of downloads",
    "start": "42420",
    "end": "44219"
  },
  {
    "text": "over 60 000 a month",
    "start": "44219",
    "end": "46800"
  },
  {
    "text": "and",
    "start": "46800",
    "end": "48120"
  },
  {
    "text": "um however you can use shared memory",
    "start": "48120",
    "end": "50100"
  },
  {
    "text": "directly yourself using plain Java",
    "start": "50100",
    "end": "54378"
  },
  {
    "start": "52000",
    "end": "205000"
  },
  {
    "text": "um it is used by a significant",
    "start": "54480",
    "end": "57180"
  },
  {
    "text": "proportion of all tier one Banks and",
    "start": "57180",
    "end": "60239"
  },
  {
    "text": "um off to access this kind of",
    "start": "60239",
    "end": "62460"
  },
  {
    "text": "functionality",
    "start": "62460",
    "end": "64619"
  },
  {
    "text": "so why would you want to do this",
    "start": "64619",
    "end": "66960"
  },
  {
    "text": "well",
    "start": "66960",
    "end": "68580"
  },
  {
    "text": "um when you have a series of",
    "start": "68580",
    "end": "70680"
  },
  {
    "text": "microservices",
    "start": "70680",
    "end": "72020"
  },
  {
    "text": "that need to talk to each other and they",
    "start": "72020",
    "end": "75360"
  },
  {
    "text": "need",
    "start": "75360",
    "end": "76260"
  },
  {
    "text": "um then they can do this via any kind of",
    "start": "76260",
    "end": "79380"
  },
  {
    "text": "messaging fraction fabric such as a",
    "start": "79380",
    "end": "82200"
  },
  {
    "text": "message bus",
    "start": "82200",
    "end": "84479"
  },
  {
    "text": "um uh HTTP",
    "start": "84479",
    "end": "86960"
  },
  {
    "text": "TCP there's a variety of means of doing",
    "start": "86960",
    "end": "90479"
  },
  {
    "text": "this however",
    "start": "90479",
    "end": "91860"
  },
  {
    "text": "if you use shared memory then this is",
    "start": "91860",
    "end": "94200"
  },
  {
    "text": "one of the fastest ways of passing data",
    "start": "94200",
    "end": "97920"
  },
  {
    "text": "between",
    "start": "97920",
    "end": "99020"
  },
  {
    "text": "processes because it's all literally in",
    "start": "99020",
    "end": "102240"
  },
  {
    "text": "memory and you're accessing the same",
    "start": "102240",
    "end": "105900"
  },
  {
    "text": "data the same bytes from multiple",
    "start": "105900",
    "end": "108000"
  },
  {
    "text": "processes at the same time",
    "start": "108000",
    "end": "110100"
  },
  {
    "text": "now add a bonus to this is that if you",
    "start": "110100",
    "end": "112439"
  },
  {
    "text": "use a memory map file then that data is",
    "start": "112439",
    "end": "115020"
  },
  {
    "text": "also",
    "start": "115020",
    "end": "116180"
  },
  {
    "text": "persisted it can be the size of your",
    "start": "116180",
    "end": "120360"
  },
  {
    "text": "available disk space so it's not limited",
    "start": "120360",
    "end": "122159"
  },
  {
    "text": "by your HEAP size or even your main",
    "start": "122159",
    "end": "123780"
  },
  {
    "text": "memory it can actually be very large so",
    "start": "123780",
    "end": "127079"
  },
  {
    "text": "you've got access to",
    "start": "127079",
    "end": "129000"
  },
  {
    "text": "um a lot a larger area of storage",
    "start": "129000",
    "end": "133800"
  },
  {
    "text": "and um and indeed there is no broker",
    "start": "133800",
    "end": "137700"
  },
  {
    "text": "involved in this situation the only only",
    "start": "137700",
    "end": "141300"
  },
  {
    "text": "agent that is working on your behalf in",
    "start": "141300",
    "end": "143520"
  },
  {
    "text": "the background is in fact the OS so even",
    "start": "143520",
    "end": "147420"
  },
  {
    "text": "if every process dies but the OS keeps",
    "start": "147420",
    "end": "150060"
  },
  {
    "text": "running all of the data gets persisted",
    "start": "150060",
    "end": "152580"
  },
  {
    "text": "to disk and then the situation where the",
    "start": "152580",
    "end": "155459"
  },
  {
    "text": "machine itself dies we've got h a uh",
    "start": "155459",
    "end": "159300"
  },
  {
    "text": "um options available for creating",
    "start": "159300",
    "end": "162060"
  },
  {
    "text": "redundant copies across machines but in",
    "start": "162060",
    "end": "165540"
  },
  {
    "text": "terms of using memory amount files you",
    "start": "165540",
    "end": "167700"
  },
  {
    "text": "can do this All in One machine in open",
    "start": "167700",
    "end": "170340"
  },
  {
    "text": "source",
    "start": "170340",
    "end": "172680"
  },
  {
    "text": "um so so one of the key things is that",
    "start": "172680",
    "end": "174959"
  },
  {
    "text": "there's no not only no broker involved",
    "start": "174959",
    "end": "178080"
  },
  {
    "text": "that's going to add latency but there's",
    "start": "178080",
    "end": "179760"
  },
  {
    "text": "no system and calls made on a per",
    "start": "179760",
    "end": "181920"
  },
  {
    "text": "message basis it's observable so you can",
    "start": "181920",
    "end": "184980"
  },
  {
    "text": "see every message and it's stored in",
    "start": "184980",
    "end": "188700"
  },
  {
    "text": "files which you can read from any",
    "start": "188700",
    "end": "190920"
  },
  {
    "text": "process it doesn't have to be running at",
    "start": "190920",
    "end": "193200"
  },
  {
    "text": "the time it can be run much later and",
    "start": "193200",
    "end": "195840"
  },
  {
    "text": "you can get",
    "start": "195840",
    "end": "197239"
  },
  {
    "text": "latencies between processes including",
    "start": "197239",
    "end": "200400"
  },
  {
    "text": "serialization that are around the",
    "start": "200400",
    "end": "202800"
  },
  {
    "text": "microsecond or less",
    "start": "202800",
    "end": "206000"
  },
  {
    "start": "205000",
    "end": "277000"
  },
  {
    "text": "um one of the things to note is that",
    "start": "206459",
    "end": "208200"
  },
  {
    "text": "we're actually dealing at a extremely",
    "start": "208200",
    "end": "210120"
  },
  {
    "text": "low level at this point and in fact",
    "start": "210120",
    "end": "212459"
  },
  {
    "text": "we're dealing at the level where you're",
    "start": "212459",
    "end": "214500"
  },
  {
    "text": "um got",
    "start": "214500",
    "end": "215400"
  },
  {
    "text": "um uh it's your L2 cache coherency bus",
    "start": "215400",
    "end": "219060"
  },
  {
    "text": "uh typically that's involved in",
    "start": "219060",
    "end": "222080"
  },
  {
    "text": "exchanging data between threads so this",
    "start": "222080",
    "end": "225420"
  },
  {
    "text": "is done on chip at the hardware level",
    "start": "225420",
    "end": "227700"
  },
  {
    "text": "and as you can see you actually get a",
    "start": "227700",
    "end": "231239"
  },
  {
    "text": "pattern of usage in terms of latency so",
    "start": "231239",
    "end": "234659"
  },
  {
    "text": "if you've got a dual socket Zeon then",
    "start": "234659",
    "end": "237540"
  },
  {
    "text": "everything on the same socket",
    "start": "237540",
    "end": "239940"
  },
  {
    "text": "communicates fast but you do see an",
    "start": "239940",
    "end": "243540"
  },
  {
    "text": "added delay if you go from one socket to",
    "start": "243540",
    "end": "245519"
  },
  {
    "text": "another",
    "start": "245519",
    "end": "246260"
  },
  {
    "text": "in the Epic processes they have core",
    "start": "246260",
    "end": "249959"
  },
  {
    "text": "complexes and within a core complex you",
    "start": "249959",
    "end": "252599"
  },
  {
    "text": "get very low latencies to actually get",
    "start": "252599",
    "end": "254340"
  },
  {
    "text": "even lower latencies because it's a",
    "start": "254340",
    "end": "256139"
  },
  {
    "text": "small complex but then between complexes",
    "start": "256139",
    "end": "258780"
  },
  {
    "text": "even on the same socket you get higher",
    "start": "258780",
    "end": "261239"
  },
  {
    "text": "latencies and you get higher latencies",
    "start": "261239",
    "end": "262919"
  },
  {
    "text": "again if you go between sockets so um",
    "start": "262919",
    "end": "266280"
  },
  {
    "text": "certainly with AMD you have to be much",
    "start": "266280",
    "end": "268320"
  },
  {
    "text": "more aware of the internal structure of",
    "start": "268320",
    "end": "271979"
  },
  {
    "text": "your CPU if you want to maximize",
    "start": "271979",
    "end": "273979"
  },
  {
    "text": "performance and minimize latency",
    "start": "273979",
    "end": "277940"
  },
  {
    "start": "277000",
    "end": "370000"
  },
  {
    "text": "in terms of what can you get with real",
    "start": "277940",
    "end": "281340"
  },
  {
    "text": "machines so here's an example of a sort",
    "start": "281340",
    "end": "284580"
  },
  {
    "text": "of latencies that you can achieve",
    "start": "284580",
    "end": "286460"
  },
  {
    "text": "passing a quarter of kilobyte messages",
    "start": "286460",
    "end": "289620"
  },
  {
    "text": "and 100 messages a second which is a",
    "start": "289620",
    "end": "292020"
  },
  {
    "text": "fairly good rate and you can see that",
    "start": "292020",
    "end": "295680"
  },
  {
    "text": "you get typical latencies that are",
    "start": "295680",
    "end": "298500"
  },
  {
    "text": "around 400 nanoseconds about 0.4",
    "start": "298500",
    "end": "301440"
  },
  {
    "text": "microseconds or um",
    "start": "301440",
    "end": "303780"
  },
  {
    "text": "two thousand five hundredths of a",
    "start": "303780",
    "end": "306300"
  },
  {
    "text": "millisecond",
    "start": "306300",
    "end": "307759"
  },
  {
    "text": "that's typical latency",
    "start": "307759",
    "end": "310320"
  },
  {
    "text": "um you in the three nines the worst one",
    "start": "310320",
    "end": "312900"
  },
  {
    "text": "in a thousand that can be between 1 and",
    "start": "312900",
    "end": "316320"
  },
  {
    "text": "40 microseconds depending on uh use case",
    "start": "316320",
    "end": "321479"
  },
  {
    "text": "um it's interesting to see that uh the",
    "start": "321479",
    "end": "324120"
  },
  {
    "text": "outliers on a virtual machine are as",
    "start": "324120",
    "end": "326820"
  },
  {
    "text": "high as replicating data across",
    "start": "326820",
    "end": "329580"
  },
  {
    "text": "different machines so it is quite quite",
    "start": "329580",
    "end": "333360"
  },
  {
    "text": "a high outlier if you if you don't use",
    "start": "333360",
    "end": "335100"
  },
  {
    "text": "the virtual machine however you can get",
    "start": "335100",
    "end": "337740"
  },
  {
    "text": "the typical lenses it can be just as",
    "start": "337740",
    "end": "340139"
  },
  {
    "text": "good as bare metal so it really depends",
    "start": "340139",
    "end": "343979"
  },
  {
    "text": "on how sensitive you are to Jitter as to",
    "start": "343979",
    "end": "346139"
  },
  {
    "text": "whether using a virtual machine matters",
    "start": "346139",
    "end": "348419"
  },
  {
    "text": "to you or not",
    "start": "348419",
    "end": "349970"
  },
  {
    "text": "[Music]",
    "start": "349970",
    "end": "350520"
  },
  {
    "text": "um",
    "start": "350520",
    "end": "351419"
  },
  {
    "text": "for comparison",
    "start": "351419",
    "end": "353280"
  },
  {
    "text": "um I've done some benchmarks on Kafka",
    "start": "353280",
    "end": "356060"
  },
  {
    "text": "and as you can see at this rate 100 000",
    "start": "356060",
    "end": "359699"
  },
  {
    "text": "messages in a second you're getting",
    "start": "359699",
    "end": "361380"
  },
  {
    "text": "typical latencies that are at least",
    "start": "361380",
    "end": "364139"
  },
  {
    "text": "around three orders of magnitude higher",
    "start": "364139",
    "end": "366840"
  },
  {
    "text": "uh if not more",
    "start": "366840",
    "end": "370039"
  },
  {
    "start": "370000",
    "end": "555000"
  },
  {
    "text": "so utilizing memory mapping has been",
    "start": "370919",
    "end": "374160"
  },
  {
    "text": "available in Java since Java 1.4",
    "start": "374160",
    "end": "378180"
  },
  {
    "text": "um and um it's fairly easy to do you",
    "start": "378180",
    "end": "382020"
  },
  {
    "text": "just create a mapping to the same file",
    "start": "382020",
    "end": "385759"
  },
  {
    "text": "in multiple processes at the same time",
    "start": "385759",
    "end": "388440"
  },
  {
    "text": "and you're sharing them the same data",
    "start": "388440",
    "end": "391340"
  },
  {
    "text": "now one of the disadvantage one of the",
    "start": "391340",
    "end": "394620"
  },
  {
    "text": "many disadvantages is that this is not",
    "start": "394620",
    "end": "396479"
  },
  {
    "text": "actually thread safe",
    "start": "396479",
    "end": "398360"
  },
  {
    "text": "another major disadvantage is that when",
    "start": "398360",
    "end": "401819"
  },
  {
    "text": "Java 1 4 was created",
    "start": "401819",
    "end": "404280"
  },
  {
    "text": "um having a uh assigned int as the size",
    "start": "404280",
    "end": "408060"
  },
  {
    "text": "which is up to two not quite two",
    "start": "408060",
    "end": "410039"
  },
  {
    "text": "gigabytes then um that's that seemed",
    "start": "410039",
    "end": "413520"
  },
  {
    "text": "like a pretty good memory mapping size",
    "start": "413520",
    "end": "416280"
  },
  {
    "text": "but um these days uh limiting yourself",
    "start": "416280",
    "end": "420000"
  },
  {
    "text": "to two gigabytes is something that the",
    "start": "420000",
    "end": "422520"
  },
  {
    "text": "constraint it would be much nicer to",
    "start": "422520",
    "end": "424500"
  },
  {
    "text": "have",
    "start": "424500",
    "end": "425300"
  },
  {
    "text": "to be able to much larger regions",
    "start": "425300",
    "end": "429000"
  },
  {
    "text": "um and uh certainly that's what our",
    "start": "429000",
    "end": "432060"
  },
  {
    "text": "library does",
    "start": "432060",
    "end": "433580"
  },
  {
    "text": "you can use",
    "start": "433580",
    "end": "435979"
  },
  {
    "text": "it unsafe which is a built-in class",
    "start": "435979",
    "end": "438960"
  },
  {
    "text": "which you shouldn't use ideally but",
    "start": "438960",
    "end": "443400"
  },
  {
    "text": "sometimes is is still the best option",
    "start": "443400",
    "end": "446340"
  },
  {
    "text": "compared to say using jni to do the same",
    "start": "446340",
    "end": "449220"
  },
  {
    "text": "thing it's not only more performant than",
    "start": "449220",
    "end": "451259"
  },
  {
    "text": "jni but it's actually probably less",
    "start": "451259",
    "end": "453840"
  },
  {
    "text": "buggy than trying to write your own gni",
    "start": "453840",
    "end": "456479"
  },
  {
    "text": "to do it",
    "start": "456479",
    "end": "458900"
  },
  {
    "text": "um so you can um there's a posix library",
    "start": "458940",
    "end": "461460"
  },
  {
    "text": "that we produce that has things such as",
    "start": "461460",
    "end": "464819"
  },
  {
    "text": "memory mapping and a lot of other the",
    "start": "464819",
    "end": "467220"
  },
  {
    "text": "low-level system calls that relate to",
    "start": "467220",
    "end": "469199"
  },
  {
    "text": "files and memory",
    "start": "469199",
    "end": "472680"
  },
  {
    "text": "um see that's another means of and this",
    "start": "472680",
    "end": "474840"
  },
  {
    "text": "will support",
    "start": "474840",
    "end": "477539"
  },
  {
    "text": "um uh 64-bit long sizes",
    "start": "477539",
    "end": "481860"
  },
  {
    "text": "however you can also use a library we",
    "start": "481919",
    "end": "485220"
  },
  {
    "text": "have called map bites what map bytes",
    "start": "485220",
    "end": "488280"
  },
  {
    "text": "does is it adds in things like thread",
    "start": "488280",
    "end": "490380"
  },
  {
    "text": "safety",
    "start": "490380",
    "end": "491580"
  },
  {
    "text": "um 63-bit sizes it can also",
    "start": "491580",
    "end": "496340"
  },
  {
    "text": "allocate data in chunks so as the file",
    "start": "496340",
    "end": "500879"
  },
  {
    "text": "you can treat it as if it's a massive",
    "start": "500879",
    "end": "503220"
  },
  {
    "text": "file up to 128 terabytes but in reality",
    "start": "503220",
    "end": "508580"
  },
  {
    "text": "it only allocates chunks of data as",
    "start": "508580",
    "end": "512520"
  },
  {
    "text": "needed now that's particularly useful on",
    "start": "512520",
    "end": "515580"
  },
  {
    "text": "Windows and um",
    "start": "515580",
    "end": "517979"
  },
  {
    "text": "uh Mac OS where space sparse files",
    "start": "517979",
    "end": "520740"
  },
  {
    "text": "aren't available but on Linux you can",
    "start": "520740",
    "end": "522779"
  },
  {
    "text": "actually have a sparse file where you",
    "start": "522779",
    "end": "524279"
  },
  {
    "text": "just create a huge region of a half a",
    "start": "524279",
    "end": "527760"
  },
  {
    "text": "terabyte or more and then you only the",
    "start": "527760",
    "end": "531360"
  },
  {
    "text": "pages you actually touch to get turned",
    "start": "531360",
    "end": "533760"
  },
  {
    "text": "into actually real memory or disk space",
    "start": "533760",
    "end": "537560"
  },
  {
    "text": "[Music]",
    "start": "537730",
    "end": "538140"
  },
  {
    "text": "um",
    "start": "538140",
    "end": "539100"
  },
  {
    "text": "so another thing that finds it adds is a",
    "start": "539100",
    "end": "542160"
  },
  {
    "text": "number of complex operations such as",
    "start": "542160",
    "end": "544019"
  },
  {
    "text": "utfe Reading Writing utf-8 strings that",
    "start": "544019",
    "end": "547320"
  },
  {
    "text": "are object pulled as well as support for",
    "start": "547320",
    "end": "552060"
  },
  {
    "text": "data structures enums and so on",
    "start": "552060",
    "end": "556279"
  },
  {
    "start": "555000",
    "end": "658000"
  },
  {
    "text": "now um Java has increasingly improved",
    "start": "556279",
    "end": "560760"
  },
  {
    "text": "its support for off-heat memory and one",
    "start": "560760",
    "end": "563940"
  },
  {
    "text": "of the first ones of these is uh of the",
    "start": "563940",
    "end": "567120"
  },
  {
    "text": "foreign memory access API which had",
    "start": "567120",
    "end": "568980"
  },
  {
    "text": "first appeared in Java 14. note this is",
    "start": "568980",
    "end": "571620"
  },
  {
    "text": "an incubator implementation",
    "start": "571620",
    "end": "575399"
  },
  {
    "text": "and in Java 15 a second incubator Java",
    "start": "575399",
    "end": "579300"
  },
  {
    "text": "16 further iteration uh Java 16 also",
    "start": "579300",
    "end": "584100"
  },
  {
    "text": "introduced a library which is related",
    "start": "584100",
    "end": "586440"
  },
  {
    "text": "it's called the foreign Linker API which",
    "start": "586440",
    "end": "589200"
  },
  {
    "text": "allows you to",
    "start": "589200",
    "end": "590720"
  },
  {
    "text": "directly interact with a code that's",
    "start": "590720",
    "end": "594959"
  },
  {
    "text": "written in C",
    "start": "594959",
    "end": "597240"
  },
  {
    "text": "um and obviously that has a lot of",
    "start": "597240",
    "end": "599640"
  },
  {
    "text": "crossover and usage",
    "start": "599640",
    "end": "602580"
  },
  {
    "text": "um driver 17 has a further incubator",
    "start": "602580",
    "end": "606839"
  },
  {
    "text": "um iteration and this adds a lot of the",
    "start": "606839",
    "end": "610860"
  },
  {
    "text": "functionality that we need but",
    "start": "610860",
    "end": "613019"
  },
  {
    "text": "unfortunately it's still incubator and",
    "start": "613019",
    "end": "615000"
  },
  {
    "text": "in particular if you",
    "start": "615000",
    "end": "617279"
  },
  {
    "text": "um use it so there's Java 18 as a second",
    "start": "617279",
    "end": "620820"
  },
  {
    "text": "incubator for it Java 19 has fortunately",
    "start": "620820",
    "end": "624360"
  },
  {
    "text": "now it's elevated itself to preview",
    "start": "624360",
    "end": "627720"
  },
  {
    "text": "stage which means that it's it's the",
    "start": "627720",
    "end": "630240"
  },
  {
    "text": "final stage before actually being no",
    "start": "630240",
    "end": "632580"
  },
  {
    "text": "longer incubator no longer having an",
    "start": "632580",
    "end": "634440"
  },
  {
    "text": "unstable API",
    "start": "634440",
    "end": "636019"
  },
  {
    "text": "and",
    "start": "636019",
    "end": "637680"
  },
  {
    "text": "um hopefully by the time we get to the",
    "start": "637680",
    "end": "639660"
  },
  {
    "text": "next long term support release which is",
    "start": "639660",
    "end": "641580"
  },
  {
    "text": "Java 21 we will see",
    "start": "641580",
    "end": "645720"
  },
  {
    "text": "um uh something that will help us",
    "start": "645720",
    "end": "647760"
  },
  {
    "text": "migrate away from jni and I'm safe and a",
    "start": "647760",
    "end": "651240"
  },
  {
    "text": "lot of other libraries which are used",
    "start": "651240",
    "end": "652620"
  },
  {
    "text": "for binding to C libraries and I highly",
    "start": "652620",
    "end": "655740"
  },
  {
    "text": "recommend you have a look at this video",
    "start": "655740",
    "end": "658440"
  },
  {
    "start": "658000",
    "end": "761000"
  },
  {
    "text": "um",
    "start": "658440",
    "end": "659220"
  },
  {
    "text": "so uh here's an example of using memory",
    "start": "659220",
    "end": "661920"
  },
  {
    "text": "mappings uh using the new API",
    "start": "661920",
    "end": "665579"
  },
  {
    "text": "um one of the things to note is that",
    "start": "665579",
    "end": "667560"
  },
  {
    "text": "this this API doesn't actually compile",
    "start": "667560",
    "end": "669779"
  },
  {
    "text": "into other 19 because as I mentioned",
    "start": "669779",
    "end": "671880"
  },
  {
    "text": "it's using an incubator library that can",
    "start": "671880",
    "end": "674940"
  },
  {
    "text": "change apis over time",
    "start": "674940",
    "end": "678120"
  },
  {
    "text": "um which is why I look forward to the",
    "start": "678120",
    "end": "679860"
  },
  {
    "text": "day it will become stable",
    "start": "679860",
    "end": "681959"
  },
  {
    "text": "how and another thing which is uh takes",
    "start": "681959",
    "end": "686820"
  },
  {
    "text": "a little bit of time to get your head",
    "start": "686820",
    "end": "688019"
  },
  {
    "text": "around is that the um a lot of these uh",
    "start": "688019",
    "end": "691620"
  },
  {
    "text": "parameters to these methods are um uh uh",
    "start": "691620",
    "end": "695339"
  },
  {
    "text": "all um they're untyped so you don't know",
    "start": "695339",
    "end": "699180"
  },
  {
    "text": "if you only know at runtime whether it's",
    "start": "699180",
    "end": "700980"
  },
  {
    "text": "going to work or not and it makes it",
    "start": "700980",
    "end": "703380"
  },
  {
    "text": "difficult to work out what are all the",
    "start": "703380",
    "end": "705660"
  },
  {
    "text": "valid combinations for these methods",
    "start": "705660",
    "end": "709380"
  },
  {
    "text": "um that's partly to deliberate to make",
    "start": "709380",
    "end": "711480"
  },
  {
    "text": "so that the API doesn't become enormous",
    "start": "711480",
    "end": "714060"
  },
  {
    "text": "like it could do if you were to go",
    "start": "714060",
    "end": "716700"
  },
  {
    "text": "through every permutation that's valid",
    "start": "716700",
    "end": "719060"
  },
  {
    "text": "however it does mean that you uh it's a",
    "start": "719060",
    "end": "722220"
  },
  {
    "text": "little bit of um uh head scratching to",
    "start": "722220",
    "end": "724860"
  },
  {
    "text": "fine combinations that actually work and",
    "start": "724860",
    "end": "727980"
  },
  {
    "text": "that like I said those combinations are",
    "start": "727980",
    "end": "729839"
  },
  {
    "text": "not the same between versions of java",
    "start": "729839",
    "end": "731579"
  },
  {
    "text": "either so it's a little bit of a",
    "start": "731579",
    "end": "733920"
  },
  {
    "text": "challenge but what you find what you may",
    "start": "733920",
    "end": "736860"
  },
  {
    "text": "find interesting is that this is",
    "start": "736860",
    "end": "738240"
  },
  {
    "text": "actually creating a memory region uh off",
    "start": "738240",
    "end": "741420"
  },
  {
    "text": "Heap on a file that's half a terabyte so",
    "start": "741420",
    "end": "745820"
  },
  {
    "text": "512 shifted by 30 is um is half a",
    "start": "745820",
    "end": "750240"
  },
  {
    "text": "terabyte and that's a massive area of",
    "start": "750240",
    "end": "754140"
  },
  {
    "text": "virtual memory so it's only virtual",
    "start": "754140",
    "end": "755820"
  },
  {
    "text": "there's no there's no it's not actually",
    "start": "755820",
    "end": "757620"
  },
  {
    "text": "using real memory physical memory it's",
    "start": "757620",
    "end": "759360"
  },
  {
    "text": "not using a disk either",
    "start": "759360",
    "end": "762920"
  },
  {
    "start": "761000",
    "end": "848000"
  },
  {
    "text": "um so why would you do this what what",
    "start": "763440",
    "end": "765620"
  },
  {
    "text": "use does it have well the simplest use",
    "start": "765620",
    "end": "769680"
  },
  {
    "text": "case we have for this kind of thing is",
    "start": "769680",
    "end": "772260"
  },
  {
    "text": "in generating unique timestamps and",
    "start": "772260",
    "end": "775740"
  },
  {
    "text": "these are unique across an entire",
    "start": "775740",
    "end": "777899"
  },
  {
    "text": "Machine by default so and the way that's",
    "start": "777899",
    "end": "781800"
  },
  {
    "text": "coordinated is that we get a high",
    "start": "781800",
    "end": "783660"
  },
  {
    "text": "resolution timestamp like a nanosecond",
    "start": "783660",
    "end": "785940"
  },
  {
    "text": "timestamp and then we look at the most",
    "start": "785940",
    "end": "788820"
  },
  {
    "text": "recent timestamp that anything on this",
    "start": "788820",
    "end": "791100"
  },
  {
    "text": "machine is produced by looking in shared",
    "start": "791100",
    "end": "794160"
  },
  {
    "text": "memory and we ensure that it's greater",
    "start": "794160",
    "end": "798120"
  },
  {
    "text": "than the previous value we also embed in",
    "start": "798120",
    "end": "802380"
  },
  {
    "text": "that a host ID so that we can actually",
    "start": "802380",
    "end": "805380"
  },
  {
    "text": "have up to 100 different nodes producing",
    "start": "805380",
    "end": "809519"
  },
  {
    "text": "unique time stamps across them without",
    "start": "809519",
    "end": "811440"
  },
  {
    "text": "having to coordinate anything so you'll",
    "start": "811440",
    "end": "813480"
  },
  {
    "text": "only need to have a coordinated host ID",
    "start": "813480",
    "end": "815760"
  },
  {
    "text": "and then you can guarantee that every",
    "start": "815760",
    "end": "817800"
  },
  {
    "text": "time stamp",
    "start": "817800",
    "end": "819240"
  },
  {
    "text": "becomes a unique ID that can be used",
    "start": "819240",
    "end": "821339"
  },
  {
    "text": "across many machines so in the happy",
    "start": "821339",
    "end": "824100"
  },
  {
    "text": "path the time is greater than the",
    "start": "824100",
    "end": "826980"
  },
  {
    "text": "previous time and therefore it just",
    "start": "826980",
    "end": "828779"
  },
  {
    "text": "returns it however if if the time isn't",
    "start": "828779",
    "end": "832260"
  },
  {
    "text": "greater then it has to go through a loop",
    "start": "832260",
    "end": "834959"
  },
  {
    "text": "it finds the most recent times it finds",
    "start": "834959",
    "end": "838200"
  },
  {
    "text": "the next time that would be valid for",
    "start": "838200",
    "end": "840600"
  },
  {
    "text": "that machine and then tries that and it",
    "start": "840600",
    "end": "842519"
  },
  {
    "text": "just goes around and rounded circles",
    "start": "842519",
    "end": "844019"
  },
  {
    "text": "until eventually it's able to allocate a",
    "start": "844019",
    "end": "847260"
  },
  {
    "text": "new time stamp",
    "start": "847260",
    "end": "848880"
  },
  {
    "start": "848000",
    "end": "874000"
  },
  {
    "text": "the way this looks is is more natural",
    "start": "848880",
    "end": "852839"
  },
  {
    "text": "and say uuid because it is a timestamp",
    "start": "852839",
    "end": "855600"
  },
  {
    "text": "it's readable it has the time in it down",
    "start": "855600",
    "end": "858420"
  },
  {
    "text": "to a tenth of a microsecond resolution",
    "start": "858420",
    "end": "861660"
  },
  {
    "text": "but it also has a host ID embedded in",
    "start": "861660",
    "end": "864959"
  },
  {
    "text": "there as well so you can see just by",
    "start": "864959",
    "end": "867060"
  },
  {
    "text": "reading a timestamp which is reasonably",
    "start": "867060",
    "end": "869040"
  },
  {
    "text": "natural to read you can get a lot of",
    "start": "869040",
    "end": "871320"
  },
  {
    "text": "information and it's human readable",
    "start": "871320",
    "end": "875040"
  },
  {
    "start": "874000",
    "end": "936000"
  },
  {
    "text": "not only that is that um no uuid is is",
    "start": "875040",
    "end": "879180"
  },
  {
    "text": "it's a very fast function all the same",
    "start": "879180",
    "end": "881339"
  },
  {
    "text": "however it does create garbage and it is",
    "start": "881339",
    "end": "884399"
  },
  {
    "text": "still substantially slower",
    "start": "884399",
    "end": "886320"
  },
  {
    "text": "um it's um it's about six to seven times",
    "start": "886320",
    "end": "889440"
  },
  {
    "text": "slower than and doing uh everything that",
    "start": "889440",
    "end": "892260"
  },
  {
    "text": "I just mentioned",
    "start": "892260",
    "end": "894060"
  },
  {
    "text": "um and at the same time there's a good",
    "start": "894060",
    "end": "896639"
  },
  {
    "text": "chance that you will also want a",
    "start": "896639",
    "end": "899279"
  },
  {
    "text": "timestamp when you when you create a new",
    "start": "899279",
    "end": "901500"
  },
  {
    "text": "event or a new request so that you want",
    "start": "901500",
    "end": "903480"
  },
  {
    "text": "to create a unique ID so you can make",
    "start": "903480",
    "end": "905820"
  },
  {
    "text": "that request unique but at the same time",
    "start": "905820",
    "end": "908100"
  },
  {
    "text": "you probably want a timestamp in there",
    "start": "908100",
    "end": "910680"
  },
  {
    "text": "so that you know when uh it was created",
    "start": "910680",
    "end": "912839"
  },
  {
    "text": "so you haven't really saved very much",
    "start": "912839",
    "end": "916260"
  },
  {
    "text": "um and so creating this sort of unique",
    "start": "916260",
    "end": "918600"
  },
  {
    "text": "timestamp does is a two for one and it's",
    "start": "918600",
    "end": "921600"
  },
  {
    "text": "substantially faster and and it's able",
    "start": "921600",
    "end": "924720"
  },
  {
    "text": "to do this because",
    "start": "924720",
    "end": "927000"
  },
  {
    "text": "um it every time stamp on a on a given",
    "start": "927000",
    "end": "929940"
  },
  {
    "text": "host uses shared memory to ensure that",
    "start": "929940",
    "end": "933959"
  },
  {
    "text": "that time stamp will be unique",
    "start": "933959",
    "end": "936899"
  },
  {
    "start": "936000",
    "end": "996000"
  },
  {
    "text": "and monatomically increasing",
    "start": "936899",
    "end": "940139"
  },
  {
    "text": "now in a more complex example we use",
    "start": "940139",
    "end": "943760"
  },
  {
    "text": "shared memory for storing our data in",
    "start": "943760",
    "end": "946740"
  },
  {
    "text": "queues so these are event stores they're",
    "start": "946740",
    "end": "949860"
  },
  {
    "text": "append only and some and and this is a",
    "start": "949860",
    "end": "953220"
  },
  {
    "text": "dump of the some of the housekeeping",
    "start": "953220",
    "end": "955320"
  },
  {
    "text": "information that's associated with each",
    "start": "955320",
    "end": "957660"
  },
  {
    "text": "queue and you can see that there's a",
    "start": "957660",
    "end": "960060"
  },
  {
    "text": "string key and a long value associated",
    "start": "960060",
    "end": "963540"
  },
  {
    "text": "with it down the screen and those longs",
    "start": "963540",
    "end": "966899"
  },
  {
    "text": "can be used for storing information like",
    "start": "966899",
    "end": "969540"
  },
  {
    "text": "locks and working out what the most",
    "start": "969540",
    "end": "972540"
  },
  {
    "text": "recent roll Cycles are and how much is",
    "start": "972540",
    "end": "975740"
  },
  {
    "text": "what this mod count is so these that is",
    "start": "975740",
    "end": "981060"
  },
  {
    "text": "all done in shared memory and we've got",
    "start": "981060",
    "end": "983339"
  },
  {
    "text": "tooling that will allow you to dump out",
    "start": "983339",
    "end": "986459"
  },
  {
    "text": "this this binary format as yaml you can",
    "start": "986459",
    "end": "989760"
  },
  {
    "text": "also do the reverse uh so that it's easy",
    "start": "989760",
    "end": "993000"
  },
  {
    "text": "to read as well and to manipulate and",
    "start": "993000",
    "end": "994920"
  },
  {
    "text": "test",
    "start": "994920",
    "end": "997100"
  },
  {
    "start": "996000",
    "end": "1008000"
  },
  {
    "text": "so we have a working example of this",
    "start": "997440",
    "end": "1000259"
  },
  {
    "text": "which is open source everything I've",
    "start": "1000259",
    "end": "1002779"
  },
  {
    "text": "mentioned",
    "start": "1002779",
    "end": "1003740"
  },
  {
    "text": "um to do with keywords or open source",
    "start": "1003740",
    "end": "1005660"
  },
  {
    "text": "and apache2 so you can try them out",
    "start": "1005660",
    "end": "1008180"
  },
  {
    "start": "1008000",
    "end": "1109000"
  },
  {
    "text": "yourself",
    "start": "1008180",
    "end": "1009680"
  },
  {
    "text": "um so in this demo",
    "start": "1009680",
    "end": "1011600"
  },
  {
    "text": "um we're looking at how do we create uh",
    "start": "1011600",
    "end": "1014660"
  },
  {
    "text": "we how do we test",
    "start": "1014660",
    "end": "1016540"
  },
  {
    "text": "these microservices that are using",
    "start": "1016540",
    "end": "1019220"
  },
  {
    "text": "shared memory for passing data between",
    "start": "1019220",
    "end": "1021860"
  },
  {
    "text": "them",
    "start": "1021860",
    "end": "1022959"
  },
  {
    "text": "and so what we we don't",
    "start": "1022959",
    "end": "1026000"
  },
  {
    "text": "um one of the the challenges of using",
    "start": "1026000",
    "end": "1028819"
  },
  {
    "text": "really low level interaction with memory",
    "start": "1028819",
    "end": "1032058"
  },
  {
    "text": "or off Heap is how do you test it how do",
    "start": "1032059",
    "end": "1034760"
  },
  {
    "text": "you debug it when something goes wrong",
    "start": "1034760",
    "end": "1036980"
  },
  {
    "text": "how do you see what's going on and and",
    "start": "1036980",
    "end": "1039678"
  },
  {
    "text": "the way we deal with that is to create a",
    "start": "1039679",
    "end": "1042438"
  },
  {
    "text": "much higher level interface which is",
    "start": "1042439",
    "end": "1044360"
  },
  {
    "text": "where you would be naturally working",
    "start": "1044360",
    "end": "1047178"
  },
  {
    "text": "um to do with events coming in and out",
    "start": "1047179",
    "end": "1049220"
  },
  {
    "text": "and so you're not dealing with the",
    "start": "1049220",
    "end": "1051740"
  },
  {
    "text": "low-level uh bites",
    "start": "1051740",
    "end": "1054200"
  },
  {
    "text": "um unless you really need to you can go",
    "start": "1054200",
    "end": "1056419"
  },
  {
    "text": "down to that level but for the most part",
    "start": "1056419",
    "end": "1058520"
  },
  {
    "text": "to start with you should focus on the",
    "start": "1058520",
    "end": "1060500"
  },
  {
    "text": "business logic and do Behavior driven",
    "start": "1060500",
    "end": "1062600"
  },
  {
    "text": "development first for your event-driven",
    "start": "1062600",
    "end": "1065000"
  },
  {
    "text": "system and then you can you can go down",
    "start": "1065000",
    "end": "1067760"
  },
  {
    "text": "to the to the bytes and try and get out",
    "start": "1067760",
    "end": "1070640"
  },
  {
    "text": "every nanosecond",
    "start": "1070640",
    "end": "1072740"
  },
  {
    "text": "um where it makes sense to spend your",
    "start": "1072740",
    "end": "1074780"
  },
  {
    "text": "time doing that obviously the more you",
    "start": "1074780",
    "end": "1077120"
  },
  {
    "text": "tune it the harder it is to maintain so",
    "start": "1077120",
    "end": "1080179"
  },
  {
    "text": "there there's a trade-off there and and",
    "start": "1080179",
    "end": "1082039"
  },
  {
    "text": "certainly at the start of a project you",
    "start": "1082039",
    "end": "1083960"
  },
  {
    "text": "usually want to focus on flexibility",
    "start": "1083960",
    "end": "1085840"
  },
  {
    "text": "easy maintained so you can do rapid",
    "start": "1085840",
    "end": "1088840"
  },
  {
    "text": "prototyping and iterative development",
    "start": "1088840",
    "end": "1091160"
  },
  {
    "text": "cycles and then as the product matures",
    "start": "1091160",
    "end": "1094220"
  },
  {
    "text": "and you've called confidence that the",
    "start": "1094220",
    "end": "1096980"
  },
  {
    "text": "dtas aren't going to change very much",
    "start": "1096980",
    "end": "1098480"
  },
  {
    "text": "there events are not going to change",
    "start": "1098480",
    "end": "1099919"
  },
  {
    "text": "very much then you can look at micro",
    "start": "1099919",
    "end": "1101960"
  },
  {
    "text": "tuning them",
    "start": "1101960",
    "end": "1103340"
  },
  {
    "text": "to try and get the the best possible",
    "start": "1103340",
    "end": "1105260"
  },
  {
    "text": "performance for what you've established",
    "start": "1105260",
    "end": "1107720"
  },
  {
    "text": "is a realistic use case",
    "start": "1107720",
    "end": "1110419"
  },
  {
    "start": "1109000",
    "end": "1156000"
  },
  {
    "text": "so so what does it look like well in",
    "start": "1110419",
    "end": "1113840"
  },
  {
    "text": "this case",
    "start": "1113840",
    "end": "1115340"
  },
  {
    "text": "um we do we do still favor right from",
    "start": "1115340",
    "end": "1118640"
  },
  {
    "text": "the start",
    "start": "1118640",
    "end": "1119720"
  },
  {
    "text": "um trying to use Primitives where",
    "start": "1119720",
    "end": "1122480"
  },
  {
    "text": "possible so things like the timestamps",
    "start": "1122480",
    "end": "1125960"
  },
  {
    "text": "typically stored as Primitives in this",
    "start": "1125960",
    "end": "1129440"
  },
  {
    "text": "case it's a microsecond timestamp",
    "start": "1129440",
    "end": "1132679"
  },
  {
    "text": "um there's a symbol which is the um",
    "start": "1132679",
    "end": "1136240"
  },
  {
    "text": "uh",
    "start": "1136240",
    "end": "1137780"
  },
  {
    "text": "um which will be the um of the",
    "start": "1137780",
    "end": "1140600"
  },
  {
    "text": "instrument's name like what what are we",
    "start": "1140600",
    "end": "1142460"
  },
  {
    "text": "trying to trade here this is an example",
    "start": "1142460",
    "end": "1144559"
  },
  {
    "text": "of a trade but you can also see that",
    "start": "1144559",
    "end": "1146600"
  },
  {
    "text": "we've got some enums and a string in",
    "start": "1146600",
    "end": "1148700"
  },
  {
    "text": "there uh you can have other data types",
    "start": "1148700",
    "end": "1150679"
  },
  {
    "text": "but",
    "start": "1150679",
    "end": "1151700"
  },
  {
    "text": "um we're possible",
    "start": "1151700",
    "end": "1153020"
  },
  {
    "text": "um we tend to try and use Primitives",
    "start": "1153020",
    "end": "1157400"
  },
  {
    "start": "1156000",
    "end": "1293000"
  },
  {
    "text": "and um so in this trivial example we've",
    "start": "1157760",
    "end": "1160880"
  },
  {
    "text": "got a microservice that expects one type",
    "start": "1160880",
    "end": "1163220"
  },
  {
    "text": "of event in and it produces one type of",
    "start": "1163220",
    "end": "1165440"
  },
  {
    "text": "event out which is an execution report",
    "start": "1165440",
    "end": "1167900"
  },
  {
    "text": "so from the order we build an execution",
    "start": "1167900",
    "end": "1171020"
  },
  {
    "text": "report object",
    "start": "1171020",
    "end": "1173679"
  },
  {
    "text": "and um uh when you're testing this this",
    "start": "1173679",
    "end": "1176539"
  },
  {
    "text": "is all in yaml so",
    "start": "1176539",
    "end": "1179059"
  },
  {
    "text": "um so we're dealing at this level where",
    "start": "1179059",
    "end": "1181220"
  },
  {
    "text": "you can see the data structure we've got",
    "start": "1181220",
    "end": "1183380"
  },
  {
    "text": "an event in and an event out",
    "start": "1183380",
    "end": "1185900"
  },
  {
    "text": "and um the main point to take away from",
    "start": "1185900",
    "end": "1188660"
  },
  {
    "text": "this is though even though when it's",
    "start": "1188660",
    "end": "1190460"
  },
  {
    "text": "stored in memory even though when it's",
    "start": "1190460",
    "end": "1192200"
  },
  {
    "text": "written and shared between processes",
    "start": "1192200",
    "end": "1194000"
  },
  {
    "text": "it's it's highly optimized it's very",
    "start": "1194000",
    "end": "1197179"
  },
  {
    "text": "much down at the binary level when",
    "start": "1197179",
    "end": "1199640"
  },
  {
    "text": "you're testing it and you're thinking",
    "start": "1199640",
    "end": "1200840"
  },
  {
    "text": "about what business functions are we",
    "start": "1200840",
    "end": "1202880"
  },
  {
    "text": "going to perform here it's it's at a",
    "start": "1202880",
    "end": "1205460"
  },
  {
    "text": "much much higher level and that's that's",
    "start": "1205460",
    "end": "1207260"
  },
  {
    "text": "the that's where you want to be",
    "start": "1207260",
    "end": "1209020"
  },
  {
    "text": "describing the functionality or business",
    "start": "1209020",
    "end": "1211820"
  },
  {
    "text": "component will implement",
    "start": "1211820",
    "end": "1214280"
  },
  {
    "text": "so so what happens when uh there's uh",
    "start": "1214280",
    "end": "1218059"
  },
  {
    "text": "the test fails uh how easy is it to see",
    "start": "1218059",
    "end": "1220880"
  },
  {
    "text": "when something's gone wrong so if you're",
    "start": "1220880",
    "end": "1223340"
  },
  {
    "text": "dealing with a binary level you would",
    "start": "1223340",
    "end": "1225020"
  },
  {
    "text": "just see that one of the bytes is wrong",
    "start": "1225020",
    "end": "1226820"
  },
  {
    "text": "and um that would make it it could",
    "start": "1226820",
    "end": "1229340"
  },
  {
    "text": "potentially be very hard to diagnose and",
    "start": "1229340",
    "end": "1231679"
  },
  {
    "text": "you could waste a lot of time going",
    "start": "1231679",
    "end": "1232940"
  },
  {
    "text": "through all the things they could",
    "start": "1232940",
    "end": "1234020"
  },
  {
    "text": "possibly be",
    "start": "1234020",
    "end": "1235280"
  },
  {
    "text": "but at this level",
    "start": "1235280",
    "end": "1236900"
  },
  {
    "text": "um because we're doing",
    "start": "1236900",
    "end": "1238400"
  },
  {
    "text": "um we're working in yaml we're doing a",
    "start": "1238400",
    "end": "1241220"
  },
  {
    "text": "text based comparison so we expected a",
    "start": "1241220",
    "end": "1244400"
  },
  {
    "text": "particular kind of event execution",
    "start": "1244400",
    "end": "1245960"
  },
  {
    "text": "report we got a different kind of",
    "start": "1245960",
    "end": "1247700"
  },
  {
    "text": "execution report so in this case it's",
    "start": "1247700",
    "end": "1250039"
  },
  {
    "text": "very easy to see that the order type is",
    "start": "1250039",
    "end": "1252679"
  },
  {
    "text": "not the expected one and then you can",
    "start": "1252679",
    "end": "1255320"
  },
  {
    "text": "decide what action to take is the code",
    "start": "1255320",
    "end": "1257419"
  },
  {
    "text": "incorrect is that that",
    "start": "1257419",
    "end": "1260480"
  },
  {
    "text": "um the test should have been updated",
    "start": "1260480",
    "end": "1262340"
  },
  {
    "text": "like um you've you've actually changed",
    "start": "1262340",
    "end": "1264919"
  },
  {
    "text": "the input and you want the output to",
    "start": "1264919",
    "end": "1267020"
  },
  {
    "text": "change as well",
    "start": "1267020",
    "end": "1268460"
  },
  {
    "text": "and and that wasn't done",
    "start": "1268460",
    "end": "1271520"
  },
  {
    "text": "um but you can very quickly diagnose uh",
    "start": "1271520",
    "end": "1273980"
  },
  {
    "text": "what you need to do",
    "start": "1273980",
    "end": "1275480"
  },
  {
    "text": "um and and to fix it say say for example",
    "start": "1275480",
    "end": "1278120"
  },
  {
    "text": "it's only the output that is wrong you",
    "start": "1278120",
    "end": "1280340"
  },
  {
    "text": "can just copy and paste the actual over",
    "start": "1280340",
    "end": "1282620"
  },
  {
    "text": "the expected",
    "start": "1282620",
    "end": "1284240"
  },
  {
    "text": "um because the inspectors in a file of",
    "start": "1284240",
    "end": "1286640"
  },
  {
    "text": "its own and um you've updated the test",
    "start": "1286640",
    "end": "1289820"
  },
  {
    "text": "if if that's the the appropriate",
    "start": "1289820",
    "end": "1292039"
  },
  {
    "text": "correction",
    "start": "1292039",
    "end": "1293900"
  },
  {
    "start": "1293000",
    "end": "1363000"
  },
  {
    "text": "so um so we we use yaml for data driven",
    "start": "1293900",
    "end": "1297440"
  },
  {
    "text": "tests um it's all all based around",
    "start": "1297440",
    "end": "1299840"
  },
  {
    "text": "Behavior driven development to ensure",
    "start": "1299840",
    "end": "1303020"
  },
  {
    "text": "that we're specifying the requirements",
    "start": "1303020",
    "end": "1306200"
  },
  {
    "text": "at a level that the business users could",
    "start": "1306200",
    "end": "1309320"
  },
  {
    "text": "understand using their language and",
    "start": "1309320",
    "end": "1311539"
  },
  {
    "text": "their terminology but we can go down to",
    "start": "1311539",
    "end": "1315260"
  },
  {
    "text": "low-level performance considerations",
    "start": "1315260",
    "end": "1317559"
  },
  {
    "text": "by using binary formats uh pre-generated",
    "start": "1317559",
    "end": "1321320"
  },
  {
    "text": "serialization code and uh at the lowest",
    "start": "1321320",
    "end": "1324980"
  },
  {
    "text": "level we can create trivia we can use",
    "start": "1324980",
    "end": "1327020"
  },
  {
    "text": "trivially copyable objects where it's",
    "start": "1327020",
    "end": "1330080"
  },
  {
    "text": "effectively much like a mem copy and",
    "start": "1330080",
    "end": "1333440"
  },
  {
    "text": "there's very little serialization logic",
    "start": "1333440",
    "end": "1336200"
  },
  {
    "text": "actually going on and that that can get",
    "start": "1336200",
    "end": "1338659"
  },
  {
    "text": "well under half a microsecond end-to-end",
    "start": "1338659",
    "end": "1341840"
  },
  {
    "text": "so that's uh from",
    "start": "1341840",
    "end": "1344160"
  },
  {
    "text": "[Music]",
    "start": "1344160",
    "end": "1345260"
  },
  {
    "text": "um uh you know when you want to write an",
    "start": "1345260",
    "end": "1348860"
  },
  {
    "text": "event to when that event is actually",
    "start": "1348860",
    "end": "1351080"
  },
  {
    "text": "called in another process",
    "start": "1351080",
    "end": "1353840"
  },
  {
    "text": "including serialization writing to the",
    "start": "1353840",
    "end": "1356539"
  },
  {
    "text": "file write each memory deserialization",
    "start": "1356539",
    "end": "1359299"
  },
  {
    "text": "doing decoding the event type and making",
    "start": "1359299",
    "end": "1362120"
  },
  {
    "text": "the method call",
    "start": "1362120",
    "end": "1364520"
  },
  {
    "text": "now uh Chronicle software is actively",
    "start": "1364520",
    "end": "1367280"
  },
  {
    "text": "hiring at the moment so if you're",
    "start": "1367280",
    "end": "1368780"
  },
  {
    "text": "interested please reach out to us uh",
    "start": "1368780",
    "end": "1371720"
  },
  {
    "text": "otherwise you can have a look at our",
    "start": "1371720",
    "end": "1373640"
  },
  {
    "text": "website and as I mentioned all the code",
    "start": "1373640",
    "end": "1377120"
  },
  {
    "text": "is in our GitHub",
    "start": "1377120",
    "end": "1380320"
  },
  {
    "text": "under open hft thank you very much for",
    "start": "1380320",
    "end": "1384200"
  },
  {
    "text": "your listening",
    "start": "1384200",
    "end": "1386620"
  },
  {
    "start": "1385000",
    "end": "1610000"
  },
  {
    "text": "that was a very interesting presentation",
    "start": "1389659",
    "end": "1391640"
  },
  {
    "text": "I like that okay",
    "start": "1391640",
    "end": "1394580"
  },
  {
    "text": "um yeah I'm just looking to see if",
    "start": "1394580",
    "end": "1396140"
  },
  {
    "text": "there's any uh questions on the Q a",
    "start": "1396140",
    "end": "1398120"
  },
  {
    "text": "thing but I can't see any at the moment",
    "start": "1398120",
    "end": "1399820"
  },
  {
    "text": "uh so I'll just ask you a couple of",
    "start": "1399820",
    "end": "1401960"
  },
  {
    "text": "questions that I can think of",
    "start": "1401960",
    "end": "1403760"
  },
  {
    "text": "um so yeah of course pretty Panama is",
    "start": "1403760",
    "end": "1406400"
  },
  {
    "text": "one of those things that uh we've been",
    "start": "1406400",
    "end": "1408140"
  },
  {
    "text": "waiting for for a long time as you said",
    "start": "1408140",
    "end": "1410600"
  },
  {
    "text": "um and I think it will be very valuable",
    "start": "1410600",
    "end": "1412760"
  },
  {
    "text": "when we actually get to the point where",
    "start": "1412760",
    "end": "1414140"
  },
  {
    "text": "we can use it without having to enable",
    "start": "1414140",
    "end": "1415700"
  },
  {
    "text": "preview features or incubator modules",
    "start": "1415700",
    "end": "1418940"
  },
  {
    "text": "um took me a while to figure out why",
    "start": "1418940",
    "end": "1420980"
  },
  {
    "text": "they changed it from being an incubator",
    "start": "1420980",
    "end": "1422419"
  },
  {
    "text": "module to being a preview feature",
    "start": "1422419",
    "end": "1425600"
  },
  {
    "text": "um I have a feeling that it's to show",
    "start": "1425600",
    "end": "1427640"
  },
  {
    "text": "progression to encourage people that uh",
    "start": "1427640",
    "end": "1430940"
  },
  {
    "text": "it's coming soon",
    "start": "1430940",
    "end": "1432799"
  },
  {
    "text": "um I don't think there's any uh",
    "start": "1432799",
    "end": "1434240"
  },
  {
    "text": "limitations on how long it should be",
    "start": "1434240",
    "end": "1436520"
  },
  {
    "text": "preview",
    "start": "1436520",
    "end": "1437960"
  },
  {
    "text": "um I'm assuming it won't go back to",
    "start": "1437960",
    "end": "1439340"
  },
  {
    "text": "incubator but um no I could check",
    "start": "1439340",
    "end": "1442700"
  },
  {
    "text": "because I think the reason is that when",
    "start": "1442700",
    "end": "1445100"
  },
  {
    "text": "it's an incubator module it's not in the",
    "start": "1445100",
    "end": "1446900"
  },
  {
    "text": "Java SE space and when they move it to a",
    "start": "1446900",
    "end": "1451100"
  },
  {
    "text": "preview it actually falls into the Java",
    "start": "1451100",
    "end": "1453559"
  },
  {
    "text": "SE space so I think it's because of",
    "start": "1453559",
    "end": "1455419"
  },
  {
    "text": "where whether it's in the Java or Java X",
    "start": "1455419",
    "end": "1457400"
  },
  {
    "text": "namespace I think that's that's what",
    "start": "1457400",
    "end": "1459380"
  },
  {
    "text": "they've changed but it's still it's",
    "start": "1459380",
    "end": "1461299"
  },
  {
    "text": "still in the incubator package name",
    "start": "1461299",
    "end": "1463039"
  },
  {
    "text": "right so",
    "start": "1463039",
    "end": "1464960"
  },
  {
    "text": "um yeah I feel a lot more confident when",
    "start": "1464960",
    "end": "1467240"
  },
  {
    "text": "that that disappears from the package",
    "start": "1467240",
    "end": "1468799"
  },
  {
    "text": "name",
    "start": "1468799",
    "end": "1470000"
  },
  {
    "text": "um obviously what I would like to see is",
    "start": "1470000",
    "end": "1472520"
  },
  {
    "text": "um obviously some back ports",
    "start": "1472520",
    "end": "1474679"
  },
  {
    "text": "um unfortunately I have a lot of clients",
    "start": "1474679",
    "end": "1476960"
  },
  {
    "text": "that are still on Java eight",
    "start": "1476960",
    "end": "1479600"
  },
  {
    "text": "um so uh yeah I'll have to take that up",
    "start": "1479600",
    "end": "1483320"
  },
  {
    "text": "with our engineering team see whether",
    "start": "1483320",
    "end": "1484580"
  },
  {
    "text": "they can do a back port to Zulu 8.",
    "start": "1484580",
    "end": "1488740"
  },
  {
    "text": "yeah I mean the thing is in reality",
    "start": "1488740",
    "end": "1492500"
  },
  {
    "text": "um we only need a very small subset so",
    "start": "1492500",
    "end": "1495799"
  },
  {
    "text": "actually that's the only bit that we",
    "start": "1495799",
    "end": "1497659"
  },
  {
    "text": "would need back ported if you see what I",
    "start": "1497659",
    "end": "1499580"
  },
  {
    "text": "mean whereas uh perhaps back porting the",
    "start": "1499580",
    "end": "1502100"
  },
  {
    "text": "entire thing isn't perhaps so practical",
    "start": "1502100",
    "end": "1504980"
  },
  {
    "text": "yeah there's a lot of features in there",
    "start": "1504980",
    "end": "1507260"
  },
  {
    "text": "that are really cool but um because they",
    "start": "1507260",
    "end": "1510320"
  },
  {
    "text": "weren't in unsafe we obviously did right",
    "start": "1510320",
    "end": "1512539"
  },
  {
    "text": "yeah so",
    "start": "1512539",
    "end": "1515360"
  },
  {
    "text": "um yeah I'm safe yes I think we'd have",
    "start": "1515360",
    "end": "1518480"
  },
  {
    "text": "to come up with some sort of",
    "start": "1518480",
    "end": "1519380"
  },
  {
    "text": "compatibility Library which we kind of",
    "start": "1519380",
    "end": "1521539"
  },
  {
    "text": "have done another approach is to",
    "start": "1521539",
    "end": "1524240"
  },
  {
    "text": "consider I mean we've talked about doing",
    "start": "1524240",
    "end": "1526640"
  },
  {
    "text": "a rewrite promote newer version so we",
    "start": "1526640",
    "end": "1529520"
  },
  {
    "text": "might consider just doing a rewrite for",
    "start": "1529520",
    "end": "1531620"
  },
  {
    "text": "version 21 right assuming that's got it",
    "start": "1531620",
    "end": "1534440"
  },
  {
    "text": "in there and then do a proper version 21",
    "start": "1534440",
    "end": "1537380"
  },
  {
    "text": "native implementation of everything yeah",
    "start": "1537380",
    "end": "1541039"
  },
  {
    "text": "um and um just effectively four car",
    "start": "1541039",
    "end": "1543620"
  },
  {
    "text": "libraries for the people who want the",
    "start": "1543620",
    "end": "1545240"
  },
  {
    "text": "older version or the newer version",
    "start": "1545240",
    "end": "1547580"
  },
  {
    "text": "yeah I can't see why it wouldn't be uh",
    "start": "1547580",
    "end": "1550580"
  },
  {
    "text": "uh full feature in by Java 21 because uh",
    "start": "1550580",
    "end": "1553820"
  },
  {
    "text": "what do we got like 19 okay still gonna",
    "start": "1553820",
    "end": "1555919"
  },
  {
    "text": "be a preview feature but I would expect",
    "start": "1555919",
    "end": "1557659"
  },
  {
    "text": "20 or or the last 121 it'll definitely",
    "start": "1557659",
    "end": "1560960"
  },
  {
    "text": "be a full feature because I know they",
    "start": "1560960",
    "end": "1563120"
  },
  {
    "text": "are trying to get Panama done and dusted",
    "start": "1563120",
    "end": "1565760"
  },
  {
    "text": "that would be good because because",
    "start": "1565760",
    "end": "1567200"
  },
  {
    "text": "otherwise I mean they can always um",
    "start": "1567200",
    "end": "1568940"
  },
  {
    "text": "extend it later certainly from my own",
    "start": "1568940",
    "end": "1572120"
  },
  {
    "text": "selfish needs I only need a fairly small",
    "start": "1572120",
    "end": "1574100"
  },
  {
    "text": "subset about this so",
    "start": "1574100",
    "end": "1576980"
  },
  {
    "text": "um if they end up constraining it just",
    "start": "1576980",
    "end": "1578900"
  },
  {
    "text": "to get it in I'd be more than happy with",
    "start": "1578900",
    "end": "1580760"
  },
  {
    "text": "that yes yeah",
    "start": "1580760",
    "end": "1582740"
  },
  {
    "text": "okay I can't see any questions from the",
    "start": "1582740",
    "end": "1585620"
  },
  {
    "text": "audience",
    "start": "1585620",
    "end": "1586580"
  },
  {
    "text": "uh so I guess I'm sure people can reach",
    "start": "1586580",
    "end": "1590720"
  },
  {
    "text": "out to you if they they have questions",
    "start": "1590720",
    "end": "1591860"
  },
  {
    "text": "later but um",
    "start": "1591860",
    "end": "1593559"
  },
  {
    "text": "thank you very much that was great thank",
    "start": "1593559",
    "end": "1595880"
  },
  {
    "text": "you Simon great thank you okay bye",
    "start": "1595880",
    "end": "1600340"
  },
  {
    "text": "[Music]",
    "start": "1602550",
    "end": "1608849"
  }
]