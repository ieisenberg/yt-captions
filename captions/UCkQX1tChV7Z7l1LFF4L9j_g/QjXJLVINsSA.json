[
  {
    "text": "[Music]",
    "start": "2510",
    "end": "15679"
  },
  {
    "text": "I'd like to thank well first of all Google for hosting us and Guido for being uh willing to come and discuss",
    "start": "15679",
    "end": "20840"
  },
  {
    "text": "with us basically the intersection of the evolution of the Python language and the growth of the scientific community",
    "start": "20840",
    "end": "26199"
  },
  {
    "text": "and this is meant to be mostly an open discussion um David Coro and I are going to semi- organize the conversation with",
    "start": "26199",
    "end": "32680"
  },
  {
    "text": "guo but we hope that anyone who has uh thoughts on this brings it up so the",
    "start": "32680",
    "end": "38600"
  },
  {
    "text": "sort of to organize the conversation I guess the the start is that on the one hand python is growing massively in",
    "start": "38600",
    "end": "44840"
  },
  {
    "text": "scientific Computing that's the reason why many of you guys are here Guido was at one of our scipi conferences but the",
    "start": "44840",
    "end": "50440"
  },
  {
    "text": "success story of python and scientific Computing continues to sort of rise on the other hand the main core developer",
    "start": "50440",
    "end": "56680"
  },
  {
    "text": "team development team put Python 3 out already two years ago maybe it's more",
    "start": "56680",
    "end": "61879"
  },
  {
    "text": "than probably more like four years ago okay well that that that isn't the fact that I don't even know is an indicator",
    "start": "61879",
    "end": "67960"
  },
  {
    "text": "of the issue that we want to talk about which is the fact that in our community the bulk of us have barely migrated now",
    "start": "67960",
    "end": "74119"
  },
  {
    "text": "the core Tools in kind of the base layer of what we consider to be the Scientific",
    "start": "74119",
    "end": "79280"
  },
  {
    "text": "Python stack numpy scipi matplot lib IPython of those scyon simpai most of",
    "start": "79280",
    "end": "86000"
  },
  {
    "text": "those tools have had in the last few months or some of them up to a year Python 3 releases so for example numpy",
    "start": "86000",
    "end": "92720"
  },
  {
    "text": "scipi and IPython the current official versions run on Python 3 out of the box you type Python 3 setup Pi install it",
    "start": "92720",
    "end": "99920"
  },
  {
    "text": "works that is awesome news by the way that is true congratulations so that's kind of the status of the tools matplot",
    "start": "99920",
    "end": "107600"
  },
  {
    "text": "lib hasn't had a release with Python 3 but all of the code is merged in gitm and John Hunter who's in the room uh can",
    "start": "107600",
    "end": "114320"
  },
  {
    "text": "let us know or was is at the meeting anyway um they're basically talking about when to do the release but it's a",
    "start": "114320",
    "end": "120320"
  },
  {
    "text": "matter of probably a few weeks or maybe a month or so because the Python 3 test Suite passes and the code has already",
    "start": "120320",
    "end": "125560"
  },
  {
    "text": "been merged so the basic layer of the tool stack has been ported to Python 3",
    "start": "125560",
    "end": "131160"
  },
  {
    "text": "on the other hand so the higher layers haven't and there hasn't been too much adoption of Python 3 in the scientific",
    "start": "131160",
    "end": "137440"
  },
  {
    "text": "community at large most people continue to work on python 2 so I guess one",
    "start": "137440",
    "end": "143680"
  },
  {
    "text": "obviously one answer one way of driving the conversation about shifting is the community is moving there the core",
    "start": "143680",
    "end": "149400"
  },
  {
    "text": "development that that is the version which is being maintained you should move to it um we are sort of thinking",
    "start": "149400",
    "end": "155360"
  },
  {
    "text": "also about let's in addition to you should move it because it's the right thing to do what things could be perhaps",
    "start": "155360",
    "end": "160640"
  },
  {
    "text": "done in Python 3 to make it even more exciting for scientists to to want to move because they might say wow I",
    "start": "160640",
    "end": "166720"
  },
  {
    "text": "actually want to shift to a Python 3 workflow because X and Y features make my life much much easier or would allow",
    "start": "166720",
    "end": "172720"
  },
  {
    "text": "me to do things I can't to do right now or solve problems that I currently have and I think the perception is that right",
    "start": "172720",
    "end": "178599"
  },
  {
    "text": "now there is an major gain for us in Python 3 um and so people just continue",
    "start": "178599",
    "end": "184560"
  },
  {
    "text": "to work on python 2 especially because for most of us python is a means to an end and we're not developing python",
    "start": "184560",
    "end": "189640"
  },
  {
    "text": "itself so maybe Travis uh can say a few things from your experience in in industry and in other context of what",
    "start": "189640",
    "end": "195480"
  },
  {
    "text": "you've seen on that adoption and then based on that we can try to go on specific topics and and try to have a",
    "start": "195480",
    "end": "201440"
  },
  {
    "text": "conversation I'm not sure I have a lot to add beyond what you just said Fernando I mean I can say having seen a",
    "start": "201440",
    "end": "206480"
  },
  {
    "text": "lot of adoption of python in Industry there's a lot of hesitancy to move the stack to Python 3 I mean I I most people",
    "start": "206480",
    "end": "212560"
  },
  {
    "text": "say they've asked me or said when should we move to Python 3 or I've asked them when are you going to move to Python 3 and it's either uh never to uh well",
    "start": "212560",
    "end": "221040"
  },
  {
    "text": "we'll see whenever when when the tools get to where I uh tools I rely on are there um so it's it's very slow uh and",
    "start": "221040",
    "end": "228480"
  },
  {
    "text": "certainly some of the large organizations now people that make small use of python find it easy to adop to",
    "start": "228480",
    "end": "234040"
  },
  {
    "text": "move to Python 3 I mean they they start with Python 3 they can they can use Python 3 but it's the places where it's",
    "start": "234040",
    "end": "239360"
  },
  {
    "text": "really heavily used um I think it is more the I would like to emphasize the sort of the carrot more than the stick I",
    "start": "239360",
    "end": "245480"
  },
  {
    "text": "right now I think that is the perception that Python 3 it has a few nice features but not really anything that's sort of",
    "start": "245480",
    "end": "252319"
  },
  {
    "text": "compelling to uh certainly a technical user or a scientific programming user um so I I",
    "start": "252319",
    "end": "259040"
  },
  {
    "text": "guess that's pretty much all I had to discuss generally we can talk kind about some of the possibilities maybe get",
    "start": "259040",
    "end": "264600"
  },
  {
    "text": "Guido's response to some of our initial questions if he has any uh or uh uh",
    "start": "264600",
    "end": "270479"
  },
  {
    "text": "maybe uh advice as to what we can um what we can do to try to promote some of the ideas we have one of the things I've",
    "start": "270479",
    "end": "276360"
  },
  {
    "text": "noticed over the past I guess four or five years is the um you know early on",
    "start": "276360",
    "end": "281680"
  },
  {
    "text": "there was a really strong connection between the scientific Community Computing community and the High Core python developers probably over the past",
    "start": "281680",
    "end": "287800"
  },
  {
    "text": "four or five years I that hasn't maintained as strong some of that's been us I mean certainly we don't have enough",
    "start": "287800",
    "end": "293280"
  },
  {
    "text": "people who kind of bridge both uh camps I think uh and the the the mark",
    "start": "293280",
    "end": "298880"
  },
  {
    "text": "Dickinson uh is certainly somebody who has uh contributed code to the floating point and he's sort of been able to be",
    "start": "298880",
    "end": "305440"
  },
  {
    "text": "in both both groups uh I was trying to do that for a little while ended up too much I couldn't do both it was too much",
    "start": "305440",
    "end": "312199"
  },
  {
    "text": "uh uh I didn't have the time and I haven't found other people who have sort of stepped up and been willing to participate in the python Dev as well as",
    "start": "312199",
    "end": "319240"
  },
  {
    "text": "participate in the numpy dev or sipi Dev so I think that that's contributed to",
    "start": "319240",
    "end": "324840"
  },
  {
    "text": "some uh lack of communication lack of uh uh the kind of high bandwidth",
    "start": "324840",
    "end": "332080"
  },
  {
    "text": "discussions that occurred early on in the origins of python so comment on that feedback on that I don't know if I don't",
    "start": "332080",
    "end": "339240"
  },
  {
    "text": "think you need to feel bad for for not straddling core development and numpy",
    "start": "339240",
    "end": "345120"
  },
  {
    "text": "development I think that pretty much everyone else who is or every other",
    "start": "345120",
    "end": "351240"
  },
  {
    "text": "community who are developing uh a tool or framework or a",
    "start": "351240",
    "end": "357600"
  },
  {
    "text": "library or a collection or a suite of those things for a particular",
    "start": "357600",
    "end": "363360"
  },
  {
    "text": "application area uh is pretty much in the same boat we don't sort of hear a lot from the web",
    "start": "363360",
    "end": "371680"
  },
  {
    "text": "development Community either for example the Django folks mostly go off and do D",
    "start": "371680",
    "end": "376880"
  },
  {
    "text": "Jango stuff and uh Twisted folks go off and do twisted stuff exactly and and",
    "start": "376880",
    "end": "384120"
  },
  {
    "text": "often there's there's one or two key figures who occasionally pipe up in discussion and who appear to be",
    "start": "384120",
    "end": "391680"
  },
  {
    "text": "following the python Dev or python ideas mailing lists to some extent but they",
    "start": "391680",
    "end": "397280"
  },
  {
    "text": "also often sort of disappear for months or years at a time and I don't see that",
    "start": "397280",
    "end": "404080"
  },
  {
    "text": "as a as a particularly big issue okay one of the things I have noticed is it's rare the person that gets involved with",
    "start": "404080",
    "end": "409759"
  },
  {
    "text": "python Dev that has the background from the scientific Computing whereas if somebody some there's several I know who",
    "start": "409759",
    "end": "415759"
  },
  {
    "text": "have the background in web development who who maybe they're not doing that primarily they at least understand the",
    "start": "415759",
    "end": "421160"
  },
  {
    "text": "use cases um a little better uh so uh that's that's where I felt it's been",
    "start": "421160",
    "end": "428080"
  },
  {
    "text": "really helpful to have somebody who has at least some background in the use cases of of a technical Computing or a",
    "start": "428080",
    "end": "434120"
  },
  {
    "text": "scientific Computing Community participating in that um python Dev discussion",
    "start": "434120",
    "end": "440319"
  },
  {
    "text": "uh I don't know I mean are there people now maybe I'm just not aware of who kind of fill that role well I people's email",
    "start": "440319",
    "end": "447639"
  },
  {
    "text": "addresses usually don't come with an affiliation and they don't necessarily sort of State I am representing the",
    "start": "447639",
    "end": "455000"
  },
  {
    "text": "numai or scii community so I I often don't know to be",
    "start": "455000",
    "end": "460080"
  },
  {
    "text": "honest uh I sometimes don't even know who is a core developer because and I'm",
    "start": "460080",
    "end": "465840"
  },
  {
    "text": "I'm actually you you may have heard me joke about retirement uh the last couple of",
    "start": "465840",
    "end": "472120"
  },
  {
    "text": "pons I'm I'm still sort of feeling I'm I'm involved in certain types of major",
    "start": "472120",
    "end": "479520"
  },
  {
    "text": "decisions and sometimes uh micromanagement of the core development but there's also a lot of stuff",
    "start": "479520",
    "end": "486759"
  },
  {
    "text": "that I really don't need to be involved and I've I've fairly effectively delegated a whole bunch of",
    "start": "486759",
    "end": "493080"
  },
  {
    "text": "responsibilities I have no idea what's going on in the buck tracker or uh in even in the Mercurial repository most of",
    "start": "493080",
    "end": "501319"
  },
  {
    "text": "the time I think one one sort of one thing I hear is that uh that you",
    "start": "501319",
    "end": "510400"
  },
  {
    "text": "may have a reason for for wanting a tighter",
    "start": "510400",
    "end": "516518"
  },
  {
    "text": "connection between the num numpy or scipi community and core python because",
    "start": "516519",
    "end": "523039"
  },
  {
    "text": "in some cases language features really matter",
    "start": "523039",
    "end": "528440"
  },
  {
    "text": "for you uh this morning we we touched or you touched briefly on things like",
    "start": "528440",
    "end": "534279"
  },
  {
    "text": "complex numbers uh extended slice notation",
    "start": "534279",
    "end": "540399"
  },
  {
    "text": "uh there is of course the infamous pep 3118 uh where I don't know if you're",
    "start": "540399",
    "end": "546600"
  },
  {
    "text": "aware but finally very recently someone whose name I have unfortunately",
    "start": "546600",
    "end": "552000"
  },
  {
    "text": "forgotten have has implemented the final bit of that P I'm very aware of that actually okay good I'm very aware and",
    "start": "552000",
    "end": "558399"
  },
  {
    "text": "very uh uh uh cognizant of s the memory view was left unimplemented yeah right",
    "start": "558399",
    "end": "564360"
  },
  {
    "text": "and and sort of relied on somebody jumping in and trying to figure that out who didn't have the benefit and it",
    "start": "564360",
    "end": "569920"
  },
  {
    "text": "illustrates one of the challenges of of that people who use numpy actually don't",
    "start": "569920",
    "end": "575160"
  },
  {
    "text": "necessarily um wouldn't use the memory view but who people who do what I one thing I saw that I loved was that there's a SQL interface now that uses",
    "start": "575160",
    "end": "581519"
  },
  {
    "text": "memory view so finally for the very first time that that that idea that I had wanted to see which was broad direct",
    "start": "581519",
    "end": "587920"
  },
  {
    "text": "copies from SQL databases to numpy arrays can now happen right where without unboxing and boxing that that",
    "start": "587920",
    "end": "594240"
  },
  {
    "text": "everything else usually does and uh I'm very aware of that very grateful uh to the to the folks who have stepped in and",
    "start": "594240",
    "end": "600360"
  },
  {
    "text": "done that actually I still get the messages well there there you have one of your carrots yeah no that's right no that's that's right potentially that",
    "start": "600360",
    "end": "606000"
  },
  {
    "text": "potentially although if somebody installs numpy no the carrot is is the",
    "start": "606000",
    "end": "611360"
  },
  {
    "text": "the SQL someone make an MX SQL or a SQL driver going oh I'll just support the",
    "start": "611360",
    "end": "616640"
  },
  {
    "text": "memory view or scyon writers going I'll support memory View and then that allows them to but the buffer protocol gave",
    "start": "616640",
    "end": "623120"
  },
  {
    "text": "them that the memory view object wasn't as necessary so that's that's one reason it it uh it was a nice thing remain",
    "start": "623120",
    "end": "631320"
  },
  {
    "text": "for so long because it wasn't the key the the the key long poll that's very good good Insight thanks though",
    "start": "631399",
    "end": "637079"
  },
  {
    "text": "appreciate that uh how do you want to proceed F do you want to kind of go uh regarding those language features yeah",
    "start": "637079",
    "end": "643320"
  },
  {
    "text": "may maybe we can dig into specific language features which I think perhaps are some some of the main ones and",
    "start": "643320",
    "end": "648360"
  },
  {
    "text": "afterwards we have David who's going to talk about packaging and distribution which is basically the eal the Eternal",
    "start": "648360",
    "end": "653440"
  },
  {
    "text": "Thorn on our side and is an important problem but uh first perhaps there's the whole discussion on pep 225",
    "start": "653440",
    "end": "659800"
  },
  {
    "text": "on and that discussion has ranged from let's go ahead and have the community",
    "start": "659800",
    "end": "664920"
  },
  {
    "text": "would the scientific Community would like to have the full pep 225 implemented I I briefly can you remind everyone here uh what pep 225 is so map",
    "start": "664920",
    "end": "674360"
  },
  {
    "text": "in map so you folks can anyone can if you simply Google pep 225 you will find",
    "start": "674360",
    "end": "680120"
  },
  {
    "text": "it but it's you're not going to tell them right you're going to make this completely abstract you're just going to",
    "start": "680120",
    "end": "685639"
  },
  {
    "text": "ask me to say yes or no but you're not going to let anyone know what I'm actually going to say yes or no exactly",
    "start": "685639",
    "end": "691880"
  },
  {
    "text": "it's a pep about adding for every B existing binary operator in the language a second version of it prepended current",
    "start": "691880",
    "end": "699040"
  },
  {
    "text": "in the pep the current kind of candidate character is a tily character so just like you have star a star B for",
    "start": "699040",
    "end": "704600"
  },
  {
    "text": "multiplication you would have a TIY star B and that new operator would be also a special method with double underscores",
    "start": "704600",
    "end": "711519"
  },
  {
    "text": "which objects could Implement their own semantics for and the star I'm I'm starting with the star because it's",
    "start": "711519",
    "end": "717200"
  },
  {
    "text": "specifically the one that we as a commity care the most about because it will allow us to implement matrix",
    "start": "717200",
    "end": "722360"
  },
  {
    "text": "multiplication semantics uh that are different from element wise multiplication semantics but the the pep",
    "start": "722360",
    "end": "728079"
  },
  {
    "text": "is not uh focused on a single operator it actually the the the specification of the pep is to create this these cousins",
    "start": "728079",
    "end": "735800"
  },
  {
    "text": "these TIY cousins for all binary operators I personally would like to see division a TI division that would divide",
    "start": "735800",
    "end": "742720"
  },
  {
    "text": "into the rationals instead of dividing into the floats because python has r a rational class built in it's in the",
    "start": "742720",
    "end": "748760"
  },
  {
    "text": "standard library but syntactically it's kind of clunky to use so if you want to express 2/3 instead of saying 2 over",
    "start": "748760",
    "end": "754240"
  },
  {
    "text": "three or two TI sl3 you have to say rational open parns 2 comma 3 plus",
    "start": "754240",
    "end": "759760"
  },
  {
    "text": "rational open parns so something anything that brings the language closer to the mathematical notations matters",
    "start": "759760",
    "end": "765600"
  },
  {
    "text": "for us um and we could find other uses for some of the other operators now the",
    "start": "765600",
    "end": "770639"
  },
  {
    "text": "discussion has wavered within our community between Go full pep it would",
    "start": "770639",
    "end": "775839"
  },
  {
    "text": "be great to have all of it and some people who say as long as I get the multiplication I don't care about the rest and somewhere in between um and",
    "start": "775839",
    "end": "783040"
  },
  {
    "text": "there's the other another pep which is Pep 335 uh which is about allowing",
    "start": "783040",
    "end": "789000"
  },
  {
    "text": "operators to also Implement their own semantics for the end and or keywords of the language currently you can implement",
    "start": "789000",
    "end": "795639"
  },
  {
    "text": "the binary ENT and and vertical bar those are available to you you can Define objects with your own semantics",
    "start": "795639",
    "end": "801440"
  },
  {
    "text": "but not for the end or the or keyword those the language doesn't offer any extension points and pep 335 suggests",
    "start": "801440",
    "end": "808720"
  },
  {
    "text": "allowing those and for that one I personally don't have in my head why that one would be much more important",
    "start": "808720",
    "end": "814880"
  },
  {
    "text": "but a number of people said during the discussion about pep 225 that they would love to see those two woven basically",
    "start": "814880",
    "end": "821160"
  },
  {
    "text": "happening that happening together their value would be greater than their individual Parts maybe Travis has something to say about that I'm not",
    "start": "821160",
    "end": "827360"
  },
  {
    "text": "exactly sure so is 3 the end or yes 335 is the end or 225 is the ti versions of",
    "start": "827360",
    "end": "834440"
  },
  {
    "text": "all binary operators and the the summary of two of sort of from our side is that",
    "start": "834440",
    "end": "839759"
  },
  {
    "text": "there's definitely strong support that 225 would make our lives easier on a number of fronts so that's kind of one",
    "start": "839759",
    "end": "846480"
  },
  {
    "text": "of the things that we'd like to hear from you is it feasible uh it does it depend on us having somebody who",
    "start": "846480",
    "end": "851680"
  },
  {
    "text": "Champions the discussion uh and implementation is it a matter of give up",
    "start": "851680",
    "end": "857160"
  },
  {
    "text": "and go home and stick to the language and at this point would kind of like to hear from",
    "start": "857160",
    "end": "863759"
  },
  {
    "text": "you that's tough to be honest until this morning uh uh and I saw your notes about",
    "start": "863800",
    "end": "870720"
  },
  {
    "text": "this panel it was my understanding that both those peps had been amply discussed",
    "start": "870720",
    "end": "876519"
  },
  {
    "text": "and rejected uh officially one of them is in deferred",
    "start": "876519",
    "end": "882720"
  },
  {
    "text": "status and the other one in draft status really okay yeah so see that is where my",
    "start": "882720",
    "end": "888720"
  },
  {
    "text": "335 is in draft and 225 is in deferred but none of them has been",
    "start": "888720",
    "end": "894519"
  },
  {
    "text": "officially okay so that that at leaves at least the door open a little bit",
    "start": "894519",
    "end": "904000"
  },
  {
    "text": "uh the you're almost dead three well 355 has",
    "start": "904000",
    "end": "909279"
  },
  {
    "text": "been excuse",
    "start": "909279",
    "end": "912560"
  },
  {
    "text": "me the end orep uh has been sort of brought up several times and each",
    "start": "916480",
    "end": "925680"
  },
  {
    "text": "time that it was brought up on python Dev the conclusion was that there was no",
    "start": "925680",
    "end": "930920"
  },
  {
    "text": "one on python python Dev sort of no one amongst the the core developers whose voice",
    "start": "930920",
    "end": "937279"
  },
  {
    "text": "counts uh who thought that assertive",
    "start": "937279",
    "end": "943800"
  },
  {
    "text": "the it it was worth a cost the thing is every every language change proposal has",
    "start": "943800",
    "end": "951440"
  },
  {
    "text": "a cost and uh so I mean the the cost is",
    "start": "951440",
    "end": "956639"
  },
  {
    "text": "not always very clear I mean there's first of all every language change proposal has a cost that it makes the",
    "start": "956639",
    "end": "962639"
  },
  {
    "text": "language bigger that applies to pretty much every pep because nobody ever proposes in a pep to delete a",
    "start": "962639",
    "end": "971040"
  },
  {
    "text": "feature maybe well there there there have been a few uh at the transition to",
    "start": "971040",
    "end": "976279"
  },
  {
    "text": "python 3000 and some of those uh deletions have now been undeleted for",
    "start": "976279",
    "end": "981480"
  },
  {
    "text": "example Unicode literals are coming back as a a porting hack in Python 33",
    "start": "981480",
    "end": "989160"
  },
  {
    "text": "but apart from the sort of the cost that every P has uh the end or",
    "start": "989160",
    "end": "996639"
  },
  {
    "text": "pep has the problem that every end or or operator that",
    "start": "996639",
    "end": "1006519"
  },
  {
    "text": "occurs in the code will have to generate code it it's sort of the the generated",
    "start": "1006519",
    "end": "1013720"
  },
  {
    "text": "bite code will be more complicated and execute slower because",
    "start": "1013720",
    "end": "1019560"
  },
  {
    "text": "it would need to to take into account the",
    "start": "1019560",
    "end": "1024600"
  },
  {
    "text": "possibility that the result was one of those change chain",
    "start": "1024600",
    "end": "1029959"
  },
  {
    "text": "operations uh and that sort of even though various people have try to show",
    "start": "1029959",
    "end": "1036798"
  },
  {
    "text": "that the cost is very actually very small maybe it only is a single uh",
    "start": "1036799",
    "end": "1042360"
  },
  {
    "text": "instruction that needs to be emitted if you sort of you if you can sort of choose your your op codes",
    "start": "1042360",
    "end": "1049480"
  },
  {
    "text": "and of course we can because we're not stuck to a particular virtual machine design every python version has it can",
    "start": "1049480",
    "end": "1055280"
  },
  {
    "text": "have its own evolution of the python bite code uh nevertheless uh there is",
    "start": "1055280",
    "end": "1061919"
  },
  {
    "text": "even even one instruction takes extra runtime overhead uh",
    "start": "1061919",
    "end": "1068160"
  },
  {
    "text": "which would sort of given the frequency of and or operators and given that at",
    "start": "1068160",
    "end": "1073640"
  },
  {
    "text": "the moment none of those uh make use of the the Fe feature that",
    "start": "1073640",
    "end": "1080320"
  },
  {
    "text": "you you're proposing here all code will slow down by a few per. and that's a big",
    "start": "1080320",
    "end": "1087600"
  },
  {
    "text": "cost to pay for for a pretty esoteric feature I the the LA the most recent",
    "start": "1087600",
    "end": "1093600"
  },
  {
    "text": "time that this particular end or thing was discussed someone brought up that",
    "start": "1093600",
    "end": "1099760"
  },
  {
    "text": "even if the general Endor overloading uh wasn't",
    "start": "1099760",
    "end": "1105159"
  },
  {
    "text": "supported uh that we should perhaps at least do something about chain comparisons yes yes uh which I think",
    "start": "1105159",
    "end": "1114559"
  },
  {
    "text": "might be a much more defensible uh position it's an easier it's actually",
    "start": "1114559",
    "end": "1119760"
  },
  {
    "text": "the use case people want and uh seems like it wouldn't have the potential so",
    "start": "1119760",
    "end": "1125440"
  },
  {
    "text": "create the the the proper approach to do that is to shed all the baggage of the",
    "start": "1125440",
    "end": "1130919"
  },
  {
    "text": "existing and or pep make a new p and make a new pep uh that proposes",
    "start": "1130919",
    "end": "1136080"
  },
  {
    "text": "something like where uh change comparisons are somehow translated into",
    "start": "1136080",
    "end": "1141520"
  },
  {
    "text": "something that uh that can be overloaded in that in that fashion yeah",
    "start": "1141520",
    "end": "1148760"
  },
  {
    "text": "yeah that's that's reasonable I think and chain comparisons occur way less frequently inser of",
    "start": "1148760",
    "end": "1155919"
  },
  {
    "text": "common code than uh and or operators right uh but they probably relatively",
    "start": "1155919",
    "end": "1162000"
  },
  {
    "text": "speaking occur a lot more in your code or they the sort of they would occur more if they actually work the way you",
    "start": "1162000",
    "end": "1167400"
  },
  {
    "text": "want them to work exactly ex exactly right yeah so that that's sort of that's",
    "start": "1167400",
    "end": "1172640"
  },
  {
    "text": "what I would recommend for uh for the pep whose number starts with",
    "start": "1172640",
    "end": "1179120"
  },
  {
    "text": "three excellent and on the uh Matrix uh on the pep whose number starts with two",
    "start": "1179120",
    "end": "1184480"
  },
  {
    "text": "yeah uh that's taken literally that that pep",
    "start": "1184480",
    "end": "1193080"
  },
  {
    "text": "would actually introduce about a dozen new operators maybe two dozen if you uh",
    "start": "1193080",
    "end": "1198280"
  },
  {
    "text": "also want to combine them with assignment because the the the sort of the first section of",
    "start": "1198280",
    "end": "1205880"
  },
  {
    "text": "the pep says we propose till the operator for these five operators but there python actually has about 10 or",
    "start": "1205880",
    "end": "1213000"
  },
  {
    "text": "more uh different binary operators there's there's a couple of extra ones that aren't listed",
    "start": "1213000",
    "end": "1218840"
  },
  {
    "text": "there uh and for every operator we have uh also a combined with assignment",
    "start": "1218840",
    "end": "1226600"
  },
  {
    "text": "version and it would be sort of from from sort",
    "start": "1226600",
    "end": "1232520"
  },
  {
    "text": "of a Simplicity of the language point of view it would be annoying to have some",
    "start": "1232520",
    "end": "1239120"
  },
  {
    "text": "operators also support the Tilla version and others not uh that said it sounds like many of",
    "start": "1239120",
    "end": "1247600"
  },
  {
    "text": "the Tilla operators aren't actually uh going to be very useful for you",
    "start": "1247600",
    "end": "1253760"
  },
  {
    "text": "guys uh the sort of I've i' I've heard over lunch",
    "start": "1253760",
    "end": "1259320"
  },
  {
    "text": "a couple of arguments for uh a second multiplication operator let let me ask",
    "start": "1259320",
    "end": "1265000"
  },
  {
    "text": "you a question that there are actually already two different multiplication two different interpretations of star one is",
    "start": "1265000",
    "end": "1273279"
  },
  {
    "text": "how it works for uh built-in lists where you can only do list times number and",
    "start": "1273279",
    "end": "1279720"
  },
  {
    "text": "then it actually repeats the list so you get a longer list and then you have your",
    "start": "1279720",
    "end": "1285640"
  },
  {
    "text": "elementwise operation in numpy uh and apparently for objects that are",
    "start": "1285640",
    "end": "1293720"
  },
  {
    "text": "of a special type Matrix there is yet another meaning which uh does matrix",
    "start": "1293720",
    "end": "1301360"
  },
  {
    "text": "multiplication if you got your sort of your your extra operator for numpy which",
    "start": "1301360",
    "end": "1309240"
  },
  {
    "text": "one would be matrix multiplication which one would be element wise multiplication we'd probably have to",
    "start": "1309240",
    "end": "1315400"
  },
  {
    "text": "keep keep the star for element just because back compatibility there's 15",
    "start": "1315400",
    "end": "1321120"
  },
  {
    "text": "years of History dating back to the beginning of numeric on that which would be really insane to try to break with so",
    "start": "1321120",
    "end": "1328320"
  },
  {
    "text": "I think we would if there was another operator we would keep the star for element wise multiplication as is and",
    "start": "1328320",
    "end": "1334120"
  },
  {
    "text": "this other operator would be the matrix multiplication operator so that sounds like you're not even in favor of Pep 255",
    "start": "1334120",
    "end": "1341480"
  },
  {
    "text": "yourself because as far as I can tell that pep proposes the taer prefix as meaning element wise right um or or I",
    "start": "1341480",
    "end": "1349520"
  },
  {
    "text": "have the the the path backwards no it's possible it's possible that it proposes that honestly I think we in the",
    "start": "1349520",
    "end": "1355480"
  },
  {
    "text": "scientific Community the way we read it was because it's a new family of of special methods whose semantics are free",
    "start": "1355480",
    "end": "1361559"
  },
  {
    "text": "for objects to Define we would Define them in this way and and we would the",
    "start": "1361559",
    "end": "1366600"
  },
  {
    "text": "numai would Define double underscore I don't know t- mol or whatever the thing is called it would Define it to to be",
    "start": "1366600",
    "end": "1373960"
  },
  {
    "text": "matrix multiplication even if the pep uh guidance were to be for that one to be",
    "start": "1373960",
    "end": "1380840"
  },
  {
    "text": "for the for the for the reverse interpretation I think the cost of breaking backwards compatibility for us",
    "start": "1380840",
    "end": "1386320"
  },
  {
    "text": "would be absolutely prohibitive I don't know Travis If you see if you see it otherwise agree that that's good to know",
    "start": "1386320",
    "end": "1392240"
  },
  {
    "text": "because that that means that the pep and written is probably not not exactly what",
    "start": "1392240",
    "end": "1398559"
  },
  {
    "text": "you want uh we didn't write going back to to proposing uh smaller more focused",
    "start": "1398559",
    "end": "1407240"
  },
  {
    "text": "proposals uh it sounds like the only two operators",
    "start": "1407240",
    "end": "1413000"
  },
  {
    "text": "where it matters are star and perhaps t uh Slash maybe star star maybe power and",
    "start": "1413000",
    "end": "1421159"
  },
  {
    "text": "power yeah because power is a derivative of star and so I mean exponentiation is a composition of multiplication so if",
    "start": "1421159",
    "end": "1427799"
  },
  {
    "text": "you need special meaning for multiplication you want special meaning for exponentiation is that family so",
    "start": "1427799",
    "end": "1434159"
  },
  {
    "text": "that Matrix Powers well yeah that sort of for python star and star star are",
    "start": "1434159",
    "end": "1440679"
  },
  {
    "text": "completely unrelated unfortunately perhaps yeah that mean it's just by convention that that star star is",
    "start": "1440679",
    "end": "1447080"
  },
  {
    "text": "repeated multiplication no no but but mathematically power is a composition of",
    "start": "1447080",
    "end": "1453200"
  },
  {
    "text": "multiplications so if we could have this other one then a a star star four would",
    "start": "1453200",
    "end": "1459159"
  },
  {
    "text": "be the the fourth product of matrix product of a star and it would allow us to compute Matrix Powers which right now",
    "start": "1459159",
    "end": "1465000"
  },
  {
    "text": "are computed with Matt poow right yeah mat poow or else mat class does overload or the Matrix class overloads so people",
    "start": "1465000",
    "end": "1471080"
  },
  {
    "text": "typically don't use the Matrix class very often because having the sort of or they do is just briefly to do the array",
    "start": "1471080",
    "end": "1477399"
  },
  {
    "text": "Expressions Maj I I hate to just sort of Point At",
    "start": "1477399",
    "end": "1483440"
  },
  {
    "text": "You and saying you made a mistake but it it feels to me like the the the real",
    "start": "1483440",
    "end": "1490720"
  },
  {
    "text": "issue is that the Matrix class probably shouldn't have overloaded star oh we",
    "start": "1490720",
    "end": "1495960"
  },
  {
    "text": "didn't want it to exist in the first place but it it was there so now we're proposing changes to",
    "start": "1495960",
    "end": "1502880"
  },
  {
    "text": "the language to to sort of deal with with with a mistake that you wish you",
    "start": "1502880",
    "end": "1508600"
  },
  {
    "text": "had never made no no I'm not sure that's the right way I would color that I mean yeah I I didn't believe that for a",
    "start": "1508600",
    "end": "1515039"
  },
  {
    "text": "second either it's just sort of the words came out of your mouth that",
    "start": "1515039",
    "end": "1520158"
  },
  {
    "text": "way it's the it's that Matrix uh multiplication infix notation for matrix multiplication is so valuable that",
    "start": "1520760",
    "end": "1527960"
  },
  {
    "text": "people would create a matrix subass just so they could have a long expression that used matrix multiplication for some",
    "start": "1527960",
    "end": "1534320"
  },
  {
    "text": "P we'd have to overload some operator now well you could just make it a method name do M yes they didn't want that",
    "start": "1534320",
    "end": "1542559"
  },
  {
    "text": "which we now have which we have we have dot dot dot in fact the Matrix class I think D dates back to the days of the",
    "start": "1542559",
    "end": "1548840"
  },
  {
    "text": "days of old numeric yeah there was a matrix class and I I I guess the other problem is that that python is",
    "start": "1548840",
    "end": "1555120"
  },
  {
    "text": "dynamically typed so that you could write code that thinks it's manipulating",
    "start": "1555120",
    "end": "1562559"
  },
  {
    "text": "array numeric arrays and it's it's doing some multiplication there yeah and",
    "start": "1562559",
    "end": "1569520"
  },
  {
    "text": "somehow someone passes in a matrix and now suddenly the code uh get",
    "start": "1569520",
    "end": "1576919"
  },
  {
    "text": "the different the overridden implementation of of star for the Matrix",
    "start": "1576919",
    "end": "1582200"
  },
  {
    "text": "right and so write writing robust code that that sort of does the right thing",
    "start": "1582200",
    "end": "1588039"
  },
  {
    "text": "there does the sort of the array thing because I I think the Matrix is subass of the array right yeah it's it's",
    "start": "1588039",
    "end": "1593399"
  },
  {
    "text": "challenging actually you there were a few bugs were subtle it would it would be nice if there was a different symbol",
    "start": "1593399",
    "end": "1601279"
  },
  {
    "text": "you could use there whether that was a prefix right for a star or something",
    "start": "1601279",
    "end": "1607080"
  },
  {
    "text": "else you I don't know if you've seen people have made uh uh classes that that",
    "start": "1607080",
    "end": "1612440"
  },
  {
    "text": "funny class implementation where they've overloaded The Ore twice like the left or operator in",
    "start": "1612440",
    "end": "1618640"
  },
  {
    "text": "the right or operator with an object in the middle that they spell with oh my gosh yeah and and to to do this it's",
    "start": "1618640",
    "end": "1625600"
  },
  {
    "text": "really it's it's it's quite a hack I believe it they built something that",
    "start": "1625600",
    "end": "1630919"
  },
  {
    "text": "looks like an operator which is or some object another ore and that oh the",
    "start": "1630919",
    "end": "1636039"
  },
  {
    "text": "object is a is is an identifier of and it has it has just very very hacky",
    "start": "1636039",
    "end": "1641760"
  },
  {
    "text": "overloading so it grabs it its arguments on both sides and wraps them into a matrix multiplier hacks of that",
    "start": "1641760",
    "end": "1648760"
  },
  {
    "text": "have been implemented so yeah so there there there sort of the",
    "start": "1648760",
    "end": "1655679"
  },
  {
    "text": "the the two ways I can see the The Proposal having more chance in in some",
    "start": "1655679",
    "end": "1662240"
  },
  {
    "text": "sense is either focus on just adding a second s an extra symbol for a different",
    "start": "1662240",
    "end": "1669120"
  },
  {
    "text": "kind of multiplication yeah and I wish I could propose a good character for that",
    "start": "1669120",
    "end": "1674760"
  },
  {
    "text": "but I think you're going to have to pick it from the Unicode character set which which is unfortunately a major hurdle",
    "start": "1674760",
    "end": "1680919"
  },
  {
    "text": "because nobody know knows there's no standardized way to type Unicode characters yeah uh I was goingon to I",
    "start": "1680919",
    "end": "1688000"
  },
  {
    "text": "was goingon to ask about that because there are a lot of nice Unicode characters so would work well yeah too",
    "start": "1688000",
    "end": "1694600"
  },
  {
    "text": "many doesn't mean there a lot of good ideas but do you do you know how to type",
    "start": "1694600",
    "end": "1699640"
  },
  {
    "text": "those any of those yeah no yeah so yeah the mathematicians are so used to uh",
    "start": "1699640",
    "end": "1706480"
  },
  {
    "text": "just typing the latex names that maybe you want latex operators it turns out that the backslash sort of outside a",
    "start": "1706480",
    "end": "1713679"
  },
  {
    "text": "string literal doesn't have much meaning in Python so you you you could try to go that",
    "start": "1713679",
    "end": "1718799"
  },
  {
    "text": "direction there we go as long as your editor as long as your editor shows it",
    "start": "1718799",
    "end": "1724440"
  },
  {
    "text": "as a as a symbol oh come on you can you you can read L you can read raw later your math all your mathematicians know",
    "start": "1724440",
    "end": "1731960"
  },
  {
    "text": "how to read raw latch times here we go",
    "start": "1731960",
    "end": "1738960"
  },
  {
    "text": "uh so joking aside the the sort of the other direction I could see it going uh",
    "start": "1739000",
    "end": "1746080"
  },
  {
    "text": "I don't know that I think that's probably not going to be feasible for python 33 but it it might be sort of an",
    "start": "1746080",
    "end": "1753880"
  },
  {
    "text": "interesting thing if you can R enough support for py 34 uh would",
    "start": "1753880",
    "end": "1760159"
  },
  {
    "text": "be some way to to introduce an infinite class of",
    "start": "1760159",
    "end": "1767279"
  },
  {
    "text": "new operators and meta operator meta operator yeah so",
    "start": "1767279",
    "end": "1773640"
  },
  {
    "text": "the the the the trick is always going to be what notation do you use that is",
    "start": "1773640",
    "end": "1780279"
  },
  {
    "text": "guaranteed not to already have some meaning yeah",
    "start": "1780279",
    "end": "1785840"
  },
  {
    "text": "uh gee you could introduce back ticks again because we we carefully eradicated",
    "start": "1785840",
    "end": "1792440"
  },
  {
    "text": "those from p 3 so there's a new use for that uh somebody there is there is the",
    "start": "1792440",
    "end": "1799240"
  },
  {
    "text": "backslash uh yeah yeah in which which sort",
    "start": "1799240",
    "end": "1804799"
  },
  {
    "text": "of yeah and there may there may be other other ideas possible there yeah uh Peter",
    "start": "1804799",
    "end": "1813039"
  },
  {
    "text": "along those lines in",
    "start": "1813039",
    "end": "1815840"
  },
  {
    "text": "terms I have no idea which proposals those are so you'll have to uh them value",
    "start": "1818559",
    "end": "1826320"
  },
  {
    "text": "transation that's really that's that's yet another approach yes",
    "start": "1826320",
    "end": "1834120"
  },
  {
    "text": "leave it out of the core language but provide more options for uh for",
    "start": "1834120",
    "end": "1841720"
  },
  {
    "text": "Transformations that is something that in theory you can Implement all by yourself because you don't have to sort",
    "start": "1841720",
    "end": "1848760"
  },
  {
    "text": "of hack it into the existing as because no two python implementations have the same ASD API anyway so I really don't",
    "start": "1848760",
    "end": "1858080"
  },
  {
    "text": "want to see peps that propose syntactic features or apis that are limited to",
    "start": "1858080",
    "end": "1863679"
  },
  {
    "text": "cpython so you're probably going to have to come up with a completely implementation neutral",
    "start": "1863679",
    "end": "1870840"
  },
  {
    "text": "version of of those Transformations",
    "start": "1870840",
    "end": "1876840"
  },
  {
    "text": "uh with sufficient caching uh and and some other clever",
    "start": "1876840",
    "end": "1883519"
  },
  {
    "text": "tricks it's not even necessary that uh the transformation code is particularly",
    "start": "1883519",
    "end": "1890399"
  },
  {
    "text": "efficient so you could just you could have an import hook that either recognizes",
    "start": "1890399",
    "end": "1897519"
  },
  {
    "text": "different file name extension or just says well python files uh can also",
    "start": "1897519",
    "end": "1903919"
  },
  {
    "text": "contain this experimental syntax or maybe they look for a special Mark in the first uh paragraph of the file or",
    "start": "1903919",
    "end": "1911480"
  },
  {
    "text": "something and they'll then they'll go do some kind of pre-processing which can be",
    "start": "1911480",
    "end": "1916519"
  },
  {
    "text": "sort of you can have something quick and stupid based on a regular expression",
    "start": "1916519",
    "end": "1921880"
  },
  {
    "text": "substitution or you can have something really clever based on a complete parse uh but you in theory you can you can you",
    "start": "1921880",
    "end": "1929919"
  },
  {
    "text": "can create a system like that today and have it work with with every python implementation four separate people",
    "start": "1929919",
    "end": "1937440"
  },
  {
    "text": "myself five including me that actually done this and so this this it just feels like",
    "start": "1937440",
    "end": "1943840"
  },
  {
    "text": "you're outside God's house and is so is the solution is the sort of the experience that it doesn't work very",
    "start": "1943840",
    "end": "1951679"
  },
  {
    "text": "well or that it's hard to convince people to adopt it it's it's that rather",
    "start": "1951679",
    "end": "1957320"
  },
  {
    "text": "you feel like you're really sabotaging the core language right you're sort of like you're outside of the language",
    "start": "1957320",
    "end": "1963279"
  },
  {
    "text": "ultimately you're doing some transformation some stream parsing to basically feed and Munch some process",
    "start": "1963279",
    "end": "1968399"
  },
  {
    "text": "python back into python interpreter itself but then anything any any of the additional wonderful introspection tools",
    "start": "1968399",
    "end": "1974639"
  },
  {
    "text": "inside python they're not going to see they're see anything of what you've done right they're going to sort of they're",
    "start": "1974639",
    "end": "1980159"
  },
  {
    "text": "going to see the transformed or or whatever so all of these things feel like the one time ingest of the code",
    "start": "1980159",
    "end": "1987760"
  },
  {
    "text": "sort of hack and what would be really nice I think the as transformation hook concept is to actually make it so you",
    "start": "1987760",
    "end": "1993519"
  },
  {
    "text": "can sort of have a a wild card node that defers to a plugin for you know in the",
    "start": "1993519",
    "end": "1999120"
  },
  {
    "text": "language itself that that basically says okay you handle this particular part of it we're not going to kick back a syntax error we know that that's not something",
    "start": "1999120",
    "end": "2005600"
  },
  {
    "text": "we deal with and so it's much more of conversation between The Interpreter and kind of the frontend DSL rather",
    "start": "2005600",
    "end": "2013279"
  },
  {
    "text": "than so I I can just bounce back what I just said a minute ago which is that",
    "start": "2013279",
    "end": "2019000"
  },
  {
    "text": "you're now proposing something that is purely implementation specific so in in",
    "start": "2019000",
    "end": "2026120"
  },
  {
    "text": "order to have any chance to have the core team adopt that",
    "start": "2026120",
    "end": "2031279"
  },
  {
    "text": "suggestion even if you did all the implementation work if you gave it to to",
    "start": "2031279",
    "end": "2036519"
  },
  {
    "text": "us on a golden PL we wouldn't take it unless you had a wellth thought out",
    "start": "2036519",
    "end": "2042519"
  },
  {
    "text": "strategy for make that feature work in every python implementation it doesn't",
    "start": "2042519",
    "end": "2047840"
  },
  {
    "text": "mean that you have to write the code for all of them but you sort of your proposal needs to be sort of needs to to",
    "start": "2047840",
    "end": "2057878"
  },
  {
    "text": "support an implementation who whose complexity is proportional to to the",
    "start": "2057879",
    "end": "2064320"
  },
  {
    "text": "importance of the idea for every other python implementation around and that would mean at least jython iron Python",
    "start": "2064320",
    "end": "2072280"
  },
  {
    "text": "pipie and cpython need all sort of be treated on equal footing as far as I",
    "start": "2072280",
    "end": "2077760"
  },
  {
    "text": "know they don't have any commonality in the implementation of their",
    "start": "2077760",
    "end": "2083720"
  },
  {
    "text": "parser uh the way they represent the parse three also even C Python's parse",
    "start": "2083720",
    "end": "2089760"
  },
  {
    "text": "three changes with every version of the language we might introduce a new",
    "start": "2089760",
    "end": "2094839"
  },
  {
    "text": "feature and as a result the part paring of existing Expressions constructs a",
    "start": "2094839",
    "end": "2101400"
  },
  {
    "text": "completely different par Tre or someone might come up with an optimization for",
    "start": "2101400",
    "end": "2106560"
  },
  {
    "text": "the parser and the parse trees might look completely different we've we've gone through a couple of serious changes",
    "start": "2106560",
    "end": "2114440"
  },
  {
    "text": "to the internals of the parser in in the past decade already",
    "start": "2114440",
    "end": "2121040"
  },
  {
    "text": "so python is not one of those systems where the implementation of the",
    "start": "2121320",
    "end": "2126400"
  },
  {
    "text": "language and the use of the language are all one big soup like in small talk",
    "start": "2126400",
    "end": "2132040"
  },
  {
    "text": "where every part of the the small talk interpreter is hackable and if you ask me that also has",
    "start": "2132040",
    "end": "2140000"
  },
  {
    "text": "caused the death of small talk effectively because it it meant all all things that",
    "start": "2140000",
    "end": "2147200"
  },
  {
    "text": "would want to call themselves Small Talk were required to implement all that hack ability even if that wasn't sort of in",
    "start": "2147200",
    "end": "2156560"
  },
  {
    "text": "in the benefit of of a particular implementation",
    "start": "2156560",
    "end": "2162720"
  },
  {
    "text": "so I encourage you to to sort of come up with a kernel of an idea and and bring",
    "start": "2162720",
    "end": "2169440"
  },
  {
    "text": "it up in Python Dev where you say we have these issues and you can point to",
    "start": "2169440",
    "end": "2174880"
  },
  {
    "text": "there's this pep and that pep uh and it would be so much easier if we didn't have to propose those peps and",
    "start": "2174880",
    "end": "2181720"
  },
  {
    "text": "have to fight for them and still see them rejected and instead we could help ourselves but in in order to help",
    "start": "2181720",
    "end": "2188319"
  },
  {
    "text": "ourselves we have to have some kind of hook into the parser but your sort of",
    "start": "2188319",
    "end": "2195640"
  },
  {
    "text": "the way that hook into the parser works I'm not entirely sure how how that",
    "start": "2195640",
    "end": "2203400"
  },
  {
    "text": "would how that API would have to be designed and that is something where there's there's going to have to be interplay between core developers and uh",
    "start": "2203400",
    "end": "2212400"
  },
  {
    "text": "the sort of the primary customer base which would be numai uh Developers",
    "start": "2212400",
    "end": "2217960"
  },
  {
    "text": "and users yeah I mean there's there's there's another example going on uh",
    "start": "2217960",
    "end": "2224920"
  },
  {
    "text": "currently that actually for for some mathematicians might also",
    "start": "2224920",
    "end": "2230119"
  },
  {
    "text": "be in interesting there's someone who uses a variant of python as a language",
    "start": "2230119",
    "end": "2237760"
  },
  {
    "text": "for implementing sort of optimizations of uh certain types of ma mathematical",
    "start": "2237760",
    "end": "2244640"
  },
  {
    "text": "algorithms they're doing very highly theoretical work work and that there's a lot of sort",
    "start": "2244640",
    "end": "2251000"
  },
  {
    "text": "of uh proving things involved it's very different from what numai does although",
    "start": "2251000",
    "end": "2257480"
  },
  {
    "text": "they they they have algorithms that do things like Loop unrolling they sort of number one two",
    "start": "2257480",
    "end": "2264480"
  },
  {
    "text": "and three on on their uh wish list is",
    "start": "2264480",
    "end": "2270280"
  },
  {
    "text": "quantifications and we've sort of after a couple of rounds of discussions I think we've we've boiled it down to they",
    "start": "2270280",
    "end": "2276359"
  },
  {
    "text": "want exactly the same quantification syntax that python that ABC had 30 years",
    "start": "2276359",
    "end": "2282920"
  },
  {
    "text": "ago which group is this remember the name uh her name is Annie Leu I think",
    "start": "2282920",
    "end": "2290640"
  },
  {
    "text": "and I jeez I forget where she is somewhere in the east coast I think maybe",
    "start": "2290640",
    "end": "2297440"
  },
  {
    "text": "uh uh some University in New York I I'll I'll I'll I'll that be great what's quantifications what does that mean okay",
    "start": "2297440",
    "end": "2303960"
  },
  {
    "text": "so the syntax is it's just the upside down a and the upside down e oh that's",
    "start": "2303960",
    "end": "2310480"
  },
  {
    "text": "that's how I think of I see the python notation if sum where sum is a keyword",
    "start": "2310480",
    "end": "2318119"
  },
  {
    "text": "yeah variable in expression where that expression is an iterable thing",
    "start": "2318119",
    "end": "2326119"
  },
  {
    "text": "has condition where condition is an arbitrary expression yeah",
    "start": "2326119",
    "end": "2331640"
  },
  {
    "text": "colon and then uh some body of code yeah and the corresponding one if is if each",
    "start": "2331640",
    "end": "2339920"
  },
  {
    "text": "variable in expression has condition yeah why can't they do this with the c",
    "start": "2339920",
    "end": "2346839"
  },
  {
    "text": "the existing any and all functions because you you can trivially write that",
    "start": "2346839",
    "end": "2352720"
  },
  {
    "text": "same thing and it will execute just as efficiently using any and the generator expression you write if any which is a",
    "start": "2352720",
    "end": "2359400"
  },
  {
    "text": "built-in function left per n yeah uh X for X in",
    "start": "2359400",
    "end": "2366119"
  },
  {
    "text": "sequence if if condition condition close par MH the reason why that is not enough",
    "start": "2366119",
    "end": "2372599"
  },
  {
    "text": "for them is that in all the situations where they",
    "start": "2372599",
    "end": "2377960"
  },
  {
    "text": "want this they want to find the the the VAR",
    "start": "2377960",
    "end": "2384040"
  },
  {
    "text": "they want to keep to hold on to the variable that made that terminated the",
    "start": "2384040",
    "end": "2389440"
  },
  {
    "text": "loop so if you say if each X in blah has",
    "start": "2389440",
    "end": "2395440"
  },
  {
    "text": "something then it actually uh that variable X only survives when",
    "start": "2395440",
    "end": "2401359"
  },
  {
    "text": "the condition is false so in the else Clause of the of that if statement the",
    "start": "2401359",
    "end": "2407079"
  },
  {
    "text": "variable X is set okay if you do if some X in sequence has condition then of",
    "start": "2407079",
    "end": "2413800"
  },
  {
    "text": "course in the body of that in the den Clause uh X is set to the first x that",
    "start": "2413800",
    "end": "2421440"
  },
  {
    "text": "you encountered because of course it's it's a shortcut it stops as soon as it find finds one okay and they need they",
    "start": "2421440",
    "end": "2427800"
  },
  {
    "text": "need that that example uh because they need then they do something else with that whole H sort",
    "start": "2427800",
    "end": "2435560"
  },
  {
    "text": "of many categories of algorithms in uh graph reversal that uh can make good use",
    "start": "2435560",
    "end": "2442359"
  },
  {
    "text": "of this yeah and so they have a whole bunch of grad students who are very bright mathematicians but for whom",
    "start": "2442359",
    "end": "2448760"
  },
  {
    "text": "python is sort of something that they they never really want to to get very deep into into it except one or two of",
    "start": "2448760",
    "end": "2456000"
  },
  {
    "text": "them and so they'll they'll commit atrocities like uh writing that",
    "start": "2456000",
    "end": "2463800"
  },
  {
    "text": "condition using any and then in the in the in the if in the body of the if they",
    "start": "2463800",
    "end": "2472079"
  },
  {
    "text": "repeat the same thing in a slightly different form so that they can extract the variable that did it yeah things",
    "start": "2472079",
    "end": "2477800"
  },
  {
    "text": "like that right right or they construct the entire set of all the matches and then they uh pull the first item out of",
    "start": "2477800",
    "end": "2484599"
  },
  {
    "text": "the set that's I think that's actually that that's the yeah what what they do",
    "start": "2484599",
    "end": "2489720"
  },
  {
    "text": "is naively they construct the entire set they're lucky that it's not an infinite",
    "start": "2489720",
    "end": "2494760"
  },
  {
    "text": "set of course and then they say if the set is not empty uh then they construct the set",
    "start": "2494760",
    "end": "2503640"
  },
  {
    "text": "again and then they use the first element from the set and that's all they do and sort of yeah if if if if this was",
    "start": "2503640",
    "end": "2511560"
  },
  {
    "text": "mathematics that would be a perfectly fine way to do it hopefully yeah so anyway",
    "start": "2511560",
    "end": "2520480"
  },
  {
    "text": "uh that is another example of of sort of a syntactic extension that is of crucial",
    "start": "2520480",
    "end": "2527599"
  },
  {
    "text": "importance to some people uh and that for a number of reasons including the introduction of three three new keywords",
    "start": "2527599",
    "end": "2534960"
  },
  {
    "text": "right uh is a hard cell yes to the uh the core",
    "start": "2534960",
    "end": "2540720"
  },
  {
    "text": "developers so some transformation mechanism that",
    "start": "2540720",
    "end": "2547720"
  },
  {
    "text": "lets everyone sort of solve their their their own little problem scratch their own",
    "start": "2547720",
    "end": "2554400"
  },
  {
    "text": "itch big or small uh that that is sort of building on a foundation that is part of the",
    "start": "2554400",
    "end": "2561000"
  },
  {
    "text": "language yes uh would be much more attractive for the core developers",
    "start": "2561000",
    "end": "2566599"
  },
  {
    "text": "because first of all they see it as an interesting juicy problem we have we have we have a parsing problem we like",
    "start": "2566599",
    "end": "2573160"
  },
  {
    "text": "those and second of all it is of obvious gener we're not just solving the problem of",
    "start": "2573160",
    "end": "2579720"
  },
  {
    "text": "one user we we can immediately conjure up in our imagination many categories of",
    "start": "2579720",
    "end": "2585400"
  },
  {
    "text": "users who would be able to use this same feature for very different",
    "start": "2585400",
    "end": "2592200"
  },
  {
    "text": "purposes was that fundamentally different Macos well that's the trick that's",
    "start": "2593119",
    "end": "2598599"
  },
  {
    "text": "that's the trick how you make how do you make it fundamentally different from",
    "start": "2598599",
    "end": "2603599"
  },
  {
    "text": "macros well I I think I I want to thank you for your very thoughtful answer on that and and I think exactly just kind",
    "start": "2603839",
    "end": "2609880"
  },
  {
    "text": "of you know what you're saying there and what we've seen is that you know Travis kind of said it earlier in this morning",
    "start": "2609880",
    "end": "2616559"
  },
  {
    "text": "uh in his talk and and kind of the thing I keep saying kind of when I go and evangelize python is that it is small",
    "start": "2616559",
    "end": "2622119"
  },
  {
    "text": "enough to fit in people's heads that they can still get their get their work done and use it and in all these cases",
    "start": "2622119",
    "end": "2627400"
  },
  {
    "text": "in the case of Matrix multiply in the case of the quantization in the case of kind of you know in data analysis you look at r r flows a little better for",
    "start": "2627400",
    "end": "2633640"
  },
  {
    "text": "some stat stuff and some data munging stuff because it plays a little FAS looser with you know scoping and things",
    "start": "2633640",
    "end": "2638760"
  },
  {
    "text": "like that or with with name spaces in all these low cases it's that python is 99% the back scratcher we need to get",
    "start": "2638760",
    "end": "2645480"
  },
  {
    "text": "our itch but it's it's so good that the Legacy C I wouldn't say Legacy but the",
    "start": "2645480",
    "end": "2651359"
  },
  {
    "text": "decisions made syntactically to to scratch the itches of programmers 20 years ago 15 10 years ago that kind of",
    "start": "2651359",
    "end": "2658960"
  },
  {
    "text": "has friction with what the particular domain user needs and so so if we have a",
    "start": "2658960",
    "end": "2664160"
  },
  {
    "text": "system for doing dsls but not crazy macro not crazy you know now you can write whatever the heck you want to in",
    "start": "2664160",
    "end": "2670440"
  },
  {
    "text": "Python but really a way to robustly transform and have the have The Interpreter still kind of Reason about",
    "start": "2670440",
    "end": "2676200"
  },
  {
    "text": "this and know this is a foreign thing I don't understand but but I'm not just going to say oh my God I'm going to die",
    "start": "2676200",
    "end": "2681280"
  },
  {
    "text": "right so that that is really what at P codeon last October I had a great",
    "start": "2681280",
    "end": "2686400"
  },
  {
    "text": "conversation with Nick about this and Arman risher came up and said oh yeah I did exactly that import uh that import",
    "start": "2686400",
    "end": "2691680"
  },
  {
    "text": "you know someone else at enth thought has been doing this for declarative widget layout kind of specification everyone that we know that's got you",
    "start": "2691680",
    "end": "2698160"
  },
  {
    "text": "know python scratching 99% of the itch they they they just need that last little 1% and it's not the same 1% for",
    "start": "2698160",
    "end": "2705000"
  },
  {
    "text": "everyone and it's certainly not a universal choice for everyone but having the language being able to support that",
    "start": "2705000",
    "end": "2710200"
  },
  {
    "text": "and it is it's it is a hard thing you're right because the the the the parse tree that's something that's kind of internal",
    "start": "2710200",
    "end": "2715480"
  },
  {
    "text": "to implementation traditionally the parse are not something you extend unless you're doing your lisp style",
    "start": "2715480",
    "end": "2720640"
  },
  {
    "text": "really like you just Define your own whatever right so but I think that that is a a critically it would basically put",
    "start": "2720640",
    "end": "2727200"
  },
  {
    "text": "python light years ahead of of any of these other languages that have been built up really as dsls or that are",
    "start": "2727200",
    "end": "2733079"
  },
  {
    "text": "really well suited for solving certain categories of problems it would just give python big guns in all those areas",
    "start": "2733079",
    "end": "2738119"
  },
  {
    "text": "would allow that coder use though I mean that was the big thing I I used to be really against dsls because I wanted",
    "start": "2738119",
    "end": "2743800"
  },
  {
    "text": "everybody to write python forever only course you start but I start seeing",
    "start": "2743800",
    "end": "2748960"
  },
  {
    "text": "real power in in many dsls but you want those dsls to only extend a little bit up and then have a plateau where they",
    "start": "2748960",
    "end": "2755119"
  },
  {
    "text": "actually reuse a lot of code from each other and so there always got to be a way to express that DSL in the library",
    "start": "2755119",
    "end": "2760680"
  },
  {
    "text": "the language so that sort of thing would just make that just just sing but it's a challenging problem U but one that might",
    "start": "2760680",
    "end": "2766760"
  },
  {
    "text": "maybe we can get a couple of python devs who are interested in it to engage with us and there there there may be some",
    "start": "2766760",
    "end": "2772280"
  },
  {
    "text": "kind of intermediate solution where you don't end up allowing arbitrary",
    "start": "2772280",
    "end": "2778079"
  },
  {
    "text": "Transformations at the parse three level but where you you have some kind of hook",
    "start": "2778079",
    "end": "2783160"
  },
  {
    "text": "to to inform the parser of certain additional constructs that it that it",
    "start": "2783160",
    "end": "2789599"
  },
  {
    "text": "should recognize maybe the quantifiers can also be expressed as some new",
    "start": "2789599",
    "end": "2795400"
  },
  {
    "text": "operators maybe some each can be unary operators and has has can be a binary",
    "start": "2795400",
    "end": "2801920"
  },
  {
    "text": "operator and they can be some kind of yeah a lot of our syntax issues would be",
    "start": "2801920",
    "end": "2807920"
  },
  {
    "text": "solved by something like that and maybe perhaps operators the only one that's not we haven't talked about is the literal",
    "start": "2807920",
    "end": "2813359"
  },
  {
    "text": "ranges uh besides literal decimals literal rationals uh little ranges for",
    "start": "2813359",
    "end": "2818680"
  },
  {
    "text": "the ability to instead of saying um it's often talked about this in terms of using the slice syntax and more outside",
    "start": "2818680",
    "end": "2824559"
  },
  {
    "text": "of the brackets I think there's other ways to do it in fact in fact one thought was just use the ellipses operator uh kind of between one dot dot",
    "start": "2824559",
    "end": "2832480"
  },
  {
    "text": "dot 10 would actually do a range from 1 to 10 right or one do3 dot dot do 10 or",
    "start": "2832480",
    "end": "2839040"
  },
  {
    "text": "zero whatever Right Use the uh Ellipsis as a literal range uh it's a very common",
    "start": "2839040",
    "end": "2846160"
  },
  {
    "text": "use case that common enough Sage actually so Sage which not everyone here in the room",
    "start": "2846160",
    "end": "2853000"
  },
  {
    "text": "maybe has used or heard of is a system that uh uses python as its core and it's",
    "start": "2853000",
    "end": "2858359"
  },
  {
    "text": "completely built on top of python but it has it adds changes to the syntax of the language itself for the purposes of",
    "start": "2858359",
    "end": "2865280"
  },
  {
    "text": "providing a more mathematically oriented language and so it actually prepares at the textual level every single block of",
    "start": "2865280",
    "end": "2870720"
  },
  {
    "text": "input is prepared and transformed just as via text Transformations and one of the Transformations that Sage does",
    "start": "2870720",
    "end": "2877040"
  },
  {
    "text": "include is precisely this one so a do dob is actually the list from A to B",
    "start": "2877040",
    "end": "2882400"
  },
  {
    "text": "with B included so instead of having the the semantics of range it has the semantics of a closed interval um",
    "start": "2882400",
    "end": "2889680"
  },
  {
    "text": "because that was deemed sort of very very natural and convenient when writing when writing mathematical codes and and",
    "start": "2889680",
    "end": "2896880"
  },
  {
    "text": "I think in the nump world people have talked about thats whatever proposal for pre-processing or new new operators or",
    "start": "2896880",
    "end": "2905720"
  },
  {
    "text": "or anything around along these lines ought to take all these use cases and make sure that each",
    "start": "2905720",
    "end": "2912119"
  },
  {
    "text": "of those use cases can be dealt with because it yeah on once you have",
    "start": "2912119",
    "end": "2917400"
  },
  {
    "text": "something that supports three or four quite different use cases you can be confident that when someone comes up",
    "start": "2917400",
    "end": "2923760"
  },
  {
    "text": "with a new use case it will probably also be supported yeah if you if you sort of generalize from one use case uh",
    "start": "2923760",
    "end": "2931040"
  },
  {
    "text": "you may come in for quite a surprise when when you encounter the second yeah so in in those kind of concrete plans",
    "start": "2931040",
    "end": "2938400"
  },
  {
    "text": "one thing we have a funky opportunity this time around which is that Pon is next week and a number of us are also",
    "start": "2938400",
    "end": "2944559"
  },
  {
    "text": "going to be here at Pon so maybe in the meantime we can try to brainstorm a little bit amongst ourselves and around",
    "start": "2944559",
    "end": "2950280"
  },
  {
    "text": "Pon maybe we can try to have just discussion and lightning talk to uh",
    "start": "2950280",
    "end": "2957799"
  },
  {
    "text": "to get people uh inter and see if who has ideas on how to go about it and",
    "start": "2957799",
    "end": "2963440"
  },
  {
    "text": "maybe maybe there have been 50 people who have implemented a similar thing in of just the five that you know about",
    "start": "2963440",
    "end": "2968960"
  },
  {
    "text": "exactly yes one thing you might want to take a look at if you're curious about some historical work in this area is kot",
    "start": "2968960",
    "end": "2976240"
  },
  {
    "text": "is a templating language oh yeah",
    "start": "2976240",
    "end": "2983319"
  },
  {
    "text": "great kot kote don don kote",
    "start": "2983319",
    "end": "2988559"
  },
  {
    "text": "oh that doesn't vote well for achieving results about 8 10 years ago right yeah",
    "start": "2988559",
    "end": "2998000"
  },
  {
    "text": "andame basic looks very much like Python",
    "start": "2998000",
    "end": "3003200"
  },
  {
    "text": "program but you have a different extension and it functions a bit differently it's a web templating",
    "start": "3003200",
    "end": "3009319"
  },
  {
    "text": "language yeah there is actually the a student a former student of Dave",
    "start": "3009319",
    "end": "3014520"
  },
  {
    "text": "Beasley's um he actually wrote entire system for doing this for doing Parts time compile time interpretation time",
    "start": "3014520",
    "end": "3020400"
  },
  {
    "text": "basically quote a generic list quote for python he call it Mython and actually",
    "start": "3020400",
    "end": "3026720"
  },
  {
    "text": "Google from Mython you'll find um no his name is John real and so he has an entire framework he's already implemented for this and he kind of has",
    "start": "3026720",
    "end": "3032400"
  },
  {
    "text": "an import hook that does these tricks but but anyway so these ideas been explored in in a more like more than",
    "start": "3032400",
    "end": "3038440"
  },
  {
    "text": "just a templating system but actually deeply thinking about the structure of of the parsing steps and whatnot so",
    "start": "3038440",
    "end": "3044799"
  },
  {
    "text": "people have been kind of poking at this it sounds like a wheel that has been invented so many times that it might",
    "start": "3044799",
    "end": "3051400"
  },
  {
    "text": "actually be uh used to start standardizing how ground it actually has to be",
    "start": "3051400",
    "end": "3058160"
  },
  {
    "text": "but if if I think I mean I I actually very much like the direction this is going into because if if we manage to",
    "start": "3058160",
    "end": "3064079"
  },
  {
    "text": "get this right and give the scientific Community a way of solving all of these different little problems all in in in",
    "start": "3064079",
    "end": "3071200"
  },
  {
    "text": "one clean shot and it gives a layer for example for the sage team to instead of doing these things as prear textual",
    "start": "3071200",
    "end": "3076880"
  },
  {
    "text": "preparing hacks to basically kind of clean up their implementation maintaining the what they want yeah all",
    "start": "3076880",
    "end": "3082160"
  },
  {
    "text": "the Transformations that Sage uh currently does should should also be seen use cases absolutely absolutely",
    "start": "3082160",
    "end": "3088799"
  },
  {
    "text": "that that could actually be a very a very big win and and and if if it turns out that one or two of their",
    "start": "3088799",
    "end": "3095839"
  },
  {
    "text": "Transformations are really hard to fit in the general framework maybe those those should be excluded",
    "start": "3095839",
    "end": "3102200"
  },
  {
    "text": "okay should probably move on yeah we should perhaps one of the next what do should we go into packaging or probably",
    "start": "3102200",
    "end": "3108520"
  },
  {
    "text": "because that one can be potentially a big topic so we want to pass this one to u to David who's from within the",
    "start": "3108520",
    "end": "3114799"
  },
  {
    "text": "scientific Community probably the person who want talk work the most on issues around packing distri and and from the I should say",
    "start": "3114799",
    "end": "3121599"
  },
  {
    "text": "from the python Community I'm probably the person who has thought least about the",
    "start": "3121599",
    "end": "3126839"
  },
  {
    "text": "topic we'll think what we can get let's let's hear it so I was just saying that so basically we had our own",
    "start": "3126839",
    "end": "3133079"
  },
  {
    "text": "infrastructure buil on top of dist in numai and like one figure that I think is striking is that napai dist is as as",
    "start": "3133079",
    "end": "3140319"
  },
  {
    "text": "as much code as this to itself basically and when there was some discussion about what would end up being this too too or",
    "start": "3140319",
    "end": "3147319"
  },
  {
    "text": "packaging um like people were saying you know like we should keep this two te as",
    "start": "3147319",
    "end": "3153319"
  },
  {
    "text": "it is because it's used by a lot of people and we like some people are scientific committee but other people as",
    "start": "3153319",
    "end": "3159079"
  },
  {
    "text": "well say look the pr of these two are really fomal that you cannot fix them without breaking the API because one of",
    "start": "3159079",
    "end": "3165160"
  },
  {
    "text": "the issue of this is that there is no API it doesn't it's not really written as a library you can extend easily and",
    "start": "3165160",
    "end": "3171760"
  },
  {
    "text": "um and then the problem is this is to happen quite quickly and at least from",
    "start": "3171760",
    "end": "3179319"
  },
  {
    "text": "my impression or some other people's impression without much thought about",
    "start": "3179319",
    "end": "3184760"
  },
  {
    "text": "what was broken these two TS and what to do to fix it in these two TS to and know it looks like this two TS to is yet",
    "start": "3184760",
    "end": "3190480"
  },
  {
    "text": "another packaging tool that is yet different from the other ones and doesn't really solve anything for us so",
    "start": "3190480",
    "end": "3195880"
  },
  {
    "text": "it actually makes it more difficult for us I have to object against your representation that this uh happened",
    "start": "3195880",
    "end": "3203440"
  },
  {
    "text": "very quickly because that this has been one of the most drawn out discussions in",
    "start": "3203440",
    "end": "3208799"
  },
  {
    "text": "core developer community that I can remember of the last couple",
    "start": "3208799",
    "end": "3213960"
  },
  {
    "text": "years maybe nobody from numeric was sort of following the the python Dev list",
    "start": "3213960",
    "end": "3221280"
  },
  {
    "text": "enough but uh I remember that TK C uh was",
    "start": "3221280",
    "end": "3227240"
  },
  {
    "text": "working on this for at least two pons in a row right I think the the the first Pyon",
    "start": "3227240",
    "end": "3235160"
  },
  {
    "text": "that that he was working on he was already so frustrated that I actually had to have a talk with him to encourage",
    "start": "3235160",
    "end": "3242880"
  },
  {
    "text": "him to keep going and not give up and he was still working on it the bik on after",
    "start": "3242880",
    "end": "3248440"
  },
  {
    "text": "that okay so I don't think that it happened overnight it it it it may very",
    "start": "3248440",
    "end": "3253599"
  },
  {
    "text": "well be that nobody thought to to sort of look specifically uh at numai uh for",
    "start": "3253599",
    "end": "3261440"
  },
  {
    "text": "feedback because I I personally wasn't even aware that you guys had your own installer",
    "start": "3261440",
    "end": "3267000"
  },
  {
    "text": "uh that was as big as this two Tils so well I guess yeah for me one like",
    "start": "3267000",
    "end": "3272280"
  },
  {
    "text": "because this packaging has been long discretion not just in numerical but in Python committee for me one two years is",
    "start": "3272280",
    "end": "3278680"
  },
  {
    "text": "I would have CA that pretty quickly given all discretion before on setup so",
    "start": "3278680",
    "end": "3284359"
  },
  {
    "text": "okay yeah sort of that I guess I guess nothing ever happens in the packaging world that's the problem because and and",
    "start": "3284359",
    "end": "3291440"
  },
  {
    "text": "then someone come comes out with a terrible hack and suddenly everybody Ops",
    "start": "3291440",
    "end": "3296640"
  },
  {
    "text": "it and then progress has been stalled for seven years again that that happens with Philip Philip E's",
    "start": "3296640",
    "end": "3304240"
  },
  {
    "text": "stuff the uh some of the main issues really were around the need to build extensions and",
    "start": "3304240",
    "end": "3311440"
  },
  {
    "text": "kind of understanding that need and understanding the the reason why numai distutils overloaded all of distutils",
    "start": "3311440",
    "end": "3317160"
  },
  {
    "text": "right because it had to sort really just overload all the pieces of thiss created at the end of the day perhaps that was I",
    "start": "3317160",
    "end": "3323480"
  },
  {
    "text": "think that was probably mistake on our part right we were kind of trying trying to re get code reuse and benefit from",
    "start": "3323480",
    "end": "3328680"
  },
  {
    "text": "the registration mechanism that District JS was promoting we could have gotten all that likely by just building our own",
    "start": "3328680",
    "end": "3334520"
  },
  {
    "text": "system and then hooking in on those pieces may maybe you overloaded every single line of code in the original dist",
    "start": "3334520",
    "end": "3340400"
  },
  {
    "text": "TS exactly you didn't you didn't benefit from the correct the all we we didn't benefit from it uh it primarily but it",
    "start": "3340400",
    "end": "3347640"
  },
  {
    "text": "it seemed like the discussion and I wasn't a part of it some of the talking with David and talking with those who",
    "start": "3347640",
    "end": "3353000"
  },
  {
    "text": "were uh there didn't seem to be an understanding of the kind of build issues that numpy and numpy extensions",
    "start": "3353000",
    "end": "3359960"
  },
  {
    "text": "show up you know have typically you're Bu you're building sea libraries for sure and then perhaps cython uh Fortran",
    "start": "3359960",
    "end": "3367640"
  },
  {
    "text": "C++ C++ You're Building all these so there needs to be a make system and ability to integrate with the make",
    "start": "3367640",
    "end": "3373319"
  },
  {
    "text": "system and that was I think where some of the some of the concerns were W",
    "start": "3373319",
    "end": "3378359"
  },
  {
    "text": "either not understood or not uh not not addressed at least to the PO satisfactory to",
    "start": "3378359",
    "end": "3384720"
  },
  {
    "text": "David totally believe that that wasn't addressed because the sort of the the necessity of a make system in in the",
    "start": "3384720",
    "end": "3391839"
  },
  {
    "text": "context of of building distributions uh is is is is news to me we need to find",
    "start": "3391839",
    "end": "3397799"
  },
  {
    "text": "control over compiler flags for example compiler Flags in the this's code Flow",
    "start": "3397799",
    "end": "3403680"
  },
  {
    "text": "In This Very opaque way you basically have to instrument the code and trace it to see when oh this particular method",
    "start": "3403680",
    "end": "3409799"
  },
  {
    "text": "along the way all of a sudden flipped a flag inside of a structure there is no API for that to happen but when you're",
    "start": "3409799",
    "end": "3416240"
  },
  {
    "text": "trying to build something like cpipe which is a layer of fortrend scyon c and",
    "start": "3416240",
    "end": "3421400"
  },
  {
    "text": "C++ all of it wrapped in one obviously you need very solid and clear control of",
    "start": "3421400",
    "end": "3426960"
  },
  {
    "text": "things like compilation flags and which compilers to fire up because they're not they they're not all AI compatible and",
    "start": "3426960",
    "end": "3433359"
  },
  {
    "text": "so and all of that in the context of these two is extraordinarily complicated and frustrating to do and and do you",
    "start": "3433359",
    "end": "3440520"
  },
  {
    "text": "guys have any interest in platforms besides Linux yes certainly snacks are pervasive",
    "start": "3440520",
    "end": "3448079"
  },
  {
    "text": "uh Windows is still very widely used and so you actually have have all that stuff",
    "start": "3448079",
    "end": "3453839"
  },
  {
    "text": "with compiler flags and and everything working on all those platforms yeah if",
    "start": "3453839",
    "end": "3459760"
  },
  {
    "text": "that's one of the reason is so big the outside packager who does it yes you",
    "start": "3459760",
    "end": "3465680"
  },
  {
    "text": "that some of our outside packagers actually have to go in and Fiddle with",
    "start": "3465680",
    "end": "3470880"
  },
  {
    "text": "flag way in where we don't who was just telling me that they have that's what",
    "start": "3470880",
    "end": "3476280"
  },
  {
    "text": "they did they have a whole host of flags that they wanted to give back to n by dist Ts that they had to basically go",
    "start": "3476280",
    "end": "3482319"
  },
  {
    "text": "through all the compilers and all the platforms uh was that uh someone in Austin Peter I have to have to check my",
    "start": "3482319",
    "end": "3489559"
  },
  {
    "text": "memory hat yes yes blue jean is a I'm sure",
    "start": "3489559",
    "end": "3495760"
  },
  {
    "text": "because that's the other thing it's also it's not just Linux when I was trying to finish it's not just it's also the other unises like the unises and and Big Iron",
    "start": "3495760",
    "end": "3502599"
  },
  {
    "text": "the unises these funky unises that compile with much more exotic compilers on on on on large",
    "start": "3502599",
    "end": "3509400"
  },
  {
    "text": "machines and and doing that with their Studios is a bit of an I mean I I just I don't have the fortitude for that kind",
    "start": "3509400",
    "end": "3515200"
  },
  {
    "text": "of code anymore I abandoned this long ago and leave it to people like David well I guess like one of the impression",
    "start": "3515200",
    "end": "3521960"
  },
  {
    "text": "was because we don't want to build on make on own make in python or something because such project already exist and",
    "start": "3521960",
    "end": "3528839"
  },
  {
    "text": "one of the thing we have been trying to do is to like make so like one of the first thing I've been doing is to like",
    "start": "3528839",
    "end": "3534240"
  },
  {
    "text": "integrate scon I think you're aware of scon yeah with these two tails and it kind of worked but it was not pretty and",
    "start": "3534240",
    "end": "3540599"
  },
  {
    "text": "like the new system I've been working on which is generic enough to be used Signum by CPI is just written as a way",
    "start": "3540599",
    "end": "3545960"
  },
  {
    "text": "so that you can plug an existing tool because I'm not interesting in writing yet another python make replacement and",
    "start": "3545960",
    "end": "3552760"
  },
  {
    "text": "to build with this and you you you may have no choice it it really sounds like you're",
    "start": "3552760",
    "end": "3560160"
  },
  {
    "text": "your guys needs are so unusual compared to the larger python",
    "start": "3560160",
    "end": "3566160"
  },
  {
    "text": "community that that you're just better off building your",
    "start": "3566160",
    "end": "3571200"
  },
  {
    "text": "own or using well that that of course across",
    "start": "3571200",
    "end": "3576960"
  },
  {
    "text": "all the platforms you mentioned there's no chance of a a single make system to work working for all of those",
    "start": "3576960",
    "end": "3585160"
  },
  {
    "text": "either cake probably does right does c r it",
    "start": "3585680",
    "end": "3593240"
  },
  {
    "text": "must someone say no owns a blue",
    "start": "3593240",
    "end": "3600200"
  },
  {
    "text": "je yeah I'm not sure I guess mostly just just wanted to be able to make you aware I guess of some of the I think there is",
    "start": "3604400",
    "end": "3611119"
  },
  {
    "text": "a and we recognize it's because we're not as vocal and visible all the time as we'd like to be but there there are real",
    "start": "3611119",
    "end": "3616359"
  },
  {
    "text": "significant dis use cases for packaging that aren't necessarily address that's okay it's like pyth have to address all",
    "start": "3616359",
    "end": "3622280"
  },
  {
    "text": "those issues but just providing the ability to hook in and not not making it",
    "start": "3622280",
    "end": "3627440"
  },
  {
    "text": "extremely difficult so essentially we can't use it at all which is really probably we should have done in the first place and maybe that is the answer",
    "start": "3627440",
    "end": "3634319"
  },
  {
    "text": "maybe maybe just that is the answer for this particular situation it sounds like you guys know quite well which compiler",
    "start": "3634319",
    "end": "3640559"
  },
  {
    "text": "Flags you need to set and you have access to all the machines where you need to test your build scripts or your",
    "start": "3640559",
    "end": "3647880"
  },
  {
    "text": "make files or whatever it may just be a different use case and we have to bite the bullet and do our own sort of by by",
    "start": "3647880",
    "end": "3653520"
  },
  {
    "text": "now with all of the energy that we've burned on that we would have finished no I know we totally would have you might",
    "start": "3653520",
    "end": "3658799"
  },
  {
    "text": "you finished tce already if your existing thing works except that it it",
    "start": "3658799",
    "end": "3664000"
  },
  {
    "text": "sort of extends this details which is going to to die your best approach might",
    "start": "3664000",
    "end": "3670599"
  },
  {
    "text": "be to sort of Clean Slate CLE well well that's that's so you can rewrite the",
    "start": "3670599",
    "end": "3676400"
  },
  {
    "text": "whole thing from scratch or you could sort of do surgery where you replace the",
    "start": "3676400",
    "end": "3681680"
  },
  {
    "text": "lower lowest level of your tool which is currently based on this utility",
    "start": "3681680",
    "end": "3687119"
  },
  {
    "text": "with your own copy of that code that you import from a different uh subpackage so",
    "start": "3687119",
    "end": "3693680"
  },
  {
    "text": "that you have everything in in in hand I mean there's there's no reason why you couldn't just copy this util yeah and",
    "start": "3693680",
    "end": "3701039"
  },
  {
    "text": "sort of systematically change all the Imports so that you now owe that code so",
    "start": "3701039",
    "end": "3707359"
  },
  {
    "text": "at this point it's it's integration with piie I guess is the only I mean at that point uh I don't see any reason why that",
    "start": "3707359",
    "end": "3714480"
  },
  {
    "text": "wouldn't we couldn't still integrate with yeah we could still do because it's just a couple of API pack Index right thei p p sorry shop but right that's",
    "start": "3714480",
    "end": "3724920"
  },
  {
    "text": "just register and upload right I I don't think that there is a particular requirement that you use the standard",
    "start": "3724920",
    "end": "3731480"
  },
  {
    "text": "packaging tools the standard packaging tools provide good integration with PP but there's no reason that you could",
    "start": "3731480",
    "end": "3737880"
  },
  {
    "text": "couldn't add your own integration because as far as I know the the interface between pip and the packaging",
    "start": "3737880",
    "end": "3744680"
  },
  {
    "text": "tools is is sort of standardized it's standardized there's probably a pep that describes it so you",
    "start": "3744680",
    "end": "3752520"
  },
  {
    "text": "can just write your own implementation of that uh client and it's actually a fairly small API it's a handful of yeah",
    "start": "3752520",
    "end": "3758680"
  },
  {
    "text": "sure it's like bunch of metadata and upload",
    "start": "3758680",
    "end": "3764640"
  },
  {
    "text": "data I like that idea especially because the the Wii who has to be the work is sitting to chair to my left so",
    "start": "3764640",
    "end": "3773520"
  },
  {
    "text": "that's great uh anything else David do you want to comment on it does sound like uh that's certainly something we",
    "start": "3776599",
    "end": "3782400"
  },
  {
    "text": "have to take on um one one question I have I guess it's maybe a little bit out",
    "start": "3782400",
    "end": "3787440"
  },
  {
    "text": "there is uh we have four implementations of python that are popular pyi jython",
    "start": "3787440",
    "end": "3792680"
  },
  {
    "text": "iron python cpython uh is there any and there's been a few approach you un swallow was one attempt at a new",
    "start": "3792680",
    "end": "3798960"
  },
  {
    "text": "implementation is are there any uh uh projects you're aware of or anything you're aware of of a new cpython",
    "start": "3798960",
    "end": "3804720"
  },
  {
    "text": "implementation or a new runtime implementation that's compatible with some of the CP python apis but perhaps",
    "start": "3804720",
    "end": "3810960"
  },
  {
    "text": "trying to um do other you know clean up certain other aspects of the",
    "start": "3810960",
    "end": "3816200"
  },
  {
    "text": "runtime I don't well every once in a while I I sort of see a floating",
    "start": "3816200",
    "end": "3823319"
  },
  {
    "text": "reference to a python implemented in some other random famous language like lisp or Javas hasal JavaScript yeah",
    "start": "3823319",
    "end": "3833720"
  },
  {
    "text": "uh I'm not aware of any of those uh that need to be taken seriously",
    "start": "3833720",
    "end": "3841279"
  },
  {
    "text": "okay I mean it's aren Python jython piie and cpython and then there is scyon",
    "start": "3841279",
    "end": "3846839"
  },
  {
    "text": "which is sort of a has a special symbiotic relationship with cpython yeah",
    "start": "3846839",
    "end": "3852440"
  },
  {
    "text": "yeah or but also iron python I mean one of the things one of the ways to get numpy onto iron python was to actually",
    "start": "3852440",
    "end": "3858599"
  },
  {
    "text": "or scipi more particularly was to write a c backend to scyon and then use it as",
    "start": "3858599",
    "end": "3865000"
  },
  {
    "text": "the generation language and so it essentially has a c I wasn't aware of that that's that's actually pretty cool",
    "start": "3865000",
    "end": "3871119"
  },
  {
    "text": "it did U dag was here he was involved with that work it got it didn't it I",
    "start": "3871119",
    "end": "3878240"
  },
  {
    "text": "mean the iron pip back in for C was it got just far enough",
    "start": "3878240",
    "end": "3883960"
  },
  {
    "text": "generator.net and then it died I mean well so Microsoft sort of stopped",
    "start": "3883960",
    "end": "3889520"
  },
  {
    "text": "getting being excited about Ron python right and that certainly you know took the air out of the room uh and",
    "start": "3889520",
    "end": "3896359"
  },
  {
    "text": "developers went elsewhere well I can I can also see",
    "start": "3896359",
    "end": "3902760"
  },
  {
    "text": "that the typical code you write in scyon has some dependency on Native apis and",
    "start": "3902760",
    "end": "3911079"
  },
  {
    "text": "those native apis are different on on every platform so even even if you could",
    "start": "3911079",
    "end": "3916960"
  },
  {
    "text": "write a scyon translator that Target C uh the the typical piece of scyon",
    "start": "3916960",
    "end": "3924160"
  },
  {
    "text": "source code would still not be all that useful on that platform because it's not",
    "start": "3924160",
    "end": "3929200"
  },
  {
    "text": "just a subset of python that happens to compile faster but it's also an extension of python that lets you call",
    "start": "3929200",
    "end": "3936160"
  },
  {
    "text": "all kinds of uh funky things in either directly in the C python API python C",
    "start": "3936160",
    "end": "3941799"
  },
  {
    "text": "API or just in lipy or whatever other Library you happen to have loaded open",
    "start": "3941799",
    "end": "3947480"
  },
  {
    "text": "SSL is probably popular yeah uh dou I",
    "start": "3947480",
    "end": "3952680"
  },
  {
    "text": "believe it was C be very very successful did didn't the scon the net backend of scon use manage",
    "start": "3952680",
    "end": "3959319"
  },
  {
    "text": "C++ or did it emit C it uses no it used C++ CLR",
    "start": "3959319",
    "end": "3965000"
  },
  {
    "text": "so you know it didn't worry about so it could keep using the API in the header",
    "start": "3965000",
    "end": "3970039"
  },
  {
    "text": "files rather than having to use some API a binary interface which have broken a",
    "start": "3970039",
    "end": "3975119"
  },
  {
    "text": "little of C code uh but certainly you know we've been thinking about like",
    "start": "3975119",
    "end": "3981079"
  },
  {
    "text": "having a subset of C of I me titled work as kind of a link",
    "start": "3981079",
    "end": "3987400"
  },
  {
    "text": "with front cap for wrapping C code yeah basically I mean in addition to C types",
    "start": "3987400",
    "end": "3993960"
  },
  {
    "text": "for has has anybody tried scyon and Pipi yes there was a Google phod last",
    "start": "3993960",
    "end": "4001599"
  },
  {
    "text": "year which and the aim of that was to create a SE a pii back in foron",
    "start": "4001599",
    "end": "4009039"
  },
  {
    "text": "basically and I I I don't know too much about it but I think the approach was to generate C types C from",
    "start": "4009039",
    "end": "4016720"
  },
  {
    "text": "C or or something along those lines but but there certainly things I mean I mean",
    "start": "4016720",
    "end": "4022000"
  },
  {
    "text": "there lateness well there has been discussion about definitely but I don't know too",
    "start": "4022000",
    "end": "4031160"
  },
  {
    "text": "much there some attempts okay does anybody from the",
    "start": "4031160",
    "end": "4037839"
  },
  {
    "text": "audience have questions we have a few more is as yes um yeah I want to bring",
    "start": "4037839",
    "end": "4044119"
  },
  {
    "text": "up the import problem so I was going to ask are you Asher yeah okay so we we discussed partly some of that over lunch",
    "start": "4044119",
    "end": "4051640"
  },
  {
    "text": "and and but it would be maybe you can summarize how you see the discussion that we had and and and can kind of pick",
    "start": "4051640",
    "end": "4057960"
  },
  {
    "text": "it up from there well I I would like to invite you to sort of explain what you",
    "start": "4057960",
    "end": "4064119"
  },
  {
    "text": "observed and Asher why why don't you actually do it through the microphone since it's kind of one of the topics for",
    "start": "4064119",
    "end": "4069200"
  },
  {
    "text": "the discussion so that it ends up being recorded ah we have a new panelist",
    "start": "4069200",
    "end": "4074359"
  },
  {
    "text": "excellent",
    "start": "4074359",
    "end": "4077359"
  },
  {
    "text": "okay so what we saw um this is a Livermore we're running on Blue Jean P right now with um 32 or 64,000",
    "start": "4083359",
    "end": "4093599"
  },
  {
    "text": "cores um and what happens is we go to do we go to Startup we",
    "start": "4093599",
    "end": "4098679"
  },
  {
    "text": "import um and so I have I had a trivial example 100 C extension modules function each",
    "start": "4098679",
    "end": "4106120"
  },
  {
    "text": "trivial you know not large um it takes at 32k processes takes about 25 minutes",
    "start": "4106120",
    "end": "4113000"
  },
  {
    "text": "to get the interpreters going which sounds like a long time to some of you but actually that's okay um and then it",
    "start": "4113000",
    "end": "4120278"
  },
  {
    "text": "took five and a half hours to load the 100 modules uh and so I had a student last",
    "start": "4120279",
    "end": "4126679"
  },
  {
    "text": "summer uh we worked on a hack that um uses MPI to the rank zero process goes",
    "start": "4126679",
    "end": "4133318"
  },
  {
    "text": "through and finds out where the module is is and um broadcasts that information",
    "start": "4133319",
    "end": "4138600"
  },
  {
    "text": "or um and everybody else Waits and then everybody goes out to the file system and gets it from that location and",
    "start": "4138600",
    "end": "4145440"
  },
  {
    "text": "everybody's still hitting the file system um for the actual modules takes five minutes instead of five and a half",
    "start": "4145440",
    "end": "4150560"
  },
  {
    "text": "hours W um and you know when we have 12 or 24hour block",
    "start": "4150560",
    "end": "4155960"
  },
  {
    "text": "allocations um that's the difference between getting a run done and not getting it done um so",
    "start": "4155960",
    "end": "4162278"
  },
  {
    "text": "that works pretty well and people have done other things um a few people have hacked The Interpreter to use MPI for",
    "start": "4162279",
    "end": "4168838"
  },
  {
    "text": "all of the um loading um I looked actually Dave Beasley did that 15 years",
    "start": "4168839",
    "end": "4174238"
  },
  {
    "text": "ago um and it's been read down at least twice I know um and and that'll never get Upstream because you don't want well",
    "start": "4174239",
    "end": "4181520"
  },
  {
    "text": "wait a second Upstream has all the import hooks you need to uh help yourself there right",
    "start": "4181520",
    "end": "4188640"
  },
  {
    "text": "um well like pep 30 or two because that that actually um that looks really",
    "start": "4188640",
    "end": "4194800"
  },
  {
    "text": "promising but that requires knowing where because it uses the location and file name to decide what um loader to",
    "start": "4194800",
    "end": "4203840"
  },
  {
    "text": "use yeah but there is also a meta hook that you can put in front of that I I",
    "start": "4203840",
    "end": "4209600"
  },
  {
    "text": "promise you that the import module has already enough hooks to help you it it does I can I can guarantee it does okay",
    "start": "4209600",
    "end": "4217199"
  },
  {
    "text": "uh so it took me a while to figure out what those hooks were Yeah Yeah well",
    "start": "4217199",
    "end": "4222400"
  },
  {
    "text": "yeah that's that's problem a solution to a lot of problem people have absolutely there I'm Al also interested in",
    "start": "4222400",
    "end": "4230199"
  },
  {
    "text": "understanding what what takes 25 minutes to start 32,000 interpreters do they all",
    "start": "4230199",
    "end": "4236120"
  },
  {
    "text": "sort of sequentially check in with some Central locking device or something um",
    "start": "4236120",
    "end": "4241440"
  },
  {
    "text": "it's just um well it's the import problem but um it's before we can get a hold of it in",
    "start": "4241440",
    "end": "4247640"
  },
  {
    "text": "that case um it's still importing all the stuff that starts The Interpreter uh what really kills us is",
    "start": "4247640",
    "end": "4255400"
  },
  {
    "text": "the failed estats um that it goes through um and says hey I want numpy",
    "start": "4255400",
    "end": "4261800"
  },
  {
    "text": "let's check the first directory is there an np. py is there an np. pyc is there an npy um directory with an it yeah so",
    "start": "4261800",
    "end": "4270520"
  },
  {
    "text": "that that that particular probing algorithm is completely overridable yes",
    "start": "4270520",
    "end": "4276400"
  },
  {
    "text": "yes so I actually there's a registration mechanism that I I sort of at upd you",
    "start": "4276400",
    "end": "4282080"
  },
  {
    "text": "could do something very similar right and and it's actually useful for versioning of packages too you have a",
    "start": "4282080",
    "end": "4287320"
  },
  {
    "text": "virtual M that's just simply file based right with this python run with this file you know exactly we importing",
    "start": "4287320",
    "end": "4294239"
  },
  {
    "text": "everything know we we ran into a similar problem probably again 15 years ago uh",
    "start": "4294239",
    "end": "4301639"
  },
  {
    "text": "not with a multi-processing solution but just with running a large app that was",
    "start": "4301639",
    "end": "4307400"
  },
  {
    "text": "doing hundreds of imports and everything was much slower so hundreds of imports was actually significant number of",
    "start": "4307400",
    "end": "4313760"
  },
  {
    "text": "imports and it was doing it over NFS and just as you say there were lots of stats",
    "start": "4313760",
    "end": "4320000"
  },
  {
    "text": "and it turns out that NFS in general stat is the absolute slowest system call",
    "start": "4320000",
    "end": "4326800"
  },
  {
    "text": "in the entire system because apparently it sort of it insists on always giving",
    "start": "4326800",
    "end": "4332280"
  },
  {
    "text": "you uncashed fresh information so it hits this the server that has the actual",
    "start": "4332280",
    "end": "4337520"
  },
  {
    "text": "files every single time and so our solution was that again we we just",
    "start": "4337520",
    "end": "4343639"
  },
  {
    "text": "overloaded the entire inut Machinery which even 15 years ago before pep 302",
    "start": "4343639",
    "end": "4348920"
  },
  {
    "text": "you could do that uh and we we we sort of I think what we did was instead of",
    "start": "4348920",
    "end": "4355239"
  },
  {
    "text": "doing we didn't do any stats uh for every directory on CIS path we did a reader which reads the contents",
    "start": "4355239",
    "end": "4362920"
  },
  {
    "text": "of the directory once and we loaded that into a dictionary and then we just do a a check in that it's is the is the file",
    "start": "4362920",
    "end": "4369920"
  },
  {
    "text": "name in that dictionary and that's exactly what um what I think the correct solution for our use case is because the",
    "start": "4369920",
    "end": "4375560"
  },
  {
    "text": "problem with the NPI solution is well one it depends on NPI and and two it requires the code to be synchronous U",
    "start": "4375560",
    "end": "4381560"
  },
  {
    "text": "and so you have to sort of turn this Behavior off and on because otherwise you know if some rank wants to import",
    "start": "4381560",
    "end": "4386840"
  },
  {
    "text": "something that rank zero didn't import uh yeah it won't work so you have to um minimize where this happen um I",
    "start": "4386840",
    "end": "4395840"
  },
  {
    "text": "thought so there used to be before pep 302 there was a way um wasn't there an option to actually do this sort of",
    "start": "4395840",
    "end": "4402239"
  },
  {
    "text": "caching that's what I was told although I couldn't find a discussion of it that at one point there is a way to just cash",
    "start": "4402239",
    "end": "4408639"
  },
  {
    "text": "everything um you can override under under import under under that's any way",
    "start": "4408639",
    "end": "4413960"
  },
  {
    "text": "you want there's also a command line option- capital s that stops IT from doing any",
    "start": "4413960",
    "end": "4420040"
  },
  {
    "text": "Imports uh as part of the setup so when you when you start a python interpreter",
    "start": "4420040",
    "end": "4425880"
  },
  {
    "text": "say you start it interactively or you give it a script before it gives you the interactive prompt it has probably",
    "start": "4425880",
    "end": "4432560"
  },
  {
    "text": "imported 50 or 100 standard Library modules yeah and that's a 25 minute you",
    "start": "4432560",
    "end": "4438000"
  },
  {
    "text": "can you can drop that to Zero by using capital S on the command line Dash",
    "start": "4438000",
    "end": "4443679"
  },
  {
    "text": "capital S on the command line because then it just says okay I'm not going to import the setup module not even going",
    "start": "4443679",
    "end": "4450920"
  },
  {
    "text": "to look for it it it has a very simple CIS do path uh and then it's up to the script",
    "start": "4450920",
    "end": "4457320"
  },
  {
    "text": "or the interactive session that runs uh to manipulate uh CIS path or",
    "start": "4457320",
    "end": "4463800"
  },
  {
    "text": "other import hooks to uh oh to find mod that point I could build because we want",
    "start": "4463800",
    "end": "4469360"
  },
  {
    "text": "to build this this dictionary so you exactly what you what you do then is you you sort of you import the absolute",
    "start": "4469360",
    "end": "4476360"
  },
  {
    "text": "minimum of stuff that you absolutely need I mean if if you you probably need",
    "start": "4476360",
    "end": "4482040"
  },
  {
    "text": "some file system access so you can you can import the posix module which is a built-in module instead of the OS module",
    "start": "4482040",
    "end": "4489120"
  },
  {
    "text": "which uh is written in Python and you have pretty much the same apis",
    "start": "4489120",
    "end": "4495320"
  },
  {
    "text": "okay so I'll have to go back and look at the at the um the metapath um because because I I'd like",
    "start": "4495320",
    "end": "4502159"
  },
  {
    "text": "to sit down and talk to you about it actually yeah use case I've heard of it multiple times it seems like what it",
    "start": "4502159",
    "end": "4508040"
  },
  {
    "text": "seems like it's solvable yeah and people there are I know at least three or four different groups um someone at Berkeley",
    "start": "4508040",
    "end": "4513719"
  },
  {
    "text": "lab someone at argon few other places everybody's redoing this and a different level some people are doing it yeah um",
    "start": "4513719",
    "end": "4521120"
  },
  {
    "text": "someone else at Livermore is doing it with a LD preload trick where they're throwing something in front and and",
    "start": "4521120",
    "end": "4526239"
  },
  {
    "text": "doing this sort of caching but actually at a lower level than python just you know sort of an OS level but it's a hack",
    "start": "4526239",
    "end": "4532320"
  },
  {
    "text": "I mean it you you're just shoving something in front of the system libraries and I I assume that sort of that I remember from our lunch",
    "start": "4532320",
    "end": "4538320"
  },
  {
    "text": "conversation actually that one of the fundamental problems why this is such a big deal is that you these are actually",
    "start": "4538320",
    "end": "4545159"
  },
  {
    "text": "diskless nodes right yeah and and that's because if if if I had to solve the same",
    "start": "4545159",
    "end": "4550199"
  },
  {
    "text": "problem at Google on in a Google data center I would make sure that the entire",
    "start": "4550199",
    "end": "4555880"
  },
  {
    "text": "python standard library was on the local disk and import from local disk is fast enough that you don't have you don't",
    "start": "4555880",
    "end": "4562159"
  },
  {
    "text": "have to worry about any of that but if you're diskless of course you uh you have a very different proposition yeah",
    "start": "4562159",
    "end": "4567760"
  },
  {
    "text": "we'd love to do that too problem is the dis local disc doesn't make linpack run faster so it's hard to um get machine",
    "start": "4567760",
    "end": "4574800"
  },
  {
    "text": "speced to um to solve the that problem for reasons outside of our control have",
    "start": "4574800",
    "end": "4581560"
  },
  {
    "text": "a question couple of other things uh the uh there stay there",
    "start": "4581560",
    "end": "4589639"
  },
  {
    "text": "um um you should look into zip Imports yeah um that would concentrate",
    "start": "4589719",
    "end": "4596920"
  },
  {
    "text": "all your uh Imports into a single file which would make it a lot more efficient except for except I mean he's was",
    "start": "4596920",
    "end": "4602480"
  },
  {
    "text": "talking about 100 extension modules and don't those can be loaded easily from zip not without local disc this was to",
    "start": "4602480",
    "end": "4609360"
  },
  {
    "text": "sort of simulate the actual code we use this that was just a sure Standalone yeah the other thing is you you really",
    "start": "4609360",
    "end": "4616159"
  },
  {
    "text": "want to get away from NFS um there you should probably talk to",
    "start": "4616159",
    "end": "4621320"
  },
  {
    "text": "someone who's a real system in about the different options that you have for that but I mean you know just as a for",
    "start": "4621320",
    "end": "4627040"
  },
  {
    "text": "example um even if these are diskless nodes you should be able to create a ram",
    "start": "4627040",
    "end": "4632280"
  },
  {
    "text": "dis yeah um although unfortunately Ram they they're short on memory",
    "start": "4632280",
    "end": "4637600"
  },
  {
    "text": "too that's issue me but that is I'm just say you know uh one of the exercises",
    "start": "4637600",
    "end": "4644520"
  },
  {
    "text": "we've done my work recently is get rid of every single NFS access and it's",
    "start": "4644520",
    "end": "4649719"
  },
  {
    "text": "amazing how much of an improvement that makes not just in speed but in all in just plain system",
    "start": "4649719",
    "end": "4655960"
  },
  {
    "text": "reliability just don't use NFS yeah and we are using other file systems uh and some of them you know F",
    "start": "4655960",
    "end": "4663520"
  },
  {
    "text": "we can treat as read only um and therefore get a lot better caching but still doesn't help us when it comes to",
    "start": "4663520",
    "end": "4668960"
  },
  {
    "text": "fail lookups and all your Imports could come from a redon file system obvious they could um but it's it still doesn't",
    "start": "4668960",
    "end": "4677320"
  },
  {
    "text": "um the implementation still don't handle the failed lookups very well and and um you know that's more of a vender issue",
    "start": "4677320",
    "end": "4683360"
  },
  {
    "text": "but so we have to work with what we have unfortunately and and we have control over you only paid like1 million for it",
    "start": "4683360",
    "end": "4691080"
  },
  {
    "text": "so that would be probably a severe underestimate but",
    "start": "4691080",
    "end": "4696840"
  },
  {
    "text": "unfortunately well for 3 for 32k notes that's that's not a bad that would not be a bad price yeah the problem is our",
    "start": "4696840",
    "end": "4703560"
  },
  {
    "text": "the machine were now it has 1.6 million nodes and if we're going to take",
    "start": "4703560",
    "end": "4709480"
  },
  {
    "text": "advantage of that I mean you clearly want to parallelize",
    "start": "4709480",
    "end": "4714639"
  },
  {
    "text": "this last last bit yeah yeah if if it takes us three or four weeks to to get",
    "start": "4714639",
    "end": "4720239"
  },
  {
    "text": "to the um the prompt we're gonna have",
    "start": "4720239",
    "end": "4725600"
  },
  {
    "text": "problems so much for the interactivity of python right yeah this is all running in in batch",
    "start": "4725719",
    "end": "4732239"
  },
  {
    "text": "mode you know this at this scale but yeah so um did you have anything no that's",
    "start": "4732239",
    "end": "4740239"
  },
  {
    "text": "that sounds like a good conclusion yeah we're kind of wrapping up I the one",
    "start": "4740239",
    "end": "4746320"
  },
  {
    "text": "comment that was the one comment I was gonna make did did you plant all those people",
    "start": "4746600",
    "end": "4752000"
  },
  {
    "text": "in the audience here's my post talk so I could have but no I didn't um so the the",
    "start": "4752000",
    "end": "4758159"
  },
  {
    "text": "one comment that I think we wanted to make from our community towards the standard library and towards the python",
    "start": "4758159",
    "end": "4763480"
  },
  {
    "text": "core Dev team is the the importance of interactive doc of Doc strings in",
    "start": "4763480",
    "end": "4770000"
  },
  {
    "text": "general in libraries we we have in the numpy scipi MPL lib Etc World we've sort",
    "start": "4770000",
    "end": "4776000"
  },
  {
    "text": "of because we work so often interactively we've gotten into the habit of writing good dock strings and",
    "start": "4776000",
    "end": "4781239"
  },
  {
    "text": "we even have a do a a do string standard the numpy dock string standard which is basically very simple rest with a few",
    "start": "4781239",
    "end": "4787719"
  },
  {
    "text": "sections that gets onative format it and even tools to make it very easy to edit and improve dock strings a web editor so",
    "start": "4787719",
    "end": "4795800"
  },
  {
    "text": "that anyone can basically edit and contribute patches to the doc strings without having to even have git or",
    "start": "4795800",
    "end": "4802400"
  },
  {
    "text": "Version Control installed or anything at all and over the years this combination of a few technical tools some standards",
    "start": "4802400",
    "end": "4808080"
  },
  {
    "text": "and practices have led to a very very pleasant situation where most work that",
    "start": "4808080",
    "end": "4813120"
  },
  {
    "text": "you do with with these libraries you can find out what you need just by looking at the doct strings and I python",
    "start": "4813120",
    "end": "4818520"
  },
  {
    "text": "displays those in a number of manners and it's often very frustrating whe whether either when we're working alone",
    "start": "4818520",
    "end": "4823920"
  },
  {
    "text": "or teaching if we need anything from the standard Library we're lucky if there's a doc string that says anything useful",
    "start": "4823920",
    "end": "4830159"
  },
  {
    "text": "the docs tend to be very good but you have to go to the HTML build the interactive doc strings tend to be they",
    "start": "4830159",
    "end": "4837320"
  },
  {
    "text": "range from low quality to nonexistent fa Fair too poor exactly and so this is sort of",
    "start": "4837320",
    "end": "4843719"
  },
  {
    "text": "something that at least we'd like to plant a bug in in the python core kind of brain that it would we think improve",
    "start": "4843719",
    "end": "4852120"
  },
  {
    "text": "significantly the usability of the language at large and we very happy to share the tools the experience that we",
    "start": "4852120",
    "end": "4858159"
  },
  {
    "text": "have the the tool chain is quite good and I think it would be great actually if there was a dock string standard that",
    "start": "4858159",
    "end": "4865440"
  },
  {
    "text": "was language level I mean pep style obviously something that was widely reasonably widely accepted and adopted",
    "start": "4865440",
    "end": "4872280"
  },
  {
    "text": "so that there would be more uniformity because then we could put it would be much easier for example in IPython which",
    "start": "4872280",
    "end": "4877360"
  },
  {
    "text": "is our interactive entry point to put help Searchers that index these things well that provide users if you look at",
    "start": "4877360",
    "end": "4884239"
  },
  {
    "text": "the quality of the help system of a system such as Mathematica or mat lab the the help system in Mathematica is a",
    "start": "4884239",
    "end": "4890080"
  },
  {
    "text": "work of art it's absolutely spectacular it has an excellent index it has its own search and it produces pages with very",
    "start": "4890080",
    "end": "4897000"
  },
  {
    "text": "good reference so users work interactively in those system very very efficiently and that is one thing that",
    "start": "4897000",
    "end": "4903639"
  },
  {
    "text": "when they come from mathematic or mat lab into python they sort of see wow this is really terrible you're telling",
    "start": "4903639",
    "end": "4909600"
  },
  {
    "text": "me that the best you can do is tell me to go Google what I need um and so it's",
    "start": "4909600",
    "end": "4914800"
  },
  {
    "text": "just something sort of to put out there for I don't know discussion to see if if there's it's if it's a seed that grows",
    "start": "4914800",
    "end": "4920000"
  },
  {
    "text": "over time um in the python core Community well you're you're proposing",
    "start": "4920000",
    "end": "4927000"
  },
  {
    "text": "an inordinate amount of work here because we have very good documentation",
    "start": "4927000",
    "end": "4933000"
  },
  {
    "text": "that was very intentionally written out of line not as part of the doc strings",
    "start": "4933000",
    "end": "4938760"
  },
  {
    "text": "so we have much more freedom to sort of emphasize things uh group",
    "start": "4938760",
    "end": "4946159"
  },
  {
    "text": "things uh show examples that cross multiple a parts of an API deemphasize",
    "start": "4946159",
    "end": "4952960"
  },
  {
    "text": "things that are not so important uh use much richer",
    "start": "4952960",
    "end": "4958040"
  },
  {
    "text": "layout uh and you're somehow requesting that we put all that in the dock strings",
    "start": "4958040",
    "end": "4965840"
  },
  {
    "text": "which even if we have had a room full of people here who would all help out doing",
    "start": "4965840",
    "end": "4972080"
  },
  {
    "text": "it it would probably still take a year um well I don't I don't think it's you",
    "start": "4972080",
    "end": "4977520"
  },
  {
    "text": "underestimate how big the standard library is I think no no because that's not what I'm proposing what I'm proposing is a that over time I wasn't",
    "start": "4977520",
    "end": "4985120"
  },
  {
    "text": "proposing anything being done wholesale that over time basically there's a practice of better doc strings in this",
    "start": "4985120",
    "end": "4990159"
  },
  {
    "text": "stand library for new code yeah okay so then the this comes up occasionally on python",
    "start": "4990159",
    "end": "4997320"
  },
  {
    "text": "Dev and you can't really re expect us to write all the documentation twice",
    "start": "4997320",
    "end": "5005400"
  },
  {
    "text": "so we've made a very solid commitment to having external",
    "start": "5005400",
    "end": "5011560"
  },
  {
    "text": "documentation I'm not entirely sure how to sort of how to build that interactive",
    "start": "5011560",
    "end": "5018440"
  },
  {
    "text": "system but we can generate different formats from the external documentation it's not",
    "start": "5018440",
    "end": "5025480"
  },
  {
    "text": "tied to HTML there's a there's a sort of uh output neutral input format uh uh and",
    "start": "5025480",
    "end": "5035760"
  },
  {
    "text": "there are tools that generate different kinds of output from that already if you have a need for a different kind of",
    "start": "5035760",
    "end": "5042560"
  },
  {
    "text": "output we can generate that if you want some kind of indexing so that if",
    "start": "5042560",
    "end": "5051000"
  },
  {
    "text": "you have the name of a class or a function your interactive help system",
    "start": "5051000",
    "end": "5057800"
  },
  {
    "text": "can find exactly where that thing is described or or s of mentioned in the",
    "start": "5057800",
    "end": "5067600"
  },
  {
    "text": "the offline documentation with with I think there is enough markup in the",
    "start": "5067600",
    "end": "5073840"
  },
  {
    "text": "input for the doc build those indices to to to do that uh okay the dock strings",
    "start": "5073840",
    "end": "5080880"
  },
  {
    "text": "the way they are in the standard library and then of course there's lots of extension modules where the doc strings",
    "start": "5080880",
    "end": "5086719"
  },
  {
    "text": "are included in the C code which makes it extra complicated because there's less",
    "start": "5086719",
    "end": "5092280"
  },
  {
    "text": "metadata available out the about the argument there uh I don't think that you can get that",
    "start": "5092280",
    "end": "5100440"
  },
  {
    "text": "can get people to agree that we should abandon the practice of writing good",
    "start": "5100440",
    "end": "5107159"
  },
  {
    "text": "external documentation and instead start writing good dock strings I so it's it's",
    "start": "5107159",
    "end": "5114320"
  },
  {
    "text": "one or the other and we we have too large an investment in tools that uh do",
    "start": "5114320",
    "end": "5120760"
  },
  {
    "text": "external documentation really well so uh I agree that uh the the help function",
    "start": "5120760",
    "end": "5128400"
  },
  {
    "text": "that currently just prints the doc string uh and does some kind of",
    "start": "5128400",
    "end": "5134199"
  },
  {
    "text": "introspection of an object to print other stuff uh is is often grossly",
    "start": "5134199",
    "end": "5141040"
  },
  {
    "text": "inadequate it is it prints way too much information in most cases like you you",
    "start": "5141040",
    "end": "5146119"
  },
  {
    "text": "ask help about a class and it gives way too much details I mean the typical",
    "start": "5146119",
    "end": "5151239"
  },
  {
    "text": "class ends up having a hundred different items of information about it if you include all the buil-in operators that",
    "start": "5151239",
    "end": "5157360"
  },
  {
    "text": "it overloads or inherits and all the little bits of data and and three quarters of that are usually useless",
    "start": "5157360",
    "end": "5165400"
  },
  {
    "text": "not that sort of were never intended for external use and half of the rest are",
    "start": "5165400",
    "end": "5171679"
  },
  {
    "text": "not very interesting or have very low quality documentation so that I agree that a lot",
    "start": "5171679",
    "end": "5180080"
  },
  {
    "text": "a lot needs to be done but I think we shouldn't Sol search for a solution that",
    "start": "5180080",
    "end": "5185119"
  },
  {
    "text": "requires us to completely rethink where we write the",
    "start": "5185119",
    "end": "5190520"
  },
  {
    "text": "documentation now that that makes sense and that idea of perhaps building indices that we could hook into from my",
    "start": "5190520",
    "end": "5196719"
  },
  {
    "text": "python actually does does sound promising and that's the kind of thing that we we could turn it into a project",
    "start": "5196719",
    "end": "5201800"
  },
  {
    "text": "for someone and the that also the the HTML that is generated has lots of anchors that you can link to link to I",
    "start": "5201800",
    "end": "5209560"
  },
  {
    "text": "mean you have a page that describes an entire module you can link to every single function or or section in that",
    "start": "5209560",
    "end": "5217400"
  },
  {
    "text": "yes that page yeah I've seen those anchors those anchors as far as I know are also quite stable yes they're",
    "start": "5217400",
    "end": "5224119"
  },
  {
    "text": "they're not just random numbers uh they actually are derived from the text or",
    "start": "5224119",
    "end": "5229520"
  },
  {
    "text": "the function name they're from the text yeah the approach that that has been taken in in most of the scientific",
    "start": "5229520",
    "end": "5234880"
  },
  {
    "text": "projects is is to have two sets of documentation But Not Duplicate so there is more of what we call narrative",
    "start": "5234880",
    "end": "5240440"
  },
  {
    "text": "documentation which is sort of higher level explanation and then the strings build a pure API reference and so that",
    "start": "5240440",
    "end": "5247440"
  },
  {
    "text": "that is how many of our projects have evolved um to and that is a perfectly F",
    "start": "5247440",
    "end": "5253159"
  },
  {
    "text": "approach it's not the only approach and it it is unfortunately miles away from",
    "start": "5253159",
    "end": "5258560"
  },
  {
    "text": "the core languages approach and uh I give you very little hope that you'll be",
    "start": "5258560",
    "end": "5264960"
  },
  {
    "text": "able to to get us to uh make a 90 degree uh turn there no but but but I but I",
    "start": "5264960",
    "end": "5270239"
  },
  {
    "text": "like that idea of perhaps working with with the hooks in there to either generate or scan or have a have a place",
    "start": "5270239",
    "end": "5276880"
  },
  {
    "text": "where we we build these indices and then we expose those indices in an integrated manner because then within within our",
    "start": "5276880",
    "end": "5283360"
  },
  {
    "text": "projects we can follow a different set of conventions and index those but simply ensure that for the pieces that",
    "start": "5283360",
    "end": "5289040"
  },
  {
    "text": "are from the standard Library which we can very easily detect by introspection because whenever you ask on an object we know where it comes from then for those",
    "start": "5289040",
    "end": "5296360"
  },
  {
    "text": "we can query into these indices and the way to invoke help in IPython at least",
    "start": "5296360",
    "end": "5301440"
  },
  {
    "text": "is is different than uh in core interpreter anyway you wouldn't even",
    "start": "5301440",
    "end": "5307320"
  },
  {
    "text": "have to overload the help function but if if you wanted to you could we no no no we have our own inspection machiner",
    "start": "5307320",
    "end": "5314440"
  },
  {
    "text": "yeah we we have our own introspection Machinery no that's that's very useful thanks so we were supposed to be here",
    "start": "5314440",
    "end": "5320199"
  },
  {
    "text": "until 5 and it's just about time so unless anybody has a final question or any final points it's probably a good",
    "start": "5320199",
    "end": "5326719"
  },
  {
    "text": "time to wrap it up and I'd like to thank Guido for taking the time to speak with",
    "start": "5326719",
    "end": "5331840"
  },
  {
    "text": "us for me this has been extremely useful yeah I I don't know there's not very often that the scientific Community can",
    "start": "5331840",
    "end": "5337719"
  },
  {
    "text": "actually say thank you to Guido I mean uh it's the language you gave birth to",
    "start": "5337719",
    "end": "5343280"
  },
  {
    "text": "and allowed us to kind of co-opt and jump inside and use has been just a revolutionary and really really helpful",
    "start": "5343280",
    "end": "5349119"
  },
  {
    "text": "to all of us so uh thank you thank you very very much thank you my my",
    "start": "5349119",
    "end": "5355560"
  },
  {
    "text": "pleasure and thank you for taking the time to have a discussion with us and give us some insights it's fun I like to",
    "start": "5358400",
    "end": "5364199"
  },
  {
    "text": "meet users even if I like to rib them a little bit",
    "start": "5364199",
    "end": "5369719"
  },
  {
    "text": "[Music]",
    "start": "5370330",
    "end": "5378800"
  }
]