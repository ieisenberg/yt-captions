[
  {
    "text": "so my name is Bill fiser I'm here today with uh Jing Chen and um we both work at",
    "start": "9719",
    "end": "17320"
  },
  {
    "text": "Facebook we're software Engineers there and uh we're here to talk about flux and react and how we use a application",
    "start": "17320",
    "end": "25400"
  },
  {
    "text": "architecture that has a singular uh single Direction data FL",
    "start": "25400",
    "end": "31199"
  },
  {
    "text": "um and how that cleans up a lot of our code we've built uh things with flux ranging from very small little widgets",
    "start": "31199",
    "end": "38079"
  },
  {
    "text": "to some of the largest web applications that we know of things that are uh Revenue critical at Facebook and so flux",
    "start": "38079",
    "end": "44360"
  },
  {
    "text": "has scaled with us to do pretty much anything that we throw at it and has done it really well so we wanted to",
    "start": "44360",
    "end": "50360"
  },
  {
    "text": "share some of that uh with you um there is",
    "start": "50360",
    "end": "55600"
  },
  {
    "text": "a there's an available speaker deck if you would like to uh download that or",
    "start": "55600",
    "end": "60879"
  },
  {
    "text": "follow along online and there's also a new GitHub repo for flux um that we are",
    "start": "60879",
    "end": "66880"
  },
  {
    "text": "open sourcing today um so there's also uh I know um there's",
    "start": "66880",
    "end": "74680"
  },
  {
    "text": "the hashtags and these hashtags are great to share on Facebook or maybe some other social network that you know about",
    "start": "74680",
    "end": "81799"
  },
  {
    "text": "um so uh these are recommended just to keep everybody in sync on the back channel so uh without further Ado Let's",
    "start": "81799",
    "end": "88040"
  },
  {
    "text": "do an overview of what we're going to talk about first we'll talk about flux and react and sort of what they are on a general level um and then Jing will take",
    "start": "88040",
    "end": "96159"
  },
  {
    "text": "us on a deep dive into stores stores are the data layer in flux and we'll talk about how they",
    "start": "96159",
    "end": "102320"
  },
  {
    "text": "work um I'll go over an example application and and then I'll and then",
    "start": "102320",
    "end": "107960"
  },
  {
    "text": "we'll wind it up at the end with some advanced concepts and talk about where future uh where flux is headed in the",
    "start": "107960",
    "end": "113079"
  },
  {
    "text": "future um so without further Ado I'd like to introduce Jing Chen the original author of flux",
    "start": "113079",
    "end": "120200"
  },
  {
    "text": "thanks Phil um all right so a couple of you guys might have seen um our post on",
    "start": "123920",
    "end": "129720"
  },
  {
    "text": "the react blog back in April show fans has anyone how many of you guys are familiar with flux and reactor have",
    "start": "129720",
    "end": "135599"
  },
  {
    "text": "heard of it already Okay pretty good number um great so uh there's a URL here",
    "start": "135599",
    "end": "141080"
  },
  {
    "text": "if you guys want to look check it out afterward but um that was sort of our very introdu um very early introduction",
    "start": "141080",
    "end": "146599"
  },
  {
    "text": "to flux and we also had an introductory video on there um but just to start with a little bit",
    "start": "146599",
    "end": "152160"
  },
  {
    "text": "of background um with flux uh we think of it as a single- directional data flow",
    "start": "152160",
    "end": "157760"
  },
  {
    "text": "architecture and what we found is that if we constrain the structure of your app starting from the very beginning",
    "start": "157760",
    "end": "164080"
  },
  {
    "text": "then as your app scales out um scales up it doesn't explode in complexity um we",
    "start": "164080",
    "end": "170000"
  },
  {
    "text": "can sort of restrain that a little bit by sort of keeping to the same structure um and making that easier for the",
    "start": "170000",
    "end": "176200"
  },
  {
    "text": "developer to keep in mind um and then another key part is is that we use stores instead of models um and Bill's",
    "start": "176200",
    "end": "183200"
  },
  {
    "text": "going to dive into that a little bit more with the example app um it seems like a lot of you have",
    "start": "183200",
    "end": "188920"
  },
  {
    "text": "heard of react but just to go through that um react is uh Facebook's open source JavaScript rendering library and",
    "start": "188920",
    "end": "196360"
  },
  {
    "text": "we found that flux and react work really well together um you know we we don't",
    "start": "196360",
    "end": "201959"
  },
  {
    "text": "sort of uh we don't say that you have to use them together the only requirement for flux is that you know when you want",
    "start": "201959",
    "end": "209280"
  },
  {
    "text": "to render or something um you can render everything as if it's from a fresh State",
    "start": "209280",
    "end": "214599"
  },
  {
    "text": "um because flux does not sort of give updates as in you know here's what actually changed it just says Hey",
    "start": "214599",
    "end": "220840"
  },
  {
    "text": "something changed so that's really the only requirement but you know what react does is it's conceptual it conceptually",
    "start": "220840",
    "end": "226439"
  },
  {
    "text": "allows you to think of your UI as rendering on every single change um and",
    "start": "226439",
    "end": "231599"
  },
  {
    "text": "that doesn't seem very performant but the main reason it is is that it's not actually rendering under the hood it",
    "start": "231599",
    "end": "237799"
  },
  {
    "text": "sort of provides you the interface to say say you know given a state a here's how to render that given a state B um",
    "start": "237799",
    "end": "244400"
  },
  {
    "text": "you know here's a different rendering uh layout of your of your view and then it",
    "start": "244400",
    "end": "249599"
  },
  {
    "text": "sort of takes the virtual Dom representation of both of them does a diff um and applies only the changes",
    "start": "249599",
    "end": "256120"
  },
  {
    "text": "that have actually happened um so that's how react sort of keeps it uh keeps it",
    "start": "256120",
    "end": "261560"
  },
  {
    "text": "performant um you know it conceptually is a rerender every time but under the hood it's sort of optimizing things for",
    "start": "261560",
    "end": "268000"
  },
  {
    "text": "you um and and you know that sort of just leads to a simpler mental model if",
    "start": "268000",
    "end": "273039"
  },
  {
    "text": "you can just think of everything as um very declarative you know given a state a how do you render that um you know",
    "start": "273039",
    "end": "278919"
  },
  {
    "text": "that makes for a very simple mental model and flux and react are both you know all about keeping a simple mental",
    "start": "278919",
    "end": "286440"
  },
  {
    "text": "model okay so let's talk a little bit about Stores um you know we've gotten a lot of questions about this so that's",
    "start": "286440",
    "end": "292199"
  },
  {
    "text": "why we've sort of decided to talk about stores as our um our main part um we",
    "start": "292199",
    "end": "298479"
  },
  {
    "text": "think of stores as sort of fat models um it contains all of the data pertaining to a logical domain so in the example",
    "start": "298479",
    "end": "305320"
  },
  {
    "text": "app um for chat the one store would be the messages store and it would contain all of the messages um that we know",
    "start": "305320",
    "end": "312120"
  },
  {
    "text": "about on the client not just a single one it also includes all of the application Logic for that logical",
    "start": "312120",
    "end": "318240"
  },
  {
    "text": "domain so I'll explain a little bit about what that means um but the very beginning is that it will set up to",
    "start": "318240",
    "end": "324919"
  },
  {
    "text": "register with a dispatcher in our system a dispatcher is just a pub subsystem it um um you know it you give it some set",
    "start": "324919",
    "end": "331759"
  },
  {
    "text": "of actions and it it sort of distributes that to all of the people or all of the stores that are registered um to listen",
    "start": "331759",
    "end": "338400"
  },
  {
    "text": "to it the only input for the store um is the call back that it hands to the",
    "start": "338400",
    "end": "344440"
  },
  {
    "text": "dispatcher when it registers um so what that means is the dispatcher will say here's an action that has been taken in",
    "start": "344440",
    "end": "350600"
  },
  {
    "text": "the system and then the store sort of digests that action and if anything has changed um based on that action then it",
    "start": "350600",
    "end": "357479"
  },
  {
    "text": "will Emmit a change event for any of the views to check um to come back and check for new",
    "start": "357479",
    "end": "363319"
  },
  {
    "text": "data um so the important thing here is that the only input to the store is the",
    "start": "363319",
    "end": "369720"
  },
  {
    "text": "call back from the dispatcher so it's public interface only has Getters there's no Setters at all um and the",
    "start": "369720",
    "end": "375720"
  },
  {
    "text": "reason we do this is because um giving sort of um having Setters on the store",
    "start": "375720",
    "end": "381960"
  },
  {
    "text": "sort of gives external control to anything that can call into the store um",
    "start": "381960",
    "end": "387120"
  },
  {
    "text": "and that makes it harder to keep in consistent state makes it harder for the store to sort of reason about what",
    "start": "387120",
    "end": "393240"
  },
  {
    "text": "possible States it can be in and if you ever debug sort of a hard to reproduce bug um it's usually because there's some",
    "start": "393240",
    "end": "400479"
  },
  {
    "text": "sort of ordering of events that you didn't foresee um and it's hard to reproduce and that's where you know",
    "start": "400479",
    "end": "405759"
  },
  {
    "text": "highd and bugs come from um so instead what we do with stores is we say our only interface is sort of the actions",
    "start": "405759",
    "end": "413240"
  },
  {
    "text": "that we'll accept from the dispatcher and uh Getters for views to get data",
    "start": "413240",
    "end": "418360"
  },
  {
    "text": "back out there's no explicit Setters um you know what I one way to I",
    "start": "418360",
    "end": "423599"
  },
  {
    "text": "think about stores is as sort of um a package of data and a sort of caretaker for that data and the caretaker kind of",
    "start": "423599",
    "end": "430440"
  },
  {
    "text": "observes a stream of actions coming in um from either the user or the server or wherever and it picks out actions from",
    "start": "430440",
    "end": "437400"
  },
  {
    "text": "there um that it's interested in um it might not be interested in all of them but it it sort of um gets all of them it",
    "start": "437400",
    "end": "443240"
  },
  {
    "text": "has the opportunity to change its data as a result of that um all right so Bill's going to go",
    "start": "443240",
    "end": "448800"
  },
  {
    "text": "through an example up and hopefully that'll demonstrate how stores fit in with the rest of the system and make all of this a little bit more",
    "start": "448800",
    "end": "456360"
  },
  {
    "text": "concrete so yeah as as Jing was alluding to um this is where the stores get their",
    "start": "459599",
    "end": "465000"
  },
  {
    "text": "data from the dispatcher they uh register a call back with the dispatcher",
    "start": "465000",
    "end": "470039"
  },
  {
    "text": "so that the the data that's contained in the action can flow through the dispatcher and into the store so the",
    "start": "470039",
    "end": "477560"
  },
  {
    "text": "dispatcher really doesn't know anything about the store um all it really knows is that it has this call back that it needs to call at",
    "start": "477560",
    "end": "483360"
  },
  {
    "text": "a specific time um then the store will eventually uh",
    "start": "483360",
    "end": "490120"
  },
  {
    "text": "well the view actually will pull that data from the store into itself as well",
    "start": "490120",
    "end": "495759"
  },
  {
    "text": "the view at that point uh doesn't really know much about the internals of the store other than only the pieces that",
    "start": "495759",
    "end": "501000"
  },
  {
    "text": "it's interested in the store knows nothing about the view so um everything is very uh separated out and doesn't",
    "start": "501000",
    "end": "508960"
  },
  {
    "text": "really touch each other very much at all the store in particular is its own kind of universe but let's talk about a",
    "start": "508960",
    "end": "514320"
  },
  {
    "text": "little bit about how it gets the data into it so like I said it uh the the store",
    "start": "514320",
    "end": "520159"
  },
  {
    "text": "registers a call back with the dispatcher and uh we can take a look at what that looks like in some code right",
    "start": "520159",
    "end": "528240"
  },
  {
    "text": "now here we go this is the application that we're actually trying to build this is the example application it's basically kind of a it's a simple chat",
    "start": "528760",
    "end": "535720"
  },
  {
    "text": "it's a lot like Facebook Messenger um and uh and here in the application um if",
    "start": "535720",
    "end": "543519"
  },
  {
    "text": "I can get mirroring going",
    "start": "543519",
    "end": "548760"
  },
  {
    "text": "um I don't have my mouse okay yeah sure have",
    "start": "549560",
    "end": "555640"
  },
  {
    "text": "um so this sorry okay so um so what we'll see",
    "start": "555640",
    "end": "565079"
  },
  {
    "text": "in the code is that we have a method on the dispatcher called Reg",
    "start": "565079",
    "end": "570600"
  },
  {
    "text": "that that method has a singular argument which is the call back thank you um and",
    "start": "570600",
    "end": "577360"
  },
  {
    "text": "that callback has inside of it a large switch statement by which the store can decide and pivot on different things",
    "start": "577360",
    "end": "583720"
  },
  {
    "text": "that it's coming in through that payload um to what to do and can use the data",
    "start": "583720",
    "end": "589360"
  },
  {
    "text": "that's in that payload to decide how it should update itself and that's a really important",
    "start": "589360",
    "end": "594760"
  },
  {
    "text": "point about um the",
    "start": "594760",
    "end": "599920"
  },
  {
    "text": "here we go about the store is it updates itself No One updates it it's a self-contained Universe for a logical",
    "start": "599920",
    "end": "607920"
  },
  {
    "text": "domain um so here we are this is how it registers itself and this is the an example of the switch statement we can",
    "start": "607920",
    "end": "613519"
  },
  {
    "text": "look at how we create a message here and it's pivoting on the action type you you can pivot on other things such as the",
    "start": "613519",
    "end": "619959"
  },
  {
    "text": "payload Source but we often pivot on the action type um then in this we're creating some",
    "start": "619959",
    "end": "627000"
  },
  {
    "text": "data around that text to create a message object we're going to store that in a private hash that's inside that no",
    "start": "627000",
    "end": "635680"
  },
  {
    "text": "one has access to only they can only get it to it through the Getters and then we",
    "start": "635680",
    "end": "641279"
  },
  {
    "text": "emit change and stores are generally based on event emitter nodes event emiter so that we can then event the",
    "start": "641279",
    "end": "647760"
  },
  {
    "text": "change event and the concerned views can uh pull the data from the stores and",
    "start": "647760",
    "end": "654279"
  },
  {
    "text": "I'll take questions at the end okay",
    "start": "654279",
    "end": "658320"
  },
  {
    "text": "uh oh I'm sorry um sorry about the washed out color on the screen um maybe",
    "start": "660560",
    "end": "665880"
  },
  {
    "text": "I can just make this bigger a little bit better um",
    "start": "665880",
    "end": "674959"
  },
  {
    "text": "so um so again so if we're creating a message here we're doing this we type in",
    "start": "676240",
    "end": "682440"
  },
  {
    "text": "this into the view and we'll talk about this in a second that's going to wind up going into the payload and coming back",
    "start": "682440",
    "end": "687839"
  },
  {
    "text": "in through uh the dispatcher into the",
    "start": "687839",
    "end": "692760"
  },
  {
    "text": "store so the controller views are the ones that are listening to that user event that I just did on the",
    "start": "694680",
    "end": "700880"
  },
  {
    "text": "application um the controller views are just like",
    "start": "700880",
    "end": "706079"
  },
  {
    "text": "any other react components but they have this special job to do and that is to",
    "start": "706079",
    "end": "711880"
  },
  {
    "text": "listen uh to change events and when they hear that a change event has happened",
    "start": "711880",
    "end": "717320"
  },
  {
    "text": "from any store they they call the stores that they're interested in with the Getters and pull that data into their",
    "start": "717320",
    "end": "723519"
  },
  {
    "text": "into themselves they then update their state and rerender all of their children with the new",
    "start": "723519",
    "end": "729320"
  },
  {
    "text": "data so let's take a look at what that looks like in",
    "start": "729320",
    "end": "734040"
  },
  {
    "text": "code so generally um so this is the message section um this is the entire",
    "start": "737720",
    "end": "743040"
  },
  {
    "text": "area of the page that's about um the the message list there and generally these controller views will maybe control a",
    "start": "743040",
    "end": "749880"
  },
  {
    "text": "section of the page and all the children that are underneath them so in their initial when they first initialize they",
    "start": "749880",
    "end": "757560"
  },
  {
    "text": "um they get their initial data from the stores and that's a method up here uh",
    "start": "757560",
    "end": "762639"
  },
  {
    "text": "where you know they're going to call one store to get all the messages for the current thread and they'll call the",
    "start": "762639",
    "end": "767920"
  },
  {
    "text": "thread store to get all the current messages uh to get which excuse me which thread is the current",
    "start": "767920",
    "end": "773959"
  },
  {
    "text": "thread um as the life cycle methods progress here we have compon did Mount",
    "start": "773959",
    "end": "779880"
  },
  {
    "text": "that's after initialization they set up their event listeners we have on change",
    "start": "779880",
    "end": "785480"
  },
  {
    "text": "um as our response to that event and we call that same method to grab the the",
    "start": "785480",
    "end": "792160"
  },
  {
    "text": "data and update our state so we get the data from the stores",
    "start": "792160",
    "end": "797440"
  },
  {
    "text": "and we call set State and when you call set state in a react component it sets off the rendering",
    "start": "797440",
    "end": "802639"
  },
  {
    "text": "cycle so then when we come up here to the render method we have things like",
    "start": "802639",
    "end": "807959"
  },
  {
    "text": "this. state thread. name to pass down into the",
    "start": "807959",
    "end": "813639"
  },
  {
    "text": "children so uh or in this case we have a list of message items um that we're",
    "start": "813639",
    "end": "819519"
  },
  {
    "text": "mapping over the messages and we have a little get get message list item and",
    "start": "819519",
    "end": "825120"
  },
  {
    "text": "this is the child message list item and that's our um stateless react",
    "start": "825120",
    "end": "833560"
  },
  {
    "text": "component so let's go back to slides here",
    "start": "834120",
    "end": "841040"
  },
  {
    "text": "when the view actually responds to a UI event it will inside of its event",
    "start": "842680",
    "end": "848920"
  },
  {
    "text": "handlers want to call one of the um action Creator methods action creators",
    "start": "848920",
    "end": "855079"
  },
  {
    "text": "are um are methods that wrap around the creation of an action and um and then",
    "start": "855079",
    "end": "861839"
  },
  {
    "text": "pass them that action to the dispatcher so that's how the data comes back into the system and starts at the",
    "start": "861839",
    "end": "868680"
  },
  {
    "text": "top and and and starts flowing back down again to eventually update the store just like views can create um",
    "start": "868680",
    "end": "877560"
  },
  {
    "text": "these actions API interactions can create",
    "start": "877560",
    "end": "882759"
  },
  {
    "text": "these actions as well actions are the are the entry point into the system for",
    "start": "882759",
    "end": "888199"
  },
  {
    "text": "any any for anything that needs to enter the system um so that could be",
    "start": "888199",
    "end": "895880"
  },
  {
    "text": "initialization code like when it first launches um that could be a call to the",
    "start": "895880",
    "end": "902040"
  },
  {
    "text": "API and you're getting data back that could be a user interaction I'm thinking to myself maybe that could be like after",
    "start": "902040",
    "end": "908040"
  },
  {
    "text": "some of the talks today maybe that could be like a router change so anything is going to create an action to get into",
    "start": "908040",
    "end": "913839"
  },
  {
    "text": "this data system um we can also in that same uh",
    "start": "913839",
    "end": "920839"
  },
  {
    "text": "action Creator siphon off the data and do a right to the API so we can exit the",
    "start": "920839",
    "end": "927759"
  },
  {
    "text": "the system as well through the action",
    "start": "927759",
    "end": "931639"
  },
  {
    "text": "Creator so let's look at how we might add threads to our system we're in we've had a singular store a message store and",
    "start": "932839",
    "end": "939959"
  },
  {
    "text": "a message view we would simply create another store a thread store and a",
    "start": "939959",
    "end": "946399"
  },
  {
    "text": "thread view the difference here is that the message view is going to be listening to",
    "start": "946399",
    "end": "952160"
  },
  {
    "text": "both stores because it needs to know both things in our application um",
    "start": "952160",
    "end": "960800"
  },
  {
    "text": "you can see that uh Bill and briyan is the is the thread name and then we have",
    "start": "960800",
    "end": "966440"
  },
  {
    "text": "a list of messages um this whole section is governed by the message section this",
    "start": "966440",
    "end": "972040"
  },
  {
    "text": "section over here is the thread section and is and is a different um controller",
    "start": "972040",
    "end": "977839"
  },
  {
    "text": "View",
    "start": "977839",
    "end": "980839"
  },
  {
    "text": "eventually we may add yet another store to to track unread threads now because",
    "start": "990240",
    "end": "996240"
  },
  {
    "text": "we're storing whether or not a message has been read in the message itself we need to",
    "start": "996240",
    "end": "1001959"
  },
  {
    "text": "know uh we need to know um we need to have reference to the messages and the thread",
    "start": "1001959",
    "end": "1009079"
  },
  {
    "text": "is already being known is already a dependency of the message store the thread store is is you know something",
    "start": "1009079",
    "end": "1015040"
  },
  {
    "text": "that the message store needs to know about so we can't have the the a circular dependency occur so we'd create",
    "start": "1015040",
    "end": "1021160"
  },
  {
    "text": "a third store to manage the unread thread stores and then all of these need to be",
    "start": "1021160",
    "end": "1027558"
  },
  {
    "text": "kept in sync and this is where the dispatcher really shines the dispatcher has a special method called wait for the",
    "start": "1027559",
    "end": "1034600"
  },
  {
    "text": "where the stores inside their callbacks can declaratively say I need to wait for this other store to update",
    "start": "1034600",
    "end": "1041798"
  },
  {
    "text": "first and thereby that everyone stays in sync in a very declarative",
    "start": "1041799",
    "end": "1047240"
  },
  {
    "text": "model um so the unread thread store needs to wait for both of the other stores to update",
    "start": "1047240",
    "end": "1053039"
  },
  {
    "text": "first before it can update itself because it depends on some data that's in those",
    "start": "1053039",
    "end": "1059799"
  },
  {
    "text": "stores so that's wait for it allows us to sequence updates and allows us to set",
    "start": "1060679",
    "end": "1066080"
  },
  {
    "text": "up a hierarchy of stores for example in our situation the thread store has no high has no dependencies it's at the top",
    "start": "1066080",
    "end": "1073000"
  },
  {
    "text": "of the hierarchy of the stores the message store is a little bit below that because it needs to depend on that thread store to update first",
    "start": "1073000",
    "end": "1079799"
  },
  {
    "text": "the unread thread stories at the bottom there waiting for everyone to finish first but eventually they all um",
    "start": "1079799",
    "end": "1087440"
  },
  {
    "text": "call uh they all emit a change and the whole cycle updates now Jin is going to",
    "start": "1087440",
    "end": "1094600"
  },
  {
    "text": "talk about where we might else we might go to evolve the",
    "start": "1094600",
    "end": "1098679"
  },
  {
    "text": "app all right great thanks Bill um so you know what I mentioned at the very",
    "start": "1099720",
    "end": "1105039"
  },
  {
    "text": "beginning is that you know we want to sort of keep a simpl mental model so that as we sort of evolve the app um all",
    "start": "1105039",
    "end": "1113039"
  },
  {
    "text": "of the things that we add in doesn't sort of explode the complexity and the number of things you have to think about",
    "start": "1113039",
    "end": "1118240"
  },
  {
    "text": "within the system right so let's look at a couple of examples and I won't I won't use code in this case but hopefully",
    "start": "1118240",
    "end": "1124280"
  },
  {
    "text": "it'll give you a picture of like where we'll slot in new stores and new features as we add to",
    "start": "1124280",
    "end": "1130679"
  },
  {
    "text": "it oops sorry um so let's say that we wanted to take this system and add the",
    "start": "1130679",
    "end": "1135919"
  },
  {
    "text": "ability to start a new conversation right so this is a very common action um we don't want to send just a new message",
    "start": "1135919",
    "end": "1142720"
  },
  {
    "text": "but we also want to start a new thread along with that so the action payload might look something like this we give",
    "start": "1142720",
    "end": "1148200"
  },
  {
    "text": "it a type new thread um and here it's like a little bit less structured than we would normally have it but for the",
    "start": "1148200",
    "end": "1154080"
  },
  {
    "text": "purposes of demoing let's make it simple um so we'll just say this message is to Bill and I'm going to use first names as",
    "start": "1154080",
    "end": "1161080"
  },
  {
    "text": "IDs um just so we don't have to use numbers um and the text will just be hey Bill I'm just talking to him um and this",
    "start": "1161080",
    "end": "1167960"
  },
  {
    "text": "is going to be from the the viewer which is going to be me and I'll assign a temporary thread ID and a message ID um",
    "start": "1167960",
    "end": "1173960"
  },
  {
    "text": "on the client just so we have something to refer to it with so how would the thread store react to this action so the",
    "start": "1173960",
    "end": "1181400"
  },
  {
    "text": "thread store internally has a map of threads right now um from the thread ID to an object with some metadata in it um",
    "start": "1181400",
    "end": "1188880"
  },
  {
    "text": "so here in this case the thread store would look at that action with all of the metadata in it and sort of infer a",
    "start": "1188880",
    "end": "1195240"
  },
  {
    "text": "couple of fields from it for the new thread that it's creating so we know this 5e 936 96f thread um has a couple",
    "start": "1195240",
    "end": "1204159"
  },
  {
    "text": "of features it has a participant um list consisting of Bill and me since I'm the",
    "start": "1204159",
    "end": "1209440"
  },
  {
    "text": "viewer and then we know that the first message on that list is going to be the temporary message ID that we",
    "start": "1209440",
    "end": "1216440"
  },
  {
    "text": "created and in this case the message store is going to react in a very similar way it knows that we've added uh",
    "start": "1216440",
    "end": "1222960"
  },
  {
    "text": "a new message to the map so we'll take that ID and we'll create an object that has the text of that message um the",
    "start": "1222960",
    "end": "1229120"
  },
  {
    "text": "thread ID so we know which parent it belongs to and the author is me it's going to be the",
    "start": "1229120",
    "end": "1234320"
  },
  {
    "text": "viewer so what's important here is that you know when you think about when an action comes into the system and you",
    "start": "1234320",
    "end": "1240760"
  },
  {
    "text": "think about how it should affect the system you can you should sort of you can sort of um zoom into a particular",
    "start": "1240760",
    "end": "1246840"
  },
  {
    "text": "store and think about okay how does that affect the data within the store you don't have to think about all of the",
    "start": "1246840",
    "end": "1252440"
  },
  {
    "text": "other interactions with um everything else in the system you just think about the very simple constrained um problem",
    "start": "1252440",
    "end": "1259480"
  },
  {
    "text": "of how should that affect my data um let's take another example um let's say",
    "start": "1259480",
    "end": "1264760"
  },
  {
    "text": "we wanted to add a feature with group chat um so I want to be able to add a participant to a thread and remove a",
    "start": "1264760",
    "end": "1271279"
  },
  {
    "text": "participant from a thread so in this case the action might look something like this it has a type as well um we",
    "start": "1271279",
    "end": "1277320"
  },
  {
    "text": "already know the thread ID because it exists um and I'm going to add a new participant with the um unique ID Chris",
    "start": "1277320",
    "end": "1284200"
  },
  {
    "text": "um and some metadata about that person right so that we can sort of uh r his information um into the view you",
    "start": "1284200",
    "end": "1291320"
  },
  {
    "text": "know we need a profile picture and we need a full name Christopher Shau in this case um so it's it's um pretty easy",
    "start": "1291320",
    "end": "1299240"
  },
  {
    "text": "to see what the thread store want to do um given that the thread ID already exists in the map we just want to update",
    "start": "1299240",
    "end": "1305640"
  },
  {
    "text": "that map to add another participant to the list but we don't want to sort of store all of the metadata for that",
    "start": "1305640",
    "end": "1312600"
  },
  {
    "text": "participant um inside of the thread store that doesn't make too much sense especially since you can have the same",
    "start": "1312600",
    "end": "1318240"
  },
  {
    "text": "par participant on multiple threads and then you don't want to sort of get out of sync with all of that all of the",
    "start": "1318240",
    "end": "1323279"
  },
  {
    "text": "metadata about that participant so instead what we want to do is we want to add a third store the participant store",
    "start": "1323279",
    "end": "1329640"
  },
  {
    "text": "um that just keeps track of all of the people that we know about on the client um and when it sees this um this action",
    "start": "1329640",
    "end": "1336799"
  },
  {
    "text": "add to thread um what it does is it adds this new participant to its map if it's",
    "start": "1336799",
    "end": "1342279"
  },
  {
    "text": "not there already and it creates some metadata about it the name and the profile pick right um so if we we look",
    "start": "1342279",
    "end": "1348799"
  },
  {
    "text": "at this system um what we end up with is three stores and two views right and and Bill",
    "start": "1348799",
    "end": "1355640"
  },
  {
    "text": "at the end of his example also had an unread thread um thread count store um",
    "start": "1355640",
    "end": "1361200"
  },
  {
    "text": "and and a different view for that right so here you know I'm not even showing the fourth store because that wouldn't",
    "start": "1361200",
    "end": "1366720"
  },
  {
    "text": "even fit on my slide so this gets pretty complicated and you can sort of see how like as you add features here you would",
    "start": "1366720",
    "end": "1372679"
  },
  {
    "text": "add more stores or more views to sort of manage different domains um and hopefully the thread store versus the",
    "start": "1372679",
    "end": "1378039"
  },
  {
    "text": "participant store gives you an example of like when you would want to split off into a new store rather than keeping it",
    "start": "1378039",
    "end": "1383679"
  },
  {
    "text": "all in the same place um but again like all of this gets sort of complicated and",
    "start": "1383679",
    "end": "1388720"
  },
  {
    "text": "we have all of these arrows going back and forth you know where is this scaling well all of this basically reduces back",
    "start": "1388720",
    "end": "1396840"
  },
  {
    "text": "down to this diagram right we want to be able to say um you know because all of",
    "start": "1396840",
    "end": "1402240"
  },
  {
    "text": "the arrows flow in One Direction um you can sort of collapse all of the stores into one um piece of the system system",
    "start": "1402240",
    "end": "1408799"
  },
  {
    "text": "and all of the views into one piece of the system and this is what it looks like when you sort of zoom out when you think about how the data flow Works in",
    "start": "1408799",
    "end": "1415880"
  },
  {
    "text": "general not in a specific case and then while you're working on it and you want to sort of think about how a new action",
    "start": "1415880",
    "end": "1422240"
  },
  {
    "text": "would fit in or a new um a new store or a new piece of data would fit in then you can zoom into the stores at an",
    "start": "1422240",
    "end": "1428320"
  },
  {
    "text": "individual level and think about that right so instead of having to hold a large system in your head and sort of",
    "start": "1428320",
    "end": "1434240"
  },
  {
    "text": "all of the cascading changes that might happen within that system you can sort of keep this in mind and then zoom into",
    "start": "1434240",
    "end": "1440000"
  },
  {
    "text": "some particular pieces and I think that's what we found um has been really uh useful in just keeping the complexity",
    "start": "1440000",
    "end": "1446240"
  },
  {
    "text": "low and um making it easy to test since you can test each individual store and",
    "start": "1446240",
    "end": "1451279"
  },
  {
    "text": "how they react at different actions um and the other uh sorry that's",
    "start": "1451279",
    "end": "1458200"
  },
  {
    "text": "I think that's it um so at this point um bill is going to talk a little bit about how flux fix fits into um a a broader",
    "start": "1458200",
    "end": "1466200"
  },
  {
    "text": "picture so um so flux is obviously somewhat uh",
    "start": "1466200",
    "end": "1475520"
  },
  {
    "text": "influenced by MVC it's also influenced by a lot of other um ideas and it fits into this",
    "start": "1475520",
    "end": "1481240"
  },
  {
    "text": "into this world um that's a little bit bigger than just NBC um uh so these are",
    "start": "1481240",
    "end": "1488520"
  },
  {
    "text": "some of the some of the things that seem fairly similar to flux uh to me uh there's a lot of Concepts here like in",
    "start": "1488520",
    "end": "1494360"
  },
  {
    "text": "data flow programming for example there is that concept of uh very distinct um",
    "start": "1494360",
    "end": "1499520"
  },
  {
    "text": "ways of getting in and out of the objects in the system and the stores you know reflect that in that they have that",
    "start": "1499520",
    "end": "1506480"
  },
  {
    "text": "that call back is as a primary the only way something can push into the store",
    "start": "1506480",
    "end": "1511520"
  },
  {
    "text": "other than that the store can pull from other stores but other than that is the only way that something can push in",
    "start": "1511520",
    "end": "1517919"
  },
  {
    "text": "um uh likewise the Getters are the only way somebody can pull the data out and the only thing the story is pushing out",
    "start": "1517919",
    "end": "1524000"
  },
  {
    "text": "is the event um in addition data flow programming has",
    "start": "1524000",
    "end": "1529360"
  },
  {
    "text": "that concept of um waiting for the inputs to become valid which is similar",
    "start": "1529360",
    "end": "1534480"
  },
  {
    "text": "to what's going on with wait for um in cqrs like that's uh stands for a command",
    "start": "1534480",
    "end": "1542039"
  },
  {
    "text": "query responsibility segregation I think um there is it's actually very similar",
    "start": "1542039",
    "end": "1548600"
  },
  {
    "text": "pattern to flux in that um the action in a way is the command cycle and the the",
    "start": "1548600",
    "end": "1554960"
  },
  {
    "text": "view the controller view asking for the data from the store is like the the query cycle in cqrs those are both",
    "start": "1554960",
    "end": "1562200"
  },
  {
    "text": "models so they don't doesn't exactly map to flux but there is a certain similarity there and it's certainly a uh",
    "start": "1562200",
    "end": "1568000"
  },
  {
    "text": "a one directional data flow in functional programming there is that emphasis on one on on a",
    "start": "1568000",
    "end": "1574559"
  },
  {
    "text": "unidirectional data flow as well as things flow through functions and and in pure functions and that's somewhat like",
    "start": "1574559",
    "end": "1580919"
  },
  {
    "text": "what react strives to do you can think of a react component as being a pure function ideally um where um the data is",
    "start": "1580919",
    "end": "1589200"
  },
  {
    "text": "flowing through the system much very similar to the way it might flow through something in like Haso so those are the other things that",
    "start": "1589200",
    "end": "1596279"
  },
  {
    "text": "are that we think that flux is related to even though it's you know it is obviously uh somewhat related to MBC as",
    "start": "1596279",
    "end": "1602440"
  },
  {
    "text": "well and I think it's it's appropriate to think of it as being influenced by probably a lot of different",
    "start": "1602440",
    "end": "1608000"
  },
  {
    "text": "things um so let's talk about where we're going we uh we have an open source dispatcher today in the in the new repo",
    "start": "1608000",
    "end": "1615960"
  },
  {
    "text": "and this is our uh this is the same dispatcher that we use at Facebook um",
    "start": "1615960",
    "end": "1621200"
  },
  {
    "text": "and it uh includes wait for an addition and it will uh fire off a an invariant",
    "start": "1621200",
    "end": "1627279"
  },
  {
    "text": "um error if you create a circular dependency so it's a very robust dispatcher um and we use this in",
    "start": "1627279",
    "end": "1633240"
  },
  {
    "text": "production all the time um that's been something that uh those those people that have uh started",
    "start": "1633240",
    "end": "1640320"
  },
  {
    "text": "to become interested in flux have been waiting for and so we're very excited today to release it um uh we also have",
    "start": "1640320",
    "end": "1646919"
  },
  {
    "text": "the example chat app that I briefly showed on the screen and you can take a look at that and we also have an example",
    "start": "1646919",
    "end": "1652880"
  },
  {
    "text": "a to-do MVC app but it's the to-do MVC is somewhat simplistic and um this new",
    "start": "1652880",
    "end": "1658159"
  },
  {
    "text": "chat app shows a little bit more complexity so it's it's like a good like second step as you as you learn about",
    "start": "1658159",
    "end": "1664919"
  },
  {
    "text": "flux and um in the future what we're thinking about is perhaps um uh some",
    "start": "1664919",
    "end": "1670360"
  },
  {
    "text": "flux boiler plate code or some CLI tools to get you quickly up and running because there can be some uh some uh you",
    "start": "1670360",
    "end": "1677760"
  },
  {
    "text": "know a bit of code to write at the beginning which um can slow you down a little bit so we want to make things that can help you get a little bit",
    "start": "1677760",
    "end": "1684320"
  },
  {
    "text": "faster what we do need though if anybody's interested in open source projects are like utilities to plug in",
    "start": "1684320",
    "end": "1690840"
  },
  {
    "text": "your favorite whatevers and in particular there isn't a really um flux oriented router in the world right now",
    "start": "1690840",
    "end": "1698440"
  },
  {
    "text": "and that would be a great project for someone to take on um there is there are like a react router but it's it's not",
    "start": "1698440",
    "end": "1704880"
  },
  {
    "text": "done in like a a flux kind of way uh where creates an action um there's more flux stuff uh if",
    "start": "1704880",
    "end": "1712399"
  },
  {
    "text": "you get the slides you can get these links U but there's documentation on the react blog there is an the to-do MVC is",
    "start": "1712399",
    "end": "1718840"
  },
  {
    "text": "accompanied by its own tutorial and uh there are some new screencasts from Egghead about flux and",
    "start": "1718840",
    "end": "1726440"
  },
  {
    "text": "uh someone has created this thing called fluxor which is like a set of tools for getting going with flux um that they",
    "start": "1726440",
    "end": "1731840"
  },
  {
    "text": "wrote in response to the too the to-do MVC example um so that's that's it for us",
    "start": "1731840",
    "end": "1738600"
  },
  {
    "text": "today thank you very much for for taking a lesson at how we um build web applications at",
    "start": "1738600",
    "end": "1746000"
  },
  {
    "text": "Facebook any questions how do you populate the data",
    "start": "1750880",
    "end": "1756480"
  },
  {
    "text": "server side you mean how does how does it come into the how does it what makes",
    "start": "1756480",
    "end": "1761919"
  },
  {
    "text": "an action what the what what what calls the API your component",
    "start": "1761919",
    "end": "1769320"
  },
  {
    "text": "uh my component called it store to get the data right but in the server side",
    "start": "1769320",
    "end": "1775840"
  },
  {
    "text": "you're asking how we get data into the system in the first place",
    "start": "1775840",
    "end": "1782080"
  },
  {
    "text": "not yeah so there's there's sort of two parts to the um to the question there one is like how do we get data sort of",
    "start": "1783000",
    "end": "1789720"
  },
  {
    "text": "onto the client from the server is that correct um so the way we normally do",
    "start": "1789720",
    "end": "1794840"
  },
  {
    "text": "that is we still have everything coming into the dispatch discher so from the server um will'll sort of send a payload",
    "start": "1794840",
    "end": "1801960"
  },
  {
    "text": "down that's meant for the dispatcher that says here's all of your initial data um and then the other side is like",
    "start": "1801960",
    "end": "1808679"
  },
  {
    "text": "if your view asks for some data that we don't have on the client how do we get that um and the way we do that is when",
    "start": "1808679",
    "end": "1816039"
  },
  {
    "text": "you ask the store for data um very often we will give you a call back um instead",
    "start": "1816039",
    "end": "1822240"
  },
  {
    "text": "of returning your data immediately so your view sort of has to deal with that interaction where the store may not have",
    "start": "1822240",
    "end": "1827399"
  },
  {
    "text": "the data that you want on the client um and in that case the store is responsible for sort of fetching data",
    "start": "1827399",
    "end": "1833240"
  },
  {
    "text": "from the server but the one distinction there that I should make clear is um the store doesn't take the response and only",
    "start": "1833240",
    "end": "1840320"
  },
  {
    "text": "like consume it by itself um all of the stores sort of take the response from the server and redirect it through the",
    "start": "1840320",
    "end": "1846320"
  },
  {
    "text": "dispatcher so that everyone can sort of look at that initial data um payload and and you know modify their own data if it",
    "start": "1846320",
    "end": "1853799"
  },
  {
    "text": "needs to be um but in general like we think of data loading or we requesting data from the stores as asynchronous um",
    "start": "1853799",
    "end": "1862200"
  },
  {
    "text": "operation possibly um so we try to leave that possibility open is",
    "start": "1862200",
    "end": "1867480"
  },
  {
    "text": "that and and also um we typically we uh create like a web uh API utilities file",
    "start": "1867480",
    "end": "1875720"
  },
  {
    "text": "when we don't actually handle the the the calling of the server um or and that sort of stuff directly in the store we",
    "start": "1875720",
    "end": "1881760"
  },
  {
    "text": "usually just expose that to the store and the store can use those utility",
    "start": "1881760",
    "end": "1886720"
  },
  {
    "text": "methods have a followup question I had a quick question about what you just said you said that the store would go so does",
    "start": "1886919",
    "end": "1892799"
  },
  {
    "text": "it create an action that all the way back to the top and fun yeah so we sort of think of that as",
    "start": "1892799",
    "end": "1898240"
  },
  {
    "text": "like um you know when the view has a uh sort of the beginning of a flow is",
    "start": "1898240",
    "end": "1903679"
  },
  {
    "text": "starting with an action right so when the view asks the store for something and it doesn't have it yet um that's",
    "start": "1903679",
    "end": "1908919"
  },
  {
    "text": "sort of the read path rather than the right path um and so that hasn't even started going into the right path yet um",
    "start": "1908919",
    "end": "1914919"
  },
  {
    "text": "you know instead when when the store goes to the ser and asks for and when it responds that's the beginning of sort of",
    "start": "1914919",
    "end": "1920159"
  },
  {
    "text": "the update flow of like you know when we're going down through the the the center did I did I forget to repeat the",
    "start": "1920159",
    "end": "1926720"
  },
  {
    "text": "question I mean to be honest I mean most of the time when you're when you're when you're asking for data from the server you're doing it in response to a user",
    "start": "1926720",
    "end": "1933519"
  },
  {
    "text": "action and so most of the time that that that utility method is actually going to",
    "start": "1933519",
    "end": "1939399"
  },
  {
    "text": "be called in that um action creator that the same the same type of action creator",
    "start": "1939399",
    "end": "1944600"
  },
  {
    "text": "that the you would use when you like hit enter right",
    "start": "1944600",
    "end": "1949840"
  },
  {
    "text": "so the question is how do we go around enforcing the constraints um that's a",
    "start": "1950600",
    "end": "1956000"
  },
  {
    "text": "good question I think a lot of it is um going to come down to culture to some extent within a team um once the system",
    "start": "1956000",
    "end": "1962679"
  },
  {
    "text": "is set up so that you know your stores don't have any Getters or sorry your stores don't have any Setters and",
    "start": "1962679",
    "end": "1967960"
  },
  {
    "text": "everything comes in through the dispatcher it becomes really hard to do it any other way by modifying just",
    "start": "1967960",
    "end": "1973240"
  },
  {
    "text": "pieces um and they they sort of you know the developer kind of feels gross while they're doing it so I think you know",
    "start": "1973240",
    "end": "1979799"
  },
  {
    "text": "this is kind of like a pit of success thing right you want to make it easy for them to do the right thing and want them",
    "start": "1979799",
    "end": "1985399"
  },
  {
    "text": "want them to you know make it hard to do the wrong thing and make it feel kind of weird in the first place um so I don't",
    "start": "1985399",
    "end": "1992200"
  },
  {
    "text": "have a great answer there but you know a lot of the enforcement is going to come down to just um having example code",
    "start": "1992200",
    "end": "1997480"
  },
  {
    "text": "there and good unit tests and I think part of the strength also is the Simplicity of the model and how quickly",
    "start": "1997480",
    "end": "2004360"
  },
  {
    "text": "um uh developers can learn it and get ramped up on it um it's it's something",
    "start": "2004360",
    "end": "2009480"
  },
  {
    "text": "that the team can share a common mental model really easily yeah so the question was do we",
    "start": "2009480",
    "end": "2016279"
  },
  {
    "text": "use anything with socket iio instead of just async endpoints is that is that",
    "start": "2016279",
    "end": "2023320"
  },
  {
    "text": "right um we I don't believe we've done anything in particular with socket iio but it sounds it sounds like we have",
    "start": "2025960",
    "end": "2032440"
  },
  {
    "text": "something similar which is what we use for chat updates um you know we have an open channel uses long Poole on Facebook",
    "start": "2032440",
    "end": "2039559"
  },
  {
    "text": "and um that's how we sort of get updates pushed from the server of um you know somebody new commented or somebody sent",
    "start": "2039559",
    "end": "2046279"
  },
  {
    "text": "you a message and for those we sort of just like subscribe to the channel and dump everything into the dispatcher so",
    "start": "2046279",
    "end": "2052720"
  },
  {
    "text": "you know the nice thing there is you can treat a payload coming in from the channel the same way that you would treat a payload um confirming that you",
    "start": "2052720",
    "end": "2060079"
  },
  {
    "text": "sent a message or you know an optimistic payload that you know you're sending a message on the client um so that",
    "start": "2060079",
    "end": "2066398"
  },
  {
    "text": "actually simplifies the paths a a little bit so the question is um how do we deal",
    "start": "2066399",
    "end": "2072720"
  },
  {
    "text": "with uh hooking up the UI to the actual actions themselves um a large part of",
    "start": "2072720",
    "end": "2077919"
  },
  {
    "text": "that is going to be or at least we handle it within react so you can set um sort of cck Click handlers um drag",
    "start": "2077919",
    "end": "2085158"
  },
  {
    "text": "handlers things like that from a react component um and then you know when we're rendering our react component we",
    "start": "2085159",
    "end": "2090720"
  },
  {
    "text": "just hook it up to the action creators that say you know handle a new message with this text or um handle that",
    "start": "2090720",
    "end": "2097000"
  },
  {
    "text": "somebody clicked to like does that make sense think about that one thing that's really nice about react is that it",
    "start": "2097000",
    "end": "2102160"
  },
  {
    "text": "automatically does event delegation for you so you can feel free to like add these handlers on every single list item",
    "start": "2102160",
    "end": "2108760"
  },
  {
    "text": "and in reality what's happening is at the top level there's like one event handler going",
    "start": "2108760",
    "end": "2113800"
  },
  {
    "text": "on yeah",
    "start": "2113800",
    "end": "2120160"
  },
  {
    "text": "questions yeah uh that's exactly right and that's and",
    "start": "2120200",
    "end": "2125280"
  },
  {
    "text": "that's why we we included that um area message in the console uh in the development environment like so if",
    "start": "2125280",
    "end": "2131480"
  },
  {
    "text": "you're in development um you will get an error if you if you create that situation in your",
    "start": "2131480",
    "end": "2137720"
  },
  {
    "text": "in your in your browser console um but yeah that is a that is definitely a problem to",
    "start": "2137720",
    "end": "2143359"
  },
  {
    "text": "avoid so just to clarify one thing um the wait for isn't sort of global it's",
    "start": "2143359",
    "end": "2148920"
  },
  {
    "text": "actually we mostly do it per action type so you might have the messages store",
    "start": "2148920",
    "end": "2154280"
  },
  {
    "text": "depend on or want to wait for the thread store for one action and then you can still have the opposite relationship as",
    "start": "2154280",
    "end": "2160319"
  },
  {
    "text": "long as it's a different action so it's not a um it's not a it's not a circular dependency if that's the",
    "start": "2160319",
    "end": "2167799"
  },
  {
    "text": "case other questions seems like that's it yeah",
    "start": "2168640",
    "end": "2175920"
  },
  {
    "text": "thanks very much thanks really",
    "start": "2175920",
    "end": "2180359"
  }
]