[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "hi this is 10:30 well thank you thank you everybody for coming along um I'm",
    "start": "9599",
    "end": "16198"
  },
  {
    "text": "Brian I uh I'm supposed to be helping organize this conference but I really just I was part of the company that was",
    "start": "16199",
    "end": "21960"
  },
  {
    "text": "organizing the conference I didn't do much David Taylor did a ton I'm really grateful um so I wanted to talk about uh",
    "start": "21960",
    "end": "29400"
  },
  {
    "text": "performance and uh you know in JavaScript uh and this talk is kind of like a two-part",
    "start": "29400",
    "end": "36320"
  },
  {
    "text": "thing um so the first part I'm just going to rant on my opinions about a",
    "start": "36320",
    "end": "42320"
  },
  {
    "text": "performance it's going to be just like slides and comments and whatnot um the second part is going to be uh my ideas",
    "start": "42320",
    "end": "49239"
  },
  {
    "text": "for optimization on performance and stuff so uh I hate performance but I'll show you how I think we should optimize",
    "start": "49239",
    "end": "55760"
  },
  {
    "text": "performance um so if you're bored with the talking on the first part hang tight I'll show you a bunch of code on the",
    "start": "55760",
    "end": "61879"
  },
  {
    "text": "second part um and just you know I'll I guess I'll take questions at the end but",
    "start": "61879",
    "end": "67439"
  },
  {
    "text": "um not trying to be a troll or or be mean or anything I just have my opinions and thought I'd share them all right so",
    "start": "67439",
    "end": "75640"
  },
  {
    "text": "you guys we've got a problem um we have this like perverse obsession with speed",
    "start": "75640",
    "end": "81280"
  },
  {
    "text": "right now do you guys when was the last time you saw a micro Benchmark was it in the last 24 hours raise your hand if",
    "start": "81280",
    "end": "87520"
  },
  {
    "start": "82000",
    "end": "335000"
  },
  {
    "text": "you've seen all right it's basically um every time I wake up and I look on blogs",
    "start": "87520",
    "end": "93240"
  },
  {
    "text": "Hacker News whatever it's just you know this is faster than that and that's faster than that and there's you know we",
    "start": "93240",
    "end": "99439"
  },
  {
    "text": "should use closures not new or new then closures or no for loops and this and that um and you know uh I'm not saying",
    "start": "99439",
    "end": "106399"
  },
  {
    "text": "that um these things aren't good um but we've also got like you know full-on books and people like spending a lot of",
    "start": "106399",
    "end": "113600"
  },
  {
    "text": "their time learning JavaScript execution like you know like micro optimizations",
    "start": "113600",
    "end": "119200"
  },
  {
    "text": "and how the stack frames work and all sorts of crazy stuff way low level um",
    "start": "119200",
    "end": "124680"
  },
  {
    "text": "but the typical JavaScript developer is just making apps and we have a lot of other things to learn besides this stuff",
    "start": "124680",
    "end": "130920"
  },
  {
    "text": "you guys um and so I have this uh there's a brief history of why I think we might be where we're at right now uh",
    "start": "130920",
    "end": "137280"
  },
  {
    "text": "hailing you know performance as the number one highest thing that we we are into um so back in the day there was",
    "start": "137280",
    "end": "145200"
  },
  {
    "text": "these you know hard statistics saying like oh people will leave your site if it doesn't you know rendering like under",
    "start": "145200",
    "end": "151599"
  },
  {
    "text": "3 seconds or whatever and so that launched all these like you know uh performance stuff and we've got V8",
    "start": "151599",
    "end": "157160"
  },
  {
    "text": "coming along with chrome and these browser Wars and you hear squirrel fish and squirrel fish coming around the corner now there's Trace monkey and it's",
    "start": "157160",
    "end": "163360"
  },
  {
    "text": "like this anthropomorphic like you know track race thing going on um but they're",
    "start": "163360",
    "end": "168760"
  },
  {
    "text": "all they're all basically saying like oh JavaScript execution speed is faster here and so you watch you know we sat",
    "start": "168760",
    "end": "174760"
  },
  {
    "text": "here and watched as people crowds of people went to different browsers we're like oh yeah that's where the jam is okay okay um and then you got this sad",
    "start": "174760",
    "end": "182400"
  },
  {
    "text": "sad state where the native developers were like oh you guys are so slow and Native is so fast and you know HTML 5",
    "start": "182400",
    "end": "189280"
  },
  {
    "text": "will never work and you guys need to stop trying to make apps and slow slow slow javascript's too slow um you got",
    "start": "189280",
    "end": "195360"
  },
  {
    "text": "Facebook leaving right and and Linkedin saying oh we got to go native now and this isn't just the front end you got uh",
    "start": "195360",
    "end": "202280"
  },
  {
    "text": "Ryan D writing his Manifesto and people saying like oh yeah node it's so fast we",
    "start": "202280",
    "end": "207400"
  },
  {
    "text": "got to go do node cuz it's fast and never blocks and you've got these uh you know these charts and stuff that's",
    "start": "207400",
    "end": "213680"
  },
  {
    "text": "saying oh well all these other stuff they they block and we don't block um and then LinkedIn is like we lost all",
    "start": "213680",
    "end": "219280"
  },
  {
    "text": "our servers and we have one developer now and it's a billion times faster this actually went back and got corrected",
    "start": "219280",
    "end": "225040"
  },
  {
    "text": "right but it's fine but go speed so you got so people on the server side like",
    "start": "225040",
    "end": "230560"
  },
  {
    "text": "you we've got a lot of performance people in the node Community got a uh performance people or at least people",
    "start": "230560",
    "end": "235879"
  },
  {
    "text": "like shivering in the corner like I got to go faster I got to go faster in the front end um and it's leading I mean",
    "start": "235879",
    "end": "242720"
  },
  {
    "text": "like uh obviously performance is great we all want our apps to go fast um but",
    "start": "242720",
    "end": "248599"
  },
  {
    "text": "uh you know I just there's some bad parts to it I'd say uh so for one we",
    "start": "248599",
    "end": "254200"
  },
  {
    "text": "have this perf paranoia thing going on where you have people saying like oh can I use semicolons is that fast enough um",
    "start": "254200",
    "end": "262800"
  },
  {
    "text": "people like oh big switch statements that should be is that good I can do that right and of course it doesn't matter um here's somebody trying to",
    "start": "262800",
    "end": "269199"
  },
  {
    "text": "inline JavaScript for the jit like I'll help the jit along it'll be faster right um so I mean whatever uh here's some",
    "start": "269199",
    "end": "276639"
  },
  {
    "text": "wildly inaccurate uh search results I did so I didn't know how to search for",
    "start": "276639",
    "end": "282120"
  },
  {
    "text": "four Loops so I did four I which was like 8 million and 4 J which is like seven and a half million there's a MCH",
    "start": "282120",
    "end": "288240"
  },
  {
    "text": "you know a bunch of other letters uh there's so many reasons why this doesn't work um and then this is like half the",
    "start": "288240",
    "end": "293520"
  },
  {
    "text": "results for a four each and I was like okay you know you've got like 15.5 million for like a for Loop and like 4",
    "start": "293520",
    "end": "299240"
  },
  {
    "text": "million for for each I tried to search map but it just came up with a bunch of nonsense so uh but you know it just kind",
    "start": "299240",
    "end": "305199"
  },
  {
    "text": "of gets across the feeling that I get whenever I go see like I'm seeing people write code and I see for Loops all over",
    "start": "305199",
    "end": "311440"
  },
  {
    "text": "the place and I'm like why why are we still doing this this is so weird um and if I go search Google for more",
    "start": "311440",
    "end": "316919"
  },
  {
    "text": "inaccurate search results to back up my claims um we have uh performance in JavaScript is what is 34 million fast",
    "start": "316919",
    "end": "325360"
  },
  {
    "text": "JavaScript is 177 million maintainable JavaScript it's only like half a million it's hundreds of millions compared to",
    "start": "325360",
    "end": "332680"
  },
  {
    "text": "half a million um so uh as we know speed and maintainability are often at odds",
    "start": "332680",
    "end": "339280"
  },
  {
    "start": "335000",
    "end": "510000"
  },
  {
    "text": "not always I think um Dalton's going to give a great talk later um on something some stuff that uh might prove this",
    "start": "339280",
    "end": "346080"
  },
  {
    "text": "wrong but uh I have uh I have you know just I think a lot of people just you know when they write their optimized",
    "start": "346080",
    "end": "351960"
  },
  {
    "text": "code it takes a lot longer it's a lot more complex um and uh you know here we",
    "start": "351960",
    "end": "357880"
  },
  {
    "text": "have our just map that's exposed to on the left side is the you know the for Loop that's if you look at any Benchmark",
    "start": "357880",
    "end": "364360"
  },
  {
    "text": "it would just stomp map into the ground you should never use map blah blah blah but if you look at this uh we've got our",
    "start": "364360",
    "end": "370199"
  },
  {
    "text": "closure bug you know out in the open we've got all these loose variables it's really complex and hard to look at um",
    "start": "370199",
    "end": "376000"
  },
  {
    "text": "and map is really concise even though it's dog slow um here's a quote from",
    "start": "376000",
    "end": "381039"
  },
  {
    "text": "Stan's blog um am I saying that right is it stoan um anyway uh he's he's uh he",
    "start": "381039",
    "end": "387240"
  },
  {
    "text": "was saying you know name spaces are fantastic but dot property lookups are slow so we can't have name spaces um and",
    "start": "387240",
    "end": "393880"
  },
  {
    "text": "he goes into you know of course this is Extreme OB JavaScript optimization I don't think he's suggesting that you do",
    "start": "393880",
    "end": "399800"
  },
  {
    "text": "this in your app but sure enough somebody I'm working with you know couple like a year back is like oh I",
    "start": "399800",
    "end": "405560"
  },
  {
    "text": "can't use dot notation that's too slow I was like oh my gosh you know so like",
    "start": "405560",
    "end": "411080"
  },
  {
    "text": "it's not helping it's these these micro optimizations it's like it's cool to know but um we shouldn't we shouldn't be",
    "start": "411080",
    "end": "418160"
  },
  {
    "text": "uh all experts on this this we should just kind of like let the Frameworks and libraries kind of work on this um so we",
    "start": "418160",
    "end": "424840"
  },
  {
    "text": "have uh Global variable caching um you know on the left side we've got our extra variables and like can get out of",
    "start": "424840",
    "end": "431479"
  },
  {
    "text": "sync and it's extra code and we're basically like oh yeah the JavaScript execution context has to like leave the",
    "start": "431479",
    "end": "437520"
  },
  {
    "text": "function and go look up the variables and on the other side it's just there honestly I you know I watched some great",
    "start": "437520",
    "end": "443599"
  },
  {
    "text": "talks on what the jit can do and it's like probably does this stuff for you I'm no expert um but are doing this",
    "start": "443599",
    "end": "450160"
  },
  {
    "text": "today in our community um and here's just an example of how uh performance",
    "start": "450160",
    "end": "455319"
  },
  {
    "text": "can be at odds it's a unrolled loop here on the left and then just a normal for each if you don't know what an unrolled",
    "start": "455319",
    "end": "461039"
  },
  {
    "text": "Loop is is uh some I guess eight might be the magic number for unrolling a loop but it's basically turning a loop into a",
    "start": "461039",
    "end": "467440"
  },
  {
    "text": "sequential process um so that's that's one thing you've got the perf paranoia",
    "start": "467440",
    "end": "473599"
  },
  {
    "text": "people worried about you know every little decision growing up into a bigger and bigger and bigger decision of oh oh",
    "start": "473599",
    "end": "479440"
  },
  {
    "text": "no like if I didn't write all my loops and for Loops it's going to be a slow app and I'll never know how fast it",
    "start": "479440",
    "end": "484840"
  },
  {
    "text": "could have been and um it's it's not it's not a good situation for maintainability um so there's another",
    "start": "484840",
    "end": "492199"
  },
  {
    "text": "darker side of this is um people people tend to come up with new ideas often and",
    "start": "492199",
    "end": "499159"
  },
  {
    "text": "um they'll say like oh check out this new meta programming technique I came up with or uh aspect oriented programming",
    "start": "499159",
    "end": "505360"
  },
  {
    "text": "is really NE or DCI or whatever it is um new things come out and uh they're met",
    "start": "505360",
    "end": "510599"
  },
  {
    "start": "510000",
    "end": "935000"
  },
  {
    "text": "with like an angry mob of performance people that are like that'll never work we cannot do this it has to look and",
    "start": "510599",
    "end": "517000"
  },
  {
    "text": "read like C always new ideas are not welcome um and so this is for JS and I I",
    "start": "517000",
    "end": "523120"
  },
  {
    "text": "want you guys to be aware that like every time you go and leave a comment with a benchmark saying this will never",
    "start": "523120",
    "end": "528800"
  },
  {
    "text": "work you're basically just smothering it and telling all the new people and all the new ideas you know like we shouldn't",
    "start": "528800",
    "end": "535160"
  },
  {
    "text": "try that you can't try that we have to stop um so here's just an example this one's with you know like currying",
    "start": "535160",
    "end": "541200"
  },
  {
    "text": "someone's like oh we'll never use this even though Don might be the bottleneck if you do hit a bottleneck it's it's",
    "start": "541200",
    "end": "546480"
  },
  {
    "text": "going to be currying and I'll never it use it in production um and you know you guys remember when the promises and",
    "start": "546480",
    "end": "552399"
  },
  {
    "text": "callbacks things came out they're like oh callbacks and promises are slow uh thank goodness promises one though that",
    "start": "552399",
    "end": "557720"
  },
  {
    "text": "was awesome um and then uh Pete Hodson he's talking today he had a great post on why",
    "start": "557720",
    "end": "564200"
  },
  {
    "text": "you should program or how you can program without this and you know basically doing all these cool little uh",
    "start": "564200",
    "end": "570440"
  },
  {
    "text": "you know object-oriented things through closures and you have truly private variables and whatnot um but if you looked at the comments it was just",
    "start": "570440",
    "end": "576920"
  },
  {
    "text": "ripping them to shreds and it was so sad because of course you can do this in your JavaScript it's not going to be that slow um unless you're really like",
    "start": "576920",
    "end": "583800"
  },
  {
    "text": "looping through like 10,000 things and you need to have the prototype to look up the method really quickly but um yeah",
    "start": "583800",
    "end": "589680"
  },
  {
    "text": "it's just new ideas just being shot down and and thrown away I don't know if that idea is necessarily new but it's it's",
    "start": "589680",
    "end": "594720"
  },
  {
    "text": "fun um so what does make our stuff fast right um if you just go check out your",
    "start": "594720",
    "end": "600519"
  },
  {
    "text": "page speed scores it's not talking about oh you know what your raw JavaScript execution speed is your bottleneck you",
    "start": "600519",
    "end": "606760"
  },
  {
    "text": "guys you should really optimize your loops and such I mean it's mainly like oh yeah compress your images you know",
    "start": "606760",
    "end": "613680"
  },
  {
    "text": "gzip uh try to reduce your server um and you know in response to uh somebody",
    "start": "613680",
    "end": "619279"
  },
  {
    "text": "asking Paul Irish you know about like selector speed he would say this uh Hey you're not allowed to care about",
    "start": "619279",
    "end": "625200"
  },
  {
    "text": "performance unless you can Cate all your JavaScript have it at the bottom Minify your CSS and JS G up all your assets Lo",
    "start": "625200",
    "end": "631519"
  },
  {
    "text": "lessly compress your images so on Etc um yeah and you're just not allowed to care about it until you do all that stuff and",
    "start": "631519",
    "end": "639160"
  },
  {
    "text": "I have a suspicion that a lot of people aren't doing this stuff they're just like scar they're scared to write higher",
    "start": "639160",
    "end": "646279"
  },
  {
    "text": "level nice code because they're like I want it to be fast and I don't know what makes it fast because I just see blogs all day um so I did a bunch of tests at",
    "start": "646279",
    "end": "654600"
  },
  {
    "text": "my house and I was going to share them with you but then I got scared to share them with you so I'm not going to um",
    "start": "654600",
    "end": "661440"
  },
  {
    "text": "basically because it's you know there's no real way to um you know benchmark",
    "start": "661440",
    "end": "666680"
  },
  {
    "text": "real life applications um but this is what I found in my tests and I encourage you to go do your own tests um so",
    "start": "666680",
    "end": "673440"
  },
  {
    "text": "basically uh in every single web app I've made in JavaScript over the last like five years I've done an Ajax call",
    "start": "673440",
    "end": "680920"
  },
  {
    "text": "I've done some JavaScript and then I've done some templating or put it on the screen that's all I do every day day in",
    "start": "680920",
    "end": "687480"
  },
  {
    "text": "day out and that that JavaScript stuff that's coming from the server is usually",
    "start": "687480",
    "end": "692720"
  },
  {
    "text": "paginated usually already in a decent enough format I mean I might split sort do all sorts of crazy stuff to it but",
    "start": "692720",
    "end": "699240"
  },
  {
    "text": "even then it amounted to like nothing and so um optimizing my app if you like",
    "start": "699240",
    "end": "705120"
  },
  {
    "text": "flip it around your app code is that 2% that's all you're working with and if you're just like ripping it apart trying",
    "start": "705120",
    "end": "710480"
  },
  {
    "text": "to be fast you know of course everybody will tell you find your bottleneck optimize it but I think there's a lot of",
    "start": "710480",
    "end": "716639"
  },
  {
    "text": "people who don't have time or the mind to go do do that and they're just scared and they're just writing imperative code",
    "start": "716639",
    "end": "721800"
  },
  {
    "text": "for no reason um so you could look at this really easily in the web inspector and you'll see this pie chart um and",
    "start": "721800",
    "end": "729360"
  },
  {
    "text": "that yellow part or orange part I can't tell I'm not color blind but I just can't tell what color that is that yellow or orange anyway um so the whole",
    "start": "729360",
    "end": "736760"
  },
  {
    "text": "thing is uh that's just JavaScript called the Ajax call and then it",
    "start": "736760",
    "end": "742440"
  },
  {
    "text": "returned or JavaScript did this Dom work and then it returned it's not JavaScript so you might be thinking it's all",
    "start": "742440",
    "end": "747880"
  },
  {
    "text": "JavaScript but no it's mainly all this other stuff it just gets lumped into JavaScript because that's the caller and",
    "start": "747880",
    "end": "753160"
  },
  {
    "text": "you can look at the self time and try to figure it out but even then it's really hard to figure that out um so yeah we",
    "start": "753160",
    "end": "759839"
  },
  {
    "text": "have people who know this stuff and they're working on this stuff every single day and they're making libraries and and trying to help us get faster and",
    "start": "759839",
    "end": "767199"
  },
  {
    "text": "they're experts um and I think that you know we should use their stuff and just",
    "start": "767199",
    "end": "772399"
  },
  {
    "text": "let them be the experts we don't all have to be the experts on on micro optimizations and JavaScript execution",
    "start": "772399",
    "end": "778920"
  },
  {
    "text": "and all this stuff um another thing is uh JavaScript is a single-threaded",
    "start": "778920",
    "end": "784360"
  },
  {
    "text": "interpreted language um so we're not going to be the fastest you know like",
    "start": "784360",
    "end": "789560"
  },
  {
    "text": "it's we're kind of starting with olymp here uh so then you get people like TJ Holloway Chuck like writing like oh I'm",
    "start": "789560",
    "end": "795760"
  },
  {
    "text": "frustrated I'm going to go to go because Go's so much faster and it's like well if you put performance as the top thing",
    "start": "795760",
    "end": "801839"
  },
  {
    "text": "in in your community there's going to be more performant things out there CU they're compiled and they're distributed",
    "start": "801839",
    "end": "808320"
  },
  {
    "text": "and they're threaded and all sorts of stuff right um and this is I like this quote though because he says I'm",
    "start": "808320",
    "end": "813360"
  },
  {
    "text": "frustrated by no's Direction which favors performance over usability and robustness and um I kind of agree I feel",
    "start": "813360",
    "end": "818680"
  },
  {
    "text": "like everybody's just very performance aware um maybe because of that history stuff but I think there's a lot of other",
    "start": "818680",
    "end": "824519"
  },
  {
    "text": "things that we could be aware of so this is going into like part two where you might get some more code not just my uh",
    "start": "824519",
    "end": "830680"
  },
  {
    "text": "my opinion um so meanwhile back at our lovely Ranch um there's there's it's you",
    "start": "830680",
    "end": "837839"
  },
  {
    "text": "know we're not really placing faing that much importance on correctness and you know uh I was trying to think about what",
    "start": "837839",
    "end": "844480"
  },
  {
    "text": "is the strong point if if if JavaScript is a single-threaded interpreted language like what are the things that",
    "start": "844480",
    "end": "850480"
  },
  {
    "text": "would make somebody say I use JavaScript and JavaScript is the reason I'm like you know there's so many reasons to use",
    "start": "850480",
    "end": "856279"
  },
  {
    "text": "this language and I thought uh Hey it runs everywhere right it runs for nodebots and it runs for you know like",
    "start": "856279",
    "end": "863120"
  },
  {
    "text": "on the server and the client and phones all over the place um but you go do that",
    "start": "863120",
    "end": "869160"
  },
  {
    "text": "and it doesn't look like the same language everywhere um here's uh some node code on how to do a HTTP call um",
    "start": "869160",
    "end": "877199"
  },
  {
    "text": "here's a browser node browser node browser that's it's crazy um so",
    "start": "877199",
    "end": "884440"
  },
  {
    "text": "different and this is lowlevel on purpose so we can build abstractions on top of it and luckily TJ Holloway truck",
    "start": "884440",
    "end": "890279"
  },
  {
    "text": "before he left wrote uh super agent and now this is the same for both um and the",
    "start": "890279",
    "end": "896959"
  },
  {
    "text": "good part about this is It's how level it's declarative it works in many environments and um you know you don't",
    "start": "896959",
    "end": "903160"
  },
  {
    "text": "have to worry about like doing all this close to the metal stuff it just works",
    "start": "903160",
    "end": "908279"
  },
  {
    "text": "um so I think we need to spend more time on doing stuff like this rather than becoming performance experts um of",
    "start": "908279",
    "end": "914079"
  },
  {
    "text": "course you have to be a performance expert to be doing this lower level stuff so it kind of uh you know Catch 22",
    "start": "914079",
    "end": "920800"
  },
  {
    "text": "but the idea is that we want to write bigger more maintainable stuff so application developers once they learn",
    "start": "920800",
    "end": "925959"
  },
  {
    "text": "how to write a good app they can go learn you know other things like security and and you know how to",
    "start": "925959",
    "end": "931680"
  },
  {
    "text": "progress the web and not uh how JavaScript actually works under the hood so uh let's get into declarative coding",
    "start": "931680",
    "end": "938639"
  },
  {
    "start": "935000",
    "end": "1098000"
  },
  {
    "text": "for a minute because I'm really into that um so if you don't know what declarative coding is uh this is SQL um",
    "start": "938639",
    "end": "946360"
  },
  {
    "text": "it's you know you just write your query in one expression you say what you want not how you want it or how to get it or",
    "start": "946360",
    "end": "953279"
  },
  {
    "text": "how to do it so this is just uh you can let the SQL folks optimize all day long",
    "start": "953279",
    "end": "958759"
  },
  {
    "text": "and your expression doesn't need to change if your application code was like this you would not need to change your application to optimize it right it",
    "start": "958759",
    "end": "965720"
  },
  {
    "text": "would just be optimized under the hood so um if we look at filter uh as a",
    "start": "965720",
    "end": "971279"
  },
  {
    "text": "JavaScript version up at top that can be optimized all day long but down below",
    "start": "971279",
    "end": "976720"
  },
  {
    "text": "that's not very easy to optimize there's no level of abstraction it's not very declarative and so on Etc um so this is",
    "start": "976720",
    "end": "985720"
  },
  {
    "text": "how I write apps um I I get really over with declarative functional stuff this",
    "start": "985720",
    "end": "992040"
  },
  {
    "text": "is from our Workshop but the the point is that there's so much wiggle room for",
    "start": "992040",
    "end": "997440"
  },
  {
    "text": "uh you know changing the implementation of it under the hood and uh once you get into that stuff it it feels really good",
    "start": "997440",
    "end": "1004199"
  },
  {
    "text": "because it'll run in any environment and and you can implement it differently and you can optimize it um and I think",
    "start": "1004199",
    "end": "1009519"
  },
  {
    "text": "that's a better way to write apps and maybe we should be working more towards that um maybe not this functional stuff but declarative um so uh as far as part",
    "start": "1009519",
    "end": "1017959"
  },
  {
    "text": "two goes uh I'd want to write an app like that but it's not fast enough so what if we",
    "start": "1017959",
    "end": "1024760"
  },
  {
    "text": "could have our cake and eat it too um so let's check this out so uh optimization",
    "start": "1024760",
    "end": "1031600"
  },
  {
    "text": "number one for highle declarative things uh this is called Loop fusion um I've",
    "start": "1031600",
    "end": "1037240"
  },
  {
    "text": "talked about this before and probably people are probably familiar with this um so up at the top um it says Hey the",
    "start": "1037240",
    "end": "1044720"
  },
  {
    "text": "left side where we're mapping the function f we're iterating over a whole entire list and running f on it and then",
    "start": "1044720",
    "end": "1050960"
  },
  {
    "text": "we're iterating over it again and running G on it that's the same as just iterating over it once and running both",
    "start": "1050960",
    "end": "1057080"
  },
  {
    "text": "at the same time and we can actually uh that top is you know valid code that I",
    "start": "1057080",
    "end": "1062200"
  },
  {
    "text": "would use and I would just instantly recognize and replace with the right side as it's faster and down at the bottom is the chain syntax might be more",
    "start": "1062200",
    "end": "1070360"
  },
  {
    "text": "familiar um so to make this more concrete we could run through a list and capitalize everything and then grab the",
    "start": "1070360",
    "end": "1076919"
  },
  {
    "text": "first uh letter or uh the second time is much faster it only iterates once and",
    "start": "1076919",
    "end": "1083640"
  },
  {
    "text": "capitalizes and grabs the first letter um and here's the same thing in chain syntax I'm showing you that for a",
    "start": "1083640",
    "end": "1089720"
  },
  {
    "text": "reason because I think we should be doing that and I'm not saying there are people plenty of people doing that um",
    "start": "1089720",
    "end": "1095840"
  },
  {
    "text": "but I think we need to do more of that so uh guess what it works for funter and",
    "start": "1095840",
    "end": "1101360"
  },
  {
    "start": "1098000",
    "end": "1236000"
  },
  {
    "text": "monads too you guys a list um I don't you don't need to know what a funter and am monad is but you do need to know that",
    "start": "1101360",
    "end": "1107720"
  },
  {
    "text": "if you're writing stuff in a functional style almost everything you do is in funter and mon ads so uh a list is one",
    "start": "1107720",
    "end": "1115360"
  },
  {
    "text": "it's just a container type and it is a funter and a monad so uh everything you can do for a list you can typically do",
    "start": "1115360",
    "end": "1122039"
  },
  {
    "text": "for these other things so if I was going to map over my monad I could actually",
    "start": "1122039",
    "end": "1127159"
  },
  {
    "text": "fuse that mapping so uh here's another cool uh performance optimization from the",
    "start": "1127159",
    "end": "1134280"
  },
  {
    "text": "declarative highle programming World shortcut Fusion uh so here we are um it",
    "start": "1134280",
    "end": "1140919"
  },
  {
    "text": "basically says if we have a fold or reduce and uh we're doing that right",
    "start": "1140919",
    "end": "1146400"
  },
  {
    "text": "after building a list um we're building with this G function we could just shortcut that and call the G function",
    "start": "1146400",
    "end": "1152559"
  },
  {
    "text": "let's look let's take a look at that don't worry about the type signatures I just wanted to be a jerk um so um this",
    "start": "1152559",
    "end": "1160000"
  },
  {
    "text": "is a way to do it in JavaScript you've got a build function um and build all it does is inject the uh concatenation",
    "start": "1160000",
    "end": "1167320"
  },
  {
    "text": "operator uh I just used this push helper here and empty list um and that will",
    "start": "1167320",
    "end": "1172559"
  },
  {
    "text": "just basically inject that into the reduce for map um but if we do it that",
    "start": "1172559",
    "end": "1177600"
  },
  {
    "text": "way um you could you could basically say if we're going to uh first map over an",
    "start": "1177600",
    "end": "1183960"
  },
  {
    "text": "entire list and square it and then we're going to basically fold that list down to a sum um or reduce that list down to",
    "start": "1183960",
    "end": "1191559"
  },
  {
    "text": "a sum that commented outline is the is equivalent and it can do the exact same",
    "start": "1191559",
    "end": "1196799"
  },
  {
    "text": "thing in one iteration so it's it's just like Loop Fusion but here we're we're uh fusing folds uh so that's pretty neat um",
    "start": "1196799",
    "end": "1205080"
  },
  {
    "text": "and here's the exact same thing in uh kind of like a low Dash syntax down at the bottom uh so you could replace that",
    "start": "1205080",
    "end": "1212360"
  },
  {
    "text": "chain with one that does the reduce this way you don't have to map over everything and then sum it you could do",
    "start": "1212360",
    "end": "1217400"
  },
  {
    "text": "it in one one go uh that kind of uh you need good producers and good consumers",
    "start": "1217400",
    "end": "1222480"
  },
  {
    "text": "the things that build up lists and the things that consume lists and here's just a short list but it's basically everything that you would expect right",
    "start": "1222480",
    "end": "1228799"
  },
  {
    "text": "like any all sort by map filter concat like these are things that you do all the time it's not like oh these are the",
    "start": "1228799",
    "end": "1234880"
  },
  {
    "text": "only things you can do um but check it out it works for funter and monads too",
    "start": "1234880",
    "end": "1240039"
  },
  {
    "start": "1236000",
    "end": "1426000"
  },
  {
    "text": "it doesn't just work for lists we can actually shortcut um you know fuse are monads and funter and that's amazing if",
    "start": "1240039",
    "end": "1247240"
  },
  {
    "text": "you're if you're expressing your entire app in it they call it deforestation if you're basically every step of the way",
    "start": "1247240",
    "end": "1253640"
  },
  {
    "text": "uh using these these objects it can get rid of all the intermediate objects um and do things a lot more",
    "start": "1253640",
    "end": "1260440"
  },
  {
    "text": "efficiently so let's talk about uh some you probably do know here's memorization uh so uh raise your hand if",
    "start": "1260440",
    "end": "1267600"
  },
  {
    "text": "you know what memorization is okay great awesome um but the idea is that if you have a function that takes some value",
    "start": "1267600",
    "end": "1274320"
  },
  {
    "text": "and runs it um it the second time it go it'll actually remember the output for that input and the second time it runs",
    "start": "1274320",
    "end": "1281159"
  },
  {
    "text": "it doesn't actually run it it just Returns the output it's just cached um and you can do that for any pure",
    "start": "1281159",
    "end": "1286640"
  },
  {
    "text": "function uh so here's it in action uh if I call add 20 with 10 then I call it",
    "start": "1286640",
    "end": "1292559"
  },
  {
    "text": "again it doesn't run the second time it just remembered it because it was 10 and then the third time it does run because it's a different number but if I ran it",
    "start": "1292559",
    "end": "1298880"
  },
  {
    "text": "again with 11 it would return me without it wouldn't run again uh so you can just",
    "start": "1298880",
    "end": "1304120"
  },
  {
    "text": "wrap that around any function right this memoized thing and then it'll just remember it uh but what people don't",
    "start": "1304120",
    "end": "1309600"
  },
  {
    "text": "realize uh a lot or it trips up a lot of people here is that if you're if you're",
    "start": "1309600",
    "end": "1315200"
  },
  {
    "text": "memorizing pure computations uh here here's a future that goes get goes and gets posts Futures are just like",
    "start": "1315200",
    "end": "1321440"
  },
  {
    "text": "promises except you have to tell them to run they won't just run on their own so they end up being pure um but what",
    "start": "1321440",
    "end": "1328279"
  },
  {
    "text": "happens here is we make a new future that will go get us posts for whatever ID like ID number five and the second",
    "start": "1328279",
    "end": "1335320"
  },
  {
    "text": "time we call get posts with five people might be like oh no you just cashed your posts that doesn't work um but no we're",
    "start": "1335320",
    "end": "1341799"
  },
  {
    "text": "just returning that same future that will go get our posts so we don't have to make new objects every time it just",
    "start": "1341799",
    "end": "1347720"
  },
  {
    "text": "returns is a thing that will go get us our posts so you can totally do that for uh you know things that seem like",
    "start": "1347720",
    "end": "1354799"
  },
  {
    "text": "they're not going to be impure but they are actually pure uh so here we call uh",
    "start": "1354799",
    "end": "1360360"
  },
  {
    "text": "get posts with two it returns us a future I call it again it returns us the exact same future and then three it",
    "start": "1360360",
    "end": "1366640"
  },
  {
    "text": "returns us the new future that we'll go get posts so these things aren't getting posts they're not promises they're",
    "start": "1366640",
    "end": "1372080"
  },
  {
    "text": "things that will go get posts so it's just a post or a future basically with the value inside of it that hasn't",
    "start": "1372080",
    "end": "1378360"
  },
  {
    "text": "happened yet um and we could also do this with uh jQuery um and uh so we have",
    "start": "1378360",
    "end": "1384840"
  },
  {
    "text": "this 2io helper from uh Monae JS uh Chris Meers has made it his slogan was",
    "start": "1384840",
    "end": "1390760"
  },
  {
    "text": "when you actually Absol absolutely have to use JavaScript which depressed me but",
    "start": "1390760",
    "end": "1396320"
  },
  {
    "text": "the idea is that you have a um you know this thing that will go get all the",
    "start": "1396320",
    "end": "1402360"
  },
  {
    "text": "trolls right um everything with class Troll and it doesn't actually do it it just returns us an IO of something that",
    "start": "1402360",
    "end": "1409159"
  },
  {
    "text": "will do it and then we run IO we run IO you might see it called uh unsafe perform IO and it'll get different",
    "start": "1409159",
    "end": "1415520"
  },
  {
    "text": "things each time but the fact that it was memorized is it's just saying it's going to return you that same IO it",
    "start": "1415520",
    "end": "1421760"
  },
  {
    "text": "doesn't have to go construct a whole new iio every time uh so that's pretty neat so needless to say that works for",
    "start": "1421760",
    "end": "1428039"
  },
  {
    "start": "1426000",
    "end": "1562000"
  },
  {
    "text": "functors and monads it's pure computations that can all be memorized basically your whole app can be",
    "start": "1428039",
    "end": "1433159"
  },
  {
    "text": "memorized um here's a parallel code um so here on the left we're we're showing",
    "start": "1433159",
    "end": "1440600"
  },
  {
    "text": "the associativity rule uh if we run it doesn't matter how we group our inner calls we can call F with the result of X",
    "start": "1440600",
    "end": "1447320"
  },
  {
    "text": "and Y and or you know f with the the other result the in ones run first and",
    "start": "1447320",
    "end": "1453080"
  },
  {
    "text": "and that's fine here's an example uh here's add um and you know you guys might say oh you can add two and three",
    "start": "1453080",
    "end": "1459440"
  },
  {
    "text": "and add that result to five or vice versa it's also commutative which is pretty neat um but that means we could",
    "start": "1459440",
    "end": "1465120"
  },
  {
    "text": "write it and it doesn't matter how we group it right can just write as many things inside of this as we want give it",
    "start": "1465120",
    "end": "1470279"
  },
  {
    "text": "a list or a Vari adic ad basically and this can be parallelized and you might be thinking no it can't this is",
    "start": "1470279",
    "end": "1476880"
  },
  {
    "text": "Javascript we can't do parallelization of course we can we've got River Trail coming out we've got web workers we can spawn child processes there's ways to do",
    "start": "1476880",
    "end": "1483399"
  },
  {
    "text": "parallel code we just hinder ourselves and don't try because we're all like oh",
    "start": "1483399",
    "end": "1488440"
  },
  {
    "text": "no imperative M mutability blah blah blah and we don't have any really nice declarative syntax that allows us the",
    "start": "1488440",
    "end": "1494600"
  },
  {
    "text": "freedom to go try to implement this stuff because everybody's JavaScript there like for loops and things that's like well I can't make it parallel",
    "start": "1494600",
    "end": "1501480"
  },
  {
    "text": "because it's too it's too low level so um here's another way uh to do",
    "start": "1501480",
    "end": "1508159"
  },
  {
    "text": "parallelism it's a applicative funter syntax but basically what we're saying is um and you don't need to know what",
    "start": "1508159",
    "end": "1513399"
  },
  {
    "text": "this stuff is I'm just showing you stuff that is really high level and does things um so one example is down at the",
    "start": "1513399",
    "end": "1520559"
  },
  {
    "text": "bottom uh if we want to do three long running calculations and then collect the results uh basically what this is",
    "start": "1520559",
    "end": "1526679"
  },
  {
    "text": "going to do is return Futures and the applicative instance for futures we wait till each one is done and pass the",
    "start": "1526679",
    "end": "1532640"
  },
  {
    "text": "results to collect results right but the idea is that uh it can be run in parallel and um there isn't any effort",
    "start": "1532640",
    "end": "1539399"
  },
  {
    "text": "going into that because nobody's really doing it um and it doesn't have to just be for futures it could just be for",
    "start": "1539399",
    "end": "1544840"
  },
  {
    "text": "normal things like validations uh just normal calculations this just the way you express this is totally declarative",
    "start": "1544840",
    "end": "1551480"
  },
  {
    "text": "there's no step-by-step instructions there's no sequence no evaluation steps",
    "start": "1551480",
    "end": "1556720"
  },
  {
    "text": "like first run this line then run this line we could just consume it and do whatever we want under the hood so it",
    "start": "1556720",
    "end": "1563799"
  },
  {
    "start": "1562000",
    "end": "1703000"
  },
  {
    "text": "works for funter and monads too you guys I just say funs and monads basically saying like you know like applicative",
    "start": "1563799",
    "end": "1569240"
  },
  {
    "text": "funs are funs I don't know if that this isn't a funter syntax applicative but the idea is that the things you're",
    "start": "1569240",
    "end": "1574840"
  },
  {
    "text": "expressing your entire app in can uh take advantage of this stuff uh particularly monoids in the case of the",
    "start": "1574840",
    "end": "1581799"
  },
  {
    "text": "parallel associativity stuff um so I want to talk about some cool ideas that I have because I I you know I've got",
    "start": "1581799",
    "end": "1588880"
  },
  {
    "text": "this time so um here's the example from uh low Dash docs on chain and uh you",
    "start": "1588880",
    "end": "1596120"
  },
  {
    "text": "know we're going to sort sort them by age then map this uh string over it and then grab the first value um and then",
    "start": "1596120",
    "end": "1601679"
  },
  {
    "text": "extract the value from it this is actually a comonad um but the idea is that um if each step of the way it",
    "start": "1601679",
    "end": "1610039"
  },
  {
    "text": "didn't actually run it just built up a computation to run when we call that",
    "start": "1610039",
    "end": "1615640"
  },
  {
    "text": "value basically it it lays eily builds up a computation for you then we could",
    "start": "1615640",
    "end": "1621000"
  },
  {
    "text": "say oh hey uh instead of running immediately we noticed that you called first right after map so why did we map",
    "start": "1621000",
    "end": "1628559"
  },
  {
    "text": "the entire list when we could have just called first and you know we could actually do some fusion there or at",
    "start": "1628559",
    "end": "1634080"
  },
  {
    "text": "least rearrange it a bit um and this is uh you know these are these high level declarative apis that we could be coding",
    "start": "1634080",
    "end": "1641320"
  },
  {
    "text": "with all the time give us the flexibility and freedom to do that turns out there's already a library that does",
    "start": "1641320",
    "end": "1646520"
  },
  {
    "text": "this um I don't know if there's many people using it um but I I think uh we could combine efforts and try to do some",
    "start": "1646520",
    "end": "1652480"
  },
  {
    "text": "more lazy coding in L Dash which is my favorite library for doing this kind of stuff so here uh you know you can see a",
    "start": "1652480",
    "end": "1658440"
  },
  {
    "text": "map unique take but nothing happens till that bottom line see that unique rans from what to one to a thousand uh we",
    "start": "1658440",
    "end": "1665440"
  },
  {
    "text": "call that each and it basically extracts the value from that computation it basically says like run this now so",
    "start": "1665440",
    "end": "1671679"
  },
  {
    "text": "everything else up until it doesn't do anything but build up a computation it's like the command pattern it's basically",
    "start": "1671679",
    "end": "1678000"
  },
  {
    "text": "promises you're saying do this do this do this and it's not going to do anything until it actually gets resolved",
    "start": "1678000",
    "end": "1684039"
  },
  {
    "text": "or until we call each or you know and you might be familiar with this style through bacon JS or react or some or",
    "start": "1684039",
    "end": "1689399"
  },
  {
    "text": "reactive JS or rxjs I mean um a lot of these different uh you know FR FRP libraries and stuff do this but we just",
    "start": "1689399",
    "end": "1695960"
  },
  {
    "text": "do this for everyday code just build up your computation and we can compile as we code we can kind of make these",
    "start": "1695960",
    "end": "1701360"
  },
  {
    "text": "optimizations um that's a pretty neat idea so that works for funter and monats too you guys can you believe it um it",
    "start": "1701360",
    "end": "1708240"
  },
  {
    "text": "doesn't just work with lists um we could work with all sorts of different data structures and put computations inside",
    "start": "1708240",
    "end": "1714120"
  },
  {
    "text": "them and if you're expressing your app in a functional way you'll probably have kind of this like monad stack and as you",
    "start": "1714120",
    "end": "1721039"
  },
  {
    "text": "put computations inside it it's taking into account asynchronous programming and things like that so null checks and",
    "start": "1721039",
    "end": "1727320"
  },
  {
    "text": "whatnot um and this is really powerful because you can do optimizations",
    "start": "1727320",
    "end": "1732399"
  },
  {
    "text": "throughout um there's other ways you can do this stuff um here's a uh puff and",
    "start": "1732399",
    "end": "1738279"
  },
  {
    "text": "fresh uh wrote this like rephrase he basically ported hascol rewrite rules over so down there is the loop Fusion we",
    "start": "1738279",
    "end": "1745559"
  },
  {
    "text": "were talking about earlier if you map the map that says consume the app and like just every time you match that",
    "start": "1745559",
    "end": "1751080"
  },
  {
    "text": "replace it with this um that's a way to go about it I'm not big on the pre-processing stuff but um you know",
    "start": "1751080",
    "end": "1756960"
  },
  {
    "text": "something we can do today um basically another way of going about this instead of runtime compilation um and we could",
    "start": "1756960",
    "end": "1763039"
  },
  {
    "text": "also take it a step further by inlining all our functions and then running the rewrite rules things like that so this",
    "start": "1763039",
    "end": "1769279"
  },
  {
    "text": "is just a handful of ideas and and optimizations from very high level declarative code that if we're writing",
    "start": "1769279",
    "end": "1776640"
  },
  {
    "text": "High Lev declarative code we could be sharing our JavaScript code in different environments um we could be optimizing",
    "start": "1776640",
    "end": "1782880"
  },
  {
    "text": "under the hood we could be putting our effort towards this instead of everybody trying to learn where this you know the",
    "start": "1782880",
    "end": "1789480"
  },
  {
    "text": "execution context goes and then like you know what everything is doing under the hood we could be working at a very high",
    "start": "1789480",
    "end": "1795240"
  },
  {
    "text": "level for application developers um um and uh yeah that's really all I've got",
    "start": "1795240",
    "end": "1800640"
  },
  {
    "text": "so thank you uh do anybody have questions or just",
    "start": "1800640",
    "end": "1807559"
  },
  {
    "text": "want to like yell at me about [Music] performance uh what's",
    "start": "1807559",
    "end": "1813960"
  },
  {
    "text": "up oh sure yeah that that is the point um you basically uh there's there's techniques for compiling as you code or",
    "start": "1813960",
    "end": "1820880"
  },
  {
    "text": "whatever and it's a lot like a promise you just store functions in there and perhaps as you're storing them you could",
    "start": "1820880",
    "end": "1826799"
  },
  {
    "text": "say oh I just followed I just had a map and a build I can do our shortcut fusion and then you just keep you know doing",
    "start": "1826799",
    "end": "1832919"
  },
  {
    "text": "that and I think nothing happens until you kind of run it it's like you're setting up dominoes so and then you push",
    "start": "1832919",
    "end": "1838200"
  },
  {
    "text": "him down and as you're setting them up you can just have this little mechanism to fix it up so um did I did I repeat",
    "start": "1838200",
    "end": "1844440"
  },
  {
    "text": "the question I probably didn't repeat the question did I was about lazy JS and um you know you missed the point of uh",
    "start": "1844440",
    "end": "1850559"
  },
  {
    "text": "or I didn't Express the point well um you know it could compile as it goes um",
    "start": "1850559",
    "end": "1855880"
  },
  {
    "text": "what's up ran yeah well that's yeah I I I I think that anything is production",
    "start": "1855880",
    "end": "1861679"
  },
  {
    "text": "ready if it runs but that's my opinion I'm crazy but um I I think that uh there's",
    "start": "1861679",
    "end": "1868639"
  },
  {
    "text": "probably a lot of problems with it right you shouldn't just go out and start using stuff but like Christian said right before this like use it find bugs",
    "start": "1868639",
    "end": "1874840"
  },
  {
    "text": "like let's try to write the stuff we want to write um because you know like if you're writing what you want to write",
    "start": "1874840",
    "end": "1880320"
  },
  {
    "text": "they'll optimize around us they'll optimize the code they'll have way more wiggle room and you know like somebody",
    "start": "1880320",
    "end": "1886720"
  },
  {
    "text": "was talking about this the other day like how the JavaScript uh actual engines will you know like optimize to",
    "start": "1886720",
    "end": "1892159"
  },
  {
    "text": "what you're doing and it's like why not do that Gia what's up",
    "start": "1892159",
    "end": "1897720"
  },
  {
    "text": "man I'll try I mean yeah I'll totally help you man this is a yeah low Dash maintainer",
    "start": "1898760",
    "end": "1905519"
  },
  {
    "text": "back",
    "start": "1905519",
    "end": "1907720"
  },
  {
    "text": "here oh excellent yeah I'm very happy to work on that um the last person that",
    "start": "1911120",
    "end": "1916519"
  },
  {
    "text": "should be working on on performance I should have admitted that first um but I I would i' be happy to",
    "start": "1916519",
    "end": "1922880"
  },
  {
    "text": "try to work on stuff the idea is that I think um what what I really wanted to express is people they learn enough in",
    "start": "1922880",
    "end": "1930240"
  },
  {
    "text": "JavaScript and they get to a point where they're like what do I learn now and then that they see blogs and speakers",
    "start": "1930240",
    "end": "1936679"
  },
  {
    "text": "and all this stuff every day about performance and you know you need to know how everything works down in the metal and then they don't learn like oh",
    "start": "1936679",
    "end": "1943799"
  },
  {
    "text": "well why don't we write you know higher level things or work on that stuff it's all very very very low level and it's uh",
    "start": "1943799",
    "end": "1949960"
  },
  {
    "text": "I think we should be as application developers not as Library developers but as application developers working on",
    "start": "1949960",
    "end": "1955679"
  },
  {
    "text": "that so um but yeah I'll totally try to help let's talk about that later uh any other questions what's up what's",
    "start": "1955679",
    "end": "1964360"
  },
  {
    "text": "oh I have a workshop tomorrow if you want to come um but yeah it's a it's a space",
    "start": "1964360",
    "end": "1973080"
  },
  {
    "text": "burrito um any other questions all right thank you guys so",
    "start": "1973320",
    "end": "1979870"
  },
  {
    "text": "[Applause]",
    "start": "1979870",
    "end": "1985559"
  },
  {
    "text": "much",
    "start": "1989320",
    "end": "1992320"
  }
]