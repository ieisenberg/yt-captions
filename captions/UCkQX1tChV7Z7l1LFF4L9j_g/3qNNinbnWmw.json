[
  {
    "start": "0",
    "end": "128000"
  },
  {
    "text": "thanks guys yeah so today we're going to be talking about Kafka and how it's",
    "start": "4210",
    "end": "11350"
  },
  {
    "text": "going to evolve in the future so Kafka",
    "start": "11350",
    "end": "18279"
  },
  {
    "text": "has gotten a lot of mileage out of zookeeper and zookeeper is used in many",
    "start": "18279",
    "end": "27160"
  },
  {
    "text": "ways in Kafka so we use it to store metadata we use it to receive notifications when certain things change",
    "start": "27160",
    "end": "33090"
  },
  {
    "text": "and it's it's actually you know done pretty well at that so we have a lot of",
    "start": "33090",
    "end": "39219"
  },
  {
    "text": "respect for zookeeper for the community behind it and for the authors but it is",
    "start": "39219",
    "end": "45339"
  },
  {
    "text": "still a second system so it's another thing people have to learn",
    "start": "45339",
    "end": "50410"
  },
  {
    "text": "it's another moving part all of those things so what we're talking about today",
    "start": "50410",
    "end": "58570"
  },
  {
    "text": "is a new Kafka improvement proposal called kit 500 that's talking about how",
    "start": "58570",
    "end": "65800"
  },
  {
    "text": "we can move beyond zookeeper and basically use Kafka itself to store metadata and manage it so I want to",
    "start": "65800",
    "end": "75520"
  },
  {
    "text": "emphasize that this isn't going to be a 1:1 2:1 replacement of zookeeper so",
    "start": "75520",
    "end": "81219"
  },
  {
    "text": "we're not replacing zookeeper with another system which is substantially like zookeeper so it's not about using",
    "start": "81219",
    "end": "90100"
  },
  {
    "text": "something like one of the many projects which are similar to zookeeper but maybe have a slightly different API slightly",
    "start": "90100",
    "end": "96070"
  },
  {
    "text": "different implementation it's actually about managing the metadata in a very different way and a way that we feel",
    "start": "96070",
    "end": "101890"
  },
  {
    "text": "will be much more extensible and supportable in the future along the way",
    "start": "101890",
    "end": "108579"
  },
  {
    "text": "I'm going to talk a little bit about you know how we got here and what direction we've been going and",
    "start": "108579",
    "end": "114899"
  },
  {
    "text": "there's actually a lot of previous work that's been leading up to this so kit 500 is kind of like the",
    "start": "114899",
    "end": "121659"
  },
  {
    "text": "culmination of a lot of work that the community has been doing for many years",
    "start": "121659",
    "end": "128548"
  },
  {
    "start": "128000",
    "end": "393000"
  },
  {
    "text": "and so to start off I'm going to talk a little bit about the evolution of Apache kafka clients and you know you guys",
    "start": "129710",
    "end": "136190"
  },
  {
    "text": "probably not already know already the client is the thing that talks to the server here we basically have three",
    "start": "136190",
    "end": "143750"
  },
  {
    "text": "kinds of clients one of them is the producer that will put messages into the system the consumer that'll pull them",
    "start": "143750",
    "end": "149210"
  },
  {
    "text": "out an Administrative Tools that will do stuff like creating topics deleting topics security related stuff setting up",
    "start": "149210",
    "end": "157400"
  },
  {
    "text": "security settings that sort of thing so in the very beginning you know we had",
    "start": "157400",
    "end": "163459"
  },
  {
    "text": "producers they would write to topics that was obviously going through the broker I'm using this Kafka symbol here",
    "start": "163459",
    "end": "169790"
  },
  {
    "text": "to represent the broker processes we would have consumers that would read",
    "start": "169790",
    "end": "175130"
  },
  {
    "text": "those topics but there was a hitch here",
    "start": "175130",
    "end": "180140"
  },
  {
    "text": "which is that the consumers needed to store the offset that they last fetched from periodically and we use zookeeper",
    "start": "180140",
    "end": "187459"
  },
  {
    "text": "for that in the beginning we also use zookeeper to understand what consumer",
    "start": "187459",
    "end": "193040"
  },
  {
    "text": "group we were part of and understanding this is key to doing things like doing rebalancing when a consumer from a",
    "start": "193040",
    "end": "199850"
  },
  {
    "text": "consumer group goes down and all that stuff and of course the Administrative Tools",
    "start": "199850",
    "end": "206510"
  },
  {
    "text": "would also go directly to zookeepers so there would be no broker involvement in the administrative tools so if you",
    "start": "206510",
    "end": "212840"
  },
  {
    "text": "wanted to delete a topic or create a topic you would just basically have a script that launched a scallop process",
    "start": "212840",
    "end": "220280"
  },
  {
    "text": "and that would manipulate the zookeeper stuff directly so this was the situation",
    "start": "220280",
    "end": "226730"
  },
  {
    "text": "back in like the point-eight Kafka point eight days the first room and I guess I",
    "start": "226730",
    "end": "233360"
  },
  {
    "text": "should talk a little bit about why you know why there were limitations here before we go on so first of all you know",
    "start": "233360",
    "end": "238459"
  },
  {
    "text": "zookeeper is not really a high bandwidth system so if you have a lot of consumers doing offset fetches and offset commits",
    "start": "238459",
    "end": "244570"
  },
  {
    "text": "it can really start to bog down the system and it can interfere with stuff",
    "start": "244570",
    "end": "250510"
  },
  {
    "text": "which is also key for zookeeper to do and secondly you know we're going to",
    "start": "250510",
    "end": "258289"
  },
  {
    "text": "talk more about this later but this is a real obstacle to having effective security because all of",
    "start": "258289",
    "end": "266370"
  },
  {
    "text": "the security that we implemented was actually on the broker and by going through zookeeper you're bypassing that",
    "start": "266370",
    "end": "271680"
  },
  {
    "text": "layer of security so we started to move away from this and the first instance of",
    "start": "271680",
    "end": "279240"
  },
  {
    "text": "this was the consumer group coordinator so as I mentioned earlier originally all",
    "start": "279240",
    "end": "285960"
  },
  {
    "text": "of the consumer group stuff would just go through zookeeper and all of the",
    "start": "285960",
    "end": "291240"
  },
  {
    "text": "offset fetch offset commits commit stuff would also go through zookeeper so you had these end-users who were talking",
    "start": "291240",
    "end": "297000"
  },
  {
    "text": "directly to zookeeper in order to avoid this we were able to create these",
    "start": "297000",
    "end": "303810"
  },
  {
    "text": "consumer api's and basically this offset fetch an offset commit became api's on",
    "start": "303810",
    "end": "312660"
  },
  {
    "text": "the broker and so they were no longer things that you would talk directly to",
    "start": "312660",
    "end": "319349"
  },
  {
    "text": "zookeeper to do but you could talk to the broker and then the broker could store this stuff internally in a topic",
    "start": "319349",
    "end": "325070"
  },
  {
    "text": "so two things here we're creating a new API on the broker and we're storing the",
    "start": "325070",
    "end": "331590"
  },
  {
    "text": "data in a different place it's no longer being stored in zookeeper but it's being stored in Kafka itself so this is kind",
    "start": "331590",
    "end": "339419"
  },
  {
    "text": "of an example of Kafka on Kafka right we're using the system to store our own metadata here the second thing we did",
    "start": "339419",
    "end": "348990"
  },
  {
    "text": "was basically to do the same for group partition assignment so we created a similar set of api's the join group API",
    "start": "348990",
    "end": "356699"
  },
  {
    "text": "the sync group API heartbeat API and so we were able to take zookeeper out of",
    "start": "356699",
    "end": "362759"
  },
  {
    "text": "the consumer read path and that's really",
    "start": "362759",
    "end": "369419"
  },
  {
    "text": "good because then you know we can scale out the number of consumers more effectively and we can also basically",
    "start": "369419",
    "end": "375750"
  },
  {
    "text": "secure consumers a lot easier so after this the diagram looks a little",
    "start": "375750",
    "end": "382910"
  },
  {
    "text": "more like this right the producer and the consumer are going through the regular brokers and the admin tools are",
    "start": "382910",
    "end": "388940"
  },
  {
    "text": "still talking directly to zoo keeper so",
    "start": "388940",
    "end": "395139"
  },
  {
    "start": "393000",
    "end": "603000"
  },
  {
    "text": "before we talk more we should have a brief digression about security here so as Kafka was growing in popularity",
    "start": "395139",
    "end": "402740"
  },
  {
    "text": "there was a greater demand to have security and in particular policies that",
    "start": "402740",
    "end": "407930"
  },
  {
    "text": "we can enforce at a topic level and things like that so this is something",
    "start": "407930",
    "end": "413270"
  },
  {
    "text": "that we implemented on the broker side through access control lists or Ackles",
    "start": "413270",
    "end": "418460"
  },
  {
    "text": "we usually call them so you could have an Akal that would say like you can read from this thing or you can't read from",
    "start": "418460",
    "end": "424310"
  },
  {
    "text": "this thing stuff like that but again",
    "start": "424310",
    "end": "429770"
  },
  {
    "text": "when you go directly to zookeeper you're bypassing the Eccles so it's a bit of a hole in the security model in that sense",
    "start": "429770",
    "end": "436840"
  },
  {
    "text": "so our next goal here was basically to",
    "start": "436840",
    "end": "442300"
  },
  {
    "text": "rework the admin tools in terms of api's on the broker and in order to do that we",
    "start": "442300",
    "end": "450259"
  },
  {
    "text": "created this thing called admin client admin client was similar to the producer",
    "start": "450259",
    "end": "455570"
  },
  {
    "text": "and consumer in the sense that it's basically a class which communicates with the broker over well-defined api's",
    "start": "455570",
    "end": "462710"
  },
  {
    "text": "and so these api's were things like create topics delete topics alter",
    "start": "462710",
    "end": "468919"
  },
  {
    "text": "configs and so we've been reworking the admin tools so that they use the admin",
    "start": "468919",
    "end": "475370"
  },
  {
    "text": "client rather than talking directly to zookeeper and by doing this we can do",
    "start": "475370",
    "end": "481820"
  },
  {
    "text": "things like give people the ability to create topics let's start with a certain",
    "start": "481820",
    "end": "487099"
  },
  {
    "text": "prefix but not the ability to create topics that start with another prefix or we can you know they can't delete",
    "start": "487099",
    "end": "494300"
  },
  {
    "text": "certain topics but maybe they can create their own topics so rather than being an all-or-nothing security is now a lot",
    "start": "494300",
    "end": "500870"
  },
  {
    "text": "more fine-grained and in fact we can even have programs which create Kafka",
    "start": "500870",
    "end": "506240"
  },
  {
    "text": "topics as part of their regular operations so it's no longer just something that the admin has to from the command line so at this point",
    "start": "506240",
    "end": "516219"
  },
  {
    "text": "you know that the diagram looks a lot more like this right you have the producer consumer and admin client all",
    "start": "516219",
    "end": "521770"
  },
  {
    "text": "going through these api's and all talking to the broker and then the broker will manage whatever needs to be",
    "start": "521770",
    "end": "527080"
  },
  {
    "text": "done in zookeeper so in addition to security there's actually a lot more",
    "start": "527080",
    "end": "532810"
  },
  {
    "text": "benefits that we've only really touched on here and basically these are the",
    "start": "532810",
    "end": "538960"
  },
  {
    "text": "benefits that you get by encapsulating the the data here so what do I mean by",
    "start": "538960",
    "end": "544060"
  },
  {
    "text": "that what I mean is that the data in zookeeper is in a certain format right and over time that format will evolve",
    "start": "544060",
    "end": "551520"
  },
  {
    "text": "but on the other hand people may use different versions of the client so it's",
    "start": "551520",
    "end": "557560"
  },
  {
    "text": "actually really nice to have an API in the middle that can translate let's say an older request into the new format",
    "start": "557560",
    "end": "565240"
  },
  {
    "text": "which we're now using and this helps with compatibility because we're no longer directly accessing basically the",
    "start": "565240",
    "end": "571779"
  },
  {
    "text": "brain of Kafka we're actually going through these api's which give us the ability to to have like a well-defined",
    "start": "571779",
    "end": "578680"
  },
  {
    "text": "interface and we can also validate these API so we can say stuff like well you",
    "start": "578680",
    "end": "584200"
  },
  {
    "text": "know you can't you can't create this topic with these certain settings things like that and so it became possible to",
    "start": "584200",
    "end": "591160"
  },
  {
    "text": "have policies which is something we really couldn't have when we're directly modifying stuff in zookeeper so those",
    "start": "591160",
    "end": "598810"
  },
  {
    "text": "are all pretty important things there so",
    "start": "598810",
    "end": "604440"
  },
  {
    "start": "603000",
    "end": "839000"
  },
  {
    "text": "so far we've just been talking about clients and how they interact with the system but it's actually equally",
    "start": "604440",
    "end": "610839"
  },
  {
    "text": "important to think about how brokers interact with other brokers over the zookeeper and in the case of Kafka we",
    "start": "610839",
    "end": "620350"
  },
  {
    "text": "actually have a lot of interacting to do so brokers need to register themselves with zookeeper so that people know where",
    "start": "620350",
    "end": "628360"
  },
  {
    "text": "they are obviously we have to manage Eccles we have to know about what they",
    "start": "628360",
    "end": "633430"
  },
  {
    "text": "are we have this concept of dynamic configuration which is basically configurations that you can change over",
    "start": "633430",
    "end": "640030"
  },
  {
    "text": "time in a managed way have them changed at runtime we also have this thing called the ISR which is",
    "start": "640030",
    "end": "646589"
  },
  {
    "text": "basically in the instinct replica set and this has to do with how we would do replication so this is all metadata that",
    "start": "646589",
    "end": "652680"
  },
  {
    "text": "we need to worry about in order to do this Kafka elects a single broker to be",
    "start": "652680",
    "end": "658950"
  },
  {
    "text": "the controller and this is kind of a familiar pattern if you've used a keeper before this idea of having a leader",
    "start": "658950",
    "end": "665519"
  },
  {
    "text": "which is elected by zookeeper where you delegate certain responsibilities to",
    "start": "665519",
    "end": "670800"
  },
  {
    "text": "that node and of course control their",
    "start": "670800",
    "end": "676050"
  },
  {
    "text": "election is very important for us control elections management zookeeper",
    "start": "676050",
    "end": "681980"
  },
  {
    "text": "so the model that we have here is basically that zookeeper will elect a",
    "start": "681980",
    "end": "691110"
  },
  {
    "text": "single controller and that controller will update the rest of the system with",
    "start": "691110",
    "end": "696180"
  },
  {
    "text": "the changes to metadata that are made and that's done through certain api's I'm not going to go into detail about",
    "start": "696180",
    "end": "702720"
  },
  {
    "text": "what they are but basically the ones pictured in the top right here so the controller will be responsible for",
    "start": "702720",
    "end": "708930"
  },
  {
    "text": "pushing out these updates to the metadata so even though I just got done",
    "start": "708930",
    "end": "719640"
  },
  {
    "text": "saying this is the model there are actually some exceptions now one of them is that there are cases where brokers go",
    "start": "719640",
    "end": "726750"
  },
  {
    "text": "directly to zookeeper and one of them is when changing the in sync replicas set",
    "start": "726750",
    "end": "733680"
  },
  {
    "text": "so currently the leader of a partition will directly communicate with zookeeper when changing the in sync replicas set",
    "start": "733680",
    "end": "739829"
  },
  {
    "text": "and this kind of creates a lot of the same problems that we saw with clients right which is that now it's sort of",
    "start": "739829",
    "end": "746339"
  },
  {
    "text": "hard to change the format right because what if you have a broker from an older version that's changing this and it's",
    "start": "746339",
    "end": "753269"
  },
  {
    "text": "overwriting the new format with an old one there's also issues about",
    "start": "753269",
    "end": "758670"
  },
  {
    "text": "notifications we'll get into those later so one of the things that we've been",
    "start": "758670",
    "end": "763769"
  },
  {
    "text": "working on lately is actually creating api's to avoid having this kind of direct zookeeper access from brokers so",
    "start": "763769",
    "end": "771480"
  },
  {
    "text": "the model that we'd like to get to is a model where we centralized the",
    "start": "771480",
    "end": "776799"
  },
  {
    "text": "zookeeper access in the controller so the controller is sort of the node that",
    "start": "776799",
    "end": "782230"
  },
  {
    "text": "we're gonna delegate this work to and that gives us again a lot of the same",
    "start": "782230",
    "end": "789399"
  },
  {
    "text": "benefits we had before so it's a lot easier to reason about a system where there's a single source of truth in this",
    "start": "789399",
    "end": "796059"
  },
  {
    "text": "case the controller and well ideally zookeeper is the single source of truth",
    "start": "796059",
    "end": "802660"
  },
  {
    "text": "but the controller should be like the the bottleneck through which changes flow to it it's a lot easier to reason",
    "start": "802660",
    "end": "808720"
  },
  {
    "text": "about that than having dozens of brokers that are all making changes at once potentially overwriting each other's",
    "start": "808720",
    "end": "814929"
  },
  {
    "text": "changes we have the benefits of better compatibility and of course you know we",
    "start": "814929",
    "end": "821199"
  },
  {
    "text": "just have better encapsulation I should note in passing that there are facilities in zookeeper to manage",
    "start": "821199",
    "end": "828609"
  },
  {
    "text": "concurrent writes there is basically like a compare and swap tech primitive but again that that sort of makes the",
    "start": "828609",
    "end": "833859"
  },
  {
    "text": "system pretty hard to reason about if you start using it a lot so another",
    "start": "833859",
    "end": "842379"
  },
  {
    "start": "839000",
    "end": "944000"
  },
  {
    "text": "important concept here is broker liveness and this is basically who's in",
    "start": "842379",
    "end": "849129"
  },
  {
    "text": "the cluster right so this is actually a very important concept in any clustered system you have to know who's alive",
    "start": "849129",
    "end": "855899"
  },
  {
    "text": "who's part of the system and what responsibilities they have at any given",
    "start": "855899",
    "end": "861160"
  },
  {
    "text": "moment this is one of the things that zookeeper gives us currently and the way",
    "start": "861160",
    "end": "867069"
  },
  {
    "text": "that it's done is by maintaining this zookeeper session so the zookeeper session is basically opened when the",
    "start": "867069",
    "end": "875769"
  },
  {
    "text": "broker starts talking to the zookeeper cluster and the broker will create this",
    "start": "875769",
    "end": "881379"
  },
  {
    "text": "node that talks about where it is how you contact it and so on so currently",
    "start": "881379",
    "end": "887519"
  },
  {
    "text": "and that node will contain information like the IP addresses you can use the rack and so on",
    "start": "887519",
    "end": "894989"
  },
  {
    "text": "so let's say that a broker actually goes away in that case the zookeeper session",
    "start": "895209",
    "end": "902649"
  },
  {
    "text": "will also go away and this femoral z node will be removed now currently that",
    "start": "902649",
    "end": "909579"
  },
  {
    "text": "will trigger a watch and that will update the controller and then the controller will push out these updates",
    "start": "909579",
    "end": "916769"
  },
  {
    "text": "basically saying what just happened that the broker is offline",
    "start": "916769",
    "end": "922649"
  },
  {
    "text": "so again this seems like a pretty simple system right you have zookeeper here and",
    "start": "922649",
    "end": "928839"
  },
  {
    "text": "basically whenever the session goes away then the controller is notified and the",
    "start": "928839",
    "end": "935110"
  },
  {
    "text": "controller pushes out the updates so let's talk about you know what can go wrong right because that's always the",
    "start": "935110",
    "end": "941499"
  },
  {
    "text": "interesting part here well one thing",
    "start": "941499",
    "end": "947679"
  },
  {
    "start": "944000",
    "end": "1114000"
  },
  {
    "text": "that can go wrong is maybe the nodes not down at all but it's just partitioned off from the cluster in some way and",
    "start": "947679",
    "end": "953290"
  },
  {
    "text": "you've probably heard the term network partition before basically the idea is that you know maybe some nodes can see",
    "start": "953290",
    "end": "960100"
  },
  {
    "text": "each other but some other nodes can't the network partition that we like the",
    "start": "960100",
    "end": "966790"
  },
  {
    "text": "most is the total partition where basically the node goes away and you",
    "start": "966790",
    "end": "971949"
  },
  {
    "text": "could also regard this as being the case when the node crashes or the hardware goes away logically it's out of the",
    "start": "971949",
    "end": "978369"
  },
  {
    "text": "cluster right no one can see it and Kafka handles this pretty well because",
    "start": "978369",
    "end": "983499"
  },
  {
    "text": "the zookeeper session will go away and then the controller will notify everyone about what's going on and all the good",
    "start": "983499",
    "end": "989829"
  },
  {
    "text": "things then there's the case of a just being partitioned from a broker or",
    "start": "989829",
    "end": "995980"
  },
  {
    "text": "several brokers in this case you know there will actually be some potential",
    "start": "995980",
    "end": "1002339"
  },
  {
    "text": "loss of availability because you may not be able to replicate if you have a",
    "start": "1002339",
    "end": "1009119"
  },
  {
    "text": "partition which relies on other on that other broker that will not be replicated but at least should keep consistency in",
    "start": "1009119",
    "end": "1015959"
  },
  {
    "text": "this system and then you know the case which is most interesting for this talk",
    "start": "1015959",
    "end": "1022350"
  },
  {
    "text": "is when your partition from zookeeper well I guess there's two cases that are",
    "start": "1022350",
    "end": "1028339"
  },
  {
    "text": "most interesting for this talk but this is one of them and this case is interesting because your cluster you",
    "start": "1028339",
    "end": "1035150"
  },
  {
    "text": "will not be regarded as part of the cluster and yet you know nodes can maybe",
    "start": "1035150",
    "end": "1040280"
  },
  {
    "text": "continue talking to you which kind of creates a a bit of an uncomfortable",
    "start": "1040280",
    "end": "1046459"
  },
  {
    "text": "situation but regardless of you know",
    "start": "1046459",
    "end": "1051470"
  },
  {
    "text": "there's potentially some weird situations that can happen you'll still basically keep consistency here because",
    "start": "1051470",
    "end": "1056990"
  },
  {
    "text": "the controller will remove you it'll remove leadership of all the partitions",
    "start": "1056990",
    "end": "1062059"
  },
  {
    "text": "that this node has so again similar to case two we lose some availability but",
    "start": "1062059",
    "end": "1067970"
  },
  {
    "text": "we still keep the consistency but then there's a fourth case which actually we don't handle that well and which kipp",
    "start": "1067970",
    "end": "1075350"
  },
  {
    "text": "500 will actually improve a lot as we'll see and that's the case of the controller partition so if you remember",
    "start": "1075350",
    "end": "1082070"
  },
  {
    "text": "from earlier the controller is actually telling us about the changes that are happening the cluster topology so if we",
    "start": "1082070",
    "end": "1088040"
  },
  {
    "text": "can't talk to the controller or if they can rather if the controller can't talk to us we miss out on that stuff but at",
    "start": "1088040",
    "end": "1093980"
  },
  {
    "text": "the same time we're still regarded as part of the cluster because we keep our zookeeper session alive so this is a",
    "start": "1093980",
    "end": "1100940"
  },
  {
    "text": "very specific example of how the separation between the controller and zookeeper actually creates awkward",
    "start": "1100940",
    "end": "1108350"
  },
  {
    "text": "situations because they're two separate systems and so you know keep that in",
    "start": "1108350",
    "end": "1116540"
  },
  {
    "start": "1114000",
    "end": "1297000"
  },
  {
    "text": "mind we'll come back to that later so metadata inconsistency",
    "start": "1116540",
    "end": "1121570"
  },
  {
    "text": "you know logically we have this model where zookeeper is the source of truth zookeeper tells the controller about",
    "start": "1121570",
    "end": "1129040"
  },
  {
    "text": "what's going on and zookeeper sorry the controller then pushes out these updates",
    "start": "1129040",
    "end": "1136280"
  },
  {
    "text": "to everyone else so in a sense you know everybody is getting these updates in an",
    "start": "1136280",
    "end": "1143840"
  },
  {
    "text": "asynchronous way because they happen first in zookeeper the controller becomes aware and then they're pushed down so this is kind of the ideal model",
    "start": "1143840",
    "end": "1151460"
  },
  {
    "text": "of what we would like to happen but in reality though this doesn't always work because there may be cases where",
    "start": "1151460",
    "end": "1158850"
  },
  {
    "text": "again if you have a partition the controller will try to send out the information but it simply won't be received and so in this case you can",
    "start": "1158850",
    "end": "1168870"
  },
  {
    "text": "actually end up with divergence and so as a last resort some sometimes people",
    "start": "1168870",
    "end": "1175440"
  },
  {
    "text": "have to actually force a controller election and there's you know there's a way to do that from within zookeeper so",
    "start": "1175440",
    "end": "1184740"
  },
  {
    "text": "this is actually kind of frustrating right because you would really like the",
    "start": "1184740",
    "end": "1190920"
  },
  {
    "text": "system to always know whether the minute edicts assistant even if there's some weirdness going on at the network level",
    "start": "1190920",
    "end": "1196260"
  },
  {
    "text": "and there's a second reason why this is annoying which is that when a new controller comes up we actually have to",
    "start": "1196260",
    "end": "1202950"
  },
  {
    "text": "load all of the metadata from zookeeper because remember the metadata is not stored on the controller the metadata is",
    "start": "1202950",
    "end": "1208290"
  },
  {
    "text": "stored on zookeeper so when you load this metadata",
    "start": "1208290",
    "end": "1215149"
  },
  {
    "text": "yeah sorry I'll go to the control the performance issue here again when you're",
    "start": "1217250",
    "end": "1224370"
  },
  {
    "text": "loading this minute of the complexity is o n where n is the number of partitions here so as your number of partitions",
    "start": "1224370",
    "end": "1230730"
  },
  {
    "text": "increases this loading time will increase as well and this loading time is actually critically important because",
    "start": "1230730",
    "end": "1238490"
  },
  {
    "text": "while the controller is loading the metadata it can't be doing things like electing a new leader stuff like that so",
    "start": "1238490",
    "end": "1245160"
  },
  {
    "text": "that again can lengthen the period when the system is unavailable",
    "start": "1245160",
    "end": "1250220"
  },
  {
    "text": "I should note in passing that controller election doesn't necessarily create",
    "start": "1250220",
    "end": "1256080"
  },
  {
    "text": "unavailability it only creates unavailability if you needed the controller to do something during that time so it's it's not as bad as it may",
    "start": "1256080",
    "end": "1265350"
  },
  {
    "text": "seem but it still isn't good right in order to scale we actually would like to get rid of this Oh end behavior and",
    "start": "1265350",
    "end": "1274490"
  },
  {
    "text": "another o n thing is pushing all the metadata right so as the number of partitions grows that metadata will",
    "start": "1274490",
    "end": "1280260"
  },
  {
    "text": "increase it really kind of sucks to have to tell someone all the metadata every time you do this election",
    "start": "1280260",
    "end": "1286580"
  },
  {
    "text": "and this complexity here obviously the number of brokers will factor in because",
    "start": "1286580",
    "end": "1292250"
  },
  {
    "text": "we have to send this information to every broker so you know how can we get",
    "start": "1292250",
    "end": "1298700"
  },
  {
    "start": "1297000",
    "end": "1402000"
  },
  {
    "text": "around this problem well I guess I kind of gave it away with this slide title but the solution here is to actually do",
    "start": "1298700",
    "end": "1307610"
  },
  {
    "text": "something more like Kafka's users are doing inside Kafka specifically you know",
    "start": "1307610",
    "end": "1313340"
  },
  {
    "text": "we want to see metadata as an event log so rather than sending out snapshots we'd actually like to treat it as a log",
    "start": "1313340",
    "end": "1320559"
  },
  {
    "text": "so I'll give an example here like if you treatment it it as an event log then",
    "start": "1320559",
    "end": "1326990"
  },
  {
    "text": "each change to it can become a message so for example creating a topic becomes",
    "start": "1326990",
    "end": "1332720"
  },
  {
    "text": "a message deleting a topic and so on and these changes can be propagated to all",
    "start": "1332720",
    "end": "1339049"
  },
  {
    "text": "the brokers in the same way that you know we propagate changes to consumers",
    "start": "1339049",
    "end": "1344090"
  },
  {
    "text": "the nice thing about having this log is that there's a clear ordering of what's",
    "start": "1344090",
    "end": "1349940"
  },
  {
    "text": "happening and we can also send Delta's rather than these snapshots so for",
    "start": "1349940",
    "end": "1355700"
  },
  {
    "text": "example if I read up to 925 then I don't need to be sent everything I just need",
    "start": "1355700",
    "end": "1362299"
  },
  {
    "text": "to be sent the updates that happened after 9:25 it's also easy to sort of",
    "start": "1362299",
    "end": "1367730"
  },
  {
    "text": "quantify what the lag is how far behind are you actually well if you know the offset then you can have that",
    "start": "1367730",
    "end": "1373340"
  },
  {
    "text": "information so you know traditionally",
    "start": "1373340",
    "end": "1379580"
  },
  {
    "text": "Kafka has these consumers they consume in an offset and they're consuming from the brokers in this case we're actually",
    "start": "1379580",
    "end": "1385940"
  },
  {
    "text": "talking about the brokers that are consuming so but what are they consuming from though in this case well it's the",
    "start": "1385940",
    "end": "1394130"
  },
  {
    "text": "controller so the controller will maintain this metadata log internally",
    "start": "1394130",
    "end": "1402340"
  },
  {
    "start": "1402000",
    "end": "1678000"
  },
  {
    "text": "but how do we you know implement this controller log so if you recall back to",
    "start": "1403070",
    "end": "1409100"
  },
  {
    "text": "the earlier slides we were able to implement the the log which stored the",
    "start": "1409100",
    "end": "1414230"
  },
  {
    "text": "consumer information just by using a regular kafka topic it was nothing special well it has some underscores before it",
    "start": "1414230",
    "end": "1420770"
  },
  {
    "text": "but it's not that special but in this case we actually can't do that because",
    "start": "1420770",
    "end": "1427520"
  },
  {
    "text": "right now the controller is involved in",
    "start": "1427520",
    "end": "1432740"
  },
  {
    "text": "choosing the leader for partitions but",
    "start": "1432740",
    "end": "1438280"
  },
  {
    "text": "this doesn't really work we have a circular dependency when we're dealing",
    "start": "1438280",
    "end": "1444650"
  },
  {
    "text": "with metadata so what we really need is a self-managed quorum here where there's",
    "start": "1444650",
    "end": "1449930"
  },
  {
    "text": "not a dependency on an external system to choose the leader the notes should be",
    "start": "1449930",
    "end": "1455300"
  },
  {
    "text": "able to choose their own leader and this is actually where raft comes into the",
    "start": "1455300",
    "end": "1461600"
  },
  {
    "text": "picture so the main property that we",
    "start": "1461600",
    "end": "1466910"
  },
  {
    "text": "really like about raft for this application is the last one right the fact that leader election is by a",
    "start": "1466910",
    "end": "1473360"
  },
  {
    "text": "majority of the nodes rather than being done through an external system aside",
    "start": "1473360",
    "end": "1481280"
  },
  {
    "text": "from that though actually the replication protocols are not too different so raft has terms Kafka has",
    "start": "1481280",
    "end": "1489080"
  },
  {
    "text": "epochs they're pretty similar the",
    "start": "1489080",
    "end": "1494450"
  },
  {
    "text": "push/pull thing is interesting so in in the traditional you know raft context",
    "start": "1494450",
    "end": "1499610"
  },
  {
    "text": "changes are pushed out and conquer their traditionally pulled but it turns out",
    "start": "1499610",
    "end": "1505100"
  },
  {
    "text": "this isn't actually it's not that big of a difference you can actually adapt the",
    "start": "1505100",
    "end": "1511970"
  },
  {
    "text": "system pretty easily so let's talk about the controller",
    "start": "1511970",
    "end": "1520850"
  },
  {
    "text": "quorum a little bit more here so how do we choose the active controller well",
    "start": "1520850",
    "end": "1529279"
  },
  {
    "text": "first of all why do we even have multiple controllers well the biggest reason is we want high availability so",
    "start": "1529279",
    "end": "1536390"
  },
  {
    "text": "we want to actually have the ability to failover when the when the controller fails but secondly by having a quorum we",
    "start": "1536390",
    "end": "1547400"
  },
  {
    "text": "can actually take advantage of some of the properties of Raft here so we can just say that the the leader is actually",
    "start": "1547400",
    "end": "1553700"
  },
  {
    "text": "just the active sorry the active controller is just the leader of the Rev quorum and the active controller is the",
    "start": "1553700",
    "end": "1560299"
  },
  {
    "text": "only one that can write to the log so the number of nodes that we'd like here is basically going to be very similar to",
    "start": "1560299",
    "end": "1566720"
  },
  {
    "text": "zookeeper so we're probably gonna want three nodes maybe five we're probably",
    "start": "1566720",
    "end": "1572210"
  },
  {
    "text": "not gonna want to go to too many nodes in most cases so when I said we weren't",
    "start": "1572210",
    "end": "1579140"
  },
  {
    "text": "gonna build a better zookeeper I kind of lied because we sort of are but but not",
    "start": "1579140",
    "end": "1584659"
  },
  {
    "text": "in the sense that we're creating a general purpose system only in the sense that we want to have a replication system which is vaguely reminiscent of",
    "start": "1584659",
    "end": "1591679"
  },
  {
    "text": "zookeeper and it turns out that this gives us practically instant failover",
    "start": "1591679",
    "end": "1598190"
  },
  {
    "text": "because wrapped election is pretty quick and furthermore the standbys have all",
    "start": "1598190",
    "end": "1604760"
  },
  {
    "text": "the data in memory so they don't have to load it from some other place and another way that's stand by sorry",
    "start": "1604760",
    "end": "1612110"
  },
  {
    "text": "another way that failover is instant isn't the fact that the brokers don't have to refresh everything and this ties",
    "start": "1612110",
    "end": "1618350"
  },
  {
    "text": "in with what we talked about earlier which is that if the broker knows the offset that it read up to it just needs",
    "start": "1618350",
    "end": "1624049"
  },
  {
    "text": "to read the offsets after that it doesn't need to refresh everything in the world and another advantage we can",
    "start": "1624049",
    "end": "1631760"
  },
  {
    "text": "have here is we can actually cache this metadata to disk so when you're starting",
    "start": "1631760",
    "end": "1637640"
  },
  {
    "text": "up your broker maybe you actually don't want to have to refresh everything now I",
    "start": "1637640",
    "end": "1644870"
  },
  {
    "text": "will note in passing that there are cases where you probably do want to refresh",
    "start": "1644870",
    "end": "1650160"
  },
  {
    "text": "maybe your disk was wiped out or maybe you're just so far behind that you don't want to replay all the deltas but we",
    "start": "1650160",
    "end": "1656970"
  },
  {
    "text": "hope that that's the exception rather than the rule so these sort of things",
    "start": "1656970",
    "end": "1662580"
  },
  {
    "text": "are going to become increasingly important as we start adding more zeros to the number of topics the number of",
    "start": "1662580",
    "end": "1667590"
  },
  {
    "text": "partitions the kafka supports and as Kafka starts scaling out it's critical",
    "start": "1667590",
    "end": "1672780"
  },
  {
    "text": "that we get rid of the O n behavior in the system and so let's talk a little",
    "start": "1672780",
    "end": "1680580"
  },
  {
    "start": "1678000",
    "end": "1752000"
  },
  {
    "text": "bit about Broker registration which we discussed earlier in the context of how it works now and of course bravo",
    "start": "1680580",
    "end": "1687060"
  },
  {
    "text": "registration is just the act of building a map on the cluster so in the post skip",
    "start": "1687060",
    "end": "1692610"
  },
  {
    "text": "500 world broker's just send heartbeats to the active controller and the controller can use this to build a map",
    "start": "1692610",
    "end": "1698880"
  },
  {
    "text": "of who's in the cluster and the controller can also use its responses to",
    "start": "1698880",
    "end": "1704880"
  },
  {
    "text": "tell brokers things about what they should do like for example maybe they should be fenced if there's already a",
    "start": "1704880",
    "end": "1712830"
  },
  {
    "text": "broker with that ID and stuff like that",
    "start": "1712830",
    "end": "1716899"
  },
  {
    "text": "fencing is it is an important topic in general so if broker's can't keep up",
    "start": "1718200",
    "end": "1724410"
  },
  {
    "text": "with the metadata updates that are happening they need to be removed from the cluster because otherwise they're",
    "start": "1724410",
    "end": "1729600"
  },
  {
    "text": "gonna be propagating really old information and brokers should also sell fence if they can't talk to the",
    "start": "1729600",
    "end": "1735240"
  },
  {
    "text": "controller so this closes off sort of a lot of the problem scenarios that we've",
    "start": "1735240",
    "end": "1741870"
  },
  {
    "text": "had in the past there's a lot of different types of fencing in Kafka and",
    "start": "1741870",
    "end": "1747510"
  },
  {
    "text": "I couldn't possibly talk about all of them but this is a very important one so",
    "start": "1747510",
    "end": "1752870"
  },
  {
    "start": "1752000",
    "end": "1926000"
  },
  {
    "text": "let's talk a little bit about network partitions we obviously have the same",
    "start": "1752870",
    "end": "1758670"
  },
  {
    "text": "case we had before where something's totally partitioned the behavior hasn't really changed if you can't contact the",
    "start": "1758670",
    "end": "1766230"
  },
  {
    "text": "controller then you will be removed from the cluster as is appropriate the broker",
    "start": "1766230",
    "end": "1773340"
  },
  {
    "text": "partition hasn't really changed either same behavior there but in the case of",
    "start": "1773340",
    "end": "1779250"
  },
  {
    "text": "the controller partition which was a problem before it's actually not now because if you can't talk to the",
    "start": "1779250",
    "end": "1785010"
  },
  {
    "text": "controller then you can't send heartbeats and so therefore you can be removed from the cluster and not be",
    "start": "1785010",
    "end": "1791159"
  },
  {
    "text": "causing problems as sort of a zombie so this is actually an example of where the",
    "start": "1791159",
    "end": "1798299"
  },
  {
    "text": "post kip 500 system eliminates some inconsistent metadata inconsistency and",
    "start": "1798299",
    "end": "1806090"
  },
  {
    "text": "of course we don't have the case we had before where you can't contact zookeeper because we don't have say keeper",
    "start": "1806090",
    "end": "1813890"
  },
  {
    "text": "so let's switch gears a little bit and talk about deployment I think deployment is one of the things",
    "start": "1814549",
    "end": "1820710"
  },
  {
    "text": "that people are most excited about when they think about getting me nervous ooh keeper and I do understand why again not",
    "start": "1820710",
    "end": "1828419"
  },
  {
    "text": "to and that's a really knock zookeeper but it is a separate system it's another configuration file with a different",
    "start": "1828419",
    "end": "1834360"
  },
  {
    "text": "format different stuff in it it's another set of metrics and another set",
    "start": "1834360",
    "end": "1839669"
  },
  {
    "text": "of admin tools that you have to learn and finally and perhaps even worst of",
    "start": "1839669",
    "end": "1844830"
  },
  {
    "text": "all it's another set of security configurations that you have to master to really secure your system and it's",
    "start": "1844830",
    "end": "1853529"
  },
  {
    "text": "it's kind of alarming how many people are running without zookeeper security right now so definitely getting",
    "start": "1853529",
    "end": "1864090"
  },
  {
    "text": "everything under the same security umbrella is really gonna help so when we",
    "start": "1864090",
    "end": "1870899"
  },
  {
    "text": "talk about how controller nodes are going to be deployed there's actually two options that we're going to support one of them is shared controller node",
    "start": "1870899",
    "end": "1878159"
  },
  {
    "text": "where the controller is actually co-located with the broker and this is kind of similar to what we have now",
    "start": "1878159",
    "end": "1883169"
  },
  {
    "text": "where a node that is a controller also has broker duties associated with it the",
    "start": "1883169",
    "end": "1890220"
  },
  {
    "text": "other option that we're gonna support is having separate controller nodes and this also has a precedent in the sense",
    "start": "1890220",
    "end": "1897990"
  },
  {
    "text": "that typically bigger clusters will run separate zookeeper nodes to avoid having",
    "start": "1897990",
    "end": "1904039"
  },
  {
    "text": "to avoid having the performance of the brokers negatively interact with so both modes I think will be useful and",
    "start": "1904039",
    "end": "1911850"
  },
  {
    "text": "I think it will depend on the size of the cluster and maybe you know what kind of hardware you have stuff like that for",
    "start": "1911850",
    "end": "1920130"
  },
  {
    "text": "small clusters colocation I think will be very useful so I've talked about a",
    "start": "1920130",
    "end": "1928560"
  },
  {
    "start": "1926000",
    "end": "2077000"
  },
  {
    "text": "lot of stuff but what's the roadmap for actually doing this stuff pretty important question so there's three",
    "start": "1928560",
    "end": "1938490"
  },
  {
    "text": "basic phases here I think one of them is that we remove the client-side zookeeper dependencies and this is actually almost",
    "start": "1938490",
    "end": "1947790"
  },
  {
    "text": "done so we've been creating api's for the last stragglers who still access",
    "start": "1947790",
    "end": "1953940"
  },
  {
    "text": "zookeeper directly from the client side we haven't yet deprecated direct",
    "start": "1953940",
    "end": "1959400"
  },
  {
    "text": "zookeeper access but that's happening soon the phase after this is to remove",
    "start": "1959400",
    "end": "1967170"
  },
  {
    "text": "the broker sign zookeeper dependencies and in this phase you know we actually",
    "start": "1967170",
    "end": "1972660"
  },
  {
    "text": "will try to centralize the access to zookeeper in the controller and this",
    "start": "1972660",
    "end": "1978210"
  },
  {
    "text": "will involve creating some broker sign api's sort of in a parallel echo of what",
    "start": "1978210",
    "end": "1983430"
  },
  {
    "text": "we did on the client I think this phase should also involve fully removing the",
    "start": "1983430",
    "end": "1991110"
  },
  {
    "text": "zookeeper access for the tools you may ask why we didn't do it in the previous",
    "start": "1991110",
    "end": "1997290"
  },
  {
    "text": "phase and the answer is you know we try to have a pretty generous deprecation policy in Kafka and finally you know the",
    "start": "1997290",
    "end": "2005090"
  },
  {
    "text": "final phase is this controller quorum and basically reworking the controller in terms of it and this includes",
    "start": "2005090",
    "end": "2011300"
  },
  {
    "text": "implementing raft as well",
    "start": "2011300",
    "end": "2014800"
  },
  {
    "text": "so let's say you know once we've implemented all this stuff you're gonna need a way to upgrade to it and this is",
    "start": "2017200",
    "end": "2023890"
  },
  {
    "text": "a problem because right now you probably have tools running around which are directly accessing zookeeper you have",
    "start": "2023890",
    "end": "2029470"
  },
  {
    "text": "brokers running around accessing zookeeper and you have a lot of state in zookeeper so if you were to try to jump",
    "start": "2029470",
    "end": "2037179"
  },
  {
    "text": "directly to a Kip 500 release it wouldn't be really possible to do that through a rolling upgrade and you guys",
    "start": "2037179",
    "end": "2044890"
  },
  {
    "text": "probably already know this but a rolling upgrade is one in which you upgrade to Notes one by one and there's no actual",
    "start": "2044890",
    "end": "2050200"
  },
  {
    "text": "downtime and this is something Kafka's has supported for a long time and it's",
    "start": "2050200",
    "end": "2055300"
  },
  {
    "text": "very important to us so in order to keep that working we have this concept of a",
    "start": "2055300",
    "end": "2060638"
  },
  {
    "text": "bridge release and in the bridge release there's no zookeeper access from the tools and there's also no zookeeper",
    "start": "2060639",
    "end": "2068050"
  },
  {
    "text": "access from the brokers except the controller and the rationale behind this will be a parent in a few slides so",
    "start": "2068050",
    "end": "2077730"
  },
  {
    "start": "2077000",
    "end": "2162000"
  },
  {
    "text": "let's say you're doing this upgrade to a post zookeeper sorry to a post Kip 500",
    "start": "2077730",
    "end": "2083020"
  },
  {
    "text": "release you would start from this bridge release which remember has no zookeeper",
    "start": "2083020",
    "end": "2089858"
  },
  {
    "text": "access from tools and no zookeeper access from brokers other than the controller and the first thing you would",
    "start": "2089859",
    "end": "2097750"
  },
  {
    "text": "do is you would start the new controller nodes for the release you're upgrading to now the quote that quorum will elect",
    "start": "2097750",
    "end": "2105369"
  },
  {
    "text": "a leader and it will claim the leadership in zookeeper so basically the new controller will take the leadership",
    "start": "2105369",
    "end": "2111910"
  },
  {
    "text": "and maintain the leadership throughout the upgrade process now at this point",
    "start": "2111910",
    "end": "2118119"
  },
  {
    "text": "you can start upgrading the nodes one by one just as you usually would and the",
    "start": "2118119",
    "end": "2124720"
  },
  {
    "text": "reason this will work of course is because all of the zookeeper axis is",
    "start": "2124720",
    "end": "2131890"
  },
  {
    "text": "going through the new controller and so basically it's handling all of that",
    "start": "2131890",
    "end": "2138830"
  },
  {
    "text": "this also means that the new software will need to know how to send these old leader in is our messages to the",
    "start": "2138830",
    "end": "2144600"
  },
  {
    "text": "existing nodes and finally of course you know once you've rolled all the brokers you can decommission the zookeeper nodes",
    "start": "2144600",
    "end": "2152240"
  },
  {
    "text": "so in summary it is going to be possible to upgrade to oppose zookeeper release",
    "start": "2152240",
    "end": "2158460"
  },
  {
    "text": "with zero downtime so wrapping up here",
    "start": "2158460",
    "end": "2166820"
  },
  {
    "start": "2162000",
    "end": "2315000"
  },
  {
    "text": "zookeeper has served us pretty well on what we're doing here is not so much replacing zookeeper as switching to a",
    "start": "2166820",
    "end": "2173520"
  },
  {
    "text": "different paradigm a different way of managing metadata we think we much more effective and these changes have been",
    "start": "2173520",
    "end": "2180300"
  },
  {
    "text": "going on for a long while and there are more reasons to do it then you know just",
    "start": "2180300",
    "end": "2188720"
  },
  {
    "text": "scalability or even just deploy ability there's also the improved encapsulation",
    "start": "2188720",
    "end": "2195210"
  },
  {
    "text": "the improved security and the improved ability to upgrade and to freely change",
    "start": "2195210",
    "end": "2200520"
  },
  {
    "text": "our internal formats so those things are all all important here I would say and I",
    "start": "2200520",
    "end": "2210150"
  },
  {
    "text": "think this is a great example of how managing metadata as a log is much more effective because it sort of eliminates",
    "start": "2210150",
    "end": "2216810"
  },
  {
    "text": "this need to send full snapshots and as the size of the system grows and we",
    "start": "2216810",
    "end": "2223740"
  },
  {
    "text": "expect Kafka to you know really grow over time as people start using more and more data more and more topics and so on",
    "start": "2223740",
    "end": "2230270"
  },
  {
    "text": "it becomes more and more important to have the good properties of a log to",
    "start": "2230270",
    "end": "2235560"
  },
  {
    "text": "basically have Delta's rather than sending the full state to have caching to be able to know what the ordering is",
    "start": "2235560",
    "end": "2241620"
  },
  {
    "text": "for metadata changes we also want to",
    "start": "2241620",
    "end": "2246870"
  },
  {
    "text": "improve our availability you know to improve controller failover to improve fencing and basically be more scalable",
    "start": "2246870",
    "end": "2252930"
  },
  {
    "text": "and more robust and along the way you",
    "start": "2252930",
    "end": "2258810"
  },
  {
    "text": "know it's important that this metadata log be self managed and I sort of touched on why that is",
    "start": "2258810",
    "end": "2265580"
  },
  {
    "text": "and why that needs to be the case here and you know finally it'll take a few",
    "start": "2265580",
    "end": "2272570"
  },
  {
    "text": "releases to fully implement Kip 500 so there's gonna be additional Kafka",
    "start": "2272570",
    "end": "2278600"
  },
  {
    "text": "improvement proposals for some of these api's for raft for how we're gonna handle metadata so KITT 500 is kind of",
    "start": "2278600",
    "end": "2285110"
  },
  {
    "text": "like the overall roadmap but there are gonna be more detailed proposals to come",
    "start": "2285110",
    "end": "2290500"
  },
  {
    "text": "it's very important to us and really I mean the whole community is very interested in rolling up grades and we",
    "start": "2290500",
    "end": "2296810"
  },
  {
    "text": "are going to support those so we talked",
    "start": "2296810",
    "end": "2302270"
  },
  {
    "text": "a little bit about how and how that's all going to work and so in conclusion",
    "start": "2302270",
    "end": "2308770"
  },
  {
    "text": "we believe that once this is implemented Kafka will need no keeper so we've got",
    "start": "2308770",
    "end": "2322130"
  },
  {
    "start": "2315000",
    "end": "2632000"
  },
  {
    "text": "about ten minutes for questions Thanks so you've mentioned it with the",
    "start": "2322130",
    "end": "2327350"
  },
  {
    "text": "raft right so is it a external system or is it gonna be implementing that like we're going to implement raft in Kafka",
    "start": "2327350",
    "end": "2334100"
  },
  {
    "text": "itself and the reason for that is you know Kafka is a system for managing logs",
    "start": "2334100",
    "end": "2339500"
  },
  {
    "text": "and so we think raft is kind of like part of our core competency if you're",
    "start": "2339500",
    "end": "2346070"
  },
  {
    "text": "assistant managing logs and you use another system manage your logs it's it's kind of bad alright see and it all the usual",
    "start": "2346070",
    "end": "2353000"
  },
  {
    "text": "software engineering reasons applied [Music]",
    "start": "2353000",
    "end": "2359970"
  },
  {
    "text": "so how do you make sure that raft consensus is the participation of the",
    "start": "2359970",
    "end": "2366850"
  },
  {
    "text": "raft consensus is only done by the brokers which are in sync replicas and",
    "start": "2366850",
    "end": "2372550"
  },
  {
    "text": "not the ones that are already taken out by a controller sorry I didn't quite",
    "start": "2372550",
    "end": "2379450"
  },
  {
    "text": "guess so so you have controller and let's say you have 10 brokers and control is keeping",
    "start": "2379450",
    "end": "2386710"
  },
  {
    "text": "track of the in sync replicas for all of these brokers and one of the brokers never actually received the metadata so",
    "start": "2386710",
    "end": "2392140"
  },
  {
    "text": "controller will possibly remove that from the in sync replicas drop is that correct so here I was yeah",
    "start": "2392140",
    "end": "2401470"
  },
  {
    "text": "in most cases the leader will remove a broker from the in sync replica set and",
    "start": "2401470",
    "end": "2406630"
  },
  {
    "text": "not the controller there are cases where the controller will do it but in general it's normally the leader of the",
    "start": "2406630",
    "end": "2412060"
  },
  {
    "text": "partition okay so in that case suppose the leader actually removes the in single applica a broker from the in sync",
    "start": "2412060",
    "end": "2418119"
  },
  {
    "text": "replica and the leader dies there will be a consensus rough consensus that would elect a new leader I think I think",
    "start": "2418119",
    "end": "2426940"
  },
  {
    "text": "we're talking about two different things here if we're using raft we're not using the ISR right so there's gonna be",
    "start": "2426940",
    "end": "2432880"
  },
  {
    "text": "basically two replication systems one of them the one we have now and the other will be raft oh and Raph does not have well I mean it",
    "start": "2432880",
    "end": "2439750"
  },
  {
    "text": "probably does it does have something similar to the in sync replica set but it's not going to be the in sync replica",
    "start": "2439750",
    "end": "2445180"
  },
  {
    "text": "set you know through Kafka it's not going to have all the same properties exactly guard thank you",
    "start": "2445180",
    "end": "2452460"
  },
  {
    "text": "[Music]",
    "start": "2452460",
    "end": "2457269"
  },
  {
    "text": "way over there really whatever you have",
    "start": "2459910",
    "end": "2473420"
  },
  {
    "text": "only to have cover occurs and something",
    "start": "2473420",
    "end": "2478490"
  },
  {
    "text": "but happens this network and who will be controller so in general if you only",
    "start": "2478490",
    "end": "2487369"
  },
  {
    "text": "have two nodes then you can't really have I mean you can have a raft quorum but it'll be up size either one or two",
    "start": "2487369",
    "end": "2496070"
  },
  {
    "text": "and that's basically not going to provide any redundancy I mean it's",
    "start": "2496070",
    "end": "2504800"
  },
  {
    "text": "example let's say you have for rocket oh yeah rockets and it separates it - and - who",
    "start": "2504800",
    "end": "2514550"
  },
  {
    "text": "will be controller so if there's a network partition and it's 2 & 2 then",
    "start": "2514550",
    "end": "2520550"
  },
  {
    "text": "you can't form a quorum basically right oh I'm sorry I'm so first of all I'm",
    "start": "2520550",
    "end": "2528859"
  },
  {
    "text": "assuming that you have an odd number of controller nodes because that's how you would normally deploy it but even if you",
    "start": "2528859",
    "end": "2534650"
  },
  {
    "text": "did choose to have 4 nodes the rule is gonna be basically you need a majority",
    "start": "2534650",
    "end": "2540680"
  },
  {
    "text": "right so let's say your quorum is size 3 that means you need two nodes for a majority right if your quorum is size 4",
    "start": "2540680",
    "end": "2550250"
  },
  {
    "text": "then you would need 3 I think wait but",
    "start": "2550250",
    "end": "2555290"
  },
  {
    "text": "but the point is at certain at a certain point you have to sacrifice availability right if you can't form a quorum then you must",
    "start": "2555290",
    "end": "2561920"
  },
  {
    "text": "sacrifice availability and this is the same thing we have with a zookeeper right now right let's say you have a zookeeper quorum of size 3 and you lose",
    "start": "2561920",
    "end": "2568430"
  },
  {
    "text": "two nodes they go away then you your quorum is is done and your system is",
    "start": "2568430",
    "end": "2573470"
  },
  {
    "text": "down and so you can bring up at least one more node right",
    "start": "2573470",
    "end": "2578769"
  },
  {
    "text": "yeah so it's not changing basically in that regard are you expecting if you have a pool of",
    "start": "2578950",
    "end": "2585290"
  },
  {
    "text": "10 20 brokers they'll all be participant potential controllers or you have to",
    "start": "2585290",
    "end": "2590930"
  },
  {
    "text": "explicitly set these three these six could be controllers well that's a good question Zook it out and say hey v that",
    "start": "2590930",
    "end": "2597890"
  },
  {
    "text": "sounds like a good number and choose yes so that's a good question and the answer is the second one so there's only going",
    "start": "2597890",
    "end": "2604520"
  },
  {
    "text": "to be certain notes that you would nominate his potential controllers which again is it's kind of similar to how we",
    "start": "2604520",
    "end": "2610430"
  },
  {
    "text": "do zookeeper now right I mean you're not going to run a zookeeper node alongside every broker in a very large cluster you",
    "start": "2610430",
    "end": "2616580"
  },
  {
    "text": "wouldn't have a controller note on every broker in a post kit 500 cluster but",
    "start": "2616580",
    "end": "2622100"
  },
  {
    "text": "good question anyone else all right Thank You Colin",
    "start": "2622100",
    "end": "2627800"
  },
  {
    "text": "all right thanks",
    "start": "2627800",
    "end": "2631180"
  }
]