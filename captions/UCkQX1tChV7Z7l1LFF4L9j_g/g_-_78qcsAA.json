[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11080"
  },
  {
    "text": "my name's stevenh Chen um I work for oracles a Java evangelist uh you can follow me on Twitter at ston Java and my",
    "start": "11080",
    "end": "18760"
  },
  {
    "text": "name is Andrew Phillips um so I I work for a company that's a met zbl do deployment automation but I spend too",
    "start": "18760",
    "end": "25640"
  },
  {
    "text": "many evenings and early mornings working on jclouds which is an open source java Cloud",
    "start": "25640",
    "end": "31160"
  },
  {
    "text": "Library and we're going to we're going to show you guys the combination of some",
    "start": "31160",
    "end": "36360"
  },
  {
    "text": "technologies you might not traditionally think as being a",
    "start": "36360",
    "end": "41520"
  },
  {
    "text": "match Java FX technology which is a rich client user interface",
    "start": "41520",
    "end": "47160"
  },
  {
    "text": "technology Scala which is a jvm language that um",
    "start": "47160",
    "end": "52879"
  },
  {
    "text": "many people love some are proficient in very few are proficient in I'm not",
    "start": "52879",
    "end": "60359"
  },
  {
    "text": "proficient in and um the cloud which is a lot of hot air literally so what do we",
    "start": "60359",
    "end": "67360"
  },
  {
    "text": "get we take Java effects Scala and hot air obviously we",
    "start": "67360",
    "end": "73920"
  },
  {
    "text": "get we we need a sound effect for this like that thank you",
    "start": "73920",
    "end": "80720"
  },
  {
    "text": "Andrew so we we don't really get that that's not light but maybe we get a cool conference app maybe we'll see we'll see",
    "start": "80720",
    "end": "88840"
  },
  {
    "text": "if we can make something come together together all right so the way this talk is arranged is we're going to introduce",
    "start": "88840",
    "end": "94920"
  },
  {
    "text": "these different Technologies um show you guys hopefully something new you don't know about each",
    "start": "94920",
    "end": "100200"
  },
  {
    "text": "of them and create an application with an architecture that looks kind of like this so we'll have a",
    "start": "100200",
    "end": "107000"
  },
  {
    "text": "cloud um we're going to use Amazon ec2 or Amazon S3 in this case their storage",
    "start": "107000",
    "end": "112520"
  },
  {
    "text": "engine um we're actually going to have a cached database file in the cloud it's",
    "start": "112520",
    "end": "117960"
  },
  {
    "text": "not a cloud DB it's just a cached database file we're going to use jclouds which is",
    "start": "117960",
    "end": "123640"
  },
  {
    "text": "a Java API for accessing different clouds it's it's a kind of a cloud",
    "start": "123640",
    "end": "128720"
  },
  {
    "text": "agnostic what should we say about J Cloud I don't know I I like to think of it as the kind of jdbc for cloud stuff",
    "start": "128720",
    "end": "135239"
  },
  {
    "text": "because the idea is to abstract away the individual things of of individual Cloud",
    "start": "135239",
    "end": "140360"
  },
  {
    "text": "providers and to give you portability but we'll talk about that and jclouds works really good from scholar so this",
    "start": "140360",
    "end": "145840"
  },
  {
    "text": "entire application end to ends will all be written in the scholar language um for the application we're going to",
    "start": "145840",
    "end": "152319"
  },
  {
    "text": "have Derby which or Java DB which is an embedded you can run it Network or",
    "start": "152319",
    "end": "157360"
  },
  {
    "text": "embedded mode we're using it as an embedded database very lightweight data store which is going to be inside of our",
    "start": "157360",
    "end": "165560"
  },
  {
    "text": "Java effects application and we're using Scala effects which is a Scala finding for Java effects so it's all end to end",
    "start": "165560",
    "end": "172680"
  },
  {
    "text": "Scala circumflex is the um one of the many omm Frameworks object relational",
    "start": "172680",
    "end": "178360"
  },
  {
    "text": "mapping Frameworks for Scala see the good thing is about a new language like Scala you get to reinvent",
    "start": "178360",
    "end": "184440"
  },
  {
    "text": "every possible wheel that there is including om and everything else and then you have like a million things to",
    "start": "184440",
    "end": "190480"
  },
  {
    "text": "choose from like you did at the beginning of java and eventually that'll all crystallize out but you know yeah",
    "start": "190480",
    "end": "196159"
  },
  {
    "text": "the wild west is a fun place to be all right so why when does this",
    "start": "196159",
    "end": "201560"
  },
  {
    "text": "architecture actually make sense so we're we're kind of for this application we we um say that this is an efficient",
    "start": "201560",
    "end": "208680"
  },
  {
    "text": "architecture and this Mak sense but the sort of cloud storage of a cach DB",
    "start": "208680",
    "end": "214239"
  },
  {
    "text": "doesn't always make sense so when does it make sense if your data is mostly",
    "start": "214239",
    "end": "219959"
  },
  {
    "text": "readon so in the case of the conference application the Assumption here is we have a large set of data it doesn't",
    "start": "219959",
    "end": "225760"
  },
  {
    "text": "update all that frequently maybe a couple times a day at most and um we don't really have a lot of updates going",
    "start": "225760",
    "end": "232200"
  },
  {
    "text": "back to the server if we had a bunch of updates we need to synchronize between different people we'd probably want to take a a different approach or augment",
    "start": "232200",
    "end": "238519"
  },
  {
    "text": "this with a rest interface in addition and also this approach since",
    "start": "238519",
    "end": "243920"
  },
  {
    "text": "you're actually moving all of the data to the client it assumes small to medium",
    "start": "243920",
    "end": "249079"
  },
  {
    "text": "data set size now about 10K records is where this you",
    "start": "249079",
    "end": "255799"
  },
  {
    "text": "know starts to break down if you have a a big data set you're not going to want to take an approach like this um but",
    "start": "255799",
    "end": "261919"
  },
  {
    "text": "this is not the total DB size so for example one of the applications I worked on recently was for a huge data catalog",
    "start": "261919",
    "end": "270720"
  },
  {
    "text": "um retailers can see the whole data catalog so they're obviously not going to to want to download it bit by bit",
    "start": "270720",
    "end": "276720"
  },
  {
    "text": "like this vendors could only see their data so it would be quite reasonable for",
    "start": "276720",
    "end": "282759"
  },
  {
    "text": "them to actually have a full view of their data cached locally and operate on that and then synchronize it with the cloud",
    "start": "282759",
    "end": "289880"
  },
  {
    "text": "periodically um so our conference app has 3K records and these are relatively large Records full session titles",
    "start": "289880",
    "end": "296759"
  },
  {
    "text": "speaker bios Etc and it it compresses down to 330 kilobytes for a full",
    "start": "296759",
    "end": "302720"
  },
  {
    "text": "database just standard zip compression you could probably get better if you used um a better performing zip",
    "start": "302720",
    "end": "309280"
  },
  {
    "text": "algorithm and let's remember not too long ago that was the entire amount of memory that You' had available on all",
    "start": "309280",
    "end": "314759"
  },
  {
    "text": "your portable devices so lucky we're in the the future yeah yeah we're talking about modern yeah no",
    "start": "314759",
    "end": "321120"
  },
  {
    "text": "I know modern it's was like out of memory more than 72k use anyway yeah",
    "start": "321120",
    "end": "326319"
  },
  {
    "text": "modern modern phones I my my first computer was less powerful than this",
    "start": "326319",
    "end": "332919"
  },
  {
    "text": "so okay so that's when it makes sense now let's talk about why you'd want to do this um so some of the advantages of",
    "start": "332919",
    "end": "339680"
  },
  {
    "text": "this are offline operation once you've sucked down your cash DB either as part",
    "start": "339680",
    "end": "345479"
  },
  {
    "text": "of your application or kind of an initial Cloud poll you can operate completely offline do filters queries um",
    "start": "345479",
    "end": "352919"
  },
  {
    "text": "anything you want to against the data set and it's fast and local very responsive since all your DB queries are",
    "start": "352919",
    "end": "359199"
  },
  {
    "text": "local you you don't actually have to wait for any server hits on page reloads or refreshes or paging through data and",
    "start": "359199",
    "end": "366479"
  },
  {
    "text": "you get extremely high availability and scalability basically for",
    "start": "366479",
    "end": "371560"
  },
  {
    "text": "free Amazon S3 um has is designed for",
    "start": "371560",
    "end": "377520"
  },
  {
    "text": "about was that 49 99.99% availability which is pretty good",
    "start": "377520",
    "end": "384120"
  },
  {
    "text": "you'd have to actually spend good money if you wanted to get that level of reliability in your own archet Ure and",
    "start": "384120",
    "end": "390880"
  },
  {
    "text": "it easily scales up to hundreds of requests per second with no effort if you're careful about how you",
    "start": "390880",
    "end": "397759"
  },
  {
    "text": "do bit hasing in S3 you can scale it up to millions of requests per",
    "start": "397759",
    "end": "404080"
  },
  {
    "text": "second anyone anyone curious about how bit hasing Works in S3 okay let me this slight",
    "start": "404080",
    "end": "412000"
  },
  {
    "text": "digression so the way the way S3 is composed is it it has a bunch of storage",
    "start": "412000",
    "end": "417960"
  },
  {
    "text": "servers and when you initially create a new bucket in there it it gets allocated on usually one of their storage",
    "start": "417960",
    "end": "425160"
  },
  {
    "text": "servers and each storage server can easily handle you know hundreds of requests per second it's not going to",
    "start": "425160",
    "end": "431720"
  },
  {
    "text": "give any hiccups but then when you start going like a thousand requests per second on a single server your",
    "start": "431720",
    "end": "437199"
  },
  {
    "text": "performance is limited although they they have thousands of these storage servers so you obviously don't want all your data sitting on one server so if",
    "start": "437199",
    "end": "445240"
  },
  {
    "text": "you're careful with your file names for how you store things in Amazon",
    "start": "445240",
    "end": "450360"
  },
  {
    "text": "um basically their hashing algorithm Works off the name of the file so if you",
    "start": "450360",
    "end": "456759"
  },
  {
    "text": "name your files um in random spots in the ask range first character second",
    "start": "456759",
    "end": "463199"
  },
  {
    "text": "character third character um you will get your data partitioned across",
    "start": "463199",
    "end": "468560"
  },
  {
    "text": "multiple servers giving you much much higher throughput than you could get on a single Amazon S3 instance that would",
    "start": "468560",
    "end": "474280"
  },
  {
    "text": "mean name of the blobs I take it yeah the BLS so anyway little bit of",
    "start": "474280",
    "end": "479960"
  },
  {
    "text": "but um with proper use of S3 you can scale up to even better than hundreds of requests per second just a curiosity",
    "start": "479960",
    "end": "486280"
  },
  {
    "text": "thing from my side is that something they guarantee to support over time or is this just using abusing an implementation",
    "start": "486280",
    "end": "492800"
  },
  {
    "text": "fact that we have no well it's it's it's been documented by the S3 folks originally it was part of their",
    "start": "492800",
    "end": "498120"
  },
  {
    "text": "professional support program but they've actually talked about it in public and",
    "start": "498120",
    "end": "504919"
  },
  {
    "text": "um the people aurally reverse engineered it but at the point which Amazon",
    "start": "504919",
    "end": "510080"
  },
  {
    "text": "announced and started talking about it people essentially build applications against S3 this way now okay any a little bit of trivy about",
    "start": "510080",
    "end": "517000"
  },
  {
    "text": "S3 so the last advantage and um you know",
    "start": "517000",
    "end": "522039"
  },
  {
    "start": "520000",
    "end": "688000"
  },
  {
    "text": "some of us some of us have budgets is cost how how cheap is it to",
    "start": "522039",
    "end": "527360"
  },
  {
    "text": "build applications like this so 3,000 users with our 3 330 kilobyte um data",
    "start": "527360",
    "end": "534680"
  },
  {
    "text": "model well it's free up to 1 Gigabyte in Amazon 1 G gab of outbound traffic per",
    "start": "534680",
    "end": "540640"
  },
  {
    "text": "month and you're you're in the free tier so that's that's great we like free so 10,000 users would cost you 28",
    "start": "540640",
    "end": "549959"
  },
  {
    "text": "cents a month which is about a pack of",
    "start": "549959",
    "end": "555079"
  },
  {
    "text": "gum so if you if you have a moderate traffic application you know without",
    "start": "555079",
    "end": "560360"
  },
  {
    "text": "like think about a conference if we put the conference application out for like Jacks we're probably not going to exceed",
    "start": "560360",
    "end": "567519"
  },
  {
    "text": "10,000 I don't think so but we're still short one pack of",
    "start": "567519",
    "end": "573760"
  },
  {
    "text": "G um now you can scale up to 100,000 users how many people have applications web applications which serve a 100,000",
    "start": "573760",
    "end": "580120"
  },
  {
    "text": "users here okay so you probably but for your company yeah okay",
    "start": "580120",
    "end": "586920"
  },
  {
    "text": "I mean like 100,000 you're actually getting to real corporate business applications",
    "start": "586920",
    "end": "592560"
  },
  {
    "text": "and so a cup of coffee do you think how much does your company spend on serving costs about a cup of coffee",
    "start": "592560",
    "end": "600240"
  },
  {
    "text": "how much does your company spend on coffee probably probably a lot probably",
    "start": "600240",
    "end": "605480"
  },
  {
    "text": "a lot especially if it's a nice brand name cof good perks okay and then you know a million",
    "start": "605480",
    "end": "612000"
  },
  {
    "text": "users which um you're getting to the insanely scalable size your you know copy of a",
    "start": "612000",
    "end": "618279"
  },
  {
    "text": "video game I I'll I'll play any of you and take you down in Starcraft if you want",
    "start": "618279",
    "end": "625079"
  },
  {
    "text": "that's about the that's about the only video game which I actually um am somewhat confident of",
    "start": "625079",
    "end": "631320"
  },
  {
    "text": "so I mean this is this is assuming you know you have the 330 kilobyte data size",
    "start": "631399",
    "end": "636600"
  },
  {
    "text": "for about the size conference app if you have a larger application your scalability will be different based upon",
    "start": "636600",
    "end": "642360"
  },
  {
    "text": "the size of the data you're storing the cloud um and also depending upon the",
    "start": "642360",
    "end": "647720"
  },
  {
    "text": "frequency of updates um every time you push an additional update app people are going to download more data so you'd",
    "start": "647720",
    "end": "653160"
  },
  {
    "text": "have more S3 costs but you can see that this is relatively cheap backend for",
    "start": "653160",
    "end": "658760"
  },
  {
    "text": "application compared to setting up any moderately sized compute resource for actually doing um a rest interface or",
    "start": "658760",
    "end": "666200"
  },
  {
    "text": "some sort of processing you'd pay you know an order several orders of magnitude more and serving costs for so",
    "start": "666200",
    "end": "672800"
  },
  {
    "text": "basically your users pay for the Ser the computing power by buying the the phone that yeah we're this is this is the",
    "start": "672800",
    "end": "678279"
  },
  {
    "text": "green architecture yes we're saving on Computing and server costs all right so",
    "start": "678279",
    "end": "684279"
  },
  {
    "text": "let's let's show you guys kind of the different components of the application so we've got from the from the big",
    "start": "684279",
    "end": "689839"
  },
  {
    "start": "688000",
    "end": "731000"
  },
  {
    "text": "architecture you got the user interface so all I think this is this is all me",
    "start": "689839",
    "end": "695600"
  },
  {
    "text": "and we'll talk a little bit about the database how we hooked up the RM and",
    "start": "695600",
    "end": "700920"
  },
  {
    "text": "then Cloud I'll talk a bit about the cloud and then we'll show you some of the code the code the code the whole",
    "start": "700920",
    "end": "706279"
  },
  {
    "text": "code for this application I I think I counted it over the weekend and it was under 200 lines of",
    "start": "706279",
    "end": "713720"
  },
  {
    "text": "code so you know simple application but it gets you gives the idea that using Technologies you know Scala um Java",
    "start": "713720",
    "end": "721440"
  },
  {
    "text": "effect and jclouds you can write real applications with very very little code",
    "start": "721440",
    "end": "726760"
  },
  {
    "text": "it makes your um code efficient and maintainable all right so Java effects",
    "start": "726760",
    "end": "733240"
  },
  {
    "start": "731000",
    "end": "845000"
  },
  {
    "text": "20 this is the what is Java effect 20 slide um Rich client framework",
    "start": "733240",
    "end": "740639"
  },
  {
    "text": "crossplatform animation video integrate with web HTML",
    "start": "740639",
    "end": "746399"
  },
  {
    "text": "Technologies 2D acceleration and some 3D Graphics it uses the prism pipeline",
    "start": "746399",
    "end": "752440"
  },
  {
    "text": "which gives you excellent graphics performance on your client and your favorite IDE net beans e clipse intell",
    "start": "752440",
    "end": "760360"
  },
  {
    "text": "and I should also comment on why um why Java effects in this particular use",
    "start": "760360",
    "end": "765959"
  },
  {
    "text": "case so one of the one of the attributes of of a cloud computing model is",
    "start": "765959",
    "end": "772440"
  },
  {
    "text": "typically um what you'll do is you'll pay by usage so you'll you know you're either",
    "start": "772440",
    "end": "779399"
  },
  {
    "text": "pushing out in this case storage or in other cases your Computing costs to the cloud and you're paying by how much you",
    "start": "779399",
    "end": "785120"
  },
  {
    "text": "actually utilize those Services memory um storage bandwidth and",
    "start": "785120",
    "end": "790440"
  },
  {
    "text": "CPU with Java effects this is a client stack all of the processing happens on",
    "start": "790440",
    "end": "796440"
  },
  {
    "text": "the client you're doing a lot of the you you can code Java and a lot of the",
    "start": "796440",
    "end": "801639"
  },
  {
    "text": "business logic directly in the client you can use local databases local storage for caching results and doing",
    "start": "801639",
    "end": "808399"
  },
  {
    "text": "things on the client so what it does is it pushes a lot of those costs down to the devices desktop or mobile devices and",
    "start": "808399",
    "end": "816760"
  },
  {
    "text": "you're taking your costs away whatever Co whatever um processing and network",
    "start": "816760",
    "end": "822320"
  },
  {
    "text": "costs you can push down to the client reduces your cost of ownership as a um Cloud user yeah and if you don't want to",
    "start": "822320",
    "end": "829040"
  },
  {
    "text": "tell your customers that you're just being cheap you can tell them you're being green yeah because instead of warming up the environment you're only",
    "start": "829040",
    "end": "834519"
  },
  {
    "text": "warming up the customer's pocket which you know they're going to that anyway because they're going to",
    "start": "834519",
    "end": "840000"
  },
  {
    "text": "play games on their phone so they might as well put their processing power to good use rather have Angry Birds or a",
    "start": "840000",
    "end": "846120"
  },
  {
    "start": "845000",
    "end": "1078000"
  },
  {
    "text": "real I think they'd probably prefer Angry Bird so let's not go into that but for some use cases it's nice to have a real app running on your phone anyway",
    "start": "846120",
    "end": "853399"
  },
  {
    "text": "okay and this is the Y Scala slide so what what's Scala first of all it's 2001",
    "start": "853399",
    "end": "859000"
  },
  {
    "text": "sted in 2001 by Marty nki it's both a functional and an objectoriented language it compiles to",
    "start": "859000",
    "end": "866160"
  },
  {
    "text": "Pure by codes and in this case we're using it as a substitute for Java you could write the same application in Java",
    "start": "866160",
    "end": "873519"
  },
  {
    "text": "it wouldn't be 200 lines it would be more like a thousand plus but you could do exactly the same",
    "start": "873519",
    "end": "879800"
  },
  {
    "text": "thing with um you know straight Java code Java Technologies um we're using",
    "start": "879800",
    "end": "884880"
  },
  {
    "text": "scal here as an accelerator to make the code um shorter easier more",
    "start": "884880",
    "end": "890160"
  },
  {
    "text": "maintainable note that it is possible to have a pure object oriented and also a functional language at the same time I",
    "start": "890160",
    "end": "895639"
  },
  {
    "text": "always love those people it yeah yeah no it's it's it's it it those are very",
    "start": "895639",
    "end": "900920"
  },
  {
    "text": "historically very different language domains I remember when I when I started",
    "start": "900920",
    "end": "906680"
  },
  {
    "text": "on little segue when I when I first became a Java developer I was actually I",
    "start": "906680",
    "end": "912160"
  },
  {
    "text": "was at carig Mill and I was working on um a project called the gidan project",
    "start": "912160",
    "end": "917560"
  },
  {
    "text": "and we were building we were building a interpreter",
    "start": "917560",
    "end": "923959"
  },
  {
    "text": "and compiler for an apple language called Darwin any anyone heard of that yep okay",
    "start": "923959",
    "end": "930600"
  },
  {
    "text": "some people know about that which was it was very cool stuff and it was close to Java syntactically actually on that",
    "start": "930600",
    "end": "937600"
  },
  {
    "text": "project we were focusing on tooling so we decided writing a whole language just",
    "start": "937600",
    "end": "943199"
  },
  {
    "text": "to get tooling working wasn't worth it so we switched to Java that's how I ended up on Java but at the same time I was taking ml classes ml is a functional",
    "start": "943199",
    "end": "950360"
  },
  {
    "text": "programming language and the guys on my project they um you know these guys were",
    "start": "950360",
    "end": "955839"
  },
  {
    "text": "were um Darwin lispers or Darwin um Java they just laughed at me they're that",
    "start": "955839",
    "end": "961519"
  },
  {
    "text": "that functional programming stuff that'll never completely impractical it's not going to catch on you can't",
    "start": "961519",
    "end": "966639"
  },
  {
    "text": "write real apps with it blah blah blah and you know look at Scala object oriented and functional on",
    "start": "966639",
    "end": "975120"
  },
  {
    "text": "top of java any plus minus believing the various flame threads that are out there",
    "start": "975120",
    "end": "981240"
  },
  {
    "text": "claiming that you can't do that but you know that's let's leave it okay so some of the reasons why we like Scala static",
    "start": "981240",
    "end": "987040"
  },
  {
    "text": "type checking so some of us some of us really like that the Java compiler it tells us when we make mistakes because",
    "start": "987040",
    "end": "993240"
  },
  {
    "text": "we're not very good programmers and you know schols gr it it",
    "start": "993240",
    "end": "998800"
  },
  {
    "text": "it tells us like those puzzlers would actually fail most of them most of them some of them the reason the puzzles",
    "start": "998800",
    "end": "1005399"
  },
  {
    "text": "exist because you know um closures we we don't have to wait till um was it 2032 something like",
    "start": "1005399",
    "end": "1013360"
  },
  {
    "text": "that Java Java n or whatever I think it is Java eight now but yeah okay and declarative so you can",
    "start": "1013360",
    "end": "1020600"
  },
  {
    "text": "express the UI by describing what the UI should look like this particular applies to the way scal effect applications look",
    "start": "1020600",
    "end": "1026760"
  },
  {
    "text": "and then lots of cool language features implicit conversions give you kind of this Dynamic Behavior like you would in",
    "start": "1026760",
    "end": "1032640"
  },
  {
    "text": "um a scripting language operator overloading lets you kind of redefine user interfaces create dsls and delayed",
    "start": "1032640",
    "end": "1039438"
  },
  {
    "text": "and that specialized are some cool little language features which I use in scal",
    "start": "1039439",
    "end": "1045038"
  },
  {
    "text": "effects so I I I I punted on this yesterday this is my last um borrowed",
    "start": "1045039",
    "end": "1050160"
  },
  {
    "text": "slide from yesterday's deck is anyone curious how these work since I mentioned it twice or you you don't",
    "start": "1050160",
    "end": "1057760"
  },
  {
    "text": "care implicit conversions by the way is that one of the things I like about the Ora in general is that of course since",
    "start": "1058000",
    "end": "1064679"
  },
  {
    "text": "it's a jvm language ultimately you can do all this stuff a lot of this stuff in Java Let's do let's do that one I think",
    "start": "1064679",
    "end": "1071400"
  },
  {
    "text": "that's more interesting so do you guys know how implicit conversions work in scholar what they are",
    "start": "1071400",
    "end": "1077640"
  },
  {
    "text": "anybody yes you can put your hands up you don't get chot there's no sniper sitting in the",
    "start": "1077640",
    "end": "1083080"
  },
  {
    "start": "1078000",
    "end": "1243000"
  },
  {
    "text": "back how about you have you ever seen what implicit conversions look like okay so so let me try explaining this you",
    "start": "1083080",
    "end": "1090039"
  },
  {
    "text": "help me yeah because it it hurts your brain a little bit to think about this so the problem one of the problems that",
    "start": "1090039",
    "end": "1095880"
  },
  {
    "text": "Clos conversion solves is like in a language like groovy you just you just",
    "start": "1095880",
    "end": "1100960"
  },
  {
    "text": "add methods like you could take the string class and you could just add a method what's a good example of a string",
    "start": "1100960",
    "end": "1108520"
  },
  {
    "text": "of of a string like a string a string method we could add oh I know elri rrim",
    "start": "1108520",
    "end": "1114080"
  },
  {
    "text": "rrim find last but one whatever so let's say we wanted to add a r trim to string",
    "start": "1114080",
    "end": "1119919"
  },
  {
    "text": "method in groovy you just go I'm G to add a method in and that that is",
    "start": "1119919",
    "end": "1125360"
  },
  {
    "text": "completely not type safe because how does your compiler know that these methods are being added into arbitrary",
    "start": "1125360",
    "end": "1131440"
  },
  {
    "text": "points in the program right so scola's approach to this is um",
    "start": "1131440",
    "end": "1139760"
  },
  {
    "text": "what you do is you create a class called enhan string and enhan string extends",
    "start": "1139760",
    "end": "1146760"
  },
  {
    "text": "string actually it doesn't have to doesn't have to Str so but enhan string has a method on it called",
    "start": "1146760",
    "end": "1154720"
  },
  {
    "text": "RRM and that will you know take a string trim off the right",
    "start": "1154760",
    "end": "1161120"
  },
  {
    "text": "side and the enhanced string accepts a string in the Constructor usually so it",
    "start": "1161120",
    "end": "1168159"
  },
  {
    "text": "takes a string and it does kind of a delicate so what the implicit conversion will do is you create an implicit",
    "start": "1168159",
    "end": "1173880"
  },
  {
    "text": "conversion from a string to an enhanced string wherever you call string. arrim it will create a new instance of an",
    "start": "1173880",
    "end": "1180200"
  },
  {
    "text": "enhanced string call the arrim method on it and then return the result of that",
    "start": "1180200",
    "end": "1185240"
  },
  {
    "text": "all without you actually having to write the code all you do is string. arrm and it magically like cones up a new",
    "start": "1185240",
    "end": "1191919"
  },
  {
    "text": "enhanced string object calls the method and returns it so I mean when you in Java I've seen this pattern far too many",
    "start": "1191919",
    "end": "1197840"
  },
  {
    "text": "times is I don't know you get something back from the commons collection library and you need to convert it to something",
    "start": "1197840",
    "end": "1203039"
  },
  {
    "text": "else so all over the place there's a two some no two my string to my collection",
    "start": "1203039",
    "end": "1208320"
  },
  {
    "text": "to whatever in front of the thing that you actually want and that just clutters up your code and essentially",
    "start": "1208320",
    "end": "1213880"
  },
  {
    "text": "implicit well functions in this case are just a way of getting the compiler to do this thing for you if you have something",
    "start": "1213880",
    "end": "1221039"
  },
  {
    "text": "and it doesn't quite fit it looks for a way to basically apply a function to the thing to convert it to what you would",
    "start": "1221039",
    "end": "1227280"
  },
  {
    "text": "need and you don't see so it allows for a lot of glue stuff without cluttering up your",
    "start": "1227280",
    "end": "1235480"
  },
  {
    "text": "code okay so anyway type safe extensions all right so let's look at some",
    "start": "1235480",
    "end": "1241200"
  },
  {
    "text": "code you guys you guys can all read that right yeah we all software developers so we should be used to reading small",
    "start": "1241200",
    "end": "1246919"
  },
  {
    "start": "1243000",
    "end": "1548000"
  },
  {
    "text": "things on the screen all right so um on the left is our Java application um see",
    "start": "1246919",
    "end": "1253480"
  },
  {
    "text": "we actually we actually do have a Java version of su code on the right is the scholar version this is the job this is",
    "start": "1253480",
    "end": "1259640"
  },
  {
    "text": "the UI code and we um we actually the Scola version because because you know I",
    "start": "1259640",
    "end": "1264840"
  },
  {
    "text": "use this funky brace convention where I put a brace on every single line I think I'm I'm I'm breaking some Scala well you",
    "start": "1264840",
    "end": "1270480"
  },
  {
    "text": "know breaking I mean Scala goes back to some some root it's not very Scala likee taking lots of braces out but um you",
    "start": "1270480",
    "end": "1278320"
  },
  {
    "text": "know a lot less characters yeah so almost half 1,200 semicolons",
    "start": "1278320",
    "end": "1284400"
  },
  {
    "text": "omitted like and and um let's take a look at",
    "start": "1284400",
    "end": "1289600"
  },
  {
    "text": "what the some of the Scola code looks like so this is the application um for those of you who've done scol effects",
    "start": "1289600",
    "end": "1295720"
  },
  {
    "text": "applications this will look pretty familiar you extend jfx app which is the base scal effects class um I'm creating",
    "start": "1295720",
    "end": "1303080"
  },
  {
    "text": "an instance of a model um we'll talk about the model in a sec but here is the stage that's your window withd height um",
    "start": "1303080",
    "end": "1310559"
  },
  {
    "text": "create a scene I'm using a stack pane for the top level and then setting a fill this you know very basic stuff and",
    "start": "1310559",
    "end": "1316799"
  },
  {
    "text": "you notice the nice declarative kind of nested structure it kind of looks like",
    "start": "1316799",
    "end": "1321880"
  },
  {
    "text": "the user interface we're creating with the stage the scene is in the stage and then we're going to add additional",
    "start": "1321880",
    "end": "1327520"
  },
  {
    "text": "elements for the foreground the background as children of the of the scene loading an image is really",
    "start": "1327520",
    "end": "1335480"
  },
  {
    "text": "easy here's the Java 1 logo popped off of a resource file the image class is a reusable image",
    "start": "1335480",
    "end": "1345080"
  },
  {
    "text": "object the image view is what you actually put in the scene graph to to display it and the nice thing here is um",
    "start": "1345080",
    "end": "1351919"
  },
  {
    "text": "having that separation you could have one image in multiple places and it would only be loaded once you could crop",
    "start": "1351919",
    "end": "1357279"
  },
  {
    "text": "it resize it do different things with the images um via the image view class",
    "start": "1357279",
    "end": "1362360"
  },
  {
    "text": "but then have a single image object backing all of",
    "start": "1362360",
    "end": "1366640"
  },
  {
    "text": "those creating buttons so we we're going to have some buttons in the I think I saw some buttons in our picture yeah I",
    "start": "1368559",
    "end": "1374720"
  },
  {
    "text": "remember there there were one or two there um and that um you can see here we have an action",
    "start": "1374720",
    "end": "1380919"
  },
  {
    "text": "Handler on the button which is using closures so we talked about Scala closures so rather than having an inner",
    "start": "1380919",
    "end": "1387039"
  },
  {
    "text": "class and a lot of code we can simply have a small closure that on action is going to execute this",
    "start": "1387039",
    "end": "1393480"
  },
  {
    "text": "code model. filter and then pass in the item from",
    "start": "1393480",
    "end": "1399919"
  },
  {
    "text": "the dropdown and the text and then a clear which clears the filter for us it'll flush out the value in the text",
    "start": "1399919",
    "end": "1406520"
  },
  {
    "text": "field and then clear the filter using the model so not a lot of code this is actually",
    "start": "1406520",
    "end": "1412840"
  },
  {
    "text": "the slides are actually like most of the code in the application we'll flip through it quickly when we show the",
    "start": "1412840",
    "end": "1418919"
  },
  {
    "text": "demo all right and last bit of code for now is Scala table conversion so",
    "start": "1418919",
    "end": "1426000"
  },
  {
    "text": "this code didn't exist before but the actual the table implementation in scal",
    "start": "1426000",
    "end": "1431440"
  },
  {
    "text": "effects didn't exist on Saturday so you guys are seeing um at",
    "start": "1431440",
    "end": "1438440"
  },
  {
    "text": "the Jacks conference seeing the first implementation of a um table table view",
    "start": "1438440",
    "end": "1444799"
  },
  {
    "text": "in scal effects um you saw it here first people yeah this is this is a Quee to",
    "start": "1444799",
    "end": "1451520"
  },
  {
    "text": "get out your phones and tweet something tweet tweet tweet tweet Scala effect now with table View support So if you notice",
    "start": "1451520",
    "end": "1458600"
  },
  {
    "text": "um not only is it relatively short to write you have your tables and table columns and then you just hook it up",
    "start": "1458600",
    "end": "1465320"
  },
  {
    "text": "with a um the list of speakers and it automatically observes the list and pulls back data but it's also type",
    "start": "1465320",
    "end": "1474200"
  },
  {
    "text": "save so the actual fetching of values for the first name and the last name",
    "start": "1474200",
    "end": "1480600"
  },
  {
    "text": "uses a function which takes a speaker as an argument and Returns the um string",
    "start": "1480600",
    "end": "1487240"
  },
  {
    "text": "back from it because that's the generic type of here these are speaker of strings and for the non Scala proficient",
    "start": "1487240",
    "end": "1493880"
  },
  {
    "text": "people the underscore is just an anonymous argument so that just saves you from having to write s Colum speaker",
    "start": "1493880",
    "end": "1499320"
  },
  {
    "text": "speaker adult person one so pretty Bango another 25",
    "start": "1499320",
    "end": "1504880"
  },
  {
    "text": "characters something like that pretty concise and this this avoids you having to um if you were doing this in Java",
    "start": "1504880",
    "end": "1511720"
  },
  {
    "text": "code you would need um nimous inter classes very very long generic",
    "start": "1511720",
    "end": "1518320"
  },
  {
    "text": "definitions for all this stuff um the equivalent table code in Javas quite",
    "start": "1518320",
    "end": "1523840"
  },
  {
    "text": "well for bothos",
    "start": "1523840",
    "end": "1528000"
  },
  {
    "text": "so that's the user interface we're going to talk about the database but let's let's pause here for",
    "start": "1528880",
    "end": "1534760"
  },
  {
    "text": "a sec so anybody have questions about the UI code or anything we've presented so",
    "start": "1534760",
    "end": "1541158"
  },
  {
    "text": "far I think we need more coffee more coffee I'm surprised they didn't they",
    "start": "1543760",
    "end": "1549640"
  },
  {
    "start": "1548000",
    "end": "1572000"
  },
  {
    "text": "didn't bring like a little stash of coffee in us especially yeah yeah for us",
    "start": "1549640",
    "end": "1555520"
  },
  {
    "text": "yeah we we'd share though no I know I know know all right so we're going to talk about",
    "start": "1555520",
    "end": "1560840"
  },
  {
    "text": "the database model next and then finally clouds and then you'll have a complete application for the database we we used",
    "start": "1560840",
    "end": "1568159"
  },
  {
    "text": "as I mentioned Java DB Apache derby um it's a good choice because it a",
    "start": "1568159",
    "end": "1573640"
  },
  {
    "start": "1572000",
    "end": "1602000"
  },
  {
    "text": "it ships with the jdk so if you um have the jdk you already have Derby installed",
    "start": "1573640",
    "end": "1579480"
  },
  {
    "text": "very very small footprint 2.7 megabytes it's standard baced so you can",
    "start": "1579480",
    "end": "1584799"
  },
  {
    "text": "use jdbc Java SQL and it's very very easy to configure if you're on Java 6",
    "start": "1584799",
    "end": "1589960"
  },
  {
    "text": "jdbc 4 just dropping the jar file in your class path is enough to configure",
    "start": "1589960",
    "end": "1595480"
  },
  {
    "text": "and set this up so very easy to use and we're going to use it together with circumflex",
    "start": "1595480",
    "end": "1602679"
  },
  {
    "start": "1602000",
    "end": "1633000"
  },
  {
    "text": "omm this is one of the many Scala object relational mapping tools available um",
    "start": "1602679",
    "end": "1610080"
  },
  {
    "text": "and the reason we chose it is as a nice convenient short Syntax for defining um",
    "start": "1610080",
    "end": "1616000"
  },
  {
    "text": "your model objects see seems to have a very good community and um several releases they're up to 20 now um and",
    "start": "1616000",
    "end": "1623200"
  },
  {
    "text": "there's other choices for doing omm and Scola but this is the one which we selected and it's quite easy to",
    "start": "1623200",
    "end": "1630760"
  },
  {
    "text": "use all right so Derby config that's the um circumflex database configuration for",
    "start": "1630760",
    "end": "1639520"
  },
  {
    "text": "Derby we give it the driver we give it the connection URL the username and password don't really matter that much",
    "start": "1639520",
    "end": "1645840"
  },
  {
    "text": "it's a local embedded DB and the default schema for Derby is app um if you don't",
    "start": "1645840",
    "end": "1651840"
  },
  {
    "text": "put this in then um circumflex does some funky stuff and you pull out your hair so don't forget that",
    "start": "1651840",
    "end": "1658679"
  },
  {
    "text": "line it actually um I think it assumes the default schema is uh",
    "start": "1658679",
    "end": "1665919"
  },
  {
    "text": "default which is a keyword in Derby and causes SQL",
    "start": "1665919",
    "end": "1671600"
  },
  {
    "text": "errors okay and speaker domain object so the nice thing about the the",
    "start": "1671600",
    "end": "1677000"
  },
  {
    "start": "1674000",
    "end": "1749000"
  },
  {
    "text": "way orms work is you can use your pojo or plain",
    "start": "1677000",
    "end": "1682919"
  },
  {
    "text": "old sounds wrong it sounds bito much like poo you can use your plain old Scala object um add a little syntactic",
    "start": "1682919",
    "end": "1690919"
  },
  {
    "text": "sugar to it to Define what your columns are Define your primary key and your",
    "start": "1690919",
    "end": "1698159"
  },
  {
    "text": "relation in this case where um we have a self-referential object which we can",
    "start": "1698159",
    "end": "1703760"
  },
  {
    "text": "then use to refer to the different columns inside of our table and this this doubles as both the the object",
    "start": "1703760",
    "end": "1710360"
  },
  {
    "text": "we're going to use for storing our data so our model object and also our database definition you can also use this to directly create the tables",
    "start": "1710360",
    "end": "1717120"
  },
  {
    "text": "inside of Derby and not by the way as you can see up there the string last",
    "start": "1717120",
    "end": "1722159"
  },
  {
    "text": "name now has a function called varar on it so that is one example most likely of",
    "start": "1722159",
    "end": "1727480"
  },
  {
    "text": "an implicit um conversion going on there because obviously varar is not one of",
    "start": "1727480",
    "end": "1733559"
  },
  {
    "text": "those standard methods you have on string that's not the Java string Library I think yeah probably isn't",
    "start": "1733559",
    "end": "1738960"
  },
  {
    "text": "there I don't know maybe Java 20 Java 20 yeah yeah well by then whether we'll",
    "start": "1738960",
    "end": "1744760"
  },
  {
    "text": "still be using VAR cars and subject for debate anyway all right and then to query the",
    "start": "1744760",
    "end": "1751200"
  },
  {
    "text": "databases is very straightforward so this is using the criteria apis inside",
    "start": "1751200",
    "end": "1757640"
  },
  {
    "text": "of circumflex um so in the first case we do speaker. criteria. list that gets us all",
    "start": "1757640",
    "end": "1764000"
  },
  {
    "text": "the speakers you can also use a select style syntax as well um circumflex supports a",
    "start": "1764000",
    "end": "1769919"
  },
  {
    "text": "little DSL where you can do select speakers um from table speaker and that",
    "start": "1769919",
    "end": "1776600"
  },
  {
    "text": "works as well but I chose the criteria API because it's a little bit shorter and more fluent and same thing like in",
    "start": "1776600",
    "end": "1783240"
  },
  {
    "text": "this case we're doing a like query against it so speaker. criteria. add field like percent filter string percent",
    "start": "1783240",
    "end": "1790279"
  },
  {
    "text": "I'm guessing that's SQL injection safe uh yeah yeah so if you do feel like",
    "start": "1790279",
    "end": "1797240"
  },
  {
    "text": "Drop you know F colon drop Table app whatever yeah it",
    "start": "1797240",
    "end": "1803159"
  },
  {
    "text": "will not work it won't work it's not PHP folks yep although you could do funky",
    "start": "1803159",
    "end": "1809000"
  },
  {
    "text": "stuff with the filter string of course um using the like syntax abuse but yeah yeah I know",
    "start": "1809000",
    "end": "1815200"
  },
  {
    "text": "yeah and um then you load all the speakers into filtered speakers and if you remember from the UI code the UI",
    "start": "1815200",
    "end": "1821640"
  },
  {
    "text": "uses filtered speakers as the list which it listens to for changes anytime we make a change to filter speaker",
    "start": "1821640",
    "end": "1828080"
  },
  {
    "text": "automatically updates the UI so we don't have to go and you know manually go to the table and change the results and",
    "start": "1828080",
    "end": "1833320"
  },
  {
    "text": "update the UI this just automatically binds it using the cool Java effects observable",
    "start": "1833320",
    "end": "1840760"
  },
  {
    "text": "lists so that that's that's that's it for DB I mean there's not a lot that's how simple the app really is go the",
    "start": "1841600",
    "end": "1848640"
  },
  {
    "text": "clicker oh well I'll use the clicker so first of all in in the in the interest of fairness I should say a big thank you",
    "start": "1848640",
    "end": "1855279"
  },
  {
    "text": "to Steve because he's been very good and said we a lot of the times for things like the code but it's actually him so most of",
    "start": "1855279",
    "end": "1862159"
  },
  {
    "text": "the code comes straight out of the amazing brain of Sten chin over there um but I'm getting my payback no no payback",
    "start": "1862159",
    "end": "1869080"
  },
  {
    "text": "will will come obviously so we're gonna we're gonna post this on GitHub um right after the event so um check out my blog",
    "start": "1869080",
    "end": "1875279"
  },
  {
    "text": "Steve on java.com and probably jclouds will have it mentioned as well it'll be part of the jclouds examples sweet and",
    "start": "1875279",
    "end": "1884120"
  },
  {
    "text": "and that's when my payback time comes Andrew is gonna gonna get full Payback helping me do that yeah no you can you",
    "start": "1884120",
    "end": "1889919"
  },
  {
    "text": "can only know you can only push out the evil day for so long but I mean it's coming in any case so yes obviously many",
    "start": "1889919",
    "end": "1896639"
  },
  {
    "text": "thank thanks to Steve and of course also thanks to all the Jack sponsors thanks for having us all that kind of good",
    "start": "1896639",
    "end": "1902360"
  },
  {
    "text": "stuff right so the cloud part of this so I guess there's a few things to mention here and um Steve mentioned a lot of",
    "start": "1902360",
    "end": "1909760"
  },
  {
    "start": "1907000",
    "end": "1956000"
  },
  {
    "text": "these already cloud is awesome I'm not that's really supposedly how it's pronounced I always feel kind of bad",
    "start": "1909760",
    "end": "1915440"
  },
  {
    "text": "when I have to say that but anyway um you know we we talked about these why is this interesting well what are the four",
    "start": "1915440",
    "end": "1921799"
  },
  {
    "text": "things that we're looking for here we're looking for an on demand service that you can kind of do yourself you don't need a bunch of specialist Consultants",
    "start": "1921799",
    "end": "1928760"
  },
  {
    "text": "to get your raid array set up in order to store stuff um it's scalable obviously you well we're talking about",
    "start": "1928760",
    "end": "1934799"
  },
  {
    "text": "330k blobs so we don't really have that much of a problem but as as Steve said",
    "start": "1934799",
    "end": "1941360"
  },
  {
    "text": "if you use the hashing algorithms you can really get some very nice scalability out of here and it's also measurable so this is one more where the",
    "start": "1941360",
    "end": "1947279"
  },
  {
    "text": "cost thing comes in in terms of you know pay for what you use rather than just paying um a fixed rate uh in the",
    "start": "1947279",
    "end": "1954399"
  },
  {
    "text": "irrespective of what you're actually using so what's jclouds well we discussed this a little bit up front",
    "start": "1954399",
    "end": "1960039"
  },
  {
    "start": "1956000",
    "end": "2049000"
  },
  {
    "text": "it's a it's essentially a it's a multicloud library it's it's like jdbc",
    "start": "1960039",
    "end": "1965399"
  },
  {
    "text": "for the cloud um of course there's multiple different flavors of of offerings you have in the cloud and",
    "start": "1965399",
    "end": "1971440"
  },
  {
    "text": "we'll talk about those a little bit but the idea here is to make it very easy from java to you know talk to to various",
    "start": "1971440",
    "end": "1978360"
  },
  {
    "text": "cloud services and to give you full Freedom around do I want to stay relatively Cloud agnostic in the same",
    "start": "1978360",
    "end": "1984760"
  },
  {
    "text": "way as do I want to say DB agnostic and maybe switch my backend database same goes for the cloud here and of course um",
    "start": "1984760",
    "end": "1991360"
  },
  {
    "text": "you know it we have a it's Java it's a Java library but it has a closure binding there's a relatively large closure Community around it and thanks",
    "start": "1991360",
    "end": "1999240"
  },
  {
    "text": "thanks to Mr Chin we also have a Scala binding is thing but of course Scala makes Java really easy to use anyway um",
    "start": "1999240",
    "end": "2006760"
  },
  {
    "text": "it's tested across a whole bunch of different Cloud providers I think there's about 45 Cloud providers in",
    "start": "2006760",
    "end": "2012159"
  },
  {
    "text": "there right now uh and that sounds like a a trivial thing to say for an open source project but you'd be surprised um",
    "start": "2012159",
    "end": "2019919"
  },
  {
    "text": "certainly out there in the cloud world if you look at some of the other libraries around there the amount of real serious integration testing that is",
    "start": "2019919",
    "end": "2026799"
  },
  {
    "text": "done or and can be done even is um how should I put it leaves room for",
    "start": "2026799",
    "end": "2033080"
  },
  {
    "text": "improvement and yeah there's a big Community uh in fact I can test I can",
    "start": "2033080",
    "end": "2039440"
  },
  {
    "text": "well this morning is sort of Testament to this community because we just had a meet up in San Francisco yesterday evening and I drank rather too much so",
    "start": "2039440",
    "end": "2045240"
  },
  {
    "text": "you know if I start slow my speech then that is because of the Vibrant jclouds Community so um in this particular talk",
    "start": "2045240",
    "end": "2052480"
  },
  {
    "start": "2049000",
    "end": "2143000"
  },
  {
    "text": "we're basically going to be looking at blob stores blob stores it's just what it is you know you take a blob of data",
    "start": "2052480",
    "end": "2058480"
  },
  {
    "text": "uh binary data text Data whatever and you store it somewhere and then you get things like you know you have a traversible hierarchy and you have",
    "start": "2058480",
    "end": "2065320"
  },
  {
    "text": "versioning in some of the new o blob stores and so on so that's one of the the very simple things out there they're",
    "start": "2065320",
    "end": "2070480"
  },
  {
    "text": "generally not relational in the sense that you can't really filter or query them very nicely and that's one of the reasons why in this architecture we're",
    "start": "2070480",
    "end": "2077200"
  },
  {
    "text": "doing that stuff using a local embedded database but for storing data and potentially very large quantities of",
    "start": "2077200",
    "end": "2082878"
  },
  {
    "text": "data um there's a lot of good Solutions out there I think cloud uh jclouds now supports about five or 10 different blob",
    "start": "2082879",
    "end": "2090358"
  },
  {
    "text": "store providers you know ranging across a whole bunch of companies obviously S3 we're using here but auro obviously has",
    "start": "2090359",
    "end": "2097040"
  },
  {
    "text": "storage space has some cloud files HP Cloud so there's a whole bunch of different ones to choose from compute is",
    "start": "2097040",
    "end": "2103560"
  },
  {
    "text": "a big another big thing many more providers out there right now that's about images you know virtual machines",
    "start": "2103560",
    "end": "2109160"
  },
  {
    "text": "ec2 um open stack that kind of stuff boot up boot up an image run stuff on it boot up five of them whatever load",
    "start": "2109160",
    "end": "2116520"
  },
  {
    "text": "balancing uh some other thing that that's coming up more and more Cloud providers are now supporting a kind of load balancing API where you can say I",
    "start": "2116520",
    "end": "2123599"
  },
  {
    "text": "want to root traffic between my multiple clouds there's a few networking things and so on and yes of course um as more",
    "start": "2123599",
    "end": "2131240"
  },
  {
    "text": "and more providers start to offer features that are in addition to these",
    "start": "2131240",
    "end": "2136280"
  },
  {
    "text": "three then yeah the community basically decides what we end up wanting to add um",
    "start": "2136280",
    "end": "2141440"
  },
  {
    "text": "we try to provide two choices let me just look at the time I don't want to spend too much time talking about this um let's talk about the blob store very",
    "start": "2141440",
    "end": "2148000"
  },
  {
    "start": "2143000",
    "end": "2191000"
  },
  {
    "text": "briefly this is essentially what we're going to be doing very recognizable from any kind of interaction with any context",
    "start": "2148000",
    "end": "2153680"
  },
  {
    "text": "based thing um such as a database for instance but yeah you basically create a connector a context to the provider that",
    "start": "2153680",
    "end": "2160680"
  },
  {
    "text": "you want to talk to in this case you're going to get a blob store API uh and there you can decide whether you want to",
    "start": "2160680",
    "end": "2165920"
  },
  {
    "text": "have an agnostic Cloud agnostic blob store API or whether you want to dive down into the provider specific API then",
    "start": "2165920",
    "end": "2172920"
  },
  {
    "text": "you just do a bunch of stuff and then you close the context at the end so it's a nice closable pattern which in Scala",
    "start": "2172920",
    "end": "2178280"
  },
  {
    "text": "also works pretty nicely you know even Java 7 obviously will support when is it",
    "start": "2178280",
    "end": "2183440"
  },
  {
    "text": "auto yeah yeah Auto Java 7 supports this pretty nicely too so you can you can cut some craft out of your code doing",
    "start": "2183440",
    "end": "2190720"
  },
  {
    "text": "that um there's a well I mentioned this briefly already basically in the cloud",
    "start": "2190720",
    "end": "2197200"
  },
  {
    "start": "2191000",
    "end": "2283000"
  },
  {
    "text": "World there is a a sort of distinction between apis and the actual companies",
    "start": "2197200",
    "end": "2202880"
  },
  {
    "text": "providing implementation of these apis um some of them started out as a single company thing S3 being a very good",
    "start": "2202880",
    "end": "2208400"
  },
  {
    "text": "example it was originally a product obviously offered by Amazon and then a lot of other providers have come out and",
    "start": "2208400",
    "end": "2213680"
  },
  {
    "text": "have basically said we're S3 compatible to the point where without it ever being",
    "start": "2213680",
    "end": "2218760"
  },
  {
    "text": "ratified as an DTMF standard or or dmtf or whatever it's essentially an API and",
    "start": "2218760",
    "end": "2224480"
  },
  {
    "text": "you can choose one of multiple different providers that will give you um S3 interfaces to interact with your blob",
    "start": "2224480",
    "end": "2232040"
  },
  {
    "text": "store and obviously aw ss3 is one of them Google storage which is in a kind of weird state right now is another one there's scale up there's a whole bunch",
    "start": "2232040",
    "end": "2238240"
  },
  {
    "text": "of different ones so there's extensions to the S3 API as well and that's one of the thing jclouds tries to do it gives",
    "start": "2238240",
    "end": "2243760"
  },
  {
    "text": "you various you know different options in the sense that you can say I just want a base blob store I don't really care what the provider is and then your",
    "start": "2243760",
    "end": "2250800"
  },
  {
    "text": "maximum portability but obviously also you have a well you have a least common denominator type choice you can dive",
    "start": "2250800",
    "end": "2257839"
  },
  {
    "text": "down and say I want a provider that gives me an S3 API and then you can add things like I wanted to be in uh",
    "start": "2257839",
    "end": "2264599"
  },
  {
    "text": "California I want it to be in North America I want it to be here there or whatever you have a bunch of choices",
    "start": "2264599",
    "end": "2270720"
  },
  {
    "text": "that will guide jclouds into choosing a provider for you but of course you can also drill d right down and say I want",
    "start": "2270720",
    "end": "2277760"
  },
  {
    "text": "you know us West One S AWS S3 I think that's pretty much",
    "start": "2277760",
    "end": "2284480"
  },
  {
    "start": "2283000",
    "end": "2369000"
  },
  {
    "text": "what we're going to be doing as well here in this one so this is just the code version of what we discussed right",
    "start": "2284480",
    "end": "2290119"
  },
  {
    "text": "now you create a context at the top here you see where we're selecting a specific provider there's also this is Scala",
    "start": "2290119",
    "end": "2296359"
  },
  {
    "text": "there's a typ safe version of doing this as well if you want to do that so you pick the provider metadata there' be a",
    "start": "2296359",
    "end": "2301680"
  },
  {
    "text": "definition right up the top here which would say something like provid a metadata equals awss three provider and",
    "start": "2301680",
    "end": "2309200"
  },
  {
    "text": "then you say well I want to log in using these are my credentials and you can get them from a properties file or whatever",
    "start": "2309200",
    "end": "2314520"
  },
  {
    "text": "and then in this case for my context I want to have a blob store context which for awss 3 is pretty much one of the",
    "start": "2314520",
    "end": "2322560"
  },
  {
    "text": "only things you can get you can't get a compute context from awss 3 because it's obviously a blob store but if this were",
    "start": "2322560",
    "end": "2329079"
  },
  {
    "text": "ec2 then you would get a compute context or something like that then we uh we do something with it so you can see here",
    "start": "2329079",
    "end": "2334880"
  },
  {
    "text": "we're getting a blob store API um there are two types of apis for all",
    "start": "2334880",
    "end": "2339920"
  },
  {
    "text": "the jcloud things there's a synchronous and an asynchronous API so obviously this is the sync version where if you",
    "start": "2339920",
    "end": "2345400"
  },
  {
    "text": "make a call it'll wait for something to come back and the async one does what you would expect it makes a call gives",
    "start": "2345400",
    "end": "2351440"
  },
  {
    "text": "you a future and then you can either ignore the result or you can decide to wait for it or check it at a later stage",
    "start": "2351440",
    "end": "2356880"
  },
  {
    "text": "and then here we're just downloading a blob from a specific location uh and then getting the input and I think that",
    "start": "2356880",
    "end": "2363560"
  },
  {
    "text": "returns a uh input stream um then you close it at the end so not too many",
    "start": "2363560",
    "end": "2369000"
  },
  {
    "text": "funky things going on in there just going to skip through some of these before we get into the demo while obviously we talked about portability um",
    "start": "2369000",
    "end": "2376280"
  },
  {
    "text": "there there's some interesting uh gotches there in the sense that a lot of people claim to have for instance S3",
    "start": "2376280",
    "end": "2382160"
  },
  {
    "text": "port or compliance but that only ever goes so deep because of course Amazon decides to",
    "start": "2382160",
    "end": "2387760"
  },
  {
    "text": "add a new feature to S3 and then there's this couple of week SL Monon lag where people uh try to catch up and say oh no",
    "start": "2387760",
    "end": "2394040"
  },
  {
    "text": "we now support this as well um obviously why would you use jclouds over just",
    "start": "2394040",
    "end": "2399240"
  },
  {
    "text": "using the native SDK the chips with Amazon I me you can download the Amazon SDK and use that straight off well yes",
    "start": "2399240",
    "end": "2407359"
  },
  {
    "text": "but then you are definitely stuck with Amazon um and some of these sdks are pretty well I can say this quite",
    "start": "2407359",
    "end": "2412560"
  },
  {
    "text": "honestly they suck they're badly written they're not very good um there's something about threading and then being",
    "start": "2412560",
    "end": "2418720"
  },
  {
    "text": "Enterprise grade here you know making sure for instance in Blob stores if you do a multi-part upload you can write all",
    "start": "2418720",
    "end": "2424000"
  },
  {
    "text": "that code yourself if you want split it up into chunks and de side but you you can also use what one of the jclouds",
    "start": "2424000",
    "end": "2429280"
  },
  {
    "text": "abstractions which is just a blob map where you just put 10 things in a in a map and then say save and it'll",
    "start": "2429280",
    "end": "2435800"
  },
  {
    "text": "basically create a thread pool behind it do parallel uploads of all those things wait till they've all uploaded and then",
    "start": "2435800",
    "end": "2441520"
  },
  {
    "text": "give you the result something like that and then yeah well that we talked about performance there's a bunch of tuning options for tweaking the pool sizes",
    "start": "2441520",
    "end": "2448960"
  },
  {
    "text": "tweaking the timeouts tweaking the back off um policies and that kind of stuff plus you can run on the GAE which is not",
    "start": "2448960",
    "end": "2456400"
  },
  {
    "text": "necessarily a huge concern for a lot of people anymore but some time ago that was a big",
    "start": "2456400",
    "end": "2462119"
  },
  {
    "start": "2461000",
    "end": "2522000"
  },
  {
    "text": "thing you can use it in osgi um if that matters to anyone whatsoever but more",
    "start": "2462119",
    "end": "2467720"
  },
  {
    "text": "interestingly there is um an integration with an osgi container called karf Apachi karf Corf um which has turned",
    "start": "2467720",
    "end": "2475480"
  },
  {
    "text": "into a very nice command line interface for doing operations on your Cloud",
    "start": "2475480",
    "end": "2480880"
  },
  {
    "text": "accounts basically a nice command line to start instances in ec2 start instances in Rackspace HP cloud get your",
    "start": "2480880",
    "end": "2487640"
  },
  {
    "text": "blobs list your blobs all that kind of stuff which which is nice to have across a whole bunch of clouds we talked about",
    "start": "2487640",
    "end": "2493200"
  },
  {
    "text": "the closure binding there's the synchronous asynchronous spit which I can proudly say was something Adrian",
    "start": "2493200",
    "end": "2499119"
  },
  {
    "text": "who's running around I think outside somewhere the the father of jclouds if you like invented and is then being copied into a lot of the sdks that uh",
    "start": "2499119",
    "end": "2506520"
  },
  {
    "text": "that the providers themselves ship and yeah uh we run a bunch of quite expensive integration tests sometimes to",
    "start": "2506520",
    "end": "2513560"
  },
  {
    "text": "the point where actually there are some providers who say that you know for them the definition of whether their Cloud",
    "start": "2513560",
    "end": "2519000"
  },
  {
    "text": "works is when the jclouds test pass which is definitely the wrong way around it shouldn't be that way but that is the",
    "start": "2519000",
    "end": "2525319"
  },
  {
    "start": "2522000",
    "end": "2618000"
  },
  {
    "text": "way it is um I talked a little bit about location metadata that's a really interesting thing and that's a sort of a",
    "start": "2525319",
    "end": "2530599"
  },
  {
    "text": "bit of a 2.0 use case to some extent for a lot of people they just want something to be stored and they don't really care where it is um but you get a whole bunch",
    "start": "2530599",
    "end": "2538440"
  },
  {
    "text": "of you know you get the the disaster recovery use case I want two copies of my data to be stored further than so and",
    "start": "2538440",
    "end": "2544760"
  },
  {
    "text": "so much apart because if one data center goes down I have a recovery option um",
    "start": "2544760",
    "end": "2550119"
  },
  {
    "text": "you have the option where you say well for legal constraints my data can't leave a certain geographical location um",
    "start": "2550119",
    "end": "2555720"
  },
  {
    "text": "which with if you're working for the State of California means that you can't store your data outside California and",
    "start": "2555720",
    "end": "2561559"
  },
  {
    "text": "so all these things kind of play a role there's more metadata things there's speed and how fast is the network",
    "start": "2561559",
    "end": "2566960"
  },
  {
    "text": "connection to this thing because that has a performance impact and so on so jclouds does a really nice job I think of uh first of all exposing this",
    "start": "2566960",
    "end": "2574520"
  },
  {
    "text": "metadata about a whole bunch of different providers and then giving you the ability to query it and do clever stuff based on that I talked a little",
    "start": "2574520",
    "end": "2581839"
  },
  {
    "text": "bit about the multiart stuff um yeah you know it it's not fun to write and it's not fun to test and it's something",
    "start": "2581839",
    "end": "2588480"
  },
  {
    "text": "stupid if you have to do that yourself it's like trying to write your own sharding when you do a database algorithm and yeah of course Community",
    "start": "2588480",
    "end": "2594880"
  },
  {
    "text": "is a big thing there's we have a whole bunch of of committers with drinking problems and um and uh no no there's a",
    "start": "2594880",
    "end": "2603800"
  },
  {
    "text": "lot of big companies involved as well I mean it's later for some goodon yeah there's not just individual startups but",
    "start": "2603800",
    "end": "2610200"
  },
  {
    "text": "but there's also a lot of a lot of the big providers HPS contributing to the effort so a lot of their HP Cloud stuff",
    "start": "2610200",
    "end": "2615640"
  },
  {
    "text": "works and so on so it's a fun a fun place to be so with with that I will hand the",
    "start": "2615640",
    "end": "2622240"
  },
  {
    "start": "2618000",
    "end": "3071000"
  },
  {
    "text": "magic um one over to Steve and uh so time yeah so we we've managed to not",
    "start": "2622240",
    "end": "2628640"
  },
  {
    "text": "actually show any working code this whole this whole presentation so that that could be a good thing but you just",
    "start": "2628640",
    "end": "2635200"
  },
  {
    "text": "trust us right obviously high level of audience trust or it it",
    "start": "2635200",
    "end": "2640240"
  },
  {
    "text": "could be a problem because maybe that some of this stuff doesn't actually work maybe the cloud is down never happens",
    "start": "2640240",
    "end": "2645559"
  },
  {
    "text": "except last week and then sometime before then and then some yeah big amazon so this I this some of this is",
    "start": "2645559",
    "end": "2653720"
  },
  {
    "text": "the um scal effects code you can ignore that but um the code right here so",
    "start": "2653720",
    "end": "2659240"
  },
  {
    "text": "conference model conference UI DB utility jcloud util that's that's the actual application code that's that's it",
    "start": "2659240",
    "end": "2666119"
  },
  {
    "text": "about four files not that much code not intellig still required for scolar development to a",
    "start": "2666119",
    "end": "2672760"
  },
  {
    "text": "large extent despite typ safe's best efforts to uh make Eclipse semi-",
    "start": "2672760",
    "end": "2680400"
  },
  {
    "text": "performance so um if you look here this is the conference UI class and it's it's",
    "start": "2680400",
    "end": "2686599"
  },
  {
    "text": "you know same thing I showed basic application structure um loading an image I have a",
    "start": "2686599",
    "end": "2693599"
  },
  {
    "text": "little rectangle here just for um visual flare and then the um the buttons I",
    "start": "2693599",
    "end": "2698880"
  },
  {
    "text": "mentioned so you know filter clear reloads an extra button I have on",
    "start": "2698880",
    "end": "2704079"
  },
  {
    "text": "slides and our table so you know exactly the same code",
    "start": "2704079",
    "end": "2711640"
  },
  {
    "text": "you guys have seen this Hall file is we'll probably save another eight characters by removing the function call",
    "start": "2711640",
    "end": "2717720"
  },
  {
    "text": "around company and these things because I guess they're uh read only I can I can",
    "start": "2717720",
    "end": "2722960"
  },
  {
    "text": "I can do but let's not break things let's not touch it but just to say in Scala you don't oh no no no so that is",
    "start": "2722960",
    "end": "2728359"
  },
  {
    "text": "required oh that is required whoops go hide behind the uh it's a he'll explain it to me later it's a circum flexis it's",
    "start": "2728359",
    "end": "2735480"
  },
  {
    "text": "a circumflex ISM oh okay because in in general if you're not using circumflex",
    "start": "2735480",
    "end": "2740839"
  },
  {
    "text": "then of course in scall you can uh you can off you can live off um the convention is if something doesn't have",
    "start": "2740839",
    "end": "2747040"
  },
  {
    "text": "side effects if you're just getting a value you shouldn't care whether it's a method producing the value or whether it's just a field that you're reading",
    "start": "2747040",
    "end": "2752960"
  },
  {
    "text": "and in fact unlike in Java fields and methods share the same name space so in Scala or in Java you can't or you can",
    "start": "2752960",
    "end": "2760040"
  },
  {
    "text": "have a field and a method with the same name and obviously by adding Parn or not",
    "start": "2760040",
    "end": "2765800"
  },
  {
    "text": "it decides which you want to call in Scala if you need a value um last name",
    "start": "2765800",
    "end": "2772280"
  },
  {
    "text": "which is defined as a string you can actually Implement that value using a method called last name that returns a",
    "start": "2772280",
    "end": "2778520"
  },
  {
    "text": "string okay and then if we look at the actual speaker",
    "start": "2778520",
    "end": "2783680"
  },
  {
    "text": "class yeah what we show in the slides if we look at um what else have we got",
    "start": "2783680",
    "end": "2789680"
  },
  {
    "text": "here DB utility not much yeah there's not much Cod just far too small oh actually we don't we don't even use this",
    "start": "2789680",
    "end": "2795119"
  },
  {
    "text": "code this code was a one-time load of the database in the cloud okay so that's not even used yeah that's that's that's",
    "start": "2795119",
    "end": "2801680"
  },
  {
    "text": "about it and then we have we have we also have the jcloud U class I'm not going to show that class just because it has my Amazon has three keys in it right",
    "start": "2801680",
    "end": "2808240"
  },
  {
    "text": "now so but um I'm going to strip those out when we post it to GitHub so it'll all",
    "start": "2808240",
    "end": "2813839"
  },
  {
    "text": "be good soon yeah okay so that's that's it and we we click run and we cross our",
    "start": "2813839",
    "end": "2819319"
  },
  {
    "text": "fingers is the cloud up stuff is happening oh warnings oh no",
    "start": "2819319",
    "end": "2826319"
  },
  {
    "text": "no no that's those are joke warnings they're meant to happen warnings no wait no and",
    "start": "2826319",
    "end": "2832400"
  },
  {
    "text": "then there we go big round of applause at least for me very cool and so so you",
    "start": "2832400",
    "end": "2838440"
  },
  {
    "text": "want to talk us through some of the bits in the UI yeah so um this is a table View and it shows all of the guys you",
    "start": "2838440",
    "end": "2844599"
  },
  {
    "text": "can actually adjust columns just drag Direct drop columns around resize stuff",
    "start": "2844599",
    "end": "2849920"
  },
  {
    "text": "um try not to crash your user interface",
    "start": "2849920",
    "end": "2855119"
  },
  {
    "text": "filter uh and filter all the gremlin the ground is back what did you do",
    "start": "2859520",
    "end": "2864760"
  },
  {
    "text": "Steve I I blew up my um you blew up the UI I blew up the UI okay well let's try it again let's try it again so for the",
    "start": "2864760",
    "end": "2872520"
  },
  {
    "text": "video people there that never happened now we try get points",
    "start": "2872520",
    "end": "2877760"
  },
  {
    "text": "start point right let's do that again all right let's see if we get a um let's",
    "start": "2877760",
    "end": "2883200"
  },
  {
    "text": "see if it gets anybody I was just I was just showcasing the the fast startup time of the application you were indeed",
    "start": "2883200",
    "end": "2889839"
  },
  {
    "text": "yeah and now we're let's see if we have any wow uh oh see this is a fun no",
    "start": "2889839",
    "end": "2897319"
  },
  {
    "text": "Engineers Steve it's fun this is a nice one yes it does work sometimes when when you are",
    "start": "2897319",
    "end": "2903720"
  },
  {
    "text": "not looking yeah yeah just like a demo just like demo the way it's meant to be right that's it's like a customer",
    "start": "2903720",
    "end": "2909839"
  },
  {
    "text": "demo initializing pool use traditional equals po no there's no errors there's",
    "start": "2909839",
    "end": "2915359"
  },
  {
    "text": "no errors oh well whatever but in any case so you can see the buttons obviously so the the four filter buttons",
    "start": "2915359",
    "end": "2920680"
  },
  {
    "text": "the clear buttons the reload buttons I guess the thing at the top is the image that you were loading I am talking to keep the crowd",
    "start": "2920680",
    "end": "2927599"
  },
  {
    "text": "occupied while Steve types stuff and tries to reload it again and he's wondering all right so third try is the",
    "start": "2927599",
    "end": "2934280"
  },
  {
    "text": "charm let's try one more time let's try one more time let's try one more",
    "start": "2934280",
    "end": "2939640"
  },
  {
    "text": "time fast UI startup time we're we're showcasing the fast UI startup time yes",
    "start": "2939640",
    "end": "2945079"
  },
  {
    "text": "for the second time the edit point so all right the way it's suppos to it says there well her first name is not gonna",
    "start": "2945079",
    "end": "2951640"
  },
  {
    "text": "be chin yeah no okay filter doesn't work doesn't work that's fun I wonder what",
    "start": "2951640",
    "end": "2957240"
  },
  {
    "text": "happened anyway well I I know that when he show it was probably the coffee that I had this morning probably in any case",
    "start": "2957240",
    "end": "2962760"
  },
  {
    "text": "that's why we have some homework to do um but Steve is looking through the question I",
    "start": "2962760",
    "end": "2968440"
  },
  {
    "text": "wonder what it is should we try and load it locally maybe the cloud is down what's your W your wireless looks okay",
    "start": "2968440",
    "end": "2974839"
  },
  {
    "text": "shouldn't shouldn't affect so we can we can blame it on the cloud let's just try it anyway we'll try we'll try anyway the local the local version uses the zip",
    "start": "2974839",
    "end": "2981400"
  },
  {
    "text": "file you see here uh SQL do zip and loads it from there instead so this of",
    "start": "2981400",
    "end": "2986880"
  },
  {
    "text": "course should not make any difference but probably it will or not no it doesn't it doesn't it's it's a UI thing",
    "start": "2986880",
    "end": "2993000"
  },
  {
    "text": "it's a UI thing yeah that's a good thing I love I'm a service engineer so I can always say as usual all it's to U I",
    "start": "2993000",
    "end": "2998559"
  },
  {
    "text": "think and today is no exception it's a good thing it's a good thing Andrew prompted for the Applause",
    "start": "2998559",
    "end": "3005520"
  },
  {
    "text": "after the UI popped up the first nice and we're gonna post the code",
    "start": "3005520",
    "end": "3010839"
  },
  {
    "text": "on GitHub later eventually what so you guys can spot the error no",
    "start": "3010839",
    "end": "3018480"
  },
  {
    "text": "actually we're gonna post a working version I get but um essentially the functionality",
    "start": "3018480",
    "end": "3025760"
  },
  {
    "text": "you can choose any of the fields from the drop down and then you can um filter if the",
    "start": "3025760",
    "end": "3032200"
  },
  {
    "text": "filter button actually worked you could actually click and filter on those it looks like it looks like the buttons actually aren't firing can you show the",
    "start": "3032200",
    "end": "3038160"
  },
  {
    "text": "can you show where the drop down is populated because I'm just wondering because that's always one of oh actually this is cute so I find really annoying",
    "start": "3038160",
    "end": "3044760"
  },
  {
    "text": "the the dropdown yeah um actually uses the model object from",
    "start": "3044760",
    "end": "3051040"
  },
  {
    "text": "circumplex so we refer to speaker. first name speaker. last name put those in a",
    "start": "3051040",
    "end": "3056359"
  },
  {
    "text": "buffer yeah and that actually populates the menu so but if if you add a new if you",
    "start": "3056359",
    "end": "3061760"
  },
  {
    "text": "add a new um uh what am I trying to say if you add a new field to speaker you have to put",
    "start": "3061760",
    "end": "3068599"
  },
  {
    "text": "it in there add toist okay but it's all type safe at the start okay okay so if",
    "start": "3068599",
    "end": "3074119"
  },
  {
    "start": "3071000",
    "end": "3144000"
  },
  {
    "text": "you guys would like to contact us we didn't have this on the first slide but",
    "start": "3074119",
    "end": "3080359"
  },
  {
    "text": "um you can feel free to send us emails directly at um Step in oracle.com or",
    "start": "3080359",
    "end": "3088240"
  },
  {
    "text": "Andrew jcls.org um feel free to hit us up with questions if you have it about the Technologies we",
    "start": "3088240",
    "end": "3094920"
  },
  {
    "text": "showcased Scala Java effects jclouds buttons um also follow us on",
    "start": "3094920",
    "end": "3102280"
  },
  {
    "text": "Twitter we'll both be posting later today once we get the code uploaded to GitHub so you can try it out yourself",
    "start": "3102280",
    "end": "3109040"
  },
  {
    "text": "and uh we're going to do a full um I think we'll probably do an SBT build for this so you just be able to command line",
    "start": "3109040",
    "end": "3114799"
  },
  {
    "text": "deploy the entire thing with all the maen dependencies and go for it you'll be able to see what life is like when",
    "start": "3114799",
    "end": "3120359"
  },
  {
    "text": "somebody tries to reinvent a build system hello spt I like you too anyway",
    "start": "3120359",
    "end": "3127079"
  },
  {
    "text": "yeah I don't all right so thanks for coming yeah thanks very much",
    "start": "3127079",
    "end": "3133330"
  },
  {
    "text": "[Applause] [Music]",
    "start": "3133330",
    "end": "3141530"
  }
]