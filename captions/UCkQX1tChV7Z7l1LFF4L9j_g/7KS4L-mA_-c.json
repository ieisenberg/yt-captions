[
  {
    "start": "0",
    "end": "165000"
  },
  {
    "text": "so with that said I'll passward to you and really excited to hear what to sounds good all right thanks and uh",
    "start": "240",
    "end": "6720"
  },
  {
    "text": "thanks everybody for uh coming down and uh this the San Francisco Java Meet Up",
    "start": "6720",
    "end": "12400"
  },
  {
    "text": "group for having us and heavy bit and all that good people who have help so without further Ado let's get into it so",
    "start": "12400",
    "end": "19160"
  },
  {
    "text": "a bit about me as Sasha said uh I'm one of the founders at teipe I've been writing code for the",
    "start": "19160",
    "end": "26880"
  },
  {
    "text": "past I would say 16 years um my background is in real time and high scale systems in Aerospace which I did",
    "start": "26880",
    "end": "33879"
  },
  {
    "text": "for like eight years so a lot of work in uh C++ Java Real Time stuff then uh our",
    "start": "33879",
    "end": "41239"
  },
  {
    "text": "first company was also build out built products for Architects and Engineers but like real world Architects and Engineers that kind of build Bridges and",
    "start": "41239",
    "end": "48960"
  },
  {
    "text": "uh airports and all those kind of interesting things was actually through the process of scaling out that service",
    "start": "48960",
    "end": "55600"
  },
  {
    "text": "which today host I think like 50 million people that we came across some of the pain points and challenges is uh the",
    "start": "55600",
    "end": "61600"
  },
  {
    "text": "kind of BR the idea of to keep you with a strong emphasis on the word pain what we really wanted to have is like and",
    "start": "61600",
    "end": "68200"
  },
  {
    "text": "always we wanted something essentially to would would tell us when and why code breaks in production so we built this",
    "start": "68200",
    "end": "74759"
  },
  {
    "text": "kind of always on debugger which tells you you know when something bad happens in production at scale what is what's",
    "start": "74759",
    "end": "81960"
  },
  {
    "text": "the source code what's the variable state that actually cause that error to be and let you prioritize that very",
    "start": "81960",
    "end": "87680"
  },
  {
    "text": "efficiently um and what I want to talk about about today really it's less about that but really about some really um",
    "start": "87680",
    "end": "95600"
  },
  {
    "text": "efficient techniques that have to do with being able to to debug code at scale in production much more",
    "start": "95600",
    "end": "102280"
  },
  {
    "text": "efficiently based on Research that we've done and the experience we've uh accumulate as a team over the years and",
    "start": "102280",
    "end": "107439"
  },
  {
    "text": "working with our many customers and share those techniques with you um to hopefully you guys will find them uh",
    "start": "107439",
    "end": "113880"
  },
  {
    "text": "useful to your everyday work in general check out the blog it's AI uh it's not a product blog itally all the they are",
    "start": "113880",
    "end": "120280"
  },
  {
    "text": "talking about today uh is based on Research that we do and we publish there a lot of benchmarks a lot of things",
    "start": "120280",
    "end": "126200"
  },
  {
    "text": "about new ways to debug and new ways to essentially deploy and work that code at scale now uh one note that was brought",
    "start": "126200",
    "end": "134160"
  },
  {
    "text": "up here is how to pronounce the names I'm definitely going to go into that for those of you which are kind of curious",
    "start": "134160",
    "end": "140599"
  },
  {
    "text": "uh let's see how this thing works uh this is Taki and this is Ki and",
    "start": "140599",
    "end": "147080"
  },
  {
    "text": "they're essentially how we name the company so it's a Tei and they are the company dog so this is kind of uh if",
    "start": "147080",
    "end": "154080"
  },
  {
    "text": "people AR curious about the name this is the reason why all right let's get into",
    "start": "154080",
    "end": "160400"
  },
  {
    "text": "it um let's see is this clicker",
    "start": "160400",
    "end": "165280"
  },
  {
    "text": "clicking it's clicking all right so I want to talk about today about a few uh",
    "start": "165680",
    "end": "171200"
  },
  {
    "text": "techniques for production debugging some of those which I I can you know are very",
    "start": "171200",
    "end": "177000"
  },
  {
    "text": "I wouldn't say foundational but some of thing that I know we've seen a lot of people use and uh and we use in our",
    "start": "177000",
    "end": "182760"
  },
  {
    "text": "everyday work and we feel that are very kind of uh helpful to people so we can talk about them and then we're going to",
    "start": "182760",
    "end": "189040"
  },
  {
    "text": "go start going more and more into some deep and more advanced stuff okay which is also very interesting it kind of",
    "start": "189040",
    "end": "194720"
  },
  {
    "text": "shows you how The jvm Works kind of um behind the scenes so a lot of",
    "start": "194720",
    "end": "200319"
  },
  {
    "text": "interesting stuff around that the thir the first thing we want to talk about really is techniques for thread naming",
    "start": "200319",
    "end": "207239"
  },
  {
    "text": "uh and we'll talk and we'll see exactly why that thing which is actually know the thread name property is one of",
    "start": "207239",
    "end": "213080"
  },
  {
    "text": "Java's kind of unsung heroes okay it's like something we all know that's there we don't really use it so I want to show you some interesting uses and techniques",
    "start": "213080",
    "end": "220040"
  },
  {
    "text": "in which you can put it into really really good and efficient use so",
    "start": "220040",
    "end": "225599"
  },
  {
    "start": "225000",
    "end": "295000"
  },
  {
    "text": "um essentially this is what we all know uh as a stack dump okay we debug sorry",
    "start": "225599",
    "end": "233439"
  },
  {
    "text": "as as the thread D we need debug in production uh today and doesn't matter if you use uh jstack or profile or",
    "start": "233439",
    "end": "241840"
  },
  {
    "text": "mission control or visual VM this is what we're used to seeing and the problem here that we all know very well",
    "start": "241840",
    "end": "247879"
  },
  {
    "text": "is that while we're able to see exactly what each thread is doing at the moment of the snapshot we don't really know why",
    "start": "247879",
    "end": "255239"
  },
  {
    "text": "it's doing it we don't have no notion is did the variable State and you know when it actually started working there's no",
    "start": "255239",
    "end": "262759"
  },
  {
    "text": "State captured in um in this trace and really for us to",
    "start": "262759",
    "end": "269120"
  },
  {
    "text": "debug and",
    "start": "269120",
    "end": "271720"
  },
  {
    "start": "295000",
    "end": "478000"
  },
  {
    "text": "within the stack Trace itself so for example in this what we do you can embed",
    "start": "330160",
    "end": "335560"
  },
  {
    "text": "into that I'll show exactly how that plays out in actual live St in a second you can put you can essentially plug",
    "start": "335560",
    "end": "341639"
  },
  {
    "text": "into this uh thread information like what's the current message ID if this for",
    "start": "341639",
    "end": "348479"
  },
  {
    "text": "example if this if this thread is the queing messages from a que and processing them what is the idea of the",
    "start": "348479",
    "end": "355000"
  },
  {
    "text": "message what C are we the queing it from what's a transaction ID when what's the",
    "start": "355000",
    "end": "360280"
  },
  {
    "text": "current time stamp because the meaning for this would be the next time that we look at this at a stack Trace instead of",
    "start": "360280",
    "end": "367080"
  },
  {
    "text": "seeing this okay what we'll be able to see is this actually when you do a",
    "start": "367080",
    "end": "373840"
  },
  {
    "text": "jstack and a bunch of other we talk about in a second it's you're moving from a state when you're not seeing any",
    "start": "373840",
    "end": "380599"
  },
  {
    "text": "state within the thread to a place where you can see ho okay this is what this SP",
    "start": "380599",
    "end": "386000"
  },
  {
    "text": "is doing so if you're looking at 100 frit take a practical example where you have a that's hanging and you just got",
    "start": "386000",
    "end": "392000"
  },
  {
    "text": "like like a thread dump of it okay if you use this technique effic efficiently within your code you can very easily",
    "start": "392000",
    "end": "398840"
  },
  {
    "text": "immediately see the threads which started um which one started uh which",
    "start": "398840",
    "end": "404240"
  },
  {
    "text": "one started first and by doing that you can say all right these are the ones which have been working for the longest",
    "start": "404240",
    "end": "409800"
  },
  {
    "text": "these are the ones are probably at a at a very high probability causing this machine to hang and then you can go in",
    "start": "409800",
    "end": "416520"
  },
  {
    "text": "and not only see the time in which they started but you can actually see all the parameters uh passed on to them so",
    "start": "416520",
    "end": "423639"
  },
  {
    "text": "instead of just getting a jstack and then try to figure out all right I'm seeing like 100 queries okay but which",
    "start": "423639",
    "end": "429479"
  },
  {
    "text": "of those are is the one that's actually hanging okay this is something that happened yesterday so I don't really",
    "start": "429479",
    "end": "434720"
  },
  {
    "text": "have any context here if you use this technique you'll imately be able to see exactly when that fright started and any",
    "start": "434720",
    "end": "439879"
  },
  {
    "text": "other relevant information to embedded to it now this will work regardless of which tool you're using meaning if",
    "start": "439879",
    "end": "445960"
  },
  {
    "text": "you're using J console or Mission Control if you're using a profile or commercial tool this will always play",
    "start": "445960",
    "end": "452800"
  },
  {
    "text": "into it so I would say that in terms of uh production debugging using thread naming in intelligent way is something",
    "start": "452800",
    "end": "459319"
  },
  {
    "text": "that is super helpful and I've used it so many times that nowadays when I debug and I see like just bare thread names",
    "start": "459319",
    "end": "465240"
  },
  {
    "text": "when I getting like a stack race or like even when a jvm crashed and looking at the hscr okay like the first thing I",
    "start": "465240",
    "end": "471960"
  },
  {
    "text": "look is the actual state that we embedded into that now this actually plays um an even a bigger",
    "start": "471960",
    "end": "480039"
  },
  {
    "start": "478000",
    "end": "539000"
  },
  {
    "text": "and what happens if code crashes for example and even you're not using like uh uh a thread dump for example if you",
    "start": "480039",
    "end": "487400"
  },
  {
    "text": "have an uncut exception in your code essentially a thread killer something that's going to essentially uh terminate",
    "start": "487400",
    "end": "493479"
  },
  {
    "text": "either the thread or return it to the thread pool so what we need to do as Engineers we need to make sure we set an",
    "start": "493479",
    "end": "500360"
  },
  {
    "text": "uncut exception Handler onto that thread and the thing that's most important that at that point when that thread crashes",
    "start": "500360",
    "end": "508199"
  },
  {
    "text": "okay there's no longer any variable State embedded into it other than than the thread name that we put in okay so I",
    "start": "508199",
    "end": "515320"
  },
  {
    "text": "think one effecting one really strong effective technique that we use in debugging production debugging a lot nowadays and is really an efficient use",
    "start": "515320",
    "end": "522640"
  },
  {
    "text": "I'm going to talk about how that also plays out in a bunch of other number a number of scenarios we actually have a",
    "start": "522640",
    "end": "528279"
  },
  {
    "text": "great blog post about it about five techniques to improve your server logging so which another four which I",
    "start": "528279",
    "end": "533360"
  },
  {
    "text": "haven't talked about here which I encourage you to uh use or to take a",
    "start": "533360",
    "end": "538640"
  },
  {
    "text": "look at another thing I want to talk about and all these stuff and thing we be talking about here the demos are",
    "start": "538640",
    "end": "544320"
  },
  {
    "start": "539000",
    "end": "772000"
  },
  {
    "text": "available on GitHub is how to use jto J stacks and thread dumps",
    "start": "544320",
    "end": "550320"
  },
  {
    "text": "better um I think no most of us have been using jstock for a long time and",
    "start": "550320",
    "end": "555519"
  },
  {
    "text": "thread dumps in general just to understand when something bad happens something crashes when something hangs",
    "start": "555519",
    "end": "560800"
  },
  {
    "text": "when looking at J trying to figure out we'll probably use uh something like a jstack or any tool essentially to give",
    "start": "560800",
    "end": "566399"
  },
  {
    "text": "us that thread dump really a production debugging Foundation there's two problems uh inherent with those kind of",
    "start": "566399",
    "end": "573079"
  },
  {
    "text": "tools especially in production the first one is there's no state right this is something you just talked about how we",
    "start": "573079",
    "end": "579360"
  },
  {
    "text": "can actually embed State into every thread um that we use the second one the second problem is that um we can only",
    "start": "579360",
    "end": "588440"
  },
  {
    "text": "use those tools okay when actually we're there mean in production when something happens we're usually not there uh to do",
    "start": "588440",
    "end": "595560"
  },
  {
    "text": "anything and we only get there in retrospect this is different than uh uh when you debuging normally and we're",
    "start": "595560",
    "end": "601440"
  },
  {
    "text": "there when the issue happens um what we want to have essentially is the ability to have preemptive J Stacks meaning",
    "start": "601440",
    "end": "607760"
  },
  {
    "text": "threads that happen when some things when bad things happen with us without us having to be there and the key to",
    "start": "607760",
    "end": "613720"
  },
  {
    "text": "doing that is another fictive technique that we've been employing quite a lot is how to programmatically create thread",
    "start": "613720",
    "end": "619720"
  },
  {
    "text": "dumps so one of the things that we do is um the ability to actually execute",
    "start": "619720",
    "end": "625680"
  },
  {
    "text": "jstack on yourself when something bad happens in your code meaning if your",
    "start": "625680",
    "end": "630720"
  },
  {
    "text": "server drops or goes above a specific application threshold in terms of",
    "start": "630720",
    "end": "635920"
  },
  {
    "text": "throughput uh you would probably want to log that and not just log that be able to log uh a stateful thread dump it'll",
    "start": "635920",
    "end": "642480"
  },
  {
    "text": "show you exactly what the server was doing at that point so if you get called in a few hours later and all and and",
    "start": "642480",
    "end": "648320"
  },
  {
    "text": "that instance has already started it's no longer happening which is the case with production bugs which are usually kind of",
    "start": "648320",
    "end": "653760"
  },
  {
    "text": "spaic this technique actually enables you to uh have the kind of the soft self",
    "start": "653760",
    "end": "659839"
  },
  {
    "text": "debug itself when something bad happens essentially be able to come in and activate jstack on yourself so you see",
    "start": "659839",
    "end": "666800"
  },
  {
    "text": "here uh just opening up a process this is an interesting technique how to get your own P using the uh runtime MX bin",
    "start": "666800",
    "end": "675560"
  },
  {
    "text": "uh Factory all this stuff is up on GitHub and then the next bit is when",
    "start": "675560",
    "end": "680959"
  },
  {
    "text": "something bad happens in your code you have a thread which is looking for a specific uh throughput threshold and if",
    "start": "680959",
    "end": "687600"
  },
  {
    "text": "something goes be below that you can activate jstack on yourself and essentially create a situation where you",
    "start": "687600",
    "end": "693360"
  },
  {
    "text": "log a pretty rich thread dump which also have state tell you exactly what that",
    "start": "693360",
    "end": "698600"
  },
  {
    "text": "server was doing at that time another example which we blogged about recently I think from the guest post is how to do",
    "start": "698600",
    "end": "704600"
  },
  {
    "text": "that when you deadlock so a lot of times one of the things that you can do actually is you can detect Deadlocks",
    "start": "704600",
    "end": "710480"
  },
  {
    "text": "internally within your application and when you deadlock you can activate a jstack on yourself because Deadlocks are",
    "start": "710480",
    "end": "717560"
  },
  {
    "text": "very sprag they every they happen every now and then and they it's hard to get to them in production when they happen",
    "start": "717560",
    "end": "722959"
  },
  {
    "text": "so one the cool things you can do much in the same way that if you fall below or go above a specific threshold or you",
    "start": "722959",
    "end": "729240"
  },
  {
    "text": "deadlock internally you can essentially uh create a jstack uh and Target at yourself and",
    "start": "729240",
    "end": "735839"
  },
  {
    "text": "this is kind of result where you'll be looking at you can actually see state for each of those threads so so far",
    "start": "735839",
    "end": "741760"
  },
  {
    "text": "we've talked about I'm going to kind of switch gears here we've talked about our ability to uh create better thread dumps",
    "start": "741760",
    "end": "747880"
  },
  {
    "text": "and to insert uh State into them the problem with this technique is that the",
    "start": "747880",
    "end": "752920"
  },
  {
    "text": "state that we're able to capture is fairly limited right we only we essentially just a string okay what",
    "start": "752920",
    "end": "758360"
  },
  {
    "text": "happens if you want to go much more Dynamic we don't know exactly what is it that we need when something bad happens",
    "start": "758360",
    "end": "765079"
  },
  {
    "text": "let's talk about a few tools that we can use essentially to get to Dynamic state within the jvm without restoring it in",
    "start": "765079",
    "end": "771920"
  },
  {
    "text": "production uh my favorite tool I would say out of all the tools are out there uh and a lot",
    "start": "771920",
    "end": "778519"
  },
  {
    "start": "772000",
    "end": "1108000"
  },
  {
    "text": "of people don't know about it uh is BET Trace so this is an amazing tool it's",
    "start": "778519",
    "end": "784680"
  },
  {
    "text": "essentially an open- Source uh application which uses a Java agent which we'll talk about in a couple of",
    "start": "784680",
    "end": "790959"
  },
  {
    "text": "minutes which essentially lets you uh run metascript kind inject code dynamically into a live jvm without",
    "start": "790959",
    "end": "798560"
  },
  {
    "text": "restarting it and without modifying uh any of its state so you're not you're doing it in a way which is read only so",
    "start": "798560",
    "end": "804800"
  },
  {
    "text": "it's production safe it's not as if you can go in and start playing with variables but it gives you a powerful ability to go into a jvm and see exactly",
    "start": "804800",
    "end": "811760"
  },
  {
    "text": "what's happening within it using an interesting uh language the con is you can only read you can only uh the kind",
    "start": "811760",
    "end": "819320"
  },
  {
    "text": "of quering or introspection you can do is read only which on the surface of things uh sounds good but there's a",
    "start": "819320",
    "end": "826399"
  },
  {
    "text": "caveat to that because just by the mere virtue of you not being able to modify",
    "start": "826399",
    "end": "831680"
  },
  {
    "text": "anything there's a ton of stuff you can't do meaning for example if you want to come in and log something at a",
    "start": "831680",
    "end": "838360"
  },
  {
    "text": "specific point want to say that JV okay log something where that happens and doing that dynamically you can't do that",
    "start": "838360",
    "end": "844320"
  },
  {
    "text": "here because logging by itself changes the application state or say for example let's say an even simpler example you",
    "start": "844320",
    "end": "850839"
  },
  {
    "text": "want to print the content uh of an array or an array list you can do a loop",
    "start": "850839",
    "end": "856240"
  },
  {
    "text": "because a loop you know has the potential essentially to go to run infinitely which From betro perspective",
    "start": "856240",
    "end": "861560"
  },
  {
    "text": "makes it unsafe having said that there's a huge list of restrictions so but don't worry it's actually super powerful tool",
    "start": "861560",
    "end": "868279"
  },
  {
    "text": "and you can do some amazing amazing things with it and there's actually techniques we talk about we can let you override those restrictions so we look",
    "start": "868279",
    "end": "876199"
  },
  {
    "text": "about when you look at beat Trace essentially what enables us to do is to write these scripts which are very",
    "start": "876199",
    "end": "882480"
  },
  {
    "text": "similar to Java code and essentially be able to take those and inject them into",
    "start": "882480",
    "end": "888199"
  },
  {
    "text": "a running jvm uh for example this script what it does it lets us uh print out to screen",
    "start": "888199",
    "end": "896199"
  },
  {
    "text": "whenever anywhere some wherever anybody in the application writes to a specific file that's pretty powerful you're",
    "start": "896199",
    "end": "902920"
  },
  {
    "text": "trying to figure out who's writing to this file under under specific conditions okay so essentially you're",
    "start": "902920",
    "end": "908519"
  },
  {
    "text": "injecting into uh dynamically without changing the jvm state without putting at risk injecting code into the into the",
    "start": "908519",
    "end": "916720"
  },
  {
    "text": "uh Java iio output stream to say all right when when this when this thing",
    "start": "916720",
    "end": "922959"
  },
  {
    "text": "happens or we're writing to a specific file let me know about it so the kind of syntax that you see it's interesting",
    "start": "922959",
    "end": "929199"
  },
  {
    "text": "essentially you're writing a little script and you're telling bet Trace where to put it in and uh and the and the language is",
    "start": "929199",
    "end": "936199"
  },
  {
    "text": "Java as you see so you're writing a little JavaScript a Java method you annotate it where where you want it to",
    "start": "936199",
    "end": "941240"
  },
  {
    "text": "be injected then you take the script you do bet trce the P appoint to your file",
    "start": "941240",
    "end": "946360"
  },
  {
    "text": "and that's betro will compile it we'll verify we let you know if if it works and if so let you inject that so get",
    "start": "946360",
    "end": "952959"
  },
  {
    "text": "another example class loading a lot of time we have no idea who's loading that class what is the stack Race by which",
    "start": "952959",
    "end": "958880"
  },
  {
    "text": "the this class is being loaded you know you're not you're getting you're getting kind debugging class loader hell if you will so this is a cool way to say well",
    "start": "958880",
    "end": "965600"
  },
  {
    "text": "you know what every time somebody's loading a file okay inject that script",
    "start": "965600",
    "end": "970759"
  },
  {
    "text": "or some when everybody's somebody's loading a class or a specific class give me a jstack which is",
    "start": "970759",
    "end": "977720"
  },
  {
    "text": "interesting because it also ties into our previous uh technique so uh this is another cool application for it another",
    "start": "977720",
    "end": "985040"
  },
  {
    "text": "one I want to show you is really powerful show me whenever I want to inject code whenever somebody allocates",
    "start": "985040",
    "end": "991639"
  },
  {
    "text": "a new character array any anywhere within the application and you can write a script here which is no I'm I'm trying",
    "start": "991639",
    "end": "997120"
  },
  {
    "text": "to figure out who's allocating large string arrays for example with a specific set of values in them okay",
    "start": "997120",
    "end": "1002959"
  },
  {
    "text": "that's hard to do anywhere within the application you can take the script essentially uh putting whatever you want",
    "start": "1002959",
    "end": "1009399"
  },
  {
    "text": "printing you know uh the the content doing in querying you can look at the stack and then inject that very quickly",
    "start": "1009399",
    "end": "1015639"
  },
  {
    "text": "now the the cool thing about betro is it comes with this huge library of samples so it's not as if you have to which",
    "start": "1015639",
    "end": "1022000"
  },
  {
    "text": "covers like a 100 different use cases from connection pools to uh overflowing",
    "start": "1022000",
    "end": "1028720"
  },
  {
    "text": "maps to memory allocations so essentially all you really have to do is familiar yourself with that library and",
    "start": "1028720",
    "end": "1034760"
  },
  {
    "text": "then just use that and then you can kind of play on those and and manipulate those so I really you really have to",
    "start": "1034760",
    "end": "1040000"
  },
  {
    "text": "start from scratch so this is a tool which I would uh really kind of gladly recommend you guys familiarize yourself",
    "start": "1040000",
    "end": "1046360"
  },
  {
    "text": "with because it's super helpful uh in situations and because by it by Design",
    "start": "1046360",
    "end": "1051679"
  },
  {
    "text": "it's not a state mutating tool it's safe for production so if you can come in and op steam you say well don't change",
    "start": "1051679",
    "end": "1057640"
  },
  {
    "text": "anything or don't do anything to jvm this is a very safe tool to use you can see here uh you can also do cool stuff",
    "start": "1057640",
    "end": "1063919"
  },
  {
    "text": "like timers and you tell them print out every millisecond there's a bazillion things this tool can do so I gladly",
    "start": "1063919",
    "end": "1070360"
  },
  {
    "text": "recom I I kind of warmly recommend that you guys look into it but as I said this",
    "start": "1070360",
    "end": "1075840"
  },
  {
    "text": "tool is limited meaning um there's a we see know there's such a",
    "start": "1075840",
    "end": "1082520"
  },
  {
    "text": "huge list of restrictions here and one of the thing that we' like to do a lot of times is you know I want when I'm debugging something in production to be",
    "start": "1082520",
    "end": "1088720"
  },
  {
    "text": "able to come in and say well you know what when something bad happens I want to log it okay I want to I want to get",
    "start": "1088720",
    "end": "1095559"
  },
  {
    "text": "it or for example when something bad happens I want to get a stateful stu uh",
    "start": "1095559",
    "end": "1100720"
  },
  {
    "text": "thread stack a dump of whatever happen so to be able to do that you cannot do",
    "start": "1100720",
    "end": "1106240"
  },
  {
    "text": "that with jstack sorry with beat Trace but you can actually use that with Java agents which is another very powerful",
    "start": "1106240",
    "end": "1112640"
  },
  {
    "start": "1108000",
    "end": "1427000"
  },
  {
    "text": "technique within Java that you can use Java agents are essentially uh an",
    "start": "1112640",
    "end": "1118760"
  },
  {
    "text": "advanced technique for modifying uh code as it's running and it has so many uses",
    "start": "1118760",
    "end": "1125960"
  },
  {
    "text": "essentially the foundation that all the P all the profiling techniques all the debuggers that we use all the commercial",
    "start": "1125960",
    "end": "1131520"
  },
  {
    "text": "tools that we use today the vast majority of them use this technique and",
    "start": "1131520",
    "end": "1136640"
  },
  {
    "text": "uh the jvm actually has two types of Agents uh that it can run for you",
    "start": "1136640",
    "end": "1142400"
  },
  {
    "text": "completely different things uh each has its own kind of strengths uh and weaknesses now the pros of using this",
    "start": "1142400",
    "end": "1150440"
  },
  {
    "text": "technique when you're trying to figure out or do something in production to get a specific State uh the pros it's",
    "start": "1150440",
    "end": "1156320"
  },
  {
    "text": "extremely powerful you can do anything you want you can change code dynamically you can say anytime somebody's invoking",
    "start": "1156320",
    "end": "1163000"
  },
  {
    "text": "a specific servit with this specific set of conditions anywhere within the app I want you to do this anytime somebody's",
    "start": "1163000",
    "end": "1169880"
  },
  {
    "text": "logging anytime somebody you you can go essentially and ask anything you can possibly",
    "start": "1169880",
    "end": "1175320"
  },
  {
    "text": "want now the cons here is that unlike bet Trace in which you use a Java syntax",
    "start": "1175320",
    "end": "1182000"
  },
  {
    "text": "to express what you want the jvm to do in runtime Java agents uh require uh",
    "start": "1182000",
    "end": "1188000"
  },
  {
    "text": "bite code which is a much much lower level which is kind of a bummer but I'll show you guys a technique how to",
    "start": "1188000",
    "end": "1193440"
  },
  {
    "text": "overcome that okay so essentially if you look at a Java agent okay",
    "start": "1193440",
    "end": "1199360"
  },
  {
    "text": "essentially it's it's it runs like a very it runs exactly like uh a standard",
    "start": "1199360",
    "end": "1204520"
  },
  {
    "text": "ja Java application but instead of having uh which will jvm will load for you in real time you can use uh J",
    "start": "1204520",
    "end": "1211280"
  },
  {
    "text": "console for example visual VM to attach a piece of a Java AG we just wrote Into the jvm live you don't have to restart",
    "start": "1211280",
    "end": "1218320"
  },
  {
    "text": "remember the whole point here is you don't have to restart your jvm at any time uh this is all live stuff so",
    "start": "1218320",
    "end": "1225360"
  },
  {
    "text": "instead of having a main which is you know the entry point which uh the jvm",
    "start": "1225360",
    "end": "1230679"
  },
  {
    "text": "will invoke for you you have something different which the jvm recognizes called a pre-main which is essentially",
    "start": "1230679",
    "end": "1236320"
  },
  {
    "text": "you get arguments but what's more important you get a reference to a point to an object called instrumentation",
    "start": "1236320",
    "end": "1242360"
  },
  {
    "text": "which essentially enables you to instrument code and it does that by letting you add object called",
    "start": "1242360",
    "end": "1248039"
  },
  {
    "text": "Transformers Transformers are essentially means for you to say all right I want to transform this class",
    "start": "1248039",
    "end": "1253559"
  },
  {
    "text": "because I want to add these bits of codes and the powerful thing here is this can be any class there doesn't have",
    "start": "1253559",
    "end": "1260640"
  },
  {
    "text": "to be code that you wrote which makes it much more powerful if you're trying to debug a third party Library that's doing",
    "start": "1260640",
    "end": "1266679"
  },
  {
    "text": "wacky stuff like a caching framework or something you're trying to figure out what's happening there uh and you don't want to change the code and you don't",
    "start": "1266679",
    "end": "1272799"
  },
  {
    "text": "want to change the code you don't want build that artifact this is a great way essentially to add in code it lets you",
    "start": "1272799",
    "end": "1278600"
  },
  {
    "text": "weave your stuff into it and the way you do that essentially all you have to do is Implement a super easy uh interface",
    "start": "1278600",
    "end": "1285679"
  },
  {
    "text": "called class file Transformer which has practically one method okay which is transform okay you can ask him I want I",
    "start": "1285679",
    "end": "1292360"
  },
  {
    "text": "want to essentially transform one class uh and I want to take its bite code and I want to mod modify as I said the",
    "start": "1292360",
    "end": "1299159"
  },
  {
    "text": "problem here is that you have to work with bite code but the good news is there are amazing libraries and tools",
    "start": "1299159",
    "end": "1304520"
  },
  {
    "text": "which automate most of that work to you for you that to the point that you get fluent and kind of uh get a bit of",
    "start": "1304520",
    "end": "1310640"
  },
  {
    "text": "practice with them it becomes sick in nature the best one which I use and a lot of tools used nowadays is called",
    "start": "1310640",
    "end": "1316960"
  },
  {
    "text": "ASM um here we see an example how essentially we're taking a class file and we're saying all right I want to",
    "start": "1316960",
    "end": "1322679"
  },
  {
    "text": "change that class file specifically I want to I want to change a method in that file so once this is",
    "start": "1322679",
    "end": "1330960"
  },
  {
    "text": "used as U this technique uses a visitor method a vis a visitor pattern sorry where essentially um you're loading up",
    "start": "1330960",
    "end": "1339240"
  },
  {
    "text": "bite code and then at the end once you know when all the vision when that method is ended essentially here what",
    "start": "1339240",
    "end": "1344600"
  },
  {
    "text": "I'm doing is I'm adding a call I'm telling you you know what weave a call into my class called hook or whatever",
    "start": "1344600",
    "end": "1349960"
  },
  {
    "text": "class that I want which essentially calls anything that I want to do so I can come in and say you know",
    "start": "1349960",
    "end": "1356760"
  },
  {
    "text": "you know what transform all the servlets in the application so whenever they start I want them to call into my code",
    "start": "1356760",
    "end": "1363520"
  },
  {
    "text": "first okay or if this is a caching Library whenever it calls into a specific method put or get from the",
    "start": "1363520",
    "end": "1369880"
  },
  {
    "text": "cache call into my code now the thing is to actually weave that stuff in can be",
    "start": "1369880",
    "end": "1375400"
  },
  {
    "text": "tricky because you have to know a bit of B code especially if you want to add like ifs stuff this is where I recommend",
    "start": "1375400",
    "end": "1380440"
  },
  {
    "text": "you guys uh take a look at this beautiful plugin that's available through ASM called the as ASM fire which",
    "start": "1380440",
    "end": "1387320"
  },
  {
    "text": "essentially enables you to write in your IDE Java code and have the plugin dynamically show you the ASM",
    "start": "1387320",
    "end": "1394159"
  },
  {
    "text": "representation of it which means all you have to do is just write the code that you want to write and then take the code",
    "start": "1394159",
    "end": "1401000"
  },
  {
    "text": "which it automatically generates for you and paste it into your visitor at that point by doing that essentially you can",
    "start": "1401000",
    "end": "1408159"
  },
  {
    "text": "uh you have the power to do anything with the jvm you can entally go to any class",
    "start": "1408159",
    "end": "1413720"
  },
  {
    "text": "any set of classes within the jvm be it your code be it yours or third party and",
    "start": "1413720",
    "end": "1419080"
  },
  {
    "text": "essentially do what you want change the code there in R time to log things to get stag Dums to query variables all",
    "start": "1419080",
    "end": "1425559"
  },
  {
    "text": "that good stuff the second uh the second group of uh agents which I want to talk about are",
    "start": "1425559",
    "end": "1432000"
  },
  {
    "start": "1427000",
    "end": "1660000"
  },
  {
    "text": "called native agents okay this is a whole another Beast this is actually if",
    "start": "1432000",
    "end": "1437919"
  },
  {
    "text": "you're if you really really go want to go super deep this is as deep as you can possibly",
    "start": "1437919",
    "end": "1444200"
  },
  {
    "text": "go with the jvm this is essentially saying I want to write code that enables you not to just debug my code or change",
    "start": "1444200",
    "end": "1451039"
  },
  {
    "text": "by code I want to take I essentially want to get access to everything that's happening within the jvm now you",
    "start": "1451039",
    "end": "1457320"
  },
  {
    "text": "probably want to have a very good reason to do that okay and something that a lot of vendors use when they built to and we",
    "start": "1457320",
    "end": "1462840"
  },
  {
    "text": "use that as well but it's a great thing to know about so essentially native agents are WR in C+ plus so that's one",
    "start": "1462840",
    "end": "1469720"
  },
  {
    "text": "big change essentially you're writing at the jvm level you're no longer uh you're no you're no longer writing in Java it's",
    "start": "1469720",
    "end": "1476120"
  },
  {
    "text": "super low level in a sense you're using something called jvmti it's a super robust API and C++ provided to you by",
    "start": "1476120",
    "end": "1482760"
  },
  {
    "text": "the jvm and the reason for it being it enables you to do super powerful stuff",
    "start": "1482760",
    "end": "1488360"
  },
  {
    "text": "for example you want to get a call back every time the jvm starts garbage collecting and or when garbage",
    "start": "1488360",
    "end": "1494360"
  },
  {
    "text": "collection starts and ends you can do that do you want to get a call back every time the J um synchronizes a",
    "start": "1494360",
    "end": "1501399"
  },
  {
    "text": "monitor you can do that you want to set a break point and pause execution programmatically when something happens",
    "start": "1501399",
    "end": "1508120"
  },
  {
    "text": "so you can debug or something you can do that as well anything that you can know anything that you've ever seen any",
    "start": "1508120",
    "end": "1514000"
  },
  {
    "text": "debugger or you know or tool do you can achieve using that uh that API you can",
    "start": "1514000",
    "end": "1519799"
  },
  {
    "text": "tell them you know what whenever somebody changes the value of this field anywhere within the app I want to get a",
    "start": "1519799",
    "end": "1525760"
  },
  {
    "text": "call back when everybody when when whenever an ception gets thrown within the jvm I want to call back on that as",
    "start": "1525760",
    "end": "1532159"
  },
  {
    "text": "well and the API is super rich and super robust so on one end it's great oh even",
    "start": "1532159",
    "end": "1538279"
  },
  {
    "text": "like if there's more stuff you're like threading jit compile you want to get a call back whenever the jvm comp jit",
    "start": "1538279",
    "end": "1544760"
  },
  {
    "text": "compile the method you can get you can do that as well um so on one hand it's",
    "start": "1544760",
    "end": "1550760"
  },
  {
    "text": "amazing because you have all these amazing capabilities but there are severe cons",
    "start": "1550760",
    "end": "1556760"
  },
  {
    "text": "here okay one it's much more complex to write meaning this to actually nail it",
    "start": "1556760",
    "end": "1562799"
  },
  {
    "text": "down and to get a live native agent running in Java is something that usually if you're trying to fix a",
    "start": "1562799",
    "end": "1568799"
  },
  {
    "text": "problem if you've gotten to a pro to know to a position this is what you're contemplating wow oh my you're dealing",
    "start": "1568799",
    "end": "1575760"
  },
  {
    "text": "with some super hard stuff um so this because it can take just a master",
    "start": "1575760",
    "end": "1581320"
  },
  {
    "text": "technique of doing that can take somewhere between days and weeks to actually get to figure out exactly how to know plug it in and get it to work",
    "start": "1581320",
    "end": "1587320"
  },
  {
    "text": "the second bit is is it's platform dependent mean you're writing in C++ so all that stuff you know you're writing",
    "start": "1587320",
    "end": "1592840"
  },
  {
    "text": "for Windows or you have to get the thing to compile and this is something we as Java develop don't think about but this",
    "start": "1592840",
    "end": "1598720"
  },
  {
    "text": "know if you want to have this thing run your or your Mac on your windows you're going to have to spend a lot of time",
    "start": "1598720",
    "end": "1604080"
  },
  {
    "text": "getting this thing to compile and the last bit which is kind of probably the kind of the the biggest",
    "start": "1604080",
    "end": "1611720"
  },
  {
    "text": "thing about it because you're writing at the at the your the codage you're going to be writing is going to operate at the",
    "start": "1611720",
    "end": "1617679"
  },
  {
    "text": "jvm level you're no longer protected by the jvm meaning if you generate you're",
    "start": "1617679",
    "end": "1624000"
  },
  {
    "text": "you're out of the land of null pointers every mistake that you're going to make is a Sig Sig and iten will kill the jvm",
    "start": "1624000",
    "end": "1630200"
  },
  {
    "text": "so you have to be super careful about that so on one hand it's like with great power come great comes great",
    "start": "1630200",
    "end": "1635840"
  },
  {
    "text": "responsibility this is the classical example you know on one and you can do amazing stuff with it on the other hand",
    "start": "1635840",
    "end": "1642080"
  },
  {
    "text": "you have to spend a lot of time on it and make sure your code is super stable uh one more one more piece uh one",
    "start": "1642080",
    "end": "1649919"
  },
  {
    "text": "more kind of uh interesting component which I wanted to cover with you guys today has to do with uh something called",
    "start": "1649919",
    "end": "1657760"
  },
  {
    "text": "the serviceability API so this is an I'll upload the example today so",
    "start": "1657760",
    "end": "1664000"
  },
  {
    "start": "1660000",
    "end": "1852000"
  },
  {
    "text": "essentially uh I know this is another extremely powerful tool that not a lot of people know about within the kind of",
    "start": "1664000",
    "end": "1671640"
  },
  {
    "text": "jvm uh ecosystem and talking specifically about hsdb as essentially",
    "start": "1671640",
    "end": "1678880"
  },
  {
    "text": "this is an amazing tool this I would say after bet trace this is probably my or and of course jstack this is my third",
    "start": "1678880",
    "end": "1685559"
  },
  {
    "text": "goto tool hsdb essentially is an outof process debugger which lets you connect to the",
    "start": "1685559",
    "end": "1691519"
  },
  {
    "text": "jvm okay and essentially introspect the entire memory spec of the jvm and do",
    "start": "1691519",
    "end": "1697240"
  },
  {
    "text": "amazing things you can query you can have like SQL like queries you essentially uh iterate through the",
    "start": "1697240",
    "end": "1702880"
  },
  {
    "text": "entire Heap to search for a specific object in the jvm so we're not just talking about a profile which shows your",
    "start": "1702880",
    "end": "1708200"
  },
  {
    "text": "all right this is how many this is how many string objects you have this is how many characters you can actually see specific variable States so this is an",
    "start": "1708200",
    "end": "1714840"
  },
  {
    "text": "extremely powerful tool not only that it comes with an extremely powerful API and I'll show you guys some very very",
    "start": "1714840",
    "end": "1720960"
  },
  {
    "text": "interesting stuff you can do with it so essentially if we look at this",
    "start": "1720960",
    "end": "1726080"
  },
  {
    "text": "tool um the kind of things that you can do here are kind of mind-blowing meaning you can actually come in and see",
    "start": "1726080",
    "end": "1733120"
  },
  {
    "text": "histograms or you can come in and say well you know what show me all the string objects that whose values or show",
    "start": "1733120",
    "end": "1738399"
  },
  {
    "text": "me all the objects where this field is equal to that you're using something called um oql object query language",
    "start": "1738399",
    "end": "1747200"
  },
  {
    "text": "which I'm not going to go into that now but it's a very it's a very easy syntax and essentially you can do that and can",
    "start": "1747200",
    "end": "1753279"
  },
  {
    "text": "of zoom in on every piece of State you want within a live JV again without restarting it uh and the thing is this",
    "start": "1753279",
    "end": "1760360"
  },
  {
    "text": "is also this runs out of process you essentially load load load up hsdb and you just uh attach to a live jvm you",
    "start": "1760360",
    "end": "1767720"
  },
  {
    "text": "don't have have specific uh permissions or something and that moment you can start getting all this data now what I",
    "start": "1767720",
    "end": "1773799"
  },
  {
    "text": "wanted to show you today is actually and I wanted to do at least one kind of live demo it show you some cool stuff that",
    "start": "1773799",
    "end": "1778880"
  },
  {
    "text": "you can do because when I started playing with this tool the thing which uh which kind of boggled my mind is like",
    "start": "1778880",
    "end": "1784640"
  },
  {
    "text": "how can an external application essentially be able to come in and introspect another J know an application",
    "start": "1784640",
    "end": "1791720"
  },
  {
    "text": "completely out of process know and be able to understand exactly what's going without with with the manage Heap",
    "start": "1791720",
    "end": "1797000"
  },
  {
    "text": "without the first application the jvm actually telling it know this is know the the segments in the memory where the",
    "start": "1797000",
    "end": "1803399"
  },
  {
    "text": "objects are you know there's got to be some way in which you know the jvm reports all that information out to hsdb",
    "start": "1803399",
    "end": "1810159"
  },
  {
    "text": "and that's super interesting to me because the kind of information you can get from that tool there's no other tool which can give that to you that level",
    "start": "1810159",
    "end": "1816200"
  },
  {
    "text": "information again it comes with the jvm I encourage you guys to play with it so the thing is and this is what I'm going",
    "start": "1816200",
    "end": "1822159"
  },
  {
    "text": "to show you is actually the JV the jvm has an amazing system okay that's",
    "start": "1822159",
    "end": "1827519"
  },
  {
    "text": "available to all the developers and you can use that to essentially expose everything that's",
    "start": "1827519",
    "end": "1832720"
  },
  {
    "text": "going on within it like did you ever think about H I actually want to run on all the objects that are currently in",
    "start": "1832720",
    "end": "1838760"
  },
  {
    "text": "the Heap regardless if I have a direct pointer to them or not because I'm looking for something or or or I want to",
    "start": "1838760",
    "end": "1845600"
  },
  {
    "text": "do a histogram you can do that with this API even programmatically the key to the",
    "start": "1845600",
    "end": "1850679"
  },
  {
    "text": "castle is the jvm exposes essentially its entire internal uh object structure",
    "start": "1850679",
    "end": "1857799"
  },
  {
    "text": "system system to anyone who's interested in it as a part of the serviceability API which means you know every object",
    "start": "1857799",
    "end": "1864600"
  },
  {
    "text": "meaning every generation uh and and in the manage de every thread every the",
    "start": "1864600",
    "end": "1870399"
  },
  {
    "text": "compiler every object within the jvm the direct object we are powering the jvm are exposed to you through that and you",
    "start": "1870399",
    "end": "1877200"
  },
  {
    "text": "can access those uh in run time so I'm going to show you uh and just to give you kind of a sense of the kind of power",
    "start": "1877200",
    "end": "1885360"
  },
  {
    "text": "the kind of power that you have you can Google all this stuff up for example you see the the jvm hotspot G interface",
    "start": "1885360",
    "end": "1891440"
  },
  {
    "text": "collected Heap so this these are all fairly documented classes a fairly document API you can use essentially in",
    "start": "1891440",
    "end": "1898880"
  },
  {
    "text": "Java to come and essentially query see all the regions within the jvm all the",
    "start": "1898880",
    "end": "1904519"
  },
  {
    "text": "memory regions or a Java thread see all the frames everything that's going on within it it's super powerful stuff and",
    "start": "1904519",
    "end": "1911120"
  },
  {
    "text": "I'll show you a demo in a second how to approach that or in this case you know this is the main class this is the",
    "start": "1911120",
    "end": "1917360"
  },
  {
    "text": "runtime hot. VM this is a Singleton which is exposed to you which you can use essentially to uh this is the keys",
    "start": "1917360",
    "end": "1924840"
  },
  {
    "text": "to the castle like the whole universe which is uh a list of all the memory regions allocated by the jvm and not",
    "start": "1924840",
    "end": "1931639"
  },
  {
    "text": "only that a way to iterate on those and actually get access to all the objects that are alive within the jvm at a",
    "start": "1931639",
    "end": "1937679"
  },
  {
    "text": "specific moment in time or get all the threads that are running and not just at",
    "start": "1937679",
    "end": "1943600"
  },
  {
    "text": "and see their uh a representation then not just as Java threads we all know but",
    "start": "1943600",
    "end": "1948880"
  },
  {
    "text": "as actual OS threads and be able to get access to all that stuff and just the amount of the amount of things you can",
    "start": "1948880",
    "end": "1955360"
  },
  {
    "text": "do here is just mindboggling just in terms of uh your ability to interact",
    "start": "1955360",
    "end": "1961600"
  },
  {
    "text": "with all the internal systems the string tables the object tap uh it's all here",
    "start": "1961600",
    "end": "1967639"
  },
  {
    "text": "what I wanted to show you for example is how a small demo where essentially you can come in",
    "start": "1967639",
    "end": "1973960"
  },
  {
    "text": "I'm going to show you demo how you can essentially run and iterate on all on all the spa on all the regions within the manager Heap in a safe way using",
    "start": "1973960",
    "end": "1981480"
  },
  {
    "text": "plain Java code so uh let's see essentially the way that you kind of uh",
    "start": "1981480",
    "end": "1988200"
  },
  {
    "text": "connect yourself into that system go to VM type system this is all the code I'm going to put this code this code is",
    "start": "1988200",
    "end": "1994240"
  },
  {
    "text": "going to be on GitHub this is all the code you need to put in place it's not a lot all you do you you access those",
    "start": "1994240",
    "end": "2000760"
  },
  {
    "text": "symbol those symbols which the jvm uh shares it which it exports to you",
    "start": "2000760",
    "end": "2006679"
  },
  {
    "text": "as native symbol symbols and essentially what you do is you do this Loop here",
    "start": "2006679",
    "end": "2012840"
  },
  {
    "text": "which iterates on all these symbols and builds a reflection map I'll show you an an example of that in a second okay",
    "start": "2012840",
    "end": "2019080"
  },
  {
    "text": "essentially kind of like a a manifest of all the classes of the jvm or where they are in memory and once you have that all",
    "start": "2019080",
    "end": "2026600"
  },
  {
    "text": "all you need to do essentially to uh do some pretty cool stuff is good",
    "start": "2026600",
    "end": "2033519"
  },
  {
    "text": "Heap scanner you initialize it and then you say all right give me the parallel",
    "start": "2033519",
    "end": "2039600"
  },
  {
    "text": "scavenger Heap okay give me the actual Hep give me a point to the actual Heap in memory give me a pointer to the",
    "start": "2039600",
    "end": "2047039"
  },
  {
    "text": "actual Young Generation give me a pointer to the old generation to mutable",
    "start": "2047039",
    "end": "2052320"
  },
  {
    "text": "space okay give me the classism this is like think about like reflecting into the jvm okay and this is all safe stuff",
    "start": "2052320",
    "end": "2059118"
  },
  {
    "text": "this is all something the jvm exports to you so you can do pretty cool things with that and then once you have those",
    "start": "2059119",
    "end": "2065000"
  },
  {
    "text": "you can say all right give me the actual address values of those in memory the actual regions within the",
    "start": "2065000",
    "end": "2071960"
  },
  {
    "text": "jvm get those map those into into simple array and start iterating on those and",
    "start": "2071960",
    "end": "2078040"
  },
  {
    "text": "search for a specific value now this is a very very this is a very simple demo but you can Leverage The serviceability",
    "start": "2078040",
    "end": "2084800"
  },
  {
    "text": "API to do sophisticated ques not to just to run on the manag Heap raw but to",
    "start": "2084800",
    "end": "2090000"
  },
  {
    "text": "actually run it as objects so you can say specifically look for specific object with specific values or",
    "start": "2090000",
    "end": "2096240"
  },
  {
    "text": "attributes and this is that's very very powerful when you're trying to debug in production and you have this technique",
    "start": "2096240",
    "end": "2102200"
  },
  {
    "text": "and you can essentially come in and incorporate uh things from the serviceability API into your code so",
    "start": "2102200",
    "end": "2108240"
  },
  {
    "text": "this is another kind of tool uh which I wanted to share with you guys um anyway uh there's a bunch of",
    "start": "2108240",
    "end": "2116560"
  },
  {
    "text": "other stuff uh which I wanted which we blog about as I said that I think going be interesting to you if you haven't",
    "start": "2116560",
    "end": "2122440"
  },
  {
    "text": "checked it out so um a bunch of series of recent post we did about like lra's expression in Java",
    "start": "2122440",
    "end": "2129320"
  },
  {
    "text": "8 and uh lot of stuff we didn't get a chance to talk about today like toolings",
    "start": "2129320",
    "end": "2135440"
  },
  {
    "text": "that you can use for debugging Productions commercial tools uh in this talk I only spoke about touch about some",
    "start": "2135440",
    "end": "2140560"
  },
  {
    "text": "of the tools that coming to jvm so this is another thing which I kind of encourage you guys to check out and um",
    "start": "2140560",
    "end": "2147400"
  },
  {
    "text": "so anyways with that I'm going to say thank you and uh hopefully see if people have any",
    "start": "2147400",
    "end": "2153760"
  },
  {
    "text": "questions no this is this is the entire premise of",
    "start": "2156640",
    "end": "2162520"
  },
  {
    "text": "be race meaning the way that it's built is it does not allow you to invoke any",
    "start": "2162520",
    "end": "2169000"
  },
  {
    "text": "code which is not in the bece libraries which are safe mean it will not compile the script it also the syntax the reason",
    "start": "2169000",
    "end": "2175040"
  },
  {
    "text": "why it's kind of Quasi Java but it's not Java it doesn't let you do keywords like for or for example or while or those",
    "start": "2175040",
    "end": "2182160"
  },
  {
    "text": "kind it doesn't let you throw an exception it doesn't let you allocate there's no new in itally what it does it",
    "start": "2182160",
    "end": "2187720"
  },
  {
    "text": "takes it it has a little compiler which takes the BP language and compiles it into bite code so there's no and it",
    "start": "2187720",
    "end": "2194359"
  },
  {
    "text": "checks to see all the stuff that you're doing is uh is safe otherwise it will",
    "start": "2194359",
    "end": "2199800"
  },
  {
    "text": "not compile so that is the whole premise and I think that's also why people especially it's an easier sell in",
    "start": "2199800",
    "end": "2206200"
  },
  {
    "text": "organization if you have like Ops people and you want to introduce this thing versus hey I just wrote a custom Java",
    "start": "2206200",
    "end": "2211760"
  },
  {
    "text": "agent and like playing around with a bite code or I just wrote a native agent I can crash the jvm at any moment in",
    "start": "2211760",
    "end": "2217240"
  },
  {
    "text": "time so like why be Trace really uh if you're go into hardcore production is a",
    "start": "2217240",
    "end": "2222440"
  },
  {
    "text": "great tool just because it's so benign so that's why it's a good tradeoff between it being benign and you being",
    "start": "2222440",
    "end": "2228960"
  },
  {
    "text": "able to introduce it into production fairly easily no the beautiful thing about",
    "start": "2228960",
    "end": "2235079"
  },
  {
    "text": "about thread naming is just it's part of the thread class all you have to do is just essentially if you haven't the only",
    "start": "2235079",
    "end": "2242560"
  },
  {
    "text": "just two things set the thread name also make sure you use a TR finally clause",
    "start": "2242560",
    "end": "2247839"
  },
  {
    "text": "I've seen people set the thread name get an arod exception essentially and then uh that thread is now dirty with a with",
    "start": "2247839",
    "end": "2254280"
  },
  {
    "text": "with the name with the nameing with a state which essentially has nothing to do with it so as long as just do try",
    "start": "2254280",
    "end": "2259319"
  },
  {
    "text": "finally clause and then set the name correctly and again this is a technique which will manifest across whatever tool",
    "start": "2259319",
    "end": "2265839"
  },
  {
    "text": "you use even in Eclipse okay even if you're doing something in even you logal debugging",
    "start": "2265839",
    "end": "2271280"
  },
  {
    "text": "you if you list like if you're looking a tomcat container you've got like 200 threads on it okay even we debugging",
    "start": "2271280",
    "end": "2276400"
  },
  {
    "text": "view the thread name will play A Part there so that jstack any commercial tool",
    "start": "2276400",
    "end": "2281720"
  },
  {
    "text": "that you might be using Mission Control visual VM all these this plays into that that's",
    "start": "2281720",
    "end": "2287640"
  },
  {
    "text": "like out of all these techniques you know some of like I would say know bet trace and this is kind of",
    "start": "2287640",
    "end": "2293680"
  },
  {
    "text": "straightforward stuff the other kind is more advanced I would say there's really no reason why not to do it I highly encourage you guys",
    "start": "2293680",
    "end": "2299920"
  },
  {
    "text": "to yeah so hsdb so hsdb okay essentially uh is readon as well hsdb um now it does",
    "start": "2299920",
    "end": "2309119"
  },
  {
    "text": "enable you to edit stuff it's actually pretty cool what they do there they use an actual windows or Linux debugger to",
    "start": "2309119",
    "end": "2315319"
  },
  {
    "text": "connect because it's an outof process connection the the sample which I showed you is actually",
    "start": "2315319",
    "end": "2320720"
  },
  {
    "text": "interprocess so within your code from within the jvm you can introspect Yourself by loading up the time by by",
    "start": "2320720",
    "end": "2327319"
  },
  {
    "text": "loading up the time the type system manually so but those tools um while bet",
    "start": "2327319",
    "end": "2334040"
  },
  {
    "text": "is read only those tools can potentially alter state hsdb is a console tool for",
    "start": "2334040",
    "end": "2339960"
  },
  {
    "text": "the most part you don't alter stating it's not the it's not the purpose of the tool but you can actually go in and change stuff I think they I think you",
    "start": "2339960",
    "end": "2346680"
  },
  {
    "text": "can do that but that's that's something which I usually would not recommend to do in uh in production ad hoc but is it",
    "start": "2346680",
    "end": "2354119"
  },
  {
    "text": "is possible so let's see be so uh be race",
    "start": "2354119",
    "end": "2360359"
  },
  {
    "text": "will work with non-sound VMS because it's uses simple Java agent Java agents will work with the non-gun VM the uh the",
    "start": "2360359",
    "end": "2367560"
  },
  {
    "text": "jvmti is a specification meaning any jvm should support it um thread names of",
    "start": "2367560",
    "end": "2374240"
  },
  {
    "text": "course because they're Java the only bit here which it sun specific is uh the serviceability agent and then hsdb",
    "start": "2374240",
    "end": "2381160"
  },
  {
    "text": "because these are not devel they're not a part of the specification so out of all these techniques they're the only ones which will open work for open jdk",
    "start": "2381160",
    "end": "2388240"
  },
  {
    "text": "and a Hotpot but if you're using like a v9 or like a or like an like a Zing uh I",
    "start": "2388240",
    "end": "2394040"
  },
  {
    "text": "can't guarantee that will work cool uh any other",
    "start": "2394040",
    "end": "2401200"
  },
  {
    "text": "questions all right three two one thank you guys a",
    "start": "2401880",
    "end": "2407730"
  },
  {
    "text": "[Applause]",
    "start": "2407730",
    "end": "2413159"
  },
  {
    "text": "lot",
    "start": "2416319",
    "end": "2419319"
  }
]