[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11840"
  },
  {
    "text": "talk is deconstructing the database and uh what it is is it's it's a look at uh",
    "start": "11840",
    "end": "17760"
  },
  {
    "text": "a new way to look at database architectures um it it happens to also be a look at um the underpinnings of the",
    "start": "17760",
    "end": "25240"
  },
  {
    "text": "architecture of datomic which is the database I've been working on for the last two years um um but it's not a",
    "start": "25240",
    "end": "30800"
  },
  {
    "text": "sales pitch for datomic it's really about the ideas underly the design",
    "start": "30800",
    "end": "36480"
  },
  {
    "text": "choices so why do we want to deconstruct the database what are we trying to accomplish what problem are we trying to",
    "start": "36480",
    "end": "41760"
  },
  {
    "start": "40000",
    "end": "40000"
  },
  {
    "text": "solve I think the fundamental problem we're trying to solve is uh the problem",
    "start": "41760",
    "end": "47399"
  },
  {
    "text": "of complexity in programming I mean how many people think dealing with databases is easy and trouble-free",
    "start": "47399",
    "end": "55640"
  },
  {
    "text": "nice uh most people don't um and there's number of sources of complexity uh",
    "start": "56239",
    "end": "62480"
  },
  {
    "text": "there's this great paper out of the tarpit U and in it the author sort of identified a bunch of problems uh",
    "start": "62480",
    "end": "69280"
  },
  {
    "text": "related to complexity in programming and and they basically said that all complexity boils down to you know two",
    "start": "69280",
    "end": "75360"
  },
  {
    "text": "two flavors one of uh one has to do with State and the other has to do with",
    "start": "75360",
    "end": "80720"
  },
  {
    "text": "control and uh the authors didn't implement it but they suggested that um",
    "start": "80720",
    "end": "87280"
  },
  {
    "text": "by adopting functional programming and declarative program programming um and a",
    "start": "87280",
    "end": "92680"
  },
  {
    "text": "relational model for data inside our applications we could get rid of get rid of this complexity uh but the and it's a",
    "start": "92680",
    "end": "101000"
  },
  {
    "text": "great paper I really recommend you read it but one of the problems with the paper is that um while they had a good",
    "start": "101000",
    "end": "106560"
  },
  {
    "text": "grip on the functional programming and declarative programming part and also",
    "start": "106560",
    "end": "111600"
  },
  {
    "text": "possibly on using a a relational model for data inside your",
    "start": "111600",
    "end": "117200"
  },
  {
    "text": "applications um they really sort of punted everybody seen the cartoon where",
    "start": "117200",
    "end": "122520"
  },
  {
    "text": "the mathematician has this chalkboard and it's full of full of stuff and then in the bottom corner it says and then a",
    "start": "122520",
    "end": "128080"
  },
  {
    "text": "miracle occurs right and then there's the answer and the big thing that was missing from their picture of the world",
    "start": "128080",
    "end": "133920"
  },
  {
    "text": "was they imagined there would be this relational model of your data that you could access in your application and",
    "start": "133920",
    "end": "139800"
  },
  {
    "text": "that somehow it got updated like somehow there something happened in the world and it was",
    "start": "139800",
    "end": "145239"
  },
  {
    "text": "different uh and and that all the all the ick related to state had to do with with however that got updated but they",
    "start": "145239",
    "end": "151959"
  },
  {
    "text": "didn't say how it would and I I would call that updating uh and the problem",
    "start": "151959",
    "end": "157599"
  },
  {
    "text": "that they avoided talking about really the problem of process in our programs in other words we know there's going to",
    "start": "157599",
    "end": "163760"
  },
  {
    "text": "be novelty in the world there are programs are going to encounter um where does that go in a model that's otherwise",
    "start": "163760",
    "end": "169080"
  },
  {
    "text": "functional right or as functional as we could make it so some of the things some of the",
    "start": "169080",
    "end": "175319"
  },
  {
    "start": "172000",
    "end": "172000"
  },
  {
    "text": "other problems we're trying to solve are things we want to obtain in in re in looking at the database in a fresh way",
    "start": "175319",
    "end": "182159"
  },
  {
    "text": "uh I think is to embrace declarative programming I agree with the paper we want declarative programming what's the",
    "start": "182159",
    "end": "188080"
  },
  {
    "text": "best example of declarative programming we encounter most often if we're not artificial",
    "start": "188080",
    "end": "193640"
  },
  {
    "text": "intelligence researchers SQL actually is the most",
    "start": "193640",
    "end": "200200"
  },
  {
    "text": "declarative thing most of us encounter on a on a day-to-day basis and and and it ends up that declarative programming",
    "start": "200200",
    "end": "207200"
  },
  {
    "text": "uh is much better at manipulating data than what we do in our languages even functional languages right in our",
    "start": "207200",
    "end": "213360"
  },
  {
    "text": "languages we sort of go through stuff but we do not have this very nice higher order set Logic for dealing with data",
    "start": "213360",
    "end": "219799"
  },
  {
    "text": "and it is superior to dealing with data even in a functional language and way Superior than dealing with data in an",
    "start": "219799",
    "end": "226920"
  },
  {
    "text": "object-oriented language we use object-oriented languages because we have them not because they're better at this they really are much worse at this",
    "start": "226920",
    "end": "234159"
  },
  {
    "text": "um one of the problems we have is with a client server database that declarative programming is something that's alien to",
    "start": "234159",
    "end": "240040"
  },
  {
    "text": "us it's sort of over there um the other problem related to the model these guys were espousing is that there's no basis",
    "start": "240040",
    "end": "247480"
  },
  {
    "text": "right um that you could rely on if I want to do a I want to calculate something related to a database what's",
    "start": "247480",
    "end": "253959"
  },
  {
    "text": "the basis for that calculation if the whole database is sort of changing all the time we're back to the problems I",
    "start": "253959",
    "end": "259160"
  },
  {
    "text": "talked about in the keynote right the the database in its entirety is a place and we have a problem of saying what's",
    "start": "259160",
    "end": "265160"
  },
  {
    "text": "the basis for our decision- making well I don't know it was whatever I saw last Tuesday when I ran this computation but I can't can't tell you now what that was",
    "start": "265160",
    "end": "273160"
  },
  {
    "start": "273000",
    "end": "273000"
  },
  {
    "text": "exactly there are problems with databases related simply to the client server nature about them being over",
    "start": "273160",
    "end": "279720"
  },
  {
    "text": "there the basis problem is one of them um the other is that our fear of round trips um and we're we're fear we're",
    "start": "279720",
    "end": "286759"
  },
  {
    "text": "afraid of round trips I think most often for performance reasons but actually the biggest roundt trip problem is that same",
    "start": "286759",
    "end": "292800"
  },
  {
    "text": "basis problem right what if I have a composite decision to make can I ask the database three independent questions",
    "start": "292800",
    "end": "299400"
  },
  {
    "text": "over time and then make get my answer no why not because stuff has",
    "start": "299400",
    "end": "305520"
  },
  {
    "text": "happened to that place in between those calls and it makes us do weird stuff in",
    "start": "305520",
    "end": "310840"
  },
  {
    "text": "particular one of the things I think it makes us do is couple questions with reporting right so let's say you have",
    "start": "310840",
    "end": "317240"
  },
  {
    "text": "your application and your application makes a decision about what entities we're going to put on sale or display on",
    "start": "317240",
    "end": "322759"
  },
  {
    "text": "this web page um do we ever you know do we send the query to find out what those entities are and then later send a query",
    "start": "322759",
    "end": "328639"
  },
  {
    "text": "to you know gather the data we need for display no a lot of times we piggyback those two things together because we're",
    "start": "328639",
    "end": "334840"
  },
  {
    "text": "afraid of the result sets not matching up anymore that's actually a fear that's born of the lack of basis again and it's",
    "start": "334840",
    "end": "342400"
  },
  {
    "text": "the biggest problem with round trips U and of course from a design perspective we know those two pieces of logic should",
    "start": "342400",
    "end": "347800"
  },
  {
    "text": "be separate they should be independent decisions one part of my app has knows the logic for deciding what should be",
    "start": "347800",
    "end": "353800"
  },
  {
    "text": "displayed and the other one knows about what what does the screen look like and what you know what do we want to show on it",
    "start": "353800",
    "end": "360639"
  },
  {
    "start": "360000",
    "end": "360000"
  },
  {
    "text": "uh we have problems related to consistency and scale I don't know if anybody saw any of the nosql talks uh",
    "start": "360639",
    "end": "366560"
  },
  {
    "text": "this week but you know a lot of times we have difficulty scaling servers that are",
    "start": "366560",
    "end": "372240"
  },
  {
    "text": "monolithic by default and uh you know we've seen no SQL we've seen the Dynamo",
    "start": "372240",
    "end": "377479"
  },
  {
    "text": "paper and some of these other Technologies and I think one of the questions we have in revisiting the architecture of a database is what's",
    "start": "377479",
    "end": "383599"
  },
  {
    "text": "possible Right how much of the value propositions of databases can we retain",
    "start": "383599",
    "end": "388639"
  },
  {
    "text": "while tapping into some of the new value propositions of distributed systems in particular their arbitrary scalability",
    "start": "388639",
    "end": "395800"
  },
  {
    "text": "and elasticity um also I think people are sort of adopting um these distributed",
    "start": "395800",
    "end": "402680"
  },
  {
    "text": "systems and getting a bunch of complexity as a result because they're trading off uh distribution and scale",
    "start": "402680",
    "end": "409919"
  },
  {
    "text": "for consistency they're losing consistency in the in the in the tradeoff but we have things like Dynamo",
    "start": "409919",
    "end": "417000"
  },
  {
    "text": "and big tables how do we use them other problems we have in general when",
    "start": "417000",
    "end": "422520"
  },
  {
    "start": "420000",
    "end": "420000"
  },
  {
    "text": "we talk about traditional databases are flexibility problems you know everybody knows the rigidity of relational",
    "start": "422520",
    "end": "428840"
  },
  {
    "text": "databases and the big rectangles and you know the the artifice you have in having",
    "start": "428840",
    "end": "434639"
  },
  {
    "text": "to form intersection record tables and things like that um things that you really shouldn't have to know about and",
    "start": "434639",
    "end": "440240"
  },
  {
    "text": "your application ends up uh becoming rigid because it it does know about",
    "start": "440240",
    "end": "445919"
  },
  {
    "text": "those uh in addition lots of things are difficult to represent in a traditional relational model like sparse data or",
    "start": "445919",
    "end": "452800"
  },
  {
    "text": "regular data hierarchical data um and things like that so we want to be more",
    "start": "452800",
    "end": "458000"
  },
  {
    "text": "flexible we want to be more agile in our development and we want to try to avoid this rigidity seeping",
    "start": "458000",
    "end": "465319"
  },
  {
    "start": "463000",
    "end": "463000"
  },
  {
    "text": "in and of course again related to the talk earlier another thing we want to try to get right if we revisit database",
    "start": "465319",
    "end": "472159"
  },
  {
    "text": "architecture is information and time in particular we want a database uh that we",
    "start": "472159",
    "end": "477720"
  },
  {
    "text": "can use to represent information we can use to obtain real memory and real",
    "start": "477720",
    "end": "483000"
  },
  {
    "text": "record keeping like we used to have before we had computers and there's lots of good reasons for this it helps",
    "start": "483000",
    "end": "489280"
  },
  {
    "text": "support decision- making as I said in my talk before and auditing there's plenty",
    "start": "489280",
    "end": "494479"
  },
  {
    "text": "of domains in which it's a requirement and people are doing this manually on top of systems that don't really understand that that's what you're",
    "start": "494479",
    "end": "499759"
  },
  {
    "text": "trying to do how many people have ever added timestamp field themselves to tables and manage it all themselves like",
    "start": "499759",
    "end": "506759"
  },
  {
    "text": "people have right how many people have written the query that get you now out of that table yeah how many people have",
    "start": "506759",
    "end": "512399"
  },
  {
    "text": "tuned that yeah that's a nightmare anybody like that query tuning that query is brutal right the contention uh",
    "start": "512399",
    "end": "521360"
  },
  {
    "text": "is terrible especially if it's a it's if it's also an online system and the last thing I think we'd",
    "start": "521360",
    "end": "527560"
  },
  {
    "start": "526000",
    "end": "526000"
  },
  {
    "text": "like from databases uh that maybe we don't think about now because we don't connect the to necessarily I think is a",
    "start": "527560",
    "end": "534519"
  },
  {
    "text": "is a strong model for perception and reaction right perception is part of what I was talking about before getting getting that stable basis for decision",
    "start": "534519",
    "end": "541120"
  },
  {
    "text": "making reaction is more like Eventing right things are changing in the world how do we see change in a",
    "start": "541120",
    "end": "548160"
  },
  {
    "text": "traditional client server database what do we do it's the big four-letter word begins",
    "start": "548160",
    "end": "555000"
  },
  {
    "text": "with p and ends with o poll we poll very gross right so we'd",
    "start": "555000",
    "end": "561560"
  },
  {
    "text": "like to be able to make reactive systems that don't pull uh and we'd like those systems to get consistent views of the",
    "start": "561560",
    "end": "567279"
  },
  {
    "text": "world which is another difficult thing even if you build even if you build manually say a trigger based Eventing",
    "start": "567279",
    "end": "572839"
  },
  {
    "text": "system right people have done that right so triggers and they say oh something changed it's like okay great well in",
    "start": "572839",
    "end": "578680"
  },
  {
    "text": "between when they told you something changed you and you're wanting to make a decision on the basis of it maybe you're",
    "start": "578680",
    "end": "583920"
  },
  {
    "text": "going to go back to the database what's the basis now for that did it change again between when you you know what's",
    "start": "583920",
    "end": "589640"
  },
  {
    "text": "in Flight you have no way to know this changed and that change was related to",
    "start": "589640",
    "end": "595519"
  },
  {
    "text": "the database at this point in time and you can go back and ask questions to figure out what was going on and what either caused that change or what the",
    "start": "595519",
    "end": "602160"
  },
  {
    "text": "effects of that change should be or how it relates to the rest of the world you have no way to do that you just were",
    "start": "602160",
    "end": "607399"
  },
  {
    "text": "told something changed and maybe a value about it but not where that's situated relative to the rest of the world so we",
    "start": "607399",
    "end": "614480"
  },
  {
    "text": "want to do that better so if we're going to uh take a database apart we have to look at how",
    "start": "614480",
    "end": "620720"
  },
  {
    "start": "616000",
    "end": "616000"
  },
  {
    "text": "it's put together and this is just this is not a particular database we're talking about here this should be",
    "start": "620720",
    "end": "625880"
  },
  {
    "text": "familiar though to anybody who's dealt with traditional databases and how how they're laid out I'm sorry if this spont",
    "start": "625880",
    "end": "631079"
  },
  {
    "text": "is too small um and the and the guts the meat the meat of it is at the bottom so we'll",
    "start": "631079",
    "end": "636959"
  },
  {
    "text": "start at the bottom uh a database certainly is something in general we",
    "start": "636959",
    "end": "642320"
  },
  {
    "text": "expect to be durable so most of the traditional databases are built around",
    "start": "642320",
    "end": "647480"
  },
  {
    "text": "there is this disc and we're going to we're going to put that disc in a box and that box is going to be in charge of",
    "start": "647480",
    "end": "653040"
  },
  {
    "text": "the disc and everything comes from there so there's some IO subsystem that deals",
    "start": "653040",
    "end": "658440"
  },
  {
    "text": "with the dis right and then there's sort of three fundamental well two fundamental uh sets",
    "start": "658440",
    "end": "666440"
  },
  {
    "text": "of services the database will provide they both rely on the this third the first is there's a trans transactional",
    "start": "666440",
    "end": "673240"
  },
  {
    "text": "component that accepts novelty and integrates Novelty into the view of the world right and then there's a query",
    "start": "673240",
    "end": "680959"
  },
  {
    "text": "support component that accepts questions and gives you back answers based upon the values here and both especially the",
    "start": "680959",
    "end": "689440"
  },
  {
    "text": "query side it needs to have storage like if you just took everything that came into a database and you just appended it",
    "start": "689440",
    "end": "694959"
  },
  {
    "text": "to a flat file how good would the query engine be not very right right so leverage",
    "start": "694959",
    "end": "702440"
  },
  {
    "text": "comes from indexing leverage comes from organizing the way we store the data such that a query engine has um sorted",
    "start": "702440",
    "end": "710560"
  },
  {
    "text": "views of things that it can use to answer questions uh quickly and that's",
    "start": "710560",
    "end": "716000"
  },
  {
    "text": "the leverage of a database I think we've gone to key value stores that have almost no leverage and we're still",
    "start": "716000",
    "end": "722240"
  },
  {
    "text": "calling them databases but uh in my mind uh this is what made a database a",
    "start": "722240",
    "end": "727360"
  },
  {
    "text": "database otherwise we had file systems and all other kinds of things before we had databases and we didn't call them databases um why are we calling key",
    "start": "727360",
    "end": "734480"
  },
  {
    "text": "value stores databases now uh so in general traditionally this was a big",
    "start": "734480",
    "end": "740519"
  },
  {
    "text": "monolithic thing there was a big sophisticated or complicated process",
    "start": "740519",
    "end": "745720"
  },
  {
    "text": "that knew about all this stuff and had an integrated view of how they would work and you know because this was expensive",
    "start": "745720",
    "end": "752199"
  },
  {
    "text": "and the memory it needed was expensive and the Box on which it ran was expensive this was a very special thing",
    "start": "752199",
    "end": "758560"
  },
  {
    "text": "you had one of them and then you had clients which were somewhat more lightweight and they communicate using",
    "start": "758560",
    "end": "765440"
  },
  {
    "text": "usually a foreign foreign language right so how do you communicate with a SQL database strings in a foreign language",
    "start": "765440",
    "end": "772360"
  },
  {
    "text": "you send it over and it it does something right same thing how do you communicate",
    "start": "772360",
    "end": "777800"
  },
  {
    "text": "queries you send strings over in a foreign language and you get back well",
    "start": "777800",
    "end": "784160"
  },
  {
    "text": "who knows right maybe it maybe the API makes it look like a result set to you",
    "start": "784160",
    "end": "789680"
  },
  {
    "text": "you know up at the Java level and then we know as we get a lot of apps going",
    "start": "789680",
    "end": "795000"
  },
  {
    "text": "this unique resource gets taxed right it's getting everybody's as everybody's putting all the data in there and",
    "start": "795000",
    "end": "801000"
  },
  {
    "text": "everybody's asking questions there we know the questions dominate uh in most",
    "start": "801000",
    "end": "806240"
  },
  {
    "text": "applications uh are read read oriented so so most applications eventually end",
    "start": "806240",
    "end": "811440"
  },
  {
    "text": "up adding another tier right so if it if it's very costly for me to ask questions",
    "start": "811440",
    "end": "816519"
  },
  {
    "text": "I'm going to store the answers to those questions in a cach so maybe next time I want to ask that question I'll check the",
    "start": "816519",
    "end": "823000"
  },
  {
    "text": "cash first otherwise I'll incur the cost of going all the way to the server and what goes in the",
    "start": "823000",
    "end": "828959"
  },
  {
    "text": "cache what form does it take when does it get",
    "start": "828959",
    "end": "835120"
  },
  {
    "text": "invalidated whose problem are all these questions yours your problem or maybe you buy into",
    "start": "835120",
    "end": "842680"
  },
  {
    "text": "some fancy omm that's makes it your problem with another layer on top of your problem now you have two problems",
    "start": "842680",
    "end": "850880"
  },
  {
    "text": "yeah it's up to you there's no there's no who knows it's definitely not the server job right we this I would call",
    "start": "850880",
    "end": "858440"
  },
  {
    "text": "caching over the database and there are some other things that database comes with we don't",
    "start": "858440",
    "end": "864519"
  },
  {
    "start": "862000",
    "end": "862000"
  },
  {
    "text": "necessarily uh think about uh certainly most of these databases most databases",
    "start": "864519",
    "end": "870639"
  },
  {
    "text": "have a data model um it can be a really lowlevel thing that is about how things",
    "start": "870639",
    "end": "876279"
  },
  {
    "text": "are stored um or an API kind of thing or can be a relatively high level thing I",
    "start": "876279",
    "end": "881480"
  },
  {
    "text": "mean it's certainly a great trait of SQL databases that they're based upon a",
    "start": "881480",
    "end": "886720"
  },
  {
    "text": "mathematical foundation in relational algebra that is a proper data model with a bunch of great characteristics um that",
    "start": "886720",
    "end": "893480"
  },
  {
    "text": "allow you to write that those declarative programs um but they also",
    "start": "893480",
    "end": "898680"
  },
  {
    "text": "contain a a state model uh and in fact relational algebra is a lot like that old paper right relational algebra is",
    "start": "898680",
    "end": "905560"
  },
  {
    "text": "like perfect it says there is this state of the database and all this algebra applies it's math it's great right how",
    "start": "905560",
    "end": "912759"
  },
  {
    "text": "do you get a new state of the database well a miracle occurs and then",
    "start": "912759",
    "end": "918000"
  },
  {
    "text": "you have a new relational world and then you have that but update is not",
    "start": "918000",
    "end": "923680"
  },
  {
    "text": "mathematical there's there's not the same model behind it um so there is a statement model and in general not all",
    "start": "923680",
    "end": "930759"
  },
  {
    "text": "the time that's an update in place model that's subject to all the kind of criticisms I gave in uh in the",
    "start": "930759",
    "end": "937959"
  },
  {
    "text": "keynote what's usually missing is an information model and here I mean",
    "start": "937959",
    "end": "943319"
  },
  {
    "text": "something precise that I said before uh um is anybody not in the keynote because",
    "start": "943319",
    "end": "948920"
  },
  {
    "text": "I'm just referring to it everybody is okay great uh and and by an information model I mean the ability to store facts",
    "start": "948920",
    "end": "956519"
  },
  {
    "text": "um to not have things replace other things in place to have some temporal notion to what's being stored that's",
    "start": "956519",
    "end": "961800"
  },
  {
    "text": "what I would consider a true information model that's usually missing from the databases so we want to we want to solve",
    "start": "961800",
    "end": "969199"
  },
  {
    "start": "967000",
    "end": "967000"
  },
  {
    "text": "all of this we want more scalability we want to try to leverage these new systems we'd like to have more",
    "start": "969199",
    "end": "974560"
  },
  {
    "text": "declarative programming in our applications we'd like to have a proper information model um maybe we don't want",
    "start": "974560",
    "end": "981040"
  },
  {
    "text": "to program with strings anymore what are the challenges we're going to face um if we Tred to do that with this approach",
    "start": "981040",
    "end": "988040"
  },
  {
    "text": "the biggest one by by far is definitely the the state model the fact that it's update in place and again as I said in",
    "start": "988040",
    "end": "995880"
  },
  {
    "text": "my talk there's a great reason why traditional databases work the way they",
    "start": "995880",
    "end": "1001199"
  },
  {
    "text": "do because when they were invented 30 or more years ago these things these",
    "start": "1001199",
    "end": "1006920"
  },
  {
    "text": "resources were scarce you couldn't make a database that said I'll just keep everything you know because you had like",
    "start": "1006920",
    "end": "1012680"
  },
  {
    "text": "this tiny little disc uh so they invented all this update and place",
    "start": "1012680",
    "end": "1018160"
  },
  {
    "text": "technology usually inside a database there are these be trees they use blocks on the disc they'll reuse the blocks",
    "start": "1018160",
    "end": "1024760"
  },
  {
    "text": "they'll fill the blocks they're rewriting them they're usually interacting at a pretty intimate level with the memory management on the",
    "start": "1024760",
    "end": "1031038"
  },
  {
    "text": "computer and because they're updating in place and they're trying to serve multiple clients they have a huge amount",
    "start": "1031039",
    "end": "1037918"
  },
  {
    "text": "of coordination overhead uh to do that and that slows them down",
    "start": "1037919",
    "end": "1045558"
  },
  {
    "text": "significantly so the approach we're going to take in trying to break things apart is going to be based on these sort of",
    "start": "1045559",
    "end": "1051760"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "four three three principles one is to move to an information model now I made",
    "start": "1051760",
    "end": "1057320"
  },
  {
    "text": "claims during my talk that using values and and having an information model has",
    "start": "1057320",
    "end": "1062679"
  },
  {
    "text": "architectural implications and and if you take away nothing from this talk I would I would",
    "start": "1062679",
    "end": "1068720"
  },
  {
    "text": "hope you would take away that this is a real example of that um that in action",
    "start": "1068720",
    "end": "1075360"
  },
  {
    "text": "uh that adopting a value oriented model has architecture benefits really",
    "start": "1075360",
    "end": "1080480"
  },
  {
    "text": "substantial ones so we're going to move to an information model we'll see how that plays out we're going to split",
    "start": "1080480",
    "end": "1086120"
  },
  {
    "text": "process and perception and I I have a diagram later that will make that clearer um we're going to treat our use",
    "start": "1086120",
    "end": "1094360"
  },
  {
    "text": "of storage immutably in other words we're going to store stuff but once we've stored it we're not going to",
    "start": "1094360",
    "end": "1100240"
  },
  {
    "text": "change it and the other half of doing that is that in order to deal with process we're",
    "start": "1100240",
    "end": "1106880"
  },
  {
    "text": "going to have to manage no novelty in memory uh for for a window of time and I'm going to break all these down so to",
    "start": "1106880",
    "end": "1115039"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "move to an information model means to move to uh a data model that is fundamentally about facts so we're going",
    "start": "1115039",
    "end": "1121720"
  },
  {
    "text": "to say we're going to have a database of facts and we're going to that means sucking the structure out right because",
    "start": "1121720",
    "end": "1127200"
  },
  {
    "text": "when you look at a relational row or or a document there's nothing fact like about that right it doesn't say when and",
    "start": "1127200",
    "end": "1135520"
  },
  {
    "text": "the granularity of the fact is this composite thing so you know if I had a whole row for you and you changed your",
    "start": "1135520",
    "end": "1141520"
  },
  {
    "text": "email and email is one of the columns you know where the the row is not a fact it's not the granularity of a fact it's",
    "start": "1141520",
    "end": "1148000"
  },
  {
    "text": "bigger than a fact right maybe it's a set of facts um so we want to get down to single facts that's going to be",
    "start": "1148000",
    "end": "1154400"
  },
  {
    "text": "important for efficiency reasons but it also dramatically simplifies stuff so how many people know what rdf",
    "start": "1154400",
    "end": "1161000"
  },
  {
    "text": "is not too many okay so rdf is is an attempt to um have a universal schema",
    "start": "1161000",
    "end": "1167280"
  },
  {
    "text": "for information and they use something called triples which are subject predicate object um I I I argued during",
    "start": "1167280",
    "end": "1175360"
  },
  {
    "text": "the speaker um Summit Sunday that that's not enough because it doesn't let you",
    "start": "1175360",
    "end": "1182000"
  },
  {
    "text": "represent facts because it doesn't have any temporal aspect so if you take a step back from that and say that's",
    "start": "1182000",
    "end": "1187159"
  },
  {
    "text": "generally a good idea it seems Atomic um we really do want Atomic facts uh we",
    "start": "1187159",
    "end": "1193280"
  },
  {
    "text": "label them we call them datums um and we just spell it differently so we can say datum because if we spelled it D AUM the",
    "start": "1193280",
    "end": "1201080"
  },
  {
    "text": "plural would be data and then we'd be into people don't know what that means even though they say it all the time so",
    "start": "1201080",
    "end": "1206840"
  },
  {
    "text": "we have datum which is an atomic fact and datums are more than one fact and it's just an entity an attribute of",
    "start": "1206840",
    "end": "1212679"
  },
  {
    "text": "value and then some temporal component it ends up that you could just put the time stamp there but that doesn't give",
    "start": "1212679",
    "end": "1220120"
  },
  {
    "text": "you a lot of power If instead you say uh well when this thing this thing came in",
    "start": "1220120",
    "end": "1225679"
  },
  {
    "text": "as part of a transaction I can sort the transaction there if your transactions are first class and",
    "start": "1225679",
    "end": "1231240"
  },
  {
    "text": "they are in this system you can put the time on the transaction but you could also put who said it on the transaction",
    "start": "1231240",
    "end": "1237880"
  },
  {
    "text": "or where it came from or whether or not it's been audited or any other kind of Providence or other characteristics so",
    "start": "1237880",
    "end": "1243799"
  },
  {
    "text": "that's what we do but you can read this for the purposes of this talk because I'm not going to talk a lot about that other stuff as that t part is time it's",
    "start": "1243799",
    "end": "1251799"
  },
  {
    "text": "a path to when and that's the smallest fact okay",
    "start": "1251799",
    "end": "1259159"
  },
  {
    "start": "1259000",
    "end": "1259000"
  },
  {
    "text": "so now we have the problem of the state the database State problem we say we want to have the database fundamentally",
    "start": "1259159",
    "end": "1265200"
  },
  {
    "text": "be a value we want it to be immutable um it seems to be a contradiction in terms because we know there's going to be",
    "start": "1265200",
    "end": "1270760"
  },
  {
    "text": "novelty right our business is going to run and we're going to sell more stuff or get new products or have new customers and that novelty that newness",
    "start": "1270760",
    "end": "1278080"
  },
  {
    "text": "has to go somewhere so how does that jive with the notion of a value and the",
    "start": "1278080",
    "end": "1283240"
  },
  {
    "text": "best analogy I could come up with was a tree ring one right if you think of the database has an ever expanding value so",
    "start": "1283240",
    "end": "1290600"
  },
  {
    "text": "it never updates in place it only expands it only grows outward right that it grows by ation of facts we're just",
    "start": "1290600",
    "end": "1297559"
  },
  {
    "text": "going to add more facts we never go back inside just like the tree rings you don't go back inside the tree rings you",
    "start": "1297559",
    "end": "1303400"
  },
  {
    "text": "just add you add more Rings um we end up with something that really smells like a",
    "start": "1303400",
    "end": "1309400"
  },
  {
    "text": "value and will function as a value right we're only ACC creating the past doesn't",
    "start": "1309400",
    "end": "1314440"
  },
  {
    "text": "change so the core upon which we're building never changes and that's really the key um characteristic we expect of a",
    "start": "1314440",
    "end": "1321520"
  },
  {
    "text": "value that anything I've seen before will never change um the implications",
    "start": "1321520",
    "end": "1326640"
  },
  {
    "text": "are as we have novelty you know new stuff means new space like I said in my talk and this this is sort of Super Key",
    "start": "1326640",
    "end": "1335600"
  },
  {
    "text": "we're going to get a lot of Freedom by moving away from places right at this",
    "start": "1335600",
    "end": "1342159"
  },
  {
    "text": "point the other problem we have is how do we represent change so we're gonna we said we're going to accrete facts so",
    "start": "1342559",
    "end": "1348080"
  },
  {
    "text": "what is what is the granularity of change right we're used to saying update this place and here's the address of the",
    "start": "1348080",
    "end": "1353960"
  },
  {
    "text": "place or here's the primary key of the place you know go do something there if we don't want to say that anymore if we",
    "start": "1353960",
    "end": "1360440"
  },
  {
    "text": "just want to accrete facts then what is the fundamental unit of novelty you know if I have a new customer what am I going",
    "start": "1360440",
    "end": "1366440"
  },
  {
    "text": "to say to the database and what we're going to say is that at the bottom we can represent this",
    "start": "1366440",
    "end": "1372840"
  },
  {
    "text": "process right so this is the problem we're trying to solve right the novelty problem we're going to say we can represent novelty by just as assertions",
    "start": "1372840",
    "end": "1380440"
  },
  {
    "text": "or retractions of facts right this new thing is true this new thing is true",
    "start": "1380440",
    "end": "1385760"
  },
  {
    "text": "that thing that was true is not true anymore okay still a fact that it was true from then to here it was true and",
    "start": "1385760",
    "end": "1395200"
  },
  {
    "text": "this ends up being the minimal possible representation of process right with this you can build on you can express",
    "start": "1395200",
    "end": "1402159"
  },
  {
    "text": "anything in these terms and so we'll say that all the other Transformations will expand into this and show you that a",
    "start": "1402159",
    "end": "1409000"
  },
  {
    "text": "little bit later the other key thing we want to do with process is we want to reify it how",
    "start": "1409000",
    "end": "1414320"
  },
  {
    "text": "many people have heard of like event sourcing or or anything like that so one of the ideas behind it is that um if you",
    "start": "1414320",
    "end": "1420880"
  },
  {
    "text": "talk about a database and you just look at a database um that's been running for a while and that's how a lot of activity",
    "start": "1420880",
    "end": "1426799"
  },
  {
    "text": "when you look at it and you want to know what happened how do you figure that out how do how did it become what it",
    "start": "1426799",
    "end": "1435200"
  },
  {
    "text": "is you have no resources for doing that right unless you know how to read the logs right maybe there's a transaction",
    "start": "1435200",
    "end": "1440799"
  },
  {
    "text": "log and and maybe there's a way to to read read that but a lot of times you're going to have to sort of Replay that",
    "start": "1440799",
    "end": "1446360"
  },
  {
    "text": "because that's just a re that's just a successive set of modifications to",
    "start": "1446360",
    "end": "1451520"
  },
  {
    "text": "places it's really hard to read that and understand what happened if instead we say we're going to reify process when",
    "start": "1451520",
    "end": "1456799"
  },
  {
    "text": "you add a new customer there's going to be something that says there is a new customer that customer's name is Sally",
    "start": "1456799",
    "end": "1462200"
  },
  {
    "text": "that's what's going to be in a reified version of process that says process is just assertions and retractions of facts",
    "start": "1462200",
    "end": "1469080"
  },
  {
    "text": "so that's great so we want to make a thing out of that because that's something that we could store we can look at we can understand when we look",
    "start": "1469080",
    "end": "1475279"
  },
  {
    "text": "at it this this is the this change happened we added this we retracted that email we added a new email we sold this",
    "start": "1475279",
    "end": "1483520"
  },
  {
    "text": "we did this we did this fact fact fact fact fact these things happened right it's an information system fact fact",
    "start": "1483520",
    "end": "1489640"
  },
  {
    "text": "fact fact fact um and that's going to be great because that's going to let us do some other cool things later like",
    "start": "1489640",
    "end": "1496440"
  },
  {
    "text": "events the accretion proc process one of the um things that uh is important to",
    "start": "1496440",
    "end": "1502760"
  },
  {
    "start": "1497000",
    "end": "1497000"
  },
  {
    "text": "understand is that it really does add to what's already there so that means that",
    "start": "1502760",
    "end": "1507880"
  },
  {
    "text": "if you ever look at the view of the database at any point in time you will be able to access the past it's still",
    "start": "1507880",
    "end": "1513679"
  },
  {
    "text": "inside just like the inner tree rings are still there it's not like there's a snapshot from last Tuesday and then one",
    "start": "1513679",
    "end": "1519559"
  },
  {
    "text": "from you know Wednesday and one from Thursday and one from Friday and each one um has more stuff in it uh it it's",
    "start": "1519559",
    "end": "1526840"
  },
  {
    "text": "as if anytime you look at the database it includes all of history inside of it and this is important for an information",
    "start": "1526840",
    "end": "1533120"
  },
  {
    "text": "model where we want to give people decision-mak capabilities that say how much have things changed in this window",
    "start": "1533120",
    "end": "1538600"
  },
  {
    "text": "of time or count how many of those that happened over a window of time we need",
    "start": "1538600",
    "end": "1543760"
  },
  {
    "text": "all the time in one place we don't want a bunch of Independent Records here's Tuesdays facts and Wednesdays and",
    "start": "1543760",
    "end": "1548880"
  },
  {
    "text": "Thursdays separately so we have this growing tree ring thing all right so",
    "start": "1548880",
    "end": "1554399"
  },
  {
    "start": "1554000",
    "end": "1554000"
  },
  {
    "text": "that's our plan how do we do it we're talking more now at the uh at the model level right we want to",
    "start": "1554399",
    "end": "1562080"
  },
  {
    "text": "deconstruct this now we're looking just the server component right indexing transactions query IO and disk and I",
    "start": "1562080",
    "end": "1569320"
  },
  {
    "text": "think you can divide this up into halves right what I said before we want to separate process from",
    "start": "1569320",
    "end": "1575799"
  },
  {
    "text": "perception right because there's a process part of this right novelty processing I have a new thing it has to",
    "start": "1575799",
    "end": "1581880"
  },
  {
    "text": "go through a transaction processing thing maybe indexing happens on it then or not don't know it's an open question",
    "start": "1581880",
    "end": "1587200"
  },
  {
    "text": "at this point in the talk and then this output to the storage system right completely independent of",
    "start": "1587200",
    "end": "1593480"
  },
  {
    "text": "that is a perception characteristic to the use of databases right I have a question want to ask the question maybe",
    "start": "1593480",
    "end": "1600399"
  },
  {
    "text": "that leverages indexes almost definitely it does and there's going to be input",
    "start": "1600399",
    "end": "1605600"
  },
  {
    "text": "this is all process relative input to me right as I read back from Storage we can",
    "start": "1605600",
    "end": "1611240"
  },
  {
    "text": "separate these two things out and we can only because we've adopted an information model and a",
    "start": "1611240",
    "end": "1617240"
  },
  {
    "text": "mutability so the model we're we're trying to get to and again this is not yet a physical model is one where we can",
    "start": "1617240",
    "end": "1623960"
  },
  {
    "start": "1618000",
    "end": "1618000"
  },
  {
    "text": "Empower applications and you can read this as application servers or analytics servers or anything you want it's not",
    "start": "1623960",
    "end": "1629679"
  },
  {
    "text": "like a desktop application right we want to empower um independent applications",
    "start": "1629679",
    "end": "1635480"
  },
  {
    "text": "with as much of these capabilities as we can we want them to be able to perceive change we want them to be able to react",
    "start": "1635480",
    "end": "1641880"
  },
  {
    "text": "to it we want them to be able to independently remember anything that's important to their decision making process and we want them to make",
    "start": "1641880",
    "end": "1647799"
  },
  {
    "text": "decision and then possibly affect the process that they're sharing what we want to do",
    "start": "1647799",
    "end": "1654600"
  },
  {
    "text": "and obviously there's going to be some shared resources here right there's got to be some coordination related around",
    "start": "1654600",
    "end": "1661200"
  },
  {
    "text": "change right and there's going to have to be some shared resource around storage right we want to minimize the",
    "start": "1661200",
    "end": "1668919"
  },
  {
    "text": "coordination that's necessary to support this but that's the model we want because now if we can do this if we want",
    "start": "1668919",
    "end": "1675919"
  },
  {
    "text": "a more powerful system what do we have to do if we want more query capability what",
    "start": "1675919",
    "end": "1682279"
  },
  {
    "text": "do we need to do just add more of these guys we don't really care about this growing because we're not asking it to",
    "start": "1682279",
    "end": "1688720"
  },
  {
    "text": "do much just some coordination so if we revisit that whole tree ring thing when now we're into",
    "start": "1688720",
    "end": "1694960"
  },
  {
    "text": "implementation details um how do we represent State how do we represent this immutable expanding value right we know",
    "start": "1694960",
    "end": "1703279"
  },
  {
    "text": "one thing whatever representation we use it has to be organized to support query",
    "start": "1703279",
    "end": "1708840"
  },
  {
    "text": "right has to be sorted in some way that's that's really sort of the fundamental leverage capability we have",
    "start": "1708840",
    "end": "1714240"
  },
  {
    "text": "is sorting things and uh it ends up that there's a technique that can be used you know it's used in functional programming",
    "start": "1714240",
    "end": "1720399"
  },
  {
    "text": "quite often uh called persistent data structures and the word persistent there does not mean durable it's a different",
    "start": "1720399",
    "end": "1727760"
  },
  {
    "text": "notion of persistence and it has to do with the fact that you can represent a large mutable structure and it doesn't",
    "start": "1727760",
    "end": "1733600"
  },
  {
    "text": "matter whether it's supposed to represent an array or a uh map uh you can represent almost",
    "start": "1733600",
    "end": "1741279"
  },
  {
    "text": "anything or sorted set would be another example we're going to use as a tree and you can and you can represent",
    "start": "1741279",
    "end": "1748559"
  },
  {
    "text": "that immutably by using something called structural sharing so this tree could",
    "start": "1748559",
    "end": "1753760"
  },
  {
    "start": "1749000",
    "end": "1749000"
  },
  {
    "text": "represent anything it could represent for instance a sorted set and this is the view of it we have right now and it",
    "start": "1753760",
    "end": "1759480"
  },
  {
    "text": "contains all these nodes if we want to add another child to this node so we",
    "start": "1759480",
    "end": "1765720"
  },
  {
    "text": "want to make a new version of the set we don't want to updated in place we're going to need to allocate a new node for",
    "start": "1765720",
    "end": "1772200"
  },
  {
    "text": "that leaf and then copy the path to the root then we have a new tree that has",
    "start": "1772200",
    "end": "1779039"
  },
  {
    "text": "this new piece of information in it and substantially share structure with the old tree because and we can do that",
    "start": "1779039",
    "end": "1785360"
  },
  {
    "text": "because why it's all immutable right so this is the underpinnings of what are called",
    "start": "1785360",
    "end": "1791440"
  },
  {
    "text": "persistent data structures so we can do this in memory it's done in memory by most functional programming languages",
    "start": "1791440",
    "end": "1797840"
  },
  {
    "text": "what we're going to start to do though is do this on disk so we'll have a really persistent or persistent",
    "start": "1797840",
    "end": "1803919"
  },
  {
    "text": "persistent or I'd rather say durable persistent data structures that have",
    "start": "1803919",
    "end": "1809039"
  },
  {
    "text": "this kind of shape so um you saw in the earlier",
    "start": "1809039",
    "end": "1814480"
  },
  {
    "start": "1811000",
    "end": "1811000"
  },
  {
    "text": "diagram right we had a server and it had IO and a disk right I don't want I don't",
    "start": "1814480",
    "end": "1820880"
  },
  {
    "text": "want to know about iOS and discs anymore um there was a paper recently that came out it said dis locality considered",
    "start": "1820880",
    "end": "1827080"
  },
  {
    "text": "irrelevant right it's another one of these old Notions that's now",
    "start": "1827080",
    "end": "1833159"
  },
  {
    "text": "dying right it used to be boy if you're not the machine that has the discs",
    "start": "1833159",
    "end": "1839360"
  },
  {
    "text": "you're at a tremendous disadvantage from a computational perspective because that",
    "start": "1839360",
    "end": "1844480"
  },
  {
    "text": "machine it's got you know it's got a card that's attached to the dis can get the data up into memory it's lightning",
    "start": "1844480",
    "end": "1850279"
  },
  {
    "text": "fast that machine has privileged access to that dis if you try to access that",
    "start": "1850279",
    "end": "1855679"
  },
  {
    "text": "data on the dis from another machine you're going to be paying a huge overhead well now how much faster are",
    "start": "1855679",
    "end": "1862919"
  },
  {
    "text": "networks way faster and what's the differential between disc and memory",
    "start": "1862919",
    "end": "1868039"
  },
  {
    "text": "huge it ends up that anybody that needs to access the dis is losing and the guy",
    "start": "1868039",
    "end": "1873960"
  },
  {
    "text": "who has the dis in the same box is only losing very very slightly less than anybody else would lose so it doesn't",
    "start": "1873960",
    "end": "1880600"
  },
  {
    "text": "matter anymore that kind of locality is not the way we should be aring architecting systems we don't care about",
    "start": "1880600",
    "end": "1886080"
  },
  {
    "text": "it care a lot more about uh putting data into memory and having good locality in",
    "start": "1886080",
    "end": "1891159"
  },
  {
    "text": "the way we do that but if we actually have to touch the dis we're we're losing anyway so we're just going to wrap up",
    "start": "1891159",
    "end": "1897519"
  },
  {
    "text": "both the io and the and the disk and say that's something we're going to call a blackbox called",
    "start": "1897519",
    "end": "1903440"
  },
  {
    "text": "storage what we're going to put in storage are two things one is a log of",
    "start": "1903440",
    "end": "1908799"
  },
  {
    "text": "every all the novelty as it comes in and that's really a an append kind of job",
    "start": "1908799",
    "end": "1913919"
  },
  {
    "text": "right somebody says this I sold this Sally gave me an email fact fact fact",
    "start": "1913919",
    "end": "1919120"
  },
  {
    "text": "we're just to shovel those facts as fast as we can into storage the other thing that will be in storage are much the",
    "start": "1919120",
    "end": "1925399"
  },
  {
    "text": "same shaped things that we used to have locally right when we had a database that was monolithic it had be trees on",
    "start": "1925399",
    "end": "1932559"
  },
  {
    "text": "disk we're now going to have those persistent trees in storage with nodes that we just don't",
    "start": "1932559",
    "end": "1938519"
  },
  {
    "text": "change but otherwise it's the same kind of idea we've moved away from disc to storage and we're storing um index",
    "start": "1938519",
    "end": "1946799"
  },
  {
    "text": "segments that were now going to mutate uh but the key thing now is that we we're treating storage and it can with a",
    "start": "1946799",
    "end": "1954360"
  },
  {
    "text": "with a simple interface it's just a key value interface we say this block of the index tree maps to this segment which is",
    "start": "1954360",
    "end": "1961120"
  },
  {
    "text": "a blob of stuff and it's going to be immutable so all we need from Storage is this sort of key value thing it's a lot",
    "start": "1961120",
    "end": "1968080"
  },
  {
    "text": "like the old databases used to say this block on the dis contains these you know",
    "start": "1968080",
    "end": "1974279"
  },
  {
    "text": "bytes now we're just lifting it up to sort of a systems level cooperating systems level so of the storage we need",
    "start": "1974279",
    "end": "1980519"
  },
  {
    "text": "a key value interface where we can store blocks of index under Keys we also do",
    "start": "1980519",
    "end": "1986799"
  },
  {
    "text": "need a little bit of modifiable storage for the roots so what's the current root",
    "start": "1986799",
    "end": "1993159"
  },
  {
    "text": "of the whole database tree is something we're going to need to point at new versions of the tree and the other",
    "start": "1993159",
    "end": "2000880"
  },
  {
    "text": "characteristic we need from Storage is that we have to be able to obtain that using consistent read so we're now sort",
    "start": "2000880",
    "end": "2006200"
  },
  {
    "text": "of getting a set of definitions for storage service right what are the requirements of a storage service must",
    "start": "2006200",
    "end": "2011559"
  },
  {
    "text": "support key value storage and every now and then we're going to ask it for a consistent read these are the two things",
    "start": "2011559",
    "end": "2016960"
  },
  {
    "text": "we need out of storage otherwise I don't care how it works or where it is don't want to know I'm not getting",
    "start": "2016960",
    "end": "2023440"
  },
  {
    "text": "architectural flexibility from doing that um and there's lots of things that can satisfy this so you know we can sit",
    "start": "2023440",
    "end": "2030519"
  },
  {
    "text": "on top of um Dynamo DB or a SQL database can satisfy those two things right you can treat a SQL database as a key Value",
    "start": "2030519",
    "end": "2037159"
  },
  {
    "text": "Store stick blobs in it and uh it offers consistent read so an index is very simple thing",
    "start": "2037159",
    "end": "2043919"
  },
  {
    "start": "2042000",
    "end": "2042000"
  },
  {
    "text": "it's a tree right there's some rout it's got pointers to Inner nodes which have",
    "start": "2043919",
    "end": "2049000"
  },
  {
    "text": "then got pointers to Leaf nodes and all that's in these Leaf segments are sorted datam so it's a big block of datum",
    "start": "2049000",
    "end": "2056000"
  },
  {
    "text": "sorted in a particular order you can imagine the orders right we said entity attribute value transaction so you're G",
    "start": "2056000",
    "end": "2062440"
  },
  {
    "text": "to have an a sort by entity right that's going to give you a great way to pull out what look like",
    "start": "2062440",
    "end": "2068398"
  },
  {
    "text": "objects or documents right because it's entity oriented but you also have a sort that's oriented by attribute first right",
    "start": "2068399",
    "end": "2076240"
  },
  {
    "text": "same data just sorted a different way second copy of it sorted a different way one that's driven by attributes is going",
    "start": "2076240",
    "end": "2082158"
  },
  {
    "text": "to feel like what kind of a database going to feel like a column",
    "start": "2082159",
    "end": "2087398"
  },
  {
    "text": "store right column stor store just email addresses all together and then they store just uh uh phone numbers Al",
    "start": "2087399",
    "end": "2096040"
  },
  {
    "text": "together and column stor are very powerful tools for",
    "start": "2096040",
    "end": "2101560"
  },
  {
    "text": "analytics and you can store other other flavors but there's only you know six ways to sort",
    "start": "2101560",
    "end": "2108800"
  },
  {
    "text": "them so then there's the the actual job of indexing right so we get novelty in we",
    "start": "2108800",
    "end": "2116119"
  },
  {
    "text": "want to incorporate this we're going to have these trees obviously once we have a lot of data those trees are going to be what huge and we said they're",
    "start": "2116119",
    "end": "2124240"
  },
  {
    "text": "immutable so we said anytime you want to incorporate new information into that tree we're going to have to do",
    "start": "2124240",
    "end": "2129960"
  },
  {
    "text": "that path copying job do we want to do that every time we get a new",
    "start": "2129960",
    "end": "2135680"
  },
  {
    "text": "fact no that's a disaster can't do that uh so I would call that maintaining the",
    "start": "2135760",
    "end": "2142240"
  },
  {
    "text": "sort live in storage it's not something you can do efficiently if you're going to treat storage immutably so big data",
    "start": "2142240",
    "end": "2149119"
  },
  {
    "text": "Google's big data is an example of a solution to this problem that other people have used as well and the idea is",
    "start": "2149119",
    "end": "2156880"
  },
  {
    "text": "everything that's new you're already logging to storage so this is not a durability question it just has to do",
    "start": "2156880",
    "end": "2162640"
  },
  {
    "text": "with how often do you integrate novelty into that big relatively expensive to",
    "start": "2162640",
    "end": "2167839"
  },
  {
    "text": "create index uh the way big table works is it accumulates novelty in memory like until",
    "start": "2167839",
    "end": "2175000"
  },
  {
    "text": "it's got 64 Megs of novelty and then it blows that out onto disk and then a separate process later takes that 64",
    "start": "2175000",
    "end": "2182440"
  },
  {
    "text": "Megs and the big sorted flat file that's everything it knew before and it does a merge sort and produces a new flat file",
    "start": "2182440",
    "end": "2190319"
  },
  {
    "text": "none of the files ever get changed so it's the same idea they're all immutable the biggest difference between that and what I've been talking about is that we",
    "start": "2190319",
    "end": "2197359"
  },
  {
    "text": "have trees of smaller segments and can share stuff when they create a new flat",
    "start": "2197359",
    "end": "2202800"
  },
  {
    "text": "file it shares nothing with the older flat file and it's huge so it's not particularly addressable and it's not",
    "start": "2202800",
    "end": "2209599"
  },
  {
    "text": "easily cached in chunks by using trees you get fine grained addressability and you get these",
    "start": "2209599",
    "end": "2216160"
  },
  {
    "text": "nice small chunks which are good for caching you also have the potential for structural sharing right I can integrate",
    "start": "2216160",
    "end": "2222000"
  },
  {
    "text": "new stuff into the next version of the index it could share a whole bunch of uh nodes with the old index and if they've",
    "start": "2222000",
    "end": "2228520"
  },
  {
    "text": "been cached they're still good right because we know they're not going to change uh so we accumulate a memory",
    "start": "2228520",
    "end": "2235680"
  },
  {
    "text": "anytime we want a current view of the world we're going to need to merge dynamically what we have in memory with",
    "start": "2235680",
    "end": "2241680"
  },
  {
    "text": "what's coming from Storage just do a dynamic merge join between those two things and every now and then something",
    "start": "2241680",
    "end": "2248160"
  },
  {
    "text": "has to go and and integrate what's in memory into storage and as soon as that's been done everybody can drop that",
    "start": "2248160",
    "end": "2253920"
  },
  {
    "text": "from memory we don't care about that we're going to start it fresh because we know now that's in the index that's in",
    "start": "2253920",
    "end": "2260960"
  },
  {
    "text": "storage so that just looks like this whatever is handling transactions this is still pretty much a logical model but",
    "start": "2260960",
    "end": "2267520"
  },
  {
    "start": "2262000",
    "end": "2262000"
  },
  {
    "text": "whatever is handling transactions is going to take novelty and immediately log it right that's where you get your",
    "start": "2267520",
    "end": "2273839"
  },
  {
    "text": "durability so if the thing dies it's somewhere but that's not organized in a leverageable way it's going to put it",
    "start": "2273839",
    "end": "2280640"
  },
  {
    "text": "into an index in memory we'll call the live Index this is sorted it's very inexpensive to create you know a sorted",
    "start": "2280640",
    "end": "2287480"
  },
  {
    "text": "set in memory right and then sometime later and occasionally some other",
    "start": "2287480",
    "end": "2293079"
  },
  {
    "text": "process is going to go and take this and whatever is there and and merge but",
    "start": "2293079",
    "end": "2298240"
  },
  {
    "text": "there's going to be a lot more efficiency to that because now it's got a whole bunch of novelty and it's going to make a new tree that incorporates the",
    "start": "2298240",
    "end": "2305000"
  },
  {
    "text": "new novelty and there's a lot of efficiency to sharing that job as opposed to doing it for every new new",
    "start": "2305000",
    "end": "2313000"
  },
  {
    "text": "transaction so that's the process side the perception side is really straightforward right if I want to see",
    "start": "2313000",
    "end": "2320040"
  },
  {
    "text": "what's going on it doesn't matter what this is this could be a query it could be an analytics thing it could just be",
    "start": "2320040",
    "end": "2325240"
  },
  {
    "text": "an ordinary you know get me an entity if I want to see the current view of the world I have to somehow have access to",
    "start": "2325240",
    "end": "2330359"
  },
  {
    "text": "the live index and access to storage look at all the stuff I don't",
    "start": "2330359",
    "end": "2336480"
  },
  {
    "text": "have to have access to I don't need to be near the transaction processing system I don't need to even have anything to do with it is there any",
    "start": "2336480",
    "end": "2342880"
  },
  {
    "text": "coordination associated with doing this no something has happened in the a",
    "start": "2342880",
    "end": "2349440"
  },
  {
    "text": "couple of slides here what happened to R",
    "start": "2349440",
    "end": "2353760"
  },
  {
    "text": "transactions they're gone where did they go they just disappeared because a",
    "start": "2355599",
    "end": "2364040"
  },
  {
    "text": "correct implementation of perception does not requ require coordination perception in the real world does not",
    "start": "2364040",
    "end": "2370040"
  },
  {
    "text": "require coordination so we do are left one with one lingering question which is how does",
    "start": "2370040",
    "end": "2377319"
  },
  {
    "text": "this get updated if this is actually local to me where does that come from I'll answer that in a second okay so",
    "start": "2377319",
    "end": "2384200"
  },
  {
    "start": "2384000",
    "end": "2384000"
  },
  {
    "text": "we're going to have just a couple of names that may be new as we look at the the real architecture um one is the",
    "start": "2384200",
    "end": "2390760"
  },
  {
    "text": "transactor so we've broken stuff down now we have storage separate um we have",
    "start": "2390760",
    "end": "2396599"
  },
  {
    "text": "perceivers right who might be doing queries they're separate um we're going and then something that processes and",
    "start": "2396599",
    "end": "2402800"
  },
  {
    "text": "coordinates transactions we're going to call that the transactor we're going to call anyone who has all those capabilities the",
    "start": "2402800",
    "end": "2409480"
  },
  {
    "text": "perceive remember decide react stuff appear right they're equal they're very powerful equals in this",
    "start": "2409480",
    "end": "2416640"
  },
  {
    "text": "system um and they're your own application servers and then finally we have some sort of storage servers ideally it would be a redundant store of",
    "start": "2416640",
    "end": "2423440"
  },
  {
    "text": "one of these new fangled storages right that do distributed redundancy they're really have some great properties as",
    "start": "2423440",
    "end": "2428880"
  },
  {
    "text": "long as you don't try to treat them like a database if you treat them like a key value store they are awesome um they're",
    "start": "2428880",
    "end": "2435319"
  },
  {
    "text": "redundant they're highly reliable they're highly available they're scalable distributed there's a lot of power there",
    "start": "2435319",
    "end": "2440800"
  },
  {
    "text": "we want to use that so this is um this is the sort of",
    "start": "2440800",
    "end": "2446880"
  },
  {
    "start": "2444000",
    "end": "2444000"
  },
  {
    "text": "the same jobs all rearranged um for the purposes of um",
    "start": "2446880",
    "end": "2453200"
  },
  {
    "text": "talking about this I'm going to say that a transactor will independent will occasionally do the indexing job and and",
    "start": "2453200",
    "end": "2459280"
  },
  {
    "text": "it does you know in in the in the current implementation as well just because it has the spare cycles and it's",
    "start": "2459280",
    "end": "2465359"
  },
  {
    "text": "convenient to do so but anytime you want to you could move this to a separate box",
    "start": "2465359",
    "end": "2470400"
  },
  {
    "text": "um so we'll start we'll start uh with some novelty your app has some novelty it needs to communicate with the",
    "start": "2470400",
    "end": "2476880"
  },
  {
    "text": "transactor right the transactor is going to log that right away um it has its own live index you",
    "start": "2476880",
    "end": "2483599"
  },
  {
    "text": "can just imagine that's here um it's going to put it in there and the other thing it's going to do is it's going to transmit that novelty to any of the",
    "start": "2483599",
    "end": "2492359"
  },
  {
    "text": "peers and that's how the live indexes are kept together right it's just a re",
    "start": "2492359",
    "end": "2498800"
  },
  {
    "text": "it's just a rebroadcast um of the of the novelty and the novelty only this is only the",
    "start": "2498800",
    "end": "2506319"
  },
  {
    "text": "novelty that comes through and I'll talk a little bit more about this process in a second Right Storage service we don't",
    "start": "2506319",
    "end": "2513560"
  },
  {
    "text": "care a whole lot about it's very much a black box it needs to be key value store that can support consistent read right",
    "start": "2513560",
    "end": "2520640"
  },
  {
    "text": "this works on top of Dynamo DB it works on top of postgress or any relational database it works on top of infinispan",
    "start": "2520640",
    "end": "2526800"
  },
  {
    "text": "right if you want a big memory grid behind that you don't actually ever want diss you put infin span behind it now",
    "start": "2526800",
    "end": "2532480"
  },
  {
    "text": "you have a big memory grid and basically anything that can support that will eventually support but those are ones we",
    "start": "2532480",
    "end": "2538880"
  },
  {
    "text": "support right now uh if we look up at AER uh obviously have a Communications",
    "start": "2538880",
    "end": "2545680"
  },
  {
    "text": "component so they can talk to the transac they're going to have this live index in",
    "start": "2545680",
    "end": "2551160"
  },
  {
    "text": "memory uh and then they have to have some ability if you just ignore the caching for the moment some ability to",
    "start": "2551160",
    "end": "2558240"
  },
  {
    "text": "talk directly to storage and this is the other critical thing right we said well now who has locality to",
    "start": "2558240",
    "end": "2566040"
  },
  {
    "text": "storage nobody actually no one has locality storage in this except whatever",
    "start": "2566400",
    "end": "2571480"
  },
  {
    "text": "the storage infrastructure this guy is no closer to storage than these guys",
    "start": "2571480",
    "end": "2577319"
  },
  {
    "text": "because there's no advantage to being close to storage so this is just a service or a server somewhere else but",
    "start": "2577319",
    "end": "2583599"
  },
  {
    "text": "once it is that it means that everybody can read directly yes",
    "start": "2583599",
    "end": "2591240"
  },
  {
    "text": "con no there's one transactor I'll talk about that I'll",
    "start": "2592319",
    "end": "2597400"
  },
  {
    "text": "talk about that in a second yeah uh okay so so everybody has access to",
    "start": "2597400",
    "end": "2604359"
  },
  {
    "text": "storage it also means that where does query look live query can live anywhere you want",
    "start": "2604359",
    "end": "2610800"
  },
  {
    "text": "right what does query need what does a query engine actually need needs access to the organized data access to the",
    "start": "2610800",
    "end": "2619640"
  },
  {
    "text": "index since anybody can get access to the index we can put query anywhere we want there's no special machines for",
    "start": "2619640",
    "end": "2625720"
  },
  {
    "text": "query so in the case of datomic you end up with this Library you put in your",
    "start": "2625720",
    "end": "2631200"
  },
  {
    "text": "Java app or jvm app uh that has a Corey engine built into it and it's got the",
    "start": "2631200",
    "end": "2637839"
  },
  {
    "text": "live index built into it and I'll show you what that looks like in a second the the other thing that's really critical",
    "start": "2637839",
    "end": "2643440"
  },
  {
    "text": "about this is so we have the storage it's remote it's at least a network hop we said the network hop isn't costing",
    "start": "2643440",
    "end": "2649520"
  },
  {
    "text": "you nearly as much as the disc would if you actually had to touch the disc but it is still a network hop can we alleviate",
    "start": "2649520",
    "end": "2656440"
  },
  {
    "text": "it what what what's what is safe to cash from this this",
    "start": "2656440",
    "end": "2662280"
  },
  {
    "text": "storage but what's safe to cash I mean that's what you might choose to cash but what's what's safely cash",
    "start": "2662400",
    "end": "2668359"
  },
  {
    "text": "everything why it's immutable when does it expire never this is a these are the",
    "start": "2668359",
    "end": "2675319"
  },
  {
    "text": "things you want to hear as an architect right this is sweet we can cash this stuff relentlessly anywhere we want you",
    "start": "2675319",
    "end": "2682440"
  },
  {
    "text": "can have a local cash you can set up a mem cash cluster right and cash stuff",
    "start": "2682440",
    "end": "2687680"
  },
  {
    "text": "there so when guys don't find it in their local cash they can pull it from storage and put it in a cash that a",
    "start": "2687680",
    "end": "2693000"
  },
  {
    "text": "whole bunch of peers could share this is very powerful but what's different about this whose problem is this putting this",
    "start": "2693000",
    "end": "2699880"
  },
  {
    "text": "looking it up in storage and then putting it in the cash if it's not there whose problem is it no it's my problem it's the system's",
    "start": "2699880",
    "end": "2709520"
  },
  {
    "text": "problem it's this library's problem it's not your problem you never see that you",
    "start": "2709520",
    "end": "2715000"
  },
  {
    "text": "effectively you ask a query the query tries to find the data it's either got in the cach OR it goes and figures out",
    "start": "2715000",
    "end": "2721000"
  },
  {
    "text": "how to get it but it's under this is caching under or caching inside it's not",
    "start": "2721000",
    "end": "2726680"
  },
  {
    "text": "an application Level problem this caching because this caching is mechanical there's no special logic",
    "start": "2726680",
    "end": "2732000"
  },
  {
    "text": "around or anything else right the system can do this caching or for you all you",
    "start": "2732000",
    "end": "2737680"
  },
  {
    "text": "have to do is start up M cach and tell it about it yes sounds like Lambda",
    "start": "2737680",
    "end": "2743520"
  },
  {
    "text": "ARS but are youn it all so you don't have to",
    "start": "2743520",
    "end": "2748400"
  },
  {
    "text": "recate you're bring everything no no you don't bring anything in right so so this is a this is an app what does it do I",
    "start": "2749400",
    "end": "2757119"
  },
  {
    "text": "don't know maybe it does analytics on pricing so it's going to be interested in a certain portion of this data that's",
    "start": "2757119",
    "end": "2763559"
  },
  {
    "text": "all it's ever going to cash this other app this guy underneath him he's the website he's putting up product pages",
    "start": "2763559",
    "end": "2771160"
  },
  {
    "text": "and he's reading all different kinds of stuff from here this is not a replication of everything it's not even",
    "start": "2771160",
    "end": "2776800"
  },
  {
    "text": "proactive replication of anything in specific right everybody is pulling in their working sets depending on the work",
    "start": "2776800",
    "end": "2783160"
  },
  {
    "text": "they're doing and they don't care they never need to pull in anything else ever now of course being trees they're all",
    "start": "2783160",
    "end": "2789640"
  },
  {
    "text": "going to have a really nice set of the top part of that tree that they'll all cach and they'll get a lot of efficiency",
    "start": "2789640",
    "end": "2794760"
  },
  {
    "text": "for that and in fact it ends up that that diagram where I showed you three tiers that's it it doesn't get any",
    "start": "2794760",
    "end": "2800280"
  },
  {
    "text": "deeper than that which means that once you've cached the top part of that you can find any piece of information you've",
    "start": "2800280",
    "end": "2806559"
  },
  {
    "text": "never seen before in one read and potentially that's one read from mcash",
    "start": "2806559",
    "end": "2813800"
  },
  {
    "text": "although some of these storage services like Dynamo is really fast um so you're you're only caching it's",
    "start": "2813800",
    "end": "2821040"
  },
  {
    "text": "it's a it's a it's a on demand driven cache it's filled on demand it's filled with your working set so different peers",
    "start": "2821040",
    "end": "2828599"
  },
  {
    "text": "will have different working sets and different amounts of stuff cached yeah I think this whole example total justs",
    "start": "2828599",
    "end": "2835160"
  },
  {
    "text": "this is only discussing no this part is rights this is the right path right I",
    "start": "2835160",
    "end": "2840920"
  },
  {
    "text": "have some novelty I send it to a transaction it writes it in here so that's that's the right part this is all",
    "start": "2840920",
    "end": "2846960"
  },
  {
    "text": "read yeah as",
    "start": "2846960",
    "end": "2852400"
  },
  {
    "text": "you're b key index you let's just talk let's just talk",
    "start": "2852400",
    "end": "2859079"
  },
  {
    "text": "through a little bit right so the let's just say that everybody understands that indexing um takes let's just imagine it",
    "start": "2859079",
    "end": "2865359"
  },
  {
    "text": "takes the log it doesn't actually but let's imagine it takes the log and turns it into the sorted tree so log is just a",
    "start": "2865359",
    "end": "2871200"
  },
  {
    "text": "pend to pend to pend to pend and the index in here in storage is the sorted tree let's say it last did that an hour",
    "start": "2871200",
    "end": "2879000"
  },
  {
    "text": "ago everything that's happened since it last did that is right here right it",
    "start": "2879000",
    "end": "2884440"
  },
  {
    "text": "came in it said boom it got logged but it's not in the index yet but it got reflected back out so it's here so now",
    "start": "2884440",
    "end": "2892319"
  },
  {
    "text": "you want to answer a question what's I want to put up Sally's profile page and",
    "start": "2892319",
    "end": "2897960"
  },
  {
    "text": "in the last hour Sally told me her email address had changed that fact is here",
    "start": "2897960",
    "end": "2903760"
  },
  {
    "text": "all the facts Sally's told us in the past prior to an hour ago are in here",
    "start": "2903760",
    "end": "2909160"
  },
  {
    "text": "when I want to go and ask a question saying tell me everything you know about Sally because I need to show her profile page I'm going to do well the query",
    "start": "2909160",
    "end": "2916200"
  },
  {
    "text": "engine is going to do a merge join it's going to say Seek to Sally in here seek",
    "start": "2916200",
    "end": "2922520"
  },
  {
    "text": "to Sally in there merge them together right so if there's retractions in here",
    "start": "2922520",
    "end": "2927640"
  },
  {
    "text": "they'll they'll make it seem like the older facts here are invisible but what you'll get is the sum of information",
    "start": "2927640",
    "end": "2934040"
  },
  {
    "text": "from the two and that looks like now eventually let's say we allow this to",
    "start": "2934040",
    "end": "2939240"
  },
  {
    "text": "build up for an hour and we say now's a good time to index we're going to make a",
    "start": "2939240",
    "end": "2944480"
  },
  {
    "text": "new tree here it's going to share a lot with the old tree but it will now incorporate the Sally's new email address when that job is done everyone",
    "start": "2944480",
    "end": "2951680"
  },
  {
    "text": "will be informed and this will turn to empty and we'll start accumulating the next window of change that's how it",
    "start": "2951680",
    "end": "2959160"
  },
  {
    "text": "works that yeah yes the live index is actually local in memory to any Pier",
    "start": "2959160",
    "end": "2968400"
  },
  {
    "text": "Pier that's correct yes every change is broadcast every",
    "start": "2971520",
    "end": "2977520"
  },
  {
    "text": "paer well so the thing is that these are these are servers right you have to these are",
    "start": "2981319",
    "end": "2987640"
  },
  {
    "text": "these are not something you're going to have 10,000 of you this this pier is really",
    "start": "2987640",
    "end": "2993599"
  },
  {
    "text": "something like an app server okay that's the way to think of it it in",
    "start": "2993599",
    "end": "2999079"
  },
  {
    "text": "turn is probably serving other people the way your app servers do today right it's not necessarily the web layer it's",
    "start": "2999079",
    "end": "3006839"
  },
  {
    "text": "not necessarily your web tier although 10,000 players in your web tier would be a lot um we don't currently have a um",
    "start": "3006839",
    "end": "3014559"
  },
  {
    "text": "multicast infrastructure for making that propagation to if you wanted tens of thousands but that would be a way to",
    "start": "3014559",
    "end": "3020079"
  },
  {
    "text": "approach doing that let me keep moving forward and then I'll try to answer questions",
    "start": "3020079",
    "end": "3025640"
  },
  {
    "text": "later it definitely that that does happen I just didn't want to draw that line because it makes it all messy the",
    "start": "3025640",
    "end": "3031000"
  },
  {
    "text": "that stuff does come over here but it's uh it's not the same as what's",
    "start": "3031000",
    "end": "3036720"
  },
  {
    "text": "there it's not it's not organized yet the organization happens here okay",
    "start": "3036720",
    "end": "3043000"
  },
  {
    "text": "let me keep moving and then I'll I'll take questions at the end so process itself it ends up that I said we can",
    "start": "3043000",
    "end": "3049160"
  },
  {
    "text": "boil everything down to assertions and retractions but you can certainly think of Transformations that you couldn't",
    "start": "3049160",
    "end": "3054200"
  },
  {
    "text": "Express that way like I want to add $10 to your bank account right that's the",
    "start": "3054200",
    "end": "3060200"
  },
  {
    "text": "logical process I want to make but it ends up that the fact that ends up from that process is dependent upon the",
    "start": "3060200",
    "end": "3066599"
  },
  {
    "text": "existing value in your bank account so how do you do that and the way you do that is with transaction functions a",
    "start": "3066599",
    "end": "3072359"
  },
  {
    "text": "transaction function is a function of the database and some",
    "start": "3072359",
    "end": "3078640"
  },
  {
    "text": "arguments and what it yields is transaction data so we said transaction data is assertions and retractions of",
    "start": "3078640",
    "end": "3084640"
  },
  {
    "text": "facts now we're going to say transaction data is assertions and retractions of facts or transaction functions and",
    "start": "3084640",
    "end": "3092680"
  },
  {
    "text": "arguments which means that we can have a transaction function that is ADD uh that",
    "start": "3092680",
    "end": "3098079"
  },
  {
    "text": "takes and it will be past the database we say add uh $10 to Sally's bank",
    "start": "3098079",
    "end": "3104839"
  },
  {
    "text": "account that function will be run inside the transaction it will be given the current",
    "start": "3104839",
    "end": "3111240"
  },
  {
    "text": "value of the database because the database really is a value so this is a real function of a real value",
    "start": "3111240",
    "end": "3117760"
  },
  {
    "text": "it can perform any queries at once including looking up Sally's current balance and then we'll yield more",
    "start": "3117760",
    "end": "3125680"
  },
  {
    "text": "transaction data so if it was that simple a thing it would go that function could go look it up find out the balance",
    "start": "3125680",
    "end": "3131319"
  },
  {
    "text": "is 100 say it's 110 and what it would expand into is the fact Sally's new",
    "start": "3131319",
    "end": "3137079"
  },
  {
    "text": "balance is 110 but it could do some more involved things I have a picture in in a second so you can imagine any",
    "start": "3137079",
    "end": "3144119"
  },
  {
    "start": "3142000",
    "end": "3142000"
  },
  {
    "text": "transaction is assertions and retractions and potentially calls to transaction functions those transaction",
    "start": "3144119",
    "end": "3149520"
  },
  {
    "text": "functions can expand into calls to other transaction functions but eventually will expand into assertions and",
    "start": "3149520",
    "end": "3155839"
  },
  {
    "text": "retractions this expansion happens over and over again until it's all assertions and retractions and this allows you to",
    "start": "3155839",
    "end": "3162400"
  },
  {
    "text": "do any arbitrary transformation on the data in the database you can ask questions you can do anything you want",
    "start": "3162400",
    "end": "3168160"
  },
  {
    "text": "but the cool thing is you have a decision again architectural Independence as to when you do this right if you know you're adding pure",
    "start": "3168160",
    "end": "3174280"
  },
  {
    "text": "novelty you don't need to do it inside the transaction you just say I have new facts I know they're new if if you have",
    "start": "3174280",
    "end": "3180680"
  },
  {
    "text": "something where you think you have very little contention um you can say well my local",
    "start": "3180680",
    "end": "3186640"
  },
  {
    "text": "view of Sally's bank account is 100 I'm going to make it 110 and I'll just put that in with a with a condition that",
    "start": "3186640",
    "end": "3192559"
  },
  {
    "text": "says if it wasn't 100 fail that's more optimistic but if it was an expensive calculation and the chance of collision",
    "start": "3192559",
    "end": "3198760"
  },
  {
    "text": "was really low that's the more efficient way to do it or finally you can do it this sort of old school way which is",
    "start": "3198760",
    "end": "3204720"
  },
  {
    "text": "send the function all the way into the transaction which is going to get run automically inside a transaction with no",
    "start": "3204720",
    "end": "3213000"
  },
  {
    "text": "interference so we call that uh expansion so this is what the transactor does it accepts transactions",
    "start": "3213040",
    "end": "3219040"
  },
  {
    "start": "3214000",
    "end": "3214000"
  },
  {
    "text": "transactions are just data fact fact fact you know assert assert assert retract retract and then even if you",
    "start": "3219040",
    "end": "3225319"
  },
  {
    "text": "want have a function it still Express this data it says call the you know update salary function with this",
    "start": "3225319",
    "end": "3232119"
  },
  {
    "text": "argument and this this target entity um it expands them it eventually will apply",
    "start": "3232119",
    "end": "3238359"
  },
  {
    "text": "them to the uh inmemory view of the database inside the transactor it will log it right and finally acknowledge the",
    "start": "3238359",
    "end": "3246119"
  },
  {
    "text": "uh transaction to you and then broadcast it to everybody else every now and then this indexing will occur and I as I said",
    "start": "3246119",
    "end": "3252559"
  },
  {
    "text": "in my talk this the storage equivalent of garbage and Garbage Collection comes out of doing it this way right because",
    "start": "3252559",
    "end": "3258760"
  },
  {
    "text": "as you make a new index and now no one else is going to care about the old index the root and a bunch of nodes of the old index are junk in storage and so",
    "start": "3258760",
    "end": "3267799"
  },
  {
    "text": "we have to clean that up but the analogy to memory is is really good these Pier servers uh have direct",
    "start": "3267799",
    "end": "3276359"
  },
  {
    "start": "3273000",
    "end": "3273000"
  },
  {
    "text": "access to storage they have their own query engine they have their own live memory index and they do that merge",
    "start": "3276359",
    "end": "3282640"
  },
  {
    "text": "themselves um there's also this two tier cache going on and this is inside right",
    "start": "3282640",
    "end": "3288119"
  },
  {
    "text": "under right when you ask a query if it doesn't have the data it gets it um and it will look for a local cache which is",
    "start": "3288119",
    "end": "3295040"
  },
  {
    "text": "at the object level if that um is a miss it will go and look for segments in memcached if you've configured it",
    "start": "3295040",
    "end": "3301720"
  },
  {
    "text": "otherwise it'll go to storage and then it will cach it so I'm not going to talk too much",
    "start": "3301720",
    "end": "3308400"
  },
  {
    "start": "3307000",
    "end": "3307000"
  },
  {
    "text": "about this because it's sort of involved but this is just picture of what's happening right there's a inmemory persistent data structure that's the",
    "start": "3308400",
    "end": "3314400"
  },
  {
    "text": "live index it's really immutable in memory too we're just moving from one to the next there's an infrastructure for",
    "start": "3314400",
    "end": "3319960"
  },
  {
    "text": "allowing you to find the data in storage it goes through the cache and then find",
    "start": "3319960",
    "end": "3326039"
  },
  {
    "text": "a storage and its trees the roots of which will almost definitely be cached in",
    "start": "3326039",
    "end": "3331599"
  },
  {
    "text": "memory this value is just a pointer right it's a struct right that points to",
    "start": "3331599",
    "end": "3336799"
  },
  {
    "text": "these things it's inside a box the only mutable thing in the system",
    "start": "3336799",
    "end": "3343960"
  },
  {
    "text": "is the fact that the contents of this box will move from one of these immutable structures to another whenever",
    "start": "3343960",
    "end": "3351000"
  },
  {
    "text": "we've updated the memory index or whenever an indexing job is completed there's nothing else m able in the",
    "start": "3351000",
    "end": "3357079"
  },
  {
    "text": "system this one identity which is the database as of right now which means if you've obtained this",
    "start": "3357079",
    "end": "3364079"
  },
  {
    "text": "and you started running a long running query everything that you've got won't change underneath you even amongst",
    "start": "3364079",
    "end": "3370440"
  },
  {
    "text": "threads in your same process right you're really working with the",
    "start": "3370440",
    "end": "3376400"
  },
  {
    "text": "value okay so what are some of the characteristics well the first thing is and somebody asked about it before",
    "start": "3376599",
    "end": "3381960"
  },
  {
    "text": "what's the um you know does it use the Lamport clocks or what right or vector",
    "start": "3381960",
    "end": "3387200"
  },
  {
    "text": "clocks and one of the cool things about separating perception and process is you",
    "start": "3387200",
    "end": "3392599"
  },
  {
    "text": "now can make independent decisions about availability and scalability for those two things because they're completely",
    "start": "3392599",
    "end": "3399799"
  },
  {
    "text": "separate so the decision that's made by by datomic because I think it's a market need and has a lot of value to companies",
    "start": "3399799",
    "end": "3407880"
  },
  {
    "text": "is to make a traditional decision about the process side it's",
    "start": "3407880",
    "end": "3413920"
  },
  {
    "text": "transactional right it's a consistent view of the the world it's a single uh",
    "start": "3413920",
    "end": "3419200"
  },
  {
    "text": "single writer system the cool thing though is that that transactor it's not",
    "start": "3419200",
    "end": "3424240"
  },
  {
    "text": "doing anything else it's not serving queries or anything all it has to do is handle rights right if you want",
    "start": "3424240",
    "end": "3431359"
  },
  {
    "text": "arbitrary rights scalability you're going to have to give up transactions and queries and everybody who's adopting",
    "start": "3431359",
    "end": "3437240"
  },
  {
    "text": "no SQL databases um that make that choice for you um is getting that tradeoff and I think it's not a great",
    "start": "3437240",
    "end": "3444640"
  },
  {
    "text": "trade-off for a lot of companies and that's why I'm in the space trying to give them this hybrid Solution that's",
    "start": "3444640",
    "end": "3450160"
  },
  {
    "text": "the combination of two on the read side though we get all the benefits of distribution right if you put Dynamo DB",
    "start": "3450160",
    "end": "3456599"
  },
  {
    "text": "in that storage slot you have arbitrary scaling you know all of all of Amazon's",
    "start": "3456599",
    "end": "3462359"
  },
  {
    "text": "goodness about storing stuff in different places you have knobs on throughput for reads and wrs tremendous",
    "start": "3462359",
    "end": "3468359"
  },
  {
    "text": "service approach to storage um or you can just put you know you're already running a SQL database you can leave it",
    "start": "3468359",
    "end": "3474039"
  },
  {
    "text": "there and just start adding data in this format on top of it U but it's an independent decision uh if you do choose",
    "start": "3474039",
    "end": "3481520"
  },
  {
    "text": "a uh a redundant scalable storage subsystem though you will get the benefits of having done that um so you",
    "start": "3481520",
    "end": "3488319"
  },
  {
    "text": "get scalable reads and obviously query scale right because the queries are not in one box the quaries are in every peer",
    "start": "3488319",
    "end": "3494640"
  },
  {
    "text": "box so you not only have scalability of that but you have very elastic scalability of that it's not like adding",
    "start": "3494640",
    "end": "3500960"
  },
  {
    "text": "a new box to a cluster configuration this is kind of a big job this could this can skip scale up and down with you",
    "start": "3500960",
    "end": "3507079"
  },
  {
    "text": "know Amazon's Auto scaling right more peers come up and down due to load you",
    "start": "3507079",
    "end": "3512640"
  },
  {
    "text": "have more query capability so it's elastic um I'm going to hurry up through the last couple here you definitely have",
    "start": "3512640",
    "end": "3519280"
  },
  {
    "text": "more flexibility the schema model is extremely small all you define are the attribute definitions you know the name",
    "start": "3519280",
    "end": "3525079"
  },
  {
    "text": "and type of an attribute what its cardinality is and things like that there's no higher level thing right the",
    "start": "3525079",
    "end": "3530319"
  },
  {
    "text": "the fundamental unit is a fact the only configurable aspect of the fact is the",
    "start": "3530319",
    "end": "3535359"
  },
  {
    "text": "attribute so that's the only schema that exists and there is schema um and the net result is that it feels like whoops",
    "start": "3535359",
    "end": "3542720"
  },
  {
    "text": "it feels like you're programming with multimaps if you take an entity approach to this it feels like every entity has",
    "start": "3542720",
    "end": "3549280"
  },
  {
    "text": "is a is a key value set where each key each value could be multivalued if you wanted um so it's very convenient it's",
    "start": "3549280",
    "end": "3556920"
  },
  {
    "text": "very flexible and and uh easy to use programming model down at the bottom the other huge benefit you get",
    "start": "3556920",
    "end": "3563920"
  },
  {
    "text": "from this is you get time right the database is really a value it does include all the past you can take any",
    "start": "3563920",
    "end": "3570440"
  },
  {
    "text": "database that you've got and say pretend it's as of last",
    "start": "3570440",
    "end": "3575680"
  },
  {
    "text": "month you can just say the database pretend it's last month that doesn't do anything it doesn't change stuff it",
    "start": "3575680",
    "end": "3581720"
  },
  {
    "text": "doesn't throw stuff away it just says pretend it's last month now you can ask queries of that database right when you ask the queries",
    "start": "3581720",
    "end": "3587640"
  },
  {
    "text": "if it finds anything newer than last month it just doesn't it doesn't use it and it can answer those questions which",
    "start": "3587640",
    "end": "3594640"
  },
  {
    "text": "means you can do as of questions against the current database for a past point in time they don't cost anything uh to do",
    "start": "3594640",
    "end": "3602119"
  },
  {
    "text": "that the other critical thing is how many people ever built systems with Tim stamps and had to do as of",
    "start": "3602119",
    "end": "3608280"
  },
  {
    "text": "quaries it's brutal right because what do you have to do you have to flow around that t that time right if I want",
    "start": "3608280",
    "end": "3615599"
  },
  {
    "text": "to say as of last week last week has to be part of every query has to be part of every join and it's nasty right you have",
    "start": "3615599",
    "end": "3621799"
  },
  {
    "text": "to do Max and all that very very tough stuff what if just say about this I walk up to a database",
    "start": "3621799",
    "end": "3628079"
  },
  {
    "text": "and I say as of last week so I can have a query which is get me the you know",
    "start": "3628079",
    "end": "3633359"
  },
  {
    "text": "sales sub totals that query works against now I can tell the database give me yourself as of last week I can take",
    "start": "3633359",
    "end": "3639200"
  },
  {
    "text": "that same query run it against that database value it's not parameterized by time anymore right the database knows",
    "start": "3639200",
    "end": "3646200"
  },
  {
    "text": "I'm supposed to be pretending it's last week now the same query you can ask it doesn't have any time not time not part",
    "start": "3646200",
    "end": "3651839"
  },
  {
    "text": "of the join of course you can also ask Cory where you want to compare times and things like like that so you can do as",
    "start": "3651839",
    "end": "3657400"
  },
  {
    "text": "of a point in time you can do windows since a point in time the other thing you can do because the database is",
    "start": "3657400",
    "end": "3662960"
  },
  {
    "text": "actually a local value right you have that memory component but it is really local in your process you can do as if",
    "start": "3662960",
    "end": "3669520"
  },
  {
    "text": "what if what if I added this stuff what if I committed this transaction what would the database look like what would the answer to this query look like do I",
    "start": "3669520",
    "end": "3676200"
  },
  {
    "text": "need to go to the server to do that no I can just take the inmemory",
    "start": "3676200",
    "end": "3681240"
  },
  {
    "text": "data structure which is persistent right I can make a new version of it that includes the transaction data I'm",
    "start": "3681240",
    "end": "3686880"
  },
  {
    "text": "thinking about committing that's now another database value it's all in memory but it can can include stuff from",
    "start": "3686880",
    "end": "3693240"
  },
  {
    "text": "Storage right but the novelty is the stolen memory now I can take the same query and ask the query I don't need",
    "start": "3693240",
    "end": "3699000"
  },
  {
    "text": "anybody help anybody's help I'm not bothering anybody right I can do what if and then I can say well that query still",
    "start": "3699000",
    "end": "3705000"
  },
  {
    "text": "works so good now I'll try to commit it or maybe I'm just doing you know what if analysis for people and I never commit",
    "start": "3705000",
    "end": "3711559"
  },
  {
    "text": "it you know we're just trying to make decisions what would happen if we made this decision what would the world look like I don't have to put that into the",
    "start": "3711559",
    "end": "3717920"
  },
  {
    "text": "database to ask answer the question I still have query capability perception and reaction",
    "start": "3717920",
    "end": "3724039"
  },
  {
    "text": "obviously perception is straightforward right we have this immutable thing all the queries have been flavors of perception but the reaction now is easy",
    "start": "3724039",
    "end": "3732480"
  },
  {
    "text": "because we have this live feed right the transactor is sending all novelty to all the peers which means get what what's",
    "start": "3732480",
    "end": "3738480"
  },
  {
    "text": "easy to do it's easy to make an event on the peer that says some novelty came in",
    "start": "3738480",
    "end": "3743839"
  },
  {
    "text": "but the other thing that's beautiful about it is you can say here here's some novelty you know Sally changed her email",
    "start": "3743839",
    "end": "3749240"
  },
  {
    "text": "address and if it was important you to say wow is it the same as what it was",
    "start": "3749240",
    "end": "3754279"
  },
  {
    "text": "can you do that sure because the database as a value means that you can capture the database value when that",
    "start": "3754279",
    "end": "3760400"
  },
  {
    "text": "change was made and in fact it gets sent to you with the event as well here's the database before the change here's the",
    "start": "3760400",
    "end": "3765559"
  },
  {
    "text": "data of the change here's the database after the change ask any queries you want and if you want to have",
    "start": "3765559",
    "end": "3771400"
  },
  {
    "text": "sophisticated Eventing you just have to query that data right you just say I got",
    "start": "3771400",
    "end": "3777119"
  },
  {
    "text": "this event feed and I'm only interested in these certain kinds of changes you just query the feed and now you get that",
    "start": "3777119",
    "end": "3782640"
  },
  {
    "text": "because the query engine is in memory and it operates not only against the database but it operates on memory data structures too combinations of your own",
    "start": "3782640",
    "end": "3790520"
  },
  {
    "text": "memory and what's coming from the database so you can filter that way so I",
    "start": "3790520",
    "end": "3796599"
  },
  {
    "text": "think you get a lot out of this in particular what you get is Simplicity in the database the state model is what I",
    "start": "3796599",
    "end": "3802640"
  },
  {
    "text": "would call epical right it only moves from valid consistent point to valid consistent Point there's never any in",
    "start": "3802640",
    "end": "3808599"
  },
  {
    "text": "between there's no read coordination or anything else there's only coordination for the process and that's done in",
    "start": "3808599",
    "end": "3814799"
  },
  {
    "text": "transactor every time you ask the same quer you get the same results you have a stable basis for decision making if you",
    "start": "3814799",
    "end": "3820880"
  },
  {
    "text": "think there was a problem with the system in the middle of the day and you're not going to get to look at it till next week how many people have ever",
    "start": "3820880",
    "end": "3826319"
  },
  {
    "text": "had that happen the quer is returning some weird results at like 5 o'clock everybody wants to go home so we'll like",
    "start": "3826319",
    "end": "3831720"
  },
  {
    "text": "look into this tomorrow and then you come back tomorrow and the quer is fine because just because more data was added",
    "start": "3831720",
    "end": "3837680"
  },
  {
    "text": "into the system how are you ever going to find out what was wrong your toast",
    "start": "3837680",
    "end": "3842880"
  },
  {
    "text": "with this it's straight forward right we can say ask that query as if it was five o'clock because I know at five o'clock that query was screwy and giving me",
    "start": "3842880",
    "end": "3849799"
  },
  {
    "text": "weird results and you could figure out the answer to your problem uh because you can get a basis anytime you want and",
    "start": "3849799",
    "end": "3855880"
  },
  {
    "text": "the transaction is really well defined what a transaction is is a function of the database",
    "start": "3855880",
    "end": "3861559"
  },
  {
    "text": "value um the other things that are important is you can communicate a base right if I make a decision or I want to",
    "start": "3861559",
    "end": "3868079"
  },
  {
    "text": "give you work to do I have a way to communicate it I'm not going to say go look in the database I'm going to say",
    "start": "3868079",
    "end": "3873799"
  },
  {
    "text": "there's some work you have to do at database time t uh and you can go and look at exactly what I was seeing so you",
    "start": "3873799",
    "end": "3881279"
  },
  {
    "text": "know what to do um we've seen already architecturally because we've broken stuff apart we have",
    "start": "3881279",
    "end": "3887920"
  },
  {
    "text": "freedom to relocate things we don't care where the queries are run we don't care where the storage is we don't care where the transactor is running you have a",
    "start": "3887920",
    "end": "3894480"
  },
  {
    "text": "whole bunch of flexibility about where you put things you can put you know data up on dynamodb and run the whole system",
    "start": "3894480",
    "end": "3900680"
  },
  {
    "text": "in your land and put mcash in your land and isolate yourself from the fact that the internet's actually potentially in",
    "start": "3900680",
    "end": "3906559"
  },
  {
    "text": "between um we saw the time travel stuff and we saw the event processing so the",
    "start": "3906559",
    "end": "3912160"
  },
  {
    "text": "net result of deconstructing the database uh is that you're able to treat the database as a value um in in",
    "start": "3912160",
    "end": "3920200"
  },
  {
    "text": "precisely the way I was talking about in my talk you have a real information model you have a system that's",
    "start": "3920200",
    "end": "3925839"
  },
  {
    "text": "substantially less complex right it's easier to understand it's easier to",
    "start": "3925839",
    "end": "3931160"
  },
  {
    "text": "change right you want to change your storage you can do that it's easy to replace components it's easy to relocate",
    "start": "3931160",
    "end": "3937599"
  },
  {
    "text": "things um it's more powerful uh it's more scalable right you want more brains you",
    "start": "3937599",
    "end": "3945279"
  },
  {
    "text": "start more peers there's less coordination which also leads to the scalability aspects um",
    "start": "3945279",
    "end": "3952079"
  },
  {
    "text": "and the information model not only lets you remember everything which is important for your businesses because they want to make decisions but also uh",
    "start": "3952079",
    "end": "3959720"
  },
  {
    "text": "gives you more flexibility because that's a model that's easy to turn into any shape that you want and uh with that I'll wrap and",
    "start": "3959720",
    "end": "3967279"
  },
  {
    "text": "answer any questions but thanks [Applause]",
    "start": "3967279",
    "end": "3976610"
  },
  {
    "text": "[Music]",
    "start": "3976610",
    "end": "3985070"
  }
]