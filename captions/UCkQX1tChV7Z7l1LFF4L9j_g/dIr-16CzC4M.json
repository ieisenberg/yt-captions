[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "foreign [Music]",
    "start": "1380",
    "end": "14249"
  },
  {
    "text": "hi there thank you for coming I wanted to talk today about a journey of",
    "start": "15420",
    "end": "20699"
  },
  {
    "text": "evolving an API without burgeoning and I I like to start these with a little bit",
    "start": "20699",
    "end": "27119"
  },
  {
    "text": "of a story and so just for background context when I say API a lot of folks",
    "start": "27119",
    "end": "33899"
  },
  {
    "text": "immediately jump to something like a rest or a graphql API and those certainly fits the criteria but so do",
    "start": "33899",
    "end": "41040"
  },
  {
    "text": "Java apis that operate in process or event based apis they still have some",
    "start": "41040",
    "end": "48420"
  },
  {
    "text": "agreement that needs to be made between the consumers and the producers",
    "start": "48420",
    "end": "53840"
  },
  {
    "text": "and a lot of the talk is dedicated to the complexity of that agreement so a",
    "start": "53840",
    "end": "61980"
  },
  {
    "text": "story and this is based on a real story but it has been changed because the story itself isn't public",
    "start": "61980",
    "end": "69020"
  },
  {
    "start": "69000",
    "end": "69000"
  },
  {
    "text": "so the context we want to book a cruise um or ourselves and a partner for a",
    "start": "69020",
    "end": "75240"
  },
  {
    "text": "vacation and this sequence diagram is an overly simplified view of what happens",
    "start": "75240",
    "end": "82619"
  },
  {
    "text": "from a systems standpoint when you book a cruise it might be that we have a",
    "start": "82619",
    "end": "88080"
  },
  {
    "text": "reservation system it's basically a two-phase commit you hold the room you",
    "start": "88080",
    "end": "93119"
  },
  {
    "text": "sort of pre-reserve the room until payment has been collected through a payment Gateway and then the reservation",
    "start": "93119",
    "end": "100259"
  },
  {
    "text": "itself is confirmed and the underlying reservation system when this works well everybody's happy",
    "start": "100259",
    "end": "107720"
  },
  {
    "text": "what happens uh in this real scenario that I've abstracted is there was a",
    "start": "107820",
    "end": "114119"
  },
  {
    "text": "significant spike in load and with that Spike and load did is it forced the",
    "start": "114119",
    "end": "120299"
  },
  {
    "text": "reservation system to send back an unexpected error on that last step that",
    "start": "120299",
    "end": "125579"
  },
  {
    "text": "confirming the reservation and there that the team that developed the booking",
    "start": "125579",
    "end": "131459"
  },
  {
    "text": "service had never seen before normally you know you run into unexpected errors and systems",
    "start": "131459",
    "end": "138540"
  },
  {
    "text": "you get some unpredictable behavior in this case the unpredictable Behavior was fairly catastrophic for the organization",
    "start": "138540",
    "end": "145440"
  },
  {
    "text": "because what they had done is they built a retry loop around unexpected errors in the booking service for the entire",
    "start": "145440",
    "end": "151319"
  },
  {
    "text": "workflow so under load at Peak volume",
    "start": "151319",
    "end": "157620"
  },
  {
    "text": "I might try to book a service I'd pre-reserve the room my credit card would be charged get an",
    "start": "157620",
    "end": "164040"
  },
  {
    "text": "error on confirmation so retry pre-reserve another room charge my credit card get an error",
    "start": "164040",
    "end": "170540"
  },
  {
    "text": "pre-authorized or pre-reserve another room charge my credit card again and so on",
    "start": "170540",
    "end": "175920"
  },
  {
    "text": "and what happens is that that Loop continued until either a customer had",
    "start": "175920",
    "end": "183120"
  },
  {
    "text": "pre-reserved every room on the ship or they had maxed out their credit card and the payment Gateway itself returned in",
    "start": "183120",
    "end": "189300"
  },
  {
    "text": "there where there was some fraud based error alert from the payment Gateway that was obviously a big PR disaster for",
    "start": "189300",
    "end": "197700"
  },
  {
    "text": "the organization caused a lot of consternation it was very seen an invisible headline",
    "start": "197700",
    "end": "203819"
  },
  {
    "text": "and all based on the fact that the agreement between the API producer of",
    "start": "203819",
    "end": "210000"
  },
  {
    "text": "the reservation system and the API consumer of the booking service did not completely cover the surface area of",
    "start": "210000",
    "end": "216720"
  },
  {
    "text": "responses available so my name is Brandon Byers I am head of",
    "start": "216720",
    "end": "223200"
  },
  {
    "text": "technology for thoughtworks North America and this talk is based on a",
    "start": "223200",
    "end": "228480"
  },
  {
    "text": "significant amount of experience that I've had in API development throughout my career uh written an open source tool",
    "start": "228480",
    "end": "235799"
  },
  {
    "text": "that will be the Baseline of this talk about following the API of it over the nearly a decade called numpty Bank you",
    "start": "235799",
    "end": "243060"
  },
  {
    "text": "see here a few articles on martinfellow.com this one is based on one that I haven't yet published it's",
    "start": "243060",
    "end": "249360"
  },
  {
    "text": "actually long been in my queue to finish and this talk is a little bit of a forcing factor for me to do that",
    "start": "249360",
    "end": "256019"
  },
  {
    "text": "this is all based on real world experience I have led a number of platform engagements where you consider",
    "start": "256019",
    "end": "262139"
  },
  {
    "text": "these API platforms a really good way of stealing development inside organizations",
    "start": "262139",
    "end": "267800"
  },
  {
    "text": "and it comes one of those articles the Enterprise Integration using rest is quite dated maybe 10 years old at this",
    "start": "267840",
    "end": "274680"
  },
  {
    "text": "point and this adaptation of Jamie zielinski's",
    "start": "274680",
    "end": "280680"
  },
  {
    "text": "quote here on regular Expressions is something that I wrote in that article some people when confronted with the",
    "start": "280680",
    "end": "287040"
  },
  {
    "text": "problem think I know I'll use versioning now they have 2.1.0 problems so versioning is oftentimes seen as the",
    "start": "287040",
    "end": "295860"
  },
  {
    "text": "standard de facto approach to evolving an API in a way that",
    "start": "295860",
    "end": "301919"
  },
  {
    "text": "make sure that the agreement on backwards incompatible changes on",
    "start": "301919",
    "end": "307020"
  },
  {
    "text": "breaking changes is made explicit forcing the consumers to upgrade for the new functionality but in a very managed",
    "start": "307020",
    "end": "314699"
  },
  {
    "text": "way it's a very architecturally sound strategy and there's a reason it's used so widely you see here on the left an",
    "start": "314699",
    "end": "322919"
  },
  {
    "text": "adaptation of the old famous Facebook quota you know a slow kind of moving fast and breaking things but as you see",
    "start": "322919",
    "end": "330240"
  },
  {
    "text": "from the quote that I put on the right I I like to challenge the idea of versioning as the default strategy",
    "start": "330240",
    "end": "336780"
  },
  {
    "text": "because I think it does cause a lot of Downstream implications the fact that all consumers do have to upgrade is",
    "start": "336780",
    "end": "343560"
  },
  {
    "text": "itself a point of inconvenience for many of those consumers so this talk is really",
    "start": "343560",
    "end": "349680"
  },
  {
    "text": "dedicated to exploring alternative strategies that produce more or less the same results but with different",
    "start": "349680",
    "end": "357000"
  },
  {
    "text": "trade-offs for the consumers and different trade-offs for the producer as well",
    "start": "357000",
    "end": "362660"
  },
  {
    "text": "when we talk about apis again rest apis graphql Java API it doesn't matter events",
    "start": "367820",
    "end": "376440"
  },
  {
    "start": "368000",
    "end": "368000"
  },
  {
    "text": "we have something like a contract a specification of course in the rest",
    "start": "376440",
    "end": "382380"
  },
  {
    "text": "World open API tends to be the 800 pound gorilla they're all of course Alternatives but",
    "start": "382380",
    "end": "389460"
  },
  {
    "text": "this is a pretty widely used one and it's easy to fall into the Trap as",
    "start": "389460",
    "end": "395280"
  },
  {
    "text": "technologist to think of that specification as a guarantee",
    "start": "395280",
    "end": "400819"
  },
  {
    "text": "I really like the word promise and Mark Burgess came up with this promise theory he was big on the configuration",
    "start": "400819",
    "end": "407520"
  },
  {
    "text": "management World CS engine that had the puff pit and Chef and so forth that led to infrastructure as code techniques",
    "start": "407520",
    "end": "413819"
  },
  {
    "text": "that we use today and he has a mathematical basis for his",
    "start": "413819",
    "end": "420780"
  },
  {
    "text": "promise theory in the infrastructure configuration management world for more",
    "start": "420780",
    "end": "426060"
  },
  {
    "text": "lay audiences he wrote a book on promise Theory and this quote came out of it the",
    "start": "426060",
    "end": "431940"
  },
  {
    "text": "word promise does not have the arrogance or hubris of guarantee and that's a good",
    "start": "431940",
    "end": "437100"
  },
  {
    "text": "thing promises fundamentally are Expressions communication patterns that",
    "start": "437100",
    "end": "445259"
  },
  {
    "text": "demonstrate an intent to do something but promises can be broken and as we saw",
    "start": "445259",
    "end": "450599"
  },
  {
    "text": "in the reservation system example promises can sometimes be broken in",
    "start": "450599",
    "end": "455880"
  },
  {
    "text": "unexpected ways that lead to cascading failures uh",
    "start": "455880",
    "end": "462319"
  },
  {
    "start": "461000",
    "end": "461000"
  },
  {
    "text": "I'd like to explore that idea of making best effort attempts to solve customers",
    "start": "462319",
    "end": "469319"
  },
  {
    "text": "needs through some storytelling I mentioned this open source product that",
    "start": "469319",
    "end": "474720"
  },
  {
    "text": "I've managed for nine years now called multiband it's a service virtualization",
    "start": "474720",
    "end": "480419"
  },
  {
    "text": "so for those unfamiliar with the term if you are familiar with mocks and stubs",
    "start": "480419",
    "end": "486060"
  },
  {
    "text": "that you might use to test your Java code for example service virtualization",
    "start": "486060",
    "end": "491160"
  },
  {
    "text": "is a very similar construct it just exists out of process instead of in processed so if your runtime service",
    "start": "491160",
    "end": "497759"
  },
  {
    "text": "depends on another service if you're putting the booking service you depend on the reservation service",
    "start": "497759",
    "end": "504180"
  },
  {
    "text": "and you want to have black box tests out of process tests against your booking",
    "start": "504180",
    "end": "509340"
  },
  {
    "text": "service but in a deterministic way where you're not relying on certain tests to be best data to be set up in the",
    "start": "509340",
    "end": "516060"
  },
  {
    "text": "reservation systems you can virtualize the reservation system and mount ebank allows you to do that it opens up new",
    "start": "516060",
    "end": "521940"
  },
  {
    "text": "sockets that will listen and that will listen for certain requests that match certain criteria and responds in a way",
    "start": "521940",
    "end": "528300"
  },
  {
    "text": "that you the test designer set up so it's a very deterministic way of managing your test data",
    "start": "528300",
    "end": "534899"
  },
  {
    "text": "uh there's more to it than this picture on the bottom this uh and the book that I wrote I had to draw a number of",
    "start": "534899",
    "end": "540839"
  },
  {
    "text": "diagrams just kind of described uh how multibank worked uh this one covers more",
    "start": "540839",
    "end": "546300"
  },
  {
    "text": "or less the the back part of the process generating the response uh that's not",
    "start": "546300",
    "end": "552480"
  },
  {
    "text": "even it gets a call it's a virtual service it needs to respond in a specific way returning the test data",
    "start": "552480",
    "end": "557940"
  },
  {
    "text": "relevant to your scenario uh what it does is it grabs a response there's multiple types of ways of",
    "start": "557940",
    "end": "565560"
  },
  {
    "text": "generating response we'll look at a couple and then the bulk of the storytelling is coming around this behaviors box so behaviors are post",
    "start": "565560",
    "end": "574140"
  },
  {
    "text": "processing Transformations on those response and we'll look at some examples because there has been a significant",
    "start": "574140",
    "end": "580620"
  },
  {
    "text": "evolution of the API and sometimes backwards incompatible ways in that",
    "start": "580620",
    "end": "585959"
  },
  {
    "text": "space all done without version and then the core construct of the money Bank this virtual service Money Bank just",
    "start": "585959",
    "end": "592140"
  },
  {
    "text": "hauls an imposter but it's the same ideas the virtual stub",
    "start": "592140",
    "end": "597080"
  },
  {
    "start": "598000",
    "end": "598000"
  },
  {
    "text": "and as we look at some of the different options uh",
    "start": "598080",
    "end": "603420"
  },
  {
    "text": "where versioning wins hands down is implementation complexity when you",
    "start": "603420",
    "end": "610920"
  },
  {
    "text": "version an API you can simply delete all of the code that was there to support a",
    "start": "610920",
    "end": "616380"
  },
  {
    "text": "previous version and you can manage the code base in a more effective way if you are the API",
    "start": "616380",
    "end": "622200"
  },
  {
    "text": "producer I'm not going to look at implementation complexity as a decision criteria",
    "start": "622200",
    "end": "628620"
  },
  {
    "text": "because I've already experiented that versioning wins on that front instead is I look through a number of alternatives",
    "start": "628620",
    "end": "634860"
  },
  {
    "text": "to version I'm going to look at them from the consumer's perspective and these three criteria are the ones I'm",
    "start": "634860",
    "end": "640320"
  },
  {
    "text": "going to focus on when I say obviousness think the principle of least surprise",
    "start": "640320",
    "end": "645720"
  },
  {
    "text": "does it do what you expect it to in a fairly predictable way",
    "start": "645720",
    "end": "650940"
  },
  {
    "text": "does it match your intuitive sense of how the API should work Elegance is another proxy for usability",
    "start": "650940",
    "end": "659820"
  },
  {
    "text": "so when I think Elegance is easy to understand does it use the terms and the filters and the consistent way is the",
    "start": "659820",
    "end": "666600"
  },
  {
    "text": "language comprehensible does it have a relatively narrow surface area because it's targeted to solve a",
    "start": "666600",
    "end": "673140"
  },
  {
    "text": "cohesive set of problems or does it have a very broad surface area and therefore hinder the ramp up to comprehension",
    "start": "673140",
    "end": "679740"
  },
  {
    "text": "because it's trying to solve a number of different problems and infinitely configurable way uh and then stability is how often do I",
    "start": "679740",
    "end": "688920"
  },
  {
    "text": "as the API consumer have to uh change to",
    "start": "688920",
    "end": "694680"
  },
  {
    "text": "adapt to the evolution of the API so a few patterns all in real world",
    "start": "694680",
    "end": "702180"
  },
  {
    "text": "patterns that came out of my experience maintaining about anything this",
    "start": "702180",
    "end": "708180"
  },
  {
    "start": "707000",
    "end": "707000"
  },
  {
    "text": "snippet of Json is as an example of how",
    "start": "708180",
    "end": "713760"
  },
  {
    "text": "you might configure a response from the virtual service so this is HTTP Bounty Bank supports protocols outside of HTTP",
    "start": "713760",
    "end": "721320"
  },
  {
    "text": "but this is a I think a pretty good one and all this is doing is saying here we're going to return 500 with that text",
    "start": "721320",
    "end": "727920"
  },
  {
    "text": "that you see in the body you can also set up things like headers for example",
    "start": "727920",
    "end": "733380"
  },
  {
    "text": "one of the first requests for a feature extension after releasing Mount eBay was",
    "start": "733380",
    "end": "739220"
  },
  {
    "text": "somebody wanted to add latency to the response so they wanted to wait half a second or three seconds before 90 Bank",
    "start": "739220",
    "end": "745620"
  },
  {
    "text": "responded and the easiest thing in the world would have just been to add that quite directly you know some latency uh",
    "start": "745620",
    "end": "753540"
  },
  {
    "text": "to the to the Json which is pretty close to what I did I added this behaviors element with a little bit of a clumsy underscore",
    "start": "753540",
    "end": "760260"
  },
  {
    "text": "because I was trying to differentiate the behaviors from the types of responses is represents generation of a",
    "start": "760260",
    "end": "768240"
  },
  {
    "text": "canned response like you see here but there's two others there's ways of record and replay it's called proxy and",
    "start": "768240",
    "end": "774060"
  },
  {
    "text": "there's ways of programmatic configuration and response it's called inject and since those are not underscore",
    "start": "774060",
    "end": "780899"
  },
  {
    "text": "prefixed I thought I would do the underscore on the behaviors but more importantly I thought that having a",
    "start": "780899",
    "end": "787740"
  },
  {
    "text": "separate object even though I only had one use case for it right now this latency was a point of extension and I",
    "start": "787740",
    "end": "795600"
  },
  {
    "text": "think that's just a foundational topic to bring up we talk a lot about backwards compatibility but there is a",
    "start": "795600",
    "end": "803100"
  },
  {
    "text": "little bit of forward thinking that allows us to cover up at least some forward compatibility concerns if we can",
    "start": "803100",
    "end": "811560"
  },
  {
    "text": "do something as simple as ensure for example that our API doesn't respond with a raw array because as soon as you",
    "start": "811560",
    "end": "818639"
  },
  {
    "text": "need to add paging information then you have to add a object wrapper so you made a breaking change",
    "start": "818639",
    "end": "824839"
  },
  {
    "text": "adding an object for sensibility is a pretty popular forged compatibility",
    "start": "824839",
    "end": "830579"
  },
  {
    "text": "pattern and this is an example even though I wasn't quite sure what I would use it for when I wrote this",
    "start": "830579",
    "end": "835980"
  },
  {
    "text": "uh this works pretty well this was just your simple addition to an API this is",
    "start": "835980",
    "end": "841440"
  },
  {
    "text": "postel's law where you should be able to evolve an API in a way that doesn't",
    "start": "841440",
    "end": "847440"
  },
  {
    "text": "change or remove elements and only adds to them and when I think about how that fits",
    "start": "847440",
    "end": "855060"
  },
  {
    "text": "against the rubric that I mentioned earlier I think this is as good as it gets we should always feel comfortable",
    "start": "855060",
    "end": "860820"
  },
  {
    "text": "as API producers adding new elements being a little bit thoughtful about how to do that in a Ford's compatibility way",
    "start": "860820",
    "end": "868639"
  },
  {
    "text": "this covers uh obviousness elegance and stability quite",
    "start": "868639",
    "end": "873779"
  },
  {
    "text": "well so the next change that I had to make is",
    "start": "873779",
    "end": "879480"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "that worked great but then somebody said I want the latency to be configurable I",
    "start": "879480",
    "end": "885120"
  },
  {
    "text": "mentioned that mountie branch has this inject response type which lets you programmatically configure a response I",
    "start": "885120",
    "end": "893519"
  },
  {
    "text": "thought maybe I would take advantage of that same functionality to let you programmatically configure the latency",
    "start": "893519",
    "end": "899399"
  },
  {
    "text": "and so what I did as I kept the weight Behavior but I just",
    "start": "899399",
    "end": "905699"
  },
  {
    "text": "had it except either a number or a string that represents a JavaScript",
    "start": "905699",
    "end": "910860"
  },
  {
    "text": "function uh and so I call that multi-typing and it worked it worked well enough uh it",
    "start": "910860",
    "end": "918779"
  },
  {
    "text": "allowed me to fit within the same intention of adding latency with two",
    "start": "918779",
    "end": "924060"
  },
  {
    "text": "different strategies of how to resolve that latency through a number of milliseconds or a JavaScript function",
    "start": "924060",
    "end": "929519"
  },
  {
    "text": "but it's not as obvious it's not as elegant I have not done this since that",
    "start": "929519",
    "end": "935220"
  },
  {
    "text": "initial attempt if I were to run into the same problem today I would probably",
    "start": "935220",
    "end": "940560"
  },
  {
    "text": "add a separate Behavior something like weight Dynamic I think that's a little bit less elegant because of experience",
    "start": "940560",
    "end": "946920"
  },
  {
    "text": "the surface area that you have to understand the API but it's a bit more obvious and I think",
    "start": "946920",
    "end": "954180"
  },
  {
    "text": "obviousness and making sure that it makes it easy for example to build a client's SDK that doesn't have to have",
    "start": "954180",
    "end": "961500"
  },
  {
    "text": "some weird translation uh because you need different you know maybe subclasses or functions or properties to describe",
    "start": "961500",
    "end": "968940"
  },
  {
    "text": "the API in a way that gets translated to how the API works because it's it's polymorphic and sometimes unhelpful ways",
    "start": "968940",
    "end": "976560"
  },
  {
    "text": "so it works I wouldn't recommend it but it certainly evolves not having to release a new version to fix the the API",
    "start": "976560",
    "end": "984779"
  },
  {
    "text": "itself so this third pattern is really my",
    "start": "984779",
    "end": "990120"
  },
  {
    "text": "favorite and it's up casting it's a pretty common pattern you see a lot in the event driven world for example but",
    "start": "990120",
    "end": "995519"
  },
  {
    "text": "it really works for a number of different kinds of apis uh the a subsequent Behavior",
    "start": "995519",
    "end": "1002899"
  },
  {
    "text": "that was added to the list was this one around shell transform and the idea was",
    "start": "1002899",
    "end": "1009320"
  },
  {
    "text": "I've Bounty bank has created this response the status code this body but",
    "start": "1009320",
    "end": "1014720"
  },
  {
    "text": "sometimes I want to post a process that Json to change it to add some Dynamic",
    "start": "1014720",
    "end": "1021259"
  },
  {
    "text": "information and I want to be able to use a shell program because I don't want to pass in a JavaScript function I want",
    "start": "1021259",
    "end": "1028100"
  },
  {
    "text": "maybe to use Ruby in this example to do something dynamic it was relatively easy to build that but",
    "start": "1028100",
    "end": "1034459"
  },
  {
    "text": "then what people asked for was well actually I want a pipeline the shell programs I want to have very small",
    "start": "1034459",
    "end": "1041780"
  },
  {
    "text": "targeted shell programs that did one thing and be able to combine impose multiple of them to generate the",
    "start": "1041780",
    "end": "1047298"
  },
  {
    "text": "post-processed response and so what I had to do was change shell",
    "start": "1047299",
    "end": "1052700"
  },
  {
    "text": "transform originally a string into an array so it",
    "start": "1052700",
    "end": "1058700"
  },
  {
    "text": "would execute each of those shell programs in order in the array uh and this one assuming that both uh",
    "start": "1058700",
    "end": "1068539"
  },
  {
    "text": "the string and the array can be passed uh is a little bit less obvious because",
    "start": "1068539",
    "end": "1074660"
  },
  {
    "text": "it does have some components of that multi-typing that we just looked at but it's actually managed in a much more",
    "start": "1074660",
    "end": "1080900"
  },
  {
    "text": "productive way and I'll show you how in a second I think this is a very elegant and very stable approach I think this is",
    "start": "1080900",
    "end": "1086840"
  },
  {
    "text": "one of the first approaches that I generally reach for when I try to evolve an API without breaking their consumers",
    "start": "1086840",
    "end": "1092900"
  },
  {
    "text": "let me show you how it works so first of all just to acknowledge this",
    "start": "1092900",
    "end": "1098539"
  },
  {
    "start": "1096000",
    "end": "1096000"
  },
  {
    "text": "is a breaking change we changed the API from a string to an array the new",
    "start": "1098539",
    "end": "1104120"
  },
  {
    "text": "contract the new specification of the API lists only the array it does not",
    "start": "1104120",
    "end": "1109160"
  },
  {
    "text": "advertise that it accepts a string I could have",
    "start": "1109160",
    "end": "1114380"
  },
  {
    "text": "simply released a new version changed the contract to the array and asked any consumers who had the string version to",
    "start": "1114380",
    "end": "1122179"
  },
  {
    "text": "update themselves but that would have been at their inconvenience the up casting allows me a single place in the",
    "start": "1122179",
    "end": "1129440"
  },
  {
    "text": "code that all API calls go through I have this compatibility module and I",
    "start": "1129440",
    "end": "1134900"
  },
  {
    "text": "call the upcast function on it passing in the Json that the consumer is sending in the request",
    "start": "1134900",
    "end": "1141620"
  },
  {
    "text": "you can see the implementation of that upcast function at least a portion of it down below so I have this upcast shell",
    "start": "1141620",
    "end": "1148940"
  },
  {
    "text": "transform to array and there's a little bit of noise in there but it's basically just looking for the right spot and the",
    "start": "1148940",
    "end": "1154520"
  },
  {
    "text": "Json and then seeing if it is a string and if it is it's wrapping the string",
    "start": "1154520",
    "end": "1159559"
  },
  {
    "text": "with an array so it's an array of one string it is managing the transformation that the consumers would have had to do",
    "start": "1159559",
    "end": "1166340"
  },
  {
    "text": "and the producer side so it's adding a little bit of implementation complexity although quite manageable because it's",
    "start": "1166340",
    "end": "1171740"
  },
  {
    "text": "all managed in one spot in the code at the for the trade-off of not having to",
    "start": "1171740",
    "end": "1176840"
  },
  {
    "text": "end convenience any consumers another reason I really like the",
    "start": "1176840",
    "end": "1184280"
  },
  {
    "start": "1180000",
    "end": "1180000"
  },
  {
    "text": "upcasting pattern is that it works a bit like Russian dolls you can Nest them",
    "start": "1184280",
    "end": "1191299"
  },
  {
    "text": "inside of each other so this is another example over time the behaviors these",
    "start": "1191299",
    "end": "1198980"
  },
  {
    "text": "post-processing transformations of the response added a bit more functionality so you see several here weight you",
    "start": "1198980",
    "end": "1205760"
  },
  {
    "text": "mentioned it adds 500 milliseconds shell transform now a list of shell programs",
    "start": "1205760",
    "end": "1211880"
  },
  {
    "text": "that can operate on the Json of the response look up and also has a list and copy has",
    "start": "1211880",
    "end": "1217880"
  },
  {
    "text": "a list decorate there's just a string transformation that you can run and then",
    "start": "1217880",
    "end": "1223039"
  },
  {
    "text": "it has this repeat directive that allows you to return the",
    "start": "1223039",
    "end": "1228440"
  },
  {
    "text": "same response to the same request multiple times in a row normally it works like a circular buffer it kind of",
    "start": "1228440",
    "end": "1233660"
  },
  {
    "text": "rotates through a series of responses but you can ask it to hold back for",
    "start": "1233660",
    "end": "1239179"
  },
  {
    "text": "three times on the same response before cycling to the next one",
    "start": "1239179",
    "end": "1244179"
  },
  {
    "text": "what I wanted to do a much more composable way because it allows the",
    "start": "1244340",
    "end": "1250460"
  },
  {
    "text": "consumer to specify the exact order of each transformation which isn't possible",
    "start": "1250460",
    "end": "1255620"
  },
  {
    "text": "on the left on the left there's an implicit order encoded inside mount eBay not published not advertised and while",
    "start": "1255620",
    "end": "1263660"
  },
  {
    "text": "some Transformations operate one time at most",
    "start": "1263660",
    "end": "1269179"
  },
  {
    "text": "like decorate or wait some can operate multiple times like shell Transformer",
    "start": "1269179",
    "end": "1274460"
  },
  {
    "text": "lookup repeat it turns out doesn't really belong there because it's less of a",
    "start": "1274460",
    "end": "1280280"
  },
  {
    "text": "transformation on the response and more directive on how to return responses when there's a list of them non-tubated",
    "start": "1280280",
    "end": "1287000"
  },
  {
    "text": "standpoint so I wanted to do was have a list where every single element in the list is a",
    "start": "1287000",
    "end": "1293840"
  },
  {
    "text": "single transformation and you can repeat the Transformations as much as you want if you want to repeat the weight transformation multiple times that's on",
    "start": "1293840",
    "end": "1301340"
  },
  {
    "text": "you you can do it it's very consistent this actually allowed me to make the API",
    "start": "1301340",
    "end": "1306500"
  },
  {
    "text": "in my opinion more elegant and more obvious because it works more like consumers would expect it to work rather",
    "start": "1306500",
    "end": "1313280"
  },
  {
    "text": "than just demonstrating The Accidental evolution of the API over the years",
    "start": "1313280",
    "end": "1318620"
  },
  {
    "text": "so I ranked this one quite High just like web testing in general",
    "start": "1318620",
    "end": "1324460"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "but like all non-versioning approaches it does require a little bit of implementation complexity",
    "start": "1325039",
    "end": "1332120"
  },
  {
    "text": "the good news is that the implementation and complexity for nested load casting is Trivial all I have to do I have the",
    "start": "1332120",
    "end": "1339440"
  },
  {
    "text": "exact same floor and the pathway of a requests coming in and being interpreted",
    "start": "1339440",
    "end": "1344900"
  },
  {
    "text": "by moneybank to follow this compatibility module and all I have to do is add another function for the",
    "start": "1344900",
    "end": "1350480"
  },
  {
    "text": "additional Transformations after the previous one as long as I execute them in order everything works exactly as it",
    "start": "1350480",
    "end": "1357080"
  },
  {
    "text": "should so we did the upshell transform up cast shell transform to array so took",
    "start": "1357080",
    "end": "1363500"
  },
  {
    "text": "the string made an array and the next instance all I have to do is make the",
    "start": "1363500",
    "end": "1368900"
  },
  {
    "text": "other transformation so if you have a very old consumer that only has the original contract",
    "start": "1368900",
    "end": "1375140"
  },
  {
    "text": "they'll upcast it to the next you know sort of internal version of that contract and then the upcast behaviors",
    "start": "1375140",
    "end": "1381380"
  },
  {
    "text": "to array will update it to the published contract as it exists today in the",
    "start": "1381380",
    "end": "1386720"
  },
  {
    "text": "mountain won't go into the implementation but it was pretty trivial I was just looking for the Json elements in the right spot",
    "start": "1386720",
    "end": "1393260"
  },
  {
    "text": "and making sure that if it was an array it would unpack each element of the array in order and if it was a string",
    "start": "1393260",
    "end": "1400000"
  },
  {
    "text": "that would keep it as is but it would make sure that every single element in the behaviors array",
    "start": "1400000",
    "end": "1406280"
  },
  {
    "text": "have a single transformation Associated to it the next instance of a breaking change",
    "start": "1406280",
    "end": "1415400"
  },
  {
    "text": "managed without a version was far more complex and so this one's going to take a little bit of a leap of faith to",
    "start": "1415400",
    "end": "1421940"
  },
  {
    "text": "understand and I want to Deep dive into uh how to use Mountain Bank or the mountie",
    "start": "1421940",
    "end": "1427340"
  },
  {
    "text": "bank internal mechanics too much but this one does require a little bit more context so I mentioned that mount deep",
    "start": "1427340",
    "end": "1433400"
  },
  {
    "text": "ink allows you as we've already seen to represent a canned response that it will return",
    "start": "1433400",
    "end": "1439520"
  },
  {
    "text": "or HTTP we had the 500 status heroin the body text an alternative is this way of",
    "start": "1439520",
    "end": "1446240"
  },
  {
    "text": "programmatically generating a Json response instead of is you pass in inject and a JavaScript function as a",
    "start": "1446240",
    "end": "1453500"
  },
  {
    "text": "string as you see here the function at first just had the request that you were",
    "start": "1453500",
    "end": "1459500"
  },
  {
    "text": "the original request that the system under test made to Mountain Bank as a",
    "start": "1459500",
    "end": "1465380"
  },
  {
    "text": "virtual service there's a way of keeping state so that if you were to programmatically generate",
    "start": "1465380",
    "end": "1472340"
  },
  {
    "text": "the response and maybe you wanted to add how many times you've done that you could keep a counter and you could",
    "start": "1472340",
    "end": "1477380"
  },
  {
    "text": "attach the result of that counter and as part of the response that you generated and a while longer and so that was the",
    "start": "1477380",
    "end": "1484280"
  },
  {
    "text": "original definition of the JavaScript function you could pass in pretty early on people wanted to be able",
    "start": "1484280",
    "end": "1491659"
  },
  {
    "text": "to generate the response in an asynchronous way maybe they want to look something up from a database or",
    "start": "1491659",
    "end": "1497419"
  },
  {
    "text": "have a network hop so I had to have this callback and then a little bit later after that it turns out that the way I'd",
    "start": "1497419",
    "end": "1504140"
  },
  {
    "text": "implemented state was too narrowly scoped and so somebody made a very good pull request to add a much better way of",
    "start": "1504140",
    "end": "1511580"
  },
  {
    "text": "managing state but it was certainly inelegant because I had these two State",
    "start": "1511580",
    "end": "1516740"
  },
  {
    "text": "variables and the JavaScript function and you know while I tried to do my best",
    "start": "1516740",
    "end": "1522559"
  },
  {
    "text": "in the documentation to explain it it certainly did not Aid comprehension for a newcomer to the tool that required",
    "start": "1522559",
    "end": "1529400"
  },
  {
    "text": "having to follow along the accidental evolution of the tool anybody who's done a lot of refactoring",
    "start": "1529400",
    "end": "1537260"
  },
  {
    "start": "1534000",
    "end": "1534000"
  },
  {
    "text": "and dynamic languages languages in general know that one of the most effective ways to",
    "start": "1537260",
    "end": "1544100"
  },
  {
    "text": "simplify that type of interface is to use this idea of a parameter object and as you have parameters start to explode",
    "start": "1544100",
    "end": "1550220"
  },
  {
    "text": "you can replace it with a single object that represents the totality of the",
    "start": "1550220",
    "end": "1557299"
  },
  {
    "text": "parameters and of course that makes it a very easy extension point because if I need to add a sixth parameter down the",
    "start": "1557299",
    "end": "1562520"
  },
  {
    "text": "line it's just a property on that config object so this is the new published interface",
    "start": "1562520",
    "end": "1568940"
  },
  {
    "text": "for Naughty bank again a breaking change because for people who passed on that",
    "start": "1568940",
    "end": "1575659"
  },
  {
    "text": "JavaScript function on the left they now have to be transformed into that JavaScript",
    "start": "1575659",
    "end": "1582440"
  },
  {
    "text": "function on the right however assuming multibank can do that transformation for",
    "start": "1582440",
    "end": "1587840"
  },
  {
    "text": "you through this technique called downcasting which I'll explain here momentarily it's a pretty elegant way of",
    "start": "1587840",
    "end": "1594340"
  },
  {
    "text": "managing the complexity and Producer instead of passing it on to the consumers it's not quite as obvious",
    "start": "1594340",
    "end": "1602140"
  },
  {
    "text": "because there is a little bit of uh Magic that happens behind the hood or",
    "start": "1602140",
    "end": "1610400"
  },
  {
    "text": "underneath the hood uh it's not quite as elegant because you do have this Legacy of these old parameters that somehow",
    "start": "1610400",
    "end": "1616460"
  },
  {
    "text": "have to be passed around but it's done well it can be very stable so here is what it looked like in this",
    "start": "1616460",
    "end": "1625340"
  },
  {
    "text": "instance in Mount T Bank what we basically did was we had the uh new parameter object this",
    "start": "1625340",
    "end": "1634279"
  },
  {
    "text": "config passed in and we continue to pass the",
    "start": "1634279",
    "end": "1639440"
  },
  {
    "text": "subsequent parameters even though we don't advertise them we don't call them out explicitly on the contract you can't",
    "start": "1639440",
    "end": "1646940"
  },
  {
    "text": "go to the multi-bank documentation today and see that these parameters are being passed in the only",
    "start": "1646940",
    "end": "1653600"
  },
  {
    "text": "reason they are is for consumers who have never updated to the published",
    "start": "1653600",
    "end": "1659120"
  },
  {
    "text": "version to the published contract they're using the old contract those older parameters will still be passed in",
    "start": "1659120",
    "end": "1664840"
  },
  {
    "text": "but that so that solves everything beyond the first parameter the parameter object it doesn't solve what happens",
    "start": "1664840",
    "end": "1670820"
  },
  {
    "text": "with the parameter object itself because that still needs to look like the old request that used to be passed in and so",
    "start": "1670820",
    "end": "1678140"
  },
  {
    "text": "that's why we call this downcast injection config call down here that takes us back to the compatibility",
    "start": "1678140",
    "end": "1684620"
  },
  {
    "text": "module so all of my Transformations that manage",
    "start": "1684620",
    "end": "1689840"
  },
  {
    "text": "uh changes in the contract breaking changes in the contract I can centralize in this compatibility module I can go to",
    "start": "1689840",
    "end": "1696380"
  },
  {
    "text": "one place and see the history of breaking changes uh through the API and when I say breaking changes they are",
    "start": "1696380",
    "end": "1703940"
  },
  {
    "text": "breaking changes to the published contract but multibank will manage the transformation from old to new for you",
    "start": "1703940",
    "end": "1709520"
  },
  {
    "text": "so the consumer doesn't have to so in this case what I had to do to make",
    "start": "1709520",
    "end": "1716360"
  },
  {
    "text": "that config parameter object that had to have States had to have the",
    "start": "1716360",
    "end": "1723440"
  },
  {
    "text": "logger I had to have the done call back on there so that people using the new interface would it would work as",
    "start": "1723440",
    "end": "1729020"
  },
  {
    "text": "expected but for people using the old interface it had to look like the old request and so that's what this bolded",
    "start": "1729020",
    "end": "1734960"
  },
  {
    "text": "code down below is doing there's a little bit of internal mechanics that mentioned Bounty bank has multiple",
    "start": "1734960",
    "end": "1740960"
  },
  {
    "text": "protocols this method and data or ways of sensing for in this case HTTP and TCP",
    "start": "1740960",
    "end": "1747520"
  },
  {
    "text": "but then what it would do is it would take all of the elements of the request none of which I knew conflicted with the",
    "start": "1747520",
    "end": "1753919"
  },
  {
    "text": "names of state and logger and the done callback so I had to just have that expert knowledge as the person who",
    "start": "1753919",
    "end": "1760220"
  },
  {
    "text": "architected the code to know I wasn't going to run into any naming conflicts but it would add all of the elements",
    "start": "1760220",
    "end": "1765440"
  },
  {
    "text": "like the request headers uh the request body the request query string to the",
    "start": "1765440",
    "end": "1771740"
  },
  {
    "text": "config object so while it was a parameter object that only had State and logger and callback for most consumers",
    "start": "1771740",
    "end": "1779720"
  },
  {
    "text": "if you you happened to have your code use the old function interface it would",
    "start": "1779720",
    "end": "1786559"
  },
  {
    "text": "also have all the HTTP request properties on it as well so it continued to work and that way it was downcasting",
    "start": "1786559",
    "end": "1794240"
  },
  {
    "text": "the modern code to the old version in a way that would support both old and new in a way that was guaranteed to not run",
    "start": "1794240",
    "end": "1800120"
  },
  {
    "text": "into any naming conflicts",
    "start": "1800120",
    "end": "1803380"
  },
  {
    "text": "so this next pattern is I think where things uh get really interesting and",
    "start": "1807020",
    "end": "1813260"
  },
  {
    "text": "really explore the boundaries of what is a contract and what is a promise that I hinted at early",
    "start": "1813260",
    "end": "1819380"
  },
  {
    "text": "uh getting back to Michelle transform uh I gave a little bit of a brief",
    "start": "1819380",
    "end": "1826100"
  },
  {
    "text": "description of it it allows you to build a shell program written in the language of your choice that would receive the",
    "start": "1826100",
    "end": "1834679"
  },
  {
    "text": "Json encoded request and response and it would allow you to spit out a",
    "start": "1834679",
    "end": "1841340"
  },
  {
    "text": "Json encoded response so it allows programmatic transformation and if you were writing this JavaScript for example",
    "start": "1841340",
    "end": "1848000"
  },
  {
    "text": "the way it was originally published your code would look something like this the request and the response would be passed",
    "start": "1848000",
    "end": "1855140"
  },
  {
    "text": "as command line arguments to your shell program voted the right way and you would have",
    "start": "1855140",
    "end": "1861559"
  },
  {
    "text": "to interpret those in your code that had all kinds of problems",
    "start": "1861559",
    "end": "1868960"
  },
  {
    "text": "especially in Windows and it has to do with the maximum length of the command",
    "start": "1868960",
    "end": "1875419"
  },
  {
    "text": "line which is actually more variable than I understood when I wrote this code between",
    "start": "1875419",
    "end": "1880940"
  },
  {
    "text": "operating systems and shells and windows it's quite limited as if the",
    "start": "1880940",
    "end": "1886100"
  },
  {
    "text": "exact number but it's maybe 1048 characters or something like that and of course you can have very heavy",
    "start": "1886100",
    "end": "1892159"
  },
  {
    "text": "weight uh HTTP requests or responses and if you're including that in Json it's a",
    "start": "1892159",
    "end": "1897620"
  },
  {
    "text": "you know 2000 character body you've already exceeded the limit on the shell",
    "start": "1897620",
    "end": "1903140"
  },
  {
    "text": "so what I had to do was uh over that and that's the the character limit itself",
    "start": "1903140",
    "end": "1908539"
  },
  {
    "text": "there are also a number of uh just holding complexities to quote the Json",
    "start": "1908539",
    "end": "1913940"
  },
  {
    "text": "the right way and Escape internal quotes for the different shells I figured it out you know on Linux based shells but",
    "start": "1913940",
    "end": "1921620"
  },
  {
    "text": "the variety of coding mechanisms on Windows space shelves because there's more than one you have Powershell you",
    "start": "1921620",
    "end": "1927679"
  },
  {
    "text": "have the cmd.exe you have the Linux uh uh like synchron type ports uh was more",
    "start": "1927679",
    "end": "1935960"
  },
  {
    "text": "complexity than I realized when I went with this approach and so what I had to",
    "start": "1935960",
    "end": "1941539"
  },
  {
    "text": "do was change it to have multibank as the parent process puts these things in",
    "start": "1941539",
    "end": "1948440"
  },
  {
    "text": "environment variables that allow the child process to read the environment variable it's very safe very clean don't know why didn't start there from the",
    "start": "1948440",
    "end": "1954500"
  },
  {
    "text": "beginning but I didn't and that's the reality of API developments you make mistakes uh so I wanted this to be the new",
    "start": "1954500",
    "end": "1962179"
  },
  {
    "text": "published interface but of course I still had to leave this in there I just removed it from the documentation so",
    "start": "1962179",
    "end": "1968000"
  },
  {
    "text": "that's what I mean when I say a hidden interface it's still supported it's just no longer part of the published contract",
    "start": "1968000",
    "end": "1974240"
  },
  {
    "text": "uh and if it worked I think it's a reasonably Safe Way of moving forward I",
    "start": "1974240",
    "end": "1980179"
  },
  {
    "text": "downgraded stability a little bit and I think the reason is hinted at with the",
    "start": "1980179",
    "end": "1987860"
  },
  {
    "text": "description I gave you of the character limitations of the shell so what happened was by still publishing",
    "start": "1987860",
    "end": "1996919"
  },
  {
    "start": "1992000",
    "end": "1992000"
  },
  {
    "text": "stuff to the command line and this code down here was more or less",
    "start": "1996919",
    "end": "2002860"
  },
  {
    "text": "the code that let me do it in this quote for Shell manage the complexity of trying to figure out if you're on",
    "start": "2002860",
    "end": "2008919"
  },
  {
    "text": "Windows and how that how to quote it exactly right but unfortunately it's still even if you",
    "start": "2008919",
    "end": "2016059"
  },
  {
    "text": "weren't using the old interface even if you weren't using the command line interfaces if your shell program was",
    "start": "2016059",
    "end": "2021399"
  },
  {
    "text": "using the environment variables it still introduced scenarios where it would break mountains because it would put the",
    "start": "2021399",
    "end": "2029140"
  },
  {
    "text": "command line at variables as part of the shell implication and sometimes in certain",
    "start": "2029140",
    "end": "2037360"
  },
  {
    "text": "shells in certain operating systems that invocation would exceed the character limit supported by the shell itself so",
    "start": "2037360",
    "end": "2044679"
  },
  {
    "text": "even though you had no intention using them even though you didn't even know they were being passed multibank would",
    "start": "2044679",
    "end": "2050138"
  },
  {
    "text": "throw an error because it exceeded the shell limitation for a while what I tried to do is say",
    "start": "2050139",
    "end": "2057460"
  },
  {
    "text": "um Let Me Be Clever and if you're on Windows do this if you're on Linux do that it was too much complexity I don't",
    "start": "2057460",
    "end": "2063280"
  },
  {
    "text": "know that I'm smart enough to figure out actually how to do it all and even if I was you would still run into edge cases",
    "start": "2063280",
    "end": "2069520"
  },
  {
    "text": "no matter how big the character limit of the shell is there is a limit and it's",
    "start": "2069520",
    "end": "2075580"
  },
  {
    "text": "possible to exceed that limit especially if you're testing very large bodies for HTTP for example",
    "start": "2075580",
    "end": "2081700"
  },
  {
    "text": "so my first attempt was to just truncate it by cells but pretty soon I realized that",
    "start": "2081700",
    "end": "2087940"
  },
  {
    "text": "was a mistake so I had to truncate it for everybody and this was a real trade-off I think",
    "start": "2087940",
    "end": "2095980"
  },
  {
    "text": "probably the pivotal moment in this talk because there was no way for me to guarantee",
    "start": "2095980",
    "end": "2102460"
  },
  {
    "text": "that I could do this without a version without breaking people if I truncated it for people who were on a living shell",
    "start": "2102460",
    "end": "2109720"
  },
  {
    "text": "that had hundreds of thousands of characters as a limit um and I truncated it for Windows which",
    "start": "2109720",
    "end": "2115780"
  },
  {
    "text": "maybe had a thousand or two thousand character limit uh there may be people who used the old",
    "start": "2115780",
    "end": "2122260"
  },
  {
    "text": "interface on Linux post truncation that they would get in there",
    "start": "2122260",
    "end": "2127540"
  },
  {
    "text": "uh I was unaware of any I had zero feedback that that was the case but it was certainly a possibility even if it",
    "start": "2127540",
    "end": "2134140"
  },
  {
    "text": "was somewhat remote because the way of publishing on the command line wasn't around for very long",
    "start": "2134140",
    "end": "2140020"
  },
  {
    "text": "before it switched to the environment variable approach so releasing a new version would have",
    "start": "2140020",
    "end": "2145359"
  },
  {
    "text": "been the safest option by far to satisfy all of the constraints around",
    "start": "2145359",
    "end": "2150400"
  },
  {
    "text": "stability in that scenario however it would have also forced consumers to upgrade uh it would have",
    "start": "2150400",
    "end": "2157420"
  },
  {
    "text": "been very noticeable to Consumers they would have had to read the release notes figure out what they need to change and do a round of testing associated with",
    "start": "2157420",
    "end": "2163000"
  },
  {
    "text": "that if alternatively I took the approach which I did which was to just truncate in all cases publish only the",
    "start": "2163000",
    "end": "2169780"
  },
  {
    "text": "environment variable approach and rely on the fact that it was unlikely to",
    "start": "2169780",
    "end": "2174820"
  },
  {
    "text": "break anybody and if it did the error message would exactly specify what they needed to do to fix it to switch to the",
    "start": "2174820",
    "end": "2181359"
  },
  {
    "text": "environment variables then I was optimizing for the masses excuse me",
    "start": "2181359",
    "end": "2190079"
  },
  {
    "text": "I was optimizing for what would support most people in a very frictionless way",
    "start": "2190079",
    "end": "2196060"
  },
  {
    "text": "with a clear path of resolution for what may be zero people who were affected by the breaking change",
    "start": "2196060",
    "end": "2202480"
  },
  {
    "text": "and that's uncomfortable because that forces us to rethink API Evolution away",
    "start": "2202480",
    "end": "2209079"
  },
  {
    "text": "from an architectural pattern the guarantees stability to thinking about",
    "start": "2209079",
    "end": "2214480"
  },
  {
    "text": "it as uh as the users would think about it and I was really inspired by this",
    "start": "2214480",
    "end": "2221619"
  },
  {
    "text": "thing called Hiram's law you can go to this website her and look at Google and with a sufficient number of users on",
    "start": "2221619",
    "end": "2228339"
  },
  {
    "text": "the API uh it doesn't matter what you promised in the contract because consumers will couple themselves to",
    "start": "2228339",
    "end": "2234579"
  },
  {
    "text": "every part of the API I remember for a while Microsoft Windows when they would",
    "start": "2234579",
    "end": "2240040"
  },
  {
    "text": "update they would have to add code to the updated operating system because they",
    "start": "2240040",
    "end": "2246099"
  },
  {
    "text": "would test not just the operating system itself but they would test third-party applications using the operating system",
    "start": "2246099",
    "end": "2253300"
  },
  {
    "text": "in third party Developers had done all kinds of very creative things with unpublished parts of the",
    "start": "2253300",
    "end": "2260800"
  },
  {
    "text": "windows SDK for a long time and so Windows as they changed these unpublished parts of the SDK maybe they",
    "start": "2260800",
    "end": "2267040"
  },
  {
    "text": "were doing something clever with this 8-bit eighth bit that was unused in a byte which was a real scenario that",
    "start": "2267040",
    "end": "2273400"
  },
  {
    "text": "happened sometimes they would have to detect that and write code in the new",
    "start": "2273400",
    "end": "2278800"
  },
  {
    "text": "operating system that would continue to support the same behavior even though there's never something that guaranteed",
    "start": "2278800",
    "end": "2286480"
  },
  {
    "start": "2286000",
    "end": "2286000"
  },
  {
    "text": "there's a famous XKCD comic out there where you know users complain about",
    "start": "2286480",
    "end": "2292660"
  },
  {
    "text": "their emacs was taking advantage of the fact that when you held the space bar",
    "start": "2292660",
    "end": "2297700"
  },
  {
    "text": "down it overheated the computer to create some side effect and the developer was like no I just fixed the",
    "start": "2297700",
    "end": "2303520"
  },
  {
    "text": "overheating problem but the Emax user was like no no can you change it back to the old Behavior",
    "start": "2303520",
    "end": "2309540"
  },
  {
    "text": "Hiram's law is a really humbling law for an API producer and especially as one",
    "start": "2309540",
    "end": "2316480"
  },
  {
    "text": "who has had a public API available for most of a decade now I really relate to",
    "start": "2316480",
    "end": "2322960"
  },
  {
    "text": "how frequently I come find myself surprised at how people have hacked an",
    "start": "2322960",
    "end": "2329619"
  },
  {
    "text": "API to do something that I didn't anticipate they could do in a way that I wasn't intending to support but now is",
    "start": "2329619",
    "end": "2334960"
  },
  {
    "text": "is oftentimes supported by the bank is primarily a restful API that some people",
    "start": "2334960",
    "end": "2341079"
  },
  {
    "text": "you can embed it in JavaScript and I never really meant to support it but some people did that because it solves",
    "start": "2341079",
    "end": "2347200"
  },
  {
    "text": "the startup time it's just part of your website instead of a separate website and so now I have this accidental uh",
    "start": "2347200",
    "end": "2353800"
  },
  {
    "text": "complexity I guess of supporting a JavaScript API that you can embed in an",
    "start": "2353800",
    "end": "2359140"
  },
  {
    "text": "express application as well and that's an example of Hiram's law",
    "start": "2359140",
    "end": "2364800"
  },
  {
    "text": "mentioned in this book which is why I put it there I think I got a lot of value from some of the patterns of what",
    "start": "2364800",
    "end": "2370359"
  },
  {
    "text": "Google's had to do to scale to 50 000 engineers and we talk a lot about API as a product",
    "start": "2370359",
    "end": "2377980"
  },
  {
    "start": "2374000",
    "end": "2374000"
  },
  {
    "text": "nowadays usability feasibility viability being common descriptions of the trade-offs",
    "start": "2377980",
    "end": "2383740"
  },
  {
    "text": "and product management I think that rethinking",
    "start": "2383740",
    "end": "2390160"
  },
  {
    "text": "backwards Evolution or backwards compatibility Evolution or breaking change Evolution from an architecture of",
    "start": "2390160",
    "end": "2397000"
  },
  {
    "text": "concern to a product management concern is a much healthier position to think about how to manage your Evolution or",
    "start": "2397000",
    "end": "2403540"
  },
  {
    "text": "the evolution of your API I think that the trade-offs that are represented by",
    "start": "2403540",
    "end": "2408880"
  },
  {
    "start": "2405000",
    "end": "2405000"
  },
  {
    "text": "product thinking are more nuanced than the trade-offs represented by architecture thinking",
    "start": "2408880",
    "end": "2415300"
  },
  {
    "text": "and I think versioning is a very solid architectural pattern that guarantees",
    "start": "2415300",
    "end": "2420520"
  },
  {
    "text": "stability in the case of breaking changes and there are always needs for",
    "start": "2420520",
    "end": "2425619"
  },
  {
    "text": "that pattern multi-bank itself has enough debt underneath it that one of these days I would like to release a",
    "start": "2425619",
    "end": "2432339"
  },
  {
    "text": "version a subsequent version that allows me to remove a lot of the Croft a lot of",
    "start": "2432339",
    "end": "2437500"
  },
  {
    "text": "the things I really no longer want to support but have to because of some of these backwards compatible Transformations that I'm doing",
    "start": "2437500",
    "end": "2444579"
  },
  {
    "text": "if we think about viability resolving problem that our users have and API",
    "start": "2444579",
    "end": "2451780"
  },
  {
    "text": "context I really like the idea of cognitive load that the authors of Team topologies talk about",
    "start": "2451780",
    "end": "2458140"
  },
  {
    "text": "when I think about any product what I really want to do is simplify the underlying complexity I really have no",
    "start": "2458140",
    "end": "2465040"
  },
  {
    "text": "idea how my phone looks I have no idea how it connects to a cell tower I don't understand the underlying mechanics and",
    "start": "2465040",
    "end": "2470079"
  },
  {
    "text": "physics material design to really understand the software but it simplifies an interface for me to be",
    "start": "2470079",
    "end": "2477700"
  },
  {
    "text": "able to use it same with driving a car it's a couple pedals and a steering wheel mirrors in the right places and I",
    "start": "2477700",
    "end": "2483400"
  },
  {
    "text": "can drive without having to understand the underlying complexity of the system that I'm driving I want my apis to do",
    "start": "2483400",
    "end": "2489160"
  },
  {
    "text": "the same thing usability really has been the focus of this talk how do I manage Evolution to",
    "start": "2489160",
    "end": "2496660"
  },
  {
    "text": "that system or to that immune phase in a way that provides the most usable and",
    "start": "2496660",
    "end": "2502420"
  },
  {
    "text": "stable experience for my users and then feasibility is very much an architectural concern how do I do that",
    "start": "2502420",
    "end": "2507760"
  },
  {
    "text": "in a way that is technically feasible that protects Downstream systems and satisfies the non-functional",
    "start": "2507760",
    "end": "2514960"
  },
  {
    "text": "requirements of the overall ecosystem at Large rethinking API Evolution as product",
    "start": "2514960",
    "end": "2521980"
  },
  {
    "text": "management I think for me has been a pretty profound way of",
    "start": "2521980",
    "end": "2528240"
  },
  {
    "text": "understanding the needs and empathizing with the needs of the consumers of",
    "start": "2528240",
    "end": "2534460"
  },
  {
    "text": "naughty bank and it's something that I recommend you consider as you're evolving your own API versioning is",
    "start": "2534460",
    "end": "2540579"
  },
  {
    "text": "always an option that you can reach for upcasting and some of these others I think would be valuable additions to",
    "start": "2540579",
    "end": "2547300"
  },
  {
    "text": "your toolbox so thank you very much",
    "start": "2547300",
    "end": "2551040"
  },
  {
    "text": "hi Brandon Hey Thomas how you doing good um so great presentation",
    "start": "2554140",
    "end": "2560859"
  },
  {
    "text": "um really appreciate it all again those are really good patterns to go through I think there's one question I wasn't sure",
    "start": "2560859",
    "end": "2566859"
  },
  {
    "text": "we got answered to in the in the chat um about the how do you hide the complexity",
    "start": "2566859",
    "end": "2572920"
  },
  {
    "text": "and keep it from being too bloated yeah it's a good question I think I misattributed the questioner when I was",
    "start": "2572920",
    "end": "2579640"
  },
  {
    "text": "trying to keep up I um a large part of that in my context was trying to centralize it so almost all of the code",
    "start": "2579640",
    "end": "2586900"
  },
  {
    "text": "in Maui Bank only knows how to respond to the newest interface that is documented supported behind the contract",
    "start": "2586900",
    "end": "2593940"
  },
  {
    "text": "so most of the code doesn't have this Legacy behind it for upcasting there's",
    "start": "2593940",
    "end": "2600040"
  },
  {
    "text": "one hook in the request processing pipeline that calls this compatibility module that's the all where all the",
    "start": "2600040",
    "end": "2606400"
  },
  {
    "text": "Transformations happen that convert from old to new the exceptions are downcasting a few downcast hauls have to",
    "start": "2606400",
    "end": "2612579"
  },
  {
    "text": "be sprinkled in certain strategic areas of the code and that is a little bit of bloat a little bit debt you know they'd",
    "start": "2612579",
    "end": "2618579"
  },
  {
    "text": "love to clean up someday with a new version but for most of the Transformations it's it's pretty straightforward",
    "start": "2618579",
    "end": "2624819"
  },
  {
    "text": "uh I also like the the tie in that book that you showed at the end I can't remember the title um had a flamingo on",
    "start": "2624819",
    "end": "2629980"
  },
  {
    "text": "the cover and people who watched the Keynotes uh all the flamingos on the dinosaur during Aster's presentation so",
    "start": "2629980",
    "end": "2635020"
  },
  {
    "text": "oh that's right yeah two times um there was a question about",
    "start": "2635020",
    "end": "2640420"
  },
  {
    "text": "um returning a string instead of other data types and that made me wonder a lot of your patterns you talked about are",
    "start": "2640420",
    "end": "2645880"
  },
  {
    "text": "how you handle changes to the request support different inputs how do you evolve the response that you give to the",
    "start": "2645880",
    "end": "2652839"
  },
  {
    "text": "consumer that was a really good question that also came up when we did the live",
    "start": "2652839",
    "end": "2658119"
  },
  {
    "text": "conference in San Francisco a few weeks back uh and I don't have an answer for it unfortunately I mean I think that's uh I",
    "start": "2658119",
    "end": "2666099"
  },
  {
    "text": "don't think there is a path that I see for the producer managing",
    "start": "2666099",
    "end": "2671140"
  },
  {
    "text": "um backwards and compatible changes on the response without a version in fact this is one of the driving forces that I",
    "start": "2671140",
    "end": "2676900"
  },
  {
    "text": "would love to you know someday create a version for money bank one because there's some responses that you know I",
    "start": "2676900",
    "end": "2682540"
  },
  {
    "text": "look on now I was like well I wish I hadn't done that um so sometimes these changes happen and",
    "start": "2682540",
    "end": "2689980"
  },
  {
    "text": "you have to evolve because there are just new features you want to add and sometimes it's a mistake in the original",
    "start": "2689980",
    "end": "2695980"
  },
  {
    "text": "design for lack of a better term um well there is there a difference of",
    "start": "2695980",
    "end": "2701740"
  },
  {
    "text": "how you approach which pattern to apply based on whether it was what what drove you to make the change does that",
    "start": "2701740",
    "end": "2708160"
  },
  {
    "text": "influence your decision yeah um most new features ideally you're",
    "start": "2708160",
    "end": "2714099"
  },
  {
    "text": "trying to be thoughtful in the API design to make",
    "start": "2714099",
    "end": "2719859"
  },
  {
    "text": "plugging in new features an addition and that has been the norm it's not",
    "start": "2719859",
    "end": "2725680"
  },
  {
    "text": "Universal but generally speaking that's an easier process um sometimes uh cover up mistakes it",
    "start": "2725680",
    "end": "2733900"
  },
  {
    "text": "requires more thought on the API design changing my experience and there's kind",
    "start": "2733900",
    "end": "2739300"
  },
  {
    "text": "of simplistic ones where you know I really wish I hadn't had created this endpoint or except for the pr with this",
    "start": "2739300",
    "end": "2745180"
  },
  {
    "text": "endpoint that has a specific name because I actually that it doesn't communicate you know what I'm really",
    "start": "2745180",
    "end": "2750960"
  },
  {
    "text": "hoping that feature communicates to users um and it uh it actually conflicts with",
    "start": "2750960",
    "end": "2758140"
  },
  {
    "text": "some future features that I want to add so that actually happened so what I did in that case was",
    "start": "2758140",
    "end": "2764200"
  },
  {
    "text": "um you know there's a little bit of hidden features going on right so I and just",
    "start": "2764200",
    "end": "2769960"
  },
  {
    "text": "change by addition so I created a new endpoint with a name that wasn't as elegant as what I originally wanted to I",
    "start": "2769960",
    "end": "2775359"
  },
  {
    "text": "just compromised on that because it was more stable so and my criteria was less elegant I would say but more stable",
    "start": "2775359",
    "end": "2782079"
  },
  {
    "text": "um and I just accepted that there's a trade-off like sometimes you you can't get the API exactly the way you want because of the fact that you have real",
    "start": "2782079",
    "end": "2789700"
  },
  {
    "text": "users using it and that's not necessarily a bad thing especially if you can keep those users happy",
    "start": "2789700",
    "end": "2795160"
  },
  {
    "text": "um and so there's uh an attempt at sort of deprecating an old endpoint create a new new one I want to communicate but",
    "start": "2795160",
    "end": "2801700"
  },
  {
    "text": "still having a little bit of compromise in the naming of fields and then of course some of these other patterns that you see here are other strategies that",
    "start": "2801700",
    "end": "2808660"
  },
  {
    "text": "that do require more thought more effort than just adding a feature in most cases yeah and then another question just came",
    "start": "2808660",
    "end": "2816040"
  },
  {
    "text": "to the chat so with it kind to ask what you're just talking about with deprecation with centralized your",
    "start": "2816040",
    "end": "2821079"
  },
  {
    "text": "centralized compatibility module how do you actually stop supporting features with version you can delete the",
    "start": "2821079",
    "end": "2828819"
  },
  {
    "text": "code that's handling version whatever of the API as long as it's in a separate module um does this stuff live around forever",
    "start": "2828819",
    "end": "2835599"
  },
  {
    "text": "yeah yeah that might be a little bit of a mind-blowing statement to some folks but yeah I've never deprecated um those",
    "start": "2835599",
    "end": "2842319"
  },
  {
    "text": "features so if uh as soon as I release something and um you know it's hard for",
    "start": "2842319",
    "end": "2847900"
  },
  {
    "text": "an open source product sometimes to know who's using what features I don't have any sort of phone home analytics and I don't intend to add any",
    "start": "2847900",
    "end": "2855099"
  },
  {
    "text": "um so you have to assume that you're getting some users of that feature uh and right the good news is that with the",
    "start": "2855099",
    "end": "2862119"
  },
  {
    "text": "centralized compatibility module especially with upcasting which is most of what I've done it's relatively easy",
    "start": "2862119",
    "end": "2867339"
  },
  {
    "text": "to adjust or I've been able to take one of these other patterns that doesn't require too much down casting is the",
    "start": "2867339",
    "end": "2873460"
  },
  {
    "text": "hardest and there's still support one of these days especially for the",
    "start": "2873460",
    "end": "2879220"
  },
  {
    "text": "response question that you asked Thomas because that's where I have the most stats and I haven't been able to use these strategies to resolve I would love",
    "start": "2879220",
    "end": "2885940"
  },
  {
    "text": "to do a version and that would be the opportunity to do a sweep through the code that no longer want to maintain",
    "start": "2885940",
    "end": "2891280"
  },
  {
    "text": "well I'm sure mounty Bank V2 will be really impressive well and the irony is",
    "start": "2891280",
    "end": "2896980"
  },
  {
    "text": "I did release a V2 but it was a marketing stunt because it was some and I looked at the summary here you know",
    "start": "2896980",
    "end": "2902619"
  },
  {
    "text": "spec and they say hey if it's a significant release you can use a major version so I felt you know pedantically validated with what they said but it was",
    "start": "2902619",
    "end": "2912460"
  },
  {
    "text": "really just a marketing style and I made sure in the release notes is that uh completely there's no Breaking Chains",
    "start": "2912460",
    "end": "2917619"
  },
  {
    "text": "yeah yeah gotcha well um we're we're pretty much up to the last minute so I",
    "start": "2917619",
    "end": "2923020"
  },
  {
    "text": "appreciate you again um for your talk uh if anyone has further questions please put them in the",
    "start": "2923020",
    "end": "2928300"
  },
  {
    "text": "slack Channel Brandon will be available to answer um and you all have a good day we'll see you later sessions today yeah thank you",
    "start": "2928300",
    "end": "2935200"
  },
  {
    "text": "so much thanks so much everybody for attending thank you",
    "start": "2935200",
    "end": "2940619"
  },
  {
    "text": "[Music]",
    "start": "2941390",
    "end": "2946839"
  }
]