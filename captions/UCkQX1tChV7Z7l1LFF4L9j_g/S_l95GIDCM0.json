[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "[Music]",
    "start": "2620",
    "end": "25320"
  },
  {
    "text": "all right um so as you probably know I'm going to talk about monad Transformers today uh it's kind of a follow-up talk",
    "start": "25320",
    "end": "31920"
  },
  {
    "start": "26000",
    "end": "26000"
  },
  {
    "text": "from a Meetup we had at at lassan a couple months ago um along the way I",
    "start": "31920",
    "end": "38000"
  },
  {
    "text": "show some uh examples of using monad Transformers from some of Stack mob's uh source code as well as a couple open",
    "start": "38000",
    "end": "43680"
  },
  {
    "text": "source projects we work on one of those projects is scalak which is a ROK a",
    "start": "43680",
    "end": "48879"
  },
  {
    "text": "rapper around the riok Java client um using a lot of uh it's a scolar rapper",
    "start": "48879",
    "end": "54239"
  },
  {
    "text": "uses a lot of Scala Zed and uh using monad Transformers with that Library can be useful so some of those examples will",
    "start": "54239",
    "end": "59399"
  },
  {
    "text": "come from there another one is uh Scala machine which is a port of basho's web",
    "start": "59399",
    "end": "65280"
  },
  {
    "text": "machine framework which is a HTP application framework over to Scala and",
    "start": "65280",
    "end": "70560"
  },
  {
    "text": "uh both those projects you can find on the stackmob GitHub org so github.com stackmob um and if you want I do have a",
    "start": "70560",
    "end": "77720"
  },
  {
    "text": "bunch of code on this slide so if you prefer sort of following Along on your computer you can grab the the slides up",
    "start": "77720",
    "end": "82840"
  },
  {
    "text": "there it's just speaker.com youjr west",
    "start": "82840",
    "end": "88159"
  },
  {
    "text": "pmad Transformers if you need the link let me know um and then lastly before we",
    "start": "88159",
    "end": "94560"
  },
  {
    "text": "get started just a little bit about me uh so I'm a developer here at stackmob",
    "start": "94560",
    "end": "99799"
  },
  {
    "text": "uh most I spend most of my time in Scala a little bit in llang a little bit in Ruby uh my background is primarily Ruby",
    "start": "99799",
    "end": "106360"
  },
  {
    "text": "and erlang and and now Scala I've been doing Scala for about a year now actually a year is this this weekend at",
    "start": "106360",
    "end": "112360"
  },
  {
    "text": "stackmob so um Scala is sort of somewhat new to me relative to some of the other",
    "start": "112360",
    "end": "117960"
  },
  {
    "text": "languages I've worked with uh so as I mentioned uh back in May uh",
    "start": "117960",
    "end": "123880"
  },
  {
    "text": "there was a Meetup uh John from atlassian gave a talk on the type classopia which is this awesome uh",
    "start": "123880",
    "end": "130239"
  },
  {
    "text": "reference for uh you know functional programming that alassian hosts and there's one there's one for hasal but",
    "start": "130239",
    "end": "136160"
  },
  {
    "text": "it's nice to have something for schola because we don't always have good documentation for us and you kind of have to go learn the hasal syntax so how",
    "start": "136160",
    "end": "143120"
  },
  {
    "text": "many people were at that Meetup okay some of you guys um and uh",
    "start": "143120",
    "end": "149640"
  },
  {
    "text": "the content itself uh so you know some of the the the basic type classes funter applicative moned how many people here",
    "start": "149640",
    "end": "156160"
  },
  {
    "text": "are are decently familiar with that in their minds okay um so I have a little bit of",
    "start": "156160",
    "end": "161920"
  },
  {
    "text": "review uh I'll kind of go medium speed and if you guys have any questions feel free to just shout out and and interrupt",
    "start": "161920",
    "end": "167400"
  },
  {
    "text": "me anytime um so John talked a lot a lot of things one of them is he talked about",
    "start": "167400",
    "end": "173480"
  },
  {
    "text": "this type class I'm assuming everyone's kind of familiar with the type class pattern right um okay so you talked",
    "start": "173480",
    "end": "178720"
  },
  {
    "text": "about one of these type classes called called the monad and uh it extends this other type class called an applicative",
    "start": "178720",
    "end": "184120"
  },
  {
    "text": "so every monad is an applicative and I'll kind of just handwave over that for now and more importantly there's this",
    "start": "184120",
    "end": "190000"
  },
  {
    "text": "method flatmap which uh and I've tried to sort of smooth it out in these slides but it's sometimes called bind it's",
    "start": "190000",
    "end": "196319"
  },
  {
    "text": "sometimes sort of written as greater than greater than equals um except for places where I actually have compiling",
    "start": "196319",
    "end": "201360"
  },
  {
    "text": "code I've tried to use flat map everywhere um but so there's sort of this really there's these three",
    "start": "201360",
    "end": "206959"
  },
  {
    "text": "important methods that are going to be sort of key to the rest of this talk so",
    "start": "206959",
    "end": "212040"
  },
  {
    "text": "the first one is point which uh comes from the implicative type class and uh that essentially lets us lift a pure",
    "start": "212040",
    "end": "218319"
  },
  {
    "text": "value into some monad or into some context and then we have map from the",
    "start": "218319",
    "end": "224159"
  },
  {
    "text": "funter type class which lets us lift a pure function that operates on a type A",
    "start": "224159",
    "end": "229879"
  },
  {
    "text": "and returns a type B lifted into some context or into some monad and then we have flat map from the monad type class",
    "start": "229879",
    "end": "235720"
  },
  {
    "text": "which lets us chain these operations together where one may depend on on the one previous um so everyone kind of good",
    "start": "235720",
    "end": "242120"
  },
  {
    "text": "so far cool uh so couple quick examples um in scaled 7 we have this nice way of",
    "start": "242120",
    "end": "248159"
  },
  {
    "text": "sort of explicitly grabbing the type class instance for a monad and and calling one of the functions on it um so",
    "start": "248159",
    "end": "254599"
  },
  {
    "text": "this is an example of that so we're talking about the the option the you know the option is an instance of the",
    "start": "254599",
    "end": "260519"
  },
  {
    "text": "modad type class we're talking about option here pointing the value one into it or we can we can map over it we can",
    "start": "260519",
    "end": "265759"
  },
  {
    "text": "here is bind but same as flat map um in scholar Z they call it bind in the type class and then there's syntactic sugar",
    "start": "265759",
    "end": "272240"
  },
  {
    "text": "for flatmap and this is kind of that syntactic Sugar although flat map to be honest is defined in the standard",
    "start": "272240",
    "end": "277919"
  },
  {
    "text": "library but you can see Point here which which comes from the the scol z7 syntactic sort of extensions there so we",
    "start": "277919",
    "end": "284720"
  },
  {
    "text": "have more of the objectoriented looking feel to our to our code um and really",
    "start": "284720",
    "end": "290680"
  },
  {
    "text": "what I think was kind of the core sort of thing that leads to this talk is how how John left his talk at the end and he",
    "start": "290680",
    "end": "297800"
  },
  {
    "start": "291000",
    "end": "291000"
  },
  {
    "text": "presented sort of one and it's important this is really only one possible intuition for manads but he said that a",
    "start": "297800",
    "end": "303400"
  },
  {
    "text": "a Mantic for comprehension is an embedded programming language with semantics defined by the monad so we",
    "start": "303400",
    "end": "309320"
  },
  {
    "text": "when we're working in this for comprehension we kind of have this little mini programming language that has you know these sort of semantics of",
    "start": "309320",
    "end": "315000"
  },
  {
    "text": "depending on on what our types are and um and he sort of left it with showing",
    "start": "315000",
    "end": "320039"
  },
  {
    "start": "320000",
    "end": "320000"
  },
  {
    "text": "one monad wrapping a value like option or something like that and mentioned that as we start to to compose these or",
    "start": "320039",
    "end": "326120"
  },
  {
    "text": "stack them it gets much more interesting and that's where Transformers sort of comes from",
    "start": "326120",
    "end": "332919"
  },
  {
    "text": "so at the simplest level right we maybe have something like a value which may or may not exist um and really quick before",
    "start": "332919",
    "end": "341360"
  },
  {
    "text": "I move forward um John had actually called option like Anonymous exceptions",
    "start": "341360",
    "end": "347240"
  },
  {
    "start": "343000",
    "end": "343000"
  },
  {
    "text": "and so one thing I think that's important about monads is the semantics you have some Choice over I mean the",
    "start": "347240",
    "end": "353039"
  },
  {
    "text": "types do communicate something but you know option can mean this value may not exist somewhere it may mean I don't care",
    "start": "353039",
    "end": "359360"
  },
  {
    "text": "about exceptions you sort of depending on your code are sort of choosing those semantics to an extent another example",
    "start": "359360",
    "end": "366080"
  },
  {
    "text": "is often debated in The scol Zed room is whether or not validation similar to either is a monad um in some people's",
    "start": "366080",
    "end": "372919"
  },
  {
    "text": "mind it's only an applicative because of its semantics whereas at stackmob we kind of tend to to bend those semantics",
    "start": "372919",
    "end": "378919"
  },
  {
    "text": "because we found that success and failure is easier to reason about than left and right even after using it for a",
    "start": "378919",
    "end": "384360"
  },
  {
    "text": "while so it can be dangerous but you also sort of have a choice um so anyways",
    "start": "384360",
    "end": "391280"
  },
  {
    "text": "so that optional value we may need to perform some side effects to go get maybe you know it's a value that may or",
    "start": "391280",
    "end": "397039"
  },
  {
    "text": "may not exist in the database and we need to go out and communicate over TCP to to to talk to that database to get",
    "start": "397039",
    "end": "402800"
  },
  {
    "text": "that value and maybe along the way uh there are some exceptions or you know",
    "start": "402800",
    "end": "408800"
  },
  {
    "text": "something that may happen that we do care about that we don't want to be anonymous or if I'm sort of choosing option to mean exist or not exist that",
    "start": "408800",
    "end": "415639"
  },
  {
    "text": "specific exception these are all the other exceptions that may happen um I've just chosen throwable kind of",
    "start": "415639",
    "end": "421039"
  },
  {
    "text": "arbitrarily there you can pick whatever you want as the error type um and then lastly you know maybe we want logging in",
    "start": "421039",
    "end": "426759"
  },
  {
    "text": "there also so now we have kind of this big beefy Mana that at some point yields this value a when we get deep inside of",
    "start": "426759",
    "end": "433360"
  },
  {
    "text": "it but we've got a whole bunch of sort of composed effects there so that's what we mean by stacking",
    "start": "433360",
    "end": "439599"
  },
  {
    "text": "effects but there's kind of a problem with doing this practically so I can you know show you the types but it doesn't",
    "start": "439599",
    "end": "445759"
  },
  {
    "start": "441000",
    "end": "441000"
  },
  {
    "text": "mean you can work with them and from a theoretical perspective perspective uh",
    "start": "445759",
    "end": "450960"
  },
  {
    "start": "450000",
    "end": "450000"
  },
  {
    "text": "the reason is that monads do not compose so to sort of fully understand that we",
    "start": "450960",
    "end": "456680"
  },
  {
    "text": "need to talk about composition and what compose means uh I'm going to do that kind of by example so a type class that",
    "start": "456680",
    "end": "464680"
  },
  {
    "start": "464000",
    "end": "464000"
  },
  {
    "text": "that does compose are functors um and actually applicatives also and so just a",
    "start": "464680",
    "end": "470280"
  },
  {
    "text": "quick reminder of of functors uh this is the the funter type class we have this method map uh as I said previously it",
    "start": "470280",
    "end": "478000"
  },
  {
    "text": "you know lifts this this pure function into some context Let's us operate in that context and what we want to do is",
    "start": "478000",
    "end": "484039"
  },
  {
    "text": "we want to compose two of them and in code what that means is we want to write some function that given any two",
    "start": "484039",
    "end": "491000"
  },
  {
    "text": "functors M andn um and in scolar we take those implicitly to say I want the instance of those two type classes um we",
    "start": "491000",
    "end": "497680"
  },
  {
    "text": "need to define a new funtor that is sort of this bigger functor where the map method operates on MN and a right but",
    "start": "497680",
    "end": "505840"
  },
  {
    "text": "we're still taking our Pure function and so we want to write this function and if we can write this function funs compose",
    "start": "505840",
    "end": "513279"
  },
  {
    "text": "and in fact that function's really really simple to implement you map over the outer funter map over the inner",
    "start": "513279",
    "end": "520440"
  },
  {
    "text": "functor and then apply the function to that inner value um so everybody cool all right and so an",
    "start": "520440",
    "end": "528600"
  },
  {
    "text": "example of how that works in practice um we can use that to write if we have M and A after we've done composing things",
    "start": "528600",
    "end": "534720"
  },
  {
    "text": "we can take a third functor and compose that on top and we can kind of keep going um but one thing that's nice about",
    "start": "534720",
    "end": "540880"
  },
  {
    "text": "scaled is if you're just working with two functors and you want to compose them quickly it gives you this map 2 function that does that so you can see",
    "start": "540880",
    "end": "547240"
  },
  {
    "text": "an example here I have this function which I think is it takes the length of a string and I'm using that same",
    "start": "547240",
    "end": "552600"
  },
  {
    "text": "function to map over an option and a list of options uh using map 2 so I'm composing those two functors and so uh",
    "start": "552600",
    "end": "559839"
  },
  {
    "text": "you know alternatively what I would have been doing is mapping over the list and then mapping over the options or a for comprehension or something like that",
    "start": "559839",
    "end": "565720"
  },
  {
    "text": "which is just a little bit it's it's the same thing it's a little bit noisy it's repetitive right that code isn't encoded in here calling map twice so there's no",
    "start": "565720",
    "end": "573000"
  },
  {
    "text": "reason to type it everywhere twice so the problem again from a theoretical perspective is monads don't",
    "start": "573000",
    "end": "578720"
  },
  {
    "text": "compose and what that means is we can't write this function taking any two monads give us this new bigger monad so",
    "start": "578720",
    "end": "585079"
  },
  {
    "text": "if you try to implement this fatmap method you won't be able to get it to compile in any form and uh really I'd",
    "start": "585079",
    "end": "591519"
  },
  {
    "text": "suggest trying it um just you can go take it down like that's kind of where it clicks for me is why I suggest it is",
    "start": "591519",
    "end": "598120"
  },
  {
    "text": "like you're kind of like I don't really get it and then you go to type it you're like oh this is impossible there's no",
    "start": "598120",
    "end": "603279"
  },
  {
    "text": "way I can get to a compiling piece of code like there's no like trick you can do nothing you're just screwed um and if",
    "start": "603279",
    "end": "610320"
  },
  {
    "text": "you want to find out a little bit more about it a lot of these slides are sort of examples taken from uh Tony Morris's",
    "start": "610320",
    "end": "615519"
  },
  {
    "text": "blog he has a a blog post called mon do not compose and there's a nice gist up there you can clone and actually try out",
    "start": "615519",
    "end": "621240"
  },
  {
    "text": "it's all compiling up to that method so you can try to implement that method yourself um so that's great from a",
    "start": "621240",
    "end": "627000"
  },
  {
    "text": "theory perspective um I you know we here kind of are on the the cusp of using",
    "start": "627000",
    "end": "633839"
  },
  {
    "text": "functional programming a lot but it's not necessarily the core so for us it's always about what practical benefits we can get uh so I kind of want to talk",
    "start": "633839",
    "end": "640519"
  },
  {
    "text": "about how this problem presents practically um and for me it really results in nasty code um which I call",
    "start": "640519",
    "end": "646519"
  },
  {
    "text": "stair stepping uh so to to example of that or well I call most people call um",
    "start": "646519",
    "end": "652160"
  },
  {
    "text": "let's say we have a couple values here again you know we're talking we want some to get some data out of somewhere",
    "start": "652160",
    "end": "658639"
  },
  {
    "text": "that value May exist to take some side effects to get and uh on this my data fictional type we have this merge method",
    "start": "658639",
    "end": "664600"
  },
  {
    "text": "where we can put two of them together and and Magic happens um so we want to write some nice code that deals with",
    "start": "664600",
    "end": "670079"
  },
  {
    "text": "that and maybe we take a stab like this right uh the problem is data one and data two aren't my data they're options",
    "start": "670079",
    "end": "676680"
  },
  {
    "text": "right so we have IO here when we strip it off data one is an option data 2 is",
    "start": "676680",
    "end": "682399"
  },
  {
    "text": "an option so that doesn't work so maybe we try this um don't do that calling",
    "start": "682399",
    "end": "688600"
  },
  {
    "text": "unsafe performance iic that is bad um so this is wrong I mean it functions but it's",
    "start": "688600",
    "end": "694440"
  },
  {
    "text": "wrong here are a couple other examples that also function that are just awful uh this one has some nasty pattern",
    "start": "694440",
    "end": "700399"
  },
  {
    "text": "matching this one has nested four comprehensions um which really kind of gets loose uh if you're familiar with",
    "start": "700399",
    "end": "707600"
  },
  {
    "text": "some of the other type classes you may notice that um somewhat have a contrived example and this is a semi-group and you",
    "start": "707600",
    "end": "713600"
  },
  {
    "text": "could basically uh make this a lot simpler but let's say this was a little bit less of a DED example I tossed this",
    "start": "713600",
    "end": "720440"
  },
  {
    "text": "in things just got more complex um and so you're not saying right now",
    "start": "720440",
    "end": "727440"
  },
  {
    "text": "um here's an example from stack mobs code before I knew about monot Transformers this makes me want to cry",
    "start": "727440",
    "end": "732600"
  },
  {
    "text": "um a couple reasons uh a it's just super hard to read B I'm sort of like folding",
    "start": "732600",
    "end": "738000"
  },
  {
    "text": "down validations and then folding down options just to create the same validation out to deal with the error",
    "start": "738000",
    "end": "743519"
  },
  {
    "text": "because I haven't dug into the monad properly um yeah so we have a service called",
    "start": "743519",
    "end": "750199"
  },
  {
    "text": "Barney actually I guess we joke that at one point we're gonna have to say Barney out in public but yeah so we have a service called Barney and it throws",
    "start": "750199",
    "end": "756160"
  },
  {
    "text": "exceptions called Barney exceptions um so or I guess well it doesn't throw them rather it we use the exception type as",
    "start": "756160",
    "end": "762320"
  },
  {
    "text": "our error type although we don't throw them um instead of building custom error types for everything uh we just use the",
    "start": "762320",
    "end": "768760"
  },
  {
    "text": "throwable hierarchy um so okay so that's a problem but right the whole point is",
    "start": "768760",
    "end": "773920"
  },
  {
    "text": "to kind of figure out how to deal with these things so there is a solution uh and just to point out this is a solution",
    "start": "773920",
    "end": "779440"
  },
  {
    "start": "777000",
    "end": "777000"
  },
  {
    "text": "not the solution um and we'll keep working with that IO option example and",
    "start": "779440",
    "end": "785639"
  },
  {
    "text": "we'll sort of build to mon Transformers and again please feel free to stop me on the way we're going to get kind of into",
    "start": "785639",
    "end": "791120"
  },
  {
    "text": "heavy code at this point um so what we're going to do is for the io option",
    "start": "791120",
    "end": "796760"
  },
  {
    "text": "we're going to essentially make a new type that boxes that value and I I've chosen to do that with a case class for",
    "start": "796760",
    "end": "802279"
  },
  {
    "text": "brevity but you can do it however you want it doesn't have to be a case class um but we box that value and then what's",
    "start": "802279",
    "end": "808199"
  },
  {
    "text": "important is this new type here we can define an instance of the monad type class for and so you can see for point",
    "start": "808199",
    "end": "817079"
  },
  {
    "text": "we essentially point the pure value into the into the option monad and then into the io monad for map that essentially is",
    "start": "817079",
    "end": "823800"
  },
  {
    "text": "our that's our composed funter method just less General and flat map we flat",
    "start": "823800",
    "end": "829920"
  },
  {
    "text": "map over the outer IO and then we essentially based on if the option is a",
    "start": "829920",
    "end": "835079"
  },
  {
    "text": "sum or a none we apply the function or we don't so with that implemented we can take that",
    "start": "835079",
    "end": "841600"
  },
  {
    "text": "first nasty example and we can actually write our nice for comprehension and the reason is is now our IO options are",
    "start": "841600",
    "end": "847880"
  },
  {
    "text": "boxed by by this new type and the only real difference is down here at the end",
    "start": "847880",
    "end": "852920"
  },
  {
    "text": "when we want to get our our value back we have to call we have to you know access the Run uh field so that's how we",
    "start": "852920",
    "end": "860040"
  },
  {
    "text": "get back our IO option we unbox the value another quick example um how many",
    "start": "860040",
    "end": "865480"
  },
  {
    "text": "people are familiar with the state monad okay I'll do it quickly basically",
    "start": "865480",
    "end": "870800"
  },
  {
    "text": "the state monad gives you the ability it gives you sort of the facade of a mutable state or of mutable state in",
    "start": "870800",
    "end": "876519"
  },
  {
    "text": "your programming language is actually in fact all immutable but it sort of looks like an imperative programming language you can say get and set and maybe you",
    "start": "876519",
    "end": "882920"
  },
  {
    "text": "know plus equals and those kind of things um and so when you and it's essentially a two Tuple and when you fix",
    "start": "882920",
    "end": "889759"
  },
  {
    "text": "one of the values to a type or when you fix one of the types of the two Tuple um you have a monad and we call that the",
    "start": "889759",
    "end": "895360"
  },
  {
    "text": "state monad and so we can do the same thing if we have instead of IO rap option if we have my state wrapping",
    "start": "895360",
    "end": "901160"
  },
  {
    "text": "option we can box it in a value and we can Define the the instance of the type",
    "start": "901160",
    "end": "907519"
  },
  {
    "text": "class again what I've done is left them side by side I'm not going to re explain the implementation because they're the same but if you can I don't know if it's",
    "start": "907519",
    "end": "913519"
  },
  {
    "text": "kind of hard to see but the lighter yellow are the only differences in the implementation are the types so one takes in my state and one takes IO so",
    "start": "913519",
    "end": "920680"
  },
  {
    "text": "that's an area where we can generalize and that's how we get to modad Transformers so what we do is we pull",
    "start": "920680",
    "end": "927759"
  },
  {
    "text": "that type Constructor of a single type out into an our new type definition so",
    "start": "927759",
    "end": "934079"
  },
  {
    "text": "now we're generalizing on that M that wraps option okay and we haven't really said anything about M besides the type",
    "start": "934079",
    "end": "939639"
  },
  {
    "text": "Constructor of one type so to restrict M to a functor in a monad in the appropriate places um I",
    "start": "939639",
    "end": "948199"
  },
  {
    "text": "guess let me take a step back for a second instead of defining the type class instance uh the way I have been before I'm going to define the map and",
    "start": "948199",
    "end": "953759"
  },
  {
    "text": "Flat map methods on this case class this is how it's defined in schola Zed and I think it makes a little bit easier kind",
    "start": "953759",
    "end": "959440"
  },
  {
    "text": "of once you get to this point so we're doing the exact same thing it just looks slightly different um and so the way we",
    "start": "959440",
    "end": "965720"
  },
  {
    "text": "restrict in this case M to be a functor for map and monad is we take the implicit instance of the type class just",
    "start": "965720",
    "end": "972319"
  },
  {
    "text": "like we did in in previous examples and um then we can Implement those methods right and this looks",
    "start": "972319",
    "end": "979199"
  },
  {
    "text": "pretty much exactly the same um we have the map method this is the generalization you know slightly less",
    "start": "979199",
    "end": "984519"
  },
  {
    "text": "General than the second example not as general as the first one I showed you um um and then the flatmap method looks",
    "start": "984519",
    "end": "990519"
  },
  {
    "text": "pretty much the same also and side by side you can see we basically generalized it just wherever",
    "start": "990519",
    "end": "995800"
  },
  {
    "text": "we had the you know the specific type before we're dealing with the the general monad we may be working",
    "start": "995800",
    "end": "1002639"
  },
  {
    "text": "with everyone feeling good so far all right cool let's how we doing on",
    "start": "1002639",
    "end": "1010319"
  },
  {
    "text": "okay so a couple examples uh this comes from scol machine and in this case this",
    "start": "1010319",
    "end": "1016639"
  },
  {
    "text": "is uh determining if uh the E tags of a request match the E tag",
    "start": "1016639",
    "end": "1022639"
  },
  {
    "text": "of a resource um a quick caveat I think this code's a little bit old it doesn't exactly match RFC 266 right it doesn't",
    "start": "1022639",
    "end": "1030678"
  },
  {
    "text": "deal with doubly quoted strings so don't go use this code in in in production please it won't work um but the",
    "start": "1030679",
    "end": "1037199"
  },
  {
    "text": "important part are sort of the highlighted Parts the the monot Transformer parts so you can see we have",
    "start": "1037199",
    "end": "1042280"
  },
  {
    "text": "uh an optional value an e tag that may or may not exist and we lift that into",
    "start": "1042280",
    "end": "1047558"
  },
  {
    "text": "our state moned uh which I call Flow State essentially recr data has State",
    "start": "1047559",
    "end": "1053240"
  },
  {
    "text": "about the request and response like headers and the request body and response body and uh then we wrap that",
    "start": "1053240",
    "end": "1058720"
  },
  {
    "text": "all in option T so the value e is a string out there you can see in the comments where e is a string and then in",
    "start": "1058720",
    "end": "1065200"
  },
  {
    "text": "the next generator we're looking for uh the if match header so we're looking for the E tags that the client has sent down",
    "start": "1065200",
    "end": "1072160"
  },
  {
    "text": "and we're wrapp and that is uh from schol at it's lenses and state and we essentially get a state action back that",
    "start": "1072160",
    "end": "1078440"
  },
  {
    "text": "returns an optional value an optional string um or yeah an optional string and",
    "start": "1078440",
    "end": "1083799"
  },
  {
    "text": "we wrap that in option T So matches is also a string and then you can see we we do some stuff with both those strings to",
    "start": "1083799",
    "end": "1089320"
  },
  {
    "text": "figure out if the eags match and then at the bottom this getter else is actually on option T and uh I'll explain how we",
    "start": "1089320",
    "end": "1096480"
  },
  {
    "text": "get that getter else here in a bit but sort of got to maybe get you guys excited you can see that we can sort of",
    "start": "1096480",
    "end": "1101600"
  },
  {
    "text": "use the old interface that that we're used to with monad Transformers um so",
    "start": "1101600",
    "end": "1107480"
  },
  {
    "text": "another example from some of the same code here we're talking about",
    "start": "1107480",
    "end": "1113600"
  },
  {
    "text": "uh determining the content type of a request given that there is a content",
    "start": "1113600",
    "end": "1120200"
  },
  {
    "text": "type header I guess so uh we're parsing some media types and then we're we're taking the first one out and again we",
    "start": "1120200",
    "end": "1127559"
  },
  {
    "text": "wrap those in option T and and out we get you know we can work with those inner values in the yield so that's a decently simple example um one last",
    "start": "1127559",
    "end": "1135799"
  },
  {
    "text": "example changing Pace a little bit to sort of hammer home the adding effects to embedded languages so John talked",
    "start": "1135799",
    "end": "1142799"
  },
  {
    "text": "about lists being non-deterministic computation right so we don't know when this computation is going to complete",
    "start": "1142799",
    "end": "1148799"
  },
  {
    "text": "there may be more values that they kind of keep going and what we may want to we want to semantic we want to add some",
    "start": "1148799",
    "end": "1153880"
  },
  {
    "text": "semantics that allow us to Halt that given some condition at some point and we can use either t for that and you can",
    "start": "1153880",
    "end": "1160159"
  },
  {
    "text": "use a couple other things also um this is an example from a hcll article I saw",
    "start": "1160159",
    "end": "1165200"
  },
  {
    "text": "so if we walk through this list and we print the items out you can see that",
    "start": "1165200",
    "end": "1170679"
  },
  {
    "text": "even if items were just a simple list this code really hasn't changed right so we haven't changed the semantics of the code at all but what we can do now is we",
    "start": "1170679",
    "end": "1176960"
  },
  {
    "text": "have this extra ability to halt by when we return a left uh so the either T is Right biased so when we return a left we",
    "start": "1176960",
    "end": "1184000"
  },
  {
    "text": "don't continue down with the comprehension so if we reach a number greater than four we stop the string",
    "start": "1184000",
    "end": "1190080"
  },
  {
    "text": "fail doesn't really matter and if it's less than four or sorry less than or equal to four we keep going and we don't",
    "start": "1190080",
    "end": "1196200"
  },
  {
    "text": "really care about that value that gets generated and and so what that does is it only prints one two 3 four so the",
    "start": "1196200",
    "end": "1201559"
  },
  {
    "text": "second we get to five it stops so we've added this ability to our our language our our embedded",
    "start": "1201559",
    "end": "1206799"
  },
  {
    "text": "language all right so enough of examples for a bit um talk a little bit more",
    "start": "1206799",
    "end": "1213960"
  },
  {
    "start": "1208000",
    "end": "1208000"
  },
  {
    "text": "generically about monad Transformers um so we're going to talk about it in in",
    "start": "1213960",
    "end": "1220840"
  },
  {
    "text": "this fictional instance of with this awfully name my manad right so we have some type and uh so the naming",
    "start": "1220840",
    "end": "1227840"
  },
  {
    "text": "convention for manad Transformers or at least what you'll find if you're using Scola Zed and and what from what I've",
    "start": "1227840",
    "end": "1233360"
  },
  {
    "text": "found in hll although I'm not admittedly very familiar is it's essentially the name of the Monet instance with a t",
    "start": "1233360",
    "end": "1239600"
  },
  {
    "text": "tacked on at the end um so you have option T validation T either T um so on and so forth and what that",
    "start": "1239600",
    "end": "1247640"
  },
  {
    "text": "new type does is it boxes some value which is that inonet looks like I forgot",
    "start": "1247640",
    "end": "1252679"
  },
  {
    "start": "1250000",
    "end": "1250000"
  },
  {
    "text": "a bracket there awesome um that inter manad wrapped with some M we you know in",
    "start": "1252679",
    "end": "1258320"
  },
  {
    "text": "our we the implementation restricts that M to actually be an instance of the monad type class and the convention is",
    "start": "1258320",
    "end": "1264919"
  },
  {
    "text": "to call that run um in scalz 7 and six it sometimes switches between run and",
    "start": "1264919",
    "end": "1270279"
  },
  {
    "text": "value depending on who wrote it so um run if you're using 7 and at this point",
    "start": "1270279",
    "end": "1275720"
  },
  {
    "text": "you really Milestone one of scol 7 was released so everybody use it yeah cool",
    "start": "1275720",
    "end": "1281159"
  },
  {
    "text": "um so the other cool thing and this is I guess sort of the point right as we're talking about stacking multiple of these",
    "start": "1281159",
    "end": "1288159"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "is that a monad Transformer is also an instance of the monad type class to be a",
    "start": "1288159",
    "end": "1293200"
  },
  {
    "text": "little bit more accurate but so that allows us to do some cool things which we'll talk about in a moment but quickly",
    "start": "1293200",
    "end": "1300039"
  },
  {
    "text": "we can show just the the actual definition right and so we already had map and Flat map defined on option T so",
    "start": "1300039",
    "end": "1306120"
  },
  {
    "text": "that's really easy to do and point is the point from before we point into option and then we point into whatever",
    "start": "1306120",
    "end": "1311440"
  },
  {
    "text": "the monad wrapping our option is um so if that's IO we point into Io if that's State we point into state",
    "start": "1311440",
    "end": "1319440"
  },
  {
    "text": "and uh the last sort of cool general part about modad Transformers well there are a couple other things that I've left",
    "start": "1319440",
    "end": "1324679"
  },
  {
    "text": "off but for what I'm going to talk about is that the monad Transformer the option T the either T's have an interface",
    "start": "1324679",
    "end": "1331080"
  },
  {
    "text": "that's similar to the underlying uh monad so option T has a similar interface to option either T similar to",
    "start": "1331080",
    "end": "1338000"
  },
  {
    "start": "1332000",
    "end": "1332000"
  },
  {
    "text": "either and uh that's actually kind of something special to Scala um because we",
    "start": "1338000",
    "end": "1343720"
  },
  {
    "text": "sort of have this mixed o FP World um so that's it's it's one sort of convenience",
    "start": "1343720",
    "end": "1350320"
  },
  {
    "text": "at the cost of you have way more type ceremony to do when you start doing this stuff I guess so um so here's an example",
    "start": "1350320",
    "end": "1356960"
  },
  {
    "text": "of that so on option t uh we have getter else or or else um which are the you know very similar except for or else",
    "start": "1356960",
    "end": "1363200"
  },
  {
    "text": "takes another option T instead of an option um but get else is pretty cool you have you know M option A and you can",
    "start": "1363200",
    "end": "1369960"
  },
  {
    "text": "call get else and you have Ma so you're doing geter else working inside that monad um which is nice you know if",
    "start": "1369960",
    "end": "1375400"
  },
  {
    "text": "you're doing IO so you're doing iio lazily you don't actually have to execute the IO to work in to work with",
    "start": "1375400",
    "end": "1380799"
  },
  {
    "text": "that option um so with all that we kind of get to the",
    "start": "1380799",
    "end": "1386679"
  },
  {
    "text": "the most important part which is we can go more than two levels deep right so we've done IO option but that's really",
    "start": "1386679",
    "end": "1393640"
  },
  {
    "text": "you know not all that practical you're going to get much deeper sort of type signatures and and the reason we can do",
    "start": "1393640",
    "end": "1399279"
  },
  {
    "text": "that is because since the Transformer is the monad the M that we're that we're talking about is is something we can",
    "start": "1399279",
    "end": "1406520"
  },
  {
    "text": "wrap also right so we can keep going n levels deep and it doesn't matter how deep we go so quick again contrived",
    "start": "1406520",
    "end": "1414720"
  },
  {
    "text": "example um so we have this validation T so we have an IO validation throwable a",
    "start": "1414720",
    "end": "1420080"
  },
  {
    "text": "we've wrapped that in a validation T we've boxed it and then we have this function do work which I don't know why",
    "start": "1420080",
    "end": "1425320"
  },
  {
    "text": "I left the parenthesis on that's not good anyways um that returns one of those and in this bottom line here we",
    "start": "1425320",
    "end": "1432679"
  },
  {
    "text": "wrap that all in an option T so if we were to map over that we would actually be working on you know the inner int",
    "start": "1432679",
    "end": "1439120"
  },
  {
    "text": "right so we could you know add add three to it or something like that so we've got option T wrapping validation",
    "start": "1439120",
    "end": "1446080"
  },
  {
    "text": "T well but but it's not side affecting because the io is lazy so it just Returns the action",
    "start": "1447279",
    "end": "1455080"
  },
  {
    "text": "itself um but I think that is what I like was thinking in my head yeah um and",
    "start": "1455080",
    "end": "1461520"
  },
  {
    "text": "so here's an example of that from some of uh we do uh we host some static files",
    "start": "1461520",
    "end": "1466960"
  },
  {
    "text": "and so we allow you registered you know aliases um which are usually C names I guess sometimes they're a records uh but",
    "start": "1466960",
    "end": "1473960"
  },
  {
    "text": "we call them C names and uh in this case I am fetching data out of riak so this is actually using scalak also so I've",
    "start": "1473960",
    "end": "1480200"
  },
  {
    "text": "got a reference to a bucket in riok is everyone kind of familiar or know a little bit it's just essentially a key value store and it's in the Dynamo sort",
    "start": "1480200",
    "end": "1487000"
  },
  {
    "text": "of style and uh so you have these buckets where you can put in data which is I guess not really equivalent to a",
    "start": "1487000",
    "end": "1493960"
  },
  {
    "text": "database but for the purpose of the discussion fine and um so we're getting some values out of the bucket at some",
    "start": "1493960",
    "end": "1499480"
  },
  {
    "text": "key and uh that you know it may throw exceptions and it may not exist and we",
    "start": "1499480",
    "end": "1504919"
  },
  {
    "text": "want to actually get work it with that value so we wrap that all in Transformer stack and then we get that domain and we",
    "start": "1504919",
    "end": "1513600"
  },
  {
    "text": "delete some keys uh although actually to be 100% honest I'm not totally sure what this code does anymore but I think it",
    "start": "1513600",
    "end": "1520399"
  },
  {
    "text": "reads values and it's essentially part of our delete code I believe when we unregister um so you can kind of just",
    "start": "1520399",
    "end": "1527679"
  },
  {
    "start": "1526000",
    "end": "1526000"
  },
  {
    "text": "keep on going right right and that's what you want to do is that I showed you now like a three- Lev deep you can go",
    "start": "1527679",
    "end": "1532960"
  },
  {
    "text": "four levels deep you know my first example also had uh you know the writer monad in there also or you may have some",
    "start": "1532960",
    "end": "1538679"
  },
  {
    "text": "state or something like that so you can kind of keep going and uh and build whatever you want but one caveat is the",
    "start": "1538679",
    "end": "1545960"
  },
  {
    "text": "order in which you stack monads matters um and basically by changing that order",
    "start": "1545960",
    "end": "1551559"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "in in many cases you're changing the semantics of of your language um so an",
    "start": "1551559",
    "end": "1557799"
  },
  {
    "text": "example of that is say the difference between option T wrapping uh my flow",
    "start": "1557799",
    "end": "1564039"
  },
  {
    "text": "State or the the state t so State also has a modad Transformer wrapping an option and if you it's it's a lot easier",
    "start": "1564039",
    "end": "1571159"
  },
  {
    "text": "to see actually if you strip off the the boxing value right so I have a state action that when applied to some initial",
    "start": "1571159",
    "end": "1578200"
  },
  {
    "text": "state may return an optional value May return a value or I have a state action",
    "start": "1578200",
    "end": "1584279"
  },
  {
    "text": "which may or may not exist the ladder is probably not something that makes sense in most code so the order of which the",
    "start": "1584279",
    "end": "1592520"
  },
  {
    "text": "the transform we use is important you need to remember that when you're stacking things in a a couple cases it",
    "start": "1592520",
    "end": "1598320"
  },
  {
    "text": "doesn't matter for the most part though always consider that all right so",
    "start": "1598320",
    "end": "1604360"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "changing direction sort of the last major topic of the talk tonight",
    "start": "1604360",
    "end": "1610120"
  },
  {
    "text": "um is the monad trans type class so we have type classes we can be happy with",
    "start": "1610120",
    "end": "1616200"
  },
  {
    "text": "even more type classes and uh the reason we have this type class is uh there's",
    "start": "1616200",
    "end": "1621919"
  },
  {
    "start": "1620000",
    "end": "1620000"
  },
  {
    "text": "there's been something repetitive which maybe you've picked up on in some of the examples and you know we can we can remove that with a little bit more",
    "start": "1621919",
    "end": "1628000"
  },
  {
    "text": "abstraction and that's what this type class does so here's some of that repetitive code and what it is is often",
    "start": "1628000",
    "end": "1634320"
  },
  {
    "text": "we need to we need to lift some values into our stack so it may be partially lifted into our stack but it may not be",
    "start": "1634320",
    "end": "1640559"
  },
  {
    "text": "inside of let's say the validation monad yet and we tend to have this pattern where we map over this inner part of our",
    "start": "1640559",
    "end": "1648480"
  },
  {
    "text": "stack and and point the the value into a monit then wrap it all um and we've done that a couple times these are examples",
    "start": "1648480",
    "end": "1654559"
  },
  {
    "text": "from this is code from previous examples on my slides and uh this is basically what we we've kind of Done Right is we",
    "start": "1654559",
    "end": "1660480"
  },
  {
    "text": "have some Ma and and we want then we want m& so that's where the map and the point come in and then we wrap all that",
    "start": "1660480",
    "end": "1666399"
  },
  {
    "text": "in some transformer for for n um and so we want to abstract that away and the",
    "start": "1666399",
    "end": "1671600"
  },
  {
    "text": "monad trans type class and specifically this lift m method we we'll do that for you um so the type signature is kind of",
    "start": "1671600",
    "end": "1678640"
  },
  {
    "text": "get a little bit crazy here but essentially we We Make an instance of the monad trans for our Transformer so",
    "start": "1678640",
    "end": "1684919"
  },
  {
    "text": "that that that type Constructor there is for our Mona Transformers so for option t or validation T fixed to an exception",
    "start": "1684919",
    "end": "1692080"
  },
  {
    "text": "type or either T fixed to a left type um we Define it for that and we're talking",
    "start": "1692080",
    "end": "1698320"
  },
  {
    "text": "about essentially taking some GA lifting it into that Transformer so we're going to lift it into the underlying monad",
    "start": "1698320",
    "end": "1704480"
  },
  {
    "text": "wrap it in a Transformer and so for option T um I've left out some of the definition because honestly the type",
    "start": "1704480",
    "end": "1710399"
  },
  {
    "text": "lambdas will explode um you can't fit them on the slides um but uh this is",
    "start": "1710399",
    "end": "1716399"
  },
  {
    "text": "basically the impation of that method right so we have our we have our map and we have our point and then we wrap that all in an option T and uh scal machine",
    "start": "1716399",
    "end": "1724320"
  },
  {
    "text": "has this monad called res which is similar to option but it allows you to uh essentially halt the processing of a",
    "start": "1724320",
    "end": "1730760"
  },
  {
    "text": "request and respond in either an error or a specific Response Code with a response body and uh this is the",
    "start": "1730760",
    "end": "1736760"
  },
  {
    "text": "implementation again we have our map we have our point and then we wrap it all up and when we're done we get some nice",
    "start": "1736760",
    "end": "1742760"
  },
  {
    "text": "syntax extensions from scal Zed when we import the monad synx extensions that let us use it so those are those three examples before you can see a they're",
    "start": "1742760",
    "end": "1749679"
  },
  {
    "text": "shorter B what you're actually doing right is going to be on the left of the four comprehension so you're kind of",
    "start": "1749679",
    "end": "1755200"
  },
  {
    "text": "looking down the line you can see what everything's doing there's no noise on the side so that's really nice um and that kind of results in this so this is",
    "start": "1755200",
    "end": "1762679"
  },
  {
    "text": "uh preparing some things from a response and uh checking the acceptance coding of",
    "start": "1762679",
    "end": "1768519"
  },
  {
    "text": "a HTTP request and then either sort of continuing on with the flow based on the",
    "start": "1768519",
    "end": "1774760"
  },
  {
    "text": "the results or uh or stopping and uh we're using lift M here just to kind of clean things up beforehand I kind I put",
    "start": "1774760",
    "end": "1782080"
  },
  {
    "text": "these on the slides before and they literally just went way off you couldn't get them to fit so that's pretty much it",
    "start": "1782080",
    "end": "1789159"
  },
  {
    "start": "1788000",
    "end": "1788000"
  },
  {
    "text": "but so kind of in review um stacking monads composes effects right so we're",
    "start": "1789159",
    "end": "1794240"
  },
  {
    "start": "1793000",
    "end": "1793000"
  },
  {
    "text": "talking about this one intuition for monads that is an embedded program language in our code and when we stack",
    "start": "1794240",
    "end": "1800120"
  },
  {
    "text": "these monads our our programming language gets more more features or or more effects that we can perform um but",
    "start": "1800120",
    "end": "1807559"
  },
  {
    "text": "we we can't compose any two monads M andn generically and that poses a problem so what we do is we pick one",
    "start": "1807559",
    "end": "1814120"
  },
  {
    "start": "1813000",
    "end": "1813000"
  },
  {
    "text": "monad m and then we say we can compose that with any other monad n right so there was no other restrictions on M",
    "start": "1814120",
    "end": "1820080"
  },
  {
    "text": "besides it was an instance of the monad type class so it can be any other M that that we choose not all makes sense",
    "start": "1820080",
    "end": "1826000"
  },
  {
    "text": "obviously right and the order matters um but once we've done that we can keep wrapping these Transformers we can stack",
    "start": "1826000",
    "end": "1832600"
  },
  {
    "start": "1829000",
    "end": "1829000"
  },
  {
    "text": "them we can build an endlevel deep stack of Transformers our language gets more features and then we can use monad trans",
    "start": "1832600",
    "end": "1840039"
  },
  {
    "start": "1838000",
    "end": "1838000"
  },
  {
    "text": "that type class to sort of reduce some of the repetition that's involved with doing some of this code right because we don't want really noisy code just for it",
    "start": "1840039",
    "end": "1846919"
  },
  {
    "text": "to be pure we have to write this stuff and read it on a daily basis um and then you'll have less nasty code because you",
    "start": "1846919",
    "end": "1853279"
  },
  {
    "start": "1850000",
    "end": "1850000"
  },
  {
    "text": "won't stair step and that's always awesome so thanks guys so thanks stackmob and for you guys for for coming",
    "start": "1853279",
    "end": "1860080"
  },
  {
    "text": "out and you know listening to me blab for a while um thanks to Marana for for hosting it and setting all that up um my",
    "start": "1860080",
    "end": "1866279"
  },
  {
    "text": "buddy CO mean who uh hopefully you guys found the slides and the fonts kind of nice and he he set that all up for me um",
    "start": "1866279",
    "end": "1873840"
  },
  {
    "text": "before they looked really awful uh and to the stackmob team for having to listen to this twice now so thanks",
    "start": "1873840",
    "end": "1879760"
  },
  {
    "text": "everybody",
    "start": "1879760",
    "end": "1882760"
  },
  {
    "text": "[Music]",
    "start": "1885320",
    "end": "1892909"
  }
]