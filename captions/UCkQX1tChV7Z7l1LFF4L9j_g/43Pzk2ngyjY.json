[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "[Music]",
    "start": "2330",
    "end": "7759"
  },
  {
    "text": "good afternoon everyone thank you guys for coming up this is um the economies of scaling software and I'm abdell",
    "start": "7759",
    "end": "16080"
  },
  {
    "text": "remani my Twitter handle is um polyic coder um I will be posting a link to the",
    "start": "16080",
    "end": "23640"
  },
  {
    "text": "slides at the end of the presentation um I guess if you follow me you can um get",
    "start": "23640",
    "end": "28960"
  },
  {
    "text": "that before everybody else uh this is a little bit about myself I'm a platform architect at just.me I am um a frequent",
    "start": "28960",
    "end": "37280"
  },
  {
    "text": "speaker in a bunch of conferences I mean the Jacks of last year Java one orev and",
    "start": "37280",
    "end": "43760"
  },
  {
    "text": "I am a u open source Advocate and a contributor and I've been pretty active",
    "start": "43760",
    "end": "49239"
  },
  {
    "text": "in the community um leading a few of the Java users group groups and such um uh",
    "start": "49239",
    "end": "56879"
  },
  {
    "text": "that's my email and um I also make my slides from this talk and other talks",
    "start": "56879",
    "end": "62120"
  },
  {
    "text": "available on SlideShare um this is just um tells you",
    "start": "62120",
    "end": "67680"
  },
  {
    "text": "that you could do whatever you want with these slides and share them with other people and improve on them uh if you",
    "start": "67680",
    "end": "73119"
  },
  {
    "text": "would like to um this is my first time giving this talk um I was supposed to",
    "start": "73119",
    "end": "79840"
  },
  {
    "text": "give it at the Java one Russia about like a month ago but that didn't happen but this is my very first time um I",
    "start": "79840",
    "end": "87640"
  },
  {
    "text": "would like your help to help me improve the quity quality of the of the presentation and if you go at the end of",
    "start": "87640",
    "end": "94119"
  },
  {
    "text": "the talk to speakers speakers score.com umj sc- scalability um you'll be able to",
    "start": "94119",
    "end": "102799"
  },
  {
    "text": "um I mean you'll get the a PDF of the slides as well and you'd be able to um",
    "start": "102799",
    "end": "108119"
  },
  {
    "text": "um tell me how much uh I sucked hopefully not so let's go",
    "start": "108119",
    "end": "114119"
  },
  {
    "text": "um so what's up with the title um I chose this title",
    "start": "114119",
    "end": "120960"
  },
  {
    "text": "um uh relating to the the concept in microeconomics of the economies of scale",
    "start": "120960",
    "end": "126880"
  },
  {
    "text": "and the Wikipedia definition says that economies of scale are the cost advantage that enterprises obtain due to",
    "start": "126880",
    "end": "133840"
  },
  {
    "text": "size so pretty much often oper operational efficiency is greater with",
    "start": "133840",
    "end": "139680"
  },
  {
    "text": "increase in scale so the bigger you are um the bigger your organization um is",
    "start": "139680",
    "end": "145280"
  },
  {
    "text": "designed to be the the more efficient and the cheaper it becomes um to um um",
    "start": "145280",
    "end": "153040"
  },
  {
    "text": "and to to scale um this slide is titled the line is",
    "start": "153040",
    "end": "160080"
  },
  {
    "text": "blurred it was a time when only Enterprise applications worried about this issues of scalability I mean if",
    "start": "160080",
    "end": "166440"
  },
  {
    "text": "you're somebody who's at home wants to I mean building a website to sell t-shirts whever it is that didn't that wasn't an",
    "start": "166440",
    "end": "173440"
  },
  {
    "text": "issue that you were concerned with but the rise of Social and mobile it not only increased the internet traff",
    "start": "173440",
    "end": "179760"
  },
  {
    "text": "traffic but also created this breed of spoiled users that would ask questions",
    "start": "179760",
    "end": "185640"
  },
  {
    "text": "like I want to see the closest Moroccan restaurant to my current location on a map along with consumer ratings and",
    "start": "185640",
    "end": "192360"
  },
  {
    "text": "whether any of my friends has recently have had has recently checked in in the",
    "start": "192360",
    "end": "198239"
  },
  {
    "text": "last 30 days so these are really hard questions that take take up a lot of",
    "start": "198239",
    "end": "204159"
  },
  {
    "text": "resources so that sits set up the bar pretty high and scalability all the",
    "start": "204159",
    "end": "209760"
  },
  {
    "text": "sudden became everyone's problem so what is",
    "start": "209760",
    "end": "216319"
  },
  {
    "text": "scalability um the most common definition if you go and look around online you find that people with defined",
    "start": "216319",
    "end": "221959"
  },
  {
    "text": "scalability as the ability of a software to handle an increasing amount of load without performance",
    "start": "221959",
    "end": "228400"
  },
  {
    "text": "degradation I happen to have a few problems with with with this definition the first one is that it comes with the",
    "start": "228400",
    "end": "234799"
  },
  {
    "text": "implication that we could scale these systems forever that we could that a system system for a system to be called",
    "start": "234799",
    "end": "241000"
  },
  {
    "text": "scalable is a system that can sustain that scalability forever um which is",
    "start": "241000",
    "end": "247120"
  },
  {
    "text": "absolutely not realistic because it fails to recognizes that there are these external um constraints that we have um",
    "start": "247120",
    "end": "254959"
  },
  {
    "text": "um around us the second one is that it fails to acknowledge that being scalable",
    "start": "254959",
    "end": "260799"
  },
  {
    "text": "is very relative to the specific uh use case that we at hand and also it does",
    "start": "260799",
    "end": "267800"
  },
  {
    "text": "not take into an account two things um that it's not about a system being",
    "start": "267800",
    "end": "274720"
  },
  {
    "text": "able to handle the work all at once but it's about the systems ability to evolve",
    "start": "274720",
    "end": "280680"
  },
  {
    "text": "to actually be able to evolve to handle the work um so a better",
    "start": "280680",
    "end": "287039"
  },
  {
    "text": "definition um is one I put together uh it would be more like the ability of an",
    "start": "287039",
    "end": "293120"
  },
  {
    "text": "application to gracefully evolve within the constraints of of its ecosystem in",
    "start": "293120",
    "end": "298199"
  },
  {
    "text": "order to handle uh the maximum potential amount of work without performance",
    "start": "298199",
    "end": "305120"
  },
  {
    "text": "degradation uh this is easy as said than done Everybody Talks scalability this scalability that um turns out that it's",
    "start": "305120",
    "end": "312840"
  },
  {
    "text": "just not like a button that you turn on and off um you could literally build an application that is capable of",
    "start": "312840",
    "end": "318840"
  },
  {
    "text": "supporting 1 million users and you add one more new feature and your application stops crashing at",
    "start": "318840",
    "end": "326120"
  },
  {
    "text": "500,000 so the approach that um to look at SC",
    "start": "326319",
    "end": "335280"
  },
  {
    "text": "scalability differently we could look at it in terms of what we call the bottlenecks in the sense that",
    "start": "335280",
    "end": "342360"
  },
  {
    "text": "scalability is about relieving or managing these limitations or constraints that we we call bck again",
    "start": "342360",
    "end": "349199"
  },
  {
    "text": "and when we talk about B bck in Compu we we talk about The Usual Suspects we talk about the CPU we talk about the storage",
    "start": "349199",
    "end": "355680"
  },
  {
    "text": "or IO and we talk about the network and they're all kind of inter related with each other so the rest of this talk is",
    "start": "355680",
    "end": "363000"
  },
  {
    "text": "structured around these bottlenecks to make the case that one's scalability needs or concerns uh are are",
    "start": "363000",
    "end": "370840"
  },
  {
    "text": "to be addressed in this fashion as well so let's talk about the CPU bot",
    "start": "370840",
    "end": "377479"
  },
  {
    "start": "374000",
    "end": "430000"
  },
  {
    "text": "neck so nothing affects your CPU more than the instructions that it's summon",
    "start": "377479",
    "end": "382599"
  },
  {
    "text": "summoned to execute in other words this is about the very code of your application this is about how your",
    "start": "382599",
    "end": "388599"
  },
  {
    "text": "application is written",
    "start": "388599",
    "end": "391400"
  },
  {
    "text": "so first of all how what is what would like a scalable architecture um look like and",
    "start": "394520",
    "end": "401520"
  },
  {
    "text": "to Define architecture the best definition that is out there is one of modern flers that defines it as things",
    "start": "401520",
    "end": "408759"
  },
  {
    "text": "that people perceive as hard to change and he wrote this very nice paper",
    "start": "408759",
    "end": "413880"
  },
  {
    "text": "called who needs an architect this very short PDF that is very much worth reading so but in other words an",
    "start": "413880",
    "end": "421319"
  },
  {
    "text": "architector would be these decisions that you commit to and the ones that you are stuck with for the rest of uh of of",
    "start": "421319",
    "end": "428479"
  },
  {
    "text": "of your life or the life of the of of the software itself so you might want to think twice",
    "start": "428479",
    "end": "436240"
  },
  {
    "text": "um before making these decisions and when we make these decisions we're talking about uh the choice of the of",
    "start": "436240",
    "end": "443440"
  },
  {
    "text": "the technology like choosing the right platform or choosing the right language or languages uh the Frameworks that you",
    "start": "443440",
    "end": "449520"
  },
  {
    "text": "choose to go with or they are libraries and also making the right abstractions whether these abstractions are technical",
    "start": "449520",
    "end": "455800"
  },
  {
    "text": "abstractions or they are functional abstractions um and to make sure that",
    "start": "455800",
    "end": "463759"
  },
  {
    "text": "all technical abstractions of subordinate to the functional abstractions not the other way",
    "start": "463759",
    "end": "469479"
  },
  {
    "text": "around so a scalable architecture um",
    "start": "469479",
    "end": "476159"
  },
  {
    "text": "effectively uh emerges from writing writing good code so what is writing",
    "start": "476159",
    "end": "481560"
  },
  {
    "text": "good code what does it mean um mean it means a lot I mean that's a whole",
    "start": "481560",
    "end": "486599"
  },
  {
    "text": "different talk by itself means that you should think your algorithms through and um be very mindful of of their",
    "start": "486599",
    "end": "493560"
  },
  {
    "text": "complexity means that your design would need to be solid means that you need to understand the limitations of each one",
    "start": "493560",
    "end": "499639"
  },
  {
    "text": "of the technologies that you're uh that you're using and leverage their strengths and and and",
    "start": "499639",
    "end": "505599"
  },
  {
    "text": "weaknesses and it means that you need to practice TD and all of that kind of",
    "start": "505599",
    "end": "510680"
  },
  {
    "text": "stuff and use a bunch of tools I mean Etc it's a whole different talk by itself so I decided to add this slide",
    "start": "510680",
    "end": "518399"
  },
  {
    "start": "516000",
    "end": "535000"
  },
  {
    "text": "know you stuff I mean if um put together like a in like few seconds a bunch of",
    "start": "518399",
    "end": "524279"
  },
  {
    "text": "books that everyone or like everybody that calls themselves software engineer should at least read twice uh and the",
    "start": "524279",
    "end": "531839"
  },
  {
    "text": "list is very long so write good code but we write good code when we do",
    "start": "531839",
    "end": "538440"
  },
  {
    "text": "all that and we really careful and very disciplined and we still end up with this if you're wondering what the",
    "start": "538440",
    "end": "544360"
  },
  {
    "text": "picture is um it's straight up from an article called The Fading tradition of making cow dunk piles they included a",
    "start": "544360",
    "end": "551920"
  },
  {
    "text": "link there for you so you can go on and read the article itself the AR article for yourself so we we end up at the end",
    "start": "551920",
    "end": "560560"
  },
  {
    "text": "of the day with a dunk pile right but it's still much better than",
    "start": "560560",
    "end": "566160"
  },
  {
    "text": "this um so this to trans this these",
    "start": "566160",
    "end": "571880"
  },
  {
    "text": "slides will pretty much tell you that technical debt is a reality no matter",
    "start": "571880",
    "end": "577680"
  },
  {
    "text": "how disciplined or how good you are because of time constraints because of different factors the availability of",
    "start": "577680",
    "end": "584360"
  },
  {
    "text": "resources you will end up with technical debt um one way or another so all these",
    "start": "584360",
    "end": "590480"
  },
  {
    "text": "things that are quick and dirty you know that you're not really proud of things that you want you would have done",
    "start": "590480",
    "end": "595720"
  },
  {
    "text": "differently or should have done differently and all of that kind of stuff and after a while it starts to smell I mean in the sense of code smells",
    "start": "595720",
    "end": "603680"
  },
  {
    "text": "of uh um um as Martin F calls them but",
    "start": "603680",
    "end": "608800"
  },
  {
    "text": "the bright side is that as as as as as long as you recognize it as de as",
    "start": "608800",
    "end": "615440"
  },
  {
    "text": "technical death you're you as technical death you're you're you're on the good side and as long as you keep track of it",
    "start": "615440",
    "end": "621320"
  },
  {
    "text": "and then you factor it so for the Fearless you want to be wise and then think twice and actually and cut the",
    "start": "621320",
    "end": "628200"
  },
  {
    "text": "right corners and don't lock yourself out and don't make technical debt as a part a part of",
    "start": "628200",
    "end": "634160"
  },
  {
    "text": "your AR the architecture of the software that you're writing I mean you know you don't have time and you could either do",
    "start": "634160",
    "end": "640320"
  },
  {
    "text": "this or that make sure that you make the right call and uh don't make something that you stuck with uh",
    "start": "640320",
    "end": "646920"
  },
  {
    "text": "forever so this leads us to the first um section which is scaling up your",
    "start": "646920",
    "end": "653040"
  },
  {
    "text": "application so what is scaling up when we say scaling up we are talking about vertical scaling that that means that we",
    "start": "653040",
    "end": "659600"
  },
  {
    "text": "are talking about a system with a single node and it means that we are adding more computer Computing resources to",
    "start": "659600",
    "end": "665399"
  },
  {
    "text": "this particular node simply getting a b machine uh what what scaling up your",
    "start": "665399",
    "end": "672440"
  },
  {
    "text": "application um is about um it is about writing code to harness the full power",
    "start": "672440",
    "end": "680000"
  },
  {
    "text": "of the one node um by writing code that is parallel or parallelism which is",
    "start": "680000",
    "end": "687440"
  },
  {
    "start": "683000",
    "end": "756000"
  },
  {
    "text": "writing concurrent code or uh code that executes executes in a um concurrent way",
    "start": "687440",
    "end": "694680"
  },
  {
    "text": "so most of us um are used to writing this code that runs within web containers by extending one class or",
    "start": "694680",
    "end": "701200"
  },
  {
    "text": "another one that um that that that becomes multi-threaded just by extending",
    "start": "701200",
    "end": "707920"
  },
  {
    "text": "a particular class because we depend on on on these Frameworks but the reality is that sometimes that the complexity of",
    "start": "707920",
    "end": "713920"
  },
  {
    "text": "your business logic would demand that you actually break down that business logic in smaller step um have to execute",
    "start": "713920",
    "end": "721760"
  },
  {
    "text": "them in parallel and then have to aggregate the data back to get a result within uh to to get a to get a result",
    "start": "721760",
    "end": "728120"
  },
  {
    "text": "within a reasonable amount of time if you actually go and execute this business logic in a sequential fashion",
    "start": "728120",
    "end": "734079"
  },
  {
    "text": "it just becomes way too slow so you need to break him break it down and then spawn a bunch of threads H Fork him and",
    "start": "734079",
    "end": "741040"
  },
  {
    "text": "then join back to come up with with an answer this is not easy uh often requires a synchronizing state if you",
    "start": "741040",
    "end": "748120"
  },
  {
    "text": "have state to synchronize which is a nightmare nobody likes to do that",
    "start": "748120",
    "end": "754720"
  },
  {
    "text": "um so on the one machine um to move a little bit to and talk a little bit",
    "start": "754720",
    "end": "761360"
  },
  {
    "start": "756000",
    "end": "901000"
  },
  {
    "text": "about the hardware on the one machine because of mors law we have been um",
    "start": "761360",
    "end": "768320"
  },
  {
    "text": "reaping uh or gaining perform or realizing performance automatically so",
    "start": "768320",
    "end": "774519"
  },
  {
    "text": "you write a piece of code and then you take it out of uh I mean if it you take",
    "start": "774519",
    "end": "780279"
  },
  {
    "text": "out your War file and you deploy it on another Tom Cat server that is on a bigger machine and your code is faster",
    "start": "780279",
    "end": "786560"
  },
  {
    "text": "your code becomes faster because there are more resources available uh available for uh for for the CPU more",
    "start": "786560",
    "end": "793440"
  },
  {
    "text": "memory or or whatever so but the problem",
    "start": "793440",
    "end": "798760"
  },
  {
    "text": "is um we experience what is called the end of moral and mors law that means",
    "start": "798760",
    "end": "804920"
  },
  {
    "text": "that we just could not fit um could not build faster CPUs or faster cores",
    "start": "804920",
    "end": "811120"
  },
  {
    "text": "anymore so what we end up we ended up with we ended up creating um the one",
    "start": "811120",
    "end": "817320"
  },
  {
    "text": "chip with like multiple cores in it so if you actually want to take",
    "start": "817320",
    "end": "822839"
  },
  {
    "text": "advantage of this you actually need to sit down and WR code um that is that that that that can run actually",
    "start": "822839",
    "end": "830800"
  },
  {
    "text": "on Multi multiple cores the good news is that there are a lot of Frameworks out there libraries that makes this easier",
    "start": "830800",
    "end": "837000"
  },
  {
    "text": "for you there's like Fork joint in Java 7 there's AKA and Etc so it makes are",
    "start": "837000",
    "end": "842880"
  },
  {
    "text": "these abstractions that that you could take take advantage of but this is easier said than done because we still",
    "start": "842880",
    "end": "849440"
  },
  {
    "text": "have a lot of challenges the first one about is all these like third parties and",
    "start": "849440",
    "end": "854519"
  },
  {
    "text": "dependencies that we pull in that are not open source but they are not",
    "start": "854519",
    "end": "860079"
  },
  {
    "text": "written um uh to to take advantage of of the M multicore architecture uh the",
    "start": "860079",
    "end": "866480"
  },
  {
    "text": "other one is that synchronizing state is much much harder because we're not now worried about multiple threads within",
    "start": "866480",
    "end": "873759"
  },
  {
    "text": "the one CPU we're worried about multiple threads across uh multiple cores you",
    "start": "873759",
    "end": "880880"
  },
  {
    "text": "could either go mutable uh which is not always straightforward uh or sometimes not even",
    "start": "880880",
    "end": "887560"
  },
  {
    "text": "possible or you can go functional because and that's a completely different paradigm",
    "start": "887560",
    "end": "893079"
  },
  {
    "text": "shift and it's a steep learning curve so it gets more interesting uh you might",
    "start": "893079",
    "end": "899480"
  },
  {
    "text": "think that actually throwing more call course um a at at a that would actually",
    "start": "899480",
    "end": "906279"
  },
  {
    "start": "901000",
    "end": "968000"
  },
  {
    "text": "give you more performance you get you'll realize more performance by just running your code in like 10 ches instead of two",
    "start": "906279",
    "end": "913279"
  },
  {
    "text": "or like four but the problem is um am amd's law tells you that you get to a",
    "start": "913279",
    "end": "920440"
  },
  {
    "text": "certain point when you actually end up diminish in return literally you speed",
    "start": "920440",
    "end": "925680"
  },
  {
    "text": "up speed up your application you get to a point when no matter how many cores you add you don't your code just doesn't",
    "start": "925680",
    "end": "931440"
  },
  {
    "text": "get any faster so this is what scaling up the",
    "start": "931440",
    "end": "936959"
  },
  {
    "text": "application is about now scaling out this application and when we say scal",
    "start": "936959",
    "end": "942680"
  },
  {
    "text": "scaling out we talk about horizontal scaling which means that we have a cluster or a distributed system and then",
    "start": "942680",
    "end": "949680"
  },
  {
    "text": "we scale it by adding more and more noes and what this implies that we need to actually write code to harness the",
    "start": "949680",
    "end": "956399"
  },
  {
    "text": "full power instead of the machine that we we need to actually write code to harness the full power of the",
    "start": "956399",
    "end": "962920"
  },
  {
    "text": "cluster so we're talking about a topology like this that we have a typical cluster that has a number of",
    "start": "962920",
    "end": "969639"
  },
  {
    "start": "968000",
    "end": "1090000"
  },
  {
    "text": "identical application server nodes behind the load balancers and I've got um number and identical and load",
    "start": "969639",
    "end": "977440"
  },
  {
    "text": "balancer in bold so when we talk about a number in a in a cluster it depends",
    "start": "977440",
    "end": "983279"
  },
  {
    "text": "actually of how many you actually need and you can afford you can have a cluster of 100 nodes you can have a cluster cluster of two notes um this",
    "start": "983279",
    "end": "990639"
  },
  {
    "text": "brings out to the um the uh the topic of",
    "start": "990639",
    "end": "996199"
  },
  {
    "text": "elastic scaling or Auto scaling uh which means that you actually the number of",
    "start": "996199",
    "end": "1002160"
  },
  {
    "text": "the live nodes can actually very much depends on the load your application your application is Ender and that new",
    "start": "1002160",
    "end": "1009000"
  },
  {
    "text": "node will be provisioned if there is more node and then the um it the the",
    "start": "1009000",
    "end": "1014440"
  },
  {
    "text": "size of the cluster will shrink if you actually don't need that load anymore and that's a um um a typical uh practice",
    "start": "1014440",
    "end": "1023279"
  },
  {
    "text": "and when we talk about identical we we we we mean that every single node every",
    "start": "1023279",
    "end": "1029400"
  },
  {
    "text": "single application node is cloned off a an image file they have identical they",
    "start": "1029400",
    "end": "1036319"
  },
  {
    "text": "they they have the exact same code base and there are a lot of tools right there that would allow you to do so you can",
    "start": "1036319",
    "end": "1042199"
  },
  {
    "text": "use Chef or you could use puppet or you could simply just use clone your code off of Amazon EC to um Ami",
    "start": "1042199",
    "end": "1050679"
  },
  {
    "text": "images and the last component of of major component of a cluster is um this",
    "start": "1050679",
    "end": "1056840"
  },
  {
    "text": "load balancer which means that we have a load that is to be distributed evenly",
    "start": "1056840",
    "end": "1062320"
  },
  {
    "text": "across this uh this cluster According to some some kind of algorithm um round Vin",
    "start": "1062320",
    "end": "1067480"
  },
  {
    "text": "is typically you know the standard you know configuration so we're talking about",
    "start": "1067480",
    "end": "1072679"
  },
  {
    "text": "something like this we have all of these people over there you know behind a firewall we have the load balance B and",
    "start": "1072679",
    "end": "1078799"
  },
  {
    "text": "we have these nodes um and then the requests go through the load balancer and they get routed to one of those",
    "start": "1078799",
    "end": "1085960"
  },
  {
    "text": "machines so in a cluster one of the biggest challenges is actually to manage",
    "start": "1085960",
    "end": "1091000"
  },
  {
    "start": "1090000",
    "end": "1259000"
  },
  {
    "text": "State across this cluster and um State session data as an",
    "start": "1091000",
    "end": "1096919"
  },
  {
    "text": "example is managed differently depending on your needs the first option is that",
    "start": "1096919",
    "end": "1102520"
  },
  {
    "text": "session replication it means that every time node a writes to the session right",
    "start": "1102520",
    "end": "1109320"
  },
  {
    "text": "a piece of of of data to the session there is this um framework or this piece of code that would actually go and",
    "start": "1109320",
    "end": "1115919"
  },
  {
    "text": "replicate all that data for to in in in the rest of the nodes so that session",
    "start": "1115919",
    "end": "1121120"
  },
  {
    "text": "data is available for them and it can be read uh the second option is what is called session Affinity or sticky",
    "start": "1121120",
    "end": "1127760"
  },
  {
    "text": "session in session if we say that you have session Affinity if actually the",
    "start": "1127760",
    "end": "1133760"
  },
  {
    "text": "load balancer is actually more active and more aware of the source SCE of the",
    "start": "1133760",
    "end": "1138799"
  },
  {
    "text": "request and that the load balancer ensures that um the request from client",
    "start": "1138799",
    "end": "1145559"
  },
  {
    "text": "a will always be routed to server a so he knows it's coming from this IP IP and",
    "start": "1145559",
    "end": "1151760"
  },
  {
    "text": "always go to server a that way you can write to the session and the next time",
    "start": "1151760",
    "end": "1156840"
  },
  {
    "text": "you can like read from it you're in the exact same machine and there is no need for replicating it across the cluster",
    "start": "1156840",
    "end": "1162480"
  },
  {
    "text": "which is a big a big overhead uh the problem with session Affinity is that when the node dies you",
    "start": "1162480",
    "end": "1171320"
  },
  {
    "text": "lose that session data so it just you you you'll end up",
    "start": "1171320",
    "end": "1177320"
  },
  {
    "text": "eventually being routed to a different server and then you don't find your data over there and this is can be pretty bad",
    "start": "1177320",
    "end": "1183280"
  },
  {
    "text": "if you're on amazon.com and you just added something to your shopping cart and then you go you refresh the page and",
    "start": "1183280",
    "end": "1190159"
  },
  {
    "text": "it's gone it's not there anymore the other option that you have for managing state is the shared or",
    "start": "1190159",
    "end": "1196960"
  },
  {
    "text": "distributed session when actually session is stored the session is stored in a centralized",
    "start": "1196960",
    "end": "1203000"
  },
  {
    "text": "location or at least to you it is on a centralized location it might be in like",
    "start": "1203000",
    "end": "1208039"
  },
  {
    "text": "a storage that is um somewhere else like M cash or",
    "start": "1208039",
    "end": "1213679"
  },
  {
    "text": "anything else or might be that it's actually managed by a piece of software that actually goes and allows you to",
    "start": "1213679",
    "end": "1220799"
  },
  {
    "text": "look at memory or look at um the of of",
    "start": "1220799",
    "end": "1226000"
  },
  {
    "text": "the cluster as just like one piece of of uh of one unit of storage so do yourself",
    "start": "1226000",
    "end": "1232480"
  },
  {
    "text": "a favor and go stateless because managing session is just a nightmare",
    "start": "1232480",
    "end": "1238080"
  },
  {
    "text": "across a cluster so just don't use it at all and go stateless any and then and",
    "start": "1238080",
    "end": "1244159"
  },
  {
    "text": "that way any server would do it doesn't really matter where the or to where the load balancer will send the request and",
    "start": "1244159",
    "end": "1251000"
  },
  {
    "text": "you can just do your business because you're not really dependent on some state or expecting some state that you",
    "start": "1251000",
    "end": "1256799"
  },
  {
    "text": "had written before so now we talked about parallelism on the one node which most of you are",
    "start": "1256799",
    "end": "1263360"
  },
  {
    "text": "familiar with now we want to talk about paral parallelism across the cluster right so to be able to harness the power",
    "start": "1263360",
    "end": "1270760"
  },
  {
    "text": "of the cluster there are all these operations that are just maybe um deal",
    "start": "1270760",
    "end": "1276559"
  },
  {
    "text": "with a lot of data or like too much data or for like the one node to handle we could leverage Technologies like map",
    "start": "1276559",
    "end": "1283320"
  },
  {
    "text": "reduce um Hadoop is one of uh um the implementation which is a programming",
    "start": "1283320",
    "end": "1289960"
  },
  {
    "text": "model that processes data sets in parallel and and um this or or executes",
    "start": "1289960",
    "end": "1297679"
  },
  {
    "text": "distributed algorithms uh on a cluster",
    "start": "1297679",
    "end": "1302840"
  },
  {
    "text": "so other Concepts in relation to scaling out your application that you might want",
    "start": "1302840",
    "end": "1308799"
  },
  {
    "start": "1303000",
    "end": "1400000"
  },
  {
    "text": "to get yourself familiar with and assess whether you actually need them or not is the uh distributed lock managers of a",
    "start": "1308799",
    "end": "1315480"
  },
  {
    "text": "dlm when actually you need synchronization of like shared res sources across the cluster there's like",
    "start": "1315480",
    "end": "1321559"
  },
  {
    "text": "um a paper I think um um by um um by Google but they Google chav you could",
    "start": "1321559",
    "end": "1327720"
  },
  {
    "text": "use zookeeper and there's like an array um I mean a list of other Technologies and also you're going to have to",
    "start": "1327720",
    "end": "1334240"
  },
  {
    "text": "actually worry about distributed transactions uh https comes up um as all",
    "start": "1334240",
    "end": "1341320"
  },
  {
    "text": "the time what what would you do uh to these https sessions uh you have you",
    "start": "1341320",
    "end": "1347320"
  },
  {
    "text": "could your options is either to end the https session on the load balancer or to",
    "start": "1347320",
    "end": "1352960"
  },
  {
    "text": "actually use Wild Card SSL certificates that would allow um any node pretty much",
    "start": "1352960",
    "end": "1360120"
  },
  {
    "text": "to um um to do the handshakes and also you want to actually consider leveraging probabilistic data",
    "start": "1360120",
    "end": "1367000"
  },
  {
    "text": "structures and algorithms things like Bloom filters and U quotient filter filters and Etc and uh the these things",
    "start": "1367000",
    "end": "1375840"
  },
  {
    "text": "I mean if you do a quick Wikipedia search on a bloom filter these are just like little simple algorithms that would",
    "start": "1375840",
    "end": "1381720"
  },
  {
    "text": "answer the question whether um a particular piece of data is a part of a set or not so it would this would be",
    "start": "1381720",
    "end": "1389039"
  },
  {
    "text": "instead of actually looking up something in the database it would be just um running it through a filter uh in memory",
    "start": "1389039",
    "end": "1395679"
  },
  {
    "text": "and be able to get your answer an answer right right away so deployment right now",
    "start": "1395679",
    "end": "1404840"
  },
  {
    "start": "1400000",
    "end": "1493000"
  },
  {
    "text": "um so T typically M environment right here in bigger bigger organization um um",
    "start": "1404840",
    "end": "1413760"
  },
  {
    "text": "you would have multiple environment you Dev environment test and stage and production I'm sure all of you is familiar with this um a lot of um we",
    "start": "1413760",
    "end": "1421919"
  },
  {
    "text": "need to actually have some kind of U automatic configuration tool as well and",
    "start": "1421919",
    "end": "1427840"
  },
  {
    "text": "uh you as you you you should probably like practice something like a",
    "start": "1427840",
    "end": "1433720"
  },
  {
    "text": "continuous uh delivery which is out of the scope of this presentation uh which",
    "start": "1433720",
    "end": "1438880"
  },
  {
    "text": "it means that you're all your developers are writing production code every day and you're deploying as often as",
    "start": "1438880",
    "end": "1444559"
  },
  {
    "text": "possible uh to um um to to to production and running um a bunch of tests to do",
    "start": "1444559",
    "end": "1451799"
  },
  {
    "text": "that um in deployment you want to Leverage The Cloud I mean you can there",
    "start": "1451799",
    "end": "1457760"
  },
  {
    "text": "are different degrees of um of cloud computing you could just run your own",
    "start": "1457760",
    "end": "1464120"
  },
  {
    "text": "cluster of ec2 instances and uh put them behind the load B balcer they will be using the infrastructure of of as a",
    "start": "1464120",
    "end": "1470960"
  },
  {
    "text": "server as a service or you could throw in your War as a as a pass and that have to worry about that at",
    "start": "1470960",
    "end": "1477799"
  },
  {
    "text": "all so this is um dealing with the CPU bottleneck which is just starting to",
    "start": "1477799",
    "end": "1485159"
  },
  {
    "text": "actually write your applications differently in a different way and starting to take advantage of all of these Technologies so the storage",
    "start": "1485159",
    "end": "1492760"
  },
  {
    "text": "bottleneck or the io is the most probably significant I mean it's it's a",
    "start": "1492760",
    "end": "1498200"
  },
  {
    "text": "it's a nightmare so the first part I want to talk about is the persistent store uh we there was a time when",
    "start": "1498200",
    "end": "1506480"
  },
  {
    "text": "actually we didn't have to think of what data store what type of data store we want to use the answer the obvious",
    "start": "1506480",
    "end": "1513120"
  },
  {
    "text": "answer the def facto answer was oh yeah let's use MySQL let's use Oracle was the rdbms model uh which is a model that has",
    "start": "1513120",
    "end": "1521120"
  },
  {
    "text": "a schema that guarantees data Integrity uh your data is normalized you have asset transactions uh your data is",
    "start": "1521120",
    "end": "1528320"
  },
  {
    "text": "stored in a way that is not biased towards any kind of query pattern um and",
    "start": "1528320",
    "end": "1534039"
  },
  {
    "text": "um it has this very nice flexible query language that we can use later to query it however we want called the SQL the",
    "start": "1534039",
    "end": "1541200"
  },
  {
    "text": "problem is that our data sets as our data sets grow we started actually scaling vertically and we mention the",
    "start": "1541200",
    "end": "1548320"
  },
  {
    "text": "the actual database system so we bought B machines which is not cheap at all was",
    "start": "1548320",
    "end": "1554520"
  },
  {
    "text": "expensive uh we spend a lot of time doing uh database tunings doing query optimizations creating materialized",
    "start": "1554520",
    "end": "1561320"
  },
  {
    "text": "views and all of these things and we started denormalizing",
    "start": "1561320",
    "end": "1566399"
  },
  {
    "text": "and the data we keep we keep hoarding data um and it to the point that we HD",
    "start": "1566399",
    "end": "1574919"
  },
  {
    "text": "the limit of the one machine we just couldn't do anything to to make it better",
    "start": "1574919",
    "end": "1580159"
  },
  {
    "text": "anymore um so we attempted to actually scale out the rdbms system by running",
    "start": "1580159",
    "end": "1588520"
  },
  {
    "text": "relational uh databases on a cluster and we have these architectur this my Master Slave architectures who started doing",
    "start": "1588520",
    "end": "1595279"
  },
  {
    "text": "data sharding when you actually take your data set and then you Shard it by some kind of key like employees from a",
    "start": "1595279",
    "end": "1601279"
  },
  {
    "text": "to F on node one and from F to Z in no to",
    "start": "1601279",
    "end": "1606440"
  },
  {
    "text": "Etc but we failed that did not work so why is that this is because of Eric",
    "start": "1606440",
    "end": "1613440"
  },
  {
    "text": "Brewer's cap theorem of distributed systems that literally tells you you that you can only have two out of the",
    "start": "1613440",
    "end": "1619840"
  },
  {
    "text": "three you could either have consist out of the three consistency availability and partition tolerance partition",
    "start": "1619840",
    "end": "1626240"
  },
  {
    "text": "tolerance simply means that you're running in a in a cluster that is um um",
    "start": "1626240",
    "end": "1632039"
  },
  {
    "text": "full tolerant so the relational model is actually designed to favor CA to favor",
    "start": "1632039",
    "end": "1639159"
  },
  {
    "text": "consistency um and to guarantee acidity of transactions and all that and availability you want the database to be",
    "start": "1639159",
    "end": "1646039"
  },
  {
    "text": "available all the time so by default or by um the cap theorem you just cannot",
    "start": "1646039",
    "end": "1652039"
  },
  {
    "text": "scale it horizontally so this gave the birth of",
    "start": "1652039",
    "end": "1657880"
  },
  {
    "start": "1655000",
    "end": "1703000"
  },
  {
    "text": "of an caused an explosion of a wide range of specialized data stores that we",
    "start": "1657880",
    "end": "1663039"
  },
  {
    "text": "call the nosql movement whose goal is to address these issues and the biggest issues is to be able to run your data",
    "start": "1663039",
    "end": "1670919"
  },
  {
    "text": "store within like within a cluster mostly uh it's a wide variety out of the",
    "start": "1670919",
    "end": "1676440"
  },
  {
    "text": "scope of this uh pre presentation but some of them are some of them are key value data stores or column based some",
    "start": "1676440",
    "end": "1683640"
  },
  {
    "text": "of them are document based we have also um graph uh uh data stores which are which are are not actually designed to",
    "start": "1683640",
    "end": "1690440"
  },
  {
    "text": "run um to run on a cluster but they actually look at the data differently and they allow you to um um query them",
    "start": "1690440",
    "end": "1697799"
  },
  {
    "text": "like a like a graph these are a bunch of solutions like out there this is again",
    "start": "1697799",
    "end": "1703799"
  },
  {
    "start": "1703000",
    "end": "1799000"
  },
  {
    "text": "out of the scope of this presentation But Here Comes the con cep after I mean",
    "start": "1703799",
    "end": "1709240"
  },
  {
    "text": "this is fairly pretty new um then we talk about uh polyl",
    "start": "1709240",
    "end": "1715880"
  },
  {
    "text": "persistence and what poly got persistent is is is the idea that is based on",
    "start": "1715880",
    "end": "1722919"
  },
  {
    "text": "acknowledging that the complexity of these applications that we are building um would U cause different ways",
    "start": "1722919",
    "end": "1731799"
  },
  {
    "text": "of querying the data and will cause us to deal with different data altogether and the fact that you could",
    "start": "1731799",
    "end": "1738480"
  },
  {
    "text": "actually fit these different data and different query pattern in one model and expect no problem is just",
    "start": "1738480",
    "end": "1745640"
  },
  {
    "text": "absurd so the solution is polyglot persistent which is just liage use more",
    "start": "1745640",
    "end": "1753120"
  },
  {
    "text": "than one data store and Le leverage them uh within your application you know",
    "start": "1753120",
    "end": "1760000"
  },
  {
    "text": "store graph like data in a graph database and store uh you Rel data that",
    "start": "1760000",
    "end": "1766240"
  },
  {
    "text": "is highly relational that is uh designed to be report reporting in like a my",
    "start": "1766240",
    "end": "1771559"
  },
  {
    "text": "mySQL database um or a relational database and simply um have your",
    "start": "1771559",
    "end": "1778279"
  },
  {
    "text": "application query it from the different data stores and aggregate it and construct this model to and then pass it",
    "start": "1778279",
    "end": "1785559"
  },
  {
    "text": "along through your uh your business logic here comes the important of things",
    "start": "1785559",
    "end": "1791159"
  },
  {
    "text": "like parallelism you know and writing code that is concurrent of writing good code that is concurrent uh versus",
    "start": "1791159",
    "end": "1798240"
  },
  {
    "text": "actually sequential processing so for more details I gave I",
    "start": "1798240",
    "end": "1804080"
  },
  {
    "start": "1799000",
    "end": "1901000"
  },
  {
    "text": "think a nosql talk last year at the ja 2012 I think it's available on YouTube",
    "start": "1804080",
    "end": "1810720"
  },
  {
    "text": "uh that's the bitly URL and if you just Google the r of no SQL and polyglot persistence uh just go to the one that",
    "start": "1810720",
    "end": "1817120"
  },
  {
    "text": "is from the Jack conference I think there might be two instance in there so the second thing that we want to talk",
    "start": "1817120",
    "end": "1822919"
  },
  {
    "text": "about uh after the persistent storage is caching",
    "start": "1822919",
    "end": "1828840"
  },
  {
    "text": "and caching is simply just a large simple key value data structure so",
    "start": "1828840",
    "end": "1834880"
  },
  {
    "text": "instead of us incurring that overhead of data retrieval or incurring that overhead of comp Computing um something",
    "start": "1834880",
    "end": "1844039"
  },
  {
    "text": "um every time you want every time for every single every single request we",
    "start": "1844039",
    "end": "1850279"
  },
  {
    "text": "simply cash that and we make that available we cat it in memory we we make that available or somewhere we make it",
    "start": "1850279",
    "end": "1856720"
  },
  {
    "text": "available so since we cash we can't cach everything this is not a dump of data in memory there are",
    "start": "1856720",
    "end": "1865279"
  },
  {
    "text": "different caches can be configured to use multiple algorithms you know lru the least recently used for is to be cached",
    "start": "1865279",
    "end": "1872279"
  },
  {
    "text": "of the most recently used it depends of your specific use case so use caching",
    "start": "1872279",
    "end": "1878880"
  },
  {
    "text": "aggressively if you want to scale as much as you can flat out so but what you cash I mean",
    "start": "1878880",
    "end": "1887679"
  },
  {
    "text": "again frequently Access Data like you session data for example if you have a feed in your application you might want",
    "start": "1887679",
    "end": "1894399"
  },
  {
    "text": "to consider like cashing that one way or another or cach things that take a long time to U uh to to",
    "start": "1894399",
    "end": "1901000"
  },
  {
    "text": "compute so where to Cache you could cash on disk the F system of course it's a",
    "start": "1901000",
    "end": "1907120"
  },
  {
    "text": "terrible idea it's very slow and sequential but you can cash in a in a database um which is a little bit better",
    "start": "1907120",
    "end": "1914240"
  },
  {
    "text": "um because data is actually arrange in data structures that are designed for efficient access they have uh you can",
    "start": "1914240",
    "end": "1920799"
  },
  {
    "text": "have have indices and and all that kind of stuff but it's generally a terrible idea even if you're running on like ssds",
    "start": "1920799",
    "end": "1927799"
  },
  {
    "text": "but the reason why I mentioned it is that we can talk about these operations that to that that take a long time to",
    "start": "1927799",
    "end": "1933880"
  },
  {
    "text": "compute and this is this it might take two hours or three hours to compute you just take the result and then you put it",
    "start": "1933880",
    "end": "1940320"
  },
  {
    "text": "like as a file that's like much much better than actually um going through through the whole thing or you can",
    "start": "1940320",
    "end": "1946559"
  },
  {
    "text": "actually cash in memory fast you get Random Access but I mean it's uh volatile or",
    "start": "1946559",
    "end": "1953440"
  },
  {
    "text": "you can have something in between like using a nosql database like RIS um as a",
    "start": "1953440",
    "end": "1958760"
  },
  {
    "text": "persistent uh cache so there are multiple types of caches there are like local caches that are local to the",
    "start": "1958760",
    "end": "1965200"
  },
  {
    "start": "1960000",
    "end": "2011000"
  },
  {
    "text": "particular instance or the particular um um server that you're dealing with there are like cash replicated caches which is",
    "start": "1965200",
    "end": "1972120"
  },
  {
    "text": "the same way uh that um that that that we mentioned before managing a ated",
    "start": "1972120",
    "end": "1977600"
  },
  {
    "text": "session in the cluster that you write um a bit of of data to um the cach in node",
    "start": "1977600",
    "end": "1984799"
  },
  {
    "text": "a and it eventually get replicated uh throughout the cluster there are distributed caches when actually the",
    "start": "1984799",
    "end": "1990840"
  },
  {
    "text": "system starts viewing uh or the programmer um starts viewing the cache",
    "start": "1990840",
    "end": "1996799"
  },
  {
    "text": "that is distributed across many many nodes as just like one uh unit of storage and they are like clustered",
    "start": "1996799",
    "end": "2002720"
  },
  {
    "text": "caches which is completely different caching servers that are like clustered like um M cach for example um servers so",
    "start": "2002720",
    "end": "2012000"
  },
  {
    "start": "2011000",
    "end": "2285000"
  },
  {
    "text": "what is this caching you know how to Cache so most caches Implement a very simple interface it's extremely simple",
    "start": "2012000",
    "end": "2018880"
  },
  {
    "text": "but the the rule of thumb is always attempt to get from the cach first uh using a key so since it's just like a",
    "start": "2018880",
    "end": "2026440"
  },
  {
    "text": "map in memory you just say get me this key and you get something in return you get your data in return if it's aead",
    "start": "2026440",
    "end": "2033320"
  },
  {
    "text": "that means if it's in the cash then you save yourself the overhead of actually having to look this stuff up in a",
    "start": "2033320",
    "end": "2038919"
  },
  {
    "text": "database and if it's a Miss then it's okay I mean you just actually have to go back to the database and then do your",
    "start": "2038919",
    "end": "2045440"
  },
  {
    "text": "retrieval and actually incur that overhead and uh it might be good for you to actually stick it back in the cash so",
    "start": "2045440",
    "end": "2051158"
  },
  {
    "text": "next time you look up you get you get a hit instead of instead of a miss when you update a particular",
    "start": "2051159",
    "end": "2058240"
  },
  {
    "text": "resource you can actually evi it from the cash uh you can assign a time to live when you actually put say just keep",
    "start": "2058240",
    "end": "2064800"
  },
  {
    "text": "this in the cash for 5 seconds or two seconds and there are different scenarios where that actually becomes",
    "start": "2064800",
    "end": "2070040"
  },
  {
    "text": "useful and there are many common operations it's a very simple interface so in caching there are",
    "start": "2070040",
    "end": "2077520"
  },
  {
    "text": "certain patterns that you might want to be um um mind that you want to be aware",
    "start": "2077520",
    "end": "2082720"
  },
  {
    "text": "of the first one is actually caching query results when you have this frequent query that you hit the database",
    "start": "2082720",
    "end": "2088398"
  },
  {
    "text": "with to select everything from table a for example a new limit of 10 rows the",
    "start": "2088399",
    "end": "2094638"
  },
  {
    "text": "way you would cach this is you take the actual query itself you hash it and then",
    "start": "2094639",
    "end": "2099680"
  },
  {
    "text": "you use that as the key so the next time somebody comes with a query you take that hash and then you look it up in the",
    "start": "2099680",
    "end": "2105440"
  },
  {
    "text": "cach and then you return the result it's very simple but it becomes quite interesting we're actually dealing with",
    "start": "2105440",
    "end": "2111119"
  },
  {
    "text": "parameterized queries if you have select um star employees where ID is 125 that",
    "start": "2111119",
    "end": "2119359"
  },
  {
    "text": "hash or like is not the same as select employee where hash is 13 whatever that",
    "start": "2119359",
    "end": "2125839"
  },
  {
    "text": "is right so the way you would do that is actually to Hash the actual query and then you hash the parameter values so um",
    "start": "2125839",
    "end": "2134440"
  },
  {
    "text": "and you end up with eventually multiple instances depending of those of those parameters but that would be like uh",
    "start": "2134440",
    "end": "2140200"
  },
  {
    "text": "probably the best way to do it you can actually use hash to do method of function memorization when we're not",
    "start": "2140200",
    "end": "2146680"
  },
  {
    "text": "dealing with data access that means a method that computes resources they has like parameters you take the method name",
    "start": "2146680",
    "end": "2153280"
  },
  {
    "text": "instead of the actual query and you hash it and you stick it in the cache so the next time that method is called you",
    "start": "2153280",
    "end": "2159599"
  },
  {
    "text": "actually go and you look up and see um if if you've already done that before if it's a hit and then you return the",
    "start": "2159599",
    "end": "2166079"
  },
  {
    "text": "result without actually executing the code just like a big F statement uh that that is that that encloses or encloses",
    "start": "2166079",
    "end": "2173200"
  },
  {
    "text": "the memorize the method or you can actually cach object and this is a different approach when you actually",
    "start": "2173200",
    "end": "2179520"
  },
  {
    "text": "take an entire object graph you serialize it one way or another and you take the identity of that particular",
    "start": "2179520",
    "end": "2185760"
  },
  {
    "text": "object you just stick it in the cach um the ID of an employee for example and every time you look at employee um you",
    "start": "2185760",
    "end": "2192839"
  },
  {
    "text": "look up employee number 1 2 3 4 You just go to the cash and give me whatever's key that's one two three four and you",
    "start": "2192839",
    "end": "2198839"
  },
  {
    "text": "can get um the EMP employee you're looking for so another caching patterns when",
    "start": "2198839",
    "end": "2205000"
  },
  {
    "text": "you're actually dealing with time series data sets that means data sets that actually um frequently updating with",
    "start": "2205000",
    "end": "2212359"
  },
  {
    "text": "time like an actually the top of a feed or a Twitter feed or a stream of",
    "start": "2212359",
    "end": "2218240"
  },
  {
    "text": "messages whever it is so a lot of people are pretty much satisfied with data that",
    "start": "2218240",
    "end": "2224920"
  },
  {
    "text": "is not real time data that is pseudo real time not near real time mean people are fine with I tweet I add a tweet and",
    "start": "2224920",
    "end": "2235560"
  },
  {
    "text": "nobody would be able to see it for like a second or like two seconds so you would use caching in this fashion to",
    "start": "2235560",
    "end": "2242960"
  },
  {
    "text": "actually throtle access to this particular res resource in the sense that you would cast c cach the latest",
    "start": "2242960",
    "end": "2250560"
  },
  {
    "text": "page of the feed and you say you key it as feed for example or with like a",
    "start": "2250560",
    "end": "2256280"
  },
  {
    "text": "particular key and say leaving in the cash for like 5 seconds so everybody who",
    "start": "2256280",
    "end": "2261319"
  },
  {
    "text": "hits the cash within the 5 Seconds is going to get you know that copy and you never make you never make a query to the",
    "start": "2261319",
    "end": "2268560"
  },
  {
    "text": "database but then that thing will just eventually expire and go away after 5 seconds then you make the second query",
    "start": "2268560",
    "end": "2275640"
  },
  {
    "text": "right so you'll be making a query per T time and that's and that's and that's up to you um up to the the TTL time that",
    "start": "2275640",
    "end": "2283160"
  },
  {
    "text": "you actually decided to set so it's not trouble-free you really got",
    "start": "2283160",
    "end": "2291359"
  },
  {
    "text": "to be very careful um and actually most importantly",
    "start": "2291359",
    "end": "2297160"
  },
  {
    "text": "actually profile your code to actually assess whether you actually need cash to begin with you don't want to L your code",
    "start": "2297160",
    "end": "2304400"
  },
  {
    "text": "with cash here cash here cash here and go all crazy e if you actually don't need it or you don't have any significant performance gain so you",
    "start": "2304400",
    "end": "2311040"
  },
  {
    "text": "really want to be careful um also stale data might actually bite you hard when",
    "start": "2311040",
    "end": "2317280"
  },
  {
    "text": "there is an incoherent coherence so there is an inconsistency between the actual data and the database which is",
    "start": "2317280",
    "end": "2323400"
  },
  {
    "text": "the tooth and the actual cache in front of it that you use uh this might EAS easily happen um in two cases let's",
    "start": "2323400",
    "end": "2331240"
  },
  {
    "text": "assume that you actually um would like to look up you cat these objects you would like to look up these employees by",
    "start": "2331240",
    "end": "2338160"
  },
  {
    "text": "their last name and you would like to look them up by their ID as well so when you are you and you actually EV the ID",
    "start": "2338160",
    "end": "2346560"
  },
  {
    "text": "123 but you forget the object with the last name um in the cache so you have",
    "start": "2346560",
    "end": "2352240"
  },
  {
    "text": "like two inconsistent copies uh that are like just like sitting there so um and",
    "start": "2352240",
    "end": "2359079"
  },
  {
    "text": "so you really want to be careful there also stale um nested Aggregates employee",
    "start": "2359079",
    "end": "2365160"
  },
  {
    "text": "has a bunch of children and then you take this employee and you one two three you stick him in the cash and he has",
    "start": "2365160",
    "end": "2371119"
  },
  {
    "text": "three kids whatever it is and that data actually ended up would end up being changed in the database his um uh",
    "start": "2371119",
    "end": "2377720"
  },
  {
    "text": "dependence of his children's information but it's still on on the cash um also the network overhead of",
    "start": "2377720",
    "end": "2385640"
  },
  {
    "text": "Misses might actually over away the performance gain um of uh that that you",
    "start": "2385640",
    "end": "2390800"
  },
  {
    "text": "get from from that you get from the HPS if you're missing missing missing every time you go you look up in the cash and",
    "start": "2390800",
    "end": "2396040"
  },
  {
    "text": "you miss you miss you miss that's actually time that you actually spend going to the cash and trying to get",
    "start": "2396040",
    "end": "2401720"
  },
  {
    "text": "retrieve that information so really be mindful of that if you're missing more than you're hitting you're just",
    "start": "2401720",
    "end": "2407800"
  },
  {
    "text": "incurring um um that that that latency um and you want that that's what it",
    "start": "2407800",
    "end": "2415200"
  },
  {
    "text": "would actually would make you question what what type of cash algorithms you need or whether you need like cash in a",
    "start": "2415200",
    "end": "2420240"
  },
  {
    "text": "la also consider writing updating the cache when you actually write to the data store so consider having wrapping",
    "start": "2420240",
    "end": "2427560"
  },
  {
    "text": "around some kind with some kind of transaction if that fits your need to actually every time you update something",
    "start": "2427560",
    "end": "2432760"
  },
  {
    "text": "you put it on the data store you stick it in the cach if you actually know that you will retrieve it uh you retrieve it",
    "start": "2432760",
    "end": "2438520"
  },
  {
    "text": "later uh featured Solutions right there if you want to explore is ehh MIM cach",
    "start": "2438520",
    "end": "2443680"
  },
  {
    "text": "you coherence uh Rus which is actually not considered to be a cach because it's",
    "start": "2443680",
    "end": "2449040"
  },
  {
    "text": "persistence persistent no SQL data store which is just like a large map uh support a lot of nice thing like buil-in",
    "start": "2449040",
    "end": "2455520"
  },
  {
    "text": "data structur like sets and lists and has like very intelligent uh keys and name spaces uh if you're interested you",
    "start": "2455520",
    "end": "2462160"
  },
  {
    "text": "can come and talk to me after the talk so the last Bott",
    "start": "2462160",
    "end": "2468160"
  },
  {
    "text": "neck that would' like to talk about is the network we talked about the CPU and",
    "start": "2468160",
    "end": "2474160"
  },
  {
    "text": "how you actually need to write your application to maximize and harness harness the full power of the one node",
    "start": "2474160",
    "end": "2480400"
  },
  {
    "text": "how you actually can write your code and use Technologies to actually harness the power of the entire cluster we talked",
    "start": "2480400",
    "end": "2486599"
  },
  {
    "text": "about the data store and we talked about the different options different data stores that you can uh you can use and",
    "start": "2486599",
    "end": "2493520"
  },
  {
    "text": "can even like use more than one and be uh polyglot and we talked about using caching how it's a good thing to use",
    "start": "2493520",
    "end": "2499640"
  },
  {
    "text": "aggressively now the last thing is actually dealing with the network B",
    "start": "2499640",
    "end": "2505318"
  },
  {
    "text": "neck as synchronous processing",
    "start": "2506480",
    "end": "2511920"
  },
  {
    "text": "so some often we would have these resource intensive tasks that are not",
    "start": "2511920",
    "end": "2517880"
  },
  {
    "text": "practical to handle during an HTTP um request window you have this piece of",
    "start": "2517880",
    "end": "2524319"
  },
  {
    "text": "code that takes 10 seconds to to run you you couldn't do anything about it",
    "start": "2524319",
    "end": "2530560"
  },
  {
    "text": "you you know parallel process it you just it just takes that much time right",
    "start": "2530560",
    "end": "2536319"
  },
  {
    "text": "you're depending on some third party or whatever it isn't takes that that much time",
    "start": "2536319",
    "end": "2542359"
  },
  {
    "text": "so so this is where syn asynchronous processing would be a good um U use case",
    "start": "2542359",
    "end": "2548000"
  },
  {
    "text": "for um s being synchronous is overused and it's not necessary most of the time",
    "start": "2548000",
    "end": "2553599"
  },
  {
    "text": "sometimes you look at your request you cat your API and you really say well this one does not really need to be",
    "start": "2553599",
    "end": "2558839"
  },
  {
    "text": "synchronous um so you really give it like give it give it give it give it a",
    "start": "2558839",
    "end": "2564240"
  },
  {
    "text": "thought when we're talking about asynchronous processing we're talking about different patterns the first one",
    "start": "2564240",
    "end": "2569280"
  },
  {
    "start": "2565000",
    "end": "2603000"
  },
  {
    "text": "is actually pseudo synchronous processing uh we're talking about a flow as follows when you actually pre-process",
    "start": "2569280",
    "end": "2575040"
  },
  {
    "text": "data do operations in advance like a nightly job whatever it is so that way",
    "start": "2575040",
    "end": "2580359"
  },
  {
    "text": "the next time somebody hits you with a request asking for the result of that particular application or requesting",
    "start": "2580359",
    "end": "2586200"
  },
  {
    "text": "that data you just respond synchronously and you give him this pre-processed data so this is cool but sometimes it's not",
    "start": "2586200",
    "end": "2593319"
  },
  {
    "text": "possible when you're actually dealing with dynamic dynamic content and you're allowing people to pass you different uh",
    "start": "2593319",
    "end": "2598680"
  },
  {
    "text": "different um uh different parameters Etc the second pattern is actually true",
    "start": "2598680",
    "end": "2604440"
  },
  {
    "start": "2603000",
    "end": "2688000"
  },
  {
    "text": "asynchronous processing and the flow is as follows the request comes in uh or",
    "start": "2604440",
    "end": "2610000"
  },
  {
    "text": "for for the data for like to perform a particular application and your server",
    "start": "2610000",
    "end": "2615480"
  },
  {
    "text": "immediately acknowledges it and by acknowledging we mean that you actually",
    "start": "2615480",
    "end": "2620559"
  },
  {
    "text": "return an HTTP um 2011 accepted status code right away hey I acknowledge it I",
    "start": "2620559",
    "end": "2627640"
  },
  {
    "text": "got your request and you actually allow do the processing at your own convenience you just like throw in um",
    "start": "2627640",
    "end": "2634000"
  },
  {
    "text": "some worker worker thread to take care of of that or like push it to some kind of job queue and you do that processing",
    "start": "2634000",
    "end": "2641319"
  },
  {
    "text": "and you can give the C the user the courtesy and allow him to actually go and check for Progress this would be",
    "start": "2641319",
    "end": "2647480"
  },
  {
    "text": "like you placing an order in amazon.com and they tell you all right your order order has been placed and you can go and",
    "start": "2647480",
    "end": "2654200"
  },
  {
    "text": "say oh processing shipping shipped you can go every once in a while and then check on on on on on that on that on the",
    "start": "2654200",
    "end": "2662200"
  },
  {
    "text": "on that Pro on the on the status of your uh of your order versus actually",
    "start": "2662200",
    "end": "2667800"
  },
  {
    "text": "clicking and waiting for two days until they actually ship you or like two days",
    "start": "2667800",
    "end": "2674599"
  },
  {
    "text": "until you actually get the product delivered if that's even possible which is not time out um",
    "start": "2674599",
    "end": "2684000"
  },
  {
    "text": "so um this is what a true asynchronous processing is there are a bunch of techniques and technologies that would",
    "start": "2684000",
    "end": "2690520"
  },
  {
    "start": "2688000",
    "end": "2758000"
  },
  {
    "text": "like um that you could leverage some of these are job work task cues there are different names for them uh JMS amqp",
    "start": "2690520",
    "end": "2698280"
  },
  {
    "text": "have different implementations and servers out there aw ssq and such and uh",
    "start": "2698280",
    "end": "2704319"
  },
  {
    "text": "which simply takes you take a particular um you know you acknowledge the request",
    "start": "2704319",
    "end": "2709559"
  },
  {
    "text": "and you take that job and you push it into a queue and you have a bunch of workers you know that actually pull from",
    "start": "2709559",
    "end": "2714720"
  },
  {
    "text": "that queue and then do the processing um later so you immediately just like push it over there um um so the second one is",
    "start": "2714720",
    "end": "2723000"
  },
  {
    "text": "actually task scheduling you could leverage a bunch of libraries when you actually periodically you'll have all",
    "start": "2723000",
    "end": "2728559"
  },
  {
    "text": "these jobs that periodically would go and pull from these cues every hour or every two hours whatever it is and you",
    "start": "2728559",
    "end": "2734760"
  },
  {
    "text": "have some kind of coordination over there and there's also like batch processing if you look at your application and you're all asynchronous",
    "start": "2734760",
    "end": "2741920"
  },
  {
    "text": "you think that um it's just good and more efficient to actually ship orders",
    "start": "2741920",
    "end": "2747800"
  },
  {
    "text": "all at once so you have a shipping queue and then you just like batch like 10 at once and then you're uh you you you you",
    "start": "2747800",
    "end": "2754160"
  },
  {
    "text": "move on so the speaking of network the network",
    "start": "2754160",
    "end": "2761280"
  },
  {
    "start": "2758000",
    "end": "2777000"
  },
  {
    "text": "Bott addressing the network bottleneck the next thing after asynchronous processing and after being asynchronous",
    "start": "2761280",
    "end": "2767839"
  },
  {
    "text": "as much as you can um um because that makes you more available we want to talk",
    "start": "2767839",
    "end": "2773599"
  },
  {
    "text": "about this um CDN and what CDN are for like everybody",
    "start": "2773599",
    "end": "2780040"
  },
  {
    "start": "2777000",
    "end": "2892000"
  },
  {
    "text": "else or everybody who's on the web we have this static content that our that is that our applic would serve to these",
    "start": "2780040",
    "end": "2787319"
  },
  {
    "text": "users we're talking about videos and audio files wherever it is that a lot of actually go and put in the web directory",
    "start": "2787319",
    "end": "2794359"
  },
  {
    "text": "if you're um um running like a a Java application or they actually just make it available um anywhere else other than",
    "start": "2794359",
    "end": "2801640"
  },
  {
    "text": "they you know outside of the web M wherever you want to make it available uh and we have these web objects that",
    "start": "2801640",
    "end": "2807280"
  },
  {
    "text": "are static we have this HTML we have this JavaScript files we have CSS and we have all we have um um all all all all",
    "start": "2807280",
    "end": "2816160"
  },
  {
    "text": "these things do not serve this through your application server just simply don't",
    "start": "2816160",
    "end": "2824079"
  },
  {
    "text": "because somebody requests your one page your index page and your index page includes 10 two CSS files and 10",
    "start": "2824079",
    "end": "2832559"
  },
  {
    "text": "javascripts and every single and that just like swamps your server and keeps it busy every time somebody goes and",
    "start": "2832559",
    "end": "2839880"
  },
  {
    "text": "hits your index page it's just unnecessary your server your application server there is there to execute",
    "start": "2839880",
    "end": "2846599"
  },
  {
    "text": "um and and and be able to be able to respond to users at all time and execute",
    "start": "2846599",
    "end": "2851960"
  },
  {
    "text": "business logic not actually be worried about pulling pictures or serving binary",
    "start": "2851960",
    "end": "2857760"
  },
  {
    "text": "to play your intro video whatever it is and this is why we would use a CDN 4 and",
    "start": "2857760",
    "end": "2863280"
  },
  {
    "text": "what these CDN are it's just a large distributed system of servers deployed",
    "start": "2863280",
    "end": "2868480"
  },
  {
    "text": "in multiple data centers across the internet they're like all over the place um that you actually pay for I come my",
    "start": "2868480",
    "end": "2876280"
  },
  {
    "text": "AWS um um Cloud front front it's just like a piece of storage instead of",
    "start": "2876280",
    "end": "2881680"
  },
  {
    "text": "storing your pictures on your server you put them in a in a in a CDN and you can",
    "start": "2881680",
    "end": "2887839"
  },
  {
    "text": "just like start um pulling that data uh from there not trouble free of course uh the",
    "start": "2887839",
    "end": "2895559"
  },
  {
    "start": "2892000",
    "end": "3077000"
  },
  {
    "text": "gas uh when you first deal with these CDN uh is versioning and caching right",
    "start": "2895559",
    "end": "2903599"
  },
  {
    "text": "so assume that you have like a script file named the script.js and you deploy it in a in a CDN and it's perfect",
    "start": "2903599",
    "end": "2909839"
  },
  {
    "text": "because you know that this file is available everywhere in the world in these Edge nodes the Japanese people",
    "start": "2909839",
    "end": "2915680"
  },
  {
    "text": "requesting that script.js they're going to get it from the closest server to them which is the server in Japan the",
    "start": "2915680",
    "end": "2921599"
  },
  {
    "text": "the American ones are going to get it in from the American node and it's perfect it's available everywhere and it's great",
    "start": "2921599",
    "end": "2928440"
  },
  {
    "text": "so what CDN does is just takes script.js and then puts all these copies on all",
    "start": "2928440",
    "end": "2933559"
  },
  {
    "text": "these like Edge nodes uh for to for them to be served and be made",
    "start": "2933559",
    "end": "2938640"
  },
  {
    "text": "available also every time the your Japanese client is going to go to the Japanese Edge node and he's going to go",
    "start": "2938640",
    "end": "2945200"
  },
  {
    "text": "and cash in his local browser cach script.js so brows most browsers do that",
    "start": "2945200",
    "end": "2952599"
  },
  {
    "text": "um so you'll end up with another layer of redundancy so the problem is that when",
    "start": "2952599",
    "end": "2959640"
  },
  {
    "text": "you actually go and fix a bug in script that JS and you actually update it that new content will never be able",
    "start": "2959640",
    "end": "2968319"
  },
  {
    "text": "to be replicated or propagated propagate throughout throughout the noes or the",
    "start": "2968319",
    "end": "2974839"
  },
  {
    "text": "agge nodes of your um CDN because the file is named the same you put you",
    "start": "2974839",
    "end": "2980760"
  },
  {
    "text": "deploy a new script.js and all of these notes look at it I already have script.js not realizing that they have",
    "start": "2980760",
    "end": "2987040"
  },
  {
    "text": "the older older version right so what you can do and what a lot of CDN would allow you is you actually allow you to",
    "start": "2987040",
    "end": "2993440"
  },
  {
    "text": "invalidate script that Js in all of these nodes and it takes a while so they",
    "start": "2993440",
    "end": "2998640"
  },
  {
    "text": "can get the new copy automatically now you still have another problem which is",
    "start": "2998640",
    "end": "3003799"
  },
  {
    "text": "all of these clients that refuse to go and get the newer version because they think they have it they think they have",
    "start": "3003799",
    "end": "3009000"
  },
  {
    "text": "script script.js not realizing they still have the old older version it sucks so how do you deal with",
    "start": "3009000",
    "end": "3017280"
  },
  {
    "text": "this with all this dirty State going out of control um I mean how could you solve",
    "start": "3017280",
    "end": "3023200"
  },
  {
    "text": "the problem you could simply pend or actually versione these files or these",
    "start": "3023200",
    "end": "3028839"
  },
  {
    "text": "static script files by actually changing their name instead of script dvn v1j",
    "start": "3028839",
    "end": "3036079"
  },
  {
    "text": "when you update or fix the bug you rev up the version you have script - v2. JS",
    "start": "3036079",
    "end": "3042240"
  },
  {
    "text": "and all the sudden you have a completely different urri that the edge nodes would actually",
    "start": "3042240",
    "end": "3047760"
  },
  {
    "text": "realize oh this is a new file let me pull it and um all of these clients actually say oh this is a new file it's",
    "start": "3047760",
    "end": "3054400"
  },
  {
    "text": "not the old script V1 that JS that I have as simple as that uh you could also",
    "start": "3054400",
    "end": "3060559"
  },
  {
    "text": "leverage or use set up the HTTP caching headers properly um or Force the",
    "start": "3060559",
    "end": "3066440"
  },
  {
    "text": "invalidation of the of a particular file on all Edge nodes you could do whatever you want I mean depends what CDN you use",
    "start": "3066440",
    "end": "3073000"
  },
  {
    "text": "and they have like different ways of uh configuring things the last thing I want to talk",
    "start": "3073000",
    "end": "3078640"
  },
  {
    "start": "3077000",
    "end": "3083000"
  },
  {
    "text": "about to address the network bottleneck is the CDN it's not the CDN it's the DNS so DNS",
    "start": "3078640",
    "end": "3086079"
  },
  {
    "start": "3083000",
    "end": "3198000"
  },
  {
    "text": "is everybody knows it the domain naming service um what we don't realize is that when",
    "start": "3086079",
    "end": "3094119"
  },
  {
    "text": "you register a new name in the regist they give you you own",
    "start": "3094119",
    "end": "3099839"
  },
  {
    "text": "ww. you know superman.com it's yours um they give you this DNS service server",
    "start": "3099839",
    "end": "3106079"
  },
  {
    "text": "for service for free right the problem with that is that if you want to write",
    "start": "3106079",
    "end": "3111480"
  },
  {
    "text": "systems that actually scale you're going to have billions of request requests actually hitting that DNS and asking hey",
    "start": "3111480",
    "end": "3119720"
  },
  {
    "text": "give me the IP of wws superman.com and they're going to get overwhelmed you're",
    "start": "3119720",
    "end": "3124799"
  },
  {
    "text": "going to get throttled and you're going to slow down you know a great deal so you won't be able to scale so what you",
    "start": "3124799",
    "end": "3130359"
  },
  {
    "text": "want to do is actually consider starting paying for a better service consider using Solutions like AWS Route 53 or uh",
    "start": "3130359",
    "end": "3137960"
  },
  {
    "text": "Ultra DNS that actually will charge you a price for like a fee but they have the",
    "start": "3137960",
    "end": "3143920"
  },
  {
    "text": "capability of handling the large amount of requests that would allow you to",
    "start": "3143920",
    "end": "3149799"
  },
  {
    "text": "actually to to scale because you sit there and you're like my why is my server so not responsive why is it slow",
    "start": "3149799",
    "end": "3157119"
  },
  {
    "text": "what's happening and it's actually not you it's actually the DNS that you are using which is most likely the one the",
    "start": "3157119",
    "end": "3163160"
  },
  {
    "text": "free one that comes with the registra so the next section is about",
    "start": "3163160",
    "end": "3169880"
  },
  {
    "text": "qualifying scalability you know actually measuring knowing what scalability is",
    "start": "3169880",
    "end": "3175640"
  },
  {
    "text": "and which is like just a few slide which is like very short because me we went through addressing it how we can write",
    "start": "3175640",
    "end": "3183319"
  },
  {
    "text": "scalable applications and address the three bottlenecks you know differently by leveraging Technologies writing out",
    "start": "3183319",
    "end": "3189359"
  },
  {
    "text": "code differently and all that kind of stuff now let's qualify this scalability so um talking about",
    "start": "3189359",
    "end": "3197599"
  },
  {
    "text": "instrumentation um make sure that you B in instrumentation in in the code into the code early that means a bit or a",
    "start": "3197599",
    "end": "3204160"
  },
  {
    "start": "3198000",
    "end": "3287000"
  },
  {
    "text": "piece of of code that actually simply sends you know data how",
    "start": "3204160",
    "end": "3209839"
  },
  {
    "text": "long a particular request uh takes um you know Yammer metric Yammer metric for",
    "start": "3209839",
    "end": "3215319"
  },
  {
    "text": "example is an example of that you could literally hit that seret or just like a filter seret that would tell you how",
    "start": "3215319",
    "end": "3220839"
  },
  {
    "text": "long particular requests are request requests take uh make sure you have",
    "start": "3220839",
    "end": "3225960"
  },
  {
    "text": "monitoring we monitor your application health or cluster Health uh the individual nodes down to the jvm metrics",
    "start": "3225960",
    "end": "3233200"
  },
  {
    "text": "or the system resources and you track key kpis or performance kpis the number",
    "start": "3233200",
    "end": "3239720"
  },
  {
    "text": "of requests handled stands out the throughput and the latency and also",
    "start": "3239720",
    "end": "3245319"
  },
  {
    "text": "something called the appex index which is a standard that could give you a number that tells you whether your users",
    "start": "3245319",
    "end": "3251480"
  },
  {
    "text": "are satisfied or not literally how many of your users got pissed off because they waited too long and and stuff you",
    "start": "3251480",
    "end": "3257799"
  },
  {
    "text": "can Wikipedia the appex index um logs as well you really want all this throughout",
    "start": "3257799",
    "end": "3264760"
  },
  {
    "text": "cluster you want to make sure that all your logs get channeled to some kind of data store so you can actually go and",
    "start": "3264760",
    "end": "3270559"
  },
  {
    "text": "analyze them later testing make sure you load tests um these are a bunch of",
    "start": "3270559",
    "end": "3275599"
  },
  {
    "text": "products that would actually help you out with that you know ganglia for monitoring naos New Relic uh Gomez for",
    "start": "3275599",
    "end": "3282160"
  },
  {
    "text": "performance monitoring J meter and grinder for low testing um and",
    "start": "3282160",
    "end": "3287400"
  },
  {
    "start": "3287000",
    "end": "3295000"
  },
  {
    "text": "such Disaster Recovery you know it happens sometimes",
    "start": "3287400",
    "end": "3294119"
  },
  {
    "text": "you know you wake up in the morning and nothing works so you want to be ready for this when disaster hits your goal is",
    "start": "3294119",
    "end": "3301640"
  },
  {
    "start": "3295000",
    "end": "3342000"
  },
  {
    "text": "actually to build to begin with a full tolerant system that's why you running a on on a on on a cluster that's why you",
    "start": "3301640",
    "end": "3306920"
  },
  {
    "text": "use so you depend on certain Technologies make those choices but in the case of of of a disaster you want to",
    "start": "3306920",
    "end": "3313240"
  },
  {
    "text": "recover and restore um as your service as soon as possible um you want to have",
    "start": "3313240",
    "end": "3319240"
  },
  {
    "text": "what is called a DRP or Disaster Recovery plan and you want to actually do drills literally sit down and say and",
    "start": "3319240",
    "end": "3326359"
  },
  {
    "text": "literally kill nodes and see what happens or how your system uh uh respond",
    "start": "3326359",
    "end": "3331680"
  },
  {
    "text": "do all go through all these like simulations um that is uh chaos monkey from uh from Netflix check it out it's",
    "start": "3331680",
    "end": "3338559"
  },
  {
    "text": "pretty interesting if you're running on U AWS scalability also is the ability to",
    "start": "3338559",
    "end": "3343920"
  },
  {
    "start": "3342000",
    "end": "3379000"
  },
  {
    "text": "scale team um in your hiring make sure that you hire the best people this is all stuff that everybody knows but you",
    "start": "3343920",
    "end": "3351400"
  },
  {
    "text": "are as strong as your weakest link um you want to make sure that when you hire these people they from the get-go they",
    "start": "3351400",
    "end": "3358240"
  },
  {
    "text": "walk in and they have a machine all of the set their Hardware is set up ready for them to work you can use T tools",
    "start": "3358240",
    "end": "3365000"
  },
  {
    "text": "like um um V vagrant and stuff that they have proper access U make sure that you",
    "start": "3365000",
    "end": "3371240"
  },
  {
    "text": "have a knowledge base just tell them what's the password for get or where how to get like an account um your",
    "start": "3371240",
    "end": "3377520"
  },
  {
    "text": "development process make sure that it's something that can scale and it's AI you have teams if you want to scale if you a",
    "start": "3377520",
    "end": "3384559"
  },
  {
    "start": "3379000",
    "end": "3452000"
  },
  {
    "text": "startup you want to become a organ a big organization you got to start thinking of that stuff early if you happen to be",
    "start": "3384559",
    "end": "3390960"
  },
  {
    "text": "the VP of engineering you happen to be um in a position when um of uh that that",
    "start": "3390960",
    "end": "3396480"
  },
  {
    "text": "you actually can can impact your organization in that level but um a good",
    "start": "3396480",
    "end": "3402240"
  },
  {
    "text": "way to do it is actually organize people in these pools you have like a pool of Engineers and pool of QA and a pool of",
    "start": "3402240",
    "end": "3409799"
  },
  {
    "text": "uh product owner and even a pool of architecture owners and then you assemble these team teams to work on",
    "start": "3409799",
    "end": "3416000"
  },
  {
    "text": "particular like projects you know pulling four developers one QA one architect and one product manager and",
    "start": "3416000",
    "end": "3423240"
  },
  {
    "text": "then throughout like a one Sprint and then you do something with them uh you keep your team small um and also you",
    "start": "3423240",
    "end": "3430319"
  },
  {
    "text": "want to give them ownership most importantly to their devops you each one",
    "start": "3430319",
    "end": "3435400"
  },
  {
    "text": "of those teams is responsible from not actually writing the code testing the code they actually deploying it to",
    "start": "3435400",
    "end": "3440520"
  },
  {
    "text": "production and you want to enable them give them data database access whatever is and they're the ones that would",
    "start": "3440520",
    "end": "3445839"
  },
  {
    "text": "babysit that particular piece of code until it graduates and becomes a part of the final production",
    "start": "3445839",
    "end": "3451119"
  },
  {
    "text": "code so the take home message um I'm probably running out of time right now I",
    "start": "3451119",
    "end": "3456280"
  },
  {
    "start": "3452000",
    "end": "3594000"
  },
  {
    "text": "have actually all right I have three minutes but the take-home message of this presentation is",
    "start": "3456280",
    "end": "3463000"
  },
  {
    "text": "that make sure that you address these concerns as early as possible um and",
    "start": "3463000",
    "end": "3469559"
  },
  {
    "text": "plan for capacity early and designed to scale from day one mean just they just",
    "start": "3469559",
    "end": "3476079"
  },
  {
    "text": "say all right instead of doing things this way I'm gonna spend an extra hour and do things like differently make sure",
    "start": "3476079",
    "end": "3482039"
  },
  {
    "text": "that you actually sit down and then determine how scalable is scalable for your own organization you know you can't",
    "start": "3482039",
    "end": "3489280"
  },
  {
    "text": "just sit there and over engineer A system that is capable of using of being used by 300 million people and",
    "start": "3489280",
    "end": "3498720"
  },
  {
    "text": "you're you have and your product is one that is in language X that is only",
    "start": "3498720",
    "end": "3505280"
  },
  {
    "text": "spoken by 200 people in the bush somewhere so that doesn't make any sense",
    "start": "3505280",
    "end": "3511359"
  },
  {
    "text": "that would we just like overdoing it um your scalability there is your ability",
    "start": "3511359",
    "end": "3516680"
  },
  {
    "text": "right a system there is able able to be evolved to be used by 300 people um do",
    "start": "3516680",
    "end": "3521960"
  },
  {
    "text": "not bite more than you can chew extremely important building scalable systems is a process you will incur",
    "start": "3521960",
    "end": "3529000"
  },
  {
    "text": "technical debt in fact you should incur technical debt you don't walk in there and do dup here and do this and do do",
    "start": "3529000",
    "end": "3534920"
  },
  {
    "text": "that you just do things just little by little you know as long as it's done in",
    "start": "3534920",
    "end": "3540559"
  },
  {
    "text": "a structured um and organized manner you want to also commit to a road map around",
    "start": "3540559",
    "end": "3546520"
  },
  {
    "text": "these ball necks and most importantly Guided by planned Fe the planned",
    "start": "3546520",
    "end": "3552000"
  },
  {
    "text": "business feature so you go and say my CPU my network and my storage uh which",
    "start": "3552000",
    "end": "3559079"
  },
  {
    "text": "one of these do I improve and make more scalable that is to be gu Guided by the next feature if your next feature is",
    "start": "3559079",
    "end": "3566200"
  },
  {
    "text": "some kind of weird query uh that your business needs um so you might want to",
    "start": "3566200",
    "end": "3572960"
  },
  {
    "text": "start thinking of actually doing some work and improving the data store bottleneck uh strategically right",
    "start": "3572960",
    "end": "3581160"
  },
  {
    "text": "so the and more importantly um learn from other people's experiences read the",
    "start": "3581160",
    "end": "3587280"
  },
  {
    "text": "tech blog of Netflix and Twitter and all of these people uh and learn from your own own mistakes um more importantly",
    "start": "3587280",
    "end": "3595440"
  },
  {
    "start": "3594000",
    "end": "3599000"
  },
  {
    "text": "so take it slow and you you'll get there um this is the scream The Smiling scream",
    "start": "3595440",
    "end": "3600839"
  },
  {
    "text": "I found it online but works smarter not harder you can't just do everything at once but as long as you do it in a way",
    "start": "3600839",
    "end": "3607599"
  },
  {
    "text": "that is gradual as long as you acknowledge your technical death that you'll be just",
    "start": "3607599",
    "end": "3612720"
  },
  {
    "text": "fine and thank you guys for being here enjoy the rest of the [Music]",
    "start": "3612720",
    "end": "3623030"
  },
  {
    "text": "conference",
    "start": "3623559",
    "end": "3626559"
  }
]