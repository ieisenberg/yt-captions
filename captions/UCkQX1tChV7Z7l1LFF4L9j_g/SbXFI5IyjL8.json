[
  {
    "text": "[Music]",
    "start": "3320",
    "end": "8769"
  },
  {
    "text": "[Music]",
    "start": "10950",
    "end": "16358"
  },
  {
    "text": "have you ever created data structures and put your data into those and actually thought about how much memory",
    "start": "16359",
    "end": "24160"
  },
  {
    "text": "do those take inside your application have you um thought what will happen if",
    "start": "24160",
    "end": "30840"
  },
  {
    "text": "you multiply that tiny little set or a list or whatever you created by hundreds",
    "start": "30840",
    "end": "37719"
  },
  {
    "text": "thousands or millions and how much memory that will take and how much",
    "start": "37719",
    "end": "42840"
  },
  {
    "text": "memory savings you can have well um this talk is about uh all that this talk will",
    "start": "42840",
    "end": "49399"
  },
  {
    "text": "be talking about uh performance and scale in Java and how you can handle",
    "start": "49399",
    "end": "55760"
  },
  {
    "text": "both do domain oriented objects and table tabular data structures in uh jvm in Java in general",
    "start": "55760",
    "end": "65960"
  },
  {
    "text": "um before we go any further I think it's a a good idea to introduce ourselves so",
    "start": "65960",
    "end": "71439"
  },
  {
    "text": "Donald you get to start thanks your so a little bit about myself myself so my name is Donald Rob I'm a managing",
    "start": "71439",
    "end": "78000"
  },
  {
    "text": "director and distinguished engineer at uh Bank of New York melon um I am the Creator project leading committer for",
    "start": "78000",
    "end": "84560"
  },
  {
    "text": "the eclipse collections project which is managed at the eclipse Foundation I'm a Java Champion uh I was a member of the",
    "start": "84560",
    "end": "90600"
  },
  {
    "text": "jsr 335 expert group that got lambdas and streams into Java 8 uh and I am a",
    "start": "90600",
    "end": "95880"
  },
  {
    "text": "contributing author to the 97 every 97 things every Java programmer should know",
    "start": "95880",
    "end": "102040"
  },
  {
    "text": "so and my name is R I am a chief engineer at a company uh in Norway alsoo",
    "start": "102040",
    "end": "108439"
  },
  {
    "text": "called computos uh I'm a Java Champion as well I'm also Google developer expert for cloud and uh I am a Java one",
    "start": "108439",
    "end": "116880"
  },
  {
    "text": "Rockstar and I also have been involved throughout times in different communities and I'm leading one of those",
    "start": "116880",
    "end": "123680"
  },
  {
    "text": "uh at the moment as well so um enough about that let's talk about uh a little",
    "start": "123680",
    "end": "129599"
  },
  {
    "text": "bit of History so rewind a tiny little bit back and talk about what was",
    "start": "129599",
    "end": "135519"
  },
  {
    "text": "happening in 2004 and why it's important yeah so back in 2004 to give some",
    "start": "135519",
    "end": "140920"
  },
  {
    "text": "context uh I was working on Financial Services Java application and had a problem it didn't fit into a 32 M memory",
    "start": "140920",
    "end": "147599"
  },
  {
    "text": "space and my mission was to try and figure fit six gigabytes of stuff into a",
    "start": "147599",
    "end": "152800"
  },
  {
    "text": "four gigabytes of space right um once I dug into looking at the problem it turns out there were millions of small list",
    "start": "152800",
    "end": "159319"
  },
  {
    "text": "set map instances roaming around that were created with default sized array and at the time the solution we came up",
    "start": "159319",
    "end": "165519"
  },
  {
    "text": "with was to actually roll our own um small siiz Java Collections and I felt a little bit for those that know the movie",
    "start": "165519",
    "end": "171519"
  },
  {
    "text": "The Martian I felt a bit like Mark Watney where like you know he said in the face of overwhelming odds I'm left",
    "start": "171519",
    "end": "176879"
  },
  {
    "text": "with only one option I'm going to have to science the stuff out of this so so ifast what yeah so fast forward to",
    "start": "176879",
    "end": "185000"
  },
  {
    "text": "you know after 2004 um when we um you know got 64-bit jvms with the jdk 1.4",
    "start": "185000",
    "end": "192440"
  },
  {
    "text": "release um we could now access more memory on our Hardware but the um you",
    "start": "192440",
    "end": "198799"
  },
  {
    "text": "know software problem accessible memory became a hardware problem right it's like you wind up with over a period of",
    "start": "198799",
    "end": "204920"
  },
  {
    "text": "Time how much um memory do you actually have to access right and uh really it's",
    "start": "204920",
    "end": "210400"
  },
  {
    "text": "like we W up you know pushing Hardware limits in some cases with like some of our Heap sizes so um compressed dupes",
    "start": "210400",
    "end": "217879"
  },
  {
    "text": "gave us a great uh benefit when that became available jdk 1.6 in 2006 um we",
    "start": "217879",
    "end": "222959"
  },
  {
    "text": "then got the ability to have 32-bit references instead of 64-bit references in our Heap um saved a you know",
    "start": "222959",
    "end": "229040"
  },
  {
    "text": "significant amount but there was this then problem where it's like we got back to a software problem again it's like",
    "start": "229040",
    "end": "234599"
  },
  {
    "text": "now we have this sweet spot for the 32-bit references we got to keep it below 32 gigs or there's this ability to",
    "start": "234599",
    "end": "242599"
  },
  {
    "text": "you know uh play around with like different shifting options where you could maybe get 32-bit references up to",
    "start": "242599",
    "end": "250120"
  },
  {
    "text": "64 bit gig but you'll get a different alignment so it might cost you 16 byte you know alignment versus 8 bite um so",
    "start": "250120",
    "end": "256799"
  },
  {
    "text": "you got to be careful with that but 32 gig winds up being the sweet spot so because of this we W up you know then",
    "start": "256799",
    "end": "262199"
  },
  {
    "text": "rolling our own solutions for our un mutable um sets maps and and lists and uh also built eventually our own",
    "start": "262199",
    "end": "268800"
  },
  {
    "text": "primitive collection the whole goal being that we wanted to reduce the total memory footprint of our data structures",
    "start": "268800",
    "end": "274840"
  },
  {
    "text": "and make sure our data was taking the most space not the data structures so then we can talk about the problem today",
    "start": "274840",
    "end": "281440"
  },
  {
    "text": "the problem today is uh kind of I mean I called it simulated problem today because we have actually created a",
    "start": "281440",
    "end": "287800"
  },
  {
    "text": "little bit of that problem because now you have 64-bit memories you know uh",
    "start": "287800",
    "end": "293080"
  },
  {
    "text": "it's a systems you have a bunch of memory and you have everything is nice and shiny right but the kind of the",
    "start": "293080",
    "end": "299240"
  },
  {
    "text": "problem is still there because you still need to Pro process more and more uh data and you would like to do it in a",
    "start": "299240",
    "end": "305919"
  },
  {
    "text": "much more much more efficient and the most efficient way so what we have now",
    "start": "305919",
    "end": "312400"
  },
  {
    "text": "what we've actually tried to create this problem is that we've thought of a uh data put into a CSV file that we would",
    "start": "312400",
    "end": "320039"
  },
  {
    "text": "like to read in and since we do quite a bit of conferences both of us uh we",
    "start": "320039",
    "end": "325160"
  },
  {
    "text": "decided to go with conference data so I'll show you the data and the what consists of on the next slide but for",
    "start": "325160",
    "end": "331639"
  },
  {
    "text": "now we just want to say that you know we need to read in data we need to process we need to do something with that data",
    "start": "331639",
    "end": "338280"
  },
  {
    "text": "and uh we want to do it in the most efficient way so how can we do that in Java what kind of",
    "start": "338280",
    "end": "345240"
  },
  {
    "text": "uh uh you know decisions we can make to make it more efficient how uh we should",
    "start": "345240",
    "end": "351440"
  },
  {
    "text": "think about our data should we think of uh of it as a rows of data Columns of",
    "start": "351440",
    "end": "356759"
  },
  {
    "text": "data which one is better H who would you know we'll see if you don't know you'll",
    "start": "356759",
    "end": "362199"
  },
  {
    "text": "figure out so um and if you do well see if if we ended up with the same",
    "start": "362199",
    "end": "367759"
  },
  {
    "text": "conclusions uh and also what libraries that we'll be looking at so we'll be looking at three different ways of doing",
    "start": "367759",
    "end": "373840"
  },
  {
    "text": "stuff we'll be looking at uh the batteries included versions version of",
    "start": "373840",
    "end": "378960"
  },
  {
    "text": "java so Java Collections that come with uh Java comes with uh we'll also be",
    "start": "378960",
    "end": "384599"
  },
  {
    "text": "looking into Eclipse collections uh a library that uh Donald uh started and",
    "start": "384599",
    "end": "392919"
  },
  {
    "text": "you know bunch of people have been contributing and and and creating uh",
    "start": "392919",
    "end": "398960"
  },
  {
    "text": "evolving and also we'll be talking a little bit about or quite a bit actually about uh a uh library that was built on",
    "start": "398960",
    "end": "406240"
  },
  {
    "text": "top of eclipse collections created by another developer Vlad uh called Data",
    "start": "406240",
    "end": "412120"
  },
  {
    "text": "frame EC so if you can imagine EC is actually standing for E clipse collections um so this talk will be",
    "start": "412120",
    "end": "421400"
  },
  {
    "text": "focusing on memory and memory efficiency uh and the strategies and techniques",
    "start": "421400",
    "end": "427520"
  },
  {
    "text": "connected to that we'll not be talking about other kind of performance tuning and all those things but um um you know",
    "start": "427520",
    "end": "435080"
  },
  {
    "text": "we we can always talk about that in another talk or uh after the talk or",
    "start": "435080",
    "end": "441080"
  },
  {
    "text": "offline or whatever that might be so let's talk about data the data the way",
    "start": "441080",
    "end": "446280"
  },
  {
    "text": "it looks it's well it's a bunch of columns like typically what you would expect from your data it has an event",
    "start": "446280",
    "end": "452479"
  },
  {
    "text": "name it has a country where that event uh exists or will take place uh it has a",
    "start": "452479",
    "end": "458280"
  },
  {
    "text": "city where it will take place it has two sets of date objects or dates uh where",
    "start": "458280",
    "end": "463720"
  },
  {
    "text": "we have a start date and end date it also has some kind of indication of uh",
    "start": "463720",
    "end": "469000"
  },
  {
    "text": "What uh session types does it have so a list of um elements so it might be",
    "start": "469000",
    "end": "474840"
  },
  {
    "text": "lightning talks regular talks or workshops and we have some integer values or typically values that would be",
    "start": "474840",
    "end": "482000"
  },
  {
    "text": "repres represented by integers number of tracks or number of sessions or maybe",
    "start": "482000",
    "end": "487199"
  },
  {
    "text": "even number of speakers or a cost so how much that would cost um to create all that uh we have a",
    "start": "487199",
    "end": "496360"
  },
  {
    "text": "uh a script or Java class that randomly generates data and then we can create and generate that in a well kind of",
    "start": "496360",
    "end": "504240"
  },
  {
    "text": "deterministic way where we can just uh randomly generate a number of uh",
    "start": "504240",
    "end": "511240"
  },
  {
    "text": "randomly random strings uh going as names between a certain length of a",
    "start": "511240",
    "end": "517959"
  },
  {
    "text": "string so it can be a little bit smaller a little bit bigger but you know roughly the same size and Rand randomly",
    "start": "517959",
    "end": "523240"
  },
  {
    "text": "generated uh same would goes with the countries we have a set of countries that we pull from and we we're going to",
    "start": "523240",
    "end": "528959"
  },
  {
    "text": "use those countries same goes with the Cs uh we also have uh dates dates are in",
    "start": "528959",
    "end": "535760"
  },
  {
    "text": "our data set just for our testing purposes we can of limited that to be",
    "start": "535760",
    "end": "540880"
  },
  {
    "text": "all possible dates within 2023 and uh also session types and um",
    "start": "540880",
    "end": "548279"
  },
  {
    "text": "you can choose between those three that you can see there it can be different variations of those and different number",
    "start": "548279",
    "end": "553560"
  },
  {
    "text": "of those um and also yeah well the other numbers are going to be kind of random",
    "start": "553560",
    "end": "559160"
  },
  {
    "text": "within a certain range right um we've generated it in different shapes and",
    "start": "559160",
    "end": "565040"
  },
  {
    "text": "sizes we generated it for like one million rows that takes roughly 90 Megs",
    "start": "565040",
    "end": "570200"
  },
  {
    "text": "on dis we have a 10 million one which is well 10 times bigger so roughly 900 Megs",
    "start": "570200",
    "end": "576800"
  },
  {
    "text": "uh and we also have 25 million rows actually we have 52 but that's that's",
    "start": "576800",
    "end": "582079"
  },
  {
    "text": "that's that's spoiler uh so 25 million uh which takes roughly 2.2 gigs on dis",
    "start": "582079",
    "end": "589160"
  },
  {
    "text": "right so measuring memory costs so how do we do that Donald so real quick and I",
    "start": "589160",
    "end": "595839"
  },
  {
    "text": "guess this is a practical thing to walk away from this talk with is um um you know there's a tool at the open jdk",
    "start": "595839",
    "end": "601279"
  },
  {
    "text": "project uh called Java object layout you also referred to as jaw um so it's a",
    "start": "601279",
    "end": "606680"
  },
  {
    "text": "great tool for analyzing um the object layout schemes of various objects and",
    "start": "606680",
    "end": "612320"
  },
  {
    "text": "you can you know it's very precise in terms of you can look at individual objects and look at their cost and layout so you've got the maven",
    "start": "612320",
    "end": "618600"
  },
  {
    "text": "dependency here um you can go check that out also like there's a nice article here from Bale dung talking about memory",
    "start": "618600",
    "end": "625200"
  },
  {
    "text": "layout of objects and actually talks about jaw and more depth um there's also a overflow question which I actually",
    "start": "625200",
    "end": "630760"
  },
  {
    "text": "asked and answered which was in regards to whether or not jaw works with Java records it does um and pretty much it",
    "start": "630760",
    "end": "637560"
  },
  {
    "text": "requires using a VM flag um when you're running uh with Java 14 or above if you want to use records you got to set this",
    "start": "637560",
    "end": "643440"
  },
  {
    "text": "magic field offset to true so and we can talk a bit about you know what memory considerations we're going to look at so",
    "start": "643440",
    "end": "650880"
  },
  {
    "text": "and memory considerations there are actually quite a few things right we would talk about boxed versus primitive",
    "start": "650880",
    "end": "657519"
  },
  {
    "text": "I'm going to just leave the I'm just just going to you know list them up and then leave the explanation of that as a",
    "start": "657519",
    "end": "664079"
  },
  {
    "text": "kind of cliffhanger or you know whatever uh taste for for listening to the rest",
    "start": "664079",
    "end": "669760"
  },
  {
    "text": "of the talk so box versus primitive is a thing that we'll be thinking about and we have been thinking about and we'll be",
    "start": "669760",
    "end": "676200"
  },
  {
    "text": "talking about uh also we'll be talking quite a bit about data structures that are mutable versus",
    "start": "676200",
    "end": "682560"
  },
  {
    "text": "immutable uh we'll be talking about data pooling and what that actually means and",
    "start": "682560",
    "end": "688160"
  },
  {
    "text": "what results it will give you um we'll also talk about way of thinking of data",
    "start": "688160",
    "end": "694959"
  },
  {
    "text": "so do you want to think about it in a uh row based uh way so like you typically",
    "start": "694959",
    "end": "700360"
  },
  {
    "text": "think about your data in a I don't know let's say relational databases and stuff",
    "start": "700360",
    "end": "705399"
  },
  {
    "text": "like row and row another row and another row of data versus column based so",
    "start": "705399",
    "end": "710600"
  },
  {
    "text": "that's another thing and we'll also be talking about about how memory can be",
    "start": "710600",
    "end": "716160"
  },
  {
    "text": "improved or will be improved in the future by the things that are planned to",
    "start": "716160",
    "end": "721959"
  },
  {
    "text": "be a part to become a part of java as well so um memory cost boxed versus",
    "start": "721959",
    "end": "730320"
  },
  {
    "text": "primitive take it away Donald yeah so we're looking at two classes here um and there's you know some giveaways but on",
    "start": "730320",
    "end": "736240"
  },
  {
    "text": "the left you got The minmax Primitives box and you've got a set of fields which represent the Min and Max values of",
    "start": "736240",
    "end": "741279"
  },
  {
    "text": "different uh um you know types and on the right you've got something that looks you know very similar different",
    "start": "741279",
    "end": "748519"
  },
  {
    "text": "class name all the field names are the same um and the primary difference is uh the type on the left we've got the type",
    "start": "748519",
    "end": "755120"
  },
  {
    "text": "with the uppercase letter on the type you on the right the type with the lowercase letter so question for you to",
    "start": "755120",
    "end": "761519"
  },
  {
    "text": "think about real quickly is what is the difference going to be between these two classes specifically from a memory uh",
    "start": "761519",
    "end": "767920"
  },
  {
    "text": "footprint perspective so so the solution coming up I mean you can pause now",
    "start": "767920",
    "end": "774000"
  },
  {
    "text": "solution is coming up in three two one okay so we're going to do is we're",
    "start": "774000",
    "end": "779120"
  },
  {
    "text": "we're using jaw here to basically print out the memory footprint of these two objects and you can see we're using this thing called graph layout parse instance",
    "start": "779120",
    "end": "785920"
  },
  {
    "text": "we give it an instance of minmax Primitives box and we print out its footprint to system out and then we do",
    "start": "785920",
    "end": "791600"
  },
  {
    "text": "the same thing with minmax Primitives plane and print out its footprint and what you see here is so for the for the",
    "start": "791600",
    "end": "797920"
  },
  {
    "text": "type that we had on the left that had the uppercase um you know type names like bu bite character all with",
    "start": "797920",
    "end": "803680"
  },
  {
    "text": "uppercase what you'll see is that we actually um created in memory 17 different objects",
    "start": "803680",
    "end": "809760"
  },
  {
    "text": "and pretty much it was like the object that we wanted the minmax pron as box and we wound up creating two objects for",
    "start": "809760",
    "end": "815880"
  },
  {
    "text": "each of the minmax values um of the these box types um so in total 17",
    "start": "815880",
    "end": "821600"
  },
  {
    "text": "objects and for a total of 368 bytes of RAM for that single class and what you",
    "start": "821600",
    "end": "827000"
  },
  {
    "text": "can see is like um in the middle you see the average you're seeing the the cost of each of these box types which is a",
    "start": "827000",
    "end": "833839"
  },
  {
    "text": "useful metric for you to understand when you're using these box types in memory what what are they actually take in",
    "start": "833839",
    "end": "839399"
  },
  {
    "text": "memory to use them right and in the max minmax Primitives box as well you see it takes 80 bytes itself that 80 bytes is",
    "start": "839399",
    "end": "846320"
  },
  {
    "text": "counting up the four byte references plus the object header cost right so in addition to the cost of each of these",
    "start": "846320",
    "end": "852959"
  },
  {
    "text": "objects you've got the reference to the object as well contain in the main object so 368 now if we look then at",
    "start": "852959",
    "end": "859560"
  },
  {
    "text": "minmax Primitives plane you'll see we get one total object so we basically get",
    "start": "859560",
    "end": "865120"
  },
  {
    "text": "a savings total of like we don't have to create 16 extra objects we just have the Primitive values and the total cost of",
    "start": "865120",
    "end": "871560"
  },
  {
    "text": "that object is less as well eight is eight bytes less than the you know cost of The minmax Primitives boxed minus",
    "start": "871560",
    "end": "878360"
  },
  {
    "text": "also then the 16 extra boxed wrappers that we get so our recommendation here",
    "start": "878360",
    "end": "883519"
  },
  {
    "text": "is pretty simple don't box primitive values right it's like understand what the cost of doing that is now",
    "start": "883519",
    "end": "889800"
  },
  {
    "text": "unfortunately because Java has autoboxing in it that can be a useful feature but it's also you know somewhat",
    "start": "889800",
    "end": "894920"
  },
  {
    "text": "evil and that what it's doing is silently creating um stuff on the Heap for you taking up memory right so using",
    "start": "894920",
    "end": "901880"
  },
  {
    "text": "autoboxing you may actually be hiding memory bloat so now we're going to actually you know take a look at um uh",
    "start": "901880",
    "end": "908519"
  },
  {
    "text": "boxing different data structures right so box versus primitive data structures as well as an alternate data structure",
    "start": "908519",
    "end": "913959"
  },
  {
    "text": "in here as well so here what we've got is um we're uh creating three different",
    "start": "913959",
    "end": "919120"
  },
  {
    "text": "sets one is Java util has set we're going to then create a unified set from Eclipse collections using and what it is",
    "start": "919120",
    "end": "925199"
  },
  {
    "text": "basically it's going to be a set of numbers from 1 to 10 um so the first two are boxed right they you can see they",
    "start": "925199",
    "end": "930560"
  },
  {
    "text": "have hash set of integer and mutable set of integer the third one's not boxed it's primitive right so here we're going",
    "start": "930560",
    "end": "936319"
  },
  {
    "text": "to basically compare two set um implementations and then A Primitive set",
    "start": "936319",
    "end": "941880"
  },
  {
    "text": "implementation using jaw doing the same thing just parsing each one and doing their footprint so what do you think the",
    "start": "941880",
    "end": "947079"
  },
  {
    "text": "difference is going to be between these three classes right so again the answer",
    "start": "947079",
    "end": "952279"
  },
  {
    "text": "is coming in three two one t Okay so looking at hashset um what you'll see is",
    "start": "952279",
    "end": "959399"
  },
  {
    "text": "like we wind up actually creating 24 objects here right now 10 of the objects are the boxed integers right and they're",
    "start": "959399",
    "end": "965440"
  },
  {
    "text": "taking 160 bytes but we have the hash set itself and then contained within a hash set is a hashmap and you'll see",
    "start": "965440",
    "end": "972560"
  },
  {
    "text": "like within a hashmap you've got an array of this hashmap um dollar nodes and you've got 10 of these hashmap",
    "start": "972560",
    "end": "979639"
  },
  {
    "text": "dollar nodes and these are basically the map entry objects contained inside of the map now the interesting thing is",
    "start": "979639",
    "end": "985079"
  },
  {
    "text": "like a set containing a map winds up you know carrying along with it all this extra infrastructure to support its",
    "start": "985079",
    "end": "992040"
  },
  {
    "text": "setness right um so um if you then compare it to unified set from Eclipse",
    "start": "992040",
    "end": "997959"
  },
  {
    "text": "collections so Eclipse collections doesn't contain the set for Eclipse collections doesn't contain a hashmap so",
    "start": "997959",
    "end": "1003120"
  },
  {
    "text": "you immediately cut the number of objects that you're creating in half right so we wind up with an array of",
    "start": "1003120",
    "end": "1008360"
  },
  {
    "text": "object we still have the 10 integer objects we can't get rid of those because this is boxing happening um but",
    "start": "1008360",
    "end": "1013480"
  },
  {
    "text": "then we've got um the unified set cost itself right so big difference there",
    "start": "1013480",
    "end": "1018519"
  },
  {
    "text": "there right from 640 bytes down to 272 right so more than you know cutting in half now um the third thing we can look",
    "start": "1018519",
    "end": "1026839"
  },
  {
    "text": "at is the Primitive set so in Tash set right and in Tash set what you can see is we get rid of the integer object so",
    "start": "1026839",
    "end": "1031959"
  },
  {
    "text": "that's 160 bytes gone right we have an interray which is that um square bracket",
    "start": "1031959",
    "end": "1037240"
  },
  {
    "text": "I and then we have the cost of intach set itself which is 40 bytes so in total it's 120 bytes so from unified set to",
    "start": "1037240",
    "end": "1043798"
  },
  {
    "text": "the intach set you can see it's a tremendous savings right once again more than cutting in half in terms of uh",
    "start": "1043799",
    "end": "1049520"
  },
  {
    "text": "memory so more than half twice right yeah and so recommendation here um avoid",
    "start": "1049520",
    "end": "1056840"
  },
  {
    "text": "using Java util hash set unless you're using it a place where it's you're going to create it and then get rid of it don't hold on to it long term because",
    "start": "1056840",
    "end": "1062960"
  },
  {
    "text": "it's wasting it's a lot of cost um for the value it's providing of being a set so it's a Memory hog um but uh um also",
    "start": "1062960",
    "end": "1071320"
  },
  {
    "text": "remember don't box primitive values if you can right Auto boxing's evil right you can see we get that 160 extra bytes",
    "start": "1071320",
    "end": "1077280"
  },
  {
    "text": "for integer objects when they're just int values they should be four bytes each right um so it's hiding bloat in",
    "start": "1077280",
    "end": "1083159"
  },
  {
    "text": "your heat potentially so um so next thing we're going to look at immutable mutable versus immutable so um here",
    "start": "1083159",
    "end": "1091000"
  },
  {
    "text": "we're going to compare two things they're both in the jdk we're going to compare hash set holding on to two",
    "start": "1091000",
    "end": "1096159"
  },
  {
    "text": "integer values one and two and we're going to compare it to the immutable set in the jdk so if you use set. of or in",
    "start": "1096159",
    "end": "1103960"
  },
  {
    "text": "this case we're going to create a copy of the hash set to save some code so we do copy of and what this is going to do",
    "start": "1103960",
    "end": "1109760"
  },
  {
    "text": "is create an immutable set for us right and then we're going to compare their two Footprints um and if you look here's",
    "start": "1109760",
    "end": "1116039"
  },
  {
    "text": "the thing you just saw on the previous slide you've got the footprint now this is only holding on to two integers now those cost then 32 bytes but then you've",
    "start": "1116039",
    "end": "1123520"
  },
  {
    "text": "got the cost of the data structure itself so for hash set with two elements you can see it's 272 bytes compared to",
    "start": "1123520",
    "end": "1130600"
  },
  {
    "text": "this special type called set one2 um which is containing it's an in class in IM mutable collections um and all you",
    "start": "1130600",
    "end": "1137480"
  },
  {
    "text": "have is the two integers 32 bytes and then 24 bytes for the set one two for a",
    "start": "1137480",
    "end": "1142720"
  },
  {
    "text": "total of 56 bytes right so um a real tremendous savings right in the mutable",
    "start": "1142720",
    "end": "1148360"
  },
  {
    "text": "range so once again avoid util Java util hash set if you can um and",
    "start": "1148360",
    "end": "1153880"
  },
  {
    "text": "recommendation here is like if you can like you know when you're loading data up if you can trim it at the end using",
    "start": "1153880",
    "end": "1159200"
  },
  {
    "text": "immutable um data structures you can save a lot of memory that way so I would say load mut mutable because it's going",
    "start": "1159200",
    "end": "1164240"
  },
  {
    "text": "to be faster performance-wise to you know grow something that's mutable but at the end if you can trim and you know",
    "start": "1164240",
    "end": "1170440"
  },
  {
    "text": "wind up with the just the memory require going to an immutable version of The Collection is very helpful so and we can",
    "start": "1170440",
    "end": "1177320"
  },
  {
    "text": "talk about sweating the small stuff so we looked at like a set in a two element range so it's like well what other",
    "start": "1177320",
    "end": "1182559"
  },
  {
    "text": "optimizations can happen in that small element range we're going to look at the a mutable list um space and in in the",
    "start": "1182559",
    "end": "1188679"
  },
  {
    "text": "jdk um there winds up being two um optimized immutable things there's list",
    "start": "1188679",
    "end": "1193919"
  },
  {
    "text": "one two which covers basically one element and Two element um and then there's list n which is basically a",
    "start": "1193919",
    "end": "1199880"
  },
  {
    "text": "going to be a trimmed array to the number of elements that you have um and uh you can see comparing jdk to Eclipse",
    "start": "1199880",
    "end": "1207200"
  },
  {
    "text": "collections this is what the differences look up to size um 11 from size zero to",
    "start": "1207200",
    "end": "1213280"
  },
  {
    "text": "11 and obviously like you're looking at memory and bytes so the smaller the better and you can see there's a a",
    "start": "1213280",
    "end": "1218760"
  },
  {
    "text": "reasonable gap between you know at each level between um jdk and Eclipse collections now the reason is like",
    "start": "1218760",
    "end": "1225520"
  },
  {
    "text": "Eclipse collections actually has named types from zero so at zero um even though it looks like jdk you know costs",
    "start": "1225520",
    "end": "1232360"
  },
  {
    "text": "a lot more than CLI collections here it's completely meaningless because empty winds up there's only one in the",
    "start": "1232360",
    "end": "1238480"
  },
  {
    "text": "jvm right you actually have a Singleton instance of that so you only ever create one there's no multiple well the multiple forward is one it'll never be",
    "start": "1238480",
    "end": "1245520"
  },
  {
    "text": "more than that right whereas the other ones you're going to wind up with a multiple effect depending on how many you have if you have millions of them",
    "start": "1245520",
    "end": "1251280"
  },
  {
    "text": "that's where like savings can add up right so Eclipse collections actually has named types from you know Singleton",
    "start": "1251280",
    "end": "1257679"
  },
  {
    "text": "all the way to to DEC Capleton and everything in between and then at 11 it switches to the array base which is where then jdk and Eclipse collections",
    "start": "1257679",
    "end": "1264880"
  },
  {
    "text": "get very close right in terms of the the cost right now there's a thing to be",
    "start": "1264880",
    "end": "1270480"
  },
  {
    "text": "aware of um in terms of with this memory savings that you get there is potentially a tradeoff of performance",
    "start": "1270480",
    "end": "1277440"
  },
  {
    "text": "right so the jdk core jdk team made sure that um you know they limited the number",
    "start": "1277440",
    "end": "1283200"
  },
  {
    "text": "of classes they created to try and reduce the possibility of uh megamorph call site sneak into your code and when",
    "start": "1283200",
    "end": "1289720"
  },
  {
    "text": "you have a call site that is bimorphic or monomorphic it's very fast right and",
    "start": "1289720",
    "end": "1295200"
  },
  {
    "text": "once you enter into the range of monomorphic I'm sorry megamorph where you've got let's say um three or more",
    "start": "1295200",
    "end": "1300840"
  },
  {
    "text": "implementations of an interface you wind up with a virtual um look up and Method call and that actually gives you a",
    "start": "1300840",
    "end": "1307520"
  },
  {
    "text": "significant potential performance hit right so you got to be aware of like what's more important to you is it",
    "start": "1307520",
    "end": "1313000"
  },
  {
    "text": "memory or is it um you know performance right and um I would say in that case then making sure you understand your",
    "start": "1313000",
    "end": "1320120"
  },
  {
    "text": "performance profile and where you have potential bottlenecks you know just be aware of the trade-offs right where you",
    "start": "1320120",
    "end": "1325520"
  },
  {
    "text": "can you recall the in 2004 I had the problem of I need to you know shave as much memory as I could to fit into",
    "start": "1325520",
    "end": "1331360"
  },
  {
    "text": "32-minute memory space and that's where the design decision was kind of like driving having all of these smaller um",
    "start": "1331360",
    "end": "1338039"
  },
  {
    "text": "types available so let's uh I guess go on and talk about exploring the three libraries we looked at yes so we kind of",
    "start": "1338039",
    "end": "1345799"
  },
  {
    "text": "talked quite a bit about how should we present that to you and we've mentioned already all of them right we talked",
    "start": "1345799",
    "end": "1352559"
  },
  {
    "text": "about Javas streams talked about the CLI selections we talked about the data frame uh but you know we thought of what",
    "start": "1352559",
    "end": "1358840"
  },
  {
    "text": "is the best way of actually introducing them and actually explaining to them so if you've used or played or seen Legos",
    "start": "1358840",
    "end": "1365880"
  },
  {
    "text": "before you can have seen them in uh lots of different shapes and sizes and different things you can build them uh",
    "start": "1365880",
    "end": "1373840"
  },
  {
    "text": "you know in in into things but uh in general there you will see three",
    "start": "1373840",
    "end": "1378960"
  },
  {
    "text": "different types of sets so you will have the basic ones that are consisting on",
    "start": "1378960",
    "end": "1384400"
  },
  {
    "text": "more of a more generic pieces that's kind of java streams what it is and also",
    "start": "1384400",
    "end": "1389679"
  },
  {
    "text": "notice a little bit of as a fun we actually looked at the age limits for those sets that we have see on the",
    "start": "1389679",
    "end": "1395760"
  },
  {
    "text": "picture here and kind of is a fun comparison also for for for us as a programmers so think of that as well of",
    "start": "1395760",
    "end": "1403440"
  },
  {
    "text": "uh I don't know call it maturity or experience or whatever but it doesn't I mean it doesn't really translate to that",
    "start": "1403440",
    "end": "1409240"
  },
  {
    "text": "obviously but it's it's a little fun thing that made us kind of GLE a little bit so JV streams is a basic building",
    "start": "1409240",
    "end": "1416360"
  },
  {
    "text": "blocks it has some uh quite a bit of assembly required to make it look like a car but it's it's also set standard set",
    "start": "1416360",
    "end": "1424799"
  },
  {
    "text": "of things that you can build into a house or an airplane or a boat or something right most of the things",
    "start": "1424799",
    "end": "1430520"
  },
  {
    "text": "anyway uh but you know uh with when with Java streams it's the same same assembly some assembly is required uh more of a",
    "start": "1430520",
    "end": "1439080"
  },
  {
    "text": "low-level control so you can actually build your own stuff uh in a different way uh ways and also it has the Java",
    "start": "1439080",
    "end": "1447559"
  },
  {
    "text": "stream has this row based approach to uh the main objects so you have the main objects and you have kind of row based",
    "start": "1447559",
    "end": "1454440"
  },
  {
    "text": "approach to those right you put into an object bunch of attributes and they kind",
    "start": "1454440",
    "end": "1459600"
  },
  {
    "text": "of represent a row in a database uh Eclipse collections is a little bit different right so it's more",
    "start": "1459600",
    "end": "1465320"
  },
  {
    "text": "closer to what you see in Lego Technic where you have uh all the pieces from",
    "start": "1465320",
    "end": "1471039"
  },
  {
    "text": "the standard and basic stuff but also has an extra extra pieces that are very",
    "start": "1471039",
    "end": "1476360"
  },
  {
    "text": "specialized to build that particular thing a particular set of cogs to do a",
    "start": "1476360",
    "end": "1481840"
  },
  {
    "text": "transmission box for a car or a tiny little thing to do the grill on a car right it doesn't it's not the standard",
    "start": "1481840",
    "end": "1487919"
  },
  {
    "text": "you can't use it on many other things but you know it's the same thing with the clips collection it has more",
    "start": "1487919",
    "end": "1492960"
  },
  {
    "text": "specialized building blocks but it's still compatible with the the the the basic one uh and it's also optimized for",
    "start": "1492960",
    "end": "1501720"
  },
  {
    "text": "performance so you know it's optimized for building that particular car",
    "start": "1501720",
    "end": "1507399"
  },
  {
    "text": "obviously uh and it still has the row based approach to the main object you still put things into objects and you",
    "start": "1507399",
    "end": "1514000"
  },
  {
    "text": "still handle them as a bunch of attributes inside an object uh now uh",
    "start": "1514000",
    "end": "1519360"
  },
  {
    "text": "data frame EC is a little bit different so it has a bit more of approach to",
    "start": "1519360",
    "end": "1524440"
  },
  {
    "text": "similar to LEGO Mindstorms where it has a smart kind of thing in the middle",
    "start": "1524440",
    "end": "1529559"
  },
  {
    "text": "there that can be programmed to do things the way I like to think about uh",
    "start": "1529559",
    "end": "1535080"
  },
  {
    "text": "data frame EC which is probably not exactly correct way but it still helps me to build a mental model is think of",
    "start": "1535080",
    "end": "1541200"
  },
  {
    "text": "it as a spreadsheet where you have both data but also smartness and filtering that you can build into a spreadsheet",
    "start": "1541200",
    "end": "1548200"
  },
  {
    "text": "that you typically would have on your uh computer whatever program you're using for that um so here it's like more",
    "start": "1548200",
    "end": "1554919"
  },
  {
    "text": "specialized building Pro blocks even more specialized they're still compatible with the two",
    "start": "1554919",
    "end": "1561640"
  },
  {
    "text": "previous uh libraries or versions of doing things uh it it is much more higher level approach uh but it also can",
    "start": "1561640",
    "end": "1569880"
  },
  {
    "text": "be programmed in a more specific way to do specific tasks um it simplifies some of the tasks",
    "start": "1569880",
    "end": "1577600"
  },
  {
    "text": "that can be done by the other ones but are kind of a bit more tedious uh and",
    "start": "1577600",
    "end": "1583399"
  },
  {
    "text": "this one actually has a different kind of approach it has a column based approach uh to uh to the tabular data",
    "start": "1583399",
    "end": "1590320"
  },
  {
    "text": "structure so now we're looking at data uh in columns instead of looking at uh",
    "start": "1590320",
    "end": "1595360"
  },
  {
    "text": "in rows um so the conference Explorer class",
    "start": "1595360",
    "end": "1600480"
  },
  {
    "text": "that we had to implement to read all that data that we've shown you earlier uh it uh in most of the cases at least",
    "start": "1600480",
    "end": "1606880"
  },
  {
    "text": "two of the three cases that we've uh been playing around with uh for Java",
    "start": "1606880",
    "end": "1612360"
  },
  {
    "text": "streams and Eclipse collections um remember Rob based approach so that is a",
    "start": "1612360",
    "end": "1618279"
  },
  {
    "text": "record uh that's implemented as a record where we have a bunch of attributes that we put into that and then we create for",
    "start": "1618279",
    "end": "1625320"
  },
  {
    "text": "Java streams we create a set of uh conferences in countries for Eclipse Corrections we do a specifi specific uh",
    "start": "1625320",
    "end": "1633240"
  },
  {
    "text": "type of a set which is a mutable set which is Eclipse collections specific",
    "start": "1633240",
    "end": "1638600"
  },
  {
    "text": "kind of object uh of again set conferences and countries uh for data",
    "start": "1638600",
    "end": "1643919"
  },
  {
    "text": "frame you see things are a little bit different so here we actually have a data frame objects for all of those",
    "start": "1643919",
    "end": "1649159"
  },
  {
    "text": "things so now we have a data frame for conferences data frame for country codes and all those kind of things and you see",
    "start": "1649159",
    "end": "1655880"
  },
  {
    "text": "it's not countries it's actually country codes because all the countries and everything it's it's inside the",
    "start": "1655880",
    "end": "1661240"
  },
  {
    "text": "conference uh conference's data frame uh country codes we need for other things to generate some other fun things don't",
    "start": "1661240",
    "end": "1669120"
  },
  {
    "text": "let's don't get into that but um actually one thing I should probably mention if you want to know about apis",
    "start": "1669120",
    "end": "1676440"
  },
  {
    "text": "and all this how it's been been implemented we've done a few talks earlier this year at devus and devox",
    "start": "1676440",
    "end": "1682279"
  },
  {
    "text": "gree where you can actually uh see at the same data see the same code but where we talk more about using the apis",
    "start": "1682279",
    "end": "1689039"
  },
  {
    "text": "and how you can use it in different settings so the question here is what would it cost to load one million of",
    "start": "1689039",
    "end": "1696240"
  },
  {
    "text": "conferences into data structures like this let's find out uh first thing we",
    "start": "1696240",
    "end": "1701799"
  },
  {
    "text": "would like to see is uh how it behaves when you do uh a type of a library and",
    "start": "1701799",
    "end": "1709679"
  },
  {
    "text": "the type of data structure so a type of Library like Java or Eclipse collections",
    "start": "1709679",
    "end": "1715120"
  },
  {
    "text": "or data frame and for each of them we'll kind of try to see for mutable and immutable data structures and you can",
    "start": "1715120",
    "end": "1722240"
  },
  {
    "text": "see the memory uh footprint of mutable structures are much much much bigger uh",
    "start": "1722240",
    "end": "1730080"
  },
  {
    "text": "at least for for Java sets that gets smaller Java set is exactly the set we",
    "start": "1730080",
    "end": "1735480"
  },
  {
    "text": "kind of warned you about in the previous slides that's Java util hash set and you're seeing the extra cost there how it translates as you scale up in terms",
    "start": "1735480",
    "end": "1741840"
  },
  {
    "text": "of the number of instances but still I mean even even for the uh other ones it's still higher",
    "start": "1741840",
    "end": "1748720"
  },
  {
    "text": "right and this is for 1 million conferences it's not for 25 or 50 or whatever and also the the funny thing is",
    "start": "1748720",
    "end": "1755039"
  },
  {
    "text": "that you can also see that the data frame ec1 is uh is well obviously",
    "start": "1755039",
    "end": "1760399"
  },
  {
    "text": "doesn't have the mutable version but immutable version of that is uh even half the size and if you wonder why that",
    "start": "1760399",
    "end": "1767880"
  },
  {
    "text": "we'll see that in a bit a little bit so that's we're going to keep that and leave that as a question so why are the",
    "start": "1767880",
    "end": "1775919"
  },
  {
    "text": "collection Alternatives comparing so badly to data frame EC ha well we'll see",
    "start": "1775919",
    "end": "1781640"
  },
  {
    "text": "about that um well kind",
    "start": "1781640",
    "end": "1788080"
  },
  {
    "text": "of this is the answer I mean not really kind of it's actually is uh one of the",
    "start": "1788080",
    "end": "1793480"
  },
  {
    "text": "main answers and the answer is the uh something called pooling if you haven't heard of pulling we'll explain what it",
    "start": "1793480",
    "end": "1800440"
  },
  {
    "text": "is in the next slide so just bear with me for a little second while we go through and look at that so now we've",
    "start": "1800440",
    "end": "1807320"
  },
  {
    "text": "done the same thing Library immutable data structure only immutable data",
    "start": "1807320",
    "end": "1812440"
  },
  {
    "text": "structure but now with or without pooling and based on our data set so",
    "start": "1812440",
    "end": "1819200"
  },
  {
    "text": "this is the graph that will you will not see exactly like this for your own data",
    "start": "1819200",
    "end": "1824480"
  },
  {
    "text": "if your data is different from ours but for us it looked like that and if we with introducing pooling we kind of",
    "start": "1824480",
    "end": "1831760"
  },
  {
    "text": "halfed or cut the size of the whole thing in two um like I said it's not the data Str",
    "start": "1831760",
    "end": "1840159"
  },
  {
    "text": "it's exactly the same data it's exactly the same data structures it's the only difference is if we do pooling or not",
    "start": "1840159",
    "end": "1846399"
  },
  {
    "text": "and we implemented custom pooling using Eclipse collections for Eclipse collections based Solutions and uh the",
    "start": "1846399",
    "end": "1853600"
  },
  {
    "text": "recommendation here that's important uh if you're going to take away any anything from this slide is that you",
    "start": "1853600",
    "end": "1859279"
  },
  {
    "text": "should understand your data and analyze it using some tools like JW or something",
    "start": "1859279",
    "end": "1864399"
  },
  {
    "text": "else uh to understand how it behaves and where you can optimize it so Donald what",
    "start": "1864399",
    "end": "1871720"
  },
  {
    "text": "is pooling can you explain a little bit about that first thing we got to talk about is what is a pool right so the way I would describe pool is it's a set of",
    "start": "1871720",
    "end": "1877799"
  },
  {
    "text": "unique values that you can put things into and get them out of right and if you think about a hashset in Java right",
    "start": "1877799",
    "end": "1884159"
  },
  {
    "text": "you'll realize like the set interface does you know you you can add to it but you can't actually get anything out of",
    "start": "1884159",
    "end": "1889639"
  },
  {
    "text": "it you can check for containment right um so if a set had a get method and there's actually stack Overflow question",
    "start": "1889639",
    "end": "1895960"
  },
  {
    "text": "um that someone asked and I actually answered it turns out like um in Eclipse collections our unified set is actually",
    "start": "1895960",
    "end": "1902000"
  },
  {
    "text": "a set and a pool so actually have a get method on our set right so what is a pool useful for why would you want to",
    "start": "1902000",
    "end": "1907880"
  },
  {
    "text": "have a get method on a set and what it's useful for is like um it helps you reduce the number of duplicate items",
    "start": "1907880",
    "end": "1913080"
  },
  {
    "text": "that you have for a specific set of data and memory so think of it basically as a hashmap of the key and value being the",
    "start": "1913080",
    "end": "1919480"
  },
  {
    "text": "same thing I want to look up this key and if I have that key I want to look up this value and I only want to keep this value in memory but it's just with a set",
    "start": "1919480",
    "end": "1926600"
  },
  {
    "text": "it since key and value are the same a set if you have a get method you're looking up the key and you get back the",
    "start": "1926600",
    "end": "1932000"
  },
  {
    "text": "the key right um is really what it comes down to so in jdk there are different kind of pools that actually happen",
    "start": "1932000",
    "end": "1938480"
  },
  {
    "text": "they're not implemented as sets but like um there's a um type of pooling if you haven't heard of it before which",
    "start": "1938480",
    "end": "1944440"
  },
  {
    "text": "actually gets used for literal strings they string intern right so there is an internal pool that um the jvm manages",
    "start": "1944440",
    "end": "1950120"
  },
  {
    "text": "that um you know um literal strings use and you can use it as well it's a method on string to use a pooling there are",
    "start": "1950120",
    "end": "1955799"
  },
  {
    "text": "articles out that have existed for quite a long time and you know done over the years explaining when and when not to",
    "start": "1955799",
    "end": "1961200"
  },
  {
    "text": "use string intern in different issues with it I won't go into that today but it is available there it is a pool there",
    "start": "1961200",
    "end": "1967200"
  },
  {
    "text": "are also these pools available on the box Trappers that actually get used through Auto boxing so there's a value",
    "start": "1967200",
    "end": "1972559"
  },
  {
    "text": "of method on each of the the Box droppers like Boolean short integer long right and and there is a um a range kind",
    "start": "1972559",
    "end": "1980240"
  },
  {
    "text": "of uh of um values that are basically cached or pulled for each of these types",
    "start": "1980240",
    "end": "1985519"
  },
  {
    "text": "so for integer there's 256 I think um integers so it's like negative 127 to um",
    "start": "1985519",
    "end": "1991960"
  },
  {
    "text": "128 or negative 128 to 127 I forget the the both ranges but uh um so they keep",
    "start": "1991960",
    "end": "1998039"
  },
  {
    "text": "these small integers both a negative and uh positive cached right um as it turns",
    "start": "1998039",
    "end": "2003840"
  },
  {
    "text": "out and this was actually a mystery for us at first we didn't know why my data frame EC was doing so well like we",
    "start": "2003840",
    "end": "2009880"
  },
  {
    "text": "didn't do anything to it we just loaded data into we thought we were we had a bug or something like why is it half the",
    "start": "2009880",
    "end": "2015159"
  },
  {
    "text": "memory right and it turns out like data frame EC actually uses the eclipse collections unified set underneath to",
    "start": "2015159",
    "end": "2020679"
  },
  {
    "text": "actually pull the data for each column and it's very smart and makes sense because like for each column since it's",
    "start": "2020679",
    "end": "2026519"
  },
  {
    "text": "a column based data store and say well if I have a string let me have a pool of strings and I can unique while I'm loading or if I have a date let me have",
    "start": "2026519",
    "end": "2032840"
  },
  {
    "text": "a pool of dates and even if I have like a tremendous number of years the number of dates is probably going to be much",
    "start": "2032840",
    "end": "2038559"
  },
  {
    "text": "less than let's say hundreds of thousands or Millions right so well but think about it like 365 time uh days",
    "start": "2038559",
    "end": "2046200"
  },
  {
    "text": "possible dates a year and if you have even dates for I don't know 30 years 50 years it's still much much much less",
    "start": "2046200",
    "end": "2052919"
  },
  {
    "text": "than one million uh elements right yeah and so what we did here is like I you",
    "start": "2052919",
    "end": "2058280"
  },
  {
    "text": "know after we started understanding our data and looking at it and seeing where the cost we like we said like what can we you know do here with pooling we saw",
    "start": "2058280",
    "end": "2065280"
  },
  {
    "text": "like well we have a lot of duplicate cities we actually have a set of six of them that we load so immediately we can",
    "start": "2065280",
    "end": "2070599"
  },
  {
    "text": "get rid of let's say one million strings and just through pooling wind up with six there's a tremendous savings right",
    "start": "2070599",
    "end": "2076679"
  },
  {
    "text": "um we have start date and end date we have a million of each of those right and there's only 364 that we wind up",
    "start": "2076679",
    "end": "2082480"
  },
  {
    "text": "loading for 2023 so we go from a million to 364 right um and uh then as it turns out",
    "start": "2082480",
    "end": "2089919"
  },
  {
    "text": "session types which um rustom talked about before with the CSV data we've got let's say um talks workshops lightning",
    "start": "2089919",
    "end": "2097000"
  },
  {
    "text": "talks right so it's a combination of either anywhere from one two or three and then the combination of those and you can see like in total you wind up",
    "start": "2097000",
    "end": "2103920"
  },
  {
    "text": "with seven instances now what's interesting is when you use the eclipse collections immutable set you wind up",
    "start": "2103920",
    "end": "2109320"
  },
  {
    "text": "with named classes for each of the sizes so it actually tells you more about the distribution of your data so we could",
    "start": "2109320",
    "end": "2115920"
  },
  {
    "text": "actually see and I I refer to this as a tracer bullet it's like I can see what's out there as I'm you know shooting my",
    "start": "2115920",
    "end": "2121760"
  },
  {
    "text": "sets into the Heap what they actually look like and where they land and see like I've got 375 ,000 plus Singleton",
    "start": "2121760",
    "end": "2128520"
  },
  {
    "text": "sets 541000 doubleton and 82,000 tripleton right and those then reduce",
    "start": "2128520",
    "end": "2133640"
  },
  {
    "text": "down to those so um yeah so now we can talk a bit about rows versus columns and",
    "start": "2133640",
    "end": "2139079"
  },
  {
    "text": "something to think about in this space so um warning what yes five minutes",
    "start": "2139079",
    "end": "2146000"
  },
  {
    "text": "warning um so row based structures really um the benefits you get is like you can get custom uh um tuning ability",
    "start": "2146000",
    "end": "2153160"
  },
  {
    "text": "you can actually really let's say try and compress down the data in your row um but you've got limits with that you",
    "start": "2153160",
    "end": "2158240"
  },
  {
    "text": "do have you know also the ability to do custom pooling which is what we did after the fact and um you know we're",
    "start": "2158240",
    "end": "2164760"
  },
  {
    "text": "going to show a little bit of what we can do in terms of achieving more with rows to squeeze even more memory but",
    "start": "2164760",
    "end": "2170000"
  },
  {
    "text": "some of the challenges that you get is like you get this object ater cost right so for every row I got like an object header where I talk a little bit about",
    "start": "2170000",
    "end": "2176079"
  },
  {
    "text": "what Java's going to do eventually um to help us in this space right you also have object alignment cost to think",
    "start": "2176079",
    "end": "2181800"
  },
  {
    "text": "about right the way you know objects get this 8 byte alignment so whatever you can fit into bytes if you don't fit",
    "start": "2181800",
    "end": "2187560"
  },
  {
    "text": "eight bytes though you fit four it's still going to cost you eight and you got to consider that and there's a great article from Alexi ship on object",
    "start": "2187560",
    "end": "2193160"
  },
  {
    "text": "alignment and how that works with column based structures you only get an object header cost per column so a lot less",
    "start": "2193160",
    "end": "2198400"
  },
  {
    "text": "columns let's say 10 columns versus a million rows right you get great compression and performance especially",
    "start": "2198400",
    "end": "2203880"
  },
  {
    "text": "if you got primitive types things can maybe just be loaded directly in from a second level cache into you know to the",
    "start": "2203880",
    "end": "2210400"
  },
  {
    "text": "processor and you know get good cache locality um and then you are limited though in terms of like tuning to the",
    "start": "2210400",
    "end": "2216920"
  },
  {
    "text": "available types so data frame EC only has a long value type for integral values it doesn't have short int or bite",
    "start": "2216920",
    "end": "2222560"
  },
  {
    "text": "so you know that's a place where it could actually give you more savings but let's uh go look at fine-tuning memory",
    "start": "2222560",
    "end": "2227720"
  },
  {
    "text": "and Conference Explorer and what we did so so through some you know just manual",
    "start": "2227720",
    "end": "2233319"
  },
  {
    "text": "what can I do to squeeze memory here you can see for and we only did it for the one column we could have done it for all",
    "start": "2233319",
    "end": "2239160"
  },
  {
    "text": "of the first four because this was really making changes in the conference record changing the types what we did",
    "start": "2239160",
    "end": "2245240"
  },
  {
    "text": "was we took what were four in Fields initially and we made one of the in fields bite because like the number of",
    "start": "2245240",
    "end": "2251760"
  },
  {
    "text": "tracks is always typically going to be less than 10 right in a bite I can fit 128 right um and then the in value is",
    "start": "2251760",
    "end": "2259599"
  },
  {
    "text": "like I don't really need two billion for like number of speakers number of sessions and cost right a nice value is",
    "start": "2259599",
    "end": "2265560"
  },
  {
    "text": "like say you know short you know it's much smaller hopefully you don't you know hit the max size for the cost but",
    "start": "2265560",
    "end": "2270800"
  },
  {
    "text": "you're definitely not going to hit the max size for speakers and sessions right so what this gave us the ability to shrink a 16 Bice down down to seven and",
    "start": "2270800",
    "end": "2277720"
  },
  {
    "text": "then we did this really gnarly trick of like hey let's get rid of an object reference and that'll save us 4 million",
    "start": "2277720",
    "end": "2283480"
  },
  {
    "text": "you know extra bytes potentially if we can get the object alignment working out right so we combine the two dates into",
    "start": "2283480",
    "end": "2289520"
  },
  {
    "text": "this pair object it's called the twin because twin same type and basically we were able to reduce the the reference",
    "start": "2289520",
    "end": "2296119"
  },
  {
    "text": "cost and and this is that kind of funny date math right now we had the combination of like from and two but",
    "start": "2296119",
    "end": "2303200"
  },
  {
    "text": "since two is always greater than from you wind up with like at Max like 6 66,000 and that's still a lot less than",
    "start": "2303200",
    "end": "2310240"
  },
  {
    "text": "a million so even if I have to create 66,000 of these at 24 bytes right the",
    "start": "2310240",
    "end": "2315280"
  },
  {
    "text": "million times four is going to be more than that right so we got a you know savings from there and what you can see",
    "start": "2315280",
    "end": "2320839"
  },
  {
    "text": "is we effectively got the eclipse collections immutable list row-based approach to be um more a little more",
    "start": "2320839",
    "end": "2328599"
  },
  {
    "text": "than 10 Megs uh less memory than the data frame EC where we didn't have to really do anything right um so that's",
    "start": "2328599",
    "end": "2335680"
  },
  {
    "text": "kind of explaining what happened happened here so now let's turn the volume up to 11 so to speak um and talk",
    "start": "2335680",
    "end": "2341880"
  },
  {
    "text": "about like we wanted to see what if we you know um you know turn the volume up",
    "start": "2341880",
    "end": "2347319"
  },
  {
    "text": "actually to 25 right where we went from 1 million to 25 million and we still had that manual tuning for just the eclipse",
    "start": "2347319",
    "end": "2354079"
  },
  {
    "text": "collections column but what we added here is we wanted to remind you on the file size right so you can actually",
    "start": "2354079",
    "end": "2360040"
  },
  {
    "text": "compare like this is the file size that when we generated the 25 million objects it took 2.1 you know uh 9 gig and you",
    "start": "2360040",
    "end": "2368560"
  },
  {
    "text": "can see in comparison how much does it require in memory right um now as as it turns out when we actually turned it up",
    "start": "2368560",
    "end": "2375200"
  },
  {
    "text": "to 25 million and I tried to run our code it exploded right we ran out of memory and it turns out because we we we",
    "start": "2375200",
    "end": "2381480"
  },
  {
    "text": "hadn't tuned this at all like we're using Jackson CSV and we're using this mapping iterator readall method and",
    "start": "2381480",
    "end": "2387079"
  },
  {
    "text": "readall what it does is it creates basically a list of maps so I wind up creating 25 million Maps right and maybe",
    "start": "2387079",
    "end": "2394079"
  },
  {
    "text": "they were probably just jdk hash Maps so it's like it blew out the memory space what you need to do is like well in order to scale using Jackson CSV we use",
    "start": "2394079",
    "end": "2401760"
  },
  {
    "text": "the iterator directly so we're creating one row at a time and then turning that into the conference row so you know not",
    "start": "2401760",
    "end": "2408000"
  },
  {
    "text": "creating maps and then creting Maps into conferences right so and this was much better you can see like um the manual",
    "start": "2408000",
    "end": "2414760"
  },
  {
    "text": "savings here though is adding up when you talk about 25 million rows you can see like oh look we're saving now um",
    "start": "2414760",
    "end": "2421200"
  },
  {
    "text": "over 300 Meg compared to like data frame EC so that manual tuning is starting to",
    "start": "2421200",
    "end": "2426680"
  },
  {
    "text": "pay off right um so we go to the next slide we could talk a little bit about",
    "start": "2426680",
    "end": "2431839"
  },
  {
    "text": "what's going to happen with Java so yeah so we talked about quite a bit uh about",
    "start": "2431839",
    "end": "2436880"
  },
  {
    "text": "actually how we can f tune and we can do it by knowing our data or using the",
    "start": "2436880",
    "end": "2442480"
  },
  {
    "text": "right data structure for that but there is also things happening in Java world that will bring uh the size of uh the",
    "start": "2442480",
    "end": "2449960"
  },
  {
    "text": "memory foodprint down uh a bit there are a few projects that are uh working in",
    "start": "2449960",
    "end": "2455880"
  },
  {
    "text": "different directions I mean different they're doing different things but all in all at the end most of them at least",
    "start": "2455880",
    "end": "2463119"
  },
  {
    "text": "two of them for sure in the third one kind of will will influence the value of",
    "start": "2463119",
    "end": "2468560"
  },
  {
    "text": "the the the memory footprint so project little put Works uh with uh techniques",
    "start": "2468560",
    "end": "2474319"
  },
  {
    "text": "to downsize the Java object headers in general uh in the H Hotspot jvm from 128",
    "start": "2474319",
    "end": "2480839"
  },
  {
    "text": "bits to 64 bits or less um um project Valhalla will will also have this thing",
    "start": "2480839",
    "end": "2488520"
  },
  {
    "text": "called uh value objects um and if you want to read more about that there are",
    "start": "2488520",
    "end": "2493760"
  },
  {
    "text": "links to both descriptions of the project but also to uh in this case a",
    "start": "2493760",
    "end": "2498920"
  },
  {
    "text": "blog post by brand guts uh where he explains how this works and it's it's",
    "start": "2498920",
    "end": "2504920"
  },
  {
    "text": "kind of the the interesting quote to to take from here it says like Primitives the value set of an inline class in the",
    "start": "2504920",
    "end": "2512640"
  },
  {
    "text": "set of instances of that class not object references",
    "start": "2512640",
    "end": "2517720"
  },
  {
    "text": "uh and also project Amber which is not exactly memory related but still will kind of influence it and uh also help to",
    "start": "2517720",
    "end": "2525400"
  },
  {
    "text": "think about data oriented programming and approach to uh that in Java um you",
    "start": "2525400",
    "end": "2531359"
  },
  {
    "text": "can also read about that and also you can uh read this article by Brian as",
    "start": "2531359",
    "end": "2537560"
  },
  {
    "text": "well which is a really really interesting kind of insight of data oriented programming uh in Java so in",
    "start": "2537560",
    "end": "2545480"
  },
  {
    "text": "summary well what do we can say well we can say that data oriented programming",
    "start": "2545480",
    "end": "2550920"
  },
  {
    "text": "in Java is actually possible you don't need to go for another uh framework language whatever you can do it it's",
    "start": "2550920",
    "end": "2557440"
  },
  {
    "text": "feasible it's flexible and it's actually fun it can be fun with all this fine tuning and small things that you can do",
    "start": "2557440",
    "end": "2563480"
  },
  {
    "text": "and see your memory F kind go down and you can do all this fun things with you in your favorite language right um uh",
    "start": "2563480",
    "end": "2572280"
  },
  {
    "text": "understanding and measuring your data is the most important key key that will be",
    "start": "2572280",
    "end": "2577839"
  },
  {
    "text": "there no matter what you choose no matter what framework language whatever you will go for it will be a very",
    "start": "2577839",
    "end": "2583680"
  },
  {
    "text": "important part of it you should use tools to measure that you should consider using pooling uh to get a lot",
    "start": "2583680",
    "end": "2591920"
  },
  {
    "text": "of uh memory benefits especially if you have repeating values and values that are not absolutely 100% unique um object",
    "start": "2591920",
    "end": "2601119"
  },
  {
    "text": "compression is also a possible uh uh is possible using smaller primitive types",
    "start": "2601119",
    "end": "2606599"
  },
  {
    "text": "instead of uh fixed number ranges and stuff like sorry with fixed uh number",
    "start": "2606599",
    "end": "2612040"
  },
  {
    "text": "ranges um yeah so we need to think about also column based approach versus domain",
    "start": "2612040",
    "end": "2617920"
  },
  {
    "text": "oriented or object oriented approach uh to the structure so when we do column base uh you should try to stick to",
    "start": "2617920",
    "end": "2626480"
  },
  {
    "text": "Primitives primitive uh uh will generate a lot of memory savings you should think",
    "start": "2626480",
    "end": "2632000"
  },
  {
    "text": "about um uh providing support for smaller integr integr types that can add",
    "start": "2632000",
    "end": "2638200"
  },
  {
    "text": "to the uh you know memory savings um when it comes to domain",
    "start": "2638200",
    "end": "2643559"
  },
  {
    "text": "oriented approach we are um we should think about how it can be tuned manually",
    "start": "2643559",
    "end": "2650319"
  },
  {
    "text": "uh because you know here you need to know your data you need to know how it's put together you need to know where you",
    "start": "2650319",
    "end": "2656800"
  },
  {
    "text": "can cut things uh and uh it's one of the most important things one of the kind of",
    "start": "2656800",
    "end": "2661839"
  },
  {
    "text": "the most loow hanging fruits probably is to to convert things into immutable data structures after you're done playing",
    "start": "2661839",
    "end": "2667920"
  },
  {
    "text": "around with it doing something with it putting into the mutable data structures and leave them there because it will",
    "start": "2667920",
    "end": "2673760"
  },
  {
    "text": "give you a better better uh memory footprint um all the code the",
    "start": "2673760",
    "end": "2679520"
  },
  {
    "text": "presentation and even more slides as you can see there is an appendices and there are several more slides that you can see",
    "start": "2679520",
    "end": "2686440"
  },
  {
    "text": "there all of that is on that GitHub link over there as an open uh repository you",
    "start": "2686440",
    "end": "2692680"
  },
  {
    "text": "can also scan the QR code to get the link from that and with this unless you",
    "start": "2692680",
    "end": "2698559"
  },
  {
    "text": "have anything to add Donald I want to go to the title page and say that you're",
    "start": "2698559",
    "end": "2704920"
  },
  {
    "text": "more than welcome to Ping Us online so This Is Us on Twitter uh we'll be happy to discuss anything related to that or",
    "start": "2704920",
    "end": "2713240"
  },
  {
    "text": "anything related to to Java uh ping us",
    "start": "2713240",
    "end": "2718440"
  },
  {
    "text": "thank you very much thank you for being here thank you for joining us thank you for having us thank",
    "start": "2718440",
    "end": "2724880"
  },
  {
    "text": "you [Music]",
    "start": "2724880",
    "end": "2733489"
  }
]