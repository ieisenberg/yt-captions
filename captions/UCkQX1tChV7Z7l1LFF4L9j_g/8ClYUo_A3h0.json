[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "[Music]",
    "start": "640",
    "end": "16920"
  },
  {
    "text": "So today we're going to talk about vertex and we've already heard several",
    "start": "25119",
    "end": "30279"
  },
  {
    "text": "times that it is roughly the equivalent of node for the jvm and I just realized that I haven't started my slides so",
    "start": "30279",
    "end": "36920"
  },
  {
    "text": "there they are so here are my uh details I'll also have those at the end I uploaded this deck to SlideShare this",
    "start": "36920",
    "end": "44360"
  },
  {
    "text": "morning but it's been still processing for the last four hours So eventually it will be out there so before we get into",
    "start": "44360",
    "end": "50680"
  },
  {
    "text": "vertex and and and node I always like to start with you know what problem is that",
    "start": "50680",
    "end": "56760"
  },
  {
    "text": "that we're trying to solve and actually I want to uh to look at",
    "start": "56760",
    "end": "62120"
  },
  {
    "start": "62000",
    "end": "103000"
  },
  {
    "text": "two so everyone familiar with the c10k problem yes no",
    "start": "62120",
    "end": "69240"
  },
  {
    "text": "maybe um how do we deal with 10,000 concurrent connections without the",
    "start": "69240",
    "end": "74280"
  },
  {
    "text": "server falling down and going boom of course this has become especially pertinent in the last 5 years",
    "start": "74280",
    "end": "82159"
  },
  {
    "text": "or so with the birth of our smart mobile devices and so very recently we actually",
    "start": "82159",
    "end": "88280"
  },
  {
    "text": "passed the point where there are now more mobile devices connected to the internet than there are PCS and this",
    "start": "88280",
    "end": "94840"
  },
  {
    "text": "problem isn't going away so we have to start building application architectures that can handle that kind of concurrent",
    "start": "94840",
    "end": "101320"
  },
  {
    "text": "load and the other problem you know most of us are familiar with this as well you know how do we build Advanced server",
    "start": "101320",
    "end": "107200"
  },
  {
    "text": "push features into Apps how do we get data into the browser without having to constantly",
    "start": "107200",
    "end": "113920"
  },
  {
    "text": "poll so we can build you know these quote unquote You Know Rich internet applications a term that's been you know",
    "start": "113920",
    "end": "119200"
  },
  {
    "text": "do beaten to to death uh considerably and so these were the types of questions that Ryan do was attempting",
    "start": "119200",
    "end": "124799"
  },
  {
    "text": "to deal with in 2008 2008 doesn't seem that long ago but",
    "start": "124799",
    "end": "130479"
  },
  {
    "text": "let's go back in 2008 our existing Frameworks platforms fra um very tightly coupled to",
    "start": "130479",
    "end": "138080"
  },
  {
    "start": "132000",
    "end": "199000"
  },
  {
    "text": "this idea that you know server is something that receives a request and it spins up a thread to deal with it and",
    "start": "138080",
    "end": "144640"
  },
  {
    "text": "then it sends back a response and all this of course happens sequentially well",
    "start": "144640",
    "end": "150360"
  },
  {
    "text": "of course this was not web scale now to be able to push events to",
    "start": "150360",
    "end": "155680"
  },
  {
    "text": "the browser the platform needs to be able to handle a lot of open connections",
    "start": "155680",
    "end": "162680"
  },
  {
    "text": "that are mostly idle now Ryan's background in systems",
    "start": "162680",
    "end": "168760"
  },
  {
    "text": "programming led him to create you know a small test environment that could handle thousands of idal connections and he did",
    "start": "168760",
    "end": "175840"
  },
  {
    "text": "this using non-blocking Unix sockets and C",
    "start": "175840",
    "end": "181360"
  },
  {
    "text": "but Ryan didn't want to work in C he wanted a higher level language he wanted a higher level of abstraction in fact he",
    "start": "181360",
    "end": "187640"
  },
  {
    "text": "wanted a dynamic language and I tend to agree with him um I don't want to work at that low of a level either you as it",
    "start": "187640",
    "end": "194440"
  },
  {
    "text": "turns out life is entirely too short for Malik so about that same time what did",
    "start": "194440",
    "end": "201440"
  },
  {
    "start": "199000",
    "end": "260000"
  },
  {
    "text": "we get Doug crockford published JavaScript the good parts and we started taking JavaScript more seriously you",
    "start": "201440",
    "end": "206640"
  },
  {
    "text": "know it's it's not going anywhere it's the most you know really the only ubiquitous programming platform that we",
    "start": "206640",
    "end": "213920"
  },
  {
    "text": "have for the web and crockford showed us you know we can leverage the good parts of JavaScript while avoiding the ugly parts that get us into trouble then add",
    "start": "213920",
    "end": "221680"
  },
  {
    "text": "further fuel to that fire was Google releasing Chrome in the V8 JavaScript engine and so the first time not only",
    "start": "221680",
    "end": "228319"
  },
  {
    "text": "did we have you know a a a real technology competition going on a",
    "start": "228319",
    "end": "234040"
  },
  {
    "text": "JavaScript space we had JavaScript going blazingly fast and now we start the arms race of browsers off all over again and",
    "start": "234040",
    "end": "240720"
  },
  {
    "text": "we have more players in the field you know we have Google and apple and Mozilla and Microsoft all trying to uh",
    "start": "240720",
    "end": "246439"
  },
  {
    "text": "outperform one another when it comes to JavaScript engin so you can bring these three things together and you know Ryan",
    "start": "246439",
    "end": "253000"
  },
  {
    "text": "has this epiphanies why don't we do non-blocking sockets in JavaScript and a few months later out",
    "start": "253000",
    "end": "258919"
  },
  {
    "text": "popped node now as you say you've covered node none of you came to the node meeting it",
    "start": "258919",
    "end": "265240"
  },
  {
    "start": "260000",
    "end": "296000"
  },
  {
    "text": "looks like so who's familiar with node done any uh who who's written serious",
    "start": "265240",
    "end": "270479"
  },
  {
    "text": "code in node at all so so a couple of us so you can probably talk about node a",
    "start": "270479",
    "end": "278639"
  },
  {
    "text": "lot better than I can I I can't go in depth with node because I only learned enough node to make a reasonable useful",
    "start": "278639",
    "end": "285240"
  },
  {
    "text": "comparison with vertex now from what I've learned I like it it's a solid piece of technology you know you use it",
    "start": "285240",
    "end": "291080"
  },
  {
    "text": "intelligently you can build some very solid app architectures with it",
    "start": "291080",
    "end": "296400"
  },
  {
    "start": "296000",
    "end": "355000"
  },
  {
    "text": "but node does have some shortcomings",
    "start": "296520",
    "end": "301560"
  },
  {
    "text": "so we talked about JavaScript in a positive light a second ago let's talk about it in a negative light JavaScript",
    "start": "302479",
    "end": "309199"
  },
  {
    "text": "has its problems we'll talk about some of those um node does not really have a",
    "start": "309199",
    "end": "315000"
  },
  {
    "text": "good story around vertical scaling horizontal scaling great vertical scaling",
    "start": "315000",
    "end": "320840"
  },
  {
    "text": "hard interprocess communication also something that we can do but it requires",
    "start": "320840",
    "end": "326319"
  },
  {
    "text": "a lot of low-level programming a lot of glue code a lot of bolting on of add-ons and then there's this event Loop",
    "start": "326319",
    "end": "334080"
  },
  {
    "text": "thing the event Loop's great unless you need to do work that doesn't fit on an event Loop and that's",
    "start": "334080",
    "end": "341400"
  },
  {
    "text": "a problem that we can't really solve so all of these solutions that we",
    "start": "341400",
    "end": "347639"
  },
  {
    "text": "have on the Node they require a lot of leg work on our part and what vertex",
    "start": "347639",
    "end": "353160"
  },
  {
    "text": "does is to take the same event driven non-blocking IO programming model model",
    "start": "353160",
    "end": "359720"
  },
  {
    "start": "355000",
    "end": "418000"
  },
  {
    "text": "that we got from node all the good stuff and then directly address all of",
    "start": "359720",
    "end": "364800"
  },
  {
    "text": "those shortcomings so that you can spend your time working on your app and push",
    "start": "364800",
    "end": "370639"
  },
  {
    "text": "all these concerns down into the framework so what I want to do is I want to walk through each of the problems and",
    "start": "370639",
    "end": "378599"
  },
  {
    "text": "I want to show how vertex addresses those now you said you wanted me to ask",
    "start": "378599",
    "end": "384080"
  },
  {
    "text": "questions for the giveaway so I've already decided how I'm going to do that so pay attention to the slides",
    "start": "384080",
    "end": "390440"
  },
  {
    "text": "I'm not going to say probably any of the answers to the questions but they will be there so",
    "start": "390440",
    "end": "398160"
  },
  {
    "text": "JavaScript if you're going to write node programs you have to use JavaScript now yes we can write coffee script and we",
    "start": "398160",
    "end": "404680"
  },
  {
    "text": "can write closure script but the burden is on the developer of the language to",
    "start": "404680",
    "end": "410039"
  },
  {
    "text": "get his or her Co code compiled down to JavaScript and then and only then does",
    "start": "410039",
    "end": "415120"
  },
  {
    "text": "node pick up with it now JavaScript has some problem",
    "start": "415120",
    "end": "420360"
  },
  {
    "start": "418000",
    "end": "468000"
  },
  {
    "text": "problems who seen W okay you guys have homework should go",
    "start": "420360",
    "end": "426440"
  },
  {
    "text": "watch this if we had time I'd play it so JavaScript does a lot of weird",
    "start": "426440",
    "end": "433800"
  },
  {
    "text": "implicit conversions we have still not a reasonably consistent way to do name",
    "start": "433800",
    "end": "440240"
  },
  {
    "text": "spacing and organize large code bases in JavaScript now uh the Google closure tools have gone a long way to help us",
    "start": "440240",
    "end": "446960"
  },
  {
    "text": "with that but at the end of the day there's still very little agreement on how do we structure really large",
    "start": "446960",
    "end": "452280"
  },
  {
    "text": "JavaScript code bases of course we have this weird class-like syntax coupled",
    "start": "452280",
    "end": "458000"
  },
  {
    "text": "with decidedly not class-based inheritance it's prototypal based and of course we it's just easy to do really",
    "start": "458000",
    "end": "464360"
  },
  {
    "text": "bad things of course these aren't the only problems we have a JavaScript but there's some of them so vertex's",
    "start": "464360",
    "end": "470400"
  },
  {
    "start": "468000",
    "end": "518000"
  },
  {
    "text": "approach is polyglot programming use the right tool for the job now I've been talking about polyglot",
    "start": "470400",
    "end": "476680"
  },
  {
    "text": "programming for a long time most of you are polyglot programmers you just don't consider yourself to be even if you use",
    "start": "476680",
    "end": "482440"
  },
  {
    "text": "one core language if you're doing web development you're using several languages you know if you consider HTML",
    "start": "482440",
    "end": "489159"
  },
  {
    "text": "CSS languages you throw JavaScript in there you throw in uh SQL or or a query",
    "start": "489159",
    "end": "495520"
  },
  {
    "text": "language from your persistance library you're doing polyglot programming so vertex takes the approach of bringing in polyglot programming for the core",
    "start": "495520",
    "end": "501759"
  },
  {
    "text": "language programming whatever language you want in fact feel free to mix and match multiple languages and vertex will",
    "start": "501759",
    "end": "508360"
  },
  {
    "text": "take care of the community communication between those so several languages have first class support today let's do a",
    "start": "508360",
    "end": "514159"
  },
  {
    "text": "Hello World Tour of the uh languages that are out there so um here's how we",
    "start": "514159",
    "end": "521120"
  },
  {
    "start": "518000",
    "end": "573000"
  },
  {
    "text": "do Hello World in Java so what we're doing is extending a vertical class I'm going to talk about what a vertical is a",
    "start": "521120",
    "end": "527600"
  },
  {
    "text": "little bit later but suffice to say this is the unit of programming in vertex and",
    "start": "527600",
    "end": "534440"
  },
  {
    "text": "we're going to be compelled to implement the start method so in the start method what are we doing we're doing the",
    "start": "534440",
    "end": "539680"
  },
  {
    "text": "stereotypical nodejs hello world example we're spinning up an HTTP server we're providing it with a request Handler and",
    "start": "539680",
    "end": "546240"
  },
  {
    "text": "all that request Handler is going to do is write out hello world to the response and we're listening on Port 880 so this",
    "start": "546240",
    "end": "551760"
  },
  {
    "text": "is what it looks like in Java now the code gets a lot smaller in all the other languages in",
    "start": "551760",
    "end": "557880"
  },
  {
    "text": "groovy this is what we have doing exactly the same thing now notice that",
    "start": "557880",
    "end": "563560"
  },
  {
    "text": "we're moving between languages but the API is consistent between them if you",
    "start": "563560",
    "end": "568640"
  },
  {
    "text": "can expect a method in Java you can expect it in groovy you can expect it in Ruby now Ruby is leveraging J Ruby under",
    "start": "568640",
    "end": "575880"
  },
  {
    "text": "the hood to uh run on top of the of vertex in the jvm but again essentially",
    "start": "575880",
    "end": "581600"
  },
  {
    "text": "we have the same programming model with Ruby syntax and Ruby uh constructs we",
    "start": "581600",
    "end": "586920"
  },
  {
    "start": "586000",
    "end": "594000"
  },
  {
    "text": "can also do this in Python again same",
    "start": "586920",
    "end": "593200"
  },
  {
    "text": "constructs and of course if you're a node programmer wanting to jump onto the jvm you can write JavaScript",
    "start": "593200",
    "end": "599680"
  },
  {
    "text": "and the JavaScript code that you start to write in vertex looks very familiar very comfortable in terms of what you're",
    "start": "599680",
    "end": "606399"
  },
  {
    "text": "used to writing um when you're doing node code and of course we also have first class coffee Script support that's",
    "start": "606399",
    "end": "613000"
  },
  {
    "start": "610000",
    "end": "620000"
  },
  {
    "text": "been added fairly recently coffee script and python are the newest Kids on the Block now in the",
    "start": "613000",
    "end": "619920"
  },
  {
    "text": "future um we have uh some fledgling scholar support that's uh that's become",
    "start": "619920",
    "end": "625560"
  },
  {
    "start": "620000",
    "end": "661000"
  },
  {
    "text": "available it's not really first class yet um a couple of us are starting to have conversations about adding closure",
    "start": "625560",
    "end": "632519"
  },
  {
    "text": "support to vertex theoretically any language that'll run on the jvm or any language that will",
    "start": "632519",
    "end": "639959"
  },
  {
    "text": "compile down to a supported language so maybe we could take the closure script",
    "start": "639959",
    "end": "645600"
  },
  {
    "text": "to JavaScript to vertex route as well these are different things that we can",
    "start": "645600",
    "end": "650920"
  },
  {
    "text": "do so now that we've examined the language issue let's take a look at",
    "start": "650920",
    "end": "657600"
  },
  {
    "text": "second problem vertical scaling so no J JS instances are",
    "start": "657600",
    "end": "665120"
  },
  {
    "start": "661000",
    "end": "707000"
  },
  {
    "text": "inherently single-threaded why because V8 itself is inherently",
    "start": "665120",
    "end": "670880"
  },
  {
    "text": "single-threaded from the perspective of the program now there are ways around that but they involve low-level hacking",
    "start": "670880",
    "end": "677720"
  },
  {
    "text": "and as I was telling some folks earlier in order for me to solve my problems I don't want to go lower down",
    "start": "677720",
    "end": "683839"
  },
  {
    "text": "the stack I want to go further up the stack I want to work at higher level abstractions not lower level",
    "start": "683839",
    "end": "689320"
  },
  {
    "text": "distractions and so anything that the platform can give me to allow me to stay up here thinking about my application",
    "start": "689320",
    "end": "695000"
  },
  {
    "text": "and not be down in the weeds this is something that I'm interested in and so the implication here is if I'm writing",
    "start": "695000",
    "end": "701320"
  },
  {
    "text": "node programs my code is going to use at most one core on my",
    "start": "701320",
    "end": "706440"
  },
  {
    "text": "server of course the node.js folks recognized this and added the capability",
    "start": "706440",
    "end": "711880"
  },
  {
    "start": "707000",
    "end": "738000"
  },
  {
    "text": "to Fork child processes and to support load balancing across those processes they created the",
    "start": "711880",
    "end": "719120"
  },
  {
    "text": "cluster module now the cluster module depending on who you talk to is a good thing or a bad thing if you look at the",
    "start": "719120",
    "end": "725079"
  },
  {
    "text": "official documentation it's still considered experimental but there are no shortage of stack Overflow questions saying yeah yeah just use cluster just",
    "start": "725079",
    "end": "731560"
  },
  {
    "text": "use cluster everything will be okay well let's go that route so there's a",
    "start": "731560",
    "end": "738000"
  },
  {
    "text": "book actually a few books now on node one of the earliest books was called node up and running it was one of the shortcut uh style books from",
    "start": "738000",
    "end": "745839"
  },
  {
    "text": "O'Reilly and getting into chapter 3 three they start showing this example of",
    "start": "745839",
    "end": "751399"
  },
  {
    "text": "how to use cluster to distribute the work of hello world across several",
    "start": "751399",
    "end": "756560"
  },
  {
    "text": "nodejs processes and so this is kind of the minimum viable code that you would",
    "start": "756560",
    "end": "762639"
  },
  {
    "text": "need to write in order to vertically scale hello world on no. JS using",
    "start": "762639",
    "end": "768560"
  },
  {
    "text": "cluster now who's doing the work",
    "start": "768560",
    "end": "772680"
  },
  {
    "text": "here you are there there's an API there that you",
    "start": "775079",
    "end": "780399"
  },
  {
    "text": "can leverage but at the end of the day using that API correctly the burden is",
    "start": "780399",
    "end": "785839"
  },
  {
    "text": "upon you to make this code work properly and to get all the glue in the right places to make things happen now",
    "start": "785839",
    "end": "793000"
  },
  {
    "text": "obviously this is Hello World it gets a lot more complicated than this and if",
    "start": "793000",
    "end": "798040"
  },
  {
    "text": "you continue to read the next four pages of the book The Code gets much more complex very quickly as they add",
    "start": "798040",
    "end": "804639"
  },
  {
    "text": "additional monitoring and management features to a again hello world",
    "start": "804639",
    "end": "809720"
  },
  {
    "text": "app so what we end up with if we're not extremely careful is a ton of glue",
    "start": "809720",
    "end": "816160"
  },
  {
    "text": "code intermingled with our application functionality now who likes that no I",
    "start": "816160",
    "end": "821480"
  },
  {
    "text": "like to have my application functionality I like to be able to look at my domain Concepts see them clearly",
    "start": "821480",
    "end": "827199"
  },
  {
    "text": "expressed and then all of the ancillary concerns the cross cutting concerns I want those pushed down into the",
    "start": "827199",
    "end": "832920"
  },
  {
    "text": "framework of the platform that I'm programming with so vertex leverages",
    "start": "832920",
    "end": "839959"
  },
  {
    "text": "the built-in mature threading capabilities of the jvm to make vertical scaling",
    "start": "839959",
    "end": "846880"
  },
  {
    "start": "849000",
    "end": "892000"
  },
  {
    "text": "trivial so again meet the vertical uh where did verticle come from",
    "start": "850079",
    "end": "855519"
  },
  {
    "text": "think uh atomic particle except for vertex that's where the name came from",
    "start": "855519",
    "end": "861320"
  },
  {
    "text": "we have some interesting ways of naming things um not to be confused with vertical as in vertical scaling up and",
    "start": "861320",
    "end": "868040"
  },
  {
    "text": "so we we got some terms that are going to be confusing here for a little bit so vertical unit of deployment so any",
    "start": "868040",
    "end": "874000"
  },
  {
    "text": "vertex instance any vert I'm sorry any vertex application is going to be composed of one or more of these",
    "start": "874000",
    "end": "880440"
  },
  {
    "text": "verticals uh verticals nothing more than the Java classes that we looked at or",
    "start": "880440",
    "end": "885720"
  },
  {
    "text": "scripts that we looked at in the hello world section so if you write these you're going to be writing verticals so",
    "start": "885720",
    "end": "892320"
  },
  {
    "text": "a Vertex instance is a jvm process that is running the vertex engine if you will",
    "start": "892320",
    "end": "898120"
  },
  {
    "text": "vertex engine consists of several threads so we're concerned here primarily with a group of threads that",
    "start": "898120",
    "end": "904680"
  },
  {
    "text": "provide us with event Loops so again we're starting to see one of the first differences node one event Loop vertex",
    "start": "904680",
    "end": "910480"
  },
  {
    "text": "many event Loops how many well it checks to see how many processor cores you have available using runtime. available",
    "start": "910480",
    "end": "917759"
  },
  {
    "text": "processors and it's going to create an event Loop thread for each one of those and then verticals are assigned to an",
    "start": "917759",
    "end": "924920"
  },
  {
    "text": "event Loop thread if I run vertex with a command",
    "start": "924920",
    "end": "930560"
  },
  {
    "text": "line argument instances and I give it a value equal to the number of cores you're going to see the vertical",
    "start": "930560",
    "end": "936720"
  },
  {
    "text": "automatically scaled out to one instance per core of course we can run more instances",
    "start": "936720",
    "end": "942920"
  },
  {
    "text": "than we have cores because each instance is typically not going to be able to keep the core busy all by",
    "start": "942920",
    "end": "949959"
  },
  {
    "text": "itself now what does this bring",
    "start": "949959",
    "end": "955160"
  },
  {
    "text": "up we don't like to talk about this word yeah",
    "start": "957600",
    "end": "964399"
  },
  {
    "text": "concurrency we've got multiple threads in play so how does vertex deal with concurrency we don't have to think about",
    "start": "964399",
    "end": "970920"
  },
  {
    "text": "concurrency when we're in the JavaScript world because we just have a single thread that so now all of a sudden all",
    "start": "970920",
    "end": "976079"
  },
  {
    "text": "these problems get dumped in our lap well hold on so as we said each vertical instance",
    "start": "976079",
    "end": "982880"
  },
  {
    "text": "is assigned a thread/ event Loop you can kind of think of them the same way that vertical",
    "start": "982880",
    "end": "989079"
  },
  {
    "text": "instance is guaranteed to always execute on its assigned thread it will never execute on any other",
    "start": "989079",
    "end": "995959"
  },
  {
    "text": "thread so once it gets that thread assignment it's always running there never anywhere else now a thread May",
    "start": "995959",
    "end": "1002240"
  },
  {
    "text": "execute multiple verticals but the same vertical instance will never have its work done by another threat uh",
    "start": "1002240",
    "end": "1009240"
  },
  {
    "text": "furthermore the class loaders for the verticals are isolated and that prevents them from",
    "start": "1009240",
    "end": "1014800"
  },
  {
    "text": "sharing Global state with static members global variables and other things so all",
    "start": "1014800",
    "end": "1020839"
  },
  {
    "text": "of these constraints give us the ability to write all of our code and I should have been going through points",
    "start": "1020839",
    "end": "1026438"
  },
  {
    "text": "here to write all of our code assuming single threading you know there's no need to",
    "start": "1026439",
    "end": "1033760"
  },
  {
    "text": "worry about synchronization there's no need to worry about",
    "start": "1033760",
    "end": "1038678"
  },
  {
    "text": "locking of course now that we've you know guaranteed that our verticals are isolated we have a",
    "start": "1039559",
    "end": "1047400"
  },
  {
    "text": "problem we got a bunch of processes out there running that are isolated they",
    "start": "1047400",
    "end": "1052880"
  },
  {
    "text": "can't talk to each other we can't get any useful work done so nodes fac with the same problem",
    "start": "1052880",
    "end": "1061760"
  },
  {
    "start": "1061000",
    "end": "1087000"
  },
  {
    "text": "so now we actually have two problems to consider um how do we get node.js processes to communicate with each other",
    "start": "1061760",
    "end": "1068200"
  },
  {
    "text": "because we know we can Fork them we know we can cluster them how do we get them to talk how do we get vertex verticals",
    "start": "1068200",
    "end": "1073880"
  },
  {
    "text": "to communicate with each other because it looks like we've created this Walled Garden where every single vertical is",
    "start": "1073880",
    "end": "1079440"
  },
  {
    "text": "unable to communicate with another well in the node.js world you spend some time uh Googling about",
    "start": "1079440",
    "end": "1085960"
  },
  {
    "text": "searching and uh you run into a lot of solutions a lot of solutions some of which make me scratch my head some of",
    "start": "1085960",
    "end": "1092679"
  },
  {
    "start": "1087000",
    "end": "1167000"
  },
  {
    "text": "which seem okay but uh maybe not so much so um one of the first things that comes",
    "start": "1092679",
    "end": "1097919"
  },
  {
    "text": "up is well you just need to learn socket programming you know you need to start learning T you know using TCP UDP Unix",
    "start": "1097919",
    "end": "1104280"
  },
  {
    "text": "sockets and this is how you get your processes to communicate now what did we just get done talking talking about we",
    "start": "1104280",
    "end": "1109520"
  },
  {
    "text": "don't want to be down there we want to be up here at a higher level abstraction so that we can focus on our app and not",
    "start": "1109520",
    "end": "1115280"
  },
  {
    "text": "focus on this lowle stuff um also redis Pub sub okay that makes a little bit",
    "start": "1115280",
    "end": "1120520"
  },
  {
    "text": "more sense um so I need to figure out how to you know there's of course there's options out there that make it easy to",
    "start": "1120520",
    "end": "1126600"
  },
  {
    "text": "talk to redus but um I need to learn that maybe I don't know redus need to",
    "start": "1126600",
    "end": "1132159"
  },
  {
    "text": "bring that into my app and get that done um zeromq this helps a little bit we're still dealing with socket but we're",
    "start": "1132159",
    "end": "1138720"
  },
  {
    "text": "dealing with a higher level of abstraction over plain sockets so that's getting",
    "start": "1138720",
    "end": "1144600"
  },
  {
    "text": "better um some other Solutions just say oh well you know there's some built-in messaging and cluster that you can use",
    "start": "1144600",
    "end": "1151400"
  },
  {
    "text": "not very full featured you can use process signaling again down in the weeds and there are also various",
    "start": "1151400",
    "end": "1157799"
  },
  {
    "text": "Eventing Frameworks out there that uh transcend processes that we can work",
    "start": "1157799",
    "end": "1163320"
  },
  {
    "text": "with um the one that seems to be the most popular is called hook iio I it's",
    "start": "1163320",
    "end": "1169600"
  },
  {
    "start": "1167000",
    "end": "1207000"
  },
  {
    "text": "um from what I could tell there was some interesting political play that went on there but you know if you try to go to",
    "start": "1169600",
    "end": "1175440"
  },
  {
    "text": "any Pages other than the Legacy uh mailing list for it you can't find anything and there's others like JS",
    "start": "1175440",
    "end": "1181600"
  },
  {
    "text": "signals and bean and these look okay um you can do shared memory with MIM cach that's also an option what do all of",
    "start": "1181600",
    "end": "1188159"
  },
  {
    "text": "these things have in common well they all require me to hook into some third party technology that",
    "start": "1188159",
    "end": "1195840"
  },
  {
    "text": "you may or may not want to add to your stack or and or they require a great deal of",
    "start": "1195840",
    "end": "1201480"
  },
  {
    "text": "low-level programming something that I've also said I don't want to do so two solutions that vertex provides",
    "start": "1201480",
    "end": "1210120"
  },
  {
    "start": "1207000",
    "end": "1219000"
  },
  {
    "text": "us the first is the event bus the event bus is what we like to call the nervous",
    "start": "1210120",
    "end": "1215720"
  },
  {
    "text": "system of vertex um it is a cross cutting",
    "start": "1215720",
    "end": "1221280"
  },
  {
    "start": "1219000",
    "end": "1281000"
  },
  {
    "text": "abstraction that's built on the platform so it's built in you don't have to go get anything to install it it's not an",
    "start": "1221280",
    "end": "1227159"
  },
  {
    "text": "add-on it's part of the it allows us to send and receive transient messages through the",
    "start": "1227159",
    "end": "1233159"
  },
  {
    "text": "throughout the application not persistent messages if you want them to be persistent you need to hook into more",
    "start": "1233159",
    "end": "1238200"
  },
  {
    "text": "of a persistent work que um work que uh manager that we do have some add-ons",
    "start": "1238200",
    "end": "1244960"
  },
  {
    "text": "that are starting to uh grow up within the uh add-on module Community but this is not available so transient messages",
    "start": "1244960",
    "end": "1251520"
  },
  {
    "text": "if your app dies your messages are gone let's assume it's up this allows the",
    "start": "1251520",
    "end": "1256840"
  },
  {
    "text": "verticals to communicate with each other irrespective of what language they're written",
    "start": "1256840",
    "end": "1262880"
  },
  {
    "text": "in whether or not they're in the same vertex instance maybe they're in different",
    "start": "1262880",
    "end": "1270760"
  },
  {
    "text": "instances and it even allows clients side JavaScript running in the browser",
    "start": "1270760",
    "end": "1275799"
  },
  {
    "text": "to communicate on the same bus more on that later so messages are sent on the event",
    "start": "1275799",
    "end": "1282480"
  },
  {
    "start": "1281000",
    "end": "1306000"
  },
  {
    "text": "bus to an address vertex doesn't bother with any fancy schemes for addresses um",
    "start": "1282480",
    "end": "1287840"
  },
  {
    "text": "simp a string any strings valid um it is wise to use some kind of a name spacing",
    "start": "1287840",
    "end": "1293240"
  },
  {
    "text": "scheme to keep things organized so you know something like messages. inbound. a",
    "start": "1293240",
    "end": "1298960"
  },
  {
    "text": "something that makes sense to you to kind of keep things uh making sense as the application",
    "start": "1298960",
    "end": "1305440"
  },
  {
    "text": "grows so a Handler is what a thing that receives messages from the bus now we",
    "start": "1305440",
    "end": "1310720"
  },
  {
    "start": "1306000",
    "end": "1424000"
  },
  {
    "text": "have handlers in vertex for just standard um programming such you know we",
    "start": "1310720",
    "end": "1316520"
  },
  {
    "text": "have HTTP request handlers we have TCP request handlers but we also have handlers that are specifically involved",
    "start": "1316520",
    "end": "1323080"
  },
  {
    "text": "in working with the event bus so you register a Handler at an address this Handler can be in any",
    "start": "1323080",
    "end": "1329360"
  },
  {
    "text": "vertical or any instance of a vertical so we could be running multiple vertex",
    "start": "1329360",
    "end": "1334760"
  },
  {
    "text": "instances on the same box uh more likely we would run multiple vertex instances",
    "start": "1334760",
    "end": "1340159"
  },
  {
    "text": "on multiple boxes and then we can use hazelcast to uh work with",
    "start": "1340159",
    "end": "1346960"
  },
  {
    "text": "these",
    "start": "1346960",
    "end": "1349960"
  },
  {
    "text": "I'm sorry can you say the last part one more",
    "start": "1355679",
    "end": "1359278"
  },
  {
    "text": "time so um the question is how do we coordinate the uh communication across",
    "start": "1362000",
    "end": "1369480"
  },
  {
    "text": "vertex denes on different machines how do we get them on the same event bus um I'm actually going to bring that up a",
    "start": "1369480",
    "end": "1375200"
  },
  {
    "text": "little bit later but I'll go ahead and say it now there is a cluster mode that is built into vertex it's actually",
    "start": "1375200",
    "end": "1380720"
  },
  {
    "text": "leveraging hazelcast to Cluster the jvm instances and um that right now that's",
    "start": "1380720",
    "end": "1387880"
  },
  {
    "text": "restricted to the event bus but we'll see some more features coming out around that as vertex uh continues to move",
    "start": "1387880",
    "end": "1395080"
  },
  {
    "text": "forward um other things about handlers we can have multiple handlers registered at a single address so I can have",
    "start": "1395080",
    "end": "1402200"
  },
  {
    "text": "multiple pieces of code that are interested in receiving messages that are directed to a particular address I",
    "start": "1402200",
    "end": "1408000"
  },
  {
    "text": "can also have a single Handler registered at multiple addresses and so I can have one address that a I can have",
    "start": "1408000",
    "end": "1416240"
  },
  {
    "text": "um a single Handler that knows how to deal with different types of messages that are coming to different locations",
    "start": "1416240",
    "end": "1422120"
  },
  {
    "text": "how do I register a Handler so we're going to do most of the examples in Java code so here basically we're going to",
    "start": "1422120",
    "end": "1427360"
  },
  {
    "start": "1424000",
    "end": "1453000"
  },
  {
    "text": "get the event bus object from the vertex object vertex object is available to you",
    "start": "1427360",
    "end": "1433120"
  },
  {
    "text": "whenever you extend vertical and then we have a Handler interface we're going to implement an",
    "start": "1433120",
    "end": "1439679"
  },
  {
    "text": "anonymous Handler here and basically all it's going to do is print out a message",
    "start": "1439679",
    "end": "1444799"
  },
  {
    "text": "based on the message body and then we register that Handler at the address it's as simple as that now we support",
    "start": "1444799",
    "end": "1450559"
  },
  {
    "text": "multiple styles of messaging uh in vertex so of course we have Pub sub",
    "start": "1450559",
    "end": "1457120"
  },
  {
    "start": "1453000",
    "end": "1466000"
  },
  {
    "text": "deliver a single message to all handlers registered at an address that makes",
    "start": "1457120",
    "end": "1463159"
  },
  {
    "text": "sense how do we do that well it makes sense we have a publish method that takes an address and takes a message and",
    "start": "1463159",
    "end": "1470399"
  },
  {
    "start": "1466000",
    "end": "1477000"
  },
  {
    "text": "sends it to that address and then all of the handlers that are registered there will receive it we also have",
    "start": "1470399",
    "end": "1476840"
  },
  {
    "text": "point-to-point messaging with pointto point it's going to deliver to at most one Handler that's",
    "start": "1476840",
    "end": "1483360"
  },
  {
    "start": "1477000",
    "end": "1505000"
  },
  {
    "text": "registered at an address it uses non-strict round robin uh load",
    "start": "1483360",
    "end": "1488760"
  },
  {
    "text": "balancing and optionally you can specify a reply a reply Handler you have a reply",
    "start": "1488760",
    "end": "1494320"
  },
  {
    "text": "Handler that reply Handler can have it its own reply Handler and you can have sort of a two-way communication process",
    "start": "1494320",
    "end": "1501120"
  },
  {
    "text": "going on between message handlers so when we do P2P we're going to do it with",
    "start": "1501120",
    "end": "1506240"
  },
  {
    "start": "1505000",
    "end": "1609000"
  },
  {
    "text": "the uh sin method",
    "start": "1506240",
    "end": "1510320"
  },
  {
    "text": "yes so you just did something very naughty so you so so so the question was",
    "start": "1520799",
    "end": "1527960"
  },
  {
    "text": "how do you um you know if you're dealing with brown Robin you've got one",
    "start": "1527960",
    "end": "1533120"
  },
  {
    "text": "processor over here that's involved in a long running job and so we want to notice that load",
    "start": "1533120",
    "end": "1539720"
  },
  {
    "text": "and not send the request that direction well again you think load a long running",
    "start": "1539720",
    "end": "1545159"
  },
  {
    "text": "job you think blocking work when you think blocking work you think no this can't run on the event bus or the",
    "start": "1545159",
    "end": "1553640"
  },
  {
    "text": "event again but you don't want to do that on an event Loop that's one of the problems",
    "start": "1556679",
    "end": "1564240"
  },
  {
    "text": "with node is you and it's been a discussion that we've had for a very long time in the community as I've observed is that when we're doing things",
    "start": "1564240",
    "end": "1570919"
  },
  {
    "text": "on an event Loop what happens when you block for a long period of time processing something on the event Loop the app stops nobody else can get",
    "start": "1570919",
    "end": "1578120"
  },
  {
    "text": "requests now vertex deals with this I'm not going to deal with it in this section but if you hold on um a few",
    "start": "1578120",
    "end": "1584919"
  },
  {
    "text": "minutes we'll actually get to that specific solution because is a big problem that vertex attempts to uh to",
    "start": "1584919",
    "end": "1593120"
  },
  {
    "text": "address okay so we're doing point-to-point messaging we can just do a send we can do a fire and forget but",
    "start": "1594279",
    "end": "1601320"
  },
  {
    "text": "we can also do a reply uh request reply model so the way we do",
    "start": "1601320",
    "end": "1608880"
  },
  {
    "text": "that um I've got the sender and the receiver code here so the sender and get",
    "start": "1608880",
    "end": "1614039"
  },
  {
    "text": "my uh slide here is very small so I'm going to look up here to read it to you um so our sin method we have an address",
    "start": "1614039",
    "end": "1620120"
  },
  {
    "text": "we have a message and um we're going to address",
    "start": "1620120",
    "end": "1625159"
  },
  {
    "text": "add to the last argument here a Handler that Handler is specifically there for a",
    "start": "1625159",
    "end": "1630559"
  },
  {
    "text": "rep a reply Handler so we have some methods do not do not take a Handler they just send they give the message and",
    "start": "1630559",
    "end": "1636919"
  },
  {
    "text": "it's gone here we're going to expect a reply the receiver is going to handle",
    "start": "1636919",
    "end": "1643679"
  },
  {
    "text": "the message and then on the message object itself it has a reply method",
    "start": "1643679",
    "end": "1648799"
  },
  {
    "text": "where it can send a reply that reply will go back to the original sender and",
    "start": "1648799",
    "end": "1654000"
  },
  {
    "text": "will be handled by that uh uh reply Handler that we see in the top section",
    "start": "1654000",
    "end": "1659559"
  },
  {
    "text": "of code now that one could also reply and we could have two-way communication",
    "start": "1659559",
    "end": "1665399"
  },
  {
    "text": "going back and forth as much as as we desired now this is one part of the API",
    "start": "1665399",
    "end": "1670519"
  },
  {
    "text": "that differs a little bit uh from language to language and we'll see an example of that when we get into some",
    "start": "1670519",
    "end": "1675799"
  },
  {
    "text": "JavaScript code towards the end but for the most part even if the API in",
    "start": "1675799",
    "end": "1681360"
  },
  {
    "text": "terms of the mechanics of using it if they differ a little bit the concepts are for the most part um all",
    "start": "1681360",
    "end": "1688600"
  },
  {
    "text": "present so uh message types what kind of stuff can we send around we can send around strings Primitives uh box",
    "start": "1688600",
    "end": "1695480"
  },
  {
    "start": "1693000",
    "end": "1738000"
  },
  {
    "text": "Primitives booleans we can also send around Json objects in fact Json is one",
    "start": "1695480",
    "end": "1701640"
  },
  {
    "text": "of the preferred communication mechanisms for vertex reason why why",
    "start": "1701640",
    "end": "1708039"
  },
  {
    "text": "almost all of the languages that we work in with the exception of java have very",
    "start": "1708039",
    "end": "1713440"
  },
  {
    "text": "nice very easy semantics for dealing with Json data with Java we actually",
    "start": "1713440",
    "end": "1719120"
  },
  {
    "text": "have this uh Json object that we work with specifically for",
    "start": "1719120",
    "end": "1724760"
  },
  {
    "text": "vertex is there a question in the back okay and then we also have buffers and",
    "start": "1724760",
    "end": "1730799"
  },
  {
    "text": "I'll touch on buffers a little bit later on so again we said we can uh distribute",
    "start": "1730799",
    "end": "1737799"
  },
  {
    "text": "vertex so here we have again uh three instances of vertex all running several",
    "start": "1737799",
    "end": "1743559"
  },
  {
    "start": "1738000",
    "end": "1763000"
  },
  {
    "text": "verticals and we have a single event bus that spans all of them and we deal with",
    "start": "1743559",
    "end": "1748720"
  },
  {
    "text": "that uh using hazelcast so I'm not going to go through the API for that right now it's really not an API there's just some",
    "start": "1748720",
    "end": "1754880"
  },
  {
    "text": "command line um arguments that we're going to pass and also some configuration files that we could edit",
    "start": "1754880",
    "end": "1760480"
  },
  {
    "text": "and basically set up our clustering where one node becomes the kind of the orchestrator of the cluster and the",
    "start": "1760480",
    "end": "1766600"
  },
  {
    "text": "other nodes uh for the most part become slaves but all of that is configuration",
    "start": "1766600",
    "end": "1772120"
  },
  {
    "text": "runs under the hood when you're in your code writing your code you don't have to think about whether my vertical is",
    "start": "1772120",
    "end": "1778799"
  },
  {
    "text": "running on this node versus this node versus this node all of that stuff essentially just",
    "start": "1778799",
    "end": "1785039"
  },
  {
    "start": "1785000",
    "end": "1902000"
  },
  {
    "text": "works I think you had a question in the",
    "start": "1785039",
    "end": "1789398"
  },
  {
    "text": "back what are we using for Json support in in um in the Java code",
    "start": "1791399",
    "end": "1799320"
  },
  {
    "text": "specifically so so ver uh so Tim when he implemented vertex he implemented his",
    "start": "1800720",
    "end": "1806039"
  },
  {
    "text": "own set of jsot uh object support and then the uh the other",
    "start": "1806039",
    "end": "1812120"
  },
  {
    "text": "languages for the most part we're just using the built-in uh support for",
    "start": "1812120",
    "end": "1817320"
  },
  {
    "text": "Json",
    "start": "1817320",
    "end": "1820320"
  },
  {
    "text": "yes yes yes so the question is ultimately you know what are we using as the underlying communication mechanism",
    "start": "1824640",
    "end": "1830799"
  },
  {
    "text": "almost all the communications being done through nio2 which of course means that we",
    "start": "1830799",
    "end": "1836559"
  },
  {
    "text": "require Java 7 for vertex so if you're not running Java 7 you're not running",
    "start": "1836559",
    "end": "1844679"
  },
  {
    "text": "vertex do I have to have a configuration file for vertex in general or for the",
    "start": "1850760",
    "end": "1856799"
  },
  {
    "text": "clustering yes there is a cluster config file and if we had some if we have some time at end I can pull it up it's not",
    "start": "1856799",
    "end": "1862360"
  },
  {
    "text": "very fancy or exciting it's just configuration for",
    "start": "1862360",
    "end": "1868158"
  },
  {
    "text": "hazelcast so something that's somewhat unique to vertex is that we can also",
    "start": "1871639",
    "end": "1877200"
  },
  {
    "text": "using the same programming model we can go into the browser and so using",
    "start": "1877200",
    "end": "1883440"
  },
  {
    "text": "sockjs um vertex implements what's called an event bus bridge that allows",
    "start": "1883440",
    "end": "1889000"
  },
  {
    "text": "you to have code running on the server interacting with code running within the browser using the same event bus",
    "start": "1889000",
    "end": "1895880"
  },
  {
    "text": "programming model so what might this look like so on the server side here",
    "start": "1895880",
    "end": "1901799"
  },
  {
    "text": "we're again we're creating an HTTP server and we're setting up uh a basic",
    "start": "1901799",
    "end": "1908720"
  },
  {
    "start": "1902000",
    "end": "1999000"
  },
  {
    "text": "request Handler that's just going to serve up two files an index.html file",
    "start": "1908720",
    "end": "1913760"
  },
  {
    "text": "and then the very important vertex bus. JS so so if in your app you want to",
    "start": "1913760",
    "end": "1919519"
  },
  {
    "text": "write code that uses the event bus in the browser you will have to include this you also have to include sockjs in",
    "start": "1919519",
    "end": "1926440"
  },
  {
    "text": "uh your application and then we're going to create a sockjs server so vertex has a full implementation of the uh sockjs",
    "start": "1926440",
    "end": "1934760"
  },
  {
    "text": "API we're going to create that server and then we're going to create a bridge and we're configuring the bridge here",
    "start": "1934760",
    "end": "1941720"
  },
  {
    "text": "and what we've done is we've told it three things um what prefix do I want you to",
    "start": "1941720",
    "end": "1947519"
  },
  {
    "text": "send request to and so when I go try to communicate with the event bus I'm going to be making HTTP requests to SL event",
    "start": "1947519",
    "end": "1954679"
  },
  {
    "text": "bus and then I'm also dealing with another",
    "start": "1954679",
    "end": "1960200"
  },
  {
    "text": "problem I've got this sockjs bridge out there now so theoretically any browser",
    "start": "1960200",
    "end": "1966360"
  },
  {
    "text": "that can hit my URL can send messages into my system that's",
    "start": "1966360",
    "end": "1972159"
  },
  {
    "text": "bad and this is still bad because what we've done we've got two arguments here one says what types of incoming",
    "start": "1972159",
    "end": "1978320"
  },
  {
    "text": "connections am I going to allow what types of outgoing connections am I going to allow and here I've given it a blank",
    "start": "1978320",
    "end": "1984840"
  },
  {
    "text": "array with a single blank object in that says allow everything this is a",
    "start": "1984840",
    "end": "1990679"
  },
  {
    "text": "demo listening on 880 so client code what does that look",
    "start": "1990679",
    "end": "1996799"
  },
  {
    "text": "like so in the client side we've got our sockjs we've got our vertex bus we're going to uh get a handle to the vertex",
    "start": "1996799",
    "end": "2006159"
  },
  {
    "start": "1999000",
    "end": "2029000"
  },
  {
    "text": "event bus again through the vertex object look it looks exactly like the server site code and then we're going to",
    "start": "2006159",
    "end": "2011240"
  },
  {
    "text": "say on open so we have some events that we can listen for on open means okay the",
    "start": "2011240",
    "end": "2016320"
  },
  {
    "text": "event bus is initialized and ready I want you to register a Handler and basically what I want you to do is Echo",
    "start": "2016320",
    "end": "2023960"
  },
  {
    "text": "back any message that I receive so now let's talk about another",
    "start": "2023960",
    "end": "2031519"
  },
  {
    "start": "2029000",
    "end": "2059000"
  },
  {
    "text": "way of uh communicating or sharing information between processes and that",
    "start": "2031519",
    "end": "2037320"
  },
  {
    "text": "shared IM mutable State now why do I have Rich hickey up here because rich hicki is all about immutability and values and so I thought he was a uh a",
    "start": "2037320",
    "end": "2045000"
  },
  {
    "text": "good uh person to carry this forward so what if we wanted to manage an inmemory",
    "start": "2045000",
    "end": "2051800"
  },
  {
    "text": "web cach could we do that with message passing in the event",
    "start": "2051800",
    "end": "2059440"
  },
  {
    "start": "2059000",
    "end": "2094000"
  },
  {
    "text": "bus well we want the app to scale across all available cores modeling this using",
    "start": "2060079",
    "end": "2065398"
  },
  {
    "text": "message passings problematics at one end of the scale you could have a single vertical that manages the cash but that",
    "start": "2065399",
    "end": "2072280"
  },
  {
    "text": "means that all requests to the cash are going to have to be serialized through a single threaded instance and we've lost",
    "start": "2072280",
    "end": "2078760"
  },
  {
    "text": "our uh vertical scalability that we wanted now we can improve that by having",
    "start": "2078760",
    "end": "2085000"
  },
  {
    "text": "multiple instances of the vertical managing different parts of the cash but",
    "start": "2085000",
    "end": "2090158"
  },
  {
    "text": "that starts to get very ugly and complicated really quickly so we really don't want to do this with message",
    "start": "2090159",
    "end": "2097040"
  },
  {
    "start": "2094000",
    "end": "2260000"
  },
  {
    "text": "passing it's not a good fit for the problem now we said shared state is",
    "start": "2097040",
    "end": "2102560"
  },
  {
    "text": "dangerous and we prevent a lot of shared state in vertex out of the box to make it easy to assume a single-threaded",
    "start": "2102560",
    "end": "2109560"
  },
  {
    "text": "programming model but as it turns out shared state is only dangerous if it's mutable in fact go back to Effective",
    "start": "2109560",
    "end": "2116960"
  },
  {
    "text": "Java that you know the book that's been around since we've been doing Java programming for the most part it tells",
    "start": "2116960",
    "end": "2122520"
  },
  {
    "text": "us that if a a data is immutable it can be shared freely and in fact such sharing is encouraged and we want to",
    "start": "2122520",
    "end": "2129280"
  },
  {
    "text": "make that easy to do and so vertex actually has a shared data object that is part of",
    "start": "2129280",
    "end": "2137920"
  },
  {
    "text": "the platform that allows us to work with a couple of different shared data Stores",
    "start": "2137920",
    "end": "2143440"
  },
  {
    "text": "um first of all we have a collection of uh Java util concurrent concurrent maps",
    "start": "2143440",
    "end": "2150280"
  },
  {
    "text": "and so I can create a map out there it's a concurrent map supports Atomic updates",
    "start": "2150280",
    "end": "2156160"
  },
  {
    "text": "and I can put put a mutable data into that map and that map will be visible to all of my vertex instances I'm sorry all",
    "start": "2156160",
    "end": "2163880"
  },
  {
    "text": "of my verticals I need to speak correctly we also manage a set uh a",
    "start": "2163880",
    "end": "2169280"
  },
  {
    "text": "collection of java util sets as it turns out these sets are also backed by a",
    "start": "2169280",
    "end": "2175280"
  },
  {
    "text": "concurrent map so the same underlying infrastructure going on there elements",
    "start": "2175280",
    "end": "2180960"
  },
  {
    "text": "need to be immutable values sort of",
    "start": "2180960",
    "end": "2188119"
  },
  {
    "text": "we'll get into that and currently this is only",
    "start": "2188119",
    "end": "2193560"
  },
  {
    "text": "available within a Vertex instance so a single jvm process right now if I have a cluster I",
    "start": "2193560",
    "end": "2200599"
  },
  {
    "text": "cannot share data across multiple clusters I mean across multiple instances within a cluster this is",
    "start": "2200599",
    "end": "2207280"
  },
  {
    "text": "planned uh hazelcast supports this type of stuff and so um it's just a matter of",
    "start": "2207280",
    "end": "2212880"
  },
  {
    "text": "it actually being implemented and tested and put into a release",
    "start": "2212880",
    "end": "2218680"
  },
  {
    "text": "question yeah so um so the question I think the question is if I've got",
    "start": "2230720",
    "end": "2238520"
  },
  {
    "text": "objects out there that are immutable that I've",
    "start": "2238520",
    "end": "2244160"
  },
  {
    "text": "created but then I've got I ated class loading how does that",
    "start": "2244160",
    "end": "2250838"
  },
  {
    "text": "work so basically what we're going to have to do to make this happen is",
    "start": "2258160",
    "end": "2263720"
  },
  {
    "text": "cheat so what are allowed what can we put in here actually if you drill down into the source code both of these data",
    "start": "2263920",
    "end": "2270640"
  },
  {
    "text": "structures employ a type Checker and they look at what's being pushed into the map or the set to ensure that that",
    "start": "2270640",
    "end": "2276720"
  },
  {
    "text": "it's a type that the concurrency model would actually support so we can put strings in there obviously they're are",
    "start": "2276720",
    "end": "2282079"
  },
  {
    "text": "mutable box Primitives we can put bite arrays um buffers again not going to",
    "start": "2282079",
    "end": "2287319"
  },
  {
    "text": "talk about buffers tonight in short they are kind of a smart bite array so it's a",
    "start": "2287319",
    "end": "2294000"
  },
  {
    "text": "sequence of zero more bytes you can write to it you can read from it and it expands automatically as necessary to",
    "start": "2294000",
    "end": "2300160"
  },
  {
    "text": "accommodate any additional bites so it feels kind of like a uh a vector or a ray list of bites if you will um if you",
    "start": "2300160",
    "end": "2309119"
  },
  {
    "text": "actually use this um it's going to be copied as it's shared between vertical",
    "start": "2309119",
    "end": "2314880"
  },
  {
    "text": "so you never actually see the same instance and then we have this last",
    "start": "2314880",
    "end": "2320000"
  },
  {
    "text": "caveat here any implementers of",
    "start": "2320000",
    "end": "2326440"
  },
  {
    "text": "sharable this is how vertex Json objects are able to be placed into the",
    "start": "2326560",
    "end": "2335160"
  },
  {
    "start": "2335000",
    "end": "2404000"
  },
  {
    "text": "map um what does sharable do nothing it's a",
    "start": "2335160",
    "end": "2341560"
  },
  {
    "text": "marker it's a marker that carries the Java doc that says if you slap this on a",
    "start": "2341560",
    "end": "2346920"
  },
  {
    "text": "class it must be thread safe so",
    "start": "2346920",
    "end": "2353359"
  },
  {
    "text": "danger if you're going to use this put on now what about the class loader isolation problem well as it turns out",
    "start": "2353359",
    "end": "2361839"
  },
  {
    "text": "if I Implement a class and I put it on the system class path then yes it is is available across all of the verticals so",
    "start": "2361839",
    "end": "2369640"
  },
  {
    "text": "if I have a custom class of my own that I want to implement I need to do a couple of a couple of things first of",
    "start": "2369640",
    "end": "2376319"
  },
  {
    "text": "all I need to make sure it's thread safe second of all I need to make sure it implements uh sharable and third I need",
    "start": "2376319",
    "end": "2382440"
  },
  {
    "text": "to get it on the uh system class path so again this is the you know the- CP",
    "start": "2382440",
    "end": "2387760"
  },
  {
    "text": "arguments that I'm pushing to the Java process uh on Startup so you do those three things you can uh share your own",
    "start": "2387760",
    "end": "2395319"
  },
  {
    "text": "custom classes between the",
    "start": "2395319",
    "end": "2400078"
  },
  {
    "text": "verticals so shared map so I've got two verticals here",
    "start": "2401800",
    "end": "2406920"
  },
  {
    "start": "2404000",
    "end": "2424000"
  },
  {
    "text": "imagine that in one vertical I'm getting a map um app docash if it doesn't exist",
    "start": "2406920",
    "end": "2413480"
  },
  {
    "text": "it's going to create that map and give me back the instance and then I'm putting in the user ID 42 in another",
    "start": "2413480",
    "end": "2419000"
  },
  {
    "text": "vertical I get the map back out and I get the value out of the cash shared set",
    "start": "2419000",
    "end": "2424400"
  },
  {
    "start": "2424000",
    "end": "2475000"
  },
  {
    "text": "Works similarly here we've got a set called app. sessions we're going to put a session uid in there and then in the",
    "start": "2424400",
    "end": "2431880"
  },
  {
    "text": "other vertical I'm going to get the sessions out Loop through them and do something useful with them so this is",
    "start": "2431880",
    "end": "2437480"
  },
  {
    "text": "kind of the extent of the shared data capabilities that we have today so again",
    "start": "2437480",
    "end": "2442839"
  },
  {
    "text": "so between processes we got a couple of good stories now I can do message passing on the one hand where that makes",
    "start": "2442839",
    "end": "2450520"
  },
  {
    "text": "sense I can do shared data on the other hand where that makes sense so both of",
    "start": "2450520",
    "end": "2456000"
  },
  {
    "text": "these available to you out of the box in the framework allowing you to do coordination between multiple processes",
    "start": "2456000",
    "end": "2463359"
  },
  {
    "text": "very easily much more easily than you would be able to do uh using uh using",
    "start": "2463359",
    "end": "2471079"
  },
  {
    "text": "node which brings us to The Last Problem the event",
    "start": "2471079",
    "end": "2478680"
  },
  {
    "start": "2475000",
    "end": "2489000"
  },
  {
    "text": "Loop this is the one I said that we couldn't solve at least we can't solve it in node",
    "start": "2478680",
    "end": "2487440"
  },
  {
    "text": "easily so what is node node is the implementation of the reactor",
    "start": "2487440",
    "end": "2492560"
  },
  {
    "start": "2489000",
    "end": "2624000"
  },
  {
    "text": "pattern what's the reactor pattern well reactor patterns got three main things",
    "start": "2492560",
    "end": "2498280"
  },
  {
    "text": "there's a paper out there that you can read that goes into a great level of detail but at the end of the day it's what you've got an event",
    "start": "2498280",
    "end": "2505680"
  },
  {
    "text": "Loop you have an application registering handlers with the event Loop in some way",
    "start": "2505680",
    "end": "2512520"
  },
  {
    "text": "and then you've got events that happen that trigger those handlers and this is how all of the programming takes place",
    "start": "2512520",
    "end": "2519640"
  },
  {
    "text": "something happens I listen to it I do something with it something else happens I listen to it you know it's swing it's",
    "start": "2519640",
    "end": "2525760"
  },
  {
    "text": "uh any kind of UI programming all different uh implementations of the reactor pattern so this is what we",
    "start": "2525760",
    "end": "2531240"
  },
  {
    "text": "carried into uh node.js so what do we know about the reactor",
    "start": "2531240",
    "end": "2538520"
  },
  {
    "text": "pattern well we've got in node we have a single thread we have a single event",
    "start": "2538520",
    "end": "2544920"
  },
  {
    "text": "Loop can't really do anything about this now we can go hack V8 and there are actually projects out",
    "start": "2544920",
    "end": "2551880"
  },
  {
    "text": "there that are hacking V8 to give you multiple threads in V8 if you want to do",
    "start": "2551880",
    "end": "2558240"
  },
  {
    "text": "that knock yourself out I'd much rather go with a pro a a platform uh like the",
    "start": "2558240",
    "end": "2564280"
  },
  {
    "text": "jvm that's kind of been working on this problem for several years and has uh you",
    "start": "2564280",
    "end": "2569640"
  },
  {
    "text": "know gone to Great Links to get it right and again you want to go hack on V8 again you're going at an even lower",
    "start": "2569640",
    "end": "2575599"
  },
  {
    "text": "level of OB abstraction than you were before what else do we know everything",
    "start": "2575599",
    "end": "2580720"
  },
  {
    "text": "runs on it you run code in node.js it's running on the event",
    "start": "2580720",
    "end": "2587520"
  },
  {
    "text": "Loop you must not block the event Loop if you go out and",
    "start": "2589400",
    "end": "2596000"
  },
  {
    "text": "calculate you know Fibonacci 1000 you go out and start doing prime",
    "start": "2596000",
    "end": "2602760"
  },
  {
    "text": "number identification you go out and work with some Legacy blocking API do",
    "start": "2602760",
    "end": "2607920"
  },
  {
    "text": "image processing whatever it is while that's going on all those other",
    "start": "2607920",
    "end": "2614440"
  },
  {
    "text": "requests that are coming into your process they're waiting because there's only one thread only one thing doing",
    "start": "2614440",
    "end": "2620680"
  },
  {
    "text": "work at a time so what are the problems with that kind of a programming model well some",
    "start": "2620680",
    "end": "2625800"
  },
  {
    "start": "2624000",
    "end": "2720000"
  },
  {
    "text": "work is just naturally blocking you know anytime you want to do intensive data crunching you want to",
    "start": "2625800",
    "end": "2632920"
  },
  {
    "text": "process genome sequence data you want to process large graph networks you want to process",
    "start": "2632920",
    "end": "2639640"
  },
  {
    "text": "Big Data all of these things they take time they take processor power and so these things are going to",
    "start": "2639640",
    "end": "2646359"
  },
  {
    "text": "block the event loop we're not going to be able to deal with threads also third- party blocking apis you want to talk to",
    "start": "2646359",
    "end": "2651640"
  },
  {
    "text": "a database over jdbc for example of course you can't do that in node but similarly it's a blocking API JDP assume",
    "start": "2651640",
    "end": "2660559"
  },
  {
    "text": "jdbc assumes I'm going to send a SQL query I'm going to get back a response I'm going to do something with it I'm going to send another query I'm going to",
    "start": "2660559",
    "end": "2666760"
  },
  {
    "text": "get something back I'm going to wait so anytime I've got IO going on anytime I've got Network traffic going on my",
    "start": "2666760",
    "end": "2672839"
  },
  {
    "text": "processor is just sitting there and doing nothing and it's also not doing anything you know with the other requests that are sitting there",
    "start": "2672839",
    "end": "2679480"
  },
  {
    "text": "waiting so a pure reactor is just not a good fit for this kind of",
    "start": "2679480",
    "end": "2684880"
  },
  {
    "text": "work so if the type of application you're building is very amenable to the",
    "start": "2684880",
    "end": "2691800"
  },
  {
    "text": "asynchronous non-blocking io problem the note is an awesome fit for you you're in",
    "start": "2691800",
    "end": "2697640"
  },
  {
    "text": "the sweet spot if you have a lot of this type of work node is not a good fit for you and",
    "start": "2697640",
    "end": "2705559"
  },
  {
    "text": "people have gone crazy trying to make node work for that kind of scenario",
    "start": "2705559",
    "end": "2710800"
  },
  {
    "text": "because everybody said that they had to use node and uh you know they ended up",
    "start": "2710800",
    "end": "2716000"
  },
  {
    "text": "hurting themselves so solution here let's be pragmatic let's",
    "start": "2716000",
    "end": "2723480"
  },
  {
    "start": "2720000",
    "end": "2738000"
  },
  {
    "text": "acknowledge that there are some types of work that want to uh execute on event",
    "start": "2723480",
    "end": "2728599"
  },
  {
    "text": "Loops there are other types of work that don't and so vertex provides us with worker",
    "start": "2728599",
    "end": "2734480"
  },
  {
    "text": "verticals so worker verticals they're not assigned a Vertex",
    "start": "2734480",
    "end": "2740559"
  },
  {
    "start": "2738000",
    "end": "2821000"
  },
  {
    "text": "event Loop threat we're not going to put them on the event loop at all instead we're going to manage a background pool",
    "start": "2740559",
    "end": "2746040"
  },
  {
    "text": "of threads that we call Background threads and so I can flag any one of my",
    "start": "2746040",
    "end": "2753400"
  },
  {
    "text": "verticals as a worker and instead of it going into one of the event Loop threads that equals my number of processors it's",
    "start": "2753400",
    "end": "2759920"
  },
  {
    "text": "going to go into that background thread pool um just as with our regular",
    "start": "2759920",
    "end": "2764960"
  },
  {
    "text": "verticals workers never execute concurrently on multiple threats so this gives us the same single-threaded",
    "start": "2764960",
    "end": "2771359"
  },
  {
    "text": "programming model in the workers that we get with the normal verticals however",
    "start": "2771359",
    "end": "2777040"
  },
  {
    "text": "not allowed to use the TCP or HTTP non-blocking",
    "start": "2777040",
    "end": "2783280"
  },
  {
    "text": "apis so we communicate with ver just like we do any other vertical using the event bus you want to keep worker",
    "start": "2783280",
    "end": "2790200"
  },
  {
    "text": "verticals to a minimum anytime you're using verticals worker verticals you're using them",
    "start": "2790200",
    "end": "2797200"
  },
  {
    "text": "because you're doing something that's blocking well if your entire application is worker verticals and then you've got",
    "start": "2797200",
    "end": "2804280"
  },
  {
    "text": "one non-worker vertical that uh just normal vertical that Services requests and then passes them off to the blocking",
    "start": "2804280",
    "end": "2810119"
  },
  {
    "text": "API what have you done you've just reinvented the old programming model",
    "start": "2810119",
    "end": "2815599"
  },
  {
    "text": "with with a new toy so we want to keep these down so now we've got this complete",
    "start": "2815599",
    "end": "2822319"
  },
  {
    "text": "picture of vertex's model of the reactor this is what the vertex team calls the",
    "start": "2822319",
    "end": "2827520"
  },
  {
    "text": "multi-reactor so we've got our vent Loop thread pool we've got our background threadpool we've got verticals assigned",
    "start": "2827520",
    "end": "2834839"
  },
  {
    "text": "to the right positions and then all the communication is accomplished with the",
    "start": "2834839",
    "end": "2840000"
  },
  {
    "text": "event bus so uh what does this look like so I said something about Fibonacci ear",
    "start": "2840000",
    "end": "2846000"
  },
  {
    "start": "2843000",
    "end": "2934000"
  },
  {
    "text": "so I've got this kind of toy example of a Fibonacci worker what does a Fibonacci worker do well it's going to get a hold",
    "start": "2846000",
    "end": "2852559"
  },
  {
    "text": "of the event bus register a Handler at the FIB request address and when I get a",
    "start": "2852559",
    "end": "2857839"
  },
  {
    "text": "message there I'm going to calculate that Fibonacci number and then I'm going",
    "start": "2857839",
    "end": "2863760"
  },
  {
    "text": "to place the number that was requested in the result in a message and send that to the Fibonacci response",
    "start": "2863760",
    "end": "2871200"
  },
  {
    "text": "address now in my what's called worker exam example this is my normal",
    "start": "2872480",
    "end": "2877960"
  },
  {
    "text": "vertical again I'm getting the event bus I've got a result Handler here that is going to handle responses from the",
    "start": "2877960",
    "end": "2884960"
  },
  {
    "text": "Fibonacci worker and I'm going to register that Handler at the Fibonacci response address and then I have",
    "start": "2884960",
    "end": "2891760"
  },
  {
    "text": "container a container is another variable uh uh object that's available to you when you extend vertical",
    "start": "2891760",
    "end": "2898839"
  },
  {
    "text": "container has a deploy worker vertical method so when I do this it's going to",
    "start": "2898839",
    "end": "2904040"
  },
  {
    "text": "take that and place it all off of the event Loop and put it in that background thread pole my arguments here are the",
    "start": "2904040",
    "end": "2910200"
  },
  {
    "text": "address I've got a configuration object that I can pass in different parameters I can specify the number of instances of",
    "start": "2910200",
    "end": "2918440"
  },
  {
    "text": "the vertical here so if I put in 10 there I would have 10 of these guys and then I've got my Handler that is just",
    "start": "2918440",
    "end": "2923800"
  },
  {
    "text": "sending off the uh the messages to uh the FIB",
    "start": "2923800",
    "end": "2929838"
  },
  {
    "text": "request okay so let's go over the four again quickly and then we'll uh we'll do",
    "start": "2932920",
    "end": "2940799"
  },
  {
    "text": "the fun little uh case study so node.js compels us to use",
    "start": "2940799",
    "end": "2945880"
  },
  {
    "text": "JavaScript or something that we can compile down to JavaScript vertex polyglot good can use",
    "start": "2945880",
    "end": "2954079"
  },
  {
    "text": "whatever language I want no JS inherently single threaded I can make",
    "start": "2954079",
    "end": "2960440"
  },
  {
    "text": "this better but I have to bolt a bunch of things on I have to do a bunch of lowlevel glue C code vertex Leverage The",
    "start": "2960440",
    "end": "2967839"
  },
  {
    "text": "jvm already multi-threaded makes it very easy for me to scale a single vertical",
    "start": "2967839",
    "end": "2973240"
  },
  {
    "text": "across multiple threads no. JS doesn't help us at all",
    "start": "2973240",
    "end": "2979680"
  },
  {
    "text": "out of the box with interprocess communication there are different options out there that we can leverage you got to go bolt something in again",
    "start": "2979680",
    "end": "2987000"
  },
  {
    "text": "from the third party maybe you do want to add that to your stack maybe you don't or again you can do some low-level",
    "start": "2987000",
    "end": "2992920"
  },
  {
    "text": "programming vertex gives us this vent bus out of the box it recognizes this is",
    "start": "2992920",
    "end": "2998119"
  },
  {
    "text": "something that we want to do this is something that we're going to need to do and allows us to communicate across",
    "start": "2998119",
    "end": "3003960"
  },
  {
    "text": "those verticals on multiple threads across verticals on multiple instances of the jvm maybe distributed across many",
    "start": "3003960",
    "end": "3011280"
  },
  {
    "text": "machines and then also all the way down into the browser so I've got a single communication model that is available to",
    "start": "3011280",
    "end": "3018200"
  },
  {
    "text": "me everywhere my code is running and then no. JS requires all the",
    "start": "3018200",
    "end": "3024440"
  },
  {
    "text": "code around on the event Loop if You' got blocking work you're going to run into problems vertex gives us the",
    "start": "3024440",
    "end": "3030119"
  },
  {
    "text": "background workers that allow that blocking work to be done off of the event Loop now there's a lot of other goodies",
    "start": "3030119",
    "end": "3037280"
  },
  {
    "start": "3037000",
    "end": "3139000"
  },
  {
    "text": "in there stuff that you know you can compose your applications with um we",
    "start": "3037280",
    "end": "3043559"
  },
  {
    "text": "have a growing module repository U multiple modules you can",
    "start": "3043559",
    "end": "3049240"
  },
  {
    "text": "pull in to your own apps and then communicate with those of the event bus so we've got you don't have to necess if",
    "start": "3049240",
    "end": "3054680"
  },
  {
    "text": "you all you want to do is serve up static resources we've got a web server module um we have a persister that",
    "start": "3054680",
    "end": "3061319"
  },
  {
    "text": "has been around for a while jdbc is fairly new um we have the work queue that I've mentioned very simple",
    "start": "3061319",
    "end": "3067040"
  },
  {
    "text": "authentication manager probably not good enough for most of you um works well for",
    "start": "3067040",
    "end": "3072599"
  },
  {
    "text": "demos but we need something better um session manager has just come out we've got a socket.io",
    "start": "3072599",
    "end": "3078880"
  },
  {
    "text": "implementation um also very nice detailed feature set I",
    "start": "3078880",
    "end": "3083920"
  },
  {
    "text": "didn't want to go spend my time walking through apis with you I know you guys can all go read so um I didn't want to",
    "start": "3083920",
    "end": "3091079"
  },
  {
    "text": "read apis back to you but there's a whole list of things out there several things that we didn't cover um of course",
    "start": "3091079",
    "end": "3096799"
  },
  {
    "text": "we've got full websocket support we've got the ability to do timers and do timed work with a scheduler um of course",
    "start": "3096799",
    "end": "3103359"
  },
  {
    "text": "we mentioned buffers we also could have very good support for streaming and pumping of data between verticals we can",
    "start": "3103359",
    "end": "3109480"
  },
  {
    "text": "do routing of of requests and of course they have a full featured nonblocking asynchronous file IO API these are all",
    "start": "3109480",
    "end": "3117480"
  },
  {
    "text": "very well documented one of the great things about vertex is that for the most part it's very well documented and if",
    "start": "3117480",
    "end": "3125240"
  },
  {
    "text": "you do have problems you know enough to go jump off into the source code and see how things are working and uh figure out",
    "start": "3125240",
    "end": "3132240"
  },
  {
    "text": "what's going on this is how I figured out most of the uh the shared memory stuff okay so I promised a case",
    "start": "3132240",
    "end": "3141519"
  },
  {
    "start": "3139000",
    "end": "3190000"
  },
  {
    "text": "study what is the case study the case study is a a uh Twitter",
    "start": "3142079",
    "end": "3147440"
  },
  {
    "text": "clone called Twix um it's using of course vertex uh bootstrap and then",
    "start": "3147440",
    "end": "3153440"
  },
  {
    "text": "knockoutjs to do the uh event handling and uh binding in the browser um the",
    "start": "3153440",
    "end": "3159760"
  },
  {
    "text": "code for this I pushed up this morning to GitHub so you can pull it down and play with it it's not quite ready for",
    "start": "3159760",
    "end": "3165799"
  },
  {
    "text": "just out of the-box consumption there's some uh manual leg work that has to be done in mongod DB over the next few days",
    "start": "3165799",
    "end": "3171480"
  },
  {
    "text": "I'm going to get that documented and also try to build the features into the app to make it NE will make that work go",
    "start": "3171480",
    "end": "3177920"
  },
  {
    "text": "away but um just wanted to give you a heads up on that but all the code that we're going to look at is in fact",
    "start": "3177920",
    "end": "3185838"
  },
  {
    "text": "available ah yes the appeal to participation vertex is",
    "start": "3186680",
    "end": "3193040"
  },
  {
    "start": "3190000",
    "end": "3296000"
  },
  {
    "text": "Young vertex needs help there's one guy working full-time on this the rest of it",
    "start": "3193040",
    "end": "3198839"
  },
  {
    "text": "is people like us spending our spare time doing stuff so there is a Google",
    "start": "3198839",
    "end": "3204079"
  },
  {
    "text": "group it is fairly active I probably get anywhere between 5 and 15 messages a day",
    "start": "3204079",
    "end": "3210480"
  },
  {
    "text": "um a lot of it's where's the framework going how are we going to implement this",
    "start": "3210480",
    "end": "3215640"
  },
  {
    "text": "a lot of it's also how do I do this so it's kind of a merger of developers and users uh asking for help codes on GitHub",
    "start": "3215640",
    "end": "3223480"
  },
  {
    "text": "there's an IRC chat I haven't done that before but I know it exists so what do we need well we said you can program in",
    "start": "3223480",
    "end": "3230040"
  },
  {
    "text": "any language that you want if your language isn't there we need you to implement a language Handler for it so",
    "start": "3230040",
    "end": "3236640"
  },
  {
    "text": "those opportunities are there um particularly we're looking for folks who are interested in working on closure um modules we need more",
    "start": "3236640",
    "end": "3245200"
  },
  {
    "text": "persistence modules right now we can do  we can do jdbc um there was a",
    "start": "3245200",
    "end": "3250880"
  },
  {
    "text": "redest one that we had for a while and then it died and now we're trying to resurrect that but you know what if you",
    "start": "3250880",
    "end": "3257079"
  },
  {
    "text": "want to do um couch you want to do um datomic some",
    "start": "3257079",
    "end": "3264440"
  },
  {
    "text": "other store that we I'm thinking about doing the dayt Tomic one myself but at any rate we need that security is a big need",
    "start": "3264440",
    "end": "3273400"
  },
  {
    "text": "you want to do any kind of modern security we just don't have that yet um and of course we need people to talk",
    "start": "3273400",
    "end": "3279240"
  },
  {
    "text": "about it so we need examples we need blogs we need help with the documentation all of these opportunities",
    "start": "3279240",
    "end": "3285000"
  },
  {
    "text": "are there you say can I help with this the answer is yes every time so need you",
    "start": "3285000",
    "end": "3290880"
  },
  {
    "text": "guys to get involved and that's all I have have um",
    "start": "3290880",
    "end": "3296880"
  },
  {
    "start": "3296000",
    "end": "3322000"
  },
  {
    "text": "one last thing that I ask of you I have this talk up on speaker rate I will be",
    "start": "3296880",
    "end": "3302520"
  },
  {
    "text": "giving this talk several times I appreciate your feedback so if you take the time to go visit that URL and fill",
    "start": "3302520",
    "end": "3309640"
  },
  {
    "text": "out an EV evaluation tell me what you like about the talk tell me what sucks about the talk um so that I can make it",
    "start": "3309640",
    "end": "3316200"
  },
  {
    "text": "better for the next group of folks who get to uh sit through it um all the images were uh Creative Commons with the",
    "start": "3316200",
    "end": "3322640"
  },
  {
    "text": "exception of a couple others that I had permission for so I need to show you that okay thank you guys for coming I",
    "start": "3322640",
    "end": "3329240"
  },
  {
    "text": "appreciate [Applause] [Music]",
    "start": "3329240",
    "end": "3339599"
  },
  {
    "text": "it",
    "start": "3339599",
    "end": "3342599"
  }
]