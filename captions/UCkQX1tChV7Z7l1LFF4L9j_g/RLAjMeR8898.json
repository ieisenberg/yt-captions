[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hello everybody today I'll be following up the amazing talk by the react guys with a",
    "start": "9040",
    "end": "15759"
  },
  {
    "text": "different talk on unidirectional stuff so this is a talk about structuring",
    "start": "15759",
    "end": "21480"
  },
  {
    "text": "unidirectional application we have some overlap and I'll be talking about Mercury",
    "start": "21480",
    "end": "26679"
  },
  {
    "text": "instead um so a bit about me I've been trying trying to make web apps simple for a very long time ever since I've had",
    "start": "26679",
    "end": "34120"
  },
  {
    "text": "to build stuff with backbone or angular and I just get really really frustrated um so about two years ago I",
    "start": "34120",
    "end": "44480"
  },
  {
    "text": "tried Elm and I was amazed about at how easy that was the only downside with the",
    "start": "44480",
    "end": "51199"
  },
  {
    "text": "elm solution was it was all hasal and as much as much as I might be able to like",
    "start": "51199",
    "end": "57399"
  },
  {
    "text": "hasal with maybe like six months maybe six months you can't convince a team of",
    "start": "57399",
    "end": "62719"
  },
  {
    "text": "people to write high school and if you can you're in like some kind of special company uh so a quick overview of um",
    "start": "62719",
    "end": "70960"
  },
  {
    "text": "what we'll be talking about I'm going to be describing like",
    "start": "70960",
    "end": "76200"
  },
  {
    "start": "73000",
    "end": "106000"
  },
  {
    "text": "what I think the word un directional means and I might twist the word un directional to mean something it doesn't actually mean but um what's really hard",
    "start": "76200",
    "end": "84479"
  },
  {
    "text": "I'll be comparing it to like existing um stuff around MVC star and FP",
    "start": "84479",
    "end": "90560"
  },
  {
    "text": "literature I took a lot of inspiration from FP literature I think everybody in the web Community took inspiration from",
    "start": "90560",
    "end": "96880"
  },
  {
    "text": "NPC star and if I have time I will actually build that with it because um",
    "start": "96880",
    "end": "102479"
  },
  {
    "text": "talking is only so much you really should show that it works uh so as I go through this talk",
    "start": "102479",
    "end": "109200"
  },
  {
    "start": "106000",
    "end": "160000"
  },
  {
    "text": "I've been working on a library called Mercury it uses um a virtual domination",
    "start": "109200",
    "end": "114240"
  },
  {
    "text": "that's separate from react that's just really lightweight and that simple so",
    "start": "114240",
    "end": "119439"
  },
  {
    "text": "those will like the reference implementations I'll be talking about but you can apply the ideas with flux or",
    "start": "119439",
    "end": "126039"
  },
  {
    "text": "backbone or bacon or just like anything it might be a little bit more difficult",
    "start": "126039",
    "end": "132680"
  },
  {
    "text": "though uh so what's un directional application uh the first time I heard",
    "start": "132680",
    "end": "139040"
  },
  {
    "text": "the word un directional was when watching a talk about react guys so they they get they",
    "start": "139040",
    "end": "145000"
  },
  {
    "text": "did a great job of like coining this new term and basically they say you know any anything that has a single directional",
    "start": "145000",
    "end": "152160"
  },
  {
    "text": "data flow where there's basically no two-way data binding like data just goes",
    "start": "152160",
    "end": "158040"
  },
  {
    "text": "one way not the other way now that clicked with me and I went",
    "start": "158040",
    "end": "164840"
  },
  {
    "start": "160000",
    "end": "182000"
  },
  {
    "text": "back to the elm stuff I saw two years ago and was like wait a second the Elm St is also",
    "start": "164840",
    "end": "170840"
  },
  {
    "text": "unidirectional and just used this like scary word called f FRP which stands for",
    "start": "170840",
    "end": "177239"
  },
  {
    "text": "functional reactive programming which sounds sounds pretty scary to me um so I'm going to jump into an",
    "start": "177239",
    "end": "184680"
  },
  {
    "start": "182000",
    "end": "412000"
  },
  {
    "text": "overview of like what a unidirectional thing is you'll have seen from like react flux talk earlier that like you",
    "start": "184680",
    "end": "192480"
  },
  {
    "text": "know oh you know have you have like one line and it's it's all great and",
    "start": "192480",
    "end": "197640"
  },
  {
    "text": "amazing so my concept is he more heavily inspired by FP and",
    "start": "197640",
    "end": "203360"
  },
  {
    "text": "MVC and so many the examples I've seen in the functional Community is they really like to be explicit so as you can",
    "start": "203360",
    "end": "210599"
  },
  {
    "text": "see over there um there's there's a there's a arrow that goes in One",
    "start": "210599",
    "end": "215920"
  },
  {
    "text": "Direction now it's actually a cycle I haven't really drawn the arrow that goes like through the Dom there's like all",
    "start": "215920",
    "end": "222439"
  },
  {
    "text": "kinds of stuff you don't want to know about happens in the Dom and in the browsers so when building like an FP",
    "start": "222439",
    "end": "230120"
  },
  {
    "text": "style thing they encourage you to model your state so you start off and you",
    "start": "230120",
    "end": "236400"
  },
  {
    "text": "you're FP system you're functional you're pure you're not allowed to have any side",
    "start": "236400",
    "end": "241640"
  },
  {
    "text": "effects so like how do you do a pure UI with no side effects well the only way you can do it is you have a rendering",
    "start": "241640",
    "end": "247959"
  },
  {
    "text": "function that takes the entire state that you want to render and then you just okay I can't do any side effects I",
    "start": "247959",
    "end": "254959"
  },
  {
    "text": "can't do any domination the only thing I can do is return like a scene representation Like",
    "start": "254959",
    "end": "260199"
  },
  {
    "text": "A visual representation of what I want a random now if anyone's seen anything with react they do something like that",
    "start": "260199",
    "end": "267600"
  },
  {
    "text": "the rendering function returns a virtual Dom my examples with Mercury return a virtu as well it's just a slightly different",
    "start": "267600",
    "end": "273880"
  },
  {
    "text": "virtual Dom um so that's the rendering part and the rending parts all simple and pure and like one directional and it's",
    "start": "273880",
    "end": "279840"
  },
  {
    "text": "amazing and it's fantastic works great so what about your stage you were forced",
    "start": "279840",
    "end": "284919"
  },
  {
    "text": "to like pick a state so you're going to sit down you're actually going to think about like you know what's the the main",
    "start": "284919",
    "end": "290479"
  },
  {
    "text": "of my application what are all these things I need to render and you're just going to describe the entire State and",
    "start": "290479",
    "end": "298680"
  },
  {
    "text": "every time that changes just trigger a reender that's the that that's the way that",
    "start": "298680",
    "end": "303840"
  },
  {
    "text": "works um so at some point we have to actually",
    "start": "303840",
    "end": "309120"
  },
  {
    "text": "update State at some point we have to actually capture user intent and do something",
    "start": "309120",
    "end": "315199"
  },
  {
    "text": "so both Mercury and react use um a dispatcher or delegator to take incoming Roy Dom",
    "start": "315199",
    "end": "322479"
  },
  {
    "text": "events and delegate them to the piece of code that should be handling it now again based on FP lit",
    "start": "322479",
    "end": "330639"
  },
  {
    "text": "the people in the function retive Community think you should describe",
    "start": "330639",
    "end": "336120"
  },
  {
    "text": "your your user intent and the user interactions you want to handle U with types they just say you",
    "start": "336120",
    "end": "343240"
  },
  {
    "text": "know okay if I have a dummy app that can like add a Fred I'm going to have an add",
    "start": "343240",
    "end": "348759"
  },
  {
    "text": "Fred type with like a new Fred ID and like maybe like a Fred name or",
    "start": "348759",
    "end": "354319"
  },
  {
    "text": "description if I want to add a message or have a new new add message type with",
    "start": "354319",
    "end": "359400"
  },
  {
    "text": "a message ID a Fred ID maybe the message body you know whatever else you might",
    "start": "359400",
    "end": "365000"
  },
  {
    "text": "want so you end up with defining your different inputs and then once you've got one of",
    "start": "365000",
    "end": "371880"
  },
  {
    "text": "these new events that's already like in your application domain so it's like an",
    "start": "371880",
    "end": "377199"
  },
  {
    "text": "ad Fred message um you just run you just write you just run your business logic at that",
    "start": "377199",
    "end": "384160"
  },
  {
    "text": "point you run your updating logic to update the state to New State you you",
    "start": "384160",
    "end": "389680"
  },
  {
    "text": "know okay I have a Fred I'm going to like append list of Freds your state changes you've got like a classical",
    "start": "389680",
    "end": "396599"
  },
  {
    "text": "observable representation of your state the vi gets updated and you go to cycle just just it just gets",
    "start": "396599",
    "end": "405319"
  },
  {
    "text": "rendered and that's that's where the UN directional part comes in and that's how",
    "start": "405319",
    "end": "410400"
  },
  {
    "text": "the UN directional data flow works now this is where I got stuck with FP",
    "start": "410400",
    "end": "418479"
  },
  {
    "start": "412000",
    "end": "806000"
  },
  {
    "text": "literature thep Community just says oh you don't need any kind of like",
    "start": "418479",
    "end": "423759"
  },
  {
    "text": "modularity or nested components or like any kind of separational structure we're",
    "start": "423759",
    "end": "430840"
  },
  {
    "text": "in has you have the compiler the compiler loves you you you just like just Define a new event as like a switch",
    "start": "430840",
    "end": "438720"
  },
  {
    "text": "statement over 30 different types and and you just you figure it out just",
    "start": "438720",
    "end": "444840"
  },
  {
    "text": "structure it like you structure all high school programs and then you ask them how you structure C schope programs and",
    "start": "444840",
    "end": "451319"
  },
  {
    "text": "and now you've just lost two hours of your life without any answers",
    "start": "451319",
    "end": "457319"
  },
  {
    "text": "so having taken a look at some of the techniques om uses m is a um functional",
    "start": "457319",
    "end": "463599"
  },
  {
    "text": "library for closure script that uses react and one of the new things that introduces is this notion of a cursor",
    "start": "463599",
    "end": "472080"
  },
  {
    "text": "and a cursor and a lens are roughly the same a lens is like a like a way of the",
    "start": "472080",
    "end": "477759"
  },
  {
    "text": "a way of taking your big state and being like you know what at some key path you",
    "start": "477759",
    "end": "484440"
  },
  {
    "text": "know maybe like big States the Freds the Fred",
    "start": "484440",
    "end": "490039"
  },
  {
    "text": "ID that that particular key off I want to embed a substate that I can just read and write to so you can go and separate",
    "start": "490039",
    "end": "498960"
  },
  {
    "text": "like your Fred logic into this child over here and because of the way curses",
    "start": "498960",
    "end": "505960"
  },
  {
    "text": "or lenses work it can just deal with local State as it wants to it can just be like okay",
    "start": "505960",
    "end": "512599"
  },
  {
    "text": "I I only care about I'm a Fred I have a Fred State that's all I really care about and you can embed the Fret state",
    "start": "512599",
    "end": "519560"
  },
  {
    "text": "in the parent State and every single time the Fret changes the parent updates",
    "start": "519560",
    "end": "524760"
  },
  {
    "text": "and the render gets trigger it so notice how there's no communication between the child State",
    "start": "524760",
    "end": "531160"
  },
  {
    "text": "and child rendom if you were to communicate sideways you would end up with like a",
    "start": "531160",
    "end": "537440"
  },
  {
    "text": "large a large mess you'd also have to figure out how to deal with",
    "start": "537440",
    "end": "543880"
  },
  {
    "text": "that because just triggering an arbitary reender of a sub tree is a really",
    "start": "543880",
    "end": "549680"
  },
  {
    "text": "complicated problem so generally what you do is you just have your top level render logic",
    "start": "549680",
    "end": "555959"
  },
  {
    "text": "you know import the rendering logic from the Fred and you know if I have a list of Freds all I've got to do is Loop over",
    "start": "555959",
    "end": "562519"
  },
  {
    "text": "it and call render frad on each frad and I'll deal with everything now one of the things this",
    "start": "562519",
    "end": "569440"
  },
  {
    "text": "allows you to achieve was avoiding that switch statement that you would have in",
    "start": "569440",
    "end": "574560"
  },
  {
    "text": "like a high school environment where like the input is just there's 30 different types of inputs and you just",
    "start": "574560",
    "end": "580279"
  },
  {
    "text": "have a switch over it at this point there's two separate errors going from a raw input to the actual inputs and the",
    "start": "580279",
    "end": "587040"
  },
  {
    "text": "parent doesn't need to care about what type of events the J listen to and you",
    "start": "587040",
    "end": "592320"
  },
  {
    "text": "probably have the exact same thing with um the dispatcher architecture and flux",
    "start": "592320",
    "end": "597640"
  },
  {
    "text": "each individual store doesn't have to care about all the actions of the other stores um it doesn't have to care about",
    "start": "597640",
    "end": "604440"
  },
  {
    "text": "what updating means it doesn't have to care about what the child state is",
    "start": "604440",
    "end": "610480"
  },
  {
    "text": "the parent doesn't really care about the Imp implementation detail of the child and you now are able to Nest um",
    "start": "610480",
    "end": "620920"
  },
  {
    "text": "components recursively and that makes structuring a larger application easier",
    "start": "620920",
    "end": "626640"
  },
  {
    "text": "and this was one of the pieces I was missing from FP literature um so to recap someone",
    "start": "626640",
    "end": "634680"
  },
  {
    "text": "responsibilities somewhere you need to Boop your application you generally um abstract the application in",
    "start": "634680",
    "end": "642120"
  },
  {
    "text": "these boxes call them whatever you want I use the word component because I have no",
    "start": "642120",
    "end": "647680"
  },
  {
    "text": "originality uh you need to convert raw input into user tent you put this in an",
    "start": "647680",
    "end": "653279"
  },
  {
    "text": "input you might be tempted to call this a controller kind of the same thing when you update application State",
    "start": "653279",
    "end": "660480"
  },
  {
    "text": "you just use your business logic um because you use uh observable State and",
    "start": "660480",
    "end": "667279"
  },
  {
    "text": "because in almost all of these systems you tend to have observable models when the state changes you just",
    "start": "667279",
    "end": "674639"
  },
  {
    "text": "notify the why and because the rendering function is just like a nice pure function rendering and it's pretty",
    "start": "674639",
    "end": "682120"
  },
  {
    "text": "simple now this isn't the interesting part the",
    "start": "682160",
    "end": "687320"
  },
  {
    "text": "interesting part is not something being unit directional the interesting part is it being unidirectional and uh immutable",
    "start": "687320",
    "end": "695760"
  },
  {
    "text": "or read only so having no two-way data binding is nice but you also don't want",
    "start": "695760",
    "end": "701360"
  },
  {
    "text": "to have two-way references between concerns you would't want to have a view talking to a controller and vice",
    "start": "701360",
    "end": "708279"
  },
  {
    "text": "versa and preferably if possible you take some of these Concepts from functional languages and you say you",
    "start": "708279",
    "end": "715200"
  },
  {
    "text": "know what it's nice if there's no mutable references any",
    "start": "715200",
    "end": "720240"
  },
  {
    "text": "anywhere now if you think about this for a second let it sink in what does lead you towards is the",
    "start": "720240",
    "end": "727519"
  },
  {
    "text": "ability to reason about the source of Truth each",
    "start": "727519",
    "end": "732880"
  },
  {
    "text": "component is the actual source of truth because nobody else has a mutable reference to it nobody else can come and",
    "start": "732880",
    "end": "739680"
  },
  {
    "text": "grab it and you know punch it in the face and say like you know wait you know",
    "start": "739680",
    "end": "745320"
  },
  {
    "text": "what actually you're something else and this allows you to reason about your",
    "start": "745320",
    "end": "754079"
  },
  {
    "text": "application because when you see something happen in UI that looks like a",
    "start": "754079",
    "end": "760079"
  },
  {
    "text": "bug you can go and just trace your top level State you set up your state you",
    "start": "760079",
    "end": "767199"
  },
  {
    "text": "can just inspect it and see all the changes that happen and when you see that when you do a certain thing in",
    "start": "767199",
    "end": "774000"
  },
  {
    "text": "the way that looks weird and you can actually see a list of all the Chang and",
    "start": "774000",
    "end": "779680"
  },
  {
    "text": "updates and transitions being made to the state you go okay I can see which which one of these nested objects it is",
    "start": "779680",
    "end": "786279"
  },
  {
    "text": "and you just jump to that code and you know that it is the source of truth you",
    "start": "786279",
    "end": "791519"
  },
  {
    "text": "don't have to go and jump around your code base and find all the places where developers took",
    "start": "791519",
    "end": "797319"
  },
  {
    "text": "shortcuts so we're back to this diagram this is the exact same diagram so there's a couple of tricks to",
    "start": "797959",
    "end": "804519"
  },
  {
    "text": "making something immutable when you do the rendering our impementation of virtual Dom returns an",
    "start": "804519",
    "end": "811639"
  },
  {
    "start": "806000",
    "end": "893000"
  },
  {
    "text": "immutable uh virtual tree so there's no local state there's no mutable state in the virtual tree so when it comes time",
    "start": "811639",
    "end": "819120"
  },
  {
    "text": "for the like the runtime or your event Loop to render and diff",
    "start": "819120",
    "end": "824399"
  },
  {
    "text": "patch it can't mess with the virtual tree because the virtual tree is fundamentally immutable and because you've got this",
    "start": "824399",
    "end": "831959"
  },
  {
    "text": "virtual tree you can't mess with the Dom because the only way the Dom gets updated is by having a new virtual tree",
    "start": "831959",
    "end": "840399"
  },
  {
    "text": "now the reference between the state and the render is immutable because by default Mercury uses mutable State",
    "start": "840399",
    "end": "848120"
  },
  {
    "text": "primitive so just like M it recommends that you know what don't have mutable",
    "start": "848120",
    "end": "853720"
  },
  {
    "text": "State just have an immutable data structure and every single time you update it just shallow clone it to a new",
    "start": "853720",
    "end": "860800"
  },
  {
    "text": "state so what happens is every single time Rena gets called you get a new",
    "start": "860800",
    "end": "866560"
  },
  {
    "text": "immutable snapshot of the state which means you cannot accidentally change State and render that's just",
    "start": "866560",
    "end": "874279"
  },
  {
    "text": "impossible now the same happens between the input and state the input doesn't actually have access to the state all it",
    "start": "874279",
    "end": "881519"
  },
  {
    "text": "can do is call a bunch of um operations on it it can just trigger State Transitions and it's mainly in charge of",
    "start": "881519",
    "end": "888680"
  },
  {
    "text": "normalizing Dum events and that kind of",
    "start": "888680",
    "end": "892839"
  },
  {
    "start": "893000",
    "end": "1003000"
  },
  {
    "text": "stuff so that's kind of cool",
    "start": "894600",
    "end": "900079"
  },
  {
    "text": "but if we compare to NBC star and take a look at what the actual differences is",
    "start": "900079",
    "end": "905519"
  },
  {
    "text": "and this article comes from Wikipedia I just read the Wikipedia article of modview controller I don't think anybody",
    "start": "905519",
    "end": "911360"
  },
  {
    "text": "can come to an agreement on how that works or what it is so this this is just",
    "start": "911360",
    "end": "916920"
  },
  {
    "text": "literally from Wikipedia so here you can see all these bidirectional",
    "start": "916920",
    "end": "922240"
  },
  {
    "text": "references and you can see that these arrows are fi arrows and fi arrows means",
    "start": "922240",
    "end": "927639"
  },
  {
    "text": "there's mple references there so if the controller can just mutate The",
    "start": "927639",
    "end": "934600"
  },
  {
    "text": "View you you you lost your source of truth about rendering you can't take a look at your view and okay this is how",
    "start": "934600",
    "end": "940759"
  },
  {
    "text": "rendering happens you got to take a look at all controllers to have access to the view and hopefully there's only one that",
    "start": "940759",
    "end": "946279"
  },
  {
    "text": "has access to the view but I don't know what kind of big applications you've",
    "start": "946279",
    "end": "951440"
  },
  {
    "text": "seen um someone in last year once you can't tell you can't tell where the",
    "start": "951440",
    "end": "957040"
  },
  {
    "text": "source of truth is there was an interesting paper I read a",
    "start": "957040",
    "end": "962440"
  },
  {
    "text": "couple of days ago from 1996 about um model view",
    "start": "962440",
    "end": "967600"
  },
  {
    "text": "presenter and it's curious to have a snapshot into the past now this diagram",
    "start": "967600",
    "end": "973440"
  },
  {
    "text": "is a diagram of what the uh 70s Small Talk MPC looks like and surprisingly enough there's the",
    "start": "973440",
    "end": "981720"
  },
  {
    "text": "exact same cycle and the exact same unidirectional flow happening",
    "start": "981720",
    "end": "987319"
  },
  {
    "text": "here um and you have this notion that the model notifies The View and that the",
    "start": "987319",
    "end": "993199"
  },
  {
    "text": "view then calls geta methods on the model for data access so this actually looks incredibly",
    "start": "993199",
    "end": "999120"
  },
  {
    "text": "similar to un directional apps it's just that it's mutable and then here's an example",
    "start": "999120",
    "end": "1005240"
  },
  {
    "start": "1003000",
    "end": "1071000"
  },
  {
    "text": "comparing it to flux now this one isn't completely correct because um having just watched",
    "start": "1005240",
    "end": "1011399"
  },
  {
    "text": "fluxes talk they've changed things up a bit so the actual link between the store",
    "start": "1011399",
    "end": "1016600"
  },
  {
    "text": "and view looks to be immutable but just like small talk MVC the store",
    "start": "1016600",
    "end": "1023480"
  },
  {
    "text": "notifies The View and the view calls get methods on the store and just like small talk",
    "start": "1023480",
    "end": "1030319"
  },
  {
    "text": "MPC when a new event happens The View sends an action to the dispatcher or maybe the view sends",
    "start": "1030319",
    "end": "1037880"
  },
  {
    "text": "events and gestures to a controller so one of the big differences",
    "start": "1037880",
    "end": "1046038"
  },
  {
    "text": "between um flux and having an immutable uh un directional flow is the way react",
    "start": "1046039",
    "end": "1054039"
  },
  {
    "text": "works it allows for local state in your virtual tree so the react virtual tree",
    "start": "1054039",
    "end": "1059919"
  },
  {
    "text": "is actually mutable and the way you set up your react components you have a vent",
    "start": "1059919",
    "end": "1066520"
  },
  {
    "text": "handlers right next to the uh definition of the random method which you know if you are well",
    "start": "1066520",
    "end": "1073960"
  },
  {
    "start": "1071000",
    "end": "1140000"
  },
  {
    "text": "behaved that's not a problem if you are not well behaved you might be tempted to",
    "start": "1073960",
    "end": "1079120"
  },
  {
    "text": "change some the local state directly in an event handler because that's a very convenient way to fix a bug right",
    "start": "1079120",
    "end": "1088158"
  },
  {
    "text": "now so having looked at all these diagrams it looks like none of these ideas are that new or that",
    "start": "1090000",
    "end": "1098200"
  },
  {
    "text": "different um it looks very similar to the small talk MPC the biggest difference here is the ability to have",
    "start": "1098200",
    "end": "1105880"
  },
  {
    "text": "uh immutable references so you can actually reason about um Source",
    "start": "1105880",
    "end": "1111679"
  },
  {
    "text": "truth the other difference between uh something like react MP star and um this",
    "start": "1111679",
    "end": "1119120"
  },
  {
    "text": "approach is somewhere here yes there is one link between State and render there",
    "start": "1119120",
    "end": "1124919"
  },
  {
    "text": "is only one way to do rendering which was top down you will never end in a",
    "start": "1124919",
    "end": "1130679"
  },
  {
    "text": "position where you have 10 stores or 10 models talking to 10 views and having",
    "start": "1130679",
    "end": "1137200"
  },
  {
    "text": "lots of interconnected arrows um but I should show you a demo to",
    "start": "1137200",
    "end": "1143600"
  },
  {
    "text": "concretely show what this looks like so I'll quickly",
    "start": "1143600",
    "end": "1151480"
  },
  {
    "text": "started new",
    "start": "1151480",
    "end": "1154799"
  },
  {
    "text": "example",
    "start": "1156520",
    "end": "1159520"
  },
  {
    "text": "n okay so the library I'm using is not that interesting or exciting you should",
    "start": "1162960",
    "end": "1169159"
  },
  {
    "text": "consider it to be a reference implantation my particular implantation of mercury was designed to be very",
    "start": "1169159",
    "end": "1174840"
  },
  {
    "text": "modular if you ever get a chance to take a look at it um it's composed of lots of",
    "start": "1174840",
    "end": "1179919"
  },
  {
    "text": "really small modules uh which means if you don't",
    "start": "1179919",
    "end": "1185320"
  },
  {
    "text": "agree with my implantation you can reuse half of it and switch out the other half for something better um I've always been curious",
    "start": "1185320",
    "end": "1193080"
  },
  {
    "text": "whether someone might change my immutable state representation for something like Mory",
    "start": "1193080",
    "end": "1199440"
  },
  {
    "text": "where Mor is the uh immutable data structures that om uses and the ones that are built into clure",
    "start": "1199440",
    "end": "1207240"
  },
  {
    "text": "script so we want to abstract our applications into some kind of component",
    "start": "1207760",
    "end": "1214520"
  },
  {
    "text": "and when we start building the application we start with the state modeling the",
    "start": "1214520",
    "end": "1220559"
  },
  {
    "text": "state so the way this is set up is you forced",
    "start": "1223600",
    "end": "1231200"
  },
  {
    "text": "to be explicit about what you want so let's have a quick recap of what I'm going to do um I wanted to build a",
    "start": "1231200",
    "end": "1237559"
  },
  {
    "text": "little example with a list of counters and you can add counters to the list and you can increment and decrement",
    "start": "1237559",
    "end": "1244039"
  },
  {
    "text": "counters which is the pretty much the simplest possible example that",
    "start": "1244039",
    "end": "1249600"
  },
  {
    "text": "demonstrates you can um do Dynamic stuff because any static UI is really really",
    "start": "1249600",
    "end": "1256600"
  },
  {
    "text": "boring so you start with choosing your data structure I'm going to use a hash",
    "start": "1256600",
    "end": "1264400"
  },
  {
    "text": "table um and I'm going to put a bunch of objects in the hash table and they're",
    "start": "1264400",
    "end": "1271520"
  },
  {
    "text": "just going to have a number",
    "start": "1271520",
    "end": "1276120"
  },
  {
    "text": "property okay so we have a state I'm going to assign it to a",
    "start": "1277400",
    "end": "1283960"
  },
  {
    "text": "variable and we want a rendom function",
    "start": "1283960",
    "end": "1288919"
  },
  {
    "text": "so rendering takes a state and figures out how to render it so I have this horribly horribly ugly",
    "start": "1289440",
    "end": "1296600"
  },
  {
    "text": "DSL for creating a virtual Dom from JavaScript using this H function you",
    "start": "1296600",
    "end": "1302880"
  },
  {
    "text": "give it a tag name and a list of children and you do all kinds of fun stuff with",
    "start": "1302880",
    "end": "1309440"
  },
  {
    "text": "it um object Keys State counters so all of these data",
    "start": "1309440",
    "end": "1315159"
  },
  {
    "text": "structures that you have are just plain JavaScript data structures so you can do anything that you want with JavaScript",
    "start": "1315159",
    "end": "1321880"
  },
  {
    "text": "dat structures and we want turn a",
    "start": "1321880",
    "end": "1327360"
  },
  {
    "text": "thing and divs are the most amazing elements to create they're definitely the",
    "start": "1327360",
    "end": "1332880"
  },
  {
    "text": "best so we want to show the number in the label and we want these two buttons for",
    "start": "1332880",
    "end": "1341480"
  },
  {
    "text": "increment and",
    "start": "1341480",
    "end": "1345880"
  },
  {
    "text": "decent um we probably need a button to add a counter so we set up a state we",
    "start": "1347279",
    "end": "1355400"
  },
  {
    "text": "set up the rendering we can now return the state from",
    "start": "1355400",
    "end": "1362600"
  },
  {
    "text": "this have the app and do border plate because",
    "start": "1362919",
    "end": "1369279"
  },
  {
    "text": "everybody loves border plate um",
    "start": "1369279",
    "end": "1375440"
  },
  {
    "text": "so I mention you need to render the application so we're going to render the application to the document body and",
    "start": "1379880",
    "end": "1386520"
  },
  {
    "text": "every single time the state changes we'll just call render again and it will do the correct",
    "start": "1386520",
    "end": "1393240"
  },
  {
    "text": "thing so this is really boring because there's no interaction yet you have to Define some",
    "start": "1397240",
    "end": "1404120"
  },
  {
    "text": "interaction uh we wanted to find a click to be an ad event uh what do we want to",
    "start": "1405320",
    "end": "1412000"
  },
  {
    "text": "add nothing we just want to",
    "start": "1412000",
    "end": "1415880"
  },
  {
    "text": "add so to be able to tell um how to trigger an ad event we need to have a",
    "start": "1420279",
    "end": "1427360"
  },
  {
    "text": "reference the ad event to trigger so we'll set up a bunch of",
    "start": "1427360",
    "end": "1434360"
  },
  {
    "text": "events and that's not how you do JavaScript I me want to start writing some update",
    "start": "1437120",
    "end": "1444039"
  },
  {
    "text": "logic given the state I want to return add",
    "start": "1444640",
    "end": "1450840"
  },
  {
    "text": "operation and it's just going to do state dop put some",
    "start": "1450840",
    "end": "1457640"
  },
  {
    "text": "ID put an ID and some number",
    "start": "1457640",
    "end": "1463360"
  },
  {
    "text": "zero we don't care about the rest and you probably need a CU ID",
    "start": "1463360",
    "end": "1469679"
  },
  {
    "text": "so we have our update logic that defines how we want to update our application",
    "start": "1471559",
    "end": "1477360"
  },
  {
    "text": "and we now need to set up our input logic that defines how we",
    "start": "1477360",
    "end": "1482640"
  },
  {
    "text": "wire our vents together so when that event ad happens we just want to call",
    "start": "1482640",
    "end": "1488520"
  },
  {
    "text": "update ad and then we need to fret everything",
    "start": "1488520",
    "end": "1494039"
  },
  {
    "text": "through which is a little bit tedious but this little bit of TDM gives",
    "start": "1494039",
    "end": "1499640"
  },
  {
    "text": "you the strong separation that you probably want to",
    "start": "1499640",
    "end": "1504679"
  },
  {
    "text": "have and obviously if you're building like a really simple Toy app you don't care about the separation like you just",
    "start": "1505480",
    "end": "1511039"
  },
  {
    "text": "do everything in line and you know that you can separate stuff out",
    "start": "1511039",
    "end": "1516200"
  },
  {
    "text": "later given some events and update so this is how you wire things up",
    "start": "1517320",
    "end": "1524720"
  },
  {
    "text": "we render the UI when an ad event happens it comes in through the input it",
    "start": "1524720",
    "end": "1530039"
  },
  {
    "text": "triggers the update function and as you make this bigger bigger bigger bigger bigger",
    "start": "1530039",
    "end": "1535559"
  },
  {
    "text": "bigger and an update just mutates the state it just says you know let's put a new thing in a state and then you can't",
    "start": "1535559",
    "end": "1542039"
  },
  {
    "text": "do this cuz we call the counters and you know we have",
    "start": "1542039",
    "end": "1548320"
  },
  {
    "text": "this um object of counters trigger reender here in the render you know",
    "start": "1548320",
    "end": "1553799"
  },
  {
    "text": "We're looping over the counters and we're creating like a new thing yay excited exciting exciting",
    "start": "1553799",
    "end": "1560279"
  },
  {
    "text": "exciting um so rather than showing you how that works cuz I probably typoed",
    "start": "1560279",
    "end": "1567200"
  },
  {
    "text": "everything um that's not how I do things I will show you a pre-prepared one that",
    "start": "1567200",
    "end": "1572840"
  },
  {
    "text": "is the exact same thing and then you can see exactly how this",
    "start": "1572840",
    "end": "1580440"
  },
  {
    "text": "works so the application start off with an add button and when you click it we have a new counter we click it again we",
    "start": "1580440",
    "end": "1586960"
  },
  {
    "text": "have another counter exciting exciting y y y and the increment and decrement",
    "start": "1586960",
    "end": "1592279"
  },
  {
    "text": "stuff works except increment is wrong and it goes down which is uh let's take",
    "start": "1592279",
    "end": "1598679"
  },
  {
    "text": "a look how do you debug that um well we probably have an increment event",
    "start": "1598679",
    "end": "1605320"
  },
  {
    "text": "somewhere okay we have increment and decrement events we call update Logics",
    "start": "1605320",
    "end": "1610600"
  },
  {
    "text": "and inside the update logic you can see there's a function called increment that has a minus in it",
    "start": "1610600",
    "end": "1616640"
  },
  {
    "text": "that's that's probably what the bug is that so this was a quick",
    "start": "1616640",
    "end": "1623360"
  },
  {
    "text": "example um and notice how in the example code none of these components were",
    "start": "1623360",
    "end": "1628840"
  },
  {
    "text": "complected and none of these components has bidirectional references to each other they were all very separate uh",
    "start": "1628840",
    "end": "1635000"
  },
  {
    "text": "none of them had access to each other's source of Truth none of them could mutate each other and you have you have",
    "start": "1635000",
    "end": "1641960"
  },
  {
    "text": "everything you want and it's all nice and fun so at this point I'd like to ask",
    "start": "1641960",
    "end": "1647880"
  },
  {
    "start": "1645000",
    "end": "2117000"
  },
  {
    "text": "people whether they have any questions or any Curiosities and shouldn't be",
    "start": "1647880",
    "end": "1654440"
  },
  {
    "text": "shy where you I've been trying to figure this out for the last half hour so my accent's",
    "start": "1654440",
    "end": "1660840"
  },
  {
    "text": "Dutch okay and I spent 10 years in England so it's British",
    "start": "1660840",
    "end": "1665760"
  },
  {
    "text": "Dutch so the question was what are the disadvantages in advantages compared to",
    "start": "1668480",
    "end": "1673880"
  },
  {
    "text": "react and flux for this so Mercury is up my GitHub on the name Ros and I have a",
    "start": "1673880",
    "end": "1679120"
  },
  {
    "text": "section in here about like Mercury Fierce versus react where it show somebody",
    "start": "1679120",
    "end": "1684559"
  },
  {
    "text": "advantages um and you shouldn't read this you should read this your leisure the quick",
    "start": "1684559",
    "end": "1690399"
  },
  {
    "text": "answer is with Mercury by Design we're a lot more strict about",
    "start": "1690399",
    "end": "1696240"
  },
  {
    "text": "immutability so react allows you to have local state in your components and one",
    "start": "1696240",
    "end": "1701679"
  },
  {
    "text": "of the things you saw in the flux example was when a store changes you go",
    "start": "1701679",
    "end": "1706799"
  },
  {
    "text": "and update some state in your component you go and grab some State out of the store and set the state on the",
    "start": "1706799",
    "end": "1713320"
  },
  {
    "text": "component now that to me sounds like two-way replication of data binding",
    "start": "1713320",
    "end": "1719320"
  },
  {
    "text": "between your model and your view um so that type of thing just doesn't exist in mercree we just we just",
    "start": "1719320",
    "end": "1726600"
  },
  {
    "text": "pass the arguments around you just get the entire State you don't get to like copy a b State into yourself you just",
    "start": "1726600",
    "end": "1732600"
  },
  {
    "text": "have to like here the entire State figure it out and please be pure please make your rendering function",
    "start": "1732600",
    "end": "1740039"
  },
  {
    "text": "pure so if you create fun so the question is why do we have these functions that are bound to the state um",
    "start": "1744640",
    "end": "1752200"
  },
  {
    "text": "so you create these functions once for your component um and they basically enforce",
    "start": "1752200",
    "end": "1757320"
  },
  {
    "text": "privacy so you could create a whole bunch of static functions where you bind the state to it because these you have",
    "start": "1757320",
    "end": "1763320"
  },
  {
    "text": "to pass these functions to the stop that handles the input and if you have to if the input has access to the state it can",
    "start": "1763320",
    "end": "1769720"
  },
  {
    "text": "now read and mutate it so you pay a bit of like binding cost but this privacy",
    "start": "1769720",
    "end": "1776159"
  },
  {
    "text": "gives you",
    "start": "1776159",
    "end": "1778559"
  },
  {
    "text": "separation so the state that you see was not the initial state it was an",
    "start": "1783880",
    "end": "1789360"
  },
  {
    "text": "observable representation of state so it was an observable object that you can mutate and it just emits new immutable",
    "start": "1789360",
    "end": "1796399"
  },
  {
    "text": "values",
    "start": "1796399",
    "end": "1799399"
  },
  {
    "text": "where does like Network so there's two ways to do Network requests and it depends on how",
    "start": "1801440",
    "end": "1807039"
  },
  {
    "text": "much you like MPC versus FP so people in the MPC Community seem to think you know",
    "start": "1807039",
    "end": "1813679"
  },
  {
    "text": "we have a model we have a domain when we want to do a network request when we update the state we'll just do it right",
    "start": "1813679",
    "end": "1821080"
  },
  {
    "text": "there in that box called State and we'll just update it right there now since the state is like an observable there's",
    "start": "1821080",
    "end": "1828000"
  },
  {
    "text": "nothing wrong with doing HR requests and updating theable later it will still propagate through",
    "start": "1828000",
    "end": "1833360"
  },
  {
    "text": "correctly that's one option um that definitely works the",
    "start": "1833360",
    "end": "1838519"
  },
  {
    "text": "other option which is an option that comes from something like FP or Elm is",
    "start": "1838519",
    "end": "1843799"
  },
  {
    "text": "to say you know what updating the server doing side effects like that that's just a",
    "start": "1843799",
    "end": "1851039"
  },
  {
    "text": "different form of raw output so you put it right next to that box that's called",
    "start": "1851039",
    "end": "1856799"
  },
  {
    "text": "the Dom and you generalize that box that's called to the Dom to be like all side effects that I don't really care",
    "start": "1856799",
    "end": "1862559"
  },
  {
    "text": "about and I don't like um for some reason functional people don't like side",
    "start": "1862559",
    "end": "1868039"
  },
  {
    "text": "effects so at that point the response XR would have to be one of the raw inputs",
    "start": "1868039",
    "end": "1873840"
  },
  {
    "text": "and similar to the way how flux says you know stuff coming from the Ser just a new action you could do it like",
    "start": "1873840",
    "end": "1881480"
  },
  {
    "text": "that and the benefit of that approach is that that nice little box there called",
    "start": "1881480",
    "end": "1886679"
  },
  {
    "text": "parent is is not going to make exr requests it's going to be like a nice pure box just manages its own local",
    "start": "1886679",
    "end": "1893519"
  },
  {
    "text": "state doesn't have any side effect doesn't mutate anything that I didn't create um which plays really nice with",
    "start": "1893519",
    "end": "1901480"
  },
  {
    "text": "such things as debuggers and time travel because we have a pure rendering",
    "start": "1901480",
    "end": "1906919"
  },
  {
    "text": "function and because we have observable State we can just cat the last 100 State snapshots and time travel backwards and",
    "start": "1906919",
    "end": "1914399"
  },
  {
    "text": "forward now all you can catch the last 100 inputs you can just go put a little",
    "start": "1914399",
    "end": "1920080"
  },
  {
    "text": "fade around the inputs and cash those and if your state doesn't do side",
    "start": "1920080",
    "end": "1926440"
  },
  {
    "text": "effects you can replay the last 100 inputs and see see if you can reproduce the",
    "start": "1926440",
    "end": "1932080"
  },
  {
    "text": "bug or or see see if you can send the last 100 inputs to the server every",
    "start": "1932080",
    "end": "1937360"
  },
  {
    "text": "single time you get an exception in production and then because you don't do any actual side effects in the",
    "start": "1937360",
    "end": "1943559"
  },
  {
    "text": "state you can you can replay them locally when something goes wrong",
    "start": "1943559",
    "end": "1949840"
  },
  {
    "text": "production at the",
    "start": "1949880",
    "end": "1953240"
  },
  {
    "text": "back that's okay um AS application size grows how much more complicated get does",
    "start": "1955960",
    "end": "1962559"
  },
  {
    "text": "it get compared to NPC I don't think anybody in the FP Community has built applications bigger",
    "start": "1962559",
    "end": "1970000"
  },
  {
    "text": "than MVC applications um now one thing you do note is that this is very similar to the",
    "start": "1970000",
    "end": "1975679"
  },
  {
    "text": "MPC diagrams from the 70 small talk um I can't give you any information",
    "start": "1975679",
    "end": "1982080"
  },
  {
    "text": "about that like I just have not buil personally built applications big enough",
    "start": "1982080",
    "end": "1987240"
  },
  {
    "text": "and we're talking about applications that are more than 100, L to code that's not something I've",
    "start": "1987240",
    "end": "1993799"
  },
  {
    "text": "done so the question was when debugging applications that use um attributes or",
    "start": "1996960",
    "end": "2002799"
  },
  {
    "text": "data binding in your Dom um language associated with the attribut",
    "start": "2002799",
    "end": "2008399"
  },
  {
    "text": "yeah compared to H how how easy is it to actually see what's going on um so for H",
    "start": "2008399",
    "end": "2016559"
  },
  {
    "text": "itself I haven't built any debugger integration I know that react has built",
    "start": "2016559",
    "end": "2021639"
  },
  {
    "text": "debugger integration for their thing def thing is exactly the same and they have",
    "start": "2021639",
    "end": "2027120"
  },
  {
    "text": "they have like a different tab in your Chrome debugger that's like watching the tree of the Dom but instead you see a",
    "start": "2027120",
    "end": "2032760"
  },
  {
    "text": "tree of components so I imagine you would want to build something similar to that",
    "start": "2032760",
    "end": "2038440"
  },
  {
    "text": "to be able to inspect that tree and to be able to quickly jump from any Dom",
    "start": "2038440",
    "end": "2043519"
  },
  {
    "text": "note that you can inspect in your inspector to the source",
    "start": "2043519",
    "end": "2048799"
  },
  {
    "text": "code they' be faster because somebody sat down and spent like a year writing",
    "start": "2051839",
    "end": "2057200"
  },
  {
    "text": "them I spend um about three weekends the tradeoff with Mor is that",
    "start": "2057200",
    "end": "2063240"
  },
  {
    "text": "the data structures are faster so that's really nice and the question here was how does Mori compare to the way I",
    "start": "2063240",
    "end": "2069280"
  },
  {
    "text": "doable data structures the consequence is that the data structures Mori gives you are not",
    "start": "2069280",
    "end": "2076638"
  },
  {
    "text": "arrays and they're not objects as you know in JavaScript the rendering function we wrote just did plain",
    "start": "2076639",
    "end": "2083480"
  },
  {
    "text": "iteration over JavaScript objects and pl interation over arrays so if you use Mori it'll be",
    "start": "2083480",
    "end": "2089280"
  },
  {
    "text": "faster but your rendering function needs to like know the specific Mor functions",
    "start": "2089280",
    "end": "2094760"
  },
  {
    "text": "to call to do iteration and getting",
    "start": "2094760",
    "end": "2099280"
  },
  {
    "text": "okay I think that's all thank you everybody",
    "start": "2102040",
    "end": "2107520"
  }
]