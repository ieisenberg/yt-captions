[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "I think so I'm gonna wear newbie nugget",
    "start": "0",
    "end": "21869"
  },
  {
    "text": "talk about mix-ins so what is a mix in",
    "start": "21869",
    "end": "26990"
  },
  {
    "text": "so luckily Wikipedia to the rescue they",
    "start": "26990",
    "end": "30810"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "have a pretty good definition and a",
    "start": "30810",
    "end": "32640"
  },
  {
    "text": "pretty good page on it but it's",
    "start": "32640",
    "end": "34829"
  },
  {
    "text": "basically a class that's not meant for",
    "start": "34829",
    "end": "36690"
  },
  {
    "text": "direct instantiation and where you're",
    "start": "36690",
    "end": "40559"
  },
  {
    "text": "not using the inheritance for",
    "start": "40559",
    "end": "43579"
  },
  {
    "text": "specializing classes but rather using it",
    "start": "43579",
    "end": "46680"
  },
  {
    "text": "to basically collect different",
    "start": "46680",
    "end": "48750"
  },
  {
    "text": "functionality and you typically use",
    "start": "48750",
    "end": "51629"
  },
  {
    "text": "multiple inheritance to combine your",
    "start": "51629",
    "end": "54120"
  },
  {
    "text": "mix-ins together and so this is useful",
    "start": "54120",
    "end": "58140"
  },
  {
    "text": "when you want to have multiple",
    "start": "58140",
    "end": "59600"
  },
  {
    "text": "orthogonal features that you you're",
    "start": "59600",
    "end": "61710"
  },
  {
    "text": "going to combine in arbitrary ways so",
    "start": "61710",
    "end": "67560"
  },
  {
    "text": "here's a little example so let's say",
    "start": "67560",
    "end": "69720"
  },
  {
    "text": "you're building an adventure game and",
    "start": "69720",
    "end": "72439"
  },
  {
    "start": "72000",
    "end": "72000"
  },
  {
    "text": "you want to create a bunch of different",
    "start": "72439",
    "end": "74909"
  },
  {
    "text": "kinds of doors for your maze so we'll",
    "start": "74909",
    "end": "78119"
  },
  {
    "text": "have a base class door who have locked",
    "start": "78119",
    "end": "80729"
  },
  {
    "text": "doors short doors magic doors so then we",
    "start": "80729",
    "end": "85590"
  },
  {
    "text": "can if these are considered mix-ins we",
    "start": "85590",
    "end": "88500"
  },
  {
    "text": "can kind of combine them together as a",
    "start": "88500",
    "end": "90000"
  },
  {
    "text": "lock short magic door using multiple",
    "start": "90000",
    "end": "92759"
  },
  {
    "text": "inheritance and so great this is",
    "start": "92759",
    "end": "97110"
  },
  {
    "text": "something you couldn't do in Java",
    "start": "97110",
    "end": "100700"
  },
  {
    "text": "so what kind of language support is",
    "start": "102509",
    "end": "105159"
  },
  {
    "text": "there for mixing so in some other",
    "start": "105159",
    "end": "107110"
  },
  {
    "text": "language is they do have direct language",
    "start": "107110",
    "end": "109240"
  },
  {
    "text": "support Python does not but that's okay",
    "start": "109240",
    "end": "112810"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "because we have multiple inheritance and",
    "start": "112810",
    "end": "115020"
  },
  {
    "text": "direct access to the Dometic object",
    "start": "115020",
    "end": "118180"
  },
  {
    "text": "protocol so we can do all kinds of",
    "start": "118180",
    "end": "120039"
  },
  {
    "text": "things that it will allow us to",
    "start": "120039",
    "end": "123179"
  },
  {
    "text": "implement various mixing styles so",
    "start": "123179",
    "end": "126450"
  },
  {
    "text": "there's some so you're typically going",
    "start": "126450",
    "end": "128950"
  },
  {
    "text": "to use multiple inheritance to implement",
    "start": "128950",
    "end": "130720"
  },
  {
    "text": "these mix-ins and this can cause some",
    "start": "130720",
    "end": "133660"
  },
  {
    "text": "issues first one is method resolution",
    "start": "133660",
    "end": "136360"
  },
  {
    "text": "order",
    "start": "136360",
    "end": "136840"
  },
  {
    "text": "the second is conflicts with internal",
    "start": "136840",
    "end": "139299"
  },
  {
    "text": "states between the classes and the third",
    "start": "139299",
    "end": "142390"
  },
  {
    "text": "is being able to compose methods across",
    "start": "142390",
    "end": "144549"
  },
  {
    "text": "mix-ins so method resolution order is",
    "start": "144549",
    "end": "149620"
  },
  {
    "text": "about basically figuring out what",
    "start": "149620",
    "end": "151840"
  },
  {
    "text": "methods you're going to call and who",
    "start": "151840",
    "end": "153280"
  },
  {
    "text": "overrides who when you're using and it's",
    "start": "153280",
    "end": "157510"
  },
  {
    "text": "very straight if you have just single",
    "start": "157510",
    "end": "159069"
  },
  {
    "text": "inheritance then you have a linear",
    "start": "159069",
    "end": "160690"
  },
  {
    "text": "sequence of classes and it's pretty",
    "start": "160690",
    "end": "162400"
  },
  {
    "text": "straightforward but as soon as you have",
    "start": "162400",
    "end": "164140"
  },
  {
    "text": "multiple inheritance you're gonna start",
    "start": "164140",
    "end": "166720"
  },
  {
    "text": "running into problems where you have",
    "start": "166720",
    "end": "168310"
  },
  {
    "text": "multiple base classes you have multiple",
    "start": "168310",
    "end": "170859"
  },
  {
    "text": "base classes that may have common",
    "start": "170859",
    "end": "173130"
  },
  {
    "text": "subclasses and so it gets complicated",
    "start": "173130",
    "end": "175750"
  },
  {
    "text": "and they changed how this worked in",
    "start": "175750",
    "end": "178480"
  },
  {
    "text": "Python 2 3 and basically there's a",
    "start": "178480",
    "end": "182620"
  },
  {
    "text": "restriction that if your subclass",
    "start": "182620",
    "end": "184780"
  },
  {
    "text": "hierarchy cannot be linearized you'll",
    "start": "184780",
    "end": "187690"
  },
  {
    "text": "get an error from Python and in addition",
    "start": "187690",
    "end": "192190"
  },
  {
    "text": "just having this it can get complicated",
    "start": "192190",
    "end": "193930"
  },
  {
    "text": "to reason about right to try to figure",
    "start": "193930",
    "end": "195970"
  },
  {
    "text": "out where which method is actually",
    "start": "195970",
    "end": "198310"
  },
  {
    "text": "implementing the particular method",
    "start": "198310",
    "end": "200290"
  },
  {
    "text": "you're trying to call and so this can",
    "start": "200290",
    "end": "204220"
  },
  {
    "text": "occur if you compose mix-ins that",
    "start": "204220",
    "end": "205900"
  },
  {
    "text": "inherit from other mix-ins you can run",
    "start": "205900",
    "end": "208180"
  },
  {
    "text": "into this problem so one thing I",
    "start": "208180",
    "end": "210519"
  },
  {
    "text": "recommend to this page on the Python",
    "start": "210519",
    "end": "212739"
  },
  {
    "text": "website actually goes into detail on how",
    "start": "212739",
    "end": "215440"
  },
  {
    "text": "this method resolution thing works and",
    "start": "215440",
    "end": "217959"
  },
  {
    "text": "will also later on I'll talk about a way",
    "start": "217959",
    "end": "221230"
  },
  {
    "text": "to avoid this problem altogether so this",
    "start": "221230",
    "end": "224859"
  },
  {
    "text": "is actually an example where I ran into",
    "start": "224859",
    "end": "226810"
  },
  {
    "text": "this problem in my own code to going to",
    "start": "226810",
    "end": "228609"
  },
  {
    "text": "give you an idea so I'm building a",
    "start": "228609",
    "end": "231879"
  },
  {
    "text": "system for doing deployment automation",
    "start": "231879",
    "end": "234870"
  },
  {
    "text": "and have this class of resource that",
    "start": "234870",
    "end": "238170"
  },
  {
    "text": "represents something I'm going to",
    "start": "238170",
    "end": "239550"
  },
  {
    "text": "install and I have various mix-ins to",
    "start": "239550",
    "end": "243090"
  },
  {
    "text": "describe that the properties of that",
    "start": "243090",
    "end": "246180"
  },
  {
    "text": "resource so I have one mixing and I'm",
    "start": "246180",
    "end": "249540"
  },
  {
    "text": "obviously ignoring all the details of",
    "start": "249540",
    "end": "251640"
  },
  {
    "text": "all the methods of the classes right but",
    "start": "251640",
    "end": "253530"
  },
  {
    "text": "just for the example so this one is",
    "start": "253530",
    "end": "256350"
  },
  {
    "text": "where I need to I need as you do access",
    "start": "256350",
    "end": "258359"
  },
  {
    "text": "to to do the installation so there's a",
    "start": "258359",
    "end": "260519"
  },
  {
    "text": "particular mixin that has clot methods",
    "start": "260519",
    "end": "262380"
  },
  {
    "text": "defined for doing that and if I'm using",
    "start": "262380",
    "end": "265710"
  },
  {
    "text": "something that's going to use the apt",
    "start": "265710",
    "end": "267060"
  },
  {
    "text": "package manager there's a mixin for that",
    "start": "267060",
    "end": "269340"
  },
  {
    "text": "and and to use that I actually need to",
    "start": "269340",
    "end": "271889"
  },
  {
    "text": "ask you to access so I'm inheriting from",
    "start": "271889",
    "end": "273720"
  },
  {
    "text": "the other mixin then I have some mixin",
    "start": "273720",
    "end": "276900"
  },
  {
    "text": "for doing file level backups and that",
    "start": "276900",
    "end": "280139"
  },
  {
    "text": "also requires as you do access so it's",
    "start": "280139",
    "end": "283680"
  },
  {
    "text": "inheriting from that so now when I'm",
    "start": "283680",
    "end": "286139"
  },
  {
    "text": "creating my little installer for Apache",
    "start": "286139",
    "end": "288419"
  },
  {
    "text": "I ran into this problem because I'm",
    "start": "288419",
    "end": "292650"
  },
  {
    "text": "basically taking from this mixin in this",
    "start": "292650",
    "end": "296280"
  },
  {
    "text": "mix in which inherit from this other",
    "start": "296280",
    "end": "298289"
  },
  {
    "text": "mixin and when I do this I actually get",
    "start": "298289",
    "end": "300840"
  },
  {
    "text": "the air and you can by changing the",
    "start": "300840",
    "end": "304830"
  },
  {
    "text": "orders of the this sequence you can you",
    "start": "304830",
    "end": "308010"
  },
  {
    "text": "can avoid that error but it gets to be",
    "start": "308010",
    "end": "311010"
  },
  {
    "text": "very complicated in there situations",
    "start": "311010",
    "end": "312560"
  },
  {
    "text": "where there's no way you can actually",
    "start": "312560",
    "end": "314910"
  },
  {
    "text": "subclass from a given class and if you",
    "start": "314910",
    "end": "318630"
  },
  {
    "text": "read that one one page you can see",
    "start": "318630",
    "end": "320669"
  },
  {
    "start": "320000",
    "end": "320000"
  },
  {
    "text": "examples but this was a real example I",
    "start": "320669",
    "end": "323970"
  },
  {
    "text": "ran into it my own coding so this can",
    "start": "323970",
    "end": "326610"
  },
  {
    "text": "get complicated so I'll kind of go into",
    "start": "326610",
    "end": "329760"
  },
  {
    "text": "later an example of how to avoid this",
    "start": "329760",
    "end": "332789"
  },
  {
    "text": "issue all together with mix-ins so",
    "start": "332789",
    "end": "336300"
  },
  {
    "text": "another issue is that you may have",
    "start": "336300",
    "end": "339870"
  },
  {
    "text": "multiple mix-ins and so here again the",
    "start": "339870",
    "end": "341760"
  },
  {
    "text": "idea is we're trying to combine",
    "start": "341760",
    "end": "342690"
  },
  {
    "text": "independent code and they may define",
    "start": "342690",
    "end": "346410"
  },
  {
    "text": "some some state fields and they may",
    "start": "346410",
    "end": "349860"
  },
  {
    "start": "347000",
    "end": "347000"
  },
  {
    "text": "define like a private state fields let's",
    "start": "349860",
    "end": "351810"
  },
  {
    "text": "say status and so these two mixings are",
    "start": "351810",
    "end": "354770"
  },
  {
    "text": "defining the status field but they have",
    "start": "354770",
    "end": "357720"
  },
  {
    "text": "different meanings that so this mixin is",
    "start": "357720",
    "end": "360300"
  },
  {
    "text": "assuming that it basically is defining",
    "start": "360300",
    "end": "362610"
  },
  {
    "text": "it and using it internally",
    "start": "362610",
    "end": "364600"
  },
  {
    "text": "but for the locked door class so this is",
    "start": "364600",
    "end": "367120"
  },
  {
    "text": "going back to our example of our our",
    "start": "367120",
    "end": "370560"
  },
  {
    "text": "adventure game for the locked door class",
    "start": "370560",
    "end": "374340"
  },
  {
    "text": "basically is saying what the status",
    "start": "374340",
    "end": "376540"
  },
  {
    "text": "field is thing whether it's locked or",
    "start": "376540",
    "end": "377800"
  },
  {
    "text": "not and for the magic door is basically",
    "start": "377800",
    "end": "380860"
  },
  {
    "text": "telling you whether there's a spell",
    "start": "380860",
    "end": "382210"
  },
  {
    "text": "activated for the door so now we want to",
    "start": "382210",
    "end": "384790"
  },
  {
    "text": "combine them in locked magic door and",
    "start": "384790",
    "end": "387610"
  },
  {
    "text": "what happens and when we do this is one",
    "start": "387610",
    "end": "390310"
  },
  {
    "text": "of these is going to override the other",
    "start": "390310",
    "end": "391660"
  },
  {
    "text": "and and the other class is basically",
    "start": "391660",
    "end": "394420"
  },
  {
    "text": "going to have its values overridden so",
    "start": "394420",
    "end": "397300"
  },
  {
    "text": "that's not what you want and the thing",
    "start": "397300",
    "end": "399430"
  },
  {
    "text": "is if you're just composing these",
    "start": "399430",
    "end": "401320"
  },
  {
    "text": "classes and you don't look at the",
    "start": "401320",
    "end": "402520"
  },
  {
    "text": "internal implementation you won't be",
    "start": "402520",
    "end": "404470"
  },
  {
    "text": "aware of that so this is something to be",
    "start": "404470",
    "end": "406360"
  },
  {
    "text": "careful of with make sense so the final",
    "start": "406360",
    "end": "411730"
  },
  {
    "text": "issue is basically let's say us a method",
    "start": "411730",
    "end": "415600"
  },
  {
    "text": "and many of the different mixings",
    "start": "415600",
    "end": "418780"
  },
  {
    "text": "implement this method and you want some",
    "start": "418780",
    "end": "420340"
  },
  {
    "text": "way to aggregate the results so you can",
    "start": "420340",
    "end": "425020"
  },
  {
    "start": "421000",
    "end": "421000"
  },
  {
    "text": "do that so here we want to say whether",
    "start": "425020",
    "end": "426640"
  },
  {
    "text": "the door can be opened you can do that",
    "start": "426640",
    "end": "429010"
  },
  {
    "text": "but ideally you don't want to be using a",
    "start": "429010",
    "end": "432160"
  },
  {
    "text": "style we're directly referring to your",
    "start": "432160",
    "end": "433780"
  },
  {
    "text": "base classes because you're kind of hard",
    "start": "433780",
    "end": "436030"
  },
  {
    "text": "coding that inheritance and",
    "start": "436030",
    "end": "437640"
  },
  {
    "text": "implementation into the thing so you'd",
    "start": "437640",
    "end": "440080"
  },
  {
    "text": "like a more elegant solution so here's",
    "start": "440080",
    "end": "443110"
  },
  {
    "text": "kind of my recommendations on how to get",
    "start": "443110",
    "end": "445390"
  },
  {
    "text": "around these issues so the first one is",
    "start": "445390",
    "end": "449700"
  },
  {
    "start": "448000",
    "end": "448000"
  },
  {
    "text": "you can basically avoid having any state",
    "start": "449700",
    "end": "452920"
  },
  {
    "text": "all together in your mix-ins and",
    "start": "452920",
    "end": "454480"
  },
  {
    "text": "basically just call methods or if you",
    "start": "454480",
    "end": "458860"
  },
  {
    "text": "need to maintain some internal state",
    "start": "458860",
    "end": "460420"
  },
  {
    "text": "there are some truly private fields that",
    "start": "460420",
    "end": "463780"
  },
  {
    "text": "are available in Python specifically",
    "start": "463780",
    "end": "465790"
  },
  {
    "text": "created for this feature and you can",
    "start": "465790",
    "end": "467230"
  },
  {
    "text": "read about it in the Python tutorial and",
    "start": "467230",
    "end": "470050"
  },
  {
    "text": "basically if you put a double underscore",
    "start": "470050",
    "end": "471580"
  },
  {
    "text": "in front of the field name it's going to",
    "start": "471580",
    "end": "474340"
  },
  {
    "text": "mangle the field and put the class name",
    "start": "474340",
    "end": "476020"
  },
  {
    "text": "append it to the field name internally",
    "start": "476020",
    "end": "478210"
  },
  {
    "text": "and then you can basically avoid these",
    "start": "478210",
    "end": "480190"
  },
  {
    "text": "issues and you have a truly private",
    "start": "480190",
    "end": "481570"
  },
  {
    "text": "member so the other thing is to avoid",
    "start": "481570",
    "end": "485920"
  },
  {
    "text": "this inheritance in your mix-ins and",
    "start": "485920",
    "end": "489010"
  },
  {
    "text": "then you don't have all these positive",
    "start": "489010",
    "end": "490090"
  },
  {
    "text": "method resolution order and that also",
    "start": "490090",
    "end": "493030"
  },
  {
    "text": "that example of combining methods gets",
    "start": "493030",
    "end": "495100"
  },
  {
    "text": "simpler",
    "start": "495100",
    "end": "496210"
  },
  {
    "text": "so to avoid inheritance what you can do",
    "start": "496210",
    "end": "499449"
  },
  {
    "text": "is basically directly inherit from",
    "start": "499449",
    "end": "501069"
  },
  {
    "text": "object or some other base class and then",
    "start": "501069",
    "end": "504750"
  },
  {
    "text": "basically if there are some methods that",
    "start": "504750",
    "end": "506889"
  },
  {
    "text": "you're expecting you can basically check",
    "start": "506889",
    "end": "510160"
  },
  {
    "text": "for them in your init function and",
    "start": "510160",
    "end": "511720"
  },
  {
    "text": "basically here's some code that we'll",
    "start": "511720",
    "end": "514089"
  },
  {
    "text": "look through basically the attributes so",
    "start": "514089",
    "end": "516969"
  },
  {
    "text": "you basically tell it here's my object",
    "start": "516969",
    "end": "519089"
  },
  {
    "text": "here's the methods I need and it's",
    "start": "519089",
    "end": "521260"
  },
  {
    "text": "basically gonna check that the rata find",
    "start": "521260",
    "end": "523570"
  },
  {
    "text": "by some class in your composition and",
    "start": "523570",
    "end": "526180"
  },
  {
    "text": "then you can just document it in your",
    "start": "526180",
    "end": "527920"
  },
  {
    "text": "your class doc string saying I need this",
    "start": "527920",
    "end": "530230"
  },
  {
    "text": "method but when you actually try to",
    "start": "530230",
    "end": "532029"
  },
  {
    "text": "instantiate the class it will actually",
    "start": "532029",
    "end": "534160"
  },
  {
    "text": "it'll check that it's there so if you do",
    "start": "534160",
    "end": "536080"
  },
  {
    "text": "this then you can kind of combine these",
    "start": "536080",
    "end": "538959"
  },
  {
    "text": "mixings in any order and you don't have",
    "start": "538959",
    "end": "540910"
  },
  {
    "text": "problems so if we look at this this",
    "start": "540910",
    "end": "545110"
  },
  {
    "text": "installer deployment tool example so",
    "start": "545110",
    "end": "550120"
  },
  {
    "text": "here's where I kind of solved my method",
    "start": "550120",
    "end": "552190"
  },
  {
    "text": "resolution order by using this this",
    "start": "552190",
    "end": "554110"
  },
  {
    "text": "pattern so basically my su du mixin is",
    "start": "554110",
    "end": "557980"
  },
  {
    "text": "defining this get password method and so",
    "start": "557980",
    "end": "562690"
  },
  {
    "text": "these other two subclasses need it and",
    "start": "562690",
    "end": "566320"
  },
  {
    "text": "so rather than sub classing from su du",
    "start": "566320",
    "end": "568690"
  },
  {
    "text": "mixing they basically just declare they",
    "start": "568690",
    "end": "570550"
  },
  {
    "text": "need this get password method and then",
    "start": "570550",
    "end": "573250"
  },
  {
    "text": "if you try to instantiate this class",
    "start": "573250",
    "end": "575410"
  },
  {
    "text": "without including it in your inheritance",
    "start": "575410",
    "end": "578290"
  },
  {
    "text": "then basically these will give you an",
    "start": "578290",
    "end": "580660"
  },
  {
    "text": "error so then in my Apache resource I",
    "start": "580660",
    "end": "583029"
  },
  {
    "text": "can just mix these arbitrarily and I",
    "start": "583029",
    "end": "585040"
  },
  {
    "text": "don't care what the order is and",
    "start": "585040",
    "end": "586770"
  },
  {
    "text": "everything will work fine so I guess in",
    "start": "586770",
    "end": "590829"
  },
  {
    "text": "conclusion mix-ins are a great way that",
    "start": "590829",
    "end": "595240"
  },
  {
    "text": "you can basically combine orthogonal",
    "start": "595240",
    "end": "599500"
  },
  {
    "text": "functionality and in Python kind of the",
    "start": "599500",
    "end": "602470"
  },
  {
    "text": "standard way to do it is using multiple",
    "start": "602470",
    "end": "605079"
  },
  {
    "start": "604000",
    "end": "604000"
  },
  {
    "text": "inheritance but multiple inheritance can",
    "start": "605079",
    "end": "607300"
  },
  {
    "text": "get a little tricky so my recommendation",
    "start": "607300",
    "end": "610209"
  },
  {
    "text": "is to kind of use some of these",
    "start": "610209",
    "end": "611230"
  },
  {
    "text": "techniques and you can basically have a",
    "start": "611230",
    "end": "614560"
  },
  {
    "text": "singer' implementation of mix-ins okay",
    "start": "614560",
    "end": "618399"
  },
  {
    "text": "thanks",
    "start": "618399",
    "end": "620230"
  },
  {
    "text": "you",
    "start": "620230",
    "end": "622290"
  }
]