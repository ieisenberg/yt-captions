[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "okay uh I'm probably going to run over",
    "start": "6960",
    "end": "9679"
  },
  {
    "text": "time so I figured I'd just start a",
    "start": "9679",
    "end": "11280"
  },
  {
    "text": "minute",
    "start": "11280",
    "end": "13240"
  },
  {
    "text": "early um oh wait let me start my screen",
    "start": "13240",
    "end": "15759"
  },
  {
    "text": "recording",
    "start": "15759",
    "end": "17279"
  },
  {
    "text": "here so uh I'm going to be talking about",
    "start": "17279",
    "end": "20800"
  },
  {
    "text": "um folds and recursion and co- recursion",
    "start": "20800",
    "end": "23760"
  },
  {
    "text": "and fun stuff like that and",
    "start": "23760",
    "end": "25599"
  },
  {
    "text": "javascripts uh I'll probably be showing",
    "start": "25599",
    "end": "27519"
  },
  {
    "text": "lots of code and you'll probably get",
    "start": "27519",
    "end": "30199"
  },
  {
    "text": "frustrated if you try to read all of it",
    "start": "30199",
    "end": "31880"
  },
  {
    "text": "because I'm just going to like keep",
    "start": "31880",
    "end": "32920"
  },
  {
    "text": "hitting next you're going be like stop",
    "start": "32920",
    "end": "34239"
  },
  {
    "text": "it so so uh the point of the talk is to",
    "start": "34239",
    "end": "38040"
  },
  {
    "text": "kind of show you alternatives to loops",
    "start": "38040",
    "end": "39800"
  },
  {
    "text": "and uh kind of point out some cool stuff",
    "start": "39800",
    "end": "42239"
  },
  {
    "text": "with recursion and don't get caught up",
    "start": "42239",
    "end": "44440"
  },
  {
    "text": "in the details just kind of you know",
    "start": "44440",
    "end": "46800"
  },
  {
    "text": "kind of look at it from a high level and",
    "start": "46800",
    "end": "48640"
  },
  {
    "text": "then later on if you go look into it",
    "start": "48640",
    "end": "50360"
  },
  {
    "text": "further you'll have like an intuition",
    "start": "50360",
    "end": "52199"
  },
  {
    "text": "and a better understanding you'll have",
    "start": "52199",
    "end": "53559"
  },
  {
    "text": "like a head start basically so um I'm a",
    "start": "53559",
    "end": "56760"
  },
  {
    "text": "little horse I did a class yesterday",
    "start": "56760",
    "end": "60280"
  },
  {
    "text": "first horse joke Bam um so try try to",
    "start": "60280",
    "end": "64559"
  },
  {
    "text": "keep it interesting um okay so the",
    "start": "64559",
    "end": "67680"
  },
  {
    "start": "67000",
    "end": "345000"
  },
  {
    "text": "agenda is recursion co- recursion",
    "start": "67680",
    "end": "69759"
  },
  {
    "text": "transducers monoids and F algebras so",
    "start": "69759",
    "end": "72560"
  },
  {
    "text": "much fun you guys so here we let's just",
    "start": "72560",
    "end": "76320"
  },
  {
    "text": "do it uh so just like there's no crying",
    "start": "76320",
    "end": "78360"
  },
  {
    "text": "in baseball uh there's no Loops in",
    "start": "78360",
    "end": "80720"
  },
  {
    "text": "functional programming uh and mainly",
    "start": "80720",
    "end": "83759"
  },
  {
    "text": "because Loops are going to just mutate",
    "start": "83759",
    "end": "85720"
  },
  {
    "text": "or do some side effects or whatever and",
    "start": "85720",
    "end": "88040"
  },
  {
    "text": "it's really low level you know you have",
    "start": "88040",
    "end": "89479"
  },
  {
    "text": "all these little bits and pieces",
    "start": "89479",
    "end": "90759"
  },
  {
    "text": "everywhere and you have to rewrite it",
    "start": "90759",
    "end": "92079"
  },
  {
    "text": "every single time from the ground up um",
    "start": "92079",
    "end": "94360"
  },
  {
    "text": "we can capture these in functions um so",
    "start": "94360",
    "end": "96840"
  },
  {
    "text": "I like to call them SpaghettiOs instead",
    "start": "96840",
    "end": "98560"
  },
  {
    "text": "of Loops uh so let's talk about",
    "start": "98560",
    "end": "100360"
  },
  {
    "text": "recursion as an alternative",
    "start": "100360",
    "end": "102360"
  },
  {
    "text": "strategy um so we have the sum function",
    "start": "102360",
    "end": "105320"
  },
  {
    "text": "uh this is recursive version of it uh",
    "start": "105320",
    "end": "108200"
  },
  {
    "text": "and you've got your base case your",
    "start": "108200",
    "end": "109880"
  },
  {
    "text": "action your recursion do you guys raise",
    "start": "109880",
    "end": "111920"
  },
  {
    "text": "show your hands how many people know",
    "start": "111920",
    "end": "113240"
  },
  {
    "text": "about recursion already all right great",
    "start": "113240",
    "end": "116079"
  },
  {
    "text": "awesome uh so we're just gonna go P",
    "start": "116079",
    "end": "118600"
  },
  {
    "text": "pretty fast um so here's reverse it",
    "start": "118600",
    "end": "121280"
  },
  {
    "text": "looks very similar look at that uh and",
    "start": "121280",
    "end": "123840"
  },
  {
    "text": "it's the same stuff it's got bass it's",
    "start": "123840",
    "end": "125439"
  },
  {
    "text": "recursion it's action um something to",
    "start": "125439",
    "end": "127399"
  },
  {
    "text": "stop the recursion something to call the",
    "start": "127399",
    "end": "128720"
  },
  {
    "text": "recursion over and over again uh and if",
    "start": "128720",
    "end": "131200"
  },
  {
    "text": "we look at how it's evaluated um it's",
    "start": "131200",
    "end": "133280"
  },
  {
    "text": "just going to keep growing in memory",
    "start": "133280",
    "end": "134720"
  },
  {
    "text": "it's going to say one plus the sum of",
    "start": "134720",
    "end": "136040"
  },
  {
    "text": "the rest 1 plus two plus the sum of the",
    "start": "136040",
    "end": "137560"
  },
  {
    "text": "rest 1 plus 2 plus 3 plus and it finally",
    "start": "137560",
    "end": "139599"
  },
  {
    "text": "hits the base case and starts to come",
    "start": "139599",
    "end": "141760"
  },
  {
    "text": "back down the stack and uh the memory",
    "start": "141760",
    "end": "143879"
  },
  {
    "text": "can kind of be released uh as it folds",
    "start": "143879",
    "end": "147080"
  },
  {
    "text": "back down um but don't be worried don't",
    "start": "147080",
    "end": "149440"
  },
  {
    "text": "be scared",
    "start": "149440",
    "end": "150440"
  },
  {
    "text": "uh es6 I mean es",
    "start": "150440",
    "end": "154720"
  },
  {
    "text": "2015 is uh Sky proper tail calls um or",
    "start": "154720",
    "end": "159159"
  },
  {
    "text": "the optimization for tail calls um and",
    "start": "159159",
    "end": "162560"
  },
  {
    "text": "so what does that mean um if we look at",
    "start": "162560",
    "end": "165080"
  },
  {
    "text": "our sum uh if we actually say first plus",
    "start": "165080",
    "end": "168840"
  },
  {
    "text": "the sum of the rest it has to come back",
    "start": "168840",
    "end": "170480"
  },
  {
    "text": "to this particular invocation and add",
    "start": "170480",
    "end": "172840"
  },
  {
    "text": "this element to the sum of the rest and",
    "start": "172840",
    "end": "175159"
  },
  {
    "text": "we could rewrite that oh you can get a",
    "start": "175159",
    "end": "176760"
  },
  {
    "text": "maximum call stack exceeded and stuff",
    "start": "176760",
    "end": "178800"
  },
  {
    "text": "like that so if we rewrite it uh way",
    "start": "178800",
    "end": "181080"
  },
  {
    "text": "more complex down at the bottom with",
    "start": "181080",
    "end": "182879"
  },
  {
    "text": "this helper function called go and an",
    "start": "182879",
    "end": "185319"
  },
  {
    "text": "accumulator um we're going to call a",
    "start": "185319",
    "end": "187599"
  },
  {
    "text": "function at the end and there's nothing",
    "start": "187599",
    "end": "189159"
  },
  {
    "text": "left to do here and it can release the",
    "start": "189159",
    "end": "190599"
  },
  {
    "text": "memory uh so es6 will give us that um",
    "start": "190599",
    "end": "193640"
  },
  {
    "text": "and it would be great um and we have",
    "start": "193640",
    "end": "196000"
  },
  {
    "text": "this reduce function uh and that's also",
    "start": "196000",
    "end": "198280"
  },
  {
    "text": "tailor recursive uh except it doesn't",
    "start": "198280",
    "end": "200480"
  },
  {
    "text": "really matter how reduce is implemented",
    "start": "200480",
    "end": "202360"
  },
  {
    "text": "uh this could be with a for Loop under",
    "start": "202360",
    "end": "204200"
  },
  {
    "text": "the hood you know who cares just call",
    "start": "204200",
    "end": "205879"
  },
  {
    "text": "reduce so let's uh use sum in reverse uh",
    "start": "205879",
    "end": "210120"
  },
  {
    "text": "you know in terms of reduce and the",
    "start": "210120",
    "end": "212400"
  },
  {
    "text": "intention is much more clear we've",
    "start": "212400",
    "end": "213920"
  },
  {
    "text": "captured this recursion pattern here",
    "start": "213920",
    "end": "216280"
  },
  {
    "text": "that we looked at with sum and reverse",
    "start": "216280",
    "end": "218480"
  },
  {
    "text": "and all these other functions that are",
    "start": "218480",
    "end": "219760"
  },
  {
    "text": "really useful in this higher order",
    "start": "219760",
    "end": "221439"
  },
  {
    "text": "function and now the intent uh the",
    "start": "221439",
    "end": "223760"
  },
  {
    "text": "actual style of recursion has been uh",
    "start": "223760",
    "end": "226120"
  },
  {
    "text": "captured we could just say uh it's going",
    "start": "226120",
    "end": "228280"
  },
  {
    "text": "to add to the accumulator starting at",
    "start": "228280",
    "end": "230080"
  },
  {
    "text": "zero or we're going to concat onto",
    "start": "230080",
    "end": "232159"
  },
  {
    "text": "accumulator starting at empty list U",
    "start": "232159",
    "end": "234360"
  },
  {
    "text": "much more expressive um we could also",
    "start": "234360",
    "end": "236799"
  },
  {
    "text": "Define map and filter in terms of this",
    "start": "236799",
    "end": "238599"
  },
  {
    "text": "which is very useful you guys use map",
    "start": "238599",
    "end": "240079"
  },
  {
    "text": "and filter all the time I'm sure uh most",
    "start": "240079",
    "end": "242879"
  },
  {
    "text": "people do uh and reduce uh is is very",
    "start": "242879",
    "end": "245920"
  },
  {
    "text": "general it can Implement all these other",
    "start": "245920",
    "end": "247879"
  },
  {
    "text": "helpful useful list functions uh with it",
    "start": "247879",
    "end": "251519"
  },
  {
    "text": "uh it's actually uh catamorphism so",
    "start": "251519",
    "end": "253879"
  },
  {
    "text": "reduce is an implementation of a",
    "start": "253879",
    "end": "255480"
  },
  {
    "text": "catamorphism see catam",
    "start": "255480",
    "end": "258759"
  },
  {
    "text": "morphus",
    "start": "258759",
    "end": "260400"
  },
  {
    "text": "so it's also called a fold um and you",
    "start": "260400",
    "end": "263560"
  },
  {
    "text": "can fold left or right I'm just going to",
    "start": "263560",
    "end": "265040"
  },
  {
    "text": "say fold because I don't really care if",
    "start": "265040",
    "end": "266680"
  },
  {
    "text": "it's left or right at this in this talk",
    "start": "266680",
    "end": "268560"
  },
  {
    "text": "um and all these really useful functions",
    "start": "268560",
    "end": "270080"
  },
  {
    "text": "like all and any and all these things",
    "start": "270080",
    "end": "271720"
  },
  {
    "text": "that you would see in like low Dash or",
    "start": "271720",
    "end": "273320"
  },
  {
    "text": "ramda or underscore whatever that you",
    "start": "273320",
    "end": "275120"
  },
  {
    "text": "use on list all the time can be done in",
    "start": "275120",
    "end": "277280"
  },
  {
    "text": "terms of this catamorphism or a reduce",
    "start": "277280",
    "end": "280759"
  },
  {
    "text": "um actually any Loop can be captured",
    "start": "280759",
    "end": "283120"
  },
  {
    "text": "with a fold or reduce I'm going to say",
    "start": "283120",
    "end": "284800"
  },
  {
    "text": "fold from now on stop saying reduced uh",
    "start": "284800",
    "end": "287160"
  },
  {
    "text": "this is actually kind of a backwards",
    "start": "287160",
    "end": "288600"
  },
  {
    "text": "slide because you would think that",
    "start": "288600",
    "end": "290039"
  },
  {
    "text": "Superman would be the it doesn't matter",
    "start": "290039",
    "end": "292759"
  },
  {
    "text": "um so it's because she has a lasso and",
    "start": "292759",
    "end": "294280"
  },
  {
    "text": "it's a loop okay uh so there's other",
    "start": "294280",
    "end": "297440"
  },
  {
    "text": "things like an apomorphic um and that's",
    "start": "297440",
    "end": "300400"
  },
  {
    "text": "another different recursion scheme uh",
    "start": "300400",
    "end": "302400"
  },
  {
    "text": "we've got a paramorphic um if those kids",
    "start": "302400",
    "end": "305680"
  },
  {
    "text": "in the CL um you can capture that with",
    "start": "305680",
    "end": "308639"
  },
  {
    "text": "um a higher order function as well and",
    "start": "308639",
    "end": "310240"
  },
  {
    "text": "it doesn't matter if it's recursive or",
    "start": "310240",
    "end": "311680"
  },
  {
    "text": "it's a you know a loop underneath but",
    "start": "311680",
    "end": "313680"
  },
  {
    "text": "this one's cool it passes in the rest of",
    "start": "313680",
    "end": "315960"
  },
  {
    "text": "the list to your accumulator function",
    "start": "315960",
    "end": "318759"
  },
  {
    "text": "and that'll uh you know be useful for",
    "start": "318759",
    "end": "320639"
  },
  {
    "text": "things like sorts but you can still do",
    "start": "320639",
    "end": "322240"
  },
  {
    "text": "this uh with a reduce as well it just",
    "start": "322240",
    "end": "324400"
  },
  {
    "text": "kind of gives you some helping hands",
    "start": "324400",
    "end": "326160"
  },
  {
    "text": "here anyway so these extra functions and",
    "start": "326160",
    "end": "328600"
  },
  {
    "text": "these recursion schemes can be caught in",
    "start": "328600",
    "end": "330479"
  },
  {
    "text": "higher order functions I like to call",
    "start": "330479",
    "end": "331880"
  },
  {
    "text": "them higher order recursion schemes or",
    "start": "331880",
    "end": "334479"
  },
  {
    "text": "horse um second horse joke I wasn't",
    "start": "334479",
    "end": "338960"
  },
  {
    "text": "going to do that I thought it'd be too",
    "start": "338960",
    "end": "340639"
  },
  {
    "text": "racy",
    "start": "340639",
    "end": "342240"
  },
  {
    "text": "um so anyway uh so that's a recursion in",
    "start": "342240",
    "end": "346960"
  },
  {
    "text": "a nutshell you guys already knew um co-",
    "start": "346960",
    "end": "349520"
  },
  {
    "text": "recursion this is a little bit more",
    "start": "349520",
    "end": "350919"
  },
  {
    "text": "interesting it's going to get more",
    "start": "350919",
    "end": "352000"
  },
  {
    "text": "interesting as it goes along so bear",
    "start": "352000",
    "end": "353400"
  },
  {
    "text": "with me um so this is called an",
    "start": "353400",
    "end": "356080"
  },
  {
    "text": "anamorphism uh Frozen fans where my",
    "start": "356080",
    "end": "358800"
  },
  {
    "text": "dad's at so uh if you've seen unfold uh",
    "start": "358800",
    "end": "362600"
  },
  {
    "text": "you can be implement this in plenty of",
    "start": "362600",
    "end": "364199"
  },
  {
    "text": "different ways this is just a really",
    "start": "364199",
    "end": "365479"
  },
  {
    "text": "simple imple implementation you don't",
    "start": "365479",
    "end": "367080"
  },
  {
    "text": "have to worry about the code too much",
    "start": "367080",
    "end": "369000"
  },
  {
    "text": "here um what we can do with unfold",
    "start": "369000",
    "end": "370960"
  },
  {
    "text": "though is uh we can we start with zero",
    "start": "370960",
    "end": "374000"
  },
  {
    "text": "which is our seed and then we return a",
    "start": "374000",
    "end": "376240"
  },
  {
    "text": "pair of our value and the next seed so",
    "start": "376240",
    "end": "379000"
  },
  {
    "text": "the next seed here is X plus one and our",
    "start": "379000",
    "end": "380759"
  },
  {
    "text": "value is the actual character code and",
    "start": "380759",
    "end": "382800"
  },
  {
    "text": "then once we return nil it stops so this",
    "start": "382800",
    "end": "384960"
  },
  {
    "text": "is basically like the functional",
    "start": "384960",
    "end": "386639"
  },
  {
    "text": "equivalent of a while loop and you can",
    "start": "386639",
    "end": "388599"
  },
  {
    "text": "just call unfold and will do cool stuff",
    "start": "388599",
    "end": "390639"
  },
  {
    "text": "like that uh we've got range um we can",
    "start": "390639",
    "end": "393520"
  },
  {
    "text": "Implement in terms of unfold so we've",
    "start": "393520",
    "end": "395639"
  },
  {
    "text": "got our folds and we've got our unfolds",
    "start": "395639",
    "end": "397440"
  },
  {
    "text": "and one's generating stuff one's",
    "start": "397440",
    "end": "399160"
  },
  {
    "text": "reducing things down um and you know we",
    "start": "399160",
    "end": "402720"
  },
  {
    "text": "can do this to many other data",
    "start": "402720",
    "end": "404000"
  },
  {
    "text": "structures not just lists or arrays I'm",
    "start": "404000",
    "end": "407199"
  },
  {
    "text": "going to use those two interchangeably",
    "start": "407199",
    "end": "409000"
  },
  {
    "text": "uh so tree um can be folded down or",
    "start": "409000",
    "end": "411599"
  },
  {
    "text": "unfolded and you know we've got event",
    "start": "411599",
    "end": "413560"
  },
  {
    "text": "streams that can fold with an",
    "start": "413560",
    "end": "415080"
  },
  {
    "text": "accumulator um we've got objects",
    "start": "415080",
    "end": "417400"
  },
  {
    "text": "infinitely many data structures you can",
    "start": "417400",
    "end": "419039"
  },
  {
    "text": "just fold it down there's an intuition",
    "start": "419039",
    "end": "421039"
  },
  {
    "text": "about it we say we have this data",
    "start": "421039",
    "end": "423080"
  },
  {
    "text": "structure and we want to kind of reduce",
    "start": "423080",
    "end": "424440"
  },
  {
    "text": "it into a value uh with an accumulator",
    "start": "424440",
    "end": "427080"
  },
  {
    "text": "so there's something important here",
    "start": "427080",
    "end": "428960"
  },
  {
    "text": "there's some kind of theory and",
    "start": "428960",
    "end": "430240"
  },
  {
    "text": "something really General that if we can",
    "start": "430240",
    "end": "432039"
  },
  {
    "text": "understand and get at uh we can Define",
    "start": "432039",
    "end": "434240"
  },
  {
    "text": "this um for many different data types",
    "start": "434240",
    "end": "436440"
  },
  {
    "text": "and we can find all those useful list",
    "start": "436440",
    "end": "437960"
  },
  {
    "text": "functions you know those ones any all",
    "start": "437960",
    "end": "439840"
  },
  {
    "text": "some find uh sort like these things are",
    "start": "439840",
    "end": "442560"
  },
  {
    "text": "really really useful so um here we go",
    "start": "442560",
    "end": "445280"
  },
  {
    "text": "we've got a linked list that we're going",
    "start": "445280",
    "end": "446879"
  },
  {
    "text": "to use for ourselves um and uh so we can",
    "start": "446879",
    "end": "450280"
  },
  {
    "text": "kind of investigate this mystery um do",
    "start": "450280",
    "end": "453160"
  },
  {
    "text": "you guys know link lists hand see all",
    "start": "453160",
    "end": "455639"
  },
  {
    "text": "right it's a basically the first",
    "start": "455639",
    "end": "457759"
  },
  {
    "text": "element's The Head and the rest is the",
    "start": "457759",
    "end": "459280"
  },
  {
    "text": "tail so cons three and the seconde",
    "start": "459280",
    "end": "462759"
  },
  {
    "text": "property is the rest of the list um all",
    "start": "462759",
    "end": "465280"
  },
  {
    "text": "the way down to nil we could represent",
    "start": "465280",
    "end": "467080"
  },
  {
    "text": "that with uh a JavaScript object here um",
    "start": "467080",
    "end": "470840"
  },
  {
    "text": "I'm going to by convention uh do this",
    "start": "470840",
    "end": "473080"
  },
  {
    "text": "gross thing of calling underscore cons",
    "start": "473080",
    "end": "475360"
  },
  {
    "text": "as my object but then a non underscore",
    "start": "475360",
    "end": "477840"
  },
  {
    "text": "cons so I just don't forget to wrate new",
    "start": "477840",
    "end": "480919"
  },
  {
    "text": "um and nil is just a singl ton so I",
    "start": "480919",
    "end": "482319"
  },
  {
    "text": "don't have to do that but for the rest",
    "start": "482319",
    "end": "483840"
  },
  {
    "text": "of the talk I'll be doing underscore for",
    "start": "483840",
    "end": "485479"
  },
  {
    "text": "things that are actual objects and then",
    "start": "485479",
    "end": "487639"
  },
  {
    "text": "the rest is just a public Constructor so",
    "start": "487639",
    "end": "490680"
  },
  {
    "text": "yeah here's our cons link list um and we",
    "start": "490680",
    "end": "493479"
  },
  {
    "text": "can do the same thing with trees don't",
    "start": "493479",
    "end": "495479"
  },
  {
    "text": "worry about it it's a tree definition um",
    "start": "495479",
    "end": "498000"
  },
  {
    "start": "497000",
    "end": "776000"
  },
  {
    "text": "so that's that's a code recursion uh and",
    "start": "498000",
    "end": "501199"
  },
  {
    "text": "uh I Define those extra helpers so we",
    "start": "501199",
    "end": "503560"
  },
  {
    "text": "can we could look at things throughout",
    "start": "503560",
    "end": "505800"
  },
  {
    "text": "so transducers are you guys excited do",
    "start": "505800",
    "end": "507840"
  },
  {
    "text": "you guys know what transducers are all",
    "start": "507840",
    "end": "509800"
  },
  {
    "text": "right cool let's look at those for a",
    "start": "509800",
    "end": "511800"
  },
  {
    "text": "second I'm not going to go too deep into",
    "start": "511800",
    "end": "513440"
  },
  {
    "text": "it I just want to kind of explain the",
    "start": "513440",
    "end": "514599"
  },
  {
    "text": "idea behind them um so if you have map",
    "start": "514599",
    "end": "518399"
  },
  {
    "text": "uh and you're doing a reduce this is",
    "start": "518399",
    "end": "519959"
  },
  {
    "text": "kind of just like a general reduction",
    "start": "519959",
    "end": "521518"
  },
  {
    "text": "here where we have um a few things going",
    "start": "521519",
    "end": "524399"
  },
  {
    "text": "on uh we have an iterator or we're doing",
    "start": "524399",
    "end": "527440"
  },
  {
    "text": "iteration we're doing accumulation and",
    "start": "527440",
    "end": "529959"
  },
  {
    "text": "we're doing transformation so uh as you",
    "start": "529959",
    "end": "532480"
  },
  {
    "text": "walk your your list you've got your",
    "start": "532480",
    "end": "534399"
  },
  {
    "text": "input list and then you've got your",
    "start": "534399",
    "end": "535560"
  },
  {
    "text": "output list doing accumulation there",
    "start": "535560",
    "end": "537200"
  },
  {
    "text": "could be two different types right I",
    "start": "537200",
    "end": "538720"
  },
  {
    "text": "could start with with a list and end",
    "start": "538720",
    "end": "540200"
  },
  {
    "text": "with a number or whatever so our",
    "start": "540200",
    "end": "541800"
  },
  {
    "text": "accumulator and our iterator thing have",
    "start": "541800",
    "end": "544040"
  },
  {
    "text": "two different types sometimes um we",
    "start": "544040",
    "end": "546079"
  },
  {
    "text": "transform",
    "start": "546079",
    "end": "547240"
  },
  {
    "text": "everything so I'm going to make some",
    "start": "547240",
    "end": "549760"
  },
  {
    "text": "terminology here this first argument to",
    "start": "549760",
    "end": "552279"
  },
  {
    "text": "reduce I'm going to call that a reducing",
    "start": "552279",
    "end": "554560"
  },
  {
    "text": "function or a reducer let's just call it",
    "start": "554560",
    "end": "556680"
  },
  {
    "text": "a reducer okay so this first argument",
    "start": "556680",
    "end": "559120"
  },
  {
    "text": "reduce is called a reducer it takes an",
    "start": "559120",
    "end": "560519"
  },
  {
    "text": "AC and an X and it just returns a new",
    "start": "560519",
    "end": "563839"
  },
  {
    "text": "accumulator so what if we kind of pull",
    "start": "563839",
    "end": "566680"
  },
  {
    "text": "out the reducing function the first",
    "start": "566680",
    "end": "568760"
  },
  {
    "text": "argument to reduce and we just you know",
    "start": "568760",
    "end": "571839"
  },
  {
    "text": "return it by calling mapper so I call",
    "start": "571839",
    "end": "573959"
  },
  {
    "text": "mapper and it just gives me the first",
    "start": "573959",
    "end": "575399"
  },
  {
    "text": "argument to reduce and there we go why",
    "start": "575399",
    "end": "577839"
  },
  {
    "text": "would we do that um well let's make it a",
    "start": "577839",
    "end": "580040"
  },
  {
    "text": "little bit more General um since this",
    "start": "580040",
    "end": "582360"
  },
  {
    "text": "reducing function is also dependent on",
    "start": "582360",
    "end": "584240"
  },
  {
    "text": "concat uh let's pass in concat there uh",
    "start": "584240",
    "end": "587760"
  },
  {
    "text": "so we're giving mapper a function to map",
    "start": "587760",
    "end": "590079"
  },
  {
    "text": "and its way to accumulate right it's",
    "start": "590079",
    "end": "592240"
  },
  {
    "text": "concat uh and uh we can do the same",
    "start": "592240",
    "end": "595120"
  },
  {
    "text": "thing with uh filter here's our filterer",
    "start": "595120",
    "end": "598399"
  },
  {
    "text": "uh and the so so basically all these",
    "start": "598399",
    "end": "600959"
  },
  {
    "text": "functions are doing is returning the",
    "start": "600959",
    "end": "602320"
  },
  {
    "text": "first argument to reduce a reducing",
    "start": "602320",
    "end": "604480"
  },
  {
    "text": "function a reducer um and that's the",
    "start": "604480",
    "end": "607519"
  },
  {
    "text": "reducing function but look at this uh",
    "start": "607519",
    "end": "610360"
  },
  {
    "text": "signature here the concat function has",
    "start": "610360",
    "end": "613399"
  },
  {
    "text": "the same arguments and does the same",
    "start": "613399",
    "end": "615440"
  },
  {
    "text": "thing as our reducing function it takes",
    "start": "615440",
    "end": "617720"
  },
  {
    "text": "an accumulator and an element and",
    "start": "617720",
    "end": "619240"
  },
  {
    "text": "returns a new accumulator so that means",
    "start": "619240",
    "end": "621600"
  },
  {
    "text": "our concat function our accumulating",
    "start": "621600",
    "end": "623640"
  },
  {
    "text": "function is a reducing function as well",
    "start": "623640",
    "end": "626519"
  },
  {
    "text": "uh we can actually just pass concat",
    "start": "626519",
    "end": "628160"
  },
  {
    "text": "directly to reduce and just top of the",
    "start": "628160",
    "end": "629920"
  },
  {
    "text": "list so we can pass other reducing",
    "start": "629920",
    "end": "633640"
  },
  {
    "text": "functions to other reducing functions",
    "start": "633640",
    "end": "636440"
  },
  {
    "text": "all the way down and it's like reducing",
    "start": "636440",
    "end": "638839"
  },
  {
    "text": "Inception um so you basically uh when is",
    "start": "638839",
    "end": "642560"
  },
  {
    "text": "that Inception thing going to get played",
    "start": "642560",
    "end": "643880"
  },
  {
    "text": "out um so you've got concat and that you",
    "start": "643880",
    "end": "647959"
  },
  {
    "text": "know passes that into mapper and that",
    "start": "647959",
    "end": "649399"
  },
  {
    "text": "makes a reducing function and that gets",
    "start": "649399",
    "end": "651399"
  },
  {
    "text": "that turns into the concat pass to",
    "start": "651399",
    "end": "653000"
  },
  {
    "text": "filter and makes a reducing function all",
    "start": "653000",
    "end": "654680"
  },
  {
    "text": "these things return reducing functions",
    "start": "654680",
    "end": "656600"
  },
  {
    "text": "that's called function composition uh",
    "start": "656600",
    "end": "658800"
  },
  {
    "text": "and we can actually make a kind of a",
    "start": "658800",
    "end": "660839"
  },
  {
    "text": "pipeline of Transformations and mapper",
    "start": "660839",
    "end": "664320"
  },
  {
    "text": "and filter here are called our",
    "start": "664320",
    "end": "666760"
  },
  {
    "text": "transducers uh so transducers are just",
    "start": "666760",
    "end": "669120"
  },
  {
    "text": "the mapper just the filter apart but the",
    "start": "669120",
    "end": "671519"
  },
  {
    "text": "interesting thing here is that the uh",
    "start": "671519",
    "end": "674480"
  },
  {
    "text": "reduction itself is is in one Loop",
    "start": "674480",
    "end": "677399"
  },
  {
    "text": "there's no first you map over the whole",
    "start": "677399",
    "end": "679639"
  },
  {
    "text": "thing then you filter the whole thing",
    "start": "679639",
    "end": "680920"
  },
  {
    "text": "it's just we're going to make this uh",
    "start": "680920",
    "end": "683440"
  },
  {
    "text": "this transformation pipeline that's",
    "start": "683440",
    "end": "685120"
  },
  {
    "text": "totally ignorant of its input and its",
    "start": "685120",
    "end": "686760"
  },
  {
    "text": "output and we're just going to give it",
    "start": "686760",
    "end": "688440"
  },
  {
    "text": "to the reduce so it does it once and it",
    "start": "688440",
    "end": "690320"
  },
  {
    "text": "will both filter and map so that's",
    "start": "690320",
    "end": "692120"
  },
  {
    "text": "really cool it does this kind of stream",
    "start": "692120",
    "end": "693600"
  },
  {
    "text": "Fusion for us uh we kind of do it",
    "start": "693600",
    "end": "695720"
  },
  {
    "text": "manually as we build it up uh and as a",
    "start": "695720",
    "end": "699600"
  },
  {
    "text": "bonus we have our list here and we can",
    "start": "699600",
    "end": "702120"
  },
  {
    "text": "uh we have a iterator protocol uh that",
    "start": "702120",
    "end": "704399"
  },
  {
    "text": "we can program against uh in es6 so I'm",
    "start": "704399",
    "end": "707519"
  },
  {
    "text": "using fat arrows here because why not um",
    "start": "707519",
    "end": "710639"
  },
  {
    "text": "I'm talking about es6 anyway um but so",
    "start": "710639",
    "end": "713760"
  },
  {
    "text": "we can iterate over this list and we",
    "start": "713760",
    "end": "715480"
  },
  {
    "text": "don't need to keep it shape so um we can",
    "start": "715480",
    "end": "717920"
  },
  {
    "text": "actually use the iterator protocol to",
    "start": "717920",
    "end": "719440"
  },
  {
    "text": "implement uh this reduce uh but this",
    "start": "719440",
    "end": "722399"
  },
  {
    "text": "part is a little bit trickier we don't",
    "start": "722399",
    "end": "724000"
  },
  {
    "text": "have a protocol here for accumulation um",
    "start": "724000",
    "end": "726680"
  },
  {
    "text": "so we have to know that we want to start",
    "start": "726680",
    "end": "728480"
  },
  {
    "text": "an empty list and we have to know how to",
    "start": "728480",
    "end": "730519"
  },
  {
    "text": "build it up how to accumulate them",
    "start": "730519",
    "end": "732200"
  },
  {
    "text": "together um same thing with our link",
    "start": "732200",
    "end": "734320"
  },
  {
    "text": "list here that we defined we can make it",
    "start": "734320",
    "end": "736399"
  },
  {
    "text": "an iterator that's all good but what",
    "start": "736399",
    "end": "738000"
  },
  {
    "text": "about this nil and aend like we have to",
    "start": "738000",
    "end": "740279"
  },
  {
    "text": "have them publicly available to kind of",
    "start": "740279",
    "end": "742360"
  },
  {
    "text": "construct this computation and we have",
    "start": "742360",
    "end": "744360"
  },
  {
    "text": "to know like where to start and and how",
    "start": "744360",
    "end": "746399"
  },
  {
    "text": "that works and same thing with our tree",
    "start": "746399",
    "end": "748000"
  },
  {
    "text": "here so um we've got kind of our",
    "start": "748000",
    "end": "751120"
  },
  {
    "text": "iteration just done iterator protocol",
    "start": "751120",
    "end": "753199"
  },
  {
    "text": "cool uh we've got transformation just",
    "start": "753199",
    "end": "755399"
  },
  {
    "text": "Grand Slam out of the park like we can",
    "start": "755399",
    "end": "757360"
  },
  {
    "text": "build up composable generic",
    "start": "757360",
    "end": "759440"
  },
  {
    "text": "Transformations that work on any data",
    "start": "759440",
    "end": "761279"
  },
  {
    "text": "type because they don't care about their",
    "start": "761279",
    "end": "762279"
  },
  {
    "text": "input and they don't care about their",
    "start": "762279",
    "end": "763320"
  },
  {
    "text": "output we're actually feeding that stuff",
    "start": "763320",
    "end": "765320"
  },
  {
    "text": "in and then the accumulation not so much",
    "start": "765320",
    "end": "768079"
  },
  {
    "text": "there's no real protocol to work on and",
    "start": "768079",
    "end": "769680"
  },
  {
    "text": "I have to know stuff about you know what",
    "start": "769680",
    "end": "771560"
  },
  {
    "text": "I'm trying to build up and I have to",
    "start": "771560",
    "end": "773000"
  },
  {
    "text": "have access to those functions um so uh",
    "start": "773000",
    "end": "777079"
  },
  {
    "start": "776000",
    "end": "785000"
  },
  {
    "text": "I just lied there is actually a protocol",
    "start": "777079",
    "end": "778720"
  },
  {
    "text": "for building things up um it's called am",
    "start": "778720",
    "end": "780760"
  },
  {
    "text": "monoid so let's talk about them for a",
    "start": "780760",
    "end": "782519"
  },
  {
    "text": "minute uh so let's see here uh canat",
    "start": "782519",
    "end": "786360"
  },
  {
    "start": "785000",
    "end": "812000"
  },
  {
    "text": "actually has some uh properties to it uh",
    "start": "786360",
    "end": "789839"
  },
  {
    "text": "so we just saw concat in the empty list",
    "start": "789839",
    "end": "792399"
  },
  {
    "text": "and it turns out if you concat an empty",
    "start": "792399",
    "end": "794360"
  },
  {
    "text": "list to the left or right of any list",
    "start": "794360",
    "end": "796079"
  },
  {
    "text": "you'll just get that list back or it's",
    "start": "796079",
    "end": "797519"
  },
  {
    "text": "just like a neutral thing that doesn't",
    "start": "797519",
    "end": "799480"
  },
  {
    "text": "do anything so it's a great place to",
    "start": "799480",
    "end": "801040"
  },
  {
    "text": "start uh and then it's also associative",
    "start": "801040",
    "end": "803760"
  },
  {
    "text": "so you can Con cat you know a list with",
    "start": "803760",
    "end": "806040"
  },
  {
    "text": "another list and can cat that with the",
    "start": "806040",
    "end": "807440"
  },
  {
    "text": "list or you can you know flip it around",
    "start": "807440",
    "end": "809440"
  },
  {
    "text": "you always end up with the same",
    "start": "809440",
    "end": "811440"
  },
  {
    "text": "result uh so in fantasy land JS there's",
    "start": "811440",
    "end": "815000"
  },
  {
    "start": "812000",
    "end": "828000"
  },
  {
    "text": "actually a specification for this um so",
    "start": "815000",
    "end": "817480"
  },
  {
    "text": "it's uh saying anything is a monoid if",
    "start": "817480",
    "end": "820560"
  },
  {
    "text": "it has its concat and its empty method",
    "start": "820560",
    "end": "822720"
  },
  {
    "text": "and it abides by these uh laws or this",
    "start": "822720",
    "end": "825680"
  },
  {
    "text": "contract or however you want to say it",
    "start": "825680",
    "end": "828000"
  },
  {
    "start": "828000",
    "end": "853000"
  },
  {
    "text": "um so uh let's let's do that let's make",
    "start": "828000",
    "end": "831160"
  },
  {
    "text": "am monoid um so it turns out list or",
    "start": "831160",
    "end": "833680"
  },
  {
    "text": "array was already am monoid with concat",
    "start": "833680",
    "end": "835399"
  },
  {
    "text": "an empty array but let's make a few",
    "start": "835399",
    "end": "837839"
  },
  {
    "text": "other ones so here have sum um and we're",
    "start": "837839",
    "end": "841160"
  },
  {
    "text": "going to do something wacky we're going",
    "start": "841160",
    "end": "842560"
  },
  {
    "text": "to make a sum type uh like an object U",
    "start": "842560",
    "end": "846199"
  },
  {
    "text": "we've got that underscore private thing",
    "start": "846199",
    "end": "848040"
  },
  {
    "text": "and then my public instructor uh and",
    "start": "848040",
    "end": "850480"
  },
  {
    "text": "it's just got one property called",
    "start": "850480",
    "end": "852399"
  },
  {
    "text": "Val uh and then uh we basically put the",
    "start": "852399",
    "end": "857279"
  },
  {
    "start": "853000",
    "end": "883000"
  },
  {
    "text": "first arguments to reduce on the type",
    "start": "857279",
    "end": "859880"
  },
  {
    "text": "itself so the first argument to reduce",
    "start": "859880",
    "end": "862680"
  },
  {
    "text": "is going to you know add two things",
    "start": "862680",
    "end": "865120"
  },
  {
    "text": "together that's what our concats doing",
    "start": "865120",
    "end": "866600"
  },
  {
    "text": "it's saying I've got a sum so I'm going",
    "start": "866600",
    "end": "868399"
  },
  {
    "text": "to add it to another sum we're going to",
    "start": "868399",
    "end": "870600"
  },
  {
    "text": "uh add their their vals together and",
    "start": "870600",
    "end": "872120"
  },
  {
    "text": "then we start with an empty uh sum with",
    "start": "872120",
    "end": "874759"
  },
  {
    "text": "a zero as its first argument so these",
    "start": "874759",
    "end": "877079"
  },
  {
    "text": "two kind of correspond to each other the",
    "start": "877079",
    "end": "878959"
  },
  {
    "text": "concat and empty are just the first two",
    "start": "878959",
    "end": "880839"
  },
  {
    "text": "arguments to reduce and if we have that",
    "start": "880839",
    "end": "884399"
  },
  {
    "start": "883000",
    "end": "937000"
  },
  {
    "text": "uh well we can make a reduce that",
    "start": "884399",
    "end": "885839"
  },
  {
    "text": "doesn't care about its first function or",
    "start": "885839",
    "end": "888040"
  },
  {
    "text": "its uh seed argument it just or its",
    "start": "888040",
    "end": "890320"
  },
  {
    "text": "first accumulator we could just call it",
    "start": "890320",
    "end": "892279"
  },
  {
    "text": "directly with the list and of this type",
    "start": "892279",
    "end": "894320"
  },
  {
    "text": "and it can figure out what those are so",
    "start": "894320",
    "end": "896800"
  },
  {
    "text": "folding down a list of sums will give me",
    "start": "896800",
    "end": "898320"
  },
  {
    "text": "a sum of 10 the first time I saw this I",
    "start": "898320",
    "end": "900320"
  },
  {
    "text": "was like why the hell would anybody do",
    "start": "900320",
    "end": "902040"
  },
  {
    "text": "that it's so weird I would rather work",
    "start": "902040",
    "end": "904160"
  },
  {
    "text": "with functions what am I doing like",
    "start": "904160",
    "end": "905639"
  },
  {
    "text": "making the sum type that's only good for",
    "start": "905639",
    "end": "907880"
  },
  {
    "text": "this um but it's actually really useful",
    "start": "907880",
    "end": "910759"
  },
  {
    "text": "um we'll look at that why in like two or",
    "start": "910759",
    "end": "912720"
  },
  {
    "text": "three slides from here so just hang",
    "start": "912720",
    "end": "914240"
  },
  {
    "text": "tight but um so we've got a fold that",
    "start": "914240",
    "end": "916240"
  },
  {
    "text": "will just fold this list down into one",
    "start": "916240",
    "end": "917880"
  },
  {
    "text": "sum and and this should be uh relatively",
    "start": "917880",
    "end": "920920"
  },
  {
    "text": "clear what's happening even though I'm",
    "start": "920920",
    "end": "922480"
  },
  {
    "text": "just blasting through slides so um sorry",
    "start": "922480",
    "end": "924800"
  },
  {
    "text": "if you get lost in the code um so we can",
    "start": "924800",
    "end": "927720"
  },
  {
    "text": "do the same thing with product",
    "start": "927720",
    "end": "929480"
  },
  {
    "text": "um products can be combined with a you",
    "start": "929480",
    "end": "932199"
  },
  {
    "text": "know a multiplication and start with one",
    "start": "932199",
    "end": "935279"
  },
  {
    "text": "um we can fold that down um we could do",
    "start": "935279",
    "end": "937360"
  },
  {
    "text": "the same thing with Max and Min just",
    "start": "937360",
    "end": "939199"
  },
  {
    "text": "always keep the highest and start with",
    "start": "939199",
    "end": "940880"
  },
  {
    "text": "negative Infinity which is an actual",
    "start": "940880",
    "end": "942759"
  },
  {
    "text": "JavaScript value which is so cool um uh",
    "start": "942759",
    "end": "946880"
  },
  {
    "text": "that should be my new Avatar I want it's",
    "start": "946880",
    "end": "948759"
  },
  {
    "text": "negative Infinity um and then we've got",
    "start": "948759",
    "end": "951519"
  },
  {
    "text": "all and any so this works for booleans",
    "start": "951519",
    "end": "953759"
  },
  {
    "text": "and stuff too it's uh so all just says",
    "start": "953759",
    "end": "956480"
  },
  {
    "text": "hey everything in the list and guess",
    "start": "956480",
    "end": "957959"
  },
  {
    "text": "what don't these look lot like those",
    "start": "957959",
    "end": "959880"
  },
  {
    "text": "really useful list functions that we",
    "start": "959880",
    "end": "961480"
  },
  {
    "text": "listed at the beginning all any Su",
    "start": "961480",
    "end": "963680"
  },
  {
    "text": "products Max Min um yeah these are these",
    "start": "963680",
    "end": "966360"
  },
  {
    "text": "are really useful functions just kind of",
    "start": "966360",
    "end": "967959"
  },
  {
    "text": "put into a type um remember we were able",
    "start": "967959",
    "end": "970399"
  },
  {
    "text": "to reduce things and and make things in",
    "start": "970399",
    "end": "972720"
  },
  {
    "text": "terms of reduce well now we're putting",
    "start": "972720",
    "end": "974040"
  },
  {
    "text": "those arguments on the type themselves",
    "start": "974040",
    "end": "976279"
  },
  {
    "text": "we'll see the benefit um so you can make",
    "start": "976279",
    "end": "978240"
  },
  {
    "text": "all these functions with these things",
    "start": "978240",
    "end": "979959"
  },
  {
    "text": "we'll see the benefit of that here in a",
    "start": "979959",
    "end": "981880"
  },
  {
    "text": "second um oh also I'm iterating over a",
    "start": "981880",
    "end": "985240"
  },
  {
    "text": "list here um which is you know we get",
    "start": "985240",
    "end": "988199"
  },
  {
    "text": "that iterator Pro protocol so that's",
    "start": "988199",
    "end": "989800"
  },
  {
    "text": "cool um we can iterate over data other",
    "start": "989800",
    "end": "992440"
  },
  {
    "text": "data types so we can make this little",
    "start": "992440",
    "end": "995079"
  },
  {
    "text": "fold map function uh this is a really",
    "start": "995079",
    "end": "997399"
  },
  {
    "text": "simplified version and it depends on map",
    "start": "997399",
    "end": "999759"
  },
  {
    "text": "so don't worry about it too much there's",
    "start": "999759",
    "end": "1001360"
  },
  {
    "text": "a really complex one that uses the",
    "start": "1001360",
    "end": "1002839"
  },
  {
    "text": "iterator um but if you look down at the",
    "start": "1002839",
    "end": "1005279"
  },
  {
    "text": "bottom we've got sum Max any and all",
    "start": "1005279",
    "end": "1006959"
  },
  {
    "text": "it's doing is saying hey take your list",
    "start": "1006959",
    "end": "1009880"
  },
  {
    "text": "of something put it make them all sums",
    "start": "1009880",
    "end": "1012720"
  },
  {
    "text": "and then fold it down and give me the",
    "start": "1012720",
    "end": "1013959"
  },
  {
    "text": "value or put your list of anything make",
    "start": "1013959",
    "end": "1015959"
  },
  {
    "text": "them all Maxes and fold it down and give",
    "start": "1015959",
    "end": "1017800"
  },
  {
    "text": "me the value any all that's how you can",
    "start": "1017800",
    "end": "1019959"
  },
  {
    "text": "basically Define these functions um and",
    "start": "1019959",
    "end": "1022279"
  },
  {
    "text": "we can make them work on anything that",
    "start": "1022279",
    "end": "1024240"
  },
  {
    "text": "that's an iterator so that's pretty",
    "start": "1024240",
    "end": "1025880"
  },
  {
    "text": "great uh so we've got our tree some tree",
    "start": "1025880",
    "end": "1028798"
  },
  {
    "text": "product and our cons any and our cons",
    "start": "1028799",
    "end": "1031438"
  },
  {
    "text": "all uh and it's also because of that",
    "start": "1031439",
    "end": "1034038"
  },
  {
    "text": "associativity we can do it in parallel",
    "start": "1034039",
    "end": "1036079"
  },
  {
    "text": "so that's pretty great um and uh to be",
    "start": "1036079",
    "end": "1039520"
  },
  {
    "text": "fair you're not going to get much of a",
    "start": "1039520",
    "end": "1040880"
  },
  {
    "text": "win if you try to do parallelism in",
    "start": "1040880",
    "end": "1042438"
  },
  {
    "text": "JavaScript you're going to have to spend",
    "start": "1042439",
    "end": "1043640"
  },
  {
    "text": "more time chunking an array and and",
    "start": "1043640",
    "end": "1045678"
  },
  {
    "text": "running down the list but uh it's often",
    "start": "1045679",
    "end": "1047880"
  },
  {
    "text": "useful to know that property uh just in",
    "start": "1047880",
    "end": "1050200"
  },
  {
    "text": "case you do want to try that so uh so",
    "start": "1050200",
    "end": "1054120"
  },
  {
    "text": "we've got our iteration done and our",
    "start": "1054120",
    "end": "1056280"
  },
  {
    "text": "transformation no not so much uh because",
    "start": "1056280",
    "end": "1059120"
  },
  {
    "text": "these things are already built in we're",
    "start": "1059120",
    "end": "1060360"
  },
  {
    "text": "not actually transforming anything we're",
    "start": "1060360",
    "end": "1061840"
  },
  {
    "text": "just saying hey make my same make my",
    "start": "1061840",
    "end": "1063600"
  },
  {
    "text": "product like not running functions on",
    "start": "1063600",
    "end": "1066080"
  },
  {
    "text": "values uh but the accumulation is what",
    "start": "1066080",
    "end": "1068240"
  },
  {
    "text": "this is all about we're we're killing it",
    "start": "1068240",
    "end": "1070120"
  },
  {
    "text": "there so uh this is kind of different",
    "start": "1070120",
    "end": "1072120"
  },
  {
    "text": "from transducers and in fact there are",
    "start": "1072120",
    "end": "1073919"
  },
  {
    "text": "monoidal transducers that you can use",
    "start": "1073919",
    "end": "1076520"
  },
  {
    "text": "I'm not going to talk about them today",
    "start": "1076520",
    "end": "1078120"
  },
  {
    "text": "but um you can kind of combine the two",
    "start": "1078120",
    "end": "1080919"
  },
  {
    "start": "1080000",
    "end": "1103000"
  },
  {
    "text": "uh so if you look at this type uh we've",
    "start": "1080919",
    "end": "1083159"
  },
  {
    "text": "got this array of sums and it's going to",
    "start": "1083159",
    "end": "1085520"
  },
  {
    "text": "give me a sum and you know or a list of",
    "start": "1085520",
    "end": "1088080"
  },
  {
    "text": "products list of Macs or mens and it",
    "start": "1088080",
    "end": "1090240"
  },
  {
    "text": "basically takes it down a type like",
    "start": "1090240",
    "end": "1093240"
  },
  {
    "text": "we've got um some type of another type",
    "start": "1093240",
    "end": "1096080"
  },
  {
    "text": "and it gives me that other type that's",
    "start": "1096080",
    "end": "1097360"
  },
  {
    "text": "kind of the idea behind folding right if",
    "start": "1097360",
    "end": "1099400"
  },
  {
    "text": "I reduce a list of things I'll get one",
    "start": "1099400",
    "end": "1102440"
  },
  {
    "text": "value um and this F of a this some type",
    "start": "1102440",
    "end": "1106360"
  },
  {
    "start": "1103000",
    "end": "1125000"
  },
  {
    "text": "of a to a um even though the Ty is a",
    "start": "1106360",
    "end": "1109159"
  },
  {
    "text": "list of another type uh that's called an",
    "start": "1109159",
    "end": "1111480"
  },
  {
    "text": "algebra uh so let's look at F",
    "start": "1111480",
    "end": "1114960"
  },
  {
    "text": "algebras and uh no not that F A lot of",
    "start": "1114960",
    "end": "1118679"
  },
  {
    "text": "people are like f",
    "start": "1118679",
    "end": "1121600"
  },
  {
    "text": "algebra so",
    "start": "1121600",
    "end": "1124080"
  },
  {
    "text": "um uh so catamorphism uh we can actually",
    "start": "1124080",
    "end": "1127799"
  },
  {
    "start": "1125000",
    "end": "1158000"
  },
  {
    "text": "there's a lot of ways to skin the",
    "start": "1127799",
    "end": "1129520"
  },
  {
    "text": "catamorphism and this is another way to",
    "start": "1129520",
    "end": "1132840"
  },
  {
    "text": "do it so we've got this um two things to",
    "start": "1132840",
    "end": "1136280"
  },
  {
    "text": "notice here we're depending on map here",
    "start": "1136280",
    "end": "1138080"
  },
  {
    "text": "and we actually are depending on map",
    "start": "1138080",
    "end": "1139679"
  },
  {
    "text": "here we can't use the iterator protocol",
    "start": "1139679",
    "end": "1142000"
  },
  {
    "text": "um and it's going to recursively call",
    "start": "1142000",
    "end": "1143400"
  },
  {
    "text": "itself this is an entail position um",
    "start": "1143400",
    "end": "1145799"
  },
  {
    "text": "because I wanted it to be simple and",
    "start": "1145799",
    "end": "1147600"
  },
  {
    "text": "readable uh but you can totally do it so",
    "start": "1147600",
    "end": "1150240"
  },
  {
    "text": "this will map over everything and recall",
    "start": "1150240",
    "end": "1152840"
  },
  {
    "text": "itself over and over again until it hits",
    "start": "1152840",
    "end": "1154400"
  },
  {
    "text": "the fixed point of our funter what um so",
    "start": "1154400",
    "end": "1159240"
  },
  {
    "start": "1158000",
    "end": "1173000"
  },
  {
    "text": "the fixed point of a funter a funter is",
    "start": "1159240",
    "end": "1160919"
  },
  {
    "text": "anything with the map method and you",
    "start": "1160919",
    "end": "1163000"
  },
  {
    "text": "know behaves correctly you can look that",
    "start": "1163000",
    "end": "1165240"
  },
  {
    "text": "up uh and the fix point is the thing",
    "start": "1165240",
    "end": "1167320"
  },
  {
    "text": "that returns itself so it has has a map",
    "start": "1167320",
    "end": "1169120"
  },
  {
    "text": "method and and whatever returns itself",
    "start": "1169120",
    "end": "1171280"
  },
  {
    "text": "is called the fixed point so if we uh",
    "start": "1171280",
    "end": "1173159"
  },
  {
    "text": "you guys know the Y combinator this kind",
    "start": "1173159",
    "end": "1174600"
  },
  {
    "text": "of like the type level version of that",
    "start": "1174600",
    "end": "1176679"
  },
  {
    "text": "so map nil. map it's a funter and it",
    "start": "1176679",
    "end": "1179960"
  },
  {
    "text": "returns itself awesome that's the fix",
    "start": "1179960",
    "end": "1181640"
  },
  {
    "text": "point of the funter cons cons prototype",
    "start": "1181640",
    "end": "1184240"
  },
  {
    "text": "map uh that will actually pass F into",
    "start": "1184240",
    "end": "1187320"
  },
  {
    "text": "its children or it'll give its children",
    "start": "1187320",
    "end": "1188880"
  },
  {
    "text": "to F its tail so this is not the",
    "start": "1188880",
    "end": "1192080"
  },
  {
    "text": "intuition you might have normally when",
    "start": "1192080",
    "end": "1194000"
  },
  {
    "text": "you're looking at uh you know a map you",
    "start": "1194000",
    "end": "1197080"
  },
  {
    "text": "would think I have a list of link list",
    "start": "1197080",
    "end": "1199240"
  },
  {
    "text": "and I want to run a function on every",
    "start": "1199240",
    "end": "1200679"
  },
  {
    "text": "element that's that's what I think of",
    "start": "1200679",
    "end": "1202120"
  },
  {
    "text": "when I want a map I want to map over",
    "start": "1202120",
    "end": "1203600"
  },
  {
    "text": "every element but here I'm not calling",
    "start": "1203600",
    "end": "1206480"
  },
  {
    "text": "uh f with the element I'm calling f with",
    "start": "1206480",
    "end": "1208799"
  },
  {
    "text": "the tail it's the children that we're",
    "start": "1208799",
    "end": "1210960"
  },
  {
    "text": "after here it's like the child snatcher",
    "start": "1210960",
    "end": "1213360"
  },
  {
    "text": "um sorry chitty chitty bangbang fans um",
    "start": "1213360",
    "end": "1217159"
  },
  {
    "text": "so um just to be aware of if you're",
    "start": "1217159",
    "end": "1219440"
  },
  {
    "text": "going to do this you need to define a",
    "start": "1219440",
    "end": "1221320"
  },
  {
    "text": "different kind of map um so we look at",
    "start": "1221320",
    "end": "1223919"
  },
  {
    "text": "our sum function here up here it's",
    "start": "1223919",
    "end": "1225720"
  },
  {
    "text": "called an algebra I think yeah there's",
    "start": "1225720",
    "end": "1228280"
  },
  {
    "text": "an Al albra uh because it's going to",
    "start": "1228280",
    "end": "1230400"
  },
  {
    "text": "take our X which is our entire cons",
    "start": "1230400",
    "end": "1233080"
  },
  {
    "text": "linked list thing and it's going to",
    "start": "1233080",
    "end": "1235080"
  },
  {
    "text": "return us a value out uh so it takes it",
    "start": "1235080",
    "end": "1237120"
  },
  {
    "text": "out of its type um and then we've got",
    "start": "1237120",
    "end": "1240320"
  },
  {
    "text": "our list here and if we give sum our",
    "start": "1240320",
    "end": "1243240"
  },
  {
    "text": "algebra to Kata it will actually fold",
    "start": "1243240",
    "end": "1245960"
  },
  {
    "text": "our our structure down uh so that's a",
    "start": "1245960",
    "end": "1248360"
  },
  {
    "text": "wacky thing to do um let's look at how",
    "start": "1248360",
    "end": "1251200"
  },
  {
    "text": "this actually works though so the first",
    "start": "1251200",
    "end": "1253320"
  },
  {
    "text": "time x comes through it's nil so it's",
    "start": "1253320",
    "end": "1255240"
  },
  {
    "text": "starting bottom up and the next time",
    "start": "1255240",
    "end": "1257760"
  },
  {
    "text": "comes through you've got cons four onto",
    "start": "1257760",
    "end": "1259600"
  },
  {
    "text": "zero and that's uh if you're paying",
    "start": "1259600",
    "end": "1261559"
  },
  {
    "text": "attention that zero shouldn't be a zero",
    "start": "1261559",
    "end": "1263720"
  },
  {
    "text": "it should be the tail of the rest of the",
    "start": "1263720",
    "end": "1265280"
  },
  {
    "text": "list and every time it's coming through",
    "start": "1265280",
    "end": "1267559"
  },
  {
    "text": "it's actually already folded by that",
    "start": "1267559",
    "end": "1269799"
  },
  {
    "text": "point so I'm not actually working with",
    "start": "1269799",
    "end": "1271760"
  },
  {
    "text": "any recursion I'm just working with one",
    "start": "1271760",
    "end": "1273760"
  },
  {
    "text": "level and all its children have already",
    "start": "1273760",
    "end": "1275960"
  },
  {
    "text": "been folded by that point so I don't",
    "start": "1275960",
    "end": "1277400"
  },
  {
    "text": "have to worry about anything recursive I",
    "start": "1277400",
    "end": "1279600"
  },
  {
    "text": "just pass it to Kata and I say do it and",
    "start": "1279600",
    "end": "1282159"
  },
  {
    "text": "here I'm working with a list of uh four",
    "start": "1282159",
    "end": "1284880"
  },
  {
    "text": "and zero then four and three or three",
    "start": "1284880",
    "end": "1286640"
  },
  {
    "text": "and four and then two and seven it's",
    "start": "1286640",
    "end": "1288159"
  },
  {
    "text": "pretty cool so it's summing that uh",
    "start": "1288159",
    "end": "1290120"
  },
  {
    "text": "bottom",
    "start": "1290120",
    "end": "1291480"
  },
  {
    "start": "1291000",
    "end": "1299000"
  },
  {
    "text": "up so we can make map in terms of uh",
    "start": "1291480",
    "end": "1295000"
  },
  {
    "text": "this catamorphism it's pretty cool it's",
    "start": "1295000",
    "end": "1296640"
  },
  {
    "text": "like our F algebra version of map on our",
    "start": "1296640",
    "end": "1298520"
  },
  {
    "text": "link list um and we could do the same",
    "start": "1298520",
    "end": "1301080"
  },
  {
    "start": "1299000",
    "end": "1307000"
  },
  {
    "text": "stuff with trees here I'm at um you know",
    "start": "1301080",
    "end": "1303559"
  },
  {
    "text": "empty is a fix point and we're passing",
    "start": "1303559",
    "end": "1305400"
  },
  {
    "text": "our children into F and uh we can sum",
    "start": "1305400",
    "end": "1308520"
  },
  {
    "start": "1307000",
    "end": "1333000"
  },
  {
    "text": "this down and and look what's happening",
    "start": "1308520",
    "end": "1310440"
  },
  {
    "text": "here um this I don't want you to cringe",
    "start": "1310440",
    "end": "1313279"
  },
  {
    "text": "at the the case statement but it's the",
    "start": "1313279",
    "end": "1315520"
  },
  {
    "text": "best I can do for pattern matching here",
    "start": "1315520",
    "end": "1317640"
  },
  {
    "text": "um but the idea is that uh we've kind of",
    "start": "1317640",
    "end": "1319840"
  },
  {
    "text": "pushed our data specific stuff to this",
    "start": "1319840",
    "end": "1322799"
  },
  {
    "text": "inline algebra here we're passing to",
    "start": "1322799",
    "end": "1324679"
  },
  {
    "text": "cata so this is the part that needs to",
    "start": "1324679",
    "end": "1327200"
  },
  {
    "text": "know about our tree and the catamorphism",
    "start": "1327200",
    "end": "1329760"
  },
  {
    "text": "takes care of all the recursion for us",
    "start": "1329760",
    "end": "1331520"
  },
  {
    "text": "it just calls itself and map um so let's",
    "start": "1331520",
    "end": "1334559"
  },
  {
    "start": "1333000",
    "end": "1342000"
  },
  {
    "text": "talk about an anamorphism in this way uh",
    "start": "1334559",
    "end": "1337159"
  },
  {
    "text": "so we've got our again we're depending",
    "start": "1337159",
    "end": "1339120"
  },
  {
    "text": "on map and we're recursively calling",
    "start": "1339120",
    "end": "1341480"
  },
  {
    "text": "oursel and this is called a coalgebra",
    "start": "1341480",
    "end": "1344520"
  },
  {
    "start": "1342000",
    "end": "1367000"
  },
  {
    "text": "this array to list which is a co- scary",
    "start": "1344520",
    "end": "1347200"
  },
  {
    "text": "word um",
    "start": "1347200",
    "end": "1349039"
  },
  {
    "text": "anyway so this uh array to list is",
    "start": "1349039",
    "end": "1353200"
  },
  {
    "text": "basically uh going to take a value",
    "start": "1353200",
    "end": "1355720"
  },
  {
    "text": "that's not in a length list and then put",
    "start": "1355720",
    "end": "1357520"
  },
  {
    "text": "it in one that's why we call it a",
    "start": "1357520",
    "end": "1358880"
  },
  {
    "text": "coalgebra it takes our a to our F of a",
    "start": "1358880",
    "end": "1361640"
  },
  {
    "text": "um and we've passed that coalgebra to",
    "start": "1361640",
    "end": "1363760"
  },
  {
    "text": "our anamorphism and it'll make us a link",
    "start": "1363760",
    "end": "1366360"
  },
  {
    "text": "list which is pretty cool uh we've got",
    "start": "1366360",
    "end": "1369240"
  },
  {
    "start": "1367000",
    "end": "1389000"
  },
  {
    "text": "this make alphabet uh that just like we",
    "start": "1369240",
    "end": "1371720"
  },
  {
    "text": "saw before we can do this kind of unfold",
    "start": "1371720",
    "end": "1374320"
  },
  {
    "text": "um but this is uh basically working with",
    "start": "1374320",
    "end": "1377000"
  },
  {
    "text": "our link list type and we're passing in",
    "start": "1377000",
    "end": "1378919"
  },
  {
    "text": "algebras to this recursive thing that",
    "start": "1378919",
    "end": "1381600"
  },
  {
    "text": "just takes care of it for us we don't",
    "start": "1381600",
    "end": "1382919"
  },
  {
    "text": "have to worry about any uh recursion or",
    "start": "1382919",
    "end": "1385480"
  },
  {
    "text": "Co recursion in this case uh we can do",
    "start": "1385480",
    "end": "1387520"
  },
  {
    "text": "the same thing with range cool uh so",
    "start": "1387520",
    "end": "1390400"
  },
  {
    "start": "1389000",
    "end": "1408000"
  },
  {
    "text": "there's F algebras we've got our",
    "start": "1390400",
    "end": "1392360"
  },
  {
    "text": "iteration and our transformation our",
    "start": "1392360",
    "end": "1394240"
  },
  {
    "text": "accumulation we kind of drop the ball on",
    "start": "1394240",
    "end": "1396000"
  },
  {
    "text": "the iteration because we have to Define",
    "start": "1396000",
    "end": "1397480"
  },
  {
    "text": "our own map that doesn't work like an",
    "start": "1397480",
    "end": "1399240"
  },
  {
    "text": "iterator it's passing all the children",
    "start": "1399240",
    "end": "1400960"
  },
  {
    "text": "in at once but uh the other things are",
    "start": "1400960",
    "end": "1403120"
  },
  {
    "text": "cool transformation we're just doing",
    "start": "1403120",
    "end": "1405480"
  },
  {
    "text": "whatever there so we can do that and",
    "start": "1405480",
    "end": "1406960"
  },
  {
    "text": "accumulation works great uh but this is",
    "start": "1406960",
    "end": "1409400"
  },
  {
    "start": "1408000",
    "end": "1417000"
  },
  {
    "text": "where it gets interesting so it's kind",
    "start": "1409400",
    "end": "1411000"
  },
  {
    "text": "of like building up to this part and the",
    "start": "1411000",
    "end": "1412600"
  },
  {
    "text": "whole talk so if you're going to pay",
    "start": "1412600",
    "end": "1414279"
  },
  {
    "text": "attention to anything pay attention to",
    "start": "1414279",
    "end": "1415480"
  },
  {
    "text": "this uh so um programs are uh actual",
    "start": "1415480",
    "end": "1420240"
  },
  {
    "start": "1417000",
    "end": "1449000"
  },
  {
    "text": "data structures that can be folded down",
    "start": "1420240",
    "end": "1421679"
  },
  {
    "text": "into a value it's called interpreting",
    "start": "1421679",
    "end": "1423279"
  },
  {
    "text": "the program um so you can build up a",
    "start": "1423279",
    "end": "1425240"
  },
  {
    "text": "structure of instructions and then you",
    "start": "1425240",
    "end": "1426919"
  },
  {
    "text": "can interpret that um by via",
    "start": "1426919",
    "end": "1429760"
  },
  {
    "text": "catamorphism so sorry yeah you're",
    "start": "1429760",
    "end": "1434679"
  },
  {
    "text": "welcome um so here we've got a add two",
    "start": "1434679",
    "end": "1439039"
  },
  {
    "text": "and three together we'll get a five and",
    "start": "1439039",
    "end": "1440440"
  },
  {
    "text": "then we'll multiply that by a four so we",
    "start": "1440440",
    "end": "1442039"
  },
  {
    "text": "have to wrap these things at the type",
    "start": "1442039",
    "end": "1443679"
  },
  {
    "text": "level these are unevaluated pure data",
    "start": "1443679",
    "end": "1446520"
  },
  {
    "text": "structures representing our program that",
    "start": "1446520",
    "end": "1448200"
  },
  {
    "text": "we're going to fold down um and we could",
    "start": "1448200",
    "end": "1450559"
  },
  {
    "start": "1449000",
    "end": "1458000"
  },
  {
    "text": "do this uh you know this object",
    "start": "1450559",
    "end": "1452440"
  },
  {
    "text": "definition same as always and we're",
    "start": "1452440",
    "end": "1454159"
  },
  {
    "text": "going to pass the map you know the",
    "start": "1454159",
    "end": "1455640"
  },
  {
    "text": "children in the map um and uh this is",
    "start": "1455640",
    "end": "1458880"
  },
  {
    "start": "1458000",
    "end": "1502000"
  },
  {
    "text": "where it gets interesting we have our",
    "start": "1458880",
    "end": "1460320"
  },
  {
    "text": "interpreter that takes our structure and",
    "start": "1460320",
    "end": "1463720"
  },
  {
    "text": "just runs these functions if you hit",
    "start": "1463720",
    "end": "1465200"
  },
  {
    "text": "multiply multiply them if you hit add",
    "start": "1465200",
    "end": "1466840"
  },
  {
    "text": "add them otherwise just get the out of a",
    "start": "1466840",
    "end": "1468840"
  },
  {
    "text": "constant and our program gets",
    "start": "1468840",
    "end": "1471039"
  },
  {
    "text": "interpreted and we do indeed get 20 out",
    "start": "1471039",
    "end": "1474240"
  },
  {
    "text": "uh I have the uh gist if you don't",
    "start": "1474240",
    "end": "1476480"
  },
  {
    "text": "believe me um so you can download and",
    "start": "1476480",
    "end": "1479039"
  },
  {
    "text": "play with that but uh this is really",
    "start": "1479039",
    "end": "1481159"
  },
  {
    "text": "this is really cool this means we can",
    "start": "1481159",
    "end": "1483039"
  },
  {
    "text": "make programs that are entirely pure and",
    "start": "1483039",
    "end": "1485720"
  },
  {
    "text": "they're just instruction sets that we",
    "start": "1485720",
    "end": "1487520"
  },
  {
    "text": "can kind of build up dynamically and",
    "start": "1487520",
    "end": "1489880"
  },
  {
    "text": "pass around and compose and combine and",
    "start": "1489880",
    "end": "1492200"
  },
  {
    "text": "we can write interpreters one for maybe",
    "start": "1492200",
    "end": "1494279"
  },
  {
    "text": "a test and one for you know when we're",
    "start": "1494279",
    "end": "1496960"
  },
  {
    "text": "in the browser one on the server really",
    "start": "1496960",
    "end": "1498720"
  },
  {
    "text": "interesting stuff here and we could send",
    "start": "1498720",
    "end": "1500480"
  },
  {
    "text": "them over the wire and whatever um so we",
    "start": "1500480",
    "end": "1503240"
  },
  {
    "start": "1502000",
    "end": "1509000"
  },
  {
    "text": "can do this again with like concat and",
    "start": "1503240",
    "end": "1505000"
  },
  {
    "text": "replace and input uh just to illustrate",
    "start": "1505000",
    "end": "1507640"
  },
  {
    "text": "pass our children in and uh this",
    "start": "1507640",
    "end": "1510360"
  },
  {
    "start": "1509000",
    "end": "1521000"
  },
  {
    "text": "interpreter will turn hello world into",
    "start": "1510360",
    "end": "1512440"
  },
  {
    "text": "Mellow World uh which is pretty cool um",
    "start": "1512440",
    "end": "1515919"
  },
  {
    "text": "and so it runs right to left and it'll",
    "start": "1515919",
    "end": "1517520"
  },
  {
    "text": "fold down that data structure um but we",
    "start": "1517520",
    "end": "1519880"
  },
  {
    "text": "can also do this one it's a different",
    "start": "1519880",
    "end": "1521840"
  },
  {
    "text": "interpreter that actually describes",
    "start": "1521840",
    "end": "1523679"
  },
  {
    "text": "what's happening it's saying con cading",
    "start": "1523679",
    "end": "1525120"
  },
  {
    "text": "the world after replacing H with M on",
    "start": "1525120",
    "end": "1527399"
  },
  {
    "text": "hello so basically these things these",
    "start": "1527399",
    "end": "1529480"
  },
  {
    "text": "interpreters are when things actually",
    "start": "1529480",
    "end": "1531200"
  },
  {
    "text": "happen and everything else is pure think",
    "start": "1531200",
    "end": "1533039"
  },
  {
    "text": "about that if you're doing H you know",
    "start": "1533039",
    "end": "1534520"
  },
  {
    "text": "API calls or writing files or deleting",
    "start": "1534520",
    "end": "1537520"
  },
  {
    "text": "things and all that's really hard to",
    "start": "1537520",
    "end": "1539320"
  },
  {
    "text": "work with and test and and you can",
    "start": "1539320",
    "end": "1541159"
  },
  {
    "text": "actually just generate your instruction",
    "start": "1541159",
    "end": "1543080"
  },
  {
    "text": "set and pass that around and work with",
    "start": "1543080",
    "end": "1545000"
  },
  {
    "text": "your little algebra that'll interpret it",
    "start": "1545000",
    "end": "1546799"
  },
  {
    "text": "down um and if you've heard about free",
    "start": "1546799",
    "end": "1549039"
  },
  {
    "text": "monads this is like half of it and the",
    "start": "1549039",
    "end": "1552399"
  },
  {
    "text": "other half is the pure but um you can do",
    "start": "1552399",
    "end": "1554799"
  },
  {
    "text": "code routines and stuff with it so uh",
    "start": "1554799",
    "end": "1556760"
  },
  {
    "text": "this is like almost a free it's a very",
    "start": "1556760",
    "end": "1559279"
  },
  {
    "text": "very important design uh strategy and",
    "start": "1559279",
    "end": "1561640"
  },
  {
    "text": "architecture pattern in functional",
    "start": "1561640",
    "end": "1563080"
  },
  {
    "text": "programming because it basically makes",
    "start": "1563080",
    "end": "1565399"
  },
  {
    "text": "everything in your application pure and",
    "start": "1565399",
    "end": "1567360"
  },
  {
    "text": "you don't have to worry about you know",
    "start": "1567360",
    "end": "1569120"
  },
  {
    "text": "side effects at all and then you can",
    "start": "1569120",
    "end": "1570640"
  },
  {
    "text": "interpret it down um and you can make",
    "start": "1570640",
    "end": "1572679"
  },
  {
    "text": "little subalgebras throughout your",
    "start": "1572679",
    "end": "1574120"
  },
  {
    "text": "application which is really neat um so",
    "start": "1574120",
    "end": "1577000"
  },
  {
    "start": "1576000",
    "end": "1598000"
  },
  {
    "text": "that was my f algebras um and my monoids",
    "start": "1577000",
    "end": "1580640"
  },
  {
    "text": "and all that stuff uh so next time",
    "start": "1580640",
    "end": "1583200"
  },
  {
    "text": "you're sitting down to write a loop and",
    "start": "1583200",
    "end": "1585960"
  },
  {
    "text": "you know you're you're like should I",
    "start": "1585960",
    "end": "1587440"
  },
  {
    "text": "should I write another for Loop you know",
    "start": "1587440",
    "end": "1589440"
  },
  {
    "text": "stop and think like how long is are",
    "start": "1589440",
    "end": "1591159"
  },
  {
    "text": "these for Loops going to be around you",
    "start": "1591159",
    "end": "1593799"
  },
  {
    "text": "know they don't really have uh the",
    "start": "1593799",
    "end": "1595520"
  },
  {
    "text": "composability and they're not being",
    "start": "1595520",
    "end": "1596880"
  },
  {
    "text": "captured and this and that so there's my",
    "start": "1596880",
    "end": "1599559"
  },
  {
    "start": "1598000",
    "end": "1630000"
  },
  {
    "text": "talk um",
    "start": "1599559",
    "end": "1602559"
  },
  {
    "text": "thanks um I started a minute earlier so",
    "start": "1605880",
    "end": "1609720"
  },
  {
    "text": "so I I guess I have a minute or two for",
    "start": "1609720",
    "end": "1611559"
  },
  {
    "text": "questions if anybody wants to ask a",
    "start": "1611559",
    "end": "1613240"
  },
  {
    "text": "question I won't make you feel stupid I",
    "start": "1613240",
    "end": "1615600"
  },
  {
    "text": "promise",
    "start": "1615600",
    "end": "1618600"
  },
  {
    "text": "okay oh what's",
    "start": "1619360",
    "end": "1621799"
  },
  {
    "text": "up",
    "start": "1621799",
    "end": "1624799"
  },
  {
    "start": "1630000",
    "end": "1652000"
  },
  {
    "text": "yeah that's right um that's kind of the",
    "start": "1630000",
    "end": "1633360"
  },
  {
    "text": "idea of an algebra you take your F of a",
    "start": "1633360",
    "end": "1635520"
  },
  {
    "text": "to an A so you yeah it's like a fold you",
    "start": "1635520",
    "end": "1638919"
  },
  {
    "text": "just write down out of the data",
    "start": "1638919",
    "end": "1640440"
  },
  {
    "text": "structure and that's if you look at",
    "start": "1640440",
    "end": "1641679"
  },
  {
    "text": "reduce same signature pretty cool stuff",
    "start": "1641679",
    "end": "1643799"
  },
  {
    "text": "but that goes to A to B and I think",
    "start": "1643799",
    "end": "1645399"
  },
  {
    "text": "algebras take a to a so that's something",
    "start": "1645399",
    "end": "1648200"
  },
  {
    "text": "anything else anyway uh anybody",
    "start": "1648200",
    "end": "1651159"
  },
  {
    "text": "else um you can go to this GitHub uh",
    "start": "1651159",
    "end": "1653799"
  },
  {
    "start": "1652000",
    "end": "1682000"
  },
  {
    "text": "repo and play with this stuff oh there's",
    "start": "1653799",
    "end": "1656000"
  },
  {
    "text": "also bif funter and stuff in there that",
    "start": "1656000",
    "end": "1658480"
  },
  {
    "text": "I didn't really get to talk about uh",
    "start": "1658480",
    "end": "1660200"
  },
  {
    "text": "because when I practiced it at home I",
    "start": "1660200",
    "end": "1661720"
  },
  {
    "text": "kept going 10 minutes over um so I just",
    "start": "1661720",
    "end": "1663960"
  },
  {
    "text": "cut it all out uh but there's stuff",
    "start": "1663960",
    "end": "1666159"
  },
  {
    "text": "called like bif funs and they've got",
    "start": "1666159",
    "end": "1668159"
  },
  {
    "text": "things there's bu map anyway uh I'm not",
    "start": "1668159",
    "end": "1670559"
  },
  {
    "text": "going to waste your time all right thank",
    "start": "1670559",
    "end": "1672000"
  },
  {
    "text": "you guys",
    "start": "1672000",
    "end": "1673780"
  },
  {
    "text": "[Applause]",
    "start": "1673780",
    "end": "1681970"
  }
]