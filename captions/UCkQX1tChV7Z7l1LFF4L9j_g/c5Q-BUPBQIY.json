[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "all right great well let's get started all right so can everyone hear",
    "start": "1800",
    "end": "6960"
  },
  {
    "text": "me this all right yeah great Perfect all right well my name is Eric oim and my",
    "start": "6960",
    "end": "12799"
  },
  {
    "text": "talk today is about intervals uh and interval arithmetic so the title of my talk is that intervals are unifying",
    "start": "12799",
    "end": "18880"
  },
  {
    "text": "uncertainty ranges and Loops um there's a bit more to it than that but that's sort of the I guess the big idea um so",
    "start": "18880",
    "end": "25279"
  },
  {
    "text": "first I should just briefly introduce myself uh I'm a member of type level I'm one of the maintainers of spire along",
    "start": "25279",
    "end": "31720"
  },
  {
    "text": "with Tom Switzer who's also here uh and I like to say this as that I have a sort",
    "start": "31720",
    "end": "37680"
  },
  {
    "text": "of a dual interest in expressiveness and performance um this I would say this talk is almost more about expressiveness",
    "start": "37680",
    "end": "42879"
  },
  {
    "text": "but I I try and keep both in mind I feel like that's a that's both are important um and I do a lot of data science and",
    "start": "42879",
    "end": "49600"
  },
  {
    "text": "sort of data janitorial work at meetups so uh that we're using some of this stuff there um I don't know if we're",
    "start": "49600",
    "end": "56359"
  },
  {
    "text": "using interval specifically but but we use spire and if you want to look at some code that I've written you can check out my GitHub page",
    "start": "56359",
    "end": "63680"
  },
  {
    "text": "here great so just to get started I try and make sure all my slides are runable scolar code at least the ones that are",
    "start": "63680",
    "end": "69640"
  },
  {
    "text": "scolar code so you should just assume that these three Imports are happening um this basically brings all the types",
    "start": "69640",
    "end": "75360"
  },
  {
    "text": "all the type classes all the implicit operators just like the works um and it's it's really handy for playing",
    "start": "75360",
    "end": "82000"
  },
  {
    "text": "around and just seeing all the different stuff you can do and uh you can find the code for spire and the Spire repo so",
    "start": "82000",
    "end": "88640"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "what will this talk cover well so first I want to give a basic description of the interval type and",
    "start": "88640",
    "end": "93759"
  },
  {
    "text": "kind of more just like what intervals are not just in Scala but like in the world you know and then talk about",
    "start": "93759",
    "end": "99399"
  },
  {
    "text": "interval arithmetic uncertainty error propagation a little bit um and then",
    "start": "99399",
    "end": "105000"
  },
  {
    "text": "kind of talk about set operations on intervals thinking about them as sets and and iteration more generally um",
    "start": "105000",
    "end": "110360"
  },
  {
    "text": "there'll be like a little demo I actually left my real demo on my other my other pants or other computer so to",
    "start": "110360",
    "end": "116560"
  },
  {
    "text": "speak so I have like a sort of smaller demo than I was planning but it'll still be cool and then a conclusion uh intervals and so some of",
    "start": "116560",
    "end": "124680"
  },
  {
    "text": "you who like an engineer has studied intervals or interval arithmetic like for real so like a few people so the",
    "start": "124680",
    "end": "130440"
  },
  {
    "text": "early part of this talk might be less interesting to you all but hopefully the implementation will be interesting um the rest of you uh are going to",
    "start": "130440",
    "end": "137200"
  },
  {
    "text": "hopefully learn what this stuff is early on so um the definition we're going to",
    "start": "137200",
    "end": "143640"
  },
  {
    "text": "kind of go with for now is the intervals represent a range of real numbers um so you might say all numbers between three",
    "start": "143640",
    "end": "148840"
  },
  {
    "start": "144000",
    "end": "144000"
  },
  {
    "text": "and six and so already this Probably sounds prettyy familiar um because Scala actually kind of has a DSL to express",
    "start": "148840",
    "end": "155000"
  },
  {
    "text": "this idea in some sense which is uh Scala range so we've got two different ranges here on the board you can see one",
    "start": "155000",
    "end": "161599"
  },
  {
    "text": "of them is inclusive using two and one of them is exclusive using until until so those sort of seem like they fit the",
    "start": "161599",
    "end": "166840"
  },
  {
    "text": "bill you know all the numbers between three and six um and like I said there's two modes",
    "start": "166840",
    "end": "172120"
  },
  {
    "start": "169000",
    "end": "169000"
  },
  {
    "text": "um both cases include three there's really not a good way to like exclude three from your scolar range which",
    "start": "172120",
    "end": "177800"
  },
  {
    "text": "there's sort of an asymmetry there that's maybe a little bit dis pleasing um I guess the real question is do you think that all the numbers between three",
    "start": "177800",
    "end": "183519"
  },
  {
    "text": "and six should include three and six or not like what do you think intuition wise uh who says it should include it",
    "start": "183519",
    "end": "190159"
  },
  {
    "text": "okay so we got dick maybe saying no okay well let let's not do a poll it's",
    "start": "190159",
    "end": "197040"
  },
  {
    "text": "fine um uh so anyway I'm sort of going to argue that",
    "start": "197040",
    "end": "203920"
  },
  {
    "text": "actually range is not really the right abstraction there's a lot of reasons but maybe just the fact that the first is always inclusive is like a a clue that",
    "start": "203920",
    "end": "210080"
  },
  {
    "text": "it's not really going to work um and just to take a step back I mean there's in in in math class or various places",
    "start": "210080",
    "end": "216360"
  },
  {
    "start": "211000",
    "end": "211000"
  },
  {
    "text": "you might use intervals there's a sort of established notation which I'm going to use throughout the talk um the thing that's a little bit weird about it is",
    "start": "216360",
    "end": "222760"
  },
  {
    "text": "that it sort of conflicts with notation in Scala so like that 3 comma 6 isn't a",
    "start": "222760",
    "end": "227799"
  },
  {
    "text": "tupal I want in the context of our intervals I want you to think about that as sort of an interval between three and",
    "start": "227799",
    "end": "234720"
  },
  {
    "text": "six but excluding the end points it's exclusive so it doesn't have three it doesn't have six but it has everything in between um I'm going to try and be",
    "start": "234720",
    "end": "241239"
  },
  {
    "text": "clear on which stuff is scholar syntax and which stuff is uh math notation but I do think that this notation is really",
    "start": "241239",
    "end": "247159"
  },
  {
    "text": "helpful to talk about this stuff it's way less less combersome so square brackets are inclusive so the scol range",
    "start": "247159",
    "end": "253519"
  },
  {
    "text": "with two is pretty much what you get and we can combine these so you can have one side be closed and one side be open one",
    "start": "253519",
    "end": "259919"
  },
  {
    "text": "side be uh inclusive and one side be exclusive and there's also some special cases that are intervals that I just",
    "start": "259919",
    "end": "266680"
  },
  {
    "start": "263000",
    "end": "263000"
  },
  {
    "text": "want to introduce the notation so you can kind of understand them so we got the empty interval doesn't contain anything empty and then single values we",
    "start": "266680",
    "end": "274240"
  },
  {
    "text": "can kind of treat them as like degenerate intervals there's you know it's an interval that only has one thing in it basically and then there's these",
    "start": "274240",
    "end": "280240"
  },
  {
    "text": "other interesting intervals that have the infinity symbol and infinity is not a number right we all know that but we",
    "start": "280240",
    "end": "285360"
  },
  {
    "text": "can sort of think of it as like a limit or a bound so when we use Infinity we're basically saying that there is no bound",
    "start": "285360",
    "end": "290520"
  },
  {
    "text": "on this side uh you know it goes from three on up towards infinity or from zero down towards infinity or it's just",
    "start": "290520",
    "end": "297039"
  },
  {
    "text": "everything and those are called unbounded intervals so anyway going back to range there's",
    "start": "297039",
    "end": "304199"
  },
  {
    "text": "like a weird sort of thing and this is kind of an intuition that I want to get at which is that someone already alluded",
    "start": "304199",
    "end": "309840"
  },
  {
    "text": "to the fact that scholet collections have a contains that's sort of bogus right we could I think most of us can agree that scholet contains is sometimes",
    "start": "309840",
    "end": "316000"
  },
  {
    "text": "bogus and you can see here that it returns false for 4.5 and that's definitely not what we would want I mean",
    "start": "316000",
    "end": "321160"
  },
  {
    "text": "like we might want it to be a type error but if it type checks we definitely want this to be true I mean for the",
    "start": "321160",
    "end": "326680"
  },
  {
    "text": "definition of interval I'm not saying range is wrong to have this Behavior just that range is an unsuitable interval for this reason uh the interval",
    "start": "326680",
    "end": "334600"
  },
  {
    "text": "from 3 to six should contain 4.5 uh and you know one of the reasons",
    "start": "334600",
    "end": "341240"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "for that is range was written just to support in I mean it's very limited I'm sort of picking on Range like I feel a little bit bad about this you know it's",
    "start": "341240",
    "end": "346720"
  },
  {
    "text": "like sort of kicking someone while they're down a little bit range is fine it's just not very general like it only",
    "start": "346720",
    "end": "351759"
  },
  {
    "text": "does one thing and and it doesn't do the thing that I'm talking about here and and let's skip numeric range for a minute pretend like that doesn't exist",
    "start": "351759",
    "end": "358880"
  },
  {
    "text": "um so the goal for our implementation in Spire is to support any numeric type you",
    "start": "358880",
    "end": "364199"
  },
  {
    "text": "want not just we're not going to settle on one and then force you to live with the consequences we want it to work for everything uh so it could work for INT",
    "start": "364199",
    "end": "370919"
  },
  {
    "text": "or double or anything that it basically is a number um there's sort of another",
    "start": "370919",
    "end": "375960"
  },
  {
    "text": "problem another reason why range isn't very good and that's actually that uh like I said range range uh intervals",
    "start": "375960",
    "end": "383199"
  },
  {
    "text": "have to be all the real numbers between two bounds um I don't really want to get into too much what uncountable means but",
    "start": "383199",
    "end": "389759"
  },
  {
    "text": "it basically it means not only is there an infinite number of them but like you could never possibly hit all of them",
    "start": "389759",
    "end": "395560"
  },
  {
    "text": "using like an algorithm that we would write so basically what I'm saying is you shouldn't have a size method or a",
    "start": "395560",
    "end": "401840"
  },
  {
    "text": "length method that just doesn't make any sense for an interval um like couldn't possibly do anything and so since all",
    "start": "401840",
    "end": "407400"
  },
  {
    "text": "scholar collections pretty much have to have this stuff and kind of assume that you can like iterate through and hit all the values and sort of assume that you",
    "start": "407400",
    "end": "413319"
  },
  {
    "text": "can call length on it like we just shouldn't we just shouldn't think of this as a collection I mean maybe intuitively it seems like a collection",
    "start": "413319",
    "end": "419639"
  },
  {
    "text": "but I'm just arguing that that's the wrong intuition so yeah design goals should be",
    "start": "419639",
    "end": "425120"
  },
  {
    "start": "423000",
    "end": "423000"
  },
  {
    "text": "defined in terms of these end points not a container uh should support the unbounded intervals that's just because I think they're cool and we should",
    "start": "425120",
    "end": "431080"
  },
  {
    "text": "support them and I want it to be generic I want to parameterize the number type um I think maybe some of you have heard",
    "start": "431080",
    "end": "437479"
  },
  {
    "text": "this idea of intentional definitions versus extensional in terms of like sets or something and so what we're talking",
    "start": "437479",
    "end": "442759"
  },
  {
    "text": "about here is an intentional definition we want to describe an interval in terms of like the constraints that values must",
    "start": "442759",
    "end": "448479"
  },
  {
    "text": "fulfill to be in the interval we don't really want to like list all the values out on a piece of paper because we do",
    "start": "448479",
    "end": "453520"
  },
  {
    "text": "that forever um everyone kind of with me so far is this all making sense yeah mostly",
    "start": "453520",
    "end": "460199"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "okay uh you should feel free to please like if you get confused or you think even if you're not confused if you think I'm saying something confusing please",
    "start": "460199",
    "end": "466039"
  },
  {
    "text": "feel free to stop me or or ask a question um but anyway moving on let's",
    "start": "466039",
    "end": "471400"
  },
  {
    "text": "say that we're representing this open interval XY as an interval of type A so what is the thing that we really know",
    "start": "471400",
    "end": "477360"
  },
  {
    "text": "well according to the way intervals get talked about we know that X is less than y um if they were equal we wouldn't use",
    "start": "477360",
    "end": "484159"
  },
  {
    "text": "this notation we' use that point notation that I that I showed you so we can sort of assume that this is like an",
    "start": "484159",
    "end": "489240"
  },
  {
    "text": "invariant that all intervals have to obey um you know with the understanding like Infinity is not really a value but",
    "start": "489240",
    "end": "495120"
  },
  {
    "text": "maybe it sort of you know negative Infinity in some sense is less than all other values so that kind of fits um so",
    "start": "495120",
    "end": "501440"
  },
  {
    "text": "but we definitely need to be able to compare these a values to know you know if our interval is valid or how you know",
    "start": "501440",
    "end": "506599"
  },
  {
    "text": "which numbers are bigger or less than our end points and so in insire we would use an order to do this um you know in",
    "start": "506599",
    "end": "512240"
  },
  {
    "text": "Scala you might use ordering uh Scala Zed I think has like I forget what they call it if they call it ordering or",
    "start": "512240",
    "end": "517880"
  },
  {
    "text": "order you know something like that it's the same idea we just need to be able to take any two a values and know if",
    "start": "517880",
    "end": "523320"
  },
  {
    "text": "they're equal or if one's less than the other great so that's pretty much we're",
    "start": "523320",
    "end": "529560"
  },
  {
    "text": "going to go straight into interval arithmetic because this is what makes intervals cool I mean intervals right now they may be seem like a glorified",
    "start": "529560",
    "end": "535560"
  },
  {
    "text": "predicate or a glorified type of set or something but actually they're pretty they're pretty awesome so why bother",
    "start": "535560",
    "end": "542360"
  },
  {
    "start": "541000",
    "end": "541000"
  },
  {
    "text": "creating intervals at all and so a big reason like I think you know the reason that this stuff got started maybe in the 50s or 60s was for uncertainty about",
    "start": "542360",
    "end": "549279"
  },
  {
    "text": "values in engineering so you would say you know we have something that's like three but there's a to an error tolerance like plus or minus you know",
    "start": "549279",
    "end": "555760"
  },
  {
    "text": "some error threshold like our machine is supposed to cut things you know 2 meters but you know there's a little bit of",
    "start": "555760",
    "end": "561240"
  },
  {
    "text": "Wiggle so maybe there we have to take into account the fact that it might be off by a few millimeters or something",
    "start": "561240",
    "end": "566399"
  },
  {
    "text": "and so that's kind of where you get this idea of error tolerances and those can be thought those intervals um you can also use it to work with a set of values",
    "start": "566399",
    "end": "572920"
  },
  {
    "text": "efficiently that's that's another thing and there's sort of other stuff which is that sometimes you have a problem that's",
    "start": "572920",
    "end": "580000"
  },
  {
    "text": "very hard to answer exactly but you can kind of put you you know you have like upper bounds and lower bounds where you",
    "start": "580000",
    "end": "585920"
  },
  {
    "text": "know stuff is and so sometimes if you just do the math with these intervals you find you don't need to know exactly you can say oh well we can skip the hard",
    "start": "585920",
    "end": "591880"
  },
  {
    "text": "work of determining exactly what's going on by just using an interval and seeing if the whole interval happens to be you know like above or below some value or",
    "start": "591880",
    "end": "598320"
  },
  {
    "text": "something like that or or can prove that two things couldn't possibly be equal then we don't really have to do the hard work finally this is something I'm not",
    "start": "598320",
    "end": "605160"
  },
  {
    "text": "really going to get into but there's a bunch of stuff out there about how certain kinds of distributed calculation really take advantage of intervals where",
    "start": "605160",
    "end": "612839"
  },
  {
    "text": "due to the fact that you know stuff's being evaluated in different orders it can be hard to unify the values you get",
    "start": "612839",
    "end": "617959"
  },
  {
    "text": "at the end so if you don't have intervals you kind of have to start over if you if you hit these conflicts but with interval arithmetic there's a way",
    "start": "617959",
    "end": "623040"
  },
  {
    "text": "to kind of incorporate all the different inputs from different workers to create you know an interval output that ends up",
    "start": "623040",
    "end": "629440"
  },
  {
    "text": "up being really efficient apparently that's that's something if you're interested in you could investigate more",
    "start": "629440",
    "end": "634480"
  },
  {
    "text": "so how do we use intervals to do arithmetic um the basic the mathematical",
    "start": "634480",
    "end": "639519"
  },
  {
    "start": "635000",
    "end": "635000"
  },
  {
    "text": "intuition here even though intervals have an infinite number of stuff in them you know this is math so we can deal",
    "start": "639519",
    "end": "645000"
  },
  {
    "text": "with infinity so we basically the idea is you would just do the operations for all the individual elements and then",
    "start": "645000",
    "end": "650240"
  },
  {
    "text": "basically build the interval that contains all the results so for this example here I've got the interval one",
    "start": "650240",
    "end": "656079"
  },
  {
    "text": "you know 1 to two with containing both one and two and I'm going to add one to it what that really means is that if you",
    "start": "656079",
    "end": "661279"
  },
  {
    "text": "imagine kind of like all the values in that are going to have one add and what sort of shifts the interval down so from one two it goes to to 2 three basically",
    "start": "661279",
    "end": "669440"
  },
  {
    "text": "um does that sort of make sense to people uh you can I've got like a nice little aski art diagram here that kind",
    "start": "669440",
    "end": "675720"
  },
  {
    "text": "of shows you like there's a number line up there and you can kind of see that we've got an interval from 1 to two and a point we add the point and then kind",
    "start": "675720",
    "end": "683040"
  },
  {
    "text": "of shifts the interval over is that hopefully it's not super confusing but",
    "start": "683040",
    "end": "688680"
  },
  {
    "text": "um right so I think this is a really if you're if you find yourself being confused about why interval arithmetic",
    "start": "688680",
    "end": "693720"
  },
  {
    "text": "is producing a result I think thinking about this in terms of these number lines is really helpful where you can sort of say oh well what value could I",
    "start": "693720",
    "end": "699920"
  },
  {
    "text": "take from the first and take from the second to get some value in the output interval because that's really all the output is is just all the possible",
    "start": "699920",
    "end": "706480"
  },
  {
    "text": "things you could get given the inputs and so as you can see here we don't just have to add constants we can actually",
    "start": "706480",
    "end": "711920"
  },
  {
    "text": "add two intervals the same way so here's you know from 1 to two from 1 to three you add them the smallest value you",
    "start": "711920",
    "end": "717760"
  },
  {
    "text": "could get is you take one from both you'd get two the largest you could get is if you took two and three you'd get",
    "start": "717760",
    "end": "723200"
  },
  {
    "text": "five and then just you know using some common sense you can kind of see that everything else is in between but that's",
    "start": "723200",
    "end": "728839"
  },
  {
    "text": "that's the way that's the way you do it and so even though we have an infinite set of values we don't really do an infinite amount of work we know that",
    "start": "728839",
    "end": "733920"
  },
  {
    "text": "because of the structure of the interval we know that if we just handle these end points uh in this case that's all we",
    "start": "733920",
    "end": "739519"
  },
  {
    "text": "really need to do we you know add the lower end points add the uppers and you're done um some of the other operations actually are a little bit",
    "start": "739519",
    "end": "745040"
  },
  {
    "text": "harder than that but that's kind of the idea is you just sort of rather than doing an infinite amount of work over or or doing a work over a really large",
    "start": "745040",
    "end": "751120"
  },
  {
    "text": "collection we're just figuring out kind of logically what are what are the possible things that could happen and then just check those and then then be",
    "start": "751120",
    "end": "758320"
  },
  {
    "text": "done so I say that it generalizes because there's other operations like multiplication and stuff and so basically we need we need what I'm just",
    "start": "758320",
    "end": "765199"
  },
  {
    "start": "759000",
    "end": "759000"
  },
  {
    "text": "going to kind of hand waving call well- behaved operations um so obviously we need the operation to be deterministic I mean if let's say you had a random",
    "start": "765199",
    "end": "771519"
  },
  {
    "text": "function that could do anything then I don't even really know how you would model that because you know who knows",
    "start": "771519",
    "end": "777199"
  },
  {
    "text": "which value in the middle would get would get hit by some random branch and produce some output you couldn't really produce a deterministic interval as an",
    "start": "777199",
    "end": "783199"
  },
  {
    "text": "output so interval operations like this shouldn't really rely on mutable state or on non-deterministic effects I don't",
    "start": "783199",
    "end": "789680"
  },
  {
    "text": "think um you know you could maybe argue with me about that depending on what kind of non-determinism you're talking about but in general I don't really",
    "start": "789680",
    "end": "795920"
  },
  {
    "text": "think it would work um and basically to be more specific I",
    "start": "795920",
    "end": "800959"
  },
  {
    "text": "think what you really want is you'd like the range of outputs to be determined just by the end points and zero and like maybe some other a few other points that",
    "start": "800959",
    "end": "807480"
  },
  {
    "text": "are that are known ahead of time so a lot of times you know you can just check a few cases and then and then get a",
    "start": "807480",
    "end": "812519"
  },
  {
    "text": "result we sort of need to be able to do that and finally you just need to know what to do in the Unbound case so if we",
    "start": "812519",
    "end": "817560"
  },
  {
    "text": "have like an interval that contains everything that doesn't actually have specific end points so what do you do um",
    "start": "817560",
    "end": "823000"
  },
  {
    "text": "and usually there's a pretty obvious thing to do but I just mention it because you could imagine a function where it wouldn't really work and so",
    "start": "823000",
    "end": "829199"
  },
  {
    "text": "spire's interval right now supports all these functions I put at the bottom so you know absolute value Min and Max um",
    "start": "829199",
    "end": "835720"
  },
  {
    "text": "you can ignore why there's a v on the front for now and then plusus time divide reciprocal Powers square roots",
    "start": "835720",
    "end": "841519"
  },
  {
    "text": "and end Roots so a lot of I mean a lot of stuff you might do with numbers you know not everything like we don't support sign right now we we sort of",
    "start": "841519",
    "end": "848480"
  },
  {
    "text": "could actually that would be fine but we just don't and so let's jump to actually what the Spy code would look like so this is",
    "start": "848480",
    "end": "855519"
  },
  {
    "start": "852000",
    "end": "852000"
  },
  {
    "text": "some code that just builds four different intervals using kind of four different ways of constructing intervals these are all going to be intervals of",
    "start": "855519",
    "end": "862360"
  },
  {
    "text": "doubles um and I've just and and I've shown you what the sort of two- string output of those intervals is on the on",
    "start": "862360",
    "end": "867720"
  },
  {
    "text": "the right in comments um but there there there's four different ways of specifying it so as you can see in one",
    "start": "867720",
    "end": "873000"
  },
  {
    "text": "case we just provide the bounds and by default it gives us a closed interval we can ask for a specific point we can use",
    "start": "873000",
    "end": "878800"
  },
  {
    "text": "this interesting sort of error threshold plus or minus operator uh or you can just basically say give me everything",
    "start": "878800",
    "end": "884600"
  },
  {
    "text": "above some value which you know gives us the interval from you know above zero to towards positive infinity and so then",
    "start": "884600",
    "end": "891440"
  },
  {
    "text": "there's just some simple stuff we can do like checking to see what's going on which points are inside if it's empty or",
    "start": "891440",
    "end": "897759"
  },
  {
    "text": "not and so on uh and then here's some actual like you know real interval arithmetic going on",
    "start": "897759",
    "end": "903759"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "so I I put the definitions this is the same values as the last slide but I put them here so you can kind of remind yourself and",
    "start": "903759",
    "end": "909360"
  },
  {
    "text": "then I'm just going to take a moment to kind of walk through some of these to kind of try and motivate you know why we",
    "start": "909360",
    "end": "915120"
  },
  {
    "text": "got the result we did um you know I think the first one's pretty straightforward you know if you look at",
    "start": "915120",
    "end": "920759"
  },
  {
    "text": "w we just we get W * X by just multiplying both bounds by two that's pretty straightforward you know three",
    "start": "920759",
    "end": "926839"
  },
  {
    "text": "goes to six five goes to 10 everything in the middle midle goes to the middle of the output and then we can take that",
    "start": "926839",
    "end": "932720"
  },
  {
    "text": "result and we can shift it by another interval so by y you see that we now it introduces that little 0.1 error",
    "start": "932720",
    "end": "939399"
  },
  {
    "text": "threshold where it goes from 15.9 to 20.1 and so I think a lot of the engineering applications of intervals",
    "start": "939399",
    "end": "944560"
  },
  {
    "text": "are going to be more like values more like Y where you're going to have like a larger value with some small error tolerance but those error tolerances",
    "start": "944560",
    "end": "950519"
  },
  {
    "text": "might add up like when you multiply or do stuff and so this gives you way to track that through larger calculations",
    "start": "950519",
    "end": "955639"
  },
  {
    "text": "like these calculations are still pretty simple but it could be arbitrarily complicated right could have lots of stuff and then as you can see we can",
    "start": "955639",
    "end": "962800"
  },
  {
    "text": "take the minimum of two different intervals so Z is this interval that you know shoots off to Infinity um whereas x",
    "start": "962800",
    "end": "968360"
  },
  {
    "text": "x y obviously doesn't shoot up to Infinity but you can see that we take the minimum value of those intervals and what we end up with is we know the value",
    "start": "968360",
    "end": "974040"
  },
  {
    "text": "is going to be greater than zero because neither of those intervals contains zero anything below it um and we know that",
    "start": "974040",
    "end": "979600"
  },
  {
    "text": "the highest possible value it could be would be 20.2 uh it couldn't be larger than that",
    "start": "979600",
    "end": "985440"
  },
  {
    "text": "because if you know as you can see x * Y is upper bound is 20 20.2 so if Z is somewhere up towards Infinity we just",
    "start": "985440",
    "end": "992199"
  },
  {
    "text": "ignore it and take the smaller value that's again that's kind of how this works you know you imagine all the cases",
    "start": "992199",
    "end": "998199"
  },
  {
    "text": "on one side and on the other and come up with the result and so finally here's sort of a more interesting looking calculation where you could imagine like",
    "start": "998199",
    "end": "1004880"
  },
  {
    "text": "if Y is the side of a triangle we're calculating the hypotenuse basically of like a sorry",
    "start": "1004880",
    "end": "1011160"
  },
  {
    "text": "a right triangle where you know the two the two sides are the same length so we're y^2 + y^2 you know take the square",
    "start": "1011160",
    "end": "1019480"
  },
  {
    "text": "root of that and that's going to give you the length of the hypotenuse so we can see that you know if we wanted a",
    "start": "1019480",
    "end": "1024520"
  },
  {
    "text": "triangle whose sides were exactly 10 units but there's this error threshold in our Machinery you know the the the",
    "start": "1024520",
    "end": "1031558"
  },
  {
    "text": "the hypotenuse the sort of smallest it could be is this number and then the largest of that so there's maybe like a you know 0. 28 unit slippage there that",
    "start": "1031559",
    "end": "1038520"
  },
  {
    "text": "we have to you know our customers might you know experience that that's like an example of you know what it might look",
    "start": "1038520",
    "end": "1044038"
  },
  {
    "text": "like do people kind of follow this I feel like this is you know hopefully still pretty straightforward but definitely let me know if you're",
    "start": "1044039",
    "end": "1049799"
  },
  {
    "text": "confused or something um and so actually even though I just said that intervals are real",
    "start": "1049799",
    "end": "1055679"
  },
  {
    "start": "1051000",
    "end": "1051000"
  },
  {
    "text": "numbers and I sort of reified that now I'm kind of saying that spire's intervals actually work for anything within order so we can make an interval",
    "start": "1055679",
    "end": "1061240"
  },
  {
    "text": "of strings so this is all the strings that are lexor graphically between bats and cats including the end points so",
    "start": "1061240",
    "end": "1069400"
  },
  {
    "text": "cats with a z would not fit but batter does uh we can also create intervals of option integers you know if for some",
    "start": "1069400",
    "end": "1076919"
  },
  {
    "text": "reason you wanted that I kind of don't know why you would but you could and we can have empty intervals as well so there's an empty",
    "start": "1076919",
    "end": "1083559"
  },
  {
    "text": "interval of list Longs because it is possible for us to order order list",
    "start": "1083559",
    "end": "1089440"
  },
  {
    "text": "Longs um and so as I said you know you're probably like why would you do that or why is that even allowed",
    "start": "1089480",
    "end": "1095559"
  },
  {
    "text": "shouldn't everything have to be a number and the answer is that basically we the",
    "start": "1095559",
    "end": "1101159"
  },
  {
    "text": "way we handle this is rather than restricting interval creation to requiring like a field or some like really heavyweight powerful type class",
    "start": "1101159",
    "end": "1107880"
  },
  {
    "text": "we choose to do instead is let you build the interval right off the bat but we don't give you access to the capabilities unless you have the type",
    "start": "1107880",
    "end": "1114520"
  },
  {
    "text": "class in hand that works so you know you can't unless you have a way to add intervals like you know some kind of uh",
    "start": "1114520",
    "end": "1120360"
  },
  {
    "text": "you know semi-group or monoid or something we wouldn't let you add them but we would let you create the interval and you could then test to see if",
    "start": "1120360",
    "end": "1125559"
  },
  {
    "text": "stuff's in it or not um similarly if you want to multiply you know you need something more powerful take square roots and same thing so as you can see",
    "start": "1125559",
    "end": "1132440"
  },
  {
    "text": "you know none of these things compile like you'd get an error and to be clear the things that you would you would need",
    "start": "1132440",
    "end": "1137880"
  },
  {
    "start": "1137000",
    "end": "1137000"
  },
  {
    "text": "to see kind of tell you what capabilities you need so hopefully you all have sort of been",
    "start": "1137880",
    "end": "1143679"
  },
  {
    "text": "exposed to type classes I'm not really going to explain if you haven't ever used type classes in scholar then I apologize but I'm kind of just going to",
    "start": "1143679",
    "end": "1149360"
  },
  {
    "text": "assume that you understand the idea because it's been sort of around for a bit feel free to come talk to me after",
    "start": "1149360",
    "end": "1154400"
  },
  {
    "text": "the talk if like you're confused about it and want some help with it but the idea is for this purpose type classes",
    "start": "1154400",
    "end": "1159640"
  },
  {
    "text": "are really capabilities I think that's how you should think about them in general is if we we have a generic type we want it to be able to do some stuff",
    "start": "1159640",
    "end": "1164919"
  },
  {
    "text": "the type class provides those capabilities so in this case if we want a mult multiply intervals we need the capability we need is a semi- ring we",
    "start": "1164919",
    "end": "1171320"
  },
  {
    "text": "need the properties that a semi- ring has we want to take the square root we need it to both have a ring and an N",
    "start": "1171320",
    "end": "1176840"
  },
  {
    "text": "root instance and if we want to do division we need a field instance so the compiler will tell you that your type",
    "start": "1176840",
    "end": "1182080"
  },
  {
    "text": "doesn't have those things and maybe if you think we left them out because we were just lazy you could Implement them yourself but maybe you would find that",
    "start": "1182080",
    "end": "1187720"
  },
  {
    "text": "you actually can't Implement them because the type just doesn't work that way and and you know that's what functional programming is all about",
    "start": "1187720",
    "end": "1194640"
  },
  {
    "text": "basically so there so we've got arithmetic done",
    "start": "1194640",
    "end": "1200200"
  },
  {
    "text": "now we're going to jump and talk about intervals as specialized sets um because that's like another interesting use of",
    "start": "1200200",
    "end": "1205799"
  },
  {
    "text": "them and so I showed you how to combine intervals using arithmetic but you can also think about them as sets in fact",
    "start": "1205799",
    "end": "1211440"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "maybe it's more natural to think about them that way so as I've shown you I've created some intervals here and we can",
    "start": "1211440",
    "end": "1216799"
  },
  {
    "text": "obviously do contains tests on them uh but we can also do a whole bunch of other stuff too which is kind of neat",
    "start": "1216799",
    "end": "1223159"
  },
  {
    "start": "1221000",
    "end": "1221000"
  },
  {
    "text": "and most of these operations only require the order so they don't require like Rings or fields or that kind of",
    "start": "1223159",
    "end": "1229280"
  },
  {
    "text": "stuff so you know you could use a string use it with an interval of strings or what have you so we we've got like an",
    "start": "1229280",
    "end": "1234840"
  },
  {
    "text": "intersection like a union uh we can we can test to see if",
    "start": "1234840",
    "end": "1240000"
  },
  {
    "text": "intervals intersect so that's often really useful like if you have a cal if you have two sides of an equation that are supposed to be equal a thing you can",
    "start": "1240000",
    "end": "1246320"
  },
  {
    "text": "do is you can evaluate them with intervals and then see if the the solutions intersect and if they intersect that means that they could",
    "start": "1246320",
    "end": "1251600"
  },
  {
    "text": "possibly be equal you haven't proven that they are equal but you've at least proven that it's plausible if they don't intersect you can be sure that they're",
    "start": "1251600",
    "end": "1257480"
  },
  {
    "text": "not equal there's no chance right those intervals are are disjoint um and we can",
    "start": "1257480",
    "end": "1263000"
  },
  {
    "text": "also take like the opposite or like the complement of an interval so if p is an interval till the P there kind of means",
    "start": "1263000",
    "end": "1269760"
  },
  {
    "text": "every give me the intervals that contain all the numbers not in p and so you can see that instead of producing one",
    "start": "1269760",
    "end": "1274799"
  },
  {
    "text": "interval it produce a list because uh you know you might take a chunk out of the middle of the number line but you need the bottom of the number line and",
    "start": "1274799",
    "end": "1280919"
  },
  {
    "text": "the top and that ends up being two intervals rather than one so I mean you're never really going to get more",
    "start": "1280919",
    "end": "1286120"
  },
  {
    "text": "than two intervals but list was just like a sort of a con type to return and you might actually get nothing so for",
    "start": "1286120",
    "end": "1291320"
  },
  {
    "text": "example if you have the the interval that's all numbers you complement that there's no intervals you're getting back",
    "start": "1291320",
    "end": "1297159"
  },
  {
    "text": "so rather than give you an empty interval we just give you nothing because that's in some sense like just as",
    "start": "1297159",
    "end": "1302520"
  },
  {
    "text": "correct uh and here's sort of a visualization of that again another one of these great askart diagrams that you've probably come to love or hate uh",
    "start": "1302520",
    "end": "1310600"
  },
  {
    "start": "1303000",
    "end": "1303000"
  },
  {
    "text": "so basically as you can see when we take like the complement of T down at the",
    "start": "1310600",
    "end": "1315919"
  },
  {
    "text": "bottom we're taking a bite out of the middle of this number line in other words it goes off towards negative Infinity goes off towards positive Infinity but there's this little bite",
    "start": "1315919",
    "end": "1323279"
  },
  {
    "text": "eaten out and you'll also notice that t included its end points which means that its compliments don't include their end",
    "start": "1323279",
    "end": "1329240"
  },
  {
    "text": "points right T claimed those end points and so when you take the compliment you have to exclude them uh one of the",
    "start": "1329240",
    "end": "1334440"
  },
  {
    "text": "things if you if you implement interval RM take yourself you're going to spend find you spend a lot of time losing",
    "start": "1334440",
    "end": "1339919"
  },
  {
    "text": "sleep over you know how the bounds end up like if you've got what kind of bounds here then what kind of bounds do you generate on these new intervals that",
    "start": "1339919",
    "end": "1346159"
  },
  {
    "text": "ends up being you know very important obviously to to do this stuff correctly um and as you can see we can intersect",
    "start": "1346159",
    "end": "1352480"
  },
  {
    "text": "two unbounded intervals to get a bounded one because each interval constrains one side but if we Union them then we just",
    "start": "1352480",
    "end": "1357799"
  },
  {
    "text": "get the whole number line because one of them provides all the low the negative numbers and one provides all the positive uh again is this kind of making",
    "start": "1357799",
    "end": "1365240"
  },
  {
    "text": "sense yeah awesome so then you might be like I",
    "start": "1365240",
    "end": "1371559"
  },
  {
    "text": "really wanted something that's even more like a set like those lists bum me out I just want a single type that I can treat like a set and maybe it maybe there's",
    "start": "1371559",
    "end": "1377960"
  },
  {
    "text": "two interval but I don't really care that would be awesome and in fact if that's what you want then uh rudiger",
    "start": "1377960",
    "end": "1383640"
  },
  {
    "text": "Clan at least I hope that's how he says his name but uh he's got you covered he's got like a really nice immutable",
    "start": "1383640",
    "end": "1389120"
  },
  {
    "text": "interval set implementation that efficiently stores sort of like the",
    "start": "1389120",
    "end": "1394880"
  },
  {
    "text": "various end points of a set of of intervals basically so you can you can you can do this kind of stuff um you can",
    "start": "1394880",
    "end": "1401720"
  },
  {
    "text": "also get Spire intervals out of it if you want I think it's it's got It's got good Spire interops so I definitely",
    "start": "1401720",
    "end": "1407640"
  },
  {
    "text": "encourage you to check out interval set if this is something you're interested in and we might try to include it in Spire or possibly like a contrib module",
    "start": "1407640",
    "end": "1413279"
  },
  {
    "text": "or something else uh definitely definitely recommend it so this is some of you maybe are",
    "start": "1413279",
    "end": "1421679"
  },
  {
    "text": "worried now that I'm talking about mapping over set but the question is can you map over intervals if it's sort of like a set can you map over and the",
    "start": "1421679",
    "end": "1427919"
  },
  {
    "text": "answer is you sort of can you can map over the end points uh so here's like an obvious method that we could write that",
    "start": "1427919",
    "end": "1433880"
  },
  {
    "text": "does it great and you might be like well why did you call it map bounds that's like it's stupid to make up this name we",
    "start": "1433880",
    "end": "1439200"
  },
  {
    "text": "could call it Maps perfectly well I didn't really want to call it map because it's not really a map it's it doesn't really behave like map and if",
    "start": "1439200",
    "end": "1445360"
  },
  {
    "text": "you use it like map you're probably going to get burned so you know if you like an enterprising functional programmer you're like great you know",
    "start": "1445360",
    "end": "1451559"
  },
  {
    "start": "1448000",
    "end": "1448000"
  },
  {
    "text": "let's use as few abstractions as possible you know like you saw Runar talk and you're like yeah I'm going to do it and so you decide to implement",
    "start": "1451559",
    "end": "1457400"
  },
  {
    "text": "rather than use the built-in arithmetic stuff that I wrote you're like I'm just going to do it all with map bounds map bounds is like super General let's just",
    "start": "1457400",
    "end": "1463200"
  },
  {
    "text": "use that um and you're going to find yourself in a world of pain basically because as you can see all the these",
    "start": "1463200",
    "end": "1470080"
  },
  {
    "text": "functions that you might wish you could just use map bounds for actually return very different intervals and the reason for that is that you can't just consider",
    "start": "1470080",
    "end": "1476440"
  },
  {
    "text": "the end points when you're doing interval you really have to consider the zero and kind of how the signs are",
    "start": "1476440",
    "end": "1482080"
  },
  {
    "text": "affected and whether things are getting reversed or not so like just to look at the first example when we Square this",
    "start": "1482080",
    "end": "1488240"
  },
  {
    "text": "interval from you know -2 to two you know you and I looking at it we can say",
    "start": "1488240",
    "end": "1493640"
  },
  {
    "text": "that well you know if you square netive -2 you get four if you square two you get four but if you square zero you get zero so Z is clearly like it's got to be",
    "start": "1493640",
    "end": "1500080"
  },
  {
    "text": "at least as low as zero and so it turns out that 0 to four is the correct interval for that but if you do only the",
    "start": "1500080",
    "end": "1505720"
  },
  {
    "text": "end points you'd say well -22 is 4 2^2 is 4 4 to four looks good right you know",
    "start": "1505720",
    "end": "1511600"
  },
  {
    "text": "done and that's just you know that's probably not what you want I mean that's certainly not like valid interval arithmetic uh and similarly with",
    "start": "1511600",
    "end": "1517640"
  },
  {
    "text": "negation you might wonder what's going on here what's happening is that Matt bounds is negating the end points and now the lower bound is greater than the",
    "start": "1517640",
    "end": "1523559"
  },
  {
    "text": "upper bound and you know just according to the definitions of the way intervals work that's empty I mean it can't contain any values and so then you get",
    "start": "1523559",
    "end": "1530080"
  },
  {
    "text": "the empty interval when in fact you know you probably wanted the same interval you started with in this case I mean you know negating minus 2 negating to you",
    "start": "1530080",
    "end": "1537000"
  },
  {
    "text": "know you essentially just Flip Flip the end points so map bounds doesn't really work and you might be asking yourself well what can we like fix it can we make",
    "start": "1537000",
    "end": "1543320"
  },
  {
    "text": "map bounds like consider you know like a zero and do some other stuff and like sure maybe you could I don't know I",
    "start": "1543320",
    "end": "1549200"
  },
  {
    "text": "didn't really think that was a good plan so there's maybe a better way so I'm going to introduce polom I'm",
    "start": "1549200",
    "end": "1555360"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "just springing it on you this talk didn't have it in the summary but here we go so pols are basically functions of a",
    "start": "1555360",
    "end": "1561360"
  },
  {
    "text": "single variable with like a limited set of operations so it's not like a function that can do anything it's can it's a function that can only do certain",
    "start": "1561360",
    "end": "1567840"
  },
  {
    "text": "specific things um sort of like the stuff you might have done in like high school algebra or something like that so",
    "start": "1567840",
    "end": "1573960"
  },
  {
    "text": "anyway here's some uh polinomial that I wrote out their functions in terms of X",
    "start": "1573960",
    "end": "1579039"
  },
  {
    "text": "um and that's obviously not valid scolar code that's more like sort of math notation that I'm using just to kind of show you so as you can see they just",
    "start": "1579039",
    "end": "1584960"
  },
  {
    "text": "take X and they do you know math stuff to it like they you know take powers of x they you know add you know multiply by",
    "start": "1584960",
    "end": "1590880"
  },
  {
    "text": "scalers add add other values and so on and so we can Spire has support for",
    "start": "1590880",
    "end": "1598000"
  },
  {
    "text": "polom which is very cool and we can use that in a couple different ways here so there's this fancy string interpolation",
    "start": "1598000",
    "end": "1603559"
  },
  {
    "text": "which is kind of the easiest way to use it but it's like a little bit ad hoc I mean if you want a polinomial of rational numbers I still I think it's",
    "start": "1603559",
    "end": "1608880"
  },
  {
    "text": "like by far the most readable but there's also these two other ways you can build polinomial if you want as well",
    "start": "1608880",
    "end": "1614399"
  },
  {
    "text": "um and basically the idea is you're basically saying for each power of x what's the coefficient for that power",
    "start": "1614399",
    "end": "1620760"
  },
  {
    "text": "and and and polinomial is generic so the coefficients can be long or double or rational or whatever you want um anyway",
    "start": "1620760",
    "end": "1628919"
  },
  {
    "text": "and thanks to James Thompson for providing polinomial so what we can do here is basically translate our interval",
    "start": "1628919",
    "end": "1633960"
  },
  {
    "start": "1631000",
    "end": "1631000"
  },
  {
    "text": "through the polinomial and because of the structure of the polinomial we know that the polinomial is well behaved therefore we can be sure that the",
    "start": "1633960",
    "end": "1639520"
  },
  {
    "text": "intervals we get out are correct so in terms of the stuff we were trying to do with like minus X when we translate",
    "start": "1639520",
    "end": "1645520"
  },
  {
    "text": "through the polinomial we get the right result and we can be sure that translate will preserve the uh interval correctly",
    "start": "1645520",
    "end": "1652080"
  },
  {
    "text": "so so that's pretty great I got to rush to save some time but um I was going to",
    "start": "1652080",
    "end": "1657440"
  },
  {
    "start": "1654000",
    "end": "1654000"
  },
  {
    "text": "show you how this works maybe we're going to skip it actually I'm kind of low on time but um it's like a pretty simple implementation for what it does",
    "start": "1657440",
    "end": "1663559"
  },
  {
    "text": "actually the idea is basically you turn a polinomial a into a polinomial of interval a and then you just evaluate",
    "start": "1663559",
    "end": "1668840"
  },
  {
    "text": "the polinomial so pretty elegant intervals are souped up ranges in 2 minutes all right so basically we",
    "start": "1668840",
    "end": "1676640"
  },
  {
    "text": "can think about what scholar us as range we can talk about the same intervals so we can construct intervals corresponding",
    "start": "1676640",
    "end": "1681720"
  },
  {
    "text": "to scull as ranges um I say this again but basically if you're looping over ins you probably shouldn't do this it's not",
    "start": "1681720",
    "end": "1688320"
  },
  {
    "text": "going to be as fast but there's a bunch of advantages over like numeric range um which is that you don't need to specify",
    "start": "1688320",
    "end": "1693880"
  },
  {
    "start": "1690000",
    "end": "1690000"
  },
  {
    "text": "a step intervals are perfectly happy to just talk about a range and you can once you decide what the step is later you",
    "start": "1693880",
    "end": "1698919"
  },
  {
    "text": "can use it but you don't you can still do other stuff with it contains checks are very fast much faster than looking",
    "start": "1698919",
    "end": "1704360"
  },
  {
    "text": "through a collection you can do math operations there's overflow checking so if you're if you're using like double or I mean int or long for some reason you",
    "start": "1704360",
    "end": "1710880"
  },
  {
    "text": "don't have to worry about you know running off the top for with like a large step um and you can write infinite",
    "start": "1710880",
    "end": "1716880"
  },
  {
    "text": "Loops if you want great so anyway so here's some folding and iteration so we've got an interval",
    "start": "1716880",
    "end": "1723159"
  },
  {
    "text": "we can fold over it which ends up looking a lot like fold left on a range we can also just build iterators do the",
    "start": "1723159",
    "end": "1730200"
  },
  {
    "text": "same kind of thing and we can write this Loop that you know takes a step by 25 and prints all the stuff so you know",
    "start": "1730200",
    "end": "1736880"
  },
  {
    "text": "kind of a g- wiz but it's interesting but there's some fancier stuff we can do so if you want to want to you can express your Loop conditions as",
    "start": "1736880",
    "end": "1742240"
  },
  {
    "text": "intervals then you can Union them or intersect them or whatever and that might be for you that might be a nice",
    "start": "1742240",
    "end": "1747519"
  },
  {
    "text": "way to do it um here's like a method that I think lots of people want but don't actually ever Implement correctly",
    "start": "1747519",
    "end": "1753600"
  },
  {
    "text": "which is dividing sort of a you've got an you know integer number of steps like",
    "start": "1753600",
    "end": "1758720"
  },
  {
    "text": "say like a 100 or something but you want to divide it by some weird number and you want to be sure that the buckets are all the same size and you don't really want floating Point error like you",
    "start": "1758720",
    "end": "1764559"
  },
  {
    "text": "really want the ends to be right uh and there's a really nice way to do this with Spire so this is a problem you've",
    "start": "1764559",
    "end": "1771760"
  },
  {
    "text": "had um as you can see like even with diviser of seven it like pretty much hits all the stuff correctly end at",
    "start": "1771760",
    "end": "1777840"
  },
  {
    "text": "three and you've got infinite Loops great so there was going to be a cool",
    "start": "1777840",
    "end": "1783120"
  },
  {
    "text": "demo but I'm like literally running out of time so caveats don't use this with",
    "start": "1783120",
    "end": "1789159"
  },
  {
    "text": "in if you want it to be really fast it's it's not specialized and there's a couple other",
    "start": "1789159",
    "end": "1794840"
  },
  {
    "text": "problems like your order needs to obey some extra laws when working with rings",
    "start": "1794840",
    "end": "1799880"
  },
  {
    "text": "and there's a few rounding issues with double that come see me if you want to know about them uh there's a few more",
    "start": "1799880",
    "end": "1805000"
  },
  {
    "text": "slides but that's it so anyway hope this was interesting maybe encourage you to check this stuff out and feel free to",
    "start": "1805000",
    "end": "1810559"
  },
  {
    "text": "talk to me about it if you're interested thanks",
    "start": "1810559",
    "end": "1814760"
  }
]