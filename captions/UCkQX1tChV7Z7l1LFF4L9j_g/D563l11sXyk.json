[
  {
    "text": "[Music]",
    "start": "3350",
    "end": "14249"
  },
  {
    "text": "hello everybody my name is Bam and I'm here today to tell you how I see cloud",
    "start": "15519",
    "end": "20800"
  },
  {
    "text": "services evolving and how is that likely to influence the distributed applications we are building this will",
    "start": "20800",
    "end": "26679"
  },
  {
    "text": "be fastpac talk where we won't have time to dig deep in into each Tech and pattern but rather have a quick overview",
    "start": "26679",
    "end": "33520"
  },
  {
    "text": "of how architectures evolve and try to analyze what that might mean for the",
    "start": "33520",
    "end": "38719"
  },
  {
    "text": "future Cloud native applications so I'm a product manager digr where we are building apis for",
    "start": "38719",
    "end": "45960"
  },
  {
    "text": "developers before that I was consultant on architect product manager Red Hat where I've used projects such as aachi",
    "start": "45960",
    "end": "51239"
  },
  {
    "text": "camel which is an integration framework uh contributed to it and wrote a book about it similarly I have used",
    "start": "51239",
    "end": "58559"
  },
  {
    "text": "kubernetes uh as as a developer and wrote book about it which you can get a sponsor free copy from the provided URL",
    "start": "58559",
    "end": "66119"
  },
  {
    "text": "if you wish so what we'll do is we'll look at how applications have been changing from",
    "start": "66119",
    "end": "72799"
  },
  {
    "text": "monoliths to microservices functions and whatever is coming next also we will",
    "start": "72799",
    "end": "78040"
  },
  {
    "text": "look at how infrastructure is evolving in the form of cloud services and uh how",
    "start": "78040",
    "end": "84200"
  },
  {
    "text": "it is shaping the application architecture so let's get started by looking at the pre cloud and early Cloud",
    "start": "84200",
    "end": "92520"
  },
  {
    "text": "era um in the timeline I look at this is the time before microservices movement",
    "start": "92520",
    "end": "98360"
  },
  {
    "text": "so that's before the cloud became mainstream this is mainly the on Prem",
    "start": "98360",
    "end": "103520"
  },
  {
    "text": "and early Cloud era such as early ec2 instances if you look at the",
    "start": "103520",
    "end": "109360"
  },
  {
    "text": "representative and application architecture at that time such as an application build on top of an ESB",
    "start": "109360",
    "end": "115960"
  },
  {
    "text": "platform we would see that developers had to imp implement or used from the",
    "start": "115960",
    "end": "121920"
  },
  {
    "text": "ESB everything themselves that includes things such as um anything to do around",
    "start": "121920",
    "end": "128800"
  },
  {
    "text": "application packaging uh placement deployment apps on the saw platform even",
    "start": "128800",
    "end": "135000"
  },
  {
    "text": "placement of the application on the VMS the deployment and release process uh",
    "start": "135000",
    "end": "141280"
  },
  {
    "text": "for new updates handling the configuration and scaling aspects of the application for",
    "start": "141280",
    "end": "148959"
  },
  {
    "text": "synchronous interactions based on um so and web services or even RPC uh that",
    "start": "148959",
    "end": "156400"
  },
  {
    "text": "would be still done all control from within the application at the time we didn't have things such as you know",
    "start": "156400",
    "end": "161800"
  },
  {
    "text": "circuit breaker pattern the mtls and developers were responsible for",
    "start": "161800",
    "end": "168360"
  },
  {
    "text": "service Discovery retries timeouts authentication authorization Etc uh under the asynchronous",
    "start": "168360",
    "end": "175800"
  },
  {
    "text": "interactions category um I include any kind of interactions through messaging",
    "start": "175800",
    "end": "182239"
  },
  {
    "text": "responsibilities for message transformation converting from one protocol to another connecting to",
    "start": "182239",
    "end": "188400"
  },
  {
    "text": "various systems you know de letter cues Etc and finally under the stateful",
    "start": "188400",
    "end": "196480"
  },
  {
    "text": "patterns and workflows uh that typically requires you know persistent state that",
    "start": "196480",
    "end": "203159"
  },
  {
    "text": "includes things such as uh business workflow orchestration uh or the simpler",
    "start": "203159",
    "end": "208879"
  },
  {
    "text": "SAA pattern implementations you know it poent consumer shared distributed log timers CR jobs all of these uh patterns",
    "start": "208879",
    "end": "217159"
  },
  {
    "text": "require persistent storage behind the scene and all of these would be implemented by developers from within",
    "start": "217159",
    "end": "223040"
  },
  {
    "text": "the application layer in this era uh all of these responsibilities you know were",
    "start": "223040",
    "end": "229599"
  },
  {
    "text": "handled by the application um what about the infrastructure as a developer at the",
    "start": "229599",
    "end": "235680"
  },
  {
    "text": "time I would see the infra as a thin layer and I wouldn't have really big",
    "start": "235680",
    "end": "241959"
  },
  {
    "text": "expectations from it uh the infrastructure would give developers you know compute in the form of VM with",
    "start": "241959",
    "end": "248560"
  },
  {
    "text": "certain capacity networking and storage in the form of maybe relational database",
    "start": "248560",
    "end": "253640"
  },
  {
    "text": "and message broker but even these in some cases would be part of the application layer provided by the ESB",
    "start": "253640",
    "end": "260840"
  },
  {
    "text": "platform and what about the interface and the boundary between these two layers and",
    "start": "260840",
    "end": "266560"
  },
  {
    "text": "thems um I would say it was in the form of operating system abstractions doste",
    "start": "266560",
    "end": "272759"
  },
  {
    "text": "would give you a VM specific capacity and maybe installed Java or some kind of",
    "start": "272759",
    "end": "277880"
  },
  {
    "text": "application server and that would be it there would be a list of uh static IPS and port numbers to refer to other",
    "start": "277880",
    "end": "284400"
  },
  {
    "text": "services and databases this pretty much uh U all in the pre cloud and early",
    "start": "284400",
    "end": "290960"
  },
  {
    "text": "Cloud era there were no universally accepted application formats and apis",
    "start": "290960",
    "end": "296039"
  },
  {
    "text": "that can be used in from different languages and environments uh I would say this is the era of you",
    "start": "296039",
    "end": "302280"
  },
  {
    "text": "know smart monolith and dumb static infrastructure from an application developer point of",
    "start": "302280",
    "end": "309520"
  },
  {
    "text": "view um while that was the state-ofthe-art before 2010 there was a",
    "start": "309520",
    "end": "316560"
  },
  {
    "text": "Revival and renewed interest in the application development uh with a few",
    "start": "316560",
    "end": "321840"
  },
  {
    "text": "major software development trends that happen next and I would say they are",
    "start": "321840",
    "end": "327000"
  },
  {
    "text": "still influential today let's see them um there are different um aspects of a",
    "start": "327000",
    "end": "333800"
  },
  {
    "text": "software architecture and different ways to visualize them uh among popular ways there is a one called 4+1 architecture",
    "start": "333800",
    "end": "340840"
  },
  {
    "text": "model which includes you know logical physical view process view development M",
    "start": "340840",
    "end": "347479"
  },
  {
    "text": "uh this technique pretty much relies on using you know uml and diagrams for visualizing these different views and",
    "start": "347479",
    "end": "354600"
  },
  {
    "text": "later there was also another popular way of visualizing software architecture is called C4 created by Simon Brown which",
    "start": "354600",
    "end": "363280"
  },
  {
    "text": "takes a bit more simplistic approach and looks into software from a hierarchical",
    "start": "363280",
    "end": "369280"
  },
  {
    "text": "levels such as you know system context uh containers where the app is running the components that make up the",
    "start": "369280",
    "end": "375599"
  },
  {
    "text": "application and the code level such as classes and packages for this talk I want to take an",
    "start": "375599",
    "end": "381919"
  },
  {
    "text": "even simpler approach and talk about application architecture in just two levels which I call internal and",
    "start": "381919",
    "end": "389599"
  },
  {
    "text": "external architecture so internal architecture is everything that is",
    "start": "389599",
    "end": "395120"
  },
  {
    "text": "created by an F in developers control that is classes functions packages the",
    "start": "395120",
    "end": "401440"
  },
  {
    "text": "different layers within the application even obstructions of the external systems we could say that uh internal",
    "start": "401440",
    "end": "408840"
  },
  {
    "text": "architecture is everything that goes inside a container image and is treated",
    "start": "408840",
    "end": "414280"
  },
  {
    "text": "as a black box from Ops and platform point of view external architecture is a",
    "start": "414280",
    "end": "419960"
  },
  {
    "text": "collection of everything that the application interacts with that's the other services that make up the whole",
    "start": "419960",
    "end": "425960"
  },
  {
    "text": "system databases message Brokers maybe cloud services Etc as an Ops person you",
    "start": "425960",
    "end": "431759"
  },
  {
    "text": "have to be aware of these external interactions and ensure the connections are you know reliable secure observable",
    "start": "431759",
    "end": "437520"
  },
  {
    "text": "Etc compared to C4 model uh I can say the internal architecture is level you",
    "start": "437520",
    "end": "443560"
  },
  {
    "text": "know three and four with the uh components and code whereas external architecture is basic level one and two",
    "start": "443560",
    "end": "450479"
  },
  {
    "text": "that's the system context and containers so with this disclaimer in place let's see some of the memorable",
    "start": "450479",
    "end": "457080"
  },
  {
    "text": "influences that happen in the monolithic application and how that change the internal architecture of the",
    "start": "457080",
    "end": "464720"
  },
  {
    "text": "applications the first one I would say is doain driven design a term coined by",
    "start": "464720",
    "end": "471599"
  },
  {
    "text": "Eric Evans in his book with the same title in a nutshell domain driven design",
    "start": "471599",
    "end": "477400"
  },
  {
    "text": "is a collection of principle and patterns that help developers encapsulate complex business logic uh",
    "start": "477400",
    "end": "484400"
  },
  {
    "text": "and close the gap between the business reality and the code while this book was written nearly a decade before",
    "start": "484400",
    "end": "491120"
  },
  {
    "text": "microservices it the it set the foundation and later became a corner store of microservices by helping",
    "start": "491120",
    "end": "498280"
  },
  {
    "text": "developers break down a monolitic application into smaller Loosely coupled modules that represent different",
    "start": "498280",
    "end": "504080"
  },
  {
    "text": "business domains represented by you know bounded contexts next significant shift in my",
    "start": "504080",
    "end": "512159"
  },
  {
    "text": "opinion um is hexagonal architecture coined by aliser cburn in an attempt to",
    "start": "512159",
    "end": "519440"
  },
  {
    "text": "avoid the structural pitfalls in the objectoriented software design such as",
    "start": "519440",
    "end": "525560"
  },
  {
    "text": "pit such as undesirable dependencies between the layers and contamination of",
    "start": "525560",
    "end": "531160"
  },
  {
    "text": "the user law interface with the business logic and vice versa basically this uh",
    "start": "531160",
    "end": "536720"
  },
  {
    "text": "approach improves the flexibility and maintainability Tre Tire applications by decoupling components and providing a",
    "start": "536720",
    "end": "545160"
  },
  {
    "text": "standardized approach for interacting with external dependencies there were also a few related ideas such as uh",
    "start": "545160",
    "end": "553600"
  },
  {
    "text": "onion architecture clean architecture by Uncle Bob uh these design patterns",
    "start": "553600",
    "end": "559240"
  },
  {
    "text": "basically emphasize the separation of concerns within the application layer and they organize application code base",
    "start": "559240",
    "end": "565880"
  },
  {
    "text": "into different layers with specific responsibility is all of these",
    "start": "565880",
    "end": "571160"
  },
  {
    "text": "architectural Styles help with the separation of applications business logic from the infrastructure and allow",
    "start": "571160",
    "end": "578480"
  },
  {
    "text": "developers to make changes to the infrastructure without affecting the business logic and vice",
    "start": "578480",
    "end": "585399"
  },
  {
    "text": "versa then came microservices and F Factor apps so built on top of the ideas",
    "start": "585399",
    "end": "591920"
  },
  {
    "text": "from domain driven design such as bounded context Aggregates and hexagonal",
    "start": "591920",
    "end": "597160"
  },
  {
    "text": "architecture uh for isolating external dependencies and microservices basically",
    "start": "597160",
    "end": "603160"
  },
  {
    "text": "allow each service to be independently released and scaled to meet the demand",
    "start": "603160",
    "end": "608640"
  },
  {
    "text": "of changing business requirements and F Factor apps methodology is represents a",
    "start": "608640",
    "end": "614760"
  },
  {
    "text": "set of best practices for developing microservices based application and modern scalable Cloud",
    "start": "614760",
    "end": "622040"
  },
  {
    "text": "application um each of these ideas built on top of the previous one but maybe",
    "start": "622040",
    "end": "628279"
  },
  {
    "text": "also slightly altered it we don't have time to look into each of these into more detail but as a result of this uh",
    "start": "628279",
    "end": "636320"
  },
  {
    "text": "application development Trends in a decade the application internal architecture changed significantly and",
    "start": "636320",
    "end": "643600"
  },
  {
    "text": "uh the monolith architecture we saw earlier turned into taboo and anti pattern almost and started transitioning",
    "start": "643600",
    "end": "651320"
  },
  {
    "text": "towards microservices and functions um while the application",
    "start": "651320",
    "end": "657920"
  },
  {
    "text": "developers were busy transitioning from monol to microservices let's see what",
    "start": "657920",
    "end": "663519"
  },
  {
    "text": "happened with the infrastructure layer at the time um due to all the changes in the",
    "start": "663519",
    "end": "669920"
  },
  {
    "text": "application uh internal architecture and Cloud migration we start seeing the",
    "start": "669920",
    "end": "675120"
  },
  {
    "text": "emergence of Standalone middleware for microservices so whether that is for integration middleware such as Apache",
    "start": "675120",
    "end": "682440"
  },
  {
    "text": "camel bring integration or Kafka for event driven architecture or projects",
    "start": "682440",
    "end": "689079"
  },
  {
    "text": "for workflow orchestration such as conductor Cadence cunda Etc these",
    "start": "689079",
    "end": "694399"
  },
  {
    "text": "specialized Frameworks uh would start to deliver some of the needs of microservices but still remains uh uh",
    "start": "694399",
    "end": "703440"
  },
  {
    "text": "where it's deployed on premon cloud they still remain within the developers realm",
    "start": "703440",
    "end": "708680"
  },
  {
    "text": "um this basically represents this shift represents a split of integration responsibilities from the es from the",
    "start": "708680",
    "end": "715959"
  },
  {
    "text": "monolith into a separate component uh uh but uh let them have managed by",
    "start": "715959",
    "end": "724240"
  },
  {
    "text": "developers what's more interesting here is that what happened in the compute and",
    "start": "724240",
    "end": "730839"
  },
  {
    "text": "lowlevel networking layers Docker was announced in 2013 which unlocked a huge",
    "start": "730839",
    "end": "738160"
  },
  {
    "text": "way of innovation in the computer abstraction layer uh that basically started cloud and computer riss sance",
    "start": "738160",
    "end": "745680"
  },
  {
    "text": "for the Ops teams kubernetes and Lambda were announced um and service mesh a bit later all that",
    "start": "745680",
    "end": "753639"
  },
  {
    "text": "meant that runtime responsibilities we mentioned earlier start shifting from the underly to the",
    "start": "753639",
    "end": "760240"
  },
  {
    "text": "underly platform uh and became a responsibility of off teams and cloud",
    "start": "760240",
    "end": "766560"
  },
  {
    "text": "services there were no more concern for developers",
    "start": "766560",
    "end": "772639"
  },
  {
    "text": "um uh container based the container based packaging meant that applications",
    "start": "772639",
    "end": "778959"
  },
  {
    "text": "written in any language can be orchestrated uniformly that is performing things such as placement",
    "start": "778959",
    "end": "785440"
  },
  {
    "text": "deployment scaling of configuration management moving uh basically from",
    "start": "785440",
    "end": "791560"
  },
  {
    "text": "developer responsibility into Ops responsibility and turning into a declarative and executable format",
    "start": "791560",
    "end": "799279"
  },
  {
    "text": "instead of being written as a documentation that may have errors also networking became more",
    "start": "799279",
    "end": "806760"
  },
  {
    "text": "Dynamic and application f focused and some of the uh reliability service",
    "start": "806760",
    "end": "813600"
  },
  {
    "text": "Discovery failover observability routing responsibilities shifted to the platform",
    "start": "813600",
    "end": "818839"
  },
  {
    "text": "level too uh and op steams and I think uh one of the main",
    "start": "818839",
    "end": "824880"
  },
  {
    "text": "reasons for such a rapid transformation was the fact that we had for the first",
    "start": "824880",
    "end": "830360"
  },
  {
    "text": "time a polyot application specific format such as Docker and kubernetes and",
    "start": "830360",
    "end": "838639"
  },
  {
    "text": "uh these are basically represented by the red boxes on the diagram and these",
    "start": "838639",
    "end": "844000"
  },
  {
    "text": "Technologies bridge the gap between developers and uh and op teams and enabled practices such as devops and",
    "start": "844000",
    "end": "851440"
  },
  {
    "text": "gitops using a Common Language common patterns abstraction and tools used by",
    "start": "851440",
    "end": "857320"
  },
  {
    "text": "both teams um I want to dig a little bit",
    "start": "857320",
    "end": "862880"
  },
  {
    "text": "deeper into the contract between the application and the compute in this case today whether you are running a",
    "start": "862880",
    "end": "870680"
  },
  {
    "text": "micros Service as a container on kubernetes or pure container service or",
    "start": "870680",
    "end": "875959"
  },
  {
    "text": "running it as a Fess function um there is a certain contract between the",
    "start": "875959",
    "end": "881720"
  },
  {
    "text": "application and the runtime platform to distinguish from other kind of platforms",
    "start": "881720",
    "end": "887199"
  },
  {
    "text": "and that we'll see later and emphasize the fact that this is typically um",
    "start": "887199",
    "end": "892720"
  },
  {
    "text": "manage service s offering I call this a compute Cloud uh on the diagrams the",
    "start": "892720",
    "end": "898800"
  },
  {
    "text": "this contract between the application and the compute cloud is in the form of API interactions configurations and even",
    "start": "898800",
    "end": "906160"
  },
  {
    "text": "practices such as rolling deployments um all of that will will",
    "start": "906160",
    "end": "911560"
  },
  {
    "text": "refer to as compute bindings so let's see how we bind an application to the compute layer and what those um apis",
    "start": "911560",
    "end": "921040"
  },
  {
    "text": "are let's say we have a microservice that has you know some kind of",
    "start": "921040",
    "end": "926759"
  },
  {
    "text": "application logic within a container that application has its own database you know it's its internal State and may",
    "start": "926759",
    "end": "935480"
  },
  {
    "text": "talk to some other systems and services these are the external",
    "start": "935480",
    "end": "940959"
  },
  {
    "text": "dependencies then uh when we run uh such an application on a compute platform",
    "start": "940959",
    "end": "946639"
  },
  {
    "text": "there's certain uh contract between these two first um through a",
    "start": "946639",
    "end": "952160"
  },
  {
    "text": "configuration interface whether that's yaml file or some other format we are passing certain resource demands to the",
    "start": "952160",
    "end": "959600"
  },
  {
    "text": "computer platform that is CPU and memory request and limit in kubernetes and that",
    "start": "959600",
    "end": "965959"
  },
  {
    "text": "is the memory request in case of AWS Lambda um we will be using these two",
    "start": "965959",
    "end": "972040"
  },
  {
    "text": "runtime platforms as a comparison um we use other configuration",
    "start": "972040",
    "end": "977160"
  },
  {
    "text": "policies to Define where should the application run on Lambda that is the region selection or the option to deploy",
    "start": "977160",
    "end": "983440"
  },
  {
    "text": "the Lambda at the edge on kubernetes there is a richer set of configuration options such as tains tolerations",
    "start": "983440",
    "end": "990399"
  },
  {
    "text": "infinity anti-affinity and so on um there can be also other metadata such as",
    "start": "990399",
    "end": "995800"
  },
  {
    "text": "you know labels environment variables that we pass to the compute platform so that it knows how to configure our",
    "start": "995800",
    "end": "1002000"
  },
  {
    "text": "application and there is even a certain contract how this configuration is passed from the platform to the",
    "start": "1002000",
    "end": "1007240"
  },
  {
    "text": "application usually that's to environment variables but it can be also be through uh mounted files and a",
    "start": "1007240",
    "end": "1014199"
  },
  {
    "text": "specific location in a specific format there are life cycle hooks too",
    "start": "1014199",
    "end": "1020839"
  },
  {
    "text": "you know the platform now knows how to start and stop our application and it triggers certain events during startup",
    "start": "1020839",
    "end": "1028160"
  },
  {
    "text": "or before shutdown or other uh significant uh life cycle phases that",
    "start": "1028160",
    "end": "1034199"
  },
  {
    "text": "the application then can uh interact with for kubernetes there is the postart",
    "start": "1034199",
    "end": "1039918"
  },
  {
    "text": "event and pre-stop event for Lambda there are similarly extension apis that",
    "start": "1039919",
    "end": "1046000"
  },
  {
    "text": "allow the application to intercept the init inv bog and shut down Paces then",
    "start": "1046000",
    "end": "1052360"
  },
  {
    "text": "there are apis for the platform to check the health of the application API to check what the application has started",
    "start": "1052360",
    "end": "1059320"
  },
  {
    "text": "and uh whether it needs any rectifying actions from the platform for kubernetes",
    "start": "1059320",
    "end": "1064679"
  },
  {
    "text": "these are basically the various help probes the platform is performing for Lambda um because Lambda run is such a",
    "start": "1064679",
    "end": "1073240"
  },
  {
    "text": "shortlived process basically the health is determined by the response status and",
    "start": "1073240",
    "end": "1078640"
  },
  {
    "text": "it dictates whether the platform should retry the request or not um then every",
    "start": "1078640",
    "end": "1084840"
  },
  {
    "text": "compute platform also offers ways to collect logs metrics U traces and these",
    "start": "1084840",
    "end": "1091480"
  },
  {
    "text": "are now mainly based around the structured log formats and promes and",
    "start": "1091480",
    "end": "1097120"
  },
  {
    "text": "open Telemetry based metrics and faes so whether you are aware of uh these or not",
    "start": "1097120",
    "end": "1103080"
  },
  {
    "text": "but these are some you know written and written Unwritten contracts conventions",
    "start": "1103080",
    "end": "1109080"
  },
  {
    "text": "and practices that form the compute bindings between the application and the compute Cloud uh",
    "start": "1109080",
    "end": "1116360"
  },
  {
    "text": "regardless which one you are using um um",
    "start": "1116360",
    "end": "1123080"
  },
  {
    "text": "I include in compute Cloud also um some",
    "start": "1123080",
    "end": "1128919"
  },
  {
    "text": "various service mesches and um transparent mtls resiliency",
    "start": "1128919",
    "end": "1135440"
  },
  {
    "text": "observability uh kind of concerns and if you look at all of these apis between",
    "start": "1135440",
    "end": "1141799"
  },
  {
    "text": "the application and the platform v as developers have to do very little maybe we have to implement you know the health",
    "start": "1141799",
    "end": "1148280"
  },
  {
    "text": "prob apis uh make sure the application is containerized properly and it can start up and shut down but that's pretty",
    "start": "1148280",
    "end": "1155159"
  },
  {
    "text": "much it most of these bindings are used by op teams to operate the apps at scale",
    "start": "1155159",
    "end": "1160520"
  },
  {
    "text": "at R time and the nice thing about all of these uh binding is that most of",
    "start": "1160520",
    "end": "1165880"
  },
  {
    "text": "these today are heavily influenced by containers kubernetes and other open",
    "start": "1165880",
    "end": "1171080"
  },
  {
    "text": "source project and formats and they are pretty Universal across most computer",
    "start": "1171080",
    "end": "1177360"
  },
  {
    "text": "platforms uh Cloud providers and even different application architectures and",
    "start": "1177360",
    "end": "1183159"
  },
  {
    "text": "I would say the where Cloud native as a whole is focused around compute and",
    "start": "1183159",
    "end": "1190960"
  },
  {
    "text": "compute binding and its reach goals this far to sum up we looked at how",
    "start": "1190960",
    "end": "1200200"
  },
  {
    "text": "applications internal architecture has been evolving from monolith to microservices and how compute Centric",
    "start": "1200200",
    "end": "1208000"
  },
  {
    "text": "application Services were born creating a certain binding between the app and the compute platform mainly used by Ops",
    "start": "1208000",
    "end": "1216080"
  },
  {
    "text": "teams today what we will see next is how the applications external architecture start changing uh moving to the cloud",
    "start": "1216080",
    "end": "1225600"
  },
  {
    "text": "tool um now now uh we will look at the integration",
    "start": "1226480",
    "end": "1232600"
  },
  {
    "text": "bindings and in in this talk these are uh the collection of interactions of the",
    "start": "1232600",
    "end": "1239919"
  },
  {
    "text": "application with the other application cloud services storage layer Etc it is",
    "start": "1239919",
    "end": "1246760"
  },
  {
    "text": "um uh these are bindings uh used in the applications",
    "start": "1246760",
    "end": "1252240"
  },
  {
    "text": "external architecture primarily in contrast to compute bindings which are used by op Steam the integration",
    "start": "1252240",
    "end": "1258880"
  },
  {
    "text": "bindings are used by developers uh while implementing the",
    "start": "1258880",
    "end": "1265320"
  },
  {
    "text": "applications so here again we have our containerized application with some kind of internal state but notice that uh",
    "start": "1265400",
    "end": "1274159"
  },
  {
    "text": "when we look at an application's external architecture there can also be other thirdparty systems and services",
    "start": "1274159",
    "end": "1280200"
  },
  {
    "text": "the application is interacting with uh in addition if you are familiar with the idea of data on the outside they can be",
    "start": "1280200",
    "end": "1288200"
  },
  {
    "text": "also state that has not reached the application yet so that state is can be you know in a workflow engine in a dlq",
    "start": "1288200",
    "end": "1295720"
  },
  {
    "text": "or R try in progress and it is designated for this service but it",
    "start": "1295720",
    "end": "1302279"
  },
  {
    "text": "hasn't been uh accepted yet the that's the external State on the diagram which",
    "start": "1302279",
    "end": "1308120"
  },
  {
    "text": "is as important as an internal State when we look at N2 uh request",
    "start": "1308120",
    "end": "1314159"
  },
  {
    "text": "flow these integration bindings can be in the form of connectors to external",
    "start": "1314159",
    "end": "1319960"
  },
  {
    "text": "systems it can be um messaging and Eventing logic such as message retri",
    "start": "1319960",
    "end": "1327159"
  },
  {
    "text": "filters dead letter cues uh message delays content based routing handling of",
    "start": "1327159",
    "end": "1332880"
  },
  {
    "text": "poison messages Etc so I would say all of these are integration bindings they can be also service orchestration and",
    "start": "1332880",
    "end": "1339919"
  },
  {
    "text": "workflows you know web Hops and triggers that poke your application at specific",
    "start": "1339919",
    "end": "1344960"
  },
  {
    "text": "time to do something even something such as distributed log used for Singleton",
    "start": "1344960",
    "end": "1350240"
  },
  {
    "text": "components basically I put in this category all the distributed um system",
    "start": "1350240",
    "end": "1357000"
  },
  {
    "text": "patterns that developers have to use while implementing a distributed application um these are the basically a",
    "start": "1357000",
    "end": "1365919"
  },
  {
    "text": "collection of undifferentiating technical features you have to use to implement your applications B SP",
    "start": "1365919",
    "end": "1372559"
  },
  {
    "text": "business logic and what I find more interesting",
    "start": "1372559",
    "end": "1378120"
  },
  {
    "text": "thing is where these integration capabilities can live the same way we see that thanks to containers and",
    "start": "1378120",
    "end": "1385080"
  },
  {
    "text": "kubernetes UB formats and even Lambda Compu and runtime responsibilities U",
    "start": "1385080",
    "end": "1391039"
  },
  {
    "text": "moved from the application from the ESB into the compute layer which is managed by Ops or a cloud provider similarly we",
    "start": "1391039",
    "end": "1398440"
  },
  {
    "text": "can see that some of the integration responsibilities uh are moving from the application layer into its own layer as",
    "start": "1398440",
    "end": "1405880"
  },
  {
    "text": "a standalone middleware or even to serverless cloud services and in terms of the deployment",
    "start": "1405880",
    "end": "1412640"
  },
  {
    "text": "option for these integration capabilities um the traditional approach",
    "start": "1412640",
    "end": "1417679"
  },
  {
    "text": "is to have all of these integration logic within the application layer for example uh that is with projects such as",
    "start": "1417679",
    "end": "1424159"
  },
  {
    "text": "Apache camel and spring p uh spring integration um camel provides an",
    "start": "1424159",
    "end": "1431320"
  },
  {
    "text": "implementation of tens of messaging patterns connectors which are",
    "start": "1431320",
    "end": "1436600"
  },
  {
    "text": "beautifully wrapped in the night Java DSL and this approach offers most flexibility but it's not available to",
    "start": "1436600",
    "end": "1443559"
  },
  {
    "text": "all popular languages and it tightly couples your application with integration logic life cycles um another",
    "start": "1443559",
    "end": "1451880"
  },
  {
    "text": "extreme is to offload all the integration needs into something like AWS event Bridge or some other Cloud",
    "start": "1451880",
    "end": "1458919"
  },
  {
    "text": "providers uh framework and couple your application with it and these Frameworks",
    "start": "1458919",
    "end": "1464080"
  },
  {
    "text": "such as the event Bridge are basically a modern serverless based ESB and uh uh",
    "start": "1464080",
    "end": "1472960"
  },
  {
    "text": "you if you use it basically you couple your application with the whole ecosystem and tools of that",
    "start": "1472960",
    "end": "1479399"
  },
  {
    "text": "provider and there is a third option and that is to use uh the facto standards uh",
    "start": "1479399",
    "end": "1486880"
  },
  {
    "text": "open- Source projects and apis to bind your application with integration logic",
    "start": "1486880",
    "end": "1492080"
  },
  {
    "text": "similarly to how containers and kubernetes are used for compute bindings",
    "start": "1492080",
    "end": "1498399"
  },
  {
    "text": "um examples of these open apis are things such as Apachi Kafka uh is API",
    "start": "1498399",
    "end": "1505440"
  },
  {
    "text": "used for stream processing uh red for caching and even AWS S3 for file access",
    "start": "1505440",
    "end": "1512640"
  },
  {
    "text": "and Dapper for distributed systems I'll come back to that one um these can be uh",
    "start": "1512640",
    "end": "1519480"
  },
  {
    "text": "deployed on premise and because there is usually open source implementation you",
    "start": "1519480",
    "end": "1524760"
  },
  {
    "text": "know local to the app or they can be consumed as a cloud service and you can",
    "start": "1524760",
    "end": "1529880"
  },
  {
    "text": "even change lat your mind and move back and forth one limitation with some of these uh the facto standards is that",
    "start": "1529880",
    "end": "1538000"
  },
  {
    "text": "they lack higher level uh abstractions that um I've been describing and they're",
    "start": "1538000",
    "end": "1543799"
  },
  {
    "text": "mainly focused on the storage access layer for example Kafka is for message access and uh you know red is just the",
    "start": "1543799",
    "end": "1550200"
  },
  {
    "text": "key value access EST for file access the integration bindings um I've been",
    "start": "1550200",
    "end": "1555799"
  },
  {
    "text": "describing this talk are more more um than storage uh storage access only they",
    "start": "1555799",
    "end": "1561840"
  },
  {
    "text": "cover higher level developer concerns uh such as the ones offered by Dapper",
    "start": "1561840",
    "end": "1568760"
  },
  {
    "text": "assuming you are familiar with Kafka reddish est3 I'll cover briefly what",
    "start": "1568760",
    "end": "1574760"
  },
  {
    "text": "Dapper is so Dapper was founded by Microsoft",
    "start": "1574760",
    "end": "1580120"
  },
  {
    "text": "and donated to cncf in 2021 and in essence Dapper is a set of",
    "start": "1580120",
    "end": "1587279"
  },
  {
    "text": "dist debited Primitives exposed as apis uh and deployed as a site car uh these",
    "start": "1587279",
    "end": "1595640"
  },
  {
    "text": "capabilities in Dapper are called building blocks and they are nothing more than an API with multiple",
    "start": "1595640",
    "end": "1602080"
  },
  {
    "text": "implementations you know for example there is a state management building block which is similar to the r API but",
    "start": "1602080",
    "end": "1609279"
  },
  {
    "text": "it can have different state story implementations um there is a pops sub API similar to Kafka uh but it has",
    "start": "1609279",
    "end": "1617200"
  },
  {
    "text": "multiple implementation such as one based on Kafka Reddit Amazon sqs gcp",
    "start": "1617200",
    "end": "1622600"
  },
  {
    "text": "pops up rabbit mq Etc and not only that the popup API for example can have high",
    "start": "1622600",
    "end": "1629240"
  },
  {
    "text": "level features that some of the messaging systems alone don't offer but Dapper implemented for example dqs and",
    "start": "1629240",
    "end": "1637320"
  },
  {
    "text": "filtering delayed message delivery Etc um basically Dapper implements most of",
    "start": "1637320",
    "end": "1643679"
  },
  {
    "text": "the integration bindings I have been talking so far you stateful orchestration patterns uh which is a new",
    "start": "1643679",
    "end": "1651520"
  },
  {
    "text": "Dapper uh API called workflows uh a synchronous interactions I've been",
    "start": "1651520",
    "end": "1657159"
  },
  {
    "text": "describing which is the popup API in Dapper the synchronous interactions which is the service invocation API in",
    "start": "1657159",
    "end": "1663720"
  },
  {
    "text": "Dapper and and more uh sorry uh in terms of",
    "start": "1663720",
    "end": "1670799"
  },
  {
    "text": "architecture Dapper is typically deployed as a side car but we TIG are",
    "start": "1670799",
    "end": "1676399"
  },
  {
    "text": "working to making it well ailable as a SAS to and you consume d apis uh through",
    "start": "1676399",
    "end": "1684159"
  },
  {
    "text": "well-defined you know HTTP and grpc apis uh unaware of the backing implementation",
    "start": "1684159",
    "end": "1691279"
  },
  {
    "text": "of these apis which can be you know provided by a cloud service deployed on Prem or in memory implementation for",
    "start": "1691279",
    "end": "1698799"
  },
  {
    "text": "development purpose so uh if I was to compare dapper",
    "start": "1698799",
    "end": "1707640"
  },
  {
    "text": "with camo and event Bridge let's say there are many differences but in terms of coupling I would say camo would be",
    "start": "1707640",
    "end": "1715039"
  },
  {
    "text": "one that is cloud agnostic but very much language specific uh event bridge on",
    "start": "1715039",
    "end": "1721640"
  },
  {
    "text": "that hand will be you know specific to AWS only and Dapper can be used by",
    "start": "1721640",
    "end": "1727480"
  },
  {
    "text": "multiple know languages on different Cloud providers uh it can be you know",
    "start": "1727480",
    "end": "1733159"
  },
  {
    "text": "Cod deployed with your application as a side car and eventually consumed as s tool um by the way you know whether",
    "start": "1733159",
    "end": "1741519"
  },
  {
    "text": "something is language and Cloud specific is not only about application portability a cloud and language",
    "start": "1741519",
    "end": "1748200"
  },
  {
    "text": "agnostic framework allows um portability of patterns tools and practices and",
    "start": "1748200",
    "end": "1755000"
  },
  {
    "text": "knowledge and and even developers across different projects teams and Cloud so it",
    "start": "1755000",
    "end": "1761159"
  },
  {
    "text": "becomes uh Universal knowledge and the facto standard eventually",
    "start": "1761159",
    "end": "1769320"
  },
  {
    "text": "so and lastly let's see uh what are those uh application for cloud services",
    "start": "1770000",
    "end": "1776799"
  },
  {
    "text": "and how they might uh influence the apps we are building we saw how compute Cloud took",
    "start": "1776799",
    "end": "1784919"
  },
  {
    "text": "over the responsibilities of the runtime management and networking from developers to Ops and even to managed",
    "start": "1784919",
    "end": "1792000"
  },
  {
    "text": "cloud services what's interesting is that the new compute services are all",
    "start": "1792000",
    "end": "1797320"
  },
  {
    "text": "all about individual applications here I have put a few from AWS but other Cloud",
    "start": "1797320",
    "end": "1804120"
  },
  {
    "text": "providers have similar services and and this list is growing and expanding even",
    "start": "1804120",
    "end": "1809279"
  },
  {
    "text": "to the edge um the networking services are also becoming uh application focused",
    "start": "1809279",
    "end": "1816960"
  },
  {
    "text": "and they are able to understand you know HTTP grpc and even application protocols",
    "start": "1816960",
    "end": "1822080"
  },
  {
    "text": "and give you application Level controls um in a similar way I see the",
    "start": "1822080",
    "end": "1827399"
  },
  {
    "text": "birth of the integration Cloud integration cloud is basically a",
    "start": "1827399",
    "end": "1833000"
  },
  {
    "text": "collection of managed services that take the integration responsibilities away from developers and offer them as a",
    "start": "1833000",
    "end": "1839679"
  },
  {
    "text": "serverless capabilities in addition to Pure Storage",
    "start": "1839679",
    "end": "1844760"
  },
  {
    "text": "services such as you know pogress my SQL know Kafka redish file storage Etc uh I",
    "start": "1844760",
    "end": "1853240"
  },
  {
    "text": "see services for processing events such as you know AWS event Bridge uh Google",
    "start": "1853240",
    "end": "1859960"
  },
  {
    "text": "event Arc as your event grid and all the other variations uh out there there are",
    "start": "1859960",
    "end": "1866600"
  },
  {
    "text": "even more services for stateful orchestration such as step functions temporal",
    "start": "1866600",
    "end": "1871799"
  },
  {
    "text": "Cloud um services for pops up such as AB Chrome Services web hooks data",
    "start": "1871799",
    "end": "1878159"
  },
  {
    "text": "virtualization Services graph Quil Services uh and the list goes on and on",
    "start": "1878159",
    "end": "1884320"
  },
  {
    "text": "and the collectivity all of those basically represents an integration Cloud um all of these uh services are",
    "start": "1884320",
    "end": "1892960"
  },
  {
    "text": "created for developers first and not for ofs and they are typically fully managed",
    "start": "1892960",
    "end": "1898360"
  },
  {
    "text": "and serverless in the resulting architecture the core application logic can be one or",
    "start": "1898360",
    "end": "1908080"
  },
  {
    "text": "can be bound to one or more cloud services um over compute and integration",
    "start": "1908080",
    "end": "1914279"
  },
  {
    "text": "apis some of these apis are you know open based on open source project and some today are uh vendor specific and",
    "start": "1914279",
    "end": "1923000"
  },
  {
    "text": "developers uh are still responsible uh for exposing certain apis in their",
    "start": "1923000",
    "end": "1929399"
  },
  {
    "text": "application and calling apis of the integration cloud and connect their application business logic with the This",
    "start": "1929399",
    "end": "1936080"
  },
  {
    "text": "Cloud ideally uh this should be done following the principles of hexagonal",
    "start": "1936080",
    "end": "1941799"
  },
  {
    "text": "architecture but looking at it from a more modern view with you know using op",
    "start": "1941799",
    "end": "1947200"
  },
  {
    "text": "apis and formats rather than the original impress uh method calls and",
    "start": "1947200",
    "end": "1954279"
  },
  {
    "text": "interfaces um in this architecture compute and integration capabilities are",
    "start": "1954279",
    "end": "1959480"
  },
  {
    "text": "consumed as SAS uh delegated to trusted third party company and the role of Ops",
    "start": "1959480",
    "end": "1967039"
  },
  {
    "text": "is more about governing securing and configuring these cloud services um",
    "start": "1967039",
    "end": "1973880"
  },
  {
    "text": "that's responsible for implementing the differentiating business business logic and reusing the undifferentiated",
    "start": "1973880",
    "end": "1980919"
  },
  {
    "text": "integration capabilities uh uh as a",
    "start": "1980919",
    "end": "1985799"
  },
  {
    "text": "service um and here we see more and more specialized application for cloud",
    "start": "1986639",
    "end": "1993440"
  },
  {
    "text": "services which the application can bound to now the different serverless uh",
    "start": "1993440",
    "end": "2000000"
  },
  {
    "text": "compute Services servess uh Traffic Service traffic routing Services event",
    "start": "2000000",
    "end": "2006080"
  },
  {
    "text": "processing services fful orchestration service Etc uh in an Ideal World an application wouldn't be",
    "start": "2006080",
    "end": "2013360"
  },
  {
    "text": "bound to all of them but uh the application would use few provided",
    "start": "2013360",
    "end": "2018559"
  },
  {
    "text": "within the same Cloud region and cloud provider and uh consume them over open",
    "start": "2018559",
    "end": "2024559"
  },
  {
    "text": "apis which leaves the flexibility uh to move somewhere else later if",
    "start": "2024559",
    "end": "2030639"
  },
  {
    "text": "needed and in my opinion uh we'll see more applications running on the cloud",
    "start": "2030639",
    "end": "2037000"
  },
  {
    "text": "not only bound to the compute layer or just the storage layer but bound to the integration layer",
    "start": "2037000",
    "end": "2043480"
  },
  {
    "text": "too if you trust a cloud provider with your data and compute you know why not",
    "start": "2043480",
    "end": "2049720"
  },
  {
    "text": "trust it also for the integration layer as long as it has uh standardized boundaries uh enabling portability of",
    "start": "2049720",
    "end": "2057280"
  },
  {
    "text": "apps and developers and lastly why all of that",
    "start": "2057280",
    "end": "2065079"
  },
  {
    "text": "matters and what are the KE the key takeaways from this talk uh firstly I",
    "start": "2065079",
    "end": "2071960"
  },
  {
    "text": "would say one of the goals of this talk was to give an overview of how application and infra evolved over the",
    "start": "2071960",
    "end": "2078200"
  },
  {
    "text": "last two decades and maybe that's an indication of the direction of change going forward in terms of uh key",
    "start": "2078200",
    "end": "2087358"
  },
  {
    "text": "takeaways um first I would say you should encapsulate an application's",
    "start": "2087359",
    "end": "2092599"
  },
  {
    "text": "internal architecture uh whether that's microservices functions modular mono",
    "start": "2092599",
    "end": "2098359"
  },
  {
    "text": "whatever using you know open compute Bindings that is basically containers as",
    "start": "2098359",
    "end": "2104720"
  },
  {
    "text": "of today and if you understand containers their life cycle events resource constraints health checks you",
    "start": "2104720",
    "end": "2111839"
  },
  {
    "text": "can understand many computer platforms and use them quickly and benefit from the whole ecosystem of tools and",
    "start": "2111839",
    "end": "2119000"
  },
  {
    "text": "knowledge without Reinventing the wheel second I'll would say focus on",
    "start": "2119000",
    "end": "2125440"
  },
  {
    "text": "implementing the differentiating business features in your application and try to reuse the undifferentiated",
    "start": "2125440",
    "end": "2132160"
  },
  {
    "text": "repetitive distributed features um our apis uh the same way we do for Compu and",
    "start": "2132160",
    "end": "2139440"
  },
  {
    "text": "storage today and ultimately this comes down to",
    "start": "2139440",
    "end": "2144839"
  },
  {
    "text": "portability but it is really about application portability from One Cloud to another it's more about people and",
    "start": "2144839",
    "end": "2152680"
  },
  {
    "text": "tools portability it's portability of pattern of practices experiences",
    "start": "2152680",
    "end": "2159440"
  },
  {
    "text": "Knowledge from one project to another from One Cloud to another from one employer to another we have that",
    "start": "2159440",
    "end": "2167079"
  },
  {
    "text": "portability for the compute layer and I think we need it the same for the integration layer",
    "start": "2167079",
    "end": "2174200"
  },
  {
    "text": "too um here a few links where you can connect with me and continue this discussion also via di our",
    "start": "2174200",
    "end": "2182520"
  },
  {
    "text": "hiring that's all thank you",
    "start": "2182520",
    "end": "2188720"
  },
  {
    "text": "[Music]",
    "start": "2189500",
    "end": "2195800"
  }
]