[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "18640"
  },
  {
    "text": "so how many people get the joke in this slide does anybody get this it's like amen basically okay um",
    "start": "18640",
    "end": "28759"
  },
  {
    "text": "enim the the joke is basically playing on the fact that enzyme is not a New Concept okay uh enzyme is is is based on",
    "start": "28759",
    "end": "36360"
  },
  {
    "text": "a concept that was developed for for slime basically so slime is a a common",
    "start": "36360",
    "end": "41879"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "LP editing mode common lisp IDE mode basically for emx and uh it's most",
    "start": "41879",
    "end": "48000"
  },
  {
    "text": "recently gained a lot of traction as a mode for closure so uh what slime basically does and what enzyme does is",
    "start": "48000",
    "end": "55680"
  },
  {
    "text": "they provide IDE like functionality in a subprocess controlled by your parent editor and you just the editor",
    "start": "55680",
    "end": "62160"
  },
  {
    "text": "communicates with them back and forth via a protocol and they you know they never block each other and and you",
    "start": "62160",
    "end": "68520"
  },
  {
    "text": "basically have your your regular text editor enriched with IDE like functionality so it's like 80 80 to 85%",
    "start": "68520",
    "end": "75240"
  },
  {
    "text": "of an IDE 80 to 85% of your Eclipse IDE right your monolithic craziness but",
    "start": "75240",
    "end": "81520"
  },
  {
    "text": "tucked into a really nice text editor package right your your emac editor or",
    "start": "81520",
    "end": "88200"
  },
  {
    "text": "your Vim editor whatever you happen to be working with and there's a lot of really lovely things that come out of",
    "start": "88200",
    "end": "93320"
  },
  {
    "text": "this I mean number one you can continue to use emacs and you don't have to use fake keybinding packages but more",
    "start": "93320",
    "end": "99479"
  },
  {
    "text": "importantly it is a totally optional workflow okay this is something that a lot of people miss with things like",
    "start": "99479",
    "end": "106119"
  },
  {
    "text": "enzyme and and slime and things like that and this is the the thing that is compelling to me um when I'm using my",
    "start": "106119",
    "end": "113600"
  },
  {
    "text": "editor which is jedit okay I can open up a Scola file that's not in a project",
    "start": "113600",
    "end": "119520"
  },
  {
    "text": "that knows about that's maybe on a remote server I'm loading it over some FTP connection or something like that or",
    "start": "119520",
    "end": "125680"
  },
  {
    "text": "or maybe I just downloaded a gist maybe it's not even well formatted Scala I open it up in my editor and it works in",
    "start": "125680",
    "end": "132760"
  },
  {
    "text": "my editor okay I know that doesn't sound very impressive but try doing that in Eclipse just",
    "start": "132760",
    "end": "138879"
  },
  {
    "text": "once because it's just a nightmare to try to make that work try doing it in intellig it's terrible so um it works",
    "start": "138879",
    "end": "146200"
  },
  {
    "text": "because jedit is a text editor and Nim doesn't impose itself on my text editing",
    "start": "146200",
    "end": "151360"
  },
  {
    "text": "life enme does its thing when I ask it to so this is very very very powerful so",
    "start": "151360",
    "end": "158120"
  },
  {
    "text": "this is this is um this is for me probably the main motivation for enzyme but there's another really important motivation here that is best summed up",
    "start": "158120",
    "end": "165120"
  },
  {
    "text": "by a single image this is steady",
    "start": "165120",
    "end": "171879"
  },
  {
    "start": "166000",
    "end": "166000"
  },
  {
    "text": "state eclipse in this image has three files open jedit has",
    "start": "171879",
    "end": "178760"
  },
  {
    "text": "35 um so 892 Megs of ram versus 318 Megs of",
    "start": "178760",
    "end": "185400"
  },
  {
    "text": "RAM and eclipse is sitting there using 10% of my CPU while it's doing",
    "start": "185400",
    "end": "190720"
  },
  {
    "text": "nothing this is crazy okay and um enzyme doesn't entirely solve this problem but",
    "start": "190720",
    "end": "197159"
  },
  {
    "text": "it hides it away it tucks it away in such a way that the pro the operating system is able to manage it better and",
    "start": "197159",
    "end": "202319"
  },
  {
    "text": "we're going to talk about this in a second um so Ides okay why are we doing",
    "start": "202319",
    "end": "208080"
  },
  {
    "text": "this if we already have uh you know modern ID it's it's not 2008",
    "start": "208080",
    "end": "213400"
  },
  {
    "text": "anymore Eclipse actually works intellig is out there and it's it's functional for scy and things like that but the",
    "start": "213400",
    "end": "219200"
  },
  {
    "text": "fact is that Ides are bad editors Ides have always been bad editors and why is",
    "start": "219200",
    "end": "225000"
  },
  {
    "text": "it that they're bad editors well they give you everything you don't need and about 70% of the things that you",
    "start": "225000",
    "end": "231760"
  },
  {
    "text": "do okay they were not designed to be primarily text editors and the thing",
    "start": "231760",
    "end": "237319"
  },
  {
    "text": "about our job the thing about programming is that most of what we're doing is manipulating text you can make",
    "start": "237319",
    "end": "242920"
  },
  {
    "text": "the argument that text is just an abstraction for getting at the As and that's true but it's the abstraction we",
    "start": "242920",
    "end": "249360"
  },
  {
    "text": "work with it's the abstraction we have and so our tools should primarily",
    "start": "249360",
    "end": "255239"
  },
  {
    "text": "optimize for manipulating text that's the primary thing we do that's the thing we're doing almost all the time and the",
    "start": "255239",
    "end": "260919"
  },
  {
    "text": "semantically aware stuff needs to be secondary Ides get this reversed and",
    "start": "260919",
    "end": "266199"
  },
  {
    "text": "they give us semantically aware editing and as man tools wrapped up inside of",
    "start": "266199",
    "end": "272600"
  },
  {
    "text": "really really really primitive text editors and I this is backwards this is",
    "start": "272600",
    "end": "278400"
  },
  {
    "text": "entirely backwards so there are text editors out there that do text editing fairly well I mean basically any decent",
    "start": "278400",
    "end": "285080"
  },
  {
    "text": "editor is going to give you the tools to be productive in text editing Why not start with those and then enrich them",
    "start": "285080",
    "end": "291680"
  },
  {
    "text": "with functionality Ides are also I mean this is another Point that's often missed Ides are extremely",
    "start": "291680",
    "end": "298120"
  },
  {
    "text": "confining they are extensible I mean eclipse is certainly much more extensible than it used to be uh net",
    "start": "298120",
    "end": "303960"
  },
  {
    "text": "beans is much more extensible than it used to be but they you know it's it's",
    "start": "303960",
    "end": "309000"
  },
  {
    "text": "try adding try adding support for a new language to eclipse and then come back to me and tell me that they're",
    "start": "309000",
    "end": "314160"
  },
  {
    "text": "extensible it's it's terrible it's a nightmare I add support for a new language to jedit every week and it",
    "start": "314160",
    "end": "320880"
  },
  {
    "text": "takes me five minutes like I I I can't imagine doing that in an IDE so this is this is very very",
    "start": "320880",
    "end": "326919"
  },
  {
    "text": "important so um actions speak Lou than words and I think screencast speak louder than action so here is a",
    "start": "326919",
    "end": "332720"
  },
  {
    "text": "screencast showing anim and action inside jedit I'm using jedit because",
    "start": "332720",
    "end": "337919"
  },
  {
    "text": "this is just my editor of choice right um enme was built specifically to work with emac but it is editor agnostic",
    "start": "337919",
    "end": "344400"
  },
  {
    "text": "which is a point I'm going to hammer home later so basically what I'm doing here is I am starting the nzy instance",
    "start": "344400",
    "end": "350680"
  },
  {
    "text": "as a subprocess underneath jit I was using jit prior to this without enme and you know was only missing it for the",
    "start": "350680",
    "end": "357360"
  },
  {
    "text": "things that enme provides me right J at its function with functionality is not compromised by not having enzyme ready",
    "start": "357360",
    "end": "364039"
  },
  {
    "text": "and what's Happening Here is enzyme is giving us some status messages down in this bar at the bottom I know it's it's",
    "start": "364039",
    "end": "369199"
  },
  {
    "text": "kind of hard to see increasing this font size for jedit is actually a bit of a pain but that bar at the bottom there",
    "start": "369199",
    "end": "374720"
  },
  {
    "text": "that status bar is where everything is going to show up so one of the features that I'm going to demo here as soon as enzyme is ready is things like finding",
    "start": "374720",
    "end": "382479"
  },
  {
    "text": "the inferred type of a particular value which I think is a very very important thing for any Scala IDE or any IDE for a",
    "start": "382479",
    "end": "389080"
  },
  {
    "text": "function language to provide and that inferred type is going to pop up at the bottom there basically anything en wants",
    "start": "389080",
    "end": "394280"
  },
  {
    "text": "to tell us is going to show up there at the moment we are waiting for enzyme to say full type check finished and this",
    "start": "394280",
    "end": "400000"
  },
  {
    "text": "took a little longer than usual because enzyme has performance issues on Ant XML so here we go the type of the nodes",
    "start": "400000",
    "end": "406000"
  },
  {
    "text": "value is Vector case Vector case is a class we can find the inferred type of",
    "start": "406000",
    "end": "411440"
  },
  {
    "text": "functions as well as variables right the type is int see that down at the bottom there um we can do jump to declaration",
    "start": "411440",
    "end": "417800"
  },
  {
    "text": "since we just put the cursor over and use the appropriate key binding we can jump into not only Declaration of values",
    "start": "417800",
    "end": "423319"
  },
  {
    "text": "but also the Declaration of classes so this is like your control click from Eclipse very very straightforward this",
    "start": "423319",
    "end": "429599"
  },
  {
    "text": "is amazing error highlighting on Save if your editor doesn't have this you're wasting about 90% of your day this this",
    "start": "429599",
    "end": "437120"
  },
  {
    "text": "is a huge productivity boost and notice it it was literally instantaneous my finger wasn't even off the S key saving",
    "start": "437120",
    "end": "443720"
  },
  {
    "text": "that by the time that that error message showed up it can find type errors as well as name binding errors it doesn't",
    "start": "443720",
    "end": "449800"
  },
  {
    "text": "find everything because this is using the presentation compiler but it finds a ridiculous number of things and it finds",
    "start": "449800",
    "end": "455800"
  },
  {
    "text": "them fast which is the thing that matters um here I'm using J to type okay this is your command shift T from",
    "start": "455800",
    "end": "462960"
  },
  {
    "text": "eclipse and uh uh Nim's implementation of this is astonishingly crude but",
    "start": "462960",
    "end": "468240"
  },
  {
    "text": "actually works much better than eclipses which I'm not sure how that works um what I just demonstrated there was uh",
    "start": "468240",
    "end": "473840"
  },
  {
    "text": "syntax aware selection so I was like expanding the selection here I'm doing a rename okay everybody loves refactorings",
    "start": "473840",
    "end": "481000"
  },
  {
    "text": "and I can do this on locals by just delegating to IDE enim gives me this refactoring support inside of my text",
    "start": "481000",
    "end": "487400"
  },
  {
    "text": "editor um another the but it's not just renames refactorings right it gives us basically anything that scholar",
    "start": "487400",
    "end": "493080"
  },
  {
    "text": "refactoring offers so I'm going to do jump into a member here and then down here what I'm going to do is I'm going",
    "start": "493080",
    "end": "498720"
  },
  {
    "text": "to take the right member of that tupal that I'm returning the new group right and I'm going to extract local on this",
    "start": "498720",
    "end": "504319"
  },
  {
    "text": "I'm going to extract it into right group okay sort of thinks about it for a little bit and then tell us the",
    "start": "504319",
    "end": "509520"
  },
  {
    "text": "refactoring is complete so we save and there's an error because enzyme doesn't always get everything right and I think",
    "start": "509520",
    "end": "515240"
  },
  {
    "text": "this is actually scholar refactoring fault but this is this is a bug you just delete the parentheses and life is good",
    "start": "515240",
    "end": "520680"
  },
  {
    "text": "again um so yeah basically this is a small fragment of the functionality that",
    "start": "520680",
    "end": "526640"
  },
  {
    "text": "enme actually does um the this is a small fragment of the functionality implemented in jedit enim provides even",
    "start": "526640",
    "end": "532680"
  },
  {
    "text": "more things that I don't Implement in jit like content assist right where you're typing typing typing Dot and then",
    "start": "532680",
    "end": "537920"
  },
  {
    "text": "you get your your helpful intellisense uh assistant that tells you what uh",
    "start": "537920",
    "end": "543560"
  },
  {
    "text": "functions are available on a particular uh type so this is this is all very very useful stuff um and this helps me a",
    "start": "543560",
    "end": "550880"
  },
  {
    "text": "tremendous AIT in in in my workday so so what sort of features are there in here altogether well we already saw inferred",
    "start": "550880",
    "end": "557480"
  },
  {
    "start": "557000",
    "end": "557000"
  },
  {
    "text": "type we saw jump to declaration we saw fast type checking on Save really really",
    "start": "557480",
    "end": "564560"
  },
  {
    "text": "really fast and um anecdote that I want to emphasize here um when I started working on enzyme in jedit I had two",
    "start": "564560",
    "end": "571440"
  },
  {
    "text": "features that I wanted to do okay literally just two features that I wanted to enable and it was worth learning enzyme to do this I wanted",
    "start": "571440",
    "end": "578680"
  },
  {
    "text": "infer type and I want to jump to declaration error highlighting is so easy to enable in jedit that I just did",
    "start": "578680",
    "end": "584200"
  },
  {
    "text": "it with one line of code because you know it's an extra feature and why not and uh after I turned this on and I",
    "start": "584200",
    "end": "590760"
  },
  {
    "text": "reloaded the plug-in my productivity jumped by a factor of three so that's pretty awesome I I was",
    "start": "590760",
    "end": "598000"
  },
  {
    "text": "totally not expecting that this is really really really really helpful and worth fighting for to get this in your",
    "start": "598000",
    "end": "604160"
  },
  {
    "text": "editor enim gives you refactoring it's not the full set of java refactorings but it's certainly the full set of",
    "start": "604160",
    "end": "610120"
  },
  {
    "text": "refactorings that are enabled inside of eclipse and the full set of refactorings enabled inside of intellig so yeah like",
    "start": "610120",
    "end": "617040"
  },
  {
    "text": "I said 80% of an IDE we've got content assist and there's even more okay there's more stuff that we provide or",
    "start": "617040",
    "end": "623560"
  },
  {
    "text": "there's more stuff that enme provides some of it I provide um there's debugging everybody loves their debuggers and has had this for a very",
    "start": "623560",
    "end": "630120"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "long time in an essentially primitive and and annoying form um Aman has been working on this for the last couple",
    "start": "630120",
    "end": "635720"
  },
  {
    "text": "months to improve this substantially to the point where the debugging support in enim is really going to be a peer for",
    "start": "635720",
    "end": "641440"
  },
  {
    "text": "what you have in eclipse and in T and in other editors in other idees there's semantic highlighting Eclipse still",
    "start": "641440",
    "end": "647959"
  },
  {
    "text": "doesn't have this I've been bugging miles about this for three years and Eclipse still doesn't have this feature",
    "start": "647959",
    "end": "654600"
  },
  {
    "text": "Aman implemented it in like a weekend so that's pretty ridiculous um jedit",
    "start": "654600",
    "end": "659639"
  },
  {
    "text": "doesn't implement it because jedit is limited in how it does syntax highlighting and I cannot make it work",
    "start": "659639",
    "end": "666760"
  },
  {
    "text": "um I am bugging the jet developers about that right now but realistically jet has like two users so it's probably going to",
    "start": "666760",
    "end": "673399"
  },
  {
    "text": "take a while um en is editor agnostic this is its most important feature right",
    "start": "673399",
    "end": "680000"
  },
  {
    "text": "here it's a subprocess it's a subprocess that jedit communicates with using the same protocol that emac communicates",
    "start": "680000",
    "end": "686959"
  },
  {
    "text": "with it using the same protocol that the new Sublime Text inside mode communicates with it it's totally editor",
    "start": "686959",
    "end": "694920"
  },
  {
    "text": "agnostic and this means that all of this work that aan has been putting in all of this effort that he's put in we can reap",
    "start": "694920",
    "end": "701360"
  },
  {
    "text": "the rewards of that in our editors and it's practically free like this is a",
    "start": "701360",
    "end": "706560"
  },
  {
    "text": "gift wrapped IDE for your editor all you have to do is hook it up it is multi-process and lightweight so",
    "start": "706560",
    "end": "714079"
  },
  {
    "text": "remember I had this screenshot from earlier where I was showing Eclipse compared to compared to dat it well this",
    "start": "714079",
    "end": "720200"
  },
  {
    "text": "Java process here at the top is the enzyme subprocess okay this is the",
    "start": "720200",
    "end": "725440"
  },
  {
    "text": "enzyme subprocess and it's taking up about as much memory as Eclipse did way less CPU but about as much memory okay",
    "start": "725440",
    "end": "731920"
  },
  {
    "text": "so enim hasn't really made this problem go away in terms of process architecture anything like that what it has done is",
    "start": "731920",
    "end": "739240"
  },
  {
    "text": "it has moved the problem into a subprocess so if I open up five projects",
    "start": "739240",
    "end": "745120"
  },
  {
    "text": "inside of eclipse my memory usage will jump commen it to those five projects",
    "start": "745120",
    "end": "750560"
  },
  {
    "text": "and it will be one process image so I'll have one process image that's taking up four gigs of memory on my machine now my",
    "start": "750560",
    "end": "757720"
  },
  {
    "text": "machine has more than enough RAM to take care of that but that's still a very large process image if I do the same",
    "start": "757720",
    "end": "763519"
  },
  {
    "text": "thing with enme I'll have five different processes one for every project and now that sounds wasteful at face value but",
    "start": "763519",
    "end": "770560"
  },
  {
    "text": "think about Chrome why is Chrome fast it can't be because of memory because Firefox",
    "start": "770560",
    "end": "776920"
  },
  {
    "text": "actually uses less memory than Chrome does now so what's going on here well it's because Chrome is pushing this into",
    "start": "776920",
    "end": "784920"
  },
  {
    "text": "subprocesses subprocesses are very very very lightweight and modern operating",
    "start": "784920",
    "end": "791519"
  },
  {
    "text": "systems are heavily optimized for managing subprocesses they can page them",
    "start": "791519",
    "end": "796880"
  },
  {
    "text": "out they can page them back in they can deal with them in partiel images they can Shuffle things around so much more",
    "start": "796880",
    "end": "802000"
  },
  {
    "text": "easily than they can with giant monolithic things that are split up using threats so this is superow",
    "start": "802000",
    "end": "809880"
  },
  {
    "text": "this is super super helpful and it makes my system that much more responsive I regularly open up enzyme and I just fire",
    "start": "809880",
    "end": "815760"
  },
  {
    "text": "up like seven different instance of it and and it doesn't slow my machine down it doesn't cause me any problems at all",
    "start": "815760",
    "end": "822079"
  },
  {
    "text": "this is super super helpful it doesn't slow down jedit at all because jedit is a text editor that's a separate process",
    "start": "822079",
    "end": "829079"
  },
  {
    "text": "all of the communication with enzyme is asynchronous and so my text editing which remember is the primary thing that",
    "start": "829079",
    "end": "834959"
  },
  {
    "text": "I do my text editing is not blocked waiting for the compiler to bless my",
    "start": "834959",
    "end": "840360"
  },
  {
    "text": "source code that is really really really valuable really really really valuable",
    "start": "840360",
    "end": "847199"
  },
  {
    "text": "so what are we giving up doing things this way well we're reliant on the host editor for implementation okay so poor aan slaves",
    "start": "847199",
    "end": "854839"
  },
  {
    "text": "away on these lovely features and people never see them because I don't Implement them and uh yeah there's nothing that we",
    "start": "854839",
    "end": "862040"
  },
  {
    "start": "856000",
    "end": "856000"
  },
  {
    "text": "can do about that because enim is a subprocess enim is a server it's a",
    "start": "862040",
    "end": "867079"
  },
  {
    "text": "server that you communicate with via protocol and um you know emac provides a",
    "start": "867079",
    "end": "872160"
  },
  {
    "text": "pretty complete implementation of enzyme Jed it doesn't Jed it can't because of certain limitations Sublime Text in its",
    "start": "872160",
    "end": "878440"
  },
  {
    "text": "current uh currently evolving uh enzyme mode is uh still not complete so there's",
    "start": "878440",
    "end": "884800"
  },
  {
    "text": "work that has to be done on the editor side but this work is surprisingly minimal okay I've put probably I don't",
    "start": "884800",
    "end": "891959"
  },
  {
    "text": "know 16 to 20 manh hours into the jedit plugin for n and it implements about 70",
    "start": "891959",
    "end": "897600"
  },
  {
    "text": "to 80% of of enzymes functionality it exposes that to users 70 to 80% in 20",
    "start": "897600",
    "end": "904000"
  },
  {
    "text": "manh hours now that's including the time I took to reverse engineer the protocol",
    "start": "904000",
    "end": "909279"
  },
  {
    "text": "this talk as well as the documentation that aan has now written finally is um",
    "start": "909279",
    "end": "915040"
  },
  {
    "text": "should Empower you to do that in half the time maybe a third of the time enzy is very very very very easy to work with",
    "start": "915040",
    "end": "922360"
  },
  {
    "text": "so what sort of clients do we have out there right now it's it's editor agnostic what editors implement this well I basically already listed them",
    "start": "922360",
    "end": "928759"
  },
  {
    "start": "926000",
    "end": "926000"
  },
  {
    "text": "emac is the big one this is the reference implementation if you want to know how enzyme does something this is where you look there's an inferior",
    "start": "928759",
    "end": "935120"
  },
  {
    "text": "buffer you can pull up that gives the output of enzyme I never actually use it because I can never figure out how to",
    "start": "935120",
    "end": "940279"
  },
  {
    "text": "work with emac um I uh I reverse engineer enzyme using telnet like a boss",
    "start": "940279",
    "end": "946079"
  },
  {
    "text": "um J edit is the jedit is the client that I've been working on and uh this",
    "start": "946079",
    "end": "951639"
  },
  {
    "text": "has like one user based on downloads on GitHub uh and that I think that was me so there's um yeah nobody uses that but",
    "start": "951639",
    "end": "959519"
  },
  {
    "text": "I find it useful and it's enough that I maintain it um there's there's not a lot else that's complete right now Sublime",
    "start": "959519",
    "end": "965199"
  },
  {
    "text": "Text has a mode that's currently in under active development which is exciting because a lot of people are",
    "start": "965199",
    "end": "971240"
  },
  {
    "text": "using Sublime Text so yeah get enzyme out to the masses mads Harman has a very",
    "start": "971240",
    "end": "976560"
  },
  {
    "text": "old enzyme plugin for textmate that I don't think even works with a recent version of enzyme because the project",
    "start": "976560",
    "end": "982759"
  },
  {
    "text": "initialization is different I haven't actually tried it though um and then there's like there's like a really old jedit mode that I tried working with",
    "start": "982759",
    "end": "990199"
  },
  {
    "text": "that doesn't work and then there's um a Vim mode that's apparently in development I don't know for the most part these things are still nent but",
    "start": "990199",
    "end": "996519"
  },
  {
    "text": "they're developing quickly right there's a lot of interest in this and I hope that this talk gives you the tools you",
    "start": "996519",
    "end": "1001880"
  },
  {
    "text": "need to pull up your editor extension API and implement it because it's really easy and it will make your life that",
    "start": "1001880",
    "end": "1008360"
  },
  {
    "text": "much easier it's worth investing this time so how does enzyme work okay what",
    "start": "1008360",
    "end": "1014000"
  },
  {
    "text": "does the architecture look like how do we how do we talk to it enzyme is basically this is okay it's a layer on",
    "start": "1014000",
    "end": "1020959"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "top of a bunch of other projects uh the scolar refactoring project this is the same project that Eclipse uses to",
    "start": "1020959",
    "end": "1026880"
  },
  {
    "text": "implement its refactoring scalar form which is code formatting a feature I didn't even list because I don't touch it um and then there's the Java debugger",
    "start": "1026880",
    "end": "1034600"
  },
  {
    "text": "interface and things like this all of this sits on top of the Scala presentation compiler which is a different mode for the Scala compiler",
    "start": "1034600",
    "end": "1041720"
  },
  {
    "text": "that makes things run fast by basically skipping a whole bunch of stuff it doesn't emit code it doesn't check",
    "start": "1041720",
    "end": "1046880"
  },
  {
    "text": "things like overriding or higher kinds or anything like that basically the presentation compiler catches as many",
    "start": "1046880",
    "end": "1053120"
  },
  {
    "text": "errors as it can in 1.5 seconds and then stops it's it's not exactly like that",
    "start": "1053120",
    "end": "1058720"
  },
  {
    "text": "but you kind of get the idea um more importantly it gives a very incrementally updated so this is this",
    "start": "1058720",
    "end": "1065480"
  },
  {
    "text": "the whole concept for this was developed by Martin erki and Miles Sabin in the 28 stream to support the new version of the",
    "start": "1065480",
    "end": "1072799"
  },
  {
    "text": "Eclipse IDE so this is what the Eclipse IDE uses it's what net beans uses the intellig guys have the OWN own foreign",
    "start": "1072799",
    "end": "1079400"
  },
  {
    "text": "planet that they live on and um you know they kind of have their own thing but it's basically their version of the presentation compiler and additionally",
    "start": "1079400",
    "end": "1086520"
  },
  {
    "text": "we have Eclipse JDT which is lives under here and this is because class path management is a pain and uh there's",
    "start": "1086520",
    "end": "1093640"
  },
  {
    "text": "really no need for aan to rewrite all of that code you know eclipse is an extremely modular project it's very easy",
    "start": "1093640",
    "end": "1099280"
  },
  {
    "text": "to pull out things like this so the eclipse JDT Pro sub project that basically the parts of it that are",
    "start": "1099280",
    "end": "1105280"
  },
  {
    "text": "useful for running in headless Mode live inside of en this is also how uh en has",
    "start": "1105280",
    "end": "1111760"
  },
  {
    "text": "Java support so you can actually run it on Java files that's was that what you're going to say yeah yeah yeah um that's not supported",
    "start": "1111760",
    "end": "1119520"
  },
  {
    "text": "in jedit but it is supported in emac so if you open up Java files that are in your IGN projects yeah you have an IDE",
    "start": "1119520",
    "end": "1125720"
  },
  {
    "text": "which is pretty cool so how do we work with enzyme if you are an implementor trying to implement enzyme support in",
    "start": "1125720",
    "end": "1132559"
  },
  {
    "text": "your editor how do you do it you spawn the sub process there's a batch script and a bash script",
    "start": "1132559",
    "end": "1138880"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "inside of the enme directory that you can launch enme as a server that's the easy part um when you launch it you give",
    "start": "1138880",
    "end": "1146120"
  },
  {
    "text": "it a file this is a file that you select it's a temp file or something just throw it somewhere and um enim when it starts",
    "start": "1146120",
    "end": "1153679"
  },
  {
    "text": "up it will write it will choose a socket Port something that's available on your system and write that Port out as a",
    "start": "1153679",
    "end": "1159000"
  },
  {
    "text": "number as an asking number into that file so what you want to do is you probably want to like busy weit on that",
    "start": "1159000",
    "end": "1164679"
  },
  {
    "text": "file or something like that just hang on until a port is written into it at which point you connect to it you connect to",
    "start": "1164679",
    "end": "1171559"
  },
  {
    "text": "that port and it's literally just a raw socket and then you can throw the file away or whatever it doesn't matter um",
    "start": "1171559",
    "end": "1177039"
  },
  {
    "text": "this is usually very very quick enzyme starts remarkably fast once you have this socket set up you send s",
    "start": "1177039",
    "end": "1183799"
  },
  {
    "text": "Expressions over the socket encoded via the Swank protocol now an S expression is a lisp list so this is the whole",
    "start": "1183799",
    "end": "1190240"
  },
  {
    "text": "parentheses thing this is the foundation of lisp syntax and uh this protocol makes a lot of sense because enzymes",
    "start": "1190240",
    "end": "1196520"
  },
  {
    "text": "started you know for reporting emac it was very much inspired by slime which uses Swank um this is not an annoying",
    "start": "1196520",
    "end": "1204760"
  },
  {
    "text": "protocol to work with a lot of people have talked about like well shouldn't nign be using Json or something like",
    "start": "1204760",
    "end": "1210240"
  },
  {
    "text": "that to send things around no this is not a problem it's very very easy to work with and it's very very valuable to",
    "start": "1210240",
    "end": "1216559"
  },
  {
    "text": "be using the same protocol as emac so I highly recommend you work with this uh Swank is Swank is easy and I will",
    "start": "1216559",
    "end": "1223240"
  },
  {
    "text": "explain how to do it in a second all of the RPC calls are asynchronous this is super important when you ask time to do",
    "start": "1223240",
    "end": "1231280"
  },
  {
    "text": "something uh it will get back to you later if at all usually when it doesn't",
    "start": "1231280",
    "end": "1236960"
  },
  {
    "text": "that's a bug but it will it will get back to you later via a separate call so you just hold this socket open and you",
    "start": "1236960",
    "end": "1242840"
  },
  {
    "text": "send s Expressions down it and you can send multiple things at a time enzyme's going to cue them up using actors internally and and you just you don't",
    "start": "1242840",
    "end": "1249919"
  },
  {
    "text": "block on it do not ever ever ever block so one important feature that your editor is going to need to have enzyme",
    "start": "1249919",
    "end": "1256360"
  },
  {
    "text": "support is the ability to make these asynchronous calls to be able to send things off and then receive asynchronous",
    "start": "1256360",
    "end": "1262400"
  },
  {
    "text": "call backs and handle them appropriately to be able to preserve that state with jedit all the plugins are written in Java or in my case Scola so that's",
    "start": "1262400",
    "end": "1269159"
  },
  {
    "text": "really really easy to do with uh emac of course emac is just built on that Foundation some editors like Vim have a",
    "start": "1269159",
    "end": "1275440"
  },
  {
    "text": "harder time of it but I still think it's possible so how does Swank work this is the part that is now documented that",
    "start": "1275440",
    "end": "1282080"
  },
  {
    "start": "1280000",
    "end": "1280000"
  },
  {
    "text": "wasn't when I got started and uh I literally spent uh about 8 hours in a",
    "start": "1282080",
    "end": "1287520"
  },
  {
    "text": "tnet set sending random bits to en to see what it would do so I came up with this um well this",
    "start": "1287520",
    "end": "1295279"
  },
  {
    "text": "is actually am's documentation but here we go um what you do the the first thing",
    "start": "1295279",
    "end": "1300400"
  },
  {
    "text": "that is sent for a Swank packet Swank message is six asib byes of heximal",
    "start": "1300400",
    "end": "1307120"
  },
  {
    "text": "encoded run length Okay so this is the number 17 in heximal right here for",
    "start": "1307120",
    "end": "1312320"
  },
  {
    "text": "those of you who don't speak hex natively following that you have that many bites of of s",
    "start": "1312320",
    "end": "1319000"
  },
  {
    "text": "expression so when you are writing a reader for this what you want to do is you want to read six bytes from the",
    "start": "1319000",
    "end": "1324840"
  },
  {
    "text": "socket Channel you want to decode them as hexadecimal and then read that many bytes and parse that as an S expression",
    "start": "1324840",
    "end": "1333480"
  },
  {
    "text": "and the same thing goes for things that you send to an sign so this is the entire Swank protocol right here and obviously this this run length encoding",
    "start": "1333480",
    "end": "1340120"
  },
  {
    "text": "thing you could use with other textual contents but s expressions are what we use and they work remarkably well what",
    "start": "1340120",
    "end": "1346600"
  },
  {
    "text": "do these s Expressions look like well this is how you initialize a project this is the very very very first thing",
    "start": "1346600",
    "end": "1352480"
  },
  {
    "start": "1350000",
    "end": "1350000"
  },
  {
    "text": "you will send to an enzyme instance when you start it up uh you get one enzyme instance per project uh the project is",
    "start": "1352480",
    "end": "1359279"
  },
  {
    "text": "kind of a global notion inside of enzyme itself so you start a new enzyme subprocess per project and uh this is",
    "start": "1359279",
    "end": "1365640"
  },
  {
    "text": "the very first thing you send as soon as enme is awake right as soon as you have that socket you're just going to stuff",
    "start": "1365640",
    "end": "1370960"
  },
  {
    "text": "this down the channel and it's the init project Swank call okay the init project",
    "start": "1370960",
    "end": "1376240"
  },
  {
    "text": "Swank call takes a whole bunch of parameters that I have obviously ided for space and this is things that you're",
    "start": "1376240",
    "end": "1382279"
  },
  {
    "text": "mostly getting from the enzyme file enzyme file is generated using ant Plugin or your build tool or something",
    "start": "1382279",
    "end": "1387880"
  },
  {
    "text": "like that and it's going to have your dependency jars and your Source paths and things like that you're basically sending this to n n mass and along with",
    "start": "1387880",
    "end": "1396919"
  },
  {
    "text": "this call okay this is a pattern that you have in every Swank call is down at the end there notice there's a number at the very very end of the S expression",
    "start": "1396919",
    "end": "1403919"
  },
  {
    "text": "this is the call ID remember calls are asynchronous so needs a way to get back",
    "start": "1403919",
    "end": "1410200"
  },
  {
    "text": "to you and tell you hey remember that call you made 7 minutes ago I'm finally",
    "start": "1410200",
    "end": "1415360"
  },
  {
    "text": "done refactoring so that's that's how it will tell you that call number one is",
    "start": "1415360",
    "end": "1420400"
  },
  {
    "text": "done so the response that enme gives you is something like this return okay good no errors um project name well project",
    "start": "1420400",
    "end": "1428559"
  },
  {
    "text": "name and Source Roots this is kind of redundant now I'm not sure why n is still doing it because we already have this information in the enzyme file but",
    "start": "1428559",
    "end": "1435360"
  },
  {
    "text": "this used to be important back when enzyme did a whole bunch of of introspection using uh spt and then back",
    "start": "1435360",
    "end": "1440559"
  },
  {
    "text": "at the end there notice that call ID number one this is the call ID that we gave IGN when we said hey init the",
    "start": "1440559",
    "end": "1446760"
  },
  {
    "text": "project now it's coming back to us and it says this is your response it worked and this response could take a very long",
    "start": "1446760",
    "end": "1452600"
  },
  {
    "text": "time to happen uh so you you can't block waiting for this you have to set up a call back uh but there's more Nim is",
    "start": "1452600",
    "end": "1460080"
  },
  {
    "text": "going to tell me some other things just as a result of this init project call it's going to give me a background message that says I'm initializing the",
    "start": "1460080",
    "end": "1466440"
  },
  {
    "text": "analyzer it's going to give me an indexer ready message it's going to give me a compiler ready message these are the full s Expressions that it's sending",
    "start": "1466440",
    "end": "1473000"
  },
  {
    "text": "me so uh these are Global messages that enim basically proactively is sending",
    "start": "1473000",
    "end": "1479919"
  },
  {
    "text": "down the channel and telling me that these things are happening right this stuff is going on and you need to be",
    "start": "1479919",
    "end": "1486200"
  },
  {
    "text": "able to handle these so Nim communicates you with you not always through callbacks but sometimes with these",
    "start": "1486200",
    "end": "1491240"
  },
  {
    "text": "Global messages this is how error checking works so if you want to do type checking on a file type check on Save",
    "start": "1491240",
    "end": "1497600"
  },
  {
    "text": "which what you do is you inside your editor you register a Handler for the save action right and on the save action",
    "start": "1497600",
    "end": "1503159"
  },
  {
    "text": "you initiate a type check file call a Swank typ Tech file call off to enim and",
    "start": "1503159",
    "end": "1508919"
  },
  {
    "text": "enim gets back to you instantly and it says great okay well that doesn't actually",
    "start": "1508919",
    "end": "1514279"
  },
  {
    "text": "tell you anything it got back to you right away way faster than it could have type checked it because what it's doing",
    "start": "1514279",
    "end": "1519640"
  },
  {
    "text": "then is it's running the presentation compiler or it's running you know the eclipse Java compiler in the background",
    "start": "1519640",
    "end": "1525760"
  },
  {
    "text": "to find out what the errors are and as soon as as it finds an error in any file as it's going through them one by one it",
    "start": "1525760",
    "end": "1531399"
  },
  {
    "text": "will tell you via one of these Global messages so as soon as it hits an error it sends it off to you and it's your job",
    "start": "1531399",
    "end": "1536840"
  },
  {
    "text": "to associate that error which will be in the form of an error message a file name a line number and a column number you",
    "start": "1536840",
    "end": "1543200"
  },
  {
    "text": "have to well a column span actually you have to associate that back to where you are in the file and actually no it's not",
    "start": "1543200",
    "end": "1549760"
  },
  {
    "text": "a line number it's uh character offsets from the beginning of the file so it's begin and end my mistake anyway you have",
    "start": "1549760",
    "end": "1555840"
  },
  {
    "text": "to associate that back to where where it where the error needs to be in the file so you can display that to the user and",
    "start": "1555840",
    "end": "1560919"
  },
  {
    "text": "you're just going to be getting these calls out of the blue so you have to be ready at any time to handle an error",
    "start": "1560919",
    "end": "1567279"
  },
  {
    "text": "message coming from enim that says error in this file displayed to user please right and you're going to get a whole",
    "start": "1567279",
    "end": "1572559"
  },
  {
    "text": "bunch of these if you've got a bad user who's writing invalid source files um so what is uh what does the future of",
    "start": "1572559",
    "end": "1578799"
  },
  {
    "text": "enzyme look like good um first class",
    "start": "1578799",
    "end": "1584039"
  },
  {
    "text": "debugging has been uh kind of the main priority for a while now and uh Nim as I mentioned earlier aan",
    "start": "1584039",
    "end": "1590720"
  },
  {
    "text": "has been working on reimplementing the debugging which used to be just like controlling a jdb subprocess that was",
    "start": "1590720",
    "end": "1596440"
  },
  {
    "start": "1594000",
    "end": "1594000"
  },
  {
    "text": "horrible um reimplementing it on top of jndi which is the Java native debugging interface that basically every IDE Under",
    "start": "1596440",
    "end": "1603399"
  },
  {
    "text": "the Sun is using so this will give you things like you know call stack and",
    "start": "1603399",
    "end": "1608919"
  },
  {
    "text": "current frames and local values and things like that uh I'll giving you the full debugger functionality that you",
    "start": "1608919",
    "end": "1615640"
  },
  {
    "text": "would normally expect from your IDE you could get that inside of emac and if I find the time inside of J edit so this",
    "start": "1615640",
    "end": "1622880"
  },
  {
    "text": "is pretty cool this is like the one thing that people miss going to a pure text editor is being able to do this",
    "start": "1622880",
    "end": "1630039"
  },
  {
    "text": "debugging uh Source jar indexing this is something that people always like in in",
    "start": "1630039",
    "end": "1636360"
  },
  {
    "text": "various idees right where you can do things like um look up the source of java langing string just by open type",
    "start": "1636360",
    "end": "1643320"
  },
  {
    "text": "that sort of thing uh in memory buffers uh this I thought I mentioned this in the imitation slide but basically",
    "start": "1643320",
    "end": "1649360"
  },
  {
    "text": "because enzyme is a subprocess it works on files it doesn't work on buffers the",
    "start": "1649360",
    "end": "1655000"
  },
  {
    "text": "buffer is the thing in the memory that may be not saved yet right it's something that you're editing at the current time and this is sometimes",
    "start": "1655000",
    "end": "1661519"
  },
  {
    "text": "annoying because you know a lot of times you want enzyme functionality on a dirty buffer",
    "start": "1661519",
    "end": "1668159"
  },
  {
    "text": "something you haven't saved something that doesn't appearer to a file yet so um emac does some really dirty tricks to",
    "start": "1668159",
    "end": "1675519"
  },
  {
    "text": "save files out when you ask for things like you're doing doing content assist right type type type type type type type dot right your buffer is dirty emac has",
    "start": "1675519",
    "end": "1682000"
  },
  {
    "text": "to save it jit actually has some really nice functionality that very elegantly solves this problem and so um but you",
    "start": "1682000",
    "end": "1688440"
  },
  {
    "text": "know it's a hack and and it would be much nicer if if enim were able to synchronize in memory buffers back and",
    "start": "1688440",
    "end": "1696039"
  },
  {
    "text": "forth and that's on the horizon stability and performance there's a lot of bugs in in enzyme uh mostly inherited",
    "start": "1696039",
    "end": "1703640"
  },
  {
    "text": "from the presentation compiler which has a ridiculous number of bugs um and",
    "start": "1703640",
    "end": "1709159"
  },
  {
    "text": "editors okay more more more more more more editors okay Aman has put a",
    "start": "1709159",
    "end": "1715519"
  },
  {
    "text": "ridiculous amount of work into this he's done work that we don't have to do now we can take advantage of all of this in",
    "start": "1715519",
    "end": "1722559"
  },
  {
    "text": "any editor and an a editor that is capable of spawning a sub process and",
    "start": "1722559",
    "end": "1727600"
  },
  {
    "text": "sending these asynchronous RPC calls we can get advantage of IDE like functionality so crack open your",
    "start": "1727600",
    "end": "1734320"
  },
  {
    "text": "editor's SDK do this like you know make it work this is all the tools you need",
    "start": "1734320",
    "end": "1739360"
  },
  {
    "text": "there's more information on uh Aman's website I have source code for the jet",
    "start": "1739360",
    "end": "1744440"
  },
  {
    "text": "plugin and the enzy sidekick stuff the enzyme sidekick the jet plugin by the way is written I apologize I didn't know",
    "start": "1744440",
    "end": "1749840"
  },
  {
    "text": "the slides were going to be this slow um the enzyme Sidekick is written entirely in Scala and it has about I don't know",
    "start": "1749840",
    "end": "1756519"
  },
  {
    "text": "60 to 70% of a full enzyme client inside of uh written in Scala so you can very",
    "start": "1756519",
    "end": "1763320"
  },
  {
    "text": "very easily look at that for Source implementation so if if anyone has any questions we have 47 seconds",
    "start": "1763320",
    "end": "1771120"
  },
  {
    "text": "left oh we have 5 minutes we have 5 minutes and 43 seconds so uh does",
    "start": "1771120",
    "end": "1777360"
  },
  {
    "text": "anybody have any questions why why aren't the idees using enzyme as backend um so there are",
    "start": "1777360",
    "end": "1786000"
  },
  {
    "text": "downsides to using enzyme like I said the the inmemory buffer things and things like that and when you're an ID",
    "start": "1786000",
    "end": "1791760"
  },
  {
    "text": "generally you have a lot of infrastructure already in place for doing a lot of this stuff a good example",
    "start": "1791760",
    "end": "1797480"
  },
  {
    "text": "is the eclipse plugin so the eclipse plugin doesn't the eclipse plugin for Scala doesn't bundle a separate instance",
    "start": "1797480",
    "end": "1803600"
  },
  {
    "text": "of eclipse JDT it it uses eclipses JDT through some",
    "start": "1803600",
    "end": "1809600"
  },
  {
    "text": "very evil mechanisms um to get at that uh net beans uses its uses the net beans",
    "start": "1809600",
    "end": "1815480"
  },
  {
    "text": "Java support so uh the advantage to an IDE is that you've got these things that are fully integrated so if you have an",
    "start": "1815480",
    "end": "1821840"
  },
  {
    "text": "eclipse project for an eclipse Scola project that depends on an eclipse Java project you can use open type from",
    "start": "1821840",
    "end": "1828279"
  },
  {
    "text": "within the eclipse Scala project and open files inside of the Java project you wouldn't be able to do that very",
    "start": "1828279",
    "end": "1833799"
  },
  {
    "text": "easily if enzy were the back end uh so there are there are things that you lose this way just to be clear",
    "start": "1833799",
    "end": "1840399"
  },
  {
    "text": "EC right right yeah so eclipse is using the presentation compiler net beans is",
    "start": "1840399",
    "end": "1845440"
  },
  {
    "text": "using the presentation compiler for its scholar support um the difference is that Eclipse will first run the",
    "start": "1845440",
    "end": "1851039"
  },
  {
    "text": "presentation compiler and we'll be running the presentation compiler constantly basically to keep its uh ADT",
    "start": "1851039",
    "end": "1856880"
  },
  {
    "text": "up to to date it's it's as up to date but when you save a file in Eclipse it will also Run the official compiler and",
    "start": "1856880",
    "end": "1863240"
  },
  {
    "text": "so this is why there will be spous errors that show up inside of n sign or",
    "start": "1863240",
    "end": "1869480"
  },
  {
    "text": "or occasionally inside of uh net beans particularly relating to path dependent types and things like that um that you",
    "start": "1869480",
    "end": "1875679"
  },
  {
    "text": "just won't get inside of eclipse because Eclipse immediately overrides those errors with the official compiler which",
    "start": "1875679",
    "end": "1881320"
  },
  {
    "text": "doesn't have those problems so yeah so the the some of the infrastructure is",
    "start": "1881320",
    "end": "1886679"
  },
  {
    "text": "Unified refactoring and scalariform are also used by Eclipse okay nurman is cutting me off so if you have more",
    "start": "1886679",
    "end": "1892919"
  },
  {
    "text": "questions later see me afterwards thank [Applause]",
    "start": "1892919",
    "end": "1901539"
  },
  {
    "text": "[Music] you",
    "start": "1901630",
    "end": "1909200"
  }
]