[
  {
    "start": "0",
    "end": "198000"
  },
  {
    "text": "[Music]",
    "start": "430",
    "end": "8120"
  },
  {
    "text": "part of it so let's um start off with why hopefully you guys are here what you",
    "start": "8120",
    "end": "13200"
  },
  {
    "text": "can hope to get out of this and then we'll talk about what you will actually be able to get out of this so one is you",
    "start": "13200",
    "end": "18920"
  },
  {
    "text": "know you may want to Simply understand how Android works specifically you want to understand for example how intents or",
    "start": "18920",
    "end": "24760"
  },
  {
    "text": "messenger or content providers or system services or access to system services or",
    "start": "24760",
    "end": "30039"
  },
  {
    "text": "security or how life cycle callbacks are implemented as you will see all of that actually happens over binder you may",
    "start": "30039",
    "end": "36520"
  },
  {
    "text": "simply want to understand how binder itself works because it's an interesting IPC framework um or you simply want to",
    "start": "36520",
    "end": "42879"
  },
  {
    "text": "take advantage of binder and essentially have a more direct IPC U um essentially",
    "start": "42879",
    "end": "48920"
  },
  {
    "text": "connectivity across a suite of applications you guys may be creating um",
    "start": "48920",
    "end": "54120"
  },
  {
    "text": "and you know you may just have nothing better to do so that's why you're here but hopefully um we'll go over some of",
    "start": "54120",
    "end": "60800"
  },
  {
    "text": "these objectives so we'll go over what binder is what IPC is very briefly advantages of binder compared to other",
    "start": "60800",
    "end": "67479"
  },
  {
    "text": "forms of IPC um comparing binder to other forms like actually on Android forms like intents and content providers",
    "start": "67479",
    "end": "74680"
  },
  {
    "text": "and messenger and whatnot um some brief intro to binder terminology because we'll kind of come across it over over",
    "start": "74680",
    "end": "80880"
  },
  {
    "text": "and over again the communication model the Discovery Model aidl kind of a way",
    "start": "80880",
    "end": "86640"
  },
  {
    "text": "of describing Services you will see how the object reference mapping Works uh we're going to talk about binder through",
    "start": "86640",
    "end": "93000"
  },
  {
    "text": "essentially an example application or or client Ser service applications we're going to talk about asynchronous nature",
    "start": "93000",
    "end": "98600"
  },
  {
    "text": "of binder memory sharing some limitations with respect to binder uh",
    "start": "98600",
    "end": "104320"
  },
  {
    "text": "security um we'll talk about some other features like death notification and Reporting as well now just a little bit",
    "start": "104320",
    "end": "111880"
  },
  {
    "text": "actually before I talk about you know who am I and why I'm qualified to talk about this I just wanted to tell you",
    "start": "111880",
    "end": "117200"
  },
  {
    "text": "that there's a lot of information and binder in particular is one of those topics where we can go very very wide or",
    "start": "117200",
    "end": "122680"
  },
  {
    "text": "we can go very very deep and unfortunately we have an hour and what 15 minutes so we're not going to be able",
    "start": "122680",
    "end": "128399"
  },
  {
    "text": "to you know do both well do my best to go over everything now I'm not going to expect to have you guys read all the",
    "start": "128399",
    "end": "135519"
  },
  {
    "text": "slides or to even necessarily go over every Point whenever all those slides so think of slides as a as a resource that",
    "start": "135519",
    "end": "141239"
  },
  {
    "text": "you can go through later on on your own um but let's focus on more important Concepts and hopefully we'll touch upon",
    "start": "141239",
    "end": "147640"
  },
  {
    "text": "the ones that are in fact more important and you know not necessarily touch upon everything that's in the in the slides",
    "start": "147640",
    "end": "153920"
  },
  {
    "text": "so in terms of who I am I I go by name of Alexander garant or nick name was Sasha I happen to be a one of the",
    "start": "153920",
    "end": "160519"
  },
  {
    "text": "Android instructors at Morana uh we focus on open source training but I",
    "start": "160519",
    "end": "165879"
  },
  {
    "text": "specifically focus on Android or even more so internals of Android and as you can imagine Android binder is very you",
    "start": "165879",
    "end": "172480"
  },
  {
    "text": "know core part of that I also happen to run the San Francisco Android User Group Java user group I also uh co-host or Co",
    "start": "172480",
    "end": "179879"
  },
  {
    "text": "founded the HTML file user group I speak at other conferences and whatnot um I used to actually do a lot of Enterprise",
    "start": "179879",
    "end": "186720"
  },
  {
    "text": "Java development prior to coming to Android um but I also worked on you know old school mobile technologies like you",
    "start": "186720",
    "end": "193480"
  },
  {
    "text": "know W portion MMS and SMS and that sort of stuff so anyway that's about me now",
    "start": "193480",
    "end": "199599"
  },
  {
    "start": "198000",
    "end": "357000"
  },
  {
    "text": "what is binder we just kind of go over the basics and then we'll talk about why we needed so binder itself is",
    "start": "199599",
    "end": "207280"
  },
  {
    "text": "essentially a think of it as a framework it's not just an IPC you know mechanism but it's more of a framework um that",
    "start": "207280",
    "end": "214599"
  },
  {
    "text": "enables us to develop essentially an objectoriented OS like experience now",
    "start": "214599",
    "end": "220720"
  },
  {
    "text": "we're not talking about an objectoriented kernel we're talking about enabling essentially an",
    "start": "220720",
    "end": "226760"
  },
  {
    "text": "object-oriented service environment on top of traditional kernels like Linux",
    "start": "226760",
    "end": "233159"
  },
  {
    "text": "and as you will see binder itself is obviously split across the entire stack you know the core of it being the binder",
    "start": "233159",
    "end": "239159"
  },
  {
    "text": "driver is in the kernel itself and traditionally well actually I should just tell you a little bit about you know the history of binder um binder",
    "start": "239159",
    "end": "246239"
  },
  {
    "text": "comes from open binder which was originally designed at BOS it was supposed to be part of their you know",
    "start": "246239",
    "end": "252640"
  },
  {
    "text": "next generation release back in the day um BOS was then or being was acquired by",
    "start": "252640",
    "end": "258000"
  },
  {
    "text": "Palm uh it was then essentially firstly implemented as part of the Cobalt release of palm uh on first their",
    "start": "258000",
    "end": "264960"
  },
  {
    "text": "micronel then Palm switch to Linux it was it got ported to Linux as well",
    "start": "264960",
    "end": "270479"
  },
  {
    "text": "um and at some point 2005ish um Diane hegor was basically she",
    "start": "270479",
    "end": "276720"
  },
  {
    "text": "was one of the uh key contributors to binder she was snap by by Google and um",
    "start": "276720",
    "end": "282120"
  },
  {
    "text": "kind of brought into the Android team and so Android uh the very first release of Android was in fact based on open",
    "start": "282120",
    "end": "288199"
  },
  {
    "text": "binder I should say the very first bring up of Android but then very quickly it got Rewritten from scratch uh to",
    "start": "288199",
    "end": "294479"
  },
  {
    "text": "essentially suit the Android's needs now open binder and binder somewhat related in terms of the concepts the terminology",
    "start": "294479",
    "end": "301759"
  },
  {
    "text": "but they are distinct think of binder as a fork of open binder and open binder is more or less dead in terms of future you",
    "start": "301759",
    "end": "308160"
  },
  {
    "text": "know development now why we're here is because binder is essential to Android",
    "start": "308160",
    "end": "313919"
  },
  {
    "text": "as you will see and in fact if you focus on just this image over here let me actually zoom in like this these are by",
    "start": "313919",
    "end": "319199"
  },
  {
    "text": "the way SVG Graphics so if you're you're trying to access this over say iie you",
    "start": "319199",
    "end": "324319"
  },
  {
    "text": "may have trouble um so this basically gives you an idea that in Android we",
    "start": "324319",
    "end": "329800"
  },
  {
    "text": "have the kernel at the bottom we have bunch of namas like service manager media server system server surface",
    "start": "329800",
    "end": "335560"
  },
  {
    "text": "flinger you might have heard of these things and then we have applications in fact these as you can see right from",
    "start": "335560",
    "end": "341080"
  },
  {
    "text": "this diagram all run in separate processes and that was one of the you know Core Concepts behind in fact IPC on",
    "start": "341080",
    "end": "346919"
  },
  {
    "text": "Android and because of that binder is essentially used as a transport",
    "start": "346919",
    "end": "351960"
  },
  {
    "text": "mechanism to enable this sort of architecture and we'll see exactly why this is needed so what is IPC so IPC is",
    "start": "351960",
    "end": "360280"
  },
  {
    "start": "357000",
    "end": "437000"
  },
  {
    "text": "essentially a you know framework for exchange of signals if if you will and data across multiple processes or",
    "start": "360280",
    "end": "365800"
  },
  {
    "text": "threads but in this case we're going to focus on processes it is really used for message passing synchronization sharing",
    "start": "365800",
    "end": "371759"
  },
  {
    "text": "memory or you know essentially RPC or remote procedure calls um now we",
    "start": "371759",
    "end": "377680"
  },
  {
    "text": "specifically what we get out of IPC we get information sharing we get modularization of our code we get",
    "start": "377680",
    "end": "384360"
  },
  {
    "text": "isolation of the processes which leads to better security models better stability models and whatnot um because",
    "start": "384360",
    "end": "391319"
  },
  {
    "text": "essentially every process runs in its own sandbox memory space so if you were to misbehave or say die because it's",
    "start": "391319",
    "end": "397880"
  },
  {
    "text": "poorly written it doesn't affect anything else in the system um there are many IPC options that we could have been",
    "start": "397880",
    "end": "404319"
  },
  {
    "text": "using on Android like for example files you know signals sockets you know Unix",
    "start": "404319",
    "end": "409840"
  },
  {
    "text": "sockets or TCP I sockets pipes um shared memories semaphor message passing like",
    "start": "409840",
    "end": "415479"
  },
  {
    "text": "message cues debus um and then of course on Android we use intents as a form of",
    "start": "415479",
    "end": "421759"
  },
  {
    "text": "IPC uh as you will see they themselves are based on on binder and then the binder right so Android as you will see",
    "start": "421759",
    "end": "429639"
  },
  {
    "text": "mostly most of it is most of IPC is based on binder with some of the lowlevel IPC being based on sockets now",
    "start": "429639",
    "end": "437680"
  },
  {
    "start": "437000",
    "end": "545000"
  },
  {
    "text": "why specifically binder so basically Android apps Android from the get-go was",
    "start": "437680",
    "end": "443160"
  },
  {
    "text": "designed so that its apps and applications sorry Services I should say",
    "start": "443160",
    "end": "448960"
  },
  {
    "text": "system services running separate processes and this as I mentioned before buys us security buys us stability buys",
    "start": "448960",
    "end": "455639"
  },
  {
    "text": "us memory management so for example as you guys know in Android if an application is no longer needed what",
    "start": "455639",
    "end": "461639"
  },
  {
    "text": "happens it's literally it process is killed so we can't really do that if that application is embedded inside of",
    "start": "461639",
    "end": "467280"
  },
  {
    "text": "another process we cannot just easily kill it whereas Linux takes care of all the cleanup for us um so by stability as",
    "start": "467280",
    "end": "474479"
  },
  {
    "text": "already mentioned if an application misbehaves it doesn't affect anything else and that also is important for security perspective now IPC is a great",
    "start": "474479",
    "end": "483080"
  },
  {
    "text": "way of providing these features but the problem is the traditional system 5 based or postic based IPC isn't",
    "start": "483080",
    "end": "489520"
  },
  {
    "text": "supported on Android so there's no support for semaphor shared memory uh message cues and so on forth now why not",
    "start": "489520",
    "end": "496720"
  },
  {
    "text": "well one of the one of the actual reasons is something you can read more about here in fact you can see a proof",
    "start": "496720",
    "end": "502120"
  },
  {
    "text": "of concept the system 5 IPC is prone to Resource leakage in case applications",
    "start": "502120",
    "end": "508159"
  },
  {
    "text": "don't properly clean off clean up after themselves so specifically if an applic two say two applications were to share a",
    "start": "508159",
    "end": "514279"
  },
  {
    "text": "semaphor and one of them were to get killed the other one may in fact end up being dead blocked or end up you know",
    "start": "514279",
    "end": "520360"
  },
  {
    "text": "the OS resource May in fact end up being just left in the kernel and never cleaned up um and in Android it's",
    "start": "520360",
    "end": "526560"
  },
  {
    "text": "actually not uncommon for an application to die without cleaning up after itself in fact that is one of the models that",
    "start": "526560",
    "end": "532880"
  },
  {
    "text": "Android uses to essentially manage memory right the low memory killer environment so that is you know that",
    "start": "532880",
    "end": "538800"
  },
  {
    "text": "alone gives a reason to think of a different solution than the traditional IPC mechanisms that are available so how",
    "start": "538800",
    "end": "545560"
  },
  {
    "start": "545000",
    "end": "879000"
  },
  {
    "text": "is binder better well one of the features of binder is that it has object reference counting built into it and",
    "start": "545560",
    "end": "551920"
  },
  {
    "text": "something called Death notification so these two features plus others make it very suitable to environments where",
    "start": "551920",
    "end": "559120"
  },
  {
    "text": "things just go boom for no particular reason basically they die without their knowledge so this makes binder basically",
    "start": "559120",
    "end": "567160"
  },
  {
    "text": "you know address the very concerns of system five based IPC in addition to that we have a much neater programming",
    "start": "567160",
    "end": "575760"
  },
  {
    "text": "model so some some people refer to it as thread migration meaning when you are invoking an operation in a remote object",
    "start": "575760",
    "end": "584160"
  },
  {
    "text": "the you know in Ideal World it will appear to you as the programmer that that object is local you will not know",
    "start": "584160",
    "end": "590920"
  },
  {
    "text": "that essentially the the operation May execute elsewhere so it you will not even feel this being so much an IPC",
    "start": "590920",
    "end": "597360"
  },
  {
    "text": "you'll just get a reference you'll a method and magically things work as opposed to you having to worry about",
    "start": "597360",
    "end": "603200"
  },
  {
    "text": "threading having to worry about lowlevel file descriptors messaging you know",
    "start": "603200",
    "end": "608320"
  },
  {
    "text": "buffers and whatnot so it'll appear like your thread jumps to another process and",
    "start": "608320",
    "end": "613399"
  },
  {
    "text": "continues executing your you know the method you invoked on the other process this is very very important binder",
    "start": "613399",
    "end": "619440"
  },
  {
    "text": "actually makes this possible through a couple of things for example it can it manages thread pools for us on the",
    "start": "619440",
    "end": "626120"
  },
  {
    "text": "remote side so the remote side actually is implemented just by the virtual callbacks as opposed to having to manage",
    "start": "626120",
    "end": "631360"
  },
  {
    "text": "any threading or synchronization or anything like that and the remote methods essentially feel like I said",
    "start": "631360",
    "end": "637760"
  },
  {
    "text": "they're local um that said Android also supports or binder also supports what's what's known as asynchronous operations",
    "start": "637760",
    "end": "644760"
  },
  {
    "text": "where it'll invoke an operation and then just simply return right away without waiting for the remote site to complete",
    "start": "644760",
    "end": "651399"
  },
  {
    "text": "and this is actually very important in some cases um couple of other features we get automatic um essentially I should",
    "start": "651399",
    "end": "658839"
  },
  {
    "text": "I should say information about the sender is automatically embedded in the messages sent between the parties communicating so the receiver can",
    "start": "658839",
    "end": "665079"
  },
  {
    "text": "actually use this information to say query who the sender is and based on that decide whether or not the sender",
    "start": "665079",
    "end": "670120"
  },
  {
    "text": "should be permitted to execute the operation they want to execute and this actually very core to how Android does security as we will see later on um also",
    "start": "670120",
    "end": "678040"
  },
  {
    "text": "we also have the support for um unique object mapping across process boundaries so for example if I go and you know um",
    "start": "678040",
    "end": "685560"
  },
  {
    "text": "create an object that I want others to be able to REM remotely reference I can pass that object to some other process",
    "start": "685560",
    "end": "692040"
  },
  {
    "text": "that other process can then pass that object or that reference to yet another process and that other process can still",
    "start": "692040",
    "end": "697399"
  },
  {
    "text": "use it that object is essentially the reference to that that object is unique unique across the entire system okay and",
    "start": "697399",
    "end": "705079"
  },
  {
    "text": "Androids bind their driver takes care of rewriting essentially as you will see the references as necessary to make",
    "start": "705079",
    "end": "711680"
  },
  {
    "text": "local references become remote references when they cross object or process boundaries um we'll talk about",
    "start": "711680",
    "end": "719279"
  },
  {
    "text": "this idea of tokens and whatnot later on um binder also supports this idea of sending file descriptors across process",
    "start": "719279",
    "end": "725760"
  },
  {
    "text": "boundaries and this is actually very important on Android to avoid memory copies so for example on Android when",
    "start": "725760",
    "end": "731760"
  },
  {
    "text": "you're let's say uh displaying something to screen to a back buffer you're not writing to your own memory and then",
    "start": "731760",
    "end": "738199"
  },
  {
    "text": "giving that memory to surface flinger so by copy so surface flinger can go and display it onto the on the essentially",
    "start": "738199",
    "end": "743920"
  },
  {
    "text": "the the frame buffer rather the surface linger gives you a buffer as a file descript to refer that you can memory",
    "start": "743920",
    "end": "750079"
  },
  {
    "text": "map you write into it and then you signal to the surface flinger that you're done surface flinger takes that",
    "start": "750079",
    "end": "755880"
  },
  {
    "text": "buffer and says okay this represents the B the bits you want me to display on the screen let's go into it um all along you",
    "start": "755880",
    "end": "762120"
  },
  {
    "text": "essentially are writing into memory that is managed by the kernel or even accessible to the to the display stack",
    "start": "762120",
    "end": "768519"
  },
  {
    "text": "directly so this is very important because without it we would have had to essentially copy memory around and",
    "start": "768519",
    "end": "774240"
  },
  {
    "text": "binder makes this possible uh also supports the invoc essentially very much",
    "start": "774240",
    "end": "779720"
  },
  {
    "text": "actually actually go back a few things it has a very simple aidl based language or interface definition language to make",
    "start": "779720",
    "end": "786959"
  },
  {
    "text": "it fairly simple to describe services to their clients it has built-in support for marshalling of very common data",
    "start": "786959",
    "end": "793959"
  },
  {
    "text": "types so you don't have to worry about how how do I write an INT should it be you know this bite order or that by",
    "start": "793959",
    "end": "799920"
  },
  {
    "text": "order you just don't think about these things or how do I write strings across a proc process boundaries um one thing I",
    "start": "799920",
    "end": "805680"
  },
  {
    "text": "should mention is that binder doesn't favor a binder driver as you will see doesn't favor languages so you can your",
    "start": "805680",
    "end": "811600"
  },
  {
    "text": "your clients and or your services could be written in Java C or C++ it doesn't matter the the the semantics are the",
    "start": "811600",
    "end": "818480"
  },
  {
    "text": "same um there's built-in support for many common data types the transaction model is basically a simplified by",
    "start": "818480",
    "end": "825880"
  },
  {
    "text": "autogenerated stops and proxies that I'll show you later on it supports automatic recursion across processes so",
    "start": "825880",
    "end": "832120"
  },
  {
    "text": "you can process it can call Process B which can then call back into process a and they can essentially do recursion",
    "start": "832120",
    "end": "838360"
  },
  {
    "text": "and the if a process a were to call what it thinks is a remote object but it",
    "start": "838360",
    "end": "843480"
  },
  {
    "text": "happens to live inside a process a so it's not remote binder short circuits the whole thing and it just essentially",
    "start": "843480",
    "end": "848560"
  },
  {
    "text": "calls it you know locally so there's absolutely zero overhead now that said binder is not an RPC it's not about",
    "start": "848560",
    "end": "855240"
  },
  {
    "text": "remote procedure call so it does not escape the system on which it is running so the actual transactions are limited",
    "start": "855240",
    "end": "861839"
  },
  {
    "text": "to the same OS um and it is client service based uh messaging oriented so",
    "start": "861839",
    "end": "867880"
  },
  {
    "text": "basically there's not very well suited suited for things like streaming um and is not defined by any sort of apis like",
    "start": "867880",
    "end": "875480"
  },
  {
    "text": "posix or standards so that gives you hopefully an idea of why binder now you",
    "start": "875480",
    "end": "881600"
  },
  {
    "text": "might have been already doing IPC before and you may think well why do I care about binder I already know how to use",
    "start": "881600",
    "end": "886839"
  },
  {
    "text": "intents and in fact intents content providers are a simple form of IPC on",
    "start": "886839",
    "end": "892360"
  },
  {
    "text": "Android that most applications are encouraged to use anyway so for example if you consider this diagram over here",
    "start": "892360",
    "end": "898639"
  },
  {
    "text": "you could have have an application a with say a broadcast receiver application B with an activity application C with another activity some",
    "start": "898639",
    "end": "906040"
  },
  {
    "text": "application with a service another application with the content provider and so these in fact can talk to each other using either intents and or um",
    "start": "906040",
    "end": "915279"
  },
  {
    "text": "essentially content providers are more direct access uh to to to the other components Now isn't this IPC and it it",
    "start": "915279",
    "end": "923079"
  },
  {
    "text": "it is in fact this is like I said the the recommended approach for most applications but it is somewhat Limited",
    "start": "923079",
    "end": "929800"
  },
  {
    "text": "um specifically it's not very objectoriented you're sending intent intent is just a payload that contains",
    "start": "929800",
    "end": "936240"
  },
  {
    "text": "the information about what what you want to have done and kind of the you know the parameters of of that intention um",
    "start": "936240",
    "end": "943399"
  },
  {
    "text": "it is very asynchronous so basically when you're making calls to remote side",
    "start": "943399",
    "end": "948639"
  },
  {
    "text": "you are you don't really you know you don't know when or even if that call is going to be uh uh completed and it's",
    "start": "948639",
    "end": "955839"
  },
  {
    "text": "kind of the way you use it is slightly clunky now content providers are more synchronous but the problem with content",
    "start": "955839",
    "end": "961560"
  },
  {
    "text": "providers is they do not you know they have a fixed API so you're really limited to to the model they force on",
    "start": "961560",
    "end": "968160"
  },
  {
    "text": "you um ultimately all of it is based on on binder so all of the communication in",
    "start": "968160",
    "end": "974000"
  },
  {
    "text": "Android it is intent and or content provider based underneath the hood if you were to look through the Android",
    "start": "974000",
    "end": "979440"
  },
  {
    "text": "source code you would actually see that ultimately all boils down to binder um so why do we care about binder if this",
    "start": "979440",
    "end": "987120"
  },
  {
    "text": "is available well if you want to have low latency you know synchronous execution where you can you get to",
    "start": "987120",
    "end": "992759"
  },
  {
    "text": "Define your own apis you're not constrained by essentially the the clunkiness of intense Andro content providers if that's not what you know",
    "start": "992759",
    "end": "999160"
  },
  {
    "text": "essentially Maps well to what you're trying to do then binder is a more direct approach to IPC that's why we're",
    "start": "999160",
    "end": "1005199"
  },
  {
    "text": "going to look at it now in terms of how intents work this is kind of you know just a you know short example so if",
    "start": "1005199",
    "end": "1012440"
  },
  {
    "text": "let's say you had an activity they wanted to do a product lookup Say by scanning a barcode but it doesn't want",
    "start": "1012440",
    "end": "1017839"
  },
  {
    "text": "to do the scanning of the bar because it's a hard thing to do well what he may do is create an intent and ask for",
    "start": "1017839",
    "end": "1023440"
  },
  {
    "text": "example the Google barcode scanner to do the scanning so it would create an intent specify you know who's supposed",
    "start": "1023440",
    "end": "1030319"
  },
  {
    "text": "to handle the intent specify a parameter of the intent send the intent that intent goes to say the barcod scanning",
    "start": "1030319",
    "end": "1037120"
  },
  {
    "text": "activity which then goes and asks you know turns on the camera that does whatever it needs to do and then it some",
    "start": "1037120",
    "end": "1043079"
  },
  {
    "text": "point in the future it goes and saves the contents of say the you know barcode",
    "start": "1043079",
    "end": "1049480"
  },
  {
    "text": "that's devil scan into some result then the that content that result comes back",
    "start": "1049480",
    "end": "1056039"
  },
  {
    "text": "via an as synchronous callback and if the code and the result are what the",
    "start": "1056039",
    "end": "1061799"
  },
  {
    "text": "application or the client expects the client can pick up the you know essential response data again from this",
    "start": "1061799",
    "end": "1068520"
  },
  {
    "text": "coming you know this intent and then say do an actual IPC lookup or something like that or UPC Lookout so this works",
    "start": "1068520",
    "end": "1077000"
  },
  {
    "text": "but it's somewhat clunky like I said it's a synchronous the apis are somewhat you know not always intuitive to use",
    "start": "1077000",
    "end": "1084280"
  },
  {
    "text": "another form of IPC on Android that you might have come across which also works with with intents is this idea of a",
    "start": "1084280",
    "end": "1090679"
  },
  {
    "text": "messenger so a messenger basically is a reference to a Handler in a remote",
    "start": "1090679",
    "end": "1097559"
  },
  {
    "text": "object so you guys are hopefully familiar with handlers if you're not you know well look him up or from you're not",
    "start": "1097559",
    "end": "1103919"
  },
  {
    "text": "going to have the time to go over it but basically the idea is is a Handler is a a a a hand onto a message CU which the",
    "start": "1103919",
    "end": "1111200"
  },
  {
    "text": "local Looper thread goes and reads from and processes messages to do something with it so for example let's say you",
    "start": "1111200",
    "end": "1118039"
  },
  {
    "text": "wanted to build an application it's probably better to just for me to explain it by an example say you had an application that wants to request a",
    "start": "1118039",
    "end": "1124559"
  },
  {
    "text": "remote service do a download of some I don't know some URLs and some data and",
    "start": "1124559",
    "end": "1130080"
  },
  {
    "text": "then send it back you know progress information about how the data is being downloaded right so you want to get a stream of of callbacks from the remote",
    "start": "1130080",
    "end": "1137760"
  },
  {
    "text": "Service as it's doing the download for you well one way you can do this is for example to create an application that",
    "start": "1137760",
    "end": "1144159"
  },
  {
    "text": "creates an intent again intent um in the intent specify the Uris you want to have",
    "start": "1144159",
    "end": "1149679"
  },
  {
    "text": "downloaded and then create essentially a messenger which wraps a Handler the",
    "start": "1149679",
    "end": "1155320"
  },
  {
    "text": "Handler is where you're going to get your call backs so you then let's say start a service what happens then is on",
    "start": "1155320",
    "end": "1162360"
  },
  {
    "text": "the other side this is the kind of the service assuming in another process you would handle that intent again again",
    "start": "1162360",
    "end": "1168880"
  },
  {
    "text": "we're back to intent based communication and then what you can do is you can Loop through all the Uris presumably do the",
    "start": "1168880",
    "end": "1174159"
  },
  {
    "text": "download and when you download the URI you can then go and get the messager",
    "start": "1174159",
    "end": "1179240"
  },
  {
    "text": "from the intent so notice we just send the intent across process boundaries you know using essentially the simple IPC",
    "start": "1179240",
    "end": "1186080"
  },
  {
    "text": "mechanism once you have that messenger you can obtain messages put the data you",
    "start": "1186080",
    "end": "1191760"
  },
  {
    "text": "want you know to respond back to the client into that message well into a b into a bundle then into a message and",
    "start": "1191760",
    "end": "1198320"
  },
  {
    "text": "then you send that message once that message is oops you send a message once that message is sent on the other side",
    "start": "1198320",
    "end": "1206159"
  },
  {
    "text": "back in the client the client essentially inside of its Handler gets the message it then extracts the data",
    "start": "1206159",
    "end": "1213159"
  },
  {
    "text": "that it got and then presumably let's say updates a progress bar or does whatever something useful with that so",
    "start": "1213159",
    "end": "1219280"
  },
  {
    "text": "they're essentially same you know ultimately all of this is still based on binder underneath the hood this completely works on binder but it gives",
    "start": "1219280",
    "end": "1226200"
  },
  {
    "text": "you a more synchronous you know communic channel it's not quite synchronous because what happens is that when the",
    "start": "1226200",
    "end": "1232080"
  },
  {
    "text": "messenger receive receives a message it receives it on one thread but it then drops it onto the message view of the",
    "start": "1232080",
    "end": "1237760"
  },
  {
    "text": "Handler through the Handler on another thread the UI thread where the message gets handled so a lot of this you know a",
    "start": "1237760",
    "end": "1244120"
  },
  {
    "text": "lot of decisions are you know taken away from you and you essentially you know just use the API and it fits your needs",
    "start": "1244120",
    "end": "1250640"
  },
  {
    "text": "or it doesn't but that's about all you have now that's those are the options if",
    "start": "1250640",
    "end": "1256000"
  },
  {
    "start": "1253000",
    "end": "1487000"
  },
  {
    "text": "you don't want to use binder like those are abstractions of binder B if you will now let's say we do want to use binder",
    "start": "1256000",
    "end": "1261960"
  },
  {
    "text": "you maybe you're sold on the idea of binder we need to kind of go over first of all a few terms that we're going to",
    "start": "1261960",
    "end": "1268200"
  },
  {
    "text": "encounter for the rest of the talk first of all binder refer binder itself refers to a lot of things when I when I say",
    "start": "1268200",
    "end": "1274760"
  },
  {
    "text": "binder often times refer to the binder framework which includes the binder",
    "start": "1274760",
    "end": "1280720"
  },
  {
    "text": "driver which exists inside of the kernel and it's accessible through essentially an i octal based API if you don't know",
    "start": "1280720",
    "end": "1288039"
  },
  {
    "text": "what that means don't worry um the binder protocol which is essentially how we communicate with the driver and",
    "start": "1288039",
    "end": "1295120"
  },
  {
    "text": "ibinder interface which essentially defines the basic set of methods that you can invoke on any binder object okay",
    "start": "1295120",
    "end": "1304200"
  },
  {
    "text": "aidl is a interface definition language we'll talk about in more detail in a moment which allows us to Define our",
    "start": "1304200",
    "end": "1311080"
  },
  {
    "text": "business operations on top of the a ideal interface because sorry the the ibinder interface because ibinder",
    "start": "1311080",
    "end": "1316679"
  },
  {
    "text": "interface is very generic we whole idea of using binder so we can Define our own apis binder objects are implementations",
    "start": "1316679",
    "end": "1324760"
  },
  {
    "text": "or basic implementations of ibinder interfaces but they don't have any business value they don't actually do",
    "start": "1324760",
    "end": "1330919"
  },
  {
    "text": "anything other than represent the remote object sometimes they use this tokens to essentially Define who the client is and",
    "start": "1330919",
    "end": "1338039"
  },
  {
    "text": "I'll show you why this is interesting but on their own they don't actually are not really meant for IPC per se because",
    "start": "1338039",
    "end": "1345120"
  },
  {
    "text": "they don't really have any operations that we know of uh by default a binder token is essentially a handle",
    "start": "1345120",
    "end": "1351240"
  },
  {
    "text": "onto a binder object that's at least how we think of it binder service the binder service is a binder object except that",
    "start": "1351240",
    "end": "1358559"
  },
  {
    "text": "it typically implements some sort of an aidl based you know interface so it",
    "start": "1358559",
    "end": "1363840"
  },
  {
    "text": "implements you know the business operations that we care about that's what we actually want to use as clients most of the time binder client is the",
    "start": "1363840",
    "end": "1371760"
  },
  {
    "text": "side actually wanting to make this binder invocation or this binder transaction uh so you want to take",
    "start": "1371760",
    "end": "1377880"
  },
  {
    "text": "advantage of of the services offered by the binder service by the transaction is",
    "start": "1377880",
    "end": "1383520"
  },
  {
    "text": "essentially you can think of it as a method invocation so every time we invoke our remote method we're essentially submitting a what's known as",
    "start": "1383520",
    "end": "1390000"
  },
  {
    "text": "a binder transaction um which can be synchronous or asynchronous if it's synchronous it comes back with a reply",
    "start": "1390000",
    "end": "1396600"
  },
  {
    "text": "as we will see Parcels are basically the data structure that um that essentially",
    "start": "1396600",
    "end": "1404840"
  },
  {
    "text": "contains our parameters that we send in binder transaction and the returns and the return values we",
    "start": "1404840",
    "end": "1411240"
  },
  {
    "text": "receive from binder transactions um as you will see at the end of the day Parcels are nothing more than glorified",
    "start": "1411240",
    "end": "1417039"
  },
  {
    "text": "B arays with a metadata attached to them um but they are very key to kind of how",
    "start": "1417039",
    "end": "1422080"
  },
  {
    "text": "we send data across the binder channel marshalling is a mechanism of converting",
    "start": "1422080",
    "end": "1427679"
  },
  {
    "text": "essentially say Rich Java data types that you want to send to the other side two Parcels so that they can be then",
    "start": "1427679",
    "end": "1434640"
  },
  {
    "text": "boiled down to something that binder understands and unmarshaling is the the reverse process you basically unflatten",
    "start": "1434640",
    "end": "1440880"
  },
  {
    "text": "you go go take a parcel which is very generic and you read from it the data and you reconstruct the original",
    "start": "1440880",
    "end": "1447279"
  },
  {
    "text": "parameters that say the client wanted to send to the service the proxy and stub",
    "start": "1447279",
    "end": "1453240"
  },
  {
    "text": "are in some cases automatically generated specifically to help with partialing sorry with marshalling and",
    "start": "1453240",
    "end": "1459520"
  },
  {
    "text": "unmarshaling as well as transaction invocation that is something that will be autogenerated for us if we use Java",
    "start": "1459520",
    "end": "1465480"
  },
  {
    "text": "for example because Java has slight slight advantage over C++ in this department and then finally the context",
    "start": "1465480",
    "end": "1471320"
  },
  {
    "text": "manager or some of you might have seen it as service manager is a special binder object with a well-known address",
    "start": "1471320",
    "end": "1478600"
  },
  {
    "text": "that helps us discover other binder objects so that is the the starting point for all binder communication",
    "start": "1478600",
    "end": "1484720"
  },
  {
    "text": "getting access to the service manager as we will see so those are just the terms you have a",
    "start": "1484720",
    "end": "1490720"
  },
  {
    "start": "1487000",
    "end": "1929000"
  },
  {
    "text": "question sure for for any scenario",
    "start": "1490720",
    "end": "1500080"
  },
  {
    "text": "yes yes so we'll talk about custom marshalling and marshalling so out of the out of the box binder supports",
    "start": "1502360",
    "end": "1508360"
  },
  {
    "text": "marshalling and un marshalling for many common data types as you will see like Maps lists Primitives and whatnot but if",
    "start": "1508360",
    "end": "1515000"
  },
  {
    "text": "you had a custom data type say some class of type Fu you could go and Define",
    "start": "1515000",
    "end": "1520320"
  },
  {
    "text": "how that class gets essentially Marshal and unmarshal think of it as a Java serialization can on",
    "start": "1520320",
    "end": "1528639"
  },
  {
    "text": "so you can it works across complicated data structures as you said however you",
    "start": "1536279",
    "end": "1541880"
  },
  {
    "text": "know only if the all of the elements of the data structure are in fact Marshal",
    "start": "1541880",
    "end": "1547000"
  },
  {
    "text": "by default otherwise you have to end up doing the marshalling yourself we'll get to that when we discuss a ID but good",
    "start": "1547000",
    "end": "1553440"
  },
  {
    "text": "questions now we get to the kind of how does binder actually work okay so we",
    "start": "1553440",
    "end": "1558679"
  },
  {
    "text": "understand that binderies hopefully we understand binder is used everywhere okay we really the entire Android system",
    "start": "1558679",
    "end": "1564840"
  },
  {
    "text": "would literally fall apart if we were to yank binder away simply because all of the communication across all",
    "start": "1564840",
    "end": "1570240"
  },
  {
    "text": "applications two system Services um and across you know other application boundaries happens over",
    "start": "1570240",
    "end": "1575760"
  },
  {
    "text": "binder you wouldn't be able to draw a single Pixel on the screen if there was no binder right so ultimately when we",
    "start": "1575760",
    "end": "1583720"
  },
  {
    "text": "talk about IPC generally the client just wants to use a service right that's kind of what they want you have a client",
    "start": "1583720",
    "end": "1589880"
  },
  {
    "text": "process you have a service process each have their own threads in this case I'm kind of assuming binder has one sorry",
    "start": "1589880",
    "end": "1595640"
  },
  {
    "text": "the client has one thread the service may have many and you want to make make a you know remote remote invocation",
    "start": "1595640",
    "end": "1601559"
  },
  {
    "text": "unfortunately or fortunately you can one process cannot just randomly invoke an",
    "start": "1601559",
    "end": "1606720"
  },
  {
    "text": "operation another process or read or write its memory it's you know out of out of its essentially it's just not not",
    "start": "1606720",
    "end": "1613080"
  },
  {
    "text": "allowed simply because of the sandboxing that Linux kernel enforces but the kernel can do this",
    "start": "1613080",
    "end": "1618840"
  },
  {
    "text": "which is why we need the binder driver so ultimately this is what it typically looks like you know as you will see a",
    "start": "1618840",
    "end": "1625679"
  },
  {
    "text": "service that wants to be invoked by remote clients will generally make",
    "start": "1625679",
    "end": "1631200"
  },
  {
    "text": "requests to the binder driver and wait enter essentially a looping mode where",
    "start": "1631200",
    "end": "1636320"
  },
  {
    "text": "it waits to receive requests from the binder driver it will essentially create a pool of threads waiting for requests",
    "start": "1636320",
    "end": "1644240"
  },
  {
    "text": "at that point some like in the future a client will submit a request they will submit request not to the service",
    "start": "1644240",
    "end": "1649320"
  },
  {
    "text": "because he can't but to the driver the driver will somehow convert that request",
    "start": "1649320",
    "end": "1654600"
  },
  {
    "text": "from what the client wanted to submit into what the service is expecting propagate it over to the service at that",
    "start": "1654600",
    "end": "1660440"
  },
  {
    "text": "point what one of those threads one of these threads that was blocked will unblock handle the request produce some",
    "start": "1660440",
    "end": "1667799"
  },
  {
    "text": "sort of a reply the reply will be sent back to the binder at that point that thread will go back to waiting for the",
    "start": "1667799",
    "end": "1674720"
  },
  {
    "text": "next request and the reply will then go back to the client now how does the",
    "start": "1674720",
    "end": "1679840"
  },
  {
    "text": "client get a reply well the original request that the client submitted was essentially submitted to the binder as a",
    "start": "1679840",
    "end": "1686200"
  },
  {
    "text": "blocking I octal call so all along while the service was doing its thing the client was waiting essentially on the",
    "start": "1686200",
    "end": "1692440"
  },
  {
    "text": "binder driver at the end of the request the binder gets a response at that point",
    "start": "1692440",
    "end": "1697720"
  },
  {
    "text": "the binder can or doesn't have to go back to the binder to do more things but",
    "start": "1697720",
    "end": "1703080"
  },
  {
    "text": "the service will go back to being blocked on the binder waiting for new requests now",
    "start": "1703080",
    "end": "1708760"
  },
  {
    "text": "because and this kind of these three lines are meant to indicate that there could be more than you know one thread in fact by default binder supports up to",
    "start": "1708760",
    "end": "1715760"
  },
  {
    "text": "15 concurrent threads on every process and so what that means is that there could be many concurrent clients talking",
    "start": "1715760",
    "end": "1722760"
  },
  {
    "text": "to the service at the same time and it will be up to the service to ensure that it's protecting its state from",
    "start": "1722760",
    "end": "1728799"
  },
  {
    "text": "concurrent modification right so the same old threading you know paradigms apply here as well now the actual driver",
    "start": "1728799",
    "end": "1736399"
  },
  {
    "text": "is exposed through a simple SL debinder handle or node and has simple API fairly",
    "start": "1736399",
    "end": "1743320"
  },
  {
    "text": "simple for drivers open release pole M and memory map flush and more most",
    "start": "1743320",
    "end": "1748799"
  },
  {
    "text": "importantly I octal so how does it actually work well every and this is the most important kind of command against",
    "start": "1748799",
    "end": "1754880"
  },
  {
    "text": "the binder driver most of the commands are an ioctl this is a special system call for communicating to drivers in",
    "start": "1754880",
    "end": "1761320"
  },
  {
    "text": "Linux where after you opened a binder driver so you have a file descriptor you",
    "start": "1761320",
    "end": "1766640"
  },
  {
    "text": "pass to it this read write command and you pass to it a pointer to this memory",
    "start": "1766640",
    "end": "1772159"
  },
  {
    "text": "which is of type bind the read write bind the read write are two buffer arrays um of particular size well the",
    "start": "1772159",
    "end": "1779840"
  },
  {
    "text": "first one has its size defined the second one will have its size defined and you essentially pass that to the binder driver what does the binder",
    "start": "1779840",
    "end": "1787039"
  },
  {
    "text": "driver do the binder driver goes through this right buffer and he goes and reads",
    "start": "1787039",
    "end": "1792519"
  },
  {
    "text": "from it the commands you are trying to submit to the binder driver there could be many commands like for example this",
    "start": "1792519",
    "end": "1798480"
  },
  {
    "text": "you know you can say um I want to watch some object for death notification or I want to increment a reference to",
    "start": "1798480",
    "end": "1804720"
  },
  {
    "text": "something or I want to decrement a reference and so on and so on but the last command generally is a transaction",
    "start": "1804720",
    "end": "1810480"
  },
  {
    "text": "command that's the the one that you care about like well everything you care about but that's kind of the juicy one",
    "start": "1810480",
    "end": "1816720"
  },
  {
    "text": "when the we'll talk about the transaction in a moment when the binder returns from say it actually invoked a",
    "start": "1816720",
    "end": "1824080"
  },
  {
    "text": "command on the other side it got the reply from the other side and now binder comes back to you so basically the",
    "start": "1824080",
    "end": "1829760"
  },
  {
    "text": "binder turns right here at that point the read buffer will contain couple of",
    "start": "1829760",
    "end": "1836080"
  },
  {
    "text": "things more bookkeeping commands for you to do work from that binder driver tells you to and then the the last part is a",
    "start": "1836080",
    "end": "1843960"
  },
  {
    "text": "reply either the reply to the original request you submitted which was the thing over here or another request for",
    "start": "1843960",
    "end": "1851679"
  },
  {
    "text": "you to go and perform because like I said binder can support recursion across processing now",
    "start": "1851679",
    "end": "1858559"
  },
  {
    "text": "what's inside of these transactions so every transaction so that's that's what you know that's the last request so",
    "start": "1858559",
    "end": "1864080"
  },
  {
    "text": "every transaction will contain a binder token that is the thing that identifies",
    "start": "1864080",
    "end": "1869320"
  },
  {
    "text": "which actual object inside of that remote process you want to talk to and as you will see each and every one of",
    "start": "1869320",
    "end": "1874519"
  },
  {
    "text": "these binder tokens are unique across the entire system okay so that essentially think of it as a as a memory",
    "start": "1874519",
    "end": "1881399"
  },
  {
    "text": "address of an object that you don't know which process it lives in okay you then",
    "start": "1881399",
    "end": "1887039"
  },
  {
    "text": "specify code now code is just an integer but as you will see code is essentially",
    "start": "1887039",
    "end": "1892240"
  },
  {
    "text": "a um a designator of the method you want the remote site to to execute now it is",
    "start": "1892240",
    "end": "1898600"
  },
  {
    "text": "up to the client and service to agree on what code really represents binder doesn't care but generally it's used to designate a method within that object",
    "start": "1898600",
    "end": "1905760"
  },
  {
    "text": "and it's just an integer starting from like one um you then include the raw data buffer that includes the data that",
    "start": "1905760",
    "end": "1912320"
  },
  {
    "text": "you wanted to copy to the other side in binder almost everything is sent by copy with a few ctions as we'll talk about",
    "start": "1912320",
    "end": "1919159"
  },
  {
    "text": "and finally the transaction will include your sender P ID and U ID that's the information you actually can't change",
    "start": "1919159",
    "end": "1925159"
  },
  {
    "text": "that's kind of the information that gets automatically embedded by the driver and this is in ed for secure reasons as you will see got a",
    "start": "1925159",
    "end": "1931590"
  },
  {
    "start": "1929000",
    "end": "2269000"
  },
  {
    "text": "[Music]",
    "start": "1931590",
    "end": "1934640"
  },
  {
    "text": "question absolutely not do that right well not even so so I I thank",
    "start": "1939600",
    "end": "1946960"
  },
  {
    "text": "you for bringing the up I should have given this a little disclaimer this part you absolutely don't have to worry about",
    "start": "1946960",
    "end": "1952960"
  },
  {
    "text": "this is us talking to the colonel this is me going down to the very very very low level of the binder driver which you",
    "start": "1952960",
    "end": "1959679"
  },
  {
    "text": "will never encounter unless you are actually working on some lowlevel code which most of you I'm assuming are not",
    "start": "1959679",
    "end": "1966120"
  },
  {
    "text": "and this is more of an FYI feel free to ignore if you want to snooze for five minutes feel free to do so um so in fact",
    "start": "1966120",
    "end": "1973480"
  },
  {
    "text": "which brings me to the next interesting point most lowlevel operations so so we talked about this raw data buffer well",
    "start": "1973480",
    "end": "1980039"
  },
  {
    "text": "we don't want to think in terms of raw data buffer we actually want to think in terms of these Parcels we've now back to",
    "start": "1980039",
    "end": "1985559"
  },
  {
    "text": "parcel think of a parcel is essentially a glorified bite array with metadata attached to it and we actually don't",
    "start": "1985559",
    "end": "1991320"
  },
  {
    "text": "want to know anything about these transactions because they're too low level that's the part of the binder",
    "start": "1991320",
    "end": "1996519"
  },
  {
    "text": "protocol so most of the applications written in or user Space codes written in C++ or C uses what's known as live",
    "start": "1996519",
    "end": "2003440"
  },
  {
    "text": "binder that's what does that work on its behalf now it's in fact in Android even",
    "start": "2003440",
    "end": "2010519"
  },
  {
    "text": "system services and definitely application developers really don't want to know anything about the B about the",
    "start": "2010519",
    "end": "2015799"
  },
  {
    "text": "binder protocol they they didn't want to know anything about transactions and bite the race and they don't even want to know anything about Li binder so in",
    "start": "2015799",
    "end": "2022519"
  },
  {
    "text": "most cases all of that work is abstracted away from us through something known as proxies and stubs so",
    "start": "2022519",
    "end": "2031080"
  },
  {
    "text": "now what's a proxy we kind of explained it already but let me kind of explain it here in the context of this diagram so",
    "start": "2031080",
    "end": "2036440"
  },
  {
    "text": "when a client wants to talk to service what it you typically does it submits a an objectoriented request a method",
    "start": "2036440",
    "end": "2043519"
  },
  {
    "text": "invocation against what it thinks is a service but in fact is a proxy we'll see how the client gets fooled the proxy",
    "start": "2043519",
    "end": "2050358"
  },
  {
    "text": "then submits a request through jni and live binder to the binder driver the binder driver submits a request or",
    "start": "2050359",
    "end": "2058040"
  },
  {
    "text": "returns I should say back to not the service but to what's known as a stub stub receiv that receives that",
    "start": "2058040",
    "end": "2064960"
  },
  {
    "text": "transaction from the binder driver the stub goes and converts what was lowlevel",
    "start": "2064960",
    "end": "2070599"
  },
  {
    "text": "binder request or transaction into what is now an objectoriented request excuse",
    "start": "2070599",
    "end": "2076398"
  },
  {
    "text": "me and then invokes it on the service so basically here we're object oriented and",
    "start": "2076399",
    "end": "2081638"
  },
  {
    "text": "here we're object oriented but in between you know right between these two",
    "start": "2081639",
    "end": "2086919"
  },
  {
    "text": "lines we're very very low level right so proxy and the stop completely Shield us",
    "start": "2086919",
    "end": "2091960"
  },
  {
    "text": "from knowledge that this is actually even happening when the service submits a response that resp B is going to be an",
    "start": "2091960",
    "end": "2098480"
  },
  {
    "text": "object because you are objectoriented developers and that object is not something you want to really even know",
    "start": "2098480",
    "end": "2103920"
  },
  {
    "text": "how to write down into Parcels so the stub will invoke the appropriate methods to Marshall the response back into what",
    "start": "2103920",
    "end": "2111560"
  },
  {
    "text": "is essentially suitable for binder the parcel the binder driver will pass that",
    "start": "2111560",
    "end": "2116760"
  },
  {
    "text": "object or that I should say parcel through the binder driver over into the proxy the pro will now unmarshal it back",
    "start": "2116760",
    "end": "2124440"
  },
  {
    "text": "into the object representation of what the service returned and now the client gets the response so basically this over",
    "start": "2124440",
    "end": "2131680"
  },
  {
    "text": "here is what the client cares about this is what the service cares about that everything in between is completely you",
    "start": "2131680",
    "end": "2138320"
  },
  {
    "text": "can ignore and you can still benefit from binder now one thing that I haven't",
    "start": "2138320",
    "end": "2143839"
  },
  {
    "text": "explain is how does the client even get a reference to the service right so this is all very nice but how how do I",
    "start": "2143839",
    "end": "2149839"
  },
  {
    "text": "actually get started I mean this kind of implies that the client knows which service he wants to talk to and this is",
    "start": "2149839",
    "end": "2155599"
  },
  {
    "text": "where we use what's known as a context manager or binder calls it a context manager but actually as a user space",
    "start": "2155599",
    "end": "2161400"
  },
  {
    "text": "process it's called a service manager so how does that work actually sorry I just",
    "start": "2161400",
    "end": "2167000"
  },
  {
    "text": "jumped a little bit I skipped one one section let's let me just go back one one diagram before I talk about the",
    "start": "2167000",
    "end": "2173000"
  },
  {
    "text": "service manager in fact most clients don't even",
    "start": "2173000",
    "end": "2178400"
  },
  {
    "text": "want to know anything about Services especially when it comes to system services for example most of you I would",
    "start": "2178400",
    "end": "2183839"
  },
  {
    "text": "assume has have written applications that used activity manager prep package manager location manager sensor manager",
    "start": "2183839",
    "end": "2190440"
  },
  {
    "text": "notification manager search manager download manager and the list goes on guess what all of those managers live",
    "start": "2190440",
    "end": "2196000"
  },
  {
    "text": "inside of another process how did you talk to them through binder did you know that you talk to them through binder did",
    "start": "2196000",
    "end": "2201319"
  },
  {
    "text": "you know of any proxies probably not what you did is you said get system service and you got something would",
    "start": "2201319",
    "end": "2207119"
  },
  {
    "text": "appear to do what you wanted to do how does that work well what happens is that when it comes to Specialty system",
    "start": "2207119",
    "end": "2212760"
  },
  {
    "text": "Services what you're actually given as a client developer you're given what what is known as an manager so manager is",
    "start": "2212760",
    "end": "2220280"
  },
  {
    "text": "actually a another proxy that completely Shields you from the knowledge of binder",
    "start": "2220280",
    "end": "2226240"
  },
  {
    "text": "so you don't even have to know about the actual proxy and you don't have to know about the lookup of how you find the",
    "start": "2226240",
    "end": "2233480"
  },
  {
    "text": "objects you want to talk to and you don't have to worry about any low-level binder specific exceptions you just use",
    "start": "2233480",
    "end": "2240119"
  },
  {
    "text": "it to you your location manager feels like a local object and it is a local",
    "start": "2240119",
    "end": "2245520"
  },
  {
    "text": "object but what it's doing underneath the hood it's invok a proxy which is invoking through binder a remote service",
    "start": "2245520",
    "end": "2251520"
  },
  {
    "text": "so in Android for most Services you will have manager and a service so for",
    "start": "2251520",
    "end": "2257599"
  },
  {
    "text": "example there will be activity manager activity manager service location manager location manager service the",
    "start": "2257599",
    "end": "2263599"
  },
  {
    "text": "service is the remote part the manager is the local part that completely hides the binder complexity from you now",
    "start": "2263599",
    "end": "2270920"
  },
  {
    "start": "2269000",
    "end": "2509000"
  },
  {
    "text": "coming back to this idea of Discovery how do we find the thing that we want to talk to again if you're just using",
    "start": "2270920",
    "end": "2276000"
  },
  {
    "text": "system services this is magically you know hidden from you but if you are say interested in how that works well",
    "start": "2276000",
    "end": "2282440"
  },
  {
    "text": "let me kind of go through it so when binder is loaded early on by the colonel",
    "start": "2282440",
    "end": "2288640"
  },
  {
    "text": "the the thing that it awaits is a registration from what it thinks or ref first as a context manager context",
    "start": "2288640",
    "end": "2295079"
  },
  {
    "text": "manager basically is a special binder object at position or handle zero okay",
    "start": "2295079",
    "end": "2301760"
  },
  {
    "text": "some known address it's kind of like think of it as 411 everyone knows to D 411 if they need to find out somebody's",
    "start": "2301760",
    "end": "2308480"
  },
  {
    "text": "number I guess who who dials anymore gu everyone else go to Google they need to search for something right it's burnt",
    "start": "2308480",
    "end": "2314000"
  },
  {
    "text": "into our memory that's how you know handle zero is burnt into everyone's memory so what happens early on this",
    "start": "2314000",
    "end": "2321119"
  },
  {
    "text": "context manager in Android is called the system service sorry service manager",
    "start": "2321119",
    "end": "2326319"
  },
  {
    "text": "registers with binder the binder says okay good to go then the context manager",
    "start": "2326319",
    "end": "2331640"
  },
  {
    "text": "goes to binder says okay I'm going to wait for you to give me requests at some point in the future our service comes",
    "start": "2331640",
    "end": "2338040"
  },
  {
    "text": "and registers with the bind sorry our service goes to the binder driver and says hey binder driver I want to wait",
    "start": "2338040",
    "end": "2344440"
  },
  {
    "text": "requests from you then the service goes through its service manager proxy which",
    "start": "2344440",
    "end": "2350319"
  },
  {
    "text": "is yet another proxy which is part of this and it goes and says hey I want to find out where this manager is like he",
    "start": "2350319",
    "end": "2356800"
  },
  {
    "text": "actually wants to talk to it so now the service becomes a client for this and this context manager becomes a service",
    "start": "2356800",
    "end": "2363280"
  },
  {
    "text": "why does he want to talk to it well and let's actually talk about how he gets it once it says I want to talk to it this",
    "start": "2363280",
    "end": "2369359"
  },
  {
    "text": "the binder driver says I know where that is I'm going to give you address to the to the service manager then the service",
    "start": "2369359",
    "end": "2376240"
  },
  {
    "text": "goes over here and says Okay I want to register with it so it submits another request through binder which goes to service manager service manager says I'm",
    "start": "2376240",
    "end": "2383440"
  },
  {
    "text": "going to allow you to register your you with me and then the binder driver goes and says back to the service proxy and",
    "start": "2383440",
    "end": "2390000"
  },
  {
    "text": "back to Services okay I registered you why is this necessary well this is how",
    "start": "2390000",
    "end": "2395319"
  },
  {
    "text": "Services essentially make themselves available to clients so if any of you",
    "start": "2395319",
    "end": "2401000"
  },
  {
    "text": "have ever done whoops sorry uh",
    "start": "2401000",
    "end": "2407200"
  },
  {
    "text": "this ADB shell service list you will see that there's",
    "start": "2407200",
    "end": "2414040"
  },
  {
    "text": "something like in this case 57 services that are registered by name of a",
    "start": "2414040",
    "end": "2420400"
  },
  {
    "text": "particular implementation with a service manager so it's just a table okay this",
    "start": "2420400",
    "end": "2426280"
  },
  {
    "text": "is how you basically discover your Ser system Services starting from activity",
    "start": "2426280",
    "end": "2431960"
  },
  {
    "text": "manager which is needed for everything the client that now wants to talk to the service like the ultimately the client",
    "start": "2431960",
    "end": "2437960"
  },
  {
    "text": "wants to talk to this service but how does he get to it well the first thing it does it says okay let's get to the",
    "start": "2437960",
    "end": "2444440"
  },
  {
    "text": "binder and ask the binder to give us the address of the context manager binder",
    "start": "2444440",
    "end": "2449560"
  },
  {
    "text": "replies and then we go to the context manager and then we say okay give us the address of the service and then the the",
    "start": "2449560",
    "end": "2457319"
  },
  {
    "text": "all goes back to the client at that point the client has access to the remote service okay so the context",
    "start": "2457319",
    "end": "2463280"
  },
  {
    "text": "manager is this essentially registration process that lives in between and handles all the lookups and and storage",
    "start": "2463280",
    "end": "2469680"
  },
  {
    "text": "of the or you know essentially these key value pairs this is the thing I",
    "start": "2469680",
    "end": "2474880"
  },
  {
    "text": "mentioned about the service list now this diagram kind of goes into more",
    "start": "2474880",
    "end": "2480319"
  },
  {
    "text": "detail on how this all works I'm not going to go through all these steps you can kind of read it on your own the idea",
    "start": "2480319",
    "end": "2485720"
  },
  {
    "text": "is you know here's some sort of service that you know goes and registers registers itself with the Serv context",
    "start": "2485720",
    "end": "2491680"
  },
  {
    "text": "manager it goes in basically starts listening on the binder driver here's a client the client submits a request goes",
    "start": "2491680",
    "end": "2497800"
  },
  {
    "text": "through a proxy through lib binder to the driver wakes up the you know the other side lip binder goes back to stuff",
    "start": "2497800",
    "end": "2503400"
  },
  {
    "text": "goes to service service replies and so on and so on so essentially just recaptures what we talked about I'm not going to go over it again now in terms",
    "start": "2503400",
    "end": "2510720"
  },
  {
    "text": "of just making this feel a little more tangible here's an example of how location works on Android some of you",
    "start": "2510720",
    "end": "2517640"
  },
  {
    "text": "might have seen the slide before I've kind of given this in my one of my previous talks this is essentially how location services work on Android here",
    "start": "2517640",
    "end": "2524680"
  },
  {
    "text": "is an application say that wants to access get access to its say last known",
    "start": "2524680",
    "end": "2529920"
  },
  {
    "text": "location on the device what it will do is it will as the system for a location",
    "start": "2529920",
    "end": "2535720"
  },
  {
    "text": "manager location service and what he'll get is a location manager when he gets a",
    "start": "2535720",
    "end": "2540880"
  },
  {
    "text": "location manager well the location manager needs to talk to the remote service so what does the location manager do the location manager goes",
    "start": "2540880",
    "end": "2547559"
  },
  {
    "text": "down to the colonel and says or to the driver and says Hey Driver who is your context manager and he gets reference to",
    "start": "2547559",
    "end": "2553040"
  },
  {
    "text": "this then the location manager goes to the service manager says Hey service manager where's the location",
    "start": "2553040",
    "end": "2560079"
  },
  {
    "text": "service and now the service manager replies now how would a service manager know where the location service is well",
    "start": "2560079",
    "end": "2567280"
  },
  {
    "text": "inside of the system server which got started early on during the system boot one of the things that happened is that",
    "start": "2567280",
    "end": "2573240"
  },
  {
    "text": "this thing called system server created instantiated the location man manager service location manager service is one",
    "start": "2573240",
    "end": "2579440"
  },
  {
    "text": "of those binder Services what it did is it then basically initialized bunch of",
    "start": "2579440",
    "end": "2585480"
  },
  {
    "text": "its providers and other things which are you know not important to us but then the loc the system server went to the",
    "start": "2585480",
    "end": "2591920"
  },
  {
    "text": "service manager and says hey service manager would you be so kind to remember this location service under the term",
    "start": "2591920",
    "end": "2598319"
  },
  {
    "text": "location that's it service manager says yes and from this point forward anyone can talk to the location service",
    "start": "2598319",
    "end": "2603559"
  },
  {
    "text": "assuming they know to search for it by location and that's what you'll see over here if I go back here and I you know",
    "start": "2603559",
    "end": "2610160"
  },
  {
    "text": "search for location you will see shows up somewhere here",
    "start": "2610160",
    "end": "2616558"
  },
  {
    "text": "location there we go so that is the location service okay anyway so that's I",
    "start": "2619319",
    "end": "2626359"
  },
  {
    "text": "don't want to go into details of the how the rest of it works it's not even important I just kind of wanted to tell you that this is in fact how you know",
    "start": "2626359",
    "end": "2633319"
  },
  {
    "text": "most Services work there are some exceptions some services use you know like for example phone application uses",
    "start": "2633319",
    "end": "2639839"
  },
  {
    "start": "2635000",
    "end": "2795000"
  },
  {
    "text": "Unix sockets to talk to the radio radio Damon but outside of a few exceptions like that almost all communication",
    "start": "2639839",
    "end": "2646400"
  },
  {
    "text": "happens over binder now I mentioned that Services binder objects are useless on their own they need to have business",
    "start": "2646400",
    "end": "2652520"
  },
  {
    "text": "operations well how are those business business operations methods described to the clients well we use a language",
    "start": "2652520",
    "end": "2659359"
  },
  {
    "text": "called aidl this language stands for Android definition language and it's similar to other idls you might have",
    "start": "2659359",
    "end": "2665400"
  },
  {
    "text": "seen like Corine and whatnot but obviously simpler it looks and feels like Java for those of you that know",
    "start": "2665400",
    "end": "2671160"
  },
  {
    "text": "Java so shouldn't really come as a surprise so let's say you wanted to create a new service you want to define a new service for the clients to use you",
    "start": "2671160",
    "end": "2677680"
  },
  {
    "text": "start off by thinking of what you want to call your service and you typically you know call it I some name of the",
    "start": "2677680",
    "end": "2683520"
  },
  {
    "text": "service service. aidl just a common naming convention you stick that Ser that file inside of the AI sorry inside",
    "start": "2683520",
    "end": "2690480"
  },
  {
    "text": "of the source directory and you package it like any other Java Source inside of",
    "start": "2690480",
    "end": "2695520"
  },
  {
    "text": "that you go and Define the service notice that the service has a package name space very much like Java would it",
    "start": "2695520",
    "end": "2702880"
  },
  {
    "text": "can import what appear to be Java classes and it defines an interface like Java would and inside of it has one or",
    "start": "2702880",
    "end": "2711040"
  },
  {
    "text": "more methods which look and feel like Java methods what's different from java is that this is all by default public",
    "start": "2711040",
    "end": "2717480"
  },
  {
    "text": "there's no public or private or protected or of obviously no Statics and",
    "start": "2717480",
    "end": "2722680"
  },
  {
    "text": "one of the other things is that these these parameters appear to have these special Flags which we'll talk about in",
    "start": "2722680",
    "end": "2728400"
  },
  {
    "text": "a moment now once you do this one of the things that Android's ADT or developer",
    "start": "2728400",
    "end": "2734880"
  },
  {
    "text": "tools what automatically do is they will extract from this file a Java class and",
    "start": "2734880",
    "end": "2741760"
  },
  {
    "text": "store it into a gen directory they clipse uses a command called aidl which",
    "start": "2741760",
    "end": "2746880"
  },
  {
    "text": "is built into the SDK assuming your aidl file is correct if it's not you may not",
    "start": "2746880",
    "end": "2751920"
  },
  {
    "text": "even see errors it just may not ever create a file what is this inter now Java class have well this Java class is",
    "start": "2751920",
    "end": "2758640"
  },
  {
    "text": "a proper Java interface which has the same name as the original file and it",
    "start": "2758640",
    "end": "2763720"
  },
  {
    "text": "also defines the very same methods that your original interface defined but now these are Java methods in addition to",
    "start": "2763720",
    "end": "2770480"
  },
  {
    "text": "that it has internally a stub and a proxy we'll come back to them and kind",
    "start": "2770480",
    "end": "2776440"
  },
  {
    "text": "of talk about what they do in you know or take a look at the details of what they do in a moment but they get",
    "start": "2776440",
    "end": "2782319"
  },
  {
    "text": "autogenerated if your clients Andor services are using C++ then you don't have an aidl tool that creates C++ code",
    "start": "2782319",
    "end": "2789400"
  },
  {
    "text": "for you at least not by default you have to end up essentially creating your proxies and stops your own on your own",
    "start": "2789400",
    "end": "2795319"
  },
  {
    "start": "2795000",
    "end": "3172000"
  },
  {
    "text": "now what are the types to come back to your question so what are the things you can actually put into um parameters and",
    "start": "2795319",
    "end": "2802200"
  },
  {
    "text": "return values for these methods you define using ADL well you can obviously pass in any nulls but that's not a type",
    "start": "2802200",
    "end": "2808480"
  },
  {
    "text": "you can just pass a all um you can put any Primitives and arrays of Primitives you can put Char sequences and strings",
    "start": "2808480",
    "end": "2815160"
  },
  {
    "text": "which are internally passed to C++ as utf16 you can pass file descriptors this",
    "start": "2815160",
    "end": "2821400"
  },
  {
    "text": "is actually what I said earlier key to being able to pass pointers to memory",
    "start": "2821400",
    "end": "2826960"
  },
  {
    "text": "areas or memory structures from one process to another this is how memory sharing Works in Android one process",
    "start": "2826960",
    "end": "2832880"
  },
  {
    "text": "gets a handle onto a memory block whether it comes from the kernel or it's internally managed doesn't matter or",
    "start": "2832880",
    "end": "2839200"
  },
  {
    "text": "it's actually a real file on this but it has a file descriptor to it it can then take the file descriptor write it into a",
    "start": "2839200",
    "end": "2845520"
  },
  {
    "text": "parcel and send it via essentially the binder channel to the other side the",
    "start": "2845520",
    "end": "2850599"
  },
  {
    "text": "other side gets the same file descriptor and now has access to the very same resource the origin the father scriptor",
    "start": "2850599",
    "end": "2856400"
  },
  {
    "text": "itself is duped it's copied but it points the same OS resource and same",
    "start": "2856400",
    "end": "2861559"
  },
  {
    "text": "position within that resource you can also pass in any serializable but that's",
    "start": "2861559",
    "end": "2866640"
  },
  {
    "text": "not very efficient because Java serialization concerns itself with essentially long-term storage as well as",
    "start": "2866640",
    "end": "2873960"
  },
  {
    "text": "to some degree efficiency whereas binder is extremely concerned about efficiency so you should never take essentially a",
    "start": "2873960",
    "end": "2880079"
  },
  {
    "text": "parcel which is what again is a unit of binder you know transactional data and store it to this or store it anywhere",
    "start": "2880079",
    "end": "2886079"
  },
  {
    "text": "long term because it doesn't include enough Meta Meta information to be able to to reread it properly so cables are",
    "start": "2886079",
    "end": "2893359"
  },
  {
    "text": "supported but not efficient you should avoid them as much as you can Maps so",
    "start": "2893359",
    "end": "2898960"
  },
  {
    "text": "anything of type map can be passed as long as the objects are supported or the values of the maps are of one of the",
    "start": "2898960",
    "end": "2905520"
  },
  {
    "text": "supported types same is true for lists and object arrays so you can put an",
    "start": "2905520",
    "end": "2911119"
  },
  {
    "text": "object array but they have to be of supported type you can pass in bundles bundles are essentially wrappers for",
    "start": "2911119",
    "end": "2916280"
  },
  {
    "text": "Maps they're just more they're just glorified they only allow you to store or put into them one of these supported",
    "start": "2916280",
    "end": "2922640"
  },
  {
    "text": "types and if any of you guys have used bundles inside of intent they'll the very same bundles um you can also pass",
    "start": "2922640",
    "end": "2929040"
  },
  {
    "text": "sparse arrays and sparse Boolean arrays um but that's kind of just more specialized essentially arrays and",
    "start": "2929040",
    "end": "2934440"
  },
  {
    "text": "finally well finally two more things you can do one you can pass in instances of I binder remember ibinder interface",
    "start": "2934440",
    "end": "2941280"
  },
  {
    "text": "anything you pass to the other side is a ibinder reference is not copied rather",
    "start": "2941280",
    "end": "2947960"
  },
  {
    "text": "it's passed as a binder reference so the other side will now have a essentially a pointer back to that object that object",
    "start": "2947960",
    "end": "2955000"
  },
  {
    "text": "May might have been your local object or it might have been an object that you got from somewhere else but it points",
    "start": "2955000",
    "end": "2960200"
  },
  {
    "text": "the very same object and finally if you hadde custom data types something that's not on this",
    "start": "2960200",
    "end": "2966119"
  },
  {
    "text": "list let's say we have a bar whatever bar may be then basically what you do is you pass in something you would need to",
    "start": "2966119",
    "end": "2972160"
  },
  {
    "text": "have your bar Implement parcel oble which is like Java serialization or serializable except that with parcel OES",
    "start": "2972160",
    "end": "2979520"
  },
  {
    "text": "you end up having to implement the strategy for parceling or marshalling and unmarshaling yourself and so what",
    "start": "2979520",
    "end": "2987480"
  },
  {
    "text": "does that look like let's say this bar had some private data like an integer and a string and now you implement paral",
    "start": "2987480",
    "end": "2994440"
  },
  {
    "text": "well that requires you implement a mechanism for converting this object into a parcel using The Primitives that",
    "start": "2994440",
    "end": "3002079"
  },
  {
    "text": "binder supports out of the box that I mentioned as well as rereading that object from a parcel meaning updating",
    "start": "3002079",
    "end": "3008640"
  },
  {
    "text": "the object from a parcel and finally recreating that object from a parcel which is kind of like reading it you're",
    "start": "3008640",
    "end": "3014599"
  },
  {
    "text": "essentially creating a brand new object from a parcel so who will ever call the right to parcel the proxy so when this",
    "start": "3014599",
    "end": "3022280"
  },
  {
    "text": "bar needs to be sent to the other side well because the binder Channel one supports Parcels doesn't know anything",
    "start": "3022280",
    "end": "3028400"
  },
  {
    "text": "about bars the proxy will convert your bar into a parcel the other side on the",
    "start": "3028400",
    "end": "3034520"
  },
  {
    "text": "other can the service that wants to say react to a bar doesn't know anything about Parcels doesn't care about Parcels",
    "start": "3034520",
    "end": "3040680"
  },
  {
    "text": "he cares about bars so what will happen on the other side the stub will recreate",
    "start": "3040680",
    "end": "3045760"
  },
  {
    "text": "the original bar from a parcel so essentially parcel is a mechanism for you to flatten your object into",
    "start": "3045760",
    "end": "3052400"
  },
  {
    "text": "something that the binder driver can understand and then these methods are mechan mechanism of you know converting",
    "start": "3052400",
    "end": "3058559"
  },
  {
    "text": "them into parcels and recreating them from Parcels I'm not going to go into these details you can read more about",
    "start": "3058559",
    "end": "3063880"
  },
  {
    "text": "them later once you do Define however any of your custom data types you're going to have to declare in declare them",
    "start": "3063880",
    "end": "3069799"
  },
  {
    "text": "in their own aidl file and make them Parable and one more thing is you end up",
    "start": "3069799",
    "end": "3075319"
  },
  {
    "text": "having to go and import and this kind of seems redundant for having to import something that's in the same package but",
    "start": "3075319",
    "end": "3080880"
  },
  {
    "text": "you end up having to do that anyway if using custom data types so that essentially is how you you start off",
    "start": "3080880",
    "end": "3087480"
  },
  {
    "text": "creating these these you know custom types and how you C create your your interfaces now one couple more things I",
    "start": "3087480",
    "end": "3093559"
  },
  {
    "text": "should mention is that parameters in aidl can take zero or more parameters but they must return something even if",
    "start": "3093559",
    "end": "3098839"
  },
  {
    "text": "it's a void um all of them require a directional flag except Primitives",
    "start": "3098839",
    "end": "3105280"
  },
  {
    "text": "because they're by default in in only so what's a directional flag well here in",
    "start": "3105280",
    "end": "3110400"
  },
  {
    "text": "out basically means that this instance of bar will be copied or parceled into",
    "start": "3110400",
    "end": "3117240"
  },
  {
    "text": "the service that it's going to receive it and then when this call returns it will be unparal back and sorry repar",
    "start": "3117240",
    "end": "3125440"
  },
  {
    "text": "parcel by the other side and unparal on the client so basically it will be copied both ways if you say in that",
    "start": "3125440",
    "end": "3132119"
  },
  {
    "text": "means it's just copied One Way Or if you say out is just copied you know back to you but the your your the state of the",
    "start": "3132119",
    "end": "3138160"
  },
  {
    "text": "object is never copied towards the service the integers like this one you know because it's a primitive of course",
    "start": "3138160",
    "end": "3144720"
  },
  {
    "text": "you you know you cannot dreference it's an integer and so therefore it's only it's you know only copied so therefore",
    "start": "3144720",
    "end": "3150119"
  },
  {
    "text": "it's always an in um in terms of the exceptions you cannot use um you cannot",
    "start": "3150119",
    "end": "3156000"
  },
  {
    "text": "use any of the exceptions well your interfaces cannot throw exceptions they cannot declare exceptions to be thrown",
    "start": "3156000",
    "end": "3161799"
  },
  {
    "text": "and if you're objects do CLE throw exceptions those exceptions basically have to be one of these so security uh",
    "start": "3161799",
    "end": "3168079"
  },
  {
    "text": "null pointer legal argument and and that sort of thing so hopefully that makes",
    "start": "3168079",
    "end": "3174040"
  },
  {
    "start": "3172000",
    "end": "3326000"
  },
  {
    "text": "sense for what a IDL is now how does this called mapping work um this is",
    "start": "3174040",
    "end": "3179920"
  },
  {
    "text": "where it gets slightly tricky I'm not going to go into too much details other than the fact that you you know you can just trust that it works but let me kind",
    "start": "3179920",
    "end": "3186280"
  },
  {
    "text": "of give you an idea so when a client Builds an object that or sorry let's say",
    "start": "3186280",
    "end": "3192240"
  },
  {
    "text": "this way when a service Builds an object right that that be become he wants other",
    "start": "3192240",
    "end": "3197839"
  },
  {
    "text": "clients to be able to use and he wants to register it with a service manager at",
    "start": "3197839",
    "end": "3203119"
  },
  {
    "text": "the point where it submits that that binder object to service manager that local reference gets translated into a",
    "start": "3203119",
    "end": "3211160"
  },
  {
    "text": "binder handle the service manager remembers a pointer think of it as a",
    "start": "3211160",
    "end": "3216720"
  },
  {
    "text": "pointer back to that original object as via this binder candle if a client now",
    "start": "3216720",
    "end": "3222119"
  },
  {
    "text": "requests this binder handle or you know because he wants to talk to the service it gets the very same binder handle but",
    "start": "3222119",
    "end": "3228480"
  },
  {
    "text": "then that binder handle when it reaches the client becomes a local CL you know essentially a local address to its own",
    "start": "3228480",
    "end": "3234559"
  },
  {
    "text": "local memory space when the binder now submits a transaction the transaction is going to essentially what appears to be",
    "start": "3234559",
    "end": "3240960"
  },
  {
    "text": "a local variable but a local variable is just a Rema inside of the kernel driver to the remote the remote handle which",
    "start": "3240960",
    "end": "3248640"
  },
  {
    "text": "then when it reaches the service gets a remap from that remote handle back into",
    "start": "3248640",
    "end": "3254440"
  },
  {
    "text": "the original local object that the service had the actual service the object that it wants clients to use so",
    "start": "3254440",
    "end": "3262079"
  },
  {
    "text": "the binder driver automatically essentially rewrites",
    "start": "3262079",
    "end": "3267160"
  },
  {
    "text": "any binder references that you are talking to or any binder references you",
    "start": "3267160",
    "end": "3272960"
  },
  {
    "text": "put into your parameters and or return values and internally the binder object",
    "start": "3272960",
    "end": "3279480"
  },
  {
    "text": "M or sorry the binder driver maintains a mapping between local references and",
    "start": "3279480",
    "end": "3286000"
  },
  {
    "text": "essentially virtual or abstract binder handles you don't have to know that this is happening except that you benefit",
    "start": "3286000",
    "end": "3292319"
  },
  {
    "text": "from it because it means that if you share and reference to a what appears to be a local object to some other process",
    "start": "3292319",
    "end": "3298799"
  },
  {
    "text": "well that other process will point if it submits transactions again against that object it will go to the very same",
    "start": "3298799",
    "end": "3304680"
  },
  {
    "text": "object because again these references are are unique across the entire system",
    "start": "3304680",
    "end": "3311359"
  },
  {
    "text": "okay I'm not going to go into internally you know binder driver has like this binary list or binary three I should say",
    "start": "3311359",
    "end": "3318640"
  },
  {
    "text": "of of these you know mapping of references we don't have to go into how that works it's not even important",
    "start": "3318640",
    "end": "3323880"
  },
  {
    "text": "except that it does work now let's you know we don't have a lot of",
    "start": "3323880",
    "end": "3329319"
  },
  {
    "start": "3326000",
    "end": "3592000"
  },
  {
    "text": "time left so let's take a look at you know a couple of examples let's say you wanted to build an application that you",
    "start": "3329319",
    "end": "3335880"
  },
  {
    "text": "want others to be able to use essentially or I should say a service you want others to be able to use and",
    "start": "3335880",
    "end": "3341359"
  },
  {
    "text": "let's say you're not building a system service because if you're building a system service you actually your job",
    "start": "3341359",
    "end": "3346480"
  },
  {
    "text": "will be slightly easier inste you know in if you were building a system service you could then use the service manager",
    "start": "3346480",
    "end": "3352039"
  },
  {
    "text": "to directly remember the service you know the clients want to talk to but in this case actually won't be able to let",
    "start": "3352039",
    "end": "3357480"
  },
  {
    "text": "me give you kind of explain what this does in this particular example we're going to have a client they'll just have",
    "start": "3357480",
    "end": "3364599"
  },
  {
    "text": "a UI the UI will collect some sort of an input from the user the user will click on a button that will generate a request",
    "start": "3364599",
    "end": "3372000"
  },
  {
    "text": "the request will go from this client activity into a service and from that",
    "start": "3372000",
    "end": "3378599"
  },
  {
    "text": "service into some sort of a library they will act on the request which will then return the result and essentially the",
    "start": "3378599",
    "end": "3384240"
  },
  {
    "text": "result will go back to the client that's what the client wants to be able to do in this case the request is to calc you",
    "start": "3384240",
    "end": "3390280"
  },
  {
    "text": "know do a Fibonacci calculation and you can specify what sort of what type of fibon calculation you want you want to",
    "start": "3390280",
    "end": "3395640"
  },
  {
    "text": "do now because these two things are separated they can't directly talk to",
    "start": "3395640",
    "end": "3401119"
  },
  {
    "text": "each other so instead what happens is that the activity the one system talk to service actually talks to a proxy via",
    "start": "3401119",
    "end": "3407839"
  },
  {
    "text": "lip binder I should say goes to the binder driver this service previously",
    "start": "3407839",
    "end": "3413280"
  },
  {
    "text": "essentially went in here and said hey I'm waiting waiting for requests the actual service didn't do that the",
    "start": "3413280",
    "end": "3419480"
  },
  {
    "text": "framework took care of it but the service is essentially waiting for requests when this request comes in this",
    "start": "3419480",
    "end": "3424920"
  },
  {
    "text": "thread now wakes up it gets unblocked the the request makes its way into the",
    "start": "3424920",
    "end": "3430760"
  },
  {
    "text": "service via stub the stub takes care of translating the original request which",
    "start": "3430760",
    "end": "3437960"
  },
  {
    "text": "basically was you know in the process of sending it through binder converted into these Parcels that the service doesn't",
    "start": "3437960",
    "end": "3444559"
  },
  {
    "text": "anything want know anything about the service then goes and gets the request and does act on the request how it acts",
    "start": "3444559",
    "end": "3450799"
  },
  {
    "text": "on the request is not even important because what it does to that point is is up to the service so what is the purpose",
    "start": "3450799",
    "end": "3457000"
  },
  {
    "text": "of the stub to unmarshal the request from the from the that receives through through binder what is the purpose of",
    "start": "3457000",
    "end": "3463240"
  },
  {
    "text": "the proxy to Marshall the request before he goes to the binder now one particular",
    "start": "3463240",
    "end": "3469000"
  },
  {
    "text": "challenge that we have when we're dealing with application binder Services is we need to somehow make those",
    "start": "3469000",
    "end": "3475720"
  },
  {
    "text": "services is available to our clients how do clients find their services well you may think well we talked about service",
    "start": "3475720",
    "end": "3482039"
  },
  {
    "text": "manager why don't they just register it there the issue is the service manager only permits registrations from trusted",
    "start": "3482039",
    "end": "3488880"
  },
  {
    "text": "sources so specifically it does not allow third party applications to register themselves with it because if",
    "start": "3488880",
    "end": "3495119"
  },
  {
    "text": "they could that could lead to all sorts of security implications so instead what happens is slightly more kind of",
    "start": "3495119",
    "end": "3501960"
  },
  {
    "text": "roundabout way of registering basically what you end up doing when you're creating a b their services you end up",
    "start": "3501960",
    "end": "3507280"
  },
  {
    "text": "having to create a normal service one of those Android component Services whose",
    "start": "3507280",
    "end": "3512359"
  },
  {
    "text": "job is just to provide access to this service so then how do we how does this",
    "start": "3512359",
    "end": "3518039"
  },
  {
    "text": "actually how does the lookup work well the the way it will work is that the client will submit an asynchronous",
    "start": "3518039",
    "end": "3523359"
  },
  {
    "text": "request to the activity manager to want a bind to remote service that becomes a binder call to the activity manager",
    "start": "3523359",
    "end": "3529799"
  },
  {
    "text": "service again another binder call which then uses the package manager to figure",
    "start": "3529799",
    "end": "3534839"
  },
  {
    "text": "out which application actually has the service that we want to bind to and the package manager somehow",
    "start": "3534839",
    "end": "3541240"
  },
  {
    "text": "figures out that we have it because we M we somehow register and we'll talk about how we register Services I mean it's",
    "start": "3541240",
    "end": "3546720"
  },
  {
    "text": "simply manifest in the Manifest file at that point the package manager service goes to this service and says okay time",
    "start": "3546720",
    "end": "3553200"
  },
  {
    "text": "to build you once the service gets instantiated this again simple service",
    "start": "3553200",
    "end": "3558920"
  },
  {
    "text": "goes and Builds an instance of the I Fibonacci service that's the one that the client wants to talk to and then we",
    "start": "3558920",
    "end": "3564920"
  },
  {
    "text": "take this object and we essentially send it back here so now the client has",
    "start": "3564920",
    "end": "3570559"
  },
  {
    "text": "essentially a remote binder handle onto that object seems very convoluted and it",
    "start": "3570559",
    "end": "3575680"
  },
  {
    "text": "is uh there's I I wish I didn't have to draw that many lines on the screen I know it's you know looking for",
    "start": "3575680",
    "end": "3581160"
  },
  {
    "text": "complexity here I'm trying to sell you in binder and yet it doesn't look that easy but once you get a hang of it once you know once you do it you know once or",
    "start": "3581160",
    "end": "3587640"
  },
  {
    "text": "twice it actually becomes very fairly simple because it's mostly boilerplate code now and that's by the way the",
    "start": "3587640",
    "end": "3593640"
  },
  {
    "text": "reason why we have things like messenger because they take care of some of that boiler plate code for you now how would",
    "start": "3593640",
    "end": "3600200"
  },
  {
    "text": "the how does this all work so here let me kind of give you a couple of ideas um first when you're creating binder",
    "start": "3600200",
    "end": "3606000"
  },
  {
    "text": "Services one of first things you want to do is you want to create these common interfaces they will be shared across",
    "start": "3606000",
    "end": "3612240"
  },
  {
    "text": "clients and services now because you want these these interfaces may contain you know custom data types right like we",
    "start": "3612240",
    "end": "3619319"
  },
  {
    "text": "talked about like say a bar class well because the this custom data types are going to be used by both service and the",
    "start": "3619319",
    "end": "3625319"
  },
  {
    "text": "client you're generally don't want to copy the code between different projects so the recommended approach is to use what are known as Library projects so in",
    "start": "3625319",
    "end": "3632359"
  },
  {
    "text": "this case I would create a Fibonacci common as essentially a library project Fibonacci common would be a very simple",
    "start": "3632359",
    "end": "3640039"
  },
  {
    "text": "you know Android project they would just Define the interface in this case the interface is called I Fibonacci service",
    "start": "3640039",
    "end": "3647319"
  },
  {
    "text": "aidl file and that interface defines five methods these are FIB methods right",
    "start": "3647319",
    "end": "3654079"
  },
  {
    "text": "so given some n give me the Fibonacci of N and using couple different algorithms",
    "start": "3654079",
    "end": "3659440"
  },
  {
    "text": "this particular class can do calculation using iterative approach or recursive",
    "start": "3659440",
    "end": "3664880"
  },
  {
    "text": "approach or using Java or using C++ I native and then there's a custom class",
    "start": "3664880",
    "end": "3670559"
  },
  {
    "text": "or another method called FIB which doesn't take in a simple perimeter but takes in a request object and returns a",
    "start": "3670559",
    "end": "3677440"
  },
  {
    "text": "response object these are custom classes so here's where we actually have to deal",
    "start": "3677440",
    "end": "3682520"
  },
  {
    "text": "with these parceling business so what is this custom object look like by the way all this code is available in GitHub",
    "start": "3682520",
    "end": "3688960"
  },
  {
    "text": "later should you want to look at it so don't worry about you know me skipping over things so what does this look like this parcelable sorry this request you",
    "start": "3688960",
    "end": "3696720"
  },
  {
    "text": "know Fibonacci request May for example include two types or two parameters or",
    "start": "3696720",
    "end": "3702079"
  },
  {
    "text": "two pieces of or two Fields I should say some end that you want to get a Fibonacci of and some type of the",
    "start": "3702079",
    "end": "3708079"
  },
  {
    "text": "algorithm you want to use which is just an Ino well yes we could have written this as two different parameters over",
    "start": "3708079",
    "end": "3714400"
  },
  {
    "text": "binder partial but in this case we wanted to have a single class to kind of encapsulate this request so we Implement",
    "start": "3714400",
    "end": "3722039"
  },
  {
    "text": "Parable once you implement Parable you end up having to describe how you write this to parcel so here's how we write an",
    "start": "3722039",
    "end": "3728680"
  },
  {
    "text": "integer long to a parcel here's how we convert essentially for example an enum into a partial right we write it as an",
    "start": "3728680",
    "end": "3735440"
  },
  {
    "text": "integer and then on the other side we need to have a way of recreating that",
    "start": "3735440",
    "end": "3740480"
  },
  {
    "text": "from a parcel so given a parcel recreate the original request so again you just",
    "start": "3740480",
    "end": "3746160"
  },
  {
    "text": "have to read it in the same order in which we wrote it pretty straightforward kind of like Java calization except you don't get it for free you end up having",
    "start": "3746160",
    "end": "3752440"
  },
  {
    "text": "to do it yourself similarly here's the Fibonacci response Fibonacci response basically is all simpl and partial has",
    "start": "3752440",
    "end": "3759960"
  },
  {
    "text": "two Longs for example the result of the of the Fibonacci operation plus the time it took to perform the operation say we",
    "start": "3759960",
    "end": "3766160"
  },
  {
    "text": "interested in for whatever debugging reasons and again implements partiel and again he has to go and Implement a right",
    "start": "3766160",
    "end": "3773160"
  },
  {
    "text": "to parcel and create from parcel right so that's essentially like",
    "start": "3773160",
    "end": "3778760"
  },
  {
    "text": "serialization except it's your on on you to do it once you do this basically what will happen next is that the aidl tool",
    "start": "3778760",
    "end": "3785760"
  },
  {
    "text": "will automatically generate this I Fibonacci service this I Fibonacci service again will include those five",
    "start": "3785760",
    "end": "3791960"
  },
  {
    "text": "methods but this time is Java methods that's it so that's how you define the common interface now you want to",
    "start": "3791960",
    "end": "3797599"
  },
  {
    "text": "implement it right so in this case I build another class or another project called Fibonacci service what that does",
    "start": "3797599",
    "end": "3803559"
  },
  {
    "text": "I'm not going to go into details of you know how did it let's just focus on the code that is the actual implementation",
    "start": "3803559",
    "end": "3810200"
  },
  {
    "text": "that implementation extends from that stub remember how we said there's a stop the stop takes care of the low-level",
    "start": "3810200",
    "end": "3816720"
  },
  {
    "text": "unmarshalling data and so what does this what do we have to do we just have to implement the business methods this is",
    "start": "3816720",
    "end": "3822279"
  },
  {
    "text": "the beauty of of binder you really don't have to worry about you know creting any sort of thread or any sort of looping or",
    "start": "3822279",
    "end": "3827839"
  },
  {
    "text": "any of selecting you just Implement bunch of callbacks the business methods you want others to be able to use so",
    "start": "3827839",
    "end": "3833920"
  },
  {
    "text": "what is our FIB Ji look like well we call some library to to perform the operation it doesn't matter what the",
    "start": "3833920",
    "end": "3839960"
  },
  {
    "text": "operation is you know what does this look like again we just don't care about it it's just we're just implementing the",
    "start": "3839960",
    "end": "3845760"
  },
  {
    "text": "methods here's the fif method this is the one where we're actually reading from a custom object you know we're just",
    "start": "3845760",
    "end": "3851760"
  },
  {
    "text": "reading the information from the object as a pure Java objectoriented you know",
    "start": "3851760",
    "end": "3856839"
  },
  {
    "text": "programming model and once we're done we just return the response this is it as service",
    "start": "3856839",
    "end": "3862920"
  },
  {
    "text": "developers as essentially we're creating a binding service right here we just have to create you know work with JW",
    "start": "3862920",
    "end": "3868640"
  },
  {
    "text": "objects the only you know the only thing that gives away that this has anything to do with binder is the fact that we",
    "start": "3868640",
    "end": "3874520"
  },
  {
    "text": "extend from stuff but other than that it's pure",
    "start": "3874520",
    "end": "3879640"
  },
  {
    "text": "JV they're automatically threat protected they're not threat protected so there this any of these methods can",
    "start": "3881119",
    "end": "3887880"
  },
  {
    "text": "in fact be invoked by multiple concurrent threads it is up to you in to to protect the state that's what we",
    "start": "3887880",
    "end": "3893400"
  },
  {
    "text": "mentioned previously so they're not there these do not run in a you know some under some sort of a unique lock in fact there could be up to 15 concurrent",
    "start": "3893400",
    "end": "3899880"
  },
  {
    "text": "threads talking to you at the same time now how do you actually expose this to the to the users to the clients well",
    "start": "3899880",
    "end": "3907680"
  },
  {
    "text": "here's that little service that we build this is a traditional service that extends a simple service and all we need",
    "start": "3907680",
    "end": "3913200"
  },
  {
    "text": "to do is that on the method called onbind or in the method we just return",
    "start": "3913200",
    "end": "3918920"
  },
  {
    "text": "the service this is the actual service the client wants to use here's the activity manager asking us to give a",
    "start": "3918920",
    "end": "3926400"
  },
  {
    "text": "reference to the service to the client and we just go and build a service over here and then we return it at that point",
    "start": "3926400",
    "end": "3933680"
  },
  {
    "text": "but only at that point does the binder driver learn about our service because our service right now on the own create",
    "start": "3933680",
    "end": "3940960"
  },
  {
    "text": "is just local nobody knows about it except this process only when it actually hits the binder channel will",
    "start": "3940960",
    "end": "3947279"
  },
  {
    "text": "the binder driver learn about it and start mapping it the rest of these methods are un important they're just",
    "start": "3947279",
    "end": "3952359"
  },
  {
    "text": "here for you know so you can kind of debug what's going on and I'm not going to go into the details of of how this works so here's you you know you take",
    "start": "3952359",
    "end": "3959480"
  },
  {
    "text": "your service you register it you just register it under a custom intent right your specific intent filter should say",
    "start": "3959480",
    "end": "3965799"
  },
  {
    "text": "there has a custom action and now the clients can find it now how do you write a client well the client again skipping",
    "start": "3965799",
    "end": "3973279"
  },
  {
    "text": "all the all the basic stuff here's some of the UI stuff for the client I'm not going to go into how that that's supposed to work the client is in this",
    "start": "3973279",
    "end": "3979799"
  },
  {
    "text": "case it's nothing more than a simple activity so here's how the client wants to use a service by interface where does",
    "start": "3979799",
    "end": "3986640"
  },
  {
    "text": "this interface come from the aidl tool generated it the client doesn't even know that this for the most part doesn't",
    "start": "3986640",
    "end": "3992839"
  },
  {
    "text": "even know that it's a IDL based the only thing will give it away is one the fact that he has to deal with with exceptions",
    "start": "3992839",
    "end": "3998760"
  },
  {
    "text": "you got a question yeah the no I mean that's the whole idea the",
    "start": "3998760",
    "end": "4004440"
  },
  {
    "text": "client in this case we want to have it be in a separate application and the fact that both client and the service can see this common interfaces because",
    "start": "4004440",
    "end": "4011400"
  },
  {
    "text": "they share that common Library project we per we we started with",
    "start": "4011400",
    "end": "4016440"
  },
  {
    "text": "okay so we we end up having three different Android applic projects the common Library project which has our",
    "start": "4016440",
    "end": "4023000"
  },
  {
    "text": "essentially our interface and and common data types the service that implements the interface and the client that wants to use the",
    "start": "4023000",
    "end": "4028839"
  },
  {
    "text": "interface right so now what do we do so the client wants to use the service",
    "start": "4028839",
    "end": "4034720"
  },
  {
    "text": "let's see how the client uses the service okay I'm just going to scroll down to right to that here's where the",
    "start": "4034720",
    "end": "4040599"
  },
  {
    "text": "client uses the service it builds the request and then down here inside of an",
    "start": "4040599",
    "end": "4046279"
  },
  {
    "text": "async task which you should never go and create async tasks like this but it's different different reason different point it goes and says service.",
    "start": "4046279",
    "end": "4053720"
  },
  {
    "text": "FIP notice how simple this is It's a simple object-oriented call the client has no knowledge that this is actually a",
    "start": "4053720",
    "end": "4061200"
  },
  {
    "text": "remote call except for the fact that the client needs to handle the remote transaction if the service were to fail",
    "start": "4061200",
    "end": "4069000"
  },
  {
    "text": "halfway through executing the call well it will fail with with an exception so outside of having to handle this remote",
    "start": "4069000",
    "end": "4075119"
  },
  {
    "text": "except ction you really don't even know this is a binder call the one thing that does affect",
    "start": "4075119",
    "end": "4083039"
  },
  {
    "text": "other than this remote exception give that away is the is the diff is the process of binding to the service to",
    "start": "4083039",
    "end": "4089319"
  },
  {
    "text": "begin with so how we use a service is extremely straightforward we just use it",
    "start": "4089319",
    "end": "4094480"
  },
  {
    "text": "as if it was local object we block until the service returns to us how we find",
    "start": "4094480",
    "end": "4099838"
  },
  {
    "text": "the service is the part is slightly convoluted so here's how the client does it in this particular case in this case",
    "start": "4099839",
    "end": "4105880"
  },
  {
    "text": "remember the service is just a local reference right defined by an interface so how do we initialize it well when the",
    "start": "4105880",
    "end": "4112159"
  },
  {
    "text": "client resumes it asks the activity manager to bind to the service we bind",
    "start": "4112159",
    "end": "4117679"
  },
  {
    "text": "to the service by essentially saying hey look for some some service that implements or acts on this intent and",
    "start": "4117679",
    "end": "4124440"
  },
  {
    "text": "then use it to bind to the actual service we want now when we do this what we pass to",
    "start": "4124440",
    "end": "4131318"
  },
  {
    "text": "this bind method we pass in the intent we want to bind to but we also pass in a",
    "start": "4131319",
    "end": "4136560"
  },
  {
    "text": "reference to in this case this this being a service connection essentially",
    "start": "4136560",
    "end": "4142400"
  },
  {
    "text": "it's an interface that we Implement on ourselves which essentially forces us to have two call back methods on service",
    "start": "4142400",
    "end": "4149880"
  },
  {
    "text": "connected and on service disconnected this is how we find out when we connect",
    "start": "4149880",
    "end": "4155719"
  },
  {
    "text": "it right so this is a asynchronous call that's the part that's different from",
    "start": "4155719",
    "end": "4161838"
  },
  {
    "text": "finding to system Services which when it comes to system servic you just directly ask the service manager hey give me the",
    "start": "4161839",
    "end": "4168000"
  },
  {
    "text": "service and you get it right away you either get it or it doesn't exist that's it and it happens instantaneously",
    "start": "4168000",
    "end": "4173679"
  },
  {
    "text": "whereas with this in this case you submit a request and then down the road you receive the service now how do you",
    "start": "4173679",
    "end": "4181040"
  },
  {
    "text": "receive the service you basically receive a service as an ibinder object now that's all very nice and dandy but",
    "start": "4181040",
    "end": "4187600"
  },
  {
    "text": "you don't know how to use ibinder objects this has a wrong type so what do you do you essentially ask this stub to",
    "start": "4187600",
    "end": "4195800"
  },
  {
    "text": "give you a proxy over that object this is where the proxy comes in play now you don't see this is a proxy but behind the",
    "start": "4195800",
    "end": "4202199"
  },
  {
    "text": "scenes what this will do is will actually give you a proxy which matches the type You're Expecting which is this",
    "start": "4202199",
    "end": "4208840"
  },
  {
    "text": "type over the service what does the proxy do remember the proxy will use this generic object",
    "start": "4208840",
    "end": "4217040"
  },
  {
    "text": "and submit to it generic transactions with Parcels you on the other hand you don't want to think in terms of",
    "start": "4217040",
    "end": "4222800"
  },
  {
    "text": "transactions and Parcels you want to think in terms of essentially method calls with Java",
    "start": "4222800",
    "end": "4228239"
  },
  {
    "text": "objects so the how this works you can take a look at the actual generated code",
    "start": "4228239",
    "end": "4235080"
  },
  {
    "text": "the the code that will be generated by IDL but we don't have to understand it right now I'm just kind of telling you if this is possible and so that's it",
    "start": "4235080",
    "end": "4241880"
  },
  {
    "text": "when you want to disconnect in this case like for example in unbind you simply say I want to unbind for the same",
    "start": "4241880",
    "end": "4247480"
  },
  {
    "text": "service connection and at some point in the future you're going to get a call back that you've disconnected in this case you can for example make this",
    "start": "4247480",
    "end": "4253760"
  },
  {
    "text": "object be n this you can kill the prox it's no doesn't even matter you no longer have reference to it that's it",
    "start": "4253760",
    "end": "4259760"
  },
  {
    "text": "and basically if you were to try to run this the rest of this is by the way just you know XML code and whatnot generic",
    "start": "4259760",
    "end": "4266360"
  },
  {
    "text": "Plumbing so I'm not going to go over it the the client looks like this essentially in fact I have it running",
    "start": "4266360",
    "end": "4271560"
  },
  {
    "text": "here you can come in and say you know 43 or 40 say 43 for oops for Fibonacci of",
    "start": "4271560",
    "end": "4278840"
  },
  {
    "text": "ji you hit this and it will give you the result and it will tell you what is the overhead of producing the result for",
    "start": "4278840",
    "end": "4285320"
  },
  {
    "text": "transferring over binder in this case 0o milliseconds is actually binder is extremely efficient to prove that this",
    "start": "4285320",
    "end": "4290360"
  },
  {
    "text": "is actually happening you can do you know ADB a shell you know PS and you'll",
    "start": "4290360",
    "end": "4296480"
  },
  {
    "text": "actually see that I have two different applications that are talking to each other right so the client doesn't have",
    "start": "4296480",
    "end": "4304040"
  },
  {
    "text": "the capability of producing Fibonacci results the service doesn't have the UI so they're communicating over one",
    "start": "4304040",
    "end": "4309440"
  },
  {
    "text": "another I can even show you this is happening by showing you how you basically bind the reports these transactions but we don't have the time",
    "start": "4309440",
    "end": "4315840"
  },
  {
    "text": "so in the last couple of minutes as we're going to run out of time I just wanted to mention that binder also supports what's known as",
    "start": "4315840",
    "end": "4322199"
  },
  {
    "text": "asynchronous moot motor operation asynchronous basically is slightly different let me kind of give you a",
    "start": "4322199",
    "end": "4328159"
  },
  {
    "text": "quick overview in this particular case what you do is you you create typically",
    "start": "4328159",
    "end": "4333239"
  },
  {
    "text": "a listener so you can receive the response from the client um and as opposed to getting the response in the",
    "start": "4333239",
    "end": "4339320"
  },
  {
    "text": "original request so you submit a fib request and you get a fib response you basically create an interface that will",
    "start": "4339320",
    "end": "4344840"
  },
  {
    "text": "have a call back with the response now our original Fibonacci service interface",
    "start": "4344840",
    "end": "4350760"
  },
  {
    "text": "now as opposed to returning something it returns nothing but it takes in your",
    "start": "4350760",
    "end": "4357159"
  },
  {
    "text": "listener so what makes this one way Aras synchronous is this one keyword called",
    "start": "4357159",
    "end": "4363159"
  },
  {
    "text": "one way this keyword essentially becomes a flag that tells the binder driver that",
    "start": "4363159",
    "end": "4368639"
  },
  {
    "text": "the client doesn't want to wait for the response because there's nothing to wait for it's a void anyways",
    "start": "4368639",
    "end": "4375719"
  },
  {
    "text": "you basically immediately return from the call what happens is that when the response is finally produced by the",
    "start": "4375719",
    "end": "4382000"
  },
  {
    "text": "client the service the service will send the response via this listener so here's",
    "start": "4382000",
    "end": "4387239"
  },
  {
    "text": "what the service will now look like just let me just show you service basically has a fib method which now returns void",
    "start": "4387239",
    "end": "4393639"
  },
  {
    "text": "but takes in a listener this listener is implemented by or defined by an interface again a Java interface what",
    "start": "4393639",
    "end": "4400440"
  },
  {
    "text": "the service doesn't know that this listener is now a proxy to the actual listener that lives in the client so how",
    "start": "4400440",
    "end": "4407360"
  },
  {
    "text": "does the service use it he just goes and calls listener here's your response and",
    "start": "4407360",
    "end": "4412560"
  },
  {
    "text": "it sends the response back right doesn't return he used to just do a return now it sends it back via a call back the",
    "start": "4412560",
    "end": "4419440"
  },
  {
    "text": "benefit is that the client didn't wait for the service while this was happening the client you know the client could have done the submission on its UI",
    "start": "4419440",
    "end": "4426360"
  },
  {
    "text": "thread or the Looper thread without having to kind of use acing binder Asing task or anything like that now the the",
    "start": "4426360",
    "end": "4433239"
  },
  {
    "text": "binder the one thing one ch when that you have to deal with when you're using listeners or I should say",
    "start": "4433239",
    "end": "4438719"
  },
  {
    "text": "asynchronous binder is when these calls come back to you through binder or any",
    "start": "4438719",
    "end": "4444159"
  },
  {
    "text": "calls that come back to you through binder they actually come back to you over a binder thread not on one of your",
    "start": "4444159",
    "end": "4450639"
  },
  {
    "text": "UI threads so what does that mean if the client were to try to react on The",
    "start": "4450639",
    "end": "4457199"
  },
  {
    "text": "Listener call back and update the UI to to display how much basically uh you know the response it would fail because",
    "start": "4457199",
    "end": "4464480"
  },
  {
    "text": "as you know in Android the non UI threads cannot touch the UI so what is the challenge how do you resolve that",
    "start": "4464480",
    "end": "4470840"
  },
  {
    "text": "challenge well typically what you do is in your listener you don't update the UI",
    "start": "4470840",
    "end": "4476800"
  },
  {
    "text": "but rather you create a message and then use a Handler to drop that message the",
    "start": "4476800",
    "end": "4482560"
  },
  {
    "text": "actual response you got onto a Handler which then cast puts that message on on",
    "start": "4482560",
    "end": "4488040"
  },
  {
    "text": "the message queue the UI thread picks up that message sometimes in the future and then reacts to it and you can then",
    "start": "4488040",
    "end": "4493400"
  },
  {
    "text": "update the UI if you don't know about Mage cues and handlers unfortunately we don't have the time to go over it but I'm just kind of you know ask you to",
    "start": "4493400",
    "end": "4499320"
  },
  {
    "text": "look at it code yourself um in terms of I'm just going to wrap this up in the next two minutes if you don't mind",
    "start": "4499320",
    "end": "4504719"
  },
  {
    "text": "sticking around for that long um sharing memory there's um not there's no",
    "start": "4504719",
    "end": "4509880"
  },
  {
    "text": "built-in mechanism for sharing large memory buffers in Java in through binder",
    "start": "4509880",
    "end": "4515920"
  },
  {
    "text": "uh but at the same time you cannot send through binder transactions more than one Meg of data so you cannot just take",
    "start": "4515920",
    "end": "4522520"
  },
  {
    "text": "a giant blob of data and just send it acoss Ross so unfortunately you have to",
    "start": "4522520",
    "end": "4527679"
  },
  {
    "text": "basically resort to memory sharing but that's only available in C++ how you do this is through something called ashm",
    "start": "4527679",
    "end": "4533199"
  },
  {
    "text": "which essentially gives you file descriptors over memory regions that you can share I'm not going to go into details you can look at it on your own",
    "start": "4533199",
    "end": "4539679"
  },
  {
    "text": "in terms of limitations I already mentioned there's only up to 15 threads per process and",
    "start": "4539679",
    "end": "4545719"
  },
  {
    "text": "only up to one Meg for the any concurrent transactions you have between you know a client and and a driver um in",
    "start": "4545719",
    "end": "4553400"
  },
  {
    "text": "terms of security um not going to go into the details I do invite you to look at this later but basically binder",
    "start": "4553400",
    "end": "4560320"
  },
  {
    "text": "doesn't directly secure anything but one of the things that it does enable is that it provides the information about",
    "start": "4560320",
    "end": "4566239"
  },
  {
    "text": "the sender to the receiver the receiver can then use the information about the sender to determine whether the sender",
    "start": "4566239",
    "end": "4572800"
  },
  {
    "text": "has the right set of permissions to make that call and most of Android security",
    "start": "4572800",
    "end": "4577920"
  },
  {
    "text": "is enforced this way so binder doesn't enforce security but it provides information which is of critical",
    "start": "4577920",
    "end": "4583639"
  },
  {
    "text": "importance for enforcing security this kind of shows you how that works the code down below um this actually gives",
    "start": "4583639",
    "end": "4590159"
  },
  {
    "text": "you the whole permissions how you would go and make your say Services uh secured",
    "start": "4590159",
    "end": "4595679"
  },
  {
    "text": "and I'm not going to go into the details of it I'm just going to ask you to look at it yourself on your own in terms of other features there's the death",
    "start": "4595679",
    "end": "4602280"
  },
  {
    "text": "notification mechanism which is also very interesting you can kind of take a look at how how it's used as well as",
    "start": "4602280",
    "end": "4607800"
  },
  {
    "text": "reporting that's built into into binder um that's about it hopefully you guys",
    "start": "4607800",
    "end": "4613080"
  },
  {
    "text": "got something out of it I apologize we had to run through a lot of things there are a lot of additional resources if you're interested that you can look at a",
    "start": "4613080",
    "end": "4620040"
  },
  {
    "text": "lot of these have to do with internals and then Android's own documentation has guides and how you can use it in the",
    "start": "4620040",
    "end": "4625560"
  },
  {
    "text": "application space uh the video from this as well as the slides will be posted at the URL and if you have any questions",
    "start": "4625560",
    "end": "4632280"
  },
  {
    "text": "I'll be here for a couple of more minutes and actually I'll be leaving and then we can talk as I leave outside so",
    "start": "4632280",
    "end": "4637679"
  },
  {
    "text": "thank you guys [Music]",
    "start": "4637679",
    "end": "4651100"
  }
]