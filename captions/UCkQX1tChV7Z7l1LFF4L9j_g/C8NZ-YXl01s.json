[
  {
    "text": "uh so I'm going to talk about a new feature of scholet test that is coming out in scol test 3.0 uh called async",
    "start": "9920",
    "end": "16000"
  },
  {
    "text": "testing and um what I want to start with is talking a little bit about the past",
    "start": "16000",
    "end": "22199"
  },
  {
    "text": "uh that is the way uh you handle get in the Java servlet API um how many people",
    "start": "22199",
    "end": "28439"
  },
  {
    "text": "here out of curiosity have ever used like use that API directly oh my God I",
    "start": "28439",
    "end": "35320"
  },
  {
    "text": "didn't realize there'd be so many old people here uh so what the way this worked is you you implement this method",
    "start": "35320",
    "end": "42680"
  },
  {
    "text": "it takes a request and a response object and the res the response object is like a wrapper for a socket that's directly",
    "start": "42680",
    "end": "49480"
  },
  {
    "text": "connected to the client so you look at what was in the request and you send things to the client and then you return",
    "start": "49480",
    "end": "56840"
  },
  {
    "text": "the result type and there was no result type it's Java that was void uh so when the method",
    "start": "56840",
    "end": "62480"
  },
  {
    "text": "returned the request response was finished right so that wasn't very",
    "start": "62480",
    "end": "67759"
  },
  {
    "text": "reactive and and so one of the things our our our uh play and uh spray uh kind",
    "start": "67759",
    "end": "74240"
  },
  {
    "text": "of web Frameworks did was uh allow you to return a future response so you can",
    "start": "74240",
    "end": "80600"
  },
  {
    "text": "also just give a syn inous response in play and it looks like this so here I if",
    "start": "80600",
    "end": "86000"
  },
  {
    "text": "I have some intensive computation that comes back to me as a future I can block on it with a weight but this is uncool",
    "start": "86000",
    "end": "92840"
  },
  {
    "text": "right I'm not supposed to do that um but what that a we. result does is you pass it a future and then if the future",
    "start": "92840",
    "end": "99840"
  },
  {
    "text": "completes within 30 seconds it will actually return the result and then what you did is block the thread and then",
    "start": "99840",
    "end": "106560"
  },
  {
    "text": "when it's done it will return the response so that's that's sort of the unidiomatic way to do things in play",
    "start": "106560",
    "end": "112320"
  },
  {
    "text": "what you should do is return a future response so when I",
    "start": "112320",
    "end": "117439"
  },
  {
    "text": "get my future integer back I just map uh onto that to get a new future of",
    "start": "117439",
    "end": "124360"
  },
  {
    "text": "type response and I can return that to play and what play does is it puts that on a shelf and then when it completes it",
    "start": "124360",
    "end": "130520"
  },
  {
    "text": "it has a side effect of completing the request response cycle and the the the",
    "start": "130520",
    "end": "135560"
  },
  {
    "text": "point of it is that that uh modern jvms uh in practice you can only create",
    "start": "135560",
    "end": "141120"
  },
  {
    "text": "a few couple thousand threads before it the the Contex switching starts to dominate and you have to it degrades",
    "start": "141120",
    "end": "148120"
  },
  {
    "text": "performance so it lets you make uh more use out of your threads when a",
    "start": "148120",
    "end": "153200"
  },
  {
    "text": "thread is blocked it's not being used essentially right so this whole async",
    "start": "153200",
    "end": "159360"
  },
  {
    "text": "testing thing came uh it started with an idea I had or almost a panic I had when",
    "start": "159360",
    "end": "166360"
  },
  {
    "text": "I was teaching the uh company formerly known as type safe's play course uh it",
    "start": "166360",
    "end": "172599"
  },
  {
    "text": "was in Palam Alto about two years ago or two and a half years ago and uh we you know we say this that you should not",
    "start": "172599",
    "end": "178840"
  },
  {
    "text": "block you should you know return a future to the web framework but it the the place that you might block is in",
    "start": "178840",
    "end": "186000"
  },
  {
    "text": "tests right so it's generally accepted that it's okay to block in tests so",
    "start": "186000",
    "end": "193120"
  },
  {
    "text": "um this is an example of a test where I've I've grabbed a a future I've got a future int and I block on it until that",
    "start": "193159",
    "end": "201200"
  },
  {
    "text": "int comes back and then I perform an assertion so",
    "start": "201200",
    "end": "206799"
  },
  {
    "text": "um it's kind of like the uh the three rules of reactive programming are rule",
    "start": "206799",
    "end": "212280"
  },
  {
    "text": "number one is never ever block and I've seen uh folks from the company form a",
    "start": "212280",
    "end": "218599"
  },
  {
    "text": "light Bend have that on in big block letters you know never ever block that's",
    "start": "218599",
    "end": "224760"
  },
  {
    "text": "sort of the Mantra so rule number two is never ever block right but rule number",
    "start": "224760",
    "end": "230720"
  },
  {
    "text": "three is well all right maybe it's okay some's blocking your test and and and so",
    "start": "230720",
    "end": "236079"
  },
  {
    "text": "I was uh sitting in this class because Dick my partner dick wall was teaching and I was ignoring him looking at the",
    "start": "236079",
    "end": "241560"
  },
  {
    "text": "the the code the test code and thinking this is kind of wishy-washy right why is it okay to block in your test and is",
    "start": "241560",
    "end": "247959"
  },
  {
    "text": "could that be my fault right so that was what I was thinking essentially if you can return a future response to web",
    "start": "247959",
    "end": "255079"
  },
  {
    "text": "framework why can't you return a future assertion to a test framework that was what occurred to me and so it would look",
    "start": "255079",
    "end": "261239"
  },
  {
    "text": "something like this would look similar to the the thing you give back to play",
    "start": "261239",
    "end": "266400"
  },
  {
    "text": "um if I have a future in hand in my test I just map and a assertion onto it and return that future assertion to the test",
    "start": "266400",
    "end": "272840"
  },
  {
    "text": "framew right so I thought well that's interesting why don't I ask the AA folks",
    "start": "272840",
    "end": "279199"
  },
  {
    "text": "so I emailed Roland and Victor clang and and yonas and and hio and and",
    "start": "279199",
    "end": "284440"
  },
  {
    "text": "and uh just said but does that does that sound interesting to you and they they said yeah you",
    "start": "284440",
    "end": "290520"
  },
  {
    "text": "[Music] know I mean they they were",
    "start": "290520",
    "end": "295800"
  },
  {
    "text": "positive but they I didn't really get the feeling there was a burning need so",
    "start": "295800",
    "end": "301759"
  },
  {
    "text": "one of the things I try to do is not just just because an idea pops into my head I try not to just stick it in",
    "start": "301759",
    "end": "307880"
  },
  {
    "text": "because already skull test has grown really too big and I don't want to have anything in there that isn't really",
    "start": "307880",
    "end": "313800"
  },
  {
    "text": "needed so I I I didn't uh do too much but on a train ride to Colorado from",
    "start": "313800",
    "end": "320120"
  },
  {
    "text": "California I had a day and I had and I actually just coated up kind of a mock not a mock but like a I co it up a a a a",
    "start": "320120",
    "end": "329720"
  },
  {
    "text": "to see if it would work and and I got it something to work I found out like a way to to I thought it could fit into",
    "start": "329720",
    "end": "336520"
  },
  {
    "text": "scholet test to do something like this um but um still pretty pretty much",
    "start": "336520",
    "end": "342639"
  },
  {
    "text": "wasn't sure I would put it in because I thought you know there really wasn't this Burning need and it would add surface",
    "start": "342639",
    "end": "348360"
  },
  {
    "text": "area and then later we decided to support scjs so that you could run",
    "start": "348360",
    "end": "353680"
  },
  {
    "text": "scallet test on JavaScript as well as a jvm and that turned into I I call it a Trojan Yak because we thought it would",
    "start": "353680",
    "end": "359919"
  },
  {
    "text": "take nine days to do that and then it it's still not done over a year later right it turned into this huge project",
    "start": "359919",
    "end": "366120"
  },
  {
    "text": "and half of it was async testing and so what what happened is that in JavaScript we learned that you",
    "start": "366120",
    "end": "372800"
  },
  {
    "text": "can't block the way JavaScript works is they just have one thread going around in a circle and there's a Quee of events",
    "start": "372800",
    "end": "380720"
  },
  {
    "text": "not events queue of jobs to do and that thread will pick up a job do it pick up",
    "start": "380720",
    "end": "386560"
  },
  {
    "text": "another job do it pick up another job and do it it's just one thread it's kind of like the uh awtr or swing event queue",
    "start": "386560",
    "end": "392560"
  },
  {
    "text": "right or CU a thread and one of the things the job can do is stick more jobs at the end of the",
    "start": "392560",
    "end": "400000"
  },
  {
    "text": "the queue right um so you can't block if there's just one thread right so we thought that after",
    "start": "400000",
    "end": "408680"
  },
  {
    "text": "six months of slogging that we had finally you know shaved completely the yak and then we got this I thought I was",
    "start": "408680",
    "end": "414479"
  },
  {
    "text": "about to release release candidate one of 3.0 and I got this uh issue posted that uh this isn't",
    "start": "414479",
    "end": "421280"
  },
  {
    "text": "working on JavaScript and it's this feature value um is a it's like a weight",
    "start": "421280",
    "end": "427319"
  },
  {
    "text": "but it's a a scolar test thing where if you have a future you can call that future value on it and it will",
    "start": "427319",
    "end": "434039"
  },
  {
    "text": "block and it it takes an implicit patience to decide how long to block and",
    "start": "434039",
    "end": "439360"
  },
  {
    "text": "if it you know completes within the time frame successfully then it just returns that value and then you can do an",
    "start": "439360",
    "end": "444919"
  },
  {
    "text": "assertion on it so it's the same kind of blocking first and then asserting and what it turned out is that JavaScript",
    "start": "444919",
    "end": "451720"
  },
  {
    "text": "can have multiple threads going on because you can call outside the JavaScript VM and then there can be more",
    "start": "451720",
    "end": "457919"
  },
  {
    "text": "threads out there so there's just one JavaScript thread but if one of the things that thread does is call into an",
    "start": "457919",
    "end": "463479"
  },
  {
    "text": "API that actually goes into C or Java right some land where they actually have multiple threads that stuff can do",
    "start": "463479",
    "end": "471400"
  },
  {
    "text": "something that takes a while and sometime later come back and stick",
    "start": "471400",
    "end": "476520"
  },
  {
    "text": "something on the bottom of the JavaScript queue so you can actually have things going on uh",
    "start": "476520",
    "end": "482840"
  },
  {
    "text": "concurrently in your JavaScript and that's what this sample I mean this person sample service. getet dat was",
    "start": "482840",
    "end": "489520"
  },
  {
    "text": "doing it was going outside and then we of course would not wait so we would finish too soon because you can't block",
    "start": "489520",
    "end": "495919"
  },
  {
    "text": "I mean what we did for future value is it just doesn't block it assumes the future's finished and we did that thinking that it'd be good to have the",
    "start": "495919",
    "end": "502840"
  },
  {
    "text": "same code running on the jvm and on JavaScript and if you use the run now",
    "start": "502840",
    "end": "508479"
  },
  {
    "text": "execution context JavaScript that will work um so anyway when I saw that I knew",
    "start": "508479",
    "end": "514839"
  },
  {
    "text": "that the only way to fix that was to make support async testing because he's",
    "start": "514839",
    "end": "520240"
  },
  {
    "text": "got a future if you can just map this assertion onto that value onto that",
    "start": "520240",
    "end": "525640"
  },
  {
    "text": "future value and return it to scholar test and then scholet test even on JavaScript can just have it sitting there on a shelf when that future",
    "start": "525640",
    "end": "532600"
  },
  {
    "text": "finally completes and the way it'll complete is something will come from outside stick something on the JavaScript event que and that thread",
    "start": "532600",
    "end": "539600"
  },
  {
    "text": "will eventually get to it and then the conf future will complete at that time scholar can send",
    "start": "539600",
    "end": "545079"
  },
  {
    "text": "the uh send an event to the reporter which is kind of like the web framework sending a response to the client this is",
    "start": "545079",
    "end": "551839"
  },
  {
    "text": "the test framework sending an event to the reporter that's going to say test failed test succeeded right so that took",
    "start": "551839",
    "end": "557399"
  },
  {
    "text": "another six months and so to to give you kind of an idea of what that is um I'm",
    "start": "557399",
    "end": "562720"
  },
  {
    "text": "going to back up again and get explain a few Concepts one is uh this thing called outcome which I introduced in 2.0 which",
    "start": "562720",
    "end": "569760"
  },
  {
    "text": "is just uh a small ADT that models the outcome of a test so a test can either",
    "start": "569760",
    "end": "575160"
  },
  {
    "text": "succeed uh it can fail it can be canceled or it can be pending and",
    "start": "575160",
    "end": "580680"
  },
  {
    "text": "succeeded and pending are just Singleton objects um failed and cancelled have an",
    "start": "580680",
    "end": "586560"
  },
  {
    "text": "exception inside of them so that's outcome and then there's a with fixture",
    "start": "586560",
    "end": "592839"
  },
  {
    "text": "method in Suite uh that takes a test function",
    "start": "592839",
    "end": "599640"
  },
  {
    "text": "and the type of the test function is it doesn't take any parameters and it returns an outcome and then what the with fixture",
    "start": "599640",
    "end": "606760"
  },
  {
    "text": "method does by default is it just invokes that test function that's how a test gets executed uh and then it",
    "start": "606760",
    "end": "612399"
  },
  {
    "text": "Returns the outcome that comes back so the test function what may return succeeded it may return pending whatever",
    "start": "612399",
    "end": "617800"
  },
  {
    "text": "it does in this case by default it just returns that and what this will be invoked for every test so that you can",
    "start": "617800",
    "end": "624240"
  },
  {
    "text": "override with fixture in your own test class and do something before and after",
    "start": "624240",
    "end": "629360"
  },
  {
    "text": "it's not actually before and after it's at the beginning of the test and at the end of the test so that the test has not has already started when with fixture is",
    "start": "629360",
    "end": "636200"
  },
  {
    "text": "invoked the test has not yet completed when uh the test function returns so you",
    "start": "636200",
    "end": "641240"
  },
  {
    "text": "can do things like retry it or change the outcome that sort of thing so uh so anyway that's uh what you",
    "start": "641240",
    "end": "649360"
  },
  {
    "text": "might do in your subass is uh do some setup and then in a try invoke the test",
    "start": "649360",
    "end": "656279"
  },
  {
    "text": "function and then in a finally do some cleanup right um except there's one thing that I",
    "start": "656279",
    "end": "663360"
  },
  {
    "text": "I recommend people do which is delegate to the super class to invoke the test function instead of invoking it directly",
    "start": "663360",
    "end": "669160"
  },
  {
    "text": "I recommend you do this which is super dot with fixture test because at the end of the chain it's going to do the uh the",
    "start": "669160",
    "end": "676519"
  },
  {
    "text": "one on top there the default one and invoke the test function so these guys actually stack so you can compose with",
    "start": "676519",
    "end": "682880"
  },
  {
    "text": "fixture methods uh as long as you call super. with fixture so anyway that was uh",
    "start": "682880",
    "end": "689800"
  },
  {
    "text": "2.0 and then one thing most of the time people did that just in their test",
    "start": "689800",
    "end": "695480"
  },
  {
    "text": "classes actually I think a lot of times people use before and after because they're used to it from junit um but",
    "start": "695480",
    "end": "701320"
  },
  {
    "text": "that you I make you mix in a trade because this was supposed to be the like the default way to do it you don't have to mix anything in It's just in there",
    "start": "701320",
    "end": "707560"
  },
  {
    "text": "it's in Suite um but most uses of with fixture were in the test class because",
    "start": "707560",
    "end": "713680"
  },
  {
    "text": "you just make one and you use it in that test class but if you're using the same with fixure in several test classes then",
    "start": "713680",
    "end": "719040"
  },
  {
    "text": "you you can pull that out into a mix in trait that you then mix into those test",
    "start": "719040",
    "end": "724320"
  },
  {
    "text": "classes so just one with with uh whatever the name of your trade is you get that with fixt your override and",
    "start": "724320",
    "end": "731000"
  },
  {
    "text": "that looks like this separate St traces is actually one in scol test that does",
    "start": "731000",
    "end": "736480"
  },
  {
    "text": "this uh you extend Sweet Mix in you have a self type of site and then you override one of the life cycle methods",
    "start": "736480",
    "end": "742440"
  },
  {
    "text": "in this case uh with fixture what this one does is it it uh for a test canel",
    "start": "742440",
    "end": "748480"
  },
  {
    "text": "exception or test failed exception uh it will actually take off the top part of the stack Trace that is uh above exactly",
    "start": "748480",
    "end": "756560"
  },
  {
    "text": "where the assertion was that failed um so it it's changing the outcome by if",
    "start": "756560",
    "end": "762240"
  },
  {
    "text": "it's if it's a stack depth exception um it will truncate or chop off part of the",
    "start": "762240",
    "end": "770000"
  },
  {
    "text": "the stack Trace so to summarize the past um users can Define with fixture methods",
    "start": "770000",
    "end": "777600"
  },
  {
    "text": "you can compose uh the with fixture methods uh by stacking traits and according to the types and",
    "start": "777600",
    "end": "785120"
  },
  {
    "text": "this was the the issue that the the test has already completed what's the test function returns so it's kind of like",
    "start": "785120",
    "end": "791519"
  },
  {
    "text": "the Ser serate API in that if you just look at the types it kind of forces you to block",
    "start": "791519",
    "end": "798519"
  },
  {
    "text": "because do get when it Returns the response has finished it has to have finished because there's no way to sort",
    "start": "798519",
    "end": "804639"
  },
  {
    "text": "of continue it um and so that was sort of the one of the",
    "start": "804639",
    "end": "809920"
  },
  {
    "text": "what we had to work with to add async testing so one of the first things we did was like I struggled with a future",
    "start": "809920",
    "end": "817160"
  },
  {
    "text": "of what so I'm going to actually just demo this one so I can write some code uh assert one I no x equals",
    "start": "817160",
    "end": "825760"
  },
  {
    "text": "one in 2.0 and earlier that returned the",
    "start": "825760",
    "end": "831279"
  },
  {
    "text": "unit Singleton and uh it still will do the",
    "start": "831279",
    "end": "836920"
  },
  {
    "text": "same thing if it fails it will throw an exception because otherwise all the code would break in the world so it it still",
    "start": "836920",
    "end": "842680"
  },
  {
    "text": "does the same thing as it did before but instead of returning the unit Singleton",
    "start": "842680",
    "end": "848000"
  },
  {
    "text": "object it Returns the succeeded Singleton I just reuse that um and then I made a type Alias which is org scol",
    "start": "848000",
    "end": "855279"
  },
  {
    "text": "test assertion that's just a type Alias for the type the Singleton type of succeeded. type so it h so assert has to",
    "start": "855279",
    "end": "862079"
  },
  {
    "text": "return a Singleton object but it doesn't have to because if it fails it throws an exception right and then matchers also",
    "start": "862079",
    "end": "869399"
  },
  {
    "text": "uh like say x should equal one um that returns is",
    "start": "869399",
    "end": "874639"
  },
  {
    "text": "succeeded and if you say two that that blows up with the same exception so basically that was one thing I did and",
    "start": "874639",
    "end": "880000"
  },
  {
    "text": "the reason was is that I didn't want it I didn't want the type of test to be future any or future",
    "start": "880000",
    "end": "886519"
  },
  {
    "text": "unit because it's it just sounds wrong and it seems very error prone I wanted to be able to say you return a future",
    "start": "886519",
    "end": "893079"
  },
  {
    "text": "assertion to scal test just like you can say you can return a future response in play or spray right so what is a",
    "start": "893079",
    "end": "899000"
  },
  {
    "text": "assertion well that's what it is it's actually the succeeded object um",
    "start": "899000",
    "end": "904920"
  },
  {
    "text": "okay and then um we just did that so well we did it by adding bloat um and",
    "start": "904920",
    "end": "914199"
  },
  {
    "text": "this was one of the real struggles I had was trying to like it was already really big and I didn't want to make it bigger",
    "start": "914199",
    "end": "920680"
  },
  {
    "text": "and that was sort of why I was skeptical of adding this feature in the first place but scholar JS actually provided",
    "start": "920680",
    "end": "926560"
  },
  {
    "text": "the burning need I had to do it if either I don't support scal DJs or I add",
    "start": "926560",
    "end": "932199"
  },
  {
    "text": "async testing somehow right um so the way we did it is for every of the many",
    "start": "932199",
    "end": "937360"
  },
  {
    "text": "style traits there's now an async flavor so for word speec there's async word",
    "start": "937360",
    "end": "942639"
  },
  {
    "text": "speec and the difference is that async word spec the result type of the test is future assertion and there's also an",
    "start": "942639",
    "end": "949519"
  },
  {
    "text": "implicit conversion from assertion to Future assertion so that if you want to mix in some synchronous tests in the",
    "start": "949519",
    "end": "955279"
  },
  {
    "text": "middle of also some a async ones then you can right",
    "start": "955279",
    "end": "960399"
  },
  {
    "text": "but that's what it looks like and then in fact that's the you know what how that person could rewrite the code now",
    "start": "960399",
    "end": "966720"
  },
  {
    "text": "uh the person who uh his name is code actually k o d uh he this guy I forget",
    "start": "966720",
    "end": "975240"
  },
  {
    "text": "his first name Shandra sear code so he was the one that found the problem so to rewrite this now he would just extend a",
    "start": "975240",
    "end": "981519"
  },
  {
    "text": "fund Suite not use Scola Futures and just return a future assertion just map the assertion onto the existing future",
    "start": "981519",
    "end": "989040"
  },
  {
    "text": "so that worked um but I had to figure out what to do with this because this",
    "start": "989040",
    "end": "994720"
  },
  {
    "text": "you know the type say the test has completed when the test function returns",
    "start": "994720",
    "end": "1001160"
  },
  {
    "text": "and now when the test function returns we have a future something we have future search to start with so what I",
    "start": "1001160",
    "end": "1008440"
  },
  {
    "text": "ended up finally doing is is adding uh two more types so uh",
    "start": "1008440",
    "end": "1013959"
  },
  {
    "text": "Suite now has a two subtypes test suite and async test suite and these are where",
    "start": "1013959",
    "end": "1019440"
  },
  {
    "text": "the type of the test function is defined um there are a lot of other ways we you",
    "start": "1019440",
    "end": "1024880"
  },
  {
    "text": "know we thought of all different ways to try to like make it as simple as possible um and this is what we ended up",
    "start": "1024880",
    "end": "1030438"
  },
  {
    "text": "with uh so the E old with fixture that you're used to is now in test suite and",
    "start": "1030439",
    "end": "1037240"
  },
  {
    "text": "there's a new one in asnc twest weite where instead of outcome it's future outcome which is actually a new type and",
    "start": "1037240",
    "end": "1044360"
  },
  {
    "text": "uh what future outcome is it's like a future square brackets outcome but but with",
    "start": "1044360",
    "end": "1049520"
  },
  {
    "text": "a nicer API because the problem is um that future when you work with it you'll",
    "start": "1049520",
    "end": "1055480"
  },
  {
    "text": "get a try which is either a success or a failure and and then if it's an outcome that's either a succeeded a failed a",
    "start": "1055480",
    "end": "1061559"
  },
  {
    "text": "canceled or a pending so if you want to actually map like deal with a failure somehow you have to catch success",
    "start": "1061559",
    "end": "1067280"
  },
  {
    "text": "failure and I just thought that would be confusing to people because they're they're too similar um it they both",
    "start": "1067280",
    "end": "1073919"
  },
  {
    "text": "handle exceptions but in different ways so I just wrapped it with something and now there's just an API I that is very",
    "start": "1073919",
    "end": "1079799"
  },
  {
    "text": "much the scallet test uh domain language it's like scull test terminology so",
    "start": "1079799",
    "end": "1085039"
  },
  {
    "text": "that's called future outcome so the test function in an async style returns future outcome the with fixture method",
    "start": "1085039",
    "end": "1091039"
  },
  {
    "text": "returns fature outcome and the default implementation just invokes a test function again so that I may leave that",
    "start": "1091039",
    "end": "1097400"
  },
  {
    "text": "as a breaking change I think I can actually find a way to deprecate it I think that may be possible I will see and if so I can I will but all you need",
    "start": "1097400",
    "end": "1104799"
  },
  {
    "text": "to do to fix it is just put the word test in front of it so it won't break any code you just over with fixture in",
    "start": "1104799",
    "end": "1111520"
  },
  {
    "text": "the uh test class because that is inherited from test Suite so that's fine",
    "start": "1111520",
    "end": "1116559"
  },
  {
    "text": "but um if you actually pulled it out into a mix in trait um and overload with",
    "start": "1116559",
    "end": "1122000"
  },
  {
    "text": "fixture the mix and trait you can overload WI a bunch of different life cycle methods um if you actually over",
    "start": "1122000",
    "end": "1127640"
  },
  {
    "text": "road with fixture then that will eventually be broken and you need to put the word test in front of Suite in those",
    "start": "1127640",
    "end": "1133080"
  },
  {
    "text": "two places and that's it so I think that's not too bad um because people didn't do that that terribly often",
    "start": "1133080",
    "end": "1140159"
  },
  {
    "text": "okay so um so then now basically you're in future",
    "start": "1140159",
    "end": "1146600"
  },
  {
    "text": "space and and I think the thing about I mentioned there's a different mindset you have to do and it's really just the",
    "start": "1146600",
    "end": "1151679"
  },
  {
    "text": "the mon the monad mindset that what happens in the monad stays in the monad basically you you don't ever want to",
    "start": "1151679",
    "end": "1157080"
  },
  {
    "text": "block and pull the thing out of it you want to just keep sort of stay in",
    "start": "1157080",
    "end": "1162200"
  },
  {
    "text": "future space right so I a bunch of things didn't work anymore one of them was trf finally let me back up and show",
    "start": "1162200",
    "end": "1168240"
  },
  {
    "text": "you remind and you try finally again see this try finally here where you try in",
    "start": "1168240",
    "end": "1174440"
  },
  {
    "text": "calling the delegating the inv invocation of the test function and you do some setup you sort",
    "start": "1174440",
    "end": "1181679"
  },
  {
    "text": "of invoke the test function and try and then in finally you do your cleanup uh if what your test function is",
    "start": "1181679",
    "end": "1189200"
  },
  {
    "text": "returning is a future outcome then you don't want to do cleanup that soon you actually want to wait until the future",
    "start": "1189200",
    "end": "1196000"
  },
  {
    "text": "completes see the problem so what I created instead of Trion there's complete lastly and the re the reason I",
    "start": "1196000",
    "end": "1203480"
  },
  {
    "text": "picked that is because this is not fixed with font but those in fixed withth font those two curly braces at the end",
    "start": "1203480",
    "end": "1210080"
  },
  {
    "text": "lineup but it's like trif finally but for futures and it will work on anything",
    "start": "1210080",
    "end": "1215480"
  },
  {
    "text": "there I had to create a new type class so it's called futuristic which I thought was cool so it will work for any",
    "start": "1215480",
    "end": "1220600"
  },
  {
    "text": "type T whether there is a a futuristic of T defined and I defined one for future",
    "start": "1220600",
    "end": "1226000"
  },
  {
    "text": "outcome and any other kind of future so it'll work in your test code on Futures also um and what it will do is if that",
    "start": "1226000",
    "end": "1234760"
  },
  {
    "text": "blows up like if the code that produce some futuristic thing blows up with an exception that's so instead of try it's",
    "start": "1234760",
    "end": "1240360"
  },
  {
    "text": "complete complete the future if that blows up with an exception because it could it will actually execute the code",
    "start": "1240360",
    "end": "1247080"
  },
  {
    "text": "in lastly just like finally um but if it returns it's different than finally it doesn't",
    "start": "1247080",
    "end": "1253360"
  },
  {
    "text": "execute it at that point it just registers a call back on that future to",
    "start": "1253360",
    "end": "1259320"
  },
  {
    "text": "execute when that future completes and it returns a new futuristic thing that won't complete until that callback is",
    "start": "1259320",
    "end": "1265720"
  },
  {
    "text": "completed so that that's the other problem with like the Futures API like future square brackets outcome it didn't",
    "start": "1265720",
    "end": "1272200"
  },
  {
    "text": "quite fit because I always wanted to give a new future back that didn't complete",
    "start": "1272200",
    "end": "1277960"
  },
  {
    "text": "until the cleanup happens the call back finishes uh so there's an on on success",
    "start": "1277960",
    "end": "1285120"
  },
  {
    "text": "on failure and on complete that won't wait I mean you just they'll just do it off to the side there's an and then on",
    "start": "1285120",
    "end": "1291960"
  },
  {
    "text": "future that will wait so it gives you a new future back that doesn't complete till that thing finishes so you can order your call backs but if that thing",
    "start": "1291960",
    "end": "1299080"
  },
  {
    "text": "blows up with an exception it just ignores it and I didn't want that I wanted it to behave the same as",
    "start": "1299080",
    "end": "1305000"
  },
  {
    "text": "synchronous so if you know in a complete lastly if the if the what's in lastly blows up with an exception the future",
    "start": "1305000",
    "end": "1311919"
  },
  {
    "text": "that complete lastly returns will actually show that exception so and because if the finally",
    "start": "1311919",
    "end": "1318880"
  },
  {
    "text": "blew up in in synchronous case that test would fail with that exception right so that's that's complete lastly so that's",
    "start": "1318880",
    "end": "1325320"
  },
  {
    "text": "one example of something new that we had to invent to sort of support this um",
    "start": "1325320",
    "end": "1330919"
  },
  {
    "text": "another one is now that there's a result type of assertion some things wouldn't work anymore um and so like for example",
    "start": "1330919",
    "end": "1339720"
  },
  {
    "text": "intercept is a an assertion that will make sure a exception is thrown by a bit",
    "start": "1339720",
    "end": "1345400"
  },
  {
    "text": "of code and then return it so you can perform more assertions on it and so people use that all over the place",
    "start": "1345400",
    "end": "1350640"
  },
  {
    "text": "including at the end of tests um but that's not type assertion that's",
    "start": "1350640",
    "end": "1356559"
  },
  {
    "text": "type in this case string index out of bounds exception so that actually wouldn't compile in an async Suite if",
    "start": "1356559",
    "end": "1362080"
  },
  {
    "text": "that was at the end of the test body so I created an assert throws that does the same thing but doesn't return the",
    "start": "1362080",
    "end": "1368279"
  },
  {
    "text": "exception so that's new so that you could stick at the end of an async style test um but uh if you actually want to",
    "start": "1368279",
    "end": "1378000"
  },
  {
    "text": "say that you expect a future will fail with an exception which is something you might want to say in a in an async test now you got to stay in future space um",
    "start": "1378000",
    "end": "1385520"
  },
  {
    "text": "neither of these work you can't really map that future and then add an assert",
    "start": "1385520",
    "end": "1390720"
  },
  {
    "text": "throws because well first of all there's nothing to put in those Dot and you know the dot dot dot",
    "start": "1390720",
    "end": "1397120"
  },
  {
    "text": "there and map won't even be invoked if the f I mean that test function won't be",
    "start": "1397120",
    "end": "1402159"
  },
  {
    "text": "invoked if the future fails and and likewise if you put aert throws around the future it doesn't throw an exception",
    "start": "1402159",
    "end": "1410559"
  },
  {
    "text": "it just fails right so we had to create two new things that are kind of like",
    "start": "1410559",
    "end": "1416080"
  },
  {
    "text": "intercept and assert throws but for futures and um one of them is recover to",
    "start": "1416080",
    "end": "1421840"
  },
  {
    "text": "exceptions so the the future API calls it recovering if you are like go from an exception back to some kind of success",
    "start": "1421840",
    "end": "1428799"
  },
  {
    "text": "so I had one called I had one called recover to exception if illegal State exception so it's it's like recover in",
    "start": "1428799",
    "end": "1436480"
  },
  {
    "text": "future except it has to be that exception recover will do it if any kind of exception it will recover from this",
    "start": "1436480",
    "end": "1442919"
  },
  {
    "text": "one won't recover from the wrong exception it'll give you a test failed exception that that uh says hey I",
    "start": "1442919",
    "end": "1450760"
  },
  {
    "text": "expected this exception but I got that one right um so you put a future inside that",
    "start": "1450760",
    "end": "1455799"
  },
  {
    "text": "and then recover to succeeded is like aert throws it does the same thing makes sure that the future fails with that exception but if it uh does it doesn't",
    "start": "1455799",
    "end": "1463919"
  },
  {
    "text": "return it it returns succeeded Singleton so that can end up at the end of a a test if you want so that's recover",
    "start": "1463919",
    "end": "1471039"
  },
  {
    "text": "to and um there's actually a lot more to the story uh what",
    "start": "1471039",
    "end": "1478880"
  },
  {
    "text": "um I thought I mean one of the questions is like let me go back up to the the",
    "start": "1478880",
    "end": "1484880"
  },
  {
    "text": "diagram here so imagine you've got 10 of these tests and they all return to",
    "start": "1484880",
    "end": "1490240"
  },
  {
    "text": "Future assertion do they run in parallel because it's kind of like the idea of",
    "start": "1490240",
    "end": "1495640"
  },
  {
    "text": "this stuff right that you you might expect they should and so I thought well okay why not uh and then people said",
    "start": "1495640",
    "end": "1502399"
  },
  {
    "text": "actually can you make it not run in parallel because they would put some kind of fixture that they wanted all",
    "start": "1502399",
    "end": "1507480"
  },
  {
    "text": "their tests to share like a database and they didn't want them to interact like",
    "start": "1507480",
    "end": "1513559"
  },
  {
    "text": "interfere with each other so by default they don't run in parallel which is kind",
    "start": "1513559",
    "end": "1518679"
  },
  {
    "text": "of weird but they don't first the they run asynchronously so it could be many different threads potentially but the",
    "start": "1518679",
    "end": "1525640"
  },
  {
    "text": "first one finishes before the second one begins and that one finishes before the third one begins okay so that's one",
    "start": "1525640",
    "end": "1531919"
  },
  {
    "text": "thing and then um whenever you do future. map you need",
    "start": "1531919",
    "end": "1538399"
  },
  {
    "text": "an execution context right and there isn't one so I actually at one point made you create one but then I actually",
    "start": "1538399",
    "end": "1546960"
  },
  {
    "text": "thought well that's a lot of that's borderer plate why don't we give people a default and the thing I was worried",
    "start": "1546960",
    "end": "1553640"
  },
  {
    "text": "about with um the execution context is like it's",
    "start": "1553640",
    "end": "1560000"
  },
  {
    "text": "usually a thread pool like it's multiple threads because the whole idea is to use multiple threads um but that makes",
    "start": "1560000",
    "end": "1566279"
  },
  {
    "text": "people reason about like in test people will make mutable fixtures and stuff I they're not as functional sometimes and",
    "start": "1566279",
    "end": "1574159"
  },
  {
    "text": "so if you're using mutable State you need to worry about synchronizing access to Shared mutable State and if in a",
    "start": "1574159",
    "end": "1580200"
  },
  {
    "text": "future if you just do a linear transformation of Futures even if it's having side effects and mutating state it will actually work because of the you",
    "start": "1580200",
    "end": "1588000"
  },
  {
    "text": "know what future does it will synchronize it but it's it's hard to know when you",
    "start": "1588000",
    "end": "1594520"
  },
  {
    "text": "like don't follow the rules and now you've got a concurrency bug in your test it's not so terrible in your test but it could end up with a Flicker and",
    "start": "1594520",
    "end": "1600520"
  },
  {
    "text": "be waste people's time so so uh what we",
    "start": "1600520",
    "end": "1605679"
  },
  {
    "text": "did for a default execution context is made one called serial execution context",
    "start": "1605679",
    "end": "1611440"
  },
  {
    "text": "with nobody can access but it it actually just remembers what you asked it to do like it actually makes one of",
    "start": "1611440",
    "end": "1617279"
  },
  {
    "text": "those little job cues so the the test the thread that goes and executes your test body and returns a",
    "start": "1617279",
    "end": "1624320"
  },
  {
    "text": "future result anytime it need an execution context it would remember that thing to do and put it in a a cue a list",
    "start": "1624320",
    "end": "1630880"
  },
  {
    "text": "of two do list and then that same thread is used to execute that QE so that's the same thread it's called thread",
    "start": "1630880",
    "end": "1636799"
  },
  {
    "text": "confinement so you don't have to worry about synchronization um it also means you can't block because like JavaScript",
    "start": "1636799",
    "end": "1642480"
  },
  {
    "text": "there's just one thread now so if you actually use the default execution context and do one of these blocking",
    "start": "1642480",
    "end": "1647559"
  },
  {
    "text": "things it will just hang forever which I think eventually you'll figure it out that one",
    "start": "1647559",
    "end": "1653240"
  },
  {
    "text": "um but I thought so we did that but then it's like on what about on JavaScript so on JavaScript for a while we we did not",
    "start": "1653240",
    "end": "1660039"
  },
  {
    "text": "use that one but then we started using it because we thought I mean I wanted it to be",
    "start": "1660039",
    "end": "1665399"
  },
  {
    "text": "consistent and I think it's valuable that you write people want to share code between the jvm and JavaScript that's",
    "start": "1665399",
    "end": "1672240"
  },
  {
    "text": "sort of the point of schola JS I think is people who are already using schola and they have to make JavaScript if they",
    "start": "1672240",
    "end": "1677480"
  },
  {
    "text": "can actually share some code and you know that's and knowledge uh so I just wanted as much as possible to make it",
    "start": "1677480",
    "end": "1683559"
  },
  {
    "text": "work the same uh so that's what we now by default even on uh uh on JavaScript",
    "start": "1683559",
    "end": "1690880"
  },
  {
    "text": "the the default is serial execution context so if you really want to do something multi-threaded and that's what I'm kind of concerned about with",
    "start": "1690880",
    "end": "1697799"
  },
  {
    "text": "JavaScript uh if you want to do something multi-threaded you got to add an a different execution context",
    "start": "1697799",
    "end": "1702960"
  },
  {
    "text": "override this one with a new one and on the jvm also because if you really want a threadpool going then you just make",
    "start": "1702960",
    "end": "1708120"
  },
  {
    "text": "make a new execution context so I did try like I said try to make these two things consistent uh to",
    "start": "1708120",
    "end": "1714440"
  },
  {
    "text": "help people go back and forth before and after work um because any kind of after",
    "start": "1714440",
    "end": "1719519"
  },
  {
    "text": "code is registered as you know on a future like thing and the new thing that",
    "start": "1719519",
    "end": "1725240"
  },
  {
    "text": "comes back doesn't complete until the after code finishes right so I still",
    "start": "1725240",
    "end": "1731080"
  },
  {
    "text": "recommend with fixture but if you use before and after in future space it actually works uh you're just doing side",
    "start": "1731080",
    "end": "1736720"
  },
  {
    "text": "effects at that point but um they happen when you think they would happen and parallel test execution works too that's",
    "start": "1736720",
    "end": "1742159"
  },
  {
    "text": "how you do get parallel test execution and what's weird which I didn't think made sense but it turned out it actually",
    "start": "1742159",
    "end": "1747919"
  },
  {
    "text": "did is it works on JavaScript too and it's like how can you have parallel test execution be any valuable have any value",
    "start": "1747919",
    "end": "1754679"
  },
  {
    "text": "at all if you just have one thread right and the reason is is imagine you have those 10 tests and each one calls into",
    "start": "1754679",
    "end": "1760640"
  },
  {
    "text": "one of those apis that does something for 30 seconds and then later comes back and sticks something at the end of the",
    "start": "1760640",
    "end": "1766919"
  },
  {
    "text": "JavaScript queue it'd be nice to get them all started because it really is",
    "start": "1766919",
    "end": "1772159"
  },
  {
    "text": "multi-threaded instead of taking 30 * 10 300 seconds it could take you know",
    "start": "1772159",
    "end": "1777399"
  },
  {
    "text": "closer to 30 seconds to finish that Suite of tests um so my hope is and and",
    "start": "1777399",
    "end": "1782960"
  },
  {
    "text": "I thought I was close to finishing this I thought it was close to rc1 twice",
    "start": "1782960",
    "end": "1788240"
  },
  {
    "text": "before and I got one of these like issues that took another so I probably",
    "start": "1788240",
    "end": "1794120"
  },
  {
    "text": "shouldn't say this but that last line I don't want to tempt the Universe uh with",
    "start": "1794120",
    "end": "1800039"
  },
  {
    "text": "another you know bold release but I think I think we really are there hopefully so um I I just wanted to leave",
    "start": "1800039",
    "end": "1807440"
  },
  {
    "text": "some time for questions so we have time for question but before that I did want to uh uh say that uh oops I went",
    "start": "1807440",
    "end": "1814559"
  },
  {
    "text": "backwards um nurman and Andrew who did this puz's book are here and we're going to do a book signing after Christopher's",
    "start": "1814559",
    "end": "1821399"
  },
  {
    "text": "talk and we're going to give away three copies and we we usually throw out these puzzles but we we didn't get that organized so we have my business card",
    "start": "1821399",
    "end": "1828559"
  },
  {
    "text": "like out ofd business card and I put a puzzle on back it's a really soft ball it's not a trick question if you come",
    "start": "1828559",
    "end": "1834559"
  },
  {
    "text": "over and bring this and solve the puzzle we'll give you a free copy but anyway we'll be out out there at the break but",
    "start": "1834559",
    "end": "1840000"
  },
  {
    "text": "I like to try to throw them but I don't want to hit anybody in the eyeball so everybody wake up I'm going to go one in the middle one hey there's three three",
    "start": "1840000",
    "end": "1846039"
  },
  {
    "text": "rows is perfect so way over there and I'm trying to try to",
    "start": "1846039",
    "end": "1851200"
  },
  {
    "text": "oh all right wait wait wait wait wait wait that was practice I hit my",
    "start": "1851200",
    "end": "1858039"
  },
  {
    "text": "needed a duh don't kill quit my day job yes all right I'm try that again",
    "start": "1858039",
    "end": "1863639"
  },
  {
    "text": "huh oh there we go look at that it just floated down like snow those guys are really fighting for it you can see that",
    "start": "1863639",
    "end": "1869880"
  },
  {
    "text": "they uh all right there we go sorry I'm GNA have to get in the back here because I'm not",
    "start": "1869880",
    "end": "1875080"
  },
  {
    "text": "Crum crumble it up that's my business card oh well they don't I'm sorry people",
    "start": "1875080",
    "end": "1881159"
  },
  {
    "text": "in the back but it's like the eager people in the front get the free copy um and the other thing is is of course",
    "start": "1881159",
    "end": "1886720"
  },
  {
    "text": "other thing that's free is these stickers if you want any schol stickers we made some of those but uh I'll have",
    "start": "1886720",
    "end": "1892720"
  },
  {
    "text": "them out on the table but anyway I have five minutes for questions if somebody has questions yes oh let me get my glasses",
    "start": "1892720",
    "end": "1900480"
  },
  {
    "text": "yes go ahead I",
    "start": "1900480",
    "end": "1904919"
  },
  {
    "text": "yeah not being deprecated so the question was they've been using when ready which is also in that that uh",
    "start": "1908279",
    "end": "1914360"
  },
  {
    "text": "Scola feutures thing which I forget where the example was when I said future",
    "start": "1914360",
    "end": "1919440"
  },
  {
    "text": "value I think it was actually in his code yeah it was in code's code where is code's",
    "start": "1919440",
    "end": "1925200"
  },
  {
    "text": "code somewhere there it is so this future value another another construct in",
    "start": "1925200",
    "end": "1932200"
  },
  {
    "text": "scolar Futures is when when this future is ready you know it'll pass it in and you can do an assertion so that's",
    "start": "1932200",
    "end": "1937279"
  },
  {
    "text": "blocking it won't work on JavaScript but it works fine on Java uh and the other thing that's a little",
    "start": "1937279",
    "end": "1943240"
  },
  {
    "text": "weird is usually this stuff's about never ever block right right so that's blocking but",
    "start": "1943240",
    "end": "1949799"
  },
  {
    "text": "it's not necessarily bad in a test now I sound like being wishy-washy again but the reason is is because",
    "start": "1949799",
    "end": "1956399"
  },
  {
    "text": "um one of the other reasons we had this uh serial execution",
    "start": "1956399",
    "end": "1961919"
  },
  {
    "text": "context is that if if it's really doing something asynchronous then what what could happen is",
    "start": "1961919",
    "end": "1968360"
  },
  {
    "text": "that the queue empties there's no more jobs to do but the test hasn't finished",
    "start": "1968360",
    "end": "1973919"
  },
  {
    "text": "so what we do in that case is we block so we actually block by default with the serial execution context and",
    "start": "1973919",
    "end": "1980480"
  },
  {
    "text": "the reason is is if I didn't do that if other words if you always use the Glo like the global execution context as a default or something you could get in a",
    "start": "1980480",
    "end": "1987519"
  },
  {
    "text": "situation where 500 tests start at once because there's no nothing",
    "start": "1987519",
    "end": "1992600"
  },
  {
    "text": "throttling them and then they you get so many going that they time out right so",
    "start": "1992600",
    "end": "1998159"
  },
  {
    "text": "that's I don't so block so even if you use this it still might be blocking a little bit behind the scenes to to",
    "start": "1998159",
    "end": "2004039"
  },
  {
    "text": "throttle how many tests are running at the same time thank you than",
    "start": "2004039",
    "end": "2011000"
  }
]