[
  {
    "text": "hi everybody I'm Steve and this is rust journey to async/await I sort of been",
    "start": "3970",
    "end": "9700"
  },
  {
    "text": "this theme have given a lot of talks about rustic Yukon and it seems like I'm always talking about something that's happening like three months in the",
    "start": "9700",
    "end": "15549"
  },
  {
    "text": "future so this sort of continues on that trend of things you know as mentioned this is about how we arrived at a single",
    "start": "15549",
    "end": "22480"
  },
  {
    "text": "weight and like the final couple little steps that are happening as well I'm",
    "start": "22480",
    "end": "28359"
  },
  {
    "text": "giving this talk because I'm on the rust team in general I'm on the rust core team and in charge of the documentation team I work at CloudFlare although not",
    "start": "28359",
    "end": "35320"
  },
  {
    "text": "on rust stuff doing two workshops tomorrow one on rust and helping out with one on cloud floor workers so I",
    "start": "35320",
    "end": "41920"
  },
  {
    "text": "don't know if I'll see any there while I am on the rust team I want to emphasize that I was not like directly involved in",
    "start": "41920",
    "end": "48550"
  },
  {
    "text": "all of this work I am primarily doing this as a like reporting capacity I like",
    "start": "48550",
    "end": "53770"
  },
  {
    "text": "think of myself as like a amateur historian of rust development I like to keep track of how the language has",
    "start": "53770",
    "end": "58899"
  },
  {
    "text": "evolved over time and sort of like deal with these major topics so I was not directly involved in the design I just",
    "start": "58899",
    "end": "65050"
  },
  {
    "text": "read all the comments and talked to people over years so I'm kind of giving you my like semi outside perspective on",
    "start": "65050",
    "end": "70720"
  },
  {
    "text": "how this went down most specifically a lot of people were involved in making a single weight and rust happened but a",
    "start": "70720",
    "end": "75820"
  },
  {
    "text": "special shout-out is deserved from without boats who is the person who has been primarily driving the design over",
    "start": "75820",
    "end": "80980"
  },
  {
    "text": "the last couple years so you know votes is awesome and wonderful okay to start",
    "start": "80980",
    "end": "88360"
  },
  {
    "text": "off to figure out how we actually get to a single weight in rust we sort of have to talk about like what asynchronous",
    "start": "88360",
    "end": "94690"
  },
  {
    "text": "programming actually is and so it turns out that this is really hard to talk about because there are so many",
    "start": "94690",
    "end": "100720"
  },
  {
    "text": "different options in the space of trying to make the computer do more than one thing at once and so the start of this",
    "start": "100720",
    "end": "106510"
  },
  {
    "text": "talk is gonna involve a lot of definitions just to make sure we're all on the same page so so we're gonna start",
    "start": "106510",
    "end": "112870"
  },
  {
    "text": "off with there so people talk about asynchronous computing a sort of along with these other two things which is",
    "start": "112870",
    "end": "118660"
  },
  {
    "text": "parallel computing and concurrent computing so people get these three definitions mixed up all the time but",
    "start": "118660",
    "end": "123820"
  },
  {
    "text": "just to be clear parallel computing is when you're able to do multiple things at once concurrent programming is we're",
    "start": "123820",
    "end": "129789"
  },
  {
    "text": "Nabal to do multiple things but not at once and asynchronous programming is actually unrelated to those two things",
    "start": "129789",
    "end": "136210"
  },
  {
    "text": "it's a totally different axis so let's give into this a little bit more briefly there's also this other",
    "start": "136210",
    "end": "141970"
  },
  {
    "text": "term called a task and so this is sort of a generic term for some sort of computation running inside of a parallel",
    "start": "141970",
    "end": "148300"
  },
  {
    "text": "or concurrent system so this may mean a thread this may not mean a thread this can mean sort of anything it's kind of",
    "start": "148300",
    "end": "154420"
  },
  {
    "text": "just a generic catch-all term for I'm doing some sort of thing inside of an asynchronous or parallel or concurrent",
    "start": "154420",
    "end": "161740"
  },
  {
    "text": "system so here means a task a bunch it's very generic sort of word ok so parallel computing technically things can only be",
    "start": "161740",
    "end": "168670"
  },
  {
    "text": "parallel if you have multiple CPU cores or multiple CPUs it shows a lightning bolt for a computational task just",
    "start": "168670",
    "end": "175300"
  },
  {
    "text": "because I don't know it seemed cool but we sort of have this like timeline of execution and so you have these two",
    "start": "175300",
    "end": "180820"
  },
  {
    "text": "things and they're truly executing independently this is why this is only possible with multiple cores or multiple",
    "start": "180820",
    "end": "186220"
  },
  {
    "text": "CPUs because you fundamentally can't make one processor do two things at once because of physics like it's physically",
    "start": "186220",
    "end": "193330"
  },
  {
    "text": "doing a thing but if you have multiple of them then they can be doing two independent things in one system so you",
    "start": "193330",
    "end": "198580"
  },
  {
    "text": "get parallelism this way the second one is concurrent programming and concurrency means that you like pretend",
    "start": "198580",
    "end": "205570"
  },
  {
    "text": "that you have multiple cores but you don't actually have multiple cores so you do a little bit of work on one thing a little bit of work on another thing",
    "start": "205570",
    "end": "211390"
  },
  {
    "text": "and another will work on another thing and so these two things like all of",
    "start": "211390",
    "end": "216430"
  },
  {
    "text": "these options can also be combined so for example in a lot of systems you have different parallel tasks that are",
    "start": "216430",
    "end": "223500"
  },
  {
    "text": "executing concurrent things inside of the two of them so there's like all sorts of ways you can fit these sort of",
    "start": "223500",
    "end": "228760"
  },
  {
    "text": "things together and so when we talk about asynchronous programming we're talking about language",
    "start": "228760",
    "end": "235209"
  },
  {
    "text": "features that sort of let you write code that is able to be executed in a",
    "start": "235209",
    "end": "240850"
  },
  {
    "text": "parallel or concurrent way and that's sort of because you need the ability to",
    "start": "240850",
    "end": "245950"
  },
  {
    "text": "say like doing things simultaneously if you think about the way that code normally executes you have like the first thing and the second thing the",
    "start": "245950",
    "end": "252040"
  },
  {
    "text": "third thing and they follow down in lines in most forms of programming not all and so like you need some sort of",
    "start": "252040",
    "end": "258130"
  },
  {
    "text": "way to be like actually execute these things at the same time and so that's asynchronous api's okay I'm almost done",
    "start": "258130",
    "end": "266410"
  },
  {
    "text": "with terms I swear and then we can actually productively talk about this cooperative and pre-emptive multitasking",
    "start": "266410",
    "end": "275090"
  },
  {
    "text": "so cooperative multitasking is when all of your tasks have to cooperate to",
    "start": "275090",
    "end": "280229"
  },
  {
    "text": "operate synchronously asynchronously so each task sort of decides when it is",
    "start": "280229",
    "end": "285240"
  },
  {
    "text": "willing to give up the particular resource and have another task execute instead this is the way that like I",
    "start": "285240",
    "end": "291960"
  },
  {
    "text": "originally learned about this because like I think it was like Windows 95 came out and had pre-emptive multitasking or",
    "start": "291960",
    "end": "298500"
  },
  {
    "text": "like Mac OS 8 instead of 7 or whatever and pre-emptive multitasking the system decides when you yield to other tasks so",
    "start": "298500",
    "end": "305400"
  },
  {
    "text": "this means that like any computation can be interrupted in the middle and handed off to something else this is like a",
    "start": "305400",
    "end": "311099"
  },
  {
    "text": "very interesting trade-off because in a system with cooperative multitasking if you have a bad actor they can really",
    "start": "311099",
    "end": "317039"
  },
  {
    "text": "mess everything up because what happens if they never decide to give up control of the situation then they just hog all",
    "start": "317039",
    "end": "322259"
  },
  {
    "text": "the resources so in like an untrusted system you often want pre-emptive multitasking but being able to do that",
    "start": "322259",
    "end": "327810"
  },
  {
    "text": "also adds some overhead and some complexity and some other things and so if you were have a system where you know that you have only good actors then",
    "start": "327810",
    "end": "334889"
  },
  {
    "text": "cooperative multitasking can be a little bit better it just really depends but these two things are sort of like at",
    "start": "334889",
    "end": "340050"
  },
  {
    "text": "odds and then finally I think at my big terminology block native versus green",
    "start": "340050",
    "end": "347310"
  },
  {
    "text": "threading this one gets like even more complicated I'm not going into all the differences here you also hear things",
    "start": "347310",
    "end": "353190"
  },
  {
    "text": "like co-routines and stack lists source tactful co-routines and all these other things but at its core there's this sort",
    "start": "353190",
    "end": "360270"
  },
  {
    "text": "of like dichotomy between native threads which are sometimes called one-to-one threading and these are tasks that your",
    "start": "360270",
    "end": "366089"
  },
  {
    "text": "operating system provides as an API so if you're running sort of a process you're able to say within that process I",
    "start": "366089",
    "end": "372180"
  },
  {
    "text": "would like to execute some tasks and so it's called one-to-one threading because",
    "start": "372180",
    "end": "377210"
  },
  {
    "text": "you get one task for one operating system tasks which sort of implies green",
    "start": "377210",
    "end": "382889"
  },
  {
    "text": "threads which comes next also called end to M or M to end threading I don't see",
    "start": "382889",
    "end": "387930"
  },
  {
    "text": "it consistently used sometimes people put the end first and sometimes M first I don't know but these are when your",
    "start": "387930",
    "end": "392940"
  },
  {
    "text": "programming language or its runtime provides you with a task abstraction and it Maps a certain number of its own",
    "start": "392940",
    "end": "398849"
  },
  {
    "text": "tasks on to the operating systems threads so you get n program threads to em system threads so",
    "start": "398849",
    "end": "405319"
  },
  {
    "text": "that's why it's n2m and why the other one is one to one because there's a correspondence a lot of different",
    "start": "405319",
    "end": "411020"
  },
  {
    "text": "programming languages are using green threads and have for a long time both of these things are interesting and this",
    "start": "411020",
    "end": "417169"
  },
  {
    "text": "particular set of things really gets to the core of why rust made the decisions that it made in order to do async",
    "start": "417169",
    "end": "424300"
  },
  {
    "text": "specifically there on Io so there's some advantages and disadvantages to both of them everything's a trade-off there's no",
    "start": "424300",
    "end": "430969"
  },
  {
    "text": "free lunch native threads have the advantage that they're part of your system and so the operating system is",
    "start": "430969",
    "end": "436939"
  },
  {
    "text": "able to handle it scheduling and that means that it can see every task that's securing on the system and make like the",
    "start": "436939",
    "end": "443029"
  },
  {
    "text": "appropriate choices to do the scheduling because it has total visibility into everything that's running they're also",
    "start": "443029",
    "end": "448909"
  },
  {
    "text": "very straightforward and well understood like threads are an old technology we've",
    "start": "448909",
    "end": "453919"
  },
  {
    "text": "been used for a long time they are hard to use sometimes but in terms of like an API they're not that complicated",
    "start": "453919",
    "end": "459919"
  },
  {
    "text": "and they're like super well understood for because they've existed for a long time however they also have some disadvantages and these are also system",
    "start": "459919",
    "end": "466789"
  },
  {
    "text": "independent so if you look at like Windows versus Linux for example you get some small different differences here but I'm not gonna go super deep into",
    "start": "466789",
    "end": "473509"
  },
  {
    "text": "those details but the defaults around native threads can be kind of heavy and there's a relatively limited number that",
    "start": "473509",
    "end": "479839"
  },
  {
    "text": "you can create due to those sizes so your operating system needs to keep track of all these different threads and",
    "start": "479839",
    "end": "485269"
  },
  {
    "text": "so it has its own structures that use this for bookkeeping and they also have a the primary resource that people are concerned with the threads is the stack",
    "start": "485269",
    "end": "491719"
  },
  {
    "text": "size so sort of like the amount of memory each thread can take and by default that's relatively large on Linux",
    "start": "491719",
    "end": "498289"
  },
  {
    "text": "and Windows and so keeping track of that overhead you know every time you create a thread has them overhead so you can",
    "start": "498289",
    "end": "504649"
  },
  {
    "text": "only create so many of them and given they only have so much memory and you only have so much memory you can only create so many of them green threads on",
    "start": "504649",
    "end": "511909"
  },
  {
    "text": "the other hands their advantages is they're not part of the overall system which is like Ghana hilarious given that",
    "start": "511909",
    "end": "517880"
  },
  {
    "text": "that's also being part of the system is an advantage it's also a disadvantage since your runtime handles scheduling it",
    "start": "517880",
    "end": "524149"
  },
  {
    "text": "can know and sort of prioritize the details about your program and how the bits of your program operate but sort of",
    "start": "524149",
    "end": "530029"
  },
  {
    "text": "like the weird downside of that is now you've obscured this aspect from the overall system so you might get into a",
    "start": "530029",
    "end": "535309"
  },
  {
    "text": "battle but your operating systems the scheduler and then your program scheduler and so that can get weird and complicated but the",
    "start": "535309",
    "end": "542870"
  },
  {
    "text": "major advantage that most people talk about is that they're significantly lighter weight so usually green threads",
    "start": "542870",
    "end": "547970"
  },
  {
    "text": "start off with a stack size that's like a tenth to a hundredth of the size of a native thread which means you can create tens to hundreds more of them is not",
    "start": "547970",
    "end": "555560"
  },
  {
    "text": "uncommon in systems that are built around green threads you start up say like a million threads like that's totally reasonable but it's not",
    "start": "555560",
    "end": "561590"
  },
  {
    "text": "something you would want to do with an operating system thread because you would run a ram and so there's some",
    "start": "561590",
    "end": "567920"
  },
  {
    "text": "disadvantages there largely around the fact that these are not part of the native system anymore and so if your green thread runs out of",
    "start": "567920",
    "end": "575690"
  },
  {
    "text": "that very small amount of stack then has to do something there are many different ways to handle this and this is a",
    "start": "575690",
    "end": "580760"
  },
  {
    "text": "largely where all the different implementations of green threads kind of break down but it needs to grow and",
    "start": "580760",
    "end": "585770"
  },
  {
    "text": "change the size of that stack and then copy the old stack over and do all this stuff and so that can cause some issues and then also when you call into C code",
    "start": "585770",
    "end": "592700"
  },
  {
    "text": "C expects like a real actual stack and so this can introduce some overhead when",
    "start": "592700",
    "end": "598520"
  },
  {
    "text": "you have to switch between the stack from your green thread and the stack from the native thing and so that can be",
    "start": "598520",
    "end": "604280"
  },
  {
    "text": "like a problem so which one of these is appropriate it depends entirely on what you're trying to do and largely the",
    "start": "604280",
    "end": "611120"
  },
  {
    "text": "story that I'm gonna be telling you today is about how rust thought that one of these things was the right way to do things and then painfully over years",
    "start": "611120",
    "end": "617540"
  },
  {
    "text": "slowly switch to the other one sort of um okay so why why do we care about any",
    "start": "617540",
    "end": "624770"
  },
  {
    "text": "of this stuff at all this is the end of my giant definitions block sorry there's just so many things here that you have",
    "start": "624770",
    "end": "630200"
  },
  {
    "text": "to like piece together to really like form a coherent story about this I needed to like start off by doing that",
    "start": "630200",
    "end": "636310"
  },
  {
    "text": "there's this old thing called the C 10k problem and I took the screenshot this was the website that first introduced me",
    "start": "636310",
    "end": "642530"
  },
  {
    "text": "to this problem it's a little old if you can't tell it's time for web servers to",
    "start": "642530",
    "end": "648830"
  },
  {
    "text": "handle ten thousand ten thousand clients simultaneously don't you think after all",
    "start": "648830",
    "end": "654560"
  },
  {
    "text": "the web is a big place now computers are big too you can buy a gigahertz machine with two gigabytes of RAM and a gigabyte",
    "start": "654560",
    "end": "662030"
  },
  {
    "text": "Ethernet card for $1,200 which you know now you keep going into this thing right",
    "start": "662030",
    "end": "667850"
  },
  {
    "text": "but like in nine 99 one of the busiest FTP sites cd-rom comm actually handled 10,000 clients",
    "start": "667850",
    "end": "675399"
  },
  {
    "text": "simultaneously like I just love that sentence because it really positions you in this like late 90s kind of mindset",
    "start": "675399",
    "end": "681370"
  },
  {
    "text": "right like FTP site not a thing people use anymore most of the time CD ROMs and",
    "start": "681370",
    "end": "686970"
  },
  {
    "text": "cd-rom comm just like really spells out 1999 for me I don't know but ultimately",
    "start": "686970",
    "end": "693010"
  },
  {
    "text": "the point here is that like we need to be able to handle as many like as many",
    "start": "693010",
    "end": "700209"
  },
  {
    "text": "users as possible especially when we're building web services and so this is the kind of thing that like as the internet",
    "start": "700209",
    "end": "705610"
  },
  {
    "text": "grew became more and more important and so we had to start thinking about this and so this is kind of where rusts async",
    "start": "705610",
    "end": "711970"
  },
  {
    "text": "story kind of kicks off even though Rus did not exist in 1999 these problems have sort of been like happening over",
    "start": "711970",
    "end": "718420"
  },
  {
    "text": "the last 20 years to some degree and so back in those days we have this web server called Apache you can still use",
    "start": "718420",
    "end": "724300"
  },
  {
    "text": "Apache today obviously and I want to make a point that is not like this today although I think you can still",
    "start": "724300",
    "end": "729370"
  },
  {
    "text": "technically use it like this but I don't know why you would this is Apache with its pre fork behavior and basically what",
    "start": "729370",
    "end": "735940"
  },
  {
    "text": "happens is is it would spawn so you have this control process that would listen for a connection somebody hits your web",
    "start": "735940",
    "end": "741250"
  },
  {
    "text": "site and then a connection would come in and it would spawn a child process to handle that connection and so you'd be",
    "start": "741250",
    "end": "748570"
  },
  {
    "text": "able to do this with these resources this is like very very heavyweight this is like using like a whole process to handle things and so then you know you",
    "start": "748570",
    "end": "755529"
  },
  {
    "text": "move into other sort of options but like back in the day you know this was like fine but it was not like it was to",
    "start": "755529",
    "end": "761140"
  },
  {
    "text": "resource-intensive and so what they did was they moved to this worker model so instead of spawning",
    "start": "761140",
    "end": "767170"
  },
  {
    "text": "a whole process for each incoming connection a child process would have its own thread pool with its own",
    "start": "767170",
    "end": "772449"
  },
  {
    "text": "individual threads running inside that process and these would be operating system like one-to-one threads and they",
    "start": "772449",
    "end": "779589"
  },
  {
    "text": "would sort of handoff connections to these thread pools and this kind of got us much farther we were able to do more",
    "start": "779589",
    "end": "785110"
  },
  {
    "text": "with less resources because we were no longer using this sort of like extremely heavy data structure to to handle more",
    "start": "785110",
    "end": "791079"
  },
  {
    "text": "and more traffic on the web okay I'm gonna stop talking about the past now",
    "start": "791079",
    "end": "796779"
  },
  {
    "text": "let's actually talk a little bit about rest finally 15 minutes into my presentation so rust",
    "start": "796779",
    "end": "803500"
  },
  {
    "text": "originally built by Mozilla and the idea was that it would be enhancing Firefox which is an HTTP client not an HTTP",
    "start": "803500",
    "end": "810640"
  },
  {
    "text": "server and this does mean that we care about i/o but the situation is very different like your particular instance",
    "start": "810640",
    "end": "816160"
  },
  {
    "text": "of Firefox is not handling 10,000 requests at the same time or a million",
    "start": "816160",
    "end": "821260"
  },
  {
    "text": "requests it's the one that's like one of those making those requests to a server and so having efficient IO was important",
    "start": "821260",
    "end": "828430"
  },
  {
    "text": "because you know you do need to download web pages faster but figuring out immediately how to handle massive scale",
    "start": "828430",
    "end": "834760"
  },
  {
    "text": "was not necessarily an extreme priority because it was primarily gonna be operating in this client capacity so",
    "start": "834760",
    "end": "841720"
  },
  {
    "text": "this is some screenshots of the old documentation for rust rust originally had this module called green and this",
    "start": "841720",
    "end": "848590"
  },
  {
    "text": "was a green scheduling library with green threads as I pointed out m2n",
    "start": "848590",
    "end": "853980"
  },
  {
    "text": "original rust was like very influenced by Erlang and actually looked much more similar to go today than it then rust",
    "start": "853980",
    "end": "861820"
  },
  {
    "text": "actually does like they were much more similar way back in the day and so West was like okay we're just going to give",
    "start": "861820",
    "end": "867550"
  },
  {
    "text": "you these green threads because the idea is if you want to be efficient of this at all you spin up a zillion green threads and you handle them for",
    "start": "867550",
    "end": "873339"
  },
  {
    "text": "connection and that's like totally fine they also had this net library that",
    "start": "873339",
    "end": "880839"
  },
  {
    "text": "existed and so this was synchronous but non-blocking network i/o and for some",
    "start": "880839",
    "end": "886510"
  },
  {
    "text": "reason it repeats twice I don't know what this old bug was in the docs if you see this module it says the same thing two times I don't know anyway you were",
    "start": "886510",
    "end": "894580"
  },
  {
    "text": "able to do very basic like TCP and UDP things in the standard library and it",
    "start": "894580",
    "end": "899770"
  },
  {
    "text": "was all non-blocking and therefore also synchronous which is weird like wait a minute I thought the",
    "start": "899770",
    "end": "905589"
  },
  {
    "text": "whole point of like async was to be non blocking and the synchronous would not be blocking turns out there's yet",
    "start": "905589",
    "end": "911020"
  },
  {
    "text": "another thing we didn't talk about in this space so many things like isn't this a contradiction at all actually",
    "start": "911020",
    "end": "916900"
  },
  {
    "text": "it's not there's sort of this graph where there's only three out of the four things so you can have these two",
    "start": "916900",
    "end": "922089"
  },
  {
    "text": "dichotomies of synchronous and asynchronous i/o and blocking or non blocking i/o and they're actually",
    "start": "922089",
    "end": "927280"
  },
  {
    "text": "technically different so synchronous blocking i/o is like what the original",
    "start": "927280",
    "end": "933370"
  },
  {
    "text": "Ruby interpreter did and what the original everything interpreter did basically which is you write your code in a way that looks like it blocks and every time",
    "start": "933370",
    "end": "939890"
  },
  {
    "text": "you call an i/o function it blocks everything this is very slow but it worked really well for a while asynchronous and blocking doesn't really",
    "start": "939890",
    "end": "946760"
  },
  {
    "text": "make any sense because why are you writing your code in a way that enables you to not block and then block on it so I don't know any languages that actually",
    "start": "946760",
    "end": "952340"
  },
  {
    "text": "does this because it's like sort of nonsense but there's actually a difference in non-blocking i/o with",
    "start": "952340",
    "end": "958580"
  },
  {
    "text": "synchronous and asynchronous versions of this thing and so go and Ruby today",
    "start": "958580",
    "end": "963910"
  },
  {
    "text": "actually offer a synchronous non-blocking i/o and what that means is when you write go code you're not",
    "start": "963910",
    "end": "969650"
  },
  {
    "text": "writing in a way that looks async you're writing in a way that looks like it goes through step by step by step but inside",
    "start": "969650",
    "end": "975320"
  },
  {
    "text": "in the runtime it actually transparently does non-blocking i/o and it will pause your program there whereas like if you",
    "start": "975320",
    "end": "981560"
  },
  {
    "text": "look at nodejs it's asynchronous and non blocking so you write all your code in an async manner but it's also non",
    "start": "981560",
    "end": "987440"
  },
  {
    "text": "blocking and so like this also there's a ton of options in this space and there's",
    "start": "987440",
    "end": "992690"
  },
  {
    "text": "different reasons why different languages pick things in this trade-off and so like we for rust had to figure out like which one of these things makes",
    "start": "992690",
    "end": "998960"
  },
  {
    "text": "any sense originally we picked a synchronous and non blocking the",
    "start": "998960",
    "end": "1004210"
  },
  {
    "text": "advantage of synchronous and blocking is like it's very straightforward but it's like not performant at all so that was never really gonna be an option",
    "start": "1004210",
    "end": "1009960"
  },
  {
    "text": "asynchronous and non blocking is nice because you don't have to write your code in a different way you just kind of",
    "start": "1009960",
    "end": "1015520"
  },
  {
    "text": "write your code the way that you would normally write it but you get some performance benefits because under the hood the runtime does you know normal",
    "start": "1015520",
    "end": "1022240"
  },
  {
    "text": "things and so this is also really common in languages that start off with",
    "start": "1022240",
    "end": "1028240"
  },
  {
    "text": "synchronous and blocking i/o and they want more performance because it doesn't require your code to change in order to",
    "start": "1028240",
    "end": "1033310"
  },
  {
    "text": "get faster and so you can sort of like do it later so I mentioned Ruby because I was familiar with Ruby beforehand it",
    "start": "1033310",
    "end": "1039370"
  },
  {
    "text": "was kind of the same thing like eventually they added non-blocking i/o internally no one's Ruby programs needed to change everything just kind of got",
    "start": "1039370",
    "end": "1045310"
  },
  {
    "text": "faster asynchronous non-blocking your code looks like it doesn't block and it",
    "start": "1045310",
    "end": "1051220"
  },
  {
    "text": "doesn't block but it's harder to write because you have to deal with a synchronicity in some in some fashion so",
    "start": "1051220",
    "end": "1058080"
  },
  {
    "text": "we had this blocking not like blocking but asynchronous i/o in rust but",
    "start": "1058080",
    "end": "1064330"
  },
  {
    "text": "unfortunately that wasn't good enough see this is what the rest website used",
    "start": "1064330",
    "end": "1070090"
  },
  {
    "text": "to look like time ago and it describes rust as a systems programming language that runs blazingly fast prevents all crashes and",
    "start": "1070090",
    "end": "1077090"
  },
  {
    "text": "eliminates data races but when I told you before about like green threads versus system threads like green threads",
    "start": "1077090",
    "end": "1083480"
  },
  {
    "text": "are provided by your runtime and native threads are provided by your OS like what does it mean to be a systems",
    "start": "1083480",
    "end": "1088910"
  },
  {
    "text": "programming language if you don't offer your users the ability to use system threads like it's like a fundamental API",
    "start": "1088910",
    "end": "1095000"
  },
  {
    "text": "of the OS but we're not gonna let you use it that seemed really like incoherent and so we didn't think that",
    "start": "1095000",
    "end": "1100880"
  },
  {
    "text": "like blocking green threads was really like the answer for rust ultimately and",
    "start": "1100880",
    "end": "1106040"
  },
  {
    "text": "this became like one of the first big battles in rust design there were actually people like threatened to fork",
    "start": "1106040",
    "end": "1111440"
  },
  {
    "text": "the language over the situation and like what ended up happening was you'll see a couple releases later the docs are a",
    "start": "1111440",
    "end": "1117770"
  },
  {
    "text": "little fancier now we provided this sort of native package that would give you one to one threading as long as alongside the green",
    "start": "1117770",
    "end": "1125690"
  },
  {
    "text": "package that would give you the m10 threading and so the idea was that you would get to choose what thing was right for your use case you'd write some code",
    "start": "1125690",
    "end": "1132110"
  },
  {
    "text": "and it would just like they're both threads right so we could just offer an API where sometimes you use green",
    "start": "1132110",
    "end": "1138320"
  },
  {
    "text": "threads if you want it and sometimes you native native threads if you want it and everything like should be totally good and dandy right you get all the options",
    "start": "1138320",
    "end": "1143840"
  },
  {
    "text": "turns out that like doesn't actually really work and so we had this whole",
    "start": "1143840",
    "end": "1149900"
  },
  {
    "text": "thing this is a bunch of text I'm not gonna read you but basically like you write your code against this sort of runtime interface and you would pick",
    "start": "1149900",
    "end": "1156140"
  },
  {
    "text": "which one that that was also not good the battles continued people still",
    "start": "1156140",
    "end": "1162500"
  },
  {
    "text": "threatened to like actually for crusts someone did and then like five people favorite on github and nobody used the",
    "start": "1162500",
    "end": "1167510"
  },
  {
    "text": "fork anyway but like it was a serious problem and like you know we weren't like happy with this situation and part",
    "start": "1167510",
    "end": "1174080"
  },
  {
    "text": "of the reason why is so this is like an example of an RFC where we eventually",
    "start": "1174080",
    "end": "1179240"
  },
  {
    "text": "decided to remove the runtime so rest of this open design process where you can submit improvements for the language and",
    "start": "1179240",
    "end": "1184640"
  },
  {
    "text": "this is RFC 230 which is the one that actually removed green threads entirely and so what we decided was like we",
    "start": "1184640",
    "end": "1194200"
  },
  {
    "text": "offering both doesn't actually work and the reason it didn't work was that in order to do the abstraction to put above",
    "start": "1194200",
    "end": "1201530"
  },
  {
    "text": "both of them you added so much bookkeeping to the green that they were not actually very lightweight anymore they were just kind",
    "start": "1201530",
    "end": "1207080"
  },
  {
    "text": "of a crappier version of one-to-one threads so like they weren't actually faster in performance and there's no reason you'd pick them and like if you",
    "start": "1207080",
    "end": "1214370"
  },
  {
    "text": "gave people the ability to sort of use operating system threads and green threads it just got way too complicated",
    "start": "1214370",
    "end": "1220130"
  },
  {
    "text": "and like it was just bad and so with 1.0 kind of like looming we",
    "start": "1220130",
    "end": "1226610"
  },
  {
    "text": "had to decide like we're gonna be freezing an interface sort of for all time so like what do we actually do here",
    "start": "1226610",
    "end": "1232490"
  },
  {
    "text": "because this clear that the situation is not working and it's clear the other situation was not working so we decided",
    "start": "1232490",
    "end": "1239090"
  },
  {
    "text": "operating system threads are part of the operating system we're systems language those things work",
    "start": "1239090",
    "end": "1244130"
  },
  {
    "text": "it's fine let's just do it so rust 1.0 shipped with a very minimal",
    "start": "1244130",
    "end": "1249440"
  },
  {
    "text": "like straightforward operating system threads everything is like blocking and",
    "start": "1249440",
    "end": "1254600"
  },
  {
    "text": "it's just OS threads and you don't get anything fancy and so that was great and",
    "start": "1254600",
    "end": "1260720"
  },
  {
    "text": "it got us it let us get rust won't point out the door and that was awesome this was in May of 2015 so you can see this",
    "start": "1260720",
    "end": "1267140"
  },
  {
    "text": "story like started sort of in like 2011 2012 we're up to 2015 now we still got",
    "start": "1267140",
    "end": "1272450"
  },
  {
    "text": "four years to go right 15:19 yeah so uh the rest 1.0",
    "start": "1272450",
    "end": "1278540"
  },
  {
    "text": "happened but like still everything wasn't actually totally great see people",
    "start": "1278540",
    "end": "1283700"
  },
  {
    "text": "really loved rust and that was really awesome but that meant that they used it more and when people started using",
    "start": "1283700",
    "end": "1289100"
  },
  {
    "text": "things more they start wanting more stuff from you.if rest had faded into obscurity we probably were just sort of",
    "start": "1289100",
    "end": "1294320"
  },
  {
    "text": "stuck with the only thread like the thread api and that would have been totally it and that would've been fine but it turns out that people wanted to",
    "start": "1294320",
    "end": "1299780"
  },
  {
    "text": "build more and more stuff and specifically they started to really want to be able to build network services in",
    "start": "1299780",
    "end": "1305030"
  },
  {
    "text": "rust so this is where that history with apache comes crashing back in and that like people actually didn't want to just",
    "start": "1305030",
    "end": "1311420"
  },
  {
    "text": "build clients and firefox and stuff like that they actually wanted to be able to build network services to do stuff and so they",
    "start": "1311420",
    "end": "1319460"
  },
  {
    "text": "started building them with the existing api's and that led us to like like so",
    "start": "1319460",
    "end": "1325550"
  },
  {
    "text": "russ is supposed to be a high-performance programming language but like the IO IO model feels like it's",
    "start": "1325550",
    "end": "1331640"
  },
  {
    "text": "out of 1999 like old-school Apache like spin up all these big heavyweight threads and",
    "start": "1331640",
    "end": "1337409"
  },
  {
    "text": "it definitely wasn't performing as well as people want it to be even though rust is like supposed to be a super high",
    "start": "1337409",
    "end": "1343019"
  },
  {
    "text": "performance language and like how could we claim that like we're as fast as C well just not literally being as fast as",
    "start": "1343019",
    "end": "1348419"
  },
  {
    "text": "C because IO is like a problem so this eventually led us to have to come up with a totally different",
    "start": "1348419",
    "end": "1354389"
  },
  {
    "text": "solution as well and so the real problem here is that native threads are a bad",
    "start": "1354389",
    "end": "1360360"
  },
  {
    "text": "fit for IO and that's because of one word economy CPU bound versus i/o bound snuck one more definition in here I",
    "start": "1360360",
    "end": "1366990"
  },
  {
    "text": "think there might actually be two or three more but so these are like ways to",
    "start": "1366990",
    "end": "1372240"
  },
  {
    "text": "characterize different kinds of computations so a CPU bound computation is when your processor is doing like a lot of active work so how fast you can",
    "start": "1372240",
    "end": "1379710"
  },
  {
    "text": "do this work depends on how fast your CPU is able to crunch all those numbers and get that work done",
    "start": "1379710",
    "end": "1385279"
  },
  {
    "text": "whereas IO bound happens when you're doing a lot of networking and that often means that the speed of completing the",
    "start": "1385279",
    "end": "1390779"
  },
  {
    "text": "task is based on doing a lot of i/o and the problem with IO is you're often waiting on other people so if I'm making",
    "start": "1390779",
    "end": "1397350"
  },
  {
    "text": "a request to a server somewhere it doesn't matter if I have like the fastest CPU that exists or a 486 if it",
    "start": "1397350",
    "end": "1402809"
  },
  {
    "text": "takes the web server one second to respond I'm gonna be waiting one second because like it's not about my CPU it's",
    "start": "1402809",
    "end": "1408750"
  },
  {
    "text": "about the other thing in the system and so that's like the real problem here is that when you're doing a lot of i/o",
    "start": "1408750",
    "end": "1414539"
  },
  {
    "text": "you're actually mostly just waiting around for other people you're not making use of your CPUs resources to do",
    "start": "1414539",
    "end": "1420090"
  },
  {
    "text": "that kind of stuff you're just like waiting and doing nothing this is why it scales actually because it turns out",
    "start": "1420090",
    "end": "1426330"
  },
  {
    "text": "that the fastest thing to do is nothing at all so if you have like a ton of people that are all trying to like access your website at the same time be are waiting",
    "start": "1426330",
    "end": "1433470"
  },
  {
    "text": "on most of them you could handle even more people because you're not actively doing work for most of your visitors and this is why a synchronous stuff really",
    "start": "1433470",
    "end": "1440669"
  },
  {
    "text": "scales up well when you're doing i/o and turns out that parallelism is generally better for things that are CPU bounds so",
    "start": "1440669",
    "end": "1446130"
  },
  {
    "text": "you kind of stew don't want both but like it doesn't like native threads in that whole model like don't really work",
    "start": "1446130",
    "end": "1451679"
  },
  {
    "text": "very well in this situation because when you're doing a lot of waiting if you make a thread for every single incoming",
    "start": "1451679",
    "end": "1456990"
  },
  {
    "text": "connection you're tying up all the system resources and literally do nothing with them so like it doesn't",
    "start": "1456990",
    "end": "1462240"
  },
  {
    "text": "work so some other programming languages have come along that have solved these problems I'm using go here because it's",
    "start": "1462240",
    "end": "1468779"
  },
  {
    "text": "popular and people familiar with it Erlang does the same thing go kind of took this from Erlang and you may recognize this from the earlier part of",
    "start": "1468779",
    "end": "1474730"
  },
  {
    "text": "Russ steel so it has asynchronous i/o but blocking with green threads so what",
    "start": "1474730",
    "end": "1479749"
  },
  {
    "text": "happens is you write your code and when you do an i/o call the the runtime itself will sort of sleep and go",
    "start": "1479749",
    "end": "1486080"
  },
  {
    "text": "routines you can map a bunch of go routines onto a single operating system thread and life is good like you get",
    "start": "1486080",
    "end": "1491899"
  },
  {
    "text": "higher performance this is totally like a super battle-tested well-worn way to do this kind of thing",
    "start": "1491899",
    "end": "1497139"
  },
  {
    "text": "however previously in this presentation you may remember this slide and green",
    "start": "1497139",
    "end": "1503360"
  },
  {
    "text": "threads do have a big big disadvantage and that's when you call in to C code it's slower this is totally fine for go",
    "start": "1503360",
    "end": "1510470"
  },
  {
    "text": "because go is trying to like put everything you go and that's also totally fine for Erlang because like it's not that big of a deal you're not",
    "start": "1510470",
    "end": "1516470"
  },
  {
    "text": "using Erlang to crunch numbers but rust is supposed to be a systems programming language so like if we did green threads",
    "start": "1516470",
    "end": "1522740"
  },
  {
    "text": "what would a systems programming language that's more expensive to call in to see an operating system code like mean like that's also incoherent so we",
    "start": "1522740",
    "end": "1529639"
  },
  {
    "text": "couldn't really copy this model and I want to emphasize it that's not because doing the other thing is like the wrong thing it just turns out that when you're",
    "start": "1529639",
    "end": "1536389"
  },
  {
    "text": "building different kinds of languages you have different constraints and so our constraints are that we had no overhead and calling into C we designed",
    "start": "1536389",
    "end": "1542960"
  },
  {
    "text": "the language itself around this kind of thing so if we had to do a FRA oh that would be terrible and so this is also",
    "start": "1542960",
    "end": "1548119"
  },
  {
    "text": "like part of why we got rid of the green green threading API that existed a long time ago too this is like a second reason that didn't work but also sort of",
    "start": "1548119",
    "end": "1554720"
  },
  {
    "text": "why we couldn't really return to it luckily there's actually another way",
    "start": "1554720",
    "end": "1561009"
  },
  {
    "text": "there's this other web server that became popular eventually and that's called nginx and nginx did asynchronous",
    "start": "1561009",
    "end": "1567350"
  },
  {
    "text": "IO with this thing called an event loop there was no event loop picture so I did draw my own I don't know if I did a good job or not whatever and it flipped the",
    "start": "1567350",
    "end": "1573409"
  },
  {
    "text": "arrows around but the idea here is the thing called event at i/o where you sort of have these events and you register",
    "start": "1573409",
    "end": "1580309"
  },
  {
    "text": "handlers for each event and then it fires off this handler whenever the event actually occurs and this means you",
    "start": "1580309",
    "end": "1586429"
  },
  {
    "text": "get really good performance but you also don't need multiple threads because the event loop is one single thread that is",
    "start": "1586429",
    "end": "1592730"
  },
  {
    "text": "handling running all these things most of the things are sleeping so it's totally fine you're not spending up new threads for them and it all just kind of",
    "start": "1592730",
    "end": "1599179"
  },
  {
    "text": "works this guy named Ryan Dahl who back in 2009 the assistant called nodejs you may have",
    "start": "1599179",
    "end": "1606050"
  },
  {
    "text": "heard of it and it's a little hard to read in this wonderful screenshot of this terrible hand camp this is the",
    "start": "1606050",
    "end": "1612800"
  },
  {
    "text": "original like Jess coffee you so it was the first one and it was 2009 so there ought a V set up wasn't that great and",
    "start": "1612800",
    "end": "1618620"
  },
  {
    "text": "you upload that to YouTube and then you screenshot it and you paste it into a presentation you get this so I'm sorry but uh it says there vented non-blocking",
    "start": "1618620",
    "end": "1626690"
  },
  {
    "text": "i/o was really important and that's kind of like the whole reason it's the third bullet point like what nodejs is",
    "start": "1626690",
    "end": "1632120"
  },
  {
    "text": "server-side JavaScript built on v8 evented non-blocking i/o and the rest of this presentation goes into why like IO",
    "start": "1632120",
    "end": "1638900"
  },
  {
    "text": "and handling IO is like the reason that node existed and Ryan cared a lot about this a lot and so like enabling this",
    "start": "1638900",
    "end": "1645020"
  },
  {
    "text": "kind of thing in a programming language was important to him so the issue of",
    "start": "1645020",
    "end": "1650270"
  },
  {
    "text": "invented IO is that it really requires like non-blocking api is because when you combine blocking code and non locking code together things get awkward",
    "start": "1650270",
    "end": "1656420"
  },
  {
    "text": "but that's a whole separate talk Allah cannot get into but fundamentally like the way this works in node is if you",
    "start": "1656420",
    "end": "1662750"
  },
  {
    "text": "have a blocking API like this top one you call filesystem read file sync and this blocks until the file is read and",
    "start": "1662750",
    "end": "1668780"
  },
  {
    "text": "comes into data but since we need to like do this asynchronously and we're registering those events so the event",
    "start": "1668780",
    "end": "1673910"
  },
  {
    "text": "loop can process it this means you have callbacks so here's the equivalent example asynchronous you pass a closure",
    "start": "1673910",
    "end": "1680690"
  },
  {
    "text": "into read file and you check things inside of there and so this this closure happens this is like a minor",
    "start": "1680690",
    "end": "1686450"
  },
  {
    "text": "transformation it looks totally fine the problem comes when you start building bigger and bigger and bigger things you",
    "start": "1686450",
    "end": "1692270"
  },
  {
    "text": "get this callback hell Turner that the website callback hell calm this is an example that they have of writing",
    "start": "1692270",
    "end": "1698510"
  },
  {
    "text": "JavaScript in this style basically you end up there's also this amazing image and put in the presentation but somebody",
    "start": "1698510",
    "end": "1703940"
  },
  {
    "text": "made Rio giving a Hadouken like to like click this thing to the pushing everything over I don't know if any",
    "start": "1703940",
    "end": "1709700"
  },
  {
    "text": "plays video games here but the point is is that like when you start writing this callback stuff stuff start drifting",
    "start": "1709700",
    "end": "1715280"
  },
  {
    "text": "right and you can't really like do a whole lot about it it's sort of awkward but javascript people are crafty and",
    "start": "1715280",
    "end": "1722000"
  },
  {
    "text": "they came up with this thing called promises so promise is like an object that gives you a value that's not",
    "start": "1722000",
    "end": "1728450"
  },
  {
    "text": "necessarily known when the promise is built the definition says and so this lets a promise is either pending which",
    "start": "1728450",
    "end": "1734690"
  },
  {
    "text": "means that the computation isn't finished yet it's filled meaning either succeeded or it was rejected meaning operation failed",
    "start": "1734690",
    "end": "1741939"
  },
  {
    "text": "this is fine this lets you take code that looks like this instead so here's an example from",
    "start": "1741939",
    "end": "1748369"
  },
  {
    "text": "MDN where you create a promise and then after a certain period of time 250 milliseconds you resolve it with success",
    "start": "1748369",
    "end": "1754849"
  },
  {
    "text": "and so then instead of like chaining nested callbacks you can then say my promise dot then and do another thing",
    "start": "1754849",
    "end": "1761269"
  },
  {
    "text": "and so we've removed that right word drift because now we just chained then in line so now we have a zillion",
    "start": "1761269",
    "end": "1766519"
  },
  {
    "text": "closures vertically instead of a zillion closures indented the whole way which is better admittedly but still not",
    "start": "1766519",
    "end": "1773839"
  },
  {
    "text": "great for another couple reasons like Ben then and then then the folks over at",
    "start": "1773839",
    "end": "1781129"
  },
  {
    "text": "Twitter also we're dealing with scale they had originally built their stuff in Ruby on Rails and it was not scaling in",
    "start": "1781129",
    "end": "1786649"
  },
  {
    "text": "part because of i/o issues and so they ended up rewriting everything on the JVM and being really invested in Scala and",
    "start": "1786649",
    "end": "1792529"
  },
  {
    "text": "so there was this paper called your serve as a function that came out I was talking about how they built high",
    "start": "1792529",
    "end": "1797599"
  },
  {
    "text": "performance network services at Twitter and it introduces this concept called a future among other things and a future",
    "start": "1797599",
    "end": "1805129"
  },
  {
    "text": "is sort of like a promise but different it's a little tough basically like they",
    "start": "1805129",
    "end": "1810649"
  },
  {
    "text": "represent the exact same ideas but they have a different API I'm not gonna get into that at this particular moment but",
    "start": "1810649",
    "end": "1816019"
  },
  {
    "text": "we saw this happening in the Scala world and we were like aha this seems awesome and we know that like callbacks are not",
    "start": "1816019",
    "end": "1822169"
  },
  {
    "text": "great because we've learned from node and promises are better and futures are sort of like a different version of promise and they seem to fit a little",
    "start": "1822169",
    "end": "1827719"
  },
  {
    "text": "bit better Scala is also statically typed we're statically typed like let's do what they're doing and so um in",
    "start": "1827719",
    "end": "1834649"
  },
  {
    "text": "August of 2016 we announced zero cost futures and rust and so we wanted the",
    "start": "1834649",
    "end": "1840409"
  },
  {
    "text": "ability to be able to do this sort of asynchronous programming in a better way you notice that date there 2016 still",
    "start": "1840409",
    "end": "1846379"
  },
  {
    "text": "churning along so here's what futures look like in 0.1 in 2016 so you have",
    "start": "1846379",
    "end": "1852709"
  },
  {
    "text": "this trait called future and I don't know if all of you arrest programmers or not but basically a trait is like an interface so this interface has two",
    "start": "1852709",
    "end": "1858919"
  },
  {
    "text": "required types an item type and error type and there's this function called pol which you would call it and it would",
    "start": "1858919",
    "end": "1865129"
  },
  {
    "text": "return either the item or an error there's also a ton of other convenience functions on here",
    "start": "1865129",
    "end": "1870620"
  },
  {
    "text": "like and then as you get this code at the bottom that looks very similar to that promise code except for says and then instead of then cuz you know can't",
    "start": "1870620",
    "end": "1878270"
  },
  {
    "text": "name everything the same way across languages that would be too hard but you get the same idea of like okay we can",
    "start": "1878270",
    "end": "1884390"
  },
  {
    "text": "write these things and this is an asynchronous computation that processes these things in this order and so you",
    "start": "1884390",
    "end": "1889970"
  },
  {
    "text": "build up these giant chains of futures and then that chain of futures becomes a task you submit it to the asynchronous",
    "start": "1889970",
    "end": "1895730"
  },
  {
    "text": "system and it works and things were totally fine as I mentioned promises and features a little different one of the",
    "start": "1895730",
    "end": "1901880"
  },
  {
    "text": "other major features other than interface aspect to promises in futures is that promises are built into the JavaScript language and JavaScript is a",
    "start": "1901880",
    "end": "1908480"
  },
  {
    "text": "language has a run time which means among other things that a promise can start executing when you make it because",
    "start": "1908480",
    "end": "1915140"
  },
  {
    "text": "it's a construct the language knows and it's able to spin stuff up in the background because JavaScript assumes that everything is asynchronous and so",
    "start": "1915140",
    "end": "1921110"
  },
  {
    "text": "nothing happens the order they expect and so this is simpler in a lot of ways than the other way I'm about to describe",
    "start": "1921110",
    "end": "1926510"
  },
  {
    "text": "to you but one of the problems is is if you start executing your thing immediately you basically need an",
    "start": "1926510",
    "end": "1931550"
  },
  {
    "text": "allocation for every single thing you've chained on because you don't know at the time that you're building the thing like it's already running before you finish",
    "start": "1931550",
    "end": "1937880"
  },
  {
    "text": "like putting it together even in some cases and so so it works but it's it's",
    "start": "1937880",
    "end": "1943309"
  },
  {
    "text": "not super efficient and so futures on the other hand are not built into rust the language they're an entirely a",
    "start": "1943309",
    "end": "1948620"
  },
  {
    "text": "library because again we can't have a runtime cannibal that's built in stuff because we need to be as low-level as C",
    "start": "1948620",
    "end": "1954080"
  },
  {
    "text": "so like we can't afford to just do that and that also means that unlike promises",
    "start": "1954080",
    "end": "1959929"
  },
  {
    "text": "in JavaScript you build up this chain of futures and nothing actually happens with them at all until you explicitly",
    "start": "1959929",
    "end": "1965000"
  },
  {
    "text": "hand them over to an executor object and say please run this for me in the background and so they don't do anything",
    "start": "1965000",
    "end": "1970970"
  },
  {
    "text": "until the pull method is called and so this is a little more complicated but it's also extremely efficient because",
    "start": "1970970",
    "end": "1976730"
  },
  {
    "text": "you know how big the task is going to be when you create it and so unlike green threads where you make a small thing and",
    "start": "1976730",
    "end": "1982580"
  },
  {
    "text": "then when it grows too big you have to reallocate and do all that other stuff we can know at compile time exactly how big a task needs to be and allocate",
    "start": "1982580",
    "end": "1989330"
  },
  {
    "text": "exactly the right amount of memory and never grow or shrink that stack and you will always use a perfect exact sized",
    "start": "1989330",
    "end": "1994940"
  },
  {
    "text": "allocation which is really cool it also means you only have one allocation and you can actually do this if you're",
    "start": "1994940",
    "end": "2000460"
  },
  {
    "text": "willing to do it like put certain limits on it you can actually do it dynamic allocation you can do it statically Bawa but like this is super",
    "start": "2000460",
    "end": "2007180"
  },
  {
    "text": "hyper efficient and also because we have compiler and compilers are awesome and we do everything at compile time",
    "start": "2007180",
    "end": "2013090"
  },
  {
    "text": "the futures actually compiled down into the like perfect state machine that you would write by hand if you were doing",
    "start": "2013090",
    "end": "2019960"
  },
  {
    "text": "the event at i/o yourself so it becomes an extremely efficient way to to do this",
    "start": "2019960",
    "end": "2025480"
  },
  {
    "text": "kind of asynchronous computation but it also is easier to write because it has this like it's not a bunch of nested",
    "start": "2025480",
    "end": "2031960"
  },
  {
    "text": "callbacks so here's the example of using futures 0.1 this is using a package called Tokyo which is a executor that",
    "start": "2031960",
    "end": "2038650"
  },
  {
    "text": "exists so you have an IP address and you create a listener and then for listener",
    "start": "2038650",
    "end": "2043660"
  },
  {
    "text": "incoming is the thing that returns a sequence of futures in a row so you on each of those you do nothing and then if",
    "start": "2043660",
    "end": "2050110"
  },
  {
    "text": "there's an error you print it out so this is like just doesn't do anything but just accepts connections and then at the bottom here you see Tokyo run you're",
    "start": "2050110",
    "end": "2056320"
  },
  {
    "text": "passing that server like this chain of futures into the executor and it executes so that's kind of like the",
    "start": "2056320",
    "end": "2063580"
  },
  {
    "text": "model the way that it worked in 2015 and so we need to know if this is good or not so we built a bunch of stuff on top",
    "start": "2063580",
    "end": "2069909"
  },
  {
    "text": "of it and that was really cool but it also had some problems so there was a",
    "start": "2069910",
    "end": "2076690"
  },
  {
    "text": "thing called future zero point two and one of the big problems with zero point one is zero point two you can see the",
    "start": "2076690",
    "end": "2081790"
  },
  {
    "text": "difference here there's this context argument a task context and so future zero point one relied on thread-local storage to sort of like deal with some",
    "start": "2081790",
    "end": "2088450"
  },
  {
    "text": "bookkeeping around the future package and that minute relied on thread-local storage which means you couldn't use it",
    "start": "2088450",
    "end": "2093580"
  },
  {
    "text": "on things like bare metal and so that became sort of a problem and so the intention was what if we made this context explicit and that would help",
    "start": "2093580",
    "end": "2100930"
  },
  {
    "text": "alleviate this situation and that was ok but like also we knew it wasn't perfect",
    "start": "2100930",
    "end": "2106420"
  },
  {
    "text": "and we're gonna do more stuff and so someone's like hey do you suggest that the ecosystem should break between one",
    "start": "2106420",
    "end": "2112210"
  },
  {
    "text": "and two or like should we wait for three and Aaron who are this blogpost said you",
    "start": "2112210",
    "end": "2117850"
  },
  {
    "text": "shouldn't you shouldn't move everything over to is a good enough snapshot but we're gonna have three coming out in a",
    "start": "2117850",
    "end": "2122980"
  },
  {
    "text": "couple of months or less and then people are like that seems a little bad cuz like you need to try it out in order to",
    "start": "2122980",
    "end": "2128440"
  },
  {
    "text": "use it but your libraries update how are you supposed to try it out and then if it's gonna change again why would anyone",
    "start": "2128440",
    "end": "2133450"
  },
  {
    "text": "try it out in the first place this person was smart but cuz as you can see one year ago we said it was should become in a couple months",
    "start": "2133450",
    "end": "2140579"
  },
  {
    "text": "so that sort of been a situation so",
    "start": "2140579",
    "end": "2146849"
  },
  {
    "text": "going back to JavaScript for a moment async/await so here's three examples of writing different code we have the",
    "start": "2147119",
    "end": "2153730"
  },
  {
    "text": "original callback kind do you make a request you pass in a callback then there's promises where it's similar but you chain then it looks the same in",
    "start": "2153730",
    "end": "2160329"
  },
  {
    "text": "this situation but it avoids that right hand adrift I showed you before but finally c-sharp actually originally",
    "start": "2160329",
    "end": "2166059"
  },
  {
    "text": "conceived of this feature but since I was using JavaScript earlier I decided to keep it in JavaScript here you say",
    "start": "2166059",
    "end": "2171099"
  },
  {
    "text": "you have an async function instead and then you write a wait request and so",
    "start": "2171099",
    "end": "2176890"
  },
  {
    "text": "this actually does a sort of transformation to be able to do the same thing as the code above be good to write",
    "start": "2176890",
    "end": "2181960"
  },
  {
    "text": "it in a way that looks like it's blocking it goes back to like writing code and in normal fashions that have a",
    "start": "2181960",
    "end": "2187089"
  },
  {
    "text": "weird nested chain of things so yeah c-sharp actually invented this first",
    "start": "2187089",
    "end": "2192400"
  },
  {
    "text": "javascript was like oh this will save us from a million promises being terrible and life is good over there because it",
    "start": "2192400",
    "end": "2200079"
  },
  {
    "text": "lets you write code that looks like a synchronous even though it's not the other way around she's like code that looks like it's not",
    "start": "2200079",
    "end": "2206079"
  },
  {
    "text": "synchronous but it actually is asynchronous and here's the thing that's interesting we didn't actually realize",
    "start": "2206079",
    "end": "2211839"
  },
  {
    "text": "until we played with future zero point two even more but a single weight is actually more significant to rust than",
    "start": "2211839",
    "end": "2217150"
  },
  {
    "text": "in other languages so in c-sharp in JavaScript is mostly a convenience feature because like writing promises by hand is like a little terrible but like",
    "start": "2217150",
    "end": "2223480"
  },
  {
    "text": "it does work but in rust there's no garbage collector and what that means is",
    "start": "2223480",
    "end": "2229690"
  },
  {
    "text": "that remember that thing about how in the like promised world you create all these individual allocated things",
    "start": "2229690",
    "end": "2234819"
  },
  {
    "text": "everywhere well like if we did the same thing with futures which we sort of don't but like you're keeping track of this future access is a thing and the",
    "start": "2234819",
    "end": "2241210"
  },
  {
    "text": "next features chain and you're dealing with all that it turns out that that's real hard and rust didn't understand",
    "start": "2241210",
    "end": "2246400"
  },
  {
    "text": "that at all and so here's an example of like a synchronous API that does read so",
    "start": "2246400",
    "end": "2251859"
  },
  {
    "text": "this is a function that takes in itself and a buffer and returns how many bytes are read or an error and so it would",
    "start": "2251859",
    "end": "2258339"
  },
  {
    "text": "look like this you have the buffer area of a cursor you read in 124 bit chunks our byte chunks and you put stuff in the",
    "start": "2258339",
    "end": "2264609"
  },
  {
    "text": "cursor and this is like very straightforward synchronous API so how we turn this into futures like we have",
    "start": "2264609",
    "end": "2270360"
  },
  {
    "text": "this great design for futures how do we replace this synchronous version with the async version well the type",
    "start": "2270360",
    "end": "2276300"
  },
  {
    "text": "signature turns into this instead and it turns out that all the code you need is actually too big to fit on this slide so",
    "start": "2276300",
    "end": "2281790"
  },
  {
    "text": "I just didn't even include it and the reason why is because once you start chaining these futures together the rust",
    "start": "2281790",
    "end": "2287490"
  },
  {
    "text": "compiler doesn't understand how you're using memory anymore and so it gives you sort of like the most restrictive thing",
    "start": "2287490",
    "end": "2292710"
  },
  {
    "text": "possible which means that like you just your life is not good it actually is",
    "start": "2292710",
    "end": "2298710"
  },
  {
    "text": "really terrible and the reason of this is due to that again like you create the thing first and then you give it to the",
    "start": "2298710",
    "end": "2305370"
  },
  {
    "text": "executor and then it executes and so the constraints on like checking that all the memory works the right way is",
    "start": "2305370",
    "end": "2311130"
  },
  {
    "text": "different when you make that future then when you actually hand it off to be executed and that that change is the",
    "start": "2311130",
    "end": "2317490"
  },
  {
    "text": "thing that the compiler just like has no idea how to handle whatsoever and so this meant we needed to choose more allocations we need to do more in run",
    "start": "2317490",
    "end": "2324090"
  },
  {
    "text": "time checking for a thing that like does not actually need it but just to satisfy the compiler and so then this in a",
    "start": "2324090",
    "end": "2330240"
  },
  {
    "text": "similar way to like the green thread versus native abstraction where the green threads got to be too expensive",
    "start": "2330240",
    "end": "2335340"
  },
  {
    "text": "this super hyper efficient thing didn't actually do that for any real-world code it turned out the code you had to write",
    "start": "2335340",
    "end": "2341250"
  },
  {
    "text": "to use the hyper efficient thing was very inefficient so we're now back to a place where like this is not fast and it's hard to write so life is terrible",
    "start": "2341250",
    "end": "2347910"
  },
  {
    "text": "but a single wait to the rescue so with a single wait the compiler and the",
    "start": "2347910",
    "end": "2353910"
  },
  {
    "text": "borrow checker can understand the way that these things interact with each other and so your life becomes good",
    "start": "2353910",
    "end": "2359700"
  },
  {
    "text": "again and so here's that same API but with async await you notice the only difference is like an async block wrapped around it and a dot wait there",
    "start": "2359700",
    "end": "2366180"
  },
  {
    "text": "and otherwise it looks exactly the same as the original blocking code so we've now solved these sort of ergonomic",
    "start": "2366180",
    "end": "2372150"
  },
  {
    "text": "issues through a single weight but there were other problems they're always more problems it turns out that not all",
    "start": "2372150",
    "end": "2378870"
  },
  {
    "text": "features can error because we had conceived of futures as being an i/o thing we put error into the futures",
    "start": "2378870",
    "end": "2384360"
  },
  {
    "text": "itself but turns out that it's not just an i/o thing because once you start using futures they infect your entire code base and not all the things that",
    "start": "2384360",
    "end": "2390900"
  },
  {
    "text": "you're doing are things that can actually fail and so this means you add a ton of boilerplate for things that are infallible which like seems terrible",
    "start": "2390900",
    "end": "2397470"
  },
  {
    "text": "because you're making things that are easy more complicated than they need to be and so the final design that we landed",
    "start": "2397470",
    "end": "2404420"
  },
  {
    "text": "on for futures and the one that is in the standard library soon is called standard future and it now holds a",
    "start": "2404420",
    "end": "2410420"
  },
  {
    "text": "single output type and the signature has changed and a bunch of other interesting ways there's this pin thing I'm good see",
    "start": "2410420",
    "end": "2415579"
  },
  {
    "text": "you later and we still have our context but now we just returned the output type and so pin is part of how async/await",
    "start": "2415579",
    "end": "2421609"
  },
  {
    "text": "teaches the borrow check or how the code works I'm not going to get into it because frankly I can give you a 45 minute talk just on pain itself it's",
    "start": "2421609",
    "end": "2427910"
  },
  {
    "text": "complicated it doesn't matter virtually no one the only people who ever interact with this particular part of the API are",
    "start": "2427910",
    "end": "2433460"
  },
  {
    "text": "people who are writing low-level libraries and rust and you as a user could not think about it so I'm just gonna ignore that exists other than to",
    "start": "2433460",
    "end": "2440119"
  },
  {
    "text": "say that that's what taught the borrow check are how to do these things and then finally if you need a future that has an error you just compose our",
    "start": "2440119",
    "end": "2446719"
  },
  {
    "text": "regular old result type as the output type and so future is that don't have errors or fine features that do have",
    "start": "2446719",
    "end": "2452150"
  },
  {
    "text": "areas still work life is good right no it turns out there's more more problems",
    "start": "2452150",
    "end": "2459009"
  },
  {
    "text": "what syntax to use for async await you would think this is a simple question but it turns out that when you're",
    "start": "2459009",
    "end": "2464779"
  },
  {
    "text": "designing a programming language you have to think about edge cases and it turns out there's a lot of edge cases they're specific to rust the old",
    "start": "2464779",
    "end": "2470450"
  },
  {
    "text": "languages didn't have to deal with so Java and c-sharp both do a weight space value nice and straightforward",
    "start": "2470450",
    "end": "2476410"
  },
  {
    "text": "everything's everything's fine but we have this question mark thing for error handling and you're gonna use it a lot",
    "start": "2476410",
    "end": "2483140"
  },
  {
    "text": "because async IO has errors like si out that happens so what happens if you were",
    "start": "2483140",
    "end": "2488479"
  },
  {
    "text": "to copy that syntax but you need to use the question mark for error handling like does a weight value question mark where it's parentheses like this or like",
    "start": "2488479",
    "end": "2496160"
  },
  {
    "text": "this you would when you're writing this what you want is almost always the second one",
    "start": "2496160",
    "end": "2502039"
  },
  {
    "text": "but the syntax kind of implies the first one so it was like should we change the",
    "start": "2502039",
    "end": "2507380"
  },
  {
    "text": "precedent of the question mark operator but only when a weight exists and people were like that seems not like a good",
    "start": "2507380",
    "end": "2513769"
  },
  {
    "text": "idea other people were like that's the only possible value and so we did what most",
    "start": "2513769",
    "end": "2519440"
  },
  {
    "text": "good programmers do in the situation oh yeah I forgot one more thing it's like alpha load also chaining start",
    "start": "2519440",
    "end": "2525739"
  },
  {
    "text": "chaining this with spaces this gets nasty really quickly and this still happens in JavaScript and sometimes in my understanding I'm a super big",
    "start": "2525739",
    "end": "2531680"
  },
  {
    "text": "JavaScript person but anyway we did what everyone does on the Internet we argued and we argued and we",
    "start": "2531680",
    "end": "2537720"
  },
  {
    "text": "argued and we argued and then we argued some more people proposed like every",
    "start": "2537720",
    "end": "2543150"
  },
  {
    "text": "possible syntax for this there was like people are saying like maybe we should use an upside-down question mark for the",
    "start": "2543150",
    "end": "2548670"
  },
  {
    "text": "one that has the different precedents like that was an actual like there was people every possible aspect of this",
    "start": "2548670",
    "end": "2554010"
  },
  {
    "text": "design was like fought over I mean like it's not a joke like this is multiple",
    "start": "2554010",
    "end": "2559860"
  },
  {
    "text": "threads on our discourse instance 478 on one of those 12 the other one somebody",
    "start": "2559860",
    "end": "2564960"
  },
  {
    "text": "else posted the screenshot of their email INBOX and was like you can see those numbers they're like 25 35 160 seven eight",
    "start": "2564960",
    "end": "2571530"
  },
  {
    "text": "almost all these are about a single weight all individual threads the reddit had like these are just the top two",
    "start": "2571530",
    "end": "2577920"
  },
  {
    "text": "there were actually more threads than this but like 160 833 people really like talking about syntax as it turns out and",
    "start": "2577920",
    "end": "2584550"
  },
  {
    "text": "so the problem was is that everybody hated all the options that were not their favorite but there was no clear",
    "start": "2584550",
    "end": "2590280"
  },
  {
    "text": "winner because that's just what happens a lot of times its syntax everything has drawbacks everything has positives so at some",
    "start": "2590280",
    "end": "2595470"
  },
  {
    "text": "point we decided like hey we can't let this incredibly important feature to rust just be stuck down in the syntax",
    "start": "2595470",
    "end": "2601530"
  },
  {
    "text": "decisions and so we picked one by we I mean other people I didn't have to do that thank God",
    "start": "2601530",
    "end": "2606630"
  },
  {
    "text": "so he's noticed we have this dot await here you may have noticed that it was different than the the c-sharp thing so",
    "start": "2606630",
    "end": "2611850"
  },
  {
    "text": "with no errors you call just dot await no parentheses because it's not a method call it's a key word and with errors you",
    "start": "2611850",
    "end": "2617850"
  },
  {
    "text": "just add the question mark everything looks great some people really viscerally hate this other people or like it seems weird at",
    "start": "2617850",
    "end": "2625200"
  },
  {
    "text": "first and then 15 minutes later I forgot about it and it's fine I think that in the end that's really how it's gonna happen but uh we ended up with a weird",
    "start": "2625200",
    "end": "2631800"
  },
  {
    "text": "wait syntax it just happens it's the best choice for rust I think in the end it was not my preferred option but I",
    "start": "2631800",
    "end": "2637290"
  },
  {
    "text": "just want to be able to use the feature so at some point you just gotta like yeah but I think it's good after using",
    "start": "2637290",
    "end": "2644580"
  },
  {
    "text": "it for a while so it turns out that's actually not even the last actual issue and this one this is getting long and",
    "start": "2644580",
    "end": "2651600"
  },
  {
    "text": "there's too many issues so I'm not even again into that one because this talk is long enough as it is but like there's",
    "start": "2651600",
    "end": "2656880"
  },
  {
    "text": "just always more things that happen this one is extremely minor so that's why I'm not talking about it but there's other",
    "start": "2656880",
    "end": "2664050"
  },
  {
    "text": "stuff we're doing with async/await as well that have additional like organ Amma comprar this is an example of a crate",
    "start": "2664050",
    "end": "2670170"
  },
  {
    "text": "called run time and the main thing you can see here this is a UDP example that",
    "start": "2670170",
    "end": "2675390"
  },
  {
    "text": "just repeats what you say to it but there's this runtime main annotation on the main function so you know how it was",
    "start": "2675390",
    "end": "2681120"
  },
  {
    "text": "like oh you have to submit your futures to an executor like turns out this is a macro that does that for you so you get",
    "start": "2681120",
    "end": "2686130"
  },
  {
    "text": "code that sort of looks like the node example where you don't submit anything but it turns out it rewrites the code so",
    "start": "2686130",
    "end": "2691350"
  },
  {
    "text": "that you do so that's kind of cool and so we end up looking like more and more similar to to a node this is no syntax",
    "start": "2691350",
    "end": "2697590"
  },
  {
    "text": "highlighting so it gets a little messy but it looks better in an editor one really wild thing is that you can use a",
    "start": "2697590",
    "end": "2703530"
  },
  {
    "text": "single weight in webassembly with rust so this is an example of a program that",
    "start": "2703530",
    "end": "2709290"
  },
  {
    "text": "I wrote recently async/await and it fetches some information from a database and then there's some actual",
    "start": "2709290",
    "end": "2714570"
  },
  {
    "text": "processing here I chopped out but what it does is it returns it as part of the response so you notice here that is",
    "start": "2714570",
    "end": "2719730"
  },
  {
    "text": "wisdom entry file it returns a promise and that's a JavaScript promise bound to",
    "start": "2719730",
    "end": "2724950"
  },
  {
    "text": "rust so what happens is this call to get in here data get that is a call to a",
    "start": "2724950",
    "end": "2732120"
  },
  {
    "text": "database that returns a promise a JavaScript promise because it's a JavaScript API to the database and you",
    "start": "2732120",
    "end": "2737970"
  },
  {
    "text": "need to do stuff with it so then you turn into a future with J's future from and this is a specific kind of future",
    "start": "2737970",
    "end": "2743190"
  },
  {
    "text": "that knows how to wrap a JavaScript promise and turn into a rest future then you call a wait on it and and then at",
    "start": "2743190",
    "end": "2749490"
  },
  {
    "text": "the end there's this future to promise that we'll take any future you have and convert it back into a JavaScript promise so yes this code and wasm is a",
    "start": "2749490",
    "end": "2757320"
  },
  {
    "text": "JavaScript promise wrapped up in a rasp rust future wrapped up in a JavaScript promise and then returned through rusts",
    "start": "2757320",
    "end": "2763920"
  },
  {
    "text": "back into webassembly back into JavaScript and this works it's totally fine I mean depending your definition of",
    "start": "2763920",
    "end": "2771900"
  },
  {
    "text": "fine I guess but like it is a thing that if you go to my website right now this code will execute and it's a thing so",
    "start": "2771900",
    "end": "2779250"
  },
  {
    "text": "you can do all sorts of fun stuff with the compiler is the great so as I wrap",
    "start": "2779250",
    "end": "2784290"
  },
  {
    "text": "up with this this long and tortured story about all these different options now we went through like every single",
    "start": "2784290",
    "end": "2789360"
  },
  {
    "text": "possible thing that could have existed and figured out that all the more terrible until our current situation this is finally rant landing in rust",
    "start": "2789360",
    "end": "2795300"
  },
  {
    "text": "1.37 or maybe rust 1.38 depending on that last little tiny issue that about which is it's fine however I wrote",
    "start": "2795300",
    "end": "2804310"
  },
  {
    "text": "this slide and this morning I woke up and I was gonna go to the conference and I looked at Twitter and I think this is",
    "start": "2804310",
    "end": "2810460"
  },
  {
    "text": "actually wrong now it it turns out that earlier this morning boats tweeted like we are actually stabilizing async/await",
    "start": "2810460",
    "end": "2817000"
  },
  {
    "text": "for real and that means that it will land in rust 138 for sure are finally",
    "start": "2817000",
    "end": "2822369"
  },
  {
    "text": "all that little tiny thing is not doesn't matter we figured it out it's cool so this rust 1.38 is landing in I think",
    "start": "2822369",
    "end": "2830440"
  },
  {
    "text": "it's the 15th of August so roughly in August but like we did it years later",
    "start": "2830440",
    "end": "2835690"
  },
  {
    "text": "you know sort of in some sense starting the late 90s but that's before rust like technically starting around like the",
    "start": "2835690",
    "end": "2841560"
  },
  {
    "text": "2010-2011 era 9 8 or 9 years later we finally figured out how to do ILO and",
    "start": "2841560",
    "end": "2847390"
  },
  {
    "text": "rust efficiently and it works if you look at the latest version of the tech empower benchmark which is a thing that",
    "start": "2847390",
    "end": "2852940"
  },
  {
    "text": "benchmarks different website things this is not the latest report but this is like a build that happened last night or",
    "start": "2852940",
    "end": "2859089"
  },
  {
    "text": "last week act excision rust and you can see that it is dominating the benchmarks there's a whole bunch of other",
    "start": "2859089",
    "end": "2864700"
  },
  {
    "text": "frameworks below there but the next closest thing is 62 percent of the speed it does and so we're able to get really",
    "start": "2864700",
    "end": "2870579"
  },
  {
    "text": "really really high performance out of rust network services thanks to like spending all this time sorting through",
    "start": "2870579",
    "end": "2876460"
  },
  {
    "text": "all these examples and working through every possible thing led us to the like finest fastest thing and end it also is",
    "start": "2876460",
    "end": "2882940"
  },
  {
    "text": "reasonably ergonomic to write and so two lessons to take you away in my last like 30 seconds here turns out that a",
    "start": "2882940",
    "end": "2889240"
  },
  {
    "text": "world-class IO system implantation takes years can't just like make it happen it's like surprise finally different",
    "start": "2889240",
    "end": "2898180"
  },
  {
    "text": "languages have different constraints this means that you can't really argue that like go or Erlang style is better or worse than Russ style they have",
    "start": "2898180",
    "end": "2904990"
  },
  {
    "text": "different pros and cons in all directions and so like just because you like a thing in one language and you",
    "start": "2904990",
    "end": "2910990"
  },
  {
    "text": "move to a different language does not mean that the other language did a different way for a wrong reason so we couldn't always just reuse things from",
    "start": "2910990",
    "end": "2917140"
  },
  {
    "text": "other languages because we had different constraints about our designs thank you so much that is all I have to say today",
    "start": "2917140",
    "end": "2923500"
  },
  {
    "text": "you",
    "start": "2923500",
    "end": "2925560"
  }
]