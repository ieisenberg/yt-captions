[
  {
    "start": "0",
    "end": "190000"
  },
  {
    "text": "uh welcome to this talk I appreciate everyone being here uh I am honored to be here at the second forward and had a",
    "start": "799",
    "end": "7480"
  },
  {
    "text": "great time with the first one so I'm looking forward to this one as well there's been some great talks already today uh yeah this is just a quick uh",
    "start": "7480",
    "end": "15760"
  },
  {
    "text": "reminder that often times when we when we have code you know I'm sure many of you probably have had code that broke",
    "start": "15760",
    "end": "22160"
  },
  {
    "text": "and you weren't sure why it broke but I think the more profound and more difficult problem is when code works and",
    "start": "22160",
    "end": "27359"
  },
  {
    "text": "you're not sure why it works so definitely understanding code is important terms like readability get",
    "start": "27359",
    "end": "34480"
  },
  {
    "text": "thrown around an awful lot in our industry people say well it's got fewer characters therefore it must be more readable I'm not entirely sure I agree",
    "start": "34480",
    "end": "41120"
  },
  {
    "text": "with that premise actually I've read some some PhD thesis papers on the topic of readability and I'm not really sure",
    "start": "41120",
    "end": "46680"
  },
  {
    "text": "it's quite as simple as just fewer characters but today we're going to jump in uh with a talk that I call what the",
    "start": "46680",
    "end": "53800"
  },
  {
    "text": "JavaScript um this is kind of a self-indulgent talk to have some fun um",
    "start": "53800",
    "end": "59079"
  },
  {
    "text": "over the last couple of years now I've been working on a series of books about JavaScript and I'll get to that in just",
    "start": "59079",
    "end": "64320"
  },
  {
    "text": "a moment but I've pulled out an awful lot of crazy out of JavaScript collected",
    "start": "64320",
    "end": "70040"
  },
  {
    "text": "along the way and I hear an awful lot of people talk about wtfs in the language there's even a whole website dedicated",
    "start": "70040",
    "end": "76000"
  },
  {
    "text": "to it um there's many famous videos like the WAP video and so forth most of the time when I watch those videos I'm",
    "start": "76000",
    "end": "83119"
  },
  {
    "text": "struck with that doesn't really seem like a WTF to me but perhaps my perspective is skewed because I've seen",
    "start": "83119",
    "end": "88840"
  },
  {
    "text": "the real what what the fck in JavaScript and uh so I'm going to ask for some audience participation as we go through",
    "start": "88840",
    "end": "96119"
  },
  {
    "text": "the corners of the language that I've pulled out for you today we'll start mild but it's going to get really crazy",
    "start": "96119",
    "end": "101439"
  },
  {
    "text": "towards the middle in the end and I'm going to ask for audience participation if you feel so inclined each time I show",
    "start": "101439",
    "end": "106560"
  },
  {
    "text": "one of these wtfs just yell out what the  because that will be much more fun for the rest of us I'd rather not sit up",
    "start": "106560",
    "end": "113719"
  },
  {
    "text": "here and curse the whole time but you guys can curse all you'd like and you can of course substitute your favorite",
    "start": "113719",
    "end": "119079"
  },
  {
    "text": "fword if you don't like that word flugal horn Fahrenheit whichever works for you",
    "start": "119079",
    "end": "124680"
  },
  {
    "text": "all right uh real quickly about myself um my name is Kyle Simpson and I'm known as getify online I do a lot of Open",
    "start": "124680",
    "end": "130440"
  },
  {
    "text": "Source development this is my current streak as of today not to show off that I am obsessed with open source but to",
    "start": "130440",
    "end": "136519"
  },
  {
    "text": "help inspire people to do a little bit more with open source um and I took it upon myself a little over a year ago to",
    "start": "136519",
    "end": "142599"
  },
  {
    "text": "try to have the discipline to do something even if that something is filing a bug against myself for something to do the next day to do",
    "start": "142599",
    "end": "148480"
  },
  {
    "text": "something to help the open source community uh so I encourage more of you to do that I mentioned that I've been writing a",
    "start": "148480",
    "end": "153800"
  },
  {
    "text": "series of books it's called you don't know JS if you go to that website at redirects to the URL up online on GitHub",
    "start": "153800",
    "end": "160200"
  },
  {
    "text": "they're all open and free you can read them there are six books in the series I'm working on the sixth of the six",
    "start": "160200",
    "end": "166120"
  },
  {
    "text": "books the other five are already done and they're also being published through O'Reilly so you can buy them through O'Reilly or other book sources basically",
    "start": "166120",
    "end": "173080"
  },
  {
    "text": "these books are kind of the anti- the good parts and I don't mean that like they're the bad parts I mean it that",
    "start": "173080",
    "end": "179200"
  },
  {
    "text": "they're all the parts we're really trying to go into all the parts of the language that are often times not covered so it's kind of an",
    "start": "179200",
    "end": "185319"
  },
  {
    "text": "unconventional take on JavaScript and you might check those out if that's interesting all right without any",
    "start": "185319",
    "end": "190560"
  },
  {
    "start": "190000",
    "end": "367000"
  },
  {
    "text": "further Ado let's jump in and I will say definitely with the books and especially with my teaching and my speaking I",
    "start": "190560",
    "end": "197000"
  },
  {
    "text": "oftentimes find myself in the position of defending the language many people are very good at articulating why they",
    "start": "197000",
    "end": "203239"
  },
  {
    "text": "don't like JavaScript there aren't as many voices that stand up and defend why the language is great and I often times",
    "start": "203239",
    "end": "209360"
  },
  {
    "text": "find myself in that unconventional position so today is kind of a flip-flop because I am both a defender of the",
    "start": "209360",
    "end": "214840"
  },
  {
    "text": "language and I'm also today going to put on the hat of a hater of the language so",
    "start": "214840",
    "end": "221000"
  },
  {
    "text": "let's define what I mean by wtfs they're not just things that are funny certainly there's lots of funny things about",
    "start": "221000",
    "end": "227000"
  },
  {
    "text": "JavaScript that we can make fun of like type of Nan type of not a number as a number and other weird things like that",
    "start": "227000",
    "end": "233400"
  },
  {
    "text": "um but I'm not talking about those wtfs today I'm not just talking about bugs there are certainly bugs like type of",
    "start": "233400",
    "end": "239200"
  },
  {
    "text": "null object or I'm not even talking about ugly code idioms things where it's so much prettier in another language and",
    "start": "239200",
    "end": "244799"
  },
  {
    "text": "it's more difficult to do in JavaScript and we call that a WTF I'm not talking about that either because we've we've",
    "start": "244799",
    "end": "250360"
  },
  {
    "text": "got the opportunity to improve those things and we have um done quite a bit of improvement with",
    "start": "250360",
    "end": "255759"
  },
  {
    "text": "es6 I'm also not talking about cross browser quirks these are much fewer today than they were say 5 to 10 years",
    "start": "255759",
    "end": "262280"
  },
  {
    "text": "ago but I'm not talking about those things either I know it's fun to sometimes find a nightly version of a browser that does something crazy I'm",
    "start": "262280",
    "end": "268840"
  },
  {
    "text": "not talking about those w BF either what I'm talking about are things that are intentionally codified into the spec",
    "start": "268840",
    "end": "276160"
  },
  {
    "text": "that produce in my opinion at least inconsistent incoherent or",
    "start": "276160",
    "end": "281280"
  },
  {
    "text": "unreasonable code and it's obviously the more you use the code incorrectly the",
    "start": "281280",
    "end": "288000"
  },
  {
    "text": "more you amplify these problems but I think these are the things I'm going to pull out today are things that I think tend to lead us towards inconsistent",
    "start": "288000",
    "end": "294800"
  },
  {
    "text": "incoherent and unreasonable code let me also say that I'm not",
    "start": "294800",
    "end": "299840"
  },
  {
    "text": "bashing on the members of the tc39 committee as some people have assumed in the past I actually think they're",
    "start": "299840",
    "end": "305320"
  },
  {
    "text": "fantastic uh they're really smart and I would not want that job because it's a it's a nearly impossible job to balance",
    "start": "305320",
    "end": "311199"
  },
  {
    "text": "all the concerns that they do so big props to what they've done with the language I'm also not really bashing on",
    "start": "311199",
    "end": "317639"
  },
  {
    "text": "JavaScript because I think javascript's great and I'm unabashed about that I actually think javascript's great and it's getting better but that doesn't",
    "start": "317639",
    "end": "323800"
  },
  {
    "text": "mean it's perfect that doesn't mean we can't look at them and as I said before most of the wtfs that people look at and",
    "start": "323800",
    "end": "330680"
  },
  {
    "text": "call out about the language are actually leading from lack of understanding lack of understanding how the spec says",
    "start": "330680",
    "end": "336800"
  },
  {
    "text": "something should work or lack of understanding what the reasoning behind it was now it's true that many of the",
    "start": "336800",
    "end": "342560"
  },
  {
    "text": "things that I'm going to share today I mean all of them are in the spec and they're all intentional and many of the things I'm going to share today probably",
    "start": "342560",
    "end": "348600"
  },
  {
    "text": "have some line of reasoning that led to them other than just sheer stupidity there's probably some method to the",
    "start": "348600",
    "end": "354880"
  },
  {
    "text": "madness but I with all of my time looking at it and trying to figure it out haven't been able to teach tease out",
    "start": "354880",
    "end": "360080"
  },
  {
    "text": "any such meaning so therefore it's a WTF as far as I'm concerned so without any further Ado let's jump in I'm going to",
    "start": "360080",
    "end": "365720"
  },
  {
    "text": "start with a couple of simple warm-ups number. max value which is some huge number like 1 to the 10 to the 309 or",
    "start": "365720",
    "end": "372919"
  },
  {
    "start": "367000",
    "end": "554000"
  },
  {
    "text": "something like that it's pretty obvious that number. max value is really really big and obviously greater than zero but",
    "start": "372919",
    "end": "379199"
  },
  {
    "text": "number. Min value many would assume that's the most negative the smallest number you can get it's actually the",
    "start": "379199",
    "end": "385360"
  },
  {
    "text": "smallest positive number that you can get so it's like zero with a whole 309 zeros after it before a one or something",
    "start": "385360",
    "end": "392240"
  },
  {
    "text": "like that and and I've actually seen code bases that got tripped up misunderstanding exactly what Min value",
    "start": "392240",
    "end": "397639"
  },
  {
    "text": "I'm not sure why they didn't say Min positive value or something like that but they called it Min value and in it of itself Min value",
    "start": "397639",
    "end": "404080"
  },
  {
    "text": "isn't terrible but when paired with max value which is the maximum positive integer it certainly leads to",
    "start": "404080",
    "end": "409800"
  },
  {
    "text": "misunderstanding all right some warm-ups this is another famous one that people like to cite one less than two less than",
    "start": "409800",
    "end": "415400"
  },
  {
    "text": "three is true accidentally because of coercion because if we reverse it three greater than 2 greater than one it's",
    "start": "415400",
    "end": "421039"
  },
  {
    "text": "false also because coercion comes to bite us so this is one of those ones that I actually talked about fixing um",
    "start": "421039",
    "end": "427039"
  },
  {
    "text": "it would involve changing the left associativity of that operator to the right associativity of the operator um",
    "start": "427039",
    "end": "434520"
  },
  {
    "text": "and they thought about doing that I guess they rejected it for some reason that means somebody's code out there is relying upon that stupidity and that's",
    "start": "434520",
    "end": "440560"
  },
  {
    "text": "why they couldn't fix it okay another one this is another one of my small pet peeves but a frustration nonetheless I",
    "start": "440560",
    "end": "447520"
  },
  {
    "text": "really hate how in consistent it seems like the rules around the period uh",
    "start": "447520",
    "end": "452800"
  },
  {
    "text": "happen with numerical l rales so we know that the period can appear with a number so on line three for example 42 dot",
    "start": "452800",
    "end": "458720"
  },
  {
    "text": "that's a totally valid number in and of itself which is why it can't be immediately followed even with whites space it can't be immediately followed",
    "start": "458720",
    "end": "465080"
  },
  {
    "text": "by a method but what's weird to me is that line five is okay because to me the placement of that white space we",
    "start": "465080",
    "end": "471720"
  },
  {
    "text": "typically don't think of JavaScript as being a significant wh space language but the more you look at it the more there are places where just a little bit",
    "start": "471720",
    "end": "478919"
  },
  {
    "text": "of a Mis placed space and of course when I call it out here it it seems quite obvious but I've actually seen code in",
    "start": "478919",
    "end": "484319"
  },
  {
    "text": "code reviews where somebody uh did this or actually this happens a lot on blog posts people are very careless with the",
    "start": "484319",
    "end": "489800"
  },
  {
    "text": "code they put in their Snippets and you can get into some quick trouble if you're not paying a close attention to",
    "start": "489800",
    "end": "495319"
  },
  {
    "text": "where your periods show up so it's kind of annoying to me that for instance three is bad but five and seven are okay",
    "start": "495319",
    "end": "501720"
  },
  {
    "text": "and also I never thought that anyone would actually do line 11 where they put two periods together and then I saw a",
    "start": "501720",
    "end": "507199"
  },
  {
    "text": "library it's called syon JS and a while they had in their documentation they've added methods to the Prototype so they",
    "start": "507199",
    "end": "513039"
  },
  {
    "text": "gave a legitimate reason for that even though if I saw that or if most people saw it you would think that's pretty",
    "start": "513039",
    "end": "518200"
  },
  {
    "text": "crazy okay so those were our warm-ups those are things that are often cited about dbfs but I got a whole lot more",
    "start": "518200",
    "end": "524600"
  },
  {
    "text": "crazy for you so don't don't feel like that's all we've got in store we're going to start with coercion and coercion is one of those that is often",
    "start": "524600",
    "end": "531240"
  },
  {
    "text": "said to be totally evil and awful you should you should avoid it it's a flaw on the design of language I have an",
    "start": "531240",
    "end": "537160"
  },
  {
    "text": "entire book dedicated to why I think that's a completely false presumption I actually think coercion is awesome it",
    "start": "537160",
    "end": "543480"
  },
  {
    "text": "should be used you should spend your time learning it and that's the third book in my Series so I'm going to start",
    "start": "543480",
    "end": "549279"
  },
  {
    "text": "out by showing a couple of things about coercion that are actually not wtfs so",
    "start": "549279",
    "end": "555320"
  },
  {
    "text": "the first one is is well cited that an array is somehow double equal to the negation of the mty array and taking on",
    "start": "555320",
    "end": "562240"
  },
  {
    "text": "its surface that looks nuts how can something be equal to the negation of itself but we have to understand that",
    "start": "562240",
    "end": "568200"
  },
  {
    "text": "the equals and the negation do not happen at the same time even though somehow our brains think that they do",
    "start": "568200",
    "end": "573800"
  },
  {
    "text": "the negation happens first and when you negate an array you're taking it from a truthy value to false so we're now",
    "start": "573800",
    "end": "579519"
  },
  {
    "text": "actually comparing comparing the empty array to the false and it's actually pretty straightforward in the spec what",
    "start": "579519",
    "end": "584839"
  },
  {
    "text": "happens when anything gets compared to an object is that both things end up becoming numbers so what number should",
    "start": "584839",
    "end": "592200"
  },
  {
    "text": "the empty array become you could have argued I guess that it should have become Nan but it becomes zero and false",
    "start": "592200",
    "end": "598640"
  },
  {
    "text": "also becomes Z and that's why the two are equal to each other and if you pay any attention at all to the algorithm of",
    "start": "598640",
    "end": "604160"
  },
  {
    "text": "how coercion works it's actually pretty reasoned like that it's not quite as magical as you've been led to believe",
    "start": "604160",
    "end": "610200"
  },
  {
    "text": "now that's it for equals I've got tons more of course in the book about equals the double equals loose equals but what",
    "start": "610200",
    "end": "615959"
  },
  {
    "text": "about this one this is often cited as an example of showing how javascript's addition operator is not communative you",
    "start": "615959",
    "end": "621920"
  },
  {
    "text": "can't do it in the same you get different results depending on what order and that's nonsense the operator",
    "start": "621920",
    "end": "627000"
  },
  {
    "text": "is actually when taken in a math mathematical sense it is actually commutative not with strings of course",
    "start": "627000",
    "end": "632560"
  },
  {
    "text": "if you append strings in a different order you're going to get a different result but actually What's Happening Here is that on line five we're not",
    "start": "632560",
    "end": "638240"
  },
  {
    "text": "doing an addition at all even though it looks like it if you understand it all about the JavaScript grammar a pair of",
    "start": "638240",
    "end": "643839"
  },
  {
    "text": "curly braces is just an empty block when not used in an expression location so this is taken to be an empty block that",
    "start": "643839",
    "end": "650079"
  },
  {
    "text": "you didn't do anything with and then the plus is actually just a unary operator that's operating on the array again",
    "start": "650079",
    "end": "655800"
  },
  {
    "text": "coercing it to a number which is why we end up with zero the point I'm trying to make and the book the third book in the",
    "start": "655800",
    "end": "661200"
  },
  {
    "text": "series goes through all this but the point I'm trying to make is that there's an awful lot of things that are cited as crazy and totally unexplainable they're",
    "start": "661200",
    "end": "667279"
  },
  {
    "text": "actually pretty rational if you read the spec or my book now there are some",
    "start": "667279",
    "end": "673399"
  },
  {
    "text": "things there are some things that can be kind of weird so I've got a couple of examples on here and and what I would",
    "start": "673399",
    "end": "679360"
  },
  {
    "text": "really like to point out is that most of the times that we have frustration about coercion it's actually related to what's",
    "start": "679360",
    "end": "685600"
  },
  {
    "text": "happening when you go from a number to a string or a string to a number that's actually where most of the concern is",
    "start": "685600",
    "end": "691240"
  },
  {
    "text": "and JavaScript has sort of I guess I would say an informal design philosophy around it from the very beginning which",
    "start": "691240",
    "end": "697320"
  },
  {
    "text": "is to try to do the best possible thing that it can rather than just throwing ER errors everywhere if you do something",
    "start": "697320",
    "end": "703600"
  },
  {
    "text": "even slightly invalid in Java it just throws an error but in JavaScript it tries to make a best guess at what you",
    "start": "703600",
    "end": "708760"
  },
  {
    "text": "were intending so for example if you try to turn some white space or some new lines or things like that into a number",
    "start": "708760",
    "end": "715760"
  },
  {
    "text": "rather than it throwing up its hands and giving you an error and saying you're stupid it says well what's the best guess that I can give and it's similar",
    "start": "715760",
    "end": "722160"
  },
  {
    "text": "to if it was using an empty string it basically strips off all the trailing white space and then an empty string",
    "start": "722160",
    "end": "728240"
  },
  {
    "text": "somewhat reasonably will coers to a number some would disagree but I think an empty string coercing to a number is at least reasonable I don't consider",
    "start": "728240",
    "end": "734560"
  },
  {
    "text": "that to be magic and crazy and of course the the the zero string here we we we definitely see that we have a positive",
    "start": "734560",
    "end": "740040"
  },
  {
    "text": "zero there's also a negative zero that's a little known fact and you notice that the negative 0 does in fact go in the",
    "start": "740040",
    "end": "745920"
  },
  {
    "text": "proper direction from its string form to its number form now now line 9 looks like it's the same thing it looks like",
    "start": "745920",
    "end": "751560"
  },
  {
    "text": "it's a negative Z it's actually a regular zero that's been operated on by the negative by the minus unary operator",
    "start": "751560",
    "end": "759079"
  },
  {
    "text": "which is why line 10 fails because that's not actually valid Syntax for a number okay now going the other",
    "start": "759079",
    "end": "765240"
  },
  {
    "text": "direction we do start to see some things that might be considered crazy for example if you try to take a negative",
    "start": "765240",
    "end": "770399"
  },
  {
    "text": "zero and stringify it it always produces a regular zero not a negative zero and",
    "start": "770399",
    "end": "775440"
  },
  {
    "text": "that seems crazy and I I I used to label this a WTF but the spec literally says do this and there are some historical",
    "start": "775440",
    "end": "780800"
  },
  {
    "text": "reasons mostly because most people don't even know what a negative Z would be for and they don't want to see a negative Z",
    "start": "780800",
    "end": "786639"
  },
  {
    "text": "so way back in the day they just said lie to the user and pretend that it's regular zero so we've got that history",
    "start": "786639",
    "end": "792519"
  },
  {
    "text": "of lying to us and we should adopt that I would say this is not exactly a WTF it's just it's kind of a strange uh",
    "start": "792519",
    "end": "798959"
  },
  {
    "text": "decision that they made but there's historical reasons all right so I've done enough defending there's plenty for",
    "start": "798959",
    "end": "804839"
  },
  {
    "text": "me to complain about let's go into some coercion stuff that is crazy all right so here's some other examples taking a",
    "start": "804839",
    "end": "811360"
  },
  {
    "start": "809000",
    "end": "858000"
  },
  {
    "text": "string zero Dot and making a zero that makes sense and Dot zero makes sense why doesn't just dot all by itself make",
    "start": "811360",
    "end": "817279"
  },
  {
    "text": "sense I think it ought to but it does not it's not valid syntax of course so that's Nan so that one's kind of",
    "start": "817279",
    "end": "823040"
  },
  {
    "text": "understandable but undefined a null why on Earth does null become zero and undefined becomes",
    "start": "823040",
    "end": "828680"
  },
  {
    "text": "Nan exactly thank you I was waiting for somebody to start yelling this out that's nuts right I'm again I'm sure if",
    "start": "828680",
    "end": "835839"
  },
  {
    "text": "you pin down one of the original tc39 members there's some kind of reasoning behind it but it's just crazy uh another",
    "start": "835839",
    "end": "842079"
  },
  {
    "text": "thing I wanted to point out by the way es6 is getting a new octal syntax and I love the fact that we can now do zero",
    "start": "842079",
    "end": "847600"
  },
  {
    "text": "capital O after it to to create octal syntax because that's not going to create confusion in people's editors at",
    "start": "847600",
    "end": "854600"
  },
  {
    "text": "all seriously what the okay so some other examples of nuts stuff if you take",
    "start": "854600",
    "end": "861399"
  },
  {
    "start": "858000",
    "end": "1000000"
  },
  {
    "text": "an object just an empty object and you try to turn it into a number it becomes Nan but an empty array becomes zero",
    "start": "861399",
    "end": "868040"
  },
  {
    "text": "again exactly what what is why would we have a different rule well again if you look in",
    "start": "868040",
    "end": "874199"
  },
  {
    "text": "the spec there are some reasons behind it because arrays are assumed that you want the string version first so they",
    "start": "874199",
    "end": "879839"
  },
  {
    "text": "actually the array becomes an empty string which then becomes zero and for whatever reason objects don't become an",
    "start": "879839",
    "end": "885720"
  },
  {
    "text": "empty string they become this crazy thing that we see on line four and it's pretty clear why that isn't a valid number so you can explain these things",
    "start": "885720",
    "end": "891839"
  },
  {
    "text": "but it's still inconsistency that drives uh obsessive compulsive people like me",
    "start": "891839",
    "end": "898040"
  },
  {
    "text": "nuts here's another one that I actually think I I really can't come up with any uh explanation for this if you stringify",
    "start": "898040",
    "end": "905120"
  },
  {
    "text": "the null value it actually becomes string null which makes a lot of sense but if null is inside of an array it",
    "start": "905120",
    "end": "910160"
  },
  {
    "text": "just goes away we just pretend that that null value isn't even there when we stringify what",
    "start": "910160",
    "end": "916240"
  },
  {
    "text": "the come on y'all are not did you not have enough coffee I need some help here",
    "start": "916240",
    "end": "921360"
  },
  {
    "text": "okay and same thing with undefined the undefined value inside of an array it just goes away when we stringify it by",
    "start": "921360",
    "end": "927959"
  },
  {
    "text": "default some other examples there's kind of a new thing in es5 we had this trailing comma thing going on and you",
    "start": "927959",
    "end": "935079"
  },
  {
    "text": "notice that if you have a trailing comma it's essentially dropped off in terms of assum of an assumption of a value but",
    "start": "935079",
    "end": "940639"
  },
  {
    "text": "the fact that we have three entirely different values here that all stringify to the exact same thing is a what the",
    "start": "940639",
    "end": "947279"
  },
  {
    "text": " what were they thinking stringifying all three of these you may think they're the same value but they're",
    "start": "947279",
    "end": "952440"
  },
  {
    "text": "totally different kinds of values and I'll prove that on uh an upcoming slide here's another one uh with coer we've",
    "start": "952440",
    "end": "959480"
  },
  {
    "text": "got an object 01 just a plain old normal object and on line six if I try to stringify it we get the regular object",
    "start": "959480",
    "end": "965959"
  },
  {
    "text": "um garbage that comes out but if you take an object and you create it with a null prototype in other words you create",
    "start": "965959",
    "end": "971920"
  },
  {
    "text": "like some sort of dictionary object if you try to coers that to a string it's not like you get some other kind of string you actually get an error now",
    "start": "971920",
    "end": "978519"
  },
  {
    "text": "wait a minute I thought JavaScript was all about trying to do something useful for us instead of throwing errors everywhere why do we have the",
    "start": "978519",
    "end": "983880"
  },
  {
    "text": "inconsistencies that there are sometimes errors and sometimes not here it's because uh n prototyped object doesn't",
    "start": "983880",
    "end": "990120"
  },
  {
    "text": "have access to its string of two string and value of but still that's nuts why why doesn't have some exception to to",
    "start": "990120",
    "end": "996120"
  },
  {
    "text": "treat that more consistently with the other case a new uh primitive value type",
    "start": "996120",
    "end": "1002240"
  },
  {
    "start": "1000000",
    "end": "1115000"
  },
  {
    "text": "that's coming in es6 is called symbol and I'm not going to get into all of what symbol's about because some people love it some people hate it but I do",
    "start": "1002240",
    "end": "1007880"
  },
  {
    "text": "want to talk about um another crazy WTF which is that they they intentionally decided that symbols can be explicitly",
    "start": "1007880",
    "end": "1015360"
  },
  {
    "text": "coerced like we see on line five but they cannot be implicitly coerced if you try to implicitly coer it throws an",
    "start": "1015360",
    "end": "1020399"
  },
  {
    "text": "error again crazy inconsistency that is going to trip people up there are",
    "start": "1020399",
    "end": "1025720"
  },
  {
    "text": "reasons there's long discussion list about why they think this is the right decision but when we take a step back",
    "start": "1025720",
    "end": "1030760"
  },
  {
    "text": "and ask what does that mean in terms of consistency of my code if there's some places where it's an error and some places it's not that's asking for people",
    "start": "1030760",
    "end": "1037438"
  },
  {
    "text": "to get tripped up all right empty slots are another one of my favorite things to hate on we see the array Constructor",
    "start": "1037439",
    "end": "1043520"
  },
  {
    "text": "here the array three and you would think that creates an array pre-sized to length three un fortunately there's no",
    "start": "1043520",
    "end": "1049520"
  },
  {
    "text": "such thing as there's no such concept whatsoever of pre-sizing an array actually underneath the the covers the",
    "start": "1049520",
    "end": "1054760"
  },
  {
    "text": "spec says something entirely different about this array but most people think array three creates an array of three undefined values and you notice it's a",
    "start": "1054760",
    "end": "1061240"
  },
  {
    "text": "little hard to read on it with the comments but you notice that in Chrome they represented as undefined time three",
    "start": "1061240",
    "end": "1066280"
  },
  {
    "text": "when you when you print that value out in the console undefined time three but if you look on line nine that same array",
    "start": "1066280",
    "end": "1072120"
  },
  {
    "text": "explicitly declared when Chrome represents it it actually spells out undefined undefined undefined that should be our first clue that these are",
    "start": "1072120",
    "end": "1078440"
  },
  {
    "text": "indeed actually entirely different value types even though undefined time 3 looks a really awful lot like undefined",
    "start": "1078440",
    "end": "1085240"
  },
  {
    "text": "undefined undefined they're not Firefox does a better job mostly because I've been complaining at them for a while",
    "start": "1085240",
    "end": "1090520"
  },
  {
    "text": "they do a much better job and they actually call it three empty slots rather than trying to pretend that undefined is the same thing as an empty",
    "start": "1090520",
    "end": "1097280"
  },
  {
    "text": "slot under the covers the spec actually says when you do something like array three create an empty array and then",
    "start": "1097280",
    "end": "1103760"
  },
  {
    "text": "arbitrarily set its length property of three so you can do that you can create your own empty slots like this and then",
    "start": "1103760",
    "end": "1109640"
  },
  {
    "text": "you end up creating that s that weirdness of undefined time 3 as opposed to undefined undefined undefined now I said that they were",
    "start": "1109640",
    "end": "1116840"
  },
  {
    "start": "1115000",
    "end": "1211000"
  },
  {
    "text": "actually different values and this slide will prove it because if you start out with undefined undefined undefined and you call join on it it works and if you",
    "start": "1116840",
    "end": "1123320"
  },
  {
    "text": "call join on it like you do on line 7 it also works but if you try map the map function You' get it different because",
    "start": "1123320",
    "end": "1129240"
  },
  {
    "text": "the map function actually iterates overv values rather than just doing a regular for Loop so map and join have a",
    "start": "1129240",
    "end": "1134360"
  },
  {
    "text": "different semantic that exposes itself when you're dealing with these crazy empty Slaughter I empty slots this concept of array like",
    "start": "1134360",
    "end": "1142159"
  },
  {
    "text": "objects is the first true genuine WTF that I identified in JavaScript it's nuts there's literally no reason why we",
    "start": "1142159",
    "end": "1148240"
  },
  {
    "text": "should have a concept of empty slots like this by the way that little weird Arrow syntax that you see there on line",
    "start": "1148240",
    "end": "1154240"
  },
  {
    "text": "four and also line 10 that's es6 is new version of the uh of the function it's called an arrow function I'm not going",
    "start": "1154240",
    "end": "1160280"
  },
  {
    "text": "to get into Arrow function today but just to let you know Arrow function is all so that people that make slides and write books can write less code that's",
    "start": "1160280",
    "end": "1166320"
  },
  {
    "text": "really that's its only purpose so I put it on my slides so that my slides are shorter all right array apply array this",
    "start": "1166320",
    "end": "1174440"
  },
  {
    "text": "is how we create one of those arrays that actually has the undefined values and you'll notice up on the top line we",
    "start": "1174440",
    "end": "1179679"
  },
  {
    "text": "pass in one of those weird array objects with a length three basically appli doesn't really care what kind of object",
    "start": "1179679",
    "end": "1186000"
  },
  {
    "text": "you give it as long as it has a property called length it will create something of that same value it just Bas does an",
    "start": "1186000",
    "end": "1192120"
  },
  {
    "text": "internal for Loop so you notice on line seven I just do an arbitrary object with length property three which looks nuts",
    "start": "1192120",
    "end": "1197840"
  },
  {
    "text": "but that works and even down on line 10 you see a function that has three declared parameters because function",
    "start": "1197840",
    "end": "1203480"
  },
  {
    "text": "objects have a length property equal to the number of their declared parameters WTF",
    "start": "1203480",
    "end": "1209640"
  },
  {
    "text": "okay quickly moving on uh this is a short one but um many of you have have",
    "start": "1209640",
    "end": "1215840"
  },
  {
    "start": "1211000",
    "end": "1293000"
  },
  {
    "text": "at least seen or maybe you've toyed around or used switch statements in your code some people hate them but some people find that they're actually quite",
    "start": "1215840",
    "end": "1221400"
  },
  {
    "text": "useful they oftentimes can be more performant than their counterpart so switch is useful and most everyone that",
    "start": "1221400",
    "end": "1226840"
  },
  {
    "text": "I've ever seen in fact I'm I'm pretty sure it's everyone that I've ever seen uses a switch statement and if they have",
    "start": "1226840",
    "end": "1232000"
  },
  {
    "text": "a default clause they put the default clause at the end it's nearly all documentation literature on the subject",
    "start": "1232000",
    "end": "1237760"
  },
  {
    "text": "turns out the spec says you can put default wherever you want you can put it at the top or write smack dab in the middle unfortunately if you put it",
    "start": "1237760",
    "end": "1244400"
  },
  {
    "text": "somewhere else it does lead to some really crazy WTF here's an example so I'm switching on the value 42 now notice",
    "start": "1244400",
    "end": "1250840"
  },
  {
    "text": "that none of my cases match 42 so the first thing that's going to happen is the engine's going to go through all of",
    "start": "1250840",
    "end": "1256200"
  },
  {
    "text": "those cases skipping over the default of course go go through all of those cases and it's not going to find a matching",
    "start": "1256200",
    "end": "1262640"
  },
  {
    "text": "one and then it's going to invoke the default clause the way we would expect but because we don't have a break inside",
    "start": "1262640",
    "end": "1269559"
  },
  {
    "text": "of our default because nobody puts Brakes in their defaults now we've created this Loop where we start back",
    "start": "1269559",
    "end": "1274760"
  },
  {
    "text": "and fall back through to one of the other cases and we print out oops what the this crazy weird Loop thing that",
    "start": "1274760",
    "end": "1282120"
  },
  {
    "text": "happens just because you moved default out of place now I know everybody would say well just don't do that right there's lots of things that we can avoid",
    "start": "1282120",
    "end": "1287960"
  },
  {
    "text": "if we're smart enough to not do them but that doesn't mean we should create foot guns in the design of the language okay",
    "start": "1287960",
    "end": "1293960"
  },
  {
    "start": "1293000",
    "end": "1456000"
  },
  {
    "text": "finally and I'm actually going to bash on the finally Clause quite a bit I don't mean finally I'm not anywhere near done but finally the Clause that comes",
    "start": "1293960",
    "end": "1300840"
  },
  {
    "text": "up in JavaScript all right so if you're not familiar with finally essentially what",
    "start": "1300840",
    "end": "1305880"
  },
  {
    "text": "it says is after a try condition and you don't have to have a catch but you can but after a fi after a try SL TR catch",
    "start": "1305880",
    "end": "1313360"
  },
  {
    "text": "condition after that has fully completed whatever it's doing the finally Clause is guarant gued to run it's almost like",
    "start": "1313360",
    "end": "1319559"
  },
  {
    "text": "a hidden callback it's stuck somewhere on the stack and it's guaranteed to run no matter what happens even with an error which is really nice for like",
    "start": "1319559",
    "end": "1325679"
  },
  {
    "text": "cleanup conditions and things like that so here we see kind of a craziness of the finally which is inside of the try",
    "start": "1325679",
    "end": "1332000"
  },
  {
    "text": "condition I return the value two so in other words I'm saying I want to finish up the function now it is definitely",
    "start": "1332000",
    "end": "1337799"
  },
  {
    "text": "there are definitely cases where having a finally in this case is useful if you want to do something after you've return to Value that's great right there",
    "start": "1337799",
    "end": "1344320"
  },
  {
    "text": "there's there's cleanup reasons why you do this but if you put an explicit return in your finally it overrides the",
    "start": "1344320",
    "end": "1351000"
  },
  {
    "text": "previous return so now you have two returns in your code what on Earth and where did two go we just completely lost",
    "start": "1351000",
    "end": "1357760"
  },
  {
    "text": "to it just got thrown away but that's not even remotely the craziness of finally all right so this one is not a",
    "start": "1357760",
    "end": "1364480"
  },
  {
    "text": "WTF this is just a basic statement which most of us would agree with that not returning from a function or returning",
    "start": "1364480",
    "end": "1371919"
  },
  {
    "text": "with no value or returning with the explicit undefined value in all cases that we're all familiar with those are",
    "start": "1371919",
    "end": "1377520"
  },
  {
    "text": "indistinguishable they're the same condition right and in all cases of es5",
    "start": "1377520",
    "end": "1383520"
  },
  {
    "text": "except for the one I'm about to show you that is definitely true what happens with the finally if we",
    "start": "1383520",
    "end": "1390159"
  },
  {
    "text": "put a return an explicit return inside of the finally it overrides but if we do",
    "start": "1390159",
    "end": "1395840"
  },
  {
    "text": "not put an explicit return inside of the finally it pretends that it didn't try to override at all so it doesn't",
    "start": "1395840",
    "end": "1401279"
  },
  {
    "text": "actually behave the same depending on a return versus not a return so there we",
    "start": "1401279",
    "end": "1406320"
  },
  {
    "text": "got the two now label blocks everybody's favorite go-to behavior in JavaScript",
    "start": "1406320",
    "end": "1411760"
  },
  {
    "text": "the one we probably wish would go away but they exist and there are reasons for it the break statement that we see on",
    "start": "1411760",
    "end": "1416799"
  },
  {
    "text": "line seven can break to continue after the labeled block so basically we're",
    "start": "1416799",
    "end": "1421840"
  },
  {
    "text": "going to skip to line nine and finish after that labeled block if you break inside of a finally it cancels the",
    "start": "1421840",
    "end": "1428679"
  },
  {
    "text": "finally and it just lets the function continue going like normal so even though you your your function may have",
    "start": "1428679",
    "end": "1435200"
  },
  {
    "text": "thrown an error or in this case returned to Value cuz I returned a two now when we get to line 11 we're not",
    "start": "1435200",
    "end": "1441120"
  },
  {
    "text": "inside of the finally anymore so a an omission of a returned is the same thing as returning undefined and we lost our",
    "start": "1441120",
    "end": "1446520"
  },
  {
    "text": "two value what the come on you guys are you're Dr dropping the ball I shouldn't",
    "start": "1446520",
    "end": "1451600"
  },
  {
    "text": "have to you must agree that these are some wtfs all right one of my new favorite",
    "start": "1451600",
    "end": "1457640"
  },
  {
    "start": "1456000",
    "end": "1675000"
  },
  {
    "text": "features in all of es6 is generators um and so I'm going to show you a couple of slides that are actually",
    "start": "1457640",
    "end": "1462760"
  },
  {
    "text": "really good these are not wtfs this is cool but it may seem crazy to you a generator in brief is a function that",
    "start": "1462760",
    "end": "1468640"
  },
  {
    "text": "can pause itself and then be resumed externally so rather than a function run into completion we can pause it they're",
    "start": "1468640",
    "end": "1474360"
  },
  {
    "text": "actually really really powerful for infinite lists of values they're also really powerful for expressing flow",
    "start": "1474360",
    "end": "1479880"
  },
  {
    "text": "control when you combine them with promises so I'm a big fan of generators um what you see right here is when I",
    "start": "1479880",
    "end": "1485240"
  },
  {
    "text": "execute Fu I'm getting an iterator and when I call next on the First on line eight I get back the yield one from line",
    "start": "1485240",
    "end": "1491399"
  },
  {
    "text": "two so and the the done false tells me that it's not done and then I call it. next and I can pass in a value and that",
    "start": "1491399",
    "end": "1497640"
  },
  {
    "text": "value five goes back in and that's what get print that's why it gets printed out a colon 5 so yield is actually a two-way",
    "start": "1497640",
    "end": "1503919"
  },
  {
    "text": "message passing while it's pausing and resuming fantastically powerful it's going to look weird to you but I promise",
    "start": "1503919",
    "end": "1509080"
  },
  {
    "text": "this is not a WTF this is a super awesome part of the language it's just going to take some new getting used to",
    "start": "1509080",
    "end": "1514600"
  },
  {
    "text": "and finally once we're done with the function we get back a value undefined and a done true that lets us know that we're finished iterating through a",
    "start": "1514600",
    "end": "1522520"
  },
  {
    "text": "function um there's also a method on a generator if a generator is pause",
    "start": "1522720",
    "end": "1528559"
  },
  {
    "text": "somewhere in between and you're totally done with it you're done with all the values and when to free up all of its memory you can call return on it and by",
    "start": "1528559",
    "end": "1534760"
  },
  {
    "text": "calling return you're saying I want you to abort where you have been paused just completely abort it's not an error but",
    "start": "1534760",
    "end": "1539960"
  },
  {
    "text": "aort and if you pass a value to return you just get the value right back which is a little weird it's like it's like",
    "start": "1539960",
    "end": "1545960"
  },
  {
    "text": "injecting a return into your generator it's a little bit strange but it's still there's cases where that's useful so",
    "start": "1545960",
    "end": "1552000"
  },
  {
    "text": "again not a WTF but here's the wtfs when they start when we inject finally our good friend finally guess what happen",
    "start": "1552000",
    "end": "1558360"
  },
  {
    "text": "happens when you have a finally Clause again this one's not so crazy we'll see",
    "start": "1558360",
    "end": "1563440"
  },
  {
    "text": "in just I'm sorry we'll see in just the next slide if we inject a finally Clause into it we know that if we call a do",
    "start": "1563440",
    "end": "1569480"
  },
  {
    "text": "return right in the middle that it still runs the finally Clause so we're happy with that probably because that's the same as with functions what is crazy is",
    "start": "1569480",
    "end": "1577480"
  },
  {
    "text": "that if a finally if a try condition is the one that accepts a return like if you try to abort inside of a try the",
    "start": "1577480",
    "end": "1585080"
  },
  {
    "text": "presence of a finally Clause cancels the turn of the generator so the generator",
    "start": "1585080",
    "end": "1591000"
  },
  {
    "text": "just goes back to working like before without even doing the whole brake labeled block thing now in in this case",
    "start": "1591000",
    "end": "1596320"
  },
  {
    "text": "I know it's a little weird to see what the but you'll see the slides afterwards I'll give you the URL but when we uh",
    "start": "1596320",
    "end": "1601960"
  },
  {
    "text": "call a DOT return right in the middle of the first line of that TR condition we would expect it to run only the finally",
    "start": "1601960",
    "end": "1607799"
  },
  {
    "text": "clause and be done but actually as we play this out it runs not only everything inside of the finally Clause including pause and resume but it also",
    "start": "1607799",
    "end": "1614799"
  },
  {
    "text": "runs the code on line 11 even though we told it to stop running it keeps running the rest of the code in your function so",
    "start": "1614799",
    "end": "1620600"
  },
  {
    "text": "you are going to probably run into cases where somebody accidentally writes their their generator in a weird way and you",
    "start": "1620600",
    "end": "1626440"
  },
  {
    "text": "get un unexpected executions of statements basically this would boil down to finally is a really useful thing",
    "start": "1626440",
    "end": "1633919"
  },
  {
    "text": "that can really be abused okay now another great part of generators is",
    "start": "1633919",
    "end": "1640440"
  },
  {
    "text": "that they basically represent an infinite sequence of values that we can iterate over and we can use this new",
    "start": "1640440",
    "end": "1646520"
  },
  {
    "text": "four of loop the four I of Fu and that will automatically iterate over all the values that either a generator or any",
    "start": "1646520",
    "end": "1652799"
  },
  {
    "text": "general iterator has to give us except if you notice the return three value that I send at the end just gets",
    "start": "1652799",
    "end": "1659000"
  },
  {
    "text": "completely lost we yield one and we yield two and those values come out but when we do a return three the four of",
    "start": "1659000",
    "end": "1665000"
  },
  {
    "text": "loop throws away the final value it doesn't run the iteration one more time so you're going to lose values if you",
    "start": "1665000",
    "end": "1671240"
  },
  {
    "text": "accidentally use a return instead of a yield for example all right moving on es6 has introduced A New Concept with",
    "start": "1671240",
    "end": "1678480"
  },
  {
    "start": "1675000",
    "end": "1740000"
  },
  {
    "text": "block scoping there's actually quite a few places this can happen but they introduced this concept of the temporal",
    "start": "1678480",
    "end": "1683640"
  },
  {
    "text": "dead zone that I'm not making it up that's the actual name abbreviated tdz and the idea here is that a variable can",
    "start": "1683640",
    "end": "1689399"
  },
  {
    "text": "be in this special state where it has been declared but not yet initialized and if you're in that special weird",
    "start": "1689399",
    "end": "1694760"
  },
  {
    "text": "state things go wonky so the type of operator most people know the type of operator used to be considered to be",
    "start": "1694760",
    "end": "1701559"
  },
  {
    "text": "like the safe operator you could use it even with a variable that didn't exist and you wouldn't get an error you would just get this nice printed undefined",
    "start": "1701559",
    "end": "1708600"
  },
  {
    "text": "however if you try type of with a let declared variable let being the block scoping declaration if you use that",
    "start": "1708600",
    "end": "1715000"
  },
  {
    "text": "you'll notice on line three we actually get an error so it's not safe because the B variable is in a different kind of",
    "start": "1715000",
    "end": "1721000"
  },
  {
    "text": "a state than the non-existent a variable B exists but it's not initialized and you're not allowed to touch it so I'm",
    "start": "1721000",
    "end": "1726600"
  },
  {
    "text": "going to slap your hand if you do uh so you got to be careful thinking about the type of operator and again it's an",
    "start": "1726600",
    "end": "1732320"
  },
  {
    "text": "inconsistency if type of Works safely with one type of variable it's weird that it doesn't work with this type of",
    "start": "1732320",
    "end": "1737640"
  },
  {
    "text": "variable all right a huge um major feature that's coming in es6 going to make lots of",
    "start": "1737640",
    "end": "1743799"
  },
  {
    "start": "1740000",
    "end": "1886000"
  },
  {
    "text": "improvements to code and I'm a big fan object destructuring couple of examples of really good uses of object",
    "start": "1743799",
    "end": "1748919"
  },
  {
    "text": "destructuring here's the old way if I have a function that wants to return more than one value I can either put it in an array or oftentimes you put it in",
    "start": "1748919",
    "end": "1755120"
  },
  {
    "text": "an object like I'm doing on line four so I'm returning an object with some properties and the values and if I want",
    "start": "1755120",
    "end": "1760360"
  },
  {
    "text": "to extract those values you see on line eight I just declare variables for each one of the properties and I pull the",
    "start": "1760360",
    "end": "1765679"
  },
  {
    "text": "values out you've probably written code like that or something similar at some point now object destructuring actually",
    "start": "1765679",
    "end": "1772360"
  },
  {
    "text": "has a really nice Syntax for this you notice on line seven we can just simply declare an object in the position of a",
    "start": "1772360",
    "end": "1778240"
  },
  {
    "text": "declaration on the left hand side and it automatically declares those variables for us and extracts them for us so now",
    "start": "1778240",
    "end": "1784080"
  },
  {
    "text": "we have these top level variables and that's a super useful uh feature that you're going to find all over the language in es6 that's not a",
    "start": "1784080",
    "end": "1791440"
  },
  {
    "text": "WTF in fact we also have um property shorthands you notice on the previous slide I had X colon X and Y yon y that",
    "start": "1791440",
    "end": "1798760"
  },
  {
    "text": "ugly older syntax now if the property name and the value that it's referencing are the same you can just shorten it and",
    "start": "1798760",
    "end": "1804600"
  },
  {
    "text": "leave out the colon part so it's even better I love this syntax it's going to be very useful but there's a little bit",
    "start": "1804600",
    "end": "1810279"
  },
  {
    "text": "of a problem with inconsistency so here when I declare if I wanted to have a variable that was different than the",
    "start": "1810279",
    "end": "1816120"
  },
  {
    "text": "property name what I do is I declare the Alias if you will as lowercase x as you",
    "start": "1816120",
    "end": "1822399"
  },
  {
    "text": "see on line four and then the value that I'm referencing is the capital XX value so it goes Al value in a left to right",
    "start": "1822399",
    "end": "1829640"
  },
  {
    "text": "fashion so you would think for consistency sake that we would keep that same pattern when we start dealing with",
    "start": "1829640",
    "end": "1834720"
  },
  {
    "text": "things with object destructuring Unfortunately they for whatever reason chose to reverse that pattern so as we",
    "start": "1834720",
    "end": "1840159"
  },
  {
    "text": "see here if I want to destructure with those values I'm sorry oh one other",
    "start": "1840159",
    "end": "1845919"
  },
  {
    "text": "slide I forgot so you can also um nice thing about object destructuring I'm passing back a zv value but I don't care",
    "start": "1845919",
    "end": "1852200"
  },
  {
    "text": "about the Z value I'm throwing it away I'm not even assigning it on line 7 and that's totally okay so you don't actually have to account for property",
    "start": "1852200",
    "end": "1859320"
  },
  {
    "text": "but here's where we start to see some crazy inconsistency you notice on line four that it goes Alias value Alias",
    "start": "1859320",
    "end": "1865399"
  },
  {
    "text": "value but on line seven if I want to do the same thing I have to go value Alias value Alias again it's an inconsistency",
    "start": "1865399",
    "end": "1873240"
  },
  {
    "text": "in the way the brain thinks about these structures if you've been used to thinking about object literals with the",
    "start": "1873240",
    "end": "1878679"
  },
  {
    "text": "property name as your Alias and the value is the reference on the right hand side now you have to reverse that when you're thinking about object",
    "start": "1878679",
    "end": "1884760"
  },
  {
    "text": "destructuring now object destructuring is also awesome for par because we can now get this concept of named parameters",
    "start": "1884760",
    "end": "1890720"
  },
  {
    "start": "1886000",
    "end": "1931000"
  },
  {
    "text": "so up on the line one you see I can just declare an object in a parameter position and those property values that",
    "start": "1890720",
    "end": "1896279"
  },
  {
    "text": "are listed there are automatically extracted from an object that's passed in so if I pass in the object with y10",
    "start": "1896279",
    "end": "1902519"
  },
  {
    "text": "and x25 even in their reverse order I end up getting 2510 printed out as top level variables super useful lots of",
    "start": "1902519",
    "end": "1909399"
  },
  {
    "text": "shortened code easier to understand code you can even add on those extra",
    "start": "1909399",
    "end": "1914960"
  },
  {
    "text": "parameters so that you can use an object destructuring more than once in each location of a parameter so that's great",
    "start": "1914960",
    "end": "1922039"
  },
  {
    "text": "but when we want to do when we want to do that aliasing again the aliasing is reversed so now you've got this craziness of thinking about your",
    "start": "1922039",
    "end": "1927799"
  },
  {
    "text": "aliasing in reversed fashion Now default parameteres this is another Super useful",
    "start": "1927799",
    "end": "1932880"
  },
  {
    "start": "1931000",
    "end": "2034000"
  },
  {
    "text": "thing in es6 and I promise I'm almost wrapped up I know we're going slightly over but I'm almost wrapped up default",
    "start": "1932880",
    "end": "1938200"
  },
  {
    "text": "parameter values here I want to define a default value to hold for the Y uh parameter if I don't pass in a y value",
    "start": "1938200",
    "end": "1945080"
  },
  {
    "text": "so I can just say equals 10 in the function declaration super super useful almost every other language in the planet's had it we're finally getting it",
    "start": "1945080",
    "end": "1951080"
  },
  {
    "text": "as a V6 I'm real excited about it but again we're going to see that there's some wtfs waiting for us if we dig into",
    "start": "1951080",
    "end": "1957880"
  },
  {
    "text": "that syntax so what happens when you start using objects as your default values on line one you see that I have",
    "start": "1957880",
    "end": "1964279"
  },
  {
    "text": "two different ways of expressing an object with a default fallback for one of its property values I'm saying that",
    "start": "1964279",
    "end": "1970559"
  },
  {
    "text": "on on the first one I'm saying X is equal to and then I've got a fallback value of a of an object with a Y",
    "start": "1970559",
    "end": "1976840"
  },
  {
    "text": "property of 10 so if X is not passed at all my default value will be an object",
    "start": "1976840",
    "end": "1982440"
  },
  {
    "text": "with y10 on it which is why you see on line two I say x.y I'm going to get the object itself slightly differently and",
    "start": "1982440",
    "end": "1988679"
  },
  {
    "text": "and a really strange looking syntax at least to me is the second one where you see y equals 20 inside of the curly",
    "start": "1988679",
    "end": "1994320"
  },
  {
    "text": "braces and then equals empty object what the hell is going on with that well what",
    "start": "1994320",
    "end": "1999880"
  },
  {
    "text": "that's saying is in sort of a bizarre way we kind of twist our way around this this processing what it's saying is if",
    "start": "1999880",
    "end": "2006240"
  },
  {
    "text": "you don't pass in any object I'm going to give you an empty object and then",
    "start": "2006240",
    "end": "2011960"
  },
  {
    "text": "it's saying if whatever I get whether the default object or the object you passed in doesn't have a y property",
    "start": "2011960",
    "end": "2017799"
  },
  {
    "text": "default the Y property to the value 20 which is probably what most of us would want the second of the two syntaxes is",
    "start": "2017799",
    "end": "2024279"
  },
  {
    "text": "going to be the more likely syntax that we use but it's also the more WTF of the two syntaxes yet again more inconsistency",
    "start": "2024279",
    "end": "2031559"
  },
  {
    "text": "and incoherency all right my last topic I put classes in quotes it's no surprise",
    "start": "2031559",
    "end": "2037000"
  },
  {
    "start": "2034000",
    "end": "2296000"
  },
  {
    "text": "uh to those of you that follow me that I really hate the idea of classes and even though classes coming to JavaScript and",
    "start": "2037000",
    "end": "2042360"
  },
  {
    "text": "es6 I think it's a terrible idea this was the old school way of doing classes",
    "start": "2042360",
    "end": "2048158"
  },
  {
    "text": "with the Prototype based coding and you'll notice that most of that probably looks familiar the whole object.create to link the prototypes thing look down",
    "start": "2048159",
    "end": "2054960"
  },
  {
    "text": "at line 15 you'll notice that crazy ugliness this doore prototo by the way that's pronounced Dunder prototo so",
    "start": "2054960",
    "end": "2060679"
  },
  {
    "text": "this. Dunder prototo Dunder prototo do another. call this what in the hell is",
    "start": "2060679",
    "end": "2066480"
  },
  {
    "text": "that that is our stand in at least for right now for not having a super keyword",
    "start": "2066480",
    "end": "2072560"
  },
  {
    "text": "we want to be able to do relative polymorphism that's what super is all about but we don't have that at least prior to es6 so we have to do crap like",
    "start": "2072560",
    "end": "2079358"
  },
  {
    "text": "that and you may think oh that's bad but not too bad except for the fact that you actually don't know how many protos you",
    "start": "2079359",
    "end": "2084520"
  },
  {
    "text": "need until you know how long the stack is because if you have three classes in your inheritance chain now you need three Dunder protos so it's actually",
    "start": "2084520",
    "end": "2091320"
  },
  {
    "text": "impossible to write it correctly this just happens to work in that case that's terrible but people have been writing",
    "start": "2091320",
    "end": "2096560"
  },
  {
    "text": "that kind of code for 20 years actually they've been stuffing it inside of Frameworks but they've been writing it the new class syntax which everybody is",
    "start": "2096560",
    "end": "2103280"
  },
  {
    "text": "vaunting is oh this is so awesome it's like the best thing that ever happen in JavaScript this slide shows it working",
    "start": "2103280",
    "end": "2108359"
  },
  {
    "text": "in a very sane fashion I got a parent class that I call PX and a child class called CX I'm sorry I shouldn't have",
    "start": "2108359",
    "end": "2114000"
  },
  {
    "text": "left that parentheses there that was a mistake uh the parentheses don't come after the class name uh but if you",
    "start": "2114000",
    "end": "2120280"
  },
  {
    "text": "extend uh if you use the extends class you extend the parent class and then when we're able to override uh in the",
    "start": "2120280",
    "end": "2125839"
  },
  {
    "text": "child class the another method and you notice there that I can call super. another and it supposedly is going to",
    "start": "2125839",
    "end": "2131880"
  },
  {
    "text": "give me the relative polymorphism that I've been missing forever that's one of the big things that everybody's claiming is awesome about es6 classes",
    "start": "2131880",
    "end": "2139480"
  },
  {
    "text": "unfortunately but if you P push into what super is all about and by the way I'm being generous because I don't like",
    "start": "2139480",
    "end": "2145000"
  },
  {
    "text": "classes at all but it's not a WTF that's actually the way it's designed to work but the thing about this we know that",
    "start": "2145000",
    "end": "2151160"
  },
  {
    "text": "the this is a dynamically bound property which means if I take a method and I explicitly bind it to some other I can",
    "start": "2151160",
    "end": "2157720"
  },
  {
    "text": "borrow those functions and use them around that's a very common thing in JavaScript unfortunately the super keyword is not dynamically bound it's",
    "start": "2157720",
    "end": "2164480"
  },
  {
    "text": "actually statically bound at the time that you declare the method it's this whole like when it's parsing it adds it",
    "start": "2164480",
    "end": "2169960"
  },
  {
    "text": "to it which means that if you try to borrow a method that has a super reference in it instead of that automatically getting borrowed now it's",
    "start": "2169960",
    "end": "2176599"
  },
  {
    "text": "still bizarrely pointing to the other one which is what I'm showing here I know this is some crazy complex code but I got two different parent child class",
    "start": "2176599",
    "end": "2183040"
  },
  {
    "text": "pairs here I've got a px CX and a pyc y and down here on L 23 I'm trying to take",
    "start": "2183040",
    "end": "2189440"
  },
  {
    "text": "an instance of Y and dynamically bind it against the X hierarchy and it works for",
    "start": "2189440",
    "end": "2194720"
  },
  {
    "text": "the this keyword but it fails for the super keyword now I know that that may not seem like something that's going to often be done but JavaScript is all",
    "start": "2194720",
    "end": "2200960"
  },
  {
    "text": "about these Dynamic hierarchies that's what we've been doing for 20 years and it's a strange stretch for us to go back",
    "start": "2200960",
    "end": "2206800"
  },
  {
    "text": "to having statically bound methods they did it for performance reasons but it's still going to be strange when you poke",
    "start": "2206800",
    "end": "2212440"
  },
  {
    "text": "on trying to do dynamicism with classes even if you try to change the hierarchy like I'm doing with set protot type of",
    "start": "2212440",
    "end": "2218200"
  },
  {
    "text": "you still get the same problem now there was a proposal to fix this um inability",
    "start": "2218200",
    "end": "2224560"
  },
  {
    "text": "for the super to be pointed the wrong location there was a proposal which looks crazy but on line 18 there was this proposal to use this two method",
    "start": "2224560",
    "end": "2231119"
  },
  {
    "text": "thing literally like less than a week ago they voted to leave it out so we can't actually fix those super values",
    "start": "2231119",
    "end": "2238000"
  },
  {
    "text": "once they've been defined at structured time you can't change them ever again or at least not an es6 unfortunat even",
    "start": "2238000",
    "end": "2244280"
  },
  {
    "text": "though that was ugly unfortunately that was going to be quite useful for many cases people that do mixins and things like that so we're kind of left in this",
    "start": "2244280",
    "end": "2249920"
  },
  {
    "text": "weird state where super seems to work great if if you're using a really simple case if you start pushing on the complex",
    "start": "2249920",
    "end": "2255599"
  },
  {
    "text": "cases with dynamicism it's going to fall apart quickly all right that was a super quick run through I apologize for",
    "start": "2255599",
    "end": "2261000"
  },
  {
    "text": "running a couple minutes over but I would just end by saying yeah",
    "start": "2261000",
    "end": "2266119"
  },
  {
    "text": "haters are going to hate and I'm I'm one of them right so I'm hating on the language a language that I love I'm still going to JavaScript I'm still",
    "start": "2266119",
    "end": "2272400"
  },
  {
    "text": "going to write I'm still going to encourage others I'm still going to teach people as Brendan Ike likes to say always bet on JavaScript and its wtfs",
    "start": "2272400",
    "end": "2280000"
  },
  {
    "text": "thanks very much I appreciate there's the URL for the slides if you want to check them [Applause]",
    "start": "2280000",
    "end": "2290489"
  },
  {
    "text": "out",
    "start": "2295160",
    "end": "2298160"
  }
]