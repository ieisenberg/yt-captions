[
  {
    "text": "[Music]",
    "start": "1610",
    "end": "10360"
  },
  {
    "text": "we're going to revisit our four kinds of argument uh declaration and",
    "start": "10360",
    "end": "15560"
  },
  {
    "text": "passing um and talk about a couple of common gotas revisit zip with some of",
    "start": "15560",
    "end": "20600"
  },
  {
    "text": "the new power that we've got and then spend some time figuring out how name spaces and scoping Works in Python which",
    "start": "20600",
    "end": "26199"
  },
  {
    "text": "we've just kind of waved our hands about so far and not really examined particularly well and then we're going",
    "start": "26199",
    "end": "31840"
  },
  {
    "text": "to talk about um the fact that functions are first class variables in Python and",
    "start": "31840",
    "end": "38160"
  },
  {
    "text": "what that lets us do um we'll get into reading and writing files a little bit parsing the command line a little bit",
    "start": "38160",
    "end": "44039"
  },
  {
    "text": "dock tests a little bit start to tour some of the standard library and I will'll just continue to develop our",
    "start": "44039",
    "end": "49399"
  },
  {
    "text": "classmates file to explore all that um and if we're lucky and we progress well today we'll get into some sorting with",
    "start": "49399",
    "end": "56079"
  },
  {
    "text": "higher order functions um and maybe do like Anonymous functions and closures by the end of the day if we can get there",
    "start": "56079",
    "end": "62280"
  },
  {
    "text": "so that's our ambitious",
    "start": "62280",
    "end": "66798"
  },
  {
    "text": "plan so let's go ahead and review what we know about uh",
    "start": "67560",
    "end": "73479"
  },
  {
    "text": "functions okay so we declare functions with a defa keyword we give our function some kind",
    "start": "73479",
    "end": "80119"
  },
  {
    "text": "of name hopefully a more meaningful one than that and what are the ways in which we can specify the parameters the",
    "start": "80119",
    "end": "86680"
  },
  {
    "text": "function will accept what do you mean by designate parameters okay and what are those kind of",
    "start": "86680",
    "end": "92399"
  },
  {
    "text": "parameters called positional parameters and they're also",
    "start": "92399",
    "end": "99479"
  },
  {
    "text": "mandatory if I specify parameters like that A and B this is a function that",
    "start": "99479",
    "end": "105079"
  },
  {
    "text": "takes two",
    "start": "105079",
    "end": "108439"
  },
  {
    "text": "arguments and wo be tied you if you only pass it one right so positional",
    "start": "110880",
    "end": "115960"
  },
  {
    "text": "mandatory arguments how else somebody else how else can we Define parameters to our",
    "start": "115960",
    "end": "124000"
  },
  {
    "text": "functions okay yeah we can assign a default value and we are also implicitly",
    "start": "135840",
    "end": "142120"
  },
  {
    "text": "giving this argument a name these are named and optional",
    "start": "142120",
    "end": "149959"
  },
  {
    "text": "function arguments function parameters and we can now call this",
    "start": "149959",
    "end": "156200"
  },
  {
    "text": "function and only pass it one argument if we want to now I lied terribly yesterday in the",
    "start": "156200",
    "end": "163800"
  },
  {
    "text": "interest of simplification and this as long as we're clear on how this",
    "start": "163800",
    "end": "170360"
  },
  {
    "text": "works so far this shouldn't blow your mind too badly we can mix and match these two things",
    "start": "170360",
    "end": "176040"
  },
  {
    "text": "right we can also",
    "start": "176040",
    "end": "181760"
  },
  {
    "text": "call any parameter no matter how it's defined in the function either by name or",
    "start": "184920",
    "end": "191760"
  },
  {
    "text": "positionally that's calling that's not defining so if you notice that on line five I said a equals 2 that first",
    "start": "191760",
    "end": "199440"
  },
  {
    "text": "parameter is a positional parameter so I wouldn't have had to specify the",
    "start": "199440",
    "end": "205080"
  },
  {
    "text": "name and it doesn't specify a default value but I still could specify the name",
    "start": "205080",
    "end": "210560"
  },
  {
    "text": "how you call the function is not dependent upon how the function was defined in this sense there are some",
    "start": "210560",
    "end": "217360"
  },
  {
    "text": "limitations to that obviously the other thing is I could make them",
    "start": "217360",
    "end": "222840"
  },
  {
    "text": "both be positional parameters right so the second one when",
    "start": "222840",
    "end": "229319"
  },
  {
    "text": "I Define the function has a name and a default value and I didn't specify the",
    "start": "229319",
    "end": "234760"
  },
  {
    "text": "default value I just passed the value um and you can see this in section 7. to",
    "start": "234760",
    "end": "240920"
  },
  {
    "text": "and I have it underlined in my much marked up print out but any argument to",
    "start": "240920",
    "end": "246400"
  },
  {
    "text": "a function can be passed implicitly by position or explicitly by name regardless of whether or not it has a",
    "start": "246400",
    "end": "252439"
  },
  {
    "text": "default value defined in the function so our only limitations for",
    "start": "252439",
    "end": "257919"
  },
  {
    "text": "that are when we're calling all the positional parameters have to come before named",
    "start": "257919",
    "end": "265120"
  },
  {
    "text": "parameters and the reason for that is",
    "start": "265120",
    "end": "271600"
  },
  {
    "text": "I can call named parameters in any order that I want but the order of positional",
    "start": "274960",
    "end": "283680"
  },
  {
    "text": "parameters is kind of crucial so line seven I called my",
    "start": "284199",
    "end": "290120"
  },
  {
    "text": "function Fu with b equal to 4 and a equal to two they're both named I called them in backwards order from how it's",
    "start": "290120",
    "end": "295880"
  },
  {
    "text": "defined but you notice it still printed out a first printed out two and four printed out a and then B it still knew",
    "start": "295880",
    "end": "303039"
  },
  {
    "text": "which um value went to which parameter because I explicitly named them in line eight I specifically named the value for",
    "start": "303039",
    "end": "309520"
  },
  {
    "text": "four and then I just passed a positional parameter and it doesn't know what to do with that is that the first positional",
    "start": "309520",
    "end": "314759"
  },
  {
    "text": "parameter because there haven't been any before or is that the second because it's actually the second it's too confusing you can't figure that out so",
    "start": "314759",
    "end": "321800"
  },
  {
    "text": "all your positional parameters have to be first and then any name parameters does that seem clear to",
    "start": "321800",
    "end": "328479"
  },
  {
    "text": "everybody so there's um there's a huge gotcha with defining um default values",
    "start": "328479",
    "end": "334160"
  },
  {
    "text": "and it has to do with how python parses your um code and I'm going to type in",
    "start": "334160",
    "end": "340479"
  },
  {
    "text": "the example from 7.3 and actually you go ahead and type in the example from 7.3 and run it as",
    "start": "340479",
    "end": "346560"
  },
  {
    "text": "well um does it know the order yeah it doesn't because in that case there would",
    "start": "346560",
    "end": "352800"
  },
  {
    "text": "be no there would be no positional",
    "start": "352800",
    "end": "358039"
  },
  {
    "text": "parameters and and okay so I should say before we actually I guess before we jump to um mutable arguments that's the",
    "start": "358039",
    "end": "364800"
  },
  {
    "text": "other that's the other little wrinkle we had yesterday right when you define your function there's one other two other",
    "start": "364800",
    "end": "370800"
  },
  {
    "text": "ways you can Define your parameters remember those new pieces of syntax star",
    "start": "370800",
    "end": "376319"
  },
  {
    "text": "and star star and the names are actually not significant but the convention is",
    "start": "376319",
    "end": "381479"
  },
  {
    "text": "always to use args and keyword",
    "start": "381479",
    "end": "385000"
  },
  {
    "text": "args what does that function",
    "start": "388400",
    "end": "394198"
  },
  {
    "text": "do",
    "start": "394479",
    "end": "397479"
  },
  {
    "text": "any if I can type here it'll print any positional",
    "start": "402360",
    "end": "409639"
  },
  {
    "text": "arguments because it specified star args is the array of all the positional arguments that are handed to the",
    "start": "409639",
    "end": "415560"
  },
  {
    "text": "function and I just gave it a keyword based argument and it doesn't accept any keyword based",
    "start": "415560",
    "end": "423800"
  },
  {
    "text": "arguments",
    "start": "424000",
    "end": "427000"
  },
  {
    "text": "similarly what does that",
    "start": "435879",
    "end": "439360"
  },
  {
    "text": "do right so star star keyword args indicates that my function accepts an",
    "start": "443240",
    "end": "448759"
  },
  {
    "text": "unlimited number of named arguments whatever their names are and it's printing",
    "start": "448759",
    "end": "453800"
  },
  {
    "text": "them and if I pass positional arguments in this case it",
    "start": "453800",
    "end": "461199"
  },
  {
    "text": "complains and we can mix and",
    "start": "462599",
    "end": "466759"
  },
  {
    "text": "match",
    "start": "478319",
    "end": "481319"
  },
  {
    "text": "and we can mix and match our arguments that we passed to it and it'll accept both um you don't often see a function",
    "start": "495199",
    "end": "503159"
  },
  {
    "text": "that defines itself with both star args and star star keyword ARS because it doesn't really tell you anything about what arguments that function accepts but",
    "start": "503159",
    "end": "509560"
  },
  {
    "text": "you'll very frequently see a function looks like",
    "start": "509560",
    "end": "515839"
  },
  {
    "text": "um something like that so if I had a function that is going to move a polygon around you have to pass it the top left",
    "start": "530360",
    "end": "537360"
  },
  {
    "text": "position of the polygon but then you could Define how you're going to move it in a variety of flexible ways like you",
    "start": "537360",
    "end": "543560"
  },
  {
    "text": "might decide to move it based on its relative position or its absolute position or based on its top left",
    "start": "543560",
    "end": "548760"
  },
  {
    "text": "position or based on its middle and you could Define all that in your keyword arguments leave some flexibility but",
    "start": "548760",
    "end": "555279"
  },
  {
    "text": "you've got a couple of mandatory arguments that must be accepted so that's a more common mix and match style",
    "start": "555279",
    "end": "560720"
  },
  {
    "text": "okay so that's everything we covered yesterday I think on functions now for the gachas uh from section 7.3 and I'll",
    "start": "560720",
    "end": "569399"
  },
  {
    "text": "do a simpler version",
    "start": "569399",
    "end": "573680"
  },
  {
    "text": "here okay so what does this function",
    "start": "584320",
    "end": "588600"
  },
  {
    "text": "do and it accepts B which is a keyword argument that has a default value of an empty list right so I might pass B",
    "start": "596079",
    "end": "602959"
  },
  {
    "text": "something and if not it should be an empty",
    "start": "602959",
    "end": "606240"
  },
  {
    "text": "list and that works out as you expect right it printed an empty list the first",
    "start": "622120",
    "end": "627160"
  },
  {
    "text": "time when I didn't Supply a default value what if I change B inside my",
    "start": "627160",
    "end": "636120"
  },
  {
    "text": "function okay did what I expected",
    "start": "653839",
    "end": "660240"
  },
  {
    "text": "now what's it",
    "start": "660240",
    "end": "662720"
  },
  {
    "text": "doing it's remembering the status of the list from function call to function call which is not the behavior I thought I",
    "start": "668519",
    "end": "674880"
  },
  {
    "text": "was going to get and the takeaway from this is python is allocating the default",
    "start": "674880",
    "end": "680880"
  },
  {
    "text": "values at function declaration time when the function is defined it creates a",
    "start": "680880",
    "end": "686279"
  },
  {
    "text": "default list and assigns it as the default value for B name parameter B and",
    "start": "686279",
    "end": "693000"
  },
  {
    "text": "that is a mutable variable and we're changing that mutable variable inside the function each time you run the",
    "start": "693000",
    "end": "699120"
  },
  {
    "text": "function it's not recreating the default values it's using the same default value that it used when it defined the",
    "start": "699120",
    "end": "705200"
  },
  {
    "text": "function so this is remembering the same value for each run of the function and there are times when",
    "start": "705200",
    "end": "711800"
  },
  {
    "text": "that behavior is useful but 99% of the time that catches you off guard that isn't what you expected you thought you",
    "start": "711800",
    "end": "717680"
  },
  {
    "text": "were just saying hey I I want an empty list by default or you can pass me some stuff if you made it a tle it's",
    "start": "717680",
    "end": "724959"
  },
  {
    "text": "immutable and you can't do anything to it you can parse it print it iterate through it but you can't change it if",
    "start": "726000",
    "end": "732839"
  },
  {
    "text": "you want a mutable variable as a default value and you don't want it to remember it state from time to time how would you",
    "start": "732839",
    "end": "740399"
  },
  {
    "text": "do that ideas yeah you'd have to declare it inside the",
    "start": "740399",
    "end": "746120"
  },
  {
    "text": "function this is what",
    "start": "746120",
    "end": "750880"
  },
  {
    "text": "the the parameter is not but the default value is nope",
    "start": "756199",
    "end": "761800"
  },
  {
    "text": "outside outside the function there is no",
    "start": "761800",
    "end": "768120"
  },
  {
    "text": "b b did not become a global variable but what happens",
    "start": "768120",
    "end": "773519"
  },
  {
    "text": "is what happens when python allocates a variable it looks at the type whether",
    "start": "773519",
    "end": "779079"
  },
  {
    "text": "it's mutable or immutable it makes space for that type on the stack and it assigns a label to it okay and that",
    "start": "779079",
    "end": "787880"
  },
  {
    "text": "label is only visible in context of the function of this particular function or any other of this particular function",
    "start": "787880",
    "end": "794800"
  },
  {
    "text": "yep has a whole different name space like it's a different B no",
    "start": "794800",
    "end": "800639"
  },
  {
    "text": "relationship whatsoever yep only and we're going to clarify scoping and namespace rules in a bit but it works as",
    "start": "800639",
    "end": "806680"
  },
  {
    "text": "you would expect at least the naive approach which is each function has its own local namespace and its parameters are visible only within the function's",
    "start": "806680",
    "end": "813920"
  },
  {
    "text": "own local name space and it doesn't remember if there isn't any default",
    "start": "813920",
    "end": "820120"
  },
  {
    "text": "value because it gets the value from each function call The Twist here is the",
    "start": "820120",
    "end": "825160"
  },
  {
    "text": "default value is calculated when the function is defined and each successive run uses the same default",
    "start": "825160",
    "end": "833320"
  },
  {
    "text": "value you that yes that is part of the",
    "start": "834800",
    "end": "839880"
  },
  {
    "text": "function definition and that normally doesn't screw you up when you say default is true or default is one they're immutable and strings are",
    "start": "839880",
    "end": "846560"
  },
  {
    "text": "immutable so you don't see it there lists are mutable and it's pretty common",
    "start": "846560",
    "end": "851800"
  },
  {
    "text": "to say ah let's default to an empty list and if you want to do that you need to do this",
    "start": "851800",
    "end": "859600"
  },
  {
    "text": "instead",
    "start": "867680",
    "end": "870680"
  },
  {
    "text": "let's see if this actually works and here we're getting the",
    "start": "881759",
    "end": "888279"
  },
  {
    "text": "behavior that you know we expected so our default value is none which is",
    "start": "888279",
    "end": "893920"
  },
  {
    "text": "immutable and we say hey do we have the default value so presumably the user did not",
    "start": "893920",
    "end": "900639"
  },
  {
    "text": "pass us something and if we do then let's go ahead and initialize an empty list and since that empty list is run",
    "start": "900639",
    "end": "908839"
  },
  {
    "text": "every time the function is run it works as we would",
    "start": "908839",
    "end": "915079"
  },
  {
    "text": "expect so this is just this is one gotcha with the default um the default value implementation of python that'll",
    "start": "919759",
    "end": "926680"
  },
  {
    "text": "that will bite you at some point I've stumbled on this myself even though I know it I'm just explaining it now so when you screw up you'll understand why",
    "start": "926680",
    "end": "933440"
  },
  {
    "text": "you screwed up later on um and let's go ahead and look",
    "start": "933440",
    "end": "939199"
  },
  {
    "text": "at the closely related concept of calling",
    "start": "939199",
    "end": "944560"
  },
  {
    "text": "functions now that we understand how to define them and I think we've covered everything about how to define them and their parameters um we're going to talk",
    "start": "945040",
    "end": "951800"
  },
  {
    "text": "a bit today about functions as first class objects in Python um which they are so in lots of languages functions",
    "start": "951800",
    "end": "958000"
  },
  {
    "text": "are kind of um they're a little weird compared to other things for instance um",
    "start": "958000",
    "end": "963880"
  },
  {
    "text": "PHP back there PHP lets you refer to functions by name as",
    "start": "963880",
    "end": "969000"
  },
  {
    "text": "strings at least it used to but there was no way to actually say this variable is a function it did a lookup um on a",
    "start": "969000",
    "end": "975440"
  },
  {
    "text": "name based in your namespace table yes totally as as long as what",
    "start": "975440",
    "end": "982000"
  },
  {
    "text": "you're initializing them to is immutable then you're fine if what you're initializing them to is a mutable",
    "start": "982000",
    "end": "987720"
  },
  {
    "text": "variable then you need to the pattern we just specified there on line 28 where you use uh immutable value as some sort",
    "start": "987720",
    "end": "993959"
  },
  {
    "text": "of flag and you could say and you could use something else you say b equals negative 1 and then if B equals negative",
    "start": "993959",
    "end": "1000319"
  },
  {
    "text": "1 inside the function go ahead and initialize it to the mutable thing that you wanted yeah I want to",
    "start": "1000319",
    "end": "1007160"
  },
  {
    "text": "passam so you still could pass like with F that we have there I still could",
    "start": "1007160",
    "end": "1015199"
  },
  {
    "text": "pass presumably what you want to do is pass it a a",
    "start": "1015199",
    "end": "1021040"
  },
  {
    "text": "um a list and it works like we would expect",
    "start": "1021800",
    "end": "1027038"
  },
  {
    "text": "that list went to say again you this",
    "start": "1027039",
    "end": "1035079"
  },
  {
    "text": "function no because what we did is we said the default value is none and if the default value is none",
    "start": "1035760",
    "end": "1042760"
  },
  {
    "text": "make it an empty list well in this case the default value would not be none because it's getting the value I past",
    "start": "1042760",
    "end": "1049200"
  },
  {
    "text": "which is a list 1 two 3 and in case in that case it doesn't run this code it just appends a to B and prints A and B",
    "start": "1049200",
    "end": "1056120"
  },
  {
    "text": "so it's a little guard to check your calling condition and you have to basically you have to use immutable",
    "start": "1056120",
    "end": "1061760"
  },
  {
    "text": "values for your default parameters unless you know what you're doing and actually want to have essentially a",
    "start": "1061760",
    "end": "1067559"
  },
  {
    "text": "function",
    "start": "1067559",
    "end": "1070200"
  },
  {
    "text": "counter okay so the related uh concept of calling functions um functions are",
    "start": "1073480",
    "end": "1080080"
  },
  {
    "text": "first class objects uh other languages like C lets you have function pointers but there's some special syntax around",
    "start": "1080080",
    "end": "1086600"
  },
  {
    "text": "that that I distinctly recall screwing up a few times in Python a function is",
    "start": "1086600",
    "end": "1091720"
  },
  {
    "text": "just a variable like anything else if I type Fu I see the value of my function it is",
    "start": "1091720",
    "end": "1099400"
  },
  {
    "text": "a object of type function and it runs ID on it just like if I",
    "start": "1099400",
    "end": "1105600"
  },
  {
    "text": "type X as a string and and evaluate X I see the value of my variable a string um",
    "start": "1105600",
    "end": "1113799"
  },
  {
    "text": "value obviously has a nicer representation than a function value and python does not by default show you the",
    "start": "1113799",
    "end": "1119159"
  },
  {
    "text": "source code for your function there are ways of getting at it um but it is actually sort of a semi- compiled",
    "start": "1119159",
    "end": "1125320"
  },
  {
    "text": "language so your Source isn't readily available for inspection um but you can see that it's just a regular function and we've",
    "start": "1125320",
    "end": "1130799"
  },
  {
    "text": "been calling functions by pinning parenthesis and in this context parentheses are the operator to call",
    "start": "1130799",
    "end": "1138360"
  },
  {
    "text": "call a function to call any callable which we'll talk about some more",
    "start": "1138360",
    "end": "1143520"
  },
  {
    "text": "later and what that means is I could",
    "start": "1143520",
    "end": "1147799"
  },
  {
    "text": "say now what's",
    "start": "1150159",
    "end": "1153640"
  },
  {
    "text": "X yes it will and functions are immutable data types so you can see that the IDE is the same they're pointing at",
    "start": "1160240",
    "end": "1167159"
  },
  {
    "text": "the same function and yes if I append the callable um operator to the end of my variable it",
    "start": "1167159",
    "end": "1174000"
  },
  {
    "text": "calls the same function so functions could be passed to other functions functions can be assigned to variables",
    "start": "1174000",
    "end": "1179840"
  },
  {
    "text": "functions could be stored in data types like lists and dicks if you want to have a list of functions to apply there isn't",
    "start": "1179840",
    "end": "1185480"
  },
  {
    "text": "any special Syntax for that just list your functions in a regular list um",
    "start": "1185480",
    "end": "1192000"
  },
  {
    "text": "there is some special syntax for calling functions and it is what you would expect we've seen two cases so far",
    "start": "1192000",
    "end": "1200240"
  },
  {
    "text": "so how did I call what did I do with my parameters what's the first parameter one",
    "start": "1205000",
    "end": "1210919"
  },
  {
    "text": "here it's a positional parameter it's just a value there's no name associated with it and it's going to go into whatever parameter was first in my",
    "start": "1210919",
    "end": "1218720"
  },
  {
    "text": "function and this is It's a named parameter I could have",
    "start": "1218720",
    "end": "1224720"
  },
  {
    "text": "left it off if I wanted to I'm specifying a value and that's abolutely um it's related to how the function is",
    "start": "1224720",
    "end": "1231679"
  },
  {
    "text": "defined but remember that it's not linked because I could name both of",
    "start": "1231679",
    "end": "1240720"
  },
  {
    "text": "them and I could pass both of them positionally so it's the same Syntax for",
    "start": "1242320",
    "end": "1248720"
  },
  {
    "text": "passing name parameters and positional parameters as it is for defining them but the one thing does not depend on the",
    "start": "1248720",
    "end": "1253919"
  },
  {
    "text": "other right you can have a function that has all positional arguments and you could name all the arguments when you called it if you wanted",
    "start": "1253919",
    "end": "1261039"
  },
  {
    "text": "to make sense so the last trick is the",
    "start": "1261039",
    "end": "1266520"
  },
  {
    "text": "star args and star star keyword args works when calling as well as when",
    "start": "1266520",
    "end": "1271960"
  },
  {
    "text": "defining functions so how about this and again the name is totally",
    "start": "1271960",
    "end": "1278799"
  },
  {
    "text": "insignificant just convention is to use",
    "start": "1278799",
    "end": "1282919"
  },
  {
    "text": "args so args is a",
    "start": "1287039",
    "end": "1293640"
  },
  {
    "text": "list the first position is the number one the second position is an empty list",
    "start": "1293640",
    "end": "1298679"
  },
  {
    "text": "and I could say F star args what is the implications",
    "start": "1298679",
    "end": "1306360"
  },
  {
    "text": "of star args what is my how is my parameter handling",
    "start": "1306360",
    "end": "1314200"
  },
  {
    "text": "working what is python doing",
    "start": "1314200",
    "end": "1320039"
  },
  {
    "text": "what kind of parameters totally so I have a list a",
    "start": "1325279",
    "end": "1332200"
  },
  {
    "text": "list is a positionally based container and python unpacks my list and uses each",
    "start": "1332200",
    "end": "1338799"
  },
  {
    "text": "item in my list as a positional parameter so the first item on my list is the first positional parameter to the function the second item is the question",
    "start": "1338799",
    "end": "1346960"
  },
  {
    "text": "Trenton I am not defining the function I am calling the function and star args works",
    "start": "1346960",
    "end": "1354400"
  },
  {
    "text": "when calling as well as when defining and again it's independent of how the",
    "start": "1354400",
    "end": "1359720"
  },
  {
    "text": "function was defined I did not Define my function with star args my function does not accept an arbitrary list of",
    "start": "1359720",
    "end": "1365440"
  },
  {
    "text": "positional arguments it accepts one positional argument and one optional keyword argument but I just called it",
    "start": "1365440",
    "end": "1372360"
  },
  {
    "text": "with two positional arguments and the same rules",
    "start": "1372360",
    "end": "1379960"
  },
  {
    "text": "apply you can't do that my function takes two arguments not",
    "start": "1384440",
    "end": "1390480"
  },
  {
    "text": "an arbitrary list of arguments and when I called it with star args in a list that had three items it says I'm sorry",
    "start": "1390480",
    "end": "1396919"
  },
  {
    "text": "you gave us three arguments and we only take two arguments it is unpacking the values for me and calling the function",
    "start": "1396919",
    "end": "1402039"
  },
  {
    "text": "as though I had explicitly called it with three arguments make sense to everybody",
    "start": "1402039",
    "end": "1409879"
  },
  {
    "text": "and of",
    "start": "1416640",
    "end": "1419000"
  },
  {
    "text": "course we can do this",
    "start": "1423240",
    "end": "1426840"
  },
  {
    "text": "too so what's going on what does calling Fu star star",
    "start": "1428720",
    "end": "1434559"
  },
  {
    "text": "keyword args make python do",
    "start": "1434559",
    "end": "1439880"
  },
  {
    "text": "so it's using the labels in the dict as the names of the function of the",
    "start": "1443720",
    "end": "1450039"
  },
  {
    "text": "functions parameters and the values as the corresponding value and that F star star keyword args",
    "start": "1450039",
    "end": "1456840"
  },
  {
    "text": "is totally the same thing",
    "start": "1456840",
    "end": "1461320"
  },
  {
    "text": "as that's literally what it translated out to python unpacked dictionary use",
    "start": "1462120",
    "end": "1469600"
  },
  {
    "text": "the name and value pairs to call my function with named",
    "start": "1469600",
    "end": "1475559"
  },
  {
    "text": "arguments and",
    "start": "1475559",
    "end": "1478840"
  },
  {
    "text": "again my function does not accept any arbitrary dict of keyword arguments it",
    "start": "1485679",
    "end": "1491760"
  },
  {
    "text": "accepts two arguments one is a positional argument named a the second one is a positional",
    "start": "1491760",
    "end": "1497480"
  },
  {
    "text": "is a optional labeled argument name B and if I pass it a dict that has a label C it",
    "start": "1497480",
    "end": "1503960"
  },
  {
    "text": "says I don't know what this argument C is so if I say FU keyword",
    "start": "1503960",
    "end": "1510880"
  },
  {
    "text": "args I called the function with one thing which is a dictionary which it",
    "start": "1510880",
    "end": "1518039"
  },
  {
    "text": "printed and then appended to the second argument which is the default value",
    "start": "1518039",
    "end": "1523240"
  },
  {
    "text": "B it can't tell that I want to unpack the dictionary if it unpacked every",
    "start": "1523240",
    "end": "1528559"
  },
  {
    "text": "dictionary it got or it unpacked every list that it got you could never call a function and pass it a list so star and",
    "start": "1528559",
    "end": "1535720"
  },
  {
    "text": "star star is special syntax to indicate unpacking of the arguments contained in this complex",
    "start": "1535720",
    "end": "1543158"
  },
  {
    "text": "type or acceptance of arguments in a complex type and again it's related the",
    "start": "1543520",
    "end": "1550120"
  },
  {
    "text": "syntax is the same you're doing the same sorts of things but you can call a function with star args or star star",
    "start": "1550120",
    "end": "1555320"
  },
  {
    "text": "keyword args regardless of whether the function itself was defined with star ARS or star star keyword args they do",
    "start": "1555320",
    "end": "1561399"
  },
  {
    "text": "different things in the calling context versus the defining context two stars unpacks a dictionary",
    "start": "1561399",
    "end": "1568840"
  },
  {
    "text": "into keyword arguments one star unpacks a list into positional arguments and when you define",
    "start": "1568840",
    "end": "1574679"
  },
  {
    "text": "a function one star says I accept an arbitrary number of positional arguments and two stars I accept an arbitrary",
    "start": "1574679",
    "end": "1580440"
  },
  {
    "text": "number of named arguments and yesterday we were using um",
    "start": "1580440",
    "end": "1587760"
  },
  {
    "text": "some of you at least were tackling the unique roles in your classmates and I was suggesting that we",
    "start": "1587760",
    "end": "1594799"
  },
  {
    "text": "use zip to do it and then when you start coding it you see that you have to pass",
    "start": "1594799",
    "end": "1599960"
  },
  {
    "text": "to zip and I'll cheat here and just make",
    "start": "1599960",
    "end": "1607080"
  },
  {
    "text": "myself a list of",
    "start": "1607080",
    "end": "1610039"
  },
  {
    "text": "tupes",
    "start": "1616600",
    "end": "1619600"
  },
  {
    "text": "we wanted the unique list of instructors and I was saying you could use the list",
    "start": "1641840",
    "end": "1648600"
  },
  {
    "text": "and zip and sets to extract that but",
    "start": "1648600",
    "end": "1654799"
  },
  {
    "text": "zip I should do it non-ip pythonic zip takes multiple arguments where each",
    "start": "1655000",
    "end": "1660679"
  },
  {
    "text": "argument is a row so I could get what I wanted but I had to",
    "start": "1660679",
    "end": "1666120"
  },
  {
    "text": "hardcode each of those",
    "start": "1666120",
    "end": "1669640"
  },
  {
    "text": "arguments and that returns me the two columns first names and",
    "start": "1675200",
    "end": "1680960"
  },
  {
    "text": "instructors and I could refer to the instructors list and I have all the roles and then I could convert it to a",
    "start": "1680960",
    "end": "1687559"
  },
  {
    "text": "set and I have just the unique roles but I had to hardcode because I'm",
    "start": "1687559",
    "end": "1693519"
  },
  {
    "text": "calling a function and passing it parameters zip will take an arbitrary number of parameters and I might not",
    "start": "1693519",
    "end": "1699640"
  },
  {
    "text": "know how many parameters how many rows are in my list so how can I call zip",
    "start": "1699640",
    "end": "1705159"
  },
  {
    "text": "passing it all the rows in my list without hardcoding",
    "start": "1705159",
    "end": "1710679"
  },
  {
    "text": "them everybody see why that works classmates is a list each item in it is",
    "start": "1718640",
    "end": "1725760"
  },
  {
    "text": "a row when I say star classmates it unpacks each item in the list and treats",
    "start": "1725760",
    "end": "1732120"
  },
  {
    "text": "it as a positional parameter to zip so this zip star classmates is exactly the",
    "start": "1732120",
    "end": "1740519"
  },
  {
    "text": "same thing as this ZIP classmates row Zer classmates",
    "start": "1740519",
    "end": "1746120"
  },
  {
    "text": "Row one classmates row two but it'll handle however many rows I",
    "start": "1746120",
    "end": "1752360"
  },
  {
    "text": "have which is kind of typical when we're programming we don't know in advance how large our data set is going to be and so",
    "start": "1752360",
    "end": "1758640"
  },
  {
    "text": "it's nice to be able to call functions and pass them an arbitrary number of",
    "start": "1758640",
    "end": "1764640"
  },
  {
    "text": "parameters so our um question from yesterday about unique roles could break",
    "start": "1764640",
    "end": "1770120"
  },
  {
    "text": "down",
    "start": "1770120",
    "end": "1772360"
  },
  {
    "text": "to that zip all my classmate rows give me",
    "start": "1776919",
    "end": "1783679"
  },
  {
    "text": "the POS the index into the columns that corresponds to instructor you had three tupal most of you so that would be two",
    "start": "1783679",
    "end": "1791000"
  },
  {
    "text": "instead of one make it a set which throws away the duplicates and convert it back to a list and yes you're right",
    "start": "1791000",
    "end": "1798279"
  },
  {
    "text": "and perceptive that looks a lot like lisp code especially all the catch-up parentheses at the",
    "start": "1798279",
    "end": "1805120"
  },
  {
    "text": "end anybody unclear on that thinking about that okay in that case let's talk",
    "start": "1809399",
    "end": "1816279"
  },
  {
    "text": "a little bit about scope and name spaces and once we've covered this which should take us",
    "start": "1816279",
    "end": "1822840"
  },
  {
    "text": "about 10 minutes um I'm going to go ahead and turn you loose on uh the lab I",
    "start": "1822840",
    "end": "1827919"
  },
  {
    "text": "was putting up yesterday and I'll go and put up the instructions again um and after the break we're going to talk a little bit about higher order functions",
    "start": "1827919",
    "end": "1834760"
  },
  {
    "text": "or functions as first class citizens to start out with and have you redo um",
    "start": "1834760",
    "end": "1839840"
  },
  {
    "text": "hopefully what you can Implement before the break so scope scope is really important um to",
    "start": "1839840",
    "end": "1847399"
  },
  {
    "text": "keep in mind it's basically a question of what variables can I see at any time we already have some tools to",
    "start": "1847399",
    "end": "1853840"
  },
  {
    "text": "investigate and manage our scope what tools do we have so far how can I figure out what variables I",
    "start": "1853840",
    "end": "1860039"
  },
  {
    "text": "can see yeah so locals is a built-in",
    "start": "1860039",
    "end": "1866840"
  },
  {
    "text": "function and it shows all the variables that I've defined down there at the bottom plus there's some more that I",
    "start": "1866840",
    "end": "1872519"
  },
  {
    "text": "python supplies how about",
    "start": "1872519",
    "end": "1879000"
  },
  {
    "text": "globals there's even more so there's two name spaces available to us at any one",
    "start": "1880720",
    "end": "1886679"
  },
  {
    "text": "time local namespace and our Global namespace right now I'm not inside of a",
    "start": "1886679",
    "end": "1893200"
  },
  {
    "text": "function so my Global namespace and my local namespace are the",
    "start": "1893200",
    "end": "1898519"
  },
  {
    "text": "same but we create new local namespaces um by doing lots of different things in",
    "start": "1898519",
    "end": "1904120"
  },
  {
    "text": "Python a few less things than some other languages uh there's an example 7.6 in",
    "start": "1904120",
    "end": "1911240"
  },
  {
    "text": "your book that notes some languages have block scope so",
    "start": "1911240",
    "end": "1917840"
  },
  {
    "text": "in C for instance if you make a for Loop and you have brackets and you define a",
    "start": "1917840",
    "end": "1923240"
  },
  {
    "text": "counter variable that counter variable is only in scope for the enclosing",
    "start": "1923240",
    "end": "1928639"
  },
  {
    "text": "brackets of the for Loop if you tried referring to it after the body of the loop there would be no such variable C",
    "start": "1928639",
    "end": "1934960"
  },
  {
    "text": "has a new name space for that multi-line statement python does",
    "start": "1934960",
    "end": "1940440"
  },
  {
    "text": "not python creates new local name spaces only on",
    "start": "1940440",
    "end": "1945480"
  },
  {
    "text": "functions modules and class um not quite true but a lie again for",
    "start": "1945480",
    "end": "1952639"
  },
  {
    "text": "simplification purposes so our functions if I Define a",
    "start": "1952639",
    "end": "1958639"
  },
  {
    "text": "function good old fu is getting a workout",
    "start": "1958639",
    "end": "1963480"
  },
  {
    "text": "here and it prints locals versus looking at locals outside",
    "start": "1968840",
    "end": "1975360"
  },
  {
    "text": "the function they're dramatically different things right yeah so how about",
    "start": "1975360",
    "end": "1983278"
  },
  {
    "text": "this what's gonna happen when I call",
    "start": "1992360",
    "end": "1996278"
  },
  {
    "text": "Fu it does oh X is not in the local namespace of the function so how does",
    "start": "2002840",
    "end": "2010559"
  },
  {
    "text": "the function see X python follows look up rules when it",
    "start": "2010559",
    "end": "2016080"
  },
  {
    "text": "encounters a variable it looks first in the local namespace there's some other rules if",
    "start": "2016080",
    "end": "2022120"
  },
  {
    "text": "you're inside classes and objects if you're inside a function it looks first in the local namespace and then the global namespace and then it gives",
    "start": "2022120",
    "end": "2028799"
  },
  {
    "text": "up well built-ins are sort of a special",
    "start": "2028799",
    "end": "2033398"
  },
  {
    "text": "case how about this",
    "start": "2034639",
    "end": "2038960"
  },
  {
    "text": "what will I",
    "start": "2049399",
    "end": "2051960"
  },
  {
    "text": "get don't those two examples seem like they're contradicting each other in the first one we printed a variable that was",
    "start": "2059720",
    "end": "2065440"
  },
  {
    "text": "in the global name space we could see it just fine in the second one we assigned four to that variable in the global name space",
    "start": "2065440",
    "end": "2072320"
  },
  {
    "text": "and then we print it after the function is run and it's unchanged so python",
    "start": "2072320",
    "end": "2078118"
  },
  {
    "text": "handles one case differently and the reason is because it's a dynamic language there is no variable",
    "start": "2078119",
    "end": "2083280"
  },
  {
    "text": "declaration in Python in general so variable declaration happens on",
    "start": "2083280",
    "end": "2088720"
  },
  {
    "text": "assignment so line 76 when I say xals",
    "start": "2088720",
    "end": "2094240"
  },
  {
    "text": "4 python looks in the local namespace for a variable named X if there isn't",
    "start": "2094240",
    "end": "2100040"
  },
  {
    "text": "one it creates a new variable and assigns it the value of",
    "start": "2100040",
    "end": "2105240"
  },
  {
    "text": "four it does not proceed out to the global namespace to do a lookup when it",
    "start": "2105240",
    "end": "2110599"
  },
  {
    "text": "does assignment because it assumes you're doing the common case which is creating a local variable in your",
    "start": "2110599",
    "end": "2116119"
  },
  {
    "text": "function Do's a local namespace for modules a local namespace for functions and then when we get the classes there's",
    "start": "2116119",
    "end": "2122160"
  },
  {
    "text": "also a name space associated with classes yes so you pass in",
    "start": "2122160",
    "end": "2127320"
  },
  {
    "text": "variables that would be in the local namespace with parameters if I pass parameters to this function this function accepted parameters they'd be",
    "start": "2127320",
    "end": "2132760"
  },
  {
    "text": "in the local namespace any other variables in local namespace are created by assignment because that's how we",
    "start": "2132760",
    "end": "2138240"
  },
  {
    "text": "declare a variable in Python we just put a value put a label on a value go top and at the top level is the same thing",
    "start": "2138240",
    "end": "2145119"
  },
  {
    "text": "same so at the top level when we do variable assignment it creates a new variable in our local namespace which is",
    "start": "2145119",
    "end": "2151200"
  },
  {
    "text": "also the global namespace there isn't if you're not if you're in the top namespace if you're",
    "start": "2151200",
    "end": "2157119"
  },
  {
    "text": "not inside of a function if you're not inside of something that's created a new local namespace local and Global are the same",
    "start": "2157119",
    "end": "2163000"
  },
  {
    "text": "namespace okay there's no new namespace created",
    "start": "2163000",
    "end": "2169680"
  },
  {
    "text": "and technically when I'm running inside of a fun when I'm running inside of a script like this the global namespace is",
    "start": "2169680",
    "end": "2175359"
  },
  {
    "text": "actually the module namespace and each separate module has its own namespace but we'll see how that",
    "start": "2175359",
    "end": "2181440"
  },
  {
    "text": "works when we get to modules and packages so from from the programmer persp I don't have to worry about Global",
    "start": "2181440",
    "end": "2187000"
  },
  {
    "text": "variables all the way Global local need to look at the local variables or just",
    "start": "2187000",
    "end": "2192880"
  },
  {
    "text": "be good yes it's sort of a special case when you think about global variables so inside of a function if you reference a",
    "start": "2192880",
    "end": "2198560"
  },
  {
    "text": "variable that you have not yet created it will go back and check and see if there is such a variable in the global",
    "start": "2198560",
    "end": "2204800"
  },
  {
    "text": "namespace and only if there isn't will you then get an error that hey this variable doesn't exist and that can",
    "start": "2204800",
    "end": "2210720"
  },
  {
    "text": "sometimes lead to obscure bugs all bugs depending upon Global globals are are",
    "start": "2210720",
    "end": "2219838"
  },
  {
    "text": "obscure mod to excellent question and when you",
    "start": "2224520",
    "end": "2231599"
  },
  {
    "text": "import a module you don't import its namespace you create one new variable",
    "start": "2231599",
    "end": "2237480"
  },
  {
    "text": "that points to that module and and keep hold that question because I'll be right back to",
    "start": "2237480",
    "end": "2243839"
  },
  {
    "text": "that",
    "start": "2245599",
    "end": "2248599"
  },
  {
    "text": "no nope hold hold that question I'll be right back to that okay so I have a function Fu if my input parameter is",
    "start": "2258640",
    "end": "2265000"
  },
  {
    "text": "equal to letter A then it assigns X is one and prints one and that works if it's something",
    "start": "2265000",
    "end": "2273400"
  },
  {
    "text": "else I get an error my input parameter was not a and",
    "start": "2273400",
    "end": "2279119"
  },
  {
    "text": "therefore X was never created and it's not a scoping issue it's an issue of code execution",
    "start": "2279119",
    "end": "2285440"
  },
  {
    "text": "path the xals 1 statement never executed so there is no local variable named X",
    "start": "2285440",
    "end": "2291560"
  },
  {
    "text": "but if I had done this",
    "start": "2291560",
    "end": "2296720"
  },
  {
    "text": "beforehand and actually I take it back it's a little bit smarter than that I just noticed the error",
    "start": "2297839",
    "end": "2304160"
  },
  {
    "text": "message by the rules that I've described X should work it should print",
    "start": "2305520",
    "end": "2311079"
  },
  {
    "text": "the global variable because it does a look up in the local namespace python checks for you and it's basically for",
    "start": "2311079",
    "end": "2316520"
  },
  {
    "text": "your sanity it notices that there is a local variable X in this",
    "start": "2316520",
    "end": "2323520"
  },
  {
    "text": "function but that I'm printing it without it being assigned to and it doesn't even bother to go out to the",
    "start": "2323520",
    "end": "2329160"
  },
  {
    "text": "global namespace and it's kind of a good thing that it doesn't because the execution of this function then would be",
    "start": "2329160",
    "end": "2334319"
  },
  {
    "text": "dependent upon Global variables which is usually a Bad Thing unless you're explicitly looking for",
    "start": "2334319",
    "end": "2340960"
  },
  {
    "text": "that uh okay so your question and we're not quite to packages and modules we will be but it's a good question because",
    "start": "2342760",
    "end": "2349160"
  },
  {
    "text": "we're thinking about names spaces what happens when you import a module to your name space do you get all the globals of that",
    "start": "2349160",
    "end": "2357480"
  },
  {
    "text": "module in your and you don't it's really nice python is extremely hygienic by default when I say import datetime what",
    "start": "2357480",
    "end": "2366920"
  },
  {
    "text": "changes have occurred I have one new variable in my local namespace which because I'm at the top level is also my",
    "start": "2366920",
    "end": "2372480"
  },
  {
    "text": "Global namespace that one new variable is of type",
    "start": "2372480",
    "end": "2379160"
  },
  {
    "text": "module and that variable contains the module",
    "start": "2379160",
    "end": "2385839"
  },
  {
    "text": "namespace everything that's defined in that module is only accessible through the module there is a way to be",
    "start": "2385839",
    "end": "2392440"
  },
  {
    "text": "unhygenic we'll get to it but it's usually a bad idea",
    "start": "2392440",
    "end": "2398400"
  },
  {
    "text": "so yes um python slightly alleviates the dangers of global variables and that very frequently you're working with",
    "start": "2401000",
    "end": "2407319"
  },
  {
    "text": "modules and packages and at least your Global variables are only Global to your",
    "start": "2407319",
    "end": "2412760"
  },
  {
    "text": "own module they're not Global to the entire program scope and that's not true of all programming",
    "start": "2412760",
    "end": "2420319"
  },
  {
    "text": "languages okay so yeah let's let's answer that question what if I want to change a global varable inside my",
    "start": "2421400",
    "end": "2428359"
  },
  {
    "text": "function I can't right because when I say x is equal to 5 inside my function it makes a new local variable",
    "start": "2428359",
    "end": "2435440"
  },
  {
    "text": "instead",
    "start": "2455319",
    "end": "2458319"
  },
  {
    "text": "is that going to work what exactly is occurring on this",
    "start": "2460880",
    "end": "2467119"
  },
  {
    "text": "line am I initializing a variable is there assignment going",
    "start": "2467119",
    "end": "2473560"
  },
  {
    "text": "on nobody wants to Hazard a guess hey it's 50/50 um I'm not creating a new variable here I am referencing a",
    "start": "2474880",
    "end": "2482319"
  },
  {
    "text": "variable and making assignment to its member",
    "start": "2482319",
    "end": "2488240"
  },
  {
    "text": "since it's mutable I don't create a new local",
    "start": "2491000",
    "end": "2496480"
  },
  {
    "text": "variable X and in fact that's the wrong syntax if I tried to create a dictionary",
    "start": "2496480",
    "end": "2502640"
  },
  {
    "text": "that way that didn't exist I get an error I'm accessing not creating a",
    "start": "2502640",
    "end": "2509079"
  },
  {
    "text": "variable and that's legal this variable happens to be a mutable one so I can change its",
    "start": "2509079",
    "end": "2515240"
  },
  {
    "text": "contents but I'm not putting a new name a new tag on anything so if you want to",
    "start": "2515240",
    "end": "2522079"
  },
  {
    "text": "change something in the global scope one way to do it is access a global mutable variable and change its",
    "start": "2522079",
    "end": "2530560"
  },
  {
    "text": "contents yes I could do assignment positionally or appin something to it there's one other",
    "start": "2530599",
    "end": "2537560"
  },
  {
    "text": "rule that's sort of a shortcut for this and I think",
    "start": "2537560",
    "end": "2543359"
  },
  {
    "text": "it's uh",
    "start": "2543359",
    "end": "2548160"
  },
  {
    "text": "it's the global statement and Global indicates to",
    "start": "2561000",
    "end": "2566920"
  },
  {
    "text": "python to reach out into the global namespace upon",
    "start": "2567280",
    "end": "2572119"
  },
  {
    "text": "assignment so if you don't want to be creating a",
    "start": "2575160",
    "end": "2580240"
  },
  {
    "text": "local variable that Shadows the global namespace you have to explicitly say my function is going to reach out into the",
    "start": "2580240",
    "end": "2586160"
  },
  {
    "text": "global namespace and change it your function has side effects we don't like side effects in general in general we",
    "start": "2586160",
    "end": "2591800"
  },
  {
    "text": "don't want to use the global declaration but it's possible okay let's go ahead and tackle",
    "start": "2591800",
    "end": "2598160"
  },
  {
    "text": "a little bit of a lab and I've got a couple new python idioms to show you this is kind of what I put up on the",
    "start": "2598160",
    "end": "2604000"
  },
  {
    "text": "screen yesterday in case anybody was bored as of four o'clock and was",
    "start": "2604000",
    "end": "2610079"
  },
  {
    "text": "ready to do something different so the last thing um that we",
    "start": "2610079",
    "end": "2615599"
  },
  {
    "text": "had done successfully and hopefully everybody's got to this point if you haven't I'm going to circulate around um we talked about zip and getting the",
    "start": "2615599",
    "end": "2621760"
  },
  {
    "text": "unique rooll of um or the unique list of roles it's not necessarily necessary",
    "start": "2621760",
    "end": "2627440"
  },
  {
    "text": "that you complete that um and we're going to throw that little piece of work away it was mostly to set you up to see the beauty of star args argument passing",
    "start": "2627440",
    "end": "2634960"
  },
  {
    "text": "um and their usefulness uh but you should have a classmates dpy that defines a function print record and",
    "start": "2634960",
    "end": "2641119"
  },
  {
    "text": "defines a function get record and you're able to solicit input and add it to your dict um output check and see if the",
    "start": "2641119",
    "end": "2648680"
  },
  {
    "text": "user's input uh was a valid first name and starting from that position we're going to modify how our program works",
    "start": "2648680",
    "end": "2656920"
  },
  {
    "text": "and we're going to do a couple different things uh one is a really common python idiom that you should use in all your",
    "start": "2656920",
    "end": "2662200"
  },
  {
    "text": "scripts from now on and here's how it",
    "start": "2662200",
    "end": "2668720"
  },
  {
    "text": "works python defines a bunch of global variables for us",
    "start": "2673720",
    "end": "2679000"
  },
  {
    "text": "automatically and the special ones start with",
    "start": "2682079",
    "end": "2687240"
  },
  {
    "text": "underscores wrong one here um we'll get to special methods",
    "start": "2694440",
    "end": "2700599"
  },
  {
    "text": "that start with two underscores but there's a bunch of special variables that start with two underscores in general the presence of two underscores",
    "start": "2700599",
    "end": "2705720"
  },
  {
    "text": "indicates some kind of provided or special function or data",
    "start": "2705720",
    "end": "2711359"
  },
  {
    "text": "type um this is name underscore underscore name underscore underscore",
    "start": "2711359",
    "end": "2717599"
  },
  {
    "text": "and you'll hear it referred to as a dundore variable or a underscore method it's ugly to type and look at um and in",
    "start": "2717599",
    "end": "2726680"
  },
  {
    "text": "general it's to sensitize us that we're doing something slightly unusual python automatically sets the underscore name",
    "start": "2726680",
    "end": "2733400"
  },
  {
    "text": "variable with the context of the currently running program",
    "start": "2733400",
    "end": "2740000"
  },
  {
    "text": "so let's see how that works a little",
    "start": "2740000",
    "end": "2744040"
  },
  {
    "text": "bit I have a script and all my script is going to do is print",
    "start": "2747760",
    "end": "2754880"
  },
  {
    "text": "name",
    "start": "2754880",
    "end": "2757880"
  },
  {
    "text": "okay it printed name name is equal to main I'm going to enter the python command line I can",
    "start": "2772760",
    "end": "2779400"
  },
  {
    "text": "import my script by specifying its name I do not",
    "start": "2779400",
    "end": "2786280"
  },
  {
    "text": "specify thep extension and it's part of why it's important that you name your Python scripts ending",
    "start": "2786280",
    "end": "2792440"
  },
  {
    "text": "inp this gives me a variable scripting but that output line",
    "start": "2792440",
    "end": "2800440"
  },
  {
    "text": "there is the result of my script running it's printing the name variable and now",
    "start": "2800440",
    "end": "2805760"
  },
  {
    "text": "it says scripting before it said main the context in which my script is",
    "start": "2805760",
    "end": "2812760"
  },
  {
    "text": "running in this case is as a module and and it's given the module name to the name variable the context in which my",
    "start": "2812760",
    "end": "2820160"
  },
  {
    "text": "script is running now is not as a module it's being run as",
    "start": "2820160",
    "end": "2825800"
  },
  {
    "text": "a top level program and it's given the special indicator main so an extremely common convention",
    "start": "2825800",
    "end": "2832079"
  },
  {
    "text": "in Python Programming",
    "start": "2832079",
    "end": "2835880"
  },
  {
    "text": "is checking for that special identifier",
    "start": "2840200",
    "end": "2847720"
  },
  {
    "text": "and if and only if it is main running the body of your program and what that",
    "start": "2854359",
    "end": "2859880"
  },
  {
    "text": "means is we've been writing scripts so far where the body of our program is in the global namespace and it's just a series of statements that executes and",
    "start": "2859880",
    "end": "2866280"
  },
  {
    "text": "if you import them they",
    "start": "2866280",
    "end": "2870440"
  },
  {
    "text": "run but now when I import my script nothing happens",
    "start": "2872359",
    "end": "2877680"
  },
  {
    "text": "which is probably what I want when I import and if I want something to happen",
    "start": "2877680",
    "end": "2883319"
  },
  {
    "text": "I can specify it when I run my script directly with the python",
    "start": "2883319",
    "end": "2890359"
  },
  {
    "text": "command it does automatically run so it is sensitive to the context it's being",
    "start": "2891480",
    "end": "2897119"
  },
  {
    "text": "used in is it being imported as a library in which case it probably better not do a bunch of stuff automatically or",
    "start": "2897119",
    "end": "2902400"
  },
  {
    "text": "is it being run directly from the command line in which case it probably had better run",
    "start": "2902400",
    "end": "2907640"
  },
  {
    "text": "um and there's a bunch of other flags that we can do we can do things like if you're running this from the command",
    "start": "2907800",
    "end": "2913760"
  },
  {
    "text": "line run all the tests for my library and otherwise do nothing but this is the most uh common",
    "start": "2913760",
    "end": "2921240"
  },
  {
    "text": "convention corre underscore name specifies the running context of the program and if it's being used as a",
    "start": "2924319",
    "end": "2930000"
  },
  {
    "text": "module it'll contain the module name yep would I run as a top level",
    "start": "2930000",
    "end": "2935960"
  },
  {
    "text": "program or am I being imported by other python code so it'll be the module name if it's",
    "start": "2935960",
    "end": "2943359"
  },
  {
    "text": "imported and it'll be main if it's being run directly and in our case all we care about is am I being run directly or not",
    "start": "2943359",
    "end": "2950880"
  },
  {
    "text": "and I'd like all your scripts in the future to use this convention and as we'll see this lets us do a few other",
    "start": "2950880",
    "end": "2956920"
  },
  {
    "text": "nice and Nifty Things right so this gives us control over that all of our code is happening within a",
    "start": "2956920",
    "end": "2963160"
  },
  {
    "text": "function the input point to our code is happen within a function instead of being top level statements and we're",
    "start": "2963160",
    "end": "2968319"
  },
  {
    "text": "only calling that function which I'm calling main but I could have called whatever the name is uh again not",
    "start": "2968319",
    "end": "2974000"
  },
  {
    "text": "significant we're only calling that function if I'm being run as a top level program so I'm controlling the execution",
    "start": "2974000",
    "end": "2980760"
  },
  {
    "text": "of my program and saying if you run me directly let's run all my code if you import me let's let the Importer decide",
    "start": "2980760",
    "end": "2987400"
  },
  {
    "text": "what code to run and it does mean that we can write things that function as full-blown",
    "start": "2987400",
    "end": "2993400"
  },
  {
    "text": "scripts on their own but other scripts can import them and use things like their data structures or functions and",
    "start": "2993400",
    "end": "3000200"
  },
  {
    "text": "not get all the side effects of actually running the program and that print there is kind of",
    "start": "3000200",
    "end": "3007119"
  },
  {
    "text": "immaterial What's significant is this statement here this is a top level statement it's not inside of a",
    "start": "3007160",
    "end": "3014520"
  },
  {
    "text": "function and it's checking and seeing if my name is equal to main then call a function and else there is no else it",
    "start": "3014520",
    "end": "3021520"
  },
  {
    "text": "doesn't do anything so again if I'm running directly it",
    "start": "3021520",
    "end": "3027000"
  },
  {
    "text": "runs if I import",
    "start": "3027000",
    "end": "3030760"
  },
  {
    "text": "it nothing has happened I get to explicitly specify what I want to have happen and I",
    "start": "3032880",
    "end": "3039839"
  },
  {
    "text": "wouldn't have to call Main if I had data structures in there I could access them make",
    "start": "3039839",
    "end": "3046520"
  },
  {
    "text": "sense yes yes so we're actually going to get there",
    "start": "3046520",
    "end": "3052280"
  },
  {
    "text": "with our classmates file and add um argument parsing to to it today but yeah it is kind of common to say um I want to",
    "start": "3052280",
    "end": "3059280"
  },
  {
    "text": "have a command line interface to this library that I'm creating with these functions that do some things and I'll",
    "start": "3059280",
    "end": "3064559"
  },
  {
    "text": "handle a bunch of command line arguments if I run it that way and I also want to make it available to other programs to",
    "start": "3064559",
    "end": "3069839"
  },
  {
    "text": "use my functions without worrying about kind of the main program logic so yeah um and it's it's just a",
    "start": "3069839",
    "end": "3076599"
  },
  {
    "text": "good idea it means that you can import your code without side effects which is polite to other programmers which may be",
    "start": "3076599",
    "end": "3081760"
  },
  {
    "text": "yourself if your program um you know the first thing it does is is delete the temporary file it's going to fill up",
    "start": "3081760",
    "end": "3087680"
  },
  {
    "text": "when you import it from another program it may do some things that don't have any output that cause you trouble so",
    "start": "3087680",
    "end": "3095559"
  },
  {
    "text": "it's polite not to do anything whatsoever on import and if you want to run things as",
    "start": "3095559",
    "end": "3100760"
  },
  {
    "text": "a script then hide them behind that if name equals Main Check nobody should ever import your module and all of a",
    "start": "3100760",
    "end": "3106160"
  },
  {
    "text": "sudden say hey why is all this stuff happening I just you know I just wanted to look at the help on this function",
    "start": "3106160",
    "end": "3111920"
  },
  {
    "text": "that's all I wanted to do and all the stuff is happening yeah okay so we want to use this um if name equals Main and",
    "start": "3111920",
    "end": "3117960"
  },
  {
    "text": "I'm going to leave that piece of code up the other thing we want to",
    "start": "3117960",
    "end": "3123599"
  },
  {
    "text": "do yeah no that's it okay so our programs we have in their current state",
    "start": "3126160",
    "end": "3132240"
  },
  {
    "text": "we're going to change how they work go ahead and put your main program logic inside of a function you can name it",
    "start": "3132240",
    "end": "3138280"
  },
  {
    "text": "whatever but again main is kind of the convention and it's coming from C days if anybody ever wrote C programs you",
    "start": "3138280",
    "end": "3143880"
  },
  {
    "text": "have to have a main function it's the default uh execution start we're going to present a menu of",
    "start": "3143880",
    "end": "3152160"
  },
  {
    "text": "user choices instead of soliciting input right away so we need to handle the printing",
    "start": "3152160",
    "end": "3158200"
  },
  {
    "text": "out the menu and handling um the users's input for the menu and then each of the",
    "start": "3158200",
    "end": "3164359"
  },
  {
    "text": "things that the user chooses needs to work and we already have all those working except for number four filter by",
    "start": "3164359",
    "end": "3169520"
  },
  {
    "text": "roll and I'd like you to implement filtering by roll with a loop and an if statement so basically Loop through all",
    "start": "3169520",
    "end": "3176680"
  },
  {
    "text": "the rows of classmates that you have and any that have the right",
    "start": "3176680",
    "end": "3182200"
  },
  {
    "text": "role go ahead and keep and when you've got a new list of",
    "start": "3182200",
    "end": "3189359"
  },
  {
    "text": "students a new list of classmates that have the correct role you can pass them to your print rows function for",
    "start": "3189359",
    "end": "3199680"
  },
  {
    "text": "output so your list all function that prints all the records needs to be",
    "start": "3200839",
    "end": "3206720"
  },
  {
    "text": "reusable and then just for your own entertainment do the same thing that I was doing be sure to import your script",
    "start": "3206720",
    "end": "3212480"
  },
  {
    "text": "start python import and let's call this one classmat 7py and notice that nothing happens",
    "start": "3212480",
    "end": "3218200"
  },
  {
    "text": "which is what you want and I should have demonstrated that as",
    "start": "3218200",
    "end": "3223880"
  },
  {
    "text": "well I can do dur on scripting scripting is just a variable that contains a",
    "start": "3225240",
    "end": "3231640"
  },
  {
    "text": "module and it has built-ins for the built-in name",
    "start": "3231640",
    "end": "3237440"
  },
  {
    "text": "spacecore do anybody want to guess what that",
    "start": "3237440",
    "end": "3241960"
  },
  {
    "text": "is Doc string exactly I told you was programmatically",
    "start": "3243720",
    "end": "3248520"
  },
  {
    "text": "accessible there's the dock",
    "start": "3264079",
    "end": "3268000"
  },
  {
    "text": "string the file which is the file of the module probably the name which we've already seen package which we'll talk",
    "start": "3269440",
    "end": "3276400"
  },
  {
    "text": "about in a while and one local variable called main which is the function that we",
    "start": "3276400",
    "end": "3282480"
  },
  {
    "text": "defined so you can introspect your script as a module and",
    "start": "3282480",
    "end": "3289000"
  },
  {
    "text": "help nicely presents all that information the name is scripting where the file is any local",
    "start": "3289000",
    "end": "3295760"
  },
  {
    "text": "variables prints the doc string so that last step is kind of just",
    "start": "3295760",
    "end": "3301559"
  },
  {
    "text": "by way of exploration and most of the work is",
    "start": "3301559",
    "end": "3306680"
  },
  {
    "text": "going to be in a number two and three so let's go ahead and get there um we can take a",
    "start": "3306680",
    "end": "3312440"
  },
  {
    "text": "break um it's almost 10:15 so in three or four minutes we go ahead and take a break you can um stretch as you like but",
    "start": "3312440",
    "end": "3319319"
  },
  {
    "text": "go ahead and start working on this I'll kind of circulate and see where everybody is I like to make sure everybody can complete this um because",
    "start": "3319319",
    "end": "3325079"
  },
  {
    "text": "as usual we're doing it a little bit the hard way and then I'll show you some new tricks and we'll do it the easy [Music]",
    "start": "3325079",
    "end": "3338880"
  },
  {
    "text": "way",
    "start": "3338880",
    "end": "3341880"
  }
]