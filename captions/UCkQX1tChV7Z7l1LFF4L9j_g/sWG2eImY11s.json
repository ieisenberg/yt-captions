[
  {
    "text": "this deck is available for download both at Spieker deck and link tube on the coupon site no need to take copious",
    "start": "3900",
    "end": "10680"
  },
  {
    "text": "notes my twitter handle is also on this slide I'm going to pause now for 15 seconds so you will could all take",
    "start": "10680",
    "end": "16530"
  },
  {
    "text": "photos because this information is not on the other slides",
    "start": "16530",
    "end": "21230"
  },
  {
    "text": "all right 15 seconds is about right I count it to 15 and I see the phones are all down now a lot changed in Java 9 we",
    "start": "29000",
    "end": "37590"
  },
  {
    "text": "got jigsaw as a new feature and a number of other new features jigsaw was great",
    "start": "37590",
    "end": "42750"
  },
  {
    "text": "because it let us make jokes about jigsaw puzzles and there's no need to be puzzled about Java 9 before we go any",
    "start": "42750",
    "end": "49589"
  },
  {
    "text": "further we can do a little survey to see where the room is at right now in production I'm not gonna ask if anyone's",
    "start": "49589",
    "end": "55110"
  },
  {
    "text": "on Java 11 because it comes out in September if anyone's on production with Java love an early access edition I feel",
    "start": "55110",
    "end": "61350"
  },
  {
    "text": "sorry for you is anyone on Java 10 in production Hey 9 8 let's hands 7 6 oh",
    "start": "61350",
    "end": "74929"
  },
  {
    "text": "good no one's on 6 we're on Java 8 as well but that's the most common release that people are on",
    "start": "74929",
    "end": "82350"
  },
  {
    "text": "in production and there's a good reason for that job in 9 and 10 are not long-term support releases a lot of us",
    "start": "82350",
    "end": "89039"
  },
  {
    "text": "here in New York work in the financial sector we're being on a long-term support release is really really really",
    "start": "89039",
    "end": "94619"
  },
  {
    "text": "important job 11 is the next long-term support release while it comes out in September it's good start learning about",
    "start": "94619",
    "end": "101340"
  },
  {
    "text": "it now so that we can all be ready and take that back to our teams since a lot of us are on Java 8 we don't necessarily",
    "start": "101340",
    "end": "107790"
  },
  {
    "text": "know everything that's in Java mine this is not a job online presentation I have one slide on Java 9 it's a jigsaw puzzle",
    "start": "107790",
    "end": "114899"
  },
  {
    "text": "yay there's a number of cool features in Java 9 including the ability to say that",
    "start": "114899",
    "end": "121560"
  },
  {
    "text": "something has been deprecated since a certain version or more importantly to say that something is deprecated and",
    "start": "121560",
    "end": "127920"
  },
  {
    "text": "will be removed eventually unlike all the other stuff where it's deprecated and then it's with you forever",
    "start": "127920",
    "end": "133489"
  },
  {
    "text": "there's also you're able to search the Javadoc your there's some syntax sugar there's more stream API is there's a lot",
    "start": "133489",
    "end": "139890"
  },
  {
    "text": "of cool stuff and my presentation on what's new in Java 9 beyond jigsaw is",
    "start": "139890",
    "end": "144930"
  },
  {
    "text": "also available on speaker deck it's linked to from the purse presentation so you can read that later at your",
    "start": "144930",
    "end": "150120"
  },
  {
    "text": "convenience if you're looking to learn about Java 9 however today we're going to be talking about Java 10 and 11 the",
    "start": "150120",
    "end": "157019"
  },
  {
    "text": "first half of the presentation is about the ecosystem Changez naming dates everything that you",
    "start": "157019",
    "end": "162230"
  },
  {
    "text": "need to know for planning purposes the second half is about actual code what's in Java 1011 on how to use it a little",
    "start": "162230",
    "end": "170480"
  },
  {
    "text": "bit about me I've written three books about Java Java 8 but we will be updating it for Java 11 so no time like",
    "start": "170480",
    "end": "176510"
  },
  {
    "text": "the present to start becoming an expert on Java 11th and I've been a Java developer for the past 16 years meet",
    "start": "176510",
    "end": "183590"
  },
  {
    "text": "Duke Duke is the Java mascot we all familiar with Duke cute right",
    "start": "183590",
    "end": "188720"
  },
  {
    "text": "well Duke's been around for a while he's got a bunch of memories in particular he",
    "start": "188720",
    "end": "194750"
  },
  {
    "text": "remembers the old days of Sun wheat six versions of Java in ten years then",
    "start": "194750",
    "end": "199760"
  },
  {
    "text": "Oracle took over in 2010 hi Oracle and then we had a release shortly after that",
    "start": "199760",
    "end": "205400"
  },
  {
    "text": "we can probably give Sun some credit for that but in 2011 Java seven came out and",
    "start": "205400",
    "end": "210500"
  },
  {
    "text": "then we had releases every two years yep Oracle claims that's every two years",
    "start": "210500",
    "end": "216520"
  },
  {
    "text": "according to me it's every three years but job and nine did come out in 2017 it",
    "start": "216520",
    "end": "224300"
  },
  {
    "text": "had a little bit of a history remember that jigsaw puzzle feature we were talking about it has been in the works",
    "start": "224300",
    "end": "230300"
  },
  {
    "text": "believe in Herat since 2011 in 2011 Oracle was thinking about whether jigsaw should be included in Java 7 or not the",
    "start": "230300",
    "end": "237890"
  },
  {
    "text": "answer was not even by a longshot no design no desire to try all right no problem it'll be in Java 8 in 2014 they",
    "start": "237890",
    "end": "248480"
  },
  {
    "text": "committed to jigsaw was going to be a part of Java 9 no matter what and we all know how that turned out",
    "start": "248480",
    "end": "254000"
  },
  {
    "text": "job and 9 was released in September 2016",
    "start": "254000",
    "end": "259269"
  },
  {
    "text": "and I can Java 9 actually at 4 release dates all four of which Oracle committed to that was going to be the day at the",
    "start": "260739",
    "end": "266810"
  },
  {
    "text": "Java was released this is a problem as developers we need to know when software is going to be released and not make",
    "start": "266810",
    "end": "273169"
  },
  {
    "text": "plans around the myriad of release dates for the same products while jigsaw was in fact in Java 9 and was in fact",
    "start": "273169",
    "end": "280550"
  },
  {
    "text": "released in September 2017 we can do better now Duke on his little trip down",
    "start": "280550",
    "end": "287270"
  },
  {
    "text": "memory lane learned how to count unlike us Duke learns how to count in decimal 1.1",
    "start": "287270",
    "end": "293780"
  },
  {
    "text": "1.2 1.3 1.4 who knows what comes next 6",
    "start": "293780",
    "end": "300830"
  },
  {
    "text": "5 someone said 5 5 is pretty close it was 5.0 after that was 6 at which point we",
    "start": "300830",
    "end": "308270"
  },
  {
    "text": "was a normal counting model straight up through 11 and presumably 12 and 13",
    "start": "308270",
    "end": "313400"
  },
  {
    "text": "which means after six versions of Java we now count like normal people who Duke",
    "start": "313400",
    "end": "322010"
  },
  {
    "text": "also learned another way of counting using semantic versioning that represents the year a month that the",
    "start": "322010",
    "end": "328700"
  },
  {
    "text": "version of Java was released it's not being used as the primary release number largely because Java developers didn't",
    "start": "328700",
    "end": "335630"
  },
  {
    "text": "like it it's still there behind the scenes still there in Oracle's JDK using our six month release model Java 10 was",
    "start": "335630",
    "end": "343190"
  },
  {
    "text": "released in 2018 and March Java leaven was released in 2018 in September who",
    "start": "343190",
    "end": "350960"
  },
  {
    "text": "knows what the semantics number is for Java 12 yes 2019 point 3 correct and we",
    "start": "350960",
    "end": "361640"
  },
  {
    "text": "can predict these out as far in advance as we'd like wait a minute you mean",
    "start": "361640",
    "end": "366800"
  },
  {
    "text": "there's gonna be a major version of Java every six months couldn't even handle a major version every three years half the",
    "start": "366800",
    "end": "373520"
  },
  {
    "text": "room still on Java eight what do we do it's not really a major version it's",
    "start": "373520",
    "end": "378800"
  },
  {
    "text": "called a major version but it's only got six months of functionality in it think agile we know we're releasing more often",
    "start": "378800",
    "end": "385040"
  },
  {
    "text": "my agile project releases every two weeks not every six months but it's more often than every three years",
    "start": "385040",
    "end": "390290"
  },
  {
    "text": "the reason it's a major version is so that we can add language changes you can",
    "start": "390290",
    "end": "395600"
  },
  {
    "text": "only change the syntax if there's a major version which means the solution to this is we'll just declare all",
    "start": "395600",
    "end": "401150"
  },
  {
    "text": "versions major versions now we can change this in text whenever we want yeah that seems reasonable but there are",
    "start": "401150",
    "end": "407330"
  },
  {
    "text": "smaller features like any good agile project you carve things up until they're manageable which means we will",
    "start": "407330",
    "end": "412850"
  },
  {
    "text": "not have the saga of jigsaw ever again if your feature isn't ready for release it waits for the next one if it's not",
    "start": "412850",
    "end": "418970"
  },
  {
    "text": "ready for that release it waits for the next one if it's too big to get in any release you will never see it that means",
    "start": "418970",
    "end": "424130"
  },
  {
    "text": "it's on the developers in order to make feet that are small enough that can be inside of a release job at ten actually had 12",
    "start": "424130",
    "end": "432270"
  },
  {
    "text": "new features in it some of them were small things we care about some of them were not so small things we care about",
    "start": "432270",
    "end": "437340"
  },
  {
    "text": "but not large things and some of them we don't care about at all they just set the stage for bigger features down the",
    "start": "437340",
    "end": "443580"
  },
  {
    "text": "road job 11 had 15 new features again some we care about some that set the",
    "start": "443580",
    "end": "448860"
  },
  {
    "text": "stage for other things now back to Dukes trip down memory lane Duke was a student",
    "start": "448860",
    "end": "454890"
  },
  {
    "text": "in an elementary school he went to Java school okay let's see how Duke did a Java school Duke's first subject was",
    "start": "454890",
    "end": "462810"
  },
  {
    "text": "developer community Duke did pretty well on developer community he got an egg we've got a good developer community",
    "start": "462810",
    "end": "469410"
  },
  {
    "text": "here in the room online I think it's fair to say the Oracle did a good job with developer community we've got",
    "start": "469410",
    "end": "476580"
  },
  {
    "text": "features jobs got lots of features in fact the only thing that was stopping Duke from getting an A and features is",
    "start": "476580",
    "end": "482640"
  },
  {
    "text": "that a language can always have more features or according to Josh too many features but either way you can always",
    "start": "482640",
    "end": "488520"
  },
  {
    "text": "add more so B that's pretty good it's a good student all right let's continue on",
    "start": "488520",
    "end": "493800"
  },
  {
    "text": "with Dukes report card Dukas frequency of release as his next subject and for",
    "start": "493800",
    "end": "498870"
  },
  {
    "text": "that he got a an F Duke that said of",
    "start": "498870",
    "end": "505740"
  },
  {
    "text": "race issue your thing it's a we couldn't even get to two years it was three years that's not frequent by any stretch of",
    "start": "505740",
    "end": "510870"
  },
  {
    "text": "the imagination all right it's okay Duke it's just one subject you'll do better in the next one now we have",
    "start": "510870",
    "end": "517740"
  },
  {
    "text": "predictability of release well he did better",
    "start": "517740",
    "end": "523880"
  },
  {
    "text": "we don't have predictability of release either releases were well when they were ready they got released here's your",
    "start": "524420",
    "end": "530040"
  },
  {
    "text": "version of Java clearly Duke needs to do better on this and you know what this",
    "start": "530040",
    "end": "535380"
  },
  {
    "text": "isn't really fair to Duke because the JDK isn't just about Java it's about a whole bunch of languages Duke said okay",
    "start": "535380",
    "end": "543210"
  },
  {
    "text": "I'm going to go to JVM College now let's see how do you bid at JVM College the",
    "start": "543210",
    "end": "549240"
  },
  {
    "text": "first subject was vocabulary Duke learn lots of new words in college including polygon programming so he could support",
    "start": "549240",
    "end": "555930"
  },
  {
    "text": "all these new languages on the JVM all right good learn a few more words but you're doing",
    "start": "555930",
    "end": "561990"
  },
  {
    "text": "okay then we've got polyglot programming itself well we have caught one we have Scala I think you did a good job here",
    "start": "561990",
    "end": "569279"
  },
  {
    "text": "Duke gotten all right now we're back to man believe it or not this is worse than",
    "start": "569279",
    "end": "577290"
  },
  {
    "text": "on the prior slide because now in addition to holding up Java we're also holding up all of these other languages",
    "start": "577290",
    "end": "583100"
  },
  {
    "text": "something's got to change and you know what happens at a company when you have a change you have a reorg yep ton for",
    "start": "583100",
    "end": "591300"
  },
  {
    "text": "Java to have a reorg we're gonna have a reorg at the train station and we're gonna reorg the release train into something that makes sense but first",
    "start": "591300",
    "end": "599459"
  },
  {
    "text": "another survey where you see how many languages people know I bet it's not just Java and remember all of these",
    "start": "599459",
    "end": "605610"
  },
  {
    "text": "things are programming languages so if you only know Java and HTML you know more than one programming language raise",
    "start": "605610",
    "end": "611220"
  },
  {
    "text": "your hand if you know one or zero programming languages the camera guy all",
    "start": "611220",
    "end": "617550"
  },
  {
    "text": "right I'm glad everyone else in the room knows a programming language otherwise you'd be in the wrong room who knows 2",
    "start": "617550",
    "end": "623279"
  },
  {
    "text": "to 5 programming languages ok six or more and this is the message that we're",
    "start": "623279",
    "end": "630600"
  },
  {
    "text": "all polyglot programmers now nobody can get away with just knowing one language and making a career out of it an Oracle",
    "start": "630600",
    "end": "636839"
  },
  {
    "text": "recognizes this so the first thing in the reorg was you change the names of everything because that solves all your",
    "start": "636839",
    "end": "642630"
  },
  {
    "text": "problems you know we all work in big companies from the laughter in response",
    "start": "642630",
    "end": "647850"
  },
  {
    "text": "to that Java one was renamed it's now called Oracle code one there was also Oracle",
    "start": "647850",
    "end": "654779"
  },
  {
    "text": "code which was the traveling Roadshow to major cities throughout the world ok this was good this recognizes that it's",
    "start": "654779",
    "end": "661740"
  },
  {
    "text": "not just about Java and it recognizes the fact that Java developers really care about a lot of things you care",
    "start": "661740",
    "end": "668190"
  },
  {
    "text": "about having a rich UI you care about having a back-end you care about having DevOps you care about having a pipeline even last year at Java one it wasn't all",
    "start": "668190",
    "end": "675930"
  },
  {
    "text": "about Java so while people cried when this change came out on the internet that Java is dying this is the end of",
    "start": "675930",
    "end": "681630"
  },
  {
    "text": "Java this is the end of Java as much as all the other things that used to be the end of Java or the end of Java job is",
    "start": "681630",
    "end": "687209"
  },
  {
    "text": "fine it's an ecosystem the other change was to Java Enterprise Edition",
    "start": "687209",
    "end": "693450"
  },
  {
    "text": "Oracle decided that it would be better for the community to maintain Java Enterprise Edition and make it better",
    "start": "693450",
    "end": "698820"
  },
  {
    "text": "but being Oracle they have a lot of lawyers and you're not allowed to use their we're job no problem the new name",
    "start": "698820",
    "end": "705180"
  },
  {
    "text": "is Jakarta EE cleverly still je there is",
    "start": "705180",
    "end": "710340"
  },
  {
    "text": "a lot of discussion in this space right now about what's gonna happen with things like the package names and how to deal with it but for the time being it's",
    "start": "710340",
    "end": "717420"
  },
  {
    "text": "alive and well it's in Jakarta EE and ready to go alright we've got all the",
    "start": "717420",
    "end": "722940"
  },
  {
    "text": "names out of our system now we can move on to the stuff that actually matters the release schedule we saw Duke didn't",
    "start": "722940",
    "end": "729210"
  },
  {
    "text": "do very well before in his classes on frequency and predictability of release and the reorg really solves this from",
    "start": "729210",
    "end": "736230"
  },
  {
    "text": "now on there are going to be releases on a schedule and it's an actual schedule it's just as much of a schedule as the",
    "start": "736230",
    "end": "741510"
  },
  {
    "text": "patch schedule or you can predict in advance when something's going to be released there's going to be a major",
    "start": "741510",
    "end": "747510"
  },
  {
    "text": "version of Java every six months as I mentioned and there's going to be a long term support version of Java every three",
    "start": "747510",
    "end": "754020"
  },
  {
    "text": "years those are the version that we enterprise customers care about that's the version that's going to be stable",
    "start": "754020",
    "end": "759480"
  },
  {
    "text": "and have security releases on a regular basis releases are now feature driven",
    "start": "759480",
    "end": "764760"
  },
  {
    "text": "because the dates known in advance if your future didn't make it in by the date it goes on to the next release as a",
    "start": "764760",
    "end": "772050"
  },
  {
    "text": "related note today its feature complete day for Java 11 what you hear today is",
    "start": "772050",
    "end": "777570"
  },
  {
    "text": "what's in Java leaven is what's in Java leaven and final very cool all right now",
    "start": "777570",
    "end": "783690"
  },
  {
    "text": "that we know when our our releases of Java are coming out developers don't have to waste time checking memory",
    "start": "783690",
    "end": "789690"
  },
  {
    "text": "planning they can code right up until the day that the train shows up and they're good to go",
    "start": "789690",
    "end": "794930"
  },
  {
    "text": "any good train station has a schedule Java is no different job at 10:00 came",
    "start": "794930",
    "end": "801210"
  },
  {
    "text": "out in March job 11 will be coming out on September 25th of this year and as I",
    "start": "801210",
    "end": "807750"
  },
  {
    "text": "mentioned before job 11 is the next release that has long term support we",
    "start": "807750",
    "end": "813030"
  },
  {
    "text": "should all be ready for that to come out so that we can start planning for it just like an arrival schedule you also",
    "start": "813030",
    "end": "819480"
  },
  {
    "text": "need to have a departure schedule most of us are almost all of us are on Java 6",
    "start": "819480",
    "end": "824790"
  },
  {
    "text": "7 or 8 Java six loses its port even for paid customers at the end of the year it was",
    "start": "824790",
    "end": "831930"
  },
  {
    "text": "good to see there were almost no hands for Java six but if you know anyone who's still on Java six remind them they",
    "start": "831930",
    "end": "837480"
  },
  {
    "text": "need to be getting off like now Java seven will have long-term support through 2022 as a paid customer it's a",
    "start": "837480",
    "end": "844860"
  },
  {
    "text": "good while from now job Aid is interesting it still has public patches for a while",
    "start": "844860",
    "end": "850110"
  },
  {
    "text": "those public patches according to Oracle end in January 2019 if you're a business",
    "start": "850110",
    "end": "855990"
  },
  {
    "text": "customer and December of 2020 if you're an individual customer this makes no",
    "start": "855990",
    "end": "861450"
  },
  {
    "text": "sense because it's the same patches I don't understand how they think they're going",
    "start": "861450",
    "end": "866550"
  },
  {
    "text": "to enforce that or how it's going to have meaning and I look forward to seeing a clarifying announcement on the topic but personally it doesn't affect",
    "start": "866550",
    "end": "873450"
  },
  {
    "text": "me because as an enterprise customer paid patches lasts until 2025 and there's plenty of time without having to",
    "start": "873450",
    "end": "879420"
  },
  {
    "text": "worry about it Java 9 and 10 do not have any paid patches you cannot pay any",
    "start": "879420",
    "end": "885540"
  },
  {
    "text": "amount of money and expect to get security patches after the public patches end the public patches are",
    "start": "885540",
    "end": "891329"
  },
  {
    "text": "available until the next major version of Java comes out right now Java 10 is",
    "start": "891329",
    "end": "896520"
  },
  {
    "text": "the current version if the security issues in the news tomorrow there will be a security patch to job attempt there",
    "start": "896520",
    "end": "903450"
  },
  {
    "text": "will not be a security patch to Java 9 if you're on Java 9 your upgrade path is",
    "start": "903450",
    "end": "908700"
  },
  {
    "text": "congratulations you're now on Java 10 if a major security issue comes out in",
    "start": "908700",
    "end": "914730"
  },
  {
    "text": "October and you're on Java 10 similarly your upgrade path is congratulations you're now on job 11 if you're paying",
    "start": "914730",
    "end": "922290"
  },
  {
    "text": "for long-term support and the issue comes out any time after March 2019 for",
    "start": "922290",
    "end": "927420"
  },
  {
    "text": "Java 11 you will get that paid support you will be able to keep downloading patches this applies both to the",
    "start": "927420",
    "end": "933600"
  },
  {
    "text": "traditional you give Oracle a lot of money less often and to the new subscription model the schedule of when",
    "start": "933600",
    "end": "940230"
  },
  {
    "text": "you get your support until is the same you might notice there's two dates on there for 2011 for Java 11 that the",
    "start": "940230",
    "end": "947459"
  },
  {
    "text": "reason for that is there's different levels of support you can pay for if you pay more money you get longer support",
    "start": "947459",
    "end": "954380"
  },
  {
    "text": "alright let's see if we've all been paying attention how many months will job",
    "start": "954380",
    "end": "959459"
  },
  {
    "text": "12 have security patches for all right everybody's awake six months and",
    "start": "959459",
    "end": "967160"
  },
  {
    "text": "remembering that long-term support releases come out every three years when is the next one after job 11 okay I",
    "start": "967160",
    "end": "977699"
  },
  {
    "text": "heard both I heard a year and I also heard the number the number was what I was looking for Java 17",
    "start": "977699",
    "end": "984360"
  },
  {
    "text": "we've got she releases a year for three years we add that to Java eleven we get the job of 17 once we get to Java leaven",
    "start": "984360",
    "end": "991949"
  },
  {
    "text": "we get to sit on it for a while relax and enjoy what's coming next next up we",
    "start": "991949",
    "end": "999240"
  },
  {
    "text": "have a tale of two JD case there are two JD case well there's really more than two JD",
    "start": "999240",
    "end": "1004790"
  },
  {
    "text": "Kay's but on this slide there's two Jadakiss there's the Oracle JDK which only exists for those LTS versions the",
    "start": "1004790",
    "end": "1012709"
  },
  {
    "text": "java levin java 17 Oracle's not putting out a JDK for Java 12 if you want a JDK",
    "start": "1012709",
    "end": "1019100"
  },
  {
    "text": "for Java 12 you get it from open JDK open JDK is putting out a version of",
    "start": "1019100",
    "end": "1024168"
  },
  {
    "text": "Java every six months it's great open JDK is also free and as we mentioned",
    "start": "1024169",
    "end": "1030048"
  },
  {
    "text": "earlier if you're on Oracle JDK you can upgrade security patch versions you can",
    "start": "1030049",
    "end": "1035270"
  },
  {
    "text": "upgrade to the next three-year version you can also switch to open JDK but of course once you switch your subject to",
    "start": "1035270",
    "end": "1042678"
  },
  {
    "text": "the open JDK security updates and not the Oracle ones open JDK provides",
    "start": "1042679",
    "end": "1048770"
  },
  {
    "text": "interim security patches within the six month release window and then you get to upgrade to the next version as I",
    "start": "1048770",
    "end": "1055970"
  },
  {
    "text": "mentioned earlier today is feature complete day we get to know what's in Java Levin and there were changes right",
    "start": "1055970",
    "end": "1062240"
  },
  {
    "text": "up until feature complete day the most recent one being on Monday I'll show you later in the presentation which",
    "start": "1062240",
    "end": "1067730"
  },
  {
    "text": "feature was added on Monday this really proves whichever features are ready before feature complete day are what",
    "start": "1067730",
    "end": "1073429"
  },
  {
    "text": "make it into the next version of Java and nobody knows that in advance it depends on each feature to defend itself",
    "start": "1073429",
    "end": "1079190"
  },
  {
    "text": "as being ready I like to play with different versions of Java on my machine",
    "start": "1079190",
    "end": "1085820"
  },
  {
    "text": "an open JDK makes this really easy raise your hand if you're on a Mac this was",
    "start": "1085820",
    "end": "1092630"
  },
  {
    "text": "fun with or JDK they gave you a DMV image and if you want to have multiple versions of Java",
    "start": "1092630",
    "end": "1098180"
  },
  {
    "text": "it was well you used a virtual machine with open JDK they give you a tar gzip",
    "start": "1098180",
    "end": "1104510"
  },
  {
    "text": "file which is much easier you can download as many of those as you want and just have them in parallel directories on my machine I like to use",
    "start": "1104510",
    "end": "1111770"
  },
  {
    "text": "aliases for all the versions of Java I have so I can run commands like Java C 11 Java C 10 Java 9 you get the idea",
    "start": "1111770",
    "end": "1119870"
  },
  {
    "text": "this allows me to switch really quickly between different versions of Java if I'm testing behavior I want to know if",
    "start": "1119870",
    "end": "1125990"
  },
  {
    "text": "the same code compiles or runs in different versions of Java and how it behaves it also makes it obvious to me",
    "start": "1125990",
    "end": "1132140"
  },
  {
    "text": "what version of Java I'm running if I'm playing with job 11 for my pet project or this talk but then I'm going to work",
    "start": "1132140",
    "end": "1138650"
  },
  {
    "text": "on the code ranch software and I don't want to be on job 11 I don't want to make any mistakes and by having to explicitly say what version of Java I'm",
    "start": "1138650",
    "end": "1145340"
  },
  {
    "text": "on that prevents it we're now halfway through the talk and we get to go on to",
    "start": "1145340",
    "end": "1151040"
  },
  {
    "text": "actual code the new features that are in Java 10 and 11 the first one is local",
    "start": "1151040",
    "end": "1157340"
  },
  {
    "text": "variable syntax local variable syntax is a bit of syntactic sugar it allows you",
    "start": "1157340",
    "end": "1163580"
  },
  {
    "text": "to use the keyword var it's not really a keyword we'll get back to that later but it lets you use the word var in north as",
    "start": "1163580",
    "end": "1169700"
  },
  {
    "text": "a substitute for a type name I didn't nice to bait with somebody over lunch spoiler i was right i wrote this",
    "start": "1169700",
    "end": "1176030"
  },
  {
    "text": "presentation about what var means var does not mean immutable it also doesn't",
    "start": "1176030",
    "end": "1181550"
  },
  {
    "text": "mean what you would expect in a scripting language in this case var is a string it's just less typing for me it",
    "start": "1181550",
    "end": "1187340"
  },
  {
    "text": "compiles to the exact same thing similarly here I have a list var is that",
    "start": "1187340",
    "end": "1193550"
  },
  {
    "text": "a list in this case I can't say later var list equal 3 because that won't compile I've established that list is a",
    "start": "1193550",
    "end": "1201050"
  },
  {
    "text": "list and not an integer I have to treat it as one consistently this is so that",
    "start": "1201050",
    "end": "1206480"
  },
  {
    "text": "you can type less there's pros and cons to typing less it is not immutable",
    "start": "1206480",
    "end": "1211880"
  },
  {
    "text": "there's no Val maybe there will be in the future there's no Valens job at 10 you're not getting new functionality",
    "start": "1211880",
    "end": "1217370"
  },
  {
    "text": "here you're getting code that's shorter to type easier to read and easier to show in presentations and remember it is",
    "start": "1217370",
    "end": "1225380"
  },
  {
    "text": "the type it is so in this case name is a string I get to assign it to a string variable on the",
    "start": "1225380",
    "end": "1231650"
  },
  {
    "text": "next line of code without having to cast or do anything funky because the compiler knows that name is a string",
    "start": "1231650",
    "end": "1238720"
  },
  {
    "text": "next up we have a little bit of code I wrote for a robotics program here the",
    "start": "1238750",
    "end": "1244100"
  },
  {
    "text": "types are a little bit long and it's even worse on a screen where you're presenting because the font type is huge",
    "start": "1244100",
    "end": "1249350"
  },
  {
    "text": "I can rewrite this with var this has a few advantages one in a presentation I",
    "start": "1249350",
    "end": "1255440"
  },
  {
    "text": "let you see what's really important which is not the type to the variable names align which makes it easier to see",
    "start": "1255440",
    "end": "1261950"
  },
  {
    "text": "what's going on and three I haven't I don't have any unnecessary fluff it's a pretty good bet that header row is a row",
    "start": "1261950",
    "end": "1268580"
  },
  {
    "text": "object I don't really need to have the type right before that to remind me another example where this is useful is",
    "start": "1268580",
    "end": "1275870"
  },
  {
    "text": "when you have code that's really narrowly scoped if I forget that CSV pass is a pass object I need to study",
    "start": "1275870",
    "end": "1283340"
  },
  {
    "text": "Java a little more int the fact that it says pass there isn't going to help me and if you think about the typical pass",
    "start": "1283340",
    "end": "1288350"
  },
  {
    "text": "code we have something like pass pass equal paths get bla bla bla bla bla yeah",
    "start": "1288350",
    "end": "1295490"
  },
  {
    "text": "I get it is path right that's not helping me it's also only saving me one character so we're back to the pros and",
    "start": "1295490",
    "end": "1301850"
  },
  {
    "text": "cons but for things that are longer like my bufferedreader or my CSV printer I can tell from the name of the object",
    "start": "1301850",
    "end": "1307640"
  },
  {
    "text": "what it is I'm fine here there is some historical precedent for this intact",
    "start": "1307640",
    "end": "1313910"
  },
  {
    "text": "sugar in Java 5 when we first met generics we had to write a lot of code we'd use the generics on both sides of",
    "start": "1313910",
    "end": "1320300"
  },
  {
    "text": "the equal sign Java 7 made that better and introduced the diamond operator we then only had to put it on one side of",
    "start": "1320300",
    "end": "1326480"
  },
  {
    "text": "the equal side unfortunately it was the wrong side it would be much easier if it",
    "start": "1326480",
    "end": "1332540"
  },
  {
    "text": "was on the other side so I could read the type more easily and with Java 10 I",
    "start": "1332540",
    "end": "1337640"
  },
  {
    "text": "can took us a while to get here but this code is more readable and it conveys the exact same information if I want to know",
    "start": "1337640",
    "end": "1344540"
  },
  {
    "text": "what product map 3 is I have to go to the line where it's defined and it's still there so I haven't lost any",
    "start": "1344540",
    "end": "1350210"
  },
  {
    "text": "information I've just made it a little easier to read let's take a look at where we can use var we can use it as a",
    "start": "1350210",
    "end": "1357140"
  },
  {
    "text": "local variable good we can use it and local variable where the compiler can",
    "start": "1357140",
    "end": "1362450"
  },
  {
    "text": "determine the type for example in an assignment we can use it when we're calling a method and the compiler can",
    "start": "1362450",
    "end": "1368120"
  },
  {
    "text": "determine the type noticing a theme here we can use it inside a loop where can't",
    "start": "1368120",
    "end": "1374240"
  },
  {
    "text": "we use it as of Java 10 you can't use var inside inner classes it's not",
    "start": "1374240",
    "end": "1379940"
  },
  {
    "text": "terribly surprising because it's local variable syntax not instance variable syntax and inner classes we cannot use",
    "start": "1379940",
    "end": "1387740"
  },
  {
    "text": "it if we haven't defined the value even though no good is defined later it doesn't know what that is",
    "start": "1387740",
    "end": "1393950"
  },
  {
    "text": "and I realized this wouldn't compile anyway because I didn't write equal null but even if I had written equal null",
    "start": "1393950",
    "end": "1399950"
  },
  {
    "text": "that wouldn't be enough information for the compiler and I'd still have issues can't be used in instance variables or",
    "start": "1399950",
    "end": "1405980"
  },
  {
    "text": "any other creative place to you that you're thinking of now for a question we're gonna do a little thumbs-up",
    "start": "1405980",
    "end": "1411140"
  },
  {
    "text": "thumbs-down poll if you think this compiles do thumbs up if you think this doesn't compile do thumbs down I've got",
    "start": "1411140",
    "end": "1419240"
  },
  {
    "text": "a nice mix here I think it's about 5050 which means half of you were tricked this code does compile it compiles",
    "start": "1419240",
    "end": "1427190"
  },
  {
    "text": "because var is not actually a reserved word think of it like a type I know there are only two places that this code",
    "start": "1427190",
    "end": "1434419"
  },
  {
    "text": "should exist a certification study guide and when Josh shop updates his puzzlers",
    "start": "1434419",
    "end": "1439580"
  },
  {
    "text": "book this should not exist in your code it's actually important that this compiles though because var was a",
    "start": "1439580",
    "end": "1446000"
  },
  {
    "text": "perfectly good variable name up until recently technically it still is but now you know it's a bad idea to use it if",
    "start": "1446000",
    "end": "1452570"
  },
  {
    "text": "you got legacy code that has a variable named var you don't want it to stop compiling when you upgrade to Java 10",
    "start": "1452570",
    "end": "1458240"
  },
  {
    "text": "and since shop and Oracle value backward compatibility this is a perfectly",
    "start": "1458240",
    "end": "1463460"
  },
  {
    "text": "reasonable thing to expect to happen what you don't want of course is writing code where you've got var two or three",
    "start": "1463460",
    "end": "1469220"
  },
  {
    "text": "times on the same line that's just silly if you wrote this code it's in Java 10 and you already know you shouldn't need",
    "start": "1469220",
    "end": "1474620"
  },
  {
    "text": "as far but it's a fun thought experiment included it on the slide reviewing the",
    "start": "1474620",
    "end": "1480230"
  },
  {
    "text": "pros and cons of using var we've got less typing at the cost of less information we've got less redundancy if",
    "start": "1480230",
    "end": "1487429"
  },
  {
    "text": "you're careful with your variable names please don't use Hungarian notation if you're using Hungary",
    "start": "1487429",
    "end": "1492580"
  },
  {
    "text": "you shouldn't be using bar and you can scan the variable names more easily but",
    "start": "1492580",
    "end": "1497620"
  },
  {
    "text": "like any good thing this is rope you can hang yourself with in the presentation we saw earlier today we had a website",
    "start": "1497620",
    "end": "1504399"
  },
  {
    "text": "with good references to when you should and shouldn't use var so I reuse slip slash stole it for my presentation in",
    "start": "1504399",
    "end": "1512620"
  },
  {
    "text": "job 11 they added another feature for var and this really shows that when you",
    "start": "1512620",
    "end": "1518620"
  },
  {
    "text": "have features that are delivered incrementally it works just like agile programming where you get smaller pieces",
    "start": "1518620",
    "end": "1524799"
  },
  {
    "text": "of functionality in job 11 they added the ability to use var with lambdas in",
    "start": "1524799",
    "end": "1531100"
  },
  {
    "text": "addition to local variables we've got a basic lambda here pierrot true we could",
    "start": "1531100",
    "end": "1537460"
  },
  {
    "text": "always specify the type here we've got a string we said what it was and now we can specify bar instead of the type and",
    "start": "1537460",
    "end": "1544059"
  },
  {
    "text": "I know what you're thinking this is ridiculous I didn't need to specify a type in the first place right but that's",
    "start": "1544059",
    "end": "1550690"
  },
  {
    "text": "okay because there is a use for it that use is when you want to use an annotation in your lambdas when you want",
    "start": "1550690",
    "end": "1556659"
  },
  {
    "text": "to use an annotation you have to specify a type because the annotation requires a type and in the case of my example the",
    "start": "1556659",
    "end": "1563470"
  },
  {
    "text": "type is long and annoying and I do not wish to specify the type here var is perfect I'm only including the type at",
    "start": "1563470",
    "end": "1570639"
  },
  {
    "text": "all to make the compiler happy I don't need to read it I don't need it to be readable and a perfect use case for this",
    "start": "1570639",
    "end": "1575919"
  },
  {
    "text": "example it is all or nothing if you use bar in the lambda you have to use it for",
    "start": "1575919",
    "end": "1581080"
  },
  {
    "text": "all of the types in that lambda or none you can't leave it out you can't switch to the actual type you've got a pick but",
    "start": "1581080",
    "end": "1588490"
  },
  {
    "text": "not a big deal can change it from lambda lambda and that's just what you would want to do our next topic is garbage",
    "start": "1588490",
    "end": "1595000"
  },
  {
    "text": "collection we saw earlier the Duke didn't do well in school and the punishment for that is the Duke has to",
    "start": "1595000",
    "end": "1600730"
  },
  {
    "text": "take out the garbage forever the first feature is in Java 10 choose your own",
    "start": "1600730",
    "end": "1606760"
  },
  {
    "text": "garbage collector there's a new garbage collector interface and this is a perfect example as a developer of I",
    "start": "1606760",
    "end": "1612669"
  },
  {
    "text": "don't care the reason that anybody cares is it sets the stage for other features",
    "start": "1612669",
    "end": "1618159"
  },
  {
    "text": "which we'll be seeing on the next couple slides and again the agile model you want to deliver small concrete things",
    "start": "1618159",
    "end": "1624130"
  },
  {
    "text": "even if they're not necessarily useful the end-user all of us they are useful",
    "start": "1624130",
    "end": "1629200"
  },
  {
    "text": "to the language itself so that we can make progress up until Java eight which we're on the",
    "start": "1629200",
    "end": "1636190"
  },
  {
    "text": "parallel garbage collector was the rule of the land starting in Java nine the garbage first garbage collector started",
    "start": "1636190",
    "end": "1643120"
  },
  {
    "text": "becoming prevalent in Java leaven it's the default with parallel implementation",
    "start": "1643120",
    "end": "1648549"
  },
  {
    "text": "I'm going to give a one slide overview on this topic for more chandra wrote an",
    "start": "1648549",
    "end": "1653950"
  },
  {
    "text": "excellent presentation the link is here raise your hand Chandra I take credit for this yay this is also Chandra slide",
    "start": "1653950",
    "end": "1661980"
  },
  {
    "text": "garbage one garbage collection divides up memory into regions so you can have",
    "start": "1661980",
    "end": "1667179"
  },
  {
    "text": "garbage collection happen independently so one takeaway about garbage first garbage collection is it's about finding",
    "start": "1667179",
    "end": "1673389"
  },
  {
    "text": "garbage not finding every scrap of memory that can be cleaned up it's better to get rid of that giant stack of",
    "start": "1673389",
    "end": "1679450"
  },
  {
    "text": "garbage that was on your table and throw it out and leave a little clutter there then have it all there because you're",
    "start": "1679450",
    "end": "1685240"
  },
  {
    "text": "continually looking to see if you've got anything besides in a few milliseconds he'll have more anyway there's also in",
    "start": "1685240",
    "end": "1693370"
  },
  {
    "text": "Java 11 the new epsilon garbage collector this one's fun it never reclaims any memory it's the",
    "start": "1693370",
    "end": "1699940"
  },
  {
    "text": "do-nothing garbage collector the program runs until you run out of heap space",
    "start": "1699940",
    "end": "1705600"
  },
  {
    "text": "that doesn't seem very useful on the surface does it that's why we have a beware of garbage collector on here just",
    "start": "1705600",
    "end": "1713649"
  },
  {
    "text": "like coyotes be aware of Epsilon it does serve one purpose that's important which",
    "start": "1713649",
    "end": "1719919"
  },
  {
    "text": "is if you want to do a stress test if you want to know how your program behaved when it runs out of memory the",
    "start": "1719919",
    "end": "1725289"
  },
  {
    "text": "fastest way to make that happen is to tell the garbage collector leave me alone and let the program run on a memory it's also good for very short",
    "start": "1725289",
    "end": "1732370"
  },
  {
    "text": "batch programs if your program takes one second to run you don't need to clean up the garbage you may want to just have it",
    "start": "1732370",
    "end": "1738070"
  },
  {
    "text": "run faster and get it over with it's also used for last-ditch performance improvements with the exception of",
    "start": "1738070",
    "end": "1744970"
  },
  {
    "text": "possibly one company that's probably isn't you and if this is you be really really really careful the next garbage",
    "start": "1744970",
    "end": "1752259"
  },
  {
    "text": "collector also introduced in job 11 is the Z garbage collector this one is experimental still being worked on",
    "start": "1752259",
    "end": "1759860"
  },
  {
    "text": "and it aims to have ten millisecond or less pause times currently it's only available for Linux that may change over",
    "start": "1759860",
    "end": "1766580"
  },
  {
    "text": "time or it may not and to use it you need to use two flex first you need to use the unlock experimental features I",
    "start": "1766580",
    "end": "1773240"
  },
  {
    "text": "really know what I'm doing and I'm not going to blame JavaOne my program crashes and then you say you want to use",
    "start": "1773240",
    "end": "1779059"
  },
  {
    "text": "the Z garbage collector probably not what you want to do in production our",
    "start": "1779059",
    "end": "1784429"
  },
  {
    "text": "next feature is the HTTP client this is not a new future this is a future that's been an incubation for years it's now",
    "start": "1784429",
    "end": "1791720"
  },
  {
    "text": "hatched it's done and committing and it's ready to be a real full-fledged feature in the language we now have a",
    "start": "1791720",
    "end": "1796820"
  },
  {
    "text": "chicken this is an API that allows you to really easily interact with HTTP so",
    "start": "1796820",
    "end": "1803809"
  },
  {
    "text": "you can get a client you can get a response you can get a URL and you can put it in a string or other object of",
    "start": "1803809",
    "end": "1809540"
  },
  {
    "text": "your choosing that's helpful you can also do the same thing asynchronously I've created I've created a map and a",
    "start": "1809540",
    "end": "1818540"
  },
  {
    "text": "stream and I've got all of my future objects so that I can get them later and then I say send them asynchronously get",
    "start": "1818540",
    "end": "1825530"
  },
  {
    "text": "all of those strengths for me and let me know how it worked out there's a lot of customization you can do you can say I",
    "start": "1825530",
    "end": "1832280"
  },
  {
    "text": "want a file and input string and more string you can also say I want to discard the results maybe I'm doing some",
    "start": "1832280",
    "end": "1838190"
  },
  {
    "text": "sort of load test and I don't actually need the string for anything you can specify a bunch of request options like",
    "start": "1838190",
    "end": "1844070"
  },
  {
    "text": "the header proxies are really useful one we all work in companies that block everything from the Internet and you've",
    "start": "1844070",
    "end": "1850010"
  },
  {
    "text": "got all of the standard HTTP verbs pretty useful as an API it hasn't changed that much since the incubated",
    "start": "1850010",
    "end": "1856309"
  },
  {
    "text": "version if you were using it our next feature is time-based versioning this is",
    "start": "1856309",
    "end": "1862160"
  },
  {
    "text": "the Java code that goes with all of these changes we've been hearing through the release schedule of the language you",
    "start": "1862160",
    "end": "1868880"
  },
  {
    "text": "can ask Java web version it's on you can also ask Java to print out the feature interim update or patch version of the",
    "start": "1868880",
    "end": "1876350"
  },
  {
    "text": "language up until now you could ask Java to give you the major minor and security",
    "start": "1876350",
    "end": "1881540"
  },
  {
    "text": "versions they still exist but they're deprecated we're now supposed to use the new ones and feature interim update or",
    "start": "1881540",
    "end": "1888679"
  },
  {
    "text": "roughly equivalent to what they were before that in another level of patch that we can get more",
    "start": "1888679",
    "end": "1893720"
  },
  {
    "text": "information out of Java I tested this with patch number or start update number",
    "start": "1893720",
    "end": "1899420"
  },
  {
    "text": "one for Java ten and also early access edition of Java leaven since Java 11 is an outfit the future version is the",
    "start": "1899420",
    "end": "1907790"
  },
  {
    "text": "major version of Java that's what's updated every six months interim versions don't apply to open JDK",
    "start": "1907790",
    "end": "1914380"
  },
  {
    "text": "because they're only releasing fairly and frequently in the first place within the six month release cycle but for",
    "start": "1914380",
    "end": "1920840"
  },
  {
    "text": "Oracle JDK they may use it updates are when their updates within a six month period for example Oracle is planning",
    "start": "1920840",
    "end": "1927860"
  },
  {
    "text": "I'm releasing update one of roughly a month after the first release so Java leaven comes out in September there's",
    "start": "1927860",
    "end": "1934429"
  },
  {
    "text": "probably going to be update number one in October and patches are used for emergencies there haven't been an ax yet",
    "start": "1934429",
    "end": "1940309"
  },
  {
    "text": "if there are they'll start counting with zero you can also ask Java to give you",
    "start": "1940309",
    "end": "1945799"
  },
  {
    "text": "the date that the version came out this is the patch version or the update version if there was one since I'm using",
    "start": "1945799",
    "end": "1952450"
  },
  {
    "text": "update 1 I'm told that my JDK came out in April rather than March when Java 10",
    "start": "1952450",
    "end": "1958640"
  },
  {
    "text": "came out for John 11 that's more interesting it tells me that my code was built in the future and it was because",
    "start": "1958640",
    "end": "1966559"
  },
  {
    "text": "it's an early access edition this will become true when Java 11 is released so",
    "start": "1966559",
    "end": "1972049"
  },
  {
    "text": "it's not the build date it's the day that is logical for a release something you need to be careful about so you're",
    "start": "1972049",
    "end": "1978080"
  },
  {
    "text": "not accidentally encoding writing code that has to deal with the future it's kind of weird you can also say Java",
    "start": "1978080",
    "end": "1984500"
  },
  {
    "text": "version bot version this is not a typo it is in fact there twice open JDK does",
    "start": "1984500",
    "end": "1990890"
  },
  {
    "text": "not use this this is meant to be a vendor string oracle plans on using the 2010 point 9 semantic versioning for",
    "start": "1990890",
    "end": "1997880"
  },
  {
    "text": "their vendor specific string IBM may do something different as well may do",
    "start": "1997880",
    "end": "2003100"
  },
  {
    "text": "something different we shall see our last section is a small collection of audun and features that made it into",
    "start": "2003100",
    "end": "2009880"
  },
  {
    "text": "Java 10 than 11 one of my favorites because I meant our high school students is the new Java launcher mode when",
    "start": "2009880",
    "end": "2017140"
  },
  {
    "text": "you're teaching someone new Java you write a hello world program okay so you type hello world with all the ceremony",
    "start": "2017140",
    "end": "2023950"
  },
  {
    "text": "around it and then you explained that you have to write Java C and here you need the extension and then after a Java and you don't need",
    "start": "2023950",
    "end": "2029559"
  },
  {
    "text": "the extension don't don't don't worry about why that is just pretend it's magic and type in it we no longer have to explain that to people you can write",
    "start": "2029559",
    "end": "2036820"
  },
  {
    "text": "Java the name of the Java file and have it run this only works if your program",
    "start": "2036820",
    "end": "2042070"
  },
  {
    "text": "contains one class which means it's really only useful if you're doing a tiny experiment or you're teaching",
    "start": "2042070",
    "end": "2047740"
  },
  {
    "text": "someone new but let's be honest once your program has two classes you're using a real bull build tool and you're not compiling at the command-line anyway",
    "start": "2047740",
    "end": "2054240"
  },
  {
    "text": "what's also cool about the new shortcut is that it doesn't actually contain a create a class file it does everything",
    "start": "2054240",
    "end": "2061179"
  },
  {
    "text": "in memory and it runs your program which means we don't have to explain to people class files until they've gotten a",
    "start": "2061179",
    "end": "2066220"
  },
  {
    "text": "little further in the language I think this is cool practical implications that accompany are pretty close to zero but",
    "start": "2066220",
    "end": "2072190"
  },
  {
    "text": "it's a fun feature and it will be useful for new people the next feature which I",
    "start": "2072190",
    "end": "2077800"
  },
  {
    "text": "forgot about until I went to a presentation this morning is unmodifiable collections there's now API",
    "start": "2077800",
    "end": "2083349"
  },
  {
    "text": "is in order to make a copy of or to turn a stream into an unmodifiable list set",
    "start": "2083349",
    "end": "2089108"
  },
  {
    "text": "or map there's another feature behind the scenes nest based access control as",
    "start": "2089109",
    "end": "2095470"
  },
  {
    "text": "we know when you compile code that contains one class it generates one class file if you compile code that has",
    "start": "2095470",
    "end": "2102550"
  },
  {
    "text": "one class and one inner class you have two class files and then things start to",
    "start": "2102550",
    "end": "2107589"
  },
  {
    "text": "get interesting if you have a private instance variable in your outer class the inner class is",
    "start": "2107589",
    "end": "2113050"
  },
  {
    "text": "allowed to access it but the inner class is in another class file so it's not",
    "start": "2113050",
    "end": "2118240"
  },
  {
    "text": "really private it's private except for the people who are allowed to use it the implementation of that has always been a",
    "start": "2118240",
    "end": "2124599"
  },
  {
    "text": "hack and with Java 11 they fixed the hack yes cleaning up tech debt as users this is",
    "start": "2124599",
    "end": "2131890"
  },
  {
    "text": "something we really don't care about but it's nice to know that progress is being made",
    "start": "2131890",
    "end": "2137099"
  },
  {
    "text": "when job and mine came out with the deprecated for removal they removed a handful of api's we're sitting around",
    "start": "2137099",
    "end": "2143980"
  },
  {
    "text": "wondering are they gonna keep removing things or was this a one-time thing so they could say they remove stuff and now",
    "start": "2143980",
    "end": "2150130"
  },
  {
    "text": "we know they are in fact going to keep removing things the old Java EE and",
    "start": "2150130",
    "end": "2155200"
  },
  {
    "text": "CORBA modules that were in JDK itself for some obscure reason are no longer in Java they are thrown in the",
    "start": "2155200",
    "end": "2162150"
  },
  {
    "text": "trash Java took it out with the garbage and we're not going to be seeing them anymore the next thing is the PAC 200",
    "start": "2162150",
    "end": "2168870"
  },
  {
    "text": "tools which are in Java 11 were designated as deprecated for removal those were the things that allowed you",
    "start": "2168870",
    "end": "2175680"
  },
  {
    "text": "to create a compressed RAR file that had less stuff in it since Java 9 that's unnecessary Jayne Lincoln and modules do",
    "start": "2175680",
    "end": "2182550"
  },
  {
    "text": "that for you Java recognizes that we probably don't need this anymore it would be good to signal that it's going to go away one",
    "start": "2182550",
    "end": "2189120"
  },
  {
    "text": "day and as we learned from the previous slide one day will actually happen my favorite feature that was deprecated",
    "start": "2189120",
    "end": "2196530"
  },
  {
    "text": "for a removal was Nash horn the Java Script ish engine that you could use I had to write a chapter of this from my",
    "start": "2196530",
    "end": "2203310"
  },
  {
    "text": "book which got bin because it wasn't put on the exam there's no reason anyone needs to know this it's not Java it's",
    "start": "2203310",
    "end": "2209850"
  },
  {
    "text": "not JavaScript and JCL is a million times better it's nice that they're removing it from the language or I",
    "start": "2209850",
    "end": "2215160"
  },
  {
    "text": "should say might be removing it from the language the actual JEP says if a bunch",
    "start": "2215160",
    "end": "2220980"
  },
  {
    "text": "of people are really enthusiastic about this and want to adopt it it may stay in so far history has shown that people are",
    "start": "2220980",
    "end": "2227370"
  },
  {
    "text": "not so enthusiastic about this and Jay shell will take its place this is my",
    "start": "2227370",
    "end": "2235770"
  },
  {
    "text": "future that I was mentioning was actually made it into Java 11 2 days before the cutoff on Monday they",
    "start": "2235770",
    "end": "2242070"
  },
  {
    "text": "announced this was going to be deprecated removal in Java 11 not a huge feature but it proves that if something",
    "start": "2242070",
    "end": "2247710"
  },
  {
    "text": "is ready close to the deadline and it goes and finally we're going to end with",
    "start": "2247710",
    "end": "2253770"
  },
  {
    "text": "a fun feature Unicode 9 and 10 support there are in fact practical implications",
    "start": "2253770",
    "end": "2258930"
  },
  {
    "text": "for this if you're writing things in various Chinese dialects having extra unicode support is perfectly useful I do",
    "start": "2258930",
    "end": "2265950"
  },
  {
    "text": "not speak Chinese so I'm going maybe showing you things like traps and pretzels much more practical in my mind",
    "start": "2265950",
    "end": "2271680"
  },
  {
    "text": "and to tie this all together we get to use to new job of 11 features we have a",
    "start": "2271680",
    "end": "2277140"
  },
  {
    "text": "program here it's just a main program it outputs some stuff in Unicode I run it",
    "start": "2277140",
    "end": "2282330"
  },
  {
    "text": "using Java 11 that alias on my computer with Unicode Java instead of Java C and",
    "start": "2282330",
    "end": "2287880"
  },
  {
    "text": "Java and it tells me that I should have year or a soda but not for another hour",
    "start": "2287880",
    "end": "2292890"
  },
  {
    "text": "because I hope you'll stay for the next panel in this track so tie it all together there's no need to be puzzled",
    "start": "2292890",
    "end": "2299789"
  },
  {
    "text": "about Java 9 10 or 11 we learned about the Java leaven LTS and why we should be",
    "start": "2299789",
    "end": "2306809"
  },
  {
    "text": "ready to go when September comes out and we can upgrade we learned that there are releases every six months unless you",
    "start": "2306809",
    "end": "2313470"
  },
  {
    "text": "need security support in which case their releases every three years we learned about a bunch of new features so",
    "start": "2313470",
    "end": "2319740"
  },
  {
    "text": "go tell your manager and your team so that everybody's ready for the September release and with that I will like to",
    "start": "2319740",
    "end": "2325319"
  },
  {
    "text": "take questions and remember to say good things about me on your way out the door",
    "start": "2325319",
    "end": "2330260"
  }
]