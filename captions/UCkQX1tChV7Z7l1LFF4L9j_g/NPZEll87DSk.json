[
  {
    "text": "hi everyone registration is now open for qcon London 2023 taking place from March",
    "start": "659",
    "end": "6240"
  },
  {
    "text": "27th to the 29th UConn International software development conference is focus on the people that develop and work with",
    "start": "6240",
    "end": "11940"
  },
  {
    "text": "future Technologies you'll learn practical inspiration from over 60 software leaders deep in the trenches creating software scaling architectures",
    "start": "11940",
    "end": "18660"
  },
  {
    "text": "and fine-tuning their technical leadership to help you adopt the right patterns and practices learn more at",
    "start": "18660",
    "end": "24140"
  },
  {
    "text": "qconlondon.com Everyone likes the idea of building",
    "start": "24140",
    "end": "31019"
  },
  {
    "text": "something new so much freedom but what about making changes after you have users today I'm talking with Brandon",
    "start": "31019",
    "end": "36960"
  },
  {
    "text": "buyers about how you can evolve your API without versioning a topic he spoke about at qcon San Francisco Brandon is a",
    "start": "36960",
    "end": "43200"
  },
  {
    "text": "passionate technologist consultant author speaker and open source maintainer as head of technology for thoughtworks North America Brandon is",
    "start": "43200",
    "end": "49500"
  },
  {
    "text": "part of the group that puts together the thoughtworks technology radar a bi-annual opinionated perspective on technology Trends he is the creator of",
    "start": "49500",
    "end": "56039"
  },
  {
    "text": "mounty Bank a widely used service virtualization tool and wrote a related book on test microservices Brandon",
    "start": "56039",
    "end": "62399"
  },
  {
    "text": "welcome to the infoqueue podcast well thanks happy to be here so I set this up a little in the intro let's imagine we",
    "start": "62399",
    "end": "67860"
  },
  {
    "text": "have a successful API and it's in use by many people and other services calling it but now it's time to make a change in",
    "start": "67860",
    "end": "74280"
  },
  {
    "text": "general if we're adding completely new features that's easy but when we need to change something that's already being",
    "start": "74280",
    "end": "79740"
  },
  {
    "text": "used that's when we run into trouble why is that so difficult and who's impacted by those changes yeah it's a really hard",
    "start": "79740",
    "end": "87360"
  },
  {
    "text": "problem and I think often the pain of absorbing the change is often overlooked",
    "start": "87360",
    "end": "93360"
  },
  {
    "text": "so let's start with that second question first the API consumers when you see a new major version well regardless of how",
    "start": "93360",
    "end": "100500"
  },
  {
    "text": "that's represented as an API versioning or simvair or some equivalent that's indicative of breaking changes because",
    "start": "100500",
    "end": "107460"
  },
  {
    "text": "the API producer wanted to either fix something or change the contract in a",
    "start": "107460",
    "end": "113759"
  },
  {
    "text": "breaking way that is work for you to consume and that work is oftentimes easy",
    "start": "113759",
    "end": "119220"
  },
  {
    "text": "to overlook because it's Federated amongst the entire population of API consumers and a lot of times you don't",
    "start": "119220",
    "end": "125700"
  },
  {
    "text": "even have a direct connection with them for a public API like Mount debank is a public command line tool and it's sort",
    "start": "125700",
    "end": "131760"
  },
  {
    "text": "of a hybrid rest API with some interesting Nuance behind it the standard strategy that you always hear",
    "start": "131760",
    "end": "138480"
  },
  {
    "text": "about is versioning and of course versioning works you can communicate to the consumers that they need to change",
    "start": "138480",
    "end": "145200"
  },
  {
    "text": "their code to consume the breaking changes in the contract but that is work",
    "start": "145200",
    "end": "150540"
  },
  {
    "text": "that is friction and what I tried to do very intentionally with mounty bank which is open source so I had a bit more",
    "start": "150540",
    "end": "156660"
  },
  {
    "text": "room to play it's just a volunteer project it was really try to come up",
    "start": "156660",
    "end": "161879"
  },
  {
    "text": "with strategies outside of versioning that make that adoption easier because",
    "start": "161879",
    "end": "167819"
  },
  {
    "text": "you're not frustrated with changes over time and Mountain Bank itself is nine years old it itself depends on apis it's",
    "start": "167819",
    "end": "175440"
  },
  {
    "text": "a node js project so it depends on node.js libraries and I've spent and",
    "start": "175440",
    "end": "181140"
  },
  {
    "text": "more volunteer nights and weekends time than I care to admit not adding features",
    "start": "181140",
    "end": "186239"
  },
  {
    "text": "simply keeping up with changes to some of the library apis that have breaking",
    "start": "186239",
    "end": "191700"
  },
  {
    "text": "changes because they legitimately cleaned up their interface but they cleaned up the interface at the cost of me doing additional work and that adds",
    "start": "191700",
    "end": "198480"
  },
  {
    "text": "up over time and so I really pushed hard to come up with other strategies that still allow me to improve the interface",
    "start": "198480",
    "end": "205860"
  },
  {
    "text": "over time or evolve it in ways that would typically be a breaking change but without forcing the consumers to hear",
    "start": "205860",
    "end": "212280"
  },
  {
    "text": "through the work associated with that breaking change yeah I like how you mentioned you in that case were a",
    "start": "212280",
    "end": "217920"
  },
  {
    "text": "consumer that's also a producer I think a lot of us software developers straddle both lines we're creating something that",
    "start": "217920",
    "end": "223860"
  },
  {
    "text": "someone else consumes and sometimes that's a customer facing product it's a UI but sometimes it is an API that's a",
    "start": "223860",
    "end": "230340"
  },
  {
    "text": "product which is more like what you're describing with mounty Bank yeah and of course API is a broad term application",
    "start": "230340",
    "end": "236340"
  },
  {
    "text": "programming interface so I mentioned node.js libraries you know those are in process and the JavaScript function",
    "start": "236340",
    "end": "242040"
  },
  {
    "text": "definition for example might be the interface malibank has a rest API but it also has an embedded programmable logic",
    "start": "242040",
    "end": "249360"
  },
  {
    "text": "inside of it that is similar to what you might expect as a Java function interface because you can pass in Java",
    "start": "249360",
    "end": "255180"
  },
  {
    "text": "functions inside it as well so it works in a couple different levels of that but you're absolutely right it is a API as a",
    "start": "255180",
    "end": "261720"
  },
  {
    "text": "product released publicly I don't have a direct line of communication to each of",
    "start": "261720",
    "end": "267780"
  },
  {
    "text": "the individual users of it I do have a support Channel but I would prefer for my own sanity that they don't use the",
    "start": "267780",
    "end": "273840"
  },
  {
    "text": "support channel for just simple upgrade options I would prefer to take that work off of both them and me in terms of the",
    "start": "273840",
    "end": "279360"
  },
  {
    "text": "hand holding around it and so what exactly is mounty bank and then why was it a good system that allowed you to",
    "start": "279360",
    "end": "285360"
  },
  {
    "text": "explore these ways of how to evolve an API Mountain Bank is what's called a",
    "start": "285360",
    "end": "290460"
  },
  {
    "text": "service virtualization tool and that phrase I stumbled across after writing",
    "start": "290460",
    "end": "295500"
  },
  {
    "text": "Money Bank I haven't come across it previously that I considered it an out of process stub so if if you're familiar",
    "start": "295500",
    "end": "301259"
  },
  {
    "text": "with like a j mock or one of those mocking tools that's in process stubbing this allows you to take that out of",
    "start": "301259",
    "end": "307440"
  },
  {
    "text": "process so if I want to have black box tests against my application and my application has runtime dependencies on",
    "start": "307440",
    "end": "314160"
  },
  {
    "text": "another service that another team maintains perhaps anytime I run my tests",
    "start": "314160",
    "end": "320520"
  },
  {
    "text": "against that service I need an environment where both my application and the service are deployed especially if another team is controlling the",
    "start": "320520",
    "end": "326820"
  },
  {
    "text": "release cycle of that dependency then you can introduce non-determinism into",
    "start": "326820",
    "end": "332340"
  },
  {
    "text": "your testing and so service virtualization allows you testing your application to directly control the",
    "start": "332340",
    "end": "340139"
  },
  {
    "text": "responses from the dependent service so that you can test both happy paths and",
    "start": "340139",
    "end": "345360"
  },
  {
    "text": "it's much easier to test exceptional scenarios once you understand what the real service should respond like in",
    "start": "345360",
    "end": "351539"
  },
  {
    "text": "those exceptional scenarios to test the sad paths as well allowing you a lot more flexibility and test data setup",
    "start": "351539",
    "end": "357120"
  },
  {
    "text": "test determinism and of course it still needs to be balanced with other other tests approaches like contract testing",
    "start": "357120",
    "end": "362759"
  },
  {
    "text": "to validate your environmental assumptions but it allows you to give higher level tests integration or",
    "start": "362759",
    "end": "368820"
  },
  {
    "text": "service or component tests with the same type of determinism that we're used to in process so why is it a good platform",
    "start": "368820",
    "end": "376020"
  },
  {
    "text": "for exploring these concerns part of that is just social it's a single owner",
    "start": "376020",
    "end": "381120"
  },
  {
    "text": "open source product I manage it so I have full autonomy to experiment is also",
    "start": "381120",
    "end": "387060"
  },
  {
    "text": "because of the interesting hybrid nature of it that I mentioned previously where",
    "start": "387060",
    "end": "392340"
  },
  {
    "text": "it's both the rest API that you can start up with a command line interface it opens up listens on Osaka and exposes",
    "start": "392340",
    "end": "399300"
  },
  {
    "text": "a rest API and of course it can spin up other sockets because those need to be the virtual services that you're",
    "start": "399300",
    "end": "405180"
  },
  {
    "text": "configuring and the programmable nature of it where you can pass in certain JavaScript under certain conditions to",
    "start": "405180",
    "end": "412319"
  },
  {
    "text": "try to cover off security concerns allows for some really interesting evolutions of both what you would",
    "start": "412319",
    "end": "419100"
  },
  {
    "text": "normally represent on something like an open API specification and recognize an",
    "start": "419100",
    "end": "424440"
  },
  {
    "text": "open API specification will never be rich enough to give you the full interface of the programmable interface",
    "start": "424440",
    "end": "430500"
  },
  {
    "text": "that's embedded inside the rest interface so it allowed me to explore a lot of nuance around what it means to provide an API specification and have",
    "start": "430500",
    "end": "438419"
  },
  {
    "text": "the autonomy to do that and a tool that I was fortunate had some pretty healthy adoption early on so I was doing this in",
    "start": "438419",
    "end": "445740"
  },
  {
    "text": "the face of really users or in the natural course of work with real users not trying to do something artificial",
    "start": "445740",
    "end": "452280"
  },
  {
    "text": "that was just a science experiment on the side so one of the things we usually talk about apis we describe them as",
    "start": "452280",
    "end": "457380"
  },
  {
    "text": "contracts but I remember in your qcon talk you said the better word was promises can you explain the difference",
    "start": "457380",
    "end": "463080"
  },
  {
    "text": "there yeah and it's really just trying to set expectations with users the right",
    "start": "463080",
    "end": "469199"
  },
  {
    "text": "way and have a more nuanced conversation around what we mean by the interface of",
    "start": "469199",
    "end": "474900"
  },
  {
    "text": "an API so we talk about contracts and we have specifications and of course if you remember",
    "start": "474900",
    "end": "480479"
  },
  {
    "text": "we went through that awkward transition from soap to rests in you know 2008 here",
    "start": "480479",
    "end": "485940"
  },
  {
    "text": "a time frame we really didn't have any specification language for rust there was a lot of backlash against whistle",
    "start": "485940",
    "end": "492780"
  },
  {
    "text": "for soap it was very verbose and so we went for a few years without having some standard like what Swagger ultimately",
    "start": "492780",
    "end": "499919"
  },
  {
    "text": "became so we had some room in my career that I was part of where we experimented",
    "start": "499919",
    "end": "505620"
  },
  {
    "text": "without these contracts but we obviously still had an interface and we would document that maybe on Wookies or",
    "start": "505620",
    "end": "511080"
  },
  {
    "text": "whatever that might be to try to give consumers an indication of how to use the API we could get so far with that it",
    "start": "511080",
    "end": "518099"
  },
  {
    "text": "still had flaws in it and so we filled that hole appropriately with tools like Swagger open API there were other",
    "start": "518099",
    "end": "525120"
  },
  {
    "text": "Alternatives that allowed us to communicate with consumers in a way that",
    "start": "525120",
    "end": "530940"
  },
  {
    "text": "allowed us more easily to build sdks that allowed for generic tools like the the graphical UI that you might see in a",
    "start": "530940",
    "end": "537540"
  },
  {
    "text": "web page it described a documentation around it for Swagger Docs but it's never Rich enough to really Define the",
    "start": "537540",
    "end": "543839"
  },
  {
    "text": "surface area of the API and I think that is particularly true when you have a complex API like mounty bank with an",
    "start": "543839",
    "end": "550260"
  },
  {
    "text": "embedded programmable interface inside of it because now you're talking about what is just a string on the Json",
    "start": "550260",
    "end": "555600"
  },
  {
    "text": "interface but inside that string might be a function declaration that also has to have a specific interface for it to",
    "start": "555600",
    "end": "561779"
  },
  {
    "text": "work inside the JavaScript context that it's executed inside of and that's an example but I think it's more easily",
    "start": "561779",
    "end": "567660"
  },
  {
    "text": "spotted example than what tends to happen even when you don't have a programmable interface because you still have edge cases of your API that are",
    "start": "567660",
    "end": "575220"
  },
  {
    "text": "always difficult to demonstrate to the contract and this idea of promises came",
    "start": "575220",
    "end": "580680"
  },
  {
    "text": "out of the configuration management World Mark Burgess who helped create CF engine one of the early progenitors to",
    "start": "580680",
    "end": "586680"
  },
  {
    "text": "puppet and chef and the modern infrastructure as code practices to find a mathematical theory around promises",
    "start": "586680",
    "end": "592560"
  },
  {
    "text": "that allowed him to build CF engine but it was really also a recognition that promises can be broken in the real world",
    "start": "592560",
    "end": "598200"
  },
  {
    "text": "when I promise you something what I'm really signaling is I'm going to make a best faith effort to fulfill that",
    "start": "598200",
    "end": "604500"
  },
  {
    "text": "promise on your behalf and I think that's a good lens to think about apis because under load under exceptional",
    "start": "604500",
    "end": "611459"
  },
  {
    "text": "circumstances they will respond in ways that the producers could not always predict and if we walk into it with this",
    "start": "611459",
    "end": "619200"
  },
  {
    "text": "mentality this architectural Ironclad mentality that the contract directly specifies with the API is how it's going",
    "start": "619200",
    "end": "625860"
  },
  {
    "text": "to behave I think we're missing a lot of nuance it allows us to have richer conversations around API Evolution and",
    "start": "625860",
    "end": "632339"
  },
  {
    "text": "I'll go back you said there's a lot about communication and I think that's where you got into in your talk about",
    "start": "632339",
    "end": "637620"
  },
  {
    "text": "the evolution patterns and different ways to evolve an API you had criteria and communication seemed to be the focal",
    "start": "637620",
    "end": "643680"
  },
  {
    "text": "point of that and Architects love to discuss trade-offs what are the important trade-offs and evaluation criteria that we need to consider when",
    "start": "643680",
    "end": "650399"
  },
  {
    "text": "we're looking at these various Evolution patterns there's kind of an implicit one and I didn't talk about it much because",
    "start": "650399",
    "end": "657060"
  },
  {
    "text": "it's the one that everybody's familiar with and that is implementation complexity a lot of times we version",
    "start": "657060",
    "end": "662459"
  },
  {
    "text": "apis because we want to minimize implementation complexity and the new",
    "start": "662459",
    "end": "668100"
  },
  {
    "text": "version the V2 allows us to delete a bunch of now dead code so that we as the maintainers of it don't have to look at",
    "start": "668100",
    "end": "674640"
  },
  {
    "text": "it what I tried to do was look at criteria from a consumer's perspective and the consumers don't care what the",
    "start": "674640",
    "end": "681180"
  },
  {
    "text": "code inside your API looks like I listed three dimensions the first one I called obviousness a lot of times goes by the",
    "start": "681180",
    "end": "688140"
  },
  {
    "text": "name and the industry of the principle of least surprise does the API and the",
    "start": "688140",
    "end": "693660"
  },
  {
    "text": "naming behind the fields and the nesting structure and the pinpoint layout does",
    "start": "693660",
    "end": "700500"
  },
  {
    "text": "it match your intuitive sense of how an API should respond because that eases",
    "start": "700500",
    "end": "705540"
  },
  {
    "text": "the adoption curve that makes it much easier to embrace and you always have the documentation as a backup but if it",
    "start": "705540",
    "end": "711779"
  },
  {
    "text": "sort of does what you expect because we as developers or Tinkers we're experimenters that's how we learn how to",
    "start": "711779",
    "end": "716940"
  },
  {
    "text": "work through an API obviousness goes a long way towards helping us adopt it cleanly I listed a second one that I",
    "start": "716940",
    "end": "724260"
  },
  {
    "text": "called Elegance which I really just a rough proxy for usability and the",
    "start": "724260",
    "end": "729540"
  },
  {
    "text": "learning curve of the API consistency of language consistency of style the surface area of the API you know I think",
    "start": "729540",
    "end": "737459"
  },
  {
    "text": "a simple way to avoid versioning for example is to leave in point one and",
    "start": "737459",
    "end": "743459"
  },
  {
    "text": "just call it in 0.1 V2 and have a separate endpoint that allows you to not",
    "start": "743459",
    "end": "749160"
  },
  {
    "text": "version and it's a legitimate technique but it decreases Elegance because now you have two endpoints that the consumer",
    "start": "749160",
    "end": "755100"
  },
  {
    "text": "has to keep in mind and have some understanding of the evolution of the API over time as an example and then the",
    "start": "755100",
    "end": "761459"
  },
  {
    "text": "third one is stability which is how much effort a consumer has to put in to",
    "start": "761459",
    "end": "767579"
  },
  {
    "text": "keeping up with changes of the API over time and of course versioning it's stable within the version but oftentimes",
    "start": "767579",
    "end": "774540"
  },
  {
    "text": "requires effort to move between versions some of the techniques that I talked about in the talk meet stability to vary",
    "start": "774540",
    "end": "780720"
  },
  {
    "text": "varying degrees sometimes it can't be a perfect guarantee of stability this is where the promise notion I think kicks",
    "start": "780720",
    "end": "787500"
  },
  {
    "text": "in but can make a best faith effort of providing a stable upgrade path to Consumers so I think that gets us to the",
    "start": "787500",
    "end": "793980"
  },
  {
    "text": "meat of your talk was about these Evolution patterns I don't know if we'll get through all of them but we'll step through as many as we can in our time",
    "start": "793980",
    "end": "799440"
  },
  {
    "text": "the first was change by addition which the intro I said is considered the easy and safe thing to do but can you give us",
    "start": "799440",
    "end": "805980"
  },
  {
    "text": "an example and talk about the pros and cons of when you would or wouldn't want to change by addition yeah I mean the",
    "start": "805980",
    "end": "811680"
  },
  {
    "text": "simplest example is just adding a new field it's simple writing a new object structure into your API and that it",
    "start": "811680",
    "end": "817800"
  },
  {
    "text": "should not be a breaking change for consumers of course there are exceptions where it will be if they have strict",
    "start": "817800",
    "end": "823680"
  },
  {
    "text": "deserialization turned on and configure their deserializer to throw errors if it sees a field it doesn't recognize but I",
    "start": "823680",
    "end": "830459"
  },
  {
    "text": "think in general we have to abide by what's known as postel's law which says that you should be strict in which you",
    "start": "830459",
    "end": "836820"
  },
  {
    "text": "send out and liberal than what you accept and that was a principle that helped scale the internet pastel was",
    "start": "836820",
    "end": "842820"
  },
  {
    "text": "involved in a lot of the protocols like TCP that helped to scale the internet I think it's a good principle to think in",
    "start": "842820",
    "end": "848160"
  },
  {
    "text": "terms of API design as well or you know having a tolerant reader a more controversial example might be the",
    "start": "848160",
    "end": "854160"
  },
  {
    "text": "example I just gave which is if we have endpoint one and I decided that I got",
    "start": "854160",
    "end": "859440"
  },
  {
    "text": "something wrong about them point one about the behavior but I don't want to create a new version I just create endpoint one V2 as a separate endpoint",
    "start": "859440",
    "end": "865920"
  },
  {
    "text": "and so that's a new change it's a change by addition but it's an inelegant one because it means now consumers have to",
    "start": "865920",
    "end": "871860"
  },
  {
    "text": "understand the Nuance between these two endpoints so it increases the surface area for the same capability",
    "start": "871860",
    "end": "877139"
  },
  {
    "text": "fundamentally of the API yeah I can see that get products and get products V2 and returns a different type and then",
    "start": "877139",
    "end": "882959"
  },
  {
    "text": "what do you do with the results if you want to drill into it and that can quickly become a spaghetti pile of mess",
    "start": "882959",
    "end": "888060"
  },
  {
    "text": "the next one was multi-typing and what does that look like in an API yeah so I",
    "start": "888060",
    "end": "893579"
  },
  {
    "text": "did this one time in montebank and I regretted it because I don't think it's a particularly obvious or elegant",
    "start": "893579",
    "end": "899160"
  },
  {
    "text": "solution but I had added a field that allows you to specify some degree of",
    "start": "899160",
    "end": "905220"
  },
  {
    "text": "latency in the response from the virtual service and just a number of milliseconds that you wait and then",
    "start": "905220",
    "end": "911040"
  },
  {
    "text": "somebody asked to be able to make the number of milliseconds Dynamic and so I mentioned in passing this programmable",
    "start": "911040",
    "end": "917940"
  },
  {
    "text": "embedded API inside the rest API there's a way of passing a JavaScript function another context so I decided that was a",
    "start": "917940",
    "end": "925260"
  },
  {
    "text": "solution that sort of fit within the spirit of Mount ebank but because I didn't want to have you know the get products and get products V2 in points",
    "start": "925260",
    "end": "932040"
  },
  {
    "text": "so I didn't want to have like a weight behavior is what it's called a weight Dynamic Behavior at the time I just",
    "start": "932040",
    "end": "938459"
  },
  {
    "text": "overloaded the type of the weight Behavior so if you pass a number interpret it as milliseconds if you pass",
    "start": "938459",
    "end": "944160"
  },
  {
    "text": "something that can't be interpreted as a number it expects it to be this JavaScript function that will help put",
    "start": "944160",
    "end": "949440"
  },
  {
    "text": "the number of milliseconds to weight and that works without having to add a new field but I think it's a clumsy approach",
    "start": "949440",
    "end": "956399"
  },
  {
    "text": "in retrospect because it you know makes building a client SDK harder at kind of an unexpected behavior of the API so in",
    "start": "956399",
    "end": "964860"
  },
  {
    "text": "retrospect I think I would have gone with a less elegant solution that sort of increased the surface area of the API",
    "start": "964860",
    "end": "970380"
  },
  {
    "text": "to just make it more obvious to Consumers yeah I think that the idea of having an overload makes sense when it's",
    "start": "970380",
    "end": "976680"
  },
  {
    "text": "inside your code like I write C sharp mostly and I can overload a function with different parameters and specify",
    "start": "976680",
    "end": "982380"
  },
  {
    "text": "defaults and that's intuitively easy to tell when it's inside your code when you're getting to an API surface that",
    "start": "982380",
    "end": "988079"
  },
  {
    "text": "raises a level of complexity because of how we're communicating those changes it's not as obvious you don't necessarily know what language is going",
    "start": "988079",
    "end": "995220"
  },
  {
    "text": "to be calling into your service and what they're able to do yeah that's exactly right and that's why I mentioned it in passing because I did do it I was one of",
    "start": "995220",
    "end": "1002600"
  },
  {
    "text": "the very first changes I made the money bank but regretted it and I don't think it's a robust strategy moving forward yeah it's also a case of if you make all",
    "start": "1002600",
    "end": "1010160"
  },
  {
    "text": "the decisions based on the best information you have at that point in time and the 500 milliseconds sounded like a good option but quickly ran into",
    "start": "1010160",
    "end": "1016279"
  },
  {
    "text": "limitations I think Bill can relate to that I know I've run into the next one myself and that's up casting so take a",
    "start": "1016279",
    "end": "1022339"
  },
  {
    "text": "single string and oh I actually want to handle an array of strings how does that look in an API and do you have any",
    "start": "1022339",
    "end": "1027798"
  },
  {
    "text": "advice on how to do that effectively yeah upcasting is probably my favorite technique as an alternative to",
    "start": "1027799",
    "end": "1034040"
  },
  {
    "text": "versioning so the idea the name of upcasting is really this idea of taking",
    "start": "1034040",
    "end": "1039798"
  },
  {
    "text": "something that looks like an old request and transforming it to the new interface that the code expects and did something",
    "start": "1039799",
    "end": "1046640"
  },
  {
    "text": "very similar to what you just described had something that was a single string",
    "start": "1046640",
    "end": "1051740"
  },
  {
    "text": "it was this notion that I could shell out to a program that could augment the response at the virtual service returns",
    "start": "1051740",
    "end": "1058460"
  },
  {
    "text": "but quickly realized that that needed to be an array because people wanted to have a pipeline of middleware that other",
    "start": "1058460",
    "end": "1065419"
  },
  {
    "text": "tools supported so they could have multiple programs in that list and the way that I went about that in Mountain",
    "start": "1065419",
    "end": "1071419"
  },
  {
    "text": "Bank was I changed the interface so if you go to the published interface on the documentation site it would list the",
    "start": "1071419",
    "end": "1076880"
  },
  {
    "text": "array that was the only thing that was documented because this was the request Quest processing pipeline every request",
    "start": "1076880",
    "end": "1083780"
  },
  {
    "text": "came through the same code path so I was able to just insert one spot in that code path for all requests that said",
    "start": "1083780",
    "end": "1090140"
  },
  {
    "text": "check if we need to do any upcasting and what it would do is it would go to that field and say hey it's the type of",
    "start": "1090140",
    "end": "1095600"
  },
  {
    "text": "string if it is then just wrap an array around that string and so the rest of",
    "start": "1095600",
    "end": "1100760"
  },
  {
    "text": "the code only had to care about the new interface and so that made the implementation complexity it reduced",
    "start": "1100760",
    "end": "1107419"
  },
  {
    "text": "what you know having to scatter a lot of this logic all throughout the code it was able to centralize it in one spot it",
    "start": "1107419",
    "end": "1113480"
  },
  {
    "text": "also is really effective because you can Nest up casts in fact this happened in the example that we're talking about",
    "start": "1113480",
    "end": "1119360"
  },
  {
    "text": "where it went from a string to an array and then you know without getting in too much detail it actually needed to turn",
    "start": "1119360",
    "end": "1126020"
  },
  {
    "text": "back to a string but I needed to put an array at the outer level and so I had to then have a second up cast that just",
    "start": "1126020",
    "end": "1132559"
  },
  {
    "text": "said hey are you know is this an array and turn it back to a string and is this outer thing an array or an object and",
    "start": "1132559",
    "end": "1138260"
  },
  {
    "text": "make sure it's the right type and go through the transformation to to fix it if it's not but again it's very simple",
    "start": "1138260",
    "end": "1143299"
  },
  {
    "text": "and very deterministic because all requests in the pipeline go through the same code passes it'll centralize the",
    "start": "1143299",
    "end": "1148760"
  },
  {
    "text": "logic and as long as you execute the upcasts in order in chronological order of when you made those changes what",
    "start": "1148760",
    "end": "1154940"
  },
  {
    "text": "would otherwise be versions then it's a deterministic output and you're accepting basically anybody who has any",
    "start": "1154940",
    "end": "1161000"
  },
  {
    "text": "previous version of your API it will still work even if it doesn't match what's documented as a published",
    "start": "1161000",
    "end": "1167059"
  },
  {
    "text": "interface if it matched what used to be documented the code will transform it to the current contract itself and so I",
    "start": "1167059",
    "end": "1173840"
  },
  {
    "text": "think that's a really powerful technique that balances those concerns that we talked about around obviousness and",
    "start": "1173840",
    "end": "1179780"
  },
  {
    "text": "elegance and stability it's a very stable approach there still are edge cases where you can break a consumer if",
    "start": "1179780",
    "end": "1186440"
  },
  {
    "text": "they're then retrieving the representation of this resource that has",
    "start": "1186440",
    "end": "1191600"
  },
  {
    "text": "had its contract transformed to the upcast and that breaks some client code that they have you can still imagine scenarios where that could happen but",
    "start": "1191600",
    "end": "1198559"
  },
  {
    "text": "it's quite stable and very elegant because it requires no additional work for the consumer to consume it yeah I",
    "start": "1198559",
    "end": "1205700"
  },
  {
    "text": "think that's a key point that you're trying to get to is minimizing the impact to the consumers so having a",
    "start": "1205700",
    "end": "1211400"
  },
  {
    "text": "version pushes the cost to them for this breaking change but here you're saying it is a breaking change but you're",
    "start": "1211400",
    "end": "1217640"
  },
  {
    "text": "accepting the cost as a producer of the API yeah and what I like so much about upcasting is that accepting the cost is",
    "start": "1217640",
    "end": "1225320"
  },
  {
    "text": "centralized and easy to manage and so whereas every consumer who used that",
    "start": "1225320",
    "end": "1231080"
  },
  {
    "text": "field would have had to make that change with a new version only me as the producer has to make this change with an",
    "start": "1231080",
    "end": "1237679"
  },
  {
    "text": "upcast and I can centralize it and it's not a lot of change and I have all of the context around why the change",
    "start": "1237679",
    "end": "1244039"
  },
  {
    "text": "happened because I'm the producer of the API so I can manage it in probably a safer way than a lot of consumers I know",
    "start": "1244039",
    "end": "1250700"
  },
  {
    "text": "where a lot of the minefields that you might step on are during the transformation process itself yeah I",
    "start": "1250700",
    "end": "1255980"
  },
  {
    "text": "like the idea of having these versions you talk about the versioning increasing the surfaces area of the API it's also a",
    "start": "1255980",
    "end": "1263179"
  },
  {
    "text": "matter of increasing the surface area of the code that you're maintaining and here by implementing that one upcast it's in one place and it's very clear as",
    "start": "1263179",
    "end": "1270679"
  },
  {
    "text": "opposed to now I've got the two endpoints I've got double the code to maintain and how do I support that going forward you almost effectively",
    "start": "1270679",
    "end": "1276679"
  },
  {
    "text": "deprecated the old one by assuming all the functionality in the new One automatically yeah so I think it's a",
    "start": "1276679",
    "end": "1282679"
  },
  {
    "text": "clean technique because what you document as your published interface or contract is exactly what you would have",
    "start": "1282679",
    "end": "1288740"
  },
  {
    "text": "otherwise done with a new version that's represents the new interface and the transformation code itself is very easy",
    "start": "1288740",
    "end": "1295700"
  },
  {
    "text": "to manage with an upcast in my experience at least with the upcast I've done to date and even when it's a",
    "start": "1295700",
    "end": "1301340"
  },
  {
    "text": "complicated transformation well that same transformation you would be asking your consumers to do for you to release",
    "start": "1301340",
    "end": "1307039"
  },
  {
    "text": "a new version and like I said this specifically you change the published specification so you said I accept an",
    "start": "1307039",
    "end": "1314059"
  },
  {
    "text": "array but if someone still sent you a single string which no longer abides by your published contract you're like",
    "start": "1314059",
    "end": "1320480"
  },
  {
    "text": "that's still good and so it's no impact to them but how do you resolve that discrepancy of here's what I say works",
    "start": "1320480",
    "end": "1326840"
  },
  {
    "text": "but that's not just what I do it's like an undocumented feature that's where you",
    "start": "1326840",
    "end": "1331940"
  },
  {
    "text": "run some risk because now this undocumented feature in fact a subsequent example that hopefully we'll",
    "start": "1331940",
    "end": "1336980"
  },
  {
    "text": "get to tripped over this those undocumented features can cause books so you have to be thoughtful about that you",
    "start": "1336980",
    "end": "1343700"
  },
  {
    "text": "have to be careful but I think it's part of the trade-offs right as we talked about architectural trade-offs and this",
    "start": "1343700",
    "end": "1348799"
  },
  {
    "text": "is allowing us to have a clean interface that represents the contract we want without passing complexity to the",
    "start": "1348799",
    "end": "1355400"
  },
  {
    "text": "consumers to migrate from one version to the next so it reduces the friction of me change in the interface because I",
    "start": "1355400",
    "end": "1360799"
  },
  {
    "text": "have to worry less about the cost to the consumers with it while maintaining the clean interface that I want as long as I",
    "start": "1360799",
    "end": "1367400"
  },
  {
    "text": "don't run into too much risk of these hidden Transformations causing bugs and",
    "start": "1367400",
    "end": "1372799"
  },
  {
    "text": "then the case that we just talked about where it was simple type changes I feel really confident that those don't cause",
    "start": "1372799",
    "end": "1377960"
  },
  {
    "text": "bugs the only bugs would be people around tripping the request and then getting the subsequent resource",
    "start": "1377960",
    "end": "1383659"
  },
  {
    "text": "definition back into their code and doing some additional Transformations on the client side so there's broader ecosystem bugs that could happen but",
    "start": "1383659",
    "end": "1390260"
  },
  {
    "text": "then it's the same cost that the consumer would have had to do if I had released a new version so it's not making their life any worse than a new",
    "start": "1390260",
    "end": "1396440"
  },
  {
    "text": "version would and then you said that you just apply these in chronological order so it's almost like a history do you",
    "start": "1396440",
    "end": "1403460"
  },
  {
    "text": "have comments in there that say Hey this was version zero or version one then version two and you can see the history of I had to do this and then I had to do",
    "start": "1403460",
    "end": "1410059"
  },
  {
    "text": "that and then I had to do that and so is your code self-documenting just for your benefit of oh yeah I remember that",
    "start": "1410059",
    "end": "1415220"
  },
  {
    "text": "decision that I had to make and this is how I solved it close so I have a module called compatibility and just in one",
    "start": "1415220",
    "end": "1422419"
  },
  {
    "text": "spot in the request processing pipeline I say compatibility to webcasts and I pass in the request and then that upcast",
    "start": "1422419",
    "end": "1428780"
  },
  {
    "text": "function calls a bunch of sub functions every one of those sub functions represents effectively a version a point",
    "start": "1428780",
    "end": "1435440"
  },
  {
    "text": "in time and so the first one might have been changed the string to an array and the second one might have been changes outer structure into an object whatever",
    "start": "1435440",
    "end": "1442220"
  },
  {
    "text": "it is but each of those are named appropriately and the transformation is obvious and then the documentation the",
    "start": "1442220",
    "end": "1449179"
  },
  {
    "text": "comments and so forth around the code give you the context and I just have the advantage of having it being a single",
    "start": "1449179",
    "end": "1454640"
  },
  {
    "text": "maintainer the advantage of disadvantages other disadvantages of being a single maintainer but the advantage that I know all the history so",
    "start": "1454640",
    "end": "1461000"
  },
  {
    "text": "it's well contained and very easy to follow so that's a lot of talk about upcasting what's the opposite of that",
    "start": "1461000",
    "end": "1467539"
  },
  {
    "text": "downcasting yeah down casting is a little bit harder to think through so this is taking something that looks like",
    "start": "1467539",
    "end": "1474200"
  },
  {
    "text": "the new interface and making it look like the old interface and I had to do",
    "start": "1474200",
    "end": "1479360"
  },
  {
    "text": "this at a couple points and mounted brings history and the implementation Logic for this is more complex the",
    "start": "1479360",
    "end": "1486559"
  },
  {
    "text": "reason I had to do this is because of that embedded programmable API that I mentioned so the auto rest API was the",
    "start": "1486559",
    "end": "1492620"
  },
  {
    "text": "same it just accepted a string the string representing the JavaScript function that ran in a certain context and over time as often happens we with",
    "start": "1492620",
    "end": "1500960"
  },
  {
    "text": "functions where people are adding features over time as it just took on more and more parameters and some of the parameters actually should be deprecated",
    "start": "1500960",
    "end": "1507320"
  },
  {
    "text": "so it's starting to look inelegant the usual solution for this and the refactoring world is you introduce a",
    "start": "1507320",
    "end": "1513380"
  },
  {
    "text": "parameter object like a config parameter single parameter that has properties that represent all the historical",
    "start": "1513380",
    "end": "1519799"
  },
  {
    "text": "parameters that were passed to the function so I did that the challenge is I needed the code to work for the",
    "start": "1519799",
    "end": "1527720"
  },
  {
    "text": "consumers who passed in both the new interface and the old interface and so the only thing that's documented is the",
    "start": "1527720",
    "end": "1533480"
  },
  {
    "text": "new interface it just takes a single parameter object but what the code does on the downcast is then it secretly",
    "start": "1533480",
    "end": "1539600"
  },
  {
    "text": "passes the second third fourth and fifth parameters as well and it secretly adds properties to the first parameter that's",
    "start": "1539600",
    "end": "1546200"
  },
  {
    "text": "now the parameter object so that it had all of the properties of what was the previous first parameter as well so",
    "start": "1546200",
    "end": "1552500"
  },
  {
    "text": "anybody who is passing the old interface the code that has been changed so that",
    "start": "1552500",
    "end": "1557840"
  },
  {
    "text": "it will still pass what effectively looks like the same information you know especially with if you consider some",
    "start": "1557840",
    "end": "1563120"
  },
  {
    "text": "duct piping on that first parameter because I'll have more than it used to have and for people who are passing the new interface where they just have a",
    "start": "1563120",
    "end": "1569360"
  },
  {
    "text": "single parameter object everything works great if they want to inspect the function definition they can tap into",
    "start": "1569360",
    "end": "1574580"
  },
  {
    "text": "those other parameters but they have no need to that's just there for backwards compatibility purposes so that code had",
    "start": "1574580",
    "end": "1580520"
  },
  {
    "text": "to be sprinkled I couldn't centralize that code I could centralize the transformation to an extent but I had to",
    "start": "1580520",
    "end": "1586580"
  },
  {
    "text": "call the downcast everywhere it was needed there wasn't a single point in the request processing pipeline where I",
    "start": "1586580",
    "end": "1592039"
  },
  {
    "text": "can do that so it's a little bit harder to manage down casting but that again is your problem that you as a maintainer",
    "start": "1592039",
    "end": "1597860"
  },
  {
    "text": "have to absorb versus having to figure out for your consumers do this here and",
    "start": "1597860",
    "end": "1603260"
  },
  {
    "text": "do that there and make all these little selective changes to the consumption of the API you just accept it it's like",
    "start": "1603260",
    "end": "1609740"
  },
  {
    "text": "this isn't good for them does it make it easier for them to understand because you haven't added the complexity to the",
    "start": "1609740",
    "end": "1615440"
  },
  {
    "text": "API surface yeah and this one would have been awkward I think for some certain",
    "start": "1615440",
    "end": "1620600"
  },
  {
    "text": "API consumers to embrace the change because it's not directly visible from",
    "start": "1620600",
    "end": "1625760"
  },
  {
    "text": "the rest API contract it's an embedded API inside the rest API contract so I",
    "start": "1625760",
    "end": "1631220"
  },
  {
    "text": "was particularly concerned about how to roll this change out in a way that was",
    "start": "1631220",
    "end": "1636740"
  },
  {
    "text": "stable for consumers didn't cause a lot of friction or have them you know sort of scratch their head and having to pour",
    "start": "1636740",
    "end": "1642559"
  },
  {
    "text": "over documentation to understand the nature of the change I want it to be as seamless as possible for them while",
    "start": "1642559",
    "end": "1647659"
  },
  {
    "text": "giving everybody who's adopting the API for the first time or getting started with it what I think is a much cleaner",
    "start": "1647659",
    "end": "1652880"
  },
  {
    "text": "interface so I wanted to go back to you mentioned the hidden interfaces with another land mine to worry about is it",
    "start": "1652880",
    "end": "1660320"
  },
  {
    "text": "just a matter of you didn't provide documentation but you accept something and is that from laziness or is it",
    "start": "1660320",
    "end": "1665659"
  },
  {
    "text": "actually an intentional choice to say I'm not going to document this part of the API yeah it's intentional I mean I",
    "start": "1665659",
    "end": "1672200"
  },
  {
    "text": "certainly have examples of laziness too so I'm not trying to dismiss that as an approach but in the cases that I wanted",
    "start": "1672200",
    "end": "1678080"
  },
  {
    "text": "to at least call out what happened was I got something wrong to begin with and of",
    "start": "1678080",
    "end": "1683360"
  },
  {
    "text": "course when you get something wrong then inside the code base you just refactor it but when you get something wrong in a",
    "start": "1683360",
    "end": "1688760"
  },
  {
    "text": "way that is exposed to Consumers to which you don't control it's a public API it's harder to fix it this is",
    "start": "1688760",
    "end": "1695840"
  },
  {
    "text": "generally where versioning kicks in okay that allows me a path to fix it and then that's the consumer's problem to upgrade",
    "start": "1695840",
    "end": "1701440"
  },
  {
    "text": "I had an example where I mentioned that one of the bits of functionality at",
    "start": "1701440",
    "end": "1707179"
  },
  {
    "text": "Valley Bank was shelling out to another program to transform something about the response from this virtual service",
    "start": "1707179",
    "end": "1713440"
  },
  {
    "text": "originally I had passed these parameters as command line arguments and it turns",
    "start": "1713440",
    "end": "1720980"
  },
  {
    "text": "out that I just was not clever enough to figure out how to quote them for the shell escaping across all the different",
    "start": "1720980",
    "end": "1727940"
  },
  {
    "text": "shells primarily the windows ones are where a lot of the complexity kicks in especially the older cmd.exe is where",
    "start": "1727940",
    "end": "1734720"
  },
  {
    "text": "you get a lot of complexity around shell coding that isn't as portable to a lot of the post-exp space terminals so I got",
    "start": "1734720",
    "end": "1741140"
  },
  {
    "text": "it wrong and I spent probably a full day trying to fix it and I remember asking myself at one point why am I doing this",
    "start": "1741140",
    "end": "1747500"
  },
  {
    "text": "is this past the arguments as environment variables problem solved and eventually I did that and so I changed",
    "start": "1747500",
    "end": "1754279"
  },
  {
    "text": "the interface of this programmable interface to pass in environment variables instead of command line parameters because I couldn't figure out",
    "start": "1754279",
    "end": "1760279"
  },
  {
    "text": "how to pass in the command line variables the right way with the right shell escaping of quotes and to try to",
    "start": "1760279",
    "end": "1767779"
  },
  {
    "text": "strike a balance on stability and giving the new interface that I wanted I wrote it in such a way that manager Bank was",
    "start": "1767779",
    "end": "1774140"
  },
  {
    "text": "still passing the command line interfaces and if it didn't work because it broke something on a window shell",
    "start": "1774140",
    "end": "1779299"
  },
  {
    "text": "around shell escaping well it never worked so that's fine and if it used to work for you it should continue to work",
    "start": "1779299",
    "end": "1785120"
  },
  {
    "text": "for you everybody else just the new adopters just do the environment variables they get a much more scalable",
    "start": "1785120",
    "end": "1791059"
  },
  {
    "text": "solution but this is where those hidden Minds that we talked about can trip you up because it turns out that escaping",
    "start": "1791059",
    "end": "1797240"
  },
  {
    "text": "quotes on the shell wasn't the only problem it turns out that shells also have a limit of how many characters you",
    "start": "1797240",
    "end": "1803480"
  },
  {
    "text": "can pass to a command line program and again especially cmd.exe has the lowest",
    "start": "1803480",
    "end": "1809240"
  },
  {
    "text": "limit and so I had to end up truncating the amount of information passed in ways that actually could break previous",
    "start": "1809240",
    "end": "1815539"
  },
  {
    "text": "consumers just to get over that limitation and it was a really interesting exercise to go through",
    "start": "1815539",
    "end": "1821419"
  },
  {
    "text": "because I had to trade off what was the lesser of two evils should I cut a new version and force everybody to upgrade",
    "start": "1821419",
    "end": "1827059"
  },
  {
    "text": "when in fact I had no evidence that anybody was tripping over this bug you know if I truncated the number",
    "start": "1827059",
    "end": "1833179"
  },
  {
    "text": "characters into the shell I had no evidence that was breaking anybody and to this day I don't have any evidence that it did so I ended up making the",
    "start": "1833179",
    "end": "1839899"
  },
  {
    "text": "change where I hid the previous interface it's not in the documentation it still passed the command line parameters that shortened them in ways",
    "start": "1839899",
    "end": "1846620"
  },
  {
    "text": "that could have broken somebody that used to work in the past and no longer does and I left some notes in the",
    "start": "1846620",
    "end": "1851960"
  },
  {
    "text": "release notes they get pushed out with every release of mountie bank but I tried to make it instead of a sort of",
    "start": "1851960",
    "end": "1857059"
  },
  {
    "text": "pure architectural guarantee of correctness I put on my product manager hat and say as a user what's the lesser",
    "start": "1857059",
    "end": "1863600"
  },
  {
    "text": "of two evils if I run into this bug the path to resolution is pretty clear can I",
    "start": "1863600",
    "end": "1869480"
  },
  {
    "text": "give them as much direction as possible if that's something they're running into and the document the release notes and so forth and can I do this in a way that",
    "start": "1869480",
    "end": "1876559"
  },
  {
    "text": "hopefully impacts nobody but if it does in fact as few people as possible and it felt like that was a path with less",
    "start": "1876559",
    "end": "1882559"
  },
  {
    "text": "friction than releasing a new version that would have affected everybody in the upgrade path but that was a really",
    "start": "1882559",
    "end": "1887720"
  },
  {
    "text": "different way for me of thinking about API Evolution because I had to think about it more like a product manager than an architect I think aversioning is",
    "start": "1887720",
    "end": "1894440"
  },
  {
    "text": "generally an architectural concern but it's really part of your public interface that you release to users so it's also part of your product interface",
    "start": "1894440",
    "end": "1900799"
  },
  {
    "text": "and when you come at it with the product mentality and you think about how to minimize friction you have a more",
    "start": "1900799",
    "end": "1906080"
  },
  {
    "text": "nuanced understanding of the trade-offs and I certainly did in that case yeah I think that got to where I wanted to wrap",
    "start": "1906080",
    "end": "1911179"
  },
  {
    "text": "up with talking about how developers and Architects should think about API Evolution not just from the programming",
    "start": "1911179",
    "end": "1916460"
  },
  {
    "text": "problems that you have and I like that last example actually I want to go back to it because you had a bug and",
    "start": "1916460",
    "end": "1922039"
  },
  {
    "text": "sometimes when you have a coding bug you're like oh I can solve this inside this function and no one will know",
    "start": "1922039",
    "end": "1927140"
  },
  {
    "text": "anything about it but as long as you realize the bug is only a bug because of what's being passed in as input and the",
    "start": "1927140",
    "end": "1933440"
  },
  {
    "text": "fix is you have to change the input and that in this case changes the API tell me more about that product management",
    "start": "1933440",
    "end": "1939020"
  },
  {
    "text": "thinking of saying well we haven't seen any evidence that our customers are using this and we think it'll be a",
    "start": "1939020",
    "end": "1944840"
  },
  {
    "text": "minimal impact and will be acceptable impact for them yeah and there's a lot I mean this is where it's a judgment call",
    "start": "1944840",
    "end": "1951080"
  },
  {
    "text": "it always is anytime your managing products but if you never risk upsetting",
    "start": "1951080",
    "end": "1957020"
  },
  {
    "text": "some users with some feature changes as a product manager then your product is going to be stuck in stasis so you know",
    "start": "1957020",
    "end": "1963260"
  },
  {
    "text": "you have to evolve but you also know that you want to introduce as little friction as possible because in your",
    "start": "1963260",
    "end": "1968779"
  },
  {
    "text": "request for new users you don't want to lose the users you already have that's one of the difficult parts of product management and so in this case it felt",
    "start": "1968779",
    "end": "1976640"
  },
  {
    "text": "like the way to walk that tightrope was to take into consideration a few facts",
    "start": "1976640",
    "end": "1981799"
  },
  {
    "text": "the feature under consideration had not been out in the wild for very long before the bug was reported so it's not",
    "start": "1981799",
    "end": "1987980"
  },
  {
    "text": "like it had seen wide adoption yet the first change switching to environment",
    "start": "1987980",
    "end": "1993860"
  },
  {
    "text": "variables happened pretty quick so most people who had used it should be using the new interface and the problem was",
    "start": "1993860",
    "end": "2001720"
  },
  {
    "text": "some of those people were running into a bug because they passed large strings of",
    "start": "2001720",
    "end": "2006760"
  },
  {
    "text": "text to the command line they had no idea why this was breaking because it's just an environment variable they don't understand that it's also passing this",
    "start": "2006760",
    "end": "2012880"
  },
  {
    "text": "in command line that was more confusing to them than stripping that functionality out so I was breaking",
    "start": "2012880",
    "end": "2018760"
  },
  {
    "text": "people using the new interface I had no evidence that there was any adoption of the old interface because it had this",
    "start": "2018760",
    "end": "2025120"
  },
  {
    "text": "bug and so it was kind of a risk reward trade-off that said hey if this feels like the path of least friction for the",
    "start": "2025120",
    "end": "2030940"
  },
  {
    "text": "most people that leads to the cleanest outcome so let's go down that path and I haven't regretted it in that instance",
    "start": "2030940",
    "end": "2037000"
  },
  {
    "text": "but it's certainly something that I think requires a lot of nuance I'm remembering your talk you briefly mentioned that you are working on an",
    "start": "2037000",
    "end": "2043720"
  },
  {
    "text": "article for this that will be published coming soon is that still in the works that is still in the work so I had",
    "start": "2043720",
    "end": "2049540"
  },
  {
    "text": "started an article last year and I put it on Ice in this qcon talk that I gave in this podcast Thomas as a good nudge",
    "start": "2049540",
    "end": "2055300"
  },
  {
    "text": "I'm hoping over the winter break teeth that over the line and if I can then I've had a first pass review with Martin",
    "start": "2055300",
    "end": "2060460"
  },
  {
    "text": "Fowler who's posted some of my other work and I'm hoping that we can get it on his blog in the New Year all right",
    "start": "2060460",
    "end": "2066280"
  },
  {
    "text": "well hopefully people will be able to find that on is it Martin fowler.com that's it yeah the one and only all",
    "start": "2066280",
    "end": "2071320"
  },
  {
    "text": "right hopefully that'll be coming out soon early next year that's my hope yeah well I want to thank you again Brandon",
    "start": "2071320",
    "end": "2076720"
  },
  {
    "text": "Byers for joining me on another episode of the future podcast thank you so much Thomas for having me",
    "start": "2076720",
    "end": "2083040"
  },
  {
    "text": "[Music]",
    "start": "2092560",
    "end": "2102389"
  }
]