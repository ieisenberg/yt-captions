[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "[Music]",
    "start": "80",
    "end": "28129"
  },
  {
    "text": "there's so much to talk about uh I can't possibly fit everything into this one talk so uh uh this isn't even going to",
    "start": "29679",
    "end": "36760"
  },
  {
    "text": "be complete but it it'll give you a taste of what's coming uh so I should introduce myself uh I'm Dave Herman a",
    "start": "36760",
    "end": "43840"
  },
  {
    "start": "40000",
    "end": "57000"
  },
  {
    "text": "lot of my colleagues call me de Herman that's my GitHub ID my IRC nick uh my",
    "start": "43840",
    "end": "49000"
  },
  {
    "text": "Twitter ID is little calculus which is a long story you don't want to know um and I love JavaScript I've Loved",
    "start": "49000",
    "end": "56280"
  },
  {
    "text": "JavaScript for a long time even when I was a teenager in high school and was completely baffled by it uh there's",
    "start": "56280",
    "end": "62239"
  },
  {
    "start": "57000",
    "end": "117000"
  },
  {
    "text": "something addicting about it um and I've spent long enough with it that like Doug",
    "start": "62239",
    "end": "67880"
  },
  {
    "text": "I I know not just the good parts but all of its warts um and I can see the little",
    "start": "67880",
    "end": "73680"
  },
  {
    "text": "uh pearl of a language or Gem of a language inside that's that's struggling to get out so I love JavaScript for the",
    "start": "73680",
    "end": "79560"
  },
  {
    "text": "language that it almost is um so that's why uh part of my job is uh to work on",
    "start": "79560",
    "end": "87320"
  },
  {
    "text": "the ecma tc39 which is the exciting name of the uh standards body that is working",
    "start": "87320",
    "end": "93840"
  },
  {
    "text": "on the next version of JavaScript working on the future of JavaScript uh and I represent Mozilla on that",
    "start": "93840",
    "end": "100960"
  },
  {
    "text": "committee um so uh partly I'm here to talk about new powers that we're",
    "start": "100960",
    "end": "107520"
  },
  {
    "text": "bringing to JavaScript uh there's a there's a couple themes there's there's so many features you have to start",
    "start": "107520",
    "end": "112640"
  },
  {
    "text": "grouping them in uh thematically so the first set of features I'll talk about are really about doing things with JavaScript that really you just can't do",
    "start": "112640",
    "end": "120240"
  },
  {
    "start": "117000",
    "end": "273000"
  },
  {
    "text": "or maybe you could do it but you couldn't possibly do it efficiently enough to to work in practice um and one",
    "start": "120240",
    "end": "125640"
  },
  {
    "text": "of those things is binary data uh there are so many things that you need to do",
    "start": "125640",
    "end": "131280"
  },
  {
    "text": "uh in a a full featured platform that involve reading binary files or",
    "start": "131280",
    "end": "136480"
  },
  {
    "text": "communicating with uh binary Network protocols and JavaScript really doesn't have any good data structures for",
    "start": "136480",
    "end": "142360"
  },
  {
    "text": "handling that so uh there was there was some work by the kronis group on a uh",
    "start": "142360",
    "end": "148040"
  },
  {
    "text": "typed array spec and I've become uh co-editor of the typed array spec but",
    "start": "148040",
    "end": "153080"
  },
  {
    "text": "we're working on sort of uh expanding out the kind of uh convenience and and power of what you can even do with typed",
    "start": "153080",
    "end": "160159"
  },
  {
    "text": "arrays um so the kinds of things that you can do with our new uh binary data",
    "start": "160159",
    "end": "165360"
  },
  {
    "text": "spec are you can Define new binary data types that look a lot like structs from",
    "start": "165360",
    "end": "170400"
  },
  {
    "text": "languages like C except that this isn't a static type system here what I'm doing is at runtime I'm constructing an object",
    "start": "170400",
    "end": "177480"
  },
  {
    "text": "that's sort of like a data descriptor so this point 2D here is actually a",
    "start": "177480",
    "end": "182560"
  },
  {
    "text": "JavaScript object it's a JavaScript object that describes the structure of binary data so in this case it's a",
    "start": "182560",
    "end": "188440"
  },
  {
    "text": "struct with two Fields called X and Y both of which are going to be 32-bit unsigned",
    "start": "188440",
    "end": "193760"
  },
  {
    "text": "integers um here's a a color uh type that uh is a triple of unsigned",
    "start": "193760",
    "end": "202560"
  },
  {
    "text": "byes so what can you do with that well you can combine those into more struct types you can you can mix and match",
    "start": "202560",
    "end": "208640"
  },
  {
    "text": "these you can Define your own uh data types that now describe the structure of compact binary data um so I",
    "start": "208640",
    "end": "216519"
  },
  {
    "text": "can describe a pixel as a pair of a point and a color and I can describe a triangle as uh a three element array of",
    "start": "216519",
    "end": "223680"
  },
  {
    "text": "pixels and I can use that triangle data structure to to create uh or sorry that",
    "start": "223680",
    "end": "231640"
  },
  {
    "text": "that triangle type to create a new uh triangle struct and the cool thing about this is that actually in memory this is",
    "start": "231640",
    "end": "237920"
  },
  {
    "text": "going to be represented compactly so all that data is going to be laid out in a very compact manner so even if you're",
    "start": "237920",
    "end": "243599"
  },
  {
    "text": "not doing any kind of IO whatsoever the binary data spec lets you describe uh uh",
    "start": "243599",
    "end": "249439"
  },
  {
    "text": "data structures in JavaScript where you actually have control over the exact layout in memory so that could be nice",
    "start": "249439",
    "end": "255200"
  },
  {
    "text": "for efficiency that could be useful for like cryptographic uh protocols or algorithms that uh operate over um a lot",
    "start": "255200",
    "end": "262960"
  },
  {
    "text": "of uh data they're very data intensive intensive and you'd like to have data locality but it can also be then used",
    "start": "262960",
    "end": "269199"
  },
  {
    "text": "for things things like files and network protocols okay so uh another power that",
    "start": "269199",
    "end": "276360"
  },
  {
    "start": "273000",
    "end": "629000"
  },
  {
    "text": "you really don't have in JavaScript right now is the ability to create private properties of uh of an object",
    "start": "276360",
    "end": "284680"
  },
  {
    "text": "and thanks to uh Doug crockford we all know that there is at least a design",
    "start": "284680",
    "end": "290160"
  },
  {
    "text": "pattern that we can use this is sometimes known as the objects as closures design pattern and Doug really taught the world how to do this so this",
    "start": "290160",
    "end": "297360"
  },
  {
    "text": "actually comes straight off of his uh tutoial we have a container class here where uh we want to have a secret",
    "start": "297360",
    "end": "304440"
  },
  {
    "text": "property that's not actually uh accessible to anyone outside but maybe we want to have a method that can",
    "start": "304440",
    "end": "310600"
  },
  {
    "text": "actually refer to that and the way that we do that is we create the method inside the lexical scope of that",
    "start": "310600",
    "end": "318319"
  },
  {
    "text": "variable so that works but there's a a real downside to this which is that every single time you create an instance",
    "start": "318319",
    "end": "324919"
  },
  {
    "text": "of container it's going to get a fresh closure a new allocation of a new function",
    "start": "324919",
    "end": "330319"
  },
  {
    "text": "there's no way if we wanted to have one single definition of this service method to put that on the Prototype if we try",
    "start": "330319",
    "end": "337039"
  },
  {
    "text": "to put that on the Prototype it suddenly no longer has access to secret so it's kind of a a rough Choice you're stuck",
    "start": "337039",
    "end": "343199"
  },
  {
    "text": "with in JavaScript if I if I don't care about having private properties I can put things on prototypes I get nice",
    "start": "343199",
    "end": "348479"
  },
  {
    "text": "sharing a lot of the JavaScript engines heavily optimize uh prototype lookup um",
    "start": "348479",
    "end": "355440"
  },
  {
    "text": "in fact all of them heavily optimize prototype lookup so you get really good performance you get uh really good",
    "start": "355440",
    "end": "360720"
  },
  {
    "text": "memory usage but you don't have private uh properties um so in uh one of the",
    "start": "360720",
    "end": "369160"
  },
  {
    "text": "proposals for the next version of JavaScript we've introduced the the notion of a private name or a private",
    "start": "369160",
    "end": "374960"
  },
  {
    "text": "key so here at the top I can create this key data structure which is a special",
    "start": "374960",
    "end": "381680"
  },
  {
    "text": "property name that's not a string so it's not forgeable you can't guess it so somebody else who doesn't have access to",
    "start": "381680",
    "end": "387560"
  },
  {
    "text": "this key has no way of knowing what the key is you can decide who to give it to if you want to but if you want to keep",
    "start": "387560",
    "end": "393960"
  },
  {
    "text": "it private you just keep it to yourself so now so now what you do is uh simply",
    "start": "393960",
    "end": "400240"
  },
  {
    "text": "assign to uh uh the property based on that key whatever you want and now you",
    "start": "400240",
    "end": "407080"
  },
  {
    "text": "can uh happily put your methods inside the Prototype so uh if there's anybody",
    "start": "407080",
    "end": "414120"
  },
  {
    "text": "here who's familiar with some of the security patterns that have been catching on on the web like object capabilities this actually is very",
    "start": "414120",
    "end": "420599"
  },
  {
    "text": "similar to that but it's not just about security I found that when I program the more I leave things uh just sort of out",
    "start": "420599",
    "end": "428520"
  },
  {
    "text": "there in the open the more I accidentally trip over them so sometimes it's nice to just hide something and",
    "start": "428520",
    "end": "435199"
  },
  {
    "text": "that way I know that somebody who's not supposed to be even accidentally using it isn't going to trip over",
    "start": "435199",
    "end": "442080"
  },
  {
    "text": "it uh there's some new uh data structures that we're introducing so the weak map actually this one I believe is",
    "start": "442080",
    "end": "449039"
  },
  {
    "text": "already yeah it's it's already shipping in Firefox I think it's in progress in",
    "start": "449039",
    "end": "455160"
  },
  {
    "text": "Chrome um so weak map gives you a uh kind of hash table where the keys can",
    "start": "455160",
    "end": "461440"
  },
  {
    "text": "actually be objects they're keyed on the identity of the objects but uh but those",
    "start": "461440",
    "end": "467360"
  },
  {
    "text": "keys are held weekly so you can do things like uh I just concocted a simple",
    "start": "467360",
    "end": "473520"
  },
  {
    "text": "example here you might have a a tile based map program like Google Maps or or Yahoo Maps um",
    "start": "473520",
    "end": "480319"
  },
  {
    "text": "and each one of those tiles might want to be evicted at some point if you're starting to load too many tiles and at",
    "start": "480319",
    "end": "487599"
  },
  {
    "text": "the same time you might also occasionally have search results that are dropping little markers on top of the tiles and maybe you don't want those",
    "start": "487599",
    "end": "493840"
  },
  {
    "text": "markers to actually be members of the objects themselves maybe you want them to be a separate data structure but",
    "start": "493840",
    "end": "500199"
  },
  {
    "text": "you'd still like the lifetime of the markers to be tied to the tile so if I have some tile that's way out of view",
    "start": "500199",
    "end": "506560"
  },
  {
    "text": "and I haven't used it in a long time and I just want to let that tile go the markers associated with that tile are",
    "start": "506560",
    "end": "512279"
  },
  {
    "text": "just as useless so those should be able to be garbage collected as well and the cool thing about weak Maps is when you",
    "start": "512279",
    "end": "517959"
  },
  {
    "text": "have this Association uh as soon as the key disappears the uh the value disappears from the table as well um",
    "start": "517959",
    "end": "525279"
  },
  {
    "text": "this isn't necessarily something you would use all the time but it's a power feature and I think Frameworks are going to start finding a lot of interesting",
    "start": "525279",
    "end": "530519"
  },
  {
    "text": "uses for this another one that I I probably don't have time to go into in great detail but",
    "start": "530519",
    "end": "537720"
  },
  {
    "text": "is really cool and another sort of low-level power feature that I think people are going to do a lot with are or",
    "start": "537720",
    "end": "543000"
  },
  {
    "text": "what we call proxies so these are meta programmable objects these let you create objects where every single aspect",
    "start": "543000",
    "end": "550279"
  },
  {
    "text": "of the semantics of that object every operation you can do with the object getting setting deleting Etc uh is",
    "start": "550279",
    "end": "557360"
  },
  {
    "text": "actually under the control of the program so you can define a callback that handles every possible object event",
    "start": "557360",
    "end": "563920"
  },
  {
    "text": "that can happen to this object um so there's already we already have some projects at Mozilla that we're doing",
    "start": "563920",
    "end": "569920"
  },
  {
    "text": "with proxies they've been shipping since Firefox 4 I believe um so one of the things that we're doing is we're trying",
    "start": "569920",
    "end": "575760"
  },
  {
    "text": "to re-implement the entire Dom as a pure JavaScript library but the Dom was",
    "start": "575760",
    "end": "581680"
  },
  {
    "text": "designed back in the day where it was assumed that it was going to be written in C++ and so the Dom objects have some really strange behavior that don't act",
    "start": "581680",
    "end": "588880"
  },
  {
    "text": "like normal JavaScript objects but proxies give you the power to give your own custom Behavior to objects but",
    "start": "588880",
    "end": "595560"
  },
  {
    "text": "proxies can do more than just sort of reimplement the Dom you can kind of invent your own object semantics you",
    "start": "595560",
    "end": "601800"
  },
  {
    "text": "could do things like invent a new kind of inheritance mechanism so again I think this is a low-l feature that might",
    "start": "601800",
    "end": "607760"
  },
  {
    "text": "take a while for people to start uh finding cool uses for but I think they're going to experiment with it and they're going to find uh really amazing",
    "start": "607760",
    "end": "614839"
  },
  {
    "text": "things that they can do with them um okay so th those may look a",
    "start": "614839",
    "end": "620560"
  },
  {
    "text": "little abstruse uh this one I think is is a problem that everyone uh I'm i' be",
    "start": "620560",
    "end": "626279"
  },
  {
    "text": "willing to bet that just about everyone in this room deals with this all the time uh we all know that JavaScript has this",
    "start": "626279",
    "end": "632880"
  },
  {
    "start": "629000",
    "end": "685000"
  },
  {
    "text": "uh sequential run to completion semantics and anytime we want to do some sort of IO we're forced to register a",
    "start": "632880",
    "end": "638760"
  },
  {
    "text": "call back that will be invoked later on when the io happens uh and and I like to imagine uh",
    "start": "638760",
    "end": "648160"
  },
  {
    "text": "that sometimes JavaScript programs look like trying to make recipes where every single step in the recipe involves",
    "start": "648160",
    "end": "655040"
  },
  {
    "text": "flipping to another page so if you imagine after you you pour a a cup of water into the pan you have to go to the",
    "start": "655040",
    "end": "661519"
  },
  {
    "text": "next index card um and so like how many times have you",
    "start": "661519",
    "end": "668320"
  },
  {
    "text": "written a JavaScript program that looks like this uh I think the best name I've heard for this",
    "start": "668320",
    "end": "675440"
  },
  {
    "text": "is the Pyramid of",
    "start": "675440",
    "end": "678600"
  },
  {
    "text": "Doom um so the feature that we're working on to address this uh is a kind",
    "start": "681200",
    "end": "686600"
  },
  {
    "start": "685000",
    "end": "860000"
  },
  {
    "text": "of interruptible function uh these are known as generators if you're a python",
    "start": "686600",
    "end": "691920"
  },
  {
    "text": "programmer they'll look very familiar to you they're originally designed actually to be almost exactly like the semantics",
    "start": "691920",
    "end": "697120"
  },
  {
    "text": "of python generators uh some you could also call them co-routines there's some",
    "start": "697120",
    "end": "702680"
  },
  {
    "text": "slight differences with co-routines so a generator looks something like this it's a function with",
    "start": "702680",
    "end": "708920"
  },
  {
    "text": "this special star signal that says okay this is a different kind of function and inside of a generator function you're",
    "start": "708920",
    "end": "715079"
  },
  {
    "text": "actually allowed to use this new keyword yield and what yield means is I'm actually going to stop the execution of",
    "start": "715079",
    "end": "721959"
  },
  {
    "text": "this function here and I'm going to return to uh whoever was using the generator and give them whatever uh",
    "start": "721959",
    "end": "729639"
  },
  {
    "text": "argument was passed to yield but I'm going to save where I was in the middle of the function so that you can resume",
    "start": "729639",
    "end": "736120"
  },
  {
    "text": "it later this is uh maybe not obvious when you first look",
    "start": "736120",
    "end": "742920"
  },
  {
    "text": "at it so uh here in this example we have two yield statements and it's when the",
    "start": "742920",
    "end": "749040"
  },
  {
    "text": "uh the caller calls the next method that we keep resuming um it might not be immediately obvious what you can do with",
    "start": "749040",
    "end": "754880"
  },
  {
    "text": "this but there's actually really powerful idioms you can do when you have the the power to stop what you're doing",
    "start": "754880",
    "end": "760519"
  },
  {
    "text": "in the middle so uh one of the things that I've been experimenting with is a new library called task JS uh task JS",
    "start": "760519",
    "end": "767920"
  },
  {
    "text": "gives you something like a sort of lightweight threading in JavaScript but with none of the painful locking or anything like that from java but what it",
    "start": "767920",
    "end": "775160"
  },
  {
    "text": "lets you do is the kinds of IO that we do in JavaScript all the time where you can say I need to stop what I was doing right",
    "start": "775160",
    "end": "781440"
  },
  {
    "text": "now and don't restart me until uh the event that I'm waiting for has occurred",
    "start": "781440",
    "end": "787959"
  },
  {
    "text": "and then just pick up where I left off so here you can see I'll do an XML HTTP",
    "start": "787959",
    "end": "794160"
  },
  {
    "text": "request and ask for a file and then stop I'll call yield wait for the result to come back in a string find that to the",
    "start": "794160",
    "end": "802120"
  },
  {
    "text": "text variable and now I can continue and I can do a timeout and I can say wait 1,000 milliseconds and stop don't resume",
    "start": "802120",
    "end": "809600"
  },
  {
    "text": "me till uh that timeout has happened and then start me up again so all of a",
    "start": "809600",
    "end": "814800"
  },
  {
    "text": "sudden there's no more Pyramid of Doom we actually writing what looks like sequential code again but you can still",
    "start": "814800",
    "end": "820320"
  },
  {
    "text": "tell that it's a run to completion semantics because you never stop what you're doing unless you explicitly say the keyword yield um so this gives you a",
    "start": "820320",
    "end": "827519"
  },
  {
    "text": "nice compromise between uh not having the kinds of preemption semantics you",
    "start": "827519",
    "end": "832720"
  },
  {
    "text": "get in a multi-threaded language where at any point anybody could could stop you and mess with your program State",
    "start": "832720",
    "end": "838839"
  },
  {
    "text": "it's it's only when you decide you want to interrupt your program but it lets you write in a much more natural style",
    "start": "838839",
    "end": "845519"
  },
  {
    "text": "um so tjs is a really fun project I'm I'm uh experimenting with different scheduling policies and uh I invite you",
    "start": "845519",
    "end": "852199"
  },
  {
    "text": "to to check it out on GitHub and if anybody's interested I'd love to have uh more",
    "start": "852199",
    "end": "857600"
  },
  {
    "text": "collaborators all right the next feature is uh maybe the single most important",
    "start": "857600",
    "end": "862800"
  },
  {
    "start": "860000",
    "end": "1003000"
  },
  {
    "text": "feature in my opinion uh that's coming in JavaScript and that is the module system um so",
    "start": "862800",
    "end": "870399"
  },
  {
    "text": "in my mind one of the great one of the big motivations for modules is that uh JavaScript still has a lot of catch-up",
    "start": "870399",
    "end": "876240"
  },
  {
    "text": "to do in terms of building a uh a huge repository of useful reusable libraries",
    "start": "876240",
    "end": "883040"
  },
  {
    "text": "we're getting there node.js has made great strides they're using commonjs uh because of that they've got",
    "start": "883040",
    "end": "889279"
  },
  {
    "text": "the npm uh package manager so you're starting to see already just with the creation of that one repository",
    "start": "889279",
    "end": "895519"
  },
  {
    "text": "thousands of JavaScript libraries are showing up but we don't really have the same thing for uh browser based",
    "start": "895519",
    "end": "900959"
  },
  {
    "text": "JavaScript we really don't have the you know the the great repository of JavaScript libraries um and I think a",
    "start": "900959",
    "end": "908000"
  },
  {
    "text": "big part of that is there's friction created by the fact that there's no module system built into the language there's no one standard way that you can",
    "start": "908000",
    "end": "915000"
  },
  {
    "text": "package up your code and ship it to somebody else to reuse um one way of looking at this is",
    "start": "915000",
    "end": "922600"
  },
  {
    "text": "when you start up a JavaScript environment uh the environment just sort",
    "start": "922600",
    "end": "928120"
  },
  {
    "text": "of hands you this really malleable ball of clay so that's the browser and that's your empty script tag and there's a lot",
    "start": "928120",
    "end": "935560"
  },
  {
    "text": "you can do with a ball of clay especially when you have Doug crockford to teach you all the tips and techniques for sculpting um but sometimes it's nice",
    "start": "935560",
    "end": "943920"
  },
  {
    "text": "to just have a little bit of structure come out of the box so what has Doug taught us he's",
    "start": "943920",
    "end": "949600"
  },
  {
    "text": "taught us the module pattern and the module pattern works pretty well and it you know it could be worse but it's a",
    "start": "949600",
    "end": "955319"
  },
  {
    "text": "lot of boilerplate that you have to write just to create a simple uh simple module in JavaScript so this is probably",
    "start": "955319",
    "end": "961920"
  },
  {
    "text": "familiar to everybody um the idea of the module pattern is you wrap your code in an immediately invoked function",
    "start": "961920",
    "end": "967800"
  },
  {
    "text": "expression and that way you're guaranteed that you've got a fresh scope you're not going to pollute the global",
    "start": "967800",
    "end": "972839"
  },
  {
    "text": "name space and then you represent the result of creating the module as an",
    "start": "972839",
    "end": "979199"
  },
  {
    "text": "object whose exports are the properties of the object so this is doable but",
    "start": "979199",
    "end": "985199"
  },
  {
    "text": "there's a lot of variations on it there's no standard way of doing it um and you really don't get any help from the",
    "start": "985199",
    "end": "991079"
  },
  {
    "text": "language um so as a as a language nerd um whenever I see design patterns I",
    "start": "991079",
    "end": "997240"
  },
  {
    "text": "think of those as uh sort of crying out for help from the language it's",
    "start": "997240",
    "end": "1003079"
  },
  {
    "start": "1003000",
    "end": "1018000"
  },
  {
    "text": "programmers saying this was something that was missing from the language we figured out a workaround but we really",
    "start": "1003079",
    "end": "1008319"
  },
  {
    "text": "would have been happier if you had built it in uh to the language in the first place uh there's a quote from Paul",
    "start": "1008319",
    "end": "1013959"
  },
  {
    "text": "Graham that says whenever I see design patterns I I wonder if these are not evidence of the human compiler at work",
    "start": "1013959",
    "end": "1020600"
  },
  {
    "start": "1018000",
    "end": "1031000"
  },
  {
    "text": "um and uh uh as as a language nerd again I don't like being a compiler uh I I'd",
    "start": "1020600",
    "end": "1027160"
  },
  {
    "text": "prefer the compiler to be a compiler um so the module system in uh",
    "start": "1027160",
    "end": "1033038"
  },
  {
    "start": "1031000",
    "end": "1094000"
  },
  {
    "text": "ecmascript next uh just lets you say exactly what you meant you can define a module you can give it a name and you",
    "start": "1033039",
    "end": "1038640"
  },
  {
    "text": "can say what the exports are simply by labeling them as exports there's actually a lot more to it and I could do",
    "start": "1038640",
    "end": "1045640"
  },
  {
    "text": "I have done entire talks just about the module system um one of the really nice new powers of",
    "start": "1045640",
    "end": "1054400"
  },
  {
    "text": "this module system is that you know longer have to use the script tag to get",
    "start": "1054400",
    "end": "1060160"
  },
  {
    "text": "uh external files so when you import some of the exports from a module that",
    "start": "1060160",
    "end": "1066799"
  },
  {
    "text": "came from an external file uh the semantics guarantees that this is loaded once so you can you can import from the",
    "start": "1066799",
    "end": "1073240"
  },
  {
    "text": "same file multiple times and it'll only be invoked once um and no notice that",
    "start": "1073240",
    "end": "1079200"
  },
  {
    "text": "it's doing IO but we don't have the Pyramid of Doom so it's actually doing",
    "start": "1079200",
    "end": "1084480"
  },
  {
    "text": "all of the loading before execution starts so there's no danger that your code just starts blocking arbitrarily in",
    "start": "1084480",
    "end": "1090720"
  },
  {
    "text": "the middle okay so uh another theme of uh of",
    "start": "1090720",
    "end": "1096799"
  },
  {
    "text": "JavaScript feat of the next version of JavaScript is features that add expressiveness to the language um and",
    "start": "1096799",
    "end": "1105400"
  },
  {
    "text": "one way of thinking about expressiveness is it's about helping with the the the problem of the death of a Thousand Cuts",
    "start": "1105400",
    "end": "1111480"
  },
  {
    "start": "1107000",
    "end": "1146000"
  },
  {
    "text": "there's all the little paper cuts that we suffer through every day as we're writing JavaScript code uh the fact that",
    "start": "1111480",
    "end": "1118640"
  },
  {
    "text": "the arguments array is not actually an array so we can't use any of the uh array methods on it uh the hoisting of",
    "start": "1118640",
    "end": "1126640"
  },
  {
    "text": "VAR the the function scoping that that uh Doug talked about this morning um",
    "start": "1126640",
    "end": "1132000"
  },
  {
    "text": "type of null that's just kind of weird um so",
    "start": "1132000",
    "end": "1138840"
  },
  {
    "text": "we're just adding a lot of new conveniences to the language that probably should have been there in the first place uh instead of having this",
    "start": "1138840",
    "end": "1145480"
  },
  {
    "text": "this arguments variable that you can refer to that has the entire array of arguments well sometimes you only wanted",
    "start": "1145480",
    "end": "1151600"
  },
  {
    "start": "1146000",
    "end": "1170000"
  },
  {
    "text": "the rest of the arguments but you want to name some of the other ones and uh the simple syntax of three dots followed",
    "start": "1151600",
    "end": "1158360"
  },
  {
    "text": "by a variable name just lets you do exactly that you can you can bind the the remaining arguments and this time",
    "start": "1158360",
    "end": "1165080"
  },
  {
    "text": "it'll be a real array you can actually use all of the array methods on it it um",
    "start": "1165080",
    "end": "1171039"
  },
  {
    "text": "and furthermore you can actually use the the dot dot dot syntax to splice in actual arguments when you do a function",
    "start": "1171039",
    "end": "1176400"
  },
  {
    "text": "call or when you do uh a con when you call a Constructor um for the language",
    "start": "1176400",
    "end": "1182880"
  },
  {
    "text": "lawyers out there uh this bottom one actually was impossible to express uh in",
    "start": "1182880",
    "end": "1188640"
  },
  {
    "text": "ES3 and there's one little detail of es5 that accidentally gave you the power to",
    "start": "1188640",
    "end": "1194960"
  },
  {
    "text": "express this and that's uh function.prototype.bind um anyway uh another one is uh default",
    "start": "1194960",
    "end": "1204679"
  },
  {
    "start": "1199000",
    "end": "1256000"
  },
  {
    "text": "uh arguments default values for optional arguments um this one's just you know you can you can write it but it's a pain",
    "start": "1204679",
    "end": "1211320"
  },
  {
    "text": "to write it and you'd really rather just be able to write it like this so we'll just have that uh work out of the",
    "start": "1211320",
    "end": "1219919"
  },
  {
    "text": "box uh this one again uh Doug talked about this this morning the the let",
    "start": "1220000",
    "end": "1225600"
  },
  {
    "text": "construct as opposed to VAR um so you can just think let is the new VAR",
    "start": "1225600",
    "end": "1233520"
  },
  {
    "text": "anywhere you would have used VAR in the past replace it with let and chances are your program is going to work better uh",
    "start": "1233520",
    "end": "1240799"
  },
  {
    "text": "unless of course you know if you always followed Crocs rules and you put your vars at the top of the functions your",
    "start": "1240799",
    "end": "1246080"
  },
  {
    "text": "program is going to act exactly the same but now you can actually bind things in a local block and and get the semantics",
    "start": "1246080",
    "end": "1253080"
  },
  {
    "text": "that you expect uh destructuring this one is uh in a lot of other Lang languages but for",
    "start": "1253080",
    "end": "1259320"
  },
  {
    "text": "people who haven't seen it it looks kind of surprising at first and then once you start using it you wonder how you ever",
    "start": "1259320",
    "end": "1264559"
  },
  {
    "text": "lived without it this saves you so much typing so here we have thing. color is",
    "start": "1264559",
    "end": "1270120"
  },
  {
    "text": "an object that has r g and B properties and instead of having to write three statements that say varr equals thing.",
    "start": "1270120",
    "end": "1277480"
  },
  {
    "text": "color. R varg equals thing docolor dog we get to just automatically unpack the",
    "start": "1277480",
    "end": "1282880"
  },
  {
    "text": "contents of of that object in one single operation same thing with arrays um this",
    "start": "1282880",
    "end": "1289600"
  },
  {
    "text": "makes it nicer to write functions that just return tups and you can just unpack them uh in one uh in one go um you can",
    "start": "1289600",
    "end": "1297480"
  },
  {
    "text": "also use it for cute idioms like swapping so here without actually naming a temporary variable you can swap the",
    "start": "1297480",
    "end": "1303039"
  },
  {
    "text": "variables A and B and anywhere you do a variable binding or a variable",
    "start": "1303039",
    "end": "1308360"
  },
  {
    "text": "initialization uh you can use destructuring okay how are we doing uh",
    "start": "1308360",
    "end": "1316240"
  },
  {
    "start": "1314000",
    "end": "1377000"
  },
  {
    "text": "we''ve got uh a lot of new uh conveniences for object literals um",
    "start": "1316240",
    "end": "1323440"
  },
  {
    "text": "so the first line is the syntax everyone's or the the first line inside",
    "start": "1323440",
    "end": "1328760"
  },
  {
    "text": "the object is syntax everyone's familiar with but the second one is just a convenience for defining methods so you",
    "start": "1328760",
    "end": "1334080"
  },
  {
    "text": "don't have to write Fu n ctio n you can just write the name the Parn and the arguments and the body this is something",
    "start": "1334080",
    "end": "1341279"
  },
  {
    "text": "to this day I accidentally type it without even thinking it's just sort of my fingers have always wished that",
    "start": "1341279",
    "end": "1346720"
  },
  {
    "text": "feature were there and now it will be there and then the third one is is really nice this is something that uh you can't do",
    "start": "1346720",
    "end": "1353919"
  },
  {
    "text": "without doing an extra assignment outside of the object literal you can actually dynamically compute the name of",
    "start": "1353919",
    "end": "1359640"
  },
  {
    "text": "a property that'll also be useful for private names so you can define a",
    "start": "1359640",
    "end": "1364919"
  },
  {
    "text": "private key outside and then you can uh inside the declarative object literal",
    "start": "1364919",
    "end": "1370120"
  },
  {
    "text": "you can uh refer to that key all right just a few more um",
    "start": "1370120",
    "end": "1379880"
  },
  {
    "start": "1377000",
    "end": "1487000"
  },
  {
    "text": "everybody knows that Forin uh only does what you want about half the time um",
    "start": "1379880",
    "end": "1386360"
  },
  {
    "text": "it's got all sorts of problems with uh prototype leaks and one of the most common bugs is people do a 4in loop over",
    "start": "1386360",
    "end": "1393520"
  },
  {
    "text": "an array expecting to get the elements of the array and instead they get the indices of the",
    "start": "1393520",
    "end": "1399640"
  },
  {
    "text": "array um originally we were thinking about actually uh extending the 4in loop",
    "start": "1399640",
    "end": "1405760"
  },
  {
    "text": "and sort of uh reforming it uh but most people felt that that was going to be",
    "start": "1405760",
    "end": "1411200"
  },
  {
    "text": "too um deep of a change to the language it was going to be too difficult to migrate existing code so we introduced a",
    "start": "1411200",
    "end": "1419000"
  },
  {
    "text": "new syntax the four of loop um so a neonic you can think of is the keys are",
    "start": "1419000",
    "end": "1424159"
  },
  {
    "text": "in the object and the values are of the object um so if you do a four of loop",
    "start": "1424159",
    "end": "1432000"
  },
  {
    "text": "over an array you'll get the values that's that's what you expect in fact if you do the four of loop over any object",
    "start": "1432000",
    "end": "1438440"
  },
  {
    "text": "you're going to get the the values instead of the keys of the object um but we'll also give you uh some sort of",
    "start": "1438440",
    "end": "1445039"
  },
  {
    "text": "batteries included some built-in functions that let you uh create that let you describe custom arrays that you",
    "start": "1445039",
    "end": "1452799"
  },
  {
    "text": "want to iterate over or custom sequences you want to iterate over so you can say for X of the keys for X of the values",
    "start": "1452799",
    "end": "1459000"
  },
  {
    "text": "for K and V of the items so that'll be a sequence of pairs um this code is just a",
    "start": "1459000",
    "end": "1466840"
  },
  {
    "text": "little bit easier to communicate exactly what your intent was where for in is is",
    "start": "1466840",
    "end": "1472520"
  },
  {
    "text": "uh pretty hard to unpack um and in fact the four of loop",
    "start": "1472520",
    "end": "1478159"
  },
  {
    "text": "we're going to make extensible so you can Define your own Uh custom sequences",
    "start": "1478159",
    "end": "1484720"
  },
  {
    "text": "by defining what's called an iterator object so if you um add the iterate",
    "start": "1484720",
    "end": "1490720"
  },
  {
    "start": "1487000",
    "end": "1514000"
  },
  {
    "text": "property to any object and this is going to be a special shared name object",
    "start": "1490720",
    "end": "1495760"
  },
  {
    "text": "iterate instead of polluting the uh public name space uh you can create your",
    "start": "1495760",
    "end": "1500919"
  },
  {
    "text": "own custom iterator object and now you can do a four of loop over that object with whatever custom Behavior you",
    "start": "1500919",
    "end": "1507919"
  },
  {
    "text": "want once you have custom sequences then it's really nice to add uh uh sort of",
    "start": "1509000",
    "end": "1514880"
  },
  {
    "start": "1514000",
    "end": "1551000"
  },
  {
    "text": "syntactic sugar or syntactic convenience for uh what are known as comprehensions",
    "start": "1514880",
    "end": "1519919"
  },
  {
    "text": "in languages like Python and and hasle um so here we're very concisely",
    "start": "1519919",
    "end": "1526240"
  },
  {
    "text": "describing an array who whose elements are x * y for each value X of object one",
    "start": "1526240",
    "end": "1533520"
  },
  {
    "text": "and for each value y of object two and this syntax actually goes back to math",
    "start": "1533520",
    "end": "1539320"
  },
  {
    "text": "this comes from the set comprehension syntax in math but it it turns out that it's pretty easy to give it a",
    "start": "1539320",
    "end": "1545200"
  },
  {
    "text": "straightforward semantics in a programming language and it turns out to be really concise and uh convenient to",
    "start": "1545200",
    "end": "1552278"
  },
  {
    "text": "use okay uh Tangled Up In strings um uh",
    "start": "1552440",
    "end": "1557720"
  },
  {
    "text": "so much web programming involves hacking on strings uh we're embedding uh we're",
    "start": "1557720",
    "end": "1564320"
  },
  {
    "text": "embedding bits of fragments of HTML we're em embedding fragments of various",
    "start": "1564320",
    "end": "1569399"
  },
  {
    "text": "kinds of languages and all you get in JavaScript the only syntax you get in JavaScript is string literals and plus",
    "start": "1569399",
    "end": "1575559"
  },
  {
    "text": "um this is a obviously a pain uh I think that Doug has left so he won't hear what",
    "start": "1575559",
    "end": "1583200"
  },
  {
    "text": "I'm about to tell you we will give you multi-line string",
    "start": "1583200",
    "end": "1589200"
  },
  {
    "start": "1587000",
    "end": "1625000"
  },
  {
    "text": "literals uh there's no backslash at the end of the line you just write it as long as you want um if you don't mind",
    "start": "1589200",
    "end": "1596880"
  },
  {
    "text": "the indentation thing like he does uh this will just work as you expect but without the hazards of uh whites space",
    "start": "1596880",
    "end": "1603399"
  },
  {
    "text": "following the backslash notice that this is using back ticks instead of the normal string um but we also have string",
    "start": "1603399",
    "end": "1611279"
  },
  {
    "text": "interpolation like you get in so many other languages in Shell scripting and PHP and pearl um this is this is a a",
    "start": "1611279",
    "end": "1617960"
  },
  {
    "text": "very often requested feature uh in JavaScript and it just makes it so much nicer to read the code but we're",
    "start": "1617960",
    "end": "1624159"
  },
  {
    "text": "actually going to take it one further uh there's an optional prefix that you can add to one of these",
    "start": "1624159",
    "end": "1631120"
  },
  {
    "start": "1625000",
    "end": "1667000"
  },
  {
    "text": "literals and what that prefix actually does is it basically says you can refer to any function here and this function",
    "start": "1631120",
    "end": "1637559"
  },
  {
    "text": "is going to get the contents of this string sort of nicely organized into the literal parts and the interpolated parts",
    "start": "1637559",
    "end": "1645880"
  },
  {
    "text": "and you can write your own sanitizers so makes it really really easy to write uh",
    "start": "1645880",
    "end": "1651240"
  },
  {
    "text": "sanitizers for things like HTML to prevent um injection attacks so in",
    "start": "1651240",
    "end": "1656320"
  },
  {
    "text": "addition to getting some of the convenience of nicer string literals you also get a very convenient way of of",
    "start": "1656320",
    "end": "1662159"
  },
  {
    "text": "writing security conscious code okay so that was sort of my Whirlwind tour of a lot of the features",
    "start": "1662159",
    "end": "1670000"
  },
  {
    "start": "1667000",
    "end": "1701000"
  },
  {
    "text": "uh it's not by by no stretch is it all of the features that we're considering and I'm happy to answer any questions if",
    "start": "1670000",
    "end": "1675720"
  },
  {
    "text": "if people have been following uh on es discuss or or on the web um but I just",
    "start": "1675720",
    "end": "1681000"
  },
  {
    "text": "want to address the the number one question that we always get which is well that all sounds fine but it takes",
    "start": "1681000",
    "end": "1687399"
  },
  {
    "text": "years for these things to roll out how long do I have to wait before this is actually in the hands of enough of my",
    "start": "1687399",
    "end": "1692919"
  },
  {
    "text": "users that I can really use these features and that's a fair question um and here are my answers first of all uh",
    "start": "1692919",
    "end": "1701039"
  },
  {
    "start": "1701000",
    "end": "1824000"
  },
  {
    "text": "it's our job on this committee to work as fast as we can to get this stuff out as soon as we can so the next addition",
    "start": "1701039",
    "end": "1707519"
  },
  {
    "text": "of the spec is targeted for 2013 which is coming sooner than you might think um",
    "start": "1707519",
    "end": "1713200"
  },
  {
    "text": "but as vendors like at Mozilla we don't have to wait for the spec to be",
    "start": "1713200",
    "end": "1718519"
  },
  {
    "text": "finalized before we start shipping features so for example proxies and weak",
    "start": "1718519",
    "end": "1723760"
  },
  {
    "text": "maps are features that are fairly stable in the spec and we've already shipped preliminary versions of them in the",
    "start": "1723760",
    "end": "1729320"
  },
  {
    "text": "browsers it's always a guessing game to know exactly you know what might be more likely to change by the time the spec",
    "start": "1729320",
    "end": "1736039"
  },
  {
    "text": "comes out but this is just it's important to remember that the due date",
    "start": "1736039",
    "end": "1741799"
  },
  {
    "text": "for the spec is not the same as the date at which the features are getting in the hands of users that said we're still",
    "start": "1741799",
    "end": "1748640"
  },
  {
    "text": "talking about bleeding edge browsers we're you know we still have a laggy Market um so I think there's one other",
    "start": "1748640",
    "end": "1755080"
  },
  {
    "text": "approach that uh um well there's an approach that I'm hoping will help and",
    "start": "1755080",
    "end": "1760919"
  },
  {
    "text": "and we're starting to work on this uh brandan Ike has talked about this in in several of his recent talks and this is",
    "start": "1760919",
    "end": "1766519"
  },
  {
    "text": "the idea of a transpiler so transpiler is just a kind of compiler that goes from sort of a high level language to",
    "start": "1766519",
    "end": "1771600"
  },
  {
    "text": "another highle language or that does a a very lightweight compilation Coffey script is the canonical",
    "start": "1771600",
    "end": "1777679"
  },
  {
    "text": "example um Google already has a transpiler For What they'd like to see",
    "start": "1777679",
    "end": "1783240"
  },
  {
    "text": "as the next version of e of ecmascript it's not exactly what's in the spec and",
    "start": "1783240",
    "end": "1789000"
  },
  {
    "text": "and the spec is still ongoing uh we also have a JavaScript in JavaScript implementation uh called Narcissus and",
    "start": "1789000",
    "end": "1796159"
  },
  {
    "text": "we're working on doing a language shim ourselves uh just as an experiment but it's my hope that we can actually get to",
    "start": "1796159",
    "end": "1802440"
  },
  {
    "text": "a point where just like doing coffee script development you could uh write in",
    "start": "1802440",
    "end": "1807799"
  },
  {
    "text": "the new version of the language but then compile it down to uh a more backwards",
    "start": "1807799",
    "end": "1813600"
  },
  {
    "text": "compatible um web compatible version of ecmascript so what we're hoping is this will let people start using the language",
    "start": "1813600",
    "end": "1820320"
  },
  {
    "text": "before it's actually shipping in the browsers and as a stop Gap they can compile down to the the version of",
    "start": "1820320",
    "end": "1826760"
  },
  {
    "start": "1824000",
    "end": "2175000"
  },
  {
    "text": "ecmascript that is in the browsers but in time when there's native support for more and more of the features they can",
    "start": "1826760",
    "end": "1831840"
  },
  {
    "text": "use less and less of that compilation and get better performance and uh possibly a better debugging",
    "start": "1831840",
    "end": "1837919"
  },
  {
    "text": "experience okay so that's our little uh tour of the future of JavaScript uh I'm",
    "start": "1837919",
    "end": "1843840"
  },
  {
    "text": "happy to to take as many questions as people have um and I'll try to stick around a little bit uh but then I will",
    "start": "1843840",
    "end": "1849120"
  },
  {
    "text": "have to rush off back to my my masters uh back in the room full of uh",
    "start": "1849120",
    "end": "1855039"
  },
  {
    "text": "futuristic language nerds so thanks very much for your time and",
    "start": "1855039",
    "end": "1859919"
  },
  {
    "text": "attention so the question is are there any features from the old version that have been removed uh this is a a subtle",
    "start": "1860799",
    "end": "1867519"
  },
  {
    "text": "question because in one sense you can't ever remove anything from the web or you there's very little that you can remove",
    "start": "1867519",
    "end": "1873799"
  },
  {
    "text": "but uh the new version of the language is going to have an opt-in language type so you'll actually be opting into the",
    "start": "1873799",
    "end": "1880440"
  },
  {
    "text": "new version and that means we do have some flexibility to uh break some",
    "start": "1880440",
    "end": "1885480"
  },
  {
    "text": "compatibility and remove some features so uh we are doing that in fact even ecmascript 5 strict mode already did",
    "start": "1885480",
    "end": "1892720"
  },
  {
    "text": "that so for example the width statement is Kut it's gone um we will do a little",
    "start": "1892720",
    "end": "1898399"
  },
  {
    "text": "bit of removal but we want to keep the migration cost as low as possible we want people to be able to take their",
    "start": "1898399",
    "end": "1904200"
  },
  {
    "text": "existing code and start moving it into the new version of ecmascript so we're going to be very careful about what we",
    "start": "1904200",
    "end": "1911240"
  },
  {
    "text": "um so uh that's a very astute comment um the uh the way that you create this",
    "start": "1911240",
    "end": "1917880"
  },
  {
    "text": "struct types uh is assuming that they're in order and uh the answer to that is in",
    "start": "1917880",
    "end": "1924559"
  },
  {
    "text": "practice on the web if you have uh alphabetically named properties they",
    "start": "1924559",
    "end": "1929799"
  },
  {
    "text": "actually are ordered so for now we've been going with this because it's the nicest syntax but uh if we can't",
    "start": "1929799",
    "end": "1937440"
  },
  {
    "text": "actually nail down the semantics of some amount of uh property order uh we'll be",
    "start": "1937440",
    "end": "1943039"
  },
  {
    "text": "forced to make a more verbose syntax it's my hope that we can have this nice pretty syntax uh but we'll have to",
    "start": "1943039",
    "end": "1948960"
  },
  {
    "text": "that's still an open question we have to nail that down so is the question what's the future of classes and inheritance in",
    "start": "1948960",
    "end": "1955240"
  },
  {
    "text": "JavaScript yeah um that that's one that's conspicuously missing on my slides um it's one of the more",
    "start": "1955240",
    "end": "1962519"
  },
  {
    "text": "controversial pieces uh and it's we've started working really in",
    "start": "1962519",
    "end": "1967880"
  },
  {
    "text": "Earnest on classes fairly late in the cycle so uh there's still a lot of discussion going on in fact that's the",
    "start": "1967880",
    "end": "1974639"
  },
  {
    "text": "topic of this morning that I'm missing right now is is classes uh we've come to a lot of agreement",
    "start": "1974639",
    "end": "1980919"
  },
  {
    "text": "about a lot of pieces and and we've talked a lot with the community and and most people say I don't want anything",
    "start": "1980919",
    "end": "1987120"
  },
  {
    "text": "that even smells remotely of java uh that that is the message we hear loud and clear um but what we're talking",
    "start": "1987120",
    "end": "1994639"
  },
  {
    "text": "about when we talk about classes is something much more like coffee script it's a nice syntax that gives you uh a",
    "start": "1994639",
    "end": "2000639"
  },
  {
    "text": "convenient way of expressing the patterns that people already use in JavaScript so it's a Constructor",
    "start": "2000639",
    "end": "2005799"
  },
  {
    "text": "function that has a prototype object and it would be totally interoperable with existing Constructor functions with",
    "start": "2005799",
    "end": "2012000"
  },
  {
    "text": "prototype objects um this turns out to be one of the ones where the semantics is not really the hard part we know the",
    "start": "2012000",
    "end": "2018159"
  },
  {
    "text": "semantics should be do what JavaScript already does the syntax is just really tricky so this is a sort of like UI",
    "start": "2018159",
    "end": "2026000"
  },
  {
    "text": "design it's um uh getting the the the layout of the syntax just right is is really tough but we're working on it and",
    "start": "2026000",
    "end": "2033440"
  },
  {
    "text": "um it is still I mean it hasn't been cut from the set of features but the",
    "start": "2033440",
    "end": "2038480"
  },
  {
    "text": "discussions are still ongoing the question is is Microsoft on",
    "start": "2038480",
    "end": "2044279"
  },
  {
    "text": "board with this uh Microsoft uh Works actively on the committee uh and um only",
    "start": "2044279",
    "end": "2052079"
  },
  {
    "text": "they could tell you what their company strategy is uh I there's there's there's",
    "start": "2052079",
    "end": "2057560"
  },
  {
    "text": "no way that I I don't have a divination Rod here I can't guess great question so the the question",
    "start": "2057560",
    "end": "2063679"
  },
  {
    "text": "is uh can can an existing object be turned into a proxy um the current proxy spec only lets you",
    "start": "2063679",
    "end": "2072280"
  },
  {
    "text": "create a new proxy from Whole cloth it doesn't let you go around and and muck with the sort of uh metasemantics or the",
    "start": "2072280",
    "end": "2080240"
  },
  {
    "text": "the the underlying behavior of an existing object uh there's a lot of things though that would be really nice to be able to do like uh you already can",
    "start": "2080240",
    "end": "2088560"
  },
  {
    "text": "add Getters and Setters to an existing object it would be nice if if you could uh add proxy bable Behavior to existing",
    "start": "2088560",
    "end": "2095398"
  },
  {
    "text": "objects um there are proxies are something that hook in at the very",
    "start": "2095399",
    "end": "2101440"
  },
  {
    "text": "lowest level of the language semantics and so it's a very delicate thing to to design each piece um we are having",
    "start": "2101440",
    "end": "2108800"
  },
  {
    "text": "ongoing discussions about which parts of the proxy API would work would make",
    "start": "2108800",
    "end": "2115240"
  },
  {
    "text": "sense to let you add to an existing object um there's a good chance that that won't be ready in time for the next",
    "start": "2115240",
    "end": "2120480"
  },
  {
    "text": "version of the language um but one use case that uh Microsoft actually brought",
    "start": "2120480",
    "end": "2126200"
  },
  {
    "text": "up uh on the committee was um if you want to do data binding so if you want",
    "start": "2126200",
    "end": "2131640"
  },
  {
    "text": "to have uh objects that you can listen in on um thing on changes that happen to",
    "start": "2131640",
    "end": "2139280"
  },
  {
    "text": "them uh you don't want to have to force them to have created them as proxies in the first place you'd like to be able to take some existing object and say hey I",
    "start": "2139280",
    "end": "2146240"
  },
  {
    "text": "want to listen in on these uh different events um so there are definitely strong use cases for being able to add proxy",
    "start": "2146240",
    "end": "2153000"
  },
  {
    "text": "Behavior to existing objects but the first version of the API doesn't let you do that okay I don't want to keep",
    "start": "2153000",
    "end": "2158599"
  },
  {
    "text": "anybody from lunch so thank you very much [Applause]",
    "start": "2158599",
    "end": "2166130"
  },
  {
    "text": "[Music]",
    "start": "2166130",
    "end": "2177069"
  }
]