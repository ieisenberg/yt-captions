[
  {
    "text": "so now that we know what ndk is the next",
    "start": "3360",
    "end": "6120"
  },
  {
    "text": "question is when or even if we want to",
    "start": "6120",
    "end": "9080"
  },
  {
    "text": "use it why do I say this well an average",
    "start": "9080",
    "end": "12599"
  },
  {
    "text": "Java developer when writing application",
    "start": "12599",
    "end": "15040"
  },
  {
    "text": "code is going to be generally more",
    "start": "15040",
    "end": "17160"
  },
  {
    "text": "productive than an average cc++",
    "start": "17160",
    "end": "19119"
  },
  {
    "text": "developer um why well simply because",
    "start": "19119",
    "end": "22560"
  },
  {
    "text": "Java has a superior memory management",
    "start": "22560",
    "end": "24599"
  },
  {
    "text": "model it has a superior uh threading",
    "start": "24599",
    "end": "27000"
  },
  {
    "text": "model Superior exception handling model",
    "start": "27000",
    "end": "29320"
  },
  {
    "text": "it's Superior set of libraries um that",
    "start": "29320",
    "end": "31960"
  },
  {
    "text": "it ships with support for uni code",
    "start": "31960",
    "end": "34120"
  },
  {
    "text": "characters and so on and so on that cc++",
    "start": "34120",
    "end": "37200"
  },
  {
    "text": "tend to lack so on average we prefer to",
    "start": "37200",
    "end": "41680"
  },
  {
    "text": "run or write app code in the Java",
    "start": "41680",
    "end": "44440"
  },
  {
    "text": "language and which we know executes on",
    "start": "44440",
    "end": "47480"
  },
  {
    "text": "the final devices on the actual Target",
    "start": "47480",
    "end": "49160"
  },
  {
    "text": "devices in the dovic virtual machine now",
    "start": "49160",
    "end": "52680"
  },
  {
    "text": "that said why do we then talk about ndk",
    "start": "52680",
    "end": "56039"
  },
  {
    "text": "when does ndk make sense as I mentioned",
    "start": "56039",
    "end": "58440"
  },
  {
    "text": "before there are two main reasons one is",
    "start": "58440",
    "end": "60840"
  },
  {
    "text": "when we have a lot of code that already",
    "start": "60840",
    "end": "63399"
  },
  {
    "text": "exists or that needs to be written",
    "start": "63399",
    "end": "65040"
  },
  {
    "text": "natively so it can function on other",
    "start": "65040",
    "end": "67560"
  },
  {
    "text": "devices uh and we want to reuse it in",
    "start": "67560",
    "end": "70200"
  },
  {
    "text": "the Java or on the Android side we tend",
    "start": "70200",
    "end": "72720"
  },
  {
    "text": "to write it in cc++ and then wrap it",
    "start": "72720",
    "end": "75640"
  },
  {
    "text": "using jni and access it essentially from",
    "start": "75640",
    "end": "78000"
  },
  {
    "text": "our Java applications uh the second",
    "start": "78000",
    "end": "80600"
  },
  {
    "text": "reason is performance um Google here",
    "start": "80600",
    "end": "83960"
  },
  {
    "text": "mentions things like signal processing",
    "start": "83960",
    "end": "86200"
  },
  {
    "text": "and physics simulation as examples of uh",
    "start": "86200",
    "end": "90119"
  },
  {
    "text": "essentially sections of our code that",
    "start": "90119",
    "end": "92000"
  },
  {
    "text": "are very sensitive to Performance um but",
    "start": "92000",
    "end": "94960"
  },
  {
    "text": "they also tend to be self-contained and",
    "start": "94960",
    "end": "98040"
  },
  {
    "text": "very CPU intensive and they don't tend",
    "start": "98040",
    "end": "100520"
  },
  {
    "text": "to use a lot of memory we'll talk about",
    "start": "100520",
    "end": "102640"
  },
  {
    "text": "memory management specifically later now",
    "start": "102640",
    "end": "105880"
  },
  {
    "text": "do we want to write entire applications",
    "start": "105880",
    "end": "108119"
  },
  {
    "text": "natively which we actually can um we",
    "start": "108119",
    "end": "111360"
  },
  {
    "text": "typically don't for a couple of reasons",
    "start": "111360",
    "end": "113680"
  },
  {
    "text": "one is as of fryo so API level 9 or I",
    "start": "113680",
    "end": "117399"
  },
  {
    "text": "should say eight um Android ships with",
    "start": "117399",
    "end": "120520"
  },
  {
    "text": "the um justtin time compiler H which is",
    "start": "120520",
    "end": "124039"
  },
  {
    "text": "part of the dovic virtual machine this",
    "start": "124039",
    "end": "125759"
  },
  {
    "text": "compiler does a pretty decent job of",
    "start": "125759",
    "end": "128920"
  },
  {
    "text": "identifying parts of our codebase those",
    "start": "128920",
    "end": "131879"
  },
  {
    "text": "that codebase written in Java um that",
    "start": "131879",
    "end": "134640"
  },
  {
    "text": "can benefit from essentially on the- fly",
    "start": "134640",
    "end": "138920"
  },
  {
    "text": "optimizations and caching so that if",
    "start": "138920",
    "end": "141400"
  },
  {
    "text": "that code base needs to execute very",
    "start": "141400",
    "end": "143200"
  },
  {
    "text": "frequently we can essentially compile it",
    "start": "143200",
    "end": "146560"
  },
  {
    "text": "at runtime into native code and then",
    "start": "146560",
    "end": "148720"
  },
  {
    "text": "next time around execute which is native",
    "start": "148720",
    "end": "150440"
  },
  {
    "text": "code um this is not something that's",
    "start": "150440",
    "end": "153239"
  },
  {
    "text": "unique to Android or the dovic virtual",
    "start": "153239",
    "end": "155680"
  },
  {
    "text": "machine of course it's been around block",
    "start": "155680",
    "end": "157599"
  },
  {
    "text": "if you will even in the Java land for a",
    "start": "157599",
    "end": "159640"
  },
  {
    "text": "very very very long time um but it",
    "start": "159640",
    "end": "162319"
  },
  {
    "text": "certainly means that the performance",
    "start": "162319",
    "end": "164879"
  },
  {
    "text": "advantages that the ndk once had over",
    "start": "164879",
    "end": "167640"
  },
  {
    "text": "just unoptimized interpreted Java code",
    "start": "167640",
    "end": "171159"
  },
  {
    "text": "uh that essentially runs as D code um",
    "start": "171159",
    "end": "174319"
  },
  {
    "text": "have somewhat faded that said the",
    "start": "174319",
    "end": "177760"
  },
  {
    "text": "optimized Java code is still not going",
    "start": "177760",
    "end": "179239"
  },
  {
    "text": "to be typ typically as fast as hand",
    "start": "179239",
    "end": "181519"
  },
  {
    "text": "tuned um cc++ Rhythm code but it",
    "start": "181519",
    "end": "184959"
  },
  {
    "text": "certainly isn't the only reason why you",
    "start": "184959",
    "end": "187400"
  },
  {
    "text": "should consider increasing the",
    "start": "187400",
    "end": "189760"
  },
  {
    "text": "complexity of your code Base by going",
    "start": "189760",
    "end": "192799"
  },
  {
    "text": "towards the nvk route now the the",
    "start": "192799",
    "end": "197120"
  },
  {
    "text": "framework um that Android provides is",
    "start": "197120",
    "end": "199920"
  },
  {
    "text": "for us to write parts of our application",
    "start": "199920",
    "end": "202440"
  },
  {
    "text": "natively and then wrap those parts and",
    "start": "202440",
    "end": "205640"
  },
  {
    "text": "by a skeleton written in Java or to",
    "start": "205640",
    "end": "208599"
  },
  {
    "text": "essentially using something called",
    "start": "208599",
    "end": "209920"
  },
  {
    "text": "native activity Implement an entire",
    "start": "209920",
    "end": "212879"
  },
  {
    "text": "application simply in cc++ with no jav",
    "start": "212879",
    "end": "215640"
  },
  {
    "text": "whatsoever if we go for the second",
    "start": "215640",
    "end": "217920"
  },
  {
    "text": "approach we are actually going to forego",
    "start": "217920",
    "end": "220760"
  },
  {
    "text": "the use of certain features of the SDK",
    "start": "220760",
    "end": "223040"
  },
  {
    "text": "the Android SDK like for example",
    "start": "223040",
    "end": "224720"
  },
  {
    "text": "Services content providers broadcast",
    "start": "224720",
    "end": "227120"
  },
  {
    "text": "receivers and so on and so on so if at",
    "start": "227120",
    "end": "229720"
  },
  {
    "text": "all possible we prefer to still maintain",
    "start": "229720",
    "end": "233280"
  },
  {
    "text": "the overall codebase of our application",
    "start": "233280",
    "end": "236439"
  },
  {
    "text": "in Java and only write certain parts",
    "start": "236439",
    "end": "241680"
  },
  {
    "text": "natively",
    "start": "245079",
    "end": "248079"
  }
]