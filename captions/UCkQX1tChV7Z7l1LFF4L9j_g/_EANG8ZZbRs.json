[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "[Music]",
    "start": "1800",
    "end": "11559"
  },
  {
    "text": "good afternoon I have two topics for you um",
    "start": "11559",
    "end": "17000"
  },
  {
    "start": "12000",
    "end": "12000"
  },
  {
    "text": "the first one is programming style which is sometimes thought of as the part of your program that the compiler ignores",
    "start": "17000",
    "end": "23880"
  },
  {
    "text": "sometimes thought that uh since the compiler doesn't pay any attention to it there's no reason for us to pay",
    "start": "23880",
    "end": "29439"
  },
  {
    "text": "attention to it either that one style is as good as another I'm going to try to persuade you that's not true that some",
    "start": "29439",
    "end": "35719"
  },
  {
    "text": "styles are significantly more beneficial than others the other topic is your brain um",
    "start": "35719",
    "end": "42760"
  },
  {
    "text": "now these topics would appear to have absolutely nothing in common with each other what could brains have to do with",
    "start": "42760",
    "end": "48920"
  },
  {
    "text": "programming it turns out there's a connection and a really surprising connection so um I'm going to be",
    "start": "48920",
    "end": "55680"
  },
  {
    "text": "misrepresenting the work of Daniel conoman the Nobel winning psycholog olist now it turns out Nobel doesn't",
    "start": "55680",
    "end": "61840"
  },
  {
    "text": "award a prize for psychology so they gave him the award for economics he's not an economist but he",
    "start": "61840",
    "end": "68960"
  },
  {
    "text": "found that um that some of the first principles of",
    "start": "68960",
    "end": "74439"
  },
  {
    "text": "economics aren't true uh such as um in",
    "start": "74439",
    "end": "80240"
  },
  {
    "text": "any transaction a party can be expected to pursue their own best interest this turns out not to be strictly true if any",
    "start": "80240",
    "end": "87799"
  },
  {
    "text": "of those parties is a human being because it turns out that people do not think the way economists think we think",
    "start": "87799",
    "end": "94680"
  },
  {
    "text": "in fact we don't think the way most of us think we think the way we think is really quite different and surprising",
    "start": "94680",
    "end": "101799"
  },
  {
    "text": "and and that is why Conan got the prize um so he came up with a model of",
    "start": "101799",
    "end": "108200"
  },
  {
    "text": "two systems um it's not a a physical model it's just a descriptive model",
    "start": "108200",
    "end": "114479"
  },
  {
    "text": "system two is the analytical engine it's the thing that we think with it's the thing that we think we are when we think",
    "start": "114479",
    "end": "122479"
  },
  {
    "text": "about ourselves it um is able to do",
    "start": "122479",
    "end": "127880"
  },
  {
    "text": "mathematics and arithmetic and logic it's where we do our high level reasoning it's also very slow and it's",
    "start": "127880",
    "end": "134000"
  },
  {
    "text": "because it's so slow that we had to invent computers because system 2 just can't generate the numers as fast as we",
    "start": "134000",
    "end": "140440"
  },
  {
    "text": "need them um and also it requires a lot of effort to run system to so we tend to",
    "start": "140440",
    "end": "146480"
  },
  {
    "text": "turn it off as much as possible then there's system syst one system one is",
    "start": "146480",
    "end": "152239"
  },
  {
    "text": "heuristic it's associative it is very very fast and you cannot turn it off one",
    "start": "152239",
    "end": "158720"
  },
  {
    "text": "of the characteristics of system one is that if it is given a problem that is",
    "start": "158720",
    "end": "163959"
  },
  {
    "text": "too difficult for it to solve it will substitute a simpler problem and solve that",
    "start": "163959",
    "end": "169480"
  },
  {
    "text": "instead now um the fact that there are these two systems is not surprising uh",
    "start": "169480",
    "end": "174879"
  },
  {
    "text": "we've always been aware of that you know my head tells me one thing but my gut tells me something else head and gut",
    "start": "174879",
    "end": "182680"
  },
  {
    "text": "very easily map on to system 2 and system one the thing which is surprising is that system one provides the working",
    "start": "182680",
    "end": "192280"
  },
  {
    "text": "assumptions for system two and system two is completely unaware of that um and because system two or system one is",
    "start": "192280",
    "end": "200640"
  },
  {
    "text": "associative and approximate and has no understanding of mathematics it",
    "start": "200640",
    "end": "205760"
  },
  {
    "text": "frequently gets things wrong um but system too is trying to do logic with",
    "start": "205760",
    "end": "211720"
  },
  {
    "text": "these false assumptions and as you know if you have a logical system with false inputs you can get false outputs and it",
    "start": "211720",
    "end": "217760"
  },
  {
    "text": "turns out we do this all the time the more you read Conan the more amazing it is that we ever get anything done",
    "start": "217760",
    "end": "224239"
  },
  {
    "text": "because we are really fible creatures so I'm going to give you an",
    "start": "224239",
    "end": "229360"
  },
  {
    "text": "example of of how these two systems work from visual processing visual processing",
    "start": "229360",
    "end": "234879"
  },
  {
    "text": "is the opposite of computer Graphics it's where you take a signal from a camera extracted pixels and analyze the",
    "start": "234879",
    "end": "241680"
  },
  {
    "text": "pixels in order to figure out what all the objects are in the scene and how they are all moving relative to each",
    "start": "241680",
    "end": "247840"
  },
  {
    "text": "other and the camera it turns out just to walk around in the world it's really important to be able to solve these",
    "start": "247840",
    "end": "253239"
  },
  {
    "text": "problems and it's really hard computers have a very difficult time doing this",
    "start": "253239",
    "end": "258720"
  },
  {
    "text": "but we're able to do it all the time and there's obvious evolutionary value in order in being able to do that you know",
    "start": "258720",
    "end": "265280"
  },
  {
    "text": "when you're being chased Through the Jungle by the SaberCat you need to solve the problem of how you get through the",
    "start": "265280",
    "end": "270440"
  },
  {
    "text": "thing and also do the latency compensation because it takes time for this hunk of meat to to work out the",
    "start": "270440",
    "end": "275960"
  },
  {
    "text": "calculations but you need to anticipate where you're about to be in order to keep your feet moving we do that without",
    "start": "275960",
    "end": "282280"
  },
  {
    "text": "even thinking about it which is really quite remarkable but in order to do that",
    "start": "282280",
    "end": "287720"
  },
  {
    "text": "we will substitute the solutions to simpler problems rather than hard problems which sometimes give us",
    "start": "287720",
    "end": "294720"
  },
  {
    "text": "incorrect results and we can observe that in optical illusions this is an illusion developed by um Edward Adon of",
    "start": "294720",
    "end": "303680"
  },
  {
    "text": "MIT here we have a a a checkered board with white squares and black squares and a cylinder on it and two of the squares",
    "start": "303680",
    "end": "311080"
  },
  {
    "text": "are labeled A and B it turns out A and B are exactly the same color if you're to",
    "start": "311080",
    "end": "316320"
  },
  {
    "text": "load this into Photoshop and and test the pixels they are exactly the same pixel values and that may be a surprise",
    "start": "316320",
    "end": "323080"
  },
  {
    "text": "to most of you so to to prove that in fact they are the same I'll take a solid",
    "start": "323080",
    "end": "328639"
  },
  {
    "text": "colored Square and connect them you can see there's no break it's completely continuous they are the same color now",
    "start": "328639",
    "end": "336199"
  },
  {
    "text": "some of you may be seeing a gradient there connecting them it there's no gradient it's solid color um and you can",
    "start": "336199",
    "end": "344759"
  },
  {
    "text": "prove that by covering up square B with your hand um and the gradient",
    "start": "344759",
    "end": "350199"
  },
  {
    "text": "disappears and then if you drop it the gradient reappears now you know the truth of this",
    "start": "350199",
    "end": "358039"
  },
  {
    "text": "picture your brain is lying to you there's this component in our heads",
    "start": "358039",
    "end": "363600"
  },
  {
    "text": "which when presented with inconsistency will generate consistency and that's",
    "start": "363600",
    "end": "368880"
  },
  {
    "text": "probably a good thing because computers when they become inconsistent are likely to fall over um but when you're running",
    "start": "368880",
    "end": "376080"
  },
  {
    "text": "through the jungle you don't want to be falling over because you get some inconsistent data so instead we've got",
    "start": "376080",
    "end": "382280"
  },
  {
    "text": "systems which are working continuously to try to make consistent what is",
    "start": "382280",
    "end": "387759"
  },
  {
    "text": "inconsistent and sometimes that tells us that things are true which are not",
    "start": "387759",
    "end": "392960"
  },
  {
    "text": "true now it turns out all of this stuff was not news to the advertising industry",
    "start": "392960",
    "end": "398000"
  },
  {
    "text": "they've been depending on this stuff for a long long time that they could convince us that we needed things that",
    "start": "398000",
    "end": "404880"
  },
  {
    "text": "we do not need by creating messages and Target targeting them directly to the gut to to system one um and system one",
    "start": "404880",
    "end": "413160"
  },
  {
    "text": "will receive those messages system two can be oblivious to them um but once system one determines that there's a",
    "start": "413160",
    "end": "419319"
  },
  {
    "text": "need system 2 is hopeless to resist and nobody understood this better than the",
    "start": "419319",
    "end": "425840"
  },
  {
    "text": "tobacco industry because you look at tobacco how do you sell tobacco what does it do it makes you smell bad it",
    "start": "425840",
    "end": "433160"
  },
  {
    "text": "turns your teeth yellow it makes you sick and then it kills you so how do you",
    "start": "433160",
    "end": "438560"
  },
  {
    "text": "convince people yeah I want to do that um you give them images which are",
    "start": "438560",
    "end": "444960"
  },
  {
    "text": "confusing and um you know for example um the gut is very much attuned to",
    "start": "444960",
    "end": "450400"
  },
  {
    "text": "immediate danger you know uh fight or flight is associated with that um but",
    "start": "450400",
    "end": "456599"
  },
  {
    "text": "slow death is confused with good for you and so um you know it's it's we're",
    "start": "456599",
    "end": "463840"
  },
  {
    "text": "not reliable so that is the brain that we're using to write computer programs",
    "start": "463840",
    "end": "469360"
  },
  {
    "text": "um and there's nothing in our evolutionary background to suggest we should be able to do this and somehow we're able to do it anyway and it's",
    "start": "469360",
    "end": "475960"
  },
  {
    "text": "really hard because programs are the most complicated things that human make um they're made up of a large number of",
    "start": "475960",
    "end": "482680"
  },
  {
    "text": "pieces a lot of operators and variables and structures and they all have to work",
    "start": "482680",
    "end": "488000"
  },
  {
    "text": "together and we don't have anything else that contains as many component parts as",
    "start": "488000",
    "end": "493520"
  },
  {
    "text": "programs so very early on it was recognized programming is way too difficult we need to get the machine to",
    "start": "493520",
    "end": "499560"
  },
  {
    "text": "be writing the programs for us because in many ways it's smarter than we are um",
    "start": "499560",
    "end": "504599"
  },
  {
    "text": "so one of the first goals of artificial intelligence was to be able to give a specification of a program to a machine",
    "start": "504599",
    "end": "512159"
  },
  {
    "text": "and let the machine write the program and that completely failed",
    "start": "512159",
    "end": "517200"
  },
  {
    "text": "artificial intelligence has been able to do a lot of amazing things um it plays really good chess now uh you can play a",
    "start": "517200",
    "end": "523599"
  },
  {
    "text": "pretty good game of Jeopardy but you can't give a set of requirements and and a stack of cons of customer interviews",
    "start": "523599",
    "end": "530360"
  },
  {
    "text": "to a program and ask it to write another program um if you could then what we",
    "start": "530360",
    "end": "536240"
  },
  {
    "text": "could do is ask the program okay now write a program that's better than than you and we keep doing that until they",
    "start": "536240",
    "end": "542120"
  },
  {
    "text": "take over um but that hasn't happened and it hasn't happened because uh we",
    "start": "542120",
    "end": "547839"
  },
  {
    "text": "don't really know how we do programming at least not well enough that we can tell a computer how to do it what",
    "start": "547839",
    "end": "553800"
  },
  {
    "text": "computers can do is translate one formal language into another that's something",
    "start": "553800",
    "end": "560399"
  },
  {
    "text": "that is algorithmic and they can do it very effectively and so we leverage that in programming languages because that's",
    "start": "560399",
    "end": "567279"
  },
  {
    "text": "what a programming language is it's a mapping of one language to another and every generation or so we raise the",
    "start": "567279",
    "end": "574279"
  },
  {
    "text": "level of abstraction up to where things are easier um which gives us more uh",
    "start": "574279",
    "end": "581000"
  },
  {
    "text": "leverage the ability to write more and more complex stuff um the the hardest thing about",
    "start": "581000",
    "end": "588839"
  },
  {
    "text": "programming is that it requires Perfection a program has to be perfect in every aspect for all possible inputs",
    "start": "588839",
    "end": "596680"
  },
  {
    "text": "in all possible States and that's hard um because the contract we have with the",
    "start": "596680",
    "end": "602000"
  },
  {
    "text": "computer is if the program is not perfect then the computer has licensed",
    "start": "602000",
    "end": "607720"
  },
  {
    "text": "to do the worst possible thing at the worst possible time and it's not even the computer's fault whose fault is it",
    "start": "607720",
    "end": "615399"
  },
  {
    "text": "it's your fault you you're the guys that get the call why is the thing not working um but it's not surprising that",
    "start": "615399",
    "end": "621839"
  },
  {
    "text": "it's not working because um you know given that that's the case we would want to never release",
    "start": "621839",
    "end": "628839"
  },
  {
    "text": "a piece of software until we were convinced it was perfect but we don't do that for a number of reasons one is we",
    "start": "628839",
    "end": "635120"
  },
  {
    "text": "wouldn't know perfect if we saw it we we have no way of determining if a piece of software is perfect there's no test no",
    "start": "635120",
    "end": "641760"
  },
  {
    "text": "way to know um so we wouldn't know it if we saw it but even if we could it'",
    "start": "641760",
    "end": "647800"
  },
  {
    "text": "probably take too long and we could not afford the time it would take to reach Perfection before we got some utility",
    "start": "647800",
    "end": "653040"
  },
  {
    "text": "out of it so instead we release the software in a form which we know is",
    "start": "653040",
    "end": "658079"
  },
  {
    "text": "imperfect and and hope that any imperfections can be found before anybody",
    "start": "658079",
    "end": "663440"
  },
  {
    "text": "notices we call that beta and and that's the state-ofthe-art that's the best we figured out how to do which is crazy but",
    "start": "663440",
    "end": "671000"
  },
  {
    "text": "that's where we are um and we are there because we are",
    "start": "671000",
    "end": "676079"
  },
  {
    "text": "hunters and gatherers there's been no human evolution since the Ice Age um and",
    "start": "676079",
    "end": "681120"
  },
  {
    "text": "there's nothing in our Evolution to have prepared us for this so it's sort of a",
    "start": "681120",
    "end": "686200"
  },
  {
    "text": "miracle that we're able to do this at all um so Evolution likes dual use Technologies",
    "start": "686200",
    "end": "693240"
  },
  {
    "text": "it develops something for some purpose and then finds another use for it and I think that happened uh for programming",
    "start": "693240",
    "end": "699560"
  },
  {
    "text": "as well so obviously we're using the head we're using system to because so much of what we do is analytical we're",
    "start": "699560",
    "end": "705160"
  },
  {
    "text": "keeping all the state in our heads and manipulating it until we can get it down into a representation that can execute",
    "start": "705160",
    "end": "712760"
  },
  {
    "text": "but I think the gut also has a role in this because we cannot describe how we do programming you can't can't write",
    "start": "712760",
    "end": "719600"
  },
  {
    "text": "down a list of steps and give it to someone and say that's how you write a program you know you kind of go top down",
    "start": "719600",
    "end": "725160"
  },
  {
    "text": "for a while and then you kind of bottom up and you're inside out and macro view micro view you're constantly shifting",
    "start": "725160",
    "end": "730480"
  },
  {
    "text": "around looking at the problem from all aspects until finally sort of the program starts to come into shape and we",
    "start": "730480",
    "end": "737040"
  },
  {
    "text": "don't know how we do that there's no way we can describe that and that's somehow we all figure it out um but we don't",
    "start": "737040",
    "end": "744560"
  },
  {
    "text": "know how we figured it out and that's why we can't teach computers to do this and I think that there's some some role",
    "start": "744560",
    "end": "751560"
  },
  {
    "text": "for the gut in doing that that somehow um it does this counterintuitive thing",
    "start": "751560",
    "end": "758160"
  },
  {
    "text": "which gives us these flashes of insight which finally help us to find a solution",
    "start": "758160",
    "end": "763560"
  },
  {
    "text": "and allows us to go forward so I think programming would not be possible without system one without the gut now I",
    "start": "763560",
    "end": "771480"
  },
  {
    "text": "have absolutely no evidence to support that statement but my gut tells me it's true so I believe",
    "start": "771480",
    "end": "777440"
  },
  {
    "text": "it um I programming is all about trade-offs right there's rarely the",
    "start": "777440",
    "end": "782560"
  },
  {
    "text": "absolutely correct way to do something there are always tradeoffs and we tend",
    "start": "782560",
    "end": "788040"
  },
  {
    "text": "to make most of our trade-offs with our gut which is a problem because it doesn't understand arithmetic it",
    "start": "788040",
    "end": "793320"
  },
  {
    "text": "confuses confuses a lot of things for example it thinks most has more weight",
    "start": "793320",
    "end": "798800"
  },
  {
    "text": "than all um it thinks not very much is the same as nothing um it's really bad",
    "start": "798800",
    "end": "805000"
  },
  {
    "text": "at math but we use our gut in in doing trade offs and that very often gets us",
    "start": "805000",
    "end": "810480"
  },
  {
    "text": "into trouble so I'm going to be giving you some examples of programming style in",
    "start": "810480",
    "end": "815720"
  },
  {
    "text": "JavaScript the the theory that I'm going to give you Works in all languages but JavaScript is particularly good for",
    "start": "815720",
    "end": "822560"
  },
  {
    "text": "these sorts of examples uh because it has some of the best parts ever in a language and most of the worst Parts",
    "start": "822560",
    "end": "829040"
  },
  {
    "text": "ever put into a programming language JavaScript has by far more bad parts than any other popular",
    "start": "829040",
    "end": "836120"
  },
  {
    "text": "language um so adopting a programming style which helps to mitigate that Badness is really important um and",
    "start": "836120",
    "end": "843440"
  },
  {
    "text": "because there's so much Badness in the language and all the traps that that Badness sets for me I don't trust myself",
    "start": "843440",
    "end": "850519"
  },
  {
    "text": "to program in the language without good tool support so I wrote something called",
    "start": "850519",
    "end": "855720"
  },
  {
    "text": "jslint which is written in JavaScript which reads my JavaScript programs and",
    "start": "855720",
    "end": "860880"
  },
  {
    "text": "tells me when I'm using the bad parts so that I can know okay that's bad stuff I",
    "start": "860880",
    "end": "866440"
  },
  {
    "text": "don't want to be doing that um because it's really easy to stray into the sharp",
    "start": "866440",
    "end": "871639"
  },
  {
    "text": "edges in this language they their traps all over the place and it's free and it's available to everybody um and it",
    "start": "871639",
    "end": "878519"
  },
  {
    "text": "comes with this warning it says warning JS lint will hurt your feelings and it's",
    "start": "878519",
    "end": "884040"
  },
  {
    "text": "true um I've I've had my feelings hurt by it and I erod it um and I hear from",
    "start": "884040",
    "end": "889279"
  },
  {
    "text": "people all the time whining jasine hurt my feelings you know can you f of Make It Stop you know recognize my special",
    "start": "889279",
    "end": "896839"
  },
  {
    "text": "needs that I have to write crappy code this way so so can you be more forgiving um and so I I've been hearing this",
    "start": "896839",
    "end": "903800"
  },
  {
    "text": "whining for years and years and at some point I start wondering why is this why",
    "start": "903800",
    "end": "908959"
  },
  {
    "text": "why are people whining because what this is It's a code Quality Tool you don't have to use it but if you decide you",
    "start": "908959",
    "end": "914600"
  },
  {
    "text": "want to use it it's because you want it to inform you about ways to make your",
    "start": "914600",
    "end": "920040"
  },
  {
    "text": "program better stronger more resilient and when it offers you that good advice",
    "start": "920040",
    "end": "925079"
  },
  {
    "text": "you go I don't want to do that and and and they start crying and you go wait a minute there's no crying in programming",
    "start": "925079",
    "end": "931120"
  },
  {
    "text": "why are people getting so upset why are they getting so emotional you know programmers can argue endlessly about",
    "start": "931120",
    "end": "937519"
  },
  {
    "text": "stuff which appears to be of no consequence but from the intensity of their arguments appears to be really",
    "start": "937519",
    "end": "943959"
  },
  {
    "text": "important you know for example you put curly braces on the left or on the right now when Ken Thompson designed the bee",
    "start": "943959",
    "end": "950120"
  },
  {
    "start": "945000",
    "end": "945000"
  },
  {
    "text": "language when Dennis Richie added uh Pascal types to it to to create the C",
    "start": "950120",
    "end": "956199"
  },
  {
    "text": "language they were putting the curly braces on the right just because it seemed to make sense it turns out",
    "start": "956199",
    "end": "961440"
  },
  {
    "text": "there's not a good reason for why you should do it one way or the other it's sort of like driving should we drive on",
    "start": "961440",
    "end": "967360"
  },
  {
    "text": "the left side of the road or the right is not a good argument you know people in England drive as well as people in",
    "start": "967360",
    "end": "973480"
  },
  {
    "text": "Europe uh there's no evidence to suggest that one is safer or more efficient than",
    "start": "973480",
    "end": "979000"
  },
  {
    "text": "the other it's just a convention um so you know you can't say if you should be",
    "start": "979000",
    "end": "984680"
  },
  {
    "text": "on the left or right but there's a really good reason for why we should all be on the same side and we're lucky there's not a bridge",
    "start": "984680",
    "end": "991480"
  },
  {
    "text": "from London to the rest of the world because that would get confusing but we don't so you know we got",
    "start": "991480",
    "end": "996519"
  },
  {
    "text": "compartmentalization there um now there were other people in",
    "start": "996519",
    "end": "1002160"
  },
  {
    "text": "Thompson's Lab at at at Bell Labs who said we want to put them on the left and I'm sure they had a meeting about it and",
    "start": "1002160",
    "end": "1009079"
  },
  {
    "text": "after a while Thompson said hell with this I don't care this is a stupid argument there's not a good reason one way or the other do what you want just",
    "start": "1009079",
    "end": "1016360"
  },
  {
    "text": "don't invite me to any more meetings just leave me out of it um and it's a",
    "start": "1016360",
    "end": "1021639"
  },
  {
    "text": "shame because Thompson could have said you know could have had the compiler say it's got to be on the right down and",
    "start": "1021639",
    "end": "1028240"
  },
  {
    "text": "otherwise it's a syntax error because he didn't do that who knows how many man",
    "start": "1028240",
    "end": "1033319"
  },
  {
    "text": "centuries we've wasted arguing about should it be on the left or on the right and we get really upset so if someone",
    "start": "1033319",
    "end": "1039678"
  },
  {
    "text": "who's used to putting them on the left goes to work for a shop that puts him on the right and they say okay now that",
    "start": "1039679",
    "end": "1044720"
  },
  {
    "text": "you're working here you got to put them on the right he's going to go no I don't want to put him on the right that's so",
    "start": "1044720",
    "end": "1049919"
  },
  {
    "text": "wrong can't you see how wrong that is and system two will start rationalizing because system one is saying this is",
    "start": "1049919",
    "end": "1055679"
  },
  {
    "text": "wrong damn it so system 2 is going yeah that that's right it is wrong why is it wrong it starts making up all these",
    "start": "1055679",
    "end": "1061919"
  },
  {
    "text": "things and none of them make any sense because there's not a good reason to prefer one or the other it's just a Content it's punctuation it's just",
    "start": "1061919",
    "end": "1069280"
  },
  {
    "text": "punctuation um you know why are we getting so upset about punctuation so",
    "start": "1069280",
    "end": "1074520"
  },
  {
    "text": "ultimately where should we put them I don't know and there's not a good answer to that question except it turns out in",
    "start": "1074520",
    "end": "1081640"
  },
  {
    "text": "JavaScript where there is turns out in JavaScript you want to always put them on the right and never on the left and",
    "start": "1081640",
    "end": "1087840"
  },
  {
    "text": "this is why um um one of the things we do commonly",
    "start": "1087840",
    "end": "1092960"
  },
  {
    "text": "in JavaScript is return an object literal which produces a new object this",
    "start": "1092960",
    "end": "1098280"
  },
  {
    "text": "is a common pattern we do this a lot and if you put the curly brace on the right it always does the right thing and if",
    "start": "1098280",
    "end": "1104880"
  },
  {
    "text": "you put the curly brace on the left it returns undefined instead of your object",
    "start": "1104880",
    "end": "1110600"
  },
  {
    "text": "and it doesn't produce in this case any other warning there's no syntax uh syntax error there's no",
    "start": "1110600",
    "end": "1117240"
  },
  {
    "text": "runtime error it's just at some point your program is going to notice we expected a function to be here and we",
    "start": "1117240",
    "end": "1123520"
  },
  {
    "text": "get the undefined value instead um and that could be a a large distance away",
    "start": "1123520",
    "end": "1129360"
  },
  {
    "text": "from where this error actually happened and so then you have to start debugging and walk it back and you might actually",
    "start": "1129360",
    "end": "1136360"
  },
  {
    "text": "bring it back to this statement and go well don't get it it's there you know you can look at that code for an hour",
    "start": "1136360",
    "end": "1142159"
  },
  {
    "text": "not understand where the object disappeared um this is because of a horrible design error in JavaScript",
    "start": "1142159",
    "end": "1148480"
  },
  {
    "text": "called automatic semicolon insertion um it was a well-intentioned feature but",
    "start": "1148480",
    "end": "1154880"
  },
  {
    "text": "it's a terrible feature it's one of the very bad parts of the language and in this case it causes this problem so um",
    "start": "1154880",
    "end": "1163520"
  },
  {
    "text": "if you always put your curly braces on the right you will never experience this",
    "start": "1163520",
    "end": "1169240"
  },
  {
    "text": "and if you put your curly braces on the left the day will come when you're going to endure this pain um so you look at it",
    "start": "1169240",
    "end": "1177000"
  },
  {
    "text": "in terms of a trade-off okay uh what's the difference in cost of putting the curly braces on the left or right none",
    "start": "1177000",
    "end": "1183360"
  },
  {
    "text": "there is no cost uh what's the benefit we can avoid a terrible time consuming",
    "start": "1183360",
    "end": "1189320"
  },
  {
    "text": "headache that's a good trade-off for nothing I get a little bit of immunity from from a particularly nasty bug that",
    "start": "1189320",
    "end": "1195880"
  },
  {
    "text": "that's a good tradeoff so we should prefer forms that are error resistant because we're trying",
    "start": "1195880",
    "end": "1202919"
  },
  {
    "text": "to be perfect and so we want to avoid errors wherever we can so another thing that Thompson came up with was the",
    "start": "1202919",
    "end": "1208799"
  },
  {
    "text": "switch statement he he took wh's case statement and filtered it through the Fortran computed goto now Dyer said that",
    "start": "1208799",
    "end": "1216679"
  },
  {
    "text": "uh goto was harmful and he was right and it took us a generation to get rid of goto but it still exists in all modern",
    "start": "1216679",
    "end": "1223360"
  },
  {
    "text": "languages in the form of the switch statement so um there's a hazard where",
    "start": "1223360",
    "end": "1229799"
  },
  {
    "text": "you can have one casee fall through into the next case and one day um someone",
    "start": "1229799",
    "end": "1235559"
  },
  {
    "text": "wrote to me and said JS lint should check for this because it's a subtle error and it's difficult to see from",
    "start": "1235559",
    "end": "1241480"
  },
  {
    "text": "reading the text but it can really uh cause problems and I thought about it really",
    "start": "1241480",
    "end": "1249360"
  },
  {
    "text": "carefully and I wrote back to him um I I can understand how that could happen but there is this Elegance that",
    "start": "1249360",
    "end": "1256159"
  },
  {
    "text": "happens when you can line up all the cases and get them to Cascade one into another that Elegance is really highly",
    "start": "1256159",
    "end": "1262880"
  },
  {
    "text": "desirable and the error could happen but it hardly ever happens and so looking at in terms of trade-offs you got Elegance",
    "start": "1262880",
    "end": "1269240"
  },
  {
    "text": "versus hardly ever happens I think this is actually a good feature of the language I'm not going to report on it",
    "start": "1269240",
    "end": "1276240"
  },
  {
    "text": "next day the same guy wrote to me and said I found a bug in JS lint so good okay so I throw it in the debugger you",
    "start": "1276240",
    "end": "1282240"
  },
  {
    "text": "know what happened I had a case that was falling through and in that moment I achieved enlightenment",
    "start": "1282240",
    "end": "1290520"
  },
  {
    "text": "because it turns out we spend an enormous amount of time tracking down errors um we like to think we spend most",
    "start": "1290520",
    "end": "1297679"
  },
  {
    "text": "of our time power typing but that's not where the time goes the time goes in correcting our mistakes and it's painful",
    "start": "1297679",
    "end": "1304559"
  },
  {
    "text": "in and time consuming and we tend to Black it out once once we found it we get this little rush of euphoria and go",
    "start": "1304559",
    "end": "1310720"
  },
  {
    "text": "ah good back to Power typing um but in this particular instance it was so",
    "start": "1310720",
    "end": "1316559"
  },
  {
    "text": "humiliating because I just given the speech about how this was a good feature and boom it I can't ignore the evidence",
    "start": "1316559",
    "end": "1324840"
  },
  {
    "text": "in fact that this is a bad feature so I was forced in this one instance to learn",
    "start": "1324840",
    "end": "1331080"
  },
  {
    "text": "from my mistakes which is rare it's something I'd like to do more of but generally we don't do it very often um",
    "start": "1331080",
    "end": "1337480"
  },
  {
    "text": "so I adopted a new strategy with respect to switch statements that I never",
    "start": "1337480",
    "end": "1342840"
  },
  {
    "text": "intentionally fall through which means I can now find the cases where I accidentally fall through um it's hard",
    "start": "1342840",
    "end": "1350039"
  },
  {
    "text": "to find The Accidental cases when you've got the intentional cases",
    "start": "1350039",
    "end": "1356559"
  },
  {
    "text": "um yeah so um so what was my error I I said that hardly ever happens which",
    "start": "1357400",
    "end": "1362840"
  },
  {
    "text": "means the same thing is it happens um that's the gut talking the gut is really",
    "start": "1362840",
    "end": "1368760"
  },
  {
    "text": "bad at math and I was depending on the gut in in doing this evaluation um also I was wrong in the",
    "start": "1368760",
    "end": "1376520"
  },
  {
    "text": "the Elegance argument it turns out what is the cash value of that AR of that Elegance it turns out there isn't any",
    "start": "1376520",
    "end": "1383600"
  },
  {
    "text": "and and perhaps there is even a negative value because it can often cause you to do uh coupling and weird code",
    "start": "1383600",
    "end": "1390159"
  },
  {
    "text": "convolution in order to achieve this Cascade which in fact has no values you can actually make the code",
    "start": "1390159",
    "end": "1396120"
  },
  {
    "text": "crustier um so it turns out not to be worth it um so don't fall through so a",
    "start": "1396120",
    "end": "1402520"
  },
  {
    "text": "good style can help produce better programs style should not be about personal preference or self expression",
    "start": "1402520",
    "end": "1408960"
  },
  {
    "text": "it should be about driving down your error rate because ultimately that's the thing that's important um and we can",
    "start": "1408960",
    "end": "1415200"
  },
  {
    "text": "learn something about programming style from literary style um the Romans wrote Latin all in uppercase with no word",
    "start": "1415200",
    "end": "1421840"
  },
  {
    "text": "breaks punctuation and this worked for them they were able to to produce great literature",
    "start": "1421840",
    "end": "1428000"
  },
  {
    "text": "um to our Modern Eyes this is hard to read um and and there were ambiguities",
    "start": "1428000",
    "end": "1433159"
  },
  {
    "text": "which could make things difficult for example the third line could be read as now or DB Greeks now we we know it",
    "start": "1433159",
    "end": "1440640"
  },
  {
    "text": "doesn't mean that but it could um but this worked well I mean they were the greatest Empire in the world for a while",
    "start": "1440640",
    "end": "1447720"
  },
  {
    "text": "um but when Constantine adopted Christianity as the state religion of the Roman Empire it became necessary to",
    "start": "1447720",
    "end": "1454919"
  },
  {
    "text": "take the scriptures and copy them and send them all over the world and this presented a problem",
    "start": "1454919",
    "end": "1460840"
  },
  {
    "text": "because they did not have Originals of any of the documents all they had were copies of copies of copies and none of",
    "start": "1460840",
    "end": "1467320"
  },
  {
    "text": "the copies agreed every copy was different um because it turns out um",
    "start": "1467320",
    "end": "1473559"
  },
  {
    "text": "this is an an error inducing format um medieval copyists introduced",
    "start": "1473559",
    "end": "1482120"
  },
  {
    "text": "lowercase word breaks and punctuation and these Innovations helped to reduce",
    "start": "1482120",
    "end": "1487360"
  },
  {
    "text": "the error rate it made it easier for them to copy the manuscripts and distribute them they also had the",
    "start": "1487360",
    "end": "1492760"
  },
  {
    "text": "unexpected benefit of making the manuscripts easier to read and interpret and that turned out to be us ful too so",
    "start": "1492760",
    "end": "1499200"
  },
  {
    "text": "when Gutenberg started printing he copied these conventions and we're still using these",
    "start": "1499200",
    "end": "1504360"
  },
  {
    "text": "conventions today the conventions we have of of capitalizing the beginning of a sentence and putting a period at the",
    "start": "1504360",
    "end": "1510039"
  },
  {
    "text": "end of it all of that we've been doing that for hundreds and hundreds of years and it works we've all gone we've all been",
    "start": "1510039",
    "end": "1517720"
  },
  {
    "text": "schooled in this stuff um it all looks right to us you know so a sloppy reader might say well it doesn't matter if I",
    "start": "1517720",
    "end": "1523520"
  },
  {
    "text": "put the periods in the right place because the reader can figure it out but we know you don't want to be doing that",
    "start": "1523520",
    "end": "1528559"
  },
  {
    "text": "because it makes you look illiterate and it distracts the reader from the message you want them to be focusing on your on",
    "start": "1528559",
    "end": "1535360"
  },
  {
    "text": "your writing and not on your punctuation you know so you you never see um a great",
    "start": "1535360",
    "end": "1540799"
  },
  {
    "text": "author saying I'm such a great stylist I'm going to put all my periods at the beginning of the sentences and not the",
    "start": "1540799",
    "end": "1546520"
  },
  {
    "text": "end you you just don't see that because it it would look stupid um so um good style can help",
    "start": "1546520",
    "end": "1555120"
  },
  {
    "text": "reduce the occurrence of Errors it works in literature going to work in programming too um there are lots of",
    "start": "1555120",
    "end": "1561559"
  },
  {
    "text": "good style uh books around one of the the best ones is the elements of style written by um William Strunk it was",
    "start": "1561559",
    "end": "1568840"
  },
  {
    "text": "self-published about a 100 years ago English has evolved some since then so",
    "start": "1568840",
    "end": "1574360"
  },
  {
    "text": "some of his advice is a little dated but a lot of it is still really good it's all about good composition and good use",
    "start": "1574360",
    "end": "1581360"
  },
  {
    "text": "of language and a number of writers have adapted the elements of style to",
    "start": "1581360",
    "end": "1587039"
  },
  {
    "text": "programming languages and it's a very good mapping um so programs must",
    "start": "1587039",
    "end": "1592279"
  },
  {
    "text": "communicate clearly to people there's a school of thought that says it only matters that the compiler understand it",
    "start": "1592279",
    "end": "1598200"
  },
  {
    "text": "but that's wrong especially as we're getting more agile as we're doing more team development it's necessary for",
    "start": "1598200",
    "end": "1603840"
  },
  {
    "text": "everybody to understand the program so Clarity is essential um so we should be using the",
    "start": "1603840",
    "end": "1610960"
  },
  {
    "text": "elements of good style wherever possible and in in fact most of or a lot of the",
    "start": "1610960",
    "end": "1616039"
  },
  {
    "text": "conventions of literature map very nicely under programming languages um so",
    "start": "1616039",
    "end": "1622279"
  },
  {
    "text": "you know we have conventions where we put a space after a comma and not before",
    "start": "1622279",
    "end": "1627520"
  },
  {
    "text": "um and and this you know in literature that doesn't impede a writer because a",
    "start": "1627520",
    "end": "1633399"
  },
  {
    "text": "good writer will slavishly conform to the elements of style and express his",
    "start": "1633399",
    "end": "1638600"
  },
  {
    "text": "creativity in his words in his structures in his in his images um you",
    "start": "1638600",
    "end": "1644760"
  },
  {
    "text": "know so you don't need to be messing with punctuation in order to prove that you're creative",
    "start": "1644760",
    "end": "1650080"
  },
  {
    "text": "um programming languages require more Precision than literature does um so we",
    "start": "1650080",
    "end": "1655559"
  },
  {
    "text": "can have conventions to help uh disambiguate things like um we use parents to do uh grouping and statement",
    "start": "1655559",
    "end": "1663720"
  },
  {
    "text": "structures and we also use it for invoking functions so we can use uh",
    "start": "1663720",
    "end": "1669000"
  },
  {
    "text": "strategically spaced placed spaces in order to help disambiguate",
    "start": "1669000",
    "end": "1674960"
  },
  {
    "start": "1674000",
    "end": "1674000"
  },
  {
    "text": "those um one of the good parts in JavaScript is its functions uh they're",
    "start": "1674960",
    "end": "1681240"
  },
  {
    "text": "they're brilliant um but it didn't get everything right so one of the things",
    "start": "1681240",
    "end": "1686360"
  },
  {
    "text": "that's useful is the immediately invoked function expression where we create a function and then immediately execute it",
    "start": "1686360",
    "end": "1693519"
  },
  {
    "text": "uh that gives us um a closure um and a scope which helps us to uh contain and",
    "start": "1693519",
    "end": "1701080"
  },
  {
    "text": "and bind variables which is a really useful thing but unfortunately in statement position this form turn turns",
    "start": "1701080",
    "end": "1708279"
  },
  {
    "text": "out to be a syntax error because of the design flaw so uh people figured out that you",
    "start": "1708279",
    "end": "1714440"
  },
  {
    "text": "could overcome this flaw by wrapping the function in parenthesis and now it's not",
    "start": "1714440",
    "end": "1719519"
  },
  {
    "text": "in statement position anymore and it does the correct thing um but I think",
    "start": "1719519",
    "end": "1724600"
  },
  {
    "text": "this is missing something because I want to do more than just trick the compiler into accepting this I want to make it",
    "start": "1724600",
    "end": "1730480"
  },
  {
    "text": "clear to the reader what's going on here um and this use of parentheses doesn't communicate that um and in fact we've",
    "start": "1730480",
    "end": "1738880"
  },
  {
    "text": "got the invoking parents hanging off there you know like a pair of dog balls just you know like they're not part of",
    "start": "1738880",
    "end": "1744799"
  },
  {
    "text": "this expression ladies might want to look away um so I I think this whole thing is",
    "start": "1744799",
    "end": "1752200"
  },
  {
    "text": "cleaner if we put the invoking parentheses around um the whole thing so",
    "start": "1752200",
    "end": "1757799"
  },
  {
    "text": "the outer parentheses say reader what's important here is this whole expression",
    "start": "1757799",
    "end": "1762880"
  },
  {
    "text": "that we are taking this function and invoking it look at the consider this whole thing as a unit because that is",
    "start": "1762880",
    "end": "1768640"
  },
  {
    "text": "what's important don't think of just the function I don't want them to maybe miss the invoking parentheses I want the",
    "start": "1768640",
    "end": "1775240"
  },
  {
    "text": "whole thing to be together um so I told you about",
    "start": "1775240",
    "end": "1780399"
  },
  {
    "start": "1777000",
    "end": "1777000"
  },
  {
    "text": "automatic semicolon insertion being one of the bad parts of JavaScript this is one of the places another place where uh",
    "start": "1780399",
    "end": "1786480"
  },
  {
    "text": "it hurts you so if you have an assignment statement followed by one of these parenthesized uh function",
    "start": "1786480",
    "end": "1793200"
  },
  {
    "text": "Expressions um you would hope that would insert a semicolon there but it doesn't",
    "start": "1793200",
    "end": "1798600"
  },
  {
    "text": "um so it will instead treat y as a function passing the result of the other",
    "start": "1798600",
    "end": "1803880"
  },
  {
    "text": "function as its argument which is wrong but you get no syntax warning here",
    "start": "1803880",
    "end": "1810360"
  },
  {
    "text": "because this is considered to be a correct statement even though it's obviously wrong um so the lesson here is",
    "start": "1810360",
    "end": "1817039"
  },
  {
    "text": "do not depend on JavaScript semicolon insertion again it was a well-intentioned feature but it is stupid in the way it",
    "start": "1817039",
    "end": "1824360"
  },
  {
    "text": "was designed um and you know so if if you look at the ecmascript standard which describes how this works it gives",
    "start": "1824360",
    "end": "1831399"
  },
  {
    "text": "you it shows you this case and it says oh by the way it fails in cases like this um so just because it's in the",
    "start": "1831399",
    "end": "1839640"
  },
  {
    "text": "language doesn't mean it's a good part it's a very bad part and should be avoided JavaScript has a width statement",
    "start": "1839640",
    "end": "1847320"
  },
  {
    "start": "1843000",
    "end": "1843000"
  },
  {
    "text": "that was modeled after Pascal's width statement um and this is another bad part so here we're saying uh with o Fu",
    "start": "1847320",
    "end": "1855240"
  },
  {
    "text": "equals Koda and it can expand into one of these four statements um I don't know",
    "start": "1855240",
    "end": "1860320"
  },
  {
    "text": "if anyone here knows JavaScript or if you could guess which of those four statements it will expand",
    "start": "1860320",
    "end": "1865480"
  },
  {
    "text": "into anybody it's a trick question it could",
    "start": "1865480",
    "end": "1872440"
  },
  {
    "text": "expand into any of them there's no way you can tell from reading this code which one it's going to do and in fact",
    "start": "1872440",
    "end": "1878360"
  },
  {
    "text": "every time the statement executes it could do a different one so since we're trying to be perfect",
    "start": "1878360",
    "end": "1885799"
  },
  {
    "text": "we can't have any confidence in a program that we cannot even read and and know what it does um so my advice is",
    "start": "1885799",
    "end": "1893519"
  },
  {
    "text": "never use the width statement it's got this ambiguity in it uh which makes it",
    "start": "1893519",
    "end": "1899039"
  },
  {
    "text": "um extremely unreliable also is terrible for performance um but ignoring the",
    "start": "1899039",
    "end": "1904799"
  },
  {
    "text": "performance problems it's just unreliable now there are a lot of clever people who have found uses for width and",
    "start": "1904799",
    "end": "1912120"
  },
  {
    "text": "they suggest that um you should be able to use it in limited uh places in the",
    "start": "1912120",
    "end": "1918240"
  },
  {
    "text": "cases where it actually does something useful um but I'm not saying that it isn't useful I'm saying that there's",
    "start": "1918240",
    "end": "1924480"
  },
  {
    "text": "never a case where it isn't confusing and confusion is the enemy when a program appears to be doing one thing",
    "start": "1924480",
    "end": "1929799"
  },
  {
    "text": "and does something else that's when errors happen so confusion must be",
    "start": "1929799",
    "end": "1935039"
  },
  {
    "text": "avoided um and in this case it's easy to avoid if you simply don't use that statement and write the thing that it",
    "start": "1935039",
    "end": "1942080"
  },
  {
    "text": "expands into instead um there's no confusion it's very clear what the program is doing",
    "start": "1942080",
    "end": "1949240"
  },
  {
    "start": "1949000",
    "end": "1949000"
  },
  {
    "text": "uh javascript's equality operator does type coercion before it does its equality operation so as a consequence",
    "start": "1949240",
    "end": "1956760"
  },
  {
    "text": "um you get a lot of false positives and you also lose transitivity which is something you would like to",
    "start": "1956760",
    "end": "1962480"
  },
  {
    "text": "have in in equality operator now fortunately JavaScript has a triple",
    "start": "1962480",
    "end": "1967600"
  },
  {
    "text": "equal operator which does the right thing in all of these cases um it it",
    "start": "1967600",
    "end": "1972880"
  },
  {
    "text": "only does the wrong thing in the case of man um so uh my advice is always use",
    "start": "1972880",
    "end": "1978960"
  },
  {
    "text": "triple equal never use double equal um because you avoid this confusion now there people who have",
    "start": "1978960",
    "end": "1986720"
  },
  {
    "text": "found the you know the rare case where double equal actually does exactly what",
    "start": "1986720",
    "end": "1991960"
  },
  {
    "text": "they want um so they ask well can I use double equal in that case and my advice",
    "start": "1991960",
    "end": "1997200"
  },
  {
    "text": "is no because the reader of your program doesn't know that you found the one case",
    "start": "1997200",
    "end": "2002600"
  },
  {
    "text": "where double equal does the right thing you know it it's more likely that you just made a mistake",
    "start": "2002600",
    "end": "2008320"
  },
  {
    "text": "so you want your programs to be clearly not mistakes if there's a feature of the",
    "start": "2008320",
    "end": "2013799"
  },
  {
    "text": "language that is sometimes problematic and if it can be replaced by another feature that is more reliable then",
    "start": "2013799",
    "end": "2019600"
  },
  {
    "text": "always use the more reliable feature um this is a relatively new",
    "start": "2019600",
    "end": "2025320"
  },
  {
    "text": "feature in JavaScript but it's been in other languages for a while multi-line string literal I don't like this for a",
    "start": "2025320",
    "end": "2031360"
  },
  {
    "text": "couple of reasons I think it was a mistake to put it into JavaScript uh first off is it breaks indentation",
    "start": "2031360",
    "end": "2037240"
  },
  {
    "text": "because the continuation has to go all the way out to the margin and we do a lot of nesting in our",
    "start": "2037240",
    "end": "2043679"
  },
  {
    "text": "programs you know we've got functions within functions and objects within objects and having things go out to the",
    "start": "2043679",
    "end": "2049240"
  },
  {
    "text": "margin breaks indentation and actually makes the programs more difficult to comprehend but worse than that we've got",
    "start": "2049240",
    "end": "2055000"
  },
  {
    "text": "the syntactic hazard so here we got two statements one is correct the other is a syntax error can anybody spot the syntax",
    "start": "2055000",
    "end": "2061560"
  },
  {
    "text": "error in the second line anybody",
    "start": "2061560",
    "end": "2068919"
  },
  {
    "text": "there's a space right here you know it's obvious once it's",
    "start": "2070800",
    "end": "2076280"
  },
  {
    "text": "pointed out right um but I want my programs to be",
    "start": "2076280",
    "end": "2081720"
  },
  {
    "text": "obviously correct you know so I don't want to be using forms that are difficult to distinguish from common",
    "start": "2081720",
    "end": "2087200"
  },
  {
    "text": "errors um so I just don't use this form I've got there at least two other ways in the language to to create long",
    "start": "2087200",
    "end": "2094320"
  },
  {
    "text": "strings um I'll use those instead in the next addition we're going to get um back tick strings which will work properly so",
    "start": "2094320",
    "end": "2102240"
  },
  {
    "text": "there's no reason to use this feature avoid forms that are difficult to distinguish from common",
    "start": "2102240",
    "end": "2109079"
  },
  {
    "text": "errors um this is something that was wrong in C and in JavaScript uh Java got",
    "start": "2109079",
    "end": "2114680"
  },
  {
    "text": "this one right so the first line looks like it does what the third line does",
    "start": "2114680",
    "end": "2120359"
  },
  {
    "text": "but it actually does what the second line does so when you get a program that looks like that you have to ask okay",
    "start": "2120359",
    "end": "2126680"
  },
  {
    "text": "what's going on here um is this an error or not the only thing you're sure of is that the programmer was incompetent",
    "start": "2126680",
    "end": "2133440"
  },
  {
    "text": "beyond that you really don't know so my advice is figure out which one of these",
    "start": "2133440",
    "end": "2138920"
  },
  {
    "text": "you mean and always write that instead um don't be writing um things that look",
    "start": "2138920",
    "end": "2144200"
  },
  {
    "text": "like errors make your programs look like what they do scope is one of the best inventions",
    "start": "2144200",
    "end": "2151560"
  },
  {
    "text": "in the history of programming languages we first got it in alol 60 and it's found its way into virtually all languages since then",
    "start": "2151560",
    "end": "2158560"
  },
  {
    "text": "most languages have block scope which means you know between any within any block within pearly braces any variables",
    "start": "2158560",
    "end": "2165800"
  },
  {
    "text": "defined in there are visible only within that block JavaScript doesn't do that",
    "start": "2165800",
    "end": "2170920"
  },
  {
    "text": "JavaScript has function scope which means any variable declared in a function is only visible within the",
    "start": "2170920",
    "end": "2177359"
  },
  {
    "text": "function um but um and it turns out that's enough",
    "start": "2177359",
    "end": "2182400"
  },
  {
    "text": "you can write good programs just having function scope the problem here is that",
    "start": "2182400",
    "end": "2187839"
  },
  {
    "text": "um JavaScript syntax looks exactly the same as languages that have block scope and so for programmers coming to",
    "start": "2187839",
    "end": "2194160"
  },
  {
    "text": "JavaScript from other languages they assume that the conventions they use for Block scope are what they should do and",
    "start": "2194160",
    "end": "2199440"
  },
  {
    "text": "in fact those conventions can fail in JavaScript because it doesn't respect block scope it only has function scope",
    "start": "2199440",
    "end": "2206800"
  },
  {
    "text": "um so um you know there are conventions in uh a a block scope language that say",
    "start": "2206800",
    "end": "2214319"
  },
  {
    "text": "you should declare the variable in the uh in the block which contains all uses",
    "start": "2214319",
    "end": "2219960"
  },
  {
    "text": "of it at the site of first use if possible and that's really good advice in such a language but if you don't have",
    "start": "2219960",
    "end": "2225800"
  },
  {
    "text": "block scope then the best advice is declare all of your variables at the top of the function because that's actually",
    "start": "2225800",
    "end": "2232079"
  },
  {
    "text": "what happens um JavaScript does this weird thing called hoisting where it splits a VAR statement into two pieces",
    "start": "2232079",
    "end": "2239040"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "and the Declaration part gets moved out of whatever block it was in to the top of the function if it turns out you had",
    "start": "2239040",
    "end": "2246160"
  },
  {
    "text": "a couple of blocks that were declaring the same variable name um both of those VAR definitions get moved to the top and",
    "start": "2246160",
    "end": "2253160"
  },
  {
    "text": "unified so what looked like two variables is actually one um and that is",
    "start": "2253160",
    "end": "2259359"
  },
  {
    "text": "a real source of confusion that can cause real errors so as a result of that in JavaScript um you need to declare all",
    "start": "2259359",
    "end": "2266880"
  },
  {
    "text": "of your variables at the top of the function and uh functions uh function statements do a similar kind of hoisting",
    "start": "2266880",
    "end": "2273800"
  },
  {
    "text": "thing um which has its own set of confusions so I recommend to clear all of your functions at um before you call",
    "start": "2273800",
    "end": "2281040"
  },
  {
    "text": "them as well I find this is the most controversial thing in JavaScript",
    "start": "2281040",
    "end": "2288440"
  },
  {
    "text": "um um here we have a for VAR statement and the variable I the induction",
    "start": "2288440",
    "end": "2295240"
  },
  {
    "text": "variable is not scoped to the loop it's scoped to the function um so properly you should move",
    "start": "2295240",
    "end": "2302000"
  },
  {
    "text": "that bar ey to the top because that in fact is what's happening but people",
    "start": "2302000",
    "end": "2307520"
  },
  {
    "text": "especially if they've come from Java or C or C++ you know this is how you do it this",
    "start": "2307520",
    "end": "2312760"
  },
  {
    "text": "is how you if you're writing in Java you put it there and I say write in the",
    "start": "2312760",
    "end": "2318040"
  },
  {
    "text": "language you're writing in uh that turns out to be the wrong way to do it in JavaScript um it will get you into",
    "start": "2318040",
    "end": "2324520"
  },
  {
    "text": "trouble um the next edition of JavaScript will probably have a let statement which will work just like the",
    "start": "2324520",
    "end": "2332319"
  },
  {
    "text": "statement except it will respect block scope so when that happy day comes and",
    "start": "2332319",
    "end": "2338079"
  },
  {
    "text": "we have let my advice will change to never use the VAR statement always use the let statement unless you have to run",
    "start": "2338079",
    "end": "2345920"
  },
  {
    "text": "on ie6 or ie7 or IE8 or",
    "start": "2345920",
    "end": "2352599"
  },
  {
    "text": "ie9 or IE10 we don't know what's an ie1 yet or if you only have to run an ie 12 and",
    "start": "2352599",
    "end": "2359160"
  },
  {
    "text": "above then yeah you'll want to use the Le statement um Global variables are evil",
    "start": "2359160",
    "end": "2365960"
  },
  {
    "start": "2362000",
    "end": "2362000"
  },
  {
    "text": "in all languages um JavaScript requires the use of global variables because it",
    "start": "2365960",
    "end": "2371160"
  },
  {
    "text": "doesn't have a Linker so all uh the way compilation units communicate is they're",
    "start": "2371160",
    "end": "2376920"
  },
  {
    "text": "all dumped into a common Global variable space uh where they can collide with each other this turns out to be the root",
    "start": "2376920",
    "end": "2383640"
  },
  {
    "text": "cause of the cross- site scripting attack um you know security problems in",
    "start": "2383640",
    "end": "2388760"
  },
  {
    "text": "the browser uh come from this this was a design error um and we're trying to fix",
    "start": "2388760",
    "end": "2393880"
  },
  {
    "text": "it um but because we have function scope it's POS POs to mitigate this problem um",
    "start": "2393880",
    "end": "2400160"
  },
  {
    "text": "so there are programming conventions we can use to minimize our use of global",
    "start": "2400160",
    "end": "2405839"
  },
  {
    "text": "variables um so for the few Global variables that you actually do use i' advise use all uppercase because I want",
    "start": "2405839",
    "end": "2412800"
  },
  {
    "text": "them to stand out this thing is dangerous and weird and you need to respect it and so I I want its name to",
    "start": "2412800",
    "end": "2420280"
  },
  {
    "text": "to make it clear that that's what's going on now in other languages all uppercase means different things for",
    "start": "2420280",
    "end": "2425560"
  },
  {
    "text": "example in C it it can mean a macro um and that BEC and that was for a good reason there was a confusion in C is",
    "start": "2425560",
    "end": "2432160"
  },
  {
    "text": "something a variable or a macro um that was a confusion and sometimes it bothered people so they came up with the",
    "start": "2432160",
    "end": "2438040"
  },
  {
    "text": "uppercase convention since then that convention has been copied into other languages which didn't even have macros",
    "start": "2438040",
    "end": "2444000"
  },
  {
    "text": "in them and had no confusion there at all um and so that style says well you",
    "start": "2444000",
    "end": "2450200"
  },
  {
    "text": "should use uppercase for constants but there's no reason for that convention um I think uh at least in JavaScript um it",
    "start": "2450200",
    "end": "2458040"
  },
  {
    "text": "makes more sense to use it for Global variables JavaScript has a new prefix",
    "start": "2458040",
    "end": "2463200"
  },
  {
    "text": "which was modeled after Java's uh new prefix uh but it doesn't work right it",
    "start": "2463200",
    "end": "2469319"
  },
  {
    "text": "it's weird it was intended to simulate uh uh classical construction but it does",
    "start": "2469319",
    "end": "2474839"
  },
  {
    "text": "something very very different um and it turns out in JavaScript if you forget to use the new prefix instead of getting a",
    "start": "2474839",
    "end": "2481520"
  },
  {
    "text": "syntax error or runtime warning instead it will just go and start collabing Global variables which is a terrible",
    "start": "2481520",
    "end": "2487920"
  },
  {
    "text": "thing unfortunately this got fixed in es5 strict um but in older versions of",
    "start": "2487920",
    "end": "2493560"
  },
  {
    "text": "the language or if you're still in the sloppy mode um you need to watch out for this so we have a convention that all",
    "start": "2493560",
    "end": "2500000"
  },
  {
    "text": "Constructor functions should be written with an initial capital letter and nothing else should ever be written with",
    "start": "2500000",
    "end": "2505560"
  },
  {
    "text": "an initial capital letter um that's the only convention we have to help us",
    "start": "2505560",
    "end": "2510760"
  },
  {
    "text": "determine when new is missing um this is an ambiguous case",
    "start": "2510760",
    "end": "2517480"
  },
  {
    "text": "that's unique to JavaScript uh the first statement looks like it does uh what the",
    "start": "2517480",
    "end": "2522720"
  },
  {
    "text": "second statement does but actually does what the third statement does so this is another case where the only thing you",
    "start": "2522720",
    "end": "2528319"
  },
  {
    "text": "know for sure is that the programmer is incompetent he thinks he's defining um",
    "start": "2528319",
    "end": "2533920"
  },
  {
    "text": "two local variables but he's actually creating a global variable and a local variable which is quite bad so write in",
    "start": "2533920",
    "end": "2542240"
  },
  {
    "text": "a way that clearly communicates your intent okay this one's going to be a little controversial and I'll remind you",
    "start": "2542240",
    "end": "2548720"
  },
  {
    "text": "that controversial does not mean wrong okay so um this operator was designed by Ken",
    "start": "2548720",
    "end": "2556319"
  },
  {
    "text": "Thompson in B and was copied into C uh it was originally intended for",
    "start": "2556319",
    "end": "2561559"
  },
  {
    "text": "incrementing pointer variables uh now since then we have determined that pointer arithmetic is harmful and so we",
    "start": "2561559",
    "end": "2568079"
  },
  {
    "text": "don't do it anymore the last popular programming language to feature Point arithmetic was C++ a language so bad it",
    "start": "2568079",
    "end": "2576319"
  },
  {
    "text": "was named after the operator um this operator was implicated in the",
    "start": "2576319",
    "end": "2583880"
  },
  {
    "text": "buffer overrun craze of the 90s because it's really easy to write dense code",
    "start": "2583880",
    "end": "2590440"
  },
  {
    "text": "using this which tries to do too much which is very difficult to understand and which can very easily run off the",
    "start": "2590440",
    "end": "2596960"
  },
  {
    "text": "end of memory and allow an attacker to take over your system um I I find in my own practice",
    "start": "2596960",
    "end": "2603880"
  },
  {
    "text": "that when I'm using this operator anywhere I get this twitch and I I got",
    "start": "2603880",
    "end": "2609760"
  },
  {
    "text": "to start optimizing I got to try to push stuff all into one line and I can't control it so finally I had to",
    "start": "2609760",
    "end": "2617319"
  },
  {
    "text": "say I'm done I don't use Plus+ anymore I don't trust myself to use it because I",
    "start": "2617319",
    "end": "2622720"
  },
  {
    "text": "can't control this because optimizing stuff into one line has no value you know so it's a waste of time to even try",
    "start": "2622720",
    "end": "2630359"
  },
  {
    "text": "um and it can introduce bugs and and security hazards and I can't stop myself",
    "start": "2630359",
    "end": "2635880"
  },
  {
    "text": "so the only way I was able to control my behavior was to say I'm not using it anymore I'm using plus equal one instead",
    "start": "2635880",
    "end": "2642720"
  },
  {
    "text": "and then I'm calm I can just add one and I'm good um and I hear complaints all",
    "start": "2642720",
    "end": "2649240"
  },
  {
    "text": "the time from people saying oh wait a minute you know I should be able to write x++ because it means exactly the same thing and it's one character",
    "start": "2649240",
    "end": "2656200"
  },
  {
    "text": "shorter that means when I'm power typing I can just go and you know and I'm so much more productive and and I have to",
    "start": "2656200",
    "end": "2662880"
  },
  {
    "text": "say well first off typing is not where we spend our time um",
    "start": "2662880",
    "end": "2668119"
  },
  {
    "text": "um and second off they're not equivalent okay uh plus plus X is",
    "start": "2668119",
    "end": "2673359"
  },
  {
    "text": "equivalent so when I see somebody making this mistake you know in the increment part of a four statement if I see x++ I",
    "start": "2673359",
    "end": "2680040"
  },
  {
    "text": "have to go okay this clown does he know the difference between pre-increment and po increment and so I have to look at",
    "start": "2680040",
    "end": "2686200"
  },
  {
    "text": "every plus plus in this program and go did he get this one right did he get this one right it's because this is a really",
    "start": "2686200",
    "end": "2693000"
  },
  {
    "text": "subtle off by one error because it's only off by one for a tiny amount of time and so tracking that down and",
    "start": "2693000",
    "end": "2699200"
  },
  {
    "text": "debugging it is really hard um and so I think it's better just to avoid it",
    "start": "2699200",
    "end": "2706200"
  },
  {
    "text": "entirely recently I was reviewing some code and I saw this plus plus X plus plus X you wonder okay what's the story",
    "start": "2706200",
    "end": "2713119"
  },
  {
    "text": "here what what's going on I'm guessing uh somebody wrote plus plus X and then later someone else came and noticed",
    "start": "2713119",
    "end": "2719640"
  },
  {
    "text": "there's an off by one error so they put it put in another one now if the if the",
    "start": "2719640",
    "end": "2725079"
  },
  {
    "text": "first one had been written X Plus equal one it would have been really easy to change it to X Plus equal 2 and it would",
    "start": "2725079",
    "end": "2731040"
  },
  {
    "text": "have been right and that raises a question why do we have a completely different syntactic form for adding one",
    "start": "2731040",
    "end": "2737599"
  },
  {
    "text": "than any other value how what's the benefit of that I I",
    "start": "2737599",
    "end": "2743000"
  },
  {
    "text": "really don't see a benefit but I do see people get really emotional you can't take my plus plus away uh am I gonna add",
    "start": "2743000",
    "end": "2750960"
  },
  {
    "text": "one to things and you go just one you know it people get really really upset",
    "start": "2750960",
    "end": "2759160"
  },
  {
    "text": "about Plus+ so for no cost by adopting a more rigorous style many classes of Errors",
    "start": "2759160",
    "end": "2765839"
  },
  {
    "text": "can be automatically avoided here's another one this this is another of uh Thompson's Fault by the",
    "start": "2765839",
    "end": "2772720"
  },
  {
    "text": "way Ken Thompson I think is one of the smartest programmers to ever live um but I think he made some stylistic mistakes",
    "start": "2772720",
    "end": "2779640"
  },
  {
    "text": "in in B and these mistakes have been copied into every other language since then so um B was based on bcpl which was",
    "start": "2779640",
    "end": "2788200"
  },
  {
    "text": "a marvelous little language um Thompson's major contribution to the syntax of B was to take bcpl and make it",
    "start": "2788200",
    "end": "2795920"
  },
  {
    "text": "look more like forr so um uh bcpl required the curly braces and",
    "start": "2795920",
    "end": "2803119"
  },
  {
    "text": "the parents around the condition were optional and Thompson did it the other way because that's how it was in Fortran",
    "start": "2803119",
    "end": "2809200"
  },
  {
    "text": "and that was a mistake um because you know it looks like it means that but it",
    "start": "2809200",
    "end": "2815559"
  },
  {
    "text": "actually means that see is going to be executed unconditionally and this is another common source of errors that the",
    "start": "2815559",
    "end": "2823839"
  },
  {
    "text": "program appears to be doing something um but does something else so my advice is",
    "start": "2823839",
    "end": "2829880"
  },
  {
    "text": "always put the curly braces in every time even if you're only going to do one thing put the curly braces in because it",
    "start": "2829880",
    "end": "2835520"
  },
  {
    "text": "makes your program more resilient and it's much less likely that the next",
    "start": "2835520",
    "end": "2840880"
  },
  {
    "text": "person to modify your code is going to be tricked by your austerity and and",
    "start": "2840880",
    "end": "2847359"
  },
  {
    "text": "introduce errors and I go oh but you know yeah but",
    "start": "2847359",
    "end": "2852440"
  },
  {
    "text": "you have to type you go so hard you know and it's not it's really easy just go",
    "start": "2852440",
    "end": "2859400"
  },
  {
    "text": "and boom you know and there's this new thing now called keyboard macros where you can just have them put in for you",
    "start": "2859400",
    "end": "2865319"
  },
  {
    "text": "automatically highly recommend always put the curly braces in it costs next to",
    "start": "2865319",
    "end": "2870400"
  },
  {
    "text": "nothing um and it it helps reduce your a rate that's what it's all about as our",
    "start": "2870400",
    "end": "2875640"
  },
  {
    "text": "processes become more agile AG our coding must be more resilient um so I I see a lot of people",
    "start": "2875640",
    "end": "2883000"
  },
  {
    "start": "2882000",
    "end": "2882000"
  },
  {
    "text": "being intentional bad stylists um some of it's a lot of it's due to under",
    "start": "2883000",
    "end": "2888040"
  },
  {
    "text": "education it turns out most of the people who are writing in JavaScript should not be writing in any language",
    "start": "2888040",
    "end": "2896880"
  },
  {
    "text": "um um but they do because it's the most popular language in the world and and so",
    "start": "2897160",
    "end": "2902800"
  },
  {
    "text": "they're doing it and and they can get away with it but often they don't understand where the stuff's supposed to",
    "start": "2902800",
    "end": "2908880"
  },
  {
    "text": "go and so they just leave it out um we see um some old school guys who um you",
    "start": "2908880",
    "end": "2916960"
  },
  {
    "text": "know they're coming at the language from java you know you know I'd rather be using Java but you know okay I'm writing",
    "start": "2916960",
    "end": "2922520"
  },
  {
    "text": "in in JavaScript but there's no way I'm going to know what I'm doing you know on principle and um and so they'll they'll",
    "start": "2922520",
    "end": "2930960"
  },
  {
    "text": "adopt conventions that don't fit the language then there are Thrill Seekers um people who will intentionally write",
    "start": "2930960",
    "end": "2937640"
  },
  {
    "text": "code which is confusing or error prone just to show off their Mad Skills um and they think you know I'm so",
    "start": "2937640",
    "end": "2945960"
  },
  {
    "text": "good at this stuff I can write crazy stuff and it doesn't go bad ignoring the",
    "start": "2945960",
    "end": "2952079"
  },
  {
    "text": "cases where it does go bad and then there are exhibitionists who um will study the language and find the weird",
    "start": "2952079",
    "end": "2959640"
  },
  {
    "text": "edge cases and places where the language does stuff you would never expect they go wow what an amazing Discovery How can",
    "start": "2959640",
    "end": "2966599"
  },
  {
    "text": "I I use that and they'll start designing programs specifically to show off these",
    "start": "2966599",
    "end": "2972119"
  },
  {
    "text": "weird features programs that nobody's going to understand um you know it's just",
    "start": "2972119",
    "end": "2978319"
  },
  {
    "text": "childish but we see a lot of that especially in the JavaScript community and they'll be saying that's",
    "start": "2978319",
    "end": "2984680"
  },
  {
    "text": "intentional you know I I meant to do that um I know what I'm doing I say no",
    "start": "2984680",
    "end": "2991119"
  },
  {
    "text": "if you knew what you were doing you would not be doing that so programming is the most",
    "start": "2991119",
    "end": "2997799"
  },
  {
    "text": "complicated thing that humans do and programs must be perfect and people are not good at perfect um myself I'm a",
    "start": "2997799",
    "end": "3005440"
  },
  {
    "text": "deeply flawed human being but somehow I make a living as a programmer and it's hard um programming",
    "start": "3005440",
    "end": "3012720"
  },
  {
    "text": "dis um demands discipline and a programming style demands discipline",
    "start": "3012720",
    "end": "3017839"
  },
  {
    "text": "it's not selecting features because they're pretty or familiar or popular",
    "start": "3017839",
    "end": "3023160"
  },
  {
    "text": "it's because they help drive down your error rate um so when deciding what should go into a",
    "start": "3023160",
    "end": "3029240"
  },
  {
    "text": "style that should be the number one criteria Above All Else saving",
    "start": "3029240",
    "end": "3034440"
  },
  {
    "text": "keystrokes should not be a consideration um you know the",
    "start": "3034440",
    "end": "3039559"
  },
  {
    "text": "alternative is the abyss right you know we spend a lot of",
    "start": "3039559",
    "end": "3044880"
  },
  {
    "text": "time you know in the abyss nii said when you gaze into the abyss the abyss gazes",
    "start": "3044880",
    "end": "3050760"
  },
  {
    "text": "into you it's terrible it's cold it's Soul destroying um and normal people",
    "start": "3050760",
    "end": "3057720"
  },
  {
    "text": "can't do it uh if a normal person has to debug a program and they spend any time in the abyss they say I'm changing",
    "start": "3057720",
    "end": "3065440"
  },
  {
    "text": "Majors I don't know what's wrong with you people I can't do this it turns out there's something seriously wrong with",
    "start": "3065440",
    "end": "3071400"
  },
  {
    "text": "us that um we are able to or we have two things going on one is we've got this",
    "start": "3071400",
    "end": "3077319"
  },
  {
    "text": "incredible optimism that we can go into the abyss and we will come back out normal people",
    "start": "3077319",
    "end": "3083960"
  },
  {
    "text": "can't do that but because we have that optimism it means we can't do scheduling with crap because we just have no idea",
    "start": "3083960",
    "end": "3090720"
  },
  {
    "text": "where we're spending our time or or how long things take um but the other is we",
    "start": "3090720",
    "end": "3096920"
  },
  {
    "text": "get selective Amnesia we are not aware of how much time we spend down there we",
    "start": "3096920",
    "end": "3102319"
  },
  {
    "text": "black it out and and all we remember you know what did I do today oh I was power typing I was Ring",
    "start": "3102319",
    "end": "3108040"
  },
  {
    "text": "program um you know so if we want to be more productive the best thing we can do",
    "start": "3108040",
    "end": "3114720"
  },
  {
    "text": "is figure out a way to spend less time in the abyss and and that's what I'm advocating so the JS lint style was",
    "start": "3114720",
    "end": "3121960"
  },
  {
    "text": "driven by the need to automatically detect defects um I spent a lot of time on",
    "start": "3121960",
    "end": "3127160"
  },
  {
    "text": "comp. lang. JavaScript and there was a constant flood of people coming in uh to",
    "start": "3127160",
    "end": "3132680"
  },
  {
    "text": "the conference um saying my program doesn't work and someone spot the the problem and so I i' cut it out and put",
    "start": "3132680",
    "end": "3139000"
  },
  {
    "text": "it into jslint and sometimes jent would immediately find what was wrong and sometimes it couldn't and I go okay so",
    "start": "3139000",
    "end": "3145119"
  },
  {
    "text": "what do I need to do in order to to to solve that and it turned out in some cases they were using forms which were",
    "start": "3145119",
    "end": "3152359"
  },
  {
    "text": "undecidable that there was no way I could statically determine what the defect was um and",
    "start": "3152359",
    "end": "3159079"
  },
  {
    "text": "ultimately reluctantly I I had to decide that those forms themselves were defects",
    "start": "3159079",
    "end": "3165559"
  },
  {
    "text": "that um if I could persuade people not to write using those forms then I could do a much better job of finding the",
    "start": "3165559",
    "end": "3171760"
  },
  {
    "text": "errors where they really occur um so uh the approach I finally settled",
    "start": "3171760",
    "end": "3177599"
  },
  {
    "text": "on was language subsetting which was not something that I ever expected it's been said only a Madman would use all of C++",
    "start": "3177599",
    "end": "3184680"
  },
  {
    "text": "it's also been said only a Madman with u C++ but that's that's for another conference but you know the subsetting",
    "start": "3184680",
    "end": "3192079"
  },
  {
    "text": "idea applies to all languages it turns out every language has features which probably shouldn't be there that um",
    "start": "3192079",
    "end": "3199000"
  },
  {
    "text": "every language designer is trying to push the state-of-the-art and he'll be adopting features from other languages",
    "start": "3199000",
    "end": "3206000"
  },
  {
    "text": "and come up with a few inventions of his own and very often they get it all right",
    "start": "3206000",
    "end": "3211119"
  },
  {
    "text": "but invariably there's at least one place where they they went too far and",
    "start": "3211119",
    "end": "3218000"
  },
  {
    "text": "once a language gets out there and people start using it they can't take it back language designer is powerless to",
    "start": "3218000",
    "end": "3225920"
  },
  {
    "text": "to remove design mistakes from the language it turns out you have that",
    "start": "3225920",
    "end": "3231400"
  },
  {
    "text": "power you can decide yourself that that is a bad part and I will avoid the",
    "start": "3231400",
    "end": "3238040"
  },
  {
    "text": "consequences of that Badness by simply not using that feature that's a power you have that the language designer does",
    "start": "3238040",
    "end": "3244079"
  },
  {
    "text": "not have I strongly recommend you exercise that power so there will be bugs I'm not",
    "start": "3244079",
    "end": "3251119"
  },
  {
    "text": "promising that you're going to be bug free by adopting a more rigorous programming style what I am saying is",
    "start": "3251119",
    "end": "3257040"
  },
  {
    "text": "that you can move the odds in your favor and any you can do to help reduce the amount of time in the abyss that turns",
    "start": "3257040",
    "end": "3264720"
  },
  {
    "text": "out to be a great trade-off so good style is good for your gut that's the end thank you and good night",
    "start": "3264720",
    "end": "3274000"
  },
  {
    "text": "[Music]",
    "start": "3274640",
    "end": "3285140"
  }
]