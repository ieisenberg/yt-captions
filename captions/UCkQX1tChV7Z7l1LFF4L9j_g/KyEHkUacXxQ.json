[
  {
    "start": "0",
    "end": "255000"
  },
  {
    "text": "you for being here early in the morning so are you ready to learn the deep",
    "start": "5330",
    "end": "13849"
  },
  {
    "text": "truths behind real programming languages",
    "start": "13849",
    "end": "19840"
  },
  {
    "text": "so and we'll have some fun on the way I actually got the name of the conference",
    "start": "20200",
    "end": "26180"
  },
  {
    "text": "wrong I apologize for that on the slide you can see I turned it from a verb into",
    "start": "26180",
    "end": "31250"
  },
  {
    "text": "a noun but let's have some joy anyway but I want to be as happy as that",
    "start": "31250",
    "end": "37309"
  },
  {
    "text": "octopus so compositions as types is",
    "start": "37309",
    "end": "43570"
  },
  {
    "text": "about this really cool idea right that's why I talk about real",
    "start": "43570",
    "end": "50839"
  },
  {
    "text": "programming languages right - this cool idea which was discovered in the 1930s",
    "start": "50839",
    "end": "57049"
  },
  {
    "text": "is that if you formalize the core ideas",
    "start": "57049",
    "end": "62269"
  },
  {
    "text": "behind logic and you formalize the cool",
    "start": "62269",
    "end": "67490"
  },
  {
    "text": "ideas behind programming languages and I have two specific formalizations in mind",
    "start": "67490",
    "end": "74030"
  },
  {
    "text": "on the one hand we have Jensen's system of natural deduction which formalizes",
    "start": "74030",
    "end": "81530"
  },
  {
    "text": "what logic is and on the other hand we have churches simply typed lambda",
    "start": "81530",
    "end": "86570"
  },
  {
    "text": "calculus which formalizes a programming language and right this is the right way",
    "start": "86570",
    "end": "92690"
  },
  {
    "text": "to do things like what is the right time to formalize the notion of programming",
    "start": "92690",
    "end": "97700"
  },
  {
    "text": "languages just a few years before the computer is invented right that's the",
    "start": "97700",
    "end": "103790"
  },
  {
    "text": "right time to do it okay so that's what happened and then so these are both",
    "start": "103790",
    "end": "109760"
  },
  {
    "text": "formalized in the 1930s and you wait a bit because that's what you do with real",
    "start": "109760",
    "end": "116390"
  },
  {
    "text": "things it doesn't happen overnight but all you need to do is wait 50 years and somebody will have a new idea and indeed",
    "start": "116390",
    "end": "123799"
  },
  {
    "text": "you wait fifty years and these two things that were both discovered in the 1930s in 1980 William Howard publishes a",
    "start": "123799",
    "end": "132860"
  },
  {
    "text": "paper saying oh look they are exactly the same thing",
    "start": "132860",
    "end": "138519"
  },
  {
    "text": "right and that gives you a sense that you've not invented something you've discovered something so lambda calculus",
    "start": "138830",
    "end": "147870"
  },
  {
    "text": "the core of every functional language in existence is discovered not invented",
    "start": "147870",
    "end": "154370"
  },
  {
    "text": "right and we know this because God Jensen and Alonzo Church both came up",
    "start": "154370",
    "end": "162000"
  },
  {
    "text": "with the same idea but it took about 40 years before people recognized oh these",
    "start": "162000",
    "end": "168390"
  },
  {
    "text": "are the same idea and that took another 10 years for Howard to get around to publishing it okay but that's the core",
    "start": "168390",
    "end": "176129"
  },
  {
    "text": "of why I want to talk about so that's what the talk it's dreams loop was about but I'm not going to give you that talk",
    "start": "176129",
    "end": "181500"
  },
  {
    "text": "you can go see it online and if you like or you can read about it in communications of the ACM and by the way",
    "start": "181500",
    "end": "188400"
  },
  {
    "text": "I think so in accidentally mispronounced a it's not propositions ed and types it's propositions as types right so the",
    "start": "188400",
    "end": "197549"
  },
  {
    "text": "same thing propositions of logic and types of the programming language it was",
    "start": "197549",
    "end": "204000"
  },
  {
    "text": "the questions afterwards is does this connect to anything else and that reminds me to say oh yes there are deep",
    "start": "204000",
    "end": "209849"
  },
  {
    "text": "connections to category theory so that's what I thought I would talk about today",
    "start": "209849",
    "end": "215160"
  },
  {
    "text": "is the additional connections to category theory and this is categories",
    "start": "215160",
    "end": "221699"
  },
  {
    "text": "category theory is basically very simple here's the key idea behind category theory you take some concepts that sub",
    "start": "221699",
    "end": "228269"
  },
  {
    "text": "people know really well and you abstract it to the level where it becomes impossible to understand",
    "start": "228269",
    "end": "234949"
  },
  {
    "text": "that's what category theory is about things that you know well made difficult",
    "start": "234949",
    "end": "241069"
  },
  {
    "text": "so what willing to do is give the simplest introduction to category theory",
    "start": "241069",
    "end": "246209"
  },
  {
    "text": "that I possibly can I figure I'll make it so simple I'm actually worried I might not use up my half-hour but I bet",
    "start": "246209",
    "end": "253470"
  },
  {
    "text": "I will well we're speaking of which is there a clock anywhere so I can make sure that I'm not late know how great",
    "start": "253470",
    "end": "261659"
  },
  {
    "start": "255000",
    "end": "660000"
  },
  {
    "text": "how many minute have I got left",
    "start": "261659",
    "end": "264590"
  },
  {
    "text": "25 okay give me a hand sickle I've got five minutes left and then that gives another ten minutes for questions after",
    "start": "266960",
    "end": "272360"
  },
  {
    "text": "it's right perfect okay so I'm worried that I might have",
    "start": "272360",
    "end": "277880"
  },
  {
    "text": "made it too simple but I bet not but this is making as simple as possible explain as we go on so are you ready to",
    "start": "277880",
    "end": "284449"
  },
  {
    "text": "learn about object-oriented programming right because that's what category",
    "start": "284449",
    "end": "289460"
  },
  {
    "text": "theory is because we've got objects except object in category theory it's",
    "start": "289460",
    "end": "295220"
  },
  {
    "text": "the name of a type and then what do you",
    "start": "295220",
    "end": "300560"
  },
  {
    "text": "do what what are types good four types describe functions right your function will have an argument of a",
    "start": "300560",
    "end": "306770"
  },
  {
    "text": "given type and return the result of a given type you can all take the",
    "start": "306770",
    "end": "311780"
  },
  {
    "text": "functions like that so what all you doing category theory is instead of",
    "start": "311780",
    "end": "316849"
  },
  {
    "text": "calling a type of type you call it an object and instead of calling a function a function you call it an arrow and it",
    "start": "316849",
    "end": "326690"
  },
  {
    "text": "turns out there many instances of this so you can think of a programming language with types and functions or you",
    "start": "326690",
    "end": "332990"
  },
  {
    "text": "can think of set theory so your objects are going to be sets and then your",
    "start": "332990",
    "end": "338870"
  },
  {
    "text": "arrows can be functions between the sets or they could also be relations between",
    "start": "338870",
    "end": "343909"
  },
  {
    "text": "the sets or you can do domain theory and then your objects or domains and your",
    "start": "343909",
    "end": "351530"
  },
  {
    "text": "arrows are again functions between the domains or you can do abstract algebra and your objects are things like groups",
    "start": "351530",
    "end": "359509"
  },
  {
    "text": "and then your arrows are things like morphisms between groups which just means morphism is a fancy name for",
    "start": "359509",
    "end": "366349"
  },
  {
    "text": "function that needs a function that preserves some structure so a group is something that has a binary operator and",
    "start": "366349",
    "end": "373159"
  },
  {
    "text": "a unit and it just means that the function takes the unit of one into the unit of the other and if you've got two",
    "start": "373159",
    "end": "381320"
  },
  {
    "text": "values and you combine them with the operator of the first group and then",
    "start": "381320",
    "end": "387830"
  },
  {
    "text": "apply the function you could instead apply the function to both arguments and then apply the operator of the second",
    "start": "387830",
    "end": "394550"
  },
  {
    "text": "group neither in the second group and that gives you the same result see your head's hurting already isn't it",
    "start": "394550",
    "end": "402070"
  },
  {
    "text": "and what can we do with function so we'll just talk about two simple things we can do with function you can can you",
    "start": "402219",
    "end": "408229"
  },
  {
    "text": "see the little thingies I'm pointing to ID with there yep good you've got the",
    "start": "408229",
    "end": "413569"
  },
  {
    "text": "identity function on object a and what does that that's the function from a to",
    "start": "413569",
    "end": "418909"
  },
  {
    "text": "a guess what that function does nothing",
    "start": "418909",
    "end": "424129"
  },
  {
    "text": "right give it an argument it returns the exact same argument without changing it and the other thing you can do is",
    "start": "424129",
    "end": "431029"
  },
  {
    "text": "function just compose them so if I've got a function from A to B call F and",
    "start": "431029",
    "end": "436250"
  },
  {
    "text": "another function from B to C called G I can compose them and that's a function",
    "start": "436250",
    "end": "442750"
  },
  {
    "text": "called F semicolon G sometimes written G F because people like to reverse things",
    "start": "442750",
    "end": "452240"
  },
  {
    "text": "to confuse everybody right and that of",
    "start": "452240",
    "end": "457520"
  },
  {
    "text": "course would be a function from A to C that's all category theories about just",
    "start": "457520",
    "end": "464060"
  },
  {
    "text": "enough types to know when you can compose two functions so the answer is you can compose them if the target of",
    "start": "464060",
    "end": "472039"
  },
  {
    "text": "one is the source of the other the range of one is the domain of the other so that means F goes from A to B and G",
    "start": "472039",
    "end": "478789"
  },
  {
    "text": "starts at D and goes to C so that composition is well-defined whoops",
    "start": "478789",
    "end": "484849"
  },
  {
    "text": "don't want to be there yet and then you get some laws right the law says the",
    "start": "484849",
    "end": "490430"
  },
  {
    "text": "identity followed by F is the same as fo by the identity oopsey I've already",
    "start": "490430",
    "end": "495680"
  },
  {
    "text": "gotten the air in here is the same as f right you can tell these slides are old-school right I actually I wrote them",
    "start": "495680",
    "end": "502699"
  },
  {
    "text": "out by hand with these pens and writing",
    "start": "502699",
    "end": "512659"
  },
  {
    "text": "things out by hand right I had to do at each one of these slides about three times before I got all the really stupid",
    "start": "512659",
    "end": "518209"
  },
  {
    "text": "errors out but there's still some arrows left so you can point them out right if",
    "start": "518209",
    "end": "523550"
  },
  {
    "text": "you ever have a question just raise your hand and ask a question are there any questions yet not yet okay don't be shy",
    "start": "523550",
    "end": "529519"
  },
  {
    "text": "with questions but anyhow identities followed by F is the same as f ball by date density",
    "start": "529519",
    "end": "534620"
  },
  {
    "text": "which is also the same of course as Jeff death and then if you compose three",
    "start": "534620",
    "end": "540380"
  },
  {
    "text": "things it doesn't matter what order you compose them in and that has a fancy name that's called associativity okay so",
    "start": "540380",
    "end": "548690"
  },
  {
    "text": "good I see at least a couple of people nodding so is your head starting to hurt are you bored because this is all so",
    "start": "548690",
    "end": "555500"
  },
  {
    "text": "simple not quite okay so now we get the",
    "start": "555500",
    "end": "560540"
  },
  {
    "text": "so on videos I'm going to show you the three most important structures in",
    "start": "560540",
    "end": "566060"
  },
  {
    "text": "programming languages and show you how those arrives in category theory and of",
    "start": "566060",
    "end": "572540"
  },
  {
    "text": "course because there's correspondence between programming and logic it turns",
    "start": "572540",
    "end": "578300"
  },
  {
    "text": "out the three most important structures and programming languages are also the three most important constructors in",
    "start": "578300",
    "end": "584750"
  },
  {
    "text": "logic so the first is the product so",
    "start": "584750",
    "end": "591370"
  },
  {
    "text": "what's a product so given an object a and the object V we form the product a",
    "start": "591370",
    "end": "597230"
  },
  {
    "text": "times B so these are sets this would be Cartesian product how many people are",
    "start": "597230",
    "end": "603440"
  },
  {
    "text": "familiar with that quite a few of you and if it's a programming language what",
    "start": "603440",
    "end": "610040"
  },
  {
    "text": "data structure are we talking about here the tuple write or the record so this is",
    "start": "610040",
    "end": "617480"
  },
  {
    "text": "in particular a special case of the tuple record one with two fields right and the first field has a value of type",
    "start": "617480",
    "end": "624860"
  },
  {
    "text": "a and the second field has a value of type B so how are we going to",
    "start": "624860",
    "end": "629870"
  },
  {
    "text": "characterize what it means for something to be a product well you better be able",
    "start": "629870",
    "end": "635600"
  },
  {
    "text": "to extract the fields from the object right so you've got a function first",
    "start": "635600",
    "end": "640940"
  },
  {
    "text": "which given an a B pair returns the a component and you have functions second",
    "start": "640940",
    "end": "646970"
  },
  {
    "text": "which given an ad pair returns the B component that's boring right you all",
    "start": "646970",
    "end": "654320"
  },
  {
    "text": "follow that not if you follow that you're not nodding",
    "start": "654320",
    "end": "662050"
  },
  {
    "start": "660000",
    "end": "1080000"
  },
  {
    "text": "you're still not nodding ask you a question people lie about this without",
    "start": "662470",
    "end": "669829"
  },
  {
    "text": "okay I'm going to slowly sweep my gaze through the room and if you're bored so far if you understand what a product is",
    "start": "669829",
    "end": "676640"
  },
  {
    "text": "just not your head okay he's asleep",
    "start": "676640",
    "end": "682720"
  },
  {
    "text": "everybody back here is catatonic yeah",
    "start": "683589",
    "end": "690890"
  },
  {
    "text": "now even people in the back row or nodding good okay so the party last",
    "start": "690890",
    "end": "697430"
  },
  {
    "text": "night wasn't so good that you can't understand products okay now but there's more okay what what else do we need to",
    "start": "697430",
    "end": "706250"
  },
  {
    "text": "know but what we need to know is given some other things see some other type",
    "start": "706250",
    "end": "712040"
  },
  {
    "text": "see I might have a function C from C to a called F and the function from C to B",
    "start": "712040",
    "end": "719930"
  },
  {
    "text": "called G and then what can I do with",
    "start": "719930",
    "end": "725149"
  },
  {
    "text": "that well given to see if I apply F I'll get an A and if I apply G I get a B and",
    "start": "725149",
    "end": "731540"
  },
  {
    "text": "I can build a pair from that a and that B so this function is called funny angle",
    "start": "731540",
    "end": "736910"
  },
  {
    "text": "bracket F comma G close funny angle bracket right and that just means building a deep air from a see how do",
    "start": "736910",
    "end": "744290"
  },
  {
    "text": "you do that apply F to C to get your a component and apply G to C to get your B",
    "start": "744290",
    "end": "749660"
  },
  {
    "text": "component so that's important right first and second are how you take a pair of part and then this construct is how",
    "start": "749660",
    "end": "756829"
  },
  {
    "text": "you build a pair and the we've got a property right indicated by",
    "start": "756829",
    "end": "763560"
  },
  {
    "text": "the diagram what does the diagram tell us it says if you build a pair using F",
    "start": "763560",
    "end": "769890"
  },
  {
    "text": "and G and you extract first the first component will that get you from a C to",
    "start": "769890",
    "end": "778050"
  },
  {
    "text": "an a but it does of course just the same thing as using F right they're identical and similarly if we go from C D F G to",
    "start": "778050",
    "end": "790800"
  },
  {
    "text": "an ad and then we use second that gets us to a B but that's just the same as using G so you can see there are two",
    "start": "790800",
    "end": "796800"
  },
  {
    "text": "paths from C to a one that says do F G and then do first and one that says do F",
    "start": "796800",
    "end": "803550"
  },
  {
    "text": "and those are both the same that I wrote this down it's written down here and the",
    "start": "803550",
    "end": "810690"
  },
  {
    "text": "other path says do F G and then do second and that's the same as G now",
    "start": "810690",
    "end": "816450"
  },
  {
    "text": "immediately we already know some stuff about our programming language right because this tells us F and G better not",
    "start": "816450",
    "end": "824220"
  },
  {
    "text": "have side effects that intercept them are important because if they did write",
    "start": "824220",
    "end": "830010"
  },
  {
    "text": "s G would do both sets of side effects but F just does one and G justice one so",
    "start": "830010",
    "end": "836640"
  },
  {
    "text": "if they're going to be exactly the same you better not have side effects so this",
    "start": "836640",
    "end": "842940"
  },
  {
    "text": "is an argument against having side effects if it gives you nice simple laws so FG followed by first is f F G",
    "start": "842940",
    "end": "850500"
  },
  {
    "text": "followed by second is G and then this line is dotted and what's the dotted",
    "start": "850500",
    "end": "856560"
  },
  {
    "text": "means is if a line with a function makes this oh right more terminology this is",
    "start": "856560",
    "end": "864360"
  },
  {
    "text": "called a computing diagram and all that means is what I just told you which is",
    "start": "864360",
    "end": "870600"
  },
  {
    "text": "if there are two different pathways through the diagram from one place to another that involve applying different",
    "start": "870600",
    "end": "876930"
  },
  {
    "text": "functions they must be equal right so here's one path and here's the other",
    "start": "876930",
    "end": "882510"
  },
  {
    "text": "path and they're the same which is given by this equation and similarly here now let's have got",
    "start": "882510",
    "end": "889110"
  },
  {
    "text": "eight an arbitrary H and all we knows that H followed by first is F",
    "start": "889110",
    "end": "894780"
  },
  {
    "text": "G followed by H a second which is what I've written down right here then what",
    "start": "894780",
    "end": "899790"
  },
  {
    "text": "we can conclude is H is the same as FG that there's only one arrow from C to a",
    "start": "899790",
    "end": "905880"
  },
  {
    "text": "B that makes this diagram commute okay",
    "start": "905880",
    "end": "912750"
  },
  {
    "text": "so if there's a unique s G is unique and we indicate that by writing a dotted line here and that has a fancy name",
    "start": "912750",
    "end": "920880"
  },
  {
    "text": "that's called a universal property okay",
    "start": "920880",
    "end": "926600"
  },
  {
    "text": "so pairs so then if we got you can take pairs apart using first and second you",
    "start": "926600",
    "end": "933180"
  },
  {
    "text": "can build them using FG those operations are inverse to each other and FG is the",
    "start": "933180",
    "end": "939360"
  },
  {
    "text": "unique thing that makes this work pretty",
    "start": "939360",
    "end": "944700"
  },
  {
    "text": "easy it's being unique important yet there are all sorts of things that you can work out from that that are really",
    "start": "944700",
    "end": "951600"
  },
  {
    "text": "useful like you can prove things like if I start at a D and go from D to C and",
    "start": "951600",
    "end": "957540"
  },
  {
    "text": "then do s J is what would that be well that would be some other function let's",
    "start": "957540",
    "end": "964320"
  },
  {
    "text": "call it the F G H I I going from D to C",
    "start": "964320",
    "end": "970100"
  },
  {
    "text": "we do first let's call e AE going from D to C and E followed by s G in brackets",
    "start": "970100",
    "end": "975930"
  },
  {
    "text": "is the same as in brackets e followed by F and E followed by G what I really need",
    "start": "975930",
    "end": "983550"
  },
  {
    "text": "to be able to write that down too bad you've all visualize that clearly in your head right but you can prove that",
    "start": "983550",
    "end": "988920"
  },
  {
    "text": "from it I'll show you another thing you can prove which is also important",
    "start": "988920",
    "end": "995450"
  },
  {
    "text": "consider pick F and G to be anything we want right so here's standard categorical",
    "start": "997010",
    "end": "1002810"
  },
  {
    "text": "trick pick them to be the simplest thing you can think of so I'm going to do is I'm going to and we pick C to be",
    "start": "1002810",
    "end": "1008330"
  },
  {
    "text": "anything we want to okay so what's the stupid simplest thing I could do here",
    "start": "1008330",
    "end": "1013940"
  },
  {
    "text": "let's pick C to be the same as a times B now I need something that goes from a",
    "start": "1013940",
    "end": "1020390"
  },
  {
    "text": "times B to a what's that oh wait first does that so I'll pick F to be first I'll pick G to be second okay and then I",
    "start": "1020390",
    "end": "1028760"
  },
  {
    "text": "get what this diagram and we know it",
    "start": "1028760",
    "end": "1036560"
  },
  {
    "text": "commutes right so what does that tell us since if we do a times B and then first",
    "start": "1036560",
    "end": "1041930"
  },
  {
    "text": "second followed by first that's the same as just doing first an ad oh by first",
    "start": "1041930",
    "end": "1047329"
  },
  {
    "text": "second then do second that's just the same it's exactly so what what what is for a second going to be well ah wait if",
    "start": "1047330",
    "end": "1054530"
  },
  {
    "text": "I do identity right so I do nothing to go from a times B to a times E and then",
    "start": "1054530",
    "end": "1059630"
  },
  {
    "text": "do first ah that's the same as doing first and similarly for second so we",
    "start": "1059630",
    "end": "1065270"
  },
  {
    "text": "know that ID makes the diagram commute and we know by definition that the first",
    "start": "1065270",
    "end": "1070550"
  },
  {
    "text": "second pair makes the diagram commute so that tells us for a second must be the same as ID does that make sense let's",
    "start": "1070550",
    "end": "1081140"
  },
  {
    "start": "1080000",
    "end": "1170000"
  },
  {
    "text": "see I've got this thingy a pair and I'm going to build a new pair and what I'm",
    "start": "1081140",
    "end": "1087530"
  },
  {
    "text": "going to build a new pair is from a B I'm going to take the first component and let that be the first component of",
    "start": "1087530",
    "end": "1093470"
  },
  {
    "text": "the new pair and from a B I'm going to take the second component and let that be the second component of the new pair",
    "start": "1093470",
    "end": "1100190"
  },
  {
    "text": "oh that doesn't do very much does it okay that's it",
    "start": "1100190",
    "end": "1107080"
  },
  {
    "text": "all right you now thoroughly understand category theory okay yay give yourselves",
    "start": "1107080",
    "end": "1114830"
  },
  {
    "text": "a round of applause [Applause]",
    "start": "1114830",
    "end": "1119970"
  },
  {
    "text": "okay so let's turn that into a programming language right so I'm going to let L m and n range over terms and in",
    "start": "1121820",
    "end": "1129960"
  },
  {
    "text": "the program level you have some free variables found in gamma and using the three variables we're going to build a",
    "start": "1129960",
    "end": "1136230"
  },
  {
    "text": "term M of type a how many people have seen something like this before for programming languages and types not many",
    "start": "1136230",
    "end": "1142710"
  },
  {
    "text": "of you okay so the rest of you should now consider yourself initiated right",
    "start": "1142710",
    "end": "1149910"
  },
  {
    "text": "this is the way that you write down a type system all you guys have been using",
    "start": "1149910",
    "end": "1157770"
  },
  {
    "text": "English or Dutch or whatever language you like to write down your description of your type language guess what there's",
    "start": "1157770",
    "end": "1164910"
  },
  {
    "text": "a better way and it's this this is the",
    "start": "1164910",
    "end": "1170910"
  },
  {
    "start": "1170000",
    "end": "1280000"
  },
  {
    "text": "standard way to write down to the description of your programming language and right it's basically been around",
    "start": "1170910",
    "end": "1177210"
  },
  {
    "text": "since just before the invention of the computer ok so gamma is just a bunch of",
    "start": "1177210",
    "end": "1185010"
  },
  {
    "text": "free variable gamma might be X is an integer and Y is a character okay and M",
    "start": "1185010",
    "end": "1193800"
  },
  {
    "text": "might be take the integer and add one to it well that will give us another integer and n might be take the",
    "start": "1193800",
    "end": "1203490"
  },
  {
    "text": "character and tell us if it's a letter or not and that will give us a boolean",
    "start": "1203490",
    "end": "1210320"
  },
  {
    "text": "okay so gamma has two variables x and y x is an integer Y is a character and",
    "start": "1210320",
    "end": "1215850"
  },
  {
    "text": "looks at X and adds one to it gives us another integer and looks at the character tells us this it's a letter",
    "start": "1215850",
    "end": "1221850"
  },
  {
    "text": "and gives us a boolean and then we can build an M and pair right which would be",
    "start": "1221850",
    "end": "1227220"
  },
  {
    "text": "an integer boolean pair so pairing straightforward and then if L is an a B",
    "start": "1227220",
    "end": "1235590"
  },
  {
    "text": "pair first of L would of course be an A and second of L would be a B so category",
    "start": "1235590",
    "end": "1242580"
  },
  {
    "text": "theory gives us exactly what we need for doing the semantics of that so gamma represents our environment",
    "start": "1242580",
    "end": "1250800"
  },
  {
    "text": "it's just the type that binds the gives you a value for each free variable and then f converts that into a value of",
    "start": "1250800",
    "end": "1258390"
  },
  {
    "text": "type a and G converts that into a value type B and then your FG pair build you",
    "start": "1258390",
    "end": "1263760"
  },
  {
    "text": "an a/b pair and then if H is some term",
    "start": "1263760",
    "end": "1269100"
  },
  {
    "text": "to take your environment into an ad pair H followed by first gives you an A and H",
    "start": "1269100",
    "end": "1274980"
  },
  {
    "text": "followed by second gives you a B okay so we can convert good old type system into",
    "start": "1274980",
    "end": "1285260"
  },
  {
    "start": "1280000",
    "end": "1350000"
  },
  {
    "text": "good old semantics using category theory",
    "start": "1285260",
    "end": "1292460"
  },
  {
    "text": "and how does all this relate to logic so times we've been using to build a record",
    "start": "1292460",
    "end": "1299430"
  },
  {
    "text": "what does x correspond to in logic one of your three main constructors and",
    "start": "1299430",
    "end": "1309620"
  },
  {
    "text": "correct so x is just conjunction so what does this tell us if you if M is a proof",
    "start": "1309620",
    "end": "1316950"
  },
  {
    "text": "of a and n is the proof of B and MN carries a proof that a and B both hold and if I know a and B then by extracting",
    "start": "1316950",
    "end": "1326640"
  },
  {
    "text": "the first component of the proof L I get a proof of a and if I know a and B then",
    "start": "1326640",
    "end": "1331650"
  },
  {
    "text": "by extracting the second component I get a proof of B this by the way is the",
    "start": "1331650",
    "end": "1336720"
  },
  {
    "text": "second grievous error that I made to doing me slugs which is M and then at all these terms here and all the arrows",
    "start": "1336720",
    "end": "1342480"
  },
  {
    "text": "I should have colored them in red so I could have just said just look at the blue bits and that gives you the logic",
    "start": "1342480",
    "end": "1348950"
  },
  {
    "text": "that's what I normally do that's the second grievance error in the talk okay",
    "start": "1348950",
    "end": "1354630"
  },
  {
    "text": "that's it that's products any questions about products anybody once this is all",
    "start": "1354630",
    "end": "1361080"
  },
  {
    "text": "really simple why are you bothering to show us this you've just taken something really easy and made it hard anybody",
    "start": "1361080",
    "end": "1367980"
  },
  {
    "text": "feeling that raise your hand if that's what you're feeling just a couple of people are feeling that okay why would",
    "start": "1367980",
    "end": "1373950"
  },
  {
    "text": "we want to make it hard I will show you why okay here's the other major data structure",
    "start": "1373950",
    "end": "1380010"
  },
  {
    "text": "the sum so a sum is sometimes called a disjoint",
    "start": "1380010",
    "end": "1387159"
  },
  {
    "text": "union or record variance I think are what they're called in Pascal what's",
    "start": "1387159",
    "end": "1393249"
  },
  {
    "text": "what's your favorite name for this kind of data structure unit Union okay it's a",
    "start": "1393249",
    "end": "1402099"
  },
  {
    "text": "disjoint Union yeah anybody else have a favorite name for this data structure",
    "start": "1402099",
    "end": "1408119"
  },
  {
    "text": "eater either yes and has schools called either in Ruby it's called this is too",
    "start": "1408629",
    "end": "1415809"
  },
  {
    "start": "1410000",
    "end": "1530000"
  },
  {
    "text": "hard for us and most object-oriented languages you have to go to a lot of",
    "start": "1415809",
    "end": "1423459"
  },
  {
    "text": "trouble to build this in an object-oriented language using inheritance or whatever but you can write so an object-oriented language",
    "start": "1423459",
    "end": "1428709"
  },
  {
    "text": "would sort of be like well what a and b inherits from and inherits for B or",
    "start": "1428709",
    "end": "1434619"
  },
  {
    "text": "something like that I can't even remember which way around the inheritance goes you can probably do it either way",
    "start": "1434619",
    "end": "1440440"
  },
  {
    "text": "okay but this is disjoint Union right and so given an a we can inject it into",
    "start": "1440440",
    "end": "1446559"
  },
  {
    "text": "the type a plus B so right in your computer how would you actually represent this so a might be an integer",
    "start": "1446559",
    "end": "1452529"
  },
  {
    "text": "and then an A plus B would be something with a tag field followed by a value so",
    "start": "1452529",
    "end": "1459159"
  },
  {
    "text": "this injection sets the tag to be zero say and then copies in the integer in",
    "start": "1459159",
    "end": "1464979"
  },
  {
    "text": "this direction if B as a character say so it's the tag to be 1 and then copies",
    "start": "1464979",
    "end": "1471159"
  },
  {
    "text": "in the character and then your second field needs to be big enough to contain either an integer or a character people",
    "start": "1471159",
    "end": "1478089"
  },
  {
    "text": "used to that kind of data structure IQ structs for that in C for instance",
    "start": "1478089",
    "end": "1486399"
  },
  {
    "text": "and now so in less than n write build one of these things how do we take it",
    "start": "1486399",
    "end": "1491709"
  },
  {
    "text": "apart we do a case analysis right so if we've got if F is a function from an a",
    "start": "1491709",
    "end": "1497649"
  },
  {
    "text": "to a C and G is a function from a B to C how do we get a C from one of these some",
    "start": "1497649",
    "end": "1503889"
  },
  {
    "text": "abs well you look at it and if it's an A you apply F to it but if it's a B then",
    "start": "1503889",
    "end": "1509229"
  },
  {
    "text": "you apply G to it and then what do the rules tell us well if you have in left",
    "start": "1509229",
    "end": "1514899"
  },
  {
    "text": "follow by F and G that gives you an F and if you have n right followed by F and G",
    "start": "1514899",
    "end": "1520570"
  },
  {
    "text": "that gives you a G and again it's dotted it's universal so if you have some H",
    "start": "1520570",
    "end": "1534400"
  },
  {
    "start": "1530000",
    "end": "1595000"
  },
  {
    "text": "that makes this diagram commute you know that that's the same as F and G what am",
    "start": "1534400",
    "end": "1541120"
  },
  {
    "text": "I going to do next identity right so",
    "start": "1541120",
    "end": "1546960"
  },
  {
    "text": "right we pick the simple case pick f to be in left pick G to be in right to",
    "start": "1546960",
    "end": "1553510"
  },
  {
    "text": "accede to be a plus B and then we know that identity makes these things commute",
    "start": "1553510",
    "end": "1559420"
  },
  {
    "text": "so in left third with in right must be the same as identity so what does this",
    "start": "1559420",
    "end": "1564670"
  },
  {
    "text": "one say this is okay look at the sum look at the sum and is its ah",
    "start": "1564670",
    "end": "1573660"
  },
  {
    "text": "if the tag is zero then it's an A and you see a to build an A plus B pair with",
    "start": "1573660",
    "end": "1580690"
  },
  {
    "text": "tag zero and the tag is one it's a B so use in write to build an A or B pair",
    "start": "1580690",
    "end": "1587620"
  },
  {
    "text": "with tag one and oh that doesn't do very much does it okay now notice by the way that what",
    "start": "1587620",
    "end": "1596170"
  },
  {
    "start": "1595000",
    "end": "1665000"
  },
  {
    "text": "we've done here right what is this was",
    "start": "1596170",
    "end": "1602050"
  },
  {
    "text": "like saying it says what is an arrow from C to a times B says any arrow from",
    "start": "1602050",
    "end": "1607870"
  },
  {
    "text": "C to a times B can be built up by a pair of arrows one from C to a and one from C",
    "start": "1607870",
    "end": "1614350"
  },
  {
    "text": "to B right and FG built that and then given such an arrow from C to a times B",
    "start": "1614350",
    "end": "1620950"
  },
  {
    "text": "I can get back the arrows to a into B by a plot composing with first and second",
    "start": "1620950",
    "end": "1626040"
  },
  {
    "text": "so there's an isomorphism having a pair of arrows one from C to a and one from C",
    "start": "1626040",
    "end": "1632230"
  },
  {
    "text": "to B is the same as having an arrow from C to a times B and so we say with an",
    "start": "1632230",
    "end": "1638260"
  },
  {
    "text": "isomorphism so it's curly C followed by C and E a just means I actually defined",
    "start": "1638260",
    "end": "1645160"
  },
  {
    "text": "that here right curly C of a and B it's just a set of all arrows from A to B in Category curly see okay so just using",
    "start": "1645160",
    "end": "1653110"
  },
  {
    "text": "a little bit more advanced notation and this is the cool thing about category theory is everything that I did in this",
    "start": "1653110",
    "end": "1658299"
  },
  {
    "text": "diagram at length is just summarized in this one equation and similarly what",
    "start": "1658299",
    "end": "1668230"
  },
  {
    "text": "does it mean to have a sum it means that",
    "start": "1668230",
    "end": "1673600"
  },
  {
    "text": "having an arrow from an A plus a B to C is the same as having an arrow from an a",
    "start": "1673600",
    "end": "1679210"
  },
  {
    "text": "to a C and having an arrow from the B to a C so FG the case analysis builds that",
    "start": "1679210",
    "end": "1684250"
  },
  {
    "text": "up and to take this apart you can just pre compose your arrow from a plus B to",
    "start": "1684250",
    "end": "1691299"
  },
  {
    "text": "C with either in left that'll give you an arrow from a into a plus B to C or precomposed it within right which gives",
    "start": "1691299",
    "end": "1697780"
  },
  {
    "text": "you an arrow from B to a plus B into C so arrows from A to C and B to C so again we've got lots of morphism okay",
    "start": "1697780",
    "end": "1705100"
  },
  {
    "text": "and then we can turn it into a programming language if M is a term of",
    "start": "1705100",
    "end": "1710470"
  },
  {
    "text": "type A then in left of M is the term of type A plus B and for the semantics we",
    "start": "1710470",
    "end": "1715570"
  },
  {
    "text": "just build our term of type A and then apply in left to the result to get",
    "start": "1715570",
    "end": "1721720"
  },
  {
    "text": "determine type A plus B that's how you construct a sum m and in right similarly oh and then the fun one is case analysis",
    "start": "1721720",
    "end": "1728470"
  },
  {
    "text": "which looks a bit different doesn't it how do we do case analysis in our programming language with a case",
    "start": "1728470",
    "end": "1734350"
  },
  {
    "text": "expression so L is an A plus B term and",
    "start": "1734350",
    "end": "1739950"
  },
  {
    "text": "X is if we extend the environment variable X of type a or we extend the",
    "start": "1739950",
    "end": "1748059"
  },
  {
    "start": "1740000",
    "end": "1810000"
  },
  {
    "text": "environment with a variable Y of type B",
    "start": "1748059",
    "end": "1752580"
  },
  {
    "text": "okay and then P and Q are terms in those extended environments that give us a C",
    "start": "1753210",
    "end": "1758980"
  },
  {
    "text": "so House case analysis work do case L of and then if it's if the tag is 0 we bind",
    "start": "1758980",
    "end": "1767980"
  },
  {
    "text": "X to the value of a so X will be a value of type a and then we can evaluate P and",
    "start": "1767980",
    "end": "1774840"
  },
  {
    "text": "if the tag is 1 we bind Y to the value of type B and then evaluate Q",
    "start": "1775980",
    "end": "1783809"
  },
  {
    "text": "okay so it's just as okay so how many people have seen case expressions like that before okay so not many of you so",
    "start": "1783809",
    "end": "1793630"
  },
  {
    "text": "this is a very useful construct right this is how you pull apart two",
    "start": "1793630",
    "end": "1799120"
  },
  {
    "text": "alternatives so this is a standard contract in Haskell and F sharp and pretty much every functional language",
    "start": "1799120",
    "end": "1804760"
  },
  {
    "text": "you can name is it's called pattern matching that's right so the patterns",
    "start": "1804760",
    "end": "1812710"
  },
  {
    "start": "1810000",
    "end": "1890000"
  },
  {
    "text": "here would be in left X or in right Y and then to give this a semantics how do we do that well let's pair so gamma is",
    "start": "1812710",
    "end": "1821110"
  },
  {
    "text": "our environment let's do a pair of that with H and that'll give us an A plus or",
    "start": "1821110",
    "end": "1826659"
  },
  {
    "text": "B's now we've got the environment gamma and the a or b and then we can convert that to a gamma paired with an A or a",
    "start": "1826659",
    "end": "1835600"
  },
  {
    "text": "gamma paired with a B right how do you do that well look at your a or B if it's tag is 0 pair gamma with a if it's tag",
    "start": "1835600",
    "end": "1843010"
  },
  {
    "text": "is one pair gamma with B and then put back your tag and then we've got things",
    "start": "1843010",
    "end": "1848830"
  },
  {
    "text": "that we can apply FG 2 and that gives us a C so this we need this additional",
    "start": "1848830",
    "end": "1854200"
  },
  {
    "text": "contract which is called distributivity here it is right it just says given an A",
    "start": "1854200",
    "end": "1859270"
  },
  {
    "text": "plus C pair are paired with an A a choice of an A or a C and a choice of a",
    "start": "1859270",
    "end": "1866770"
  },
  {
    "text": "B or C we can get an a a choice of an A or B and a C and this is the function",
    "start": "1866770",
    "end": "1874960"
  },
  {
    "text": "that goes one way and this is the function that goes another way oh and uses this funny thing called cur what's",
    "start": "1874960",
    "end": "1880630"
  },
  {
    "text": "that well we'll see that in a minute it's actually going this way around is",
    "start": "1880630",
    "end": "1885880"
  },
  {
    "text": "the one that we needed okay so that gives us the semantics and again this is",
    "start": "1885880",
    "end": "1892419"
  },
  {
    "start": "1890000",
    "end": "1950000"
  },
  {
    "text": "logic what connective of logic do you think pluses or disjunction right so it",
    "start": "1892419",
    "end": "1900010"
  },
  {
    "text": "says well if I thought of proof of a I've also got a proof of A or B and the proof is a or B is true because a is",
    "start": "1900010",
    "end": "1906760"
  },
  {
    "text": "true and similarly with B and then else I've got a proof of a or B and if I",
    "start": "1906760",
    "end": "1914770"
  },
  {
    "text": "assume a write you told us never to assume anything but we're going to assume stuff if I assume a then I can",
    "start": "1914770",
    "end": "1923110"
  },
  {
    "text": "prove C and if I assume B then I can prove C so if knowing a I can prove C",
    "start": "1923110",
    "end": "1930279"
  },
  {
    "text": "and knowing B I can prove C and all I know is a or b ah I can still prove C",
    "start": "1930279",
    "end": "1936669"
  },
  {
    "text": "right because either a is true in which case C is true or B is true in which case C is true so either way C is true",
    "start": "1936669",
    "end": "1946018"
  },
  {
    "text": "and then this is the categorical way of assigning a meaning to that logic okay",
    "start": "1947190",
    "end": "1955389"
  },
  {
    "start": "1950000",
    "end": "2015000"
  },
  {
    "text": "so I mentioned this thing called curry and that requires this thing called Exponential's yep I was right it would",
    "start": "1955389",
    "end": "1962769"
  },
  {
    "text": "take more than half an hour and this is a little bit trickier so we have to",
    "start": "1962769",
    "end": "1968109"
  },
  {
    "text": "assume we already know about pairs products we don't actually need sums to define this but let gamma I should you",
    "start": "1968109",
    "end": "1974440"
  },
  {
    "text": "see here but I've called the gala so I've got gamma paired with an A and F",
    "start": "1974440",
    "end": "1979809"
  },
  {
    "text": "takes that to a B this is like an environment that defines everything in gamma and also defines a what this says",
    "start": "1979809",
    "end": "1989619"
  },
  {
    "text": "curry F right here's our another isomorphism for us it says an arrow from",
    "start": "1989619",
    "end": "1994690"
  },
  {
    "text": "gamma times A to B is the same as an arrow from gamma to this a arrow D thing",
    "start": "1994690",
    "end": "2000749"
  },
  {
    "text": "so a arrow B is a function space this is the type of functions from A to D wait",
    "start": "2000749",
    "end": "2008549"
  },
  {
    "text": "if our arrows were functions they're saying objects are functions so if you",
    "start": "2008549",
    "end": "2017399"
  },
  {
    "start": "2015000",
    "end": "2070000"
  },
  {
    "text": "have a language where data is one kind of thing and functions are another kind",
    "start": "2017399",
    "end": "2023279"
  },
  {
    "text": "of thing that's called first order and category theory can model that but if",
    "start": "2023279",
    "end": "2028590"
  },
  {
    "text": "you have functions as first-class citizens sometimes how its foot so that",
    "start": "2028590",
    "end": "2034919"
  },
  {
    "text": "your data can itself be a function so you can function to act on functions or",
    "start": "2034919",
    "end": "2039929"
  },
  {
    "text": "functions that return functions or pairs of functions or disjoint unions of",
    "start": "2039929",
    "end": "2046679"
  },
  {
    "text": "functions or whatever you want then those are called higher-order funk and that's modeled by saying oh okay",
    "start": "2046679",
    "end": "2055138"
  },
  {
    "text": "functions aren't just something in the category but they're every arrow in the category also corresponds to an object",
    "start": "2055139",
    "end": "2061079"
  },
  {
    "text": "in the category and that's what we're doing here so if that doesn't make your",
    "start": "2061079",
    "end": "2068940"
  },
  {
    "text": "head hurt it should right that is the most profound idea in computing the idea",
    "start": "2068940",
    "end": "2075419"
  },
  {
    "start": "2070000",
    "end": "2130000"
  },
  {
    "text": "that programs are also data not every data is a program but every program can",
    "start": "2075419",
    "end": "2082470"
  },
  {
    "text": "be converted into data and in category theory you capture that idea with what's",
    "start": "2082470",
    "end": "2087929"
  },
  {
    "text": "called a Cartesian clothes category which is a fancy name for just saying",
    "start": "2087929",
    "end": "2093210"
  },
  {
    "text": "we're going to be able to treat functions as Zeta so Curry of F takes a",
    "start": "2093210",
    "end": "2101999"
  },
  {
    "text": "gamma and gives us an A to D function so remember F takes a gamma and an A and",
    "start": "2101999",
    "end": "2107849"
  },
  {
    "text": "gives us a B and this takes just a gamma and gives us an A to B so it stores away",
    "start": "2107849",
    "end": "2115410"
  },
  {
    "text": "gamma it stores away the function f and then says wait and then as soon as you've given me an A I'll pair that with",
    "start": "2115410",
    "end": "2122069"
  },
  {
    "text": "gamma and use F to get a B it's just delaying for a bit so in programming",
    "start": "2122069",
    "end": "2128759"
  },
  {
    "text": "terms this is called a closure so what happens what's the meaning of this",
    "start": "2128759",
    "end": "2133819"
  },
  {
    "text": "so curry s is our way of building a function and if I built a function f",
    "start": "2133819",
    "end": "2139589"
  },
  {
    "text": "what does that mean well if I take the gamma and I take a value of type a don't change the values type a so cross ID",
    "start": "2139589",
    "end": "2145980"
  },
  {
    "text": "just means leave this part of the pair the same and you can actually build this",
    "start": "2145980",
    "end": "2154049"
  },
  {
    "text": "using the angle bracket construction right this just says start with a gamma a pair and apply first and curry as to",
    "start": "2154049",
    "end": "2161339"
  },
  {
    "text": "get the first component of the pair and apply second an ID to get the second component of the pair so we've applied",
    "start": "2161339",
    "end": "2167369"
  },
  {
    "text": "curry F to the first bit left the second bit unchanged and then apply takes the",
    "start": "2167369",
    "end": "2172680"
  },
  {
    "text": "function and applies it to the value to give the result of type B this just says",
    "start": "2172680",
    "end": "2178499"
  },
  {
    "text": "take a function apply to the value give a result of type D and again we can turn this into our",
    "start": "2178499",
    "end": "2186120"
  },
  {
    "text": "programming language so if in environment gamma we also have a",
    "start": "2186120",
    "end": "2191710"
  },
  {
    "text": "variable X of type a and n is a term of type V then lambda acts yes there's",
    "start": "2191710",
    "end": "2196930"
  },
  {
    "text": "lambda lambda X dot n is a function from A to B so X might be a number and gamma",
    "start": "2196930",
    "end": "2206200"
  },
  {
    "text": "might have some other number in it say Y is the number and then n would be X plus",
    "start": "2206200",
    "end": "2211300"
  },
  {
    "text": "y so this is the add Y to things function which goes from integers to",
    "start": "2211300",
    "end": "2216460"
  },
  {
    "text": "integers and has Y in gamma somewhere which is stored in the closure and then",
    "start": "2216460",
    "end": "2223690"
  },
  {
    "text": "the other one is even easier right given L is a function from A to B and M is a",
    "start": "2223690",
    "end": "2228790"
  },
  {
    "text": "term of type a L applied to M if you will be and then it turns out that the",
    "start": "2228790",
    "end": "2234940"
  },
  {
    "text": "first one you give it a semantics with curry and the second one you just pair up the two things and then use apply so",
    "start": "2234940",
    "end": "2240580"
  },
  {
    "text": "the semantics is very straightforward and again this corresponds to logic and",
    "start": "2240580",
    "end": "2246760"
  },
  {
    "start": "2245000",
    "end": "2330000"
  },
  {
    "text": "what thing is arrow in logic implication you've just learned the three most",
    "start": "2246760",
    "end": "2253720"
  },
  {
    "text": "important constructs in programming languages the record the variant record",
    "start": "2253720",
    "end": "2260140"
  },
  {
    "text": "and the function so let me just finish by showing you two cool things this is",
    "start": "2260140",
    "end": "2267070"
  },
  {
    "text": "it like this is low filling up to prepare to have your socks locked off we",
    "start": "2267070",
    "end": "2274240"
  },
  {
    "text": "look what's the relationship between products and sums it's the same diagram you just reverse",
    "start": "2274240",
    "end": "2280090"
  },
  {
    "text": "all the arrows these are exactly the same thing we just turned all the arrows",
    "start": "2280090",
    "end": "2285700"
  },
  {
    "text": "around so it's not like products and sums are a little bit similar no they",
    "start": "2285700",
    "end": "2292600"
  },
  {
    "text": "are what's called dual they are exactly dual I didn't logic when you learn and an or",
    "start": "2292600",
    "end": "2301510"
  },
  {
    "text": "are dual to each other by de Morgan's laws this is explaining that okay so",
    "start": "2301510",
    "end": "2308920"
  },
  {
    "text": "this is why category theory is worth learning because you know you'd never see this in the programming language",
    "start": "2308920",
    "end": "2313930"
  },
  {
    "text": "right this with this case thing does not look duel to that does it",
    "start": "2313930",
    "end": "2321930"
  },
  {
    "text": "they look rather different but no they're exactly duel and that's what category theory buys you I just I just",
    "start": "2321930",
    "end": "2331800"
  },
  {
    "start": "2330000",
    "end": "2405000"
  },
  {
    "text": "think this is so cool and I hope you do too and then the last thing is right we",
    "start": "2331800",
    "end": "2339780"
  },
  {
    "text": "had all these things apply some morphisms right how do you define product well it says this pair of arrows",
    "start": "2339780",
    "end": "2344880"
  },
  {
    "text": "is the same as this arrow same for some and then for functions it says well see",
    "start": "2344880",
    "end": "2349950"
  },
  {
    "text": "paired with an A a function from that to be the same as a function from C to an A",
    "start": "2349950",
    "end": "2354960"
  },
  {
    "text": "to B function you already learn these right you learn these back in high",
    "start": "2354960",
    "end": "2361290"
  },
  {
    "text": "school because all we do is we write an arrow from C to a how many of these are",
    "start": "2361290",
    "end": "2367650"
  },
  {
    "text": "there let's say C na or finite sets so C is a satisfy C and a is a set aside a",
    "start": "2367650",
    "end": "2375319"
  },
  {
    "text": "how many functions are there from C to a well if a is three there'd be C cube",
    "start": "2375319",
    "end": "2383550"
  },
  {
    "text": "right 1/4 if sorry a is C is size three",
    "start": "2383550",
    "end": "2390329"
  },
  {
    "text": "there would be a cube functions right one for the first value C 1 for the",
    "start": "2390329",
    "end": "2397020"
  },
  {
    "text": "second value and one for the third value so if a is 2 and C is three there are",
    "start": "2397020",
    "end": "2403260"
  },
  {
    "text": "eight different functions and we can see",
    "start": "2403260",
    "end": "2410160"
  },
  {
    "text": "that by just writing a to the C for the set of all functions from C to a and B to the C for the set of all functions",
    "start": "2410160",
    "end": "2416069"
  },
  {
    "text": "from C to B and then a times B to the C for the set of all functions from C to",
    "start": "2416069",
    "end": "2421680"
  },
  {
    "text": "an ad pair so this isomorphism gets rewritten like this you knew that",
    "start": "2421680",
    "end": "2428849"
  },
  {
    "text": "already didn't you and the other isomorphism gets written like this and",
    "start": "2428849",
    "end": "2433950"
  },
  {
    "text": "you knew that already as well and the third isomorphism gets written like this",
    "start": "2433950",
    "end": "2440640"
  },
  {
    "text": "and you knew that to write B to the C times a savings just raise B to the 8th power and then raise it to the C power",
    "start": "2440640",
    "end": "2447710"
  },
  {
    "text": "so notice that here we've exponents and products for exponents and",
    "start": "2447710",
    "end": "2454060"
  },
  {
    "text": "products both in the category level and at the object level those careful distinctions that we made between arrows",
    "start": "2454060",
    "end": "2459609"
  },
  {
    "text": "and objects that represent arrows have all gone away but other than mushing",
    "start": "2459609",
    "end": "2464890"
  },
  {
    "text": "everything together you already knew all this in high school right so it's easy",
    "start": "2464890",
    "end": "2471160"
  },
  {
    "text": "stuff made hard made even easier that's category theory okay so I need to",
    "start": "2471160",
    "end": "2477250"
  },
  {
    "text": "finish now right I'm just going to leave you with one thought right all of this was a build-up to explain the semantics",
    "start": "2477250",
    "end": "2483070"
  },
  {
    "text": "of lambda calculus and to explain deep connections between programming languages based on lambda calculus and",
    "start": "2483070",
    "end": "2490230"
  },
  {
    "text": "logical ideas for natural deduction and what you learned in high school",
    "start": "2490230",
    "end": "2495310"
  },
  {
    "text": "right what you take away from all this lambda calculus should be the basis of what you do you should use some function",
    "start": "2495310",
    "end": "2502869"
  },
  {
    "text": "some programming language which is based on lambda calculus and no matter what the people with Java and C++ tell you",
    "start": "2502869",
    "end": "2509560"
  },
  {
    "text": "yeah they've added Lin lambdas as johnny-come-lately sck but this means no use Haskell use F sharp use standard ml",
    "start": "2509560",
    "end": "2518200"
  },
  {
    "text": "use one of the language use lists you scheme use one of the languages that has to set its core what's the lesson when",
    "start": "2518200",
    "end": "2525400"
  },
  {
    "text": "you have a tough job what you should think is that this is a job for lambda",
    "start": "2525400",
    "end": "2533500"
  },
  {
    "text": "calculus",
    "start": "2533500",
    "end": "2535950"
  }
]