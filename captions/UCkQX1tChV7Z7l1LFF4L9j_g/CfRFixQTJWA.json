[
  {
    "text": "hi I'm Seth lad and this is Dart tips",
    "start": "240",
    "end": "2200"
  },
  {
    "text": "today we're going to talk about the",
    "start": "2200",
    "end": "3320"
  },
  {
    "text": "different runtime modes of Dart Dart",
    "start": "3320",
    "end": "5279"
  },
  {
    "text": "apps can run in a virtual machine named",
    "start": "5279",
    "end": "7160"
  },
  {
    "text": "not surprisingly the dart VM and dart",
    "start": "7160",
    "end": "9320"
  },
  {
    "text": "apps can be compiled to JavaScript to",
    "start": "9320",
    "end": "10840"
  },
  {
    "text": "run in modern browsers for this episode",
    "start": "10840",
    "end": "13040"
  },
  {
    "text": "I'm going to focus on the dart VM and",
    "start": "13040",
    "end": "14759"
  },
  {
    "text": "its two runtime modes a speed obsessed",
    "start": "14759",
    "end": "16960"
  },
  {
    "text": "production mode and a developer friendly",
    "start": "16960",
    "end": "18640"
  },
  {
    "text": "check mode let's get",
    "start": "18640",
    "end": "21630"
  },
  {
    "text": "[Music]",
    "start": "21630",
    "end": "24519"
  },
  {
    "text": "started to understand why there are two",
    "start": "24519",
    "end": "26599"
  },
  {
    "text": "runtime modes we first have to",
    "start": "26599",
    "end": "28240"
  },
  {
    "text": "understand how static types work in D",
    "start": "28240",
    "end": "30400"
  },
  {
    "text": "Dart is an optionally typed and dynamic",
    "start": "30400",
    "end": "32520"
  },
  {
    "text": "language which means that variables can",
    "start": "32520",
    "end": "34079"
  },
  {
    "text": "be annotated with static types or",
    "start": "34079",
    "end": "36079"
  },
  {
    "text": "variables can be untyped also known as",
    "start": "36079",
    "end": "38160"
  },
  {
    "text": "Dynamic the philosophy behind this",
    "start": "38160",
    "end": "40160"
  },
  {
    "text": "design decision will be explored in a",
    "start": "40160",
    "end": "41719"
  },
  {
    "text": "future episode but for now it's",
    "start": "41719",
    "end": "43120"
  },
  {
    "text": "important to understand that you as a",
    "start": "43120",
    "end": "44559"
  },
  {
    "text": "developer have a choice of when and how",
    "start": "44559",
    "end": "47199"
  },
  {
    "text": "to use static type annotations so what",
    "start": "47199",
    "end": "49960"
  },
  {
    "text": "are type annotations this is an example",
    "start": "49960",
    "end": "52559"
  },
  {
    "text": "of an untyped Dynamic variable notice",
    "start": "52559",
    "end": "55039"
  },
  {
    "text": "how I use VAR to denote a dynamic",
    "start": "55039",
    "end": "56879"
  },
  {
    "text": "variable obviously the object pointed to",
    "start": "56879",
    "end": "59000"
  },
  {
    "text": "by the variable isn't instance of a",
    "start": "59000",
    "end": "60640"
  },
  {
    "text": "specific class in this case an end but",
    "start": "60640",
    "end": "62800"
  },
  {
    "text": "the variable itself simply has the",
    "start": "62800",
    "end": "64600"
  },
  {
    "text": "dynamic type in contrast this is the",
    "start": "64600",
    "end": "67479"
  },
  {
    "text": "same variable with a static type",
    "start": "67479",
    "end": "69159"
  },
  {
    "text": "annotation type annotations in Dart",
    "start": "69159",
    "end": "71400"
  },
  {
    "text": "precede the variable name in this case",
    "start": "71400",
    "end": "73400"
  },
  {
    "text": "the answer variable is of type int now",
    "start": "73400",
    "end": "76119"
  },
  {
    "text": "that I've shown examples of both untyped",
    "start": "76119",
    "end": "77799"
  },
  {
    "text": "and typed code we can see what the two",
    "start": "77799",
    "end": "79759"
  },
  {
    "text": "runtime modes do with this type",
    "start": "79759",
    "end": "82240"
  },
  {
    "text": "annotation in the default runtime mode",
    "start": "82240",
    "end": "84720"
  },
  {
    "text": "of Dart also known as production mode",
    "start": "84720",
    "end": "86759"
  },
  {
    "text": "these two lines have the exact same",
    "start": "86759",
    "end": "88439"
  },
  {
    "text": "runtime semantics this this is because",
    "start": "88439",
    "end": "90439"
  },
  {
    "text": "in production mode type annotations are",
    "start": "90439",
    "end": "92200"
  },
  {
    "text": "ignored that's right in the default",
    "start": "92200",
    "end": "94159"
  },
  {
    "text": "runtime mode of Dart the program runs as",
    "start": "94159",
    "end": "96600"
  },
  {
    "text": "if you used VAR everywhere this means",
    "start": "96600",
    "end": "100159"
  },
  {
    "text": "that in production mode this line of",
    "start": "100159",
    "end": "101880"
  },
  {
    "text": "code compiles and runs I know it looks",
    "start": "101880",
    "end": "103960"
  },
  {
    "text": "strange and I don't recommend ever",
    "start": "103960",
    "end": "105479"
  },
  {
    "text": "writing code like",
    "start": "105479",
    "end": "106960"
  },
  {
    "text": "this in production mode type annotations",
    "start": "106960",
    "end": "109640"
  },
  {
    "text": "are ignored and the compiler treats the",
    "start": "109640",
    "end": "111520"
  },
  {
    "text": "code like this which of course works",
    "start": "111520",
    "end": "113479"
  },
  {
    "text": "just fine remember Dart is at its core a",
    "start": "113479",
    "end": "116240"
  },
  {
    "text": "dynamic scripting language types are",
    "start": "116240",
    "end": "118200"
  },
  {
    "text": "optional and thus the VM must production",
    "start": "118200",
    "end": "120320"
  },
  {
    "text": "mode execute the code as if all static",
    "start": "120320",
    "end": "122439"
  },
  {
    "text": "type annotations did not exist",
    "start": "122439",
    "end": "124439"
  },
  {
    "text": "production mode actually gets a speed",
    "start": "124439",
    "end": "126079"
  },
  {
    "text": "boost By ignoring static types because",
    "start": "126079",
    "end": "128160"
  },
  {
    "text": "it can avoid many type checks production",
    "start": "128160",
    "end": "130879"
  },
  {
    "text": "mode gets its name because this is how",
    "start": "130879",
    "end": "132599"
  },
  {
    "text": "we want you to deploy your Dart apps to",
    "start": "132599",
    "end": "134400"
  },
  {
    "text": "production using the fastest runtime",
    "start": "134400",
    "end": "136519"
  },
  {
    "text": "mode in the",
    "start": "136519",
    "end": "137920"
  },
  {
    "text": "VM just because production mode ignores",
    "start": "137920",
    "end": "140360"
  },
  {
    "text": "static types it doesn't mean you might",
    "start": "140360",
    "end": "141599"
  },
  {
    "text": "as well just use VAR for everything",
    "start": "141599",
    "end": "143280"
  },
  {
    "text": "static types are great for inline",
    "start": "143280",
    "end": "144840"
  },
  {
    "text": "documentation and the VM has another",
    "start": "144840",
    "end": "146760"
  },
  {
    "text": "runtime mode that does perform type",
    "start": "146760",
    "end": "148879"
  },
  {
    "text": "checks at runtime",
    "start": "148879",
    "end": "150640"
  },
  {
    "text": "in this second mode named checked mode",
    "start": "150640",
    "end": "153120"
  },
  {
    "text": "the VM inserts Dynamic type assertions",
    "start": "153120",
    "end": "156120"
  },
  {
    "text": "if checked mode notices a case where",
    "start": "156120",
    "end": "157720"
  },
  {
    "text": "types don't match up it will throw an",
    "start": "157720",
    "end": "159280"
  },
  {
    "text": "exception developing and testing in",
    "start": "159280",
    "end": "161319"
  },
  {
    "text": "check mode helps you catch potential",
    "start": "161319",
    "end": "163120"
  },
  {
    "text": "bugs early based on type annotations in",
    "start": "163120",
    "end": "165640"
  },
  {
    "text": "other words in check mode the type",
    "start": "165640",
    "end": "167280"
  },
  {
    "text": "annotations do affect how the program",
    "start": "167280",
    "end": "169360"
  },
  {
    "text": "runs going back to our line of code that",
    "start": "169360",
    "end": "171480"
  },
  {
    "text": "looks so very strange it's clear that",
    "start": "171480",
    "end": "173280"
  },
  {
    "text": "the expression 1+ 2 evaluates to an",
    "start": "173280",
    "end": "175519"
  },
  {
    "text": "integer and not a",
    "start": "175519",
    "end": "177239"
  },
  {
    "text": "string here the type of the variable",
    "start": "177239",
    "end": "179319"
  },
  {
    "text": "does not match the type of the right",
    "start": "179319",
    "end": "181200"
  },
  {
    "text": "hand side expression in check mode this",
    "start": "181200",
    "end": "183640"
  },
  {
    "text": "mismatch is caught at runtime and",
    "start": "183640",
    "end": "185360"
  },
  {
    "text": "surfaced as an exception in check mode",
    "start": "185360",
    "end": "188080"
  },
  {
    "text": "when the program is compiled type",
    "start": "188080",
    "end": "190000"
  },
  {
    "text": "assertions are dynamically inserted into",
    "start": "190000",
    "end": "192040"
  },
  {
    "text": "the code the VM adds something like this",
    "start": "192040",
    "end": "195360"
  },
  {
    "text": "approximation notice how the type of",
    "start": "195360",
    "end": "197280"
  },
  {
    "text": "temp results value is compared to",
    "start": "197280",
    "end": "199200"
  },
  {
    "text": "results static type if they don't match",
    "start": "199200",
    "end": "201319"
  },
  {
    "text": "an exception is thrown otherwise results",
    "start": "201319",
    "end": "203720"
  },
  {
    "text": "value is set and the program continues",
    "start": "203720",
    "end": "205959"
  },
  {
    "text": "getting this kind of feedback in the",
    "start": "205959",
    "end": "207560"
  },
  {
    "text": "event of a typ mismatch is really",
    "start": "207560",
    "end": "209360"
  },
  {
    "text": "helpful When developing and debugging",
    "start": "209360",
    "end": "211200"
  },
  {
    "text": "your",
    "start": "211200",
    "end": "211959"
  },
  {
    "text": "app understanding darts to runtime modes",
    "start": "211959",
    "end": "214640"
  },
  {
    "text": "and how they interact with static type",
    "start": "214640",
    "end": "216360"
  },
  {
    "text": "annotations is important to getting the",
    "start": "216360",
    "end": "218400"
  },
  {
    "text": "most out of Dart use check mode to catch",
    "start": "218400",
    "end": "221120"
  },
  {
    "text": "type mismatches during development and",
    "start": "221120",
    "end": "222680"
  },
  {
    "text": "testing for the utmost in speed use",
    "start": "222680",
    "end": "224959"
  },
  {
    "text": "production mode when you ship your apps",
    "start": "224959",
    "end": "226360"
  },
  {
    "text": "to production consult the documentation",
    "start": "226360",
    "end": "228640"
  },
  {
    "text": "to learn how to toggle these modes in",
    "start": "228640",
    "end": "230120"
  },
  {
    "text": "the commandline dart VM and dart editor",
    "start": "230120",
    "end": "233120"
  },
  {
    "text": "thanks for watching my name is Seth lad",
    "start": "233120",
    "end": "234640"
  },
  {
    "text": "and as we say here on Dart tips stay",
    "start": "234640",
    "end": "236840"
  },
  {
    "text": "sharp click here to subscribe to our",
    "start": "236840",
    "end": "238920"
  },
  {
    "text": "channel for more epes of Dart tips we",
    "start": "238920",
    "end": "240959"
  },
  {
    "text": "appreciate any thoughts you might have",
    "start": "240959",
    "end": "242159"
  },
  {
    "text": "for the series please leave them in the",
    "start": "242159",
    "end": "243760"
  },
  {
    "text": "comments below if you have any",
    "start": "243760",
    "end": "245480"
  },
  {
    "text": "additional questions about Dart please",
    "start": "245480",
    "end": "247040"
  },
  {
    "text": "drop by stack Overflow where Dart",
    "start": "247040",
    "end": "248560"
  },
  {
    "text": "experts are standing by to help you out",
    "start": "248560",
    "end": "250239"
  },
  {
    "text": "see you next time",
    "start": "250239",
    "end": "253400"
  }
]