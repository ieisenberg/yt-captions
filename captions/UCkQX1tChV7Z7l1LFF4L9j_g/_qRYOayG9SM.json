[
  {
    "text": "how many of you saw Neal's functional thinking session earlier a couple of you",
    "start": "10639",
    "end": "16289"
  },
  {
    "text": "okay oh by the way introductions that's me most people don't care moving on how",
    "start": "16289",
    "end": "23730"
  },
  {
    "text": "many of you have used Scala before a couple hands how many of you are",
    "start": "23730",
    "end": "30630"
  },
  {
    "text": "familiar with design patterns okay let me let me rephrase that how many of you",
    "start": "30630",
    "end": "36989"
  },
  {
    "text": "are familiar with design patterns and a man or other than I cut and paste code from the Gang of Four book okay all",
    "start": "36989",
    "end": "45300"
  },
  {
    "text": "right cool because what this session is is kind of intended to do is to help",
    "start": "45300",
    "end": "51230"
  },
  {
    "text": "help you start thinking in Scala to help",
    "start": "51230",
    "end": "56670"
  },
  {
    "text": "you start trying to reason instead of you know like when you learn a foreign language right and and there's a certain",
    "start": "56670",
    "end": "63899"
  },
  {
    "text": "level of mastery when you have enough vocabulary words to be able to say where is the bathroom and please know squid on",
    "start": "63899",
    "end": "71939"
  },
  {
    "text": "my plate right and then there's a level of mastery where you can actually put",
    "start": "71939",
    "end": "77159"
  },
  {
    "text": "together complete sentences hello how are you I'm fine and you can actually understand the responses that are coming",
    "start": "77159",
    "end": "82890"
  },
  {
    "text": "back to you but then the next level of mastery beyond that is when you actually think in that language right when you",
    "start": "82890",
    "end": "90540"
  },
  {
    "text": "find yourself when a response comes in when when a question comes in you don't have to translate it into your native",
    "start": "90540",
    "end": "97320"
  },
  {
    "text": "tongue generate the response you want and then translate it back into whatever tongue you're trying to speak to us all",
    "start": "97320",
    "end": "103290"
  },
  {
    "text": "right they say actually that you know that you have achieved fluency in a language when you dream in that language",
    "start": "103290",
    "end": "110780"
  },
  {
    "text": "now are you going to go home tonight and dream in Scala god I hope not",
    "start": "110780",
    "end": "117090"
  },
  {
    "text": "because if so there's probably less hope for you than there was even just five",
    "start": "117090",
    "end": "122189"
  },
  {
    "text": "minutes ago but that's really where we want to go right that's really where you",
    "start": "122189",
    "end": "127799"
  },
  {
    "text": "want to be able to take your knowledge just knowing the Scala syntax doesn't",
    "start": "127799",
    "end": "133170"
  },
  {
    "text": "really give you a whole lot it's when you start exploring some of the concepts when you start exploring some of the",
    "start": "133170",
    "end": "139230"
  },
  {
    "text": "ideas and in particular let's be really clear about this Scala is not just a",
    "start": "139230",
    "end": "144270"
  },
  {
    "text": "functional language there are a number of functional languages in the world if you want to play with a language that is",
    "start": "144270",
    "end": "150090"
  },
  {
    "text": "just functional I'll encourage you to go look at Yeti why et I write the name of",
    "start": "150090",
    "end": "156090"
  },
  {
    "text": "the abominable snowman it's an implementation of standard ml running on",
    "start": "156090",
    "end": "161250"
  },
  {
    "text": "top of the JVM and it's just purely a functional language if you want to just kind of go grok the functional world for",
    "start": "161250",
    "end": "167670"
  },
  {
    "text": "a while you can go play with that and still be able to you know produce jar files in la scala is a hybrid of both",
    "start": "167670",
    "end": "175799"
  },
  {
    "text": "the object world and the functional world right and so it's really when we start",
    "start": "175799",
    "end": "182310"
  },
  {
    "text": "drawing from both worlds that that really is where we see a lot of the unique power that work that Scala",
    "start": "182310",
    "end": "189660"
  },
  {
    "text": "represents Scala has a cousin by the way over in the.net world called F sharp and",
    "start": "189660",
    "end": "195440"
  },
  {
    "text": "of a friend of mine who even though she's a Java programmer kind of got",
    "start": "195440",
    "end": "200519"
  },
  {
    "text": "interested in F sharp and kind of started playing with it toying with it etc and she actually Jessa Tron comm if",
    "start": "200519",
    "end": "207329"
  },
  {
    "text": "you go to her blog she's got an example of how her Java code improved because she wrote the",
    "start": "207329",
    "end": "214230"
  },
  {
    "text": "pseudocode in F sharp first and then said okay now I know what I want to do now I know how I want to approach this",
    "start": "214230",
    "end": "220500"
  },
  {
    "text": "and then sort of translated it back into Java because of course Java is a very poor object functional language it was",
    "start": "220500",
    "end": "227160"
  },
  {
    "text": "designed to be an object language Scala is the most logical equivalent to F sharp if anything F sharp is a little",
    "start": "227160",
    "end": "233609"
  },
  {
    "text": "bit more on the functional side and scholars a little bit more on the object side it's when we take these two and",
    "start": "233609",
    "end": "238680"
  },
  {
    "text": "combine them and start investigating that that we really start to see some of the power here now this particular",
    "start": "238680",
    "end": "247140"
  },
  {
    "text": "session I'm assuming that you have at least some familiarity with the Scala see and I think one of you raised your",
    "start": "247140",
    "end": "254579"
  },
  {
    "text": "hand so the rest of you you're just screwed I'm sorry it's not my fault you didn't meet the prerequisites don't take",
    "start": "254579",
    "end": "262049"
  },
  {
    "text": "it out on my eval all right it's your fault you deal with it I think you could still be able to grok",
    "start": "262049",
    "end": "268479"
  },
  {
    "text": "some of the concepts and I think you'll still be able to see some of what we're",
    "start": "268479",
    "end": "273520"
  },
  {
    "text": "trying to get to but obviously having to ask you know what exactly is that square bracket there slows us down all right",
    "start": "273520",
    "end": "281229"
  },
  {
    "text": "so try to you know the syntactic questions we can try to address later and certainly you know these the the",
    "start": "281229",
    "end": "289270"
  },
  {
    "text": "examples will still stand for something for you to pick up later as you pick up more of the Scala cinta but going into",
    "start": "289270",
    "end": "296500"
  },
  {
    "text": "some of the functional ideas part of the idea and I'm just going to blow through these pretty quickly you guys a a bunch",
    "start": "296500",
    "end": "303520"
  },
  {
    "text": "of you went and saw Neil stock so this will be repeat and be because quite frankly I want to get to the other stuff",
    "start": "303520",
    "end": "309280"
  },
  {
    "text": "this is foundation prerequisite etc the",
    "start": "309280",
    "end": "314710"
  },
  {
    "text": "functional world says essentially that the the statement x equals x plus one is",
    "start": "314710",
    "end": "321669"
  },
  {
    "text": "fundamentally busted I mean think back to your math classes think back to your algebra now for some",
    "start": "321669",
    "end": "328479"
  },
  {
    "text": "of us that's gonna be a lot longer reach than ever those of us to think back to when we were in grade school and learned",
    "start": "328479",
    "end": "334300"
  },
  {
    "text": "algebra but bear with me the mathematical equation x equals x plus",
    "start": "334300",
    "end": "339880"
  },
  {
    "text": "one think about that for just a second remember what you do in math right is you drop a value in for X and the",
    "start": "339880",
    "end": "347110"
  },
  {
    "text": "equation should hold and so if we drop the value for in for X what do we get we",
    "start": "347110",
    "end": "353620"
  },
  {
    "text": "get four equals four plus one four equals five folks this does not work unless you work",
    "start": "353620",
    "end": "361190"
  },
  {
    "text": "for Enron or you're part of the Greek government oh come on that was topical and funny",
    "start": "361190",
    "end": "368699"
  },
  {
    "text": "anyway four equals five makes no sense and the mathematicians of the world will",
    "start": "368699",
    "end": "376089"
  },
  {
    "text": "be very quick to point that out now we as computer scientists understand that x equals x plus one is not intended to try",
    "start": "376089",
    "end": "381879"
  },
  {
    "text": "to be an equation it's intended to be a sequence of steps fetch ax add one to it store back to",
    "start": "381879",
    "end": "390159"
  },
  {
    "text": "where we had ax right but the interesting thing is if we look at the mathematical parts of this there are",
    "start": "390159",
    "end": "396399"
  },
  {
    "text": "some interesting concepts that emerge out of this for example reaching back even further and this is probably going",
    "start": "396399",
    "end": "402309"
  },
  {
    "text": "to be more of a challenge do you remember in algebra algebra two two equations two unknowns right where you",
    "start": "402309",
    "end": "410349"
  },
  {
    "text": "have X plus y equals 5x minus 1 equals to solve for X and why do you remember",
    "start": "410349",
    "end": "415929"
  },
  {
    "text": "how we did it we isolated one of the variables on the other side of the equality sign right so x equals y blah",
    "start": "415929",
    "end": "423099"
  },
  {
    "text": "blah blah and then we could take once we had x equals something because equality",
    "start": "423099",
    "end": "428499"
  },
  {
    "text": "is equality right means I can substitute one for the other then I can take that",
    "start": "428499",
    "end": "433869"
  },
  {
    "text": "other and drop it in wherever X was and suddenly now we have one equation one",
    "start": "433869",
    "end": "438939"
  },
  {
    "text": "unknown we can solve ba-ba-ba-ba-ba and get two answers for x one it's that substitutability that's",
    "start": "438939",
    "end": "446139"
  },
  {
    "text": "really interesting because in the functional world when we started talking about doing this for programming this is",
    "start": "446139",
    "end": "453399"
  },
  {
    "text": "where we get some of the lazy evaluation characteristics you hear about in haskell if we say x equals this plus",
    "start": "453399",
    "end": "459849"
  },
  {
    "text": "that well we don't have to actually evaluate anything until we absolutely",
    "start": "459849",
    "end": "464889"
  },
  {
    "text": "have to it if that thing happens to be made up of other things and then made up of other things and that",
    "start": "464889",
    "end": "470489"
  },
  {
    "text": "substitutability also means then that we can do that anywhere that X's where",
    "start": "470489",
    "end": "476979"
  },
  {
    "text": "anywhere it appears et cetera we have some really interesting concurrency",
    "start": "476979",
    "end": "482619"
  },
  {
    "text": "properties that begin to emerge if X is equal to this expression here well then",
    "start": "482619",
    "end": "489399"
  },
  {
    "text": "technically we could take the parts of the expression and fling them off onto other threads for calculation because X",
    "start": "489399",
    "end": "496179"
  },
  {
    "text": "depends on all of them and suddenly concurrency isn't nearly as hard particularly because X never",
    "start": "496179",
    "end": "503510"
  },
  {
    "text": "changes right at no point in math does the value of X ever change we might",
    "start": "503510",
    "end": "510680"
  },
  {
    "text": "derive a new value from it which point we call it X Prime but it is immutable at no point does evaluating X change the",
    "start": "510680",
    "end": "519320"
  },
  {
    "text": "value of anything else these are properties that are really really useful for when we start trying to program",
    "start": "519320",
    "end": "525620"
  },
  {
    "text": "concurrent life and in case you hadn't noticed concurrency is kind of becoming",
    "start": "525620",
    "end": "531440"
  },
  {
    "text": "a big deal because our processors are not getting faster we're just getting a",
    "start": "531440",
    "end": "536720"
  },
  {
    "text": "lot more of them how long before your phone has eight cores in it your phone",
    "start": "536720",
    "end": "542780"
  },
  {
    "text": "eight cores think about that for a second you can't even program the phone",
    "start": "542780",
    "end": "549080"
  },
  {
    "text": "embedded devices in a singly threaded manner anymore",
    "start": "549080",
    "end": "554530"
  },
  {
    "text": "so this is part of the reason why this functional stuff is getting really",
    "start": "554530",
    "end": "559610"
  },
  {
    "text": "really interesting and exciting and some basic functional concepts we see",
    "start": "559610",
    "end": "565670"
  },
  {
    "text": "functions as first-class values that's one of the key things that makes a language functional can I pass a",
    "start": "565670",
    "end": "571400"
  },
  {
    "text": "function around as if it were just any other datum in the system right do I",
    "start": "571400",
    "end": "577910"
  },
  {
    "text": "have function literals because remember int x equals 1 well X is now a value but 1 is the literal",
    "start": "577910",
    "end": "585620"
  },
  {
    "text": "representation of that value of that integer type why can't I have function",
    "start": "585620",
    "end": "591320"
  },
  {
    "text": "literals in Java we've been able to pass around functions as first-class values but in a very very cumbersome manner",
    "start": "591320",
    "end": "597620"
  },
  {
    "text": "we've always referred to them as anonymous inner class instances every",
    "start": "597620",
    "end": "603230"
  },
  {
    "text": "time you created an anonymous runnable you were creating a function literal but you were doing so and quite possibly be",
    "start": "603230",
    "end": "609950"
  },
  {
    "text": "most obtuse syntax ever invented Java 8 will fix that we are getting lambdas yay",
    "start": "609950",
    "end": "617150"
  },
  {
    "text": "thank you God and Brian gets not a lot of difference between those two actually",
    "start": "617150",
    "end": "623030"
  },
  {
    "text": "and this will help change a lot of how",
    "start": "623030",
    "end": "628640"
  },
  {
    "text": "we program now there's a bunch of other things that we see too strongly-typed type inference right functional",
    "start": "628640",
    "end": "634280"
  },
  {
    "text": "languages like to have very rich very powerful type systems if you are not up",
    "start": "634280",
    "end": "639440"
  },
  {
    "text": "on your type system theory you're probably going to run into some really really confusing error messages and",
    "start": "639440",
    "end": "645590"
  },
  {
    "text": "that's probably one of the weak areas of the functional world is the fact that they assume that everybody knows what a cattle morph is amiss they can describe",
    "start": "645590",
    "end": "652190"
  },
  {
    "text": "category theory and we all dream in monads I do none of the three okay and that's",
    "start": "652190",
    "end": "658560"
  },
  {
    "text": "one of the areas where the functional community has to kind of step out of its academic background and meet the rest of",
    "start": "658560",
    "end": "664050"
  },
  {
    "text": "us halfway immutable values strong emphasis on recursion everything is an",
    "start": "664050",
    "end": "669450"
  },
  {
    "text": "expression not a statement so in a functional language again based on its mathematical background everything",
    "start": "669450",
    "end": "675000"
  },
  {
    "text": "yields a value so for example in Scala if-else yields a value so you can you",
    "start": "675000",
    "end": "680610"
  },
  {
    "text": "can say return if true five else seven because that yields a value ideally",
    "start": "680610",
    "end": "687270"
  },
  {
    "text": "yields five or yield seven okay it's that's a subtle shift in thinking but it",
    "start": "687270",
    "end": "692910"
  },
  {
    "text": "is an important one tuples lists we see lots of lists vastly preference lists",
    "start": "692910",
    "end": "698070"
  },
  {
    "text": "over arrays for reasons we'll get into later pattern matching it's basically a switch on steroids currying partial",
    "start": "698070",
    "end": "705600"
  },
  {
    "text": "application of functions this is doable because if I have a function and we treat it as basically a function we",
    "start": "705600",
    "end": "711660"
  },
  {
    "text": "treat it as a first class citizen suppose I have a function that expects three parameters and I give it one",
    "start": "711660",
    "end": "717630"
  },
  {
    "text": "what's the result of that the result of that is obviously a function expecting two more parameters",
    "start": "717630",
    "end": "723899"
  },
  {
    "text": "in Java it just wouldn't compile but in a functional language we say okay you've",
    "start": "723899",
    "end": "729089"
  },
  {
    "text": "put one parameter there well now go ahead now the result of that can't remember everything yields an expression",
    "start": "729089",
    "end": "735089"
  },
  {
    "text": "yields a value the result of applying one parameter to that function is a function that's expecting two more",
    "start": "735089",
    "end": "741510"
  },
  {
    "text": "parameters and you can call that just as if it were a standalone first class entity that takes a little while to wrap",
    "start": "741510",
    "end": "748079"
  },
  {
    "text": "your head around trust me it's taken a while and my head is probably thicker than yours but still",
    "start": "748079",
    "end": "755089"
  },
  {
    "text": "so again first class values right if I need to be able to for example iterate",
    "start": "755089",
    "end": "761640"
  },
  {
    "text": "through a collection historically we've always said get an iterator and use that to get each element out of the collection that's just dumb why should I",
    "start": "761640",
    "end": "769320"
  },
  {
    "text": "have to worry about having to get that iterator what I just passed the function into the collection and let it figure",
    "start": "769320",
    "end": "775110"
  },
  {
    "text": "out when in how to call my function that I want to do on each one of these collection elements this is called",
    "start": "775110",
    "end": "782579"
  },
  {
    "text": "inversion of control you may have heard of it right seriously it's the don't",
    "start": "782579",
    "end": "788130"
  },
  {
    "text": "count you know don't call me I'll call you principle it's exactly the same idea this is part of the reason why Fowler",
    "start": "788130",
    "end": "793920"
  },
  {
    "text": "really wanted to move away from the term inversion of control and more into",
    "start": "793920",
    "end": "799440"
  },
  {
    "text": "dependency injection for talking about you know database connections and so forth being handed in to you inversion",
    "start": "799440",
    "end": "805079"
  },
  {
    "text": "of control is a generic principle it can be applied in a lot of different ways so instead of you saying I want to grab",
    "start": "805079",
    "end": "812519"
  },
  {
    "text": "every element out of this list the collection could do that for you because the collection has better knowledge of how the collection is stored internally",
    "start": "812519",
    "end": "818850"
  },
  {
    "text": "and let's think about this for a second you want to walk across an ArrayList you want to walk across a list a linked list",
    "start": "818850",
    "end": "825300"
  },
  {
    "text": "you want to walk across some list that somehow a mishmash of both in each case",
    "start": "825300",
    "end": "830640"
  },
  {
    "text": "you're going to grab an iterator and you're not going to be able to take advantage of again some concurrency",
    "start": "830640",
    "end": "836910"
  },
  {
    "text": "opportunities you're just walking across the list and printing out every item in the list do all of those have to be done",
    "start": "836910",
    "end": "842339"
  },
  {
    "text": "sequentially is there any reason why the collection couldn't say you know what I've actually stored this collection in four distinct",
    "start": "842339",
    "end": "850149"
  },
  {
    "text": "chunks so I'm gonna spin off four threads and have your function evaluate each element across those chunks in",
    "start": "850149",
    "end": "856269"
  },
  {
    "text": "parallel and by the way what is your code have to do to opportunity to take advantage of this nada",
    "start": "856269",
    "end": "862329"
  },
  {
    "text": "just hand in the function let it worry about all the details once we see this",
    "start": "862329",
    "end": "867519"
  },
  {
    "text": "idea functions the first-class value is starting to permeate through the rest of the environment we're gonna see a lot of really interesting things emerge and",
    "start": "867519",
    "end": "874300"
  },
  {
    "text": "that is one of the things that Java eight is supposed to bring to us is the idea of promoting this function as",
    "start": "874300",
    "end": "882160"
  },
  {
    "text": "first-class value because now that we have land us we can start to thread that into the rest of the library and there's",
    "start": "882160",
    "end": "888639"
  },
  {
    "text": "some other interesting features that are coming as a part of eight that will help make that easier to do without creating chaos strongly-typed type inference they",
    "start": "888639",
    "end": "896319"
  },
  {
    "text": "member I mentioned this immutable values recursion mention this expressions not",
    "start": "896319",
    "end": "901449"
  },
  {
    "text": "statements mention this tuples a tuple think about a couple is basically an",
    "start": "901449",
    "end": "907809"
  },
  {
    "text": "object without field names no methods just data and if you look at what we do",
    "start": "907809",
    "end": "914410"
  },
  {
    "text": "in Java for example if you look at data transfer objects right and everybody talks about how you write a DTO and it's",
    "start": "914410",
    "end": "920800"
  },
  {
    "text": "got some fields and there are some people will even argue that you shouldn't even have getters and setters because you're not really trying to",
    "start": "920800",
    "end": "926110"
  },
  {
    "text": "encapsulate anything DTO is a tough old guys or tuple depending on how you want to pronounce it it's a temple a result",
    "start": "926110",
    "end": "933279"
  },
  {
    "text": "set is a topple it's basically a collection of data a bundle of data that",
    "start": "933279",
    "end": "938559"
  },
  {
    "text": "is essentially just ordered right so if you say I want a couple of string string int then okay here's a couple of string",
    "start": "938559",
    "end": "945579"
  },
  {
    "text": "string int and what that string that string in that int mean is entirely up to you there's no field names there",
    "start": "945579",
    "end": "953069"
  },
  {
    "text": "there are a lot of places in Java where we could in fact use tuples quite",
    "start": "953069",
    "end": "958089"
  },
  {
    "text": "elegantly quite quite strongly quite well um lots of people are really you",
    "start": "958089",
    "end": "964629"
  },
  {
    "text": "know lots of object purists don't like tuples because a it's public data oh my",
    "start": "964629",
    "end": "970059"
  },
  {
    "text": "god a field in the public space didn't God have a commandment about that or",
    "start": "970059",
    "end": "975429"
  },
  {
    "text": "something at the end of the day if you're not we need to be more clear about what we're trying to encapsulate what we're not trying to encapsulate the",
    "start": "975429",
    "end": "982060"
  },
  {
    "text": "DTO has no encapsulation whatsoever doesn't if you change the representation of the eto doesn't matter where the",
    "start": "982060",
    "end": "988240"
  },
  {
    "text": "fields of public private everybody in the world who touches that DTO has to recompile that's not encapsulation that's just",
    "start": "988240",
    "end": "995709"
  },
  {
    "text": "annoying there are places where tuples are extremely useful lists are highly used",
    "start": "995709",
    "end": "1004000"
  },
  {
    "text": "strongly used inside of a functional language because lists can peel head and tail off very very easily you'll see why",
    "start": "1004000",
    "end": "1010810"
  },
  {
    "text": "this becomes useful in a second pattern matching pattern matching imagine switch",
    "start": "1010810",
    "end": "1016209"
  },
  {
    "text": "case but where we can also extract values out and store them into local values variables while we're working at",
    "start": "1016209",
    "end": "1022629"
  },
  {
    "text": "it imagine being able to switch on things like the type of along with things like hey by the way switch when",
    "start": "1022629",
    "end": "1028449"
  },
  {
    "text": "this particular value in the tupple is equal to this string switch when it's on this particular stream if you go look",
    "start": "1028449",
    "end": "1035020"
  },
  {
    "text": "hard at pattern matching in scala when you come back to java you will feel like a kid whose Christmas has been taken",
    "start": "1035020",
    "end": "1041829"
  },
  {
    "text": "away from you ok pattern matching in many respects is the",
    "start": "1041829",
    "end": "1047558"
  },
  {
    "text": "gateway drug to getting you to want to use a functional language because there are so if you told me that I could have",
    "start": "1047559",
    "end": "1054159"
  },
  {
    "text": "a programming language with only one kind of flow control construct in it I would take pattern matching and I",
    "start": "1054159",
    "end": "1059710"
  },
  {
    "text": "wouldn't miss the rest ok it's extremely extremely powerful it's switch case on",
    "start": "1059710",
    "end": "1067419"
  },
  {
    "text": "steroids except these steroids won't like you know kill you partial applications I mentioned that",
    "start": "1067419",
    "end": "1073630"
  },
  {
    "text": "providing some of the parameters but not all of them to reveal a new function expecting the remainder of the functions",
    "start": "1073630",
    "end": "1079450"
  },
  {
    "text": "and currying well it turns out that once you understand partial application currying is a form of partial",
    "start": "1079450",
    "end": "1085630"
  },
  {
    "text": "application that says you know what I can take a function expecting a couple of parameters and provide one and then",
    "start": "1085630",
    "end": "1091330"
  },
  {
    "text": "use that as the input to another one which is the input to another one which is the input to another one to create a",
    "start": "1091330",
    "end": "1096520"
  },
  {
    "text": "pipeline that's officially known as currying anin laziness again this is",
    "start": "1096520",
    "end": "1104020"
  },
  {
    "text": "part of that mathematical representation that says look I don't need that half of",
    "start": "1104020",
    "end": "1109630"
  },
  {
    "text": "the equation so therefore I'm not even going to bother calculating in some respects we see some some of this style",
    "start": "1109630",
    "end": "1114970"
  },
  {
    "text": "of laziness when we look at boolean short-circuit evaluation right if false",
    "start": "1114970",
    "end": "1120429"
  },
  {
    "text": "and doesn't matter what the rest of it is because the false will render the whole thing irrelevant so we don't even",
    "start": "1120429",
    "end": "1126549"
  },
  {
    "text": "evaluate the rest of the expression but we can do that in a functional language by simply saying look I'm not going to",
    "start": "1126549",
    "end": "1131830"
  },
  {
    "text": "call anything until I absolutely have to I can pass that thing around as many times as I want but it's not until it's",
    "start": "1131830",
    "end": "1137230"
  },
  {
    "text": "actually necessary that I will go evaluate it and again this provides some opportunities for concurrency and so",
    "start": "1137230",
    "end": "1143440"
  },
  {
    "text": "forth one of the other things that we see show up in a lot of functional languages although this is not",
    "start": "1143440",
    "end": "1149159"
  },
  {
    "text": "specifically a functional concept is this notion of a sequence so we have",
    "start": "1149159",
    "end": "1154480"
  },
  {
    "text": "these lists in Java alright so I have a list of a thousand elements and what",
    "start": "1154480",
    "end": "1160510"
  },
  {
    "text": "that means is I have a list of a thousand elements in a functional language for example Haskell has this",
    "start": "1160510",
    "end": "1167140"
  },
  {
    "text": "notion of an infinite list and this really blows people away if you",
    "start": "1167140",
    "end": "1172730"
  },
  {
    "text": "come from a C++ Java c-sharp background because you're like how can you store an infinite list how can I have a list of 1",
    "start": "1172730",
    "end": "1179809"
  },
  {
    "text": "to infinity of all the integers ever how would I represent that in memory if I have a finite amount of memory the way",
    "start": "1179809",
    "end": "1186559"
  },
  {
    "text": "this works is functional languages actually don't store the entire thing they just know how to manufacture the",
    "start": "1186559",
    "end": "1192110"
  },
  {
    "text": "next element in the list this is sometimes known as a sequence or a stream and we can look at a lot of",
    "start": "1192110",
    "end": "1198350"
  },
  {
    "text": "things as a stream or a sequence and doing so opens up some really",
    "start": "1198350",
    "end": "1203390"
  },
  {
    "text": "interesting possibilities particularly when working with iterators and so forth being able to pass something in so this",
    "start": "1203390",
    "end": "1209750"
  },
  {
    "text": "for example is where the groovy guys get all excited because they say look just hand a function into the file class and",
    "start": "1209750",
    "end": "1217190"
  },
  {
    "text": "we will go ahead and call that function on every line in that file up until that",
    "start": "1217190",
    "end": "1223490"
  },
  {
    "text": "file ends even if that file never ends we'll just wait for the next line to be there and then when that line is there",
    "start": "1223490",
    "end": "1229640"
  },
  {
    "text": "we'll hand it to your function and you can keep going this tweaks you in weird",
    "start": "1229640",
    "end": "1236030"
  },
  {
    "text": "ways because now all of a sudden you don't you don't think of the entire list having to be in memory anymore I don't",
    "start": "1236030",
    "end": "1242539"
  },
  {
    "text": "have to read in traditional Java I had to read the entire file into memory put that into a collection and then iterate",
    "start": "1242539",
    "end": "1249260"
  },
  {
    "text": "through the collection if I wanted to make use of any of the collection style interfaces but you don't as long as the",
    "start": "1249260",
    "end": "1256070"
  },
  {
    "text": "collection the sequence knows how to get the next thing you only have to have one",
    "start": "1256070",
    "end": "1262159"
  },
  {
    "text": "of those things stored in memory at any given moment in time and you just process each and an on demand basis",
    "start": "1262159",
    "end": "1269130"
  },
  {
    "text": "and you go whoo hmm lots of places where we can look at things as a sequence okay",
    "start": "1269130",
    "end": "1277760"
  },
  {
    "text": "patterns there are a number of reasons why patterns came to be all right now",
    "start": "1277760",
    "end": "1283080"
  },
  {
    "text": "how many of you've read the Gang of Four book come on the Gang of Four book design",
    "start": "1283080",
    "end": "1288860"
  },
  {
    "text": "patterns right it's been so long ago you forgot this was required reading for anybody in the Java space like you know",
    "start": "1288860",
    "end": "1295460"
  },
  {
    "text": "15 years ago if you walked into a job and you said what's the gang of four you walk right back out of that job you were",
    "start": "1295460",
    "end": "1301190"
  },
  {
    "text": "done right and so one of the things that I found difficult frustrating about",
    "start": "1301190",
    "end": "1307759"
  },
  {
    "text": "people in the functional community is they kind of poopoo the whole idea of patterns and so forth like that pattern yeah who needs those let's talk about",
    "start": "1307759",
    "end": "1314659"
  },
  {
    "text": "katha morphisms okay stop anytime you're learning something new it",
    "start": "1314659",
    "end": "1319700"
  },
  {
    "text": "helps to take what you know and see how it translates into the new world right",
    "start": "1319700",
    "end": "1325250"
  },
  {
    "text": "even if it's not necessarily a direct correlation it still helps to be able to start from something you know because it",
    "start": "1325250",
    "end": "1330830"
  },
  {
    "text": "gives you some place to sort of anchor gives you some concrete nuts so for",
    "start": "1330830",
    "end": "1336679"
  },
  {
    "text": "those of you who've forgotten who the Gang of Four were alright this is the gang of four Gama helm Johnson",
    "start": "1336679",
    "end": "1344480"
  },
  {
    "text": "Felicity's wrote a book back in like 1994 which probably was before some",
    "start": "1344480",
    "end": "1350419"
  },
  {
    "text": "programmers were born at the rate things are going and they broke their notion of",
    "start": "1350419",
    "end": "1355820"
  },
  {
    "text": "patterns these elements of reusable object-oriented concepts they broke them up into three distinct categories",
    "start": "1355820",
    "end": "1361700"
  },
  {
    "text": "creational structural and behavioral and said look this is kind of how you know",
    "start": "1361700",
    "end": "1367009"
  },
  {
    "text": "we see these ideas occurring over and over and over again in software in object-oriented software",
    "start": "1367009",
    "end": "1374179"
  },
  {
    "text": "and it was the genesis of the patterns movement there was actually a book called the gang of five which predated",
    "start": "1374179",
    "end": "1380000"
  },
  {
    "text": "them by about six months but for whatever reason this one really tapped into the angst that a lot of Java",
    "start": "1380000",
    "end": "1387379"
  },
  {
    "text": "I will not job it about for C++ developers at the time it tapped into the angst that they were feeling like I",
    "start": "1387379",
    "end": "1392600"
  },
  {
    "text": "don't understand this object thing I don't get it I don't understand how I'm supposed to use these things",
    "start": "1392600",
    "end": "1398330"
  },
  {
    "text": "what's an object now the interesting thing about this is if you look up there nowhere do we see anything about domain",
    "start": "1398330",
    "end": "1404750"
  },
  {
    "text": "classes the whole domain driven design is completely absent from this the early",
    "start": "1404750",
    "end": "1409970"
  },
  {
    "text": "days about objects were about building infrastructure and support code and completely antithetical to the way Alan",
    "start": "1409970",
    "end": "1416059"
  },
  {
    "text": "Kay imagined objects to be but be that as extremely influential in",
    "start": "1416059",
    "end": "1421760"
  },
  {
    "text": "terms of how people looked at object orientation so one of the most popular",
    "start": "1421760",
    "end": "1428240"
  },
  {
    "text": "patterns from the Gang of Four is of course the singleton insurer class has only one instance and a pride a global",
    "start": "1428240",
    "end": "1434690"
  },
  {
    "text": "point of access to it I think every Java C++ c-sharp developer has written a",
    "start": "1434690",
    "end": "1441380"
  },
  {
    "text": "singleton at one point in their life all right now interesting and ironically",
    "start": "1441380",
    "end": "1448220"
  },
  {
    "text": "we've been doing Singleton's for a lot longer than the Gang of Four it's just that before then we called them Global's",
    "start": "1448220",
    "end": "1454190"
  },
  {
    "text": "and they were bad now that they're Singleton's they're good right kind of",
    "start": "1454190",
    "end": "1459410"
  },
  {
    "text": "like how you know before it was you know police brutality and Big Brother and now",
    "start": "1459410",
    "end": "1464450"
  },
  {
    "text": "it's the Patriot Act right come on guys",
    "start": "1464450",
    "end": "1470380"
  },
  {
    "text": "no it's after lunch but this is my a material here come on all right in Scala",
    "start": "1470380",
    "end": "1476900"
  },
  {
    "text": "we can do a singleton just by using the object keyword the end I mean literally",
    "start": "1476900",
    "end": "1481940"
  },
  {
    "text": "you say object foo you have a signal to the end we're done this is interesting",
    "start": "1481940",
    "end": "1486950"
  },
  {
    "text": "because a lot of times what happens is yesterday's concepts that require a",
    "start": "1486950",
    "end": "1494870"
  },
  {
    "text": "bunch of code to support become today's first-class citizens we could do objects",
    "start": "1494870",
    "end": "1502220"
  },
  {
    "text": "in C it was not hard as a matter of fact if you did 16-bit windows C programming",
    "start": "1502220",
    "end": "1508640"
  },
  {
    "text": "you were programming in object-oriented style you were sending messages you were",
    "start": "1508640",
    "end": "1514070"
  },
  {
    "text": "doing objects the way small talk does objects you were sending messages you were receiving these messages discarding",
    "start": "1514070",
    "end": "1519530"
  },
  {
    "text": "the ones you don't want you had this thing where data was stored it was called the H win the window handle you",
    "start": "1519530",
    "end": "1525740"
  },
  {
    "text": "were doing object-oriented programming it just took you 20 pages of code to do it and C++ came along and said you know",
    "start": "1525740",
    "end": "1533090"
  },
  {
    "text": "we could make a lot of that code go away and we all went hallelujah praise objects all right",
    "start": "1533090",
    "end": "1538160"
  },
  {
    "text": "well some of these other concepts came along as objects slowly began to mature",
    "start": "1538160",
    "end": "1543650"
  },
  {
    "text": "and slowly we began to find where the limitations were and we said you know it'll be really cool if we can have an object that was all by itself out there",
    "start": "1543650",
    "end": "1549890"
  },
  {
    "text": "we call it a singleton and that turns out to be kind of so so Scala said great first class",
    "start": "1549890",
    "end": "1554970"
  },
  {
    "text": "constructing the language object foo you're done now define whatever methods",
    "start": "1554970",
    "end": "1560130"
  },
  {
    "text": "you want on it by the way when you have Singleton's do you still need statics",
    "start": "1560130",
    "end": "1566720"
  },
  {
    "text": "this is one of the interesting debates that rage within the Java space right if I want to have only one of something",
    "start": "1566720",
    "end": "1572190"
  },
  {
    "text": "should it be a static field of a class or should it be a singleton instance Scala makes that very easy it says",
    "start": "1572190",
    "end": "1577950"
  },
  {
    "text": "there's no such thing as static there are classes of which we have instances and then there are objects of which",
    "start": "1577950",
    "end": "1583590"
  },
  {
    "text": "there is exactly one the end and there are instance methods on the signal 10",
    "start": "1583590",
    "end": "1588929"
  },
  {
    "text": "and there are instance methods on the instances the end no more debate no more discussion silly it's stupid this is how",
    "start": "1588929",
    "end": "1597000"
  },
  {
    "text": "language is advanced this is how we move to the next step a lot of these patterns",
    "start": "1597000",
    "end": "1602010"
  },
  {
    "text": "are going to disappear because the languages say we want to make that a first class concept so here we see a",
    "start": "1602010",
    "end": "1609510"
  },
  {
    "text": "singleton that was exciting huh moving on command encapsulate a request",
    "start": "1609510",
    "end": "1618960"
  },
  {
    "text": "as an object thereby letting you parameterize clients with different requests queue or log requests and",
    "start": "1618960",
    "end": "1624809"
  },
  {
    "text": "support undoable operations alright the example that they used in",
    "start": "1624809",
    "end": "1631500"
  },
  {
    "text": "the Gang of Four book for command was menu actions right you know if you're writing a text editor and you want to be",
    "start": "1631500",
    "end": "1637260"
  },
  {
    "text": "able to undo everything you just did but what they said is each menu action each keystroke each anything you do inside",
    "start": "1637260",
    "end": "1644160"
  },
  {
    "text": "the editor should be a command object and then the command object should be",
    "start": "1644160",
    "end": "1649350"
  },
  {
    "text": "stored in a queue and that way you can know exactly what you were supposed to do the command objects get handed you",
    "start": "1649350",
    "end": "1654420"
  },
  {
    "text": "know when you click on the button that command object gets fired and the editor controller whatever you want to call it",
    "start": "1654420",
    "end": "1660900"
  },
  {
    "text": "execute the command to see what happens a new character goes there but we can",
    "start": "1660900",
    "end": "1665910"
  },
  {
    "text": "also keep these command objects in a list in order so that as the user says",
    "start": "1665910",
    "end": "1671580"
  },
  {
    "text": "undo the command object knows how to undo what it did which is a very useful construct we actually see this",
    "start": "1671580",
    "end": "1678890"
  },
  {
    "text": "resurfacing today by the way in larger systems what's known as event sourcing",
    "start": "1678890",
    "end": "1684230"
  },
  {
    "text": "so the idea now is okay I have a state of the universe I have my database and instead of user does something on a web",
    "start": "1684230",
    "end": "1692280"
  },
  {
    "text": "page triggers a change to a row here user doing something on a web page triggers an event which says by the way",
    "start": "1692280",
    "end": "1700020"
  },
  {
    "text": "the user changed this table this column to this value and instead of making the change to the database we just store",
    "start": "1700020",
    "end": "1707130"
  },
  {
    "text": "that event somewhere it's very very similar in some respects to how we see",
    "start": "1707130",
    "end": "1713010"
  },
  {
    "text": "source control systems work we start from a known state and then we just have a bunch of deltas and then at a certain",
    "start": "1713010",
    "end": "1719640"
  },
  {
    "text": "point you can snapshot and say okay the Delta is you know will still track all the deltas but this is what the current",
    "start": "1719640",
    "end": "1724890"
  },
  {
    "text": "state of the database looks like and then we'll just start tracking deltas again this is known as event sourcing",
    "start": "1724890",
    "end": "1730200"
  },
  {
    "text": "yes all of this is basically based around the concept of the command pattern here is a small nugget of thing",
    "start": "1730200",
    "end": "1737250"
  },
  {
    "text": "that says this is what you do and you know what we call that in a functional language our function",
    "start": "1737250",
    "end": "1745740"
  },
  {
    "text": "any questions I mean again this is a case where we may put a small amount of",
    "start": "1745740",
    "end": "1752649"
  },
  {
    "text": "doctoring around it because one of the consequences one of the context of command is not just we want to do but we",
    "start": "1752649",
    "end": "1758980"
  },
  {
    "text": "also want to undo okay but with in Scala any object which has a method called",
    "start": "1758980",
    "end": "1764710"
  },
  {
    "text": "apply can be directly invoked so I can take this Cal command right so you see",
    "start": "1764710",
    "end": "1770919"
  },
  {
    "text": "CMD here in the in the corner right this guy here it's a Cal command the name of it is ad",
    "start": "1770919",
    "end": "1777009"
  },
  {
    "text": "and the function again here we see the function literal which says x and y are two parameters of both of type int and",
    "start": "1777009",
    "end": "1784179"
  },
  {
    "text": "the expression here is we add the two right and again because everything is an expression that implicitly is what's",
    "start": "1784179",
    "end": "1790299"
  },
  {
    "text": "returned so now when I come here and I say command parens 2 comma 5 that is",
    "start": "1790299",
    "end": "1796840"
  },
  {
    "text": "Scala syntax for saying invoke the apply method on that object any object can",
    "start": "1796840",
    "end": "1803649"
  },
  {
    "text": "have an apply your person can have an apply so you can walk up and say Ted",
    "start": "1803649",
    "end": "1808720"
  },
  {
    "text": "parens something else whatever that whatever that makes sense to you what do persons do right it's a do kind of",
    "start": "1808720",
    "end": "1815710"
  },
  {
    "text": "operation that's an implicit do so creating a command is just as easy as",
    "start": "1815710",
    "end": "1821259"
  },
  {
    "text": "object with and apply the end now to support the undo we would need to",
    "start": "1821259",
    "end": "1829130"
  },
  {
    "text": "write some other kind of method which would maybe be unapplied which Scala",
    "start": "1829130",
    "end": "1834260"
  },
  {
    "text": "won't recognize but again that's us taking the the the first class construct",
    "start": "1834260",
    "end": "1839630"
  },
  {
    "text": "in the language and filling it out to be the pattern right so command wants to be able to do and undo okay we would still",
    "start": "1839630",
    "end": "1846920"
  },
  {
    "text": "have this command we would have an apply we would have an unapplied and we could string these things together and then roll them back as we need it but again",
    "start": "1846920",
    "end": "1855470"
  },
  {
    "text": "the concept of a thing that knows how to do something we call that a function",
    "start": "1855470",
    "end": "1862600"
  },
  {
    "text": "strategy define a family of algorithms and caps are each one and make them",
    "start": "1862600",
    "end": "1867740"
  },
  {
    "text": "interchangeable strategy let's the algorithm vary independently from the clients that use it I mean it sounds",
    "start": "1867740",
    "end": "1873650"
  },
  {
    "text": "familiar doesn't it right a lot of these patterns tend to be slight variations of",
    "start": "1873650",
    "end": "1879800"
  },
  {
    "text": "each other and you know what we call a strategy in Scala ah function matter of fact in a lot of",
    "start": "1879800",
    "end": "1888660"
  },
  {
    "text": "cases where we look at the Gang of Four once you have functions as first-class values a lot of the patterns just turn",
    "start": "1888660",
    "end": "1895590"
  },
  {
    "text": "into usage of first-class construct the end doesn't mean the pattern is any less",
    "start": "1895590",
    "end": "1901080"
  },
  {
    "text": "useful it just means that we're not going to be able to you know ascribe quite as much mysticism to them as we're",
    "start": "1901080",
    "end": "1908280"
  },
  {
    "text": "used to Oh visitor ha ha ha that's like the hardest pattern in the whole book yeah and it",
    "start": "1908280",
    "end": "1914790"
  },
  {
    "text": "turns out to be really kind of simple in any language which supports double dispatch directly like Lisp composite",
    "start": "1914790",
    "end": "1921960"
  },
  {
    "text": "compose objects in the tree structures to represent part-whole hierarchies composite let's clients treat individual",
    "start": "1921960",
    "end": "1928470"
  },
  {
    "text": "objects and compositions of objects uniformly in other words it's the classic tree all right",
    "start": "1928470",
    "end": "1934260"
  },
  {
    "text": "it's the classic node leaf tree directories and files and so forth right",
    "start": "1934260",
    "end": "1939480"
  },
  {
    "text": "a directory is a file but also contains files which can be directories business",
    "start": "1939480",
    "end": "1944940"
  },
  {
    "text": "directory is a file it's a classic tree in object orientation and in Scala we can do this",
    "start": "1944940",
    "end": "1951480"
  },
  {
    "text": "it's actually pretty straightforward we can see the abstract class that across the top drawing element you can see it",
    "start": "1951480",
    "end": "1957540"
  },
  {
    "text": "defines one method called draw we can see the primitive drawing element notice",
    "start": "1957540",
    "end": "1962880"
  },
  {
    "text": "it has a draw implementation we can see the composite which says by the way I'm just going to take a list of drawing elements and when I draw now notice what",
    "start": "1962880",
    "end": "1971160"
  },
  {
    "text": "I do here again list is a collection the collection knows best how to iterate across it so what I do is I pass in this",
    "start": "1971160",
    "end": "1978720"
  },
  {
    "text": "DES dot for each prends d arrow D draw that is me handing a function literal",
    "start": "1978720",
    "end": "1985530"
  },
  {
    "text": "into the collection saying do this on every element okay and of course what's going to",
    "start": "1985530",
    "end": "1993590"
  },
  {
    "text": "happen if one of those children is another composite well then when it's called when it's draw is called it will",
    "start": "1993590",
    "end": "1998990"
  },
  {
    "text": "in turn call drawn all the subtypes as well get really used to that concept because when Java 8 shifts far as I know",
    "start": "1998990",
    "end": "2007000"
  },
  {
    "text": "if what Brian has told me his intentions are all of the collection classes will have similar kinds of methods so instead",
    "start": "2007000",
    "end": "2014380"
  },
  {
    "text": "of obtaining an iterator from an ArrayList you will say ArrayList dot for each and pass in a lambda",
    "start": "2014380",
    "end": "2021480"
  },
  {
    "text": "and it will be a hell of a lot shorter and a hell of a lot easier because",
    "start": "2021480",
    "end": "2026669"
  },
  {
    "text": "you're saying I don't really care about the rest of it just here do this on everyone we're done okay now Scala brings in a couple of new",
    "start": "2026669",
    "end": "2040710"
  },
  {
    "text": "ideas too wouldn't be interesting if it did Scala was just another variation of Java who gives a crap right let's just",
    "start": "2040710",
    "end": "2046889"
  },
  {
    "text": "all go home or better yet let's go to the bar and have a beer all right Scala brings some new concepts into the",
    "start": "2046889",
    "end": "2052858"
  },
  {
    "text": "game here now one of the things to remember is that the patterns community says it's not a pattern until it shows up independently three times and then",
    "start": "2052859",
    "end": "2059669"
  },
  {
    "text": "technically it has to be workshop data patterns conference now that was what they said ten years ago when pattern",
    "start": "2059669",
    "end": "2065368"
  },
  {
    "text": "workshops were available like in every part of the country I don't know if they still hold of that today but the point is it's not a pattern until it has been",
    "start": "2065369",
    "end": "2072358"
  },
  {
    "text": "independently discovered in three entirely different places I'm not suggesting these or patterns per se I'm",
    "start": "2072359",
    "end": "2078599"
  },
  {
    "text": "suggesting these are ideas that I've seen and they might qualify as patterns they might not I don't know",
    "start": "2078599",
    "end": "2085669"
  },
  {
    "text": "decompositional recursion see one of the things is when you stand up here on stage particularly when it's on a real",
    "start": "2085760",
    "end": "2092608"
  },
  {
    "text": "stage you have to use pretentious sounding language otherwise people won't take you seriously",
    "start": "2092609",
    "end": "2097680"
  },
  {
    "text": "good decomposition or recursion you've got a list of items you want to do",
    "start": "2097680",
    "end": "2102810"
  },
  {
    "text": "something to each one as you do it the list itself however is immutable as are",
    "start": "2102810",
    "end": "2108660"
  },
  {
    "text": "the items inside of it so what you want to do is basically peel off the item at the head of the list do your operation",
    "start": "2108660",
    "end": "2115650"
  },
  {
    "text": "to that gather the result and recurse on the tail of the list the head of the",
    "start": "2115650",
    "end": "2121260"
  },
  {
    "text": "list is the one item the tail of the list is everything after that this is an extraordinarily common pattern in",
    "start": "2121260",
    "end": "2128339"
  },
  {
    "text": "functional languages and part of the reason is because it is completely thread-safe the list is immutable lots",
    "start": "2128339",
    "end": "2135390"
  },
  {
    "text": "of people can be doing things to that list at the same time because it's immutable and the items inside the list",
    "start": "2135390",
    "end": "2141060"
  },
  {
    "text": "are immutable and all of your intermediate state all of the intermediate results as you go they're",
    "start": "2141060",
    "end": "2147030"
  },
  {
    "text": "not stored someplace else they're stored on the thread stack because we are recursing down when we get to the end of",
    "start": "2147030",
    "end": "2153810"
  },
  {
    "text": "the list we'll start peeling at all back together and turning it into a new list and handing that back but it's all",
    "start": "2153810",
    "end": "2159090"
  },
  {
    "text": "scoped to this thread zero concurrency concerns",
    "start": "2159090",
    "end": "2164280"
  },
  {
    "text": "and people in the audience are like all right no thread concerns now most",
    "start": "2164280",
    "end": "2171270"
  },
  {
    "text": "languages have this construct already they call it a fold fold left or fold right whether you want to start from the",
    "start": "2171270",
    "end": "2177000"
  },
  {
    "text": "head of the list and work to the right they call that a fold left or whether you want to start from the tail of the list and work left",
    "start": "2177000",
    "end": "2182730"
  },
  {
    "text": "they call that a full right don't ask just it's going to be backwards either",
    "start": "2182730",
    "end": "2188040"
  },
  {
    "text": "way you want to look at it some of them call it fold head and full tail which makes more sense someone call it L fold",
    "start": "2188040",
    "end": "2193530"
  },
  {
    "text": "our fold at whatever because the whole idea here is we're taking two elements and we're sometimes we're folding them",
    "start": "2193530",
    "end": "2199470"
  },
  {
    "text": "together to do like we want to add up all the elements in the list we're folding them into a single value in other cases that's known as just a map",
    "start": "2199470",
    "end": "2206550"
  },
  {
    "text": "because I want to map a function on to that individual value and produce a new one but here you can see what I've got a",
    "start": "2206550",
    "end": "2213450"
  },
  {
    "text": "got a list of string here and what I want to do is I want to reduce it in some fashion right and so here I'm using",
    "start": "2213450",
    "end": "2222920"
  },
  {
    "text": "the reduced list this is this is this reduced list function here you'll notice",
    "start": "2222920",
    "end": "2228839"
  },
  {
    "text": "this L matched curly brace that's pattern matching what I'm saying is let's look at L which is the list that's",
    "start": "2228839",
    "end": "2236010"
  },
  {
    "text": "passed in if it's the empty list just return an empty string okay that's the",
    "start": "2236010",
    "end": "2242910"
  },
  {
    "text": "exit case that's when we stop recursing draw this this sort of decompositional",
    "start": "2242910",
    "end": "2248550"
  },
  {
    "text": "recursion always has to have an exit case otherwise it's known as an infinite loop generally not a good thing good but",
    "start": "2248550",
    "end": "2256740"
  },
  {
    "text": "the second case here you see this case it's calling : lists in that expression",
    "start": "2256740",
    "end": "2263010"
  },
  {
    "text": "I am saying it is the head of the list I'm literally peeling these two apart",
    "start": "2263010",
    "end": "2271609"
  },
  {
    "text": "and so if the list is an element of one or more that first head element will get",
    "start": "2271609",
    "end": "2279680"
  },
  {
    "text": "found to the local variable it and the rest of the list will get bound to local",
    "start": "2279680",
    "end": "2284749"
  },
  {
    "text": "variable LST and then what I do is I say well in this case again because everything is an expression",
    "start": "2284749",
    "end": "2290690"
  },
  {
    "text": "pattern-matching is an expression what I'm going to return here is it that head of the list plus recursively do this to",
    "start": "2290690",
    "end": "2298489"
  },
  {
    "text": "the remainder of the list so what this does is it takes a list of",
    "start": "2298489",
    "end": "2303650"
  },
  {
    "text": "strings ABCD as five separate strings and return and smashes them all together",
    "start": "2303650",
    "end": "2310160"
  },
  {
    "text": "to be ABCDE in one string I'm folding them all together into one return bell",
    "start": "2310160",
    "end": "2317090"
  },
  {
    "text": "makes sense you see this pattern a lot and this is part of the reason why we",
    "start": "2317090",
    "end": "2322610"
  },
  {
    "text": "like lists because we like peeling off the head and doing something with the tail and storing it on the stack storing",
    "start": "2322610",
    "end": "2328460"
  },
  {
    "text": "the head on the stack until we get to the end of the list and then pushing all those head parts together back into a",
    "start": "2328460",
    "end": "2334250"
  },
  {
    "text": "single list no by the way it maintains the order as well and good stuff you can",
    "start": "2334250",
    "end": "2340760"
  },
  {
    "text": "see we can also do this with integers as well in this case I pass in the exact operation to do so I've got a list of",
    "start": "2340760",
    "end": "2346850"
  },
  {
    "text": "numbers that I want to add so I say I want to take my list of numbers and call",
    "start": "2346850",
    "end": "2352910"
  },
  {
    "text": "my fold here passing in 0 which is the starting value the operation to do in",
    "start": "2352910",
    "end": "2359870"
  },
  {
    "text": "the list to do it on ok and down below we see using Scala's built-in fold left these two will produce the exact same",
    "start": "2359870",
    "end": "2366500"
  },
  {
    "text": "results so far so good by the way",
    "start": "2366500",
    "end": "2371550"
  },
  {
    "text": "one more interesting thing about this this is also how we can turn a list of objects into a stream of XML",
    "start": "2371550",
    "end": "2379730"
  },
  {
    "text": "because think about what we do when we want to take a collection of objects and turn it into xml we go to each element",
    "start": "2380080",
    "end": "2386180"
  },
  {
    "text": "in that collection let's call it a list and we say start with this seed we'll call that a like a starting value a seed",
    "start": "2386180",
    "end": "2393380"
  },
  {
    "text": "value and do this to produce this result this is exactly the same thing we did",
    "start": "2393380",
    "end": "2398900"
  },
  {
    "text": "with the list of numbers in the previous slide and the operation used to produce each person's xml is just he returned",
    "start": "2398900",
    "end": "2406400"
  },
  {
    "text": "this string right return this person first name person in XML format the fold",
    "start": "2406400",
    "end": "2413360"
  },
  {
    "text": "is not just for doing trivial exercises for adding numbers together it's for",
    "start": "2413360",
    "end": "2419060"
  },
  {
    "text": "anytime you have a collection of anything that you want to reduce down to a single value",
    "start": "2419060",
    "end": "2426130"
  },
  {
    "text": "now stop for just a second and think about this if you had walked in here and",
    "start": "2426170",
    "end": "2432029"
  },
  {
    "text": "I had said I'm going to show you a technique in Scala that will be generic",
    "start": "2432029",
    "end": "2438269"
  },
  {
    "text": "across both adding numbers together and turning complex objects into xml",
    "start": "2438269",
    "end": "2444019"
  },
  {
    "text": "documents you'll use basically the same built-in constructs to do both of these",
    "start": "2444019",
    "end": "2449459"
  },
  {
    "text": "operations how many of you would have believed me and do you know why because the",
    "start": "2449459",
    "end": "2456730"
  },
  {
    "text": "functional way of going at things is completely antithetical to the object-oriented way of going and this is",
    "start": "2456730",
    "end": "2464530"
  },
  {
    "text": "a good thing because it means that when we have both axes covered we have all kinds of opportunities for reuse what",
    "start": "2464530",
    "end": "2472240"
  },
  {
    "text": "you have to do though is you have to stop thinking in object terms and start thinking in functional terms not because",
    "start": "2472240",
    "end": "2479890"
  },
  {
    "text": "I want you to stop thinking an object but because you have to open yourself up to the possibility that there is an",
    "start": "2479890",
    "end": "2484900"
  },
  {
    "text": "entirely different dimension of reuse here than what you're used to once you start",
    "start": "2484900",
    "end": "2491960"
  },
  {
    "text": "thinking in both directions now all kinds of interesting possibilities begin",
    "start": "2491960",
    "end": "2497599"
  },
  {
    "text": "to emerge and your code will get shorter tighter cleaner easier to understand etc",
    "start": "2497599",
    "end": "2503240"
  },
  {
    "text": "but only if you understand that additional dimension for years the object community has said hey there is",
    "start": "2503240",
    "end": "2510079"
  },
  {
    "text": "no such thing as color there is black and white I'm trying to tell you that not only are there shades of gray but there's this concept of blue red green",
    "start": "2510079",
    "end": "2517250"
  },
  {
    "text": "etc it's gonna take a while to let your eyes adjust once you do though you'll",
    "start": "2517250",
    "end": "2522319"
  },
  {
    "text": "start to see that not everything has to be these cross-hatched patterns of black and white now we can start throwing",
    "start": "2522319",
    "end": "2527720"
  },
  {
    "text": "colors into the graphs it just it's going to take some time to get that depth into your way of thinking about",
    "start": "2527720",
    "end": "2534020"
  },
  {
    "text": "how we do software the iterator inversion of control we talked about",
    "start": "2534020",
    "end": "2539510"
  },
  {
    "text": "this a little bit but one of the things one of the dark secrets that the guys in",
    "start": "2539510",
    "end": "2546109"
  },
  {
    "text": "Java the guys at Sun who now work at Oracle one of the deep dark hidden secrets that they don't want to tell you",
    "start": "2546109",
    "end": "2551930"
  },
  {
    "text": "is that every time you create an iterator God kills a kitten",
    "start": "2551930",
    "end": "2559450"
  },
  {
    "text": "I'm not joking I'm not joking it's a dark ugly secret bound up in ritual and",
    "start": "2559660",
    "end": "2567170"
  },
  {
    "text": "you know that the Sun buildings right they burned them down because they don't want you to see the pits in which they",
    "start": "2567170",
    "end": "2572390"
  },
  {
    "text": "conducted these rituals and bound the source-code together now you guys like",
    "start": "2572390",
    "end": "2578569"
  },
  {
    "text": "kittens right does anybody here who does not like kittens",
    "start": "2578569",
    "end": "2584170"
  },
  {
    "text": "I should have known the guy from Oklahoma City doesn't like it okay in your case God kills a puppy Oh God in",
    "start": "2584170",
    "end": "2591640"
  },
  {
    "text": "that case it's two kittens or two puppies that died right the point is I",
    "start": "2591640",
    "end": "2597040"
  },
  {
    "text": "want you to stop reaching for iterator every time you want to go through something because there's a lot of",
    "start": "2597040",
    "end": "2603520"
  },
  {
    "text": "benefits to be had by letting the collection worry itself about how to do",
    "start": "2603520",
    "end": "2608650"
  },
  {
    "text": "the thing you want to do instead of reaching for an iterator to walk across the collection create what you want to",
    "start": "2608650",
    "end": "2614559"
  },
  {
    "text": "do as a function as a block of code and hand that into the iterator for two",
    "start": "2614559",
    "end": "2619630"
  },
  {
    "text": "reasons number one because when you write it will actually be much much shorter and you won't have to worry",
    "start": "2619630",
    "end": "2624730"
  },
  {
    "text": "about a lot of weird edge cases but also number two your code is intrinsically more reusable because what's the",
    "start": "2624730",
    "end": "2631630"
  },
  {
    "text": "drawback to a for loop you can't reuse a for loop",
    "start": "2631630",
    "end": "2638190"
  },
  {
    "text": "attempts to do so will lead you to this pattern plus we get the idea of doing",
    "start": "2639310",
    "end": "2648170"
  },
  {
    "text": "this stream like behavior as well how many of you have seen the groovy demonstration where they pile you into a",
    "start": "2648170",
    "end": "2654050"
  },
  {
    "text": "room and they say groovy is better than Java and you go down oh no no it's not they say yes look because if you just",
    "start": "2654050",
    "end": "2659240"
  },
  {
    "text": "want to read a text file look at all that crappy code you have to write in Java and in groovy it's like two lines",
    "start": "2659240",
    "end": "2664970"
  },
  {
    "text": "and the idea is you're supposed to go you're right groovy is better than Java",
    "start": "2664970",
    "end": "2670340"
  },
  {
    "text": "I'm so ashamed stop the only reason why they can do",
    "start": "2670340",
    "end": "2675350"
  },
  {
    "text": "that is because they took all that crap code and they baked it into their library you can do that and you could do",
    "start": "2675350",
    "end": "2682700"
  },
  {
    "text": "this exact example in Java by the way it is very easy to create a file line",
    "start": "2682700",
    "end": "2687980"
  },
  {
    "text": "iterator now I'm doing this in Scala but basically this code here write this file",
    "start": "2687980",
    "end": "2694580"
  },
  {
    "text": "reader bufferedreader etc etc this file class that has this elements Bulova this",
    "start": "2694580",
    "end": "2700460"
  },
  {
    "text": "is actually just collections 101 it's",
    "start": "2700460",
    "end": "2705980"
  },
  {
    "text": "collections 101 and file i/o 101 but notice what's on what I'm doing here I'm not reading the entire line or the",
    "start": "2705980",
    "end": "2712850"
  },
  {
    "text": "entire file in the memory and storing them as lines in a collection because then if this is a two gigabyte text file",
    "start": "2712850",
    "end": "2718040"
  },
  {
    "text": "I blow out the JVMs heap instead what I say is the iterator knows every time you",
    "start": "2718040",
    "end": "2724550"
  },
  {
    "text": "call next the iterator knows how to go fetch the next line",
    "start": "2724550",
    "end": "2730720"
  },
  {
    "text": "it's all it has to do is know how to manufacture the next element in the list so that now down here I can say hey I",
    "start": "2730960",
    "end": "2738160"
  },
  {
    "text": "want to create one of these and then because in this case it extends the iterable interface right by the way that",
    "start": "2738160",
    "end": "2746410"
  },
  {
    "text": "interface exists both in Java and in Scala and Scala has some additional methods to it that are not present in",
    "start": "2746410",
    "end": "2752079"
  },
  {
    "text": "Java but they'll probably be there as a part of Java 8 when now because it's an",
    "start": "2752079",
    "end": "2758500"
  },
  {
    "text": "iterable because it satisfies the idea of being able to create an iterate or I can say for each for each line do this",
    "start": "2758500",
    "end": "2768150"
  },
  {
    "text": "and again you can do this in Java you",
    "start": "2768150",
    "end": "2774430"
  },
  {
    "text": "just have to put it into a jar file and use that as part of your standard library there's nothing Scala asked",
    "start": "2774430",
    "end": "2780160"
  },
  {
    "text": "about this this is everything about thinking functional and then the next",
    "start": "2780160",
    "end": "2785290"
  },
  {
    "text": "time one of those groovy guys comes by and subscrube e is so much better than travel you can say you groovy get out you just have an interest a more",
    "start": "2785290",
    "end": "2792520"
  },
  {
    "text": "interesting library this is not baked into your particular language and I'm",
    "start": "2792520",
    "end": "2797680"
  },
  {
    "text": "not bitter I'm really not really really not pipelining this is again part of",
    "start": "2797680",
    "end": "2805000"
  },
  {
    "text": "that notion this concept of currying the idea that I have a set of behavior I",
    "start": "2805000",
    "end": "2810339"
  },
  {
    "text": "want but if I've got I've got actually a lot of these behaviors that I want and",
    "start": "2810339",
    "end": "2816130"
  },
  {
    "text": "there there seems to be just so many things that are common across a lot of them right think about like mathematical operations everything we do in math is",
    "start": "2816130",
    "end": "2823450"
  },
  {
    "text": "basically built out of the four five cardinal operations all right add subtract multiply divide technically",
    "start": "2823450",
    "end": "2829329"
  },
  {
    "text": "modulo is in there as well right everything else is kind of built up out of those would be great if we could",
    "start": "2829329",
    "end": "2834910"
  },
  {
    "text": "somehow string them together put them together in kind of a modular way well",
    "start": "2834910",
    "end": "2840130"
  },
  {
    "text": "this is where we get into this notion of partial application of functions currying so here I have three functions",
    "start": "2840130",
    "end": "2848680"
  },
  {
    "text": "convert to int double it and square root it and implicitly they each take one",
    "start": "2848680",
    "end": "2854710"
  },
  {
    "text": "parameter okay and now using the built in Scala and then this is a method that",
    "start": "2854710",
    "end": "2863980"
  },
  {
    "text": "says oh if you give me a function on the right hand side I will take the function on which we do this I'll basically",
    "start": "2863980",
    "end": "2870490"
  },
  {
    "text": "create I'll return another function that says when you call it it goes to a and then to B in other words it's the glue",
    "start": "2870490",
    "end": "2876880"
  },
  {
    "text": "that had that joins these guys together so now the pipeline is convert to int",
    "start": "2876880",
    "end": "2882160"
  },
  {
    "text": "and then double it and then int to double and then square root it",
    "start": "2882160",
    "end": "2888000"
  },
  {
    "text": "now tell me just tell me that if you presented that pipeline definition to",
    "start": "2889260",
    "end": "2896470"
  },
  {
    "text": "somebody who's not a programmer they won't understand it this is where we start getting into the",
    "start": "2896470",
    "end": "2903440"
  },
  {
    "text": "dsls all right the idea of a domain-specific language that I can give to non programmers and let them define",
    "start": "2903440",
    "end": "2910130"
  },
  {
    "text": "the behavior and if you think about it this is all of what that business process modeling crap was about this is",
    "start": "2910130",
    "end": "2916910"
  },
  {
    "text": "what BizTalk was supposed to do is what oracle beep hell was supposed to do just basically define these workflows define",
    "start": "2916910",
    "end": "2924470"
  },
  {
    "text": "these lists of things so that non programmers could maintain them so what we do is we build the small primitives",
    "start": "2924470",
    "end": "2930830"
  },
  {
    "text": "and then they join the primitives together in interesting ways to create business behavior that programmers don't",
    "start": "2930830",
    "end": "2937880"
  },
  {
    "text": "have to maintain winning expend a metal",
    "start": "2937880",
    "end": "2946970"
  },
  {
    "text": "object occasionally we want objects that are actually manipulated to find",
    "start": "2946970",
    "end": "2953870"
  },
  {
    "text": "manoeuvered etc had runs on all right we don't want to know all of the properties we don't want to know all the behaviors for all that the functional community",
    "start": "2953870",
    "end": "2960770"
  },
  {
    "text": "loves strict typing there are still a lot of cases where it can be helpful to have objects that change their shape and",
    "start": "2960770",
    "end": "2967340"
  },
  {
    "text": "change their behavior and so forth at runtime the Lisp guys are squarely in",
    "start": "2967340",
    "end": "2973160"
  },
  {
    "text": "that conjunction of forces the Lisp language is a dynamic language that is a",
    "start": "2973160",
    "end": "2979460"
  },
  {
    "text": "functional language okay and believe me if you ever want to see two functional",
    "start": "2979460",
    "end": "2985040"
  },
  {
    "text": "guys fight it out have a Haskell guy and a lisp guy argue as to whether or not",
    "start": "2985040",
    "end": "2990080"
  },
  {
    "text": "Lisp is a real functional language and they'll just beat the crap out of each other that's kind of like asking a group",
    "start": "2990080",
    "end": "2996440"
  },
  {
    "text": "of C C++ Java or C sharp developers where the curly braces should go it's bloody it's ugly and it's really",
    "start": "2996440",
    "end": "3003520"
  },
  {
    "text": "kind of pointless but so be it we can do this because hey let's just use the",
    "start": "3003520",
    "end": "3009730"
  },
  {
    "text": "built in Scala map and notice here Dyne one it is an object",
    "start": "3009730",
    "end": "3017099"
  },
  {
    "text": "tell me how dine one is different from a traditional java class we have fields first name last name and age and we have",
    "start": "3017560",
    "end": "3025070"
  },
  {
    "text": "methods we have this thing called two string which by the way the value is a function which knows how to do something",
    "start": "3025070",
    "end": "3031160"
  },
  {
    "text": "with this in order to produce to produce a string you want to hear something else that's JavaScript",
    "start": "3031160",
    "end": "3038510"
  },
  {
    "text": "that's exactly what javascript does javascript is that the objects in",
    "start": "3038510",
    "end": "3043910"
  },
  {
    "text": "JavaScript are nothing more than a bag of name value pairs where the values can",
    "start": "3043910",
    "end": "3049880"
  },
  {
    "text": "either be data or code the end",
    "start": "3049880",
    "end": "3054490"
  },
  {
    "text": "that's it that's the secret to JavaScript",
    "start": "3056030",
    "end": "3061819"
  },
  {
    "text": "now unfortunately using this is kind of a pain in the ass because scholars type",
    "start": "3062119",
    "end": "3069810"
  },
  {
    "text": "sake and so when I say that this is a map of string to any up there on the first line it means that in order to",
    "start": "3069810",
    "end": "3076109"
  },
  {
    "text": "take two string and see it as the function that takes a map of string to any and produces a string in this",
    "start": "3076109",
    "end": "3082800"
  },
  {
    "text": "particular case I have to do this really ugly downcast there and to be honest",
    "start": "3082800",
    "end": "3090000"
  },
  {
    "text": "most of the time we don't want completely dynamic objects what we want",
    "start": "3090000",
    "end": "3095040"
  },
  {
    "text": "are objects that have a core set of things that must be there so think about persons for just a second right think",
    "start": "3095040",
    "end": "3100890"
  },
  {
    "text": "about people we've always talked about various ways in which we model the world right how many people in here speak",
    "start": "3100890",
    "end": "3107220"
  },
  {
    "text": "French how many people speak German Chinese",
    "start": "3107220",
    "end": "3113840"
  },
  {
    "text": "Russian okay how many people in this room cook how many people in this room",
    "start": "3113840",
    "end": "3122490"
  },
  {
    "text": "play soccer how do we model your skills of all these different things we can get",
    "start": "3122490",
    "end": "3129359"
  },
  {
    "text": "into this well you know we have skills and there's a name of the skill and it's kind of a you know a numeric value or",
    "start": "3129359",
    "end": "3135600"
  },
  {
    "text": "something like that but if we go drilling deep enough into each one of us they're going to be things that each of",
    "start": "3135600",
    "end": "3141119"
  },
  {
    "text": "us know or can do or like to do or have or don't have right",
    "start": "3141119",
    "end": "3147020"
  },
  {
    "text": "ergo thinking about for example the surfer girl who lost an arm to a shark attack is she's still a person even",
    "start": "3147020",
    "end": "3153300"
  },
  {
    "text": "though she has only one arm and two legs is she's still a person if she has no arms and yet there are a lot of things",
    "start": "3153300",
    "end": "3159210"
  },
  {
    "text": "that she can't do she's still a person see object modeling in this really really strict type safe manner breaks",
    "start": "3159210",
    "end": "3166500"
  },
  {
    "text": "down at a certain point every person has a first name in the last name yeah how about Bono",
    "start": "3166500",
    "end": "3173430"
  },
  {
    "text": "how about Sonny and Cher how about the artist formerly known as Prince dude as",
    "start": "3173430",
    "end": "3180780"
  },
  {
    "text": "no name he has an icon is he still a person he's more of a",
    "start": "3180780",
    "end": "3187440"
  },
  {
    "text": "person to Michael Jackson never was right our modeling breaks down in weird",
    "start": "3187440",
    "end": "3193469"
  },
  {
    "text": "edge cases and so in some cases what we want to do is we want to have a solid core person has a first name last name",
    "start": "3193469",
    "end": "3200369"
  },
  {
    "text": "in an age but then maybe they also have a does business as they have different",
    "start": "3200369",
    "end": "3206069"
  },
  {
    "text": "attributes which are not common across all persons historically we've always said those should be sub classes but sub",
    "start": "3206069",
    "end": "3213299"
  },
  {
    "text": "classes are a code time a developer time construct and not all of those are",
    "start": "3213299",
    "end": "3219209"
  },
  {
    "text": "visible at the time that we model this thing so occasionally what we want is something that has a core set of data",
    "start": "3219209",
    "end": "3224910"
  },
  {
    "text": "but then also has some expansive capabilities right so we can start we",
    "start": "3224910",
    "end": "3230609"
  },
  {
    "text": "can still say all right look this Expando is actually something that inherits from hashmap and well we still",
    "start": "3230609",
    "end": "3237029"
  },
  {
    "text": "have the casting problem here or you know what what I'm gonna do is I'm going",
    "start": "3237029",
    "end": "3242880"
  },
  {
    "text": "to say that a person has a first name last name at an age but in fact how the",
    "start": "3242880",
    "end": "3248759"
  },
  {
    "text": "person wants to represent their string representation because I think if we go",
    "start": "3248759",
    "end": "3254249"
  },
  {
    "text": "back far enough Bono does have a first name in the last name so maybe the way we represent his name to the rest of the",
    "start": "3254249",
    "end": "3261719"
  },
  {
    "text": "world is different or the way he self identifies is different so here what I'm gonna do is I'm going to say that there",
    "start": "3261719",
    "end": "3268259"
  },
  {
    "text": "is another value on person called to string imple and it is in fact a",
    "start": "3268259",
    "end": "3274380"
  },
  {
    "text": "function and that function is mutable so we can plug in different representations",
    "start": "3274380",
    "end": "3279869"
  },
  {
    "text": "of how to generate this to string on an instance by instance basis and we do so",
    "start": "3279869",
    "end": "3284969"
  },
  {
    "text": "by changing to string info to something else and the default to string which the",
    "start": "3284969",
    "end": "3290369"
  },
  {
    "text": "rest of the framework is expected just defers to that variable functional behavior",
    "start": "3290369",
    "end": "3297469"
  },
  {
    "text": "in other words we can be static where we need to be and dynamic where we want to",
    "start": "3298890",
    "end": "3305500"
  },
  {
    "text": "be which if you think about it makes more sense than all static or all",
    "start": "3305500",
    "end": "3311410"
  },
  {
    "text": "dynamic the selfless trait so the idea",
    "start": "3311410",
    "end": "3319750"
  },
  {
    "text": "here is we want to be able to create some services that people can just consume but not necessarily having to do",
    "start": "3319750",
    "end": "3328090"
  },
  {
    "text": "so by being really really explicit and and and and verbose about it so for",
    "start": "3328090",
    "end": "3334000"
  },
  {
    "text": "example we have this behavior called greet to be friendly hi and we want this",
    "start": "3334000",
    "end": "3339400"
  },
  {
    "text": "to be something that anybody can do so there's two ways to do this number one we can extend the object friendly which",
    "start": "3339400",
    "end": "3346120"
  },
  {
    "text": "means we implicitly get the trait friendly notice that the object and the trait can have the same name this is",
    "start": "3346120",
    "end": "3351880"
  },
  {
    "text": "frequently done just because that way they we don't consume more than one name and so here example apple on extends",
    "start": "3351880",
    "end": "3358420"
  },
  {
    "text": "friendly but the other thing we can do is because this is an object up here object friendly it means that when we",
    "start": "3358420",
    "end": "3365140"
  },
  {
    "text": "import that object all of its methods can be intrinsically statically imported as well so that now I can say import",
    "start": "3365140",
    "end": "3372850"
  },
  {
    "text": "friendly dot underscore meaning that's kind of like the static import in Java grab all of the methods because again",
    "start": "3372850",
    "end": "3379240"
  },
  {
    "text": "there are no static since Scala so grab all of the instance methods and make them available as top-level symbols",
    "start": "3379240",
    "end": "3384790"
  },
  {
    "text": "so that now by importing friendly I can just say greet",
    "start": "3384790",
    "end": "3391500"
  },
  {
    "text": "there is no intrinsic inheritance relationship between example app 2 and",
    "start": "3392500",
    "end": "3397850"
  },
  {
    "text": "friendly other than the fact that I'm just using the method defined in that tree",
    "start": "3397850",
    "end": "3403900"
  },
  {
    "text": "but people can also import it directly if they choose to if for example there",
    "start": "3403900",
    "end": "3408950"
  },
  {
    "text": "would be some sort of ambiguity conflict because there's another class called grumpy who also has a greet which isn't",
    "start": "3408950",
    "end": "3415940"
  },
  {
    "text": "quite as friendly okay the drawback to the second approach is",
    "start": "3415940",
    "end": "3421910"
  },
  {
    "text": "it's not nearly as clear where greet comes from because remember there may be like 50 lines or 100 lines or 2,000",
    "start": "3421910",
    "end": "3427999"
  },
  {
    "text": "lines between the import and the actual usage so in that case doing the actual extends",
    "start": "3427999",
    "end": "3433789"
  },
  {
    "text": "can be a little bit easier making sense",
    "start": "3433789",
    "end": "3441859"
  },
  {
    "text": "so far okay two challenges in the zero",
    "start": "3441859",
    "end": "3447529"
  },
  {
    "text": "minutes I have left first challenge we want to we want to create a lottery all",
    "start": "3447529",
    "end": "3452809"
  },
  {
    "text": "right you guys don't have a lot of works you can choose numbers one to 49 and then every week or so the random air",
    "start": "3452809",
    "end": "3460519"
  },
  {
    "text": "ball thing pops those numbers up you know 5 6 7 whatever numbers but the key",
    "start": "3460519",
    "end": "3466039"
  },
  {
    "text": "thing is you never draw the same number twice so this isn't just generating five or six or seven random numbers it's",
    "start": "3466039",
    "end": "3472309"
  },
  {
    "text": "generating random numbers within a range such that no duplicates will ever appear that's the critical part of this so",
    "start": "3472309",
    "end": "3478969"
  },
  {
    "text": "write code to do this lotto thing",
    "start": "3478969",
    "end": "3485260"
  },
  {
    "text": "now just because we're short on time I'll show you what the solution looks like in essence what I'm doing here is I'm",
    "start": "3485260",
    "end": "3492790"
  },
  {
    "text": "saying okay I want to be able to randomly select this number of items",
    "start": "3492790",
    "end": "3498030"
  },
  {
    "text": "from this range right from 1 to whatever that number is okay and I call random",
    "start": "3498030",
    "end": "3505720"
  },
  {
    "text": "select notice that random select actually has a nested method inside of it to do the actual work why because we",
    "start": "3505720",
    "end": "3513160"
  },
  {
    "text": "use that structural decomposition to say hey I need six numbers out of this list and what I want to do is I want to",
    "start": "3513160",
    "end": "3519550"
  },
  {
    "text": "generate a random number within that range and pull that number out of the list and then take that remaining list",
    "start": "3519550",
    "end": "3527619"
  },
  {
    "text": "and do the same thing again and again and again and again and again until I have my five six seven numbers whatever",
    "start": "3527619",
    "end": "3534420"
  },
  {
    "text": "so what we can see there is we do random select and then we random select are using that random object that's passed",
    "start": "3534420",
    "end": "3541570"
  },
  {
    "text": "in if the number that I need to get is zero remember we have to have an exit",
    "start": "3541570",
    "end": "3547660"
  },
  {
    "text": "case so that's when we return nil and we don't continue to recurs otherwise we",
    "start": "3547660",
    "end": "3552910"
  },
  {
    "text": "remove the number that was randomly generated from the list and then put",
    "start": "3552910",
    "end": "3559030"
  },
  {
    "text": "that into a list of its own after calling recursively into the same method",
    "start": "3559030",
    "end": "3565630"
  },
  {
    "text": "to generate the next number you're in simple decompositional",
    "start": "3565630",
    "end": "3572650"
  },
  {
    "text": "recursion given an XML document such as this give",
    "start": "3572650",
    "end": "3583140"
  },
  {
    "text": "me the total cost of these items okay now one of the things this is a little",
    "start": "3583140",
    "end": "3590040"
  },
  {
    "text": "bit unfair because one of the things if you're not familiar with Scala that you don't know is that Scala has some built in syntax for being able to consume XML",
    "start": "3590040",
    "end": "3597119"
  },
  {
    "text": "very easily and the best part of this built in syntax is it's not really built-in it's just a scholar library so",
    "start": "3597119",
    "end": "3603030"
  },
  {
    "text": "here when I've got this data equals shopping item item shopping right that's an XML literal what Scala understands",
    "start": "3603030",
    "end": "3609660"
  },
  {
    "text": "but then the rest of this is all just straight library stuff you see here where I do this for loop for item arrow",
    "start": "3609660",
    "end": "3615930"
  },
  {
    "text": "data back slash item the backslash there is essentially a small XPath query and",
    "start": "3615930",
    "end": "3621030"
  },
  {
    "text": "that says give me the items that meet this particular choir of XPath query so",
    "start": "3621030",
    "end": "3627900"
  },
  {
    "text": "it says give me all of the item notes underneath whatever the current node is so the current node is shopping so",
    "start": "3627900",
    "end": "3633930"
  },
  {
    "text": "therefore give me all the item nodes under there then by the way for loops aren't really loops in Scala they're",
    "start": "3633930",
    "end": "3640680"
  },
  {
    "text": "what are called comprehensions and they're more like pipelines and so this",
    "start": "3640680",
    "end": "3645720"
  },
  {
    "text": "for loop takes the resulting items and hands them to the next phrase here which",
    "start": "3645720",
    "end": "3651780"
  },
  {
    "text": "says price is equal to item backslash the attribute priced dot text dot to",
    "start": "3651780",
    "end": "3657450"
  },
  {
    "text": "double good so now I'm converting that price into a double value and then grab the",
    "start": "3657450",
    "end": "3663990"
  },
  {
    "text": "quantity and yield the result price times quantity now how exactly does this work because essentially the",
    "start": "3663990",
    "end": "3670140"
  },
  {
    "text": "comprehension does one of two things it's either a generator producing more items to evaluate the final body against",
    "start": "3670140",
    "end": "3677340"
  },
  {
    "text": "or it's a filter saying this item can be passed on to the next stage or it's not so what this does is implicitly creates",
    "start": "3677340",
    "end": "3685110"
  },
  {
    "text": "a list we find first of all the two items that have item there and each one of those is going to get passed to price",
    "start": "3685110",
    "end": "3691140"
  },
  {
    "text": "which is going to produce the price element and each one of those is going to be pressed quantity which is going to produce those quantity elements which",
    "start": "3691140",
    "end": "3697830"
  },
  {
    "text": "means by the way that now item price and quantity are locals available inside the body of the for loop where this body",
    "start": "3697830",
    "end": "3703620"
  },
  {
    "text": "consists of yield price times quantity where the yield keyword basically says hey return this but what we mean by that",
    "start": "3703620",
    "end": "3710190"
  },
  {
    "text": "is plug that into the list that will be the result of this particular expression",
    "start": "3710190",
    "end": "3715850"
  },
  {
    "text": "the end",
    "start": "3717900",
    "end": "3721109"
  },
  {
    "text": "do that in Java i double-dog dare you because it will not be pretty this is",
    "start": "3723609",
    "end": "3733779"
  },
  {
    "text": "these are some of the advantages that Scala has over other languages okay",
    "start": "3733779",
    "end": "3740369"
  },
  {
    "text": "Scala is not perfect Scala has some interesting quirks Scala has some ugly",
    "start": "3740369",
    "end": "3745749"
  },
  {
    "text": "quirks skull has some things that they need to fix an error message coming out of the Scala compiler can read about",
    "start": "3745749",
    "end": "3751900"
  },
  {
    "text": "like warren piece does in other words completely aren't incomprehensible and it goes on for days okay but for all of",
    "start": "3751900",
    "end": "3761950"
  },
  {
    "text": "that the reason they have those really really nasty messages has everything to do with the strong typing type system",
    "start": "3761950",
    "end": "3768339"
  },
  {
    "text": "category theory blah blah blah and the scala guys notice martin has heard the fact that his errors are",
    "start": "3768339",
    "end": "3774430"
  },
  {
    "text": "incomprehensible starting from about scala 2.6 and they have been steadily working to make them more comprehensible",
    "start": "3774430",
    "end": "3780509"
  },
  {
    "text": "but you also have to meet them halfway and you can't just use scala like you",
    "start": "3780509",
    "end": "3785829"
  },
  {
    "text": "used Java or you're missing the point you need to start thinking in that other",
    "start": "3785829",
    "end": "3790900"
  },
  {
    "text": "dimension you need to start thinking about reusing behavior algorithms in",
    "start": "3790900",
    "end": "3796569"
  },
  {
    "text": "addition to trying to create these vertical trees of classes that are related in an inherent spaces couple of",
    "start": "3796569",
    "end": "3805719"
  },
  {
    "text": "resources for you there's 99 Scala problems which are similar to the two that I just showed you how do I solve",
    "start": "3805719",
    "end": "3811509"
  },
  {
    "text": "this this is what would look like in Scala and by the way these are not right you could maybe come up with a more",
    "start": "3811509",
    "end": "3816849"
  },
  {
    "text": "terse way of doing it and whether terse is better or not that's an aesthetic judgment right code that you wrote is",
    "start": "3816849",
    "end": "3824440"
  },
  {
    "text": "rememberable and discoverable by you code that somebody else wrote is sometimes to terse or too verbose let's",
    "start": "3824440",
    "end": "3830319"
  },
  {
    "text": "just call it an aesthetic and go from there there's also language org which has a number of similar problems but",
    "start": "3830319",
    "end": "3836829"
  },
  {
    "text": "they actually show how to solve them across a variety of different languages so if you want to compare Scala to",
    "start": "3836829",
    "end": "3842019"
  },
  {
    "text": "f-sharp - Haskell - lisp - closure - java - c-sharp you can do so",
    "start": "3842019",
    "end": "3849200"
  },
  {
    "text": "and if you have any questions I'll take them outside because we are officially done bye",
    "start": "3849200",
    "end": "3856369"
  }
]