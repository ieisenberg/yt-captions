[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "[Music]",
    "start": "830",
    "end": "9370"
  },
  {
    "text": "welcome everybody thanks for attending uh thanks for coming to this talk so my",
    "start": "9639",
    "end": "15160"
  },
  {
    "text": "name is Michael Jackson uh here's my friend Dominic Den Cola hey guys and we",
    "start": "15160",
    "end": "21880"
  },
  {
    "text": "are GNA co-present on this topic um just to give you a clue how cool Dominic is he and I first met in person about six",
    "start": "21880",
    "end": "29519"
  },
  {
    "text": "hours ago go so we are going to be um talking about about um this topic",
    "start": "29519",
    "end": "37640"
  },
  {
    "text": "together um I invited Dominic to speak with me because he's he's done a ton of work on this topic and a lot of this",
    "start": "37640",
    "end": "42960"
  },
  {
    "text": "presentation comes from work that he has done as well so uh he's going to be a huge addition uh to this presentation",
    "start": "42960",
    "end": "49920"
  },
  {
    "text": "I'm sure so we want to talk about a little concept uh known as commonly referred to",
    "start": "49920",
    "end": "57960"
  },
  {
    "text": "as as call back hell okay and some people say this is like a mythical place that doesn't",
    "start": "57960",
    "end": "63839"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "exist um I disagree I think call back hell is is a very real and hellish place",
    "start": "63839",
    "end": "70920"
  },
  {
    "text": "um and it's easy to get stuck there but it would be it would be too easy for me",
    "start": "70920",
    "end": "76240"
  },
  {
    "text": "right now to throw up on on the slide like some example right some nasty like",
    "start": "76240",
    "end": "81640"
  },
  {
    "text": "nested six layers deep example of callbacks chained together um instead I",
    "start": "81640",
    "end": "87920"
  },
  {
    "text": "want to talk I want to go a little bit deeper okay okay I want to talk about why we get there in the first place like",
    "start": "87920",
    "end": "93560"
  },
  {
    "text": "what is a call back um and in order to do that we're going to need to talk",
    "start": "93560",
    "end": "98640"
  },
  {
    "text": "about asynchronous apis okay what is an asynchronous API what is",
    "start": "98640",
    "end": "104880"
  },
  {
    "text": "the difference between a synchronous API and an asynchronous API let's have a look at this",
    "start": "104880",
    "end": "110040"
  },
  {
    "text": "example so this is a pretty simple function uh you a lot of you probably have a very similar function in apps",
    "start": "110040",
    "end": "115759"
  },
  {
    "text": "that you're building right this function is called get user we're going to pass in a name a username or a handle we're",
    "start": "115759",
    "end": "123159"
  },
  {
    "text": "going to execute some SQL query uh to our relational database and we're going",
    "start": "123159",
    "end": "128720"
  },
  {
    "text": "to get back a user um if we don't get a user we want to throw we want this",
    "start": "128720",
    "end": "134440"
  },
  {
    "text": "function to throw an error and say uh-uh you didn't find a user with that handle",
    "start": "134440",
    "end": "139560"
  },
  {
    "text": "um otherwise we'll just return the user object that we got back from the database pretty straightforward right",
    "start": "139560",
    "end": "145680"
  },
  {
    "text": "except we've got this query function that's kind of kind of interesting it's kind of uh a pain point for us because what it",
    "start": "145680",
    "end": "154080"
  },
  {
    "text": "is is it's blocking so what that means is we go to the database we make a call",
    "start": "154080",
    "end": "159640"
  },
  {
    "text": "and we basically wait on that open database connection and our thread can't do anything else until that call comes",
    "start": "159640",
    "end": "166480"
  },
  {
    "text": "back and then we can proceed with the rest of this function right so this is a huge problem in a single-threaded",
    "start": "166480",
    "end": "172640"
  },
  {
    "text": "environment like JavaScript where you don't really have any real concurrency instead you have these things called as",
    "start": "172640",
    "end": "179599"
  },
  {
    "text": "events events uh you might have done some programming in in nodejs and they there's just this massive event Loop and",
    "start": "179599",
    "end": "186840"
  },
  {
    "text": "um what you do is you you do something that's a little bit more like this instead so what you'll say is now my",
    "start": "186840",
    "end": "194519"
  },
  {
    "text": "function signature has changed right instead of one argument called name I've got two arguments I pass in name and a",
    "start": "194519",
    "end": "200280"
  },
  {
    "text": "call back and basically what I'm saying with this function is it's it's exact",
    "start": "200280",
    "end": "205760"
  },
  {
    "text": "same as the last function except it's not blocking I can I can call this function and I can give it as the second",
    "start": "205760",
    "end": "212760"
  },
  {
    "text": "argument a fun another function that says when you're done talking to the database when you get that object back I",
    "start": "212760",
    "end": "218720"
  },
  {
    "text": "want you to call this function with the result I want you to call my call back with the result okay um and so uh you know our query",
    "start": "218720",
    "end": "226840"
  },
  {
    "text": "function we've also changed in this in this slide to be non-blocking uh so now instead of just taking a string of SQL",
    "start": "226840",
    "end": "233519"
  },
  {
    "text": "and and any parameters to to uh interpolate into that SQL query we've now got a call back in the function as",
    "start": "233519",
    "end": "241159"
  },
  {
    "text": "well um a common pattern in node that you'll see at least is uh that when you",
    "start": "241159",
    "end": "247079"
  },
  {
    "text": "have a call back the first argument will be an error any error that occurred when you called the call back and the second",
    "start": "247079",
    "end": "252280"
  },
  {
    "text": "argument will be the result that you're actually interested in so this is not this is not too far out there right if",
    "start": "252280",
    "end": "258120"
  },
  {
    "text": "there was an error we call the call back with an error to let the user know that there was there something happened",
    "start": "258120",
    "end": "264080"
  },
  {
    "text": "otherwise if we don't have a user well that's an error too so let's give them",
    "start": "264080",
    "end": "269240"
  },
  {
    "text": "that uh the error that says there's no user otherwise there was no error and and the call back gets the user object",
    "start": "269240",
    "end": "276199"
  },
  {
    "text": "and null as the error argument because uh there was no error is this making",
    "start": "276199",
    "end": "281440"
  },
  {
    "text": "sense to everybody does this look pretty familiar okay this isn't too far out there this example isn't too contrived",
    "start": "281440",
    "end": "286840"
  },
  {
    "text": "let's take a look at them side by side the top function is a synchronous function fully synchronous we call it we",
    "start": "286840",
    "end": "293280"
  },
  {
    "text": "get a user object back uh but we have to wait on the database call the second",
    "start": "293280",
    "end": "298560"
  },
  {
    "text": "function we don't have to wait for the database to get back at all instead we give it a function called a call back",
    "start": "298560",
    "end": "304680"
  },
  {
    "text": "and it calls that for us later uh does anybody notice like what is the difference between these two",
    "start": "304680",
    "end": "310639"
  },
  {
    "text": "functions like any are there any is anything that jumps out to anybody look at the keywords in the function on the",
    "start": "310639",
    "end": "317560"
  },
  {
    "text": "top and look at the look at the keywords in the function on the bottom there are",
    "start": "317560",
    "end": "322880"
  },
  {
    "text": "two keywords in particular in the top function that are missing from the bottom the first one is",
    "start": "322880",
    "end": "330720"
  },
  {
    "text": "return okay let's take another look uh in a",
    "start": "330720",
    "end": "336560"
  },
  {
    "text": "call back you can't call return right nobody is there to get your return",
    "start": "336560",
    "end": "343680"
  },
  {
    "text": "value if I were to write the call back like this and say return user nobody's ever going to get that value okay the",
    "start": "343680",
    "end": "350600"
  },
  {
    "text": "second thing that you can't do in a call back is throw okay if you throw inside a",
    "start": "350600",
    "end": "357800"
  },
  {
    "text": "call back nobody gets nobody's there to catch it because you've got a brand new call stack you you departed you left",
    "start": "357800",
    "end": "365000"
  },
  {
    "text": "that old call stack behind when you registered that call back so you don't have that call stack anymore so if you",
    "start": "365000",
    "end": "370680"
  },
  {
    "text": "wrote some code like this if there was an error throw the error nobody could",
    "start": "370680",
    "end": "375720"
  },
  {
    "text": "possibly catch that um this is bad this is actually",
    "start": "375720",
    "end": "381120"
  },
  {
    "text": "particularly bad in an environment like node uh where you're building servers um",
    "start": "381120",
    "end": "387400"
  },
  {
    "text": "because you're just throwing an error and this one line will actually crash your entire program okay um even though",
    "start": "387400",
    "end": "395240"
  },
  {
    "text": "you you actually see this uh this is a really bad practice but you see this all the time in node Library docs and it",
    "start": "395240",
    "end": "401400"
  },
  {
    "text": "kind of drives me crazy have you seen this before who's seen this pattern before if error throw error right it's",
    "start": "401400",
    "end": "406919"
  },
  {
    "text": "ridiculous right you can't throw the error nobody's going to catch it you're going to crash your process so in a call",
    "start": "406919",
    "end": "412400"
  },
  {
    "text": "back summary we don't have return we don't have throw all that we could get a",
    "start": "412400",
    "end": "419680"
  },
  {
    "text": "synchronous okay so maybe we can deal without return and throw but then once you start writing a",
    "start": "419680",
    "end": "426800"
  },
  {
    "text": "lot of code like this and I was I was writing a lot of code like this about six months ago and I thought man this",
    "start": "426800",
    "end": "432840"
  },
  {
    "text": "kind of sucks because I just I don't have return I don't have throw I don't have a",
    "start": "432840",
    "end": "439440"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "stack okay that old stack that I used to have that I was that I was executing on",
    "start": "439440",
    "end": "445199"
  },
  {
    "text": "when I called that get user function I departed from that stack so I lose all",
    "start": "445199",
    "end": "450479"
  },
  {
    "text": "semantics of a stack you don't normally think about a stack right a stack is like one of those things that just sort",
    "start": "450479",
    "end": "456560"
  },
  {
    "text": "of happens for you it's one of those things that the language gives you but you throw it away as when you go",
    "start": "456560",
    "end": "463240"
  },
  {
    "text": "asynchronous another problem with the Callback approach um is that you really don't have any",
    "start": "463240",
    "end": "469240"
  },
  {
    "text": "guarantees okay what do I mean by that I mean how many times uh does your call",
    "start": "469240",
    "end": "475720"
  },
  {
    "text": "back get called for example does it get called zero times does it get called more than once does it get called",
    "start": "475720",
    "end": "480840"
  },
  {
    "text": "exactly once does it get called with the same arguments every single time or does it get called with different arguments",
    "start": "480840",
    "end": "486319"
  },
  {
    "text": "every single time how many functional programmers do we have in here functional programmers what can",
    "start": "486319",
    "end": "491599"
  },
  {
    "text": "functions do in JavaScript functions can do at least three things they can return",
    "start": "491599",
    "end": "496800"
  },
  {
    "text": "they can throw or they can have side effects we've essentially chucked out return and throw and we're relying",
    "start": "496800",
    "end": "503680"
  },
  {
    "text": "purely on side effects the side effect being call the call back",
    "start": "503680",
    "end": "509960"
  },
  {
    "text": "just to interject um you know it's it's kind of common to say this isn't a real",
    "start": "510199",
    "end": "515279"
  },
  {
    "text": "problem you know there's a well- understood contract we're only going to call our call back back once or we're only going to call it back with an error",
    "start": "515279",
    "end": "521080"
  },
  {
    "text": "and the or or the result we're never going to call it back with both but you know you can actually find some very",
    "start": "521080",
    "end": "526880"
  },
  {
    "text": "prominent examples in in the history the G history of very important libraries",
    "start": "526880",
    "end": "532000"
  },
  {
    "text": "where this is not the case right so like Express had a very bad bug in the 2.x time frame where you know if it tried to",
    "start": "532000",
    "end": "539120"
  },
  {
    "text": "trap the error from Jason parse and then call the call back back with that but it had already called the call back back with the result and you know this is the",
    "start": "539120",
    "end": "545680"
  },
  {
    "text": "kind of stuff that happens when you're in a world where you're using this very basic function call to communicate your",
    "start": "545680",
    "end": "551040"
  },
  {
    "text": "control flow you don't have any guarantees and you will get bugs like this and you'll be spending your time tracking down I can't imagine the poor",
    "start": "551040",
    "end": "557240"
  },
  {
    "text": "programmer who got bit by that that filed that bug and then TJ had to get around to looking at it and saying oh wow that was brain dead mistake I wish",
    "start": "557240",
    "end": "564079"
  },
  {
    "text": "I'd had a language that protected me from that but I'm using callbacks he probably didn't say that last part but",
    "start": "564079",
    "end": "570920"
  },
  {
    "text": "who can who can see the bug here raise your hand when you see it",
    "start": "570920",
    "end": "576079"
  },
  {
    "text": "what's the bug in this function yeah not catching the",
    "start": "576079",
    "end": "584880"
  },
  {
    "text": "else okay that's you're talking about that last if if users. length equals names. length",
    "start": "587800",
    "end": "595720"
  },
  {
    "text": "that what you're talking about okay so that that's just a little guard and all that's doing is saying once we're done",
    "start": "595720",
    "end": "601440"
  },
  {
    "text": "with all of our call backs then call the main call back so I I don't think that",
    "start": "601440",
    "end": "606519"
  },
  {
    "text": "that's a bug though has anybody else see what H let me give you a clue what happens if I pass in two invalid",
    "start": "606519",
    "end": "614680"
  },
  {
    "text": "usernames into this into this function right the first argument is an array of usernames what happens if I pass two",
    "start": "614680",
    "end": "621399"
  },
  {
    "text": "invalid ones in yeah yeah my call back gets called twice",
    "start": "621399",
    "end": "628240"
  },
  {
    "text": "right can you imagine a function throwing",
    "start": "628240",
    "end": "633519"
  },
  {
    "text": "twice no right but that's what happens here right because you don't have the same guarantee that a synchronous call",
    "start": "633519",
    "end": "641079"
  },
  {
    "text": "stack gives you okay these are subtle bugs and they're a pain in the butt to to track down um because you you look at",
    "start": "641079",
    "end": "648839"
  },
  {
    "text": "like a lot of code and you're like I don't really see it but there are bugs okay it's easy to get these kinds of",
    "start": "648839",
    "end": "654160"
  },
  {
    "text": "bugs so in summary callbacks you don't have a you don't have a stack what I mean mean by that is",
    "start": "654160",
    "end": "659880"
  },
  {
    "text": "you don't you're not on the original call stack you're on a completely new call stack which means return and throw",
    "start": "659880",
    "end": "665399"
  },
  {
    "text": "you can't use them in a callback you have no guarantees about how that",
    "start": "665399",
    "end": "670600"
  },
  {
    "text": "function is going to work just basically says it in the docs but there aren't any",
    "start": "670600",
    "end": "675880"
  },
  {
    "text": "functional guarantees but at least we don't block right so we CH we threw away",
    "start": "675880",
    "end": "681720"
  },
  {
    "text": "a lot of stuff just so that we could get asynchronous so we didn't have to have a",
    "start": "681720",
    "end": "687720"
  },
  {
    "text": "a synchronous query call is it worth it we threw away some core parts of the",
    "start": "687720",
    "end": "694120"
  },
  {
    "text": "language just so we could get this I hope it's worth it okay so so so I think we can kind of",
    "start": "694120",
    "end": "700440"
  },
  {
    "text": "see like where this comes from right like why why call back hell exists in",
    "start": "700440",
    "end": "705639"
  },
  {
    "text": "the first place why is it a real thing let's take a look at where we're",
    "start": "705639",
    "end": "710680"
  },
  {
    "text": "going okay so the future is es6 generators how many people have kind of browsed around the es6 API you've seen",
    "start": "710680",
    "end": "717680"
  },
  {
    "start": "711000",
    "end": "711000"
  },
  {
    "text": "the generator thing it's pretty cool right uh What it lets you do is stuff like",
    "start": "717680",
    "end": "723839"
  },
  {
    "text": "this okay notice we've got that yield keyword there on the fourth line of our",
    "start": "723839",
    "end": "729519"
  },
  {
    "text": "or on the third line rather of the body of our Fibonacci function okay basically what that basically what we're going to",
    "start": "729519",
    "end": "736360"
  },
  {
    "text": "do here is we're going to print out the first 12 numbers of the Fibonacci sequence but notice what happens when we",
    "start": "736360",
    "end": "742000"
  },
  {
    "text": "call the Fibonacci function we get back an object right a first class object we",
    "start": "742000",
    "end": "748639"
  },
  {
    "text": "can take that object we can pass it around to other functions we can call methods on it in this case we call the",
    "start": "748639",
    "end": "753800"
  },
  {
    "text": "next method on it to generate the next me uh the next number in the Fibonacci",
    "start": "753800",
    "end": "759800"
  },
  {
    "text": "sequence um these are awesome they're first class co- routines um they'll be",
    "start": "759800",
    "end": "766360"
  },
  {
    "text": "really good for doing acyn stuff because you can just suspend the current execution context you could get halfway through a function suspend it to go and",
    "start": "766360",
    "end": "773040"
  },
  {
    "text": "do some IO come back with the result and continue with your function that that's awesome one thing that I really",
    "start": "773040",
    "end": "781160"
  },
  {
    "text": "like about generators is there's a super tiny API right there's a yield keyword",
    "start": "781160",
    "end": "787440"
  },
  {
    "text": "and a next function that's it uh Simple Solutions to complex problems",
    "start": "787440",
    "end": "793920"
  },
  {
    "text": "unfortunately it's not available yet okay we can't use generators yet they're an es6 you can you can run some stuff in",
    "start": "793920",
    "end": "800959"
  },
  {
    "text": "the spider monkey shell if you want to play around with it and that's kind of fun but you're not you can't use this in",
    "start": "800959",
    "end": "806199"
  },
  {
    "text": "your apps yet okay so what do we do in the meantime",
    "start": "806199",
    "end": "814040"
  },
  {
    "start": "814000",
    "end": "814000"
  },
  {
    "text": "um there's a word up here called Promise promises A+ okay how many people have",
    "start": "815440",
    "end": "821639"
  },
  {
    "text": "heard of promises deferreds Futures okay um I'm going to let Dominic talk about",
    "start": "821639",
    "end": "828800"
  },
  {
    "text": "promises and promise promises A+ in particular because he was very instrumental in uh coming up with uh the",
    "start": "828800",
    "end": "835160"
  },
  {
    "text": "specification go ahead thanks for the intro um so kind of",
    "start": "835160",
    "end": "841680"
  },
  {
    "text": "you know everybody's heard of promises it seems we got a lot of hands how many have heard of promises A+ in particular",
    "start": "841680",
    "end": "848199"
  },
  {
    "text": "yeah it's a much smaller number so what you kind of need to do and and this is",
    "start": "848199",
    "end": "853240"
  },
  {
    "text": "the reason we spent so much time setting this up is reset what you know about promises what you know about deferreds",
    "start": "853240",
    "end": "859279"
  },
  {
    "text": "what you know about future what you've heard about jQuery and all that like you need to kind of step back because",
    "start": "859279",
    "end": "864920"
  },
  {
    "text": "there's some there's some bad implementations out there that really don't get the point of promises um so we",
    "start": "864920",
    "end": "872560"
  },
  {
    "text": "need to go back to the beginning and and kind of like look at what this pattern really was meant to address and I'll",
    "start": "872560",
    "end": "877800"
  },
  {
    "text": "give you a hint you know we've kind of been talking about what it's meant to address for the previous 20 slides um",
    "start": "877800",
    "end": "883759"
  },
  {
    "text": "but but back in the beginning you know there they're discovered you know by computer science researchers as as these people discover things you know about",
    "start": "883759",
    "end": "891279"
  },
  {
    "text": "1989 um the E programming language um created by Mark Miller and others is is",
    "start": "891279",
    "end": "897399"
  },
  {
    "text": "really kind of where they first came into into fruition in their current form um and and this is a really really",
    "start": "897399",
    "end": "902839"
  },
  {
    "text": "interesting language where you know it's it's it's JavaScript Style with event loops and you know share nothing",
    "start": "902839",
    "end": "909560"
  },
  {
    "text": "concurrency but it made promises a first class part of the language um and made them like you know they were they really",
    "start": "909560",
    "end": "915959"
  },
  {
    "text": "a big part of it um and Mark Miller who created the language is now on tc39 the",
    "start": "915959",
    "end": "921079"
  },
  {
    "text": "committee um that creates the next version of JavaScript so that's that's pretty cool um but but you know beyond",
    "start": "921079",
    "end": "927000"
  },
  {
    "text": "just their original creation and e and so on they're actually used in a lot of modern languages too um under various",
    "start": "927000",
    "end": "933800"
  },
  {
    "text": "names you know python has futures um Twisted deferreds net has task T you know",
    "start": "933800",
    "end": "941120"
  },
  {
    "text": "there's there's tons of different you know C++ STD colon colon future you know there's lots of these implementations in",
    "start": "941120",
    "end": "947680"
  },
  {
    "text": "these languages it's kind of been a convergent evolution upon this pattern this this promise pattern of uh how you",
    "start": "947680",
    "end": "954880"
  },
  {
    "text": "know how to manage your asynchronicity in a way that's that's well integrated into the",
    "start": "954880",
    "end": "960519"
  },
  {
    "text": "language um so kind of I want to tell a story about how promises in JavaScript kind of ended up because back in the day",
    "start": "960519",
    "end": "968279"
  },
  {
    "text": "back in the the days when commonjs was a very like you know important mailing list you know they came up with this",
    "start": "968279",
    "end": "973639"
  },
  {
    "text": "thing called commonjs promises a and you know a group called jQuery who you might have heard of saw this and they're like",
    "start": "973639",
    "end": "980480"
  },
  {
    "text": "oh that'd be cool we should have those because we have xhrs and we need to manage the asynchronicity there and they",
    "start": "980480",
    "end": "986920"
  },
  {
    "text": "implemented kind of a very bad version of commonjs promises a um and that's kind of really poisoned people's minds",
    "start": "986920",
    "end": "993759"
  },
  {
    "text": "against them thinking that you don't get a lot out of them and so you know I I'm often in happy Promised Land using good",
    "start": "993759",
    "end": "1000839"
  },
  {
    "text": "promises for this from this other Library um but you know it's a minority not many people know but what happens is",
    "start": "1000839",
    "end": "1009240"
  },
  {
    "text": "you know so this this poll request gets opened on Ember this project I'm watching on GitHub it says add Ember",
    "start": "1009240",
    "end": "1015279"
  },
  {
    "text": "def. deferred mix in which implements the promises a spec and you know I take a look at the code",
    "start": "1015279",
    "end": "1020839"
  },
  {
    "text": "pretty quickly and I find out that these are actually horrible horrible lies um",
    "start": "1020839",
    "end": "1026678"
  },
  {
    "text": "it it does not Implement anything like the com promises a speec it's it's even worse than Jaker's implementation in",
    "start": "1026679",
    "end": "1032160"
  },
  {
    "text": "many ways um so you know this this is kind of like the last straw for me I'm just Bel leaguered minority saying yo",
    "start": "1032160",
    "end": "1039199"
  },
  {
    "text": "let's promises are really about you know this really cool stuff but you're missing the point and so I wrote this",
    "start": "1039199",
    "end": "1045678"
  },
  {
    "text": "this long rant originally in a Guist about say called you're missing the point of promises um and I you know this",
    "start": "1045679",
    "end": "1052160"
  },
  {
    "text": "this made the rounds Hacker News so on so forth um but you know I think it really brought brought a lot of clarity",
    "start": "1052160",
    "end": "1058120"
  },
  {
    "text": "to people on what exactly is the point of promises and that's that's what what",
    "start": "1058120",
    "end": "1063440"
  },
  {
    "text": "Michael's been getting at and what we'll discuss exactly how it all fits together um but I mean the idea is you know okay",
    "start": "1063440",
    "end": "1070000"
  },
  {
    "text": "I I wrote an angry rant on the internet but but what what good does that do anyone so it you know recognizing this I",
    "start": "1070000",
    "end": "1077080"
  },
  {
    "text": "didn't want to just be be that guy who writes things um I I actually did something about it so I created the the",
    "start": "1077080",
    "end": "1083559"
  },
  {
    "text": "promises a test Suite okay so the idea here is that I had an automated Suite of",
    "start": "1083559",
    "end": "1089240"
  },
  {
    "text": "tests that any promises a library any library that wanted to implement promises a could plug in and could say",
    "start": "1089240",
    "end": "1095240"
  },
  {
    "text": "oh you did it right oh you did it wrong you know you're missing the point you you your jQuery and you're letting the",
    "start": "1095240",
    "end": "1101360"
  },
  {
    "text": "promise have multiple fulfillment values that's actually kind of missing the point you can't return multiple values",
    "start": "1101360",
    "end": "1106679"
  },
  {
    "text": "from a function things like that and this was really cool like this this you got to see exactly where libraries like",
    "start": "1106679",
    "end": "1113280"
  },
  {
    "text": "jqu fell down libraries like Ember deferred that in that poll request and it inspired a lot of interesting work",
    "start": "1113280",
    "end": "1119640"
  },
  {
    "text": "some so you know going back to Ember Yuda Catz who spoke this morning and uh",
    "start": "1119640",
    "end": "1124880"
  },
  {
    "text": "put together was responsible for much member put together this Library called rsvp.com",
    "start": "1124880",
    "end": "1131320"
  },
  {
    "text": "ises a test Suite I created um to say okay let's put together a real good implementation that everybody can use",
    "start": "1131320",
    "end": "1138120"
  },
  {
    "text": "and that we can use in Ember um and that that pretty cool just by itself that we transformed this this",
    "start": "1138120",
    "end": "1144080"
  },
  {
    "text": "spec from a document sitting on a almost forgotten commonjs Wiki into a test Suite an executable spec really that",
    "start": "1144080",
    "end": "1151440"
  },
  {
    "text": "people could write code against and that started ging subtraction but then things got really awesome so there's this guy",
    "start": "1151440",
    "end": "1157840"
  },
  {
    "text": "called Brian Cavalier um who's uh who's responsible for the promised library when.js um and he created this guest",
    "start": "1157840",
    "end": "1165360"
  },
  {
    "text": "called promise and he called it promises A+ you know it's a pun on the promises a name saying you know promises a was",
    "start": "1165360",
    "end": "1171640"
  },
  {
    "text": "pretty good but part of the reason people are getting it wrong is because it's underspecified it's missing some",
    "start": "1171640",
    "end": "1176679"
  },
  {
    "text": "details it doesn't you know go into what happens in this Edge case you know it says maybe you could do this but because",
    "start": "1176679",
    "end": "1182840"
  },
  {
    "text": "of performance some people have chosen to do this you know it it wasn't really clear um it was so what we what we ended",
    "start": "1182840",
    "end": "1190640"
  },
  {
    "text": "up doing you know him and me and a few other implementers including including Yehuda um over the course of the next",
    "start": "1190640",
    "end": "1196559"
  },
  {
    "text": "three or four or five months was putting together uh an actual you know up-to-date spec called promises A+ and",
    "start": "1196559",
    "end": "1203960"
  },
  {
    "text": "so here we are you know 5 months later and we have this beautiful spec document hosted on GitHub and and I think it's",
    "start": "1203960",
    "end": "1210880"
  },
  {
    "text": "really interesting the way we develop this you know we we this isn't something we submitted to a standards body or we",
    "start": "1210880",
    "end": "1216600"
  },
  {
    "text": "you know we every we wrote up once and then put up there we we developed this on GitHub in the open we had people who",
    "start": "1216600",
    "end": "1222760"
  },
  {
    "text": "who we' never seen before come in and open issues and say I don't understand this could you clear this up or I think",
    "start": "1222760",
    "end": "1228080"
  },
  {
    "text": "you missed this or so on and so forth end up being a really impressive process",
    "start": "1228080",
    "end": "1233159"
  },
  {
    "text": "that I think we're all really happy with you know Implement driven but also Community Driven um so you can go check",
    "start": "1233159",
    "end": "1239159"
  },
  {
    "text": "it out we have a a pretty sweet logo um at at this website um and and just I",
    "start": "1239159",
    "end": "1245240"
  },
  {
    "text": "mean it's it's it's pretty technical but it's supposed to be and of course it comes with a a really comprehensive test",
    "start": "1245240",
    "end": "1250480"
  },
  {
    "text": "Suite saying you know this is exactly how it should behave these are all the edge cases so when you're going to use",
    "start": "1250480",
    "end": "1256240"
  },
  {
    "text": "this promise pattern um this this is how your promises really this is the minimal contract everyone needs to",
    "start": "1256240",
    "end": "1262520"
  },
  {
    "text": "share and and so out of this there's emerged I think three kind of leading implementations there's there's q a",
    "start": "1262520",
    "end": "1268960"
  },
  {
    "text": "library I work on it's a very full featured you know one of The Originals there's RSVP uh yehuda's newcomer to the",
    "start": "1268960",
    "end": "1275360"
  },
  {
    "text": "scene highly recommended and there's Wen which is Brian who started this all you know his implementation which is you",
    "start": "1275360",
    "end": "1281480"
  },
  {
    "text": "know quite quite impressive but you know if you go to this this Wiki page we have um there's also like 30 others you know",
    "start": "1281480",
    "end": "1288840"
  },
  {
    "text": "people if one of the things I learned is once you make a spec people just start wanting to implement it just for fun so",
    "start": "1288840",
    "end": "1294640"
  },
  {
    "text": "you should try that sometime if you got a problem you want solved um but you know I just see new new implementations",
    "start": "1294640",
    "end": "1299720"
  },
  {
    "text": "scroll by in my Twitter feed every once in a while um so I'm going to turn it back over to you to kind of get into you know",
    "start": "1299720",
    "end": "1305679"
  },
  {
    "text": "this is this is the standards process this is this is what we accomplished but what is the value ad here what's the",
    "start": "1305679",
    "end": "1310919"
  },
  {
    "text": "proposition why are promises so important so what I want you to think of is I want",
    "start": "1310919",
    "end": "1318760"
  },
  {
    "start": "1318000",
    "end": "1318000"
  },
  {
    "text": "to I want you to kind of burn this phrase into your mind okay so A A promise is an asynchronous value",
    "start": "1318760",
    "end": "1327480"
  },
  {
    "text": "okay it is it is an object it's a first class object that at some point in the",
    "start": "1327480",
    "end": "1334640"
  },
  {
    "text": "future will have a value okay but for right now it's just an object okay uh so",
    "start": "1334640",
    "end": "1343039"
  },
  {
    "text": "we can call a method and we can return this object um let's take a look at",
    "start": "1343039",
    "end": "1349240"
  },
  {
    "text": "oh gosh you know forget that slide I'm going to talk about four basic transforms okay going from synchronous",
    "start": "1349240",
    "end": "1355480"
  },
  {
    "start": "1351000",
    "end": "1351000"
  },
  {
    "text": "code to asynchronous code and hopefully this idea of an asynchronous value will",
    "start": "1355480",
    "end": "1361600"
  },
  {
    "text": "kind of start to sync in okay so on the top we've got some synchronous code uh",
    "start": "1361600",
    "end": "1367799"
  },
  {
    "text": "again our our get user function let's pretend it's synchronous and it returns a user object pretty basic VAR user is",
    "start": "1367799",
    "end": "1373279"
  },
  {
    "text": "get user with this username um and then on the next line I can immediately pull property off of that object great get",
    "start": "1373279",
    "end": "1381360"
  },
  {
    "text": "the user's name um if if that function instead of",
    "start": "1381360",
    "end": "1386840"
  },
  {
    "text": "returning a user if that function returned a promise for a user we would",
    "start": "1386840",
    "end": "1392200"
  },
  {
    "text": "call the function and then here's the here's the method signature uh",
    "start": "1392200",
    "end": "1398720"
  },
  {
    "text": "then oh you know what I actually needed to I actually needed to go into this slide I'm sorry let's look at the bottom",
    "start": "1398720",
    "end": "1404679"
  },
  {
    "text": "first um so then is a function that requires that has two arguments okay",
    "start": "1404679",
    "end": "1411279"
  },
  {
    "text": "this is the spec two arguments the first argument is a fulfillment Handler okay",
    "start": "1411279",
    "end": "1416360"
  },
  {
    "text": "it is a function that you use to say this is the value of the promise okay",
    "start": "1416360",
    "end": "1422200"
  },
  {
    "text": "the second function that gets past to then is a rejection Handler which says",
    "start": "1422200",
    "end": "1429640"
  },
  {
    "text": "this is the value uh this is the reason for which This Promise is not valid okay the",
    "start": "1429640",
    "end": "1437919"
  },
  {
    "text": "parallel here are return and throw right if you exec if you call the first",
    "start": "1437919",
    "end": "1443120"
  },
  {
    "text": "function it's just like calling return from a synchronous function if you call the second function it's like throwing",
    "start": "1443120",
    "end": "1450440"
  },
  {
    "text": "from a synchronous function okay similar to a synchronous function once you call",
    "start": "1450440",
    "end": "1455600"
  },
  {
    "text": "one of these functions once you call either one any future calls to either",
    "start": "1455600",
    "end": "1460640"
  },
  {
    "text": "one is a noop okay that's just like a synchronous function right once you",
    "start": "1460640",
    "end": "1465960"
  },
  {
    "text": "return any further return in that function are no Ops you you stopped executing the body of that function",
    "start": "1465960",
    "end": "1472600"
  },
  {
    "text": "right similar to throw when once you throw in a function you don't execute any more code that's it all future",
    "start": "1472600",
    "end": "1479760"
  },
  {
    "text": "returns and throws are no Ops okay do you see the parallel okay so I want to talk I want",
    "start": "1479760",
    "end": "1486480"
  },
  {
    "text": "to get back into talking about these transforms in this first case uh it's just a basic functional",
    "start": "1486480",
    "end": "1493679"
  },
  {
    "text": "transform okay I'm I'm taking this get user function that's synchronous on the top I'm making it asynchronous on the",
    "start": "1493679",
    "end": "1500240"
  },
  {
    "text": "bottom in my fulfillment Handler which is my first argument to then that Anonymous function I get back the user",
    "start": "1500240",
    "end": "1507279"
  },
  {
    "text": "object as an argument great that means the promise was fulfilled um that would be just like",
    "start": "1507279",
    "end": "1513360"
  },
  {
    "text": "returning normally from a function okay let's take a look now at this uh",
    "start": "1513360",
    "end": "1521240"
  },
  {
    "text": "synchronous code on the top I say VAR user is get user with this username if there's no user I'm going to throw an",
    "start": "1521240",
    "end": "1526799"
  },
  {
    "text": "error right this happens all the time in synchronous code if there's some condition throw okay the promise",
    "start": "1526799",
    "end": "1534120"
  },
  {
    "text": "equivalent for that pattern up that you're seeing up at the top is is on the bottom so in my fulfillment Handler in",
    "start": "1534120",
    "end": "1542440"
  },
  {
    "text": "other words I I I get back a user object okay that means there were no problems",
    "start": "1542440",
    "end": "1547640"
  },
  {
    "text": "nobody threw okay from Downstream on This Promise call stack",
    "start": "1547640",
    "end": "1554799"
  },
  {
    "text": "right nobody threw I got back a user object but oh sorry I put if bang timeline what I",
    "start": "1554799",
    "end": "1561120"
  },
  {
    "text": "meant to put was if bang user uh throw error new user okay otherwise return",
    "start": "1561120",
    "end": "1566799"
  },
  {
    "text": "user.name okay so this is like this is just like throwing an error in a normal",
    "start": "1566799",
    "end": "1572960"
  },
  {
    "text": "synchronous call stack except you're in a promise call stack here's another synchronous pattern",
    "start": "1572960",
    "end": "1579000"
  },
  {
    "text": "that you see very often which is catching and safely handling an error right instead of just like throwing it",
    "start": "1579000",
    "end": "1585399"
  },
  {
    "text": "out into the ether right you're going to try to deliver you know this this",
    "start": "1585399",
    "end": "1591399"
  },
  {
    "text": "deliver tweet 2 function could possibly throw okay this is a synchronous function that could possibly throw in",
    "start": "1591399",
    "end": "1597760"
  },
  {
    "text": "this case we want to catch it we don't want to we don't want that Arrow to Bubble Up and bust further up the call stack we want to catch it and do some",
    "start": "1597760",
    "end": "1603840"
  },
  {
    "text": "handling Logic on it okay in Promised Land what this becomes is instead of",
    "start": "1603840",
    "end": "1609919"
  },
  {
    "text": "returning immediately or throwing immediately deliver tweet to actually returns a promise okay in this case",
    "start": "1609919",
    "end": "1616840"
  },
  {
    "text": "we're going to say our our then hand our then function when we call then on the last line gets two arguments the first",
    "start": "1616840",
    "end": "1623559"
  },
  {
    "text": "one is is not defined we haven't Define what we want to do in case we get a successful user object or in case the",
    "start": "1623559",
    "end": "1629799"
  },
  {
    "text": "delivery is successful um but the second one is what we want to do in case there",
    "start": "1629799",
    "end": "1635360"
  },
  {
    "text": "is an error does that make sense I'm going to handle the error if there's an error so this is just like a catch Okay",
    "start": "1635360",
    "end": "1642200"
  },
  {
    "text": "so we've seen return throw catch and there's a fourth thing that we normally",
    "start": "1642200",
    "end": "1647760"
  },
  {
    "text": "do in synchronous code and that is rethrow in other words uh take a look at",
    "start": "1647760",
    "end": "1654200"
  },
  {
    "text": "the top example I executed this get user function it threw I've got an error and",
    "start": "1654200",
    "end": "1659360"
  },
  {
    "text": "I want to throw that again maybe I want to add some metadata information or whatever this is like a compound error",
    "start": "1659360",
    "end": "1665159"
  },
  {
    "text": "right I want to rethrow this thing uh you have that exact same pattern in",
    "start": "1665159",
    "end": "1670760"
  },
  {
    "text": "promise style uh if you if you get user Returns the promise instead of returning",
    "start": "1670760",
    "end": "1676279"
  },
  {
    "text": "synchronously basically your second function takes an error um and and",
    "start": "1676279",
    "end": "1681360"
  },
  {
    "text": "you're just rethrowing okay does that make sense this will hopefully make a little bit more sense",
    "start": "1681360",
    "end": "1687120"
  },
  {
    "text": "as we move on the the important thing to get here is to go back",
    "start": "1687120",
    "end": "1692360"
  },
  {
    "text": "to the fact that uh all of these functions all of the all",
    "start": "1692360",
    "end": "1698960"
  },
  {
    "text": "of the all of the operations that you have available to you in a synchronous",
    "start": "1698960",
    "end": "1704200"
  },
  {
    "text": "call stack in a synchronous world are available to you in in an asynchronous world now return throw catch and rethrow",
    "start": "1704200",
    "end": "1714200"
  },
  {
    "text": "okay um see I think the slide's a duplicate so what you get back what",
    "start": "1714200",
    "end": "1721320"
  },
  {
    "text": "promises give back to you is they give you asynchronicity but they also give you a call stack okay it's a it's it's a",
    "start": "1721320",
    "end": "1730440"
  },
  {
    "text": "promises call stack you can return meaningful objects now from your functions you can throw when errors",
    "start": "1730440",
    "end": "1736360"
  },
  {
    "text": "happen and those sorts of things will meaningfully propagate back up the uh the promise chain it also gives you some",
    "start": "1736360",
    "end": "1742760"
  },
  {
    "text": "guarantees I was talking about how if you call the Fulfillment Handler if you call the uh error Handler more than once",
    "start": "1742760",
    "end": "1749480"
  },
  {
    "text": "or the rejection Handler more than once now that's a no op right you have these guarantees in call back land you don't",
    "start": "1749480",
    "end": "1756320"
  },
  {
    "text": "have those guarantees you can call the call back you can not call the call back you could call it multiple times for",
    "start": "1756320",
    "end": "1762120"
  },
  {
    "text": "example okay so let's get into what happens when how do we use these sorts",
    "start": "1762120",
    "end": "1768600"
  },
  {
    "text": "of patterns in like more real world programs right so let's say we want to have multiple things happen when we call",
    "start": "1768600",
    "end": "1777320"
  },
  {
    "text": "uh like we want we want to like propagate values right propagate the result of one uh operation to the next",
    "start": "1777320",
    "end": "1784679"
  },
  {
    "text": "in other words we want to do operations in sequence okay so let's say for example I want to get a user let's say",
    "start": "1784679",
    "end": "1791159"
  },
  {
    "start": "1785000",
    "end": "1785000"
  },
  {
    "text": "I'm working at Twitter I want to get a user object I going to get all the tweets for that user and then I want to",
    "start": "1791159",
    "end": "1797320"
  },
  {
    "text": "go update as timeline okay this is pretty there's there's codes somewhere in Twitter that does something like this",
    "start": "1797320",
    "end": "1803480"
  },
  {
    "text": "I'm sure uh up top we see the synchronous that's how that's how it happens we",
    "start": "1803480",
    "end": "1808640"
  },
  {
    "text": "could totally understand that right in the middle example we're using callbacks right this is how we propagate values or",
    "start": "1808640",
    "end": "1815799"
  },
  {
    "text": "propagate the results of one call back to another function right it's basically we got this nesting that occurs we get",
    "start": "1815799",
    "end": "1821720"
  },
  {
    "text": "the user good in the call back we've got the user now we say get the tweets for the user okay in that call back now we",
    "start": "1821720",
    "end": "1828200"
  },
  {
    "text": "have the tweets now we can finally update the timeline okay do you see how the code pretty quickly creeps to the",
    "start": "1828200",
    "end": "1834519"
  },
  {
    "text": "right have any of you had this problem we've had like code indenting kind of quickly to the right",
    "start": "1834519",
    "end": "1842240"
  },
  {
    "text": "um using promises we get back an object instead of getting back nothing from the",
    "start": "1842240",
    "end": "1849799"
  },
  {
    "text": "get user from the call to get user we get back an object a promise for that user when so notice that the first",
    "start": "1849799",
    "end": "1857399"
  },
  {
    "text": "argument to our first then is get new Tweets in other words once you have the",
    "start": "1857399",
    "end": "1863000"
  },
  {
    "text": "result from the get user call pass whatever that object is to get new tweets once you have the result from",
    "start": "1863000",
    "end": "1868880"
  },
  {
    "text": "that call pass whatever that object is to the update timeline function right so chaining becomes super simple in promis",
    "start": "1868880",
    "end": "1876880"
  },
  {
    "text": "land uh and things don't creep out to the right so quickly but that's just the happy path",
    "start": "1876880",
    "end": "1883679"
  },
  {
    "start": "1883000",
    "end": "1883000"
  },
  {
    "text": "right let's assume that like our code actually has exceptions and it throws and it does things that like real code",
    "start": "1883679",
    "end": "1890240"
  },
  {
    "text": "does right because any number of things could have failed in that that sequence of operations as that pretty complex",
    "start": "1890240",
    "end": "1897159"
  },
  {
    "text": "it's probably talking to lots of different Services Etc so let's pretend that we've got these synchronous functions now and they",
    "start": "1897159",
    "end": "1903639"
  },
  {
    "text": "they any one of them could throw and if any one of them throws we want to be able to handle the error in a sane way",
    "start": "1903639",
    "end": "1909840"
  },
  {
    "text": "we don't want that error to crash our program okay so let's take a look at what what does this look like using",
    "start": "1909840",
    "end": "1916440"
  },
  {
    "text": "callbacks take a look at that for a second get the",
    "start": "1916440",
    "end": "1923200"
  },
  {
    "text": "user okay on the next line if there was an error handle the error otherwise we can proceed now get the new",
    "start": "1923200",
    "end": "1930760"
  },
  {
    "text": "tweets and look at the next line okay if there was an error handle the error otherwise we can proceed update the",
    "start": "1930760",
    "end": "1937440"
  },
  {
    "text": "timeline right at every single step of the way we've got like this manual",
    "start": "1937440",
    "end": "1943120"
  },
  {
    "text": "handling right because we don't have a call stack right we can't we can't throw that thing we have to like do something",
    "start": "1943120",
    "end": "1950200"
  },
  {
    "text": "with it I don't know give it to this handle error function if there is one if not keep keep going with something else",
    "start": "1950200",
    "end": "1956840"
  },
  {
    "text": "how many people have seen this pattern creeping into their code right it's like all over the place",
    "start": "1956840",
    "end": "1962440"
  },
  {
    "text": "right uh and it and it kind of drives me crazy other or you can do this this is this is this always makes me laugh when",
    "start": "1962440",
    "end": "1968320"
  },
  {
    "text": "I see this like people people write code like this you know like on wiks and",
    "start": "1968320",
    "end": "1973399"
  },
  {
    "text": "stuff and they're like if there was an error throw the error like we'll all go home and have a beer afterwards like",
    "start": "1973399",
    "end": "1978720"
  },
  {
    "text": "your server's crashing you know like the only thing that you can do this is node code by the way the only thing that you",
    "start": "1978720",
    "end": "1985120"
  },
  {
    "text": "can do in that situation is like register your Handler on this like magic",
    "start": "1985120",
    "end": "1991799"
  },
  {
    "text": "event that happens on the process object called uncaught exception that's basically like your process is going",
    "start": "1991799",
    "end": "1997600"
  },
  {
    "text": "down any last words before we shut the whole thing down yeah how about how",
    "start": "1997600",
    "end": "2002960"
  },
  {
    "text": "about this do that function before you totally die um so that that's just not an option",
    "start": "2002960",
    "end": "2009799"
  },
  {
    "text": "yeah yeah and I think what's what's really funny about this example is that",
    "start": "2009799",
    "end": "2015039"
  },
  {
    "text": "you know this is obviously code you would hope not to see you might see it but you know you you promptly upgrade",
    "start": "2015039",
    "end": "2020440"
  },
  {
    "text": "that person in the code review but only a slight variation of this code is is using a feature of node called domains",
    "start": "2020440",
    "end": "2027360"
  },
  {
    "text": "where you which is their solution for error handling which is just basically let's say there's this Global state",
    "start": "2027360",
    "end": "2034240"
  },
  {
    "text": "which is what current domain we're in and that gets an uncaught ception Handler and everything that happens",
    "start": "2034240",
    "end": "2040320"
  },
  {
    "text": "inside that domain while that Global state is active will go to the uncaught exception Handler for that domain and so",
    "start": "2040320",
    "end": "2046919"
  },
  {
    "text": "so they don't have any any real story for how to propagate values up a call stack they just say well let's add this",
    "start": "2046919",
    "end": "2053000"
  },
  {
    "text": "Global State and if something bad happens while that Global state is active then we'll do the uncaught",
    "start": "2053000",
    "end": "2058720"
  },
  {
    "text": "exception and isolate it to that domain it's it's just like this hacky patch on top of what was already a pretty hacky",
    "start": "2058720",
    "end": "2065158"
  },
  {
    "text": "pattern um but you know it's it's what they got it's if you don't have the proper tools for the job you end up",
    "start": "2065159",
    "end": "2070878"
  },
  {
    "text": "having to do stuff like that totally thank you yeah so it's um so how many people",
    "start": "2070879",
    "end": "2077240"
  },
  {
    "text": "like this pattern fail fast right fail real",
    "start": "2077240",
    "end": "2084440"
  },
  {
    "text": "fast uh using promises this now this fun",
    "start": "2084440",
    "end": "2089878"
  },
  {
    "text": "this this example might be a little bit difficult to understand but what did I say about promises using promises you",
    "start": "2089879",
    "end": "2096000"
  },
  {
    "text": "get back a call stack right which means you can you can propagate stuff right",
    "start": "2096000",
    "end": "2101320"
  },
  {
    "text": "back up the chain you can propagate these errors you can propagate return values right back up the stack just like",
    "start": "2101320",
    "end": "2106560"
  },
  {
    "text": "you can with normal function calls so let's check out what is going on in this example in this second example I say get",
    "start": "2106560",
    "end": "2114160"
  },
  {
    "text": "user M Jackson okay if that succeeds then get new tweets if that",
    "start": "2114160",
    "end": "2120359"
  },
  {
    "text": "succeeds then update the timeline and I've got a last then down there that",
    "start": "2120359",
    "end": "2125880"
  },
  {
    "text": "says uh that's essentially it's undefined uh if you succeed at that",
    "start": "2125880",
    "end": "2131200"
  },
  {
    "text": "point but what happens is if if any one of those steps",
    "start": "2131200",
    "end": "2137359"
  },
  {
    "text": "fails what then will return is it will immediately return a rejected promise",
    "start": "2137359",
    "end": "2143320"
  },
  {
    "text": "well not immediately on the next tick but it'll it'll it'll give you a rejected promise and that rejection",
    "start": "2143320",
    "end": "2149560"
  },
  {
    "text": "propagates all the way back to the first catch so to speak right this is why we",
    "start": "2149560",
    "end": "2155640"
  },
  {
    "text": "looked at the transforms right this is essentially a try",
    "start": "2155640",
    "end": "2160960"
  },
  {
    "text": "catch using promises okay so you get back catch",
    "start": "2160960",
    "end": "2167760"
  },
  {
    "text": "yeah yeah",
    "start": "2168160",
    "end": "2173440"
  },
  {
    "text": "yep nope it's going to skip it entirely yeah it's going to skip just",
    "start": "2174480",
    "end": "2179839"
  },
  {
    "text": "like just like if look at the top example so if if get user up there if that thing throws where do we go we go",
    "start": "2179839",
    "end": "2186760"
  },
  {
    "text": "straight to the catch we don't call get new tweets we don't call update timeline we don't call any of that we go straight to the catch same",
    "start": "2186760",
    "end": "2194319"
  },
  {
    "text": "thing in promises if get user fails now it's returning a promise remember it's not throwing directly it's returning a",
    "start": "2194319",
    "end": "2200800"
  },
  {
    "text": "promise that is rejected if that promise is rejected that error propagates",
    "start": "2200800",
    "end": "2206880"
  },
  {
    "text": "through the chain get new tweets is not called because that's a success Handler you only call that thing if the previous",
    "start": "2206880",
    "end": "2213240"
  },
  {
    "text": "promise succeeded that didn't succeed so all we get from get user. then get new",
    "start": "2213240",
    "end": "2218800"
  },
  {
    "text": "tweets all we get is a rejected promise why because get user failed on the subsequent do then same",
    "start": "2218800",
    "end": "2226839"
  },
  {
    "text": "thing it's another rejected promise on the subsequent then same thing except",
    "start": "2226839",
    "end": "2231880"
  },
  {
    "text": "this time we've got a Handler for it we've got a catch right how many people",
    "start": "2231880",
    "end": "2237880"
  },
  {
    "text": "think this is like awesome how many people think this like totally changes way about how they do asynchronous",
    "start": "2237880",
    "end": "2243040"
  },
  {
    "text": "programming in JavaScript yeah I was looking at this I was building a large app and I was like holy crap there's an",
    "start": "2243040",
    "end": "2249240"
  },
  {
    "text": "error at this low level like I took the I took the HTTP request I like validated",
    "start": "2249240",
    "end": "2254839"
  },
  {
    "text": "the session I did all this stuff and then like there's some Er like there's some error argument down here that to some godforsaken call back I don't know",
    "start": "2254839",
    "end": "2261400"
  },
  {
    "text": "what to do with it right there's no way to there's no way for me to propagate this thing back up to the to the top",
    "start": "2261400",
    "end": "2266560"
  },
  {
    "text": "level I've got to call some call back I'd like to hold off on questions because we've got to get through a lot of stuff but I just want to I just want",
    "start": "2266560",
    "end": "2273119"
  },
  {
    "text": "to show you that we've got catch back in and these slides are going to be available so you don't need to",
    "start": "2273119",
    "end": "2278560"
  },
  {
    "text": "take pictures I'll put the slides up okay unfortunately there's a lot of fud going around about promises there",
    "start": "2278560",
    "end": "2285560"
  },
  {
    "text": "are a lot of people who are like oh callbacks are like the thing and they're everything and they're so cool and",
    "start": "2285560",
    "end": "2292119"
  },
  {
    "text": "Promises I don't even know what they are you can't use them because they're not compatible with the rest of something or",
    "start": "2292119",
    "end": "2297720"
  },
  {
    "text": "other so we just wanted to to spell some of the fud okay promises are totally",
    "start": "2297720",
    "end": "2302800"
  },
  {
    "text": "awesome you can use them anywhere I'm going to leave this part to Dominic all right yeah I mean yeah there",
    "start": "2302800",
    "end": "2309599"
  },
  {
    "text": "is a lot of fun that's all we'll leave it at that um but how can you how can you use promises with your existing code",
    "start": "2309599",
    "end": "2315079"
  },
  {
    "text": "right because that's what the fud is it's saying oh if you use promises nobody will ever use your code and if you use promises you can't use the",
    "start": "2315079",
    "end": "2320640"
  },
  {
    "text": "26,000 modules on mpm because then you know those don't use promises and it's bad this is just completely not true",
    "start": "2320640",
    "end": "2327440"
  },
  {
    "text": "okay so it's the job of a of a a wellone promise library to to make this interop",
    "start": "2327440",
    "end": "2332920"
  },
  {
    "text": "work for you to to bridge the gap between the old world of callbacks and the future",
    "start": "2332920",
    "end": "2338079"
  },
  {
    "text": "with promises and and they really are the future for reasons well for the for reasons we'll see yeah okay um so so the",
    "start": "2338079",
    "end": "2346560"
  },
  {
    "text": "first thing you can do is if you're using node you're like oh well I've got this whole FS thing and it's got lots of",
    "start": "2346560",
    "end": "2352640"
  },
  {
    "text": "useful functions for dealing with the file system but none of them return promises bummer or is it you can use",
    "start": "2352640",
    "end": "2358599"
  },
  {
    "text": "this so q and all the other libraries have functions called like Den notify",
    "start": "2358599",
    "end": "2363760"
  },
  {
    "text": "which will take a node function that uses a call back and turn it into one that returns of promise this is a pretty",
    "start": "2363760",
    "end": "2369040"
  },
  {
    "text": "cool thing about JavaScript just unrelated to this is that you can do these kind of crazy things with other people's functions but yeah you got this",
    "start": "2369040",
    "end": "2375200"
  },
  {
    "text": "new function called read file that returns a promise and boom there you go read file with a file name you got a",
    "start": "2375200",
    "end": "2381920"
  },
  {
    "text": "promise you can do all your nice error handling you can do those kind of chains that we saw in the last slide so that's",
    "start": "2381920",
    "end": "2388240"
  },
  {
    "text": "the first thing is that you can use call back using libraries if you want to buy into a promise based stack there's no problem with that the second thing is",
    "start": "2388240",
    "end": "2395920"
  },
  {
    "text": "you know what about you know if you write a library or you write an app and you're using promises people are like oh",
    "start": "2395920",
    "end": "2401760"
  },
  {
    "text": "no nobody will ever use your app or nobody will ever use your promises well people probably use your app because you know the the users on Facebook don't",
    "start": "2401760",
    "end": "2408040"
  },
  {
    "text": "care if when you click the button it's promises or call backs but will they use your library well there there's a really",
    "start": "2408040",
    "end": "2413560"
  },
  {
    "text": "easy way around that too and um this is a solution that Q has so let's say we're creating this create user function and",
    "start": "2413560",
    "end": "2419760"
  },
  {
    "text": "it's got complicated error handling logic and we want to use promises internally but then we want to expose an API for those poor callback users stuck",
    "start": "2419760",
    "end": "2426400"
  },
  {
    "text": "back in the 2000s well for those people we just have this function called notify which Q puts on",
    "start": "2426400",
    "end": "2432079"
  },
  {
    "text": "all of its promises you pass it a callback and what this means is that if there is a call",
    "start": "2432079",
    "end": "2437800"
  },
  {
    "text": "back right so if the user calls the function create user with a node call back it'll call the call back for you",
    "start": "2437800",
    "end": "2443599"
  },
  {
    "text": "it'll take care of it it'll send the error if there's an error it'll send the the first pram being the user if there's",
    "start": "2443599",
    "end": "2448960"
  },
  {
    "text": "a user um or success or whatever um but if there's no call back then it'll just",
    "start": "2448960",
    "end": "2455680"
  },
  {
    "text": "return the promise so people who call your API your create user with no call back will get a promise-based API and",
    "start": "2455680",
    "end": "2461920"
  },
  {
    "text": "they can move forward into the future and use things like es6 generators and all that stuff um and speaking of the",
    "start": "2461920",
    "end": "2467920"
  },
  {
    "text": "future right like you know that's the other fot is no we're stuck with callbacks forever we're we're never going to get promises well you know",
    "start": "2467920",
    "end": "2474520"
  },
  {
    "text": "promises are everywhere they're they're in Ember they're in angular they're in jQuery in a crippled form they're in",
    "start": "2474520",
    "end": "2479960"
  },
  {
    "text": "Dojo they're in everything like and and furthermore just recently promises were added to the Dom spec they have a weird",
    "start": "2479960",
    "end": "2486920"
  },
  {
    "text": "name called Futures and they changed a few words cuz they wanted to feel like they accomplished something instead of just lifting the A+ spec but they are",
    "start": "2486920",
    "end": "2494319"
  },
  {
    "text": "coming to the Dom and it's it's really awesome we're going to have these in our browsers there's active bugs and patches",
    "start": "2494319",
    "end": "2499400"
  },
  {
    "text": "in the Mozilla and webkit trackers to get these working and generators you know they're already here in Firefox but",
    "start": "2499400",
    "end": "2505359"
  },
  {
    "text": "they're also coming to V8 there's a guy that's sponsored to work on them on the on the V8 bug so that means we're going",
    "start": "2505359",
    "end": "2510720"
  },
  {
    "text": "to get them in node and generators plus promises means that you can write the kind of code that we'll see in just the",
    "start": "2510720",
    "end": "2517040"
  },
  {
    "text": "next slide so so promises are very future proof they are the way of the future I'd say and you should probably",
    "start": "2517040",
    "end": "2522800"
  },
  {
    "text": "get on the promise train um so speaking of of the future right here's here's how it's going to",
    "start": "2522800",
    "end": "2528960"
  },
  {
    "text": "look with es6 and generators and promises you're going to take your function and remember the sync code we",
    "start": "2528960",
    "end": "2535880"
  },
  {
    "text": "had that looked pretty nice you can just do a slight wrapper around that and do this q. async which takes a a sync",
    "start": "2535880",
    "end": "2542640"
  },
  {
    "text": "looking function and turns it into one that's a that's an async one that",
    "start": "2542640",
    "end": "2547800"
  },
  {
    "text": "returns a promise so this function even though you were able to write it nicely with like no promise Machinery involved",
    "start": "2547800",
    "end": "2553960"
  },
  {
    "text": "it actually returns a promise and the key is this yield keyword right you're saying yield query and here query is a",
    "start": "2553960",
    "end": "2560240"
  },
  {
    "text": "method that or a function that returns a promise and yield says oh suspend the execution context while that promise",
    "start": "2560240",
    "end": "2565559"
  },
  {
    "text": "comes back if there's an error throw it and if there's a no error then return it",
    "start": "2565559",
    "end": "2571480"
  },
  {
    "text": "return to the function and continue with the rest of the code so because of how generators are these kind of first class",
    "start": "2571480",
    "end": "2577240"
  },
  {
    "text": "co- routines you can write little libraries like this q. async helper which transform generator based code",
    "start": "2577240",
    "end": "2583599"
  },
  {
    "text": "with when combined with promises into something that looks very nice very synchronous you can get all your keywords back not even any of this",
    "start": "2583599",
    "end": "2590040"
  },
  {
    "text": "promise kind of like little little tricks so I think this is really awesome and I'm really looking forward to using",
    "start": "2590040",
    "end": "2595839"
  },
  {
    "text": "this in node I think this will make everybody's life a lot easier so let's talk about something",
    "start": "2595839",
    "end": "2602079"
  },
  {
    "text": "that uh async code should be really really good at right one of the reasons we use async stuff is because we don't",
    "start": "2602079",
    "end": "2607280"
  },
  {
    "text": "want to block anywhere we want to do lots of stuff in uh parallel right we want to we want lots of operations to be",
    "start": "2607280",
    "end": "2614240"
  },
  {
    "start": "2612000",
    "end": "2612000"
  },
  {
    "text": "going on in parallel we want to have M you know many hundreds or thousands of concurrent users accessing our web",
    "start": "2614240",
    "end": "2620400"
  },
  {
    "text": "server all with persistent connections that type of thing right so what do we do how do we do operations in parallel",
    "start": "2620400",
    "end": "2626680"
  },
  {
    "text": "uh using promises so you could imagine a synchronous function that does something",
    "start": "2626680",
    "end": "2631800"
  },
  {
    "text": "like this you know get new tweets for users say you've got an array of user objects you want to get all the new tweets for them you want to essentially",
    "start": "2631800",
    "end": "2638559"
  },
  {
    "text": "return an array of arrays right a multi-dimensional array you might do something like the following right for",
    "start": "2638559",
    "end": "2644119"
  },
  {
    "text": "each of those users uh you want to execute this function called get new tweets and return the result of that um",
    "start": "2644119",
    "end": "2652359"
  },
  {
    "text": "in a promise Library uh most promised libraries ship with this method called all look at the second to last line we",
    "start": "2652359",
    "end": "2659160"
  },
  {
    "text": "say return q. all okay Q uh has this function called all where you can take",
    "start": "2659160",
    "end": "2665000"
  },
  {
    "text": "an array of promises right and in this in this second function on the bottom our get new tweets function instead of",
    "start": "2665000",
    "end": "2671599"
  },
  {
    "text": "returning immediately it returns a promise okay so we've got all these promises and we say",
    "start": "2671599",
    "end": "2676800"
  },
  {
    "text": "Q as soon as all of these promises are resolved I want you to aggregate the results and resolve the promise that you",
    "start": "2676800",
    "end": "2684839"
  },
  {
    "text": "returned to me from the get new tweets for users function okay what's super cool about this is",
    "start": "2684839",
    "end": "2692520"
  },
  {
    "text": "that if any one of those calls fails what happens what do you get back",
    "start": "2692520",
    "end": "2697559"
  },
  {
    "text": "back you just get a rejected promise right can you imagine how crazy that",
    "start": "2697559",
    "end": "2703599"
  },
  {
    "text": "would look like if you were doing it in callback style like callbacks really don't do parallel very",
    "start": "2703599",
    "end": "2711000"
  },
  {
    "text": "well you usually have some sort of a counter which keeps track of whether or not you've called all you returned from",
    "start": "2711000",
    "end": "2716960"
  },
  {
    "text": "all of your asynchronous functions you also have some sort of an aggregator that's uh you know aggregating the",
    "start": "2716960",
    "end": "2723079"
  },
  {
    "text": "results you also usually have uh some sort of a flag that says whether or not you've called the call back um but it's",
    "start": "2723079",
    "end": "2730400"
  },
  {
    "text": "really easy with uh with promises um so that's executing results in parallel one thing that's really",
    "start": "2730400",
    "end": "2737040"
  },
  {
    "start": "2735000",
    "end": "2735000"
  },
  {
    "text": "really cool is because of this error propagation that you get back it makes it really easy to build fault tolerant",
    "start": "2737040",
    "end": "2743720"
  },
  {
    "text": "things like I don't know servers right when I when I I first I watched the uh",
    "start": "2743720",
    "end": "2751440"
  },
  {
    "text": "the JS Compu talk that Ryan do gave about node where he was like talking about node for the very very first time",
    "start": "2751440",
    "end": "2757000"
  },
  {
    "text": "it was awesome because he was like node is a really easy way to build high",
    "start": "2757000",
    "end": "2762960"
  },
  {
    "text": "performance servers right that was the thing like that was why node was created was to build servers um so in an environment like",
    "start": "2762960",
    "end": "2770880"
  },
  {
    "text": "node where you're building servers it's really nice to have this error",
    "start": "2770880",
    "end": "2776920"
  },
  {
    "text": "propagation um so that you don't have errors you know crashing your",
    "start": "2776920",
    "end": "2782040"
  },
  {
    "text": "program um you know what's funny about this example example right here actually is",
    "start": "2782040",
    "end": "2788440"
  },
  {
    "text": "that uh Dominic and I both kind of came to this uh this example this kind of",
    "start": "2788440",
    "end": "2795880"
  },
  {
    "text": "conclusion completely independently of one another right um let's take a look",
    "start": "2795880",
    "end": "2801200"
  },
  {
    "text": "at this code and kind of dissect what it's doing and you you might have written an HTTP server in node and kind of had this problem right what happens",
    "start": "2801200",
    "end": "2808200"
  },
  {
    "text": "when you have an error somewhere further down the stack right how do you how do",
    "start": "2808200",
    "end": "2813440"
  },
  {
    "text": "you not crash your server but at the same time you know G give a response to",
    "start": "2813440",
    "end": "2819359"
  },
  {
    "text": "that client to let to let them know like something happened in this case a 500 error page right um let's so the the you",
    "start": "2819359",
    "end": "2828680"
  },
  {
    "text": "know the first couple of lines are pretty standard node boiler plate for creating an HTTP server in this case",
    "start": "2828680",
    "end": "2834680"
  },
  {
    "text": "we've got a handle request function okay that thing returns a promise right we",
    "start": "2834680",
    "end": "2841440"
  },
  {
    "text": "say then we've got two handlers we've we the first one handles an actual response",
    "start": "2841440",
    "end": "2846920"
  },
  {
    "text": "let's pretend it's an object that has status headers and content properties and we can just return those in the",
    "start": "2846920",
    "end": "2852119"
  },
  {
    "text": "response or in the case that it's an error we want to know about it log it to",
    "start": "2852119",
    "end": "2857240"
  },
  {
    "text": "the console but we still want to return a response right so give them a 500",
    "start": "2857240",
    "end": "2862280"
  },
  {
    "text": "right uh and then and then the last line is just setting up the server and binding it to a port",
    "start": "2862280",
    "end": "2868079"
  },
  {
    "text": "3,000 does this make sense is this a real world problem that people are running into because I'm I ran into this",
    "start": "2868079",
    "end": "2874040"
  },
  {
    "text": "problem and I using callbacks uh I didn't have any way to propagate the error all the way back to the top of",
    "start": "2874040",
    "end": "2881839"
  },
  {
    "text": "the stack once I was deep into my call back stack I didn't have any way to say oh here's an error return a 500 to the",
    "start": "2881839",
    "end": "2889880"
  },
  {
    "text": "to the user right that make sense anything you want to add to this piece yeah I just want to reiterate yeah we",
    "start": "2889880",
    "end": "2896920"
  },
  {
    "text": "totally you know came to this problem at in the same way you know I I was working on a a pretty large web service for",
    "start": "2896920",
    "end": "2903359"
  },
  {
    "text": "Barnes & noble.com and you know this is exactly the problem we had is you know how do we deal with errors in our server",
    "start": "2903359",
    "end": "2910440"
  },
  {
    "text": "in in a way that isolates them to the user but we were very used to promises from our client side work and this is",
    "start": "2910440",
    "end": "2915480"
  },
  {
    "text": "exactly what we wanted like we wanted the ability to say oh deep down in the when we've done the database lookup and",
    "start": "2915480",
    "end": "2921440"
  },
  {
    "text": "the user exists but we're looking up the bucket and there's no no file in it then we got to propagate up at 404 well we",
    "start": "2921440",
    "end": "2928800"
  },
  {
    "text": "didn't have to you know save a reference all the way to the top of the call stack or trying and use domains and like get in trouble because of connection pooling",
    "start": "2928800",
    "end": "2935599"
  },
  {
    "text": "you know we we instead we just threw an error inside our promise chain and because it's inside a promise chain the",
    "start": "2935599",
    "end": "2941079"
  },
  {
    "text": "promise chain knows oh he threw a 404 error let me propagate that right back up and it's this exact kind of thing",
    "start": "2941079",
    "end": "2946920"
  },
  {
    "text": "that like is perfect for web servers where you have this kind of functional style where you know oh I received some",
    "start": "2946920",
    "end": "2952119"
  },
  {
    "text": "input I'd like to give you back some output and that output might be a return value or it might be an exception so",
    "start": "2952119",
    "end": "2957680"
  },
  {
    "text": "that's exactly what you want is I mean then there's a blog post making the rounds recently that promises are are",
    "start": "2957680",
    "end": "2962720"
  },
  {
    "text": "functional and callbacks are imperative this is web servers are pretty perfect match for the functional Paradigm right",
    "start": "2962720",
    "end": "2969280"
  },
  {
    "text": "they're they're stateless they're input you get output and this is exactly what you want",
    "start": "2969280",
    "end": "2975720"
  },
  {
    "text": "so so we're we're just about done uh just one last note if you're interested in writing HTTP servers like that I've",
    "start": "2975720",
    "end": "2982160"
  },
  {
    "text": "been playing around with um some just some other guys on on some ideas around",
    "start": "2982160",
    "end": "2988040"
  },
  {
    "text": "writing uh promise-based HTTP servers uh there's a library that we're calling mock it might be you know it's not fully",
    "start": "2988040",
    "end": "2994920"
  },
  {
    "text": "specified yet there's still a lot of like things we still have to hash out but I've been using it I've been",
    "start": "2994920",
    "end": "3000680"
  },
  {
    "text": "programming with it it feels really good um and pretty good performance too is what we've got on it so um so anyways",
    "start": "3000680",
    "end": "3007960"
  },
  {
    "text": "thank you and and if you have any questions please Denny Cola d n i c o o",
    "start": "3007960",
    "end": "3017580"
  },
  {
    "text": "[Music]",
    "start": "3017580",
    "end": "3026050"
  }
]