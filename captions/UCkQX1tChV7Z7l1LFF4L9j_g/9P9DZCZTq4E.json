[
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "15680"
  },
  {
    "text": "today I'd like to talk about project Loom a very new and exciting initiative",
    "start": "15680",
    "end": "21180"
  },
  {
    "text": "that will land eventually in the Java virtual machine but most importantly I",
    "start": "21180",
    "end": "27300"
  },
  {
    "text": "would like to briefly explain whether it's going to be a revolution in the way we write concurrent software or maybe",
    "start": "27300",
    "end": "34559"
  },
  {
    "text": "it's just some implementation detail that's going to be important for framework or Library developers but we",
    "start": "34559",
    "end": "40920"
  },
  {
    "text": "won't really see it in real life so let's move on so the first question is",
    "start": "40920",
    "end": "46860"
  },
  {
    "text": "what is Project Loom and the the question I give you in the in the in the subtitle is that whoever is going to be",
    "start": "46860",
    "end": "53340"
  },
  {
    "text": "a revolution or just an obscure implementation detail my name is Thomas lurkiewicz and let's move on so the the",
    "start": "53340",
    "end": "61800"
  },
  {
    "text": "very quick agenda is that first of all we would like to understand how we can create millions of threads using project",
    "start": "61800",
    "end": "69060"
  },
  {
    "text": "Loom this is kind of an overstatement but in general this will be possible with project Loom as you probably know",
    "start": "69060",
    "end": "75180"
  },
  {
    "text": "these days it's only possible to create hundreds maybe thousands of threats definitely not Millions but this is what",
    "start": "75180",
    "end": "82740"
  },
  {
    "text": "project Loom unlocks in the Java virtual machine and this is mainly possible by",
    "start": "82740",
    "end": "90119"
  },
  {
    "text": "allowing you to block and sleep everywhere without paying too much attention to it so blocking sleeping or",
    "start": "90119",
    "end": "96540"
  },
  {
    "text": "any other locking mechanisms were typically quite expensive in terms of the number of threads we could create",
    "start": "96540",
    "end": "102060"
  },
  {
    "text": "these days it's probably be gonna it's probably gonna be very very safe and",
    "start": "102060",
    "end": "107340"
  },
  {
    "text": "easy and the last but the most important question is how is it going to impact us",
    "start": "107340",
    "end": "113159"
  },
  {
    "text": "developers is it actually be so worth so worthwhile worthwhile or maybe it's just",
    "start": "113159",
    "end": "119399"
  },
  {
    "text": "something that's buried deeply in the virtual machine and it's not really that much needed alright so let's move on",
    "start": "119399",
    "end": "127500"
  },
  {
    "text": "before we actually explain what is Project Loom we must understand what is a threat in Java and I know it sounds",
    "start": "127500",
    "end": "133920"
  },
  {
    "text": "really basic but it turns out there's not much much more into it so first of all a threat in Java is called the user",
    "start": "133920",
    "end": "141180"
  },
  {
    "text": "thread so essentially what we do is that we just create an object of type thread we pass in a piece of code and when we",
    "start": "141180",
    "end": "148800"
  },
  {
    "text": "start such a thread here on line two This Thread will run somewhere in the",
    "start": "148800",
    "end": "154260"
  },
  {
    "text": "background so the virtual machine will make sure that our current flow of execution can continue but it is",
    "start": "154260",
    "end": "161519"
  },
  {
    "text": "separate threat actually runs somewhere so at this point in time we have two",
    "start": "161519",
    "end": "166560"
  },
  {
    "text": "separate execution paths running at the same time concurrently the last line is",
    "start": "166560",
    "end": "173760"
  },
  {
    "text": "joining it essentially means that we are waiting for this background task to finish this is not typically what we do",
    "start": "173760",
    "end": "180540"
  },
  {
    "text": "typically we want two things to run concurrently so this is a user thread but there's also the concept of a kernel",
    "start": "180540",
    "end": "187140"
  },
  {
    "text": "with thread that so a kernel thread is something that is actually scheduled by your operating system I will stick to",
    "start": "187140",
    "end": "193620"
  },
  {
    "text": "Linux because that's probably what you use in production so with the Linux operating system",
    "start": "193620",
    "end": "200000"
  },
  {
    "text": "when you start a kernel thread it is actually the operating system's",
    "start": "200000",
    "end": "205080"
  },
  {
    "text": "responsibility to make sure all kernel threads can run concurrently and that",
    "start": "205080",
    "end": "210959"
  },
  {
    "text": "they are nicely sharing system resources like memory and and CPU so for example",
    "start": "210959",
    "end": "217200"
  },
  {
    "text": "when a kernel thread runs for too long it will be pre-emptied so that other threads can take over so it kind of more",
    "start": "217200",
    "end": "225900"
  },
  {
    "text": "or less voluntarily can give up the CPU and other threads may use that CPU it's",
    "start": "225900",
    "end": "232560"
  },
  {
    "text": "much easier when you have multiple CPUs but most of the time and this is almost always the case you will never have as",
    "start": "232560",
    "end": "240299"
  },
  {
    "text": "many CPUs as many kernel threads are running so they have there there has to be some coordination mechanism and this",
    "start": "240299",
    "end": "247019"
  },
  {
    "text": "mechanism happens in the operating system level all right so user threads and kernel threads aren't actually the",
    "start": "247019",
    "end": "254280"
  },
  {
    "text": "same thing so user user threads are created by the jvm every time you say new thread dot start and kernel threads",
    "start": "254280",
    "end": "262380"
  },
  {
    "text": "are created and managed by the kernel that's kind of that's kind of obvious and this is not the same thing so in the",
    "start": "262380",
    "end": "271020"
  },
  {
    "text": "very prehistoric days in the in in the very beginning of the Java platform",
    "start": "271020",
    "end": "276479"
  },
  {
    "text": "there used to be this this this mechanism called many two one the many",
    "start": "276479",
    "end": "282360"
  },
  {
    "text": "to one model in the many two one model the jvm was actually creating user",
    "start": "282360",
    "end": "287520"
  },
  {
    "text": "threads so every time you you set new thread.start a jvm was creating a new",
    "start": "287520",
    "end": "293100"
  },
  {
    "text": "user thread however these threads were actually all of them were actually mapped to a single kernel thread meaning",
    "start": "293100",
    "end": "301380"
  },
  {
    "text": "that the jvm was only utilizing a single thread in your operating system and it",
    "start": "301380",
    "end": "307440"
  },
  {
    "text": "was doing all the scheduling so making sure your user threads are",
    "start": "307440",
    "end": "313100"
  },
  {
    "text": "effectively using the CPU all of this was done inside the jvm so the jvm from",
    "start": "313100",
    "end": "319800"
  },
  {
    "text": "the outside was only using a single kernel thread which means only a single CPU but internally it was doing all this",
    "start": "319800",
    "end": "327180"
  },
  {
    "text": "back and forth switching between threads also known as context switching it was doing it for uh for ourselves there was",
    "start": "327180",
    "end": "335400"
  },
  {
    "text": "also this rather obscure many-to-many model in which case you had multiple user threads typically a smaller number",
    "start": "335400",
    "end": "342660"
  },
  {
    "text": "of Kernel threads and the jvm was doing kind of mapping in between between all of these however luckily the the the",
    "start": "342660",
    "end": "350759"
  },
  {
    "text": "Java virtual machine Engineers realized that there's not much point in kind of",
    "start": "350759",
    "end": "356340"
  },
  {
    "text": "duplicating the scheduling mechanism because the operating system like Linux already has all the facilities to share",
    "start": "356340",
    "end": "365340"
  },
  {
    "text": "threads share CPUs and threads um with each other so they came up with",
    "start": "365340",
    "end": "371039"
  },
  {
    "text": "a one to one model and with that model every single time you create a user",
    "start": "371039",
    "end": "376740"
  },
  {
    "text": "thread in your jvm it actually creates a kernel thread there is one two one",
    "start": "376740",
    "end": "382139"
  },
  {
    "text": "mapping which means effectively if you create 100 threads and the jvm you",
    "start": "382139",
    "end": "387539"
  },
  {
    "text": "create 100 kernel resources 100 kernel threads that are managed by the kernel",
    "start": "387539",
    "end": "393180"
  },
  {
    "text": "itself and this has some other interesting side effects for example threat priorities in the jvm are",
    "start": "393180",
    "end": "400560"
  },
  {
    "text": "effectively ignored because the priorities are actually handled by the operating system and you cannot",
    "start": "400560",
    "end": "407220"
  },
  {
    "text": "um you cannot do much about them all right so it turns out that user threads",
    "start": "407220",
    "end": "412380"
  },
  {
    "text": "are actually kernel threads these days and to prove you that to prove you that",
    "start": "412380",
    "end": "417660"
  },
  {
    "text": "that's the case I just check that for example jstack utility that shows you",
    "start": "417660",
    "end": "422759"
  },
  {
    "text": "the stack trace of your jvm and besides the actual stock it actually",
    "start": "422759",
    "end": "427800"
  },
  {
    "text": "shows quite quite a few interesting properties of your of your threads for",
    "start": "427800",
    "end": "433620"
  },
  {
    "text": "example for example it shows you the the thread ID and so-called native ID and",
    "start": "433620",
    "end": "439380"
  },
  {
    "text": "turns out this these IDs are actually known by the operating system so if you",
    "start": "439380",
    "end": "446280"
  },
  {
    "text": "know the operating systems utility called top which is a built-in one it has a switch Dash Capital H and with the",
    "start": "446280",
    "end": "453960"
  },
  {
    "text": "capital H switch it actually shows individual threads rather than processes",
    "start": "453960",
    "end": "459259"
  },
  {
    "text": "this might be a little bit surprising after all why does this top utility That",
    "start": "459259",
    "end": "465300"
  },
  {
    "text": "was supposed to be showing which processes are consuming your CPU why does it have a switch to show you the uh",
    "start": "465300",
    "end": "473220"
  },
  {
    "text": "to show you the actual actual threads it doesn't seem to make much sense however",
    "start": "473220",
    "end": "478500"
  },
  {
    "text": "it turns out first of all it's very it actually it's very easy with that tool",
    "start": "478500",
    "end": "483900"
  },
  {
    "text": "to show you the actual Java threats so rather than showing a single process",
    "start": "483900",
    "end": "489240"
  },
  {
    "text": "single Java process you see all Java threads in the output and more",
    "start": "489240",
    "end": "494520"
  },
  {
    "text": "importantly you can actually see what is the amount of CPU consumed by each and",
    "start": "494520",
    "end": "500340"
  },
  {
    "text": "every of these threads so this is kind of useful but why is that the case does",
    "start": "500340",
    "end": "505620"
  },
  {
    "text": "it mean that Linux has some special support for for Java well definitely not because it turns out that not only",
    "start": "505620",
    "end": "513240"
  },
  {
    "text": "user threats on your jvm are seen as kernel threads by your operating system",
    "start": "513240",
    "end": "519240"
  },
  {
    "text": "and on your Java versions even thread names are visible to your Linux operating system but even more",
    "start": "519240",
    "end": "525899"
  },
  {
    "text": "interestingly from the kernel point of view there's no such thing as a thread versus process",
    "start": "525899",
    "end": "532820"
  },
  {
    "text": "actually all of these are called tasks and this is just a basic unit of um kind",
    "start": "532820",
    "end": "539580"
  },
  {
    "text": "of scheduling in the operating system so the only difference between them is just a single flag uh when you when you're",
    "start": "539580",
    "end": "545399"
  },
  {
    "text": "creating a a thread rather than a process when you're creating a new thread it shares the same memory with",
    "start": "545399",
    "end": "551580"
  },
  {
    "text": "the parent thread when you're creating a new process it does not so it's just a matter of like a single bit when when",
    "start": "551580",
    "end": "558060"
  },
  {
    "text": "choosing between them from the operating systems perspective every time you create a Java thread you are creating a",
    "start": "558060",
    "end": "564240"
  },
  {
    "text": "kernel thread which is kind of I'm I'm overstating here but in some sense you",
    "start": "564240",
    "end": "571560"
  },
  {
    "text": "are actually creating a new process so this kind of give this may actually give you some some kind of overview like how",
    "start": "571560",
    "end": "578000"
  },
  {
    "text": "heavyweight Java threads actually are so first of",
    "start": "578000",
    "end": "584820"
  },
  {
    "text": "all these are they are kernel resources but more important only every Java thread in every thread you create in",
    "start": "584820",
    "end": "591540"
  },
  {
    "text": "your Java virtual machine consumes more or less around one megabyte of of memory",
    "start": "591540",
    "end": "597180"
  },
  {
    "text": "and it's outside of Heap so no matter how much Heap you allocate you also have to add so you have to factor out the",
    "start": "597180",
    "end": "604380"
  },
  {
    "text": "extra memory consumed by your by your threads so this is actually a significant cost every time you create a",
    "start": "604380",
    "end": "611279"
  },
  {
    "text": "threat that's why we have thread pulls that's why we were taught not to create too many threads on your jvm because the",
    "start": "611279",
    "end": "618300"
  },
  {
    "text": "context switching and the memory consumption will kill us and so on and so forth and this is where project Loom",
    "start": "618300",
    "end": "627180"
  },
  {
    "text": "shines so keep in mind that this is still work in progress so everything can change and if you watch this presentation after a year some things",
    "start": "627180",
    "end": "634740"
  },
  {
    "text": "may not actually be so so accurate but I'm just giving you a brief overview of how this project looks like so",
    "start": "634740",
    "end": "641700"
  },
  {
    "text": "essentially the the goal of the project is to allow creating millions of threads",
    "start": "641700",
    "end": "647940"
  },
  {
    "text": "and this is kind of an advert advertising talk because like it probably won't create as many but",
    "start": "647940",
    "end": "654360"
  },
  {
    "text": "technically it is possible and I can run millions of threads on this particular laptop so how is it achieved first of",
    "start": "654360",
    "end": "661260"
  },
  {
    "text": "all there's this concept of a virtual thread so a virtual thread is very",
    "start": "661260",
    "end": "666540"
  },
  {
    "text": "lightweight it's cheap and it's a user thread and by lightweight I mean you can",
    "start": "666540",
    "end": "672120"
  },
  {
    "text": "like really allocate millions of them without using too much memory so there's",
    "start": "672120",
    "end": "677880"
  },
  {
    "text": "a virtual threat but secondly there's also a carrier threat so a carrier",
    "start": "677880",
    "end": "683339"
  },
  {
    "text": "threat is the real one it's the kernel one that's actually running your virtual",
    "start": "683339",
    "end": "688380"
  },
  {
    "text": "threads so of course the bottom line is that you can run a lot of virtual",
    "start": "688380",
    "end": "693480"
  },
  {
    "text": "threads sharing the same carrier thread so in",
    "start": "693480",
    "end": "698519"
  },
  {
    "text": "some sense it's like an implementation of an actor system where you have millions of actors using a small pool of",
    "start": "698519",
    "end": "705360"
  },
  {
    "text": "threads so all of this can be achieved using a so-called continuation so continuation is",
    "start": "705360",
    "end": "712279"
  },
  {
    "text": "kind of a programming construct that was put into the jvm like at the very heart",
    "start": "712279",
    "end": "718560"
  },
  {
    "text": "of the jvm and it actually has a SIM there are actually similar Concept in",
    "start": "718560",
    "end": "724740"
  },
  {
    "text": "different languages but we'll get into continuations in in a second but continuation this software construct is",
    "start": "724740",
    "end": "731040"
  },
  {
    "text": "the thing that allows multiple virtual threads to seamlessly run on a very few",
    "start": "731040",
    "end": "737459"
  },
  {
    "text": "carrier threats the one that are actually operated by your Linux system",
    "start": "737459",
    "end": "744720"
  },
  {
    "text": "so I will not go into the API too much because it's subject to change as you",
    "start": "744720",
    "end": "750420"
  },
  {
    "text": "can see it's actually and it's actually very very fairly simple you essentially say threads.start virtual thread as",
    "start": "750420",
    "end": "758100"
  },
  {
    "text": "opposed to like new new thread or starting a platform thread so a platform",
    "start": "758100",
    "end": "763320"
  },
  {
    "text": "thread is uh is your old typical user threads that's actually a kernel threat",
    "start": "763320",
    "end": "769079"
  },
  {
    "text": "but we're talking about virtual threads here so you can create a thread from scratch you can create it using a",
    "start": "769079",
    "end": "775079"
  },
  {
    "text": "builder method whatever you can also create a very um kind of a weird executive service and",
    "start": "775079",
    "end": "781860"
  },
  {
    "text": "this executor service doesn't actually pull threats so typically executor service has a pool of threads that can",
    "start": "781860",
    "end": "788399"
  },
  {
    "text": "be reused in case of new virtual threat executor it creates a new virtual thread",
    "start": "788399",
    "end": "793740"
  },
  {
    "text": "every time you submit a task so it's not really a threat pool per se and you can",
    "start": "793740",
    "end": "800639"
  },
  {
    "text": "also create a threat Factory just so that if you need it in some sort of API AI but this thread Factory just creates",
    "start": "800639",
    "end": "807779"
  },
  {
    "text": "virtual threats so that's very very simple API but the API is not the",
    "start": "807779",
    "end": "812880"
  },
  {
    "text": "important part I would like you to actually understand what happens underneath and what kind of Impact May it have on your code basis so a virtual",
    "start": "812880",
    "end": "820680"
  },
  {
    "text": "thread I I really like this explanation it's essentially a continuation plus scheduler so a scheduler is a pool of",
    "start": "820680",
    "end": "827820"
  },
  {
    "text": "physical called carrier threads that are running your virtual threads and",
    "start": "827820",
    "end": "833639"
  },
  {
    "text": "typically as scheduler is just a fork joint pool with a handful of threads so you don't need more than one two four",
    "start": "833639",
    "end": "840899"
  },
  {
    "text": "maybe eight carrier threads because they are very um they they use the CPU very",
    "start": "840899",
    "end": "848940"
  },
  {
    "text": "effectively so every time a virtual thread no longer needs a CPU it will just give up and the scheduler it would",
    "start": "848940",
    "end": "855779"
  },
  {
    "text": "just will no longer use a thread from that scheduler and another virtual thread",
    "start": "855779",
    "end": "861899"
  },
  {
    "text": "will kick in so that's the first mechanism but how how does the virtual threat and the scheduler know that the",
    "start": "861899",
    "end": "869100"
  },
  {
    "text": "virtual threat no longer needs a scheduler and this is where continuations come into play so this is",
    "start": "869100",
    "end": "876420"
  },
  {
    "text": "a fairly convoluted um explanation essentially a continuation",
    "start": "876420",
    "end": "881880"
  },
  {
    "text": "is kind of a piece of code that can suspend itself at any moment in time and",
    "start": "881880",
    "end": "889920"
  },
  {
    "text": "then it can be resumed later on typically on a different thread so you",
    "start": "889920",
    "end": "897180"
  },
  {
    "text": "can kind of freeze freeze your your piece of code and then you can unlock it",
    "start": "897180",
    "end": "903300"
  },
  {
    "text": "or you can unhibernate it you can wake it up on a different on a different",
    "start": "903300",
    "end": "909240"
  },
  {
    "text": "different moment in time and preferably even on a different thread and this is",
    "start": "909240",
    "end": "915540"
  },
  {
    "text": "kind of a software construct that's built into the jvm or that will be built into the jvm so let's look at it let's",
    "start": "915540",
    "end": "922500"
  },
  {
    "text": "look into a very simple pseudocode here so this is a main function that calls food then Focus bar and there's nothing",
    "start": "922500",
    "end": "930600"
  },
  {
    "text": "really exciting here except from the fact that the full function is wrapped in a continuation so wrapping a function",
    "start": "930600",
    "end": "938339"
  },
  {
    "text": "in a continuation doesn't really run that function it just wraps a Lambda expression nothing to nothing specific",
    "start": "938339",
    "end": "945600"
  },
  {
    "text": "to see here however if I now run the continuation so if I call run on that",
    "start": "945600",
    "end": "951420"
  },
  {
    "text": "object I will no surprise here go into Foo function and it will continue",
    "start": "951420",
    "end": "956940"
  },
  {
    "text": "running so it runs the first line and then goes to Bar Method it goes to bar",
    "start": "956940",
    "end": "963320"
  },
  {
    "text": "and bar function it continues running but then on line 16 something really",
    "start": "963320",
    "end": "969060"
  },
  {
    "text": "exciting and interesting happens so the function bar voluntarily says it would like to",
    "start": "969060",
    "end": "975779"
  },
  {
    "text": "suspend itself so the code says that it no longer wishes to run for some bizarre reason it",
    "start": "975779",
    "end": "983579"
  },
  {
    "text": "no longer wishes to use the the CPU the carrier thread so what happens now is",
    "start": "983579",
    "end": "989639"
  },
  {
    "text": "that we jump directly back to line four as if it was an exception of some kind",
    "start": "989639",
    "end": "996060"
  },
  {
    "text": "so we jump to line four we continue running the continuation is suspended and then we move on and in line five we",
    "start": "996060",
    "end": "1003980"
  },
  {
    "text": "run the continuation once again will it run the foo function once more not really it will jump straight to line 17",
    "start": "1003980",
    "end": "1012459"
  },
  {
    "text": "which essentially means we are continuing from the place we left off",
    "start": "1012459",
    "end": "1018500"
  },
  {
    "text": "and this is really kind of surprising but also it means we can take any piece",
    "start": "1018500",
    "end": "1023600"
  },
  {
    "text": "of code it could it could be running a loop it can be it could be doing some recursive function whatever and we can",
    "start": "1023600",
    "end": "1030620"
  },
  {
    "text": "all the time and every time we want we can suspend it and then bring it back to",
    "start": "1030620",
    "end": "1036620"
  },
  {
    "text": "life and this is the found nation of project Lumen continuations are actually useful even without multi-threading but",
    "start": "1036620",
    "end": "1044000"
  },
  {
    "text": "that's a different story so continuations that you see that you see",
    "start": "1044000",
    "end": "1050179"
  },
  {
    "text": "here are actually quite common in different languages so you have core routines or go routines and in languages",
    "start": "1050179",
    "end": "1055940"
  },
  {
    "text": "like kotlin and go you have async await in JavaScript you have generators in python or fibers in Ruby all of these",
    "start": "1055940",
    "end": "1063980"
  },
  {
    "text": "are actually very similar Concepts which are finely brought into the jvm so how",
    "start": "1063980",
    "end": "1072260"
  },
  {
    "text": "what what kind of difference does it make so let's see how thread sleep is implemented it used to be simply a",
    "start": "1072260",
    "end": "1079160"
  },
  {
    "text": "function that's just like blocks your current thread so that it still exists on your operating system however it no",
    "start": "1079160",
    "end": "1087559"
  },
  {
    "text": "longer uh it no longer runs so it will be woken up by your operating system and the new",
    "start": "1087559",
    "end": "1094760"
  },
  {
    "text": "version that takes advantage of virtual threats notice that if you are currently running a virtual threat some kind of a",
    "start": "1094760",
    "end": "1101780"
  },
  {
    "text": "different piece of code is run and this piece of code is quite interesting because what it does is surprise calls",
    "start": "1101780",
    "end": "1108679"
  },
  {
    "text": "yield functions so it suspends itself it voluntarily says that it no longer",
    "start": "1108679",
    "end": "1114860"
  },
  {
    "text": "wishes to run because we asked that thread to sleep and that's kind of and",
    "start": "1114860",
    "end": "1120320"
  },
  {
    "text": "that's kind of interesting but why is that well before we actually yield we SC",
    "start": "1120320",
    "end": "1125600"
  },
  {
    "text": "we schedule on parking so and parking or waking up means basically that we would",
    "start": "1125600",
    "end": "1132260"
  },
  {
    "text": "like ourselves to be woken up after a certain period of time so we before we",
    "start": "1132260",
    "end": "1138200"
  },
  {
    "text": "put ourselves to sleep we are scheduling a kind of an alarm clock and this",
    "start": "1138200",
    "end": "1143720"
  },
  {
    "text": "scheduling will uh will wake us up so it will continue running our thread it will",
    "start": "1143720",
    "end": "1151160"
  },
  {
    "text": "continue running our continuation after a certain time passes by but in between",
    "start": "1151160",
    "end": "1156860"
  },
  {
    "text": "calling the sleep function and actually being woken up our threat no longer our",
    "start": "1156860",
    "end": "1162740"
  },
  {
    "text": "virtual threat no longer consumes the CPU so at this point the carrier threat",
    "start": "1162740",
    "end": "1169160"
  },
  {
    "text": "is free to run another virtual threat so technically you can have millions of",
    "start": "1169160",
    "end": "1175340"
  },
  {
    "text": "virtual threads that are sleeping without really paying that much in terms",
    "start": "1175340",
    "end": "1181340"
  },
  {
    "text": "of the memory consumption all right so this is our hello world and",
    "start": "1181340",
    "end": "1186380"
  },
  {
    "text": "this is kind of overblown because everyone says millions of threads and I keep saying that as well but yeah that's",
    "start": "1186380",
    "end": "1192440"
  },
  {
    "text": "the piece of code that you can run even right now uh you can download project Loom with Java 18 or Java 19 if you are",
    "start": "1192440",
    "end": "1199580"
  },
  {
    "text": "Cutting Edge at the moment and and and and just see how it works there is a count variable if you put 1 million it",
    "start": "1199580",
    "end": "1206480"
  },
  {
    "text": "will actually start 1 million threads and your laptop will not melt and your system will not hang it will simply just",
    "start": "1206480",
    "end": "1213620"
  },
  {
    "text": "create these millions of threads but as you already know there's no magic here",
    "start": "1213620",
    "end": "1218660"
  },
  {
    "text": "because what actually happens is that you we we created one million virtual threads which are not kernel threads so",
    "start": "1218660",
    "end": "1225919"
  },
  {
    "text": "we are not spamming our operating system with with uh with millions of Kernel",
    "start": "1225919",
    "end": "1230960"
  },
  {
    "text": "threads but the only thing that these kernel threats are doing is actually just scheduling or like kind of going to",
    "start": "1230960",
    "end": "1239179"
  },
  {
    "text": "sleep but before they do it they schedule themselves elves to be woken up",
    "start": "1239179",
    "end": "1245780"
  },
  {
    "text": "after a certain time so technically this particular example could easily be",
    "start": "1245780",
    "end": "1250820"
  },
  {
    "text": "implemented with just a scheduled executor service having a bunch of threats and one million tasks submitted",
    "start": "1250820",
    "end": "1257360"
  },
  {
    "text": "to that executor there's not much difference so as you can see there is no magic here it's just that the API",
    "start": "1257360",
    "end": "1264640"
  },
  {
    "text": "finally allows us to build in a much different much easier",
    "start": "1264640",
    "end": "1271340"
  },
  {
    "text": "way so uh here's a here's a here's another code snippet of the carrier",
    "start": "1271340",
    "end": "1276679"
  },
  {
    "text": "threads the API may change but the the thing I wanted to show you is that every time you create a virtual thread we you",
    "start": "1276679",
    "end": "1283220"
  },
  {
    "text": "are actually three two you're actually allowed to define a carrier executor and",
    "start": "1283220",
    "end": "1289520"
  },
  {
    "text": "in our case I just created an Executor with just one thread and even with just a single thread single carriers of",
    "start": "1289520",
    "end": "1296539"
  },
  {
    "text": "single kernel thread you can run millions of threads as long as they",
    "start": "1296539",
    "end": "1303860"
  },
  {
    "text": "don't consume the CPU all the time because well after all project Loom will",
    "start": "1303860",
    "end": "1309080"
  },
  {
    "text": "not magically scale your CPU so that it can perform more work it's just a",
    "start": "1309080",
    "end": "1315200"
  },
  {
    "text": "different API it's just a different way of defining tasks that for most of the",
    "start": "1315200",
    "end": "1320659"
  },
  {
    "text": "time are not doing much so they are sleeping blocked on a synchronization",
    "start": "1320659",
    "end": "1326360"
  },
  {
    "text": "mechanism or wake taking on iO so once again there's no magic here it's just a",
    "start": "1326360",
    "end": "1333380"
  },
  {
    "text": "it's just a different way of Performing or developing software and there's also",
    "start": "1333380",
    "end": "1338900"
  },
  {
    "text": "another kind of a different um different different algorithm or kind of",
    "start": "1338900",
    "end": "1344240"
  },
  {
    "text": "a different initiative and coming as part of project Bloom cards called structured concurrency it's actually",
    "start": "1344240",
    "end": "1350360"
  },
  {
    "text": "fairly simple there's not much to to say here essentially it allows us to create an executive service that waits for all",
    "start": "1350360",
    "end": "1357500"
  },
  {
    "text": "tasks that were submitted to it in a try with resources block this is just a a",
    "start": "1357500",
    "end": "1364460"
  },
  {
    "text": "minor addition to the API and it may change so I'm not going to spend too much time on it the the reason I'm so",
    "start": "1364460",
    "end": "1371480"
  },
  {
    "text": "excited about project Loom is that finally we do not have to think about",
    "start": "1371480",
    "end": "1376840"
  },
  {
    "text": "threads so when you're developing when you're building a server when you're building a web application when you're",
    "start": "1376840",
    "end": "1382520"
  },
  {
    "text": "building an iot device whatever you no longer have to think about pooling",
    "start": "1382520",
    "end": "1387860"
  },
  {
    "text": "threads about cues in front of a thread pool at this point all you have to do is",
    "start": "1387860",
    "end": "1394100"
  },
  {
    "text": "just creating threads every single time you want to and",
    "start": "1394100",
    "end": "1399679"
  },
  {
    "text": "um it works as long as these threads are not doing too much work because otherwise you just need more Hardware",
    "start": "1399679",
    "end": "1405500"
  },
  {
    "text": "there is no and there's nothing special here but if you have millions of threads",
    "start": "1405500",
    "end": "1410780"
  },
  {
    "text": "or let's stick to thousands or hundreds of thousands if you have a ton of threads and that are not doing much",
    "start": "1410780",
    "end": "1418460"
  },
  {
    "text": "they're just waiting for data to arrive or they are just locked on a synchronization mechanism waiting for I",
    "start": "1418460",
    "end": "1425960"
  },
  {
    "text": "don't know a semaphore or countdown latch whatever then project Loom works really well because it a lot and we no",
    "start": "1425960",
    "end": "1433940"
  },
  {
    "text": "longer have to think about this low level abstraction of a threat we can now simply create a thread every time for",
    "start": "1433940",
    "end": "1440360"
  },
  {
    "text": "every time we have a business use case for that so there is no kind of a leaky",
    "start": "1440360",
    "end": "1446059"
  },
  {
    "text": "obstruction of expensive threats because they are no longer expensive and as they",
    "start": "1446059",
    "end": "1451460"
  },
  {
    "text": "can as you can probably tell it's fairly easy to implement an actor system like",
    "start": "1451460",
    "end": "1456620"
  },
  {
    "text": "akka using virtual threads because essentially what you do is you create a new actor which is backed by a virtual",
    "start": "1456620",
    "end": "1464360"
  },
  {
    "text": "threat there is no extra level of complexity that arises from the fact that a large number of actors has to",
    "start": "1464360",
    "end": "1473299"
  },
  {
    "text": "share a small number of um of of threats",
    "start": "1473299",
    "end": "1479240"
  },
  {
    "text": "all right so a few use cases that are actually insane these days but there",
    "start": "1479240",
    "end": "1485000"
  },
  {
    "text": "will be maybe useful to some people when product Loom arrives for example let's say you want to run something after",
    "start": "1485000",
    "end": "1490940"
  },
  {
    "text": "eight hours so you need a very simple scheduling mechanism doing it this way",
    "start": "1490940",
    "end": "1497120"
  },
  {
    "text": "without project Loom is actually just crazy so creating a thread and then",
    "start": "1497120",
    "end": "1502159"
  },
  {
    "text": "sleeping for eight hours because for eight hours you are consuming system resources essentially for nothing with",
    "start": "1502159",
    "end": "1508460"
  },
  {
    "text": "project Loom this is actually quite quite reason maybe even maybe even",
    "start": "1508460",
    "end": "1513860"
  },
  {
    "text": "reasonable approach because of virtual threat that sleeps consumes very little",
    "start": "1513860",
    "end": "1519380"
  },
  {
    "text": "resources so you don't pay this huge price of scheduling operating system",
    "start": "1519380",
    "end": "1525020"
  },
  {
    "text": "resources and um consuming operating systems memory all",
    "start": "1525020",
    "end": "1532520"
  },
  {
    "text": "right so another use case let's say You're Building I don't know uh a massive multiplayer game or a very",
    "start": "1532520",
    "end": "1539600"
  },
  {
    "text": "highly concurrent server or a chat application like WhatsApp that needs to handle millions of connections there is",
    "start": "1539600",
    "end": "1548059"
  },
  {
    "text": "actually nothing wrong with creating a new thread for each player per each connection per each message even of",
    "start": "1548059",
    "end": "1556100"
  },
  {
    "text": "course there are some limits here and because we still have a limited amount of memory and CPU but anyways confront",
    "start": "1556100",
    "end": "1563419"
  },
  {
    "text": "that with the typical way of building of building software where you had a",
    "start": "1563419",
    "end": "1569059"
  },
  {
    "text": "limited worker pull in a servlet container like tomcat and you had to do",
    "start": "1569059",
    "end": "1575659"
  },
  {
    "text": "all these um all these all these fancy algorithms that are sharing this this thread pool",
    "start": "1575659",
    "end": "1581900"
  },
  {
    "text": "and making sure it's not exhausted making sure you're monitoring the the queue and so on and so forth now it's",
    "start": "1581900",
    "end": "1587779"
  },
  {
    "text": "easy every time a new HTTP connection comes in you just create a new virtual threat as if as if nothing happens so",
    "start": "1587779",
    "end": "1595039"
  },
  {
    "text": "this is how we were taught and Java like 20 years ago then we realized it's a",
    "start": "1595039",
    "end": "1600620"
  },
  {
    "text": "poor practice and then that like these days it may actually be a valuable approach uh again uh so yeah another",
    "start": "1600620",
    "end": "1608900"
  },
  {
    "text": "another example let's say we want to download 10 000 images um with project Loom we simply start 10",
    "start": "1608900",
    "end": "1617179"
  },
  {
    "text": "000 threads each thread per each image and that's that's that's just it and",
    "start": "1617179",
    "end": "1622640"
  },
  {
    "text": "using the structured concurrency is actually fairly simple once we reach the last line it will wait for all images to",
    "start": "1622640",
    "end": "1630380"
  },
  {
    "text": "download so this is really really simple once again confront that with your typical code where you would have to",
    "start": "1630380",
    "end": "1636860"
  },
  {
    "text": "like create a thread pool make sure it's fine-tuned and so on and so forth but there's a caveat here so notice that",
    "start": "1636860",
    "end": "1643820"
  },
  {
    "text": "with a traditional thread pull all you had to do was essentially just make sure that your thread pool is not too big and",
    "start": "1643820",
    "end": "1651980"
  },
  {
    "text": "like 100 threads 200 threads 500 whatever and this was the natural limit of concurrency you cannot download more",
    "start": "1651980",
    "end": "1659419"
  },
  {
    "text": "than 100 images at once if you have just 100 threads in your standard thread pull",
    "start": "1659419",
    "end": "1666620"
  },
  {
    "text": "with this approach with project Loom notice that I'm actually starting as many concurrent connections as many",
    "start": "1666620",
    "end": "1673940"
  },
  {
    "text": "concurrent virtual threads as many images there are",
    "start": "1673940",
    "end": "1679279"
  },
  {
    "text": "and I personally don't pay that much price for starting these threads because",
    "start": "1679279",
    "end": "1684980"
  },
  {
    "text": "all they do is just like being blocked on iO and with project Loom I haven't",
    "start": "1684980",
    "end": "1690020"
  },
  {
    "text": "said it yet but in Project loom every blocking operation so IO like Network",
    "start": "1690020",
    "end": "1695720"
  },
  {
    "text": "typically SO waiting on a synchronization mechanism like semaphores or sleeping all these",
    "start": "1695720",
    "end": "1703340"
  },
  {
    "text": "blocking operations are actually yielding which means that they are voluntarily giving up a carrier threat",
    "start": "1703340",
    "end": "1710659"
  },
  {
    "text": "so it's absolutely fine to start 10 000 concurrent connections because you won't",
    "start": "1710659",
    "end": "1716240"
  },
  {
    "text": "pay the price of 10 000 carrier or kernel threats you because these virtual",
    "start": "1716240",
    "end": "1722779"
  },
  {
    "text": "threads will be hibernated anyway and only when the data arrives the jvm will",
    "start": "1722779",
    "end": "1729799"
  },
  {
    "text": "wake up your virtual threat and in the meantime you don't pay the price so this",
    "start": "1729799",
    "end": "1735440"
  },
  {
    "text": "is pretty cool however you just have to be you just have to be aware of the facts that virtual the the kernel",
    "start": "1735440",
    "end": "1742159"
  },
  {
    "text": "threats or your thread pulls were actually just natural like kind of limit to concurrency so just blindly switching",
    "start": "1742159",
    "end": "1749240"
  },
  {
    "text": "from platform threats the old ones to Virtual threats will change the",
    "start": "1749240",
    "end": "1754880"
  },
  {
    "text": "semantics of your application and to make matters even worse if you would",
    "start": "1754880",
    "end": "1760340"
  },
  {
    "text": "like to use product Loop directly you have to uh you will have to relearn all",
    "start": "1760340",
    "end": "1766700"
  },
  {
    "text": "these kind of low level structures like countdown latch or semaphore to actually do some synchronization or to actually",
    "start": "1766700",
    "end": "1773600"
  },
  {
    "text": "do some throttling and this is to be honest not the path I would like to take",
    "start": "1773600",
    "end": "1779000"
  },
  {
    "text": "so I would definitely like to see some high level Frameworks that are actually taking",
    "start": "1779000",
    "end": "1786140"
  },
  {
    "text": "advantage of project Loom so do we have such uh do we have such Frameworks and",
    "start": "1786140",
    "end": "1792200"
  },
  {
    "text": "uh and and what kind of problems and limitations can we can we reach here so",
    "start": "1792200",
    "end": "1797360"
  },
  {
    "text": "before we we move on to some high level constructs so first of all uh if your",
    "start": "1797360",
    "end": "1802460"
  },
  {
    "text": "threads if your threads either platform or virtual ones have a very deep stack",
    "start": "1802460",
    "end": "1809179"
  },
  {
    "text": "so this is kind of your typical spring boot application or typical like any",
    "start": "1809179",
    "end": "1814640"
  },
  {
    "text": "other framework like quarkus or whatever if you put a lot of different Technologies like",
    "start": "1814640",
    "end": "1820940"
  },
  {
    "text": "um I don't know adding security aspect oriented programming and so on and so forth your stacked rate your stack Trace",
    "start": "1820940",
    "end": "1826760"
  },
  {
    "text": "will be very deep with platform threads the stack Tracer that the size of the",
    "start": "1826760",
    "end": "1832279"
  },
  {
    "text": "stack Trace is actually fixed so it's like half a megabyte one megabyte and so",
    "start": "1832279",
    "end": "1837440"
  },
  {
    "text": "on with virtual threads the stack Trace can actually shrink and grow and that's why virtual threads are so inexpensive",
    "start": "1837440",
    "end": "1845799"
  },
  {
    "text": "especially in hello world examples where all what they do is just like sleeping",
    "start": "1845799",
    "end": "1852620"
  },
  {
    "text": "most of the time or like incrementing a counter or whatever in real life what you will get normally is actually",
    "start": "1852620",
    "end": "1861380"
  },
  {
    "text": "is actually like um for example a very very deep stack with",
    "start": "1861380",
    "end": "1868760"
  },
  {
    "text": "a lot of data and if you suspend such a virtual threat you do have to keep that",
    "start": "1868760",
    "end": "1876080"
  },
  {
    "text": "memory that holds all these stacked stack lines somewhere so the cost of the",
    "start": "1876080",
    "end": "1882500"
  },
  {
    "text": "virtual thread will actually approach the cost of the platform threat because",
    "start": "1882500",
    "end": "1888860"
  },
  {
    "text": "after all you do have to like store the stack Trace somewhere it's always going",
    "start": "1888860",
    "end": "1894380"
  },
  {
    "text": "to be or most of the time it's going to be less expensive you will use less memory but it doesn't mean that you can",
    "start": "1894380",
    "end": "1901159"
  },
  {
    "text": "create millions of very complex threads that are doing a lot of work it's just",
    "start": "1901159",
    "end": "1907940"
  },
  {
    "text": "an advertising gimmick so to speak but it doesn't hold true for normal workloads so",
    "start": "1907940",
    "end": "1915080"
  },
  {
    "text": "um keep that in mind so that deep stack traces are that there's no once again there's no magic here another another",
    "start": "1915080",
    "end": "1922640"
  },
  {
    "text": "thing that's not yet kind of handled is is preemption when you have a very CPU",
    "start": "1922640",
    "end": "1927799"
  },
  {
    "text": "intensive task so let's say you you have four cores you have four CPU cores and",
    "start": "1927799",
    "end": "1933380"
  },
  {
    "text": "you create four platform threads so for kernel threads that are doing very CPU",
    "start": "1933380",
    "end": "1939620"
  },
  {
    "text": "intensive work like crunching numbers cryptography hashing compression and",
    "start": "1939620",
    "end": "1945740"
  },
  {
    "text": "coding whatever so if you have four physical threads or platform threads doing that you are essentially just",
    "start": "1945740",
    "end": "1952640"
  },
  {
    "text": "maxing your CPU If instead you create four virtual threads you will",
    "start": "1952640",
    "end": "1959620"
  },
  {
    "text": "basically do the same amount of work it doesn't mean that if you're if you",
    "start": "1959620",
    "end": "1964940"
  },
  {
    "text": "replace four virtual threads with 400 virtual threads you will actually make",
    "start": "1964940",
    "end": "1970100"
  },
  {
    "text": "your application faster because after all you do use the CPU so there's not",
    "start": "1970100",
    "end": "1975740"
  },
  {
    "text": "much like Hardware to do the actual work but it gets worse because if you have a",
    "start": "1975740",
    "end": "1981020"
  },
  {
    "text": "virtual thread that just keeps using the CPU it will never voluntarily suspend",
    "start": "1981020",
    "end": "1987020"
  },
  {
    "text": "itself because it never reaches a blocking operation like sleeping locking and waiting for audio and so on and so",
    "start": "1987020",
    "end": "1994460"
  },
  {
    "text": "forth so in that case it's actually possible that you will only have a handful of virtual threads that never",
    "start": "1994460",
    "end": "2000760"
  },
  {
    "text": "allow any other virtual threats to run because they just keep using the CPU",
    "start": "2000760",
    "end": "2005860"
  },
  {
    "text": "that's the problem that's already handled by platform threads or kernel",
    "start": "2005860",
    "end": "2011679"
  },
  {
    "text": "threads because they do support preemption so stopping a threat in some arbitrary moment in time it's not yet",
    "start": "2011679",
    "end": "2017740"
  },
  {
    "text": "supported with project flow it may be one day but it's not yet the case and",
    "start": "2017740",
    "end": "2023019"
  },
  {
    "text": "there's also a whole list of unsupported apis so the the the the main one of the",
    "start": "2023019",
    "end": "2028600"
  },
  {
    "text": "main goals of project Loom is to actually rewrite all the standard apis so for example socket API or file API or",
    "start": "2028600",
    "end": "2038679"
  },
  {
    "text": "lock apis so lock support semi Force countdown latches and so on and so forth all of these apis are sleep which we",
    "start": "2038679",
    "end": "2046360"
  },
  {
    "text": "already saw all of these apis need to be Rewritten so that they kind of play well",
    "start": "2046360",
    "end": "2051580"
  },
  {
    "text": "with project Loom however there's a whole bunch of there's a whole bunch of apis and most importantly the file API I",
    "start": "2051580",
    "end": "2060398"
  },
  {
    "text": "just learned that there's some work happening but anyways there is there is",
    "start": "2060399",
    "end": "2065440"
  },
  {
    "text": "a there's a list of apis that do not play well with product Loom so it's kind of easy to shoot yourself in the foot",
    "start": "2065440",
    "end": "2073358"
  },
  {
    "text": "all right so one more thing with project Bloom you no longer consume the",
    "start": "2073359",
    "end": "2078760"
  },
  {
    "text": "so-called stack space the virtual threads that are not running at the moment which is technically called",
    "start": "2078760",
    "end": "2084878"
  },
  {
    "text": "pinned so they are not pinned to a carrier threat but they are suspended these virtual threads actually reside on",
    "start": "2084879",
    "end": "2093339"
  },
  {
    "text": "Heap which means they are subject to garbage collection and in that case it's",
    "start": "2093339",
    "end": "2099099"
  },
  {
    "text": "actually fairly easy to get into a situation where your garbage collector will have to do a lot of work",
    "start": "2099099",
    "end": "2106780"
  },
  {
    "text": "um because you have a ton of virtual threats so you don't have you don't pay the price of platform threats running",
    "start": "2106780",
    "end": "2114599"
  },
  {
    "text": "and consuming memory but you do get the extra price when it comes to garbage",
    "start": "2114599",
    "end": "2120400"
  },
  {
    "text": "collection and the garbage collection will may take a significant significantly more time and this was",
    "start": "2120400",
    "end": "2127180"
  },
  {
    "text": "actually an experiment done by the team behind Jetty they after switching to project Loom as an experiment they",
    "start": "2127180",
    "end": "2134260"
  },
  {
    "text": "realized that the garbage collection was doing way more work and the stack traces",
    "start": "2134260",
    "end": "2139780"
  },
  {
    "text": "were actually so deep that in a normal under normal load that it didn't really",
    "start": "2139780",
    "end": "2145060"
  },
  {
    "text": "bring that much value so that's kind of an important takeaway um another question",
    "start": "2145060",
    "end": "2152020"
  },
  {
    "text": "is is whether we still need reactive programming and if you think about it uh",
    "start": "2152020",
    "end": "2159099"
  },
  {
    "text": "and if you think about it we do have like a very old class like rest template which is like this old school blocking",
    "start": "2159099",
    "end": "2165760"
  },
  {
    "text": "HTTP client and with project Loom technically you can start using rest",
    "start": "2165760",
    "end": "2171099"
  },
  {
    "text": "template again and you can use it to very efficiently",
    "start": "2171099",
    "end": "2177099"
  },
  {
    "text": "um run multiple concurrent connections because rest template underneath uses",
    "start": "2177099",
    "end": "2182680"
  },
  {
    "text": "like HTTP client from Apache which uses sockets and sockets are Rewritten so that every time you block or wait for",
    "start": "2182680",
    "end": "2190720"
  },
  {
    "text": "reading or writing data you are actually suspending your your spiritual threat so",
    "start": "2190720",
    "end": "2196480"
  },
  {
    "text": "it seems like rest templates is or any other blocking API is exciting again it",
    "start": "2196480",
    "end": "2202359"
  },
  {
    "text": "no longer needs at least what that's what we might think you no longer need reactive programming and all these like",
    "start": "2202359",
    "end": "2208720"
  },
  {
    "text": "web fluxes um RX Javas reactors and so on and so forth but guess what project Loom",
    "start": "2208720",
    "end": "2216160"
  },
  {
    "text": "addresses just a tiny fraction of the problem IT addresses asynchronous programming so it makes a synchronous",
    "start": "2216160",
    "end": "2221859"
  },
  {
    "text": "programming much much easier however it doesn't address quite a few other",
    "start": "2221859",
    "end": "2227280"
  },
  {
    "text": "features that are supported by reactive programming namely back pressure change",
    "start": "2227280",
    "end": "2233079"
  },
  {
    "text": "propagation composibility these are all features of Frameworks like reactor or",
    "start": "2233079",
    "end": "2238980"
  },
  {
    "text": "akka or archa streams whatever which are not addressed by Loom because Loom is",
    "start": "2238980",
    "end": "2245440"
  },
  {
    "text": "actually quite low level after all it's just a different way of creating threads",
    "start": "2245440",
    "end": "2251520"
  },
  {
    "text": "and one more question should you just blindly like install the new version of",
    "start": "2251520",
    "end": "2256960"
  },
  {
    "text": "java whenever it comes out and just switch to Virtual threads I think the answer is no for quite a few reasons",
    "start": "2256960",
    "end": "2263880"
  },
  {
    "text": "first of all the semantics of your application change so you no longer have",
    "start": "2263880",
    "end": "2268900"
  },
  {
    "text": "this natural way of throttling because you have a limited number of threads but also the profile of your garbage",
    "start": "2268900",
    "end": "2275380"
  },
  {
    "text": "collection will be much different so we have to take that into account and the",
    "start": "2275380",
    "end": "2281079"
  },
  {
    "text": "the last question when is Project Loom uh when will product Loom be available uh it was supposed to be available in",
    "start": "2281079",
    "end": "2288579"
  },
  {
    "text": "Java 17 we just got Java 18 and it's still not there hopefully it will be ready when it's ready and hopefully we",
    "start": "2288579",
    "end": "2295780"
  },
  {
    "text": "will live into that and that moment but I was I'm experimenting with product",
    "start": "2295780",
    "end": "2301540"
  },
  {
    "text": "Boom for quite some time already and it works it sometimes crashes but it's a",
    "start": "2301540",
    "end": "2307420"
  },
  {
    "text": "project that's it's not like vaporware it actually exists so",
    "start": "2307420",
    "end": "2313720"
  },
  {
    "text": "I'll leave you with a few materials which I collected so more presentations",
    "start": "2313720",
    "end": "2318940"
  },
  {
    "text": "and more more articles that you might find interesting you will get links to these slides obviously add quite a few",
    "start": "2318940",
    "end": "2326020"
  },
  {
    "text": "blog posts that explain the API a little bit more thoroughly and last but not",
    "start": "2326020",
    "end": "2331119"
  },
  {
    "text": "least a few more critical or skeptic um skeptic points of view mainly around",
    "start": "2331119",
    "end": "2338800"
  },
  {
    "text": "the fact that project Loom won't really change that much especially for it's especially for the people who believe",
    "start": "2338800",
    "end": "2344980"
  },
  {
    "text": "that we will no longer need reactive programming because we will all just write our code using plain project Loom",
    "start": "2344980",
    "end": "2352660"
  },
  {
    "text": "and also my personal opinion that's not going to be the case we will still need some higher level abstraction that being",
    "start": "2352660",
    "end": "2360640"
  },
  {
    "text": "said thank you very much and I hope I'll get some questions from you so thank you",
    "start": "2360640",
    "end": "2366400"
  },
  {
    "text": "so much I hope you learned a lot",
    "start": "2366400",
    "end": "2369960"
  },
  {
    "text": "we do have a question um that I think would be worth saying a little bit more about",
    "start": "2373240",
    "end": "2379240"
  },
  {
    "text": "um which and I think probably we could talk about this for 40 minutes just on its own which is the okay so how do you",
    "start": "2379240",
    "end": "2385240"
  },
  {
    "text": "how do you debug it and does it make it harder to debug does it make it easier to debug what kind of tooling support is",
    "start": "2385240",
    "end": "2393640"
  },
  {
    "text": "there is there more to lean support coming yeah so so the answer is actually twofold so on one hand it's easier",
    "start": "2393640",
    "end": "2400240"
  },
  {
    "text": "because you no longer have to hop between threads so much so in reactive",
    "start": "2400240",
    "end": "2405400"
  },
  {
    "text": "programming or in asynchronous programming in general what you typically do is that you have a limited",
    "start": "2405400",
    "end": "2410859"
  },
  {
    "text": "number of threads but you jump between threads very often which means that stack traces are kind of cut in between",
    "start": "2410859",
    "end": "2417520"
  },
  {
    "text": "so you don't see the full picture and it kind of gets a little bit convoluted and Frameworks like reactor try to somehow",
    "start": "2417520",
    "end": "2424680"
  },
  {
    "text": "reassemble the stack Trace taking into account that you were jumping between thread balls or some asynchronous Netty",
    "start": "2424680",
    "end": "2432400"
  },
  {
    "text": "threads and so on and so forth so in that case react sorry that case Loom",
    "start": "2432400",
    "end": "2438280"
  },
  {
    "text": "makes it easier because you can survive you can make the whole request just on a single thread because logically you are",
    "start": "2438280",
    "end": "2445599"
  },
  {
    "text": "still on the same thread This Thread is being paused so it's being like unpinned and pinned back to a carrier thread but",
    "start": "2445599",
    "end": "2453880"
  },
  {
    "text": "when the exception arises this exception will will show the whole stack Trace",
    "start": "2453880",
    "end": "2459280"
  },
  {
    "text": "because you are not jumping between threats so what you typically do is that you when you want to do something asynchronous you put it into a thread",
    "start": "2459280",
    "end": "2466060"
  },
  {
    "text": "pull and once you're in a threat pool you lose the original stack Trace you lose the original threat in case of",
    "start": "2466060",
    "end": "2472480"
  },
  {
    "text": "project Loom you don't like offload your your work into a separate thread pool because whenever you're blocked you are",
    "start": "2472480",
    "end": "2480160"
  },
  {
    "text": "your virtual thread has very little cost so in some sense it's going to be easier",
    "start": "2480160",
    "end": "2485260"
  },
  {
    "text": "however you will still be probably using multiple threads to handle a single",
    "start": "2485260",
    "end": "2490480"
  },
  {
    "text": "request so that problem doesn't really go away uh in in some cases it will be easier but uh but it's not like an an",
    "start": "2490480",
    "end": "2498220"
  },
  {
    "text": "entirely like better experience so on the other hand uh you now have millions",
    "start": "2498220",
    "end": "2504040"
  },
  {
    "text": "or it's kind of symbolic it's not really the case but you now have like 10 times or 100 times more threats uh which are",
    "start": "2504040",
    "end": "2511180"
  },
  {
    "text": "all doing something and these aren't really like Java threats so to speak so you won't for example see them on a",
    "start": "2511180",
    "end": "2517660"
  },
  {
    "text": "thread dump this may change but uh but that's that's the case right now so",
    "start": "2517660",
    "end": "2523540"
  },
  {
    "text": "um you have to take that into account when you're doing when you're doing a thread dump which is probably one of the most valuable things you can get when",
    "start": "2523540",
    "end": "2530619"
  },
  {
    "text": "troubleshooting your application you won't see virtual threads which are which are not running at the moment but",
    "start": "2530619",
    "end": "2537640"
  },
  {
    "text": "if you are doing the actual like debugging so you want to step over your code you want to see like what are the",
    "start": "2537640",
    "end": "2544180"
  },
  {
    "text": "variables what what is being called what is being like sleeping or whatever you can still do that because when your",
    "start": "2544180",
    "end": "2550660"
  },
  {
    "text": "spiritual thread runs it's a normal job other threat it's a normal platform threat because it uses carrier threat",
    "start": "2550660",
    "end": "2557320"
  },
  {
    "text": "underneath so you don't really need any special tools however you just have to like remember from on the back of your",
    "start": "2557320",
    "end": "2563920"
  },
  {
    "text": "head that there is something like special happening there that there is a like a whole variety of threads that you",
    "start": "2563920",
    "end": "2570640"
  },
  {
    "text": "don't see because they are suspended and as far as jvm is concerned they do not exist because they are suspended they",
    "start": "2570640",
    "end": "2577359"
  },
  {
    "text": "are just objects on a heap which is kind of surprising it's sort of hard to know which is worse",
    "start": "2577359",
    "end": "2583420"
  },
  {
    "text": "you have a million threads and they don't turn up in your in your heat thread dump or you have a million",
    "start": "2583420",
    "end": "2590440"
  },
  {
    "text": "threads and they do turn up yeah actually reactive is probably the",
    "start": "2590440",
    "end": "2595900"
  },
  {
    "text": "worst here because you have million ongoing requests for example HTTP",
    "start": "2595900",
    "end": "2601000"
  },
  {
    "text": "requests and you don't see them anywhere because uh with with reactive with truly",
    "start": "2601000",
    "end": "2607660"
  },
  {
    "text": "asynchronous apis HTTP database whatever what happens is that you have a thread",
    "start": "2607660",
    "end": "2613900"
  },
  {
    "text": "that makes a request and then absolutely forgets about that request until it gets a response so a single threat handles",
    "start": "2613900",
    "end": "2621099"
  },
  {
    "text": "hundreds of thousands of requests concurrently or truly concurrently so in",
    "start": "2621099",
    "end": "2626380"
  },
  {
    "text": "that case if you if you make a thread dump it's actually the worst of Both Worlds because what you see is just a",
    "start": "2626380",
    "end": "2632319"
  },
  {
    "text": "very few reactive threats like Neti for example which is typically used and these native",
    "start": "2632319",
    "end": "2638619"
  },
  {
    "text": "threads are actually not actually doing any business logic because most of the time they are just waiting for data to",
    "start": "2638619",
    "end": "2644440"
  },
  {
    "text": "be sent or received so so troubleshooting a reactive application",
    "start": "2644440",
    "end": "2649480"
  },
  {
    "text": "using a thread dump is actually very counterproductive uh so so in that case virtual threads are actually helping a",
    "start": "2649480",
    "end": "2655960"
  },
  {
    "text": "little bit and because at least you will see the the running threads",
    "start": "2655960",
    "end": "2661900"
  },
  {
    "text": "yeah that makes sense and I guess it it's probably like a lot of things where when the implementation moves",
    "start": "2661900",
    "end": "2668920"
  },
  {
    "text": "closer to our mental model because nobody has a mental model of thread pulls they have a mental model of",
    "start": "2668920",
    "end": "2674079"
  },
  {
    "text": "threads and so then when you get those two closer together it means that the the debugging is easier yeah I really",
    "start": "2674079",
    "end": "2680140"
  },
  {
    "text": "love the quote which I even mentioned uh by K Horseman that you're not no longer",
    "start": "2680140",
    "end": "2685180"
  },
  {
    "text": "thinking about this low level abstraction of a threat pool which is kind of convoluted you have a bunch of",
    "start": "2685180",
    "end": "2690700"
  },
  {
    "text": "threads that are reused there's a queue you're submitting a task it stands in a queue it waits in that queue you no",
    "start": "2690700",
    "end": "2697660"
  },
  {
    "text": "longer have to think about it you have a you have a bunch of tasks that you need to perform uh that you need to run concurrently you just run them you just",
    "start": "2697660",
    "end": "2704859"
  },
  {
    "text": "create a thread and get over it that that was kind of the promise of actor systems like akka that when you have a",
    "start": "2704859",
    "end": "2711700"
  },
  {
    "text": "hundred thousand connections you create hundred thousand actors but actors reuse threads underneath because that's how",
    "start": "2711700",
    "end": "2717940"
  },
  {
    "text": "jvm works at the moment but with virtual threats and I I gave a few examples on",
    "start": "2717940",
    "end": "2724060"
  },
  {
    "text": "the slides as well with virtual threads you just create a new virtual thread per connection per player per message",
    "start": "2724060",
    "end": "2730359"
  },
  {
    "text": "whatever so it's it's closer surprisingly to an airline model where you were just starting new processes of",
    "start": "2730359",
    "end": "2737260"
  },
  {
    "text": "course it's really far away from Airline still but it's a little bit a little bit closer to that",
    "start": "2737260",
    "end": "2743260"
  },
  {
    "text": "do you think we're gonna see sort of a a new world of",
    "start": "2743260",
    "end": "2748780"
  },
  {
    "text": "problem reproduction ickiness where some of us are on Java 19 and taking",
    "start": "2748780",
    "end": "2755440"
  },
  {
    "text": "advantage of threads and some of us are not and at the top level it looks",
    "start": "2755440",
    "end": "2761260"
  },
  {
    "text": "similar but then once you go underneath the behavior is really fundamentally different and so then we get these sort of non-reproducible things where it's",
    "start": "2761260",
    "end": "2768280"
  },
  {
    "text": "the timing dependency plus the such a a different implementation means that we",
    "start": "2768280",
    "end": "2774160"
  },
  {
    "text": "just spend all our time chasing weird threading variations well I can give you even a simpler example of when it can",
    "start": "2774160",
    "end": "2781000"
  },
  {
    "text": "blow up I mean we used to rely on the fact that threat pool is the natural way",
    "start": "2781000",
    "end": "2787180"
  },
  {
    "text": "of throttling tasks so when you have a thread pull of 20 threads it means you're not you will not run more than 20",
    "start": "2787180",
    "end": "2793119"
  },
  {
    "text": "tasks at the same time and if you just blindly replace executor service with",
    "start": "2793119",
    "end": "2798599"
  },
  {
    "text": "this virtual threat executive service the one that doesn't really pull any threats it just like starts them like",
    "start": "2798599",
    "end": "2805060"
  },
  {
    "text": "crazy you no longer have this throttling mechanism so if you naively refactor",
    "start": "2805060",
    "end": "2810099"
  },
  {
    "text": "from java 18 to Java 19 because as I wrote on the chat uh the project Loom",
    "start": "2810099",
    "end": "2815680"
  },
  {
    "text": "was already merged to project 19 to to the master Branch so if you just like",
    "start": "2815680",
    "end": "2820960"
  },
  {
    "text": "switch to project Loom you will be surprised because suddenly the level of concurrency that you achieve on your",
    "start": "2820960",
    "end": "2826300"
  },
  {
    "text": "machine is way great better than you expected and you might think that is",
    "start": "2826300",
    "end": "2831400"
  },
  {
    "text": "actually fantastic because you are handling more load but it also May mean that you are overloading your database",
    "start": "2831400",
    "end": "2836619"
  },
  {
    "text": "or you are overloading another service and you haven't changed much you just changed a single line that changes the",
    "start": "2836619",
    "end": "2843040"
  },
  {
    "text": "way threads are created rather than platform then that you you you you moved",
    "start": "2843040",
    "end": "2848619"
  },
  {
    "text": "to Virtual threads and guess what suddenly you have to rely on these low level countdown latches semaphores and",
    "start": "2848619",
    "end": "2855280"
  },
  {
    "text": "so on and so forth I barely remember how they work and I will I will either have to re relearn them or use some higher",
    "start": "2855280",
    "end": "2863200"
  },
  {
    "text": "level mechanisms and this is probably where reactive programming or some higher level abstractions still come",
    "start": "2863200",
    "end": "2869859"
  },
  {
    "text": "into play and from that perspective I don't believe project Loom will revolutionize the way we develop",
    "start": "2869859",
    "end": "2876400"
  },
  {
    "text": "software or at least I hope it won't but it will significantly change the way",
    "start": "2876400",
    "end": "2882819"
  },
  {
    "text": "um libraries or Frameworks can be written so that we can take advantage of them yeah that makes so much sense like I",
    "start": "2882819",
    "end": "2890500"
  },
  {
    "text": "said you know I think we could probably talk and talk about this for ages because it's so interesting but we um we are at time so but we do have a hallway",
    "start": "2890500",
    "end": "2897700"
  },
  {
    "text": "track um in the hangout so if you go back to the main schedule and then you click on the hangout",
    "start": "2897700",
    "end": "2903520"
  },
  {
    "text": "um there'll be a zoom room and I will be there and Thomas will be there and we can um Carry On The the sort of the geeky threading conversation",
    "start": "2903520",
    "end": "2910839"
  },
  {
    "text": "um again thank you very much super super informative um and we'll see you all back here in a",
    "start": "2910839",
    "end": "2916420"
  },
  {
    "text": "few minutes cheers all see you in hangout room",
    "start": "2916420",
    "end": "2921180"
  },
  {
    "text": "[Music] thank you",
    "start": "2923640",
    "end": "2930180"
  }
]