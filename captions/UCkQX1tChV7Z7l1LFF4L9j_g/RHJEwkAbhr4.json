[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "14249"
  },
  {
    "text": "pilling and today I'll be doing a talk on webassembly so first a bit of background I worked",
    "start": "15320",
    "end": "21660"
  },
  {
    "text": "for Scott logic where we deal with things like Financial software or government work and general bespoke",
    "start": "21660",
    "end": "26699"
  },
  {
    "text": "Consulting so I've dabbled in trading systems like web apps backed by the cloud and even done a few years of",
    "start": "26699",
    "end": "33420"
  },
  {
    "text": "mobile development as well in my spare time I tinker with compilers explore",
    "start": "33420",
    "end": "38760"
  },
  {
    "text": "webassembly and I run a internal rust Meetup where we're currently mob programming our way through writing a",
    "start": "38760",
    "end": "44940"
  },
  {
    "text": "trade matching web server this is great for knowledge sharing and discussion uh",
    "start": "44940",
    "end": "50280"
  },
  {
    "text": "where which usually ends up going down Russ chips rabbit holes and aims out some some creases in knowledge around",
    "start": "50280",
    "end": "56940"
  },
  {
    "text": "language so on to my talk first I'll be giving a high level overview of webassembly and then we'll get into the",
    "start": "56940",
    "end": "63719"
  },
  {
    "start": "60000",
    "end": "190000"
  },
  {
    "text": "meat of things so we're going to write an interpreter for webassembly and to do this we'll have a quick look at compilers cover the three main parts of",
    "start": "63719",
    "end": "70500"
  },
  {
    "text": "our our interpreter stack memory and control flow and by the end of the talk I hope to have enough of an interpreter",
    "start": "70500",
    "end": "77580"
  },
  {
    "text": "cobbled together that we can do little bit of maths with it so watch this space",
    "start": "77580",
    "end": "83040"
  },
  {
    "text": "now why webassembly I get a lot of people saying that the browser is a pretty specific place to focus on but",
    "start": "83040",
    "end": "90240"
  },
  {
    "text": "whether somebody has applications elsewhere so as you may have had mentioned uh server side compute lambdas",
    "start": "90240",
    "end": "97020"
  },
  {
    "text": "or functions as a service we can use webassembly for that which allows us to nicely encapsulate our code",
    "start": "97020",
    "end": "104759"
  },
  {
    "text": "um and we can also sandbox local code with it so you've probably heard of the supply chain attacks uh things like node",
    "start": "104759",
    "end": "111540"
  },
  {
    "text": "modules if that was where assembly it'd be perhaps a little bit easier to sandbox RM what we have at the moment",
    "start": "111540",
    "end": "118740"
  },
  {
    "text": "which is Javascript in the browser and so that's sandboxed untrusted code but",
    "start": "118740",
    "end": "123899"
  },
  {
    "text": "it's difficult to make it go quickly we need a lot of infrastructure for that whereas webassembly makes this a little",
    "start": "123899",
    "end": "129899"
  },
  {
    "text": "bit more trivial um then we we move on things like micro front ends in the web so at the moment",
    "start": "129899",
    "end": "136680"
  },
  {
    "text": "if you want to have different apps in your web program these are all",
    "start": "136680",
    "end": "142140"
  },
  {
    "text": "um isolated from each of the Via things like web iframes and they talk yeah using pause message which means all the",
    "start": "142140",
    "end": "149520"
  },
  {
    "text": "messages between these different micro front ends need to be serialized and it could be quite slow so webassembly",
    "start": "149520",
    "end": "155640"
  },
  {
    "text": "allows us to run different apps all within the same process so it's uh it's a lot faster",
    "start": "155640",
    "end": "160980"
  },
  {
    "text": "uh and we can also Target various different machine architectures with with the same webassembly modules are",
    "start": "160980",
    "end": "166440"
  },
  {
    "text": "which is really nice so for those of you who haven't used it yet or maybe you have without realizing llvm is one of",
    "start": "166440",
    "end": "172739"
  },
  {
    "text": "the tools that powers this uh it's a code generator so we can generate webassembly for rust Swift Objective C",
    "start": "172739",
    "end": "178560"
  },
  {
    "text": "and C plus plus amongst other languages um and that's that's what uh that's what",
    "start": "178560",
    "end": "184440"
  },
  {
    "text": "allows us to uh have this uh this such a wide range of input languages so that's",
    "start": "184440",
    "end": "189599"
  },
  {
    "text": "webassembly now we've covered that so let's move on to compilers uh webassembly works a lot like llvm so we",
    "start": "189599",
    "end": "196860"
  },
  {
    "start": "190000",
    "end": "268000"
  },
  {
    "text": "can use it as an intermediate representation of our code this is great any of those languages uh Canary in a",
    "start": "196860",
    "end": "203340"
  },
  {
    "text": "browser um in a local sandbox or or even say on a on a Lambda function as a service so",
    "start": "203340",
    "end": "210120"
  },
  {
    "text": "we can build all of our code AS webassembly and leave the nitty-gritty details to the implementation browsers",
    "start": "210120",
    "end": "215400"
  },
  {
    "text": "will then execute this or any webassembly host and we only need to ship a single binary so this is great if",
    "start": "215400",
    "end": "222239"
  },
  {
    "text": "a little confusing now I've thrown around a lot of acronyms",
    "start": "222239",
    "end": "227879"
  },
  {
    "text": "that's it's all well and good but I find the best way to understand something is to write a a bit of a crummy version of",
    "start": "227879",
    "end": "234060"
  },
  {
    "text": "it so I've done this with side-scrolling games HTTP downloaders text editors and",
    "start": "234060",
    "end": "239220"
  },
  {
    "text": "a c compiler um now if webassembly have been a thing back when I wrote my C compiler I'd have",
    "start": "239220",
    "end": "245400"
  },
  {
    "text": "probably not gone nearly as deep into writing things like uh like the chord generator that churns out the machine",
    "start": "245400",
    "end": "250439"
  },
  {
    "text": "code webassembly allows us to avoid uh register allocation uh stack frame",
    "start": "250439",
    "end": "255720"
  },
  {
    "text": "layout and calling conventions to to an extent depending on the The Source language that we're we're building from",
    "start": "255720",
    "end": "262280"
  },
  {
    "text": "so that's compilers in a pretty high level view of where webassembly comes in",
    "start": "262280",
    "end": "268020"
  },
  {
    "start": "268000",
    "end": "340000"
  },
  {
    "text": "now speaking of writing compilers what's the simplest machine that we can write",
    "start": "268020",
    "end": "273360"
  },
  {
    "text": "now a lot of you will have probably written one at some point uh perhaps without even realizing it",
    "start": "273360",
    "end": "279960"
  },
  {
    "text": "so a regular expression can be thought of as a little machine all on its own uh we move it between states by feeding It",
    "start": "279960",
    "end": "286800"
  },
  {
    "text": "characters and we can take a peek at that State um when we're done so once we've edit",
    "start": "286800",
    "end": "292139"
  },
  {
    "text": "the last character and uh if it happens to be in the the accept States or here if it's in the rightmost one for the d",
    "start": "292139",
    "end": "298620"
  },
  {
    "text": "uh character then we say that the regular expression is matched uh this is this is interesting um we can",
    "start": "298620",
    "end": "305820"
  },
  {
    "text": "do this and yet the machine has no variables and no memory um which actually limits what it can do",
    "start": "305820",
    "end": "311580"
  },
  {
    "text": "so what's the next step how can we improve this now while we can do a lot with regular Expressions believe me",
    "start": "311580",
    "end": "319680"
  },
  {
    "text": "um we can still perform seemingly simple tasks uh so it's impossible for example",
    "start": "319680",
    "end": "324780"
  },
  {
    "text": "to write a regular expression to match balanced brackets um because it has no notion of counting",
    "start": "324780",
    "end": "331259"
  },
  {
    "text": "or remembering so this brings me to an interview question that a lot of you might have stacked up against",
    "start": "331259",
    "end": "337740"
  },
  {
    "text": "um how can we tell if a string contains balanced brackets now here's the solution and the first",
    "start": "337740",
    "end": "345120"
  },
  {
    "start": "340000",
    "end": "557000"
  },
  {
    "text": "bit of live coding um now you might have stumbled across this or even written something similar",
    "start": "345120",
    "end": "351419"
  },
  {
    "text": "yourself um so we can use a stack so here we have two examples this one this first one",
    "start": "351419",
    "end": "358740"
  },
  {
    "text": "contains balance brackets and the second one doesn't uh We've cut this open uh parentheses here and then an angle",
    "start": "358740",
    "end": "364560"
  },
  {
    "text": "bracket um and then I've just wrapped this in a little uh sure function which calls our",
    "start": "364560",
    "end": "370440"
  },
  {
    "text": "our interview question balanced uh which tells us whether the brackets are balanced or not now this uh function",
    "start": "370440",
    "end": "377280"
  },
  {
    "text": "just has a stack and then for each character if it's an Open Bracket then we push a closed bracket onto the stack",
    "start": "377280",
    "end": "382860"
  },
  {
    "text": "uh similar here and then uh otherwise we expect to pop off from the stack",
    "start": "382860",
    "end": "389100"
  },
  {
    "text": "um the most recent one that we that we saw and if it's that if that's not what",
    "start": "389100",
    "end": "394259"
  },
  {
    "text": "we expected then we return false otherwise we've got to the end of the string if we've exhausted the stack then",
    "start": "394259",
    "end": "402440"
  },
  {
    "text": "then that means that we've got some balance brackets so if I just run this",
    "start": "402440",
    "end": "408360"
  },
  {
    "text": "we'll notice the first example here is true and the second one is false which is exactly what we expect",
    "start": "408360",
    "end": "414960"
  },
  {
    "text": "um so this is this is pretty useful we've got a way to count now um we can look at nested brackets and",
    "start": "414960",
    "end": "421020"
  },
  {
    "text": "but actually we can do a lot more than that we now write passes for a large amount of programming languages in fact",
    "start": "421020",
    "end": "427199"
  },
  {
    "text": "uh all just when using a stack um now surely a stack it seems it seems",
    "start": "427199",
    "end": "433919"
  },
  {
    "text": "easy is it that easy to write maybe maybe we could have a look um so let's take a look at this uh",
    "start": "433919",
    "end": "440280"
  },
  {
    "text": "stack.rs that we have here now for a stack we need a way to",
    "start": "440280",
    "end": "445380"
  },
  {
    "text": "um create it I suppose uh we're going to need a way to push something onto the stack pop and I guess",
    "start": "445380",
    "end": "452580"
  },
  {
    "text": "it would be useful if we knew how to tell if the stack is is empty as well um and for this stack we'll need some",
    "start": "452580",
    "end": "458460"
  },
  {
    "text": "kind of backing storage so let's let's just use a vector a pretty ubiquitous data type and uh we",
    "start": "458460",
    "end": "466199"
  },
  {
    "text": "can have a go at implementing these functions so the new function we just want to return a stack and we'll just",
    "start": "466199",
    "end": "473460"
  },
  {
    "text": "initialize the factor there push I suppose we want to take some kind of t",
    "start": "473460",
    "end": "479220"
  },
  {
    "text": "and then we'll just uh we'll just forward onto the vector so we'll just say push that onto the end of the vector",
    "start": "479220",
    "end": "485520"
  },
  {
    "text": "uh pop is going to be kind of similar except this time instead of taking a t uh we'll return a t so again we'll do a",
    "start": "485520",
    "end": "492419"
  },
  {
    "text": "similar kind of thing except instead of pushing with this pop from the vector now this gives us an option so we'll",
    "start": "492419",
    "end": "499379"
  },
  {
    "text": "just have to unwrap that and just assume that it will always succeed just to make things a bit simpler down the line",
    "start": "499379",
    "end": "505500"
  },
  {
    "text": "uh finally we've got a is empty um for this we'll just want to return a Boolean and again we can almost cheat",
    "start": "505500",
    "end": "512640"
  },
  {
    "text": "let them just say if the vector's empty then we're empty now I've got a test",
    "start": "512640",
    "end": "518459"
  },
  {
    "text": "down here um that just pushes and Pops onto the stack so we start out with the stack one two three uh it shouldn't be empty we",
    "start": "518459",
    "end": "525300"
  },
  {
    "text": "push four and then when we pop uh we should get the four back then we'll get three the two the one and then it's",
    "start": "525300",
    "end": "531600"
  },
  {
    "text": "finally empty so let's give that a little run",
    "start": "531600",
    "end": "536480"
  },
  {
    "text": "so we'll compile it first and uh we'll just compile it with tests to check that",
    "start": "536760",
    "end": "542220"
  },
  {
    "text": "um that all works and once that's built if we run it we should see our tests all succeeding so great This Is Us done and",
    "start": "542220",
    "end": "550080"
  },
  {
    "text": "we've written a simple stack now while Stacks look simple they're actually pretty magical because they allow us to",
    "start": "550080",
    "end": "557100"
  },
  {
    "start": "557000",
    "end": "1012000"
  },
  {
    "text": "do one of the most exciting things in the world maths",
    "start": "557100",
    "end": "562260"
  },
  {
    "text": "so one of the early things we learned in school is that we can't answer this equation by saying 12 minus five and",
    "start": "562920",
    "end": "569040"
  },
  {
    "text": "then we add two to that and then we we times the whole thing by three it's uh it doesn't work like that we've got to",
    "start": "569040",
    "end": "574860"
  },
  {
    "text": "group the operations which we can arrange in a little tree it's a bit like this now the tree helps",
    "start": "574860",
    "end": "581220"
  },
  {
    "text": "us do things in order we can perform a traversal where we walk along the tree to calculate the result and in fact we",
    "start": "581220",
    "end": "588720"
  },
  {
    "text": "can just demonstrate a little executor to do just this for us so here",
    "start": "588720",
    "end": "594360"
  },
  {
    "text": "I've just got some some code and we'll just ignore the the topic for now and we'll take a look at this bit so",
    "start": "594360",
    "end": "601140"
  },
  {
    "text": "we've got an operator and that operator is is a plus and then what are we adding together well we're adding together the",
    "start": "601140",
    "end": "607680"
  },
  {
    "text": "result of this operator which is minus a 12 and a five and then also this operator which is times in a two and a",
    "start": "607680",
    "end": "614940"
  },
  {
    "text": "three which corresponds to our other part of the tree and so if I uh if we look at what we do",
    "start": "614940",
    "end": "622140"
  },
  {
    "text": "with this code we just say Eva on it so um how does that work well if we look up",
    "start": "622140",
    "end": "628800"
  },
  {
    "text": "here eval it will then an operator will then have a left and a right hand side",
    "start": "628800",
    "end": "633839"
  },
  {
    "text": "so it'll leave out both of those and then depending on what operator we are we'll maybe want to add I'll subtract or",
    "start": "633839",
    "end": "639600"
  },
  {
    "text": "multiply so we'll just do that recursively um but this can't go on forever at some",
    "start": "639600",
    "end": "645540"
  },
  {
    "text": "point we we hit a leaf like the 12 here um so I suppose we need some kind of value and uh to evaluate a value well it",
    "start": "645540",
    "end": "653880"
  },
  {
    "text": "is just the value itself so let's give that a run and see what see what it prints out so we get 13",
    "start": "653880",
    "end": "659820"
  },
  {
    "text": "which is actually the right answer um which is is a relief cool so what we",
    "start": "659820",
    "end": "665700"
  },
  {
    "text": "have here is called an interpreter so um the python code runs and the python code is what what cranks soon and",
    "start": "665700",
    "end": "672060"
  },
  {
    "text": "calculates it but we we want to do a bit better than that we don't want python around to to interpret our abstract",
    "start": "672060",
    "end": "678420"
  },
  {
    "text": "syntax tree which is what this bit is called uh let's instead uh try to",
    "start": "678420",
    "end": "683519"
  },
  {
    "text": "generate some code so um what we have here is pretty similar",
    "start": "683519",
    "end": "689399"
  },
  {
    "text": "um except there's there's a few crucial changes this time instead of printing something out we just emit some code at",
    "start": "689399",
    "end": "695040"
  },
  {
    "text": "the end our syntax tree is exactly the same um now this time for a value instead of",
    "start": "695040",
    "end": "702120"
  },
  {
    "text": "actually returning it we don't want to return anything we want to actually emit some code and",
    "start": "702120",
    "end": "707640"
  },
  {
    "text": "so here we're just going to use the stack from earlier so we'll just push whatever our value is onto the stack and",
    "start": "707640",
    "end": "714779"
  },
  {
    "text": "then an operator is going to be similarly so we'll um get the the left hand side to emit",
    "start": "714779",
    "end": "721800"
  },
  {
    "text": "itself and then the right hand side switch itself then we'll uh we'll pop them stack into let's just call these",
    "start": "721800",
    "end": "728040"
  },
  {
    "text": "two variables so we have an l and an r and so we'll pop into the r because the",
    "start": "728040",
    "end": "734459"
  },
  {
    "text": "right hand side was the most recent thing that we emitted and then we'll pop the next one into the L which",
    "start": "734459",
    "end": "739620"
  },
  {
    "text": "corresponds to the left-hand side and then as before if it's a plus we do a plus if it's minus we do minus and so on",
    "start": "739620",
    "end": "746100"
  },
  {
    "text": "and we'll push that result back onto the stack so if we run this",
    "start": "746100",
    "end": "751380"
  },
  {
    "text": "we now don't actually get an answer and we get what looks like a lot of gibberish um to do with pushing and",
    "start": "751380",
    "end": "757980"
  },
  {
    "text": "popping onto the stack so this is interesting um we still need to compute our equation",
    "start": "757980",
    "end": "763860"
  },
  {
    "text": "and I guess we need some kind of little machine language that helps us out with this so here's how we might do that",
    "start": "763860",
    "end": "771420"
  },
  {
    "text": "so we'll we'll have a machine and uh I suppose the first thing that we need in this machine is a stack so let's just",
    "start": "771420",
    "end": "777899"
  },
  {
    "text": "add that in and we'll call it a stack of values just because the these values",
    "start": "777899",
    "end": "783060"
  },
  {
    "text": "will just be what we'll deal with um and then we'll let's create one of these machines so",
    "start": "783060",
    "end": "789839"
  },
  {
    "text": "here and we'll just initialize the stack to to an empty stack",
    "start": "789839",
    "end": "795180"
  },
  {
    "text": "um now we want some way of running some some cards so we'll just say uh m.run",
    "start": "795180",
    "end": "800579"
  },
  {
    "text": "and we'll we'll want to give it some code in here now rather than typing out uh this code by hand I think we can",
    "start": "800579",
    "end": "807420"
  },
  {
    "text": "probably use the code gen from earlier so um let's",
    "start": "807420",
    "end": "813060"
  },
  {
    "text": "just tweak this a little so it looks a bit more Rusty so um we'll have some instructions so for",
    "start": "813060",
    "end": "820260"
  },
  {
    "text": "this uh for this constant here we'll perhaps say uh instruction const and",
    "start": "820260",
    "end": "825660"
  },
  {
    "text": "then we'll just create an i32 with um the the value that we've got",
    "start": "825660",
    "end": "831600"
  },
  {
    "text": "like so um then we'll want to do something similar for up here so we'll get rid of those",
    "start": "831600",
    "end": "837839"
  },
  {
    "text": "pots and we'll have that be implicit in how the instruction works and uh for the ad I suppose I want to say",
    "start": "837839",
    "end": "844920"
  },
  {
    "text": "um we've got a binary operator and this binary operator is an ad instruction",
    "start": "844920",
    "end": "850200"
  },
  {
    "text": "and then we'll want to do something similar for the times and the subtract",
    "start": "850200",
    "end": "857600"
  },
  {
    "text": "update that like so um and then if we if we run this code",
    "start": "858060",
    "end": "864660"
  },
  {
    "text": "gen or if we if we read from it into here we've now got our rust code with",
    "start": "864660",
    "end": "870600"
  },
  {
    "text": "some uh with some pretty simple operands uh ready to go um how do we get the result of this out",
    "start": "870600",
    "end": "876060"
  },
  {
    "text": "well we need to see what's up at the bottom of the stack so let's just print that for now",
    "start": "876060",
    "end": "881399"
  },
  {
    "text": "so we'll just say cool okay so we have this we've got",
    "start": "881399",
    "end": "887820"
  },
  {
    "text": "these instructions but we we don't actually have any implementation in our run method up here so let's just uh pop",
    "start": "887820",
    "end": "893040"
  },
  {
    "text": "something in here so we'll say for for each instruction what we're on spirit is uh we'll we'll",
    "start": "893040",
    "end": "898920"
  },
  {
    "text": "effectively just switch on that instrument so maybe we've got this uh this const instruction which we'll just",
    "start": "898920",
    "end": "905699"
  },
  {
    "text": "use to push onto this stack",
    "start": "905699",
    "end": "909139"
  },
  {
    "text": "um or maybe we've got this uh this binary operation instruction uh in which case you will want to go a little bit",
    "start": "911399",
    "end": "917399"
  },
  {
    "text": "deeper and just decide on which which like binary operation is so we've got",
    "start": "917399",
    "end": "923040"
  },
  {
    "text": "either add someone multiply so we'll just pop those in here",
    "start": "923040",
    "end": "929060"
  },
  {
    "text": "um software and add we'll want to add some some left hand side to some right hand side",
    "start": "930240",
    "end": "935880"
  },
  {
    "text": "and then similarly for the subtracting multiply",
    "start": "935880",
    "end": "940699"
  },
  {
    "text": "it does and that will give us our results so we'll just we'll just call that X and I guess we want to push that",
    "start": "941519",
    "end": "947459"
  },
  {
    "text": "onto this a little bit like this um but where do we get those from so",
    "start": "947459",
    "end": "952800"
  },
  {
    "text": "similarly to before we want to pop the the right hand side first and then left",
    "start": "952800",
    "end": "957959"
  },
  {
    "text": "so let's do that and uh then I suppose the there might be",
    "start": "957959",
    "end": "966300"
  },
  {
    "text": "some other binary operators we'll just ignore them for now and pop in a panic and same for other",
    "start": "966300",
    "end": "972180"
  },
  {
    "text": "instructions as well as well cool so this is our our machine uh let's see if it compiles",
    "start": "972180",
    "end": "981139"
  },
  {
    "text": "great so we've now got a machine and the output is 13. fantastic so what we've",
    "start": "981660",
    "end": "986940"
  },
  {
    "text": "done here is we've taken our our syntax tree that we originally had in that",
    "start": "986940",
    "end": "992339"
  },
  {
    "text": "python code we've generated to some instructions for it and that we've now evaluated these in our little rust",
    "start": "992339",
    "end": "999060"
  },
  {
    "text": "machine so that's pretty cool but what's the use of this like wouldn't it be handy if we",
    "start": "999060",
    "end": "1004579"
  },
  {
    "text": "could change the numbers for example and make our machine a bit a bit more like a CPU and Tack on some features",
    "start": "1004579",
    "end": "1010699"
  },
  {
    "text": "so let's just recap where we are so we've covered a stack and generated some stack code using pushes and Pops to",
    "start": "1010699",
    "end": "1016279"
  },
  {
    "start": "1012000",
    "end": "1432000"
  },
  {
    "text": "evaluate an equation now Stacks are great but we can only look at the Top Value memory is a bit more powerful so",
    "start": "1016279",
    "end": "1022940"
  },
  {
    "text": "let's take a little look at that so we want our machine to be able to access a big flat array of bytes of",
    "start": "1022940",
    "end": "1029298"
  },
  {
    "text": "memory um let's see what changes",
    "start": "1029299",
    "end": "1034120"
  },
  {
    "text": "I guess first of all um you want some memory actually within our machine and we'll just say it's a vector",
    "start": "1034339",
    "end": "1040100"
  },
  {
    "text": "of bytes that's easy enough and then we want to initialize that down here so again we can just say create an array",
    "start": "1040100",
    "end": "1048500"
  },
  {
    "text": "we'll just go with 64k of memory and we'll just put that into into a vector",
    "start": "1048500",
    "end": "1053620"
  },
  {
    "text": "now let's have a look at this 12 here let's maybe make that uh live in memory",
    "start": "1053620",
    "end": "1059000"
  },
  {
    "text": "instead so what we'll do is we'll need to have an address for it so we'll just call it a",
    "start": "1059000",
    "end": "1065120"
  },
  {
    "text": "and let's have it leave it address I don't know 42 why not",
    "start": "1065120",
    "end": "1071000"
  },
  {
    "text": "um so now what we'll want to do is rather than having the 12 hard-coded here once you are load from this address so we'll",
    "start": "1071000",
    "end": "1078559"
  },
  {
    "text": "need some kind of some kind of load instruction um so our 12 is gone so we'll need to",
    "start": "1078559",
    "end": "1084860"
  },
  {
    "text": "initialize that as well let's have some kind of store on our machine and",
    "start": "1084860",
    "end": "1091039"
  },
  {
    "text": "we we want to I guess store this 12 as as a value so we'll just say it's still",
    "start": "1091039",
    "end": "1098360"
  },
  {
    "text": "an i32 and we'll just pass that over to the to the store method of our machine",
    "start": "1098360",
    "end": "1105559"
  },
  {
    "text": "um cool okay so we're now loading the 12 indirectly from memory",
    "start": "1105559",
    "end": "1110720"
  },
  {
    "text": "um we also want to at the end of this um I suppose we want to have some way of storing the result so let's have a story",
    "start": "1110720",
    "end": "1117919"
  },
  {
    "text": "instruction and this story instruction will take this this whole value here which is calculated and it will start in",
    "start": "1117919",
    "end": "1123740"
  },
  {
    "text": "an address so we've got the value first um which is this part and we also need an",
    "start": "1123740",
    "end": "1130400"
  },
  {
    "text": "address so we'll have that as uh address R which we'll call our result and let's",
    "start": "1130400",
    "end": "1135980"
  },
  {
    "text": "just pop that in memory address 12 for instance so that means now rather than popping",
    "start": "1135980",
    "end": "1141080"
  },
  {
    "text": "the stack we just logged from that address so we'll just say load from address R and there's a little bit of",
    "start": "1141080",
    "end": "1147080"
  },
  {
    "text": "rust casting going on and that should give us our result so we've changed our our bytecode I",
    "start": "1147080",
    "end": "1154640"
  },
  {
    "text": "guess you could call it here uh we now just need to implement these inscriptions so load in the store so",
    "start": "1154640",
    "end": "1159740"
  },
  {
    "text": "let's just come back up here and uh first of all let's do a load so if we're loading I suppose we've got an",
    "start": "1159740",
    "end": "1167000"
  },
  {
    "text": "address to load from which will just pop off the stack and um",
    "start": "1167000",
    "end": "1173419"
  },
  {
    "text": "for this we will then get our value so we'll just say solve that load from that address",
    "start": "1173419",
    "end": "1178820"
  },
  {
    "text": "um a bit of a conversion there and then we'll we'll push that back onto our stack",
    "start": "1178820",
    "end": "1185260"
  },
  {
    "text": "so um now a story is going to be pretty similar um because at this time we're going to",
    "start": "1185660",
    "end": "1191960"
  },
  {
    "text": "have two operands in stove one so first we'll have the value so we'll say about value equals",
    "start": "1191960",
    "end": "1199700"
  },
  {
    "text": "like that and then we'll get the address and then we want to say South dot store and again we'll delegate to this store",
    "start": "1199700",
    "end": "1205400"
  },
  {
    "text": "function and we'll start to our particular address uh this value so now",
    "start": "1205400",
    "end": "1211280"
  },
  {
    "text": "we've just these two functions to implement and so let's just go to there and we'll do the the load on first so",
    "start": "1211280",
    "end": "1219039"
  },
  {
    "text": "this one is uh perhaps a little bit simpler in implementation we'll just take an address and we'll give back a",
    "start": "1219039",
    "end": "1225620"
  },
  {
    "text": "value um so there's a little bit of just",
    "start": "1225620",
    "end": "1232480"
  },
  {
    "text": "a little bit of rust uh wrangling that we need to do um just uh that I'll explain shortly so we need to decide",
    "start": "1233600",
    "end": "1240140"
  },
  {
    "text": "with this memory uh what it looks like um so it's just an array of bytes but we're dealing with 32-bit integers so",
    "start": "1240140",
    "end": "1247400"
  },
  {
    "text": "um I suppose we're going to have a set of bytes and four of them in a 32-bit",
    "start": "1247400",
    "end": "1252799"
  },
  {
    "text": "integer um that we'll we'll want to load from memory so we'll just say itself memory",
    "start": "1252799",
    "end": "1258919"
  },
  {
    "text": "particular address and address plus four so we'll take a slice of four bytes of that memory and then this is where our",
    "start": "1258919",
    "end": "1265280"
  },
  {
    "text": "trying to uh comes from above which is where we're just asserting that this particular size here is of size four and",
    "start": "1265280",
    "end": "1272120"
  },
  {
    "text": "so it will fit into this uh array of four and so that'll always succeed so we",
    "start": "1272120",
    "end": "1277880"
  },
  {
    "text": "can just uh assert that at the end now that's great we've got our byte so how do we convert",
    "start": "1277880",
    "end": "1284299"
  },
  {
    "text": "that into a 32 integer uh we'll just match what most modern machines do and we'll say these bytes are a little",
    "start": "1284299",
    "end": "1290539"
  },
  {
    "text": "ending so what that's saying is if I have the value one two three that's actually stored in memory as three uh",
    "start": "1290539",
    "end": "1296780"
  },
  {
    "text": "two and then one and there's there's a few reasons for this so if we have a pointer to the start of it and we truncate it we",
    "start": "1296780",
    "end": "1303559"
  },
  {
    "text": "actually just still get the three which is kind of what we want in most cases um anyway so we'll create an i32 from",
    "start": "1303559",
    "end": "1311600"
  },
  {
    "text": "the those little Indian bikes that gives us our value",
    "start": "1311600",
    "end": "1317360"
  },
  {
    "text": "cool so that's uh that's that done now our star function is going to be pretty similar",
    "start": "1317360",
    "end": "1324140"
  },
  {
    "text": "and we're mutating ourselves obviously and uh we're going to want some some value to store instead and uh we won't",
    "start": "1324140",
    "end": "1331700"
  },
  {
    "text": "return anything um so this time uh we'll have our bites and",
    "start": "1331700",
    "end": "1337280"
  },
  {
    "text": "we'll get that from the value itself yeah",
    "start": "1337280",
    "end": "1344299"
  },
  {
    "text": "to get the bikes from the value and then we we want to assign that into memory so we've got this uh this slice of four and",
    "start": "1344299",
    "end": "1350780"
  },
  {
    "text": "we'll just say copy from our local slice of pipes here",
    "start": "1350780",
    "end": "1357340"
  },
  {
    "text": "cool so that's our store in our Lord and we've made a few few decisions on things like ending",
    "start": "1357799",
    "end": "1364940"
  },
  {
    "text": "this so moment of truth let's see if this this compiles compiles and does it run we get exactly",
    "start": "1364940",
    "end": "1371720"
  },
  {
    "text": "the same answer so it may seem like we've done a lot of work there for for no benefit but what we've actually done",
    "start": "1371720",
    "end": "1377000"
  },
  {
    "text": "is added a whole new feature to our machine now it actually turns out this",
    "start": "1377000",
    "end": "1382460"
  },
  {
    "text": "is how languages like Java work so I've got a little Java program here that I've",
    "start": "1382460",
    "end": "1387500"
  },
  {
    "text": "called eval and this program takes three inputs uh it times there's two of them together and then adds the third one",
    "start": "1387500",
    "end": "1393740"
  },
  {
    "text": "onto that now if we compile that do you get a little like eval.class file",
    "start": "1393740",
    "end": "1400940"
  },
  {
    "text": "and we can actually dump the the bytecode that Java has generated for us here so if I say eval",
    "start": "1400940",
    "end": "1409640"
  },
  {
    "text": "um so this is the the bytecode um ignoring the first bit you'll notice we've got our our eval function and we",
    "start": "1409640",
    "end": "1415760"
  },
  {
    "text": "have some some loads multiplies and then returns and so what this is doing is exactly the same it's a stack machine",
    "start": "1415760",
    "end": "1422720"
  },
  {
    "text": "that it's pushing and popping from so I think we've made some good progress now we are missing one major feature from",
    "start": "1422720",
    "end": "1429679"
  },
  {
    "text": "our machine um I guess Java has if statements and Loops",
    "start": "1429679",
    "end": "1434960"
  },
  {
    "text": "which we we don't have yet now how do we Implement an if so we can do some kind",
    "start": "1434960",
    "end": "1440600"
  },
  {
    "text": "of a test I guess we need but then we need we need like a go to which a lot of",
    "start": "1440600",
    "end": "1446000"
  },
  {
    "text": "people tend to find morally offensive I suppose but there is a way around it so",
    "start": "1446000",
    "end": "1452419"
  },
  {
    "text": "what we could do is we could have some kind of Branch instruction which will behave as like our test I'll check then",
    "start": "1452419",
    "end": "1458120"
  },
  {
    "text": "we need to decide where to Branch to and we could say there's two choices we might either want to restart a series of",
    "start": "1458120",
    "end": "1464480"
  },
  {
    "text": "instructions to do them again or we might want to to skip ahead and just avoid doing a collection of instructions",
    "start": "1464480",
    "end": "1471980"
  },
  {
    "text": "so that sort of uh gives us two things a loop and a block so that'll look a little bit like this",
    "start": "1471980",
    "end": "1477980"
  },
  {
    "text": "now as any game developer would probably point out you can do anything with enough if statements and while Loops",
    "start": "1477980",
    "end": "1484760"
  },
  {
    "text": "um so this is great we can now do do anything now our Branch instruction here",
    "start": "1484760",
    "end": "1489980"
  },
  {
    "text": "um this BR underscore if has an index in which block or Loop we want to escape from and then we either go to the the",
    "start": "1489980",
    "end": "1497179"
  },
  {
    "text": "start of the loop or the end if it's a block which is what the arrows demonstrate here now I've also made up",
    "start": "1497179",
    "end": "1504020"
  },
  {
    "text": "some some calling instructions here just for demonstration and you notice on the right we've got this this playing BR",
    "start": "1504020",
    "end": "1509840"
  },
  {
    "text": "instruction which which is a branch that will always be followed so this is cool uh why don't we have a go at",
    "start": "1509840",
    "end": "1516200"
  },
  {
    "text": "implementing that in our machine um so we'll get rid of uh we'll get rid of",
    "start": "1516200",
    "end": "1522320"
  },
  {
    "text": "these this uh maths evaluation from before and uh what we're interested in",
    "start": "1522320",
    "end": "1527419"
  },
  {
    "text": "this time is adding up uh all of the numbers between 1 and 100.",
    "start": "1527419",
    "end": "1533960"
  },
  {
    "text": "so that will uh here's our sudo code and um that will look a little bit like this",
    "start": "1533960",
    "end": "1539179"
  },
  {
    "text": "so we'll just pop this into our into our room balance and brackets and then",
    "start": "1539179",
    "end": "1547039"
  },
  {
    "text": "I'll talk you through it so uh we'll start with a t t for total is zero and then for for each number in one to a",
    "start": "1547039",
    "end": "1554120"
  },
  {
    "text": "hundred we'll just add that number to I now there's there's faster ways or better ways of doing this but I think this is a good a good test of control",
    "start": "1554120",
    "end": "1560720"
  },
  {
    "text": "flow um so we need to decide where to store T Web Store I and we'll have our our limit",
    "start": "1560720",
    "end": "1566720"
  },
  {
    "text": "variable and as before uh we'll just initialize these two variables so total",
    "start": "1566720",
    "end": "1571820"
  },
  {
    "text": "will be zero and I will be one now what we've got here is we now have",
    "start": "1571820",
    "end": "1577159"
  },
  {
    "text": "this this Loop instruction which then contains more inscriptions itself um I'll just talk through that so we've",
    "start": "1577159",
    "end": "1583640"
  },
  {
    "text": "got the loop block and then if we have a look here we'll load I we'll load T and",
    "start": "1583640",
    "end": "1588919"
  },
  {
    "text": "then we'll add them together and then we'll want to store that so we'll take the value and the address T and we'll",
    "start": "1588919",
    "end": "1594919"
  },
  {
    "text": "store so that's adding I to T uh similarly below we then take I we",
    "start": "1594919",
    "end": "1599960"
  },
  {
    "text": "load it we then take one add it to I and then we take eyes address and we store",
    "start": "1599960",
    "end": "1605539"
  },
  {
    "text": "it um so we've added I to T added one to I so now we want to do a check so let's",
    "start": "1605539",
    "end": "1611900"
  },
  {
    "text": "load I again and we'll load our limit plus one so we'll load 101 and we'll",
    "start": "1611900",
    "end": "1617179"
  },
  {
    "text": "subtract these so what's going on here is um we're wanting to see if this",
    "start": "1617179",
    "end": "1622580"
  },
  {
    "text": "subtraction comes to zero because our test is basically going to say is of register zero and if it's zero then",
    "start": "1622580",
    "end": "1630020"
  },
  {
    "text": "um then we'll not take advantage otherwise we will so if we've taken away 101 from I and that's zero then that",
    "start": "1630020",
    "end": "1637580"
  },
  {
    "text": "means I must be 101 so in that case um we we don't want to Branch otherwise",
    "start": "1637580",
    "end": "1643159"
  },
  {
    "text": "we'll say Branch to a depth of zero and the zero just means that we're going to go to this outermost Loop here and",
    "start": "1643159",
    "end": "1650900"
  },
  {
    "text": "continue the loop so finally at the end I suppose we want to load our T and see",
    "start": "1650900",
    "end": "1656779"
  },
  {
    "text": "what our result is so we've got our our bytecode here and we just need to",
    "start": "1656779",
    "end": "1661820"
  },
  {
    "text": "implement a couple of these new instructions so let's have a look at that um",
    "start": "1661820",
    "end": "1667580"
  },
  {
    "text": "I suppose the first one that we want to implement is our friendship and that's going to have some depth now",
    "start": "1667580",
    "end": "1674720"
  },
  {
    "text": "with this um what we want to do is look at a condition that's on the stack so let's",
    "start": "1674720",
    "end": "1681260"
  },
  {
    "text": "let's just pop that off the stack first and uh we'll just say if it's a Boolean",
    "start": "1681260",
    "end": "1687799"
  },
  {
    "text": "so we'll just do a bit of an into to get that then we need to return some kind of some kind of way of seeing break at this",
    "start": "1687799",
    "end": "1694100"
  },
  {
    "text": "depth so let's let's just start invent anything for that shall we let's just go",
    "start": "1694100",
    "end": "1699559"
  },
  {
    "text": "up here and we'll create that scar finishing and we can either finish code normally with a gun or I suppose we",
    "start": "1699559",
    "end": "1707659"
  },
  {
    "text": "can break at some some depth which will just just use a u32 for that",
    "start": "1707659",
    "end": "1714559"
  },
  {
    "text": "um cool so we we've got that I suppose we want our um unconditional version of this so",
    "start": "1714559",
    "end": "1720440"
  },
  {
    "text": "we'll get rid of the F we'll not pop the value and we'll just say break at that depth",
    "start": "1720440",
    "end": "1726500"
  },
  {
    "text": "cool so those are our brake instructions next we need our Loop instructions so let's pop that in here so we'll say",
    "start": "1726500",
    "end": "1732799"
  },
  {
    "text": "we've got a loop and the loop contains some instructions now how do we Implement a loop oh",
    "start": "1732799",
    "end": "1738860"
  },
  {
    "text": "easy we can just pop it inside a loop so what I want to do is we want to run",
    "start": "1738860",
    "end": "1743960"
  },
  {
    "text": "these instructions and then depending on how they finish effects how we finish so if they come to some kind of a normal",
    "start": "1743960",
    "end": "1751100"
  },
  {
    "text": "conclusion then that's fine we'll just complete ourselves as well so we'll break and this break will just get us",
    "start": "1751100",
    "end": "1757760"
  },
  {
    "text": "out of this Loop now if they come to some kind of a break then this is where things get a little",
    "start": "1757760",
    "end": "1763520"
  },
  {
    "text": "bit more interesting um I suppose if uh if it's breaking then",
    "start": "1763520",
    "end": "1768980"
  },
  {
    "text": "the depth is zero then that means it is it is us so um we're sort of saying we want to we want",
    "start": "1768980",
    "end": "1774740"
  },
  {
    "text": "to Branch back up to this Loop so we'll just we'll just say continue here",
    "start": "1774740",
    "end": "1780320"
  },
  {
    "text": "um but that's only if the depth is zero so let's just uh",
    "start": "1780320",
    "end": "1786460"
  },
  {
    "text": "depth of zero then we'll continue otherwise uh the depth is greater than zero so we'll want to propagate this",
    "start": "1788779",
    "end": "1794779"
  },
  {
    "text": "break so let's do that",
    "start": "1794779",
    "end": "1798460"
  },
  {
    "text": "and uh when we propagate it we'll just subtract one from the depth to make sure that it um it sort of uh nests properly",
    "start": "1800000",
    "end": "1807260"
  },
  {
    "text": "so if we're breaking out of here then we'll subtract one and that will take us up to reference in the next block",
    "start": "1807260",
    "end": "1813860"
  },
  {
    "text": "cool okay so I guess our our block inscription like our Loop is going to be",
    "start": "1813860",
    "end": "1819200"
  },
  {
    "text": "pretty similar we'll just code that up so we'll have a loop here and only this time uh if we hit a done then there's no",
    "start": "1819200",
    "end": "1827720"
  },
  {
    "text": "well there's no Loop so there's nothing to break from so a done will actually just do nothing",
    "start": "1827720",
    "end": "1833840"
  },
  {
    "text": "let's bring that back in and if we hit a break then that means we want to finish executing the code that",
    "start": "1833840",
    "end": "1840440"
  },
  {
    "text": "we're we're at if depth is zero um otherwise we want to propagate it so",
    "start": "1840440",
    "end": "1845659"
  },
  {
    "text": "we can just say if the depth is greater than zero then get the brick cool so let's see if that compiles",
    "start": "1845659",
    "end": "1852919"
  },
  {
    "text": "and uh oh we've got a few things here so actual function needs to return some",
    "start": "1852919",
    "end": "1860059"
  },
  {
    "text": "finish so we'll just add that and the normal way of finishing will be",
    "start": "1860059",
    "end": "1865220"
  },
  {
    "text": "just the normal gun so let's give that a well so when I run this now what we what",
    "start": "1865220",
    "end": "1872179"
  },
  {
    "text": "we're going back to is our code from before where we're counting off the",
    "start": "1872179",
    "end": "1877220"
  },
  {
    "text": "numbers between 1 and 100 and that should sum to fight 50 50.",
    "start": "1877220",
    "end": "1882260"
  },
  {
    "text": "she does fantastic so I'm pretty happy with our little machine that we have now we can take some machine code and we can",
    "start": "1882260",
    "end": "1888860"
  },
  {
    "text": "execute it now it's quite laborious right in all this this machine code 200 CPU though we've done a few naughty",
    "start": "1888860",
    "end": "1895820"
  },
  {
    "text": "examples here and I'm after running something a little bit larger and but I don't want to have to mess around trying",
    "start": "1895820",
    "end": "1901760"
  },
  {
    "text": "to generate all of this this bytecode I guess you could call it a bit handy if",
    "start": "1901760",
    "end": "1907520"
  },
  {
    "text": "someone could do this for us now it just so happens that my my machine that we have here is",
    "start": "1907520",
    "end": "1915559"
  },
  {
    "start": "1912000",
    "end": "1927000"
  },
  {
    "text": "webassembly and luckily for us my colleague Colin wrote a webassembly compiler which can generate all of these",
    "start": "1915559",
    "end": "1921980"
  },
  {
    "text": "little pushes pops consts and so on for us so just to clarify that because it it's",
    "start": "1921980",
    "end": "1928100"
  },
  {
    "start": "1927000",
    "end": "1948000"
  },
  {
    "text": "a lot to uh to take in we've got a machine that can execute a bunch of instructions that we've made up uh now",
    "start": "1928100",
    "end": "1934520"
  },
  {
    "text": "we need a machine to actually generate those instructions in the first place um so that's the the code generator that",
    "start": "1934520",
    "end": "1940159"
  },
  {
    "text": "gives us the web assembly that we feed into our machine and then eventually we get the output",
    "start": "1940159",
    "end": "1945440"
  },
  {
    "text": "so Colleen's talk what was that all about now if you've not seen it I'd recommend it it's on YouTube and it's a",
    "start": "1945440",
    "end": "1951980"
  },
  {
    "text": "good overview for how to put together a compiler so Colin invented a language called Chasm shown here and using that",
    "start": "1951980",
    "end": "1960380"
  },
  {
    "text": "he coded a program which can generate an image of a handlebot now at the end of",
    "start": "1960380",
    "end": "1965419"
  },
  {
    "text": "his talk Colleen demonstrated this chord by running it in a browser which then displayed this this manual Pro Image",
    "start": "1965419",
    "end": "1971840"
  },
  {
    "text": "um today we're going to take the place of the browser um so how did I go about this well I",
    "start": "1971840",
    "end": "1978260"
  },
  {
    "text": "went to uh the website that Collins made and um what I did was you can either interpret",
    "start": "1978260",
    "end": "1985700"
  },
  {
    "text": "this custom code or you can run it as a compiler um so I ran that part way through and um",
    "start": "1985700",
    "end": "1994100"
  },
  {
    "text": "I then um so I ran that part way through and uh I sort of paused it before it was about to",
    "start": "1994100",
    "end": "2000220"
  },
  {
    "text": "execute it and I pinched all of the webassembly code from uh Collins Chasm",
    "start": "2000220",
    "end": "2006100"
  },
  {
    "text": "that had been generated so this gave me this uh this mandelbrot wasn't so we'll just have a look at that so here's the",
    "start": "2006100",
    "end": "2013299"
  },
  {
    "text": "file um now that's a binary format so we we can actually see what's in it but luckily there's uh there's a few tools",
    "start": "2013299",
    "end": "2019720"
  },
  {
    "text": "that we can use that will do that for us so if I run this uh wasm to what tool",
    "start": "2019720",
    "end": "2024880"
  },
  {
    "text": "that will give us the uh web assembly in a text format and it's it's nicely indented so we can have a rough idea of",
    "start": "2024880",
    "end": "2031299"
  },
  {
    "text": "what's going on what's going on so there's a few Loops here and so on so let's get that into our machine uh",
    "start": "2031299",
    "end": "2038140"
  },
  {
    "text": "we'll just get rid of this bit to begin with um now if we run the same thing awesome to what",
    "start": "2038140",
    "end": "2045880"
  },
  {
    "text": "and we'll win it on the mandelbrot this is great so we've got it into our machine uh the problem is we can't",
    "start": "2045880",
    "end": "2051760"
  },
  {
    "text": "execute this uh this this is rust code um but we can tidy up a little bit so",
    "start": "2051760",
    "end": "2056980"
  },
  {
    "text": "we'll just get rid of some of the things that we don't need and then um I guess we need to just convert this into into",
    "start": "2056980",
    "end": "2064419"
  },
  {
    "text": "the bytecode that we have before now it's a line to line conversion and it just so happens",
    "start": "2064419",
    "end": "2070780"
  },
  {
    "text": "um I've got a throwback to earlier so talking of regular Expressions it might not be powerful but they're really",
    "start": "2070780",
    "end": "2076179"
  },
  {
    "text": "useful and here I've got some that can just convert all of this web assembly code into uh rust for us so let's just",
    "start": "2076179",
    "end": "2084040"
  },
  {
    "text": "give that a go do all the substitutions and here we go so we had before the webassembly and now",
    "start": "2084040",
    "end": "2091000"
  },
  {
    "text": "we've got it into rust so fantastic that makes our lives a lot easier",
    "start": "2091000",
    "end": "2096398"
  },
  {
    "text": "I'll just sort out some some brackets for this just check we've got everything right",
    "start": "2096399",
    "end": "2103300"
  },
  {
    "text": "um cool okay so that's our web assembly code um now there's a few extra instructions",
    "start": "2103300",
    "end": "2110980"
  },
  {
    "text": "here you might have spotted um so first we've got a few extra operators",
    "start": "2110980",
    "end": "2116079"
  },
  {
    "text": "um we've got these uh Bin up this less than signed operator and a couple of",
    "start": "2116079",
    "end": "2122020"
  },
  {
    "text": "others so we'll just bring those in to our machine up here always wanted to say this here's one I",
    "start": "2122020",
    "end": "2128920"
  },
  {
    "text": "made earlier so here are binary operators so we've got a divide and and less than so we'll just pop them in",
    "start": "2128920",
    "end": "2135339"
  },
  {
    "text": "there and then we've also got this new uh uni operator um now what this does is rather than the",
    "start": "2135339",
    "end": "2141579"
  },
  {
    "text": "binary one which takes two this just takes a single value and we've got a equal to zero and a truncation one",
    "start": "2141579",
    "end": "2148000"
  },
  {
    "text": "um so we'll just we'll just deal with that so it's the same kind of story we'll pop something off the stack do",
    "start": "2148000",
    "end": "2153700"
  },
  {
    "text": "something with it and then push the result back onto the stack um if we go back down you'll also notice",
    "start": "2153700",
    "end": "2159280"
  },
  {
    "text": "there's all these these locals which we can get in set now and that's how Colin implements these variables so X and Y uh",
    "start": "2159280",
    "end": "2167020"
  },
  {
    "text": "a local is kind of like a fixed bit of memory so",
    "start": "2167020",
    "end": "2172119"
  },
  {
    "text": "um we we can just Implement that similarly to uh similarly to our memory up here so again we'll just putting that",
    "start": "2172119",
    "end": "2179680"
  },
  {
    "text": "in and we'll just treat the locals as a bit of a dictionary so we'll we'll get the",
    "start": "2179680",
    "end": "2185920"
  },
  {
    "text": "the indexed local and we'll push onto the stack for a local get and for a set we'll just uh insert that into our",
    "start": "2185920",
    "end": "2192880"
  },
  {
    "text": "dictionary so we need to create this dictionary so let's just do this here and we'll just use let's use a hash map",
    "start": "2192880",
    "end": "2201280"
  },
  {
    "text": "it's an index that maps onto a value so we'll just need to bring that in as well",
    "start": "2201280",
    "end": "2208320"
  },
  {
    "text": "okay and I suppose we'll need to pass that around wherever we call run so we'll just say instructions and vocals",
    "start": "2210160",
    "end": "2218519"
  },
  {
    "text": "and right at the end here as well so great we've got our local pastor and",
    "start": "2221020",
    "end": "2226839"
  },
  {
    "text": "we'll just create them up here",
    "start": "2226839",
    "end": "2229980"
  },
  {
    "text": "um and we we can just assume the Collins code will always initialize local before using it so we don't need to worry about",
    "start": "2232540",
    "end": "2238300"
  },
  {
    "text": "any of that um there's one uh other inscription that we need to look at and this is a store",
    "start": "2238300",
    "end": "2244839"
  },
  {
    "text": "instruction uh actually a story which is what Colin used for generating the the bitmap so we want to just take the the",
    "start": "2244839",
    "end": "2250960"
  },
  {
    "text": "bottom eight bits of a value install them so let's just Implement that up",
    "start": "2250960",
    "end": "2256300"
  },
  {
    "text": "here near our little slow instruction",
    "start": "2256300",
    "end": "2260160"
  },
  {
    "text": "so similarly to the store this one also pops value pops an address and then we",
    "start": "2262260",
    "end": "2268180"
  },
  {
    "text": "we take the bytes and then we'll just take the bottom byte so the zeroth byte and store that at that address",
    "start": "2268180",
    "end": "2273820"
  },
  {
    "text": "cool so those are the extra instructions now added um there's one other thing though we're",
    "start": "2273820",
    "end": "2279640"
  },
  {
    "text": "generating a manual drop but at the moment we've just been popping a single value from the stack so how how can we",
    "start": "2279640",
    "end": "2285880"
  },
  {
    "text": "view this well um the way that Collins code works is it generates the the mandelbrot in memory",
    "start": "2285880",
    "end": "2292599"
  },
  {
    "text": "so it's like a 100 by 100 image so if we have some sort of bitmap I suppose we",
    "start": "2292599",
    "end": "2299320"
  },
  {
    "text": "want to we want to have like an image and we'll just say it's a 100 by 100",
    "start": "2299320",
    "end": "2305920"
  },
  {
    "text": "image and then we need to populate this image um from the from the memory that's in our machine and then once we've done",
    "start": "2305920",
    "end": "2312579"
  },
  {
    "text": "that we'll just print it out and actually let's take a look at it um so how do we how do we do that well",
    "start": "2312579",
    "end": "2319540"
  },
  {
    "text": "we can just go over all the coordinates and uh for each coordinate uh we'll get the uh the",
    "start": "2319540",
    "end": "2327339"
  },
  {
    "text": "ice byte of memory and we'll just say yep the image of that coordinate is that byte so this will take us left to right",
    "start": "2327339",
    "end": "2333520"
  },
  {
    "text": "top to bottom over the image so let's see if that works now we've uh oh",
    "start": "2333520",
    "end": "2340240"
  },
  {
    "text": "a few Imports missing that I just need to add one",
    "start": "2340240",
    "end": "2346540"
  },
  {
    "text": "um oh we need to bring in our image and pass away",
    "start": "2346540",
    "end": "2352260"
  },
  {
    "text": "there's a reference to our locals and our image is in this TT vibe bitmap",
    "start": "2353079",
    "end": "2359680"
  },
  {
    "text": "module that I think so we'll just bring that in and do and use the the image one",
    "start": "2359680",
    "end": "2366339"
  },
  {
    "text": "okay um but there's some unused variable that doesn't matter so this is great when we run this it",
    "start": "2366339",
    "end": "2372820"
  },
  {
    "text": "should generate a mandelbrot now this is really the White Knuckle ride because",
    "start": "2372820",
    "end": "2378040"
  },
  {
    "text": "it's quite a bit of code and we've no idea whether this will actually work correctly because I've just coupled this",
    "start": "2378040",
    "end": "2383619"
  },
  {
    "text": "together um so here's the Moment of Truth hopefully it will give us a mandelbrot image at the end",
    "start": "2383619",
    "end": "2389980"
  },
  {
    "text": "the the program's done and what do we have here well it's the same mandelbrot",
    "start": "2389980",
    "end": "2395079"
  },
  {
    "text": "image from Collins uh rotated a little because uh there's differences in uh where the y-axis starts um but uh there",
    "start": "2395079",
    "end": "2404020"
  },
  {
    "text": "it is Collins code actually running and uh on our little machine",
    "start": "2404020",
    "end": "2409060"
  },
  {
    "text": "so I'm really pleased with that I'm glad that worked now what's going on here uh I guess you",
    "start": "2409060",
    "end": "2416079"
  },
  {
    "text": "could say this is a this is a Chasm program running in an awful interpreter do not use this in production now the",
    "start": "2416079",
    "end": "2422800"
  },
  {
    "text": "the software for it is Chasm code our webassembly I guess I guess you can call it whichever you like both history to",
    "start": "2422800",
    "end": "2429820"
  },
  {
    "text": "quote everyone it depends on your point of view but it's pretty amazing we've taken this webassembly thing and we've",
    "start": "2429820",
    "end": "2435700"
  },
  {
    "text": "run it nowhere near a browser just from just from something that we've knocked together in the past 30 minutes and",
    "start": "2435700",
    "end": "2442060"
  },
  {
    "text": "we've still got the same result we compete behind the scenes and decide actually how we want this webassembly",
    "start": "2442060",
    "end": "2447160"
  },
  {
    "text": "code to run so we can not only run webassemble the code but um anything that compiles to every single so you can",
    "start": "2447160",
    "end": "2454119"
  },
  {
    "text": "run c chord C plus plus Swift or even perhaps rust code AS webassembly then",
    "start": "2454119",
    "end": "2459820"
  },
  {
    "text": "inside our rust interpreter which uh I think is pretty cool so to recap we've managed to go all the",
    "start": "2459820",
    "end": "2466960"
  },
  {
    "text": "way from having a simple stack up to running pretty arbitrary code on our little machine and I think this is",
    "start": "2466960",
    "end": "2472420"
  },
  {
    "text": "amazing it really is Turtles all the way down and this brings us to the end of my talk",
    "start": "2472420",
    "end": "2478540"
  },
  {
    "text": "so uh thanks for watching I've had a fantastic time",
    "start": "2478540",
    "end": "2483780"
  },
  {
    "text": "so yeah this is the UA so if anyone's got any questions they want to ask please do just pop them",
    "start": "2486640",
    "end": "2493960"
  },
  {
    "text": "in the chat we've got a few observations one of them is mandelbrot fractal",
    "start": "2493960",
    "end": "2499420"
  },
  {
    "text": "exclamation mark I guess it's my favorite fractal I don't",
    "start": "2499420",
    "end": "2505599"
  },
  {
    "text": "know about you yeah yeah mine too um it would have been cool if I could have added a bit of a zoom and just just",
    "start": "2505599",
    "end": "2512020"
  },
  {
    "text": "go into the the mandelbrot and see if it's Turtles all the way down there I mean it's got to stop eventually right",
    "start": "2512020",
    "end": "2519940"
  },
  {
    "text": "I've heard that it doesn't you know I haven't got the computer",
    "start": "2519940",
    "end": "2524880"
  },
  {
    "text": "same no no especially not if you're running that kind of interpreter that I wrote as well",
    "start": "2525640",
    "end": "2532319"
  },
  {
    "text": "two minutes it's like someone had stopwatch didn't they yep yeah I uh I really had to trim some",
    "start": "2536800",
    "end": "2544119"
  },
  {
    "text": "things down to uh to get everything in but I feel I kept it to uh to the most important bits um I was glad that I had",
    "start": "2544119",
    "end": "2550480"
  },
  {
    "text": "the the templates at the end because I I think there was uh a lot of it was repeated like I I quite like that about",
    "start": "2550480",
    "end": "2556660"
  },
  {
    "text": "web assembly once you can grasp the um the main mic instructions that you have sort of stores loads and and so on you",
    "start": "2556660",
    "end": "2564880"
  },
  {
    "text": "you can sort of tell what what everything's going to do and it it like opens up uh the rest of webassembly for",
    "start": "2564880",
    "end": "2571180"
  },
  {
    "text": "you really um it's it's just very accessible language yeah it's super simple have you done",
    "start": "2571180",
    "end": "2576820"
  },
  {
    "text": "anything with other assembly languages before then yeah so I've uh I've done a",
    "start": "2576820",
    "end": "2582220"
  },
  {
    "text": "little bit of tinkering with the x86 so that's the uh the assembly language that most of our machines went on um unless",
    "start": "2582220",
    "end": "2589000"
  },
  {
    "text": "you're on one of the new uh M1 Max or or a phone of course which is on um so I in my spare time I've written a",
    "start": "2589000",
    "end": "2595780"
  },
  {
    "text": "c compiler um which targets does and uh that's quite a bit more difficult than webassembly there's no safety there",
    "start": "2595780",
    "end": "2603040"
  },
  {
    "text": "um so you know if you're writing C or anything like that you get you get the whole jungle as well as the the banana",
    "start": "2603040",
    "end": "2609579"
  },
  {
    "text": "and the gorilla that's holding on to it um so how does the instruction set actually prepare because I know the web",
    "start": "2609579",
    "end": "2614859"
  },
  {
    "text": "assembly instructions set quite well I mean I couldn't tell you all the instructions but I know they're about 40",
    "start": "2614859",
    "end": "2620380"
  },
  {
    "text": "or 50 and then we're all really quite simple the next 86 how does it compare",
    "start": "2620380",
    "end": "2625900"
  },
  {
    "text": "is it a larger instruction set are the instructions in some cases",
    "start": "2625900",
    "end": "2631599"
  },
  {
    "text": "a little bit more complicated in terms of the Operation Safe form yeah yeah so I think that's uh that's a good question",
    "start": "2631599",
    "end": "2637960"
  },
  {
    "text": "and there's a lot of uh routes that we that we could talk about there so um when you asked about the the size of",
    "start": "2637960",
    "end": "2643839"
  },
  {
    "text": "the instruction set so for x86 there's something ridiculous like 50 000",
    "start": "2643839",
    "end": "2649060"
  },
  {
    "text": "instructions and this is including like um yeah of the single instruction",
    "start": "2649060",
    "end": "2655240"
  },
  {
    "text": "multiple data like um super scale oh yeah 70 massively multipliers yeah yeah",
    "start": "2655240",
    "end": "2661660"
  },
  {
    "text": "exactly and then you've got a lot of built-in instructions that uh that aren't really used anymore but are just",
    "start": "2661660",
    "end": "2666940"
  },
  {
    "text": "there for backwards compatibility so running it in 16-bit mod or you've got things like uh uh like figuring out um",
    "start": "2666940",
    "end": "2674619"
  },
  {
    "text": "sign so trigger trigonometry trigonometric functions uh that no one uses because they can actually be",
    "start": "2674619",
    "end": "2680140"
  },
  {
    "text": "implemented faster in software uh funnily enough there are trig functions on a CPU yep yeah exactly and there's",
    "start": "2680140",
    "end": "2686740"
  },
  {
    "text": "even um let me if I remember rightly it's either Char 256 or",
    "start": "2686740",
    "end": "2693099"
  },
  {
    "text": "um I think there's several cryptographic instructions on the CPU as well there was a bit of a",
    "start": "2693099",
    "end": "2698619"
  },
  {
    "text": "um a conspiracy about that where um the Linux kernel is going to use some of these and uh some people like oh no we",
    "start": "2698619",
    "end": "2704920"
  },
  {
    "text": "can't use that we we don't know the source of Random and we don't know if it's if it's cryptographically sound and",
    "start": "2704920",
    "end": "2711040"
  },
  {
    "text": "so on so yeah the the inscription set has really uh swelled over the years and and there's quite a lot of scope creep",
    "start": "2711040",
    "end": "2718359"
  },
  {
    "text": "um but if you if you take it back to its Basics like the original 86 8086 chip",
    "start": "2718359",
    "end": "2724720"
  },
  {
    "text": "um it's yeah you can draw a lot of parallels with webassembly um you know you've got the basic",
    "start": "2724720",
    "end": "2730060"
  },
  {
    "text": "um add-in store uh in uh ad multiply and so on and then you've got your loads and",
    "start": "2730060",
    "end": "2735460"
  },
  {
    "text": "stores uh your calls and returns and uh whatnot but I I always um get the",
    "start": "2735460",
    "end": "2740680"
  },
  {
    "text": "feeling with the webassembly it's a lot safer and it's more structured so Loops as you saw in the talk",
    "start": "2740680",
    "end": "2747040"
  },
  {
    "text": "um yeah it's already demarked where what exactly um will be looped over whereas in in x86",
    "start": "2747040",
    "end": "2754180"
  },
  {
    "text": "it's just you just jump and it just so happens to make a loop to a different memory address yeah yeah",
    "start": "2754180",
    "end": "2761980"
  },
  {
    "text": "and that's very arbitrary webassembly it's a break to a particular stack tips isn't it yeah yeah exactly",
    "start": "2761980",
    "end": "2769900"
  },
  {
    "text": "that which you would think one would be more powerful than you than the other but it turns out they're both equally",
    "start": "2769900",
    "end": "2776680"
  },
  {
    "text": "um as powerful and an equivalent in the end which I also find quite kind of interesting",
    "start": "2776680",
    "end": "2782079"
  },
  {
    "text": "to but from a security perspective break to a staff death is inherently",
    "start": "2782079",
    "end": "2787119"
  },
  {
    "text": "more secure I guess yeah exactly and uh just as easy to",
    "start": "2787119",
    "end": "2792819"
  },
  {
    "text": "generate code for cool I think we're we're done with this session what we're supposed to do is pop",
    "start": "2792819",
    "end": "2798940"
  },
  {
    "text": "back to the hangout which could just be us to talking about processes once again",
    "start": "2798940",
    "end": "2804099"
  },
  {
    "text": "but uh if anyone wants to join us on the hangout uh it's uh you know anyone can",
    "start": "2804099",
    "end": "2809380"
  },
  {
    "text": "just turn their camera on turn their mic on and just say hi and talk about anything you like really",
    "start": "2809380",
    "end": "2815680"
  },
  {
    "text": "so cheers for that Rob imagine I really enjoyed that and catch you in a second sounds good catch you then",
    "start": "2815680",
    "end": "2823859"
  },
  {
    "text": "foreign [Music]",
    "start": "2824619",
    "end": "2832340"
  }
]