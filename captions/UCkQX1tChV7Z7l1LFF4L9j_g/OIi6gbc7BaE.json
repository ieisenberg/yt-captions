[
  {
    "text": "hello everyone and thank you so much for",
    "start": "960",
    "end": "3040"
  },
  {
    "text": "joining me in this talk on what's new in",
    "start": "3040",
    "end": "4720"
  },
  {
    "text": "java 16.",
    "start": "4720",
    "end": "6160"
  },
  {
    "text": "my name is sander mack and in this talk",
    "start": "6160",
    "end": "8320"
  },
  {
    "text": "i would like to guide you through",
    "start": "8320",
    "end": "9679"
  },
  {
    "text": "some of the highlights that are",
    "start": "9679",
    "end": "11040"
  },
  {
    "text": "delivered with java 16.",
    "start": "11040",
    "end": "13759"
  },
  {
    "text": "before we get started a little bit about",
    "start": "13759",
    "end": "15360"
  },
  {
    "text": "myself i've been active in the java",
    "start": "15360",
    "end": "17600"
  },
  {
    "text": "community for",
    "start": "17600",
    "end": "18480"
  },
  {
    "text": "far over decades and currently i'm part",
    "start": "18480",
    "end": "21199"
  },
  {
    "text": "of",
    "start": "21199",
    "end": "21600"
  },
  {
    "text": "picnic in the tech leadership team of an",
    "start": "21600",
    "end": "23760"
  },
  {
    "text": "online grocery scale up",
    "start": "23760",
    "end": "25439"
  },
  {
    "text": "so we're using a lot of a lot of java",
    "start": "25439",
    "end": "28000"
  },
  {
    "text": "but at the same time i'm also very",
    "start": "28000",
    "end": "30000"
  },
  {
    "text": "active in terms of knowledge sharing for",
    "start": "30000",
    "end": "32238"
  },
  {
    "text": "example through conferences like these",
    "start": "32239",
    "end": "34239"
  },
  {
    "text": "but also on pluralsight as an online",
    "start": "34239",
    "end": "36320"
  },
  {
    "text": "e-learning platform",
    "start": "36320",
    "end": "37920"
  },
  {
    "text": "when java 9 was released in 2017",
    "start": "37920",
    "end": "41280"
  },
  {
    "text": "i had the opportunity to work on a book",
    "start": "41280",
    "end": "43440"
  },
  {
    "text": "together with paul bucker around the",
    "start": "43440",
    "end": "45039"
  },
  {
    "text": "module system that is in there",
    "start": "45039",
    "end": "46559"
  },
  {
    "text": "this is not something that we'll be",
    "start": "46559",
    "end": "47760"
  },
  {
    "text": "talking about today because in java 16",
    "start": "47760",
    "end": "49760"
  },
  {
    "text": "the module system",
    "start": "49760",
    "end": "50719"
  },
  {
    "text": "is still there but it's not new anymore",
    "start": "50719",
    "end": "53199"
  },
  {
    "text": "so today we're going to focus",
    "start": "53199",
    "end": "55039"
  },
  {
    "text": "on some other topics that are coming up",
    "start": "55039",
    "end": "57280"
  },
  {
    "text": "in java",
    "start": "57280",
    "end": "58879"
  },
  {
    "text": "so java 16 itself has been released in",
    "start": "58879",
    "end": "61840"
  },
  {
    "text": "march of this year",
    "start": "61840",
    "end": "63280"
  },
  {
    "text": "it is the first release for this year",
    "start": "63280",
    "end": "65040"
  },
  {
    "text": "and java 17 will be coming",
    "start": "65040",
    "end": "67200"
  },
  {
    "text": "in september java 17 will be the next",
    "start": "67200",
    "end": "70000"
  },
  {
    "text": "long-term support",
    "start": "70000",
    "end": "71119"
  },
  {
    "text": "release and in this talk i'm not going",
    "start": "71119",
    "end": "73280"
  },
  {
    "text": "to go into what long-term support means",
    "start": "73280",
    "end": "75680"
  },
  {
    "text": "and why",
    "start": "75680",
    "end": "76479"
  },
  {
    "text": "an lts release feels and behaves",
    "start": "76479",
    "end": "79280"
  },
  {
    "text": "different in the community",
    "start": "79280",
    "end": "80479"
  },
  {
    "text": "than the non-lcs releases like java 16.",
    "start": "80479",
    "end": "84240"
  },
  {
    "text": "but suffice to know that java 16 has",
    "start": "84240",
    "end": "86240"
  },
  {
    "text": "been released as a ga build",
    "start": "86240",
    "end": "88000"
  },
  {
    "text": "and can be used in production so that's",
    "start": "88000",
    "end": "90159"
  },
  {
    "text": "why i wanted to highlight",
    "start": "90159",
    "end": "91759"
  },
  {
    "text": "a few changes in java 16",
    "start": "91759",
    "end": "95119"
  },
  {
    "text": "and most notably we're going to look at",
    "start": "95119",
    "end": "97360"
  },
  {
    "text": "both",
    "start": "97360",
    "end": "98159"
  },
  {
    "text": "the stream api because there's a small",
    "start": "98159",
    "end": "100400"
  },
  {
    "text": "delight in there that i would like to",
    "start": "100400",
    "end": "101840"
  },
  {
    "text": "share with you",
    "start": "101840",
    "end": "102960"
  },
  {
    "text": "but other than the stream api update i",
    "start": "102960",
    "end": "105439"
  },
  {
    "text": "mostly want to focus",
    "start": "105439",
    "end": "106799"
  },
  {
    "text": "on language changes so language changes",
    "start": "106799",
    "end": "110399"
  },
  {
    "text": "are actually delivered in java 16 and",
    "start": "110399",
    "end": "112720"
  },
  {
    "text": "some of the previous versions as well",
    "start": "112720",
    "end": "114640"
  },
  {
    "text": "so in the next lts release in java 17",
    "start": "114640",
    "end": "117200"
  },
  {
    "text": "you will have",
    "start": "117200",
    "end": "117920"
  },
  {
    "text": "a lot of new features if you compare it",
    "start": "117920",
    "end": "120159"
  },
  {
    "text": "to for example the previous java 11",
    "start": "120159",
    "end": "122240"
  },
  {
    "text": "lts release or even java 8 if that's",
    "start": "122240",
    "end": "124479"
  },
  {
    "text": "where you're still",
    "start": "124479",
    "end": "126000"
  },
  {
    "text": "now before we move to these these",
    "start": "126000",
    "end": "128000"
  },
  {
    "text": "language features let's have a look at",
    "start": "128000",
    "end": "129759"
  },
  {
    "text": "this stream api improvement that is",
    "start": "129759",
    "end": "131680"
  },
  {
    "text": "delivered in java 16.",
    "start": "131680",
    "end": "134560"
  },
  {
    "text": "so this piece of code should probably",
    "start": "134560",
    "end": "136800"
  },
  {
    "text": "look pretty familiar to you",
    "start": "136800",
    "end": "138160"
  },
  {
    "text": "if you're used to working with the",
    "start": "138160",
    "end": "139680"
  },
  {
    "text": "streams api so",
    "start": "139680",
    "end": "141520"
  },
  {
    "text": "we have here a stream of some strings we",
    "start": "141520",
    "end": "144000"
  },
  {
    "text": "map a function over it",
    "start": "144000",
    "end": "145280"
  },
  {
    "text": "then we filter and in the end we want to",
    "start": "145280",
    "end": "148160"
  },
  {
    "text": "materialize the stream",
    "start": "148160",
    "end": "149440"
  },
  {
    "text": "into a list usually you use the terminal",
    "start": "149440",
    "end": "152800"
  },
  {
    "text": "operation collects and then",
    "start": "152800",
    "end": "154239"
  },
  {
    "text": "pass in a collector and this collects",
    "start": "154239",
    "end": "157840"
  },
  {
    "text": "and then passing in collectors.2 list is",
    "start": "157840",
    "end": "159920"
  },
  {
    "text": "something that we see a lot",
    "start": "159920",
    "end": "161360"
  },
  {
    "text": "and feels a little bit boilerplatey",
    "start": "161360",
    "end": "163040"
  },
  {
    "text": "right so the nice thing is that in java",
    "start": "163040",
    "end": "165599"
  },
  {
    "text": "16",
    "start": "165599",
    "end": "166640"
  },
  {
    "text": "a new method was added to the stream api",
    "start": "166640",
    "end": "170080"
  },
  {
    "text": "and instead of doing a collect with this",
    "start": "170080",
    "end": "172080"
  },
  {
    "text": "collector's two lists we can now",
    "start": "172080",
    "end": "173599"
  },
  {
    "text": "immediately call to list as terminal",
    "start": "173599",
    "end": "176000"
  },
  {
    "text": "operation of our stream",
    "start": "176000",
    "end": "177280"
  },
  {
    "text": "which results in a list of strings that",
    "start": "177280",
    "end": "180080"
  },
  {
    "text": "we get back",
    "start": "180080",
    "end": "181120"
  },
  {
    "text": "where we now only get the features that",
    "start": "181120",
    "end": "182640"
  },
  {
    "text": "contain a space",
    "start": "182640",
    "end": "184720"
  },
  {
    "text": "now this list that we get back is",
    "start": "184720",
    "end": "187840"
  },
  {
    "text": "an unmodifiable list so you cannot add",
    "start": "187840",
    "end": "190400"
  },
  {
    "text": "or remove",
    "start": "190400",
    "end": "191040"
  },
  {
    "text": "any elements anymore if you want to",
    "start": "191040",
    "end": "193440"
  },
  {
    "text": "collect into a mutable list then you",
    "start": "193440",
    "end": "195519"
  },
  {
    "text": "still have to use a separate collector",
    "start": "195519",
    "end": "198319"
  },
  {
    "text": "using the collect function",
    "start": "198319",
    "end": "200000"
  },
  {
    "text": "at the same time you might wonder are",
    "start": "200000",
    "end": "202800"
  },
  {
    "text": "there any other",
    "start": "202800",
    "end": "203840"
  },
  {
    "text": "two functions to collect into a set for",
    "start": "203840",
    "end": "206159"
  },
  {
    "text": "example",
    "start": "206159",
    "end": "207360"
  },
  {
    "text": "and at the moment at least there is only",
    "start": "207360",
    "end": "209680"
  },
  {
    "text": "two lists so",
    "start": "209680",
    "end": "211360"
  },
  {
    "text": "in java 16 we can use to list now rather",
    "start": "211360",
    "end": "214080"
  },
  {
    "text": "than using collect",
    "start": "214080",
    "end": "215599"
  },
  {
    "text": "and then passing in the collector to a",
    "start": "215599",
    "end": "217599"
  },
  {
    "text": "list",
    "start": "217599",
    "end": "218959"
  },
  {
    "text": "of course there are many use cases where",
    "start": "218959",
    "end": "220879"
  },
  {
    "text": "you may not want to collect to a list",
    "start": "220879",
    "end": "222640"
  },
  {
    "text": "and you want to collect into some",
    "start": "222640",
    "end": "224000"
  },
  {
    "text": "arbitrary order type then you would",
    "start": "224000",
    "end": "225599"
  },
  {
    "text": "still use the collectors",
    "start": "225599",
    "end": "227040"
  },
  {
    "text": "but as i said this is really just a",
    "start": "227040",
    "end": "229120"
  },
  {
    "text": "small delight and that will make",
    "start": "229120",
    "end": "230959"
  },
  {
    "text": "a lot of stream pipelines a little bit",
    "start": "230959",
    "end": "233200"
  },
  {
    "text": "easier on the eyes",
    "start": "233200",
    "end": "235040"
  },
  {
    "text": "now another method that has been added",
    "start": "235040",
    "end": "237040"
  },
  {
    "text": "to the stream api",
    "start": "237040",
    "end": "238400"
  },
  {
    "text": "i won't go too much into because i want",
    "start": "238400",
    "end": "240959"
  },
  {
    "text": "to spend more time on the language",
    "start": "240959",
    "end": "242319"
  },
  {
    "text": "features",
    "start": "242319",
    "end": "243040"
  },
  {
    "text": "but if you're interested in this you",
    "start": "243040",
    "end": "244799"
  },
  {
    "text": "should definitely also look up",
    "start": "244799",
    "end": "246239"
  },
  {
    "text": "map multi which is a new function and",
    "start": "246239",
    "end": "249120"
  },
  {
    "text": "it's",
    "start": "249120",
    "end": "249519"
  },
  {
    "text": "behaves and its purpose is a bit similar",
    "start": "249519",
    "end": "252159"
  },
  {
    "text": "to flat map so if you",
    "start": "252159",
    "end": "254560"
  },
  {
    "text": "work with flat map and you map to inner",
    "start": "254560",
    "end": "257359"
  },
  {
    "text": "streams in the lambda that you pass",
    "start": "257359",
    "end": "258720"
  },
  {
    "text": "there",
    "start": "258720",
    "end": "259840"
  },
  {
    "text": "map multi offers you an alternative way",
    "start": "259840",
    "end": "261919"
  },
  {
    "text": "of doing this",
    "start": "261919",
    "end": "262960"
  },
  {
    "text": "where you push elements to a consumer i",
    "start": "262960",
    "end": "265120"
  },
  {
    "text": "won't go much",
    "start": "265120",
    "end": "266160"
  },
  {
    "text": "into it now but if you're interested and",
    "start": "266160",
    "end": "268000"
  },
  {
    "text": "you work a lot with the stream api then",
    "start": "268000",
    "end": "269759"
  },
  {
    "text": "i definitely recommend",
    "start": "269759",
    "end": "270880"
  },
  {
    "text": "looking also at the javadoc in java 16",
    "start": "270880",
    "end": "273280"
  },
  {
    "text": "for this map multi method",
    "start": "273280",
    "end": "276080"
  },
  {
    "text": "the first big language feature i want to",
    "start": "276080",
    "end": "277919"
  },
  {
    "text": "discuss that was delivered in java 16",
    "start": "277919",
    "end": "280320"
  },
  {
    "text": "is called the records and records are",
    "start": "280320",
    "end": "282479"
  },
  {
    "text": "all about representing data",
    "start": "282479",
    "end": "284240"
  },
  {
    "text": "as data in java code rather than as",
    "start": "284240",
    "end": "286320"
  },
  {
    "text": "arbitrary classes",
    "start": "286320",
    "end": "287919"
  },
  {
    "text": "because usually when we have a class",
    "start": "287919",
    "end": "289919"
  },
  {
    "text": "that simply should represent",
    "start": "289919",
    "end": "291440"
  },
  {
    "text": "some data we end up with something as",
    "start": "291440",
    "end": "294240"
  },
  {
    "text": "shown here",
    "start": "294240",
    "end": "295120"
  },
  {
    "text": "here we have a product class that has",
    "start": "295120",
    "end": "297919"
  },
  {
    "text": "members",
    "start": "297919",
    "end": "298639"
  },
  {
    "text": "for members name vendor price and in",
    "start": "298639",
    "end": "300960"
  },
  {
    "text": "stock",
    "start": "300960",
    "end": "301919"
  },
  {
    "text": "and this should be all the information",
    "start": "301919",
    "end": "304240"
  },
  {
    "text": "that we need to define",
    "start": "304240",
    "end": "305360"
  },
  {
    "text": "but of course we need much more code to",
    "start": "305360",
    "end": "307680"
  },
  {
    "text": "make this work",
    "start": "307680",
    "end": "308639"
  },
  {
    "text": "we need to have a constructor we need to",
    "start": "308639",
    "end": "310880"
  },
  {
    "text": "have getter methods to get the values of",
    "start": "310880",
    "end": "312720"
  },
  {
    "text": "the members",
    "start": "312720",
    "end": "313840"
  },
  {
    "text": "and to make it work correctly we also",
    "start": "313840",
    "end": "316639"
  },
  {
    "text": "need to have",
    "start": "316639",
    "end": "317680"
  },
  {
    "text": "an equals hash code and to string",
    "start": "317680",
    "end": "319840"
  },
  {
    "text": "implementation that",
    "start": "319840",
    "end": "320960"
  },
  {
    "text": "are congruent with the fields that we",
    "start": "320960",
    "end": "323199"
  },
  {
    "text": "defined",
    "start": "323199",
    "end": "324560"
  },
  {
    "text": "now this can be generated by an ide",
    "start": "324560",
    "end": "327759"
  },
  {
    "text": "that has drawbacks you can use",
    "start": "327759",
    "end": "331120"
  },
  {
    "text": "frameworks like lombok for example that",
    "start": "331120",
    "end": "333440"
  },
  {
    "text": "also has some drawbacks",
    "start": "333440",
    "end": "335120"
  },
  {
    "text": "so in the end what we're looking for is",
    "start": "335120",
    "end": "336720"
  },
  {
    "text": "something in the java language",
    "start": "336720",
    "end": "338320"
  },
  {
    "text": "to more precisely describe this concept",
    "start": "338320",
    "end": "341520"
  },
  {
    "text": "of having data only classes",
    "start": "341520",
    "end": "343360"
  },
  {
    "text": "and that's what records are so we can",
    "start": "343360",
    "end": "345919"
  },
  {
    "text": "say",
    "start": "345919",
    "end": "346639"
  },
  {
    "text": "public records rather than class and",
    "start": "346639",
    "end": "349120"
  },
  {
    "text": "then the name of the record type that we",
    "start": "349120",
    "end": "350720"
  },
  {
    "text": "want to define",
    "start": "350720",
    "end": "351680"
  },
  {
    "text": "here that will be products and then we",
    "start": "351680",
    "end": "353840"
  },
  {
    "text": "only have to provide the components that",
    "start": "353840",
    "end": "355840"
  },
  {
    "text": "make up",
    "start": "355840",
    "end": "356319"
  },
  {
    "text": "this record here we provide these four",
    "start": "356319",
    "end": "358639"
  },
  {
    "text": "components by giving the types and names",
    "start": "358639",
    "end": "360720"
  },
  {
    "text": "string name string vendor enterprise and",
    "start": "360720",
    "end": "362960"
  },
  {
    "text": "boolean in stock",
    "start": "362960",
    "end": "364319"
  },
  {
    "text": "and this is enough to define a record",
    "start": "364319",
    "end": "367280"
  },
  {
    "text": "which in the end",
    "start": "367280",
    "end": "368160"
  },
  {
    "text": "is a special form of a class that only",
    "start": "368160",
    "end": "371199"
  },
  {
    "text": "contains this data now what does this",
    "start": "371199",
    "end": "374160"
  },
  {
    "text": "offer us",
    "start": "374160",
    "end": "375039"
  },
  {
    "text": "once we have such a record declaration",
    "start": "375039",
    "end": "377600"
  },
  {
    "text": "we will get",
    "start": "377600",
    "end": "378479"
  },
  {
    "text": "a class that actually implicitly gets a",
    "start": "378479",
    "end": "380479"
  },
  {
    "text": "constructor accepting all the values for",
    "start": "380479",
    "end": "382800"
  },
  {
    "text": "the components of the records",
    "start": "382800",
    "end": "384800"
  },
  {
    "text": "we get automatically also an",
    "start": "384800",
    "end": "386639"
  },
  {
    "text": "implementation for the equals",
    "start": "386639",
    "end": "388400"
  },
  {
    "text": "hash code and to string methods based on",
    "start": "388400",
    "end": "390560"
  },
  {
    "text": "all the record components",
    "start": "390560",
    "end": "392880"
  },
  {
    "text": "and we also get accessor methods for",
    "start": "392880",
    "end": "395840"
  },
  {
    "text": "every",
    "start": "395840",
    "end": "396720"
  },
  {
    "text": "component that we have in the records so",
    "start": "396720",
    "end": "399280"
  },
  {
    "text": "here there will be a name method a",
    "start": "399280",
    "end": "400960"
  },
  {
    "text": "vendor method",
    "start": "400960",
    "end": "401759"
  },
  {
    "text": "a price method and an in-stock method",
    "start": "401759",
    "end": "403759"
  },
  {
    "text": "that returns the actual values",
    "start": "403759",
    "end": "405600"
  },
  {
    "text": "of the components of the records",
    "start": "405600",
    "end": "408880"
  },
  {
    "text": "last but certainly not least records are",
    "start": "408880",
    "end": "411759"
  },
  {
    "text": "always",
    "start": "411759",
    "end": "412400"
  },
  {
    "text": "immutable so you will see there are no",
    "start": "412400",
    "end": "415039"
  },
  {
    "text": "setter methods",
    "start": "415039",
    "end": "416240"
  },
  {
    "text": "once a record is instantiated with",
    "start": "416240",
    "end": "418080"
  },
  {
    "text": "certain values",
    "start": "418080",
    "end": "419360"
  },
  {
    "text": "that is it you cannot change that",
    "start": "419360",
    "end": "421039"
  },
  {
    "text": "anymore also",
    "start": "421039",
    "end": "423199"
  },
  {
    "text": "records as a special form of classes",
    "start": "423199",
    "end": "426240"
  },
  {
    "text": "are final so you cannot extend any other",
    "start": "426240",
    "end": "428639"
  },
  {
    "text": "class when defining a records",
    "start": "428639",
    "end": "430880"
  },
  {
    "text": "you can implement an interface so that's",
    "start": "430880",
    "end": "432880"
  },
  {
    "text": "okay but you cannot",
    "start": "432880",
    "end": "434319"
  },
  {
    "text": "create hierarchies of classes and",
    "start": "434319",
    "end": "436639"
  },
  {
    "text": "records or",
    "start": "436639",
    "end": "437440"
  },
  {
    "text": "records and records so all in all",
    "start": "437440",
    "end": "440560"
  },
  {
    "text": "there are some restrictions here but it",
    "start": "440560",
    "end": "442880"
  },
  {
    "text": "offers a very powerful way",
    "start": "442880",
    "end": "444880"
  },
  {
    "text": "to concisely define records consisting",
    "start": "444880",
    "end": "448319"
  },
  {
    "text": "of components",
    "start": "448319",
    "end": "449680"
  },
  {
    "text": "as a representation of only data with a",
    "start": "449680",
    "end": "452880"
  },
  {
    "text": "given name",
    "start": "452880",
    "end": "453599"
  },
  {
    "text": "in our applications so",
    "start": "453599",
    "end": "457520"
  },
  {
    "text": "it's maybe good to also set the mindset",
    "start": "457520",
    "end": "460479"
  },
  {
    "text": "around",
    "start": "460479",
    "end": "461120"
  },
  {
    "text": "records how should you think about these",
    "start": "461120",
    "end": "464319"
  },
  {
    "text": "new language elements so it is a",
    "start": "464319",
    "end": "467599"
  },
  {
    "text": "new and restricted form of a class to",
    "start": "467599",
    "end": "470160"
  },
  {
    "text": "model",
    "start": "470160",
    "end": "470639"
  },
  {
    "text": "data as data as i said it's not possible",
    "start": "470639",
    "end": "473919"
  },
  {
    "text": "to add any additional states to a record",
    "start": "473919",
    "end": "476000"
  },
  {
    "text": "as we'll see in the demo later as well",
    "start": "476000",
    "end": "478639"
  },
  {
    "text": "so it is really about modeling immutable",
    "start": "478639",
    "end": "481039"
  },
  {
    "text": "data",
    "start": "481039",
    "end": "482080"
  },
  {
    "text": "you can also think of records as being",
    "start": "482080",
    "end": "485039"
  },
  {
    "text": "tuples",
    "start": "485039",
    "end": "485840"
  },
  {
    "text": "but not just tuples in a generic sense",
    "start": "485840",
    "end": "487919"
  },
  {
    "text": "that some other languages have",
    "start": "487919",
    "end": "489280"
  },
  {
    "text": "where you have some arbitrary components",
    "start": "489280",
    "end": "491360"
  },
  {
    "text": "and you refer to them",
    "start": "491360",
    "end": "492479"
  },
  {
    "text": "by index but here the tuple elements",
    "start": "492479",
    "end": "495680"
  },
  {
    "text": "have actual names",
    "start": "495680",
    "end": "497120"
  },
  {
    "text": "and the tuple type itself the record",
    "start": "497120",
    "end": "499120"
  },
  {
    "text": "also has a name",
    "start": "499120",
    "end": "500400"
  },
  {
    "text": "because names matter in java",
    "start": "500400",
    "end": "503599"
  },
  {
    "text": "now there are also some ways that people",
    "start": "503599",
    "end": "506479"
  },
  {
    "text": "might want to think about records",
    "start": "506479",
    "end": "508160"
  },
  {
    "text": "that are not completely appropriate so",
    "start": "508160",
    "end": "510960"
  },
  {
    "text": "first and foremost",
    "start": "510960",
    "end": "512320"
  },
  {
    "text": "they're not meant as a boilerplate",
    "start": "512320",
    "end": "515200"
  },
  {
    "text": "reduction mechanism for",
    "start": "515200",
    "end": "516560"
  },
  {
    "text": "any existing codes you might have",
    "start": "516560",
    "end": "519599"
  },
  {
    "text": "so yes we now have a very concise way",
    "start": "519599",
    "end": "522159"
  },
  {
    "text": "defining these records",
    "start": "522159",
    "end": "523518"
  },
  {
    "text": "but it doesn't mean that any data like",
    "start": "523519",
    "end": "525760"
  },
  {
    "text": "class in your application",
    "start": "525760",
    "end": "527360"
  },
  {
    "text": "can be easily replaced by records",
    "start": "527360",
    "end": "529600"
  },
  {
    "text": "because there are limitations as we",
    "start": "529600",
    "end": "530959"
  },
  {
    "text": "discussed",
    "start": "530959",
    "end": "532000"
  },
  {
    "text": "and this is also not really the design",
    "start": "532000",
    "end": "533680"
  },
  {
    "text": "goal the design goal here is to have a",
    "start": "533680",
    "end": "535519"
  },
  {
    "text": "good way to model data as data",
    "start": "535519",
    "end": "537839"
  },
  {
    "text": "it's also not a drop-in replacement for",
    "start": "537839",
    "end": "540000"
  },
  {
    "text": "java beans because as we saw",
    "start": "540000",
    "end": "542000"
  },
  {
    "text": "the accessory methods for example do not",
    "start": "542000",
    "end": "544080"
  },
  {
    "text": "adhere to the get",
    "start": "544080",
    "end": "545760"
  },
  {
    "text": "standards that java beans have java",
    "start": "545760",
    "end": "548240"
  },
  {
    "text": "beans are generally also mutable whereas",
    "start": "548240",
    "end": "550320"
  },
  {
    "text": "records are immutable",
    "start": "550320",
    "end": "551920"
  },
  {
    "text": "so even though they serve a somewhat",
    "start": "551920",
    "end": "553920"
  },
  {
    "text": "similar purpose",
    "start": "553920",
    "end": "555040"
  },
  {
    "text": "records do not replace java beans in any",
    "start": "555040",
    "end": "557920"
  },
  {
    "text": "meaningful way",
    "start": "557920",
    "end": "559839"
  },
  {
    "text": "you also should not think of records as",
    "start": "559839",
    "end": "562880"
  },
  {
    "text": "something as",
    "start": "562880",
    "end": "563680"
  },
  {
    "text": "value types that might also come in the",
    "start": "563680",
    "end": "566000"
  },
  {
    "text": "java language",
    "start": "566000",
    "end": "567120"
  },
  {
    "text": "where the value types are very much",
    "start": "567120",
    "end": "569600"
  },
  {
    "text": "about",
    "start": "569600",
    "end": "570320"
  },
  {
    "text": "the memory layouts and very efficient",
    "start": "570320",
    "end": "572560"
  },
  {
    "text": "representation of data",
    "start": "572560",
    "end": "574240"
  },
  {
    "text": "in classes um these two worlds might",
    "start": "574240",
    "end": "577440"
  },
  {
    "text": "come",
    "start": "577440",
    "end": "578000"
  },
  {
    "text": "together at some time but for now uh",
    "start": "578000",
    "end": "580560"
  },
  {
    "text": "records are just",
    "start": "580560",
    "end": "581680"
  },
  {
    "text": "a more concise way to express data only",
    "start": "581680",
    "end": "584959"
  },
  {
    "text": "classes",
    "start": "584959",
    "end": "585600"
  },
  {
    "text": "in java so that being said we talked a",
    "start": "585600",
    "end": "588480"
  },
  {
    "text": "lot about records now so i think it's",
    "start": "588480",
    "end": "590320"
  },
  {
    "text": "time to also see them in action",
    "start": "590320",
    "end": "592320"
  },
  {
    "text": "so let's see what we can do with records",
    "start": "592320",
    "end": "594399"
  },
  {
    "text": "here i'm in intellij",
    "start": "594399",
    "end": "595680"
  },
  {
    "text": "which already supports records",
    "start": "595680",
    "end": "597120"
  },
  {
    "text": "fortunately and i've defined a product",
    "start": "597120",
    "end": "599600"
  },
  {
    "text": "record",
    "start": "599600",
    "end": "600480"
  },
  {
    "text": "and it has a name a price an in-stock",
    "start": "600480",
    "end": "602959"
  },
  {
    "text": "flag",
    "start": "602959",
    "end": "603600"
  },
  {
    "text": "and this definition that we have here is",
    "start": "603600",
    "end": "605360"
  },
  {
    "text": "already enough to start using it",
    "start": "605360",
    "end": "607040"
  },
  {
    "text": "so when i move to my main class i can",
    "start": "607040",
    "end": "609360"
  },
  {
    "text": "already say products p1 is",
    "start": "609360",
    "end": "612240"
  },
  {
    "text": "new products and then we can use the",
    "start": "612240",
    "end": "616079"
  },
  {
    "text": "constructor that is provided with all",
    "start": "616079",
    "end": "617760"
  },
  {
    "text": "the record components so let's say we",
    "start": "617760",
    "end": "620160"
  },
  {
    "text": "have peanut butter",
    "start": "620160",
    "end": "621440"
  },
  {
    "text": "and it costs 200 cents and it's indeed",
    "start": "621440",
    "end": "624959"
  },
  {
    "text": "in stock",
    "start": "624959",
    "end": "626480"
  },
  {
    "text": "this is something that was generated for",
    "start": "626480",
    "end": "629040"
  },
  {
    "text": "us based on the record definition that",
    "start": "629040",
    "end": "630720"
  },
  {
    "text": "we have",
    "start": "630720",
    "end": "631600"
  },
  {
    "text": "now if we look at the autocomplete we",
    "start": "631600",
    "end": "633279"
  },
  {
    "text": "can see that it also has",
    "start": "633279",
    "end": "634959"
  },
  {
    "text": "the in stock the name and the price",
    "start": "634959",
    "end": "636880"
  },
  {
    "text": "accessor methods for the values",
    "start": "636880",
    "end": "638800"
  },
  {
    "text": "of the records but in this case i'm just",
    "start": "638800",
    "end": "641360"
  },
  {
    "text": "going to print the record",
    "start": "641360",
    "end": "642800"
  },
  {
    "text": "to the console so that you can see that",
    "start": "642800",
    "end": "645440"
  },
  {
    "text": "it also",
    "start": "645440",
    "end": "646160"
  },
  {
    "text": "has a very nice to string where we can",
    "start": "646160",
    "end": "648800"
  },
  {
    "text": "easily see the name of the record type",
    "start": "648800",
    "end": "650560"
  },
  {
    "text": "with all the components and their values",
    "start": "650560",
    "end": "653279"
  },
  {
    "text": "so this is also already",
    "start": "653279",
    "end": "654640"
  },
  {
    "text": "really convenient already and if we're",
    "start": "654640",
    "end": "657040"
  },
  {
    "text": "going to create",
    "start": "657040",
    "end": "658079"
  },
  {
    "text": "another product let's call it products",
    "start": "658079",
    "end": "660720"
  },
  {
    "text": "p2",
    "start": "660720",
    "end": "661279"
  },
  {
    "text": "just to be original and we give it",
    "start": "661279",
    "end": "664320"
  },
  {
    "text": "the exact same values what we can see",
    "start": "664320",
    "end": "668000"
  },
  {
    "text": "is that we can compare them by reference",
    "start": "668000",
    "end": "671279"
  },
  {
    "text": "equality",
    "start": "671279",
    "end": "672240"
  },
  {
    "text": "but we can also call the equals method",
    "start": "672240",
    "end": "674800"
  },
  {
    "text": "on the record",
    "start": "674800",
    "end": "675920"
  },
  {
    "text": "that has been provided by the record",
    "start": "675920",
    "end": "677600"
  },
  {
    "text": "implementation",
    "start": "677600",
    "end": "679040"
  },
  {
    "text": "and what you will see here is that",
    "start": "679040",
    "end": "682640"
  },
  {
    "text": "these two records are two different",
    "start": "682640",
    "end": "684720"
  },
  {
    "text": "instances so the referencing",
    "start": "684720",
    "end": "686399"
  },
  {
    "text": "comparison will evaluate to false but",
    "start": "686399",
    "end": "688959"
  },
  {
    "text": "when we",
    "start": "688959",
    "end": "689600"
  },
  {
    "text": "ask whether they are equal it only looks",
    "start": "689600",
    "end": "692560"
  },
  {
    "text": "at the",
    "start": "692560",
    "end": "693200"
  },
  {
    "text": "values that we provide for the",
    "start": "693200",
    "end": "694480"
  },
  {
    "text": "components of a record so in this case",
    "start": "694480",
    "end": "696480"
  },
  {
    "text": "it will say yes",
    "start": "696480",
    "end": "697440"
  },
  {
    "text": "p1 is equal to p2 because it's only",
    "start": "697440",
    "end": "700160"
  },
  {
    "text": "about the data that's inside of the",
    "start": "700160",
    "end": "701839"
  },
  {
    "text": "records",
    "start": "701839",
    "end": "703040"
  },
  {
    "text": "so this way you can see that the",
    "start": "703040",
    "end": "705120"
  },
  {
    "text": "equality and also the hashcode",
    "start": "705120",
    "end": "706480"
  },
  {
    "text": "information",
    "start": "706480",
    "end": "707600"
  },
  {
    "text": "is fully based on the values that we",
    "start": "707600",
    "end": "709360"
  },
  {
    "text": "provide to the constructor here for the",
    "start": "709360",
    "end": "711920"
  },
  {
    "text": "for the for the records now",
    "start": "711920",
    "end": "715839"
  },
  {
    "text": "going back to the record itself again",
    "start": "715839",
    "end": "719680"
  },
  {
    "text": "here we don't see any of these methods",
    "start": "719680",
    "end": "722079"
  },
  {
    "text": "that we already use because they're",
    "start": "722079",
    "end": "723279"
  },
  {
    "text": "implicitly provided for us based on the",
    "start": "723279",
    "end": "725040"
  },
  {
    "text": "record definition",
    "start": "725040",
    "end": "725920"
  },
  {
    "text": "but you can still override any of the",
    "start": "725920",
    "end": "728320"
  },
  {
    "text": "accessor methods or the equals and your",
    "start": "728320",
    "end": "730079"
  },
  {
    "text": "hashcode methods if you want to in this",
    "start": "730079",
    "end": "732000"
  },
  {
    "text": "record definition",
    "start": "732000",
    "end": "733440"
  },
  {
    "text": "however be aware that you preserve the",
    "start": "733440",
    "end": "736160"
  },
  {
    "text": "semantics there",
    "start": "736160",
    "end": "737279"
  },
  {
    "text": "you do want to have a correct",
    "start": "737279",
    "end": "738639"
  },
  {
    "text": "implementation of equals and hashcodes",
    "start": "738639",
    "end": "740800"
  },
  {
    "text": "hashcode with respect to the components",
    "start": "740800",
    "end": "743200"
  },
  {
    "text": "of the record",
    "start": "743200",
    "end": "745440"
  },
  {
    "text": "now another thing that you might want to",
    "start": "745440",
    "end": "747519"
  },
  {
    "text": "do for a record",
    "start": "747519",
    "end": "749839"
  },
  {
    "text": "is add additional methods that's",
    "start": "749839",
    "end": "751760"
  },
  {
    "text": "completely possible and you can also",
    "start": "751760",
    "end": "753360"
  },
  {
    "text": "access",
    "start": "753360",
    "end": "754000"
  },
  {
    "text": "the component values in these methods",
    "start": "754000",
    "end": "756639"
  },
  {
    "text": "but another thing",
    "start": "756639",
    "end": "757600"
  },
  {
    "text": "that often comes up is validation you",
    "start": "757600",
    "end": "760399"
  },
  {
    "text": "only want to create",
    "start": "760399",
    "end": "761519"
  },
  {
    "text": "a record if the input provided to the",
    "start": "761519",
    "end": "764480"
  },
  {
    "text": "record constructor is valid",
    "start": "764480",
    "end": "766560"
  },
  {
    "text": "now for that we can also define a",
    "start": "766560",
    "end": "769680"
  },
  {
    "text": "constructor here so we can say public",
    "start": "769680",
    "end": "772079"
  },
  {
    "text": "products and then we have two choices",
    "start": "772079",
    "end": "774639"
  },
  {
    "text": "either we can do a regular constructor",
    "start": "774639",
    "end": "776480"
  },
  {
    "text": "and then we provide",
    "start": "776480",
    "end": "777600"
  },
  {
    "text": "all the component names again as",
    "start": "777600",
    "end": "779040"
  },
  {
    "text": "parameters to the constructor",
    "start": "779040",
    "end": "780880"
  },
  {
    "text": "or we can use a new format the so-called",
    "start": "780880",
    "end": "783120"
  },
  {
    "text": "compact constructor",
    "start": "783120",
    "end": "784320"
  },
  {
    "text": "where we can leave off the formal",
    "start": "784320",
    "end": "785680"
  },
  {
    "text": "parameter list and implicitly",
    "start": "785680",
    "end": "788240"
  },
  {
    "text": "we will have access to name price and in",
    "start": "788240",
    "end": "791279"
  },
  {
    "text": "stock here so we can",
    "start": "791279",
    "end": "792320"
  },
  {
    "text": "for example say if price is less than",
    "start": "792320",
    "end": "795279"
  },
  {
    "text": "zero",
    "start": "795279",
    "end": "796800"
  },
  {
    "text": "let's throw a new illegal",
    "start": "796800",
    "end": "800079"
  },
  {
    "text": "argument exception and this way",
    "start": "800079",
    "end": "803360"
  },
  {
    "text": "when we instantiate a product with a",
    "start": "803360",
    "end": "805040"
  },
  {
    "text": "price below zero",
    "start": "805040",
    "end": "806800"
  },
  {
    "text": "it will not happen it will just throw an",
    "start": "806800",
    "end": "808480"
  },
  {
    "text": "exception and if the price is above zero",
    "start": "808480",
    "end": "811040"
  },
  {
    "text": "we don't see any assignments here to the",
    "start": "811040",
    "end": "813120"
  },
  {
    "text": "name price in stock",
    "start": "813120",
    "end": "814480"
  },
  {
    "text": "but these are added implicitly again by",
    "start": "814480",
    "end": "816720"
  },
  {
    "text": "the compiler",
    "start": "816720",
    "end": "817600"
  },
  {
    "text": "when compiling this record so this is a",
    "start": "817600",
    "end": "820079"
  },
  {
    "text": "very very interesting mechanism",
    "start": "820079",
    "end": "821839"
  },
  {
    "text": "we can even do normalization if we want",
    "start": "821839",
    "end": "824079"
  },
  {
    "text": "to so we can say for example",
    "start": "824079",
    "end": "825920"
  },
  {
    "text": "price is maybe some default price like a",
    "start": "825920",
    "end": "829519"
  },
  {
    "text": "hundred",
    "start": "829519",
    "end": "830480"
  },
  {
    "text": "and then this hundreds will be assigned",
    "start": "830480",
    "end": "833440"
  },
  {
    "text": "to the",
    "start": "833440",
    "end": "834560"
  },
  {
    "text": "price variable to the constructor here",
    "start": "834560",
    "end": "836720"
  },
  {
    "text": "which is implicitly",
    "start": "836720",
    "end": "838160"
  },
  {
    "text": "available and then again the assignments",
    "start": "838160",
    "end": "840720"
  },
  {
    "text": "to the actual",
    "start": "840720",
    "end": "841519"
  },
  {
    "text": "members of the records so the final",
    "start": "841519",
    "end": "843680"
  },
  {
    "text": "fields that are part of the",
    "start": "843680",
    "end": "845279"
  },
  {
    "text": "the records the definition that is",
    "start": "845279",
    "end": "846480"
  },
  {
    "text": "generated are inserted automatically by",
    "start": "846480",
    "end": "848720"
  },
  {
    "text": "the compiler at the end of this compact",
    "start": "848720",
    "end": "850720"
  },
  {
    "text": "constructor",
    "start": "850720",
    "end": "852560"
  },
  {
    "text": "so all in all a very versatile and very",
    "start": "852560",
    "end": "856320"
  },
  {
    "text": "nice way to define data classes in java",
    "start": "856320",
    "end": "860000"
  },
  {
    "text": "and there's one last thing i want to",
    "start": "860000",
    "end": "861600"
  },
  {
    "text": "show here because",
    "start": "861600",
    "end": "863040"
  },
  {
    "text": "we now defined a top level record but",
    "start": "863040",
    "end": "865680"
  },
  {
    "text": "you can also decline and define records",
    "start": "865680",
    "end": "867920"
  },
  {
    "text": "locally in methods",
    "start": "867920",
    "end": "869120"
  },
  {
    "text": "which can be very very handy if you have",
    "start": "869120",
    "end": "870959"
  },
  {
    "text": "some intermediate state that you want to",
    "start": "870959",
    "end": "872800"
  },
  {
    "text": "use inside of your method so we can for",
    "start": "872800",
    "end": "875600"
  },
  {
    "text": "example say",
    "start": "875600",
    "end": "876639"
  },
  {
    "text": "that we want to define a discounted",
    "start": "876639",
    "end": "879920"
  },
  {
    "text": "product where we define",
    "start": "879920",
    "end": "883199"
  },
  {
    "text": "this as something that takes another",
    "start": "883199",
    "end": "885040"
  },
  {
    "text": "product so",
    "start": "885040",
    "end": "886880"
  },
  {
    "text": "the record type that we already have we",
    "start": "886880",
    "end": "888800"
  },
  {
    "text": "use as one of the components",
    "start": "888800",
    "end": "890880"
  },
  {
    "text": "and we add a boolean saying whether it's",
    "start": "890880",
    "end": "893279"
  },
  {
    "text": "discounted or not",
    "start": "893279",
    "end": "895279"
  },
  {
    "text": "now we won't provide a body here the",
    "start": "895279",
    "end": "897600"
  },
  {
    "text": "empty body is all right",
    "start": "897600",
    "end": "899199"
  },
  {
    "text": "and let's say that we want to print such",
    "start": "899199",
    "end": "902000"
  },
  {
    "text": "a discounted product",
    "start": "902000",
    "end": "903920"
  },
  {
    "text": "there again we can instantiate it just",
    "start": "903920",
    "end": "906560"
  },
  {
    "text": "like this",
    "start": "906560",
    "end": "907360"
  },
  {
    "text": "this kind of product providing p1",
    "start": "907360",
    "end": "910880"
  },
  {
    "text": "as the product here and let's say that",
    "start": "910880",
    "end": "913440"
  },
  {
    "text": "it's indeed discounted",
    "start": "913440",
    "end": "915760"
  },
  {
    "text": "let's run this and you will see that",
    "start": "915760",
    "end": "918560"
  },
  {
    "text": "this",
    "start": "918560",
    "end": "919040"
  },
  {
    "text": "behaves exactly the same as the top",
    "start": "919040",
    "end": "920959"
  },
  {
    "text": "level records that we",
    "start": "920959",
    "end": "922399"
  },
  {
    "text": "declared in the products source file",
    "start": "922399",
    "end": "925760"
  },
  {
    "text": "so records as a local construct",
    "start": "925760",
    "end": "929279"
  },
  {
    "text": "can also be very useful in situations",
    "start": "929279",
    "end": "932480"
  },
  {
    "text": "where you want to group some data in",
    "start": "932480",
    "end": "934720"
  },
  {
    "text": "maybe an intermediate",
    "start": "934720",
    "end": "936320"
  },
  {
    "text": "stage of your stream pipeline but there",
    "start": "936320",
    "end": "938720"
  },
  {
    "text": "are many other use cases as well",
    "start": "938720",
    "end": "940800"
  },
  {
    "text": "speaking of use cases um when we think",
    "start": "940800",
    "end": "943360"
  },
  {
    "text": "about records",
    "start": "943360",
    "end": "944480"
  },
  {
    "text": "where where would you start using them",
    "start": "944480",
    "end": "946959"
  },
  {
    "text": "so i think there are some obvious places",
    "start": "946959",
    "end": "948560"
  },
  {
    "text": "where records will be used a lot",
    "start": "948560",
    "end": "950720"
  },
  {
    "text": "one of them will be dto so data transfer",
    "start": "950720",
    "end": "953120"
  },
  {
    "text": "objects which are",
    "start": "953120",
    "end": "954560"
  },
  {
    "text": "the definition of objects that don't",
    "start": "954560",
    "end": "956320"
  },
  {
    "text": "really have any identity or behavior",
    "start": "956320",
    "end": "958880"
  },
  {
    "text": "but are all about just transferring data",
    "start": "958880",
    "end": "961519"
  },
  {
    "text": "and",
    "start": "961519",
    "end": "962160"
  },
  {
    "text": "for example the jackson library as of",
    "start": "962160",
    "end": "964639"
  },
  {
    "text": "version 2.12",
    "start": "964639",
    "end": "966079"
  },
  {
    "text": "already supports serializing and",
    "start": "966079",
    "end": "968000"
  },
  {
    "text": "deserializing records to json and other",
    "start": "968000",
    "end": "970480"
  },
  {
    "text": "formats that are supported",
    "start": "970480",
    "end": "972000"
  },
  {
    "text": "so i think their records will really",
    "start": "972000",
    "end": "974240"
  },
  {
    "text": "really be",
    "start": "974240",
    "end": "975040"
  },
  {
    "text": "helpful now jpa so the java persistent",
    "start": "975040",
    "end": "978480"
  },
  {
    "text": "architecture is not a place where people",
    "start": "978480",
    "end": "980959"
  },
  {
    "text": "think they might want to use records",
    "start": "980959",
    "end": "983040"
  },
  {
    "text": "but if you want to use it for entities",
    "start": "983040",
    "end": "985360"
  },
  {
    "text": "for example that's not really possible",
    "start": "985360",
    "end": "987199"
  },
  {
    "text": "because",
    "start": "987199",
    "end": "988079"
  },
  {
    "text": "it is heavily based on the java beans",
    "start": "988079",
    "end": "990160"
  },
  {
    "text": "convention",
    "start": "990160",
    "end": "991120"
  },
  {
    "text": "it is also usually these are mutable",
    "start": "991120",
    "end": "994639"
  },
  {
    "text": "rather than immutable so i don't think",
    "start": "994639",
    "end": "997440"
  },
  {
    "text": "they will be used there a lot",
    "start": "997440",
    "end": "998959"
  },
  {
    "text": "there might be some opportunities when",
    "start": "998959",
    "end": "1000560"
  },
  {
    "text": "you instantiate view objects in queries",
    "start": "1000560",
    "end": "1002560"
  },
  {
    "text": "for example where you could use records",
    "start": "1002560",
    "end": "1004240"
  },
  {
    "text": "instead of",
    "start": "1004240",
    "end": "1004800"
  },
  {
    "text": "regular classes but for entities not so",
    "start": "1004800",
    "end": "1007360"
  },
  {
    "text": "much",
    "start": "1007360",
    "end": "1008399"
  },
  {
    "text": "i think records will also be very useful",
    "start": "1008399",
    "end": "1010720"
  },
  {
    "text": "when you want to have",
    "start": "1010720",
    "end": "1012240"
  },
  {
    "text": "a map key that consists of multiple",
    "start": "1012240",
    "end": "1014639"
  },
  {
    "text": "values that you want to group together",
    "start": "1014639",
    "end": "1016480"
  },
  {
    "text": "so using a records you get automatically",
    "start": "1016480",
    "end": "1018560"
  },
  {
    "text": "same behavior for equals in hash code",
    "start": "1018560",
    "end": "1021120"
  },
  {
    "text": "so there are two records will be very",
    "start": "1021120",
    "end": "1023120"
  },
  {
    "text": "useful",
    "start": "1023120",
    "end": "1024400"
  },
  {
    "text": "and since as i said records can also be",
    "start": "1024400",
    "end": "1026959"
  },
  {
    "text": "thought of",
    "start": "1026959",
    "end": "1027438"
  },
  {
    "text": "as nominal tuples a tuple where each",
    "start": "1027439",
    "end": "1030079"
  },
  {
    "text": "component has a name",
    "start": "1030079",
    "end": "1031678"
  },
  {
    "text": "you can easily see that it will be very",
    "start": "1031679",
    "end": "1033438"
  },
  {
    "text": "convenient to use records to return",
    "start": "1033439",
    "end": "1035438"
  },
  {
    "text": "multiple values from a method to the",
    "start": "1035439",
    "end": "1037199"
  },
  {
    "text": "caller so there also",
    "start": "1037199",
    "end": "1039520"
  },
  {
    "text": "records can be very very handy all in",
    "start": "1039520",
    "end": "1042400"
  },
  {
    "text": "all",
    "start": "1042400",
    "end": "1042798"
  },
  {
    "text": "i think a very exciting development that",
    "start": "1042799",
    "end": "1044640"
  },
  {
    "text": "we now have records in java",
    "start": "1044640",
    "end": "1046640"
  },
  {
    "text": "and i think they will see widespread and",
    "start": "1046640",
    "end": "1049280"
  },
  {
    "text": "this brings us to the second language",
    "start": "1049280",
    "end": "1050960"
  },
  {
    "text": "change in java 16",
    "start": "1050960",
    "end": "1052559"
  },
  {
    "text": "and that is better matching for instance",
    "start": "1052559",
    "end": "1054880"
  },
  {
    "text": "off",
    "start": "1054880",
    "end": "1055840"
  },
  {
    "text": "now this is a first step in a long",
    "start": "1055840",
    "end": "1058080"
  },
  {
    "text": "journey of bringing pattern matching to",
    "start": "1058080",
    "end": "1059760"
  },
  {
    "text": "java and we'll see some examples of that",
    "start": "1059760",
    "end": "1062240"
  },
  {
    "text": "but for now i think it's already really",
    "start": "1062240",
    "end": "1065360"
  },
  {
    "text": "nice that we have this in the language",
    "start": "1065360",
    "end": "1067120"
  },
  {
    "text": "in java 16.",
    "start": "1067120",
    "end": "1069120"
  },
  {
    "text": "so you will probably recognize this",
    "start": "1069120",
    "end": "1072080"
  },
  {
    "text": "pattern",
    "start": "1072080",
    "end": "1073039"
  },
  {
    "text": "where some piece of code checks whether",
    "start": "1073039",
    "end": "1075360"
  },
  {
    "text": "some object is an instance of",
    "start": "1075360",
    "end": "1077200"
  },
  {
    "text": "type in this case string and if that's",
    "start": "1077200",
    "end": "1079600"
  },
  {
    "text": "the case then inside of the if",
    "start": "1079600",
    "end": "1081440"
  },
  {
    "text": "we need to declare a new variable we",
    "start": "1081440",
    "end": "1083919"
  },
  {
    "text": "need to cast",
    "start": "1083919",
    "end": "1084960"
  },
  {
    "text": "o in this case to this new string s and",
    "start": "1084960",
    "end": "1087520"
  },
  {
    "text": "then and only then we can start using",
    "start": "1087520",
    "end": "1089760"
  },
  {
    "text": "s as a string now this works",
    "start": "1089760",
    "end": "1092799"
  },
  {
    "text": "but it is not really nice and it's not",
    "start": "1092799",
    "end": "1095280"
  },
  {
    "text": "really",
    "start": "1095280",
    "end": "1095840"
  },
  {
    "text": "intention refitting code let's say so",
    "start": "1095840",
    "end": "1098960"
  },
  {
    "text": "can we do better well as of java 16 yes",
    "start": "1098960",
    "end": "1102000"
  },
  {
    "text": "we can",
    "start": "1102000",
    "end": "1102640"
  },
  {
    "text": "using the pattern matching for instance",
    "start": "1102640",
    "end": "1104320"
  },
  {
    "text": "of feature so what we can do",
    "start": "1104320",
    "end": "1106559"
  },
  {
    "text": "is instead of saying o is instance of",
    "start": "1106559",
    "end": "1109840"
  },
  {
    "text": "a type we can say o is instance of a",
    "start": "1109840",
    "end": "1112799"
  },
  {
    "text": "type",
    "start": "1112799",
    "end": "1113200"
  },
  {
    "text": "pattern where a type pattern consists of",
    "start": "1113200",
    "end": "1116080"
  },
  {
    "text": "the type",
    "start": "1116080",
    "end": "1117200"
  },
  {
    "text": "and a binding variable in this case s",
    "start": "1117200",
    "end": "1120799"
  },
  {
    "text": "now what happens here is that if indeed",
    "start": "1120799",
    "end": "1124080"
  },
  {
    "text": "o is an instance of string then",
    "start": "1124080",
    "end": "1127760"
  },
  {
    "text": "s will be immediately bound to the value",
    "start": "1127760",
    "end": "1130799"
  },
  {
    "text": "of o given the correct type which means",
    "start": "1130799",
    "end": "1134080"
  },
  {
    "text": "that we can immediately in the body of",
    "start": "1134080",
    "end": "1136160"
  },
  {
    "text": "this",
    "start": "1136160",
    "end": "1136640"
  },
  {
    "text": "if start using s as a string without",
    "start": "1136640",
    "end": "1139440"
  },
  {
    "text": "having to cast",
    "start": "1139440",
    "end": "1140880"
  },
  {
    "text": "the other nice thing here is that the",
    "start": "1140880",
    "end": "1142960"
  },
  {
    "text": "scope of s",
    "start": "1142960",
    "end": "1144320"
  },
  {
    "text": "is limited to just the body of this if",
    "start": "1144320",
    "end": "1148880"
  },
  {
    "text": "now one thing to note here is that",
    "start": "1148880",
    "end": "1152000"
  },
  {
    "text": "the type of o the static type of o in",
    "start": "1152000",
    "end": "1155120"
  },
  {
    "text": "the source code",
    "start": "1155120",
    "end": "1156799"
  },
  {
    "text": "should not be a subtype of string",
    "start": "1156799",
    "end": "1158400"
  },
  {
    "text": "because in that case it will",
    "start": "1158400",
    "end": "1159840"
  },
  {
    "text": "always be true and if the compiler",
    "start": "1159840",
    "end": "1162000"
  },
  {
    "text": "detects that",
    "start": "1162000",
    "end": "1162880"
  },
  {
    "text": "then it will be a compile time error",
    "start": "1162880",
    "end": "1166000"
  },
  {
    "text": "so here we see that this neat pattern",
    "start": "1166000",
    "end": "1169679"
  },
  {
    "text": "abstracts away a lot of boilerplate from",
    "start": "1169679",
    "end": "1171919"
  },
  {
    "text": "the previous idiom that we saw",
    "start": "1171919",
    "end": "1174720"
  },
  {
    "text": "now the interesting thing here is",
    "start": "1174720",
    "end": "1177760"
  },
  {
    "text": "what would for example happen if we",
    "start": "1177760",
    "end": "1179919"
  },
  {
    "text": "instead of having the instasoft check",
    "start": "1179919",
    "end": "1182240"
  },
  {
    "text": "have the negation would then s",
    "start": "1182240",
    "end": "1185440"
  },
  {
    "text": "also be in scope for the if and",
    "start": "1185440",
    "end": "1188640"
  },
  {
    "text": "what we see here is that the compiler is",
    "start": "1188640",
    "end": "1190640"
  },
  {
    "text": "actually really smart about this",
    "start": "1190640",
    "end": "1192480"
  },
  {
    "text": "because it sees that if this check",
    "start": "1192480",
    "end": "1195360"
  },
  {
    "text": "evaluates in the end to true",
    "start": "1195360",
    "end": "1197360"
  },
  {
    "text": "then in the else branch we would have as",
    "start": "1197360",
    "end": "1199600"
  },
  {
    "text": "in scope with the type of string",
    "start": "1199600",
    "end": "1201679"
  },
  {
    "text": "whereas in the regular if branch",
    "start": "1201679",
    "end": "1204799"
  },
  {
    "text": "so the non-else branch s would not be in",
    "start": "1204799",
    "end": "1207679"
  },
  {
    "text": "scope we would only have o in scope",
    "start": "1207679",
    "end": "1209600"
  },
  {
    "text": "and we should do something else there",
    "start": "1209600",
    "end": "1211200"
  },
  {
    "text": "like returning zero in this case",
    "start": "1211200",
    "end": "1213840"
  },
  {
    "text": "and this mechanism is called flow",
    "start": "1213840",
    "end": "1215360"
  },
  {
    "text": "scoping where",
    "start": "1215360",
    "end": "1217280"
  },
  {
    "text": "the variable the type pattern variable",
    "start": "1217280",
    "end": "1220880"
  },
  {
    "text": "is only a scope",
    "start": "1220880",
    "end": "1221919"
  },
  {
    "text": "if the pattern actually matches and the",
    "start": "1221919",
    "end": "1224400"
  },
  {
    "text": "match succeeds",
    "start": "1224400",
    "end": "1225760"
  },
  {
    "text": "so this is really really convenient it",
    "start": "1225760",
    "end": "1228240"
  },
  {
    "text": "really helps",
    "start": "1228240",
    "end": "1229039"
  },
  {
    "text": "tighten tighten up this code but it is",
    "start": "1229039",
    "end": "1232000"
  },
  {
    "text": "something that you",
    "start": "1232000",
    "end": "1232799"
  },
  {
    "text": "need to be aware of and might take a",
    "start": "1232799",
    "end": "1234559"
  },
  {
    "text": "little bit of getting used to",
    "start": "1234559",
    "end": "1236960"
  },
  {
    "text": "one example where you can very nicely",
    "start": "1236960",
    "end": "1239120"
  },
  {
    "text": "see this flow typing in action as well",
    "start": "1239120",
    "end": "1241440"
  },
  {
    "text": "is in this particular implementation of",
    "start": "1241440",
    "end": "1243679"
  },
  {
    "text": "the equals method that you might also",
    "start": "1243679",
    "end": "1245200"
  },
  {
    "text": "recognize where you",
    "start": "1245200",
    "end": "1246559"
  },
  {
    "text": "immediately return the first o instance",
    "start": "1246559",
    "end": "1249679"
  },
  {
    "text": "of my class which is the regular",
    "start": "1249679",
    "end": "1251200"
  },
  {
    "text": "instance of check",
    "start": "1251200",
    "end": "1252480"
  },
  {
    "text": "and then combined with the end operator",
    "start": "1252480",
    "end": "1254400"
  },
  {
    "text": "where you cast",
    "start": "1254400",
    "end": "1255760"
  },
  {
    "text": "my class o to where you cast o to my",
    "start": "1255760",
    "end": "1258960"
  },
  {
    "text": "class",
    "start": "1258960",
    "end": "1259600"
  },
  {
    "text": "then immediately get the name and call",
    "start": "1259600",
    "end": "1261919"
  },
  {
    "text": "equals on that",
    "start": "1261919",
    "end": "1263200"
  },
  {
    "text": "so this can be simplified using pattern",
    "start": "1263200",
    "end": "1265120"
  },
  {
    "text": "matching for instance off",
    "start": "1265120",
    "end": "1266799"
  },
  {
    "text": "to directly use o instance of my class m",
    "start": "1266799",
    "end": "1271120"
  },
  {
    "text": "and then because of flow typing in the",
    "start": "1271120",
    "end": "1273280"
  },
  {
    "text": "right hand side",
    "start": "1273280",
    "end": "1274320"
  },
  {
    "text": "of this end operator we don't have to",
    "start": "1274320",
    "end": "1277840"
  },
  {
    "text": "cast anymore we can",
    "start": "1277840",
    "end": "1278960"
  },
  {
    "text": "immediately use m as being of type my",
    "start": "1278960",
    "end": "1281679"
  },
  {
    "text": "class",
    "start": "1281679",
    "end": "1282720"
  },
  {
    "text": "so again a nice simplification and a",
    "start": "1282720",
    "end": "1285520"
  },
  {
    "text": "nice",
    "start": "1285520",
    "end": "1286240"
  },
  {
    "text": "way of cleaning up this previous casting",
    "start": "1286240",
    "end": "1288559"
  },
  {
    "text": "that we had in the code",
    "start": "1288559",
    "end": "1290559"
  },
  {
    "text": "now as i said",
    "start": "1290559",
    "end": "1293600"
  },
  {
    "text": "what we see here with pattern matching",
    "start": "1293600",
    "end": "1295200"
  },
  {
    "text": "for instance off is only a small step",
    "start": "1295200",
    "end": "1298240"
  },
  {
    "text": "into a journey that adds a lot more",
    "start": "1298240",
    "end": "1301039"
  },
  {
    "text": "pattern matching in java",
    "start": "1301039",
    "end": "1302799"
  },
  {
    "text": "so some of the future directions that",
    "start": "1302799",
    "end": "1304720"
  },
  {
    "text": "i'm showing here have been sketched out",
    "start": "1304720",
    "end": "1306320"
  },
  {
    "text": "by the java team",
    "start": "1306320",
    "end": "1308240"
  },
  {
    "text": "there are no promises on when or how",
    "start": "1308240",
    "end": "1310000"
  },
  {
    "text": "this will actually end up in",
    "start": "1310000",
    "end": "1311520"
  },
  {
    "text": "the official language but these are just",
    "start": "1311520",
    "end": "1313679"
  },
  {
    "text": "some ways that the language might evolve",
    "start": "1313679",
    "end": "1316159"
  },
  {
    "text": "to implement pattern matching in other",
    "start": "1316159",
    "end": "1318080"
  },
  {
    "text": "features as well so here we can see that",
    "start": "1318080",
    "end": "1320640"
  },
  {
    "text": "in the new switch expression which we",
    "start": "1320640",
    "end": "1322320"
  },
  {
    "text": "already got in an earlier version of",
    "start": "1322320",
    "end": "1324480"
  },
  {
    "text": "java we can now also use",
    "start": "1324480",
    "end": "1327919"
  },
  {
    "text": "type patterns like we saw with the",
    "start": "1327919",
    "end": "1329679"
  },
  {
    "text": "instance of for our cases",
    "start": "1329679",
    "end": "1331760"
  },
  {
    "text": "so we have case integer i and if that",
    "start": "1331760",
    "end": "1334559"
  },
  {
    "text": "matches then on the right hand side",
    "start": "1334559",
    "end": "1336320"
  },
  {
    "text": "after the arrow i is actually an integer",
    "start": "1336320",
    "end": "1338799"
  },
  {
    "text": "and we don't have to cast it anymore",
    "start": "1338799",
    "end": "1340240"
  },
  {
    "text": "because the pattern has already matched",
    "start": "1340240",
    "end": "1342000"
  },
  {
    "text": "and bound the object o as an integer",
    "start": "1342000",
    "end": "1345440"
  },
  {
    "text": "to the variable i and the same for all",
    "start": "1345440",
    "end": "1348320"
  },
  {
    "text": "the other cases that we see here",
    "start": "1348320",
    "end": "1351039"
  },
  {
    "text": "now it's not just about taking type",
    "start": "1351039",
    "end": "1354559"
  },
  {
    "text": "patterns",
    "start": "1354559",
    "end": "1355200"
  },
  {
    "text": "and applying them elsewhere it's also",
    "start": "1355200",
    "end": "1357520"
  },
  {
    "text": "about introducing new kinds of patterns",
    "start": "1357520",
    "end": "1359760"
  },
  {
    "text": "that you can match against",
    "start": "1359760",
    "end": "1360960"
  },
  {
    "text": "in the language so we already saw",
    "start": "1360960",
    "end": "1363520"
  },
  {
    "text": "records",
    "start": "1363520",
    "end": "1364400"
  },
  {
    "text": "and we saw how you could construct",
    "start": "1364400",
    "end": "1365760"
  },
  {
    "text": "records here you see a really",
    "start": "1365760",
    "end": "1368159"
  },
  {
    "text": "new and exciting direction where we",
    "start": "1368159",
    "end": "1370320"
  },
  {
    "text": "might be able to",
    "start": "1370320",
    "end": "1371600"
  },
  {
    "text": "also pattern match on records and",
    "start": "1371600",
    "end": "1373760"
  },
  {
    "text": "immediately binds to the component",
    "start": "1373760",
    "end": "1375679"
  },
  {
    "text": "values",
    "start": "1375679",
    "end": "1376320"
  },
  {
    "text": "with new variable names here we have a",
    "start": "1376320",
    "end": "1378720"
  },
  {
    "text": "point records with x and",
    "start": "1378720",
    "end": "1380400"
  },
  {
    "text": "x and y and if the object o",
    "start": "1380400",
    "end": "1383679"
  },
  {
    "text": "is indeed a point we would immediately",
    "start": "1383679",
    "end": "1386640"
  },
  {
    "text": "bind",
    "start": "1386640",
    "end": "1387360"
  },
  {
    "text": "the x and the y components to the x and",
    "start": "1387360",
    "end": "1390000"
  },
  {
    "text": "y variables here and we can start",
    "start": "1390000",
    "end": "1391360"
  },
  {
    "text": "immediately using them",
    "start": "1391360",
    "end": "1393200"
  },
  {
    "text": "and if it's not the case well then we",
    "start": "1393200",
    "end": "1395840"
  },
  {
    "text": "just",
    "start": "1395840",
    "end": "1396240"
  },
  {
    "text": "skip over the if and move on so that's a",
    "start": "1396240",
    "end": "1399840"
  },
  {
    "text": "that's a really nice",
    "start": "1399840",
    "end": "1400880"
  },
  {
    "text": "nice future direction for pattern",
    "start": "1400880",
    "end": "1402320"
  },
  {
    "text": "matching as well and",
    "start": "1402320",
    "end": "1404080"
  },
  {
    "text": "there are more different types of",
    "start": "1404080",
    "end": "1405840"
  },
  {
    "text": "patterns that we might anticipate here",
    "start": "1405840",
    "end": "1408000"
  },
  {
    "text": "so array patterns can be another one",
    "start": "1408000",
    "end": "1411440"
  },
  {
    "text": "where you match on o again and if o",
    "start": "1411440",
    "end": "1415039"
  },
  {
    "text": "is an array of strings in this case you",
    "start": "1415039",
    "end": "1418240"
  },
  {
    "text": "immediately extract the first and the",
    "start": "1418240",
    "end": "1420159"
  },
  {
    "text": "second part of the",
    "start": "1420159",
    "end": "1422080"
  },
  {
    "text": "string array to s1 and s2",
    "start": "1422080",
    "end": "1425360"
  },
  {
    "text": "and this of course only works if there",
    "start": "1425360",
    "end": "1427120"
  },
  {
    "text": "are actually",
    "start": "1427120",
    "end": "1428480"
  },
  {
    "text": "two or more elements in this in the",
    "start": "1428480",
    "end": "1430240"
  },
  {
    "text": "string array",
    "start": "1430240",
    "end": "1431840"
  },
  {
    "text": "and we just ignore the remainder with",
    "start": "1431840",
    "end": "1433679"
  },
  {
    "text": "these three dots",
    "start": "1433679",
    "end": "1435039"
  },
  {
    "text": "again this is not in java 16 this might",
    "start": "1435039",
    "end": "1437600"
  },
  {
    "text": "be coming in the future",
    "start": "1437600",
    "end": "1438799"
  },
  {
    "text": "version of java but it shows that this",
    "start": "1438799",
    "end": "1441279"
  },
  {
    "text": "this pattern matching",
    "start": "1441279",
    "end": "1442480"
  },
  {
    "text": "for instance off which in itself is just",
    "start": "1442480",
    "end": "1444960"
  },
  {
    "text": "a small feature of course",
    "start": "1444960",
    "end": "1446159"
  },
  {
    "text": "it's nice but it's small is a small step",
    "start": "1446159",
    "end": "1449440"
  },
  {
    "text": "towards this new future where we have",
    "start": "1449440",
    "end": "1452240"
  },
  {
    "text": "lots more places where we can do pattern",
    "start": "1452240",
    "end": "1453919"
  },
  {
    "text": "matching",
    "start": "1453919",
    "end": "1454480"
  },
  {
    "text": "and we where we also have additional",
    "start": "1454480",
    "end": "1456640"
  },
  {
    "text": "kinds of patterns that we can match",
    "start": "1456640",
    "end": "1457919"
  },
  {
    "text": "against",
    "start": "1457919",
    "end": "1458559"
  },
  {
    "text": "besides the type patterns that we saw",
    "start": "1458559",
    "end": "1461919"
  },
  {
    "text": "last i want to briefly tell you about",
    "start": "1461919",
    "end": "1463600"
  },
  {
    "text": "the sealed classes feature",
    "start": "1463600",
    "end": "1465440"
  },
  {
    "text": "this is a preview feature in java 16",
    "start": "1465440",
    "end": "1468080"
  },
  {
    "text": "which means that you need to add the",
    "start": "1468080",
    "end": "1469520"
  },
  {
    "text": "enable preview flag",
    "start": "1469520",
    "end": "1470960"
  },
  {
    "text": "to your compiler invocation and your jvm",
    "start": "1470960",
    "end": "1473120"
  },
  {
    "text": "invocation if you want to use this",
    "start": "1473120",
    "end": "1474559"
  },
  {
    "text": "feature so it's not final yet",
    "start": "1474559",
    "end": "1477200"
  },
  {
    "text": "however it is meant to control",
    "start": "1477200",
    "end": "1480400"
  },
  {
    "text": "your inheritance hierarchy so let's say",
    "start": "1480400",
    "end": "1482720"
  },
  {
    "text": "you want to model",
    "start": "1482720",
    "end": "1483919"
  },
  {
    "text": "a super type option where you only want",
    "start": "1483919",
    "end": "1486480"
  },
  {
    "text": "to have",
    "start": "1486480",
    "end": "1487200"
  },
  {
    "text": "some and empty as subtypes now",
    "start": "1487200",
    "end": "1491039"
  },
  {
    "text": "what you want to prevent here is that",
    "start": "1491039",
    "end": "1492480"
  },
  {
    "text": "somebody arbitrary extends your option",
    "start": "1492480",
    "end": "1494400"
  },
  {
    "text": "to",
    "start": "1494400",
    "end": "1494799"
  },
  {
    "text": "maybe include a maybe type so that you",
    "start": "1494799",
    "end": "1497919"
  },
  {
    "text": "have an exhaustive overview of all",
    "start": "1497919",
    "end": "1499919"
  },
  {
    "text": "subtypes that exist",
    "start": "1499919",
    "end": "1501039"
  },
  {
    "text": "of option of which maybe is not part",
    "start": "1501039",
    "end": "1504320"
  },
  {
    "text": "so the only tool to control inheritance",
    "start": "1504320",
    "end": "1507919"
  },
  {
    "text": "in java at the moment",
    "start": "1507919",
    "end": "1509279"
  },
  {
    "text": "is final and this means that there",
    "start": "1509279",
    "end": "1511279"
  },
  {
    "text": "cannot be any subclasses at all",
    "start": "1511279",
    "end": "1513679"
  },
  {
    "text": "now there are some workarounds to be",
    "start": "1513679",
    "end": "1515840"
  },
  {
    "text": "able to model this",
    "start": "1515840",
    "end": "1517520"
  },
  {
    "text": "this feature without sealed classes but",
    "start": "1517520",
    "end": "1520400"
  },
  {
    "text": "using sealed classes this becomes",
    "start": "1520400",
    "end": "1522159"
  },
  {
    "text": "much easier so what we can do there is",
    "start": "1522159",
    "end": "1524480"
  },
  {
    "text": "we can define the option class",
    "start": "1524480",
    "end": "1526400"
  },
  {
    "text": "to be sealed and then after the class",
    "start": "1526400",
    "end": "1529760"
  },
  {
    "text": "declaration we have a permits keywords",
    "start": "1529760",
    "end": "1532240"
  },
  {
    "text": "and then we say only sum and empty are",
    "start": "1532240",
    "end": "1535039"
  },
  {
    "text": "allowed",
    "start": "1535039",
    "end": "1535520"
  },
  {
    "text": "to extend class option now we can just",
    "start": "1535520",
    "end": "1539039"
  },
  {
    "text": "normally define",
    "start": "1539039",
    "end": "1540159"
  },
  {
    "text": "empty and some as classes we of course",
    "start": "1540159",
    "end": "1543360"
  },
  {
    "text": "want to make them final there because we",
    "start": "1543360",
    "end": "1544880"
  },
  {
    "text": "don't want any other classes to extend",
    "start": "1544880",
    "end": "1546880"
  },
  {
    "text": "empty and sum but no other class can now",
    "start": "1546880",
    "end": "1549760"
  },
  {
    "text": "be compiled",
    "start": "1549760",
    "end": "1550720"
  },
  {
    "text": "to extend option this is enforced by the",
    "start": "1550720",
    "end": "1553840"
  },
  {
    "text": "compiler",
    "start": "1553840",
    "end": "1554640"
  },
  {
    "text": "through the seals classes mechanism and",
    "start": "1554640",
    "end": "1556799"
  },
  {
    "text": "we now indicate that only",
    "start": "1556799",
    "end": "1558880"
  },
  {
    "text": "sum and empty are allowed subtypes of",
    "start": "1558880",
    "end": "1561440"
  },
  {
    "text": "apps",
    "start": "1561440",
    "end": "1562080"
  },
  {
    "text": "of option we can also do this without a",
    "start": "1562080",
    "end": "1565200"
  },
  {
    "text": "permits clause",
    "start": "1565200",
    "end": "1566400"
  },
  {
    "text": "if we define all of these classes in the",
    "start": "1566400",
    "end": "1568799"
  },
  {
    "text": "same source file so an example here is",
    "start": "1568799",
    "end": "1570880"
  },
  {
    "text": "that we say",
    "start": "1570880",
    "end": "1571600"
  },
  {
    "text": "your option class again is sealed but",
    "start": "1571600",
    "end": "1574400"
  },
  {
    "text": "instead",
    "start": "1574400",
    "end": "1575039"
  },
  {
    "text": "of having separate source files and",
    "start": "1575039",
    "end": "1579120"
  },
  {
    "text": "indicating using permits that empty and",
    "start": "1579120",
    "end": "1581279"
  },
  {
    "text": "some are allowed to extend",
    "start": "1581279",
    "end": "1582480"
  },
  {
    "text": "option all subclasses in the source file",
    "start": "1582480",
    "end": "1586320"
  },
  {
    "text": "are allowed to extend option so we can",
    "start": "1586320",
    "end": "1589039"
  },
  {
    "text": "define everything in one place and in",
    "start": "1589039",
    "end": "1591039"
  },
  {
    "text": "one go",
    "start": "1591039",
    "end": "1592159"
  },
  {
    "text": "so this effectively is the same as we",
    "start": "1592159",
    "end": "1594400"
  },
  {
    "text": "saw before with separate source files",
    "start": "1594400",
    "end": "1596400"
  },
  {
    "text": "but now without the permits keywords and",
    "start": "1596400",
    "end": "1598640"
  },
  {
    "text": "just the sealed keywords",
    "start": "1598640",
    "end": "1600080"
  },
  {
    "text": "on option so again there's lots and lots",
    "start": "1600080",
    "end": "1603520"
  },
  {
    "text": "more to say about this feature so if",
    "start": "1603520",
    "end": "1605039"
  },
  {
    "text": "you're interested in that i highly",
    "start": "1605039",
    "end": "1606960"
  },
  {
    "text": "recommend going to",
    "start": "1606960",
    "end": "1608000"
  },
  {
    "text": "the jab page the java enhancement",
    "start": "1608000",
    "end": "1610080"
  },
  {
    "text": "proposal for this feature",
    "start": "1610080",
    "end": "1612080"
  },
  {
    "text": "jab 360 and read more about it",
    "start": "1612080",
    "end": "1615120"
  },
  {
    "text": "this is something that is not officially",
    "start": "1615120",
    "end": "1617200"
  },
  {
    "text": "part of java 16",
    "start": "1617200",
    "end": "1618640"
  },
  {
    "text": "but it will be part of a future java",
    "start": "1618640",
    "end": "1620559"
  },
  {
    "text": "release as a real",
    "start": "1620559",
    "end": "1622000"
  },
  {
    "text": "language feature so already worth",
    "start": "1622000",
    "end": "1624080"
  },
  {
    "text": "looking into",
    "start": "1624080",
    "end": "1625679"
  },
  {
    "text": "there are a lot of other things in java",
    "start": "1625679",
    "end": "1627279"
  },
  {
    "text": "16 that we could not cover in this",
    "start": "1627279",
    "end": "1629039"
  },
  {
    "text": "session",
    "start": "1629039",
    "end": "1629760"
  },
  {
    "text": "there have been newly added apis for",
    "start": "1629760",
    "end": "1632159"
  },
  {
    "text": "example the factory api",
    "start": "1632159",
    "end": "1634000"
  },
  {
    "text": "and foreign linking and for memory",
    "start": "1634000",
    "end": "1635760"
  },
  {
    "text": "access apis",
    "start": "1635760",
    "end": "1637440"
  },
  {
    "text": "all very very interesting but we focused",
    "start": "1637440",
    "end": "1640080"
  },
  {
    "text": "here on the language features rather",
    "start": "1640080",
    "end": "1641600"
  },
  {
    "text": "than on the api editions",
    "start": "1641600",
    "end": "1643279"
  },
  {
    "text": "also at the jvm level a lot of",
    "start": "1643279",
    "end": "1644960"
  },
  {
    "text": "improvements have been made for example",
    "start": "1644960",
    "end": "1646720"
  },
  {
    "text": "zgc",
    "start": "1646720",
    "end": "1647840"
  },
  {
    "text": "has had some performance improvements we",
    "start": "1647840",
    "end": "1650799"
  },
  {
    "text": "have elastic metaspace improvements",
    "start": "1650799",
    "end": "1652840"
  },
  {
    "text": "around how this is handled by the jvm",
    "start": "1652840",
    "end": "1655760"
  },
  {
    "text": "and also very very impactful is that",
    "start": "1655760",
    "end": "1659279"
  },
  {
    "text": "now encapsulated types in the jdk will",
    "start": "1659279",
    "end": "1662080"
  },
  {
    "text": "be really strongly guarded",
    "start": "1662080",
    "end": "1663600"
  },
  {
    "text": "even when running your application from",
    "start": "1663600",
    "end": "1665200"
  },
  {
    "text": "the class path",
    "start": "1665200",
    "end": "1666640"
  },
  {
    "text": "now i realize this is all a lot and not",
    "start": "1666640",
    "end": "1669520"
  },
  {
    "text": "something that",
    "start": "1669520",
    "end": "1670240"
  },
  {
    "text": "will probably speak to you from just",
    "start": "1670240",
    "end": "1673120"
  },
  {
    "text": "these headlines",
    "start": "1673120",
    "end": "1674159"
  },
  {
    "text": "so again if you go to the jab overview",
    "start": "1674159",
    "end": "1676880"
  },
  {
    "text": "page in the links shown here",
    "start": "1676880",
    "end": "1678559"
  },
  {
    "text": "you will find a lot more detail about",
    "start": "1678559",
    "end": "1680720"
  },
  {
    "text": "all of these changes and i highly",
    "start": "1680720",
    "end": "1682159"
  },
  {
    "text": "encourage you to look into those because",
    "start": "1682159",
    "end": "1684000"
  },
  {
    "text": "a lot of these are really interesting",
    "start": "1684000",
    "end": "1685520"
  },
  {
    "text": "and as i said some of them can even be",
    "start": "1685520",
    "end": "1687360"
  },
  {
    "text": "very impactful to your applications as",
    "start": "1687360",
    "end": "1689039"
  },
  {
    "text": "well",
    "start": "1689039",
    "end": "1689919"
  },
  {
    "text": "as a last highlight in java 16 there is",
    "start": "1689919",
    "end": "1692320"
  },
  {
    "text": "also a new packaging tool for java",
    "start": "1692320",
    "end": "1694080"
  },
  {
    "text": "applications introduced",
    "start": "1694080",
    "end": "1695200"
  },
  {
    "text": "which allows you to create native",
    "start": "1695200",
    "end": "1696960"
  },
  {
    "text": "installers and packages",
    "start": "1696960",
    "end": "1698559"
  },
  {
    "text": "for windows mac and linux also very",
    "start": "1698559",
    "end": "1702000"
  },
  {
    "text": "very useful and there's also jab for",
    "start": "1702000",
    "end": "1703919"
  },
  {
    "text": "death so i encourage you to also look at",
    "start": "1703919",
    "end": "1706000"
  },
  {
    "text": "that if that's interesting to",
    "start": "1706000",
    "end": "1707520"
  },
  {
    "text": "to the projects that you're working on",
    "start": "1707520",
    "end": "1710000"
  },
  {
    "text": "our time is up so i would like to thank",
    "start": "1710000",
    "end": "1711760"
  },
  {
    "text": "you a lot for your attention",
    "start": "1711760",
    "end": "1714159"
  },
  {
    "text": "again if you have any questions feel",
    "start": "1714159",
    "end": "1716960"
  },
  {
    "text": "free to ask",
    "start": "1716960",
    "end": "1717760"
  },
  {
    "text": "because we have some time after this",
    "start": "1717760",
    "end": "1719279"
  },
  {
    "text": "talk to to address these questions",
    "start": "1719279",
    "end": "1722000"
  },
  {
    "text": "if you're interested in more i have a",
    "start": "1722000",
    "end": "1723600"
  },
  {
    "text": "lot of content at pluralsight",
    "start": "1723600",
    "end": "1725520"
  },
  {
    "text": "if you follow the link here you will see",
    "start": "1725520",
    "end": "1727279"
  },
  {
    "text": "an overview of a lot of what's new in",
    "start": "1727279",
    "end": "1728960"
  },
  {
    "text": "java courses",
    "start": "1728960",
    "end": "1730159"
  },
  {
    "text": "and in april 2021 currently they're also",
    "start": "1730159",
    "end": "1733520"
  },
  {
    "text": "free to watch",
    "start": "1733520",
    "end": "1734320"
  },
  {
    "text": "so also highly encourage you to go there",
    "start": "1734320",
    "end": "1736720"
  },
  {
    "text": "and check that out if you're interested",
    "start": "1736720",
    "end": "1738720"
  },
  {
    "text": "in more details about what's happening",
    "start": "1738720",
    "end": "1740640"
  },
  {
    "text": "in java so with that being said",
    "start": "1740640",
    "end": "1742960"
  },
  {
    "text": "thank you for your attention and",
    "start": "1742960",
    "end": "1746000"
  },
  {
    "text": "please ask any questions that you have",
    "start": "1746000",
    "end": "1747840"
  },
  {
    "text": "and we'll try to answer them",
    "start": "1747840",
    "end": "1752960"
  }
]