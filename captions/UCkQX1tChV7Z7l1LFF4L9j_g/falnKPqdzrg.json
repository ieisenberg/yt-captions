[
  {
    "text": "second but let's talk about filtering",
    "start": "8639",
    "end": "10120"
  },
  {
    "text": "again really",
    "start": "10120",
    "end": "11360"
  },
  {
    "text": "quickly so hopefully people are trying",
    "start": "11360",
    "end": "13280"
  },
  {
    "text": "to implement the filtering um the way I",
    "start": "13280",
    "end": "14679"
  },
  {
    "text": "described and what I was looking for and",
    "start": "14679",
    "end": "17080"
  },
  {
    "text": "I saw a couple cases of it is a filter",
    "start": "17080",
    "end": "20640"
  },
  {
    "text": "takes a list and returns a list and the",
    "start": "20640",
    "end": "24240"
  },
  {
    "text": "list contains all the elements that met",
    "start": "24240",
    "end": "25880"
  },
  {
    "text": "some sort of Criterion and I said do it",
    "start": "25880",
    "end": "27519"
  },
  {
    "text": "with a for Loop so I saw some people",
    "start": "27519",
    "end": "29560"
  },
  {
    "text": "with a initial list that's empty they",
    "start": "29560",
    "end": "33879"
  },
  {
    "text": "looped over their rows of classmates if",
    "start": "33879",
    "end": "35879"
  },
  {
    "text": "the role was equal to the RO of the",
    "start": "35879",
    "end": "37559"
  },
  {
    "text": "input um the user inputed then they",
    "start": "37559",
    "end": "40079"
  },
  {
    "text": "appended that row to their results list",
    "start": "40079",
    "end": "44079"
  },
  {
    "text": "and then they passed that results list",
    "start": "44079",
    "end": "45360"
  },
  {
    "text": "to a function that prints off a bunch of",
    "start": "45360",
    "end": "47239"
  },
  {
    "text": "rows and that works python has a",
    "start": "47239",
    "end": "50920"
  },
  {
    "text": "built-in function called filter",
    "start": "50920",
    "end": "55760"
  },
  {
    "text": "and let's see how Filter",
    "start": "61280",
    "end": "62840"
  },
  {
    "text": "Works filter is a function that takes",
    "start": "62840",
    "end": "66040"
  },
  {
    "text": "two arguments the first argument is a",
    "start": "66040",
    "end": "69759"
  },
  {
    "text": "function or",
    "start": "69759",
    "end": "72720"
  },
  {
    "text": "none and the second argument is a",
    "start": "72720",
    "end": "77960"
  },
  {
    "text": "sequence so we talked about functions",
    "start": "80119",
    "end": "82119"
  },
  {
    "text": "being first class objects and among",
    "start": "82119",
    "end": "84479"
  },
  {
    "text": "other things that means you can pass",
    "start": "84479",
    "end": "86400"
  },
  {
    "text": "functions to",
    "start": "86400",
    "end": "87880"
  },
  {
    "text": "functions that first function uh is used",
    "start": "87880",
    "end": "91320"
  },
  {
    "text": "to do the filtering the description of",
    "start": "91320",
    "end": "92680"
  },
  {
    "text": "the doc string is return those items of",
    "start": "92680",
    "end": "94799"
  },
  {
    "text": "sequence for which function item is true",
    "start": "94799",
    "end": "96799"
  },
  {
    "text": "so you are going to pass a function that",
    "start": "96799",
    "end": "100119"
  },
  {
    "text": "you're not",
    "start": "100119",
    "end": "101320"
  },
  {
    "text": "calling the built-in filter function",
    "start": "101320",
    "end": "104159"
  },
  {
    "text": "will call your function that you passed",
    "start": "104159",
    "end": "106960"
  },
  {
    "text": "for each item in the sequence and your",
    "start": "106960",
    "end": "110000"
  },
  {
    "text": "function should return either true or",
    "start": "110000",
    "end": "112240"
  },
  {
    "text": "false if that item should be included in",
    "start": "112240",
    "end": "114759"
  },
  {
    "text": "the output",
    "start": "114759",
    "end": "116479"
  },
  {
    "text": "sequence so let's try that a little bit",
    "start": "116479",
    "end": "119880"
  },
  {
    "text": "for",
    "start": "119880",
    "end": "122880"
  },
  {
    "text": "so I've given myself a function",
    "start": "150200",
    "end": "152280"
  },
  {
    "text": "F1 it takes an",
    "start": "152280",
    "end": "155040"
  },
  {
    "text": "item if the item is greater than five it",
    "start": "155040",
    "end": "157480"
  },
  {
    "text": "returns true otherwise it returns",
    "start": "157480",
    "end": "159720"
  },
  {
    "text": "false I made myself a sequence it's",
    "start": "159720",
    "end": "162800"
  },
  {
    "text": "number 0 through",
    "start": "162800",
    "end": "164400"
  },
  {
    "text": "n and I",
    "start": "164400",
    "end": "166400"
  },
  {
    "text": "filter passing my function how do I pass",
    "start": "166400",
    "end": "169239"
  },
  {
    "text": "a",
    "start": "169239",
    "end": "170680"
  },
  {
    "text": "function to another function what should",
    "start": "170680",
    "end": "173640"
  },
  {
    "text": "I type now F1 there's no special",
    "start": "173640",
    "end": "178480"
  },
  {
    "text": "syntax it's just just a variable like",
    "start": "178480",
    "end": "180640"
  },
  {
    "text": "anything else and there's no indication",
    "start": "180640",
    "end": "182560"
  },
  {
    "text": "when I'm passing it that it's some",
    "start": "182560",
    "end": "184159"
  },
  {
    "text": "different kind of variable no function",
    "start": "184159",
    "end": "185519"
  },
  {
    "text": "pointers nothing like that this is just",
    "start": "185519",
    "end": "187519"
  },
  {
    "text": "a",
    "start": "187519",
    "end": "189400"
  },
  {
    "text": "variable it happens to be a variable",
    "start": "189400",
    "end": "192319"
  },
  {
    "text": "whose type is",
    "start": "192319",
    "end": "194840"
  },
  {
    "text": "function and notice sequence is",
    "start": "198840",
    "end": "201680"
  },
  {
    "text": "unmodified filter returns a",
    "start": "201680",
    "end": "205080"
  },
  {
    "text": "new",
    "start": "205080",
    "end": "206760"
  },
  {
    "text": "iterable and it's all the items from the",
    "start": "206760",
    "end": "209799"
  },
  {
    "text": "original sequence that met my function's",
    "start": "209799",
    "end": "212040"
  },
  {
    "text": "condition which was if they're greater",
    "start": "212040",
    "end": "213080"
  },
  {
    "text": "than",
    "start": "213080",
    "end": "214599"
  },
  {
    "text": "true um and it said I can either pass a",
    "start": "214599",
    "end": "217040"
  },
  {
    "text": "function or",
    "start": "217040",
    "end": "218879"
  },
  {
    "text": "none this is sometimes",
    "start": "218879",
    "end": "222519"
  },
  {
    "text": "useful notice what I did to my",
    "start": "225439",
    "end": "228239"
  },
  {
    "text": "sequence why did it do that what's the",
    "start": "228239",
    "end": "231200"
  },
  {
    "text": "logical condition that everything except",
    "start": "231200",
    "end": "232799"
  },
  {
    "text": "for zero",
    "start": "232799",
    "end": "235120"
  },
  {
    "text": "meets truthiness yep zero is false is",
    "start": "235120",
    "end": "240879"
  },
  {
    "text": "in a Boolean context and all the numbers",
    "start": "240879",
    "end": "244079"
  },
  {
    "text": "so if you have a list and you want to",
    "start": "244079",
    "end": "246000"
  },
  {
    "text": "remove say blank strings from",
    "start": "246000",
    "end": "251120"
  },
  {
    "text": "it you can use the filter function with",
    "start": "258199",
    "end": "260799"
  },
  {
    "text": "none it'll remove anything that",
    "start": "260799",
    "end": "263000"
  },
  {
    "text": "evaluates to false empty lists empty",
    "start": "263000",
    "end": "266280"
  },
  {
    "text": "dicks blank strings zero",
    "start": "266280",
    "end": "271039"
  },
  {
    "text": "so if we want to use the filter function",
    "start": "271039",
    "end": "272960"
  },
  {
    "text": "to implement our filtering of our rows",
    "start": "272960",
    "end": "276520"
  },
  {
    "text": "in our classmates.",
    "start": "276520",
    "end": "278919"
  },
  {
    "text": "PI we have a little bit of a problem we",
    "start": "278919",
    "end": "281360"
  },
  {
    "text": "need to pass a",
    "start": "281360",
    "end": "283000"
  },
  {
    "text": "function that's going to return true or",
    "start": "283000",
    "end": "285479"
  },
  {
    "text": "false based on whether the row meets",
    "start": "285479",
    "end": "288440"
  },
  {
    "text": "some Criterion what Criterion is it that",
    "start": "288440",
    "end": "290120"
  },
  {
    "text": "the row has to",
    "start": "290120",
    "end": "291840"
  },
  {
    "text": "meet whether the row matches the user",
    "start": "291840",
    "end": "294440"
  },
  {
    "text": "input how do we get the the row is",
    "start": "294440",
    "end": "298039"
  },
  {
    "text": "passed by filter to our function as an",
    "start": "298039",
    "end": "301479"
  },
  {
    "text": "input argument how do we get the user",
    "start": "301479",
    "end": "303080"
  },
  {
    "text": "input into our",
    "start": "303080",
    "end": "304600"
  },
  {
    "text": "function based on what you know now you",
    "start": "304600",
    "end": "308039"
  },
  {
    "text": "can't but we could make the user input",
    "start": "308039",
    "end": "311120"
  },
  {
    "text": "be a global argument or at least in the",
    "start": "311120",
    "end": "314199"
  },
  {
    "text": "containing namespace of our",
    "start": "314199",
    "end": "317440"
  },
  {
    "text": "function and then we'd be able to see it",
    "start": "317919",
    "end": "319840"
  },
  {
    "text": "inside of our function we don't want to",
    "start": "319840",
    "end": "321280"
  },
  {
    "text": "assign to it we don't need the globals",
    "start": "321280",
    "end": "322560"
  },
  {
    "text": "keyword we just want to look at its",
    "start": "322560",
    "end": "324120"
  },
  {
    "text": "value um and notice I said a second",
    "start": "324120",
    "end": "327360"
  },
  {
    "text": "thing there one peculiarity of function",
    "start": "327360",
    "end": "331479"
  },
  {
    "text": "definitions uh that we're going to get",
    "start": "331479",
    "end": "333360"
  },
  {
    "text": "to",
    "start": "333360",
    "end": "334520"
  },
  {
    "text": "later more extensively but I'll just",
    "start": "334520",
    "end": "336960"
  },
  {
    "text": "show you now",
    "start": "336960",
    "end": "340440"
  },
  {
    "text": "in Python you can declare functions",
    "start": "362560",
    "end": "365280"
  },
  {
    "text": "inside of functions and they have access",
    "start": "365280",
    "end": "368520"
  },
  {
    "text": "to their containing",
    "start": "368520",
    "end": "370520"
  },
  {
    "text": "namespace again lookup only by",
    "start": "370520",
    "end": "374080"
  },
  {
    "text": "default so it's not just um the rule I",
    "start": "374080",
    "end": "377160"
  },
  {
    "text": "explained earlier which is we look for a",
    "start": "377160",
    "end": "378800"
  },
  {
    "text": "variable in our local namespace and then",
    "start": "378800",
    "end": "380319"
  },
  {
    "text": "we look in the global namespace X there",
    "start": "380319",
    "end": "382680"
  },
  {
    "text": "on line 110 is not in the global",
    "start": "382680",
    "end": "384800"
  },
  {
    "text": "namespace it's in the local namespace of",
    "start": "384800",
    "end": "386960"
  },
  {
    "text": "function",
    "start": "386960",
    "end": "388080"
  },
  {
    "text": "Fu function second has its own local",
    "start": "388080",
    "end": "391639"
  },
  {
    "text": "namespace which is blank when we print X",
    "start": "391639",
    "end": "394319"
  },
  {
    "text": "we look for X in the local namespace of",
    "start": "394319",
    "end": "396240"
  },
  {
    "text": "function second it's not there we look",
    "start": "396240",
    "end": "398199"
  },
  {
    "text": "in all the containing name",
    "start": "398199",
    "end": "400919"
  },
  {
    "text": "spaces which is the local name space of",
    "start": "400919",
    "end": "402960"
  },
  {
    "text": "the containing function in this case",
    "start": "402960",
    "end": "404759"
  },
  {
    "text": "back out to the global namespace and we",
    "start": "404759",
    "end": "406280"
  },
  {
    "text": "actually find it on our",
    "start": "406280",
    "end": "408199"
  },
  {
    "text": "way python 2 does not have fine grain",
    "start": "408199",
    "end": "410960"
  },
  {
    "text": "controls to um or fine grain tools to",
    "start": "410960",
    "end": "413560"
  },
  {
    "text": "let you control how these lookups are",
    "start": "413560",
    "end": "415680"
  },
  {
    "text": "performed it's either obey the default",
    "start": "415680",
    "end": "418560"
  },
  {
    "text": "rules or use the global declaration",
    "start": "418560",
    "end": "420800"
  },
  {
    "text": "which forces you out to the outermost",
    "start": "420800",
    "end": "422919"
  },
  {
    "text": "scope not just the containing scope",
    "start": "422919",
    "end": "425479"
  },
  {
    "text": "Python 3 has a few more tools for um",
    "start": "425479",
    "end": "428960"
  },
  {
    "text": "managing your name spaces and how your",
    "start": "428960",
    "end": "430479"
  },
  {
    "text": "name spaces are looked up up the stack",
    "start": "430479",
    "end": "433199"
  },
  {
    "text": "it yeah pops the stack to the containing",
    "start": "433199",
    "end": "435199"
  },
  {
    "text": "context and we will use this fact to",
    "start": "435199",
    "end": "439039"
  },
  {
    "text": "write some truly mind-blowing functions",
    "start": "439039",
    "end": "441520"
  },
  {
    "text": "in a little while when we get the",
    "start": "441520",
    "end": "443560"
  },
  {
    "text": "closures for the",
    "start": "443560",
    "end": "445919"
  },
  {
    "text": "moment let's say we get some input as a",
    "start": "445919",
    "end": "448440"
  },
  {
    "text": "global variable",
    "start": "448440",
    "end": "450360"
  },
  {
    "text": "Define a function that compares a row to",
    "start": "450360",
    "end": "452639"
  },
  {
    "text": "a global variable and returns true or",
    "start": "452639",
    "end": "455039"
  },
  {
    "text": "false so your next uh assignment has two",
    "start": "455039",
    "end": "459199"
  },
  {
    "text": "variations on what you've been",
    "start": "459199",
    "end": "462280"
  },
  {
    "text": "doing so for classmates",
    "start": "469919",
    "end": "473440"
  },
  {
    "text": "8py if you've got your filter working go",
    "start": "473440",
    "end": "475960"
  },
  {
    "text": "ahead and reimplement it using the",
    "start": "475960",
    "end": "477879"
  },
  {
    "text": "built-in filter function",
    "start": "477879",
    "end": "480479"
  },
  {
    "text": "that means you need to specify your",
    "start": "480479",
    "end": "482639"
  },
  {
    "text": "filtering",
    "start": "482639",
    "end": "484159"
  },
  {
    "text": "function and we've kind of got the hint",
    "start": "484159",
    "end": "486280"
  },
  {
    "text": "that we've talked about you're probably",
    "start": "486280",
    "end": "487479"
  },
  {
    "text": "going to just access the global",
    "start": "487479",
    "end": "488720"
  },
  {
    "text": "namespace to look at the user input and",
    "start": "488720",
    "end": "492000"
  },
  {
    "text": "then the other thing that I'd like you",
    "start": "492000",
    "end": "493159"
  },
  {
    "text": "to do is also take advantage of the",
    "start": "493159",
    "end": "495720"
  },
  {
    "text": "first class nature of functions in",
    "start": "495720",
    "end": "498400"
  },
  {
    "text": "Python Julie asked me a good question",
    "start": "498400",
    "end": "500360"
  },
  {
    "text": "she asked if python has a case or switch",
    "start": "500360",
    "end": "502720"
  },
  {
    "text": "statement and your main um program",
    "start": "502720",
    "end": "508039"
  },
  {
    "text": "execution at this",
    "start": "508039",
    "end": "510280"
  },
  {
    "text": "Point probably look something like",
    "start": "510280",
    "end": "515000"
  },
  {
    "text": "this you've got a main",
    "start": "517320",
    "end": "519839"
  },
  {
    "text": "Loop that's well true it's printing out",
    "start": "519839",
    "end": "522719"
  },
  {
    "text": "a menu and you say if answerers five",
    "start": "522719",
    "end": "526360"
  },
  {
    "text": "else if answerers one else if aners two",
    "start": "526360",
    "end": "528760"
  },
  {
    "text": "else if aners three else if aners four",
    "start": "528760",
    "end": "532000"
  },
  {
    "text": "um other languages have a switch or a",
    "start": "532000",
    "end": "533640"
  },
  {
    "text": "case statement that says hey I'm going",
    "start": "533640",
    "end": "535080"
  },
  {
    "text": "to um do something conditionally based",
    "start": "535080",
    "end": "537200"
  },
  {
    "text": "on a single piece of input and here's",
    "start": "537200",
    "end": "538880"
  },
  {
    "text": "all the different cases that it could be",
    "start": "538880",
    "end": "541000"
  },
  {
    "text": "um and also have some optimization",
    "start": "541000",
    "end": "542640"
  },
  {
    "text": "techniques like fall through python",
    "start": "542640",
    "end": "544560"
  },
  {
    "text": "doesn't have a switch or case statement",
    "start": "544560",
    "end": "546600"
  },
  {
    "text": "and the common python idiom to handle",
    "start": "546600",
    "end": "548560"
  },
  {
    "text": "this sort of thing I want to select um",
    "start": "548560",
    "end": "551480"
  },
  {
    "text": "some code that runs along uh with a",
    "start": "551480",
    "end": "553640"
  },
  {
    "text": "value would be to",
    "start": "553640",
    "end": "557040"
  },
  {
    "text": "rewrite my menu as a data structure with",
    "start": "558320",
    "end": "562920"
  },
  {
    "text": "user input pointing to",
    "start": "562920",
    "end": "566519"
  },
  {
    "text": "code so how about this",
    "start": "566519",
    "end": "571160"
  },
  {
    "text": "so I'll do it in the order I have it",
    "start": "579600",
    "end": "581120"
  },
  {
    "text": "there",
    "start": "581120",
    "end": "584120"
  },
  {
    "text": "and I'll stop right now so I don't have",
    "start": "608800",
    "end": "611880"
  },
  {
    "text": "these functions",
    "start": "611880",
    "end": "613240"
  },
  {
    "text": "implemented but quit for",
    "start": "613240",
    "end": "617040"
  },
  {
    "text": "instance now I do and what does my menu",
    "start": "621959",
    "end": "625920"
  },
  {
    "text": "handling Loop look like now I can print",
    "start": "625920",
    "end": "629480"
  },
  {
    "text": "the menu I can ask for a",
    "start": "629480",
    "end": "633079"
  },
  {
    "text": "selection and I might even include the",
    "start": "633079",
    "end": "635519"
  },
  {
    "text": "menu um the menu text in my data",
    "start": "635519",
    "end": "638560"
  },
  {
    "text": "structure here in some way and then I",
    "start": "638560",
    "end": "640880"
  },
  {
    "text": "can say if my answer is in menu which",
    "start": "640880",
    "end": "646240"
  },
  {
    "text": "means is it a valid",
    "start": "646240",
    "end": "648320"
  },
  {
    "text": "key then",
    "start": "648320",
    "end": "650920"
  },
  {
    "text": "menu",
    "start": "650920",
    "end": "652880"
  },
  {
    "text": "answer what say again",
    "start": "652880",
    "end": "656399"
  },
  {
    "text": "parenthesis yeah menu answer gives me a",
    "start": "656399",
    "end": "659000"
  },
  {
    "text": "value",
    "start": "659000",
    "end": "660200"
  },
  {
    "text": "that value is a function it's a",
    "start": "660200",
    "end": "663920"
  },
  {
    "text": "variable and I'm just calling",
    "start": "663920",
    "end": "666800"
  },
  {
    "text": "it and that replaces this if",
    "start": "666800",
    "end": "670959"
  },
  {
    "text": "statement replaces",
    "start": "670959",
    "end": "673600"
  },
  {
    "text": "my if L",
    "start": "673600",
    "end": "676839"
  },
  {
    "text": "if and this might be called the strategy",
    "start": "676839",
    "end": "680959"
  },
  {
    "text": "pattern if you look at design patterns",
    "start": "680959",
    "end": "684639"
  },
  {
    "text": "yeah so this is what may hang you up so",
    "start": "684639",
    "end": "686839"
  },
  {
    "text": "what is menu menu is a dictionary",
    "start": "686839",
    "end": "689959"
  },
  {
    "text": "right whose keys are inputs that are",
    "start": "689959",
    "end": "693639"
  },
  {
    "text": "menu choices and whose values are",
    "start": "693639",
    "end": "696680"
  },
  {
    "text": "function names they're they're variables",
    "start": "696680",
    "end": "699880"
  },
  {
    "text": "whose type is function so when I say",
    "start": "699880",
    "end": "702680"
  },
  {
    "text": "menu answer",
    "start": "702680",
    "end": "705680"
  },
  {
    "text": "here that is accessing a value and that",
    "start": "706040",
    "end": "708800"
  },
  {
    "text": "value is a function when I put open and",
    "start": "708800",
    "end": "711399"
  },
  {
    "text": "close parentheses after it I'm calling",
    "start": "711399",
    "end": "713760"
  },
  {
    "text": "that function you're calling a function",
    "start": "713760",
    "end": "717000"
  },
  {
    "text": "yep so if menu is if if answer was five",
    "start": "717000",
    "end": "720600"
  },
  {
    "text": "this is saying menu five which gets me",
    "start": "720600",
    "end": "723320"
  },
  {
    "text": "this value that value is a variable that",
    "start": "723320",
    "end": "725000"
  },
  {
    "text": "points to a",
    "start": "725000",
    "end": "726079"
  },
  {
    "text": "function and I put parentheses after it",
    "start": "726079",
    "end": "728519"
  },
  {
    "text": "to call",
    "start": "728519",
    "end": "729680"
  },
  {
    "text": "it the parentheses are the operators to",
    "start": "729680",
    "end": "731959"
  },
  {
    "text": "call a function and the reason is when I",
    "start": "731959",
    "end": "734480"
  },
  {
    "text": "Define a function inside of a function",
    "start": "734480",
    "end": "736639"
  },
  {
    "text": "its name is put in the local name space",
    "start": "736639",
    "end": "738440"
  },
  {
    "text": "of the function and so there's no way to",
    "start": "738440",
    "end": "740839"
  },
  {
    "text": "get to it there's no standard way to get",
    "start": "740839",
    "end": "743560"
  },
  {
    "text": "to it okay so let me circulate again um",
    "start": "743560",
    "end": "747560"
  },
  {
    "text": "no super new Concepts here the filter",
    "start": "747560",
    "end": "749639"
  },
  {
    "text": "built-in you're going to supply a",
    "start": "749639",
    "end": "751399"
  },
  {
    "text": "function to pass to the filter",
    "start": "751399",
    "end": "754320"
  },
  {
    "text": "builtin and then we'd also like to use",
    "start": "754320",
    "end": "756959"
  },
  {
    "text": "function variables and a data structure",
    "start": "756959",
    "end": "758760"
  },
  {
    "text": "to handle your menu selections",
    "start": "758760",
    "end": "762400"
  },
  {
    "text": "[Music]",
    "start": "762400",
    "end": "774440"
  }
]