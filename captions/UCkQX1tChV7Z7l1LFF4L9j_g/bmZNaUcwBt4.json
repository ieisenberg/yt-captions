[
  {
    "text": "welcome I'm glad you're here I'm glad I'm here yeah so I'll let people filter",
    "start": "3980",
    "end": "15710"
  },
  {
    "text": "and I guess I don't know a little bit before I get started I guess my name is",
    "start": "15710",
    "end": "22369"
  },
  {
    "text": "Carmen I work on if anyone's familiar with Travis CI it's a hosted continuous integration service and I'm on the build",
    "start": "22369",
    "end": "31130"
  },
  {
    "text": "infrastructure engineering team they're based out of New York and I thank you for coming in this talk okay so I have a",
    "start": "31130",
    "end": "41390"
  },
  {
    "text": "confession to make I've come here from the year 1983 no",
    "start": "41390",
    "end": "47809"
  },
  {
    "text": "really i time-traveled and I'd like to thank some of the people that helped me",
    "start": "47809",
    "end": "54500"
  },
  {
    "text": "acclimate myself to this earliest early 21st century and Jerome pitoni is the",
    "start": "54500",
    "end": "61400"
  },
  {
    "text": "first but didn't make it into the PDF yeah mm-hmm you will for that for the",
    "start": "61400",
    "end": "67070"
  },
  {
    "text": "posterity he's right there Dave Janie Alan Donovan Steve Francia",
    "start": "67070",
    "end": "74780"
  },
  {
    "text": "and my whole team at travesty I so back",
    "start": "74780",
    "end": "81320"
  },
  {
    "text": "to 1983 imagine that you are my fellow software engineers from the year 1983",
    "start": "81320",
    "end": "88520"
  },
  {
    "text": "and you happened upon a time machine and you traveled to 2017 you get a glimpse",
    "start": "88520",
    "end": "96920"
  },
  {
    "text": "of an opportunity to see the future of computers and the exponential impact",
    "start": "96920",
    "end": "104179"
  },
  {
    "text": "that they've had on society you'll maybe",
    "start": "104179",
    "end": "109880"
  },
  {
    "text": "start to look for ideas to take back with you and maybe you can be the person",
    "start": "109880",
    "end": "116329"
  },
  {
    "text": "to make the next lougle ever the curious",
    "start": "116329",
    "end": "121369"
  },
  {
    "text": "person you dive into everything that you can about what's happened over the last 35 years with programming from where you",
    "start": "121369",
    "end": "129710"
  },
  {
    "text": "left it in 1983 until today so you soak",
    "start": "129710",
    "end": "134810"
  },
  {
    "text": "in everything about the current programming languages and software during practices and you'll get to see",
    "start": "134810",
    "end": "140240"
  },
  {
    "text": "some of the predictions that you've had about hardware were confirmed and you'll",
    "start": "140240",
    "end": "150170"
  },
  {
    "text": "be in wonder of some of the things that are still going strong and in wide use",
    "start": "150170",
    "end": "155420"
  },
  {
    "text": "today some 40-odd years later you'll get to see this fairly new idea of object",
    "start": "155420",
    "end": "162980"
  },
  {
    "text": "orientation started by small talk a few years before 1983 and then get it see it",
    "start": "162980",
    "end": "169130"
  },
  {
    "text": "integrated with C and have it be named C++ and then you get to witness how that",
    "start": "169130",
    "end": "174200"
  },
  {
    "text": "really takes off and you'll see things getting added and iterated and polished",
    "start": "174200",
    "end": "181550"
  },
  {
    "text": "and wrapped and super reps and you'll see the evolution of this thing that we call a stack or in 2017 you'll see how",
    "start": "181550",
    "end": "188959"
  },
  {
    "text": "and why we call it Turtles all the way down and you'll see that computer coding",
    "start": "188959",
    "end": "194630"
  },
  {
    "text": "has grown big time there's this thing called the cloud and that's just really",
    "start": "194630",
    "end": "203150"
  },
  {
    "text": "other people's computers but all this growth is because source code is now",
    "start": "203150",
    "end": "208790"
  },
  {
    "text": "largely available and free on the internet the internet came in 1994 my fellow 1983",
    "start": "208790",
    "end": "216590"
  },
  {
    "text": "years and tcp/ip was also finalized in 1983 and yet for all I just mentioned a",
    "start": "216590",
    "end": "226600"
  },
  {
    "text": "big but exciting Internet by the way that's the original paper by Tim",
    "start": "226600",
    "end": "232310"
  },
  {
    "text": "berners-lee and the hand ride Henry note bio some of the supervisors and there's the tcp/ip",
    "start": "232310",
    "end": "241720"
  },
  {
    "text": "proposal including HTTP protocol and yet",
    "start": "242530",
    "end": "248120"
  },
  {
    "text": "for all I've mentioned which was just but a fraction of what's happened in 35 years you'll see that software",
    "start": "248120",
    "end": "254420"
  },
  {
    "text": "engineering as a profession languages practices it's still largely unstandardized and it's bustling and",
    "start": "254420",
    "end": "262160"
  },
  {
    "text": "it's ever-growing and it's moving like a bazaar there was even this book about it",
    "start": "262160",
    "end": "267229"
  },
  {
    "text": "I don't know if I want to read it though so what you'll see without exception are",
    "start": "267229",
    "end": "273530"
  },
  {
    "text": "all these ideas coming from previous ideas I mentioned Bell Labs here because",
    "start": "273530",
    "end": "279530"
  },
  {
    "text": "Bell Labs was really do record for some of the innovations in 1980 and those",
    "start": "279530",
    "end": "285980"
  },
  {
    "text": "will are still in use today they're also the combination and maturation of old ideas and they're born",
    "start": "285980",
    "end": "295250"
  },
  {
    "text": "from the very same people so even though",
    "start": "295250",
    "end": "300560"
  },
  {
    "text": "you'll see this growth of ideas and languages you'll also find a curious",
    "start": "300560",
    "end": "305900"
  },
  {
    "text": "anomaly a language called go I give you",
    "start": "305900",
    "end": "312410"
  },
  {
    "text": "this 1983 thought exercise probably because that's often a comment that I hear about go that it is a language",
    "start": "312410",
    "end": "318920"
  },
  {
    "text": "often criticized as being stuck in the 1980s that go has taken all the last",
    "start": "318920",
    "end": "324950"
  },
  {
    "text": "three-plus decades of language design evolution and has seems to just ignore",
    "start": "324950",
    "end": "331730"
  },
  {
    "text": "it so I want to talk about some of the things that people first criticize about",
    "start": "331730",
    "end": "337040"
  },
  {
    "text": "go before I talk about the design decisions as listed here in this lovely",
    "start": "337040",
    "end": "346300"
  },
  {
    "text": "curated github case schema go is not good you get the same complaints over",
    "start": "346300",
    "end": "352700"
  },
  {
    "text": "and over again to simple lack of syntactic sugar no generics bad dependency management stuck in the 70s",
    "start": "352700",
    "end": "358760"
  },
  {
    "text": "or the 80s battered of handling no unused imports too opinionated to verbose no ternary operator no macros or",
    "start": "358760",
    "end": "365900"
  },
  {
    "text": "templates okay my breath but I said that all in one breath and most of people who",
    "start": "365900",
    "end": "375680"
  },
  {
    "text": "haven't really understood go ask themselves the points or the the title",
    "start": "375680",
    "end": "382550"
  },
  {
    "text": "of my talk which is why so I'm gonna say why go why why and where have other",
    "start": "382550",
    "end": "391370"
  },
  {
    "text": "languages where other languages have evolved go looks like it has not it's a",
    "start": "391370",
    "end": "397100"
  },
  {
    "text": "curious anomaly why would a language even consider itself a 21st century",
    "start": "397100",
    "end": "402440"
  },
  {
    "text": "programming which with things like this so this was really my question why it's moving what",
    "start": "402440",
    "end": "411270"
  },
  {
    "text": "in sort of like this opposite direction and thus this talk is a product of my",
    "start": "411270",
    "end": "416849"
  },
  {
    "text": "quest to find out the why of go and I'd like to share that journey after",
    "start": "416849",
    "end": "424050"
  },
  {
    "text": "celebrating five years since gos inception in 2012 one of the creators",
    "start": "424050",
    "end": "430589"
  },
  {
    "text": "Rob Pike said go programming language was conceived as an answer to some of",
    "start": "430589",
    "end": "437490"
  },
  {
    "text": "the problems we are seeing developing software infrastructure at Google it was",
    "start": "437490",
    "end": "442499"
  },
  {
    "text": "created and conceived at Google the computing landscape today is almost unrelated to the environment in which",
    "start": "442499",
    "end": "449339"
  },
  {
    "text": "the language is being used mostly C++ Java and Python had been created the",
    "start": "449339",
    "end": "456569"
  },
  {
    "text": "problems introduced by multi-core processors networked systems massive",
    "start": "456569",
    "end": "462389"
  },
  {
    "text": "computation clusters and the web programming model were being worked around rather than addressed head-on",
    "start": "462389",
    "end": "470509"
  },
  {
    "text": "moreover the scale has changed today's servers compromised tens of",
    "start": "470509",
    "end": "476309"
  },
  {
    "text": "millions of lines of code and are worked on by hundreds or even thousands of",
    "start": "476309",
    "end": "481439"
  },
  {
    "text": "programmers and are updated bitterly every day to make matters worse bill",
    "start": "481439",
    "end": "487499"
  },
  {
    "text": "time has stretched to many minutes even hours on large compilation clusters I",
    "start": "487499",
    "end": "494990"
  },
  {
    "text": "can probably read that entire article and it's in it from here and make that",
    "start": "494990",
    "end": "500610"
  },
  {
    "text": "my talk but I do want to visit some of these statements and delve into them more fully chronologically and",
    "start": "500610",
    "end": "507240"
  },
  {
    "text": "thematically chronologically I want to start from gos creation and move forward",
    "start": "507240",
    "end": "513149"
  },
  {
    "text": "and backward from this point to understand what was present at the turn of the century and move forward and",
    "start": "513149",
    "end": "519209"
  },
  {
    "text": "backward and with this timeline I'd also like to organize things into three",
    "start": "519209",
    "end": "525439"
  },
  {
    "text": "broader themes software and languages and associated tooling Hardware Multi",
    "start": "525439",
    "end": "534810"
  },
  {
    "text": "multi core processors and threads and green hoods we're gonna talk all about that and then context",
    "start": "534810",
    "end": "542490"
  },
  {
    "text": "which means events industry social historical because one of the things I",
    "start": "542490",
    "end": "549660"
  },
  {
    "text": "asked myself to answer this why ago was recognizing time place context and",
    "start": "549660",
    "end": "555660"
  },
  {
    "text": "people because humans write languages and code and they don't do it in a vacuum so let's explore this people from",
    "start": "555660",
    "end": "567810"
  },
  {
    "text": "1980 so that's pixelated 8-bit Robert Griesemer Rob Pike and Ken Thompson it",
    "start": "567810",
    "end": "575070"
  },
  {
    "text": "was conceived it late 2007 at Google by these three people and this if you know",
    "start": "575070",
    "end": "581670"
  },
  {
    "text": "who these three people are this is a long legacy I want you to think about",
    "start": "581670",
    "end": "587580"
  },
  {
    "text": "for your programming career whether that's two years or ten years or coming",
    "start": "587580",
    "end": "592680"
  },
  {
    "text": "on 20 years think about in the past I mean think that you've built or done and and wish maybe you could go back knowing",
    "start": "592680",
    "end": "600030"
  },
  {
    "text": "what you know now because between these three they have built or haven't had a",
    "start": "600030",
    "end": "605940"
  },
  {
    "text": "hand in much well with what we personally use every day I couldn't even fit it on this timeline because it's",
    "start": "605940",
    "end": "611610"
  },
  {
    "text": "it's I yeah so Ken Thompson wrote at",
    "start": "611610",
    "end": "617550"
  },
  {
    "text": "Bell Labs UNIX what would be UNIX in the 1960s and then on like a summer off he",
    "start": "617550",
    "end": "622560"
  },
  {
    "text": "went to go write bsd he also then helps Dennis Ritchie write C and then he and raw pie catalogs",
    "start": "622560",
    "end": "630180"
  },
  {
    "text": "write utf-8 there's more as well this is",
    "start": "630180",
    "end": "636600"
  },
  {
    "text": "the legacy it's kind of hard to see but this is the legacy of starting from the pdp-7 operating system the first version",
    "start": "636600",
    "end": "644190"
  },
  {
    "text": "of unix and beyond right and that is ken thompson and his legacy so to continue",
    "start": "644190",
    "end": "653940"
  },
  {
    "text": "we also have Rob Pike who wrote plan nine which will take a prominent place",
    "start": "653940",
    "end": "660870"
  },
  {
    "text": "and go the operating system and we have Robert gray Simar who worked on and was",
    "start": "660870",
    "end": "666780"
  },
  {
    "text": "one of the primary architects of the hotspot JVM and that important to know right now I'm going to talk about that and the relevance of",
    "start": "666780",
    "end": "673350"
  },
  {
    "text": "that and a little bit later but I think I'll go as being a product of these things that were continuances out of",
    "start": "673350",
    "end": "679980"
  },
  {
    "text": "these bodies of work of these three men and perhaps a product what I think go is",
    "start": "679980",
    "end": "686670"
  },
  {
    "text": "is like maybe a product that that fixes the things that maybe haunted them right a product that remedies the shortcomings",
    "start": "686670",
    "end": "693720"
  },
  {
    "text": "that they could only see but see in hindsight and what I'm noticing is that or at least have an inkling of is that",
    "start": "693720",
    "end": "700860"
  },
  {
    "text": "they're not interested in revolution they're interested in simplicity so I've",
    "start": "700860",
    "end": "707850"
  },
  {
    "text": "talked about people and who's let's talk about the actual technical limitations",
    "start": "707850",
    "end": "713220"
  },
  {
    "text": "around 2007 and then what go talk about the historical contexts around the",
    "start": "713220",
    "end": "718740"
  },
  {
    "text": "decade prior to that and then talk about what go did and its approach to the language design design to try and see if",
    "start": "718740",
    "end": "725580"
  },
  {
    "text": "they can solve it so the the things that are 21st century about go a language",
    "start": "725580",
    "end": "731790"
  },
  {
    "text": "often accused from coming from 1980s are these things in my opinion so concurrency distributed systems garbage",
    "start": "731790",
    "end": "739650"
  },
  {
    "text": "collection memory but especially memory locality and readability so I'm going to",
    "start": "739650",
    "end": "745770"
  },
  {
    "text": "talk about each one of these and try to give you a little bit of context in history first massive concurrency",
    "start": "745770",
    "end": "753470"
  },
  {
    "text": "efficient support support for massive massively concurrent programs so 10 to",
    "start": "753470",
    "end": "758640"
  },
  {
    "text": "the 6th green threads which ingo parlance is called go routines that's quite manageable or go but why",
    "start": "758640",
    "end": "766230"
  },
  {
    "text": "green threads and why massive concurrency of all the problems out there wide of these three individuals",
    "start": "766230",
    "end": "771390"
  },
  {
    "text": "choose that and in order to understand why the creative creators of go chose green Fez is one of the first-class",
    "start": "771390",
    "end": "779070"
  },
  {
    "text": "features of the language I had to understand concurrency primitives so that means that I understand threads and",
    "start": "779070",
    "end": "787040"
  },
  {
    "text": "events and finally in green threads at the beginning of the 26 21st century so",
    "start": "787040",
    "end": "793350"
  },
  {
    "text": "green threads really quick before I get started the try line for those of you don't know green threads are the user",
    "start": "793350",
    "end": "798990"
  },
  {
    "text": "level threads so they're scheduled at like as an ordinary user level process and not by the colonel and green thread memory is",
    "start": "798990",
    "end": "805800"
  },
  {
    "text": "allocated from the heap rather than the stack created for it by the OS so and go",
    "start": "805800",
    "end": "810959"
  },
  {
    "text": "there know is known as go routines and I have it oh I have it here so there's go",
    "start": "810959",
    "end": "817709"
  },
  {
    "text": "in 2007 and then we have C++ at Google around the mid-early odds getting",
    "start": "817709",
    "end": "825810"
  },
  {
    "text": "efficient concurrency at scale was important especially for servers Google's experience with C++ in 2005 was",
    "start": "825810",
    "end": "833430"
  },
  {
    "text": "awful they couldn't afford one thread per connection and so they had to use these callbacks and event dispatchers",
    "start": "833430",
    "end": "840510"
  },
  {
    "text": "and it was leading to this horribly [Music] inverted style of programming and with",
    "start": "840510",
    "end": "846449"
  },
  {
    "text": "go routines you could just write a sequence of statements in what the logical order and so there's a lot of",
    "start": "846449",
    "end": "852750"
  },
  {
    "text": "history behind behind the go routines that's more nuance than simply just threads are bad and go routines are good",
    "start": "852750",
    "end": "859320"
  },
  {
    "text": "so 15 years ago we had the C 10k",
    "start": "859320",
    "end": "864329"
  },
  {
    "text": "challenge when basically threads were terribly expensive and once a poll which is a scalable i/o",
    "start": "864329",
    "end": "872579"
  },
  {
    "text": "event notification and K Q which is the BSD equivalent they came around 2004 and",
    "start": "872579",
    "end": "879199"
  },
  {
    "text": "2002 we they replaced the their older predecessors of Poland select and so a",
    "start": "879199",
    "end": "886050"
  },
  {
    "text": "lot of the efforts shifted from how to write programs in this event callback environment and you have these papers",
    "start": "886050",
    "end": "893130"
  },
  {
    "text": "which will put up in the context like Sita and Java niño and Python twisted and apache mina but none of those really",
    "start": "893130",
    "end": "900720"
  },
  {
    "text": "caught on they have lots of little groups pn people committed to doing whatever it took to master that",
    "start": "900720",
    "end": "907470"
  },
  {
    "text": "technology and learn to think in whatever the async framework required",
    "start": "907470",
    "end": "912560"
  },
  {
    "text": "but a few other things happened around that time to dim the newfound promise of",
    "start": "912560",
    "end": "918569"
  },
  {
    "text": "events threads got better hardware got better now there was some actual",
    "start": "918569",
    "end": "923970"
  },
  {
    "text": "competition so operating system people had something to aim at previously",
    "start": "923970",
    "end": "928980"
  },
  {
    "text": "threads had been faster than processes but now the incident so this so the incentive was wrong but now they had a",
    "start": "928980",
    "end": "935880"
  },
  {
    "text": "clear goal and it turned that there was a lot of low hanging fruit to pick so hardware got better",
    "start": "935880",
    "end": "942589"
  },
  {
    "text": "yeah here it is if you unless you had access to huge",
    "start": "942589",
    "end": "949529"
  },
  {
    "text": "servers big iron like the signee 4 50s or the e3 500 you didn't actually have more than one processor right and the",
    "start": "949529",
    "end": "956040"
  },
  {
    "text": "market for workstation CPU is not just in the Intel realm but MIPS and spark with single socket socket up until about",
    "start": "956040",
    "end": "962010"
  },
  {
    "text": "2005 and although you can get dual socket Pentium 2 and Pentium 3 boards",
    "start": "962010",
    "end": "968089"
  },
  {
    "text": "most people were focused on the gigahertz on the clock game right but once we have the Pentium 4 with that",
    "start": "968089",
    "end": "974579"
  },
  {
    "text": "hyper threading in 2000 p4 and the core 2 with dual core on a socket and I think",
    "start": "974579",
    "end": "980519"
  },
  {
    "text": "it was 2006 the game changed and especially changed on the server so in 2007 you could buy eight cores on a dual",
    "start": "980519",
    "end": "988440"
  },
  {
    "text": "socket chassis so now you see the trends in CPU cores and clock speed and",
    "start": "988440",
    "end": "994140"
  },
  {
    "text": "transistors here and in the software improvements and I put it all the way up until the blue dot",
    "start": "994140",
    "end": "1001730"
  },
  {
    "text": "ago so the very bottom black is a number of cores and we're starting to see multi",
    "start": "1001730",
    "end": "1006829"
  },
  {
    "text": "course and then you sort of see some other power consumption and Watts the clocks which is the frequency single for",
    "start": "1006829",
    "end": "1014089"
  },
  {
    "text": "the single threaded performance and then last of course is Moore's Law the transistors so you had multi processing",
    "start": "1014089",
    "end": "1023600"
  },
  {
    "text": "and many CPUs many tasks at the same time and we had thread advocates the",
    "start": "1023600",
    "end": "1028640"
  },
  {
    "text": "thread advocates won back all the ground that they lost to events and they didn't necessarily overtake them but the",
    "start": "1028640",
    "end": "1034428"
  },
  {
    "text": "playing field was a bit more even and now that servers could easily have four or eight cores for a few grand all of a",
    "start": "1034429",
    "end": "1042589"
  },
  {
    "text": "sudden the process model got a second lease on life so there's Ruby with mongrel and Python",
    "start": "1042589",
    "end": "1049070"
  },
  {
    "text": "gonna corn yeah paisa the multi processing and everyone was back in the",
    "start": "1049070",
    "end": "1055040"
  },
  {
    "text": "game because for moderate workloads it turned out that you could just throw cores at the problem and you got at least on the web tier near linear",
    "start": "1055040",
    "end": "1061400"
  },
  {
    "text": "scaling at least for a time but I think the creators of go saw the writing on",
    "start": "1061400",
    "end": "1067580"
  },
  {
    "text": "the wall for threads and hardware even in 2000 seven so you see here we're plateauing",
    "start": "1067580",
    "end": "1075720"
  },
  {
    "text": "on modern hardware and go routines they realized even in 2007 that go routines",
    "start": "1075720",
    "end": "1081840"
  },
  {
    "text": "and greet friends were really going to be the best possible solution but what why I keep going back to the why why do",
    "start": "1081840",
    "end": "1089790"
  },
  {
    "text": "go routines give us the best of both rules between threads and events and to",
    "start": "1089790",
    "end": "1095160"
  },
  {
    "text": "me I think that the answer comes from taking this wider perspective than just what generates the best graph on a in a",
    "start": "1095160",
    "end": "1102210"
  },
  {
    "text": "benchmark because focusing on just the absolute point in time result ignores a",
    "start": "1102210",
    "end": "1107520"
  },
  {
    "text": "hundred percent of the software engineering that went into that benchmark and I'll talk about that in a",
    "start": "1107520",
    "end": "1113160"
  },
  {
    "text": "little bit but what do I mean by that okay so let's let's go off on a little",
    "start": "1113160",
    "end": "1118500"
  },
  {
    "text": "bit of on the event side some programs that benchmark really well using events",
    "start": "1118500",
    "end": "1124500"
  },
  {
    "text": "nginx is a good example right it's this a whole event loop plus state machine model which works well because HTTP is a",
    "start": "1124500",
    "end": "1131940"
  },
  {
    "text": "very structured protocol so like you read the request line read headers read",
    "start": "1131940",
    "end": "1138240"
  },
  {
    "text": "body write status line write headers write body and all of the configuration is declarative in nginx so for this path",
    "start": "1138240",
    "end": "1145410"
  },
  {
    "text": "matching this pattern apply this transformation but you notice that nobody writes their application logic",
    "start": "1145410",
    "end": "1152040"
  },
  {
    "text": "inside nginx they always put it in front of their app why why is it nginx an app",
    "start": "1152040",
    "end": "1159600"
  },
  {
    "text": "server like Tomcat or JBoss the end of next model will manage mountable for",
    "start": "1159600",
    "end": "1164910"
  },
  {
    "text": "small groups of dedicated developers it's just too nerdy for the wider group of developers imagine being told yeah",
    "start": "1164910",
    "end": "1171000"
  },
  {
    "text": "ruby is too slow you need to rewrite your program for nginx but first you have to download a C compiler and then",
    "start": "1171000",
    "end": "1177930"
  },
  {
    "text": "you have to build your own state machine but I happy enough this is what Sol no",
    "start": "1177930",
    "end": "1184260"
  },
  {
    "text": "js' does - the first learn C part so",
    "start": "1184260",
    "end": "1189930"
  },
  {
    "text": "nodejs is the event model taken straight out of e poll and writ large on the entire JavaScript community in the 21st",
    "start": "1189930",
    "end": "1197700"
  },
  {
    "text": "century and I think I I go on this tangent on no des because I think no Jia's success has lots less to do with",
    "start": "1197700",
    "end": "1204480"
  },
  {
    "text": "event loops are fast so much as it does we can use JavaScript everywhere and for",
    "start": "1204480",
    "end": "1210150"
  },
  {
    "text": "that no GS folks are willing and prepared to put up with a lot and so one of the things that they're prepared to",
    "start": "1210150",
    "end": "1215429"
  },
  {
    "text": "put up with is auditing each bit of code they write or depend on to make sure",
    "start": "1215429",
    "end": "1220710"
  },
  {
    "text": "that it doesn't block and I think this is a good way to bring the discussion back to go know Deus and other invented",
    "start": "1220710",
    "end": "1228270"
  },
  {
    "text": "models like twisted and nut Java niño they're rooted in the idea of called web callbacks right so just like Windows 3.1",
    "start": "1228270",
    "end": "1236040"
  },
  {
    "text": "GUI programming and if you can't you so",
    "start": "1236040",
    "end": "1241650"
  },
  {
    "text": "I get you get a notification and you're expected to process that as fast a ball as possible and if you can't the",
    "start": "1241650",
    "end": "1247380"
  },
  {
    "text": "responsibility for scheduling that worked to happen later hopefully in discrete increments that's yours",
    "start": "1247380",
    "end": "1253980"
  },
  {
    "text": "that's your responsibility and the penalty for fail is failure is blocking and latency and it's an unforgiving",
    "start": "1253980",
    "end": "1260760"
  },
  {
    "text": "programming model and it's inherent in the design of the IO framework that you're given so compare that to Java",
    "start": "1260760",
    "end": "1266940"
  },
  {
    "text": "land the server server let motto is root model is root hopelessly rooted in the",
    "start": "1266940",
    "end": "1273240"
  },
  {
    "text": "idea of blocking so IO streams and Java do have a way of telling you how much",
    "start": "1273240",
    "end": "1278280"
  },
  {
    "text": "data can be read before they block but there's no way to wait for more data without the thread itself sleeping and",
    "start": "1278280",
    "end": "1285380"
  },
  {
    "text": "periodically checking and when you compose IO operations with primitives like this extinct a gzip reader on top",
    "start": "1285380",
    "end": "1293400"
  },
  {
    "text": "of a bufferedreader on top of a network reader it requires requires a thread per",
    "start": "1293400",
    "end": "1298919"
  },
  {
    "text": "connection approach so I explained before how threads and events are",
    "start": "1298919",
    "end": "1304140"
  },
  {
    "text": "roughly comparable in terms of performance and with 64-bit addresses spaces the thread per connection is",
    "start": "1304140",
    "end": "1310890"
  },
  {
    "text": "wasteful on paper but in practice not that bad so where's the clincher for go I think the go routine argument starts",
    "start": "1310890",
    "end": "1319440"
  },
  {
    "text": "by by looking at the bigger picture so it's not about doing efficient IO",
    "start": "1319440",
    "end": "1325820"
  },
  {
    "text": "through that's a point important but what the go routines do with that IO the",
    "start": "1325820",
    "end": "1332880"
  },
  {
    "text": "difference between nginx and the Tomcat examples and the reason why nginx that",
    "start": "1332880",
    "end": "1338340"
  },
  {
    "text": "invented web proxies successful in its Nisha's HTTP proxy is almost functional in its operation every request arrives",
    "start": "1338340",
    "end": "1345750"
  },
  {
    "text": "independent of any anything else it's filtered it's processed and it's responded to without interaction by any",
    "start": "1345750",
    "end": "1351779"
  },
  {
    "text": "other requests and that's my PHP remains so successful so all that cruft about sessions and cookies and memcache and",
    "start": "1351779",
    "end": "1359429"
  },
  {
    "text": "databases is the domain of the application server and it's why threads seem to be the dominant paradigm here",
    "start": "1359429",
    "end": "1365010"
  },
  {
    "text": "they have complex state not just a fixed state machine so essentially you can",
    "start": "1365010",
    "end": "1370559"
  },
  {
    "text": "make the argument that applications are the nexus for state management and that means coordination so in nodejs there is",
    "start": "1370559",
    "end": "1378570"
  },
  {
    "text": "no coordination because there is no parallelism at any one time the active",
    "start": "1378570",
    "end": "1383610"
  },
  {
    "text": "function can mutate whatever it needs and this is basically how callback paradigm works the whole program is this",
    "start": "1383610",
    "end": "1390960"
  },
  {
    "text": "rolling durable we love leaving notes about work to do later and in threaded application servers who must be threaded",
    "start": "1390960",
    "end": "1397440"
  },
  {
    "text": "because of their i/o paradigms coordination occurs between threads so that means using thread the thread",
    "start": "1397440",
    "end": "1403620"
  },
  {
    "text": "coordination primitives so if your thread wants to take a lock but can't and the thread has to register its",
    "start": "1403620",
    "end": "1410730"
  },
  {
    "text": "interest in that lock which is this disk call and then go to sleep that's another cyst call that's really",
    "start": "1410730",
    "end": "1417179"
  },
  {
    "text": "going to be hurting on your performance and especially if that performance is going to have to scale out so high so",
    "start": "1417179",
    "end": "1423270"
  },
  {
    "text": "it's not that having 10 to the 6 threads is a problem in itself but the coordination between the 10 to the 6",
    "start": "1423270",
    "end": "1429270"
  },
  {
    "text": "threads is where the overheads reveal themselves this call impacts gosh 1980s",
    "start": "1429270",
    "end": "1436980"
  },
  {
    "text": "a bit so I'm gonna I went I kind of",
    "start": "1436980",
    "end": "1442320"
  },
  {
    "text": "banged on a little bit about events and threads and basically wanted to say why",
    "start": "1442320",
    "end": "1448919"
  },
  {
    "text": "go routine is the best of both worlds I want to move on to the second technical",
    "start": "1448919",
    "end": "1455029"
  },
  {
    "text": "thing that I think makes it really good or go for a 21st century programming",
    "start": "1455029",
    "end": "1460740"
  },
  {
    "text": "language distributed systems so the success may be the success from go is that it is the first language or at",
    "start": "1460740",
    "end": "1467909"
  },
  {
    "text": "least it certainly started a trend to produce programs that were without a runtime and that's not without",
    "start": "1467909",
    "end": "1474940"
  },
  {
    "text": "its drawbacks but I think the ability to come compile or cross-compile as a program as a",
    "start": "1474940",
    "end": "1481600"
  },
  {
    "text": "single static binary has unlocked so many deployment and usage scenarios that",
    "start": "1481600",
    "end": "1487000"
  },
  {
    "text": "were thought too hard or too taxing since the 90s and I put this little box over there because so much of the stuff",
    "start": "1487000",
    "end": "1493540"
  },
  {
    "text": "that you're gonna attend today and tomorrow and the day after it's gonna be about this box and I don't want to bang on about that because you get to know",
    "start": "1493540",
    "end": "1499630"
  },
  {
    "text": "about that but just know that having a single static binary can reduce the",
    "start": "1499630",
    "end": "1504850"
  },
  {
    "text": "complexity where everything else exists so that's the distributed systems part",
    "start": "1504850",
    "end": "1510100"
  },
  {
    "text": "and that's certainly an incomplete answer because containers that have basically probably put operating system",
    "start": "1510100",
    "end": "1516940"
  },
  {
    "text": "vendors and distro packages out of business or they will in the next decade so the next and the third of the five is",
    "start": "1516940",
    "end": "1524440"
  },
  {
    "text": "this garbage collecting garbage collection bounded pause time for GCS which is crucial for real-time servers",
    "start": "1524440",
    "end": "1531450"
  },
  {
    "text": "so from everything that I've researched about go in my Wi-Fi I go and and what I",
    "start": "1531450",
    "end": "1539470"
  },
  {
    "text": "think makes a 21st century with the garbage collection is this this idea of memory management so GC design and go is",
    "start": "1539470",
    "end": "1546760"
  },
  {
    "text": "aimed at reducing tail latency tail latency is the thing that blows up distributed systems right it's it's um",
    "start": "1546760",
    "end": "1554640"
  },
  {
    "text": "it's not running out of CPU that's not the thing that blows it up its tail latency because the Machine being slow",
    "start": "1554640",
    "end": "1560710"
  },
  {
    "text": "to respond to a request so triggering a retry storm due to garbage collection it's no different than slow to respond",
    "start": "1560710",
    "end": "1567250"
  },
  {
    "text": "because it's overloaded however monitoring and and understanding",
    "start": "1567250",
    "end": "1574540"
  },
  {
    "text": "the the ladder overload CPU overload is almost second nature to every programmer so it's these 99% I leave agencies that",
    "start": "1574540",
    "end": "1582850"
  },
  {
    "text": "just come and blow up your application and Leave No Trace that they're there and I'm pretty sure that this is what all the s are used inside Google have",
    "start": "1582850",
    "end": "1589750"
  },
  {
    "text": "been focused on for a decade because unpredictable tail latency directly translates translates to under",
    "start": "1589750",
    "end": "1595150"
  },
  {
    "text": "utilization and wasted resources so we look at the work that the primary engineers working on the GC who their",
    "start": "1595150",
    "end": "1601929"
  },
  {
    "text": "names are Ric Hudson and Austin Clements what they're doing side of the Google sphere of their experience from their decades running",
    "start": "1601929",
    "end": "1608770"
  },
  {
    "text": "huge 10 to the 7 machine workloads so let's talk about the next one we talked",
    "start": "1608770",
    "end": "1616120"
  },
  {
    "text": "about threads and events go routines we talked about distributed systems we talked about garbage collection we'll",
    "start": "1616120",
    "end": "1622600"
  },
  {
    "text": "talk about the next one which is still a little bit about garbage collection but is more specific to memory locality",
    "start": "1622600",
    "end": "1628380"
  },
  {
    "text": "memory locality in my opinion is way more important than it was when Java",
    "start": "1628380",
    "end": "1633670"
  },
  {
    "text": "invented it over or over 20 years ago because when Java was an interpreted language the cost of an object reference",
    "start": "1633670",
    "end": "1640750"
  },
  {
    "text": "was immaterial right so I look at two of these things how do the JC performance",
    "start": "1640750",
    "end": "1648070"
  },
  {
    "text": "of go compared to something like Java or the hotspot JVM and these approaches are",
    "start": "1648070",
    "end": "1653500"
  },
  {
    "text": "difficult to compare and garbage collectors because Java offers a selection of Kjar of garbage collectors",
    "start": "1653500",
    "end": "1659020"
  },
  {
    "text": "and overall the Java collection and the Java collectors they're very over the mature and they're sophisticated and",
    "start": "1659020",
    "end": "1665500"
  },
  {
    "text": "they've been tuned over the years so in principle they're excellent I'm not going to argue that but the downside",
    "start": "1665500",
    "end": "1670510"
  },
  {
    "text": "is is that the Java language itself puts a lot of stress on the GC the biggest problem is is that Java offers no value",
    "start": "1670510",
    "end": "1678130"
  },
  {
    "text": "pointers or value sorry value types beyond the built-in int and double so",
    "start": "1678130",
    "end": "1684610"
  },
  {
    "text": "everything else has to be atom allocated as a separate object and then pointed to buyer references and then the GC has to",
    "start": "1684610",
    "end": "1692020"
  },
  {
    "text": "trace all these references which takes time and while the collection of the youngest generation in Java is extremely",
    "start": "1692020",
    "end": "1697990"
  },
  {
    "text": "fast a global garbage collection can take quite some time so you have these specialized jve engineers that make",
    "start": "1697990",
    "end": "1704770"
  },
  {
    "text": "their living on this very niche area to tune things to make up for memory locality go on the other side has",
    "start": "1704770",
    "end": "1713020"
  },
  {
    "text": "strokes which are inseparable from their types as values so true value types and",
    "start": "1713020",
    "end": "1718840"
  },
  {
    "text": "they do and the and the memory layout is much easier for the GC so go always performs goes-- performs full GCS but",
    "start": "1718840",
    "end": "1728770"
  },
  {
    "text": "mostly running in parallel with the application up until Oh up until last year I think the GC cycle only required",
    "start": "1728770",
    "end": "1735430"
  },
  {
    "text": "a stop the world phase they got rid of that they've got and right yeah so it's been removed in",
    "start": "1735430",
    "end": "1742419"
  },
  {
    "text": "versions but go 1/8 and beyond so all of these numbers and things that I talked",
    "start": "1742419",
    "end": "1748179"
  },
  {
    "text": "about it does yes depend a lot on what your application is doing but overall go seems to be doing very well with its",
    "start": "1748179",
    "end": "1754059"
  },
  {
    "text": "newest iteration of the GC so another problem of Java and memory locality is",
    "start": "1754059",
    "end": "1760599"
  },
  {
    "text": "the inability to return multiple values so for that one it often creates a",
    "start": "1760599",
    "end": "1765669"
  },
  {
    "text": "wrapper object to hold the results and the JVM can recognize this pattern and stack allocate the wrapper objects but",
    "start": "1765669",
    "end": "1772479"
  },
  {
    "text": "it doesn't happen without a lot always putting increasing GC GC pressure and JVM so the lack of the custom value",
    "start": "1772479",
    "end": "1779919"
  },
  {
    "text": "types has ramifications not only for the garbage collection but also for cache behavior because that's why there's",
    "start": "1779919",
    "end": "1786279"
  },
  {
    "text": "serious work on custom value types for Java for anybody that follows that and that's going to be the major feature",
    "start": "1786279",
    "end": "1791710"
  },
  {
    "text": "that's going to be planned for Java 10 I specifically meant mention the hotspot",
    "start": "1791710",
    "end": "1798009"
  },
  {
    "text": "JVM because Robert Griesemer one of gos creators helped to build the Java",
    "start": "1798009",
    "end": "1803049"
  },
  {
    "text": "hotspot virtual machine which was built on technologies from implementations of the programming language small talk",
    "start": "1803049",
    "end": "1808960"
  },
  {
    "text": "names strong talk and he was working on at the time so again we have this individual who was one of the architects",
    "start": "1808960",
    "end": "1816190"
  },
  {
    "text": "of who now maybe has a hindsight like 20/20 of the things that he wishes he could do differently or that old dodge",
    "start": "1816190",
    "end": "1823179"
  },
  {
    "text": "if you only knew now what you knew that or if you only knew then what you knew now right so this comes to another",
    "start": "1823179",
    "end": "1830169"
  },
  {
    "text": "famous quote about the making of go and I just wanted to Segway briefly into this before I finish memory locality and",
    "start": "1830169",
    "end": "1836409"
  },
  {
    "text": "what would in terms of what could would get added to the language and what would not and this is from Ken Thompson when",
    "start": "1836409",
    "end": "1842950"
  },
  {
    "text": "the three of us which is Ken and Rob and Robert got started it was just pure research and this we all got together",
    "start": "1842950",
    "end": "1849669"
  },
  {
    "text": "and we decided that we hated C++ and returning to go we started off with the",
    "start": "1849669",
    "end": "1855039"
  },
  {
    "text": "idea that all three of us had to be talked into every feature of the language so there was no extraneous",
    "start": "1855039",
    "end": "1860409"
  },
  {
    "text": "garbage put into the language for any reason so it's not because they didn't do it because they couldn't it's because",
    "start": "1860409",
    "end": "1866679"
  },
  {
    "text": "they made a conscious choice not to and I just wanted to take that let's go back",
    "start": "1866679",
    "end": "1871719"
  },
  {
    "text": "to memory look let's look at compact object layout for",
    "start": "1871719",
    "end": "1879110"
  },
  {
    "text": "go so there's little control of how Java allocates its objects in memory and and",
    "start": "1879110",
    "end": "1884510"
  },
  {
    "text": "with C++ you can but then there are drawbacks like requiring lots of value copying but the other thing about goes",
    "start": "1884510",
    "end": "1891110"
  },
  {
    "text": "that there's no object headers and and that's important again for memory locality and for performance struct",
    "start": "1891110",
    "end": "1898580"
  },
  {
    "text": "fields are not indirect um in Java if object a has an instance of object B",
    "start": "1898580",
    "end": "1904460"
  },
  {
    "text": "then that's two memory allocations and then worst locality and so there's finer",
    "start": "1904460",
    "end": "1909860"
  },
  {
    "text": "control over memory location allocation and go and this is a small but I think",
    "start": "1909860",
    "end": "1915080"
  },
  {
    "text": "an important thing go uses utf-8 because the creators of utf-8 also are the creators of code but",
    "start": "1915080",
    "end": "1921410"
  },
  {
    "text": "I should mention that utf-16 uses twice the space at least on Linux and it requires transcoding when reading and",
    "start": "1921410",
    "end": "1927560"
  },
  {
    "text": "writing and I think that's a definitely a good case to demonstrate the sanity of utf-8 is a string encoding it makes",
    "start": "1927560",
    "end": "1934340"
  },
  {
    "text": "sense to at least point to when GoPro GoPro more programmers never have to ask what encoding is this in and if you've",
    "start": "1934340",
    "end": "1942260"
  },
  {
    "text": "programmed in at least C++ or other languages you've had to at least ask that question once so what else",
    "start": "1942260",
    "end": "1950290"
  },
  {
    "text": "lazy initialization of collections so the zero value of a map or slice and go",
    "start": "1950290",
    "end": "1955820"
  },
  {
    "text": "is an empty collection it's not a nil pointer exception waiting to happen so",
    "start": "1955820",
    "end": "1961190"
  },
  {
    "text": "by contrast Java positively encourages you to allocate empty collections that you're never going to use",
    "start": "1961190",
    "end": "1967820"
  },
  {
    "text": "Kliff click has a good talk he's a hardware researcher and he has a good",
    "start": "1967820",
    "end": "1973610"
  },
  {
    "text": "talk about how modern CPUs are basically memory bound and like how all the cool things like speculative execution and",
    "start": "1973610",
    "end": "1980270"
  },
  {
    "text": "branch prediction are all aimed at queuing up the next cache miss sooner and so the processor and memory gap and",
    "start": "1980270",
    "end": "1986330"
  },
  {
    "text": "cache size is limited by the speed of light so expecting memory to get faster",
    "start": "1986330",
    "end": "1991640"
  },
  {
    "text": "or cache size to be a function of dollar spent in fiction so to map up memory",
    "start": "1991640",
    "end": "1999500"
  },
  {
    "text": "locality I hope that this gives you some technical points about how go gives programmers the tools to talk about",
    "start": "1999500",
    "end": "2005440"
  },
  {
    "text": "memory efficiently if they need but only if they need because it's also flexible",
    "start": "2005440",
    "end": "2011890"
  },
  {
    "text": "because when that level of control is not required it's not an all-or-nothing thing like in C++ or in rust so the last",
    "start": "2011890",
    "end": "2022250"
  },
  {
    "text": "thing I want to talk about for feature it goes a language for the 21st century is this emphasis on readability large",
    "start": "2022250",
    "end": "2031090"
  },
  {
    "text": "organizations have to hire inexperienced people and I love this Brian Kernighan",
    "start": "2031090",
    "end": "2038270"
  },
  {
    "text": "quote debugging is twice as hard writing the code as writing the code in the",
    "start": "2038270",
    "end": "2044390"
  },
  {
    "text": "first place therefore if you write the code as cleverly as possible you are by definition not smart enough to debug it",
    "start": "2044390",
    "end": "2051440"
  },
  {
    "text": "and that's a pretty smart guy saying that right the other thing about readability is that code is read way",
    "start": "2051440",
    "end": "2058070"
  },
  {
    "text": "more way more than it's written hundreds of times more than it's ever going to be written it's written once and then it's",
    "start": "2058070",
    "end": "2064340"
  },
  {
    "text": "spread over and over and over again so go simple syntax it brings out a lot of",
    "start": "2064340",
    "end": "2069560"
  },
  {
    "text": "opinions but let's again look at what's happening at Google around 20 2007 okay",
    "start": "2069560",
    "end": "2076780"
  },
  {
    "text": "Google as a company was started in 1999 by 2007 at the time when go was released",
    "start": "2076780",
    "end": "2085250"
  },
  {
    "text": "it had almost 17,000 employees 88% of those were engineers and that was only",
    "start": "2085250",
    "end": "2093139"
  },
  {
    "text": "the beginning here's where the numbers would be by 2010 24,000 and here's where the numbers",
    "start": "2093140",
    "end": "2102050"
  },
  {
    "text": "are today sorry it says 2010 I it's a typo 2017 but today Google has by the",
    "start": "2102050",
    "end": "2109640"
  },
  {
    "text": "end of 2017 it has almost 76,000 engineers and the majority of these people sorry",
    "start": "2109640",
    "end": "2116270"
  },
  {
    "text": "employees but the majority of these employees is now hovering between 80 and 85 percent there are software engineers",
    "start": "2116270",
    "end": "2123010"
  },
  {
    "text": "so if you write code with polymorphism and metaclasses imagine needing to debug",
    "start": "2123010",
    "end": "2128660"
  },
  {
    "text": "that code maintain that code having to ramp up to growing that code base which is growing by millions of lines every",
    "start": "2128660",
    "end": "2135770"
  },
  {
    "text": "few months there are several points that I want to make about this text with readability and the first is",
    "start": "2135770",
    "end": "2142130"
  },
  {
    "text": "about simplicity simplicity is a topic that can be very context sensitive I've",
    "start": "2142130",
    "end": "2149990"
  },
  {
    "text": "seen simple is better be taken very positively I think everyone in the screen would agree but I've also seen",
    "start": "2149990",
    "end": "2156050"
  },
  {
    "text": "that people's retort when it's talking about go is that it's an insult to",
    "start": "2156050",
    "end": "2161390"
  },
  {
    "text": "intelligent programmers or you're trying to commodify programming and create a",
    "start": "2161390",
    "end": "2166790"
  },
  {
    "text": "situation where our bosses can replace us at will and there's probably a whole lot going on with these statements",
    "start": "2166790",
    "end": "2174110"
  },
  {
    "text": "it could be culturally specific or inner portion issues but it's not an uncommon retort when you are in the NGO community",
    "start": "2174110",
    "end": "2181670"
  },
  {
    "text": "so there's the set of programmers who feel intellectually offended that learning go does not simultaneously mark",
    "start": "2181670",
    "end": "2187730"
  },
  {
    "text": "them as the apex program or the way that C++ does I think the best way I've seen it is like undignified simplicity so in",
    "start": "2187730",
    "end": "2197090"
  },
  {
    "text": "talking with Dave Cheney my fellow time traveler out in in preparation for this",
    "start": "2197090",
    "end": "2203300"
  },
  {
    "text": "talk I was like Dave I've got some thoughts and want to see my thoughts and Dave was like I've got thoughts on your",
    "start": "2203300",
    "end": "2208670"
  },
  {
    "text": "thoughts so I was like I'm gonna use those thoughts so this is Dave talking from here you'll ear Dave talk this",
    "start": "2208670",
    "end": "2213740"
  },
  {
    "text": "afternoon but when I talk with Dave about readability he gave me the following thoughts you're not paid to",
    "start": "2213740",
    "end": "2220190"
  },
  {
    "text": "program you're not even paid to maintain somebody else's program really essentially you're paid to deliver",
    "start": "2220190",
    "end": "2226370"
  },
  {
    "text": "solutions for the business that you work for right and I think that this argument is very successful with people who agree",
    "start": "2226370",
    "end": "2232910"
  },
  {
    "text": "that there that their careers are benefited by delivering solutions not by the lines of code that they write and",
    "start": "2232910",
    "end": "2241100"
  },
  {
    "text": "there are two more points about this Dave's argument about like solutions not code and I think this is brilliant and",
    "start": "2241100",
    "end": "2248570"
  },
  {
    "text": "I'm not it's not I can't even take credit it's all Dave so the first point is that programs which can't be",
    "start": "2248570",
    "end": "2254270"
  },
  {
    "text": "maintained are gonna be rewritten right but that's mainly an argument for the proko advocacy crowd because if you want",
    "start": "2254270",
    "end": "2260690"
  },
  {
    "text": "to have a career and go write programs that can be maintained the second point is about mobility right most of the",
    "start": "2260690",
    "end": "2269030"
  },
  {
    "text": "people here will be looking at a programming as a career or have been programming and in your career and a very shrewd quote",
    "start": "2269030",
    "end": "2276350"
  },
  {
    "text": "about promotion and mobility if you can't be replaced you cannot be promoted",
    "start": "2276350",
    "end": "2281450"
  },
  {
    "text": "if you're so if you're clever code is so integral to the company that you can",
    "start": "2281450",
    "end": "2286460"
  },
  {
    "text": "never risk taking off get being taken off of that project then sure maybe you're never going to get fired but",
    "start": "2286460",
    "end": "2292040"
  },
  {
    "text": "you're also never going to be considered for a different project or be considered for promotion and so if one day you do",
    "start": "2292040",
    "end": "2297770"
  },
  {
    "text": "want to move sideways or up or whatever within your company without having to leave you need to make sure that",
    "start": "2297770",
    "end": "2303050"
  },
  {
    "text": "somebody else can do your job and being able to maintain a piece of software starts with being able to read it",
    "start": "2303050",
    "end": "2310450"
  },
  {
    "text": "so turnover and company switching for engineers averages in 2017 and over the",
    "start": "2310450",
    "end": "2316430"
  },
  {
    "text": "last decade 18 to 24 months so the only guarantee in your company including you",
    "start": "2316430",
    "end": "2324140"
  },
  {
    "text": "is that you're gonna leave and this is the reality of working in software",
    "start": "2324140",
    "end": "2329600"
  },
  {
    "text": "engineering in the 21st century so in the last 10 years if you've been in this business for ten years at the",
    "start": "2329600",
    "end": "2335510"
  },
  {
    "text": "average number of jobs and companies that we've been at maybe is gonna be about five for some it's even ten and",
    "start": "2335510",
    "end": "2342880"
  },
  {
    "text": "and Dave further talked about his experience about having worked and go",
    "start": "2342880",
    "end": "2348350"
  },
  {
    "text": "across four organizations during our talk and about maintaining other people's code and also knowing I'm going",
    "start": "2348350",
    "end": "2355850"
  },
  {
    "text": "to write code that I know is going to be maintained that I have to leave and others are gonna have to maintain so",
    "start": "2355850",
    "end": "2361040"
  },
  {
    "text": "this turnover and companies switching for engineers and it's it's the reality of working in software engineering in",
    "start": "2361040",
    "end": "2367730"
  },
  {
    "text": "the 21st century and this is the context that matters beyond the programming language itself okay so we've talked",
    "start": "2367730",
    "end": "2375590"
  },
  {
    "text": "about context and people and some technical limitations that were",
    "start": "2375590",
    "end": "2380690"
  },
  {
    "text": "happening in software and hardware around the time that go was invented but",
    "start": "2380690",
    "end": "2386390"
  },
  {
    "text": "I think to drive things home we really need to understand to understand",
    "start": "2386390",
    "end": "2392930"
  },
  {
    "text": "software engineering right and I'd like to finish this talk about that",
    "start": "2392930",
    "end": "2398630"
  },
  {
    "text": "the larger picture at Google and the larger picture of our industry and how",
    "start": "2398630",
    "end": "2403820"
  },
  {
    "text": "this is influencing the design of go by taking this holistic view of things",
    "start": "2403820",
    "end": "2409030"
  },
  {
    "text": "the first is that how we define software engineering itself in 2017 and what is",
    "start": "2409030",
    "end": "2415970"
  },
  {
    "text": "the difference if I were to put it to you to define for me what is the difference between software engineering",
    "start": "2415970",
    "end": "2422569"
  },
  {
    "text": "and programming it's a good question right and why do we have two words for these concepts aren't they one of the",
    "start": "2422569",
    "end": "2428119"
  },
  {
    "text": "same but the best definition that I have found is tightest winners who maintains",
    "start": "2428119",
    "end": "2435290"
  },
  {
    "text": "the C++ library is at Google had standardized all the C++ dialects at",
    "start": "2435290",
    "end": "2441950"
  },
  {
    "text": "Google so I think he has something quite interesting to say about it and his thing was software engineering is",
    "start": "2441950",
    "end": "2448150"
  },
  {
    "text": "different from programming because it's programming integrated over time so it's",
    "start": "2448150",
    "end": "2456319"
  },
  {
    "text": "a programming task is like hey I got my thing to work right and that's hard but",
    "start": "2456319",
    "end": "2463430"
  },
  {
    "text": "sometimes the right answer to a problem is I'm gonna write a program to solve this and just be done with it",
    "start": "2463430",
    "end": "2468560"
  },
  {
    "text": "but that's programming engineering is what happens when the--it things need to",
    "start": "2468560",
    "end": "2473690"
  },
  {
    "text": "live longer and the influence of time starts creeping in right and and if",
    "start": "2473690",
    "end": "2479240"
  },
  {
    "text": "you've worked in this industry for a long time you understand that right library versions get updated the",
    "start": "2479240",
    "end": "2484280"
  },
  {
    "text": "operating system gets deprecated the language gets resides the book",
    "start": "2484280",
    "end": "2489970"
  },
  {
    "text": "requirements have changed you have to ship new features now other developers are working on the code base",
    "start": "2489970",
    "end": "2496119"
  },
  {
    "text": "changing services to have different options after a couple years rollouts",
    "start": "2496119",
    "end": "2502930"
  },
  {
    "text": "updating new servers updating front ends complex networks of servers they're now",
    "start": "2502930",
    "end": "2508760"
  },
  {
    "text": "in the millions not just to Google but it other tech behemoths right what else I just listed",
    "start": "2508760",
    "end": "2515420"
  },
  {
    "text": "a bunch here because I started getting excited about the idea of engineering over time but moving to a new team we",
    "start": "2515420",
    "end": "2521030"
  },
  {
    "text": "already talked about moving to a new company moving to a new computer your hard drive dies I mean this happens time",
    "start": "2521030",
    "end": "2527540"
  },
  {
    "text": "happens things change and so how you handle that and how you keep your program working as engineering that is",
    "start": "2527540",
    "end": "2534530"
  },
  {
    "text": "what it is and and it may bleed into the programming itself I think that was the thing that Titus said",
    "start": "2534530",
    "end": "2540450"
  },
  {
    "text": "but it could also be layered on top and all this complexity is fundamentally a",
    "start": "2540450",
    "end": "2546630"
  },
  {
    "text": "different flavor than programming and it's different than I got it working and",
    "start": "2546630",
    "end": "2553829"
  },
  {
    "text": "sometimes it's not needed but we don't when especially when we don't need to plan for the future but when you aren't",
    "start": "2553829",
    "end": "2560910"
  },
  {
    "text": "certain and about time when you have to be prepared this is software engineering",
    "start": "2560910",
    "end": "2567359"
  },
  {
    "text": "and designing a language for software engineering the impact of time on a system so the point is something that",
    "start": "2567359",
    "end": "2575790"
  },
  {
    "text": "makes sense on the face of it in our everyday programming turns out to be a",
    "start": "2575790",
    "end": "2581430"
  },
  {
    "text": "horrible idea when you start to think about change over time and there are many things that do make a perfect sense",
    "start": "2581430",
    "end": "2586800"
  },
  {
    "text": "in this limited domain and sometimes we do work in a limited domain but it like in our programming domain but they don't",
    "start": "2586800",
    "end": "2593760"
  },
  {
    "text": "make sense when we're thinking about it as engineering and thinking about change over time and I'm gonna I'll share the",
    "start": "2593760",
    "end": "2601470"
  },
  {
    "text": "links and I want you to go look at this this this talk because I think it blew me away at the core everything that we",
    "start": "2601470",
    "end": "2607800"
  },
  {
    "text": "think about in software engineering is it's kind of time time-based",
    "start": "2607800",
    "end": "2614250"
  },
  {
    "text": "right so think about this version control you go back in time to coordinate with your colleagues over",
    "start": "2614250",
    "end": "2620220"
  },
  {
    "text": "time continuous integration making sure recent changes haven't broken the system",
    "start": "2620220",
    "end": "2626550"
  },
  {
    "text": "unit tests making sure your your feature that you wrote won't be broken in the",
    "start": "2626550",
    "end": "2631650"
  },
  {
    "text": "future refactoring update something from the previous time to the present time",
    "start": "2631650",
    "end": "2637609"
  },
  {
    "text": "design patterns ability to plan for future changes without knowing what",
    "start": "2637609",
    "end": "2642930"
  },
  {
    "text": "these changes are going to be and then of course dependency management so packages which is the go parlance of",
    "start": "2642930",
    "end": "2649079"
  },
  {
    "text": "libraries and those that we depend upon are gonna change so goes holistic",
    "start": "2649079",
    "end": "2654690"
  },
  {
    "text": "approach oh absolutely understand this about software engineering and probably it",
    "start": "2654690",
    "end": "2660540"
  },
  {
    "text": "reflects the zeitgeist that inform the original design of go specifically the focus on sustaining engineering through",
    "start": "2660540",
    "end": "2667470"
  },
  {
    "text": "readability so the continuance of many different engineers over a long period of time these very clear module",
    "start": "2667470",
    "end": "2674789"
  },
  {
    "text": "aimed at keeping import dependencies between packages linear thus keeping compiles times down is everything that I",
    "start": "2674789",
    "end": "2683759"
  },
  {
    "text": "think was on the minds of the three creators of go so I'd like to close with",
    "start": "2683759",
    "end": "2691199"
  },
  {
    "text": "talking about one less thing which I call simplicity and the greater good",
    "start": "2691199",
    "end": "2698809"
  },
  {
    "text": "simplicity again as I said before it's often seen negatively but in the context",
    "start": "2699619",
    "end": "2704999"
  },
  {
    "text": "of order sustainability group cohesion it's a benefit and it's imperative that",
    "start": "2704999",
    "end": "2712799"
  },
  {
    "text": "in some aspects of the organization and simplicity needs to be enforced oops an example is road signs and Road",
    "start": "2712799",
    "end": "2720989"
  },
  {
    "text": "rules the number of vehicular deaths when cars were first mass-produced after Ford introduced dangers through line",
    "start": "2720989",
    "end": "2727380"
  },
  {
    "text": "relative to the population was extremely high and authorities and government",
    "start": "2727380",
    "end": "2732660"
  },
  {
    "text": "officials had to figure out how to fix these fatalities because cars we weren't gonna take put people back inward in",
    "start": "2732660",
    "end": "2739640"
  },
  {
    "text": "horses and buggies so they started to put come up with these rules they started to impose limits rules that",
    "start": "2739640",
    "end": "2746969"
  },
  {
    "text": "everyone had to follow right so in the u.s. you have to drive on the right side of the road you have to stop at the red",
    "start": "2746969",
    "end": "2753959"
  },
  {
    "text": "light you have to go at green you have to follow the speed limit you have to yield and imagine if someone in the name",
    "start": "2753959",
    "end": "2760739"
  },
  {
    "text": "of imposition of freedom or creativity or my rights decided that they just wanted to drive on the left side of the",
    "start": "2760739",
    "end": "2766979"
  },
  {
    "text": "road like they do in the UK they they would probably cause damage and maybe",
    "start": "2766979",
    "end": "2772380"
  },
  {
    "text": "even loot kill people lives have to get lost so there are systems sometimes when",
    "start": "2772380",
    "end": "2777989"
  },
  {
    "text": "imposing limits can afford us all the ability to use it efficiently and also safely and imposing limits like this",
    "start": "2777989",
    "end": "2785249"
  },
  {
    "text": "makes things possible and it's exactly what voted right and it's evolved and it",
    "start": "2785249",
    "end": "2790589"
  },
  {
    "text": "lets you evolve to the place to the point where anything that needs to be changed can be changed this is",
    "start": "2790589",
    "end": "2797130"
  },
  {
    "text": "sustainability and if you feel like this is very top-down you're right because",
    "start": "2797130",
    "end": "2802619"
  },
  {
    "text": "NGO is first and foremost a language meant for this context Rob Pike says NGO",
    "start": "2802619",
    "end": "2807839"
  },
  {
    "text": "is not an academic language it's meant to be used in the big crowded place with 76,000 engineers in 2017 where digital",
    "start": "2807839",
    "end": "2816000"
  },
  {
    "text": "traffic laws and street signs are needed so I give you this quote which um gosh",
    "start": "2816000",
    "end": "2824700"
  },
  {
    "text": "am I like a real program right now I'm using Dijkstra um simplicity is a great I think everyone",
    "start": "2824700",
    "end": "2830430"
  },
  {
    "text": "has probably heard this and I I think I you could you know say it every morning to yourself as your mantra simplicity is",
    "start": "2830430",
    "end": "2836820"
  },
  {
    "text": "a great virtue but it requires hard work to achieve an education to appreciate",
    "start": "2836820",
    "end": "2842640"
  },
  {
    "text": "and to make matters worse complexity sells better so go doesn't have a lot of",
    "start": "2842640",
    "end": "2851790"
  },
  {
    "text": "things in the language as you saw before but simplicity is ultimately reductive you can't add more things to make things",
    "start": "2851790",
    "end": "2859500"
  },
  {
    "text": "more simple right you can't add rappers and super rappers and libraries it's got you just there's got to be a point where",
    "start": "2859500",
    "end": "2865530"
  },
  {
    "text": "you do a redo and you purposely decide to make it small so if someone had come",
    "start": "2865530",
    "end": "2870690"
  },
  {
    "text": "up with go 20 years ago it wouldn't have survived nor would have been adopted",
    "start": "2870690",
    "end": "2876450"
  },
  {
    "text": "there is no pretense that go is going to be the end-all be-all but for a pretty",
    "start": "2876450",
    "end": "2882300"
  },
  {
    "text": "big set of the problems that we needed to solve today it does a good job and these are the problems that weren't",
    "start": "2882300",
    "end": "2889350"
  },
  {
    "text": "there 20 years ago nor are they going to be there in 20 years from now and this",
    "start": "2889350",
    "end": "2894990"
  },
  {
    "text": "is the reason why NGO is popular today these are the conditions that make go",
    "start": "2894990",
    "end": "2901260"
  },
  {
    "text": "useful so given what I've told you my",
    "start": "2901260",
    "end": "2906320"
  },
  {
    "text": "challenge to you is to watch these conditions for today and see them change because it will allow you to predict the",
    "start": "2906320",
    "end": "2913860"
  },
  {
    "text": "ascent of the new the next new things and that that may surprise you thank you",
    "start": "2913860",
    "end": "2923220"
  },
  {
    "text": "[Applause]",
    "start": "2923220",
    "end": "2927400"
  }
]