[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "so ello everyone i am daga from tap Add and the vp of engineering there and I'm",
    "start": "19300",
    "end": "24400"
  },
  {
    "text": "about to talk about acha there are a few reasons why I wanted to to have this",
    "start": "24400",
    "end": "30099"
  },
  {
    "text": "talk and first of all I think that Olga is a great framework but I also think",
    "start": "30099",
    "end": "35530"
  },
  {
    "text": "that there is quite a bit of confusion to what is actually is and what it can be applied to so we've seen a lot of",
    "start": "35530",
    "end": "42820"
  },
  {
    "text": "people talk about acha blogging about it all over the web and on different conferences but very few people actually",
    "start": "42820",
    "end": "48550"
  },
  {
    "text": "talk about what you can do with it so I'm going to talk about a little bit",
    "start": "48550",
    "end": "55239"
  },
  {
    "text": "very short about what it is and then I'm going to dive into some real world examples of them how we use acha at tap",
    "start": "55239",
    "end": "62050"
  },
  {
    "text": "at first of all what is acha I'm going to make this very quick but I'm going to",
    "start": "62050",
    "end": "68470"
  },
  {
    "text": "just take the the definition or the description from the aqua blog website and it says that our kai is a toolkit",
    "start": "68470",
    "end": "74410"
  },
  {
    "text": "and runtime for building highly concurrent distributed and fault-tolerant event driven applications on the JVM and that sounds pretty good",
    "start": "74410",
    "end": "83920"
  },
  {
    "text": "is this like no Jas for the JVM a gives",
    "start": "83920",
    "end": "89649"
  },
  {
    "text": "you automatic web scale and it's probably not so but the amount of praise",
    "start": "89649",
    "end": "97239"
  },
  {
    "text": "that you see about acha sometimes might lead you to think so the district",
    "start": "97239",
    "end": "103840"
  },
  {
    "text": "definition from the aqha website is very very general it's a it doesn't really say much so I took a risk and I tried to",
    "start": "103840",
    "end": "111340"
  },
  {
    "text": "make another definition or description of it and I say that Locker is acha is the library and runtime for two",
    "start": "111340",
    "end": "118479"
  },
  {
    "text": "different things so one is parallel ism which is about taking a task that might",
    "start": "118479",
    "end": "123940"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "be hard to compute but is easily split into some multiple pieces and then",
    "start": "123940",
    "end": "129550"
  },
  {
    "text": "execute them on several course at the same time to improve performance of programs and then the other thing is",
    "start": "129550",
    "end": "135790"
  },
  {
    "text": "about concurrency which is about coordinating resources between multiple threads to control sothink mutable state",
    "start": "135790",
    "end": "143230"
  },
  {
    "text": "and this is where actors come into play but what does this mean well in my",
    "start": "143230",
    "end": "149920"
  },
  {
    "text": "opinion means that acha is not a general purpose framework that should be the default go",
    "start": "149920",
    "end": "155380"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "to whenever you're trying to build an application acha has a fairly focused set of features and has an excellent",
    "start": "155380",
    "end": "161710"
  },
  {
    "text": "implementation of those features which makes it surprisingly broad in terms of liq ability but it is not a golden",
    "start": "161710",
    "end": "168700"
  },
  {
    "text": "hammer you should not build all your systems with message passing between actors this does make sense anyway",
    "start": "168700",
    "end": "175420"
  },
  {
    "text": "that's my little rant about what acha is not I'm going to focus on what it actually is and what it can be applied",
    "start": "175420",
    "end": "181600"
  },
  {
    "text": "for so just a disclaimer we are using a pagar for some users cases there of",
    "start": "181600",
    "end": "187660"
  },
  {
    "text": "course a lot of them and I'm only focusing on a few other ways where you see naka let's get started first of all",
    "start": "187660",
    "end": "196120"
  },
  {
    "text": "I have to give you a very quick real time at technology one-on-one because tap at is a company in the ad tech space",
    "start": "196120",
    "end": "201430"
  },
  {
    "text": "and what we're doing is that we're doing what's called real-time audience buying",
    "start": "201430",
    "end": "207540"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "and what does that mean well back in the day 34 years ago when an advertiser went",
    "start": "207540",
    "end": "213520"
  },
  {
    "text": "to an advertising network they might say something like i want to buy ads place my ads on sites about travel and i want",
    "start": "213520",
    "end": "220959"
  },
  {
    "text": "to pay a price of one dollar CPM which means one dollar for a thousand impressions that worked out well however",
    "start": "220959",
    "end": "228010"
  },
  {
    "text": "over the recent few years we move to something called real time buying where we can also apply targeting constraints",
    "start": "228010",
    "end": "234459"
  },
  {
    "text": "which are not only focused around things like the site or the platform that the the ad is being shown on we're actually",
    "start": "234459",
    "end": "241030"
  },
  {
    "text": "looking at individual characteristics of each individual user and we try to do value prediction for the advertisers",
    "start": "241030",
    "end": "247300"
  },
  {
    "text": "based on the features of an individual user so how does that work in a very",
    "start": "247300",
    "end": "254650"
  },
  {
    "text": "very general view your browser on the left side here it connects to a website",
    "start": "254650",
    "end": "260530"
  },
  {
    "text": "that website has some ad units on it and your browser will call out to the ad server through an iframe and hit the ad",
    "start": "260530",
    "end": "268570"
  },
  {
    "text": "exchange the ad exchange will then broadcast information about the request the little ad unit that's available for",
    "start": "268570",
    "end": "275560"
  },
  {
    "text": "sale right now and will broadcast them to several buyers each of these buyers",
    "start": "275560",
    "end": "281410"
  },
  {
    "text": "will review the information to get about this ad impression so it will be the site",
    "start": "281410",
    "end": "286840"
  },
  {
    "text": "will be the user agent of the device and so on and so forth but it will also be a lot of information about the users to",
    "start": "286840",
    "end": "292180"
  },
  {
    "text": "past past history from the user for instance might have seen this user on other travel sites or at your own",
    "start": "292180",
    "end": "299770"
  },
  {
    "text": "website that maybe they have hit the sign up link on your page but didn't actually sign up then you want to show",
    "start": "299770",
    "end": "305830"
  },
  {
    "text": "ads to that user afterwards I'm not going to focus on an actual decisions going on in here but it's what's",
    "start": "305830",
    "end": "311860"
  },
  {
    "text": "important and it recognized is that there is a lot of traffic and there is a lot of decisions being made so in our",
    "start": "311860",
    "end": "317650"
  },
  {
    "text": "system all of the buying decisions are piped through an a-cup actor pipeline and they are processing about 50,000",
    "start": "317650",
    "end": "324820"
  },
  {
    "text": "requests per second okay so what are our",
    "start": "324820",
    "end": "331090"
  },
  {
    "text": "actual use cases for for acha we have a lot of them it's kind of it's a",
    "start": "331090",
    "end": "337150"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "framework that I says that it has a surprisingly broadside of applicability because it's very simple to use but the",
    "start": "337150",
    "end": "344889"
  },
  {
    "text": "number one use case is probably for concurrent access to mutable state so we",
    "start": "344889",
    "end": "350020"
  },
  {
    "text": "have a lot of states changing internally and then we need to synchronize access to that state I'll talk about that in a",
    "start": "350020",
    "end": "355210"
  },
  {
    "text": "bit we also used it for graceful degradation of our service so we use the",
    "start": "355210",
    "end": "361180"
  },
  {
    "text": "circuit breaker pattern which allows our system to cope with with the load spikes",
    "start": "361180",
    "end": "366849"
  },
  {
    "text": "or system failures in a graceful way we use it for batching and buffering so you",
    "start": "366849",
    "end": "374620"
  },
  {
    "text": "can have actors aggregating a lot of small messages and turning them into something bigger or for a batch right to",
    "start": "374620",
    "end": "380979"
  },
  {
    "text": "some database or something of that we use them for resource balancing and",
    "start": "380979",
    "end": "386200"
  },
  {
    "text": "throttling so we have a key value store which we don't have a connection pool",
    "start": "386200",
    "end": "391810"
  },
  {
    "text": "for just build one with actors of a bunch of workers you can very finely",
    "start": "391810",
    "end": "397000"
  },
  {
    "text": "tuned how those full access to the store we also use it for scheduling a",
    "start": "397000",
    "end": "403000"
  },
  {
    "text": "background task but that's just because we can I'll focus on the three first",
    "start": "403000",
    "end": "409000"
  },
  {
    "text": "ones I might not have time for the left for the third one there so let's just get into it so actors for concurrent",
    "start": "409000",
    "end": "417669"
  },
  {
    "text": "mutable state that is the yes one of the most well-known",
    "start": "417669",
    "end": "423259"
  },
  {
    "text": "things about actress is that only one thread connect X as the state at one time which makes them very efficient for",
    "start": "423259",
    "end": "430279"
  },
  {
    "text": "for accessing state more going to give the several threats so this ad exchange",
    "start": "430279",
    "end": "438439"
  },
  {
    "text": "is about taking an offer for an ad unit that you might buy and then you can",
    "start": "438439",
    "end": "444169"
  },
  {
    "start": "439000",
    "end": "439000"
  },
  {
    "text": "decide if you want to bid or if you want to buy it at all and then you decide how much you actually are willing to pay for",
    "start": "444169",
    "end": "450590"
  },
  {
    "text": "it so the actual interface of a bitter in our system is a simple trait it has",
    "start": "450590",
    "end": "458150"
  },
  {
    "text": "two methods one which says here's a Harrison offer and then the bitter can",
    "start": "458150",
    "end": "463460"
  },
  {
    "text": "respond by saying I don't want to place a bid for this at all where you can respond with a with a bid which has a",
    "start": "463460",
    "end": "469340"
  },
  {
    "text": "dollar price basically in it and the other one is the on wind method which is",
    "start": "469340",
    "end": "475699"
  },
  {
    "text": "called asynchronously after the bid is placed if the bid was a winning bid and as you can see the return type of that",
    "start": "475699",
    "end": "482990"
  },
  {
    "text": "is unit so this definitely has side effects now in our system we have bitter",
    "start": "482990",
    "end": "489830"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "topologies this is a simplified view of that we have several incoming requests",
    "start": "489830",
    "end": "498139"
  },
  {
    "text": "for 44 offers and we have several auction runners running these auctions",
    "start": "498139",
    "end": "504139"
  },
  {
    "text": "internally our system here we have two campaigns and we have to remote buyers",
    "start": "504139",
    "end": "510770"
  },
  {
    "text": "and all of these need to get the offer sent to them they all have to process",
    "start": "510770",
    "end": "516169"
  },
  {
    "text": "the offer in parallel decide how much they're willing to pay for it and then return a response now why does it make",
    "start": "516169",
    "end": "526459"
  },
  {
    "start": "526000",
    "end": "526000"
  },
  {
    "text": "sense to model these bidders as actors well the local actors they have a lot of",
    "start": "526459",
    "end": "533360"
  },
  {
    "text": "state I'll discuss the state and what with what we store there in a few seconds but also these remote actors",
    "start": "533360",
    "end": "540949"
  },
  {
    "text": "they have very unpredictable response times so we have an essay we have to the hair to we have to respond with our bids",
    "start": "540949",
    "end": "548089"
  },
  {
    "text": "to the ad exchange within the time frame of a few milliseconds typically we have",
    "start": "548089",
    "end": "553420"
  },
  {
    "text": "many milliseconds of processing on the server / request and having an",
    "start": "553420",
    "end": "558610"
  },
  {
    "text": "asynchronous model to place all to broadcast all the offers and then get",
    "start": "558610",
    "end": "564760"
  },
  {
    "text": "the responses back makes a lot of sense and I'll show you how that works so if",
    "start": "564760",
    "end": "571840"
  },
  {
    "text": "you look at the local bidders first the first question they will need to be",
    "start": "571840",
    "end": "577090"
  },
  {
    "start": "572000",
    "end": "572000"
  },
  {
    "text": "answer is are we going to bid on this at all and the first part of this is about targeting constraints so a campaign may",
    "start": "577090",
    "end": "584170"
  },
  {
    "text": "have a restriction or constraints saying that I'm only going to run these ads on iPads that are visiting sites about",
    "start": "584170",
    "end": "591370"
  },
  {
    "text": "travel this is of course a decision that you made without be made without any state so no matter how many androids",
    "start": "591370",
    "end": "598890"
  },
  {
    "text": "visiting travels you travel sites you throw at this bitter it will always say no I'm not going to bid but then the",
    "start": "598890",
    "end": "606520"
  },
  {
    "text": "second point is about budgeting constraints so a campaign will have a",
    "start": "606520",
    "end": "611950"
  },
  {
    "text": "budget let's say ten thousand dollars and it's going to be spent evenly over the course of 30 days that means that at",
    "start": "611950",
    "end": "619630"
  },
  {
    "text": "any point in time you have to try to spread spread the money spend out so",
    "start": "619630",
    "end": "625630"
  },
  {
    "text": "when a bitter makes a decision if it's going to pay the place of it on",
    "start": "625630",
    "end": "631720"
  },
  {
    "text": "something it's needs to a take into account all the spend that has been happening so far and run on the campaign",
    "start": "631720",
    "end": "637600"
  },
  {
    "text": "it has to see is it now about time to spend to buy another impression and then if it does it actually has to try to",
    "start": "637600",
    "end": "644020"
  },
  {
    "text": "predict how much it might have spent because there's a disconnect in time between placing a bid and winning so if",
    "start": "644020",
    "end": "651130"
  },
  {
    "text": "you have a bitter and it now has the ability to buy one impression has a very small budget and then it starts bidding",
    "start": "651130",
    "end": "657870"
  },
  {
    "text": "then it sees 50,000 bidder offers in a second and if all those match then you",
    "start": "657870",
    "end": "663460"
  },
  {
    "text": "might have bid 150 thousand impression in one second so the bidder is they",
    "start": "663460",
    "end": "669340"
  },
  {
    "text": "don't have to don't only have to try to pace and keep up with what they're actually winning they also have to try",
    "start": "669340",
    "end": "675520"
  },
  {
    "text": "to predict how much they might have spent in order to not overspend so when",
    "start": "675520",
    "end": "681040"
  },
  {
    "text": "we're actually each bidder sees thirty thousand requests per second simplified",
    "start": "681040",
    "end": "687360"
  },
  {
    "text": "they might actually change the internal State 50,000 times per second as well and this makes a synchronization of",
    "start": "687360",
    "end": "694680"
  },
  {
    "text": "state an interesting problem anyway actors saw that very neatly this is a",
    "start": "694680",
    "end": "702089"
  },
  {
    "start": "699000",
    "end": "699000"
  },
  {
    "text": "somewhat simplified local beating actor this basically just wraps another bidder",
    "start": "702089",
    "end": "709410"
  },
  {
    "text": "and proxies requests to them so we have the the offer being sent then you reply",
    "start": "709410",
    "end": "716250"
  },
  {
    "text": "with with a bid and only when you invoke the win method so the remote bidder is",
    "start": "716250",
    "end": "726300"
  },
  {
    "text": "of course more complicated also has throttling and stuff like that but from",
    "start": "726300",
    "end": "731640"
  },
  {
    "text": "the auction runners perspective so this is the piece of code that actually takes in an offer and broadcast it to all of",
    "start": "731640",
    "end": "738690"
  },
  {
    "start": "733000",
    "end": "733000"
  },
  {
    "text": "the potential bidders and as you can see here we take in we have a list of",
    "start": "738690",
    "end": "745230"
  },
  {
    "text": "bitters and then we map this is Scala 1.3 so we have still the triple bang",
    "start": "745230",
    "end": "750890"
  },
  {
    "text": "which is a method that sends a message to an actor and returns the future of a",
    "start": "750890",
    "end": "757620"
  },
  {
    "text": "certain type so in this case we are expecting to get futures that are the",
    "start": "757620",
    "end": "763050"
  },
  {
    "text": "type option bid we also give these options the max response time so that",
    "start": "763050",
    "end": "769760"
  },
  {
    "text": "when we wait for them underneath their future so with all we block victories",
    "start": "769760",
    "end": "775949"
  },
  {
    "text": "here you probably cringe because he hates blocking but we have a book we're using stirlitz we have to block at some",
    "start": "775949",
    "end": "781649"
  },
  {
    "text": "point and then we can just flat map over those options and return all the results",
    "start": "781649",
    "end": "788490"
  },
  {
    "text": "that were actually returned in a timely fashion so if there are any of these actors that are having some sort of",
    "start": "788490",
    "end": "794070"
  },
  {
    "text": "issues network latency or partner is slow as something like that they will",
    "start": "794070",
    "end": "799199"
  },
  {
    "text": "just timeout and we will ignore their answers and that's pretty much it and",
    "start": "799199",
    "end": "805980"
  },
  {
    "text": "that's actually also what makes this this model better than just doing",
    "start": "805980",
    "end": "811610"
  },
  {
    "start": "806000",
    "end": "806000"
  },
  {
    "text": "straight method in vacations in this case is that we can use the same access",
    "start": "811610",
    "end": "817020"
  },
  {
    "text": "model for both local and remote bidders and we can also if we need too if we had too many campaigns running",
    "start": "817020",
    "end": "823290"
  },
  {
    "text": "so we can run them in one vm then we can scale that out and run some of them on other VMS the second interesting way",
    "start": "823290",
    "end": "832860"
  },
  {
    "text": "that we are applying actors and dispatchers is for graceful degradation",
    "start": "832860",
    "end": "837890"
  },
  {
    "text": "and I do that through circuit breaking so we're dealing with fairly relentless",
    "start": "837890",
    "end": "845490"
  },
  {
    "text": "volume of traffic and there is no back off we start responding slowly we'll",
    "start": "845490",
    "end": "850560"
  },
  {
    "text": "just have more and more connections coming in we have had several pieces of networking equipment fall over because",
    "start": "850560",
    "end": "857970"
  },
  {
    "text": "we had a hiccup in our system and stuff like routers and firewalls they just can't deal with the traffic so we have a",
    "start": "857970",
    "end": "865620"
  },
  {
    "text": "few standard incidents that can happen so when we restart a vm it will require",
    "start": "865620",
    "end": "871710"
  },
  {
    "text": "some warm-up time and at that point it will usually be a little slower than then it will be later on we do have",
    "start": "871710",
    "end": "878610"
  },
  {
    "text": "occasional key value store hiccups every single bid request V process or operate",
    "start": "878610",
    "end": "883860"
  },
  {
    "text": "process actually needs to do several lookups in our key value stores so if we have a little hiccup there it might",
    "start": "883860",
    "end": "889710"
  },
  {
    "text": "cause response time issues and of course we also do have some occasional traffic spikes if we're on a big we have some",
    "start": "889710",
    "end": "898620"
  },
  {
    "text": "some tags on a big site and they have some campaign running and then all of a sudden we might see an influx of traffic",
    "start": "898620",
    "end": "905040"
  },
  {
    "text": "that we weren't expecting so question is how do you cope with with these kinds of",
    "start": "905040",
    "end": "912960"
  },
  {
    "text": "performance issues and one way to do it is to degrade the service while you're",
    "start": "912960",
    "end": "918030"
  },
  {
    "text": "having issues to try to catch up and then question would be how do you",
    "start": "918030",
    "end": "923550"
  },
  {
    "text": "actually degrade your service of course the default would be you could accept",
    "start": "923550",
    "end": "929220"
  },
  {
    "text": "increased latencies so if you're having something that's facing consumers or users if each page load takes some time",
    "start": "929220",
    "end": "936750"
  },
  {
    "text": "then they will probably do fewer requests so that's one way to do it if it gets too bad then you end up perhaps",
    "start": "936750",
    "end": "943589"
  },
  {
    "text": "refusing connections all together so it's also a way of degrading your service until you actually can catch up",
    "start": "943589",
    "end": "948830"
  },
  {
    "text": "now there is another way of doing that and that is by leveraging",
    "start": "948830",
    "end": "954520"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "main or service specific options so in our case we're trying to do stuff makes",
    "start": "954520",
    "end": "960700"
  },
  {
    "text": "them take some shortcuts so do things in a simple way that we would do if we running at full performance so three",
    "start": "960700",
    "end": "967990"
  },
  {
    "text": "things we can do here for instance we can stop loading use of data so when we get an offer in and we're seeing that",
    "start": "967990",
    "end": "973570"
  },
  {
    "text": "we're having performance issues we can stop loading or query in our key value stores for a little while so we will",
    "start": "973570",
    "end": "980380"
  },
  {
    "text": "still might make bids on these offers but we will might bid with less",
    "start": "980380",
    "end": "985420"
  },
  {
    "text": "information another thing we can do is you can stop running the predictive optimization which will save us some cpu",
    "start": "985420",
    "end": "992140"
  },
  {
    "text": "cycles just place a conservative bid instead of trying to to predict for every single request what the value of",
    "start": "992140",
    "end": "998380"
  },
  {
    "text": "that would be and then the last option is the one we use a lot actually we can",
    "start": "998380",
    "end": "1003810"
  },
  {
    "text": "start passing on the offer all together so for us to tell the ad exchange that",
    "start": "1003810",
    "end": "1008970"
  },
  {
    "text": "we're not going to bid it's a very very inexpensive operation but it's a perfectly viable response to that",
    "start": "1008970",
    "end": "1014250"
  },
  {
    "text": "exchange and the people running that exchange they won't get mad at us for slowing down their system so it's much",
    "start": "1014250",
    "end": "1019260"
  },
  {
    "text": "better for us to respond with no we're not going to buy this instead of having a lot of very late yes we want this",
    "start": "1019260",
    "end": "1026189"
  },
  {
    "text": "because it's too late anyway so next question then would be when can you",
    "start": "1026190",
    "end": "1033180"
  },
  {
    "start": "1031000",
    "end": "1031000"
  },
  {
    "text": "degrade the service and we use two separate ways of doing that one is if we",
    "start": "1033180",
    "end": "1039569"
  },
  {
    "text": "predict that the response time will be above some certain threshold then we",
    "start": "1039570",
    "end": "1045380"
  },
  {
    "text": "degrade our service and that can be implemented by having actors with timestamp units of work i'll show some",
    "start": "1045380",
    "end": "1051510"
  },
  {
    "text": "code and how that works but I means that the actual actor considers the time that the job was submitted and then does some",
    "start": "1051510",
    "end": "1058710"
  },
  {
    "text": "shortcuts if it's if it thinks that it's not going to be finished in time and then the second one is actually by",
    "start": "1058710",
    "end": "1065570"
  },
  {
    "text": "checking the size of the mailbox so if you're if the mailbox is over a certain limit then you will stop or you will pop",
    "start": "1065570",
    "end": "1074100"
  },
  {
    "text": "things off the queue this is a little controversial because it's been a lot of discussion about this well I'll get to",
    "start": "1074100",
    "end": "1080430"
  },
  {
    "text": "that later anyway if we want to look at a circuit breaking actor basically looks",
    "start": "1080430",
    "end": "1088050"
  },
  {
    "start": "1087000",
    "end": "1087000"
  },
  {
    "text": "like you have a you receive method and you have a little case class called work",
    "start": "1088050",
    "end": "1094710"
  },
  {
    "text": "unit that as a time step in it and then the actual value that's going to be evaluated and as you can see we just",
    "start": "1094710",
    "end": "1102690"
  },
  {
    "text": "check if we currently have passed the time where it's likely that or actually",
    "start": "1102690",
    "end": "1110100"
  },
  {
    "text": "if this thing has been on the queue for too long so we think they were not going to be able to respond in time then we",
    "start": "1110100",
    "end": "1115170"
  },
  {
    "text": "just return none of course the nun here could be whatever it could be another",
    "start": "1115170",
    "end": "1121200"
  },
  {
    "text": "method invocation this takes less time than what the default execution flow would be the drawbacks with this",
    "start": "1121200",
    "end": "1131790"
  },
  {
    "start": "1131000",
    "end": "1131000"
  },
  {
    "text": "approach is that if you have long pauses in your pipeline you will have long",
    "start": "1131790",
    "end": "1140210"
  },
  {
    "text": "queues and you might actually end up running out of memory and that sounds like yeah you have to have a lot of",
    "start": "1140210",
    "end": "1145620"
  },
  {
    "text": "messages in queue before that happens but it's actually not that much and we've seen a fair amount of OMS based on",
    "start": "1145620",
    "end": "1151680"
  },
  {
    "text": "on just the hiccups in encode sorry in the processing queue so if we had",
    "start": "1151680",
    "end": "1158100"
  },
  {
    "text": "something blocking in there which we have to do in some case because we have locking io ap is for our key value",
    "start": "1158100",
    "end": "1165360"
  },
  {
    "text": "stores for instance then our cues might come become very long and then at some point garbage collection overhead will",
    "start": "1165360",
    "end": "1170820"
  },
  {
    "text": "just kill the server you might think that just bounding the mailbox might be",
    "start": "1170820",
    "end": "1177360"
  },
  {
    "text": "a way around this saying that if we're going to we're going to say that maximum",
    "start": "1177360",
    "end": "1183600"
  },
  {
    "text": "mailbox size is a thousand elements the problem with that though is that then you start passing on the most recent",
    "start": "1183600",
    "end": "1190740"
  },
  {
    "text": "offers so you can't put things on to the mailbox anymore which means that you're basically discarding the most valuable",
    "start": "1190740",
    "end": "1196490"
  },
  {
    "text": "requests which are the newest ones you want to discard all the old ones that are already expired other thing with",
    "start": "1196490",
    "end": "1204090"
  },
  {
    "text": "actually having a bounded mailboxes so you have a lot of exceptions being thrown and the overhead of instantiating",
    "start": "1204090",
    "end": "1209940"
  },
  {
    "text": "a full exception with the stack trace is actually fairly high so the alternative",
    "start": "1209940",
    "end": "1215370"
  },
  {
    "start": "1214000",
    "end": "1214000"
  },
  {
    "text": "way of doing this is that you can use what we call a circuit breaking dispatcher and I can show all the code",
    "start": "1215370",
    "end": "1222370"
  },
  {
    "text": "but I actually I posted it to the mailing list three weeks ago or so because you tried it might get this to a",
    "start": "1222370",
    "end": "1227440"
  },
  {
    "text": "CO 2 point 0 but it's basically a dispatcher very mixed in this circuit",
    "start": "1227440",
    "end": "1234430"
  },
  {
    "text": "breaking dispatcher semantics which takes a circuit breaker policy which",
    "start": "1234430",
    "end": "1240910"
  },
  {
    "text": "where you determine you specify the maximum amount the max size of the queue here I didn't write these out the name",
    "start": "1240910",
    "end": "1247600"
  },
  {
    "text": "parameters because it's all read a little long in that line but this is says it has the maximum size of two",
    "start": "1247600",
    "end": "1254170"
  },
  {
    "text": "thousand elements in the mailbox and then we have this method you can",
    "start": "1254170",
    "end": "1259270"
  },
  {
    "text": "optionally / I the right which is replied to overflow where you can decide if you want to do some sort of fall back",
    "start": "1259270",
    "end": "1266470"
  },
  {
    "text": "function and respond with that so when the if if the queue is too long you will",
    "start": "1266470",
    "end": "1272590"
  },
  {
    "text": "still get the opportunity to to take a look at whatever is being passed in and",
    "start": "1272590",
    "end": "1279010"
  },
  {
    "text": "you can respond something simple back but the difference here is that this will actually pop things off of the",
    "start": "1279010",
    "end": "1284710"
  },
  {
    "text": "front of the queue and discard that first whereas things coming in from the back will be saved so it's a way of of",
    "start": "1284710",
    "end": "1292260"
  },
  {
    "text": "keeping the most valuable information also this does not have the same",
    "start": "1292260",
    "end": "1298059"
  },
  {
    "text": "problems with q's being long because this happens synchronously so what are",
    "start": "1298059",
    "end": "1305230"
  },
  {
    "start": "1305000",
    "end": "1305000"
  },
  {
    "text": "the issues with circuit breakers in dispatchers there are a few first of all",
    "start": "1305230",
    "end": "1314100"
  },
  {
    "text": "we've actually runs into this you might mask real performance issues so you want",
    "start": "1314100",
    "end": "1319900"
  },
  {
    "text": "this to only happen in exceptional cases when you're having some sort of performance issue or outage but the",
    "start": "1319900",
    "end": "1327400"
  },
  {
    "text": "makes it makes the system so flexible because all the results that are returned when you're actually in a",
    "start": "1327400",
    "end": "1332950"
  },
  {
    "text": "performance issue situation the perfectly valid so none of your partners were level the clients will never notice",
    "start": "1332950",
    "end": "1341130"
  },
  {
    "text": "but you might actually be dropping a lot of data that you shouldn't so it's important to to actually instrument your",
    "start": "1341130",
    "end": "1348250"
  },
  {
    "text": "application as you saw here we have a little metric his stats increased incremented here saying that the auction",
    "start": "1348250",
    "end": "1354640"
  },
  {
    "text": "runner has discarded a bid request all the problem with this",
    "start": "1354640",
    "end": "1361120"
  },
  {
    "text": "is of course that it's hard to tell you have you have you don't have a lot of levers to push it's just a very crude",
    "start": "1361120",
    "end": "1367240"
  },
  {
    "text": "number the size of the message box what would be the right number for that maybe",
    "start": "1367240",
    "end": "1372370"
  },
  {
    "text": "you should have something you can you can't really say anything about trends and through that it's just a hard copy cut off so might be some room for",
    "start": "1372370",
    "end": "1379390"
  },
  {
    "text": "improvement there but most notably also and it's very hard to do in acha tu PO know if you follow the mailing list raka",
    "start": "1379390",
    "end": "1389169"
  },
  {
    "text": "there has been some fair amount of discussion about that a little while back in there was of a couple of blog posts about it so they decided to make",
    "start": "1389169",
    "end": "1396760"
  },
  {
    "text": "the size of the mailbox non visible to the to the clients the reasoning behind",
    "start": "1396760",
    "end": "1402429"
  },
  {
    "text": "that well there are a lot of arguments for which all makes sense I guess but I",
    "start": "1402429",
    "end": "1409750"
  },
  {
    "text": "think that this might be one of the cases where it would be very useful to have the have the size of the mailbox",
    "start": "1409750",
    "end": "1416340"
  },
  {
    "text": "anyway we'll make it work with with with like a 2 point 0 0 so actually I'm going",
    "start": "1416340",
    "end": "1425440"
  },
  {
    "text": "to briefly brush upon one more area that we use acha it's a very very simple use",
    "start": "1425440",
    "end": "1432070"
  },
  {
    "text": "case but it's surprisingly convenient so",
    "start": "1432070",
    "end": "1437590"
  },
  {
    "text": "we use it for batching and buffering so part of our part of our system is",
    "start": "1437590",
    "end": "1444990"
  },
  {
    "text": "receiving a lot of data at a very high rate and then we need to store that",
    "start": "1444990",
    "end": "1450160"
  },
  {
    "text": "somewhere so we have two different types we have all these offers we want to store so we can now use them for for",
    "start": "1450160",
    "end": "1456429"
  },
  {
    "text": "statistics and we also have all our impression and click information coming in and we need to write that somewhere",
    "start": "1456429",
    "end": "1463120"
  },
  {
    "text": "and we are actually streaming our data directly into a columnar data store so",
    "start": "1463120",
    "end": "1469330"
  },
  {
    "text": "not stringing it to disk which means that there is a little bit of overhead when we're riding so we want to batch",
    "start": "1469330",
    "end": "1474340"
  },
  {
    "text": "those those rights so we have a very simple batching storage actor which is",
    "start": "1474340",
    "end": "1485040"
  },
  {
    "start": "1481000",
    "end": "1481000"
  },
  {
    "text": "just an abstract class you define a batch size in",
    "start": "1485040",
    "end": "1490540"
  },
  {
    "text": "year right here is 25,000 elements and a maximum perch involve which in this case",
    "start": "1490540",
    "end": "1496120"
  },
  {
    "text": "is two thousand milliseconds and then this thing will take offers and auction",
    "start": "1496120",
    "end": "1502840"
  },
  {
    "text": "results and it will basically just buffer them up to 25,000 elements or 22",
    "start": "1502840",
    "end": "1509950"
  },
  {
    "text": "million two seconds and then it will invoke the same method which makes it very simple for us to just bulk right",
    "start": "1509950",
    "end": "1516310"
  },
  {
    "text": "stuff and of course this is a very very simple standard queuing mechanism but",
    "start": "1516310",
    "end": "1522100"
  },
  {
    "text": "it's incredibly simple to get it wrong if you're doing it with manual thread synchronization and then it's incredible",
    "start": "1522100",
    "end": "1528760"
  },
  {
    "text": "simple to implement it with actors so I'm not showing the actual implementation has a little bit of",
    "start": "1528760",
    "end": "1535450"
  },
  {
    "text": "logging and stuffs I can rip that out right away but it is very very straightforward and once you start using",
    "start": "1535450",
    "end": "1541450"
  },
  {
    "text": "akka you see a lot of these asynchronous patterns that you could write using the",
    "start": "1541450",
    "end": "1546820"
  },
  {
    "text": "standard concurrent data structures in the in the JDK but there's just so much",
    "start": "1546820",
    "end": "1552550"
  },
  {
    "text": "simpler to do with acha lastly what have",
    "start": "1552550",
    "end": "1560380"
  },
  {
    "text": "been our main pain points with using akka and the number one is well first of",
    "start": "1560380",
    "end": "1568870"
  },
  {
    "text": "all we've been very happy with it it's been working well for us I think we might have over plied in a few cases but I think for the most part has been there",
    "start": "1568870",
    "end": "1576310"
  },
  {
    "text": "has been a good experience but our number one pain point is probably that if you start using untyped actors which",
    "start": "1576310",
    "end": "1584650"
  },
  {
    "start": "1580000",
    "end": "1580000"
  },
  {
    "text": "is the default you're basically removing all of that typesafe goodness that usually have and you're have method",
    "start": "1584650",
    "end": "1591310"
  },
  {
    "text": "signatures you start passing message objects to actor reps you have no idea",
    "start": "1591310",
    "end": "1597850"
  },
  {
    "text": "if they are able to respond to it if they're able to process it it's not a",
    "start": "1597850",
    "end": "1603160"
  },
  {
    "text": "huge deal but if you over applied if you if you were to do all your programming this way there will be a untangle mess",
    "start": "1603160",
    "end": "1610140"
  },
  {
    "text": "so it's more of a configuration problem you might sometimes switch out to actor",
    "start": "1610140",
    "end": "1618730"
  },
  {
    "text": "eps and then you get a lot of match errors basically and those can",
    "start": "1618730",
    "end": "1623890"
  },
  {
    "text": "actually be a little bit difficult to track down some loud sometimes because when you have so the actual sender or",
    "start": "1623890",
    "end": "1631360"
  },
  {
    "text": "message and the actual processing my message will happen two different their threads so if it blows up if you send",
    "start": "1631360",
    "end": "1637240"
  },
  {
    "text": "the wrong message to the wrong actor then you won't be able to figure out where it came from because there's no",
    "start": "1637240",
    "end": "1643240"
  },
  {
    "text": "stack trace tracing that so it's a little but it's not a big deal but it",
    "start": "1643240",
    "end": "1648549"
  },
  {
    "text": "can be a little annoying more importantly as though that testing of asynchronous systems is harder than",
    "start": "1648549",
    "end": "1654940"
  },
  {
    "text": "testing synchronous systems there has been done a lot of work with the Aqua",
    "start": "1654940",
    "end": "1660340"
  },
  {
    "text": "test kit since 1.2 we haven't really we",
    "start": "1660340",
    "end": "1667059"
  },
  {
    "text": "try to implement the test kit for retrofitted into our existing tests when I think they arrived in 1.3 but that",
    "start": "1667059",
    "end": "1674260"
  },
  {
    "text": "wasn't very successful so we still have some tests that that fail intermittently because of the synchronous nature I",
    "start": "1674260",
    "end": "1682360"
  },
  {
    "text": "haven't looked at the the testing mechanic and mechanisms in two point oh but I still think that it's probably",
    "start": "1682360",
    "end": "1689590"
  },
  {
    "text": "harder to test than just a straight method invocation that's all I have for now questions yeah in the back so when",
    "start": "1689590",
    "end": "1697809"
  },
  {
    "text": "you're doing this adaptive so the circuit breaker padding basically if",
    "start": "1697809",
    "end": "1703059"
  },
  {
    "text": "you're if you're in a state of having if you're a canoe continues overloaded",
    "start": "1703059",
    "end": "1708100"
  },
  {
    "text": "state then you might have a system which will switch on so start doing stuff and",
    "start": "1708100",
    "end": "1714100"
  },
  {
    "text": "then it will get overloaded and will snap back into to doing things in a degraded mode again and will start",
    "start": "1714100",
    "end": "1719740"
  },
  {
    "text": "oscillating back and forth and due to the very nature of things when you turn it switch on you will have a massive",
    "start": "1719740",
    "end": "1725020"
  },
  {
    "text": "influx which will cause another performance regression and make the swap back that's your question right it",
    "start": "1725020",
    "end": "1730840"
  },
  {
    "text": "oscillates so I think probably if you if",
    "start": "1730840",
    "end": "1736360"
  },
  {
    "text": "you are running your system evenly on the brink of being overloaded then that",
    "start": "1736360",
    "end": "1742450"
  },
  {
    "text": "might be a problem we try to have a fair amount of spare capacity so it hasn't it",
    "start": "1742450",
    "end": "1751330"
  },
  {
    "text": "hasn't been a problem for us in practice but I can totally psych and see that that might happen yes definitely so the first",
    "start": "1751330",
    "end": "1757299"
  },
  {
    "text": "question is what kind of web framework overusing and we are using straight up servlets and jetty for this these are",
    "start": "1757299",
    "end": "1764380"
  },
  {
    "text": "server to server calls for the most part protocols are everything from well the",
    "start": "1764380",
    "end": "1770950"
  },
  {
    "text": "different ad exchanges have different protocols summer JSON some our protocol buffers some are just URL parameters and",
    "start": "1770950",
    "end": "1778660"
  },
  {
    "text": "so we just use servlets for that and then that's all we don't have a web",
    "start": "1778660",
    "end": "1783850"
  },
  {
    "text": "framework because it's just server to server communication basically the other question was about scala binary",
    "start": "1783850",
    "end": "1789370"
  },
  {
    "text": "compatibility I think right and I don't think that's very much related to all",
    "start": "1789370",
    "end": "1794980"
  },
  {
    "text": "kinds particular but it's a problem for the whole community regardless of the",
    "start": "1794980",
    "end": "1800110"
  },
  {
    "text": "framework whenever there is a new big point release of Scala and you want to",
    "start": "1800110",
    "end": "1806559"
  },
  {
    "text": "start upgrading and then you have to basically wait until every library you have as been cross compiled you can't do",
    "start": "1806559",
    "end": "1811929"
  },
  {
    "text": "it you have to do everything at once which is a problem especially if older versions don't get cross compile back to",
    "start": "1811929",
    "end": "1817240"
  },
  {
    "text": "your versions you actually have to upgrade the library versions as well as the Scala version then starts getting",
    "start": "1817240",
    "end": "1823000"
  },
  {
    "text": "really things starts getting really tricky so question was have used remote actors and answer is no so victor says",
    "start": "1823000",
    "end": "1833679"
  },
  {
    "text": "said now that in two point oh they default everything might be remote and",
    "start": "1833679",
    "end": "1838809"
  },
  {
    "text": "then local is an optimization to us we",
    "start": "1838809",
    "end": "1844059"
  },
  {
    "text": "have I don't know how many actors you might have but we have a few thousand actors running in our system at any",
    "start": "1844059",
    "end": "1849250"
  },
  {
    "text": "point in time and each individual actor in the system has to see every single bid request so on one server there might",
    "start": "1849250",
    "end": "1856179"
  },
  {
    "text": "be five thousand a second and you have a thousand actors so that's five million a second and if you were to have another",
    "start": "1856179",
    "end": "1862870"
  },
  {
    "text": "millisec you know overhead because jumping over the cable we could definitely not doing on that fine grade",
    "start": "1862870",
    "end": "1868630"
  },
  {
    "text": "level we would have to do that two chunks of things so it's actually a way we're thinking of partitioning or",
    "start": "1868630",
    "end": "1874419"
  },
  {
    "text": "scaling out when we have a when our number of campaigns reach a certain critical mass than we can really respond",
    "start": "1874419",
    "end": "1880120"
  },
  {
    "text": "in onenote anymore and then we have to start petitioning which means that we might have to have some sort of oil",
    "start": "1880120",
    "end": "1886450"
  },
  {
    "text": "proxying of actors internal so some might run here and someone run somewhere else the partitioning at that",
    "start": "1886450",
    "end": "1892820"
  },
  {
    "text": "point we might have used remote actors as proxies basically but we don't want",
    "start": "1892820",
    "end": "1899330"
  },
  {
    "text": "to do remoting until we absolutely have to because it's going to incur a lot of performance already yes we're not using",
    "start": "1899330",
    "end": "1905720"
  },
  {
    "text": "remote actors so how many course are we using so we have most of our service are",
    "start": "1905720",
    "end": "1911390"
  },
  {
    "text": "eight course some of the newer ones that archive come in our 12 course but yeah",
    "start": "1911390",
    "end": "1918409"
  },
  {
    "text": "we're using some statistical or more heuristics of our system which because",
    "start": "1918409",
    "end": "1925929"
  },
  {
    "text": "you would think maybe that we have one campaign only exists in one place but we",
    "start": "1925929",
    "end": "1931100"
  },
  {
    "text": "actually have them existing all across the cluster because we have all our volumes are so high we can actually use",
    "start": "1931100",
    "end": "1937419"
  },
  {
    "text": "the fact that that load is randomly distributed across the cluster that they will randomly get the same amount of",
    "start": "1937419",
    "end": "1945110"
  },
  {
    "text": "impressions that will match and and they will randomly also well at least",
    "start": "1945110",
    "end": "1950149"
  },
  {
    "text": "normalized get spend amount of the same amount of money over a given period of time they check in with each other on",
    "start": "1950149",
    "end": "1957260"
  },
  {
    "text": "regular intervals to coordinate for any skew that that might be in there but that's how we how we manage that",
    "start": "1957260",
    "end": "1963320"
  },
  {
    "text": "otherwise we would have if we only if we could have only one instance of each",
    "start": "1963320",
    "end": "1968990"
  },
  {
    "text": "campaign for instance the whole system then we would have had to do something with remote actors but that would have",
    "start": "1968990",
    "end": "1974059"
  },
  {
    "text": "performed terrible compared to the current approach so we started using akka from the very beginning as I was",
    "start": "1974059",
    "end": "1981890"
  },
  {
    "text": "January last year again was we started",
    "start": "1981890",
    "end": "1987380"
  },
  {
    "text": "using it because it was cool and that's kind of one of the things that I wanted to address with his talk I don't know",
    "start": "1987380",
    "end": "1993590"
  },
  {
    "text": "how I forgot it through but I think that it's very easy to over apply these new cool technologies and put them to work",
    "start": "1993590",
    "end": "2000549"
  },
  {
    "text": "everywhere I think we might have done something that in some cases ourselves at least we should perhaps a tried just",
    "start": "2000549",
    "end": "2007659"
  },
  {
    "text": "you manual synchronization first in some case and see how that performed then what worth of this afterwards but yeah",
    "start": "2007659",
    "end": "2014770"
  },
  {
    "text": "we didn't but we've been using it for a while okay you",
    "start": "2014770",
    "end": "2020730"
  }
]