[
  {
    "start": "0",
    "end": "213000"
  },
  {
    "text": "so this is a talk that has a few different titles we've been kicking around for a while",
    "start": "4560",
    "end": "10719"
  },
  {
    "text": "and and you know one way is to look at this look at all the cool features in java another one is from jdk 9 to 13 and",
    "start": "10719",
    "end": "17680"
  },
  {
    "text": "beyond and all this stuff i like to call this java after eight",
    "start": "17680",
    "end": "22960"
  },
  {
    "text": "or to use pictures instead of words java after eight okay",
    "start": "22960",
    "end": "29119"
  },
  {
    "text": "good so that's what this is this is the world after eight so all of you are on eight virtually all",
    "start": "29119",
    "end": "35520"
  },
  {
    "text": "you said you're on eight there are a few that are using pre-eight and",
    "start": "35520",
    "end": "40640"
  },
  {
    "text": "like we said we feel your pain um but this is about what is after java 8 going forward what",
    "start": "40640",
    "end": "47360"
  },
  {
    "text": "you should be looking forward to what you should expect what what's coming and and i'll cover a few different",
    "start": "47360",
    "end": "53120"
  },
  {
    "text": "things there both a bunch of you know just picking a few features here and there to highlight",
    "start": "53120",
    "end": "60559"
  },
  {
    "text": "and and logic of change but also talk about what it actually means to go into",
    "start": "60559",
    "end": "66080"
  },
  {
    "text": "production after eight what people have done what people might be going doing going forward what the actual",
    "start": "66080",
    "end": "71600"
  },
  {
    "text": "considerations might look like because there are all kinds of things with this space change that that matter",
    "start": "71600",
    "end": "76880"
  },
  {
    "text": "um so bear with me as i go through features eventually i'm going to get to some actual",
    "start": "76880",
    "end": "82000"
  },
  {
    "text": "what can you do to take it to production and what we think the right roadmaps look",
    "start": "82000",
    "end": "87280"
  },
  {
    "text": "like um so we've got a bunch of changes that have gone with java we we have java 6",
    "start": "87280",
    "end": "93280"
  },
  {
    "text": "that's now 13 years ago and so people here are using it and java 7 came out a little over eight",
    "start": "93280",
    "end": "99600"
  },
  {
    "text": "years ago so it's it's longer the tooth too java 8 is only about five and a half years old",
    "start": "99600",
    "end": "107439"
  },
  {
    "text": "it doesn't seem like it's that you know it seems like it's longer than that but the really cool thing in my opinion in",
    "start": "107439",
    "end": "113840"
  },
  {
    "text": "eight is it really took over the the world very quickly because it had probably the coolest",
    "start": "113840",
    "end": "119680"
  },
  {
    "text": "developer led feature drive in java since probably java five with generics uh or",
    "start": "119680",
    "end": "126320"
  },
  {
    "text": "util concurrent those two drove them but i would say even more than those like lambda expressions people just like",
    "start": "126320",
    "end": "133200"
  },
  {
    "text": "coding that and and like you know java 6 had some features in java 7 you",
    "start": "133200",
    "end": "139040"
  },
  {
    "text": "could save a little bit on the carly's and brackets but eight was very material it changed how",
    "start": "139040",
    "end": "144800"
  },
  {
    "text": "we code so great now after eight it took a while and then we got nine",
    "start": "144800",
    "end": "151120"
  },
  {
    "text": "and then we got 10 and 11 and 12 and 13. and we're going to get 14. we're almost at halfway point between 13 and 14.",
    "start": "151120",
    "end": "158800"
  },
  {
    "text": "okay it's going pretty quick um and you guys probably all know this",
    "start": "158800",
    "end": "164480"
  },
  {
    "text": "and heard many many different talks about that this will be just a little bit of perspective on it",
    "start": "164480",
    "end": "169840"
  },
  {
    "text": "and the good news is it seems to be going on track on the declared path exactly on the declared dates which",
    "start": "169840",
    "end": "177440"
  },
  {
    "text": "i really really like seeing things are coming out on the date that they were planned to come out two years ahead of time i mean they're",
    "start": "177440",
    "end": "184480"
  },
  {
    "text": "not ahead of time the declaration was two years before and it happened um so good but also",
    "start": "184480",
    "end": "192239"
  },
  {
    "text": "heads are spinning right because you guys are still an eight and a few like not just a few but a",
    "start": "192239",
    "end": "200159"
  },
  {
    "text": "quarter of you have actually gone to 11 but very few are only on 11 you're still in the 8 to 11 move",
    "start": "200159",
    "end": "206560"
  },
  {
    "text": "and 11 is already in the past sort of maybe so um if we look at it from a map",
    "start": "206560",
    "end": "214080"
  },
  {
    "start": "213000",
    "end": "213000"
  },
  {
    "text": "perspective it looks like this the the long lines here are actually the the oracle declared long-term support",
    "start": "214080",
    "end": "221040"
  },
  {
    "text": "releases seven and eight six before that were long-term support",
    "start": "221040",
    "end": "227120"
  },
  {
    "text": "11 is long-term support this release will be around from oracle and and with community",
    "start": "227120",
    "end": "233840"
  },
  {
    "text": "support from the community for quite a few years it's going to stick around like java 8 stuck around",
    "start": "233840",
    "end": "239840"
  },
  {
    "text": "but as i said before 9 and 10 are dead they were six months and gone nobody is releasing an",
    "start": "239840",
    "end": "246560"
  },
  {
    "text": "update to java 9 after 904 or to 10 after 1002 there is no 1003.",
    "start": "246560",
    "end": "252959"
  },
  {
    "text": "you don't expect it it'll never come well you can build your own and maybe put it out there but",
    "start": "252959",
    "end": "258000"
  },
  {
    "text": "you know none of the folks actually doing jdk seem to be doing that we all know that we're gonna do eleven",
    "start": "258000",
    "end": "265520"
  },
  {
    "text": "we're all supporting eight for quite a while to come and we are here in this interesting",
    "start": "265520",
    "end": "271919"
  },
  {
    "text": "desert between 11 and 17 17 will be the next lts",
    "start": "271919",
    "end": "278479"
  },
  {
    "text": "the for those of you not tracking the numbers exactly it's every three years there will be an lts and it revs every",
    "start": "278479",
    "end": "283840"
  },
  {
    "text": "six months so every sixth number is an lts assuming all steve keeps like",
    "start": "283840",
    "end": "288880"
  },
  {
    "text": "that 17 and then 23 and and do the math right all these other ones in the middle",
    "start": "288880",
    "end": "296000"
  },
  {
    "text": "are feature releases but they're full-blown java releases reserve the class file version all the",
    "start": "296000",
    "end": "303600"
  },
  {
    "text": "parsers will break you know that kind of stuff and they have interesting stuff in them but",
    "start": "303600",
    "end": "309199"
  },
  {
    "text": "but they live for six months then you gotta move and you gotta move and you gotta move and there's no updates until you get to the next one so in this",
    "start": "309199",
    "end": "316720"
  },
  {
    "text": "kind of interim thing and i predicted as a result of this most of you are looking at moving to 11 and staying",
    "start": "316720",
    "end": "325120"
  },
  {
    "text": "staying writing in production and 11 playing with the other things then move to 17 and staying now some of",
    "start": "325120",
    "end": "332560"
  },
  {
    "text": "you will actually race much faster than that some of you are in this world where you control everything",
    "start": "332560",
    "end": "338160"
  },
  {
    "text": "you have a lot of guts and you will take your production on the latest thing that's like two months old",
    "start": "338160",
    "end": "343759"
  },
  {
    "text": "and run it in production if there's a bug you'll figure it out you know and you'll move forward or move backwards",
    "start": "343759",
    "end": "348880"
  },
  {
    "text": "and change your code but most stuff in the world doesn't live like that because most software in the",
    "start": "348880",
    "end": "353919"
  },
  {
    "text": "world doesn't have a developer attached to it when you take that code and you move to your other job or to your other projects",
    "start": "353919",
    "end": "360880"
  },
  {
    "text": "somebody else has to run it and when the jvm version no longer updates and",
    "start": "360880",
    "end": "366000"
  },
  {
    "text": "you gotta move to the new one and it doesn't work on it somebody is to call a developer i guess",
    "start": "366000",
    "end": "371840"
  },
  {
    "text": "that's job safety you know but but say every six months is a little hard",
    "start": "371840",
    "end": "377600"
  },
  {
    "text": "so this is a this is actually a problem and we i will come back to talk at it about it towards the end um but let's",
    "start": "377600",
    "end": "385039"
  },
  {
    "start": "384000",
    "end": "384000"
  },
  {
    "text": "look at what we need to do to come up to speed there are a few things here first of all the current java is either",
    "start": "385039",
    "end": "390720"
  },
  {
    "text": "java 13 or 11 depending on whether you mean run in production long term or the latest one that is out there is a ga",
    "start": "390720",
    "end": "397440"
  },
  {
    "text": "version i can run today and if we look at the changes you got to",
    "start": "397440",
    "end": "404240"
  },
  {
    "text": "change look at the changes from whatever you're running right now until then so if you're running on java",
    "start": "404240",
    "end": "409759"
  },
  {
    "text": "8 then you need to look at all these changes to figure out what 13 is what happened to 9 what happened in",
    "start": "409759",
    "end": "416800"
  },
  {
    "text": "10 et cetera so what i'm going to do is go over some of those it's exhausting you can't",
    "start": "416800",
    "end": "422319"
  },
  {
    "text": "go over all of them and i'll cherry pick a few but we're going to go through some samples of what happened in each one of those",
    "start": "422319",
    "end": "427759"
  },
  {
    "text": "some highlights of interesting stuff in them and hopefully that will be useful if you really want to study this",
    "start": "427759",
    "end": "434160"
  },
  {
    "text": "you can study it in depth my colleague simon ritter who actually helped me put a bunch of these together",
    "start": "434160",
    "end": "440240"
  },
  {
    "text": "does these really cool talks on 55 new things in java 10. and and the cool thing is that's like an",
    "start": "440240",
    "end": "446960"
  },
  {
    "text": "hour of 55 things in java 10 you can learn if you have the time to recordings from various uh",
    "start": "446960",
    "end": "452960"
  },
  {
    "text": "shows that he's done those and he's done those for 9 and 10 and 11 and 12 and now he's doing 13 so good",
    "start": "452960",
    "end": "460638"
  },
  {
    "text": "so changes changes happen in a few different areas first one is to the java language itself",
    "start": "460720",
    "end": "468000"
  },
  {
    "text": "changing how we write code new syntax okay or new like now you could write it",
    "start": "468000",
    "end": "474560"
  },
  {
    "text": "this way right then we have changes to the platform",
    "start": "474560",
    "end": "480240"
  },
  {
    "text": "so when i say java 13 i mean the language java not scala not closure not kotlin",
    "start": "480240",
    "end": "486879"
  },
  {
    "text": "java right when we talk about the platform we talk about the jdk and that includes what scala enclosure",
    "start": "486879",
    "end": "493120"
  },
  {
    "text": "and kotlin and groovy all run on and there we'll say you know jdk 13 or",
    "start": "493120",
    "end": "498720"
  },
  {
    "text": "java c13 and there we're changing the specified apis what's in the libraries",
    "start": "498720",
    "end": "504720"
  },
  {
    "text": "the behavior of the code the platform itself things like that but",
    "start": "504720",
    "end": "509759"
  },
  {
    "text": "the behavior in a way that you can sense functionally okay and then we have",
    "start": "509759",
    "end": "516719"
  },
  {
    "text": "opengdk which is a specific implementation of java an important implementation of java",
    "start": "516719",
    "end": "522800"
  },
  {
    "text": "because that's kind of where java is actually developed and the new versions of java kind of rolled out there and",
    "start": "522800",
    "end": "528640"
  },
  {
    "text": "openhdk actually provides this the reference implementation for the java spec so when we",
    "start": "528640",
    "end": "535440"
  },
  {
    "text": "nail down and and say this is java 14",
    "start": "535440",
    "end": "540640"
  },
  {
    "text": "there'll be an opengdk version that is the reference implementation for what that is and will vote that it really is",
    "start": "540640",
    "end": "546480"
  },
  {
    "text": "and it will stay frozen not it's not the updates to that that are the the reference application never",
    "start": "546480",
    "end": "552160"
  },
  {
    "text": "station is frozen in time but it comes out of open jk so it's important but opengk has a bunch of cool under the",
    "start": "552160",
    "end": "558480"
  },
  {
    "text": "hood stuff implementation specific stuff that are not have nothing to do with java the language or java the jdk",
    "start": "558480",
    "end": "565519"
  },
  {
    "text": "or the libraries or the functional behaviors they have to do with speed",
    "start": "565519",
    "end": "572160"
  },
  {
    "text": "behave you know things like garbage collection pauses or not speed or not sizes are not how fast you start",
    "start": "572160",
    "end": "578959"
  },
  {
    "text": "how you compile those don't change anything in your code they don't need to change anything in your",
    "start": "578959",
    "end": "584720"
  },
  {
    "text": "functional behavior you can take your code anywhere but hopefully they're changing it for the better right you're getting faster",
    "start": "584720",
    "end": "591200"
  },
  {
    "text": "better smaller pauses larger heaps whatever you need there but those changes should not be confused",
    "start": "591200",
    "end": "596320"
  },
  {
    "text": "with changes to the javasc platform which is a specification or to the language",
    "start": "596320",
    "end": "601440"
  },
  {
    "text": "which is a specific thing there so as i go through things you'll see all these categories mentioned just keep in mind that they're",
    "start": "601440",
    "end": "608320"
  },
  {
    "text": "not co-mingled right change to open gdk's internal garbage collectors is not a change to",
    "start": "608320",
    "end": "614880"
  },
  {
    "text": "the java platform we have people from ibm there with j9 we do zing",
    "start": "614880",
    "end": "620079"
  },
  {
    "text": "various things and just because some implementation changed one thing doesn't mean the platform changed we all still",
    "start": "620079",
    "end": "625680"
  },
  {
    "text": "run the same code okay jdk 9 was the probably the last",
    "start": "625680",
    "end": "631680"
  },
  {
    "start": "628000",
    "end": "628000"
  },
  {
    "text": "really really big platform change lots of changes lots and lots of changes why was it the last because it was the",
    "start": "631680",
    "end": "639360"
  },
  {
    "text": "first of the six-month version so after jdk nine we moved to six-month cadence only a few",
    "start": "639360",
    "end": "646399"
  },
  {
    "text": "things changed then only a few things changed but jdk nine was you know a full shopping basket and and",
    "start": "646399",
    "end": "653200"
  },
  {
    "text": "in two and a half actually three years i think of time between eight and that so lots",
    "start": "653200",
    "end": "658720"
  },
  {
    "text": "of things in there i got one thing in there on spin weight is my fault um but lots and lots of cool uh",
    "start": "658720",
    "end": "666399"
  },
  {
    "text": "different changes and probably the biggest one everybody's noticed is the java platform module system and fundamentally",
    "start": "666399",
    "end": "674240"
  },
  {
    "start": "667000",
    "end": "667000"
  },
  {
    "text": "the jdk itself became modularized under the new module system the biggest beneficiary of the module",
    "start": "674240",
    "end": "680160"
  },
  {
    "text": "system is the jdk itself it's actually what drove the modulation yeah i sort of thought of what you might",
    "start": "680160",
    "end": "686560"
  },
  {
    "text": "do with modules but the reality is that jdk wanted to be virtualized itself and most of the design is driven by it",
    "start": "686560",
    "end": "693040"
  },
  {
    "text": "so the jdk is now driven broken into 75 different modules and here's some stats about them",
    "start": "693040",
    "end": "700640"
  },
  {
    "text": "most of the internal apis are now encapsulated so they're in a module you can reach",
    "start": "700640",
    "end": "707440"
  },
  {
    "text": "them if you lift the right lids off the modules right but modules provide a new layer of encapsulation and security or",
    "start": "707440",
    "end": "714240"
  },
  {
    "text": "containing visibilities and such and and you can open up the can the right way there was",
    "start": "714240",
    "end": "719600"
  },
  {
    "text": "a lot of interesting back and forth before jdk 9 was actually voted in as a standard with",
    "start": "719600",
    "end": "725920"
  },
  {
    "text": "some open discussions about um about what it'll do to the",
    "start": "725920",
    "end": "731680"
  },
  {
    "text": "ecosystem and we actually saw a change this is a place where you could see the community actually doing really good",
    "start": "731680",
    "end": "736800"
  },
  {
    "text": "work both in the opg world and open other communities and in the jcp which i time on the jcpec",
    "start": "736800",
    "end": "745200"
  },
  {
    "text": "we actually asked them to change the spec before we voted yes on it",
    "start": "745200",
    "end": "750800"
  },
  {
    "text": "and open some things up specifically around things like you know access to sun misconceived",
    "start": "750800",
    "end": "755839"
  },
  {
    "text": "various other flags and what would the default be what would the warnings look like things like that and i'm happy that that",
    "start": "755839",
    "end": "762639"
  },
  {
    "text": "happened it was a good good exactly a good example of everybody working together right",
    "start": "762639",
    "end": "768079"
  },
  {
    "text": "and i think the the hotspot developer guys did a great job on on both proposing",
    "start": "768079",
    "end": "773839"
  },
  {
    "text": "something and then listening to community and adjusting accordingly um so j9 opengl",
    "start": "773839",
    "end": "780399"
  },
  {
    "text": "jdk9 actually had a big big change around that another cool feature that some of you",
    "start": "780399",
    "end": "786959"
  },
  {
    "start": "784000",
    "end": "784000"
  },
  {
    "text": "might have heard of is j-link it's there from nine everything i'm talking about almost everything i'm talking about is from",
    "start": "786959",
    "end": "792560"
  },
  {
    "text": "nine on so if you're running 13 that also applies right it's just nine was the first place it happened",
    "start": "792560",
    "end": "798959"
  },
  {
    "text": "so jlink lets us basically take an application in the jdk and then combine only the modules that",
    "start": "798959",
    "end": "805279"
  },
  {
    "text": "the application needs into a package and image that is a smaller footprint and small footprints are good for",
    "start": "805279",
    "end": "811519"
  },
  {
    "text": "various reasons one of them is they're smaller but the other part is the notion that",
    "start": "811519",
    "end": "818000"
  },
  {
    "text": "exposure is lower right if you don't need the code it's not there there's less attack surface there's no",
    "start": "818000",
    "end": "823279"
  },
  {
    "text": "less bug surface whatever those are and you know if you look at how people use alpine linux for example it's usually",
    "start": "823279",
    "end": "829440"
  },
  {
    "text": "not about footprint it's about exposure so it's the same notion so j-link lets you do that",
    "start": "829440",
    "end": "835199"
  },
  {
    "text": "how people use it or not we're still it's still early to tell because not a lot of people run 9 and 11 is kind",
    "start": "835199",
    "end": "842399"
  },
  {
    "text": "of young but it'll be interesting to see if people use this feature or not um now with jdk 9 a bunch of cleanups",
    "start": "842399",
    "end": "851440"
  },
  {
    "text": "started because java is 20 some years old and it's been carrying a lot of baggage",
    "start": "851440",
    "end": "856480"
  },
  {
    "text": "and whether you like it or not and i'm on both sides of this argument",
    "start": "856480",
    "end": "862240"
  },
  {
    "text": "some of that baggage needed to go away it's too costly to keep around so jdk9 is the first version of java",
    "start": "862399",
    "end": "869600"
  },
  {
    "text": "where things have starting to go away that have always been around so deprecated apis were actually removed",
    "start": "869600",
    "end": "877199"
  },
  {
    "text": "from the platform for the first time in the history of java until now they just got deprecated and",
    "start": "877199",
    "end": "882880"
  },
  {
    "text": "deprecated and get warnings and ignored them some of those things you've been going for a decade are gone",
    "start": "882880",
    "end": "889680"
  },
  {
    "text": "okay they're gone you can't use them anymore so you should have listened but in addition to just regular",
    "start": "889680",
    "end": "896720"
  },
  {
    "text": "deprecated stuff we've had this evolution of big things being removed",
    "start": "896720",
    "end": "902000"
  },
  {
    "text": "so in java 9 for the first time the entire java se aggregator module was removed and i'll",
    "start": "902000",
    "end": "910160"
  },
  {
    "text": "show you what that is in a second uh now then it was hidden you can kind of bring it back with a flag that's part",
    "start": "910160",
    "end": "916320"
  },
  {
    "text": "of the debate we had back then but in java 11 it is gone you you can't",
    "start": "916320",
    "end": "921440"
  },
  {
    "text": "bring it back you gotta go find an alternative on maven central this is the same module but without changing something that code",
    "start": "921440",
    "end": "928399"
  },
  {
    "text": "isn't running jdk 10 and above will continue this work",
    "start": "928399",
    "end": "934240"
  },
  {
    "text": "this was not a one-time reduction or elimination it was a policy change from now on things will",
    "start": "934240",
    "end": "940639"
  },
  {
    "text": "start going away you should watch your deprecations and you should watch them closely",
    "start": "940639",
    "end": "946720"
  },
  {
    "text": "now more features will be removed in the futures not just apis and stuff but for example the cms",
    "start": "946720",
    "end": "953120"
  },
  {
    "text": "garbage collection we just heard today it's proudly gone in java 14 if not at 14 probably by 15 and a few",
    "start": "953120",
    "end": "960959"
  },
  {
    "text": "other things so things are truly going away and again it's baggage 25 years of weight to carry around with",
    "start": "960959",
    "end": "967279"
  },
  {
    "text": "people that aren't around anymore to maintain it is something you got to clean up after",
    "start": "967279",
    "end": "973360"
  },
  {
    "start": "973000",
    "end": "973000"
  },
  {
    "text": "so here's a statement about compatibility and that sounds kind of good clean applications respond that that",
    "start": "974000",
    "end": "980639"
  },
  {
    "text": "just depend on the java se shouldn't just work now",
    "start": "980639",
    "end": "987040"
  },
  {
    "text": "unfortunately the word world isn't as clean as is this and and the reason is this is an absolutely",
    "start": "987040",
    "end": "992800"
  },
  {
    "text": "correct statement but note the very careful spelling of java se",
    "start": "992800",
    "end": "998639"
  },
  {
    "text": "this refers to the module in jdk 9 that is spelled java se",
    "start": "998800",
    "end": "1005680"
  },
  {
    "text": "there are tons of java se8 things that are absolutely going away",
    "start": "1005680",
    "end": "1011040"
  },
  {
    "text": "so java.sc lowercase doesn't mean java se the platform so big parts of the javasc platform are",
    "start": "1011040",
    "end": "1018399"
  },
  {
    "text": "no longer part of the javasc platform and as an example all of these are no",
    "start": "1018399",
    "end": "1024798"
  },
  {
    "start": "1023000",
    "end": "1023000"
  },
  {
    "text": "longer part of the javascript platform does anybody here use any of these",
    "start": "1024799",
    "end": "1032160"
  },
  {
    "text": "direct does anybody here think they indirectly use any of these",
    "start": "1032160",
    "end": "1037360"
  },
  {
    "text": "okay has anybody here that use the best base64 encoder or decoder",
    "start": "1037360",
    "end": "1044720"
  },
  {
    "text": "okay has anybody here use the json parser they use base64 encoders guess where",
    "start": "1044720",
    "end": "1052480"
  },
  {
    "text": "they are so there are alternatives there are many",
    "start": "1052480",
    "end": "1058400"
  },
  {
    "text": "other places to get base64 encoders this is not that it's broken it'll never come back it's just that you need a new version of",
    "start": "1058400",
    "end": "1064640"
  },
  {
    "text": "a json parser that uses the base64 encoder that doesn't come from here or you need to bring the javasce module",
    "start": "1064640",
    "end": "1071919"
  },
  {
    "text": "from maven central to add to your application because it's gone from the platform things don't just work and that's a key",
    "start": "1071919",
    "end": "1079600"
  },
  {
    "text": "thing for those of you that have gone to 11 i assume you've run into this these things and here's the good news as",
    "start": "1079600",
    "end": "1086240"
  },
  {
    "text": "you saw here people can get past this so so don't be afraid don't not do this please do this",
    "start": "1086240",
    "end": "1093840"
  },
  {
    "text": "we all need to eventually move to this stuff just be aware that it's not just a java",
    "start": "1093840",
    "end": "1099039"
  },
  {
    "text": "six to seven or seven to eight like transition after eight there's a bigger deal to",
    "start": "1099039",
    "end": "1104320"
  },
  {
    "text": "move on you need to be a little more thoughtful and prepare for disappointment okay so new version of",
    "start": "1104320",
    "end": "1112320"
  },
  {
    "start": "1106000",
    "end": "1106000"
  },
  {
    "text": "java may include breaking changes anything for removal will be deprecated first so",
    "start": "1112320",
    "end": "1118480"
  },
  {
    "text": "you will be told you will be warned ahead of time but in a minimum is one release of warning but that sounded good when",
    "start": "1118480",
    "end": "1124880"
  },
  {
    "text": "releases were three years apart releases are six months apart now so",
    "start": "1124880",
    "end": "1131360"
  },
  {
    "text": "things can go away in a year from morning to it's gone you have a",
    "start": "1131360",
    "end": "1136559"
  },
  {
    "text": "year okay um okay so nine nine was a big c change on to ten",
    "start": "1136559",
    "end": "1144799"
  },
  {
    "start": "1144000",
    "end": "1144000"
  },
  {
    "text": "ten has a few cool things in it i'll highlight a couple um java has var",
    "start": "1144799",
    "end": "1151520"
  },
  {
    "text": "why because because it's sexy every other language that sexy has var so we should do that too",
    "start": "1151520",
    "end": "1157120"
  },
  {
    "text": "um and i mean that's one reason i guess but fundamentally it's it's you write less code and you infer from",
    "start": "1157120",
    "end": "1164000"
  },
  {
    "text": "the other parts the types that you don't have to spell out and again depending on your coding",
    "start": "1164000",
    "end": "1169360"
  },
  {
    "text": "style you may like it or not the good news is you don't have to use it right i tend to not use it i",
    "start": "1169360",
    "end": "1177200"
  },
  {
    "text": "like to be able to read i like to skip inferring in my brain i like it to",
    "start": "1177200",
    "end": "1182240"
  },
  {
    "text": "say what i say but it's good to have it there for various reasons and a couple of examples are you",
    "start": "1182240",
    "end": "1187840"
  },
  {
    "text": "can propagate through so those are simple you just propagate and infer from right to left but",
    "start": "1187840",
    "end": "1193200"
  },
  {
    "text": "you can infer the type string in a loop because you have the type of the variable you can infer an int which i actually",
    "start": "1193200",
    "end": "1200559"
  },
  {
    "text": "kind of am annoyed at because it forces you to put an l on the longs",
    "start": "1200559",
    "end": "1206320"
  },
  {
    "text": "but hey okay and and then you can do some some other",
    "start": "1206320",
    "end": "1211520"
  },
  {
    "text": "things and this is a good example practical of how it cleans up code so for example if you have tri re with",
    "start": "1211520",
    "end": "1217280"
  },
  {
    "text": "resources blog which you should if you're doing good management around",
    "start": "1217280",
    "end": "1222640"
  },
  {
    "text": "try blocks for i o stuff for example that looks like this you can convert it to look like that and",
    "start": "1222640",
    "end": "1229760"
  },
  {
    "text": "it's more readable it's a little bit of cheating because you know we picked exactly the thing",
    "start": "1229760",
    "end": "1234799"
  },
  {
    "text": "that will fit on the screen if it's var you know but you know but again in an id you usually",
    "start": "1234799",
    "end": "1241360"
  },
  {
    "text": "have a little more room as well so i do think this cleans up the code this is clearly more readable than the",
    "start": "1241360",
    "end": "1247039"
  },
  {
    "text": "previous from what it does so there's there's goodness here",
    "start": "1247039",
    "end": "1251840"
  },
  {
    "start": "1252000",
    "end": "1252000"
  },
  {
    "text": "var is a reserved type and not a keyword and and why would you care well if",
    "start": "1252640",
    "end": "1258480"
  },
  {
    "text": "you're really into languages you care but let's get practical for what that means you can write this it's okay to have a",
    "start": "1258480",
    "end": "1265919"
  },
  {
    "text": "variable called var why because it was okay yesterday and we didn't want to break everybody's code",
    "start": "1265919",
    "end": "1272640"
  },
  {
    "text": "right therefore it's not a keyword but it's not okay to have a class called",
    "start": "1272640",
    "end": "1279679"
  },
  {
    "text": "var with lowercase var it is okay to have a class called var with uppercase var if you had a class called var with",
    "start": "1279679",
    "end": "1286559"
  },
  {
    "text": "lowercase var the v at the beginning you deserve this",
    "start": "1286559",
    "end": "1291840"
  },
  {
    "text": "i mean yeah it was legal yesterday but come on you know okay",
    "start": "1291919",
    "end": "1298480"
  },
  {
    "text": "okay so so var is here um so now just now you know what it means",
    "start": "1298480",
    "end": "1304640"
  },
  {
    "text": "hopefully you knew before here are a few japs jeff's are",
    "start": "1304640",
    "end": "1310320"
  },
  {
    "text": "java enhancement proposals technically from the opengdk process not for the jcp but the opengk process",
    "start": "1310320",
    "end": "1316960"
  },
  {
    "text": "so you will see jobs for everything from new language features new platform features or just new open gdk internal features",
    "start": "1316960",
    "end": "1323520"
  },
  {
    "text": "and all of those have a job and as you can see here we have the jeff for the",
    "start": "1323520",
    "end": "1328640"
  },
  {
    "text": "local variable type is up there that's an actual language change right you write differently we",
    "start": "1328640",
    "end": "1335039"
  },
  {
    "text": "have powerful gc for g1 that's an under the hood thing make g1 better application class data sharing lets us",
    "start": "1335039",
    "end": "1341840"
  },
  {
    "text": "start up faster if we do the right things and then experimental jit and heap allocation and all these other things",
    "start": "1341840",
    "end": "1348080"
  },
  {
    "text": "are under the hood they're good things like thread local handshakes are great building blocks for",
    "start": "1348080",
    "end": "1353679"
  },
  {
    "text": "future concurrent collection and maybe cool less hurtful de-optimizations and things like that we've had a similar feature in",
    "start": "1353679",
    "end": "1360799"
  },
  {
    "text": "zing for a decade now called checkpoints it's just the name difference but it's a very useful thing trust me",
    "start": "1360799",
    "end": "1368960"
  },
  {
    "text": "so these are some selected jabs from there there are also a whole bunch of new apis",
    "start": "1368960",
    "end": "1374799"
  },
  {
    "text": "so don't don't think that it's just a tiny little thing like i said there's like a 55 things in java 10 you can look",
    "start": "1374799",
    "end": "1380159"
  },
  {
    "text": "at but here are some of the new apis you can do copy offs and collections which",
    "start": "1380159",
    "end": "1386000"
  },
  {
    "text": "is very convenient especially when you look at variations of you know you start looking at how you build or or",
    "start": "1386000",
    "end": "1392080"
  },
  {
    "text": "do static and initialize stuff or or just it's shorter hand you know handwriting for things",
    "start": "1392080",
    "end": "1398400"
  },
  {
    "text": "you can do unmodifiable and unmodifiable yeah that's the right way to say it",
    "start": "1398400",
    "end": "1403919"
  },
  {
    "text": "uh collect basically collections and stuff and and those are useful not just for",
    "start": "1403919",
    "end": "1410480"
  },
  {
    "text": "semantic of okay i don't want to touch them but potentially if you do this you will get performance",
    "start": "1410480",
    "end": "1415679"
  },
  {
    "text": "so under various things or over time the jet compilers could understand things like this collection is not modifiable",
    "start": "1415679",
    "end": "1421600"
  },
  {
    "text": "and and therefore act on it and do better things with it and we also have things like or else",
    "start": "1421600",
    "end": "1427600"
  },
  {
    "text": "throw on optional anyway a bunch of cool new apis on to",
    "start": "1427600",
    "end": "1433279"
  },
  {
    "text": "jdk 11. again this is cherry picking it's not the whole thing we have",
    "start": "1433279",
    "end": "1438799"
  },
  {
    "start": "1435000",
    "end": "1435000"
  },
  {
    "text": "more cool things we could do with local variable and for example if you have",
    "start": "1438799",
    "end": "1446159"
  },
  {
    "text": "something that's written like this you could change it to be like that you could put",
    "start": "1446159",
    "end": "1453440"
  },
  {
    "text": "a var on that s you look at this and you say well why would i do that that's actually more text",
    "start": "1453440",
    "end": "1458559"
  },
  {
    "text": "right well the reason you would do that is so you could do this right if you want to start annotating",
    "start": "1458559",
    "end": "1465679"
  },
  {
    "text": "things in lambdas you got to put a declaration on them instead of putting the type declaration folder and then you",
    "start": "1465679",
    "end": "1471600"
  },
  {
    "text": "know getting very expanded declarations you could just use var so i actually think for me this is where",
    "start": "1471600",
    "end": "1479520"
  },
  {
    "text": "i would use var like everywhere else i would probably just spill the damn thing",
    "start": "1479520",
    "end": "1485679"
  },
  {
    "text": "but here in order to be able to annotate the parameter to a lambda i think this is a very useful way to do this",
    "start": "1485679",
    "end": "1492720"
  },
  {
    "text": "because in lambdas i tend to not type out the type right but i do want annotation",
    "start": "1492720",
    "end": "1499200"
  },
  {
    "text": "so you know to me this turns it into a much more widely used feature from a language perspective",
    "start": "1499200",
    "end": "1504720"
  },
  {
    "text": "um another cool feature that i don't know how many of you know of is",
    "start": "1504720",
    "end": "1509919"
  },
  {
    "start": "1505000",
    "end": "1505000"
  },
  {
    "text": "we can now launch java from a single source file not just from an object not just from a class so for example you",
    "start": "1509919",
    "end": "1517039"
  },
  {
    "text": "could say java something not java give it parameters and it will run that now you could look at this say",
    "start": "1517039",
    "end": "1523200"
  },
  {
    "text": "yeah okay cool i can write a little demo i can give people source code and they can run it without compiling it",
    "start": "1523200",
    "end": "1528799"
  },
  {
    "text": "what is it really useful we can now do this this is a shell script with java source",
    "start": "1528799",
    "end": "1536320"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "code in it and this works",
    "start": "1536320",
    "end": "1541120"
  },
  {
    "text": "how many of you didn't know that see you learned here here's your takeaway for today you learned that you can now write",
    "start": "1541360",
    "end": "1548000"
  },
  {
    "text": "java shell scripts cool okay that is of java 11. you got to move",
    "start": "1548000",
    "end": "1553360"
  },
  {
    "text": "to 11. right motivation there okay so here are a few things um about java",
    "start": "1553360",
    "end": "1561600"
  },
  {
    "text": "other things about java 11. nested based nest-based access control this is",
    "start": "1561600",
    "end": "1567360"
  },
  {
    "text": "one of those things that has been driving the jdk guy's grazing the java compiler",
    "start": "1567360",
    "end": "1573520"
  },
  {
    "text": "guy's crazy and and the verifier goes crazy but you don't care about um it has to do with how we had to deal",
    "start": "1573520",
    "end": "1580880"
  },
  {
    "text": "with um you know nested things that spread across class files that were kind of",
    "start": "1580880",
    "end": "1587200"
  },
  {
    "text": "actually nested in a source file with access control it does do a great job of cleaning up the stuff",
    "start": "1587200",
    "end": "1592880"
  },
  {
    "text": "under the hood but again it's very under the hood it's under the hood specification wise though",
    "start": "1592880",
    "end": "1599039"
  },
  {
    "text": "it's not under hood just for you know a specific open jdk so this is a platform thing uh dynamic",
    "start": "1599039",
    "end": "1606159"
  },
  {
    "text": "class file constants are similarly a spec thing um they again probably don't show",
    "start": "1606159",
    "end": "1611760"
  },
  {
    "text": "up in the code you use but very very convenient for the people who produce bytecodes produce class files lets us do",
    "start": "1611760",
    "end": "1619120"
  },
  {
    "text": "things much more shortly much more concisely and let probably because of how it's written",
    "start": "1619120",
    "end": "1624320"
  },
  {
    "text": "it'll tend to have people declaring things in a way that jit compilers could blow through better for optimization",
    "start": "1624320",
    "end": "1630400"
  },
  {
    "text": "so i really like it but again under the hood specification java sc platform",
    "start": "1630400",
    "end": "1636000"
  },
  {
    "text": "change that probably doesn't change anything you do okay http client that's a big deal could",
    "start": "1636000",
    "end": "1641840"
  },
  {
    "text": "you believe that we waited until jdk11 to get an http declined in java right um it's it's actually a testament",
    "start": "1641840",
    "end": "1649679"
  },
  {
    "text": "to how strong the ecosystem is because everybody's had an http client in java we just had the problem of",
    "start": "1649679",
    "end": "1655760"
  },
  {
    "text": "choosing which one now there's one in the platform so hopefully we'll end up kind of",
    "start": "1655760",
    "end": "1661360"
  },
  {
    "text": "consolidating everything on it so we don't have as many choices right um tls 1.3",
    "start": "1661360",
    "end": "1668320"
  },
  {
    "text": "and this is actually probably the number one feature i've seen that drives people to java 11 because they need it not",
    "start": "1668320",
    "end": "1675440"
  },
  {
    "text": "because they like coding that way um so tls 1.3 is about a",
    "start": "1675440",
    "end": "1682000"
  },
  {
    "text": "year and a half old i guess it's getting adopted widely um and and both for simplicity and",
    "start": "1682000",
    "end": "1689200"
  },
  {
    "text": "some speed but probably for security over time it's going to become a driving factor in",
    "start": "1689200",
    "end": "1694720"
  },
  {
    "text": "and 11 has it it's the first version of java that has it so if you need a functional reason to move to 11 because",
    "start": "1694720",
    "end": "1700480"
  },
  {
    "text": "the world is pushing you there this is probably it zgc is a new experimental low latency gc",
    "start": "1700480",
    "end": "1706600"
  },
  {
    "text": "experimental cgc i explained yesterday what experimental means",
    "start": "1706600",
    "end": "1712000"
  },
  {
    "text": "in one of my talks hopefully you heard and then we have the epsilon garbage collector which is really cool this is",
    "start": "1712000",
    "end": "1718480"
  },
  {
    "text": "the don't do garbage collection garbage collection it was initially motivated by wanting to",
    "start": "1718480",
    "end": "1724159"
  },
  {
    "text": "measure the overhead of garbage collection meaning don't do it and then let's do it and we'll measure the difference now we",
    "start": "1724159",
    "end": "1730240"
  },
  {
    "text": "know how much it cost but it turns out that some people actually use this so",
    "start": "1730240",
    "end": "1735440"
  },
  {
    "text": "there's some people in the world that write zero gc code or very low gc code and are willing to run for a day with a",
    "start": "1735440",
    "end": "1741919"
  },
  {
    "text": "large heap and don't want a single gcn they're okay blowing up rather than gc",
    "start": "1741919",
    "end": "1747600"
  },
  {
    "text": "and epsilon is perfect for that so this is the run until you're out of heap and blow up gc",
    "start": "1747600",
    "end": "1754640"
  },
  {
    "text": "okay um but it's there it's in there you could turn it on um it",
    "start": "1754640",
    "end": "1761279"
  },
  {
    "text": "is very useful for measuring with short-lived things the overhead of various gcs because you",
    "start": "1761279",
    "end": "1767279"
  },
  {
    "text": "compare epsilon gc with other gcs on performance and you've got your delta of how much you're paying for having that gc owner",
    "start": "1767279",
    "end": "1773600"
  },
  {
    "text": "that you see or it's a baseline of zero okay um new apis",
    "start": "1773600",
    "end": "1781120"
  },
  {
    "text": "we have some new i o methods interesting null methods and for streams these become useful",
    "start": "1781120",
    "end": "1788480"
  },
  {
    "text": "later i'll show you where is later but but having being able to have null streams both for input and",
    "start": "1788480",
    "end": "1794399"
  },
  {
    "text": "output is is is useful when you combine things together and optional has a nice uh is empty which is kind of the dual of",
    "start": "1794399",
    "end": "1802320"
  },
  {
    "text": "is present it was the weird it's weird that we had one without the other uh so the duality is fixed um",
    "start": "1802320",
    "end": "1809760"
  },
  {
    "text": "some new string apis uh sorry some new streaming string apis um",
    "start": "1809760",
    "end": "1816720"
  },
  {
    "text": "this strip one is interesting because a lot of people look at to say well but we already had that well it turns out we",
    "start": "1816720",
    "end": "1822720"
  },
  {
    "text": "already had it for some languages in exam like english but this is an actual",
    "start": "1822720",
    "end": "1830240"
  },
  {
    "text": "um true internationalization white space recognition stripping so it's a more correct way of",
    "start": "1830240",
    "end": "1838000"
  },
  {
    "text": "stripping in a string okay useful string repeat",
    "start": "1838000",
    "end": "1843440"
  },
  {
    "text": "say this five times yeah it comes in handy in some things i've actually used it so i i used to look scoff at this and",
    "start": "1844159",
    "end": "1850799"
  },
  {
    "text": "say what what do we need this for then a week later i used it so",
    "start": "1850799",
    "end": "1856640"
  },
  {
    "text": "i guess it's useful um okay um this is a cool one so",
    "start": "1856880",
    "end": "1863760"
  },
  {
    "text": "predicate has a not um not method now which is not predicate and you gotta you think of how do you use",
    "start": "1863760",
    "end": "1870399"
  },
  {
    "text": "that so imagine you have this written um and you could say okay that probably",
    "start": "1870399",
    "end": "1876480"
  },
  {
    "text": "is readable but it's readable it's got a bang instead of not you gotta some people don't think of that as",
    "start": "1876480",
    "end": "1882480"
  },
  {
    "text": "readable but you also have a full expression here right you write the whole s arrow thing just to get to say that",
    "start": "1882480",
    "end": "1890240"
  },
  {
    "text": "it's not with not you could say this which is more clean right you don't",
    "start": "1890240",
    "end": "1896080"
  },
  {
    "text": "you're you're saying it's not of that is blank and if you use um you know import static you can",
    "start": "1896080",
    "end": "1904080"
  },
  {
    "text": "make it this right so this is just more readable if you're",
    "start": "1904080",
    "end": "1909840"
  },
  {
    "text": "actually trying to say this is the not that without carrying the s through right",
    "start": "1909840",
    "end": "1914960"
  },
  {
    "text": "uh so that's nice to see kind of the evolution of small apis in this case that let you",
    "start": "1914960",
    "end": "1921679"
  },
  {
    "text": "write cleaner code without changing the language it just allows you to do the common the",
    "start": "1921679",
    "end": "1926720"
  },
  {
    "text": "common expression in a more readable way okay remember i said these are removed",
    "start": "1926720",
    "end": "1933279"
  },
  {
    "start": "1930000",
    "end": "1930000"
  },
  {
    "text": "removed right up to now these were hidden but in 11 they're gone",
    "start": "1933279",
    "end": "1938559"
  },
  {
    "text": "right there's no flag to bring them back this is the i didn't mean it flag that we had in nine and ten",
    "start": "1938559",
    "end": "1944080"
  },
  {
    "text": "now it's gone the good news is all of these aren't maven central so if you need them you can bring them back",
    "start": "1944080",
    "end": "1949760"
  },
  {
    "text": "you just have to change your dependencies and and all those the name space is the same so you don't have to kind of change your",
    "start": "1949760",
    "end": "1955919"
  },
  {
    "text": "the code that uses them but you do have to change something in order to build a working environment",
    "start": "1955919",
    "end": "1961519"
  },
  {
    "text": "okay so that was 11 on to 12 12 has a cool thing called switch",
    "start": "1961519",
    "end": "1966960"
  },
  {
    "start": "1966000",
    "end": "1966000"
  },
  {
    "text": "expressions and it also introduces a much larger cool thing or scary thing",
    "start": "1966960",
    "end": "1972960"
  },
  {
    "text": "depending on where you are called a feature preview or preview feature sorry",
    "start": "1972960",
    "end": "1979760"
  },
  {
    "text": "the way preview features work is these are additions to the language that",
    "start": "1979760",
    "end": "1984799"
  },
  {
    "text": "we're not sure are going to stick around so their warning warning if you use this",
    "start": "1984799",
    "end": "1992080"
  },
  {
    "text": "your code might not work on the same version and the next version might not even compile and to be able to run with them you have",
    "start": "1992080",
    "end": "1999039"
  },
  {
    "text": "to run with dash dash enable preview flat right so if you don't do this it'll say",
    "start": "1999039",
    "end": "2004320"
  },
  {
    "text": "no right one compile won't run so that keeps you honest you're using a preview",
    "start": "2004320",
    "end": "2010159"
  },
  {
    "text": "feature so you have to have the preview flag it's kind of like an experimental feature",
    "start": "2010159",
    "end": "2015600"
  },
  {
    "text": "right but it's useful to try new things and then see how they are and maybe you can change them",
    "start": "2015600",
    "end": "2022240"
  },
  {
    "text": "like maybe the spelling isn't exactly right so you change them over time and you're allowed to as long as it's previous stuff once you take out the",
    "start": "2022240",
    "end": "2028720"
  },
  {
    "text": "preview thing it's in the spec and it's going to stick around for a long time until somebody deprecates it and i i i don't think we've ever",
    "start": "2028720",
    "end": "2035440"
  },
  {
    "text": "deprecated anything from the language we've only deprecated apis and instead",
    "start": "2035440",
    "end": "2041279"
  },
  {
    "text": "of deprecating a language syntax would be terrible a big thing",
    "start": "2041279",
    "end": "2046720"
  },
  {
    "text": "okay so up to now switch constructs were statements and you guys hopefully all know all the",
    "start": "2046720",
    "end": "2052878"
  },
  {
    "text": "how to write switch statements i'll show you an example but they're kind of clunky they're the old c style switch statements and they look",
    "start": "2052879",
    "end": "2059200"
  },
  {
    "start": "2059000",
    "end": "2059000"
  },
  {
    "text": "like this right you have you have the different parts of the switch you have to remember to put a break everywhere because the default is",
    "start": "2059200",
    "end": "2065118"
  },
  {
    "text": "fall through and if all three is really useful like in the monday friday thing but if you miss one you get really",
    "start": "2065119",
    "end": "2071200"
  },
  {
    "text": "surprising behaviors right so you're going to either break or return somehow you had there's a default",
    "start": "2071200",
    "end": "2077040"
  },
  {
    "text": "if you don't remember to do the default you might actually be surprised at the outcome as well",
    "start": "2077040",
    "end": "2082079"
  },
  {
    "text": "anyway that's what a switch statement is a switch expression see that this is a string that is",
    "start": "2082079",
    "end": "2088960"
  },
  {
    "text": "setting num letters to something right and it's actually a common thing to see is a pattern so switch expression lets us write this",
    "start": "2088960",
    "end": "2096320"
  },
  {
    "start": "2095000",
    "end": "2095000"
  },
  {
    "text": "we want num letters to be this thing and it's a switch on the value that would be assigned to number letters",
    "start": "2096320",
    "end": "2102079"
  },
  {
    "text": "so it's a right-hand side statement or right-hand side expression at this point right and",
    "start": "2102079",
    "end": "2109760"
  },
  {
    "text": "nice succinct writing with lambda-like syntax and that kind of stuff right so this is a",
    "start": "2109760",
    "end": "2116560"
  },
  {
    "text": "nice clean trend translation of the previous one probably more readable more concise harder to get wrong",
    "start": "2116560",
    "end": "2124079"
  },
  {
    "text": "that kind of stuff do the annoying bugs because you know the missing break in the switch it's one of those annoying bugs that",
    "start": "2124079",
    "end": "2130400"
  },
  {
    "text": "when it happens you you think you don't do it but when you do it it'll take you two days to find it",
    "start": "2130400",
    "end": "2137280"
  },
  {
    "text": "it's like it's like the you know if like you had an if with two lines indented then you forgot the brackets that's why",
    "start": "2137599",
    "end": "2143760"
  },
  {
    "text": "i always put brackets on ifs because i've been burned and why i can't read",
    "start": "2143760",
    "end": "2149280"
  },
  {
    "start": "2149000",
    "end": "2149000"
  },
  {
    "text": "python",
    "start": "2149280",
    "end": "2151760"
  },
  {
    "text": "okay so the new style switch statement this is like a new old style so okay what if you want the old style but",
    "start": "2154720",
    "end": "2160480"
  },
  {
    "text": "you want a statement like an expression so you could do a break with a value and that becomes the",
    "start": "2160480",
    "end": "2166560"
  },
  {
    "text": "value that's assigned to the left-hand side okay so that's new syntax right",
    "start": "2166560",
    "end": "2172640"
  },
  {
    "text": "okay and then you can do even lot bigger things with code blocks and they look like this okay",
    "start": "2172640",
    "end": "2179040"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "so again lambda-like syntax where at the end of the block you have",
    "start": "2179040",
    "end": "2184079"
  },
  {
    "text": "your break with the value and that's effectively like the return value from the block right that becomes the left-hand side",
    "start": "2184079",
    "end": "2191440"
  },
  {
    "text": "assignment okay other japs shenandoah gc another experimental concurrent",
    "start": "2191440",
    "end": "2197040"
  },
  {
    "text": "compacting collector is now included in jdk 12. g1 has a bunch of nice updates that make",
    "start": "2197040",
    "end": "2204240"
  },
  {
    "text": "it better these are two under the hood things in the jdk remember no change to language",
    "start": "2204240",
    "end": "2209520"
  },
  {
    "text": "or specs jvm constant api and default cds archive cds",
    "start": "2209520",
    "end": "2215040"
  },
  {
    "text": "is a really cool feature actually i would highly recommend people look at cds in general",
    "start": "2215040",
    "end": "2220240"
  },
  {
    "text": "app cds and cds are very useful for startups making startups faster not paying all",
    "start": "2220240",
    "end": "2225680"
  },
  {
    "text": "that class load and verification time every time you start up and if you're starting to do you know",
    "start": "2225680",
    "end": "2231040"
  },
  {
    "text": "containers that come and go quickly and all that you could shave a good fraction of a second off your startup time by doing this",
    "start": "2231040",
    "end": "2238480"
  },
  {
    "start": "2238000",
    "end": "2238000"
  },
  {
    "text": "okay another thing is streams now have these teeing functions so you could you know do the the the",
    "start": "2238480",
    "end": "2245119"
  },
  {
    "text": "teeing and the and together um of of stuff into a by function",
    "start": "2245119",
    "end": "2253440"
  },
  {
    "text": "and and this actually is where you fall into interesting places remember those null streams we had before",
    "start": "2253440",
    "end": "2260320"
  },
  {
    "text": "so when you want a t thing sometimes you want a t and null i know it sounds weird but you have a t",
    "start": "2260320",
    "end": "2266160"
  },
  {
    "text": "and you need to provide stuff and you only have one well give it a null for the other one so this is where that null stream from before",
    "start": "2266160",
    "end": "2272160"
  },
  {
    "text": "becomes very useful um and",
    "start": "2272160",
    "end": "2278320"
  },
  {
    "text": "sorry and this is kind of the an example of using teeing to do",
    "start": "2278320",
    "end": "2284480"
  },
  {
    "text": "a very complicated way of deducing an average",
    "start": "2284480",
    "end": "2289520"
  },
  {
    "text": "but it is actually a way of deducing an average now if you only had this many numbers this seems like a complicated",
    "start": "2289520",
    "end": "2294960"
  },
  {
    "text": "way to deduce an average why would you write it this way if you had a million of them okay maybe not so much but remember that streams",
    "start": "2294960",
    "end": "2301920"
  },
  {
    "text": "can be parallel so this lets you do parallelized computation on an average and a",
    "start": "2301920",
    "end": "2308079"
  },
  {
    "text": "collection which is not something you want to write by hand right so you know when you're wondering",
    "start": "2308079",
    "end": "2314400"
  },
  {
    "text": "why write the complicated highly abstract way so this lets you parallelize it",
    "start": "2314400",
    "end": "2320480"
  },
  {
    "text": "okay jdk 13 we have this again why because all the",
    "start": "2320800",
    "end": "2328160"
  },
  {
    "start": "2324000",
    "end": "2324000"
  },
  {
    "text": "other languages do so this is very useful i mean",
    "start": "2328160",
    "end": "2333200"
  },
  {
    "text": "anybody who's ever written you know a bunch of text locks and all that and align them whether it's for html or",
    "start": "2333200",
    "end": "2338960"
  },
  {
    "text": "for the reasons this this i'm very happy to see this um so this is still being worked on what",
    "start": "2338960",
    "end": "2345200"
  },
  {
    "text": "the final spelling here is like is this exactly right is indentation quite real but but it looks like this is highly",
    "start": "2345200",
    "end": "2352560"
  },
  {
    "text": "useful as it is i think and note that the indentation is deduced right so",
    "start": "2352560",
    "end": "2358320"
  },
  {
    "text": "basically that's what you have there is the output of that which is the intuitive good",
    "start": "2358320",
    "end": "2364480"
  },
  {
    "text": "interpretation right so like what the offsets are based on where you start them and all that",
    "start": "2364480",
    "end": "2370480"
  },
  {
    "text": "uh i have heard interesting kind of corner cases where people have found that maybe you want to change the way it's specified but",
    "start": "2370480",
    "end": "2377520"
  },
  {
    "text": "it's it's in there you can play with it yeah and it probably evolves slightly",
    "start": "2377520",
    "end": "2383839"
  },
  {
    "text": "switch expressions remember we talked about this remember i warned you what a preview",
    "start": "2384079",
    "end": "2389760"
  },
  {
    "text": "feature is well switch expressions written like this from java 12 no longer work in java",
    "start": "2389760",
    "end": "2395440"
  },
  {
    "text": "13 because that break has changed to yield",
    "start": "2395440",
    "end": "2403760"
  },
  {
    "text": "it was put out there people gave feedback it was confusing to see a break with a",
    "start": "2404960",
    "end": "2410160"
  },
  {
    "text": "number or whatever other reason i don't really know and whatever drove that now the syntax",
    "start": "2410160",
    "end": "2415520"
  },
  {
    "text": "is different break with a number no longer works that was an experiment oops nope take it back thank you for playing",
    "start": "2415520",
    "end": "2424560"
  },
  {
    "text": "and it's evolved so this is the new way to write yielding values but this stuff's still",
    "start": "2424560",
    "end": "2430640"
  },
  {
    "text": "spelled the same way okay so this simple straightforward one",
    "start": "2430640",
    "end": "2435680"
  },
  {
    "text": "is stuck around but the way you spell the weird ones is changing when this stops being a",
    "start": "2435680",
    "end": "2441440"
  },
  {
    "text": "preview it'll be when okay that's really the syntax okay but you just learned the lesson about",
    "start": "2441440",
    "end": "2447839"
  },
  {
    "text": "what preview really is because it changes i half think that they did that on purpose",
    "start": "2447839",
    "end": "2453839"
  },
  {
    "text": "because you know it's one thing to say hey we'll do this but we could change it but doing it and changing it six months",
    "start": "2453839",
    "end": "2458880"
  },
  {
    "text": "later that wakes people up right so now you know how to really treat it",
    "start": "2458880",
    "end": "2464640"
  },
  {
    "text": "it doesn't require deprecation or warning it was previewed to begin with okay selected other japs switch across",
    "start": "2464640",
    "end": "2470240"
  },
  {
    "text": "its we talked about text blocks we talked about dynamic cds archives even cooler cts",
    "start": "2470240",
    "end": "2476400"
  },
  {
    "text": "um cgc has new um uncommits which basically means it can",
    "start": "2476400",
    "end": "2481920"
  },
  {
    "text": "go elastic up and down it could reduce the heap not just grow it over time which seems to be interesting",
    "start": "2481920",
    "end": "2488160"
  },
  {
    "text": "in in some environments where you have a lot of you know idle things sitting around",
    "start": "2488160",
    "end": "2494400"
  },
  {
    "text": "and then the legacy socket api has been re-implemented pretty dramatically under the hood",
    "start": "2494400",
    "end": "2500400"
  },
  {
    "text": "hopefully with both performance but also some robustness around corners that have been",
    "start": "2500400",
    "end": "2505440"
  },
  {
    "text": "hurting people over time okay so that was 13.",
    "start": "2505440",
    "end": "2510480"
  },
  {
    "text": "so i went through a bunch of features we're doing okay on time great",
    "start": "2510480",
    "end": "2515680"
  },
  {
    "text": "now i want to go from the features to what does it really mean to use them you guys are all still on eight i give you a",
    "start": "2515680",
    "end": "2522400"
  },
  {
    "text": "map of what might be fun here but how do you go forward and how do you go forward beyond this",
    "start": "2522400",
    "end": "2527680"
  },
  {
    "text": "um so opengdk is great opengk is where all the source",
    "start": "2527680",
    "end": "2533359"
  },
  {
    "start": "2528000",
    "end": "2528000"
  },
  {
    "text": "code for the jdk is developed it's in the open a lot of contribution a lot of collaboration oracle certainly leads this with tons of",
    "start": "2533359",
    "end": "2540319"
  },
  {
    "text": "tons of effort and we are seeing a lot of great community contribution and offers from there",
    "start": "2540319",
    "end": "2545920"
  },
  {
    "text": "you need to remember that opengdk is a source code project the thing openg produces is source code none of you run",
    "start": "2545920",
    "end": "2552880"
  },
  {
    "text": "anything that's produced by opengdk directly right",
    "start": "2552880",
    "end": "2558160"
  },
  {
    "text": "every binary you have your hands on is a distro of opengdk think linux kernel linux distro okay",
    "start": "2558160",
    "end": "2566160"
  },
  {
    "text": "somebody put those together unless you're doing it yourself the way you like i think i know one one",
    "start": "2566160",
    "end": "2572880"
  },
  {
    "text": "one of you does uh then you know that's your own distro then you have a distro and it comes from",
    "start": "2572880",
    "end": "2578240"
  },
  {
    "text": "somewhere and there are many many of them out there and some of them are well built and tested quite a few",
    "start": "2578240",
    "end": "2584160"
  },
  {
    "text": "but some of them not so much and if you want an actual concrete example",
    "start": "2584160",
    "end": "2591040"
  },
  {
    "text": "uh this is a posting i wrote a few months ago on the jdk mailing list you're welcome to google and find a very",
    "start": "2591040",
    "end": "2597920"
  },
  {
    "text": "very contentious discussion where i think i think the debian community really really hates me by now",
    "start": "2597920",
    "end": "2604000"
  },
  {
    "text": "hi debian community um but fundamentally somewhere around",
    "start": "2604000",
    "end": "2611040"
  },
  {
    "text": "somewhere between april and may of this year um about 10 million people ran a jdk",
    "start": "2611040",
    "end": "2617599"
  },
  {
    "text": "that said it's updated and it had security bugs in it that were fixed in the release it said",
    "start": "2617599",
    "end": "2622800"
  },
  {
    "text": "it was but weren't in the build that happened docker run",
    "start": "2622800",
    "end": "2628880"
  },
  {
    "text": "java 8 did that how many of you run docker java 8",
    "start": "2628880",
    "end": "2636480"
  },
  {
    "text": "okay you you did that from april to end of may",
    "start": "2636560",
    "end": "2642000"
  },
  {
    "text": "there was a cve 9 and a cv's cvss 9 is two cvss 8.1 fixes in that release there",
    "start": "2642000",
    "end": "2648720"
  },
  {
    "text": "were high severity and critical severity and they were not in the code even though the code said it had it had the",
    "start": "2648720",
    "end": "2654319"
  },
  {
    "text": "version that was that matched openg thing that is a bad build of opengdk",
    "start": "2654319",
    "end": "2661440"
  },
  {
    "text": "now we had contentious debates i think those people will do it right next time",
    "start": "2661440",
    "end": "2666880"
  },
  {
    "text": "but what it means is there are lots of options it's up to you to choose which one here's a bunch examples",
    "start": "2666880",
    "end": "2674880"
  },
  {
    "text": "and there's others i didn't list here and it's up to you you guys have a choice right look around check reputations",
    "start": "2674880",
    "end": "2681680"
  },
  {
    "text": "check history make sure that it's a good one um and there are various good ones including",
    "start": "2681680",
    "end": "2688000"
  },
  {
    "text": "most most all these are free right it's just witch-free right and then they're commercial ones",
    "start": "2688000",
    "end": "2693200"
  },
  {
    "text": "obviously oracle will have one ibm will have one azul has commercial stuff as well you can choose",
    "start": "2693200",
    "end": "2698960"
  },
  {
    "text": "uh so plenty of plenty of choice so since you have plenty of chase let me talk about one of the choices which is zulu zulu",
    "start": "2698960",
    "end": "2707440"
  },
  {
    "text": "has many forms the main form of it is a free 100 free 100 open source community",
    "start": "2707440",
    "end": "2714000"
  },
  {
    "text": "distribution of open sdk it's probably the longest widest standing or distribution of opengdk",
    "start": "2714000",
    "end": "2719920"
  },
  {
    "text": "we've got everything from six which we no longer update because old but you can find zulu 6",
    "start": "2719920",
    "end": "2727280"
  },
  {
    "text": "7 8 9 10 11 12 13 and soon 14 ea we have every version of every one of",
    "start": "2727280",
    "end": "2733520"
  },
  {
    "text": "those built tested dcked on a cdn for the last six years that's",
    "start": "2733520",
    "end": "2738720"
  },
  {
    "text": "what zulu is and it's free go use it right now it is a curated distribution",
    "start": "2738720",
    "end": "2745200"
  },
  {
    "text": "virtually every distribution is curated okay we take the pieces and all those and think of it as we take all of opengk",
    "start": "2745200",
    "end": "2751839"
  },
  {
    "text": "as it is and then we do things like support different bitness",
    "start": "2751839",
    "end": "2757599"
  },
  {
    "text": "that might or not might not be supported by like java 11 on 32-bit",
    "start": "2757599",
    "end": "2762960"
  },
  {
    "text": "and doing arm 64 and 32-bit stuff like that but also some features that are not",
    "start": "2762960",
    "end": "2768640"
  },
  {
    "text": "modifying the platform in any real way but have been convenient so for example who here has played with java flight",
    "start": "2768640",
    "end": "2774319"
  },
  {
    "text": "recorder a few of you who here have played with java flight recorder and java 8 in",
    "start": "2774319",
    "end": "2780160"
  },
  {
    "text": "production good who here have done that on the",
    "start": "2780160",
    "end": "2785280"
  },
  {
    "text": "non-oracle jdk why because java jfr",
    "start": "2785280",
    "end": "2791760"
  },
  {
    "text": "only was open sourced in java 11. zulu8 includes gfr we back ported",
    "start": "2791760",
    "end": "2798560"
  },
  {
    "text": "java 11 j42 zulu8 there's an open gk8 with a free jfr in it for those of you who like that now you",
    "start": "2798560",
    "end": "2805119"
  },
  {
    "text": "have it for free okay you have it for free and 11 from everybody it is open source part of 11",
    "start": "2805119",
    "end": "2810560"
  },
  {
    "text": "but we backported it too because hey a lot of people still use eight similarly we provide a",
    "start": "2810560",
    "end": "2816000"
  },
  {
    "text": "tls 1.3 support in 08 with a flag you turn a flag that says enable open",
    "start": "2816000",
    "end": "2821680"
  },
  {
    "text": "jssc and you get it back port of the tls from java 11 available in java 8 because",
    "start": "2821680",
    "end": "2827839"
  },
  {
    "text": "if all you wanted is tls 1.3 and you still have a pain going through the other stuff do this for now",
    "start": "2827839",
    "end": "2833839"
  },
  {
    "text": "i don't want you to not move to 11 please do move to 11 but for the things that have a hard time",
    "start": "2833839",
    "end": "2839119"
  },
  {
    "text": "this curated this draw actually lets you do that and it's there we also do a whole bunch",
    "start": "2839119",
    "end": "2844160"
  },
  {
    "text": "of different builds we actually build over 800 different things every quarter because of all these combos",
    "start": "2844160",
    "end": "2850000"
  },
  {
    "text": "so we have a jdk and we've jerry but we also have a grea with javafx in it opengfx who here uses",
    "start": "2850000",
    "end": "2856839"
  },
  {
    "text": "opengfx who here thinks they might actually be",
    "start": "2856839",
    "end": "2862160"
  },
  {
    "text": "dependent on opengfx there so here's an interesting story for",
    "start": "2862160",
    "end": "2867520"
  },
  {
    "text": "you the reason we have openjfx jdk plus open gfx in",
    "start": "2867520",
    "end": "2873040"
  },
  {
    "text": "is because the oracle java 8 has that and it turns out that because it was",
    "start": "2873040",
    "end": "2879119"
  },
  {
    "text": "there and ids could see it there's some classes in it that people end up using not thinking that they're",
    "start": "2879119",
    "end": "2884400"
  },
  {
    "text": "java effects because they were just in the jdk you know what the most popular class is the 80 case for people asking us for jfx",
    "start": "2884400",
    "end": "2892559"
  },
  {
    "text": "there's a pair class it's 50 lines of code it's a tuple but the jdk does not have a pair class",
    "start": "2892559",
    "end": "2899520"
  },
  {
    "text": "openjfx does so the most commonly used pair class in the java world",
    "start": "2899520",
    "end": "2905280"
  },
  {
    "text": "is the javafx one now there's 50 other ones you can find on the internet but you're using that one",
    "start": "2905280",
    "end": "2912000"
  },
  {
    "text": "so we put an entire open gfx in the jdk just so your code will work for one class",
    "start": "2912000",
    "end": "2919119"
  },
  {
    "text": "yeah i mean i gotta say i'm pretty upset about that one but hey",
    "start": "2919920",
    "end": "2925040"
  },
  {
    "text": "it's it's one of those we thought of just packaging the thing and putting one class in it",
    "start": "2925200",
    "end": "2930800"
  },
  {
    "text": "because it's fat but hey it the good news about this is it means there is a way to say oh the damn thing doesn't",
    "start": "2930800",
    "end": "2936880"
  },
  {
    "text": "work i don't have to change the code go get a distro that has the thing that's as compatible as possible and the curated distro in this case is we're",
    "start": "2936880",
    "end": "2943200"
  },
  {
    "text": "trying to make it as close as possible to move oracle 8 to open gk8 without having to change your code",
    "start": "2943200",
    "end": "2949520"
  },
  {
    "text": "okay now on to the next part mts midterm support is a concept that we",
    "start": "2949520",
    "end": "2957920"
  },
  {
    "text": "are that we've created we initially had it only on the commercial side and we basically announced that this is now",
    "start": "2957920",
    "end": "2964160"
  },
  {
    "text": "available for free for community for java 13. let me explain what mts is and why it's",
    "start": "2964160",
    "end": "2969599"
  },
  {
    "start": "2968000",
    "end": "2968000"
  },
  {
    "text": "needed we're by the way we are the last talk of the day i believe so i'm going to intentionally run about five minutes",
    "start": "2969599",
    "end": "2976079"
  },
  {
    "text": "over if you guys are angry at that well here's the door but you know",
    "start": "2976079",
    "end": "2981920"
  },
  {
    "text": "so why do we need this mts stuff jdk versions need overlaps i'm sorry",
    "start": "2981920",
    "end": "2988880"
  },
  {
    "text": "for in order to actually be able to use it in production and and here's the function an actual factual reason why there are a",
    "start": "2988880",
    "end": "2995040"
  },
  {
    "text": "lot of postga bugs that happen thank you to all you guys that have done java 11 early because you're making it",
    "start": "2995040",
    "end": "3000480"
  },
  {
    "text": "better for the rest of the people but in java 8 there were this many bugs",
    "start": "3000480",
    "end": "3005520"
  },
  {
    "text": "fixed after ga in the first 17 months more importantly in the six months",
    "start": "3005520",
    "end": "3011280"
  },
  {
    "text": "in the 12 months after the first six months remember all these things stop after six months",
    "start": "3011280",
    "end": "3016559"
  },
  {
    "text": "and six months after there were 1200 bugs fixed in java 8. they don't stop coming they start coming",
    "start": "3016559",
    "end": "3022000"
  },
  {
    "text": "when you start using stuff and we're just now seeing the real adoption of 11 right",
    "start": "3022000",
    "end": "3027520"
  },
  {
    "text": "so production use remains on some previous version and we need updates bug fixes security fixes for",
    "start": "3027520",
    "end": "3033040"
  },
  {
    "text": "what we're running in production so we need them to happen at the same time we need overlap this is what overlap used to",
    "start": "3033040",
    "end": "3039680"
  },
  {
    "start": "3039000",
    "end": "3039000"
  },
  {
    "text": "look like okay we used to have years of overlap when javas you know between java five",
    "start": "3039680",
    "end": "3046000"
  },
  {
    "text": "and six and six and seven and seven and eight and then eight to eleven we went down to",
    "start": "3046000",
    "end": "3052240"
  },
  {
    "text": "four months but now we're at zero when java 13 o2 comes out in january",
    "start": "3052240",
    "end": "3060559"
  },
  {
    "text": "that will be the last java 13 under current plans and if you use it then the next thing to",
    "start": "3060559",
    "end": "3067359"
  },
  {
    "text": "move to is java 14.0 or 1401 the first one will be a day old",
    "start": "3067359",
    "end": "3073839"
  },
  {
    "text": "the next one will be three weeks old and if you're stuck with something that",
    "start": "3073839",
    "end": "3079920"
  },
  {
    "text": "doesn't work on one works another but this one's unstable you're in a corner that's really hard to get out of",
    "start": "3079920",
    "end": "3084960"
  },
  {
    "text": "and good luck convincing your production people to let you run that which is why we think most people under",
    "start": "3084960",
    "end": "3090800"
  },
  {
    "text": "the current plan will end up playing and waiting and really liking that switch statement",
    "start": "3090800",
    "end": "3096720"
  },
  {
    "text": "but you can't you can code to it on your laptop but don't put any real code unless you plan to deploy in 17 and",
    "start": "3096720",
    "end": "3103119"
  },
  {
    "text": "probably a year into 17 after it's solid because look at how many p how long it's taken people to kill 11.",
    "start": "3103119",
    "end": "3110240"
  },
  {
    "text": "we want to fix that and the way to fix that is with what we call midterm support",
    "start": "3110240",
    "end": "3115359"
  },
  {
    "start": "3114000",
    "end": "3114000"
  },
  {
    "text": "releases midterm support releases under our plan",
    "start": "3115359",
    "end": "3120559"
  },
  {
    "text": "for community and java 13 is the first midterm support release we're going to do with zulu",
    "start": "3120559",
    "end": "3126640"
  },
  {
    "text": "allow you to keep running will have updates not for eight years but for 18 months",
    "start": "3126640",
    "end": "3133920"
  },
  {
    "text": "after the next lts comes out they will have enough overlap for a soft landing into an lts that'll last for",
    "start": "3133920",
    "end": "3140800"
  },
  {
    "text": "years so you can code to java 13 today knowing that there's a free way to",
    "start": "3140800",
    "end": "3146960"
  },
  {
    "text": "deploy it and run it in production until there is a stable java 17 you can",
    "start": "3146960",
    "end": "3152079"
  },
  {
    "text": "move to that's the entire purpose of mts and we've we've talked to people on and",
    "start": "3152079",
    "end": "3159200"
  },
  {
    "text": "off about the need we've gotten a lot of customer input for the need basically saying we can't use this stuff unless we",
    "start": "3159200",
    "end": "3164240"
  },
  {
    "text": "have a path forward and i think in the last month we've announced that we're just going to do",
    "start": "3164240",
    "end": "3169520"
  },
  {
    "text": "this for the community we're hoping to do this as part of opengdk 13 updates in the opengk project",
    "start": "3169520",
    "end": "3176079"
  },
  {
    "text": "but regardless of whether the community does this together or not azul is doing it because we're doing it",
    "start": "3176079",
    "end": "3181839"
  },
  {
    "text": "anyway we've got contractual commitments to do it to customers so may as well do it as a free community",
    "start": "3181839",
    "end": "3186880"
  },
  {
    "text": "thing as well so that's the interesting news about java going forward java 13",
    "start": "3186880",
    "end": "3193760"
  },
  {
    "text": "is something you can use forever don't do those feature preview things be",
    "start": "3193760",
    "end": "3198960"
  },
  {
    "text": "careful but you know but you can use it and you can write it",
    "start": "3198960",
    "end": "3204319"
  },
  {
    "text": "into an overlap you can move to java 17 if that's the step you want to take we will",
    "start": "3204319",
    "end": "3209599"
  },
  {
    "text": "do the same for java 15. and notice how java 15's length is shorter than 13",
    "start": "3209599",
    "end": "3215520"
  },
  {
    "text": "because its goal is 18 month overlap with an lts so that's out there hopefully you guys",
    "start": "3215520",
    "end": "3221680"
  },
  {
    "text": "will get to use it and you know hopefully that makes you like zulu zulu enterprise is basically the classic",
    "start": "3221680",
    "end": "3229680"
  },
  {
    "start": "3226000",
    "end": "3226000"
  },
  {
    "text": "here's the free cool thing i told you what it is here's some commercial good support for it if you want to pay for",
    "start": "3229680",
    "end": "3235280"
  },
  {
    "text": "that kind of stuff and you like us we do releases both mts and lts's we do them fit for long-term production",
    "start": "3235280",
    "end": "3242319"
  },
  {
    "text": "use we take care of things like separate security online updates and separate bug fixes that are not security so if",
    "start": "3242319",
    "end": "3248960"
  },
  {
    "text": "there's an urgent security thing you can deploy a security only update and not have to take the 130 other goodies with",
    "start": "3248960",
    "end": "3254960"
  },
  {
    "text": "it we have all the numerification on contamination and we're very widely used across multiple",
    "start": "3254960",
    "end": "3260160"
  },
  {
    "text": "industries here's a few samples just to give you a power view of that it's not a tiny thing",
    "start": "3260160",
    "end": "3265599"
  },
  {
    "text": "lots of people run this run their businesses on it this runs on it all of this runs on it",
    "start": "3265599",
    "end": "3274640"
  },
  {
    "text": "both internally and all customers and for 7 8 11 and 13 this also runs on it",
    "start": "3274640",
    "end": "3282079"
  },
  {
    "text": "okay so very often the silent choice under the hood that you don't even notice is using it",
    "start": "3282079",
    "end": "3287599"
  },
  {
    "text": "for example who here has been playing with github actions new cicd thing on github it's in beta",
    "start": "3287599",
    "end": "3294799"
  },
  {
    "text": "but coming out in the next few years is not beta take a look at it but it defaults to you zulu as the jdk so all the tests are",
    "start": "3294799",
    "end": "3301280"
  },
  {
    "text": "done on zulu okay we do all these versions we'll do the next ones we'll do 24x7 support etc",
    "start": "3301280",
    "end": "3309359"
  },
  {
    "text": "and for summary you know java is in good shape it's been moving and we've had eight",
    "start": "3309359",
    "end": "3316799"
  },
  {
    "text": "nine and ten and eleven twelve thirteen fourteen one right and we have the concept of lts and",
    "start": "3316799",
    "end": "3322880"
  },
  {
    "text": "it sits here and there and there but now we have this new concept of an mts",
    "start": "3322880",
    "end": "3328640"
  },
  {
    "text": "and that's what java after eight looks like okay well thank you everybody",
    "start": "3328640",
    "end": "3338318"
  }
]