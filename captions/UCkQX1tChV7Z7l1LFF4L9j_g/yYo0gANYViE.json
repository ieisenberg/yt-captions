[
  {
    "start": "0",
    "end": "59000"
  },
  {
    "text": "my name is Seth and I work at",
    "start": "18580",
    "end": "21790"
  },
  {
    "text": "Northwestern University in Chicago",
    "start": "21790",
    "end": "23369"
  },
  {
    "text": "although I actually live here in",
    "start": "23369",
    "end": "26080"
  },
  {
    "text": "Cambridge so I worked for them remotely",
    "start": "26080",
    "end": "30279"
  },
  {
    "text": "I've been programming in Scala full-time",
    "start": "30279",
    "end": "33309"
  },
  {
    "text": "since since 2008 I'll be talking today",
    "start": "33309",
    "end": "38260"
  },
  {
    "text": "about the about the type class pattern",
    "start": "38260",
    "end": "40960"
  },
  {
    "text": "and my hope is that this should be at",
    "start": "40960",
    "end": "43930"
  },
  {
    "text": "least reasonably accessible even if",
    "start": "43930",
    "end": "46180"
  },
  {
    "text": "you're relatively new to Scala so feel",
    "start": "46180",
    "end": "50440"
  },
  {
    "text": "free to interrupt even even with what",
    "start": "50440",
    "end": "52149"
  },
  {
    "text": "might seem like fairly basic questions",
    "start": "52149",
    "end": "54070"
  },
  {
    "text": "about code and so forth I'm gonna start",
    "start": "54070",
    "end": "59890"
  },
  {
    "start": "59000",
    "end": "59000"
  },
  {
    "text": "by explaining the the con some concepts",
    "start": "59890",
    "end": "63309"
  },
  {
    "text": "that are relevant to type classes then",
    "start": "63309",
    "end": "65830"
  },
  {
    "text": "I'm gonna go through an extended example",
    "start": "65830",
    "end": "68170"
  },
  {
    "text": "with actual code where we'll we'll be",
    "start": "68170",
    "end": "70750"
  },
  {
    "text": "applying type classes to a problem of",
    "start": "70750",
    "end": "74080"
  },
  {
    "text": "serialization and then I'll close just",
    "start": "74080",
    "end": "78250"
  },
  {
    "text": "talking about you know what's good about",
    "start": "78250",
    "end": "80050"
  },
  {
    "text": "what we just saw and some some cautions",
    "start": "80050",
    "end": "82509"
  },
  {
    "text": "or downsides now so this is the the",
    "start": "82509",
    "end": "89259"
  },
  {
    "text": "scala symposium why are we as scholar",
    "start": "89259",
    "end": "92229"
  },
  {
    "text": "programmers in particular why would we",
    "start": "92229",
    "end": "94660"
  },
  {
    "text": "be interested in type classes this is a",
    "start": "94660",
    "end": "100000"
  },
  {
    "text": "word that doesn't necessarily come up",
    "start": "100000",
    "end": "102399"
  },
  {
    "text": "when you first learn the language the",
    "start": "102399",
    "end": "104880"
  },
  {
    "text": "standard scala book by oder street",
    "start": "104880",
    "end": "107709"
  },
  {
    "text": "vendors and spoon the",
    "start": "107709",
    "end": "108670"
  },
  {
    "text": "word type class isn't even in the index",
    "start": "108670",
    "end": "111190"
  },
  {
    "text": "or or in the glossary but my my own",
    "start": "111190",
    "end": "117099"
  },
  {
    "text": "sense is that particularly in the last",
    "start": "117099",
    "end": "119440"
  },
  {
    "text": "in the last couple of years that this is",
    "start": "119440",
    "end": "122020"
  },
  {
    "text": "becoming a more and more common word",
    "start": "122020",
    "end": "123759"
  },
  {
    "text": "that comes up in discourse around scala",
    "start": "123759",
    "end": "126880"
  },
  {
    "text": "so this is something that you will",
    "start": "126880",
    "end": "129160"
  },
  {
    "text": "probably want to know about in order to",
    "start": "129160",
    "end": "130959"
  },
  {
    "text": "follow mailing list and Twitter and some",
    "start": "130959",
    "end": "133989"
  },
  {
    "text": "of the other talks today that that will",
    "start": "133989",
    "end": "136510"
  },
  {
    "text": "that will touch on this the like big",
    "start": "136510",
    "end": "140380"
  },
  {
    "text": "software engineering concerns on that",
    "start": "140380",
    "end": "144040"
  },
  {
    "text": "this is about that aren't particular to",
    "start": "144040",
    "end": "146950"
  },
  {
    "text": "Scala our polymorphous",
    "start": "146950",
    "end": "150700"
  },
  {
    "text": "and decoupling so I'll define different",
    "start": "150700",
    "end": "155920"
  },
  {
    "text": "kinds of polymorphism in a moment but to",
    "start": "155920",
    "end": "159690"
  },
  {
    "text": "kind of sketch it broadly we are at the",
    "start": "159690",
    "end": "164860"
  },
  {
    "text": "same time we're trying to build our",
    "start": "164860",
    "end": "166870"
  },
  {
    "text": "programs up we're adding new types of",
    "start": "166870",
    "end": "169120"
  },
  {
    "text": "data we're adding new operations we want",
    "start": "169120",
    "end": "171970"
  },
  {
    "text": "those operations to work on these new",
    "start": "171970",
    "end": "174459"
  },
  {
    "text": "kinds of values that we're adding so",
    "start": "174459",
    "end": "177090"
  },
  {
    "text": "we're kind of piling on our programs are",
    "start": "177090",
    "end": "180610"
  },
  {
    "text": "getting are getting bigger and more",
    "start": "180610",
    "end": "182620"
  },
  {
    "text": "complex so at the same time we're trying",
    "start": "182620",
    "end": "186850"
  },
  {
    "text": "to like tear it back down to tease it",
    "start": "186850",
    "end": "188709"
  },
  {
    "text": "apart and to keep our programs as being",
    "start": "188709",
    "end": "194319"
  },
  {
    "text": "built from small independent pieces that",
    "start": "194319",
    "end": "198519"
  },
  {
    "text": "can be independently understood and",
    "start": "198519",
    "end": "201430"
  },
  {
    "text": "independently tested and so forth so",
    "start": "201430",
    "end": "203440"
  },
  {
    "text": "that's that that's decoupling",
    "start": "203440",
    "end": "207900"
  },
  {
    "text": "the term polymorphism refers to when you",
    "start": "212300",
    "end": "217860"
  },
  {
    "text": "can use the same operation and have it",
    "start": "217860",
    "end": "221310"
  },
  {
    "text": "work on different types and there's an",
    "start": "221310",
    "end": "226290"
  },
  {
    "text": "there's an old distinction dating back",
    "start": "226290",
    "end": "229260"
  },
  {
    "text": "to the 60s between parametric and ad hoc",
    "start": "229260",
    "end": "232710"
  },
  {
    "text": "polymorphism parametric with parametric",
    "start": "232710",
    "end": "238050"
  },
  {
    "text": "polymorphism the operation works on",
    "start": "238050",
    "end": "241170"
  },
  {
    "text": "different types but it ignores the",
    "start": "241170",
    "end": "243480"
  },
  {
    "text": "difference between the types so for",
    "start": "243480",
    "end": "247380"
  },
  {
    "text": "example like taking the length of a list",
    "start": "247380",
    "end": "250080"
  },
  {
    "text": "that you want a length operation that",
    "start": "250080",
    "end": "252720"
  },
  {
    "text": "works regardless of whether it's a list",
    "start": "252720",
    "end": "255209"
  },
  {
    "text": "of int or a list of string or whatever",
    "start": "255209",
    "end": "256920"
  },
  {
    "text": "the difference doesn't matter",
    "start": "256920",
    "end": "258720"
  },
  {
    "text": "that's parametric polymorphism type",
    "start": "258720",
    "end": "261989"
  },
  {
    "text": "classes address the problem of ad hoc",
    "start": "261989",
    "end": "264240"
  },
  {
    "text": "polymorphism where you want the",
    "start": "264240",
    "end": "266060"
  },
  {
    "text": "operation to do something or potentially",
    "start": "266060",
    "end": "268950"
  },
  {
    "text": "do something different for the different",
    "start": "268950",
    "end": "272310"
  },
  {
    "text": "types of values that it accepts",
    "start": "272310",
    "end": "277490"
  },
  {
    "start": "279000",
    "end": "279000"
  },
  {
    "text": "type classes originated in the Haskell",
    "start": "282990",
    "end": "287050"
  },
  {
    "text": "language they were included in the the",
    "start": "287050",
    "end": "290110"
  },
  {
    "text": "first national standard in 1990 Haskell",
    "start": "290110",
    "end": "295240"
  },
  {
    "text": "as a language was the the goal was to",
    "start": "295240",
    "end": "298479"
  },
  {
    "text": "unify work that had been done previously",
    "start": "298479",
    "end": "301320"
  },
  {
    "text": "in functional programming language",
    "start": "301320",
    "end": "304150"
  },
  {
    "text": "design in languages like Miranda and",
    "start": "304150",
    "end": "306310"
  },
  {
    "text": "standard ml and kind of unify them into",
    "start": "306310",
    "end": "309130"
  },
  {
    "text": "a single language that the functional",
    "start": "309130",
    "end": "311440"
  },
  {
    "text": "programming community could kind of",
    "start": "311440",
    "end": "312729"
  },
  {
    "text": "unite behind so it mainly synthesized",
    "start": "312729",
    "end": "316620"
  },
  {
    "text": "previous stuff but it did break some new",
    "start": "316620",
    "end": "320050"
  },
  {
    "text": "ground and type classes in particular",
    "start": "320050",
    "end": "322560"
  },
  {
    "text": "have been called the principle",
    "start": "322560",
    "end": "326169"
  },
  {
    "text": "innovation that happened in Haskell if",
    "start": "326169",
    "end": "330130"
  },
  {
    "text": "you want to investigate the history more",
    "start": "330130",
    "end": "332229"
  },
  {
    "text": "this paper from 1989 by wobbler and blot",
    "start": "332229",
    "end": "335160"
  },
  {
    "text": "is is the the first the first real",
    "start": "335160",
    "end": "339130"
  },
  {
    "text": "write-up of it and we see them referring",
    "start": "339130",
    "end": "343270"
  },
  {
    "text": "to ad hoc polymorphism in the title now",
    "start": "343270",
    "end": "351340"
  },
  {
    "text": "type classes come to us from Haskell",
    "start": "351340",
    "end": "353650"
  },
  {
    "text": "Haskell as a functional programming",
    "start": "353650",
    "end": "355389"
  },
  {
    "text": "language is this a talk about functional",
    "start": "355389",
    "end": "358750"
  },
  {
    "text": "programming yes and no or actually",
    "start": "358750",
    "end": "362530"
  },
  {
    "text": "really more no because when we when we",
    "start": "362530",
    "end": "367539"
  },
  {
    "text": "talked about functional programming",
    "start": "367539",
    "end": "369450"
  },
  {
    "text": "we're thinking about you know that the",
    "start": "369450",
    "end": "372340"
  },
  {
    "text": "issues are immutability we are using",
    "start": "372340",
    "end": "376479"
  },
  {
    "text": "functions as values and in pure",
    "start": "376479",
    "end": "380560"
  },
  {
    "text": "functional programming we are coding",
    "start": "380560",
    "end": "383169"
  },
  {
    "text": "without side effects those are the big",
    "start": "383169",
    "end": "386110"
  },
  {
    "text": "issues in FP type classes don't really",
    "start": "386110",
    "end": "388750"
  },
  {
    "text": "touch on any of those issues not in any",
    "start": "388750",
    "end": "393820"
  },
  {
    "text": "major way the the issues instead as I",
    "start": "393820",
    "end": "396910"
  },
  {
    "text": "said are decoupling and and polymorphism",
    "start": "396910",
    "end": "402000"
  },
  {
    "text": "now nonetheless there is some overlap",
    "start": "402000",
    "end": "405370"
  },
  {
    "text": "with functional programming this is",
    "start": "405370",
    "end": "408699"
  },
  {
    "text": "important if you want to get more deeply",
    "start": "408699",
    "end": "411729"
  },
  {
    "text": "into functional programming",
    "start": "411729",
    "end": "414659"
  },
  {
    "text": "for example in the Scala Z library which",
    "start": "414730",
    "end": "418150"
  },
  {
    "text": "is the the library that people doing",
    "start": "418150",
    "end": "420840"
  },
  {
    "text": "pure functional programming in Scala use",
    "start": "420840",
    "end": "423280"
  },
  {
    "text": "um almost everything in Scala Z is a",
    "start": "423280",
    "end": "426520"
  },
  {
    "text": "type class ma nodes monads applicative",
    "start": "426520",
    "end": "430960"
  },
  {
    "text": "functors these are all these are all",
    "start": "430960",
    "end": "433060"
  },
  {
    "text": "defined as as type classes and scholar Z",
    "start": "433060",
    "end": "435760"
  },
  {
    "text": "so though i'm not really going to talk",
    "start": "435760",
    "end": "437290"
  },
  {
    "text": "about that but this is kind of",
    "start": "437290",
    "end": "439150"
  },
  {
    "text": "foundational material if if you were to",
    "start": "439150",
    "end": "443580"
  },
  {
    "text": "investigate that a brief note on",
    "start": "443880",
    "end": "449640"
  },
  {
    "text": "terminology in Haskell type classes two",
    "start": "449640",
    "end": "453460"
  },
  {
    "text": "words so hostel doesn't have any other",
    "start": "453460",
    "end": "456250"
  },
  {
    "text": "kind of class it's not an",
    "start": "456250",
    "end": "458380"
  },
  {
    "text": "object-oriented language so there's no",
    "start": "458380",
    "end": "460750"
  },
  {
    "text": "there's no confusion between on the word",
    "start": "460750",
    "end": "463990"
  },
  {
    "text": "class or on the word instance in the",
    "start": "463990",
    "end": "466330"
  },
  {
    "text": "hostel we also have instances of type",
    "start": "466330",
    "end": "467950"
  },
  {
    "text": "classes in Scala which is which is which",
    "start": "467950",
    "end": "471130"
  },
  {
    "text": "is object-oriented we already have",
    "start": "471130",
    "end": "472870"
  },
  {
    "text": "things called classes and instances",
    "start": "472870",
    "end": "474640"
  },
  {
    "text": "there's a danger of confusion a type",
    "start": "474640",
    "end": "477610"
  },
  {
    "text": "class is not a class so Scala people",
    "start": "477610",
    "end": "482530"
  },
  {
    "text": "usually write it as one word to help to",
    "start": "482530",
    "end": "484780"
  },
  {
    "text": "help emphasize that and in Haskell this",
    "start": "484780",
    "end": "490780"
  },
  {
    "text": "is a language feature in Scala it's just",
    "start": "490780",
    "end": "493420"
  },
  {
    "text": "a pattern it's not something that that",
    "start": "493420",
    "end": "495250"
  },
  {
    "text": "it's not a word that appears in the",
    "start": "495250",
    "end": "497530"
  },
  {
    "text": "language standard it's just a particular",
    "start": "497530",
    "end": "501700"
  },
  {
    "text": "combination of",
    "start": "501700",
    "end": "503430"
  },
  {
    "text": "Scala language features and I'll show",
    "start": "503430",
    "end": "506590"
  },
  {
    "text": "you which ones are going to be relevant",
    "start": "506590",
    "end": "510390"
  },
  {
    "text": "so when Scala we actually have a lot of",
    "start": "510390",
    "end": "513550"
  },
  {
    "text": "different ways of achieving polymorphism",
    "start": "513550",
    "end": "516250"
  },
  {
    "text": "already in the language we can overload",
    "start": "516250",
    "end": "520150"
  },
  {
    "text": "methods so that a method of the same",
    "start": "520150",
    "end": "522789"
  },
  {
    "text": "name can accept different kinds of",
    "start": "522790",
    "end": "525280"
  },
  {
    "text": "inputs the the the really big one in",
    "start": "525280",
    "end": "528160"
  },
  {
    "text": "object-oriented programming is",
    "start": "528160",
    "end": "529630"
  },
  {
    "text": "inheritance we get ad hoc polymorphism",
    "start": "529630",
    "end": "533110"
  },
  {
    "text": "by overriding the the behavior of a",
    "start": "533110",
    "end": "537640"
  },
  {
    "text": "method in a subclass and in Scala we",
    "start": "537640",
    "end": "542050"
  },
  {
    "text": "also have pattern matching where we can",
    "start": "542050",
    "end": "543610"
  },
  {
    "text": "we can look at a value at run time and",
    "start": "543610",
    "end": "546190"
  },
  {
    "text": "do something different depending",
    "start": "546190",
    "end": "548930"
  },
  {
    "text": "depending on the outcome of this runtime",
    "start": "548930",
    "end": "553190"
  },
  {
    "text": "test I arced those three with minus",
    "start": "553190",
    "end": "558510"
  },
  {
    "text": "signs because we're not going to use",
    "start": "558510",
    "end": "559950"
  },
  {
    "text": "those in the type class pattern at all",
    "start": "559950",
    "end": "563329"
  },
  {
    "text": "the language features for polymorphism",
    "start": "563329",
    "end": "566250"
  },
  {
    "text": "that we are going to use we're going to",
    "start": "566250",
    "end": "568980"
  },
  {
    "text": "use traits or interfaces as they're",
    "start": "568980",
    "end": "571709"
  },
  {
    "text": "called in Java and we are going to use",
    "start": "571709",
    "end": "576089"
  },
  {
    "text": "type parameters also known as generic",
    "start": "576089",
    "end": "579149"
  },
  {
    "text": "types so we'll see that in the code in",
    "start": "579149",
    "end": "582660"
  },
  {
    "text": "in a minute the example that I'm about",
    "start": "582660",
    "end": "591930"
  },
  {
    "start": "588000",
    "end": "588000"
  },
  {
    "text": "to start working through is about",
    "start": "591930",
    "end": "593970"
  },
  {
    "text": "serialization but you will see the type",
    "start": "593970",
    "end": "598860"
  },
  {
    "text": "class pattern in other places the two",
    "start": "598860",
    "end": "602279"
  },
  {
    "text": "that you're most likely to see in are in",
    "start": "602279",
    "end": "605940"
  },
  {
    "text": "the Scala standard library numeric is a",
    "start": "605940",
    "end": "609180"
  },
  {
    "text": "type class which allows you to abstract",
    "start": "609180",
    "end": "611399"
  },
  {
    "text": "over different numeric types to write",
    "start": "611399",
    "end": "614550"
  },
  {
    "text": "write code once and have it work on ants",
    "start": "614550",
    "end": "618810"
  },
  {
    "text": "or lawns or doubles and so on and",
    "start": "618810",
    "end": "624170"
  },
  {
    "text": "ordering is also is also a type class",
    "start": "624170",
    "end": "626610"
  },
  {
    "text": "that that lets you specify when you're",
    "start": "626610",
    "end": "630690"
  },
  {
    "text": "sorting data you can specify how you",
    "start": "630690",
    "end": "635070"
  },
  {
    "text": "want it ordered and you can you know the",
    "start": "635070",
    "end": "637709"
  },
  {
    "text": "same type of value can be ordered in",
    "start": "637709",
    "end": "639600"
  },
  {
    "text": "different ways at different times",
    "start": "639600",
    "end": "643490"
  },
  {
    "text": "another really really common example of",
    "start": "643519",
    "end": "647220"
  },
  {
    "text": "when you would use this is for typesafe",
    "start": "647220",
    "end": "648990"
  },
  {
    "text": "equality the Equality operator in Scala",
    "start": "648990",
    "end": "653430"
  },
  {
    "text": "which is mainly the same as the one in",
    "start": "653430",
    "end": "657540"
  },
  {
    "text": "Java with only a few tweets it has this",
    "start": "657540",
    "end": "660449"
  },
  {
    "text": "kind of pitfall which is that it will",
    "start": "660449",
    "end": "662160"
  },
  {
    "text": "let you compare values of any type and",
    "start": "662160",
    "end": "668269"
  },
  {
    "text": "if the if the types don't match then",
    "start": "668269",
    "end": "671970"
  },
  {
    "text": "then you'll just get false this is error",
    "start": "671970",
    "end": "675360"
  },
  {
    "text": "prone because you may write code where",
    "start": "675360",
    "end": "677640"
  },
  {
    "text": "you you you think you're comparing",
    "start": "677640",
    "end": "679800"
  },
  {
    "text": "- values of the same type but if you",
    "start": "679800",
    "end": "683310"
  },
  {
    "text": "screw that up the compiler isn't going",
    "start": "683310",
    "end": "685380"
  },
  {
    "text": "to tell you it'll it'll just always",
    "start": "685380",
    "end": "686910"
  },
  {
    "text": "return false at runtime so if you want",
    "start": "686910",
    "end": "690720"
  },
  {
    "text": "to look into it later there's a link for",
    "start": "690720",
    "end": "692220"
  },
  {
    "text": "a fairly small amount of code that will",
    "start": "692220",
    "end": "694440"
  },
  {
    "text": "give you it a typesafe equality operator",
    "start": "694440",
    "end": "697460"
  },
  {
    "text": "and you know as I mentioned lots of type",
    "start": "697460",
    "end": "701970"
  },
  {
    "text": "classes to be found in Scala Z for this",
    "start": "701970",
    "end": "710790"
  },
  {
    "text": "serialization example we'll need a",
    "start": "710790",
    "end": "712530"
  },
  {
    "start": "712000",
    "end": "712000"
  },
  {
    "text": "couple of domain classes so these are",
    "start": "712530",
    "end": "714900"
  },
  {
    "text": "just you know person and restaurant or",
    "start": "714900",
    "end": "717630"
  },
  {
    "text": "what we use they both just case classes",
    "start": "717630",
    "end": "720030"
  },
  {
    "text": "with a couple of fields now there are",
    "start": "720030",
    "end": "725730"
  },
  {
    "text": "lots of different ways to serialize data",
    "start": "725730",
    "end": "728390"
  },
  {
    "text": "we could serialize to JSON serialize to",
    "start": "728390",
    "end": "732180"
  },
  {
    "text": "XML we should do serialization the way",
    "start": "732180",
    "end": "735900"
  },
  {
    "text": "that the to string method does",
    "start": "735900",
    "end": "741560"
  },
  {
    "text": "automatically for case classes lots of",
    "start": "742760",
    "end": "745950"
  },
  {
    "text": "different ways for taking our data and",
    "start": "745950",
    "end": "747480"
  },
  {
    "text": "reducing it to some sort of stream of",
    "start": "747480",
    "end": "749210"
  },
  {
    "text": "characters or bytes a first naive",
    "start": "749210",
    "end": "754410"
  },
  {
    "start": "753000",
    "end": "753000"
  },
  {
    "text": "attempt it at a serialized method that",
    "start": "754410",
    "end": "756660"
  },
  {
    "text": "works on both of these types of data",
    "start": "756660",
    "end": "758310"
  },
  {
    "text": "would be to just use overloading but",
    "start": "758310",
    "end": "762210"
  },
  {
    "text": "this really doesn't help us very much",
    "start": "762210",
    "end": "763440"
  },
  {
    "text": "because with overloading there's no",
    "start": "763440",
    "end": "768360"
  },
  {
    "text": "connection between these two methods",
    "start": "768360",
    "end": "770790"
  },
  {
    "text": "other than the fact that they happen to",
    "start": "770790",
    "end": "772590"
  },
  {
    "text": "have the same name overloading it all it",
    "start": "772590",
    "end": "778650"
  },
  {
    "text": "does is save you from having to choose",
    "start": "778650",
    "end": "781110"
  },
  {
    "text": "new names all the time but other than",
    "start": "781110",
    "end": "783390"
  },
  {
    "text": "that these are really two completely",
    "start": "783390",
    "end": "785100"
  },
  {
    "text": "distinct methods I can't call this",
    "start": "785100",
    "end": "787170"
  },
  {
    "text": "method without knowing already which of",
    "start": "787170",
    "end": "790950"
  },
  {
    "text": "the the types that I'm using so",
    "start": "790950",
    "end": "794870"
  },
  {
    "text": "overloading is really not much help but",
    "start": "794870",
    "end": "800240"
  },
  {
    "start": "798000",
    "end": "798000"
  },
  {
    "text": "object orientation can help us on that",
    "start": "800240",
    "end": "803880"
  },
  {
    "text": "the standard i/o way we would do this is",
    "start": "803880",
    "end": "807000"
  },
  {
    "text": "to have is to use inheritance so that",
    "start": "807000",
    "end": "813120"
  },
  {
    "text": "our person in restaurant classes we",
    "start": "813120",
    "end": "816980"
  },
  {
    "text": "extend a superclass and then override",
    "start": "816980",
    "end": "820080"
  },
  {
    "text": "the override the abstract method in each",
    "start": "820080",
    "end": "824279"
  },
  {
    "text": "superclass so this works fine there is a",
    "start": "824279",
    "end": "829980"
  },
  {
    "text": "small problem here which is that we can",
    "start": "829980",
    "end": "831600"
  },
  {
    "text": "only have one superclass but that's easy",
    "start": "831600",
    "end": "834630"
  },
  {
    "start": "834000",
    "end": "834000"
  },
  {
    "text": "to fix",
    "start": "834630",
    "end": "835760"
  },
  {
    "text": "in Java we would use an interface and",
    "start": "835760",
    "end": "838020"
  },
  {
    "text": "Scala we use a trait and now we can say",
    "start": "838020",
    "end": "841560"
  },
  {
    "text": "it stands serializable with and we can",
    "start": "841560",
    "end": "844560"
  },
  {
    "text": "list other traits so that this now is",
    "start": "844560",
    "end": "848670"
  },
  {
    "text": "the the kind of standard object-oriented",
    "start": "848670",
    "end": "852410"
  },
  {
    "text": "solution to this and this is a perfectly",
    "start": "852410",
    "end": "858420"
  },
  {
    "text": "fine solution there's nothing I mean",
    "start": "858420",
    "end": "864600"
  },
  {
    "text": "this is something that you're still",
    "start": "864600",
    "end": "866010"
  },
  {
    "text": "often going to reach for but it does",
    "start": "866010",
    "end": "868980"
  },
  {
    "text": "have some disadvantages in particular we",
    "start": "868980",
    "end": "873750"
  },
  {
    "text": "have a coupling problem here where the",
    "start": "873750",
    "end": "878360"
  },
  {
    "text": "person class the the information about",
    "start": "878360",
    "end": "881220"
  },
  {
    "text": "how each of these classes is to be",
    "start": "881220",
    "end": "883920"
  },
  {
    "text": "serialized has to be actually in the",
    "start": "883920",
    "end": "886589"
  },
  {
    "text": "class so particularly if I have if I'm",
    "start": "886589",
    "end": "893610"
  },
  {
    "text": "wanting to support multiple types of",
    "start": "893610",
    "end": "895520"
  },
  {
    "text": "serialization or if I have lots of other",
    "start": "895520",
    "end": "898020"
  },
  {
    "text": "operations then my case classes which",
    "start": "898020",
    "end": "900690"
  },
  {
    "text": "used to be nice and simple are going to",
    "start": "900690",
    "end": "902370"
  },
  {
    "text": "get heavy with with all this stuff and",
    "start": "902370",
    "end": "905990"
  },
  {
    "text": "in order to add more traits and in order",
    "start": "905990",
    "end": "909570"
  },
  {
    "text": "to add more overridden methods I have to",
    "start": "909570",
    "end": "912990"
  },
  {
    "text": "control these classes these have to be",
    "start": "912990",
    "end": "914700"
  },
  {
    "text": "mine I have to be free to edit their",
    "start": "914700",
    "end": "917160"
  },
  {
    "text": "source code and recompile them",
    "start": "917160",
    "end": "921230"
  },
  {
    "start": "922000",
    "end": "922000"
  },
  {
    "text": "Scala offers an alternative approach",
    "start": "926820",
    "end": "929950"
  },
  {
    "text": "which is to avoid inheritance and simply",
    "start": "929950",
    "end": "935530"
  },
  {
    "text": "pattern match at run time on the type so",
    "start": "935530",
    "end": "938440"
  },
  {
    "text": "I can if I do it this way I can leave",
    "start": "938440",
    "end": "940630"
  },
  {
    "text": "the person in restaurant classes alone",
    "start": "940630",
    "end": "942990"
  },
  {
    "text": "they know nothing about how they are",
    "start": "942990",
    "end": "945280"
  },
  {
    "text": "they're serialized instead I have a",
    "start": "945280",
    "end": "947950"
  },
  {
    "text": "serialized method that knows about each",
    "start": "947950",
    "end": "950770"
  },
  {
    "text": "of the classes that I want to serialize",
    "start": "950770",
    "end": "953400"
  },
  {
    "text": "and uses pattern matching to",
    "start": "953400",
    "end": "958660"
  },
  {
    "text": "discriminate and then if I want to do",
    "start": "958660",
    "end": "961300"
  },
  {
    "text": "more than one kind of serialization I",
    "start": "961300",
    "end": "962920"
  },
  {
    "text": "can have more than one such method where",
    "start": "962920",
    "end": "966640"
  },
  {
    "text": "with its own match with its own list of",
    "start": "966640",
    "end": "970570"
  },
  {
    "text": "cases so we we fixed the coupling",
    "start": "970570",
    "end": "978640"
  },
  {
    "text": "problem that we had but we've given",
    "start": "978640",
    "end": "980950"
  },
  {
    "text": "ourselves a new coupling problem now",
    "start": "980950",
    "end": "983290"
  },
  {
    "text": "which is that these methods need to know",
    "start": "983290",
    "end": "987760"
  },
  {
    "text": "about all of the particular classes that",
    "start": "987760",
    "end": "993160"
  },
  {
    "text": "we want to be able to serialize so I",
    "start": "993160",
    "end": "995170"
  },
  {
    "text": "can't add new types of out new types to",
    "start": "995170",
    "end": "1000390"
  },
  {
    "text": "this unless this is my method I control",
    "start": "1000390",
    "end": "1004620"
  },
  {
    "text": "it I can edit the source code and",
    "start": "1004620",
    "end": "1006240"
  },
  {
    "text": "recompile it yeah in in era eric has a",
    "start": "1006240",
    "end": "1016430"
  },
  {
    "text": "somewhat longer I think talk about about",
    "start": "1016430",
    "end": "1020060"
  },
  {
    "text": "type classes that I'll link to later",
    "start": "1020060",
    "end": "1022610"
  },
  {
    "text": "that presents an additional solution",
    "start": "1022610",
    "end": "1026010"
  },
  {
    "text": "which is to use reflection and that has",
    "start": "1026010",
    "end": "1027990"
  },
  {
    "text": "its own its own problems as well",
    "start": "1027990",
    "end": "1032360"
  },
  {
    "start": "1034000",
    "end": "1034000"
  },
  {
    "text": "so we're gonna solve both of these",
    "start": "1035860",
    "end": "1038449"
  },
  {
    "text": "coupling problems at once with this code",
    "start": "1038449",
    "end": "1041000"
  },
  {
    "text": "which is we're almost at the type class",
    "start": "1041000",
    "end": "1043188"
  },
  {
    "text": "pattern here we're still gonna refine it",
    "start": "1043189",
    "end": "1045680"
  },
  {
    "text": "a little bit I'm defining a trait called",
    "start": "1045680",
    "end": "1050180"
  },
  {
    "text": "serializable and what what an instance",
    "start": "1050180",
    "end": "1058910"
  },
  {
    "text": "of this trait represents is it",
    "start": "1058910",
    "end": "1060590"
  },
  {
    "text": "represents the knowledge of how to",
    "start": "1060590",
    "end": "1063110"
  },
  {
    "text": "serialize a particular type of value in",
    "start": "1063110",
    "end": "1067610"
  },
  {
    "text": "a particular in a particular way so the",
    "start": "1067610",
    "end": "1071450"
  },
  {
    "text": "type parameter T is the is the type of",
    "start": "1071450",
    "end": "1075260"
  },
  {
    "text": "value that we're serializing so now for",
    "start": "1075260",
    "end": "1079970"
  },
  {
    "text": "example the here's how we represent the",
    "start": "1079970",
    "end": "1082940"
  },
  {
    "text": "knowledge of how to serialize a person",
    "start": "1082940",
    "end": "1085510"
  },
  {
    "text": "in this this form which you know",
    "start": "1085510",
    "end": "1088910"
  },
  {
    "text": "resembles the what the standard two",
    "start": "1088910",
    "end": "1091490"
  },
  {
    "text": "string method does I put this in an",
    "start": "1091490",
    "end": "1095240"
  },
  {
    "text": "object that extends the trait I specify",
    "start": "1095240",
    "end": "1098480"
  },
  {
    "text": "the type parameter and I'm done I can do",
    "start": "1098480",
    "end": "1102380"
  },
  {
    "text": "the same thing with a restaurant and now",
    "start": "1102380",
    "end": "1105380"
  },
  {
    "text": "I can call this but I have to have to",
    "start": "1105380",
    "end": "1110870"
  },
  {
    "text": "supply this additional parameter to the",
    "start": "1110870",
    "end": "1115490"
  },
  {
    "text": "serialize method that that has the",
    "start": "1115490",
    "end": "1118910"
  },
  {
    "text": "knowledge of how to serialize the",
    "start": "1118910",
    "end": "1121280"
  },
  {
    "text": "particular class so the this is really",
    "start": "1121280",
    "end": "1123590"
  },
  {
    "text": "this is this is not so nice we would",
    "start": "1123590",
    "end": "1126679"
  },
  {
    "text": "prefer to have that be automatic and we",
    "start": "1126679",
    "end": "1131720"
  },
  {
    "text": "can do that by using the s' College",
    "start": "1131720",
    "end": "1133520"
  },
  {
    "text": "Scala language feature of implicit",
    "start": "1133520",
    "end": "1137179"
  },
  {
    "text": "parameters so this is the same code from",
    "start": "1137179",
    "end": "1141320"
  },
  {
    "text": "the previous slide but simply with the",
    "start": "1141320",
    "end": "1144860"
  },
  {
    "text": "word implicit added we've moved the the",
    "start": "1144860",
    "end": "1153080"
  },
  {
    "text": "serializable parameter to a separate",
    "start": "1153080",
    "end": "1156110"
  },
  {
    "text": "parameter list which is implicit and",
    "start": "1156110",
    "end": "1158200"
  },
  {
    "text": "when we declare this object that knows",
    "start": "1158200",
    "end": "1161450"
  },
  {
    "text": "how to serialize a person we declare it",
    "start": "1161450",
    "end": "1163670"
  },
  {
    "text": "also as implicit and that that says",
    "start": "1163670",
    "end": "1167420"
  },
  {
    "text": "this object is now available to be",
    "start": "1167420",
    "end": "1169910"
  },
  {
    "text": "automatically filled in whenever we have",
    "start": "1169910",
    "end": "1172670"
  },
  {
    "text": "an implicit parameter that with a",
    "start": "1172670",
    "end": "1175640"
  },
  {
    "text": "matching type and we've now our goal we",
    "start": "1175640",
    "end": "1184100"
  },
  {
    "start": "1180000",
    "end": "1180000"
  },
  {
    "text": "can simply call serialize on a person I",
    "start": "1184100",
    "end": "1187390"
  },
  {
    "text": "only need to fill in the first parameter",
    "start": "1187390",
    "end": "1189560"
  },
  {
    "text": "list the compiler fills in the second",
    "start": "1189560",
    "end": "1191690"
  },
  {
    "text": "parameter list for me",
    "start": "1191690",
    "end": "1194710"
  },
  {
    "text": "it runs and this is typesafe if we pass",
    "start": "1194870",
    "end": "1199250"
  },
  {
    "text": "a type of value to serialize that it",
    "start": "1199250",
    "end": "1202520"
  },
  {
    "text": "doesn't the compiler doesn't have an",
    "start": "1202520",
    "end": "1207260"
  },
  {
    "text": "available implicit for then it will",
    "start": "1207260",
    "end": "1209690"
  },
  {
    "text": "complain at compile time we can refine",
    "start": "1209690",
    "end": "1217940"
  },
  {
    "start": "1213000",
    "end": "1213000"
  },
  {
    "text": "the syntax a little bit if we like on",
    "start": "1217940",
    "end": "1220610"
  },
  {
    "text": "Scala provides a shorthand where if you",
    "start": "1220610",
    "end": "1224150"
  },
  {
    "text": "find yourself having to add these",
    "start": "1224150",
    "end": "1227810"
  },
  {
    "text": "implicit parameter lists to many methods",
    "start": "1227810",
    "end": "1233530"
  },
  {
    "text": "you can shorten it like this by just",
    "start": "1233530",
    "end": "1236930"
  },
  {
    "text": "putting a colon after the type and then",
    "start": "1236930",
    "end": "1241420"
  },
  {
    "text": "saying what what what type of implicit",
    "start": "1241420",
    "end": "1246380"
  },
  {
    "text": "you you you want to that you need that",
    "start": "1246380",
    "end": "1250460"
  },
  {
    "text": "you require for that type so the example",
    "start": "1250460",
    "end": "1254210"
  },
  {
    "text": "here is I have a method that will Syria",
    "start": "1254210",
    "end": "1256070"
  },
  {
    "text": "that what that knows how to serialize a",
    "start": "1256070",
    "end": "1258050"
  },
  {
    "text": "list of any serializable type that we",
    "start": "1258050",
    "end": "1264380"
  },
  {
    "text": "that we already know how to have that we",
    "start": "1264380",
    "end": "1266030"
  },
  {
    "text": "already have and and here's an example",
    "start": "1266030",
    "end": "1270050"
  },
  {
    "text": "of using that on a list of of people",
    "start": "1270050",
    "end": "1274150"
  },
  {
    "text": "here the context bound syntax is",
    "start": "1274150",
    "end": "1279340"
  },
  {
    "text": "convenient because we don't actually",
    "start": "1279340",
    "end": "1282140"
  },
  {
    "text": "need to use this value explicitly in the",
    "start": "1282140",
    "end": "1286340"
  },
  {
    "text": "body of this function so serialized here",
    "start": "1286340",
    "end": "1291470"
  },
  {
    "text": "there's a invisible second parameter",
    "start": "1291470",
    "end": "1293330"
  },
  {
    "text": "list the compiler is filling a is",
    "start": "1293330",
    "end": "1295670"
  },
  {
    "text": "filling that in for us with this this",
    "start": "1295670",
    "end": "1299750"
  },
  {
    "text": "unnamed",
    "start": "1299750",
    "end": "1300390"
  },
  {
    "text": "value all of that that code just sort of",
    "start": "1300390",
    "end": "1303060"
  },
  {
    "text": "drops out another optional syntactic",
    "start": "1303060",
    "end": "1314940"
  },
  {
    "start": "1305000",
    "end": "1305000"
  },
  {
    "text": "refinement that we can get if we want it",
    "start": "1314940",
    "end": "1318540"
  },
  {
    "text": "is if we would prefer to write",
    "start": "1318540",
    "end": "1321180"
  },
  {
    "text": "serialized as a method call on the",
    "start": "1321180",
    "end": "1323640"
  },
  {
    "text": "object rather than as a function that",
    "start": "1323640",
    "end": "1326850"
  },
  {
    "text": "takes the object as input we can do that",
    "start": "1326850",
    "end": "1332220"
  },
  {
    "text": "using an implicit conversion this is the",
    "start": "1332220",
    "end": "1334620"
  },
  {
    "text": "standard this is the standard pattern",
    "start": "1334620",
    "end": "1336600"
  },
  {
    "text": "for adding so-called extension methods",
    "start": "1336600",
    "end": "1340920"
  },
  {
    "text": "to to Scala classes so I won't go over",
    "start": "1340920",
    "end": "1343770"
  },
  {
    "text": "that in detail but you you you you have",
    "start": "1343770",
    "end": "1346710"
  },
  {
    "text": "this option of making this syntax",
    "start": "1346710",
    "end": "1349530"
  },
  {
    "text": "available to whoever's using your code",
    "start": "1349530",
    "end": "1352170"
  },
  {
    "text": "so that's the serialization example and",
    "start": "1352170",
    "end": "1361230"
  },
  {
    "text": "to recap we have type safety this is",
    "start": "1361230",
    "end": "1364920"
  },
  {
    "text": "checked at compile time we have two",
    "start": "1364920",
    "end": "1368430"
  },
  {
    "text": "kinds of extensibility we can add new",
    "start": "1368430",
    "end": "1371660"
  },
  {
    "text": "types of data that are serializable we",
    "start": "1371660",
    "end": "1376770"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "can add new new kinds of serialization",
    "start": "1376770",
    "end": "1379710"
  },
  {
    "text": "like json or xml and it's extensible in",
    "start": "1379710",
    "end": "1384960"
  },
  {
    "text": "both of those directions in in a",
    "start": "1384960",
    "end": "1386670"
  },
  {
    "text": "decoupled way where when we add when we",
    "start": "1386670",
    "end": "1391140"
  },
  {
    "text": "sort of you can imagine a matrix of like",
    "start": "1391140",
    "end": "1394100"
  },
  {
    "text": "possible types of input possible types",
    "start": "1394100",
    "end": "1396750"
  },
  {
    "text": "of serialization every time we want to",
    "start": "1396750",
    "end": "1399030"
  },
  {
    "text": "like fill in a box and that matrix all",
    "start": "1399030",
    "end": "1401490"
  },
  {
    "text": "we need is a to add a new independent",
    "start": "1401490",
    "end": "1404160"
  },
  {
    "text": "piece of code rather than altering",
    "start": "1404160",
    "end": "1406040"
  },
  {
    "text": "existing code oh yeah so the the the the",
    "start": "1406040",
    "end": "1411330"
  },
  {
    "text": "question is what if I were wanted to",
    "start": "1411330",
    "end": "1413730"
  },
  {
    "text": "serialize to something other than string",
    "start": "1413730",
    "end": "1415620"
  },
  {
    "text": "I did hard code string in this example",
    "start": "1415620",
    "end": "1418040"
  },
  {
    "text": "but you could imagine making that an",
    "start": "1418040",
    "end": "1421290"
  },
  {
    "text": "additional type parameter to handle to",
    "start": "1421290",
    "end": "1426330"
  },
  {
    "text": "do bytes instead or whatever yeah you",
    "start": "1426330",
    "end": "1428850"
  },
  {
    "text": "could you can imagine even more",
    "start": "1428850",
    "end": "1430230"
  },
  {
    "text": "dimension so if",
    "start": "1430230",
    "end": "1431100"
  },
  {
    "text": "of variability for this with what I've",
    "start": "1431100",
    "end": "1436440"
  },
  {
    "start": "1434000",
    "end": "1434000"
  },
  {
    "text": "shown we this is even a little more",
    "start": "1436440",
    "end": "1438150"
  },
  {
    "text": "flexible than what you have in Haskell",
    "start": "1438150",
    "end": "1439799"
  },
  {
    "text": "because although normally it's",
    "start": "1439799",
    "end": "1443400"
  },
  {
    "text": "convenient to have to have these",
    "start": "1443400",
    "end": "1445890"
  },
  {
    "text": "implicit parameters filled in",
    "start": "1445890",
    "end": "1447210"
  },
  {
    "text": "automatically by the compiler you can",
    "start": "1447210",
    "end": "1449520"
  },
  {
    "text": "also fill them in manually in case you",
    "start": "1449520",
    "end": "1451950"
  },
  {
    "text": "need to override the default for example",
    "start": "1451950",
    "end": "1457400"
  },
  {
    "start": "1455000",
    "end": "1455000"
  },
  {
    "text": "and this is using ordering the ordering",
    "start": "1457400",
    "end": "1460169"
  },
  {
    "text": "type class from the standard library I",
    "start": "1460169",
    "end": "1463220"
  },
  {
    "text": "might in the same piece of code want to",
    "start": "1463220",
    "end": "1465840"
  },
  {
    "text": "sometimes sort person objects by their",
    "start": "1465840",
    "end": "1468210"
  },
  {
    "text": "name and sometimes by their age if I",
    "start": "1468210",
    "end": "1471600"
  },
  {
    "text": "have implicit sin scope for both of",
    "start": "1471600",
    "end": "1474480"
  },
  {
    "text": "those kinds of sorting then if I try to",
    "start": "1474480",
    "end": "1476730"
  },
  {
    "text": "sort something the compiler which help",
    "start": "1476730",
    "end": "1478770"
  },
  {
    "text": "will tell me it's ambiguous but I always",
    "start": "1478770",
    "end": "1481080"
  },
  {
    "text": "have the option of filling in that",
    "start": "1481080",
    "end": "1482850"
  },
  {
    "text": "implicit parameter list explicitly so",
    "start": "1482850",
    "end": "1486870"
  },
  {
    "text": "these two kinds of ordering don't you",
    "start": "1486870",
    "end": "1489809"
  },
  {
    "text": "know don't need to step on each other's",
    "start": "1489809",
    "end": "1491880"
  },
  {
    "text": "toes the the big difference the really",
    "start": "1491880",
    "end": "1496860"
  },
  {
    "start": "1495000",
    "end": "1495000"
  },
  {
    "text": "big difference between this and",
    "start": "1496860",
    "end": "1497940"
  },
  {
    "text": "inheritance that you need to understand",
    "start": "1497940",
    "end": "1501799"
  },
  {
    "text": "the other the other solutions I",
    "start": "1501799",
    "end": "1504299"
  },
  {
    "text": "presented using either inheritance or",
    "start": "1504299",
    "end": "1506429"
  },
  {
    "text": "pattern matching in both of those",
    "start": "1506429",
    "end": "1508530"
  },
  {
    "text": "solutions the the the decision of what",
    "start": "1508530",
    "end": "1513289"
  },
  {
    "text": "code to run to do this serialization is",
    "start": "1513289",
    "end": "1515940"
  },
  {
    "text": "happening at runtime this is not true in",
    "start": "1515940",
    "end": "1519150"
  },
  {
    "text": "the in the case of type classes this",
    "start": "1519150",
    "end": "1521460"
  },
  {
    "text": "will only work if the compiler has the",
    "start": "1521460",
    "end": "1525120"
  },
  {
    "text": "knowledge at compile time to know which",
    "start": "1525120",
    "end": "1528419"
  },
  {
    "text": "implicit to fill in so that means that",
    "start": "1528419",
    "end": "1532919"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "there are lots of this is not a drop-in",
    "start": "1532919",
    "end": "1536909"
  },
  {
    "text": "replacement for inheritance because",
    "start": "1536909",
    "end": "1539669"
  },
  {
    "text": "there are lots of kinds of code that you",
    "start": "1539669",
    "end": "1542340"
  },
  {
    "text": "might that you would expect to work with",
    "start": "1542340",
    "end": "1545640"
  },
  {
    "text": "an inheritance that won't work this way",
    "start": "1545640",
    "end": "1547730"
  },
  {
    "text": "for example if I have a heterogeneous",
    "start": "1547730",
    "end": "1551429"
  },
  {
    "text": "list containing more than one type of",
    "start": "1551429",
    "end": "1555000"
  },
  {
    "text": "value like a person and a restaurant in",
    "start": "1555000",
    "end": "1557460"
  },
  {
    "text": "the same list if I try to serialize that",
    "start": "1557460",
    "end": "1560850"
  },
  {
    "text": "list the compiler is going to come",
    "start": "1560850",
    "end": "1562169"
  },
  {
    "text": "plain because the the specific type",
    "start": "1562169",
    "end": "1566070"
  },
  {
    "text": "information for the specific values in",
    "start": "1566070",
    "end": "1568529"
  },
  {
    "text": "that list are lost when we when we stuff",
    "start": "1568529",
    "end": "1571710"
  },
  {
    "text": "them into a list I don't have time to",
    "start": "1571710",
    "end": "1576029"
  },
  {
    "start": "1576000",
    "end": "1576000"
  },
  {
    "text": "get into detail about the various",
    "start": "1576029",
    "end": "1577679"
  },
  {
    "text": "interactions with inheritance but I do",
    "start": "1577679",
    "end": "1580470"
  },
  {
    "text": "have links to a couple Stack Overflow",
    "start": "1580470",
    "end": "1583289"
  },
  {
    "text": "questions that have good answers about",
    "start": "1583289",
    "end": "1585559"
  },
  {
    "text": "what happens when both type classes and",
    "start": "1585559",
    "end": "1588659"
  },
  {
    "text": "inheritance are in the same picture some",
    "start": "1588659",
    "end": "1595399"
  },
  {
    "text": "so that that's the the big like - or",
    "start": "1595399",
    "end": "1599659"
  },
  {
    "text": "difference if you prefer from",
    "start": "1599659",
    "end": "1601619"
  },
  {
    "text": "inheritance some some more minor",
    "start": "1601619",
    "end": "1603690"
  },
  {
    "text": "downsides the syntax is you know there's",
    "start": "1603690",
    "end": "1607499"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "a certain amount of boilerplate here and",
    "start": "1607499",
    "end": "1609989"
  },
  {
    "text": "when you see this boilerplate it doesn't",
    "start": "1609989",
    "end": "1612090"
  },
  {
    "text": "necessarily jump out at you that that",
    "start": "1612090",
    "end": "1613769"
  },
  {
    "text": "though this is the type class pattern I",
    "start": "1613769",
    "end": "1615570"
  },
  {
    "text": "mean I see implicit here implicit there",
    "start": "1615570",
    "end": "1617369"
  },
  {
    "text": "like what is this anytime you're using",
    "start": "1617369",
    "end": "1621359"
  },
  {
    "text": "implicit for anything there's a danger",
    "start": "1621359",
    "end": "1623639"
  },
  {
    "text": "of obscure error messages it's it's",
    "start": "1623639",
    "end": "1626730"
  },
  {
    "text": "harder to call higher-order functions",
    "start": "1626730",
    "end": "1628470"
  },
  {
    "text": "there is a kind of tax for for using",
    "start": "1628470",
    "end": "1631679"
  },
  {
    "text": "implicit sub any kind tools like Scala",
    "start": "1631679",
    "end": "1636359"
  },
  {
    "text": "doc and I des are kind of expecting",
    "start": "1636359",
    "end": "1638730"
  },
  {
    "text": "normal methods they're not expecting",
    "start": "1638730",
    "end": "1640529"
  },
  {
    "text": "methods that are coming from type",
    "start": "1640529",
    "end": "1641669"
  },
  {
    "text": "classes so it can be harder to learn an",
    "start": "1641669",
    "end": "1644159"
  },
  {
    "text": "API that uses this and there may be some",
    "start": "1644159",
    "end": "1648059"
  },
  {
    "text": "performance overhead I'm adding extra",
    "start": "1648059",
    "end": "1651629"
  },
  {
    "text": "layers of method calls the resolution of",
    "start": "1651629",
    "end": "1655499"
  },
  {
    "text": "the type dices does take place at",
    "start": "1655499",
    "end": "1657119"
  },
  {
    "text": "compile time so you don't you don't pay",
    "start": "1657119",
    "end": "1659100"
  },
  {
    "text": "for that but there may be some there may",
    "start": "1659100",
    "end": "1663929"
  },
  {
    "text": "be some performance penalty Eric on time",
    "start": "1663929",
    "end": "1669239"
  },
  {
    "text": "has been studying that in the context of",
    "start": "1669239",
    "end": "1671549"
  },
  {
    "text": "the numeric type class so the that's if",
    "start": "1671549",
    "end": "1674159"
  },
  {
    "text": "you are interested in numbers on that",
    "start": "1674159",
    "end": "1676429"
  },
  {
    "text": "you should look at his forthcoming Scala",
    "start": "1676429",
    "end": "1680249"
  },
  {
    "text": "days paper on the subject there are some",
    "start": "1680249",
    "end": "1684230"
  },
  {
    "text": "proposals out there for helping you",
    "start": "1684230",
    "end": "1689070"
  },
  {
    "start": "1685000",
    "end": "1685000"
  },
  {
    "text": "either with the performance or with the",
    "start": "1689070",
    "end": "1691830"
  },
  {
    "text": "syntax or with both",
    "start": "1691830",
    "end": "1695070"
  },
  {
    "text": "the implicit classes and valued classes",
    "start": "1695070",
    "end": "1699179"
  },
  {
    "text": "proposals would both cut down on the the",
    "start": "1699179",
    "end": "1705460"
  },
  {
    "text": "penalty of extra extra objects being",
    "start": "1705460",
    "end": "1708220"
  },
  {
    "text": "created and Josh also has another",
    "start": "1708220",
    "end": "1715149"
  },
  {
    "text": "proposal which is like not which is less",
    "start": "1715149",
    "end": "1719590"
  },
  {
    "text": "on the fast track",
    "start": "1719590",
    "end": "1722398"
  },
  {
    "text": "you have to like write him to ask for it",
    "start": "1722529",
    "end": "1724830"
  },
  {
    "text": "but he has a proposal for making for",
    "start": "1724830",
    "end": "1729610"
  },
  {
    "text": "reducing the amount of syntactic noise",
    "start": "1729610",
    "end": "1732279"
  },
  {
    "text": "that using this pattern requires so if",
    "start": "1732279",
    "end": "1739360"
  },
  {
    "text": "you'd like to read more there's a very",
    "start": "1739360",
    "end": "1741010"
  },
  {
    "text": "short treatment of type classes in",
    "start": "1741010",
    "end": "1742840"
  },
  {
    "text": "Josh's book with a different example",
    "start": "1742840",
    "end": "1746250"
  },
  {
    "text": "different from any of the ones that I",
    "start": "1746250",
    "end": "1748210"
  },
  {
    "text": "mentioned Eric slides mostly go over the",
    "start": "1748210",
    "end": "1752830"
  },
  {
    "text": "same material that I covered but it's",
    "start": "1752830",
    "end": "1754120"
  },
  {
    "text": "just it's like a totally different",
    "start": "1754120",
    "end": "1755289"
  },
  {
    "text": "presentation so it might be interesting",
    "start": "1755289",
    "end": "1757120"
  },
  {
    "text": "to get a different take on it and that's",
    "start": "1757120",
    "end": "1763360"
  },
  {
    "text": "all I got",
    "start": "1763360",
    "end": "1763960"
  },
  {
    "text": "thank you",
    "start": "1763960",
    "end": "1766770"
  }
]