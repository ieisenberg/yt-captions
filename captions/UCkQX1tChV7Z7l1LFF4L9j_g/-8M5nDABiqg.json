[
  {
    "text": "hello I'm Dave Smith an Android Dev lead",
    "start": "9679",
    "end": "12320"
  },
  {
    "text": "with double Encore and an Android",
    "start": "12320",
    "end": "14080"
  },
  {
    "text": "instructor here at New Circle today I'm",
    "start": "14080",
    "end": "16920"
  },
  {
    "text": "going to walk you through the process of",
    "start": "16920",
    "end": "18640"
  },
  {
    "text": "building custom views and view groups on",
    "start": "18640",
    "end": "21279"
  },
  {
    "text": "Android as developers building custom",
    "start": "21279",
    "end": "24000"
  },
  {
    "text": "view components is a necessary part of",
    "start": "24000",
    "end": "26439"
  },
  {
    "text": "embracing creative UI design we",
    "start": "26439",
    "end": "29199"
  },
  {
    "text": "shouldn't be afraid to implement a",
    "start": "29199",
    "end": "30960"
  },
  {
    "text": "designer's unique Vision just because",
    "start": "30960",
    "end": "33160"
  },
  {
    "text": "the framework or the community doesn't",
    "start": "33160",
    "end": "36000"
  },
  {
    "text": "provide a component that will do the job",
    "start": "36000",
    "end": "38040"
  },
  {
    "text": "for us out of the box getting our hands",
    "start": "38040",
    "end": "40719"
  },
  {
    "text": "dirty in this area is a great way to",
    "start": "40719",
    "end": "43320"
  },
  {
    "text": "build great",
    "start": "43320",
    "end": "44719"
  },
  {
    "text": "apps there are many great advantages to",
    "start": "44719",
    "end": "47640"
  },
  {
    "text": "building your own UI components such as",
    "start": "47640",
    "end": "49760"
  },
  {
    "text": "the ability to have full control of how",
    "start": "49760",
    "end": "52120"
  },
  {
    "text": "your content is displayed but one of the",
    "start": "52120",
    "end": "54680"
  },
  {
    "text": "best reasons to become an expert at",
    "start": "54680",
    "end": "56760"
  },
  {
    "text": "custom view creation is the ability to",
    "start": "56760",
    "end": "59239"
  },
  {
    "text": "flatten your your view",
    "start": "59239",
    "end": "61120"
  },
  {
    "text": "hierarchy one custom view can be",
    "start": "61120",
    "end": "63960"
  },
  {
    "text": "designed to do the job of several nested",
    "start": "63960",
    "end": "66479"
  },
  {
    "text": "framework widgets and the fewer views",
    "start": "66479",
    "end": "68840"
  },
  {
    "text": "you have in your hierarchy the better",
    "start": "68840",
    "end": "71159"
  },
  {
    "text": "your application will",
    "start": "71159",
    "end": "73759"
  },
  {
    "text": "perform our first example will be a",
    "start": "73759",
    "end": "76680"
  },
  {
    "text": "simple widget that displays a pair of",
    "start": "76680",
    "end": "79040"
  },
  {
    "text": "overlapping image logos with a text",
    "start": "79040",
    "end": "81439"
  },
  {
    "text": "element on the right and vertically",
    "start": "81439",
    "end": "83159"
  },
  {
    "text": "centered you might use a widget like",
    "start": "83159",
    "end": "85360"
  },
  {
    "text": "this to represent the score of a sports",
    "start": "85360",
    "end": "87119"
  },
  {
    "text": "matchup for example when we build custom",
    "start": "87119",
    "end": "90360"
  },
  {
    "text": "views there are two primary functions",
    "start": "90360",
    "end": "93000"
  },
  {
    "text": "that we must take into consideration",
    "start": "93000",
    "end": "95280"
  },
  {
    "text": "measurement and drawing let's have a",
    "start": "95280",
    "end": "97720"
  },
  {
    "text": "look at measurement",
    "start": "97720",
    "end": "99640"
  },
  {
    "text": "first before a view hierarchy can be",
    "start": "99640",
    "end": "102200"
  },
  {
    "text": "drawn the first task of the Android",
    "start": "102200",
    "end": "104280"
  },
  {
    "text": "framework is a measurement pass in this",
    "start": "104280",
    "end": "107040"
  },
  {
    "text": "step all the views in the hierarchy will",
    "start": "107040",
    "end": "109479"
  },
  {
    "text": "be measured top down meaning measure",
    "start": "109479",
    "end": "111799"
  },
  {
    "text": "starts at the root View and trickles",
    "start": "111799",
    "end": "113799"
  },
  {
    "text": "through each child view each view",
    "start": "113799",
    "end": "116680"
  },
  {
    "text": "receives a call to on measure when its",
    "start": "116680",
    "end": "118759"
  },
  {
    "text": "parent requests that it update its",
    "start": "118759",
    "end": "120799"
  },
  {
    "text": "measured size it is the responsibility",
    "start": "120799",
    "end": "124000"
  },
  {
    "text": "of each view to set its own size based",
    "start": "124000",
    "end": "126600"
  },
  {
    "text": "on the constraints given by the parent",
    "start": "126600",
    "end": "128640"
  },
  {
    "text": "and store those measurements by calling",
    "start": "128640",
    "end": "130800"
  },
  {
    "text": "set measure Dimension forgetting to do",
    "start": "130800",
    "end": "133440"
  },
  {
    "text": "this will result in an",
    "start": "133440",
    "end": "135720"
  },
  {
    "text": "exception each view is given two packed",
    "start": "135720",
    "end": "139000"
  },
  {
    "text": "int values in on measure these are",
    "start": "139000",
    "end": "141160"
  },
  {
    "text": "called measure specs and there're",
    "start": "141160",
    "end": "143160"
  },
  {
    "text": "something that the view should inspect",
    "start": "143160",
    "end": "145080"
  },
  {
    "text": "to determine how to set its size a",
    "start": "145080",
    "end": "147760"
  },
  {
    "text": "measure spec is simply a size value with",
    "start": "147760",
    "end": "150720"
  },
  {
    "text": "a mode flag encoded into its high-order",
    "start": "150720",
    "end": "153720"
  },
  {
    "text": "bits there are three possible values for",
    "start": "153720",
    "end": "157239"
  },
  {
    "text": "a Specs mode unspecified at most and",
    "start": "157239",
    "end": "161720"
  },
  {
    "text": "exactly unspecified tells the view to",
    "start": "161720",
    "end": "164640"
  },
  {
    "text": "set its Dimensions to any desired size",
    "start": "164640",
    "end": "167720"
  },
  {
    "text": "at most tells the view to set its",
    "start": "167720",
    "end": "169800"
  },
  {
    "text": "Dimensions to any size less than or",
    "start": "169800",
    "end": "172440"
  },
  {
    "text": "equal to the given spec exactly tells",
    "start": "172440",
    "end": "175440"
  },
  {
    "text": "the view to set its Dimensions only to",
    "start": "175440",
    "end": "177720"
  },
  {
    "text": "the size",
    "start": "177720",
    "end": "178760"
  },
  {
    "text": "given this is a helper utility here that",
    "start": "178760",
    "end": "182280"
  },
  {
    "text": "I often use to quickly size most custom",
    "start": "182280",
    "end": "184959"
  },
  {
    "text": "views as it provides General Behavior",
    "start": "184959",
    "end": "187720"
  },
  {
    "text": "needed in most",
    "start": "187720",
    "end": "190680"
  },
  {
    "text": "situations it may also be important to",
    "start": "190680",
    "end": "193319"
  },
  {
    "text": "provide measurements of what your",
    "start": "193319",
    "end": "195040"
  },
  {
    "text": "desired size is for situations where WRA",
    "start": "195040",
    "end": "198280"
  },
  {
    "text": "content will be used to lay out the view",
    "start": "198280",
    "end": "201319"
  },
  {
    "text": "here is the method we use to compute the",
    "start": "201319",
    "end": "203560"
  },
  {
    "text": "desired width for our custom view",
    "start": "203560",
    "end": "205599"
  },
  {
    "text": "example we obtain width values for the",
    "start": "205599",
    "end": "208480"
  },
  {
    "text": "three major elements in in this View and",
    "start": "208480",
    "end": "211159"
  },
  {
    "text": "return the space that will be required",
    "start": "211159",
    "end": "212920"
  },
  {
    "text": "to draw the overlapping logos and",
    "start": "212920",
    "end": "215840"
  },
  {
    "text": "text similarly here is the method our",
    "start": "215840",
    "end": "219159"
  },
  {
    "text": "example uses to compute the desired",
    "start": "219159",
    "end": "221239"
  },
  {
    "text": "height value this is governed completely",
    "start": "221239",
    "end": "224319"
  },
  {
    "text": "by the image content so we don't need to",
    "start": "224319",
    "end": "226640"
  },
  {
    "text": "pay attention to the text element when",
    "start": "226640",
    "end": "228560"
  },
  {
    "text": "measuring in this",
    "start": "228560",
    "end": "230599"
  },
  {
    "text": "direction here's a tip to help keep you",
    "start": "230599",
    "end": "233200"
  },
  {
    "text": "on the right track don't spend time",
    "start": "233200",
    "end": "236319"
  },
  {
    "text": "testing and overriding states you don't",
    "start": "236319",
    "end": "238519"
  },
  {
    "text": "need unlike like the framework widgets",
    "start": "238519",
    "end": "240959"
  },
  {
    "text": "your custom view only needs to suit your",
    "start": "240959",
    "end": "243480"
  },
  {
    "text": "application's use case over optimizing",
    "start": "243480",
    "end": "246400"
  },
  {
    "text": "the code to handle measurement states",
    "start": "246400",
    "end": "248400"
  },
  {
    "text": "that will never occur in your",
    "start": "248400",
    "end": "249879"
  },
  {
    "text": "application is a waste of time and",
    "start": "249879",
    "end": "252760"
  },
  {
    "text": "effort place your custom view inside its",
    "start": "252760",
    "end": "255920"
  },
  {
    "text": "final layout inspect the values the",
    "start": "255920",
    "end": "258359"
  },
  {
    "text": "framework gives you for measure specs",
    "start": "258359",
    "end": "260479"
  },
  {
    "text": "and then build the measuring code to",
    "start": "260479",
    "end": "262720"
  },
  {
    "text": "handle those specific",
    "start": "262720",
    "end": "264759"
  },
  {
    "text": "cases a custom View's other primary job",
    "start": "264759",
    "end": "268000"
  },
  {
    "text": "is to draw its content for this you are",
    "start": "268000",
    "end": "270800"
  },
  {
    "text": "given a blank canvas via the on draw",
    "start": "270800",
    "end": "273080"
  },
  {
    "text": "method this canvas is sized and",
    "start": "273080",
    "end": "275720"
  },
  {
    "text": "positioned according to your measured",
    "start": "275720",
    "end": "277440"
  },
  {
    "text": "view so the origin matches up with the",
    "start": "277440",
    "end": "280160"
  },
  {
    "text": "top left of the view bounds canvas",
    "start": "280160",
    "end": "283080"
  },
  {
    "text": "supports calls to draw shapes colors",
    "start": "283080",
    "end": "286000"
  },
  {
    "text": "text bit maps and more many framework",
    "start": "286000",
    "end": "289360"
  },
  {
    "text": "components such as drawable images and",
    "start": "289360",
    "end": "291560"
  },
  {
    "text": "text layouts even provide their own draw",
    "start": "291560",
    "end": "294360"
  },
  {
    "text": "methods to render their contents onto",
    "start": "294360",
    "end": "296520"
  },
  {
    "text": "the canvas directly which is what we",
    "start": "296520",
    "end": "299240"
  },
  {
    "text": "have taken advantage of in this",
    "start": "299240",
    "end": "301960"
  },
  {
    "text": "example you may find yourself wanting to",
    "start": "301960",
    "end": "305039"
  },
  {
    "text": "provide attributes to your custom view",
    "start": "305039",
    "end": "307639"
  },
  {
    "text": "from within the layout XML we can",
    "start": "307639",
    "end": "310320"
  },
  {
    "text": "accomplish this by declaring a stylable",
    "start": "310320",
    "end": "312720"
  },
  {
    "text": "block in the project resources this",
    "start": "312720",
    "end": "315600"
  },
  {
    "text": "block must contain all the attributes we",
    "start": "315600",
    "end": "318080"
  },
  {
    "text": "would like to read from the layout XML",
    "start": "318080",
    "end": "320919"
  },
  {
    "text": "when possible it is most efficient to",
    "start": "320919",
    "end": "323560"
  },
  {
    "text": "reuse attributes already defined by the",
    "start": "323560",
    "end": "326080"
  },
  {
    "text": "framework as we have done here we are",
    "start": "326080",
    "end": "328800"
  },
  {
    "text": "utilizing existing text and drawable",
    "start": "328800",
    "end": "331319"
  },
  {
    "text": "attributes to feed in the content",
    "start": "331319",
    "end": "333479"
  },
  {
    "text": "sources and text styling information The",
    "start": "333479",
    "end": "335960"
  },
  {
    "text": "View should",
    "start": "335960",
    "end": "337560"
  },
  {
    "text": "apply during view creation we use obtain",
    "start": "337560",
    "end": "341600"
  },
  {
    "text": "styled attributes to extract the values",
    "start": "341600",
    "end": "344400"
  },
  {
    "text": "of the attributes named in our stylable",
    "start": "344400",
    "end": "346720"
  },
  {
    "text": "block this method returns a typed array",
    "start": "346720",
    "end": "349639"
  },
  {
    "text": "instance which allows us to retrieve",
    "start": "349639",
    "end": "352240"
  },
  {
    "text": "each attribute as the appropriate type",
    "start": "352240",
    "end": "354800"
  },
  {
    "text": "whether it be a drawable Dimension or",
    "start": "354800",
    "end": "357520"
  },
  {
    "text": "color don't forget typed arrays are",
    "start": "357520",
    "end": "360800"
  },
  {
    "text": "heavyweight objects and they should be",
    "start": "360800",
    "end": "362720"
  },
  {
    "text": "recycled immediately after all the",
    "start": "362720",
    "end": "364800"
  },
  {
    "text": "attributes you need have been",
    "start": "364800",
    "end": "367680"
  },
  {
    "text": "extracted now that we've seen how easy",
    "start": "367680",
    "end": "370520"
  },
  {
    "text": "it is to build our own custom content",
    "start": "370520",
    "end": "372840"
  },
  {
    "text": "into a view what about building a custom",
    "start": "372840",
    "end": "375520"
  },
  {
    "text": "layout manager widgets like linear",
    "start": "375520",
    "end": "378160"
  },
  {
    "text": "layout and relative layout have a lot of",
    "start": "378160",
    "end": "381120"
  },
  {
    "text": "code in them to manage child views so",
    "start": "381120",
    "end": "383599"
  },
  {
    "text": "this must be really hard right well",
    "start": "383599",
    "end": "386360"
  },
  {
    "text": "hopefully this next example will",
    "start": "386360",
    "end": "388120"
  },
  {
    "text": "convince you that this is not the case",
    "start": "388120",
    "end": "390919"
  },
  {
    "text": "here we are going to build a View group",
    "start": "390919",
    "end": "392960"
  },
  {
    "text": "that lays out all its child views with",
    "start": "392960",
    "end": "395400"
  },
  {
    "text": "equal spacing in a 3X3 grid this same",
    "start": "395400",
    "end": "399120"
  },
  {
    "text": "effect could be accomplished by nesting",
    "start": "399120",
    "end": "401039"
  },
  {
    "text": "linear layouts inside of linear layouts",
    "start": "401039",
    "end": "403360"
  },
  {
    "text": "inside of linear layouts creating a",
    "start": "403360",
    "end": "405759"
  },
  {
    "text": "hierarchy many many levels deep however",
    "start": "405759",
    "end": "409120"
  },
  {
    "text": "with just a little bit of effort we can",
    "start": "409120",
    "end": "411120"
  },
  {
    "text": "drastically flatten that hierarchy into",
    "start": "411120",
    "end": "414120"
  },
  {
    "text": "something much more",
    "start": "414120",
    "end": "416879"
  },
  {
    "text": "performant just as with views view",
    "start": "416879",
    "end": "419639"
  },
  {
    "text": "groups are responsible for measuring",
    "start": "419639",
    "end": "421479"
  },
  {
    "text": "themselves for this example we are",
    "start": "421479",
    "end": "423639"
  },
  {
    "text": "Computing the size of the View group",
    "start": "423639",
    "end": "425360"
  },
  {
    "text": "using the framework's get default size",
    "start": "425360",
    "end": "427759"
  },
  {
    "text": "method which essentially Returns the",
    "start": "427759",
    "end": "429960"
  },
  {
    "text": "size provided by the measure spec in all",
    "start": "429960",
    "end": "432400"
  },
  {
    "text": "cases except when an exact size",
    "start": "432400",
    "end": "434840"
  },
  {
    "text": "requirement is imposed by the parent",
    "start": "434840",
    "end": "437840"
  },
  {
    "text": "view group has one more job doing",
    "start": "437840",
    "end": "439960"
  },
  {
    "text": "measurement though it must also tell all",
    "start": "439960",
    "end": "442800"
  },
  {
    "text": "its child views to measure themselves we",
    "start": "442800",
    "end": "445879"
  },
  {
    "text": "want to have each view take up exactly",
    "start": "445879",
    "end": "447960"
  },
  {
    "text": "onethird of both the containers height",
    "start": "447960",
    "end": "450520"
  },
  {
    "text": "and width this is done by constructing a",
    "start": "450520",
    "end": "453720"
  },
  {
    "text": "new measure spec with the computed",
    "start": "453720",
    "end": "456039"
  },
  {
    "text": "fraction of the view size and the mode",
    "start": "456039",
    "end": "458360"
  },
  {
    "text": "flag set to exactly this will notify",
    "start": "458360",
    "end": "461840"
  },
  {
    "text": "each child view that they must be",
    "start": "461840",
    "end": "464039"
  },
  {
    "text": "measured to exactly the size we are",
    "start": "464039",
    "end": "466639"
  },
  {
    "text": "giving",
    "start": "466639",
    "end": "467639"
  },
  {
    "text": "them one method of dispatching these",
    "start": "467639",
    "end": "470400"
  },
  {
    "text": "commands is to call measure on every",
    "start": "470400",
    "end": "473039"
  },
  {
    "text": "child view but there are also helper",
    "start": "473039",
    "end": "475400"
  },
  {
    "text": "methods inside a View group to simplify",
    "start": "475400",
    "end": "477800"
  },
  {
    "text": "this process in our example here we are",
    "start": "477800",
    "end": "481240"
  },
  {
    "text": "calling measure children which applies",
    "start": "481240",
    "end": "483560"
  },
  {
    "text": "the same spec to every child view of",
    "start": "483560",
    "end": "486840"
  },
  {
    "text": "course we are still required to Mark our",
    "start": "486840",
    "end": "489159"
  },
  {
    "text": "own Dimensions as well via set measure",
    "start": "489159",
    "end": "491400"
  },
  {
    "text": "Dimension before returning from this",
    "start": "491400",
    "end": "495800"
  },
  {
    "text": "method after measurement view groups are",
    "start": "496159",
    "end": "499319"
  },
  {
    "text": "also responsible for setting the bounds",
    "start": "499319",
    "end": "501400"
  },
  {
    "text": "of their child views through the on",
    "start": "501400",
    "end": "503479"
  },
  {
    "text": "layout call back with our fixed size",
    "start": "503479",
    "end": "506199"
  },
  {
    "text": "grid this is pretty straightforward we",
    "start": "506199",
    "end": "508639"
  },
  {
    "text": "first deter DET based on index which row",
    "start": "508639",
    "end": "511599"
  },
  {
    "text": "and column the view is in we can then",
    "start": "511599",
    "end": "513880"
  },
  {
    "text": "call layout on the child and we can set",
    "start": "513880",
    "end": "516399"
  },
  {
    "text": "its Left Right top and bottom position",
    "start": "516399",
    "end": "520279"
  },
  {
    "text": "values notice that inside layout we can",
    "start": "520279",
    "end": "523000"
  },
  {
    "text": "use the get measured width and get",
    "start": "523000",
    "end": "524880"
  },
  {
    "text": "measured height methods on The View as",
    "start": "524880",
    "end": "527000"
  },
  {
    "text": "well these will always be valid at this",
    "start": "527000",
    "end": "529640"
  },
  {
    "text": "stage since the measurement pass comes",
    "start": "529640",
    "end": "532080"
  },
  {
    "text": "before layout and this is a handy way to",
    "start": "532080",
    "end": "534839"
  },
  {
    "text": "set the bounding box of each child",
    "start": "534839",
    "end": "538200"
  },
  {
    "text": "view here's another tip measurement and",
    "start": "538200",
    "end": "541880"
  },
  {
    "text": "layout can be as simple or complex as",
    "start": "541880",
    "end": "544399"
  },
  {
    "text": "you make it it is easy to get lost",
    "start": "544399",
    "end": "547399"
  },
  {
    "text": "attempting to handle every possible",
    "start": "547399",
    "end": "549560"
  },
  {
    "text": "configuration change that may affect how",
    "start": "549560",
    "end": "551920"
  },
  {
    "text": "you layout child views stick to writing",
    "start": "551920",
    "end": "554920"
  },
  {
    "text": "code for the cases your application will",
    "start": "554920",
    "end": "557680"
  },
  {
    "text": "actually",
    "start": "557680",
    "end": "560000"
  },
  {
    "text": "encounter while view groups don't",
    "start": "560000",
    "end": "562279"
  },
  {
    "text": "generally draw any content of their own",
    "start": "562279",
    "end": "564720"
  },
  {
    "text": "there are many situations where this",
    "start": "564720",
    "end": "566279"
  },
  {
    "text": "could be useful there are two helpful",
    "start": "566279",
    "end": "568720"
  },
  {
    "text": "instances",
    "start": "568720",
    "end": "569880"
  },
  {
    "text": "where we can ask View group to do some",
    "start": "569880",
    "end": "572240"
  },
  {
    "text": "drawing the first is inside of dispatch",
    "start": "572240",
    "end": "574959"
  },
  {
    "text": "draw after super has been called at this",
    "start": "574959",
    "end": "578079"
  },
  {
    "text": "stage child views have already been",
    "start": "578079",
    "end": "580079"
  },
  {
    "text": "drawn and we have an opportunity to do",
    "start": "580079",
    "end": "582640"
  },
  {
    "text": "additional drawing on top in our example",
    "start": "582640",
    "end": "586120"
  },
  {
    "text": "we are leveraging this to draw grid",
    "start": "586120",
    "end": "588040"
  },
  {
    "text": "lines over our box views the second is",
    "start": "588040",
    "end": "591399"
  },
  {
    "text": "using the same on draw callback as we",
    "start": "591399",
    "end": "594000"
  },
  {
    "text": "saw before with view anything we draw",
    "start": "594000",
    "end": "597000"
  },
  {
    "text": "here will be drawn before the child",
    "start": "597000",
    "end": "599160"
  },
  {
    "text": "views and thus will show up underneath",
    "start": "599160",
    "end": "601160"
  },
  {
    "text": "them this can be helpful for drawing any",
    "start": "601160",
    "end": "603720"
  },
  {
    "text": "type of dynamic backgrounds or selector",
    "start": "603720",
    "end": "606760"
  },
  {
    "text": "States if you wish to put code into the",
    "start": "606760",
    "end": "609839"
  },
  {
    "text": "on draw of a View group you must also",
    "start": "609839",
    "end": "612399"
  },
  {
    "text": "remember to enable drawing callbacks",
    "start": "612399",
    "end": "615120"
  },
  {
    "text": "with set will not draw false otherwise",
    "start": "615120",
    "end": "618320"
  },
  {
    "text": "your on draw method will never be",
    "start": "618320",
    "end": "620399"
  },
  {
    "text": "triggered this is because view groups by",
    "start": "620399",
    "end": "622880"
  },
  {
    "text": "default have self-drawing",
    "start": "622880",
    "end": "626279"
  },
  {
    "text": "disabled so back to attributes for a",
    "start": "626279",
    "end": "628680"
  },
  {
    "text": "minute",
    "start": "628680",
    "end": "629560"
  },
  {
    "text": "what if the attributes we want to feed",
    "start": "629560",
    "end": "631240"
  },
  {
    "text": "into the view don't already exist in the",
    "start": "631240",
    "end": "633480"
  },
  {
    "text": "platform and it would be awkward to try",
    "start": "633480",
    "end": "635639"
  },
  {
    "text": "and reuse one for a different purpose",
    "start": "635639",
    "end": "638480"
  },
  {
    "text": "well in that case we can Define custom",
    "start": "638480",
    "end": "640880"
  },
  {
    "text": "attributes inside of our styleable block",
    "start": "640880",
    "end": "643639"
  },
  {
    "text": "the only difference here is that we must",
    "start": "643639",
    "end": "646000"
  },
  {
    "text": "also Define the type of data that",
    "start": "646000",
    "end": "647880"
  },
  {
    "text": "attribute represents something we did",
    "start": "647880",
    "end": "650200"
  },
  {
    "text": "not need to do for the framework since",
    "start": "650200",
    "end": "652200"
  },
  {
    "text": "it already has them",
    "start": "652200",
    "end": "653920"
  },
  {
    "text": "predefined here we are defining a",
    "start": "653920",
    "end": "656160"
  },
  {
    "text": "dimension and a color attribute to",
    "start": "656160",
    "end": "658360"
  },
  {
    "text": "provide the sty Dialing for the Box's",
    "start": "658360",
    "end": "660240"
  },
  {
    "text": "grid lines via",
    "start": "660240",
    "end": "663560"
  },
  {
    "text": "XML now we can apply these attributes",
    "start": "663920",
    "end": "666600"
  },
  {
    "text": "externally in our layouts notice that",
    "start": "666600",
    "end": "669160"
  },
  {
    "text": "attributes defined in our own",
    "start": "669160",
    "end": "671040"
  },
  {
    "text": "application package require a separate",
    "start": "671040",
    "end": "673519"
  },
  {
    "text": "name space that points to our internal",
    "start": "673519",
    "end": "675720"
  },
  {
    "text": "APK resources notice also that our",
    "start": "675720",
    "end": "679120"
  },
  {
    "text": "custom layout behaves no differently",
    "start": "679120",
    "end": "681560"
  },
  {
    "text": "than the other layout widgets in the",
    "start": "681560",
    "end": "683000"
  },
  {
    "text": "framework we can simply ADD child views",
    "start": "683000",
    "end": "685639"
  },
  {
    "text": "to it directly through the XML layout",
    "start": "685639",
    "end": "688040"
  },
  {
    "text": "file",
    "start": "688040",
    "end": "690959"
  },
  {
    "text": "just for fun we will even include the",
    "start": "691000",
    "end": "693000"
  },
  {
    "text": "layout inside itself to create the full",
    "start": "693000",
    "end": "695600"
  },
  {
    "text": "9x9 effect that you saw in the earlier",
    "start": "695600",
    "end": "698880"
  },
  {
    "text": "screenshot we have also defined a",
    "start": "698880",
    "end": "701120"
  },
  {
    "text": "slightly thicker grid separator to",
    "start": "701120",
    "end": "703279"
  },
  {
    "text": "distinguish the major blocks from the",
    "start": "703279",
    "end": "705079"
  },
  {
    "text": "minor",
    "start": "705079",
    "end": "706440"
  },
  {
    "text": "blocks I hope that now you can see how",
    "start": "706440",
    "end": "709240"
  },
  {
    "text": "simple it is to get started building",
    "start": "709240",
    "end": "711000"
  },
  {
    "text": "custom views and layouts reduced",
    "start": "711000",
    "end": "713600"
  },
  {
    "text": "dependence on the framework rigids leads",
    "start": "713600",
    "end": "715959"
  },
  {
    "text": "to better user interfaces and less",
    "start": "715959",
    "end": "718200"
  },
  {
    "text": "clutter in view hierarchy your users and",
    "start": "718200",
    "end": "721760"
  },
  {
    "text": "your devices will thank you for it be",
    "start": "721760",
    "end": "724560"
  },
  {
    "text": "sure to visit the GitHub link to find",
    "start": "724560",
    "end": "726600"
  },
  {
    "text": "full examples shown here as well as",
    "start": "726600",
    "end": "729200"
  },
  {
    "text": "others to help you get comfortable",
    "start": "729200",
    "end": "730800"
  },
  {
    "text": "building custom views thanks for your",
    "start": "730800",
    "end": "733519"
  },
  {
    "text": "time today and I hope you learn",
    "start": "733519",
    "end": "735279"
  },
  {
    "text": "something",
    "start": "735279",
    "end": "737600"
  },
  {
    "text": "new",
    "start": "744360",
    "end": "747360"
  }
]