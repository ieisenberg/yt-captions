[
  {
    "text": "yeah presenting good great uh thanks for the where did he go oh uh introduction Alexi thanks for the invite and wow",
    "start": "25640",
    "end": "33000"
  },
  {
    "text": "thanks for coming out I should have poured a beer instead of some water or something that's a lot of",
    "start": "33000",
    "end": "38760"
  },
  {
    "text": "people um so um these are not the the",
    "start": "38760",
    "end": "43879"
  },
  {
    "text": "classic Scala stairs but um if you ever have a chance uh go see the S BL Tower",
    "start": "43879",
    "end": "50640"
  },
  {
    "text": "in loan it's made of wood and a couple of screws here and there I think it's it's pretty",
    "start": "50640",
    "end": "56440"
  },
  {
    "text": "cool anyway um so I don't have discounts for training right now but I do have",
    "start": "56440",
    "end": "61920"
  },
  {
    "text": "something that's almost as good maybe even better probably more fun so schola",
    "start": "61920",
    "end": "67159"
  },
  {
    "text": "day is in New York this year uh it'll be mid June and if you write that down or",
    "start": "67159",
    "end": "72680"
  },
  {
    "text": "you know Google this thing I'm sure Google has indexed my slides by now so you can you know along with everybody",
    "start": "72680",
    "end": "78400"
  },
  {
    "text": "else out there get a nice discount I just want to show you the website real quick um it's kind of dangerous when you",
    "start": "78400",
    "end": "83759"
  },
  {
    "text": "go to it because you're bound not to come out um as soon as the II wants to",
    "start": "83759",
    "end": "90560"
  },
  {
    "text": "work with me Mike seamour designer did a great job um we just fin finalized the",
    "start": "90560",
    "end": "95600"
  },
  {
    "text": "program so um not during my talk but have a look and uh sign",
    "start": "95600",
    "end": "102000"
  },
  {
    "text": "up so um in addition to thanking um the hosts and uh and the organizers of the",
    "start": "102000",
    "end": "108960"
  },
  {
    "text": "of the Meetup um also really like to thank our contributors um a quick link to GitHub here um so we",
    "start": "108960",
    "end": "117920"
  },
  {
    "text": "have about a this will give you the top 100 and this is about a decade worth of contributions to Scala and you",
    "start": "117920",
    "end": "124079"
  },
  {
    "text": "definitely see I don't know what happened here but there's like a spike and commit traffic um oh yeah that's",
    "start": "124079",
    "end": "131160"
  },
  {
    "text": "type safe um so there's a lot of view in the room maybe even that are in this",
    "start": "131160",
    "end": "136879"
  },
  {
    "text": "list so thanks a lot for your uh contributions for your issues that you've reported for your mailing list",
    "start": "136879",
    "end": "143000"
  },
  {
    "text": "for your kind answers um yeah I'm not going to read those numbers but I'm I'm I'm very",
    "start": "143000",
    "end": "149319"
  },
  {
    "text": "excited see that and we're hard at work um making sure that our infrastructure can deal with all those poor",
    "start": "149319",
    "end": "154519"
  },
  {
    "text": "requests so um I also like um",
    "start": "154519",
    "end": "159959"
  },
  {
    "text": "controversy and um I'm going to start with um well maybe this isn't",
    "start": "159959",
    "end": "165080"
  },
  {
    "text": "controversial maybe it is um I'm going to say Scola is simple and um I'm going",
    "start": "165080",
    "end": "170440"
  },
  {
    "text": "to give you evidence to the contrary um during this talk and then I'm going to refute that evidence and um I'll try to",
    "start": "170440",
    "end": "177440"
  },
  {
    "text": "kind of come back to my claim um as it goes with controversy feel free to",
    "start": "177440",
    "end": "182560"
  },
  {
    "text": "disagree interrupt yell out questions you know what's at stake um yeah comments it doesn't even",
    "start": "182560",
    "end": "189799"
  },
  {
    "text": "have to be a question I don't care so it's gonna I'm I'm going to do my best to make it super interactive um I'd really appreciate whenever stop me when",
    "start": "189799",
    "end": "196360"
  },
  {
    "text": "it's not clear or hit the fast forward button when I get into a rant or something so I'm serious about this and",
    "start": "196360",
    "end": "202720"
  },
  {
    "text": "we spend a lot of time thinking about this um there's a lot of surface area around Scala but we feel it all comes",
    "start": "202720",
    "end": "210239"
  },
  {
    "text": "back to a nice elegant core and um that's because Scala is a unifier we",
    "start": "210239",
    "end": "217000"
  },
  {
    "text": "didn't just tack functions onto Java um we figured out how to fuse functions and",
    "start": "217000",
    "end": "222840"
  },
  {
    "text": "objects together and figure out what the right scales are for these abstractions",
    "start": "222840",
    "end": "227920"
  },
  {
    "text": "and I think that's that's kind of the theme in in in learning Scala is when is it appropriate to use a function when is",
    "start": "227920",
    "end": "233560"
  },
  {
    "text": "it appropriate to to compose traits um when you know when do you when do you mutate when shouldn't you um and that's",
    "start": "233560",
    "end": "241920"
  },
  {
    "text": "definitely an an a challenge for the community and for us as Educators um um",
    "start": "241920",
    "end": "247640"
  },
  {
    "text": "to explain that better um and I think a lot of the confusion about complexity comes from from making these",
    "start": "247640",
    "end": "255000"
  },
  {
    "text": "choices um so it also unifies experimentation um I don't know just",
    "start": "255000",
    "end": "260519"
  },
  {
    "text": "curious who's used to scyla repple before see yeah that's what I thought",
    "start": "260519",
    "end": "265600"
  },
  {
    "text": "yeah I love the repple um I I think that's that's just great and you know the same kind of code that you write",
    "start": "265600",
    "end": "271479"
  },
  {
    "text": "there the same compiler that you're running um you know you can do large scale uh uh development with that as",
    "start": "271479",
    "end": "277199"
  },
  {
    "text": "well and I think that's another nice unification um that's often forgotten so I'm going to venture into demo territory",
    "start": "277199",
    "end": "284919"
  },
  {
    "text": "um wow that looks pretty small can you read that or no no do you mind if I just",
    "start": "284919",
    "end": "291440"
  },
  {
    "text": "quickly kind of I I even learned CSS for this talk can you believe it",
    "start": "291440",
    "end": "298560"
  },
  {
    "text": "um um",
    "start": "298560",
    "end": "305400"
  },
  {
    "text": "so oh I I would claim that's true yes because now I have to kind of GP",
    "start": "306320",
    "end": "311960"
  },
  {
    "text": "everywhere and figure out where the font sizes for that thing I'm pretty sure I looked it up before maybe it's",
    "start": "311960",
    "end": "319720"
  },
  {
    "text": "here yeah there we go so like I said I'm going to hit you",
    "start": "319720",
    "end": "325120"
  },
  {
    "text": "with my CSS book that I don't have so don't worry if you ever claim that Scola is in simple so",
    "start": "325120",
    "end": "332840"
  },
  {
    "text": "see almost feels as good as as fixing a bug in scaly to say anyway um so let's",
    "start": "333560",
    "end": "340880"
  },
  {
    "text": "print some stuff to prove that this is not scripted I'm just going to take a suggestion and this counts for the book",
    "start": "340880",
    "end": "346880"
  },
  {
    "text": "If you have a good suggestion for my print line you may win a book so what should I",
    "start": "346880",
    "end": "352360"
  },
  {
    "text": "print nothing okay nothing that's too bad you had your",
    "start": "352360",
    "end": "357759"
  },
  {
    "text": "chance but not going to win anything right so this thing um is sending to the",
    "start": "357759",
    "end": "365599"
  },
  {
    "text": "reppel and you know the repple is doing its thing with it and sending it back I also learned websockets this weekend it",
    "start": "365599",
    "end": "371720"
  },
  {
    "text": "was great fun um so that's what I'm going to be doing",
    "start": "371720",
    "end": "376759"
  },
  {
    "text": "during this talk and if anybody has questions about Scala I'll be happy to address them in this little box here if",
    "start": "376759",
    "end": "382039"
  },
  {
    "text": "you want to try something or uh no not so much okay that's what I thought um",
    "start": "382039",
    "end": "387520"
  },
  {
    "text": "great so behind the scenes uh um I'm using unfiltered because that's the first Google hit that I got for",
    "start": "387520",
    "end": "393400"
  },
  {
    "text": "websockets and then I copy pasted some deprecated code um websocket server is",
    "start": "393400",
    "end": "398599"
  },
  {
    "text": "apparently deprecated but I couldn't figure out how to do it better and shorter um so you open a socket uh you",
    "start": "398599",
    "end": "404160"
  },
  {
    "text": "get the repple um and you pass a partial function to the websocket Constructor",
    "start": "404160",
    "end": "409800"
  },
  {
    "text": "which is defined using a pattern match here there's no match statement because you're just constructing a partial function literal and I just showed you",
    "start": "409800",
    "end": "416639"
  },
  {
    "text": "two cases there's a closed case but it's not super interesting so you can open a socket you can receive a message which",
    "start": "416639",
    "end": "422479"
  },
  {
    "text": "has some text and then I interpret that text and send it back to all my sockets I don't really care about security of",
    "start": "422479",
    "end": "428400"
  },
  {
    "text": "any of that um it's running a local host what could possibly go wrong oh yeah no",
    "start": "428400",
    "end": "434039"
  },
  {
    "text": "that's what's going to go wrong with increasing your font size okay so this is the uh interpreter part um adri yeah",
    "start": "434039",
    "end": "442800"
  },
  {
    "text": "you change the color your keyword uh I'm glad you asked Jamie I didn't",
    "start": "442800",
    "end": "450199"
  },
  {
    "text": "that's an excellent question um I'm pretty sure I can do that I've",
    "start": "450199",
    "end": "457720"
  },
  {
    "text": "been um yeah that's in default. CSS I love",
    "start": "457720",
    "end": "463840"
  },
  {
    "text": "those names uh keywords what color would you like white",
    "start": "463840",
    "end": "470960"
  },
  {
    "text": "white that should do",
    "start": "470960",
    "end": "474520"
  },
  {
    "text": "it well you know it's just white it's not very inspiring I spent so much time tweaking all these colors no more color",
    "start": "476000",
    "end": "482560"
  },
  {
    "text": "changes okay so uh I know I said you could interrupt me whenever but I take it back so um we're going to interpret",
    "start": "482560",
    "end": "491360"
  },
  {
    "text": "the data we get in is just separated by colon so we're just calling into this Java function that's going to give us back an array doesn't matter we can also",
    "start": "491360",
    "end": "497879"
  },
  {
    "text": "patter match and arrays uh I want the first thing before the colon to be run and then that's going to I'm going to",
    "start": "497879",
    "end": "503560"
  },
  {
    "text": "put that in a variable that's going to be my source code that I got from my from my JavaScript on the on the server",
    "start": "503560",
    "end": "509840"
  },
  {
    "text": "and I use server very Loosely uh just you know um on the client I mean sorry um",
    "start": "509840",
    "end": "516919"
  },
  {
    "text": "and so I'm going to um redirect the output stream from The Interpreter and I make it'll make a string out of it and",
    "start": "516919",
    "end": "523240"
  },
  {
    "text": "that's what I'm going to send back you might also notice some funky pattern matching going on around here with reg",
    "start": "523240",
    "end": "529360"
  },
  {
    "text": "x's and string interpolation that's new in 210 and it looks crazy I'm going to explain it",
    "start": "529360",
    "end": "535440"
  },
  {
    "text": "later any questions so far any other caller requests",
    "start": "535440",
    "end": "540839"
  },
  {
    "text": "no all right so there's links on the on the slides to the full code and so I",
    "start": "540839",
    "end": "546240"
  },
  {
    "text": "won't bore you with that but so this is just calling into the to the to the Scala reppel that's that's part of the",
    "start": "546240",
    "end": "551519"
  },
  {
    "text": "Scala compiler jar and to 11 it will be a separate jar because we're kind of working on slimming down or",
    "start": "551519",
    "end": "557079"
  },
  {
    "text": "jars um so I'll come back to this um since I promised you you could interrupt",
    "start": "557079",
    "end": "563040"
  },
  {
    "text": "me at any time I kind of have to hedge my bets and tell you everything about Scout 210 in the next five slides and",
    "start": "563040",
    "end": "568640"
  },
  {
    "text": "then we'll just kind of go off and Rants and uh tangents and and so on so I'll",
    "start": "568640",
    "end": "573839"
  },
  {
    "text": "just give you the list you probably read yourself um so the Rewritten pattern matcher uh I had a lot of fun doing that",
    "start": "573839",
    "end": "581240"
  },
  {
    "text": "last year um so I basically just threw it all the code and started from scratch",
    "start": "581240",
    "end": "589000"
  },
  {
    "text": "well actually first we started and then like in 211 now we thrown out the code it's still in 210 if you want it under X old patmat um string interpolation I'll",
    "start": "589000",
    "end": "598000"
  },
  {
    "text": "talk about that because I think it's really neat the way we did it um I won't talk about value class as much because I",
    "start": "598000",
    "end": "603720"
  },
  {
    "text": "don't think it's very neat right now um but I'll I'll take questions about it if",
    "start": "603720",
    "end": "608959"
  },
  {
    "text": "you if you insist implicit classes are great um feature Imports uh allowing you",
    "start": "608959",
    "end": "615360"
  },
  {
    "text": "to kind of trim down the subset of Scala that you're using in your project um you know beginning Scala programmers might",
    "start": "615360",
    "end": "621399"
  },
  {
    "text": "not want to Define implicit conversions all over the place it's really cool that you can use ins whatever you were expecting a string but maybe you know",
    "start": "621399",
    "end": "629160"
  },
  {
    "text": "should be programming in different language if you want to do that CSS or something I don't care um Futures and",
    "start": "629160",
    "end": "634440"
  },
  {
    "text": "Promises awesome I know a lot of you um who are actually doing you know the the",
    "start": "634440",
    "end": "639839"
  },
  {
    "text": "amateur coding I was doing this weekend rely on that for for scaling um we have dependent metha types",
    "start": "639839",
    "end": "646320"
  },
  {
    "text": "that me as a type Theory geek really likes and you can bake cakes with that uh really nicely um and we switch to ASM",
    "start": "646320",
    "end": "652639"
  },
  {
    "text": "instead of our uh handrolled uh FJ BG that is well we hardly we kind of knew",
    "start": "652639",
    "end": "659040"
  },
  {
    "text": "know you too too well um and then there's some experimental stuff actually the first bullet isn't experimental but",
    "start": "659040",
    "end": "664440"
  },
  {
    "text": "it's really cool to experiment with so I kind of put it in this uh category",
    "start": "664440",
    "end": "669639"
  },
  {
    "text": "reflection is experimental everybody did you hear it it's experimental I mean I really like that you're using it but we're probably going to change it uh",
    "start": "669639",
    "end": "676560"
  },
  {
    "text": "we're going to fix stuff in there and same thing with macros so I think I love macros I think they're great I was very skeptical from the beginning I have to",
    "start": "676560",
    "end": "682800"
  },
  {
    "text": "say uh but I think people have been doing a lot of cool stuff and we're still thinking about how to do it just",
    "start": "682800",
    "end": "688399"
  },
  {
    "text": "right and just Scala way so don't bet the house yet on Macros is all I can say",
    "start": "688399",
    "end": "694959"
  },
  {
    "text": "there will be some kind of macros I think that's that's pretty much for sure um so yeah I like I said weode from",
    "start": "694959",
    "end": "702839"
  },
  {
    "text": "scratch uh a lot of longstanding bugs I'm sure people using play or unfiltered have seen the exponential bite goat",
    "start": "702839",
    "end": "709720"
  },
  {
    "text": "explosions when you Nest uh yeah did you see them or they have a",
    "start": "709720",
    "end": "715880"
  },
  {
    "text": "question sorry why do we need reflection why do you need reflection oh that's that's pretty",
    "start": "715880",
    "end": "723279"
  },
  {
    "text": "philosophical um",
    "start": "723279",
    "end": "728519"
  },
  {
    "text": "well so reflection is really about turning your program into Data like you know what lisp kind of does without even",
    "start": "728560",
    "end": "736720"
  },
  {
    "text": "mentioning as a separate thing um we like to reflect over our stuff because",
    "start": "736720",
    "end": "742120"
  },
  {
    "text": "we're you know kind of all philosophers as programmers um so I'm sorry I I",
    "start": "742120",
    "end": "748680"
  },
  {
    "text": "really want to give you a practical answer can you elaborate a little bit on on on uhuh yeah so for example this",
    "start": "748680",
    "end": "758160"
  },
  {
    "text": "talk oh pattern matching um well your pattern match on the structures you get back from reflection but you can't",
    "start": "759519",
    "end": "765199"
  },
  {
    "text": "really use pattern matching until you have an object in your hands right reflection gets the thing from meta to",
    "start": "765199",
    "end": "770560"
  },
  {
    "text": "to to base level to to data so that you can actually pattern match on it without reflection there is no way to go between",
    "start": "770560",
    "end": "777279"
  },
  {
    "text": "those two levels so so reflection is your handle on kind of what's out there around you that you like The Ether that",
    "start": "777279",
    "end": "782959"
  },
  {
    "text": "you can touch if you don't have reflection and then you get reflection and you suddenly you can say hey here's",
    "start": "782959",
    "end": "788760"
  },
  {
    "text": "a tree and this is actually a tree that's in my program so usually you can't really like reason about what line",
    "start": "788760",
    "end": "794959"
  },
  {
    "text": "number you're on or you know what like the the tree of your argument looks like you get the value that the tree",
    "start": "794959",
    "end": "801279"
  },
  {
    "text": "evaluates to but you don't get to see a tree with reflection you can reason about all these things right so I think",
    "start": "801279",
    "end": "807199"
  },
  {
    "text": "the conion is that people jav reflection okay yeah so I",
    "start": "807199",
    "end": "814720"
  },
  {
    "text": "mean it's like Java Reflection but kind of to the max um so it exposes the compiler API to",
    "start": "814720",
    "end": "821360"
  },
  {
    "text": "you essentially um so you you get to see all the the same data structures that the",
    "start": "821360",
    "end": "826760"
  },
  {
    "text": "compiler sees through a slightly simplified lens yes does that you can do a with it um it's it's only you can only",
    "start": "826760",
    "end": "836040"
  },
  {
    "text": "look um you can use bite code sorry you can just yeah I mean the bite code has",
    "start": "836040",
    "end": "842320"
  },
  {
    "text": "been compiled already so I mean you can use all the stuff that you that you would I mean you could use it to write your own aop engine but the actual bite",
    "start": "842320",
    "end": "848839"
  },
  {
    "text": "Cod rewriting isn't that's not we don't do that for you we just give you a way to say like hey are these types subtypes",
    "start": "848839",
    "end": "854480"
  },
  {
    "text": "hey what's in this tree um create a new tree type check it stuff like that so",
    "start": "854480",
    "end": "860120"
  },
  {
    "text": "you can do everything the compiler does except if you want to write it to dis you'll have to do that yourself sorry that's not what reflection is about if",
    "start": "860120",
    "end": "866320"
  },
  {
    "text": "you want to change those class files you know that's aob platform that's why we love Java right we have all these facilities for us that we don't need we",
    "start": "866320",
    "end": "872519"
  },
  {
    "text": "don't need to do that does that answer your question or yeah okay um uh okay I was just buying",
    "start": "872519",
    "end": "880040"
  },
  {
    "text": "some time to think of an answer I'm sorry about the the kind of slow start there um so um pattern matching right so",
    "start": "880040",
    "end": "888360"
  },
  {
    "text": "exponential space uh blowup was my is one of my favorite bugs in a pattern matcher you write a really innocuous",
    "start": "888360",
    "end": "894440"
  },
  {
    "text": "looking unapply or actually you don't even see the unapply you just write a pattern on on lists and all of a sudden",
    "start": "894440",
    "end": "900560"
  },
  {
    "text": "you get you run out of bite codes in your method um and people get really confused",
    "start": "900560",
    "end": "905920"
  },
  {
    "text": "about that and there's a lot of you can Google it and you can find a lot of hits about that so that's fixed now so don't worry about it I I saw unfiltered has",
    "start": "905920",
    "end": "911399"
  },
  {
    "text": "some complaints about that in their docs but if you're running on 210 it's not a problem anymore and the implementation is",
    "start": "911399",
    "end": "917880"
  },
  {
    "text": "actually something that we understand now and um are actively working on on improving it in 211 doing some neat",
    "start": "917880",
    "end": "924480"
  },
  {
    "text": "stuff there um okay so um what kind of is new in the pattern matcher is that um",
    "start": "924480",
    "end": "931880"
  },
  {
    "text": "extractors which are those unapply method calls that we'll see in a second um they're now um also subject to um",
    "start": "931880",
    "end": "939920"
  },
  {
    "text": "enrichment I can't say the other thing anymore uh you know like the MTV show um",
    "start": "939920",
    "end": "945720"
  },
  {
    "text": "about rides and making them pretty um uh so enriching um uh methods is something",
    "start": "945720",
    "end": "952639"
  },
  {
    "text": "that you can do also in patterns now and we'll put that to good use later sorry if this is not making any kind of sense",
    "start": "952639",
    "end": "958079"
  },
  {
    "text": "I'll have an example of that later and we're using a little sat solver in pattern matcher to give you really nice error messages of when you match on",
    "start": "958079",
    "end": "963839"
  },
  {
    "text": "something and says hey did you think of this case um or this case is never going to be hit um I'll also have some",
    "start": "963839",
    "end": "969880"
  },
  {
    "text": "examples of that and if you want to do really crazy stuff you can virtualize your matches and you can kind of reflect",
    "start": "969880",
    "end": "974920"
  },
  {
    "text": "on your match um but I won't go into that in this talk but um if that's kind of the kind of stuff you like to do in",
    "start": "974920",
    "end": "980759"
  },
  {
    "text": "the weekend I would um click on that link um and play with it so um pattern",
    "start": "980759",
    "end": "988240"
  },
  {
    "text": "matching can be quite exhausting and um you know especially making sure that you",
    "start": "988240",
    "end": "993519"
  },
  {
    "text": "covered all your cases um exhaustively H I just love puns um so when you run this",
    "start": "993519",
    "end": "1003120"
  },
  {
    "text": "um actually the it's going to crash but you can't see it because someone made me increase the font size",
    "start": "1003120",
    "end": "1010839"
  },
  {
    "text": "um um probably can do something like this no oh no it's not going to crash",
    "start": "1010839",
    "end": "1017600"
  },
  {
    "text": "cuz I actually don't run it I'll make it crash later um so the compiler is actually saying hey dude the match is",
    "start": "1017600",
    "end": "1023720"
  },
  {
    "text": "not exhaustive what happens if you pass in a none so um first all this is",
    "start": "1023720",
    "end": "1029720"
  },
  {
    "text": "familiar syntax to everybody right you would have stopped me if it wasn't",
    "start": "1029720",
    "end": "1036199"
  },
  {
    "text": "okay um so let me see if I can navigate in this thing right so check none",
    "start": "1036559",
    "end": "1042760"
  },
  {
    "text": "because this is one of the counter examples that the set solver came up with for for um you know not crashing",
    "start": "1042760",
    "end": "1050039"
  },
  {
    "text": "um so let's try and see what happens oh  yeah now we get a whole other kind of problem um so luckily I can still",
    "start": "1050039",
    "end": "1058600"
  },
  {
    "text": "scroll around so yeah you get a match error because we weren't anticipating getting a none I'm sure you've seen there's a few H pattern matching in",
    "start": "1058600",
    "end": "1064480"
  },
  {
    "text": "non-trivial cases before so I'm just going to clear that box good thing that's in there and we'll just",
    "start": "1064480",
    "end": "1071039"
  },
  {
    "text": "handle that case as well and now we're all good okay it may",
    "start": "1071039",
    "end": "1079480"
  },
  {
    "text": "still fail because you're not handling all kinds of uh thingies in some so",
    "start": "1079480",
    "end": "1085720"
  },
  {
    "text": "what's the last bit and this doesn't count for a book but if you get it right I'll be really",
    "start": "1085720",
    "end": "1090760"
  },
  {
    "text": "happy so what is the missing case here I'll give you the case for",
    "start": "1090760",
    "end": "1098280"
  },
  {
    "text": "free are you sure let's see I great job everybody um yeah so",
    "start": "1099440",
    "end": "1108559"
  },
  {
    "text": "exhaustivity mat checking for you the P matcher",
    "start": "1108559",
    "end": "1113600"
  },
  {
    "text": "um uh and so just let me take a moment to come back to the theme of the night here is that Scala is unifier and then",
    "start": "1113640",
    "end": "1120679"
  },
  {
    "text": "the thus simple is kind of my my theorem uh because if you unify everything",
    "start": "1120679",
    "end": "1126360"
  },
  {
    "text": "together it's kind of like this very small chord that you need to understand and everything kind of generalizes from",
    "start": "1126360",
    "end": "1132000"
  },
  {
    "text": "that um so extractors reconcile pattern matching which people in the o community",
    "start": "1132000",
    "end": "1138840"
  },
  {
    "text": "in the beginning where like why why why would you want to break encapsulation just to be you know conveniently look at",
    "start": "1138840",
    "end": "1144360"
  },
  {
    "text": "lists who does that anyway I mean just you know write a for Loop or something uh don't forget to increase your counter",
    "start": "1144360",
    "end": "1151559"
  },
  {
    "text": "um so well the research that was done at epfl where scol was developed um came up",
    "start": "1151559",
    "end": "1158320"
  },
  {
    "text": "with a with a nice idea of of implementing extractors which let you configure the way that you actually uh",
    "start": "1158320",
    "end": "1164039"
  },
  {
    "text": "decompose the stuff that you've composed so you know Constructors let you make data extractors let you unmake data",
    "start": "1164039",
    "end": "1171120"
  },
  {
    "text": "really there s kind of the Dual um extractors return options because they might not match and that's",
    "start": "1171120",
    "end": "1177520"
  },
  {
    "text": "what you use option for uh and that creates overhead but we have some thoughts on and uh very concrete",
    "start": "1177520",
    "end": "1183440"
  },
  {
    "text": "thoughts on how to fix this with value classes that I'm not going to talk about um unless you make me um and we'll do",
    "start": "1183440",
    "end": "1190320"
  },
  {
    "text": "that in 21 um yeah we also have an idea how to",
    "start": "1190320",
    "end": "1196760"
  },
  {
    "text": "fix that so actually Tuple boxing um doesn't necessarily happen when you when",
    "start": "1196760",
    "end": "1202240"
  },
  {
    "text": "you pattern match on a on a a case class we just go directly to the field accessories of the case class and we",
    "start": "1202240",
    "end": "1209000"
  },
  {
    "text": "want to generalize that mechanism that you can supply your own field accessories that are used for pattern matching so you don't have to put stuff",
    "start": "1209000",
    "end": "1214919"
  },
  {
    "text": "in a tupal only to then just decompose Tuple again and roughly the same thing for options except that there you really",
    "start": "1214919",
    "end": "1220440"
  },
  {
    "text": "need to say yes or no so you use value classes to to get rid of the overhead of the of the option",
    "start": "1220440",
    "end": "1225520"
  },
  {
    "text": "box um so kind of a neat way to Define an extractor is um well really all you",
    "start": "1225520",
    "end": "1231000"
  },
  {
    "text": "need uh for a to to declare your own pattern an i stands for integer just you",
    "start": "1231000",
    "end": "1237000"
  },
  {
    "text": "know try to make it it's a good thing I was anticipating font increases so I didn't use too many tokens so um when",
    "start": "1237000",
    "end": "1243640"
  },
  {
    "text": "your value I has a method unapply and it takes a string for example and returns",
    "start": "1243640",
    "end": "1249120"
  },
  {
    "text": "an option of int um it'll it can be used as a pattern so what this match here",
    "start": "1249120",
    "end": "1257760"
  },
  {
    "text": "really amounts to is saying hey I do unapply 10 now matching that result if",
    "start": "1257760",
    "end": "1263240"
  },
  {
    "text": "it was successful and it was a 10 then we're all good so this allows you to kind of hook in and kind of intercept",
    "start": "1263240",
    "end": "1270200"
  },
  {
    "text": "really like it's kind of aop in a way um the matching mechanism and say no compiler this is what I want you to do",
    "start": "1270200",
    "end": "1276080"
  },
  {
    "text": "not whatever stupid logic you have which in this case we'd say hey this is not this is not a case class right um so",
    "start": "1276080",
    "end": "1283240"
  },
  {
    "text": "util try is based on work by Twitter that they've uh that they had um were pretty happy with so thank you Twitter",
    "start": "1283240",
    "end": "1289320"
  },
  {
    "text": "for contributing and um yeah I don't know we can just run this stuff or take",
    "start": "1289320",
    "end": "1295559"
  },
  {
    "text": "questions about it make it crash or um yeah so again we're not fully exhaustive",
    "start": "1295559",
    "end": "1302480"
  },
  {
    "text": "obviously questions anything no is Twitter main contributor",
    "start": "1302480",
    "end": "1309880"
  },
  {
    "text": "to SC at this point um no I wouldn't say that they they've they've wor we we enjoy working with them for you know",
    "start": "1309880",
    "end": "1316120"
  },
  {
    "text": "making sure that futures for example that we were using fit well with the Futures that they are using and the same for try um but I wouldn't say they've",
    "start": "1316120",
    "end": "1323760"
  },
  {
    "text": "they've contributed um you know usage they're one of the really early adopters and that that's that's been great for us",
    "start": "1323760",
    "end": "1330919"
  },
  {
    "text": "um but I would say that's that's roughly the main thing large percentage of their back I I'm",
    "start": "1330919",
    "end": "1338840"
  },
  {
    "text": "not so you know when I went from fail whale to non fail whale that's kind of roughly coincides with the switch to",
    "start": "1339559",
    "end": "1346039"
  },
  {
    "text": "Scot um I just kind of right I mean I'm allowed to say these things um okay so um that's kind",
    "start": "1346039",
    "end": "1353960"
  },
  {
    "text": "of roughly all I have to say about pattern matching simple stuff um now string interpolation um who's used that",
    "start": "1353960",
    "end": "1361880"
  },
  {
    "text": "before in 210 I guess some people are using 210 okay a couple people so not everybody will be bored with this okay",
    "start": "1361880",
    "end": "1367760"
  },
  {
    "text": "great um so let's say you want to create a string that says how many bottles of",
    "start": "1367760",
    "end": "1372919"
  },
  {
    "text": "beer you have on your wall somewhere and uh you write a first version that just you know takes any string and it plugs",
    "start": "1372919",
    "end": "1380240"
  },
  {
    "text": "it in to another string so what this does really is say hey use the simple string interpolator take a variable",
    "start": "1380240",
    "end": "1386799"
  },
  {
    "text": "called n and just plop it in here instead of the variable then someone else comes around like no no no no that's really unsafe",
    "start": "1386799",
    "end": "1393480"
  },
  {
    "text": "you might you know say no bottles of beer or something setad of zero we can have that um so I want an integer um so",
    "start": "1393480",
    "end": "1401279"
  },
  {
    "text": "I'll write darn and then percent D which is the print F forer so you have an F string string um interpeter in",
    "start": "1401279",
    "end": "1407919"
  },
  {
    "text": "interpolator I'm just going to call Interpol if that's okay with everybody it's too it's too complicated um and",
    "start": "1407919",
    "end": "1413600"
  },
  {
    "text": "actually the cool thing about this is that the compiler will actually say hey um this has to be an integer and in this",
    "start": "1413600",
    "end": "1419360"
  },
  {
    "text": "case luckily we supplied one um so here the compiler is going to say nope can do",
    "start": "1419360",
    "end": "1424640"
  },
  {
    "text": "that and I'll prove it to you if it fits on the screen right so the compiler says oh you",
    "start": "1424640",
    "end": "1432320"
  },
  {
    "text": "gave me a double a sneaky sneaky I was expecting an integer and it's actually not the compiler who's saying that which",
    "start": "1432320",
    "end": "1438039"
  },
  {
    "text": "is the cool thing it's a macro um and I'm kind of going to work my way to",
    "start": "1438039",
    "end": "1444120"
  },
  {
    "text": "explaining how this mechanism Works um so um how does string interpolation work",
    "start": "1444120",
    "end": "1453000"
  },
  {
    "text": "well you drop those dollar prefixed let's call them holes in your string um those are becoming variables um pack the",
    "start": "1453000",
    "end": "1459679"
  },
  {
    "text": "other parts in a string context which is a case class in a standard Library um and then call the the Interpol thingy uh",
    "start": "1459679",
    "end": "1467600"
  },
  {
    "text": "which is named in the prefix by whatever uh is um you know SF or whatever you",
    "start": "1467600",
    "end": "1472760"
  },
  {
    "text": "want it does it's not built into the language that's how we keep it simple if you want to add another one I'll show",
    "start": "1472760",
    "end": "1478279"
  },
  {
    "text": "you how in a couple minutes and then those holes are passed as arguments to that thing so you're",
    "start": "1478279",
    "end": "1483880"
  },
  {
    "text": "free to do whatever you want with it",
    "start": "1483880",
    "end": "1489840"
  },
  {
    "text": "so it's a good thing these things are",
    "start": "1489840",
    "end": "1494320"
  },
  {
    "text": "editable um um so what the compiler generates for you with or dgar this to",
    "start": "1496640",
    "end": "1503520"
  },
  {
    "text": "um is hey uh create a string context um this is what's left before the first um",
    "start": "1503520",
    "end": "1509960"
  },
  {
    "text": "variable you want to interpolate um and this is the rest of your string s which",
    "start": "1509960",
    "end": "1515000"
  },
  {
    "text": "came from what you can't read up there in the conveniently colored comment um",
    "start": "1515000",
    "end": "1520279"
  },
  {
    "text": "and that's that we just we defined that with the prefix to the string and then whatever we wanted to pass in in this",
    "start": "1520279",
    "end": "1525320"
  },
  {
    "text": "case the variable n but you can really put in anything and somewhere in the standard Library we",
    "start": "1525320",
    "end": "1531200"
  },
  {
    "text": "gave you a couple of string interpolators for free and you can buy more from typesafe no I'm kidding yeah you can Implement them yourself um and",
    "start": "1531200",
    "end": "1540360"
  },
  {
    "text": "so the S1 is is standard uh and you can just you know call it directly and that's all there is to",
    "start": "1540360",
    "end": "1547000"
  },
  {
    "text": "it see some puzzled faces I'm like yeah yeah I do this all day uh questions",
    "start": "1547000",
    "end": "1552720"
  },
  {
    "text": "about this why is it important why is it important uh um why is string",
    "start": "1552720",
    "end": "1559240"
  },
  {
    "text": "interpolation important why is the okay sure uh that's totally fair and",
    "start": "1559240",
    "end": "1565200"
  },
  {
    "text": "that was our position for the last decade roughly until 210 came around and",
    "start": "1565200",
    "end": "1570240"
  },
  {
    "text": "Martin figured out a way how to do this um the Scala way and before we writing stuff like",
    "start": "1570240",
    "end": "1578000"
  },
  {
    "text": "um oh man could someone explain to me why do cursor doesn't work no JavaScript",
    "start": "1578159",
    "end": "1583279"
  },
  {
    "text": "why do you mock me so so we would have this convention um that you would just",
    "start": "1583279",
    "end": "1589039"
  },
  {
    "text": "write n plus and so on right um and you can you can do that um I mean just think",
    "start": "1589039",
    "end": "1595960"
  },
  {
    "text": "away the rest you're I I noticed myself um writing error messages for example",
    "start": "1595960",
    "end": "1602279"
  },
  {
    "text": "and I'm sorry about that some of them are crappier because it's just a pain to compose trainings with plus um sorry use",
    "start": "1602279",
    "end": "1609480"
  },
  {
    "text": "the forat yeah so you can use a format so you can write all your stuff first",
    "start": "1609480",
    "end": "1615320"
  },
  {
    "text": "and then make sure that everything matches up with the format that that comes after it and you don't see where what expression goes into your format so",
    "start": "1615320",
    "end": "1622960"
  },
  {
    "text": "oh was I going to explain about the tree and then the type or the type and then the tree or was it and then you no it's",
    "start": "1622960",
    "end": "1629799"
  },
  {
    "text": "just I just want everything together when these things are there I think it's great that you can see the string as",
    "start": "1629799",
    "end": "1635520"
  },
  {
    "text": "it's going to be as a prototype of what it's going to be right there in your code um you get completion in the IDE",
    "start": "1635520",
    "end": "1641520"
  },
  {
    "text": "because those those holes in there are actually Expressions so that that all integrates seamlessly because this rewrite is happening behind the scenes",
    "start": "1641520",
    "end": "1647399"
  },
  {
    "text": "and ID knows about rewrites in general so it'll just give you code completion on that um you can write your own",
    "start": "1647399",
    "end": "1653240"
  },
  {
    "text": "interpolators yes interational um you can like so those uh",
    "start": "1653240",
    "end": "1660519"
  },
  {
    "text": "those interpolated strings are first class so you can you can abstract over them um and put different languages in",
    "start": "1660519",
    "end": "1667039"
  },
  {
    "text": "there yeah good question yeah that's definitely important yeah thank okay I'm",
    "start": "1667039",
    "end": "1672960"
  },
  {
    "text": "glad I could convince you you're from now you're like in the lead for the for the thing it's edging towards",
    "start": "1672960",
    "end": "1679919"
  },
  {
    "text": "you um let's get into the data structure yeah well there you'll definitely beat",
    "start": "1679919",
    "end": "1685480"
  },
  {
    "text": "me because I just I just and square my way through everything oh sorry I didn't see that",
    "start": "1685480",
    "end": "1691039"
  },
  {
    "text": "yeah um isn't there aun when you do this and value then you don't have the",
    "start": "1691039",
    "end": "1697360"
  },
  {
    "text": "overhead actually calling and intering Direction and lo so if you're doing",
    "start": "1697360",
    "end": "1703360"
  },
  {
    "text": "spring interation here and you're always",
    "start": "1703360",
    "end": "1708679"
  },
  {
    "text": "um no because you're free to Define that method no matter how you would like you can make it a macro and like not admit",
    "start": "1708679",
    "end": "1715080"
  },
  {
    "text": "that code at all based on compile time decisions you can make it a compile call by name argument and do the same thing",
    "start": "1715080",
    "end": "1721760"
  },
  {
    "text": "as you would do in your in your normal logging framework where you just don't invoke the closure and cross your fingers at Hotpot will say oh he's not",
    "start": "1721760",
    "end": "1728720"
  },
  {
    "text": "calling this it'll be good is that what you're saying or okay yeah so that's I think pretty much",
    "start": "1728720",
    "end": "1735679"
  },
  {
    "text": "all taken care of so for example the the format or the print F style uh uh",
    "start": "1735679",
    "end": "1743679"
  },
  {
    "text": "Interpol thingy um will actually compile to format so there's a macro in the",
    "start": "1743679",
    "end": "1749159"
  },
  {
    "text": "standard library that does the standard print F style type checking so it'll infer the types from the format",
    "start": "1749159",
    "end": "1755440"
  },
  {
    "text": "specifiers and checks that you have enough arguments uh and then compiles it to an optimal format blah uh call that",
    "start": "1755440",
    "end": "1763919"
  },
  {
    "text": "you should never write again okay and I'm not going to go into the micro details uh unless you make me",
    "start": "1763919",
    "end": "1772360"
  },
  {
    "text": "um I have a link right there it's really convenient if you want to see it but um you know again this is not there's very",
    "start": "1772360",
    "end": "1778880"
  },
  {
    "text": "little magic going on here it's just another macro call uh and you can Implement your own interpolator with a",
    "start": "1778880",
    "end": "1785120"
  },
  {
    "text": "micro and do the same thing micros are experimental though saying",
    "start": "1785120",
    "end": "1792039"
  },
  {
    "text": "yes uh you mean in the implementation of 210 how many macros are there there none uh unless I'm mistaken Greg no",
    "start": "1793760",
    "end": "1802080"
  },
  {
    "text": "they're none inter yeah so but those are part of the standard Li oh sorry so yes part of the",
    "start": "1802080",
    "end": "1807840"
  },
  {
    "text": "standard Library there's a couple macros that you can use but to actually build the compiler like the compiler itself",
    "start": "1807840",
    "end": "1813320"
  },
  {
    "text": "doesn't use any macros I thought that's what you meant yeah like okay the macro",
    "start": "1813320",
    "end": "1820080"
  },
  {
    "text": "implementation uses macros itself but if you don't touch macros you won't the compiler won't use them gratuitously",
    "start": "1820080",
    "end": "1826440"
  },
  {
    "text": "that I think is a statement is that sorry is that what you meant",
    "start": "1826440",
    "end": "1831519"
  },
  {
    "text": "or asking so yeah there's there's a couple of these in the library uh and uh mostly",
    "start": "1831519",
    "end": "1837919"
  },
  {
    "text": "they're in experimental stuff for uh for the macros themselves that uh is is basically just a large suite of of",
    "start": "1837919",
    "end": "1844120"
  },
  {
    "text": "macros to help you uh deal with so there's a a core uh I don't want to turn this into macro talk mostly because I",
    "start": "1844120",
    "end": "1850720"
  },
  {
    "text": "haven't done much with macros myself to be honest but there is there's core abstraction which lets to go from meta",
    "start": "1850720",
    "end": "1857360"
  },
  {
    "text": "to to to data which called rifi and then everything else around it is just implemented on top of that as as macros",
    "start": "1857360",
    "end": "1864200"
  },
  {
    "text": "as a library um so reify in a Val it's just like splice and unspice in other in",
    "start": "1864200",
    "end": "1869919"
  },
  {
    "text": "other macro languages um yeah so but we don't really there's a",
    "start": "1869919",
    "end": "1876279"
  },
  {
    "text": "couple of things like this in here when it's not Mission critical we were happy to experiment with that but since micros",
    "start": "1876279",
    "end": "1882200"
  },
  {
    "text": "themselves are experimental we didn't really yes yeah yeah so that's coming next generation so there's a ton of",
    "start": "1882200",
    "end": "1888320"
  },
  {
    "text": "stuff like SL is not part of the distribution that's something that we're developing now Scala async uh I mean",
    "start": "1888320",
    "end": "1893600"
  },
  {
    "text": "there's a ton of cool stuff being done with micros it's U even on top of 210 so not necessarily for the next release but",
    "start": "1893600",
    "end": "1900240"
  },
  {
    "text": "it's not technically part of the core distribution but so slick is the is the database access API that we have uh and",
    "start": "1900240",
    "end": "1908760"
  },
  {
    "text": "Scala async is a cool way of of getting rid of for like not having to deal with for comprehensions when dealing with",
    "start": "1908760",
    "end": "1914360"
  },
  {
    "text": "Futures and just kind of write in direct style instead of monatic style um that's also you based on Macros uh so you don't",
    "start": "1914360",
    "end": "1921679"
  },
  {
    "text": "have to use the CPS plugin anymore uh thank god um sorry",
    "start": "1921679",
    "end": "1927159"
  },
  {
    "text": "alexim um yes but no uh micros are experimental that's the official",
    "start": "1927159",
    "end": "1934000"
  },
  {
    "text": "stance okay thank you okay so um now I just kind of want",
    "start": "1934000",
    "end": "1939840"
  },
  {
    "text": "to go all crazy with this and show you what you like the the extent you can take this to um just because on our way",
    "start": "1939840",
    "end": "1946679"
  },
  {
    "text": "to implementing this I'll show you implicit classes uh I'll show you kind of how the pattern match Works under the",
    "start": "1946679",
    "end": "1952399"
  },
  {
    "text": "hood um and you know these are like the new features in 210 so let's say you",
    "start": "1952399",
    "end": "1957840"
  },
  {
    "text": "kind of want to do the reverse so you have this string and you want to decompose and find how many bottles are in there so before we wrote this um uh",
    "start": "1957840",
    "end": "1967200"
  },
  {
    "text": "string interpolated string and this is going to be R for regex which is not part of the standard Library so we're going to implement it ourselves and",
    "start": "1967200",
    "end": "1973639"
  },
  {
    "text": "we're just going to have we want this to become a pattern that says any number of",
    "start": "1973639",
    "end": "1978760"
  },
  {
    "text": "digits could be zero actually maybe I should have thought about that a little bit longer um and then we're just going to match to okay so is the intent clear",
    "start": "1978760",
    "end": "1985799"
  },
  {
    "text": "of what we're trying to do all right I you may disagree with something",
    "start": "1985799",
    "end": "1991480"
  },
  {
    "text": "like this um I'm just kind of using it to illustrate their actual bigger kind of data structure that you might want to",
    "start": "1991480",
    "end": "1996840"
  },
  {
    "text": "decompose this way uh that make more sense than regular Expressions so in general what it means",
    "start": "1996840",
    "end": "2002159"
  },
  {
    "text": "to be for first class means that you can be stored in a variable and passed around so funs are first class which",
    "start": "2002159",
    "end": "2008080"
  },
  {
    "text": "means they're just objects you just put them in a variable pass them in as an argument doesn't matter Scala is simple",
    "start": "2008080",
    "end": "2013880"
  },
  {
    "text": "like that you don't have to think about limitations like can I put that there or can I put that there can I Nest this method and there sure you can it's all",
    "start": "2013880",
    "end": "2019960"
  },
  {
    "text": "regular don't memorize all these exceptions that you have to deal with in a in a language that restricts you to",
    "start": "2019960",
    "end": "2025039"
  },
  {
    "text": "first order so the higher order thing um in my opinion is part of the Simplicity",
    "start": "2025039",
    "end": "2030159"
  },
  {
    "text": "story where you say well don't worry about you know abstracting over stuff we'll let you abstract that it's not just a Simplicity it's also a matter of",
    "start": "2030159",
    "end": "2036960"
  },
  {
    "text": "power of abstraction and actually decomposing your your code base that way so I can just um rip this pattern out",
    "start": "2036960",
    "end": "2044600"
  },
  {
    "text": "put it there um and I'll come back to the slide to prove it to you once we've implemented all of this and run it so uh",
    "start": "2044600",
    "end": "2051679"
  },
  {
    "text": "you can tell I'm totally making this up and you know now we're just matching on this pattern which won't return any data",
    "start": "2051679",
    "end": "2057358"
  },
  {
    "text": "because it just says yes or no does that make sense",
    "start": "2057359",
    "end": "2062639"
  },
  {
    "text": "question um well yeah that's a minor nitpick uh I actually struggled with",
    "start": "2065879",
    "end": "2072320"
  },
  {
    "text": "that myself to be honest with you um the pattern syntax um what I should have written here was uh the empty Brands",
    "start": "2072320",
    "end": "2080158"
  },
  {
    "text": "after that but it looks really ugly and um there is a I think I would classify",
    "start": "2080159",
    "end": "2085200"
  },
  {
    "text": "it as a a bug that we didn't require those penises back there um Scola will",
    "start": "2085200",
    "end": "2091320"
  },
  {
    "text": "as you know in infer for you that you forgot like the the dummy like empty parenthesis and and um it's a little bit",
    "start": "2091320",
    "end": "2098200"
  },
  {
    "text": "stricter about that in patterns uh because we didn't used to do this kind of stuff um and so here it says hey",
    "start": "2098200",
    "end": "2104520"
  },
  {
    "text": "that's an identifier I am expecting parenes is because you don't otherwise it's going to look it's not going to look for the technical reason is it",
    "start": "2104520",
    "end": "2110680"
  },
  {
    "text": "won't look for an unapply if you don't if it doesn't look like an apply um yeah sorry can yout M yeah you",
    "start": "2110680",
    "end": "2119880"
  },
  {
    "text": "can yeah definitely yeah so and that would have been nicer because that way I wouldn't have fallen into that Pitfall",
    "start": "2119880",
    "end": "2125560"
  },
  {
    "text": "um I'll show that that's that's kind of going to be the culmination of my of my of my rant here um to show you how you",
    "start": "2125560",
    "end": "2133520"
  },
  {
    "text": "could do that um and keep in mind that regular Expressions is just an example that fits on a slide I'm sure you can",
    "start": "2133520",
    "end": "2139280"
  },
  {
    "text": "think of Json XML uh actual source code AS quasi quoting where you like to",
    "start": "2139280",
    "end": "2144560"
  },
  {
    "text": "pattern match on these things and just immediately just like with string interpolation when you're constructing data you want to see how everything fits",
    "start": "2144560",
    "end": "2150200"
  },
  {
    "text": "together together rather than in different parts you want also want to see that when you're",
    "start": "2150200",
    "end": "2155359"
  },
  {
    "text": "decomposing um okay so my my kind of the idea of of of",
    "start": "2155359",
    "end": "2161200"
  },
  {
    "text": "figuring out how to do this when you know when you're hacking this kind of weird stuff is like okay well if this works I know how to make the previous",
    "start": "2161200",
    "end": "2167359"
  },
  {
    "text": "thing work so let's proceed by induction um so the desugaring um that I",
    "start": "2167359",
    "end": "2174560"
  },
  {
    "text": "showed you before for the eye extractor where really what you're doing is on the",
    "start": "2174560",
    "end": "2179640"
  },
  {
    "text": "on the selector of the match you're calling this unapply in this case it's unapply seek because we want to be able",
    "start": "2179640",
    "end": "2185240"
  },
  {
    "text": "to return multiple values later when I'm going to generalize this um because in principle a regular expression can have",
    "start": "2185240",
    "end": "2191280"
  },
  {
    "text": "multiple groups so I want to be defining an unapply seek uh not an unapply um",
    "start": "2191280",
    "end": "2196760"
  },
  {
    "text": "because you don't know how many statically there are with a macro you could generate an unapply and statically",
    "start": "2196760",
    "end": "2201800"
  },
  {
    "text": "say this is going to uh give you a tuple of four because there are four groups in your regex I don't want to push it that",
    "start": "2201800",
    "end": "2207079"
  },
  {
    "text": "far so unapply seek is simply a generalization of unapplied I showed you before which will give you a sum or a",
    "start": "2207079",
    "end": "2213200"
  },
  {
    "text": "none basically saying well I match or I don't match um I guess you can still read the slides",
    "start": "2213200",
    "end": "2219480"
  },
  {
    "text": "right um um I match or I don't match and this is how many subpatterns that I",
    "start": "2219480",
    "end": "2224920"
  },
  {
    "text": "matched and these are their values um so this is exactly the same thing as the previous slide I'm just kind of",
    "start": "2224920",
    "end": "2230359"
  },
  {
    "text": "gradually working my way to something that just looks like method calls which is another pattern in here that really",
    "start": "2230359",
    "end": "2236640"
  },
  {
    "text": "all the synthetic sugar that you're getting uh once you understand a translation you can just kind of Reason",
    "start": "2236640",
    "end": "2242119"
  },
  {
    "text": "back to well how do method calls work and everybody kind of knows how method calls work so so my my my my what I'm",
    "start": "2242119",
    "end": "2249240"
  },
  {
    "text": "saying there is that that's really all you have to understand method calls and how you get back there right um so",
    "start": "2249240",
    "end": "2256960"
  },
  {
    "text": "that's what that gives you and so um now",
    "start": "2256960",
    "end": "2262040"
  },
  {
    "text": "the ding as I showed you before um for the interpolated string will look like",
    "start": "2262040",
    "end": "2267760"
  },
  {
    "text": "this so now we have the problem reduced to well I need to be able to call a method uh I need to be able to add a",
    "start": "2267760",
    "end": "2273720"
  },
  {
    "text": "method R to string context because my string interpolator is called r that was",
    "start": "2273720",
    "end": "2279480"
  },
  {
    "text": "my prefix for my for my string and I want to be able to use this in a pattern so it needs to be an",
    "start": "2279480",
    "end": "2285480"
  },
  {
    "text": "extractor is what we call it which is just any value that has an unapply or an unapply seek method in this case it's",
    "start": "2285480",
    "end": "2290920"
  },
  {
    "text": "going to be an unapply seek so this is the method that customizes the compiler's behavior and says hey this is",
    "start": "2290920",
    "end": "2296040"
  },
  {
    "text": "data here's how you decompose it okay um so that's the final um challenge um this",
    "start": "2296040",
    "end": "2302960"
  },
  {
    "text": "is where implicit classes come in they make it really easy to add methods to existing classes so before you would",
    "start": "2302960",
    "end": "2308480"
  },
  {
    "text": "write implicit Dev convert blah to other blah and then take your blah and return",
    "start": "2308480",
    "end": "2313520"
  },
  {
    "text": "the other blah and then make a new Anonymous class now all we really do is say well okay you want to make a new",
    "start": "2313520",
    "end": "2320560"
  },
  {
    "text": "class and instances of our context are going to be available wherever you have instances of string context and the",
    "start": "2320560",
    "end": "2326599"
  },
  {
    "text": "compiler is really looking for one of the former and not the latter that's what we have right now well just create",
    "start": "2326599",
    "end": "2333319"
  },
  {
    "text": "a new class uh create a new instance of this class excuse me and continue with that that's what the implicit thing says",
    "start": "2333319",
    "end": "2339560"
  },
  {
    "text": "it says make Constructor calls to this class implicit whenever I have something of type string context but actually I",
    "start": "2339560",
    "end": "2345960"
  },
  {
    "text": "need something with an r in there and this class tends to have it so let's inate this class and continue with the",
    "start": "2345960",
    "end": "2352319"
  },
  {
    "text": "wer okay the compiler will do that for you you can do it manually there's another just another desugaring so",
    "start": "2352319",
    "end": "2357760"
  },
  {
    "text": "there's a lot of magic going on there but it's not that magical we tell you how it works okay questions about that so",
    "start": "2357760",
    "end": "2365440"
  },
  {
    "text": "that's how you enrich your uh classes with new methods and that works for everything is I mean I",
    "start": "2365440",
    "end": "2371760"
  },
  {
    "text": "use this for string context but you can do that for other stuff as well I mean doesn't matter if they're Java objects or uh anything really so now we have our",
    "start": "2371760",
    "end": "2380240"
  },
  {
    "text": "our method which is that call before that we're trying to get it to compile we just need to we just need to give you",
    "start": "2380240",
    "end": "2386560"
  },
  {
    "text": "something that has an unapply seek method and it just so happens the regex thing in or standard library is an",
    "start": "2386560",
    "end": "2391880"
  },
  {
    "text": "extractor like that already so I'm just going to return that okay",
    "start": "2391880",
    "end": "2397040"
  },
  {
    "text": "so implicit class again is a little bit of synthetic sugar that encapsulate the",
    "start": "2397040",
    "end": "2402319"
  },
  {
    "text": "best practices that people were doing with implicit conversions and I think this is something that is pretty safe to",
    "start": "2402319",
    "end": "2407839"
  },
  {
    "text": "use in your own code I would not recommend writing your own implicit vals or implicit deps unless you're really",
    "start": "2407839",
    "end": "2414520"
  },
  {
    "text": "thinking about this deeply and know what's going to happen that's why I mean we'll come back to that later that's why we allow you to disable that feature",
    "start": "2414520",
    "end": "2421040"
  },
  {
    "text": "because it makes code bases harder to understand this is this gives you extension methods essentially uh a",
    "start": "2421040",
    "end": "2427000"
  },
  {
    "text": "cleaner version of expansion methods okay so um I'm going to run this",
    "start": "2427000",
    "end": "2435240"
  },
  {
    "text": "um and thus Define the r context class and I'm just quickly going to go",
    "start": "2435240",
    "end": "2441000"
  },
  {
    "text": "back and um run the original code so now it says yeah sure that",
    "start": "2441000",
    "end": "2448440"
  },
  {
    "text": "matches so um slightly more dangerous life",
    "start": "2448440",
    "end": "2453760"
  },
  {
    "text": "coding let's say we want to capture this group and call it",
    "start": "2453760",
    "end": "2459839"
  },
  {
    "text": "n right so we actually want to get that number out of",
    "start": "2461960",
    "end": "2467039"
  },
  {
    "text": "there yes okay so we had 10 bottles oh thank you thank you um well",
    "start": "2470640",
    "end": "2477240"
  },
  {
    "text": "that won't get you to a book either but I will I will remember your faces thank you for clapping um okay so it it does",
    "start": "2477240",
    "end": "2483680"
  },
  {
    "text": "work okay um and and um yeah I I just want to kind of",
    "start": "2483680",
    "end": "2491640"
  },
  {
    "text": "rant a little bit longer about uh type inference and value inference which are kind of unify the idea of hey I have",
    "start": "2491640",
    "end": "2498560"
  },
  {
    "text": "this explicit stuff that's required but really compiler you should be able to figure this out on your own don't make me type all this and that's what",
    "start": "2498560",
    "end": "2504319"
  },
  {
    "text": "implicits are that's what type inference does for you they're really wanting the same thing and then actually in the compiler they're integrated with each",
    "start": "2504319",
    "end": "2509839"
  },
  {
    "text": "other so implicit search will drive type inference that's how for example the collections are implemented in Scala um",
    "start": "2509839",
    "end": "2515960"
  },
  {
    "text": "so that when you map something over a string you get a string back actually as long as they're characters when they're",
    "start": "2515960",
    "end": "2521359"
  },
  {
    "text": "ins you get a seek of ins um this mechanism um follows from the unification of type inference and value",
    "start": "2521359",
    "end": "2527480"
  },
  {
    "text": "inference which we usually call implicit search so there's a lot of really cool stuff you can do with that again I would",
    "start": "2527480",
    "end": "2534119"
  },
  {
    "text": "I would tread very very carefully um but if you want to come back to this um I would definitely recommend Googling any",
    "start": "2534119",
    "end": "2540119"
  },
  {
    "text": "of these things and having a look at it so really cool test Frameworks like specs for example use this technique a",
    "start": "2540119",
    "end": "2545520"
  },
  {
    "text": "lot uh to let you write really declarative uh test",
    "start": "2545520",
    "end": "2551640"
  },
  {
    "text": "Suites um so oh looks like I swapped some slides around there I'm sorry about",
    "start": "2551640",
    "end": "2557760"
  },
  {
    "text": "that um so yes so the final culmination is the one liner um that will let you",
    "start": "2557760",
    "end": "2564880"
  },
  {
    "text": "define a variable n which is an integer that's the I extractor that we had before and you know get whatever number",
    "start": "2564880",
    "end": "2571920"
  },
  {
    "text": "is in there out so pattern matching um a pattern like that can be used in any",
    "start": "2571920",
    "end": "2578000"
  },
  {
    "text": "location where you're expecting uh a variable not in an argument position because that's just too",
    "start": "2578000",
    "end": "2584800"
  },
  {
    "text": "weird um but this is just excuse me syntactic sugar for a oneline pattern",
    "start": "2584800",
    "end": "2590480"
  },
  {
    "text": "match that matches this pattern and then gets the variable out and puts in a new local variable so now that we've",
    "start": "2590480",
    "end": "2596480"
  },
  {
    "text": "implemented this that works as well okay so now you just get an N It's",
    "start": "2596480",
    "end": "2602079"
  },
  {
    "text": "actually an integer because we wrapped around like there's the sub pattern now that's an that takes a string here and says oh is",
    "start": "2602079",
    "end": "2608200"
  },
  {
    "text": "this is this par as an end yes then match otherwise no you're going to match error yes if that string the expression",
    "start": "2608200",
    "end": "2614640"
  },
  {
    "text": "had two two variables we would get back a t um well I don't know I think so I do",
    "start": "2614640",
    "end": "2622200"
  },
  {
    "text": "know I think it works let's see um",
    "start": "2622200",
    "end": "2628440"
  },
  {
    "text": "sorry yeah yeah I'll just I'm just going to copy paste if you don't",
    "start": "2628440",
    "end": "2633480"
  },
  {
    "text": "mind scroll around a little bit we're just is going to call this m cuz I'm",
    "start": "2633480",
    "end": "2638599"
  },
  {
    "text": "just that imaginative can't see my cursor it doesn't",
    "start": "2638599",
    "end": "2645200"
  },
  {
    "text": "help oh I'm at the beginning sorry this is like extremely actually I'm using",
    "start": "2645200",
    "end": "2652040"
  },
  {
    "text": "Code mirror for this and it's really pretty cool um so I'm going to call this other variable M um it didn't mess up",
    "start": "2652040",
    "end": "2658480"
  },
  {
    "text": "anything else uh and then I'll just put 11 in",
    "start": "2658480",
    "end": "2663839"
  },
  {
    "text": "there and there you go so yeah so it just generalized like that I was a little bit worried but I'm pretty sure I",
    "start": "2664240",
    "end": "2670119"
  },
  {
    "text": "implemented that correctly um okay so you know this is",
    "start": "2670119",
    "end": "2675160"
  },
  {
    "text": "all pretty crazy when you when you apply it like that but think of a domain where you work a lot with decomposing uh",
    "start": "2675160",
    "end": "2680800"
  },
  {
    "text": "unstructured data and making it structured and making it typed again and would you rather do that in one place",
    "start": "2680800",
    "end": "2685839"
  },
  {
    "text": "where you kind of see prototypically what you're expecting and getting like the holes out of that immediately or would you rather just I don't know",
    "start": "2685839",
    "end": "2692040"
  },
  {
    "text": "compose a lot of function calls and say get first hole get second hole and so on so again you have to use these things",
    "start": "2692040",
    "end": "2697200"
  },
  {
    "text": "Jud judiciously um depending on what you're implementing and where you are in in in your project but I think this is",
    "start": "2697200",
    "end": "2703760"
  },
  {
    "text": "pretty cool stuff so other people think so as well and they're implementing quasi quotes and uh and stuff like that",
    "start": "2703760",
    "end": "2709400"
  },
  {
    "text": "with it um so um I guess a lot of people",
    "start": "2709400",
    "end": "2714520"
  },
  {
    "text": "say well Scala got a lot better actually I have no idea how I'm doing on time okay so when did we",
    "start": "2714520",
    "end": "2722599"
  },
  {
    "text": "start sorry go okay well I don't have too many more slides because I've been",
    "start": "2723520",
    "end": "2728680"
  },
  {
    "text": "talking really fast so I think it's going to be okay but just so you know feel free to ask more questions um so",
    "start": "2728680",
    "end": "2734359"
  },
  {
    "text": "yeah scal 21 got bigger um can you can you can that simple or you know is that",
    "start": "2734359",
    "end": "2739520"
  },
  {
    "text": "really becoming complex or complicated or you know should it be simplistic should it really be like oh this is a",
    "start": "2739520",
    "end": "2746440"
  },
  {
    "text": "string interpolation we just baled this on for you and sorry don't pass it around don't Define your own um you know",
    "start": "2746440",
    "end": "2752920"
  },
  {
    "text": "we don't we're not going to do type in for those oh we have macros as well but yeah you can't use those with string interpolation I mean I guess you kind of",
    "start": "2752920",
    "end": "2759119"
  },
  {
    "text": "see where I'm going with this um for my opinion when you're learning a new feature that's a big investment and you",
    "start": "2759119",
    "end": "2764359"
  },
  {
    "text": "want to get as much bang for your buck as you can get so when you learn a new feature like that you really wanted to integrate with all those other features",
    "start": "2764359",
    "end": "2770200"
  },
  {
    "text": "and I think that's what we're doing with all these uh Scala features that I've mentioned before is we just we don't just like bolt everything together we",
    "start": "2770200",
    "end": "2775920"
  },
  {
    "text": "actually spend a lot of time thinking about how this can be reduced to what Scala really is about and how that once",
    "start": "2775920",
    "end": "2781119"
  },
  {
    "text": "you understand this mechanism it becomes intuitive for you to use it um and I'm not CL we're perfect but that's what",
    "start": "2781119",
    "end": "2787559"
  },
  {
    "text": "we're striving for so and I I guess the main point",
    "start": "2787559",
    "end": "2794200"
  },
  {
    "text": "there is that since these are all method calls you can develop your own libraries where you can use this",
    "start": "2794200",
    "end": "2799920"
  },
  {
    "text": "mechanism and Define what makes sense to you so um I've kind of focused on like",
    "start": "2799920",
    "end": "2806359"
  },
  {
    "text": "the new sparkly things that are in Skol to 10 that I'm excited about all of the stable features that you're using every",
    "start": "2806359",
    "end": "2812000"
  },
  {
    "text": "day to develop your applications those were in 29 those were in 28 um um that's not what this talk was about I just want",
    "start": "2812000",
    "end": "2818480"
  },
  {
    "text": "to tell I mean I want to emphasize that we're You know despite all this cool hacking in there you know the first",
    "start": "2818480",
    "end": "2824480"
  },
  {
    "text": "thing on their mind is you know we're a pragmatic language people are getting  done with it um so Java interop is",
    "start": "2824480",
    "end": "2830319"
  },
  {
    "text": "important you know balance it against making programming fun um not an easy thing uh Legacy I mean Scola is 10 years",
    "start": "2830319",
    "end": "2837440"
  },
  {
    "text": "old how do you balance that with sanity um people want new toys how do you balance that with simplicity so this is",
    "start": "2837440",
    "end": "2844319"
  },
  {
    "text": "where we are right now and we're really looking forward like looking forward in 21 to further simplifying and making",
    "start": "2844319",
    "end": "2849800"
  },
  {
    "text": "scal faster and and and smaller um but this is really very much our drive so",
    "start": "2849800",
    "end": "2855680"
  },
  {
    "text": "we're also pragmatic in the sense that we don't say hey immutability is the future multicore is the future we",
    "start": "2855680",
    "end": "2861599"
  },
  {
    "text": "believe that um but if you want to mutate that's fine and a lot of times very like locally your method will look",
    "start": "2861599",
    "end": "2868040"
  },
  {
    "text": "cleaner if you just mutate um just don't do it at a large scale it's not a good idea so for example you know scal has",
    "start": "2868040",
    "end": "2874920"
  },
  {
    "text": "this new neat Futures concept and you're saying well let's unify mutation and",
    "start": "2874920",
    "end": "2880880"
  },
  {
    "text": "asynchronicity because we can unify things in sky right so um I I hacked um",
    "start": "2880880",
    "end": "2888040"
  },
  {
    "text": "I'm sorry this is red um this is bad this is a VAR um and I specifically hack",
    "start": "2888040",
    "end": "2894920"
  },
  {
    "text": "to see as to show red for vars um even though sometimes they're okay um and so",
    "start": "2894920",
    "end": "2901040"
  },
  {
    "text": "you know you can do this you can write a future that writes one to Y and you can write a future that writes two to y and then you run can run it a couple times",
    "start": "2901040",
    "end": "2907280"
  },
  {
    "text": "and see what values you get um you know that's not recommended and we make it really easy for you and seamless to",
    "start": "2907280",
    "end": "2913720"
  },
  {
    "text": "write code the good way and you know that's what you should stick to I guess the point that I'm making here is that",
    "start": "2913720",
    "end": "2919520"
  },
  {
    "text": "it's really not up to Scala as the language to say hey you can never use mutation that's something that um you",
    "start": "2919520",
    "end": "2926160"
  },
  {
    "text": "know you should decide for yourself so um maybe it would be simpler if you just disallowed this but sometimes you know",
    "start": "2926160",
    "end": "2932920"
  },
  {
    "text": "you can get an extra uh inch of performance out out of there so you know sometimes you get one sometimes you get",
    "start": "2932920",
    "end": "2938319"
  },
  {
    "text": "zero sometimes you get one again sometimes you get two it's fun but I wouldn't do",
    "start": "2938319",
    "end": "2944640"
  },
  {
    "text": "it um oh yeah now I went to the wrong direction right oh sorry about the",
    "start": "2944640",
    "end": "2950880"
  },
  {
    "text": "flickering uh just got me all confused um right so future since we're",
    "start": "2950880",
    "end": "2956079"
  },
  {
    "text": "on the topic um I'm not a um I'm I'm not so much of a asynchronous kind of guy or",
    "start": "2956079",
    "end": "2963640"
  },
  {
    "text": "distributed computing but Futures are cool because they're like monets is what you'll hear on the scal is wow that",
    "start": "2963640",
    "end": "2968880"
  },
  {
    "text": "doesn't really we don't care about that I'm serious we really don't care um it's great that when you ever you see future",
    "start": "2968880",
    "end": "2975040"
  },
  {
    "text": "in there it makes you think twice right I mean like is this actually going to be available in the future like how long is",
    "start": "2975040",
    "end": "2980119"
  },
  {
    "text": "it going to take me to get this this is something where types help your programming and say hey um think about",
    "start": "2980119",
    "end": "2986280"
  },
  {
    "text": "this this is going to take a while before you get this maybe you'll never get it maybe there'll be an error usually you know types get out of your",
    "start": "2986280",
    "end": "2991839"
  },
  {
    "text": "way I've I've specifically omitted a lot of the types in the presentation to to show you that you don't need to write them but a lot of times it's good to",
    "start": "2991839",
    "end": "2998040"
  },
  {
    "text": "think about them and say oh this is a future U and this actually lets us gives you give you a lot of nice syntax so",
    "start": "2998040",
    "end": "3003799"
  },
  {
    "text": "this is what you get with Futures you can say well do this and a parallel do that and then when they both come",
    "start": "3003799",
    "end": "3009280"
  },
  {
    "text": "together give you Fus the result with some magical plus operator um and now with Scala Scala",
    "start": "3009280",
    "end": "3017319"
  },
  {
    "text": "async um which is not technically part of 210 but it's built on top of 210 uh",
    "start": "3017319",
    "end": "3022559"
  },
  {
    "text": "and macros um you can write it even even more uh succinctly so there's this async",
    "start": "3022559",
    "end": "3028799"
  },
  {
    "text": "keyboard which is a macro and you just write in direct style you just say well I have this this",
    "start": "3028799",
    "end": "3034200"
  },
  {
    "text": "future here and this other future Here and Now I want to wait for the result of that and wait the result of that and",
    "start": "3034200",
    "end": "3040000"
  },
  {
    "text": "then when I get them I'm just going to combine them so no more funky arrows in your fors and uh when do I WR to",
    "start": "3040000",
    "end": "3047400"
  },
  {
    "text": "semicolon or not I quickly just wanted to say that you know like with all these complications here um you can actually",
    "start": "3047400",
    "end": "3054040"
  },
  {
    "text": "disallow some of the features in there um so sip 18 helps you keep it simple uh",
    "start": "3054040",
    "end": "3060880"
  },
  {
    "text": "you can say well I don't want any poix operators I don't want any reflective calls which made you you incur some runtime overhead from structural types I",
    "start": "3060880",
    "end": "3067760"
  },
  {
    "text": "don't want I don't want to let my my programmer as a manager Define uh implicit conversions um and there's a",
    "start": "3067760",
    "end": "3075040"
  },
  {
    "text": "whole kind of whole lot of other things so for example we have this Dynamic trait where anything that you want to call in it is fine um and that that you",
    "start": "3075040",
    "end": "3083160"
  },
  {
    "text": "do by extending Dynamic and then whenever the method doesn't Define on that thing it's Rewritten to an apply damic call um I won't go into it since",
    "start": "3083160",
    "end": "3090119"
  },
  {
    "text": "I'm out running out of time but then you can fuse that with macros and actually again statically say well this is a",
    "start": "3090119",
    "end": "3096280"
  },
  {
    "text": "valid call or not at compile time I I encourage you to Google for this kind of stuff uh I I love it it's great I'm",
    "start": "3096280",
    "end": "3103480"
  },
  {
    "text": "doing it is on a Sunday afternoon um whenever you have time so uh on",
    "start": "3103480",
    "end": "3109079"
  },
  {
    "text": "211 uh our focus is very much on making it smaller faster and Stabler like to Daft Punk song roughly",
    "start": "3109079",
    "end": "3116520"
  },
  {
    "text": "um and so we're modularizing the standard library and the compiler so to get your um contributions more readily",
    "start": "3116520",
    "end": "3125079"
  },
  {
    "text": "uh for The Interpreter or scaladoc or our testing infrastructure will be spun off to different projects um we're very",
    "start": "3125079",
    "end": "3133920"
  },
  {
    "text": "much at work uh Greg um uh Greg uh who's working on incremental compiler because",
    "start": "3133920",
    "end": "3141040"
  },
  {
    "text": "uh badge compilation in scolar we know is slow but there are a lot of tricks you can do with incremental compilation and we can make that we know how to make",
    "start": "3141040",
    "end": "3146559"
  },
  {
    "text": "that a lot better to give you a much better experience in uh you know in intellig Eclipse plugin zinc uh there's",
    "start": "3146559",
    "end": "3153559"
  },
  {
    "text": "Maven plugins for that SBT uses that of course so that's another component zinc um that uh will where we have spun-off",
    "start": "3153559",
    "end": "3159720"
  },
  {
    "text": "and are improving and that we're happy to work with everybody who wants to integrate that and you know just also",
    "start": "3159720",
    "end": "3164839"
  },
  {
    "text": "just get Simply Better batch performance and so um I kind of put that",
    "start": "3164839",
    "end": "3170480"
  },
  {
    "text": "in there to go out with a bang uh this is my last slide um so yes the default Target will be Java 6 but we're at work",
    "start": "3170480",
    "end": "3177079"
  },
  {
    "text": "we're working on a Java 7 and eight back end uh that has a lot of clever tricks using invoke Dynamic for uh um you know",
    "start": "3177079",
    "end": "3185040"
  },
  {
    "text": "interoperating with Sams and Java 8 is something that we can do while compiling to Java 6 for example but leveraging their performance of increases probably",
    "start": "3185040",
    "end": "3191920"
  },
  {
    "text": "not going to happen until Java 8 and that's going to be scal to 12 um so if",
    "start": "3191920",
    "end": "3197079"
  },
  {
    "text": "you want to participate in that debate sorry too late 211 is coming out in about 6 months um but um I think I'm",
    "start": "3197079",
    "end": "3205559"
  },
  {
    "text": "pretty I'm pretty confident Java 6 is going to be around for a little bit longer um and we'll be ready for for",
    "start": "3205559",
    "end": "3212079"
  },
  {
    "text": "Java 8 into 12 which is only about a year away a year and a half um so thanks",
    "start": "3212079",
    "end": "3217480"
  },
  {
    "text": "all for your questions during the talk uh time permitting happy to take",
    "start": "3217480",
    "end": "3222280"
  },
  {
    "text": "more thank",
    "start": "3223000",
    "end": "3226160"
  },
  {
    "text": "you",
    "start": "3234160",
    "end": "3237160"
  }
]