[
  {
    "text": "I got touch it uh okay I'm good to go if",
    "start": "880",
    "end": "3919"
  },
  {
    "text": "uh guys want to get",
    "start": "3919",
    "end": "5960"
  },
  {
    "text": "ready all right um this T Talk's going",
    "start": "5960",
    "end": "8320"
  },
  {
    "text": "to be pretty tight in terms of time so",
    "start": "8320",
    "end": "9800"
  },
  {
    "text": "I'm just going to kind of jump into it",
    "start": "9800",
    "end": "11200"
  },
  {
    "text": "now um yeah sometimes I think Eric",
    "start": "11200",
    "end": "14280"
  },
  {
    "text": "mentioned me earlier I work on Spire at",
    "start": "14280",
    "end": "16358"
  },
  {
    "text": "night uh during the day I work for PD",
    "start": "16359",
    "end": "18080"
  },
  {
    "text": "analytics um so the",
    "start": "18080",
    "end": "21560"
  },
  {
    "text": "main over so I'm just",
    "start": "21560",
    "end": "24279"
  },
  {
    "text": "gonna um yeah so the main thing here is",
    "start": "24279",
    "end": "27240"
  },
  {
    "text": "uh you know you're sitting there and",
    "start": "27240",
    "end": "29000"
  },
  {
    "text": "you're implementing some numer",
    "start": "29000",
    "end": "30480"
  },
  {
    "text": "algorithm um and you want to use",
    "start": "30480",
    "end": "32078"
  },
  {
    "text": "floating point because it's fast um more",
    "start": "32079",
    "end": "34600"
  },
  {
    "text": "importantly floating Point generally is",
    "start": "34600",
    "end": "36440"
  },
  {
    "text": "good enough most of the time I'm sure",
    "start": "36440",
    "end": "37680"
  },
  {
    "text": "whenever you guys are doing it use",
    "start": "37680",
    "end": "38600"
  },
  {
    "text": "double and things usually work um the",
    "start": "38600",
    "end": "42840"
  },
  {
    "text": "problem is what happens when it doesn't",
    "start": "42840",
    "end": "44920"
  },
  {
    "text": "and you get errors uh you really have",
    "start": "44920",
    "end": "47239"
  },
  {
    "text": "three options um you can continue using",
    "start": "47239",
    "end": "50440"
  },
  {
    "text": "double like you were doing before you",
    "start": "50440",
    "end": "52039"
  },
  {
    "text": "live with the aors this is probably the",
    "start": "52039",
    "end": "53680"
  },
  {
    "text": "most common case and everybody's",
    "start": "53680",
    "end": "55160"
  },
  {
    "text": "generally happy with that uh if you",
    "start": "55160",
    "end": "56960"
  },
  {
    "text": "can't live with the ears then you",
    "start": "56960",
    "end": "58239"
  },
  {
    "text": "probably try to switch over to a higher",
    "start": "58239",
    "end": "59440"
  },
  {
    "text": "Precision Ty like rational or big in or",
    "start": "59440",
    "end": "61399"
  },
  {
    "text": "something like that um that's a fine",
    "start": "61399",
    "end": "63960"
  },
  {
    "text": "option but the problem is it's a lot",
    "start": "63960",
    "end": "65799"
  },
  {
    "text": "slower than just using perative doubles",
    "start": "65799",
    "end": "68200"
  },
  {
    "text": "um but this talk is all about the third",
    "start": "68200",
    "end": "70520"
  },
  {
    "text": "option which is to use a floating Point",
    "start": "70520",
    "end": "72200"
  },
  {
    "text": "filter uh the idea behind a floating",
    "start": "72200",
    "end": "74439"
  },
  {
    "text": "Point filter is pretty straightforward",
    "start": "74439",
    "end": "76880"
  },
  {
    "text": "uh basically you use a floating Point uh",
    "start": "76880",
    "end": "79960"
  },
  {
    "text": "approximation to your when you can so",
    "start": "79960",
    "end": "81880"
  },
  {
    "text": "you use double as long as you can and",
    "start": "81880",
    "end": "83400"
  },
  {
    "text": "when you can't use double you don't you",
    "start": "83400",
    "end": "84560"
  },
  {
    "text": "use high Precision types makes sense",
    "start": "84560",
    "end": "86200"
  },
  {
    "text": "right uh of course the the devil is in",
    "start": "86200",
    "end": "88960"
  },
  {
    "text": "the details um um so basically the the",
    "start": "88960",
    "end": "93079"
  },
  {
    "text": "main idea behind fling Point filters is",
    "start": "93079",
    "end": "94759"
  },
  {
    "text": "that we we um solve our problem using",
    "start": "94759",
    "end": "99520"
  },
  {
    "text": "like a number type like double as usual",
    "start": "99520",
    "end": "101399"
  },
  {
    "text": "but while we're doing that we also",
    "start": "101399",
    "end": "102600"
  },
  {
    "text": "maintain an error bound on this number",
    "start": "102600",
    "end": "104920"
  },
  {
    "text": "on the approximation so we know how bad",
    "start": "104920",
    "end": "107040"
  },
  {
    "text": "it is and what we do is then when we",
    "start": "107040",
    "end": "109280"
  },
  {
    "text": "come to some point where we actually",
    "start": "109280",
    "end": "110600"
  },
  {
    "text": "need to return a solution we can then",
    "start": "110600",
    "end": "112600"
  },
  {
    "text": "check to see if the air bound is is",
    "start": "112600",
    "end": "114320"
  },
  {
    "text": "acceptable and if it's not we can then",
    "start": "114320",
    "end": "115759"
  },
  {
    "text": "fall back and reevaluate with a higher",
    "start": "115759",
    "end": "117680"
  },
  {
    "text": "with an exact type um",
    "start": "117680",
    "end": "120479"
  },
  {
    "text": "there is a catch here which is that it",
    "start": "120479",
    "end": "122920"
  },
  {
    "text": "is not good for answering questions like",
    "start": "122920",
    "end": "124640"
  },
  {
    "text": "this so you want to minimize the error",
    "start": "124640",
    "end": "126360"
  },
  {
    "text": "you like what's the termin metric you",
    "start": "126360",
    "end": "127560"
  },
  {
    "text": "want to minimize that it's not going to",
    "start": "127560",
    "end": "128959"
  },
  {
    "text": "help you um what it is good",
    "start": "128959",
    "end": "132840"
  },
  {
    "text": "for so yeah the problem is like you know",
    "start": "132840",
    "end": "135280"
  },
  {
    "text": "it does not try to actually change your",
    "start": "135280",
    "end": "137920"
  },
  {
    "text": "code to to reduce the errors what it's",
    "start": "137920",
    "end": "140360"
  },
  {
    "text": "doing is just maintaining an error",
    "start": "140360",
    "end": "141319"
  },
  {
    "text": "bounds you still those errors are still",
    "start": "141319",
    "end": "142760"
  },
  {
    "text": "there and we're floating Point numbers",
    "start": "142760",
    "end": "144280"
  },
  {
    "text": "work well is when you're trying to do",
    "start": "144280",
    "end": "145840"
  },
  {
    "text": "something that has that you want to",
    "start": "145840",
    "end": "147239"
  },
  {
    "text": "answer exactly um and since because you",
    "start": "147239",
    "end": "149959"
  },
  {
    "text": "know floating Point numbers like a",
    "start": "149959",
    "end": "150879"
  },
  {
    "text": "double there's always always a little",
    "start": "150879",
    "end": "152720"
  },
  {
    "text": "bit wrong because they're there're just",
    "start": "152720",
    "end": "153959"
  },
  {
    "text": "an approximation they're never going to",
    "start": "153959",
    "end": "155440"
  },
  {
    "text": "answer any question exactly um a better",
    "start": "155440",
    "end": "158519"
  },
  {
    "text": "question to ask of floating Point",
    "start": "158519",
    "end": "159879"
  },
  {
    "text": "filters is what is the sign of the",
    "start": "159879",
    "end": "161640"
  },
  {
    "text": "determin of my Matrix so you want to",
    "start": "161640",
    "end": "163319"
  },
  {
    "text": "know is it zero so you know can I",
    "start": "163319",
    "end": "164840"
  },
  {
    "text": "actually solve this Matrix or not um or",
    "start": "164840",
    "end": "168480"
  },
  {
    "text": "if you want to know if it's positive or",
    "start": "168480",
    "end": "169440"
  },
  {
    "text": "negative we'll see an example of that",
    "start": "169440",
    "end": "170599"
  },
  {
    "text": "later the key here is that it's good",
    "start": "170599",
    "end": "172640"
  },
  {
    "text": "when you need to make a decision so you",
    "start": "172640",
    "end": "174280"
  },
  {
    "text": "have a predicate you want to solve you",
    "start": "174280",
    "end": "175360"
  },
  {
    "text": "need to know some property of the number",
    "start": "175360",
    "end": "177080"
  },
  {
    "text": "is it zero uh what's the sign of this",
    "start": "177080",
    "end": "179280"
  },
  {
    "text": "number",
    "start": "179280",
    "end": "180560"
  },
  {
    "text": "um and so our fling Point filter it",
    "start": "180560",
    "end": "183680"
  },
  {
    "text": "really is pretty simple just a wrapper",
    "start": "183680",
    "end": "186040"
  },
  {
    "text": "uh you can see here we paramet it on the",
    "start": "186040",
    "end": "187599"
  },
  {
    "text": "type we using you generally want to",
    "start": "187599",
    "end": "189080"
  },
  {
    "text": "parze it on exact type because that's",
    "start": "189080",
    "end": "190560"
  },
  {
    "text": "the whole point in life so exact types",
    "start": "190560",
    "end": "192200"
  },
  {
    "text": "are big in rational spare has one",
    "start": "192200",
    "end": "194239"
  },
  {
    "text": "algebraic and there's also no one real",
    "start": "194239",
    "end": "197000"
  },
  {
    "text": "um and it provides a set of standard",
    "start": "197000",
    "end": "198480"
  },
  {
    "text": "operators that it can that it knows how",
    "start": "198480",
    "end": "200519"
  },
  {
    "text": "to compute the air bounds for so these",
    "start": "200519",
    "end": "202280"
  },
  {
    "text": "are things like you'd expect like",
    "start": "202280",
    "end": "203519"
  },
  {
    "text": "addition multiplication division but",
    "start": "203519",
    "end": "205480"
  },
  {
    "text": "also things like square roots and end",
    "start": "205480",
    "end": "207000"
  },
  {
    "text": "Roots um and as long as you stick with",
    "start": "207000",
    "end": "211959"
  },
  {
    "text": "that um what what it promises is that it",
    "start": "211959",
    "end": "215480"
  },
  {
    "text": "has these",
    "start": "215480",
    "end": "216799"
  },
  {
    "text": "predicates the the two main ones are",
    "start": "216799",
    "end": "219280"
  },
  {
    "text": "syum and compare and what it says is",
    "start": "219280",
    "end": "221879"
  },
  {
    "text": "that it'll try to use the floating Point",
    "start": "221879",
    "end": "223560"
  },
  {
    "text": "approximation for those so you can and",
    "start": "223560",
    "end": "225680"
  },
  {
    "text": "if you can it'll be fast um the actual",
    "start": "225680",
    "end": "228599"
  },
  {
    "text": "number type there's really not a lot of",
    "start": "228599",
    "end": "229879"
  },
  {
    "text": "magic uh so you have our floating Point",
    "start": "229879",
    "end": "232079"
  },
  {
    "text": "approximation here uh pretty",
    "start": "232079",
    "end": "233799"
  },
  {
    "text": "straightforward these two little members",
    "start": "233799",
    "end": "235840"
  },
  {
    "text": "here maintain our air bounds I really",
    "start": "235840",
    "end": "237760"
  },
  {
    "text": "don't want to get into that if you want",
    "start": "237760",
    "end": "238879"
  },
  {
    "text": "to learn more I can go read this paper",
    "start": "238879",
    "end": "240760"
  },
  {
    "text": "that's what the implementation is based",
    "start": "240760",
    "end": "242120"
  },
  {
    "text": "off of um it's pretty readable uh and",
    "start": "242120",
    "end": "245360"
  },
  {
    "text": "then we have a thunk here that um",
    "start": "245360",
    "end": "249159"
  },
  {
    "text": "represents our exact number type so",
    "start": "249159",
    "end": "251120"
  },
  {
    "text": "rather than actually evaluating that",
    "start": "251120",
    "end": "252400"
  },
  {
    "text": "exact number type we just s it in a Thun",
    "start": "252400",
    "end": "254079"
  },
  {
    "text": "to be evaluated later um so obviously",
    "start": "254079",
    "end": "257000"
  },
  {
    "text": "the real magic happens in impation which",
    "start": "257000",
    "end": "259519"
  },
  {
    "text": "is just a ton of macros um and these",
    "start": "259519",
    "end": "262759"
  },
  {
    "text": "macros are very important for a good",
    "start": "262759",
    "end": "264280"
  },
  {
    "text": "reason which is that uh we want to be",
    "start": "264280",
    "end": "268479"
  },
  {
    "text": "relatively we want to be close the speed",
    "start": "268479",
    "end": "270160"
  },
  {
    "text": "of doubles and we can't do that if we",
    "start": "270160",
    "end": "271840"
  },
  {
    "text": "have a whole bunch of allocations for",
    "start": "271840",
    "end": "273080"
  },
  {
    "text": "every single operation so what floting",
    "start": "273080",
    "end": "275880"
  },
  {
    "text": "point filter does is it for a given",
    "start": "275880",
    "end": "278080"
  },
  {
    "text": "expression it'll try to fuse all the",
    "start": "278080",
    "end": "279680"
  },
  {
    "text": "operators together to get rid of",
    "start": "279680",
    "end": "280840"
  },
  {
    "text": "intermediate allocations and it'll take",
    "start": "280840",
    "end": "282880"
  },
  {
    "text": "all those all the",
    "start": "282880",
    "end": "284960"
  },
  {
    "text": "Airbound uh maintenance calculations the",
    "start": "284960",
    "end": "287520"
  },
  {
    "text": "floating Point approximations and",
    "start": "287520",
    "end": "289120"
  },
  {
    "text": "everything else and it inlines them and",
    "start": "289120",
    "end": "291199"
  },
  {
    "text": "all that that funk you saw that",
    "start": "291199",
    "end": "292440"
  },
  {
    "text": "evaluates the exact number type um it",
    "start": "292440",
    "end": "295039"
  },
  {
    "text": "just gets turned into a",
    "start": "295039",
    "end": "297360"
  },
  {
    "text": "defa and why it's important is that uh",
    "start": "297360",
    "end": "299440"
  },
  {
    "text": "def just get turned into private methods",
    "start": "299440",
    "end": "301320"
  },
  {
    "text": "so we're never actually allocating a",
    "start": "301320",
    "end": "302800"
  },
  {
    "text": "funk instead we're just eventually",
    "start": "302800",
    "end": "304199"
  },
  {
    "text": "calling some private method um and so an",
    "start": "304199",
    "end": "306919"
  },
  {
    "text": "example here is we have a pretty simple",
    "start": "306919",
    "end": "308720"
  },
  {
    "text": "expression X Plus y we're getting the",
    "start": "308720",
    "end": "310680"
  },
  {
    "text": "sign um and this will turn it into this",
    "start": "310680",
    "end": "313199"
  },
  {
    "text": "hor mess uh it's kind of hard to follow",
    "start": "313199",
    "end": "316639"
  },
  {
    "text": "but basically here we're inlining our X",
    "start": "316639",
    "end": "318919"
  },
  {
    "text": "variable uh here we're inlining our y",
    "start": "318919",
    "end": "321680"
  },
  {
    "text": "variable and then uh down here we're",
    "start": "321680",
    "end": "324000"
  },
  {
    "text": "basically doing the actual addition and",
    "start": "324000",
    "end": "325960"
  },
  {
    "text": "then finally we're doing the syum test",
    "start": "325960",
    "end": "327759"
  },
  {
    "text": "here uh but the one thing that's kind of",
    "start": "327759",
    "end": "329720"
  },
  {
    "text": "hard to see in this is that the only",
    "start": "329720",
    "end": "331199"
  },
  {
    "text": "time we'll ever actually allocate",
    "start": "331199",
    "end": "333280"
  },
  {
    "text": "anything from that expression is at this",
    "start": "333280",
    "end": "335280"
  },
  {
    "text": "very final little else here where we",
    "start": "335280",
    "end": "337319"
  },
  {
    "text": "finally compute the Signum and this is",
    "start": "337319",
    "end": "338639"
  },
  {
    "text": "in the case where the floating Point",
    "start": "338639",
    "end": "339960"
  },
  {
    "text": "approximation has failed and we need to",
    "start": "339960",
    "end": "342560"
  },
  {
    "text": "fall back to the exact case but there's",
    "start": "342560",
    "end": "344120"
  },
  {
    "text": "no allocations proceeding",
    "start": "344120",
    "end": "346120"
  },
  {
    "text": "that um so I wanted to motivate the use",
    "start": "346120",
    "end": "348840"
  },
  {
    "text": "of this by giving some examples I have",
    "start": "348840",
    "end": "350319"
  },
  {
    "text": "two examples to show I'm hoping I'll get",
    "start": "350319",
    "end": "351680"
  },
  {
    "text": "through both of them if not tough luck",
    "start": "351680",
    "end": "355039"
  },
  {
    "text": "um but basically the first one is 2D",
    "start": "355039",
    "end": "357919"
  },
  {
    "text": "orientation uh it's pretty",
    "start": "357919",
    "end": "359120"
  },
  {
    "text": "straightforward we have three points",
    "start": "359120",
    "end": "361319"
  },
  {
    "text": "these points have some order in this",
    "start": "361319",
    "end": "363039"
  },
  {
    "text": "case we're going",
    "start": "363039",
    "end": "364160"
  },
  {
    "text": "pqr and we want to know if this is",
    "start": "364160",
    "end": "366400"
  },
  {
    "text": "turned left or turned right in this case",
    "start": "366400",
    "end": "368160"
  },
  {
    "text": "we've turned right uh you know in here",
    "start": "368160",
    "end": "370840"
  },
  {
    "text": "we've kind of Switched the order a bit",
    "start": "370840",
    "end": "371919"
  },
  {
    "text": "and now we're turning left there's also",
    "start": "371919",
    "end": "373759"
  },
  {
    "text": "the degenerate case where we haven't",
    "start": "373759",
    "end": "375280"
  },
  {
    "text": "turned it all and we really want to know",
    "start": "375280",
    "end": "376800"
  },
  {
    "text": "about that too um so this is a case",
    "start": "376800",
    "end": "379560"
  },
  {
    "text": "where once again we're asking a question",
    "start": "379560",
    "end": "381400"
  },
  {
    "text": "that can be answered exactly by floating",
    "start": "381400",
    "end": "382800"
  },
  {
    "text": "Point arithmetic most of the",
    "start": "382800",
    "end": "385039"
  },
  {
    "text": "time um so we're going to encode this",
    "start": "385039",
    "end": "388479"
  },
  {
    "text": "test as just a type class I call it turn",
    "start": "388479",
    "end": "391080"
  },
  {
    "text": "uh you can see here it just takes our",
    "start": "391080",
    "end": "392960"
  },
  {
    "text": "our method just takes three points each",
    "start": "392960",
    "end": "394520"
  },
  {
    "text": "line here is a point with the",
    "start": "394520",
    "end": "395520"
  },
  {
    "text": "coordinates um and it returns a Signum",
    "start": "395520",
    "end": "398319"
  },
  {
    "text": "or the sign of the uh of of",
    "start": "398319",
    "end": "402319"
  },
  {
    "text": "the I should yeah mention here the the B",
    "start": "402319",
    "end": "406199"
  },
  {
    "text": "doesn't matter it's",
    "start": "406199",
    "end": "407680"
  },
  {
    "text": "good um anyway so the first",
    "start": "407680",
    "end": "409639"
  },
  {
    "text": "implementation here is just G to try to",
    "start": "409639",
    "end": "411280"
  },
  {
    "text": "do what I think most people would do and",
    "start": "411280",
    "end": "413000"
  },
  {
    "text": "I would certainly do first which is just",
    "start": "413000",
    "end": "414240"
  },
  {
    "text": "try to use double so we just Implement",
    "start": "414240",
    "end": "416199"
  },
  {
    "text": "using Straight double",
    "start": "416199",
    "end": "417919"
  },
  {
    "text": "arithmetic and this great it works most",
    "start": "417919",
    "end": "420639"
  },
  {
    "text": "of the time um so key here is really",
    "start": "420639",
    "end": "424080"
  },
  {
    "text": "this line at the bottom here all we're",
    "start": "424080",
    "end": "425440"
  },
  {
    "text": "doing is we generating a bunch of tests",
    "start": "425440",
    "end": "427199"
  },
  {
    "text": "we have a line we generate three points",
    "start": "427199",
    "end": "429039"
  },
  {
    "text": "on that line and then we just kind of",
    "start": "429039",
    "end": "431440"
  },
  {
    "text": "perturb each point just a little bit and",
    "start": "431440",
    "end": "433440"
  },
  {
    "text": "as we move along the right of the axis",
    "start": "433440",
    "end": "436680"
  },
  {
    "text": "these points are getting perturbed less",
    "start": "436680",
    "end": "437879"
  },
  {
    "text": "and less and less and so you get closer",
    "start": "437879",
    "end": "439319"
  },
  {
    "text": "and closer to actually being on a",
    "start": "439319",
    "end": "440680"
  },
  {
    "text": "straight line and you can see after so",
    "start": "440680",
    "end": "442800"
  },
  {
    "text": "this is basically the number of bits",
    "start": "442800",
    "end": "446199"
  },
  {
    "text": "down in the double where we're",
    "start": "446199",
    "end": "447560"
  },
  {
    "text": "perturbing it so as we get further and",
    "start": "447560",
    "end": "449160"
  },
  {
    "text": "further we're getting smaller and",
    "start": "449160",
    "end": "450160"
  },
  {
    "text": "smaller and closer to the line and",
    "start": "450160",
    "end": "451479"
  },
  {
    "text": "eventually we hit a point where doubles",
    "start": "451479",
    "end": "453360"
  },
  {
    "text": "stop working and we get errors um so if",
    "start": "453360",
    "end": "457720"
  },
  {
    "text": "we wanted to implement this using just",
    "start": "457720",
    "end": "459160"
  },
  {
    "text": "exact arithmetic no floating Point",
    "start": "459160",
    "end": "460520"
  },
  {
    "text": "filters you know probably just do this",
    "start": "460520",
    "end": "462199"
  },
  {
    "text": "we' wrap the doubles in some exact type",
    "start": "462199",
    "end": "464400"
  },
  {
    "text": "like algebraic uh we compute the sign",
    "start": "464400",
    "end": "466479"
  },
  {
    "text": "and of course the problem is this is",
    "start": "466479",
    "end": "467960"
  },
  {
    "text": "very slow I mean it's a lot slower um",
    "start": "467960",
    "end": "470240"
  },
  {
    "text": "it's really hard to",
    "start": "470240",
    "end": "471720"
  },
  {
    "text": "beat floating Point arithmetic or just",
    "start": "471720",
    "end": "474599"
  },
  {
    "text": "like you know pure doubles perative",
    "start": "474599",
    "end": "476400"
  },
  {
    "text": "types so we can try again and we'll use",
    "start": "476400",
    "end": "478960"
  },
  {
    "text": "fling this time um it looks it is very",
    "start": "478960",
    "end": "482120"
  },
  {
    "text": "similar to the other ones the only thing",
    "start": "482120",
    "end": "483520"
  },
  {
    "text": "is we're wrapping each each coordinate",
    "start": "483520",
    "end": "485919"
  },
  {
    "text": "in a floating Point filter first this",
    "start": "485919",
    "end": "488000"
  },
  {
    "text": "wrapping isn't actually allocating",
    "start": "488000",
    "end": "489240"
  },
  {
    "text": "anything they're all it's just returning",
    "start": "489240",
    "end": "490400"
  },
  {
    "text": "a value class",
    "start": "490400",
    "end": "491800"
  },
  {
    "text": "here which is very important to to",
    "start": "491800",
    "end": "494759"
  },
  {
    "text": "remember and then we just we just write",
    "start": "494759",
    "end": "497280"
  },
  {
    "text": "an expression like we would have anyways",
    "start": "497280",
    "end": "498599"
  },
  {
    "text": "with the doubles and the nice thing is",
    "start": "498599",
    "end": "501159"
  },
  {
    "text": "we get good performance it's no longer",
    "start": "501159",
    "end": "503240"
  },
  {
    "text": "10,000 times slower it's about 40% of",
    "start": "503240",
    "end": "505800"
  },
  {
    "text": "the speed of double which I think for",
    "start": "505800",
    "end": "507680"
  },
  {
    "text": "most people they'd be happy with if it",
    "start": "507680",
    "end": "509240"
  },
  {
    "text": "means that you will never be wrong um",
    "start": "509240",
    "end": "511720"
  },
  {
    "text": "obviously you can see once we start",
    "start": "511720",
    "end": "512880"
  },
  {
    "text": "getting into",
    "start": "512880",
    "end": "514000"
  },
  {
    "text": "the uh exceptional cases where the",
    "start": "514000",
    "end": "516719"
  },
  {
    "text": "points are very very close to a line the",
    "start": "516719",
    "end": "518560"
  },
  {
    "text": "speed drops off but that's okay those",
    "start": "518560",
    "end": "520080"
  },
  {
    "text": "are like our 1% of cases or",
    "start": "520080",
    "end": "523680"
  },
  {
    "text": "less so that example was sort of we had",
    "start": "525200",
    "end": "528640"
  },
  {
    "text": "uh doubles and we wanted to basically",
    "start": "528640",
    "end": "530839"
  },
  {
    "text": "make our we had some double some test",
    "start": "530839",
    "end": "532600"
  },
  {
    "text": "that uses doubles and we wanted to make",
    "start": "532600",
    "end": "534080"
  },
  {
    "text": "it exact um and so we use that in this",
    "start": "534080",
    "end": "536839"
  },
  {
    "text": "other case we have an exact type and we",
    "start": "536839",
    "end": "538399"
  },
  {
    "text": "want to make it faster or we have an",
    "start": "538399",
    "end": "539959"
  },
  {
    "text": "exact an algorith that uses exact types",
    "start": "539959",
    "end": "542120"
  },
  {
    "text": "and we want to make it a little faster",
    "start": "542120",
    "end": "543760"
  },
  {
    "text": "using floating Point filters um so I'm",
    "start": "543760",
    "end": "546160"
  },
  {
    "text": "glad Eric introduced polinomial",
    "start": "546160",
    "end": "548040"
  },
  {
    "text": "earlier um but basically you know we",
    "start": "548040",
    "end": "550160"
  },
  {
    "text": "have our polinomial here the red line is",
    "start": "550160",
    "end": "551720"
  },
  {
    "text": "our x",
    "start": "551720",
    "end": "553279"
  },
  {
    "text": "axis and what we want to do is we want",
    "start": "553279",
    "end": "555880"
  },
  {
    "text": "we have some interval uh spare provides",
    "start": "555880",
    "end": "558120"
  },
  {
    "text": "a nice interval type to do",
    "start": "558120",
    "end": "559880"
  },
  {
    "text": "this shoot",
    "start": "559880",
    "end": "562440"
  },
  {
    "text": "um so this is our interval here and what",
    "start": "562440",
    "end": "564920"
  },
  {
    "text": "we're told is that this interval will",
    "start": "564920",
    "end": "566800"
  },
  {
    "text": "contain exactly one root and why that's",
    "start": "566800",
    "end": "569079"
  },
  {
    "text": "nice is is that uh so that's the root",
    "start": "569079",
    "end": "571320"
  },
  {
    "text": "here it's where it crosses the x- axxis",
    "start": "571320",
    "end": "573120"
  },
  {
    "text": "why it's nice is that we know that on",
    "start": "573120",
    "end": "575079"
  },
  {
    "text": "each side of our interval the polinomial",
    "start": "575079",
    "end": "577399"
  },
  {
    "text": "have an opposite sign so on the right",
    "start": "577399",
    "end": "578880"
  },
  {
    "text": "side it's positive or negative on the",
    "start": "578880",
    "end": "580640"
  },
  {
    "text": "left side it's positive and so what's",
    "start": "580640",
    "end": "583920"
  },
  {
    "text": "what",
    "start": "583920",
    "end": "586079"
  },
  {
    "text": "I uh and the reason why I bring this up",
    "start": "586480",
    "end": "589240"
  },
  {
    "text": "anyways is because I've been",
    "start": "589240",
    "end": "590279"
  },
  {
    "text": "implementing uh polinomial root finding",
    "start": "590279",
    "end": "592880"
  },
  {
    "text": "real roots anyways that in spire and",
    "start": "592880",
    "end": "595440"
  },
  {
    "text": "basically as I was implementing this I",
    "start": "595440",
    "end": "596760"
  },
  {
    "text": "was trying to make it fast obviously um",
    "start": "596760",
    "end": "599600"
  },
  {
    "text": "so spare itself we've implemented this",
    "start": "599600",
    "end": "601120"
  },
  {
    "text": "algorithm called quadratic interval",
    "start": "601120",
    "end": "602800"
  },
  {
    "text": "refinement for real Roots uh again this",
    "start": "602800",
    "end": "605279"
  },
  {
    "text": "is a pretty easy one to read the",
    "start": "605279",
    "end": "607000"
  },
  {
    "text": "algorith itself is pretty",
    "start": "607000",
    "end": "608200"
  },
  {
    "text": "straightforward um so we have we're",
    "start": "608200",
    "end": "610079"
  },
  {
    "text": "given an interval in a polinomial that",
    "start": "610079",
    "end": "611880"
  },
  {
    "text": "has and that we're told that the",
    "start": "611880",
    "end": "612839"
  },
  {
    "text": "interval has one root in it and we have",
    "start": "612839",
    "end": "614560"
  },
  {
    "text": "this little parameter n so in here n is",
    "start": "614560",
    "end": "616800"
  },
  {
    "text": "eight so we take our interval we split",
    "start": "616800",
    "end": "618760"
  },
  {
    "text": "it up into eight",
    "start": "618760",
    "end": "620079"
  },
  {
    "text": "intervals we then find take the sequ",
    "start": "620079",
    "end": "622800"
  },
  {
    "text": "secant from the left and the right of",
    "start": "622800",
    "end": "624720"
  },
  {
    "text": "the interval and we find out where it",
    "start": "624720",
    "end": "626160"
  },
  {
    "text": "intersects we take that intersection",
    "start": "626160",
    "end": "628200"
  },
  {
    "text": "Point against the real line we find the",
    "start": "628200",
    "end": "630560"
  },
  {
    "text": "closest uh line to that once we have",
    "start": "630560",
    "end": "634720"
  },
  {
    "text": "that then we ignore all the other lines",
    "start": "634720",
    "end": "636240"
  },
  {
    "text": "except for the two on either side of it",
    "start": "636240",
    "end": "638160"
  },
  {
    "text": "and then what we do is by testing the",
    "start": "638160",
    "end": "639760"
  },
  {
    "text": "sign here we can isolate exactly which",
    "start": "639760",
    "end": "641839"
  },
  {
    "text": "interval may contain a root in this case",
    "start": "641839",
    "end": "644880"
  },
  {
    "text": "we basically drop down and we find we've",
    "start": "644880",
    "end": "646800"
  },
  {
    "text": "reduced our interval we've refined it",
    "start": "646800",
    "end": "648320"
  },
  {
    "text": "and hence uh interval",
    "start": "648320",
    "end": "651279"
  },
  {
    "text": "refinement the key",
    "start": "651279",
    "end": "653440"
  },
  {
    "text": "for I'm",
    "start": "653440",
    "end": "657440"
  },
  {
    "text": "so the key part of the quadratic",
    "start": "664760",
    "end": "666440"
  },
  {
    "text": "interval reement is that it then doubles",
    "start": "666440",
    "end": "668519"
  },
  {
    "text": "the parameter n and what this is doing",
    "start": "668519",
    "end": "670399"
  },
  {
    "text": "is it's really saying that it assumes",
    "start": "670399",
    "end": "671760"
  },
  {
    "text": "that we are uh converging quadratically",
    "start": "671760",
    "end": "674600"
  },
  {
    "text": "so each time it doubles the number of",
    "start": "674600",
    "end": "675760"
  },
  {
    "text": "intervals so that we double the number",
    "start": "675760",
    "end": "676880"
  },
  {
    "text": "of bits that we've uh calculated once",
    "start": "676880",
    "end": "680200"
  },
  {
    "text": "again it repeats as usual we find the",
    "start": "680200",
    "end": "681440"
  },
  {
    "text": "secant find intersection point is",
    "start": "681440",
    "end": "683040"
  },
  {
    "text": "basically the root um now the problem",
    "start": "683040",
    "end": "685800"
  },
  {
    "text": "with this is that um it requires two",
    "start": "685800",
    "end": "687880"
  },
  {
    "text": "polinomial evaluations and these are not",
    "start": "687880",
    "end": "690279"
  },
  {
    "text": "sign tests these are we actually have to",
    "start": "690279",
    "end": "691720"
  },
  {
    "text": "evaluate it and more importantly we have",
    "start": "691720",
    "end": "692839"
  },
  {
    "text": "to evaluate it with really high",
    "start": "692839",
    "end": "694360"
  },
  {
    "text": "Precision um we can't get around that",
    "start": "694360",
    "end": "697079"
  },
  {
    "text": "otherwise it won't actually converge",
    "start": "697079",
    "end": "699000"
  },
  {
    "text": "quadratically um which is the whole",
    "start": "699000",
    "end": "700720"
  },
  {
    "text": "point um but the problem with a lot of",
    "start": "700720",
    "end": "702560"
  },
  {
    "text": "these algorithms is that um they only",
    "start": "702560",
    "end": "705920"
  },
  {
    "text": "they only converge fast under certain",
    "start": "705920",
    "end": "708399"
  },
  {
    "text": "assumptions and Q is no different and",
    "start": "708399",
    "end": "711079"
  },
  {
    "text": "that assumption is generally that you",
    "start": "711079",
    "end": "712360"
  },
  {
    "text": "have to be your interval has to be",
    "start": "712360",
    "end": "713839"
  },
  {
    "text": "pretty small to start with and close to",
    "start": "713839",
    "end": "715200"
  },
  {
    "text": "the root and if it's not our test can",
    "start": "715200",
    "end": "717440"
  },
  {
    "text": "actually fail",
    "start": "717440",
    "end": "719440"
  },
  {
    "text": "and so in this case I've uh changed the",
    "start": "719440",
    "end": "721839"
  },
  {
    "text": "polinomial a bit and we kind of repeat",
    "start": "721839",
    "end": "723560"
  },
  {
    "text": "as before we we find it and if you look",
    "start": "723560",
    "end": "726279"
  },
  {
    "text": "here you notice that neither of our two",
    "start": "726279",
    "end": "727560"
  },
  {
    "text": "roots or none of our two intervals that",
    "start": "727560",
    "end": "729040"
  },
  {
    "text": "we're checking actually contain the root",
    "start": "729040",
    "end": "730600"
  },
  {
    "text": "so the test",
    "start": "730600",
    "end": "731839"
  },
  {
    "text": "fails what's nice about qir is it falls",
    "start": "731839",
    "end": "734160"
  },
  {
    "text": "back to bisection bisection is pretty",
    "start": "734160",
    "end": "736320"
  },
  {
    "text": "straightforward we have our interval we",
    "start": "736320",
    "end": "737839"
  },
  {
    "text": "split it in two we know that the root",
    "start": "737839",
    "end": "740040"
  },
  {
    "text": "will be on one half or the other and",
    "start": "740040",
    "end": "741920"
  },
  {
    "text": "more importantly all we have to do to",
    "start": "741920",
    "end": "743880"
  },
  {
    "text": "figure out which half is we just check",
    "start": "743880",
    "end": "745240"
  },
  {
    "text": "the sign uh in this case the sign's",
    "start": "745240",
    "end": "747279"
  },
  {
    "text": "negative so we know that there's no root",
    "start": "747279",
    "end": "749480"
  },
  {
    "text": "between the middle and the right side",
    "start": "749480",
    "end": "751279"
  },
  {
    "text": "because they're both negative so we can",
    "start": "751279",
    "end": "752399"
  },
  {
    "text": "just drop that half and we're done and",
    "start": "752399",
    "end": "754760"
  },
  {
    "text": "we can repeat this",
    "start": "754760",
    "end": "756440"
  },
  {
    "text": "process and it keeps on reducing Orin",
    "start": "756440",
    "end": "759120"
  },
  {
    "text": "the interval",
    "start": "759120",
    "end": "761920"
  },
  {
    "text": "uh the nice thing and the part that's",
    "start": "761920",
    "end": "764320"
  },
  {
    "text": "important for this talk is that bsection",
    "start": "764320",
    "end": "767160"
  },
  {
    "text": "only requires sign tests um however it",
    "start": "767160",
    "end": "770079"
  },
  {
    "text": "converges very",
    "start": "770079",
    "end": "771880"
  },
  {
    "text": "slowly but you",
    "start": "771880",
    "end": "774240"
  },
  {
    "text": "know as soon as I see a requireed sign",
    "start": "774240",
    "end": "776360"
  },
  {
    "text": "test that means that I can use FP filter",
    "start": "776360",
    "end": "778079"
  },
  {
    "text": "and hopefully speed up the base case",
    "start": "778079",
    "end": "780160"
  },
  {
    "text": "where things have failed or when we",
    "start": "780160",
    "end": "781320"
  },
  {
    "text": "first are starting and we don't have a",
    "start": "781320",
    "end": "783040"
  },
  {
    "text": "small enough interval yet um so",
    "start": "783040",
    "end": "786279"
  },
  {
    "text": "basically what we want to do is we want",
    "start": "786279",
    "end": "787480"
  },
  {
    "text": "to get speed up the test for actually",
    "start": "787480",
    "end": "789199"
  },
  {
    "text": "Computing the sign of the polinomial at",
    "start": "789199",
    "end": "790839"
  },
  {
    "text": "a given point so we have a polinomial we",
    "start": "790839",
    "end": "793000"
  },
  {
    "text": "have a point x and we want to compute",
    "start": "793000",
    "end": "794360"
  },
  {
    "text": "just the sign of that we don't want to",
    "start": "794360",
    "end": "795480"
  },
  {
    "text": "actually compute the value or evaluate",
    "start": "795480",
    "end": "797560"
  },
  {
    "text": "the the polinomial at that point um so",
    "start": "797560",
    "end": "800399"
  },
  {
    "text": "obviously I'm not going to go over this",
    "start": "800399",
    "end": "801600"
  },
  {
    "text": "too much but uh here's the",
    "start": "801600",
    "end": "803160"
  },
  {
    "text": "implementation that uses FP filter it's",
    "start": "803160",
    "end": "804760"
  },
  {
    "text": "pretty straightforward if you spend some",
    "start": "804760",
    "end": "807600"
  },
  {
    "text": "time with it um um and just to kind of",
    "start": "807600",
    "end": "810760"
  },
  {
    "text": "step back and show why this is necessary",
    "start": "810760",
    "end": "812600"
  },
  {
    "text": "is that if we actually try to use double",
    "start": "812600",
    "end": "814079"
  },
  {
    "text": "to do this it's pretty terrible so each",
    "start": "814079",
    "end": "816480"
  },
  {
    "text": "of these lines represent random pols of",
    "start": "816480",
    "end": "818720"
  },
  {
    "text": "varying degrees um as the degree moves",
    "start": "818720",
    "end": "821680"
  },
  {
    "text": "up uh the accuracy of our sign test",
    "start": "821680",
    "end": "824000"
  },
  {
    "text": "drops dramatically by the time we get",
    "start": "824000",
    "end": "826320"
  },
  {
    "text": "you know not even that bad like that's",
    "start": "826320",
    "end": "827560"
  },
  {
    "text": "13 I mean uh bits that were going down",
    "start": "827560",
    "end": "830839"
  },
  {
    "text": "it's basically below 50% which is pretty",
    "start": "830839",
    "end": "832720"
  },
  {
    "text": "amazing that it can be wrong more often",
    "start": "832720",
    "end": "834120"
  },
  {
    "text": "than it's",
    "start": "834120",
    "end": "835600"
  },
  {
    "text": "right um but it is and then",
    "start": "835600",
    "end": "841040"
  },
  {
    "text": "uh so this is not speed up from exact s",
    "start": "841199",
    "end": "843880"
  },
  {
    "text": "test this is it is yeah so",
    "start": "843880",
    "end": "847440"
  },
  {
    "text": "um the difference here is we we have a",
    "start": "847440",
    "end": "850639"
  },
  {
    "text": "test that we we're originally Computing",
    "start": "850639",
    "end": "852279"
  },
  {
    "text": "exactly as opposed to using double and",
    "start": "852279",
    "end": "853959"
  },
  {
    "text": "we try to use floating Point filter",
    "start": "853959",
    "end": "855199"
  },
  {
    "text": "speed it up so in this case here what",
    "start": "855199",
    "end": "857600"
  },
  {
    "text": "I'm showing is that we've taken exact",
    "start": "857600",
    "end": "859759"
  },
  {
    "text": "with our floating Point filter case um",
    "start": "859759",
    "end": "862880"
  },
  {
    "text": "our the I guess those are red on this",
    "start": "862880",
    "end": "865000"
  },
  {
    "text": "screen um so the red cases are when we",
    "start": "865000",
    "end": "867360"
  },
  {
    "text": "are test these as Flo Point filters and",
    "start": "867360",
    "end": "869440"
  },
  {
    "text": "the blue SL gray ones are the tests that",
    "start": "869440",
    "end": "872120"
  },
  {
    "text": "use double uh when the lines turn gray",
    "start": "872120",
    "end": "874680"
  },
  {
    "text": "that means that they've basically given",
    "start": "874680",
    "end": "876320"
  },
  {
    "text": "up on in terms of like accuracy um so",
    "start": "876320",
    "end": "879120"
  },
  {
    "text": "you can see that at least for the start",
    "start": "879120",
    "end": "881320"
  },
  {
    "text": "uh we get some nice speed up it's close",
    "start": "881320",
    "end": "882680"
  },
  {
    "text": "to the speed of doubles and once you",
    "start": "882680",
    "end": "884240"
  },
  {
    "text": "once you get past the point where",
    "start": "884240",
    "end": "885959"
  },
  {
    "text": "doubles are no longer useful it",
    "start": "885959",
    "end": "887480"
  },
  {
    "text": "immediately drops down to the speed of",
    "start": "887480",
    "end": "888839"
  },
  {
    "text": "just using the exact sign",
    "start": "888839",
    "end": "891240"
  },
  {
    "text": "test um so yeah anyways in summary the",
    "start": "891240",
    "end": "894440"
  },
  {
    "text": "floating Point filter type it basically",
    "start": "894440",
    "end": "895800"
  },
  {
    "text": "works like uh any other number type um",
    "start": "895800",
    "end": "898720"
  },
  {
    "text": "except",
    "start": "898720",
    "end": "899839"
  },
  {
    "text": "it tries to uh be fast and so the nice",
    "start": "899839",
    "end": "903759"
  },
  {
    "text": "thing is like within an expression it'll",
    "start": "903759",
    "end": "905519"
  },
  {
    "text": "take all of your things it'll inline it",
    "start": "905519",
    "end": "907120"
  },
  {
    "text": "you'll use just pure floating Point",
    "start": "907120",
    "end": "909480"
  },
  {
    "text": "arithmetic every all the uh exact ones",
    "start": "909480",
    "end": "912240"
  },
  {
    "text": "get turned into private methods in your",
    "start": "912240",
    "end": "914160"
  },
  {
    "text": "class and they eventually only get",
    "start": "914160",
    "end": "915199"
  },
  {
    "text": "called at the end um and it gets pretty",
    "start": "915199",
    "end": "917839"
  },
  {
    "text": "close to the performance of double for",
    "start": "917839",
    "end": "919399"
  },
  {
    "text": "cases like our T our turn test um",
    "start": "919399",
    "end": "922240"
  },
  {
    "text": "anyways if if you want to look at the",
    "start": "922240",
    "end": "924000"
  },
  {
    "text": "code in this talk uh you can go to that",
    "start": "924000",
    "end": "926600"
  },
  {
    "text": "address has also all the data in the",
    "start": "926600",
    "end": "928560"
  },
  {
    "text": "benchmark",
    "start": "928560",
    "end": "929639"
  },
  {
    "text": "and the tests I Ed to calculate the",
    "start": "929639",
    "end": "930959"
  },
  {
    "text": "accuracy and everything else um that's",
    "start": "930959",
    "end": "934279"
  },
  {
    "text": "basically it floting Point filter lives",
    "start": "934279",
    "end": "936399"
  },
  {
    "text": "in Spire so if you want to use floting",
    "start": "936399",
    "end": "937959"
  },
  {
    "text": "point field you can go use Spire it's",
    "start": "937959",
    "end": "939720"
  },
  {
    "text": "great that's it",
    "start": "939720",
    "end": "942040"
  },
  {
    "text": "[Applause]",
    "start": "942040",
    "end": "950490"
  }
]