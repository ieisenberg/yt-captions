[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": "hello yes I'm Trisha I'm a technical advocate for JetBrains I am the Java",
    "start": "4100",
    "end": "9740"
  },
  {
    "text": "Advocate and IntelliJ IDEA advocate so my job involves staying up-to-date with what's happening in the Java world so",
    "start": "9740",
    "end": "15680"
  },
  {
    "text": "that I can help other people stay up to date and this used to be easy back in",
    "start": "15680",
    "end": "20810"
  },
  {
    "text": "the olden days because Java moved you know it's an interesting enterprise",
    "start": "20810",
    "end": "25849"
  },
  {
    "text": "level pace and now how Java is moving much more rapidly so the aim of this",
    "start": "25849",
    "end": "31099"
  },
  {
    "text": "talk is to give you a tldr version of what's happened in the Java ecosystem",
    "start": "31099",
    "end": "36379"
  },
  {
    "text": "since Java 8 came out was that for three years ago now and before I get started",
    "start": "36379",
    "end": "42469"
  },
  {
    "text": "who's using Java 8 most of you who's using Joe who's using a version before",
    "start": "42469",
    "end": "49399"
  },
  {
    "text": "Java 8 you have other problems this talk",
    "start": "49399",
    "end": "54559"
  },
  {
    "text": "might not be few get onto eight first and who's using nine three people who's",
    "start": "54559",
    "end": "62329"
  },
  {
    "text": "using 10 five people who's using 11 Oh loads of you great awesome this is about",
    "start": "62329",
    "end": "69110"
  },
  {
    "text": "the representation of the sort of version numbers I've been seeing through my extensive research by using Twitter",
    "start": "69110",
    "end": "74659"
  },
  {
    "text": "as a top research tool so yes so I want to talk a bit about the ecosystem since",
    "start": "74659",
    "end": "81320"
  },
  {
    "text": "Java a lot of people have this problem grading Path nine sounds scary particularly with the module system and",
    "start": "81320",
    "end": "89270"
  },
  {
    "start": "82000",
    "end": "173000"
  },
  {
    "text": "Java breaks everything past nine which is not true but there's definitely a perception of that and on top of that",
    "start": "89270",
    "end": "94579"
  },
  {
    "text": "since Java 11 there's a bit been a few concerns around I don't want to have to pay for Java what's the deal with people",
    "start": "94579",
    "end": "101360"
  },
  {
    "text": "starting to charge for support now so I want to talk a bit about this and because a lot of people are super happy",
    "start": "101360",
    "end": "107689"
  },
  {
    "text": "with Java 8 thanks very much I think I'll just stay here I've got lambdas and streams it's all I",
    "start": "107689",
    "end": "113210"
  },
  {
    "text": "ever wanted from my language I don't need modularity so I'm not going to go beyond Java 8 which is something that",
    "start": "113210",
    "end": "120140"
  },
  {
    "text": "I've been seeing I like I said through my super scientific research on Twitter which only allows you to put 4 values",
    "start": "120140",
    "end": "126860"
  },
  {
    "text": "into your questionnaires anyway so this doesn't even represent the people who are using 7 6 or",
    "start": "126860",
    "end": "132870"
  },
  {
    "text": "heaven forbid earlier than 6:00 so the majority of people who are using 8 or",
    "start": "132870",
    "end": "139799"
  },
  {
    "text": "above are using version 8 not surprisingly and then people are using jump some people are using Java 9 some",
    "start": "139799",
    "end": "145590"
  },
  {
    "text": "people are using Java 10 and surprising amount of people already on Java 11 even",
    "start": "145590",
    "end": "150629"
  },
  {
    "text": "though it's only been out since his last September this has kind of might be an",
    "start": "150629",
    "end": "156599"
  },
  {
    "text": "unexpected shape of the poll results for a lot of people you might sort of expect to see more of a curve of people being",
    "start": "156599",
    "end": "162989"
  },
  {
    "text": "on eight and then slightly fewer being on nine fewer being on 10 and even fewer being on 11 and the shape of this curve",
    "start": "162989",
    "end": "169109"
  },
  {
    "text": "is one of the things I want to cover in this talk so I'm going to cover the new",
    "start": "169109",
    "end": "176340"
  },
  {
    "start": "173000",
    "end": "394000"
  },
  {
    "text": "release cadence the the progress for updates for versions of Java the",
    "start": "176340",
    "end": "182909"
  },
  {
    "text": "licensing and support changes I'm also going to cover a bit about what you might get out of using a version of Java",
    "start": "182909",
    "end": "189090"
  },
  {
    "text": "beyond Java 8 and I'm going to hopefully cover some pointers for upgrading the",
    "start": "189090",
    "end": "194970"
  },
  {
    "text": "migration path from 8 through to 11 specifically I'm hoping that a lot of",
    "start": "194970",
    "end": "200730"
  },
  {
    "text": "this news isn't really news to people but like I said this is this is the kind",
    "start": "200730",
    "end": "205919"
  },
  {
    "text": "of summary condensed version of stuff that's happened in the last couple of years news wise that you need to be aware of if you're running Java inside",
    "start": "205919",
    "end": "212069"
  },
  {
    "text": "your organization's firstly we moved to a six monthly release cadence six",
    "start": "212069",
    "end": "217739"
  },
  {
    "text": "monthly release cycles so in the olden days we would get Java every two years three years or you know sometimes six or",
    "start": "217739",
    "end": "224250"
  },
  {
    "text": "seven years between versions of Java which is one of the reasons why I think enterprises loved it so much because",
    "start": "224250",
    "end": "229470"
  },
  {
    "text": "it's it's nice and stable but now since Java 9 we have releases every every",
    "start": "229470",
    "end": "234720"
  },
  {
    "text": "March and every September like clockwork this is a much better way of working we know this from doing continuous delivery",
    "start": "234720",
    "end": "240840"
  },
  {
    "text": "and continuous deployment we if we say we're going to release on a specific date we just release the features that",
    "start": "240840",
    "end": "247680"
  },
  {
    "text": "were ready then and then if they're not ready at that point we release them in the next release we just have this nice",
    "start": "247680",
    "end": "253139"
  },
  {
    "text": "predictable release cadence now obviously Oracle didn't want to support every one of these releases for",
    "start": "253139",
    "end": "259440"
  },
  {
    "text": "three years because you know at some point they'll be supporting like six or seven different versions of Java and as",
    "start": "259440",
    "end": "266250"
  },
  {
    "text": "developers we know it's a pain in the neck to support something more than one version of of something at the same time so instead",
    "start": "266250",
    "end": "274740"
  },
  {
    "text": "with the six monthly releases there will be updates for though each release will",
    "start": "274740",
    "end": "282060"
  },
  {
    "text": "be supported for the six months of their life so if I supported I mean having updates available so",
    "start": "282060",
    "end": "287940"
  },
  {
    "text": "updates for nine ten and so on and so forth for six months until the next release comes out but obviously not",
    "start": "287940",
    "end": "295620"
  },
  {
    "text": "everyone wants to upgrade their version of Java every six months so every three years one of these releases will be",
    "start": "295620",
    "end": "302250"
  },
  {
    "text": "designated a long-term support release specifically Java 11 and I assume in",
    "start": "302250",
    "end": "307440"
  },
  {
    "text": "Java 17 Java 8 is also a long-term support release so you get sort of mini",
    "start": "307440",
    "end": "315030"
  },
  {
    "text": "releases every six months nine ten and then you get like long-term support releases every three years so 11 and",
    "start": "315030",
    "end": "321599"
  },
  {
    "text": "that explains the the results we saw where people are on either 8 or 11",
    "start": "321599",
    "end": "328009"
  },
  {
    "text": "because if you're online you should have migrated to 10 and if you're on 10 you should have gone to 11 because now 9 and",
    "start": "328009",
    "end": "335010"
  },
  {
    "text": "10 are no longer supported however this is actually Oracle's story this is not",
    "start": "335010",
    "end": "340970"
  },
  {
    "text": "everybody everywhere every vendor every JDK this is this is a story from Oracle",
    "start": "340970",
    "end": "346770"
  },
  {
    "text": "and the Oracle story is if you want the long-term support in terms of support",
    "start": "346770",
    "end": "352320"
  },
  {
    "text": "and updates you have to pay for it so if you don't want to pay if you don't want",
    "start": "352320",
    "end": "357840"
  },
  {
    "text": "to pay Oracle for updates to your JDK you have to update every six months with",
    "start": "357840",
    "end": "363180"
  },
  {
    "text": "each release that comes out if you want the long-term support from Oracle you have to pay for their commercial JDK",
    "start": "363180",
    "end": "370070"
  },
  {
    "text": "okay specifically I'm just going to give some stuff which comes the legal stuff",
    "start": "370070",
    "end": "376710"
  },
  {
    "text": "starting with Java 11 Oracle provide JDK releases under an open-source license and under a commercial license and this",
    "start": "376710",
    "end": "384720"
  },
  {
    "text": "replaces the historical BCL license so traditionally you had two different you",
    "start": "384720",
    "end": "391800"
  },
  {
    "text": "had well I'll come inside in a minute the point is this sounds frightening and",
    "start": "391800",
    "end": "396840"
  },
  {
    "start": "394000",
    "end": "621000"
  },
  {
    "text": "overly complicated talk this comes from that classic film the",
    "start": "396840",
    "end": "402840"
  },
  {
    "text": "lego batman movie which is a very popular movie in my household as you",
    "start": "402840",
    "end": "408720"
  },
  {
    "text": "might noticed if you saw my children earlier so it does sound very complicated to set that sounds confusing",
    "start": "408720",
    "end": "414750"
  },
  {
    "text": "it sounds frightening we have to pay for Java from now on but that's not it's it's so let's talk through some of the",
    "start": "414750",
    "end": "420360"
  },
  {
    "text": "some of the implications of this firstly Oracle now has two different JD case",
    "start": "420360",
    "end": "425730"
  },
  {
    "text": "they have an open JDK which is the free one that you can download and use in production for free no problem and they",
    "start": "425730",
    "end": "432270"
  },
  {
    "text": "have a commercial JDK which you have to pay for if you're going to use it in in production so obviously if you want to",
    "start": "432270",
    "end": "439110"
  },
  {
    "text": "if you don't want to pay use the open JDK version and from Java 11 onwards the",
    "start": "439110",
    "end": "444630"
  },
  {
    "text": "Oracle JDK builds and the open JDK builds will be essentially identical in the past people were a bit worried about",
    "start": "444630",
    "end": "451350"
  },
  {
    "text": "using open JDK because they're worried that open JDK is not the same as the Oracle JDK that they've been using",
    "start": "451350",
    "end": "457170"
  },
  {
    "text": "forever I'm assuming that most of you are using the Oracle JDK because that's where we go we go to the Oracle down the",
    "start": "457170",
    "end": "463560"
  },
  {
    "text": "Oracle page we download the Oracle JDK and we use it without thinking about it and that's why I want to talk a bit",
    "start": "463560",
    "end": "469710"
  },
  {
    "text": "about some of these changes because this is no longer the case however from Java 11 the open JDK is the",
    "start": "469710",
    "end": "476070"
  },
  {
    "text": "same as the Oracle JDK and that includes the commercial features that used to have to pay for in the Oracle JDK so a",
    "start": "476070",
    "end": "483750"
  },
  {
    "text": "mission control and flight recorder are also now part of open JDK so this is actually a good thing Oracle has worked",
    "start": "483750",
    "end": "489000"
  },
  {
    "text": "hard to put all the useful features from their JDK into the open JDK from open",
    "start": "489000",
    "end": "495450"
  },
  {
    "text": "JDK there are many builds not just the Oracle one not just the Oracle commercial build which is also based off",
    "start": "495450",
    "end": "501420"
  },
  {
    "text": "open JDK there are a bunch of different builds and there are a bunch of different vendors to choose from some of whom you will see here in the exhibition",
    "start": "501420",
    "end": "507990"
  },
  {
    "text": "hall like Azul and IBM so Oracle is not the only game in town the one I kind of",
    "start": "507990",
    "end": "513450"
  },
  {
    "text": "want to point out as being sort of an interesting choice if you're not really sure how to tread this this whole",
    "start": "513450",
    "end": "519990"
  },
  {
    "text": "landscape is that adopt open JDK martim will find this very exciting because he's kind of leading a lot of the",
    "start": "519990",
    "end": "525990"
  },
  {
    "text": "efforts on adopt open JDK if you go to the adopt open JDK website you will see",
    "start": "525990",
    "end": "531360"
  },
  {
    "text": "that you download a JDK four eight nine ten and eleven including long-term support you",
    "start": "531360",
    "end": "538970"
  },
  {
    "text": "can actually have two different JVMs to the hotspot or open j9 and they and you can see it's supported on a bunch of",
    "start": "538970",
    "end": "545030"
  },
  {
    "text": "different platforms Linux Windows and Mac and so forth and this has long-term",
    "start": "545030",
    "end": "550940"
  },
  {
    "text": "support for for free long term support and free updates for for a longer period",
    "start": "550940",
    "end": "558050"
  },
  {
    "text": "of time so it says here in addition every three years one feature will be designated a",
    "start": "558050",
    "end": "563360"
  },
  {
    "text": "long term support release which we know we will produce long term support releases for at least four years and",
    "start": "563360",
    "end": "569270"
  },
  {
    "text": "this you don't have to pay for you don't have to pay for support you don't have to pay for updates so this is this is a",
    "start": "569270",
    "end": "576050"
  },
  {
    "text": "community driven effort but it's got the backing of a bunch of the well-known names in the Java space and so this",
    "start": "576050",
    "end": "582560"
  },
  {
    "text": "would be my default place to go to to look for downloading are free to use jdk",
    "start": "582560",
    "end": "587660"
  },
  {
    "text": "based off open JDK but as I said there are a bunch of different options so yes",
    "start": "587660",
    "end": "593060"
  },
  {
    "text": "so this will produce LTS releases for at least four years this is great because it lets you slowly migrate from 8 to 11",
    "start": "593060",
    "end": "601100"
  },
  {
    "text": "to 17 with with a bit of overlap you can actually see it says the end of",
    "start": "601100",
    "end": "606770"
  },
  {
    "text": "availability for Java 8 is at least September 2023 so some of you are going to take away from this talk you don't need to upgrade from Java 8 until 2023",
    "start": "606770",
    "end": "614450"
  },
  {
    "text": "fine but you're gonna have a lot of paying in a few years time yes so that's",
    "start": "614450",
    "end": "622340"
  },
  {
    "start": "621000",
    "end": "825000"
  },
  {
    "text": "kind of like the high level summary with some of this stuff which is kind of it's a bit involved because it changes the",
    "start": "622340",
    "end": "628130"
  },
  {
    "text": "way we think about support updates and licensing for Java there is a session later on today called is Java still free",
    "start": "628130",
    "end": "634490"
  },
  {
    "text": "which I assume is going to go into this in much more detail there are a bunch of the vendors on the panel for that so if",
    "start": "634490",
    "end": "639650"
  },
  {
    "text": "you have any questions or doubts around that I would highly recommend going to that session because that's that's",
    "start": "639650",
    "end": "644990"
  },
  {
    "text": "designed to address a lot of these issues so the question is once again",
    "start": "644990",
    "end": "650000"
  },
  {
    "text": "that sounds scary and complicated why should I bother migrating from Java 8",
    "start": "650000",
    "end": "655360"
  },
  {
    "text": "let's look firstly at language features because I'm assuming that we are developers and technical people and what",
    "start": "655360",
    "end": "660500"
  },
  {
    "text": "we care about is the language features and so at once again I'm going to go to my highly scientific Twitter to figure out from",
    "start": "660500",
    "end": "668000"
  },
  {
    "text": "the people who are using versions of Java later than eight which are the features they use the most which ones are the most interesting and the first",
    "start": "668000",
    "end": "674389"
  },
  {
    "text": "one is J shell the repple so let's have a quick demo this would not be a Trisha",
    "start": "674389",
    "end": "680029"
  },
  {
    "text": "talk without at least some demos so J shell those who has used two J shell",
    "start": "680029",
    "end": "687410"
  },
  {
    "text": "before who has heard of J shell good that's good who knows what a reckless alright I'll",
    "start": "687410",
    "end": "695600"
  },
  {
    "text": "just do a really really quick demo and the point is to be able to run small snippets of Java from the command line",
    "start": "695600",
    "end": "701180"
  },
  {
    "text": "which we could never do before because we had to have like a whole class with public static void main blah blah and",
    "start": "701180",
    "end": "706519"
  },
  {
    "text": "now we can do including tab completion we can just run stuff from the command",
    "start": "706519",
    "end": "711740"
  },
  {
    "text": "line and you see you get all your nice tab completion there oops and you don't",
    "start": "711740",
    "end": "719930"
  },
  {
    "text": "need semicolons Oh progress and you can",
    "start": "719930",
    "end": "726019"
  },
  {
    "text": "do a bunch of other stuff so you can obviously you can define variables so you can have like int I equals 5 put a",
    "start": "726019",
    "end": "732620"
  },
  {
    "text": "semicolon on just by pure habit and you can mess around one of the nice things about using J shell is you can mess",
    "start": "732620",
    "end": "738260"
  },
  {
    "text": "around with the new features without having to like create a whole class or testing framework to mess around with",
    "start": "738260",
    "end": "743750"
  },
  {
    "text": "stuff so we're going to use var because you know we can so I can define these I",
    "start": "743750",
    "end": "749899"
  },
  {
    "text": "can also define anonymous variables here and then I can list them using some of",
    "start": "749899",
    "end": "755060"
  },
  {
    "text": "these commands I'd like to see what all my variables are I can do things like I can define methods so I can have void",
    "start": "755060",
    "end": "760730"
  },
  {
    "text": "print something I use tab completion",
    "start": "760730",
    "end": "770899"
  },
  {
    "text": "because you know I'm used to living inside an IDE some let show you some foul here I do need to semicolon and I",
    "start": "770899",
    "end": "779569"
  },
  {
    "text": "can create this method even though it's got a forward reference I haven't defined some value at so it says I've created it but I can't invoke it until",
    "start": "779569",
    "end": "786560"
  },
  {
    "text": "I've declared what some values so that I could say some vow is something and then I can cool print",
    "start": "786560",
    "end": "796420"
  },
  {
    "text": "something so I can kind of build up a bunch of I can build up a bunch of stage",
    "start": "796420",
    "end": "802510"
  },
  {
    "text": "and a bunch of variables and I can play with stuff I can also do things like I can was it savior I can save stuff into",
    "start": "802510",
    "end": "808840"
  },
  {
    "text": "a file so I can use it reuse it later I can run scripts and things like that so it's kind of it's kind of nice I'm not",
    "start": "808840",
    "end": "814960"
  },
  {
    "text": "really sure how many people are really using effectively scripting for Java but",
    "start": "814960",
    "end": "820090"
  },
  {
    "text": "it turns out that there's a a lot of people are finding it quite useful so so",
    "start": "820090",
    "end": "827380"
  },
  {
    "start": "825000",
    "end": "1051000"
  },
  {
    "text": "a couple of quite a few people were quite happy to see that J shell is built into the language they can just kind of use it to try stuff out as as early as",
    "start": "827380",
    "end": "835510"
  },
  {
    "text": "possible one of the nice things about J shell as you saw it's like an independent command-line thing so you",
    "start": "835510",
    "end": "841660"
  },
  {
    "text": "don't actually need to do anything with your existing applications to start using it so you can just like download Java 11 or Java 12 if you want and use J",
    "start": "841660",
    "end": "849910"
  },
  {
    "text": "shell completely independently from anything of the rest of your application so it allows you to sort of get started get up and running early on quickly",
    "start": "849910",
    "end": "857140"
  },
  {
    "text": "without impacting anything that you have at the moment of course the big feature from Java 9 was var and not really that",
    "start": "857140",
    "end": "865030"
  },
  {
    "text": "surprisingly loads of people are quite happy to be using vara in their code because less typing is what we're all",
    "start": "865030",
    "end": "871600"
  },
  {
    "text": "about because typing is really tiring when we're a Java person typing is not the difficult thing so most of you",
    "start": "871600",
    "end": "879250"
  },
  {
    "text": "probably know of or have used var I'm just going to talk through a couple of examples because because you know I'm",
    "start": "879250",
    "end": "887710"
  },
  {
    "text": "the advocate for IntelliJ IDEA so it'd be really stupid not to have a talk you haven't taught without any intelligent idea no because it's really useful and",
    "start": "887710",
    "end": "895830"
  },
  {
    "text": "Java 10mm so I've turned on the",
    "start": "895830",
    "end": "903160"
  },
  {
    "text": "inspection in IntelliJ IDEA which says you know you could turn these things into interval you can use var so I can",
    "start": "903160",
    "end": "909430"
  },
  {
    "text": "just automatically replace that with var that's fine great so it's marginally",
    "start": "909430",
    "end": "914950"
  },
  {
    "text": "less typing big deal and it's kind of useful when you've got things like generics because that can start to be a",
    "start": "914950",
    "end": "921490"
  },
  {
    "text": "bit unwieldy you don't need to the types on both sides so let's turn that into a far fine I kind of know this",
    "start": "921490",
    "end": "928180"
  },
  {
    "text": "is an ArrayList of half person I should be able to see well IntelliJ tells me in",
    "start": "928180",
    "end": "935020"
  },
  {
    "text": "really tiny writing that this is an ArrayList of type with type person",
    "start": "935020",
    "end": "940030"
  },
  {
    "text": "inside it now with var it's going to use",
    "start": "940030",
    "end": "945400"
  },
  {
    "text": "the type information obviously on the right to to determine what the type is var doesn't mean dynamic typing by the",
    "start": "945400",
    "end": "951850"
  },
  {
    "text": "way it just means you don't have to type the types on both sides the equals sign so if you have something which is",
    "start": "951850",
    "end": "958180"
  },
  {
    "text": "defined as a list but but is an ArrayList then when you turn that into a var it's",
    "start": "958180",
    "end": "965770"
  },
  {
    "text": "no longer actually a list it's now on a Rea list so in terms of using it with interface types then you might you may",
    "start": "965770",
    "end": "971680"
  },
  {
    "text": "or may not want to use far you might want to find something specifically is having a type of the interface so var is",
    "start": "971680",
    "end": "978940"
  },
  {
    "text": "not like a magic keywords you just put it everywhere and say let's just get rid of all the types on the left hand side it's something to think about you use it",
    "start": "978940",
    "end": "985690"
  },
  {
    "text": "when it makes your code easier so for example we're not going to use it here because now my code doesn't mean",
    "start": "985690",
    "end": "993250"
  },
  {
    "text": "anything I I don't know what that type is I don't know what type comes from this method I don't know what type this",
    "start": "993250",
    "end": "999040"
  },
  {
    "text": "variable is so if you have less than optimal optimal names of your variables",
    "start": "999040",
    "end": "1005220"
  },
  {
    "text": "you might not want to be using that but you might want to use it in places like this where you have like really long",
    "start": "1005220",
    "end": "1012120"
  },
  {
    "text": "types on both sides of your equals and the other place you might want to use it is somewhere like this mm-hmm",
    "start": "1012120",
    "end": "1018090"
  },
  {
    "text": "that looks fun this is a genuine thing I didn't make this up so and this is when",
    "start": "1018090",
    "end": "1023400"
  },
  {
    "text": "you're iterating over something I don't even care about that type and that is a good place to have well so yes so far is",
    "start": "1023400",
    "end": "1032790"
  },
  {
    "text": "nice it is not a magic fix or thing it is something that requires you to think about is it the right thing to do and",
    "start": "1032790",
    "end": "1039030"
  },
  {
    "text": "will it will it remove actual use of information or is it just going to hide a lot of the boilerplate that Java",
    "start": "1039030",
    "end": "1044819"
  },
  {
    "text": "allegedly has Java does have a boilerplate but not all boilerplate is a bad thing so far as good people like",
    "start": "1044820",
    "end": "1053070"
  },
  {
    "text": "vara especially if they've come from other languages like you know I don't Kotlin for example that my company",
    "start": "1053070",
    "end": "1058310"
  },
  {
    "text": "invented and so people like and and people like VAR combined with things",
    "start": "1058310",
    "end": "1063350"
  },
  {
    "text": "like Lombok to try and reduce some of this boilerplate that that's in java for many of us who've been programming in",
    "start": "1063350",
    "end": "1069440"
  },
  {
    "text": "Java forever like it's not really a big deal because we're used to working this way it's not a big deal but for people",
    "start": "1069440",
    "end": "1074750"
  },
  {
    "text": "who are used to using all the different types of languages where the boilerplate is well as less there's more focus on",
    "start": "1074750",
    "end": "1080690"
  },
  {
    "text": "readability and less loyola plate these features are quite useful and my favorite feature from Java 9 is the",
    "start": "1080690",
    "end": "1087320"
  },
  {
    "text": "convenience factory methods for collections so and this is one of the things that gets used by a bunch of",
    "start": "1087320",
    "end": "1092540"
  },
  {
    "text": "people so people are happy with all of these people love it they think it's amazing like I said if I put enough",
    "start": "1092540",
    "end": "1099080"
  },
  {
    "text": "tweets on here that it's gonna sell you on moving to Java 11 because like people in Twitter think it's good therefore",
    "start": "1099080",
    "end": "1104210"
  },
  {
    "text": "it's a good thing right that's how life works these days twister dictates",
    "start": "1104210",
    "end": "1110030"
  },
  {
    "text": "technology and so let's have a look at this because it's my favorite feature and we're going to look for joy",
    "start": "1110030",
    "end": "1117940"
  },
  {
    "text": "obviously this came it's Java 9 in the olden days the old days like for all of",
    "start": "1117940",
    "end": "1123830"
  },
  {
    "text": "you using Java 8 the olden days we would declare a list a set a set of values",
    "start": "1123830",
    "end": "1128900"
  },
  {
    "text": "like this so you're raised as list and you sort of use it as if it was an immutable and modifiable list but",
    "start": "1128900",
    "end": "1136250"
  },
  {
    "text": "actually it's not because you can't add to that list but you can change the individual elements on that list so it's",
    "start": "1136250",
    "end": "1142190"
  },
  {
    "text": "actually not unmodifiable but we all use it as if it was we have to wrap it inside an unmodifiable list to make it",
    "start": "1142190",
    "end": "1148880"
  },
  {
    "text": "on modifiable in Java and you don't have to do that you just don't you call list off mmm and it's much more readable so",
    "start": "1148880",
    "end": "1156980"
  },
  {
    "text": "it's kind of nice for lists it's really nice for set because creating a set was a bit of a pain you have a list and then",
    "start": "1156980",
    "end": "1162830"
  },
  {
    "text": "you put in a set and then you wrap it in an unmodified will set at I don't understand why this feature wasn't in",
    "start": "1162830",
    "end": "1168800"
  },
  {
    "text": "the language earlier so now you just say set of and you get a non modifiable set and similarly for map you have to do",
    "start": "1168800",
    "end": "1175490"
  },
  {
    "text": "stuff inside a static initializer and now let's see if this formatting is",
    "start": "1175490",
    "end": "1181250"
  },
  {
    "text": "going to go mental you can do a map to of entries",
    "start": "1181250",
    "end": "1187060"
  },
  {
    "text": "which the formatting went a little bit mental and let's see if I can get this",
    "start": "1187850",
    "end": "1195460"
  },
  {
    "text": "that's because you've wrapped that in a weird way fine and so you can do map of",
    "start": "1197350",
    "end": "1203149"
  },
  {
    "text": "entries that's okay it's not terrible especially if you start putting your static imports in for all of these",
    "start": "1203149",
    "end": "1208789"
  },
  {
    "text": "things and then reformat that that's nice Marlys so yes so it's a bit more",
    "start": "1208789",
    "end": "1219590"
  },
  {
    "text": "readable it's a bit it's a bit better than putting inside a static block it's much more interesting when you have",
    "start": "1219590",
    "end": "1224899"
  },
  {
    "text": "fewer than ten entries which probably some people do so if we have fewer than",
    "start": "1224899",
    "end": "1229999"
  },
  {
    "text": "ten entries let's get rid of these then",
    "start": "1229999",
    "end": "1235279"
  },
  {
    "text": "you can use a map of and then it's just uses convention of key value key value",
    "start": "1235279",
    "end": "1242149"
  },
  {
    "text": "key value so it's just again a bit less boilerplate it's a bit more readable particularly useful for things like test",
    "start": "1242149",
    "end": "1248659"
  },
  {
    "text": "code but also I used to work at MongoDB and I used to create maps all the time inside that because when you're putting stuff into a document store you use maps",
    "start": "1248659",
    "end": "1255649"
  },
  {
    "text": "and this is a much nicer easier syntax for creating maps in Java 10 are one of",
    "start": "1255649",
    "end": "1267919"
  },
  {
    "start": "1265000",
    "end": "1304000"
  },
  {
    "text": "the things that came in is the ability to collect into these unmodifiable lists so that's really useful so you can just",
    "start": "1267919",
    "end": "1273289"
  },
  {
    "text": "straightaway change your streams to collect into unmodifiable lists sets etc another new feature which came in in",
    "start": "1273289",
    "end": "1280759"
  },
  {
    "text": "Java 9 is new methods on the stream API this was a feature which I thought was a little bit missing from Java 8 the",
    "start": "1280759",
    "end": "1287269"
  },
  {
    "text": "ability to do things like process this stream until some condition is omit or so this is take while the other example",
    "start": "1287269",
    "end": "1293960"
  },
  {
    "text": "is drop while so ignore this stream until some condition is met so it's just a nice little addition to to the",
    "start": "1293960",
    "end": "1300679"
  },
  {
    "text": "language for working with streams a feature which came into Java 11 is",
    "start": "1300679",
    "end": "1307099"
  },
  {
    "start": "1304000",
    "end": "1356000"
  },
  {
    "text": "predicate not so now you can negate stuff there was a bit of argument about this like do we really need a predicate",
    "start": "1307099",
    "end": "1313129"
  },
  {
    "text": "not surely we can just use an exclamation mark because that's the same thing but this kind of it's all about",
    "start": "1313129",
    "end": "1318710"
  },
  {
    "text": "readability and the whole point about a lot of language updates for Java recently have been about around readability so for",
    "start": "1318710",
    "end": "1325570"
  },
  {
    "text": "example if you like using method references which some of us do and some of us don't what does that was to r11 instead of",
    "start": "1325570",
    "end": "1333670"
  },
  {
    "text": "doing this you can't use a method reference if you're if you not it you can say predicate not but static input",
    "start": "1333670",
    "end": "1343990"
  },
  {
    "text": "that and so you might prefer that syntax just some a readability point of view",
    "start": "1343990",
    "end": "1349750"
  },
  {
    "text": "it's really it's really about personal preference that's something that came in in Java 11 and some people love it and",
    "start": "1349750",
    "end": "1358120"
  },
  {
    "start": "1356000",
    "end": "1538000"
  },
  {
    "text": "some people think what's the point and then over the course of Java 9 10 and 11",
    "start": "1358120",
    "end": "1365590"
  },
  {
    "text": "we've been getting additional methods on optional I actually think this is one of the most interesting things about the",
    "start": "1365590",
    "end": "1370780"
  },
  {
    "text": "most recent versions of Java Java 8 had optional optional kind of it's good it's",
    "start": "1370780",
    "end": "1375970"
  },
  {
    "text": "a really nice way of saying as a return type from a method saying you might get",
    "start": "1375970",
    "end": "1382180"
  },
  {
    "text": "something you might not don't misuse it in terms of having it for fields and for parameters and all the rest of it it's",
    "start": "1382180",
    "end": "1388180"
  },
  {
    "text": "really there just for when you ask for something like find me a something optional can say you got something or",
    "start": "1388180",
    "end": "1395800"
  },
  {
    "text": "you didn't with Java 8 you can work with it in in a fairly simple way you can say if present or is present and get and",
    "start": "1395800",
    "end": "1403030"
  },
  {
    "text": "it's kind of fine but the the recent methods that have been added on 9 10 and",
    "start": "1403030",
    "end": "1408220"
  },
  {
    "text": "11 make it a little bit Eve even easier to use so for example optional so",
    "start": "1408220",
    "end": "1418990"
  },
  {
    "text": "instead of I've committed that it's not having to do something like this where",
    "start": "1418990",
    "end": "1424660"
  },
  {
    "text": "you do and is present and you have to do a get and then an else which you don't",
    "start": "1424660",
    "end": "1430330"
  },
  {
    "text": "have to because you could have done an if present there but you still have the else hanging around which is a bit clumsy I found the optional was a bit",
    "start": "1430330",
    "end": "1436570"
  },
  {
    "text": "difficult to work with in 8 in this if present or else was I don't know if it",
    "start": "1436570",
    "end": "1442330"
  },
  {
    "text": "was - I don't know if it was 10 or 11 but now you can just give two lambda expressions so you either do that if",
    "start": "1442330",
    "end": "1448750"
  },
  {
    "text": "it's present or you do you do something else if it's not present so that's one of the nice things and",
    "start": "1448750",
    "end": "1454830"
  },
  {
    "text": "that's Java 9 you've got or on Java 9 as",
    "start": "1454830",
    "end": "1460330"
  },
  {
    "text": "well which gives you and I'll turn it optional so you can use you either",
    "start": "1460330",
    "end": "1467740"
  },
  {
    "text": "return this optional value or you return a different optional value and you can use stream to work with optionals inside",
    "start": "1467740",
    "end": "1475510"
  },
  {
    "text": "streams in a slightly easier way you can say you can return the value of an",
    "start": "1475510",
    "end": "1483160"
  },
  {
    "text": "optional or throw throw a default exception they're not found exception which is I think this is a useful method",
    "start": "1483160",
    "end": "1489250"
  },
  {
    "text": "for when you're actually doing in the middle of the migration so this is like a step on the way to using optional in a",
    "start": "1489250",
    "end": "1495160"
  },
  {
    "text": "more effective manner and then in java 11 we got obviously we're used to using",
    "start": "1495160",
    "end": "1502390"
  },
  {
    "text": "is present in java 8 but we can actually use is empty in java 11 again a",
    "start": "1502390",
    "end": "1510010"
  },
  {
    "text": "readability thing obviously you could say not is present but some people prefer explicitly saying if it's empty",
    "start": "1510010",
    "end": "1517060"
  },
  {
    "text": "do this thing what's this oh yeah so",
    "start": "1517060",
    "end": "1523740"
  },
  {
    "text": "yeah that's just IntelliJ being too smart so yeah so some of these methods",
    "start": "1523740",
    "end": "1529060"
  },
  {
    "text": "an optional just make method make optional easier to work with so if you are working with optional in your code base you'll find that 9 10 and 11 give",
    "start": "1529060",
    "end": "1536170"
  },
  {
    "text": "you some nice new ways of working with it Java 11 comes with built-in HTTP client",
    "start": "1536170",
    "end": "1541920"
  },
  {
    "start": "1538000",
    "end": "1608000"
  },
  {
    "text": "and the things that people like about this is having a really good built in",
    "start": "1541920",
    "end": "1547030"
  },
  {
    "text": "HTTP client will solve other headaches so you don't have to use any dependencies but also it's non-blocking",
    "start": "1547030",
    "end": "1553210"
  },
  {
    "text": "reactive streams HTTP 1 & 2 so this is something that a lot of people are",
    "start": "1553210",
    "end": "1558820"
  },
  {
    "text": "interested in from a Java 11 point of view especially in this current world of asynchronous reactive programming",
    "start": "1558820",
    "end": "1565050"
  },
  {
    "text": "another feature which I thought was interesting from Java 9 was multi release jar files not applicable to a",
    "start": "1565050",
    "end": "1570910"
  },
  {
    "text": "lot of enterprise developers but it's applicable to any of us who use other libraries which most of us do so this",
    "start": "1570910",
    "end": "1577270"
  },
  {
    "text": "allows library developers to create a single jar file and you run it on whichever JDK you're running on and that",
    "start": "1577270",
    "end": "1584260"
  },
  {
    "text": "jar file can use feet from whichever version so J unit 5 for",
    "start": "1584260",
    "end": "1589400"
  },
  {
    "text": "example can use features from Java 11 if you're running on Java 11 or it won't use those features if they're not",
    "start": "1589400",
    "end": "1595520"
  },
  {
    "text": "available due to multi release jar files and then you don't need to say I'm going to download the version of J unit 5 for",
    "start": "1595520",
    "end": "1602600"
  },
  {
    "text": "Java 9 for Java 10 Java 11 it's just a single jar file it's very useful for their library developers and of course",
    "start": "1602600",
    "end": "1609620"
  },
  {
    "start": "1608000",
    "end": "1787000"
  },
  {
    "text": "Java 9 had jigsaw which everyone is very excited about and of course we're",
    "start": "1609620",
    "end": "1615500"
  },
  {
    "text": "supposed to call it the Java module system not jigsaw so it is useful for a bunch of people specifically again for",
    "start": "1615500",
    "end": "1621740"
  },
  {
    "text": "library developers because they can encapsulate stuff that you're not supposed to be able to touch that's the",
    "start": "1621740",
    "end": "1626750"
  },
  {
    "text": "point but it's also can be useful for enterprise developers who want an excuse",
    "start": "1626750",
    "end": "1632299"
  },
  {
    "text": "or a mechanism to actually like properly separate the concerns inside their applications the most interesting thing",
    "start": "1632299",
    "end": "1638840"
  },
  {
    "text": "to me I think about the module system is that allows us to do things like have J link so J link I think is very",
    "start": "1638840",
    "end": "1645710"
  },
  {
    "text": "interesting this allows you to package up your application and just the bits of Java that you want and create a much",
    "start": "1645710",
    "end": "1652760"
  },
  {
    "text": "smaller deployable and deploy it into the cloud so for example with jdk being",
    "start": "1652760",
    "end": "1658760"
  },
  {
    "text": "modulized there's a whole bunch of modules you could be using but if you're just using write Java dot util or Java",
    "start": "1658760",
    "end": "1664039"
  },
  {
    "text": "dot logging or like two or three of those modules you use J link to create a single deployable with your application",
    "start": "1664039",
    "end": "1670429"
  },
  {
    "text": "and just the bits of Java that you want they can be much much smaller so I'm running out of time but I want to do a",
    "start": "1670429",
    "end": "1676100"
  },
  {
    "text": "demo of this because I really like I really like the potential of this particularly for for deploying to the",
    "start": "1676100",
    "end": "1681740"
  },
  {
    "text": "cloud for example and it can help save you money so for example I'm calling J",
    "start": "1681740",
    "end": "1689780"
  },
  {
    "text": "link here from Java 11 I have to say which modules I want to package up from",
    "start": "1689780",
    "end": "1695210"
  },
  {
    "text": "these are the modules from the jdk itself my application has two modules",
    "start": "1695210",
    "end": "1700250"
  },
  {
    "text": "one is called three one is called four and then the module I really care about is is three so it's just the magic",
    "start": "1700250",
    "end": "1706070"
  },
  {
    "text": "incantation you need to use so you do that and then drilling will go away of",
    "start": "1706070",
    "end": "1712340"
  },
  {
    "text": "course it does because I created it and that's what I was going to get me well you know what let's just put it into",
    "start": "1712340",
    "end": "1718210"
  },
  {
    "text": "you three image - so puts that into a",
    "start": "1718210",
    "end": "1725020"
  },
  {
    "text": "directory called three image which has got things like Lib and bin we're going",
    "start": "1725020",
    "end": "1731890"
  },
  {
    "text": "to bin I have you can see I've got Java here and Java W just the tools that I",
    "start": "1731890",
    "end": "1737710"
  },
  {
    "text": "need from Java and if I go back out again the size of that directory oh",
    "start": "1737710",
    "end": "1747910"
  },
  {
    "text": "that's not the one I wanted but anyway it's the same thing what did I just do",
    "start": "1747910",
    "end": "1753220"
  },
  {
    "text": "not that's not what I wanted to do oh yes and such s3 image - and that's 40 mil so",
    "start": "1753220",
    "end": "1766000"
  },
  {
    "text": "I could create much much smaller packages to deploy my application with",
    "start": "1766000",
    "end": "1771130"
  },
  {
    "text": "and this I think this might be one of the reasons why we don't have a JRE anymore because we can actually just create our own runtime environment for",
    "start": "1771130",
    "end": "1777640"
  },
  {
    "text": "our for our application and not surprisingly I am of course running out",
    "start": "1777640",
    "end": "1783550"
  },
  {
    "text": "of time as usual this is a classic trash talk at Q Khan how long's this talk take so j-link is very interesting and could",
    "start": "1783550",
    "end": "1790960"
  },
  {
    "start": "1787000",
    "end": "1841000"
  },
  {
    "text": "potentially save money for a lot of people and in the future we also have a bunch of other stuff coming so Java 12",
    "start": "1790960",
    "end": "1797590"
  },
  {
    "text": "is coming out in two weeks time Java 12 has switch expressions I've got a demo",
    "start": "1797590",
    "end": "1803530"
  },
  {
    "text": "for this too but let's do a quick one and switch expressions I mean a lot of people would say you shouldn't be using",
    "start": "1803530",
    "end": "1810060"
  },
  {
    "text": "you shouldn't be using switch anyway because switch is like really nasty and",
    "start": "1810060",
    "end": "1815080"
  },
  {
    "text": "there's possibly a sign that you're not doing polymorphism correctly but there are cases where you do get values and",
    "start": "1815080",
    "end": "1820630"
  },
  {
    "text": "you want to say if I get this value give me one of these now with switch expressions you can use a much smaller",
    "start": "1820630",
    "end": "1826720"
  },
  {
    "text": "syntax to do the same thing and you don't have to put the break statement everywhere and you can use the nice pretty lambdas and stuff there's more",
    "start": "1826720",
    "end": "1832870"
  },
  {
    "text": "information about this on the IntelliJ blog it was published last week so if you're interested go and have a look at the blog post on that well that's coming",
    "start": "1832870",
    "end": "1839470"
  },
  {
    "text": "in Java 12 and of course in the future and this is going to be Simon's talk",
    "start": "1839470",
    "end": "1845680"
  },
  {
    "text": "tomorrow I believe in the future we've got things like project amber",
    "start": "1845680",
    "end": "1851679"
  },
  {
    "text": "a bunch of other stuff I know that a lot of people here in London are interested in things like value types for performance and there's loads of cool",
    "start": "1851679",
    "end": "1859179"
  },
  {
    "text": "stuff coming in Java and down the line at some point in time now oh my goodness",
    "start": "1859179",
    "end": "1864730"
  },
  {
    "text": "I have like five minutes left and I've got 20 more slides to get through so yes",
    "start": "1864730",
    "end": "1870159"
  },
  {
    "start": "1868000",
    "end": "1886000"
  },
  {
    "text": "the business doesn't care about language features we care about language features because it makes our job easier I say we",
    "start": "1870159",
    "end": "1875529"
  },
  {
    "text": "I'm assuming that we're all developers or developer minded and so the business you can't sell the business on upgrading",
    "start": "1875529",
    "end": "1881230"
  },
  {
    "text": "to Java 12 because of our for example like they just don't care but what they do care about is things like performance",
    "start": "1881230",
    "end": "1888010"
  },
  {
    "start": "1886000",
    "end": "1910000"
  },
  {
    "text": "so generally speaking each version of Java is generally faster for a number of",
    "start": "1888010",
    "end": "1894070"
  },
  {
    "text": "different reasons so anytime you upgrade even if you don't make any changes even if you don't make use of anything you",
    "start": "1894070",
    "end": "1900039"
  },
  {
    "text": "generally find that the the performance of your application is better obviously test measure see if it's true or not but",
    "start": "1900039",
    "end": "1906909"
  },
  {
    "text": "often you get free performance improvements and specifically in the",
    "start": "1906909",
    "end": "1912610"
  },
  {
    "start": "1910000",
    "end": "1938000"
  },
  {
    "text": "last few versions there's been a lot of optimizations for memory use so for example it's garbage collectors and then",
    "start": "1912610",
    "end": "1919600"
  },
  {
    "text": "we use things like the way that strings are represented so I've seen a few cases where people have been able to decrease",
    "start": "1919600",
    "end": "1926289"
  },
  {
    "text": "the memory footprint of our application by like almost as much as 50% because the way that strings are now represented",
    "start": "1926289",
    "end": "1932799"
  },
  {
    "text": "so this is quite interesting again particular if you're running in the cloud and you care about memory use",
    "start": "1932799",
    "end": "1937830"
  },
  {
    "text": "there's been a lot of changes to the garbage collector so in Java 9 the default garbage",
    "start": "1937830",
    "end": "1943750"
  },
  {
    "start": "1938000",
    "end": "1983000"
  },
  {
    "text": "collectors g1 and then a bunch of changes went in to help improve the performance of do you want even further",
    "start": "1943750",
    "end": "1950049"
  },
  {
    "text": "so if you care about the garbage collection obviously people tend to go performance equals garbage collection in",
    "start": "1950049",
    "end": "1956470"
  },
  {
    "text": "Java it's an element of it but it's not the only aspect of performance but there",
    "start": "1956470",
    "end": "1962470"
  },
  {
    "text": "are a lot of changes there and coming in later we have even more different types",
    "start": "1962470",
    "end": "1967720"
  },
  {
    "text": "of garbage collectors more improvements to those garbage collectors and so on so again these are the sorts of things that",
    "start": "1967720",
    "end": "1973690"
  },
  {
    "text": "if you if these garbage collectors and these changes work for you you get some",
    "start": "1973690",
    "end": "1979450"
  },
  {
    "text": "free performance improvements moving forward and obviously what the business really",
    "start": "1979450",
    "end": "1985810"
  },
  {
    "start": "1983000",
    "end": "2089000"
  },
  {
    "text": "cares about is cost now I believe that moving forward to a later version of Java can help reduce costs of the",
    "start": "1985810",
    "end": "1992350"
  },
  {
    "text": "company by which I mean actual money type costs in terms of things like using j-link in terms of things like better",
    "start": "1992350",
    "end": "1998410"
  },
  {
    "text": "performers lower memory usage and so forth so you can reduce costs but",
    "start": "1998410",
    "end": "2003720"
  },
  {
    "text": "there's also another cost which i think is important if your organization is trying to hire Java developers which",
    "start": "2003720",
    "end": "2009330"
  },
  {
    "text": "most organizations are at any point in time if they have a big Java shop and if you're going to be stuck on an older",
    "start": "2009330",
    "end": "2015960"
  },
  {
    "text": "version of Java for a long period of time it will be more difficult to attract developers going forward at the",
    "start": "2015960",
    "end": "2022050"
  },
  {
    "text": "moment is fine because we're probably fine working on Java 8 but going forward people are not going to be interested in",
    "start": "2022050",
    "end": "2027120"
  },
  {
    "text": "working on legacy systems going going forward so that's just I guess that's kind of a personal thing from from the",
    "start": "2027120",
    "end": "2032730"
  },
  {
    "text": "developer point of view the other reason which I think is really interesting to move on migrate now is to get yourself",
    "start": "2032730",
    "end": "2039510"
  },
  {
    "text": "on the six-month release train before it gets away from us because we may be worried about the the hump of getting",
    "start": "2039510",
    "end": "2046290"
  },
  {
    "text": "from 9 over the hump of Java not don't sorry over the hump of Java 9 to 2 Java",
    "start": "2046290",
    "end": "2052169"
  },
  {
    "text": "10 but if we leave it much longer it's just going to get worse and worse that big difference between Java 8 and Java",
    "start": "2052169",
    "end": "2058500"
  },
  {
    "text": "17 is just going to be a very difficult bridge to to span a gap to bridge so I",
    "start": "2058500",
    "end": "2066830"
  },
  {
    "text": "think that it's worth trying to get onto 11 now so that then we can start thinking about testing against each of",
    "start": "2066830",
    "end": "2073770"
  },
  {
    "text": "these six monthly releases even if we stick on 11 and we don't plan to migrate to 12 13 14 we plan to migrate to 17 we",
    "start": "2073770",
    "end": "2082408"
  },
  {
    "text": "can be running each of these six monthly releases in CI to make sure that we stay up to date for as long as possible and",
    "start": "2082409",
    "end": "2089820"
  },
  {
    "start": "2089000",
    "end": "2131000"
  },
  {
    "text": "this is a quote that my old boss Dave Farley used to say to us quite a lot if it hurts dirt more often which sounds",
    "start": "2089820",
    "end": "2095790"
  },
  {
    "text": "kind of crazy but the fact is that if you do it more often it actually hurts less over the course",
    "start": "2095790",
    "end": "2101070"
  },
  {
    "text": "of time if you leave it like I said if you try and migrate to Java 17 it's going to be very painful",
    "start": "2101070",
    "end": "2107250"
  },
  {
    "text": "particularly since Oracle have said they are going to start deleting stuff deprecated means deprecated and there",
    "start": "2107250",
    "end": "2113040"
  },
  {
    "text": "might may only be a year's worth of notice between Dec something and actually removing it from",
    "start": "2113040",
    "end": "2118530"
  },
  {
    "text": "the language so we need to get onto this release train now and do it that more frequently now this quote doesn't",
    "start": "2118530",
    "end": "2125220"
  },
  {
    "text": "mention the word pain so let's quickly talk about the possibility of pain when you're migrating people are a little bit",
    "start": "2125220",
    "end": "2132210"
  },
  {
    "start": "2131000",
    "end": "2172000"
  },
  {
    "text": "worried about modularity and Java 9 because they hear that modules broke everything generally speaking it",
    "start": "2132210",
    "end": "2138930"
  },
  {
    "text": "shouldn't break everything and my experience is that actually when I try to migrate I've taken a couple of",
    "start": "2138930",
    "end": "2146190"
  },
  {
    "text": "examples of open source projects that were running on a tour actually lower and run it on 11 I've actually found",
    "start": "2146190",
    "end": "2153470"
  },
  {
    "text": "that it didn't break the way I expected it to so that was really interesting so I don't think modularity is necessarily",
    "start": "2153470",
    "end": "2160650"
  },
  {
    "text": "the problem that people think it is plus you don't have to use modules so there's all this pain with jigsaw but if you",
    "start": "2160650",
    "end": "2167160"
  },
  {
    "text": "don't use jigsaw then you probably won't in currently pain there will potentially",
    "start": "2167160",
    "end": "2173310"
  },
  {
    "start": "2172000",
    "end": "2229000"
  },
  {
    "text": "be some pain from missing classes or missing methods this is from a combination of different sources so modularity encapsulated internal api's",
    "start": "2173310",
    "end": "2180960"
  },
  {
    "text": "so stuff that we shouldn't have been using in the first place has now gone away it's now invisible to us so yes there are some things that",
    "start": "2180960",
    "end": "2187770"
  },
  {
    "text": "have gone away because they have been encapsulated in Java 11 some modules were deleted from the JDK so there's no",
    "start": "2187770",
    "end": "2194700"
  },
  {
    "text": "more Java EE stuff which means specifically Jax B that's what a lot of us were using as part of the JDK that's",
    "start": "2194700",
    "end": "2200880"
  },
  {
    "text": "now an external dependency core bar has gone away I hope you weren't using coober and Java effects has gone away as",
    "start": "2200880",
    "end": "2210330"
  },
  {
    "text": "well it but again these are all external dependencies now they're just not part of the JDK anymore the JDK is no longer",
    "start": "2210330",
    "end": "2216390"
  },
  {
    "text": "going to be this big fat bloated everything yes so I've got no time left",
    "start": "2216390",
    "end": "2224310"
  },
  {
    "text": "to go over some tips for migration it's just a really quick sell tips though firstly run your application on a new",
    "start": "2224310",
    "end": "2232710"
  },
  {
    "start": "2229000",
    "end": "2249000"
  },
  {
    "text": "JDK you might find it just works there are a few examples where I tried it out and it actually just worked I was really",
    "start": "2232710",
    "end": "2239940"
  },
  {
    "text": "surprised by this our inclination might be to go straight to trying to compile on a new JDK but you don't have to",
    "start": "2239940",
    "end": "2246390"
  },
  {
    "text": "compile you can just run it on the day if you do have compiler warnings in your",
    "start": "2246390",
    "end": "2252250"
  },
  {
    "start": "2249000",
    "end": "2278000"
  },
  {
    "text": "code do try and fix those compiler warnings before you migrate to a later version they're there for a reason",
    "start": "2252250",
    "end": "2258600"
  },
  {
    "text": "particularly deprecation warnings they are going to be taken much more seriously going forward so if you've got",
    "start": "2258600",
    "end": "2264430"
  },
  {
    "text": "things which say this is deprecated it might go away or if you've got warnings which says this feature will be removed",
    "start": "2264430",
    "end": "2271000"
  },
  {
    "text": "in Java 9 there are warnings like that then do address those before you start trying to to migrate yes they're there",
    "start": "2271000",
    "end": "2277960"
  },
  {
    "text": "for a reason update your dependencies this is kind of a quick win if you are using external de",
    "start": "2277960",
    "end": "2283450"
  },
  {
    "start": "2278000",
    "end": "2327000"
  },
  {
    "text": "Parys a quitclaim actually generally speaking you should keep your dependencies up-to-date anyway for security reasons because old versions",
    "start": "2283450",
    "end": "2290440"
  },
  {
    "text": "can potentially have all sorts of problems with them so you should keep your dependencies up to date anyway I understand that it can be difficult to",
    "start": "2290440",
    "end": "2297790"
  },
  {
    "text": "migrate to newer versions of spring or newer versions of big frameworks because there's a there's a cost with that but",
    "start": "2297790",
    "end": "2303730"
  },
  {
    "text": "you really do want to keep these as up-to-date as possible the later versions of a lot of the stuff we're using latest versions of mocking",
    "start": "2303730",
    "end": "2309820"
  },
  {
    "text": "frameworks testing frameworks spring etc and they all work just fine on Java 11",
    "start": "2309820",
    "end": "2315190"
  },
  {
    "text": "so if you update your dependencies you could find that all of your problems go away you may also need to add new",
    "start": "2315190",
    "end": "2321040"
  },
  {
    "text": "dependencies like Jax P and other dependencies that are now external to the JDK definitely definitely definitely",
    "start": "2321040",
    "end": "2328290"
  },
  {
    "text": "update your builds tool earlier versions of Gradle and maven will not work with",
    "start": "2328290",
    "end": "2333340"
  },
  {
    "text": "Java 9 onwards the latest versions work fine with Java 11 that I have seen in my limited experience so you do need to be",
    "start": "2333340",
    "end": "2341230"
  },
  {
    "text": "on the latest version of specifically maven and Gradle yes I have been using",
    "start": "2341230",
    "end": "2347260"
  },
  {
    "text": "them on Java 12 they did not error noticeably and then once you've done all",
    "start": "2347260",
    "end": "2352900"
  },
  {
    "start": "2351000",
    "end": "2373000"
  },
  {
    "text": "of those things then you can consider compiling against the JDK and maybe start using these shiny new features but",
    "start": "2352900",
    "end": "2358480"
  },
  {
    "text": "I found a lot of people were using latest versions for example Java 11 they're not using the new features but",
    "start": "2358480",
    "end": "2363610"
  },
  {
    "text": "they are at least compiling and running against it then you can start introducing the new features the same way we did with lambdas and streams who",
    "start": "2363610",
    "end": "2369640"
  },
  {
    "text": "started gradually using these features where it seemed applicable so quickly in",
    "start": "2369640",
    "end": "2374980"
  },
  {
    "start": "2373000",
    "end": "2388000"
  },
  {
    "text": "summary Java is changing and it's changing much faster than it used to it's no longer the",
    "start": "2374980",
    "end": "2382660"
  },
  {
    "text": "nice slow and stable enterprise type language that we're used to and modern",
    "start": "2382660",
    "end": "2388900"
  },
  {
    "start": "2388000",
    "end": "2402000"
  },
  {
    "text": "Java can help you this is a good thing so the recent versions of Java have focused on things like reducing",
    "start": "2388900",
    "end": "2394600"
  },
  {
    "text": "boilerplate increasing readability and but also of course things like performance is always improved with each",
    "start": "2394600",
    "end": "2400300"
  },
  {
    "text": "release of Java upgrade now and reduce any potential future pain and if",
    "start": "2400300",
    "end": "2405610"
  },
  {
    "start": "2402000",
    "end": "2421000"
  },
  {
    "text": "possible keep upgrading with a 6 monthly release cadence you don't have to put it into production but I would highly",
    "start": "2405610",
    "end": "2411970"
  },
  {
    "text": "recommend running the latest version of Java in your CI environment at least assuming that you have a CI environment",
    "start": "2411970",
    "end": "2417850"
  },
  {
    "text": "I really hope that you do ok great so and there's all the resources from this",
    "start": "2417850",
    "end": "2423610"
  },
  {
    "start": "2421000",
    "end": "2447000"
  },
  {
    "text": "talk I hear there's loads more links to all the stuff I talked about things about the new licensing things about the",
    "start": "2423610",
    "end": "2428740"
  },
  {
    "text": "support things about updates stuff about all the language features and there's a link to a bunch of stuff about actual",
    "start": "2428740",
    "end": "2435490"
  },
  {
    "text": "step by step migration guides for from Java 8 to 9 or Java 8 to 11 there's much",
    "start": "2435490",
    "end": "2440530"
  },
  {
    "text": "more depth at this URL here thank you very much [Applause]",
    "start": "2440530",
    "end": "2448849"
  }
]