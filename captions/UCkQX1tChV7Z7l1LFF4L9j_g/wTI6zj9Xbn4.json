[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "hi everyone thank you so much for coming so pleasure to be here back at Q Khan",
    "start": "4030",
    "end": "9280"
  },
  {
    "text": "spoken here for a while so we're sort of treats my favorite conference yeah so as",
    "start": "9280",
    "end": "15250"
  },
  {
    "text": "Nikki said my name's Ben and I work at the company called confluent so we're",
    "start": "15250",
    "end": "20589"
  },
  {
    "text": "one of the companies that sits behind Patrick Kafka I think I expect most of",
    "start": "20589",
    "end": "25599"
  },
  {
    "text": "you know Kafka if you're you know on the streaming track at Q Khan um and I yeah so you used to work on the",
    "start": "25599",
    "end": "33070"
  },
  {
    "text": "the technology itself or wrote the latest version of the replication protocol throttling a few other things",
    "start": "33070",
    "end": "39720"
  },
  {
    "text": "these days I work in the office of the CTO which is a slightly more general function and one of the things we did",
    "start": "39720",
    "end": "46510"
  },
  {
    "text": "last year where we actually looked very closely at the differences between stream processors and databases and they",
    "start": "46510",
    "end": "54340"
  },
  {
    "text": "said led to a new product we have a sequel DB but actually is it it's",
    "start": "54340",
    "end": "59890"
  },
  {
    "text": "actually pretty interesting I think to sort of compare and contrast the different models and both the way that",
    "start": "59890",
    "end": "66729"
  },
  {
    "text": "we interact the data that's moving and interacting with data that data that is a passive or resident and that's sort of",
    "start": "66729",
    "end": "74530"
  },
  {
    "text": "what we're going to talk about today but before we get to that I wanted to start",
    "start": "74530",
    "end": "80020"
  },
  {
    "start": "77000",
    "end": "453000"
  },
  {
    "text": "by taking a little bit of an aside and I",
    "start": "80020",
    "end": "85420"
  },
  {
    "text": "think this helps phrase why it's important in the future that we do get a degree of consolidation so there's a",
    "start": "85420",
    "end": "92170"
  },
  {
    "text": "very good post by a guy called Marc Andreessen this is he's actually an investor out in Silicon Valley and this",
    "start": "92170",
    "end": "99700"
  },
  {
    "text": "post basically says that software is going to end up eating the world so you know if you're an investor you probably",
    "start": "99700",
    "end": "106270"
  },
  {
    "text": "want to invest in software because over time we're going to consume more software like you guys will be buying",
    "start": "106270",
    "end": "111580"
  },
  {
    "text": "more applications on our foot on your phone companies buy more software that",
    "start": "111580",
    "end": "116590"
  },
  {
    "text": "makes their business more efficient that's like a general trend but actually",
    "start": "116590",
    "end": "121750"
  },
  {
    "text": "if you think about it there's a couple of different forms of this this is all a like weak form a basic idea that we as a",
    "start": "121750",
    "end": "128429"
  },
  {
    "text": "industry just consume more software there's actually this strong form and",
    "start": "128429",
    "end": "134440"
  },
  {
    "text": "the strong form is interesting because it's in this particular way of thinking about it our businesses become effectively",
    "start": "134440",
    "end": "142900"
  },
  {
    "text": "more automated so we're less it's less about just as buy more software",
    "start": "142900",
    "end": "148120"
  },
  {
    "text": "companies are consuming more software and more about actually taking our business processes and automating them",
    "start": "148120",
    "end": "154770"
  },
  {
    "text": "using software it's a bit abstract so what does that mean well think about something like a loan processing",
    "start": "154770",
    "end": "160960"
  },
  {
    "text": "application I said loans could be you could have",
    "start": "160960",
    "end": "166060"
  },
  {
    "text": "this could be a mortgage that you're taking out or some other kind of collateralized loan this this process",
    "start": "166060",
    "end": "172510"
  },
  {
    "text": "hasn't changed for 100 years pretty much the credit there's a credit officer",
    "start": "172510",
    "end": "179380"
  },
  {
    "text": "there's Rick simplistic officer there's a loan officer and each of them has their particular stage in this process",
    "start": "179380",
    "end": "184420"
  },
  {
    "text": "and we have some software that makes it more efficient the companies have when",
    "start": "184420",
    "end": "190600"
  },
  {
    "text": "it will write or purchase software which makes each part of this better so a bits of helping the credit officer do their",
    "start": "190600",
    "end": "198130"
  },
  {
    "text": "job better or helping the risk officer do their job better that's kind of the weak form of this analogy or buy more",
    "start": "198130",
    "end": "204040"
  },
  {
    "text": "software to help these people do a better job these days you can actually",
    "start": "204040",
    "end": "210640"
  },
  {
    "text": "get a loan application through in a few seconds it's like a traditional mortgage or take maybe a couple of weeks because",
    "start": "210640",
    "end": "216940"
  },
  {
    "text": "it follows that manual driven process but today in these more contemporary applications there's more to",
    "start": "216940",
    "end": "222940"
  },
  {
    "text": "contemporary companies you can automate the whole thing this is still using software but it's using software in a",
    "start": "222940",
    "end": "228460"
  },
  {
    "text": "different way it's using software which is effectively talking to other pieces of software so that you can automate the",
    "start": "228460",
    "end": "233530"
  },
  {
    "text": "process of getting a loan very quickly in a few seconds so if you think about",
    "start": "233530",
    "end": "240670"
  },
  {
    "text": "math what this actually means for the architecture of the systems that we build if you want to help a credit",
    "start": "240670",
    "end": "249280"
  },
  {
    "text": "officer to his job better as for where the three-tier architecture comes in we",
    "start": "249280",
    "end": "254530"
  },
  {
    "text": "have our user they've talked about user interface there's a some kind of back-end server application that's",
    "start": "254530",
    "end": "261160"
  },
  {
    "text": "running behind that and their database and you're helping the user let's say do",
    "start": "261160",
    "end": "266560"
  },
  {
    "text": "risk analysis or efficiently or whatever it might be but as companies become more automated",
    "start": "266560",
    "end": "273020"
  },
  {
    "text": "in those business processes become more automated we end up with services talking to one another this is like",
    "start": "273020",
    "end": "278060"
  },
  {
    "text": "software talking to software it's less focused on the idea of specifically helping a person and more focused on",
    "start": "278060",
    "end": "284890"
  },
  {
    "text": "achieving some end goals on business end go from different pieces of software",
    "start": "284890",
    "end": "291130"
  },
  {
    "text": "it's a good example of this is like a taxi like ride ride sharing applications",
    "start": "291130",
    "end": "298180"
  },
  {
    "text": "so in these you actually have streams of events right so your phones both phones in the on the customer side and on the",
    "start": "298180",
    "end": "306280"
  },
  {
    "text": "taxi driver side both have GPS information which is being streamed back to the server side applications you have",
    "start": "306280",
    "end": "313280"
  },
  {
    "text": "many different services running in the backend they're doing geospatial",
    "start": "313280",
    "end": "318410"
  },
  {
    "text": "matching to try and work out who which taxis they should send alerts to to ask",
    "start": "318410",
    "end": "323450"
  },
  {
    "text": "them if they won the ride offering the responses to work out whether or not to",
    "start": "323450",
    "end": "328610"
  },
  {
    "text": "work out which is the most efficient driver for a particular user etc",
    "start": "328610",
    "end": "333860"
  },
  {
    "text": "etcetera so you've got streams of events you've also got like business events the fact that we actually decided to accept",
    "start": "333860",
    "end": "340540"
  },
  {
    "text": "that particular ride so all of these different software all these different",
    "start": "340540",
    "end": "346760"
  },
  {
    "text": "pieces of software sitting at the back end allow you to automate this process this is very different to like phoning",
    "start": "346760",
    "end": "352280"
  },
  {
    "text": "up the taxi company and asking them whether or not you can have a cab arrive at your house at some time and this is",
    "start": "352280",
    "end": "360020"
  },
  {
    "text": "only possible by basically automating the whole process many species of software talking to many other pieces of",
    "start": "360020",
    "end": "366020"
  },
  {
    "text": "software and you see the same thing in the evolution of software architecture",
    "start": "366020",
    "end": "373240"
  },
  {
    "text": "so the the monolith to the distributed monolith to like micro services these",
    "start": "373240",
    "end": "379820"
  },
  {
    "text": "are all implementations that involve while certainly the second is that the",
    "start": "379820",
    "end": "385190"
  },
  {
    "text": "second two implementations that involve distributing or processing but it's mostly focused on users it's mostly",
    "start": "385190",
    "end": "391010"
  },
  {
    "text": "focused on the user interface actually the data that English lives in an in a",
    "start": "391010",
    "end": "396380"
  },
  {
    "text": "micro service architecture it's actually often joined together on the front end alright so the user the user",
    "start": "396380",
    "end": "402020"
  },
  {
    "text": "interfaces actually talking to a bunch of different services the front ends actually kind of doing that joint",
    "start": "402020",
    "end": "407030"
  },
  {
    "text": "because it's displaying different parts of the page to the user but what happens",
    "start": "407030",
    "end": "412400"
  },
  {
    "text": "when you want more direct data centric things well that's where you tend to get into event-driven micro-services these",
    "start": "412400",
    "end": "419330"
  },
  {
    "text": "are this is a pattern where you still have the user interface you still have servers application side program sorry",
    "start": "419330",
    "end": "427039"
  },
  {
    "text": "server side programs which responding to those but your journaling events which then allow you to decouple an",
    "start": "427039",
    "end": "432860"
  },
  {
    "text": "architecture and process do a lot of the mechanics which makes the business work",
    "start": "432860",
    "end": "440030"
  },
  {
    "text": "asynchronously so you've got that kind of user centric side and then what we",
    "start": "440030",
    "end": "446120"
  },
  {
    "text": "will call what I call this Software Center excited we're actually automating the business and we're growing an",
    "start": "446120",
    "end": "451520"
  },
  {
    "text": "architecture so why am I telling you all this well this trend kind of leads to",
    "start": "451520",
    "end": "460550"
  },
  {
    "start": "453000",
    "end": "589000"
  },
  {
    "text": "this idea that the user of some of the software in the future is likely to be more and more not just you and me not",
    "start": "460550",
    "end": "468259"
  },
  {
    "text": "just users of an application but actually software which is talking to",
    "start": "468259",
    "end": "473360"
  },
  {
    "text": "other pieces of software so what does that mean for databases well just think",
    "start": "473360",
    "end": "480110"
  },
  {
    "text": "for a moment and maybe close your eyes actually you don't need to close your eyes but you can maybe figuratively",
    "start": "480110",
    "end": "486229"
  },
  {
    "text": "close your eyes and think about what a database is you've all used databases you many of you I'm sure use them every",
    "start": "486229",
    "end": "492949"
  },
  {
    "text": "day and certainly you would have all of use them at some point so what does it feel like to use the database you write",
    "start": "492949",
    "end": "500779"
  },
  {
    "text": "a query and there's some server off in their distance somewhere and it's got",
    "start": "500779",
    "end": "506389"
  },
  {
    "text": "lots of data on it and you can write this query which allows you to ask I'll answer a question and there's like no",
    "start": "506389",
    "end": "512630"
  },
  {
    "text": "way you'd ever answer that Bureau answer that question yourself because there's like too much data and your mind can't pass through it so you can send this",
    "start": "512630",
    "end": "518209"
  },
  {
    "text": "question off and you can get an answer it's wonderful it's really powerful idea",
    "start": "518209",
    "end": "525760"
  },
  {
    "text": "that's any that's why I think of when I think of a database I haven't spent many years building on and working with",
    "start": "525760",
    "end": "531529"
  },
  {
    "text": "databases and we have to have hundreds of these things today you know what kind of feel",
    "start": "531529",
    "end": "537430"
  },
  {
    "text": "the same right so we have lots of different variants something like Cassandra will let you store a very",
    "start": "537430",
    "end": "543970"
  },
  {
    "text": "large amount data for the amount of memory that it's using something like elasticsearch provides you with a very nice rich interactive query model neo4j",
    "start": "543970",
    "end": "552490"
  },
  {
    "text": "oh let you do something like a query the relationship between entities not just the entities themselves things like",
    "start": "552490",
    "end": "559300"
  },
  {
    "text": "Oracle and Postgres are kind of workhorse databases that can kind of morph to different types of use case so",
    "start": "559300",
    "end": "565510"
  },
  {
    "text": "hundreds of these different things and they all have slightly different variants or make them more appropriate",
    "start": "565510",
    "end": "571060"
  },
  {
    "text": "to a certain type of use case but they all have a couple of fundamental",
    "start": "571060",
    "end": "576910"
  },
  {
    "text": "assumptions from one one of the main ones is that the data is passive stages",
    "start": "576910",
    "end": "584530"
  },
  {
    "text": "just sat there on the database waiting for you to do something so the database",
    "start": "584530",
    "end": "591900"
  },
  {
    "start": "589000",
    "end": "758000"
  },
  {
    "text": "has a piece of software it's actually designed to help you it's actually cast",
    "start": "591900",
    "end": "597270"
  },
  {
    "text": "as a technology because it grew up in a time when we built applications that",
    "start": "597270",
    "end": "602470"
  },
  {
    "text": "were designed to help users whether it's you or me or a credit officer or a risk officer or whatever it might be so if",
    "start": "602470",
    "end": "612370"
  },
  {
    "text": "there's not a user interface wasting if there's not somebody sitting there clicking buttons and expecting things to",
    "start": "612370",
    "end": "618520"
  },
  {
    "text": "happen you've got to ask the question well does it have to be synchronous and",
    "start": "618520",
    "end": "624190"
  },
  {
    "text": "one alternative is to use event streams it's just like a different way of doing",
    "start": "624190",
    "end": "629740"
  },
  {
    "text": "it and stream processes are a technology",
    "start": "629740",
    "end": "635590"
  },
  {
    "text": "which allow us to manipulate event streams in a very similar way to the way that databases manipulate data that's",
    "start": "635590",
    "end": "643300"
  },
  {
    "text": "held in files but they're built importantly for active data and they're",
    "start": "643300",
    "end": "650230"
  },
  {
    "text": "built for a synchronicity so let's just classify what that means if you think",
    "start": "650230",
    "end": "656890"
  },
  {
    "text": "about a stream processor actually has a very different model of interaction anybody here use",
    "start": "656890",
    "end": "663690"
  },
  {
    "text": "something like case equal few of you okay keep your hand up if it felt like",
    "start": "663690",
    "end": "669270"
  },
  {
    "text": "using a database oh we've got one so I actually think it feels quite different",
    "start": "669270",
    "end": "675330"
  },
  {
    "text": "you can sort of make it feel this is the case equal DV this like newer one does feel like one but a sequel feels not so",
    "start": "675330",
    "end": "683370"
  },
  {
    "text": "much like one and it's because of this interaction model this very familiar interaction model that we get with the",
    "start": "683370",
    "end": "688740"
  },
  {
    "text": "database we don't really quite get that with a stream processor because a stream process not the best food processor",
    "start": "688740",
    "end": "694680"
  },
  {
    "text": "isn't really designed for us so a traditional database the query is active",
    "start": "694680",
    "end": "702510"
  },
  {
    "text": "and the data is passive so what does that mean that means that this is about",
    "start": "702510",
    "end": "709170"
  },
  {
    "text": "what initiates the action what makes things happen in a database you make things happen by running a query the",
    "start": "709170",
    "end": "716580"
  },
  {
    "text": "data's just sitting there passively waiting for you to run that query if you're off making a cup of tea the",
    "start": "716580",
    "end": "723120"
  },
  {
    "text": "database doesn't do anything it's just doing nothing you have to actually initiate that action in a stream",
    "start": "723120",
    "end": "729360"
  },
  {
    "text": "processor an event stream processing it's the other way around the query is passive the query sits there it doesn't",
    "start": "729360",
    "end": "737610"
  },
  {
    "text": "change because it runs forever just sits there on the server running and the thing that",
    "start": "737610",
    "end": "743280"
  },
  {
    "text": "makes it do something isn't somebody running a query it's data it's some",
    "start": "743280",
    "end": "748470"
  },
  {
    "text": "event happening in the world something being emitted by some other system or whatever it might be so this is a very",
    "start": "748470",
    "end": "756240"
  },
  {
    "text": "very different interaction model so with that in mind I want to dig a little bit",
    "start": "756240",
    "end": "761790"
  },
  {
    "start": "758000",
    "end": "998000"
  },
  {
    "text": "more deeply into some of this or fundamental structures that we have in",
    "start": "761790",
    "end": "767220"
  },
  {
    "text": "stream processes and compare how those relates specifically to databases and",
    "start": "767220",
    "end": "773220"
  },
  {
    "text": "probably the most fundamental one is this concept of streams and tables because they think streams kind of",
    "start": "773220",
    "end": "779550"
  },
  {
    "text": "define in many ways what a stream processing processor does or an event streaming system does so stream",
    "start": "779550",
    "end": "787290"
  },
  {
    "text": "processors work on events this sounds like a very simple idea in fact it is a pretty simple idea we can record what",
    "start": "787290",
    "end": "793200"
  },
  {
    "text": "happens in the world based on a number of events this could be you know somebody placing an order maybe they're",
    "start": "793200",
    "end": "799050"
  },
  {
    "text": "buying a pair of trousers it could be yeah you paying for the pair of trousers it could be changing your customer",
    "start": "799050",
    "end": "804900"
  },
  {
    "text": "details it could actually be the position of your phone so there are another kind of continuous event streams",
    "start": "804900",
    "end": "811160"
  },
  {
    "text": "can actually a whole bunch of different things it's ever a record of a fact something that happened but actually",
    "start": "811160",
    "end": "818010"
  },
  {
    "text": "events as a data model are slightly different and because they include this",
    "start": "818010",
    "end": "824610"
  },
  {
    "text": "notion of intent I tell you about a state change not just the state so to",
    "start": "824610",
    "end": "832110"
  },
  {
    "text": "take the kind of canonical LinkedIn example you know if Bob works at Google that's the state that's a state of Bob",
    "start": "832110",
    "end": "839959"
  },
  {
    "text": "at some point in time the event would be that Bob is moved from Google Amazon and",
    "start": "839959",
    "end": "846950"
  },
  {
    "text": "the reason that that's subtly different is that typically when we drive processing we drive our applications we",
    "start": "846950",
    "end": "854760"
  },
  {
    "text": "don't just want the state we also want to be triggered of these state changes of this intent so stream processors are",
    "start": "854760",
    "end": "861390"
  },
  {
    "text": "always forwarding this these events this intent is facts that something happens",
    "start": "861390",
    "end": "867390"
  },
  {
    "text": "so that you can react to them so a stream is an exact recording of exactly",
    "start": "867390",
    "end": "875850"
  },
  {
    "text": "what happened published know me on a topic and a table",
    "start": "875850",
    "end": "880980"
  },
  {
    "text": "represents the current state and this is actually important so because we're going to come back to it this is this",
    "start": "880980",
    "end": "887520"
  },
  {
    "text": "idea of recording absolutely every single thing that happened I've recorded in a stream and if any of you have used",
    "start": "887520",
    "end": "895770"
  },
  {
    "text": "like event sourcing it's a very very similar concept this idea that we're keeping this journal over every single",
    "start": "895770",
    "end": "901440"
  },
  {
    "text": "state change if we want to record we want to derive our current state we can do that by replaying the stream so the",
    "start": "901440",
    "end": "908550"
  },
  {
    "text": "stream tells us like where we've been versus where we are now or payments that you've made versus your account balance",
    "start": "908550",
    "end": "914640"
  },
  {
    "text": "or a way that I really like to think about it is thinking it's use chess it's like a good analogy it's like a",
    "start": "914640",
    "end": "922040"
  },
  {
    "text": "I can think of a table like a database table as being the position of each",
    "start": "922040",
    "end": "927380"
  },
  {
    "text": "piece right so I can take the position of each of those pieces and that tells me my current state I could store that",
    "start": "927380",
    "end": "933259"
  },
  {
    "text": "somewhere and recover it recreate it for want a stream works the other way around",
    "start": "933259",
    "end": "938269"
  },
  {
    "text": "it takes a sequence of events from the starting position at the start of chess and then we can reply all of the moves",
    "start": "938269",
    "end": "946509"
  },
  {
    "text": "the events the state changes so get us",
    "start": "946509",
    "end": "951920"
  },
  {
    "text": "into the same position so streams don't just tell us about the position of the",
    "start": "951920",
    "end": "957319"
  },
  {
    "text": "board at a point in time you also tell us about the game they tell us about how we got that so what's this got to do",
    "start": "957319",
    "end": "964819"
  },
  {
    "text": "with databases well we can actually think of a test of a stream as a type of table actually no real reason to call it",
    "start": "964819",
    "end": "971449"
  },
  {
    "text": "a stream or get to that bit later but a stream could definitely be thought of as a type of table it's a particular type",
    "start": "971449",
    "end": "978350"
  },
  {
    "text": "of table that doesn't exist in most databases it's immutable you can't change it and it's append only so in a",
    "start": "978350",
    "end": "987319"
  },
  {
    "text": "table I can have insert update and delete that's mutable it has a promotion of a",
    "start": "987319",
    "end": "993470"
  },
  {
    "text": "primary key which is also important so a",
    "start": "993470",
    "end": "1001089"
  },
  {
    "start": "998000",
    "end": "1480000"
  },
  {
    "text": "stream can be considered as an immutable append-only table if I write a value",
    "start": "1001089",
    "end": "1008050"
  },
  {
    "text": "it's it automatically gonna be recorded forever I can't go back and change that",
    "start": "1008050",
    "end": "1016470"
  },
  {
    "text": "the reason I can't change it is because it might have been consumed by somebody else if I want to change it I have to",
    "start": "1016470",
    "end": "1022630"
  },
  {
    "text": "make another record right right another message which is actually then going to propagate that change",
    "start": "1022630",
    "end": "1028058"
  },
  {
    "text": "that's why immutability so importantly looks it allows us to recreate the state through a sequence of facts so can",
    "start": "1028059",
    "end": "1037449"
  },
  {
    "text": "stream processors communicate through streams input streams go to output streams",
    "start": "1037449",
    "end": "1044610"
  },
  {
    "text": "but internally a stream processor even though that model is stream to stream",
    "start": "1047340",
    "end": "1053300"
  },
  {
    "text": "internally that using tables this is actually a bit like the way in a database a database when it runs a query",
    "start": "1053300",
    "end": "1059760"
  },
  {
    "text": "I actually use these temporary tables to hold intermediary results as it's doing",
    "start": "1059760",
    "end": "1064800"
  },
  {
    "text": "its computation you can't see them temporary in a stream processor they're not temporary because streaming query",
    "start": "1064800",
    "end": "1071400"
  },
  {
    "text": "runs forever it doesn't like run differently for each user or for each request it's just like",
    "start": "1071400",
    "end": "1078420"
  },
  {
    "text": "one query that's running come currently but it does contain this notion of tables so in this case I have like",
    "start": "1078420",
    "end": "1083580"
  },
  {
    "text": "payments coming in on the left-hand side as a payment stream then I'm running some credit scoring function so that's",
    "start": "1083580",
    "end": "1091920"
  },
  {
    "text": "gonna basically collapse the stream of payments which we can think of as a bit of a table of payments and aggregate it",
    "start": "1091920",
    "end": "1100170"
  },
  {
    "text": "by user so that each user has a credit score so my table is actually smaller",
    "start": "1100170",
    "end": "1106350"
  },
  {
    "text": "than what input stream and the stream processor then listens to that table and",
    "start": "1106350",
    "end": "1111450"
  },
  {
    "text": "provides the output as another stream so when we use the stream processor we",
    "start": "1111450",
    "end": "1116580"
  },
  {
    "text": "create tables we just don't really show them to anybody because what we're trying to do is read streams of data and",
    "start": "1116580",
    "end": "1123440"
  },
  {
    "text": "output streams of data so this leads to this duality this kind of stream table",
    "start": "1123440",
    "end": "1131790"
  },
  {
    "text": "duality where the stream represents history every single state changes",
    "start": "1131790",
    "end": "1139560"
  },
  {
    "text": "happened I can apply a projection it could be something as simple as a group like E which is basically involves just",
    "start": "1139560",
    "end": "1146850"
  },
  {
    "text": "creating a table that has the latest version for each key which is most what most people think of as a table when",
    "start": "1146850",
    "end": "1153480"
  },
  {
    "text": "they when they use a database and then likewise you can listen to a table listen to all of the things that change",
    "start": "1153480",
    "end": "1160560"
  },
  {
    "text": "inside it and create another stream that stream won't be the same as the one that you started with if your table is using",
    "start": "1160560",
    "end": "1167370"
  },
  {
    "text": "an aggregation because you sort of lost data but you can maintain both of these so you have this kind of duality streams",
    "start": "1167370",
    "end": "1175440"
  },
  {
    "text": "can go to tables tables can go back to streams it's actually very similar to the notion",
    "start": "1175440",
    "end": "1182419"
  },
  {
    "text": "of a materialized view when materialized view is a construct which is available",
    "start": "1182419",
    "end": "1188630"
  },
  {
    "text": "in many databases notably relational ones and it came from this this idea of an active database which was popular in",
    "start": "1188630",
    "end": "1195139"
  },
  {
    "text": "the 1990s it's a couple of big differences sorry stream processor we",
    "start": "1195139",
    "end": "1201769"
  },
  {
    "text": "have a stream or input as a stream we have our aggregating function or logic",
    "start": "1201769",
    "end": "1207440"
  },
  {
    "text": "or whatever it might be which is going to create my table and then that outputs as a stream or means to another",
    "start": "1207440",
    "end": "1213769"
  },
  {
    "text": "application so another application can react to that so that's asynchronous and",
    "start": "1213769",
    "end": "1219350"
  },
  {
    "text": "the query is basically a push query it's running all the time and it's creating new results in the active database the",
    "start": "1219350",
    "end": "1227539"
  },
  {
    "text": "input is a table so we have a table and but these two things could be that could be similar we can create an append-only",
    "start": "1227539",
    "end": "1233389"
  },
  {
    "text": "table in a database and then we have a function that runs creates our credit",
    "start": "1233389",
    "end": "1238759"
  },
  {
    "text": "score and then if we want to interact with that well we have to send the query and get a result right because it's a",
    "start": "1238759",
    "end": "1245629"
  },
  {
    "text": "database so in this case there's two big differences the whole process inside of",
    "start": "1245629",
    "end": "1252409"
  },
  {
    "text": "creating a materialized view is synchronous so it locks inside the database often inside a transaction and",
    "start": "1252409",
    "end": "1259059"
  },
  {
    "text": "the interaction model is a poor query this represents very similar concept",
    "start": "1259059",
    "end": "1267279"
  },
  {
    "text": "it's just that the way that we interact with it and the way that data moves around is different big similarity",
    "start": "1267279",
    "end": "1274639"
  },
  {
    "text": "between materialized views and stream processes okay so let's look at joins",
    "start": "1274639",
    "end": "1281470"
  },
  {
    "text": "joins are another way that these things are sort of similar and sort of",
    "start": "1281470",
    "end": "1286610"
  },
  {
    "text": "different stream processors and do joints databases mostly can do joins or",
    "start": "1286610",
    "end": "1292820"
  },
  {
    "text": "many of them can do joins so where are these things exactly the same or are they slightly different well the most",
    "start": "1292820",
    "end": "1300320"
  },
  {
    "text": "part they're quite similar but let's look at how a join works in a stream processor so let's just do it there are",
    "start": "1300320",
    "end": "1305809"
  },
  {
    "text": "a few different types of join but we're going to start with a join to a table and this is a very simple idea we have a stream of orders coming in here and a",
    "start": "1305809",
    "end": "1313250"
  },
  {
    "text": "stream of customers which is going to be materialized inside this table and we're going to enrich each order with some",
    "start": "1313250",
    "end": "1318770"
  },
  {
    "text": "customer information and that's our stream processor basically the the",
    "start": "1318770",
    "end": "1323779"
  },
  {
    "text": "orders come in we do a lookup in the table based on this primary key right so",
    "start": "1323779",
    "end": "1329029"
  },
  {
    "text": "with this this table is actually an event stream behind it and it's gotta it's effectively doing a group by key to",
    "start": "1329029",
    "end": "1334789"
  },
  {
    "text": "materialize the table and then what we get out is an order join to its customer information that's pretty simple right",
    "start": "1334789",
    "end": "1342549"
  },
  {
    "text": "it's actually almost exactly what a database does so a database reads data",
    "start": "1342549",
    "end": "1348529"
  },
  {
    "text": "from a file read the orders from the orders table don't have an index maybe",
    "start": "1348529",
    "end": "1353809"
  },
  {
    "text": "on customer information or maybe a primary key on that table and it will just look at the values inside a query",
    "start": "1353809",
    "end": "1359360"
  },
  {
    "text": "so very very similar the way these two things work big difference a database has is a database knows about the data",
    "start": "1359360",
    "end": "1366169"
  },
  {
    "text": "that it's got I can maintain my statistics and stuff that tell you about the cardinality of that data and that",
    "start": "1366169",
    "end": "1372649"
  },
  {
    "text": "helps you decide whether or not to use indexes and stuff like this in a stream processor if typically you don't know",
    "start": "1372649",
    "end": "1378049"
  },
  {
    "text": "what's gonna arrive next because it's like real time data so you can't really make those optimizations what about",
    "start": "1378049",
    "end": "1385700"
  },
  {
    "text": "joining two streams that's a bit different so think about a stream is a",
    "start": "1385700",
    "end": "1393409"
  },
  {
    "text": "you know less about it that table we can kind of index it we can look it up by Pro we can give it a primary key with a",
    "start": "1393409",
    "end": "1400279"
  },
  {
    "text": "stream that's not quite the case so the way this works is in this case we've got Bob's order Bob and Jill have orders and",
    "start": "1400279",
    "end": "1408230"
  },
  {
    "text": "we have payments and we're joining orders to payments so maybe like you know Bob bought some trousers and then",
    "start": "1408230",
    "end": "1413809"
  },
  {
    "text": "you made a payment and we want to kind of callate callate them together and because their system is asynchronous these things could be reordered and they",
    "start": "1413809",
    "end": "1421789"
  },
  {
    "text": "could have a superior didn't turn up late so actually Bob's order is behind",
    "start": "1421789",
    "end": "1427809"
  },
  {
    "text": "Bob's payment with respect to Jill so as these events move into the stream",
    "start": "1427809",
    "end": "1433039"
  },
  {
    "text": "processor what happens is Bob's payment comes in and it gets buffered inside our little index",
    "start": "1433039",
    "end": "1439710"
  },
  {
    "text": "Gill's order goes into the buffer also and Jill's payment comes in and we can",
    "start": "1439710",
    "end": "1446170"
  },
  {
    "text": "do a match each time there's a process you it's looking for the corresponding side a corresponding event on the other",
    "start": "1446170",
    "end": "1451750"
  },
  {
    "text": "side it's also actually checking the event time it's using event time to process that but we'll come back to the end a bit and then Jill's ordem Jill's",
    "start": "1451750",
    "end": "1460120"
  },
  {
    "text": "payment come up without us a joined unit so only when both of these things were available do we actually get an output",
    "start": "1460120",
    "end": "1465670"
  },
  {
    "text": "it doesn't matter which one came first or came last more importantly only",
    "start": "1465670",
    "end": "1470770"
  },
  {
    "text": "that's that's the point that will actually get the output and then likewise Bob's order comes in as matched and they",
    "start": "1470770",
    "end": "1477250"
  },
  {
    "text": "sent out so the reason this is a little",
    "start": "1477250",
    "end": "1484570"
  },
  {
    "text": "bit different to a database is that this is actually using like a well as a couple of things actually one is that",
    "start": "1484570",
    "end": "1490030"
  },
  {
    "text": "we're only buffering so much data which means you can handle these very high throughput use cases where you don't want to maintain the whole dataset",
    "start": "1490030",
    "end": "1496510"
  },
  {
    "text": "inside a table and index here and look it up on the fly the other one is that",
    "start": "1496510",
    "end": "1501610"
  },
  {
    "text": "often these streams remember the streams are history they're like a history table here hold all of the different versions",
    "start": "1501610",
    "end": "1507910"
  },
  {
    "text": "of a particular event so if Bob bought bought a pair of trousers and then he decided to change his order you actually",
    "start": "1507910",
    "end": "1514570"
  },
  {
    "text": "have like a a set of different order a different set of different orders for",
    "start": "1514570",
    "end": "1519840"
  },
  {
    "text": "versions of an order for the same thing so in this case maybe like a change from boots - boots - so we've actually got",
    "start": "1519840",
    "end": "1527950"
  },
  {
    "text": "multiple different values multiple different state changes from the same entity inside this stream so we just",
    "start": "1527950",
    "end": "1535900"
  },
  {
    "text": "treat it as a table while we get like this Cartesian product I'll be like pretty inefficient you get like loads of",
    "start": "1535900",
    "end": "1541900"
  },
  {
    "text": "data come here all the time so stream processors handle this but I allowing",
    "start": "1541900",
    "end": "1548500"
  },
  {
    "start": "1544000",
    "end": "1577000"
  },
  {
    "text": "you to correlate things in time I says where Windows come from so we can use like a time window to basically restrict",
    "start": "1548500",
    "end": "1555880"
  },
  {
    "text": "how we're going to join a data set so if we want to correlate these two things in time but also by their identifier we can",
    "start": "1555880",
    "end": "1563320"
  },
  {
    "text": "use Windows to do that it's very hard to do that inside the database so we have",
    "start": "1563320",
    "end": "1569590"
  },
  {
    "text": "this idea of including processor the ability to correlate recent events in time so that you cannot",
    "start": "1569590",
    "end": "1577279"
  },
  {
    "start": "1577000",
    "end": "1613000"
  },
  {
    "text": "really do in a database and you can actually do a lot more advanced versions of these so a session window is another",
    "start": "1577279",
    "end": "1582829"
  },
  {
    "text": "interesting thing also quite hard to do in a database so a session is like you decide you know you're like looking for",
    "start": "1582829",
    "end": "1589519"
  },
  {
    "text": "trousers on your website and then maybe you buy some and then you go away so you",
    "start": "1589519",
    "end": "1595279"
  },
  {
    "text": "want to just detect some period of activity that there and then that then",
    "start": "1595279",
    "end": "1600529"
  },
  {
    "text": "ends so a session window allow you to do that it has like a no defined length it",
    "start": "1600529",
    "end": "1606679"
  },
  {
    "text": "just goes on for as long as for some period of time and then when there's a period of inactivity it's dynamically",
    "start": "1606679",
    "end": "1612469"
  },
  {
    "text": "ended the other thing is a late in out of order data because things obviously",
    "start": "1612469",
    "end": "1618349"
  },
  {
    "text": "change one of the things in we talked about in stream processing is the idea it's hard to work out where at the end",
    "start": "1618349",
    "end": "1624589"
  },
  {
    "text": "of something is when does something end when does a day end when does a computation end so in the stream",
    "start": "1624589",
    "end": "1632449"
  },
  {
    "text": "processor you can actually use window functions to create outputs which you send out and then you're actually using",
    "start": "1632449",
    "end": "1638959"
  },
  {
    "text": "time to correlate when something comes in where which window it should go into",
    "start": "1638959",
    "end": "1644359"
  },
  {
    "text": "you have this notion of history you can update previous windows and this hand lets you handle late and out of order",
    "start": "1644359",
    "end": "1650989"
  },
  {
    "start": "1650000",
    "end": "1701000"
  },
  {
    "text": "data so stream processors provide a bunch of tools that let us handle a synchronicity and allow us to leverage",
    "start": "1650989",
    "end": "1658399"
  },
  {
    "text": "time it's like time in a any distributed system is kind of hard to work out or",
    "start": "1658399",
    "end": "1663559"
  },
  {
    "text": "hard to reason about but time in this concept you're getting a stream processing you can have system time",
    "start": "1663559",
    "end": "1669529"
  },
  {
    "text": "effectively stream time or you can have event time which is a time that the event was actually created by the client",
    "start": "1669529",
    "end": "1675919"
  },
  {
    "text": "and you can configure the system to use either one and then to then let use",
    "start": "1675919",
    "end": "1681499"
  },
  {
    "text": "leverage time and then they also let you focus on the now stream processors or design for this processing which is",
    "start": "1681499",
    "end": "1686959"
  },
  {
    "text": "about real-time events so they're kind",
    "start": "1686959",
    "end": "1692329"
  },
  {
    "text": "of similar there's similarities there between the way that joins work but they're also some differences well right",
    "start": "1692329",
    "end": "1699589"
  },
  {
    "text": "data placement it's extreme processors use a two-tier",
    "start": "1699589",
    "end": "1705830"
  },
  {
    "start": "1701000",
    "end": "1776000"
  },
  {
    "text": "storage model most of them though are the different different ones he's",
    "start": "1705830",
    "end": "1710999"
  },
  {
    "text": "actually slightly different approaches but they're all quite similar so storage",
    "start": "1710999",
    "end": "1716159"
  },
  {
    "text": "is normally in a streaming system something like Kafka flink actually uses something like Kafka as well there's",
    "start": "1716159",
    "end": "1722190"
  },
  {
    "text": "maybe HDFS for snapshotting but effectively we can think of it as just being some distributed storage level",
    "start": "1722190",
    "end": "1728369"
  },
  {
    "text": "layer and then streams are processed as they arrive because the storage layer is",
    "start": "1728369",
    "end": "1733559"
  },
  {
    "text": "not just like a file system or the calf grassy architectural II looks a lot like a distributed file system what's",
    "start": "1733559",
    "end": "1739320"
  },
  {
    "text": "actually happening is the opposite it's pushing beta towards you conceptually it's pushing data towards you so you can react to streams in real",
    "start": "1739320",
    "end": "1747359"
  },
  {
    "text": "time but if you want to create table tables you need to materialize those and this is actually done inside the stream",
    "start": "1747359",
    "end": "1753629"
  },
  {
    "text": "processor so a table if you have a table of customers that will actually be materialized inside this room processor itself this is actually very similar to",
    "start": "1753629",
    "end": "1761729"
  },
  {
    "text": "the way that databases work so you look at something like a snowflake our snowflake has a back end it's a",
    "start": "1761729",
    "end": "1768089"
  },
  {
    "text": "analytics engine and it materializes tables locally so that it can do efficient elastic elastic processing",
    "start": "1768089",
    "end": "1777259"
  },
  {
    "start": "1776000",
    "end": "1851000"
  },
  {
    "text": "data is also partitioned it's actually partitioned in two different levels so",
    "start": "1777259",
    "end": "1783599"
  },
  {
    "text": "you're partitioning on the storage level Africa stores data in a bunch of",
    "start": "1783599",
    "end": "1788669"
  },
  {
    "text": "different partitions on a bunch of different machines so if I have some data set of orders it's actually going",
    "start": "1788669",
    "end": "1793769"
  },
  {
    "text": "to be spread across all of these machines likewise in the processing layer",
    "start": "1793769",
    "end": "1798989"
  },
  {
    "text": "I'm also we're also going to spread the data across multiple different machines in different partitions or shards and",
    "start": "1798989",
    "end": "1806729"
  },
  {
    "text": "that allows us to process things in parallel a big problem with doing this",
    "start": "1806729",
    "end": "1812729"
  },
  {
    "text": "though is one of the problems is that if you want to join things they have to be partitioned in the same way so if you",
    "start": "1812729",
    "end": "1819719"
  },
  {
    "text": "want to join orders to payments you have to make sure they both share a key so",
    "start": "1819719",
    "end": "1825149"
  },
  {
    "text": "that the order and the payment a correspond or the payment that corresponds to the same order ends up on",
    "start": "1825149",
    "end": "1830339"
  },
  {
    "text": "the right machine you do this by applying a key and if you don't have the right key or your previous bit of processing",
    "start": "1830339",
    "end": "1837660"
  },
  {
    "text": "didn't use the right key you have to do a shuffle redistribute data which is",
    "start": "1837660",
    "end": "1843000"
  },
  {
    "text": "relatively costly but that's this is again this is the same way it's the same",
    "start": "1843000",
    "end": "1848220"
  },
  {
    "text": "process that distributed databases use another thing distributed databases use",
    "start": "1848220",
    "end": "1854190"
  },
  {
    "start": "1851000",
    "end": "1912000"
  },
  {
    "text": "is broadcast both you have to broadcast datasets so all nodes and that's",
    "start": "1854190",
    "end": "1861240"
  },
  {
    "text": "actually to avoid this problem of shuffling so in a partitioned data model we have to kind of reshuffle if you want",
    "start": "1861240",
    "end": "1867299"
  },
  {
    "text": "to join from a key that wasn't the key",
    "start": "1867299",
    "end": "1872940"
  },
  {
    "text": "that was used in the previous operation so you can broadcaster join using in",
    "start": "1872940",
    "end": "1878130"
  },
  {
    "text": "there are different ways to do this we can capitis streams in case equal there's a thing called a global table",
    "start": "1878130",
    "end": "1883470"
  },
  {
    "text": "and this creates a copy of the data set so let's say I want to join orders to",
    "start": "1883470",
    "end": "1888870"
  },
  {
    "text": "customers orders is a big fax data set customers is relatively small by comparison also typically we would",
    "start": "1888870",
    "end": "1894840"
  },
  {
    "text": "change not that frequently we actually broadcast that to all of the nodes so I have partitioned data of my orders and",
    "start": "1894840",
    "end": "1902120"
  },
  {
    "text": "replicated data it's the same copy on every single processing node so that I",
    "start": "1902120",
    "end": "1907140"
  },
  {
    "text": "don't have to do the shuffling I can I can do more joins efficiently",
    "start": "1907140",
    "end": "1912770"
  },
  {
    "text": "architectual e there are actually many parallels with data warehousing this",
    "start": "1913610",
    "end": "1920160"
  },
  {
    "text": "idea of facts or events and facts are quite similar right they're often pretty",
    "start": "1920160",
    "end": "1925260"
  },
  {
    "text": "much the same thing a record of everything single thing that happened and dimensions are these things that you",
    "start": "1925260",
    "end": "1933059"
  },
  {
    "text": "want to look up customer information account information those kind of things they're relatively small and actually a",
    "start": "1933059",
    "end": "1939030"
  },
  {
    "text": "lot of the technology that baptists the patterns have been a process a query and",
    "start": "1939030",
    "end": "1945230"
  },
  {
    "text": "distribute data to different nodes in different ways are actually the same",
    "start": "1945230",
    "end": "1950280"
  },
  {
    "text": "across both really similar prospects so",
    "start": "1950280",
    "end": "1957000"
  },
  {
    "start": "1954000",
    "end": "1999000"
  },
  {
    "text": "finally we can I get to idea of the interaction model",
    "start": "1957000",
    "end": "1962150"
  },
  {
    "text": "we've talked about this before a little bit a stream processor continuously",
    "start": "1963260",
    "end": "1969330"
  },
  {
    "text": "processes input output using event streams and that's the way that you",
    "start": "1969330",
    "end": "1975090"
  },
  {
    "text": "interact with it it's very different to the way that you interact with the database squareit the query runs",
    "start": "1975090",
    "end": "1980910"
  },
  {
    "text": "continuously and outputs results as soon",
    "start": "1980910",
    "end": "1986220"
  },
  {
    "text": "as they happen and we saw this line before with the traditional database the",
    "start": "1986220",
    "end": "1992730"
  },
  {
    "text": "queries active the data is passive an event streaming the data is active and",
    "start": "1992730",
    "end": "1998100"
  },
  {
    "text": "the queries passive so our databases have this notion of a pool query this is",
    "start": "1998100",
    "end": "2004160"
  },
  {
    "start": "1999000",
    "end": "2022000"
  },
  {
    "text": "what we call a pool query what's buried been to credit score now we'll a asked",
    "start": "2004160",
    "end": "2009410"
  },
  {
    "text": "question when I get the result back in a stream processor there's truth they're",
    "start": "2009410",
    "end": "2016100"
  },
  {
    "text": "processes running all the time and every single time that table changes internally we're publishing as a result",
    "start": "2016100",
    "end": "2023200"
  },
  {
    "start": "2022000",
    "end": "2075000"
  },
  {
    "text": "so we can cap create hybrid edit of these two why do we need to just have",
    "start": "2023200",
    "end": "2029360"
  },
  {
    "text": "one and this is kind of where we think things are going so in hybrid stream",
    "start": "2029360",
    "end": "2035480"
  },
  {
    "text": "processor a couple of things are different certainly firstly the interaction model doesn't just handle queries requests for",
    "start": "2035480",
    "end": "2043970"
  },
  {
    "text": "responses it also handles event streams so I can have a payment stream coming in",
    "start": "2043970",
    "end": "2049370"
  },
  {
    "text": "I can be again computing my table right so I can summarize and materialize those",
    "start": "2049370",
    "end": "2055820"
  },
  {
    "text": "credit scores but because that's a table there's actually nothing to stop the query can be querying it can send a",
    "start": "2055820",
    "end": "2061429"
  },
  {
    "text": "select statement to that get a response but the same time I can also listen to",
    "start": "2061429",
    "end": "2067340"
  },
  {
    "text": "changes on that table as they happen I have a kind of like both interaction",
    "start": "2067340",
    "end": "2073878"
  },
  {
    "text": "models so what I think we're gonna end up with is a kind of unified model and",
    "start": "2073879",
    "end": "2081970"
  },
  {
    "text": "it really manages two big differences there's a bit more to it than this we talked about the different types of",
    "start": "2081970",
    "end": "2088370"
  },
  {
    "text": "joins and stuff like that but fundamentally the big two big differences are handling both the",
    "start": "2088370",
    "end": "2094550"
  },
  {
    "text": "asynchronous as well the sickness and and having an interaction model that is both active",
    "start": "2094550",
    "end": "2101740"
  },
  {
    "text": "and passive so what does that actually look like that she's pretty simple",
    "start": "2101740",
    "end": "2109810"
  },
  {
    "text": "remember we can we actually think of a stream as being like a table the",
    "start": "2109810",
    "end": "2115480"
  },
  {
    "text": "different interaction model and then we can run queries using sequel so our",
    "start": "2115480",
    "end": "2121030"
  },
  {
    "text": "standard they debated based query basically just runs from their earliest bit of data and it runs right the way",
    "start": "2121030",
    "end": "2127300"
  },
  {
    "text": "through to now and then it stops but it gives you the answer",
    "start": "2127300",
    "end": "2132760"
  },
  {
    "text": "that's the query model that you ever will release do stand-up stream",
    "start": "2132760",
    "end": "2140800"
  },
  {
    "text": "processing query well that starts at now right doesn't consider previous data not",
    "start": "2140800",
    "end": "2146140"
  },
  {
    "text": "unless I ask you to I can do can get back in time and reprocess a feeling but we can store all our data at caf-co for",
    "start": "2146140",
    "end": "2152410"
  },
  {
    "text": "as long as we want but just to have to so typically it will start right now and just kind of long forever just keeps",
    "start": "2152410",
    "end": "2158980"
  },
  {
    "text": "running forever there's another interaction model which is like this",
    "start": "2158980",
    "end": "2165040"
  },
  {
    "text": "dashboard dashboard query so in this we're starting from the earliest record",
    "start": "2165040",
    "end": "2172500"
  },
  {
    "text": "almost querying through to now but then actually gonna keep going keep going",
    "start": "2172500",
    "end": "2178960"
  },
  {
    "text": "forever so this is yeah I call that a dashboard query model because it's a bit like loading data into a dashboard and",
    "start": "2178960",
    "end": "2184300"
  },
  {
    "text": "then keeping it up to date well though this is actually slightly nuanced",
    "start": "2184300",
    "end": "2189510"
  },
  {
    "text": "appears when you do that initial query what you actually return do you return",
    "start": "2189510",
    "end": "2194560"
  },
  {
    "text": "like a just a snapshot from now which is like the latest version of reach key in",
    "start": "2194560",
    "end": "2200530"
  },
  {
    "text": "the table or do you return all of their events or some combination henceforth because the future data that's going to",
    "start": "2200530",
    "end": "2208330"
  },
  {
    "text": "have come one event at a time or at least when when your window and function is using suppression so we have these",
    "start": "2208330",
    "end": "2215980"
  },
  {
    "text": "different interaction models but there's some sort of subtleties about how we actually might want to phrase that data",
    "start": "2215980",
    "end": "2221110"
  },
  {
    "text": "we might want a snapshot we might want to have every single stage change that happened in the past",
    "start": "2221110",
    "end": "2227160"
  },
  {
    "text": "but we put it all together and you kind of get this unified model where you have like the earliest two now earliest",
    "start": "2227160",
    "end": "2234240"
  },
  {
    "text": "forever and now forever its represent different types of queries and we can represent these in sequel so a push",
    "start": "2234240",
    "end": "2242610"
  },
  {
    "start": "2237000",
    "end": "2268000"
  },
  {
    "text": "query would look like regular sequel select user credits cool orders etc",
    "start": "2242610",
    "end": "2248730"
  },
  {
    "text": "where people you of course Bob and but we have to have this a bit changes says we're basically going to execute the",
    "start": "2248730",
    "end": "2255120"
  },
  {
    "text": "query and then keep giving you extra results or you can just do a standard pull query so a standard pull query will",
    "start": "2255120",
    "end": "2262890"
  },
  {
    "text": "literally just gonna ask a question and we're gonna get an answer so that's like",
    "start": "2262890",
    "end": "2270270"
  },
  {
    "start": "2268000",
    "end": "2390000"
  },
  {
    "text": "the interaction model that's one part and the other part is this idea of embracing the synchronicity that's",
    "start": "2270270",
    "end": "2276300"
  },
  {
    "text": "another thing that we think needs to change or we think is increasingly is gonna change so in a synchronous world",
    "start": "2276300",
    "end": "2283170"
  },
  {
    "text": "that's actually what if you think back to the sort of micro services side your idea that we're gonna connect these",
    "start": "2283170",
    "end": "2288690"
  },
  {
    "text": "different things together different parts of a system together we often want to do that asynchronously for automating",
    "start": "2288690",
    "end": "2295260"
  },
  {
    "text": "your business process different micro services won't have different life cycles they want to be decoupled etc etc so we actually want to be able to",
    "start": "2295260",
    "end": "2301980"
  },
  {
    "text": "orchestrate across different processes we might want to pull data out of a database push it into event streams",
    "start": "2301980",
    "end": "2307680"
  },
  {
    "text": "perform some processing push it into an application maybe into a lambda function or something so it's not my dear of",
    "start": "2307680",
    "end": "2313710"
  },
  {
    "text": "pipelines is actually something that ideally we want to be able to embrace along with this interaction model and",
    "start": "2313710",
    "end": "2321150"
  },
  {
    "text": "having this sort of joins aggregations time handling that is required to manage",
    "start": "2321150",
    "end": "2326340"
  },
  {
    "text": "this kind of asynchronous world another thing is transactions transactions in a database are actually",
    "start": "2326340",
    "end": "2332220"
  },
  {
    "text": "very different well fairly different from transactions in a stream processor so in a transaction in a database it's",
    "start": "2332220",
    "end": "2339300"
  },
  {
    "text": "actually you do effectively a two-phase commit protocol on when you're actually changing or reading data in a",
    "start": "2339300",
    "end": "2347580"
  },
  {
    "text": "asynchronous system what you actually do is you pass barriers so barriers flow",
    "start": "2347580",
    "end": "2353190"
  },
  {
    "text": "through the variance addition different operations inside system and those barriers are actually",
    "start": "2353190",
    "end": "2361579"
  },
  {
    "text": "committed there is also a two-phase commit protocol but it's based on these barriers that flow through this system",
    "start": "2361579",
    "end": "2367910"
  },
  {
    "text": "this last this is how you can basically manage transactions manage updates to various different places in a sort of a",
    "start": "2367910",
    "end": "2375520"
  },
  {
    "text": "atomic way using an asynchronous processing system without having to do this sort of two-phase commit that we",
    "start": "2375520",
    "end": "2382430"
  },
  {
    "text": "used to have back in the days of j2ee and that kind of thing so we have",
    "start": "2382430",
    "end": "2388460"
  },
  {
    "text": "asynchronous pipelines there's a couple of other important variants I wanted to",
    "start": "2388460",
    "end": "2393470"
  },
  {
    "start": "2390000",
    "end": "2460000"
  },
  {
    "text": "mention stream processors today most of them are actually frameworks right so",
    "start": "2393470",
    "end": "2400010"
  },
  {
    "text": "mote that although like flink has a sequel api Cather streams has a sequel there are a few others that do sequel",
    "start": "2400010",
    "end": "2408109"
  },
  {
    "text": "based processing we definitely think that's the right way to talk about data you typically want to talk about data using the declarative language that's",
    "start": "2408109",
    "end": "2415010"
  },
  {
    "text": "one thing that the ratio of database world definitely got bright but um many",
    "start": "2415010",
    "end": "2420200"
  },
  {
    "text": "of them actually programming frameworks based on you know JVM most of these are based on the JVM and that's actually",
    "start": "2420200",
    "end": "2427280"
  },
  {
    "text": "gives you a lot of power you can write anything that you want you can interact with these tables directly you can build",
    "start": "2427280",
    "end": "2432770"
  },
  {
    "text": "a different type of application the other side of this is active databases have also improved through have things",
    "start": "2432770",
    "end": "2438770"
  },
  {
    "text": "like MongoDB Couchbase rethink DP these let you listen to change streams on",
    "start": "2438770",
    "end": "2444650"
  },
  {
    "text": "tables which is again quite similar right but don't have the sort of temporal functions or hand or the",
    "start": "2444650",
    "end": "2450319"
  },
  {
    "text": "handling of a synchronicity and creating materialized views that you get inside a stream processor so it's definite like a",
    "start": "2450319",
    "end": "2457310"
  },
  {
    "text": "path of consolidation going here on here and I think we're gonna see a lot more of it so it's not we talked about this",
    "start": "2457310",
    "end": "2464480"
  },
  {
    "start": "2460000",
    "end": "2468000"
  },
  {
    "text": "idea that software is eating the world and that the user of software today as",
    "start": "2464480",
    "end": "2472520"
  },
  {
    "start": "2468000",
    "end": "2489000"
  },
  {
    "text": "we kind of automate our business processes is less likely over time to be",
    "start": "2472520",
    "end": "2478400"
  },
  {
    "text": "a user is less likely to just be you and me it's more likely actually to be some",
    "start": "2478400",
    "end": "2483829"
  },
  {
    "text": "other piece of software which we're sewing together in some automated architecture and to do this we think you need both",
    "start": "2483829",
    "end": "2492319"
  },
  {
    "start": "2489000",
    "end": "2519000"
  },
  {
    "text": "its the extinct Ulis and the synchronous you kind of need to better handle both of these things you also need these",
    "start": "2492319",
    "end": "2498349"
  },
  {
    "text": "different on track interaction models you need to be able to query passive datasets and get answers for users that",
    "start": "2498349",
    "end": "2505220"
  },
  {
    "text": "are clicking buttons and expecting things to happen but you also want these proactive this proactive interaction",
    "start": "2505220",
    "end": "2512270"
  },
  {
    "text": "model where data is being pushed as an event stream to different subscribing",
    "start": "2512270",
    "end": "2517400"
  },
  {
    "text": "services so we still need all of these still only we need all of these",
    "start": "2517400",
    "end": "2522500"
  },
  {
    "text": "different types of database but we're likely to see this shift happening where",
    "start": "2522500",
    "end": "2527599"
  },
  {
    "text": "we start to get different niches are forming around these active databases",
    "start": "2527599",
    "end": "2533089"
  },
  {
    "text": "and case equal DB being one example of this but you're actually seeing other movements in the database community",
    "start": "2533089",
    "end": "2539960"
  },
  {
    "text": "going in the same direction particularly around active databases so my final",
    "start": "2539960",
    "end": "2546170"
  },
  {
    "text": "thought for you is if any of you did close your eyes shall be surprised but when we when you saw this slide before",
    "start": "2546170",
    "end": "2554049"
  },
  {
    "text": "but it even if you did just figuratively and you thought about what a database means to you you thought about how you",
    "start": "2554049",
    "end": "2561710"
  },
  {
    "text": "interact with the database maybe as things change so does that notion",
    "start": "2561710",
    "end": "2568279"
  },
  {
    "text": "so does that thing that we hold so dearly that idea of what a database is maybe it needs to be something slightly",
    "start": "2568279",
    "end": "2574339"
  },
  {
    "text": "different to what it is today and that's me my name is ben Stopford I",
    "start": "2574339",
    "end": "2579829"
  },
  {
    "start": "2577000",
    "end": "2815000"
  },
  {
    "text": "work at confident you can get me on Twitter you can send me an email and if",
    "start": "2579829",
    "end": "2586369"
  },
  {
    "text": "anyone has any questions I'd I'd love to have them thanks very much [Applause]",
    "start": "2586369",
    "end": "2593369"
  },
  {
    "text": "[Applause] do we have any questions",
    "start": "2596570",
    "end": "2602510"
  },
  {
    "text": "I might have one actually so do you see Eddie when you see this sort of",
    "start": "2604490",
    "end": "2610500"
  },
  {
    "text": "standardization happening and emergence of this new kind of database to see that something has been quite soon or what is",
    "start": "2610500",
    "end": "2617220"
  },
  {
    "text": "your kind of time frame on that so I think so things actually a lot of activity in this space you're seeing a",
    "start": "2617220",
    "end": "2624000"
  },
  {
    "text": "lot of different database vendors embracing streams it may be we sort of",
    "start": "2624000",
    "end": "2629520"
  },
  {
    "text": "see this more closely than others but I don't we kind of watch it so I said like",
    "start": "2629520",
    "end": "2634619"
  },
  {
    "text": " has seven streams Couchbase has these things there was a talk earlier about interacting or databases that can",
    "start": "2634619",
    "end": "2641400"
  },
  {
    "text": "interact with the front-end that's another burgeoning field like a lot of front-end development is event based and yet most databases don't",
    "start": "2641400",
    "end": "2648359"
  },
  {
    "text": "really handle the event based side of things so we're definitely seeing some some change in that area from a personal",
    "start": "2648359",
    "end": "2655470"
  },
  {
    "text": "perspective a confluent I mean we have case all the sequel DB we've vesting heavily in that and we think that that's",
    "start": "2655470",
    "end": "2661770"
  },
  {
    "text": "a that's actually the way that's stream processing is going to go because it gives you this kind of unified model and",
    "start": "2661770",
    "end": "2668150"
  },
  {
    "text": "actually being having the familiarity of a database with a lot of the processing",
    "start": "2668150",
    "end": "2674190"
  },
  {
    "text": "capabilities of a stream process it was really powerful combination so we definitely think it's going in that direction all right well let's give one",
    "start": "2674190",
    "end": "2691440"
  },
  {
    "text": "was it oh sorry it didn't see that hand",
    "start": "2691440",
    "end": "2695480"
  },
  {
    "text": "how about you know moving into more of a data Lake architecture directly rather",
    "start": "2697460",
    "end": "2703290"
  },
  {
    "text": "than just a database how about moving to a data link architecture well I think",
    "start": "2703290",
    "end": "2709500"
  },
  {
    "text": "the data I mean a data link is in some ways another type of database everything Louise you say here you can think of",
    "start": "2709500",
    "end": "2715740"
  },
  {
    "text": "from a operational database perspective or from a sort of analytical perspective",
    "start": "2715740",
    "end": "2721080"
  },
  {
    "text": "but I think probably the big difference with stream processing I mean these two things are not the same",
    "start": "2721080",
    "end": "2726700"
  },
  {
    "text": "you know a stream processor and actually event stream processing is mostly about sharing data between different places",
    "start": "2726700",
    "end": "2732190"
  },
  {
    "text": "that could be different micro-services it could be collecting data and pushing it into a data link so I think that the",
    "start": "2732190",
    "end": "2739650"
  },
  {
    "text": "silly the way that we've been going with this is to provide tooling there lets",
    "start": "2739650",
    "end": "2744730"
  },
  {
    "text": "you kind of automate those processes so you can suck the air out of one place but to rise it somewhere else and you can do that using a single sequel layer",
    "start": "2744730",
    "end": "2753940"
  },
  {
    "text": "effectively but at the same time yeah the actual query model we think it's",
    "start": "2753940",
    "end": "2763060"
  },
  {
    "text": "unlikely that we would use that we're not going to be a replacement for like it big analytics databases comes back to",
    "start": "2763060",
    "end": "2769599"
  },
  {
    "text": "the sweet spots there's no way that yeah I think you'd see this kind of technology necessarily replacing big",
    "start": "2769599",
    "end": "2776980"
  },
  {
    "text": "analytic systems in the short term but certainly around to communicating different information around a company",
    "start": "2776980",
    "end": "2784480"
  },
  {
    "text": "or information around a microservice architecture and most importantly probably just creating materialized views so a lot of the sort of serving",
    "start": "2784480",
    "end": "2792520"
  },
  {
    "text": "layers you want to create you can do that with this kind of technology very very well and advanced in your question",
    "start": "2792520",
    "end": "2800099"
  },
  {
    "text": "you're welcome any more custom all right",
    "start": "2800099",
    "end": "2807880"
  },
  {
    "text": "I think that's all thank you so much Ben thanks very much it's been a big name thank you [Music]",
    "start": "2807880",
    "end": "2812890"
  },
  {
    "text": "[Applause]",
    "start": "2812890",
    "end": "2816779"
  }
]