[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "[Music]",
    "start": "1990",
    "end": "16600"
  },
  {
    "text": "let's jump through context managers",
    "start": "16600",
    "end": "20000"
  },
  {
    "text": "here my uh kind of alternative title for",
    "start": "21680",
    "end": "24199"
  },
  {
    "text": "the for the talk uh I thought about this",
    "start": "24199",
    "end": "27240"
  },
  {
    "start": "27000",
    "end": "33000"
  },
  {
    "text": "putting compact interfaces on verbose",
    "start": "27240",
    "end": "28840"
  },
  {
    "text": "apis as the pythonic thing to do but I",
    "start": "28840",
    "end": "30640"
  },
  {
    "text": "couldn't fit that on the uh slide",
    "start": "30640",
    "end": "32920"
  },
  {
    "text": "entirely everybody knows about context",
    "start": "32920",
    "end": "34640"
  },
  {
    "start": "33000",
    "end": "49000"
  },
  {
    "text": "managers right the width statement in",
    "start": "34640",
    "end": "36320"
  },
  {
    "text": "Python you know the the the famous",
    "start": "36320",
    "end": "38480"
  },
  {
    "text": "example is the the open call you use",
    "start": "38480",
    "end": "40399"
  },
  {
    "text": "with and uh at the end of your indented",
    "start": "40399",
    "end": "43600"
  },
  {
    "text": "block your file handle is automatically",
    "start": "43600",
    "end": "45360"
  },
  {
    "text": "closed for you you didn't have to do",
    "start": "45360",
    "end": "46960"
  },
  {
    "text": "anything right uh that's cool we like",
    "start": "46960",
    "end": "49520"
  },
  {
    "start": "49000",
    "end": "71000"
  },
  {
    "text": "that it's uh it's like decorators for",
    "start": "49520",
    "end": "51120"
  },
  {
    "text": "blocks instead of just decorators for",
    "start": "51120",
    "end": "52760"
  },
  {
    "text": "functions and anytime you have an API",
    "start": "52760",
    "end": "55039"
  },
  {
    "text": "that kind of has like a before and an",
    "start": "55039",
    "end": "56320"
  },
  {
    "text": "after step or you know a do and then an",
    "start": "56320",
    "end": "57960"
  },
  {
    "text": "undo kind of Step uh you should use",
    "start": "57960",
    "end": "60640"
  },
  {
    "text": "something like this uh or alternatively",
    "start": "60640",
    "end": "63000"
  },
  {
    "text": "you know programmers always follow",
    "start": "63000",
    "end": "64478"
  },
  {
    "text": "instructions so you can just help people",
    "start": "64479",
    "end": "65960"
  },
  {
    "text": "you know always put the after call in a",
    "start": "65960",
    "end": "68360"
  },
  {
    "text": "finally block and they'll obey you and",
    "start": "68360",
    "end": "69720"
  },
  {
    "text": "you can ignore the rest of the talk um",
    "start": "69720",
    "end": "71920"
  },
  {
    "start": "71000",
    "end": "86000"
  },
  {
    "text": "but it would be useful if you have you",
    "start": "71920",
    "end": "73040"
  },
  {
    "text": "know you close a file or a socket handle",
    "start": "73040",
    "end": "75600"
  },
  {
    "text": "even if you crash or you commit the",
    "start": "75600",
    "end": "77600"
  },
  {
    "text": "transaction even if you crash or you",
    "start": "77600",
    "end": "79720"
  },
  {
    "text": "release the lock you know you get the",
    "start": "79720",
    "end": "81079"
  },
  {
    "text": "picture um or stateful apis reset the",
    "start": "81079",
    "end": "84200"
  },
  {
    "text": "thing to the original value that kind of",
    "start": "84200",
    "end": "85799"
  },
  {
    "text": "thing um so with is awesome context",
    "start": "85799",
    "end": "88040"
  },
  {
    "start": "86000",
    "end": "127000"
  },
  {
    "text": "managers are great but it's kind of a",
    "start": "88040",
    "end": "89200"
  },
  {
    "text": "verbose a II right you have to make a",
    "start": "89200",
    "end": "91119"
  },
  {
    "text": "class the class has to have an enter and",
    "start": "91119",
    "end": "93520"
  },
  {
    "text": "an exit method the enter is the before",
    "start": "93520",
    "end": "96040"
  },
  {
    "text": "stuff so if you need to do any",
    "start": "96040",
    "end": "97960"
  },
  {
    "text": "initialization um you can return a value",
    "start": "97960",
    "end": "100200"
  },
  {
    "text": "from the inter method uh that is the",
    "start": "100200",
    "end": "101920"
  },
  {
    "text": "thing you catch with as so like you say",
    "start": "101920",
    "end": "104000"
  },
  {
    "text": "with open as file handle uh the exit is",
    "start": "104000",
    "end": "107040"
  },
  {
    "text": "the after method and the exit method has",
    "start": "107040",
    "end": "109520"
  },
  {
    "text": "to take three arguments that are all",
    "start": "109520",
    "end": "110799"
  },
  {
    "text": "about handling exceptions in the",
    "start": "110799",
    "end": "112200"
  },
  {
    "text": "indented block and it can return true or",
    "start": "112200",
    "end": "113799"
  },
  {
    "text": "it can return false um you can use a",
    "start": "113799",
    "end": "117200"
  },
  {
    "text": "knit and accept some arguments to",
    "start": "117200",
    "end": "118520"
  },
  {
    "text": "customize your manager you know like",
    "start": "118520",
    "end": "120280"
  },
  {
    "text": "like the open takes a file name a",
    "start": "120280",
    "end": "122320"
  },
  {
    "text": "specific file name to to uh to open okay",
    "start": "122320",
    "end": "125079"
  },
  {
    "text": "you know it works little verbose we can",
    "start": "125079",
    "end": "127879"
  },
  {
    "text": "do well maybe better maybe just shorter",
    "start": "127879",
    "end": "131239"
  },
  {
    "text": "um but you got to get several Concepts",
    "start": "131239",
    "end": "132680"
  },
  {
    "text": "kind of packed into tight space so",
    "start": "132680",
    "end": "134480"
  },
  {
    "text": "phenomenal cosmic power at our",
    "start": "134480",
    "end": "136599"
  },
  {
    "text": "fingertips and itty bitty leaving",
    "start": "136599",
    "end": "139160"
  },
  {
    "text": "space David Shor said he didn't care if",
    "start": "139160",
    "end": "141239"
  },
  {
    "start": "140000",
    "end": "160000"
  },
  {
    "text": "I did that um for the purposes of this",
    "start": "141239",
    "end": "143040"
  },
  {
    "text": "lightning talk the first concept you",
    "start": "143040",
    "end": "144560"
  },
  {
    "text": "have to understand is yield and I'm just",
    "start": "144560",
    "end": "145840"
  },
  {
    "text": "going to say like yield is a return that",
    "start": "145840",
    "end": "148120"
  },
  {
    "text": "pauses your function",
    "start": "148120",
    "end": "150480"
  },
  {
    "text": "so you can run it again from the point",
    "start": "150480",
    "end": "152400"
  },
  {
    "text": "at which you yielded so if you put yield",
    "start": "152400",
    "end": "154360"
  },
  {
    "text": "in a function it's not really a function",
    "start": "154360",
    "end": "156200"
  },
  {
    "text": "it's really like a Constructor for this",
    "start": "156200",
    "end": "158440"
  },
  {
    "text": "special generator object and quick code",
    "start": "158440",
    "end": "161360"
  },
  {
    "start": "160000",
    "end": "186000"
  },
  {
    "text": "sample you know I have a little do to",
    "start": "161360",
    "end": "164000"
  },
  {
    "text": "things function it prints something it",
    "start": "164000",
    "end": "166040"
  },
  {
    "text": "yields it prints the second thing when",
    "start": "166040",
    "end": "167560"
  },
  {
    "text": "you call it what you get back is a",
    "start": "167560",
    "end": "170319"
  },
  {
    "text": "generator you know this thing is what",
    "start": "170319",
    "end": "172560"
  },
  {
    "text": "you get back from the function that's",
    "start": "172560",
    "end": "174080"
  },
  {
    "text": "kind of odd it has a next method you",
    "start": "174080",
    "end": "176319"
  },
  {
    "text": "call the next and it prints out first",
    "start": "176319",
    "end": "177959"
  },
  {
    "text": "thing and it yields you call next again",
    "start": "177959",
    "end": "180000"
  },
  {
    "text": "it prints out second thing and then it",
    "start": "180000",
    "end": "181400"
  },
  {
    "text": "crashes with a stop iteration because",
    "start": "181400",
    "end": "182879"
  },
  {
    "text": "hey that's the iteration protocol so",
    "start": "182879",
    "end": "185680"
  },
  {
    "text": "yield we got to know about yield uh try",
    "start": "185680",
    "end": "187440"
  },
  {
    "start": "186000",
    "end": "200000"
  },
  {
    "text": "finally I don't know if to explain this",
    "start": "187440",
    "end": "188400"
  },
  {
    "text": "one right and I've got one minute and 56",
    "start": "188400",
    "end": "190480"
  },
  {
    "text": "seconds so you try some code usually if",
    "start": "190480",
    "end": "193080"
  },
  {
    "text": "you do something stupid in your code",
    "start": "193080",
    "end": "194720"
  },
  {
    "text": "your program crashes but you could put a",
    "start": "194720",
    "end": "196120"
  },
  {
    "text": "finally block which is guaranteed to",
    "start": "196120",
    "end": "197360"
  },
  {
    "text": "always run no matter what kind of sort",
    "start": "197360",
    "end": "199000"
  },
  {
    "text": "of mostly",
    "start": "199000",
    "end": "200959"
  },
  {
    "start": "200000",
    "end": "235000"
  },
  {
    "text": "usually they're not cool I'm talking",
    "start": "200959",
    "end": "203959"
  },
  {
    "text": "fast enough",
    "start": "203959",
    "end": "205720"
  },
  {
    "text": "already uh so decorators and no not in a",
    "start": "205720",
    "end": "209239"
  },
  {
    "text": "minute and 30 seconds we won't explain",
    "start": "209239",
    "end": "210799"
  },
  {
    "text": "decorators but let's just say magic",
    "start": "210799",
    "end": "212319"
  },
  {
    "text": "applied to functions and you've probably",
    "start": "212319",
    "end": "214480"
  },
  {
    "text": "used these even if you don't",
    "start": "214480",
    "end": "215599"
  },
  {
    "text": "particularly understand them you make a",
    "start": "215599",
    "end": "217000"
  },
  {
    "text": "class you make a method and usually if",
    "start": "217000",
    "end": "219680"
  },
  {
    "text": "you leave self off in a method there's",
    "start": "219680",
    "end": "221400"
  },
  {
    "text": "just no way you can call it python makes",
    "start": "221400",
    "end": "223599"
  },
  {
    "text": "you do the explicit self thing but if",
    "start": "223599",
    "end": "224959"
  },
  {
    "text": "you put that little magic at static",
    "start": "224959",
    "end": "226799"
  },
  {
    "text": "method in front of it it like changes",
    "start": "226799",
    "end": "228319"
  },
  {
    "text": "the type of the function and manipulates",
    "start": "228319",
    "end": "229959"
  },
  {
    "text": "it signature and does lots of cool stuff",
    "start": "229959",
    "end": "231799"
  },
  {
    "text": "so hey now you can call it so decorators",
    "start": "231799",
    "end": "233959"
  },
  {
    "text": "magic applied to functions all that",
    "start": "233959",
    "end": "235799"
  },
  {
    "start": "235000",
    "end": "278000"
  },
  {
    "text": "gives us context li. context manager",
    "start": "235799",
    "end": "238760"
  },
  {
    "text": "quick show hands who's us it",
    "start": "238760",
    "end": "241640"
  },
  {
    "text": "okay good a few people uh a decorator",
    "start": "241640",
    "end": "243439"
  },
  {
    "text": "that can build a context manager for you",
    "start": "243439",
    "end": "246159"
  },
  {
    "text": "with those earlier Concepts you just",
    "start": "246159",
    "end": "247680"
  },
  {
    "text": "have to write a function that runs",
    "start": "247680",
    "end": "249079"
  },
  {
    "text": "exactly",
    "start": "249079",
    "end": "251000"
  },
  {
    "text": "twice you can do that by yielding",
    "start": "251000",
    "end": "253920"
  },
  {
    "text": "once you have to write a function that's",
    "start": "253920",
    "end": "256400"
  },
  {
    "text": "guaranteed to do the stuff after the",
    "start": "256400",
    "end": "258239"
  },
  {
    "text": "yield and you can do that by putting",
    "start": "258239",
    "end": "260680"
  },
  {
    "text": "that stuff in a finally block you can",
    "start": "260680",
    "end": "263400"
  },
  {
    "text": "optionally like accept arguments to your",
    "start": "263400",
    "end": "265160"
  },
  {
    "text": "function you know that's customizing the",
    "start": "265160",
    "end": "267320"
  },
  {
    "text": "behavior of your context manager and",
    "start": "267320",
    "end": "269039"
  },
  {
    "text": "optionally you is like return you could",
    "start": "269039",
    "end": "270800"
  },
  {
    "text": "return a value so that's the thing that",
    "start": "270800",
    "end": "272400"
  },
  {
    "text": "gets passed back and caught with the as",
    "start": "272400",
    "end": "274680"
  },
  {
    "text": "statement and you just decorate your",
    "start": "274680",
    "end": "276320"
  },
  {
    "text": "function with a the handly supplied at",
    "start": "276320",
    "end": "278720"
  },
  {
    "text": "context manager so with 26 seconds to go",
    "start": "278720",
    "end": "281280"
  },
  {
    "text": "here's a sample context manager called",
    "start": "281280",
    "end": "285400"
  },
  {
    "text": "CD decorator without context manager",
    "start": "285400",
    "end": "288080"
  },
  {
    "text": "here there's The Decorator I have a tri",
    "start": "288080",
    "end": "290800"
  },
  {
    "text": "block and what this one does is it",
    "start": "290800",
    "end": "293880"
  },
  {
    "text": "checks to see what is the current path",
    "start": "293880",
    "end": "297000"
  },
  {
    "text": "it goes someplace else and does the",
    "start": "297000",
    "end": "298880"
  },
  {
    "text": "expand user you can pass it convenient",
    "start": "298880",
    "end": "300880"
  },
  {
    "text": "paths and then it yields and then I have",
    "start": "300880",
    "end": "303639"
  },
  {
    "text": "a finally block that's kind of the after",
    "start": "303639",
    "end": "306120"
  },
  {
    "text": "stuff and it goes back to where it was",
    "start": "306120",
    "end": "308039"
  },
  {
    "text": "in the first place so not very",
    "start": "308039",
    "end": "310560"
  },
  {
    "text": "complicated to understand and really",
    "start": "310560",
    "end": "312039"
  },
  {
    "text": "easy to use kind of this block of code",
    "start": "312039",
    "end": "314600"
  },
  {
    "text": "says if you say with CD change a some",
    "start": "314600",
    "end": "316600"
  },
  {
    "text": "directory do some location based stuff",
    "start": "316600",
    "end": "318880"
  },
  {
    "text": "when you're done doing location based",
    "start": "318880",
    "end": "320199"
  },
  {
    "text": "stuff you're back where you started from",
    "start": "320199",
    "end": "321479"
  },
  {
    "text": "automatically context",
    "start": "321479",
    "end": "323319"
  },
  {
    "text": "managers they're cool and I have no time",
    "start": "323319",
    "end": "325960"
  },
  {
    "text": "for questions so thanks very much",
    "start": "325960",
    "end": "330240"
  }
]