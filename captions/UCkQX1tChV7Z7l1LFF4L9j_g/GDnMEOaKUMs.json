[
  {
    "text": "welcome everyone today we're gonna do talk titled invest in your java catalog it is not",
    "start": "4100",
    "end": "11150"
  },
  {
    "text": "misspelled so we're gonna you know share some of the you know thoughts we have",
    "start": "11150",
    "end": "17540"
  },
  {
    "text": "and how to keep up with this new you know Java release train that we have right new Java releases coming out every",
    "start": "17540",
    "end": "23210"
  },
  {
    "text": "six months you have to learn new features there's also you know other you know jvm languages like hotland Scala",
    "start": "23210",
    "end": "28460"
  },
  {
    "text": "groovy so much to learn right and so little time so with that we'll jump in a",
    "start": "28460",
    "end": "34489"
  },
  {
    "text": "little about myself so my name is Donald Robb it's my first time presenting a cucum I've presented a bunch of",
    "start": "34489",
    "end": "40880"
  },
  {
    "text": "different conferences that I presented four times at JavaOne dev Nexus devoxx I've also recently presented at the New",
    "start": "40880",
    "end": "46460"
  },
  {
    "text": "York Java sig for anybody who's been to the Java sig if you don't go to New York javis a guy would recommend going in New York to have a cig it's a great place to",
    "start": "46460",
    "end": "52400"
  },
  {
    "text": "learn stuff programmed in about 20 different programming languages three of",
    "start": "52400",
    "end": "59210"
  },
  {
    "text": "them I kind of represented here or there ones I really got paid to at the program and shouldn't skip over I guess like I",
    "start": "59210",
    "end": "65750"
  },
  {
    "text": "am an instructional coach and open-source advocate in the application platform and services team at I'm",
    "start": "65750",
    "end": "71750"
  },
  {
    "text": "Ellen if you're wondering what instructional coaches if you ever heard the saying those who can do those who",
    "start": "71750",
    "end": "77300"
  },
  {
    "text": "can't teach those who can't teach teach teachers I'm one of the teachers teachers so today I'll be actually",
    "start": "77300",
    "end": "83180"
  },
  {
    "text": "teaching teachers hopefully you'll all become teachers like myself so been somewhat active in the Java community I",
    "start": "83180",
    "end": "90229"
  },
  {
    "text": "was a member of the jsr 335 expert group which I guess nicely got lambdas into as",
    "start": "90229",
    "end": "98450"
  },
  {
    "text": "well the streams API into Java 8 in 2014 I used to be a member of the on the JCB",
    "start": "98450",
    "end": "104840"
  },
  {
    "text": "Executive Committee I guess more interestingly I am the creator of a framework called Eclipse collections",
    "start": "104840",
    "end": "110540"
  },
  {
    "text": "anybody heard of eclipse collections my name is interested I carry stickers if you won't as you can see I like",
    "start": "110540",
    "end": "117049"
  },
  {
    "text": "stickers on my laptop so I've got at least three clues collection stickers down there also I guess interestingly",
    "start": "117049",
    "end": "122600"
  },
  {
    "text": "and we're gonna actually be covering this today I'm the creator of B my melons Java code Coty's which are",
    "start": "122600",
    "end": "127790"
  },
  {
    "text": "actually up in github so you know we're gonna be going through some live examples today with the code goddess but",
    "start": "127790",
    "end": "133189"
  },
  {
    "text": "without I'll hand it over to Aditi go up to my tree and I'm the principal",
    "start": "133189",
    "end": "140930"
  },
  {
    "text": "developer in BNY Mellon in the global fund accounting team we work in the agile team and with a lot of cool",
    "start": "140930",
    "end": "147950"
  },
  {
    "text": "technologies like Wadden activity drool spring growth hazel caste and I took my",
    "start": "147950",
    "end": "153470"
  },
  {
    "text": "first guitar with dawn around a year back and since then I've kind of got hooked on to it okay thank you",
    "start": "153470",
    "end": "162490"
  },
  {
    "text": "okay so code cutters so quickly anybody know where the cut is and you can read",
    "start": "162490",
    "end": "168590"
  },
  {
    "text": "it from the screen yay who's taking code cutters before been to Dave Thomas's",
    "start": "168590",
    "end": "174080"
  },
  {
    "text": "famous you know code kata calm and it's got 21 code cutters out there so that's the reference on the bottoms but for",
    "start": "174080",
    "end": "180500"
  },
  {
    "text": "those that don't know a kata is a exercise for individual martial arts I like to use the example of you know the",
    "start": "180500",
    "end": "187790"
  },
  {
    "text": "karate kid if you've ever seen that most people have mr. Miyagi when he's you know having Daniel's son paint the fence",
    "start": "187790",
    "end": "193820"
  },
  {
    "text": "and wax the car this is actually a kata right daniel-san has no idea he thinks he just you know being put to force labor but",
    "start": "193820",
    "end": "200270"
  },
  {
    "text": "he's actually learning you know structured moves for defense similarly code kata hands-on program",
    "start": "200270",
    "end": "205370"
  },
  {
    "text": "exercise where we hone our skills through practice code kata is that I've",
    "start": "205370",
    "end": "210620"
  },
  {
    "text": "developed and have been working with over the years are usually set up as unit tests that fail and your job is to",
    "start": "210620",
    "end": "215630"
  },
  {
    "text": "make them pass and once again the reference you know the original code kata from pragmatic dave dave thomas",
    "start": "215630",
    "end": "221210"
  },
  {
    "text": "from the pragmatic programmers at this site code kata calm if you haven't seen them before so different code caught of",
    "start": "221210",
    "end": "228380"
  },
  {
    "text": "styles one style is i refer to as refactor the code basically with a four",
    "start": "228380",
    "end": "234500"
  },
  {
    "text": "factor the code and this is you know an odd one out the test actually pass the point of the cot is actually to take the",
    "start": "234500",
    "end": "240620"
  },
  {
    "text": "code as it exists today and maybe leverage a new library or language feature so you're basically going to be refactoring the code is and the test",
    "start": "240620",
    "end": "246350"
  },
  {
    "text": "should keep passing another kata style called fix the test and fix the test",
    "start": "246350",
    "end": "251390"
  },
  {
    "text": "what you have is failing tests and you're actually going to change the code in the test itself this is usually",
    "start": "251390",
    "end": "256670"
  },
  {
    "text": "useful this is the style of kata that's used with if you've ever seen the Eclipse collections kata uses a style",
    "start": "256670",
    "end": "261709"
  },
  {
    "text": "where basically you'll you'll want to share maybe you know the learning of a small API and you have to actually use",
    "start": "261710",
    "end": "267229"
  },
  {
    "text": "that API in the test itself so your placing once again missing code with the",
    "start": "267229",
    "end": "272959"
  },
  {
    "text": "you know fixing the test another style which you're actually going to be seeing today is called fix the code and this is",
    "start": "272959",
    "end": "279649"
  },
  {
    "text": "where your tests fail but you're not going to touch the tests right the tests are supposed to be there where they're",
    "start": "279649",
    "end": "284839"
  },
  {
    "text": "working and you're gotta actually step into domain that's set up for you and actually implement the missing code so",
    "start": "284839",
    "end": "292189"
  },
  {
    "text": "once that done you know the the tests will then pass and then finally and this",
    "start": "292189",
    "end": "297529"
  },
  {
    "text": "is a you know type of I guess cada I refer to sandbox ekkada where basically you may have tests but what you really",
    "start": "297529",
    "end": "305360"
  },
  {
    "text": "have is a project that's set up with the structure maybe like the maven dependencies pulling in the frameworks",
    "start": "305360",
    "end": "310429"
  },
  {
    "text": "that you need so you can actually step in and just kind of experiment on your own so it's really freeform kind of like",
    "start": "310429",
    "end": "316939"
  },
  {
    "text": "Bruce Lee style you're gonna mix whatever code you want and you know do what you need so it's less structure but",
    "start": "316939",
    "end": "323179"
  },
  {
    "text": "you know at least set up so you're not starting from the how do I start setting up my projects it's already set up for you so I'm going to propose to all of",
    "start": "323179",
    "end": "333829"
  },
  {
    "text": "you this idea and I earnestly believe in it the best way to learn something is to",
    "start": "333829",
    "end": "339019"
  },
  {
    "text": "teach it right I'm gonna also propose like the best way to learn something is",
    "start": "339019",
    "end": "344779"
  },
  {
    "text": "to actually do it through hands-on exercises right I can sit here and talk at you and we're gonna do live demos and",
    "start": "344779",
    "end": "350509"
  },
  {
    "text": "show you stuff but honestly the best way for you to learn what I'm showing you is to actually jump in and try it on your",
    "start": "350509",
    "end": "355519"
  },
  {
    "text": "own right and that's when you're actually going to get the deeper learning getting back to the teaching aspect if you have to teach someone",
    "start": "355519",
    "end": "361909"
  },
  {
    "text": "something you're gonna actually have to spend more time learning it because you're gonna have to think about like how do I actually explain this to",
    "start": "361909",
    "end": "366979"
  },
  {
    "text": "someone else right and maybe I'm gonna have to think more about maybe comments I'll even leave in the code and stuff so",
    "start": "366979",
    "end": "373249"
  },
  {
    "text": "I encourage you to you know teach yourself first and then pay it forward and you know share that learning that",
    "start": "373249",
    "end": "378709"
  },
  {
    "text": "you have with others and I think many of you are probably coming out to this conference today you'll probably go back to your companies and blog about what",
    "start": "378709",
    "end": "384319"
  },
  {
    "text": "you learned and hopefully share it you know similarly like you can share you know code examples through Coty's with",
    "start": "384319",
    "end": "389389"
  },
  {
    "text": "others so now I'm gonna do is give you the secret sauce this is how you build a",
    "start": "389389",
    "end": "395599"
  },
  {
    "text": "kata this is what I've used for you know the last I guess ten years that I've been investing time and energy and to",
    "start": "395599",
    "end": "402919"
  },
  {
    "text": "implement Coty's so first thing is identify what you want to learn it could be a library",
    "start": "402919",
    "end": "408229"
  },
  {
    "text": "feature language feature different programming language then you have to design a problem that you want to solve",
    "start": "408229",
    "end": "414079"
  },
  {
    "text": "that will help you use the thing that you want to learn then you write tests right demonstrating that the thing you",
    "start": "414079",
    "end": "420289"
  },
  {
    "text": "learned you've actually you know got into work you implement all of the code you know to solve that problem then you",
    "start": "420289",
    "end": "428749"
  },
  {
    "text": "go back put in some helpful comments and the helpful comments are intended if you want this you know kata that you're",
    "start": "428749",
    "end": "434179"
  },
  {
    "text": "developing to be used by others without you walking them through it with slides where they can do it on their own the",
    "start": "434179",
    "end": "440089"
  },
  {
    "text": "comments are gonna be helpful to them and then the final step is delete the code that you want to leave the",
    "start": "440089",
    "end": "445610"
  },
  {
    "text": "placeholder for someone to actually go back and implement right and it's interesting the code kata is that we're gonna be showing you today I deleted the",
    "start": "445610",
    "end": "452539"
  },
  {
    "text": "solutions and I didn't actually put the solutions anywhere so every time I have to sit down and do the kata is I'm doing",
    "start": "452539",
    "end": "457819"
  },
  {
    "text": "it brand new I have nothing to refer to which again keeps enforcing the learning",
    "start": "457819",
    "end": "463189"
  },
  {
    "text": "for myself so you do these six steps you've got a kata this is all it takes so once you've got the kata you know",
    "start": "463189",
    "end": "470659"
  },
  {
    "text": "then you can go through you know refactoring steps to actually make it better whether it's your factoring the comments you know refactoring the code",
    "start": "470659",
    "end": "476089"
  },
  {
    "text": "examples trying out here for things getting feedback from people as they try it and with that I'm going to hand it",
    "start": "476089",
    "end": "484009"
  },
  {
    "text": "over to Aditi and I'll just quickly say before DT I was talking we took code Coty's that I checked in to github last",
    "start": "484009",
    "end": "492049"
  },
  {
    "text": "year they were checked in in Java 8 and you're all here probably thinking like hey I want to learn Java 9 and Jama 10",
    "start": "492049",
    "end": "497599"
  },
  {
    "text": "features we're going to be showing you these features we're not going to talk a lot about them you know but you're going",
    "start": "497599",
    "end": "502610"
  },
  {
    "text": "to see them use what we did was we took the Coty's that we have and it's about I think it's around like 15 to 18 thousand",
    "start": "502610",
    "end": "508099"
  },
  {
    "text": "lines of code in the caucus total I sprinkled Java 9 Java 10 features",
    "start": "508099",
    "end": "513289"
  },
  {
    "text": "anywhere I could they're all over the place kind of without you know too much thought because it was a way for to help",
    "start": "513289",
    "end": "519110"
  },
  {
    "text": "myself learn these things so I'm gonna hand it over to DT now",
    "start": "519110",
    "end": "524529"
  },
  {
    "text": "out of the six cartels we are going to cover four cartons the first one is the",
    "start": "527520",
    "end": "532750"
  },
  {
    "text": "Java Lambda cotta marry practice and learn Java lambda the the whole intent is to learn Java lambdas syntax and also",
    "start": "532750",
    "end": "540670"
  },
  {
    "text": "through iteration know that we need name types for Java lambdas the second Carta",
    "start": "540670",
    "end": "545860"
  },
  {
    "text": "which means the second Carta which we have is deck of cards Carta",
    "start": "545860",
    "end": "552910"
  },
  {
    "text": "over here we are going to compare five different Eclipse sorry not Eclipse collection but we are",
    "start": "552910",
    "end": "558310"
  },
  {
    "text": "going to compare five different collections one of them is Eclipse collections Java streams guava Apache",
    "start": "558310",
    "end": "564070"
  },
  {
    "text": "Commons and voila then we have the donut kata where we are going to learn",
    "start": "564070",
    "end": "571600"
  },
  {
    "text": "advanced Eclipse collection api's like flat collect top occurrences found by calendar kata is where we see Java date",
    "start": "571600",
    "end": "578830"
  },
  {
    "text": "and time libraries 310 extra libraries the Cole point kata is basically deals",
    "start": "578830",
    "end": "585279"
  },
  {
    "text": "with files and primitives and Jaime Jakarta is the is more related to",
    "start": "585279",
    "end": "590500"
  },
  {
    "text": "performance benchmarking we have all the cars checked into our github account in",
    "start": "590500",
    "end": "596079"
  },
  {
    "text": "for the vny Milan alright the first guitar so this is the refactor the code",
    "start": "596079",
    "end": "602140"
  },
  {
    "text": "style of kata which Don has covered when he said described various cutters so we",
    "start": "602140",
    "end": "609790"
  },
  {
    "text": "are going to test it's a hands-on kata so we are going to run the test first so",
    "start": "609790",
    "end": "620680"
  },
  {
    "text": "what we see is we have all our tests passing and as you mentioned that we have replaced all the Java 8 features",
    "start": "620680",
    "end": "627579"
  },
  {
    "text": "wherever we could with the Java 9 and Java 10 features so var is one of that list dot off is one of that so the first",
    "start": "627579",
    "end": "637630"
  },
  {
    "text": "two to which we have over here is can you remove the final keyword from the variable below if if you have ever",
    "start": "637630",
    "end": "645910"
  },
  {
    "text": "written anonymous inner classes prior to Java 8 we always needed to refer the",
    "start": "645910",
    "end": "651520"
  },
  {
    "text": "variables as final whichever we had to use in the anonymous in a class so we have reference result",
    "start": "651520",
    "end": "657950"
  },
  {
    "text": "variable over here but now we don't really need to mention final because now",
    "start": "657950",
    "end": "663470"
  },
  {
    "text": "it becomes effectively final it's it's the compiler knows that it's a final variable so once it is initialized and",
    "start": "663470",
    "end": "670340"
  },
  {
    "text": "used inside anonymous in a class they become effectively final the second to",
    "start": "670340",
    "end": "675620"
  },
  {
    "text": "do which we have here is can can we convert anonymous in a class to a lambda",
    "start": "675620",
    "end": "681040"
  },
  {
    "text": "so what we are going to do here is replace this bar with consumer string",
    "start": "681040",
    "end": "688670"
  },
  {
    "text": "and use our IntelliJ to convert it into lambda so the thing to notice here is we",
    "start": "688670",
    "end": "695420"
  },
  {
    "text": "could not use war as it is with the lambdas because lambdas doesn't have a",
    "start": "695420",
    "end": "700730"
  },
  {
    "text": "type and lambdas need a type so if we see here the code does not compile it",
    "start": "700730",
    "end": "709910"
  },
  {
    "text": "says var is not allowed with lambda expressions one way to get around this problem is to typecast it we don't",
    "start": "709910",
    "end": "716990"
  },
  {
    "text": "recommend this but we can do it so that's the example for that we'll cover",
    "start": "716990",
    "end": "725630"
  },
  {
    "text": "one more example here which is a function example same we have to convert",
    "start": "725630",
    "end": "731510"
  },
  {
    "text": "the anonymous inner class into the lambda we pretty much do the same thing",
    "start": "731510",
    "end": "739040"
  },
  {
    "text": "replace it with lambda and then the second if you notice we have it also tells us to convert it to a method",
    "start": "739040",
    "end": "745010"
  },
  {
    "text": "reference so this is the syntax for method reference which is string to",
    "start": "745010",
    "end": "751880"
  },
  {
    "text": "uppercase this method is directly on the string class so we don't really need the lambda expression here the tester person",
    "start": "751880",
    "end": "758510"
  },
  {
    "text": "so time to run the test",
    "start": "758510",
    "end": "762730"
  },
  {
    "text": "and we have a passing test like I said before we sprinkled a you know VAR all",
    "start": "763520",
    "end": "771750"
  },
  {
    "text": "over the place and there is this unexpected you know thing in the in this particular kata we're replacing the",
    "start": "771750",
    "end": "779400"
  },
  {
    "text": "anonymous inner class type with var have this knock-on effect of making it more difficult than to refactor to a lambda",
    "start": "779400",
    "end": "784860"
  },
  {
    "text": "right so far works the anonymous inner classes doesn't work with lambdas yep so",
    "start": "784860",
    "end": "790140"
  },
  {
    "text": "they're on Java 8 and Java 9 features in that kata which we haven't covered everything but it's present there",
    "start": "790140",
    "end": "795950"
  },
  {
    "text": "functional interface lambda method reference in range closed collectors not",
    "start": "795950",
    "end": "801150"
  },
  {
    "text": "to less stream off then the JA 9 features we saw static off so prior to Java 9 we had arrays dot as list which",
    "start": "801150",
    "end": "808350"
  },
  {
    "text": "is replaced with the list offset and then the other methods were introduced set off map of Java 10 features we saw",
    "start": "808350",
    "end": "815760"
  },
  {
    "text": "var it does not work with lambda expressions without casting so the whole idea with my right is it moved the type",
    "start": "815760",
    "end": "822810"
  },
  {
    "text": "information from left to right so with that we need to have the discipline to have more descriptive",
    "start": "822810",
    "end": "829560"
  },
  {
    "text": "variable names and there's a very highly recommended link frost to what marks",
    "start": "829560",
    "end": "836790"
  },
  {
    "text": "style guide for local weight variable type inference it's it's a good read so",
    "start": "836790",
    "end": "842940"
  },
  {
    "text": "I would highly recommend it to be read all right so now we have the next kata",
    "start": "842940",
    "end": "849120"
  },
  {
    "text": "and that's the deck of card kata so this is the third type of kata which John",
    "start": "849120",
    "end": "856020"
  },
  {
    "text": "described the third scatter style it's a fixed fixed the code kata and we are going to do live examples for two of",
    "start": "856020",
    "end": "862170"
  },
  {
    "text": "them that's Java streams and Eclipse collection so the whole idea is we have the tests which are running but failing",
    "start": "862170",
    "end": "868470"
  },
  {
    "text": "so we need to fix the code the domain objects which we have here is the card",
    "start": "868470",
    "end": "873660"
  },
  {
    "text": "which is nothing but a rank and a suit it's a combination of a rank and a suit it's like ace through King and Spade",
    "start": "873660",
    "end": "880950"
  },
  {
    "text": "through clamps then God is implements a comparable interface and we have deck of",
    "start": "880950",
    "end": "887010"
  },
  {
    "text": "card kata over here that's an external class which uses this domain objects",
    "start": "887010",
    "end": "892970"
  },
  {
    "text": "so every time we start with the guitar we always try to run the tests first",
    "start": "903700",
    "end": "909630"
  },
  {
    "text": "oh sorry",
    "start": "909630",
    "end": "913860"
  },
  {
    "text": "all right so all of our tests are failing right now so we'll start the first test which we'll start over here",
    "start": "918110",
    "end": "924810"
  },
  {
    "text": "is all cards so if you see here the expected is we need the ace of cards we",
    "start": "924810",
    "end": "930930"
  },
  {
    "text": "need we are printing out all the cards over here in a sorted order and but the",
    "start": "930930",
    "end": "937079"
  },
  {
    "text": "actual is null and the reason it is null",
    "start": "937079",
    "end": "942449"
  },
  {
    "text": "is because we haven't really initialized our cards over here as of yet so one",
    "start": "942449",
    "end": "948300"
  },
  {
    "text": "thing to notice here is cards it is a type of a list and we have caused by stood which is type of map of suit and a",
    "start": "948300",
    "end": "956009"
  },
  {
    "text": "list of cards so we'll start with initializing cards so stream cards so if",
    "start": "956009",
    "end": "966540"
  },
  {
    "text": "we see this method so this is implemented on the cards class and it is",
    "start": "966540",
    "end": "972000"
  },
  {
    "text": "nothing but our Cartesian product which returns which is of which is a flat map",
    "start": "972000",
    "end": "979170"
  },
  {
    "text": "of a map of two enums that is the rank and suit and so that's how we are",
    "start": "979170",
    "end": "984269"
  },
  {
    "text": "forming our new card the next",
    "start": "984269",
    "end": "989279"
  },
  {
    "text": "requirement that we had is that we want the car to be in the sorted order and",
    "start": "989279",
    "end": "995569"
  },
  {
    "text": "the most important requirement is we want it to be immutable because we don't want to really lose any cards anybody",
    "start": "995569",
    "end": "1002149"
  },
  {
    "text": "have kids you're getting a deck of cards and got them all back back make the deck",
    "start": "1002149",
    "end": "1007610"
  },
  {
    "text": "of cards immutable yes make it immutable so to unmodifiable",
    "start": "1007610",
    "end": "1013160"
  },
  {
    "text": "list this method was introduced in Java 10 and that's what we are going to use",
    "start": "1013160",
    "end": "1018980"
  },
  {
    "text": "here now if we run our tests",
    "start": "1018980",
    "end": "1024130"
  },
  {
    "text": "so we have all cards just passing and cards immutable passing so next test",
    "start": "1025490",
    "end": "1031740"
  },
  {
    "text": "which we are going to code here is caused by soot and caused by soot immutable which is this so if you know",
    "start": "1031740",
    "end": "1044430"
  },
  {
    "text": "as mentioned earlier we have caused by soot which is map of soot and list of cards what we are doing here is we are",
    "start": "1044430",
    "end": "1054510"
  },
  {
    "text": "collecting the card and we are going to do a grouping on cards by soot and again",
    "start": "1054510",
    "end": "1072420"
  },
  {
    "text": "we are going to collect the list to unmodifiable list",
    "start": "1072420",
    "end": "1077510"
  },
  {
    "text": "so if I run my test now what do you think will happen what the best pass",
    "start": "1077940",
    "end": "1083940"
  },
  {
    "text": "it's a little person just Christopher",
    "start": "1083940",
    "end": "1091009"
  },
  {
    "text": "now it didn't the reason that happened was because even though we have our list",
    "start": "1094310",
    "end": "1100500"
  },
  {
    "text": "as immutable but our map is still mutable so we need our map to be",
    "start": "1100500",
    "end": "1110160"
  },
  {
    "text": "immutable so again with Java 10 we have a new API copy off which converts the",
    "start": "1110160",
    "end": "1119370"
  },
  {
    "text": "map to a mutable map so now we have all",
    "start": "1119370",
    "end": "1128910"
  },
  {
    "text": "our four tests passing the next test which we are going to deal here is by",
    "start": "1128910",
    "end": "1134250"
  },
  {
    "text": "counts by rank and counts by suit so let's go back to fix the code all right",
    "start": "1134250",
    "end": "1145500"
  },
  {
    "text": "so now we need to count by suit so what we do is this dot cards dot stream",
    "start": "1145500",
    "end": "1151170"
  },
  {
    "text": "because we are dealing with Java eight we need stream collect collectors dot",
    "start": "1151170",
    "end": "1157940"
  },
  {
    "text": "grouping by God by suit",
    "start": "1157940",
    "end": "1165649"
  },
  {
    "text": "so the one thing which we should notice here is the map it returns map of suit",
    "start": "1169190",
    "end": "1174660"
  },
  {
    "text": "and long so basically it would be hearts diamonds paint clubs and then the count",
    "start": "1174660",
    "end": "1180710"
  },
  {
    "text": "and we are going to do the same sorry",
    "start": "1180710",
    "end": "1188300"
  },
  {
    "text": "we are going to do the same thing for count by rank and replace this with rank",
    "start": "1188300",
    "end": "1198500"
  },
  {
    "text": "good color style practice through repetition so right now",
    "start": "1198530",
    "end": "1205890"
  },
  {
    "text": "we have six of our tests passing so this was more or less the Java stream kata so",
    "start": "1205890",
    "end": "1213780"
  },
  {
    "text": "as we mentioned earlier this kata it contains five collections like Apache",
    "start": "1213780",
    "end": "1219780"
  },
  {
    "text": "Commons Eclipse collection Google guava JDK and Bower so the next one which we",
    "start": "1219780",
    "end": "1226560"
  },
  {
    "text": "are going to do is the Eclipse collection style of kata so the cards",
    "start": "1226560",
    "end": "1233490"
  },
  {
    "text": "over here is the type of immutable list and the cards by suit is immutable list multi map we are going to start",
    "start": "1233490",
    "end": "1245600"
  },
  {
    "text": "initializing our cards instance variables card lazy cards so one thing",
    "start": "1245600",
    "end": "1251760"
  },
  {
    "text": "to notice here the lazy card is method again on card but we have the Cartesian",
    "start": "1251760",
    "end": "1258660"
  },
  {
    "text": "product which is called on the sets so sets belongs to mu-2 assets belongs to Eclipse collection and it returns us the",
    "start": "1258660",
    "end": "1266400"
  },
  {
    "text": "Cartesian product in this case of Franken suit by creating a new card and it returns the lazy I tribal on that the",
    "start": "1266400",
    "end": "1277350"
  },
  {
    "text": "next requirement was that the list has to be sorted the sorted list returns as the mutable list and we need to convert",
    "start": "1277350",
    "end": "1283650"
  },
  {
    "text": "it again to immutable list we so we all we do is to immutable and for our cards",
    "start": "1283650",
    "end": "1290610"
  },
  {
    "text": "by suit all we have to do is",
    "start": "1290610",
    "end": "1295850"
  },
  {
    "text": "goodbye that's it so the group my method",
    "start": "1296610",
    "end": "1302470"
  },
  {
    "text": "would return as immutable list of multi map so let's try to run our tests now",
    "start": "1302470",
    "end": "1309960"
  },
  {
    "text": "and this particular caught as well to notice is like each of the tests for the different frameworks always use one of",
    "start": "1320330",
    "end": "1326880"
  },
  {
    "text": "the classes that's fully implemented which is the JDK imperative so this is implemented completely really with four",
    "start": "1326880",
    "end": "1332820"
  },
  {
    "text": "loops you know regular you know pre Java 8 you know style uh you know imperative programming you can always use that as a",
    "start": "1332820",
    "end": "1339390"
  },
  {
    "text": "reference yeah sorry so also one thing to notice here is the eclipse test of Eclipse collection deck",
    "start": "1339390",
    "end": "1346800"
  },
  {
    "text": "of cards test kata has the same test cases which we had for the jdk deck of",
    "start": "1346800",
    "end": "1352110"
  },
  {
    "text": "cards a set of kata and we have our 4 tests passing so the next one which we",
    "start": "1352110",
    "end": "1357960"
  },
  {
    "text": "are going to cover here is count by suit and count by rank tests so what we are",
    "start": "1357960",
    "end": "1368790"
  },
  {
    "text": "doing is here is just counting by suit and that's all we need to do for the",
    "start": "1368790",
    "end": "1373860"
  },
  {
    "text": "Eclipse collection style of kata",
    "start": "1373860",
    "end": "1377179"
  },
  {
    "text": "so the thing to notice here is we implemented two different collections",
    "start": "1386110",
    "end": "1391820"
  },
  {
    "text": "for the same test case scenarios and I mean it's it's not similar but it's",
    "start": "1391820",
    "end": "1398990"
  },
  {
    "text": "still the same concept so the things",
    "start": "1398990",
    "end": "1407600"
  },
  {
    "text": "that we learned in the Java deck of cards kata Java stream the stream Java a",
    "start": "1407600",
    "end": "1413270"
  },
  {
    "text": "twirl methods which we had was sorted collected flat map map then we had",
    "start": "1413270",
    "end": "1419300"
  },
  {
    "text": "collectors grouping by and counting for the Java ten features we saw our map copy of collectors to unmodifiable list",
    "start": "1419300",
    "end": "1427570"
  },
  {
    "text": "for the Eclipse collection lessons we saw that sets have Cartesian product lazy-eye triple returns we have the two",
    "start": "1427570",
    "end": "1435050"
  },
  {
    "text": "sorted lists on lazy-eye total two converter to convert immutable list to immutable we have two immutable and",
    "start": "1435050",
    "end": "1441230"
  },
  {
    "text": "immutable list has group by and found by methods so this particular caller came",
    "start": "1441230",
    "end": "1447080"
  },
  {
    "text": "from a talk that myself and two other gentleman Nikhil Nevada car and leo lima",
    "start": "1447080",
    "end": "1453200"
  },
  {
    "text": "have given now I think probably like 10 to 15 times it's called collections compare and remember what I told you",
    "start": "1453200",
    "end": "1459320"
  },
  {
    "text": "about building a kata right find some problems to solve go through you know you know writing the tests adding",
    "start": "1459320",
    "end": "1466190"
  },
  {
    "text": "comments and all this stuff and finally delete the solution so when we gave the talk the talk actually has all of the solutions in it then I went",
    "start": "1466190",
    "end": "1473210"
  },
  {
    "text": "back and turned it into a kata just to leave the dissolution so it's now out there for people to experiment on their own instead of just reading in a slides",
    "start": "1473210",
    "end": "1479930"
  },
  {
    "text": "in a PowerPoint thank you",
    "start": "1479930",
    "end": "1485800"
  },
  {
    "text": "okay you can't make out that picture since I can barely make it out but I",
    "start": "1486330",
    "end": "1491500"
  },
  {
    "text": "will explain it so one of my favorite Coty's the donut cata who likes Donuts I like donuts usually when I teach goddess",
    "start": "1491500",
    "end": "1499750"
  },
  {
    "text": "I bring Donuts today I didn't bring Donuts I apologize but I brought a donut kata it's the next best thing anyways",
    "start": "1499750",
    "end": "1508180"
  },
  {
    "text": "it's the same style as the deck of cards it's fix the code so we're gonna have some tests that fail we're gonna get",
    "start": "1508180",
    "end": "1513190"
  },
  {
    "text": "them in the past we're going to implement my favorite test to pass which is get top donuts we're gonna find out",
    "start": "1513190",
    "end": "1519940"
  },
  {
    "text": "what you know based on thousands of you know polls I've done in classes I've",
    "start": "1519940",
    "end": "1525010"
  },
  {
    "text": "taught I'm just kidding I can tell that many but I've collected stats of like what people's favorite donuts are and we",
    "start": "1525010",
    "end": "1530680"
  },
  {
    "text": "can see what that is so in the domain for the donut kata it's somewhat you know rich what you have is a donut shop",
    "start": "1530680",
    "end": "1537300"
  },
  {
    "text": "you have customers who place orders and they get deliveries and the deliveries they get are of donuts a donut has a",
    "start": "1537300",
    "end": "1544480"
  },
  {
    "text": "price which is assigned based on the number of donuts that you buy right because if you buy one donut it's one",
    "start": "1544480",
    "end": "1549550"
  },
  {
    "text": "price if you buy two three half a dozen dozen you get different prices so there's a simple pricing",
    "start": "1549550",
    "end": "1555040"
  },
  {
    "text": "algorithm then there to assign the price based on how many are ordered and then it's a combination donut has price and",
    "start": "1555040",
    "end": "1560650"
  },
  {
    "text": "donut types so you can see the donut types that we have here Boston cream glaze and old-fashioned chocolate glazed vanilla frosted pumpkin which is you",
    "start": "1560650",
    "end": "1568150"
  },
  {
    "text": "know only shows up usually in like this wall blueberry jelly and then bavarian",
    "start": "1568150",
    "end": "1573220"
  },
  {
    "text": "cream so if your favorite isn't there i apologize but we shall move on so let me",
    "start": "1573220",
    "end": "1579160"
  },
  {
    "text": "go to the code so we go to the donut",
    "start": "1579160",
    "end": "1585940"
  },
  {
    "text": "cutter now with the donut kata and this is kind of interesting when i implemented the donut kata i said not",
    "start": "1585940",
    "end": "1591640"
  },
  {
    "text": "only do i want to you know teach myself advanced eclipse collections api's because I can always use how blending",
    "start": "1591640",
    "end": "1596710"
  },
  {
    "text": "those I also want to learn Kotlin so the kata is available in Catalan if you want",
    "start": "1596710",
    "end": "1601960"
  },
  {
    "text": "and you know Kotlin is actually using eclipse collections underneath but it's you know you're able to use a you know",
    "start": "1601960",
    "end": "1607060"
  },
  {
    "text": "Kotlin lambdas and all the neat features of Collin I tried to use as many features as I could because once again I'm teaching myself you know Kotlin so",
    "start": "1607060",
    "end": "1614050"
  },
  {
    "text": "so that's out there as well there are two versions of the donut kata I just cloned the Java ate one and you",
    "start": "1614050",
    "end": "1619739"
  },
  {
    "text": "know created a java 10-1 that's the one we'll we'll take a look at so in the",
    "start": "1619739",
    "end": "1625349"
  },
  {
    "text": "kata you can see and it actually has a little bit of the Java time library in here as well so deliveries have a date",
    "start": "1625349",
    "end": "1631759"
  },
  {
    "text": "in time and we actually need to find you know all the deliveries across all dates",
    "start": "1631759",
    "end": "1636899"
  },
  {
    "text": "to get the top Donuts so you can see the set up we make donuts there's an inventory Donuts when you run out of",
    "start": "1636899",
    "end": "1643019"
  },
  {
    "text": "Donuts then it's time to make the donuts right make more donuts awesome um you",
    "start": "1643019",
    "end": "1648899"
  },
  {
    "text": "can see once again sprinkled var liberally throughout the code here to see how it made me feel about you know",
    "start": "1648899",
    "end": "1654599"
  },
  {
    "text": "the names that I chosen without var and what we're gonna do is go to get top",
    "start": "1654599",
    "end": "1660029"
  },
  {
    "text": "donut so you can see anybody agree with this Boston cream and glazed two top",
    "start": "1660029",
    "end": "1665759"
  },
  {
    "text": "Donuts Tony Boston cream right yeah see that I knew it it's a proven through statistics okay",
    "start": "1665759",
    "end": "1677909"
  },
  {
    "text": "so looking at top donuts so we're on the donut shop now and I should of course",
    "start": "1677909",
    "end": "1683849"
  },
  {
    "text": "run the test first and it should fail",
    "start": "1683849",
    "end": "1688549"
  },
  {
    "text": "yeah a failure means we got work to do alright that's good at work okay so some",
    "start": "1690409",
    "end": "1697679"
  },
  {
    "text": "helpful hints in here him we want to look at the domain and use deliveries which have collections of ordered Donuts",
    "start": "1697679",
    "end": "1702959"
  },
  {
    "text": "you will need to flatten the donuts nobody likes flat donuts though right like them you know especially if it's a",
    "start": "1702959",
    "end": "1709169"
  },
  {
    "text": "Boston cream you're gonna get cream all over the place collect they're doing the types and then bag has a useful method called top",
    "start": "1709169",
    "end": "1715499"
  },
  {
    "text": "occurrences I won't see if we flatten the donuts from our deliveries so we'll do this stop deliveries and you can see",
    "start": "1715499",
    "end": "1720749"
  },
  {
    "text": "like on on donut shop it's got four different collections it's got a bag of",
    "start": "1720749",
    "end": "1727619"
  },
  {
    "text": "donuts every like the bag of donuts right sorry my only person who's ever",
    "start": "1727619",
    "end": "1733079"
  },
  {
    "text": "heard of Joey bag of donuts instead of the real thing anyways orders customers",
    "start": "1733079",
    "end": "1738599"
  },
  {
    "text": "deliveries yes I'm here all night and so we're gonna use deliveries",
    "start": "1738599",
    "end": "1747079"
  },
  {
    "text": "delivery's dot flat collect we're going",
    "start": "1748890",
    "end": "1754030"
  },
  {
    "text": "to delivery get donuts okay so now we've",
    "start": "1754030",
    "end": "1759910"
  },
  {
    "text": "got a flattened collection of donuts and remember donut has a price and a type now I can either collect the type out of",
    "start": "1759910",
    "end": "1769390"
  },
  {
    "text": "here and then do something with that so one choice I have is I can collect",
    "start": "1769390",
    "end": "1774780"
  },
  {
    "text": "donut and get the type and this will actually give me a bag I'm sorry that",
    "start": "1774780",
    "end": "1780970"
  },
  {
    "text": "won't give me a bag that'll still be a collection but I can convert that to a bag let me put this stack together an on",
    "start": "1780970",
    "end": "1794770"
  },
  {
    "text": "bag as it says here in the comment there's a useful method on bag called top occurrences and which is the",
    "start": "1794770",
    "end": "1801190"
  },
  {
    "text": "parameter were passed in here so let's say fire test pass our test passes now",
    "start": "1801190",
    "end": "1811980"
  },
  {
    "text": "that was helpful if you knew there was a method collect and there's a hint in here that there is a method call collect",
    "start": "1811980",
    "end": "1817860"
  },
  {
    "text": "but there is another method which makes this somewhat simpler if you have a",
    "start": "1817860",
    "end": "1822940"
  },
  {
    "text": "collection of donuts and what you need to really do is we need to count the donuts by their type right so let's",
    "start": "1822940",
    "end": "1828820"
  },
  {
    "text": "count the donuts good type",
    "start": "1828820",
    "end": "1837600"
  },
  {
    "text": "yay cop doughnuts passing okay I'm going",
    "start": "1842200",
    "end": "1849410"
  },
  {
    "text": "to go quickly the interest of time so in here in this particular kata was set up",
    "start": "1849410",
    "end": "1855440"
  },
  {
    "text": "to learn advanced Eclipse collections API so we got to see what's black collect count by and top occurrences",
    "start": "1855440",
    "end": "1862330"
  },
  {
    "text": "what I'm going to now do is go quickly to the calendar kata and similarly I",
    "start": "1862330",
    "end": "1875330"
  },
  {
    "text": "don't have a Kotlin version of the calendar kata you can go and create your own if you want but I do have as a job a",
    "start": "1875330",
    "end": "1880340"
  },
  {
    "text": "10 min Java 8 version so we'll start with a Java 10 and what we're gonna do with the calendar kata so in the",
    "start": "1880340",
    "end": "1886340"
  },
  {
    "text": "calendar what I wanted to teach myself I wanted to teach myself the Java time library because obviously like I'm not",
    "start": "1886340",
    "end": "1892250"
  },
  {
    "text": "gonna learn that much probably teaching myself eclipse collections over never again maybe teaching others but you know",
    "start": "1892250",
    "end": "1897830"
  },
  {
    "text": "I hadn't really used the the new Java time library and anger I'd used joda-time you know back in the day but you know I wanted to sit down and teach",
    "start": "1897830",
    "end": "1904400"
  },
  {
    "text": "myself about the UK and I thought like hey let me create a calendar and I'll set up meetings on it right so I used",
    "start": "1904400",
    "end": "1909410"
  },
  {
    "text": "kind of outlook as an inspiration for my domain so what we have as a calendar has",
    "start": "1909410",
    "end": "1914870"
  },
  {
    "text": "basically a mutable sorted set multi map of meetings so basically meetings are",
    "start": "1914870",
    "end": "1921050"
  },
  {
    "text": "organized by date and within that it's a sorted set of meetings and then what I wanted to do is actually have different",
    "start": "1921050",
    "end": "1926960"
  },
  {
    "text": "views on the calendar I simply like an Outlook we all love Outlook right ok no",
    "start": "1926960",
    "end": "1935330"
  },
  {
    "text": "nobody's buying on that one ok so we had a work week view a full week view and the full month view so you know once",
    "start": "1935330",
    "end": "1943430"
  },
  {
    "text": "again similar to Outlook in Outlook if you go into your calendar you get a work week view a full week view multiple month view so that's said we'll go to the code",
    "start": "1943430",
    "end": "1951410"
  },
  {
    "text": "we're going to implement one mating or sorry one method called has overlapping meeting because who likes overlapping",
    "start": "1951410",
    "end": "1957650"
  },
  {
    "text": "meetings my calendar does not allow overlapping meetings but first you have",
    "start": "1957650",
    "end": "1963020"
  },
  {
    "text": "to implement this method in order to enforce that so we will implement has overlapping meetings so we're gonna check the calendar has overlapping",
    "start": "1963020",
    "end": "1969170"
  },
  {
    "text": "meeting takes you know a local date of July 7th 2000",
    "start": "1969170",
    "end": "1974690"
  },
  {
    "text": "t naneun who likes meetings at noon lunch lunch meeting is the London that's",
    "start": "1974690",
    "end": "1981409"
  },
  {
    "text": "the meeting at name that we have right okay good and then we you know have a duration like I so we could have a",
    "start": "1981409",
    "end": "1988009"
  },
  {
    "text": "longer lunch meeting if we wanted so anyways we're gonna step in house overlapping meeting does absolutely nothing right now and this is what we're",
    "start": "1988009",
    "end": "1995899"
  },
  {
    "text": "gonna get to learn some things about the the Java time API so we can step in and look and you know we've got useful links",
    "start": "1995899",
    "end": "2001720"
  },
  {
    "text": "here we're getting a date a start time in the duration and if I'm looking and overlapping meeting I'm gonna have to",
    "start": "2001720",
    "end": "2008049"
  },
  {
    "text": "see if the start time or end time fall into another meetings you know time zone not meaning time zone but the range of",
    "start": "2008049",
    "end": "2015039"
  },
  {
    "text": "the time and there's a useful class in three ten extra so now only am I using",
    "start": "2015039",
    "end": "2020349"
  },
  {
    "text": "the Java time library there's another library called three ten extra which is basically everything that didn't make it into the Java time library so I think",
    "start": "2020349",
    "end": "2026859"
  },
  {
    "text": "it's also run by Stephen Colburn great little library has things like interval which are basically two instants in time",
    "start": "2026859",
    "end": "2034259"
  },
  {
    "text": "and also has a local date range and some other useful stuff so what I'm gonna do",
    "start": "2034259",
    "end": "2039309"
  },
  {
    "text": "is quickly take interval and I'm gonna actually get to use a Java ten feature in front of everybody today in a live",
    "start": "2039309",
    "end": "2045099"
  },
  {
    "text": "demo if I can find my calendar there we go I'm gonna put the interval",
    "start": "2045099",
    "end": "2051368"
  },
  {
    "text": "here and this is one of the places where I don't mind using var if it's a singular object I can just call it var",
    "start": "2051369",
    "end": "2057368"
  },
  {
    "text": "interval it's kind of self descriptive I don't need to put the type again now I'm",
    "start": "2057369",
    "end": "2062888"
  },
  {
    "text": "going to create an interval for this date this start time in this duration so interval has a useful of constructor",
    "start": "2062889",
    "end": "2070358"
  },
  {
    "text": "which basically takes an instant in a",
    "start": "2070359",
    "end": "2075579"
  },
  {
    "text": "duration so thankfully on this class I have a time zone ID and we've passed in",
    "start": "2075579",
    "end": "2082658"
  },
  {
    "text": "the duration so now I've got the interval that I want to test with and what I can do is I can get the meetings",
    "start": "2082659",
    "end": "2090878"
  },
  {
    "text": "for date which is once again helpful hint here so tell me to do that because",
    "start": "2090879",
    "end": "2096128"
  },
  {
    "text": "otherwise I'd forget and I want to see if there are any meetings that satisfy",
    "start": "2096129",
    "end": "2102059"
  },
  {
    "text": "overlapping with this interval so maybe I have a useful method on meeting called",
    "start": "2102059",
    "end": "2107319"
  },
  {
    "text": "meeting overlaps and we're using the any satisfy with method on Eclipse collections which",
    "start": "2107319",
    "end": "2115400"
  },
  {
    "text": "this is actually a sorted set iterable coming out of this and he satisfied with takes it to two argument predicate and",
    "start": "2115400",
    "end": "2123410"
  },
  {
    "text": "what I can do is the first arguments going to be the meeting the second argument is going to be the interval that I pass in and if you look at what",
    "start": "2123410",
    "end": "2130460"
  },
  {
    "text": "meeting overlaps does this is on the meeting class takes an interval as a parameter and will return true if this",
    "start": "2130460",
    "end": "2137720"
  },
  {
    "text": "method from the interval class a useful method from the three ten extra library so you can see they've implemented",
    "start": "2137720",
    "end": "2143270"
  },
  {
    "text": "overlaps for you so if you need to do any time you know comparisons this is extremely useful you don't have to write",
    "start": "2143270",
    "end": "2149090"
  },
  {
    "text": "this yourself so with that then I should be able to go and run the test and",
    "start": "2149090",
    "end": "2156810"
  },
  {
    "text": "[Music]",
    "start": "2156810",
    "end": "2159940"
  },
  {
    "text": "and it passes okay so what do we learn we're gonna show that you can learn more",
    "start": "2163930",
    "end": "2170930"
  },
  {
    "text": "than who we actually did learn here but we learned a bunch of this so we gots the intro of local date range we didn't",
    "start": "2170930",
    "end": "2176600"
  },
  {
    "text": "see there's another method if we have some time I could go back and implement but we're not gonna do for now you've gotten to see like local date you if you",
    "start": "2176600",
    "end": "2184130"
  },
  {
    "text": "do the next method which is testing with the either the work week view or full week view you'd see methods like within",
    "start": "2184130",
    "end": "2189740"
  },
  {
    "text": "plus days and then we got to see any satisfy with so how are we doing on time",
    "start": "2189740",
    "end": "2196420"
  },
  {
    "text": "nice we're gonna get good questions we can go back and do good more good examples if you want okay",
    "start": "2198820",
    "end": "2204140"
  },
  {
    "text": "summary and then lunch all right we don't go past lunch okay code kata is a",
    "start": "2204140",
    "end": "2212420"
  },
  {
    "text": "great way to learn everybody agree take a code kata you actually get to leave learn learn an API language you can kind",
    "start": "2212420",
    "end": "2217670"
  },
  {
    "text": "of see like on if you're kind of picking up from these particular code kata as you saw that we actually implemented the same kata in a different language right",
    "start": "2217670",
    "end": "2225290"
  },
  {
    "text": "you could easily implement that kata or any of these Coty's except for the java lambda one which is specifically to",
    "start": "2225290",
    "end": "2232250"
  },
  {
    "text": "learn java lambda is any of the rich domain ones you could implement in groovy or scala closure or whatever you",
    "start": "2232250",
    "end": "2237890"
  },
  {
    "text": "want you know you could even do it outside of java if you wanted as well there's really nothing you know java",
    "start": "2237890",
    "end": "2243619"
  },
  {
    "text": "specific about it it's really can you implement a domain do you have like the features necessary to actually then implement what you want to learn in that",
    "start": "2243619",
    "end": "2249890"
  },
  {
    "text": "library or language so code ghada's great way to learn library or language features we discussed how to you know go",
    "start": "2249890",
    "end": "2257540"
  },
  {
    "text": "about building your own Coty's and also the best way to learn is to teach which i get from a good friend over here how",
    "start": "2257540",
    "end": "2263690"
  },
  {
    "text": "do you say it Shondra your latin thank",
    "start": "2263690",
    "end": "2271010"
  },
  {
    "text": "you what does it mean excellent that's proving my point",
    "start": "2271010",
    "end": "2276260"
  },
  {
    "text": "teaching is a great way to learn it's in Latin it must be must be true anyways we",
    "start": "2276260",
    "end": "2282619"
  },
  {
    "text": "demonstrated several different okada today and you know the BNY Mellon github repository it's out there Mikado's are",
    "start": "2282619",
    "end": "2288230"
  },
  {
    "text": "actually in a patchy to ATO a license so feel free to take it do do whatever you want you know learn",
    "start": "2288230",
    "end": "2293900"
  },
  {
    "text": "stuff and with that we can actually take some questions or I can go back and implement the workweek view or full week",
    "start": "2293900",
    "end": "2299270"
  },
  {
    "text": "view if you want so yes do we have a mic",
    "start": "2299270",
    "end": "2304510"
  },
  {
    "text": "okay how do you think I'm gonna answer",
    "start": "2306010",
    "end": "2320690"
  },
  {
    "text": "this question so there is actually a",
    "start": "2320690",
    "end": "2328280"
  },
  {
    "text": "whole talk which I mentioned before called collections compare there's actually there's videos on YouTube from dev oxen from Java one and I have a",
    "start": "2328280",
    "end": "2335000"
  },
  {
    "text": "slide dedicated to what's the best framework out there and it may or may not be eclipse questions and the answer",
    "start": "2335000",
    "end": "2341840"
  },
  {
    "text": "is of course it depends right and you know what you get to see and what we got",
    "start": "2341840",
    "end": "2347000"
  },
  {
    "text": "to learn by you know doing this particular code example of a deck of cards is to test out these different",
    "start": "2347000",
    "end": "2353030"
  },
  {
    "text": "api's that we want and what's interesting is that if you look at our earliest version of the talk at devoxx",
    "start": "2353030",
    "end": "2360490"
  },
  {
    "text": "last year in San Jose we started using a",
    "start": "2360490",
    "end": "2365900"
  },
  {
    "text": "mutable sorted sets right and that had you know some you know challenges for",
    "start": "2365900",
    "end": "2372410"
  },
  {
    "text": "different libraries but also like we were implementing in Java 8 and what you've seen that by upgrading to Java 10 the Java stream solution isn't nearly as",
    "start": "2372410",
    "end": "2379610"
  },
  {
    "text": "terrible as it used to be because in order to make the the collections and the map immutable it was like pulling",
    "start": "2379610",
    "end": "2387740"
  },
  {
    "text": "your hair out you'd after you lose use like collections on modifiable map and like the the downstream collectors you",
    "start": "2387740",
    "end": "2393110"
  },
  {
    "text": "didn't have the niceness of collectors dot to unmodifiable list that we have in the Java 10 in the talk we did the",
    "start": "2393110",
    "end": "2401780"
  },
  {
    "text": "coding comparing the API so that's one aspect you can look at we also did performance benchmarks because everybody",
    "start": "2401780",
    "end": "2407390"
  },
  {
    "text": "cares about performance now we always you know start off by explaining this performance probably means nothing to",
    "start": "2407390",
    "end": "2412940"
  },
  {
    "text": "anybody anywhere cuz who's going to be creating a deck of cards in the volumes that would actually have performance",
    "start": "2412940",
    "end": "2418430"
  },
  {
    "text": "matters so it's cut in a real life application but it's interesting for library developers if they maybe want to like tune their library right to be",
    "start": "2418430",
    "end": "2425210"
  },
  {
    "text": "really fast at creating an immutable sorted set or less so so the talks are out there the decks",
    "start": "2425210",
    "end": "2430880"
  },
  {
    "text": "are on slideshare as well I think a few places so if you look for collections compare but the best way I would say",
    "start": "2430880",
    "end": "2436310"
  },
  {
    "text": "like honestly sit down and try them yourself right we put you know the Coty's out there and it's interesting",
    "start": "2436310",
    "end": "2441830"
  },
  {
    "text": "we've upgraded not only did we upgrade to Java 9 in Java 10 and you know we",
    "start": "2441830",
    "end": "2447440"
  },
  {
    "text": "upgraded delays version of Kotlin we upgraded to the latest version all the libraries as well so as of a few weeks",
    "start": "2447440",
    "end": "2454190"
  },
  {
    "text": "ago it was the latest version of guava Apache Commons and Vava and the latest version of Eclipse collection so other",
    "start": "2454190",
    "end": "2464240"
  },
  {
    "text": "questions no the cauda does you actually",
    "start": "2464240",
    "end": "2473990"
  },
  {
    "text": "will see some similarities though between these well not just this syntax the type names are similar so if you",
    "start": "2473990",
    "end": "2480830"
  },
  {
    "text": "look at the Kotlin collection names that they've gone with them they've chosen a similar strategy that we used in eclipse collections their collections the",
    "start": "2480830",
    "end": "2488570"
  },
  {
    "text": "immutable collection mutable list right they only have mutable collections today but they they use that name which we use",
    "start": "2488570",
    "end": "2493880"
  },
  {
    "text": "the same name right and they extend the JDK types which is what we do as well because we want them you know to be",
    "start": "2493880",
    "end": "2498980"
  },
  {
    "text": "interoperable so but the point you know that kind of gets across in the kata we",
    "start": "2498980",
    "end": "2504560"
  },
  {
    "text": "use Eclipse collections cuz it was easier it has all the api's that we needed we you could probably just do it",
    "start": "2504560",
    "end": "2509630"
  },
  {
    "text": "with Kotlin collections if you wanted but we wanted to show as well like you know Kotlin is a JVM language which",
    "start": "2509630",
    "end": "2515960"
  },
  {
    "text": "means any library that works in Java can be used in Kotlin and the same could be true in you know groovier Scala as well",
    "start": "2515960",
    "end": "2522830"
  },
  {
    "text": "right it's one of the great things about having a JVM language is like the entire ecosystem becomes available to you right",
    "start": "2522830",
    "end": "2530320"
  },
  {
    "text": "more questions maybe don't I see the workweek example alright let's see if I",
    "start": "2534890",
    "end": "2540890"
  },
  {
    "text": "can code it real quick so I discovered this the other day teaching a class",
    "start": "2540890",
    "end": "2546560"
  },
  {
    "text": "I didn't implement has overlapping meeting and then I tried to implement the workweek view and I kept wondering why the tests were failing with",
    "start": "2546560",
    "end": "2551870"
  },
  {
    "text": "duplicate meetings because I had an implement of this so okay what we're gonna do is get the meetings for work",
    "start": "2551870",
    "end": "2558920"
  },
  {
    "text": "week of so this is failing and what we",
    "start": "2558920",
    "end": "2566330"
  },
  {
    "text": "need to do is step into the work week constructor and we'll see there's two nulls here so work week is given some",
    "start": "2566330",
    "end": "2574010"
  },
  {
    "text": "date and basically all of the meetings on our calendar and what we have to figure out given this date is what is",
    "start": "2574010",
    "end": "2581180"
  },
  {
    "text": "the Monday of that week right so we're gonna do is say you know for date and",
    "start": "2581180",
    "end": "2586220"
  },
  {
    "text": "you can see like the hints here will do for date with and we'll use temporal adjusters and we'll do previous or same",
    "start": "2586220",
    "end": "2595180"
  },
  {
    "text": "and we'll do day of week Monday and that should give us basically the Monday of",
    "start": "2595180",
    "end": "2600830"
  },
  {
    "text": "that work week cuz work week hopefully for people starts on Monday and Friday maybe hopefully don't only okay then the",
    "start": "2600830",
    "end": "2610940"
  },
  {
    "text": "next thing we need to do is actually create a range and for a work week what we want to do is we want to create a",
    "start": "2610940",
    "end": "2616250"
  },
  {
    "text": "local date range and local date range is from the 310 extra library so if you step into it you'll see the package is",
    "start": "2616250",
    "end": "2624110"
  },
  {
    "text": "org 310 extra I'm hoping eventually this will just wind up in a future version of Java time",
    "start": "2624110",
    "end": "2631090"
  },
  {
    "text": "but does it doesn't so the dates until gives you a stream but you can't actually do things something like it",
    "start": "2637059",
    "end": "2642789"
  },
  {
    "text": "contains right yeah because that's what you can do with a you know date range",
    "start": "2642789",
    "end": "2647919"
  },
  {
    "text": "right you can see that something is in the range so let's do we have the start date right for the range and then we",
    "start": "2647919",
    "end": "2654759"
  },
  {
    "text": "want to do so a work week and local date range is inclusive on the from and exclusive on the - which is you know",
    "start": "2654759",
    "end": "2661390"
  },
  {
    "text": "very common in Java so we're gonna add five days which will then you know hopefully include just the start date",
    "start": "2661390",
    "end": "2668589"
  },
  {
    "text": "and then four days after that right won't include the fifth one and now I should be able to run the test and voila",
    "start": "2668589",
    "end": "2679199"
  },
  {
    "text": "you like the meetings you know print it out and so once again like the focus of this kata was to help me learn Java time",
    "start": "2679199",
    "end": "2685150"
  },
  {
    "text": "you know features and three ten extra because you like hey and using these cool API is available on both Java time",
    "start": "2685150",
    "end": "2691479"
  },
  {
    "text": "and you know then in three ten extra as well and I you know right the eclipse",
    "start": "2691479",
    "end": "2697029"
  },
  {
    "text": "collections code for you so I don't have to do that stuff mostly and then you",
    "start": "2697029",
    "end": "2702219"
  },
  {
    "text": "know so on and so forth other questions we're good for lunch all",
    "start": "2702219",
    "end": "2710289"
  },
  {
    "text": "right let's get lunch thank you",
    "start": "2710289",
    "end": "2713909"
  }
]