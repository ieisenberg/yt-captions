[
  {
    "text": "foreign [Music]",
    "start": "0",
    "end": "14249"
  },
  {
    "text": "hi my name is Chris Seaton I'm a senior staff engineer at Shopify and I'm going to talk about understanding Java",
    "start": "15240",
    "end": "21359"
  },
  {
    "text": "programs using graphs so here's where I'm coming from with this talk um I've got a PhD in",
    "start": "21359",
    "end": "27599"
  },
  {
    "text": "programming languages but I've got a personal interest in languages beyond that um one of the great things about working",
    "start": "27599",
    "end": "33180"
  },
  {
    "text": "in programming languages is that you can have a conversation with almost anybody in the tech community so almost anyone",
    "start": "33180",
    "end": "38640"
  },
  {
    "text": "who uses program languages has opinions on languages as things they wish were better in languages things they wish",
    "start": "38640",
    "end": "44579"
  },
  {
    "text": "were faster in programming languages so a great thing about working languages is you can always have a conversation with people and you can always understand",
    "start": "44579",
    "end": "51300"
  },
  {
    "text": "what they want out of their languages and you can think about how you can provide that as someone who worked on the implementation languages which I",
    "start": "51300",
    "end": "57719"
  },
  {
    "text": "think is a really great thing about working in this field I'm formerly from the Oracle Labs VM",
    "start": "57719",
    "end": "63300"
  },
  {
    "text": "research group part of the Grail team growl is a new just-in-time compiler for",
    "start": "63300",
    "end": "68340"
  },
  {
    "text": "Java that aims to be really high performance and give many more options for how we optimize and part of our",
    "start": "68340",
    "end": "73380"
  },
  {
    "text": "applications I worked there for many years but I've currently moved to Shopify to do compiler research on the",
    "start": "73380",
    "end": "79560"
  },
  {
    "text": "Ruby program language so I work on Ruby but I work within a Java context because I'm using Java to",
    "start": "79560",
    "end": "85320"
  },
  {
    "text": "implement Ruby and that's the the trough Ruby project so trophy is a ruby interpreter working on the jvm not to be",
    "start": "85320",
    "end": "92460"
  },
  {
    "text": "confused with jruby which is another existing implementation of Ruby on the jvm what I'm trying to do is apply Java",
    "start": "92460",
    "end": "99360"
  },
  {
    "text": "compilation technology to make Ruby faster to make Ruby developers happier so we use the same kind of technology in",
    "start": "99360",
    "end": "105960"
  },
  {
    "text": "Java applying it to Ruby what's this talk about this talk is",
    "start": "105960",
    "end": "111240"
  },
  {
    "text": "about understanding what your Java program really means so we can read our",
    "start": "111240",
    "end": "116720"
  },
  {
    "text": "Java source code and we can have a model for how a Java program works in our heads we can use if we wanted the Java",
    "start": "116720",
    "end": "123540"
  },
  {
    "text": "specification to get a really deep understanding of its semantics and what it really means",
    "start": "123540",
    "end": "129060"
  },
  {
    "text": "um but I think it's good to understand how the jits compiler so the Justin Time compiler understands your Java program",
    "start": "129060",
    "end": "134700"
  },
  {
    "text": "as well so it's got a slightly different model of the program we can reveal that by using some",
    "start": "134700",
    "end": "140580"
  },
  {
    "text": "internals of the compiler and we can we can see how the compiler understands your Java program and I think that can",
    "start": "140580",
    "end": "146220"
  },
  {
    "text": "help us better understand what our gyro programs are doing if we're at the level where we're trying to look at performance in detail",
    "start": "146220",
    "end": "153120"
  },
  {
    "text": "we'll be thinking in more depth than byte code so if you've heard of byte code we'll be starting there but not",
    "start": "153120",
    "end": "158459"
  },
  {
    "text": "quite as much depth of machine code so I'm aiming to keep this all accessible um so we'll be using diagrams to",
    "start": "158459",
    "end": "165060"
  },
  {
    "text": "understand what the compiler is doing rather than using um dry text representations of that so",
    "start": "165060",
    "end": "170459"
  },
  {
    "text": "it should help it be accessible even if you're not sure what goes on Beyond bytecode",
    "start": "170459",
    "end": "176160"
  },
  {
    "text": "this talk is about knowing rather than guessing so I see a lot of people argue about what Java does and the performance",
    "start": "176160",
    "end": "182700"
  },
  {
    "text": "of java and what's fast and what isn't and what Java can optimize and what it can't but I often see people guessing",
    "start": "182700",
    "end": "189300"
  },
  {
    "text": "um online and trying to guess what Java does this talks about knowing what Java does and how we can use some tools to",
    "start": "189300",
    "end": "195300"
  },
  {
    "text": "really understand how it's understanding your Java program and how it's optimizing them rather than guessing",
    "start": "195300",
    "end": "200879"
  },
  {
    "text": "about what you've read online it's about testing rather than hoping for the best so we can use some of the techniques I'm going to talk about in",
    "start": "200879",
    "end": "206640"
  },
  {
    "text": "this talk to test the performance of job applications again rather than simply",
    "start": "206640",
    "end": "211860"
  },
  {
    "text": "um relying on what you think it should do we can test how it should optimize and all of that is in order to get the",
    "start": "211860",
    "end": "218220"
  },
  {
    "text": "performance we want so we're talking about context where we want high performance out of our Java applications and how do we do that and how do we test",
    "start": "218220",
    "end": "224640"
  },
  {
    "text": "it but the rest of this talk is live so we'll move to a live demonstration",
    "start": "224640",
    "end": "231680"
  },
  {
    "text": "okay now I've got a slightly clackity keyboard I hope that's not too distracting sorry about that so the",
    "start": "232620",
    "end": "237900"
  },
  {
    "text": "first thing I've done is I went to growlvm.org and I downloaded the grav VM",
    "start": "237900",
    "end": "243420"
  },
  {
    "text": "which is the distribution of java we're going to use to do these experiments so you can go to the download link and you can download the Community Edition uh",
    "start": "243420",
    "end": "250260"
  },
  {
    "text": "for free it's GPL licensed so it's easy to use so growl means a lot of different things",
    "start": "250260",
    "end": "257280"
  },
  {
    "text": "unfortunately it can be a little bit confusing and different people use it to mean slightly different things sometimes",
    "start": "257280",
    "end": "263100"
  },
  {
    "text": "sometimes people can sort of talk past each other so essentially Grail is a compiler for",
    "start": "263100",
    "end": "268500"
  },
  {
    "text": "Java that's written in Java and by that I mean it produces machine code from",
    "start": "268500",
    "end": "273960"
  },
  {
    "text": "java byte code so I'm not talking about a compiler from JavaScript source code to Java bytecode it can be used as a just-in-time",
    "start": "273960",
    "end": "280800"
  },
  {
    "text": "compiler for Java within the jvm so replacing something that is called opto",
    "start": "280800",
    "end": "286139"
  },
  {
    "text": "or C2 within the hotspot jvm so it pays that top tick and pile up with a",
    "start": "286139",
    "end": "292199"
  },
  {
    "text": "different jit compiler but it can also be used to ahead of time compile Java code to a native image so a standalone",
    "start": "292199",
    "end": "300720"
  },
  {
    "text": "executable which runs a system in compiled from C or C plus or something like that that has no requirement on a",
    "start": "300720",
    "end": "306479"
  },
  {
    "text": "jvm um it can also be used by other languages via a framework called truffle and this is what trough Ruby does it",
    "start": "306479",
    "end": "313020"
  },
  {
    "text": "compiles Ruby code to source code via Java using growl as a just-in-time",
    "start": "313020",
    "end": "319259"
  },
  {
    "text": "compiler the reason it can do all these different things is because it's essentially a library for compilation and you can use",
    "start": "319259",
    "end": "325740"
  },
  {
    "text": "that library in many different ways you can use it to build a Justin Time compiler or you can build it use it to build a header sign compiler you could",
    "start": "325740",
    "end": "331800"
  },
  {
    "text": "do other things with it as well so it's a library which can use different things that's why it's one term that's used for",
    "start": "331800",
    "end": "337440"
  },
  {
    "text": "doing so many different types of things that's packaged up as something called the growl VM the Graal VM is a jvm with",
    "start": "337440",
    "end": "345000"
  },
  {
    "text": "the growl compiler and with truffle functionality within it so that's what the growl VM means you may hear the term",
    "start": "345000",
    "end": "351600"
  },
  {
    "text": "Graal VM compiler that's the same as a scroll compiler",
    "start": "351600",
    "end": "357000"
  },
  {
    "text": "took gravia and I put it onto my path so I'm going to do a path equals",
    "start": "357000",
    "end": "363120"
  },
  {
    "text": "um rvm context home home",
    "start": "363120",
    "end": "368880"
  },
  {
    "text": "bin path and that gives me Java on my command line path",
    "start": "368880",
    "end": "375300"
  },
  {
    "text": "now I've got a example Java program here that has a simple class it has a main",
    "start": "375300",
    "end": "381240"
  },
  {
    "text": "method which simply runs in Loop and it calls this method called test and what test does is simply adds together two",
    "start": "381240",
    "end": "386940"
  },
  {
    "text": "parameters and Returns the result and it's kept as a static to keep it nice and simple",
    "start": "386940",
    "end": "392580"
  },
  {
    "text": "um the way I've set this up is with this Loop the purpose of that is to cause this method to be just in time compiled",
    "start": "392580",
    "end": "398160"
  },
  {
    "text": "I use a it's an endless loop because I want the compilation to happen naturally I don't want to force the compilation in",
    "start": "398160",
    "end": "404160"
  },
  {
    "text": "any unusual way and the input to the the method are two random variables so I",
    "start": "404160",
    "end": "409860"
  },
  {
    "text": "have a random source and the random variables go into the test routine uh",
    "start": "409860",
    "end": "415259"
  },
  {
    "text": "the reason I do that is because I want the program to not be static at compilation time so I want real Dynamic",
    "start": "415259",
    "end": "421500"
  },
  {
    "text": "data flowing through it so just in time compiler can't cleverly optimize anything away because actually it's",
    "start": "421500",
    "end": "427380"
  },
  {
    "text": "static now we've got a um we've got Java C which is our Java",
    "start": "427380",
    "end": "433319"
  },
  {
    "text": "compiler on our command line from grow VM as normal so we can do Java C test drop job like that and that converts our",
    "start": "433319",
    "end": "440639"
  },
  {
    "text": "Java program to bytecode as you'd normally do so we have the source code",
    "start": "440639",
    "end": "446099"
  },
  {
    "text": "now which is how we'd normally understand the program as a human being so we can read that and we can reason about it but there's more ways than that",
    "start": "446099",
    "end": "453539"
  },
  {
    "text": "to understand your your Java program now the first one you may be aware of is an",
    "start": "453539",
    "end": "459060"
  },
  {
    "text": "abstract syntax tree you may know this term from an undergraduate compiler class if you've done that sort of",
    "start": "459060",
    "end": "464580"
  },
  {
    "text": "education but what it is is representation that Java C uses to",
    "start": "464580",
    "end": "470220"
  },
  {
    "text": "understand your program so I'm using a plugin here for IntelliJ that allows you to see how the the Java C compiler",
    "start": "470220",
    "end": "477240"
  },
  {
    "text": "understands your program so you can take a an example source file like the one we have here and you can um you can use",
    "start": "477240",
    "end": "483720"
  },
  {
    "text": "this pass button which gives us a an option to inspect and then we can see",
    "start": "483720",
    "end": "488759"
  },
  {
    "text": "how the the JavaScript compiler understands our source code so we have here a class which is our test class",
    "start": "488759",
    "end": "496560"
  },
  {
    "text": "and it tells us what comprises that and then with that we have a method declaration which is our ad declaration",
    "start": "496560",
    "end": "502860"
  },
  {
    "text": "you can see it highlights the the source code which corresponds to it and it has private static has a name has a return",
    "start": "502860",
    "end": "511080"
  },
  {
    "text": "type within that it has a block which is the body as a return statement and then",
    "start": "511080",
    "end": "518219"
  },
  {
    "text": "it has the binary operator and within that we can see it has X and Y as two",
    "start": "518219",
    "end": "523620"
  },
  {
    "text": "inputs this is the abstract syntax tree or the AST which is the simplest representation the machine can use to",
    "start": "523620",
    "end": "530160"
  },
  {
    "text": "understand your Java source code now we already said we compiled to Java",
    "start": "530160",
    "end": "537300"
  },
  {
    "text": "byte code so that means there's another representation we can use to understand our Java source code so I'm going to use Java P so Java P I think we command is C",
    "start": "537300",
    "end": "546600"
  },
  {
    "text": "on test this will disassemble our Java byte code",
    "start": "546600",
    "end": "552240"
  },
  {
    "text": "from the class file so give us the uh I need to have that's because it's static",
    "start": "552240",
    "end": "557940"
  },
  {
    "text": "isn't it so I need to do uh excuse me",
    "start": "557940",
    "end": "562220"
  },
  {
    "text": "uh p",
    "start": "564500",
    "end": "568519"
  },
  {
    "text": "ee great sorry yeah you need to use P to get um get extra members so we have here is",
    "start": "575100",
    "end": "580740"
  },
  {
    "text": "a representation of that ad for that adding routine test as written as the",
    "start": "580740",
    "end": "585959"
  },
  {
    "text": "Java byte code so we had the AST which is how Java C understands it it produces this bytecode which is what goes into",
    "start": "585959",
    "end": "591779"
  },
  {
    "text": "the class file so we have it loads um and integer loads another integers so zero and one corresponds to the two",
    "start": "591779",
    "end": "597720"
  },
  {
    "text": "parameters it adds them as integers and then it returns an integer so that's all it does load them add them and return",
    "start": "597720",
    "end": "604680"
  },
  {
    "text": "them out so nice and simple to have a byte code there now when you run this Java program at",
    "start": "604680",
    "end": "610500"
  },
  {
    "text": "runtime within Hotspot with the just in time compiler enabled it converts it to machine code and I can see the output of",
    "start": "610500",
    "end": "617760"
  },
  {
    "text": "that machine code using some special Flags so I'm going to do here is use this set of flags here",
    "start": "617760",
    "end": "622920"
  },
  {
    "text": "um what all these flags mean isn't particularly important if you look up on some blog posts you can quickly see how",
    "start": "622920",
    "end": "627959"
  },
  {
    "text": "to get um machine code out but I'm going to Simply run one of these",
    "start": "627959",
    "end": "633860"
  },
  {
    "text": "and this tells us the machine code that the Java Justin compiler has Justin Time compilers produced from our Java code",
    "start": "636240",
    "end": "645019"
  },
  {
    "text": "so it tells us it's compiling the um",
    "start": "649980",
    "end": "655579"
  },
  {
    "text": "find the method run after",
    "start": "659640",
    "end": "662839"
  },
  {
    "text": "test there we go so this is the the test method and this is the the machine code is produced that actually runs on your",
    "start": "668880",
    "end": "674760"
  },
  {
    "text": "processor so there is a add operation in here and that is the actual ads which corresponds to the ad we wrote in Java",
    "start": "674760",
    "end": "681540"
  },
  {
    "text": "but it's buried around some other stuff now there's quite a bit of golf here we talked about the AST and then the byte",
    "start": "681540",
    "end": "686700"
  },
  {
    "text": "code now jumped all the way to this low level hard to understand machine code which we can't really use to understand",
    "start": "686700",
    "end": "693420"
  },
  {
    "text": "our job program it's far too dense this is a tiny method and it's already quite a lot going on there so in this talk",
    "start": "693420",
    "end": "699899"
  },
  {
    "text": "what we'll do is address that sort of Gulf between the the Java byte code and the Java machine code",
    "start": "699899",
    "end": "705360"
  },
  {
    "text": "now there's a couple of tools we can use to do this that exist already one of them is called jit watch",
    "start": "705360",
    "end": "711660"
  },
  {
    "text": "so I'm running jit watch um here as an application in the background",
    "start": "711660",
    "end": "716940"
  },
  {
    "text": "it's a tool and what you can do is you can use basically this flag called log compilation I'm going to run our test",
    "start": "716940",
    "end": "724019"
  },
  {
    "text": "program with that and it runs as before but now it's producing an extra file of output which",
    "start": "724019",
    "end": "730380"
  },
  {
    "text": "we can interrogate to understand a bit more about what the jitter's done so I'm going to open the log that we just",
    "start": "730380",
    "end": "736019"
  },
  {
    "text": "produced and I will analyze it and there's our class and it tells us",
    "start": "736019",
    "end": "742920"
  },
  {
    "text": "there's a method in there which is just in time compiled and this tool is a bit better than the Java P command line tool",
    "start": "742920",
    "end": "749519"
  },
  {
    "text": "and the print disassembly we used in that now it gives us all those together so it tells us the the source code the",
    "start": "749519",
    "end": "755579"
  },
  {
    "text": "byte code and the Machine code output so this ad operation corresponds to this ad operation in the bytecode and then we",
    "start": "755579",
    "end": "761940"
  },
  {
    "text": "said that this was where the actual ad was and yet we can see it's connected up and it tells us that's the actual ad",
    "start": "761940",
    "end": "768000"
  },
  {
    "text": "operation going together so this is a bit better and it shows us how these things link up but there's",
    "start": "768000",
    "end": "773639"
  },
  {
    "text": "still still somewhat of a golf here in that how's it getting from this byte code to this machine code and that's",
    "start": "773639",
    "end": "778680"
  },
  {
    "text": "we're going to answer using the next tool so I'm going to use some more Flags now",
    "start": "778680",
    "end": "784980"
  },
  {
    "text": "I'm going to add something called um growl dot dump and what this does is it asks the growl",
    "start": "784980",
    "end": "792360"
  },
  {
    "text": "jit compiler to print out the way the data structures it uses to understand the compilation",
    "start": "792360",
    "end": "800120"
  },
  {
    "text": "so the program runs as normal um after a while I'll cancel it and then we get an extra directory which is this",
    "start": "802440",
    "end": "809040"
  },
  {
    "text": "growl dumps which lists all the compilations which the chip compiler has done now I'm going to use a tool here",
    "start": "809040",
    "end": "816120"
  },
  {
    "text": "called C foam which is a command line tool for reading out these graphs so we've got a directory um so I'm going to",
    "start": "816120",
    "end": "822240"
  },
  {
    "text": "run the seafoam and I've got directory of these growl dumps",
    "start": "822240",
    "end": "827540"
  },
  {
    "text": "um and I'm looking for Hotspot compilation and these are all things hotspot has compiled and we're looking for test test",
    "start": "828540",
    "end": "834839"
  },
  {
    "text": "so one seven two",
    "start": "834839",
    "end": "838579"
  },
  {
    "text": "I'm going to ask it to list all the things it compiled within when it was compiling that method um this list is",
    "start": "841019",
    "end": "846060"
  },
  {
    "text": "hard to understand but um these are all the phases the compiler runs but I'm going to Simply jump in and",
    "start": "846060",
    "end": "851940"
  },
  {
    "text": "get it to look at after passing so after was the code looked like after it's been",
    "start": "851940",
    "end": "857279"
  },
  {
    "text": "passed I'm gonna say I want you to render this so this is what seafoam does this prints",
    "start": "857279",
    "end": "863339"
  },
  {
    "text": "out a compiler graph and this is the central idea of what this talk is about so this is a graph it's a data structure",
    "start": "863339",
    "end": "869820"
  },
  {
    "text": "it has edges or arrows lines and it has boxes nodes",
    "start": "869820",
    "end": "877380"
  },
  {
    "text": "um vertices it's a flow chart effectively so it tells us how the how",
    "start": "877380",
    "end": "882779"
  },
  {
    "text": "they Justin talking about it's understanding your Java program so what we have here in the center is an ad operation which is that ad operation in",
    "start": "882779",
    "end": "889320"
  },
  {
    "text": "our our method the key thing and what this graph is telling us is that there's input flowing from the zeroth parameter",
    "start": "889320",
    "end": "896579"
  },
  {
    "text": "so the first parameter and the first parameter so the second parameter which flow into that odd operation as X and Y",
    "start": "896579",
    "end": "903480"
  },
  {
    "text": "and then the ad operation goes to be returned as the result there's also a node which says where the",
    "start": "903480",
    "end": "909839"
  },
  {
    "text": "method starts and where it ends and they simply are connected by one straight line so there's nothing there's no",
    "start": "909839",
    "end": "915180"
  },
  {
    "text": "control flow going on the green arrows represent data flowing and the Red Arrows which we'll see more of later the",
    "start": "915180",
    "end": "920880"
  },
  {
    "text": "thicker arrows they represent the um the control flowing through the program",
    "start": "920880",
    "end": "926220"
  },
  {
    "text": "and the green or the oval boxes represent data sources and the the green",
    "start": "926220",
    "end": "932040"
  },
  {
    "text": "or diamond boxes represent operations on data and the the red or rectangular",
    "start": "932040",
    "end": "937380"
  },
  {
    "text": "boxes represent some sort of decision or some sort of control flow being made so you can see that this adds operations",
    "start": "937380",
    "end": "942899"
  },
  {
    "text": "that goes together how can we use this to understand some",
    "start": "942899",
    "end": "948240"
  },
  {
    "text": "um some Java programs and what can be used is to understand about how Java understands your Java programs well",
    "start": "948240",
    "end": "954600"
  },
  {
    "text": "let's look at an example we've got this ad routine here",
    "start": "954600",
    "end": "960180"
  },
  {
    "text": "um I'm going to expand it to have a another parameter",
    "start": "960180",
    "end": "966360"
  },
  {
    "text": "so x y and z",
    "start": "966360",
    "end": "971220"
  },
  {
    "text": "I want to do is I'm going to introduce um the extra variable here",
    "start": "972000",
    "end": "978000"
  },
  {
    "text": "um like that so X Plus y plus Z and I'm",
    "start": "978000",
    "end": "985320"
  },
  {
    "text": "going to run the the program again so I have to compile it because I've",
    "start": "985320",
    "end": "993000"
  },
  {
    "text": "modified it and then run it as before",
    "start": "993000",
    "end": "999440"
  },
  {
    "text": "so now we've got two ad operations you can see the result of the third ad operation flows into the inputs the",
    "start": "1022519",
    "end": "1029780"
  },
  {
    "text": "second operations this is um X Plus y plus Z the third parameter",
    "start": "1029780",
    "end": "1037339"
  },
  {
    "text": "now Java's got local variables what are local variables mean to how the the just in time compiler understands it doesn't",
    "start": "1037339",
    "end": "1043280"
  },
  {
    "text": "make a difference to your program when you use local variables to change how your program works I've seen some people",
    "start": "1043280",
    "end": "1050000"
  },
  {
    "text": "argue online that using local variables is slower than just using Code um",
    "start": "1050000",
    "end": "1055100"
  },
  {
    "text": "directly with an expression because they they think the compiler has to set a local variable somewhere let's look at",
    "start": "1055100",
    "end": "1060740"
  },
  {
    "text": "what that actually looks like so I'm going to modify this code now to do um",
    "start": "1060740",
    "end": "1067179"
  },
  {
    "text": "a equals X Plus Y and then do a plus Z",
    "start": "1067480",
    "end": "1073280"
  },
  {
    "text": "so we've got different Java source code now but that achieves the same thing let's look at how what the",
    "start": "1073280",
    "end": "1080000"
  },
  {
    "text": "um the compiler understands that so I compile again run again",
    "start": "1080000",
    "end": "1086140"
  },
  {
    "text": "foreign",
    "start": "1095960",
    "end": "1098140"
  },
  {
    "text": "sorry that's because I have done that",
    "start": "1118340",
    "end": "1123559"
  },
  {
    "text": "so we introduced the local variable but you can't see any difference in the resulting graph",
    "start": "1154220",
    "end": "1159380"
  },
  {
    "text": "so the result of this is X Plus y That's now assigned to the local variable a but",
    "start": "1159380",
    "end": "1165020"
  },
  {
    "text": "that local variable doesn't appear in the graph it look it's like the Justin Time compilers forgotten about it entirely",
    "start": "1165020",
    "end": "1170900"
  },
  {
    "text": "what this Edge is here that represents is the data flowing from the ad operation from X Plus Y into the input",
    "start": "1170900",
    "end": "1178039"
  },
  {
    "text": "that adds it to Z now it doesn't matter if that that value is calculated and stored in a local variable",
    "start": "1178039",
    "end": "1184940"
  },
  {
    "text": "or if it was simply passive expression all the compiler cares about is where the data is flowing and there is a local",
    "start": "1184940",
    "end": "1191240"
  },
  {
    "text": "variable here between node 5 and 6. but the compiler doesn't care about that it",
    "start": "1191240",
    "end": "1197000"
  },
  {
    "text": "can ignore that and just know that this is where the data comes from this is where data is going so we can see we get exactly the same graph out of the",
    "start": "1197000",
    "end": "1203900"
  },
  {
    "text": "program if we use local variables or if we don't it doesn't make a difference to how the Justin Time compiler optimizes",
    "start": "1203900",
    "end": "1209780"
  },
  {
    "text": "it and this is what I mean by we can use this tool to understand how the Justin Time compiler understands our program",
    "start": "1209780",
    "end": "1215299"
  },
  {
    "text": "because we can change things in the program and we can see what differences that actually make to Justin nine",
    "start": "1215299",
    "end": "1220520"
  },
  {
    "text": "compiler and why so so far graphs have been pretty simple I'm going to introduce some control flow",
    "start": "1220520",
    "end": "1227480"
  },
  {
    "text": "now so some if statements things like that so I've got an example already set",
    "start": "1227480",
    "end": "1233240"
  },
  {
    "text": "up so example if",
    "start": "1233240",
    "end": "1239080"
  },
  {
    "text": "foreign",
    "start": "1250880",
    "end": "1253059"
  },
  {
    "text": "so now I've got this method example if it has a condition an X and Y and if the condition is true it um sets a to be X",
    "start": "1259820",
    "end": "1267799"
  },
  {
    "text": "otherwise that's a to Y and then it returns whatever one of those it was um we also have something in the middle",
    "start": "1267799",
    "end": "1272960"
  },
  {
    "text": "which sets an into field to be the value we're setting it to the reason we do",
    "start": "1272960",
    "end": "1278240"
  },
  {
    "text": "that is to put a point in the the program where there's some sort of action taken so we can see that action",
    "start": "1278240",
    "end": "1284660"
  },
  {
    "text": "more easily in the graph otherwise sometimes the graphs get very compact very quickly it's hard to see what you're looking for",
    "start": "1284660",
    "end": "1291220"
  },
  {
    "text": "so I'll run this program",
    "start": "1291220",
    "end": "1295179"
  },
  {
    "text": "I'll remove the growl dumps I think",
    "start": "1299720",
    "end": "1303460"
  },
  {
    "text": "so example if one eight two",
    "start": "1317120",
    "end": "1321039"
  },
  {
    "text": "so what we have now is a graph that includes control flow so before the only",
    "start": "1331100",
    "end": "1336860"
  },
  {
    "text": "red things the only rectangular things were start and end but they come in now when we have a control flow such as a",
    "start": "1336860",
    "end": "1343340"
  },
  {
    "text": "loop or an if so now we have is",
    "start": "1343340",
    "end": "1348460"
  },
  {
    "text": "is the first parameter so our condition is equal to zero zero meaning false if",
    "start": "1350059",
    "end": "1355340"
  },
  {
    "text": "it is equal to false then um we use x otherwise we use Y and we can see us assigning X to that field",
    "start": "1355340",
    "end": "1362360"
  },
  {
    "text": "here and then we can see the result comes from either X or Y depending on which way we took",
    "start": "1362360",
    "end": "1369919"
  },
  {
    "text": "the if so what this is is a special node called a final that says take which value we want based on where we control",
    "start": "1369919",
    "end": "1377360"
  },
  {
    "text": "flow diverged so we can see our control flow now has a diverge in it where it",
    "start": "1377360",
    "end": "1383179"
  },
  {
    "text": "can go one of either way just like our program and we can see now that the red or the thick arrows have a meaningful",
    "start": "1383179",
    "end": "1389840"
  },
  {
    "text": "control flow now we can use this example to see a really interesting point about how Java",
    "start": "1389840",
    "end": "1396440"
  },
  {
    "text": "optimizes your program what I'm going to do is I'm going to change this random Boolean that says",
    "start": "1396440",
    "end": "1402080"
  },
  {
    "text": "whether we want to take the first Branch or second branch and I'm going to give it a constant value so I'm going to just",
    "start": "1402080",
    "end": "1407659"
  },
  {
    "text": "change it from random to being always being false so this condition is always false now so we're only ever going to",
    "start": "1407659",
    "end": "1413840"
  },
  {
    "text": "use this branch what do you think this is going to do to the way the Java compiler doesn't think about it understands your program",
    "start": "1413840",
    "end": "1421159"
  },
  {
    "text": "um we see this pattern quite often in things like logging for example you may have a logging flag which is off most of",
    "start": "1421159",
    "end": "1427340"
  },
  {
    "text": "the time or sometimes it's on sometimes it's off and does that add some sort of overhead to the the way your program's",
    "start": "1427340",
    "end": "1434419"
  },
  {
    "text": "compiled let's try it out",
    "start": "1434419",
    "end": "1437500"
  },
  {
    "text": "180",
    "start": "1461480",
    "end": "1464480"
  },
  {
    "text": "foreign",
    "start": "1468620",
    "end": "1470799"
  },
  {
    "text": "got any control flow in our graph but we had control flow and I source code so",
    "start": "1474039",
    "end": "1479179"
  },
  {
    "text": "where is it gone what the compiler says is it is never seen that value be anything apart from",
    "start": "1479179",
    "end": "1486380"
  },
  {
    "text": "false so it's gone ahead it's just in time compiled your program assuming it's",
    "start": "1486380",
    "end": "1491480"
  },
  {
    "text": "always going to be false now because that value is coming in dynamically it could change so what it's",
    "start": "1491480",
    "end": "1498260"
  },
  {
    "text": "done is instead of an if node it's now got something called a guard node which is saying I want you to check that",
    "start": "1498260",
    "end": "1505400"
  },
  {
    "text": "um the first parameter is still false so first parameter equals false",
    "start": "1505400",
    "end": "1513020"
  },
  {
    "text": "check that's true but then it carries on assuming it's true",
    "start": "1513020",
    "end": "1518360"
  },
  {
    "text": "um so we have the store field and it returns simply the first parameter if it wasn't true so sorry if it wasn't",
    "start": "1518360",
    "end": "1525679"
  },
  {
    "text": "true that the value is false then it um does something called um de-optimizing where it jumps out of",
    "start": "1525679",
    "end": "1531380"
  },
  {
    "text": "this compiled code and goes back into the interpreter but what we can see here is that the Justin Time compiler looks",
    "start": "1531380",
    "end": "1536960"
  },
  {
    "text": "and profiles what values you have flowing through your program and uses those to change how the program is being",
    "start": "1536960",
    "end": "1542960"
  },
  {
    "text": "optimized the benefit of this is there's less code here now because there's only",
    "start": "1542960",
    "end": "1548059"
  },
  {
    "text": "one the branches are compiled but also it's it's straight line code right the discard is written in such a way that",
    "start": "1548059",
    "end": "1554179"
  },
  {
    "text": "the processor will know it's not likely to fail and therefore I can go ahead and do this code afterwards",
    "start": "1554179",
    "end": "1560600"
  },
  {
    "text": "um while that guard is still being checked so here we can see that the profiling",
    "start": "1560600",
    "end": "1565940"
  },
  {
    "text": "going on and working in action I'll give you more advanced example now",
    "start": "1565940",
    "end": "1571460"
  },
  {
    "text": "of what we can see about what the the Justin Time compiler is doing by using an example which looks at locks",
    "start": "1571460",
    "end": "1579440"
  },
  {
    "text": "so I'm going to take um an example",
    "start": "1579440",
    "end": "1583899"
  },
  {
    "text": "here",
    "start": "1584960",
    "end": "1587440"
  },
  {
    "text": "I'm going to take the code which calls this foreign",
    "start": "1590120",
    "end": "1596559"
  },
  {
    "text": "we don't need that anymore so what we have here now is a method",
    "start": "1599779",
    "end": "1607039"
  },
  {
    "text": "called example double synchronize it takes an object and an X um sorry we did need the um didn't need",
    "start": "1607039",
    "end": "1613400"
  },
  {
    "text": "the field still um and then it synchronizes an object once writes a field and then synchronizing limited again and right to",
    "start": "1613400",
    "end": "1619580"
  },
  {
    "text": "field now why would you write code that synchronized on an object twice back to back like this well you probably",
    "start": "1619580",
    "end": "1625279"
  },
  {
    "text": "wouldn't but um you may get this code after of optimizations so if you call to",
    "start": "1625279",
    "end": "1630620"
  },
  {
    "text": "synchronized methods that you're effectively doing this if you call them back to bank or if you have code that's",
    "start": "1630620",
    "end": "1636200"
  },
  {
    "text": "inlined other code that uses synchronized locks you may get them back to back like this so you may not write",
    "start": "1636200",
    "end": "1642020"
  },
  {
    "text": "this manually but it's the sort of thing you may get out automatically from the the compiler",
    "start": "1642020",
    "end": "1648080"
  },
  {
    "text": "and the driving code uses the same object um for each lock but it allocates it new",
    "start": "1648080",
    "end": "1653779"
  },
  {
    "text": "each time and then it's passed in a random integer so let's compile this",
    "start": "1653779",
    "end": "1661000"
  },
  {
    "text": "I'll remove the the growl dumps first [Applause]",
    "start": "1665240",
    "end": "1671240"
  },
  {
    "text": "foreign",
    "start": "1678080",
    "end": "1681080"
  },
  {
    "text": "okay what we can see is what we'd expect to start with we have straight line code um it those kind of synchronized blocks",
    "start": "1692600",
    "end": "1700880"
  },
  {
    "text": "um the objects that's using them is called the monitor of the object um and we we take that object in as the",
    "start": "1700880",
    "end": "1706700"
  },
  {
    "text": "first parameter and we enter the monitor of the object and then we leave it and in between we write the field and then",
    "start": "1706700",
    "end": "1712159"
  },
  {
    "text": "we enter it again write the field and leave it so this is we can see here that we're we're locking",
    "start": "1712159",
    "end": "1718760"
  },
  {
    "text": "the same object twice which is wasteful",
    "start": "1718760",
    "end": "1722980"
  },
  {
    "text": "what I'm going to do now is look at a later phase of that same method being optimizing so I'm going to use the list",
    "start": "1724220",
    "end": "1730400"
  },
  {
    "text": "thing which gives me all the phases which are being done I'm going to grip for",
    "start": "1730400",
    "end": "1736720"
  },
  {
    "text": "um lock elimination so we've got two phases here before lock",
    "start": "1737179",
    "end": "1742520"
  },
  {
    "text": "elimination phase and after lock elimination phase so um it is 57 and 58.",
    "start": "1742520",
    "end": "1750980"
  },
  {
    "text": "so I'm going to render the graph again at stage of compilation 57. what's happened here is the program has already",
    "start": "1750980",
    "end": "1757400"
  },
  {
    "text": "been optimized a bit so some things have already been um changed it's also been lowered to a",
    "start": "1757400",
    "end": "1763520"
  },
  {
    "text": "certain so some higher level things being written as low level things so for example there's a implicitly we can't",
    "start": "1763520",
    "end": "1769399"
  },
  {
    "text": "synchronize it on that object if it's null so a null check has been inserted and made explicit here but we still have",
    "start": "1769399",
    "end": "1775880"
  },
  {
    "text": "the monitor enter to write the field the mod x hit the monitor enter write the field and the monitor exit what I'm",
    "start": "1775880",
    "end": "1782059"
  },
  {
    "text": "going to do now though is look at the same um same graph after something called the",
    "start": "1782059",
    "end": "1787820"
  },
  {
    "text": "lock elimination phase has runs this is a compiler phase within Java's just-in-time compiler which is designed",
    "start": "1787820",
    "end": "1794240"
  },
  {
    "text": "to improve our utility of locks so this is at stage",
    "start": "1794240",
    "end": "1799520"
  },
  {
    "text": "um 58 now so I'm gonna look at just after the next phase and we can see what is going on here",
    "start": "1799520",
    "end": "1805880"
  },
  {
    "text": "what's happened is we now have just one monitor enter we write both fields and",
    "start": "1805880",
    "end": "1811399"
  },
  {
    "text": "then one monitor exit so we can see what's going on here is it seen the two logs are back to each other uh next to",
    "start": "1811399",
    "end": "1818419"
  },
  {
    "text": "each other back to back um and it has said I might as well combine them into one single lock and I",
    "start": "1818419",
    "end": "1824960"
  },
  {
    "text": "might as well lock just once do both things inside the block and then release the lock so this is an optimization that um you",
    "start": "1824960",
    "end": "1831740"
  },
  {
    "text": "may have been aware is going on you may not be aware it was going on but instead of debating whether Java is able to do",
    "start": "1831740",
    "end": "1839360"
  },
  {
    "text": "this for our code or not we can look at the graph and find out and we can either do this as a manual process as I've done",
    "start": "1839360",
    "end": "1846260"
  },
  {
    "text": "here so I said for this example code I want to know if the two locks are synchronized or not so I wanted to know",
    "start": "1846260",
    "end": "1851960"
  },
  {
    "text": "effectively I was going to get um this code out which is what we have done",
    "start": "1851960",
    "end": "1857659"
  },
  {
    "text": "um I can test that but because of we're using command line tools and we're using these files that come out of the",
    "start": "1857659",
    "end": "1862700"
  },
  {
    "text": "compiler what we can do is we can also write a test to do this so I work in my",
    "start": "1862700",
    "end": "1868039"
  },
  {
    "text": "day job at Shopify on a system called truffle Ruby so trophy is a ruby",
    "start": "1868039",
    "end": "1873140"
  },
  {
    "text": "interpreter so it's an interpreter for the Ruby programming language it's written in Java and it runs on the jvm",
    "start": "1873140",
    "end": "1879620"
  },
  {
    "text": "as a normal Java application if you want to it doesn't require any special functionality inherently",
    "start": "1879620",
    "end": "1885500"
  },
  {
    "text": "but it uses the the Truffle language implementation framework this is a framework for implementing programming",
    "start": "1885500",
    "end": "1891320"
  },
  {
    "text": "languages produced by Oracle labs and it can use the growl compiler to just in",
    "start": "1891320",
    "end": "1896960"
  },
  {
    "text": "time your interpreted language to machine code somewhat automatically this is a technique called partial evaluation",
    "start": "1896960",
    "end": "1903200"
  },
  {
    "text": "instead of emitting byte code at runtime and compiling that as if it came from java what it does is it takes your your",
    "start": "1903200",
    "end": "1909200"
  },
  {
    "text": "Java interpreter but applies a mathematical transformation to it with your program and produces machine code",
    "start": "1909200",
    "end": "1915140"
  },
  {
    "text": "from that um it's capable some really extraordinary optimizations thanks to growl it can inline very deep it can",
    "start": "1915140",
    "end": "1923360"
  },
  {
    "text": "constant fold through lots of meta programming things like that which is essential for optimizing the Ruby program language which is very dynamic",
    "start": "1923360",
    "end": "1931659"
  },
  {
    "text": "so this is how we actually test truffle Ruby at Shopify the the optimizations we care about",
    "start": "1933140",
    "end": "1939559"
  },
  {
    "text": "having been applied are very important to us because of their their very significant for our workloads we have",
    "start": "1939559",
    "end": "1945080"
  },
  {
    "text": "tests there's optimizations are applied properly and what they effectively do is they automatically look at the graphs as",
    "start": "1945080",
    "end": "1950840"
  },
  {
    "text": "I'm doing here but they do it using a program and they check that the the program they check that the graph looks",
    "start": "1950840",
    "end": "1956120"
  },
  {
    "text": "as I expect so here you could query this graph and you could say I expect to only see one monitor enter a one monitor exit",
    "start": "1956120",
    "end": "1964220"
  },
  {
    "text": "the other thing about Java that people don't always know as well when they're trying to understand and guess what it would do is of course Java's open source",
    "start": "1964220",
    "end": "1971120"
  },
  {
    "text": "the compilers are open source you can just go and look at how they work so we can see here that this lock elimination",
    "start": "1971120",
    "end": "1976279"
  },
  {
    "text": "phase has worked really well for us and has done what we'd expect if you go to JD go to growl on GitHub you can look at",
    "start": "1976279",
    "end": "1983779"
  },
  {
    "text": "how these work so we set it to the lock elimination elimination phase that did what we",
    "start": "1983779",
    "end": "1991640"
  },
  {
    "text": "wanted and we have a test for it um there you go lock elimination phase",
    "start": "1991640",
    "end": "1999820"
  },
  {
    "text": "and this is the optimization which applied what we wanted",
    "start": "2000299",
    "end": "2006399"
  },
  {
    "text": "um great thing about Graal is because it's written in Java you can jump in and it's it's very readable I'm not",
    "start": "2006399",
    "end": "2012220"
  },
  {
    "text": "pretending that anyone can do compiler stuff anyone can work on compilers",
    "start": "2012220",
    "end": "2017320"
  },
  {
    "text": "um but I think anyone can read this code it's familiar with Java and Java performance work and can understand what's going on here this is a full",
    "start": "2017320",
    "end": "2023500"
  },
  {
    "text": "production optimization phase here and we're saying for every monitor exit node",
    "start": "2023500",
    "end": "2029260"
  },
  {
    "text": "in the graph so get all the monotrex nodes in the graph look at the next node if the next node",
    "start": "2029260",
    "end": "2035500"
  },
  {
    "text": "is another enter and if the two locks are compatible so they're the same object then",
    "start": "2035500",
    "end": "2042159"
  },
  {
    "text": "um replace the exit with the next enter and that's what it's done to our graph to be",
    "start": "2042159",
    "end": "2049000"
  },
  {
    "text": "able to optimize it there was a exit here and it said replace it with",
    "start": "2049000",
    "end": "2054339"
  },
  {
    "text": "the node that comes the next node after the next enter which was this right here",
    "start": "2054339",
    "end": "2059500"
  },
  {
    "text": "so I think I'll summarize by saying that the the point of all this is that we can get the compiler's representation for",
    "start": "2059500",
    "end": "2066280"
  },
  {
    "text": "how it understands our programs out of the compiler and we can use that to gain a better understanding of what Java is",
    "start": "2066280",
    "end": "2073118"
  },
  {
    "text": "doing with our programs ourselves that means you don't have to guess at how your Java program is being",
    "start": "2073119",
    "end": "2079599"
  },
  {
    "text": "optimized you don't have to rely on working through the spec you don't have to rely on hearsay that you see online",
    "start": "2079599",
    "end": "2085118"
  },
  {
    "text": "about what Java might do or might not do you can check it yourself and you can see what it's doing I think it's",
    "start": "2085119",
    "end": "2090280"
  },
  {
    "text": "relatively accessible via these graphs because you're looking at a visual representation knowing to pour through a",
    "start": "2090280",
    "end": "2096520"
  },
  {
    "text": "log you can simply see how it's transformed your program and understand what it's doing and because of these logs of files that we can get out of the",
    "start": "2096520",
    "end": "2102760"
  },
  {
    "text": "compiler we can also use them to test stuff so we can build tests by saying just a graph look like Harry expect has",
    "start": "2102760",
    "end": "2109420"
  },
  {
    "text": "it compiled how we expect so I think this is some more options for understanding Java and for understanding",
    "start": "2109420",
    "end": "2115780"
  },
  {
    "text": "how our Java code has been optimized checking that it's been optimized as we expect effect which makes it easier I",
    "start": "2115780",
    "end": "2121060"
  },
  {
    "text": "think to get the performance we want out of our Java applications I'll give you some some resources the a",
    "start": "2121060",
    "end": "2126760"
  },
  {
    "text": "lot of the the work here on how to understand these growls come from a blog post understanding basic Grail graphs if",
    "start": "2126760",
    "end": "2133180"
  },
  {
    "text": "you look at that one that'll give you a way to understand all the concepts you might see in a graph so what kind of",
    "start": "2133180",
    "end": "2138460"
  },
  {
    "text": "edges you see what kind of nodes you see what normal language Concepts compiled to I can get growl from growlvm.org you",
    "start": "2138460",
    "end": "2146200"
  },
  {
    "text": "can get the Ruby implementation from there as well the tool I'm using to look at graphs is something produced by Shopify called seafoam I also",
    "start": "2146200",
    "end": "2154180"
  },
  {
    "text": "demonstrated jit watch and the Java parser which allows us to look at the Java asts and finally I'm on",
    "start": "2154180",
    "end": "2161440"
  },
  {
    "text": "Twitter at Chris G suiten always looking to be engaged about Java and Ruby",
    "start": "2161440",
    "end": "2166540"
  },
  {
    "text": "performance stuff thank you very much",
    "start": "2166540",
    "end": "2170280"
  },
  {
    "text": "so I gotta say that was a very interesting presentation thanks I'm not trying to sound surprised",
    "start": "2172720",
    "end": "2178720"
  },
  {
    "text": "but I'm a big fan of understanding more about what jit does",
    "start": "2178720",
    "end": "2184599"
  },
  {
    "text": "um so it's very interesting to see what you're doing with the uh the idea of the graphs and then getting the jit watch to",
    "start": "2184599",
    "end": "2192099"
  },
  {
    "text": "expand out the the information yeah I think a lot of people spend their time guessing at what Java does and",
    "start": "2192099",
    "end": "2197800"
  },
  {
    "text": "there's a lot of myth and misinformation and old information there and we can just check right so I see people having",
    "start": "2197800",
    "end": "2204099"
  },
  {
    "text": "arguments online Java does this job does that well let's just go and take a look and you can find out for real and you",
    "start": "2204099",
    "end": "2210280"
  },
  {
    "text": "can find out for real whether it's working on your code you can even write automated tests to figure out what it's doing for Real by looking at these",
    "start": "2210280",
    "end": "2216700"
  },
  {
    "text": "graphs yes because as you say if you put a local variable in does it actually really get produced as a local variable",
    "start": "2216700",
    "end": "2223480"
  },
  {
    "text": "and I assume because I'm I'm just kind of chatting here because I don't see that there's any actual questions on the",
    "start": "2223480",
    "end": "2228820"
  },
  {
    "text": "Q a thing so I'm gonna kind of Riff a few questions myself um is that like Escape analysis so",
    "start": "2228820",
    "end": "2235000"
  },
  {
    "text": "because you're not actually using that variable outside of the the method or the result outside of the method that it",
    "start": "2235000",
    "end": "2241060"
  },
  {
    "text": "can is related to escape analysis or is that just simply um no it happens in a different phase so",
    "start": "2241060",
    "end": "2247420"
  },
  {
    "text": "what it does is it says every value that's produced in the program so every expression that is in the resource",
    "start": "2247420",
    "end": "2253480"
  },
  {
    "text": "program produces is given a number and what it says is every time you refer to that expression it just uses the same",
    "start": "2253480",
    "end": "2261099"
  },
  {
    "text": "number it's called Global value numbering so if an expression has gone through a local variable they still has",
    "start": "2261099",
    "end": "2266140"
  },
  {
    "text": "the same number as if you wrote it there directly to the compiler is exactly the same thing and this is why if you write",
    "start": "2266140",
    "end": "2273220"
  },
  {
    "text": "a plus b twice independently they're the same expression so the compiler says",
    "start": "2273220",
    "end": "2279520"
  },
  {
    "text": "well I'll give them the same number um they'll be used once so again people",
    "start": "2279520",
    "end": "2285460"
  },
  {
    "text": "might use a local variable and think I've got a plus b twice here I'll put in a local variable and use it all right",
    "start": "2285460",
    "end": "2291400"
  },
  {
    "text": "does that make it faster no it doesn't because it's exactly the same thing there's still readability reasons and",
    "start": "2291400",
    "end": "2296500"
  },
  {
    "text": "yeah it's important to say that um making your code readable is a separate concern and that's a very human thing",
    "start": "2296500",
    "end": "2302140"
  },
  {
    "text": "but it's important to understand how the compiler actually understands your code and what it actually does it okay yes",
    "start": "2302140",
    "end": "2308980"
  },
  {
    "text": "because I I remember from my days many many years ago doing C programming and you know do you make a variable a",
    "start": "2308980",
    "end": "2316180"
  },
  {
    "text": "register and what impact that has on on whether it improves the performance or not",
    "start": "2316180",
    "end": "2321940"
  },
  {
    "text": "yeah and it's kind of historic and it doesn't really mean anything anymore yeah yeah because then they ended up with like this is after my time but they",
    "start": "2321940",
    "end": "2328180"
  },
  {
    "text": "ended up with register register what",
    "start": "2328180",
    "end": "2332980"
  },
  {
    "text": "okay good um yeah I'm still not seeing any uh questions on the uh the actual q a chat",
    "start": "2333660",
    "end": "2341200"
  },
  {
    "text": "bit um yeah the other thing I really liked you were explaining about was um how the the code can be optimized based on",
    "start": "2341200",
    "end": "2348760"
  },
  {
    "text": "previous um profiling and uh so I talk a lot about that with the stuff I do",
    "start": "2348760",
    "end": "2355660"
  },
  {
    "text": "um or what we do a speculative optimizations uh which I guess is the same approach as what you were",
    "start": "2355660",
    "end": "2361839"
  },
  {
    "text": "describing there yeah and again these graphs that I need to see what's happening there and um one",
    "start": "2361839",
    "end": "2367599"
  },
  {
    "text": "of the properties you can find on the graph because there's there's more information in the graphs than is visible because of the tool I use tries",
    "start": "2367599",
    "end": "2373780"
  },
  {
    "text": "to show enough stuff to be reasonably useful without putting an avalanche of data so one of the things you can do is",
    "start": "2373780",
    "end": "2380020"
  },
  {
    "text": "it can tell you the probabilities so you look at the graph and you can see which path is more likely to be taken the",
    "start": "2380020",
    "end": "2385599"
  },
  {
    "text": "other so you can see whether our path is never taken or it's always taken or whether it",
    "start": "2385599",
    "end": "2391720"
  },
  {
    "text": "is taken 25 of the time or something like that you can use that information to understand your program again and the",
    "start": "2391720",
    "end": "2397240"
  },
  {
    "text": "compiler uses that um in different ways people often think it only uses it for binary reasons so it says if a branch",
    "start": "2397240",
    "end": "2403480"
  },
  {
    "text": "hasn't been taken then compiled it if it's never been taken don't so you may wonder why does it collect more profile",
    "start": "2403480",
    "end": "2409720"
  },
  {
    "text": "information than that why is it correct fine-grained information because that has a flute for the probability it's a",
    "start": "2409720",
    "end": "2415300"
  },
  {
    "text": "quite a lot of precision the reason for that is um the register allocator it will um try and keep registers alive for",
    "start": "2415300",
    "end": "2422079"
  },
  {
    "text": "longer on the more common paths yes yes",
    "start": "2422079",
    "end": "2427560"
  },
  {
    "text": "it's worth Gathering that kind of more detailed information and you can start to do obviously these are like last one",
    "start": "2427560",
    "end": "2434859"
  },
  {
    "text": "percent optimizations rather than the most important things in the world yeah yeah because I mean that's the thing I",
    "start": "2434859",
    "end": "2441280"
  },
  {
    "text": "always find interesting because a lot of people um because obviously you worked on the growl project and so growl has become",
    "start": "2441280",
    "end": "2447339"
  },
  {
    "text": "very popular recently because of the idea of native images and ahead of time compilation and I I get that that's very",
    "start": "2447339",
    "end": "2455500"
  },
  {
    "text": "good from the point of view of startup time so you're immediately running native code so you don't have the warm-up but the if the jit compilation",
    "start": "2455500",
    "end": "2462460"
  },
  {
    "text": "because you can do things like speculative optimizations um more I mean you can do profile guided",
    "start": "2462460",
    "end": "2469000"
  },
  {
    "text": "optimizations with with growl but um you can do proper speculative optimizations and as you said de-optimize if need be",
    "start": "2469000",
    "end": "2476079"
  },
  {
    "text": "um you can get that slightly higher level of performance through jet compilation or optimization",
    "start": "2476079",
    "end": "2482200"
  },
  {
    "text": "yeah and again graphs are great for seeing this we should do we should do a blog post on this um but why why is Jet",
    "start": "2482200",
    "end": "2488200"
  },
  {
    "text": "Fast in the at because if we can the same tool can be used for Native image so if you want to understand what how",
    "start": "2488200",
    "end": "2493240"
  },
  {
    "text": "your native image programs are being compiled right you can dump out graphs in a similar way if you look at this C frame repository yeah there's commands",
    "start": "2493240",
    "end": "2499599"
  },
  {
    "text": "of using instruments as well and if we look to some example realistic Java code we'll be able to see well the native",
    "start": "2499599",
    "end": "2505599"
  },
  {
    "text": "image graph is actually more complicated why is that oh it's because the jit was able to cut this off no this wasn't",
    "start": "2505599",
    "end": "2512140"
  },
  {
    "text": "needed get rid of that and so on and get to be a simpler code um so you because it's the same tool it",
    "start": "2512140",
    "end": "2518079"
  },
  {
    "text": "works for both side by side and see where they need to go just having to do more stuff to to keep it going yeah",
    "start": "2518079",
    "end": "2524920"
  },
  {
    "text": "that's a common misconception that native image will always bring you faster um I think maybe in some cases faster",
    "start": "2524920",
    "end": "2531579"
  },
  {
    "text": "Peak Performance yeah I mean definitely yeah but uh yeah you're right it's a a",
    "start": "2531579",
    "end": "2537520"
  },
  {
    "text": "startup and a a boot warm-up sort of tool yeah yes yes yeah great well um",
    "start": "2537520",
    "end": "2544599"
  },
  {
    "text": "still not seeing any questions in the Q a section so I think um based on that we'll we'll probably",
    "start": "2544599",
    "end": "2550119"
  },
  {
    "text": "kind of wrap things up here because uh like I said I mean that's fascinating presentation I really enjoyed that",
    "start": "2550119",
    "end": "2555339"
  },
  {
    "text": "um great stuff thanks great thank you very much Simon okay thanks a lot bye",
    "start": "2555339",
    "end": "2562859"
  },
  {
    "text": "[Music]",
    "start": "2564810",
    "end": "2571110"
  }
]