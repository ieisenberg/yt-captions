[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "[Music]",
    "start": "260",
    "end": "20640"
  },
  {
    "text": "thanks for coming all of you um it's actually a privilege to see a full room I was the first one to come here which",
    "start": "20640",
    "end": "27000"
  },
  {
    "text": "was good thing to do um but see see seeing all of you here um at this hour",
    "start": "27000",
    "end": "32920"
  },
  {
    "text": "sorry for a late start but um we'll make hopefully make it worth your while with",
    "start": "32920",
    "end": "38440"
  },
  {
    "start": "34000",
    "end": "41000"
  },
  {
    "text": "that said um uh I'm a jbm guy and have been looking at um Java problems for um a",
    "start": "38440",
    "end": "46039"
  },
  {
    "start": "41000",
    "end": "75000"
  },
  {
    "text": "long time looking at how jvm scales how things break when it scales so um",
    "start": "46039",
    "end": "52640"
  },
  {
    "text": "everyone has looked at and I've met a lot of you um how many of you have have",
    "start": "52640",
    "end": "57840"
  },
  {
    "text": "started Java before year 20",
    "start": "57840",
    "end": "61920"
  },
  {
    "text": "and um how many of you have started looking at Java in The Last 5",
    "start": "64559",
    "end": "70840"
  },
  {
    "text": "Years cool so there's a lot of um Java",
    "start": "70840",
    "end": "75960"
  },
  {
    "start": "75000",
    "end": "182000"
  },
  {
    "text": "has taken a lot of uh a very long journey over the last 15 years um and 15",
    "start": "75960",
    "end": "82079"
  },
  {
    "text": "OD years um and on the server side things have changed dramatically um concurrency has become more U prevalent",
    "start": "82079",
    "end": "89400"
  },
  {
    "text": "more modern more re more uh required you don't think about uh writing programs",
    "start": "89400",
    "end": "95720"
  },
  {
    "text": "that have no threads anymore right so um and then there were civil side co uh",
    "start": "95720",
    "end": "101079"
  },
  {
    "text": "containers that were abstracting most most of this from us what we have today",
    "start": "101079",
    "end": "106600"
  },
  {
    "text": "is all of that logic is in your on your eclipse on your intellig u station so U",
    "start": "106600",
    "end": "113479"
  },
  {
    "text": "you cannot ignore the constructs of of of the Java memory model and and for a",
    "start": "113479",
    "end": "118759"
  },
  {
    "text": "long time Java memory model was broken and we'll see a little of that um it's",
    "start": "118759",
    "end": "123960"
  },
  {
    "text": "luckily uh doing much better now in in the post uh concent collections um a lot",
    "start": "123960",
    "end": "130800"
  },
  {
    "text": "more good things have happened but um really this is not a talk about Big Data",
    "start": "130800",
    "end": "136040"
  },
  {
    "text": "it's talking about jvm issues behind big data and all the big data uh players are",
    "start": "136040",
    "end": "142000"
  },
  {
    "text": "suffering these today all um Java apps have some of Notions of these problems",
    "start": "142000",
    "end": "148160"
  },
  {
    "text": "but uh specifically more so Big Data um and when I speak um so um thanks Sasa as",
    "start": "148160",
    "end": "156360"
  },
  {
    "text": "SL um this is actually a slide from who remembers this um",
    "start": "156360",
    "end": "164159"
  },
  {
    "text": "picture uhal Dr s there you go yeah Dr Su um",
    "start": "164159",
    "end": "170720"
  },
  {
    "text": "where the bottommost part of the stack um is actually he's he's called Mac and",
    "start": "170720",
    "end": "176360"
  },
  {
    "text": "he's basically screaming dude anymore on top right so um the trail ahead um",
    "start": "176360",
    "end": "183799"
  },
  {
    "start": "182000",
    "end": "510000"
  },
  {
    "text": "synchronized um is the Locking uh Paradigm that's what people have always",
    "start": "183799",
    "end": "189400"
  },
  {
    "text": "been using we'll we'll double click what's happening behind synchronized um",
    "start": "189400",
    "end": "194599"
  },
  {
    "text": "how locking is working there we also propose um ways to look try and build collections that are wide synchronized",
    "start": "194599",
    "end": "202200"
  },
  {
    "text": "and um some of you have looked at it um in if you've seen uh Brian get's book uh",
    "start": "202200",
    "end": "208599"
  },
  {
    "text": "concurrency um you will actually see a chapter dedicated to that but we'll we'll just look at how to build a",
    "start": "208599",
    "end": "214799"
  },
  {
    "text": "nonblocking collection if you had the leure to go build one yourself right and there are some readymade solutions that",
    "start": "214799",
    "end": "221239"
  },
  {
    "text": "you don't have to build but we double click on that and um a so Sasa mentioned",
    "start": "221239",
    "end": "226920"
  },
  {
    "text": "there's a possibility of a of a talk of internal jvms if I know whom he's talking about at aul Cliff click he",
    "start": "226920",
    "end": "233560"
  },
  {
    "text": "actually wrote that collection so if he's doing the talk make sure you're you're there it's it's it's a it's",
    "start": "233560",
    "end": "239760"
  },
  {
    "text": "beautiful talk so then you have collections um general collections how",
    "start": "239760",
    "end": "245560"
  },
  {
    "text": "they how they play and we'll fast forward to serialization UU ID and then",
    "start": "245560",
    "end": "251640"
  },
  {
    "text": "to garbage collection so the talk is going to be a little Jerry because there are sections in it and they're focusing",
    "start": "251640",
    "end": "258600"
  },
  {
    "text": "on separate sections so um but these are all the issues that we see on a daily basis when you when you try to scale",
    "start": "258600",
    "end": "265000"
  },
  {
    "text": "your collections scale your apps um and then if you have any um any questions",
    "start": "265000",
    "end": "270759"
  },
  {
    "text": "along the way you that I have filed up uh feel free to lift your hand stop the flow of the talk that's fine as",
    "start": "270759",
    "end": "276479"
  },
  {
    "text": "synchronous Q&A is is fine so I don't think we'll get to be able to talk about iio itself but hopefully",
    "start": "276479",
    "end": "284960"
  },
  {
    "text": "um a call out to the tools of the trade uh people um looking at Java everywhere",
    "start": "284960",
    "end": "290919"
  },
  {
    "text": "have um I mean there's no um no performance or no metric without a tool",
    "start": "290919",
    "end": "298000"
  },
  {
    "text": "uh tools are are the reason why we are here humans build tools so um there are",
    "start": "298000",
    "end": "304280"
  },
  {
    "text": "different uh levels of these tools so these tools are kind of ordered in an order of how um how much impact they",
    "start": "304280",
    "end": "312280"
  },
  {
    "text": "have towards the end uh Z vision is your lightweight at the at the top of this is you're looking at what your jbm is doing",
    "start": "312280",
    "end": "318639"
  },
  {
    "text": "if you want to look at um what is happening while you're running your app JC console is like I'm sure everyone",
    "start": "318639",
    "end": "324280"
  },
  {
    "text": "used J console um visual VM gives you a view on how the GC is playing how the",
    "start": "324280",
    "end": "329720"
  },
  {
    "text": "various things uh how the objects are growing so on so forth people how many of you used your",
    "start": "329720",
    "end": "335639"
  },
  {
    "text": "kit see speaks for yourself itself it's a it's a great tool um Z vision is aul",
    "start": "335639",
    "end": "343360"
  },
  {
    "text": "uh jvm it's a jvm tool it's a jvm monitoring tool baked inside the jbm so lightweight um but U so that's also less",
    "start": "343360",
    "end": "351960"
  },
  {
    "text": "available if you look at the jvm observation tools um TI Di and Pi again",
    "start": "351960",
    "end": "357319"
  },
  {
    "text": "this is jvm tooling interface so it's a tools are not the ones that you",
    "start": "357319",
    "end": "363080"
  },
  {
    "text": "get from tooling vendor you can wrap one your own U the jvmti we we we won't go into the depths of it but you can",
    "start": "363080",
    "end": "369400"
  },
  {
    "text": "actually write a small tool that measures how your objects are being laid um how your allocation rate is you can",
    "start": "369400",
    "end": "375599"
  },
  {
    "text": "put a dash Java agent and it will spit out those information to your logs so some of the new uh Big Data vendors are",
    "start": "375599",
    "end": "382319"
  },
  {
    "text": "actually U doing that so they put a small um Java agent that measures your memory stuff like that so so so TI has",
    "start": "382319",
    "end": "390440"
  },
  {
    "text": "traditionally not been exploited by U end users um it's beginning to be place",
    "start": "390440",
    "end": "396000"
  },
  {
    "text": "where people are getting their hands dirty as well U what's the OS doing again D tray o profile we tune perf uh",
    "start": "396000",
    "end": "403000"
  },
  {
    "text": "perf is actually um o profile very well packaged by um red hat so you can",
    "start": "403000",
    "end": "408520"
  },
  {
    "text": "actually pseudo app to get installed perf and you can actually see how uh",
    "start": "408520",
    "end": "413840"
  },
  {
    "text": "what the instructions that we'll see a few outputs of these vtune is Intel's vtune which also does a lot of um deep",
    "start": "413840",
    "end": "420160"
  },
  {
    "text": "dive of how your program is running what your uh cache misses are how you're",
    "start": "420160",
    "end": "425400"
  },
  {
    "text": "doing your um how how the instruction sets are being laid out uh one cool",
    "start": "425400",
    "end": "430520"
  },
  {
    "text": "thing about vtune that I would call out is you can actually run the program on your laptop and say how would this run",
    "start": "430520",
    "end": "436840"
  },
  {
    "text": "on a big four-way nalen processor so you can actually say okay you could do a map",
    "start": "436840",
    "end": "443039"
  },
  {
    "text": "from it ran it like this here on this Intel chip how would it run in production for example so so so there",
    "start": "443039",
    "end": "449879"
  },
  {
    "text": "are some interesting tools that um nuances that are brought to this by the by the OS guys and the hardware guys so",
    "start": "449879",
    "end": "457599"
  },
  {
    "text": "of course everyone probably ran into ganglia how many of you use ganglia or",
    "start": "457599",
    "end": "462680"
  },
  {
    "text": "have heard of it sure production monitoring uh you can also s send alerts",
    "start": "462680",
    "end": "468919"
  },
  {
    "text": "from your program if you're so if you're the people who are trying to do massively parallel programs if you're trying to debug a Hado program you can",
    "start": "468919",
    "end": "476599"
  },
  {
    "text": "send a small alert through a ganglia gmon and then would come up back to the main system even if this program died so",
    "start": "476599",
    "end": "483759"
  },
  {
    "text": "that's something to look after um nagos again another popular tool um netstat",
    "start": "483759",
    "end": "490360"
  },
  {
    "text": "elsof yep the list goes on but the these are kind of traditional and we kind of",
    "start": "490360",
    "end": "496599"
  },
  {
    "text": "expect people to be using those on a daily basis in production this actually a um a mad gronic production um from The",
    "start": "496599",
    "end": "507720"
  },
  {
    "text": "Simpsons uh synchronized it's an i chart U",
    "start": "507720",
    "end": "513000"
  },
  {
    "start": "510000",
    "end": "694000"
  },
  {
    "text": "synchronized under the hood when you do a Java Lang synchronize so if you assume whether it's in the function or inside",
    "start": "513000",
    "end": "518959"
  },
  {
    "text": "the code what's really happening is actually so so if you look at the top",
    "start": "518959",
    "end": "524200"
  },
  {
    "text": "right corner that's actually have your objects laid out right that's your object Mark word so on the left hand",
    "start": "524200",
    "end": "529360"
  },
  {
    "text": "side you have the bit Fields you can say based on what you store in the bit Fields your logic flows differently so",
    "start": "529360",
    "end": "535880"
  },
  {
    "text": "for the vast majority of of locks they're never actually contended so",
    "start": "535880",
    "end": "541200"
  },
  {
    "text": "you're basically racing through synchronized uncontended logs are cheap so historically people would say avoid",
    "start": "541200",
    "end": "548440"
  },
  {
    "text": "synchronize like like real dirt right but if your code does not actually uh contend the the synchronize is not so",
    "start": "548440",
    "end": "555480"
  },
  {
    "text": "bad you actually go all the way down right it's when you when you actually contend that's when you see the first",
    "start": "555480",
    "end": "561040"
  },
  {
    "text": "lightweight lock come in right and then of course you need to inflate lock",
    "start": "561040",
    "end": "566480"
  },
  {
    "text": "that's when you see a big heavy monitor so behind the scenes uh of your uh",
    "start": "566480",
    "end": "571640"
  },
  {
    "text": "synchronized you actually have a monitor a monitor that's thin until it's actually contented the first contention",
    "start": "571640",
    "end": "578000"
  },
  {
    "text": "then you see an inflation of that monitor and that's you actually that's when you're actually seeing uh the effect of the overhead of a real lock",
    "start": "578000",
    "end": "586040"
  },
  {
    "text": "right now what uh came AC came about in the in the last few years actually being",
    "start": "586040",
    "end": "591760"
  },
  {
    "text": "able to bias the lock say you have you're a thread you own this lock and um",
    "start": "591760",
    "end": "597160"
  },
  {
    "text": "so you there very high like hood that you're going to run through the code before someone else needs to get it so",
    "start": "597160",
    "end": "604519"
  },
  {
    "text": "the whole concept of biasing was quite expensive the the the Circa 2006 dead",
    "start": "604519",
    "end": "610720"
  },
  {
    "text": "leaps and um and the sun sun team came along with a stor free um biasing",
    "start": "610720",
    "end": "617440"
  },
  {
    "text": "ability to bias without a store and the the Crux of that is is coming at the last one so if you store the thread ID",
    "start": "617440",
    "end": "624440"
  },
  {
    "text": "EPO and age it's a bable lock so you have a thread ID so you're next time someone someone is trying to pick it up",
    "start": "624440",
    "end": "631000"
  },
  {
    "text": "you're you're going to bias the lock to to live with this thread and let it finish let the other threads Loop a",
    "start": "631000",
    "end": "637079"
  },
  {
    "text": "little let it finish and you probably get to the end of the end of the program before you need to actually swap the",
    "start": "637079",
    "end": "642480"
  },
  {
    "text": "whole lock so that's uh that's the fast path so the fast path is no contention and lock and then you try to bias locks",
    "start": "642480",
    "end": "650160"
  },
  {
    "text": "without um or you can so and then so if it does if does get a contention you",
    "start": "650160",
    "end": "656760"
  },
  {
    "text": "actually have to force the thread to give up the lock then you bulk re bias everything so so the the Crux of that",
    "start": "656760",
    "end": "663519"
  },
  {
    "text": "has been that they achieved a a storf free biasing by actually having a thread ID in an age so and that's kind of the",
    "start": "663519",
    "end": "671240"
  },
  {
    "text": "um the the new nuances and so for a long time if you people have uh remembered",
    "start": "671240",
    "end": "676959"
  },
  {
    "text": "having used thread biasing or used bias thread locking now it's a default in in",
    "start": "676959",
    "end": "682160"
  },
  {
    "text": "1.6 so this all is this is what's happening behind the scene of a synchronized statement needless to say",
    "start": "682160",
    "end": "689519"
  },
  {
    "text": "um locks are expensive if you have a highly contended program locks are expensive we'll see how um we'll see how",
    "start": "689519",
    "end": "697920"
  },
  {
    "start": "694000",
    "end": "864000"
  },
  {
    "text": "that uh also plays into the Java memory model so Java memory model historically I mean you cannot go talk about Java",
    "start": "697920",
    "end": "704399"
  },
  {
    "text": "without talking about Java M model how many of you heard of the double check lock locking",
    "start": "704399",
    "end": "709959"
  },
  {
    "text": "scheme and how many of you have have been told it's broken guess all of them right um so um",
    "start": "709959",
    "end": "718320"
  },
  {
    "text": "so double check locking came across where people have been taunting about lazy initialization of objects and when",
    "start": "718320",
    "end": "725320"
  },
  {
    "text": "you do lazy initialization you want to make sure that for the r case where you do need to fully make this object you",
    "start": "725320",
    "end": "732279"
  },
  {
    "text": "want to lock and make sure it's done in Run in real time now the what happened",
    "start": "732279",
    "end": "738079"
  },
  {
    "text": "in 06 was people or4 actually uh Brian gats and um and N um missing the name um",
    "start": "738079",
    "end": "747680"
  },
  {
    "text": "they came about this concept that volatile was actually not maintaining",
    "start": "747680",
    "end": "752920"
  },
  {
    "text": "The Ordering of threads so in some sense um you were you were not um guaranteed",
    "start": "752920",
    "end": "760120"
  },
  {
    "text": "order even partial order uh within the program so double check lock um was",
    "start": "760120",
    "end": "765360"
  },
  {
    "text": "broken and so so that that was considered the most intact locking mechanism up until that time when when",
    "start": "765360",
    "end": "772519"
  },
  {
    "text": "we finally realize that the memory model was not ordering things by causality so if you look at this so post which is um",
    "start": "772519",
    "end": "780639"
  },
  {
    "text": "all the jvms after that have been patched is that you see that if you maintain partial order in this thread a",
    "start": "780639",
    "end": "787600"
  },
  {
    "text": "and then make sure at the Lock transition everything else is also ordered partial order in this way",
    "start": "787600",
    "end": "793800"
  },
  {
    "text": "partial order on the second part gives you Global uh common order so Global ordering so instead of forcing Global",
    "start": "793800",
    "end": "801160"
  },
  {
    "text": "ordering um which is a very hard memory U which is a slow memory if you say it's",
    "start": "801160",
    "end": "806959"
  },
  {
    "text": "a slower process if you force ordering um your uh your logic uh basically",
    "start": "806959",
    "end": "813639"
  },
  {
    "text": "you're locking almost serially throughout the program um they they bi",
    "start": "813639",
    "end": "818920"
  },
  {
    "text": "asked themselves to do um partial ordering so also volatile uh the",
    "start": "818920",
    "end": "824880"
  },
  {
    "text": "semantics of volatile made have changed and made sure that when you declare a",
    "start": "824880",
    "end": "830880"
  },
  {
    "text": "volatile um variable it's guaranteed to go back to main memory right and it's",
    "start": "830880",
    "end": "837399"
  },
  {
    "text": "it's it's no longer being sto board on your thread local uh buffers they are flushed every time you write it goes",
    "start": "837399",
    "end": "844639"
  },
  {
    "text": "flushes and every time someone reads it it's retrieve from Main memory now there are some performance nuances around it",
    "start": "844639",
    "end": "851480"
  },
  {
    "text": "you'll actually lose some performance by that but we are assuming that you want that uh ordering in your system and that",
    "start": "851480",
    "end": "859320"
  },
  {
    "text": "ordering is becomes very critical especially in the multi-core systems where you are running lots of threads on",
    "start": "859320",
    "end": "865480"
  },
  {
    "start": "864000",
    "end": "914000"
  },
  {
    "text": "on and you do have lots of CPUs to take advantage of that so um so the whole",
    "start": "865480",
    "end": "871720"
  },
  {
    "text": "volatile um Concepts um redefining the volatile as as a as forcing um order",
    "start": "871720",
    "end": "878759"
  },
  {
    "text": "within how things how memory is accessed has made sure uh has brought at least",
    "start": "878759",
    "end": "884600"
  },
  {
    "text": "the happens before causality into into the jvm and that has uh given um more um",
    "start": "884600",
    "end": "892519"
  },
  {
    "text": "the that has actually saved quote unquote the U order across across the um",
    "start": "892519",
    "end": "899040"
  },
  {
    "text": "jvm so data races are less likely because your memory model is busted memory model is now actually been fixed",
    "start": "899040",
    "end": "905160"
  },
  {
    "text": "and so you don't need to see data rases if you have not introduced them sort of",
    "start": "905160",
    "end": "910680"
  },
  {
    "text": "right um then you see future task um how many have you most of you have probably",
    "start": "910680",
    "end": "916720"
  },
  {
    "text": "used future task behind so um so yeah so the last five years of of programming in",
    "start": "916720",
    "end": "923000"
  },
  {
    "text": "Java is so different from the first 15 10 years right because now you have all",
    "start": "923000",
    "end": "928639"
  },
  {
    "text": "these nice little cool collections you have you have uh cues blocking cues and",
    "start": "928639",
    "end": "934040"
  },
  {
    "text": "and and ways to use them and so so some of the new uh Big Data um projects actually have used that have started in",
    "start": "934040",
    "end": "941240"
  },
  {
    "text": "2005 and six and seven so these are new code bases and their code is so if we we occasionally look at code that was",
    "start": "941240",
    "end": "947839"
  },
  {
    "text": "written in 2000 like Tom cat has about 400,000 lines of code and then you look at the new code bases which are doing",
    "start": "947839",
    "end": "954279"
  },
  {
    "text": "much bigger uh task than a traditional Tomcat have less than like 75,000 80,000",
    "start": "954279",
    "end": "959680"
  },
  {
    "text": "lines of code so so 5x Shen code much more work the the the idea is they using",
    "start": "959680",
    "end": "967160"
  },
  {
    "start": "967000",
    "end": "1064000"
  },
  {
    "text": "future task and blocking Keys blocking cues and all the new collections that have been invented after which which",
    "start": "967160",
    "end": "972800"
  },
  {
    "text": "allow you to do a lot more a lot less code uh and do a lot of runtime typing",
    "start": "972800",
    "end": "977839"
  },
  {
    "text": "um so but but the reason this thing is here is that future task actually uses simple counters uh simple cast castable",
    "start": "977839",
    "end": "986480"
  },
  {
    "text": "counters or Atomic counters to take advantage of creating order so for",
    "start": "986480",
    "end": "992199"
  },
  {
    "text": "example if you know that um so a a simple way to think about this is if you",
    "start": "992199",
    "end": "998920"
  },
  {
    "text": "know that a will happen before B so um in other words you're incrementing I so",
    "start": "998920",
    "end": "1006079"
  },
  {
    "text": "you have I i++ right so you're incrementing I so if I becomes from one goes from one to two you know that",
    "start": "1006079",
    "end": "1012800"
  },
  {
    "text": "that's actually going forward so let's say that's going forward in time you can basically connect that series of events",
    "start": "1012800",
    "end": "1020000"
  },
  {
    "text": "which are going forward in time with your time to deriving your own time so in other words you're piggybacking on",
    "start": "1020000",
    "end": "1026079"
  },
  {
    "text": "something that is guaranteed to go forward in time with u your own logic so in future task you'd say okay that's a I",
    "start": "1026079",
    "end": "1032918"
  },
  {
    "text": "know that's going forward so I can also increment my own thing so in some sense you're not putting um you're not forcing",
    "start": "1032919",
    "end": "1040400"
  },
  {
    "text": "your your variable to be volatile or you're were able to be synchronized you're just deriving forward motion by",
    "start": "1040400",
    "end": "1048400"
  },
  {
    "text": "piggyback on some other thing that's moving forward so that's kind of the uh the the concept behind behind so",
    "start": "1048400",
    "end": "1054960"
  },
  {
    "text": "iterators use this all the time and that's kind of the uh reason that's Plus+ look at jsr 133 um that's a very",
    "start": "1054960",
    "end": "1062360"
  },
  {
    "text": "um um common that that brought all the concr collections into the jbm",
    "start": "1062360",
    "end": "1069840"
  },
  {
    "start": "1064000",
    "end": "1214000"
  },
  {
    "text": "so here's um another take I don't know how well it um shows take from actually",
    "start": "1070320",
    "end": "1078320"
  },
  {
    "text": "reminds me of the oldfashioned slides which we used to use present but um this",
    "start": "1078320",
    "end": "1083640"
  },
  {
    "text": "is showing that a thread local on a so the comp the so this is comparing lock",
    "start": "1083640",
    "end": "1090200"
  },
  {
    "text": "uh performance between lock and atomic integer right so what's the performance difference between locking and using a",
    "start": "1090200",
    "end": "1097039"
  },
  {
    "text": "uh re-entrant lock or an atomic integer I think the program here was a pseudo random number generator um and and so",
    "start": "1097039",
    "end": "1105159"
  },
  {
    "text": "for high contention a a a thread local lock is actually faster um than um the",
    "start": "1105159",
    "end": "1112720"
  },
  {
    "text": "other the um than your Atomic integer or reant lock where they actually exceed is",
    "start": "1112720",
    "end": "1119720"
  },
  {
    "text": "actually in your moderate contention so if you you don't have contention at all then you're you're better off with the",
    "start": "1119720",
    "end": "1126000"
  },
  {
    "text": "other other side so it's kind of a taken from the compeny practice practice Brian",
    "start": "1126000",
    "end": "1131200"
  },
  {
    "text": "gets talks of feel free to go look at it um Java util concurent also has locks",
    "start": "1131200",
    "end": "1138880"
  },
  {
    "text": "so don't forget the Java also has locks it's actually a uh a visual from um um",
    "start": "1138880",
    "end": "1145480"
  },
  {
    "text": "the from IBM tool actually that does um show ju statistics so um there is a",
    "start": "1145480",
    "end": "1152720"
  },
  {
    "text": "monitor even behind jav so don't um assume that just because we have used Java conent locking is",
    "start": "1152720",
    "end": "1160280"
  },
  {
    "text": "gone uh here's a tomcat in production that we uh managed to catch um how the",
    "start": "1160280",
    "end": "1168240"
  },
  {
    "text": "the session manager locks under contention this actually real code um",
    "start": "1168240",
    "end": "1173320"
  },
  {
    "text": "went on to go and fix the hashmap on the top um which is highly contended so if",
    "start": "1173320",
    "end": "1178440"
  },
  {
    "text": "you write your program make sure you run it against a large load High concurrency load to see where your locks are uh it's",
    "start": "1178440",
    "end": "1185640"
  },
  {
    "text": "it's it's important to know as a designer where things could be so it's not a surprise we actually um the",
    "start": "1185640",
    "end": "1191720"
  },
  {
    "text": "standard manager we we actually patched Tom car at that point and and that went away it's when you actually look at the",
    "start": "1191720",
    "end": "1198159"
  },
  {
    "text": "code it's very trivial uh you look at once you double once you know where the lock is if you open the code you oh",
    "start": "1198159",
    "end": "1204200"
  },
  {
    "text": "that's a trivial thing usually very trivial thing instead of being in production and knowing that you have only 30 threats",
    "start": "1204200",
    "end": "1210440"
  },
  {
    "text": "are working this is very easy way to do it this this is actually the Z Vision tool from um non-blocking collections um yeah",
    "start": "1210440",
    "end": "1219400"
  },
  {
    "start": "1214000",
    "end": "1524000"
  },
  {
    "text": "so one of the things that we realize is amal's law actually trums M law um if",
    "start": "1219400",
    "end": "1225159"
  },
  {
    "text": "you have a large single threaded part of your program um mlaw is not increasing",
    "start": "1225159",
    "end": "1231000"
  },
  {
    "text": "um megahertz anymore it's increasing more cores right so Mo law is still in effect you're actually getting more",
    "start": "1231000",
    "end": "1237159"
  },
  {
    "text": "transistors but they are all parallel so um what what we need to um realize that",
    "start": "1237159",
    "end": "1242960"
  },
  {
    "text": "um you you not going um um parallel you're going to be in trouble um so we",
    "start": "1242960",
    "end": "1251200"
  },
  {
    "text": "actually looked at an example of State actions and key value pairs earlier if you looked at that um object um model",
    "start": "1251200",
    "end": "1259080"
  },
  {
    "text": "how how an object is represented inside the word the mark word it was a state and actions what to do and a key value",
    "start": "1259080",
    "end": "1266200"
  },
  {
    "text": "pair so the one of the um one of the key things that we learned um trying to",
    "start": "1266200",
    "end": "1271880"
  },
  {
    "text": "trying to do concr programming is that if you can actually parlay your program to a state",
    "start": "1271880",
    "end": "1280240"
  },
  {
    "text": "and action um you're you're able to look at um go back to finan State machines",
    "start": "1280240",
    "end": "1285799"
  },
  {
    "text": "the automata theory that we learned in our undergrad if you go back to that state where we were looking at okay this is a state",
    "start": "1285799",
    "end": "1292679"
  },
  {
    "text": "this is the various possibilities for it if you and these are the various values that you can move to so uh once you come",
    "start": "1292679",
    "end": "1299120"
  },
  {
    "text": "to that level of understanding of your program um multi-threaded programing become becomes very uh natural um",
    "start": "1299120",
    "end": "1306679"
  },
  {
    "text": "otherwise you're constantly looking at a code fragment and trying to see how what",
    "start": "1306679",
    "end": "1312559"
  },
  {
    "text": "variables to lock up right so and that's that's uh a different way of uh looking",
    "start": "1312559",
    "end": "1317840"
  },
  {
    "text": "at synchronization um come up with parallelism requirements very early on in your in your coding",
    "start": "1317840",
    "end": "1324440"
  },
  {
    "text": "practice so then you can actually look at um a unbuilt product in some sense",
    "start": "1324440",
    "end": "1331159"
  },
  {
    "text": "and come up with an algorithm that would say okay this this thing can transition this many ways so in in in this case if",
    "start": "1331159",
    "end": "1337360"
  },
  {
    "text": "you look at uh a hashmap and we we often do this as part of our um of our of our",
    "start": "1337360",
    "end": "1343520"
  },
  {
    "text": "new people when they join our company we tend to ask them to design one one that",
    "start": "1343520",
    "end": "1348799"
  },
  {
    "text": "doesn't block right so if you look at hashmap these are the five four operations it has get put delete and",
    "start": "1348799",
    "end": "1354240"
  },
  {
    "text": "resize right um You you need to store your data somewhere right so you have",
    "start": "1354240",
    "end": "1359440"
  },
  {
    "text": "bite arrays um so you so bite arrays of course are the most inexpensive ones to",
    "start": "1359440",
    "end": "1364480"
  },
  {
    "text": "start with so let's use that as your data to put your data where where you put in data so you have a collection of",
    "start": "1364480",
    "end": "1370440"
  },
  {
    "text": "B and then how do you how how do you want to avoid locks so you know there",
    "start": "1370440",
    "end": "1375679"
  },
  {
    "text": "are some automics in in in the jbm and that's C uh provided by the hardware for you for cheap uh and then there are um",
    "start": "1375679",
    "end": "1383520"
  },
  {
    "text": "um so you you want to use the C so this this implementation by Cliff click",
    "start": "1383520",
    "end": "1388880"
  },
  {
    "text": "actually um uses no locks and no volatile so so that's a a very good um",
    "start": "1388880",
    "end": "1394760"
  },
  {
    "text": "open source um Source porch has this code uh it's actually part of Cassandra it's also part of a lot of other uh big",
    "start": "1394760",
    "end": "1401760"
  },
  {
    "text": "collections that I've seen uh recently where you can get a completely uh scaling High scale U with lot number of",
    "start": "1401760",
    "end": "1408919"
  },
  {
    "text": "threads you get a lot of um you get the throughput that you expect um what we found so the Crux of that algorithm was",
    "start": "1408919",
    "end": "1416159"
  },
  {
    "text": "basically okay you have a for the most of the your reads so if you if you're doing just puts um you don't actually",
    "start": "1416159",
    "end": "1421880"
  },
  {
    "text": "need to lock for a long time that's what the interesting thing was um unless your hash is broken or your collisions but",
    "start": "1421880",
    "end": "1429080"
  },
  {
    "text": "for the most part your puts don't need uh any locks on the way it's your uh when you're putting and getting from the",
    "start": "1429080",
    "end": "1435480"
  },
  {
    "text": "same contended hash um key that's when you're actually trying to",
    "start": "1435480",
    "end": "1440520"
  },
  {
    "text": "come to a lock right so so if you use cast you so that's the most contented part the other part is when you're",
    "start": "1440520",
    "end": "1446880"
  },
  {
    "text": "actually uh resizing so if you hit the full limit of your bite array you you need to um have a big larger overflow by",
    "start": "1446880",
    "end": "1454960"
  },
  {
    "text": "array copy this over and then while you're copying over you have another",
    "start": "1454960",
    "end": "1461080"
  },
  {
    "text": "small segment which is critical section so during your copy you you need to backfill your rights and then use that",
    "start": "1461080",
    "end": "1468880"
  },
  {
    "text": "overflow buffer merge the two buffers so in some sense um this this um this is an",
    "start": "1468880",
    "end": "1474760"
  },
  {
    "text": "interesting um approach um to doing collections and actually now it's very",
    "start": "1474760",
    "end": "1480640"
  },
  {
    "text": "common to see non-blocking Stacks non-blocking link lists and so on so forth so the the copy arrate so this is",
    "start": "1480640",
    "end": "1486960"
  },
  {
    "text": "the kind of the resize algorithm so this is kind of pseudo code on the slide um but real code exists and real code",
    "start": "1486960",
    "end": "1493760"
  },
  {
    "text": "actually speaks does does speak very well um and runs very well um so we've seen we've seen um other parts of the",
    "start": "1493760",
    "end": "1500760"
  },
  {
    "text": "system lock up um because of this hashmap because it's really lock free",
    "start": "1500760",
    "end": "1505840"
  },
  {
    "text": "scale free okay all right uh who has not seen Java",
    "start": "1505840",
    "end": "1511960"
  },
  {
    "text": "or heads right have uh C versus Java Wars rage pretty um widely across",
    "start": "1511960",
    "end": "1519279"
  },
  {
    "text": "different age groups of coding um so what is the cost of an eight car string",
    "start": "1519279",
    "end": "1524960"
  },
  {
    "text": "right all you wanted was an eight car hello world right not even world and",
    "start": "1524960",
    "end": "1530120"
  },
  {
    "text": "Java takes about 56 bites to write hello world right that's a lot um so where",
    "start": "1530120",
    "end": "1536679"
  },
  {
    "text": "does that go it goes into the headers the fields and part of the headers that we talked about earlier pointers and",
    "start": "1536679",
    "end": "1543520"
  },
  {
    "text": "then you have length actual data is there right so and then you still pad it so that you can of course there are some",
    "start": "1543520",
    "end": "1549559"
  },
  {
    "text": "optimized string representations and string collections but that's what you're using when you're using a Java",
    "start": "1549559",
    "end": "1555080"
  },
  {
    "text": "Lang string right um T map actually treap is a u very popular um ordered",
    "start": "1555080",
    "end": "1562600"
  },
  {
    "text": "collection right so ordered set um again treap has if if you use the Double",
    "start": "1562600",
    "end": "1568679"
  },
  {
    "text": "Double Tree map the interesting thing is tree map has the Stree map Dollar entry which basically um it's not amortized so",
    "start": "1568679",
    "end": "1577880"
  },
  {
    "text": "sometimes you use a collection you amortize your your cost up front so if if you used a kind of like a link list",
    "start": "1577880",
    "end": "1584799"
  },
  {
    "text": "right so you basically um or an array you actually basically the overall",
    "start": "1584799",
    "end": "1591720"
  },
  {
    "text": "structure has some cost and the actual per elment cost is is cheap so after",
    "start": "1591720",
    "end": "1597159"
  },
  {
    "text": "some size you're okay using that collection the problem with treap is that you're using this treap 40 byte",
    "start": "1597159",
    "end": "1603520"
  },
  {
    "text": "array almost every time so so you get to a blow up of really 5x so that's a large",
    "start": "1603520",
    "end": "1609440"
  },
  {
    "text": "uh overhead so think about what collections you use when when you have smaller sets so it's really if you need",
    "start": "1609440",
    "end": "1616600"
  },
  {
    "text": "the ordering and sometimes using a real double double um Like A Primitive double double it's much faster but if you need",
    "start": "1616600",
    "end": "1623640"
  },
  {
    "text": "the ordering done for you for ship you probably have no choice but to use this but um maybe maybe you can write a small",
    "start": "1623640",
    "end": "1631600"
  },
  {
    "text": "function that can do it if your set is not out of bounds so that's that's kind",
    "start": "1631600",
    "end": "1637120"
  },
  {
    "text": "of the um Crux of this um you look at memory profiles um so actually there's a",
    "start": "1637120",
    "end": "1643440"
  },
  {
    "text": "there's a the average collection size is roughly three so one thing we did was",
    "start": "1643440",
    "end": "1649200"
  },
  {
    "text": "study all the sites of collections but anyway here's a memory profile this is Cassandra um the core uh data structure",
    "start": "1649200",
    "end": "1655960"
  },
  {
    "start": "1654000",
    "end": "1689000"
  },
  {
    "text": "for it is a concurrent skip list and the concurrent skip list also has an overhead um that's reasonably well",
    "start": "1655960",
    "end": "1662760"
  },
  {
    "text": "amortized but it is expecting ordering it does ordering for us and we kind of want it to order but um if you look at",
    "start": "1662760",
    "end": "1670000"
  },
  {
    "text": "the actual um it's one of the top things in in our heaps so that's what takes the",
    "start": "1670000",
    "end": "1675240"
  },
  {
    "text": "bite array it's use bite array for presentation that's what of the top top item there",
    "start": "1675240",
    "end": "1682320"
  },
  {
    "text": "so so um which collection do I go with and so there are a bunch of so if you're",
    "start": "1682320",
    "end": "1687760"
  },
  {
    "text": "thinking about concurrency Google Collections nbhm these are very common um U good collections out there but",
    "start": "1687760",
    "end": "1695399"
  },
  {
    "start": "1689000",
    "end": "1757000"
  },
  {
    "text": "watch out for per element cost so if you write a small micro program so in this case you can actually get a rough idea",
    "start": "1695399",
    "end": "1702279"
  },
  {
    "text": "like a small so before you jump to using a collection of course write it but make sure measure it see if it the collection",
    "start": "1702279",
    "end": "1709799"
  },
  {
    "text": "is growing out of bounds as you add elements or if it's if it's coming down",
    "start": "1709799",
    "end": "1714960"
  },
  {
    "text": "to a if you're a monetizing your cost early on so it's kind of a um um so the",
    "start": "1714960",
    "end": "1720399"
  },
  {
    "text": "trade-off is is the collection actually per element cost or not so that's kind of your big big thing to look for",
    "start": "1720399",
    "end": "1726640"
  },
  {
    "text": "Primitives are are cheap and but they can be hard to manage so if you if you have a uh very large collection then",
    "start": "1726640",
    "end": "1734120"
  },
  {
    "text": "sometimes you do want to use a real collection as opposed to Primitives so but the average collections are really",
    "start": "1734120",
    "end": "1740600"
  },
  {
    "text": "very sparse and they're roughly size three so for three- sized um collection",
    "start": "1740600",
    "end": "1745880"
  },
  {
    "text": "don't put a huge um huge big large collection in",
    "start": "1745880",
    "end": "1751200"
  },
  {
    "text": "there that we jump quickly to serialization piece right so serialization has gone um really um on I",
    "start": "1751200",
    "end": "1760440"
  },
  {
    "start": "1757000",
    "end": "1892000"
  },
  {
    "text": "mean Java iio serial serializable is really really slow and historically um",
    "start": "1760440",
    "end": "1767360"
  },
  {
    "text": "it has been designed to be slow in some sense because Java expected things to move from one platform to another",
    "start": "1767360",
    "end": "1774279"
  },
  {
    "text": "platform or any other platform right so they made sure that all the protocols",
    "start": "1774279",
    "end": "1779320"
  },
  {
    "text": "are are kind of everything the entire object is flattened and and all even",
    "start": "1779320",
    "end": "1785480"
  },
  {
    "text": "information required environmental information required is flattened so you kind of take the whole thing across and",
    "start": "1785480",
    "end": "1791080"
  },
  {
    "text": "deize it it's really slow um so done true it's kind of like true color true",
    "start": "1791080",
    "end": "1796640"
  },
  {
    "text": "platform right um so how can you do better so if you use transient you can ensure that",
    "start": "1796640",
    "end": "1803799"
  },
  {
    "text": "certain fields that are actually that need to be seriz that are the ones that you want um can be shipped across so you",
    "start": "1803799",
    "end": "1810120"
  },
  {
    "text": "don't need to flatten the entire thing um another um so the other uh",
    "start": "1810120",
    "end": "1817240"
  },
  {
    "text": "externalizable so if you use an externalizable you can write your own roll your own um um serializer you can",
    "start": "1817240",
    "end": "1823840"
  },
  {
    "text": "say okay all I need is the ID of the stuff stored in database and I don't need the entire object because I can",
    "start": "1823840",
    "end": "1829760"
  },
  {
    "text": "recreate it here right if I need the ID don't serialize everything and ship it across so that's kind of your",
    "start": "1829760",
    "end": "1835600"
  },
  {
    "text": "externalizable you can create your all your own serializable now we'll we'll hear the",
    "start": "1835600",
    "end": "1842159"
  },
  {
    "text": "Gory details of Arro and Google protocol buffers um as we go forward but this",
    "start": "1842159",
    "end": "1847960"
  },
  {
    "text": "lack of good serialization at the core Java uh has led to almost uh the new uh",
    "start": "1847960",
    "end": "1856519"
  },
  {
    "text": "the New Evolution of jav software we're seeing which is the thrift AO and Google protocol buffers based systems and",
    "start": "1856519",
    "end": "1864000"
  },
  {
    "text": "that's kind of the heart of where Big Data uh started again um instead of suffering like the",
    "start": "1864000",
    "end": "1870919"
  },
  {
    "text": "the old web logic web sphere uh stacks of systems suffered the RMI corbas and",
    "start": "1870919",
    "end": "1877360"
  },
  {
    "text": "and put it inside their uh overall scalability uh challenge um the new",
    "start": "1877360",
    "end": "1882480"
  },
  {
    "text": "structures um gave up the old serializable and took on to this uh techniques",
    "start": "1882480",
    "end": "1888799"
  },
  {
    "text": "um a common Benchmark that's out there um is the CES Benchmark and um does uh",
    "start": "1888799",
    "end": "1896000"
  },
  {
    "start": "1892000",
    "end": "1979000"
  },
  {
    "text": "put um if you look at the roll your own is still on the top the Java manual and somewhere down here is Java builtin",
    "start": "1896000",
    "end": "1903039"
  },
  {
    "text": "really slow like many times over slow uh Thrift is somewhere here protocol thrift protuff Thrift and um Thrift compact",
    "start": "1903039",
    "end": "1910559"
  },
  {
    "text": "Thrift 06 is actually much faster than4 U did some benchmarking recently as well",
    "start": "1910559",
    "end": "1917399"
  },
  {
    "text": "um but yeah it's across the board right somewhere down here is Json which also",
    "start": "1917399",
    "end": "1923519"
  },
  {
    "text": "is another common popular one people use it more often than you expect XML",
    "start": "1923519",
    "end": "1929360"
  },
  {
    "text": "another so know the Spectrum um this is actually the cost so this we measuring",
    "start": "1929360",
    "end": "1934600"
  },
  {
    "text": "this actually a benchmark from GitHub um very reasonably common Benchmark 30",
    "start": "1934600",
    "end": "1940200"
  },
  {
    "text": "Benchmark um this is me measuring the whole object calization transfer and",
    "start": "1940200",
    "end": "1946919"
  },
  {
    "text": "distalization costes it's the full full cycle and some of them are better on allocation some of them are better on",
    "start": "1946919",
    "end": "1952760"
  },
  {
    "text": "dation so some some Nuance exists a somewhere here right with Aro um so again uh duck",
    "start": "1952760",
    "end": "1962519"
  },
  {
    "text": "cutting uh has poured a lot of work around a so if you if you hear him talk",
    "start": "1962519",
    "end": "1969799"
  },
  {
    "text": "any of the new recent conferences um definitely attend and know all the Gory details of Arrow inside um the Crocs of",
    "start": "1969799",
    "end": "1977880"
  },
  {
    "text": "of it is being able to separate your schema of your object from the actual representation in the calization so um",
    "start": "1977880",
    "end": "1985960"
  },
  {
    "start": "1979000",
    "end": "2092000"
  },
  {
    "text": "one common and and I didn't realize there was an easy way to demo it one common thing I usually do is like dump a",
    "start": "1985960",
    "end": "1992320"
  },
  {
    "text": "calization uh serialized hello world object and look at it and see what's",
    "start": "1992320",
    "end": "1997399"
  },
  {
    "text": "inside right if you do a hex editor and look at it people actually have the entire um object feels and see and then",
    "start": "1997399",
    "end": "2004559"
  },
  {
    "text": "there is the string hello world so it's very um um very uh insightful uh in the sense",
    "start": "2004559",
    "end": "2011960"
  },
  {
    "text": "that if you look at the aod dumped um stuff types are all runtime you don't actually have to predefine um all your",
    "start": "2011960",
    "end": "2018440"
  },
  {
    "text": "types you don't have to predefine um um the data is untagged so you don't need to tag your data so you can actually get",
    "start": "2018440",
    "end": "2024840"
  },
  {
    "text": "it across without having to change um and all the field IDs are uh are",
    "start": "2024840",
    "end": "2030600"
  },
  {
    "text": "pre-assigned so you don't actually have to manually assign manual assignment of fields um causes is eror prone at the",
    "start": "2030600",
    "end": "2037279"
  },
  {
    "text": "same time also um less effective right um but then you you could ship the from",
    "start": "2037279",
    "end": "2043399"
  },
  {
    "text": "one jbm to other jbm that jbm might have a different version so you still prone to schema mismatches if you had a schema",
    "start": "2043399",
    "end": "2050000"
  },
  {
    "text": "mismatch um so if you if you came up used one uh side of the data the other",
    "start": "2050000",
    "end": "2055960"
  },
  {
    "text": "side did not have the right schema you could have a mismatch so so there are some issues with it um but uh and since",
    "start": "2055960",
    "end": "2063760"
  },
  {
    "text": "they are only runtime checks you don't catch them during compile time so all",
    "start": "2063760",
    "end": "2068919"
  },
  {
    "text": "all these checks type checking is postponed to runtime so you you may actually catch it in real time in",
    "start": "2068919",
    "end": "2075118"
  },
  {
    "text": "production and so that's kind of one of the uh Cons with arrow but um I mean if",
    "start": "2075119",
    "end": "2080839"
  },
  {
    "text": "you're if you're using the had family of stuff or hbas and there's a ton of good",
    "start": "2080839",
    "end": "2086480"
  },
  {
    "text": "um um classes of programs that are using Amro Google protocol buffers so um Proto",
    "start": "2086480",
    "end": "2093919"
  },
  {
    "start": "2092000",
    "end": "2179000"
  },
  {
    "text": "Buffs came along um around the time when distributed cashing became very popular everyone started writing their own",
    "start": "2093919",
    "end": "2099640"
  },
  {
    "text": "protocol buffers and try to U compr try to reduce the copies so here you deci",
    "start": "2099640",
    "end": "2107079"
  },
  {
    "text": "you you can predefine your entire message format in a do Proto file so so if you look at this schema you take a",
    "start": "2107079",
    "end": "2113599"
  },
  {
    "text": "class every class um you create a full Proto so once you have a DOT Proto you",
    "start": "2113599",
    "end": "2119520"
  },
  {
    "text": "can then generate the other side the class the model area so um the the",
    "start": "2119520",
    "end": "2126800"
  },
  {
    "text": "interesting thing with protocol buffers is you actually have all the um types of",
    "start": "2126800",
    "end": "2132359"
  },
  {
    "text": "the fields just like a database would do have the fields field matchings um so you you can basically you ship the data",
    "start": "2132359",
    "end": "2139800"
  },
  {
    "text": "just as key value Pairs and based on ID ret recover it from the file it's a very",
    "start": "2139800",
    "end": "2146599"
  },
  {
    "text": "um um um very database approach data approach data data oriented approach to",
    "start": "2146599",
    "end": "2152240"
  },
  {
    "text": "doing ciz and dation um reasonably very fast and so um um",
    "start": "2152240",
    "end": "2158400"
  },
  {
    "text": "yeah so there is um Android uses protocol across the board um most of",
    "start": "2158400",
    "end": "2165119"
  },
  {
    "text": "Google Java products um big table and others end up using protocol poers in back",
    "start": "2165119",
    "end": "2172800"
  },
  {
    "text": "um Thrift um so Cassandra Uses thrift and Thrift actually is pretty um pretty",
    "start": "2174000",
    "end": "2181880"
  },
  {
    "start": "2179000",
    "end": "2284000"
  },
  {
    "text": "um very layered approach so in some sense this is almost the closest to Java",
    "start": "2181880",
    "end": "2188119"
  },
  {
    "text": "um in some sense because it actually does the entire uh from your client to server if you shift shift an object",
    "start": "2188119",
    "end": "2194440"
  },
  {
    "text": "across you would actually take it through the entire stack just like you",
    "start": "2194440",
    "end": "2199480"
  },
  {
    "text": "do do tcpip um and ship the entire um um all",
    "start": "2199480",
    "end": "2205480"
  },
  {
    "text": "the various layers of that across and it's recreated for you on the silver",
    "start": "2205480",
    "end": "2211160"
  },
  {
    "text": "side all the way up the St so it's kind of separated separates the structure from the actual protocol and transport",
    "start": "2211160",
    "end": "2218400"
  },
  {
    "text": "so in some sense it is very uh portable uh at the same time it does have that",
    "start": "2218400",
    "end": "2224319"
  },
  {
    "text": "overhead it does have all the layers it does have t socket and T file transport",
    "start": "2224319",
    "end": "2229400"
  },
  {
    "text": "which you have to manage it's new new way of doing so it wraps around existing socket creates uh um catch and so",
    "start": "2229400",
    "end": "2238079"
  },
  {
    "text": "creates exception handling around it but um it's a very so it doesn't differentiate between socket or file it",
    "start": "2238079",
    "end": "2245119"
  },
  {
    "text": "it's it's just transferring things across iio channels so it's really a a clean and IO protocol um expecting",
    "start": "2245119",
    "end": "2253599"
  },
  {
    "text": "things to go across the wire out of the box so there's no um nuances around it",
    "start": "2253599",
    "end": "2258720"
  },
  {
    "text": "right um of course um so you could compact it make it compression so you",
    "start": "2258720",
    "end": "2264040"
  },
  {
    "text": "get some performance over there um still regardless it's it's a it's a heavier um",
    "start": "2264040",
    "end": "2270040"
  },
  {
    "text": "system out there but it is um it is the most portable of them all",
    "start": "2270040",
    "end": "2275800"
  },
  {
    "text": "so um with that we jump to the next fragment of this um of stock which is U",
    "start": "2275800",
    "end": "2283560"
  },
  {
    "text": "IDs so uh how many of you have used U IDs of",
    "start": "2283560",
    "end": "2289520"
  },
  {
    "start": "2284000",
    "end": "2374000"
  },
  {
    "text": "late almost all of you so um the good news is we don't use anymore um the",
    "start": "2289520",
    "end": "2296040"
  },
  {
    "text": "basic random call and random men create an ID and assum it's it's Unique you we",
    "start": "2296040",
    "end": "2301800"
  },
  {
    "text": "end up having to use U ID if you have used code recently turns out the default",
    "start": "2301800",
    "end": "2307839"
  },
  {
    "text": "actually behind the scenes um I mean so Le Lee shs is the 128 bit um that's the",
    "start": "2307839",
    "end": "2314960"
  },
  {
    "text": "actual definition for uid actually there might be one yeah so um a uid is",
    "start": "2314960",
    "end": "2320720"
  },
  {
    "text": "actually if you break break down has these various nuances to it right so you",
    "start": "2320720",
    "end": "2326319"
  },
  {
    "text": "have four parts to your um to to U ID um",
    "start": "2326319",
    "end": "2332119"
  },
  {
    "text": "and so this is the classic um I I put this function up here because the two string is the most common thing to call",
    "start": "2332119",
    "end": "2339560"
  },
  {
    "text": "on your U uid people create uid then create a string out of it and then use it in the program um it's a Time Low",
    "start": "2339560",
    "end": "2347560"
  },
  {
    "text": "Time a and a high version and a variant sequence this is kind of your um telling you what um what definition of U ID",
    "start": "2347560",
    "end": "2355079"
  },
  {
    "text": "you're using and four is the one that we use for leals um so if you so that's",
    "start": "2355079",
    "end": "2361000"
  },
  {
    "text": "kind of this four um go back um it's so the the basic the",
    "start": "2361000",
    "end": "2369359"
  },
  {
    "text": "default uid is using S transform and so it's expensive also users turns out the",
    "start": "2369359",
    "end": "2377640"
  },
  {
    "text": "default sudo random number generator which is actually in the sun jvm um it",
    "start": "2377640",
    "end": "2382960"
  },
  {
    "text": "tries to get a seed for your Dev Ur random um/ Dev your random even on ec2",
    "start": "2382960",
    "end": "2389880"
  },
  {
    "text": "is a file system call right so it go to the VMware layers and call make a file",
    "start": "2389880",
    "end": "2395839"
  },
  {
    "text": "call so if you're running happily in memory your call for the first for every",
    "start": "2395839",
    "end": "2401240"
  },
  {
    "text": "U ID is actually goes to the file so uh you could disable it by saying EGD file",
    "start": "2401240",
    "end": "2406720"
  },
  {
    "text": "does not a file name that does not exist never go back and does about 20 40%",
    "start": "2406720",
    "end": "2412640"
  },
  {
    "text": "better because it actually uses the local um algorithmic number generator",
    "start": "2412640",
    "end": "2418160"
  },
  {
    "text": "which is faster but fast forward people today use",
    "start": "2418160",
    "end": "2423440"
  },
  {
    "text": "time uu ID time turns of time actually is a pretty uh um the current clock time is pretty um good seed to start from",
    "start": "2423440",
    "end": "2431400"
  },
  {
    "text": "right so using that to create your um time U much faster there lots of",
    "start": "2431400",
    "end": "2436680"
  },
  {
    "text": "Alternatives out there it's about 10 times faster because the time call is actually a system time M call right um",
    "start": "2436680",
    "end": "2444319"
  },
  {
    "text": "there's an actually open source a couple of these are open source projects coton coder another um pretty vigorous coder",
    "start": "2444319",
    "end": "2451560"
  },
  {
    "text": "as well and um there's a call that you can look at these links uh offline but",
    "start": "2451560",
    "end": "2457319"
  },
  {
    "text": "these are pretty fast implementations for uids that actually are used in some of the open source projects for Big",
    "start": "2457319",
    "end": "2464000"
  },
  {
    "text": "Data here's a quick run on on a regular program that it's actually output of",
    "start": "2464000",
    "end": "2470440"
  },
  {
    "text": "perf top so perf has a um the package perf that we called out earlier actually",
    "start": "2470440",
    "end": "2477079"
  },
  {
    "text": "has a program called perf top which gives you the breakdown how your um how",
    "start": "2477079",
    "end": "2482720"
  },
  {
    "text": "your uh program ran and so it kind of gives you the kernel time on this one is much higher than the colel time on that",
    "start": "2482720",
    "end": "2487839"
  },
  {
    "text": "and that's basically the jbms here s transform kill",
    "start": "2487839",
    "end": "2493160"
  },
  {
    "text": "program summary use um time based U IDs where you can it's much much faster it's",
    "start": "2493160",
    "end": "2499359"
  },
  {
    "start": "2499000",
    "end": "2559000"
  },
  {
    "text": "a much op well optimized program of java um four times less colel creation time",
    "start": "2499359",
    "end": "2506720"
  },
  {
    "text": "and so on so for so um definitely better instructions for clocks causes um if you're on ec2 try",
    "start": "2506720",
    "end": "2515079"
  },
  {
    "text": "and see that you don't um yeah go ahead there's no native jort for",
    "start": "2515079",
    "end": "2521119"
  },
  {
    "text": "time there is no yeah be useful to have that project coin is initially had that",
    "start": "2521119",
    "end": "2529640"
  },
  {
    "text": "I have not seen the code come in yet so yeah useful all right so that's that's your",
    "start": "2529640",
    "end": "2536720"
  },
  {
    "text": "ID's um chart section yeah so the two",
    "start": "2536720",
    "end": "2541800"
  },
  {
    "text": "string so so two string is a common call so time based U actually have a two",
    "start": "2541800",
    "end": "2547880"
  },
  {
    "text": "string that's optimized make sure it's fast strings two string to string theory",
    "start": "2547880",
    "end": "2556240"
  },
  {
    "text": "um turns out strings are um I mean we could go we could do a full talk on just",
    "start": "2556240",
    "end": "2562280"
  },
  {
    "start": "2559000",
    "end": "2629000"
  },
  {
    "text": "Java Lang string because uh we use it every day and not until recently B",
    "start": "2562280",
    "end": "2569160"
  },
  {
    "text": "arays were not part of I mean character race versus b r up until a Long Time",
    "start": "2569160",
    "end": "2575520"
  },
  {
    "text": "character rise so bays are in and um there's actually a new um flag that was",
    "start": "2575520",
    "end": "2581760"
  },
  {
    "text": "in um that we found through benchmarking that just compressing your strings can actually do um pretty good things to",
    "start": "2581760",
    "end": "2588960"
  },
  {
    "text": "your memory so um strings are very compressible right so the classic lza",
    "start": "2588960",
    "end": "2594920"
  },
  {
    "text": "algorithms work very well on it so there's a new flag um that came up in",
    "start": "2594920",
    "end": "2599960"
  },
  {
    "text": "very new jdk we've used some of it does reasonably well can't watch for it because I've not actually put things in",
    "start": "2599960",
    "end": "2606599"
  },
  {
    "text": "production with that yet so but it does give good performance benefits um append performance uh append",
    "start": "2606599",
    "end": "2614920"
  },
  {
    "text": "uh actually uh anyone who has used um open source portals like lifr or other",
    "start": "2614920",
    "end": "2620720"
  },
  {
    "text": "Java portals find that uh they actually have custom implementation for appens or",
    "start": "2620720",
    "end": "2625760"
  },
  {
    "text": "a wide appens completely if you you profile your code and reduce the number of appens you find that your GC",
    "start": "2625760",
    "end": "2631839"
  },
  {
    "text": "performance gets substantially better and it so there are a lot of nuances around a pen and so strings uh and",
    "start": "2631839",
    "end": "2639800"
  },
  {
    "text": "versus string buffers immutable strings versus mutable string buffers lot of",
    "start": "2639800",
    "end": "2644839"
  },
  {
    "text": "different uh overheads for that um Google has a bunch of um guwa project",
    "start": "2644839",
    "end": "2650720"
  },
  {
    "text": "which does a lot of good um good work with um Joiner so aens turns out so they",
    "start": "2650720",
    "end": "2656720"
  },
  {
    "text": "have a simple Joiner with a lot of um it joins text very cheaply um turns out if",
    "start": "2656720",
    "end": "2662839"
  },
  {
    "text": "you actually find U so turns out if you actually have uh",
    "start": "2662839",
    "end": "2667920"
  },
  {
    "text": "have n um so empty strings um turns out actually the checks for empty strings if",
    "start": "2667920",
    "end": "2674839"
  },
  {
    "text": "you if you actually instead of used a spring colol you actually get much better performance because the jbm",
    "start": "2674839",
    "end": "2680880"
  },
  {
    "text": "actually goes through a lot of checking to see this reference is actually looking if not so um skip NS and use for",
    "start": "2680880",
    "end": "2687880"
  },
  {
    "text": "n so if you use for n something default you can actually get a lot more performance from for your joiners",
    "start": "2687880",
    "end": "2694040"
  },
  {
    "text": "there's actually a splitter um which also uses behind the scenes means regex like things not using real regex the",
    "start": "2694040",
    "end": "2700839"
  },
  {
    "text": "Java Lang string actually ends up using regex by itself so which is a much more",
    "start": "2700839",
    "end": "2706200"
  },
  {
    "text": "heavier collection to use so um so it's an interesting uh",
    "start": "2706200",
    "end": "2713280"
  },
  {
    "text": "question right so if you have a string um and you want to let's say so",
    "start": "2713280",
    "end": "2720599"
  },
  {
    "text": "different different uh implementers over the course of the last few years came up with different ways to stuff your",
    "start": "2720599",
    "end": "2726960"
  },
  {
    "text": "strings so the 64-bit string for example um if you're mostly not filling up your",
    "start": "2726960",
    "end": "2734359"
  },
  {
    "text": "data um 32bit representation and compressing the rest of the part can",
    "start": "2734359",
    "end": "2740119"
  },
  {
    "text": "actually get you a lot of lot of performance so one other things that um if you use any um standard profilers",
    "start": "2740119",
    "end": "2748599"
  },
  {
    "text": "you'll find that um the first thing they break on is Java Lang string and the",
    "start": "2748599",
    "end": "2754000"
  },
  {
    "text": "reason is they expect an internal structure for your string and um the the the common nuances there",
    "start": "2754000",
    "end": "2761839"
  },
  {
    "text": "is when you touch strings um especially when you ex depend on the internal um",
    "start": "2761839",
    "end": "2768480"
  },
  {
    "text": "structure of your string you end up having to poke through the bite yourself",
    "start": "2768480",
    "end": "2774079"
  },
  {
    "text": "um and you're off on your own in some sense so so for the most part it's",
    "start": "2774079",
    "end": "2780480"
  },
  {
    "text": "encourage to not touch the internal um aspects and play with the bit yourself",
    "start": "2780480",
    "end": "2786520"
  },
  {
    "text": "because when when the global global system array copies come in play you're",
    "start": "2786520",
    "end": "2792280"
  },
  {
    "text": "you're thrown thrown by surprise but that said a lot of um like I've run into",
    "start": "2792280",
    "end": "2798839"
  },
  {
    "text": "this when um terracotta started using it um they were they expect a certain",
    "start": "2798839",
    "end": "2804559"
  },
  {
    "text": "layout for the string and you can actually as a program look at it and",
    "start": "2804559",
    "end": "2810200"
  },
  {
    "text": "make sure you're using the right internal fields and play with them but",
    "start": "2810200",
    "end": "2815319"
  },
  {
    "text": "um but you see different results when you use a different jvm or switch your jvm",
    "start": "2815319",
    "end": "2821000"
  },
  {
    "text": "under but um yeah so that's that's the string uh internals depending on sing",
    "start": "2821000",
    "end": "2827359"
  },
  {
    "text": "internals is is optimal if you don't change your jbms often yeah null",
    "start": "2827359",
    "end": "2834359"
  },
  {
    "text": "references this a call from um code from cuon last year",
    "start": "2834359",
    "end": "2840119"
  },
  {
    "text": "so with that I would go into garbage collection um if you have any questions",
    "start": "2840119",
    "end": "2845559"
  },
  {
    "text": "this would be a good spot to stop but it's also a good U as we go forward",
    "start": "2845559",
    "end": "2850640"
  },
  {
    "text": "we'll see a lot more GC Focus content",
    "start": "2850640",
    "end": "2856119"
  },
  {
    "text": "so so um best practices uh best practices for GC start with for both GC",
    "start": "2857400",
    "end": "2864440"
  },
  {
    "start": "2859000",
    "end": "2949000"
  },
  {
    "text": "so often times there's a misconception that GC logs I turn on GC logs and GC",
    "start": "2864440",
    "end": "2869920"
  },
  {
    "text": "problem um got worse or or logging IO problem got worse we looked at all these",
    "start": "2869920",
    "end": "2876839"
  },
  {
    "text": "GC logs are cheap and they are cheap even in production so feel be uh be",
    "start": "2876839",
    "end": "2882520"
  },
  {
    "text": "reasonably verbos at having them be reasonbly put your foot down if your Ops team is not giving it um yourself feel",
    "start": "2882520",
    "end": "2890000"
  },
  {
    "text": "free that we have Benchmark that part and that's actually reasonably cheap um it's not coming in the way of doing GC",
    "start": "2890000",
    "end": "2897160"
  },
  {
    "text": "for for the most all for the most part actually um there is a bit expensive ones and those are here and um um so but",
    "start": "2897160",
    "end": "2906839"
  },
  {
    "text": "that's when you're doing tuning hand tuning and then they're actually doing census for your object layout so",
    "start": "2906839",
    "end": "2913240"
  },
  {
    "text": "possibly for your question a tool based out of the freelist sensus can possibly",
    "start": "2913240",
    "end": "2919480"
  },
  {
    "text": "derive what part of that object layout is strings but it's an interesting it's",
    "start": "2919480",
    "end": "2924880"
  },
  {
    "text": "an interesting um uh topic uh but the turn on logs and turn turn them on very",
    "start": "2924880",
    "end": "2932440"
  },
  {
    "text": "explicitly um so if you get back to the core of GC um there are so if you if you",
    "start": "2932440",
    "end": "2940760"
  },
  {
    "text": "really um want to understand GC think of your app as",
    "start": "2940760",
    "end": "2946920"
  },
  {
    "text": "as um in a very abstract fashion your app is when it's running is doing a lot",
    "start": "2946920",
    "end": "2954359"
  },
  {
    "start": "2949000",
    "end": "3009000"
  },
  {
    "text": "of allocation right and an allocation is creation of new objects right and then",
    "start": "2954359",
    "end": "2959640"
  },
  {
    "text": "you have um kind of your system defined size you have you have memory right so",
    "start": "2959640",
    "end": "2966079"
  },
  {
    "text": "you have size your allocation rate so allocation rate is filling up your HEAP so let's say you have 1 gig of Heap and",
    "start": "2966079",
    "end": "2973160"
  },
  {
    "text": "you're allocating at 100 Megs per second you have 10 seconds of Runway right the",
    "start": "2973160",
    "end": "2978680"
  },
  {
    "text": "way to look at your size is you have yeah I have if I if I did not worry off any GC I can run this app till 10",
    "start": "2978680",
    "end": "2985480"
  },
  {
    "text": "seconds so that's that's kind of like Fast principle right then um while",
    "start": "2985480",
    "end": "2992640"
  },
  {
    "text": "you're allocating you're also um changing these objects so there's what's",
    "start": "2992640",
    "end": "2997799"
  },
  {
    "text": "called so all the allocation and the mutations these are all called mutators in in GC power lanss when you hear",
    "start": "2997799",
    "end": "3003559"
  },
  {
    "text": "someone say mutators that's your mutation that's where your allocation happen",
    "start": "3003559",
    "end": "3009319"
  },
  {
    "text": "now not all you're allocating is staying there so your life Heap may be like 256",
    "start": "3009319",
    "end": "3014799"
  },
  {
    "text": "Megs so then if you have 1 gig Heap you're allocating at 100 Megs a second you know you have 10 seconds before you",
    "start": "3014799",
    "end": "3022040"
  },
  {
    "text": "run out of memory you find out that some of these objects are dying while they are before even 10 seconds so if for",
    "start": "3022040",
    "end": "3029359"
  },
  {
    "text": "example your objects are dying at 500 at um half the rate you know that you're",
    "start": "3029359",
    "end": "3034680"
  },
  {
    "text": "always having a live heap of roughly half your your total gigs right so you",
    "start": "3034680",
    "end": "3039960"
  },
  {
    "text": "have half fightful amb so that's kind of your um trajectory of how your objects",
    "start": "3039960",
    "end": "3046319"
  },
  {
    "text": "are H how your memory is runtime so there's a runtime equilibrium 100 Megs",
    "start": "3046319",
    "end": "3051760"
  },
  {
    "text": "per second they creation and 50 Megs per second they're dying so you kind of have an equilibrium around half G right so if",
    "start": "3051760",
    "end": "3058520"
  },
  {
    "text": "you now that we've laid that out now you want to make sure that you clean out this the ones so you will only have half",
    "start": "3058520",
    "end": "3067160"
  },
  {
    "text": "the Heap free if you're cleaning up that 500 mags right so and so that's where",
    "start": "3067160",
    "end": "3073200"
  },
  {
    "text": "Garbage Collection comes in play the garbage collection is trying to see which part of your HEAP needs to be",
    "start": "3073200",
    "end": "3078760"
  },
  {
    "text": "removed and cleaned out and and trying to traj try to walk through the entire",
    "start": "3078760",
    "end": "3084160"
  },
  {
    "text": "Heap have some kind of root set so you know this this these pie are always alive your class loaders your say your",
    "start": "3084160",
    "end": "3091319"
  },
  {
    "text": "basic classes Java Java Lang object U and the basic way you hear of perm gen",
    "start": "3091319",
    "end": "3098680"
  },
  {
    "text": "and stuff right so the basic classes and the classes around it it traverses all",
    "start": "3098680",
    "end": "3103960"
  },
  {
    "text": "of that makees sure um there's no so marks all the GC yabble objects so the",
    "start": "3103960",
    "end": "3110440"
  },
  {
    "text": "marking part and then actually CLE cleans it out at some some in different",
    "start": "3110440",
    "end": "3115520"
  },
  {
    "text": "algorithms right it cleans it us different uh methods to do it but while",
    "start": "3115520",
    "end": "3120760"
  },
  {
    "text": "it's doing it so let's say it's marking this heat uh some of these collectors don't want you to change what is just",
    "start": "3120760",
    "end": "3127760"
  },
  {
    "text": "marked so let's say you marked this SP and suddenly you freed that part right so so you want to hold out your mutators",
    "start": "3127760",
    "end": "3134760"
  },
  {
    "text": "from doing things while you are at either mark scavenge or or or the final",
    "start": "3134760",
    "end": "3140359"
  },
  {
    "start": "3139000",
    "end": "3259000"
  },
  {
    "text": "clean stage right um the mark weep and clean now so at some minor portions",
    "start": "3140359",
    "end": "3149119"
  },
  {
    "text": "throughout this entire GC cycle you have to stop things from mutating and that's",
    "start": "3149119",
    "end": "3154839"
  },
  {
    "text": "where stoppages come so the entire GC problem can somehow be um translated",
    "start": "3154839",
    "end": "3162280"
  },
  {
    "text": "into three core free principles which is basically you want to sustain a very high allocation rate and keep it within",
    "start": "3162280",
    "end": "3169440"
  },
  {
    "text": "the Heap size you you have given it at a very low PA times right so you want to",
    "start": "3169440",
    "end": "3174839"
  },
  {
    "text": "give a low PA times and um try and see what kind of size you want to put so and",
    "start": "3174839",
    "end": "3182119"
  },
  {
    "text": "and try and sustain a very large live set and possibly a very large allocation rate so that's kind of the um the three",
    "start": "3182119",
    "end": "3189000"
  },
  {
    "text": "fighting parameters if you will there's a fourth",
    "start": "3189000",
    "end": "3194920"
  },
  {
    "text": "parameter and that's overhead of GC itself so you want to collectors don't",
    "start": "3194920",
    "end": "3200079"
  },
  {
    "text": "talk about it right so because they don't want to advertise this part there is a fourth parameter and thus you don't",
    "start": "3200079",
    "end": "3205280"
  },
  {
    "text": "want to have a very over highly overhead GC so for example you don't want to have so you if you had",
    "start": "3205280",
    "end": "3211760"
  },
  {
    "text": "two gigs room so let's say you want you gave it one gig and you created a 2 gig he behind the scenes then you have much",
    "start": "3211760",
    "end": "3218960"
  },
  {
    "text": "more room to play with then your actual Runway is not 10 but 20 seconds so now",
    "start": "3218960",
    "end": "3224359"
  },
  {
    "text": "you can actually play with how you do GC somewhat more uh reasonably um or you",
    "start": "3224359",
    "end": "3231040"
  },
  {
    "text": "can put all of that in the other side get very low PA times or stuff like that so you can play it much more more easily",
    "start": "3231040",
    "end": "3236799"
  },
  {
    "text": "the game is easier if you have L larger heat behind the scenes that would be a large space overhead or if you have lots",
    "start": "3236799",
    "end": "3243720"
  },
  {
    "text": "of CPUs or if you if you if you're able to run half of your CPUs then you have",
    "start": "3243720",
    "end": "3249000"
  },
  {
    "text": "CPU overhead so behind the scenes there's a fourth uh parameter which is how much overhead can you how much how",
    "start": "3249000",
    "end": "3256119"
  },
  {
    "text": "much of CPU and memory can I take away and that's kind of so when you're tuning GC you you hear hundreds of free",
    "start": "3256119",
    "end": "3263119"
  },
  {
    "start": "3259000",
    "end": "3349000"
  },
  {
    "text": "hundreds of parameters which are actually XX that XX St the real parameters are here and and that's what",
    "start": "3263119",
    "end": "3270119"
  },
  {
    "text": "you want to tune that's one you want to understand of your application and then your tuning falls into place right",
    "start": "3270119",
    "end": "3277400"
  },
  {
    "text": "people tend to get to the par we the the hard introduction and that's what's true",
    "start": "3277400",
    "end": "3282599"
  },
  {
    "text": "for me as well for GC is you come from these basilon parameters that are changing their meaning every version um",
    "start": "3282599",
    "end": "3290720"
  },
  {
    "text": "but what you want to understand is is the core your application load your Runway how long your application will",
    "start": "3290720",
    "end": "3297440"
  },
  {
    "text": "run and what is an equilibrium size for your app and and and what's the PA times",
    "start": "3297440",
    "end": "3302559"
  },
  {
    "text": "you need maybe it's okay for you to pause once in a while uh if if it's a batch program or maybe you're online",
    "start": "3302559",
    "end": "3310160"
  },
  {
    "text": "program and you just cannot live with anything large PA and I've seen pause time requirements for some apps that are",
    "start": "3310160",
    "end": "3316480"
  },
  {
    "text": "in the 5 milliseconds range so for for the for a large exchange for example every millisecond is is actually almost",
    "start": "3316480",
    "end": "3324000"
  },
  {
    "text": "equalent of a denial of service so so there is pause time requirements at the lowest end which is the low latency guys",
    "start": "3324000",
    "end": "3329880"
  },
  {
    "text": "to a pause time requirement where I I'll just restart the jvm once it hits the GC so I've seen both sides right so",
    "start": "3329880",
    "end": "3338559"
  },
  {
    "text": "um now sizing so of course some of this is simplified",
    "start": "3338559",
    "end": "3343960"
  },
  {
    "text": "and some of this is only applicable to the classic hotspot jbm sun jvm right",
    "start": "3343960",
    "end": "3349079"
  },
  {
    "start": "3349000",
    "end": "3599000"
  },
  {
    "text": "but um when I create a new object so GC is actually so now let's talk about xmx",
    "start": "3349079",
    "end": "3355359"
  },
  {
    "text": "right first X is in is is introduced here but the real so if you if you got",
    "start": "3355359",
    "end": "3360599"
  },
  {
    "text": "the last two slides the rest of the slides are actually not so important the last two slides were the more cruxs of",
    "start": "3360599",
    "end": "3367160"
  },
  {
    "text": "the problem um because I mean you could come up with an algorithm which doesn't need to go through these",
    "start": "3367160",
    "end": "3372920"
  },
  {
    "text": "details so sizing so the GC um Heap so",
    "start": "3372920",
    "end": "3378920"
  },
  {
    "text": "we took this 1 gig Heap we could have laid it out into different phases right so what this implementation is is is",
    "start": "3378920",
    "end": "3386760"
  },
  {
    "text": "proposing is let's put all young gen apps in one place so this is the young",
    "start": "3386760",
    "end": "3392119"
  },
  {
    "text": "gen Eden and Survivor spaces so it it cuts the cake of one gig into two parts",
    "start": "3392119",
    "end": "3397960"
  },
  {
    "text": "young gen and old gen right so and it's through some mechanism I'm going to promote them into the old gen right the",
    "start": "3397960",
    "end": "3404480"
  },
  {
    "text": "assumption is that is is a common assumption which is uh infant mortal",
    "start": "3404480",
    "end": "3409520"
  },
  {
    "text": "applications or objects but basically they say that lots of your objects will",
    "start": "3409520",
    "end": "3414599"
  },
  {
    "text": "die before they get promoted so if you ran your collector on this one uh and",
    "start": "3414599",
    "end": "3420280"
  },
  {
    "text": "cleaned it out very efficiently you never need to um worry about um so you",
    "start": "3420280",
    "end": "3425720"
  },
  {
    "text": "can basically run two parallel collectors on each of them with different algorithms and as long as this",
    "start": "3425720",
    "end": "3431559"
  },
  {
    "text": "guy is is very efficient and fast you don't observe a lot of things all over",
    "start": "3431559",
    "end": "3436640"
  },
  {
    "text": "here and since this guy by definition these objects in Olden have a lot more",
    "start": "3436640",
    "end": "3441920"
  },
  {
    "text": "connections the the move from here to here would be much more expensive right so so that's kind of the the um the",
    "start": "3441920",
    "end": "3450000"
  },
  {
    "text": "designer's um ideal dream right oh I have this objects all of them so let's",
    "start": "3450000",
    "end": "3455559"
  },
  {
    "text": "say we created that 100 MB they all die instantly like one second we re wrote Hello World 100 times and vanished right",
    "start": "3455559",
    "end": "3462079"
  },
  {
    "text": "um in that case they're instantly finished so they come here immediately collect themselves as garbage some",
    "start": "3462079",
    "end": "3468599"
  },
  {
    "text": "collector just cleans it off it's done right so that's so when you're doing a new object let's say you're doing this",
    "start": "3468599",
    "end": "3473920"
  },
  {
    "text": "new string it would be created here so or any object you're creating it in the",
    "start": "3473920",
    "end": "3479000"
  },
  {
    "text": "Eden today so it's a all your allocation rate is a function of this one so if you",
    "start": "3479000",
    "end": "3484160"
  },
  {
    "text": "looked at allocation rate and you want to amplify how quickly your application grows like rapidly that's your Eden size",
    "start": "3484160",
    "end": "3492559"
  },
  {
    "text": "so you want to amplify the size there right but and this is xmn by the way so this whole size is xmn anything that",
    "start": "3492559",
    "end": "3499480"
  },
  {
    "text": "gets created here overflows into a Survivor space hoping that it doesn't need to be promoted yet right but",
    "start": "3499480",
    "end": "3506720"
  },
  {
    "text": "if you have very well cached behavior let's say you have a like a bunch of",
    "start": "3506720",
    "end": "3511960"
  },
  {
    "text": "well cached objects they are guaranteed to go here they're going to live longer",
    "start": "3511960",
    "end": "3517319"
  },
  {
    "text": "right so when you create State that's very large or state that needs to be deciding your memory for long you end up",
    "start": "3517319",
    "end": "3523559"
  },
  {
    "text": "with a lot of promotion so the dream that the jbm designers had where all",
    "start": "3523559",
    "end": "3530000"
  },
  {
    "text": "objects will die instantly or very soon actually did not work out in reality code um resides longer actually class",
    "start": "3530000",
    "end": "3537799"
  },
  {
    "text": "pass became bigger we actually have much larger objects which are in your perm",
    "start": "3537799",
    "end": "3542839"
  },
  {
    "text": "Jam so there's another smaller space here called pjen which was supposed to never be collected right even that has",
    "start": "3542839",
    "end": "3549319"
  },
  {
    "text": "grown to be very large everything has grown that you actually by default promote them these days right so if you",
    "start": "3549319",
    "end": "3555599"
  },
  {
    "text": "use a default promotion promotion mechanism um so there's another threshold like the tenuring threshold",
    "start": "3555599",
    "end": "3562599"
  },
  {
    "text": "here governs how things go from here to here but that's that's um so the default ones promote",
    "start": "3562599",
    "end": "3569720"
  },
  {
    "text": "very often and fill up the O as well right sure there is a adaptive size",
    "start": "3569720",
    "end": "3575079"
  },
  {
    "text": "policy which basically says okay I don't know if I made the right Deion change it",
    "start": "3575079",
    "end": "3580839"
  },
  {
    "text": "for me right so so actually the default um is not so the xmn actually clearly",
    "start": "3580839",
    "end": "3586559"
  },
  {
    "text": "says this if you set this to 256 Megs this whole thing would be 256 Megs and",
    "start": "3586559",
    "end": "3591920"
  },
  {
    "text": "this would be the rest right um that's actually uh crisp cut but often and the",
    "start": "3591920",
    "end": "3597520"
  },
  {
    "text": "default behavior is you set a ratio you set and there is a ratio default ratio",
    "start": "3597520",
    "end": "3602640"
  },
  {
    "text": "if you set this that ratio is over overwritten the ratio kind of tries to give you a small size see how fast you",
    "start": "3602640",
    "end": "3609520"
  },
  {
    "text": "fill up and then changes everything with it with the same ratio so it keeps changing it with as you keep building",
    "start": "3609520",
    "end": "3616319"
  },
  {
    "text": "the stuff the problem with that is every time you change it you basically resize",
    "start": "3616319",
    "end": "3622000"
  },
  {
    "text": "not just that you resize the Survivor spaces with it resize everything thing and then shift objects during this",
    "start": "3622000",
    "end": "3628720"
  },
  {
    "text": "process so one of the things we found was that actually was detrimental to",
    "start": "3628720",
    "end": "3634559"
  },
  {
    "text": "predictable performance so one of the things before so that so if you're trying to find a predictable size you",
    "start": "3634559",
    "end": "3642119"
  },
  {
    "text": "want to cut this to or do some experiments that adaptive resizing",
    "start": "3642119",
    "end": "3647160"
  },
  {
    "text": "actually causes um un so the unexpected beh side effects of that will be seen in",
    "start": "3647160",
    "end": "3653480"
  },
  {
    "text": "the in the pause times so I guess by this time we aware that PA times are what we always trying to force to be",
    "start": "3653480",
    "end": "3659799"
  },
  {
    "text": "small so so yeah so there are some so it's a heuristic and sometimes works and",
    "start": "3659799",
    "end": "3665960"
  },
  {
    "text": "it works very well when there's a lot of infin modal objects um what we found in",
    "start": "3665960",
    "end": "3672079"
  },
  {
    "text": "theory in practice is exactly the opposite is that if you want predictable",
    "start": "3672079",
    "end": "3677319"
  },
  {
    "text": "U behavior from your um collector and you're trying to do experiments to tune",
    "start": "3677319",
    "end": "3682599"
  },
  {
    "text": "um setting them the size is up front right and then changing them to tuning",
    "start": "3682599",
    "end": "3687839"
  },
  {
    "text": "them to your workload actually is more predictable experiments set of experiments than letting the the",
    "start": "3687839",
    "end": "3694079"
  },
  {
    "text": "Adaptive size policy working for you but on the other hand people also use new so so in that uh I don't know if I actually",
    "start": "3694079",
    "end": "3701520"
  },
  {
    "text": "have a slide on that but you can tune the ratio so you can say Min Min new",
    "start": "3701520",
    "end": "3708640"
  },
  {
    "text": "size to Max new size so you can actually say tune this ratio from here to here",
    "start": "3708640",
    "end": "3714760"
  },
  {
    "text": "and not be Beyond so you can kind of say that don't go beyond 256 mags through",
    "start": "3714760",
    "end": "3721279"
  },
  {
    "text": "that mathematics but it's kind of reasonably tricky if you go so XMS and XMS um so Ms is basically the the",
    "start": "3721279",
    "end": "3729720"
  },
  {
    "text": "starting size right so you start with let's say you gave it a 1 gig uh even though sometimes when you launch a 1 gig",
    "start": "3729720",
    "end": "3736039"
  },
  {
    "text": "jvm even though you don't have 1 gig Heap you actually pass right you get a Java Dash version and you're like what",
    "start": "3736039",
    "end": "3742240"
  },
  {
    "text": "happened um basically it launched with maybe 10 Megs um because it was a",
    "start": "3742240",
    "end": "3747760"
  },
  {
    "text": "shortlived jbm and so so XMS is the initial size so basically once you set",
    "start": "3747760",
    "end": "3754160"
  },
  {
    "text": "that there's no resizing for the entire Heap so the sum of all these is going to",
    "start": "3754160",
    "end": "3759440"
  },
  {
    "text": "be always one gig so it kind of cuts that out from the OS make sure you have that one full one gig so so when time",
    "start": "3759440",
    "end": "3767640"
  },
  {
    "text": "comes to actually allocate it it's not swapping so so that's kind of the um so that's the initialization size and the",
    "start": "3767640",
    "end": "3775079"
  },
  {
    "text": "actual maximum size so given that so if you say that's set so now you know you have one gig to play with and a new",
    "start": "3775079",
    "end": "3782240"
  },
  {
    "text": "ratio of so and so by the way there are again two the Min and Max ratios if you use a new Ratio or set them to the same",
    "start": "3782240",
    "end": "3788720"
  },
  {
    "text": "value Min and Max you do cut you do get the same effect of an xmn which is",
    "start": "3788720",
    "end": "3793960"
  },
  {
    "text": "basically a fraction of it and it's not uh so if you put Min and Max you get a resize Auto resize for for the New Gen",
    "start": "3793960",
    "end": "3801240"
  },
  {
    "text": "but it's it's also a common that's a common technique people use as well",
    "start": "3801240",
    "end": "3807760"
  },
  {
    "text": "next slide so now that you've picked sizes you get to pick a",
    "start": "3808200",
    "end": "3814200"
  },
  {
    "text": "collector um there's a lot of them um and there is the Azul GC as well",
    "start": "3814200",
    "end": "3821839"
  },
  {
    "text": "which is not available in the sun format but it is in pure um pure software now",
    "start": "3821839",
    "end": "3827240"
  },
  {
    "text": "right so so a pretty fun book on the corner",
    "start": "3827240",
    "end": "3833079"
  },
  {
    "text": "everyone everyone i' probably probably 200 copies or maybe under",
    "start": "3833079",
    "end": "3840720"
  },
  {
    "text": "underestimating there's very few copies of that sold and very few copies fully read it's a very academic um",
    "start": "3840720",
    "end": "3847799"
  },
  {
    "text": "authentically academic approach to garbage collection i' I'm I've actually met a few people who have finished",
    "start": "3847799",
    "end": "3853599"
  },
  {
    "text": "reading it and Richard Jones is actually a a good uh friend of the AO Community",
    "start": "3853599",
    "end": "3859240"
  },
  {
    "text": "we made him but fundamentally uh it gives you a very very uh good ride and",
    "start": "3859240",
    "end": "3865720"
  },
  {
    "text": "lace the land on what are the challenges involved in GC tuning GC uh designing so",
    "start": "3865720",
    "end": "3871119"
  },
  {
    "text": "um whether it's marks feep and so but anyway so for the sun jbm Guys these are",
    "start": "3871119",
    "end": "3877279"
  },
  {
    "text": "the options right you have serial parallel parallel old and concrete Mark and sweep and of course um G1 which is",
    "start": "3877279",
    "end": "3885279"
  },
  {
    "text": "still in experimental mode um for the sunlight collectors you have the aul jvm",
    "start": "3885279",
    "end": "3890359"
  },
  {
    "text": "which has its own um pauseless GC none of the tuning before and after will be required because that's all autotuned it",
    "start": "3890359",
    "end": "3898000"
  },
  {
    "text": "is a low pause um there is almost sub millisecond pause times on this at very",
    "start": "3898000",
    "end": "3904279"
  },
  {
    "text": "large Heap sizes so it's three-digit gig Heap sizes um millisecond or sub",
    "start": "3904279",
    "end": "3910760"
  },
  {
    "text": "millisecond passtimes and and that's all on x86 Hardware so aul started with a hardware solution but um the Gory",
    "start": "3910760",
    "end": "3918680"
  },
  {
    "text": "details of that um we'll we'll get to I think at my last Talk of the same um",
    "start": "3918680",
    "end": "3924720"
  },
  {
    "text": "topic um someone asked me what is the secret thoughts Behind The aul Collector and The quick summary I got was that's",
    "start": "3924720",
    "end": "3931440"
  },
  {
    "text": "your that that's my my mother-in-law's version of garbage collection which is collect all the time so collect full",
    "start": "3931440",
    "end": "3938960"
  },
  {
    "text": "collect all the time and there is no disses right so it's collects all the time no pauses you're able to elate us",
    "start": "3938960",
    "end": "3945960"
  },
  {
    "text": "but um but let's get to the Crux of the meat here uh serial GC so it's very",
    "start": "3945960",
    "end": "3951640"
  },
  {
    "text": "serial linear new serial old um it forces is uh when you hit that limit",
    "start": "3951640",
    "end": "3958359"
  },
  {
    "text": "when you hit the GC you are seeing a stop the world pause right P so then came came along parallel GC which",
    "start": "3958359",
    "end": "3964839"
  },
  {
    "text": "basically does a a lot of threads parallel scavenge so you paralyzed um",
    "start": "3964839",
    "end": "3970319"
  },
  {
    "text": "collection and then there is a Serial old part serial um parallel old GC so",
    "start": "3970319",
    "end": "3977160"
  },
  {
    "text": "that there so when you did the old gen collection that was always serial right in in the default paries very popular",
    "start": "3977160",
    "end": "3983920"
  },
  {
    "text": "very um widely used actually still wiely used then came par old gen GC which",
    "start": "3983920",
    "end": "3989760"
  },
  {
    "text": "paralyzed the old gen CMS again classic par new so it uses parallel GC on the",
    "start": "3989760",
    "end": "3997200"
  },
  {
    "text": "New Gen it uses CMS on the old gen and really when the concurrent Market sweep",
    "start": "3997200",
    "end": "4003119"
  },
  {
    "text": "fails it does a Serial old gen so sometimes in your logs you see concurrent mode failure that's when",
    "start": "4003119",
    "end": "4009200"
  },
  {
    "text": "serial comes in G1 is actually um it's",
    "start": "4009200",
    "end": "4014760"
  },
  {
    "text": "G1 would probably uh be like 2005 version of The aul Collector which basically uses Pages as",
    "start": "4014760",
    "end": "4022440"
  },
  {
    "text": "your so it doesn't it no longer believes in the infant mortality it looks at pages and sees where how densely your",
    "start": "4022440",
    "end": "4030079"
  },
  {
    "text": "pages are and picks the sparest page and collects it that's cheapest right to",
    "start": "4030079",
    "end": "4035119"
  },
  {
    "text": "collect and then of course it deals with the problem of moving um a popular page",
    "start": "4035119",
    "end": "4040680"
  },
  {
    "text": "so a popular page turns a popular object turns out to be connecting to every other object",
    "start": "4040680",
    "end": "4046039"
  },
  {
    "text": "so moving a popular object has a lot of nuances and that's where G1 has its",
    "start": "4046039",
    "end": "4051279"
  },
  {
    "text": "flows but um picking a collector um the default I think is par parel and CMS is",
    "start": "4051279",
    "end": "4059319"
  },
  {
    "text": "is a good option that's popular yes so G1 actually is um Circa 1620 um is is",
    "start": "4059319",
    "end": "4068319"
  },
  {
    "text": "available but you still need to use the Flag unlock experimental options and use it so it's just not I mean it was built",
    "start": "4068319",
    "end": "4075200"
  },
  {
    "text": "for correct it's now available correct correct um stability is still a big",
    "start": "4075200",
    "end": "4080760"
  },
  {
    "text": "challenge there but of how it works and so on so forth there are some use cases",
    "start": "4080760",
    "end": "4086359"
  },
  {
    "text": "where it should work with no Flags I mean it should be so G1 is is designed",
    "start": "4086359",
    "end": "4092599"
  },
  {
    "text": "with having zero flag tuning so hopefully that works out for",
    "start": "4092599",
    "end": "4098560"
  },
  {
    "text": "us um reading GC logs is actually a topic",
    "start": "4098560",
    "end": "4103679"
  },
  {
    "text": "in its own and a very good topic actually um when you see these right so",
    "start": "4103679",
    "end": "4109640"
  },
  {
    "text": "these are kind of so this this is um so now we are getting into the nuances of",
    "start": "4109640",
    "end": "4115798"
  },
  {
    "text": "CMS which is kind of the most popular collector of the day uh parallel GC I think is well understood and people know",
    "start": "4115799",
    "end": "4121960"
  },
  {
    "text": "it still has a full GC in the serial old part so reasonably well understood um let's look at this one so when you see",
    "start": "4121960",
    "end": "4129120"
  },
  {
    "text": "full GC in your command in your GC logs everyone knows that's stop the wall right you have very poor so and then",
    "start": "4129120",
    "end": "4136080"
  },
  {
    "text": "there is a stop the World Part in the CMS which is your initial Mark which is actually a stop the world and that's",
    "start": "4136080",
    "end": "4142080"
  },
  {
    "text": "what I was describing earlier it's the initial Mark through um the rescan and weak uh weak references and remark are",
    "start": "4142080",
    "end": "4149318"
  },
  {
    "text": "also stop the world so if you see those in your your log files um look for",
    "start": "4149319",
    "end": "4154600"
  },
  {
    "text": "promotion failures so I tried to promote from Young gen to Old gen and there was",
    "start": "4154600",
    "end": "4160040"
  },
  {
    "text": "a promotion failure that's a common time and actually to a um full GC after that",
    "start": "4160040",
    "end": "4165199"
  },
  {
    "text": "right you see um so the the interesting thing is the CMS collector is actually",
    "start": "4165199",
    "end": "4171199"
  },
  {
    "text": "reasonably conservative on its um promotion um uh in the sense that if you have 10 Megs of objects you're promoting",
    "start": "4171199",
    "end": "4178838"
  },
  {
    "text": "from Eden into the old genen it it kind of on an it expects on an average one",
    "start": "4178839",
    "end": "4184679"
  },
  {
    "text": "more of 10 Meg is coming so it makes sure you have twice the size in the in the old gen so turns out when you do a",
    "start": "4184679",
    "end": "4193199"
  },
  {
    "text": "200 Megs of transfer you need four 400 Megs of already if you've used half of",
    "start": "4193199",
    "end": "4198679"
  },
  {
    "text": "it it wants 400 it triggers a a full GC on all gen so um so that's the promotion",
    "start": "4198679",
    "end": "4206159"
  },
  {
    "text": "failure and then of course concurrent more failure it tries to collect the old gen concurrently and then fails and that",
    "start": "4206159",
    "end": "4211880"
  },
  {
    "text": "there's a CMS origin collection um this how it looks like in real world gory",
    "start": "4211880",
    "end": "4219719"
  },
  {
    "text": "details um so this is the promotion failed our new promotion failed um and",
    "start": "4219719",
    "end": "4225080"
  },
  {
    "text": "then of course a concrete Mo this is a real um use case from a",
    "start": "4225080",
    "end": "4230679"
  },
  {
    "text": "customer 5 Seconds of full pause time has happened here in this case um not",
    "start": "4230679",
    "end": "4238600"
  },
  {
    "text": "not that common now that I'm now that part of my move from AO I've see more of these in my customer base um so um but",
    "start": "4238600",
    "end": "4248960"
  },
  {
    "text": "that's that's the um that's the full um the",
    "start": "4248960",
    "end": "4254080"
  },
  {
    "text": "gcps uh perm people look at this perm you don't some you can disable",
    "start": "4254080",
    "end": "4259440"
  },
  {
    "text": "collection of perm actually so that there's a flag there people don't use that and then you can also tell",
    "start": "4259440",
    "end": "4265960"
  },
  {
    "text": "promotion not not to be that um um tunings so the next three slides",
    "start": "4265960",
    "end": "4273199"
  },
  {
    "text": "are probably going to take us through tuning CMS specifically because that's a common uh problem these days",
    "start": "4273199",
    "end": "4280480"
  },
  {
    "text": "um the the well introducing a very new item",
    "start": "4280480",
    "end": "4286800"
  },
  {
    "text": "there most problems of GC are actually solvable the ones that are very hard to",
    "start": "4286800",
    "end": "4292440"
  },
  {
    "text": "solve are actually uh fragment is actually fragmentation and and so so if",
    "start": "4292440",
    "end": "4298639"
  },
  {
    "text": "you give a get a quick idea of fragmentation let's assume this room right when we came you came one of the",
    "start": "4298639",
    "end": "4306239"
  },
  {
    "text": "first person to come in was an empty room so we could fill in a TENS of or",
    "start": "4306239",
    "end": "4311880"
  },
  {
    "text": "when friends of four each came they could sit on a table was empty now you",
    "start": "4311880",
    "end": "4317440"
  },
  {
    "text": "on the other hand you actually have a lot more um sparse spots here and there so if a team of four a gang of four",
    "start": "4317440",
    "end": "4324440"
  },
  {
    "text": "comes into this room um um they would have to split because they don't have",
    "start": "4324440",
    "end": "4330320"
  },
  {
    "text": "four consecutive seats uh on the other so so that's the notion of fragmentation",
    "start": "4330320",
    "end": "4336320"
  },
  {
    "text": "you have fragmented this room this actually is a very high residency and thank you for coming again um but but",
    "start": "4336320",
    "end": "4344239"
  },
  {
    "text": "coming in at at smaller so if one of one each came this fragmentation is not a",
    "start": "4344239",
    "end": "4349840"
  },
  {
    "text": "problem for us so if people came one and since we our objects are one seat each",
    "start": "4349840",
    "end": "4355239"
  },
  {
    "text": "those object those people can sit on those chairs there's no problem so fragmentation is a problem when you have",
    "start": "4355239",
    "end": "4361159"
  },
  {
    "text": "large objects uh it's or irregularly sized objects are coming into your HEAP",
    "start": "4361159",
    "end": "4366840"
  },
  {
    "text": "it's a definitely a uh a a pro it's it's a big problem if that's happening it's",
    "start": "4366840",
    "end": "4372560"
  },
  {
    "text": "not a problem if you have uniformed sized object so so the Crux of um of um tuning this",
    "start": "4372560",
    "end": "4381400"
  },
  {
    "text": "collector is basically um to avoid fragmentation if you can fragmentation",
    "start": "4381400",
    "end": "4386440"
  },
  {
    "text": "is the gorest the most difficult problem that um so how how do uh colle",
    "start": "4386440",
    "end": "4392400"
  },
  {
    "text": "traditional collectors deal with it they do have full GC they clean up all the things move everything order them all",
    "start": "4392400",
    "end": "4398040"
  },
  {
    "text": "into one side then you have large open blocks again you can allocate again",
    "start": "4398040",
    "end": "4403679"
  },
  {
    "text": "freely allocate rapid ly as well right so you colis blocks around you so you",
    "start": "4403679",
    "end": "4409840"
  },
  {
    "text": "can move people to the side kind of get more space here and create a size of four or five so so in some sense um um",
    "start": "4409840",
    "end": "4418719"
  },
  {
    "text": "cising of memory blocks um into and collecting doing compaction cycles and",
    "start": "4418719",
    "end": "4424480"
  },
  {
    "text": "compaction Cycles are all sto B and that's in in in the traditional GC collection um um in traditional Sun",
    "start": "4424480",
    "end": "4431840"
  },
  {
    "text": "collectors and that's why um fragmentation and comp action or or",
    "start": "4431840",
    "end": "4437719"
  },
  {
    "text": "compaction is not so CMS doesn't doesn't Compact and so that's a big problem for",
    "start": "4437719",
    "end": "4444199"
  },
  {
    "text": "CMS rapidly fast forwarding um there are other interesting Juris stics baked into",
    "start": "4444199",
    "end": "4450480"
  },
  {
    "text": "C CMS the CMS initiating occupancy factor which is when do I trigger the",
    "start": "4450480",
    "end": "4456679"
  },
  {
    "text": "old collector um when I know the the initial occupancy is this much on the",
    "start": "4456679",
    "end": "4463920"
  },
  {
    "text": "new one right so that's um so if you usually the default is something like",
    "start": "4463920",
    "end": "4469719"
  },
  {
    "text": "65 um and um that changes based on how you're um so the the fraction of",
    "start": "4469719",
    "end": "4477040"
  },
  {
    "text": "occupancy um so you can set this and make sure that's what's use instead of using a heuristic which is again",
    "start": "4477040",
    "end": "4483679"
  },
  {
    "text": "adaptive technique heuristic built for certain assumptions and doesn't work for the was",
    "start": "4483679",
    "end": "4489960"
  },
  {
    "text": "case MC times um again a function of um so size your generation well so that",
    "start": "4489960",
    "end": "4495880"
  },
  {
    "text": "your M GC times are know that they're function of your live set not your total Heap size you can have 10 gig but if",
    "start": "4495880",
    "end": "4502280"
  },
  {
    "text": "your live Heap size is only half a cake you're not going to be really a problem",
    "start": "4502280",
    "end": "4508320"
  },
  {
    "text": "um again system.gc is another common someone actually use system.gc the",
    "start": "4508320",
    "end": "4515719"
  },
  {
    "text": "reason to come to the stock so for them if you use this flag it invokes a concurrent system.gc not a real stop the",
    "start": "4515719",
    "end": "4525560"
  },
  {
    "text": "see um GC threads so the trade off between CPU and memory comes in around",
    "start": "4525560",
    "end": "4530880"
  },
  {
    "text": "the number of threads so parallel GC U threads um of size four so um um that's",
    "start": "4530880",
    "end": "4537600"
  },
  {
    "text": "another common technique to get four uh threads running in parallel um the",
    "start": "4537600",
    "end": "4543040"
  },
  {
    "text": "default um is actually derived from number of CPUs on the system and it's a pretty complicated um way of deriving it",
    "start": "4543040",
    "end": "4551520"
  },
  {
    "text": "but that's what it is so so it it falls off what what was found was that if you",
    "start": "4551520",
    "end": "4557719"
  },
  {
    "text": "you can't have 34 32 threads and get performance uh of GC falls off and so",
    "start": "4557719",
    "end": "4563360"
  },
  {
    "text": "there's a eight um is the kind of the flipping point if you have more than eight threads or eight CPUs you end up",
    "start": "4563360",
    "end": "4569520"
  },
  {
    "text": "using n minus 5 um by eight as the actual so kind of 16 assume that you get",
    "start": "4569520",
    "end": "4574560"
  },
  {
    "text": "kind of 16 if you have 64 threats something that um so so the strategy is to tune your M",
    "start": "4574560",
    "end": "4583280"
  },
  {
    "text": "gc's and then you can let a a lot of allocation happen in the Eden so that's kind of your if you know your MJS are",
    "start": "4583280",
    "end": "4589159"
  },
  {
    "text": "low then you have a lot of allocation rate possibility there but that's so",
    "start": "4589159",
    "end": "4594480"
  },
  {
    "text": "this is your CPU tradeoff so you could do a lot more threads and you're taking basically you're taking stealing CPU",
    "start": "4594480",
    "end": "4600719"
  },
  {
    "text": "Cycles from your um application work to GC so that's your overhead as well",
    "start": "4600719",
    "end": "4607280"
  },
  {
    "text": "um fragmentation so you have an app that runs very well up until um it suddenly",
    "start": "4607280",
    "end": "4614080"
  },
  {
    "text": "up until sudden something happens and knob turns and performance goes um degrades it induces you try to do a full",
    "start": "4614080",
    "end": "4622000"
  },
  {
    "text": "GC from J J console everything is happy and you continue to run right so that's",
    "start": "4622000",
    "end": "4627239"
  },
  {
    "text": "that's the classic um fragmentation use case we talk briefly um in detail about this so the the real uh trick is that",
    "start": "4627239",
    "end": "4634600"
  },
  {
    "text": "when you have so basically this so if the gang of four did arrive here this whole table is actually not available",
    "start": "4634600",
    "end": "4641120"
  },
  {
    "text": "for allocation it's considered round of error and your you kind of let to to",
    "start": "4641120",
    "end": "4647040"
  },
  {
    "text": "find it you and trigger a whole GC so the um so if you use a compacting",
    "start": "4647040",
    "end": "4653199"
  },
  {
    "text": "collector fragmentation is no longer a problem and that's where I I was mentioning compaction which is heavily",
    "start": "4653199",
    "end": "4659920"
  },
  {
    "text": "avoided by all the collectors The aul Collector compacts always right it's it's compact always and um and lot more",
    "start": "4659920",
    "end": "4666960"
  },
  {
    "text": "interesting nuances very parall highly concurrent collector so it does both Generations in parall in in complete",
    "start": "4666960",
    "end": "4673679"
  },
  {
    "text": "concurrency so so kind of the window of actual pause time is very low so the",
    "start": "4673679",
    "end": "4679040"
  },
  {
    "text": "Eden is collected in parallel with the old gen two completely concurrent collectors running for you all the time",
    "start": "4679040",
    "end": "4685280"
  },
  {
    "text": "and so um and all the time all the time is not triggered by events in the in the",
    "start": "4685280",
    "end": "4691239"
  },
  {
    "text": "application what happening continuously so it's kind of a the only compacting collector which which proved the",
    "start": "4691239",
    "end": "4697920"
  },
  {
    "text": "Paradigm um which hit the nail nail opposite side which basically don't aoide compaction do it all the time so",
    "start": "4697920",
    "end": "4704320"
  },
  {
    "text": "so doing it all the time we found that the past tense were actually very less and then you don't need to worry about all the various parameters",
    "start": "4704320",
    "end": "4711360"
  },
  {
    "text": "there so promotion so if you delay your promotion so as you promote you're",
    "start": "4711360",
    "end": "4717920"
  },
  {
    "text": "basically Landing your objects in this old gen page and corrupting all the pages at different PES um if you promote",
    "start": "4717920",
    "end": "4724480"
  },
  {
    "text": "less you're fragmenting less so in some sense that's kind of the real um",
    "start": "4724480",
    "end": "4729880"
  },
  {
    "text": "solution that people have found is to be able to build uniformly sized objects if",
    "start": "4729880",
    "end": "4735199"
  },
  {
    "text": "you used arrays or Primitives you have some control on that but in Java parans it's actually very hard um object pools",
    "start": "4735199",
    "end": "4743159"
  },
  {
    "text": "were around for some time again all of them have their own issues and nuances",
    "start": "4743159",
    "end": "4749040"
  },
  {
    "text": "so off late and so the the the last few slides of this topic can actually are",
    "start": "4749040",
    "end": "4756040"
  },
  {
    "text": "actually topics of their own we've seen a topic recently by lip Todd lipcon from HB team which who has done a complete",
    "start": "4756040",
    "end": "4762760"
  },
  {
    "text": "talk after this which is um basically go off Heap right so we'll",
    "start": "4762760",
    "end": "4769440"
  },
  {
    "text": "we'll touch a little of that how do I build off Heap but um so we've talked",
    "start": "4769440",
    "end": "4775040"
  },
  {
    "text": "about compactions of the world and why it's still yet unsolved on orles on spot they're working on it but clearly this",
    "start": "4775040",
    "end": "4781880"
  },
  {
    "text": "is the way to go on that front if you're suffering fragmentation talk to those zo",
    "start": "4781880",
    "end": "4787480"
  },
  {
    "text": "guys um there's uh tools again let's look at some tools here jrocket mission",
    "start": "4787480",
    "end": "4792800"
  },
  {
    "text": "control um has has a very good uh tooling on GC you can look at the",
    "start": "4792800",
    "end": "4798360"
  },
  {
    "text": "overall pauses sum of pauses in different Generations you can look at um compaction you can go get to the Gory",
    "start": "4798360",
    "end": "4806280"
  },
  {
    "text": "details of how long the mark took at every level so this is probably one of",
    "start": "4806280",
    "end": "4811920"
  },
  {
    "text": "the best um uh tooling I've seen and some U people are actually getting to",
    "start": "4811920",
    "end": "4817960"
  },
  {
    "text": "going back to reusing the Jrock machine control to use it to get kind of a idea",
    "start": "4817960",
    "end": "4823560"
  },
  {
    "text": "on how your objects are laid out um you can actually double click and get what",
    "start": "4823560",
    "end": "4829719"
  },
  {
    "text": "type of objects they are so in some sense it can still answer your question but it's a derived answer it's not a",
    "start": "4829719",
    "end": "4836199"
  },
  {
    "text": "direct answer it's a good it's a good good thing to talk to your kid guys they may actually pick it up",
    "start": "4836199",
    "end": "4842040"
  },
  {
    "text": "um this was a this actually a thing in production that we we visited um and",
    "start": "4842040",
    "end": "4850080"
  },
  {
    "text": "basically application suddenly transitions to a backtack it was reasonably well you kind of think it's",
    "start": "4850080",
    "end": "4855639"
  },
  {
    "text": "doing okay there some stability suddenly goes back into that back to back nothing changed in the allocation rate of the",
    "start": "4855639",
    "end": "4861480"
  },
  {
    "text": "beh of the of the of the app itself so somewhere around 40% full um it flipped",
    "start": "4861480",
    "end": "4868239"
  },
  {
    "text": "into into a frag into a fragmentation mode that said although you thought you had half empty it was not you actually",
    "start": "4868239",
    "end": "4876639"
  },
  {
    "text": "were full into because of fragmentation so you cannot use your free memory because you have way too many holes and",
    "start": "4876639",
    "end": "4883520"
  },
  {
    "text": "um that's that's of the the most um uh the most common problems we see in GCR",
    "start": "4883520",
    "end": "4890320"
  },
  {
    "text": "here and these are the hard problems at of the day um yeah so this actually from",
    "start": "4890320",
    "end": "4896239"
  },
  {
    "text": "production cluster running Cassandra so again there are some",
    "start": "4896239",
    "end": "4901840"
  },
  {
    "text": "interesting tools here J console visual GC logs um this is actually a tool that",
    "start": "4901840",
    "end": "4908280"
  },
  {
    "text": "came around year 2000 by the by by the team that works in the same academic um",
    "start": "4908280",
    "end": "4915239"
  },
  {
    "text": "as the GC Richard Jones book that we talked about it's called GC spy which kind of gives you kind of your memory uh",
    "start": "4915239",
    "end": "4921320"
  },
  {
    "text": "in pages and see how it's laid out kind of gets that I I'm not it's kind of",
    "start": "4921320",
    "end": "4926560"
  },
  {
    "text": "worked for me on jdk6 but um I can't watch for it using it in production but",
    "start": "4926560",
    "end": "4933199"
  },
  {
    "text": "it's it's nevertheless the code is out there it's open source it can be",
    "start": "4933199",
    "end": "4938400"
  },
  {
    "text": "used so with this people have been talking I'm I'm sick of the GC stuff let",
    "start": "4938400",
    "end": "4945120"
  },
  {
    "text": "me just go build my own off Heap um so the no GC movement if you will like the",
    "start": "4945120",
    "end": "4950880"
  },
  {
    "text": "no SQL movement or even the no SQL guys are trying to build off Heap stuff right",
    "start": "4950880",
    "end": "4957120"
  },
  {
    "text": "so cracks of that off Heap and and I'm kind of giving you the initial",
    "start": "4957120",
    "end": "4962600"
  },
  {
    "text": "tantalizing pieces so if you really go off of this topic you off of this talk",
    "start": "4962600",
    "end": "4968280"
  },
  {
    "text": "if someone asks you I'm I don't worry about GC I'm going to put it on on outside the Heap you'll have something",
    "start": "4968280",
    "end": "4974159"
  },
  {
    "text": "to to communicate with those guys but there are a lot more details there the Crux of that is actually a bite",
    "start": "4974159",
    "end": "4979600"
  },
  {
    "text": "buffer right so when so the bite buffer allocate direct and that was um CA 2000",
    "start": "4979600",
    "end": "4986199"
  },
  {
    "text": "right so very early on Java kind of assumed that you'll create stuff outside your he right so you kind of you can do",
    "start": "4986199",
    "end": "4993800"
  },
  {
    "text": "a gni kind of the that's almost around the time of gni right so you could create a slab of memory outside it",
    "start": "4993800",
    "end": "5000639"
  },
  {
    "text": "doesn't care if it's a file or it's really in memory so you can put both M map file or or actually chunk 16 gigs of",
    "start": "5000639",
    "end": "5007400"
  },
  {
    "text": "he 16 Megs of Heap outside the um the designers of jbm then at the time at on",
    "start": "5007400",
    "end": "5014000"
  },
  {
    "text": "okay assumed and and I'm I'm kind of guessing here that oh outside the Heap",
    "start": "5014000",
    "end": "5019920"
  },
  {
    "text": "now suddenly the jvm is not transferable right it's not as portable so this was",
    "start": "5019920",
    "end": "5025040"
  },
  {
    "text": "kind of always a an orphan child in the notion of uh how you deal with it right",
    "start": "5025040",
    "end": "5031320"
  },
  {
    "text": "so now you have these outside long objects that are going to be how do I clean",
    "start": "5031320",
    "end": "5036639"
  },
  {
    "text": "those guys so you don't have a memory control on it so if you look at actual",
    "start": "5036639",
    "end": "5041760"
  },
  {
    "text": "um design like um Paras who is a um software anyone who's read software",
    "start": "5041760",
    "end": "5047480"
  },
  {
    "text": "fundamentals and kind of the boom time um very early on how do you build good",
    "start": "5047480",
    "end": "5053400"
  },
  {
    "text": "program code they they came up with this notion of virtual machine so the jvm is",
    "start": "5053400",
    "end": "5058560"
  },
  {
    "text": "not the first virtual machine that was invented the notion of virtual machine has been um touted as the the way future",
    "start": "5058560",
    "end": "5065400"
  },
  {
    "text": "will be in 1970s and ' 80s right and the the Crux of that is that use Virtual",
    "start": "5065400",
    "end": "5070679"
  },
  {
    "text": "Machine as a paradigm to build your build build your apps so then you can virtualize the file system around it the",
    "start": "5070679",
    "end": "5076920"
  },
  {
    "text": "iio around it the network around it and so that's how the original concepts of",
    "start": "5076920",
    "end": "5082239"
  },
  {
    "text": "um programming models were created and and turns out one of the things that clearly said is that don't don't corrupt",
    "start": "5082239",
    "end": "5089719"
  },
  {
    "text": "that view by adding a slight um um workarounds right because then it's no",
    "start": "5089719",
    "end": "5095440"
  },
  {
    "text": "longer virtual machines part virtual Parts real no longer uh apply the same paradigms uh or programming um",
    "start": "5095440",
    "end": "5102800"
  },
  {
    "text": "techniques of building this right and that's kind of the um the the the",
    "start": "5102800",
    "end": "5109280"
  },
  {
    "text": "Viewpoint of with with which jbms have looked at uh at off goinging off he is",
    "start": "5109280",
    "end": "5115159"
  },
  {
    "text": "that that thing is now no longer manageable it's outside I can't I want to make sure it's very small so the",
    "start": "5115159",
    "end": "5121159"
  },
  {
    "text": "first immediate thing that they did was make sure anything that's creat outside Heap is very small but with the with the",
    "start": "5121159",
    "end": "5127159"
  },
  {
    "text": "new I'm going to build a big large cach outside the Heap you're you're heading into that territory um and if you're",
    "start": "5127159",
    "end": "5133719"
  },
  {
    "text": "aware of that that's and manage that very well you you're probably fine but that's that's the notion you are that's where you are so um you actually have to",
    "start": "5133719",
    "end": "5141760"
  },
  {
    "text": "so anything else that's happening on that machine um which you have no control on can be impacting you as well",
    "start": "5141760",
    "end": "5147960"
  },
  {
    "text": "so you can trigger swapping for example if something else um kicks in uh so there are other things there but um",
    "start": "5147960",
    "end": "5155280"
  },
  {
    "text": "nevertheless um jna and El direct allow you to do the um to D dynamically load",
    "start": "5155280",
    "end": "5163159"
  },
  {
    "text": "like a c program without having to uh incur the cost of pred declaration like",
    "start": "5163159",
    "end": "5168400"
  },
  {
    "text": "gni the question is is this nio based or yeah yes so these were so the things got",
    "start": "5168400",
    "end": "5175679"
  },
  {
    "text": "better so nio whole nio packages got much much better in the recent version so we can actually even venture to do",
    "start": "5175679",
    "end": "5182800"
  },
  {
    "text": "something like this and um um but early on that was kind of like the first use",
    "start": "5182800",
    "end": "5187960"
  },
  {
    "text": "case of creation right and jna itself um is um um again very clean and if you run",
    "start": "5187960",
    "end": "5196040"
  },
  {
    "text": "a simple program you'll be impressed oh my God I can actually run a hello world and see and the same jvm and kind of",
    "start": "5196040",
    "end": "5202480"
  },
  {
    "text": "works but really um it's not there's no compile time declaration so you will have potential runtime failure so be be",
    "start": "5202480",
    "end": "5209440"
  },
  {
    "text": "aware of that but it does work for limited use cases in the labs the people who are going that way even Sandra is",
    "start": "5209440",
    "end": "5215080"
  },
  {
    "text": "headed um to try and do some off Heap analysis and see the existing",
    "start": "5215080",
    "end": "5220440"
  },
  {
    "text": "performance um gains have not been as big yet let's talk about that here issues to consider and so that's kind of",
    "start": "5220440",
    "end": "5227159"
  },
  {
    "text": "the how do I deallocate memory on this the Crux of that is that you resort to",
    "start": "5227159",
    "end": "5233119"
  },
  {
    "text": "finalization uh finalizers which basically are kind of the last gasp um",
    "start": "5233119",
    "end": "5239679"
  },
  {
    "text": "calls for jbm um or that's where so all the all the references to this outside",
    "start": "5239679",
    "end": "5246520"
  },
  {
    "text": "Heap are maintained in kind of like in a local in jvm site so the clearance so",
    "start": "5246520",
    "end": "5253719"
  },
  {
    "text": "let's say even if you freed that memory they need to come to this object which refer referred it and drop it off this",
    "start": "5253719",
    "end": "5261080"
  },
  {
    "text": "object is actually car relegated to finalization which means it's the last",
    "start": "5261080",
    "end": "5267400"
  },
  {
    "text": "um so unless you have full GC you don't actually see that memory freed up so um",
    "start": "5267400",
    "end": "5273080"
  },
  {
    "text": "if you have frequent full gc's and some people have worked around by creating system.gc calls periodically then you",
    "start": "5273080",
    "end": "5280840"
  },
  {
    "text": "can actually clear that out so this is a very so bug ID 44 is means it's like mid",
    "start": "5280840",
    "end": "5287719"
  },
  {
    "text": "uh early 2000s um very old bug has been there for a long long time and",
    "start": "5287719",
    "end": "5293320"
  },
  {
    "text": "finalizers are one- threaded so again so those are the other nuances there um if",
    "start": "5293320",
    "end": "5299239"
  },
  {
    "text": "you're aware of those and so so if you've done a gzip program for example in Java you would you would have seen",
    "start": "5299239",
    "end": "5305639"
  },
  {
    "text": "effects of something similar already like you as you keep doing this so if your gzip is not clearing it up um so if",
    "start": "5305639",
    "end": "5312600"
  },
  {
    "text": "the jbm is not clearing up that programs memory use um periodically then you would see that that you actually stack",
    "start": "5312600",
    "end": "5319560"
  },
  {
    "text": "up behind a slow single threaded program and kind of cause the notion of a of a",
    "start": "5319560",
    "end": "5326320"
  },
  {
    "text": "of a GC of a memory leak um it's also um B it's a v",
    "start": "5326320",
    "end": "5332040"
  },
  {
    "text": "reference that's using that which ends up being the finalizer there you can have a workaround to that",
    "start": "5332040",
    "end": "5338480"
  },
  {
    "text": "you have a Max direct memory size so you can actually um limit the damage it can do if in case and so there's a new flag",
    "start": "5338480",
    "end": "5346360"
  },
  {
    "text": "that came in actually pretty recent flag where you can set the Max D memory size",
    "start": "5346360",
    "end": "5351760"
  },
  {
    "text": "so you never actually go beyond that and cause the overall jvm so so yeah the notion of having to trigger system GC to",
    "start": "5351760",
    "end": "5359639"
  },
  {
    "text": "avoid in the first place if system GC um kind of P said but there are uh certain",
    "start": "5359639",
    "end": "5366080"
  },
  {
    "text": "use cases where you actually need to go that route because of fragmentation and",
    "start": "5366080",
    "end": "5371239"
  },
  {
    "text": "um hopefully yeah so this is the other your trigger assistance you see in a",
    "start": "5371239",
    "end": "5376400"
  },
  {
    "text": "wider leak last part which I kind of expected",
    "start": "5376400",
    "end": "5382880"
  },
  {
    "text": "not to be here and that's why it's virtually if you got here virtually there is it's it's turns out to be a",
    "start": "5382880",
    "end": "5388800"
  },
  {
    "text": "long talk right so on virtualization there are a bunch of interesting um",
    "start": "5388800",
    "end": "5394320"
  },
  {
    "text": "interesting nuances to be aware of when you think about GC think about Java um",
    "start": "5394320",
    "end": "5399800"
  },
  {
    "text": "thread priorities is one common thing right so thread priorities um are very um",
    "start": "5399800",
    "end": "5406760"
  },
  {
    "text": "scheduling becomes pretty much an art because the VMware is relaying your um",
    "start": "5406760",
    "end": "5412080"
  },
  {
    "text": "your your priorities for you all over again um there's a common um ballooning",
    "start": "5412080",
    "end": "5418320"
  },
  {
    "text": "driver um it's a common uh um philosophy that's taught on how you manage memory",
    "start": "5418320",
    "end": "5424280"
  },
  {
    "text": "in the BM world and for jbms it's clearly the the way to do it is to",
    "start": "5424280",
    "end": "5430440"
  },
  {
    "text": "disable it um you don't want to to get um your memory reused to some other app while",
    "start": "5430440",
    "end": "5437280"
  },
  {
    "text": "your app was kind of not busy essentially you don't want to balloon your HEAP onto other uh processes time",
    "start": "5437280",
    "end": "5445639"
  },
  {
    "text": "um time itself is an issue on um has been an issue it's kind of U been solved",
    "start": "5445639",
    "end": "5451360"
  },
  {
    "text": "in the latest VMware um your sex Kels and with the latest Hardware but TSC and",
    "start": "5451360",
    "end": "5456760"
  },
  {
    "text": "older hardware and older if you're on older VMware um uh uh solution it has",
    "start": "5456760",
    "end": "5463760"
  },
  {
    "text": "it's very relative so the counter TSC is not so not all counters not all performance counters are uh and counters",
    "start": "5463760",
    "end": "5470760"
  },
  {
    "text": "are virtualized so you cannot measure things the way you would have measured on real Hardware so it's worth um being",
    "start": "5470760",
    "end": "5477239"
  },
  {
    "text": "aware of that is is worthwhile um not all GC uh ec2 instances are the same as",
    "start": "5477239",
    "end": "5483960"
  },
  {
    "text": "as well so different you get different performances with the same um ec2 instance so um again the latest nalum um",
    "start": "5483960",
    "end": "5494320"
  },
  {
    "text": "Hardware um gives you virtualization for direct path iio as well as BTD and btx",
    "start": "5494320",
    "end": "5501600"
  },
  {
    "text": "so but um but if you're iio if you're an i1 app be aware that if you're not using",
    "start": "5501600",
    "end": "5506719"
  },
  {
    "text": "this um you you have substantially different performance basically it allows you to bridge from your um VMware",
    "start": "5506719",
    "end": "5514040"
  },
  {
    "text": "guest to is bypass the hypervisor go directly to the to the network interface and that's what uh this is doing so if",
    "start": "5514040",
    "end": "5520080"
  },
  {
    "text": "you have a IU intensive app try and use that if you're virtualized so that's kind of the big uh big picture out there",
    "start": "5520080",
    "end": "5527199"
  },
  {
    "text": "um jbm still happens to be the most popular platform of the day um there is",
    "start": "5527199",
    "end": "5532320"
  },
  {
    "text": "no question about that um Java may not be the app you're using to develop um",
    "start": "5532320",
    "end": "5538679"
  },
  {
    "text": "may not be the language you're using to develop your app but um if you're using um any variant of a runtime the jbm is",
    "start": "5538679",
    "end": "5547440"
  },
  {
    "text": "running most likely your app on the top so so different languages but they're all trying to go back to using the jvm",
    "start": "5547440",
    "end": "5554760"
  },
  {
    "text": "which is pretty old uh and has matured as a platform um there are these are the",
    "start": "5554760",
    "end": "5560520"
  },
  {
    "text": "kind of common um heartburns at large scale and um there are um we have",
    "start": "5560520",
    "end": "5568600"
  },
  {
    "text": "touched on some Solutions on those so so I think the question is is it",
    "start": "5568600",
    "end": "5576119"
  },
  {
    "text": "still is 2 gig keep still the limitation for sun GC if you have um if you have a",
    "start": "5576119",
    "end": "5581920"
  },
  {
    "text": "low latency requirement right so if you have a low latency requirement that is still the truth um if we still have um",
    "start": "5581920",
    "end": "5589119"
  },
  {
    "text": "maybe we've seen it grow till 3 and a half gigs for uh for some workloads but",
    "start": "5589119",
    "end": "5595119"
  },
  {
    "text": "it's still the common case that small heaps are better than large sheeps but if you have a state full app for example",
    "start": "5595119",
    "end": "5603040"
  },
  {
    "text": "such as Cassandra where where you want a lot of Liv set if you have a very large life set we have found that larger heaps",
    "start": "5603040",
    "end": "5610480"
  },
  {
    "text": "have been used by customers um with uh periodic um pause time and we try to",
    "start": "5610480",
    "end": "5618159"
  },
  {
    "text": "reduce that full GC occurrence once to once a day or once every two days but",
    "start": "5618159",
    "end": "5625159"
  },
  {
    "text": "reduced so we're kind of managing the problem because the solution um while",
    "start": "5625159",
    "end": "5630440"
  },
  {
    "text": "the solution is being worked on by Oracle aul and other guys we are waiting for those to become mainstream and use",
    "start": "5630440",
    "end": "5637480"
  },
  {
    "text": "them for large heaps but if you get a 256 ke keep you know you can do a lot more today I kind of expected not to be",
    "start": "5637480",
    "end": "5646000"
  },
  {
    "text": "talking about GC in 2011 honestly um I mean I I mean I I was",
    "start": "5646000",
    "end": "5652920"
  },
  {
    "text": "designers like designer like you um building J2 apps in '90s 798 and",
    "start": "5652920",
    "end": "5659480"
  },
  {
    "text": "suffered GC in production I was like wow this problem needs to be solved right so uh having put a decade of work on it um",
    "start": "5659480",
    "end": "5667360"
  },
  {
    "text": "I kind of hope that problem is gone and we not be talking about this at all and",
    "start": "5667360",
    "end": "5672400"
  },
  {
    "text": "happily talking about stuff that's even more fun um but um yeah so the the",
    "start": "5672400",
    "end": "5679679"
  },
  {
    "text": "algorithms for for working this out are in the works I think in all the gc's",
    "start": "5679679",
    "end": "5685520"
  },
  {
    "text": "right in all the jbms and all the gc's um jrocket aul Sun Oracle Sun um um so",
    "start": "5685520",
    "end": "5694840"
  },
  {
    "text": "um my guess is this problem is is is on its last leg um post um and and Oracle",
    "start": "5694840",
    "end": "5703960"
  },
  {
    "text": "is a very customer Centric company just like the others um so customers have suffered this problem it's not a it's",
    "start": "5703960",
    "end": "5710280"
  },
  {
    "text": "not a problem that's it's not a vacuum problem it's not a problem looking for customers it's actually a real problem",
    "start": "5710280",
    "end": "5717080"
  },
  {
    "text": "so there are two routes and one that I present both of them one was do we go off Heap and build our own um",
    "start": "5717080",
    "end": "5724520"
  },
  {
    "text": "I think there are some GC jvm changes that need to happen to make the offhe",
    "start": "5724520",
    "end": "5729639"
  },
  {
    "text": "work well and that's the kind of like not relegate to finalizers but make it a mainstream thing but uh the other side",
    "start": "5729639",
    "end": "5737360"
  },
  {
    "text": "so there are some designers who are going that route the other route is um",
    "start": "5737360",
    "end": "5742440"
  },
  {
    "text": "weit out 17 hopefully GC is solved there um uh G1 is um is promising to do that",
    "start": "5742440",
    "end": "5750639"
  },
  {
    "text": "or maybe um the Azul GC we can s widely open jdk like that it can be widely",
    "start": "5750639",
    "end": "5758000"
  },
  {
    "text": "applicable but the algorithms are there I mean this this this field has been researched for for decades and um",
    "start": "5758000",
    "end": "5764800"
  },
  {
    "text": "there's the way we have um we've kind of snuck ourselves into the first implementation second implementation and",
    "start": "5764800",
    "end": "5771040"
  },
  {
    "text": "now we're trying to carry that um parallel GC version into perpetuity uh I",
    "start": "5771040",
    "end": "5779159"
  },
  {
    "text": "think this problem needs to see will is very likely on its last leg",
    "start": "5779159",
    "end": "5784400"
  },
  {
    "text": "um at at which point my guess is that um the average um so I mean memory has",
    "start": "5784400",
    "end": "5791920"
  },
  {
    "text": "become infinitely cheaper and it's very easy to get a 50 g 64 people want to",
    "start": "5791920",
    "end": "5797199"
  },
  {
    "text": "launch a 64 gig heat and so um and and and you want to have it like if you're",
    "start": "5797199",
    "end": "5802280"
  },
  {
    "text": "running something like a vol TV you want have all of that in memory locally and run it without a full GC pause so my my",
    "start": "5802280",
    "end": "5810239"
  },
  {
    "text": "suspicion is that it's um it's um very likely going to be a a problem that you",
    "start": "5810239",
    "end": "5815840"
  },
  {
    "text": "shouldn't be even looking at and um and and jbms are enough prevalent even with",
    "start": "5815840",
    "end": "5822960"
  },
  {
    "text": "the new Scola and others are all going to be jbm baked um so this problem is",
    "start": "5822960",
    "end": "5828280"
  },
  {
    "text": "not um not a long-term problem yeah so so for for the young people who often",
    "start": "5828280",
    "end": "5834400"
  },
  {
    "text": "come and try to want to spend time trying to tune GC I just tell them don't worry about",
    "start": "5834400",
    "end": "5840800"
  },
  {
    "text": "it Patricia is one of them yeah I mean it's that's how I started and and and",
    "start": "5840800",
    "end": "5847600"
  },
  {
    "text": "and really having um looked at the problem with different approaches it's really a um an implementation CH problem",
    "start": "5847600",
    "end": "5856080"
  },
  {
    "text": "it's not a real problem problem it's not physics it's not um it's not really definitely not rocket science so and I I",
    "start": "5856080",
    "end": "5863760"
  },
  {
    "text": "think that's that's kind of the learning of the zul story is that even without the hardware um we are able to sustain",
    "start": "5863760",
    "end": "5870119"
  },
  {
    "text": "actually without the hardware we do better um in the sense in the notion of faster faster CPUs have actually helped",
    "start": "5870119",
    "end": "5876760"
  },
  {
    "text": "right faster l2s and the new hardware has caught up right the new Helms are have the high qpi have memory bandwidth",
    "start": "5876760",
    "end": "5883400"
  },
  {
    "text": "they they do better so um so all the all the architecture we proposed um and kind",
    "start": "5883400",
    "end": "5889719"
  },
  {
    "text": "of front run and test run if you will are the hardware of today where you have",
    "start": "5889719",
    "end": "5895400"
  },
  {
    "text": "eight cores you have a very fast memory controller on chip you get the high bandwidth so if you have four such nalum",
    "start": "5895400",
    "end": "5902760"
  },
  {
    "text": "chips you have a pretty good system today so yeah so the question is how if I'm",
    "start": "5902760",
    "end": "5909119"
  },
  {
    "text": "I'm a mobile uh phone developer and would how would I how do I tune my GC or",
    "start": "5909119",
    "end": "5915400"
  },
  {
    "text": "what collector can I use and what's the world doing there is that kind of so small jvms actually is a um it's a Well",
    "start": "5915400",
    "end": "5922480"
  },
  {
    "text": "understood problem U but the small jvms being able to tune gc's actually is a well um people attack the problem very",
    "start": "5922480",
    "end": "5929080"
  },
  {
    "text": "early on and um it's actually quite solvid problem there are different",
    "start": "5929080",
    "end": "5934440"
  },
  {
    "text": "vendors metronom is actually um IBM metronom is very good at that and it's actually also growing into being the big",
    "start": "5934440",
    "end": "5939800"
  },
  {
    "text": "n one but um that problem the real time GC guys which is the low level lowend",
    "start": "5939800",
    "end": "5945679"
  },
  {
    "text": "small kind of the kind of the uh small size jbms uh that problem is reasonably",
    "start": "5945679",
    "end": "5951040"
  },
  {
    "text": "well solved um even um traditional collectors uh do very well at small Heap sizes so um um G1 kind of is also trying",
    "start": "5951040",
    "end": "5960199"
  },
  {
    "text": "g1's goal is to go from 4 to 16 gig size but if you're suffering GC at the small",
    "start": "5960199",
    "end": "5966159"
  },
  {
    "text": "size that's tunable and that should be tuned so um so that problem you should",
    "start": "5966159",
    "end": "5971520"
  },
  {
    "text": "actually um do um look at the um playing it through the logs put it in the Excel",
    "start": "5971520",
    "end": "5978560"
  },
  {
    "text": "spreadsheet and and find the right size and you're probably done yeah so the 256 Meg and less size that's actually a well",
    "start": "5978560",
    "end": "5985840"
  },
  {
    "text": "understood problem and there are a couple of different collectors there's actually one um collector GC uh company",
    "start": "5985840",
    "end": "5991760"
  },
  {
    "text": "in in uh Germany actually which actually um focuses just purely on that small GC",
    "start": "5991760",
    "end": "5999199"
  },
  {
    "text": "small mobile and Android environment uh GC but um traditional all the other collectors um should do a reasonably",
    "start": "5999199",
    "end": "6006679"
  },
  {
    "text": "good job their parallel GC um should probably work for you all right thank",
    "start": "6006679",
    "end": "6012340"
  },
  {
    "text": "[Applause]",
    "start": "6012340",
    "end": "6018380"
  },
  {
    "text": "[Music] you",
    "start": "6018380",
    "end": "6025280"
  }
]