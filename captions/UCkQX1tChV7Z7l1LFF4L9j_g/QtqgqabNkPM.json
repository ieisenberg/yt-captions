[
  {
    "start": "0",
    "end": "66000"
  },
  {
    "text": "[Music]",
    "start": "2020",
    "end": "14789"
  },
  {
    "text": "all right so I'm uh introducing not introducing I'm going over two libraries I wrote uh almost a year and a half ago",
    "start": "15400",
    "end": "22000"
  },
  {
    "text": "I presented these at the first quasi Ember conf Ember camp but I actually",
    "start": "22000",
    "end": "27199"
  },
  {
    "text": "wrote them the night before so my presentation was not very good um but now I've had plenty of time to uh to",
    "start": "27199",
    "end": "33840"
  },
  {
    "text": "flush them out even though they're not they're not one oh yet uh so Ember validation is an ember easy form uh Le",
    "start": "33840",
    "end": "41000"
  },
  {
    "text": "did a good job of introducing me Brian Cura CEO doyard blah blah blah so uh",
    "start": "41000",
    "end": "47280"
  },
  {
    "text": "Ember validations Ember easy form are best of friends they are complimentary libraries but they're also independent",
    "start": "47280",
    "end": "53840"
  },
  {
    "text": "they can be run independently a better way to think about them is that ember validations only concern is about the",
    "start": "53840",
    "end": "60879"
  },
  {
    "text": "model layer whereas Ember easy form's only concern is about the view",
    "start": "60879",
    "end": "66479"
  },
  {
    "start": "66000",
    "end": "206000"
  },
  {
    "text": "layer so uh before we move forward I want to actually go over and establish",
    "start": "66479",
    "end": "71840"
  },
  {
    "text": "uh two rules that I've looked at when uh building out these libraries um and the first one seems",
    "start": "71840",
    "end": "79439"
  },
  {
    "text": "pretty obvious uh although I'm very shocked by how many people violate this server side validations ensure your data",
    "start": "79439",
    "end": "85920"
  },
  {
    "text": "Integrity not client side validations uh if you are validating on the client but",
    "start": "85920",
    "end": "91479"
  },
  {
    "text": "you're not validating your data on the server stop what you're doing and go fix it it's somebody will poke around and",
    "start": "91479",
    "end": "98479"
  },
  {
    "text": "they will find way to inject data into your server uh into your back end and you're like how' they get around my",
    "start": "98479",
    "end": "104320"
  },
  {
    "text": "awesome client side validations because you're building an ember application you now are exposing an API to",
    "start": "104320",
    "end": "110640"
  },
  {
    "text": "everybody um the other rule is that given the first rule clients have validation only role is to actually",
    "start": "110640",
    "end": "118280"
  },
  {
    "text": "guide a user into how to submit data it should not be used for anything else and",
    "start": "118280",
    "end": "124000"
  },
  {
    "text": "that goes for form submissions whether you're using validations is to actually uh if you're building out some more um",
    "start": "124000",
    "end": "129520"
  },
  {
    "text": "like guey components that actually are responding to uh valid States then the",
    "start": "129520",
    "end": "137519"
  },
  {
    "text": "uh view layer should present a guide for your users to actually push them to uh submitting data",
    "start": "137519",
    "end": "146879"
  },
  {
    "text": "properly so Ember validations itself it's hosted here on the dockyard GitHub repo we",
    "start": "146879",
    "end": "154560"
  },
  {
    "text": "build all of our travisci greens onto build. do.com uh that was put together",
    "start": "154560",
    "end": "160760"
  },
  {
    "text": "by uh one of our Deads Robert Jackson um coincidentally he did the same thing for",
    "start": "160760",
    "end": "166159"
  },
  {
    "text": "Ember so the uh the Ember sorry bills. Ember js. comom was done by Robert as well however there is a Uh something's",
    "start": "166159",
    "end": "173720"
  },
  {
    "text": "wrong with Travis I saw it the other day so um the Ember validations is uh Travis",
    "start": "173720",
    "end": "180040"
  },
  {
    "text": "is great except for when it stops working you have no idea why because you can't actually access the uh access that",
    "start": "180040",
    "end": "187319"
  },
  {
    "text": "um so uh it's passing locally for us but if you want to use Ember validations right now with the latest release of",
    "start": "187319",
    "end": "193560"
  },
  {
    "text": "Ember uh please grab a gist that I that I um compiled locally if you just go to",
    "start": "193560",
    "end": "199319"
  },
  {
    "text": "just. github.com bardella uh it's like one of the first ones on there if you don't feel like",
    "start": "199319",
    "end": "204400"
  },
  {
    "text": "memorizing that number so to those was okay for everyone",
    "start": "204400",
    "end": "209439"
  },
  {
    "start": "206000",
    "end": "488000"
  },
  {
    "text": "to see by the way cuz that's essentially what they're looking like yes okay uh so",
    "start": "209439",
    "end": "215319"
  },
  {
    "text": "here's a very simple Ember validations example we first start by mixing in the Ember validations traits into our object",
    "start": "215319",
    "end": "223319"
  },
  {
    "text": "that we're going to validate against here I'm using an object controller but later on I'll use regular Ember object",
    "start": "223319",
    "end": "229599"
  },
  {
    "text": "um and then here is the validations rules so that's essentially all you're",
    "start": "229599",
    "end": "235200"
  },
  {
    "text": "going to be mixing in or actually the only changes that you'll be making directly to your to your object you want to validate against the validation rule",
    "start": "235200",
    "end": "242319"
  },
  {
    "text": "set itself is comprised of uh properties so these should be properties that are",
    "start": "242319",
    "end": "247799"
  },
  {
    "text": "directly accessible on your the object that you're validating um and then each of those",
    "start": "247799",
    "end": "254560"
  },
  {
    "text": "properties has rules so the rules are going to map back to the classes uh for",
    "start": "254560",
    "end": "261519"
  },
  {
    "text": "the given validator and then excuse me the values for each of those rules will",
    "start": "261519",
    "end": "267000"
  },
  {
    "text": "be options passed in in this case presence doesn't I'm not taking or rather I'm not",
    "start": "267000",
    "end": "272639"
  },
  {
    "text": "submitting any options to it so I just have the placeholder of true which is just for conciseness here's a little bit",
    "start": "272639",
    "end": "278960"
  },
  {
    "text": "more complex uh validation example so in this case I actually can override the message for the present's validator and",
    "start": "278960",
    "end": "287360"
  },
  {
    "text": "there is a light internationalization esque Library built into Ember",
    "start": "287360",
    "end": "292639"
  },
  {
    "text": "validations in fact if you're using James rosen's iatn Library uh it would pref it Ember validations will properly",
    "start": "292639",
    "end": "299199"
  },
  {
    "text": "prefer that instead um so you can uh internationalize your messages uh so",
    "start": "299199",
    "end": "307240"
  },
  {
    "text": "here's an example of passing different options there for the length validator we have a minimum option the readme has",
    "start": "307240",
    "end": "313280"
  },
  {
    "text": "a full list of all the options for all the validators so I can pass pass in maximum as well or",
    "start": "313280",
    "end": "320840"
  },
  {
    "text": "range age just num sorry numeric cality and that has its own options so if",
    "start": "320840",
    "end": "326720"
  },
  {
    "text": "you're looking at these and you're saying that these look a little familiar uh then you might be a rails developer",
    "start": "326720",
    "end": "332880"
  },
  {
    "text": "or you might have a backward background in rails and that is because I have a background rails I I was still doing",
    "start": "332880",
    "end": "339199"
  },
  {
    "text": "rails uh doing rails since 2006 so my",
    "start": "339199",
    "end": "344240"
  },
  {
    "text": "brain's been saturated with active model validations active record validations um",
    "start": "344240",
    "end": "349880"
  },
  {
    "text": "however the uh um uh the the thing here is that in um",
    "start": "349880",
    "end": "358240"
  },
  {
    "text": "oh sorry I want to see these first uh so the the validations that I've included into Ember validations are what",
    "start": "358240",
    "end": "363880"
  },
  {
    "text": "I call the common validations absence acceptance confirmation exclusion format inclusion length numerical and",
    "start": "363880",
    "end": "370639"
  },
  {
    "text": "presence so um the the uh validations were they say that really fast okay um",
    "start": "370639",
    "end": "378759"
  },
  {
    "text": "the validations that are included here are fine um but when if you're familiar",
    "start": "378759",
    "end": "384240"
  },
  {
    "text": "with the way that rails does it uh this isn't really ideal for Ember applications uh rails will",
    "start": "384240",
    "end": "390280"
  },
  {
    "text": "um validate the um validate your data uh",
    "start": "390280",
    "end": "395400"
  },
  {
    "text": "when you opt into it so if you save your record it'll run through validations if you are checking to see if the record is",
    "start": "395400",
    "end": "400479"
  },
  {
    "text": "valid it'll run your validations so these are validations that you are um that you're just opting into they're not",
    "start": "400479",
    "end": "406560"
  },
  {
    "text": "happening automatically that's because in a request response cycle the end user doesn't care if they happen uh when",
    "start": "406560",
    "end": "413400"
  },
  {
    "text": "you're actually setting uh the properties to given data or right before the response comes back because all the",
    "start": "413400",
    "end": "419960"
  },
  {
    "text": "user cares about in the request response cycle is that at the end I have a full payload of the proper",
    "start": "419960",
    "end": "426960"
  },
  {
    "text": "information however in emberland we're concerned about the client we're concerned about actually showing a more",
    "start": "426960",
    "end": "432840"
  },
  {
    "text": "interactive experience uh if you have a little uh widget on your on your uh page",
    "start": "432840",
    "end": "440199"
  },
  {
    "text": "and and you click at the off and the user is not supposed to click at the off we don't want developers to have to go",
    "start": "440199",
    "end": "445599"
  },
  {
    "text": "in and kick off the validations manually to actually show that invalid state so",
    "start": "445599",
    "end": "451319"
  },
  {
    "text": "given that ember likes to auto update all around it Ember validations itself is employing on the model layer I want",
    "start": "451319",
    "end": "457759"
  },
  {
    "text": "to be very specific on the model layer uh live validations meaning that when data changes for a given property it",
    "start": "457759",
    "end": "464560"
  },
  {
    "text": "will kick off the coresponding validations so to better understand how",
    "start": "464560",
    "end": "471720"
  },
  {
    "text": "Ember validations work or rather the individual valider classes work under the hood and uh what I'm going to be",
    "start": "471720",
    "end": "478319"
  },
  {
    "text": "getting to in a little bit concept of the validation graph I'm going to break down the base validator class that all",
    "start": "478319",
    "end": "484800"
  },
  {
    "text": "validators will derive off of or extend off of so in the anit",
    "start": "484800",
    "end": "491520"
  },
  {
    "start": "488000",
    "end": "746000"
  },
  {
    "text": "function the first thing that you notice is that the validator instances themselves so these are classes and when",
    "start": "491520",
    "end": "497919"
  },
  {
    "text": "it when you actually build the validators it will create an instance of the validator so it's not going through",
    "start": "497919",
    "end": "504319"
  },
  {
    "text": "and uh just grabbing this validator every single time we're actually working off in an instance",
    "start": "504319",
    "end": "510120"
  },
  {
    "text": "and each of these instances have their own errors array this is because certain validations could per perh perhaps",
    "start": "510120",
    "end": "517200"
  },
  {
    "text": "actually generate more than one error message the property that you're passing",
    "start": "517200",
    "end": "523039"
  },
  {
    "text": "in or that you're defining the validation off of in the validation hash is being pushed into the dependent uh",
    "start": "523039",
    "end": "530640"
  },
  {
    "text": "validation Keys array so the reason why this is done",
    "start": "530640",
    "end": "535839"
  },
  {
    "text": "rather than having a uh a specific property is because there could be validators that are concerned um by more",
    "start": "535839",
    "end": "543839"
  },
  {
    "text": "than one property for example the confirmation valid confirmation validator uh imagine you have a password",
    "start": "543839",
    "end": "551279"
  },
  {
    "text": "confirmation and you change your password confirmation or sorry you change your password field and you go",
    "start": "551279",
    "end": "556959"
  },
  {
    "text": "change your password confirmation field if you change the first field when you get the second field to being equal to",
    "start": "556959",
    "end": "562680"
  },
  {
    "text": "first field is it should be observing both Fields so if you go back up and you change the original password field the",
    "start": "562680",
    "end": "568360"
  },
  {
    "text": "confirmation validor valat should fire again and should now show invalid so we want to be observing all of the uh",
    "start": "568360",
    "end": "575640"
  },
  {
    "text": "proper properties for each validator as possible so if you want to write your own custom validators that are very",
    "start": "575640",
    "end": "581279"
  },
  {
    "text": "complex uh you want to observe more than one given property you're going to push those onto the dependent validation Keys",
    "start": "581279",
    "end": "588279"
  },
  {
    "text": "array and then when any of those properties change or notify property change on those properties the validator",
    "start": "588279",
    "end": "594240"
  },
  {
    "text": "will run the call function so in the base uh validator this is by default",
    "start": "594240",
    "end": "600839"
  },
  {
    "text": "each of the other validators we'll see in a second the presence validator will extend the sell this is the function",
    "start": "600839",
    "end": "606399"
  },
  {
    "text": "that actually gets run every single time your validator uh fires finally each validator has an is",
    "start": "606399",
    "end": "613079"
  },
  {
    "text": "valid flag the isv valid flag is actually checking to see if there are any",
    "start": "613079",
    "end": "619640"
  },
  {
    "text": "messages in the errors array so the uh if you're not familiar with computer",
    "start": "619640",
    "end": "625240"
  },
  {
    "text": "properties in Ember uh definitely shouldn't read up on them they're awesome but the computed. empty computer",
    "start": "625240",
    "end": "631200"
  },
  {
    "text": "property um we pass it this uh this array path it will actually go through",
    "start": "631200",
    "end": "636440"
  },
  {
    "text": "and make sure that the array is empty and if it is is valid as true if it's not is valid as false and uh so facto so",
    "start": "636440",
    "end": "643720"
  },
  {
    "text": "we know that our uh validator is uh our validation failed if there are any",
    "start": "643720",
    "end": "650000"
  },
  {
    "text": "errors in the message sorry there are any messages in the errors array the presence validator here I'm",
    "start": "650000",
    "end": "656480"
  },
  {
    "text": "just going to go through one of them but this is a simple example uh extends off the base validator you'll notice that",
    "start": "656480",
    "end": "662079"
  },
  {
    "text": "there's a local name space I uh started out by names spacing between local and remote even though there is no support",
    "start": "662079",
    "end": "667560"
  },
  {
    "text": "for remote validators yet the NIT function will first call up the super chain so we want to grab",
    "start": "667560",
    "end": "674120"
  },
  {
    "text": "everything that the parent class has then down here it will actually set up",
    "start": "674120",
    "end": "679399"
  },
  {
    "text": "the message type uh grabbing the um the message or render the message rather",
    "start": "679399",
    "end": "686040"
  },
  {
    "text": "from the Ember validations message uh property so if you've dug into rails",
    "start": "686040",
    "end": "692560"
  },
  {
    "text": "validations um the blank um you can see it but this guy",
    "start": "692560",
    "end": "698480"
  },
  {
    "text": "right here that's um I use the naming conventions off of the validation messages from",
    "start": "698480",
    "end": "704560"
  },
  {
    "text": "rails so uh if you want to change the uh that message somewhere up the chain in",
    "start": "704560",
    "end": "711000"
  },
  {
    "text": "the uh in Ember validations I library or support or in James rosen's you would",
    "start": "711000",
    "end": "716639"
  },
  {
    "text": "change it on blank fin fin the call function is again what gets run and if the validation",
    "start": "716639",
    "end": "723560"
  },
  {
    "text": "fails it pushes the message onto the errors object so if you have a far more",
    "start": "723560",
    "end": "729120"
  },
  {
    "text": "complex validator if I were to show you the length validator um you'd see",
    "start": "729120",
    "end": "734639"
  },
  {
    "text": "multiple places where there are potential for messages to be pushed onto the uh onto the errors object because",
    "start": "734639",
    "end": "741160"
  },
  {
    "text": "there could be multiple could be multiple configurations for that validator to",
    "start": "741160",
    "end": "746880"
  },
  {
    "start": "746000",
    "end": "825000"
  },
  {
    "text": "fail so this starts to tie into uh what a concept that I've been talking about",
    "start": "746880",
    "end": "753279"
  },
  {
    "text": "for a little bit called the validation graph and the validation graph is an idea where you have um you can build up",
    "start": "753279",
    "end": "761959"
  },
  {
    "text": "very complex validation scenarios amongst different objects that are related to one another very very quickly",
    "start": "761959",
    "end": "768480"
  },
  {
    "text": "in Ember validations so to get a better understanding of how that works when you",
    "start": "768480",
    "end": "776079"
  },
  {
    "text": "actually mix in the Ember validations mix in into an object object and that object instantiates it creates its own",
    "start": "776079",
    "end": "782760"
  },
  {
    "text": "validators array that all validator instances get pushed onto uh oh that's what number two is so",
    "start": "782760",
    "end": "790040"
  },
  {
    "text": "it created the array pushes the instances the validators onto that and then the object that not the instances",
    "start": "790040",
    "end": "796680"
  },
  {
    "text": "of the validators but the object that you're actually validating uh has its own is valid flag and that will observe",
    "start": "796680",
    "end": "804639"
  },
  {
    "text": "uh the aggregate property of validators do add each is valid that's not a valid path but gives you the basic concept",
    "start": "804639",
    "end": "811279"
  },
  {
    "text": "that it will actually filter and find if there are any as valid flags on any of the validator instances that are false",
    "start": "811279",
    "end": "818000"
  },
  {
    "text": "then the object that you're validating is false uh if they're all true then the object that you're validating is",
    "start": "818000",
    "end": "825560"
  },
  {
    "start": "825000",
    "end": "952000"
  },
  {
    "text": "true here's a here's a base very sorry water down example of this I didn't uh",
    "start": "825560",
    "end": "832600"
  },
  {
    "text": "actually assign variable names to these but imagine that the top Ember object is an owner object and the bottom one is a",
    "start": "832600",
    "end": "838399"
  },
  {
    "text": "dog object and there is a relationship between the owner and the dog the dog or sorry the",
    "start": "838399",
    "end": "843720"
  },
  {
    "text": "owner has one dog so down here the dog",
    "start": "843720",
    "end": "848800"
  },
  {
    "text": "uh object has its own validator uh validation uh rules and so if the name is not provided",
    "start": "848800",
    "end": "856079"
  },
  {
    "text": "that dogs uh is valid state is going to be false up here in the owner's validation rules I provide a property",
    "start": "856079",
    "end": "863120"
  },
  {
    "text": "that references the path to that relationship instead of passing in a hash I pass in just true Ember",
    "start": "863120",
    "end": "869720"
  },
  {
    "text": "validations if it sees true instead of instead of an object it will make an assumption that we're dealing with a",
    "start": "869720",
    "end": "875399"
  },
  {
    "text": "relationship now and what happens internally is that it will grab that",
    "start": "875399",
    "end": "881000"
  },
  {
    "text": "relationship object in which case it's the instance of dog and it will push that onto the validator",
    "start": "881000",
    "end": "886880"
  },
  {
    "text": "array reason this becomes important is because the validator array only cares if each member of that array has an is",
    "start": "886880",
    "end": "893519"
  },
  {
    "text": "valid flag doesn't care if that given member is an instance of a validator or not so you you can have a another uh",
    "start": "893519",
    "end": "902040"
  },
  {
    "text": "Ember object pushed into that array that has its own validation rules and then that ember object could have other",
    "start": "902040",
    "end": "907600"
  },
  {
    "text": "objects that are also in there so you can start to imagine that you can build out a very deep what I call the",
    "start": "907600",
    "end": "912680"
  },
  {
    "text": "validation graph very very easily so here simple animation uh describing this",
    "start": "912680",
    "end": "918759"
  },
  {
    "text": "if you imagine that each of these blue circles are a given object and each of these blue circles have their own",
    "start": "918759",
    "end": "924040"
  },
  {
    "text": "validation rules so this may represent this tree here uh the uh uh",
    "start": "924040",
    "end": "930240"
  },
  {
    "text": "relationships amongst different objects and if one all the way at the bottom if like this like has a uh a length valid",
    "start": "930240",
    "end": "937120"
  },
  {
    "text": "there that is not satisfied that validation state will bubble all the way back up to the top so this allows you to",
    "start": "937120",
    "end": "944959"
  },
  {
    "text": "build out very very complex what I call validation graphs very easily and it's actually worked out to be pretty pretty",
    "start": "944959",
    "end": "952920"
  },
  {
    "start": "952000",
    "end": "1197000"
  },
  {
    "text": "cool so Ember validations that's that's the gist of it there's uh there's a good",
    "start": "952920",
    "end": "958199"
  },
  {
    "text": "more detailed in the readme on on the GitHub uh on the GitHub project but some",
    "start": "958199",
    "end": "963399"
  },
  {
    "text": "known issues that exist in the project as I'm sure people have questions about because these are the ones I get all the time uh no uniqueness uh yet one of my",
    "start": "963399",
    "end": "972000"
  },
  {
    "text": "devs has a PR pending right now um on implementing unique Nick I was holding",
    "start": "972000",
    "end": "977079"
  },
  {
    "text": "off for a long period of time only because I was hoping that the Json IPI spec would uh have some opinion on this",
    "start": "977079",
    "end": "984199"
  },
  {
    "text": "but it doesn't seem that to be the case so I don't want to wait any longer um uh",
    "start": "984199",
    "end": "990079"
  },
  {
    "text": "the other side of it was I did not want the library to have any opinions on how the remote API should uh Implement",
    "start": "990079",
    "end": "996880"
  },
  {
    "text": "uniqueness one my one of my guys came up with a pretty good solution for this so this will probably get pulled in",
    "start": "996880",
    "end": "1002160"
  },
  {
    "text": "depending uh me getting around to it um handling server side errors",
    "start": "1002160",
    "end": "1009199"
  },
  {
    "text": "so client side errors fine Ember validations but what happens if you're using Ember data and you are you submit",
    "start": "1009199",
    "end": "1018079"
  },
  {
    "text": "your data and then the server responds with the 500 or responds back with its own set of validation",
    "start": "1018079",
    "end": "1023240"
  },
  {
    "text": "errors there is no good answer to this um that I've come up with yet at least",
    "start": "1023240",
    "end": "1028839"
  },
  {
    "text": "but I think that if we look back at one of my guiding principles at the beginning was that the validate client",
    "start": "1028839",
    "end": "1035640"
  },
  {
    "text": "side validation should only be used to guide your users to uh to using your application it will help resolve this so",
    "start": "1035640",
    "end": "1043640"
  },
  {
    "text": "uh imagine if the server does throw 500 we want to be able to show that in some way we should be able to render that",
    "start": "1043640",
    "end": "1050160"
  },
  {
    "text": "properly um what if you have a property on the server that doesn't map directly",
    "start": "1050160",
    "end": "1056640"
  },
  {
    "text": "back to a property on the client uh perhaps you may be able to resolve that in a serializer and actually uh map it",
    "start": "1056640",
    "end": "1062760"
  },
  {
    "text": "back yourself uh but what if it just doesn't exist what if it's a very specific server side property that is",
    "start": "1062760",
    "end": "1069280"
  },
  {
    "text": "has no concept on the client how do we actually properly display or how do we",
    "start": "1069280",
    "end": "1074600"
  },
  {
    "text": "actually even uh allow the user to resolve these errors on the on on the client um one thing that we've been",
    "start": "1074600",
    "end": "1081640"
  },
  {
    "text": "kicking around is actually having a base property uh that gets mixed in from the Ember validations and then this is just",
    "start": "1081640",
    "end": "1088240"
  },
  {
    "text": "used for presentation uh purposes of here is the errors object that was",
    "start": "1088240",
    "end": "1094080"
  },
  {
    "text": "returned back from the server we're not going to actually consider this as being part of the validation graph we're not going to pre prevent it from uh being an",
    "start": "1094080",
    "end": "1101320"
  },
  {
    "text": "is valid or not valid not valid state but if the user needs to be guided in",
    "start": "1101320",
    "end": "1107240"
  },
  {
    "text": "some way that would be your opportunity for doing so but again not done yet uh I keep going back and forth on",
    "start": "1107240",
    "end": "1114799"
  },
  {
    "text": "where the proper place to mix in your validations uh are uh most of the time I",
    "start": "1114799",
    "end": "1121799"
  },
  {
    "text": "think controller is the proper place the controller is the context in which you're interacting with your",
    "start": "1121799",
    "end": "1127320"
  },
  {
    "text": "data if you mix validations into your model that essentially uh locks you into a global validation uh Global validation",
    "start": "1127320",
    "end": "1135280"
  },
  {
    "text": "rules for that given model but you start working Rel with",
    "start": "1135280",
    "end": "1141400"
  },
  {
    "text": "relationships um you can't go from the model layer up to the controller layer inside Ember so it becomes a little",
    "start": "1141400",
    "end": "1150039"
  },
  {
    "text": "excuse me tricky actually handling um the direction of that data",
    "start": "1150039",
    "end": "1156880"
  },
  {
    "text": "uh between Ember data models for for example and need some updating I wrote",
    "start": "1156880",
    "end": "1162520"
  },
  {
    "text": "again I wrote this a while back um and it should been kind of building on the tech debt and it's using the old ember",
    "start": "1162520",
    "end": "1169400"
  },
  {
    "text": "build system so bunch of Ruby stuff in there we're going to yank that out pretty soon and move it over to broccoli",
    "start": "1169400",
    "end": "1176280"
  },
  {
    "text": "um all es6 modules and once that's done then we'll probably start doing some uh",
    "start": "1176280",
    "end": "1183039"
  },
  {
    "text": "rapid updating of it I'm hoping that um we can roll out if I can resolve number",
    "start": "1183039",
    "end": "1188159"
  },
  {
    "text": "one and if prob get something in there reasonable for number two uh we can get a 1.0 out uh event not eventually",
    "start": "1188159",
    "end": "1196960"
  },
  {
    "text": "soon okay so Ember easy form the complement of Ember",
    "start": "1196960",
    "end": "1202480"
  },
  {
    "start": "1197000",
    "end": "1287000"
  },
  {
    "text": "validations again rails influence um if you're rails Dev you're probably familiar with a gem called simple form",
    "start": "1202480",
    "end": "1209120"
  },
  {
    "text": "it allows you to build out uh uh more complex uh valid uh sorry form mark up",
    "start": "1209120",
    "end": "1215880"
  },
  {
    "text": "very very very very succinctly and easy form is influenced by that the uh user experience in form",
    "start": "1215880",
    "end": "1224799"
  },
  {
    "text": "conversion opinions of um easy form it comes from a uh research article that",
    "start": "1224799",
    "end": "1232640"
  },
  {
    "text": "Luke roosi did for a list ofart back in 2009 so how easy form actually works",
    "start": "1232640",
    "end": "1241520"
  },
  {
    "text": "with uh the user experience for Ember validations is that uh it takes what w",
    "start": "1241520",
    "end": "1248080"
  },
  {
    "text": "did in that article and the he he took apart like the multiple ways in which users can enter in data and which one",
    "start": "1248080",
    "end": "1254720"
  },
  {
    "text": "actually yielded the best conversion rates and seemed from the article and the data that he had the best conversion",
    "start": "1254720",
    "end": "1260440"
  },
  {
    "text": "rate was if you um are not presented with the error until you Tab out of the",
    "start": "1260440",
    "end": "1266280"
  },
  {
    "text": "for add the form elements and then when you tab back in as soon as you correct it it goes away and then as soon as long",
    "start": "1266280",
    "end": "1273000"
  },
  {
    "text": "as you're still in there if you make another mistake it comes back until you Tab out and resets I I'm going to I'm",
    "start": "1273000",
    "end": "1279720"
  },
  {
    "text": "going to show that to you um I know maybe my description doesn't sound fantastic U but I'll show you a demo of",
    "start": "1279720",
    "end": "1285480"
  },
  {
    "text": "that in a little bit so so here's the Syntax for a very basic form with easy form it takes a",
    "start": "1285480",
    "end": "1292799"
  },
  {
    "start": "1287000",
    "end": "1463000"
  },
  {
    "text": "form four block helper you pass in uh the context you're going to be working with in this case um just using this but",
    "start": "1292799",
    "end": "1299240"
  },
  {
    "text": "you can pass in model or any other uh any other object uh again easy form does",
    "start": "1299240",
    "end": "1304400"
  },
  {
    "text": "what well it works with Ember validations it's not married to it I mean I know there's the TU hug hugging",
    "start": "1304400",
    "end": "1310159"
  },
  {
    "text": "of the tiger earlier on but um all it cares about is an is valid flag and an",
    "start": "1310159",
    "end": "1316240"
  },
  {
    "text": "errors object so if there another validation Library out there that is exposing uh that type of API it actually",
    "start": "1316240",
    "end": "1323240"
  },
  {
    "text": "should work as well easy form will uh uh detect um those properties and we'll uh",
    "start": "1323240",
    "end": "1331080"
  },
  {
    "text": "we'll set things up uh so anyway that will spit out this",
    "start": "1331080",
    "end": "1336400"
  },
  {
    "text": "markup so you get uh some I guess one person's opinion on what would be a",
    "start": "1336400",
    "end": "1342679"
  },
  {
    "text": "semantic uh markup for a form and one thing you'll notice right away is why is there a form element for",
    "start": "1342679",
    "end": "1349640"
  },
  {
    "text": "a single page application what what purpose could this possibly hold it's because we have a submit button and the",
    "start": "1349640",
    "end": "1355720"
  },
  {
    "text": "form uh element is actually a view and we're capturing the submit action uh submit event rather and then we send the",
    "start": "1355720",
    "end": "1362880"
  },
  {
    "text": "action up to the action Tash and either for you to handle on the controller or the route uh it's submitted as a sorry",
    "start": "1362880",
    "end": "1369919"
  },
  {
    "text": "it's sent as a submit function so all you have to do is Define your own submit function sorry submit",
    "start": "1369919",
    "end": "1376679"
  },
  {
    "text": "action the input uh is in here and um I'll probably just",
    "start": "1376679",
    "end": "1382520"
  },
  {
    "text": "uh mess this up at some point in the next few minutes but um so type text for",
    "start": "1382520",
    "end": "1387640"
  },
  {
    "text": "input is the default uh the the conventions that I implo that I put in for easy form again were brought over",
    "start": "1387640",
    "end": "1394520"
  },
  {
    "text": "from simple form and rails and strings are um of type text and I'll show you in",
    "start": "1394520",
    "end": "1401400"
  },
  {
    "text": "a minute that if you define if you set your input as type text it'll be a text area I know that sounds a little",
    "start": "1401400",
    "end": "1408039"
  },
  {
    "text": "confusing still pre- 1.0 so I'm open to debate whether or not that should be there uh if you've done your own labels",
    "start": "1408039",
    "end": "1416120"
  },
  {
    "text": "inside Ember I'm sure you've run into frustrations with how do I actually get it to link up to my input element",
    "start": "1416120",
    "end": "1421400"
  },
  {
    "text": "because those IDs are programmatically generated for you uh they're the Ember",
    "start": "1421400",
    "end": "1427279"
  },
  {
    "text": "GDs uh some solutions that you may have come across is actually because label can be a block you may be just wrapping",
    "start": "1427279",
    "end": "1433840"
  },
  {
    "text": "uh your input inside the label but what if your design calls for something different your label",
    "start": "1433840",
    "end": "1439039"
  },
  {
    "text": "uh it doesn't make sense to wrap your input in label easy form handles this for you automatically it will grab the GD uh for the uh for the input rather",
    "start": "1439039",
    "end": "1447640"
  },
  {
    "text": "for the property it'll set it up as a four attribute on the label which of course matches the ID on the input so",
    "start": "1447640",
    "end": "1453039"
  },
  {
    "text": "that's all set and finally there is a span of class error that is in there as",
    "start": "1453039",
    "end": "1459679"
  },
  {
    "text": "well and that's where all the error messages will be rendered out to you can add a hint if you'd like so",
    "start": "1459679",
    "end": "1468399"
  },
  {
    "text": "on the uh input you just do hint equals and pass it a string and it will um give",
    "start": "1468399",
    "end": "1473799"
  },
  {
    "text": "you this span of class hint uh inside the uh inside the input",
    "start": "1473799",
    "end": "1480720"
  },
  {
    "text": "div and here's the type text sorry as text so you can change the type of the",
    "start": "1480720",
    "end": "1486200"
  },
  {
    "text": "input it defaults to string uh which gives you an input of type text but if",
    "start": "1486200",
    "end": "1491320"
  },
  {
    "text": "you give it a text string as the type up here it'll give you a text area again",
    "start": "1491320",
    "end": "1497399"
  },
  {
    "text": "confusing I I agree here's all the different types",
    "start": "1497399",
    "end": "1503039"
  },
  {
    "start": "1500000",
    "end": "1547000"
  },
  {
    "text": "that uh easy form will take so uh string default checkbox select password email",
    "start": "1503039",
    "end": "1510159"
  },
  {
    "text": "Earl URL however you want to pronounce it tell color search number date realize today that there's no range in there so",
    "start": "1510159",
    "end": "1518000"
  },
  {
    "text": "low hanging fruit if anybody wants to submit a pull request uh another nice thing is that it",
    "start": "1518000",
    "end": "1524919"
  },
  {
    "text": "will actually look at the property name and it will try to give you it'll try to intelligently give you a uh the correct",
    "start": "1524919",
    "end": "1532360"
  },
  {
    "text": "input type so if you have a password property or something that has password",
    "start": "1532360",
    "end": "1538240"
  },
  {
    "text": "in it for example password confirmation it just does a Rex on the property name sees oh it's password and",
    "start": "1538240",
    "end": "1545039"
  },
  {
    "text": "then will'll give you an input of type password does this for other ones as well email URL color tell um I don't",
    "start": "1545039",
    "end": "1553080"
  },
  {
    "text": "remember why I set the Rex up to it has to start with tell but probably because",
    "start": "1553080",
    "end": "1558520"
  },
  {
    "text": "tell's pretty short and could be anywhere else in the string but I did like that and then",
    "start": "1558520",
    "end": "1565480"
  },
  {
    "start": "1565000",
    "end": "1585000"
  },
  {
    "text": "search and finally property value if your property has a given value",
    "start": "1565480",
    "end": "1572240"
  },
  {
    "text": "it will try to be smart about setting the input type properly so in this case we have a date and we can see that easy",
    "start": "1572240",
    "end": "1580600"
  },
  {
    "text": "form actually set the type for the input as a as a date",
    "start": "1580600",
    "end": "1585640"
  },
  {
    "start": "1585000",
    "end": "1660000"
  },
  {
    "text": "type and the options here are the ones that uh it will try to match against our",
    "start": "1586320",
    "end": "1591919"
  },
  {
    "text": "numbers dates and booleans and booleans will uh render a checkbox there are no radio buttons in",
    "start": "1591919",
    "end": "1599080"
  },
  {
    "text": "Easy form that's not my fault it's because there are no radio buttons in Ember",
    "start": "1599080",
    "end": "1605080"
  },
  {
    "text": "so don't blame me I know there's uh a bunch of",
    "start": "1605080",
    "end": "1611720"
  },
  {
    "text": "different solutions out there but none of them seem to have made it into the core Library yet you may not like the uh uh the order",
    "start": "1611720",
    "end": "1620840"
  },
  {
    "text": "of the elements that the input helper renders out so you can actually change",
    "start": "1620840",
    "end": "1628640"
  },
  {
    "text": "the input over from an inline helper to a block helper you pass it the property",
    "start": "1628640",
    "end": "1634000"
  },
  {
    "text": "name and then you're going to actually give it um uh probably can't see it because it's",
    "start": "1634000",
    "end": "1641159"
  },
  {
    "text": "red it's kind of not a great color but there's actually says input Dash field and label Dash field in there",
    "start": "1641159",
    "end": "1648720"
  },
  {
    "text": "whereas the previous examples had the label render above the input now we've reversed that and so it respects the",
    "start": "1648720",
    "end": "1654720"
  },
  {
    "text": "order in which you are defining it here so we have input first and then we have label",
    "start": "1654720",
    "end": "1660679"
  },
  {
    "text": "second and the four helpers that are used internally are input-field label",
    "start": "1660679",
    "end": "1665720"
  },
  {
    "text": "Dash field error Dash field and hint Dash field uh there is no Field Four",
    "start": "1665720",
    "end": "1672159"
  },
  {
    "start": "1669000",
    "end": "1815000"
  },
  {
    "text": "equivalent just yet on um actually not a very good one on easy form field 4",
    "start": "1672159",
    "end": "1678760"
  },
  {
    "text": "uh inside simple form was a way for you to actually uh build out semantic uh",
    "start": "1678760",
    "end": "1684760"
  },
  {
    "text": "markup for relationship objects as well but now that the wi uh helper",
    "start": "1684760",
    "end": "1693000"
  },
  {
    "text": "inside Ember has been fixed um it's going to be easier so the reason why I",
    "start": "1693000",
    "end": "1699640"
  },
  {
    "text": "was holding off on it is you can pass in a uh single object as a relationship or",
    "start": "1699640",
    "end": "1704679"
  },
  {
    "text": "you can pass in Array of objects as a relationship the array of objects is easy to render out we just pass in each",
    "start": "1704679",
    "end": "1710360"
  },
  {
    "text": "and then um we can Define the item controller for the each however with",
    "start": "1710360",
    "end": "1715679"
  },
  {
    "text": "doesn't did not previously have an item controller Declaration on it I added it about four or five months ago then when",
    "start": "1715679",
    "end": "1722000"
  },
  {
    "text": "someone found a really bad uh error and so I held off on implementing it inside",
    "start": "1722000",
    "end": "1727080"
  },
  {
    "text": "easy form in order to wait for that error to get fixed and I think it's going to be fixed for the next Rel",
    "start": "1727080",
    "end": "1732279"
  },
  {
    "text": "November it was the patch landed like yesterday or two days ago",
    "start": "1732279",
    "end": "1738880"
  },
  {
    "text": "it needs some updating as do all my libraries uh no valid state so um this",
    "start": "1738880",
    "end": "1744120"
  },
  {
    "text": "is something I really want to add in uh if imagine on each your input elements",
    "start": "1744120",
    "end": "1751360"
  },
  {
    "text": "uh sorry the containing div that if you're typing something that's invalid and it shows the validation uh error",
    "start": "1751360",
    "end": "1757159"
  },
  {
    "text": "message you may want to show like a little red X or something and as soon as you fixed it you may want to show like green check mark yay um I just haven't",
    "start": "1757159",
    "end": "1764960"
  },
  {
    "text": "added that in I think it' be really cool so that's it for my presentation um",
    "start": "1764960",
    "end": "1771640"
  },
  {
    "text": "we're hiring in Boston if anyone wants to move to the sunny shores of Boston uh",
    "start": "1771640",
    "end": "1778679"
  },
  {
    "text": "dockyard um we're also we're full stack uh consultany so we do uh design we do",
    "start": "1778679",
    "end": "1785640"
  },
  {
    "text": "uh project management we do um uh buildout as well um Enterprise startups",
    "start": "1785640",
    "end": "1791480"
  },
  {
    "text": "we handle it all and as Leia mentioned we're also organizing wik good ember in Boston that's our crazy tomster logo uh",
    "start": "1791480",
    "end": "1798600"
  },
  {
    "text": "that Tom said was going to cause him nightmares um so that's it thank you guys very much",
    "start": "1798600",
    "end": "1806960"
  }
]