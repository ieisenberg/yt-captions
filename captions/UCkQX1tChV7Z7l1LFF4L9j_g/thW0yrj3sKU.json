[
  {
    "text": "hi welcome to react and redux it's scale if you're not here to talk about react",
    "start": "3910",
    "end": "9460"
  },
  {
    "text": "reacts or haggle with me about the definition of the word scale the doors over there or you can just browse",
    "start": "9460",
    "end": "15639"
  },
  {
    "text": "twitter either one the Wi-Fi has actually been pretty fantastic today I am turning on my remote and then going",
    "start": "15639",
    "end": "24369"
  },
  {
    "text": "to the next slide my name is Daniel Cousineau I am Dooku's know just about everywhere on Twitter this is me",
    "start": "24369",
    "end": "30970"
  },
  {
    "text": "standing in front of one of my more recent projects it went pretty well this time we only lost half the house I live",
    "start": "30970",
    "end": "39190"
  },
  {
    "text": "here in New York I run the front end team and I've been helping out do some",
    "start": "39190",
    "end": "45010"
  },
  {
    "text": "things for the back end team at Grove oh but for the most part sticking to the front end team live here in New York",
    "start": "45010",
    "end": "50949"
  },
  {
    "text": "I run a meetup group called Queens Jess for anyone anyone here local to New York",
    "start": "50949",
    "end": "56649"
  },
  {
    "text": "City New Jersey area anything like that cool so I expect to see 20 of you all at",
    "start": "56649",
    "end": "61980"
  },
  {
    "text": "when next Wednesday at Queens Jas and or Manhattan Dreiser Brooklyn is an awesome",
    "start": "61980",
    "end": "67980"
  },
  {
    "text": "family meetup groups so now that I'm done plugging away I have been doing",
    "start": "67980",
    "end": "75100"
  },
  {
    "text": "react for about three four years somewhere right around early like Oh 13",
    "start": "75100",
    "end": "80200"
  },
  {
    "text": "something like that and got in early luckily I got in early on the flux game so I got to cut my teeth when nobody",
    "start": "80200",
    "end": "86560"
  },
  {
    "text": "knew what they were doing but now we've got this Redux thing and Redux is great and everybody goes hey you're gonna",
    "start": "86560",
    "end": "92260"
  },
  {
    "text": "build yourself a large single page application it's going to be in react what are we going to be basing it on we're gonna do Redux so that's the cool",
    "start": "92260",
    "end": "98800"
  },
  {
    "text": "thing so great you as the leader of your team sit down as everybody wants to do this so I'm gonna sit down and do some",
    "start": "98800",
    "end": "104050"
  },
  {
    "text": "research over a Saturday got your coffee sitting down in your couch and you go I've got a list of things to need to do all right so I need to figure out how to",
    "start": "104050",
    "end": "110440"
  },
  {
    "text": "write a to-do MVC got it done now I need to figure out how to write a production grade application a bit of a gulf",
    "start": "110440",
    "end": "116470"
  },
  {
    "text": "between that reminds me of my favorite professional drawing book how to draw an out figure one draw two circles figure",
    "start": "116470",
    "end": "122680"
  },
  {
    "text": "to draw the rest of the damn owl so we kind of need to fill in the blanks a little bit and it's really hard to fill",
    "start": "122680",
    "end": "129369"
  },
  {
    "text": "in the blanks other than a little bit of a personal experience so the way I'm going to structure this talk is is",
    "start": "129369",
    "end": "135040"
  },
  {
    "text": "number one I'm going to talk about kind of rules and rules are not",
    "start": "135040",
    "end": "140129"
  },
  {
    "text": "necessarily always presented as rules but typically you read these tutorials and they tell you things like always be",
    "start": "140129",
    "end": "146459"
  },
  {
    "text": "stateless always do this definitely do this definitely don't do that and these are what I call rules some of these are",
    "start": "146459",
    "end": "153719"
  },
  {
    "text": "common experience some of these are common knowledge some of these you think they're common knowledge either way we're gonna examine those and the reason",
    "start": "153719",
    "end": "160200"
  },
  {
    "text": "why we can Samuel is there's something to learn there's a motion and a form to rules and sometimes you don't understand",
    "start": "160200",
    "end": "166290"
  },
  {
    "text": "why you're doing it why anybody recommends them and certainly sometimes they feel a little arbitrary like",
    "start": "166290",
    "end": "172049"
  },
  {
    "text": "they're kind of constraining and you say to yourself why do I need to listen these rules I'm in the real world and I",
    "start": "172049",
    "end": "178169"
  },
  {
    "text": "need to actually build a real application but we have to remember sometimes even though this to do MVC",
    "start": "178169",
    "end": "183750"
  },
  {
    "text": "tutorial and all these things are giving you things that don't necessarily apply to the application that you're working on immediately kind of the motions and",
    "start": "183750",
    "end": "190889"
  },
  {
    "text": "forms that you went through and following the rules can at least if you remember why you did the rule in the first place you don't have to follow it",
    "start": "190889",
    "end": "197730"
  },
  {
    "text": "but it can certainly provide some help and insight into maybe what you're gonna do and help guide you into when the best",
    "start": "197730",
    "end": "205139"
  },
  {
    "text": "time to break it is and then secondly I cited this talk react and redux at scale",
    "start": "205139",
    "end": "210840"
  },
  {
    "text": "because I wanted to look really smart and scale is still a big buzzwords so I went with that scalability on Wikipedia",
    "start": "210840",
    "end": "218790"
  },
  {
    "text": "is defined is the capability of a system network or process to handle a growing amount of work or its potential to be enlarged to accommodate growth when I'm",
    "start": "218790",
    "end": "226650"
  },
  {
    "text": "talking about scale I'm not necessarily talking about computational scale this is not going to be a talk about",
    "start": "226650",
    "end": "232259"
  },
  {
    "text": "performance that is either number one the very hardest thing that you will ever do because these are browsers or if",
    "start": "232259",
    "end": "238919"
  },
  {
    "text": "we're talking about having lots of users congratulations most of you here front-end developers",
    "start": "238919",
    "end": "244379"
  },
  {
    "text": "you already understand distributed systems better than most back-end developers do because you're distributing your applications to",
    "start": "244379",
    "end": "250229"
  },
  {
    "text": "hundreds of thousands of thin clients and it's running fully on there congratulations you've already made it what I'm talking about scalability in",
    "start": "250229",
    "end": "257099"
  },
  {
    "text": "terms of how do I get my application set up so that I can actually grow it fast enough without finding myself in a",
    "start": "257099",
    "end": "263430"
  },
  {
    "text": "squirrely of spaghetti code mess so that further ado we're going to start I'm",
    "start": "263430",
    "end": "268979"
  },
  {
    "text": "going to go into part one react and so this part I want to talk a little bit about the react side of my react",
    "start": "268979",
    "end": "275510"
  },
  {
    "text": "Redux at scale then I'm gonna talk about Redux and I'm gonna talk about the scale part and this part is more of a",
    "start": "275510",
    "end": "280730"
  },
  {
    "text": "refresher how many people here are already using react in production how many people want to use react in",
    "start": "280730",
    "end": "287240"
  },
  {
    "text": "production how many people absolutely hate react okay good that would have",
    "start": "287240",
    "end": "292700"
  },
  {
    "text": "been a bold move for anybody to do that so there's gonna be a little bit of",
    "start": "292700",
    "end": "297980"
  },
  {
    "text": "refresher but some things that I find that I constantly have to remind some devs on that they kind of gloss over",
    "start": "297980",
    "end": "303170"
  },
  {
    "text": "because they don't need to so to start out we're gonna look at a rule component should be stateless this is a very good",
    "start": "303170",
    "end": "308540"
  },
  {
    "text": "rule stateless anything allows you to logically into it what's happening but",
    "start": "308540",
    "end": "316550"
  },
  {
    "text": "the reality is is while state is the enemy it is also inevitable we're making UI applications we're not making back in",
    "start": "316550",
    "end": "322820"
  },
  {
    "text": "applications that just need to pump out a report and it's fine we're making UI applications and they're a state",
    "start": "322820",
    "end": "328880"
  },
  {
    "text": "inevitable a users click the check box a user has typed into a text box so we need to remember that while state is the",
    "start": "328880",
    "end": "335210"
  },
  {
    "text": "enemy it is also inevitable it is fine to use set state as long as you use it proof as long as you use it the way it",
    "start": "335210",
    "end": "341810"
  },
  {
    "text": "is intended to be used as opposed to just slamming it in there so we",
    "start": "341810",
    "end": "346850"
  },
  {
    "text": "recognize the classic form of set state I have this is obviously hooked up to",
    "start": "346850",
    "end": "352190"
  },
  {
    "text": "some input element of some sort I'm grabbing the value doing something to it and I'm shoving it in a state this is the most common form of set state and we",
    "start": "352190",
    "end": "358520"
  },
  {
    "text": "all know this however a lot of people forget that there's more forms to set state and they're more ways to use it in",
    "start": "358520",
    "end": "365210"
  },
  {
    "text": "react set state basically builds a queue of changes that renders after each queue of changes occasionally sometimes the",
    "start": "365210",
    "end": "370670"
  },
  {
    "text": "changes are collapsed into there so they cause problems the second most common form that you'll see of set state that",
    "start": "370670",
    "end": "376550"
  },
  {
    "text": "you want to encourage yourself to remember exists is that the first argument doesn't have to be an object that's merged in a state it can be a",
    "start": "376550",
    "end": "383180"
  },
  {
    "text": "function that exists as a way to describe describe the change that you're making so in this form you're saying rather",
    "start": "383180",
    "end": "389390"
  },
  {
    "text": "than saying this is the change you described how to make the change how",
    "start": "389390",
    "end": "394490"
  },
  {
    "text": "many people here in early on in the react made a checkbox that immediately went to set State and they used this set",
    "start": "394490",
    "end": "400970"
  },
  {
    "text": "state object and then this dot state inside of there and you keep click that checkbox to see what happens and all of a sudden it gets out of sync with",
    "start": "400970",
    "end": "407010"
  },
  {
    "text": "what you're actually clicking on it anybody ever run across that bug alright at least one person good I'm not the",
    "start": "407010",
    "end": "412710"
  },
  {
    "text": "only insane person here so whenever you do something like this you especially anything where you have like a lot of",
    "start": "412710",
    "end": "418350"
  },
  {
    "text": "dependents I call this - I tell my developers any kind of dependent state update if you need the state in order to",
    "start": "418350",
    "end": "424260"
  },
  {
    "text": "calculate the next state you use this form you also have another common thing",
    "start": "424260",
    "end": "430440"
  },
  {
    "text": "that we found is is as we kind of had a lot of logic sitting inside of the react components we'd find a situation where",
    "start": "430440",
    "end": "436500"
  },
  {
    "text": "you would have set state and then you do some sort of not quite related some semi",
    "start": "436500",
    "end": "442080"
  },
  {
    "text": "unrelated action immediately after after a set state and especially if you did",
    "start": "442080",
    "end": "447090"
  },
  {
    "text": "one that included the state this is a bad idea I put a red X over it just to make sure that you really understood",
    "start": "447090",
    "end": "452610"
  },
  {
    "text": "that this is a bad idea can anybody can tell me why this is a bad idea how sure",
    "start": "452610",
    "end": "458700"
  },
  {
    "text": "are you that this state that value has what was set in the set state you shouldn't be sure at all it's an",
    "start": "458700",
    "end": "464910"
  },
  {
    "text": "asynchronous thing so while state is the enemy and while if you went with a stateless component you wouldn't have to worry about this if you were to use it",
    "start": "464910",
    "end": "472310"
  },
  {
    "text": "if you'd use it properly the second argument to the set state is a callback that says I guarantee to execute this",
    "start": "472310",
    "end": "479370"
  },
  {
    "text": "win set state is done and applying so kind of the gist of this is quick",
    "start": "479370",
    "end": "484919"
  },
  {
    "text": "refresher let's get back on the set state train but it's not necessarily an evil and while you want to avoid it it",
    "start": "484919",
    "end": "491430"
  },
  {
    "text": "does exist if you use it properly it becomes a little bit easier to use another common rule is context don't use",
    "start": "491430",
    "end": "499020"
  },
  {
    "text": "context it hides complexity how many people have actually used context in their reactants how many people even",
    "start": "499020",
    "end": "506280"
  },
  {
    "text": "know what context is not that many hands so in react they have you can pass down",
    "start": "506280",
    "end": "512370"
  },
  {
    "text": "state you have state you can passed on props there's also a third way called context the rule is in general people",
    "start": "512370",
    "end": "517560"
  },
  {
    "text": "will tell you don't use it there right don't use it but sometimes some complexity can be hidden you can open",
    "start": "517560",
    "end": "522570"
  },
  {
    "text": "yourself up to an opportunity if you allow yourself to use context however I",
    "start": "522570",
    "end": "529500"
  },
  {
    "text": "will say one rule that I've had on my team is only I'm allowed to confirm or deny whether or not context can be used",
    "start": "529500",
    "end": "536040"
  },
  {
    "text": "it's kind of a foot gun and so it's not anything to do with it's not that I'm better than my team at",
    "start": "536040",
    "end": "542279"
  },
  {
    "text": "figuring this out it's that if you just have one person kind of having a conservative influence on whether you",
    "start": "542279",
    "end": "547860"
  },
  {
    "text": "use it or not it kind of helps we did something cool in our applications so a company I work for we build a learning",
    "start": "547860",
    "end": "554070"
  },
  {
    "text": "tool and we have kind of a semi WYSIWYG editor and we have these concepts in our lessons called cards and we wanted to",
    "start": "554070",
    "end": "561450"
  },
  {
    "text": "make sure that we added as many card types as possible while making it easier for developers to add card types and one",
    "start": "561450",
    "end": "568709"
  },
  {
    "text": "of the things is we want to make sure the code that runs the editor interface is the same exact code that runs the",
    "start": "568709",
    "end": "573810"
  },
  {
    "text": "view interface and we were able to do something really cool with using context where context is a way of rather than",
    "start": "573810",
    "end": "581100"
  },
  {
    "text": "having to do really long chains of prop type passing we can do something",
    "start": "581100",
    "end": "587540"
  },
  {
    "text": "something that I'm particularly proud of where we actually pass in a lookup object through context and I can",
    "start": "587540",
    "end": "594510"
  },
  {
    "text": "actually create components based off of this lookup object for those of you who haven't spent much time in JSX in JSX",
    "start": "594510",
    "end": "602730"
  },
  {
    "text": "this first argument either turns into a string which does a component lookup or if it's a function name like if it's not",
    "start": "602730",
    "end": "608940"
  },
  {
    "text": "one of the components that it recognizes it'll it'll just use an identifier and since meta type text is an identifier",
    "start": "608940",
    "end": "616190"
  },
  {
    "text": "right there I can sit there and pass in a component but the card that I've built",
    "start": "616190",
    "end": "622770"
  },
  {
    "text": "doesn't actually know what component it's rendering just that it adheres to a similar parameter so I'm able to do",
    "start": "622770",
    "end": "629370"
  },
  {
    "text": "something like create two separate look-up tables of component types so I",
    "start": "629370",
    "end": "634380"
  },
  {
    "text": "just want to text here and it will always display it or always show the editor interface without the developer",
    "start": "634380",
    "end": "640560"
  },
  {
    "text": "working on the actual card code without them having to worry about the difference between edit and view mode",
    "start": "640560",
    "end": "646010"
  },
  {
    "text": "and then all I have to do is I have two different components one passes the view lookup and one passes the Edit lookup",
    "start": "646010",
    "end": "653450"
  },
  {
    "text": "and I'm kind of granted this adds a little bit of complexity on top of this system but it also hides a significantly",
    "start": "653450",
    "end": "660750"
  },
  {
    "text": "more amount of the complexity and it allows my developers to go in and edit and keep the internal code and",
    "start": "660750",
    "end": "667870"
  },
  {
    "text": "logic of the individual view cards fairly slim so there's really not too",
    "start": "667870",
    "end": "674709"
  },
  {
    "text": "much react so those are like kind of the two things whenever I talk to people that do react a lot that they kind of either avoid or don't spend a lot of",
    "start": "674709",
    "end": "680410"
  },
  {
    "text": "time doing they either try to avoid state or context my advice is don't necessarily avoid either those to use",
    "start": "680410",
    "end": "688420"
  },
  {
    "text": "them intelligently so we're gonna go into redux how many of you get the joke",
    "start": "688420",
    "end": "694779"
  },
  {
    "text": "on this slide part two redux okay sorry",
    "start": "694779",
    "end": "701680"
  },
  {
    "text": "I'm really proud of myself for that one so the most common thing I hear whenever",
    "start": "701680",
    "end": "706930"
  },
  {
    "text": "I talk to people who are having initial struggles with redox is everything must",
    "start": "706930",
    "end": "712209"
  },
  {
    "text": "be in the store why must everything must be in the store because it's a single source of truth single source of truth",
    "start": "712209",
    "end": "717430"
  },
  {
    "text": "is the most important thing that you can happen that you can have and this is",
    "start": "717430",
    "end": "723639"
  },
  {
    "text": "correct the single source of truth is a very very important thing to remember and have in your application the reality",
    "start": "723639",
    "end": "729490"
  },
  {
    "text": "is and this is going to blow your minds a tiny bit you can have multiple single sources of truth all a single source of",
    "start": "729490",
    "end": "735399"
  },
  {
    "text": "truth means is for a given piece of data that I'm displaying on the page there's only one and one location only where",
    "start": "735399",
    "end": "742690"
  },
  {
    "text": "that data is being written to infinite number of people can read from it but only one location only one path is",
    "start": "742690",
    "end": "749170"
  },
  {
    "text": "allowed to write to it so what do I mean by multiple single sources of truth I",
    "start": "749170",
    "end": "754269"
  },
  {
    "text": "start writing my application I have say a conceptual page right here with a",
    "start": "754269",
    "end": "759399"
  },
  {
    "text": "couple of individual components and I have this that state that checked is true so I have this small component here",
    "start": "759399",
    "end": "766000"
  },
  {
    "text": "and it has its own internal state lifecycle just like we discussed earlier this component right here is its own",
    "start": "766000",
    "end": "773980"
  },
  {
    "text": "single source of truth meaning anything that means this not say thought checked is going to pull it from that source and",
    "start": "773980",
    "end": "779050"
  },
  {
    "text": "the only thing that can update it is that component it's a completely self-contained single source of truth",
    "start": "779050",
    "end": "784420"
  },
  {
    "text": "this doesn't mean that I've pulled it out into the store this doesn't mean that I've done anything with it this technically qualifies as a single source",
    "start": "784420",
    "end": "790779"
  },
  {
    "text": "of truth now the key thing is is the other components don't need to know about it we receive more product",
    "start": "790779",
    "end": "796600"
  },
  {
    "text": "requirements and we decide that maybe it's time for us to do something a little bit more interesting with our interface one",
    "start": "796600",
    "end": "803110"
  },
  {
    "text": "of the first things you'll do is you'll pull state up words and this is one of the most common things that I suggest to people is it's really fine",
    "start": "803110",
    "end": "808990"
  },
  {
    "text": "even in redux it's perfectly fine even Dan Abramov says this is perfectly fine in redux to have local state just pull",
    "start": "808990",
    "end": "814750"
  },
  {
    "text": "it up to the least common denominator as much as possible in this case all of these components need to know the",
    "start": "814750",
    "end": "822580"
  },
  {
    "text": "checked value so I pull the state up into the parent component and provided as props you'll notice down here these",
    "start": "822580",
    "end": "828160"
  },
  {
    "text": "are props and then we've got state these components down here are not allowed to change it the single source of truth is",
    "start": "828160",
    "end": "835840"
  },
  {
    "text": "this state checked is true at the top level component meaning if any of these",
    "start": "835840",
    "end": "841090"
  },
  {
    "text": "components have anything different than that one they're wrong automatically there is only one source of truth and",
    "start": "841090",
    "end": "846460"
  },
  {
    "text": "then finally we can always pull out into the store and use connect to bring into",
    "start": "846460",
    "end": "851560"
  },
  {
    "text": "it but at this point that value becomes immutable for everybody who pulls it from the store only the redux cycle is",
    "start": "851560",
    "end": "858310"
  },
  {
    "text": "allowed to change it single source of truth there's also an additional play location to store a source of truth",
    "start": "858310",
    "end": "864730"
  },
  {
    "text": "about states that a lot of people forget exists and it's actually the oldest location to store state it has been",
    "start": "864730",
    "end": "871480"
  },
  {
    "text": "around since CERN and the original web window dot location your URL is a source",
    "start": "871480",
    "end": "880480"
  },
  {
    "text": "of states I see a lot of people anybody here use react router anybody use",
    "start": "880480",
    "end": "887530"
  },
  {
    "text": "reactor out of Redux with it why I used",
    "start": "887530",
    "end": "894700"
  },
  {
    "text": "it initially because all the tutorials told me to do it then I realized I wasn't actually using it I don't need to store the location in state there",
    "start": "894700",
    "end": "900190"
  },
  {
    "text": "already is a location it's in the browser it winds automatically just another single source of truth another",
    "start": "900190",
    "end": "906280"
  },
  {
    "text": "place to store it another general rule is side effects should happen outside of",
    "start": "906280",
    "end": "912460"
  },
  {
    "text": "the redox cycle meaning anytime you start dealing with redux you need to make sure that all of your actions are",
    "start": "912460",
    "end": "918370"
  },
  {
    "text": "pure your updates are pure everything like that no side effects meaning no asynchronous calls a lot of people bring",
    "start": "918370",
    "end": "924070"
  },
  {
    "text": "in thunks or we prefer sagas they're a little bit easier to test they prefer",
    "start": "924070",
    "end": "931330"
  },
  {
    "text": "that but you know the idea is side effects should happen off the redox cycle this is entirely correct but it",
    "start": "931330",
    "end": "936670"
  },
  {
    "text": "doesn't mean you can't have callbacks one thing is because we were using sagas we felt we had to keep everything inside",
    "start": "936670",
    "end": "942190"
  },
  {
    "text": "of a saga die became really difficult for us to export data out and our team was kind of bending over backwards and",
    "start": "942190",
    "end": "947770"
  },
  {
    "text": "writing wasting all this time writing this extra code for something as simple as I need to know when a persist action",
    "start": "947770",
    "end": "954160"
  },
  {
    "text": "is done and just display a little UI banner this little UI banner is not worth two days of developer time trying",
    "start": "954160",
    "end": "960280"
  },
  {
    "text": "to figure out the right should component update and/or component will receive props so we set up the standard in our",
    "start": "960280",
    "end": "967180"
  },
  {
    "text": "application where every action has the potential ability to have a callback as",
    "start": "967180",
    "end": "973390"
  },
  {
    "text": "the last argument for the action creator that our side effects system can call at any time and we can do something as",
    "start": "973390",
    "end": "980860"
  },
  {
    "text": "simple as display or banner or even even further down into the metal just simply",
    "start": "980860",
    "end": "986170"
  },
  {
    "text": "logging a timestamp to the server so that we can start tracking titi use you know when is the time to actually usable",
    "start": "986170",
    "end": "992470"
  },
  {
    "text": "as opposed to time to first byte considering we're sending so much react down I want to know usable not first byte so a lot of these are as I'm sure",
    "start": "992470",
    "end": "1001590"
  },
  {
    "text": "you're noticing a theme a lot of these are I can write a pure application or I can write an application that works and ships just making sure that when you",
    "start": "1001590",
    "end": "1008400"
  },
  {
    "text": "write an application that works in ships that you remember the reason for the pure rules another general idea is Redux stores",
    "start": "1008400",
    "end": "1015660"
  },
  {
    "text": "must be normalized for performance so a lot of the examples say ok I've got my",
    "start": "1015660",
    "end": "1020850"
  },
  {
    "text": "store structure and I'm gonna store all my posts in this array but then all of a sudden you start dealing with how many",
    "start": "1020850",
    "end": "1026100"
  },
  {
    "text": "how many people have seen a Redux tutorial that actually discusses the concept of pagination from the server",
    "start": "1026100",
    "end": "1033079"
  },
  {
    "text": "it's pretty much non-existent right you pretty much have to figure it out for yourself as soon as you start exploring",
    "start": "1033080",
    "end": "1040500"
  },
  {
    "text": "this tecnique solution it's not necessarily hard but you start to realize I have to start normalizing my store I arrange my store by domain entities I",
    "start": "1040500",
    "end": "1047400"
  },
  {
    "text": "start making sure to deduplicate and all these things and some people try to avoid that they're like no if I can just",
    "start": "1047400",
    "end": "1053190"
  },
  {
    "text": "do normal you know if I can Dean Orma lies it and have everything together just per page it'll be fine in reality",
    "start": "1053190",
    "end": "1058950"
  },
  {
    "text": "we don't do any of this performance it's raining this reason we do this actually reduce complexity so we add complexity upfront to reduce complexity",
    "start": "1058950",
    "end": "1066290"
  },
  {
    "text": "at the end I have a post on this this is a very long URL that you're not going to write down in time I'm gonna post it on",
    "start": "1066290",
    "end": "1072710"
  },
  {
    "text": "Twitter these slides are going to be up you'll be able to find this where I talk about this kind of concept of key",
    "start": "1072710",
    "end": "1080390"
  },
  {
    "text": "windows this is probably the the most technical part of the presentation and I",
    "start": "1080390",
    "end": "1085520"
  },
  {
    "text": "may speed through it a little bit to get to the end so you'll be able to find me throughout the conference and ask questions about it one of the things",
    "start": "1085520",
    "end": "1092090"
  },
  {
    "text": "that we did was we set a standard that helped us out a lot was we set a standard for the structure of any given",
    "start": "1092090",
    "end": "1098260"
  },
  {
    "text": "sub store if you will any given series for the domain entities and we came with",
    "start": "1098260",
    "end": "1103280"
  },
  {
    "text": "a concept of key windows so whenever you denormalize you just have a lookup table you have your entities by ID the key is",
    "start": "1103280",
    "end": "1108890"
  },
  {
    "text": "the ID you've got your entity and you can look this up you often need that for speed problem is is sometimes you hit a",
    "start": "1108890",
    "end": "1114980"
  },
  {
    "text": "situation where you have two disjoint sets of data like you have two disjoint views of a particular set of data one of",
    "start": "1114980",
    "end": "1123080"
  },
  {
    "text": "them being paginating one of them not so one example that I go to is is imagine you have a user's page and it's a table",
    "start": "1123080",
    "end": "1128990"
  },
  {
    "text": "on Islands showing three users at a time but I also have somewhere on this page just playing a list of managers now if",
    "start": "1128990",
    "end": "1135140"
  },
  {
    "text": "I'm gonna duplicate this data say one of the managers is in my paginated data but",
    "start": "1135140",
    "end": "1140150"
  },
  {
    "text": "one of the managers is not how do I know which order the list is in and the by ID",
    "start": "1140150",
    "end": "1145250"
  },
  {
    "text": "all these kind of things so we came up with the idea with key windows and all key windows are as I'm just tagging",
    "start": "1145250",
    "end": "1150770"
  },
  {
    "text": "metadata about the data in my store I've basically built an entire database in a JavaScript object because why not that's",
    "start": "1150770",
    "end": "1157910"
  },
  {
    "text": "what we do as JavaScript developers reinvent the wheel every 10 seconds so",
    "start": "1157910",
    "end": "1163070"
  },
  {
    "text": "came with the idea of key windows and the idea being is is we can have our nice normalized store D duplicated but",
    "start": "1163070",
    "end": "1169310"
  },
  {
    "text": "we have these key windows that store information most particularly a list of the IDS in order as it came down from",
    "start": "1169310",
    "end": "1175190"
  },
  {
    "text": "the server of the elements within this window and then any other metadata we",
    "start": "1175190",
    "end": "1181280"
  },
  {
    "text": "want in this particular case we have is fetching we have our is fetching flag and then we",
    "start": "1181280",
    "end": "1186320"
  },
  {
    "text": "have our pagination data here and we know that with browsers I've got a B and C and then all managers I have",
    "start": "1186320",
    "end": "1193040"
  },
  {
    "text": "in a and then I can just continue on without a care in the world the great thing is is this kind of starts to add",
    "start": "1193040",
    "end": "1199940"
  },
  {
    "text": "depth and complexity to the store but it starts to make things like your selectors a little bit easy to work with",
    "start": "1199940",
    "end": "1207100"
  },
  {
    "text": "how many people here actually use selectors to keep a wall between their components and their store how many",
    "start": "1207100",
    "end": "1214790"
  },
  {
    "text": "people have heard of a selector function I suggest everyone here that didn't",
    "start": "1214790",
    "end": "1219950"
  },
  {
    "text": "raise their hands look up a library called a BRE select and read their documentation to figure out what the",
    "start": "1219950",
    "end": "1225260"
  },
  {
    "text": "purpose of this library is I think if I were to go back to 20 minutes ago and",
    "start": "1225260",
    "end": "1230570"
  },
  {
    "text": "add a slide I would have kicked out an entire section and talked about selectors I have regrets already and I'm",
    "start": "1230570",
    "end": "1236420"
  },
  {
    "text": "not even done with my talk but selector functions are just an interface to get to your store it allows you to extract",
    "start": "1236420",
    "end": "1242420"
  },
  {
    "text": "information out of your store in a consistent manner but what we end up",
    "start": "1242420",
    "end": "1248360"
  },
  {
    "text": "having is is when we have this common store structure we say every single individual store must follow this key window structure every single you know",
    "start": "1248360",
    "end": "1256210"
  },
  {
    "text": "section of domain entities like all of my actions and reducers and API calls for users all my action reduce AP calls",
    "start": "1256210",
    "end": "1262400"
  },
  {
    "text": "for lessons all these kind of things all have the familiar pattern they all send down the all deal of key window I can",
    "start": "1262400",
    "end": "1268730"
  },
  {
    "text": "always expect that just a name kind of tagging the request you see here that the key window name acts is literally",
    "start": "1268730",
    "end": "1274850"
  },
  {
    "text": "just tagging a request like I have this fetch manager's that's just a specific query for users and then I'm tagging it",
    "start": "1274850",
    "end": "1280610"
  },
  {
    "text": "as all managers and then every single we actually have a single action that every single one of our modules uses called",
    "start": "1280610",
    "end": "1287690"
  },
  {
    "text": "receive entities and that can just receive an object of entities divided by type and then you end up with some",
    "start": "1287690",
    "end": "1296090"
  },
  {
    "text": "boilerplate and literally all I do is any time I fetch users I can update the key window to say hey I'm fetching and",
    "start": "1296090",
    "end": "1302000"
  },
  {
    "text": "then receive entities no matter who calls the receive entities as long as I say these are the users that I'm",
    "start": "1302000",
    "end": "1307850"
  },
  {
    "text": "receiving I can shovel them in the store and then update my key windows saying obviously I've received some users I can",
    "start": "1307850",
    "end": "1314840"
  },
  {
    "text": "mark it as is fetching false and I can shove all sorts of meta information into",
    "start": "1314840",
    "end": "1319960"
  },
  {
    "text": "this key window that I need to track you can see right there you",
    "start": "1319960",
    "end": "1326509"
  },
  {
    "text": "also and so like it also makes a lot of things a little bit more predictable I need to show a loading icon' on the",
    "start": "1326509",
    "end": "1333229"
  },
  {
    "text": "table but not on the managers display great I can select users or fetching and I can just say the all users is that fetching",
    "start": "1333229",
    "end": "1339919"
  },
  {
    "text": "right now or not I know exactly where to go find this it becomes predictable where do I find this and then it becomes",
    "start": "1339919",
    "end": "1345769"
  },
  {
    "text": "even easier to start adding on to it say we've gotten to the point to where we do need to store say an in-flight copy of",
    "start": "1345769",
    "end": "1351229"
  },
  {
    "text": "updating a user in the store if we follow the key windows pattern we go oh I can for example what we do is we add",
    "start": "1351229",
    "end": "1357889"
  },
  {
    "text": "an element that sits alongside by ID that's drafts and we say that by ID is canonical servers a canonical server",
    "start": "1357889",
    "end": "1365179"
  },
  {
    "text": "copy and then drafts is whatever the user is updating in flight you'll notice in the receive entities that we",
    "start": "1365179",
    "end": "1372559"
  },
  {
    "text": "eliminate what is ever in the drafts if I receive an entity with ID a if there's a draft Ray I discard it we have pretty",
    "start": "1372559",
    "end": "1379579"
  },
  {
    "text": "strict rules on immutability and so we say if the server copy is newer frankly we're ejecting the users copy out into",
    "start": "1379579",
    "end": "1385009"
  },
  {
    "text": "space because we don't right now support merge logic and we don't want to write the differing for merges but eventually",
    "start": "1385009",
    "end": "1391399"
  },
  {
    "text": "we can add that on that's an area that we can easily bolt on and then all we",
    "start": "1391399",
    "end": "1396589"
  },
  {
    "text": "literally have to do is go update our selectors and say you know what I'm going to prefer the draft over the canonical copy if it exists and then I",
    "start": "1396589",
    "end": "1403549"
  },
  {
    "text": "can do some really awesome things like I want to do kind of an undo action and get rid of the users input whenever I",
    "start": "1403549",
    "end": "1409099"
  },
  {
    "text": "need to undo I just say you know what I just need to eliminate the draft and that's it and I have this system so I",
    "start": "1409099",
    "end": "1416629"
  },
  {
    "text": "suggest you either find me during the conference or look at the blog post I'd be more than happy to go into detail",
    "start": "1416629",
    "end": "1422329"
  },
  {
    "text": "about all the different ways that we've kind of bent and flex this and I think you will find it extremely helpful to",
    "start": "1422329",
    "end": "1427429"
  },
  {
    "text": "your apps I could probably do a three hour tutorial on this alone but I'm more than happy to talk about it but the key",
    "start": "1427429",
    "end": "1433579"
  },
  {
    "text": "thing is is not the actual details of what we did but the fact that every single part of the story follows the",
    "start": "1433579",
    "end": "1439039"
  },
  {
    "text": "same structure and it becomes kind of repeatable and predictable on how to find things so now we're going to talk",
    "start": "1439039",
    "end": "1444529"
  },
  {
    "text": "about scale and the scale that is most important to me is not the scale of can",
    "start": "1444529",
    "end": "1449539"
  },
  {
    "text": "I serve bytes fast or anything like that it's can my team move up so one general",
    "start": "1449539",
    "end": "1455599"
  },
  {
    "text": "rule is you want to keep dependencies low to keep the application fast I want to use this great new library great how many kilobytes is gonna gonna add to",
    "start": "1455599",
    "end": "1462110"
  },
  {
    "text": "my payload I want to add this lodash thing great how many kilobytes is gonna add that to my payload this is a general",
    "start": "1462110",
    "end": "1467930"
  },
  {
    "text": "rule to keep in mind that's really good however it is time to let go of some of",
    "start": "1467930",
    "end": "1473930"
  },
  {
    "text": "our old nervousness and realize that last year serving two populations in",
    "start": "1473930",
    "end": "1479780"
  },
  {
    "text": "underdeveloped countries for the most part you can expect an OK internet and a modern browser and it's fine to do new",
    "start": "1479780",
    "end": "1487070"
  },
  {
    "text": "things so the key is not to think less about how do I send down less things how",
    "start": "1487070",
    "end": "1493880"
  },
  {
    "text": "to use less libraries the key is how do I increase perceived performance so there's a lot of people wanting to go",
    "start": "1493880",
    "end": "1500480"
  },
  {
    "text": "through and go oh well I've got this number of seconds this number of milliseconds and none of that really matters how do I increase precede",
    "start": "1500480",
    "end": "1507170"
  },
  {
    "text": "performance does a user think it's fast this it doesn't matter if it's actually fast if the user thinks it fast that's",
    "start": "1507170",
    "end": "1512600"
  },
  {
    "text": "the only reason that's the only thing that matters so one of the things we use is bundling which if anyone here is",
    "start": "1512600",
    "end": "1518960"
  },
  {
    "text": "using webpack you basically get it for free if you in p.m. install bundle loader you can do lazy loading and what",
    "start": "1518960",
    "end": "1527450"
  },
  {
    "text": "we like to do is we like to group sections of our app into more common areas so you know a theoretical routes",
    "start": "1527450",
    "end": "1535220"
  },
  {
    "text": "component is I use a bundle order to say okay everything that goes under the admin I'm going to attach to the I'm",
    "start": "1535220",
    "end": "1543740"
  },
  {
    "text": "gonna use the bundle loader and I'm gonna say a lazy loader which you can see right here and I'm gonna tag it with",
    "start": "1543740",
    "end": "1548780"
  },
  {
    "text": "the name admin so that everything gets grouped together what web pack will do with this is this require will now return a function that accepts a call",
    "start": "1548780",
    "end": "1555590"
  },
  {
    "text": "back and that callback is executed when that function is executed it will call the call back when the code that is at",
    "start": "1555590",
    "end": "1561770"
  },
  {
    "text": "the other end of that is fully loaded webpack does this to you does this for you for free so any of you who have",
    "start": "1561770",
    "end": "1567230"
  },
  {
    "text": "avoided moving to web pack for whatever reasons and you want to get bundle and go for this I think browser 5 might be able to do it but it's probably rural",
    "start": "1567230",
    "end": "1573440"
  },
  {
    "text": "your own good luck with that and then all you literally need is especially for",
    "start": "1573440",
    "end": "1578690"
  },
  {
    "text": "react router v4 is you just need a very simple component that says hey listen when it's loaded like when I'm loading",
    "start": "1578690",
    "end": "1585410"
  },
  {
    "text": "this code show a spinner otherwise if I have it show the component and what",
    "start": "1585410",
    "end": "1592370"
  },
  {
    "text": "we're able to do is we're able to say yes we have a lot of dependencies yes we have a lot of these things however mmm 80% of our users are",
    "start": "1592370",
    "end": "1600620"
  },
  {
    "text": "never going to visit the admin section so any code that gets required in the admin section should never be loaded for",
    "start": "1600620",
    "end": "1605690"
  },
  {
    "text": "the user and so we can increase perceived performance for the set of users that we care about and for the",
    "start": "1605690",
    "end": "1611299"
  },
  {
    "text": "users that we can explain away performance problems we shove it all under them so admin users are gonna have to wait a couple of hundred milliseconds",
    "start": "1611299",
    "end": "1617750"
  },
  {
    "text": "longer than anybody else and that's fine there's like three of them per customer and so what you get is you get this one",
    "start": "1617750",
    "end": "1624260"
  },
  {
    "text": "thing if you watch the inspector down here at the bottom you see I've loaded this page and then now that I've clicked",
    "start": "1624260",
    "end": "1629929"
  },
  {
    "text": "into lessons you see boom I load about 361 uncompressed kilobytes over the",
    "start": "1629929",
    "end": "1635840"
  },
  {
    "text": "network right when I click on the lessons tab and if you take advantage of caching it gets even faster because",
    "start": "1635840",
    "end": "1641029"
  },
  {
    "text": "you'll see the whole application was instantly and then it's 11 milliseconds to load from disk cache and you get kind",
    "start": "1641029",
    "end": "1646639"
  },
  {
    "text": "of like these great performance boosts where you can say the kind of most common entry point in my application is",
    "start": "1646639",
    "end": "1652820"
  },
  {
    "text": "optimized into the primary bundle and then all these secondary bundles and it literally is just as simple as that",
    "start": "1652820",
    "end": "1658340"
  },
  {
    "text": "bundling feels complicated but it's literally as simple as having this once and this in a bunch of different places",
    "start": "1658340",
    "end": "1664190"
  },
  {
    "text": "and you're done and if you build your application to think asynchronously it's",
    "start": "1664190",
    "end": "1671899"
  },
  {
    "text": "really not a hard problem to support another general rule is is render up-to-date data I need to wait for all",
    "start": "1671899",
    "end": "1678049"
  },
  {
    "text": "of my HTTP requests before I render my data I need to make sure everything's perfect that I'm not showing bad data to the user most of you probably know this",
    "start": "1678049",
    "end": "1685700"
  },
  {
    "text": "but this is kind of a healthy reminder to remind your team you don't need to render up-to-date data you just need to",
    "start": "1685700",
    "end": "1690740"
  },
  {
    "text": "render something just get something out to the user again perceived performance when you load up Facebook do you have",
    "start": "1690740",
    "end": "1697279"
  },
  {
    "text": "your posts on your wall no you have a shiny box that flashes at you for a little bit and it fills up that space",
    "start": "1697279",
    "end": "1702580"
  },
  {
    "text": "for those of you who are paying attention in the previous recording you may have noticed whenever you hit a certain section you see everything",
    "start": "1702580",
    "end": "1709190"
  },
  {
    "text": "popping in here we at our team our front-end people do not work on any",
    "start": "1709190",
    "end": "1714559"
  },
  {
    "text": "back-end services and back in service network in front-end services as a result these right here our back-end",
    "start": "1714559",
    "end": "1720830"
  },
  {
    "text": "calls these are actually so there's three calls there's a call to get this data and then we've prefetch the data on",
    "start": "1720830",
    "end": "1725990"
  },
  {
    "text": "the other sub tabs so that we can these kind of like row counts and you see how they kind of popped in a little",
    "start": "1725990",
    "end": "1732020"
  },
  {
    "text": "bit later but most of you probably really didn't notice it until I pointed it out and the users definitely don't",
    "start": "1732020",
    "end": "1737360"
  },
  {
    "text": "notice it which is great because this request was super slow it's like taking like on an average of a you know a",
    "start": "1737360",
    "end": "1742700"
  },
  {
    "text": "second or two and we can now give back in the time they need to go in to optimize it we don't have to optimize",
    "start": "1742700",
    "end": "1748910"
  },
  {
    "text": "immediately and it's not our problem and then another thing that we can do is we kind of fill in holes as we pop in the",
    "start": "1748910",
    "end": "1755660"
  },
  {
    "text": "extra data so here we see loading the home page where we pop in and then you notice everything start popping in this",
    "start": "1755660",
    "end": "1761870"
  },
  {
    "text": "actually happens fairly quickly because we have spent time optimizing it so if we step through you'll see that we start out if is it the very instant that the",
    "start": "1761870",
    "end": "1768679"
  },
  {
    "text": "application so the instant you see this the javascript is executed and has initialized all the Ajax requests but",
    "start": "1768679",
    "end": "1774500"
  },
  {
    "text": "nothing is returned there is no data in this application you see no data I have no upcoming assignments my calendar is",
    "start": "1774500",
    "end": "1781340"
  },
  {
    "text": "empty and I've got this big blue square and I have all these there because that'll have a lot less jitter when",
    "start": "1781340",
    "end": "1786440"
  },
  {
    "text": "everything's pop in so you see the very first request that completes this the what are on my current assignments that",
    "start": "1786440",
    "end": "1792200"
  },
  {
    "text": "pops in right there and you kind of barely notice it pop in I actually as I was putting the slide together I notice",
    "start": "1792200",
    "end": "1797360"
  },
  {
    "text": "there's a problem with the fonts and I'm gonna have to go talk with the team that does this page to figure out what's going on with the fonts however you get",
    "start": "1797360",
    "end": "1804320"
  },
  {
    "text": "this really nice pop of there another bug I noticed is is this is when we",
    "start": "1804320",
    "end": "1809480"
  },
  {
    "text": "actually have the lesson data but we don't have the image yet and it's white",
    "start": "1809480",
    "end": "1814549"
  },
  {
    "text": "and that's something that eventually we can optimize in the future Twitter started doing this where they calculate the most common color and shove that in",
    "start": "1814549",
    "end": "1820760"
  },
  {
    "text": "the square while they wait for it to load in and then finally the image pops in and you have the application this data we didn't wait for it all to get",
    "start": "1820760",
    "end": "1827150"
  },
  {
    "text": "done actually in some of the first iterations of our product we waited for all the homepage data to get in before we rendered it and people kept",
    "start": "1827150",
    "end": "1833960"
  },
  {
    "text": "complaining that was slow and then we split it up and we just rendered everything as we got it and even though",
    "start": "1833960",
    "end": "1839059"
  },
  {
    "text": "the total time was the exactly the same people stop complaining and in fact they were like oh thanks it's so much faster",
    "start": "1839059",
    "end": "1844610"
  },
  {
    "text": "now so perceived performance is really the only thing that matters is just render it in if you've got it rendered",
    "start": "1844610",
    "end": "1850309"
  },
  {
    "text": "if you don't don't and if you already have it in the store from a previous request render the old data before you",
    "start": "1850309",
    "end": "1855470"
  },
  {
    "text": "overlap it with the new data it's fine as long as you update it with the new data so epilogue scale there's another",
    "start": "1855470",
    "end": "1863070"
  },
  {
    "text": "section of scale I want to talk about which is has really nothing to do with any of the react redox that kind of stuff has everything to do with the",
    "start": "1863070",
    "end": "1868919"
  },
  {
    "text": "tooling you build around it so one of the general rules this is more less a rule more of a definition scale is bite",
    "start": "1868919",
    "end": "1875220"
  },
  {
    "text": "serve users concurrent how big is your application how many people do you use it I do not define it this way in my",
    "start": "1875220",
    "end": "1881760"
  },
  {
    "text": "opinion scale is responding to bite served in users concurrent how well do you respond to going from 50 users to",
    "start": "1881760",
    "end": "1888720"
  },
  {
    "text": "500 from 500 to 5,000 how well do you respond to that and in my opinion the",
    "start": "1888720",
    "end": "1895799"
  },
  {
    "text": "best question you can ask yourself to get set yourself up for success for responding to scale is how fast can you",
    "start": "1895799",
    "end": "1901350"
  },
  {
    "text": "deploy and while some of this is on your infrastructure team and some of this is",
    "start": "1901350",
    "end": "1906870"
  },
  {
    "text": "on your back-end team for the most part there's a lot that you can take on your team this is the quick start from our",
    "start": "1906870",
    "end": "1913769"
  },
  {
    "text": "front-end repo at work there are seven steps half of them are crap steps one of",
    "start": "1913769",
    "end": "1919169"
  },
  {
    "text": "them cloned this repo another one add a line to your hosts file but in general this is everything you need to take a",
    "start": "1919169",
    "end": "1926600"
  },
  {
    "text": "Macbook that you brought up the mac store unwrapped it turned it on logged in and installed node in yarn once",
    "start": "1926600",
    "end": "1932669"
  },
  {
    "text": "you've done all of that these are all the steps you need to get this up and running on your machine I have an",
    "start": "1932669",
    "end": "1937889"
  },
  {
    "text": "internal KP I have no project I'll ever work on should take less than 15 minutes to start out from a brand new mat I time",
    "start": "1937889",
    "end": "1944970"
  },
  {
    "text": "this last night I basically cleared my home brewing yarn caches and then ran these steps and rather than doing the",
    "start": "1944970",
    "end": "1951120"
  },
  {
    "text": "steps in there I ran a production build which does file minify CSS file the server via Babel and then pile minify",
    "start": "1951120",
    "end": "1956669"
  },
  {
    "text": "gzip via a web pack and it took a grand total three minutes to have a production ready version of the application running",
    "start": "1956669",
    "end": "1963090"
  },
  {
    "text": "on my machine and this is critically important you may you may think that's all that's a nice to have but I",
    "start": "1963090",
    "end": "1968549"
  },
  {
    "text": "shouldn't spend any time on it what this means is is my machine crashes and I need to borrow a loaner I have only lost 15 minutes the time it",
    "start": "1968549",
    "end": "1975419"
  },
  {
    "text": "takes for me to log into the loaner and get on it I on board a new team member there is no excuses I should see a PR",
    "start": "1975419",
    "end": "1981809"
  },
  {
    "text": "open at the end of day one I'm going to give you a bug that is an easy software to bug that allows you to go in and just",
    "start": "1981809",
    "end": "1988260"
  },
  {
    "text": "see it but it should be done by the end of the day there are no more environmental why these things can't run this also",
    "start": "1988260",
    "end": "1994669"
  },
  {
    "text": "means my CI builds run like that and so I'm able to kind of get these things up and I can iterate fast another thing",
    "start": "1994669",
    "end": "2001570"
  },
  {
    "text": "that we started using this is kind of a humbling moment for me because I used to make fun of all the time of the kind of",
    "start": "2001570",
    "end": "2007539"
  },
  {
    "text": "like old Flickr engineers that evolved into like you know the Etsy's and the",
    "start": "2007539",
    "end": "2012579"
  },
  {
    "text": "slacks of the world used to make fun of them for using feature flags and I was like just use get branches and get flow",
    "start": "2012579",
    "end": "2018999"
  },
  {
    "text": "and all these things I've come to realize that I was so so very wrong and they figured this out about 15 years ago",
    "start": "2018999",
    "end": "2024759"
  },
  {
    "text": "so we started using feature flags in our application and I really cannot upsell this concept enough so in our",
    "start": "2024759",
    "end": "2031149"
  },
  {
    "text": "application we have this component called feature we say this is the name of the feature if I have it render this",
    "start": "2031149",
    "end": "2037119"
  },
  {
    "text": "what's inside the children if I don't have it render what's in the fallback we",
    "start": "2037119",
    "end": "2042129"
  },
  {
    "text": "could probably come up with a more elegant API we maybe not we use a third-party service and I'm going to plug a third-party service that we are",
    "start": "2042129",
    "end": "2047769"
  },
  {
    "text": "paying money to but there's a service called launch Darkly that we use to handle our feature flagging for us and",
    "start": "2047769",
    "end": "2054730"
  },
  {
    "text": "it's really great it allows me to do this really cool thing where I can have basically two versions of my application",
    "start": "2054730",
    "end": "2060490"
  },
  {
    "text": "running inside the same codebase and whether or not you see it it's based off of whether or not you have the flag so",
    "start": "2060490",
    "end": "2065799"
  },
  {
    "text": "in this particular case we were working on upgrading our nav we this used to be our nav right here and we're like we",
    "start": "2065799",
    "end": "2071799"
  },
  {
    "text": "don't like that we're gonna move over to a different nav and we want to kind of slowly roll this out to first internally",
    "start": "2071799",
    "end": "2078220"
  },
  {
    "text": "only and then a couple select beta customers in yadda-yadda-yadda and because the launch our Glade is a feature for service and events and all",
    "start": "2078220",
    "end": "2084190"
  },
  {
    "text": "these kind of things I could do this really cool thing where you know I've got this old menu and then I we have a responsive nav feature and I go you know",
    "start": "2084190",
    "end": "2090878"
  },
  {
    "text": "what I want to have it I'm gonna default to true I go in and I click Save Changes and boom I have the new nav on my thing",
    "start": "2090879",
    "end": "2098529"
  },
  {
    "text": "because we all took the time to build a declarative you know functional application it's super easy just go oh I",
    "start": "2098529",
    "end": "2105460"
  },
  {
    "text": "got a new flag re-render and show the new stuff occasionally you have to do something slightly more complicated to go oh i need to fetch different data now",
    "start": "2105460",
    "end": "2111789"
  },
  {
    "text": "that i'm on this thing but this allows us to decouple deployments from rollouts and why is this important think of your",
    "start": "2111789",
    "end": "2118839"
  },
  {
    "text": "typical use case you've got two teams working in the same codebase right you've got one single master branch",
    "start": "2118839",
    "end": "2124000"
  },
  {
    "text": "you've got two teams working on it and so we got the situation where team one working on merging feature a and",
    "start": "2124000",
    "end": "2129270"
  },
  {
    "text": "then they run a deploy team two working on feature B margin and master and deploy and all of a sudden customer",
    "start": "2129270",
    "end": "2135450"
  },
  {
    "text": "calls in and something about feature a is horrendously broken go oh time",
    "start": "2135450",
    "end": "2140610"
  },
  {
    "text": "to hit the stop button clacks ons firing role back to the previously known good build congratulations we can all roll",
    "start": "2140610",
    "end": "2147030"
  },
  {
    "text": "back to the previously known good build however there's this entire time period where team two could potentially merge",
    "start": "2147030",
    "end": "2152970"
  },
  {
    "text": "feature C into the master branch but you can't deploy the master branch and you can maybe branch off of the old one and",
    "start": "2152970",
    "end": "2159990"
  },
  {
    "text": "then eventually merge it back into master once the hotfix is fixed everything but unless you have like two or three get gurus on your team this is",
    "start": "2159990",
    "end": "2166800"
  },
  {
    "text": "probably gonna turn into a nun mirja Boleyn ight mare within about 10 seconds and while we have some really great",
    "start": "2166800",
    "end": "2172560"
  },
  {
    "text": "developers not everybody is a get guru and that's not something that we can handle when we introduced the concept of",
    "start": "2172560",
    "end": "2178110"
  },
  {
    "text": "feature flags what we ended up with is a situation like this we merge feature area we deploy we rollout feature a all",
    "start": "2178110",
    "end": "2184110"
  },
  {
    "text": "of a sudden oh crap feature a is broken for everybody just roll it back just flip it back - nobody gets this flag the",
    "start": "2184110",
    "end": "2189600"
  },
  {
    "text": "application switches back because we took the time to make sure that these two versions of the feature the old and",
    "start": "2189600",
    "end": "2195270"
  },
  {
    "text": "the new could live same time at the same time we just roll it back without a deploy anything like that team to just",
    "start": "2195270",
    "end": "2201540"
  },
  {
    "text": "operates just like they were going completely uninhibited by anything",
    "start": "2201540",
    "end": "2207210"
  },
  {
    "text": "happening on team one which allows the velocity and the security of deployments on our team to just go straight through",
    "start": "2207210",
    "end": "2213930"
  },
  {
    "text": "the roof we can confidently deploy I think we do to production deploys a day and I consider that too few we can do",
    "start": "2213930",
    "end": "2222270"
  },
  {
    "text": "this all the time because of these feature flags that were able to turn on and off and react immediately to change",
    "start": "2222270",
    "end": "2227810"
  },
  {
    "text": "and then a final bit is there's not really a lot to talk about but like as",
    "start": "2227810",
    "end": "2233730"
  },
  {
    "text": "you're working on a team especially for those of you that a leads of your team you kind of have to think there's systems thinking how does my team work",
    "start": "2233730",
    "end": "2240420"
  },
  {
    "text": "together and one of the things that I found is oddly enough how can i optimize my directory structure around team",
    "start": "2240420",
    "end": "2246390"
  },
  {
    "text": "responsibilities we can all work in the same repo together but we work a lot better the less often that we write to",
    "start": "2246390",
    "end": "2253470"
  },
  {
    "text": "the same files as each other even though get is really great about merge conflicts you still want to avoid",
    "start": "2253470",
    "end": "2258720"
  },
  {
    "text": "with at all possible because sometimes somebody forgets to manually resolve it the right way",
    "start": "2258720",
    "end": "2264630"
  },
  {
    "text": "so even look at the layout of your files in your application and how can the structure of that enable my team to move",
    "start": "2264630",
    "end": "2271380"
  },
  {
    "text": "faster to deploy faster to get to a really good point where I'm able to actually scale up by releasing new fixes",
    "start": "2271380",
    "end": "2278279"
  },
  {
    "text": "and those kind of things so I have some final thoughts just to kind of wrap this",
    "start": "2278279",
    "end": "2284460"
  },
  {
    "text": "up a little bit I know that this was a little bit scattershot and this was just a lot of things I learned but I only had 40 minutes and I have the rest of the",
    "start": "2284460",
    "end": "2290670"
  },
  {
    "text": "conference to answer your questions strict rules rarely 100% apply to your application but the key thing is",
    "start": "2290670",
    "end": "2297269"
  },
  {
    "text": "remember the purpose behind the rules I just spent a whole bunch of time telling you how much local state was fine and how local state owned components as you",
    "start": "2297269",
    "end": "2304230"
  },
  {
    "text": "pull them up there's multiple single sources of truth but there's something to be valued from understanding the",
    "start": "2304230",
    "end": "2309420"
  },
  {
    "text": "whole like oh you're your component should be functional stateless whatever and the purpose behind that rule is is",
    "start": "2309420",
    "end": "2314730"
  },
  {
    "text": "so much easier to intuit and encounter logic bugs in a stateless component that is to be stateful so if you are going to",
    "start": "2314730",
    "end": "2321329"
  },
  {
    "text": "be stateful recognize that you are sacrificing that ease of debugging and keep that into account when you decide",
    "start": "2321329",
    "end": "2328230"
  },
  {
    "text": "to buck against what is considered common knowledge and at least keep it in mind you're all smart enough you know",
    "start": "2328230",
    "end": "2333839"
  },
  {
    "text": "how to figure this out just remember to keep that in mind it's not that the rules don't apply and the rules are wrong it's just that the purpose behind",
    "start": "2333839",
    "end": "2340170"
  },
  {
    "text": "the rules is still there code behavior should be predictable and intuitive all be realistic about the",
    "start": "2340170",
    "end": "2346529"
  },
  {
    "text": "problem you're actually solving solve the problem that you have this week do not solve the problem you think you're",
    "start": "2346529",
    "end": "2351569"
  },
  {
    "text": "going to have six months from now because products going to come to you next month and completely change the entire roadmap and what was the point",
    "start": "2351569",
    "end": "2358680"
  },
  {
    "text": "and then the predictable and intuitive it's key for your team it should be really easy to go oh I just need to go",
    "start": "2358680",
    "end": "2363839"
  },
  {
    "text": "to this area of this thing inactive as long as I can apply the same search logic to go from different parts of my",
    "start": "2363839",
    "end": "2369809"
  },
  {
    "text": "application there's less you have to explain less stuck in your head and the faster your team can kind of move and",
    "start": "2369809",
    "end": "2376440"
  },
  {
    "text": "scale your application with you and the more intuitive will your application will be and then you will not get it",
    "start": "2376440",
    "end": "2382440"
  },
  {
    "text": "perfect the first time optimize your processes for refactoring the key thing is is the reason why I say don't worry",
    "start": "2382440",
    "end": "2389490"
  },
  {
    "text": "about the whole don't use local state just get it ship it out just make sure that you can go through and remove that",
    "start": "2389490",
    "end": "2395740"
  },
  {
    "text": "code and fix it to be the perfect thing later on optimize everything you do for",
    "start": "2395740",
    "end": "2401530"
  },
  {
    "text": "your ability to undo it and refactor it later as opposed to the perfect way that somebody said on a blog post on that",
    "start": "2401530",
    "end": "2408280"
  },
  {
    "text": "orange website you should do it so with that being said I am 15 seconds over do",
    "start": "2408280",
    "end": "2414910"
  },
  {
    "text": "we have any questions",
    "start": "2414910",
    "end": "2417299"
  },
  {
    "text": "okay so the question has asked is how do I manage features that have been switched off it's been fully deployed so",
    "start": "2425020",
    "end": "2431140"
  },
  {
    "text": "what we do is we have an internal process where we set up developers are the ones allowed to create a new feature product owns the lifecycle of the",
    "start": "2431140",
    "end": "2437470"
  },
  {
    "text": "feature meaning as soon as the developer creates the feature and has the code behind it product owns who it gets rolled out to when product has decided",
    "start": "2437470",
    "end": "2443710"
  },
  {
    "text": "that it does not 100% rolled out we set up a chore ticket we use clubhouse when",
    "start": "2443710",
    "end": "2449380"
  },
  {
    "text": "you set up a chore ticket and we say at some point in the next sprint or two when we have time go in and delete all",
    "start": "2449380",
    "end": "2454890"
  },
  {
    "text": "code related to that feature branch light or that feature flag so any like those feature components look them up",
    "start": "2454890",
    "end": "2461650"
  },
  {
    "text": "and then remove all the old code and remove the feature component so that the only code that exists is the one that",
    "start": "2461650",
    "end": "2466810"
  },
  {
    "text": "has been 100% rolled out once you've deleted all the code from the codebase to clean it up to where only the new stuff is in there and the old stuff has",
    "start": "2466810",
    "end": "2473140"
  },
  {
    "text": "been deleted we deploy that and then launch Darkly their competitor they have a competitor split that io does the same",
    "start": "2473140",
    "end": "2479650"
  },
  {
    "text": "thing they'll tell you how long it has been since a client has last requested a feature as soon as we've hit seven days",
    "start": "2479650",
    "end": "2486130"
  },
  {
    "text": "of nobody requesting the feature we can be reasonably confident that even the people who leave their browsers open",
    "start": "2486130",
    "end": "2491380"
  },
  {
    "text": "forever have been upgraded to the new version of the application at that point when it has been seven days since last",
    "start": "2491380",
    "end": "2496869"
  },
  {
    "text": "requested we go in and delete the flag from launch Darkly so we delete the old code first wait for to confirm that",
    "start": "2496869",
    "end": "2503320"
  },
  {
    "text": "everybody has it then we delete the flag from launch Darkly so typically it's the",
    "start": "2503320",
    "end": "2508750"
  },
  {
    "text": "cycle of new feature flag the deployment is about a week or two like by the end of the Sprint everything's out rollout",
    "start": "2508750",
    "end": "2515050"
  },
  {
    "text": "typically takes about another week or so but the actual teardown process usually happens about a sprint or two later",
    "start": "2515050",
    "end": "2520720"
  },
  {
    "text": "assuming we use two-week sprints so when I say sprint two weeks so any other",
    "start": "2520720",
    "end": "2527200"
  },
  {
    "text": "questions",
    "start": "2527200",
    "end": "2529500"
  },
  {
    "text": "all right well we'll let everybody go early for lunch so thanks everyone [Applause]",
    "start": "2534660",
    "end": "2543590"
  }
]