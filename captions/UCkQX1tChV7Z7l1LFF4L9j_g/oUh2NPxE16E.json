[
  {
    "text": "[Music]",
    "start": "3350",
    "end": "14249"
  },
  {
    "text": "hello everybody my name is Thomas doen I'm also known under the pseudonym har flake and welcome to my talk adventures",
    "start": "15519",
    "end": "22480"
  },
  {
    "text": "and performance where I'll talk about all the interesting things I've learned in recent years after switching my career from uh spy versus spy security",
    "start": "22480",
    "end": "29640"
  },
  {
    "text": "work to Performance work so why would anybody care about",
    "start": "29640",
    "end": "34760"
  },
  {
    "text": "performance well first off there's three economic Trends or three macro trends that are really conspiring to make",
    "start": "34760",
    "end": "40960"
  },
  {
    "text": "performance and efficiency important again the first one is the death of the economic version of Mo's law which means",
    "start": "40960",
    "end": "46920"
  },
  {
    "text": "that new hardware does not necessarily come with a commens speed up anymore as it used to in in the past the second one",
    "start": "46920",
    "end": "53840"
  },
  {
    "text": "is the move from on premise software to SAS where the cost of computing is now born by the the vendor of services in",
    "start": "53840",
    "end": "60120"
  },
  {
    "text": "the bendo of digital Goods which means computational efficiency which used to be born by the customer is nowadays uh",
    "start": "60120",
    "end": "66799"
  },
  {
    "text": "well paid for by the provider which means inefficiency Cuts straight into gross margins and through that into",
    "start": "66799",
    "end": "71960"
  },
  {
    "text": "company valuations and lastly the move from on premise Hardware to Cloud where",
    "start": "71960",
    "end": "78320"
  },
  {
    "text": "uh as you go into a payo scheme if you find a clever way of optimizing your Computing stack you realize savings",
    "start": "78320",
    "end": "84240"
  },
  {
    "text": "literally the next day all of the these things are coming together to push performance from something that was a",
    "start": "84240",
    "end": "89960"
  },
  {
    "text": "bit of a nerdy Niche uh theme or nerdy Niche subject back into the the",
    "start": "89960",
    "end": "95439"
  },
  {
    "text": "Limelight and efficiency is becoming really important again and with the cost",
    "start": "95439",
    "end": "100920"
  },
  {
    "text": "of of AI and so forth this is only going to um continue in the next",
    "start": "100920",
    "end": "106560"
  },
  {
    "text": "years um here's a diagram of single core speed up I don't think I I have to spend too much time on this here's a diagram",
    "start": "106560",
    "end": "113399"
  },
  {
    "text": "that shows the relative cost per unit per transistor over the different process nodes in ship manufacturing and",
    "start": "113399",
    "end": "119280"
  },
  {
    "text": "we can see that the cost per unit is just not falling at the same rate that it used to fall anymore and lastly I mentioned uh gross",
    "start": "119280",
    "end": "127799"
  },
  {
    "text": "margins and Company valuation you can see in this slide that uh there's a reasonably linear relationship between",
    "start": "127799",
    "end": "133599"
  },
  {
    "text": "gross margins and S company valuations for SAS businesses which means improving your gross margins will add multiple of",
    "start": "133599",
    "end": "139959"
  },
  {
    "text": "your Revenue to your overall company valuation so aside from the business",
    "start": "139959",
    "end": "145599"
  },
  {
    "text": "reasons what are personal reasons why anybody would care about performance well so for me throughout my entire",
    "start": "145599",
    "end": "152680"
  },
  {
    "text": "career there's always been the issue that was difficult for me to align what I found technically interesting what I",
    "start": "152680",
    "end": "158879"
  },
  {
    "text": "found economically viable and uh some align that with what I found",
    "start": "158879",
    "end": "164000"
  },
  {
    "text": "ideologically aligned with my values um and one of the things that I I really",
    "start": "164000",
    "end": "169400"
  },
  {
    "text": "like about performance work is it tends to be technically interesting because it's full full stack computer science it",
    "start": "169400",
    "end": "175360"
  },
  {
    "text": "tends to be economically viable because if I make things more efficient I save people money",
    "start": "175360",
    "end": "180480"
  },
  {
    "text": "um and they're usually willing to pay for that and lastly it's ideologically aligned because I'm working on abundance",
    "start": "180480",
    "end": "186840"
  },
  {
    "text": "meaning I'm trying to generate the same amount of output for society with fewer",
    "start": "186840",
    "end": "191920"
  },
  {
    "text": "inputs which is something that aligns with my my personal value set I I prefer not to work on scarcity and I prefer not",
    "start": "191920",
    "end": "197879"
  },
  {
    "text": "to work on human versus human zero some games so my personal path uh goes from",
    "start": "197879",
    "end": "205239"
  },
  {
    "text": "essentially spy versus spy security to Performance engineering and the interesting thing here is",
    "start": "205239",
    "end": "210280"
  },
  {
    "text": "um both are full stack computer signs meaning in both cases you get to look at the high level design of systems you get",
    "start": "210280",
    "end": "216040"
  },
  {
    "text": "to look at uh the lowlevel implementation details and all of that is relevant for overall uh well for the",
    "start": "216040",
    "end": "222760"
  },
  {
    "text": "overall goal meaning security or insecurity on the one hand and performance on the other hand um in both",
    "start": "222760",
    "end": "229000"
  },
  {
    "text": "situations you end up analyzing very large scale Legacy code bases um now in",
    "start": "229000",
    "end": "234840"
  },
  {
    "text": "the security realm if you find the security problem you've got to pick your pth",
    "start": "234840",
    "end": "240280"
  },
  {
    "text": "you've got the choice of selling the security problem that you found to the highest bidder which then risks getting",
    "start": "240280",
    "end": "246000"
  },
  {
    "text": "somebody uh I don't know killed and dismembered in some some Embassy somewhere or uh you need to be pre the",
    "start": "246000",
    "end": "253120"
  },
  {
    "text": "prepar to be the bearer of bad news to an organization and tell them hey um can you please fix this and usually nobody",
    "start": "253120",
    "end": "259560"
  },
  {
    "text": "is happy about this because security is a cost center and kind of interferes with the the rest of the business now",
    "start": "259560",
    "end": "265880"
  },
  {
    "text": "the advantage of doing performance work is it's got all the technical uh interestingness of of security work but",
    "start": "265880",
    "end": "272120"
  },
  {
    "text": "if you find a problem you can fix it and the resulting code will run faster cheaper and eat less energy so it's it's",
    "start": "272120",
    "end": "278680"
  },
  {
    "text": "much less of a headache at that point than security work so um here's a map with a very",
    "start": "278680",
    "end": "285199"
  },
  {
    "text": "convoluted path and this slide is here to tell you that this the rest of this",
    "start": "285199",
    "end": "290560"
  },
  {
    "text": "talk is going to be a little bit all over the place meaning um I've gathered",
    "start": "290560",
    "end": "296880"
  },
  {
    "text": "a whole bunch of things that I've learned over the years but I I haven't necessarily been able to extract a very clear narrative yet so I'll I'll share",
    "start": "296880",
    "end": "305000"
  },
  {
    "text": "what I've learned um but I'll ask for forgiveness that the the overall direction of this talk is a much less",
    "start": "305000",
    "end": "311600"
  },
  {
    "text": "clear narrative than I would like it to be okay so let's uh talk about the",
    "start": "311600",
    "end": "318120"
  },
  {
    "text": "things I've learned and there's four broad categories in which I learned lessons over the last years one is the",
    "start": "318120",
    "end": "323919"
  },
  {
    "text": "historical importance uh or the the importance of history when you you do performance work",
    "start": "323919",
    "end": "331000"
  },
  {
    "text": "um then there's a category of things I learned about organization structure and",
    "start": "331000",
    "end": "337000"
  },
  {
    "text": "uh organizational incentives and so forth uh and performance work there's a bunch of technical things I learned of",
    "start": "337000",
    "end": "342280"
  },
  {
    "text": "course and there's a few mathematical things that I learned and under appreciated when I when I started out doing performance work and we'll walk",
    "start": "342280",
    "end": "349039"
  },
  {
    "text": "through all of them and we'll start with the first lesson which is the programming language you're most likely",
    "start": "349039",
    "end": "354759"
  },
  {
    "text": "using is designed for computers that are largely extinct uh the computers you're using these days were not the computers",
    "start": "354759",
    "end": "361280"
  },
  {
    "text": "that this language was designed for and to some extent it is not like it is MISD designed for today's",
    "start": "361280",
    "end": "366800"
  },
  {
    "text": "computers um and I'll I'll harp uh about I'll carp a little bit about Java as a",
    "start": "366800",
    "end": "372520"
  },
  {
    "text": "programming language um and the interesting thing is if you look at the timeline of the development of java uh",
    "start": "372520",
    "end": "379360"
  },
  {
    "text": "the Java project was initiated in 1991 at sun and it was released in",
    "start": "379360",
    "end": "384400"
  },
  {
    "text": "1995 which means uh it started prior to the first mentioning of a term called",
    "start": "384400",
    "end": "390800"
  },
  {
    "text": "the memory wall the memory wall is the discrepancy between increases in CPU",
    "start": "390800",
    "end": "395960"
  },
  {
    "text": "speed over the years or in logic speed and the speed with which we can access memory from dram and at the time uh 1994",
    "start": "395960",
    "end": "405080"
  },
  {
    "text": "was the first time when people observed that the growth rates for those two uh like for memory and for uh Logic the",
    "start": "405080",
    "end": "412280"
  },
  {
    "text": "speed up growth rates were not the same and that this would lead to a Divergence and that this would lead to problems down the line but by the time Java was",
    "start": "412280",
    "end": "419039"
  },
  {
    "text": "released this was not really an issue yet and now it's uh well a couple decades later and the memory wall rules",
    "start": "419039",
    "end": "426639"
  },
  {
    "text": "everything when it comes to Performance work um if you you have to hit dram",
    "start": "426639",
    "end": "432039"
  },
  {
    "text": "you're looking at 100 to 200 Cycles you can do a lot of computation in 100 to",
    "start": "432039",
    "end": "437240"
  },
  {
    "text": "200 Cycles on a modern uh super scaler CPU um so hitting memory is no longer a",
    "start": "437240",
    "end": "443639"
  },
  {
    "text": "cheap thing and this interestingly led to a few design decisions that were enti",
    "start": "443639",
    "end": "449639"
  },
  {
    "text": "reasonable when Java was first designed that turned out to be um not optimal in",
    "start": "449639",
    "end": "455280"
  },
  {
    "text": "in the long run and the biggest one of these is um the fact that it's really difficult in Java to do an array of",
    "start": "455280",
    "end": "461280"
  },
  {
    "text": "struct um meaning in C it's very easy to do an array of structs that have equal",
    "start": "461280",
    "end": "466400"
  },
  {
    "text": "stride and that are all contigous in memory uh next to each other um Java has",
    "start": "466400",
    "end": "473560"
  },
  {
    "text": "no well at least out of the box Java has no similar construct and it's actually",
    "start": "473560",
    "end": "479400"
  },
  {
    "text": "not impossible but reasonably difficult to get a a similar memory layout and if you look at the the object array um",
    "start": "479400",
    "end": "486240"
  },
  {
    "text": "instead of having all the the data structures uh consecutively in memory you have an array of pointers a pointers",
    "start": "486240",
    "end": "492800"
  },
  {
    "text": "to the actual object which means traversing that array implies one extra memory D reference per element which",
    "start": "492800",
    "end": "499120"
  },
  {
    "text": "then uh is bound to cost you about 200 Cycles or between 100 and 200 Cycles",
    "start": "499120",
    "end": "504319"
  },
  {
    "text": "extra depending on what's in Cache and what is isn't um so there's a a number of",
    "start": "504319",
    "end": "509879"
  },
  {
    "text": "assumptions that were were baked into the language when was designed traversing a large link graph structure",
    "start": "509879",
    "end": "515880"
  },
  {
    "text": "on the Heap is a very reasonable thing to do garbage collection is nothing but traversing a large graph clearly the",
    "start": "515880",
    "end": "522440"
  },
  {
    "text": "calculus for this change is once you hit something like a memory wall or once you have to face something like a memory",
    "start": "522440",
    "end": "527560"
  },
  {
    "text": "wall um and the other assumption was that the referencing appointed does not come with a significant performance hit",
    "start": "527560",
    "end": "532800"
  },
  {
    "text": "meaning more than perhaps one or two cycles and these were all entirely correct assumptions in 1991",
    "start": "532800",
    "end": "539760"
  },
  {
    "text": "and they're entirely wrong today um and uh well that's something that you end up",
    "start": "539760",
    "end": "546120"
  },
  {
    "text": "paying for in many surprising parts of the infrastructure why do I mention this well the important thing the or the",
    "start": "546120",
    "end": "552839"
  },
  {
    "text": "reason I mentioned this is because it means that software is usually not",
    "start": "552839",
    "end": "558959"
  },
  {
    "text": "designed for the hardware on which it runs meaning not only is your application not designed for the",
    "start": "558959",
    "end": "564160"
  },
  {
    "text": "hardware on which you're running your programming language wasn't designed for the hardware on which you're running and",
    "start": "564160",
    "end": "569240"
  },
  {
    "text": "software tends to outlive Hardware by many generations which brings me to the next",
    "start": "569240",
    "end": "574880"
  },
  {
    "text": "topic your database and your application uh are certainly not designed for the computers that exist nowadays and are",
    "start": "574880",
    "end": "581440"
  },
  {
    "text": "likely designed for computers that are also extinct um and I'll I'll talk a little",
    "start": "581440",
    "end": "586560"
  },
  {
    "text": "bit about spinning discs and mvme drives because they're very very different animals and people don't appreciate just",
    "start": "586560",
    "end": "593200"
  },
  {
    "text": "how different they are if you look at a spinning dis you've got 150 to 180 iops which means you can read perhaps 90",
    "start": "593200",
    "end": "600360"
  },
  {
    "text": "different places on the disc per second perhaps 100 seeks are very very expensive uh you physically have to move",
    "start": "600360",
    "end": "607600"
  },
  {
    "text": "a hard disk arm over a spinning platter of metal um data layout on the disk",
    "start": "607600",
    "end": "614720"
  },
  {
    "text": "where precisely it is physically located matters because seek times depend on the physical distance that the the driver",
    "start": "614720",
    "end": "621279"
  },
  {
    "text": "has to travel um latency for for seeking and reading is in the multi multiple",
    "start": "621279",
    "end": "627040"
  },
  {
    "text": "millisecond range which means you can very few seeks and reads if you need to react to to a user clicking on something",
    "start": "627040",
    "end": "634320"
  },
  {
    "text": "um but most importantly there's very very little internal parallelism meaning only a few seeks in the ioq uh are",
    "start": "634320",
    "end": "642160"
  },
  {
    "text": "actually useful meaning the drive can usually only read one piece of data at a time so uh the other last thing to keep",
    "start": "642160",
    "end": "649959"
  },
  {
    "text": "in mind is multiple threads contending the same hardisk uh will ruin performance because if multiple threats",
    "start": "649959",
    "end": "656480"
  },
  {
    "text": "are trying to read two different data streams the endry will be that the hard disk has to seek back and forth between",
    "start": "656480",
    "end": "661720"
  },
  {
    "text": "those two areas on the dis and that's just going to to be terrible for throughput now if you look at at a",
    "start": "661720",
    "end": "667440"
  },
  {
    "text": "modern SSD drive or mod nvme Drive um they've got 170,000 iops which is more",
    "start": "667440",
    "end": "673959"
  },
  {
    "text": "than a thousand times more uh it's still 11 times more than than Amazon's elastic block Service uh or block storage um but",
    "start": "673959",
    "end": "682440"
  },
  {
    "text": "it's it's just uh an entirely different category it's three orders of magnitude",
    "start": "682440",
    "end": "687839"
  },
  {
    "text": "more than than a spinning dis seeking is really really cheap and uh nvmes have",
    "start": "687839",
    "end": "693959"
  },
  {
    "text": "internal row buffers which means that you may actually get multiple random accesses for free um they have near",
    "start": "693959",
    "end": "701000"
  },
  {
    "text": "instant rights because the RS don't actually hit dis immediately but they're buffered by internal Dam the latency for",
    "start": "701000",
    "end": "707600"
  },
  {
    "text": "a seek and read is under 0.3 milliseconds but they also require a",
    "start": "707600",
    "end": "714320"
  },
  {
    "text": "significant amount of parallelism to actually make use of all these iops because you've got a certain latency for",
    "start": "714320",
    "end": "719399"
  },
  {
    "text": "reading things you have to have many many things in Flight many requests in flight to actually hit Peak Performance",
    "start": "719399",
    "end": "725360"
  },
  {
    "text": "often on the order of 32 or 64 or even higher uh IO requests at the same time",
    "start": "725360",
    "end": "731880"
  },
  {
    "text": "to really hit Peak Performance on on an mdme um and that leads me to the way",
    "start": "731880",
    "end": "737920"
  },
  {
    "text": "that many storage systems are MISD designed for uh an era which is no",
    "start": "737920",
    "end": "743079"
  },
  {
    "text": "longer a reality um what I see repeated or what I've seen repeatedly is storage",
    "start": "743079",
    "end": "748399"
  },
  {
    "text": "systems that uh feature a fixed size thread pool let's say the number of cores and so forth uh approximately uh",
    "start": "748399",
    "end": "756880"
  },
  {
    "text": "to to minimize contention of threads to cores but also to minimize contention on the actual underlying hard disk and uh",
    "start": "756880",
    "end": "764160"
  },
  {
    "text": "what I've also seen then is you combine the fix siiz thread pool with map so you map files from disk into memory and uh",
    "start": "764160",
    "end": "772000"
  },
  {
    "text": "rely on the operating system of the page cache to to make sure data gets shuffled between uh disk and and memory and you",
    "start": "772000",
    "end": "778839"
  },
  {
    "text": "rely on reasonably large reader heads because uh well you want to get a lot of data into RAM quickly because seeking on",
    "start": "778839",
    "end": "784959"
  },
  {
    "text": "dis is so terribly slow on a on a spinning disc it does make like these things make some sense provided you're",
    "start": "784959",
    "end": "791120"
  },
  {
    "text": "on a spinning dis but uh the reality is that on a modern system you'll find the",
    "start": "791120",
    "end": "797399"
  },
  {
    "text": "strange situation that you hit the system and uh well the system doesn't",
    "start": "797399",
    "end": "803040"
  },
  {
    "text": "Max the CPU it doesn't Max the hard disk it just sits there because you end up exhausting your thread pools um while",
    "start": "803040",
    "end": "810199"
  },
  {
    "text": "all the threads are are sitting there waiting for page FS to be serviced so",
    "start": "810199",
    "end": "815639"
  },
  {
    "text": "the the issue really is that page vault is inherently blocking and then it takes 0.3 milliseconds to to handle it end to",
    "start": "815639",
    "end": "821279"
  },
  {
    "text": "end which means the thread resumes after 0.3 milliseconds which means that a",
    "start": "821279",
    "end": "826320"
  },
  {
    "text": "single thread can only generate about 3,000 iops but you need 170,000 to to",
    "start": "826320",
    "end": "832079"
  },
  {
    "text": "actually hit the the max capacity of the disc which means to saturate all the iops the drive can give you you would",
    "start": "832079",
    "end": "837519"
  },
  {
    "text": "need 56 threads hitting page falls constantly all the time um so the the",
    "start": "837519",
    "end": "844240"
  },
  {
    "text": "upshot of this is that um if you do any blocking IO given the internal",
    "start": "844240",
    "end": "850000"
  },
  {
    "text": "parallelism of modern nvme drives your thread pools are almost certainly going to be sized too small and uh the end",
    "start": "850000",
    "end": "856320"
  },
  {
    "text": "result will be a system that is slow without ever maxing out CPU or the dis",
    "start": "856320",
    "end": "861519"
  },
  {
    "text": "so it'll just spend most of its time idling um modern s ssds are real",
    "start": "861519",
    "end": "867320"
  },
  {
    "text": "performance past and you need to think carefully about best way to feed them um what about Cloud SSS well Cloud",
    "start": "867320",
    "end": "874079"
  },
  {
    "text": "SSS are an interesting animal because if you look at it Cloud attached storage is a different beast from both spinning",
    "start": "874079",
    "end": "881279"
  },
  {
    "text": "discs and physically attached hard diss um because uh spinning disc are high latency low concurrency uh local mdme",
    "start": "881279",
    "end": "888839"
  },
  {
    "text": "Drive is low latency High concurrency Network attach attached storage is reasonably High latency because you've",
    "start": "888839",
    "end": "894360"
  },
  {
    "text": "got the the round trip to the other machine but it can have essentially",
    "start": "894360",
    "end": "899680"
  },
  {
    "text": "almost arbitrary concurrency and it's interesting that very few database systems are optimized to operate in the",
    "start": "899680",
    "end": "905600"
  },
  {
    "text": "high latency near limit Limitless concurrency Paradigm um and what's",
    "start": "905600",
    "end": "910680"
  },
  {
    "text": "interesting about us as a software industry is we seem to expect uh that the same codebase and the same",
    "start": "910680",
    "end": "916040"
  },
  {
    "text": "architecture and the same data structures that are useful uh in one scenario should be useful in all three",
    "start": "916040",
    "end": "921360"
  },
  {
    "text": "but we're really asking the same software to operate on three vastly different storage infrastructures and uh",
    "start": "921360",
    "end": "927639"
  },
  {
    "text": "well that's perhaps not a reasonable thing to do all right uh another important",
    "start": "927639",
    "end": "933040"
  },
  {
    "text": "technical lesson I've learned um libraries dominate apps when it comes to CPU Cycles what I mean with this is the",
    "start": "933040",
    "end": "940880"
  },
  {
    "text": "common libraries in any uh large organization are going to dominate the heaviest application in terms of the",
    "start": "940880",
    "end": "947319"
  },
  {
    "text": "amount of time spent there uh let's imagine you're Google or Facebook or Spotify or anybody else that runs a",
    "start": "947319",
    "end": "953639"
  },
  {
    "text": "large Fleet and runs many services um even the biggest service is going to be",
    "start": "953639",
    "end": "959519"
  },
  {
    "text": "nowhere close to the the cost of the biggest service is going to be nowhere close to the aggregate cost of the",
    "start": "959519",
    "end": "965920"
  },
  {
    "text": "garbage collector or your allocator or your most popular compression library because these libraries end up in every",
    "start": "965920",
    "end": "972120"
  },
  {
    "text": "single service whereas the service itself is going to be fragmented all over the place meaning you'll have",
    "start": "972120",
    "end": "977199"
  },
  {
    "text": "dozens or hundreds or thousands of services so in almost every large sized",
    "start": "977199",
    "end": "982560"
  },
  {
    "text": "organization I've SE once you start measuring what is actually driving cost in terms of compute it is almost always",
    "start": "982560",
    "end": "990399"
  },
  {
    "text": "a common library that eclipses the most heavyweight application at Google while",
    "start": "990399",
    "end": "996000"
  },
  {
    "text": "it was still there um there was a a significant number of cyes I think three",
    "start": "996000",
    "end": "1001199"
  },
  {
    "text": "or 4% of the overall Fleet uh was spent on a single Loop in ffmc and that single",
    "start": "1001199",
    "end": "1007839"
  },
  {
    "text": "Loop was later on moved into hard hardware and into a specialized accelerator but the the point is that um",
    "start": "1007839",
    "end": "1015399"
  },
  {
    "text": "if you start profiling let's say a cross Fleet uh of go Services it's very clear",
    "start": "1015399",
    "end": "1021639"
  },
  {
    "text": "that your go garbage collector is going to be bigger than all of like than than any individual application and that's",
    "start": "1021639",
    "end": "1028798"
  },
  {
    "text": "quite interesting because it means that um uh there's room for something that I've long wanted to have uh and my",
    "start": "1028799",
    "end": "1036319"
  },
  {
    "text": "previous startup would have liked to do that if we had continued existing in the the way that we uh wanted to or that we",
    "start": "1036319",
    "end": "1042038"
  },
  {
    "text": "we assumed we would the dream was to be a global profiling software as a service which means that we would have data",
    "start": "1042039",
    "end": "1049360"
  },
  {
    "text": "about precisely which open source software is eating how many cycles globally and then you could uh do",
    "start": "1049360",
    "end": "1055559"
  },
  {
    "text": "performance back bound is on GitHub going around and saying hey um this is an FF impa Loop we estimate that the",
    "start": "1055559",
    "end": "1062000"
  },
  {
    "text": "global uh Cloud cost of this Loop or the global electricity cost of this Loop is $20 million if you manage to optimize it",
    "start": "1062000",
    "end": "1069240"
  },
  {
    "text": "by a fraction of a percent here you'll earn $50,000 let's say and uh the",
    "start": "1069240",
    "end": "1075360"
  },
  {
    "text": "interesting thing there is you could generate uh something where individual developers are happy because they get",
    "start": "1075360",
    "end": "1080679"
  },
  {
    "text": "paid to optimize code and the overall world is happy because things get cheaper and faster unfortunately we're",
    "start": "1080679",
    "end": "1086720"
  },
  {
    "text": "not there but uh perhaps somebody else will pick this up and and run with it um another important technical thing",
    "start": "1086720",
    "end": "1094159"
  },
  {
    "text": "I learned that I underestimated previously is garbage collection is a pretty high tax in many environments",
    "start": "1094159",
    "end": "1100640"
  },
  {
    "text": "people spend more money on the garbage collector than they initially think um I think the the reason for this",
    "start": "1100640",
    "end": "1108679"
  },
  {
    "text": "is well first of all common libraries dominate individual apps over time garbage collection is part of every",
    "start": "1108679",
    "end": "1114000"
  },
  {
    "text": "single app given a particular runtime um and garbage collection is reasonably",
    "start": "1114000",
    "end": "1119679"
  },
  {
    "text": "expensive because traversing graphs on the Heap is bad for data locality um which then makes makes it uh well",
    "start": "1119679",
    "end": "1127080"
  },
  {
    "text": "heavier than many people think um it is very very common in any infrastructure",
    "start": "1127080",
    "end": "1132120"
  },
  {
    "text": "to see 20 10 to 20% of all CPU Cycles in garbage collection with some exceptional situations where you see 30% % spent on",
    "start": "1132120",
    "end": "1139320"
  },
  {
    "text": "on garbage collection at that point you should start optimizing uh some of the code but um I was surprised I like",
    "start": "1139320",
    "end": "1147640"
  },
  {
    "text": "before I started this I wouldn't have bet that garbage collection is such a large fraction of the overall compute",
    "start": "1147640",
    "end": "1153080"
  },
  {
    "text": "spent globally um one thing I also found extremely extremely surprising is that",
    "start": "1153080",
    "end": "1158720"
  },
  {
    "text": "in one of the uh the chats I had with other performance Engineers uh somebody told me yeah you",
    "start": "1158720",
    "end": "1164679"
  },
  {
    "text": "know whenever we need to reduce CPU usage fleetwide what we do is memory profiling and as a as a C++ person I I",
    "start": "1164679",
    "end": "1172799"
  },
  {
    "text": "heard that I was like that is extremely counterintuitive why why would you do memory profiling in order to reduce CPU",
    "start": "1172799",
    "end": "1179640"
  },
  {
    "text": "usage well uh the result was or the answer to this is in any large scale",
    "start": "1179640",
    "end": "1185799"
  },
  {
    "text": "environment where all your languages are garbage collected the garbage collector is going to be your heav library so if",
    "start": "1185799",
    "end": "1191559"
  },
  {
    "text": "you reduce memory pressure you are automatically going to reduce uh pressure on CPU across the entire fleet",
    "start": "1191559",
    "end": "1198000"
  },
  {
    "text": "so so they they would focus on memory profiling their core libraries to put less stress on the garbage collector and",
    "start": "1198000",
    "end": "1203200"
  },
  {
    "text": "that would overall lower their their CPU uh usage and billing um that was a",
    "start": "1203200",
    "end": "1209440"
  },
  {
    "text": "surprising thing that I had not anticipated so um it turns out that",
    "start": "1209440",
    "end": "1215240"
  },
  {
    "text": "pretty much everybody becomes uh expert at tuning garbage collectors if uh if they're tunable um it's also interesting",
    "start": "1215240",
    "end": "1222760"
  },
  {
    "text": "that a lot of high performance Java folks become experts at avoiding allocations all together so so there's",
    "start": "1222760",
    "end": "1228880"
  },
  {
    "text": "uh I just saw a paper from the Cassandra folks uh where they praise the new data structure partially because it could be",
    "start": "1228880",
    "end": "1235080"
  },
  {
    "text": "implemented without uh doing uh or by doing only a few very large allocations",
    "start": "1235080",
    "end": "1241679"
  },
  {
    "text": "that can get reused between runs um it's also interesting you see go Engineers uh",
    "start": "1241679",
    "end": "1247120"
  },
  {
    "text": "become surprisingly Adept at reading the output of the compiler Escape analysis to determine whether uh certain values",
    "start": "1247120",
    "end": "1254039"
  },
  {
    "text": "are allocated on the stack or on the Heap um what's interesting there is I um I think the big pitch for garbage",
    "start": "1254039",
    "end": "1260600"
  },
  {
    "text": "collection was don't worry about memory management uh the garbage collector will do it for you um and it's it's",
    "start": "1260600",
    "end": "1266440"
  },
  {
    "text": "interesting to see that in the end if you care performance you do need to worry about memory management um you may still use a garbage collector or you may",
    "start": "1266440",
    "end": "1272760"
  },
  {
    "text": "try to use a language that provides safety without a garbage collector but either way um you will not Escape having",
    "start": "1272760",
    "end": "1279080"
  },
  {
    "text": "to reason about memory uh management um organizational Les lessons",
    "start": "1279080",
    "end": "1285200"
  },
  {
    "text": "one of the big lessons that I took away is that your orc chart and the way you organize your your it matters quite a",
    "start": "1285200",
    "end": "1291679"
  },
  {
    "text": "bit for being able to translate uh code changes into savings and the reason I",
    "start": "1291679",
    "end": "1296840"
  },
  {
    "text": "say this is that um pretty much all larger organizations have e either a vertical or horizontal emphasis and they",
    "start": "1296840",
    "end": "1303039"
  },
  {
    "text": "all have both a vertical and and horizontal structure um Google for example is a very very vertical",
    "start": "1303039",
    "end": "1308960"
  },
  {
    "text": "organization meaning you've got the infrastructure team you've got a big Mano monor repo you've got very very prescriptive ways of doing things and",
    "start": "1308960",
    "end": "1316039"
  },
  {
    "text": "you've got a very prescriptive teex snack uh essentially where where Google tells the engineers if you need key value use big table if you need like for",
    "start": "1316039",
    "end": "1324039"
  },
  {
    "text": "for every if else there's a clearly prescribed solution for how to do it all of that lives in a big monor repo and",
    "start": "1324039",
    "end": "1330720"
  },
  {
    "text": "these are Big services that are shared across the entire company which are the the vertical stripes in this diagram and",
    "start": "1330720",
    "end": "1336400"
  },
  {
    "text": "then every project which is a horizontal stripe uh picks and chooses from these",
    "start": "1336400",
    "end": "1341480"
  },
  {
    "text": "different vertical stripes and um and assemble something from it um then",
    "start": "1341480",
    "end": "1347279"
  },
  {
    "text": "there's other organiz which which are much more horizontally oriented where uh you have separate uh teams two Pizza",
    "start": "1347279",
    "end": "1354400"
  },
  {
    "text": "teams or whatever that uh uh may have a lot of freedom in what they choose they may choose on their own database they",
    "start": "1354400",
    "end": "1361279"
  },
  {
    "text": "may choose uh their own build environment they may choose their own repository and so forth and while this",
    "start": "1361279",
    "end": "1368000"
  },
  {
    "text": "is excellent for uh rapid iteration on a product and keeping the teams unencumbered from uh what some people",
    "start": "1368000",
    "end": "1375679"
  },
  {
    "text": "perceive red tape it's also not necessarily ideal for realizing savings across the board what I've observed is",
    "start": "1375679",
    "end": "1382000"
  },
  {
    "text": "that vertical organizations are much better at identifying performance Hogs which are usually a common library then",
    "start": "1382000",
    "end": "1389360"
  },
  {
    "text": "fixing that library and then reaping the benefits across the entire fleet um if you do not have a an easy way or a",
    "start": "1389360",
    "end": "1396480"
  },
  {
    "text": "centralized repository at least of your your common artifacts it's much much",
    "start": "1396480",
    "end": "1401559"
  },
  {
    "text": "harder to do that because if you identify for example that you really should be swapping an allocator against",
    "start": "1401559",
    "end": "1407279"
  },
  {
    "text": "another one um or you have a a better compression Library you will now walk around the organization trying to get a",
    "start": "1407279",
    "end": "1413640"
  },
  {
    "text": "large number of teams to perform a change in their repository and that gets uh much more Stressless which means the",
    "start": "1413640",
    "end": "1419960"
  },
  {
    "text": "the amount of work you have to do to realize your your effects uh is much",
    "start": "1419960",
    "end": "1425799"
  },
  {
    "text": "higher um another really surprising thing that I learned was that companies cannot buy something that has net",
    "start": "1425799",
    "end": "1432480"
  },
  {
    "text": "negative cost and companies are really avoidant to buy savings um what I learned here is when",
    "start": "1432480",
    "end": "1439600"
  },
  {
    "text": "we started uh on this entire Journey we initially thought that we're going to do cut off savings work meaning um we would",
    "start": "1439600",
    "end": "1447600"
  },
  {
    "text": "offer to people that we'll look at your tax stack we'll work with you to improve the tax stack uh for free but we would",
    "start": "1447600",
    "end": "1455799"
  },
  {
    "text": "like to get a cut of the savings that we realize over the next couple months and it turns out that this looks really",
    "start": "1455799",
    "end": "1462279"
  },
  {
    "text": "really sensible from a technical and economic perspective it is almost impossible to pull off in the real world",
    "start": "1462279",
    "end": "1467919"
  },
  {
    "text": "um largely because neither the accounting nor the legal department are set up to ever do anything like this um",
    "start": "1467919",
    "end": "1475120"
  },
  {
    "text": "meaning accounting doesn't really know how to budget for something that has a guaranteed net negative cost but at the",
    "start": "1475120",
    "end": "1480720"
  },
  {
    "text": "same time an unknown size outflow of money at some point uh the legal department cannot put a maximum dollar",
    "start": "1480720",
    "end": "1487559"
  },
  {
    "text": "value on the contract and is worried about arguments about what the actual savings are going to be um so the",
    "start": "1487559",
    "end": "1494039"
  },
  {
    "text": "experience here has been uh that after a couple months of of trying to to do this",
    "start": "1494039",
    "end": "1499559"
  },
  {
    "text": "and succeeding with only tiny players a friend of mine that has done Professional Services for 20 plus years",
    "start": "1499559",
    "end": "1505039"
  },
  {
    "text": "told me you you seriously you you may be able to do this if you're Bane and if",
    "start": "1505039",
    "end": "1510240"
  },
  {
    "text": "you've played golf with a CEO for 20 years but as a startup this is really not something that big companies will",
    "start": "1510240",
    "end": "1516159"
  },
  {
    "text": "sign up for um and for me as a technical person it was somewhat counterintuitive that uh uh large Enterprises cannot uh",
    "start": "1516159",
    "end": "1525360"
  },
  {
    "text": "just buy savings because they're very happy to buy products in the hope of realizing savings but a",
    "start": "1525360",
    "end": "1531080"
  },
  {
    "text": "contract that guarantees them Savings in return for cut off the savings is",
    "start": "1531080",
    "end": "1536200"
  },
  {
    "text": "something that is too unusual uh to actually be purchased and that was definitely a big lesson for me to learn",
    "start": "1536200",
    "end": "1543320"
  },
  {
    "text": "and a surprising lesson uh another organizational thing that I I learned that i' I found surprising and",
    "start": "1543320",
    "end": "1549520"
  },
  {
    "text": "interesting is um the tragedy of the commons of uh profiling guided optimization and compilation time what's",
    "start": "1549520",
    "end": "1556880"
  },
  {
    "text": "happening here is that uh essentially nobody likes long compilation times uh and the go",
    "start": "1556880",
    "end": "1562159"
  },
  {
    "text": "Developers for example are very very uh keen on keeping go computation times really really low um and people that",
    "start": "1562159",
    "end": "1569720"
  },
  {
    "text": "build your Upstream Linux packages have limited computational resources and they don't really want to spend a lot of time",
    "start": "1569720",
    "end": "1575000"
  },
  {
    "text": "compiling your code either um and this at at one point led to a situation where",
    "start": "1575000",
    "end": "1580120"
  },
  {
    "text": "the Debian Upstream python was compiled without profil and guided optimization enabled which meant everybody running",
    "start": "1580120",
    "end": "1586399"
  },
  {
    "text": "Debian derived Linux distribution all of Ubuntu and so forth everybody was paying 10 15% uh in extra performance for every",
    "start": "1586399",
    "end": "1594120"
  },
  {
    "text": "line of python executed globally largely because the people building the Upstream package didn't want to incur the extra",
    "start": "1594120",
    "end": "1601159"
  },
  {
    "text": "time it took to build the profil and guided optimized like PJ optimized",
    "start": "1601159",
    "end": "1606480"
  },
  {
    "text": "python build uh because it takes like an hour to build um so what we see here is",
    "start": "1606480",
    "end": "1612279"
  },
  {
    "text": "a a tragedy of the commons because for many common libraries if the library runs on Thousand Cor for one year uh",
    "start": "1612279",
    "end": "1619360"
  },
  {
    "text": "increasing the performance by 1% is worth 10 core years meaning you could spend a lot of time compiling that",
    "start": "1619360",
    "end": "1626039"
  },
  {
    "text": "Library if you can eek out a 1% performance improve Improvement so there",
    "start": "1626039",
    "end": "1631399"
  },
  {
    "text": "there's an argument to be made that it would make global economic sense to uh",
    "start": "1631399",
    "end": "1636640"
  },
  {
    "text": "pick certain really heavyweight libraries and try to apply the most expensive compile time optimizations you",
    "start": "1636640",
    "end": "1643320"
  },
  {
    "text": "can possibly dream up uh to them uh and it doesn't matter if it ends up",
    "start": "1643320",
    "end": "1648960"
  },
  {
    "text": "compiling for two weeks because the global impact of the 1% saving would be",
    "start": "1648960",
    "end": "1654799"
  },
  {
    "text": "much much higher than a week of Hardcore computation to compile it um so we end",
    "start": "1654799",
    "end": "1660039"
  },
  {
    "text": "up with this uh tragedy of the commons where nobody has an incentive to speed up uh the global",
    "start": "1660039",
    "end": "1666480"
  },
  {
    "text": "workload um this is is made worse by the fact that on x86 everybody compiles for the wrong microarchitecture um because",
    "start": "1666480",
    "end": "1673120"
  },
  {
    "text": "the Upstream packages are all compiled for the lowest common architecture denominator dat um and almost certainly",
    "start": "1673120",
    "end": "1680399"
  },
  {
    "text": "your your Cloud instance has a new microarchitecture so um you can often",
    "start": "1680399",
    "end": "1685679"
  },
  {
    "text": "get a measurable speed up by rebuilding a piece of software precisely for your microarch um the the issue is that Linux",
    "start": "1685679",
    "end": "1693480"
  },
  {
    "text": "distributions don't necessarily support uh microarchitecture specific packages",
    "start": "1693480",
    "end": "1699279"
  },
  {
    "text": "and Cloud instances don't cleanly M map to microarchitectures either so um we",
    "start": "1699279",
    "end": "1704519"
  },
  {
    "text": "what we have here is a global loss of CPU cycles and a global waste of electricity uh well caused by the fact",
    "start": "1704519",
    "end": "1712120"
  },
  {
    "text": "that the code is always going to be compiled for slightly the wrong CPU and",
    "start": "1712120",
    "end": "1717320"
  },
  {
    "text": "it's interesting if you if you think about all the the new arm server chips perhaps one of the advantage is that in",
    "start": "1717320",
    "end": "1724399"
  },
  {
    "text": "general your code will be compiled for the right microarchitecture um mathematically",
    "start": "1724399",
    "end": "1730799"
  },
  {
    "text": "speaking uh the biggest thing that I learned here is that even for me as a trained mathematician benchmarking",
    "start": "1730799",
    "end": "1737399"
  },
  {
    "text": "performance is a statistical nightmare um so in theory if you care",
    "start": "1737399",
    "end": "1743080"
  },
  {
    "text": "about performance every organization that cares about performance should have benchmarks as part of their CI program",
    "start": "1743080",
    "end": "1748159"
  },
  {
    "text": "uh cicd Pipeline and these benchmarks should in theory be able to highlight performance pressions in introduced by",
    "start": "1748159",
    "end": "1755559"
  },
  {
    "text": "poll request um so in theory organization should always have an awareness about uh what changes lead to",
    "start": "1755559",
    "end": "1762600"
  },
  {
    "text": "Performance deter over time and so forth in theory answering the question does this change make my code faster should",
    "start": "1762600",
    "end": "1769640"
  },
  {
    "text": "be easy because it's classical statistically statistical hypothesis testing now in practice it is actually",
    "start": "1769640",
    "end": "1776840"
  },
  {
    "text": "extremely rare to see an organization that runs statistically sound benchmarks in cicd um because there are so many so",
    "start": "1776840",
    "end": "1784159"
  },
  {
    "text": "many foot guns and traps involved with it um so the the very first thing that I",
    "start": "1784159",
    "end": "1790399"
  },
  {
    "text": "underappreciated initially is um variance in performance is actually",
    "start": "1790399",
    "end": "1795880"
  },
  {
    "text": "something that is your enemy uh because if you try to make a decision like does",
    "start": "1795880",
    "end": "1801039"
  },
  {
    "text": "this code change make my code faster um if you have extremely high variance performance you need many more",
    "start": "1801039",
    "end": "1806519"
  },
  {
    "text": "measurements to actually make that decision uh and the upshot of this is if you tolerant tolerate High variance in",
    "start": "1806519",
    "end": "1813000"
  },
  {
    "text": "your performance to begin with any benchmarking run to determine whether you've improved things in terms of",
    "start": "1813000",
    "end": "1819120"
  },
  {
    "text": "overall performance is going to take longer because you need more repetitions before you've got enough data to make that",
    "start": "1819120",
    "end": "1825519"
  },
  {
    "text": "determination uh another that you run into is uh the the abnor abnormality of",
    "start": "1825519",
    "end": "1831840"
  },
  {
    "text": "all distributions that you encounter in performance work um I I sometimes look at the distributions that I see in",
    "start": "1831840",
    "end": "1837960"
  },
  {
    "text": "practice and I want to yell at a statistician does this look normal to you the the main issue is that",
    "start": "1837960",
    "end": "1844000"
  },
  {
    "text": "um if you deal with really unusual distributions that you are you have you",
    "start": "1844000",
    "end": "1849159"
  },
  {
    "text": "have difficulty in modeling parametrically and performance work almost always deals in these",
    "start": "1849159",
    "end": "1854519"
  },
  {
    "text": "distributions um you're very very quickly at a point where the statistician tells you okay if that is",
    "start": "1854519",
    "end": "1860840"
  },
  {
    "text": "really the case we have to say goodbye to parametric testing and we have to resort to to",
    "start": "1860840",
    "end": "1866880"
  },
  {
    "text": "non-parametrics which are uh like a friend of mine that is a statistics",
    "start": "1866880",
    "end": "1871960"
  },
  {
    "text": "Professor called them methods of Last Resort unfortunately in performance the methods of Last Resort are usually the",
    "start": "1871960",
    "end": "1878840"
  },
  {
    "text": "only Resort you've got um another problem that you run into",
    "start": "1878840",
    "end": "1883880"
  },
  {
    "text": "is um the the CPU internals that uh you",
    "start": "1883880",
    "end": "1889080"
  },
  {
    "text": "you uh face when you run your benchmarks mean that your tests are not uh",
    "start": "1889080",
    "end": "1894880"
  },
  {
    "text": "identically distributed in time U modern CPUs have sticky state which means your",
    "start": "1894880",
    "end": "1900440"
  },
  {
    "text": "your branch predictor will be trained by a particular code path taken which means your your benchmarks will vary in",
    "start": "1900440",
    "end": "1906519"
  },
  {
    "text": "performance uh based on whether they they run for the third time or for the fifth time um and that's very very",
    "start": "1906519",
    "end": "1912840"
  },
  {
    "text": "difficult to get rid of one of the solutions is doing random inter leaving of Benchmark runs where you do one Benchmark run and then you run a",
    "start": "1912840",
    "end": "1919120"
  },
  {
    "text": "different one and so forth but uh you still have to content with things like your CPU clocking up and down and",
    "start": "1919120",
    "end": "1925519"
  },
  {
    "text": "sometimes architectural things uh there was an entire generation of of CPUs where if any of the cores switched to",
    "start": "1925519",
    "end": "1932120"
  },
  {
    "text": "using Vector instructions all the other cores would be clocked down so um you have all these noisy things that destroy",
    "start": "1932120",
    "end": "1940039"
  },
  {
    "text": "your Independence across time um and then you've got all the mes",
    "start": "1940039",
    "end": "1945279"
  },
  {
    "text": "created from aslr caches noisy neighbors on cloud instances and so forth meaning",
    "start": "1945279",
    "end": "1950600"
  },
  {
    "text": "first of all depending on the the address space layout of your code you may actually get almost 10% noise in in",
    "start": "1950600",
    "end": "1957360"
  },
  {
    "text": "your performance measurements just from an unlucky layout um you can have noisy",
    "start": "1957360",
    "end": "1962480"
  },
  {
    "text": "neighbors and Cloud instances that are maxing out the memory bandwidth of the machine stalling your code um there can",
    "start": "1962480",
    "end": "1969399"
  },
  {
    "text": "be all sorts of of trouble uh that you you did not",
    "start": "1969399",
    "end": "1974559"
  },
  {
    "text": "anticipate um now if you start controlling for all of these uh meaning",
    "start": "1974559",
    "end": "1980760"
  },
  {
    "text": "you run on a single tenant bare metal machine you disable any frequency boosting and so forth and you you try to",
    "start": "1980760",
    "end": "1986600"
  },
  {
    "text": "really control the variance of your measurements you end up in a situation where your uh your benchmarking setup is",
    "start": "1986600",
    "end": "1994639"
  },
  {
    "text": "becoming more and more different from your production setup uh over time and then the question becomes your",
    "start": "1994639",
    "end": "1999960"
  },
  {
    "text": "benchmarking uh measurement is really not representative of production what are you benchmarking for so if the end",
    "start": "1999960",
    "end": "2008080"
  },
  {
    "text": "um the the end result of this is that approximately nobody uh not nobody but almost nobody has statistically reliable",
    "start": "2008080",
    "end": "2014039"
  },
  {
    "text": "benchmarks uh that show Improvement or regression on cicd because in many",
    "start": "2014039",
    "end": "2019159"
  },
  {
    "text": "situations running enough experiments uh on each commit uh in order to establish that this is actually making something",
    "start": "2019159",
    "end": "2025519"
  },
  {
    "text": "faster with a confidence interval that is Meaningful is often prohibitive because you need too many samples um",
    "start": "2025519",
    "end": "2032120"
  },
  {
    "text": "this doesn't seem to bother anyone and in the end there's a few people that have done fantastic work on this this",
    "start": "2032120",
    "end": "2037519"
  },
  {
    "text": "mongodb have written a great article about their struggles with change Point detection click house has written a",
    "start": "2037519",
    "end": "2043760"
  },
  {
    "text": "great article about how they control for all the um the side effects in the machine and all the noises in the",
    "start": "2043760",
    "end": "2049280"
  },
  {
    "text": "machine uh and that the trick is relatively clever they run the same workload on the same machine at the same",
    "start": "2049280",
    "end": "2054398"
  },
  {
    "text": "time like the A and B workload uh arguing that at least the the noise is going to be the same for both ones um",
    "start": "2054399",
    "end": "2061960"
  },
  {
    "text": "and if you really want to get into nonparametric statistics for the sake of performance work there's a fantastic blog by",
    "start": "2061960",
    "end": "2067520"
  },
  {
    "text": "akinin uh that I think works at jet brains but uh I I can much recommend it",
    "start": "2067520",
    "end": "2072720"
  },
  {
    "text": "it's heavy but it's great so after all of this what's concrete advice from all",
    "start": "2072720",
    "end": "2079040"
  },
  {
    "text": "of these anecdotes um what are the takeaways from from all of the lessons I learned so on the technical side it is",
    "start": "2079040",
    "end": "2086638"
  },
  {
    "text": "crucially important as a performance engineer to know your napkin math almost all performance analysis and every",
    "start": "2086639",
    "end": "2092520"
  },
  {
    "text": "performance Murder Mystery Begins by identifying a discrepancy between what napkin mouth and your intuition tells",
    "start": "2092520",
    "end": "2098800"
  },
  {
    "text": "you about what should happen and what happens in a real system uh this should not be slow is the start of most",
    "start": "2098800",
    "end": "2105520"
  },
  {
    "text": "Adventures um a surprising number of developers have relatively poor intuition for what a computer can do and",
    "start": "2105520",
    "end": "2113240"
  },
  {
    "text": "um knowing your napkin math will help you uh figure out how long something should take",
    "start": "2113240",
    "end": "2118520"
  },
  {
    "text": "approximately uh another important thing on the technical side is uh you will as a performance engineer have to accept",
    "start": "2118520",
    "end": "2124760"
  },
  {
    "text": "that tooling is nent and uh dis joined uh I ended up starting a company because",
    "start": "2124760",
    "end": "2130280"
  },
  {
    "text": "I needed a simple fleetwide CPU profiler um you are going to be uh fighting with",
    "start": "2130280",
    "end": "2136520"
  },
  {
    "text": "multiple uh poorly supported command line tools to get the data that you want",
    "start": "2136520",
    "end": "2142680"
  },
  {
    "text": "um the other big big takeaway is always measure performance is usually lost in",
    "start": "2142680",
    "end": "2148760"
  },
  {
    "text": "places that uh nobody expects performance issues are almost always murder mysteries it's very rarely the",
    "start": "2148760",
    "end": "2155079"
  },
  {
    "text": "first sub suspect that ends up being the perpetrator of the problem um measuring",
    "start": "2155079",
    "end": "2160560"
  },
  {
    "text": "it's very scientific in a way it's very empirical and I I quite like like that about the work um another thing is",
    "start": "2160560",
    "end": "2167280"
  },
  {
    "text": "there's a lot of lwh hanging fruit like most environments have 20 to 30% of the relatively easy wins on the table and",
    "start": "2167280",
    "end": "2174720"
  },
  {
    "text": "the reality is that in a large enough infrastructure that is real money um and that's real demonstrable technical",
    "start": "2174720",
    "end": "2182280"
  },
  {
    "text": "impact on the organizational side if you were to task me with uh introducing uh a",
    "start": "2182280",
    "end": "2189400"
  },
  {
    "text": "program to improve uh the overall efficiency in terms of cost one of the most important",
    "start": "2189400",
    "end": "2195000"
  },
  {
    "text": "things to do is trying to establish a North star metric which means for a digital Goods provider you want to work",
    "start": "2195000",
    "end": "2200119"
  },
  {
    "text": "towards something that uh approximates the cost per unit served like if you're uh let's say you're you're McDonald's",
    "start": "2200119",
    "end": "2206560"
  },
  {
    "text": "McDonald's pretty has a pretty clear idea of what the input costs for Burger are and what the output costs are and",
    "start": "2206560",
    "end": "2211720"
  },
  {
    "text": "they can drive down the the input costs and similarly for software if you're uh let's say a music streaming service or",
    "start": "2211720",
    "end": "2218440"
  },
  {
    "text": "you would want to know what's the cost of streaming one song uh if you're a movie streaming Ser service what's the",
    "start": "2218440",
    "end": "2225079"
  },
  {
    "text": "cost of streaming a movie and so forth like trying to identify a North star metric that is a unit cost is really the",
    "start": "2225079",
    "end": "2233520"
  },
  {
    "text": "most effective step that you can you can take and once you have that um uh things",
    "start": "2233520",
    "end": "2240160"
  },
  {
    "text": "will will fall into play somewhat magically I think um anyhow um what I've observed is that dedicated teams can",
    "start": "2240160",
    "end": "2246440"
  },
  {
    "text": "have have pretty good results at a certain size and prior to that just doing a hackathon week uh can can be",
    "start": "2246440",
    "end": "2253760"
  },
  {
    "text": "pretty effective um during a hack week you focus on identifying and fixing low hanging food and usually the results of",
    "start": "2253760",
    "end": "2260440"
  },
  {
    "text": "such a hack week can be then used to leverage as leverage or as as argument",
    "start": "2260440",
    "end": "2265520"
  },
  {
    "text": "why a dedicated team is a sensible thing to do and if you've established a North star metric uh the return of investment",
    "start": "2265520",
    "end": "2271599"
  },
  {
    "text": "on such a team or on on a HEC week are going to be measurable and very visible and very easily communic at to the",
    "start": "2271599",
    "end": "2277280"
  },
  {
    "text": "business decision makers um which lastly leads me to the fact that very few areas",
    "start": "2277280",
    "end": "2282319"
  },
  {
    "text": "in software engineering have such clear success metrics as performance work um",
    "start": "2282319",
    "end": "2287359"
  },
  {
    "text": "and I kind of like the the clarity and the game like nature of it because you you get to really measure the the impact",
    "start": "2287359",
    "end": "2294400"
  },
  {
    "text": "you have um I also predict that the organizational importance of performance and efficiency is only going to grow",
    "start": "2294400",
    "end": "2300760"
  },
  {
    "text": "over time uh we're facing a period of uh Dera money like a it's just going to be",
    "start": "2300760",
    "end": "2307440"
  },
  {
    "text": "harder to get investment capital and so forth margins do matter these days and I",
    "start": "2307440",
    "end": "2312680"
  },
  {
    "text": "would not be surprised if over the next years uh efficiency of uh compute",
    "start": "2312680",
    "end": "2318119"
  },
  {
    "text": "becomes a board level topic on par with security and and other areas on the methal mathematical side my",
    "start": "2318119",
    "end": "2324960"
  },
  {
    "text": "advice is unfortunately most likely methods of Last Resort are going to be your first Resort So reading up on",
    "start": "2324960",
    "end": "2331119"
  },
  {
    "text": "non-parametric statistics is is a good idea um and um",
    "start": "2331119",
    "end": "2337119"
  },
  {
    "text": "you'll you'll need to be prepared that the because you are in a in a non-parametric place um you will need to",
    "start": "2337119",
    "end": "2344680"
  },
  {
    "text": "deal with the fact that your tests are going to have relatively low statistical power which means you'll need a certain",
    "start": "2344680",
    "end": "2349760"
  },
  {
    "text": "number of data points before you can make any any firm conclusions and um",
    "start": "2349760",
    "end": "2355599"
  },
  {
    "text": "that means there there is a a cost for scientific certainty in terms of compute",
    "start": "2355599",
    "end": "2361760"
  },
  {
    "text": "um you need more benchmarking runs more data points and uh you need to way carefully when that is warranted and",
    "start": "2361760",
    "end": "2367760"
  },
  {
    "text": "when it isn't um historically the the advice would be be aware like always keep keep",
    "start": "2367760",
    "end": "2376400"
  },
  {
    "text": "yourself up to date in terms of drastic changes in computer geometry a thousandfold increase in iops uh a",
    "start": "2376400",
    "end": "2383119"
  },
  {
    "text": "changing cost for previously expensive operation like multiplication integer multiplication used to be a very",
    "start": "2383119",
    "end": "2388160"
  },
  {
    "text": "expensive thing to do nowadays it's very very cheap to do so you can use it in hash functions uh easily um or uh",
    "start": "2388160",
    "end": "2396520"
  },
  {
    "text": "changes in the state-ofthe-art for various data compression things if you look at zstd versus zip um these are the",
    "start": "2396520",
    "end": "2402079"
  },
  {
    "text": "sort of changes that have drastic multi-year impact uh on Downstream projects like you can still get uh",
    "start": "2402079",
    "end": "2409599"
  },
  {
    "text": "reasonable performance improvements uh by switching your compressor to something else you can still get",
    "start": "2409599",
    "end": "2415000"
  },
  {
    "text": "performance improvements by making use that certain instructions on already is cheap and so forth so keeping yourself",
    "start": "2415000",
    "end": "2421440"
  },
  {
    "text": "up to date in terms of what has recently changed in the last like in in Computing",
    "start": "2421440",
    "end": "2426640"
  },
  {
    "text": "um is a is a very very useful skill um because odds are uh the software has",
    "start": "2426640",
    "end": "2432200"
  },
  {
    "text": "been written for a machine where a lot of things were true that are no longer true and being aware of these will",
    "start": "2432200",
    "end": "2437880"
  },
  {
    "text": "always find you interesting optimization opportunities um and the other thing to keep in mind is code and configurations",
    "start": "2437880",
    "end": "2444280"
  },
  {
    "text": "outlive Hardware Often by decades code is strangely bodal in the in the way",
    "start": "2444280",
    "end": "2449480"
  },
  {
    "text": "that it either gets replaced relatively quickly or it lives almost forever 90% of the code is is going to be gone like",
    "start": "2449480",
    "end": "2456040"
  },
  {
    "text": "that I right is going to be gone in 5 years and 10% will still be there in 20 years and uh you would assume that",
    "start": "2456040",
    "end": "2462560"
  },
  {
    "text": "pretty much all parameters in any codebase that have that are for tuning anything and that haven't been updated",
    "start": "2462560",
    "end": "2469400"
  },
  {
    "text": "in three years are likely going to be wrong for the current generation of Hardware technical Outlook so um where",
    "start": "2469400",
    "end": "2476720"
  },
  {
    "text": "where are we going where should we be going um if I could dream what tools would I want um so I I'll dream a bit",
    "start": "2476720",
    "end": "2484599"
  },
  {
    "text": "and and wish things that I I don't yet have um and the one thing that I've observed is that diagnosing performance",
    "start": "2484599",
    "end": "2490800"
  },
  {
    "text": "issues requires integrating a lot of different data sources at the moment um you use CPU profilers and memory",
    "start": "2490800",
    "end": "2497240"
  },
  {
    "text": "profilers you use distributed tracing use data from the operating system schedule to know about threads um and",
    "start": "2497240",
    "end": "2504040"
  },
  {
    "text": "getting all that data into one place and synchronizing it on a common timeline and then visualizing it uh all of that",
    "start": "2504040",
    "end": "2510680"
  },
  {
    "text": "is is still pretty terrible it's disjointed it's not performant it's generally Yankee there's a lot of bash scripting involved",
    "start": "2510680",
    "end": "2517280"
  },
  {
    "text": "um so the tools I wish I had uh they they there's different tools for different problems but for a CO2",
    "start": "2517280",
    "end": "2523400"
  },
  {
    "text": "reduction uh like Global CO2 reduction I really wish I had the global profiling",
    "start": "2523400",
    "end": "2528440"
  },
  {
    "text": "software as a service database with a statistically significant sample of all Global workloads because then we would",
    "start": "2528440",
    "end": "2535000"
  },
  {
    "text": "do uh open source performance bug bounties and uh we could all leave this",
    "start": "2535000",
    "end": "2540480"
  },
  {
    "text": "room with a a a negative CO2 balance for the rest of our lives um and that would",
    "start": "2540480",
    "end": "2546400"
  },
  {
    "text": "have more impact than many many individual decisions we can take uh for cost accounting I would really like to",
    "start": "2546400",
    "end": "2552520"
  },
  {
    "text": "have something that uh links back the usage of cloud resources like CPU iio",
    "start": "2552520",
    "end": "2557720"
  },
  {
    "text": "Network traffic back to lines of code uh and have that integrated with a metric about unit served so we can calculate",
    "start": "2557720",
    "end": "2564440"
  },
  {
    "text": "the cost breakdown like literally uh for serving this song to a user uh these are",
    "start": "2564440",
    "end": "2571440"
  },
  {
    "text": "the lines of code that were involved and these are uh the areas that caused the cost and this this is the cost per",
    "start": "2571440",
    "end": "2577680"
  },
  {
    "text": "song um for latency analysis I would really like to have a tool that combines CPU profiles and distribute tracing and",
    "start": "2577680",
    "end": "2584200"
  },
  {
    "text": "schedule events um all tied together uh into one nice UI uh and Deployable",
    "start": "2584200",
    "end": "2590319"
  },
  {
    "text": "without friction in the sense that you would like to have a a multimachine distributed trace for a request that you",
    "start": "2590319",
    "end": "2596240"
  },
  {
    "text": "send and then for each uh of the spans within this request you would like to",
    "start": "2596240",
    "end": "2602240"
  },
  {
    "text": "know what code is executed and which parts of the time is the CPU actually on",
    "start": "2602240",
    "end": "2608240"
  },
  {
    "text": "core and which parts of the time is it on off core across multiple machines and have all of that visualized in one big",
    "start": "2608240",
    "end": "2613880"
  },
  {
    "text": "timeline so you can literally tell you out of these 50 milliseconds in latency this is precisely where we're spending",
    "start": "2613880",
    "end": "2620160"
  },
  {
    "text": "the time on which machine doing what um lastly uh I would really like to",
    "start": "2620160",
    "end": "2626559"
  },
  {
    "text": "have uh kubernetes cluster wide cause of profiling and there's some work on on causal profiling there's a tool called",
    "start": "2626559",
    "end": "2632720"
  },
  {
    "text": "cause which is is really fascinating but these things are still very much uh focused on uh Individual Services and",
    "start": "2632720",
    "end": "2639920"
  },
  {
    "text": "they're also not quite causal enough yet in the sense that uh they can't turn me if my latency is is due to hitting too",
    "start": "2639920",
    "end": "2646000"
  },
  {
    "text": "many page FS so um what I would really like is something that you install on an",
    "start": "2646000",
    "end": "2651400"
  },
  {
    "text": "entire kuat cluster or or whatever other cluster software you use and then you can ask a question like this is a way",
    "start": "2651400",
    "end": "2658000"
  },
  {
    "text": "like this is a slow request sent to the cluster why is it slow why is it expensive and then have some causal",
    "start": "2658000",
    "end": "2665720"
  },
  {
    "text": "model of this is expensive because machine X over here took too much time servicing",
    "start": "2665720",
    "end": "2673160"
  },
  {
    "text": "this RPC call because it took too much time servicing this pagefall for example",
    "start": "2673160",
    "end": "2679319"
  },
  {
    "text": "um not sure how to get there um we've made pretty like we've had pretty",
    "start": "2679319",
    "end": "2684440"
  },
  {
    "text": "dazzling advances in large language models in recent months they can now tell me something non-trivial about my",
    "start": "2684440",
    "end": "2689680"
  },
  {
    "text": "code perhaps we will get to to something that can tell me something non-trivial about the performance of my software um",
    "start": "2689680",
    "end": "2696640"
  },
  {
    "text": "one big hurdle with all performance tooling that I've observed is deployment friction um most production environments",
    "start": "2696640",
    "end": "2703800"
  },
  {
    "text": "uh need some sort of frictionless deployment ideally you Deploy on the underlying node and there's no",
    "start": "2703800",
    "end": "2708880"
  },
  {
    "text": "instrumentation of the software necessary um the moment that any team",
    "start": "2708880",
    "end": "2714119"
  },
  {
    "text": "outside of the Ops team has to lift a finger your tool becomes drastically less useful",
    "start": "2714119",
    "end": "2720480"
  },
  {
    "text": "anyhow so that's it I guess um what is",
    "start": "2720480",
    "end": "2725520"
  },
  {
    "text": "next in regards to Performance work uh I don't know I've been wondering around the landscape for a bit um I've learned",
    "start": "2725520",
    "end": "2733640"
  },
  {
    "text": "a bunch of things um and I'm kind of excited what comes next but I have no idea what that will",
    "start": "2733640",
    "end": "2740280"
  },
  {
    "text": "be and this concludes my talk um are there any",
    "start": "2740280",
    "end": "2746599"
  },
  {
    "text": "questions if you don't have any questions please follow me uh either on Twitter where I'm har flake or on",
    "start": "2746599",
    "end": "2752960"
  },
  {
    "text": "Mastodon where I'm har flake at on our social or uh ping me per email per link",
    "start": "2752960",
    "end": "2760680"
  },
  {
    "text": "per whichever medium you choose Thank",
    "start": "2760680",
    "end": "2765480"
  },
  {
    "text": "[Music]",
    "start": "2768170",
    "end": "2773630"
  },
  {
    "text": "you",
    "start": "2774800",
    "end": "2777800"
  }
]