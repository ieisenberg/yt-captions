[
  {
    "text": "[Music]",
    "start": "680",
    "end": "8549"
  },
  {
    "text": "hi everyone welcome to a cucumplus presentation about the lessons we learned while building the confluent",
    "start": "14960",
    "end": "21760"
  },
  {
    "text": "cloud control plan i'm gwen shapiro i'm a principal engineer and engineering manager of the",
    "start": "21760",
    "end": "28240"
  },
  {
    "text": "cloud native kafka team here at confluent and with me",
    "start": "28240",
    "end": "33600"
  },
  {
    "text": "i'm vivek i'm a senior engineer at confluent i come here from uber where i help build control plane and bring a",
    "start": "33600",
    "end": "38800"
  },
  {
    "text": "bunch of experience with me together we are building control plane for confluent so we're here to tell you about the",
    "start": "38800",
    "end": "45840"
  },
  {
    "text": "control plan we already built the problems we ran into with it the controller we were trying to fix to",
    "start": "45840",
    "end": "52480"
  },
  {
    "text": "build to fix all those problems and the new problems that we created on the way hopefully there will be some lessons",
    "start": "52480",
    "end": "58640"
  },
  {
    "text": "that you will find useful while designing your own architectures",
    "start": "58640",
    "end": "64399"
  },
  {
    "text": "so first of all confluent cloud the main idea in confluent cloud is that we want to make it really easy for",
    "start": "65360",
    "end": "71760"
  },
  {
    "text": "everyone to install and manage their own kafka clusters and other confluent products like",
    "start": "71760",
    "end": "78240"
  },
  {
    "text": "connect and k sequel the main idea is that we have three flavors of clusters we call them skews",
    "start": "78240",
    "end": "85680"
  },
  {
    "text": "you can use basic standard or dedicated basic installment or multi-talent dedicated means you have your very own",
    "start": "85680",
    "end": "91920"
  },
  {
    "text": "brokers in the cloud and we allow you to size the cluster but note that we don't size it by",
    "start": "91920",
    "end": "99119"
  },
  {
    "text": "number of brokers because who knows what can a broker do we size it by cku which is a capacity",
    "start": "99119",
    "end": "105520"
  },
  {
    "text": "unit so you get certain amount of throughput certain amount number of partitions connections storage so forth",
    "start": "105520",
    "end": "112320"
  },
  {
    "text": "and so on and it doesn't end when you provision the cluster after you have a cluster you can also change its size and",
    "start": "112320",
    "end": "119360"
  },
  {
    "text": "all this ease of use one click deployment one click resize of kafka",
    "start": "119360",
    "end": "124560"
  },
  {
    "text": "which those of you who manage no it's not always easy this is driven by our control plane",
    "start": "124560",
    "end": "130879"
  },
  {
    "text": "so the reason our control plan is even interesting to talk about is that it's really a challenging problem and it's a",
    "start": "130879",
    "end": "137200"
  },
  {
    "text": "challenging problem because of scale but not in the way you think about scale normally so it's not just that we manage",
    "start": "137200",
    "end": "143760"
  },
  {
    "text": "thousands of clusters which we do but it's also that we have 20 engineering teams working either on the control",
    "start": "143760",
    "end": "150239"
  },
  {
    "text": "plane or on products that the control plane manages we have four different customer facing",
    "start": "150239",
    "end": "156160"
  },
  {
    "text": "services they all require slightly different variants of control we have four different network options obviously",
    "start": "156160",
    "end": "162000"
  },
  {
    "text": "all of those overlapped so now we're kind of 16 different things customers could do we have three skills and product",
    "start": "162000",
    "end": "169360"
  },
  {
    "text": "constantly changes what exactly basic includes what startup includes so we have to have flexibility there we have",
    "start": "169360",
    "end": "175599"
  },
  {
    "text": "to support three different cloud vendors with our lovely ever-changing apis and we need to have some security",
    "start": "175599",
    "end": "184239"
  },
  {
    "text": "because it's your guy's data and so it's not like every component",
    "start": "184239",
    "end": "189599"
  },
  {
    "text": "every service can just call anywhere in the world now i said the world because",
    "start": "189599",
    "end": "194959"
  },
  {
    "text": "we also have at this widely wide range distributed problem where our services",
    "start": "194959",
    "end": "200959"
  },
  {
    "text": "are pretty much all over the world so the way we solve the problem today",
    "start": "200959",
    "end": "207920"
  },
  {
    "text": "is that we have the confluent cloud control plan and essentially",
    "start": "207920",
    "end": "214080"
  },
  {
    "text": "it's a monolith so not quite so we have the mothership this is the control plane and then we",
    "start": "214080",
    "end": "220000"
  },
  {
    "text": "have the network regions those are all the places where customers actually have clusters and data those are",
    "start": "220000",
    "end": "226080"
  },
  {
    "text": "separated mostly for security but also because there's really no other way to build it",
    "start": "226080",
    "end": "231200"
  },
  {
    "text": "the nice things that we got right is that the data plan is completely separate no matter what we do in the",
    "start": "231200",
    "end": "236560"
  },
  {
    "text": "control plane customers only talk to zero kafka clusters and they get the service and the data",
    "start": "236560",
    "end": "243280"
  },
  {
    "text": "continue flowing no matter what the only thing that could happen is that they will not be able to resize or provision",
    "start": "243280",
    "end": "249920"
  },
  {
    "text": "now the things that we didn't get right is that we have a monolithic scheduler",
    "start": "249920",
    "end": "255360"
  },
  {
    "text": "and this is responsible for provisioning and resizing and upgrading of all our services everything that we do always",
    "start": "255360",
    "end": "262000"
  },
  {
    "text": "goes through there which means that any change to the product any change the logic anything that any team wants to do",
    "start": "262000",
    "end": "268080"
  },
  {
    "text": "it goes through there and every time we try to release it we actually release a lot of features in different states from",
    "start": "268080",
    "end": "273840"
  },
  {
    "text": "different teams so we really have to coordinate those releases to make sure that everyone does not have like half a feature in there",
    "start": "273840",
    "end": "280479"
  },
  {
    "text": "while we're releasing nothing we're not releasing anything that is broken this is quite painful",
    "start": "280479",
    "end": "287120"
  },
  {
    "text": "in general working with it because it has so many circular dependencies so many um",
    "start": "287120",
    "end": "293199"
  },
  {
    "text": "weakly understood dependencies i would say it's not an easy component to work with so",
    "start": "293199",
    "end": "298880"
  },
  {
    "text": "this is what we're trying to solve with our new architecture so every new architecture starts with requirements",
    "start": "298880",
    "end": "306639"
  },
  {
    "text": "we wanted to keep the good stuff so the data plan stays independent and users",
    "start": "306639",
    "end": "312320"
  },
  {
    "text": "don't notice anything that we do on the control plane but the main thing is that we need to decouple resources we really",
    "start": "312320",
    "end": "318080"
  },
  {
    "text": "need to give each team its own thing to allow to be independently and to move faster but while we do this decoupling we need",
    "start": "318080",
    "end": "325199"
  },
  {
    "text": "still need to have a trusted source of truth what does our system have at the very least we need to be able to",
    "start": "325199",
    "end": "331360"
  },
  {
    "text": "build the customers on a current state in the last hour of all their systems so",
    "start": "331360",
    "end": "336960"
  },
  {
    "text": "this view has to be somewhere in addition in order to make the whole thing work we really need clean",
    "start": "336960",
    "end": "343199"
  },
  {
    "text": "dependencies and clean interfaces for all those services to talk to each other to allow us to manage them",
    "start": "343199",
    "end": "349039"
  },
  {
    "text": "and we really wanted from russian perspective to make it all self-healing so if a service goes down it will get",
    "start": "349039",
    "end": "354720"
  },
  {
    "text": "auto restarted and sync will just continue on seamlessly so we couldn't really we had to manage state for all",
    "start": "354720",
    "end": "362080"
  },
  {
    "text": "those services so we took all those requirements",
    "start": "362080",
    "end": "367440"
  },
  {
    "text": "and we got a great developer to implement them awesome thank you gwen for the uh intro",
    "start": "367440",
    "end": "375120"
  },
  {
    "text": "and setting up the platform to explaining the architecture let's start with taking a sneak peek at our new architecture",
    "start": "375120",
    "end": "380960"
  },
  {
    "text": "so as we mentioned we have four user facing products kafka connect k sql and traffic",
    "start": "380960",
    "end": "388400"
  },
  {
    "text": "all the user requests are fronted by a gateway depending on what resource the request is for it gives it to the",
    "start": "388400",
    "end": "394160"
  },
  {
    "text": "specific product we'll speak about kafka in this particular presentation but it applies",
    "start": "394160",
    "end": "399680"
  },
  {
    "text": "exactly same for connect k sql or any other cp that we might have in the future kafka printing service it takes care of",
    "start": "399680",
    "end": "407120"
  },
  {
    "text": "user requests and gives a handle back or id back to user and it's everything that",
    "start": "407120",
    "end": "412400"
  },
  {
    "text": "user sees uh it could be ckuse it could be the name it could be anything that user sees",
    "start": "412400",
    "end": "418240"
  },
  {
    "text": "now this translates into something that we call physical kafka cluster conflict",
    "start": "418240",
    "end": "424000"
  },
  {
    "text": "which says how many brokers does this ck you need it's all the physical requirements that that this logical",
    "start": "424000",
    "end": "431120"
  },
  {
    "text": "kafka requires to actually get provisioned or realize now this physical kafka cluster is",
    "start": "431120",
    "end": "438160"
  },
  {
    "text": "hosted on a capacity or a k8 which is controlled by capacity controller",
    "start": "438160",
    "end": "443520"
  },
  {
    "text": "capacity controller basically takes care of spinning and d-spinning of k-8s that's the underlying infrastructure",
    "start": "443520",
    "end": "449440"
  },
  {
    "text": "that we use to host our physical connect kafka cluster the request from",
    "start": "449440",
    "end": "454960"
  },
  {
    "text": "capacity controller then lands onto sync service which goes to satellites where it's actually realized",
    "start": "454960",
    "end": "461120"
  },
  {
    "text": "uh now that we saw the new architecture let's see what's guiding the what are the basic guiding principles or the",
    "start": "461120",
    "end": "467599"
  },
  {
    "text": "north star for this principle for the architecture the three guiding principles for us were",
    "start": "467599",
    "end": "473680"
  },
  {
    "text": "well there were many but the basic three were desired state system layer cake and choreography pattern",
    "start": "473680",
    "end": "480240"
  },
  {
    "text": "i'll dive deep into the desired state and layer cake and hand it over back to gwen to speak about the choreography",
    "start": "480240",
    "end": "487360"
  },
  {
    "text": "desired state system so let's see what this means uh any a system or a service that's",
    "start": "487360",
    "end": "493680"
  },
  {
    "text": "responsible for a resource always writes the desired state first which then would",
    "start": "493680",
    "end": "498720"
  },
  {
    "text": "trigger downstream events for other services to take care of the the principle all it says is we",
    "start": "498720",
    "end": "505120"
  },
  {
    "text": "always write the desired state before we take any action that require other service communications",
    "start": "505120",
    "end": "512159"
  },
  {
    "text": "let's take an example where a customer already has a kafka and wants to expand it to 4 ckus the request lands on",
    "start": "512159",
    "end": "518880"
  },
  {
    "text": "gateway gateway hands looks at it it's a kafka request gives it to the kafka printing service",
    "start": "518880",
    "end": "524560"
  },
  {
    "text": "kafka fronting service now realizes oh i need to expand the kafka to be 4 ckus",
    "start": "524560",
    "end": "529680"
  },
  {
    "text": "writes it collect us a bunch of validation or quotas and writes it to the database",
    "start": "529680",
    "end": "534880"
  },
  {
    "text": "when it writes to database we have a deficient connector which pulls the database for changes and writes an event",
    "start": "534880",
    "end": "540720"
  },
  {
    "text": "to kafka this event would trigger a action for pkc controller where pkc",
    "start": "540720",
    "end": "547839"
  },
  {
    "text": "controller now says it has a request to expand the lk uh the kafka and it means",
    "start": "547839",
    "end": "553600"
  },
  {
    "text": "it needs to expand to 12 brokers it writes the new desired state which is 12 brokers to database which again",
    "start": "553600",
    "end": "559839"
  },
  {
    "text": "creates the event on kaspa and this triggers a downstream capacity controller fortunately in this case we have auto",
    "start": "559839",
    "end": "566720"
  },
  {
    "text": "scaler so we don't really need to spin any more kafka or nodes or node pool and",
    "start": "566720",
    "end": "572240"
  },
  {
    "text": "we write it to database config the case configure the database and send it back to the kafka",
    "start": "572240",
    "end": "577680"
  },
  {
    "text": "now sync service which is the communication between control plane and all the satellites reads this sends it",
    "start": "577680",
    "end": "583120"
  },
  {
    "text": "to the satellites where it actually get realizes when when the operations are done the",
    "start": "583120",
    "end": "588560"
  },
  {
    "text": "the actual statuses are percolated all the way back up in exact same manner but on a different",
    "start": "588560",
    "end": "594720"
  },
  {
    "text": "topic this separation helps us pass the message all the way down and up",
    "start": "594720",
    "end": "600320"
  },
  {
    "text": "by guiding by adhering to the uh to the principle of desired state",
    "start": "600320",
    "end": "606240"
  },
  {
    "text": "the another scenario where we had failures on the downstream and how did we our desired state help us get around",
    "start": "606240",
    "end": "612880"
  },
  {
    "text": "it see we want to spin up a new kafka goes to pkc controller capacity controller",
    "start": "612880",
    "end": "618480"
  },
  {
    "text": "now capacity control realizes we need to spin up a new k8 but unfortunately we get error from the cloud provider",
    "start": "618480",
    "end": "624800"
  },
  {
    "text": "because of http 4 to 9. it retries doesn't succeed hands it back",
    "start": "624800",
    "end": "630560"
  },
  {
    "text": "to capacity controller saying that the state could not be fulfilled now note that all the way down would it",
    "start": "630560",
    "end": "636800"
  },
  {
    "text": "would still keep retrying because the desired state isn't met yet all the errors are from capacity",
    "start": "636800",
    "end": "643440"
  },
  {
    "text": "controller to down and uh this would keep retrying until the desired state is reached",
    "start": "643440",
    "end": "651200"
  },
  {
    "text": "uh let's see a bit more on how desired helps us with more operations like",
    "start": "651920",
    "end": "656959"
  },
  {
    "text": "expansion and shrinks say a customer wants to expand from 2 cku to 4 ckus",
    "start": "656959",
    "end": "663600"
  },
  {
    "text": "puts in the request this expansion could take up to 20 minutes it's not very unlikely to request a",
    "start": "663600",
    "end": "670320"
  },
  {
    "text": "like a different operation like shrink or maybe even expand it further what it means is it would",
    "start": "670320",
    "end": "676959"
  },
  {
    "text": "boil down to different number of brokers that each cku goes on to uh",
    "start": "676959",
    "end": "683839"
  },
  {
    "text": "look into it like if it was a command based system it would go from two to four back to two",
    "start": "684079",
    "end": "690560"
  },
  {
    "text": "and then again to six but since the desired state and all we do is maintain the new state get the config and pass it",
    "start": "690560",
    "end": "697519"
  },
  {
    "text": "down the end state which is data which is satellites would need to go to six ckus",
    "start": "697519",
    "end": "703760"
  },
  {
    "text": "without having to do any of the shrinks now like what are the benefits that we",
    "start": "703760",
    "end": "710079"
  },
  {
    "text": "get out of the desired state our systems are very very recoverable we",
    "start": "710079",
    "end": "715440"
  },
  {
    "text": "have had incidents in the past where customers accidentally deleted the kafka and asked us to panic recover those",
    "start": "715440",
    "end": "721600"
  },
  {
    "text": "kafka since it's a desired state uh it's all is a desired state in our database we",
    "start": "721600",
    "end": "727920"
  },
  {
    "text": "could easily recover those staff calls we have single source of truth each service owns a database and is a source",
    "start": "727920",
    "end": "733839"
  },
  {
    "text": "of truth for that particular resource just because of nature of cdc events which is communication between different",
    "start": "733839",
    "end": "739279"
  },
  {
    "text": "components it's easily auditable and since each component reacts to different events on the system each",
    "start": "739279",
    "end": "746560"
  },
  {
    "text": "component can be easily testable let's dive into the second principle",
    "start": "746560",
    "end": "751839"
  },
  {
    "text": "which is layer cake let's see why do we need this uh say we want to patch our control plane or even",
    "start": "751839",
    "end": "758560"
  },
  {
    "text": "release new services we need to know order in which we release the services so that we can uh can upgrade our",
    "start": "758560",
    "end": "765920"
  },
  {
    "text": "control plane without having to take any downtime second is we have one control plane",
    "start": "765920",
    "end": "771600"
  },
  {
    "text": "which is h a and in the future if you want to spin up multiple control planes we need to know",
    "start": "771600",
    "end": "777360"
  },
  {
    "text": "the deterministic way of spinning up services so we can actually do this",
    "start": "777360",
    "end": "782959"
  },
  {
    "text": "in our current architecture the base is sync service which kind of comes up first on the networking side it's going",
    "start": "783360",
    "end": "789279"
  },
  {
    "text": "to be a network controller which speaks to different vendors so these are the ones that come up first",
    "start": "789279",
    "end": "794959"
  },
  {
    "text": "after this it's going to be capacity controller which speaks to the sync service or traffic service which speaks",
    "start": "794959",
    "end": "800000"
  },
  {
    "text": "to the network controller these are the second one to come up capacity controller is used by all the",
    "start": "800000",
    "end": "807200"
  },
  {
    "text": "cps that we offer so connect and k sql now can come up and uh this is used by pkc controller which",
    "start": "807200",
    "end": "814720"
  },
  {
    "text": "in turn is used by kafka so those can come in in that order",
    "start": "814720",
    "end": "819760"
  },
  {
    "text": "the last to come up is gateway note that the gateway comes up last because if the underlying dependency is not up it will",
    "start": "819760",
    "end": "826240"
  },
  {
    "text": "give errors for those dependencies so gateway is the last to come up and now we have a clean way to spin up our",
    "start": "826240",
    "end": "832320"
  },
  {
    "text": "control plane uh let's see to how now that we know",
    "start": "832320",
    "end": "838880"
  },
  {
    "text": "what layering is let's see how the communication between services work say you come in with a request to increase",
    "start": "838880",
    "end": "844720"
  },
  {
    "text": "to 4 ckus on a gateway gateway looks it's a kafka request goes to kafka fronting service kafka frontline service",
    "start": "844720",
    "end": "850959"
  },
  {
    "text": "does quota checks validations writes it to a database this right would trigger",
    "start": "850959",
    "end": "857600"
  },
  {
    "text": "a pole on the division connector which reads the database change and then writes it to a kafka topic",
    "start": "857600",
    "end": "865040"
  },
  {
    "text": "this kafka creates a a refiner on this kafka would create a",
    "start": "865040",
    "end": "870320"
  },
  {
    "text": "event for pkc controller which now realizes that it needs some action to reach to adhere to this request",
    "start": "870320",
    "end": "877600"
  },
  {
    "text": "uh note that this is the same pattern that we try to follow everywhere but there are some places like casca",
    "start": "877600",
    "end": "883040"
  },
  {
    "text": "frontend where it speaks to quota service or validation which are still grpcs this is the world where we want to",
    "start": "883040",
    "end": "888320"
  },
  {
    "text": "line up in now that we've spoken about these two principles i'll hand it back to gwen to",
    "start": "888320",
    "end": "893839"
  },
  {
    "text": "speak about choreography of microservices and take us home with the messages thanks vivek so we've kind of explained",
    "start": "893839",
    "end": "900800"
  },
  {
    "text": "how two services talk to each other via right step to the database",
    "start": "900800",
    "end": "906480"
  },
  {
    "text": "pulling an event into kafka and then other services reacting to this event i",
    "start": "906480",
    "end": "911920"
  },
  {
    "text": "just want to show how these things each services interacting which is each",
    "start": "911920",
    "end": "917519"
  },
  {
    "text": "other in this manner actually allows us to build a very resilient system out of all those microservices",
    "start": "917519",
    "end": "926759"
  },
  {
    "text": "so what we learned is that we have the services each one owns a resource it owns the state of this resource and it",
    "start": "930399",
    "end": "937440"
  },
  {
    "text": "owns the changes to the states the changes states are propagated to an event and theoretically any other",
    "start": "937440",
    "end": "943759"
  },
  {
    "text": "service could get those events each service that gets these events owns how it reacts to these events so the",
    "start": "943759",
    "end": "950240"
  },
  {
    "text": "entire logic of what to do when something changes in the system it lies within each service so as a bunch of",
    "start": "950240",
    "end": "958000"
  },
  {
    "text": "examples kafka front-end service we learned from vivec it owns the customer careful",
    "start": "958000",
    "end": "963040"
  },
  {
    "text": "configuration it stores it there every time it changes there is event with a logical config change",
    "start": "963040",
    "end": "969839"
  },
  {
    "text": "the physical kafka controller knows that every time there is a physical logical confliction it should examine it and if",
    "start": "969839",
    "end": "976160"
  },
  {
    "text": "it requires any physical changes for example a name change does not require physical change but a change to the size of the cluster",
    "start": "976160",
    "end": "984000"
  },
  {
    "text": "obviously does so if there is a change to the physical configuration you put it in your database it creates",
    "start": "984000",
    "end": "989920"
  },
  {
    "text": "another event the capacity controller knows that if the capacity of kafka changed we may need to also change the",
    "start": "989920",
    "end": "995920"
  },
  {
    "text": "capacity in kubernetes again stores the new capacity so we have all those services they get events they understand",
    "start": "995920",
    "end": "1003279"
  },
  {
    "text": "internally what to do with them and they store the reaction somewhere else which creates another chain of",
    "start": "1003279",
    "end": "1009519"
  },
  {
    "text": "events this idea of a system where each service basically listens to changes in the",
    "start": "1009519",
    "end": "1015519"
  },
  {
    "text": "world decides how to react to them and reacts independently is known as the choreography pattern it's different from",
    "start": "1015519",
    "end": "1022639"
  },
  {
    "text": "what is known as orchestration pattern where there is a single service that knows what has to be done it owns the",
    "start": "1022639",
    "end": "1027839"
  },
  {
    "text": "entire logic of the system end-to-end and it issues commands so in an orchestration system it would be",
    "start": "1027839",
    "end": "1033520"
  },
  {
    "text": "customer wants something okay cover front-end do this a kafka physical do",
    "start": "1033520",
    "end": "1039360"
  },
  {
    "text": "that capacity do this and all the logic would be in one place which is a benefit but it also means that again if any the",
    "start": "1039360",
    "end": "1046720"
  },
  {
    "text": "team does not own the component with its own logic you kind of have to work in this centralized system where team",
    "start": "1046720",
    "end": "1053760"
  },
  {
    "text": "either there's one team that tries to manage all the logic for every other team which is not great all teams have",
    "start": "1053760",
    "end": "1059200"
  },
  {
    "text": "to somehow coordinate working on one service also quite painful so we really like the way that gives teams",
    "start": "1059200",
    "end": "1066320"
  },
  {
    "text": "independence at the cost of not necessarily having all our logic in",
    "start": "1066320",
    "end": "1072799"
  },
  {
    "text": "one place now the reason this is super important to us is because we have a lot of",
    "start": "1072799",
    "end": "1079360"
  },
  {
    "text": "engineering teams as all of you know engineers are kind of expensive their time is valuable we really want to",
    "start": "1079360",
    "end": "1085679"
  },
  {
    "text": "enable them to be as effective as they can be and having each team owns its logic from the customer interaction to",
    "start": "1085679",
    "end": "1092960"
  },
  {
    "text": "storage to everything else is super super critical for us and we make the",
    "start": "1092960",
    "end": "1099039"
  },
  {
    "text": "trade-offs to make everyone a lot more productive this way",
    "start": "1099039",
    "end": "1106720"
  },
  {
    "text": "okay so we're moving to a new system clearly it solves all the worn problems without any drawbacks at all",
    "start": "1107120",
    "end": "1113280"
  },
  {
    "text": "except it really does not so some of the challenges we have encountered are first of all",
    "start": "1113280",
    "end": "1119600"
  },
  {
    "text": "observability is really hard we said that we really want it to be observable we want to have a single",
    "start": "1119600",
    "end": "1124960"
  },
  {
    "text": "source of truth in reality we still have 20 micro services each one of them with",
    "start": "1124960",
    "end": "1130640"
  },
  {
    "text": "their own state we collected all the kafka we build systems that allow us to",
    "start": "1130640",
    "end": "1136080"
  },
  {
    "text": "aggregate the state to report on it but it requires us to build a lot of the systems there is some you can buy off",
    "start": "1136080",
    "end": "1142080"
  },
  {
    "text": "the shelf but we have an entire observability team responsible just to make sure that we can report",
    "start": "1142080",
    "end": "1148559"
  },
  {
    "text": "on the system we have another team just for billing on the system again collecting all this information",
    "start": "1148559",
    "end": "1154960"
  },
  {
    "text": "migration turned out to be incredibly difficult obviously we cannot just the one they shut down one control plan and",
    "start": "1154960",
    "end": "1161440"
  },
  {
    "text": "bring back a new one we have to migrate basically service by service and area by",
    "start": "1161440",
    "end": "1166640"
  },
  {
    "text": "area each team also owns its migration which makes things more fun",
    "start": "1166640",
    "end": "1171679"
  },
  {
    "text": "and this is not trivial in the sense that okay we can create a new database",
    "start": "1171679",
    "end": "1176799"
  },
  {
    "text": "you can even use change capture to kind of migrate data between databases but at the end of the day at some point the",
    "start": "1176799",
    "end": "1182559"
  },
  {
    "text": "service has to stop talking to database a and start on database b we cannot really have two parallel services",
    "start": "1182559",
    "end": "1188240"
  },
  {
    "text": "because of our ownership principle so there will be a point where we cut off",
    "start": "1188240",
    "end": "1193360"
  },
  {
    "text": "services with a small downtime luckily only on the control plane data plane will always stay up",
    "start": "1193360",
    "end": "1199520"
  },
  {
    "text": "testing each it's made it's really easy for each team to test its own component yay this",
    "start": "1199520",
    "end": "1205600"
  },
  {
    "text": "is great but it's a there are concerns that are very cross-cutting so security really it's",
    "start": "1205600",
    "end": "1212880"
  },
  {
    "text": "not just each component being secure but things like who is authorized to do what",
    "start": "1212880",
    "end": "1218320"
  },
  {
    "text": "as the user authenticated you really need to take care of it across the all of the systems in a very unified manner",
    "start": "1218320",
    "end": "1225039"
  },
  {
    "text": "we ended up with teams that are responsible for those cross-cutting concerns rather than components",
    "start": "1225039",
    "end": "1230240"
  },
  {
    "text": "we suspected their life is not quite as good as the life we built for the component owners as they have to talk to",
    "start": "1230240",
    "end": "1236880"
  },
  {
    "text": "a lot of other teams they have to do a lot of coordination i wish we had a good solution for them",
    "start": "1236880",
    "end": "1241919"
  },
  {
    "text": "so far this is where you are please let us know if you managed to solve this one",
    "start": "1241919",
    "end": "1247440"
  },
  {
    "text": "and the last one is that we discovered that our internal needs and operations are not the same as what customer needs",
    "start": "1247440",
    "end": "1253120"
  },
  {
    "text": "because customers work on one cluster at a time we really need to do things on hundreds of clusters thousands of",
    "start": "1253120",
    "end": "1259679"
  },
  {
    "text": "clusters at a time so we were kind of behind on building our own tools and we need to catch up but again a large body",
    "start": "1259679",
    "end": "1266720"
  },
  {
    "text": "of workers that we semi forgot about doing",
    "start": "1266720",
    "end": "1272240"
  },
  {
    "text": "with all those challenges all those principles let's close this with some of our key lessons",
    "start": "1274000",
    "end": "1280480"
  },
  {
    "text": "what worked really well for us is persisting state with kafka events it's really the foundation of making",
    "start": "1280480",
    "end": "1285919"
  },
  {
    "text": "something that is recoverable we have the entire auditable history of every change because we record the state in an",
    "start": "1285919",
    "end": "1292559"
  },
  {
    "text": "event and not just we added something or we moved something it makes things recoverable it makes things auditable",
    "start": "1292559",
    "end": "1299440"
  },
  {
    "text": "observable we depend on this system a lot larry cake is fantastic both in kind",
    "start": "1299440",
    "end": "1306480"
  },
  {
    "text": "of avoiding those cyclic dependencies which make it hard to start a service and also in debugging and diagnosing the",
    "start": "1306480",
    "end": "1312320"
  },
  {
    "text": "fact that we know exactly who is calling whom that calls only go in a certain direction we have a very clear",
    "start": "1312320",
    "end": "1318240"
  },
  {
    "text": "dependency graph made their life much more manageable than it otherwise would be",
    "start": "1318240",
    "end": "1323600"
  },
  {
    "text": "and even with those improvements breaking a monolith is always challenging if you do it we recommend do",
    "start": "1323600",
    "end": "1330640"
  },
  {
    "text": "not leave how do we test and to end concerns and how do we build operational",
    "start": "1330640",
    "end": "1336159"
  },
  {
    "text": "tools to and to the end like we did start thinking about it very very early",
    "start": "1336159",
    "end": "1342240"
  },
  {
    "text": "on without those things in mind thank you very much for spending this",
    "start": "1342240",
    "end": "1347520"
  },
  {
    "text": "time with us thank you very much we are available on twitter or you can email us and we'll happy to take questions",
    "start": "1347520",
    "end": "1354960"
  },
  {
    "text": "thank you okay so i think i'm now taking",
    "start": "1354960",
    "end": "1361919"
  },
  {
    "text": "questions from the chat uh so i see a question from",
    "start": "1361919",
    "end": "1369200"
  },
  {
    "text": "rishi how would you compare the ease of a new team getting up to speed with",
    "start": "1369200",
    "end": "1374240"
  },
  {
    "text": "confluent kafka when compared to axon or eventuate",
    "start": "1374240",
    "end": "1380880"
  },
  {
    "text": "i have to say i never use the excellent adventure",
    "start": "1380960",
    "end": "1386200"
  },
  {
    "text": "like you will just answer questions from the chat right now um i can i can um help you as best and sort of throw some",
    "start": "1391679",
    "end": "1397440"
  },
  {
    "text": "questions at you if you'd like so could we talk a bit about the layer cake model of dependencies and",
    "start": "1397440",
    "end": "1403200"
  },
  {
    "text": "boundaries i'm presuming that since each service has its own logic for reacting to events you need to",
    "start": "1403200",
    "end": "1408799"
  },
  {
    "text": "ensure that each layer only modifies its own resources so i got that right",
    "start": "1408799",
    "end": "1414080"
  },
  {
    "text": "absolutely this is like we call it the single writer principle and it's kind of",
    "start": "1414080",
    "end": "1420000"
  },
  {
    "text": "the reason anything works at all and i happen to know because you tweeted me yesterday about it that that doesn't",
    "start": "1420000",
    "end": "1426799"
  },
  {
    "text": "always quite work out as planned let's talk about that yeah okay so",
    "start": "1426799",
    "end": "1432080"
  },
  {
    "text": "actually we have a story to share i don't know if the effect was part of this incident or not",
    "start": "1432080",
    "end": "1437840"
  },
  {
    "text": "um basically we when we started rolling out this model and we're kind of making",
    "start": "1437840",
    "end": "1444000"
  },
  {
    "text": "modifications to the way we write our connectors and while deploying we deleted the",
    "start": "1444000",
    "end": "1449679"
  },
  {
    "text": "division connector in the development environment and",
    "start": "1449679",
    "end": "1455760"
  },
  {
    "text": "basically the service that owns it the connect service like one of the things it did as part of being deleted is",
    "start": "1455760",
    "end": "1461360"
  },
  {
    "text": "discover hey i'm the last thing that has been using this kafka cluster let's delete the kafka cluster and it sends an",
    "start": "1461360",
    "end": "1467200"
  },
  {
    "text": "api request to delete the cover cluster luckily it didn't work but that kind of",
    "start": "1467200",
    "end": "1472240"
  },
  {
    "text": "demonstrates how important it is to really define which service owns what responsibility like if you are",
    "start": "1472240",
    "end": "1479039"
  },
  {
    "text": "an upstream service you don't really get to delete stuff that belongs to downstream services you can only delete",
    "start": "1479039",
    "end": "1485360"
  },
  {
    "text": "your stuff and publish an event that says hey i deleted my stuff maybe you guys want to",
    "start": "1485360",
    "end": "1492640"
  },
  {
    "text": "do something but then the downstream services will have their own logic and they will decide if",
    "start": "1492640",
    "end": "1498400"
  },
  {
    "text": "they want to actually delete something as a result or maybe not do anything at all and ignore the event",
    "start": "1498400",
    "end": "1506320"
  },
  {
    "text": "yeah i'm glad we caught it to development though it would have been quite disastrous information",
    "start": "1506480",
    "end": "1511760"
  },
  {
    "text": "excellent thank you yeah [Music]",
    "start": "1511760",
    "end": "1516909"
  },
  {
    "text": "sorry somebody in the chat asked about the uh the frameworks and how does it compare to confluent cloud and why don't",
    "start": "1517520",
    "end": "1522720"
  },
  {
    "text": "we take that as a dependency on our control plane i think i can give a little more light into that so if you",
    "start": "1522720",
    "end": "1528159"
  },
  {
    "text": "really look at it uh what we get out of those frameworks is what we have in kafka already",
    "start": "1528159",
    "end": "1534320"
  },
  {
    "text": "and in kafka we have a dependency for the communication between our control plane to satellites having these",
    "start": "1534320",
    "end": "1539600"
  },
  {
    "text": "additional frameworks is gonna be one more dependency for us to worry about and like by using device um and like",
    "start": "1539600",
    "end": "1546480"
  },
  {
    "text": "existing relational databases we can get those those features right into our control plane without taking any additional dependencies that's the",
    "start": "1546480",
    "end": "1552159"
  },
  {
    "text": "biggest takeaway like why we did not go with an existing framework and uh the",
    "start": "1552159",
    "end": "1557279"
  },
  {
    "text": "other question was like how does it compare with like kafka like kafka is like even streaming and that is just",
    "start": "1557279",
    "end": "1563360"
  },
  {
    "text": "very very specific frameworks like happy to use it in your control plane might need more work but go for it",
    "start": "1563360",
    "end": "1571360"
  },
  {
    "text": "there's a question in the chat from uh nicholas here that says in terms of resiliency how do you react or manage",
    "start": "1571360",
    "end": "1577919"
  },
  {
    "text": "the outage of the central control plane basically it's one of our least",
    "start": "1577919",
    "end": "1583679"
  },
  {
    "text": "impactful incidents because all everything that exists keeps on",
    "start": "1583679",
    "end": "1589120"
  },
  {
    "text": "working right so if you have a kafka and you depend on it for your architecture like if this is not like",
    "start": "1589120",
    "end": "1596080"
  },
  {
    "text": "your own kafka is not going away that's kind of right on the letter plan and so we have a control penalty which",
    "start": "1596080",
    "end": "1602320"
  },
  {
    "text": "we may post in you know status page hey you now cannot create your clusters or",
    "start": "1602320",
    "end": "1608640"
  },
  {
    "text": "you now cannot expand your cluster and it's kind of sad but if you cannot create new clusters for an",
    "start": "1608640",
    "end": "1615440"
  },
  {
    "text": "hour usually nobody really is mad at us i mean there'll be yeah",
    "start": "1615440",
    "end": "1620559"
  },
  {
    "text": "tickets but yeah yes we would want to go into multi-cloud and that's one of the principles we also",
    "start": "1620559",
    "end": "1626159"
  },
  {
    "text": "wanted to follow because we see ourselves in multi-clouds and for us we want like a",
    "start": "1626159",
    "end": "1631440"
  },
  {
    "text": "a script that we can just run and get our control pin up that's what that's one of the reasons why we have these principles going in the future",
    "start": "1631440",
    "end": "1638559"
  },
  {
    "text": "interesting so when you have a control plane in aws and gcp we can use kafka to",
    "start": "1638559",
    "end": "1643679"
  },
  {
    "text": "replicate the events back and forth yep that would be fun",
    "start": "1643679",
    "end": "1649919"
  },
  {
    "text": "another question in the chat here which is are there specific patterns that the micro services follow in order to persist data to its own database and",
    "start": "1651440",
    "end": "1658559"
  },
  {
    "text": "then safely publish ah sorry it's scrolling as i'm trying to read it and safely publish this",
    "start": "1658559",
    "end": "1664240"
  },
  {
    "text": "associated event as this publishing can fail after persisting to the database",
    "start": "1664240",
    "end": "1670799"
  },
  {
    "text": "so basically it's a distributed transaction problem i guess it's not a disabled transaction problem",
    "start": "1670960",
    "end": "1676480"
  },
  {
    "text": "because that's the exact thing that's because we use the outbox pattern so basically we persist to a database",
    "start": "1676480",
    "end": "1684399"
  },
  {
    "text": "and it has a relational database guarantees right so i do commit and that's it the event is guaranteed to be",
    "start": "1684399",
    "end": "1690720"
  },
  {
    "text": "persisted in the database no matter what and then we have the busine guarantees is that no matter what",
    "start": "1690720",
    "end": "1696960"
  },
  {
    "text": "happens the event will eventually make it from the database to kafka and prosper has its own guarantees that",
    "start": "1696960",
    "end": "1703120"
  },
  {
    "text": "after an event was published to kafka no matter what happens the consumers will eventually see it so",
    "start": "1703120",
    "end": "1709840"
  },
  {
    "text": "yes like if some stuff that's wrong it may be delayed for a while and i know that if you create a cluster in our",
    "start": "1709840",
    "end": "1716799"
  },
  {
    "text": "cloud it tells you yeah the cluster will be up in like 24 hours and everyone's like 24 hours it's insane we gave a very",
    "start": "1716799",
    "end": "1723840"
  },
  {
    "text": "large time span that's kind of like we have a chain of events and we know that each component",
    "start": "1723840",
    "end": "1730559"
  },
  {
    "text": "has really strong guarantees uh which is not like distributed transactions",
    "start": "1730559",
    "end": "1735840"
  },
  {
    "text": "where you actually need two separate things to kind of do two phase commits in order to have any kind of guarantees",
    "start": "1735840",
    "end": "1744639"
  },
  {
    "text": "you mentioned during the talk you mentioned the satellite abstraction briefly can you talk a bit more about it what are the satellites",
    "start": "1744799",
    "end": "1751760"
  },
  {
    "text": "made up of what's kind of in there uh sure i can dig that uh it's kind of",
    "start": "1751760",
    "end": "1757919"
  },
  {
    "text": "easy because satellites are basically are our data planes so imagine i don't know aws",
    "start": "1757919",
    "end": "1765760"
  },
  {
    "text": "u.s west 2. any uh anything to spin up there is going to be a satellite so any k8 that",
    "start": "1765760",
    "end": "1771600"
  },
  {
    "text": "gets spun up there is a satellite we call it satellite because it kind of directly does operations with customers",
    "start": "1771600",
    "end": "1778000"
  },
  {
    "text": "and the the orchestration of satellite is done through control plane so any io creation deletion expansion any of those",
    "start": "1778000",
    "end": "1784559"
  },
  {
    "text": "happen through control plane but once it gets there it directly communicates to the customers of io",
    "start": "1784559",
    "end": "1791120"
  },
  {
    "text": "so that's what the satellite basically is and then is that escaped to a single",
    "start": "1791120",
    "end": "1797200"
  },
  {
    "text": "kubernetes cluster uh so",
    "start": "1797200",
    "end": "1803200"
  },
  {
    "text": "is there a question like is satellite a single differential cluster yes no like we can have multiple of those",
    "start": "1803200",
    "end": "1810960"
  },
  {
    "text": "can you talk a bit more about the data plane um what does the kafka data plan",
    "start": "1815440",
    "end": "1820559"
  },
  {
    "text": "say consist of what does where is the kafka development",
    "start": "1820559",
    "end": "1825919"
  },
  {
    "text": "installed or sorry i'm missing something um so what's the what's the scope of it",
    "start": "1825919",
    "end": "1832320"
  },
  {
    "text": "and what does it what's the data plane made up of yeah the data plan is made up of several",
    "start": "1832320",
    "end": "1838080"
  },
  {
    "text": "thousand kaffir clusters is like close to a thousand k sql",
    "start": "1838080",
    "end": "1843120"
  },
  {
    "text": "clusters several thousand connectors and basically this is what our customers",
    "start": "1843120",
    "end": "1848159"
  },
  {
    "text": "are paying for us for so this is like it's our own kafka and that we are running and it's a managed",
    "start": "1848159",
    "end": "1854799"
  },
  {
    "text": "service so you go to our site you spin up a kafka you give us money we give you a",
    "start": "1854799",
    "end": "1861120"
  },
  {
    "text": "kafka cluster in return and we run it for you so the entire control plan is to",
    "start": "1861120",
    "end": "1866240"
  },
  {
    "text": "allow us to run all those cover clusters for our customers and because our customers are",
    "start": "1866240",
    "end": "1871679"
  },
  {
    "text": "in aws gcp azure is a we kind of have to spin up kafka clusters there they have",
    "start": "1871679",
    "end": "1876799"
  },
  {
    "text": "different security requirements some of them want to be on the public internet some of them want to be on a vpc some of",
    "start": "1876799",
    "end": "1882240"
  },
  {
    "text": "them like private link so that's why we can have to kind of get creative with which kind of kubernetes cluster each",
    "start": "1882240",
    "end": "1888399"
  },
  {
    "text": "customer get if you are okay with public internet you will be in the public kubernetes cluster",
    "start": "1888399",
    "end": "1894000"
  },
  {
    "text": "that has a lot of other clusters on it and that's why a satellite can have more than one kafka cluster",
    "start": "1894000",
    "end": "1900880"
  },
  {
    "text": "on the other hand if you want vpc peering you will have your own vpc with",
    "start": "1900880",
    "end": "1906399"
  },
  {
    "text": "your own kubernetes your own kafka and if you have a sequel your own sequel",
    "start": "1906399",
    "end": "1911519"
  },
  {
    "text": "kind of vpc paired through to your cluster and the whole thing is",
    "start": "1911519",
    "end": "1918480"
  },
  {
    "text": "that our control plan is just as similar to manage all of this our control panel is not really the thing we're selling to",
    "start": "1918480",
    "end": "1924559"
  },
  {
    "text": "customers it's kind of like the best case scenario it's so easy to use you'll ignore it completely",
    "start": "1924559",
    "end": "1931440"
  },
  {
    "text": "also if you go back to the layer cake that's exactly how your data plane is going to look like you'll have a site",
    "start": "1931440",
    "end": "1937120"
  },
  {
    "text": "you'll have a kubernetes pkc lkcs and that's what's going referring to the thousands of kafkas are basically those",
    "start": "1937120",
    "end": "1942880"
  },
  {
    "text": "customer facing kafka and that's like literally the the side section of data plane in the",
    "start": "1942880",
    "end": "1948799"
  },
  {
    "text": "control plane we just manage all of that through control pin but that's how it looks as in reality",
    "start": "1948799",
    "end": "1955440"
  },
  {
    "text": "thank you um how do you orchestrate multiple uh kubernetes resource deployment are you",
    "start": "1955519",
    "end": "1961200"
  },
  {
    "text": "using uh federated mechanisms for that",
    "start": "1961200",
    "end": "1965600"
  },
  {
    "text": "oh i think we have our own operator actually i yeah yeah right like we have our own",
    "start": "1967760",
    "end": "1973919"
  },
  {
    "text": "operative that was that's what we used to have our own operator and then we also",
    "start": "1973919",
    "end": "1979360"
  },
  {
    "text": "run on managed kubernetes so eks aks and all that",
    "start": "1979360",
    "end": "1984399"
  },
  {
    "text": "and then we in order because every managed kubernetes is different we kind of created our own kubernetes controller",
    "start": "1984399",
    "end": "1990880"
  },
  {
    "text": "on top of that so internally if i have some logic that requires a new kubernetes cluster",
    "start": "1990880",
    "end": "1997279"
  },
  {
    "text": "i publish an event that says i am going to use some more resources the",
    "start": "1997279",
    "end": "2003039"
  },
  {
    "text": "kubernetes controller gets the event and it says oh when we need more resources",
    "start": "2003039",
    "end": "2008320"
  },
  {
    "text": "and it knows oh we're going to want resources on azure let me talk to the aks and create those",
    "start": "2008320",
    "end": "2015440"
  },
  {
    "text": "resources handle all the retries all the right limiting everything that's required and eventually gwen will get",
    "start": "2015440",
    "end": "2022399"
  },
  {
    "text": "the resources that she asked for so we kind of abstract all of it that's exactly how we created this lyric we",
    "start": "2022399",
    "end": "2028799"
  },
  {
    "text": "abstract those low-level combinations with users from",
    "start": "2028799",
    "end": "2034240"
  },
  {
    "text": "like engineers who only worry about kafka i guess",
    "start": "2034240",
    "end": "2039360"
  },
  {
    "text": "um there's another question in the chat which is do you somehow have a global or federated monitoring of all the kafka",
    "start": "2040320",
    "end": "2046000"
  },
  {
    "text": "clusters yeah our monitoring is that's a",
    "start": "2046000",
    "end": "2052000"
  },
  {
    "text": "pain a bit painful so we use a data dog to basically monitor all of it",
    "start": "2052000",
    "end": "2059040"
  },
  {
    "text": "but we also have our own metrics pipeline uh for more advanced analytics on our",
    "start": "2059040",
    "end": "2064960"
  },
  {
    "text": "metrics so we have basically that's something that we it would be its own architecture talk",
    "start": "2064960",
    "end": "2071919"
  },
  {
    "text": "how do we actually observe those thousands of clusters because we've written low collections metrics",
    "start": "2071919",
    "end": "2078398"
  },
  {
    "text": "collection like we just did a lot of telemetry work on its own right",
    "start": "2078399",
    "end": "2083839"
  },
  {
    "text": "and yeah we need to invite other people from another team to talk about",
    "start": "2083839",
    "end": "2089280"
  },
  {
    "text": "because like our observability architecture is kind of cool on its own sounds like that's a whole separate",
    "start": "2089280",
    "end": "2096000"
  },
  {
    "text": "talk maybe for another q a exactly exactly because like you can imagine that collecting events from thousands of",
    "start": "2096000",
    "end": "2101920"
  },
  {
    "text": "clusters is its own very challenging problem",
    "start": "2101920",
    "end": "2107599"
  },
  {
    "text": "sneak peek we use kafka really",
    "start": "2108079",
    "end": "2114000"
  },
  {
    "text": "um uh there was a question earlier which i missed which was um do you see the need for a service mesh for",
    "start": "2114640",
    "end": "2120720"
  },
  {
    "text": "service to service communication uh i think i can take that maybe yeah i",
    "start": "2120720",
    "end": "2127119"
  },
  {
    "text": "think right now uh a real proxies at the at the",
    "start": "2127119",
    "end": "2132640"
  },
  {
    "text": "site where where we kind of have to do all of this these kind of routing principles uh within the",
    "start": "2132640",
    "end": "2140079"
  },
  {
    "text": "data plane only at the side with on our control plane i think we have only a handful of services i think",
    "start": "2140079",
    "end": "2146640"
  },
  {
    "text": "service mesh to me that's yet another dependency and right now it's still manageable it's not even crossed",
    "start": "2146640",
    "end": "2152720"
  },
  {
    "text": "hundreds of services on the control plane yet uh so to answer that question maybe in the future but i don't think we",
    "start": "2152720",
    "end": "2159040"
  },
  {
    "text": "need it right now i can even say that what we've implemented is so much closer to data",
    "start": "2159040",
    "end": "2165119"
  },
  {
    "text": "mesh than it is to service mesh because of the way that our",
    "start": "2165119",
    "end": "2170240"
  },
  {
    "text": "services communicate more via persistent events than via",
    "start": "2170240",
    "end": "2175760"
  },
  {
    "text": "grpc and so um yeah i mean i can't say that we never",
    "start": "2175760",
    "end": "2181119"
  },
  {
    "text": "have a service mesh but i think we kind of went in a slightly different direction",
    "start": "2181119",
    "end": "2187760"
  },
  {
    "text": "okay we are getting towards the end of our time um i'll try and throw one more question in a second but um are you both",
    "start": "2187760",
    "end": "2195119"
  },
  {
    "text": "able to join the zoom chat for a few minutes after it's going i know you're doing the panel",
    "start": "2195119",
    "end": "2201200"
  },
  {
    "text": "thank you very much indeed there's a couple more questions in here um do you have a need where you have to",
    "start": "2204960",
    "end": "2211280"
  },
  {
    "text": "rebuild the entire control plane or data plane in the events for major vulnerability",
    "start": "2211280",
    "end": "2217520"
  },
  {
    "text": "that's a very good one um rebuilding the entire data plane",
    "start": "2217599",
    "end": "2224480"
  },
  {
    "text": "i mean it's yeah we tried it's time-consuming",
    "start": "2224560",
    "end": "2230079"
  },
  {
    "text": "i think the same is true yeah",
    "start": "2232160",
    "end": "2237520"
  },
  {
    "text": "we do have to build our data plane when a cloud provider starts a new region but",
    "start": "2237520",
    "end": "2242640"
  },
  {
    "text": "as one said it's kind of time consuming and yeah we never had a need for that on the",
    "start": "2242640",
    "end": "2248079"
  },
  {
    "text": "control plane but yeah we had to upgrade our entire data plan",
    "start": "2248079",
    "end": "2253280"
  },
  {
    "text": "about i think we managed to do it in three days yeah and but",
    "start": "2253280",
    "end": "2259440"
  },
  {
    "text": "like and i mean yeah it's intense but",
    "start": "2259440",
    "end": "2264560"
  },
  {
    "text": "definitely do but if we need to rebuild the whole control plane i think that's a lot easier right because that's a big",
    "start": "2264560",
    "end": "2271040"
  },
  {
    "text": "word the actually the lyrica first yeah",
    "start": "2271040",
    "end": "2276560"
  },
  {
    "text": "so and we do it every once in a while right when we decide to have like a new",
    "start": "2276560",
    "end": "2281599"
  },
  {
    "text": "testing environment yep yep all our upgrades do follow that so yeah",
    "start": "2281599",
    "end": "2288000"
  },
  {
    "text": "uh maybe there's time for one more question um so if you have a global customer who operates out of the us and",
    "start": "2288400",
    "end": "2294240"
  },
  {
    "text": "eu regions are you able to segregate and keep the eu workloads in the eu and the us workloads in the us",
    "start": "2294240",
    "end": "2300320"
  },
  {
    "text": "oh of course i mean that would be not only really weird to mix them up also",
    "start": "2300320",
    "end": "2307680"
  },
  {
    "text": "quite illegal i believe yeah yeah i mean obviously every resource",
    "start": "2307680",
    "end": "2314079"
  },
  {
    "text": "when it's like at the highest level when it gets created it gets created within a",
    "start": "2314079",
    "end": "2319200"
  },
  {
    "text": "cloud or within a region right like and then there is literally and this is information that we",
    "start": "2319200",
    "end": "2326480"
  },
  {
    "text": "maintain consistent all over the place like this will be and we also build differently so probably we'll have our",
    "start": "2326480",
    "end": "2332560"
  },
  {
    "text": "own finance people really upset if you mix anything up yeah the details transfer cost",
    "start": "2332560",
    "end": "2339119"
  },
  {
    "text": "everything would i don't know what will happen to that yeah definitely",
    "start": "2339119",
    "end": "2344480"
  },
  {
    "text": "i mean you basically get assigned to a kubernetes resource in your region and networking",
    "start": "2344480",
    "end": "2350480"
  },
  {
    "text": "origin and everything will be in your region exactly",
    "start": "2350480",
    "end": "2355320"
  },
  {
    "text": "yes brilliant thank you very much indeed we are at time as i say vivek will be in the zoom room immediately after this and",
    "start": "2356640",
    "end": "2362800"
  },
  {
    "text": "then we have a panel with wes rice talking some more about some event driven architectures which glenn",
    "start": "2362800",
    "end": "2368960"
  },
  {
    "text": "will be joining us on say thank you both very much indeed again fantastic talk really enjoyed that",
    "start": "2368960",
    "end": "2375220"
  },
  {
    "text": "[Music]",
    "start": "2375220",
    "end": "2381030"
  },
  {
    "text": "you",
    "start": "2385359",
    "end": "2387440"
  }
]