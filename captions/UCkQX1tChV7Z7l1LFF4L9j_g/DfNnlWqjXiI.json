[
  {
    "text": "it's really nice to be back in London and to see so many familiar faces and also lots of new people which is great",
    "start": "4530",
    "end": "10380"
  },
  {
    "text": "and then I'm just overwhelmed by the turnout so thank you so as Alec says this talk is records and CEO types my",
    "start": "10380",
    "end": "17370"
  },
  {
    "text": "name's Ben Evans I use he/him pronouns and because I work for a public company I have to show you this slide and what",
    "start": "17370",
    "end": "25050"
  },
  {
    "text": "it means is despite the fact that I don't work for a cult and don't even have a commit pick on OpenJDK you",
    "start": "25050",
    "end": "30090"
  },
  {
    "text": "shouldn't take anything I'm about to say about the future of Java at all seriously especially if you're going to make financial decisions based upon it",
    "start": "30090",
    "end": "36480"
  },
  {
    "text": "which I'm sure many of you were so for those who have not met me before I'm",
    "start": "36480",
    "end": "42809"
  },
  {
    "text": "principal engineer and architect for JVM technologies at New Relic based in sunny Barcelona which is lovely",
    "start": "42809",
    "end": "49710"
  },
  {
    "text": "before that I co-founded a company called J clarity with the aforementioned Martin Verburg which was based out of",
    "start": "49710",
    "end": "55379"
  },
  {
    "text": "the lung and Java community originally and last year we sold it to Microsoft so that was quite an eventful few months",
    "start": "55379",
    "end": "62989"
  },
  {
    "text": "yeah if you wanna hear about that coming by me at there later on before J clarity",
    "start": "62989",
    "end": "68190"
  },
  {
    "text": "I was chief architect félicité relatives at Deutsche Bank and before that at Morgan Stanley where I did a number of",
    "start": "68190",
    "end": "74520"
  },
  {
    "text": "things including the Google IPO again those are bar stories if you want to hear them like - I'm also kind of known",
    "start": "74520",
    "end": "81000"
  },
  {
    "text": "for for some of my work in the community I'm a Java champion if you know what that is I'm Java one rock star speaker",
    "start": "81000",
    "end": "87810"
  },
  {
    "text": "which I probably should rename given that Java one hasn't existed for a number of years now and younger people",
    "start": "87810",
    "end": "94200"
  },
  {
    "text": "in the audience might not even know what it is so I should probably change that part of my confess slide I also served",
    "start": "94200",
    "end": "100229"
  },
  {
    "text": "on the the Java community process Executive Committee which is the body that makes when your Java standards for",
    "start": "100229",
    "end": "105240"
  },
  {
    "text": "six years and then during my time living in London I was part the organizing team",
    "start": "105240",
    "end": "110850"
  },
  {
    "text": "for the London Java community and co-founded a product a project that you might have heard of called adopt open",
    "start": "110850",
    "end": "116670"
  },
  {
    "text": "JDK okay so with might that's probably talking enough about me for the rest of",
    "start": "116670",
    "end": "122609"
  },
  {
    "text": "the rest of the talk so instead I want to talk about something which I know is very dear to everyone's hearts I'm",
    "start": "122609",
    "end": "129600"
  },
  {
    "text": "talking of course about enums Ananse enums enums enums enums okay so",
    "start": "129600",
    "end": "142069"
  },
  {
    "text": "now everyone's looking at me and they're thinking why on earth has been just said",
    "start": "142069",
    "end": "147470"
  },
  {
    "text": "the word enums six times in a row we're talking about records and seal types",
    "start": "147470",
    "end": "153769"
  },
  {
    "text": "aren't we well we are so why enums well there's a general principle and there's",
    "start": "153769",
    "end": "159680"
  },
  {
    "text": "a specific principle and I'm going to talk about the general principle first the general principle is part of",
    "start": "159680",
    "end": "167750"
  },
  {
    "text": "language evolution is that patterns in one language become language features in",
    "start": "167750",
    "end": "174290"
  },
  {
    "text": "languages that follow okay think about that a pattern that we all know",
    "start": "174290",
    "end": "181099"
  },
  {
    "text": "especially non-rigid orientated language it's the idea that you have a small group of classes that somehow operate to",
    "start": "181099",
    "end": "187459"
  },
  {
    "text": "provide a reusable and recognizable language construct so my my thesis is",
    "start": "187459",
    "end": "194480"
  },
  {
    "text": "that over time languages which obviously belong to the community of languages",
    "start": "194480",
    "end": "199819"
  },
  {
    "text": "existed beforehand are able to take things which were encoded as patterns and turn them into part of the language",
    "start": "199819",
    "end": "206450"
  },
  {
    "text": "core so what do I mean yeah that seems like a pretty bold statement I might have to justify so I mean things like me",
    "start": "206450",
    "end": "213200"
  },
  {
    "text": "tables in C becoming the virtual keyword in C++ hands up if we've got C++",
    "start": "213200",
    "end": "218510"
  },
  {
    "text": "programmers in the room anyone that's know some C++ so a few people here know what I'm talking about the idea of a",
    "start": "218510",
    "end": "223790"
  },
  {
    "text": "table of function pointers turning into the virtual keyword and of course in Java we've taken this one step further",
    "start": "223790",
    "end": "230569"
  },
  {
    "text": "we don't have a virtual keyword anymore virtual has become so much part of the the language landscape that it actually",
    "start": "230569",
    "end": "237290"
  },
  {
    "text": "disappears from view which is the the stage of evolution which is beyond the one I'm talking about here from the",
    "start": "237290",
    "end": "243739"
  },
  {
    "text": "language to a language feature to being just so much part of the woodwork and so much part of the background that you",
    "start": "243739",
    "end": "249349"
  },
  {
    "text": "cease to even see it as a feature never mind a pattern anymore the I traitor",
    "start": "249349",
    "end": "254810"
  },
  {
    "text": "pattern in C++ becomes the electorate to interface in Java if you who read the old gang of four patterns book you'll",
    "start": "254810",
    "end": "260959"
  },
  {
    "text": "find that patterns like I traitor in there and you for younger people it's you look at it with fresh eyes and you think why are we talking about this wise",
    "start": "260959",
    "end": "267230"
  },
  {
    "text": "it's just a thing it's just a part of the library it's just become part of the landscape and of course you knew I'd get",
    "start": "267230",
    "end": "274430"
  },
  {
    "text": "back to enums so the enum approached in C++ which of course is just a horrible",
    "start": "274430",
    "end": "279860"
  },
  {
    "text": "hack over integers well in Java it's quite a bit more to it than that so",
    "start": "279860",
    "end": "287300"
  },
  {
    "text": "that's the general principle I could just start a bunch of others but I thought that those were the closest to the surface to try to at least provide",
    "start": "287300",
    "end": "293360"
  },
  {
    "text": "some sort of anecdotal justification for the point that I'm trying to impress upon you here but then of course there's",
    "start": "293360",
    "end": "299840"
  },
  {
    "text": "actually the specifics about Jarvis enums individually Java enums are a",
    "start": "299840",
    "end": "305840"
  },
  {
    "text": "restricted form of class they have semantics that are defined by a pattern",
    "start": "305840",
    "end": "311210"
  },
  {
    "text": "that pattern we might call finitely many instances and notice the way that I've",
    "start": "311210",
    "end": "318950"
  },
  {
    "text": "framed this the semantics are defined by a pattern from the pattern comes compact",
    "start": "318950",
    "end": "325220"
  },
  {
    "text": "syntax and it's that way around the semantics are defined by the pattern the",
    "start": "325220",
    "end": "331340"
  },
  {
    "text": "syntax comes from the the semantics ok so now let's actually go to my first",
    "start": "331340",
    "end": "339920"
  },
  {
    "text": "demo of the day given the fact I found a boiled sweet that had been through the washing machine in my jeans just before",
    "start": "339920",
    "end": "345530"
  },
  {
    "text": "going on and had an image with a pigeon and bad things come in threes I think the chance is that all of my demos are",
    "start": "345530",
    "end": "351350"
  },
  {
    "text": "going to go successfully today are basically zero so just please bear with me when they inevitably go wrong",
    "start": "351350",
    "end": "358870"
  },
  {
    "text": "so how is my font size bigger okay cool",
    "start": "365450",
    "end": "371680"
  },
  {
    "text": "how's that is that better okay back braces yes so what do we got",
    "start": "371680",
    "end": "379520"
  },
  {
    "text": "here okay well let's take I don't know that set of colors maybe so have a",
    "start": "379520",
    "end": "388460"
  },
  {
    "text": "simple color enum yeah pretty much the simplest thing you could think of when doing an enum and because I have to work",
    "start": "388460",
    "end": "396830"
  },
  {
    "text": "with multiple Joe decays let's just use some Java 14 why not",
    "start": "396830",
    "end": "402110"
  },
  {
    "text": "okay so now let's just go back so good",
    "start": "402110",
    "end": "410889"
  },
  {
    "text": "and so does the java p tool to disassemble it no one scared of a bit of bytecode are they good so what have we",
    "start": "420780",
    "end": "428500"
  },
  {
    "text": "got well we can see that each of the individual names have been turned into",
    "start": "428500",
    "end": "434229"
  },
  {
    "text": "public static final fields each of the the correct type we have a thing called",
    "start": "434229",
    "end": "439750"
  },
  {
    "text": "values which gets back this field dollar values which has an array of color in it",
    "start": "439750",
    "end": "445210"
  },
  {
    "text": "that's actually a private field so it doesn't show up in this particular view but then we we clone that to return this",
    "start": "445210",
    "end": "451690"
  },
  {
    "text": "as a as a value field there's there's an ancient region in there for why the you do it that way to do a serialization but",
    "start": "451690",
    "end": "458650"
  },
  {
    "text": "I shan't trouble you with that you also have a color value of which you use to to look up this and notice that it",
    "start": "458650",
    "end": "465190"
  },
  {
    "text": "there's a class called java.lang enum up here which every enum extends now if you",
    "start": "465190",
    "end": "470919"
  },
  {
    "text": "don't try and extend this class directly the compiler won't let you what else",
    "start": "470919",
    "end": "476949"
  },
  {
    "text": "have we got to say in here okay and then we've got this static initializer block down here which sets up and basically",
    "start": "476949",
    "end": "482889"
  },
  {
    "text": "initializes each of the enum constants which now exist as public static fields okay that's a lot of generated code a",
    "start": "482889",
    "end": "492400"
  },
  {
    "text": "lot of stuff which has been provided by well that many characters so decompiling",
    "start": "492400",
    "end": "502599"
  },
  {
    "text": "it actually shows us that we already have language constructs and Java where stuff is being auto-generated for us by",
    "start": "502599",
    "end": "508750"
  },
  {
    "text": "the compiler so when I come on to show you some things with with records in",
    "start": "508750",
    "end": "514000"
  },
  {
    "text": "particular this is not a and a new idea that we have the compiler doing significant work for us okay it's going",
    "start": "514000",
    "end": "522849"
  },
  {
    "text": "to pause there that probably is enough about enums for right now although",
    "start": "522849",
    "end": "528910"
  },
  {
    "text": "spoiler I'll be coming back to talk about them in a bit",
    "start": "528910",
    "end": "533279"
  },
  {
    "text": "okay so now introduce something you might not have been aware of in OpenJDK",
    "start": "535600",
    "end": "542020"
  },
  {
    "text": "which is sum which is this thing which is project amber hands up if you know about project amber okay Wow I would",
    "start": "542020",
    "end": "550540"
  },
  {
    "text": "have expected lots lots more people to know about it so expect about 5050 in fact and I didn't get close to that so",
    "start": "550540",
    "end": "558280"
  },
  {
    "text": "which case it might be good idea to ask this at this point hands up if you were running Java 11 in production okay",
    "start": "558280",
    "end": "566200"
  },
  {
    "text": "better than expected just out of interest because I'm curious about these",
    "start": "566200",
    "end": "572380"
  },
  {
    "text": "things is anyone running an on LTS version of Java so 13 or 12 or 10 or 9",
    "start": "572380",
    "end": "581010"
  },
  {
    "text": "okay you're some of the first people I've ever seen run on LTS in production",
    "start": "581010",
    "end": "586600"
  },
  {
    "text": "everybody's running either either 8 or 11 apart from apart from you guys currently that's cool I'll have a chat",
    "start": "586600",
    "end": "591790"
  },
  {
    "text": "to you later I'm curious so project amber is one of the the",
    "start": "591790",
    "end": "597070"
  },
  {
    "text": "projects which has been happening in open JDK to try to explore research",
    "start": "597070",
    "end": "602620"
  },
  {
    "text": "directions and there are several of these things out there the one which you might have heard more than amber is",
    "start": "602620",
    "end": "607630"
  },
  {
    "text": "project Valhalla who's who's heard of project Valhalla hands up yeah I assume everybody everyone's about",
    "start": "607630",
    "end": "613810"
  },
  {
    "text": "in line types and in line passage and that that's kind of the the big bombastic boil the ocean change the",
    "start": "613810",
    "end": "620230"
  },
  {
    "text": "entire world project now the goals of project amber a rather more modest also",
    "start": "620230",
    "end": "627550"
  },
  {
    "text": "it at first appears so project amber is about trying to find smaller in some",
    "start": "627550",
    "end": "634570"
  },
  {
    "text": "sense features which are about productivity and which are core to the Java language itself there's very little",
    "start": "634570",
    "end": "641500"
  },
  {
    "text": "VM level change necessary for these things there's a bit of stuff in the compiler there's a bit of stuff in the",
    "start": "641500",
    "end": "648400"
  },
  {
    "text": "class file format but very little in the type system and almost nothing in the react",
    "start": "648400",
    "end": "653580"
  },
  {
    "text": "so that means that you can you can try to deliver your large goal by breaking",
    "start": "653580",
    "end": "659650"
  },
  {
    "text": "it apart into smaller pieces and if you build one feature on top of the other in",
    "start": "659650",
    "end": "664660"
  },
  {
    "text": "the right way you might get to some quite surprising places the old saying about you might build a",
    "start": "664660",
    "end": "670630"
  },
  {
    "text": "grow a mighty oak from a tiny acorn or in this case a sequence of delivered tiny acorns which are part of a",
    "start": "670630",
    "end": "678130"
  },
  {
    "text": "concerted set of deliveries to build up some some much larger ideas okay so that's project Ambler what else well",
    "start": "678130",
    "end": "686140"
  },
  {
    "text": "let's talk about records what are they okay and this is by analogy with enums and you'll hopefully start to see now",
    "start": "686140",
    "end": "692020"
  },
  {
    "text": "why I spent the first 10 to 15 minutes talking about enums we want a first-class support for modeling a data",
    "start": "692020",
    "end": "699010"
  },
  {
    "text": "only aggregate there's a pattern here the pattern is defining some semantics",
    "start": "699010",
    "end": "706240"
  },
  {
    "text": "for us the pattern is called the state the whole state are nothing but the state which sounds you know remarkably",
    "start": "706240",
    "end": "713700"
  },
  {
    "text": "totalitarian so maybe we should find a better name for it we could call it the data carrier pattern what it means is",
    "start": "713700",
    "end": "720400"
  },
  {
    "text": "that there is a sub setting of classes a",
    "start": "720400",
    "end": "725610"
  },
  {
    "text": "reduced form of a class where we want to make it clear that nothing really happens except that the instances of the",
    "start": "725610",
    "end": "733900"
  },
  {
    "text": "class are totally and completely defined by the state that they carry and they",
    "start": "733900",
    "end": "738910"
  },
  {
    "text": "have no real further semantics or further behavior other than that okay",
    "start": "738910",
    "end": "744570"
  },
  {
    "text": "turns out that this also closes a rather annoying gap in Javas type system which",
    "start": "744570",
    "end": "750370"
  },
  {
    "text": "we've had since the very beginning and then notice that we our next goal is to",
    "start": "750370",
    "end": "758170"
  },
  {
    "text": "provide a language level syntax for this pattern that we came from up here and finally a notice of it's at the bottom",
    "start": "758170",
    "end": "764260"
  },
  {
    "text": "of this list and this is kind of in descending order of importance it",
    "start": "764260",
    "end": "769660"
  },
  {
    "text": "reduces the class boilerplate okay and this is actually a Java example of a",
    "start": "769660",
    "end": "775750"
  },
  {
    "text": "very important principle in programming language design wordless law hands up if",
    "start": "775750",
    "end": "781510"
  },
  {
    "text": "you've heard of Philip Wadler one of the originators of Haskell yeah modulus law has this this idea",
    "start": "781510",
    "end": "786760"
  },
  {
    "text": "emotionally intends to give debate on a language feature increases so the debate gets more intense and more vicious more",
    "start": "786760",
    "end": "793180"
  },
  {
    "text": "unpleasant the further down this list you go semantics then syntax then lexical syntax then",
    "start": "793180",
    "end": "800170"
  },
  {
    "text": "comments now given that we're Java people I might also put in a new entry here between",
    "start": "800170",
    "end": "805839"
  },
  {
    "text": "lexical syntax and comments multi-line strings a feature which is effectively",
    "start": "805839",
    "end": "812560"
  },
  {
    "text": "trivial but yet which has attracted more debate than anything that I can I could think of recently because I was around",
    "start": "812560",
    "end": "819820"
  },
  {
    "text": "for the Java 7 days I would also put strings and switch here as well and what was point here is that the",
    "start": "819820",
    "end": "825760"
  },
  {
    "text": "reason why this happens the reason why people debate these things more and more as you go down the foot down the scale it's because there are more and more",
    "start": "825760",
    "end": "832510"
  },
  {
    "text": "people who feel competent enough to have an opinion about them at the very high",
    "start": "832510",
    "end": "838329"
  },
  {
    "text": "level highest levels of the language there are very few people who can who can coherently argue about what major",
    "start": "838329",
    "end": "845110"
  },
  {
    "text": "language semantics should look like everybody has an opinion about what comments should look like so the other",
    "start": "845110",
    "end": "853060"
  },
  {
    "text": "thing term for this is called bike shedding so if you ever heard that the earlier bike shedding which really came from the operating system community",
    "start": "853060",
    "end": "859000"
  },
  {
    "text": "whereas in the programming language community we like to call it what was Lawrence done but you know because we",
    "start": "859000",
    "end": "865089"
  },
  {
    "text": "want to talk about boilerplate let's talk about boilerplate it's nice and accessible all the stuff you you hate to",
    "start": "865089",
    "end": "872500"
  },
  {
    "text": "type all the things you don't want to the to strings the hashcode the equals the getters public constructors you know",
    "start": "872500",
    "end": "878620"
  },
  {
    "text": "the list goes on and what do you do well there's really two things you can do you",
    "start": "878620",
    "end": "884260"
  },
  {
    "text": "can either get a new IDE to generate them hands up if you you do that and keep your hand up keep hammer if you",
    "start": "884260",
    "end": "891069"
  },
  {
    "text": "have had a bug in production which caused an outage by not keeping these",
    "start": "891069",
    "end": "896260"
  },
  {
    "text": "things up to date by regenerating them when you know you should have yeah I thought so there always are ok so then",
    "start": "896260",
    "end": "904829"
  },
  {
    "text": "you might think well let's do that solve this problem in another way let's have Lombok yeah the the laughs on the back",
    "start": "904829",
    "end": "913630"
  },
  {
    "text": "of the room tell me that there are also people in here who've been bitten by Lombok and Lombok is really not a good",
    "start": "913630",
    "end": "920139"
  },
  {
    "text": "solution for this because it does some some really terrible things in the way that it's implemented it's extremely clever but the older you get and the",
    "start": "920139",
    "end": "927610"
  },
  {
    "text": "more CD you're hopefully you get as a programmer the less in love you are with clever solutions ok so we need something",
    "start": "927610",
    "end": "933850"
  },
  {
    "text": "new if we're going to get rid of the boilerplate how are we going to do it well let's start with the java cashflow class like this we set it up and notice how",
    "start": "933850",
    "end": "941860"
  },
  {
    "text": "we've got this array we've got a public constructor and notice that we've got an awful lot of repetition here we have a",
    "start": "941860",
    "end": "949269"
  },
  {
    "text": "currency and a field called currency so parameter field method all of which are",
    "start": "949269",
    "end": "956259"
  },
  {
    "text": "doing the same thing they are referring to the same fundamental thing yeah so",
    "start": "956259",
    "end": "963100"
  },
  {
    "text": "what we have is a pattern we are typing doing a lot of typing here to represent the pattern that this thing is just",
    "start": "963100",
    "end": "970629"
  },
  {
    "text": "these things and they're accessed like this and there is no other way of doing it and there is no more semantics other",
    "start": "970629",
    "end": "976329"
  },
  {
    "text": "than those fields fortunately I found some help by the way if you look you",
    "start": "976329",
    "end": "989949"
  },
  {
    "text": "look at the PDF while we're doing this this is not going to look great on the PDF but what we get is this it's legal",
    "start": "989949",
    "end": "999879"
  },
  {
    "text": "at Java 14 syntax in preview mode and we have got rid of all of the boilerplate",
    "start": "999879",
    "end": "1005750"
  },
  {
    "text": "yeah but that's not the important thing remember what I saw the important thing is what we're saying is that those three",
    "start": "1005750",
    "end": "1012660"
  },
  {
    "text": "things are everything which matters about one of those that is nothing more",
    "start": "1012660",
    "end": "1018649"
  },
  {
    "text": "than the sum of these parts or maybe I should say the product of these parts so",
    "start": "1018649",
    "end": "1028110"
  },
  {
    "text": "what are they so if we're concerned with semantics what would our our semantics here so this is kind of backwards I'm",
    "start": "1028110",
    "end": "1036178"
  },
  {
    "text": "showing you the answer before I've shown you really showing you the question but when when Brian and the others on the",
    "start": "1036179",
    "end": "1041428"
  },
  {
    "text": "expert group we're designing it this was the question they started with in the design space what are these things",
    "start": "1041429",
    "end": "1047788"
  },
  {
    "text": "what could a record be and they come up with really four possible alternatives they could be boilerplate reduction yeah",
    "start": "1047789",
    "end": "1055289"
  },
  {
    "text": "they could be and for some people that might have been the right answer but it does kind of violate the what was law",
    "start": "1055289",
    "end": "1060600"
  },
  {
    "text": "but it's cool there can be Java veins hands up if you were really hoping these were going to be Java veins",
    "start": "1060600",
    "end": "1066830"
  },
  {
    "text": "only a few people or at least only a few people that in front of a packed room obviously as",
    "start": "1066830",
    "end": "1073529"
  },
  {
    "text": "you can probably guess the way that I've set this up they're not javabeans they're not they don't have setters and",
    "start": "1073529",
    "end": "1079380"
  },
  {
    "text": "the naming convention for the getter methods on the previous slides you may well have noticed was not a javabean",
    "start": "1079380",
    "end": "1085110"
  },
  {
    "text": "convention okay there could be these things called product types as a form of",
    "start": "1085110",
    "end": "1090390"
  },
  {
    "text": "algebraic data type or they could be something in the middle a named tuple",
    "start": "1090390",
    "end": "1098870"
  },
  {
    "text": "which is kind of similar to a product type but it's got a name so if you've",
    "start": "1098870",
    "end": "1108480"
  },
  {
    "text": "been around java for a while you will know that actually we tend to like names",
    "start": "1108480",
    "end": "1113880"
  },
  {
    "text": "in Java we're very sure that everything in our language every type has a name",
    "start": "1113880",
    "end": "1119390"
  },
  {
    "text": "even if we can kind of elide it or get rid of it or not have to talk about it explicitly as we do with lambda",
    "start": "1119390",
    "end": "1125159"
  },
  {
    "text": "expressions deep buried in the heart of it there actually is a name involved so",
    "start": "1125159",
    "end": "1130380"
  },
  {
    "text": "you probably won't be surprised if I tell you that actually records and maing tuples they have names they are not",
    "start": "1130380",
    "end": "1138270"
  },
  {
    "text": "structural typing they emphasize the semantics above everything else they emphasize the fact that it's simply a",
    "start": "1138270",
    "end": "1144630"
  },
  {
    "text": "collection of fields and nothing more elaborate than that and there is a tight binding between what you call the",
    "start": "1144630",
    "end": "1150480"
  },
  {
    "text": "parameters versus what you call the fields versus what you call the accessor methods and that's just the way that we do it and this is not to be a complete",
    "start": "1150480",
    "end": "1159390"
  },
  {
    "text": "replacement for everything that classes do if this pattern doesn't fit with what you're doing don't use it it's there for",
    "start": "1159390",
    "end": "1167220"
  },
  {
    "text": "those those cases which people believe are very common where this is what you do want and what are the things that I",
    "start": "1167220",
    "end": "1174390"
  },
  {
    "text": "found about it as I've been working with them is that it's actually very natural",
    "start": "1174390",
    "end": "1179789"
  },
  {
    "text": "you know you kind of get a sense quite early on when working on building with records hmm this thing has other",
    "start": "1179789",
    "end": "1185520"
  },
  {
    "text": "semantics it's not just a plain collection of fields it therefore needs to be a fully fully fledged class and",
    "start": "1185520",
    "end": "1191880"
  },
  {
    "text": "that's okay that's okay so let's let's",
    "start": "1191880",
    "end": "1197640"
  },
  {
    "text": "throw the second demo and for this one I think",
    "start": "1197640",
    "end": "1203200"
  },
  {
    "text": "I think I should probably actually mirror display my hat so I am I started",
    "start": "1203200",
    "end": "1214240"
  },
  {
    "text": "my career in finance as you saw from my opening slide Deutsche Bank before I was",
    "start": "1214240",
    "end": "1220480"
  },
  {
    "text": "involved in listed derivatives I was actually in foreign exchange so on I secretly have a bit of a soft spot for",
    "start": "1220480",
    "end": "1226900"
  },
  {
    "text": "FX applications do we have any financial developers in the room",
    "start": "1226900",
    "end": "1231930"
  },
  {
    "text": "anyone in FX a few people in FX okay so",
    "start": "1231930",
    "end": "1237400"
  },
  {
    "text": "this is not to be taken seriously as an FX application I would not put this into",
    "start": "1237400",
    "end": "1242410"
  },
  {
    "text": "production and not claiming that I would it's a it's a soon to be a open source application which basically is just",
    "start": "1242410",
    "end": "1248260"
  },
  {
    "text": "designed to show off Java 14 features just as a reference application if any",
    "start": "1248260",
    "end": "1254590"
  },
  {
    "text": "of you it once it's open source if you want to see any bug pull requests and bug reports about how terrible my",
    "start": "1254590",
    "end": "1259930"
  },
  {
    "text": "matching engine code is I'll be very happy to accept them so the way it's",
    "start": "1259930",
    "end": "1265570"
  },
  {
    "text": "laid out it's called foxy and under the foxy packages we have a couple of things we have the domain model we have an engine",
    "start": "1265570",
    "end": "1272080"
  },
  {
    "text": "and then we had just have a very simple jetty handler which is just there for status checking and you know making sure",
    "start": "1272080",
    "end": "1277450"
  },
  {
    "text": "that kubernetes doesn't kill it and stuff like that so I'm going to focus first of all on the on the domain so",
    "start": "1277450",
    "end": "1285730"
  },
  {
    "text": "I've got a bunch of enums currency pairs which are going to be what I'm going to trade oh yes of course",
    "start": "1285730",
    "end": "1294060"
  },
  {
    "text": "how's that it's a better size small good so what some currency pairs as enums I",
    "start": "1294060",
    "end": "1301740"
  },
  {
    "text": "have and I'll show you example of I'll show you this one this is the",
    "start": "1301740",
    "end": "1311550"
  },
  {
    "text": "so this is actually a fully-fledged record if you make this very carefully",
    "start": "1315960",
    "end": "1321430"
  },
  {
    "text": "the top left to the screen up here this is the early access preview of IntelliJ so this is actually able to cope with",
    "start": "1321430",
    "end": "1327850"
  },
  {
    "text": "preview features in 14 and and so forth so I define my record to be an FX order",
    "start": "1327850",
    "end": "1336220"
  },
  {
    "text": "to have a number of units currency pair trading side a price a center a time to",
    "start": "1336220",
    "end": "1342220"
  },
  {
    "text": "live and because I want to do everything immutably because records are immutable I want to chain the order to say this",
    "start": "1342220",
    "end": "1349810"
  },
  {
    "text": "one came from another order originally so that if I trade and something partially matches one order I can link",
    "start": "1349810",
    "end": "1356800"
  },
  {
    "text": "it back to an original order that was originally sent here okay so that's the structure of my data and",
    "start": "1356800",
    "end": "1362640"
  },
  {
    "text": "you'll notice something quite interesting here which is well down here I've got some some static factory",
    "start": "1362640",
    "end": "1368860"
  },
  {
    "text": "methods and I found that this is a patent for working with records that works really well is rather than having",
    "start": "1368860",
    "end": "1373960"
  },
  {
    "text": "multiple constructors I and this is very much an emerging pattern I'm quite happy to be shot down about this once we've",
    "start": "1373960",
    "end": "1379510"
  },
  {
    "text": "once we've actually got a bit of experience working with records but I find the static Factory and a single",
    "start": "1379510",
    "end": "1385720"
  },
  {
    "text": "canonical constructor is actually a better way to work with these so in",
    "start": "1385720",
    "end": "1391750"
  },
  {
    "text": "these all all what happens is these just basically fill in some parameters because of course we don't have default",
    "start": "1391750",
    "end": "1397360"
  },
  {
    "text": "parameters in Java and then they create new objects so the thing I want to draw your attention to is this thing down",
    "start": "1397360",
    "end": "1404290"
  },
  {
    "text": "here look it just fits on one slide in the class declaration you have a clue",
    "start": "1404290",
    "end": "1410560"
  },
  {
    "text": "say public class name of class curly braces then you say constructor and the",
    "start": "1410560",
    "end": "1415960"
  },
  {
    "text": "parameters live on the constructor declaration with records are parameter",
    "start": "1415960",
    "end": "1422410"
  },
  {
    "text": "declarations live on the record declaration itself so in a duality of",
    "start": "1422410",
    "end": "1428110"
  },
  {
    "text": "syntax the constructor does not need to repeat that list of parameters because",
    "start": "1428110",
    "end": "1434740"
  },
  {
    "text": "and this is why I think the canonical constructive approach works well because I know what the parameters are because",
    "start": "1434740",
    "end": "1441550"
  },
  {
    "text": "they're the parameters of the record itself so if I want to do anything",
    "start": "1441550",
    "end": "1446890"
  },
  {
    "text": "special in the constructor I don't have to repeat myself I can actually just say this thing is the",
    "start": "1446890",
    "end": "1453249"
  },
  {
    "text": "constructor I know look I do all these things in it and it's it's basically it's very straightforward",
    "start": "1453249",
    "end": "1458589"
  },
  {
    "text": "it's simply sum some states checking I want to make sure that any time I create one of these order objects it's it's",
    "start": "1458589",
    "end": "1465909"
  },
  {
    "text": "completely set up the way I want and any any misbehaving things like trying to pass in nulls to the enum types will",
    "start": "1465909",
    "end": "1472599"
  },
  {
    "text": "would have thrown an argument exception okay so this is actually called a compact constructor because it doesn't",
    "start": "1472599",
    "end": "1479379"
  },
  {
    "text": "have full declaration and because I don't actually say to set all the parameters I don't need to it's taken as",
    "start": "1479379",
    "end": "1487929"
  },
  {
    "text": "read that in these constructors at the very end if you've if you've passed all the checking you can set all of these",
    "start": "1487929",
    "end": "1493769"
  },
  {
    "text": "fields so that will be automatically generated in the compartment in the compiler as well so the unit's the",
    "start": "1493769",
    "end": "1500289"
  },
  {
    "text": "currency pair the side all of the other parameters will be set invisibly down here okay which by the way shows us one",
    "start": "1500289",
    "end": "1507999"
  },
  {
    "text": "way in which these are better than structural or shape based tuples I can",
    "start": "1507999",
    "end": "1514929"
  },
  {
    "text": "do this kind of error checking because I actually have a constructor to hang them off if all I was doing was taking things",
    "start": "1514929",
    "end": "1521139"
  },
  {
    "text": "and put it together into into a round bracketed ball of multi multi values",
    "start": "1521139",
    "end": "1526539"
  },
  {
    "text": "there would be nowhere for this to actually run so one of the key advantages of having the named approach",
    "start": "1526539",
    "end": "1533229"
  },
  {
    "text": "is its to do it this way I might take questions at the end so",
    "start": "1533229",
    "end": "1539649"
  },
  {
    "text": "that's the the FX order object we've got a couple of others as well I've got a an",
    "start": "1539649",
    "end": "1547059"
  },
  {
    "text": "FX response oh yeah I'll show this one",
    "start": "1547059",
    "end": "1551279"
  },
  {
    "text": "yeah and I got this sad little coke comic code comment up here which says this interface really wants to be a",
    "start": "1553230",
    "end": "1559649"
  },
  {
    "text": "sealed interface but there are no steel types yet so instead what I've had to do is have an interface called FX response",
    "start": "1559649",
    "end": "1566360"
  },
  {
    "text": "and then",
    "start": "1566360",
    "end": "1570169"
  },
  {
    "text": "you can have this so yes you can have records to implement interfaces but this",
    "start": "1579860",
    "end": "1586670"
  },
  {
    "text": "is the design sense that it's actually difficult to to build out of because how",
    "start": "1586670",
    "end": "1592460"
  },
  {
    "text": "much further down this route you want to go before this thing is genuinely a class is a separate question in this",
    "start": "1592460",
    "end": "1600170"
  },
  {
    "text": "case I'm using FX response purely as extra typed information and if you if",
    "start": "1600170",
    "end": "1605450"
  },
  {
    "text": "you notice it was actually a marker interface yeah and it is genuinely I",
    "start": "1605450",
    "end": "1613450"
  },
  {
    "text": "think that this pattern would be more common if we did have Co types in play as well okay so far so good I should",
    "start": "1613450",
    "end": "1623059"
  },
  {
    "text": "probably just going to show you one other thing which happens which is",
    "start": "1623059",
    "end": "1629270"
  },
  {
    "text": "actually not in the domain package but eventually we have to get back to this class here and this class is what I've",
    "start": "1629270",
    "end": "1637130"
  },
  {
    "text": "called a client site manager this basically is managing all the connections for an incoming protocol in",
    "start": "1637130",
    "end": "1642380"
  },
  {
    "text": "the financial industry called fix and what we're going to do is we're going to",
    "start": "1642380",
    "end": "1649280"
  },
  {
    "text": "connect to the main matching engine by a pair of blocking cues we send in we'd break open the message we send it down",
    "start": "1649280",
    "end": "1656540"
  },
  {
    "text": "as an fx order we get a response back so basically the communication to the matching engine is done with queues for",
    "start": "1656540",
    "end": "1663740"
  },
  {
    "text": "a bunch of different reasons not least of which it helps with testing but the",
    "start": "1663740",
    "end": "1669799"
  },
  {
    "text": "thing I want to draw your attention to is this line here because I've snuck in",
    "start": "1669799",
    "end": "1675230"
  },
  {
    "text": "another new feature this is also in Java 14 in preview mode you see the syntax if",
    "start": "1675230",
    "end": "1682390"
  },
  {
    "text": "response instance of FX reject F reject so this is combining two things at once",
    "start": "1682390",
    "end": "1689540"
  },
  {
    "text": "it's combining an instance of test and a variable declaration yeah I could change",
    "start": "1689540",
    "end": "1696080"
  },
  {
    "text": "the code here I could write something like this",
    "start": "1696080",
    "end": "1700270"
  },
  {
    "text": "yeah and that it's what we would expect you know if we and as Java programmers I",
    "start": "1710030",
    "end": "1715530"
  },
  {
    "text": "think we've been steered away over the years from doing much with instance of it's considered uh no oh and um java re'",
    "start": "1715530",
    "end": "1722030"
  },
  {
    "text": "but now we can do this so it's clean",
    "start": "1722030",
    "end": "1733170"
  },
  {
    "text": "there's no unsightly cast and okay this looks like a small language feature it's",
    "start": "1733170",
    "end": "1739500"
  },
  {
    "text": "a very small language feature but sometimes small language features are where this stuff starts from now this is",
    "start": "1739500",
    "end": "1747120"
  },
  {
    "text": "called an instance of pattern and for",
    "start": "1747120",
    "end": "1752400"
  },
  {
    "text": "those of you who speak some other languages maybe Scala maybe high school maybe some others the word pattern has a",
    "start": "1752400",
    "end": "1758190"
  },
  {
    "text": "different connotation here to how it's typically used in Java I don't mean a software engineering pattern and I don't mean a regular expression I mean the",
    "start": "1758190",
    "end": "1765720"
  },
  {
    "text": "other type of pattern and this is the first example we see in it okay",
    "start": "1765720",
    "end": "1771179"
  },
  {
    "text": "so just just another little teaser there let's come back maybe gets a couple of",
    "start": "1771179",
    "end": "1783150"
  },
  {
    "text": "things other things I want to tell you about records and then we should move on and talk about cell types so the first",
    "start": "1783150",
    "end": "1788610"
  },
  {
    "text": "of them is that records have an additional equals invariant so this is an addition to your standard equals hash",
    "start": "1788610",
    "end": "1795120"
  },
  {
    "text": "code contract but for records you must also obey the following if you take the",
    "start": "1795120",
    "end": "1800250"
  },
  {
    "text": "individual components of the record and do a copy constructor based on it basically just say a new record made up",
    "start": "1800250",
    "end": "1808140"
  },
  {
    "text": "of the same components as the old one then the copy must be equal to the original in add or equal sense if you",
    "start": "1808140",
    "end": "1815190"
  },
  {
    "text": "think about it that follows directly from the semantics the state the whole state and nothing but the state so if",
    "start": "1815190",
    "end": "1821880"
  },
  {
    "text": "that's what if that's what we mean that this must be true okay there's a second",
    "start": "1821880",
    "end": "1828210"
  },
  {
    "text": "point again which seems incredibly minor and trivial but it's going to turn out",
    "start": "1828210",
    "end": "1833280"
  },
  {
    "text": "to have a deep connection to the instance of pattern we just civilization there is a constraint on",
    "start": "1833280",
    "end": "1840900"
  },
  {
    "text": "how records must be serialized serialization as Brian tells us is a",
    "start": "1840900",
    "end": "1846540"
  },
  {
    "text": "second mechanism for constructor it's invisible but public constructor and an invisible but public set of accesses for",
    "start": "1846540",
    "end": "1853950"
  },
  {
    "text": "your internal state the next line is but not for records records must be",
    "start": "1853950",
    "end": "1861990"
  },
  {
    "text": "serialized and deserialized using the the idea that they are simply the",
    "start": "1861990",
    "end": "1868800"
  },
  {
    "text": "composition of their state components you must obey that rule and if you do",
    "start": "1868800",
    "end": "1873900"
  },
  {
    "text": "anything else bad things are going to happen to you so one other minor point",
    "start": "1873900",
    "end": "1882360"
  },
  {
    "text": "that I want to make before we start to look at cell types and again this will become obvious as to why let's talk",
    "start": "1882360",
    "end": "1889080"
  },
  {
    "text": "about enums specifically let's talk about Java switch expressions hands up",
    "start": "1889080",
    "end": "1895679"
  },
  {
    "text": "if you've if you've seen the job a switch expression before yeah lots of",
    "start": "1895679",
    "end": "1900750"
  },
  {
    "text": "people have it's it's quite nice",
    "start": "1900750",
    "end": "1904220"
  },
  {
    "text": "personally I would have much preferred it if we'd actually been able to call it something other than switch but you know",
    "start": "1906410",
    "end": "1913380"
  },
  {
    "text": "oh well I lost that one as well so the idea is is that now switch comes not",
    "start": "1913380",
    "end": "1919020"
  },
  {
    "text": "only as a see like statement form but also as something that must return an expression okay and you can do some nice",
    "start": "1919020",
    "end": "1926370"
  },
  {
    "text": "things in it you can have multiple labels which correspond to the same thing notice that in here what we're",
    "start": "1926370",
    "end": "1932910"
  },
  {
    "text": "using is an enum called day of week out of Java time and which one Saturday or",
    "start": "1932910",
    "end": "1938040"
  },
  {
    "text": "Sunday it's false and it returns Monday to Friday it's true and then I'm gonna",
    "start": "1938040",
    "end": "1943410"
  },
  {
    "text": "hand wave away doing bank holidays and anything like that out of this out of this question okay now there's something",
    "start": "1943410",
    "end": "1952620"
  },
  {
    "text": "quite interesting about this can you see what's not present here that you might expect in other kinds of switches",
    "start": "1952620",
    "end": "1960350"
  },
  {
    "text": "default yeah the default case is missing why is the default case missing",
    "start": "1960350",
    "end": "1967010"
  },
  {
    "text": "because I've covered the entire space the enums are implementing a pattern the",
    "start": "1967880",
    "end": "1975000"
  },
  {
    "text": "pattern is called finitely many instances this means that the compiler can check this code and know that it is",
    "start": "1975000",
    "end": "1981600"
  },
  {
    "text": "impossible for either for us not to go down on the branch quick teaser question",
    "start": "1981600",
    "end": "1987000"
  },
  {
    "text": "what happens if i if i for some reason i passed null into this no no point to",
    "start": "1987000",
    "end": "1995820"
  },
  {
    "text": "exception absolutely yeah so this either throws an exception if it doesn't throw an exception all cases are covered and",
    "start": "1995820",
    "end": "2002150"
  },
  {
    "text": "the compiler can check that and verify that at compile time okay so now let's",
    "start": "2002150",
    "end": "2010610"
  },
  {
    "text": "talk about cell types so real let's remember one more time enemies items are instances of class says enums are",
    "start": "2010610",
    "end": "2016670"
  },
  {
    "text": "exhaustive two questions arise first of all if i have a pet as an enum and i",
    "start": "2016670",
    "end": "2025310"
  },
  {
    "text": "have two instances cat and dog well what happens if I want multiple cats or multiple dogs how can I have a way of",
    "start": "2025310",
    "end": "2033830"
  },
  {
    "text": "saying that a pet object either is a cat object or is a dog object yeah that's a",
    "start": "2033830",
    "end": "2043280"
  },
  {
    "text": "new type of oo construct it's not straightforward has ER or is a-- either",
    "start": "2043280",
    "end": "2050690"
  },
  {
    "text": "a or b that's what the concept is this",
    "start": "2050690",
    "end": "2057649"
  },
  {
    "text": "is you may have seen this concept in other languages in c-sharp and scarlet etc it's actually quite an old idea very",
    "start": "2057650",
    "end": "2064190"
  },
  {
    "text": "little about what I'm talking about actually is theoretically new even if it's just mostly been been surfaced in",
    "start": "2064190",
    "end": "2070129"
  },
  {
    "text": "in modern jvm languages like Java like Scala and Kotlin okay so returning to",
    "start": "2070130",
    "end": "2075980"
  },
  {
    "text": "this how do we do this how do we represent this how do we model this in existing Java syntax well two options",
    "start": "2075980",
    "end": "2082120"
  },
  {
    "text": "option 1 the state field so you have a single class called pet which hasn't a",
    "start": "2082120",
    "end": "2090260"
  },
  {
    "text": "field of enum type that holds the real type so effectively we're breaking the",
    "start": "2090260",
    "end": "2096370"
  },
  {
    "text": "bonus of this we're making the the programmer keep PAC keep track of",
    "start": "2096370",
    "end": "2102740"
  },
  {
    "text": "the tight bits by examining the field to say is this a cap or is this a dog right",
    "start": "2102740",
    "end": "2108500"
  },
  {
    "text": "so we're removing something which is in the proper domain of the type system down into the the programmers",
    "start": "2108500",
    "end": "2113780"
  },
  {
    "text": "bookkeeping code and that's horrible the second problem that you have is that you can't have any type specifically",
    "start": "2113780",
    "end": "2120160"
  },
  {
    "text": "specific functionality the cat can't per well because your choice would be either",
    "start": "2120160",
    "end": "2126280"
  },
  {
    "text": "cat doesn't purr or dog does purr you either superset all of the functionality",
    "start": "2126280",
    "end": "2132710"
  },
  {
    "text": "into the into the base class or you disallow it altogether and if that",
    "start": "2132710",
    "end": "2137990"
  },
  {
    "text": "starts to sound like a nasty ORM mismatch problem that's because it's",
    "start": "2137990",
    "end": "2143210"
  },
  {
    "text": "essentially is the same thing this is a this is an ORM anti-pattern we rewritten",
    "start": "2143210",
    "end": "2149630"
  },
  {
    "text": "into pure Java code okay option two the",
    "start": "2149630",
    "end": "2155360"
  },
  {
    "text": "abstract base we could start with an abstract base a pet class with a package",
    "start": "2155360",
    "end": "2160700"
  },
  {
    "text": "private constructor and two separate concrete subclasses within the same package and only they can call the",
    "start": "2160700",
    "end": "2167240"
  },
  {
    "text": "package private constructor so everything is fine apart from this abstraction leaks",
    "start": "2167240",
    "end": "2172930"
  },
  {
    "text": "outside of the JDK packages there's no protection maybe modules help but what do you do",
    "start": "2172930",
    "end": "2180020"
  },
  {
    "text": "about if you need this construction in one of your API packages of the module it can still be defeated down what about",
    "start": "2180020",
    "end": "2187100"
  },
  {
    "text": "reflection that doesn't help either so let's let's see how we actually do solve",
    "start": "2187100",
    "end": "2194420"
  },
  {
    "text": "this we actually introduce official supported sealed types okay a sealed",
    "start": "2194420",
    "end": "2201200"
  },
  {
    "text": "type is one that can be extended by a known list of types but no others and that's enforced not a compiler level but",
    "start": "2201200",
    "end": "2208820"
  },
  {
    "text": "also a classifier format and and runtime level as well okay there are different",
    "start": "2208820",
    "end": "2215570"
  },
  {
    "text": "ways of thinking about them in Javas case the way that we think about them we",
    "start": "2215570",
    "end": "2220730"
  },
  {
    "text": "believe that we should treat them properly as almost final classes that they are a class which admits a known",
    "start": "2220730",
    "end": "2226640"
  },
  {
    "text": "list of some types but they're really kind of part of the the finality",
    "start": "2226640",
    "end": "2233090"
  },
  {
    "text": "mechanism rather than anything else because in Java as it stands we have two options open and closed your final or your",
    "start": "2233090",
    "end": "2239810"
  },
  {
    "text": "you're open for extension by basically anyone this is a halfway house this is middle ground between the two we've got",
    "start": "2239810",
    "end": "2248030"
  },
  {
    "text": "two new keywords sealed and permits might ease those in a comment in the records code earlier but that's what",
    "start": "2248030",
    "end": "2254210"
  },
  {
    "text": "they are and notice that just to build some bridges with other languages these are also sometimes known as Union types",
    "start": "2254210",
    "end": "2261200"
  },
  {
    "text": "in other line in other languages particularly people talk about disjoint unions and curiously it's actually tied",
    "start": "2261200",
    "end": "2269030"
  },
  {
    "text": "into a Java language feature that already exists sometimes big things go from small places does anyone know the",
    "start": "2269030",
    "end": "2276140"
  },
  {
    "text": "one place in the Java language where we already have something that looks like a bit like this or something that looks like a union type nope Oh actually",
    "start": "2276140",
    "end": "2292310"
  },
  {
    "text": "thought that that would that would technically be an intersection type I think I know we were going with that and it's related but it's not quite right",
    "start": "2292310",
    "end": "2299620"
  },
  {
    "text": "yes objects being null no the null type",
    "start": "2299620",
    "end": "2306320"
  },
  {
    "text": "is special so that's not that's not really an answer either that's a very interesting question but that relates to",
    "start": "2306320",
    "end": "2312170"
  },
  {
    "text": "things like how Kotlin hammers malleability i one short time some I'm going to call it here multi catch the",
    "start": "2312170",
    "end": "2321230"
  },
  {
    "text": "multi catchment expression is one of those or one of those or one of those yeah and for those of you that speak to",
    "start": "2321230",
    "end": "2327920"
  },
  {
    "text": "me how the languages note to be Haskell you can probably see why I'm shying away from calling these two Union types it's",
    "start": "2327920",
    "end": "2334400"
  },
  {
    "text": "to do with the fact that the Java type system is single rooted at least four references okay something else we need",
    "start": "2334400",
    "end": "2339980"
  },
  {
    "text": "to make all of this work hands up if you've heard of these things quite as",
    "start": "2339980",
    "end": "2345950"
  },
  {
    "text": "well as I'd hoped Java eleven nestmates hands up if you've heard of nestmates",
    "start": "2345950",
    "end": "2351430"
  },
  {
    "text": "nobody Wow inner classes done correctly fixing a design bug that goes all the",
    "start": "2351430",
    "end": "2357320"
  },
  {
    "text": "way back to Java 1.1 actually making inner classes work the way that they",
    "start": "2357320",
    "end": "2362900"
  },
  {
    "text": "were always intended to and with that it's demo time okay",
    "start": "2362900",
    "end": "2378979"
  },
  {
    "text": "unfortunately CEO types aren't actually in Java 14 yet so I here's one I made",
    "start": "2383530",
    "end": "2391580"
  },
  {
    "text": "earlier my own personal build of open JDK in order to to allow us to play with sealed",
    "start": "2391580",
    "end": "2396980"
  },
  {
    "text": "types so here's what they look like",
    "start": "2396980",
    "end": "2412780"
  },
  {
    "text": "public abstract sealed class permits cat-and-dog this is a standard pattern",
    "start": "2413080",
    "end": "2418340"
  },
  {
    "text": "to have these the basis be abstract so that you don't actually have to deal with the super node case you you are",
    "start": "2418340",
    "end": "2424580"
  },
  {
    "text": "simply dealing with the possible disjoint sub sub cases so we have a name",
    "start": "2424580",
    "end": "2430100"
  },
  {
    "text": "we have an abstract speaking method and then we just have a very simple constructor so now we have a public",
    "start": "2430100",
    "end": "2436610"
  },
  {
    "text": "final class yes you do need to say final for all of these I would much prefer it if this book this was final by default",
    "start": "2436610",
    "end": "2443860"
  },
  {
    "text": "but there are some particularly bizarre use cases where you want not all of the",
    "start": "2443860",
    "end": "2449480"
  },
  {
    "text": "classes which extend this to to be final why you would ever want that backdoor to",
    "start": "2449480",
    "end": "2455120"
  },
  {
    "text": "break the sealed Ness I don't know but there we go so whole constructor and now we have a",
    "start": "2455120",
    "end": "2461510"
  },
  {
    "text": "couple of things we got the implementation of speak which is part of the basic functionality but now crucially I've got my own functionality",
    "start": "2461510",
    "end": "2467390"
  },
  {
    "text": "I can go and hunt mice which is which is handy if you're a cat so this is how",
    "start": "2467390",
    "end": "2473750"
  },
  {
    "text": "it's laid out let's just show some compilation [Music]",
    "start": "2473750",
    "end": "2479679"
  },
  {
    "text": "I don't suddenly realize I didn't actually show you the bytecode ad complement compilation of a record",
    "start": "2488640",
    "end": "2494640"
  },
  {
    "text": "either so let's just show that to now I",
    "start": "2494640",
    "end": "2500220"
  },
  {
    "text": "need to change javis fill up",
    "start": "2500220",
    "end": "2503270"
  },
  {
    "text": "it's quite interesting thing to notice here is that the other cat class really",
    "start": "2515789",
    "end": "2521259"
  },
  {
    "text": "shows no real sign of having been the",
    "start": "2521259",
    "end": "2528849"
  },
  {
    "text": "the subtype of a sealed class at all and it really doesn't lead to the actual",
    "start": "2528849",
    "end": "2536140"
  },
  {
    "text": "sealing magic happens in the super type now you might notice there's something that we're down here with some",
    "start": "2536140",
    "end": "2541480"
  },
  {
    "text": "invokedynamic but don't be confused by that that's simply the way that in modern Java things that are to do with",
    "start": "2541480",
    "end": "2547809"
  },
  {
    "text": "with shaping such as string concatenation and various other other methods and now being built by",
    "start": "2547809",
    "end": "2554230"
  },
  {
    "text": "invokedynamic factories so that basically is in just the same way as we did for lambdas you're going to see that",
    "start": "2554230",
    "end": "2559660"
  },
  {
    "text": "more and more and that dynamic stuff will be will be done using invokedynamic",
    "start": "2559660",
    "end": "2564940"
  },
  {
    "text": "magic so let's actually look at this sealed tight case okay again",
    "start": "2564940",
    "end": "2575349"
  },
  {
    "text": "nothing really to see here we actually need to dig in you see right down at the",
    "start": "2575349",
    "end": "2581980"
  },
  {
    "text": "bottom there's a new thing which says permitted sub types so that means that",
    "start": "2581980",
    "end": "2588940"
  },
  {
    "text": "this class when you try to compile anything new whether you have the original Java file for this or whether",
    "start": "2588940",
    "end": "2595299"
  },
  {
    "text": "you have a class file compiled version of this if you are not in this list you will not get compile so you will be",
    "start": "2595299",
    "end": "2602380"
  },
  {
    "text": "rejected by the compiler so that the this solves the problems that we saw in the other half where you know with a",
    "start": "2602380",
    "end": "2608109"
  },
  {
    "text": "package private constructor you could still you give someone custom with around it this also will prevent",
    "start": "2608109",
    "end": "2613900"
  },
  {
    "text": "reflection as well so this really is a completely watertight mechanism so",
    "start": "2613900",
    "end": "2621099"
  },
  {
    "text": "anything else I wanted to show in there okay so that's just very quickly I'll switch to Java 14 again",
    "start": "2621099",
    "end": "2628529"
  },
  {
    "text": "just because it's fun to look at this plus so look there's a new class called",
    "start": "2649470",
    "end": "2661570"
  },
  {
    "text": "java.lang record and just as for enums if you try to directly extend that the",
    "start": "2661570",
    "end": "2667150"
  },
  {
    "text": "compiler won't let you we have the the public constructor which has been automatically created and just basically",
    "start": "2667150",
    "end": "2673360"
  },
  {
    "text": "does all the things that you would expect a simple constructor to do you have to string hashcode and equals which",
    "start": "2673360",
    "end": "2682390"
  },
  {
    "text": "are all provided for you by by these invokedynamic factories that we've just",
    "start": "2682390",
    "end": "2687760"
  },
  {
    "text": "talking about and then you have some getter methods and that's it so all of that boilerplate creation has been done",
    "start": "2687760",
    "end": "2693910"
  },
  {
    "text": "in exactly the same way as we it would be 15 ups",
    "start": "2693910",
    "end": "2698369"
  },
  {
    "text": "okay so here's the path so far these are some of the pieces we've needed to put together nest mates in the class is done",
    "start": "2712869",
    "end": "2720069"
  },
  {
    "text": "right switch expressions which are now actually a standardized version in Java 14 records instance of patterns at some",
    "start": "2720069",
    "end": "2728200"
  },
  {
    "text": "time point maybe 16 will get sealed types as well there are also some other",
    "start": "2728200",
    "end": "2734469"
  },
  {
    "text": "pieces which are coming into play behind the scenes the instance of pattern a deconstruction pattern because we can",
    "start": "2734469",
    "end": "2742660"
  },
  {
    "text": "now do things like think about how the uses of pattern was written where you",
    "start": "2742660",
    "end": "2747849"
  },
  {
    "text": "you you tested something and then you declare the variable well imagine doing that to a record what",
    "start": "2747849",
    "end": "2755380"
  },
  {
    "text": "do we know about records records are just the product of their parts so what",
    "start": "2755380",
    "end": "2762160"
  },
  {
    "text": "about declaring not a new variable of record type but D structuring it in just",
    "start": "2762160",
    "end": "2768219"
  },
  {
    "text": "the same way as we do in many other languages back into its components so",
    "start": "2768219",
    "end": "2773979"
  },
  {
    "text": "those start to build towards a feature called pattern matching not patterns as",
    "start": "2773979",
    "end": "2781989"
  },
  {
    "text": "regular expressions not patterns as language or ideas but the idea of being able to to compose and decompose the",
    "start": "2781989",
    "end": "2788769"
  },
  {
    "text": "structures of our objects on the fly so if hands up we've got nice Carly users",
    "start": "2788769",
    "end": "2795210"
  },
  {
    "text": "yeah so think match expressions with similar power but implemented down in",
    "start": "2795210",
    "end": "2801339"
  },
  {
    "text": "the runtime down at the M level so records are about semantics they",
    "start": "2801339",
    "end": "2807249"
  },
  {
    "text": "implement a pattern and not a general replacement they're very useful though Co types were new our construct and",
    "start": "2807249",
    "end": "2812920"
  },
  {
    "text": "together they make up this idea called algebraic data types for people that",
    "start": "2812920",
    "end": "2818979"
  },
  {
    "text": "come from from pure functional languages like Haskell there are restrictions the Java type system can't be fully modified",
    "start": "2818979",
    "end": "2825759"
  },
  {
    "text": "to do exactly the same whether it works elsewhere but this is our version of how algebraic data types will work the big",
    "start": "2825759",
    "end": "2832569"
  },
  {
    "text": "hope and again I work for a public company nothing I can say should be taken as as gospel when it's",
    "start": "2832569",
    "end": "2839440"
  },
  {
    "text": "forward-looking hopefully I would think that all of this would be final by Java",
    "start": "2839440",
    "end": "2844599"
  },
  {
    "text": "17 one thing I saw some make clear is records have nothing to do with inline",
    "start": "2844599",
    "end": "2849960"
  },
  {
    "text": "types in learned classes and records are completely orthogonal and completely independent concepts records Co types",
    "start": "2849960",
    "end": "2858300"
  },
  {
    "text": "pattern matching by 17 yes I think that's reasonable I don't know about anyone classes okay so if you might want",
    "start": "2858300",
    "end": "2866070"
  },
  {
    "text": "to grab a couple of URLs here Brian was kind enough to do an article for us",
    "start": "2866070",
    "end": "2871860"
  },
  {
    "text": "about about records in info queue so we'll just let people take a picture here and a couple of my pieces about app",
    "start": "2871860",
    "end": "2880140"
  },
  {
    "text": "for Oracle's Java magazine records and silk types and JVM so what can you do to",
    "start": "2880140",
    "end": "2886380"
  },
  {
    "text": "help throughout the new Java 14 and I suppose 15 beat us now because four team will be released in a couple of weeks",
    "start": "2886380",
    "end": "2892530"
  },
  {
    "text": "time keep an eye out for the steel type beaters and deconstruction patterns please try and write some code using the",
    "start": "2892530",
    "end": "2898320"
  },
  {
    "text": "new features even if it's just research or innovation time as we call it a new relic and give feedback",
    "start": "2898320",
    "end": "2903540"
  },
  {
    "text": "the sooner is better I actually found that records were a fantastic feature to start using in the code and I hope to",
    "start": "2903540",
    "end": "2910620"
  },
  {
    "text": "actually release that demo application I showed you as open source pretty soon to conclude I have a few tickets for my",
    "start": "2910620",
    "end": "2919350"
  },
  {
    "text": "book which I'm going to be giving away on signing at the new relic booth at 12:40 today you see many tickets I've",
    "start": "2919350",
    "end": "2925290"
  },
  {
    "text": "got and I'll take questions [Applause]",
    "start": "2925290",
    "end": "2933900"
  },
  {
    "text": "as well Ben any questions two questions one do records allow",
    "start": "2937200",
    "end": "2945070"
  },
  {
    "text": "validation annotations on the parameters so that javabeans validation for example",
    "start": "2945070",
    "end": "2950830"
  },
  {
    "text": "can be triggered and seconds so records are not javabeans but it is javabeans",
    "start": "2950830",
    "end": "2957370"
  },
  {
    "text": "now that is a lot of useless boilerplate and this is why we use Lombok so will it",
    "start": "2957370",
    "end": "2964330"
  },
  {
    "text": "really be so beneficial to the current applications and the current libraries",
    "start": "2964330",
    "end": "2969850"
  },
  {
    "text": "that we use for all the javabeans stuff okay so two good questions the first of",
    "start": "2969850",
    "end": "2975940"
  },
  {
    "text": "which is yes you can use validation and affections on them there's some work to do to bridge these because you want to think carefully about what that means",
    "start": "2975940",
    "end": "2982600"
  },
  {
    "text": "and make sure you don't bring in additional semantics secondly it's unfortunate that they can't be easily",
    "start": "2982600",
    "end": "2988330"
  },
  {
    "text": "retrofitted to javabeans capabilities but the problem is you have other guarantees like the copy constructor and",
    "start": "2988330",
    "end": "2993820"
  },
  {
    "text": "the serialization which you can't definitively rule in or out people do some messed up things with",
    "start": "2993820",
    "end": "2999790"
  },
  {
    "text": "javabeans and people also use the javabeans conventions when they they also have additional semantics beyond",
    "start": "2999790",
    "end": "3006480"
  },
  {
    "text": "what is meant in the in the java beans so unfortunately I think this is an example of a language feature where",
    "start": "3006480",
    "end": "3012900"
  },
  {
    "text": "people are being cautious and just doing what you can with the first car will someone come up with a clever bridging",
    "start": "3012900",
    "end": "3018540"
  },
  {
    "text": "thing I'm sure they will and for all that long Bach has surface-level advantages the more I've used it the",
    "start": "3018540",
    "end": "3025590"
  },
  {
    "text": "more I've come to realize that actually it's a bad solution and that's not to say anything bad about the technical",
    "start": "3025590",
    "end": "3030870"
  },
  {
    "text": "ability of the people that wrote it they did the best they could with the design space they had but it doesn't make it a",
    "start": "3030870",
    "end": "3037020"
  },
  {
    "text": "good solution the boilerplate although it's although it's bad in my opinion is the lesser of two evils compared to what",
    "start": "3037020",
    "end": "3042660"
  },
  {
    "text": "long book does to you great question so",
    "start": "3042660",
    "end": "3047390"
  },
  {
    "text": "thank you I thank you for the talk I also have two questions first with",
    "start": "3047859",
    "end": "3054259"
  },
  {
    "text": "regards to seal type does the parameter type have to be and do the primitive",
    "start": "3054259",
    "end": "3059509"
  },
  {
    "text": "type types have to be in the same package as in your example or is it just for brevity um I'm pretty sure it was",
    "start": "3059509",
    "end": "3065569"
  },
  {
    "text": "just from brevity it's a while since I write that code but I think they as long as it's a correct fully qualified name I",
    "start": "3065569",
    "end": "3070729"
  },
  {
    "text": "think you're fine all right then the second question again Records be generic can record speed generic oh great",
    "start": "3070729",
    "end": "3076849"
  },
  {
    "text": "question answer no they can't there are good reasons for that I'll tell you about it later if you if you want to",
    "start": "3076849",
    "end": "3082309"
  },
  {
    "text": "know yeah who's next Scott you gave a bit of a hint there about permitted",
    "start": "3082309",
    "end": "3087650"
  },
  {
    "text": "types not being pointed by the focus there was good reasons for it could you",
    "start": "3087650",
    "end": "3092809"
  },
  {
    "text": "inside what those good reasons might be that seems like quite strong in Japan what they're not being final by default and I would have to point you to the",
    "start": "3092809",
    "end": "3099920"
  },
  {
    "text": "appropriate place on the mailing list where Brian comes up with an example which which well in the example it",
    "start": "3099920",
    "end": "3106160"
  },
  {
    "text": "definitely would would be problematic if they were filed final by default this was part of the",
    "start": "3106160",
    "end": "3112039"
  },
  {
    "text": "discussion about whether we should should also have a know up keyword called non final because the other",
    "start": "3112039",
    "end": "3118039"
  },
  {
    "text": "proposal was to make them final by default introduce a new hyphenated keyword saying non final and then",
    "start": "3118039",
    "end": "3124849"
  },
  {
    "text": "basically allow that the other way around so that they were final by default but you could specify the non final I'd need to find the appropriate",
    "start": "3124849",
    "end": "3130609"
  },
  {
    "text": "reference well maybe I've followed the pattern of two questions how other",
    "start": "3130609",
    "end": "3138109"
  },
  {
    "text": "records differ from scholar case classes and can you implement interfaces yes I",
    "start": "3138109",
    "end": "3143690"
  },
  {
    "text": "showed an example of information interfaces sorry and now the the scale",
    "start": "3143690",
    "end": "3149119"
  },
  {
    "text": "the scale class classes are a good well",
    "start": "3149119",
    "end": "3154160"
  },
  {
    "text": "a good mental model I think they're they're similar in some ways what will happen in my opinion given the the the",
    "start": "3154160",
    "end": "3160969"
  },
  {
    "text": "way that we've seen this happen with with other features in the java language is there wouldn't be at all surprised in",
    "start": "3160969",
    "end": "3166819"
  },
  {
    "text": "a future version of scala 3.3 or 3.5 that scarlet face classes are",
    "start": "3166819",
    "end": "3171979"
  },
  {
    "text": "retrofitted on top of records that's what happened with with traits stateless",
    "start": "3171979",
    "end": "3177979"
  },
  {
    "text": "traits just became interfaces with default methods I think the same thing will happen here okay so we're out of time now let's make",
    "start": "3177979",
    "end": "3185569"
  },
  {
    "text": "a movie if we can get a coffee before everyone else does one last time Thank You Ben Evans [Applause]",
    "start": "3185569",
    "end": "3193929"
  }
]