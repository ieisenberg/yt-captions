[
  {
    "start": "0",
    "end": "114000"
  },
  {
    "text": "okay welcome everyone I've been very much looking forward to this around speaking I get to chair so let's welcome",
    "start": "4680",
    "end": "10840"
  },
  {
    "text": "our four speakers on stage [Applause]",
    "start": "10840",
    "end": "23850"
  },
  {
    "text": "here and we're about to have a panel discussion looking at the current state of our languages and where they're going",
    "start": "23920",
    "end": "30359"
  },
  {
    "text": "to go in the future we've got a nice range here so I'll start off by letting each of them introduce themselves so we",
    "start": "30359",
    "end": "36160"
  },
  {
    "text": "know who we've got go for it Richard hello um I'm Richard Filman I work at no",
    "start": "36160",
    "end": "41719"
  },
  {
    "text": "WR in uh we make Grammar and Writing software for English teachers where a startup in California um uh we use Elm",
    "start": "41719",
    "end": "47879"
  },
  {
    "text": "in production we're the biggest Elm codebase known to anyone uh so the creator of elm uh is my coworker and I",
    "start": "47879",
    "end": "53280"
  },
  {
    "text": "work closely with him and know a lot about the language design but I should clarify that I'm not actually the language designer of elm uh so so um a",
    "start": "53280",
    "end": "61160"
  },
  {
    "text": "lot of knowledge about elmm and sort of prend Technologies functional programming things like that um and",
    "start": "61160",
    "end": "66880"
  },
  {
    "text": "excited to talk about the future Joe hi I'm Joe Duffy I was previously",
    "start": "66880",
    "end": "73280"
  },
  {
    "text": "engineering director at Microsoft for languages so includes c f Visual Basic",
    "start": "73280",
    "end": "78520"
  },
  {
    "text": "C++ nowadays I'm kind of off doing a new Cloud startup but it's actually very much in the language space as",
    "start": "78520",
    "end": "86119"
  },
  {
    "text": "well hi I'm Brian GS I'm the uh architect for the Java language and core libraries at Oracle so I was the uh I I",
    "start": "86119",
    "end": "93640"
  },
  {
    "text": "was the lead for the Java 8 language and Library features lambas and streams and I'm uh currently working on the next 20",
    "start": "93640",
    "end": "99520"
  },
  {
    "text": "years of Java's life hi I'm silven klech I work at",
    "start": "99520",
    "end": "104680"
  },
  {
    "text": "Microsoft research in Cambridge and I designed the pony programming language which is an actor model uh language and",
    "start": "104680",
    "end": "110360"
  },
  {
    "text": "I work on other language things in MSR thank you everyone so I'm going to",
    "start": "110360",
    "end": "116119"
  },
  {
    "start": "114000",
    "end": "299000"
  },
  {
    "text": "start off with a few questions to begin with and we'll see with the conversation goes but we'll also open it up so people",
    "start": "116119",
    "end": "122560"
  },
  {
    "text": "can throw out questions and maybe expand on some of this later so I want to start it off with something I kind of often",
    "start": "122560",
    "end": "128360"
  },
  {
    "text": "think about is where do we spend our time when we're writing code what sucks up all our time so it takes us longer to",
    "start": "128360",
    "end": "135319"
  },
  {
    "text": "do something I want to kind of put it to each of the panel what they see that problem being right now like what they",
    "start": "135319",
    "end": "141120"
  },
  {
    "text": "think the current state of the world is and how they see that going forward so want I Go reverse end first",
    "start": "141120",
    "end": "147959"
  },
  {
    "text": "sure uh I think sort of five to 10 years ago people used to reinvent concurrency",
    "start": "147959",
    "end": "153680"
  },
  {
    "text": "every time they were writing an application and that was a huge problem we still do that but now we reinvent",
    "start": "153680",
    "end": "159480"
  },
  {
    "text": "distributed systems every time we write an application and it's a lot",
    "start": "159480",
    "end": "164720"
  },
  {
    "text": "worse Brian so um what when I'm working on a programming problem and I'm not",
    "start": "165800",
    "end": "171800"
  },
  {
    "text": "making progress what I what I find the the root cause is usually that I'm not thinking clearly about what the data",
    "start": "171800",
    "end": "177360"
  },
  {
    "text": "flows are and once you get the uh the data flows right then usually the code",
    "start": "177360",
    "end": "182640"
  },
  {
    "text": "pretty much writes itself MH uh I would say probably debugging a",
    "start": "182640",
    "end": "189239"
  },
  {
    "text": "lot of people don't think of debugging as sort of being part of language design but I think you know especially having",
    "start": "189239",
    "end": "195159"
  },
  {
    "text": "language abstractions that map closely to kind of your mental model of a problem which is why if anybody heard my",
    "start": "195159",
    "end": "201879"
  },
  {
    "text": "talk this morning I'm really a big fan of kind of the actor model for distributive programming and all the concurrency constructs that have been",
    "start": "201879",
    "end": "208159"
  },
  {
    "text": "added you know it used to be the case that uh there's such a a gap between kind of the code you had write and what was",
    "start": "208159",
    "end": "215159"
  },
  {
    "text": "actually executing you know you weren't expressing things in a logical level it's almost like you're doing assembly programming and nowadays at least you",
    "start": "215159",
    "end": "220840"
  },
  {
    "text": "have tasks and that sort of thing I feel like we're still in that stage with distributed programming and then when something goes wrong you're left kind of",
    "start": "220840",
    "end": "227480"
  },
  {
    "text": "manually reconstructing uh everything that happened between when you wrote your code the compiler got its hands on it",
    "start": "227480",
    "end": "233439"
  },
  {
    "text": "and then you know mapping it to runtime abstractions and so I think of debugging is very much in the realm of uh language",
    "start": "233439",
    "end": "241040"
  },
  {
    "text": "design I think debuging is a great answer um I I would also say sort of Bridging the Gap between when you're",
    "start": "241040",
    "end": "247519"
  },
  {
    "text": "initially shipping an application and when you're scaling it so uh one of the things that we've been talking about is",
    "start": "247519",
    "end": "253680"
  },
  {
    "text": "sort of if you hire another 10 developers you're not going to get you know 10x the productivity of one developer the more and more people you",
    "start": "253680",
    "end": "259880"
  },
  {
    "text": "add the less and less you get out of each person in terms of velocity and the reason for that is just that complexity",
    "start": "259880",
    "end": "266000"
  },
  {
    "text": "doesn't increase linearly it sort of compounds upon itself and so I think one of the areas that we spend a lot of our",
    "start": "266000",
    "end": "271160"
  },
  {
    "text": "time in even though we don't necessarily think about it that way at the time is just that added complexity doesn't scale",
    "start": "271160",
    "end": "277160"
  },
  {
    "text": "linearly so um I think one of the things we can get out of our languages is the ability for maybe not to get it all the",
    "start": "277160",
    "end": "283000"
  },
  {
    "text": "way down to linear but at least to get the coefficient lower so that it it gets a less and less of a comp compounding",
    "start": "283000",
    "end": "288560"
  },
  {
    "text": "explosion the more complexity that's sort of innate to our application okay think that's really interest because my",
    "start": "288560",
    "end": "294479"
  },
  {
    "text": "second question was going to be about debugging cuz I find that I'm kind of UPS by did I measure lots of things and",
    "start": "294479",
    "end": "301840"
  },
  {
    "start": "299000",
    "end": "444000"
  },
  {
    "text": "I realized that I spend a lot of my time working across many languages debugging code we often don't talk enough about",
    "start": "301840",
    "end": "308000"
  },
  {
    "text": "that so I'd like to to go back to Joe this because I bit of a fan of his blog around some of the stuff he's talked",
    "start": "308000",
    "end": "313199"
  },
  {
    "text": "about you talked about the three safeties for me the three safeties are a great way to avoid many of the debugging",
    "start": "313199",
    "end": "318919"
  },
  {
    "text": "issues we we face what can we do to go forward from here right so the three",
    "start": "318919",
    "end": "323960"
  },
  {
    "text": "safeties um sort of the Midori operating system we built was kind of based on the fundamental premise that operating",
    "start": "323960",
    "end": "330440"
  },
  {
    "text": "systems of the future should be type memory and concurrency safe uh and concurrency safe means free of data",
    "start": "330440",
    "end": "336319"
  },
  {
    "text": "races as I talked about this morning you can never be free of race conditions entirely but at least you can be free of",
    "start": "336319",
    "end": "341479"
  },
  {
    "text": "data races um and to me it's I think one of the things we can do is use languages",
    "start": "341479",
    "end": "348319"
  },
  {
    "text": "that actually solve the problems by construction um that was also a big Mantra we called it correctness by",
    "start": "348319",
    "end": "354440"
  },
  {
    "text": "construction which is kind of a lie because you could never prove that your code was correct unless you're programming in like like T Plus or you",
    "start": "354440",
    "end": "360960"
  },
  {
    "text": "know some some logic language but um but I think it's you know I look at one of",
    "start": "360960",
    "end": "366960"
  },
  {
    "text": "the things that pains me is after going through that experience looking at all the security flaws time and time again I",
    "start": "366960",
    "end": "372120"
  },
  {
    "text": "mean I think something on the order of 45% of the zero day vulnerabilities that",
    "start": "372120",
    "end": "377560"
  },
  {
    "text": "come out in any given year are actually due to buffer overruns which we've known how to solve for years I mean if people",
    "start": "377560",
    "end": "383919"
  },
  {
    "text": "just use type in memory safe languages sure there is an opportunity to get that wrong because you know even Java and net",
    "start": "383919",
    "end": "390880"
  },
  {
    "text": "I mean there's some native code obviously in there somewhere but the less of it that you can expose yourself",
    "start": "390880",
    "end": "396319"
  },
  {
    "text": "to the more your programs will be correct by construction and I love seeing more people using type in memory",
    "start": "396319",
    "end": "402919"
  },
  {
    "text": "safe languages especially you know uh rust kind of takes it to a total extreme",
    "start": "402919",
    "end": "408280"
  },
  {
    "text": "uh especially trying to solve the concurrency safety problem uh which I think is out of the three safety is the",
    "start": "408280",
    "end": "413919"
  },
  {
    "text": "one that is probably um the least kind of mainstream it's the most difficult",
    "start": "413919",
    "end": "419120"
  },
  {
    "text": "and and rust you can see the great length to memory ownership that you need to go through to really solve that",
    "start": "419120",
    "end": "424319"
  },
  {
    "text": "problem but it's a super promising approach I think anyone want to add to that yeah so",
    "start": "424319",
    "end": "432479"
  },
  {
    "text": "so this might be sound like a little bit of a snarky answer but my my my favorite uh favorite way to reduce the pain of",
    "start": "432479",
    "end": "439199"
  },
  {
    "text": "debugging is to not have to do it right and and it connects a little bit to you know to what Joe said which is use",
    "start": "439199",
    "end": "444360"
  },
  {
    "start": "444000",
    "end": "930000"
  },
  {
    "text": "languages that are safe uh use libraries that are well tested and building blocks you can rely on uh so that you know you",
    "start": "444360",
    "end": "450440"
  },
  {
    "text": "don't have to uh reinvent the Wheel from scratch every time but another aspect of writing code that doesn't have to be",
    "start": "450440",
    "end": "456800"
  },
  {
    "text": "debugged is to focus on writing simple code write code that's so simple that",
    "start": "456800",
    "end": "462280"
  },
  {
    "text": "you can't possibly misunderstand what it's doing and I think a lot of developers uh they they sort of get",
    "start": "462280",
    "end": "467759"
  },
  {
    "text": "caught up in writing fancy code or trying to make the code fast at the same",
    "start": "467759",
    "end": "472879"
  },
  {
    "text": "time they're trying to figure out what it's supposed to do and you know all of these sources of complexity are places",
    "start": "472879",
    "end": "479039"
  },
  {
    "text": "where bugs hide so if you focus on writing the simplest possible code uh",
    "start": "479039",
    "end": "484800"
  },
  {
    "text": "it's a lot easier to get something working to build up a good base of tests before you start to add bells and",
    "start": "484800",
    "end": "490759"
  },
  {
    "text": "whistles or try to optimize it or if you have to optimize it so uh by striving for Simplicity you find you have to",
    "start": "490759",
    "end": "498159"
  },
  {
    "text": "debug less often and that's that's a good thing I yeah I think it's really very",
    "start": "498159",
    "end": "504199"
  },
  {
    "text": "fun that a bunch of language designers when asked about debugging we all immediately start talking about correctness um I'm going to do the exact",
    "start": "504199",
    "end": "510879"
  },
  {
    "text": "same thing uh I think formal verification of code",
    "start": "510879",
    "end": "517399"
  },
  {
    "text": "is it has been the future for a long time and much like fusion power will be the future for a long time but those",
    "start": "517399",
    "end": "524240"
  },
  {
    "text": "techniques are getting better and better and they're languages like dapne and fstar built on top of the Z3 smt solver",
    "start": "524240",
    "end": "530760"
  },
  {
    "text": "that make it possible to write significant code that is proven to be correct there are no debugging issues",
    "start": "530760",
    "end": "537600"
  },
  {
    "text": "unfortunately currently with those tools it means means that uh you spend a lot of time fighting your smt solver and",
    "start": "537600",
    "end": "542920"
  },
  {
    "text": "debugging uh the fact that it can't prove what you could prove in your head easily but building up those tools along",
    "start": "542920",
    "end": "551920"
  },
  {
    "text": "with Dynamic tools I think for example Elm has a brilliant rewindable debugger and tools like that building up those",
    "start": "551920",
    "end": "557760"
  },
  {
    "text": "Dynamic tools is important but I think building up static tools that can prove correctness uh even more than just the",
    "start": "557760",
    "end": "563399"
  },
  {
    "text": "type system and memory safety and currency safety as much as I think those are absolutely critical I think formal verification is the only way we're going",
    "start": "563399",
    "end": "570480"
  },
  {
    "text": "to end up with widespread code that is in fact trustable so I I would I would like to",
    "start": "570480",
    "end": "576800"
  },
  {
    "text": "build on all of this because I'm in general agreement but uh uh one thing that I think we we don't think about is",
    "start": "576800",
    "end": "583360"
  },
  {
    "text": "when we're accidentally making decisions that lead to more debugging later so I'll give you an example of this so like",
    "start": "583360",
    "end": "589240"
  },
  {
    "text": "in CSS um if something about your stylesheet is invalid uh it will just sort of silently fail just on that one",
    "start": "589240",
    "end": "595440"
  },
  {
    "text": "property which makes it pretty easy um up front to make invalid properties and not realize it so on the one hand it",
    "start": "595440",
    "end": "602120"
  },
  {
    "text": "feels like it's nice oh it's not it's not blocking me from making progress it's letting me continue but on the other hand what that means is that",
    "start": "602120",
    "end": "608200"
  },
  {
    "text": "potentially later on you're going to have some unexpected Behavior as a result of that invalid property where",
    "start": "608200",
    "end": "613880"
  },
  {
    "text": "the error was just silently ignored early on so on the one hand it can feel frustrating to get all these errors up",
    "start": "613880",
    "end": "619399"
  },
  {
    "text": "front and have them block you and have it say wait a minute you can't progress because I found a single style that was invalid none of your page is going to",
    "start": "619399",
    "end": "625560"
  },
  {
    "text": "render for you but on the other hand having that stuff up front can save you from from debugging later so very often",
    "start": "625560",
    "end": "631399"
  },
  {
    "text": "there's this implicit choice that you're making by choosing tools that that sort of swallow errors and don't force you to",
    "start": "631399",
    "end": "637920"
  },
  {
    "text": "deal with them up front in the ways that we're talking about um it can be convenient at first but very often it leads you to spend more time debugging",
    "start": "637920",
    "end": "644320"
  },
  {
    "text": "later and you don't see that cost at first and if I got to add something to",
    "start": "644320",
    "end": "650120"
  },
  {
    "text": "you know what svin said about uh about formal verification so um not all of us can afford to you know make the effort",
    "start": "650120",
    "end": "657279"
  },
  {
    "text": "to formally verify our code but there's something all of us can do to get some of that benefit and and uh when we talk",
    "start": "657279",
    "end": "663320"
  },
  {
    "text": "about correctness what does correct correctness mean a program is correct if it conforms to its specification so how",
    "start": "663320",
    "end": "670000"
  },
  {
    "text": "many of us write good specifications for all of our",
    "start": "670000",
    "end": "674440"
  },
  {
    "text": "code and the reason I'm raising my hand or the consequence of me raising my hand is why Java takes a long time to evolve",
    "start": "676959",
    "end": "684000"
  },
  {
    "text": "we're obsessive about specifications the most valuable thing about the Java ecosystem is the quality of the",
    "start": "684000",
    "end": "689440"
  },
  {
    "text": "specification for the language and the jvm um and so we we take specifications",
    "start": "689440",
    "end": "694680"
  },
  {
    "text": "very seriously and it's the act of writing the specification that forces you to think really hard about what",
    "start": "694680",
    "end": "700560"
  },
  {
    "text": "problem I'm trying to solve here and even if you're not going to then try to code up these specifications in a formal",
    "start": "700560",
    "end": "706079"
  },
  {
    "text": "verification language just having gone through the exercise of trying to write a specification such that someone who",
    "start": "706079",
    "end": "713360"
  },
  {
    "text": "isn't immersed in the problem could understand what's going to go right what's going to go wrong what's the boundary what's the goal is an immensely",
    "start": "713360",
    "end": "720079"
  },
  {
    "text": "helpful thing actually can I jump in there I I love that answer uh so one of",
    "start": "720079",
    "end": "727480"
  },
  {
    "text": "the things that we did building Pony is that we started with a formally specified operational semantics and type system that was proven sound and",
    "start": "727480",
    "end": "735000"
  },
  {
    "text": "developed the language and the runtime from there and there was a feedback process where the development of the runtime actually fed into the formal",
    "start": "735000",
    "end": "741040"
  },
  {
    "text": "specification and vice versa and I think that maybe that sounds overly nerdy for",
    "start": "741040",
    "end": "746199"
  },
  {
    "text": "real world application code but it kind of isn't you you can write those specifications and do that feedback process even if you're not doing it in a",
    "start": "746199",
    "end": "753240"
  },
  {
    "text": "sort of a strict mathematical way and it can be hugely valuable I also think if you look into",
    "start": "753240",
    "end": "759120"
  },
  {
    "text": "the future I believe uh that some more advanced type systems will start to",
    "start": "759120",
    "end": "764360"
  },
  {
    "text": "influence kind of more programming languages and if you can bring something into a programming languages type system",
    "start": "764360",
    "end": "769760"
  },
  {
    "text": "it does have the advantage that some of the performance problems of using a constraint solver for example start to",
    "start": "769760",
    "end": "775360"
  },
  {
    "text": "go away because you can rely entirely on local analysis so specific example dependent typing uh the ability to",
    "start": "775360",
    "end": "782639"
  },
  {
    "text": "actually have uh constraints actually expressed in your source code that say that limit the domain of particular",
    "start": "782639",
    "end": "788800"
  },
  {
    "text": "values like hey this is a number and I know for sure it's between the range of 0o to three uh and the type system can",
    "start": "788800",
    "end": "794839"
  },
  {
    "text": "kind of can prove this uh and and and uh do it in an efficient way I think we'll see more of that I also think another",
    "start": "794839",
    "end": "801360"
  },
  {
    "text": "example Daphne is a great language for people who haven't looked at it it's it's fantastic kind of shows kind of",
    "start": "801360",
    "end": "807120"
  },
  {
    "text": "what the future might hold but just some of the ideas around designed by contract for example actually being able to",
    "start": "807120",
    "end": "812720"
  },
  {
    "text": "specify uh requires clause and ures clauses and these sorts of things and then if you couple that with uh compile",
    "start": "812720",
    "end": "819480"
  },
  {
    "text": "time safety plus the potential for kind of fail fast so treating bugs as bugs",
    "start": "819480",
    "end": "825480"
  },
  {
    "text": "rather than letting them go silently I do think that leads to somewhere magical and I do expect that to start sort of",
    "start": "825480",
    "end": "831440"
  },
  {
    "text": "start impacting languages uh in the future So speaking about the intersection of some of these things um",
    "start": "831440",
    "end": "837959"
  },
  {
    "text": "one of the things that's interesting to me is how different organizations different teams have different needs so for example let's say you're working on",
    "start": "837959",
    "end": "843839"
  },
  {
    "text": "Java like formal specification is very important but of course you also have uh you know sort of the time scale that",
    "start": "843839",
    "end": "849079"
  },
  {
    "text": "you're working with is you're talking about like you know Java for the next 20 years um I work for a startup so uh we",
    "start": "849079",
    "end": "854639"
  },
  {
    "text": "also have the you know the very familiar experience of saying oh we're going to be running out of money in 18 months you",
    "start": "854639",
    "end": "860160"
  },
  {
    "text": "know so uh maybe you know uh some this these are sort of not all one- siiz",
    "start": "860160",
    "end": "865519"
  },
  {
    "text": "fits-all approaches right it's not probably not a good use of our time to write a formal specification for our",
    "start": "865519",
    "end": "870680"
  },
  {
    "text": "software Because by the time we finish it we might be dead um so uh you know with the understanding that different",
    "start": "870680",
    "end": "876360"
  },
  {
    "text": "organizations have different needs I think that the languages of the future are going to make it easier to make these trade-offs in an intelligent way",
    "start": "876360",
    "end": "883240"
  },
  {
    "text": "so maybe if you're just jamming out a prototype and you just the absolutely most important thing is that you get it",
    "start": "883240",
    "end": "889199"
  },
  {
    "text": "out to your users you know tomorrow maybe you do want something like the CSS approach but ideally you can then start",
    "start": "889199",
    "end": "895399"
  },
  {
    "text": "with that and then say okay now we can transition pretty easily from that with all the safety gone where we've piled up",
    "start": "895399",
    "end": "900480"
  },
  {
    "text": "a bunch of you know potential bugs for later and transition that to something where that is more fail fast that's more reliable for the future um and I think",
    "start": "900480",
    "end": "907759"
  },
  {
    "text": "the the one of the recurring themes that we're going to start seeing in languages of the future is that it becomes easier to make that swap so you don't have to",
    "start": "907759",
    "end": "914480"
  },
  {
    "text": "sort of sacrifice The Upfront velocity of just getting something out there and building a prototype um for the sake of",
    "start": "914480",
    "end": "921199"
  },
  {
    "text": "you know or you you don't have to load yourself up with future bugs in order to do that okay so for me that's all",
    "start": "921199",
    "end": "928600"
  },
  {
    "text": "interesting let's make it a bit more concrete things that people do every day we communicate between systems we send",
    "start": "928600",
    "end": "934360"
  },
  {
    "start": "930000",
    "end": "962000"
  },
  {
    "text": "messages we encode those messages we used to do it in XML a lot which was pretty terrible but at least it had some",
    "start": "934360",
    "end": "940720"
  },
  {
    "text": "types because youve been talking about types we then went to Jon we've even thrown away the types so all this formal",
    "start": "940720",
    "end": "946800"
  },
  {
    "text": "Theory come on guys like we seem to be going backwards rather than forwards and we're going to distribute it so how are",
    "start": "946800",
    "end": "952560"
  },
  {
    "text": "we going to get this safety if we're just going to pass around strings with no typing information at",
    "start": "952560",
    "end": "957920"
  },
  {
    "text": "all wor is better that seems to be what the",
    "start": "957920",
    "end": "963160"
  },
  {
    "text": "community has decided right I mean they had they had a number of things to choose from of how they might encode",
    "start": "963160",
    "end": "968480"
  },
  {
    "text": "messages across the wire and they picked from a computer science perspective what might be the worst possible Choice uh in",
    "start": "968480",
    "end": "974880"
  },
  {
    "text": "fact like going going back to um topic of specifications uh there was a great",
    "start": "974880",
    "end": "980079"
  },
  {
    "text": "uh a great post recently where someone um did an experiment with you know 30",
    "start": "980079",
    "end": "985480"
  },
  {
    "text": "different Json parsers and found that like no two EX accepted the exact same",
    "start": "985480",
    "end": "990680"
  },
  {
    "text": "language because there isn't a specification right but it's it's what the world has chosen to use is it linked",
    "start": "990680",
    "end": "996880"
  },
  {
    "text": "to debugging maybe people use these Protocols are these encodings because they're easy to",
    "start": "996880",
    "end": "1003920"
  },
  {
    "text": "debug my theory is uh is it has to do with a couple things um one is just sort of like programmer happiness like I",
    "start": "1004160",
    "end": "1010440"
  },
  {
    "start": "1005000",
    "end": "1097000"
  },
  {
    "text": "noticed that you know your comment was like XML is like something that you know everybody here would agree is not fun to",
    "start": "1010440",
    "end": "1015800"
  },
  {
    "text": "work with um and maybe not 100% but probably a lot of people whove spent a lot of time with XML probably don't have",
    "start": "1015800",
    "end": "1021399"
  },
  {
    "text": "the Fondest Memories of it um and Json is if nothing else it is at least something that's relatively familiar if",
    "start": "1021399",
    "end": "1027319"
  },
  {
    "text": "you're already familiar with JavaScript object syntax you can just sort of write it and there's not as much to learn which can make it more fun to work with",
    "start": "1027319",
    "end": "1033918"
  },
  {
    "text": "um I think that that's something that's sort of underrated in program programming language design is just like fun use you know user friendliness for",
    "start": "1033919",
    "end": "1040880"
  },
  {
    "text": "the programmer um we are all humans we respond to incentives right when when our tools are more delightful to use we",
    "start": "1040880",
    "end": "1046400"
  },
  {
    "text": "tend to gravitate towards those even if those are not necessarily as you know formally rigorous as other tools that",
    "start": "1046400",
    "end": "1052760"
  },
  {
    "text": "are out there um believe it or not one of the most popular releases of elm was one where it didn't have any like brand",
    "start": "1052760",
    "end": "1059600"
  },
  {
    "text": "new features in terms of productivity all it had were nicer compiler error messages it was just you know uh look",
    "start": "1059600",
    "end": "1066799"
  },
  {
    "text": "here's it's the same does the same thing as before but now it presents them in a nicer way and that was one of the most popular releases ever and it really just",
    "start": "1066799",
    "end": "1072880"
  },
  {
    "text": "like jumped elm's popularity massively not because it was something that was more reliable than before but just",
    "start": "1072880",
    "end": "1078039"
  },
  {
    "text": "because it did the same thing in a nicer way and I think figuring out ways for languages to be delightful while still",
    "start": "1078039",
    "end": "1084240"
  },
  {
    "text": "also rigorous and reliable and maintainable um is one of the challenges that that is sort of starting to come up",
    "start": "1084240",
    "end": "1090280"
  },
  {
    "text": "on our radar say like oh maybe we actually need both of these things if we want to be",
    "start": "1090280",
    "end": "1095679"
  },
  {
    "text": "successful and so I I think in this specific case I mean the internet has no",
    "start": "1095679",
    "end": "1101880"
  },
  {
    "start": "1097000",
    "end": "1201000"
  },
  {
    "text": "type system right so we've with Jason and everything we've sort of found the lowest common denominator that can kind",
    "start": "1101880",
    "end": "1108440"
  },
  {
    "text": "of sort ort of project into every language um and I think you know if you look I think this is a gap that",
    "start": "1108440",
    "end": "1114799"
  },
  {
    "text": "programming languages need to fill I think uh if you look at grpc and Proto",
    "start": "1114799",
    "end": "1120200"
  },
  {
    "text": "Buffs you know from from Google which are definitely not new they've been out for years and Google's using them internally for years it at least gives",
    "start": "1120200",
    "end": "1126600"
  },
  {
    "text": "you sort of a a type system to talk about things a way to provide an interface that is typed and provides a",
    "start": "1126600",
    "end": "1133280"
  },
  {
    "text": "little bit more static typing now it's not uh as Extreme as it could and it's a definitely a subset you have closer to",
    "start": "1133280",
    "end": "1139159"
  },
  {
    "text": "Jason than say goes full type system I think it's a huge step forward um and I",
    "start": "1139159",
    "end": "1144919"
  },
  {
    "text": "think the more we start thinking about these systems as programs and less about",
    "start": "1144919",
    "end": "1151120"
  },
  {
    "text": "kind of services that are treated differently in infrastructure that's about metadata and markup and these messy grungy things kind of low-level",
    "start": "1151120",
    "end": "1158240"
  },
  {
    "text": "details like you wouldn't start you know calling methods within your program and passing around Blobs of XML right so why",
    "start": "1158240",
    "end": "1165679"
  },
  {
    "text": "why would you do that kind of over the wire and I realiz this is getting uh dangerously close to like distributed uh",
    "start": "1165679",
    "end": "1172360"
  },
  {
    "text": "corba sort of uh territory so I definitely don't want to go there I think we've learned a lot since then but",
    "start": "1172360",
    "end": "1178320"
  },
  {
    "text": "I do think the internet can have a type system that straddles this line between being fun being flexible uh taking into",
    "start": "1178320",
    "end": "1186080"
  },
  {
    "text": "account all the things we've learned around versioning namely that you can't version things on the internet like it's",
    "start": "1186080",
    "end": "1192000"
  },
  {
    "text": "V2 it's V3 it's V4 or you deal with breaking changes I think you wrap all those lessons learn I think it can",
    "start": "1192000",
    "end": "1197919"
  },
  {
    "text": "actually be quite a beautiful thing and to pick up on the comment you made earlier about wouldn't it be nice",
    "start": "1197919",
    "end": "1204679"
  },
  {
    "start": "1201000",
    "end": "1328000"
  },
  {
    "text": "if uh you know our safety mechanisms had knobs that we can turn that say like I'm in rapid prototyping uh mode turn the",
    "start": "1204679",
    "end": "1211360"
  },
  {
    "text": "type system off I'm just going to write some code I want to see if I can get something out of it and then once I'm convinced I've written the right thing",
    "start": "1211360",
    "end": "1217880"
  },
  {
    "text": "turn up the knob so that I can get more protection uh that's a nice idea there's been a lot of attempts at doing that",
    "start": "1217880",
    "end": "1223559"
  },
  {
    "text": "with gradual and optional type systems they haven't stuck they're uh they're a little bit like what you were saying about for formal verification which is",
    "start": "1223559",
    "end": "1230320"
  },
  {
    "text": "they've been coming for a long time now it's like for for the last 10 years everyone's saying well gradual typing is",
    "start": "1230320",
    "end": "1235400"
  },
  {
    "text": "the next thing in type Theory and it's like well I'm still waiting for it but I'm still hopeful that we might get something out of it uh but in in I think",
    "start": "1235400",
    "end": "1242039"
  },
  {
    "text": "you know the mistake of adopting Json as the language of the internet is not that we picked something untyped is that we",
    "start": "1242039",
    "end": "1247720"
  },
  {
    "text": "picked something that we can't impose any type discipline on if we want right that there's no way to turn that knob",
    "start": "1247720",
    "end": "1253440"
  },
  {
    "text": "from fully untyped to I have you know some some way of validating what I",
    "start": "1253440",
    "end": "1258600"
  },
  {
    "text": "accept in what I Amit and and the coolest thing I've seen in this space that doesn't necessarily work on Json but but the approach might might carry",
    "start": "1258600",
    "end": "1264960"
  },
  {
    "text": "over is closure spec has anybody looked at closure spec this is so cool right so",
    "start": "1264960",
    "end": "1270720"
  },
  {
    "text": "so it's essentially an optional static type system for sets and Maps so you can",
    "start": "1270720",
    "end": "1276400"
  },
  {
    "text": "talk about here you know I accept this you know this this this hash and these",
    "start": "1276400",
    "end": "1281640"
  },
  {
    "text": "keys are required and these keys are optional and if the skis keys are present then their values conform to",
    "start": "1281640",
    "end": "1286840"
  },
  {
    "text": "this other specification and it's it's something that you can add on after the fact you can turn it on or turn it off",
    "start": "1286840",
    "end": "1292080"
  },
  {
    "text": "in production um and it's a it's a very nice way to bring in a little bit more",
    "start": "1292080",
    "end": "1298120"
  },
  {
    "text": "reliability once you've figured out what your you want your system to do it's a really pretty example and I it it fits",
    "start": "1298120",
    "end": "1304159"
  },
  {
    "text": "nicely also with generative testing uh which is probably like you know testing is one of your other questions on the back of your envelope there Martin uh",
    "start": "1304159",
    "end": "1311000"
  },
  {
    "text": "you know that that that that you know writing specs for what your uh you know what your functions accept and emit uh",
    "start": "1311000",
    "end": "1316880"
  },
  {
    "text": "means that you can write test generators that will generate conformance and nonconformance stuff uh it's it's it's",
    "start": "1316880",
    "end": "1322600"
  },
  {
    "text": "really pretty so I would take a look at closure spec there's a lot of really original thinking there so uh we're focusing on Jason",
    "start": "1322600",
    "end": "1330400"
  },
  {
    "start": "1328000",
    "end": "1375000"
  },
  {
    "text": "because we sort of think that that's the way that we exchange messages and in some sense we do in the sense that we're exchanging application data but far more",
    "start": "1330400",
    "end": "1337679"
  },
  {
    "text": "than that what we actually do is use IP TCP layered over IP and TLS lay layered",
    "start": "1337679",
    "end": "1345799"
  },
  {
    "text": "over TCP these things are formally specific speci ified um extensively so",
    "start": "1345799",
    "end": "1350919"
  },
  {
    "text": "tls1.3 is progressing extremely well uh",
    "start": "1350919",
    "end": "1356200"
  },
  {
    "text": "people are building formally verified implementations of TLS multiple companies are building uh such things",
    "start": "1356200",
    "end": "1363720"
  },
  {
    "text": "uh when we look at the incredible progress that's being made on that front I think it should be it should encourage",
    "start": "1363720",
    "end": "1369559"
  },
  {
    "text": "us as to the progress that we can make with application data and metadata um going back to gradual typing",
    "start": "1369559",
    "end": "1376760"
  },
  {
    "start": "1375000",
    "end": "1554000"
  },
  {
    "text": "um so I'm going to make a claim right now since on the future of programming languages panel I'm going to make the claim gradual typing is not the future I",
    "start": "1376760",
    "end": "1383640"
  },
  {
    "text": "think it's a failed experiment um I think like we've seen like uh so closure has a gradual typing thing and if you uh",
    "start": "1383640",
    "end": "1390159"
  },
  {
    "text": "so Circle CI did an interesting series of blog posts a year apart the first is why we're embracing gradual typing with",
    "start": "1390159",
    "end": "1396120"
  },
  {
    "text": "cord. typed and then a year later why it didn't work and we're tearing it all out and going back to untyped um and I I",
    "start": "1396120",
    "end": "1402640"
  },
  {
    "text": "think what it has to do with is whether this is opt in versus opt out and I think if you make typing opt in the",
    "start": "1402640",
    "end": "1408600"
  },
  {
    "text": "results is that you end up with a lot of libraries that really are not getting the benefit of the type you're you're not you the ecosystem is not designed",
    "start": "1408600",
    "end": "1414679"
  },
  {
    "text": "with that in mind um I have heard of an alternative to this um I haven't personally used it uh but hasell has",
    "start": "1414679",
    "end": "1420120"
  },
  {
    "text": "this and I I I'm not a Hasler um so I don't really know but I'm aware that it has so hasle is type checked everything",
    "start": "1420120",
    "end": "1426840"
  },
  {
    "text": "is is uh verified at compile time to the extent possible um but there's a compiler flag you can set that says okay",
    "start": "1426840",
    "end": "1432960"
  },
  {
    "text": "sort of uh just turn off all the safeties and anywhere you find a type mismatch just keep compiling but turn",
    "start": "1432960",
    "end": "1438640"
  },
  {
    "text": "that into a runtime exception if that branch of code ever gets run and so the idea here would be that by default",
    "start": "1438640",
    "end": "1443840"
  },
  {
    "text": "everything is type checked but if you're in prototyping mode or whatever and you're like Midway through a re refactor",
    "start": "1443840",
    "end": "1449000"
  },
  {
    "text": "and you want to just see if something works um you can do that and sort of opt into the the lack of safety um that's",
    "start": "1449000",
    "end": "1455400"
  },
  {
    "text": "really interesting to me I I haven't tried it but it does sound like a better way to approach it than the other way around with gradual typing um one thing",
    "start": "1455400",
    "end": "1462559"
  },
  {
    "text": "that's sort of an interesting experience that we've had with Elm so uh I don't know how many people saw my talk on",
    "start": "1462559",
    "end": "1467640"
  },
  {
    "text": "Monday but um we've been using El in production since 2015 about 100,000 lines of elm code and like two billion",
    "start": "1467640",
    "end": "1473840"
  },
  {
    "text": "questions answered by students we still have not gotten a single runtime exception from our Elm code like not even one and um that's because of elm's",
    "start": "1473840",
    "end": "1481679"
  },
  {
    "text": "compiler absolutely and because of the type system um and and the language is designed but the the you know the idea",
    "start": "1481679",
    "end": "1487960"
  },
  {
    "text": "that if we were in local development mode and we were to say okay just turn that off just for now while I'm doing",
    "start": "1487960",
    "end": "1493200"
  },
  {
    "text": "this refactor um especially if that's going to you know compile but exit with you know non-zero exit so it would fail",
    "start": "1493200",
    "end": "1499159"
  },
  {
    "text": "all of our CI builds and people would not check that in um it doesn't seem crazy to me that we would still have",
    "start": "1499159",
    "end": "1505000"
  },
  {
    "text": "that same level of reliability while still getting to you know sort of have our cake and eat it too with fast",
    "start": "1505000",
    "end": "1510039"
  },
  {
    "text": "prototyping when we needed it um that doesn't sound crazy to me but when I look at what gradual typing you know",
    "start": "1510039",
    "end": "1515440"
  },
  {
    "text": "seems to be doing in practice it doesn't seem to be getting there you don't hear about gradually typed languages where people are saying yeah we've gone for",
    "start": "1515440",
    "end": "1520960"
  },
  {
    "text": "like two years in production with no runtime exceptions I never hear stories like that um so you know it seems to me",
    "start": "1520960",
    "end": "1527080"
  },
  {
    "text": "that it it was a nice idea IDE but I don't think it's going to work out Tim Jones at uh Victoria University in",
    "start": "1527080",
    "end": "1532760"
  },
  {
    "text": "Wellington New Zealand wrote a paper called gradual typing is morally wrong and we're all monsters",
    "start": "1532760",
    "end": "1539120"
  },
  {
    "text": "now his entire PhD thesis was on gradual typing and he wrote it just after finishing as a reputation to his own",
    "start": "1539360",
    "end": "1545679"
  },
  {
    "text": "thesis and it's well worth reading if anyone ever considers going down that route uh Richard's",
    "start": "1545679",
    "end": "1553640"
  },
  {
    "text": "right so this morning Joe you made the comment about the lines is more important than the boxes so because this",
    "start": "1553840",
    "end": "1559840"
  },
  {
    "start": "1554000",
    "end": "1691000"
  },
  {
    "text": "is where we're kind of drifting off in we're very much going into distributed computing we're seeing advances in",
    "start": "1559840",
    "end": "1565039"
  },
  {
    "text": "platforms also we're not seeing so much advances in languages usually when we're doing IO and languages it's a pain",
    "start": "1565039",
    "end": "1571679"
  },
  {
    "text": "what's what's going to change are people caring about this yeah so what I meant by that is",
    "start": "1571679",
    "end": "1578480"
  },
  {
    "text": "really um it is funny when you're focusing on you know a single process system that process is kind of pristine",
    "start": "1578480",
    "end": "1585440"
  },
  {
    "text": "you know the failure of that process is the end of the world like you never want that to happen and so you go to Great Lengths to secure yourself against that",
    "start": "1585440",
    "end": "1592480"
  },
  {
    "text": "by using um formal verification or at the very least you know aggressive",
    "start": "1592480",
    "end": "1597520"
  },
  {
    "text": "assertions etc etc in a distributed system you kind of don't care sure there are some important processes like you",
    "start": "1597520",
    "end": "1603760"
  },
  {
    "text": "don't want your uh Master node and your paxos uh system to go down ideally even",
    "start": "1603760",
    "end": "1609679"
  },
  {
    "text": "though it would recover form it um but really it's the communication topology between nodes that matters more and the",
    "start": "1609679",
    "end": "1616919"
  },
  {
    "text": "ability to recover those those connections between the nodes um and the failure of one ideally is not",
    "start": "1616919",
    "end": "1623039"
  },
  {
    "text": "catastrophic if you've architectured your system correctly um and I think that sort of gets back to a lot of the",
    "start": "1623039",
    "end": "1630360"
  },
  {
    "text": "the theme that kind of is recurring which is you know the programming languages need to",
    "start": "1630360",
    "end": "1636039"
  },
  {
    "text": "increasingly be about helping you to build correct distributed systems just as programming languages today compared",
    "start": "1636039",
    "end": "1643200"
  },
  {
    "text": "to 10 15 years ago help you to build correct concurrent systems and we really",
    "start": "1643200",
    "end": "1648600"
  },
  {
    "text": "haven't seen that and the question is it's harder it's much harder because we get into the Json question uh it's a",
    "start": "1648600",
    "end": "1654919"
  },
  {
    "text": "polyglot world like everything is heterogeneous everything speaks a different language and so how could you",
    "start": "1654919",
    "end": "1660399"
  },
  {
    "text": "possibly have a language that helps you to bridge that Gap when the thing on the other side of the connection may be",
    "start": "1660399",
    "end": "1666519"
  },
  {
    "text": "written in a completely different language uh the type system really can't span many processes or many nodes in a",
    "start": "1666519",
    "end": "1673159"
  },
  {
    "text": "cluster um or if it does we need to have some sort of type system of the internet if you will that every agrees on ideally",
    "start": "1673159",
    "end": "1679240"
  },
  {
    "text": "something that's much better than Jason so I won't say that this is a solve problem but I do think this is a problem",
    "start": "1679240",
    "end": "1684880"
  },
  {
    "text": "that programming languages do need to solve uh ideally",
    "start": "1684880",
    "end": "1690279"
  },
  {
    "text": "quickly uh something that's interesting to me along those lines is um so we've been talking about sort of broadly speaking guarantees and we we've talked",
    "start": "1690600",
    "end": "1697080"
  },
  {
    "start": "1691000",
    "end": "1800000"
  },
  {
    "text": "a lot about like type guarantees um but there are other guarantees that can or cannot be baked into a language and they",
    "start": "1697080",
    "end": "1702799"
  },
  {
    "text": "have different trade-offs um especially when it comes to things like concurrency um so uh speaking again again in terms",
    "start": "1702799",
    "end": "1708480"
  },
  {
    "text": "of elm so like in Elm everything is immutable and everything is a pure function you you can't write functions",
    "start": "1708480",
    "end": "1713840"
  },
  {
    "text": "that have side effects when you call them and you can't write functions that mutate anything um and so this rules out",
    "start": "1713840",
    "end": "1720360"
  },
  {
    "text": "a lot of possible concurrency related problems um so Evan if he were here I guess he would say because i' I've heard",
    "start": "1720360",
    "end": "1726000"
  },
  {
    "text": "him talk about this in the past um there are lots of different ways with handling problems of you know what happens when",
    "start": "1726000",
    "end": "1732080"
  },
  {
    "text": "data changes in various ways um so like you've heard maybe heard of like reactive extensions and streams and like",
    "start": "1732080",
    "end": "1737720"
  },
  {
    "text": "uh you know event listeners and things like that to sort of react to the idea of data changing in a somewhat",
    "start": "1737720",
    "end": "1743559"
  },
  {
    "text": "imperative somewhat functional way um but Evan makes the point that if you just say everything is immutable um then",
    "start": "1743559",
    "end": "1750039"
  },
  {
    "text": "you you sort of don't have that problem because you substituted it with a different problem the different problem is that you sort of have to rethink how",
    "start": "1750039",
    "end": "1756320"
  },
  {
    "text": "you're going to write your code uh but once you do learn how to write code in that different style and you get comfortable with it um then all of these",
    "start": "1756320",
    "end": "1763240"
  },
  {
    "text": "problems get sort of ruled out right you have this guarantee that you can't have like a concurrent modification of the",
    "start": "1763240",
    "end": "1768399"
  },
  {
    "text": "same piece of data because all the data is immutable you just can't do that even by accident um and so it's interesting",
    "start": "1768399",
    "end": "1774760"
  },
  {
    "text": "to me to think about you know a as languages evolve um how much of it is going to be trying to find solutions to",
    "start": "1774760",
    "end": "1781760"
  },
  {
    "text": "these problems within the current set of features that people are accustomed to and how much of it is going to say look",
    "start": "1781760",
    "end": "1787279"
  },
  {
    "text": "if we draw these guarantee lines in a different place can programmers adapt and just like learn how to get",
    "start": "1787279",
    "end": "1792840"
  },
  {
    "text": "comfortable programming with this different set of rules where these problems can't happen anymore",
    "start": "1792840",
    "end": "1799960"
  },
  {
    "text": "so so um you know Joe Joe talked about how um languages need to get better at",
    "start": "1801399",
    "end": "1806880"
  },
  {
    "text": "helping us solve distributed problems and and in the short term I'm not seeing an awful lot of evidence of that",
    "start": "1806880",
    "end": "1812679"
  },
  {
    "text": "happening in in the mainstream programming community and in fact in some sense I think we're going in in in in the wrong direction because as we um",
    "start": "1812679",
    "end": "1820159"
  },
  {
    "text": "as our program saw as on average gets smaller because we're breaking up our programs into microservices or uh",
    "start": "1820159",
    "end": "1826919"
  },
  {
    "text": "serverless or any any number of programming paradigms that exploit the fact that um Network",
    "start": "1826919",
    "end": "1832720"
  },
  {
    "text": "bandwidth is really cheap um and so you can you know break up your program into",
    "start": "1832720",
    "end": "1837880"
  },
  {
    "text": "separate Loosely coupled entities without a lot of cost people tend to make their programming language choices",
    "start": "1837880",
    "end": "1843360"
  },
  {
    "text": "on the basis of what's convenient for you know for for productivity what's easier for me to get this you know up",
    "start": "1843360",
    "end": "1848960"
  },
  {
    "text": "and running and so you see you know people choosing languages I won't name any names uh but you know some some of",
    "start": "1848960",
    "end": "1855639"
  },
  {
    "text": "the more popular languages in this space offer you know nothing in the way of Joe's three safeties right but that's",
    "start": "1855639",
    "end": "1861519"
  },
  {
    "text": "what the market is choosing right so I I I think the um the availability of cheat bandwidth is in some sense making",
    "start": "1861519",
    "end": "1869039"
  },
  {
    "text": "programming languages less relevant which is kind of a shame because I think programming languages have a lot to offer in terms of solving these problems",
    "start": "1869039",
    "end": "1875679"
  },
  {
    "text": "but short-term expediency sometimes outweighs uh you know outweighs the big picture now I will point out there there",
    "start": "1875679",
    "end": "1882559"
  },
  {
    "start": "1881000",
    "end": "1935000"
  },
  {
    "text": "are some successful examples and it t it tends to be in sort of the more domain M",
    "start": "1882559",
    "end": "1888240"
  },
  {
    "text": "specific realm so you know spark for example or just map reduce generally um",
    "start": "1888240",
    "end": "1894279"
  },
  {
    "text": "the the when you when you have a domain specific programming language or programming model that is sort of a a",
    "start": "1894279",
    "end": "1900760"
  },
  {
    "text": "language plus some framework or libraries you use plus a runtime that takes care of scheduling for you um then",
    "start": "1900760",
    "end": "1906760"
  },
  {
    "text": "you can have this nice beautiful model that is consistent and and has a richer",
    "start": "1906760",
    "end": "1912480"
  },
  {
    "text": "type system and richer capabilities with it the problem really is when you run into kind of the boundary of that system",
    "start": "1912480",
    "end": "1918320"
  },
  {
    "text": "and you want to interact with other systems and it's more of an open-ended uh problem I think that's kind of where",
    "start": "1918320",
    "end": "1923760"
  },
  {
    "text": "Things fall down uh today and there's clearly a limit to how long you can stay within the confines of a very specific",
    "start": "1923760",
    "end": "1930240"
  },
  {
    "text": "domain specific uh solution so that's kind of interesting",
    "start": "1930240",
    "end": "1936039"
  },
  {
    "start": "1935000",
    "end": "2057000"
  },
  {
    "text": "you're going off into that way but I heard a lot of different mentions along the VAR qualities of service like some",
    "start": "1936039",
    "end": "1941200"
  },
  {
    "text": "people call nonfunctional requirements yet we don't see a lot of that being addressed like as we go forward",
    "start": "1941200",
    "end": "1946519"
  },
  {
    "text": "performance is clearly becom more of an issue not just in raw through but saving battery life so we pars Jon on our",
    "start": "1946519",
    "end": "1953279"
  },
  {
    "text": "phones we're just going to eat our batteries we do all of this in the browser same sort of thing but you also",
    "start": "1953279",
    "end": "1959320"
  },
  {
    "text": "see it with reliability with all sorts of other things but for me I spent a lot of time performance we look at how",
    "start": "1959320",
    "end": "1966279"
  },
  {
    "text": "Hardware is going bandwidth is going up Generation by generation sometimes doubling sometimes going up orders of",
    "start": "1966279",
    "end": "1971880"
  },
  {
    "text": "magnitude accumulated latency we're not getting any better we're not seeing any",
    "start": "1971880",
    "end": "1977440"
  },
  {
    "text": "evolution tion in fpis at a significant level within languages or the run times",
    "start": "1977440",
    "end": "1982960"
  },
  {
    "text": "that we need to go async it's not happening why are people not doing",
    "start": "1982960",
    "end": "1989480"
  },
  {
    "text": "that use asynchronous languages they exist yeah uh but I to be more serious",
    "start": "1989480",
    "end": "1997840"
  },
  {
    "text": "in terms of that I think that performance is incredibly critical and people often dismiss it and say well my",
    "start": "1997840",
    "end": "2003760"
  },
  {
    "text": "particular application doesn't need to run fast it may not need to run fast but it absolutely needs to run cheap and",
    "start": "2003760",
    "end": "2009639"
  },
  {
    "text": "that means that performance should be a consideration for every possible application and cheap on a phone is",
    "start": "2009639",
    "end": "2015559"
  },
  {
    "text": "about battery life it's about what you can conserve so that you can run longer",
    "start": "2015559",
    "end": "2020600"
  },
  {
    "text": "and that means that the only thing better than fast code is no code at all and some of the techniques that we've been talking about up here like type",
    "start": "2020600",
    "end": "2028080"
  },
  {
    "text": "systems and memory safety and even going all the way to formal verification involve taking things out of the dynamic",
    "start": "2028080",
    "end": "2033799"
  },
  {
    "text": "world and putting them into the static World things that you can solve statically so that they simply don't have to be checked at",
    "start": "2033799",
    "end": "2040039"
  },
  {
    "text": "runtime uh that's a big deal is and as much as async is a big deal and I think",
    "start": "2040039",
    "end": "2046360"
  },
  {
    "text": "it is um those lifting things into the static world is how you get to more a",
    "start": "2046360",
    "end": "2053760"
  },
  {
    "text": "synchronous and faster programs also interestingly what we",
    "start": "2053760",
    "end": "2058878"
  },
  {
    "start": "2057000",
    "end": "2129000"
  },
  {
    "text": "found in the Midori project it was interesting because it was ENT you can think of it as um every process was",
    "start": "2058879",
    "end": "2066320"
  },
  {
    "text": "decomposed into a very fine GR process and but you can think of it as more like a container sort of uh connected through",
    "start": "2066320",
    "end": "2071560"
  },
  {
    "text": "RPC and the whole system was built this way so like the the file system itself you know was a separate process and the",
    "start": "2071560",
    "end": "2078118"
  },
  {
    "text": "Nick driver was a separate process and it was all kind of message passing and",
    "start": "2078119",
    "end": "2083960"
  },
  {
    "text": "interestingly um with a with a aggressively optimizing compiler kind of behind the scenes but interestingly um",
    "start": "2083960",
    "end": "2091280"
  },
  {
    "text": "this this trend towards finder and finder gr processes actually has one advantage to it from a performance",
    "start": "2091280",
    "end": "2096878"
  },
  {
    "text": "standpoint which is is smaller GC heaps and GC heaps that can be collected independently of one another we have",
    "start": "2096879",
    "end": "2103440"
  },
  {
    "text": "fantastic parallel and concurrent gc's but nevertheless there's shared data structures whenever you need to do a",
    "start": "2103440",
    "end": "2109640"
  },
  {
    "text": "collection even in the most uh Advanced parallel garbage collector and actually having independent heaps that can be",
    "start": "2109640",
    "end": "2116280"
  },
  {
    "text": "collected independently helps the overall throughput of the system uh and forward progress and so I think you know",
    "start": "2116280",
    "end": "2121760"
  },
  {
    "text": "that there are many disadvantages to the trend towards you know smaller and smaller processes but that that's one of",
    "start": "2121760",
    "end": "2126839"
  },
  {
    "text": "the advantages so to the question of why like how did we get here I have a theory that",
    "start": "2126839",
    "end": "2133040"
  },
  {
    "start": "2129000",
    "end": "2271000"
  },
  {
    "text": "involves two languages um and and how they got popular uh so one language is Javascript and the other language is Ruby uh so JavaScript I claim got",
    "start": "2133040",
    "end": "2140440"
  },
  {
    "text": "popular um not because of Any intrinsic Merit to the language itself but just because the web got popular like browsers blew up it's an amazing",
    "start": "2140440",
    "end": "2146760"
  },
  {
    "text": "deployment mechanism you type in the application you want you press enter and then you've got it and no installation nothing um it's hard to compete with",
    "start": "2146760",
    "end": "2152880"
  },
  {
    "text": "that like you can't really do better than one step that's the next step is zero and then you the computer has to read your mind to to get you the",
    "start": "2152880",
    "end": "2158160"
  },
  {
    "text": "application faster um so I think doing that um caused JavaScript to get popular",
    "start": "2158160",
    "end": "2163640"
  },
  {
    "text": "because that was sort of the only way you could get that application deployment experience javascript's single threaded right and um it's not",
    "start": "2163640",
    "end": "2169880"
  },
  {
    "text": "really optimizing for any of the things you're talking about it works with strings a lot and so people sort of made progress in in uh JavaScript like if you",
    "start": "2169880",
    "end": "2176960"
  },
  {
    "text": "remember how Json originally you know came to be it wasn't that browsers started off writing native C extensions",
    "start": "2176960",
    "end": "2183200"
  },
  {
    "text": "to parse Json as fast as possible was that Douglas crockford said I want a thing that does this thing I've got strings to work with I'm going to invent",
    "start": "2183200",
    "end": "2189480"
  },
  {
    "text": "this format that was it and then it got popular um similarly Ruby also single-threaded um was not a very",
    "start": "2189480",
    "end": "2195720"
  },
  {
    "text": "popular language until rails came out and the thing as I understand it that that popularized rails was about a",
    "start": "2195720",
    "end": "2201240"
  },
  {
    "text": "20-minute YouTube video saying check it out I can make a Blog engine from scratch in 20 minutes using this thing",
    "start": "2201240",
    "end": "2206280"
  },
  {
    "text": "called rails and at the time a lot of people were feeling like I can't build stuff that fast it's it's a lot of ceremony it's a lot of setup time it's",
    "start": "2206280",
    "end": "2212800"
  },
  {
    "text": "just not as fun and we're programmers we like to have fun so people gravitate towards that they say rails is something",
    "start": "2212800",
    "end": "2218560"
  },
  {
    "text": "that will let me enjoy programming um but I think both of these put together make it so that it becomes more normal",
    "start": "2218560",
    "end": "2224599"
  },
  {
    "text": "and more acceptable to have single-threaded stuff that's not focused on performance like Ruby's not",
    "start": "2224599",
    "end": "2229640"
  },
  {
    "text": "performance focused JavaScript wasn't for a very long time until the browser Wars of 2008 when they sort of started",
    "start": "2229640",
    "end": "2235040"
  },
  {
    "text": "fighting over optimizing this stuff with jits as fast as possible but in both of those cases you know talking about what",
    "start": "2235040",
    "end": "2241000"
  },
  {
    "text": "what the market once I think the fact that Ruby and JavaScript became normal",
    "start": "2241000",
    "end": "2246040"
  },
  {
    "text": "programming languages and you saw saw no no. JS you know come out of javascript's you know ubiquity on the front end um",
    "start": "2246040",
    "end": "2252040"
  },
  {
    "text": "all of these things are sort of coming together to make it the idea that this is fine this is normal everybody can get",
    "start": "2252040",
    "end": "2257760"
  },
  {
    "text": "stuff done in this way performance isn't that important you know latency is not something we need to worry about um and",
    "start": "2257760",
    "end": "2263920"
  },
  {
    "text": "yeah maybe over time uh we will we will come to regret that but I think that that does answer the question of why at",
    "start": "2263920",
    "end": "2269280"
  },
  {
    "text": "least to my mind and and to follow up on that story about about Ruby so it it it illustrates",
    "start": "2269280",
    "end": "2277040"
  },
  {
    "start": "2271000",
    "end": "2385000"
  },
  {
    "text": "um you know the fact that I think we're we're only looking at half the story we're looking at the developer facing half of the story when we make some of",
    "start": "2277040",
    "end": "2282960"
  },
  {
    "text": "our technology selection choices right so rubby got you know um you know was around for a very long time it was this",
    "start": "2282960",
    "end": "2289680"
  },
  {
    "text": "you know minority thing and then all of a sudden when rails came out and got popularized it um Ruby really caught on",
    "start": "2289680",
    "end": "2295640"
  },
  {
    "text": "and people loved it it would it uh made it really easy to uh incrementally build a data driven web application uh you",
    "start": "2295640",
    "end": "2302359"
  },
  {
    "text": "know in little one little bit at a time and it was great but uh it performed",
    "start": "2302359",
    "end": "2307480"
  },
  {
    "text": "terbly when you went to deploy it and you know so Twitter had an interesting story where you know they they had originally developed most of their",
    "start": "2307480",
    "end": "2312800"
  },
  {
    "text": "infrastructure in Ruby uh they felt like it gave them big productivity advance of doing so but then when they started to",
    "start": "2312800",
    "end": "2318680"
  },
  {
    "text": "get popular they were adding up what their Computing bill was and it was astronomical uh and they went through a",
    "start": "2318680",
    "end": "2325520"
  },
  {
    "text": "process where they rewrote everything in uh some combination of Scola and Java running on the jvm and their Hardware",
    "start": "2325520",
    "end": "2333280"
  },
  {
    "text": "cost went down by over a factor of a 100 um and",
    "start": "2333280",
    "end": "2338359"
  },
  {
    "text": "uh not not I I I say that not to trumpet Java success even though I'm sort of",
    "start": "2338359",
    "end": "2343800"
  },
  {
    "text": "obligated to by my employer but to point out that um that that when people talk",
    "start": "2343800",
    "end": "2349400"
  },
  {
    "text": "about Java or C uh or or any any language ecosystem there's the source",
    "start": "2349400",
    "end": "2355160"
  },
  {
    "text": "language you program in which is what we as developers are obsessed with because we spend all our time looking at code",
    "start": "2355160",
    "end": "2360240"
  },
  {
    "text": "and then there's the runtime which is really kind of the important part right and that's where all your deployment",
    "start": "2360240",
    "end": "2366160"
  },
  {
    "text": "economies come from it's where all your debug ability comes from it's where monitorability comes from it's where serviceability comes from uh but as",
    "start": "2366160",
    "end": "2373839"
  },
  {
    "text": "developers because we're focused on code we think the the surface language is really the important part but in a lot",
    "start": "2373839",
    "end": "2380720"
  },
  {
    "text": "of ways runtimes matter way way more than programming languages do yeah this is reminding me funny story",
    "start": "2380720",
    "end": "2388359"
  },
  {
    "start": "2385000",
    "end": "2479000"
  },
  {
    "text": "uh at Microsoft so we were porting an existing system which is actually used for Mission critical things so in this",
    "start": "2388359",
    "end": "2393680"
  },
  {
    "text": "case it was the real-time bidding engine for B add um and it's a large scale",
    "start": "2393680",
    "end": "2399520"
  },
  {
    "text": "thing so on a regular basis every hour it crawls um terabytes and terabytes of data and what we found was uh for every",
    "start": "2399520",
    "end": "2407079"
  },
  {
    "text": "1K of data that's actually was persisted on disk the program would allocate",
    "start": "2407079",
    "end": "2413119"
  },
  {
    "text": "8K of of just garbage objects so strings and this and what it was doing was",
    "start": "2413119",
    "end": "2419440"
  },
  {
    "text": "actually loading up something off disk parsing a blob of Json into memory splitting the Json by looking for commas",
    "start": "2419440",
    "end": "2427040"
  },
  {
    "text": "it which which of course allocates a bunch of substrings into an array which itself is another object and then",
    "start": "2427040",
    "end": "2432480"
  },
  {
    "text": "continuing to go on and on and do this and so this was running across terabytes of data and it turns out this was you",
    "start": "2432480",
    "end": "2440200"
  },
  {
    "text": "know you could have written this terrible code in any language really um the the framework itself so building on",
    "start": "2440200",
    "end": "2447839"
  },
  {
    "text": "Brian's point that the runtime is important the framework in the library itself is also very important because it kind of encourages a coding style so if",
    "start": "2447839",
    "end": "2454520"
  },
  {
    "text": "you walk up to the string API in C well it's got these handy dot split methods",
    "start": "2454520",
    "end": "2459760"
  },
  {
    "text": "and so on and so forth that will happily allocate allocate tons and tons of memory on your behalf um so this is an",
    "start": "2459760",
    "end": "2465440"
  },
  {
    "text": "example where the language and the the framework can help I I love you know go slices for this this reason where you",
    "start": "2465440",
    "end": "2471480"
  },
  {
    "text": "can actually just say hey you know I just want these few bites in the middle of a string and not have to allocate an entirely new",
    "start": "2471480",
    "end": "2478599"
  },
  {
    "text": "substring yeah I'd like to actually pick up enough because it's a lot of what I've seen and measured many performance",
    "start": "2478760",
    "end": "2483880"
  },
  {
    "start": "2479000",
    "end": "2786000"
  },
  {
    "text": "issues I see in the wild are fpi design and not from mental language design yet",
    "start": "2483880",
    "end": "2489079"
  },
  {
    "text": "it doesn't seem to get anywhere near the same love what can we do to get better at",
    "start": "2489079",
    "end": "2495520"
  },
  {
    "text": "that well I think static analysis can help I think having the right fundamental Primitives helps I mean that",
    "start": "2495839",
    "end": "2501839"
  },
  {
    "text": "that's why I mentioned the go thing um you know before I left Microsoft I spent",
    "start": "2501839",
    "end": "2507400"
  },
  {
    "text": "two years leading up to the time when I left and I think it will finally ship in C S potentially adding slices into the",
    "start": "2507400",
    "end": "2514200"
  },
  {
    "text": "language but it's so hard to retrofit after the fact because because you know at least go had them from day one where",
    "start": "2514200",
    "end": "2520520"
  },
  {
    "text": "an array is a slice a string is essentially just you know a slice of utfa bytes and so on and so forth so you",
    "start": "2520520",
    "end": "2527880"
  },
  {
    "text": "the all the apis were built around the right fundamental concepts it's hard to recover that after the fact you know all",
    "start": "2527880",
    "end": "2534400"
  },
  {
    "text": "of the net apis except strings um you know the streaming apis for example take a bite array so if you walk up with you",
    "start": "2534400",
    "end": "2541640"
  },
  {
    "text": "know bite star okay now you need to copy into into manage memory so some of those fundamental things you have to get right",
    "start": "2541640",
    "end": "2548119"
  },
  {
    "text": "from day one but a lot of it you can catch through static analysis and just sharing knowledge it also it needs to be",
    "start": "2548119",
    "end": "2555200"
  },
  {
    "text": "part of the culture of the language like that that is one thing I like about the go culture it's very minimalistic and",
    "start": "2555200",
    "end": "2561520"
  },
  {
    "text": "very attuned to these sorts of uh challenges like it is overly",
    "start": "2561520",
    "end": "2567400"
  },
  {
    "text": "minimalistic I think it's closer to C than you know say um modern languages",
    "start": "2567400",
    "end": "2573119"
  },
  {
    "text": "but U that is one thing it's embedded in the community so I think people just kind of are on the lookout for that sort",
    "start": "2573119",
    "end": "2579480"
  },
  {
    "text": "of thing cool and so following up on on uh",
    "start": "2579480",
    "end": "2585359"
  },
  {
    "text": "language uh Community culture uh so scw strip said language design is Library design and Library design is language",
    "start": "2585359",
    "end": "2591440"
  },
  {
    "text": "design and what he meant was uh we we we tend to think about when we're thinking about language features we tend to think",
    "start": "2591440",
    "end": "2598240"
  },
  {
    "text": "about well what kind of libraries do I want to be able to express easily right so the um the the natural apis that you",
    "start": "2598240",
    "end": "2606119"
  },
  {
    "text": "can write in a given language anguage and the features of that language are pretty much inextricably bound and if",
    "start": "2606119",
    "end": "2612000"
  },
  {
    "text": "you're if you're good you will actually think about that explicitly rather than implicitly when you're designing um when",
    "start": "2612000",
    "end": "2617960"
  },
  {
    "text": "you're designing things but languages do tend to encourage certain kinds of API patterns uh and and so if you have as",
    "start": "2617960",
    "end": "2624800"
  },
  {
    "text": "you say the wrong Primitives you're going to build the wrong apis any hope of nio getting better in",
    "start": "2624800",
    "end": "2630920"
  },
  {
    "text": "the future Brian sure it's been a while okay this stage",
    "start": "2630920",
    "end": "2636839"
  },
  {
    "text": "at like to open it up a bit and do we have any questions from the audience yeah one over here I'll run",
    "start": "2636839",
    "end": "2644280"
  },
  {
    "text": "around if we oh we've got a microphone over there thank you I I would love to know",
    "start": "2644280",
    "end": "2651680"
  },
  {
    "text": "uh if you if you exclude your own languages the ones that you've worked on um if you could pick another language as",
    "start": "2651680",
    "end": "2657280"
  },
  {
    "text": "your everyday Workhorse language which one would you like to work with and learn and play with and why",
    "start": "2657280",
    "end": "2664599"
  },
  {
    "text": "I I'll go clure um basically because everybody I",
    "start": "2669240",
    "end": "2675559"
  },
  {
    "text": "know who's working in clure is just so happy about it that you know that that",
    "start": "2675559",
    "end": "2681599"
  },
  {
    "text": "looks great I think strangely not that I want to use it but that I want to learn from",
    "start": "2681599",
    "end": "2687599"
  },
  {
    "text": "it it's Excel uh Excel has 500 million",
    "start": "2687599",
    "end": "2693280"
  },
  {
    "text": "programmers just let that sink in for a second it's also uh a functional language and a functional reactive",
    "start": "2693280",
    "end": "2699520"
  },
  {
    "text": "programming framework that's been highly effective for about 30 years we have a lot to learn from Excel",
    "start": "2699520",
    "end": "2706480"
  },
  {
    "text": "strangely people can approach it and use it they they have fun using it which I think is a theme from what we're just",
    "start": "2706480",
    "end": "2712359"
  },
  {
    "text": "been talking about that's hugely important I don't know quite how to learn from it but I think I",
    "start": "2712359",
    "end": "2720200"
  },
  {
    "text": "should so I do program every day now I uh left my management job and I'm",
    "start": "2720680",
    "end": "2726760"
  },
  {
    "text": "actually down in the trenches now and I picked go um for for that mostly as a detox after having spent many years",
    "start": "2726760",
    "end": "2733760"
  },
  {
    "text": "working on Advanced type systems uh I'm going to say rust um so",
    "start": "2733760",
    "end": "2741599"
  },
  {
    "text": "uh one of the things that's interesting to me is sort of like language identity and like uh what's the language about so",
    "start": "2741599",
    "end": "2746760"
  },
  {
    "text": "I think Elm is about sort of like delight and maintainability and reliability um rust is like very focused",
    "start": "2746760",
    "end": "2753359"
  },
  {
    "text": "on be as fast as possible and be as not broken as possible um they would",
    "start": "2753359",
    "end": "2759040"
  },
  {
    "text": "probably Express that more eloquently um but I'm really interested in those things because it's uh in some ways sort",
    "start": "2759040",
    "end": "2764760"
  },
  {
    "text": "of like the the opposite end of the spectrum of like what I'm doing with Elm um but I I'm very interested in the idea",
    "start": "2764760",
    "end": "2771000"
  },
  {
    "text": "of what if you're just saying let's go as fast as we possibly can but still not break things um what's it like to work",
    "start": "2771000",
    "end": "2777400"
  },
  {
    "text": "in that environment and like optimize those things and that sounds like a lot of fun to me for entirely different reasons than El's fun for me cool",
    "start": "2777400",
    "end": "2784359"
  },
  {
    "text": "anymore um thank you for this uh uh panel it's",
    "start": "2784359",
    "end": "2790040"
  },
  {
    "start": "2786000",
    "end": "2895000"
  },
  {
    "text": "very interesting uh I find it interesting that we you've talked a lot about uh uh languages being uh important",
    "start": "2790040",
    "end": "2797280"
  },
  {
    "text": "for uh distri distributed programming uh typing Etc uh yet nobody's mentioned",
    "start": "2797280",
    "end": "2804040"
  },
  {
    "text": "anything about uh paradigms like object oriented or functional or any of these things do these things not matter",
    "start": "2804040",
    "end": "2810480"
  },
  {
    "text": "anymore for future languages I think the thing that at least Joe and I have",
    "start": "2810480",
    "end": "2816559"
  },
  {
    "text": "brought up is something else a slightly different Paradigm which is actor model programming and uh it's somewhat related",
    "start": "2816559",
    "end": "2823440"
  },
  {
    "text": "to those things um I personally think that it's quite easy to craft an explanation of object-oriented",
    "start": "2823440",
    "end": "2829160"
  },
  {
    "text": "programming that sounds like functional programming and vice versa um so that particular distinction doesn't fascinate",
    "start": "2829160",
    "end": "2835000"
  },
  {
    "text": "me but the distinction that does fascinate me there is ideas around",
    "start": "2835000",
    "end": "2841240"
  },
  {
    "text": "memory safety and I think if you think about it as a memory type and concurrency safety isue and think about",
    "start": "2841240",
    "end": "2847520"
  },
  {
    "text": "actor model programming as a paradigm then it does still matter and a lot of times now you're looking at the",
    "start": "2847520",
    "end": "2853440"
  },
  {
    "text": "difference between CSP communicating sequential processes and the actor model",
    "start": "2853440",
    "end": "2858640"
  },
  {
    "text": "much like object orientation and functional languages they are dual but they do lead to different designs for",
    "start": "2858640",
    "end": "2865520"
  },
  {
    "text": "systems next one and and I I I I think um the O versus FP thing is largely a",
    "start": "2865520",
    "end": "2871480"
  },
  {
    "text": "false dichotomy right and so you know one one of one of my mentors once said",
    "start": "2871480",
    "end": "2876640"
  },
  {
    "text": "um you should learn o you should learn FP and then strive to rise above them",
    "start": "2876640",
    "end": "2882160"
  },
  {
    "text": "both right and I think we all have something to learn from both of those paradigms and if we align ourselves with",
    "start": "2882160",
    "end": "2887920"
  },
  {
    "text": "I'm a functional programmer I'm an objectoriented programmer you're you're you're missing a",
    "start": "2887920",
    "end": "2894280"
  },
  {
    "text": "lot next question thank you very much for your time uh as well as your talk uh",
    "start": "2894440",
    "end": "2899559"
  },
  {
    "start": "2895000",
    "end": "3093000"
  },
  {
    "text": "I just had a questions uh in couple of last weeks there are some um kind of",
    "start": "2899559",
    "end": "2905400"
  },
  {
    "text": "conversation over the net about Ai and the University of the Cambridge and Microsoft they both together they done",
    "start": "2905400",
    "end": "2912160"
  },
  {
    "text": "some nasty stuff now ai can actually wrote some line of code I think up to",
    "start": "2912160",
    "end": "2917400"
  },
  {
    "text": "five or six line to solve a problem do you think the future of the language",
    "start": "2917400",
    "end": "2922640"
  },
  {
    "text": "programming is going the way that instead of we we come with a better",
    "start": "2922640",
    "end": "2928040"
  },
  {
    "text": "language for ourself to to solve the problems maybe we should come with a better language that AI can use it in a",
    "start": "2928040",
    "end": "2935000"
  },
  {
    "text": "better way and if it if if it does go that way then how does it impact or",
    "start": "2935000",
    "end": "2940119"
  },
  {
    "text": "career as a coder so that work is uh Mark Brock Schmid's work at MSR Cambridge deep",
    "start": "2940119",
    "end": "2946599"
  },
  {
    "text": "coder and it is indeed given a set of inputs and outputs synthesizing code and",
    "start": "2946599",
    "end": "2952280"
  },
  {
    "text": "it is pretty magnificent work in my opinion I don't think anyone should be worried about their job too soon uh",
    "start": "2952280",
    "end": "2961079"
  },
  {
    "text": "also in term the programming language is is a UI to the runtime sort of touching",
    "start": "2961079",
    "end": "2966280"
  },
  {
    "text": "on what Bri ran was saying and uh yes an AI needs a UI to a runtime and perhaps",
    "start": "2966280",
    "end": "2974480"
  },
  {
    "text": "that looks like a programming language and perhaps there are different ways to build uis to run times that look a bit different that are appropriate for AIS",
    "start": "2974480",
    "end": "2980640"
  },
  {
    "text": "for example an AI might be more comfortable in fourth uh than in a lot of other languages um however as a",
    "start": "2980640",
    "end": "2987359"
  },
  {
    "text": "programming language designer ex uh looking to expose a runtime in an efficient and useful way focusing on how",
    "start": "2987359",
    "end": "2994400"
  },
  {
    "text": "an AI would use a runtime doesn't motivate me if that makes any sense I also think U before I left",
    "start": "2994400",
    "end": "3001440"
  },
  {
    "text": "Microsoft I was working with some folks in MSR as well on um basically using deep learning to teach machines how to",
    "start": "3001440",
    "end": "3007599"
  },
  {
    "text": "write code but one of the challenges is when you're teaching a machine how to",
    "start": "3007599",
    "end": "3012760"
  },
  {
    "text": "learn to solve a problem so that it can write the code the representation of that learned artifact is not necessarily",
    "start": "3012760",
    "end": "3020359"
  },
  {
    "text": "easily trans transcribable into code and so I think the more interesting thing is",
    "start": "3020359",
    "end": "3026079"
  },
  {
    "text": "is code as we know it actually the correct intermediate representation for the",
    "start": "3026079",
    "end": "3031119"
  },
  {
    "text": "interface between a neural network and the Machine um given that the neural",
    "start": "3031119",
    "end": "3036359"
  },
  {
    "text": "network is a network of Weights uh and mostly opaque in terms of you know our",
    "start": "3036359",
    "end": "3042960"
  },
  {
    "text": "understanding of it so I think a lot of research over the next however many years it takes is going to be around",
    "start": "3042960",
    "end": "3049319"
  },
  {
    "text": "teaching uh neural networks to interface with computers and it's just not clear to me that that will look more like code",
    "start": "3049319",
    "end": "3056079"
  },
  {
    "text": "than say an opaque uh Assembly Language for example that's it one final question",
    "start": "3056079",
    "end": "3064359"
  },
  {
    "text": "quick answers please uh so we've heard a lot about strong typing being important both for",
    "start": "3064359",
    "end": "3070680"
  },
  {
    "text": "data types and functions and return values and so on but and of course asynchronous uh code for concurrency but",
    "start": "3070680",
    "end": "3077799"
  },
  {
    "text": "how do errors handle in this as well is strong type for error handling important or for asynchronous error handling yes",
    "start": "3077799",
    "end": "3086720"
  },
  {
    "text": "very good perfect so thank them all thank you",
    "start": "3086720",
    "end": "3094559"
  }
]