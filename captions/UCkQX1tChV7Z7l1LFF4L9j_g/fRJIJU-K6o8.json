[
  {
    "text": "[Music]",
    "start": "0",
    "end": "10800"
  },
  {
    "text": "thank you all for coming out tonight um we're going to talk about angular 2 forms just out of uh curiosity how many",
    "start": "12400",
    "end": "19320"
  },
  {
    "text": "people have uh you know watched talks on angular 2 saw some of the stuff last",
    "start": "19320",
    "end": "24800"
  },
  {
    "text": "last meet up or uh saw some of the videos an NGC okay cool well we're going to do a",
    "start": "24800",
    "end": "33239"
  },
  {
    "text": "bit we're going to dive a bit deeper into angular 2 tonight so we know the basics which we're going to do a little",
    "start": "33239",
    "end": "38520"
  },
  {
    "text": "crash course but we're also going to get deeper and we're going to see how we can do complex stuff with forms because",
    "start": "38520",
    "end": "44559"
  },
  {
    "text": "that's a lot of what we're doing is just grabbing input from the user so my name is David East I am a developer programs",
    "start": "44559",
    "end": "50960"
  },
  {
    "text": "engineer at Google and I work on the Firebase team full-time but a part-time",
    "start": "50960",
    "end": "56320"
  },
  {
    "text": "project of mine at Google is doing the uh developer experience for angular 2 which is Crea documentation and trying",
    "start": "56320",
    "end": "63440"
  },
  {
    "text": "to make it like simple for everyone to understand so if it's not easy",
    "start": "63440",
    "end": "68680"
  },
  {
    "text": "understand just let me know and I'll try to fix that so I give this little disclaimer before every single talk",
    "start": "68680",
    "end": "75040"
  },
  {
    "text": "because I think it's kind of important uh angular 2 is an alpha it's changing I've given about this is my fourth",
    "start": "75040",
    "end": "80920"
  },
  {
    "text": "angular 2 talk and every single time I've given this talk I've had to or a talk I've had to update my slides",
    "start": "80920",
    "end": "86600"
  },
  {
    "text": "because the syntax changes you know almost weekly so if you you build something in angular 2 from these slides",
    "start": "86600",
    "end": "92079"
  },
  {
    "text": "and then a week later it doesn't work ODS are it's not you it's the framework has changed and it will continue to",
    "start": "92079",
    "end": "98880"
  },
  {
    "text": "change so don't develop your angular don't develop an app in production yet you won't be very",
    "start": "98880",
    "end": "105399"
  },
  {
    "text": "happy so the outline of this talk is I'm going to start at doing an angular 2 crash course because it's pretty",
    "start": "105399",
    "end": "110719"
  },
  {
    "text": "dependent on understanding forms so we're going to just talk about the basic stuff for angular 2 and then we'll dive",
    "start": "110719",
    "end": "117200"
  },
  {
    "text": "into forms we're going to we're going to explore why forms are actually so hard to write and that's going to set the",
    "start": "117200",
    "end": "123240"
  },
  {
    "text": "stage of how angular 2 forms can help and then at the end I'm going to do a little bit of uh live coding and we're",
    "start": "123240",
    "end": "129200"
  },
  {
    "text": "going to see them actually in action so this is your angular 2 crash",
    "start": "129200",
    "end": "134680"
  },
  {
    "text": "core so angular 2 itself is written in typescript but that does not mean that you have to write your app in typescript",
    "start": "134680",
    "end": "140879"
  },
  {
    "text": "I recommend it I love typescript but if you are an es5 or es6 kind of person uh",
    "start": "140879",
    "end": "146200"
  },
  {
    "text": "that that totally works because typescript compiles down to both es5 and es6 so components is essentially the",
    "start": "146200",
    "end": "153720"
  },
  {
    "text": "main stay of angular 2 like everything that you'll be building in angular 2 is going to stem out of a component in this",
    "start": "153720",
    "end": "160280"
  },
  {
    "text": "case uh components or in all cases really components allow us to break down",
    "start": "160280",
    "end": "165319"
  },
  {
    "text": "our UI into reusable pieces so we don't have to code the same thing over and over for an application and and a",
    "start": "165319",
    "end": "171159"
  },
  {
    "text": "component in angular 2 is sort of how you would think of a directive an angular one at the end of the day we're just creating a custom HTML element and",
    "start": "171159",
    "end": "178159"
  },
  {
    "text": "if you can see down here that that's what we have this component is creating an HTML element called to-do Das app and",
    "start": "178159",
    "end": "184879"
  },
  {
    "text": "when angular sees that HTML element it's going to know to fire off the code above and this is how we Define the logic and",
    "start": "184879",
    "end": "191280"
  },
  {
    "text": "the behavior of a component so there's three main parts to this component and so the entire code block above is a",
    "start": "191280",
    "end": "198319"
  },
  {
    "text": "component but there's three parts and we're going to go over each one so the",
    "start": "198319",
    "end": "203560"
  },
  {
    "text": "one of the parts is uh actually one of two of the parts uh here is annotations so we have the component annotation and",
    "start": "203560",
    "end": "210080"
  },
  {
    "text": "the view annotation so both of these annotations are in typescript and they essentially describe things about the",
    "start": "210080",
    "end": "216360"
  },
  {
    "text": "component so in this case we have a component uh or an annotation component",
    "start": "216360",
    "end": "221959"
  },
  {
    "text": "that says this class right here it has a selector of to-do app and this is a CSS selector so we saw on the last slide how",
    "start": "221959",
    "end": "228599"
  },
  {
    "text": "we had to-do Das app for the element this is how it knows that that's the selector for it because we have the",
    "start": "228599",
    "end": "233920"
  },
  {
    "text": "component so it describes information about the to-do app and how we can locate The View that essentially the",
    "start": "233920",
    "end": "239959"
  },
  {
    "text": "template for the component that's done with the at view uh annotation and we",
    "start": "239959",
    "end": "245040"
  },
  {
    "text": "know that the URL property points out to to use that HTML So within these two little annotations we can tell angular",
    "start": "245040",
    "end": "252239"
  },
  {
    "text": "we can tell angular what our selector is and where our view is and we don't have to do any crazy subclassing or anything",
    "start": "252239",
    "end": "258400"
  },
  {
    "text": "like that it's just really easy to decorate on top of a class but you don't have to do this like I said you don't",
    "start": "258400",
    "end": "264080"
  },
  {
    "text": "have to do it in typescript you can do this in es5 and it's still pretty simple in es5 there's no classes in es5 but we",
    "start": "264080",
    "end": "271039"
  },
  {
    "text": "do have Constructor functions so that's why I say function to do app and then right here I'm going to attach my annotations by saying to do app on the",
    "start": "271039",
    "end": "278600"
  },
  {
    "text": "Constructor function do annotation and that equals an array where I instantiate",
    "start": "278600",
    "end": "283840"
  },
  {
    "text": "the new uh the new annotations with the same properties I did before so it's",
    "start": "283840",
    "end": "289240"
  },
  {
    "text": "still quite easy to do this in es5 it's uh it's a little more succinct when you do it with The annotation syntax but it",
    "start": "289240",
    "end": "296240"
  },
  {
    "text": "just really comes down to your preference so that's the first two parts",
    "start": "296240",
    "end": "301600"
  },
  {
    "text": "which is the view and the um component annotations and the last part is the",
    "start": "301600",
    "end": "307240"
  },
  {
    "text": "controller and the controller is the backing of our template essentially when you write your template and you call the",
    "start": "307240",
    "end": "312960"
  },
  {
    "text": "properties and functions from your template everything that you can call is because it's on your component",
    "start": "312960",
    "end": "318639"
  },
  {
    "text": "controller so in this case we have a component called a controller called to-do app and the first thing is it's a",
    "start": "318639",
    "end": "324520"
  },
  {
    "text": "property and it's a string array and so this is a type with typescript it's one of the cool features of typ script and",
    "start": "324520",
    "end": "330440"
  },
  {
    "text": "we have a Constructor where we initialize this string array and we also provide a function called add Todo and",
    "start": "330440",
    "end": "335960"
  },
  {
    "text": "we ensure that the user passes in a string value and we push it onto the to-do array well it's pretty simple but",
    "start": "335960",
    "end": "342840"
  },
  {
    "text": "like I said you don't have to do this in typescript and it's still pretty succinct when you do an es5 we have a",
    "start": "342840",
    "end": "349080"
  },
  {
    "text": "Constructor function we initialize the to-dos and then we just onto the Prototype of our Constructor function we",
    "start": "349080",
    "end": "355759"
  },
  {
    "text": "create our add to-do class we don't have types but it's still pretty easy to",
    "start": "355759",
    "end": "362360"
  },
  {
    "text": "do so that's how you write a component but it doesn't really tell you how to uh deal with the template so we have a",
    "start": "362840",
    "end": "369520"
  },
  {
    "text": "specific template Syntax for angular 2 and there's three main features that I'm going to talk about there's lots of cool",
    "start": "369520",
    "end": "375080"
  },
  {
    "text": "stuff but if you understand these three things you'll go pretty far with angular 2 so there's local variables event",
    "start": "375080",
    "end": "381479"
  },
  {
    "text": "handlers and property bindings and it may sound scary but the code is almost shorter than the definitions so right",
    "start": "381479",
    "end": "388080"
  },
  {
    "text": "here we're creating a local variable local variable up top on a text box so",
    "start": "388080",
    "end": "393240"
  },
  {
    "text": "we have an input and we give a hashtag of textbox and essentially what this",
    "start": "393240",
    "end": "398479"
  },
  {
    "text": "does is is it creates a local variable of this Dom element inside the template",
    "start": "398479",
    "end": "403680"
  },
  {
    "text": "so it doesn't bleed out to any other templates or anything like that it's just local to this template and from uh",
    "start": "403680",
    "end": "410080"
  },
  {
    "text": "I can use that inside of this button so in this button I'm registering event with the parentheses so I'm saying",
    "start": "410080",
    "end": "416479"
  },
  {
    "text": "parentheses click that's I could do parentheses any Dom event any actually",
    "start": "416479",
    "end": "422120"
  },
  {
    "text": "any custom event I registered to it's able to evaluate it to any available event that's registered to the Dom so",
    "start": "422120",
    "end": "429160"
  },
  {
    "text": "when this button is clicked I'm going to call the add to-do function which we specified in our component controller",
    "start": "429160",
    "end": "434919"
  },
  {
    "text": "because our component controller has all the properties and all of the functions that we can use in our view and I'm",
    "start": "434919",
    "end": "441400"
  },
  {
    "text": "going to pass to the add too function the text Box's value because that's just like saying document. getet element by",
    "start": "441400",
    "end": "447639"
  },
  {
    "text": "ID and getting back the Dom element because I'm directly talking to a text box there and then from here I can now",
    "start": "447639",
    "end": "456479"
  },
  {
    "text": "uh whenever I click it's going to update whatever is in the text box and just to show you the property binding I can use",
    "start": "456479",
    "end": "464120"
  },
  {
    "text": "this array brackets and I bind to an actual property of the Dom element and this is not an attribute so in angular",
    "start": "464120",
    "end": "470479"
  },
  {
    "text": "one we bound to attributes but in angular two we bind to the Dom property",
    "start": "470479",
    "end": "476560"
  },
  {
    "text": "so this is just like grabbing the Dom element and then calling any of the methods on it and most of those meth or",
    "start": "476560",
    "end": "482319"
  },
  {
    "text": "any of the methods or any of the properties because most of those properties are not available from the",
    "start": "482319",
    "end": "487800"
  },
  {
    "text": "attributes so in this case I'm binding to the inner text and that's whenever the text box updates it'll update the",
    "start": "487800",
    "end": "493599"
  },
  {
    "text": "inner text of my div so just to bring it all back together and paint the overall picture",
    "start": "493599",
    "end": "500240"
  },
  {
    "text": "we have the component annotation which gives us the CSS selector we have the view which tells us where our template",
    "start": "500240",
    "end": "506800"
  },
  {
    "text": "lives and we have our component controller which gives us the backing of all the stuff in our",
    "start": "506800",
    "end": "512159"
  },
  {
    "text": "view so congratulations you are now all now experts at angular 2 you know just",
    "start": "512159",
    "end": "518080"
  },
  {
    "text": "as much as me all right so angular so now we understand how angular 2 Works in a",
    "start": "518080",
    "end": "523159"
  },
  {
    "text": "nutshell we're going to talk about forms so forms are essentially one of",
    "start": "523159",
    "end": "528720"
  },
  {
    "text": "the only Outlets we have to the user as developers we need to get input from the user and forms is essentially all we",
    "start": "528720",
    "end": "534959"
  },
  {
    "text": "have we have text boxes and text areas and stuff like that and that's really good that that we can get values from",
    "start": "534959",
    "end": "540399"
  },
  {
    "text": "the user but the problem is that we can actually never trust the user because",
    "start": "540399",
    "end": "545720"
  },
  {
    "text": "the user even if they're not being malicious is likely to fill out your form wrong so we have to trust that the",
    "start": "545720",
    "end": "554560"
  },
  {
    "text": "we have to trust that the user is not going to do the right thing and this is what really makes forums hard when we",
    "start": "554560",
    "end": "561079"
  },
  {
    "text": "can't trust the user we have to code all this complex logic into our forms and",
    "start": "561079",
    "end": "566240"
  },
  {
    "text": "then that requires a lot of testing because we have crazy if statements and all this business logic baked into the",
    "start": "566240",
    "end": "572320"
  },
  {
    "text": "forms so we have to make sure that it actually works and forms aren't actually static the user answers them over a",
    "start": "572320",
    "end": "579480"
  },
  {
    "text": "period of time so the form is in different states as the user updates it even a specific character can completely",
    "start": "579480",
    "end": "586399"
  },
  {
    "text": "change the entire state of the form so with complex logic one control",
    "start": "586399",
    "end": "593480"
  },
  {
    "text": "can can be dependent of another control another controls logic so like a c",
    "start": "593480",
    "end": "599360"
  },
  {
    "text": "casing drop down list if I select country that's going to give me all the states and if I select state that might",
    "start": "599360",
    "end": "604560"
  },
  {
    "text": "give me all the towns and so the town is dependent all the way back up to the country and if I reset to another",
    "start": "604560",
    "end": "611040"
  },
  {
    "text": "country it might change everything down on the cascading list and so that can be pretty complicated to uh to keep updated",
    "start": "611040",
    "end": "619839"
  },
  {
    "text": "and then the user can also answer your form in an ad hoc manner you may have designed it for them to go one through",
    "start": "619839",
    "end": "624880"
  },
  {
    "text": "four but they may answer four 2 three then one and then when they answer ing something on four it's going to update",
    "start": "624880",
    "end": "631079"
  },
  {
    "text": "something on two that doesn't really uh uh wasn't supposed to be updated then so it's going to cause an error and they're",
    "start": "631079",
    "end": "636760"
  },
  {
    "text": "going to freak out and they're not going to know what's going on and you're going to tell them well can you please go one two 3 four but they won't so the user is",
    "start": "636760",
    "end": "644079"
  },
  {
    "text": "constantly triggering different error states that we have to handle so we write tests but testing is",
    "start": "644079",
    "end": "651399"
  },
  {
    "text": "actually really hard with forms because our logic is completely coupled to our to actual our UI so we have to compile",
    "start": "651399",
    "end": "657959"
  },
  {
    "text": "our templates and write end to end tests which aren't really that fun because",
    "start": "657959",
    "end": "663000"
  },
  {
    "text": "they're not isolated from the Dom so they're so they run slow and if you're a BD or a tdd person then that's",
    "start": "663000",
    "end": "670519"
  },
  {
    "text": "automatically violates all the principles of having isolated and fast",
    "start": "670519",
    "end": "676120"
  },
  {
    "text": "tests and also with forms we deal with changes over time so we might be checking a response from the server so",
    "start": "676120",
    "end": "682320"
  },
  {
    "text": "we might check to see if a username exists and we also might be checking to see if they've gone over on a max length",
    "start": "682320",
    "end": "687720"
  },
  {
    "text": "or we're counting their characters to see how much they have left and each one of these things can trigger another one",
    "start": "687720",
    "end": "694040"
  },
  {
    "text": "and it makes it hard to keep track so those are the three things that",
    "start": "694040",
    "end": "699600"
  },
  {
    "text": "uh make Difficult about forms an angular 2 uh forms looks to solve three of these these three problems so angular two",
    "start": "699600",
    "end": "706440"
  },
  {
    "text": "forms itself is an external module so it's like the router how you currently have to import the router as a",
    "start": "706440",
    "end": "711959"
  },
  {
    "text": "dependency in angular one and you'll do that in angular 2 the forms is the same way you'll import forms uh if you want",
    "start": "711959",
    "end": "718920"
  },
  {
    "text": "to use use them but if you don't want to use them you it's not required it's not thrown upon you but they're pretty",
    "start": "718920",
    "end": "725000"
  },
  {
    "text": "useful so angular 2 forms tackles the three problems we have we tackle complex",
    "start": "725000",
    "end": "731360"
  },
  {
    "text": "logic and testing and evaluating changes so we're going to go over each one of these",
    "start": "731360",
    "end": "738440"
  },
  {
    "text": "pieces so the smallest piece of angular forms is called a control and this just",
    "start": "739519",
    "end": "745120"
  },
  {
    "text": "represents a single input so something that gathers a value from the user and it's pretty easy to create so this",
    "start": "745120",
    "end": "751320"
  },
  {
    "text": "is what the API looks like I'm going to create a new control by saying varame control is a new control and I'm going",
    "start": "751320",
    "end": "757199"
  },
  {
    "text": "to give the initial value the string David and then I can grab its value by saying name control. value and then now",
    "start": "757199",
    "end": "764199"
  },
  {
    "text": "the uh I can check the state with similar properties that you are used to with angular one I can see if it's valid",
    "start": "764199",
    "end": "770480"
  },
  {
    "text": "by just calling valid I can check to see if it's been changed by calling dirty I can see if it's not been changed with",
    "start": "770480",
    "end": "776320"
  },
  {
    "text": "pristine and I can even get the errors from the array and even count up the numbers so it's easy to represent a",
    "start": "776320",
    "end": "783360"
  },
  {
    "text": "single control but like we said controls are dependent on each other so we're never just doing one control we're doing",
    "start": "783360",
    "end": "789040"
  },
  {
    "text": "an entire form and so this so this is why there is a control group which is a collection of forms and it allows us to",
    "start": "789040",
    "end": "796079"
  },
  {
    "text": "maintain the overall state of the form so a control group is made up of",
    "start": "796079",
    "end": "801480"
  },
  {
    "text": "controls so we'll create a variable called group and say new control group and then from there I have an object",
    "start": "801480",
    "end": "807560"
  },
  {
    "text": "literal where the keys are the names of my controls and the value are the actual controls so the full name is a new",
    "start": "807560",
    "end": "814360"
  },
  {
    "text": "control and I give my full name right here and then I also can supply a",
    "start": "814360",
    "end": "819440"
  },
  {
    "text": "optional validator and this is actually what tells the control whether it's",
    "start": "819440",
    "end": "824839"
  },
  {
    "text": "valid so when I say valid and it says true or false it it stems from this",
    "start": "824839",
    "end": "829880"
  },
  {
    "text": "right here and we're going to get a bit more into how those are used but this is how you supply",
    "start": "829880",
    "end": "835959"
  },
  {
    "text": "them and the API for a control group is actually uh almost identical to the API",
    "start": "835959",
    "end": "842720"
  },
  {
    "text": "of a single control so if I want to see if the entire form is valid I can say group. valid and that'll tell that'll",
    "start": "842720",
    "end": "848560"
  },
  {
    "text": "evaluate all of the controls in the group and I can see if it's been changed with dirty pristine and grab the errors",
    "start": "848560",
    "end": "855079"
  },
  {
    "text": "so everything I can do on a single control I can evaluate for the entire group which makes it easy when we're",
    "start": "855079",
    "end": "861680"
  },
  {
    "text": "dealing with controls that depend on each other because it's the sum of all of the valid of the uh state of the form",
    "start": "861680",
    "end": "870320"
  },
  {
    "text": "and if you thought that syntax was really verbose uh we heard you and we created the form Builder uh class which",
    "start": "870320",
    "end": "878480"
  },
  {
    "text": "essentially makes it easier to provide shorthand API to create a form group so",
    "start": "878480",
    "end": "884079"
  },
  {
    "text": "right here we'll create a builder and we'll then call the group function on the Builder and this takes an object",
    "start": "884079",
    "end": "890240"
  },
  {
    "text": "literal and to the left is the name of the control the uh key and the value is",
    "start": "890240",
    "end": "895639"
  },
  {
    "text": "an array and the array essentially represents a control so rather than than saying new control like you saw in the",
    "start": "895639",
    "end": "900800"
  },
  {
    "text": "previous slide we can just provide an array with the initial value and whether it has a",
    "start": "900800",
    "end": "907120"
  },
  {
    "text": "validator So speaking of validators they're essentially functions that encapsulate your form's custom logic so",
    "start": "908360",
    "end": "915120"
  },
  {
    "text": "the validator you saw was do required so essentially make sure that someone supplied something that's a pretty",
    "start": "915120",
    "end": "920920"
  },
  {
    "text": "simple one and we can do uh you can create your own uh validators by just",
    "start": "920920",
    "end": "926440"
  },
  {
    "text": "creating a function and there's a couple of require requirements to do this but they're pretty easy the first",
    "start": "926440",
    "end": "932079"
  },
  {
    "text": "requirement is you have to have it taken a control so this is in typescript",
    "start": "932079",
    "end": "937240"
  },
  {
    "text": "because I'm expecting a control but you could just uh erase the colon control and it works in JavaScript you just have",
    "start": "937240",
    "end": "943120"
  },
  {
    "text": "to expect that the parameter takes in his control now whenever if we want to say",
    "start": "943120",
    "end": "949720"
  },
  {
    "text": "that the the control is valid we return null but if it's not valid we're going",
    "start": "949720",
    "end": "955279"
  },
  {
    "text": "to return an object literal and this object literal is going to have key which are the errors so in this case",
    "start": "955279",
    "end": "961480"
  },
  {
    "text": "this is called the not blank uh validator and all I'm checking to make sure is that the user is not providing",
    "start": "961480",
    "end": "966759"
  },
  {
    "text": "empty string and I so I check it right here if C.V Val is equal to the empty",
    "start": "966759",
    "end": "972000"
  },
  {
    "text": "string let's return the errors and so I'm returning the error not blank is true but if it is something that's just",
    "start": "972000",
    "end": "979000"
  },
  {
    "text": "not the empty string I'll return null and that's valid and now when I want to use the",
    "start": "979000",
    "end": "984560"
  },
  {
    "text": "control I just say our control is new control provided an initial value and then I just put not blank as the",
    "start": "984560",
    "end": "992160"
  },
  {
    "text": "second parameter and at this point I could call control. valid and it wouldn't it would be a valid control",
    "start": "992160",
    "end": "998759"
  },
  {
    "text": "because I provided an exam initial value of hello but if I set it back to the empty string it would be invalid so it's",
    "start": "998759",
    "end": "1006240"
  },
  {
    "text": "extremely easy to uh reduce the complexity of your controls logic by",
    "start": "1006240",
    "end": "1011360"
  },
  {
    "text": "using validators so this chunk of code right",
    "start": "1011360",
    "end": "1016480"
  },
  {
    "text": "here is an entire component uh using a uh form uh a control group that is so we",
    "start": "1016480",
    "end": "1023600"
  },
  {
    "text": "import all the relevant information so the first one this is all es6 uh module syntax right here and so we're importing",
    "start": "1023600",
    "end": "1031760"
  },
  {
    "text": "uh things from angular 2 The Usual Suspects of being able to bootstrap your component your view and then the second",
    "start": "1031760",
    "end": "1038319"
  },
  {
    "text": "import is from angular 2 forms because forms aren't required so I have to import them from an external module and",
    "start": "1038319",
    "end": "1044480"
  },
  {
    "text": "so these are the things that you'll usually be using with forms so I do my component my view and then I create my",
    "start": "1044480",
    "end": "1050760"
  },
  {
    "text": "controller in my controller I'm going to provide a form which is a control group and then right here in the Constructor",
    "start": "1050760",
    "end": "1057080"
  },
  {
    "text": "you'll notice a bit of dependency injection because right here I'm not supplying a concrete instance of form",
    "start": "1057080",
    "end": "1064160"
  },
  {
    "text": "Builder but angular 2 is going to look at the type of form Builder and know to instantiate a new one for me so",
    "start": "1064160",
    "end": "1070919"
  },
  {
    "text": "dependency injection angular 2 is all done through the Constructor so inside of here I now have",
    "start": "1070919",
    "end": "1076080"
  },
  {
    "text": "a form Builder so I'm going to create my group builder. group and I have a full name a username and a favorite color and",
    "start": "1076080",
    "end": "1082640"
  },
  {
    "text": "the full name and the username are required whereas the favorite color is not and they all have blank initial",
    "start": "1082640",
    "end": "1090039"
  },
  {
    "text": "values so now that I have a component I can test it and it's not dependent on any Dom we haven't even written a single",
    "start": "1090039",
    "end": "1096640"
  },
  {
    "text": "HTML element and we're going to write a test for our controls and the testing is really easy we're writing four lines of",
    "start": "1096640",
    "end": "1103240"
  },
  {
    "text": "code to do a test so right here we're going to create a form Builder that we're going to inject into the or just",
    "start": "1103240",
    "end": "1110080"
  },
  {
    "text": "provide into the app component is which we created on the previous line and previous slide and now that I have an",
    "start": "1110080",
    "end": "1116120"
  },
  {
    "text": "app component I know that the initial state is invalid because if you look at the",
    "start": "1116120",
    "end": "1121760"
  },
  {
    "text": "component when we're creating this. form equals builder. group we have two",
    "start": "1121760",
    "end": "1126960"
  },
  {
    "text": "required validators but the initial value is an empty string so they're not there they're and they're required so we",
    "start": "1126960",
    "end": "1133720"
  },
  {
    "text": "have an initial state of an inval we have an initial invalid state so we can",
    "start": "1133720",
    "end": "1138840"
  },
  {
    "text": "use console. assert which is just provided in every single browser and so it's nothing uh nothing fancy to angular",
    "start": "1138840",
    "end": "1145520"
  },
  {
    "text": "2 and we say console. assert we have the app component which I forgot my CMP but",
    "start": "1145520",
    "end": "1151840"
  },
  {
    "text": "app. form. valid equals false and so this assertion will pass because my form",
    "start": "1151840",
    "end": "1158320"
  },
  {
    "text": "is in an initial valid state so my first unit test it it's it works now if I",
    "start": "1158320",
    "end": "1164080"
  },
  {
    "text": "wrote it wrong and I said I'm going to assert that the initial value is valid which is not that assertion will",
    "start": "1164080",
    "end": "1170919"
  },
  {
    "text": "fail so in just a couple lines of code I'm running my tests against uh the",
    "start": "1170919",
    "end": "1176400"
  },
  {
    "text": "control and it's isolated from the Dom and this will run fast because I don't have to compile a temp",
    "start": "1176400",
    "end": "1183320"
  },
  {
    "text": "put and speaking of templates we'll go over the template Syntax for forms so we",
    "start": "1183320",
    "end": "1190400"
  },
  {
    "text": "went over property bindings and property bindings also work for properties of the Dom element but you also can bind to",
    "start": "1190400",
    "end": "1197400"
  },
  {
    "text": "properties of a comp component so how we create our own component and we have give it values or give it uh give it",
    "start": "1197400",
    "end": "1203919"
  },
  {
    "text": "properties we can bind to those properties so in this case we're going tobine to a property called control group which is given to us through",
    "start": "1203919",
    "end": "1211480"
  },
  {
    "text": "angular 2 forms and I'm going to give it the value of form which is the form",
    "start": "1211480",
    "end": "1217320"
  },
  {
    "text": "property in my component controller and just to make that clear as you can see right here this is the property we're",
    "start": "1217320",
    "end": "1224760"
  },
  {
    "text": "binding to and we set it up right here when we build it so that's what we're binding",
    "start": "1224760",
    "end": "1230559"
  },
  {
    "text": "to when we say control-group equals form so I'm setting up uh I'm setting up the",
    "start": "1230559",
    "end": "1237159"
  },
  {
    "text": "binding for my view but I want to bind to my elements as well so I'm going to create a text box and I'm going to bind",
    "start": "1237159",
    "end": "1243640"
  },
  {
    "text": "to the control property which is also provided to you by angular two forms and",
    "start": "1243640",
    "end": "1249320"
  },
  {
    "text": "I'm going to say form. controls. full name and at that point I have bound the",
    "start": "1249320",
    "end": "1254919"
  },
  {
    "text": "updates to this control so so whenever this is updated that will be reflected",
    "start": "1254919",
    "end": "1260880"
  },
  {
    "text": "in the form if there's any validators on that control that will be uh computed every time they",
    "start": "1260880",
    "end": "1267880"
  },
  {
    "text": "update but that might kind of seem long having to tap into form. controls. full name so there is a decorator this isn't",
    "start": "1267880",
    "end": "1275000"
  },
  {
    "text": "an attribute you don't see uh array brackets around it or a property binding it's what's known as a decorator where",
    "start": "1275000",
    "end": "1280840"
  },
  {
    "text": "you kind of create a custom attribute that does you know powerful magic and at",
    "start": "1280840",
    "end": "1286200"
  },
  {
    "text": "this point I can take the control and I bind it to full name and this decorator is super smart and The Decorator knows",
    "start": "1286200",
    "end": "1292480"
  },
  {
    "text": "that it's within the form group called form so it'll find my uh full name",
    "start": "1292480",
    "end": "1298520"
  },
  {
    "text": "control for me so that's how you do just a simple",
    "start": "1298520",
    "end": "1305039"
  },
  {
    "text": "control group but control groups can also contain control groups so they're nested because a lot of times we have to",
    "start": "1305039",
    "end": "1311440"
  },
  {
    "text": "separate out the concerns of our forms a really good example of this is an",
    "start": "1311440",
    "end": "1316840"
  },
  {
    "text": "address so this is the same form had before and now I'm going to create a nested group called address because I",
    "start": "1316840",
    "end": "1324360"
  },
  {
    "text": "would like to know if the address is valid and so I provide all The Usual Suspects the street uh Street line two",
    "start": "1324360",
    "end": "1331240"
  },
  {
    "text": "the city state ZIP and then down here at the bottom I can check to see if the entire address is valid by saying group.",
    "start": "1331240",
    "end": "1338480"
  },
  {
    "text": "controls. address. valid so I can evaluate just the address on the form",
    "start": "1338480",
    "end": "1343559"
  },
  {
    "text": "and I can do smart things with that I can tell the user like you have this part of the form down just right but this part of the form form is invalid",
    "start": "1343559",
    "end": "1349760"
  },
  {
    "text": "and so I can essentially by using nested groups I can separate out the concerns of my",
    "start": "1349760",
    "end": "1356200"
  },
  {
    "text": "form and this is how it would look in a template so we have the control group of",
    "start": "1356200",
    "end": "1361440"
  },
  {
    "text": "form which we established at the top and then we're doing the single controls full name username and now I'm going to",
    "start": "1361440",
    "end": "1366640"
  },
  {
    "text": "nest and to Nest I'm going to use a control group decorator which is similar to the control group of four the control",
    "start": "1366640",
    "end": "1372559"
  },
  {
    "text": "group decorator knows that I have a nested group called a dress so now I'm inside another control group and then",
    "start": "1372559",
    "end": "1378600"
  },
  {
    "text": "can just call all the controls for the address so just like that everything is",
    "start": "1378600",
    "end": "1384039"
  },
  {
    "text": "bound it's pretty easy and for dealing with changes over time we have uh something that's called",
    "start": "1384039",
    "end": "1390840"
  },
  {
    "text": "observables so how many people here are familiar with observables and I've used observables",
    "start": "1390840",
    "end": "1396480"
  },
  {
    "text": "before so a couple people so how many people here are familiar with promises yes we have a whole room full",
    "start": "1396480",
    "end": "1403520"
  },
  {
    "text": "of people so when a lot of people when they came into angular one they probably never used promises before and then they",
    "start": "1403520",
    "end": "1409480"
  },
  {
    "text": "learned promises and saw that it was a really solid way to structure a secrist flow of your application it's guaranteed",
    "start": "1409480",
    "end": "1415919"
  },
  {
    "text": "that it's going to fire off that one time but there's sometimes you don't want it to fire off just one time uh we",
    "start": "1415919",
    "end": "1422440"
  },
  {
    "text": "want that the one time is good for things like I know my data has loaded from the server or I know this event is",
    "start": "1422440",
    "end": "1427720"
  },
  {
    "text": "now finished and that's good for onetime events but observables deal with",
    "start": "1427720",
    "end": "1432880"
  },
  {
    "text": "asynchronous events that are in a stream of data so as you're constantly re receiving something from a server it'll",
    "start": "1432880",
    "end": "1440279"
  },
  {
    "text": "uh fire off that update or as I'm updating a text box on a key value or key up Val event it'll keep giving me",
    "start": "1440279",
    "end": "1446840"
  },
  {
    "text": "that value so observables are first class citizens in angular 2 they come from the RX Library which is uh if",
    "start": "1446840",
    "end": "1453799"
  },
  {
    "text": "you're familiar with observables the whole RX is ported across many different uh languages and platforms and so with",
    "start": "1453799",
    "end": "1461039"
  },
  {
    "text": "observables I'm going to create a just a blank control and I'm going to create a reference to Firebase and for those of",
    "start": "1461039",
    "end": "1466799"
  },
  {
    "text": "you familiar with Firebase just uh it's a little location in Cloudland where I'm going to be able to save my",
    "start": "1466799",
    "end": "1472679"
  },
  {
    "text": "data and that's very much underp putting it but for the time being uh and so I'm",
    "start": "1472679",
    "end": "1477919"
  },
  {
    "text": "going to say control. value changes. subscribe and so now what I'm doing is I'm subscribing to any changes that",
    "start": "1477919",
    "end": "1484760"
  },
  {
    "text": "happen on the form so anytime it's value changes from that's whether I'm typing into a text box or someone updated that",
    "start": "1484760",
    "end": "1490840"
  },
  {
    "text": "control it's going to fire off this function every single time something changes and in this case I'm taking the",
    "start": "1490840",
    "end": "1498360"
  },
  {
    "text": "datase reference and I'm saving the value to the database so every time someone does something it's just going",
    "start": "1498360",
    "end": "1503440"
  },
  {
    "text": "to intercept that change and it's going to update it for me so that pretty much is the core of",
    "start": "1503440",
    "end": "1511480"
  },
  {
    "text": "angular uh two uh forms so I'm going to let's see here that's right I'm going to",
    "start": "1511480",
    "end": "1518720"
  },
  {
    "text": "do a little bit of live coding and I'm going to try to do with one hand so this is going to be really",
    "start": "1518720",
    "end": "1525080"
  },
  {
    "text": "interesting so what I'm doing right here is I'm importing two things oh wow you cannot read",
    "start": "1525080",
    "end": "1531919"
  },
  {
    "text": "that got to really hold that down all right is that good so if so you",
    "start": "1533120",
    "end": "1540440"
  },
  {
    "text": "can see it just let me know so at this point I'm importing The Usual Suspects from angular and angular uh angular",
    "start": "1540440",
    "end": "1546720"
  },
  {
    "text": "forms and the first thing you do when you build an angular app is you create a component so I'm going to do another",
    "start": "1546720",
    "end": "1553080"
  },
  {
    "text": "little snippet that's going to create me a component so now I have a component",
    "start": "1553080",
    "end": "1558480"
  },
  {
    "text": "and I'm going to give it a selector of app and then I'm going to name the controller app",
    "start": "1558480",
    "end": "1566360"
  },
  {
    "text": "component and then from here I need to specify actually need to export it out",
    "start": "1566360",
    "end": "1572559"
  },
  {
    "text": "to the I need to have angular to export it out so say",
    "start": "1572559",
    "end": "1578640"
  },
  {
    "text": "app just copy and",
    "start": "1578640",
    "end": "1582480"
  },
  {
    "text": "paste so this is pretty much the basics of doing an angular 2 app you import",
    "start": "1583799",
    "end": "1589559"
  },
  {
    "text": "your needed services from angular or your modules you use your uh component",
    "start": "1589559",
    "end": "1595200"
  },
  {
    "text": "your component annotation your view annotation and your component controller and then you export it out so angular",
    "start": "1595200",
    "end": "1600600"
  },
  {
    "text": "knows to run it and so this is the main main thing that you do so I'm going to go up to the template now and I'm going",
    "start": "1600600",
    "end": "1608360"
  },
  {
    "text": "to say just give a little sorry it won't do that in here and give a little H1 and",
    "start": "1608360",
    "end": "1614159"
  },
  {
    "text": "say hello",
    "start": "1614159",
    "end": "1618159"
  },
  {
    "text": "all right so I'm running this inside of",
    "start": "1622039",
    "end": "1627960"
  },
  {
    "text": "angular two Source see so I got to actually build and that takes a hot",
    "start": "1627960",
    "end": "1634039"
  },
  {
    "text": "second so as that's building I'm actually going to start making some",
    "start": "1634039",
    "end": "1639240"
  },
  {
    "text": "changes I'm going to have to put this down",
    "start": "1639240",
    "end": "1644399"
  },
  {
    "text": "and it build Okay cool so refresh it's loading loading hello so up to the top",
    "start": "1648720",
    "end": "1654760"
  },
  {
    "text": "right you can see Hello so we just wrote an angular two app that's pretty cool so at this point now I'm going to give I'm",
    "start": "1654760",
    "end": "1660760"
  },
  {
    "text": "going to create my form so I have a form property right here I'm going to tap to it by saying this.",
    "start": "1660760",
    "end": "1668760"
  },
  {
    "text": "form and I created a group and the group takes in an object literal with all my forms so I'm just going to",
    "start": "1675640",
    "end": "1681840"
  },
  {
    "text": "create a simple one called name and from name I'm going to give it the array bracket and I'm going to say",
    "start": "1681840",
    "end": "1687840"
  },
  {
    "text": "it's initial value is the empty string I'm going to give it a validator and I'm going to make sure it's the",
    "start": "1687840",
    "end": "1695320"
  },
  {
    "text": "required validator so at this point I have one control within my control group",
    "start": "1695559",
    "end": "1700600"
  },
  {
    "text": "so I want to specify that in my template and this template right here is just",
    "start": "1700600",
    "end": "1705640"
  },
  {
    "text": "basically being able to do an inline template I'm using es6 back ticks that allow you to uh do multi-line",
    "start": "1705640",
    "end": "1713360"
  },
  {
    "text": "strings so at this point I'm going to create a div and give it a control",
    "start": "1713360",
    "end": "1718960"
  },
  {
    "text": "group so I set up a control group property binding and then now I want to bind a text",
    "start": "1728519",
    "end": "1736120"
  },
  {
    "text": "box and I'm going to give it the control decorator I'm going to set that to",
    "start": "1736120",
    "end": "1745919"
  },
  {
    "text": "name and then we can actually bind the changes so I'll say form.",
    "start": "1749960",
    "end": "1756240"
  },
  {
    "text": "controls now thank the Lord for autocomplete form do for controls",
    "start": "1756240",
    "end": "1765518"
  },
  {
    "text": "and now I'm going to run the build event again it's going to take a hot",
    "start": "1771440",
    "end": "1776480"
  },
  {
    "text": "second so I'm building directly from angular 2 Source here which is essentially doing a get clone of angular",
    "start": "1776480",
    "end": "1783200"
  },
  {
    "text": "angular on GitHub and then doing an mpm install and then running a go task and that uh essentially allows me to build",
    "start": "1783200",
    "end": "1790200"
  },
  {
    "text": "inside of there so now I didn't say value did",
    "start": "1790200",
    "end": "1795440"
  },
  {
    "text": "I I didn't say value and that doesn't that just not the same",
    "start": "1795440",
    "end": "1803320"
  },
  {
    "text": "effect so we'll have to wait another 8 to 10",
    "start": "1803320",
    "end": "1808480"
  },
  {
    "text": "seconds it's doing probably like 20 to 30 different things that I don't",
    "start": "1810480",
    "end": "1816279"
  },
  {
    "text": "actually need but I don't know what chords to cut",
    "start": "1816279",
    "end": "1821519"
  },
  {
    "text": "so now it's loading and I'm going to type in a name and as I type we have The Binding so that that's pretty cool I",
    "start": "1821519",
    "end": "1828279"
  },
  {
    "text": "know how to bind two different stuff it's all pretty easy and simple but let's do some cool stuff with",
    "start": "1828279",
    "end": "1836000"
  },
  {
    "text": "validations so we have inside of the HTML I'm actually importing Twitter",
    "start": "1836000",
    "end": "1841039"
  },
  {
    "text": "bootstrap up top and Twitter bootstrap has cool CS so Styles allow us to do like cool validation States so I'm going",
    "start": "1841039",
    "end": "1848880"
  },
  {
    "text": "to bind to those I'm going to give it a class first I think it's called form group",
    "start": "1848880",
    "end": "1857480"
  },
  {
    "text": "and now I'm going to do something that's pretty cool so I'm going to bind to the class property of the Dom but I'm going",
    "start": "1862720",
    "end": "1869120"
  },
  {
    "text": "to do something kind of cool and I'm going to bind to an actual single class",
    "start": "1869120",
    "end": "1874240"
  },
  {
    "text": "so I can say has success which is a Twitter bootstrap",
    "start": "1874240",
    "end": "1880200"
  },
  {
    "text": "class I can said it has success and that is equal to whether the",
    "start": "1880200",
    "end": "1886480"
  },
  {
    "text": "form Dot uh see form.",
    "start": "1886480",
    "end": "1892600"
  },
  {
    "text": "valid see here I think that's it form. valid let me cheat look at the answer form. controls oh I want to see if the",
    "start": "1893440",
    "end": "1899960"
  },
  {
    "text": "name is valid sorry cheated name form. controls. name I knew",
    "start": "1899960",
    "end": "1905159"
  },
  {
    "text": "I was doing something wrong so we'll get a nice little green",
    "start": "1905159",
    "end": "1912120"
  },
  {
    "text": "highlight if we are valid but if we're not valid let's where's another class",
    "start": "1912120",
    "end": "1917159"
  },
  {
    "text": "called has a",
    "start": "1917159",
    "end": "1919840"
  },
  {
    "text": "there and we can just neate that and at this point we have the div but we need",
    "start": "1923960",
    "end": "1930240"
  },
  {
    "text": "the text box so let's do a tab",
    "start": "1930240",
    "end": "1935519"
  },
  {
    "text": "over soor I expected to do this a lot",
    "start": "1935919",
    "end": "1940600"
  },
  {
    "text": "faster and then we will bind to the control",
    "start": "1941000",
    "end": "1946760"
  },
  {
    "text": "give it a name all right so now we have bound to",
    "start": "1948919",
    "end": "1956240"
  },
  {
    "text": "the control I'm just going to cheat so we don't build oh I need to give it this fancy little class or it's not going to",
    "start": "1956240",
    "end": "1961480"
  },
  {
    "text": "look",
    "start": "1961480",
    "end": "1963760"
  },
  {
    "text": "good all right so let's build so essentially all we did here is we bound to single classes we're saying",
    "start": "1968120",
    "end": "1975399"
  },
  {
    "text": "if the control is valid let's give it a cool little green thing if it has an error Let's uh give it the red State and",
    "start": "1975399",
    "end": "1982320"
  },
  {
    "text": "we're binding the name within the form and we're built just refresh the",
    "start": "1982320",
    "end": "1991120"
  },
  {
    "text": "page and so it's initially red because out of the gate it's required so it's not there but can if I type it turns",
    "start": "1991120",
    "end": "1998639"
  },
  {
    "text": "green so just like that I can do other things too I can put in uh essentially as you know an NG if statement to say",
    "start": "1998639",
    "end": "2004880"
  },
  {
    "text": "whether it's valid to give it an error message and all that kind of stuff so what I'm also going to do now is I'm going to show some stuff with the",
    "start": "2004880",
    "end": "2012600"
  },
  {
    "text": "observables so at this point I'm going to just uh I'm going to make sure I'm in scope because of the asynchronous module",
    "start": "2012600",
    "end": "2018000"
  },
  {
    "text": "loading and I'm going to put in a debugger statement and I'm actually going to put",
    "start": "2018000",
    "end": "2024000"
  },
  {
    "text": "one more in here and we're going to build so what",
    "start": "2024000",
    "end": "2032120"
  },
  {
    "text": "we're going to do is we're going to show how this works actually you can write this in the browser it's not just this build process isn't doing a ton of magic",
    "start": "2032120",
    "end": "2040519"
  },
  {
    "text": "um on some fronts it is but not for what we're doing so I'm going to refresh and I'm going to hit a debugger so the first",
    "start": "2040519",
    "end": "2047120"
  },
  {
    "text": "debugger is outside of our console so I'm going to actually show how you can do the",
    "start": "2047120",
    "end": "2054159"
  },
  {
    "text": "test so I'm creating our app component which as we know takes in a form Builder",
    "start": "2064720",
    "end": "2070919"
  },
  {
    "text": "so new app components so now I have the app and right off the bat I can called a",
    "start": "2070919",
    "end": "2076118"
  },
  {
    "text": "form property and I can see if it's valid it's not valid so I could do a",
    "start": "2076119",
    "end": "2083079"
  },
  {
    "text": "console do",
    "start": "2083399",
    "end": "2086679"
  },
  {
    "text": "assert and that assert fails because it's not valid and then also let's just run through",
    "start": "2094800",
    "end": "2102520"
  },
  {
    "text": "skit we're inside of our app component right now as you can see class app component so inside of the app component",
    "start": "2102520",
    "end": "2109040"
  },
  {
    "text": "I'm going to show how observable observables work so I have this. form",
    "start": "2109040",
    "end": "2115680"
  },
  {
    "text": "and I can call the name I got to call controls and I can call the name",
    "start": "2115680",
    "end": "2122760"
  },
  {
    "text": "property and then do the value changes so I can",
    "start": "2122760",
    "end": "2128280"
  },
  {
    "text": "value changes and then I can subscribe and this will take in a",
    "start": "2128280",
    "end": "2137040"
  },
  {
    "text": "function so now I've set a subscription",
    "start": "2148960",
    "end": "2155200"
  },
  {
    "text": "so play it through and then now as I start typing it all updates in the console I can listen to changes so you",
    "start": "2155720",
    "end": "2163280"
  },
  {
    "text": "can do so we can monitor the changes as they update all",
    "start": "2163280",
    "end": "2169880"
  },
  {
    "text": "right so that's angular 2 forms if you have any questions uh essentially",
    "start": "2169880",
    "end": "2175400"
  },
  {
    "text": "angular well I should do a recap angular two forms essentially allows us to abstract away complex logic easy testing",
    "start": "2175400",
    "end": "2182400"
  },
  {
    "text": "that's independent of the Dom and we can easily observe changes as they happen over time with pretty simple API so",
    "start": "2182400",
    "end": "2190119"
  },
  {
    "text": "thank you all for coming out tonight if you have any questions be more than happy to answer them actually one of the guys who wrote angular to Mr Victor",
    "start": "2190119",
    "end": "2197160"
  },
  {
    "text": "savkin is sitting back there so everyone awkwardly all stare at him at once right now all right glad we got that out of",
    "start": "2197160",
    "end": "2202480"
  },
  {
    "text": "the way so uh you will'll both be happy to answer your question so thank you so",
    "start": "2202480",
    "end": "2208910"
  },
  {
    "text": "[Applause]",
    "start": "2208910",
    "end": "2212160"
  },
  {
    "text": "much so the question was he's uh he has seen template annotation and view",
    "start": "2214040",
    "end": "2219079"
  },
  {
    "text": "annotation he wants to know what's the difference between the two and when you use when um a month ago you used",
    "start": "2219079",
    "end": "2224240"
  },
  {
    "text": "template and then now you use view because we rename template to view so they're the same",
    "start": "2224240",
    "end": "2229520"
  },
  {
    "text": "thing the syntax always changes that's uh so the example was you",
    "start": "2229520",
    "end": "2235800"
  },
  {
    "text": "saw the zip code and the address and how would that be validated uh that just had a required validator on it but you could",
    "start": "2235800",
    "end": "2241880"
  },
  {
    "text": "write a zip code a zip code validator something like that and you can compose multiple validators together you don't",
    "start": "2241880",
    "end": "2248720"
  },
  {
    "text": "you're not just locked into using one so the question was about uh do we",
    "start": "2248720",
    "end": "2254839"
  },
  {
    "text": "use the constraints of HTML 5 forms as in like saying uh uh like how you have",
    "start": "2254839",
    "end": "2260839"
  },
  {
    "text": "email uh type as email and stuff like that yeah everything those are so HTML is considered Like A Primitive Insight",
    "start": "2260839",
    "end": "2268240"
  },
  {
    "text": "of angular components so you can build that up for the inputs I was creating I",
    "start": "2268240",
    "end": "2274079"
  },
  {
    "text": "could provide a type of email and that that would have worked as well",
    "start": "2274079",
    "end": "2279440"
  },
  {
    "text": "I think that's it all right well thank you all for coming out tonight and uh",
    "start": "2279680",
    "end": "2284880"
  },
  {
    "text": "thanks for everybody angular two forms [Applause]",
    "start": "2284880",
    "end": "2292869"
  }
]