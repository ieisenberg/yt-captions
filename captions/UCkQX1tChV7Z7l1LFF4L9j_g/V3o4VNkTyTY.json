[
  {
    "text": "[Music]",
    "start": "760",
    "end": "6958"
  },
  {
    "text": "[Music]",
    "start": "9080",
    "end": "20260"
  },
  {
    "text": "this feels a bit like a speed dating event like uh I feel like I should say wellow I'm benari I like ponies uh for",
    "start": "20279",
    "end": "27800"
  },
  {
    "text": "looking in the countryside um karaoke and um Cinema I have a sense of humor um",
    "start": "27800",
    "end": "35040"
  },
  {
    "text": "so um I'm from VMware uh spring sauce is the logo on my slides uh spring sauce",
    "start": "35040",
    "end": "41399"
  },
  {
    "text": "was acquired by VMware about a year and a half ago and I was part of that acquisition and uh I was a little",
    "start": "41399",
    "end": "48079"
  },
  {
    "text": "nervous coming here um the VMware recruiter actually called me up this afternoon and said uh oh Ben you know I",
    "start": "48079",
    "end": "54480"
  },
  {
    "text": "hear you doing some SF jug thing this afternoon could you possibly plug VMware and like it's a cool place to work I'm",
    "start": "54480",
    "end": "59600"
  },
  {
    "text": "like well kind of you know developers and you know but given that everyone else has done it um I you know VM is a",
    "start": "59600",
    "end": "66159"
  },
  {
    "text": "great place to work there you go I did it um come work for us we're recruiting",
    "start": "66159",
    "end": "71680"
  },
  {
    "text": "so spring Source uh was acquired by VMware about 18 months ago uh I was part",
    "start": "71680",
    "end": "77400"
  },
  {
    "text": "of that spring Source acquisition just part on my introduction here um and I've basically spent my whole career in Java",
    "start": "77400",
    "end": "84400"
  },
  {
    "text": "uh I left University 98 went and worked for IBM when Java was you know kind of",
    "start": "84400",
    "end": "89680"
  },
  {
    "text": "just starting out it sounded like a really cool thing to do um started off testing Java 114 then got into jvm",
    "start": "89680",
    "end": "96200"
  },
  {
    "text": "development at IBM uh I basically uh took the j9 jvm from being a micro",
    "start": "96200",
    "end": "101240"
  },
  {
    "text": "Edition to a standard edition jvm then I developed uh a class sharing capability in that jvm over about five years um I",
    "start": "101240",
    "end": "109840"
  },
  {
    "text": "won't go into any detail on that but it was it was pretty cool it was a really good grounding in in in sort of jvm",
    "start": "109840",
    "end": "114960"
  },
  {
    "text": "development in that whole area then I moved to Spring Source because I wanted a I wanted to get out uh do something",
    "start": "114960",
    "end": "122039"
  },
  {
    "text": "different uh learn about stuff higher up the stack so I spent 18 months basically touring Europe and various places",
    "start": "122039",
    "end": "128599"
  },
  {
    "text": "teaching spring framework and teaching osgi and teaching you know tomcat and Java and all this kind of stuff um and",
    "start": "128599",
    "end": "134760"
  },
  {
    "text": "then VMware acquired spring source and they were like well we've got this big Java stack and we know that there's",
    "start": "134760",
    "end": "140120"
  },
  {
    "text": "still some areas in which we really want to improve Java and so they gave me the opportunity to come over here and",
    "start": "140120",
    "end": "145800"
  },
  {
    "text": "basically just kind of start really small projects looking at how we can make Java perform better uh in a",
    "start": "145800",
    "end": "152360"
  },
  {
    "text": "virtualized environment so I spent the last 18 months uh doing exactly that basically just spending the whole time",
    "start": "152360",
    "end": "159280"
  },
  {
    "text": "looking at uh you know where where is the work that we still need to do what are the things that customers are still",
    "start": "159280",
    "end": "165000"
  },
  {
    "text": "complaining about right and one of the things I will be talking to you about uh in this presentation uh is uh the",
    "start": "165000",
    "end": "171879"
  },
  {
    "text": "product I've been working on for the last year because it's cool you know I'm really proud of what we've done uh I'll",
    "start": "171879",
    "end": "177400"
  },
  {
    "text": "be giving you a sneak peek of what we are going to be doing as as well which you know hopefully uh will work I've got",
    "start": "177400",
    "end": "183080"
  },
  {
    "text": "a very complex demo uh and the last time I gave this presentation the demo very",
    "start": "183080",
    "end": "188480"
  },
  {
    "text": "embarrassingly just didn't work at all because the network went down so I'm hoping we'll get the demo working if we",
    "start": "188480",
    "end": "193959"
  },
  {
    "text": "do uh it should be a really good illustration of the kind of things I'm talking about so that's enough of an",
    "start": "193959",
    "end": "199360"
  },
  {
    "text": "introduction um so what I really want to do in this presentation is um go in",
    "start": "199360",
    "end": "205640"
  },
  {
    "text": "depth looking primarily at memory management for Java when running virtual",
    "start": "205640",
    "end": "210920"
  },
  {
    "text": "now um I'm going to go into some background on just kind of the whole layers of memory management uh in the",
    "start": "210920",
    "end": "216879"
  },
  {
    "text": "hypervisor uh and the operating system uh I'll be going into some detail about different types of memory management in",
    "start": "216879",
    "end": "222280"
  },
  {
    "text": "Java and then ultimately tying all those things together and looking at how they interact um what I really want to",
    "start": "222280",
    "end": "228439"
  },
  {
    "text": "examine are some of the performance pitfalls that you can end up hitting uh and ultimately what we've done to to to",
    "start": "228439",
    "end": "234879"
  },
  {
    "text": "help address that by the way do shout out questions uh observations abuse as we go um uh",
    "start": "234879",
    "end": "244200"
  },
  {
    "text": "well there'll be Q&A at the end but you know I will try and uh try and deal with questions as they arise and I'm sorry",
    "start": "244200",
    "end": "249760"
  },
  {
    "text": "that this is a little bit dim during the demo I will be zooming in and stuff so you can see a bit better so um I've just got a few kind of",
    "start": "249760",
    "end": "256680"
  },
  {
    "text": "what is virtualization slides hopefully most people are familiar with this um it's really uh about taking uh what were",
    "start": "256680",
    "end": "264600"
  },
  {
    "text": "physical machines and essentially creating a mechanism of uh virtualizing",
    "start": "264600",
    "end": "270520"
  },
  {
    "text": "them making virtual machines out of your physical machines putting them all onto uh a larger piece of Hardware to give",
    "start": "270520",
    "end": "277120"
  },
  {
    "text": "you these benefits so um you know we're running multiple operating systems on one machine uh we can get high",
    "start": "277120",
    "end": "283560"
  },
  {
    "text": "availability uh you know we uh we can monitor things a whole lot better um you",
    "start": "283560",
    "end": "288720"
  },
  {
    "text": "know they're more configurable so really we're looking at taking a whole bunch of physical machines and consolidating them",
    "start": "288720",
    "end": "294560"
  },
  {
    "text": "down into much more manageable uh and configurable systems and of course once",
    "start": "294560",
    "end": "299759"
  },
  {
    "text": "you've done that uh you know you can then take advantage of high availability stuff uh and some of the other cool",
    "start": "299759",
    "end": "305800"
  },
  {
    "text": "things that uh virtualization is able to do one of the things that is worth",
    "start": "305800",
    "end": "310919"
  },
  {
    "text": "mentioning about virtualization though is it allows you to um treat uh resources in arbitrary ways right so you",
    "start": "310919",
    "end": "317840"
  },
  {
    "text": "can basically create pools of resources whether that's CPU whether that's memory and you can put VMS into those pools of",
    "start": "317840",
    "end": "324319"
  },
  {
    "text": "resources and create arbitrary constraints around memory and CPU to divide up the Computing resource that",
    "start": "324319",
    "end": "329479"
  },
  {
    "text": "you have available to you the reason I mentioned this is because we'll be referring to that a little bit later on",
    "start": "329479",
    "end": "335039"
  },
  {
    "text": "so what I'm going to do is I'm going to start off looking at the existing Java best practices that we have now um it's",
    "start": "335039",
    "end": "342520"
  },
  {
    "text": "really interesting actually the guy that wrote Our Best Practices guide um uh he's spent quite a lot of time uh",
    "start": "342520",
    "end": "349120"
  },
  {
    "text": "working with companies that have been virtualizing Java in fact he's been doing it for years and he's really sort of gone through this whole process of of",
    "start": "349120",
    "end": "355680"
  },
  {
    "text": "of experiencing problems that customers have had coming up with Solutions finding uh a lot of the commonly",
    "start": "355680",
    "end": "361080"
  },
  {
    "text": "experienced problems and at VM world every year he gives a talk on Java best practices it's a whole hourong talk in",
    "start": "361080",
    "end": "367720"
  },
  {
    "text": "itself um he's written a paper that I've referenced online but every single year it seems like there's exponential growth",
    "start": "367720",
    "end": "374720"
  },
  {
    "text": "in the people that are virtualizing Java yeah every year it just doubles in size and at the start there's always a show",
    "start": "374720",
    "end": "379880"
  },
  {
    "text": "of hands it's like yeah we're virtualizing Java or we have or we're in the middle of it um and there's a lot of",
    "start": "379880",
    "end": "385120"
  },
  {
    "text": "interest at this point in okay how do we do it without tripping up on the kind of problems so the first thing I want to",
    "start": "385120",
    "end": "391800"
  },
  {
    "text": "look at is you know some of those uh just a summary of some of those things before we start looking in depth at",
    "start": "391800",
    "end": "397560"
  },
  {
    "text": "memory it's worth mentioning that actually Hardware does have a part to play uh in how effectively",
    "start": "397560",
    "end": "405080"
  },
  {
    "text": "virtualization um performs um there's various different uh CPU uh enhancements",
    "start": "405080",
    "end": "412039"
  },
  {
    "text": "capabilities that appeared uh from sort of 2006 and the more recent CPUs particularly the ones that have the mmu",
    "start": "412039",
    "end": "418560"
  },
  {
    "text": "virtualization um give you much better performance uh with virtualization so that's definitely something to just to",
    "start": "418560",
    "end": "424879"
  },
  {
    "text": "bear in mind we do have some really good papers online we have uh best practices",
    "start": "424879",
    "end": "430039"
  },
  {
    "text": "so this is a general best practice virtualization uh paper for um just running anything on vsphere but we also",
    "start": "430039",
    "end": "436800"
  },
  {
    "text": "have a specific Enterprise Java applications best practice guide um and as I say that is all the expertise of",
    "start": "436800",
    "end": "443360"
  },
  {
    "text": "this colleague of mine boiled down into a paper um it's really worth reading if you're virtualizing Java or considering",
    "start": "443360",
    "end": "449120"
  },
  {
    "text": "virtualizing in Java so let's think about before we uh go into depth in terms of memory some of",
    "start": "449120",
    "end": "455479"
  },
  {
    "text": "just this the the things I've pulled out of that paper so with memory one of the first uh",
    "start": "455479",
    "end": "463120"
  },
  {
    "text": "sort of and and most important sort of underlined best practices that we've had for a long time is always give Java 100%",
    "start": "463120",
    "end": "471199"
  },
  {
    "text": "of the memory that it needs right don't overcommit Java right and the reason we don't overcommit Java is one of the",
    "start": "471199",
    "end": "477479"
  },
  {
    "text": "things I'm going to explore later on this presentation but really it's because Java uh is a special case right we're going to",
    "start": "477479",
    "end": "483560"
  },
  {
    "text": "explore why that is later but it's like don't even think about it because there's potential",
    "start": "483560",
    "end": "489639"
  },
  {
    "text": "pitfalls second thing try to reduce the Java heap if possible to avoid wasting memory well that's that's not a good",
    "start": "489639",
    "end": "495280"
  },
  {
    "text": "message because you know we set our Java heaps to be a particular size for a good reason we don't want to go out of memory",
    "start": "495280",
    "end": "501639"
  },
  {
    "text": "you know we want uh the garbage collection performance that we desire um so you know that's not a good message",
    "start": "501639",
    "end": "507479"
  },
  {
    "text": "either right using large Pages again we'll look at a little bit later that does help with performance um but as I",
    "start": "507479",
    "end": "513800"
  },
  {
    "text": "say we're focusing mainly on memory in this presentation so we'll move on from that now there's a whole bunch of best",
    "start": "513800",
    "end": "519800"
  },
  {
    "text": "practice advice about the number of CPUs because with virtualization of course you can select how many vcpu that you",
    "start": "519800",
    "end": "526640"
  },
  {
    "text": "want and sometimes it's difficult to figure out you know should I just give it like 16 and that'll just make it",
    "start": "526640",
    "end": "532120"
  },
  {
    "text": "perform better or should I give it two you know it's actually quite a difficult question um generally the best practice",
    "start": "532120",
    "end": "538320"
  },
  {
    "text": "that we have is you know more is not necessarily better right typically try to match the number of CPUs to the",
    "start": "538320",
    "end": "543959"
  },
  {
    "text": "number of garbage collection threads that you have uh and you can set that on the command line you know you can configure that yourself um and in fact",
    "start": "543959",
    "end": "550720"
  },
  {
    "text": "the jvm will should autotune the number of garbage collection threads to the number of CPUs you have as well um but",
    "start": "550720",
    "end": "556800"
  },
  {
    "text": "that's the main bit of advice around CPUs and there's a bunch more in in the paper and I recommend you go and look at",
    "start": "556800",
    "end": "562279"
  },
  {
    "text": "that in more detail the eke keeping is an interesting one too it's not one that you would",
    "start": "562279",
    "end": "567560"
  },
  {
    "text": "necessarily uh think about but actually um you know with virtualization you can get into",
    "start": "567560",
    "end": "572720"
  },
  {
    "text": "situations where you have very fractional um sort of sort of errors in terms of in terms of extremely precise",
    "start": "572720",
    "end": "579560"
  },
  {
    "text": "timekeeping and so there are particular distributions of uh Linux and windows",
    "start": "579560",
    "end": "585560"
  },
  {
    "text": "and I've actually got an appendix in the back of this presentation and I'll show you the appendix at the end um there's",
    "start": "585560",
    "end": "591880"
  },
  {
    "text": "there's various things that we recommend to make sure that you don't run into those problems because they are kind of",
    "start": "591880",
    "end": "597000"
  },
  {
    "text": "subtle uh you won't necessarily spot them in immediately and then there's a whole bunch of stuff in the paper as well",
    "start": "597000",
    "end": "603079"
  },
  {
    "text": "experience gained from uh scalability in terms of you know how do we scale vertically how do we scale horizontally",
    "start": "603079",
    "end": "609000"
  },
  {
    "text": "um so I do recommend if you if you are virtualizing Java if you have V virtualized it go read the paper because",
    "start": "609000",
    "end": "614959"
  },
  {
    "text": "it's it's got a lot of good stuff in it okay so that's kind of just a very very",
    "start": "614959",
    "end": "620240"
  },
  {
    "text": "high level overview of some of the things you need to think about when virtualizing Java but as I say I'm going",
    "start": "620240",
    "end": "625600"
  },
  {
    "text": "to focus on memory now the main reason I'm going to focus on memory is because memory is the one area that's still not",
    "start": "625600",
    "end": "631920"
  },
  {
    "text": "great right the best practice advice that we just saw which is try and reduce your HEAP size don't overcommit memory",
    "start": "631920",
    "end": "638399"
  },
  {
    "text": "it's not a great message right and we've been giving this message year year after year and this is why vmw brought me in",
    "start": "638399",
    "end": "644760"
  },
  {
    "text": "to try to see if I could do something about this so this is why we're going to be focusing on memory and what I want to",
    "start": "644760",
    "end": "650320"
  },
  {
    "text": "do is actually go through um sort of a whole of series of slides explaining how",
    "start": "650320",
    "end": "655880"
  },
  {
    "text": "the various layers interact because that will give good background in explaining why Java uh responds in the way that it",
    "start": "655880",
    "end": "663200"
  },
  {
    "text": "does so when we think about uh virtual memory see we have virtual memory here",
    "start": "663200",
    "end": "669360"
  },
  {
    "text": "um we're thinking typically about the application space and the operating system you can allocate virtual memory",
    "start": "669360",
    "end": "675800"
  },
  {
    "text": "uh the operating system ultimately maps that to physical memory but then if you introduce virtualization you actually",
    "start": "675800",
    "end": "681680"
  },
  {
    "text": "introduce another level of indirection so if you write some virtual or you write some memory at this level it gets",
    "start": "681680",
    "end": "686959"
  },
  {
    "text": "stored in a memory address at that level and then gets mapped to a memory address actually on the host that your VM is",
    "start": "686959",
    "end": "692639"
  },
  {
    "text": "living in so really we can think about you know memory being written to one",
    "start": "692639",
    "end": "697720"
  },
  {
    "text": "place it's stored uh in another address here and kind of stored actually on the physical memory which we call machine",
    "start": "697720",
    "end": "704240"
  },
  {
    "text": "memory on the host confusingly physical memory here is what we describe as the memory in the operating system which of",
    "start": "704240",
    "end": "710639"
  },
  {
    "text": "course when it's virtualized is one level of indirection above the actual real physical memory so when we think about what lives",
    "start": "710639",
    "end": "718680"
  },
  {
    "text": "at these levels we've got the application at the top here the operating system and the",
    "start": "718680",
    "end": "724120"
  },
  {
    "text": "hypervisor so when we think about a virtual machine and by the way in this",
    "start": "724120",
    "end": "729480"
  },
  {
    "text": "presentation those of you who say VM when you mean jvm I won't be confusing the two right when I when I mean jvm",
    "start": "729480",
    "end": "735720"
  },
  {
    "text": "I'll say jvm when I mean VM I'll say VM we have so much confusion about that at work um so a VM encapsulates those two",
    "start": "735720",
    "end": "743720"
  },
  {
    "text": "layers the application layer and the sort of base operating system layer so let's think about application",
    "start": "743720",
    "end": "750000"
  },
  {
    "text": "memory management typically an application is going to allocate some memory when it needs it uh it's going to",
    "start": "750000",
    "end": "755560"
  },
  {
    "text": "do some work and then when it's done with that memory a well- behaved application is going to free it right it's going to free it back back to the",
    "start": "755560",
    "end": "761000"
  },
  {
    "text": "operating system then when we think about how the operating system uh manages memory of",
    "start": "761000",
    "end": "767160"
  },
  {
    "text": "course its responsibility is to juggle the memory needs of the applications that are running on it okay so it has a",
    "start": "767160",
    "end": "772519"
  },
  {
    "text": "free list uh it basically uh dulls out memory it might swap memory to dis but its job is to manage the memory that the",
    "start": "772519",
    "end": "779519"
  },
  {
    "text": "applications need and as I say it defines the semantics of what allocated",
    "start": "779519",
    "end": "784600"
  },
  {
    "text": "memory and what free memory actually is and all of that information exists at that operating system",
    "start": "784600",
    "end": "791360"
  },
  {
    "text": "layer so when the operating system wants to actually write a memory the",
    "start": "791360",
    "end": "796639"
  },
  {
    "text": "hypervisor gives it a memory address and the memory is written into the hypervisor and that continues and",
    "start": "796639",
    "end": "803760"
  },
  {
    "text": "continues at infin item so the hypervisor is actually the thing that owns the memory that's being written to",
    "start": "803760",
    "end": "809440"
  },
  {
    "text": "and it's managing this level of indirection between the operating system and itself now the fact that there's a",
    "start": "809440",
    "end": "815079"
  },
  {
    "text": "level of indirection here actually allows it to do some pretty cool tricks that we're going to look at a little bit later on um but the important thing to",
    "start": "815079",
    "end": "822399"
  },
  {
    "text": "understand here is machine memory is lasery allocated as it's needed okay which which makes sense you know there's",
    "start": "822399",
    "end": "827720"
  },
  {
    "text": "no reason you would allocate all the memory the operating system needs up front so what happens then if uh the",
    "start": "827720",
    "end": "836759"
  },
  {
    "text": "operating system actually wants to free memory uh or the application wants to free memory back to the operating system",
    "start": "836759",
    "end": "843800"
  },
  {
    "text": "well let's say the application just here has just freed that gray bit of memory okay it's freed the memory so that",
    "start": "843800",
    "end": "850160"
  },
  {
    "text": "memory now appears in the free list however the hypervisor has no idea",
    "start": "850160",
    "end": "855240"
  },
  {
    "text": "that's just happened it's still maintaining the state of that memory because of these levels of indirection it just has no idea and actually there's",
    "start": "855240",
    "end": "862120"
  },
  {
    "text": "quite an important separation of concerns there that means that it really shouldn't know what applications own",
    "start": "862120",
    "end": "867399"
  },
  {
    "text": "what memory and at what time right so the memory's been freed but the hypervisor isn't aware that that's",
    "start": "867399",
    "end": "875079"
  },
  {
    "text": "happened so if we actually play this scenario out let's say an application",
    "start": "875079",
    "end": "880360"
  },
  {
    "text": "starts up so the application starts up it writes a memory which means the memories come off the free list and it's",
    "start": "880360",
    "end": "886120"
  },
  {
    "text": "been written into the machine memory on the hypervisor let's say it writes some more memory and the same thing's happened",
    "start": "886120",
    "end": "891880"
  },
  {
    "text": "again now let's say it frees that memory back so the memory's gone back on the free list in the operating system but",
    "start": "891880",
    "end": "897839"
  },
  {
    "text": "the hypervisor is still m maintaining the state of that memory now it's allocated some more uh",
    "start": "897839",
    "end": "904800"
  },
  {
    "text": "and now it's freed that memory but you can see how the memory becomes basically garbage memory in the operating system",
    "start": "904800",
    "end": "910519"
  },
  {
    "text": "but isn't garbage memory in the hypervisor the the the the state of it is still maintained so what actually uh happens",
    "start": "910519",
    "end": "918360"
  },
  {
    "text": "here if we think about the VM as a black box what actually happens is that you",
    "start": "918360",
    "end": "924320"
  },
  {
    "text": "just see from the hypervisor perspective that memory is just being written to and written to and written to and written to",
    "start": "924320",
    "end": "931680"
  },
  {
    "text": "and written to there's there's no way the hypervisor has of actually determining what memory uh it can",
    "start": "931680",
    "end": "937720"
  },
  {
    "text": "actually reclaim from that VM again because of this separation of concerns that",
    "start": "937720",
    "end": "944199"
  },
  {
    "text": "exists so so over the years various different",
    "start": "946519",
    "end": "953399"
  },
  {
    "text": "uh mechanisms have been developed to try to reclaim memory from VMS we're going to look at some of these mechanisms in",
    "start": "953399",
    "end": "958800"
  },
  {
    "text": "the the next slide um we can kind of divide these mechanisms into um proactive mechanisms and reactive",
    "start": "958800",
    "end": "965000"
  },
  {
    "text": "mechanisms right a proactive mechanism is one that's kind of you know very low priority over time it's going to try and",
    "start": "965000",
    "end": "971519"
  },
  {
    "text": "reclaim some memory if it can a reactive one is like I need memory give me memory right so transparent page sharing is an",
    "start": "971519",
    "end": "978759"
  },
  {
    "text": "example of a proactive feature right so there's a background thread that just trolls around kind of slowly and just",
    "start": "978759",
    "end": "985759"
  },
  {
    "text": "looks to see if there's any identical pages at this level in the hypervisor",
    "start": "985759",
    "end": "991399"
  },
  {
    "text": "now remember I told you that level of indirection between the VMS and the hypervisor allows for some cool tricks",
    "start": "991399",
    "end": "997240"
  },
  {
    "text": "so what it's actually able to do is it's actually able to point identical Pages at the same machine page and then if any",
    "start": "997240",
    "end": "1005440"
  },
  {
    "text": "any of these pages are actually written to behind the scenes there's a copy on right it gets its own copy of the memory",
    "start": "1005440",
    "end": "1010959"
  },
  {
    "text": "and ultimately what we've done there of course as you can see is we've saved some memory by sharing uh sharing memory",
    "start": "1010959",
    "end": "1016839"
  },
  {
    "text": "now most of the memory that we share is going to be mutable um and it's you know going to sit there for a while and",
    "start": "1016839",
    "end": "1022120"
  },
  {
    "text": "eventually find this immutable memory and share it but that's quite a useful feature there's no point duplicating",
    "start": "1022120",
    "end": "1028400"
  },
  {
    "text": "it now if the hypervisor actually quite urgently needs memory right then a",
    "start": "1028400",
    "end": "1035160"
  },
  {
    "text": "reactive technique that it can use is a technique called ballooning and what I'm",
    "start": "1035160",
    "end": "1040240"
  },
  {
    "text": "going to do is explain a little bit about what ballooning is for those of you who haven't seen it before let's say",
    "start": "1040240",
    "end": "1045400"
  },
  {
    "text": "we have a couple of VMS and they're all using uh memory on the hypervisor well ballooning is basically a way that the",
    "start": "1045400",
    "end": "1052440"
  },
  {
    "text": "hypervisor has of putting direct pressure on the operating system to force it to give back memory okay now",
    "start": "1052440",
    "end": "1059000"
  },
  {
    "text": "I'm going to show you exactly how that works in this next slide let's imagine that the hypervisor",
    "start": "1059000",
    "end": "1064559"
  },
  {
    "text": "down here has eight pieces of memory that have been written to okay it's this machine memory that's been written to",
    "start": "1064559",
    "end": "1070360"
  },
  {
    "text": "but you can see this guest app here actually only has three bits of memory that it's using this means that there must have been things running beforehand",
    "start": "1070360",
    "end": "1077080"
  },
  {
    "text": "that's left a whole bunch of dirty memory here in the operating system and that's then still allocated in the",
    "start": "1077080",
    "end": "1082720"
  },
  {
    "text": "hypervisor so the hypervisor is basically saying I need some of this memory back right from the operating system and you can see there's actually",
    "start": "1082720",
    "end": "1088760"
  },
  {
    "text": "plenty of free memory there so it has this thing called a balloon driver and the job of the balloon driver is to take",
    "start": "1088760",
    "end": "1095600"
  },
  {
    "text": "instructions from the hypervisor and allocate memory so let me show you let's",
    "start": "1095600",
    "end": "1101360"
  },
  {
    "text": "say the hypervisor says right I need three bits of memory well the balloon driver allocates a memory and it now",
    "start": "1101360",
    "end": "1108120"
  },
  {
    "text": "owns that memory memory in the operating system so the memory has gone off the free list the balloon driver then pins",
    "start": "1108120",
    "end": "1114919"
  },
  {
    "text": "the uh memory to make sure that it can't be swwa to disc and it can't move what it then does is it then passes",
    "start": "1114919",
    "end": "1124039"
  },
  {
    "text": "a message back to the hypervisor saying okay I now own this memory and I've pinned it so it's not going anywhere",
    "start": "1124039",
    "end": "1130679"
  },
  {
    "text": "here are the addresses of that memory you can have it back so it's like a kind of a a sort of the balloon Drive is like",
    "start": "1130679",
    "end": "1137200"
  },
  {
    "text": "a secret agent with a red telephone working on behalf of the hypervisor undercover inside the VM it makes it",
    "start": "1137200",
    "end": "1143320"
  },
  {
    "text": "sound more exciting than it is but you know it's it's a nice image so so what's what's happened there",
    "start": "1143320",
    "end": "1149919"
  },
  {
    "text": "importantly is the hypervisor has been then able to decouple that memory and of course now instead of having eight",
    "start": "1149919",
    "end": "1155080"
  },
  {
    "text": "pieces of memory we now have five pieces of memory allocated and ballooning the first time you come across it is",
    "start": "1155080",
    "end": "1161039"
  },
  {
    "text": "actually a little bit counterintuitive because what we're doing is we're actually allocating",
    "start": "1161039",
    "end": "1166559"
  },
  {
    "text": "memory in order to give it back",
    "start": "1166559",
    "end": "1170720"
  },
  {
    "text": "so one possible side effect of this ballooning is that uh potentially",
    "start": "1172520",
    "end": "1177679"
  },
  {
    "text": "there's not actually going to be uh enough memory uh for the balloon driver to to to to to take without causing any",
    "start": "1177679",
    "end": "1185919"
  },
  {
    "text": "uh side effects of that operating system all right so let's imagine there's loads of free memory um the balloon driver",
    "start": "1185919",
    "end": "1192039"
  },
  {
    "text": "takes the memory and everything's good but if there really isn't much free memory in that uh operating system and",
    "start": "1192039",
    "end": "1198440"
  },
  {
    "text": "the balloon driver takes a bunch of it there's a potential that it's going to um eat into the buffer cach which maybe",
    "start": "1198440",
    "end": "1203760"
  },
  {
    "text": "is what we want but there's also a potential it might start paging other applications to dis the question was uh",
    "start": "1203760",
    "end": "1209200"
  },
  {
    "text": "whether the operating system is aware that this is going on and the answer is yes it is um because the balloon driver",
    "start": "1209200",
    "end": "1214760"
  },
  {
    "text": "is just a process that runs in there and it simply just allocates some pins memory and then if the hypervisor wants",
    "start": "1214760",
    "end": "1220240"
  },
  {
    "text": "the balloon to shrink it just frees the memory that allocated and tells the hypervisor that's happened so the",
    "start": "1220240",
    "end": "1225480"
  },
  {
    "text": "operating system is very well aware that that's happening and in a sense that's kind of the point because what we're",
    "start": "1225480",
    "end": "1231320"
  },
  {
    "text": "trying to do here is we're trying to make the operating system do the right thing within its own framework of memory",
    "start": "1231320",
    "end": "1237600"
  },
  {
    "text": "management right we're putting pressure on it and if it decides okay I'm going to give up some buffer cash or if it",
    "start": "1237600",
    "end": "1243120"
  },
  {
    "text": "decides I'm going to swap this application to dis or even if it decides I'm going to kill this application because I'm completely out of memory",
    "start": "1243120",
    "end": "1249000"
  },
  {
    "text": "that's the right thing for it to do because we're we're we're not telling it what to do we're just kind of having you",
    "start": "1249000",
    "end": "1254080"
  },
  {
    "text": "know we're putting memory pressure on there if that makes sense",
    "start": "1254080",
    "end": "1260480"
  },
  {
    "text": "so so let's look at a couple more techniques the hypervisor has available to it very",
    "start": "1263480",
    "end": "1270159"
  },
  {
    "text": "quickly um again these are reactive right so if ballooning doesn't give us enough memory um we really don't want",
    "start": "1270159",
    "end": "1277600"
  },
  {
    "text": "any VM uh violating any constraints or using more memory than it should uh and",
    "start": "1277600",
    "end": "1282799"
  },
  {
    "text": "so the the hypervisor will come down pretty hard on a VM that doesn't behave and one of the ways it can do that is uh",
    "start": "1282799",
    "end": "1289400"
  },
  {
    "text": "by compressing memory so here you see this piece of blue memory here what it can do is that can actually zip it and",
    "start": "1289400",
    "end": "1295760"
  },
  {
    "text": "then uh sort of have a a sort of pseudo reference to it and then it will uncompress it if it needs to be read back in again so it's like swapping but",
    "start": "1295760",
    "end": "1303039"
  },
  {
    "text": "it allows ivisor to keep it in memory and so it's more performant than swapping to disk but of course at the",
    "start": "1303039",
    "end": "1308919"
  },
  {
    "text": "last result it can actually swap memory out to disk again it's a way to free memory but it's not going to be",
    "start": "1308919",
    "end": "1316279"
  },
  {
    "text": "performant so a really important question that that's raised by this whole topic of memory Reclamation is",
    "start": "1316279",
    "end": "1322840"
  },
  {
    "text": "when does the hypervisor reclaim memory and which VMS does it Target for this",
    "start": "1322840",
    "end": "1328320"
  },
  {
    "text": "kind of reclamation well the answer to when it reclaims memory is simply if it's under",
    "start": "1328320",
    "end": "1334080"
  },
  {
    "text": "memory pressure right so the passive technique that we saw happens all the",
    "start": "1334080",
    "end": "1339320"
  },
  {
    "text": "time regardless it's very very low cost it doesn't you know there's no real no real notice no one really notices that",
    "start": "1339320",
    "end": "1344919"
  },
  {
    "text": "that's happening whereas the reactive techniques are only employed if uh there",
    "start": "1344919",
    "end": "1350360"
  },
  {
    "text": "is memory pressure on the host so remember earlier on we talked about how you can create these resource pools so",
    "start": "1350360",
    "end": "1355960"
  },
  {
    "text": "let's say for example that I've got two VMS that are uh 4 gbt each so I have 8",
    "start": "1355960",
    "end": "1361000"
  },
  {
    "text": "gbt of of vram in total and I put those into a resource pool that I say okay I",
    "start": "1361000",
    "end": "1366080"
  },
  {
    "text": "only want you to have 6 Gigabytes we've basically then applied some memory pressure by saying these guys can only",
    "start": "1366080",
    "end": "1372000"
  },
  {
    "text": "consume a maximum of 6 gbt on the host and it's at that point the hypervisor is going to have to start basically putting",
    "start": "1372000",
    "end": "1377880"
  },
  {
    "text": "memory pressure on these guys and really doing a juggling act under the covers to make sure that uh they only ever consume",
    "start": "1377880",
    "end": "1384760"
  },
  {
    "text": "that 6 GB so that's when Reclamation occurs uh",
    "start": "1384760",
    "end": "1389960"
  },
  {
    "text": "which VMS is actually another interesting question because you don't want to be reclaiming memory from VMS",
    "start": "1389960",
    "end": "1395200"
  },
  {
    "text": "that are very uh active or they have you know a lot of memory in use and so what the hypervisor does is it is it makes a",
    "start": "1395200",
    "end": "1402520"
  },
  {
    "text": "pretty accurate estimation of the amount of active memory in a VM so we'll look at the number of reads and writes going",
    "start": "1402520",
    "end": "1408760"
  },
  {
    "text": "on uh with any given VM it will estimate how much of that memory is actually active how much of it is in use and it",
    "start": "1408760",
    "end": "1416200"
  },
  {
    "text": "will Target the least active uh VMS for Reclamation and actually um this is",
    "start": "1416200",
    "end": "1422679"
  },
  {
    "text": "exactly what you want you know you may have um two VMS uh one of which is serving one geography and the other of",
    "start": "1422679",
    "end": "1429640"
  },
  {
    "text": "which is serving another geography that's 12 hours uh you know Advanced and so for part of the day one's going to be",
    "start": "1429640",
    "end": "1435400"
  },
  {
    "text": "really active for the other part of the day the other one's going to be really active and again that's a perfect candidate for that kind of resource",
    "start": "1435400",
    "end": "1441320"
  },
  {
    "text": "juggling you know you'll get memory Reclamation from the least active one when it's most appropriate and the most",
    "start": "1441320",
    "end": "1447640"
  },
  {
    "text": "active one gets all the memory that it needs so that's basically the tricks that are used under the covers to make",
    "start": "1447640",
    "end": "1452960"
  },
  {
    "text": "sure that in general it makes the right choices and the right decisions I will say though that for",
    "start": "1452960",
    "end": "1459480"
  },
  {
    "text": "things that are very highly performant like anything that is you know latencies are critical um you know any kind of",
    "start": "1459480",
    "end": "1466760"
  },
  {
    "text": "memory of a commitment regardless of whether it's Java is probably not going to be appropriate right because because there's always going to be uh a small",
    "start": "1466760",
    "end": "1473039"
  },
  {
    "text": "cost incurred regardless of you know regardless of how how big or small that actually ends up",
    "start": "1473039",
    "end": "1478840"
  },
  {
    "text": "being so having looked then at these memory Reclamation techniques yeah hi you resource pool yeah so if you weren",
    "start": "1478840",
    "end": "1486919"
  },
  {
    "text": "to use a resource pool there's a couple of different ways that memory pressure could occur you could actually have the",
    "start": "1486919",
    "end": "1492520"
  },
  {
    "text": "entire host be overcommitted for example so if you got you know 32 gig in the host and you have enough VMS that total",
    "start": "1492520",
    "end": "1498360"
  },
  {
    "text": "48 gig that's one way in which it will try and reclaim memory um you can also Force VMS into situations where they",
    "start": "1498360",
    "end": "1504960"
  },
  {
    "text": "have to run in less memory than You' give than they think they have um that's less a less of a good idea because you",
    "start": "1504960",
    "end": "1511480"
  },
  {
    "text": "basically bypass the hypervisor sort of uh intelligent estimation that point but um but there are various different ways",
    "start": "1511480",
    "end": "1517520"
  },
  {
    "text": "of making that happen yeah and of course you know this integrates quite nicely with uh the v",
    "start": "1517520",
    "end": "1524760"
  },
  {
    "text": "motion technology as well so if one host gets under too much memory pressure it'll start moving VMS off onto another",
    "start": "1524760",
    "end": "1531000"
  },
  {
    "text": "host you know that that you might have as a backup so you know that it works in in in an integrated way with",
    "start": "1531000",
    "end": "1537240"
  },
  {
    "text": "that so what I want to look at now is um Java memory management um and then we'll",
    "start": "1537240",
    "end": "1543399"
  },
  {
    "text": "sort of hook the two together now what's interesting when we look at Java is there are actually some",
    "start": "1543399",
    "end": "1548840"
  },
  {
    "text": "quite interesting parallels between the Black Box relationship that we saw between VMS and the hypervisor and the",
    "start": "1548840",
    "end": "1555440"
  },
  {
    "text": "relationship between a jvm and the operating system okay so let's look at what happens when a jvm starts up so the",
    "start": "1555440",
    "end": "1562600"
  },
  {
    "text": "jvm starts up let's say the jit initializes The Interpreter initializes the garbage collection initializes and",
    "start": "1562600",
    "end": "1569120"
  },
  {
    "text": "then your application starts so your application's going to start writing data into the Heap and it's going to be",
    "start": "1569120",
    "end": "1574919"
  },
  {
    "text": "of course chewing into the uh memory and the operating system so we'll fill up the heat Heap as we're allocating",
    "start": "1574919",
    "end": "1582039"
  },
  {
    "text": "objects and eventually there's going to be a garbage collection so the garbage collection occurs and now that's great",
    "start": "1582039",
    "end": "1589000"
  },
  {
    "text": "we've got some free memory right but the thing is the free memory is only available to the jvm that that memory is",
    "start": "1589000",
    "end": "1595840"
  },
  {
    "text": "now no longer available to any other process in that operating system okay so the operating system has no way of",
    "start": "1595840",
    "end": "1602640"
  },
  {
    "text": "reclaiming that memory in exactly the same way as a hypervisor had no way of reclaiming the memory from the operating",
    "start": "1602640",
    "end": "1607679"
  },
  {
    "text": "system right it's exactly the same kind of relationship so let's just play out some",
    "start": "1607679",
    "end": "1613360"
  },
  {
    "text": "scenarios then and look at what what differences different Heap configurations could make",
    "start": "1613360",
    "end": "1620240"
  },
  {
    "text": "because this is actually quite interesting there quite often um uh you get the question about is it better for",
    "start": "1620320",
    "end": "1626760"
  },
  {
    "text": "me to have XMS and xmx set to the same thing or is it best to have XMS set smaller than xmx well you know it it",
    "start": "1626760",
    "end": "1633360"
  },
  {
    "text": "actually really depends largely on the kind of application you have typically when I was at IBM we would tell customers never set XMS equal to xmx",
    "start": "1633360",
    "end": "1641000"
  },
  {
    "text": "because if you have a non- generational Heap you basically work work work work work work work oh massive garbage",
    "start": "1641000",
    "end": "1647320"
  },
  {
    "text": "collection no and that's not necessarily what you want um but let's have a look let's play",
    "start": "1647320",
    "end": "1653679"
  },
  {
    "text": "out a scenario and compare the behavior of a partially committed Heap with a fully committed Heap so with a partially",
    "start": "1653679",
    "end": "1661240"
  },
  {
    "text": "committed Heap here the initial size is smaller than the maximum size and let's",
    "start": "1661240",
    "end": "1666919"
  },
  {
    "text": "allocate some objects so we allocate an object allocate another object oh the heap's full right so we're going to have",
    "start": "1666919",
    "end": "1672399"
  },
  {
    "text": "a garbage collection so we've had a garbage collection and we've collected half of our data in the Heap so that",
    "start": "1672399",
    "end": "1678320"
  },
  {
    "text": "next object is actually going to overwrite this memory here which is which is good so then we've reached the",
    "start": "1678320",
    "end": "1684320"
  },
  {
    "text": "maximum size of the Heap again and this is what the jvm will do if if well the sun sun jvm anyway is that when it gets",
    "start": "1684320",
    "end": "1691240"
  },
  {
    "text": "to a point where the Heap is full it will do a garbage collection and it will increase the size so this is what it's",
    "start": "1691240",
    "end": "1696640"
  },
  {
    "text": "done again we're going to overwrite the garbage that was there before and eventually we will get to a point where",
    "start": "1696640",
    "end": "1702519"
  },
  {
    "text": "we've done our final garbage collection and this is the amount of memory we're now consuming as our footprint in the",
    "start": "1702519",
    "end": "1708320"
  },
  {
    "text": "virtual machine sorry I should say in the guest operating system now let's play this out again",
    "start": "1708320",
    "end": "1715519"
  },
  {
    "text": "with a fully committed Heap when we set xmx XMS equal to",
    "start": "1715519",
    "end": "1720720"
  },
  {
    "text": "xmx so as you can imagine we're just going to basically now at this point remember that yellow thing has become",
    "start": "1720720",
    "end": "1727279"
  },
  {
    "text": "garbage oh and now the blue thing has become garbage but because we've had no garbage collection of course you know that's that's not really been registered",
    "start": "1727279",
    "end": "1733600"
  },
  {
    "text": "yet So eventually we will get a full garbage collection the consequence of",
    "start": "1733600",
    "end": "1739519"
  },
  {
    "text": "this Heap configuration well there's two interesting consequences here one is that the footprint of this jvm is now",
    "start": "1739519",
    "end": "1745559"
  },
  {
    "text": "bigger on the operating system and the way that the hotspot jvm works is that",
    "start": "1745559",
    "end": "1750960"
  },
  {
    "text": "it's very very reluctant to shrink its Heap you can force it to shrink its heat but generally it's very reluctant to",
    "start": "1750960",
    "end": "1756559"
  },
  {
    "text": "because it kind of assumes okay I've got you know all this memory I can just kind of use it it's fine now there are other",
    "start": "1756559",
    "end": "1762200"
  },
  {
    "text": "jvms that will shrink their heaps very aggressively aul's jvm for example will do that uh and so that's going to be",
    "start": "1762200",
    "end": "1768279"
  },
  {
    "text": "different Behavior but certainly with hotspot this is what you get now the other interesting thing here is that",
    "start": "1768279",
    "end": "1774320"
  },
  {
    "text": "it's left more fragmentation in the heat which is ultimately going to have to be uh sorted out now I'm not saying that",
    "start": "1774320",
    "end": "1780919"
  },
  {
    "text": "that this is always better but it's interesting to see the consequence of just that different Heap configuration",
    "start": "1780919",
    "end": "1786440"
  },
  {
    "text": "has had and to a certain extent it's a uh side effect of the amount of live",
    "start": "1786440",
    "end": "1791679"
  },
  {
    "text": "data you have at any one time right is is is how this is ultimately going to behave so in a in in a few minutes we're",
    "start": "1791679",
    "end": "1799360"
  },
  {
    "text": "going to tie those two things together firstly though I want to mention large Pages because I talked about that briefly earlier",
    "start": "1799360",
    "end": "1806600"
  },
  {
    "text": "on we do um recommend in our best practice guide that you use large pages",
    "start": "1806600",
    "end": "1812760"
  },
  {
    "text": "when you use Java um a lot of people don't in fact most people don't bother to use large Pages partly because it can",
    "start": "1812760",
    "end": "1818399"
  },
  {
    "text": "be kind of a pain to configure uh and if any of you have used uh Linux and Java I mean it's just you know you go round and",
    "start": "1818399",
    "end": "1824039"
  },
  {
    "text": "round and around trying to figure out exactly you know which exactly how to make it work because the the error messages really aren't all that helpful",
    "start": "1824039",
    "end": "1830159"
  },
  {
    "text": "if you get it wrong um but it does actually make quite a big performance difference we have put some papers out",
    "start": "1830159",
    "end": "1836840"
  },
  {
    "text": "on that uh that you can search for um but the reason that it performs better",
    "start": "1836840",
    "end": "1842240"
  },
  {
    "text": "is because there's much less uh IND direction that needs to be managed or the IND direction is at a different",
    "start": "1842240",
    "end": "1847640"
  },
  {
    "text": "granularity so it's much much easier for the hypervisor to to to handle those large Pages than it is for smaller",
    "start": "1847640",
    "end": "1855919"
  },
  {
    "text": "pages so let's time these things together and look at how the jvm and the",
    "start": "1855919",
    "end": "1861480"
  },
  {
    "text": "hypervisor interact when it comes to memory management so just to recap what we've",
    "start": "1861480",
    "end": "1867720"
  },
  {
    "text": "talked about we've seen that the VM is a blackbox to the hypervisor we've seen",
    "start": "1867720",
    "end": "1873279"
  },
  {
    "text": "that the jvm is a black box to the guest the guest operating system we've seen",
    "start": "1873279",
    "end": "1878679"
  },
  {
    "text": "that the most efficient way of reclaiming memory is ballooning right but ballooning basically forces the",
    "start": "1878679",
    "end": "1885799"
  },
  {
    "text": "operating system to to give memory back to the hypervisor now given that when",
    "start": "1885799",
    "end": "1890840"
  },
  {
    "text": "you're running Java the operating system has no way of actually getting memory back from the jvm we're actually",
    "start": "1890840",
    "end": "1897080"
  },
  {
    "text": "applying the memory pressure at the wrong place right and and and that can have interesting consequences right so",
    "start": "1897080",
    "end": "1903600"
  },
  {
    "text": "Java's memory management basically breaks this model at least with with the hotspot jvm and this is why we recommend",
    "start": "1903600",
    "end": "1911720"
  },
  {
    "text": "that you don't overcommit memory with Java and I'm actually going to do some demos that will show you exactly what happens if you do that",
    "start": "1911720",
    "end": "1918360"
  },
  {
    "text": "uh in a second so with ballooning the hypervisor uh yeah so I've already mentioned that",
    "start": "1918360",
    "end": "1924639"
  },
  {
    "text": "that's fine so so let's have a look at what happens with Java let's actually play this out what we're going to do is",
    "start": "1924639",
    "end": "1930880"
  },
  {
    "text": "we're going to run the exact same scenario that we just did in fact this is the situation that we left that",
    "start": "1930880",
    "end": "1936279"
  },
  {
    "text": "previous scenario in and we're going to apply ballooning to that so let's introduce the balloon and then let's say",
    "start": "1936279",
    "end": "1942559"
  },
  {
    "text": "that the hypervisor says okay give me some memory so the balloon uh inflates fortunately there's actually some free",
    "start": "1942559",
    "end": "1948240"
  },
  {
    "text": "memory in that operating system and so that's all been fine and then you know the heap's",
    "start": "1948240",
    "end": "1953799"
  },
  {
    "text": "written some more memory and everything's hunky dory with a fully committed heat though remember we left",
    "start": "1953799",
    "end": "1959360"
  },
  {
    "text": "it in this slightly uh fragmented and you know um bigger footprint State we",
    "start": "1959360",
    "end": "1965159"
  },
  {
    "text": "introduce the balloon suddenly the balloon is fighting with the jvm for memory so what it's likely to do is it's",
    "start": "1965159",
    "end": "1971440"
  },
  {
    "text": "likely to swap the jvm Heap out to dis because it can't get access to that to that free memory and what's going to",
    "start": "1971440",
    "end": "1977679"
  },
  {
    "text": "happen happen well the next time a garbage collection occurs it's going to be very slow because it's going you're",
    "start": "1977679",
    "end": "1983159"
  },
  {
    "text": "going to have very high latencies trying to page all that heat memory back in from disk okay so what's interesting",
    "start": "1983159",
    "end": "1990760"
  },
  {
    "text": "about this is that the only difference between these two scenarios is how we configured our Heap right which is a",
    "start": "1990760",
    "end": "1996039"
  },
  {
    "text": "really subtle thing um but it's because of these subtleties that again we say",
    "start": "1996039",
    "end": "2001600"
  },
  {
    "text": "you know what the provisors are too complex don't do it okay",
    "start": "2001600",
    "end": "2008000"
  },
  {
    "text": "um now what's interesting actually is that the behavior of this ballooning varies with uh large and small Pages now",
    "start": "2008000",
    "end": "2014480"
  },
  {
    "text": "those of you who've used large pages on Linux we know that the current implementation uh actually uh the large",
    "start": "2014480",
    "end": "2021519"
  },
  {
    "text": "pages are pinned they can't be swapped to dis um and so what happens is if you back the entire jvm with large pages and",
    "start": "2021519",
    "end": "2027840"
  },
  {
    "text": "that's the majority of the memory uh in the in the in the VM the balloon won't swap memory to dis because it can't",
    "start": "2027840",
    "end": "2034600"
  },
  {
    "text": "because it can't swap those large pages to dis so actually it simply won't inflate and the hypervisor will start",
    "start": "2034600",
    "end": "2040000"
  },
  {
    "text": "host swapping it instead it'll start trying to compress it and host swap it and the performance will suck just as",
    "start": "2040000",
    "end": "2045440"
  },
  {
    "text": "badly so um it sucks in a different way but it will still suck and again we will",
    "start": "2045440",
    "end": "2050839"
  },
  {
    "text": "show you uh show you that happening again I want to stress just in case you",
    "start": "2050839",
    "end": "2056158"
  },
  {
    "text": "know this actually gets me fired that I'm not saying that vmw performance sucks okay we just want to be clear",
    "start": "2056159",
    "end": "2062280"
  },
  {
    "text": "about this right what I'm saying is that the Java memory model is incompatible with the ballooning and that's why we",
    "start": "2062280",
    "end": "2068839"
  },
  {
    "text": "end up in this so it's Java's fault that's what I want to say it's Java's fault so what about the transparent page",
    "start": "2068839",
    "end": "2075960"
  },
  {
    "text": "sharing well um given that most of jvm is is is rapidly changing memory most of",
    "start": "2075960",
    "end": "2081320"
  },
  {
    "text": "it's not immutable um really that's that doesn't help a whole lot",
    "start": "2081320",
    "end": "2087960"
  },
  {
    "text": "so just to uh well we've talked about what memory over commitment is already so I'm going to skip past this page what",
    "start": "2087960",
    "end": "2093760"
  },
  {
    "text": "I'm actually going to do now is um just kick off this demo um just to kind of break the",
    "start": "2093760",
    "end": "2100160"
  },
  {
    "text": "presentation up a little bit because it'll take a little while to run and we'll come back to it afterwards uh and",
    "start": "2100160",
    "end": "2105720"
  },
  {
    "text": "hopefully um it will all make",
    "start": "2105720",
    "end": "2109960"
  },
  {
    "text": "sense now the last time I gave this demo was uh at Spring one and uh infoq were",
    "start": "2111119",
    "end": "2117119"
  },
  {
    "text": "filming it and it went so wrong and it was so embarrassing and I didn't swear I",
    "start": "2117119",
    "end": "2123200"
  },
  {
    "text": "did very well didn't not to swear um but they posted it on infoq and it's pretty",
    "start": "2123200",
    "end": "2128440"
  },
  {
    "text": "embarrassing so uh what I'm going to do is I'm",
    "start": "2128440",
    "end": "2133920"
  },
  {
    "text": "actually going to uh log into some VMS that I've got running here now there's quite a few of them this is why this is",
    "start": "2133920",
    "end": "2140200"
  },
  {
    "text": "a fragile demo if this thing shifts up slightly it means it's still running there we go so what I've got is I've got",
    "start": "2140200",
    "end": "2146160"
  },
  {
    "text": "um 12 VMS in total running here all running Linux and if I log into",
    "start": "2146160",
    "end": "2153240"
  },
  {
    "text": "here I have a Windows machine uh that I'm monitoring them all on uh I can also",
    "start": "2153240",
    "end": "2159440"
  },
  {
    "text": "start uh JC console so that I can monitor all of the Tomcat servers that are running in these virtual",
    "start": "2159440",
    "end": "2165880"
  },
  {
    "text": "machines here we go now for those of you at the back I am going to zoom zoom into",
    "start": "2165880",
    "end": "2171560"
  },
  {
    "text": "pertinent information because I I I understand it's going to be a little bit small so",
    "start": "2171560",
    "end": "2177040"
  },
  {
    "text": "um so I'm just going to start JC console on these uh this Tomcat servers running",
    "start": "2177040",
    "end": "2182079"
  },
  {
    "text": "in all these VMS and what I'm now going to do is talk about what is actually in",
    "start": "2182079",
    "end": "2189359"
  },
  {
    "text": "these vmss right so each VM uh is 1.4 gig and is",
    "start": "2189359",
    "end": "2196079"
  },
  {
    "text": "running a jvm with a 1 Gigabyte heat now the jvm is running tomcat and in Tomcat",
    "start": "2196079",
    "end": "2201280"
  },
  {
    "text": "is um a JMS message server micro Benchmark that we have for exactly this",
    "start": "2201280",
    "end": "2207359"
  },
  {
    "text": "kind of testing and the reason we have this JMS test is because a message CU is actually a really great way of U",
    "start": "2207359",
    "end": "2214079"
  },
  {
    "text": "managing how much live data you have you know the size of your message Q basically is the amount of Life data you'll have at any one time you have the",
    "start": "2214079",
    "end": "2220760"
  },
  {
    "text": "sender sending messages to the queue you have the receiver receiving messages from the queue uh you can control the",
    "start": "2220760",
    "end": "2225880"
  },
  {
    "text": "throughput you can control all sorts of memory profiles to get sort of uh effects that you want so that's what",
    "start": "2225880",
    "end": "2232319"
  },
  {
    "text": "we're running uh in these Tomcat servers what I'm going to do is I'm",
    "start": "2232319",
    "end": "2238040"
  },
  {
    "text": "going to run um a whole bunch of these tests these first ones here um you see",
    "start": "2238040",
    "end": "2244920"
  },
  {
    "text": "the first one here is just your standard 1 GB Heap uh with no overcommit that's",
    "start": "2244920",
    "end": "2250040"
  },
  {
    "text": "our Baseline the second one we've got a partially committed Heap uh and we've overcommitted that to 40% so our 1.4 gab",
    "start": "2250040",
    "end": "2258240"
  },
  {
    "text": "VM is going to be forced to run in 1 gab of memory so that's our partially committed uh run here we have the same",
    "start": "2258240",
    "end": "2265720"
  },
  {
    "text": "as the first one which is fully committed again overcommitted this time so Baseline plus",
    "start": "2265720",
    "end": "2271599"
  },
  {
    "text": "overcommit uh the next one we're running with large Pages the next one we're using uh concurrent Mark sweep garbage",
    "start": "2271599",
    "end": "2277520"
  },
  {
    "text": "collection algorithm and the final one we're actually going to use more live data okay so we're actually going to force the Heap to uh to to to to grow",
    "start": "2277520",
    "end": "2284760"
  },
  {
    "text": "more so these are our scenarios and I'm going to run them through we're going to have a look at what happens uh and uh",
    "start": "2284760",
    "end": "2291079"
  },
  {
    "text": "then sort of analyze the results at the end so what I need to do now is actually go into here and I have Tada fantastic",
    "start": "2291079",
    "end": "2299680"
  },
  {
    "text": "I'm so pleased that this is working great so this is the interface to my",
    "start": "2299680",
    "end": "2305040"
  },
  {
    "text": "little uh app now very simple right you can just say what is the size of the message how many",
    "start": "2305040",
    "end": "2311640"
  },
  {
    "text": "messages per second you want to send what is the delay on the receiver uh what is the total number of messages you",
    "start": "2311640",
    "end": "2317760"
  },
  {
    "text": "want to send and what is the size of the queue and using all of those things we can actually manipulate uh the memory in",
    "start": "2317760",
    "end": "2324400"
  },
  {
    "text": "a very very simple way to create various different scenarios and we use this very extensively in our in our testing of of",
    "start": "2324400",
    "end": "2330520"
  },
  {
    "text": "of the features that I do so what I'm going to do is I'm going to run this with a uh predetermined",
    "start": "2330520",
    "end": "2339200"
  },
  {
    "text": "uh set of uh values so I'm going to kick all these off and what's nice about this",
    "start": "2339200",
    "end": "2346079"
  },
  {
    "text": "is that it actually tells you in real time exactly uh what the garbage collection's doing um all sorts of",
    "start": "2346079",
    "end": "2353119"
  },
  {
    "text": "interesting information apologies for the uh I should have automated this really so",
    "start": "2353119",
    "end": "2359440"
  },
  {
    "text": "this last one you see the message CU is uh 8 80,000 whereas in the others uh the",
    "start": "2359440",
    "end": "2365119"
  },
  {
    "text": "message queue is 20,000 right and then it just go goes down here it tells us you know what garbage collections",
    "start": "2365119",
    "end": "2371119"
  },
  {
    "text": "happening all that kind of stuff so it's just a a really useful way to look at what's going on so what I'm going to do actually now is go to this uh second lot",
    "start": "2371119",
    "end": "2379440"
  },
  {
    "text": "of VMS now these VMS are exactly the same as the first six but they're",
    "start": "2379440",
    "end": "2385200"
  },
  {
    "text": "running the elastic memory technology that I've been developing over the last year and a half that I'm going to come on talk about in a second so we're going",
    "start": "2385200",
    "end": "2391800"
  },
  {
    "text": "to run the exact same thing with that and uh again if you'll bear with me",
    "start": "2391800",
    "end": "2398839"
  },
  {
    "text": "for uh two seconds for each",
    "start": "2398839",
    "end": "2405280"
  },
  {
    "text": "tab just kick all these off again exactly the same scenario different configurations and then we'll move on",
    "start": "2405280",
    "end": "2411640"
  },
  {
    "text": "and then we'll come back to it and we'll see exactly what's what's gone on what's",
    "start": "2411640",
    "end": "2417280"
  },
  {
    "text": "happened cool right excellent that's all running so let's go back to the",
    "start": "2418119",
    "end": "2423680"
  },
  {
    "text": "presentation and we will revisit this uh we will revisit this later",
    "start": "2423680",
    "end": "2429319"
  },
  {
    "text": "on there we go so overcommit",
    "start": "2429319",
    "end": "2435560"
  },
  {
    "text": "memory so what I'm doing there is a classic example of overcommit memory I have a VM that's 1.4 gabt and I'm",
    "start": "2435560",
    "end": "2442680"
  },
  {
    "text": "forcing it to run in a memory that is just one gigabyte um it's just a classic",
    "start": "2442680",
    "end": "2448359"
  },
  {
    "text": "uh case of overcommitment now of course there's costs as I've mentioned before to this",
    "start": "2448359",
    "end": "2454280"
  },
  {
    "text": "memory Reclamation right and the costs are of course relative to each other the transparent page sharing I talked about",
    "start": "2454280",
    "end": "2460319"
  },
  {
    "text": "uh is very very low cost and that's why it happens all the time ballooning actually when it when it works",
    "start": "2460319",
    "end": "2466000"
  },
  {
    "text": "effectively it was very efficient you know it can reclaim memory pretty quickly uh it's and a lot of companies",
    "start": "2466000",
    "end": "2472000"
  },
  {
    "text": "uh rely on ballooning actually um to to to to to to get efficient memory usage",
    "start": "2472000",
    "end": "2477079"
  },
  {
    "text": "out of their host a classic example of this and in fact I was talking to a company recently right they have the",
    "start": "2477079",
    "end": "2482359"
  },
  {
    "text": "vsphere admins that hand out VMS to developers and they say though developer how much memory do you want developer",
    "start": "2482359",
    "end": "2487880"
  },
  {
    "text": "says 8 gig right and then they run like a 2 gig process in there forever right",
    "start": "2487880",
    "end": "2492960"
  },
  {
    "text": "and the buffer cach just fills up and fills up and fills up and the Visa admins are able to overcommit that memory steal some of that buffer cash",
    "start": "2492960",
    "end": "2499119"
  },
  {
    "text": "back the developer never notices they have a warm and fuzzy feeling because they have their 8 gigabite VM but you",
    "start": "2499119",
    "end": "2504800"
  },
  {
    "text": "know you're not wasting all that memory on the host I mean That's a classic case where this kind of technology is",
    "start": "2504800",
    "end": "2510680"
  },
  {
    "text": "used um and we talked about swapping earlier on um it's just important as well to distinguish between the swapping",
    "start": "2510680",
    "end": "2517960"
  },
  {
    "text": "in the guest and swapping on the host I know we've already talked about this but it's worth making that distinction swapping within the guest is where the",
    "start": "2517960",
    "end": "2524640"
  },
  {
    "text": "guest operating system is under too much memory pressure and it Pages uh stuff out to dis swapping on the host uh is",
    "start": "2524640",
    "end": "2532079"
  },
  {
    "text": "where the host basically goes this guy is using too much memory it's violating the constraints that I've set for it I'm",
    "start": "2532079",
    "end": "2537920"
  },
  {
    "text": "now going to start swapping memory from it so the guest operating systems not aware of that um but it will happen",
    "start": "2537920",
    "end": "2543680"
  },
  {
    "text": "under the covers now this slide this possible workaround slide was what I presented uh",
    "start": "2543680",
    "end": "2550000"
  },
  {
    "text": "at a conference before I'd finished this elastic memory for Java feature but I think it's still really worth looking at",
    "start": "2550000",
    "end": "2555920"
  },
  {
    "text": "because it's the result of everything that we sort of understood from all of the work we did before we actually",
    "start": "2555920",
    "end": "2562640"
  },
  {
    "text": "developed the feature so possible workarounds to",
    "start": "2562640",
    "end": "2567960"
  },
  {
    "text": "allowing your allowing safe overcommitment to Java well as we've seen the biggest problem with overcommit",
    "start": "2567960",
    "end": "2574559"
  },
  {
    "text": "Java is the lazy memory management you know where it just uh creates a large footprint maybe full of garbage nothing",
    "start": "2574559",
    "end": "2582000"
  },
  {
    "text": "can then get access to that memory and actually I bet I wouldn't want to show off hands but I bet there are people",
    "start": "2582000",
    "end": "2587079"
  },
  {
    "text": "here who've worked at companies that just recycle jvms every night for this very reason you know they just or reboot VMS or whatever yeah some smiles and",
    "start": "2587079",
    "end": "2593480"
  },
  {
    "text": "some nods yeah it's like oh god um so tuning the Java Heap soite",
    "start": "2593480",
    "end": "2600680"
  },
  {
    "text": "collects garbage more proactively now that is one way that you can get around it as I mentioned earlier aour jvm does this out of the box it's very very",
    "start": "2600680",
    "end": "2607240"
  },
  {
    "text": "aggressive at shrinking its heat but that has a very different approach to memory management with um with the",
    "start": "2607240",
    "end": "2613520"
  },
  {
    "text": "hotspot jvm you can force it to do that by setting this Max Heap free ratio the",
    "start": "2613520",
    "end": "2618760"
  },
  {
    "text": "downside you have to that though is that you're incurring increased garbage collection cost all the time and",
    "start": "2618760",
    "end": "2624520"
  },
  {
    "text": "regardless of whether you're under memory pressure you're always paying that cost when potentially you don't necessarily need",
    "start": "2624520",
    "end": "2630839"
  },
  {
    "text": "to um using a much more um gentle in inverted commas gar collection mechanism",
    "start": "2630839",
    "end": "2638760"
  },
  {
    "text": "also uh makes a big difference now what do I mean by gentle well the concurrent",
    "start": "2638760",
    "end": "2643800"
  },
  {
    "text": "uh the concurrent collector in the hotspot jvm um does garbage collection all the time that's what concurrent",
    "start": "2643800",
    "end": "2650040"
  },
  {
    "text": "means right it just kind of it just s of does bits of garbage collection all the time now if the Heap is swapped out to",
    "start": "2650040",
    "end": "2656520"
  },
  {
    "text": "dis and it's trying to read bits of that swap memory in over time quite gradually",
    "start": "2656520",
    "end": "2661720"
  },
  {
    "text": "the impact on the jvm performance is not actually all that bad because we're not hitting these latency bottlenecks of",
    "start": "2661720",
    "end": "2667599"
  },
  {
    "text": "trying to stream masses of datrin off the dis but a classic concurrent sorry a classic Mark sweep compact algorithm",
    "start": "2667599",
    "end": "2675119"
  },
  {
    "text": "that's going to look at the Heap and just go just try and read every single object in it before deciding which ones to collect that's the one that's going",
    "start": "2675119",
    "end": "2681319"
  },
  {
    "text": "to cause the problems because reading in the entire heap if the Heap is swapped out immediately you hit those bottlenecks and the latencies and the",
    "start": "2681319",
    "end": "2687960"
  },
  {
    "text": "performance goes uh down the toilet so CMS and again I'm going to",
    "start": "2687960",
    "end": "2693559"
  },
  {
    "text": "show you this in the demo CMS performs a whole lot better if the Heap gets swapped out it may not be what you want",
    "start": "2693559",
    "end": "2699040"
  },
  {
    "text": "for your application but it's interesting to see the different behavior that it has um you can if you want to set",
    "start": "2699040",
    "end": "2706960"
  },
  {
    "text": "reservations on a VM and basically that says to the hypervisor don't ever try and reclaim any more memory than this",
    "start": "2706960",
    "end": "2714079"
  },
  {
    "text": "right so if you have a scenario where you know that you have uh a certain amount of buffer cach a certain amount",
    "start": "2714079",
    "end": "2719280"
  },
  {
    "text": "of memory that is safe to free then you can do that and that's one way to get around",
    "start": "2719280",
    "end": "2725119"
  },
  {
    "text": "it yeah that's a really good question so the question was when I'm talking about garbage collection am I talking about",
    "start": "2725119",
    "end": "2730400"
  },
  {
    "text": "the Young Generation garbage collection or the old generation so this is really interesting question because um I mean",
    "start": "2730400",
    "end": "2736760"
  },
  {
    "text": "not all garbage collectors are generational but the majority of the ones we're dealing with here certainly in hotspot all of them well until G1",
    "start": "2736760",
    "end": "2742839"
  },
  {
    "text": "came along recently they are right the Young Generation to the hypervisor just looks like a very hot area of memory",
    "start": "2742839",
    "end": "2749839"
  },
  {
    "text": "right memory's been copyed copy cop it copy cop it it's it's just a very very uh you know it's it's it's a very",
    "start": "2749839",
    "end": "2755520"
  },
  {
    "text": "consistent area of memory the old generation has a very very different profile right with a classic",
    "start": "2755520",
    "end": "2761720"
  },
  {
    "text": "uh Mark sweep compact algorithm the old generation part of the Heap um you know you'll have memory being read maybe",
    "start": "2761720",
    "end": "2768000"
  },
  {
    "text": "there's a cash that's stored in there maybe there's a whole bunch of garbage in there but you know there's not a lot of memory that's going to be read and",
    "start": "2768000",
    "end": "2774280"
  },
  {
    "text": "written to in that old generation part of the Heap it's going to be much much less active than the Young Generation part what's interesting about that is",
    "start": "2774280",
    "end": "2781160"
  },
  {
    "text": "when the hypervisor is looking at that VM and estimating how much memory is active in that VM right it's it's it's",
    "start": "2781160",
    "end": "2787079"
  },
  {
    "text": "quite hard for it to do because as soon as there an old generation garbage collection the the jvm suddenly reads",
    "start": "2787079",
    "end": "2793920"
  },
  {
    "text": "everything in from from you know from from memory every single object walks all the objects figuring out which ones",
    "start": "2793920",
    "end": "2799520"
  },
  {
    "text": "to Mark and which ones to collect it looks like a huge memory Spike to the hypervisor because all of a sudden all this memory has been read immediately",
    "start": "2799520",
    "end": "2806160"
  },
  {
    "text": "and so what it looks like to the hypervisor is oh my goodness this application's just suddenly just grown its memory by 2x 3x or whatever it is",
    "start": "2806160",
    "end": "2813160"
  },
  {
    "text": "and actually it's not that at all it's just a housekeeping operation right but it it that kind of messes with some of",
    "start": "2813160",
    "end": "2818559"
  },
  {
    "text": "these estimations as to how much memory is appropriate to claim as well right and this this is this is part of the problem we have with Java 2 is that the",
    "start": "2818559",
    "end": "2825599"
  },
  {
    "text": "slightly eccentric way in which it manages memory leads kind of fools the hypervisor to a certain extent in",
    "start": "2825599",
    "end": "2831240"
  },
  {
    "text": "figuring out how much memory actually is really active at any one time so to answer your question specifically the",
    "start": "2831240",
    "end": "2837000"
  },
  {
    "text": "problems occur with the old generation garbage collection because the the the operating system will never really page",
    "start": "2837000",
    "end": "2842280"
  },
  {
    "text": "out the Young Generation part of the Heap it's just way way too active so that just to clarify that's actually a",
    "start": "2842280",
    "end": "2847599"
  },
  {
    "text": "really really important clarification um so I was just talking",
    "start": "2847599",
    "end": "2853280"
  },
  {
    "text": "finally there about reservations the um the problem you have the reservations is it's a static",
    "start": "2853280",
    "end": "2858960"
  },
  {
    "text": "setting that will eventually probably end up screwing you right because you'll set a reservation for a situation that",
    "start": "2858960",
    "end": "2865960"
  },
  {
    "text": "you've got and then someone changes a heap size and who's going to remember to change that reservation you know it's",
    "start": "2865960",
    "end": "2871760"
  },
  {
    "text": "it's it's one of those classic cases where when you have when you apply static constraints to something that may",
    "start": "2871760",
    "end": "2877000"
  },
  {
    "text": "a dynamic uh you can end up causing yourself potential problems",
    "start": "2877000",
    "end": "2882680"
  },
  {
    "text": "so uh so I want to get on to talking a little bit about elastic memory for Java because um you know it's it's it's not",
    "start": "2882680",
    "end": "2889280"
  },
  {
    "text": "that I'm here to do a big marketing thing because quite honestly you know I don't care if you buy it but it's just interesting because it's what what I've",
    "start": "2889280",
    "end": "2895359"
  },
  {
    "text": "been working on for the last year and it solves this very specific problem so elastic memory for Java is a",
    "start": "2895359",
    "end": "2901800"
  },
  {
    "text": "ballooning technology that balloons directly out of the jvm Heap right so we're actually a able to uh Target the",
    "start": "2901800",
    "end": "2909040"
  },
  {
    "text": "memory Reclamation in a VM that's predominantly running Java and put memory pressure where it actually needs",
    "start": "2909040",
    "end": "2915240"
  },
  {
    "text": "to be which is in the jvm heat so when the balloon inflates it causes a garbage",
    "start": "2915240",
    "end": "2921319"
  },
  {
    "text": "collection or potentially causes a garbage collection that will cause the jvm to give memory back uh to the",
    "start": "2921319",
    "end": "2927559"
  },
  {
    "text": "hypervisor and now one of the design criteria we had with the MJ is that it shouldn't be uh a custom GC policy it",
    "start": "2927559",
    "end": "2934559"
  },
  {
    "text": "shouldn't be a custom jvm it's just a j MTI agent that plugs into hotspot and",
    "start": "2934559",
    "end": "2939599"
  },
  {
    "text": "just works with whatever garbage collection policy you have whatever heat configuration you have it has heuristics",
    "start": "2939599",
    "end": "2945079"
  },
  {
    "text": "that figures out what's going to be the appropriate uh balloon uh for that particular Heap so it just plugs into",
    "start": "2945079",
    "end": "2951880"
  },
  {
    "text": "what you have and just does the right thing so how does it work well remember",
    "start": "2951880",
    "end": "2958240"
  },
  {
    "text": "our previous scenarios we had um The partially committed Heap left in this",
    "start": "2958240",
    "end": "2963799"
  },
  {
    "text": "state uh remember that was fine we ballooned fine with that before but if we use em forj let's see what happens",
    "start": "2963799",
    "end": "2971119"
  },
  {
    "text": "now with em forj the existing balloon is disabled right we we we haven't designed it to work with the other balloon",
    "start": "2971119",
    "end": "2978160"
  },
  {
    "text": "because coordinating multiple ballooning Technologies was beyond the scope of what we wanted to do",
    "start": "2978160",
    "end": "2983799"
  },
  {
    "text": "so what emoj will do is if it wants to try and uh reclaim memory from the Heap",
    "start": "2983799",
    "end": "2990079"
  },
  {
    "text": "it will write some data into the Heap that uh is just zeros right it's just",
    "start": "2990079",
    "end": "2995559"
  },
  {
    "text": "zeroed memory and then the operating system will look at that zeroed memory and it's fine it just writes it into",
    "start": "2995559",
    "end": "3001720"
  },
  {
    "text": "into into into its physical memory but in the hypervisor as soon as we've done that we actually have a way of saying to",
    "start": "3001720",
    "end": "3008000"
  },
  {
    "text": "the hypervisor here's a block of zeroed memory share this as fast as you can right and it can share that memory at",
    "start": "3008000",
    "end": "3014559"
  },
  {
    "text": "500 megabytes per second so effectively what that does is it very quickly um uh",
    "start": "3014559",
    "end": "3020839"
  },
  {
    "text": "reduces the amount of uh memory on the hypervisor we'll do this again right let's the next one we're going to write",
    "start": "3020839",
    "end": "3026359"
  },
  {
    "text": "is going to overwrite this blue memory and the hypervisor is going to do",
    "start": "3026359",
    "end": "3031760"
  },
  {
    "text": "the memory sharing so it's all pointing just to one single page on the hypervisor which then has freed up that memory again we'll do the same thing and",
    "start": "3031760",
    "end": "3039079"
  },
  {
    "text": "it's freed up memory so really what it's doing is it's using a combination of the ballooning idea with some very",
    "start": "3039079",
    "end": "3045640"
  },
  {
    "text": "aggressive page sharing just to free up memory on the hypervisor now why didn't we pin memory",
    "start": "3045640",
    "end": "3051359"
  },
  {
    "text": "in the Heap by the way we didn't pin memory in the Heap so we don't pin memory in the Heap because that would be",
    "start": "3051359",
    "end": "3056480"
  },
  {
    "text": "very very bad idea because pinning memory in a jvm heap can cause horrible fragmentation problems and it's uh it's",
    "start": "3056480",
    "end": "3062720"
  },
  {
    "text": "not something you want to do so the nice thing about this is it's actually completely tolerant of compactions so if",
    "start": "3062720",
    "end": "3068799"
  },
  {
    "text": "there's a garbage collection uh we'll see in this one actually if there's a garbage collection and the balloon data",
    "start": "3068799",
    "end": "3074319"
  },
  {
    "text": "gets shifted around uh it's it's it's actually that's not going to have any detrimental",
    "start": "3074319",
    "end": "3079839"
  },
  {
    "text": "effect so let's imagine that in this scenario we looked at before where we had problems right with the fully",
    "start": "3079839",
    "end": "3086119"
  },
  {
    "text": "committed he let's inflate the balloon in that scenario so we inflate the balloon we add some more uh add some",
    "start": "3086119",
    "end": "3093760"
  },
  {
    "text": "more and EV let's say there's a garbage collection right so we' collected some garbage it's now going to compact the",
    "start": "3093760",
    "end": "3099440"
  },
  {
    "text": "balloon down but that's fine you know that that is we're completely tolerant of that and the net effect on the",
    "start": "3099440",
    "end": "3105680"
  },
  {
    "text": "hypervisor is exactly the same as with with regular ballooning now when the jvm shuts down that zeroed memory is still",
    "start": "3105680",
    "end": "3112280"
  },
  {
    "text": "written into the operating system so the balloon doesn't necessarily immediately go away right it will go away once we've",
    "start": "3112280",
    "end": "3118160"
  },
  {
    "text": "written over that memory but that's that's the technique that we've come up with to actually get the jvm to do the",
    "start": "3118160",
    "end": "3123520"
  },
  {
    "text": "right thing so what do we mean then by elastic well let's have a look at a",
    "start": "3123520",
    "end": "3130440"
  },
  {
    "text": "scenario where we have uh two jvms running in in let's say two different VMS on the hypervisor let's say we put a",
    "start": "3130440",
    "end": "3137359"
  },
  {
    "text": "load on one and so we put a whole bunch of uh of uh stuff in the Heap and let's say we put a load on the",
    "start": "3137359",
    "end": "3145400"
  },
  {
    "text": "second one now the hypervisor now is actually getting a little bit low on memory so it's like okay I need to",
    "start": "3145400",
    "end": "3150640"
  },
  {
    "text": "reclaim some memory now it's going to try and reclaim it from this guy because this guy is now the least active",
    "start": "3150640",
    "end": "3156400"
  },
  {
    "text": "remember we talked about the active memory estimation so it will balloon in the jvm heat so what happens is we",
    "start": "3156400",
    "end": "3162720"
  },
  {
    "text": "inflate the balloon in other words we actually allocate some objects in the Heap that are just zeroed we get the",
    "start": "3162720",
    "end": "3168160"
  },
  {
    "text": "hypervisor to very rapidly page share that memory and what's going to happen now is the next allocation is going to",
    "start": "3168160",
    "end": "3173200"
  },
  {
    "text": "force a garbage collection which it does and then we're going to balloon more in that Heap eventually we've actually",
    "start": "3173200",
    "end": "3178559"
  },
  {
    "text": "filled the entire heat with the balloon here which is not normally what you would necessarily do but the effect is",
    "start": "3178559",
    "end": "3184319"
  },
  {
    "text": "that it's handed all that memory back so now this guy is under load this guy is",
    "start": "3184319",
    "end": "3189599"
  },
  {
    "text": "actually now able to use all this memory if the load switches back what's",
    "start": "3189599",
    "end": "3195319"
  },
  {
    "text": "going to happen well the jvm should be perfectly able to write memory into the heat without us getting in the way right",
    "start": "3195319",
    "end": "3201040"
  },
  {
    "text": "we shouldn't ever create an out of memory issue so it's going to try to write some memory does a garbage",
    "start": "3201040",
    "end": "3206839"
  },
  {
    "text": "collection which kicks the balloon out and then writes some memory in there and as it it writes some memory well the",
    "start": "3206839",
    "end": "3213200"
  },
  {
    "text": "hypervisor is getting low on memory again so it's going to balloon in this guy so the net effect of this is that",
    "start": "3213200",
    "end": "3219160"
  },
  {
    "text": "memory gets transferred between VMS in exactly the same way as it does with regular ballooning the main difference",
    "start": "3219160",
    "end": "3225720"
  },
  {
    "text": "is that we've man managed to find a way of targeting the ballooning at the right level in this this whole equation okay",
    "start": "3225720",
    "end": "3233079"
  },
  {
    "text": "so before we look at this uh let's just have a a look and see how how our demo is going along can someone just tell me",
    "start": "3233079",
    "end": "3239480"
  },
  {
    "text": "the time how we how are we doing for time 7:25 7:25 actually that's that's",
    "start": "3239480",
    "end": "3244640"
  },
  {
    "text": "pretty good okay",
    "start": "3244640",
    "end": "3250920"
  },
  {
    "text": "so I prefer to test software in front of people in a demo because if you're going to find any",
    "start": "3250920",
    "end": "3256839"
  },
  {
    "text": "bugs this is where you'll find them all right well that's fine J",
    "start": "3256839",
    "end": "3263240"
  },
  {
    "text": "console's giving me a little problem but that's fine right let's and have a look at the the scenarios now let's just",
    "start": "3263240",
    "end": "3268280"
  },
  {
    "text": "remind oursel of uh what these scenarios are in fact what I'm going to do is just shift that up there just so we can we",
    "start": "3268280",
    "end": "3275480"
  },
  {
    "text": "see it so the Baseline let's look at the Baseline first what is the Baseline the Baseline performance uh this is with a",
    "start": "3275480",
    "end": "3283680"
  },
  {
    "text": "uh fully committed Heap is that we've got one full GC 91 minor gc's the whole",
    "start": "3283680",
    "end": "3290720"
  },
  {
    "text": "of the GC time has been basically three and a half seconds right that that's that's the Baseline run of what we'd",
    "start": "3290720",
    "end": "3297440"
  },
  {
    "text": "expect to see bearing in mind this is a one gigabyte Heap so what's the next thing we're going to look at well the",
    "start": "3297440",
    "end": "3302880"
  },
  {
    "text": "next thing we're going to look at is a partially committed Heap with overcommit right so partially committed Heap with",
    "start": "3302880",
    "end": "3308880"
  },
  {
    "text": "overcommit which is the scenario we played out earlier let's have a look that's not bad now we've seen many more",
    "start": "3308880",
    "end": "3314599"
  },
  {
    "text": "gc's full gc's which you would expect because the Heap has grown and grown and grown and grown like I showed you in the",
    "start": "3314599",
    "end": "3320280"
  },
  {
    "text": "presentation right um and naturally this one has over commit on yes this has overcommit on right so scenario that",
    "start": "3320280",
    "end": "3327200"
  },
  {
    "text": "this is number two with overcommit on and uh a partially committed Heap so what this is demonstrating is that even",
    "start": "3327200",
    "end": "3333480"
  },
  {
    "text": "though we overcommitted this VM it's actually performed pretty well and the reason it performed pretty well is",
    "start": "3333480",
    "end": "3338599"
  },
  {
    "text": "because the Heap didn't actually grow to any like huge size and didn't actually",
    "start": "3338599",
    "end": "3343839"
  },
  {
    "text": "then start conflicting with any ballooning right because we use a partially committed Heap so all these gc's kept the Heap size down and okay we",
    "start": "3343839",
    "end": "3351079"
  },
  {
    "text": "spent six seconds total in GC time but that's not you know that's not that's not bad",
    "start": "3351079",
    "end": "3356760"
  },
  {
    "text": "so number three which is our Baseline which is the fully committed Heap with",
    "start": "3356760",
    "end": "3363280"
  },
  {
    "text": "overcommit let's have a look at what happened there okay 53 seconds of garbage collection okay one garbage",
    "start": "3363280",
    "end": "3370960"
  },
  {
    "text": "collection took 41 seconds now that's obviously a really big problem right because a single",
    "start": "3370960",
    "end": "3377160"
  },
  {
    "text": "garbage collection that takes 40 seconds is a time during which your uh your your uh server is completely unavailable well",
    "start": "3377160",
    "end": "3383920"
  },
  {
    "text": "at least again with with with the hotspot uh garbage collection uh stop the world that we're talking about",
    "start": "3383920",
    "end": "3390240"
  },
  {
    "text": "that's a that's a serious problem and with a one gigabyte Heap that's that's a long garbage collection right now um",
    "start": "3390240",
    "end": "3397280"
  },
  {
    "text": "what's interesting is if we actually go and look at the vmstat output of of these right here",
    "start": "3397280",
    "end": "3406440"
  },
  {
    "text": "21 so yeah okay so actually this is the one I want to look at is this one here",
    "start": "3406440",
    "end": "3411640"
  },
  {
    "text": "now look at this right this is all the swapping that went on right so everything everything was fine",
    "start": "3411640",
    "end": "3417079"
  },
  {
    "text": "everything was fine everything's fine suddenly it was like paging nightmare right and and what happened if I don't",
    "start": "3417079",
    "end": "3423440"
  },
  {
    "text": "know I mean some of you may not be familiar with looking at this format but basically what happened here is a balloon inflated paged massive amounts",
    "start": "3423440",
    "end": "3429640"
  },
  {
    "text": "of the Heap to disc and and the garbage collection um exacerbated that and that's why it turned into a mess with",
    "start": "3429640",
    "end": "3436720"
  },
  {
    "text": "number two again this is actually quite interesting right with number two you can see we still got uh",
    "start": "3436720",
    "end": "3442760"
  },
  {
    "text": "835 megabytes free so that that actually hardly used they Ed very little memory",
    "start": "3442760",
    "end": "3448319"
  },
  {
    "text": "at all um number one the fully committed Heap you see we only have 52 megabytes free so the fully committed heaps left a",
    "start": "3448319",
    "end": "3454960"
  },
  {
    "text": "much much larger footprint even though it's exactly the same scenario right so this is just illustrating everything we",
    "start": "3454960",
    "end": "3460799"
  },
  {
    "text": "were talking about earlier so let's look at number uh four which is the large",
    "start": "3460799",
    "end": "3465880"
  },
  {
    "text": "pages right so this is exactly the same as what we just looked at except we're using large pages instead of small Pages",
    "start": "3465880",
    "end": "3472640"
  },
  {
    "text": "now if we look at the VM stat output you'll see there's no swap there at all right absolutely no swapping and that's",
    "start": "3472640",
    "end": "3478640"
  },
  {
    "text": "what I would expect to see because we can't swap out large Pages we've got almost no me free",
    "start": "3478640",
    "end": "3484559"
  },
  {
    "text": "memory but the hypervisor basically couldn't balloon and so what we will see",
    "start": "3484559",
    "end": "3490799"
  },
  {
    "text": "if we actually go and look at this um Vere client here and go and look at this this",
    "start": "3490799",
    "end": "3496520"
  },
  {
    "text": "VM uh what is it 23 yeah it's 23 yeah actually it's not actually that",
    "start": "3496520",
    "end": "3502400"
  },
  {
    "text": "easy to see because it's in yellow but there is can I can you actually see that yeah you can that that yellow spike is",
    "start": "3502400",
    "end": "3509319"
  },
  {
    "text": "is swapping right that's memory being swapped out and so it's going to have a look at what the uh performance was of",
    "start": "3509319",
    "end": "3516119"
  },
  {
    "text": "that sorry I need to find where where I was got too many windows here",
    "start": "3516119",
    "end": "3521720"
  },
  {
    "text": "um performance of that 191 seconds right so we had one garbage",
    "start": "3521720",
    "end": "3527440"
  },
  {
    "text": "collection that took 150 seconds that's pretty much three minute garbage collection which is even worse than with",
    "start": "3527440",
    "end": "3532680"
  },
  {
    "text": "the small pages right this is why we say don't overcommit memory with Java right",
    "start": "3532680",
    "end": "3539559"
  },
  {
    "text": "because because again it's it's you know it's it's a it's it's these incompatible",
    "start": "3539559",
    "end": "3544880"
  },
  {
    "text": "models so uh let's look at how uh concurrent Mark site performed with this",
    "start": "3544880",
    "end": "3549960"
  },
  {
    "text": "exact same scenario right so we have um same overcommit same Heap",
    "start": "3549960",
    "end": "3555839"
  },
  {
    "text": "configuration and what we now we can't directly compare garbage collection times of this because because jmx",
    "start": "3555839",
    "end": "3562319"
  },
  {
    "text": "doesn't report full garbage collections in quite the same way but what we can look at if we can look at how long the",
    "start": "3562319",
    "end": "3568119"
  },
  {
    "text": "thing took to complete uh which it should show us uh where does it show us",
    "start": "3568119",
    "end": "3574000"
  },
  {
    "text": "that it shows us that uh 6 minutes 35 seconds right it took 6 minutes 30 so",
    "start": "3574000",
    "end": "3579559"
  },
  {
    "text": "that's an effective measurement of our throughput so that took 6 minutes 35",
    "start": "3579559",
    "end": "3584920"
  },
  {
    "text": "this one here took 10 minutes 24 right that's our bad case that took 10 minutes 24 our best case took 6 minutes 33 so",
    "start": "3584920",
    "end": "3595280"
  },
  {
    "text": "actually the through but it's pretty reasonable with with CMS and if we go and look at the vmstat output of",
    "start": "3595280",
    "end": "3602200"
  },
  {
    "text": "this this should bear it out that's interesting why is that",
    "start": "3602200",
    "end": "3608680"
  },
  {
    "text": "not H okay that's interesting I would have expected to see some some swapping on",
    "start": "3608680",
    "end": "3616160"
  },
  {
    "text": "that one I don't think that's misconfigured okay well let's not worry too much about that",
    "start": "3616160",
    "end": "3622079"
  },
  {
    "text": "um so then on 25 uh what I did is I increased the buffer size four times the",
    "start": "3622079",
    "end": "3627520"
  },
  {
    "text": "buffer size we have much more live memory but I had the scenario where we have the partially committed Heap so",
    "start": "3627520",
    "end": "3633960"
  },
  {
    "text": "remember with the part number two partially committed Heap overcommitted it worked fine but it's because we had",
    "start": "3633960",
    "end": "3639520"
  },
  {
    "text": "quite a low amount of live memory but if we increase the amount of Life memory in that scenario and go and look at this",
    "start": "3639520",
    "end": "3646359"
  },
  {
    "text": "guy here you see we've now got like 27 seconds of GC time I it's not awful but",
    "start": "3646359",
    "end": "3653480"
  },
  {
    "text": "again it's it's it's starting to degrade pretty badly right so um and again what",
    "start": "3653480",
    "end": "3659480"
  },
  {
    "text": "that happened again let's look at this uh here yeah I mean that that happened because of this right it's not as severe",
    "start": "3659480",
    "end": "3666079"
  },
  {
    "text": "as the swapping we saw previously but it's still there so",
    "start": "3666079",
    "end": "3673880"
  },
  {
    "text": "now now uh let's switch the exact same scenarios with uh the Java ballooning",
    "start": "3676280",
    "end": "3682280"
  },
  {
    "text": "and see see what we have um hopefully it's all still running I realized when I",
    "start": "3682280",
    "end": "3688960"
  },
  {
    "text": "left the office that this is actually a uh an in it's not a shipped version it's actually a development version I'm",
    "start": "3688960",
    "end": "3694880"
  },
  {
    "text": "developing at the moment so hopefully it should all be good um okay that's the last one okay so",
    "start": "3694880",
    "end": "3700680"
  },
  {
    "text": "let's have a look at this first one so this is our Baseline again the Baseline okay well this is it's it's it's two",
    "start": "3700680",
    "end": "3707640"
  },
  {
    "text": "seconds again it's neither here nor there this is this is without any overc commitment that's that's that's our our",
    "start": "3707640",
    "end": "3713039"
  },
  {
    "text": "good performance you know but two 3 4 seconds it's all pretty much the same now this is the um fully committed",
    "start": "3713039",
    "end": "3721200"
  },
  {
    "text": "Heap is that the fully committed Heap no that's the partially committed Heap I'm sorry um thank you for for reminding me",
    "start": "3721200",
    "end": "3727920"
  },
  {
    "text": "of that uh switch between there The partially committed Heap you see we've got 10 garbage collections um the GC",
    "start": "3727920",
    "end": "3733960"
  },
  {
    "text": "time's pretty low everything's pretty happy everything's good the fully committed heat was where we had big",
    "start": "3733960",
    "end": "3739079"
  },
  {
    "text": "problems the last time round with the small pages so fully committed here you see we have two more garbage collections",
    "start": "3739079",
    "end": "3745200"
  },
  {
    "text": "than we would expect because the ballooning has been pushing the garbage collector a little bit but the total GC time is actually still pretty reasonable",
    "start": "3745200",
    "end": "3750799"
  },
  {
    "text": "it's still only 7 Seconds right whereas before it was 59 seconds now the large page example now",
    "start": "3750799",
    "end": "3757880"
  },
  {
    "text": "Ean forj works with large Pages just as well as it works with small Pages again here we've got 5 Seconds right before it",
    "start": "3757880",
    "end": "3765520"
  },
  {
    "text": "was like 190 seconds uh you know when we were swapping uh on this one this is going to",
    "start": "3765520",
    "end": "3773279"
  },
  {
    "text": "be the concurrent Mark sweep algorithm um again we can really only look at the time it took 6:35 it's a reasonable",
    "start": "3773279",
    "end": "3779279"
  },
  {
    "text": "amount of time um and then finally this this larger amount of memory now this is",
    "start": "3779279",
    "end": "3784799"
  },
  {
    "text": "an interesting one now here the garbage collection time has gone up uh fairly significantly it's it's less than we got",
    "start": "3784799",
    "end": "3792880"
  },
  {
    "text": "with the other scenario before we got 27 seconds with this it's 18 seconds the reason for this though is we forced this",
    "start": "3792880",
    "end": "3798799"
  },
  {
    "text": "VM into a situation where the balloon and the live data are fighting with each other right and so the garbage",
    "start": "3798799",
    "end": "3803920"
  },
  {
    "text": "collection time has gone up fairly to not the garbage collection frequency has gone up fairly considerably because",
    "start": "3803920",
    "end": "3809559"
  },
  {
    "text": "these two things are fighting now in this scenario we force that VM to be",
    "start": "3809559",
    "end": "3814760"
  },
  {
    "text": "constantly overcommitted and and and make those two things fight in in in a real world scenario as soon as the live",
    "start": "3814760",
    "end": "3822039"
  },
  {
    "text": "data starts to to to get big the hypervisor brings the balloon Target down the balloon deflates and the two",
    "start": "3822039",
    "end": "3827960"
  },
  {
    "text": "don't end up fighting in this way right but this at least shows what happens when you set the two against each other",
    "start": "3827960",
    "end": "3833039"
  },
  {
    "text": "and they have to fight for the same space so if we actually go and look um in in uh the vsphere console I mean I",
    "start": "3833039",
    "end": "3842039"
  },
  {
    "text": "don't know there's not really a lot to see here except that you know all these VMS behaved as you would expect them to the one thing that I will show you here",
    "start": "3842039",
    "end": "3849160"
  },
  {
    "text": "um is the VM stat output for all those em for jvms um as you would expect there",
    "start": "3849160",
    "end": "3854319"
  },
  {
    "text": "is no uh that's the Baseline well that yeah that's there no no significant",
    "start": "3854319",
    "end": "3859480"
  },
  {
    "text": "paging in that one um again no I mean this is what we would expect right we're not there's there's no there's no reason",
    "start": "3859480",
    "end": "3865720"
  },
  {
    "text": "reason there should be any paging that's why we got you know much better performance anyway that's that's it it",
    "start": "3865720",
    "end": "3872119"
  },
  {
    "text": "worked I'm really pleased with that um so thank you",
    "start": "3872119",
    "end": "3878359"
  },
  {
    "text": "um I don't um it's it's an ambitious demo I",
    "start": "3878359",
    "end": "3883839"
  },
  {
    "text": "have to say because I tell you I'm on a VPN to do all of this and if the VPN goes the whole thing is screwed and that's what happened the last time round",
    "start": "3883839",
    "end": "3890599"
  },
  {
    "text": "um so so what I'm hoping this illustrates yeah hi question",
    "start": "3890599",
    "end": "3897640"
  },
  {
    "text": "so it's a good question um so we put out a 1.0 of the elastic memory for Java uh",
    "start": "3899000",
    "end": "3905200"
  },
  {
    "text": "last September uh as part of the V fabric product uh it's embedded in uh the TC server which is Tomcat um we're",
    "start": "3905200",
    "end": "3912520"
  },
  {
    "text": "going to be increasing support for uh other uh application servers as we go forwards um there's no reason why you",
    "start": "3912520",
    "end": "3920000"
  },
  {
    "text": "couldn't just run it with any application server except we want to make sure the logging integrates nicely that the native libraries and the right",
    "start": "3920000",
    "end": "3926720"
  },
  {
    "text": "path and all that kind of stuff um but yeah it shipped last September so this is this is currently available in V",
    "start": "3926720",
    "end": "3932480"
  },
  {
    "text": "fabric so I mean when people ask me about um like what this might be",
    "start": "3932480",
    "end": "3937760"
  },
  {
    "text": "suitable for it's not suitable for every scenario right in scenarios where a jvm is only a small percentage of the memory",
    "start": "3937760",
    "end": "3944119"
  },
  {
    "text": "in a VM this isn't going to work for you because you can only balloon out of the jvm Heap and if the jvm Heap is really",
    "start": "3944119",
    "end": "3949279"
  },
  {
    "text": "small you're going to be very limited right but in cases where the jvm is consuming most of the memory in the VM",
    "start": "3949279",
    "end": "3955400"
  },
  {
    "text": "or or you've got a lot of jvms because this will work with more than one jvm right if you got a lot of jvms or one",
    "start": "3955400",
    "end": "3961200"
  },
  {
    "text": "big jvm that's using up all the memory in your VM and you've got varying workloads uh on on on your host an",
    "start": "3961200",
    "end": "3968559"
  },
  {
    "text": "example of course is you know different geographies different spikes you might have a batch thing that runs for a particular time the nice thing about",
    "start": "3968559",
    "end": "3975680"
  },
  {
    "text": "this thing is that the garbage collection happens at the most appropriate time which is when the jvms",
    "start": "3975680",
    "end": "3982960"
  },
  {
    "text": "are idle right when the jvms are idle the balloons in plate it forces garbage collection they clean up they hand",
    "start": "3982960",
    "end": "3988319"
  },
  {
    "text": "memory back okay so that's uh that's kind of my product plug as it were um so",
    "start": "3988319",
    "end": "3996720"
  },
  {
    "text": "let's get back to the presentation yeah so this actually a really good question if the jvm balloon",
    "start": "3996720",
    "end": "4002520"
  },
  {
    "text": "gets evicted does it get a chance to come back is the question and the answer is yes it does um what we've had to do",
    "start": "4002520",
    "end": "4010359"
  },
  {
    "text": "uh in developing this is we have to basically say that the hypervisor is God right if the hypervisor says to the jvm",
    "start": "4010359",
    "end": "4017079"
  },
  {
    "text": "balloon I need 500 megabytes you know we need to try and get 500 megabytes out of that Heap as as as reasonably quickly as",
    "start": "4017079",
    "end": "4024039"
  },
  {
    "text": "we can and give that back to the hypervisor now inevitably there's a cost to actually inflating the balloon",
    "start": "4024039",
    "end": "4029559"
  },
  {
    "text": "because the balloon we what we it's very actually very very trivial right we just allocate large bite arrays and they make",
    "start": "4029559",
    "end": "4035200"
  },
  {
    "text": "their way through the Heap and we zero them and we hand the memory back now we've done an awful lot of tuning work",
    "start": "4035200",
    "end": "4040599"
  },
  {
    "text": "to make sure that we use the right kind of references um you know to make sure they don't get in the way so you know we",
    "start": "4040599",
    "end": "4047200"
  },
  {
    "text": "we manage how hard the balloon is by managing a percentage of weak references and soft references and hard references",
    "start": "4047200",
    "end": "4053200"
  },
  {
    "text": "depending on the scenario depending on how much memory pressure we want to exert depending on how much we perceive",
    "start": "4053200",
    "end": "4058319"
  },
  {
    "text": "the application is you know is is pushing back all of those things so um",
    "start": "4058319",
    "end": "4063520"
  },
  {
    "text": "but we've we've spent a long time developing theistic to make it as transparent as we possibly can the",
    "start": "4063520",
    "end": "4068839"
  },
  {
    "text": "downside of course is that you know given that we wanted this just to work with an existing jvm without modifying",
    "start": "4068839",
    "end": "4075599"
  },
  {
    "text": "any way this is really the only thing we could have done in order to make this work you know there's no other way of actually getting the Heap to do what you",
    "start": "4075599",
    "end": "4082319"
  },
  {
    "text": "want it to do but it turns out it's actually surprisingly",
    "start": "4082319",
    "end": "4086960"
  },
  {
    "text": "effective okay so res mem so yeah these these are just bit that live in the Heap",
    "start": "4087480",
    "end": "4094440"
  },
  {
    "text": "and they get moved around and they can get garbage collected um but essentially the the the balloon driver that that",
    "start": "4094440",
    "end": "4101719"
  },
  {
    "text": "works with the jvm is a is a is a mutator just like anything else and actually what the balloon driver",
    "start": "4101719",
    "end": "4107560"
  },
  {
    "text": "does when it inflates the balloon in other words allocates these objects in the Heap to give memory back um we",
    "start": "4107560",
    "end": "4113520"
  },
  {
    "text": "actually hide that from the the the main heat memory statistic with jmx so that",
    "start": "4113520",
    "end": "4119440"
  },
  {
    "text": "uh so that any uh monitoring tools don't look at this and go oh my goodness there's a massive memory leak right you",
    "start": "4119440",
    "end": "4125120"
  },
  {
    "text": "can switch that off but again we want to try to make that as transparent as possible um so we we we've gone through",
    "start": "4125120",
    "end": "4130838"
  },
  {
    "text": "and actually one of the things that I didn't show you but I can show you here uh if I just find the right thing is I",
    "start": "4130839",
    "end": "4138400"
  },
  {
    "text": "did start all these J consoles and we never actually really looked at anything um whoops we have um let's get rid of",
    "start": "4138400",
    "end": "4146798"
  },
  {
    "text": "that we've put a whole bunch of um that's the wrong one there we go we've put a whole bunch",
    "start": "4146799",
    "end": "4154278"
  },
  {
    "text": "of emans in to help you see what's going on so there's this let me just maximize this so there's this mban here and it",
    "start": "4154279",
    "end": "4161838"
  },
  {
    "text": "will tell you um we've got um um sorry we've got balloon internal Zine",
    "start": "4161839",
    "end": "4170238"
  },
  {
    "text": "right so the balloon internal Zan will tell tell you exactly how much data is in there right it'll tell you the",
    "start": "4170239",
    "end": "4175719"
  },
  {
    "text": "various reference types how many bytes per second is being tenured all that kind of stuff we have um the the the",
    "start": "4175719",
    "end": "4181679"
  },
  {
    "text": "state of the jvm balloon so how big it is um we've got the state of the balloon on the VM we expose that as well",
    "start": "4181679",
    "end": "4188560"
  },
  {
    "text": "currently that's zero um we also tell you this quite a useful mban we'll just tell you if everything's configured",
    "start": "4188560",
    "end": "4194679"
  },
  {
    "text": "correctly right so will tell you oh okay yes you're on a compatible version of ESX you know you've got guest tools",
    "start": "4194679",
    "end": "4199800"
  },
  {
    "text": "installed uh so you know we expose data to the server admin through jmx if you",
    "start": "4199800",
    "end": "4205800"
  },
  {
    "text": "want to use that um but um let me get back to the presentation and then at the",
    "start": "4205800",
    "end": "4210920"
  },
  {
    "text": "very end I'll show you a cool new tool we're working on where we're actually exposing Java stuff into the vsphere",
    "start": "4210920",
    "end": "4216400"
  },
  {
    "text": "client right because this is the first thing this is my first sort of project",
    "start": "4216400",
    "end": "4222400"
  },
  {
    "text": "the first thing I really wanted to tackle and get right now now that we've done that yes we're putting some improvements in we're putting some new",
    "start": "4222400",
    "end": "4228080"
  },
  {
    "text": "features in and whatever but the next thing I want to really understand and look at is is how do we give vsphere",
    "start": "4228080",
    "end": "4233880"
  },
  {
    "text": "admins more insight into what's going on in VMS running Java right and we've we've already come up with some really",
    "start": "4233880",
    "end": "4240040"
  },
  {
    "text": "cool plugins into V console sorry Venter that give you really nice insight into what's going on in vm's running Java uh",
    "start": "4240040",
    "end": "4247120"
  },
  {
    "text": "that help you to size them help you to see how efficiently they're being used all that kind of stuff so at the end I'll take you through a little demo of",
    "start": "4247120",
    "end": "4252640"
  },
  {
    "text": "that like a sneak peek of what we're doing there because we haven't released that yet but that's that's coming real soon um I'll just finish off the",
    "start": "4252640",
    "end": "4259800"
  },
  {
    "text": "presentation and we can do some Q&A and and and I think we'll we'll be good so one of the experiments we do and this",
    "start": "4259800",
    "end": "4266199"
  },
  {
    "text": "just shows you in a much larger context we actually take a a host uh that has um",
    "start": "4266199",
    "end": "4271840"
  },
  {
    "text": "about 32 gig on it and we run uh I don't know something like 25 30 of those VMS",
    "start": "4271840",
    "end": "4277840"
  },
  {
    "text": "uh and we just round robin loads between them for about six hours and this is kind of what it looks like on the host",
    "start": "4277840",
    "end": "4283520"
  },
  {
    "text": "um you can see that the memory overcommit is the difference between these two lines here see the ballooning here there's a little bit of swapping",
    "start": "4283520",
    "end": "4289760"
  },
  {
    "text": "that went on here um but these two graphs show quite nicely the comparison",
    "start": "4289760",
    "end": "4294840"
  },
  {
    "text": "between uh a large page setup um that I showed you on here which is our worst",
    "start": "4294840",
    "end": "4300080"
  },
  {
    "text": "case scenario and the Java ballooning which is our best case scenario what I've done here is I've actually uh taken",
    "start": "4300080",
    "end": "4306920"
  },
  {
    "text": "the uh 90th percentile average response time of a test case and loaded it from",
    "start": "4306920",
    "end": "4313520"
  },
  {
    "text": "highest to lowest for all all of these runs that we did ran robing on all these servers right so it just gives us a",
    "start": "4313520",
    "end": "4319040"
  },
  {
    "text": "distribution curve to show us you know the the worst to the best and what this",
    "start": "4319040",
    "end": "4324199"
  },
  {
    "text": "is showing obviously is that there are cases where okay we got horrible performance um uh 90th percenti response",
    "start": "4324199",
    "end": "4331920"
  },
  {
    "text": "time is like 10 seconds and our average response time is like 1 second and obviously you know some of them it",
    "start": "4331920",
    "end": "4337320"
  },
  {
    "text": "performed fine with the Java ballooning this is our our our curve and this by the way is",
    "start": "4337320",
    "end": "4343639"
  },
  {
    "text": "using uh a whole combin of garbage collection policies Heap configurations large Pages small Pages all the things",
    "start": "4343639",
    "end": "4349080"
  },
  {
    "text": "that we've seen to try and get a you know this is basically the Tes that we do to test our algorithms right just to",
    "start": "4349080",
    "end": "4354320"
  },
  {
    "text": "make sure that we we've got something that makes sense and I know this is kind of a you know sort of it's just one graph right and it you know but it's",
    "start": "4354320",
    "end": "4361639"
  },
  {
    "text": "it's it's what we have for now and in fact I just written a paper on this stuff that I presented in London last week um that goes into more detail on",
    "start": "4361639",
    "end": "4368280"
  },
  {
    "text": "what we did and how we did it and stuff so if people are interested in that I can I can make that available so we've we've gone through",
    "start": "4368280",
    "end": "4374719"
  },
  {
    "text": "the benefit there's no need to go through this slide um so I did put a",
    "start": "4374719",
    "end": "4379880"
  },
  {
    "text": "slide in here about future topics not that I'm like asking begging to be asked back or anything but just something",
    "start": "4379880",
    "end": "4385239"
  },
  {
    "text": "that's definitely worth thinking about in terms of what we're looking at at VMware and and where our priorities are",
    "start": "4385239",
    "end": "4390360"
  },
  {
    "text": "with Java um I talked about management and monitoring right that's that turns out to be a big thing with customers",
    "start": "4390360",
    "end": "4396840"
  },
  {
    "text": "right particularly when you've got a v admins and and server administrators who do two different people right the server",
    "start": "4396840",
    "end": "4403239"
  },
  {
    "text": "administrator goes to visb and and saying my servers performing like crap why right and and when it's Java there",
    "start": "4403239",
    "end": "4408280"
  },
  {
    "text": "may be a hundred different reasons why that is um by making uh a lot of the Java specific information available to",
    "start": "4408280",
    "end": "4414840"
  },
  {
    "text": "Venter which is what we're doing we should give the the vsphere admins much more U visibility into what's going on",
    "start": "4414840",
    "end": "4422280"
  },
  {
    "text": "and really Empower them to be able to say okay well the reason this is performing like crap is because because it's misconfigured in this particular",
    "start": "4422280",
    "end": "4428840"
  },
  {
    "text": "way so I'll show you that at the end for whoever wants to stick around have a look at that um another cool project",
    "start": "4428840",
    "end": "4435719"
  },
  {
    "text": "that I encourage you to look at is this thing VI Java right and this has been around for quite a while um it's it's a",
    "start": "4435719",
    "end": "4442920"
  },
  {
    "text": "way of actually um having a Java API to allow you to manage and monitor um uh",
    "start": "4442920",
    "end": "4448960"
  },
  {
    "text": "VMS right now the testing that I've talked about that we do um I have a a um",
    "start": "4448960",
    "end": "4454679"
  },
  {
    "text": "um a farm of about 40 VMS right and when I run want to run a test on one of those VMS I have an automated framework that",
    "start": "4454679",
    "end": "4461520"
  },
  {
    "text": "Boots the VM down sets the amount of memory I want sets the amount of overcommit I want configures the",
    "start": "4461520",
    "end": "4467440"
  },
  {
    "text": "operating system configures the jvm boots it back up again starts to test measures the response times gets all the",
    "start": "4467440",
    "end": "4474120"
  },
  {
    "text": "information that I need writes it to CSV and then shuts the thing down again right the things you can do with VMS and",
    "start": "4474120",
    "end": "4481040"
  },
  {
    "text": "this VI Java API particularly when it comes to testing are really really interesting right you can do absolutely",
    "start": "4481040",
    "end": "4487760"
  },
  {
    "text": "anything you want and automate it and I mean I come from a test background and that's really exciting to me you know the fact that I can just just configure",
    "start": "4487760",
    "end": "4494480"
  },
  {
    "text": "uh I mean junit did this for Java right with junit you can configure what you want just run through a whole lot of tests get the results at the end of it",
    "start": "4494480",
    "end": "4500560"
  },
  {
    "text": "but you've never been able to do that with with virtual machines right and with VI Java you can do that although I",
    "start": "4500560",
    "end": "4507480"
  },
  {
    "text": "think maybe in the future a cool spring project would be like spring VI Java to make it a bit simpler but",
    "start": "4507480",
    "end": "4513760"
  },
  {
    "text": "anyway um that's not any commitment by the way to anything um and finally I mean it would",
    "start": "4513760",
    "end": "4520719"
  },
  {
    "text": "be interesting as well to look at um you know the high availability Story the scaling story you know one of the things",
    "start": "4520719",
    "end": "4526400"
  },
  {
    "text": "that VMware has kind of asked me to look at is you know how do we shout about",
    "start": "4526400",
    "end": "4531600"
  },
  {
    "text": "vsphere and why vsphere is a great place to run Java right and and you know High availability scalability all those good",
    "start": "4531600",
    "end": "4537679"
  },
  {
    "text": "things uh all come into that springsource actually despite being bought by VMware is still very very uh",
    "start": "4537679",
    "end": "4544639"
  },
  {
    "text": "active and innovating in in Co new things spring the spring data project uh is is is is is pretty recent it's pretty",
    "start": "4544639",
    "end": "4551480"
  },
  {
    "text": "cool anyway enough stuff about what what else is going on but that's just interesting sort of stuff that you might",
    "start": "4551480",
    "end": "4557120"
  },
  {
    "text": "want to look at might be interested in uh at some future date so that is the",
    "start": "4557120",
    "end": "4562560"
  },
  {
    "text": "end of my presentation oh yeah if you are interested in any of this stuff I am Ben's doings on Twitter um I",
    "start": "4562560",
    "end": "4570159"
  },
  {
    "text": "know so I actually have two Twitter accounts one is me you know sort of uh",
    "start": "4570159",
    "end": "4575400"
  },
  {
    "text": "on sort of drunken lights out going I love you and the other one is work stuff right that's my work stuff Twitter ID um",
    "start": "4575400",
    "end": "4583159"
  },
  {
    "text": "so anyway um finally I promised you an appendix the",
    "start": "4583159",
    "end": "4588320"
  },
  {
    "text": "appendix for the benefit of the video just a summary of good uh operating",
    "start": "4588320",
    "end": "4593360"
  },
  {
    "text": "systems for the timekeeping thing we talked about earlier how to configure large pages on Linux a cheat",
    "start": "4593360",
    "end": "4599679"
  },
  {
    "text": "sheet and that's it so anyway any questions oh that's a really good",
    "start": "4599679",
    "end": "4605159"
  },
  {
    "text": "question so the question was if we're scaling up is it better to add more jvms",
    "start": "4605159",
    "end": "4610560"
  },
  {
    "text": "to a VM or add more VMS with with a jvm in the reason that's a really interesting question is because there's",
    "start": "4610560",
    "end": "4617120"
  },
  {
    "text": "commercial pressures to do it one way and there's technical reasons why it's better to do it another way right uh you",
    "start": "4617120",
    "end": "4623159"
  },
  {
    "text": "know the commercial pressures of okay every operating system we're running is a fixed cost so we want to load up our",
    "start": "4623159",
    "end": "4630199"
  },
  {
    "text": "operating system with as many jvms as we can we see that a lot and I completely understand that right because every",
    "start": "4630199",
    "end": "4636080"
  },
  {
    "text": "instance of an operating system okay you've got to patch it and you've got to maintain it and whatever uh although there are ways we've developed to make",
    "start": "4636080",
    "end": "4642040"
  },
  {
    "text": "that easier for you that's still you know something that that that is consideration for people there's the cost Factor as well you know having a",
    "start": "4642040",
    "end": "4648239"
  },
  {
    "text": "number of instances of Windows whatever you know fill in the blank operating system um the reason it's ideally best",
    "start": "4648239",
    "end": "4656080"
  },
  {
    "text": "not to do that um particularly when it comes to memory management and overc",
    "start": "4656080",
    "end": "4661199"
  },
  {
    "text": "committing memory is because remember I talked about how the hypervisor makes decisions based on active memory right",
    "start": "4661199",
    "end": "4669639"
  },
  {
    "text": "so if you load and and that's at the granularity of a single VM so let's say you load two VMS",
    "start": "4669639",
    "end": "4675520"
  },
  {
    "text": "with loads of jvms and some of those jvms are active at some Sometimes some of those jvms are active at other times",
    "start": "4675520",
    "end": "4681360"
  },
  {
    "text": "the hypervisor is really not going to be able to make any sense of you know like where do I reclaim memory from right",
    "start": "4681360",
    "end": "4687040"
  },
  {
    "text": "because both VMS are going to have a kind of a medium amount of activity that the hypervisor is seeing right the",
    "start": "4687040",
    "end": "4692199"
  },
  {
    "text": "active memory is going to be sort of pretty pretty much the same whereas if each of those jvms were in their own VM",
    "start": "4692199",
    "end": "4697800"
  },
  {
    "text": "the hypervisor is able to make much better huris decisions as to where it reclaims memory from because because",
    "start": "4697800",
    "end": "4703239"
  },
  {
    "text": "it's doing that at the granularity of the VM so that's again if you're not",
    "start": "4703239",
    "end": "4708480"
  },
  {
    "text": "overc committing memory that's less of an issue um and one of the things you'll see when I when I just show you the the",
    "start": "4708480",
    "end": "4715159"
  },
  {
    "text": "the monitoring management stuff um you know typically in Venter you have a host",
    "start": "4715159",
    "end": "4720520"
  },
  {
    "text": "you have you'll have a cluster then a host then VMS you know a kind of tree structure within a VM you may have a",
    "start": "4720520",
    "end": "4726480"
  },
  {
    "text": "number of jvms and we'll actually you know list the jvms you've got running will allow you to get visibility into",
    "start": "4726480",
    "end": "4731520"
  },
  {
    "text": "you know each one what what's the garbage collection look like blah blah blah all like kind of stuff so okay good",
    "start": "4731520",
    "end": "4737000"
  },
  {
    "text": "question how does the Java balloon communicate with a hypervisor um each uh",
    "start": "4737000",
    "end": "4742360"
  },
  {
    "text": "each guest operating system has a uh what we call a back door um through",
    "start": "4742360",
    "end": "4748719"
  },
  {
    "text": "which VM guest tools can communicate with the hypervisor the regular balloon driver can communicate with the hypervisor it's a bit of magic basically",
    "start": "4748719",
    "end": "4755920"
  },
  {
    "text": "it's just a magic Communication channel uh from the guest OS through to the hypervisor and the hypervisor will say",
    "start": "4755920",
    "end": "4762920"
  },
  {
    "text": "to the balloon driver inflate this particular size the balloon driver will pass back the page numbers and the",
    "start": "4762920",
    "end": "4768360"
  },
  {
    "text": "hypervisor just balloons the memory away uh I do really appreciate you know your",
    "start": "4768360",
    "end": "4773760"
  },
  {
    "text": "uh attentiveness and the questions were great it's been a really good experience",
    "start": "4773760",
    "end": "4779000"
  },
  {
    "text": "um I hope it's been interesting to you do follow me on Twitter as I say and uh check out what we're up to uh come work",
    "start": "4779000",
    "end": "4785639"
  },
  {
    "text": "for VMware there you go another plug um actually I get $2,000 a time if you come work for VM so definitely come work for",
    "start": "4785639",
    "end": "4792440"
  },
  {
    "text": "VM um and make sure you drop my name when you do",
    "start": "4792440",
    "end": "4799320"
  },
  {
    "text": "[Music]",
    "start": "4799430",
    "end": "4807899"
  }
]