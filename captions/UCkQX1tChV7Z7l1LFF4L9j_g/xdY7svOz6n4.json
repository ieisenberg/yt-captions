[
  {
    "text": "you know that's a really good topic for the last day so Danny's wondering why we",
    "start": "7040",
    "end": "13679"
  },
  {
    "text": "keep on talking about Python 2 when there's Python 3 out Python 3.0 was a",
    "start": "13679",
    "end": "19529"
  },
  {
    "text": "failure it's pretty much what it boils down to Guido made the decision to break",
    "start": "19529",
    "end": "24960"
  },
  {
    "text": "backwards compatibility with the python 2.x series in what was originally going",
    "start": "24960",
    "end": "30179"
  },
  {
    "text": "to be python 2.6 I think so it's been a while since the decision was made and",
    "start": "30179",
    "end": "36149"
  },
  {
    "text": "the community outcry made everybody decide we're going to make a new version major revision of Python 3 that will be",
    "start": "36149",
    "end": "44280"
  },
  {
    "text": "a backwards incompatible with Python 2 will continue parallel development of the Python to branch and the Python 3",
    "start": "44280",
    "end": "50879"
  },
  {
    "text": "branch the main thing that they did is unicode is a pain in the ass if you've",
    "start": "50879",
    "end": "58109"
  },
  {
    "text": "done any like web programming headed to go with character sets in brief we've been pretending that strings are made up",
    "start": "58109",
    "end": "63780"
  },
  {
    "text": "of ASCII characters and each character takes up one bite and there's a single non dubious representation of each bite",
    "start": "63780",
    "end": "71700"
  },
  {
    "text": "and that's just simply not true in the real world in the real world textual data is binary data whose interpretation",
    "start": "71700",
    "end": "79049"
  },
  {
    "text": "depends on how it's been encoded sad but true and that fact is a real pain to",
    "start": "79049",
    "end": "85380"
  },
  {
    "text": "work around in Python 2 so almost any almost any substantial program that",
    "start": "85380",
    "end": "91290"
  },
  {
    "text": "might undergo internationalization or be exposed to multiple character sets like every web application ever written has",
    "start": "91290",
    "end": "97020"
  },
  {
    "text": "got some libraries to deal with Unicode issues and it still bite you every now and then so Python 3 fixed all that and",
    "start": "97020",
    "end": "102630"
  },
  {
    "text": "Unicode data is the basic string type and that breaks every single other library that depends on Python 2 big",
    "start": "102630",
    "end": "110430"
  },
  {
    "text": "discontinuity so nobody obviously nobody use Python 3 despite the fact that the",
    "start": "110430",
    "end": "116070"
  },
  {
    "text": "engine is more performant than Python 2 and there's been parallel development and they've released python 2.6 in",
    "start": "116070",
    "end": "121740"
  },
  {
    "text": "python 2.7 we're getting close to the end of life of Python 2 and there's been",
    "start": "121740",
    "end": "126810"
  },
  {
    "text": "enough progress in fixing third-party libraries to run on Python 3 but like",
    "start": "126810",
    "end": "133349"
  },
  {
    "text": "for instance it was a major effort to get Django to run on Python 3 and I still don't know",
    "start": "133349",
    "end": "140730"
  },
  {
    "text": "of anybody who's doing it in production so we've had two versions of Python living side by side for a while and the",
    "start": "140730",
    "end": "147209"
  },
  {
    "text": "official word was it's fine to stick with Python 2 for production and Python 3.0 is kind of a experiment to show you",
    "start": "147209",
    "end": "154200"
  },
  {
    "text": "where the language is going to be and hopefully in five years everybody's going to decide to migrate and we're still in the are we gonna migrate sort",
    "start": "154200",
    "end": "160739"
  },
  {
    "text": "of phase right now and I don't know anybody who's running Python 3 code on",
    "start": "160739",
    "end": "166739"
  },
  {
    "text": "production machines and that's not true I don't know very many people that are",
    "start": "166739",
    "end": "173340"
  },
  {
    "text": "running Python 3 code on production machines if you are writing for your own",
    "start": "173340",
    "end": "179010"
  },
  {
    "text": "machine and your library needs are adequately met Python 3 is fine and as a",
    "start": "179010",
    "end": "186689"
  },
  {
    "text": "user of the language semantically not a ton will have changed unless what you're",
    "start": "186689",
    "end": "191939"
  },
  {
    "text": "doing is heavily processing text textual strings and Unicode aside from that most",
    "start": "191939",
    "end": "198209"
  },
  {
    "text": "of the concept of the same and there's very limited and like send tactical changes to the language there are a few",
    "start": "198209",
    "end": "203609"
  },
  {
    "text": "and there is a Python 223 tool that's written in python that will convert your Python to syntax to Python 3",
    "start": "203609",
    "end": "210030"
  },
  {
    "text": "automatically for you I catching the few places where there been changes in keywords and/or syntax and it's usually",
    "start": "210030",
    "end": "216389"
  },
  {
    "text": "things like they changed how exception exceptions are caught because you can",
    "start": "216389",
    "end": "221849"
  },
  {
    "text": "catch multiple classes of exceptions and you can catch the exception instance and",
    "start": "221849",
    "end": "227760"
  },
  {
    "text": "in Python 2 that's kind of an ambiguous list of comma-separated things and a python 3 they made that much more",
    "start": "227760",
    "end": "233220"
  },
  {
    "text": "clearly a tuple and a instance so they cleaned up some bits and pieces of language but it's not really a",
    "start": "233220",
    "end": "238979"
  },
  {
    "text": "substantial change from a cent tactical point of view it's mostly a substantial change from a runtime and string",
    "start": "238979",
    "end": "244979"
  },
  {
    "text": "handling point of view but we continue to teach Python to when Python when you",
    "start": "244979",
    "end": "250769"
  },
  {
    "text": "yourself have to use Python 3 there won't be a big learning curve and it's mainly a matter of people getting their",
    "start": "250769",
    "end": "256530"
  },
  {
    "text": "software to run on Python 3 the state of general web handling stuff in the Python",
    "start": "256530",
    "end": "263849"
  },
  {
    "text": "standard light standard lib is kind of messy",
    "start": "263849",
    "end": "268550"
  },
  {
    "text": "partly because despite being considered the new and hotness Python is a relatively old language that's been",
    "start": "270200",
    "end": "275580"
  },
  {
    "text": "around since CGI was the way to do web applications so exceedingly lame names",
    "start": "275580",
    "end": "284610"
  },
  {
    "text": "but there is URL lib in a standard",
    "start": "284610",
    "end": "290730"
  },
  {
    "text": "library which has a bunch of things having to do with reading URLs parsing URLs parsing data you might get from",
    "start": "290730",
    "end": "298020"
  },
  {
    "text": "URLs and the slightly newer slightly",
    "start": "298020",
    "end": "308400"
  },
  {
    "text": "improved URL lib to which confusingly is not a complete re-implementation of URL",
    "start": "308400",
    "end": "314640"
  },
  {
    "text": "lid but supply some additional missing pieces and about half the time I can't remember if what i want is in one or the",
    "start": "314640",
    "end": "319650"
  },
  {
    "text": "other and i can pound my confusion by importing star from both of them we'll",
    "start": "319650",
    "end": "325650"
  },
  {
    "text": "just use a little bit of the basic functionality of URL lib right now and we're going to use a different data",
    "start": "325650",
    "end": "334350"
  },
  {
    "text": "format jason is a commonly used format on the web jason stands for JavaScript",
    "start": "334350",
    "end": "339810"
  },
  {
    "text": "object notation and it'll look really familiar to you because it looks a lot",
    "start": "339810",
    "end": "345900"
  },
  {
    "text": "like pythons notation with a few additional rules JSON stands for",
    "start": "345900",
    "end": "352350"
  },
  {
    "text": "JavaScript object notation and valid Jason can be interpreted as valid",
    "start": "352350",
    "end": "359280"
  },
  {
    "text": "JavaScript code which is one of the reasons has become a really popular data interchange format if you're writing",
    "start": "359280",
    "end": "364530"
  },
  {
    "text": "JavaScript you can just grab some JSON and it's already parched for you it's",
    "start": "364530",
    "end": "369750"
  },
  {
    "text": "kind of nice it's also kind of dangerous when you're talking JavaScript I put up",
    "start": "369750",
    "end": "379290"
  },
  {
    "text": "some Jason I left my file name dot txt and it's being sent with a text mime type so it's not really really Jason and",
    "start": "379290",
    "end": "386010"
  },
  {
    "text": "I wouldn't be able to use it from JavaScript but those are details that don't need to concern you if you're not a web monkey like me but this is what",
    "start": "386010",
    "end": "393810"
  },
  {
    "text": "JSON data looks like i have opening square brackets which would indicate a list an opening brace",
    "start": "393810",
    "end": "401430"
  },
  {
    "text": "which would indicate a dictionary and I have name colon value pairs",
    "start": "401430",
    "end": "410180"
  },
  {
    "text": "comma-separated pretty much Python  send tax right no problem",
    "start": "410180",
    "end": "417300"
  },
  {
    "text": "understanding like what the Python representation of this would be almost identical there are a few rules for JSON",
    "start": "417300",
    "end": "427080"
  },
  {
    "text": "like like if I put a trailing comma here",
    "start": "427080",
    "end": "432300"
  },
  {
    "text": "that would break JSON for one major browser at least URL lib has a lot of",
    "start": "432300",
    "end": "438930"
  },
  {
    "text": "stuff in it but what I'm kind of interested in is this paragraph and this",
    "start": "438930",
    "end": "449940"
  },
  {
    "text": "is worth noting because it's basically Python philosophy Python OOP engages in",
    "start": "449940",
    "end": "457880"
  },
  {
    "text": "duck typing and you'll hear that phrase turn around and duck typing means if it",
    "start": "457880",
    "end": "465870"
  },
  {
    "text": "squawks like a duck and it walks like a duck it is a duck and what we're trying to convey by the humor statement is",
    "start": "465870",
    "end": "472880"
  },
  {
    "text": "Python doesn't concern itself a great deal with exactly what type of object",
    "start": "472880",
    "end": "478020"
  },
  {
    "text": "you have it's more interested in the behavior of the object and some type",
    "start": "478020",
    "end": "483540"
  },
  {
    "text": "systems are concerned with making sure that you have exactly the type that you",
    "start": "483540",
    "end": "489480"
  },
  {
    "text": "think you have and perform complicated tasks by coercing types Python is more",
    "start": "489480",
    "end": "498140"
  },
  {
    "text": "forgiving and it's not as concerned with exact types it's more concerned with the",
    "start": "498440",
    "end": "505680"
  },
  {
    "text": "ability to do things so URL opener dot open will give you back a bunch of",
    "start": "505680",
    "end": "513599"
  },
  {
    "text": "different objects but all of them have a read a red line red lines file number",
    "start": "513600",
    "end": "519240"
  },
  {
    "text": "close and info method which means you can pretend that their file objects it",
    "start": "519240",
    "end": "526110"
  },
  {
    "text": "walks like a duck quacks like a duck it must be a duck or at least we can use it as if it was a duck none of them are",
    "start": "526110",
    "end": "534900"
  },
  {
    "text": "actually file objects for the most part and we'll see that real quick now i'm going to use",
    "start": "534900",
    "end": "546510"
  },
  {
    "text": "URL open and i'm just going to pass it the URL i put my browser up there",
    "start": "546510",
    "end": "554329"
  },
  {
    "text": "FP is a ad in a din fo URL whose file",
    "start": "564930",
    "end": "575100"
  },
  {
    "text": "pointer is actually a socket object so",
    "start": "575100",
    "end": "580500"
  },
  {
    "text": "this is reading from a network but to get the data out of it I could do read",
    "start": "580500",
    "end": "586680"
  },
  {
    "text": "line I'm not really interested in in lines I just want the whole thing so I'm",
    "start": "586680",
    "end": "592140"
  },
  {
    "text": "just going to say F P dot read and F P dot close and data is new lines included",
    "start": "592140",
    "end": "605690"
  },
  {
    "text": "the JSON that was up there at San Franklin com so I just used a socket",
    "start": "605690",
    "end": "612450"
  },
  {
    "text": "object made an HTTP connection to a particular port but all the details of",
    "start": "612450",
    "end": "617820"
  },
  {
    "text": "that are hidden from me and basically I got to pretend like i was reading from a local file which is nice and now i have",
    "start": "617820",
    "end": "624120"
  },
  {
    "text": "a string that is Jason like this is a string I can't yet say give me the first",
    "start": "624120",
    "end": "632880"
  },
  {
    "text": "row that just gives you the first character so to parse this string I can",
    "start": "632880",
    "end": "638490"
  },
  {
    "text": "use the built-in Jason module and Jason",
    "start": "638490",
    "end": "644940"
  },
  {
    "text": "only defines a few functions you can change how the decoder works and do a",
    "start": "644940",
    "end": "650550"
  },
  {
    "text": "lot of customization but mostly you don't have to do that and mostly you're going to do load which takes a file or",
    "start": "650550",
    "end": "656820"
  },
  {
    "text": "load s which takes a string and dump which takes a file and dump us which",
    "start": "656820",
    "end": "663270"
  },
  {
    "text": "takes a string wrong direction I'm",
    "start": "663270",
    "end": "672630"
  },
  {
    "text": "loading some JSON data and what I'll get back is native Python types so I'm going",
    "start": "672630",
    "end": "682020"
  },
  {
    "text": "to reassign my data and now data is a",
    "start": "682020",
    "end": "690570"
  },
  {
    "text": "list of length to data 0 is a dict",
    "start": "690570",
    "end": "698329"
  },
  {
    "text": "it has keys and values you'll notice the presence of the leading you which",
    "start": "699879",
    "end": "705589"
  },
  {
    "text": "indicates that these are Unicode strings but you pretty much shouldn't worry",
    "start": "705589",
    "end": "710870"
  },
  {
    "text": "about that right now and if I were importing address book data it would be",
    "start": "710870",
    "end": "716240"
  },
  {
    "text": "pretty obvious how to do it from here I can loop over the roads that I've got and read the labels that I've got if you",
    "start": "716240",
    "end": "722720"
  },
  {
    "text": "would like to add to your address book the ability to read a remote URL and import the JSON data that you find there",
    "start": "722720",
    "end": "730720"
  },
  {
    "text": "you know enough to do it now the URL is here and URL lib dot URL open it gives",
    "start": "730720",
    "end": "743000"
  },
  {
    "text": "you a file like object it's worth noting",
    "start": "743000",
    "end": "751339"
  },
  {
    "text": "one of the other built-in file like objects is a string io class and that is",
    "start": "751339",
    "end": "758750"
  },
  {
    "text": "in is it in the file module it might be in the file module it is in the string",
    "start": "758750",
    "end": "766670"
  },
  {
    "text": "i/o module sorry the string i/o module defines a string variable that's",
    "start": "766670",
    "end": "775970"
  },
  {
    "text": "actually tied to a buffer and it has readwrite read lines right lines basically emulates the file object and",
    "start": "775970",
    "end": "781430"
  },
  {
    "text": "what that means is if you write functions that except files file pointers as arguments you can test them",
    "start": "781430",
    "end": "788870"
  },
  {
    "text": "by converting a string to a string i/o and passing it the known data that you have without having to have data files",
    "start": "788870",
    "end": "795139"
  },
  {
    "text": "separately laying around so that's kind of that's kind of useful it's also sometimes used to get around the string",
    "start": "795139",
    "end": "800329"
  },
  {
    "text": "concatenation issues so if what you're composing is a really really large string like say you're manipulating",
    "start": "800329",
    "end": "805819"
  },
  {
    "text": "documents you might use string I oh and right to it and as opposed to the native",
    "start": "805819",
    "end": "811430"
  },
  {
    "text": "Python string class during i/o works by pre allocating a really big buffer and then jumping up in big chunks when it",
    "start": "811430",
    "end": "818360"
  },
  {
    "text": "needs to so appending to it doesn't doesn't cause any memory changes until you hit the buffer size and then it",
    "start": "818360",
    "end": "824209"
  },
  {
    "text": "doesn't call their memory changes for a long time after that again so it's more performant",
    "start": "824209",
    "end": "829420"
  },
  {
    "text": "so the fact that there's a you before the string is pythons representation telling you that this is a Unicode",
    "start": "830680",
    "end": "837230"
  },
  {
    "text": "string but for the purposes of this class Unicode strings and ascii strings",
    "start": "837230",
    "end": "842810"
  },
  {
    "text": "are all exactly the same thing if you printed it'll print your justing the you",
    "start": "842810",
    "end": "848420"
  },
  {
    "text": "because it's by default doing the wrapper the programmers representation and you might want to know whether it",
    "start": "848420",
    "end": "853730"
  },
  {
    "text": "was a Unicode string or an ASCII stringer whatnot so really briefly",
    "start": "853730",
    "end": "860920"
  },
  {
    "text": "strings that we're used to our in ASCII which is an encoding system of 255",
    "start": "862660",
    "end": "868730"
  },
  {
    "text": "numbers that correspond to letters and it reads text by saying this is the number 31 therefore it has to be a I",
    "start": "868730",
    "end": "875450"
  },
  {
    "text": "forget what the ASCII numbers are nowadays it turns out 255 characters is not enough to represent every character",
    "start": "875450",
    "end": "882170"
  },
  {
    "text": "in the world's languages so there's a",
    "start": "882170",
    "end": "889190"
  },
  {
    "text": "whole variety of originally the idea was we come with a whole variety of different encodings you might have seen",
    "start": "889190",
    "end": "894260"
  },
  {
    "text": "like in your browser you can select from encodings like kanji and eventually we",
    "start": "894260",
    "end": "899810"
  },
  {
    "text": "sort of standardized and said well what if we made strings instead of one byte we made them to bite and then what if we",
    "start": "899810",
    "end": "908210"
  },
  {
    "text": "said that you had to define the name of the encoding that the following string data was in and then strings would be",
    "start": "908210",
    "end": "914510"
  },
  {
    "text": "portable and that whole effort is called Unicode and as a particular encoding called utf-8 and it turns out that a",
    "start": "914510",
    "end": "921790"
  },
  {
    "text": "couple of bites isn't enough that's actually utf-16 a couple of bites isn't enough says utf-32 and it still turns",
    "start": "921790",
    "end": "929930"
  },
  {
    "text": "out that that's not enough so there's tons of Unicode and coatings and basically what that means is when you have a Unicode string you don't know",
    "start": "929930",
    "end": "936170"
  },
  {
    "text": "what an individual bite represents as a character unless you know how it was encoded because different encoding",
    "start": "936170",
    "end": "942770"
  },
  {
    "text": "specify different numbers mapping to different characters from the program",
    "start": "942770",
    "end": "949400"
  },
  {
    "text": "perspective we're going to pretend that we always have a ski strings Python is capable of saying here is an encoding",
    "start": "949400",
    "end": "955520"
  },
  {
    "text": "the name of an encoding as long as the encoding is installed on your system here's a string to read using the encoding and giving you back the proper",
    "start": "955520",
    "end": "961280"
  },
  {
    "text": "characters it's also capable of just having binary style strings whereby you don't make any",
    "start": "961280",
    "end": "967460"
  },
  {
    "text": "assumptions about the type and I've done some programming that way and you'll see",
    "start": "967460",
    "end": "972470"
  },
  {
    "text": "if you ever see programs that have / x and then some hexadecimal number that's",
    "start": "972470",
    "end": "978140"
  },
  {
    "text": "directly embedding unicode characters and frequently o passes around as binary strings to keep those from being interpreted in any way shape or form but",
    "start": "978140",
    "end": "984440"
  },
  {
    "text": "it's a big gnarly mess in almost every most most of the cases you're not going",
    "start": "984440",
    "end": "991160"
  },
  {
    "text": "to have to worry about it especially with since we're doing like command-line programming against ASCII text get to",
    "start": "991160",
    "end": "997130"
  },
  {
    "text": "the web and it's a different story exactly",
    "start": "997130",
    "end": "1003030"
  },
  {
    "text": "just parse JSON and or creates JSON so if I have a list that contains a list",
    "start": "1013690",
    "end": "1030260"
  },
  {
    "text": "and a string notice what I get back is a",
    "start": "1030260",
    "end": "1038510"
  },
  {
    "text": "string there's quotes on the end and inside that string is the JSON representation which is pretty close to",
    "start": "1038510",
    "end": "1045438"
  },
  {
    "text": "the Python representation although double quotes are mandatory instead of single quotes and i will say javascript",
    "start": "1045439",
    "end": "1055070"
  },
  {
    "text": "is a language seems to be rapidly converging towards python so not in your browser so much but newer versions",
    "start": "1055070",
    "end": "1060530"
  },
  {
    "text": "because your browser limits the version of JavaScript you can run but newer versions of Java Script have stolen from",
    "start": "1060530",
    "end": "1066559"
  },
  {
    "text": "Python things like list comprehensions for example and the object literal syntax here is stolen from Python as",
    "start": "1066559",
    "end": "1072320"
  },
  {
    "text": "well so give you that URL there just in",
    "start": "1072320",
    "end": "1078350"
  },
  {
    "text": "case you want it because I'm putting the survey URL back up so one more module to",
    "start": "1078350",
    "end": "1083990"
  },
  {
    "text": "discuss and this might actually help you especially early on in your explorations of Python one thought that occurred to",
    "start": "1083990",
    "end": "1090380"
  },
  {
    "text": "me I think I should introduce unit test early on in the class and hand wave over",
    "start": "1090380",
    "end": "1096230"
  },
  {
    "text": "the object-oriented part of it because unit tests would actually be kind of useful for some of the assignments and",
    "start": "1096230",
    "end": "1102160"
  },
  {
    "text": "if you're lost in your classmates program it's kind of hard to debug it sometimes like okay to get to the part",
    "start": "1102160",
    "end": "1108080"
  },
  {
    "text": "that I want to mess with I have to run it load all the data from csv add another name then filter by role and you",
    "start": "1108080",
    "end": "1114710"
  },
  {
    "text": "know it like takes a bunch of keystrokes to get right it is exactly that you're going kind of confusing sometimes",
    "start": "1114710",
    "end": "1120429"
  },
  {
    "text": "there's a stolid development called test-driven development and the basic idea is I already know what I want to do",
    "start": "1120429",
    "end": "1128030"
  },
  {
    "text": "and I'm going to write a test that says when I call this function I should get back when I call this function with us",
    "start": "1128030",
    "end": "1134120"
  },
  {
    "text": "data I should get back this result and I'll define the function but it won't do",
    "start": "1134120",
    "end": "1140000"
  },
  {
    "text": "anything and I'll run my tests and my tests fail I now I'll fix the function until it",
    "start": "1140000",
    "end": "1145820"
  },
  {
    "text": "meets my tests as long as it meets my test then that function is going to be usable by the rest of my program and it",
    "start": "1145820",
    "end": "1151490"
  },
  {
    "text": "means to debug your filter by roll function for instance instead of like loading data and stepping through your",
    "start": "1151490",
    "end": "1157520"
  },
  {
    "text": "program interactively till you get to the spot where you can test your filter by roll function you could write a test for your filter by roll function and",
    "start": "1157520",
    "end": "1164260"
  },
  {
    "text": "your test might have enough output that on successive iterations you don't have to step into it with PDB you can just",
    "start": "1164260",
    "end": "1170539"
  },
  {
    "text": "see oh right i forgot to strip the strip the trailing newline oh right I've got",
    "start": "1170539",
    "end": "1175880"
  },
  {
    "text": "two pools instead of lists and work through until all your function passes we've talked about doc tests as far as",
    "start": "1175880",
    "end": "1182330"
  },
  {
    "text": "testing goes and doc tests are kind of more like once you've got things working you add some tests that guarantee that",
    "start": "1182330",
    "end": "1188360"
  },
  {
    "text": "things stay working while they change and also the tests are kind of useful as documentation and it should probably be",
    "start": "1188360",
    "end": "1193549"
  },
  {
    "text": "kind of minimal there's another testing library that is much more frequently used for extensive testing it's the unit",
    "start": "1193549",
    "end": "1209059"
  },
  {
    "text": "test library unit test is a straight port of j unit so if you've ever written",
    "start": "1209059",
    "end": "1215179"
  },
  {
    "text": "j unit tests unit tests should look",
    "start": "1215179",
    "end": "1220340"
  },
  {
    "text": "totally familiar and basically the way unit test testing works is probably a",
    "start": "1220340",
    "end": "1227179"
  },
  {
    "text": "separate file probably a separate file called test or something like that i'm",
    "start": "1227179",
    "end": "1233120"
  },
  {
    "text": "going to write classes the classes inherit from unit test test case",
    "start": "1233120",
    "end": "1241330"
  },
  {
    "text": "the classes may define a method called set up that does whatever initialization",
    "start": "1247519",
    "end": "1254399"
  },
  {
    "text": "I need to do that's common to all of the tests that i want to run for this class and then i will write functions whose",
    "start": "1254399",
    "end": "1261779"
  },
  {
    "text": "name starts with the word test and then they're named whatever you want to name",
    "start": "1261779",
    "end": "1267690"
  },
  {
    "text": "them and each function should test some",
    "start": "1267690",
    "end": "1273450"
  },
  {
    "text": "sort of discrete piece of functionality and at the bottom I'm doing the if name",
    "start": "1273450",
    "end": "1283139"
  },
  {
    "text": "equals main thing and unit tests stop main unit tests that mean is the unit",
    "start": "1283139",
    "end": "1289919"
  },
  {
    "text": "tests applied main function and it loads all the classes in the module if they",
    "start": "1289919",
    "end": "1295860"
  },
  {
    "text": "inherit from unit test it parses all of their functions it runs the set up at a fifth exists and one at a time runs the",
    "start": "1295860",
    "end": "1303360"
  },
  {
    "text": "test methods if they exist and reports",
    "start": "1303360",
    "end": "1308460"
  },
  {
    "text": "about at all so let's run our tests",
    "start": "1308460",
    "end": "1319730"
  },
  {
    "text": "you",
    "start": "1320160",
    "end": "1322220"
  },
  {
    "text": "i defined one test and actually just look really quickly i did set up I",
    "start": "1329740",
    "end": "1336780"
  },
  {
    "text": "imported my classmates 9 file as c9 my",
    "start": "1336780",
    "end": "1342760"
  },
  {
    "text": "classmates dot 9 file is reading from a CSV so it starts out with a data structure called classmates that's blank",
    "start": "1342760",
    "end": "1350970"
  },
  {
    "text": "there it is it's a module level constant so I'm putting some data in it as part",
    "start": "1351809",
    "end": "1359860"
  },
  {
    "text": "of my setup and then my test is calling the save to file function that's in my",
    "start": "1359860",
    "end": "1366910"
  },
  {
    "text": "classmates 9 file it's got a textual string it's reading the CSV file and",
    "start": "1366910",
    "end": "1375000"
  },
  {
    "text": "it's using a special method and I said self that fail and less equal and I",
    "start": "1375000",
    "end": "1380710"
  },
  {
    "text": "don't define fail unless equal unit test test case which I'm inheriting from",
    "start": "1380710",
    "end": "1385800"
  },
  {
    "text": "defines a ton of fail methods which do checks for you so fail less equal",
    "start": "1385800",
    "end": "1392080"
  },
  {
    "text": "obviously checks to see that the two things that you pass it are equal and if they're not as a test failure and if they are it's a test success and there's",
    "start": "1392080",
    "end": "1398590"
  },
  {
    "text": "various does the more flexible fail if and various other fail functions",
    "start": "1398590",
    "end": "1406260"
  },
  {
    "text": "and when i run this it says fail test",
    "start": "1410790",
    "end": "1416100"
  },
  {
    "text": "writing csv is the name of the test that failed it gives me the trace back and I",
    "start": "1416100",
    "end": "1422250"
  },
  {
    "text": "said fail us equal text NF text and assertion error John Smith student",
    "start": "1422250",
    "end": "1428280"
  },
  {
    "text": "Simeon Franklin instructor is not equal to Simeon Franklin instructor John Smith",
    "start": "1428280",
    "end": "1433800"
  },
  {
    "text": "student why not well too yeah two things",
    "start": "1433800",
    "end": "1440130"
  },
  {
    "text": "one my CSV writing is putting a blank new line at the end of every line so I",
    "start": "1440130",
    "end": "1447750"
  },
  {
    "text": "need that and then yeah the other issue is the orders reversed",
    "start": "1447750",
    "end": "1455600"
  },
  {
    "text": "and the order is reversed because I am writing a dictionary and dictionaries",
    "start": "1462950",
    "end": "1469760"
  },
  {
    "text": "have no order and I could right now",
    "start": "1469760",
    "end": "1474160"
  },
  {
    "text": "switch the order of my lines and it might pass this time which it did ran",
    "start": "1477010",
    "end": "1489230"
  },
  {
    "text": "one test in 0 seconds ok I put one dot because it ran one test but this is a",
    "start": "1489230",
    "end": "1495920"
  },
  {
    "text": "really fragile test because dictionaries don't have order and I'm relying on some",
    "start": "1495920",
    "end": "1501020"
  },
  {
    "text": "sort of implicit order that might vary in the future depending on what machine this was run on so one really nice thing that tests do for you is give you",
    "start": "1501020",
    "end": "1509630"
  },
  {
    "text": "different entry points into your functions different ways of testing your function and isolation from the rest of",
    "start": "1509630",
    "end": "1515510"
  },
  {
    "text": "your program which is usually easier than testing it in conjunction with running the rest of your program the really nice thing tests do for you is",
    "start": "1515510",
    "end": "1521960"
  },
  {
    "text": "make you think about how you wrote your program in the first place and changing your program to be more testable usually",
    "start": "1521960",
    "end": "1530060"
  },
  {
    "text": "means changing your program to be more readable as well or more sane for",
    "start": "1530060",
    "end": "1535460"
  },
  {
    "text": "instance the c9 saved a file thing",
    "start": "1535460",
    "end": "1541809"
  },
  {
    "text": "I have hard-coded the file that I'm writing to so when I run my test I overwrite the data file from my program",
    "start": "1544600",
    "end": "1549760"
  },
  {
    "text": "it's really dumb to have a hard-coded file although I'm expecting that hard",
    "start": "1549760",
    "end": "1555340"
  },
  {
    "text": "coded file",
    "start": "1555340",
    "end": "1557880"
  },
  {
    "text": "so I'll make a change to my program",
    "start": "1568470",
    "end": "1572658"
  },
  {
    "text": "okay the change i made was i gave my function an optional argument called f9",
    "start": "1577580",
    "end": "1583580"
  },
  {
    "text": "that has a default value of data csv because it has a default value that f name does not have to be passed and my",
    "start": "1583580",
    "end": "1589750"
  },
  {
    "text": "program which previously expected this save to file not to accept any parameters can still call it without any",
    "start": "1589750",
    "end": "1594980"
  },
  {
    "text": "parameters and everything will work as before but my test can now supply its",
    "start": "1594980",
    "end": "1607490"
  },
  {
    "text": "own file name to write to and I won't be clobbering my main file name and I would",
    "start": "1607490",
    "end": "1615200"
  },
  {
    "text": "probably use the OS temp names directory to get a guaranteed unique temporary",
    "start": "1615200",
    "end": "1622220"
  },
  {
    "text": "name or post em names module and then the reason my test is failing is because",
    "start": "1622220",
    "end": "1628100"
  },
  {
    "text": "dictionaries don't have an order and the reason my test is a bad one is because",
    "start": "1628100",
    "end": "1633350"
  },
  {
    "text": "dictionaries don't have an order and my right to a CSV rights in whatever order the dictionary happens to give it to me",
    "start": "1633350",
    "end": "1639260"
  },
  {
    "text": "which I can't count on to be reliable from time to time and since the",
    "start": "1639260",
    "end": "1644510"
  },
  {
    "text": "fragility of this test is bugging me this tells me that probably would be a good idea to go back to my classmates program and the save to file instead of",
    "start": "1644510",
    "end": "1652310"
  },
  {
    "text": "doing four key and classmates I should probably do four key in classmates that",
    "start": "1652310",
    "end": "1658220"
  },
  {
    "text": "Keys sorted which guarantees that i'll",
    "start": "1658220",
    "end": "1665060"
  },
  {
    "text": "write it in the same consistent order every time and i don't really care what that order is but I'm not that concerned",
    "start": "1665060",
    "end": "1671060"
  },
  {
    "text": "about the order of the CSV file but at least it will be in exactly the same order every time so my test helps me",
    "start": "1671060",
    "end": "1676930"
  },
  {
    "text": "debug my program it guarantees that my program continues to work because I can",
    "start": "1676930",
    "end": "1683450"
  },
  {
    "text": "rerun my test after I've made some change and if my tests still pass i'm probably good and it also forces me to",
    "start": "1683450",
    "end": "1689990"
  },
  {
    "text": "write my program in a manner that can be tested for example how could I test the",
    "start": "1689990",
    "end": "1696440"
  },
  {
    "text": "get record function and get record",
    "start": "1696440",
    "end": "1701570"
  },
  {
    "text": "function probably doesn't need to be tested it's pretty much just for input the query record function I'd like to be",
    "start": "1701570",
    "end": "1708620"
  },
  {
    "text": "able to query to the query record function because I'm going to change the implementation from",
    "start": "1708620",
    "end": "1715510"
  },
  {
    "text": "looking at a dict to searching through rose and I'd write a test beforehand and make sure the test worked and then I",
    "start": "1715510",
    "end": "1721880"
  },
  {
    "text": "change the implementation and I'd run the test again and the test should still work but I can't really test the quay",
    "start": "1721880",
    "end": "1729590"
  },
  {
    "text": "record function because it has raw input in it so it would probably be a good",
    "start": "1729590",
    "end": "1735530"
  },
  {
    "text": "idea to pass an F name to query record and get the input separately",
    "start": "1735530",
    "end": "1743770"
  },
  {
    "text": "which meant that I pulled one line out and made it a new function this text",
    "start": "1773470",
    "end": "1779380"
  },
  {
    "text": "this line of code probably doesn't need to be tested it's probably going to work I'm not going to change it but this",
    "start": "1779380",
    "end": "1786970"
  },
  {
    "text": "query record function I'm going to totally change how this thing works and I'd like to be able to write a test for",
    "start": "1786970",
    "end": "1792970"
  },
  {
    "text": "it and now I could because I pass it a name and it's going to look up the name",
    "start": "1792970",
    "end": "1798900"
  },
  {
    "text": "let's write a test without really quickly might change one other thing",
    "start": "1799140",
    "end": "1808390"
  },
  {
    "text": "about it if F name in classmates I print",
    "start": "1808390",
    "end": "1814600"
  },
  {
    "text": "record else sorry not found yeah that kind of sucks I've got print statements in it that's kind of hard to test as",
    "start": "1814600",
    "end": "1820630"
  },
  {
    "text": "well again not impossible but kind of hard let's just returned classmates",
    "start": "1820630",
    "end": "1828059"
  },
  {
    "text": "fname",
    "start": "1828059",
    "end": "1831059"
  },
  {
    "text": "functions default value is returned so I'm going to solicit the first name call",
    "start": "1839500",
    "end": "1847690"
  },
  {
    "text": "my function that I'm going to be testing and get a row back if I got a row I'm",
    "start": "1847690",
    "end": "1855640"
  },
  {
    "text": "going to print a row with print record",
    "start": "1855640",
    "end": "1869010"
  },
  {
    "text": "else I'm going to print sorry not found so I moved all the input and output to squee record input but the actual logic",
    "start": "1872490",
    "end": "1879670"
  },
  {
    "text": "of query record which again I'm going to change big time is now shorter and",
    "start": "1879670",
    "end": "1884890"
  },
  {
    "text": "testable and i'm going to say see 9 dot",
    "start": "1884890",
    "end": "1890400"
  },
  {
    "text": "query record and it's based on the first",
    "start": "1890400",
    "end": "1896710"
  },
  {
    "text": "name so I have John in my sample data",
    "start": "1896710",
    "end": "1902669"
  },
  {
    "text": "and",
    "start": "1908039",
    "end": "1910158"
  },
  {
    "text": "a nice simple usage at the beginning but I'm kind of looking for and not the not",
    "start": "1928020",
    "end": "1934620"
  },
  {
    "text": "the description looking for the methods",
    "start": "1934620",
    "end": "1939110"
  },
  {
    "text": "there we are there's a certain methods and I love some of these assert not",
    "start": "1939740",
    "end": "1948090"
  },
  {
    "text": "almost equals there we go assert true",
    "start": "1948090",
    "end": "1959809"
  },
  {
    "text": "let's see if this does what I think it does",
    "start": "1966170",
    "end": "1969980"
  },
  {
    "text": "yeah I'm an idiot two functions with the",
    "start": "1986140",
    "end": "1992290"
  },
  {
    "text": "same name so of course it's only running one okay now I did a test query record",
    "start": "1992290",
    "end": "2000830"
  },
  {
    "text": "which worked and test riding the CSV oh hey when I changed it to be in the right",
    "start": "2000830",
    "end": "2007440"
  },
  {
    "text": "order it failed and if you remember i change this would be in order of the",
    "start": "2007440",
    "end": "2013290"
  },
  {
    "text": "first names so my previously failing",
    "start": "2013290",
    "end": "2019500"
  },
  {
    "text": "test my previously passing test failed",
    "start": "2019500",
    "end": "2026700"
  },
  {
    "text": "again because i didn't run my tests after i met a change but there we go to",
    "start": "2026700",
    "end": "2031740"
  },
  {
    "text": "test ran they both passed so I must have gotten a record back when I queried and",
    "start": "2031740",
    "end": "2037710"
  },
  {
    "text": "now that means i can go ahead and change the implementation of my query record function change my data structure to be",
    "start": "2037710",
    "end": "2045090"
  },
  {
    "text": "just a list search through my list return a row or a row of rows and my",
    "start": "2045090",
    "end": "2051720"
  },
  {
    "text": "test query record will make sure that least I'm getting something back well it just makes it easier to test functions",
    "start": "2051720",
    "end": "2058260"
  },
  {
    "text": "in isolation I think then against your whole program I'm not a big test driven fanatic and that i rarely as the first",
    "start": "2058260",
    "end": "2064408"
  },
  {
    "text": "step of writing my program write a bunch of tests where some people do but i do find it helpful and sometimes when i'm",
    "start": "2064409",
    "end": "2071898"
  },
  {
    "text": "confused or conflicted about exactly what it is that i'm trying to do writing the test forced me to say okay what is",
    "start": "2071899",
    "end": "2078300"
  },
  {
    "text": "it that I'm really trying to do in the end here what's my final result going to be what's the format going to be and",
    "start": "2078300",
    "end": "2084060"
  },
  {
    "text": "making those decisions in my test then clarifies my work of writing the rest of my code so unit test is useful both as a",
    "start": "2084060",
    "end": "2091710"
  },
  {
    "text": "way to test your code interactively write it and also as I'm a way to stop and think about it in a different way",
    "start": "2091710",
    "end": "2098100"
  },
  {
    "text": "rather than bang your head repeatedly against the same wall forever he you're frustrated with the progress and writing",
    "start": "2098100",
    "end": "2103770"
  },
  {
    "text": "code stop and write some tests really simple tests that fail and make sure that they pass and they can be really",
    "start": "2103770",
    "end": "2110190"
  },
  {
    "text": "simple tests will make sure they pass and you're just thinking about the problem domain in a different way and that's that's frequently useful least I",
    "start": "2110190",
    "end": "2116340"
  },
  {
    "text": "find it I find it frequently useful you",
    "start": "2116340",
    "end": "2120960"
  }
]