[
  {
    "text": "[Music]",
    "start": "3360",
    "end": "6550"
  },
  {
    "text": "hi",
    "start": "9840",
    "end": "10240"
  },
  {
    "text": "my name is toby and today i'm going to",
    "start": "10240",
    "end": "12240"
  },
  {
    "text": "talk about how project valhalla is",
    "start": "12240",
    "end": "14000"
  },
  {
    "text": "bringing performance to java developers",
    "start": "14000",
    "end": "17039"
  },
  {
    "text": "so a little bit about myself i'm a",
    "start": "17039",
    "end": "19279"
  },
  {
    "text": "developer on the open j9 vm team",
    "start": "19279",
    "end": "22400"
  },
  {
    "text": "based in ottawa canada in the past i've",
    "start": "22400",
    "end": "25439"
  },
  {
    "text": "worked on projects like jsr 335",
    "start": "25439",
    "end": "28080"
  },
  {
    "text": "modularity and currently i am um",
    "start": "28080",
    "end": "31519"
  },
  {
    "text": "part of the valhalla experts group where",
    "start": "31519",
    "end": "34480"
  },
  {
    "text": "i work with other developers",
    "start": "34480",
    "end": "35920"
  },
  {
    "text": "and collaborate on project valhalla",
    "start": "35920",
    "end": "39680"
  },
  {
    "text": "so the goal of today's presentation is",
    "start": "39680",
    "end": "42079"
  },
  {
    "text": "to answer four quick",
    "start": "42079",
    "end": "43440"
  },
  {
    "text": "four questions um what is project la",
    "start": "43440",
    "end": "46160"
  },
  {
    "text": "halla",
    "start": "46160",
    "end": "47680"
  },
  {
    "text": "what is the problem that is trying to",
    "start": "47680",
    "end": "49039"
  },
  {
    "text": "solve and then i'll introduce inline",
    "start": "49039",
    "end": "51039"
  },
  {
    "text": "types and show how",
    "start": "51039",
    "end": "52160"
  },
  {
    "text": "that solves these problems and then i'll",
    "start": "52160",
    "end": "53920"
  },
  {
    "text": "talk about the future of the project",
    "start": "53920",
    "end": "55760"
  },
  {
    "text": "valhalla and where it's going",
    "start": "55760",
    "end": "59440"
  },
  {
    "text": "so what is project valhalla project",
    "start": "59440",
    "end": "62160"
  },
  {
    "text": "valhalla is a",
    "start": "62160",
    "end": "63199"
  },
  {
    "text": "collaborative effort that's done in open",
    "start": "63199",
    "end": "65040"
  },
  {
    "text": "jdk",
    "start": "65040",
    "end": "67280"
  },
  {
    "text": "to summarize it i'll borrow a quote from",
    "start": "67280",
    "end": "69040"
  },
  {
    "text": "brian getz so the goal of project",
    "start": "69040",
    "end": "71040"
  },
  {
    "text": "valhalla is to bring more flexible",
    "start": "71040",
    "end": "73040"
  },
  {
    "text": "flattened data types to the jvm",
    "start": "73040",
    "end": "75040"
  },
  {
    "text": "languages",
    "start": "75040",
    "end": "76240"
  },
  {
    "text": "to bring the programming model back in",
    "start": "76240",
    "end": "78400"
  },
  {
    "text": "line with the performance",
    "start": "78400",
    "end": "79200"
  },
  {
    "text": "characteristics of modern hardware",
    "start": "79200",
    "end": "81840"
  },
  {
    "text": "so there are two main points here the",
    "start": "81840",
    "end": "84080"
  },
  {
    "text": "first is that there is currently a",
    "start": "84080",
    "end": "85680"
  },
  {
    "text": "shortcoming in the jvm",
    "start": "85680",
    "end": "87520"
  },
  {
    "text": "that doesn't allow the jvm to make the",
    "start": "87520",
    "end": "89280"
  },
  {
    "text": "most of modern hardware",
    "start": "89280",
    "end": "91040"
  },
  {
    "text": "and i'll discuss this in greater detail",
    "start": "91040",
    "end": "93920"
  },
  {
    "text": "um the next major point is that in order",
    "start": "93920",
    "end": "95840"
  },
  {
    "text": "to solve this problem we need to find a",
    "start": "95840",
    "end": "97680"
  },
  {
    "text": "way to express",
    "start": "97680",
    "end": "98720"
  },
  {
    "text": "flattened data types to the jvm",
    "start": "98720",
    "end": "102079"
  },
  {
    "text": "so that's basically the goal of project",
    "start": "102079",
    "end": "104399"
  },
  {
    "text": "la hallow",
    "start": "104399",
    "end": "105119"
  },
  {
    "text": "and this will be realized by a series of",
    "start": "105119",
    "end": "107840"
  },
  {
    "text": "japs",
    "start": "107840",
    "end": "108720"
  },
  {
    "text": "the main ones being inline types and",
    "start": "108720",
    "end": "111280"
  },
  {
    "text": "specialized genetics",
    "start": "111280",
    "end": "114479"
  },
  {
    "text": "so as the previous slide alluded to",
    "start": "114479",
    "end": "117200"
  },
  {
    "text": "currently the java type system doesn't",
    "start": "117200",
    "end": "118880"
  },
  {
    "text": "quite fit",
    "start": "118880",
    "end": "120159"
  },
  {
    "text": "well with the performance",
    "start": "120159",
    "end": "121119"
  },
  {
    "text": "characteristics of modern hardware",
    "start": "121119",
    "end": "123759"
  },
  {
    "text": "in the past couple decades cpus have",
    "start": "123759",
    "end": "125600"
  },
  {
    "text": "been able to do more",
    "start": "125600",
    "end": "127360"
  },
  {
    "text": "process more instructions per cycle than",
    "start": "127360",
    "end": "129039"
  },
  {
    "text": "ever however",
    "start": "129039",
    "end": "130959"
  },
  {
    "text": "memory latencies haven't improved as",
    "start": "130959",
    "end": "132800"
  },
  {
    "text": "much",
    "start": "132800",
    "end": "134800"
  },
  {
    "text": "so memory latency tends to be the",
    "start": "134800",
    "end": "137599"
  },
  {
    "text": "biggest bottleneck for",
    "start": "137599",
    "end": "138879"
  },
  {
    "text": "jeff application performance",
    "start": "138879",
    "end": "142000"
  },
  {
    "text": "here are some latency numbers from a",
    "start": "142000",
    "end": "143840"
  },
  {
    "text": "core i7",
    "start": "143840",
    "end": "145040"
  },
  {
    "text": "from 5th gen xeon",
    "start": "145040",
    "end": "148560"
  },
  {
    "text": "all of these numbers represent the",
    "start": "148560",
    "end": "149920"
  },
  {
    "text": "optimistic case so these are the best",
    "start": "149920",
    "end": "151840"
  },
  {
    "text": "case scenarios for",
    "start": "151840",
    "end": "153599"
  },
  {
    "text": "for the the memory",
    "start": "153599",
    "end": "156800"
  },
  {
    "text": "uh types so at the top um",
    "start": "156800",
    "end": "160000"
  },
  {
    "text": "we have registers um so it's typically a",
    "start": "160000",
    "end": "162160"
  },
  {
    "text": "single cycle",
    "start": "162160",
    "end": "163599"
  },
  {
    "text": "um and as you can see when you go down",
    "start": "163599",
    "end": "165920"
  },
  {
    "text": "to l1 l203",
    "start": "165920",
    "end": "167680"
  },
  {
    "text": "the the amount of time it takes to do",
    "start": "167680",
    "end": "170000"
  },
  {
    "text": "the memory load",
    "start": "170000",
    "end": "170879"
  },
  {
    "text": "um takes longer and when you go to ram",
    "start": "170879",
    "end": "174239"
  },
  {
    "text": "there's a this bit of a jump and there's",
    "start": "174239",
    "end": "176239"
  },
  {
    "text": "even bigger jump when you go to",
    "start": "176239",
    "end": "178239"
  },
  {
    "text": "ssd so basically this table shows that",
    "start": "178239",
    "end": "182480"
  },
  {
    "text": "it pays to have condensed data where",
    "start": "182480",
    "end": "184800"
  },
  {
    "text": "temporal and spatial locality",
    "start": "184800",
    "end": "186959"
  },
  {
    "text": "are aligned this basically means that",
    "start": "186959",
    "end": "189120"
  },
  {
    "text": "you want to have the data",
    "start": "189120",
    "end": "190400"
  },
  {
    "text": "that you'll access together to be stored",
    "start": "190400",
    "end": "192560"
  },
  {
    "text": "together to",
    "start": "192560",
    "end": "193680"
  },
  {
    "text": "to be stored in memory together as soon",
    "start": "193680",
    "end": "196239"
  },
  {
    "text": "as you have to move up to a higher tier",
    "start": "196239",
    "end": "198560"
  },
  {
    "text": "or a higher cash then you pay the",
    "start": "198560",
    "end": "201440"
  },
  {
    "text": "latency cost",
    "start": "201440",
    "end": "204239"
  },
  {
    "text": "so this is typically what a java heap",
    "start": "205599",
    "end": "207599"
  },
  {
    "text": "looks like",
    "start": "207599",
    "end": "208720"
  },
  {
    "text": "there's lots of references everywhere",
    "start": "208720",
    "end": "211519"
  },
  {
    "text": "lots of points are chasing",
    "start": "211519",
    "end": "212959"
  },
  {
    "text": "this is not very cache efficient because",
    "start": "212959",
    "end": "216000"
  },
  {
    "text": "objects are not necessarily positioned",
    "start": "216000",
    "end": "218799"
  },
  {
    "text": "spatially near each other",
    "start": "218799",
    "end": "220480"
  },
  {
    "text": "so you often have to jump between",
    "start": "220480",
    "end": "222239"
  },
  {
    "text": "different cache lines",
    "start": "222239",
    "end": "223840"
  },
  {
    "text": "to to load a field um",
    "start": "223840",
    "end": "227200"
  },
  {
    "text": "so with an object graph that looks like",
    "start": "227200",
    "end": "228720"
  },
  {
    "text": "this there's a high likelihood of cache",
    "start": "228720",
    "end": "230480"
  },
  {
    "text": "misses",
    "start": "230480",
    "end": "231519"
  },
  {
    "text": "um and which is detrimental to",
    "start": "231519",
    "end": "233840"
  },
  {
    "text": "performance as we saw in the chart",
    "start": "233840",
    "end": "235920"
  },
  {
    "text": "uh before this another problem with this",
    "start": "235920",
    "end": "239920"
  },
  {
    "text": "picture is that there's a lot of",
    "start": "239920",
    "end": "241439"
  },
  {
    "text": "object headers and that contributes to",
    "start": "241439",
    "end": "243680"
  },
  {
    "text": "footprints",
    "start": "243680",
    "end": "244640"
  },
  {
    "text": "a large footprint makes it less likely",
    "start": "244640",
    "end": "246480"
  },
  {
    "text": "that you'll be able to fit all the",
    "start": "246480",
    "end": "247840"
  },
  {
    "text": "related data in the same cache line",
    "start": "247840",
    "end": "250159"
  },
  {
    "text": "making cache misses more probable also",
    "start": "250159",
    "end": "253200"
  },
  {
    "text": "it means that",
    "start": "253200",
    "end": "254560"
  },
  {
    "text": "you're using more memory so you end up",
    "start": "254560",
    "end": "256880"
  },
  {
    "text": "having more gcs which also reduces",
    "start": "256880",
    "end": "259040"
  },
  {
    "text": "performance",
    "start": "259040",
    "end": "261120"
  },
  {
    "text": "so this is what project valhalla is",
    "start": "261120",
    "end": "262960"
  },
  {
    "text": "attempting to solve it's attempting to",
    "start": "262960",
    "end": "264639"
  },
  {
    "text": "fix this picture",
    "start": "264639",
    "end": "265919"
  },
  {
    "text": "and make it more hardware friendly",
    "start": "265919",
    "end": "269680"
  },
  {
    "text": "so the main solution to this problem is",
    "start": "269680",
    "end": "271280"
  },
  {
    "text": "flattening",
    "start": "271280",
    "end": "272960"
  },
  {
    "text": "this is where you take a reference field",
    "start": "272960",
    "end": "275360"
  },
  {
    "text": "and",
    "start": "275360",
    "end": "276000"
  },
  {
    "text": "place it within its structure so in",
    "start": "276000",
    "end": "277919"
  },
  {
    "text": "other words you flatten it within its",
    "start": "277919",
    "end": "279520"
  },
  {
    "text": "container",
    "start": "279520",
    "end": "280560"
  },
  {
    "text": "so here's a little example um we have",
    "start": "280560",
    "end": "283040"
  },
  {
    "text": "points that has two fields x and y",
    "start": "283040",
    "end": "285360"
  },
  {
    "text": "and with line which is composed of two",
    "start": "285360",
    "end": "287120"
  },
  {
    "text": "points um",
    "start": "287120",
    "end": "288880"
  },
  {
    "text": "when you flatten point within this",
    "start": "288880",
    "end": "290800"
  },
  {
    "text": "container you're essentially taking the",
    "start": "290800",
    "end": "292800"
  },
  {
    "text": "two points",
    "start": "292800",
    "end": "293759"
  },
  {
    "text": "and putting it within line as you can",
    "start": "293759",
    "end": "296240"
  },
  {
    "text": "see in this diagram",
    "start": "296240",
    "end": "297919"
  },
  {
    "text": "so on the left we have the the reference",
    "start": "297919",
    "end": "300720"
  },
  {
    "text": "layout and on the right we have the",
    "start": "300720",
    "end": "302800"
  },
  {
    "text": "flattened layout as you can see on the",
    "start": "302800",
    "end": "304880"
  },
  {
    "text": "right there's",
    "start": "304880",
    "end": "306000"
  },
  {
    "text": "less point to chasing well there's no",
    "start": "306000",
    "end": "307520"
  },
  {
    "text": "point to chasing this case because",
    "start": "307520",
    "end": "310320"
  },
  {
    "text": "the data is within the container",
    "start": "310320",
    "end": "313600"
  },
  {
    "text": "and there's less footprints because we",
    "start": "313600",
    "end": "316720"
  },
  {
    "text": "don't",
    "start": "316720",
    "end": "317199"
  },
  {
    "text": "need the headers for points and we don't",
    "start": "317199",
    "end": "320240"
  },
  {
    "text": "have the references",
    "start": "320240",
    "end": "321120"
  },
  {
    "text": "to point so this flattened",
    "start": "321120",
    "end": "323199"
  },
  {
    "text": "representation takes up less space",
    "start": "323199",
    "end": "326960"
  },
  {
    "text": "you can do something similar with arrays",
    "start": "327919",
    "end": "329919"
  },
  {
    "text": "so on the left we have",
    "start": "329919",
    "end": "332080"
  },
  {
    "text": "a point array and it has references to",
    "start": "332080",
    "end": "334560"
  },
  {
    "text": "each of the elements",
    "start": "334560",
    "end": "336000"
  },
  {
    "text": "on the right is a flattened",
    "start": "336000",
    "end": "337199"
  },
  {
    "text": "representation where each of the",
    "start": "337199",
    "end": "338720"
  },
  {
    "text": "elements are placed within the body of",
    "start": "338720",
    "end": "340639"
  },
  {
    "text": "the array",
    "start": "340639",
    "end": "342320"
  },
  {
    "text": "so this is a more performant way to",
    "start": "342320",
    "end": "345680"
  },
  {
    "text": "to represent arrays in memory",
    "start": "345680",
    "end": "349280"
  },
  {
    "text": "so what are inline types and how does it",
    "start": "350240",
    "end": "352639"
  },
  {
    "text": "help well",
    "start": "352639",
    "end": "353759"
  },
  {
    "text": "before we we dive into inline types i'll",
    "start": "353759",
    "end": "355919"
  },
  {
    "text": "first",
    "start": "355919",
    "end": "356960"
  },
  {
    "text": "motivate why we had the reference",
    "start": "356960",
    "end": "359600"
  },
  {
    "text": "problem",
    "start": "359600",
    "end": "360479"
  },
  {
    "text": "and i'll show how inline types solves",
    "start": "360479",
    "end": "362800"
  },
  {
    "text": "that problem",
    "start": "362800",
    "end": "365039"
  },
  {
    "text": "so one of the great things about the",
    "start": "365039",
    "end": "366720"
  },
  {
    "text": "java language is identity",
    "start": "366720",
    "end": "368960"
  },
  {
    "text": "identity is useful because it allows one",
    "start": "368960",
    "end": "371199"
  },
  {
    "text": "to keep track of state",
    "start": "371199",
    "end": "372880"
  },
  {
    "text": "a java object has identity so even if it",
    "start": "372880",
    "end": "375280"
  },
  {
    "text": "state mutates",
    "start": "375280",
    "end": "376240"
  },
  {
    "text": "it still remains the same object and",
    "start": "376240",
    "end": "378479"
  },
  {
    "text": "this is a very",
    "start": "378479",
    "end": "379440"
  },
  {
    "text": "appealing feature for software",
    "start": "379440",
    "end": "381039"
  },
  {
    "text": "developers which is why object-oriented",
    "start": "381039",
    "end": "383039"
  },
  {
    "text": "languages like java are very popular",
    "start": "383039",
    "end": "385840"
  },
  {
    "text": "it means you can perform identity",
    "start": "385840",
    "end": "387360"
  },
  {
    "text": "operations by acquiring a monitor in",
    "start": "387360",
    "end": "389600"
  },
  {
    "text": "any object however there are some cases",
    "start": "389600",
    "end": "393280"
  },
  {
    "text": "where",
    "start": "393280",
    "end": "394240"
  },
  {
    "text": "you don't need identity as the value of",
    "start": "394240",
    "end": "397199"
  },
  {
    "text": "the",
    "start": "397199",
    "end": "397520"
  },
  {
    "text": "object does not mutate within its",
    "start": "397520",
    "end": "399120"
  },
  {
    "text": "lifetime or if you're simply using an",
    "start": "399120",
    "end": "401440"
  },
  {
    "text": "object as a data carrier",
    "start": "401440",
    "end": "403600"
  },
  {
    "text": "but in these cases you still have to pay",
    "start": "403600",
    "end": "405280"
  },
  {
    "text": "the cost of identity",
    "start": "405280",
    "end": "408160"
  },
  {
    "text": "so one of the biggest challenges in",
    "start": "408160",
    "end": "409919"
  },
  {
    "text": "dealing with identity are references",
    "start": "409919",
    "end": "412400"
  },
  {
    "text": "in order to maintain a single view of an",
    "start": "412400",
    "end": "415360"
  },
  {
    "text": "object's state",
    "start": "415360",
    "end": "416319"
  },
  {
    "text": "you need to have a reference to the",
    "start": "416319",
    "end": "418240"
  },
  {
    "text": "object so everyone refers to the same",
    "start": "418240",
    "end": "420080"
  },
  {
    "text": "thing",
    "start": "420080",
    "end": "420960"
  },
  {
    "text": "so as a result references are everywhere",
    "start": "420960",
    "end": "422720"
  },
  {
    "text": "in jvm",
    "start": "422720",
    "end": "424160"
  },
  {
    "text": "when the jvm allocates an object it",
    "start": "424160",
    "end": "426400"
  },
  {
    "text": "returns a reference to that object",
    "start": "426400",
    "end": "428800"
  },
  {
    "text": "and when the object is pushed onto the",
    "start": "428800",
    "end": "430240"
  },
  {
    "text": "stack it is a reference to the object",
    "start": "430240",
    "end": "432560"
  },
  {
    "text": "that's",
    "start": "432560",
    "end": "433120"
  },
  {
    "text": "pushed on the stack as opposed to the",
    "start": "433120",
    "end": "434479"
  },
  {
    "text": "object itself",
    "start": "434479",
    "end": "436479"
  },
  {
    "text": "and if an object has object fields then",
    "start": "436479",
    "end": "439120"
  },
  {
    "text": "you",
    "start": "439120",
    "end": "439520"
  },
  {
    "text": "the fields themselves are references and",
    "start": "439520",
    "end": "443039"
  },
  {
    "text": "if it types a cache table which contains",
    "start": "443039",
    "end": "444800"
  },
  {
    "text": "an object array there are even more",
    "start": "444800",
    "end": "446080"
  },
  {
    "text": "references",
    "start": "446080",
    "end": "447280"
  },
  {
    "text": "and then in these cases you know the",
    "start": "447280",
    "end": "449520"
  },
  {
    "text": "elements themselves have more references",
    "start": "449520",
    "end": "452319"
  },
  {
    "text": "and eventually you end up with this",
    "start": "452319",
    "end": "454560"
  },
  {
    "text": "object graph that i showed you earlier",
    "start": "454560",
    "end": "457680"
  },
  {
    "text": "so the the solution to this",
    "start": "457680",
    "end": "461120"
  },
  {
    "text": "is inline types inline types are",
    "start": "461120",
    "end": "464400"
  },
  {
    "text": "essentially",
    "start": "464400",
    "end": "465199"
  },
  {
    "text": "objects that behave like primitives um",
    "start": "465199",
    "end": "468479"
  },
  {
    "text": "hence the tagline code circuit class and",
    "start": "468479",
    "end": "470160"
  },
  {
    "text": "works like an end",
    "start": "470160",
    "end": "471759"
  },
  {
    "text": "um the important part here is that it",
    "start": "471759",
    "end": "473440"
  },
  {
    "text": "works like in specifically the",
    "start": "473440",
    "end": "475360"
  },
  {
    "text": "performance aspects of nets",
    "start": "475360",
    "end": "479680"
  },
  {
    "text": "so inline types this is the current",
    "start": "479680",
    "end": "482240"
  },
  {
    "text": "working name",
    "start": "482240",
    "end": "483440"
  },
  {
    "text": "in the past it's been called value types",
    "start": "483440",
    "end": "486319"
  },
  {
    "text": "so it refers to the same thing",
    "start": "486319",
    "end": "490160"
  },
  {
    "text": "um so inline types have",
    "start": "490840",
    "end": "493440"
  },
  {
    "text": "three main characteristics the first one",
    "start": "493440",
    "end": "496080"
  },
  {
    "text": "is that they are identity less",
    "start": "496080",
    "end": "497599"
  },
  {
    "text": "as we saw in the previous slides",
    "start": "497599",
    "end": "499440"
  },
  {
    "text": "identity is the reason why we have",
    "start": "499440",
    "end": "501680"
  },
  {
    "text": "um a lot of references today",
    "start": "501680",
    "end": "505120"
  },
  {
    "text": "but inline types are identical to us so",
    "start": "505120",
    "end": "506960"
  },
  {
    "text": "a lot of those things we have to do to",
    "start": "506960",
    "end": "508879"
  },
  {
    "text": "preserve identity we don't have to do",
    "start": "508879",
    "end": "510560"
  },
  {
    "text": "anymore",
    "start": "510560",
    "end": "512080"
  },
  {
    "text": "identity less means that an instance",
    "start": "512080",
    "end": "515518"
  },
  {
    "text": "of the type which has the same content",
    "start": "515519",
    "end": "517839"
  },
  {
    "text": "is the indistinguishable",
    "start": "517839",
    "end": "519599"
  },
  {
    "text": "from all other instances of that type",
    "start": "519599",
    "end": "522080"
  },
  {
    "text": "with the same contents",
    "start": "522080",
    "end": "524959"
  },
  {
    "text": "so if it if the payload's the same it's",
    "start": "524959",
    "end": "527920"
  },
  {
    "text": "the same thing",
    "start": "527920",
    "end": "530000"
  },
  {
    "text": "immutability means that an instance",
    "start": "530000",
    "end": "532160"
  },
  {
    "text": "cannot change once it's been created so",
    "start": "532160",
    "end": "534000"
  },
  {
    "text": "once you create it that's it",
    "start": "534000",
    "end": "535440"
  },
  {
    "text": "for forever if you want it to change you",
    "start": "535440",
    "end": "538560"
  },
  {
    "text": "have to create a new",
    "start": "538560",
    "end": "539920"
  },
  {
    "text": "instance and flattenable means that the",
    "start": "539920",
    "end": "542720"
  },
  {
    "text": "jvm is free to embed",
    "start": "542720",
    "end": "544399"
  },
  {
    "text": "or inline a field within its container",
    "start": "544399",
    "end": "549839"
  },
  {
    "text": "so as you can see inline types have a",
    "start": "550080",
    "end": "552959"
  },
  {
    "text": "lot of the same characteristics as",
    "start": "552959",
    "end": "554640"
  },
  {
    "text": "primitive types",
    "start": "554640",
    "end": "555519"
  },
  {
    "text": "primitive types are immutable",
    "start": "555519",
    "end": "559200"
  },
  {
    "text": "they don't have identity so",
    "start": "559200",
    "end": "562720"
  },
  {
    "text": "one way of looking at inline types is",
    "start": "562720",
    "end": "564640"
  },
  {
    "text": "you know as",
    "start": "564640",
    "end": "565920"
  },
  {
    "text": "programmable primitives um",
    "start": "565920",
    "end": "569519"
  },
  {
    "text": "or you can think of them as restrictive",
    "start": "569519",
    "end": "571760"
  },
  {
    "text": "classes",
    "start": "571760",
    "end": "572880"
  },
  {
    "text": "so they work kind of like classes but",
    "start": "572880",
    "end": "576480"
  },
  {
    "text": "the restrictions make them more",
    "start": "576480",
    "end": "577680"
  },
  {
    "text": "performant than classes",
    "start": "577680",
    "end": "581360"
  },
  {
    "text": "so here is a little illustration uh",
    "start": "581360",
    "end": "584399"
  },
  {
    "text": "let's say we define a point with two",
    "start": "584399",
    "end": "586000"
  },
  {
    "text": "fields x and y and we define",
    "start": "586000",
    "end": "588000"
  },
  {
    "text": "a line with two point field start and",
    "start": "588000",
    "end": "589440"
  },
  {
    "text": "end just as in our previous example",
    "start": "589440",
    "end": "592160"
  },
  {
    "text": "the layout would look something like",
    "start": "592160",
    "end": "593440"
  },
  {
    "text": "this in today's world",
    "start": "593440",
    "end": "595920"
  },
  {
    "text": "but if you convert points to an inline",
    "start": "595920",
    "end": "598000"
  },
  {
    "text": "type instead of the disjointed layout we",
    "start": "598000",
    "end": "600560"
  },
  {
    "text": "have a contiguous layout",
    "start": "600560",
    "end": "602399"
  },
  {
    "text": "the two points are placed in line within",
    "start": "602399",
    "end": "605040"
  },
  {
    "text": "the line object",
    "start": "605040",
    "end": "606320"
  },
  {
    "text": "which means better footprints and better",
    "start": "606320",
    "end": "608720"
  },
  {
    "text": "cache locality",
    "start": "608720",
    "end": "610399"
  },
  {
    "text": "also um the two-point fields do not have",
    "start": "610399",
    "end": "613360"
  },
  {
    "text": "identity which means",
    "start": "613360",
    "end": "615760"
  },
  {
    "text": "they can benefit from better",
    "start": "615760",
    "end": "616880"
  },
  {
    "text": "optimizations by legit",
    "start": "616880",
    "end": "619360"
  },
  {
    "text": "so what changed how did we get all of",
    "start": "619360",
    "end": "621680"
  },
  {
    "text": "this improvement",
    "start": "621680",
    "end": "623120"
  },
  {
    "text": "well a single keyword was added",
    "start": "623120",
    "end": "626720"
  },
  {
    "text": "in red you can see inline this was",
    "start": "626720",
    "end": "629040"
  },
  {
    "text": "prepended",
    "start": "629040",
    "end": "630320"
  },
  {
    "text": "to the class definition and what this",
    "start": "630320",
    "end": "633279"
  },
  {
    "text": "does is it indicates that",
    "start": "633279",
    "end": "634560"
  },
  {
    "text": "that's this type is an inline type so",
    "start": "634560",
    "end": "637600"
  },
  {
    "text": "it means that the type is now",
    "start": "637600",
    "end": "638720"
  },
  {
    "text": "flattenable it's immutable and it's",
    "start": "638720",
    "end": "640800"
  },
  {
    "text": "identity less",
    "start": "640800",
    "end": "643519"
  },
  {
    "text": "and then we get all the benefits that we",
    "start": "644160",
    "end": "646000"
  },
  {
    "text": "want",
    "start": "646000",
    "end": "648240"
  },
  {
    "text": "so um so some of the other",
    "start": "648320",
    "end": "651600"
  },
  {
    "text": "characteristics",
    "start": "651600",
    "end": "652880"
  },
  {
    "text": "of inline types uh we've seen that",
    "start": "652880",
    "end": "655279"
  },
  {
    "text": "they're immutable i think less than",
    "start": "655279",
    "end": "656720"
  },
  {
    "text": "flattenable",
    "start": "656720",
    "end": "657680"
  },
  {
    "text": "but they can also define methods so",
    "start": "657680",
    "end": "660480"
  },
  {
    "text": "unlike primitive types",
    "start": "660480",
    "end": "662560"
  },
  {
    "text": "which needs to be boxed to the object's",
    "start": "662560",
    "end": "666079"
  },
  {
    "text": "equivalence in order to call methods in",
    "start": "666079",
    "end": "667839"
  },
  {
    "text": "them inline types don't need this",
    "start": "667839",
    "end": "670160"
  },
  {
    "text": "you can define methods and we can call",
    "start": "670160",
    "end": "672000"
  },
  {
    "text": "methods in them directly",
    "start": "672000",
    "end": "674000"
  },
  {
    "text": "they can implement interfaces they can",
    "start": "674000",
    "end": "677360"
  },
  {
    "text": "implement abstract classes with some",
    "start": "677360",
    "end": "679680"
  },
  {
    "text": "restrictions",
    "start": "679680",
    "end": "681200"
  },
  {
    "text": "these abstract classes cannot have any",
    "start": "681200",
    "end": "684480"
  },
  {
    "text": "fields and they need to have an empty",
    "start": "684480",
    "end": "688880"
  },
  {
    "text": "init method um they subclass object",
    "start": "688880",
    "end": "693600"
  },
  {
    "text": "and they also support the object apis",
    "start": "693600",
    "end": "697120"
  },
  {
    "text": "like equals to string but their behavior",
    "start": "697120",
    "end": "700079"
  },
  {
    "text": "is a little different because they",
    "start": "700079",
    "end": "702240"
  },
  {
    "text": "they don't have identity",
    "start": "702240",
    "end": "705440"
  },
  {
    "text": "um so inline types are great because",
    "start": "705839",
    "end": "709120"
  },
  {
    "text": "they allow you to define",
    "start": "709120",
    "end": "710560"
  },
  {
    "text": "data aggregates however there are some",
    "start": "710560",
    "end": "712399"
  },
  {
    "text": "tradeoffs",
    "start": "712399",
    "end": "713600"
  },
  {
    "text": "when using inline types as i said",
    "start": "713600",
    "end": "716560"
  },
  {
    "text": "earlier you can kind of think of them",
    "start": "716560",
    "end": "718160"
  },
  {
    "text": "as restricted classes so inline types",
    "start": "718160",
    "end": "721600"
  },
  {
    "text": "cannot be subclassed",
    "start": "721600",
    "end": "723200"
  },
  {
    "text": "since an inline type may be flattened",
    "start": "723200",
    "end": "725360"
  },
  {
    "text": "within this container",
    "start": "725360",
    "end": "727600"
  },
  {
    "text": "allowing inline types to be subclass",
    "start": "727600",
    "end": "729600"
  },
  {
    "text": "would mean that",
    "start": "729600",
    "end": "731279"
  },
  {
    "text": "a flattenable type may have variable",
    "start": "731279",
    "end": "734639"
  },
  {
    "text": "size storage",
    "start": "734639",
    "end": "736079"
  },
  {
    "text": "so for this reason it's not allowed",
    "start": "736079",
    "end": "738880"
  },
  {
    "text": "since inline types are identity less",
    "start": "738880",
    "end": "740720"
  },
  {
    "text": "you can't perform any identity",
    "start": "740720",
    "end": "742480"
  },
  {
    "text": "operations on them like",
    "start": "742480",
    "end": "744000"
  },
  {
    "text": "synchronizing on them or defining",
    "start": "744000",
    "end": "746560"
  },
  {
    "text": "instance",
    "start": "746560",
    "end": "747760"
  },
  {
    "text": "synchronized methods and line types also",
    "start": "747760",
    "end": "751200"
  },
  {
    "text": "do not",
    "start": "751200",
    "end": "751680"
  },
  {
    "text": "implement cloneable since inline types",
    "start": "751680",
    "end": "755600"
  },
  {
    "text": "are identity-less cloning is",
    "start": "755600",
    "end": "758480"
  },
  {
    "text": "inconsequential",
    "start": "758480",
    "end": "759600"
  },
  {
    "text": "it's it's like trying to clone a",
    "start": "759600",
    "end": "761200"
  },
  {
    "text": "primitive",
    "start": "761200",
    "end": "762720"
  },
  {
    "text": "um similarly they can't define",
    "start": "762720",
    "end": "765440"
  },
  {
    "text": "finalizers",
    "start": "765440",
    "end": "766320"
  },
  {
    "text": "since finalization is a mechanism tied",
    "start": "766320",
    "end": "769120"
  },
  {
    "text": "to the lifetime",
    "start": "769120",
    "end": "770160"
  },
  {
    "text": "of uh of an instance and since inline",
    "start": "770160",
    "end": "773200"
  },
  {
    "text": "types don't have identity they don't",
    "start": "773200",
    "end": "774480"
  },
  {
    "text": "have lifetimes",
    "start": "774480",
    "end": "776000"
  },
  {
    "text": "um so the the concept of finalization",
    "start": "776000",
    "end": "779600"
  },
  {
    "text": "doesn't work",
    "start": "779600",
    "end": "780320"
  },
  {
    "text": "with inline types",
    "start": "780320",
    "end": "783440"
  },
  {
    "text": "so as previously mentioned inline types",
    "start": "784800",
    "end": "787440"
  },
  {
    "text": "are flattenable which means they can be",
    "start": "787440",
    "end": "788880"
  },
  {
    "text": "flattened within the container",
    "start": "788880",
    "end": "790639"
  },
  {
    "text": "um as a consequence of flattening uh",
    "start": "790639",
    "end": "794000"
  },
  {
    "text": "inline types are not nullable",
    "start": "794000",
    "end": "797200"
  },
  {
    "text": "meaning that you cannot assign null to",
    "start": "797200",
    "end": "799600"
  },
  {
    "text": "an inline",
    "start": "799600",
    "end": "800480"
  },
  {
    "text": "type container when",
    "start": "800480",
    "end": "803519"
  },
  {
    "text": "when the field is flattened all the data",
    "start": "803519",
    "end": "805519"
  },
  {
    "text": "is used to represent",
    "start": "805519",
    "end": "807680"
  },
  {
    "text": "the the bytes of the instance",
    "start": "807680",
    "end": "810720"
  },
  {
    "text": "so there's no way to represent null",
    "start": "810720",
    "end": "812639"
  },
  {
    "text": "since an all",
    "start": "812639",
    "end": "813760"
  },
  {
    "text": "zero memory",
    "start": "813760",
    "end": "817279"
  },
  {
    "text": "is a is a valid instance of the type",
    "start": "817279",
    "end": "821040"
  },
  {
    "text": "all the bits are used up to represent",
    "start": "821040",
    "end": "822639"
  },
  {
    "text": "the data essentially",
    "start": "822639",
    "end": "825120"
  },
  {
    "text": "in addition inline type cannot inline",
    "start": "825120",
    "end": "827199"
  },
  {
    "text": "types cannot have",
    "start": "827199",
    "end": "828160"
  },
  {
    "text": "instance fields that refer to themselves",
    "start": "828160",
    "end": "830639"
  },
  {
    "text": "either directly",
    "start": "830639",
    "end": "831760"
  },
  {
    "text": "or indirectly since an inline type may",
    "start": "831760",
    "end": "834639"
  },
  {
    "text": "be flattened",
    "start": "834639",
    "end": "835680"
  },
  {
    "text": "it's impossible to determine the",
    "start": "835680",
    "end": "838399"
  },
  {
    "text": "flattened layout of an inline type that",
    "start": "838399",
    "end": "840000"
  },
  {
    "text": "recursively defines itself",
    "start": "840000",
    "end": "842959"
  },
  {
    "text": "so for that reason it's not allowed also",
    "start": "842959",
    "end": "845920"
  },
  {
    "text": "flatten fields are pre-loaded",
    "start": "845920",
    "end": "848160"
  },
  {
    "text": "so loaded before the the container",
    "start": "848160",
    "end": "851519"
  },
  {
    "text": "as you need to know the size of the",
    "start": "851519",
    "end": "852959"
  },
  {
    "text": "field before you can create an instance",
    "start": "852959",
    "end": "854880"
  },
  {
    "text": "of the container",
    "start": "854880",
    "end": "856000"
  },
  {
    "text": "so this is very similar to pre-loading a",
    "start": "856000",
    "end": "859040"
  },
  {
    "text": "super class",
    "start": "859040",
    "end": "859920"
  },
  {
    "text": "or interfaces before loading the type",
    "start": "859920",
    "end": "864480"
  },
  {
    "text": "so these are some of the restrictions",
    "start": "864560",
    "end": "867360"
  },
  {
    "text": "but at the end of the day it's the jvm",
    "start": "867360",
    "end": "869360"
  },
  {
    "text": "that",
    "start": "869360",
    "end": "869760"
  },
  {
    "text": "determines whether the field is",
    "start": "869760",
    "end": "872320"
  },
  {
    "text": "flattened or not",
    "start": "872320",
    "end": "873440"
  },
  {
    "text": "um the jvm will attempt to flatten as",
    "start": "873440",
    "end": "876000"
  },
  {
    "text": "much as possible",
    "start": "876000",
    "end": "877040"
  },
  {
    "text": "as much as it's beneficial however if",
    "start": "877040",
    "end": "879760"
  },
  {
    "text": "the",
    "start": "879760",
    "end": "880160"
  },
  {
    "text": "the type is too large that it's too",
    "start": "880160",
    "end": "882560"
  },
  {
    "text": "difficult to allocate the type",
    "start": "882560",
    "end": "884320"
  },
  {
    "text": "or the particular architecture that's",
    "start": "884320",
    "end": "887199"
  },
  {
    "text": "being run on doesn't have",
    "start": "887199",
    "end": "888320"
  },
  {
    "text": "large enough registers to to load the",
    "start": "888320",
    "end": "890720"
  },
  {
    "text": "type efficiently",
    "start": "890720",
    "end": "892240"
  },
  {
    "text": "then the jvm may decide to not flatten",
    "start": "892240",
    "end": "896800"
  },
  {
    "text": "it",
    "start": "896839",
    "end": "898000"
  },
  {
    "text": "so um let's look at how the",
    "start": "898000",
    "end": "901040"
  },
  {
    "text": "java hierarchy uh looks like with",
    "start": "901040",
    "end": "904160"
  },
  {
    "text": "inline types so at the top is javalink",
    "start": "904160",
    "end": "907040"
  },
  {
    "text": "object",
    "start": "907040",
    "end": "908560"
  },
  {
    "text": "and to the left we have inline types",
    "start": "908560",
    "end": "910959"
  },
  {
    "text": "this is the new types that were",
    "start": "910959",
    "end": "912399"
  },
  {
    "text": "introduced",
    "start": "912399",
    "end": "913440"
  },
  {
    "text": "and to the right there's a new interface",
    "start": "913440",
    "end": "916000"
  },
  {
    "text": "called identity object",
    "start": "916000",
    "end": "917680"
  },
  {
    "text": "now this is the current working name um",
    "start": "917680",
    "end": "919839"
  },
  {
    "text": "what it'll be called in the future is",
    "start": "919839",
    "end": "921199"
  },
  {
    "text": "still",
    "start": "921199",
    "end": "921600"
  },
  {
    "text": "up for debate but essentially all types",
    "start": "921600",
    "end": "924560"
  },
  {
    "text": "today",
    "start": "924560",
    "end": "925760"
  },
  {
    "text": "that currently subclass javelin",
    "start": "925760",
    "end": "928880"
  },
  {
    "text": "object will um will now",
    "start": "928880",
    "end": "932000"
  },
  {
    "text": "implement the identity object interface",
    "start": "932000",
    "end": "934240"
  },
  {
    "text": "and this is to",
    "start": "934240",
    "end": "935600"
  },
  {
    "text": "distinguish them from identity less",
    "start": "935600",
    "end": "938560"
  },
  {
    "text": "inline types",
    "start": "938560",
    "end": "940399"
  },
  {
    "text": "so in cases where you need to know",
    "start": "940399",
    "end": "943759"
  },
  {
    "text": "if it's safe to perform an identity",
    "start": "943759",
    "end": "945519"
  },
  {
    "text": "sensitive operation",
    "start": "945519",
    "end": "946880"
  },
  {
    "text": "there will be an interface that will",
    "start": "946880",
    "end": "948399"
  },
  {
    "text": "indicate whether these operations",
    "start": "948399",
    "end": "950959"
  },
  {
    "text": "are supported or not to the right we",
    "start": "950959",
    "end": "954320"
  },
  {
    "text": "have primitives",
    "start": "954320",
    "end": "955839"
  },
  {
    "text": "um so primitives are are separate there",
    "start": "955839",
    "end": "958560"
  },
  {
    "text": "are distinct types today",
    "start": "958560",
    "end": "960000"
  },
  {
    "text": "they don't really play nicely with the",
    "start": "960000",
    "end": "961920"
  },
  {
    "text": "rest of the java world",
    "start": "961920",
    "end": "963519"
  },
  {
    "text": "if you want to use them with generics",
    "start": "963519",
    "end": "965680"
  },
  {
    "text": "for example you you have to box it to",
    "start": "965680",
    "end": "968000"
  },
  {
    "text": "the",
    "start": "968000",
    "end": "969040"
  },
  {
    "text": "to the container type um",
    "start": "969040",
    "end": "973279"
  },
  {
    "text": "so they're they're very difficult to use",
    "start": "973279",
    "end": "975680"
  },
  {
    "text": "but",
    "start": "975680",
    "end": "976399"
  },
  {
    "text": "one of the goals of valhalla is bridge",
    "start": "976399",
    "end": "980000"
  },
  {
    "text": "bridging the gap between primitives and",
    "start": "980000",
    "end": "981839"
  },
  {
    "text": "the rest of the genre",
    "start": "981839",
    "end": "983600"
  },
  {
    "text": "so in the future there are there are",
    "start": "983600",
    "end": "986320"
  },
  {
    "text": "plans to",
    "start": "986320",
    "end": "987839"
  },
  {
    "text": "um convert primitives to be inline types",
    "start": "987839",
    "end": "991120"
  },
  {
    "text": "and once this is done then the",
    "start": "991120",
    "end": "993680"
  },
  {
    "text": "everything kind of fits nicely",
    "start": "993680",
    "end": "995360"
  },
  {
    "text": "together",
    "start": "995360",
    "end": "997839"
  },
  {
    "text": "so with inline types there are two new",
    "start": "999519",
    "end": "1001600"
  },
  {
    "text": "bytecodes introduced",
    "start": "1001600",
    "end": "1003440"
  },
  {
    "text": "the first is default value so this is a",
    "start": "1003440",
    "end": "1006480"
  },
  {
    "text": "lot like the new bytecode",
    "start": "1006480",
    "end": "1008959"
  },
  {
    "text": "for creating identity types a default",
    "start": "1008959",
    "end": "1012160"
  },
  {
    "text": "value creates an inline type and sets",
    "start": "1012160",
    "end": "1014079"
  },
  {
    "text": "all the fields to zero",
    "start": "1014079",
    "end": "1015920"
  },
  {
    "text": "so all primitives are zero all",
    "start": "1015920",
    "end": "1017600"
  },
  {
    "text": "references are null",
    "start": "1017600",
    "end": "1020240"
  },
  {
    "text": "and default value always produces an",
    "start": "1020240",
    "end": "1022959"
  },
  {
    "text": "instantiated",
    "start": "1022959",
    "end": "1024240"
  },
  {
    "text": "an initialized instance so unlike the",
    "start": "1024240",
    "end": "1027199"
  },
  {
    "text": "new bytecode where you have to do the",
    "start": "1027199",
    "end": "1028558"
  },
  {
    "text": "new",
    "start": "1028559",
    "end": "1029438"
  },
  {
    "text": "dupe init sequence default value is",
    "start": "1029439",
    "end": "1032079"
  },
  {
    "text": "sufficient",
    "start": "1032079",
    "end": "1032798"
  },
  {
    "text": "to create an initialized",
    "start": "1032799",
    "end": "1036558"
  },
  {
    "text": "uh instance of a value type the other",
    "start": "1037039",
    "end": "1040079"
  },
  {
    "text": "byte code is with field so as i said",
    "start": "1040079",
    "end": "1042959"
  },
  {
    "text": "earlier",
    "start": "1042959",
    "end": "1043760"
  },
  {
    "text": "inline types are immutable which means",
    "start": "1043760",
    "end": "1045600"
  },
  {
    "text": "you can't change the field",
    "start": "1045600",
    "end": "1047280"
  },
  {
    "text": "um so in order to you know effectively",
    "start": "1047280",
    "end": "1051840"
  },
  {
    "text": "update an inline type you have to create",
    "start": "1051840",
    "end": "1053520"
  },
  {
    "text": "a new one with a",
    "start": "1053520",
    "end": "1055120"
  },
  {
    "text": "with a new value so with fields takes an",
    "start": "1055120",
    "end": "1057120"
  },
  {
    "text": "existing",
    "start": "1057120",
    "end": "1058160"
  },
  {
    "text": "inline type and creates a new one with",
    "start": "1058160",
    "end": "1060400"
  },
  {
    "text": "an updated field",
    "start": "1060400",
    "end": "1063360"
  },
  {
    "text": "so now we'll take a look at some of the",
    "start": "1065120",
    "end": "1067200"
  },
  {
    "text": "some examples",
    "start": "1067200",
    "end": "1068320"
  },
  {
    "text": "um of how of what what it's like to",
    "start": "1068320",
    "end": "1071360"
  },
  {
    "text": "program with inline types",
    "start": "1071360",
    "end": "1072960"
  },
  {
    "text": "um their characteristics make them",
    "start": "1072960",
    "end": "1076240"
  },
  {
    "text": "um subtly different from uh",
    "start": "1076240",
    "end": "1079600"
  },
  {
    "text": "from reference type state and there are",
    "start": "1079600",
    "end": "1082160"
  },
  {
    "text": "some cases where",
    "start": "1082160",
    "end": "1083520"
  },
  {
    "text": "um it might be a surprise to users um",
    "start": "1083520",
    "end": "1086480"
  },
  {
    "text": "one of these cases deal with nullability",
    "start": "1086480",
    "end": "1089360"
  },
  {
    "text": "so when when you create an array um",
    "start": "1089360",
    "end": "1092160"
  },
  {
    "text": "today",
    "start": "1092160",
    "end": "1093120"
  },
  {
    "text": "um you the array",
    "start": "1093120",
    "end": "1096160"
  },
  {
    "text": "elements are initialized to null so",
    "start": "1096160",
    "end": "1099600"
  },
  {
    "text": "writing code like this um you'd expect",
    "start": "1099600",
    "end": "1101760"
  },
  {
    "text": "that as soon as you create the array",
    "start": "1101760",
    "end": "1103919"
  },
  {
    "text": "um if you do a null check on the element",
    "start": "1103919",
    "end": "1109120"
  },
  {
    "text": "you you expect that the element is null",
    "start": "1109120",
    "end": "1111919"
  },
  {
    "text": "but with inline types",
    "start": "1111919",
    "end": "1113360"
  },
  {
    "text": "when you create an array since inline",
    "start": "1113360",
    "end": "1115840"
  },
  {
    "text": "types are not nullable",
    "start": "1115840",
    "end": "1117600"
  },
  {
    "text": "as soon as you create the array all the",
    "start": "1117600",
    "end": "1119360"
  },
  {
    "text": "elements are initialized to a valid",
    "start": "1119360",
    "end": "1121760"
  },
  {
    "text": "inline site",
    "start": "1121760",
    "end": "1122960"
  },
  {
    "text": "so if you wrote code like this it",
    "start": "1122960",
    "end": "1125120"
  },
  {
    "text": "wouldn't behave as you expected it to",
    "start": "1125120",
    "end": "1129120"
  },
  {
    "text": "um here's another example",
    "start": "1129120",
    "end": "1133200"
  },
  {
    "text": "there are a lot of apis today that",
    "start": "1133200",
    "end": "1134640"
  },
  {
    "text": "accept types like object array or object",
    "start": "1134640",
    "end": "1137760"
  },
  {
    "text": "and um today all",
    "start": "1137760",
    "end": "1141120"
  },
  {
    "text": "all um all types of subclass objects are",
    "start": "1141120",
    "end": "1145120"
  },
  {
    "text": "nullable",
    "start": "1145120",
    "end": "1146480"
  },
  {
    "text": "so you can assign and alter them but",
    "start": "1146480",
    "end": "1148400"
  },
  {
    "text": "with inline types that's not true so in",
    "start": "1148400",
    "end": "1150240"
  },
  {
    "text": "this example we have a method",
    "start": "1150240",
    "end": "1152000"
  },
  {
    "text": "accepts an object array and then um",
    "start": "1152000",
    "end": "1155120"
  },
  {
    "text": "writes null to the first element um with",
    "start": "1155120",
    "end": "1157840"
  },
  {
    "text": "inline types you could potentially get a",
    "start": "1157840",
    "end": "1159679"
  },
  {
    "text": "null pointer exception",
    "start": "1159679",
    "end": "1160880"
  },
  {
    "text": "since it's illegal to write null to to",
    "start": "1160880",
    "end": "1163760"
  },
  {
    "text": "an inline type array",
    "start": "1163760",
    "end": "1166080"
  },
  {
    "text": "so these are these are some of the",
    "start": "1166080",
    "end": "1167679"
  },
  {
    "text": "issues that can occur",
    "start": "1167679",
    "end": "1169120"
  },
  {
    "text": "uh when using inline types",
    "start": "1169120",
    "end": "1172720"
  },
  {
    "text": "so there are cases where an indirection",
    "start": "1172960",
    "end": "1174880"
  },
  {
    "text": "may be useful",
    "start": "1174880",
    "end": "1176320"
  },
  {
    "text": "one might need to create a type that",
    "start": "1176320",
    "end": "1177919"
  },
  {
    "text": "refers to itself as in this example",
    "start": "1177919",
    "end": "1180640"
  },
  {
    "text": "or you might want to assign null but as",
    "start": "1180640",
    "end": "1183360"
  },
  {
    "text": "i said",
    "start": "1183360",
    "end": "1183840"
  },
  {
    "text": "inline types are not nullable so there",
    "start": "1183840",
    "end": "1186640"
  },
  {
    "text": "is",
    "start": "1186640",
    "end": "1186880"
  },
  {
    "text": "one option um the option is to use a",
    "start": "1186880",
    "end": "1189679"
  },
  {
    "text": "reference projection",
    "start": "1189679",
    "end": "1191280"
  },
  {
    "text": "it's effectively the box of an inline",
    "start": "1191280",
    "end": "1193919"
  },
  {
    "text": "type",
    "start": "1193919",
    "end": "1194640"
  },
  {
    "text": "but it's not really a box because a",
    "start": "1194640",
    "end": "1197280"
  },
  {
    "text": "reference",
    "start": "1197280",
    "end": "1197760"
  },
  {
    "text": "projection simply means that the",
    "start": "1197760",
    "end": "1199600"
  },
  {
    "text": "container can contain null",
    "start": "1199600",
    "end": "1201440"
  },
  {
    "text": "or an inline type so unlike primitive",
    "start": "1201440",
    "end": "1203840"
  },
  {
    "text": "boxing where you have to create a new",
    "start": "1203840",
    "end": "1205280"
  },
  {
    "text": "instance",
    "start": "1205280",
    "end": "1206320"
  },
  {
    "text": "with an inline reference projection",
    "start": "1206320",
    "end": "1208480"
  },
  {
    "text": "you're not creating a new instance",
    "start": "1208480",
    "end": "1209840"
  },
  {
    "text": "you're",
    "start": "1209840",
    "end": "1210720"
  },
  {
    "text": "simply using a projection of an inline",
    "start": "1210720",
    "end": "1213039"
  },
  {
    "text": "type",
    "start": "1213039",
    "end": "1214159"
  },
  {
    "text": "so it's a much more performant model",
    "start": "1214159",
    "end": "1217760"
  },
  {
    "text": "so what is the future of valhalla we",
    "start": "1217760",
    "end": "1220559"
  },
  {
    "text": "looked at inline types and how it can be",
    "start": "1220559",
    "end": "1222159"
  },
  {
    "text": "a great benefit to performance",
    "start": "1222159",
    "end": "1224000"
  },
  {
    "text": "however we still need to solve the issue",
    "start": "1224000",
    "end": "1226480"
  },
  {
    "text": "with genetics as",
    "start": "1226480",
    "end": "1227760"
  },
  {
    "text": "these are very common use types",
    "start": "1227760",
    "end": "1231360"
  },
  {
    "text": "so in today's world when we want to",
    "start": "1231360",
    "end": "1233600"
  },
  {
    "text": "write generic code",
    "start": "1233600",
    "end": "1234640"
  },
  {
    "text": "with an int it looks something like this",
    "start": "1234640",
    "end": "1237840"
  },
  {
    "text": "ideally we want to get to this picture",
    "start": "1237840",
    "end": "1242080"
  },
  {
    "text": "so today there's there's been a lot of",
    "start": "1242559",
    "end": "1245280"
  },
  {
    "text": "prototype work but",
    "start": "1245280",
    "end": "1247039"
  },
  {
    "text": "um nothing concrete this will likely",
    "start": "1247039",
    "end": "1250720"
  },
  {
    "text": "be released after inline types",
    "start": "1250720",
    "end": "1254400"
  },
  {
    "text": "but this is something that um",
    "start": "1254400",
    "end": "1257600"
  },
  {
    "text": "that the expert group wants to wants to",
    "start": "1257600",
    "end": "1260159"
  },
  {
    "text": "look at",
    "start": "1260159",
    "end": "1260720"
  },
  {
    "text": "in the future so here's the road map",
    "start": "1260720",
    "end": "1264799"
  },
  {
    "text": "lw3 this is where we are now lw10 will",
    "start": "1264799",
    "end": "1268000"
  },
  {
    "text": "be the first release of inline types and",
    "start": "1268000",
    "end": "1270159"
  },
  {
    "text": "lw 100 will be",
    "start": "1270159",
    "end": "1271919"
  },
  {
    "text": "the release of specialized generics now",
    "start": "1271919",
    "end": "1274080"
  },
  {
    "text": "there will be many releases in between",
    "start": "1274080",
    "end": "1275679"
  },
  {
    "text": "those",
    "start": "1275679",
    "end": "1276000"
  },
  {
    "text": "but those kind of serve as markers for",
    "start": "1276000",
    "end": "1278960"
  },
  {
    "text": "uh the major releases",
    "start": "1278960",
    "end": "1281840"
  },
  {
    "text": "so this concludes my presentation um i",
    "start": "1281840",
    "end": "1284640"
  },
  {
    "text": "hope you guys have all",
    "start": "1284640",
    "end": "1286400"
  },
  {
    "text": "um learned something new about project",
    "start": "1286400",
    "end": "1288720"
  },
  {
    "text": "valhalla today and",
    "start": "1288720",
    "end": "1290240"
  },
  {
    "text": "i'll be able to take any questions",
    "start": "1290240",
    "end": "1295760"
  }
]