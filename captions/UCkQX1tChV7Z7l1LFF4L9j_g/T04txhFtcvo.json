[
  {
    "text": "[Music]",
    "start": "3350",
    "end": "14249"
  },
  {
    "text": "good morning everyone I'm honored to be here and today I'll be talking about Amazon",
    "start": "15599",
    "end": "22199"
  },
  {
    "text": "Dynamo DV distributed transactions so let's start with a poll",
    "start": "22199",
    "end": "27439"
  },
  {
    "text": "a little poll how many of you have written applications that use a cloud",
    "start": "27439",
    "end": "35320"
  },
  {
    "text": "database pretty good uh I expected this number to be high as I see in the room",
    "start": "35320",
    "end": "41920"
  },
  {
    "text": "how many of you have written applications that could that use a cloud database that is not a relational",
    "start": "41920",
    "end": "48760"
  },
  {
    "text": "database specifically no SQL databases okay 50% of the room and how",
    "start": "48760",
    "end": "54199"
  },
  {
    "text": "many of you who have used noo database wished that you could use Atomic transactions with the no SQL",
    "start": "54199",
    "end": "61719"
  },
  {
    "text": "database that is pretty good that's almost 100% of those 50% who",
    "start": "61719",
    "end": "68119"
  },
  {
    "text": "wanted transactions so in this talk what I want to do is I want to explore why are transactions considered",
    "start": "68119",
    "end": "76119"
  },
  {
    "text": "at odd with scalability and then I want to further",
    "start": "76119",
    "end": "81200"
  },
  {
    "text": "explore that can we have a distributed no SQL database system that has all the",
    "start": "81200",
    "end": "86759"
  },
  {
    "text": "properties of you know scalability performance why people love is no SQL databases so can we have both can we",
    "start": "86759",
    "end": "93520"
  },
  {
    "text": "support transaction and still maintain those you know features that that uh exist in no SQL databases and throughout",
    "start": "93520",
    "end": "99880"
  },
  {
    "text": "this talk I'll walk you through the Journey of how we added distributed transactions",
    "start": "99880",
    "end": "106000"
  },
  {
    "text": "to uh Dynamo DB so with that let's jump",
    "start": "106000",
    "end": "114600"
  },
  {
    "text": "into the talk so as you all are noticing",
    "start": "114600",
    "end": "119640"
  },
  {
    "text": "and these Trends are also like public databases are moving to the cloud at a very fast rate and established companies",
    "start": "119640",
    "end": "127320"
  },
  {
    "text": "are moving their you know on premise databases to the cloud um similar to",
    "start": "127320",
    "end": "133560"
  },
  {
    "text": "that you know startup companies are basing their business entirely on the",
    "start": "133560",
    "end": "139280"
  },
  {
    "text": "cloud from day one so and why is it happening why is that why is that Trend",
    "start": "139280",
    "end": "144560"
  },
  {
    "text": "because you know the benefits of running your application on the cloud are just compelling Cloud databases you",
    "start": "144560",
    "end": "152280"
  },
  {
    "text": "get fully managed experience you don't have to worry about servers you don't have to manage you don't have to order",
    "start": "152280",
    "end": "158239"
  },
  {
    "text": "capacity right um that frees up frees you up from any of the burden that you",
    "start": "158239",
    "end": "165519"
  },
  {
    "text": "had to manage infrastructure and then as your database",
    "start": "165519",
    "end": "170800"
  },
  {
    "text": "runs on the cloud you get the elasticity and pay as you go model where you know",
    "start": "170800",
    "end": "176040"
  },
  {
    "text": "you can use the database for the amount for the duration whenever you know you",
    "start": "176040",
    "end": "181440"
  },
  {
    "text": "expect the peak to hit on your database you use the database to that Peak capacity and then dial down the capacity",
    "start": "181440",
    "end": "188640"
  },
  {
    "text": "when you actually don't don't need it right in short Cloud databases they offer a lot of",
    "start": "188640",
    "end": "195080"
  },
  {
    "text": "agility that modern applications demand especially when it comes to",
    "start": "195080",
    "end": "202480"
  },
  {
    "text": "managing the data that drives Innovation so when you think about like",
    "start": "202480",
    "end": "209799"
  },
  {
    "text": "like no SQL databases so what is it that that attracts people towards no SQL",
    "start": "209799",
    "end": "215599"
  },
  {
    "text": "databases and I've taken dynamodb as an example here so no SQL",
    "start": "215599",
    "end": "221640"
  },
  {
    "text": "databases such as Dynamo DB you get a very simple interface where you can use",
    "start": "221640",
    "end": "227080"
  },
  {
    "text": "a simple API to create a table and then you have a bunch of operations that you",
    "start": "227080",
    "end": "233159"
  },
  {
    "text": "can do on the table such as get put and um you know and typically the data that",
    "start": "233159",
    "end": "240680"
  },
  {
    "text": "you're storing through these uh storing through the right operation or fetching through these right operations are semi",
    "start": "240680",
    "end": "246959"
  },
  {
    "text": "structured to unstructured where and where you have like a key which is defining the key of",
    "start": "246959",
    "end": "254000"
  },
  {
    "text": "the the the primary key of the item and then you have a value the value could be a Json object or you know whatever you",
    "start": "254000",
    "end": "260759"
  },
  {
    "text": "want to store in that now second part is that you get",
    "start": "260759",
    "end": "266199"
  },
  {
    "text": "flexible schema there is no like fixed schema as compared to what you get in a relational database right you can store",
    "start": "266199",
    "end": "272840"
  },
  {
    "text": "documents you can store photos you can store uh you can have a single table where you're storing like customers and",
    "start": "272840",
    "end": "278680"
  },
  {
    "text": "orders and stuff like that so there is no like fix schema you you can have",
    "start": "278680",
    "end": "283919"
  },
  {
    "text": "flexible schema and invariably the cloud service provider um by default most of these",
    "start": "283919",
    "end": "292080"
  },
  {
    "text": "databases they replicate data for higher availability for example Dynamo DB we",
    "start": "292080",
    "end": "297400"
  },
  {
    "text": "replicate every table across three different data centers within a region",
    "start": "297400",
    "end": "303080"
  },
  {
    "text": "and each data center is called an availability Zone and it has its own",
    "start": "303080",
    "end": "308160"
  },
  {
    "text": "independent and independent power and uh and networking right so Dynam DB can",
    "start": "308160",
    "end": "314520"
  },
  {
    "text": "lose a complete Data Center and your application and your table Still Remains",
    "start": "314520",
    "end": "320440"
  },
  {
    "text": "available both for reading and writing um and then dynamodb offers",
    "start": "320440",
    "end": "328039"
  },
  {
    "text": "essentially four lines of availability customers of dynamodb they can also choose to create a global table",
    "start": "328039",
    "end": "336199"
  },
  {
    "text": "that ensures that all your data is replicated not just within the same region but to the number of two two or",
    "start": "336199",
    "end": "343160"
  },
  {
    "text": "more regions that you have you know configured in your table throughout the world and the data in global tables is",
    "start": "343160",
    "end": "350639"
  },
  {
    "text": "asynchronously replicated uh and with global tables you get five",
    "start": "350639",
    "end": "356840"
  },
  {
    "text": "nines of availability which means effectively your data is always",
    "start": "356840",
    "end": "363000"
  },
  {
    "text": "accessible okay so talked about a simple API flexible schema highly availability",
    "start": "363000",
    "end": "369120"
  },
  {
    "text": "the next one is unbounded growth so another like big selling point of no SQL databases is the horizontal scalability",
    "start": "369120",
    "end": "376199"
  },
  {
    "text": "so for example in Dynamo DB you start with just like creating a table you",
    "start": "376199",
    "end": "381319"
  },
  {
    "text": "don't know the size of the table up front you you you maybe you know the reads and wrs that you want to perform",
    "start": "381319",
    "end": "387240"
  },
  {
    "text": "but you don't know the size so you start by creating an empty table as your application becomes",
    "start": "387240",
    "end": "394479"
  },
  {
    "text": "popular your number of Rights increase your the size of your size of the table increase and Dynamo DB behind the scenes",
    "start": "394479",
    "end": "401560"
  },
  {
    "text": "will you know automatically partition your data based on whatever um how much",
    "start": "401560",
    "end": "407800"
  },
  {
    "text": "size it is growing so you get like unbounded unbounded growth and you can also choose to in you",
    "start": "407800",
    "end": "417160"
  },
  {
    "text": "can also like now talking about read and wrs you can also either you can choose",
    "start": "417160",
    "end": "422400"
  },
  {
    "text": "to specify reads and wrs right in the beginning which is called as the provision mode of the table or if you",
    "start": "422400",
    "end": "428759"
  },
  {
    "text": "don't understand your read read pattern of your of your users you can just start with a non-demand mode so behind the",
    "start": "428759",
    "end": "436000"
  },
  {
    "text": "scenes as you increase your throughput or as we identify more rights happening to your table and based on that we need",
    "start": "436000",
    "end": "443000"
  },
  {
    "text": "to increase the we need to um you know partition the table to support the",
    "start": "443000",
    "end": "448080"
  },
  {
    "text": "unbounded growth essentially you can think about it that in in in this way let's say you start your table with",
    "start": "448080",
    "end": "454440"
  },
  {
    "text": "single partition as you add more data to it or as you increase reads and wres on your table it can go become two",
    "start": "454440",
    "end": "460919"
  },
  {
    "text": "partitions then four partitions and you know and so on finally and this is one of the my",
    "start": "460919",
    "end": "467479"
  },
  {
    "text": "favorite features of of Dynamo DB it is predictable performance that you start",
    "start": "467479",
    "end": "473159"
  },
  {
    "text": "your you start writing to your table as your table is empty you know you're getting like",
    "start": "473159",
    "end": "478720"
  },
  {
    "text": "single digit millisecond performance latency for reads and writs and then as an application becomes popular you start",
    "start": "478720",
    "end": "485840"
  },
  {
    "text": "doing maybe millions of RS per second or millions of reads per second your performance stays the same it's not that",
    "start": "485840",
    "end": "493000"
  },
  {
    "text": "your performance will degrade if you are if your table size increases right so",
    "start": "493000",
    "end": "498520"
  },
  {
    "text": "this is like one of my favorite features of Dynamo DB you get predictable performance and these are you know",
    "start": "498520",
    "end": "505240"
  },
  {
    "text": "predictable performance and unbounded growth these are kind of like important tenants that we keep in mind whenever we",
    "start": "505240",
    "end": "510639"
  },
  {
    "text": "are adding um adding new features to Dynamo DB and over years we are seeing",
    "start": "510639",
    "end": "517080"
  },
  {
    "text": "this that the number of customers and the request rate keeps on increasing in Dynamo DB but customers they always get",
    "start": "517080",
    "end": "525000"
  },
  {
    "text": "performance which remains constant and we are seeing more and more customers",
    "start": "525000",
    "end": "530360"
  },
  {
    "text": "using Dynamo DB for example like just taking the uh proof is in the pudding looking at the prime day stats from 2022",
    "start": "530360",
    "end": "538279"
  },
  {
    "text": "during that Prime day just amazon.com did 105.2 million requests per",
    "start": "538279",
    "end": "544440"
  },
  {
    "text": "second and all those API got single digit millisecond performance and this",
    "start": "544440",
    "end": "550000"
  },
  {
    "text": "is just one customer right and we have you know multiple customers so you can",
    "start": "550000",
    "end": "556160"
  },
  {
    "text": "expect the same so when we started to looking at like",
    "start": "556160",
    "end": "563160"
  },
  {
    "text": "transactions and you know as Dynamo DB the customer base keeps on growing so we always work backward from our customer",
    "start": "563160",
    "end": "569519"
  },
  {
    "text": "we first like go and talk to them what are things that you would want us to implement in dynamodb as an X feature",
    "start": "569519",
    "end": "578200"
  },
  {
    "text": "and you know one of the features that was asked at that time was transactions",
    "start": "578200",
    "end": "583440"
  },
  {
    "text": "so in the next set of slides what I'm going to do is I'll walk through what is",
    "start": "583440",
    "end": "588880"
  },
  {
    "text": "a transaction why are they important and maybe we can you know uh to understand why they're important we can look",
    "start": "588880",
    "end": "596839"
  },
  {
    "text": "at uh building an application to together in this talk without using",
    "start": "596839",
    "end": "602360"
  },
  {
    "text": "dynamodb transaction so you'll just use the basic put and get operations and and try to see what are the complexity that",
    "start": "602360",
    "end": "608320"
  },
  {
    "text": "arrives from building uh building transactions uh or doing transactional",
    "start": "608320",
    "end": "614600"
  },
  {
    "text": "operations in Dynamo DB and hopefully I'll convince you that you know it is an important feature that needs to be",
    "start": "614600",
    "end": "620680"
  },
  {
    "text": "added all right so what is a transaction transaction is essentially a group of",
    "start": "620680",
    "end": "626800"
  },
  {
    "text": "read and write operations that you want to execute Ute as a logical unit and as",
    "start": "626800",
    "end": "632360"
  },
  {
    "text": "a logical unit you know atomicity is is part of it and whenever you talk about transactions there are certain",
    "start": "632360",
    "end": "637920"
  },
  {
    "text": "properties that are associated with it which is you know asset um and you know",
    "start": "637920",
    "end": "643959"
  },
  {
    "text": "essentially what you're doing is transactions you group a sequence of",
    "start": "643959",
    "end": "649360"
  },
  {
    "text": "database operations atomicity it ensures that all the",
    "start": "649360",
    "end": "656160"
  },
  {
    "text": "operations they are they they all the operations in the transaction they're executed or none of them is executed so",
    "start": "656160",
    "end": "662959"
  },
  {
    "text": "you get the All or Nothing semantic consistency that means that your operation leaves the database in a in a",
    "start": "662959",
    "end": "670600"
  },
  {
    "text": "consistent state in a correct State isolation you have basically you have multiple developers who can read or",
    "start": "670600",
    "end": "677160"
  },
  {
    "text": "write data on your application in your and in your application and you want uh",
    "start": "677160",
    "end": "682639"
  },
  {
    "text": "isolation guarantees so that you can serialize concurrent operations and finally durability that",
    "start": "682639",
    "end": "690160"
  },
  {
    "text": "whatever data that you have written it remains permanent and in this particular",
    "start": "690160",
    "end": "695639"
  },
  {
    "text": "talk we're going to talk about atomicity and isolation specifically so now let's jump into like",
    "start": "695639",
    "end": "704240"
  },
  {
    "text": "why why would you need a transaction why are these customers that're asking about adding transactions to Dynamo DB because",
    "start": "704240",
    "end": "711200"
  },
  {
    "text": "Dynamo DB already supports like you know simple put update and delete operations",
    "start": "711200",
    "end": "716480"
  },
  {
    "text": "to understand that let's look at an online applic application online e-commerce application let's say You're Building A online e-commerce application",
    "start": "716480",
    "end": "724320"
  },
  {
    "text": "where the application is like amazon.com where a person marry can purchase a book",
    "start": "724320",
    "end": "730839"
  },
  {
    "text": "and a pen either independently or together let's for this example consider",
    "start": "730839",
    "end": "735920"
  },
  {
    "text": "you want to buy them together as a single single order um and now why are transactions",
    "start": "735920",
    "end": "743720"
  },
  {
    "text": "like valuable because they facilitate the construct or construction of correct",
    "start": "743720",
    "end": "750399"
  },
  {
    "text": "and reliable application that wish to maintain multi-item invariants and you know such",
    "start": "750399",
    "end": "759360"
  },
  {
    "text": "invariants are important for correct correct execution for example um if you",
    "start": "759360",
    "end": "766279"
  },
  {
    "text": "have 20 books right the invariant there is that you never sell a book which you",
    "start": "766279",
    "end": "772279"
  },
  {
    "text": "don't have in stock and you know these are this is just one example of an",
    "start": "772279",
    "end": "777320"
  },
  {
    "text": "invariant and one challenge in maintaining these invariants is when you",
    "start": "777320",
    "end": "783680"
  },
  {
    "text": "have application which is has multiple instances running in parallel and you",
    "start": "783680",
    "end": "790839"
  },
  {
    "text": "are accessing the same data concurrently right and in the cloud version or in the in",
    "start": "790839",
    "end": "798320"
  },
  {
    "text": "today's world you see that when you build an application it's not just you have one user who is executing this",
    "start": "798320",
    "end": "804800"
  },
  {
    "text": "operation you have like multiple use multiple users who are independently running their instance of that",
    "start": "804800",
    "end": "811120"
  },
  {
    "text": "application and these instances they need to share the data that is stored in",
    "start": "811120",
    "end": "816680"
  },
  {
    "text": "the database so which means you know you need to ensure these invariants are maintained",
    "start": "816680",
    "end": "823399"
  },
  {
    "text": "another in another challenge is that if your application crashes in the middle still these invariants should hold true",
    "start": "823399",
    "end": "830560"
  },
  {
    "text": "so transactions essentially are the way that application meet these two challenges of",
    "start": "830560",
    "end": "838759"
  },
  {
    "text": "concurrent access and partial failures without developers having to write a lot of extra code and let's understand that",
    "start": "838759",
    "end": "845959"
  },
  {
    "text": "better so let's say that you're building a client side application for doing",
    "start": "845959",
    "end": "851199"
  },
  {
    "text": "without dynamodb transactional support essentially if you build this e-commerce application you'll have three tables one",
    "start": "851199",
    "end": "858399"
  },
  {
    "text": "is the inventory table where the books are stored the pen that you're trying to store and other inventory that you're",
    "start": "858399",
    "end": "864639"
  },
  {
    "text": "maintaining for your app for your amazon.com website these all are stored",
    "start": "864639",
    "end": "869680"
  },
  {
    "text": "right the second thing is the customer customer table and in the customer table you're storing the information about the",
    "start": "869680",
    "end": "876399"
  },
  {
    "text": "customers who are using your application and finally the orders table the orders table essentially stores the",
    "start": "876399",
    "end": "884440"
  },
  {
    "text": "information about the orders that you have created",
    "start": "884440",
    "end": "889600"
  },
  {
    "text": "so when you are executing a transaction what all",
    "start": "889600",
    "end": "894720"
  },
  {
    "text": "needs to happen you need to ensure the customer is a verified customer the book status you need to check that",
    "start": "894720",
    "end": "901639"
  },
  {
    "text": "you have enough books in stock right and you need to make sure that that book is sellable",
    "start": "901639",
    "end": "907399"
  },
  {
    "text": "um you once the book same thing you need to do for the pen that the pen can the pen exists it",
    "start": "907399",
    "end": "916639"
  },
  {
    "text": "is in the right status and once you have added these two items to",
    "start": "916639",
    "end": "922959"
  },
  {
    "text": "an order as order items you also need to then create a new order object object",
    "start": "922959",
    "end": "929319"
  },
  {
    "text": "and also go and update the status of the book the status of the pen the count of",
    "start": "929319",
    "end": "935120"
  },
  {
    "text": "the book and the count of that particular pen right",
    "start": "935120",
    "end": "941040"
  },
  {
    "text": "so one way to do this as I said was you write all this client side logic that hey read from the inventory table find",
    "start": "941040",
    "end": "947959"
  },
  {
    "text": "out the number of books read from the inventory table find out the number of uh pens that you",
    "start": "947959",
    "end": "953079"
  },
  {
    "text": "have write to the inventory table that hey I'm going to execute this operation make a check to the customer table you",
    "start": "953079",
    "end": "959759"
  },
  {
    "text": "can do all these operations in sequence on the client side and you know what you essentially want is finally automically",
    "start": "959759",
    "end": "967880"
  },
  {
    "text": "all these operations should execute again if you had a single user using that application so you can simply write",
    "start": "967880",
    "end": "973920"
  },
  {
    "text": "this logic and you know make sure the operations are right important and things will just",
    "start": "973920",
    "end": "979600"
  },
  {
    "text": "work what you want is the final state to have like books status is sold customer",
    "start": "979600",
    "end": "984920"
  },
  {
    "text": "is verified orders are created right",
    "start": "984920",
    "end": "990120"
  },
  {
    "text": "it sounds simple but not that simple your application as you write it it could crash right anywhere it could",
    "start": "990120",
    "end": "996920"
  },
  {
    "text": "crash your you could have a crash right in the application itself let's say you started and you were in the third step",
    "start": "996920",
    "end": "1004240"
  },
  {
    "text": "if if your application crashes now you need to find out where were you and then start again from there right so you need",
    "start": "1004240",
    "end": "1011079"
  },
  {
    "text": "to add some logic your database could crash while your application was up so you need to ensure you're doing enough",
    "start": "1011079",
    "end": "1017079"
  },
  {
    "text": "free tries your network could have an error or your hard drive could crash your hard drive could crash on the",
    "start": "1017079",
    "end": "1022759"
  },
  {
    "text": "database or your hard drive could crash on your application side or your network could have issues so you know all these",
    "start": "1022759",
    "end": "1028678"
  },
  {
    "text": "failure modes essentially you have to handle because if you don't handle them",
    "start": "1028679",
    "end": "1034520"
  },
  {
    "text": "will that could result in inconsistent state in your application and inconsistent State what",
    "start": "1034520",
    "end": "1041880"
  },
  {
    "text": "I meant by that is you could end up in a state where your customer is verified orders are created but the inventory is",
    "start": "1041880",
    "end": "1047120"
  },
  {
    "text": "not yet updated and if the inventory is not yet updated that particular item you might",
    "start": "1047120",
    "end": "1053720"
  },
  {
    "text": "end up selling it to two customers and then you don't have stocks and then you cannot you cannot fulfill the customer",
    "start": "1053720",
    "end": "1059440"
  },
  {
    "text": "order and all these all these like repercussions that that you will",
    "start": "1059440",
    "end": "1066160"
  },
  {
    "text": "have um so then what you need to do is since your database is in this",
    "start": "1066160",
    "end": "1072320"
  },
  {
    "text": "inconsistent State you need to then do roll backs and okay so now you you start",
    "start": "1072320",
    "end": "1078720"
  },
  {
    "text": "thinking about how do I write the roll back logic essentially you have some",
    "start": "1078720",
    "end": "1083840"
  },
  {
    "text": "unfinished transactions in your database and you don't want anyone to read all this data so you go and do deletes on",
    "start": "1083840",
    "end": "1091960"
  },
  {
    "text": "your like other two tables and make sure that all of them do not have this data right so all right",
    "start": "1091960",
    "end": "1099919"
  },
  {
    "text": "sounds started to sound complicated okay now I need to figure this out how do I",
    "start": "1099919",
    "end": "1105559"
  },
  {
    "text": "do this okay now if you think about it how would you build cleanup logic and you",
    "start": "1105559",
    "end": "1111919"
  },
  {
    "text": "know a standard way to build this cleanup logic is you instead of executing the operation right away you",
    "start": "1111919",
    "end": "1117480"
  },
  {
    "text": "actually store that in a in a separate table or in a separate Ledger where you know transactions are first written and",
    "start": "1117480",
    "end": "1124640"
  },
  {
    "text": "then they are asynchronously executed all right I can think of building it but",
    "start": "1124640",
    "end": "1130000"
  },
  {
    "text": "this is just like an additional complexity that that I as an application developer have to deal with what I",
    "start": "1130000",
    "end": "1135679"
  },
  {
    "text": "wanted to do was just execute a transaction but but now I now I have to first deal with these repercussions then",
    "start": "1135679",
    "end": "1143080"
  },
  {
    "text": "I can get into thinking about my business logic not not the best not the best",
    "start": "1143080",
    "end": "1149080"
  },
  {
    "text": "right so again previously I was talking about a single user now think about",
    "start": "1149080",
    "end": "1154360"
  },
  {
    "text": "multi- users right you have multiple clients who are reading in parallel and it might be",
    "start": "1154360",
    "end": "1159760"
  },
  {
    "text": "that um you need to make sure that the data that is stored in these tables",
    "start": "1159760",
    "end": "1165480"
  },
  {
    "text": "makes sense to everyone so that everyone is reading only the committed States they're not reading the intermediate",
    "start": "1165480",
    "end": "1171039"
  },
  {
    "text": "States because again you want your transactions to have the highest chance of success because if your application",
    "start": "1171039",
    "end": "1177080"
  },
  {
    "text": "keeps on crashing because of these inconsistent States your users will go away right so one way to build about to",
    "start": "1177080",
    "end": "1184000"
  },
  {
    "text": "to solve this uh concurrent axis",
    "start": "1184000",
    "end": "1189960"
  },
  {
    "text": "is you have like a front end layer in in front",
    "start": "1189960",
    "end": "1195840"
  },
  {
    "text": "of the database and you ensure all the reads and wres go go through that but that doesn't fully serve it you need to",
    "start": "1195840",
    "end": "1202039"
  },
  {
    "text": "introduce you know maybe locks so to guarante isolation so that each of the",
    "start": "1202039",
    "end": "1209520"
  },
  {
    "text": "developer can write code as as though the operations are performed without interfering with each other so that the",
    "start": "1209520",
    "end": "1215440"
  },
  {
    "text": "developers don't have to think about interfering operations you can maybe introduce locks but with locks then you",
    "start": "1215440",
    "end": "1222000"
  },
  {
    "text": "have the cleanup logic to also clean up the locks right so more complexity on",
    "start": "1222000",
    "end": "1227360"
  },
  {
    "text": "the client side now you have to deal with and we haven't talked much about unbounded growth and like predictable",
    "start": "1227360",
    "end": "1234000"
  },
  {
    "text": "performance can we still achieve that with this setup where you have like a new layer in the middle and then you",
    "start": "1234000",
    "end": "1240039"
  },
  {
    "text": "have these locks then you have additional logic to clean up can my database now further scale uh",
    "start": "1240039",
    "end": "1248320"
  },
  {
    "text": "can my application scale I don't know right all these things just they add up",
    "start": "1248320",
    "end": "1253440"
  },
  {
    "text": "pretty quickly and now you are becoming a database expert rather than writing your business logic that that makes your",
    "start": "1253440",
    "end": "1260400"
  },
  {
    "text": "life much much simple right so all the heavy lifting",
    "start": "1260400",
    "end": "1265559"
  },
  {
    "text": "essentially goes to the client and we don't want that um if the database does not have",
    "start": "1265559",
    "end": "1272039"
  },
  {
    "text": "this capability every customer will have to think about all these problems that we just disc discussed about right",
    "start": "1272039",
    "end": "1279159"
  },
  {
    "text": "adding transactions in the in the on their client side so you must be wondering like why",
    "start": "1279159",
    "end": "1285600"
  },
  {
    "text": "are these like why do no SQL databases not supposed transactions right why do they just support like sing simple put",
    "start": "1285600",
    "end": "1291919"
  },
  {
    "text": "update and delete operation",
    "start": "1291919",
    "end": "1298000"
  },
  {
    "text": "so as I briefly touched in the initial set of slides that no SQL databases",
    "start": "1298000",
    "end": "1304679"
  },
  {
    "text": "customers expect that they'll they'll provide low latency performance and you",
    "start": "1304679",
    "end": "1310559"
  },
  {
    "text": "know your database scales as your application is scaling it accomplishes this by doing",
    "start": "1310559",
    "end": "1317559"
  },
  {
    "text": "get by by providing GE input operations which have you know almost like consistent",
    "start": "1317559",
    "end": "1323120"
  },
  {
    "text": "latency now the fear is that it is harder to provide predictable performance for more complex operations",
    "start": "1323120",
    "end": "1330120"
  },
  {
    "text": "like transactions right and vast majority of applications of no SQL",
    "start": "1330120",
    "end": "1338399"
  },
  {
    "text": "databases have survived without transactions I.E clients have written",
    "start": "1338440",
    "end": "1344480"
  },
  {
    "text": "all the additional logic and you know lived with it they have basically figured out workarounds to make it work",
    "start": "1344480",
    "end": "1352000"
  },
  {
    "text": "and they've essentially survived without transactions for years so you know there",
    "start": "1352000",
    "end": "1357679"
  },
  {
    "text": "is also that that particular point about is it really needed and then the fear of adding",
    "start": "1357679",
    "end": "1364919"
  },
  {
    "text": "transactional support you know might break the service for non-transactional",
    "start": "1364919",
    "end": "1370279"
  },
  {
    "text": "workloads like simple get input operations will they be impacted so that's another fear um and",
    "start": "1370279",
    "end": "1378640"
  },
  {
    "text": "you know reading online and talking to a lot of like my other peers the concerns around",
    "start": "1378640",
    "end": "1386720"
  },
  {
    "text": "complexity of the API you know how do you add this new API into into the",
    "start": "1386720",
    "end": "1392679"
  },
  {
    "text": "system the concerns around system issues like deadlock starvation of these locks",
    "start": "1392679",
    "end": "1399919"
  },
  {
    "text": "and then how do you handle like contention between different items the the concern of as I said",
    "start": "1399919",
    "end": "1408120"
  },
  {
    "text": "interference between non-transactional and transactional workloads and on top of all this like the cost like what will",
    "start": "1408120",
    "end": "1414919"
  },
  {
    "text": "it cost to actually execute a transactional operation so all these reasons you know kind of like creates a",
    "start": "1414919",
    "end": "1422720"
  },
  {
    "text": "fear that hey maybe we should not add transactions it'll it'll impact the value proposition of my",
    "start": "1422720",
    "end": "1429679"
  },
  {
    "text": "database to work around these concerns some",
    "start": "1429679",
    "end": "1436360"
  },
  {
    "text": "systems provide transactions but with some restricted restricted uh features",
    "start": "1436360",
    "end": "1442400"
  },
  {
    "text": "for example some Fe some databases they choose isolation levels that are less",
    "start": "1442400",
    "end": "1447760"
  },
  {
    "text": "powerful and hence more limited utility than",
    "start": "1447760",
    "end": "1455240"
  },
  {
    "text": "serializability other systems they Place restrictions on like scope of",
    "start": "1455240",
    "end": "1460400"
  },
  {
    "text": "transactions some system they only allow transactions to execute on a single partition that if you if your database",
    "start": "1460400",
    "end": "1466320"
  },
  {
    "text": "grows to multiple partitions you cannot execute transactions or they will restrict that your single primary key",
    "start": "1466320",
    "end": "1473039"
  },
  {
    "text": "single like hash key of your uh partition can stay within the same partition it cannot go beyond a single",
    "start": "1473039",
    "end": "1481159"
  },
  {
    "text": "partition and then some systems you know they essentially ask you to ask you",
    "start": "1481159",
    "end": "1487360"
  },
  {
    "text": "upfront what all partitions you expect to execute in a single transaction so that they can collocate",
    "start": "1487360",
    "end": "1494159"
  },
  {
    "text": "them and execute the transactions for you and to be to be clear all these",
    "start": "1494159",
    "end": "1500240"
  },
  {
    "text": "restrictions they intend to enhance the predictability or reduce the complexity",
    "start": "1500240",
    "end": "1505840"
  },
  {
    "text": "in the system but these restrictions are at odds with scalability right as the",
    "start": "1505840",
    "end": "1511840"
  },
  {
    "text": "database database grows it will split it needs to split uh into multiple",
    "start": "1511840",
    "end": "1517399"
  },
  {
    "text": "partitions and restricting data to a single partition",
    "start": "1517399",
    "end": "1522880"
  },
  {
    "text": "again causes availability concerns your application will crash uh we cannot the dat cannot accept any rights",
    "start": "1522880",
    "end": "1530120"
  },
  {
    "text": "right so your application which was working yesterday suddenly stops working tomorrow because your data just grown uh",
    "start": "1530120",
    "end": "1537840"
  },
  {
    "text": "and customers don't like that variability in in these systems so when we set out to add transactions support",
    "start": "1537840",
    "end": "1545399"
  },
  {
    "text": "in Dynamo DB we looked for a better answer and you know we didn't just",
    "start": "1545399",
    "end": "1551000"
  },
  {
    "text": "settle for like we can introduce transactions with these restrictions we went back to the drawing board and we",
    "start": "1551000",
    "end": "1557399"
  },
  {
    "text": "said okay to add transactions in Dynamo DB we want to be able to execute a set",
    "start": "1557399",
    "end": "1562440"
  },
  {
    "text": "of operations automically and ser caliza for any items in any tables not just one",
    "start": "1562440",
    "end": "1568440"
  },
  {
    "text": "table or a single partition any tables that exist in the customer account with predictable performance and also make",
    "start": "1568440",
    "end": "1574960"
  },
  {
    "text": "sure that no impact to non-transactional workloads and our customers essentially",
    "start": "1574960",
    "end": "1582159"
  },
  {
    "text": "Wanted full asset compliance and you know Amazon at that",
    "start": "1582159",
    "end": "1587799"
  },
  {
    "text": "same time when we were thinking about transactions there there was a public push to migrate",
    "start": "1587799",
    "end": "1593159"
  },
  {
    "text": "many of our internal applications off the relational databases to D modv so all these internal teams are also asking",
    "start": "1593159",
    "end": "1599720"
  },
  {
    "text": "about a better and scalable way to do transactions ensuring that it performs",
    "start": "1599720",
    "end": "1606360"
  },
  {
    "text": "ensuring that the cost is not that high so",
    "start": "1606360",
    "end": "1611520"
  },
  {
    "text": "boom we wrote down these goals and Dynamo DB already allowed",
    "start": "1611520",
    "end": "1618600"
  },
  {
    "text": "customers to write consistent applications and also provided durability right with replication of the",
    "start": "1618600",
    "end": "1625840"
  },
  {
    "text": "data so out of acid what was missing was a which is atomicity and I which is",
    "start": "1625840",
    "end": "1631840"
  },
  {
    "text": "isolation and our customers needed the ability to execute a set of operations",
    "start": "1631840",
    "end": "1636919"
  },
  {
    "text": "which belong to multiple partitions or multiple tables automically and serializable fashion for any items with",
    "start": "1636919",
    "end": "1645919"
  },
  {
    "text": "predictable performance so all right we have defined our goals",
    "start": "1645919",
    "end": "1652399"
  },
  {
    "text": "let's look at starting from customer experience like how what are the apis",
    "start": "1652399",
    "end": "1657960"
  },
  {
    "text": "you should introduce how should we expose this experience to the customers traditionally the standard way",
    "start": "1657960",
    "end": "1665640"
  },
  {
    "text": "to provide transactions would have been you add like a begin transaction begin",
    "start": "1665640",
    "end": "1671399"
  },
  {
    "text": "statement and a transaction commit statement and in between customers can write all the get put operations in in",
    "start": "1671399",
    "end": "1678760"
  },
  {
    "text": "between these two uh multi-step you know transaction operations and",
    "start": "1678760",
    "end": "1684240"
  },
  {
    "text": "and basically existing operations can be simply treated as a implicit",
    "start": "1684240",
    "end": "1692360"
  },
  {
    "text": "transaction um right now then if if you are essentially doing",
    "start": "1692360",
    "end": "1699440"
  },
  {
    "text": "like a a single item transaction that's what I meant by implicit single single turn transactions and the typical",
    "start": "1699440",
    "end": "1706640"
  },
  {
    "text": "implementation uses like two-phase locking um standard approach again we",
    "start": "1706640",
    "end": "1711760"
  },
  {
    "text": "just talking about standard approaches that existed in the market right uses a standard two-phase locking during the",
    "start": "1711760",
    "end": "1718360"
  },
  {
    "text": "execution of the transaction and two-phase commit for completing the",
    "start": "1718360",
    "end": "1724840"
  },
  {
    "text": "transaction some databases like they also store like multiple versions of an item so that multiversion concurrency",
    "start": "1726320",
    "end": "1732760"
  },
  {
    "text": "control can be used to provide like snapshot isolation for example you do a transaction you have multiple versions",
    "start": "1732760",
    "end": "1739399"
  },
  {
    "text": "and you know uh whenever you doing a read you can always read before the transaction using the version number of",
    "start": "1739399",
    "end": "1745919"
  },
  {
    "text": "the item without of them being blocked by concurrent rights to the same item so we",
    "start": "1745919",
    "end": "1752279"
  },
  {
    "text": "didn't choose any of these options for Dynamo DB Dynamo DB is a multi-end",
    "start": "1752279",
    "end": "1758000"
  },
  {
    "text": "system allowing applications to begin a transaction wait for some time and then",
    "start": "1758000",
    "end": "1763720"
  },
  {
    "text": "commit the transaction that is a that is basically allowing lach running transactions would enable the",
    "start": "1763720",
    "end": "1769600"
  },
  {
    "text": "transactions to indefinitely tie up the system",
    "start": "1769600",
    "end": "1774919"
  },
  {
    "text": "resources right customer could write like a sleep",
    "start": "1774919",
    "end": "1780039"
  },
  {
    "text": "in between TX begin and TX commit like then your resources are held for",
    "start": "1780039",
    "end": "1785320"
  },
  {
    "text": "long and requiring Singleton gets and puts to",
    "start": "1785320",
    "end": "1794480"
  },
  {
    "text": "also have full trans to also go through full transaction commit protocol would also you",
    "start": "1794480",
    "end": "1800640"
  },
  {
    "text": "know would mean that we have taken a performance hit on even the single turn operations so again the tenet was don't",
    "start": "1800640",
    "end": "1807600"
  },
  {
    "text": "impact or goal was don't impact single turn operations looking at locking locking",
    "start": "1807600",
    "end": "1814039"
  },
  {
    "text": "restricts concurrency right it's not that we are aiming for super high contentious workload but locking it",
    "start": "1814039",
    "end": "1820519"
  },
  {
    "text": "raises the potenti the possibility of deadlocks in the system which are bad for",
    "start": "1820519",
    "end": "1826120"
  },
  {
    "text": "availability uh they could have gone with multiversion concurrency control that's pretty pretty neat but Dynamo DB",
    "start": "1826120",
    "end": "1832880"
  },
  {
    "text": "does not support versioning and adding versioning would have resulted in high",
    "start": "1832880",
    "end": "1838360"
  },
  {
    "text": "cost which means we have to now pass this cost to the customers and you know additional complexity that we have to build in the system so all these",
    "start": "1838360",
    "end": "1845600"
  },
  {
    "text": "operations all these approaches essentially we we we you know rejected and we came up with a different approach",
    "start": "1845600",
    "end": "1852919"
  },
  {
    "text": "instead we took a different approach for transactions in dynb so to the apis we added two new",
    "start": "1852919",
    "end": "1859799"
  },
  {
    "text": "operations transact get items and transact write item operations and these are like single request operations",
    "start": "1859799",
    "end": "1866559"
  },
  {
    "text": "single request transactions that are submitted as one operation and they either succeed or fail immediately",
    "start": "1866559",
    "end": "1872760"
  },
  {
    "text": "without blocking so transact get item operation it allows you to do",
    "start": "1872760",
    "end": "1878279"
  },
  {
    "text": "multiple to allows you to retrieve multiple items to read multiple items",
    "start": "1878279",
    "end": "1883320"
  },
  {
    "text": "from a consistent snapshot and these items can be from like any arbitrary set",
    "start": "1883320",
    "end": "1888639"
  },
  {
    "text": "of like dyv tables only committed data is returned when you do transact get item operation and reading from a",
    "start": "1888639",
    "end": "1896600"
  },
  {
    "text": "consistent snapshot means that read only transaction is serialized with respect to other right",
    "start": "1896600",
    "end": "1902760"
  },
  {
    "text": "transactions okay the next one is the transact right item operation and the",
    "start": "1902760",
    "end": "1907960"
  },
  {
    "text": "transact right item operation it allows multiple items to be created deleted or updated automically and each such",
    "start": "1907960",
    "end": "1915559"
  },
  {
    "text": "transaction contains WR it with one or more put update or",
    "start": "1915559",
    "end": "1921120"
  },
  {
    "text": "delete apis and the items that are being written can reside in again any number",
    "start": "1921120",
    "end": "1927600"
  },
  {
    "text": "of tables the transactions may optionally include one or more pre",
    "start": "1927600",
    "end": "1933440"
  },
  {
    "text": "conditions like you can check um you can check uh a specific",
    "start": "1933440",
    "end": "1941000"
  },
  {
    "text": "item uh in a specific table which is where you're not writing essentially",
    "start": "1941000",
    "end": "1946159"
  },
  {
    "text": "right and we law and you can also add up add these conditions to individual like",
    "start": "1946159",
    "end": "1951880"
  },
  {
    "text": "put update delete operations as well nanb allows like adding those conditions",
    "start": "1951880",
    "end": "1957519"
  },
  {
    "text": "irrespective of transactions as well you can do like optimistic concurrency control on Singleton",
    "start": "1957519",
    "end": "1963440"
  },
  {
    "text": "items so for instance you want to like add a condition that hey um execute this",
    "start": "1963440",
    "end": "1969760"
  },
  {
    "text": "put only if this item does not exist right so you can do that even without transactions but you can choose to put",
    "start": "1969760",
    "end": "1976639"
  },
  {
    "text": "that as as well within the transaction itself and for a transaction to succeed",
    "start": "1976639",
    "end": "1982679"
  },
  {
    "text": "all these supplied preconditions must be met and these single shot transactions",
    "start": "1982679",
    "end": "1990600"
  },
  {
    "text": "are also serialized with respect to other transactions and single operations with transact right items as",
    "start": "1990600",
    "end": "1998080"
  },
  {
    "text": "well awesome so now taking a look at an example so let's say that let's",
    "start": "1998080",
    "end": "2005519"
  },
  {
    "text": "introduce another example we you generally see with like whenever you think about transactions like a bank",
    "start": "2005519",
    "end": "2011679"
  },
  {
    "text": "money transfer let's say Mary wants to transfer money to Bob and you know you",
    "start": "2011679",
    "end": "2018639"
  },
  {
    "text": "essentially do a read to read the like if you do this in a standard TX pick in",
    "start": "2018639",
    "end": "2024279"
  },
  {
    "text": "TX commit where you would do a get operation for Mary read the money for Bob read the money then you do a",
    "start": "2024279",
    "end": "2033639"
  },
  {
    "text": "put funds you verify that both these folks have the right money then you do a",
    "start": "2033639",
    "end": "2040480"
  },
  {
    "text": "put increasing the money in Mar's account by 50 and reducing the money in Bob's account by 50 and then you commit",
    "start": "2040480",
    "end": "2047039"
  },
  {
    "text": "the transaction if all these conditions are check are met but with Dynamo DB you write a",
    "start": "2047039",
    "end": "2053280"
  },
  {
    "text": "transact write item request where you say check Mary Mary's balance check",
    "start": "2053280",
    "end": "2059040"
  },
  {
    "text": "Bob's balance and then you say you want to execute this put operation by in",
    "start": "2059040",
    "end": "2065560"
  },
  {
    "text": "reducing the money from Bob's account and increasing the money in Mar's account so you could essentially could",
    "start": "2065560",
    "end": "2072280"
  },
  {
    "text": "map this TX begin TX commit into a single request with transact right",
    "start": "2072280",
    "end": "2077800"
  },
  {
    "text": "items all right then the shopping example if you go back to",
    "start": "2077800",
    "end": "2083320"
  },
  {
    "text": "that you're doing a shopping application you have the customers table",
    "start": "2083320",
    "end": "2089280"
  },
  {
    "text": "orders table inventory table you need to do a check on whether the customer exist",
    "start": "2089280",
    "end": "2095118"
  },
  {
    "text": "whether the inventory EX is is available and then you want to update the orders",
    "start": "2095119",
    "end": "2100960"
  },
  {
    "text": "table create the entry in the orders table and also update the status in the inventory table so you do a transact",
    "start": "2100960",
    "end": "2106680"
  },
  {
    "text": "right item check the customer let's say Suzie exists inventory you have a book",
    "start": "2106680",
    "end": "2114440"
  },
  {
    "text": "number of books that you have is greater than five then you do a put on the orders table and update the inventory by",
    "start": "2114440",
    "end": "2120440"
  },
  {
    "text": "reducing the number of books from whatever you have by five right so",
    "start": "2120440",
    "end": "2126240"
  },
  {
    "text": "overall in this particular transaction experience that we have",
    "start": "2126240",
    "end": "2132760"
  },
  {
    "text": "built what did you lose right there's always trade-offs I would say very little",
    "start": "2132760",
    "end": "2139000"
  },
  {
    "text": "because most multi-step transactions they can be converted into a single request transactions as we saw two",
    "start": "2139000",
    "end": "2145359"
  },
  {
    "text": "examples just right now right um the the money transfer example where we were",
    "start": "2145359",
    "end": "2151280"
  },
  {
    "text": "able to essentially convert the multiple operations that would happen into a single request",
    "start": "2151280",
    "end": "2158720"
  },
  {
    "text": "and this approach can be essentially aight to convert any general purpose transaction into transactional system",
    "start": "2158720",
    "end": "2165440"
  },
  {
    "text": "into a single request system and in fact it actually mimics how distributed",
    "start": "2165440",
    "end": "2171720"
  },
  {
    "text": "transactions are implemented in other systems as well where you have resets",
    "start": "2171720",
    "end": "2176839"
  },
  {
    "text": "which basically record the value of the items at the time transaction executes",
    "start": "2176839",
    "end": "2182119"
  },
  {
    "text": "and writes a buffered until the end and then a commit time you read the values",
    "start": "2182119",
    "end": "2187280"
  },
  {
    "text": "they checked if they still match then the buffered rights are performed if they",
    "start": "2187280",
    "end": "2193440"
  },
  {
    "text": "don't match then you know transaction fails so seems like it's",
    "start": "2193440",
    "end": "2200400"
  },
  {
    "text": "working all right so till now we looked at what is a transaction why are they",
    "start": "2200400",
    "end": "2206760"
  },
  {
    "text": "important and how we thought about introducing them as an experience in Dynamo DB next step is how do we",
    "start": "2206760",
    "end": "2213599"
  },
  {
    "text": "actually build it right this is critical every everyone is curious like what did we actually do what magic is happening",
    "start": "2213599",
    "end": "2219960"
  },
  {
    "text": "behind the scenes so to understand that let's take a step back let's look at",
    "start": "2219960",
    "end": "2225440"
  },
  {
    "text": "Dynamo DB as a system right without transactions what happens in Dynamo DB",
    "start": "2225440",
    "end": "2231040"
  },
  {
    "text": "whenever you send a request to do a put or a get in Dynamo DB it hits it hits a",
    "start": "2231040",
    "end": "2236680"
  },
  {
    "text": "bunch of request routers and these request routers think of them as stateless frontend",
    "start": "2236680",
    "end": "2242319"
  },
  {
    "text": "nodes when request reaches a request outer it then figures out where actually",
    "start": "2242319",
    "end": "2248119"
  },
  {
    "text": "the storage nodes which are it basically looks at the address of the storage nodes from a metadata system to find out",
    "start": "2248119",
    "end": "2255760"
  },
  {
    "text": "where these where the items that where the item that you're trying to put is",
    "start": "2255760",
    "end": "2262480"
  },
  {
    "text": "stored and these are stored on like storage noes right and as I said initially that all",
    "start": "2265079",
    "end": "2272520"
  },
  {
    "text": "the data is replicated across multiple availability zones so and out of these",
    "start": "2272520",
    "end": "2278560"
  },
  {
    "text": "three zones you have one replica which which is the leader replica so all the put operations they go to the leader",
    "start": "2278560",
    "end": "2284839"
  },
  {
    "text": "leader replicates it in the other two regions and then replies back to the request router which finally replies",
    "start": "2284839",
    "end": "2291359"
  },
  {
    "text": "back to the uh application",
    "start": "2291359",
    "end": "2297280"
  },
  {
    "text": "and just like put operation deletes and updates are handled in the same way where request router finds out where",
    "start": "2299160",
    "end": "2305720"
  },
  {
    "text": "that item is stored executes the delete through the leader done talking about gets gets",
    "start": "2305720",
    "end": "2312800"
  },
  {
    "text": "execute in a similar way but whether they go to the leader or not",
    "start": "2312800",
    "end": "2320480"
  },
  {
    "text": "it depends on the request that is being made so if you do a consistent read the",
    "start": "2320480",
    "end": "2327200"
  },
  {
    "text": "request goes to the leader and instead of using all the three notes now just the leader can respond back it's a",
    "start": "2327200",
    "end": "2332400"
  },
  {
    "text": "consistent read leader knows because leader all the rights the latest rights go through the leader leader looks up",
    "start": "2332400",
    "end": "2338640"
  },
  {
    "text": "and then responds back if you do an eventually consistent read it can go to any of the three replicas and that",
    "start": "2338640",
    "end": "2344119"
  },
  {
    "text": "replica can respond back to the client now for transactions what we did",
    "start": "2344119",
    "end": "2352720"
  },
  {
    "text": "is transactional request is again from the customer is sent to the front end",
    "start": "2352720",
    "end": "2358800"
  },
  {
    "text": "Fleet and then it is routed to a new Fleet of transaction coordinators and",
    "start": "2358800",
    "end": "2366000"
  },
  {
    "text": "the trans transaction coordinators they pick upart the items involved in the transaction and in our case they were",
    "start": "2366000",
    "end": "2372319"
  },
  {
    "text": "like three items that that we were trying to update it sends those requests",
    "start": "2372319",
    "end": "2379960"
  },
  {
    "text": "to the three storage nodes saying that hey execute the create order execute the",
    "start": "2379960",
    "end": "2385000"
  },
  {
    "text": "update inventory execute the check customer once it gets the response the",
    "start": "2385000",
    "end": "2390040"
  },
  {
    "text": "transactional respones sent back to the uh to the client so transaction",
    "start": "2390040",
    "end": "2395240"
  },
  {
    "text": "coordinator send these two different tables get the response back and then it",
    "start": "2395240",
    "end": "2400680"
  },
  {
    "text": "responds back to the client saying that transaction succeeded or failed whatever that",
    "start": "2400680",
    "end": "2406599"
  },
  {
    "text": "request was right now looking deeper into how exactly that",
    "start": "2406599",
    "end": "2414560"
  },
  {
    "text": "happens inside the transactions so it's essentially uh",
    "start": "2414560",
    "end": "2422319"
  },
  {
    "text": "is a two-phase protocol transaction coordinator it ask asks all the participating storage notes",
    "start": "2422319",
    "end": "2428880"
  },
  {
    "text": "that hey I'm going to make a request that is sent by the",
    "start": "2428880",
    "end": "2437800"
  },
  {
    "text": "customer are you willing to accept this and if the storage notes they say that yes",
    "start": "2437800",
    "end": "2445440"
  },
  {
    "text": "I'm able to you know um I'm willing to accept this",
    "start": "2445440",
    "end": "2451280"
  },
  {
    "text": "transaction if they respond back with a yes TC's dubly store the",
    "start": "2451280",
    "end": "2459000"
  },
  {
    "text": "metadata that hey this transaction is accepted and then TC's move on to",
    "start": "2459000",
    "end": "2465319"
  },
  {
    "text": "the second phase in the second phase once the",
    "start": "2465319",
    "end": "2471720"
  },
  {
    "text": "transaction enters in the second phase it is guaranteed to be executed in its",
    "start": "2471720",
    "end": "2476839"
  },
  {
    "text": "entirely in its entirety exactly once so the transaction coordinator retry",
    "start": "2476839",
    "end": "2482200"
  },
  {
    "text": "retries each right operation until all the rights eventually succeed and rights themselves are important so it's okay",
    "start": "2482200",
    "end": "2488800"
  },
  {
    "text": "for the transaction coordinators to resend them whenever they're in doubt such as",
    "start": "2488800",
    "end": "2494599"
  },
  {
    "text": "when it receives a timeout or you know Storage Note fails when it's not available or the leader is transitioning",
    "start": "2494599",
    "end": "2500280"
  },
  {
    "text": "from the current leader to the other leader or any other hiccups that could happen",
    "start": "2500280",
    "end": "2506960"
  },
  {
    "text": "so once it has reached the commit phase essentially it is sending the commit message once it gets an acknowledgement",
    "start": "2507119",
    "end": "2513079"
  },
  {
    "text": "from all three tables and then responds back back saying that hey my transaction",
    "start": "2513079",
    "end": "2519040"
  },
  {
    "text": "is complete perfect so that's one example",
    "start": "2519040",
    "end": "2524079"
  },
  {
    "text": "but you know it's not always the happy case it might happen that a transaction",
    "start": "2524079",
    "end": "2529480"
  },
  {
    "text": "coordinator gets a negative acknowledgement from let's say the orders table right the other table",
    "start": "2529480",
    "end": "2535359"
  },
  {
    "text": "succeeded but the orders table actually got a negative acknowledgement in that case what happens",
    "start": "2535359",
    "end": "2542480"
  },
  {
    "text": "is transaction coordinator will go ahead and release relase the we'll send a",
    "start": "2542480",
    "end": "2548400"
  },
  {
    "text": "release message to all the tables and then you know acknowledge back to the",
    "start": "2548400",
    "end": "2553640"
  },
  {
    "text": "client that hey this particular transaction failed because the condition",
    "start": "2553640",
    "end": "2558760"
  },
  {
    "text": "that you had specified was not met perfect so you know we understand",
    "start": "2558760",
    "end": "2566240"
  },
  {
    "text": "how a happy case work how not so happy case works but of Greater concern in",
    "start": "2566240",
    "end": "2572520"
  },
  {
    "text": "this particular system is like failure of the transaction coordinator right",
    "start": "2572520",
    "end": "2577800"
  },
  {
    "text": "because as I said whenever storage nodes fail transaction coordinators can",
    "start": "2577800",
    "end": "2583440"
  },
  {
    "text": "retry so how does this work so coordinators they maintain a like a soft",
    "start": "2583440",
    "end": "2589680"
  },
  {
    "text": "state with a persistent record for each transaction and its outcome in a ledger",
    "start": "2589680",
    "end": "2595520"
  },
  {
    "text": "just like I was saying in the in the client side application that you would have to do a ledger just think of it like similar",
    "start": "2595520",
    "end": "2602760"
  },
  {
    "text": "way you have a ledger where all your transactional request are",
    "start": "2602760",
    "end": "2608640"
  },
  {
    "text": "stored and a recovery manager",
    "start": "2608640",
    "end": "2614280"
  },
  {
    "text": "periodically is basically scanning this ledger to find out so transaction",
    "start": "2614280",
    "end": "2620640"
  },
  {
    "text": "coordinators are periodically check pointing whenever they reach a logical state recovery manager is scanning those",
    "start": "2620640",
    "end": "2626960"
  },
  {
    "text": "ledgers and it if it find and the goal is to find out in a reasonable amount of time transactions which are you know",
    "start": "2626960",
    "end": "2634240"
  },
  {
    "text": "which have not which are not which have not not been completed and can call them as like stall transactions",
    "start": "2634240",
    "end": "2640800"
  },
  {
    "text": "right and such stall transactions are then assigned to a new transaction",
    "start": "2640800",
    "end": "2646359"
  },
  {
    "text": "coordinator saying that hey by the way I found this transaction go recover it and",
    "start": "2646359",
    "end": "2652880"
  },
  {
    "text": "it is even okay for you know having multiple coordinators to be finishing the same transaction at the same time",
    "start": "2652880",
    "end": "2658480"
  },
  {
    "text": "since you know you might end up in a state where you have duplicate attempts to write the same item to the storage",
    "start": "2658480",
    "end": "2664720"
  },
  {
    "text": "nodes it's okay because you know these operations that transaction coordinators",
    "start": "2664720",
    "end": "2670119"
  },
  {
    "text": "are doing they're I important so when the transaction has been fully processed a complete record is written to The",
    "start": "2670119",
    "end": "2676760"
  },
  {
    "text": "Ledger and whenever that ledger is whenever a recovery manager",
    "start": "2676760",
    "end": "2683119"
  },
  {
    "text": "sends say saying that to the transaction coordinator hey go recover transaction coordinator first looks at The Ledger if",
    "start": "2683119",
    "end": "2688880"
  },
  {
    "text": "the transaction is already completed it'll say Bo my job is done you know transaction already",
    "start": "2688880",
    "end": "2694599"
  },
  {
    "text": "finished so overall this is how the system has",
    "start": "2694599",
    "end": "2701200"
  },
  {
    "text": "recovery automatically built into it so that clients don't have to worry about all this logic so overall the architecture looks",
    "start": "2701200",
    "end": "2707720"
  },
  {
    "text": "like this you have an application you have request out a transaction coordinator writing to The Ledger and then you have storage nodes involved in",
    "start": "2707720",
    "end": "2713079"
  },
  {
    "text": "doing these these transactional operations if it crashes you have the recovery manager and",
    "start": "2713079",
    "end": "2720680"
  },
  {
    "text": "perfect all right so the recovery approach the process that we disc it",
    "start": "2720680",
    "end": "2726240"
  },
  {
    "text": "handles atomicity but what about ensuring that these transactions",
    "start": "2726240",
    "end": "2731680"
  },
  {
    "text": "execute in a Serial order right that was another thing I said we need to in this",
    "start": "2731680",
    "end": "2737440"
  },
  {
    "text": "talk I'll focus on automic and then isolation so let's find out how",
    "start": "2737440",
    "end": "2742559"
  },
  {
    "text": "we achieve the isolation so for serializability we decided to borrow an old technique called timestamp ordering",
    "start": "2742559",
    "end": "2750119"
  },
  {
    "text": "and this approach has been credited to both David Reed and Phil brandstein in",
    "start": "2750119",
    "end": "2756599"
  },
  {
    "text": "and it goes back about 40 years and we adopted timestamp",
    "start": "2756599",
    "end": "2762520"
  },
  {
    "text": "ordering to apply that to a key value store so how did we do it essentially",
    "start": "2762520",
    "end": "2770200"
  },
  {
    "text": "the basic idea is that transaction coordinator assigns the timestamp to each transaction the time stamp is the",
    "start": "2770200",
    "end": "2776599"
  },
  {
    "text": "value of the coordinator's current clock and the assigned time stamp defines the",
    "start": "2776599",
    "end": "2783200"
  },
  {
    "text": "serial order for all the transactions quite simply as long as the transaction execute at the assigned time the",
    "start": "2783200",
    "end": "2790319"
  },
  {
    "text": "serializability is achieved if the storage node can accept the request they durably store the metadata for the item",
    "start": "2790319",
    "end": "2797359"
  },
  {
    "text": "that they have accepted the transaction and reply yes so you know in this",
    "start": "2797359",
    "end": "2802960"
  },
  {
    "text": "particular example it sends the request to these two storage nodes get an acknowledgement back and then boom",
    "start": "2802960",
    "end": "2810880"
  },
  {
    "text": "transaction goes to the commit phase the important Point note here is that once a time stamp has been assigned",
    "start": "2810880",
    "end": "2818119"
  },
  {
    "text": "and precond condition checked the nodes participating in the transaction can perform their",
    "start": "2818119",
    "end": "2824440"
  },
  {
    "text": "operation without coordination right each Storage Note can independently is responsible for",
    "start": "2824440",
    "end": "2830440"
  },
  {
    "text": "ensuring that the request involving in the items are executed in the proper order and for rejecting conflicting",
    "start": "2830440",
    "end": "2837040"
  },
  {
    "text": "transactions that can be you know that can come come out of order so the commit",
    "start": "2837040",
    "end": "2842839"
  },
  {
    "text": "phase each trans each Storage Note can validate that the transactions are executed in the specific time stamp",
    "start": "2842839",
    "end": "2849520"
  },
  {
    "text": "order if not they can fail the request perfect in practice to handle the",
    "start": "2849520",
    "end": "2856240"
  },
  {
    "text": "overall like the load that you see that we'll see from transactions there is a large number of transaction and",
    "start": "2856240",
    "end": "2863119"
  },
  {
    "text": "coordinators operating in parallel and you know different transactions accessing overlap overlapping set of",
    "start": "2863119",
    "end": "2870599"
  },
  {
    "text": "items can be assigned time stamps by different coordinators serializability holds even",
    "start": "2870599",
    "end": "2877760"
  },
  {
    "text": "of even if the coordinators do not have synchronized clocks serializability holds even if the",
    "start": "2877760",
    "end": "2883960"
  },
  {
    "text": "different coordinators have have do not have synchronized clocks but even if they don't have it I think the most",
    "start": "2883960",
    "end": "2891280"
  },
  {
    "text": "important property here is that the value of uh the values of different",
    "start": "2891280",
    "end": "2897559"
  },
  {
    "text": "coordinators if they go out of sync there may be a case where transactions they start aborting unnecessarily and",
    "start": "2897559",
    "end": "2904200"
  },
  {
    "text": "I'll talk about it in a few slides so how do we ensure that you know the times are um not going too much out of",
    "start": "2904200",
    "end": "2911720"
  },
  {
    "text": "sync AWS provides a Time sync service that we use to keep the clocks in coordinator fleets closely in sync say",
    "start": "2911720",
    "end": "2918319"
  },
  {
    "text": "within a few milliseconds but even with the perfectly synchronized clocks transactions can arrive at the storage",
    "start": "2918319",
    "end": "2924000"
  },
  {
    "text": "nodes out of order due to message delays in the network failures and recovery and you know all those other things storage",
    "start": "2924000",
    "end": "2930440"
  },
  {
    "text": "node therefore must effectively deal with transactions that arrived in any order",
    "start": "2930440",
    "end": "2937599"
  },
  {
    "text": "[Music]",
    "start": "2939750",
    "end": "2945199"
  }
]