[
  {
    "text": "thanks everyone for being here today um we often consider designing services to",
    "start": "4520",
    "end": "10480"
  },
  {
    "text": "make them more resilient um but believe it or not no matter how many checks we put in place or how often we're doing",
    "start": "10480",
    "end": "16640"
  },
  {
    "text": "the right thing there's of there's going to be things that go wrong um in order to ensure that your services can handle",
    "start": "16640",
    "end": "23680"
  },
  {
    "text": "these things that go wrong that will happen to them we exercise resilience testing and",
    "start": "23680",
    "end": "28720"
  },
  {
    "text": "experimentation um we talk a lot as an industry about designing for testability and there have been a lot of good talks",
    "start": "28720",
    "end": "34239"
  },
  {
    "text": "on that in fact even today at cuon and it's not a very it's not a a new thing",
    "start": "34239",
    "end": "39280"
  },
  {
    "text": "at this moment but there are certain types of tests in experiments that are new such as chaos experiments and there",
    "start": "39280",
    "end": "45680"
  },
  {
    "text": "are ways that we can design our services that will make us better prepared um to participate in these kinds of resiliency",
    "start": "45680",
    "end": "52320"
  },
  {
    "text": "tests and these kinds of resiliency experiments um in design discussions at",
    "start": "52320",
    "end": "57480"
  },
  {
    "text": "Netflix nowadays we've moved from what happens when this what happens if this fails to what happens when this fails",
    "start": "57480",
    "end": "65560"
  },
  {
    "text": "the bigger the system is the harder it's going to be to maintain and um the higher importance that's going to be",
    "start": "65560",
    "end": "71600"
  },
  {
    "text": "placed on testability it's no secret that Netflix's systems are heavily riant on",
    "start": "71600",
    "end": "77560"
  },
  {
    "text": "fallback paths and in order to make sure these fallback paths are completing the way that we expect them to um we test",
    "start": "77560",
    "end": "85640"
  },
  {
    "text": "them every day in the form of chaos experiments so I I want to show you one of my favorite chaos experiments um here",
    "start": "85640",
    "end": "94759"
  },
  {
    "text": "and so this is an example of a screen that a lot of us would likely see um I'm",
    "start": "94759",
    "end": "100200"
  },
  {
    "text": "guessing a lot of us would likely see the third row right now the because you watch stranger things row if you're if",
    "start": "100200",
    "end": "106079"
  },
  {
    "text": "you're still getting through stranger things I totally understand if you need to dip out and I won't look um but um",
    "start": "106079",
    "end": "114520"
  },
  {
    "text": "one of the rows that we have is the continue watching row and um say that we were running a",
    "start": "114520",
    "end": "121200"
  },
  {
    "text": "chaos experiment for this row uh to make sure that you know if this row failed if we weren't able to load what you were",
    "start": "121200",
    "end": "128000"
  },
  {
    "text": "previously watching we wouldn't expect all of Netflix to go down right we would",
    "start": "128000",
    "end": "133959"
  },
  {
    "text": "maybe expect a fallback path like this right we'd maybe expect just that road to not be there we might expect to just",
    "start": "133959",
    "end": "140879"
  },
  {
    "text": "serve something else there but during the chaos experiment we ran to test this",
    "start": "140879",
    "end": "146360"
  },
  {
    "text": "we realized something like this might have happened and because we ran a chaos experiment on it we were able to verify",
    "start": "146360",
    "end": "154400"
  },
  {
    "text": "that this didn't happen before customers looked at us like",
    "start": "154400",
    "end": "160280"
  },
  {
    "text": "this I'm Nora Jones I'm a senior chaos engineer at Netflix and today I'm going",
    "start": "163840",
    "end": "169920"
  },
  {
    "text": "to talk to you about how you can design your services to participate in experiments like that to participate in",
    "start": "169920",
    "end": "176599"
  },
  {
    "text": "resiliency experiments to participate in chaos experiments um and through resiliency testing your",
    "start": "176599",
    "end": "182800"
  },
  {
    "text": "life can be made a little bit easier you'll get page less your customers will will be happier and your service will be",
    "start": "182800",
    "end": "189040"
  },
  {
    "text": "overall more available um I work with a lot of great people at Netflix and I'd like to thank",
    "start": "189040",
    "end": "194799"
  },
  {
    "text": "my team for being here today Ali Haley Lauren and Casey um and letting me share",
    "start": "194799",
    "end": "200440"
  },
  {
    "text": "this experience with with you all we also got the opportunity to participate in a book together recently um it's free",
    "start": "200440",
    "end": "207680"
  },
  {
    "text": "on the O'Reilly website right now if you like to check it out and I will have uh some copies of them at the at the",
    "start": "207680",
    "end": "214480"
  },
  {
    "text": "Netflix reception that we're hosting on Wednesday after the conference so let's get started how can",
    "start": "214480",
    "end": "222519"
  },
  {
    "text": "teams Design Services for resiliency testing um we're going to go through several different ways that to that we",
    "start": "222519",
    "end": "229080"
  },
  {
    "text": "can make resiliency testing easier on you so one is enabling failure injection",
    "start": "229080",
    "end": "234760"
  },
  {
    "text": "another is enabling um RPC remote procedure calls um uh one is enabling",
    "start": "234760",
    "end": "240920"
  },
  {
    "text": "fallback paths and having ways that we can discover them uh we should enable",
    "start": "240920",
    "end": "246680"
  },
  {
    "text": "proper monitoring and have a key business metric that we need to look for or several key business metrics that we",
    "start": "246680",
    "end": "252040"
  },
  {
    "text": "need to look for and we want to have proper timeouts and ways to discover these as",
    "start": "252040",
    "end": "258239"
  },
  {
    "text": "well but let's take a step back for a second there's a lot of known ways to",
    "start": "258239",
    "end": "263320"
  },
  {
    "text": "increase confidence and resilience um like we've seen through other talks throughout the day and and um and other",
    "start": "263320",
    "end": "269479"
  },
  {
    "text": "things that we've practiced in in managing microservices in general so one of them is unit",
    "start": "269479",
    "end": "275800"
  },
  {
    "text": "tests so unit tests work like this it's on a component level and they're critical for verifying expected results",
    "start": "275800",
    "end": "282840"
  },
  {
    "text": "at a very granular level um we have an input and we verify that we get our",
    "start": "282840",
    "end": "288680"
  },
  {
    "text": "expected output in place um and it's to validate what an individual component is",
    "start": "288680",
    "end": "294880"
  },
  {
    "text": "doing uh we also have integration tests and integration tests work similar to",
    "start": "294880",
    "end": "301039"
  },
  {
    "text": "unit tests and they have a similar goal except they verify that components work well together and even Services work",
    "start": "301039",
    "end": "307919"
  },
  {
    "text": "well together so those components working together have valid inputs and get their expected outputs and even",
    "start": "307919",
    "end": "313840"
  },
  {
    "text": "those Services have valid inputs and get their expected outputs um Michael bryac",
    "start": "313840",
    "end": "318960"
  },
  {
    "text": "said in in his talk in uh cuon New York he said don't touch your code locally write an integration test to test your",
    "start": "318960",
    "end": "326120"
  },
  {
    "text": "apis and if you can't write the test then refactor your code deciding to trust your test is a cultural thing and",
    "start": "326120",
    "end": "333319"
  },
  {
    "text": "that rings so true and I believe that's something that we really uh believe in",
    "start": "333319",
    "end": "338720"
  },
  {
    "text": "here at Netflix as well uh we we don't just comment out our test if you know if",
    "start": "338720",
    "end": "344199"
  },
  {
    "text": "they're not working properly right like that's the easy thing to do if your tests are not working properly you might",
    "start": "344199",
    "end": "350000"
  },
  {
    "text": "need to make some changes in your code right and so that that is really a cultural thing that that takes place",
    "start": "350000",
    "end": "355960"
  },
  {
    "text": "right you all have to believe that together and you you just kind of have to do it it um and so this brings me to",
    "start": "355960",
    "end": "362759"
  },
  {
    "text": "a point with a new way to increase confidence and resilience and this is through chaos",
    "start": "362759",
    "end": "368400"
  },
  {
    "text": "experimentation um so while unit testing and integration testing are are valuable for identifying um defects they can miss",
    "start": "368400",
    "end": "376400"
  },
  {
    "text": "other problems uh they can miss problems that we see in production right with the with the load of production in place um",
    "start": "376400",
    "end": "383680"
  },
  {
    "text": "with you know verifying that that uh that failing calls do the right thing that they're supposed to when they fail",
    "start": "383680",
    "end": "391120"
  },
  {
    "text": "um so it's impossible to know that the system as a whole will be available and fault tolerant unless we have chaos",
    "start": "391120",
    "end": "397840"
  },
  {
    "text": "experiments in place so we run these in production and they look similar to the setup as an integration test that we saw",
    "start": "397840",
    "end": "404720"
  },
  {
    "text": "before um except from calls from service a to service B we can fail those in",
    "start": "404720",
    "end": "410440"
  },
  {
    "text": "production or we can add latency to them uh now I before I explain to you how we",
    "start": "410440",
    "end": "416800"
  },
  {
    "text": "design for this form of resilience experimentation I want to explain exactly how this works in",
    "start": "416800",
    "end": "423039"
  },
  {
    "text": "Netflix so in order to do that I need to show you our key business metric and",
    "start": "423039",
    "end": "429400"
  },
  {
    "text": "before you do chaos experiments it's really really important that you have a key business metric that you monitor in",
    "start": "429400",
    "end": "434639"
  },
  {
    "text": "place at Netflix our key business metric is SPS or stream starts per second",
    "start": "434639",
    "end": "441199"
  },
  {
    "text": "meaning how many people are actually pressing play at a given second or a given point in time um if you work at an",
    "start": "441199",
    "end": "447599"
  },
  {
    "text": "e-commerce company your key business metrics might be you know adding to cart or making sure people can check out or",
    "start": "447599",
    "end": "454960"
  },
  {
    "text": "searching appropriately um but this is something that we really keep in place as we're doing these chaos",
    "start": "454960",
    "end": "462000"
  },
  {
    "text": "experiments so um this is Netflix's chap um I want to take a quick survey first",
    "start": "462000",
    "end": "468120"
  },
  {
    "text": "how many people are familiar with chaos monkey wow it's almost every hand how",
    "start": "468120",
    "end": "473919"
  },
  {
    "text": "many people are using some form of a chaos monkey in their company",
    "start": "473919",
    "end": "480680"
  },
  {
    "text": "some hands um so chaos monkey is great um but",
    "start": "483560",
    "end": "489840"
  },
  {
    "text": "there's a lot more failure modes that can happen other than single instance failures right um and and those are uh",
    "start": "489840",
    "end": "498280"
  },
  {
    "text": "those are things that we should be able to verify so in addition to chaos monkey Netflix we have a new tool called Chap",
    "start": "498280",
    "end": "505240"
  },
  {
    "text": "and chap stands for our chaos automation platform um and it works like this um so this is how",
    "start": "505240",
    "end": "513039"
  },
  {
    "text": "traffic looks normally right we have we have say we have 100% of traffic going",
    "start": "513039",
    "end": "518279"
  },
  {
    "text": "from a service called API to a service called personalization so we then want to make",
    "start": "518279",
    "end": "525519"
  },
  {
    "text": "a calculation based on the amount of traffic that we have right now and relate that calculation to our key",
    "start": "525519",
    "end": "531440"
  },
  {
    "text": "business metric so the key business metric that I brought up to you earlier was SPS so we've come up with a",
    "start": "531440",
    "end": "537760"
  },
  {
    "text": "calculation at Netflix in such a way way that it affects the lowest SPS possible but still enough to give us a signal",
    "start": "537760",
    "end": "545079"
  },
  {
    "text": "that our chaos experiment is working correctly So based on that calculation",
    "start": "545079",
    "end": "550120"
  },
  {
    "text": "and relating to SPS we find a certain percentage of traffic so say in this",
    "start": "550120",
    "end": "556880"
  },
  {
    "text": "case we calculated 2% of traffic and we split that in half and we take 1% and we use uh our",
    "start": "556880",
    "end": "565279"
  },
  {
    "text": "gateway called Zuul and we route that into a control cluster",
    "start": "565279",
    "end": "570839"
  },
  {
    "text": "and we don't do anything with the traffic that's going into the control cluster we just have 1% of traffic going",
    "start": "570839",
    "end": "576079"
  },
  {
    "text": "into the control cluster then we take that other 1% that we calculated and we put it into our",
    "start": "576079",
    "end": "582240"
  },
  {
    "text": "experiment cluster and this is where we actually fail it or we add",
    "start": "582240",
    "end": "587959"
  },
  {
    "text": "latency um and it's really important that we have the exact same amount in",
    "start": "587959",
    "end": "593760"
  },
  {
    "text": "our control cluster as our experiment cluster because we can actually monitor our key business business metrics and",
    "start": "593760",
    "end": "600200"
  },
  {
    "text": "how close they are to each other so that key business metric SPS I brought up earlier we actually monitor this as a",
    "start": "600200",
    "end": "607079"
  },
  {
    "text": "part of our trap experiments and short it automatically if the experiment",
    "start": "607079",
    "end": "612560"
  },
  {
    "text": "deviates too far from the control cluster um so we can add a bunch of other key metrics in there too and short",
    "start": "612560",
    "end": "619079"
  },
  {
    "text": "them automatically based on it or we can just fail the experiment and let it run all the way through but the key business",
    "start": "619079",
    "end": "624839"
  },
  {
    "text": "metric is something that we don't want the customer to have impacted so we have that shorted a",
    "start": "624839",
    "end": "630720"
  },
  {
    "text": "automatically um and it will short whether or not it's below the control",
    "start": "630720",
    "end": "636120"
  },
  {
    "text": "line or above the control line um above it may indic be may be indicative of a",
    "start": "636120",
    "end": "641399"
  },
  {
    "text": "retry storm whereas below it may be indicative of some",
    "start": "641399",
    "end": "646240"
  },
  {
    "text": "failures so chop works on top of a service called uh fit which which works",
    "start": "646480",
    "end": "652920"
  },
  {
    "text": "um uh chop works on top of a service called fit and um it it's our failure",
    "start": "652920",
    "end": "659360"
  },
  {
    "text": "injection testing library and it's important um in order to test for resiliency that you have failure",
    "start": "659360",
    "end": "665200"
  },
  {
    "text": "injection testing enabled so um however your organization decides to implement failure inection injection testing make",
    "start": "665200",
    "end": "672120"
  },
  {
    "text": "sure it's easy for service owners to turn it on so I'm going to give you all a sample failure injection library today",
    "start": "672120",
    "end": "679200"
  },
  {
    "text": "and this is something um that I modeled off of Netflix's at a very very high",
    "start": "679200",
    "end": "684680"
  },
  {
    "text": "level um and it uh it essentially allows",
    "start": "684680",
    "end": "689959"
  },
  {
    "text": "you to fail or um or make a service latent and so I'm going to go through the code with you so this serves as a a",
    "start": "689959",
    "end": "698839"
  },
  {
    "text": "skeleton failure injection Library um I built it in FSH because I enjoy the succinctness of putting it on conference",
    "start": "698839",
    "end": "705480"
  },
  {
    "text": "screens there's not a lot of overhead with it and I have a simple API for the library that can demonstrate its use too",
    "start": "705480",
    "end": "712320"
  },
  {
    "text": "so our chaos module here uh defines our main failure injection we have name uh",
    "start": "712320",
    "end": "717680"
  },
  {
    "text": "which is the type of G we're injecting this is very important for logging purposes um if we want to truly remain",
    "start": "717680",
    "end": "724920"
  },
  {
    "text": "chaotic in our approach uh we we could probably not allow the user to pick the chaos um but we do want to log it and",
    "start": "724920",
    "end": "732160"
  },
  {
    "text": "have it be a parameter um or should chaos is a Boolean and uh this determines if we've",
    "start": "732160",
    "end": "739360"
  },
  {
    "text": "met our predefined criteria to inject chaos so this is important for safety",
    "start": "739360",
    "end": "744760"
  },
  {
    "text": "concerns right so we don't want to inject chaos if our predefined criteria hasn't been met and you want to allow",
    "start": "744760",
    "end": "751519"
  },
  {
    "text": "service owners to uh decide that predefined criteria to some extent and",
    "start": "751519",
    "end": "756760"
  },
  {
    "text": "then chaos um in F SHP you can actually pass in functions as parameters to other",
    "start": "756760",
    "end": "762120"
  },
  {
    "text": "functions which is pretty cool um so this is the chaos function we will be injecting into our normal function um",
    "start": "762120",
    "end": "768920"
  },
  {
    "text": "and here's our async arrow and at a high level the async arrow function serves as",
    "start": "768920",
    "end": "773959"
  },
  {
    "text": "a function that produces an asynchronous computation as an output and then the",
    "start": "773959",
    "end": "779480"
  },
  {
    "text": "usage of the dbang here is interesting where in most languages the bang means not in FP it actually serves a unique",
    "start": "779480",
    "end": "786279"
  },
  {
    "text": "purpose of a synchronous workflows uh like the one in this function um so the dubang here allows us to execute this",
    "start": "786279",
    "end": "793160"
  },
  {
    "text": "chaos parameter um and allows us to enable execution on other computation",
    "start": "793160",
    "end": "798199"
  },
  {
    "text": "threads as the chaos parameter function is being performed so here are our two main types",
    "start": "798199",
    "end": "804199"
  },
  {
    "text": "of chaos uh we have fail with exception right so that could raise a random except ception and then uh we have",
    "start": "804199",
    "end": "811760"
  },
  {
    "text": "introduced latency and this um has a latency parameter and allows you to put",
    "start": "811760",
    "end": "817279"
  },
  {
    "text": "in a certain number of milliseconds that you'd like to add latency to your call and it will sleep to for that certain",
    "start": "817279",
    "end": "823480"
  },
  {
    "text": "number of time so then um here's some sample criteria that we can do before we need",
    "start": "823480",
    "end": "830720"
  },
  {
    "text": "to meet before injecting the chaos and here's where it gets interesting um there's a bunch of predefined criteria",
    "start": "830720",
    "end": "836519"
  },
  {
    "text": "you can put you can uh suggest it to only do between 9 and 5 so that can be a",
    "start": "836519",
    "end": "842240"
  },
  {
    "text": "predefined safety criteria you put like maybe you don't want to cause chaos after hours right maybe you don't want",
    "start": "842240",
    "end": "848079"
  },
  {
    "text": "to cause chaos when your developers aren't at work you don't want to be mean to them they are your co-workers right",
    "start": "848079",
    "end": "854600"
  },
  {
    "text": "um don't want them to get paged more than more than they need to be paged um or you can add other criteria as well um",
    "start": "854600",
    "end": "861519"
  },
  {
    "text": "it's totally up to you and so here's the API so you want to make a simple enough API that your that your um Developers",
    "start": "861519",
    "end": "869120"
  },
  {
    "text": "can use it um so uh a is your healthier normal function and it gets piped with",
    "start": "869120",
    "end": "875519"
  },
  {
    "text": "this little uh with this little guy here and it gets piped or injected with the chos functions listed given that the uh",
    "start": "875519",
    "end": "883199"
  },
  {
    "text": "criteria that we defined before is met so now that you have sort of a",
    "start": "883199",
    "end": "889160"
  },
  {
    "text": "background on how failure injection testing works and um how our chaos",
    "start": "889160",
    "end": "894959"
  },
  {
    "text": "automation platform Works um you you kind of have have an idea of where we",
    "start": "894959",
    "end": "900040"
  },
  {
    "text": "were at at a given time so we were sitting with teams we were sitting with",
    "start": "900040",
    "end": "905560"
  },
  {
    "text": "service owners on a regular basis and we were trying to come up with what made a good chaos experiment right and as you",
    "start": "905560",
    "end": "912399"
  },
  {
    "text": "can imagine that was a lot of meetings right and that doesn't scale it takes a lot of effort to come up with what makes",
    "start": "912399",
    "end": "918480"
  },
  {
    "text": "a good chaos experiment uh you have to decide where to inject your failure you",
    "start": "918480",
    "end": "923519"
  },
  {
    "text": "have to decide if you're doing a latency experiment how much time you want to put in there um you you have to figure out",
    "start": "923519",
    "end": "930199"
  },
  {
    "text": "what the RPC calls are you have to figure out what the associated fallbacks are there's a lot of stuff that goes",
    "start": "930199",
    "end": "936959"
  },
  {
    "text": "into it and it was very time consuming um and so we decided to start automating",
    "start": "936959",
    "end": "943480"
  },
  {
    "text": "the creation of these we said there has to be a better way than sitting with teams and figuring out what makes a good",
    "start": "943480",
    "end": "949199"
  },
  {
    "text": "chaos experiment let's automate the creation of these so we had to get all that stuff that I was talking about",
    "start": "949199",
    "end": "955160"
  },
  {
    "text": "before those RPC calls those fallback parameters those timeouts uh retries all",
    "start": "955160",
    "end": "961160"
  },
  {
    "text": "that stuff and feed it into this uh into this experiment Creator and that brings",
    "start": "961160",
    "end": "966600"
  },
  {
    "text": "me to this point um have good monitoring in place for configuration changes and",
    "start": "966600",
    "end": "972199"
  },
  {
    "text": "have good monitoring in place for your configurations so all this stuff was in",
    "start": "972199",
    "end": "977720"
  },
  {
    "text": "a lot of different places right so we're we're making calls out to like five different things right now just to get",
    "start": "977720",
    "end": "983040"
  },
  {
    "text": "all this configuration information in one place and now we do have it in one place but it's it's very useful for for",
    "start": "983040",
    "end": "990040"
  },
  {
    "text": "for performing resiliency",
    "start": "990040",
    "end": "993480"
  },
  {
    "text": "experiments um so we also want to have RPC enabled remote procedure calls um we",
    "start": "997800",
    "end": "1006240"
  },
  {
    "text": "needed information on remote procedure calls whether or not these calls had Associated hist commands hist commands",
    "start": "1006240",
    "end": "1013079"
  },
  {
    "text": "are our circuit breaker or fallback path uh whether or not those histric commands",
    "start": "1013079",
    "end": "1018199"
  },
  {
    "text": "had associate fallbacks with them we needed to get",
    "start": "1018199",
    "end": "1023759"
  },
  {
    "text": "timeouts we need to get retries and again we needed to have these all in one",
    "start": "1023839",
    "end": "1029520"
  },
  {
    "text": "place uh my colleague Lauren has this hypothesis that config changes are more",
    "start": "1029520",
    "end": "1034918"
  },
  {
    "text": "dangerous than code changes uh and this obviously came from something not just didn't just come from",
    "start": "1034919",
    "end": "1041280"
  },
  {
    "text": "nowhere has anyone in here ever had a configuration change that's caused an issue for them before",
    "start": "1041280",
    "end": "1047678"
  },
  {
    "text": "surprisingly that is almost every hand in the room right but we don't place a lot of monitoring on them we don't place",
    "start": "1047679",
    "end": "1053720"
  },
  {
    "text": "a lot of rules on them like it's it's it's kind of crazy some some configuration files don't change and",
    "start": "1053720",
    "end": "1059720"
  },
  {
    "text": "then you you kind of look at them and they haven't changed in the last four years and the employee that changed them",
    "start": "1059720",
    "end": "1064799"
  },
  {
    "text": "isn't even here anymore and you're like what what do we do here right and so it's really important to have like good",
    "start": "1064799",
    "end": "1070760"
  },
  {
    "text": "documentation around them and and good monitoring around these configuration changes and and make them into something",
    "start": "1070760",
    "end": "1078000"
  },
  {
    "text": "that make them into an API that you could you could call and you can figure out what these configurations",
    "start": "1078000",
    "end": "1083799"
  },
  {
    "text": "are um so let's talk about RPC um at Netflix our remote procedure calls are",
    "start": "1083799",
    "end": "1089320"
  },
  {
    "text": "are called ribbon externally we call them niws internally and uh they're the",
    "start": "1089320",
    "end": "1094360"
  },
  {
    "text": "services we've discussed that need to talk to each other reliably with minimal minimal Interruption from the network",
    "start": "1094360",
    "end": "1100520"
  },
  {
    "text": "issues scaling events isolated software problems and other dangers um and this",
    "start": "1100520",
    "end": "1105919"
  },
  {
    "text": "means having a valid address on the end of AR rest interaction so ribbon is",
    "start": "1105919",
    "end": "1111159"
  },
  {
    "text": "Netflix's uh interprocess communication and it's a built-in software load balancers the primary model involves",
    "start": "1111159",
    "end": "1118600"
  },
  {
    "text": "rest calls and it has uh load balancing features it has fault tolerance it has",
    "start": "1118600",
    "end": "1124080"
  },
  {
    "text": "multiple protocol in the form of HTTP TCP and UDP and it has caching and",
    "start": "1124080",
    "end": "1131440"
  },
  {
    "text": "batching um we needed to get those RPC calls but we also needed to get their",
    "start": "1131440",
    "end": "1137799"
  },
  {
    "text": "Associated time outs as well so knowing your timeouts is very very important for",
    "start": "1137799",
    "end": "1143360"
  },
  {
    "text": "doing latency experient experiments because we use these this information to fuel what makes a good latency",
    "start": "1143360",
    "end": "1149679"
  },
  {
    "text": "experiment and to ensure that we're running a proper latency experiment um so timeouts when we Define",
    "start": "1149679",
    "end": "1158360"
  },
  {
    "text": "timeouts we say at what point does the service give up right um and timeouts are really hard to to figure out uh",
    "start": "1158360",
    "end": "1165799"
  },
  {
    "text": "they're they're hard to get right a a long timeout means that you know the note is declared dead meaning a user has",
    "start": "1165799",
    "end": "1171840"
  },
  {
    "text": "to wait or it sees an error message which probably isn't a good experience and then a time out that's Sho Too Short",
    "start": "1171840",
    "end": "1179080"
  },
  {
    "text": "might mean that the note is prematurely declared dead which isn't good either so you need something right in the middle",
    "start": "1179080",
    "end": "1184360"
  },
  {
    "text": "you need a sweet spot and Chaos experiments can actually help test for that",
    "start": "1184360",
    "end": "1190640"
  },
  {
    "text": "um so retries are commonly associated with timeouts right uh immediately",
    "start": "1190640",
    "end": "1197000"
  },
  {
    "text": "retrying a failure after an oper ation is not typically a great idea uh Netflix",
    "start": "1197000",
    "end": "1202240"
  },
  {
    "text": "we use exponential back off on retries to avoid pulsing um and but it's",
    "start": "1202240",
    "end": "1207400"
  },
  {
    "text": "important for us to understand this logic it's important for you to for for everyone to understand the underlying",
    "start": "1207400",
    "end": "1212679"
  },
  {
    "text": "logic between the retries and between the timeouts and the exponential back off and and have that that logic and",
    "start": "1212679",
    "end": "1219679"
  },
  {
    "text": "that information living living in a place that you can easily call and access um so again understand the logic",
    "start": "1219679",
    "end": "1227679"
  },
  {
    "text": "between your timeouts your retries um a Timeout on the first attemp is likely indicative of a problem with",
    "start": "1227679",
    "end": "1233919"
  },
  {
    "text": "the node and you want to flag this as an anti- pattern um for a service behind a",
    "start": "1233919",
    "end": "1239919"
  },
  {
    "text": "web API fast enough is probably between 10 and 100 milliseconds um and beyond",
    "start": "1239919",
    "end": "1245720"
  },
  {
    "text": "that you might actually start to lose some some customers and some",
    "start": "1245720",
    "end": "1250760"
  },
  {
    "text": "users so this brings me to my next Point um circuit breakers or histrix and this",
    "start": "1250760",
    "end": "1256760"
  },
  {
    "text": "is actually first introduced by Michael Ard and his book release it and he's actually uh released the second version",
    "start": "1256760",
    "end": "1264080"
  },
  {
    "text": "of his book release it too uh which is out now and I highly recommend it so he introduced the concept of circuit",
    "start": "1264080",
    "end": "1270320"
  },
  {
    "text": "breakers um and applied them to software and so a circuit breaker exists to allow",
    "start": "1270320",
    "end": "1275919"
  },
  {
    "text": "one subsystem to fail without destroying the entire system as a whole um but once",
    "start": "1275919",
    "end": "1281159"
  },
  {
    "text": "the danger is passed it can reset itself and restore the full function of the program so we apply this to software at",
    "start": "1281159",
    "end": "1288159"
  },
  {
    "text": "Netflix in the form of of what we call histrix and this is actually open sourced um and so so you can you can",
    "start": "1288159",
    "end": "1294600"
  },
  {
    "text": "access it at any point as well as along with ribbon what I showed before um so traffic coming from the calling system",
    "start": "1294600",
    "end": "1301840"
  },
  {
    "text": "to the service you're talking to that traffic is monitored by the circuit breaker um and once you hit a certain",
    "start": "1301840",
    "end": "1308320"
  },
  {
    "text": "error threshold it will open essentially to the point where the circuit breaker opens it no longer takes traffic the",
    "start": "1308320",
    "end": "1315360"
  },
  {
    "text": "failing service no longer takes traffic uh to the service that's having problems and it can immediately um return a",
    "start": "1315360",
    "end": "1321840"
  },
  {
    "text": "failure or fail up the stack and so hist's maintains this",
    "start": "1321840",
    "end": "1327000"
  },
  {
    "text": "circuit breaker functionality so um as we were gathering",
    "start": "1327000",
    "end": "1333080"
  },
  {
    "text": "info for the RPC calls and uh for the timeouts and for the retries we also",
    "start": "1333080",
    "end": "1338200"
  },
  {
    "text": "needed to see whether or not those those rpcs had histri commands associated with",
    "start": "1338200",
    "end": "1343320"
  },
  {
    "text": "them and in order to determine whether or not something was safe to fail we had",
    "start": "1343320",
    "end": "1348640"
  },
  {
    "text": "to ensure that it had a fallback path and um there may be times when you know something is still safe to fail but",
    "start": "1348640",
    "end": "1355320"
  },
  {
    "text": "doesn't have necessarily a fallback in place um but this was our way of of",
    "start": "1355320",
    "end": "1361400"
  },
  {
    "text": "making sure that it was safe so um if your service is non-critical I I would argue that you should ensure that there",
    "start": "1361400",
    "end": "1367840"
  },
  {
    "text": "are fallback paths in place or if you're deeming it as non-critical meaning that",
    "start": "1367840",
    "end": "1372919"
  },
  {
    "text": "you know it shouldn't bring your entire website down if it fails so there's a few different fallback strategies you",
    "start": "1372919",
    "end": "1379320"
  },
  {
    "text": "can have in place um uh perhaps it could return a good",
    "start": "1379320",
    "end": "1385039"
  },
  {
    "text": "response to the last cash value um it could return a fallback service or it can return some sort of canned response",
    "start": "1385039",
    "end": "1392279"
  },
  {
    "text": "so um you know maybe instead of your recommended titles we just show you generic titles right on the screen",
    "start": "1392279",
    "end": "1398760"
  },
  {
    "text": "instead of your recommendations showing we show you something generic so instead of the whole service failing you're just",
    "start": "1398760",
    "end": "1405039"
  },
  {
    "text": "not seeing you know it ex exactly as you're used",
    "start": "1405039",
    "end": "1410320"
  },
  {
    "text": "to so it's really important to know what these fallback strategies are and how to",
    "start": "1410320",
    "end": "1416240"
  },
  {
    "text": "get that information um this actually relates to your business metric so much",
    "start": "1416240",
    "end": "1421679"
  },
  {
    "text": "because you should know like when your critical Services fail or when you're not critical Services fail what's",
    "start": "1421679",
    "end": "1427520"
  },
  {
    "text": "actually happening to them and if that state changes at any given point that should be something that you're able to",
    "start": "1427520",
    "end": "1433480"
  },
  {
    "text": "consume before you're doing that your resiliency tests um",
    "start": "1433480",
    "end": "1439559"
  },
  {
    "text": "so we monitor our histri commands during our resiliency test uh we see our count",
    "start": "1439559",
    "end": "1446840"
  },
  {
    "text": "successes we see our account fallback successes so we can actually see these during a chaos experiment that we run uh",
    "start": "1446840",
    "end": "1454400"
  },
  {
    "text": "and then we'll count the failures in the timeouts as well so based on our fallback strategies and based on what we",
    "start": "1454400",
    "end": "1459919"
  },
  {
    "text": "expect from a histri command we can verify that this is okay during a chaos experiment by looking at these graphs",
    "start": "1459919",
    "end": "1468480"
  },
  {
    "text": "so um with all that in mind I I think it's important to ensure Synergy between",
    "start": "1468480",
    "end": "1474360"
  },
  {
    "text": "your hist's timeouts your RPC timeouts and your timeout logic um and your retry",
    "start": "1474360",
    "end": "1479840"
  },
  {
    "text": "logic they all play a huge role together and what we found when we were gathering",
    "start": "1479840",
    "end": "1486200"
  },
  {
    "text": "this info was that they were all in a lot of different places and because they were all in a lot of different places",
    "start": "1486200",
    "end": "1492640"
  },
  {
    "text": "there were discrepancies between them right and so um so let's go back to chap",
    "start": "1492640",
    "end": "1499799"
  },
  {
    "text": "for a second uh we started doing all this we started Gathering all this info to feed into chap experiments but as we",
    "start": "1499799",
    "end": "1506679"
  },
  {
    "text": "were doing this you know we realized that it wasn't all in one place so we decided to zoom in and we gave we gave",
    "start": "1506679",
    "end": "1512720"
  },
  {
    "text": "chap a monacle uh so we we gave chap the ability to have crucial Optics on its",
    "start": "1512720",
    "end": "1518200"
  },
  {
    "text": "services right and and see this configuration info so here's an example",
    "start": "1518200",
    "end": "1523679"
  },
  {
    "text": "of chaps monacle so this is a um a fake service and and we can see all this",
    "start": "1523679",
    "end": "1529480"
  },
  {
    "text": "information in one place now we started seeing really weird things based on this right uh we started seeing when histrix",
    "start": "1529480",
    "end": "1537039"
  },
  {
    "text": "commands did not have fallbacks enabled that we thought we were supposed to have fallbacks enabled uh we started seeing",
    "start": "1537039",
    "end": "1543120"
  },
  {
    "text": "unwrapped RPC calls like that shouldn't happen either um and then we also",
    "start": "1543120",
    "end": "1548159"
  },
  {
    "text": "started seeing anti- patterns with with retries on the same server um we saw",
    "start": "1548159",
    "end": "1553679"
  },
  {
    "text": "histri commands that were higher than the overall RPC timeouts timeouts that were clearly too high timeouts that were",
    "start": "1553679",
    "end": "1560440"
  },
  {
    "text": "clearly too low and you know um this was this was basically because a",
    "start": "1560440",
    "end": "1568159"
  },
  {
    "text": "lot of this information was in different places and people weren't realizing that you know this logic coincided with each",
    "start": "1568159",
    "end": "1575279"
  },
  {
    "text": "other right um and and so we we started trying to expose this and as as we saw",
    "start": "1575279",
    "end": "1580679"
  },
  {
    "text": "all this information you know we kind of freaked out right we're like oh my gosh what is this right and so we decided you",
    "start": "1580679",
    "end": "1589600"
  },
  {
    "text": "know I realized after seeing this there probably isn't always money in the microservices right like it it gets a",
    "start": "1589600",
    "end": "1595960"
  },
  {
    "text": "little confusing after a while right it's it's a lot hard it's very hard to keep track of all that stuff and that's what resiliency testing is",
    "start": "1595960",
    "end": "1602559"
  },
  {
    "text": "for um we can use a lot of this stuff to feed it into a prioritizer and my",
    "start": "1602559",
    "end": "1608960"
  },
  {
    "text": "colleague kayy Tucker has done a lot of work on prioritizing these chaos experiments and she's uh come up with an",
    "start": "1608960",
    "end": "1615760"
  },
  {
    "text": "algorithm of sorts based on this this information that we found um through",
    "start": "1615760",
    "end": "1621039"
  },
  {
    "text": "through looking for these configuration files and so um this is at a high level",
    "start": "1621039",
    "end": "1626360"
  },
  {
    "text": "how the criticality score is formed but we essentially take parts from that configuration like maybe an RPS stats",
    "start": "1626360",
    "end": "1632880"
  },
  {
    "text": "bucket the number of retries the number of histrix commands and we wait those",
    "start": "1632880",
    "end": "1637919"
  },
  {
    "text": "appropriately and we come up with a criticality score and based on that criticality score we execute that chaos",
    "start": "1637919",
    "end": "1644360"
  },
  {
    "text": "experiment in a certain way right maybe the higher the criticality score the sooner we won that chaos experiment and",
    "start": "1644360",
    "end": "1650960"
  },
  {
    "text": "as we're Gathering more configuration information you know we're getting we're getting a lot more experiments we're",
    "start": "1650960",
    "end": "1657000"
  },
  {
    "text": "getting a higher um a higher level of confidence of which experiments should",
    "start": "1657000",
    "end": "1662559"
  },
  {
    "text": "be run sooner based on their criticality score right and um So based on all this",
    "start": "1662559",
    "end": "1669440"
  },
  {
    "text": "information I want to I want to share with yall some some chaos success stories that we've seen and and these",
    "start": "1669440",
    "end": "1674679"
  },
  {
    "text": "are some of my favorite chaos success stories so one of them was that we ran a chaos experiment which verifies that our",
    "start": "1674679",
    "end": "1681640"
  },
  {
    "text": "fallback path works and it successfully caught an issue in the fallback path and",
    "start": "1681640",
    "end": "1686679"
  },
  {
    "text": "that issue was resolved before it resulted in availability incident um so this one was awesome and",
    "start": "1686679",
    "end": "1692919"
  },
  {
    "text": "it really demonstrated the value of the chaos automation platform you know we're we're experimenting in production we're",
    "start": "1692919",
    "end": "1698880"
  },
  {
    "text": "experimenting on live traffic but we have the ability to cut it off before it impacts customers right but we can see",
    "start": "1698880",
    "end": "1705720"
  },
  {
    "text": "when it's going to cause an issue at some point down the line and this this allows us to pause and take a step back and resolve it without being under the",
    "start": "1705720",
    "end": "1712600"
  },
  {
    "text": "fire of a pager Duty alert um and here was another one of my favorite uh cast",
    "start": "1712600",
    "end": "1718640"
  },
  {
    "text": "success stories it was while failing calls we discovered an increase in license requests for the experiment",
    "start": "1718640",
    "end": "1723919"
  },
  {
    "text": "cluster uh even though all the fallbacks were successful so all those graphs we were looking at earlier they they were",
    "start": "1723919",
    "end": "1729240"
  },
  {
    "text": "all proving successful but there were a bunch of increases in in these requests and that meant that whoever was",
    "start": "1729240",
    "end": "1735320"
  },
  {
    "text": "consuming the fallback was retrying the call which cause an increase in those license",
    "start": "1735320",
    "end": "1741840"
  },
  {
    "text": "requests um and so Netflix Engineers obviously all mean well and and we have",
    "start": "1741840",
    "end": "1747279"
  },
  {
    "text": "stunning colleagues but and everyone has the best intentions but distributed systems are inherently unreliable that's",
    "start": "1747279",
    "end": "1753279"
  },
  {
    "text": "a fact um and reliability can be built into the system and in ways to test for",
    "start": "1753279",
    "end": "1760200"
  },
  {
    "text": "resiliency saving you both time and effort instead of after the fact and I want to do a a little bit of",
    "start": "1760200",
    "end": "1766880"
  },
  {
    "text": "a tangent for a second um and the reason I put those customer success stories and quotes is because we",
    "start": "1766880",
    "end": "1773840"
  },
  {
    "text": "work together with the service teams to do this right we we don't just lob things over a fence at Netflix and",
    "start": "1773840",
    "end": "1779600"
  },
  {
    "text": "expect someone else to take care of our reliability and availability it's something that we all take great pride",
    "start": "1779600",
    "end": "1785880"
  },
  {
    "text": "in at Netflix and that we all work together towards and it's because we have one goal in mind we we want our",
    "start": "1785880",
    "end": "1791760"
  },
  {
    "text": "customers to have a good experience we want we want our company's customers to have a good experience we want Netflix",
    "start": "1791760",
    "end": "1797799"
  },
  {
    "text": "to to remain available and reliable um and it's important to",
    "start": "1797799",
    "end": "1803279"
  },
  {
    "text": "remember that your most important customer is your actual business um and",
    "start": "1803279",
    "end": "1808679"
  },
  {
    "text": "so if I can leave yall with some takeaways from this talk it's that designing for resiliency testing is",
    "start": "1808679",
    "end": "1814640"
  },
  {
    "text": "again a shared responsibility configuration changes can and will cause outages and it's important to have",
    "start": "1814640",
    "end": "1821440"
  },
  {
    "text": "explicit monitoring in place um on anti-patterns and configuration changes",
    "start": "1821440",
    "end": "1828399"
  },
  {
    "text": "um that's it if you have any questions I will be around thank you",
    "start": "1828399",
    "end": "1835240"
  }
]