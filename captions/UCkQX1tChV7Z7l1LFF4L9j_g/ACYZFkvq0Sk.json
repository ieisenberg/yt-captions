[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "[Music]",
    "start": "620",
    "end": "25359"
  },
  {
    "text": "when you work in a team it's very important to have the same standard rules of working and uh some of this is",
    "start": "25359",
    "end": "32558"
  },
  {
    "text": "pointed in the slide so how many of you have coding style that you use in your team standard coding style nobody all",
    "start": "32559",
    "end": "39879"
  },
  {
    "text": "right and uh what about pardon what about the analysis",
    "start": "39879",
    "end": "45800"
  },
  {
    "text": "tools such as jasine and jessin who who use that how about for example an active",
    "start": "45800",
    "end": "52960"
  },
  {
    "text": "measurement to make sure that the code doesn't regress so a lot of unit testing a lot of coverage testing and so on all",
    "start": "52960",
    "end": "59519"
  },
  {
    "text": "right so these are some of the steps that a team usually take if uh you guys want to make",
    "start": "59519",
    "end": "66320"
  },
  {
    "text": "sure that the code is consistent and the code is uh high quality so if you speak about quality to a lot of Engineers",
    "start": "66320",
    "end": "73920"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "there's a lot of uh different ways to measure quality but this is just some of the Practical aspect you don't want to write code that is ambiguous you don't",
    "start": "73920",
    "end": "80119"
  },
  {
    "text": "want to write code that's full of mistakes and of course maintainability is also very important because you don't want to have something that you cannot",
    "start": "80119",
    "end": "86640"
  },
  {
    "text": "maintain in the near Futures so quality practical aspects uh can be manifested in some of these uh",
    "start": "86640",
    "end": "94079"
  },
  {
    "text": "points So speaking about tools a lot of people says a lot of experts says oh I don't need an IDE I can just use my",
    "start": "94079",
    "end": "99640"
  },
  {
    "text": "terminal in Vim or whatever editor and then uh they're happy with it this is true to certain extents but if you just",
    "start": "99640",
    "end": "106880"
  },
  {
    "text": "uh see my diagrams here on the left side is the iso lines of or the counter lines",
    "start": "106880",
    "end": "113119"
  },
  {
    "text": "of the mistake so the lower one is when you see the scoll there and then the the nice one when you don't have any problem",
    "start": "113119",
    "end": "120039"
  },
  {
    "text": "is when there's a cat over there so if your skill is very high then obviously you make less mistake and as the",
    "start": "120039",
    "end": "126240"
  },
  {
    "text": "application grows in complexity you start to make mistake because no matter how perfect you are uh at one point",
    "start": "126240",
    "end": "132160"
  },
  {
    "text": "you'll break down and then start doing something stupid but if you are you know average engineer and you just start to",
    "start": "132160",
    "end": "139280"
  },
  {
    "text": "learn the language you're new to the environment you don't know the API very well then you tend to start uh to have",
    "start": "139280",
    "end": "145760"
  },
  {
    "text": "some problems right even when the application is not very complex so the purpose of the tools is really to reduce",
    "start": "145760",
    "end": "152480"
  },
  {
    "text": "or to change the contour lines to be something on the left side where if you",
    "start": "152480",
    "end": "157720"
  },
  {
    "text": "have a high skill then all the tools will do is to tell you that hey you tend to make this mistake but now you're fine",
    "start": "157720",
    "end": "164599"
  },
  {
    "text": "and you learn from it and if you're still new to the environment you can uh",
    "start": "164599",
    "end": "170720"
  },
  {
    "text": "you can start to have some meaningful uh coding quality and you don't need to get trapped in a couple of typical",
    "start": "170720",
    "end": "177800"
  },
  {
    "start": "177000",
    "end": "177000"
  },
  {
    "text": "mistakes so one of my philosophy in testing is uh something I call multiplayer of Defense so basically",
    "start": "177800",
    "end": "183799"
  },
  {
    "text": "instead of trying to solve all problem at once you put certain protective layers and uh and that's typical uh",
    "start": "183799",
    "end": "190400"
  },
  {
    "text": "people develop application whether it's native or web right so for example before you launch your how many of you",
    "start": "190400",
    "end": "196120"
  },
  {
    "text": "guys here use selenium for cross browser extensive testing yes before you launch your selenium based testing you probably",
    "start": "196120",
    "end": "202599"
  },
  {
    "text": "want to see hey is my code correct does it look okay and you want to do a lot of",
    "start": "202599",
    "end": "207720"
  },
  {
    "text": "smoke testing before you send it uh to the cloud or to your extensive uh QA so",
    "start": "207720",
    "end": "213560"
  },
  {
    "text": "with multiple layers at one point uh oh the the goal of the layers in this uh",
    "start": "213560",
    "end": "219040"
  },
  {
    "text": "defense is that the first one should be the cheapest one to do the first one should be something that's built into",
    "start": "219040",
    "end": "224920"
  },
  {
    "text": "your workflow and then the latest stage before you deploy it or before you ship it to the customers is something that's",
    "start": "224920",
    "end": "230920"
  },
  {
    "text": "really extensive I'm going to show some of the examples to in this",
    "start": "230920",
    "end": "236000"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "presentation so people use tools because it's boring or it's repetitive or it's",
    "start": "236000",
    "end": "241720"
  },
  {
    "text": "timec consuming if you do it by hand and this uh two-way feedback cycle is very",
    "start": "241720",
    "end": "247439"
  },
  {
    "text": "important because sometime we sometime or more often the tools give us feedback",
    "start": "247439",
    "end": "252799"
  },
  {
    "text": "that so uh so most of the time the tools give you feedback hey you should not do",
    "start": "252799",
    "end": "258440"
  },
  {
    "text": "that or your test breaks but we also would like to give feedback to the tools and I'm going to show you why that's",
    "start": "258440",
    "end": "266040"
  },
  {
    "start": "265000",
    "end": "265000"
  },
  {
    "text": "important for example in some of the tools that can analyze your your code quality the way you adjust the tool is",
    "start": "266040",
    "end": "272039"
  },
  {
    "text": "by uh you know changing some dials and some knobs and then make sure that hey I want this testing to be done I want to",
    "start": "272039",
    "end": "278199"
  },
  {
    "text": "skip this and this and this if you use JS Lin or jsin that's the way you customize the the behavior of the",
    "start": "278199",
    "end": "283880"
  },
  {
    "text": "testing tools because you want to match it to whatever you you have but there's also another way to give uh to improve",
    "start": "283880",
    "end": "290000"
  },
  {
    "text": "the tools to suit your workflow which is you give a sample to the tools and then say hey this is what I want and then",
    "start": "290000",
    "end": "295880"
  },
  {
    "text": "make sure you test it to the things that I want I have an example for that so in",
    "start": "295880",
    "end": "302280"
  },
  {
    "text": "my opinion the state of our JavaScript tools right now is like a spelling checker so if you see the sentence nothing is wrong with respect to the",
    "start": "302280",
    "end": "308800"
  },
  {
    "text": "spelling but grammatically doesn't really make sense and this is something that we need to fix in the next year",
    "start": "308800",
    "end": "316320"
  },
  {
    "text": "2013 uh so the tools need to have a much richer understanding of your semantics much richer understanding of your",
    "start": "316320",
    "end": "322360"
  },
  {
    "text": "program as an example if you see this uh simple snippet of backbone you define a",
    "start": "322360",
    "end": "327600"
  },
  {
    "text": "new road but or router but uh because of a typo there uh it won't work at run",
    "start": "327600",
    "end": "333360"
  },
  {
    "text": "time this is something that uh typical static analysis this day cannot understand because it doesn't have the",
    "start": "333360",
    "end": "339240"
  },
  {
    "text": "understanding of uh the convention that you use in your application or your framework so because jav skipe is is",
    "start": "339240",
    "end": "346479"
  },
  {
    "text": "very Dynamic you can do whatever you want somebody can do something behind your back uh it's also very important to",
    "start": "346479",
    "end": "352240"
  },
  {
    "text": "bolt in some some of the convention rules now of course some of you might say but it will not catch all the all",
    "start": "352240",
    "end": "357800"
  },
  {
    "start": "353000",
    "end": "353000"
  },
  {
    "text": "the problems that doesn't matter because because of the multiple layer defense so you want to have a first layer of Sanity",
    "start": "357800",
    "end": "364000"
  },
  {
    "text": "check that sort of catch all the most cases uh all the most uh common problems that a team usually U",
    "start": "364000",
    "end": "371960"
  },
  {
    "text": "make so some of the basics before we go into uh a nice",
    "start": "371960",
    "end": "377400"
  },
  {
    "text": "analysis so when JavaScript runs in the browser JavaScript engine is just one of the components you would know about you",
    "start": "377400",
    "end": "383199"
  },
  {
    "text": "know the the the rendering engine itself such as webkit and Geo and they're responsible for taking the contents of",
    "start": "383199",
    "end": "388960"
  },
  {
    "text": "the the web page and then the style and so on and then create something that shows to the screen B basically pixels",
    "start": "388960",
    "end": "394199"
  },
  {
    "text": "from your monitor and that's also networking obviously because you need to fetch data uh of the remote server and",
    "start": "394199",
    "end": "400160"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "if you zoom in uh JavaScript engine basically consists of this block so it will uh consume your code and then parse",
    "start": "400160",
    "end": "407680"
  },
  {
    "text": "it that's responsible of the parser the the outcome of the procor is a syntax tree and then it will run in something",
    "start": "407680",
    "end": "416080"
  },
  {
    "text": "uh called virtual machine or interpreter some of the standard objects if you use JavaScript string math they are",
    "start": "416080",
    "end": "422599"
  },
  {
    "text": "additional they are runtime objects and that has to uh come into the virtual machine as well now if you want to try",
    "start": "422599",
    "end": "428960"
  },
  {
    "text": "to understand how your program behaves obviously you need to implement everything but if you just want to have",
    "start": "428960",
    "end": "434479"
  },
  {
    "text": "a semantic understanding of the program the parel will be more than enough so first step of the parser is to break",
    "start": "434479",
    "end": "440840"
  },
  {
    "text": "your code into tokens in this uh examples the the the tokenization stage",
    "start": "440840",
    "end": "447720"
  },
  {
    "text": "basically splits down your code so that it knows that hey this is a keyword this is an identifier this is number and so",
    "start": "447720",
    "end": "453560"
  },
  {
    "text": "on once you get that it will try to build a syntax 3 and this is basically what JavaScript engine also does when it",
    "start": "453560",
    "end": "460879"
  },
  {
    "text": "consumes your program uh syntax tree means that it's a tree that represent your syntax in this case it's a varal",
    "start": "460879",
    "end": "468360"
  },
  {
    "text": "declaration and then the identifi is so and then the value is so now once you have the syntax of your",
    "start": "468360",
    "end": "474759"
  },
  {
    "text": "entire program you have all the information necessary to understand what the program trying to",
    "start": "474759",
    "end": "480680"
  },
  {
    "start": "477000",
    "end": "477000"
  },
  {
    "text": "do and of course if you want to implement a JavaScript parser one of the strictest requirement is that it has to",
    "start": "480680",
    "end": "486840"
  },
  {
    "text": "follow a standard so it has to understand all the construct that is defined in the ecmascript specification",
    "start": "486840",
    "end": "492599"
  },
  {
    "text": "how many of you here have ever read ecmascript specification it's only 258",
    "start": "492599",
    "end": "499440"
  },
  {
    "text": "Pages uh most people don't need to do that because I mean you don't learn how to write an articles by reading a",
    "start": "499440",
    "end": "505919"
  },
  {
    "text": "dictionary or something like that but it's very important to try to make sure that your code or your parer uh",
    "start": "505919",
    "end": "513919"
  },
  {
    "text": "understand all the construct that is specified in that standards that's includes St mode that includes semicolon",
    "start": "513919",
    "end": "521120"
  },
  {
    "start": "521000",
    "end": "521000"
  },
  {
    "text": "uh automatic semicolon insertion that's also include Unicode and in some cases the syntax",
    "start": "521120",
    "end": "527839"
  },
  {
    "text": "tree that's produced by the parsel needs to have some some some sense so it should not be completely cryptic uh one",
    "start": "527839",
    "end": "534120"
  },
  {
    "text": "thing that I Implement in Esa is uh following the uh paral apia that's",
    "start": "534120",
    "end": "539480"
  },
  {
    "text": "specified by Mozilla in its JavaScript engine spider monkey so if you see this",
    "start": "539480",
    "end": "544640"
  },
  {
    "text": "very simple line of code the syntax tree formatted as Json will look like this and from this you can totally understand",
    "start": "544640",
    "end": "551240"
  },
  {
    "text": "that oh there's an expression there it declares or it defines an uh a literal 42 and it assign it to a variable call",
    "start": "551240",
    "end": "559120"
  },
  {
    "text": "answer if you want to try it live you can go to that URL and then you can paste your code and then it will give",
    "start": "559120",
    "end": "565800"
  },
  {
    "start": "564000",
    "end": "564000"
  },
  {
    "text": "you the syntax read the nice thing about uh the syntax",
    "start": "565800",
    "end": "572160"
  },
  {
    "text": "really like this is because it match the specification uh it matches the uh the",
    "start": "572160",
    "end": "577320"
  },
  {
    "text": "the grammar that's defined the specification and the source code looks like like that as well so if we see uh",
    "start": "577320",
    "end": "583680"
  },
  {
    "text": "the specification definition for w statement it looks like that while and then expression and brackets and then",
    "start": "583680",
    "end": "589120"
  },
  {
    "text": "statement and if you write an example program like that and then put it in the uh paral demo what will you get is the",
    "start": "589120",
    "end": "595519"
  },
  {
    "text": "tree that looks like uh on the right side so it's really uh similar it's use the same terminologies and the actual",
    "start": "595519",
    "end": "602640"
  },
  {
    "text": "code that parses this V segment looks like this this is part of the parser so",
    "start": "602640",
    "end": "608519"
  },
  {
    "text": "having all the specification the parsel code and the syntax Tre they all use the",
    "start": "608519",
    "end": "613959"
  },
  {
    "text": "same terminology really helps because then uh it's easier to uh cross cross",
    "start": "613959",
    "end": "619560"
  },
  {
    "start": "616000",
    "end": "616000"
  },
  {
    "text": "reference all of this one of the things that very nice with uh Spider monkey parel API is the",
    "start": "619560",
    "end": "626760"
  },
  {
    "text": "uh location information so if you create a syntax Tre you can uh you can tag",
    "start": "626760",
    "end": "631800"
  },
  {
    "text": "location information that correspond to the actual tokens in your source code so",
    "start": "631800",
    "end": "636839"
  },
  {
    "text": "if it's like this you have the syntax 3 from the range field there 0 to six I",
    "start": "636839",
    "end": "642920"
  },
  {
    "text": "know that if if I want to find that identifier all I need to do is to go to the original source code and it will be",
    "start": "642920",
    "end": "648320"
  },
  {
    "text": "from location zero to uh exclusive six and the same with literals and so on we're going to see why this is very",
    "start": "648320",
    "end": "656560"
  },
  {
    "start": "651000",
    "end": "651000"
  },
  {
    "text": "useful if we try to parse something that is uh confirm that's rather possible",
    "start": "657639",
    "end": "664519"
  },
  {
    "text": "however sometime you want to build a parcel that suitable for IDE or an editor and in that case user Make user",
    "start": "664519",
    "end": "671399"
  },
  {
    "text": "makes mistakes so sometime you want to have a behavior that I ca error tolerant so if you type using wrong quotes uh",
    "start": "671399",
    "end": "679240"
  },
  {
    "text": "opening and closing quotes they don't match or you put too many dots or stray",
    "start": "679240",
    "end": "685279"
  },
  {
    "text": "characters there or you haven't finished typing or you do do something that doesn't follow the specification in some",
    "start": "685279",
    "end": "691880"
  },
  {
    "text": "cases the parsel needs to be able to uh cope with the situation and doesn't just bail out and say oh your code is",
    "start": "691880",
    "end": "697959"
  },
  {
    "text": "completely bogus I don't want to do it I don't want to parse",
    "start": "697959",
    "end": "702560"
  },
  {
    "start": "703000",
    "end": "703000"
  },
  {
    "text": "it common handlings is extremely important for U source code how many of",
    "start": "703079",
    "end": "708920"
  },
  {
    "text": "you here generate API source code or application source code through the code",
    "start": "708920",
    "end": "714240"
  },
  {
    "text": "annotation there's like the tools Jaz dog and and J Doc and a lot of other",
    "start": "714240",
    "end": "720560"
  },
  {
    "text": "documentation tools that extracts the the commments and then uh probably format it as uh markdown and then",
    "start": "720560",
    "end": "727880"
  },
  {
    "text": "produce an HTML file that uh represent what the code is trying to",
    "start": "727880",
    "end": "733760"
  },
  {
    "text": "do so in some cases construct uh contracts can be defined as common well because it will be ignored by the",
    "start": "733760",
    "end": "739360"
  },
  {
    "text": "JavaScript engine but you can build tools that analyze that contracts and then see if that contract is fulfilled",
    "start": "739360",
    "end": "744440"
  },
  {
    "text": "or not forward looking uh how many of you here follow script",
    "start": "744440",
    "end": "750360"
  },
  {
    "start": "746000",
    "end": "746000"
  },
  {
    "text": "six that's the next generation of ecmascript uh right now we're at",
    "start": "750360",
    "end": "755959"
  },
  {
    "text": "4.1 and the new standard will Define a lot of uh construct that can be very",
    "start": "755959",
    "end": "761040"
  },
  {
    "text": "beneficial for application developer everything from the structuring model classes and block scope and so",
    "start": "761040",
    "end": "767000"
  },
  {
    "text": "on uh I can talk for another hour about this but let's just skip that code",
    "start": "767000",
    "end": "772839"
  },
  {
    "start": "771000",
    "end": "771000"
  },
  {
    "text": "regeneration if you take uh your code and then you get the syntax threee and then you regenerate again the code",
    "start": "772839",
    "end": "778399"
  },
  {
    "text": "that's something that call code regenerations and then a lot of things you can do with this how many of you",
    "start": "778399",
    "end": "784000"
  },
  {
    "text": "here minifi your JavaScript before you deploy it using",
    "start": "784000",
    "end": "789880"
  },
  {
    "text": "what closer compiler and ugly 5 ja is not popular choice so what this what this tool does",
    "start": "789880",
    "end": "796880"
  },
  {
    "text": "is take your code and then get the syntax three and then rewrite it so that",
    "start": "796880",
    "end": "802600"
  },
  {
    "text": "during the execution it still behaves the same but the actual generated Source will be smaller than the original one",
    "start": "802600",
    "end": "808760"
  },
  {
    "text": "that's called minification sometime it change variable name so instead of very long descriptive variable it change it",
    "start": "808760",
    "end": "815000"
  },
  {
    "text": "to say a because for for browser and for JavaScript engine it doesn't really matter how your variable is called as",
    "start": "815000",
    "end": "820600"
  },
  {
    "text": "long as it's consistent and say remove code because closer compiler for example can remove code that you don't need or you never",
    "start": "820600",
    "end": "827760"
  },
  {
    "text": "call uh and this is this is something that uh is done through code",
    "start": "827760",
    "end": "834079"
  },
  {
    "text": "regeneration now let's see some of the tools that we can have if you already uh",
    "start": "834079",
    "end": "839279"
  },
  {
    "text": "uh build some of the foundation so I usually categorize all the tools into four groups uh code",
    "start": "839279",
    "end": "846040"
  },
  {
    "text": "inspection and then static analysis Dynamic analysis and then kind of uh code",
    "start": "846040",
    "end": "851480"
  },
  {
    "text": "transformation let's see the first thing inspection so obviously what you can do is when you have code plug it into a uh",
    "start": "851480",
    "end": "858920"
  },
  {
    "start": "853000",
    "end": "853000"
  },
  {
    "text": "this paror demo you'll get the syntax tree so for this particular example maybe it's obvious right even without",
    "start": "858920",
    "end": "865800"
  },
  {
    "text": "seeing the syntax tree you kind of understand what this code is trying to do but in some cases there are like cryptic code that why it will return 10",
    "start": "865800",
    "end": "873560"
  },
  {
    "start": "869000",
    "end": "869000"
  },
  {
    "text": "in this case and then of course you can just run it in your um browser or",
    "start": "873560",
    "end": "880000"
  },
  {
    "text": "console or nodejs or whatever JavaScript interpreter but if you want to try to understand what the uh browser or",
    "start": "880000",
    "end": "886440"
  },
  {
    "text": "JavaScript engine understand from this uh particular uh constructs then you can",
    "start": "886440",
    "end": "892759"
  },
  {
    "text": "put it in the parer and then see the output so in this case apparently all that Curly Braes uh block is just",
    "start": "892759",
    "end": "899040"
  },
  {
    "text": "defining a new expression segement that doesn't affect",
    "start": "899040",
    "end": "903240"
  },
  {
    "start": "903000",
    "end": "903000"
  },
  {
    "text": "anything you can also validate the syntax because a faithful parer will",
    "start": "904320",
    "end": "909680"
  },
  {
    "text": "will tell you if your code is bogus or invalid so uh that's a nice demo there",
    "start": "909680",
    "end": "915600"
  },
  {
    "text": "um if you want to try uh life in your browser you just paste your code and it",
    "start": "915600",
    "end": "921079"
  },
  {
    "text": "will tell you what's wrong with your code so syntax validation can be uh put",
    "start": "921079",
    "end": "928480"
  },
  {
    "start": "926000",
    "end": "926000"
  },
  {
    "text": "in your continuous integration system how many of you use junkins Tim",
    "start": "928480",
    "end": "933959"
  },
  {
    "text": "City there's also cruise control uh and then Hudson and and",
    "start": "933959",
    "end": "939519"
  },
  {
    "text": "Etc so before like I mentioned in in the earlier uh slide like multi-layer of",
    "start": "939519",
    "end": "945040"
  },
  {
    "text": "Defense before you even deploy your apps or run it through extensive QA you might want to check whether the syntax is",
    "start": "945040",
    "end": "951000"
  },
  {
    "text": "valid or not because it would be really stupid to try to test some application that uh is not valid so uh a lter is",
    "start": "951000",
    "end": "958399"
  },
  {
    "text": "slightly different than the validator famous lter is jasine or Jin because a lter tries very hard to make sure that",
    "start": "958399",
    "end": "965600"
  },
  {
    "text": "you're not doing something stupid whereas the validator is just hey if you pass the validator then the JavaScript",
    "start": "965600",
    "end": "972440"
  },
  {
    "text": "engine will be happy and consume it or execute the code and uh sometime lter is very uh",
    "start": "972440",
    "end": "980000"
  },
  {
    "text": "restrictive in the way you write your code because if you try to pass a code that is already minified by agly 5j or",
    "start": "980000",
    "end": "986000"
  },
  {
    "text": "closer compiler or coffee scrip uh anyone use coffee coffee script",
    "start": "986000",
    "end": "991959"
  },
  {
    "text": "here if you pass generated code to a linter then most likely it will complain because it doesn't follow a good",
    "start": "992680",
    "end": "999120"
  },
  {
    "text": "practice in coding but that code is totally valid so it will pass the valid validator easily because technically",
    "start": "999120",
    "end": "1005079"
  },
  {
    "text": "your browser can still uh uh understand and execute that code so there are",
    "start": "1005079",
    "end": "1010560"
  },
  {
    "text": "different use cases uh validator is fantastic if you put it in uh your development workflow",
    "start": "1010560",
    "end": "1017560"
  },
  {
    "start": "1012000",
    "end": "1012000"
  },
  {
    "text": "how many of you here use G and use get pre-commit",
    "start": "1017560",
    "end": "1023039"
  },
  {
    "text": "hook so get pre-commit hook is is a is a hook that gets executed before or during",
    "start": "1023039",
    "end": "1030400"
  },
  {
    "text": "your commit and if it returns non zero it block your commits from happening and this is a perfect chance to inject any",
    "start": "1030400",
    "end": "1037280"
  },
  {
    "text": "kind of syntax validation because if you commit something uh if you try to commit",
    "start": "1037280",
    "end": "1042438"
  },
  {
    "text": "something and it doesn't uh pass the validation it will just exit with one eror code and there won't be any",
    "start": "1042439",
    "end": "1048919"
  },
  {
    "text": "anything committed your working director will be dirty so nothing will will gets committed so you can even prevent bad",
    "start": "1048919",
    "end": "1056760"
  },
  {
    "text": "code to enter your source source code reposer because uh it will be blocked by the preit hod that's another protective",
    "start": "1056760",
    "end": "1063600"
  },
  {
    "text": "layer in your multi-layer defense in a typical ID uh whether it's",
    "start": "1063600",
    "end": "1070200"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "cloudbased or running on the browser from local server uh it's possible to get",
    "start": "1070200",
    "end": "1075919"
  },
  {
    "text": "understanding of your code by parsing it and then extracting the information out of the syntax 3 for example for the case",
    "start": "1075919",
    "end": "1082320"
  },
  {
    "text": "of eclipse Orion it will be able to display all the function outline uh this is a standard feature in typical uh",
    "start": "1082320",
    "end": "1088840"
  },
  {
    "text": "smart ID like uh webstorm and uh the way it works is really par your code and then see uh for",
    "start": "1088840",
    "end": "1097039"
  },
  {
    "text": "function VAR for function variables just look for all the function declaration and function expression and deduce the",
    "start": "1097039",
    "end": "1102240"
  },
  {
    "text": "name and then display there anyone here use eclipse or",
    "start": "1102240",
    "end": "1108480"
  },
  {
    "text": "yeah it say uh basically cloud-based uh JavaScript editing you can run it on your",
    "start": "1109840",
    "end": "1117559"
  },
  {
    "text": "browser so autoc complete is often very useful because then you don't need to",
    "start": "1125440",
    "end": "1131200"
  },
  {
    "text": "memorize or remember all the uh uh function names and function variables",
    "start": "1131200",
    "end": "1136480"
  },
  {
    "text": "because sometimes it's very long and again the way it works is if you already have this uh information all the",
    "start": "1136480",
    "end": "1142840"
  },
  {
    "text": "variables name or the functions then it's a matter of trying to match what the what the user is trying to to type",
    "start": "1142840",
    "end": "1148679"
  },
  {
    "text": "with whatever uh Choice available for for that particular situation this is where this is uh the",
    "start": "1148679",
    "end": "1155200"
  },
  {
    "text": "the case where error tolerant Behavior can be really use useful because as seen in my screenshot here I haven't finished",
    "start": "1155200",
    "end": "1162360"
  },
  {
    "text": "typing anything yet and that could be just invalid but the parer needs to see",
    "start": "1162360",
    "end": "1168039"
  },
  {
    "text": "that hey the user hasn't finished anything so it might be invalid so if something is wrong just continue or",
    "start": "1168039",
    "end": "1173559"
  },
  {
    "text": "ignore it this is another editor from uh vm/ spring called",
    "start": "1173559",
    "end": "1181039"
  },
  {
    "text": "scripted oh not really visible in the slides but index there is highlighted",
    "start": "1181039",
    "end": "1186400"
  },
  {
    "text": "and then I can see all the occurrence of U of all the variables there very useful",
    "start": "1186400",
    "end": "1191480"
  },
  {
    "text": "for uh code editing because sometime you have a function and then you want to search where the function arguments is",
    "start": "1191480",
    "end": "1198120"
  },
  {
    "text": "being used",
    "start": "1198120",
    "end": "1200640"
  },
  {
    "text": "live editing um how many of you here have seen Brad Victor's uh talk about",
    "start": "1203200",
    "end": "1209880"
  },
  {
    "text": "yes talk about the programming and uh some of this feature have been implemented in KH Academy",
    "start": "1209880",
    "end": "1216799"
  },
  {
    "text": "computer science uh Corner have you ever seen live editing",
    "start": "1216799",
    "end": "1221960"
  },
  {
    "text": "of JavaScript code in K Academy that's very impressive so in this uh simple",
    "start": "1221960",
    "end": "1227520"
  },
  {
    "text": "project called scrubby it's probably easy to",
    "start": "1227520",
    "end": "1232280"
  },
  {
    "text": "demonstrate so what when you type a code here every literal or every constant will be will be editable like live so I",
    "start": "1240559",
    "end": "1249720"
  },
  {
    "text": "can just drag this and change the size I can change the color",
    "start": "1249720",
    "end": "1255480"
  },
  {
    "text": "this is possible because uh scrubby rewrites your application code and",
    "start": "1273279",
    "end": "1278640"
  },
  {
    "text": "change all the literals to just a variables and then as you drag the value",
    "start": "1278640",
    "end": "1284080"
  },
  {
    "text": "uh it replaces the value of the variables and then the code runs again taking uh the value of uh the",
    "start": "1284080",
    "end": "1291679"
  },
  {
    "text": "variables so if you want to experiment with you know certain uh prototyping",
    "start": "1291679",
    "end": "1297200"
  },
  {
    "text": "particularly useful when you draw something you don't need to keep typing your code and then live reload your browser or do something",
    "start": "1297200",
    "end": "1305080"
  },
  {
    "text": "else you can also get some nice statistics of how certain particular",
    "start": "1310360",
    "end": "1315640"
  },
  {
    "text": "keywords use in U in your code is not really useful it's just to give uh a",
    "start": "1315640",
    "end": "1321000"
  },
  {
    "text": "nice understanding of the the distribution of the popular keywords apparently I've done this through to",
    "start": "1321000",
    "end": "1326840"
  },
  {
    "text": "Major libraries and seems that this is the most popular keyword and then function and if in",
    "start": "1326840",
    "end": "1332000"
  },
  {
    "text": "return uh it gives you a nice idea as well for example if the number of try and catch they don't match then",
    "start": "1332000",
    "end": "1338360"
  },
  {
    "text": "something is suspicious there because try is supposed to be followed by catch same if",
    "start": "1338360",
    "end": "1344799"
  },
  {
    "text": "uh case is is less than switch then how the this shouldn't happen so it's",
    "start": "1344799",
    "end": "1349919"
  },
  {
    "text": "probably impossible you can check also the statement so most statements jaas",
    "start": "1349919",
    "end": "1355360"
  },
  {
    "text": "statement is typically expression so you assign the values of uh some expression",
    "start": "1355360",
    "end": "1360960"
  },
  {
    "text": "to a variables and of course block statement you can also see how",
    "start": "1360960",
    "end": "1366679"
  },
  {
    "start": "1364000",
    "end": "1364000"
  },
  {
    "text": "distributed your identifier variable names so if uh if it's very high it",
    "start": "1366679",
    "end": "1372799"
  },
  {
    "text": "means that your code is very long or for both uh for example the longest",
    "start": "1372799",
    "end": "1380039"
  },
  {
    "text": "identifier that I can find was in Prototype 1.7 it was really long but from many",
    "start": "1380039",
    "end": "1385679"
  },
  {
    "text": "major libraries apparently the the the the mean of identifier length is about",
    "start": "1385679",
    "end": "1391039"
  },
  {
    "text": "eight characters of course there are tons of things that you can infer from your code",
    "start": "1391039",
    "end": "1397440"
  },
  {
    "start": "1392000",
    "end": "1392000"
  },
  {
    "text": "after you get the syntax three and then analyze everything everything from common density so you can measure like",
    "start": "1397440",
    "end": "1403000"
  },
  {
    "text": "how many lines of Commons compared to how many lines of code because if it's like zero then your code is totally not",
    "start": "1403000",
    "end": "1408720"
  },
  {
    "text": "commented at all that's kind of scary so that's the way uh tools can",
    "start": "1408720",
    "end": "1415520"
  },
  {
    "text": "inspect your code and Report uh something quickly but there are also something called Static analysis uh this",
    "start": "1415520",
    "end": "1420799"
  },
  {
    "text": "is the job that is usually carried out by jasin and J hin and code linting is very popular for",
    "start": "1420799",
    "end": "1428240"
  },
  {
    "start": "1424000",
    "end": "1424000"
  },
  {
    "text": "example if your coding style mes that you should never ever ever use uh double equal you should always use stct equals",
    "start": "1428240",
    "end": "1434919"
  },
  {
    "text": "then you can do some testing by yourself this way because all you need to do is write literally just this 10 lines of",
    "start": "1434919",
    "end": "1443000"
  },
  {
    "text": "code that par your code and then look for that particular uh usage of this uh",
    "start": "1443000",
    "end": "1449279"
  },
  {
    "text": "double equal operator and then you can do some you can display some warning you can also find bullan traps",
    "start": "1449279",
    "end": "1456200"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "this is one of my favorite API Hall of shames uh can anyone tell me or guess",
    "start": "1456200",
    "end": "1462919"
  },
  {
    "text": "what will the last line the first line that means I mean false why do I want to put false there",
    "start": "1462919",
    "end": "1469919"
  },
  {
    "text": "any guess so apparently a slider component can be horizontal or vertical so the way",
    "start": "1469919",
    "end": "1476080"
  },
  {
    "text": "you decided that if you put true then it will be this and you put false that will be the other way around I guess it makes",
    "start": "1476080",
    "end": "1481720"
  },
  {
    "text": "sense because you haven't seen any diagonal slider right so there can be only two choices it's either true or",
    "start": "1481720",
    "end": "1487760"
  },
  {
    "text": "false but this is a an example of bulling tribee where when you write the code you can look up at the API dos and",
    "start": "1487760",
    "end": "1494159"
  },
  {
    "text": "see exactly oh I want it to be horizontal and therefore I put through but when someone refuse your code or you",
    "start": "1494159",
    "end": "1500720"
  },
  {
    "text": "yourself in 3 months uh look at the look again at your code and see what is",
    "start": "1500720",
    "end": "1506399"
  },
  {
    "text": "actually false there you need to look uh you need to search the documentation and see why is it why did I choose CL false",
    "start": "1506399",
    "end": "1515279"
  },
  {
    "text": "this is another thing so especially difficult for a non native speaker why would I say component set hidden false",
    "start": "1515279",
    "end": "1521360"
  },
  {
    "text": "why can I just say set visible true or like set if filter is not Cas",
    "start": "1521360",
    "end": "1527039"
  },
  {
    "text": "insensitive does that mean in lower case a equals capital A you will need a few",
    "start": "1527039",
    "end": "1533120"
  },
  {
    "text": "seconds to realize that oh this is actually what it does so double negative can be filtered because you can scan the",
    "start": "1533120",
    "end": "1539200"
  },
  {
    "text": "code and see some particular keywords that uh triggers uh triggers that behavior these are all taken from Real",
    "start": "1539200",
    "end": "1545880"
  },
  {
    "text": "World example so I'm not just making this up uh this is one of the one of the",
    "start": "1545880",
    "end": "1551559"
  },
  {
    "text": "biggest offense it's like three item state state true or false uh what does",
    "start": "1551559",
    "end": "1556600"
  },
  {
    "text": "what does it mean why why do I need to pass two completely opposite Boolean values there so if you look at the Docks",
    "start": "1556600",
    "end": "1563039"
  },
  {
    "text": "apparently the first is the actual state where it's collapsing or expanding and the second value defines whether you",
    "start": "1563039",
    "end": "1569960"
  },
  {
    "text": "want it to be animated or not so in this case I don't want it to be animated so that's why I put false but if someone",
    "start": "1569960",
    "end": "1575200"
  },
  {
    "text": "just stumble upon the code and then see oh what is this it's it's confusing without looking at the docs of course",
    "start": "1575200",
    "end": "1581240"
  },
  {
    "text": "the biggest offense is still dumb API because if anyone can tell me what does true true F false that mean",
    "start": "1581240",
    "end": "1589000"
  },
  {
    "text": "so there's a bunch of uh Boolean values and variables and and and other literals",
    "start": "1592200",
    "end": "1597480"
  },
  {
    "text": "that it's impossible to guess what this means unless you look at the documentation so all of this can be uh",
    "start": "1597480",
    "end": "1605080"
  },
  {
    "text": "inspected or track easily because it's rather possible to write code that you know see all this uh in in fact you can",
    "start": "1605080",
    "end": "1612600"
  },
  {
    "text": "uh you can just use the the one that I posted in my blog post uh look for you",
    "start": "1612600",
    "end": "1618039"
  },
  {
    "text": "know Bull and literal that serve as a function Vari function arguments or look",
    "start": "1618039",
    "end": "1623080"
  },
  {
    "text": "for uh words that is listed in the black list of double negative and so",
    "start": "1623080",
    "end": "1629399"
  },
  {
    "start": "1627000",
    "end": "1627000"
  },
  {
    "text": "on tary conditionals how many of you likes to Nest all the tary conditional",
    "start": "1629399",
    "end": "1634720"
  },
  {
    "text": "like seal step yeah this is something beautiful because the example that I've given here is not too bad because you can totally follow the logic and Mak",
    "start": "1634720",
    "end": "1640919"
  },
  {
    "text": "sense if you dump the syntax fre it looks like this and you can just detect the the use of uh nested tary",
    "start": "1640919",
    "end": "1649399"
  },
  {
    "text": "conditional by seeing which node gets which one so follow either from the child to the top or from the parent to",
    "start": "1649399",
    "end": "1656080"
  },
  {
    "text": "the bottom so if you're cutting style mandates that never ever Nest more than",
    "start": "1656080",
    "end": "1661679"
  },
  {
    "text": "two then you could totally detect that and then get some warnings uh nested turn conditional is",
    "start": "1661679",
    "end": "1668000"
  },
  {
    "text": "nice uh but it's horrible to debug strict mode check how many of you",
    "start": "1668000",
    "end": "1673519"
  },
  {
    "start": "1669000",
    "end": "1669000"
  },
  {
    "text": "here use strict mode always use St mode yes for those who hav please do as a",
    "start": "1673519",
    "end": "1680480"
  },
  {
    "text": "there's a lot of goodies there there's a lot of things that stri mode can do to uh prevent mistakes and in this case is",
    "start": "1680480",
    "end": "1687480"
  },
  {
    "text": "sometimes you forgot that hey I already declare a property name the name equals",
    "start": "1687480",
    "end": "1692960"
  },
  {
    "text": "to something that you have declared before in this case it's not too bad because it's like four lines but if you write the backbone application and all",
    "start": "1692960",
    "end": "1699840"
  },
  {
    "text": "the all the way to the end you define another function that might just you know be the same with the one that you",
    "start": "1699840",
    "end": "1706399"
  },
  {
    "text": "define uh pre or declare uh uh the beginning of the source line so duplicate property is not allowed in St",
    "start": "1706399",
    "end": "1713039"
  },
  {
    "text": "mode if you run this code in the browser it will immediately refuse that um of",
    "start": "1713039",
    "end": "1718679"
  },
  {
    "text": "course you can run this through uh some analysis so at typo can have a very bad",
    "start": "1718679",
    "end": "1725919"
  },
  {
    "text": "impact uh if you use stct mode this this is called pry easily because then you L Global what you declare is not the same",
    "start": "1725919",
    "end": "1732760"
  },
  {
    "text": "as what you use and you can use very nice commonland tools that detects that kind of f s or that kind of",
    "start": "1732760",
    "end": "1740279"
  },
  {
    "text": "mistakes of course the same mistake has another problem where variable height is not actually used and again it's it's",
    "start": "1740279",
    "end": "1748480"
  },
  {
    "text": "rather uh tedious to find all these unused variables manually uh you might want to use some tools",
    "start": "1748480",
    "end": "1755440"
  },
  {
    "text": "that scans for all fire declaration and see whether it's actually used or",
    "start": "1755440",
    "end": "1761799"
  },
  {
    "start": "1759000",
    "end": "1759000"
  },
  {
    "text": "not code complexity uh how many of you are familiar with cyclomatic complexity",
    "start": "1762080",
    "end": "1768320"
  },
  {
    "text": "so cyclomatic complexity is one of the code metrics that describe how complicated your code is and in this",
    "start": "1768320",
    "end": "1775519"
  },
  {
    "text": "case uh oh you can use JS complexity. org that's an online tool you can paste",
    "start": "1775519",
    "end": "1780559"
  },
  {
    "text": "your code and it tells you maintainable index and and and logical line of code I think in this case because technically",
    "start": "1780559",
    "end": "1787200"
  },
  {
    "text": "you need to break it down into four lines and not put everything in one line and then the",
    "start": "1787200",
    "end": "1793000"
  },
  {
    "text": "complexity for this case I believe because it has uh",
    "start": "1793000",
    "end": "1798799"
  },
  {
    "text": "four ages four statements and then four notes and then four statements and then",
    "start": "1798799",
    "end": "1804640"
  },
  {
    "text": "you have one terminals because it doesn't go anywhere else it has to follow uh through all the uh branches to",
    "start": "1804640",
    "end": "1811600"
  },
  {
    "text": "the end so if the number goes high and high every time someone checks in the code uh",
    "start": "1811600",
    "end": "1818320"
  },
  {
    "text": "you might want to say hey something is wrong there I don't know anything about maintainable index so probably look look",
    "start": "1818320",
    "end": "1824600"
  },
  {
    "text": "it up in Wikipedia or so uh Dynamic analysis so static analysis works by uh reading your code",
    "start": "1824600",
    "end": "1831880"
  },
  {
    "text": "and then try to deduce uh what you're trying to do and then see if that is stupid and then warn you about that",
    "start": "1831880",
    "end": "1837840"
  },
  {
    "text": "Dynamic analysis different Dynamic analysis means that it has to run your code and then see what happens there so",
    "start": "1837840",
    "end": "1844720"
  },
  {
    "text": "coverage how many of you here runs your code through code coverage analysis not a lot of people that needs",
    "start": "1844720",
    "end": "1852360"
  },
  {
    "text": "to increase as well so coverage means you want to find out what part of code is being executed or not so if you write",
    "start": "1852360",
    "end": "1859159"
  },
  {
    "text": "a complicated code and you write the unit test and the unit test only tests a trivial part of your code or your",
    "start": "1859159",
    "end": "1865639"
  },
  {
    "text": "application that doesn't really uh mean anything as with respect to the coverage",
    "start": "1865639",
    "end": "1870679"
  },
  {
    "text": "you want to write code that's tested or you want to make sure that your test actually check something uh important in",
    "start": "1870679",
    "end": "1878240"
  },
  {
    "text": "your code so one way to do uh coverage is using uh something uh instrumentation",
    "start": "1878240",
    "end": "1884480"
  },
  {
    "text": "so in this case you can use that the note cover project this just one of the",
    "start": "1884480",
    "end": "1890320"
  },
  {
    "text": "code coverage out there so if you run uh this code then it will say that hey the third line is actually never gets",
    "start": "1890320",
    "end": "1896360"
  },
  {
    "text": "executed because it's it's a a wrong Branch there it's a false",
    "start": "1896360",
    "end": "1902240"
  },
  {
    "text": "branch and the way it does is it takes your code and then injects additional instrumentation and then as the browser",
    "start": "1902240",
    "end": "1909039"
  },
  {
    "text": "or whatever JavaScript engine execute the code it gets to know uh whether the extra annotation gets executed or not",
    "start": "1909039",
    "end": "1919158"
  },
  {
    "text": "so uh state statement coverage is very important unfortunately uh it presents some uh hidden trap and it's equally",
    "start": "1920000",
    "end": "1927840"
  },
  {
    "text": "important to see what kind of branches is being executed I'm just going to skip this uh if you want to do Branch cover",
    "start": "1927840",
    "end": "1934600"
  },
  {
    "start": "1928000",
    "end": "1928000"
  },
  {
    "text": "there's nice project from the yui team called stul and if you see the code if you just",
    "start": "1934600",
    "end": "1940919"
  },
  {
    "text": "run this through statment coverage it will say that all all those two lines in that function they are all executed but",
    "start": "1940919",
    "end": "1947399"
  },
  {
    "text": "if you run to through Branch coverage it will say that oh no that particular if there the else brand is not executed and",
    "start": "1947399",
    "end": "1956480"
  },
  {
    "text": "of course if you write unit test you want your test to exercise all possible workflow in your",
    "start": "1956480",
    "end": "1963760"
  },
  {
    "text": "application execution tracing uh how many of you here use J",
    "start": "1963840",
    "end": "1969320"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "mobile so mobile application and in general mobile",
    "start": "1969320",
    "end": "1974480"
  },
  {
    "text": "web so mobile is slightly different than uh desktop because of all the limitation of mobile platform so it's more",
    "start": "1974480",
    "end": "1980600"
  },
  {
    "text": "important to pay attention to Performance there so one of the metrics that you can get uh if you annotate all",
    "start": "1980600",
    "end": "1986440"
  },
  {
    "text": "your function is how many function calls are being executed if you do something for example if you start your application so jco mobile apparently",
    "start": "1986440",
    "end": "1993519"
  },
  {
    "text": "execute 4,000 function just to display a simple page this is not necessarily bad per se because most of the function call",
    "start": "1993519",
    "end": "2000039"
  },
  {
    "text": "is a it's a quick one but what you want to monitor is how does this number",
    "start": "2000039",
    "end": "2005320"
  },
  {
    "text": "change over the time so if it's 4,000 4,000 something right now and then a",
    "start": "2005320",
    "end": "2011000"
  },
  {
    "text": "couple of months later it becomes 20,000 then something is suspicious there so",
    "start": "2011000",
    "end": "2017200"
  },
  {
    "text": "you could totally put this into your CI system and and kind of monitor",
    "start": "2017200",
    "end": "2022919"
  },
  {
    "text": "that scalability is another the issues uh scalability here doesn't always mean",
    "start": "2022919",
    "end": "2028279"
  },
  {
    "start": "2024000",
    "end": "2024000"
  },
  {
    "text": "scale your architecture but it also means how would your function work if",
    "start": "2028279",
    "end": "2034000"
  },
  {
    "text": "the data uh changes so say you create an address book application you need to be",
    "start": "2034000",
    "end": "2039320"
  },
  {
    "text": "able to sort all the contacts if your contact is just 10 or 100 even bubble sort will do it very quickly so your",
    "start": "2039320",
    "end": "2045000"
  },
  {
    "text": "intern set hey I've implemented this add this book sorting it's finished in uh 10 milliseconds it's the absolute time to",
    "start": "2045000",
    "end": "2052200"
  },
  {
    "text": "execute a function doesn't mean anything in in the in the context of scalability because you need to test whether",
    "start": "2052200",
    "end": "2057280"
  },
  {
    "text": "yourbook can sort 10,000 contexts reasonably well and the way it works is",
    "start": "2057280",
    "end": "2063240"
  },
  {
    "text": "you can annotate all the function and then you see how the function the number number of calls as a function of the",
    "start": "2063240",
    "end": "2070839"
  },
  {
    "text": "different data so in this case in the case of address book sorting you want to see how many time our right swap is",
    "start": "2070839",
    "end": "2076398"
  },
  {
    "text": "called if the contract uh if the context is only 10 if the context is only is reach 100 and then a th000 10,000 and so",
    "start": "2076399",
    "end": "2085158"
  },
  {
    "text": "on because bubble sort can sort 10 addresses rather easily but when it's",
    "start": "2085159",
    "end": "2090398"
  },
  {
    "text": "like a th000 then you have you start to have problem and you would not notice this by just measuring how how long does",
    "start": "2090399",
    "end": "2095919"
  },
  {
    "text": "it take to execute the function transformation so uh I mentioned about",
    "start": "2095919",
    "end": "2103640"
  },
  {
    "text": "minification closer compiler and AG that's just one of the use case of code",
    "start": "2103640",
    "end": "2108880"
  },
  {
    "text": "transformation uh I've introduced something that I call I know it's a lot of buzzword non-destructive partial SCE",
    "start": "2108880",
    "end": "2115560"
  },
  {
    "start": "2109000",
    "end": "2109000"
  },
  {
    "text": "modification which basically means that it will modify your code only uh on",
    "start": "2115560",
    "end": "2121800"
  },
  {
    "text": "particular parts so if it doesn't interest the tools then it will just happily ignore that one of those obvious",
    "start": "2121800",
    "end": "2128400"
  },
  {
    "start": "2127000",
    "end": "2127000"
  },
  {
    "text": "uh non-destructive modification is to change the literal quotes uh who here",
    "start": "2128400",
    "end": "2134200"
  },
  {
    "text": "uses single quote for Strings and double",
    "start": "2134200",
    "end": "2139960"
  },
  {
    "text": "quotes So if you have if you don't Define this or you know strictly uh",
    "start": "2139960",
    "end": "2145800"
  },
  {
    "text": "mandate this in your coding style some guy might use single qu another guy might use double qu and if you want to standardize on certain things you need",
    "start": "2145800",
    "end": "2152520"
  },
  {
    "text": "to do this non-destructive modification because you just want to change all the quotes you you don't care about anything",
    "start": "2152520",
    "end": "2159240"
  },
  {
    "text": "else and of course care must be taken if you change double quoted string that",
    "start": "2159240",
    "end": "2164560"
  },
  {
    "text": "contains double quote then you need some escaping uh style formatter uh so the challenge in",
    "start": "2164560",
    "end": "2172400"
  },
  {
    "start": "2166000",
    "end": "2166000"
  },
  {
    "text": "formatting style is because sometime you have to do it manually and and uh you",
    "start": "2172400",
    "end": "2177920"
  },
  {
    "text": "need to specify typical tools say I want four spaces in ination and I want curly",
    "start": "2177920",
    "end": "2184040"
  },
  {
    "text": "bases in its online so one of these tool code pter does it differently so you",
    "start": "2184040",
    "end": "2189440"
  },
  {
    "text": "give code Pinter a code that you want it to be so it's like a sample code and",
    "start": "2189440",
    "end": "2194720"
  },
  {
    "text": "that's uh that's something that code Pinter will read and then deduce what",
    "start": "2194720",
    "end": "2199960"
  },
  {
    "text": "kind of styling uh do you want so if if if your sample has for space initation",
    "start": "2199960",
    "end": "2205359"
  },
  {
    "text": "then it will assume that you use for for space initation and then it will apply to whatever code that you feed to to the",
    "start": "2205359",
    "end": "2212119"
  },
  {
    "text": "tools so instead of expectedly say to the tools that hey I want the way I want",
    "start": "2212119",
    "end": "2217560"
  },
  {
    "text": "the cly Braes in this place you just give a sample and then it will deduce it same case for quot right if if your",
    "start": "2217560",
    "end": "2224079"
  },
  {
    "text": "entire code uses single quote and then that that is given at sample whenever it",
    "start": "2224079",
    "end": "2230800"
  },
  {
    "text": "encounters double quote then it will give you warning usually use single quote why do you use double quote right",
    "start": "2230800",
    "end": "2236240"
  },
  {
    "text": "now rewrite and regenerate this is possible through syntax code modification so in this case I par the",
    "start": "2236240",
    "end": "2243440"
  },
  {
    "text": "expression and then I can just change the value of the constant there from 42 to something else and then I can",
    "start": "2243440",
    "end": "2249480"
  },
  {
    "text": "regenerate the code and this is exactly what the code modification uh",
    "start": "2249480",
    "end": "2256160"
  },
  {
    "text": "works so in this particular examples I can shorten the entire code using this because I don't need to use very long",
    "start": "2256160",
    "end": "2262319"
  },
  {
    "text": "function arguments as the names and there's an project called s mangle that does all this syntax stre messaging so",
    "start": "2262319",
    "end": "2269680"
  },
  {
    "text": "that the overal execu execution of the program won't change but the code itself",
    "start": "2269680",
    "end": "2275960"
  },
  {
    "text": "gets much sorter there's also something called free shcking where uh if you write a lot of",
    "start": "2275960",
    "end": "2283440"
  },
  {
    "text": "code and then you write a function that never gets executed anywhere then it can remove that because uh it looks at all",
    "start": "2283440",
    "end": "2290560"
  },
  {
    "text": "the three and then kind of shake it and then at one point one will drop because it's not being",
    "start": "2290560",
    "end": "2296040"
  },
  {
    "start": "2295000",
    "end": "2295000"
  },
  {
    "text": "used syntax augmentation so say you're not happy with JavaScript you want to use something else and a lot of people",
    "start": "2296040",
    "end": "2301640"
  },
  {
    "text": "use cycript there's Dart right now there's typescript and and the way you accent the syntax of JavaScript is",
    "start": "2301640",
    "end": "2307000"
  },
  {
    "text": "through POS scenarios either adding some new syntax or borrow something from the future so",
    "start": "2307000",
    "end": "2314000"
  },
  {
    "text": "low level JavaScript changes uh the syntax not changes introduce a bunch of",
    "start": "2314000",
    "end": "2320200"
  },
  {
    "text": "lowlevel features of javascrip so that you can use uh say data types so instead of just you know OPAC variable type you",
    "start": "2320200",
    "end": "2327599"
  },
  {
    "text": "can def Define this is 8bit integers this is unsign 32 bits and so on this is a Moosa resarch project and if you type",
    "start": "2327599",
    "end": "2335520"
  },
  {
    "text": "this it will compile to JavaScript so this is what you type and the genetic",
    "start": "2335520",
    "end": "2340720"
  },
  {
    "text": "code is something that your browser will execute pretty much like coffe script but different synex there's also sweet Jazz and",
    "start": "2340720",
    "end": "2347400"
  },
  {
    "text": "another Mozilla project where you can define a macro and then you can use it later so in this case",
    "start": "2347400",
    "end": "2353880"
  },
  {
    "text": "uh you can create a new syntax for defining function by using def instead",
    "start": "2353880",
    "end": "2359640"
  },
  {
    "text": "of function something transpilation how many of you",
    "start": "2359640",
    "end": "2365560"
  },
  {
    "start": "2361000",
    "end": "2361000"
  },
  {
    "text": "are familiar with the concept of transpilation so transpilation uh kind of like",
    "start": "2365560",
    "end": "2372079"
  },
  {
    "text": "compilation but it's called trans because apparently it's just compile some flavor of JavaScript to another",
    "start": "2372079",
    "end": "2378560"
  },
  {
    "text": "flavor of JavaScript so if it's cycript it's completely different but transpilation is some some JavaScript uh",
    "start": "2378560",
    "end": "2385560"
  },
  {
    "text": "syntax that is that doesn't uh exist right now to something that you can use",
    "start": "2385560",
    "end": "2390599"
  },
  {
    "text": "for example the next version of xar script next version of xar script will",
    "start": "2390599",
    "end": "2395680"
  },
  {
    "text": "introduce the concept of uh class and of course you can use it right",
    "start": "2395680",
    "end": "2401119"
  },
  {
    "text": "now because no browser support class but you can totally type this and then get it compiled or transpiled to the",
    "start": "2401119",
    "end": "2407960"
  },
  {
    "text": "following contract over there that can be executed by uh a browser today and uh",
    "start": "2407960",
    "end": "2415119"
  },
  {
    "text": "you can use use it right now there's a project to do that and this is not example of non-destructive",
    "start": "2415119",
    "end": "2421720"
  },
  {
    "text": "uh uh Source modification because if you look at the code here all your comments are still there so the tools doesn't",
    "start": "2421720",
    "end": "2428359"
  },
  {
    "text": "modify the transpiler doesn't touch anything that it doesn't care about so in this case it only looks for class",
    "start": "2428359",
    "end": "2434040"
  },
  {
    "text": "syntax and then modified that it doesn't care about anything else there's a a transpal from Google",
    "start": "2434040",
    "end": "2440920"
  },
  {
    "text": "called trer and it does the same but trer regenerates the entire code so if you have commands if you use for space",
    "start": "2440920",
    "end": "2448839"
  },
  {
    "text": "initation if you use blank lines everything will be gone it also has uh easp next will",
    "start": "2448839",
    "end": "2456880"
  },
  {
    "start": "2451000",
    "end": "2451000"
  },
  {
    "text": "support uh modu definitions so you don't need to use this immediately infolded function",
    "start": "2456880",
    "end": "2463319"
  },
  {
    "text": "expression that is very cryptic for uh beginners and again if I put some line",
    "start": "2463319",
    "end": "2468480"
  },
  {
    "text": "Commons there it will exist in the transpal version so if you want to do this there's a project called harmonizer",
    "start": "2468480",
    "end": "2475079"
  },
  {
    "text": "which basically borrows the future so you can start using Harmony which is",
    "start": "2475079",
    "end": "2480599"
  },
  {
    "text": "next generation of EOS script by transpiling it into something that can be executed today",
    "start": "2480599",
    "end": "2488040"
  },
  {
    "text": "anyone wants class construct in JavaScript or everyone is familiar or happy with the on object and",
    "start": "2488319",
    "end": "2496119"
  },
  {
    "text": "prototypes Some People Want it so so let's talk about the Future these",
    "start": "2496119",
    "end": "2501680"
  },
  {
    "text": "are all things that you can try right now and uh those project exists and you can start using",
    "start": "2501680",
    "end": "2508280"
  },
  {
    "text": "it code review so every time someone creates a a patch or submit the PO request we need to go through all the",
    "start": "2508280",
    "end": "2515599"
  },
  {
    "start": "2509000",
    "end": "2509000"
  },
  {
    "text": "details like hey the coding sty is wrong it's not tested this way and this way and this way with traffic C you could",
    "start": "2515599",
    "end": "2522319"
  },
  {
    "text": "totally automate this you can put in any kind of analysis that you want right I mentioned before what if we",
    "start": "2522319",
    "end": "2527839"
  },
  {
    "text": "automatically check the syntax uh for a patch because then you don't need to make sure that uh uh it",
    "start": "2527839",
    "end": "2535359"
  },
  {
    "text": "passes the validator so a lot of things that people do as part of code review process that should be automated and I",
    "start": "2535359",
    "end": "2541520"
  },
  {
    "text": "think that's one of the most ambitious goal for next year uh meaning that uh we",
    "start": "2541520",
    "end": "2547559"
  },
  {
    "text": "should not try to analyze the code manually if you have done this already couple of times for example if someone",
    "start": "2547559",
    "end": "2553760"
  },
  {
    "text": "uh if the coding style has to follow certain standard then rather than checking it by hand that should be one",
    "start": "2553760",
    "end": "2560800"
  },
  {
    "text": "of the tools that is uh placed there uh syntax query so you've seen a",
    "start": "2560800",
    "end": "2567280"
  },
  {
    "start": "2564000",
    "end": "2564000"
  },
  {
    "text": "simple code linting example where I look for double equal but I wish that we can",
    "start": "2567280",
    "end": "2572359"
  },
  {
    "text": "we could Define uh a way a syntax to look for certain particular construct in your",
    "start": "2572359",
    "end": "2578720"
  },
  {
    "text": "code for example using CSS sctor as a model so if I want to find this",
    "start": "2578720",
    "end": "2584359"
  },
  {
    "text": "assignment expression then I can just type this and it will immediately give me oh use it in this location and uh and",
    "start": "2584359",
    "end": "2591839"
  },
  {
    "text": "then I can then say to the user oh why do you use uh this operator in a in a in",
    "start": "2591839",
    "end": "2598040"
  },
  {
    "text": "a branch condition you might not want to do that because that's supposed to do",
    "start": "2598040",
    "end": "2604280"
  },
  {
    "text": "assignment so CSS Lector I'm sure everyone is familiar with CSS Lector uh rather than using the Dom API that you",
    "start": "2604280",
    "end": "2610839"
  },
  {
    "text": "have to get the first note and then try try first and the next next next you just type simple construct and then it",
    "start": "2610839",
    "end": "2617000"
  },
  {
    "text": "will pick exactly the elements that you want that match that particular criteria copy paste mistake can someone spot why",
    "start": "2617000",
    "end": "2624400"
  },
  {
    "start": "2621000",
    "end": "2621000"
  },
  {
    "text": "it's wrong or why the code is wrong what did I do or what I didn't do after",
    "start": "2624400",
    "end": "2632559"
  },
  {
    "text": "I yes and this is a nice example because is simple and I align the code so this",
    "start": "2633559",
    "end": "2640319"
  },
  {
    "text": "one is wrong right because you know it's supposed to it has to be Y2 because it doesn't make sense to put that condition",
    "start": "2640319",
    "end": "2647000"
  },
  {
    "text": "again so a lot of tools in different programming language uh exist to detect",
    "start": "2647000",
    "end": "2653440"
  },
  {
    "text": "that kind of copy copy paste mistake and I think it's matter of time before we have to have that uh as part of our",
    "start": "2653440",
    "end": "2659599"
  },
  {
    "text": "JavaScript development workflow this really helps uh in particular again in the Contex of code review because you",
    "start": "2659599",
    "end": "2666440"
  },
  {
    "text": "you might look at the patch and because you know it's 2: a.m. in the night you will not notice that that one is",
    "start": "2666440",
    "end": "2673520"
  },
  {
    "text": "wrong def factoring uh a lot of",
    "start": "2673520",
    "end": "2679240"
  },
  {
    "text": "yes so the question is about how this works uh I haven't implemented this but",
    "start": "2681760",
    "end": "2687040"
  },
  {
    "text": "one of the things that a lot of other tools like in C C+ and Java works is B and youris stics so like in this if I have if I",
    "start": "2687040",
    "end": "2695839"
  },
  {
    "text": "detect that this is actually conditional for and conditional and then you have two conditions there it doesn't make",
    "start": "2695839",
    "end": "2702200"
  },
  {
    "text": "make sense so they're all the same so something must be something should be different because otherwise I would not",
    "start": "2702200",
    "end": "2707680"
  },
  {
    "text": "need the second line the the last part of the second line there's also something like code",
    "start": "2707680",
    "end": "2715040"
  },
  {
    "text": "coverity where for example if you create a function and you call it a million times and you always check the written",
    "start": "2715040",
    "end": "2721079"
  },
  {
    "text": "value and one time you don't check the written value it'll give you warning because hey all these years all these",
    "start": "2721079",
    "end": "2726599"
  },
  {
    "text": "days you always check the written value of this function why don't you do it right now so there must be something suspicious",
    "start": "2726599",
    "end": "2734160"
  },
  {
    "start": "2733000",
    "end": "2733000"
  },
  {
    "text": "there refactoring helper a lot of ID like webst can do that and I think uh if",
    "start": "2734800",
    "end": "2741079"
  },
  {
    "text": "we put a lot of effort uh convention standard into tools one day I can just",
    "start": "2741079",
    "end": "2746520"
  },
  {
    "text": "say I I I create this backbone router and then I want to change the name I don't need to do a search replace",
    "start": "2746520",
    "end": "2752280"
  },
  {
    "text": "because it understand this is the way backbone works",
    "start": "2752280",
    "end": "2757400"
  },
  {
    "text": "and many more semantic diff uh if you commit a code and want to check the diff you do get div it gives you like textual",
    "start": "2757400",
    "end": "2763640"
  },
  {
    "text": "diff which is pretty useless what I want to see is like did I just suddenly declare new variable that what kind of",
    "start": "2763640",
    "end": "2769839"
  },
  {
    "text": "block did I remove uh and so on syntax error this is uh useful for educational",
    "start": "2769839",
    "end": "2775520"
  },
  {
    "text": "proposes because a lot of time if you write a code and uh browser the browser",
    "start": "2775520",
    "end": "2780640"
  },
  {
    "text": "any browser refuse to work what you get is unexpected token semicolon so it",
    "start": "2780640",
    "end": "2785880"
  },
  {
    "text": "doesn't tell you what's wrong there why why did I make that mistake so it tells",
    "start": "2785880",
    "end": "2791040"
  },
  {
    "text": "why the syntax doesn't conform to the specification to the grammar defin the specification but it doesn't try to",
    "start": "2791040",
    "end": "2798000"
  },
  {
    "text": "deduce the construct that causes that kind of problem symbolic execution is something better than uh just Dynamic",
    "start": "2798000",
    "end": "2804760"
  },
  {
    "text": "analysis when you write the unit test uh you have to Define your fixtures by hand right so if I create a function that",
    "start": "2804760",
    "end": "2811079"
  },
  {
    "text": "adds two numbers and then I write the unit test I have to tell all for try to add one and one and see if it's two two",
    "start": "2811079",
    "end": "2818160"
  },
  {
    "text": "and one and see if it's three and so on and so on works with symbolic execution it executes your code and then sees that",
    "start": "2818160",
    "end": "2824440"
  },
  {
    "text": "oh you have a deficient operator let's try to find a fixture that trigger defi",
    "start": "2824440",
    "end": "2830119"
  },
  {
    "text": "by zero and see if your program behaves or not uh declar declarative transformation",
    "start": "2830119",
    "end": "2836359"
  },
  {
    "text": "I already mentioned about uh declarative what was that syntax uh query where you",
    "start": "2836359",
    "end": "2842079"
  },
  {
    "text": "can ask hey this is a this is that's an assignment expression in an and if",
    "start": "2842079",
    "end": "2847559"
  },
  {
    "text": "conditional but we also want to have decorative transformation so I can totally change hey you use class syntax",
    "start": "2847559",
    "end": "2853559"
  },
  {
    "text": "from EAS script 6 or seven I want to transform it to something that the browser can execute using transpilation",
    "start": "2853559",
    "end": "2860559"
  },
  {
    "text": "but not writing any uh long code for that and pattern matching pattern matching is very useful to detect the",
    "start": "2860559",
    "end": "2866400"
  },
  {
    "text": "copy paste copy paste mistake because I want to be able to find I want to be able to declare if there's an end",
    "start": "2866400",
    "end": "2872640"
  },
  {
    "text": "condition uh please check whether there's a similar condition in one of those uh uh",
    "start": "2872640",
    "end": "2880040"
  },
  {
    "text": "branches so all this parts of infrastructure enables a lot of uh different type of user anything from uh",
    "start": "2880040",
    "end": "2886359"
  },
  {
    "text": "tools anything from unifications to Cod coverage and the goal of all these tools of of course to you know try to analyze",
    "start": "2886359",
    "end": "2893599"
  },
  {
    "start": "2889000",
    "end": "2889000"
  },
  {
    "text": "something that no tools can analyze before and uh hopefully that will uh",
    "start": "2893599",
    "end": "2899800"
  },
  {
    "text": "Empower new users so that they can make less mistake and then bring a lot of uh",
    "start": "2899800",
    "end": "2906280"
  },
  {
    "text": "features so that power user or someone that expert on JavaScript can still keep",
    "start": "2906280",
    "end": "2912160"
  },
  {
    "text": "uh can still be productive writing application with J thank you",
    "start": "2912160",
    "end": "2917440"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2917440",
    "end": "2929280"
  }
]